{"home.repos.pwc.inspect_result.new-stone-object_DNTD.None.config.Configuration.__new__": [[15, 22], ["hasattr", "hasattr", "helper.utils.EasyDict.__new__", "Configuration._instance.init"], "methods", ["home.repos.pwc.inspect_result.new-stone-object_DNTD.evaluator_tool.Evaluator.Evaluator.__new__", "home.repos.pwc.inspect_result.new-stone-object_DNTD.None.config.Configuration.init"], ["def", "__new__", "(", "cls", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "not", "hasattr", "(", "Configuration", ",", "\"_instance\"", ")", ":", "\n", "            ", "with", "Configuration", ".", "_instance_lock", ":", "\n", "                ", "if", "not", "hasattr", "(", "Configuration", ",", "\"_instance\"", ")", ":", "\n", "                    ", "Configuration", ".", "_instance", "=", "EasyDict", ".", "__new__", "(", "cls", ")", "\n", "Configuration", ".", "_instance", ".", "init", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "", "", "", "return", "Configuration", ".", "_instance", "\n", "\n"]], "home.repos.pwc.inspect_result.new-stone-object_DNTD.None.config.Configuration.instance": [[24, 27], ["config.Configuration"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "instance", "(", ")", ":", "\n", "        ", "return", "Configuration", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.new-stone-object_DNTD.None.config.Configuration.init": [[31, 234], ["helper.utils.EasyDict.__init__", "helper.utils.pathjoin", "argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "helper.utils.pathjoin", "helper.utils.pathjoin", "dataset.file_table.get_dataset_path_by_name", "helper.utils.pathjoin", "helper.utils.pathjoin", "config.Configuration.OPTIM.upper", "os.path.dirname", "argparse.ArgumentParser.parse_args", "config.Configuration.update", "helper.utils.pathjoin", "helper.utils.pathjoin", "helper.utils.pathjoin", "dataset.file_table.get_dataset_path_by_name", "config.Configuration.EVALUATOR_GTS.append", "helper.utils.pathjoin", "config.Configuration.TEST_IMG_SAVE_PATHS.append", "config.Configuration.DATASET_TEST_ROOT_DIRS.append", "config.Configuration.DATASET_TEST_LIST_PATHS.append", "config.Configuration.EVALUATOR_DIRS.append", "config.Configuration.EVALUATOR_GTS.append", "config.Configuration.DATASET_TEST_ROOT_DIRS.append", "config.Configuration.DATASET_TEST_LIST_PATHS.append", "config.Configuration.EVALUATOR_DATASETS.append", "len", "helper.utils.pathjoin", "len"], "methods", ["home.repos.pwc.inspect_result.new-stone-object_DNTD.base_model.ResNet.ResNet.__init__", "home.repos.pwc.inspect_result.new-stone-object_DNTD.dataset.file_table.get_dataset_path_by_name", "home.repos.pwc.inspect_result.new-stone-object_DNTD.dataset.file_table.get_dataset_path_by_name"], ["def", "init", "(", "self", ",", "use_arg_parser", "=", "True", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "# running setting", "\n", "self", ".", "DISABLE_TRAIN", "=", "False", "\n", "self", ".", "DISABLE_TEST", "=", "False", "\n", "self", ".", "DISABLE_EVAL", "=", "False", "\n", "\n", "# dataset setting", "\n", "self", ".", "DATASET_TRAIN_ROOT_DIR", "=", "None", "\n", "self", ".", "DATASET_TRAIN_LIST_PATH", "=", "None", "\n", "self", ".", "DATASET_TEST_ROOT_DIR", "=", "None", "\n", "self", ".", "DATASET_TEST_LIST_PATH", "=", "None", "\n", "self", ".", "DATASET_NAME", "=", "None", "\n", "self", ".", "DATASET_TRAIN_DIR", "=", "None", "\n", "self", ".", "DATASET_TEST_DIR", "=", "None", "\n", "self", ".", "DATASET_IS_SCALE", "=", "False", "\n", "self", ".", "RANDOM_BRIGHT", "=", "False", "\n", "\n", "# training setting", "\n", "self", ".", "BATCH_SIZE", "=", "1", "\n", "self", ".", "CROP_SIZE", "=", "None", "\n", "self", ".", "LEARNING_RATE", "=", "0.007", "\n", "self", ".", "EPOCH", "=", "20", "\n", "self", ".", "MOMENTUM", "=", "0.9", "\n", "self", ".", "WEIGHT_DECAY", "=", "0.0", "\n", "self", ".", "PRETRAINED_MODEL_PATH", "=", "None", "\n", "self", ".", "STEP_INTERVAL", "=", "10", "\n", "self", ".", "DROP_RATE", "=", "0", "\n", "self", ".", "DISABLE_VISUAL", "=", "False", "\n", "self", ".", "OPTIM", "=", "\"ADAM\"", "\n", "self", ".", "MODEL_NAME", "=", "\"efficientnet-b3\"", "\n", "self", ".", "RESNET_SCALE", "=", "4", "\n", "\n", "# gpu", "\n", "self", ".", "USE_GPU", "=", "None", "\n", "\n", "# model saving", "\n", "self", ".", "MODEL_SAVE_ROOT_DIR", "=", "None", "\n", "self", ".", "MODEL_SAVE_DIR_NAME", "=", "None", "\n", "self", ".", "LOG_DIR", "=", "pathjoin", "(", "\n", "os", ".", "path", ".", "dirname", "(", "__file__", ")", ",", "\n", "'logs'", ",", "\n", ")", "\n", "\n", "# hyper parameters", "\n", "self", ".", "TRAIN_DOWN_ITER", "=", "2", "/", "3", "\n", "self", ".", "S_LOSS_GAMA", "=", "3", "\n", "\n", "# testting model path", "\n", "self", ".", "TEST_MODEL_PTH_PATH", "=", "None", "\n", "\n", "# eval setting", "\n", "self", ".", "EVALUATOR_DIR", "=", "None", "\n", "self", ".", "EVAL_MEASURE_LIST", "=", "None", "\n", "self", ".", "EVALUATOR_SUMMARY_FILE_PATH", "=", "None", "\n", "self", ".", "EVALUATOR_DATASETS", "=", "None", "\n", "# proc name", "\n", "self", ".", "PROC_NAME", "=", "None", "\n", "\n", "parser", "=", "ArgumentParser", "(", "description", "=", "\"Configuration of the System\"", ")", "\n", "parser", ".", "add_argument", "(", "'-is_scale'", ",", "'--DATASET_IS_SCALE'", ",", "action", "=", "'store_true'", ",", "default", "=", "self", ".", "DATASET_IS_SCALE", ")", "\n", "parser", ".", "add_argument", "(", "'-random_bright'", ",", "'--RANDOM_BRIGHT'", ",", "action", "=", "'store_true'", ",", "default", "=", "self", ".", "RANDOM_BRIGHT", ")", "\n", "parser", ".", "add_argument", "(", "'-model_name'", ",", "'--MODEL_NAME'", ",", "type", "=", "str", ",", "default", "=", "self", ".", "MODEL_NAME", ")", "\n", "parser", ".", "add_argument", "(", "'-s_loss_gama'", ",", "'--S_LOSS_GAMA'", ",", "type", "=", "int", ",", "default", "=", "self", ".", "S_LOSS_GAMA", ")", "\n", "parser", ".", "add_argument", "(", "'-resnet_scale'", ",", "'--RESNET_SCALE'", ",", "type", "=", "float", ",", "default", "=", "self", ".", "RESNET_SCALE", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'-train_down_iter'", ",", "'--TRAIN_DOWN_ITER'", ",", "type", "=", "float", ",", "default", "=", "self", ".", "TRAIN_DOWN_ITER", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'-disable_test'", ",", "'--DISABLE_TEST'", ",", "action", "=", "'store_true'", ",", "default", "=", "self", ".", "DISABLE_TEST", ")", "\n", "parser", ".", "add_argument", "(", "'-disable_train'", ",", "'--DISABLE_TRAIN'", ",", "action", "=", "'store_true'", ",", "default", "=", "self", ".", "DISABLE_TRAIN", ")", "\n", "parser", ".", "add_argument", "(", "'-disable_eval'", ",", "'--DISABLE_EVAL'", ",", "action", "=", "'store_true'", ",", "default", "=", "self", ".", "DISABLE_EVAL", ")", "\n", "parser", ".", "add_argument", "(", "'-disable_visual'", ",", "'--DISABLE_VISUAL'", ",", "action", "=", "'store_true'", ",", "default", "=", "self", ".", "DISABLE_VISUAL", ")", "\n", "parser", ".", "add_argument", "(", "'-d'", ",", "'--DATASET_NAME'", ",", "required", "=", "True", ",", "type", "=", "str", ",", "default", "=", "self", ".", "DATASET_NAME", ",", "choices", "=", "\"DUT-OMRON DUTS ECSSD HKU-IS PASCAL-S SOD\"", ".", "split", "(", "\" \"", ")", ")", "\n", "parser", ".", "add_argument", "(", "'-b'", ",", "'--BATCH_SIZE'", ",", "type", "=", "int", ",", "default", "=", "self", ".", "BATCH_SIZE", ")", "\n", "parser", ".", "add_argument", "(", "'-crop'", ",", "'--CROP_SIZE'", ",", "type", "=", "int", ",", "default", "=", "self", ".", "CROP_SIZE", ")", "\n", "parser", ".", "add_argument", "(", "'-lr'", ",", "'--LEARNING_RATE'", ",", "type", "=", "float", ",", "default", "=", "self", ".", "LEARNING_RATE", ")", "\n", "parser", ".", "add_argument", "(", "'-epoch'", ",", "'--EPOCH'", ",", "type", "=", "int", ",", "default", "=", "self", ".", "EPOCH", ")", "\n", "parser", ".", "add_argument", "(", "'-weight_decay'", ",", "'--WEIGHT_DECAY'", ",", "type", "=", "float", ",", "default", "=", "self", ".", "WEIGHT_DECAY", ")", "\n", "parser", ".", "add_argument", "(", "'-drop_rate'", ",", "'--DROP_RATE'", ",", "type", "=", "float", ",", "default", "=", "self", ".", "DROP_RATE", ")", "\n", "parser", ".", "add_argument", "(", "'-step'", ",", "'--STEP_INTERVAL'", ",", "type", "=", "int", ",", "default", "=", "self", ".", "STEP_INTERVAL", ")", "\n", "parser", ".", "add_argument", "(", "'-optim'", ",", "'--OPTIM'", ",", "type", "=", "str", ",", "default", "=", "self", ".", "OPTIM", ")", "\n", "parser", ".", "add_argument", "(", "'-momentum'", ",", "'--MOMENTUM'", ",", "type", "=", "float", ",", "default", "=", "self", ".", "MOMENTUM", ")", "\n", "parser", ".", "add_argument", "(", "'-pretrain'", ",", "'--PRETRAINED_MODEL_PATH'", ",", "type", "=", "str", ",", "default", "=", "self", ".", "PRETRAINED_MODEL_PATH", ")", "\n", "parser", ".", "add_argument", "(", "'-gpu'", ",", "'--USE_GPU'", ",", "type", "=", "str", ",", "default", "=", "self", ".", "USE_GPU", ")", "\n", "parser", ".", "add_argument", "(", "'-proc'", ",", "'--PROC_NAME'", ",", "type", "=", "str", ",", "default", "=", "self", ".", "PROC_NAME", ")", "\n", "parser", ".", "add_argument", "(", "'-test_model'", ",", "'--TEST_MODEL_PTH_PATH'", ",", "type", "=", "str", ",", "default", "=", "self", ".", "TEST_MODEL_PTH_PATH", ")", "\n", "parser", ".", "add_argument", "(", "'-save'", ",", "'--MODEL_SAVE_DIR_NAME'", ",", "required", "=", "True", ",", "type", "=", "str", ",", "default", "=", "self", ".", "MODEL_SAVE_DIR_NAME", ")", "\n", "parser", ".", "add_argument", "(", "'-eval_dir'", ",", "'--EVALUATOR_DIR'", ",", "type", "=", "str", ",", "default", "=", "self", ".", "EVALUATOR_DIR", ")", "\n", "parser", ".", "add_argument", "(", "'-eval_m_list'", ",", "'--EVAL_MEASURE_LIST'", ",", "nargs", "=", "'+'", ",", "type", "=", "str", ",", "choices", "=", "\"max-F mean-F MAE S precision recall\"", ".", "split", "(", "\" \"", ")", ",", "default", "=", "self", ".", "EVAL_MEASURE_LIST", ")", "\n", "parser", ".", "add_argument", "(", "'-eval_file'", ",", "'--EVALUATOR_SUMMARY_FILE_PATH'", ",", "type", "=", "str", ",", "default", "=", "self", ".", "EVALUATOR_SUMMARY_FILE_PATH", ")", "\n", "parser", ".", "add_argument", "(", "'-eval_d'", ",", "'--EVALUATOR_DATASETS'", ",", "nargs", "=", "'+'", ",", "type", "=", "str", ",", "choices", "=", "\"ALL DUT-OMRON DUTS ECSSD HKU-IS PASCAL-S SOD\"", ".", "split", "(", "\" \"", ")", ",", "default", "=", "self", ".", "EVALUATOR_DATASETS", ")", "\n", "\n", "if", "use_arg_parser", ":", "\n", "            ", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "self", ".", "update", "(", "args", ".", "__dict__", ")", "\n", "\n", "# MODEL_SAVE_PATH", "\n", "", "self", ".", "MODEL_SAVE_ROOT_DIR", "=", "pathjoin", "(", "\n", "self", ".", "LOG_DIR", ",", "\n", "self", ".", "MODEL_SAVE_DIR_NAME", ",", "\n", ")", "\n", "\n", "self", ".", "MODEL_SAVE_PATH", "=", "pathjoin", "(", "\n", "self", ".", "MODEL_SAVE_ROOT_DIR", ",", "\n", "'save_models'", ",", "\n", ")", "\n", "\n", "if", "self", ".", "BATCH_SIZE", "!=", "1", ":", "\n", "            ", "assert", "self", ".", "CROP_SIZE", "is", "not", "None", ",", "\"CROP_SIZE can't be null, if \"", "\"BATCH_SIZE != 1, please use -crop to specify the paramter\"", "\n", "\n", "", "if", "self", ".", "EVAL_MEASURE_LIST", "is", "None", ":", "\n", "            ", "self", ".", "EVAL_MEASURE_LIST", "=", "[", "\"max-F\"", ",", "\"MAE\"", ",", "\"S\"", "]", "\n", "\n", "", "tmp_dict", "=", "get_dataset_path_by_name", "(", "self", ".", "DATASET_NAME", ")", "\n", "self", ".", "DATASET_TRAIN_ROOT_DIR", "=", "tmp_dict", "[", "'train_dir_path'", "]", "\n", "self", ".", "DATASET_TRAIN_LIST_PATH", "=", "tmp_dict", "[", "'train_lst_path'", "]", "\n", "self", ".", "DATASET_TEST_ROOT_DIR", "=", "tmp_dict", "[", "'test_dir_path'", "]", "\n", "self", ".", "DATASET_TEST_LIST_PATH", "=", "tmp_dict", "[", "'test_lst_path'", "]", "\n", "self", ".", "DATASET_TRAIN_DIR", "=", "tmp_dict", "[", "'train_dir_name'", "]", "\n", "self", ".", "DATASET_TEST_DIR", "=", "tmp_dict", "[", "'test_dir_name'", "]", "\n", "self", ".", "DATASET_TEST_GT_DIR", "=", "pathjoin", "(", "\n", "self", ".", "DATASET_TEST_ROOT_DIR", ",", "\n", "'GT'", "\n", ")", "\n", "\n", "if", "self", ".", "TEST_MODEL_PTH_PATH", "is", "None", ":", "\n", "            ", "self", ".", "TEST_MODEL_PTH_PATH", "=", "pathjoin", "(", "\n", "self", ".", "MODEL_SAVE_PATH", ",", "\n", "'model-final.pth'", "\n", ")", "\n", "\n", "", "self", ".", "TEST_IMG_SAVE_PATH", "=", "pathjoin", "(", "\n", "self", ".", "MODEL_SAVE_ROOT_DIR", ",", "\n", "'test'", ",", "\n", "self", ".", "DATASET_TEST_DIR", "if", "len", "(", "self", ".", "DATASET_TEST_DIR", ")", "!=", "0", "else", "self", ".", "DATASET_NAME", "\n", ")", "\n", "\n", "self", ".", "OPTIM", "=", "self", ".", "OPTIM", ".", "upper", "(", ")", "\n", "\n", "if", "self", ".", "EVALUATOR_DIR", "is", "None", ":", "\n", "            ", "self", ".", "EVALUATOR_DIR", "=", "self", ".", "TEST_IMG_SAVE_PATH", "\n", "", "if", "self", ".", "EVALUATOR_SUMMARY_FILE_PATH", "is", "None", ":", "\n", "            ", "self", ".", "EVALUATOR_SUMMARY_FILE_PATH", "=", "pathjoin", "(", "\n", "self", ".", "LOG_DIR", ",", "\n", "'ExperimentalNotes.md'", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "EVALUATOR_SUMMARY_FILE_PATH", "=", "pathjoin", "(", "\n", "self", ".", "LOG_DIR", ",", "\n", "self", ".", "EVALUATOR_SUMMARY_FILE_PATH", "\n", ")", "\n", "\n", "", "self", ".", "CMD_STR", "=", "\"python \"", "+", "\" \"", ".", "join", "(", "sys", ".", "argv", ")", "\n", "\n", "if", "self", ".", "EVALUATOR_DATASETS", "is", "not", "None", ":", "\n", "            ", "if", "\"ALL\"", "in", "self", ".", "EVALUATOR_DATASETS", ":", "\n", "                ", "self", ".", "EVALUATOR_DATASETS", "=", "\"DUT-OMRON DUTS ECSSD HKU-IS PASCAL-S SOD\"", ".", "split", "(", ")", "\n", "", "self", ".", "EVALUATOR_GTS", "=", "[", "]", "\n", "self", ".", "TEST_IMG_SAVE_PATHS", "=", "[", "]", "\n", "self", ".", "DATASET_TEST_ROOT_DIRS", "=", "[", "]", "\n", "self", ".", "DATASET_TEST_LIST_PATHS", "=", "[", "]", "\n", "for", "dataset_name", "in", "self", ".", "EVALUATOR_DATASETS", ":", "\n", "                ", "dataset_info", "=", "get_dataset_path_by_name", "(", "dataset_name", ")", "\n", "self", ".", "EVALUATOR_GTS", ".", "append", "(", "pathjoin", "(", "dataset_info", "[", "'test_dir_path'", "]", ",", "'GT'", ")", ")", "\n", "dataset_test_dir_name", "=", "dataset_info", "[", "'test_dir_name'", "]", "\n", "testpath", "=", "pathjoin", "(", "\n", "self", ".", "MODEL_SAVE_ROOT_DIR", ",", "\n", "'test'", ",", "\n", "dataset_test_dir_name", "if", "len", "(", "dataset_test_dir_name", ")", "!=", "0", "else", "dataset_name", "\n", ")", "\n", "self", ".", "TEST_IMG_SAVE_PATHS", ".", "append", "(", "testpath", ")", "\n", "self", ".", "DATASET_TEST_ROOT_DIRS", ".", "append", "(", "dataset_info", "[", "'test_dir_path'", "]", ")", "\n", "self", ".", "DATASET_TEST_LIST_PATHS", ".", "append", "(", "dataset_info", "[", "'test_lst_path'", "]", ")", "\n", "", "self", ".", "EVALUATOR_DIRS", "=", "self", ".", "TEST_IMG_SAVE_PATHS", "\n", "if", "self", ".", "EVALUATOR_DIR", "not", "in", "self", ".", "EVALUATOR_DIRS", ":", "\n", "                ", "self", ".", "EVALUATOR_DIRS", ".", "append", "(", "self", ".", "EVALUATOR_DIR", ")", "\n", "self", ".", "EVALUATOR_GTS", ".", "append", "(", "self", ".", "DATASET_TEST_GT_DIR", ")", "\n", "self", ".", "DATASET_TEST_ROOT_DIRS", ".", "append", "(", "self", ".", "DATASET_TEST_ROOT_DIR", ")", "\n", "self", ".", "DATASET_TEST_LIST_PATHS", ".", "append", "(", "self", ".", "DATASET_TEST_LIST_PATH", ")", "\n", "self", ".", "EVALUATOR_DATASETS", ".", "append", "(", "self", ".", "DATASET_NAME", ")", "\n", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "EVALUATOR_DIRS", "=", "[", "self", ".", "TEST_IMG_SAVE_PATH", "]", "\n", "self", ".", "EVALUATOR_GTS", "=", "[", "self", ".", "DATASET_TEST_GT_DIR", "]", "\n", "self", ".", "TEST_IMG_SAVE_PATHS", "=", "[", "self", ".", "TEST_IMG_SAVE_PATH", "]", "\n", "self", ".", "DATASET_TEST_ROOT_DIRS", "=", "[", "self", ".", "DATASET_TEST_ROOT_DIR", "]", "\n", "self", ".", "DATASET_TEST_LIST_PATHS", "=", "[", "self", ".", "DATASET_TEST_LIST_PATH", "]", "\n", "self", ".", "EVALUATOR_DATASETS", "=", "[", "self", ".", "DATASET_NAME", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.new-stone-object_DNTD.None.config.Configuration.update_eval_list": [[235, 244], ["enumerate"], "methods", ["None"], ["", "", "def", "update_eval_list", "(", "self", ")", ":", "\n", "        ", "for", "i", ",", "dataset_name", "in", "enumerate", "(", "self", ".", "EVALUATOR_DATASETS", ")", ":", "\n", "            ", "self", ".", "DATASET_NAME", "=", "dataset_name", "\n", "self", ".", "EVALUATOR_DIR", "=", "self", ".", "EVALUATOR_DIRS", "[", "i", "]", "\n", "self", ".", "DATASET_TEST_GT_DIR", "=", "self", ".", "EVALUATOR_GTS", "[", "i", "]", "\n", "self", ".", "TEST_IMG_SAVE_PATH", "=", "self", ".", "TEST_IMG_SAVE_PATHS", "[", "i", "]", "\n", "self", ".", "DATASET_TEST_ROOT_DIR", "=", "self", ".", "DATASET_TEST_ROOT_DIRS", "[", "i", "]", "\n", "self", ".", "DATASET_TEST_LIST_PATH", "=", "self", ".", "DATASET_TEST_LIST_PATHS", "[", "i", "]", "\n", "yield", "dataset_name", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.new-stone-object_DNTD.None.run.train": [[31, 134], ["data_provider.sod_dataset.SaliencyDataSet", "torch.utils.data.DataLoader", "helper.optim.Optimizer", "helper.model_saver.ModelSaver", "helper.trainer.Trainer", "helper.trainer.Trainer.train", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "isinstance", "torch.optim.Adam", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.init.kaiming_normal_", "isinstance", "sub_module.modules", "int", "torch.optim.Adam.state.clear", "super().__init__", "SummaryWriter", "data_provider.sod_dataset.SaliencyDataSet.real_label", "data_provider.sod_dataset.SaliencyDataSet.real_image", "data_provider.sod_dataset.SaliencyDataSet.real_label", "torch.cat", "torch.cat", "torch.cat", "torchvision.utils.make_grid", "run..writer.add_scalar", "run..writer.add_image", "run..writer.close", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "m.eval", "m.named_parameters", "isinstance", "isinstance", "len", "helper.utils.pathjoin", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.interpolate().type_as", "len", "MyVisualHelper", "p.requires_grad_", "m.eval", "isinstance", "networks.get_upsampling_weight", "m.weight.data.copy_", "torch.init.constant_", "get_params"], "function", ["home.repos.pwc.inspect_result.new-stone-object_DNTD.efficientnet_pytorch.model.MBConvBlock.train", "home.repos.pwc.inspect_result.new-stone-object_DNTD.base_model.ResNet.ResNet.__init__", "home.repos.pwc.inspect_result.new-stone-object_DNTD.data_provider.sod_dataset.SaliencyDataSet.real_label", "home.repos.pwc.inspect_result.new-stone-object_DNTD.data_provider.sod_dataset.SaliencyDataSet.real_image", "home.repos.pwc.inspect_result.new-stone-object_DNTD.data_provider.sod_dataset.SaliencyDataSet.real_label", "home.repos.pwc.inspect_result.new-stone-object_DNTD.helper.visual_helper.VisualHelper.close", "home.repos.pwc.inspect_result.new-stone-object_DNTD.networks.DNTD._Transition.eval", "home.repos.pwc.inspect_result.new-stone-object_DNTD.networks.DNTD._Transition.eval", "home.repos.pwc.inspect_result.new-stone-object_DNTD.networks.__init__.get_upsampling_weight"], ["def", "train", "(", "config", ":", "Configuration", ")", "->", "None", ":", "\n", "\n", "    ", "if", "config", ".", "DISABLE_TRAIN", ":", "\n", "        ", "return", "\n", "\n", "", "batch_size", "=", "config", ".", "BATCH_SIZE", "\n", "epoch", "=", "config", ".", "EPOCH", "\n", "lr", "=", "config", ".", "LEARNING_RATE", "\n", "crop_size", "=", "config", ".", "CROP_SIZE", "\n", "dataset", "=", "SaliencyDataSet", "(", "config", ".", "DATASET_TRAIN_ROOT_DIR", ",", "config", ".", "DATASET_TRAIN_LIST_PATH", ",", "crop_size", "=", "(", "crop_size", ",", "crop_size", ")", ",", "is_scale", "=", "config", ".", "DATASET_IS_SCALE", ",", "\n", "is_random_flip", "=", "True", ",", "ignore_value", "=", "255", ",", "is_random_brightness", "=", "config", ".", "RANDOM_BRIGHT", ")", "\n", "if", "batch_size", ">", "1", "and", "torch", ".", "cuda", ".", "device_count", "(", ")", ">", "0", ":", "\n", "        ", "torch", ".", "backends", ".", "cudnn", ".", "enable", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "", "trainloader", "=", "DataLoader", "(", "dataset", ",", "batch_size", "=", "batch_size", ",", "num_workers", "=", "batch_size", "if", "batch_size", "<", "10", "else", "10", ",", "drop_last", "=", "True", ",", "shuffle", "=", "True", ",", "pin_memory", "=", "True", ")", "\n", "if", "config", ".", "USE_GPU", "is", "not", "None", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "'cuda'", ")", "\n", "", "else", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", "\n", "# weight initial function", "\n", "", "def", "weight_init", "(", "m", ":", "nn", ".", "Module", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "            ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "a", "=", "0", ",", "mode", "=", "'fan_in'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "m", ".", "eval", "(", ")", "\n", "for", "name", ",", "p", "in", "m", ".", "named_parameters", "(", ")", ":", "\n", "                ", "p", ".", "requires_grad_", "(", "False", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Dropout", ")", ":", "\n", "            ", "m", ".", "eval", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "ConvTranspose2d", ")", ":", "\n", "            ", "assert", "m", ".", "kernel_size", "[", "0", "]", "==", "m", ".", "kernel_size", "[", "1", "]", "\n", "initial_weight", "=", "get_upsampling_weight", "(", "\n", "m", ".", "in_channels", ",", "m", ".", "out_channels", "//", "m", ".", "groups", ",", "m", ".", "kernel_size", "[", "0", "]", ")", "\n", "m", ".", "weight", ".", "data", ".", "copy_", "(", "initial_weight", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "", "", "loss_func", "=", "structure_weighted_binary_cross_entropy_with_logits", "\n", "weight_init_func", "=", "weight_init", "\n", "\n", "def", "optim_create_func", "(", "model", ":", "Net", ",", "lr", ":", "float", ")", ":", "\n", "        ", "def", "get_params", "(", "sub_module", ":", "Module", ",", "mode", "=", "\"weight\"", ")", ":", "\n", "            ", "for", "module", "in", "sub_module", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "module", ",", "(", "nn", ".", "Conv2d", ",", "nn", ".", "ConvTranspose2d", ")", ")", ":", "\n", "                    ", "if", "mode", "==", "\"weight\"", ":", "\n", "                        ", "yield", "module", ".", "weight", "\n", "", "elif", "mode", "==", "\"bias\"", ":", "\n", "                        ", "if", "module", ".", "bias", "is", "not", "None", ":", "\n", "                            ", "yield", "module", ".", "bias", "\n", "", "", "", "", "", "optimizer", "=", "Adam", "(", "params", "=", "[", "{", "'params'", ":", "get_params", "(", "model", ")", "}", ",", "{", "'params'", ":", "get_params", "(", "model", ",", "mode", "=", "\"bias\"", ")", ",", "'weight_decay'", ":", "0", "}", "]", ",", "lr", "=", "lr", ",", "weight_decay", "=", "config", ".", "WEIGHT_DECAY", ")", "\n", "return", "optimizer", "\n", "\n", "", "def", "adjust_lr", "(", "optimizer", ":", "Adam", ",", "lr", ",", "itr", ",", "max_itr", ")", ":", "\n", "        ", "if", "itr", "==", "int", "(", "max_itr", "*", "config", ".", "TRAIN_DOWN_ITER", ")", ":", "\n", "            ", "optimizer", ".", "state", ".", "clear", "(", ")", "\n", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "=", "lr", "*", "0.1", "\n", "\n", "", "", "optim_obj", "=", "Optimizer", "(", "optim_create_func", ",", "len", "(", "dataset", ")", "//", "batch_size", "*", "epoch", ",", "\n", "step_time_interval", "=", "config", ".", "STEP_INTERVAL", ",", "lr_schuduer", "=", "adjust_lr", ")", "\n", "\n", "class", "MyVisualHelper", "(", "VisualHelper", ")", ":", "\n", "\n", "        ", "def", "__init__", "(", "self", ",", "catch_time_interval", ":", "int", ")", "->", "None", ":", "\n", "            ", "super", "(", "MyVisualHelper", ",", "self", ")", ".", "__init__", "(", "catch_time_interval", ")", "\n", "from", "torch", ".", "utils", ".", "tensorboard", "import", "SummaryWriter", "\n", "self", ".", "writer", "=", "SummaryWriter", "(", "pathjoin", "(", "config", ".", "MODEL_SAVE_ROOT_DIR", ",", "'running'", ")", ")", "\n", "\n", "", "def", "call", "(", "self", ",", "epoch", ":", "int", ",", "avg_loss", ":", "float", ",", "imgs_dict", ":", "ImgsType", ")", "->", "None", ":", "\n", "            ", "labels", "=", "dataset", ".", "real_label", "(", "imgs_dict", "[", "'labels'", "]", ")", "\n", "imgs", "=", "dataset", ".", "real_image", "(", "imgs_dict", "[", "'imgs'", "]", ")", "\n", "preds", "=", "dataset", ".", "real_label", "(", "torch", ".", "sigmoid", "(", "imgs_dict", "[", "'preds'", "]", ")", ")", "\n", "if", "preds", ".", "shape", "[", "-", "2", ":", "]", "!=", "labels", ".", "shape", "[", "-", "2", ":", "]", ":", "\n", "                ", "preds", "=", "F", ".", "interpolate", "(", "preds", ".", "float", "(", ")", ",", "size", "=", "labels", ".", "shape", "[", "-", "2", ":", "]", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", ".", "type_as", "(", "preds", ")", "\n", "", "show_image", "=", "torch", ".", "cat", "(", "[", "imgs", ",", "labels", ",", "preds", "]", ",", "dim", "=", "-", "1", ")", "\n", "show_image", "=", "make_grid", "(", "show_image", ",", "nrow", "=", "2", ",", "pad_value", "=", "200", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'Loss/train'", ",", "avg_loss", ",", "self", ".", "_catch_timer", ")", "\n", "self", ".", "writer", ".", "add_image", "(", "'Images/pred'", ",", "show_image", ",", "self", ".", "_catch_timer", ",", "dataformats", "=", "'CHW'", ")", "\n", "\n", "", "def", "close", "(", "self", ")", "->", "None", ":", "\n", "            ", "self", ".", "writer", ".", "close", "(", ")", "\n", "\n", "# every epoch see the pic", "\n", "", "", "model_saver", "=", "ModelSaver", "(", "len", "(", "dataset", ")", "//", "config", ".", "BATCH_SIZE", "*", "5", ",", "save_dir_path", "=", "config", ".", "MODEL_SAVE_PATH", ")", "\n", "\n", "trainer", "=", "Trainer", "(", "\n", "trainloader", ",", "\n", "epoch", ",", "\n", "optim_obj", ",", "\n", "lr", ",", "\n", "device", "=", "device", ",", "\n", "loss_function", "=", "loss_func", ",", "\n", "visual_helper", "=", "MyVisualHelper", "(", "len", "(", "dataset", ")", "//", "config", ".", "BATCH_SIZE", "//", "2", ")", "if", "not", "config", ".", "DISABLE_VISUAL", "else", "None", ",", "\n", "model_saver", "=", "model_saver", ",", "\n", "pretrained_model_path", "=", "config", ".", "PRETRAINED_MODEL_PATH", ",", "\n", "weight_init_func", "=", "weight_init_func", ",", "\n", "drop_rate", "=", "config", ".", "DROP_RATE", ",", "\n", ")", "\n", "trainer", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.new-stone-object_DNTD.None.run.test": [[136, 152], ["data_provider.sod_dataset.SaliencyDataSet", "torch.utils.data.DataLoader", "helper.tester.Tester", "helper.tester.Tester.test", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "data_provider.sod_dataset.SaliencyDataSet.real_label().cpu().numpy().transpose", "data_provider.sod_dataset.SaliencyDataSet.real_label().cpu().numpy", "data_provider.sod_dataset.SaliencyDataSet.real_label().cpu", "data_provider.sod_dataset.SaliencyDataSet.real_label", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid"], "function", ["home.repos.pwc.inspect_result.new-stone-object_DNTD.helper.tester.Tester.test", "home.repos.pwc.inspect_result.new-stone-object_DNTD.data_provider.sod_dataset.SaliencyDataSet.real_label"], ["", "def", "test", "(", "config", ":", "Configuration", ")", "->", "None", ":", "\n", "    ", "if", "config", ".", "DISABLE_TEST", ":", "\n", "        ", "return", "\n", "\n", "", "dataset", "=", "SaliencyDataSet", "(", "config", ".", "DATASET_TEST_ROOT_DIR", ",", "config", ".", "DATASET_TEST_LIST_PATH", ",", "crop_size", "=", "(", "None", ",", "None", ")", ")", "\n", "dataloader", "=", "DataLoader", "(", "dataset", ",", "batch_size", "=", "1", ",", "shuffle", "=", "False", ",", "num_workers", "=", "1", ")", "\n", "\n", "if", "config", ".", "USE_GPU", "is", "not", "None", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "'cuda'", ")", "\n", "", "else", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", "\n", "", "tester", "=", "Tester", "(", "dataloader", ",", "config", ".", "TEST_IMG_SAVE_PATH", ",", "config", ".", "TEST_MODEL_PTH_PATH", ",", "device", "=", "device", ",", "label_trans_func", "=", "lambda", "x", ":", "dataset", ".", "real_label", "(", "torch", ".", "sigmoid", "(", "x", ")", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "transpose", "(", "(", "0", ",", "2", ",", "3", ",", "1", ")", ")", "\n", ")", "\n", "tester", ".", "test", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.new-stone-object_DNTD.None.run.evaluate": [[153, 218], ["helper.evaluator_tool.get_measure", "collections.OrderedDict", "collections.OrderedDict.update", "collections.OrderedDict.items", "helper.utils.pandas2markdown", "os.path.dirname", "helper.utils.mkdirs", "helper.utils.pathjoin", "collections.OrderedDict", "collections.OrderedDict.update", "pandas.DataFrame", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "helper.evaluator_tool.get_measure.keys", "pandas.DataFrame", "os.path.exists", "pd.DataFrame.to_csv", "pandas.concat().to_csv", "portalocker.Lock", "f.write", "isinstance", "os.path.splitext", "time.strftime", "str", "os.path.basename", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "pandas.concat", "pandas.read_csv"], "function", ["home.repos.pwc.inspect_result.new-stone-object_DNTD.evaluator_tool.__init__.get_measure", "home.repos.pwc.inspect_result.new-stone-object_DNTD.helper.utils.pandas2markdown", "home.repos.pwc.inspect_result.new-stone-object_DNTD.helper.utils.mkdirs"], ["", "def", "evaluate", "(", "config", ":", "Configuration", ")", "->", "None", ":", "\n", "    ", "if", "config", ".", "DISABLE_EVAL", ":", "\n", "        ", "return", "\n", "", "if", "config", ".", "USE_GPU", "is", "not", "None", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "'cuda'", ")", "\n", "", "else", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", "", "sal_measure", "=", "get_measure", "(", "config", ".", "EVAL_MEASURE_LIST", ",", "config", ".", "EVALUATOR_DIR", ",", "config", ".", "DATASET_TEST_GT_DIR", ",", "device", ")", "\n", "assert", "'MAE'", "in", "sal_measure", ".", "keys", "(", ")", "\n", "\n", "measure", "=", "OrderedDict", "(", ")", "\n", "measure", "[", "'setting'", "]", "=", "config", ".", "MODEL_SAVE_DIR_NAME", "\n", "measure", "[", "'dataset'", "]", "=", "config", ".", "DATASET_NAME", "\n", "measure", ".", "update", "(", "sal_measure", ")", "\n", "for", "key", ",", "item", "in", "measure", ".", "items", "(", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "item", ",", "Sequence", ")", ":", "\n", "            ", "measure", "[", "key", "]", "=", "[", "item", "]", "\n", "", "else", ":", "\n", "            ", "measure", "[", "key", "]", "=", "[", "str", "(", "item", ")", "]", "\n", "", "", "table_content", "=", "pandas2markdown", "(", "pd", ".", "DataFrame", "(", "measure", ")", ")", "\n", "record_file_dir", "=", "os", ".", "path", ".", "dirname", "(", "config", ".", "EVALUATOR_SUMMARY_FILE_PATH", ")", "\n", "mkdirs", "(", "record_file_dir", ")", "\n", "\n", "# export cvv report", "\n", "csv_filename", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "config", ".", "EVALUATOR_SUMMARY_FILE_PATH", ")", ")", "[", "0", "]", "+", "'.csv'", "\n", "csv_filepath", "=", "pathjoin", "(", "\n", "record_file_dir", ",", "\n", "csv_filename", "\n", ")", "\n", "\n", "data_dict", "=", "OrderedDict", "(", "**", "{", "\n", "'setting'", ":", "str", "(", "config", ".", "MODEL_SAVE_DIR_NAME", ")", ",", "\n", "'dataset'", ":", "str", "(", "config", ".", "DATASET_NAME", ")", ",", "\n", "'lr'", ":", "str", "(", "config", ".", "LEARNING_RATE", ")", ",", "\n", "'epoch'", ":", "str", "(", "config", ".", "EPOCH", ")", ",", "\n", "'step_size'", ":", "str", "(", "config", ".", "STEP_INTERVAL", ")", ",", "\n", "'optim'", ":", "str", "(", "config", ".", "OPTIM", ")", ",", "\n", "'batch_size'", ":", "str", "(", "config", ".", "BATCH_SIZE", ")", ",", "\n", "'crop_size'", ":", "str", "(", "config", ".", "CROP_SIZE", ")", ",", "\n", "'weight_decay'", ":", "str", "(", "config", ".", "WEIGHT_DECAY", ")", ",", "\n", "'drop_rate'", ":", "str", "(", "config", ".", "DROP_RATE", ")", ",", "\n", "}", ")", "\n", "data_dict", ".", "update", "(", "sal_measure", ")", "\n", "record_dataframe", "=", "pd", ".", "DataFrame", "(", "data_dict", ",", "index", "=", "[", "0", "]", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "csv_filepath", ")", ":", "\n", "        ", "record_dataframe", ".", "to_csv", "(", "csv_filepath", ",", "index", "=", "False", ")", "\n", "", "else", ":", "\n", "        ", "pd", ".", "concat", "(", "[", "pd", ".", "read_csv", "(", "csv_filepath", ")", ",", "record_dataframe", "]", ",", "sort", "=", "False", ")", ".", "to_csv", "(", "xlsx_filepath", ",", "index", "=", "False", ")", "\n", "\n", "", "title", "=", "config", ".", "MODEL_SAVE_DIR_NAME", "\n", "file_content", "=", "(", "f\"\\n\"", "\n", "f\"# setting {title}  \\n\"", "\n", "f\"time:{time.strftime('%Y-%m-%d %X')}  \\n\"", "\n", "f\"dataset:{config.DATASET_NAME}  \\n\"", "\n", "f\"test dir:{config.EVALUATOR_DIR}  \\n\"", "\n", "f\"command string:\\n\"", "\n", "f\"```bash\\n\"", "\n", "f\"{config.CMD_STR}\\n\"", "\n", "f\"```\\n\"", "\n", "f\"\\n\"", "\n", "f\"## result\\n\"", "\n", "f\"{table_content}\\n\"", ")", "\n", "with", "portalocker", ".", "Lock", "(", "config", ".", "EVALUATOR_SUMMARY_FILE_PATH", ",", "'a+'", ",", "encoding", "=", "'utf-8'", ",", "timeout", "=", "600", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "file_content", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.new-stone-object_DNTD.None.run.main": [[220, 232], ["config.Configuration", "run.train", "config.Configuration.update_eval_list", "setproctitle", "run.test", "run.evaluate"], "function", ["home.repos.pwc.inspect_result.new-stone-object_DNTD.efficientnet_pytorch.model.MBConvBlock.train", "home.repos.pwc.inspect_result.new-stone-object_DNTD.None.config.Configuration.update_eval_list", "home.repos.pwc.inspect_result.new-stone-object_DNTD.helper.tester.Tester.test", "home.repos.pwc.inspect_result.new-stone-object_DNTD.None.run.evaluate"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "config", "=", "Configuration", "(", ")", "\n", "if", "config", ".", "USE_GPU", "is", "not", "None", ":", "\n", "        ", "os", ".", "environ", "[", "\"CUDA_DEVICE_ORDER\"", "]", "=", "\"PCI_BUS_ID\"", "\n", "os", ".", "environ", "[", "\"CUDA_VISIBLE_DEVICES\"", "]", "=", "config", ".", "USE_GPU", "\n", "", "if", "config", ".", "PROC_NAME", "is", "not", "None", ":", "\n", "        ", "from", "setproctitle", "import", "setproctitle", "\n", "setproctitle", "(", "config", ".", "PROC_NAME", ")", "\n", "", "train", "(", "config", ")", "\n", "for", "_", "in", "config", ".", "update_eval_list", "(", ")", ":", "\n", "        ", "test", "(", "config", ")", "\n", "evaluate", "(", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.new-stone-object_DNTD.data_provider.img_utils.random_scale_image": [[7, 11], ["cv2.resize", "random.randint"], "function", ["None"], ["def", "random_scale_image", "(", "image", ":", "np", ".", "ndarray", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", ":", "\n", "    ", "f_scale", "=", "0.5", "+", "random", ".", "randint", "(", "2", ",", "7", ")", "/", "10.0", "\n", "image", "=", "cv2", ".", "resize", "(", "image", ",", "None", ",", "fx", "=", "f_scale", ",", "fy", "=", "f_scale", ",", "interpolation", "=", "interpolation", ")", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.new-stone-object_DNTD.data_provider.img_utils.random_scale_pair_image": [[13, 18], ["cv2.resize", "cv2.resize", "random.randint"], "function", ["None"], ["", "def", "random_scale_pair_image", "(", "image", ":", "np", ".", "ndarray", ",", "label", ":", "np", ".", "ndarray", ")", ":", "\n", "    ", "f_scale", "=", "0.5", "+", "random", ".", "randint", "(", "3", ",", "7", ")", "/", "10.0", "\n", "image", "=", "cv2", ".", "resize", "(", "image", ",", "None", ",", "fx", "=", "f_scale", ",", "fy", "=", "f_scale", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "label", "=", "cv2", ".", "resize", "(", "label", ",", "None", ",", "fx", "=", "f_scale", ",", "fy", "=", "f_scale", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "return", "image", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.new-stone-object_DNTD.data_provider.img_utils.gen_edge_image": [[20, 33], ["numpy.array", "numpy.asarray", "numpy.gradient", "numpy.asarray"], "function", ["None"], ["", "def", "gen_edge_image", "(", "gray_img_data", ")", ":", "\n", "    ", "\"\"\"\n    :param img_data:\n    :return:\n    \"\"\"", "\n", "img_data", "=", "np", ".", "array", "(", "gray_img_data", ",", "dtype", "=", "np", ".", "float", ")", "\n", "img_data", "=", "img_data", ">", "128", "\n", "img_data", "=", "np", ".", "asarray", "(", "img_data", ",", "dtype", "=", "np", ".", "float", ")", "\n", "gx", ",", "gy", "=", "np", ".", "gradient", "(", "img_data", ")", "\n", "temp_edge", "=", "gy", "*", "gy", "+", "gx", "*", "gx", "\n", "temp_edge", "[", "temp_edge", "!=", "0.0", "]", "=", "255.0", "\n", "temp_edge", "=", "np", ".", "asarray", "(", "temp_edge", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "return", "temp_edge", "\n", "\n"]], "home.repos.pwc.inspect_result.new-stone-object_DNTD.data_provider.img_utils.square_crop": [[35, 64], ["min", "cv2.resize", "cv2.resize", "random.randint", "random.randint"], "function", ["None"], ["", "def", "square_crop", "(", "img", ":", "np", ".", "ndarray", ",", "label", ":", "np", ".", "ndarray", ",", "need_size", ":", "int", ")", "->", "Tuple", "[", "np", ".", "ndarray", ",", "np", ".", "ndarray", "]", ":", "\n", "    ", "\"\"\"\n    random crop a square img from source and label image\n    :param img: source image [H,W,C]\n    :param label: label image [H,W,C]\n    :param need_size: needed size to scale\n    :return:\n    \"\"\"", "\n", "assert", "img", ".", "shape", "[", ":", "2", "]", "==", "label", ".", "shape", "[", ":", "2", "]", "\n", "height", ",", "width", "=", "img", ".", "shape", "[", "0", ":", "2", "]", "\n", "\n", "if", "height", ">=", "width", ":", "\n", "        ", "crop_start", "=", "random", ".", "randint", "(", "0", ",", "height", "-", "width", ")", "\n", "crop_end", "=", "crop_start", "+", "width", "\n", "img", "=", "img", "[", "crop_start", ":", "crop_end", ",", "...", "]", "\n", "label", "=", "label", "[", "crop_start", ":", "crop_end", ",", "...", "]", "\n", "", "else", ":", "\n", "        ", "crop_start", "=", "random", ".", "randint", "(", "0", ",", "width", "-", "height", ")", "\n", "crop_end", "=", "crop_start", "+", "height", "\n", "img", "=", "img", "[", ":", ",", "crop_start", ":", "crop_end", ",", "...", "]", "\n", "label", "=", "label", "[", ":", ",", "crop_start", ":", "crop_end", ",", "...", "]", "\n", "", "min_size", "=", "min", "(", "height", ",", "width", ")", "\n", "if", "min_size", ">=", "need_size", ":", "\n", "        ", "interpolation", "=", "cv2", ".", "INTER_AREA", "\n", "", "else", ":", "\n", "        ", "interpolation", "=", "cv2", ".", "INTER_LINEAR", "\n", "", "img", "=", "cv2", ".", "resize", "(", "img", ",", "dsize", "=", "(", "need_size", ",", "need_size", ")", ",", "interpolation", "=", "interpolation", ")", "\n", "label", "=", "cv2", ".", "resize", "(", "label", ",", "dsize", "=", "(", "need_size", ",", "need_size", ")", ",", "interpolation", "=", "cv2", ".", "INTER_NEAREST", ")", "\n", "return", "img", ",", "label", "\n", "", ""]], "home.repos.pwc.inspect_result.new-stone-object_DNTD.data_provider.sod_dataset.SaliencyDataSet.__init__": [[15, 42], ["numpy.array", "numpy.array", "img_mean.reshape", "img_std.reshape", "i_id.strip", "img_id.split", "os.path.join", "os.path.join", "sod_dataset.SaliencyDataSet.files.append", "open", "i_id.strip"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "root_dir", ":", "str", ",", "list_path", ":", "str", ",", "ignore_value", ":", "float", "=", "255.0", ",", "crop_size", ":", "Tuple", "[", "int", ",", "int", "]", "=", "(", "321", ",", "321", ")", ",", "\n", "img_mean", ":", "np", ".", "ndarray", "=", "np", ".", "array", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ")", ",", "img_std", ":", "np", ".", "ndarray", "=", "np", ".", "array", "(", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", ",", "is_random_flip", ":", "bool", "=", "False", ",", "is_scale", ":", "bool", "=", "False", ",", "is_use_edge", "=", "False", ",", "\n", "is_random_brightness", "=", "False", ")", "->", "None", ":", "\n", "        ", "img_ids", "=", "[", "i_id", ".", "strip", "(", ")", "for", "i_id", "in", "open", "(", "list_path", ")", "if", "i_id", ".", "strip", "(", ")", "!=", "''", "]", "\n", "self", ".", "files", "=", "[", "]", "\n", "self", ".", "img_mean", "=", "img_mean", ".", "reshape", "(", "1", ",", "1", ",", "3", ")", "\n", "self", ".", "img_std", "=", "img_std", ".", "reshape", "(", "1", ",", "1", ",", "3", ")", "\n", "for", "img_id", "in", "img_ids", ":", "\n", "            ", "img_name", ",", "gt_name", "=", "img_id", ".", "split", "(", ")", "\n", "img_file", "=", "os", ".", "path", ".", "join", "(", "root_dir", ",", "img_name", ")", "\n", "label_file", "=", "os", ".", "path", ".", "join", "(", "root_dir", ",", "gt_name", ")", "\n", "self", ".", "files", ".", "append", "(", "{", "\n", "\"img\"", ":", "img_file", ",", "\n", "\"label\"", ":", "label_file", ",", "\n", "}", ")", "\n", "", "self", ".", "is_random_flip", ":", "bool", "=", "is_random_flip", "\n", "self", ".", "is_scale", ":", "bool", "=", "is_scale", "\n", "self", ".", "ignore_value", ":", "float", "=", "ignore_value", "\n", "self", ".", "pad_value", "=", "(", "0", "-", "img_mean", ")", "/", "img_std", "\n", "if", "crop_size", "is", "not", "None", "and", "crop_size", "!=", "(", "0", ",", "0", ")", ":", "\n", "            ", "self", ".", "crop_height", ",", "self", ".", "crop_width", "=", "crop_size", "\n", "", "else", ":", "\n", "            ", "self", ".", "crop_height", ",", "self", ".", "crop_width", "=", "None", ",", "None", "\n", "", "self", ".", "is_random_brightness", "=", "is_random_brightness", "\n", "\n"]], "home.repos.pwc.inspect_result.new-stone-object_DNTD.data_provider.sod_dataset.SaliencyDataSet.__len__": [[43, 45], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "files", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.new-stone-object_DNTD.data_provider.sod_dataset.SaliencyDataSet.__getitem__": [[46, 90], ["cv2.imread", "cv2.imread", "cv2.cvtColor", "os.path.basename", "cv2.cvtColor.astype", "cv2.imread.astype", "cv2.cvtColor.transpose", "cv2.cvtColor", "numpy.max", "list", "numpy.min", "numpy.random.choice", "cv2.cvtColor", "data_provider.img_utils.random_scale_pair_image", "data_provider.img_utils.square_crop", "cv2.cvtColor.copy", "cv2.imread.astype.copy", "range", "int", "random.randint", "range"], "methods", ["home.repos.pwc.inspect_result.new-stone-object_DNTD.data_provider.img_utils.random_scale_pair_image", "home.repos.pwc.inspect_result.new-stone-object_DNTD.data_provider.img_utils.square_crop"], ["", "def", "__getitem__", "(", "self", ",", "index", ":", "int", ")", ":", "\n", "\n", "        ", "datafiles", "=", "self", ".", "files", "[", "index", "]", "\n", "image", "=", "cv2", ".", "imread", "(", "datafiles", "[", "\"img\"", "]", ",", "cv2", ".", "IMREAD_COLOR", ")", "\n", "gray_label", "=", "cv2", ".", "imread", "(", "datafiles", "[", "\"label\"", "]", ",", "cv2", ".", "IMREAD_GRAYSCALE", ")", "\n", "if", "self", ".", "is_random_brightness", ":", "\n", "            ", "img_hsv", "=", "cv2", ".", "cvtColor", "(", "image", ",", "cv2", ".", "COLOR_BGR2HSV", ")", "\n", "m", "=", "np", ".", "max", "(", "img_hsv", "[", "...", ",", "-", "1", "]", ")", "\n", "m", "=", "list", "(", "range", "(", "255", "-", "m", ")", ")", "\n", "l", "=", "np", ".", "min", "(", "img_hsv", "[", "...", ",", "-", "1", "]", ")", "\n", "m", "+=", "[", "-", "i", "for", "i", "in", "range", "(", "l", "+", "1", ")", "]", "\n", "m", "=", "np", ".", "random", ".", "choice", "(", "m", ")", "\n", "img_hsv", "[", "...", ",", "-", "1", "]", "=", "img_hsv", "[", "...", ",", "-", "1", "]", "+", "int", "(", "m", ")", "\n", "image", "=", "cv2", ".", "cvtColor", "(", "img_hsv", ",", "cv2", ".", "COLOR_HSV2BGR", ")", "\n", "\n", "\n", "", "if", "self", ".", "is_scale", ":", "\n", "            ", "image", ",", "gray_label", "=", "random_scale_pair_image", "(", "image", ",", "gray_label", ")", "\n", "\n", "", "if", "self", ".", "crop_width", "is", "not", "None", "and", "self", ".", "crop_height", "is", "not", "None", ":", "\n", "            ", "image", ",", "gray_label", "=", "square_crop", "(", "image", ",", "gray_label", ",", "need_size", "=", "self", ".", "crop_height", ")", "\n", "\n", "", "image", "=", "cv2", ".", "cvtColor", "(", "image", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "filename", "=", "os", ".", "path", ".", "basename", "(", "datafiles", "[", "\"img\"", "]", ")", "\n", "image", "=", "image", ".", "astype", "(", "np", ".", "float32", ")", "\n", "image", "/=", "255.0", "\n", "image", "-=", "self", ".", "img_mean", "\n", "image", "/=", "self", ".", "img_std", "\n", "\n", "label", "=", "gray_label", ".", "astype", "(", "np", ".", "float32", ")", "\n", "label", "/=", "255", "\n", "\n", "\n", "image", "=", "image", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "if", "self", ".", "is_random_flip", ":", "\n", "            ", "if", "random", ".", "randint", "(", "0", ",", "1", ")", "==", "1", ":", "\n", "                ", "image", "=", "image", "[", "...", ",", ":", ":", "-", "1", "]", "\n", "label", "=", "label", "[", "...", ",", ":", ":", "-", "1", "]", "\n", "\n", "\n", "", "", "return", "{", "\n", "'image'", ":", "image", ".", "copy", "(", ")", ",", "\n", "'label'", ":", "label", ".", "copy", "(", ")", ",", "\n", "'filename'", ":", "filename", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.new-stone-object_DNTD.data_provider.sod_dataset.SaliencyDataSet.real_image": [[92, 116], ["torch.no_grad", "torch.from_numpy().to().view().float", "torch.from_numpy().to().view().float", "image.byte.byte.byte", "range", "ignore_index.size", "torch.from_numpy().to().view().expand_as", "torch.from_numpy().to().view", "torch.from_numpy().to().view", "ignore_index.dim", "torch.from_numpy().to().view().expand_as", "torch.from_numpy().to().view", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to().view", "torch.from_numpy().to", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy().to", "torch.from_numpy", "torch.from_numpy"], "methods", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "real_image", "(", "self", ",", "image", ":", "torch", ".", "Tensor", ",", "ignore_index", ":", "torch", ".", "Tensor", "=", "None", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        recover the real image from tensor\n        :param image:\n        :param ignore_index: the bool type tensor with shape [N,H,W] or [N,C,H,W]\n        :return: the real image value with shape [N,C,H,W]\n        \"\"\"", "\n", "# print(image.shape)", "\n", "if", "self", ".", "crop_width", "is", "not", "None", "and", "self", ".", "crop_height", "is", "not", "None", ":", "\n", "            ", "if", "ignore_index", "is", "not", "None", ":", "\n", "                ", "if", "ignore_index", ".", "dim", "(", ")", "==", "4", ":", "\n", "                    ", "ignore_index", "=", "ignore_index", "[", ":", ",", "0", ",", ":", ",", ":", "]", "\n", "", "", "else", ":", "\n", "                ", "ignore_index", "=", "(", "image", "==", "0.0", ")", "\n", "ignore_index", "=", "ignore_index", "[", ":", ",", "0", ",", ":", ",", ":", "]", "\n", "", "for", "i", "in", "range", "(", "ignore_index", ".", "size", "(", "0", ")", ")", ":", "\n", "                ", "image", "[", "i", ",", ":", ",", "ignore_index", "[", "i", "]", "]", "=", "-", "torch", ".", "from_numpy", "(", "self", ".", "img_mean", ")", ".", "to", "(", "image", ".", "dtype", ")", ".", "view", "(", "-", "1", ",", "1", ")", ".", "expand_as", "(", "image", "[", "i", ",", ":", ",", "ignore_index", "[", "i", "]", "]", ")", "\n", "image", "[", "i", ",", ":", ",", "ignore_index", "[", "i", "]", "]", "/=", "torch", ".", "from_numpy", "(", "self", ".", "img_std", ")", ".", "to", "(", "image", ".", "dtype", ")", ".", "view", "(", "-", "1", ",", "1", ")", ".", "expand_as", "(", "image", "[", "i", ",", ":", ",", "ignore_index", "[", "i", "]", "]", ")", "\n", "", "", "image", "*=", "torch", ".", "from_numpy", "(", "self", ".", "img_std", ")", ".", "to", "(", "image", ".", "dtype", ")", ".", "view", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", ".", "float", "(", ")", "\n", "image", "+=", "torch", ".", "from_numpy", "(", "self", ".", "img_mean", ")", ".", "to", "(", "image", ".", "dtype", ")", ".", "view", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", ".", "float", "(", ")", "\n", "image", "*=", "255.0", "\n", "image", "=", "image", ".", "byte", "(", ")", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.new-stone-object_DNTD.data_provider.sod_dataset.SaliencyDataSet.real_label": [[117, 134], ["label.expand.expand.byte", "len", "label.expand.expand.unsqueeze", "label.expand.expand.size", "list", "label.expand.expand.expand"], "methods", ["None"], ["", "def", "real_label", "(", "self", ",", "label", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        return the real image value with shape [C,H,W]\n        :param label: the label shape must be [N,H,W] or [N,C,H,W]\n        :return:\n        \"\"\"", "\n", "ignore_index", "=", "(", "label", "==", "self", ".", "ignore_value", ")", "\n", "label", "*=", "255.0", "\n", "label", "[", "ignore_index", "]", "==", "0.0", "\n", "if", "len", "(", "label", ".", "shape", ")", "==", "3", ":", "\n", "            ", "label", "=", "label", ".", "unsqueeze", "(", "dim", "=", "1", ")", "\n", "", "if", "label", ".", "size", "(", "1", ")", "==", "1", ":", "\n", "            ", "shape", "=", "list", "(", "label", ".", "shape", ")", "\n", "shape", "[", "1", "]", "=", "3", "\n", "label", "=", "label", ".", "expand", "(", "shape", ")", "\n", "", "label", "=", "label", ".", "byte", "(", ")", "\n", "return", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.new-stone-object_DNTD.helper.trainer.Trainer.__init__": [[19, 53], ["torch.device", "torch.device", "torch.device", "torch.device", "object.__init__", "torch.device", "torch.device", "torch.device", "torch.device", "networks.DNTD.to", "trainer.Trainer.model.train", "optim_create_func", "trainer.Trainer.model.to", "trainer.Trainer.model.apply", "trainer.Trainer.model.load_encoder_weight", "print", "networks.DNTD"], "methods", ["home.repos.pwc.inspect_result.new-stone-object_DNTD.base_model.ResNet.ResNet.__init__", "home.repos.pwc.inspect_result.new-stone-object_DNTD.efficientnet_pytorch.model.MBConvBlock.train", "home.repos.pwc.inspect_result.new-stone-object_DNTD.networks.DNTD.Net.load_encoder_weight"], ["def", "__init__", "(", "self", ",", "\n", "dataloader", ":", "DataLoader", ",", "\n", "epoch", ":", "int", ",", "\n", "optim_create_func", ":", "Optimizer", ",", "\n", "lr", ":", "float", ",", "\n", "loss_function", ":", "LOSS_FUNC", ",", "\n", "device", ":", "torch", ".", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", ",", "\n", "pretrained_model_path", ":", "str", "=", "None", ",", "\n", "visual_helper", ":", "VisualHelper", "=", "None", ",", "\n", "model_saver", ":", "ModelSaver", "=", "None", ",", "\n", "weight_init_func", ":", "WEIGHT_INIT_FUNC", "=", "None", ",", "\n", "drop_rate", "=", "0", ",", "\n", "*", "args", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "Trainer", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "cpu_device", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", "self", ".", "model", ":", "Net", "=", "Net", "(", "drop_rate", "=", "drop_rate", ")", ".", "to", "(", "cpu_device", ")", "\n", "self", ".", "model", ".", "train", "(", ")", "\n", "self", ".", "dataloader", "=", "dataloader", "\n", "if", "weight_init_func", "is", "not", "None", ":", "\n", "            ", "self", ".", "model", ".", "apply", "(", "weight_init_func", ")", "\n", "", "if", "pretrained_model_path", "is", "not", "None", ":", "\n", "            ", "ret", "=", "self", ".", "model", ".", "load_encoder_weight", "(", "pretrained_model_path", ")", "\n", "print", "(", "ret", ")", "\n", "\n", "", "self", ".", "epoch", "=", "epoch", "\n", "optim_create_func", "(", "self", ".", "model", ",", "lr", ")", "\n", "self", ".", "optim", "=", "optim_create_func", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "loss_func", "=", "loss_function", "\n", "self", ".", "visual_helper", "=", "visual_helper", "\n", "self", ".", "model_saver", "=", "model_saver", "\n", "self", ".", "start_epoch", "=", "0", "\n", "self", ".", "model", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.new-stone-object_DNTD.helper.trainer.Trainer.train": [[54, 109], ["tqdm.trange", "list", "trainer.Trainer.model_saver", "trainer.Trainer.visual_helper.close", "item[].to", "item[].to", "trainer.Trainer.model", "trainer.Trainer.loss_func", "losses.backward", "trainer.Trainer.optim.step", "print", "labels.unsqueeze.unsqueeze.dim", "labels.unsqueeze.unsqueeze.unsqueeze", "torch.interpolate", "torch.interpolate", "list.append", "trainer.Trainer.visual_helper.add_timer", "trainer.Trainer.visual_helper.is_catch_snapshot", "trainer.Trainer.model_saver", "trainer.Trainer.model.state_dict", "trainer.Trainer.optim.state_dict", "trainer.Trainer.model_saver.state_dict", "losses.item", "sum", "trainer.Trainer.visual_helper", "list.clear", "len", "dict", "trainer.Trainer.model.state_dict", "trainer.Trainer.optim.state_dict", "trainer.Trainer.model_saver.state_dict", "item[].to.cpu().detach", "labels.unsqueeze.unsqueeze.cpu().detach", "trainer.Trainer.cpu().detach", "item[].to.cpu", "labels.unsqueeze.unsqueeze.cpu", "trainer.Trainer.cpu"], "methods", ["home.repos.pwc.inspect_result.new-stone-object_DNTD.helper.visual_helper.VisualHelper.close", "home.repos.pwc.inspect_result.new-stone-object_DNTD.efficientnet_pytorch.utils.SwishImplementation.backward", "home.repos.pwc.inspect_result.new-stone-object_DNTD.helper.optim.Optimizer.step", "home.repos.pwc.inspect_result.new-stone-object_DNTD.helper.visual_helper.VisualHelper.add_timer", "home.repos.pwc.inspect_result.new-stone-object_DNTD.helper.visual_helper.VisualHelper.is_catch_snapshot", "home.repos.pwc.inspect_result.new-stone-object_DNTD.helper.model_saver.ModelSaver.state_dict", "home.repos.pwc.inspect_result.new-stone-object_DNTD.helper.model_saver.ModelSaver.state_dict", "home.repos.pwc.inspect_result.new-stone-object_DNTD.helper.model_saver.ModelSaver.state_dict", "home.repos.pwc.inspect_result.new-stone-object_DNTD.helper.model_saver.ModelSaver.state_dict", "home.repos.pwc.inspect_result.new-stone-object_DNTD.helper.model_saver.ModelSaver.state_dict", "home.repos.pwc.inspect_result.new-stone-object_DNTD.helper.model_saver.ModelSaver.state_dict"], ["", "def", "train", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "visual_helper", "is", "not", "None", ":", "\n", "            ", "loss_list", "=", "list", "(", ")", "\n", "\n", "", "for", "epoch", "in", "trange", "(", "self", ".", "start_epoch", ",", "self", ".", "epoch", ")", ":", "\n", "\n", "            ", "for", "item", "in", "self", ".", "dataloader", ":", "\n", "                ", "imgs", "=", "item", "[", "'image'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "labels", "=", "item", "[", "'label'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "if", "imgs", ".", "shape", "[", "-", "2", ":", "]", "!=", "labels", ".", "shape", "[", "-", "2", ":", "]", ":", "\n", "                    ", "del", "imgs", "\n", "del", "labels", "\n", "print", "(", "f\"{item['filename']} size didn't match!\"", ")", "\n", "continue", "\n", "", "preds", "=", "self", ".", "model", "(", "imgs", ")", "\n", "losses", "=", "0", "\n", "if", "labels", ".", "dim", "(", ")", "==", "3", ":", "\n", "                    ", "labels", "=", "labels", ".", "unsqueeze", "(", "dim", "=", "1", ")", "\n", "\n", "", "if", "labels", ".", "shape", "[", "-", "2", ":", "]", "!=", "preds", ".", "shape", "[", "-", "2", ":", "]", ":", "\n", "                    ", "label", "=", "F", ".", "interpolate", "(", "labels", ",", "size", "=", "preds", ".", "shape", "[", "-", "2", ":", "]", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "", "losses", "+=", "self", ".", "loss_func", "(", "preds", ",", "label", ")", "\n", "\n", "losses", "=", "losses", "/", "self", ".", "optim", ".", "step_time_interval", "\n", "losses", ".", "backward", "(", ")", "\n", "\n", "if", "self", ".", "visual_helper", "is", "not", "None", ":", "\n", "                    ", "loss_list", ".", "append", "(", "losses", ".", "item", "(", ")", ")", "\n", "self", ".", "visual_helper", ".", "add_timer", "(", ")", "\n", "loss_value", "=", "sum", "(", "loss_list", ")", "/", "(", "len", "(", "loss_list", ")", "/", "self", ".", "optim", ".", "step_time_interval", ")", "\n", "if", "self", ".", "visual_helper", ".", "is_catch_snapshot", "(", ")", ":", "\n", "                        ", "self", ".", "visual_helper", "(", "epoch", ",", "\n", "loss_value", ",", "\n", "dict", "(", "imgs", "=", "imgs", ".", "cpu", "(", ")", ".", "detach", "(", ")", ",", "\n", "labels", "=", "labels", ".", "cpu", "(", ")", ".", "detach", "(", ")", ",", "\n", "preds", "=", "preds", ".", "cpu", "(", ")", ".", "detach", "(", ")", ")", "\n", ")", "\n", "loss_list", ".", "clear", "(", ")", "\n", "", "", "self", ".", "optim", ".", "step", "(", ")", "\n", "if", "self", ".", "model_saver", "is", "not", "None", ":", "\n", "                    ", "self", ".", "model_saver", "(", "{", "\n", "'model'", ":", "self", ".", "model", ".", "state_dict", "(", ")", ",", "\n", "'optim'", ":", "self", ".", "optim", ".", "state_dict", "(", ")", ",", "\n", "'saver'", ":", "self", ".", "model_saver", ".", "state_dict", "(", ")", ",", "\n", "'start_epoch'", ":", "epoch", ",", "\n", "}", ")", "\n", "", "", "", "if", "self", ".", "model_saver", "is", "not", "None", ":", "\n", "            ", "self", ".", "model_saver", "(", "{", "\n", "'model'", ":", "self", ".", "model", ".", "state_dict", "(", ")", ",", "\n", "'optim'", ":", "self", ".", "optim", ".", "state_dict", "(", ")", ",", "\n", "'saver'", ":", "self", ".", "model_saver", ".", "state_dict", "(", ")", ",", "\n", "'start_epoch'", ":", "epoch", ",", "\n", "}", ",", "isFinal", "=", "True", ")", "\n", "", "if", "self", ".", "visual_helper", "is", "not", "None", ":", "\n", "            ", "self", ".", "visual_helper", ".", "close", "(", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.new-stone-object_DNTD.helper.visual_helper.VisualHelper.__init__": [[8, 13], ["object.__init__"], "methods", ["home.repos.pwc.inspect_result.new-stone-object_DNTD.base_model.ResNet.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "catch_time_interval", ":", "int", ")", ":", "\n", "        ", "super", "(", "VisualHelper", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_catch_time_interval", "=", "catch_time_interval", "\n", "self", ".", "_timer", "=", "0", "\n", "self", ".", "_catch_timer", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.new-stone-object_DNTD.helper.visual_helper.VisualHelper.add_timer": [[14, 16], ["None"], "methods", ["None"], ["", "def", "add_timer", "(", "self", ")", ":", "\n", "        ", "self", ".", "_timer", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.new-stone-object_DNTD.helper.visual_helper.VisualHelper.is_catch_snapshot": [[17, 22], ["None"], "methods", ["None"], ["", "def", "is_catch_snapshot", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_timer", "%", "self", ".", "_catch_time_interval", "==", "0", ":", "\n", "            ", "self", ".", "_catch_timer", "+=", "1", "\n", "return", "True", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.new-stone-object_DNTD.helper.visual_helper.VisualHelper.call": [[23, 26], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "call", "(", "self", ",", "epoch", ":", "int", ",", "avg_loss", ":", "float", ",", "imgs_dict", ":", "ImgsType", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.new-stone-object_DNTD.helper.visual_helper.VisualHelper.close": [[27, 30], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "close", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.new-stone-object_DNTD.helper.visual_helper.VisualHelper.__call__": [[31, 33], ["visual_helper.VisualHelper.call"], "methods", ["home.repos.pwc.inspect_result.new-stone-object_DNTD.helper.visual_helper.VisualHelper.call"], ["", "def", "__call__", "(", "self", ",", "epoch", ":", "int", ",", "avg_loss", ":", "float", ",", "imgs_dict", ":", "ImgsType", ")", ":", "\n", "        ", "self", ".", "call", "(", "epoch", ",", "avg_loss", ",", "imgs_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.new-stone-object_DNTD.helper.tester.Tester.__init__": [[20, 40], ["torch.device", "object.__init__", "helper.utils.mkdirs", "networks.DenseUNet", "tester.Tester._model.load_state_dict", "tester.Tester._model.to", "tester.Tester._model.eval", "torch.load"], "methods", ["home.repos.pwc.inspect_result.new-stone-object_DNTD.base_model.ResNet.ResNet.__init__", "home.repos.pwc.inspect_result.new-stone-object_DNTD.helper.utils.mkdirs", "home.repos.pwc.inspect_result.new-stone-object_DNTD.helper.model_saver.ModelSaver.load_state_dict", "home.repos.pwc.inspect_result.new-stone-object_DNTD.networks.DNTD._Transition.eval"], ["def", "__init__", "(", "self", ",", "\n", "dataloader", ":", "DataLoader", ",", "\n", "img_save_path", ":", "str", ",", "\n", "model_pth_path", ":", "str", ",", "\n", "device", ":", "torch", ".", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", ",", "\n", "label_trans_func", ":", "LABEL_TRANS_FUNC", "=", "lambda", "x", ":", "x", ",", "\n", "*", "args", ",", "\n", "**", "kwargs", ")", "->", "None", ":", "\n", "        ", "super", "(", "Tester", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "_dataloader", "=", "dataloader", "\n", "self", ".", "_img_save_path", "=", "img_save_path", "\n", "mkdirs", "(", "img_save_path", ")", "\n", "self", ".", "_device", "=", "device", "\n", "self", ".", "_label_transform_func", "=", "label_trans_func", "\n", "model_dict", "=", "torch", ".", "load", "(", "model_pth_path", ",", "map_location", "=", "'cpu'", ")", "[", "'model'", "]", "\n", "self", ".", "_model", "=", "Net", "(", ")", "\n", "self", ".", "_model", ".", "load_state_dict", "(", "model_dict", ")", "\n", "del", "model_dict", "\n", "self", ".", "_model", "=", "self", ".", "_model", ".", "to", "(", "device", ")", "\n", "self", ".", "_model", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.new-stone-object_DNTD.helper.tester.Tester.test": [[42, 66], ["len", "tqdm.tqdm.tqdm", "torch.no_grad", "time.time", "print", "item[].to", "tester.Tester._model", "isinstance", "tester.Tester._label_transform_func", "range", "preds[].cpu", "preds.cpu.cpu.cpu", "helper.utils.pathjoin", "cv2.imwrite", "os.path.splitext", "time.time"], "methods", ["None"], ["", "def", "test", "(", "self", ")", "->", "None", ":", "\n", "        ", "dataset_len", "=", "len", "(", "self", ".", "_dataloader", ".", "dataset", ")", "\n", "pbar", "=", "tqdm", "(", "total", "=", "dataset_len", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "for", "item", "in", "self", ".", "_dataloader", ":", "\n", "                ", "imgs", "=", "item", "[", "'image'", "]", ".", "to", "(", "self", ".", "_device", ")", "\n", "size", "=", "imgs", ".", "shape", "[", "-", "2", ":", "]", "\n", "preds", "=", "self", ".", "_model", "(", "imgs", ")", "\n", "if", "isinstance", "(", "preds", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "                    ", "preds", "=", "preds", "[", "0", "]", ".", "cpu", "(", ")", "\n", "", "else", ":", "\n", "                    ", "preds", "=", "preds", ".", "cpu", "(", ")", "\n", "", "preds", "=", "self", ".", "_label_transform_func", "(", "preds", ")", "\n", "for", "i", "in", "range", "(", "preds", ".", "shape", "[", "0", "]", ")", ":", "\n", "                    ", "filename", "=", "os", ".", "path", ".", "splitext", "(", "item", "[", "'filename'", "]", "[", "i", "]", ")", "[", "0", "]", "+", "'.png'", "\n", "filepath", "=", "pathjoin", "(", "self", ".", "_img_save_path", ",", "filename", ")", "\n", "img", "=", "preds", "[", "i", "]", "\n", "# if img.shape[-2:] != size:", "\n", "#     img = cv2.resize(img,dsize=(size[1],size[0]),interpolation=cv2.INTER_LINEAR)", "\n", "cv2", ".", "imwrite", "(", "filepath", ",", "img", ")", "\n", "#pbar.update(1)", "\n", "#pbar.set_description(\"Processing %s\" % filename)", "\n", "", "", "print", "(", "f\"{ dataset_len / (time.time()-start_time) } FPS\"", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.new-stone-object_DNTD.helper.optim.Optimizer.__init__": [[11, 21], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "optimizer_create_func", ":", "Callable", ",", "\n", "total_iter_time", ":", "int", ",", "\n", "lr_schuduer", ":", "LR_SCHUDUER_FUNC", "=", "None", ",", "step_time_interval", "=", "1", ")", ":", "\n", "        ", "self", ".", "__step_time_interval", "=", "step_time_interval", "\n", "self", ".", "__timer", "=", "0", "\n", "self", ".", "__step_timer", "=", "0", "\n", "self", ".", "__optimizer_create_func", "=", "optimizer_create_func", "\n", "self", ".", "__lr_schuduer", "=", "lr_schuduer", "\n", "self", ".", "__total_step_time", "=", "total_iter_time", "//", "self", ".", "__step_time_interval", "\n", "self", ".", "__lr", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.new-stone-object_DNTD.helper.optim.Optimizer.__call__": [[23, 28], ["optim.Optimizer.__optimizer_create_func", "optim.Optimizer.__optimizer.zero_grad"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "model", ":", "Module", ",", "lr", ":", "float", ")", ":", "\n", "\n", "        ", "self", ".", "__optimizer", "=", "self", ".", "__optimizer_create_func", "(", "model", ",", "lr", ")", "\n", "self", ".", "__optimizer", ".", "zero_grad", "(", ")", "\n", "self", ".", "__lr", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.new-stone-object_DNTD.helper.optim.Optimizer.get_optim": [[29, 31], ["None"], "methods", ["None"], ["", "def", "get_optim", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.new-stone-object_DNTD.helper.optim.Optimizer.step_time_interval": [[32, 35], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "step_time_interval", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__step_time_interval", "\n", "\n"]], "home.repos.pwc.inspect_result.new-stone-object_DNTD.helper.optim.Optimizer.state_dict": [[36, 42], ["optim.Optimizer.__optimizer.state_dict"], "methods", ["home.repos.pwc.inspect_result.new-stone-object_DNTD.helper.model_saver.ModelSaver.state_dict"], ["", "def", "state_dict", "(", "self", ")", ":", "\n", "        ", "return", "{", "\n", "'__timer'", ":", "self", ".", "__timer", ",", "\n", "'__lr'", ":", "self", ".", "__lr", ",", "\n", "'__step_timer'", ":", "self", ".", "__step_timer", ",", "\n", "'__optimizer'", ":", "self", ".", "__optimizer", ".", "state_dict", "(", ")", "if", "self", ".", "__optimizer", "is", "not", "None", "else", "None", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.new-stone-object_DNTD.helper.optim.Optimizer.load_state_dict": [[44, 50], ["optim.Optimizer.__optimizer.load_state_dict"], "methods", ["home.repos.pwc.inspect_result.new-stone-object_DNTD.helper.model_saver.ModelSaver.load_state_dict"], ["", "def", "load_state_dict", "(", "self", ",", "state_dict", ")", ":", "\n", "        ", "self", ".", "__timer", "=", "state_dict", "[", "'__timer'", "]", "\n", "self", ".", "__lr", "=", "state_dict", "[", "'__lr'", "]", "\n", "self", ".", "__step_timer", "=", "state_dict", "[", "'__step_timer'", "]", "\n", "if", "state_dict", "[", "'__optimizer'", "]", "is", "not", "None", ":", "\n", "            ", "self", ".", "__optimizer", ".", "load_state_dict", "(", "state_dict", "[", "'__optimizer'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.new-stone-object_DNTD.helper.optim.Optimizer.step": [[51, 61], ["optim.Optimizer.__optimizer.step", "optim.Optimizer.__optimizer.zero_grad", "optim.Optimizer.__lr_schuduer"], "methods", ["home.repos.pwc.inspect_result.new-stone-object_DNTD.helper.optim.Optimizer.step"], ["", "", "def", "step", "(", "self", ")", ":", "\n", "        ", "self", ".", "__timer", "+=", "1", "\n", "if", "self", ".", "__timer", "%", "self", ".", "__step_time_interval", "==", "0", ":", "\n", "            ", "self", ".", "__timer", "=", "0", "\n", "self", ".", "__step_timer", "+=", "1", "\n", "self", ".", "__optimizer", ".", "step", "(", ")", "\n", "self", ".", "__optimizer", ".", "zero_grad", "(", ")", "\n", "if", "self", ".", "__lr_schuduer", "is", "not", "None", ":", "\n", "                ", "self", ".", "__lr_schuduer", "(", "self", ".", "__optimizer", ",", "self", ".", "__lr", ",", "self", ".", "__step_timer", ",", "self", ".", "__total_step_time", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.new-stone-object_DNTD.helper.model_saver.ModelSaver.__init__": [[10, 22], ["helper.utils.mkdirs", "helper.utils.pathjoin", "time.strftime", "time.localtime"], "methods", ["home.repos.pwc.inspect_result.new-stone-object_DNTD.helper.utils.mkdirs"], ["    ", "def", "__init__", "(", "self", ",", "save_interval", ",", "save_dir_path", "=", "None", ",", "save_base_name", "=", "'model'", ")", ":", "\n", "        ", "self", ".", "__timer", "=", "0", "\n", "self", ".", "__save_interval", "=", "save_interval", "\n", "self", ".", "__save_dir_path", "=", "save_dir_path", "\n", "if", "self", ".", "__save_dir_path", "is", "None", ":", "\n", "            ", "self", ".", "__save_dir_path", "=", "pathjoin", "(", "\n", "'../'", ",", "\n", "time", ".", "strftime", "(", "\"%F %H-%M-%S\"", ",", "time", ".", "localtime", "(", ")", ")", "\n", ")", "\n", "", "mkdirs", "(", "self", ".", "__save_dir_path", ")", "\n", "self", ".", "__base_model_name", "=", "save_base_name", "\n", "self", ".", "__interval_timer", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.new-stone-object_DNTD.helper.model_saver.ModelSaver.state_dict": [[23, 28], ["None"], "methods", ["None"], ["", "def", "state_dict", "(", "self", ")", ":", "\n", "        ", "return", "{", "\n", "'__timer'", ":", "self", ".", "__timer", ",", "\n", "'__save_interval'", ":", "self", ".", "__save_interval", ",", "\n", "'__interval_timer'", ":", "self", ".", "__interval_timer", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.new-stone-object_DNTD.helper.model_saver.ModelSaver.load_state_dict": [[30, 34], ["None"], "methods", ["None"], ["", "def", "load_state_dict", "(", "self", ",", "state_dict", ")", ":", "\n", "        ", "self", ".", "__timer", "=", "state_dict", "[", "'__timer'", "]", "\n", "self", ".", "__save_interval", "=", "state_dict", "[", "'__save_interval'", "]", "\n", "self", ".", "__interval_timer", "=", "state_dict", "[", "'__interval_timer'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.new-stone-object_DNTD.helper.model_saver.ModelSaver.__call__": [[35, 47], ["helper.utils.pathjoin", "torch.save", "str", "hooks"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "model_dict", ",", "isFinal", ":", "bool", "=", "False", ",", "hooks", "=", "False", ")", ":", "\n", "        ", "self", ".", "__timer", "+=", "1", "\n", "if", "self", ".", "__timer", "%", "self", ".", "__save_interval", "==", "0", "or", "isFinal", ":", "\n", "            ", "self", ".", "__interval_timer", "+=", "1", "\n", "model_ext_name", "=", "'final'", "if", "isFinal", "else", "str", "(", "self", ".", "__interval_timer", ")", "\n", "model_save_path", "=", "pathjoin", "(", "\n", "self", ".", "__save_dir_path", ",", "\n", "self", ".", "__base_model_name", "+", "'-'", "+", "model_ext_name", "+", "'.pth'", "\n", ")", "\n", "torch", ".", "save", "(", "model_dict", ",", "model_save_path", ")", "\n", "if", "hooks", ":", "\n", "                ", "hooks", "(", "model_save_path", ",", "self", ".", "__interval_timer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.new-stone-object_DNTD.helper.utils.EasyDict.__init__": [[35, 36], ["dict.__init__"], "methods", ["home.repos.pwc.inspect_result.new-stone-object_DNTD.base_model.ResNet.ResNet.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "def", "__getattr__", "(", "self", ",", "name", ")", ":", "return", "self", "[", "name", "]", "\n"]], "home.repos.pwc.inspect_result.new-stone-object_DNTD.helper.utils.EasyDict.__getattr__": [[36, 37], ["None"], "methods", ["None"], ["def", "__getattr__", "(", "self", ",", "name", ")", ":", "return", "self", "[", "name", "]", "\n", "def", "__setattr__", "(", "self", ",", "name", ",", "value", ")", ":", "self", "[", "name", "]", "=", "value", "\n"]], "home.repos.pwc.inspect_result.new-stone-object_DNTD.helper.utils.EasyDict.__setattr__": [[37, 38], ["None"], "methods", ["None"], ["def", "__setattr__", "(", "self", ",", "name", ",", "value", ")", ":", "self", "[", "name", "]", "=", "value", "\n", "def", "__delattr__", "(", "self", ",", "name", ")", ":", "del", "self", "[", "name", "]", "\n"]], "home.repos.pwc.inspect_result.new-stone-object_DNTD.helper.utils.EasyDict.__delattr__": [[38, 39], ["None"], "methods", ["None"], ["def", "__delattr__", "(", "self", ",", "name", ")", ":", "del", "self", "[", "name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.new-stone-object_DNTD.helper.utils.dump_pkl_file": [[8, 13], ["os.path.dirname", "utils.mkdirs", "open", "pickle.dump"], "function", ["home.repos.pwc.inspect_result.new-stone-object_DNTD.helper.utils.mkdirs"], ["def", "dump_pkl_file", "(", "obj", ",", "path", ")", ":", "\n", "    ", "dir_path", "=", "os", ".", "path", ".", "dirname", "(", "path", ")", "\n", "mkdirs", "(", "dir_path", ")", "\n", "with", "open", "(", "path", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "return", "pickle", ".", "dump", "(", "obj", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.new-stone-object_DNTD.helper.utils.load_pkl_file": [[14, 17], ["open", "pickle.load"], "function", ["None"], ["", "", "def", "load_pkl_file", "(", "path", ")", ":", "\n", "    ", "with", "open", "(", "path", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "return", "pickle", ".", "load", "(", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.new-stone-object_DNTD.helper.utils.mkdirs": [[18, 26], ["os.path.exists", "os.makedirs"], "function", ["None"], ["", "", "def", "mkdirs", "(", "dir_path", ":", "str", ")", ":", "\n", "    ", "\"\"\"\n    make the dictionary according to the dir_path\n    :param dir_path: the path of dir to be created\n    :return:\n    \"\"\"", "\n", "if", "not", "file_exist", "(", "dir_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "dir_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.new-stone-object_DNTD.helper.utils.pandas2markdown": [[41, 53], ["pandas2markdown.writer.from_dataframe", "pandas2markdown.writer.dumps", "hasattr", "pytablewriter.MarkdownTableWriter"], "function", ["None"], ["", "def", "pandas2markdown", "(", "dataframe", ":", "pd", ".", "DataFrame", ")", "->", "str", ":", "\n", "    ", "\"\"\"\n    translate the Dataframe in pandas into Markdown table\n    :type dataframe: object\n    \"\"\"", "\n", "if", "not", "hasattr", "(", "pandas2markdown", ",", "'writer'", ")", ":", "\n", "        ", "pandas2markdown", ".", "writer", ":", "MarkdownTableWriter", "=", "MarkdownTableWriter", "(", ")", "\n", "", "pandas2markdown", ".", "writer", ".", "from_dataframe", "(", "\n", "dataframe", ",", "\n", "add_index_column", "=", "False", ",", "\n", ")", "\n", "return", "pandas2markdown", ".", "writer", ".", "dumps", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.new-stone-object_DNTD.evaluator_tool.EvalDataloader.EvalDataset.__init__": [[10, 42], ["list", "list", "os.listdir", "zip", "os.path.join", "os.path.join", "os.path.exists", "len", "cv2.imread", "cv2.imread", "EvalDataloader.EvalDataset.image_path.append", "EvalDataloader.EvalDataset.label_path.append", "os.path.exists", "EvalDataloader.EvalDataset.image_path.remove", "EvalDataloader.EvalDataset.label_path.remove", "os.path.splitext", "os.path.join", "os.path.exists", "EvalDataloader.EvalDataset.image_path.append", "EvalDataloader.EvalDataset.label_path.append"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "img_root", ",", "label_root", ")", ":", "\n", "        ", "self", ".", "image_path", "=", "list", "(", ")", "\n", "self", ".", "label_path", "=", "list", "(", ")", "\n", "exts", "=", "[", "'.jpg'", ",", "'.png'", ",", "'.bmp'", "]", "\n", "for", "image_name", "in", "os", ".", "listdir", "(", "label_root", ")", ":", "\n", "            ", "image_path", "=", "os", ".", "path", ".", "join", "(", "img_root", ",", "image_name", ")", "\n", "label_path", "=", "os", ".", "path", ".", "join", "(", "label_root", ",", "image_name", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "image_path", ")", ":", "\n", "                ", "self", ".", "image_path", ".", "append", "(", "image_path", ")", "\n", "self", ".", "label_path", ".", "append", "(", "label_path", ")", "\n", "", "else", ":", "\n", "                ", "basename", "=", "os", ".", "path", ".", "splitext", "(", "image_name", ")", "[", "0", "]", "\n", "for", "ext", "in", "exts", ":", "\n", "                    ", "image_path", "=", "os", ".", "path", ".", "join", "(", "img_root", ",", "basename", "+", "ext", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "image_path", ")", ":", "\n", "                        ", "break", "\n", "", "", "if", "os", ".", "path", ".", "exists", "(", "image_path", ")", ":", "\n", "                    ", "self", ".", "image_path", ".", "append", "(", "image_path", ")", "\n", "self", ".", "label_path", ".", "append", "(", "label_path", ")", "\n", "", "", "", "assert", "len", "(", "self", ".", "label_path", ")", "!=", "0", ",", "\"label's dir shouldn't be empty!\"", "\n", "del_num", "=", "0", "\n", "\n", "for", "image_path", ",", "label_path", "in", "zip", "(", "self", ".", "image_path", ",", "self", ".", "label_path", ")", ":", "\n", "            ", "pred", "=", "cv2", ".", "imread", "(", "image_path", ",", "cv2", ".", "IMREAD_GRAYSCALE", ")", "\n", "gt", "=", "cv2", ".", "imread", "(", "label_path", ",", "cv2", ".", "IMREAD_GRAYSCALE", ")", "\n", "\n", "if", "pred", ".", "shape", "!=", "gt", ".", "shape", ":", "\n", "                ", "self", ".", "image_path", ".", "remove", "(", "image_path", ")", "\n", "self", ".", "label_path", ".", "remove", "(", "label_path", ")", "\n", "del_num", "+=", "1", "\n", "\n", "", "", "assert", "(", "del_num", "<", "10", ")", ",", "\"to many pic is not paired\"", "\n", "\n"]], "home.repos.pwc.inspect_result.new-stone-object_DNTD.evaluator_tool.EvalDataloader.EvalDataset.__getitem__": [[43, 54], ["cv2.imread", "cv2.imread", "pred.astype.astype.astype", "gt.astype.astype.astype"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "pred", "=", "cv2", ".", "imread", "(", "self", ".", "image_path", "[", "item", "]", ",", "cv2", ".", "IMREAD_GRAYSCALE", ")", "\n", "gt", "=", "cv2", ".", "imread", "(", "self", ".", "label_path", "[", "item", "]", ",", "cv2", ".", "IMREAD_GRAYSCALE", ")", "\n", "# if pred.shape != gt.shape:", "\n", "#     print(self.image_path[item],self.label_path[item],'is not paired')", "\n", "#     pred = cv2.resize(pred, gt.shape, interpolation=cv2.INTER_LINEAR)", "\n", "pred", "=", "pred", ".", "astype", "(", "np", ".", "float32", ")", "\n", "gt", "=", "gt", ".", "astype", "(", "np", ".", "float32", ")", "\n", "pred", "/=", "255.0", "\n", "gt", "/=", "255.0", "\n", "return", "pred", ",", "gt", "\n", "\n"]], "home.repos.pwc.inspect_result.new-stone-object_DNTD.evaluator_tool.EvalDataloader.EvalDataset.__len__": [[55, 57], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "image_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.new-stone-object_DNTD.evaluator_tool.EvalDataloader.EvalDataloader.__init__": [[61, 64], ["EvalDataloader.EvalDataset", "torch.utils.data.DataLoader.__init__"], "methods", ["home.repos.pwc.inspect_result.new-stone-object_DNTD.base_model.ResNet.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "img_root", ",", "label_root", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "dataset", "=", "EvalDataset", "(", "img_root", ",", "label_root", ")", "\n", "super", "(", "EvalDataloader", ",", "self", ")", ".", "__init__", "(", "dataset", ",", "batch_size", "=", "1", ",", "shuffle", "=", "False", ",", "num_workers", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.new-stone-object_DNTD.evaluator_tool.Evaluator.Evaluator.__new__": [[14, 18], ["object.__new__", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.new-stone-object_DNTD.evaluator_tool.Evaluator.Evaluator.__new__"], ["def", "__new__", "(", "cls", ",", "*", "args", ",", "**", "kwargs", ")", "->", "object", ":", "\n", "        ", "if", "cls", ".", "indexes", "is", "None", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"indexes property shoule be defined!\"", ")", "\n", "", "return", "super", "(", ")", ".", "__new__", "(", "cls", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.new-stone-object_DNTD.evaluator_tool.Evaluator.Evaluator.__init__": [[19, 24], ["torch.device", "object.__init__"], "methods", ["home.repos.pwc.inspect_result.new-stone-object_DNTD.base_model.ResNet.ResNet.__init__"], ["", "def", "__init__", "(", "self", ",", "dataloader", ":", "DataLoader", ",", "device", ":", "torch", ".", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", ")", ":", "\n", "        ", "super", "(", "Evaluator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_dataloader", "=", "dataloader", "\n", "self", ".", "_device", "=", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.new-stone-object_DNTD.evaluator_tool.Evaluator.Evaluator.eval": [[25, 28], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "eval", "(", "self", ")", "->", "Dict", "[", "str", ",", "float", "or", "int", "]", ":", "\n", "        ", "pass", "\n", "", "", ""]], "home.repos.pwc.inspect_result.new-stone-object_DNTD.evaluator_tool.FmeasueEval.FmeasueEval.__init__": [[15, 18], ["torch.device", "Evaluator.Evaluator.__init__"], "methods", ["home.repos.pwc.inspect_result.new-stone-object_DNTD.base_model.ResNet.ResNet.__init__"], ["def", "__init__", "(", "self", ",", "dataloader", ":", "DataLoader", ",", "device", ":", "torch", ".", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", ")", ":", "\n", "        ", "super", "(", "FmeasueEval", ",", "self", ")", ".", "__init__", "(", "dataloader", ",", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.new-stone-object_DNTD.evaluator_tool.FmeasueEval.FmeasueEval.eval": [[19, 57], ["torch.no_grad", "preds.to.to.to", "labels.to.to.to", "preds.to.to.size", "range", "score.max().item", "score.mean().item", "FmeasueEval.FmeasueEval._eval_pr", "precs.cpu().view().numpy", "recalls.cpu().view().numpy", "score.max", "score.mean", "precs.cpu().view", "recalls.cpu().view", "precs.cpu", "recalls.cpu"], "methods", ["home.repos.pwc.inspect_result.new-stone-object_DNTD.evaluator_tool.FmeasueEval.FmeasueEval._eval_pr"], ["", "def", "eval", "(", "self", ")", "->", "Dict", "[", "str", ",", "float", "]", ":", "\n", "        ", "\"\"\"\n        calculate the F-measure score\n        :return: the max F-measure score and the mean F-measure score\n        \"\"\"", "\n", "beta2", "=", "0.3", "\n", "avg_f", ",", "img_num", "=", "0.0", ",", "0.0", "\n", "precs", "=", "0.0", "\n", "recalls", "=", "0.0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "preds", ",", "labels", "in", "self", ".", "_dataloader", ":", "\n", "                ", "preds", "=", "preds", ".", "to", "(", "self", ".", "_device", ")", "\n", "labels", "=", "labels", ".", "to", "(", "self", ".", "_device", ")", "\n", "b", "=", "preds", ".", "size", "(", "0", ")", "\n", "for", "i", "in", "range", "(", "b", ")", ":", "\n", "                    ", "pred", "=", "preds", "[", "i", "]", "\n", "gt", "=", "labels", "[", "i", "]", "\n", "prec", ",", "recall", "=", "self", ".", "_eval_pr", "(", "pred", ",", "gt", ",", "256", ")", "\n", "recall", "[", "recall", "!=", "recall", "]", "=", "0.0", "\n", "prec", "[", "prec", "!=", "prec", "]", "=", "0.0", "\n", "precs", "+=", "prec", "\n", "recalls", "+=", "recall", "\n", "img_num", "+=", "1", "\n", "", "", "", "if", "img_num", "!=", "0.0", ":", "\n", "            ", "f_score", "=", "(", "1", "+", "beta2", ")", "*", "precs", "*", "recalls", "/", "(", "beta2", "*", "precs", "+", "recalls", ")", "\n", "score", "=", "f_score", "/", "img_num", "\n", "return", "{", "\n", "\"max-F\"", ":", "score", ".", "max", "(", ")", ".", "item", "(", ")", ",", "\n", "\"mean-F\"", ":", "score", ".", "mean", "(", ")", ".", "item", "(", ")", ",", "\n", "\"precision\"", ":", "precs", ".", "cpu", "(", ")", ".", "view", "(", "-", "1", ")", ".", "numpy", "(", ")", "/", "img_num", ",", "\n", "\"recall\"", ":", "recalls", ".", "cpu", "(", ")", ".", "view", "(", "-", "1", ")", ".", "numpy", "(", ")", "/", "img_num", ",", "\n", "}", "\n", "", "else", ":", "\n", "            ", "return", "{", "\n", "\"max-F\"", ":", "0.0", ",", "\n", "\"mean-F\"", ":", "0.0", ",", "\n", "\"precision\"", ":", "None", ",", "\n", "\"recall\"", ":", "None", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.new-stone-object_DNTD.evaluator_tool.FmeasueEval.FmeasueEval._eval_pr": [[60, 70], ["torch.linspace().to", "range", "torch.zeros().to", "torch.zeros().to", "torch.linspace", "torch.zeros", "torch.zeros", "y_temp.byte().sum().float", "gt.byte().sum().float", "y_temp.byte().sum", "gt.byte().sum", "y_temp.byte", "gt.byte"], "methods", ["None"], ["", "", "def", "_eval_pr", "(", "self", ",", "y_pred", ",", "y", ",", "num", ")", ":", "\n", "        ", "prec", ",", "recall", "=", "torch", ".", "zeros", "(", "num", ")", ".", "to", "(", "self", ".", "_device", ")", ",", "torch", ".", "zeros", "(", "num", ")", ".", "to", "(", "self", ".", "_device", ")", "\n", "thlist", "=", "torch", ".", "linspace", "(", "0", ",", "1.0", ",", "num", ")", ".", "to", "(", "self", ".", "_device", ")", "\n", "gt", "=", "(", "y", ">", "thlist", "[", "num", "//", "2", "]", ")", "\n", "for", "i", "in", "range", "(", "num", ")", ":", "\n", "            ", "y_temp", "=", "(", "y_pred", ">", "thlist", "[", "i", "]", ")", "\n", "tp", "=", "(", "y_temp", "&", "gt", ")", ".", "byte", "(", ")", ".", "sum", "(", ")", ".", "float", "(", ")", "\n", "prec", "[", "i", "]", "=", "(", "tp", "+", "1e-5", ")", "/", "(", "y_temp", ".", "byte", "(", ")", ".", "sum", "(", ")", ".", "float", "(", ")", "+", "1e-5", ")", "\n", "recall", "[", "i", "]", "=", "(", "tp", "+", "1e-5", ")", "/", "(", "gt", ".", "byte", "(", ")", ".", "sum", "(", ")", ".", "float", "(", ")", "+", "1e-5", ")", "\n", "", "return", "prec", ",", "recall", "", "", "", ""]], "home.repos.pwc.inspect_result.new-stone-object_DNTD.evaluator_tool.SMeasureEval.SMeasureEval.__init__": [[16, 19], ["torch.device", "Evaluator.Evaluator.__init__"], "methods", ["home.repos.pwc.inspect_result.new-stone-object_DNTD.base_model.ResNet.ResNet.__init__"], ["def", "__init__", "(", "self", ",", "dataloader", ":", "DataLoader", ",", "device", ":", "torch", ".", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", ")", ":", "\n", "        ", "super", "(", "SMeasureEval", ",", "self", ")", ".", "__init__", "(", "dataloader", ",", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.new-stone-object_DNTD.evaluator_tool.SMeasureEval.SMeasureEval.eval": [[20, 49], ["torch.no_grad", "preds.to.to.to", "labels.to.to.to", "preds.to.to.size", "range", "gt.mean", "torch.FloatTensor.item", "pred.mean", "pred.mean", "torch.FloatTensor.item", "torch.FloatTensor", "SMeasureEval.SMeasureEval._S_object", "SMeasureEval.SMeasureEval._S_region"], "methods", ["home.repos.pwc.inspect_result.new-stone-object_DNTD.evaluator_tool.SMeasureEval.SMeasureEval._S_object", "home.repos.pwc.inspect_result.new-stone-object_DNTD.evaluator_tool.SMeasureEval.SMeasureEval._S_region"], ["", "def", "eval", "(", "self", ")", "->", "Dict", "[", "str", ",", "float", "]", ":", "\n", "        ", "alpha", ",", "avg_q", ",", "img_num", "=", "0.5", ",", "0.0", ",", "0.0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "preds", ",", "labels", "in", "self", ".", "_dataloader", ":", "\n", "                ", "preds", "=", "preds", ".", "to", "(", "self", ".", "_device", ")", "\n", "labels", "=", "labels", ".", "to", "(", "self", ".", "_device", ")", "\n", "b", "=", "preds", ".", "size", "(", "0", ")", "\n", "for", "i", "in", "range", "(", "b", ")", ":", "\n", "                    ", "pred", "=", "preds", "[", "i", "]", "\n", "gt", "=", "labels", "[", "i", "]", "\n", "y", "=", "gt", ".", "mean", "(", ")", "\n", "if", "y", "==", "0", ":", "\n", "                        ", "x", "=", "pred", ".", "mean", "(", ")", "\n", "Q", "=", "1.0", "-", "x", "\n", "", "elif", "y", "==", "1", ":", "\n", "                        ", "x", "=", "pred", ".", "mean", "(", ")", "\n", "Q", "=", "x", "\n", "", "else", ":", "\n", "                        ", "gt", "[", "gt", ">=", "0.5", "]", "=", "1", "\n", "gt", "[", "gt", "<", "0.5", "]", "=", "0", "\n", "Q", "=", "alpha", "*", "self", ".", "_S_object", "(", "pred", ",", "gt", ")", "+", "(", "1", "-", "alpha", ")", "*", "self", ".", "_S_region", "(", "pred", ",", "gt", ")", "\n", "if", "Q", ".", "item", "(", ")", "<", "0", ":", "\n", "                            ", "Q", "=", "torch", ".", "FloatTensor", "(", "[", "0.0", "]", ")", "\n", "", "", "img_num", "+=", "1.0", "\n", "avg_q", "+=", "Q", ".", "item", "(", ")", "\n", "", "", "avg_q", "/=", "img_num", "\n", "", "if", "img_num", "==", "0", ":", "\n", "            ", "return", "{", "\"S\"", ":", "0.0", "}", "\n", "", "return", "{", "\"S\"", ":", "avg_q", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.new-stone-object_DNTD.evaluator_tool.SMeasureEval.SMeasureEval._S_object": [[50, 58], ["torch.where", "torch.where", "SMeasureEval.SMeasureEval._object", "SMeasureEval.SMeasureEval._object", "gt.mean", "torch.zeros_like", "torch.zeros_like"], "methods", ["home.repos.pwc.inspect_result.new-stone-object_DNTD.evaluator_tool.SMeasureEval.SMeasureEval._object", "home.repos.pwc.inspect_result.new-stone-object_DNTD.evaluator_tool.SMeasureEval.SMeasureEval._object"], ["", "def", "_S_object", "(", "self", ",", "pred", ",", "gt", ")", ":", "\n", "        ", "fg", "=", "torch", ".", "where", "(", "gt", "==", "0.0", ",", "torch", ".", "zeros_like", "(", "pred", ")", ",", "pred", ")", "\n", "bg", "=", "torch", ".", "where", "(", "gt", "==", "1.0", ",", "torch", ".", "zeros_like", "(", "pred", ")", ",", "1", "-", "pred", ")", "\n", "o_fg", "=", "self", ".", "_object", "(", "fg", ",", "gt", ")", "\n", "o_bg", "=", "self", ".", "_object", "(", "bg", ",", "1", "-", "gt", ")", "\n", "u", "=", "gt", ".", "mean", "(", ")", "\n", "Q", "=", "u", "*", "o_fg", "+", "(", "1", "-", "u", ")", "*", "o_bg", "\n", "return", "Q", "\n", "\n"]], "home.repos.pwc.inspect_result.new-stone-object_DNTD.evaluator_tool.SMeasureEval.SMeasureEval._object": [[59, 66], ["temp.mean", "temp.std"], "methods", ["None"], ["", "def", "_object", "(", "self", ",", "pred", ",", "gt", ")", ":", "\n", "        ", "temp", "=", "pred", "[", "gt", "==", "1", "]", "\n", "x", "=", "temp", ".", "mean", "(", ")", "\n", "sigma_x", "=", "temp", ".", "std", "(", ")", "\n", "score", "=", "2.0", "*", "x", "/", "(", "x", "*", "x", "+", "1.0", "+", "sigma_x", "+", "1e-20", ")", "\n", "\n", "return", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.new-stone-object_DNTD.evaluator_tool.SMeasureEval.SMeasureEval._S_region": [[67, 78], ["SMeasureEval.SMeasureEval._centroid", "SMeasureEval.SMeasureEval._divideGT", "SMeasureEval.SMeasureEval._dividePrediction", "SMeasureEval.SMeasureEval._ssim", "SMeasureEval.SMeasureEval._ssim", "SMeasureEval.SMeasureEval._ssim", "SMeasureEval.SMeasureEval._ssim"], "methods", ["home.repos.pwc.inspect_result.new-stone-object_DNTD.evaluator_tool.SMeasureEval.SMeasureEval._centroid", "home.repos.pwc.inspect_result.new-stone-object_DNTD.evaluator_tool.SMeasureEval.SMeasureEval._divideGT", "home.repos.pwc.inspect_result.new-stone-object_DNTD.evaluator_tool.SMeasureEval.SMeasureEval._dividePrediction", "home.repos.pwc.inspect_result.new-stone-object_DNTD.evaluator_tool.SMeasureEval.SMeasureEval._ssim", "home.repos.pwc.inspect_result.new-stone-object_DNTD.evaluator_tool.SMeasureEval.SMeasureEval._ssim", "home.repos.pwc.inspect_result.new-stone-object_DNTD.evaluator_tool.SMeasureEval.SMeasureEval._ssim", "home.repos.pwc.inspect_result.new-stone-object_DNTD.evaluator_tool.SMeasureEval.SMeasureEval._ssim"], ["", "def", "_S_region", "(", "self", ",", "pred", ",", "gt", ")", ":", "\n", "        ", "X", ",", "Y", "=", "self", ".", "_centroid", "(", "gt", ")", "\n", "gt1", ",", "gt2", ",", "gt3", ",", "gt4", ",", "w1", ",", "w2", ",", "w3", ",", "w4", "=", "self", ".", "_divideGT", "(", "gt", ",", "X", ",", "Y", ")", "\n", "p1", ",", "p2", ",", "p3", ",", "p4", "=", "self", ".", "_dividePrediction", "(", "pred", ",", "X", ",", "Y", ")", "\n", "Q1", "=", "self", ".", "_ssim", "(", "p1", ",", "gt1", ")", "\n", "Q2", "=", "self", ".", "_ssim", "(", "p2", ",", "gt2", ")", "\n", "Q3", "=", "self", ".", "_ssim", "(", "p3", ",", "gt3", ")", "\n", "Q4", "=", "self", ".", "_ssim", "(", "p4", ",", "gt4", ")", "\n", "Q", "=", "w1", "*", "Q1", "+", "w2", "*", "Q2", "+", "w3", "*", "Q3", "+", "w4", "*", "Q4", "\n", "\n", "return", "Q", "\n", "\n"]], "home.repos.pwc.inspect_result.new-stone-object_DNTD.evaluator_tool.SMeasureEval.SMeasureEval._centroid": [[79, 92], ["gt.view.view.view", "gt.view.view.size", "gt.view.view.sum", "gt.view.view.sum", "torch.from_numpy().to().float", "torch.from_numpy().to().float", "torch.round", "torch.round", "torch.round.long", "torch.round.long", "torch.eye().to", "round", "torch.eye().to", "round", "torch.from_numpy().to", "torch.from_numpy().to", "torch.eye", "torch.eye", "torch.from_numpy", "torch.from_numpy", "numpy.arange", "numpy.arange", "gt.view.view.sum", "gt.view.view.sum"], "methods", ["None"], ["", "def", "_centroid", "(", "self", ",", "gt", ")", ":", "\n", "        ", "rows", ",", "cols", "=", "gt", ".", "size", "(", ")", "[", "-", "2", ":", "]", "\n", "gt", "=", "gt", ".", "view", "(", "rows", ",", "cols", ")", "\n", "if", "gt", ".", "sum", "(", ")", "==", "0", ":", "\n", "            ", "X", "=", "torch", ".", "eye", "(", "1", ")", ".", "to", "(", "self", ".", "_device", ")", "*", "round", "(", "cols", "/", "2", ")", "\n", "Y", "=", "torch", ".", "eye", "(", "1", ")", ".", "to", "(", "self", ".", "_device", ")", "*", "round", "(", "rows", "/", "2", ")", "\n", "", "else", ":", "\n", "            ", "total", "=", "gt", ".", "sum", "(", ")", "\n", "i", "=", "torch", ".", "from_numpy", "(", "np", ".", "arange", "(", "0", ",", "cols", ")", ")", ".", "to", "(", "self", ".", "_device", ")", ".", "float", "(", ")", "\n", "j", "=", "torch", ".", "from_numpy", "(", "np", ".", "arange", "(", "0", ",", "rows", ")", ")", ".", "to", "(", "self", ".", "_device", ")", ".", "float", "(", ")", "\n", "X", "=", "torch", ".", "round", "(", "(", "gt", ".", "sum", "(", "dim", "=", "0", ")", "*", "i", ")", ".", "sum", "(", ")", "/", "total", ")", "\n", "Y", "=", "torch", ".", "round", "(", "(", "gt", ".", "sum", "(", "dim", "=", "1", ")", "*", "j", ")", ".", "sum", "(", ")", "/", "total", ")", "\n", "", "return", "X", ".", "long", "(", ")", ",", "Y", ".", "long", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.new-stone-object_DNTD.evaluator_tool.SMeasureEval.SMeasureEval._dividePrediction": [[93, 101], ["pred.view.view.view", "pred.view.view.size"], "methods", ["None"], ["", "def", "_dividePrediction", "(", "self", ",", "pred", ",", "X", ",", "Y", ")", ":", "\n", "        ", "h", ",", "w", "=", "pred", ".", "size", "(", ")", "[", "-", "2", ":", "]", "\n", "pred", "=", "pred", ".", "view", "(", "h", ",", "w", ")", "\n", "LT", "=", "pred", "[", ":", "Y", ",", ":", "X", "]", "\n", "RT", "=", "pred", "[", ":", "Y", ",", "X", ":", "w", "]", "\n", "LB", "=", "pred", "[", "Y", ":", "h", ",", ":", "X", "]", "\n", "RB", "=", "pred", "[", "Y", ":", "h", ",", "X", ":", "w", "]", "\n", "return", "LT", ",", "RT", ",", "LB", ",", "RB", "\n", "\n"]], "home.repos.pwc.inspect_result.new-stone-object_DNTD.evaluator_tool.SMeasureEval.SMeasureEval._divideGT": [[102, 117], ["gt.view.view.view", "X.float.float.float", "Y.float.float.float", "gt.view.view.size"], "methods", ["None"], ["", "def", "_divideGT", "(", "self", ",", "gt", ",", "X", ",", "Y", ")", ":", "\n", "        ", "h", ",", "w", "=", "gt", ".", "size", "(", ")", "[", "-", "2", ":", "]", "\n", "area", "=", "h", "*", "w", "\n", "gt", "=", "gt", ".", "view", "(", "h", ",", "w", ")", "\n", "LT", "=", "gt", "[", ":", "Y", ",", ":", "X", "]", "\n", "RT", "=", "gt", "[", ":", "Y", ",", "X", ":", "w", "]", "\n", "LB", "=", "gt", "[", "Y", ":", "h", ",", ":", "X", "]", "\n", "RB", "=", "gt", "[", "Y", ":", "h", ",", "X", ":", "w", "]", "\n", "X", "=", "X", ".", "float", "(", ")", "\n", "Y", "=", "Y", ".", "float", "(", ")", "\n", "w1", "=", "X", "*", "Y", "/", "area", "\n", "w2", "=", "(", "w", "-", "X", ")", "*", "Y", "/", "area", "\n", "w3", "=", "X", "*", "(", "h", "-", "Y", ")", "/", "area", "\n", "w4", "=", "1", "-", "w1", "-", "w2", "-", "w3", "\n", "return", "LT", ",", "RT", ",", "LB", ",", "RB", ",", "w1", ",", "w2", ",", "w3", ",", "w4", "\n", "\n"]], "home.repos.pwc.inspect_result.new-stone-object_DNTD.evaluator_tool.SMeasureEval.SMeasureEval._ssim": [[118, 138], ["gt.float.float.float", "pred.mean", "gt.float.float.mean", "pred.size"], "methods", ["None"], ["", "def", "_ssim", "(", "self", ",", "pred", ",", "gt", ")", ":", "\n", "        ", "gt", "=", "gt", ".", "float", "(", ")", "\n", "h", ",", "w", "=", "pred", ".", "size", "(", ")", "[", "-", "2", ":", "]", "\n", "N", "=", "h", "*", "w", "\n", "x", "=", "pred", ".", "mean", "(", ")", "\n", "y", "=", "gt", ".", "mean", "(", ")", "\n", "sigma_x2", "=", "(", "(", "pred", "-", "x", ")", "*", "(", "pred", "-", "x", ")", ")", ".", "sum", "(", ")", "/", "(", "N", "-", "1", "+", "1e-20", ")", "\n", "sigma_y2", "=", "(", "(", "gt", "-", "y", ")", "*", "(", "gt", "-", "y", ")", ")", ".", "sum", "(", ")", "/", "(", "N", "-", "1", "+", "1e-20", ")", "\n", "sigma_xy", "=", "(", "(", "pred", "-", "x", ")", "*", "(", "gt", "-", "y", ")", ")", ".", "sum", "(", ")", "/", "(", "N", "-", "1", "+", "1e-20", ")", "\n", "\n", "aplha", "=", "4", "*", "x", "*", "y", "*", "sigma_xy", "\n", "beta", "=", "(", "x", "*", "x", "+", "y", "*", "y", ")", "*", "(", "sigma_x2", "+", "sigma_y2", ")", "\n", "\n", "if", "aplha", "!=", "0", ":", "\n", "            ", "Q", "=", "aplha", "/", "(", "beta", "+", "1e-20", ")", "\n", "", "elif", "aplha", "==", "0", "and", "beta", "==", "0", ":", "\n", "            ", "Q", "=", "1.0", "\n", "", "else", ":", "\n", "            ", "Q", "=", "0", "\n", "", "return", "Q", "", "", "", ""]], "home.repos.pwc.inspect_result.new-stone-object_DNTD.evaluator_tool.__init__.get_measure": [[17, 45], ["torch.device", "dict", "EvalDataloader.EvalDataloader", "tqdm.tqdm", "tqdm.tqdm.set_description", "tqdm.tqdm.set_description", "tqdm.tqdm.update", "len", "ret_dict.update", "list", "supported_measure_dict.keys"], "function", ["None"], []], "home.repos.pwc.inspect_result.new-stone-object_DNTD.evaluator_tool.MAEEval.MAEEval.__init__": [[15, 18], ["torch.device", "Evaluator.Evaluator.__init__"], "methods", ["home.repos.pwc.inspect_result.new-stone-object_DNTD.base_model.ResNet.ResNet.__init__"], ["def", "__init__", "(", "self", ",", "dataloader", ":", "DataLoader", ",", "device", ":", "torch", ".", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", ")", ":", "\n", "        ", "super", "(", "MAEEval", ",", "self", ")", ".", "__init__", "(", "dataloader", ",", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.new-stone-object_DNTD.evaluator_tool.MAEEval.MAEEval.eval": [[20, 47], ["torch.no_grad", "avg_mae.item", "preds.to.to.to", "labels.to.to.to", "preds.to.to.size", "range", "float", "torch.abs().mean", "torch.abs"], "methods", ["None"], ["", "def", "eval", "(", "self", ")", "->", "Dict", "[", "str", ",", "float", "]", ":", "\n", "        ", "avg_mae", ",", "img_num", "=", "0.0", ",", "0.0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "preds", ",", "labels", "in", "self", ".", "_dataloader", ":", "\n", "                ", "preds", "=", "preds", ".", "to", "(", "self", ".", "_device", ")", "\n", "labels", "=", "labels", ".", "to", "(", "self", ".", "_device", ")", "\n", "b", "=", "preds", ".", "size", "(", "0", ")", "\n", "for", "i", "in", "range", "(", "b", ")", ":", "\n", "                    ", "pred", "=", "preds", "[", "i", "]", "\n", "gt", "=", "labels", "[", "i", "]", "\n", "mea", "=", "torch", ".", "abs", "(", "pred", "-", "gt", ")", ".", "mean", "(", ")", "\n", "\"\"\"\n                    help:\n                    ```\n                    c = torch.from_numpy(np.array([np.inf]))\n                    a = c-c\n                    print(a == a)\n                    ```\n                    Out: tensor([0], dtype=torch.uint8)\n                    \"\"\"", "\n", "if", "mea", "==", "mea", ":", "# for Nan", "\n", "                        ", "avg_mae", "+=", "mea", "\n", "img_num", "+=", "1.0", "\n", "", "", "", "", "if", "img_num", "==", "0.0", ":", "\n", "            ", "return", "{", "\"MAE\"", ":", "float", "(", "\"inf\"", ")", "}", "\n", "", "avg_mae", "/=", "img_num", "\n", "return", "{", "\"MAE\"", ":", "avg_mae", ".", "item", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.new-stone-object_DNTD.dataset.file_table.get_dataset_path_by_name": [[7, 29], ["os.path.dirname", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "dict", "NameError"], "function", ["None"], ["def", "get_dataset_path_by_name", "(", "dataset_name", ":", "str", ")", "->", "Dict", "[", "str", ",", "str", "]", ":", "\n", "    ", "root_dir", "=", "os", ".", "path", ".", "dirname", "(", "__file__", ")", "\n", "if", "dataset_name", "not", "in", "\"DUT-OMRON DUTS ECSSD HKU-IS PASCAL-S SOD\"", ".", "split", "(", "\" \"", ")", ":", "\n", "        ", "raise", "NameError", "(", "f\"the dataset {dataset_name} are not be supported\"", ")", "\n", "", "train_dir_name", "=", "''", "\n", "test_dir_name", "=", "''", "\n", "train_lst_name", "=", "'train.lst'", "\n", "test_lst_name", "=", "'test.lst'", "\n", "if", "dataset_name", "==", "\"DUTS\"", ":", "\n", "        ", "train_dir_name", "=", "'DUTS-TR'", "\n", "test_dir_name", "=", "'DUTS-TE'", "\n", "", "train_dir_path", "=", "pathjoin", "(", "root_dir", ",", "dataset_name", ",", "train_dir_name", ")", "\n", "test_dir_path", "=", "pathjoin", "(", "root_dir", ",", "dataset_name", ",", "test_dir_name", ")", "\n", "train_lst_path", "=", "pathjoin", "(", "train_dir_path", ",", "train_lst_name", ")", "\n", "test_lst_path", "=", "pathjoin", "(", "test_dir_path", ",", "test_lst_name", ")", "\n", "return", "dict", "(", "\n", "train_dir_path", "=", "train_dir_path", ",", "\n", "train_lst_path", "=", "train_lst_path", ",", "\n", "test_dir_path", "=", "test_dir_path", ",", "\n", "test_lst_path", "=", "test_lst_path", ",", "\n", "train_dir_name", "=", "train_dir_name", ",", "\n", "test_dir_name", "=", "test_dir_name", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.new-stone-object_DNTD.networks.DNTD.PPM.__init__": [[19, 32], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "DNTD.PPM.ppms.append", "torch.ModuleList", "torch.ModuleList", "torch.Sequential", "torch.Sequential", "DNTD.PPM.ppms.append", "DNTD.PPM.conv_cats.append", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.new-stone-object_DNTD.base_model.ResNet.ResNet.__init__"], ["def", "__init__", "(", "self", ",", "dim_in", ",", "dim_out", ",", "trans_outs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "ppms", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "ppms", ".", "append", "(", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "dim_in", ",", "dim_out", ",", "1", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ")", "\n", "for", "ii", "in", "[", "1", ",", "3", ",", "5", ",", "7", "]", ":", "\n", "            ", "self", ".", "ppms", ".", "append", "(", "nn", ".", "Sequential", "(", "nn", ".", "AdaptiveAvgPool2d", "(", "ii", ")", ",", "nn", ".", "Conv2d", "(", "dim_in", ",", "dim_out", ",", "1", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ")", "\n", "", "self", ".", "conv_cats", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "channel", "in", "trans_outs", ":", "\n", "            ", "self", ".", "conv_cats", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "dim_out", "*", "5", ",", "channel", ",", "1", ",", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", ")", "\n"]], "home.repos.pwc.inspect_result.new-stone-object_DNTD.networks.DNTD.PPM.forward": [[34, 44], ["x.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "list", "ppm_outs.append", "list.append", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "module", "module"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "[", "b", ",", "c", ",", "row", ",", "col", "]", "=", "x", ".", "size", "(", ")", "\n", "ppm_outs", "=", "[", "self", ".", "ppms", "[", "0", "]", "(", "x", ")", ",", "]", "\n", "for", "module", "in", "self", ".", "ppms", "[", "1", ":", "]", ":", "\n", "            ", "ppm_outs", ".", "append", "(", "F", ".", "interpolate", "(", "module", "(", "x", ")", ",", "(", "row", ",", "col", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", ")", "\n", "", "feature_cat", "=", "torch", ".", "cat", "(", "ppm_outs", ",", "dim", "=", "1", ")", "\n", "result", "=", "list", "(", ")", "\n", "for", "module", "in", "self", ".", "conv_cats", ":", "\n", "            ", "result", ".", "append", "(", "module", "(", "feature_cat", ")", ")", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.new-stone-object_DNTD.networks.DNTD._Transition.__init__": [[47, 52], ["torch.Sequential.__init__", "DNTD._Transition.add_module", "DNTD._Transition.add_module", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.new-stone-object_DNTD.base_model.ResNet.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_input_features", ",", "num_output_features", ")", ":", "\n", "        ", "super", "(", "_Transition", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "add_module", "(", "'relu'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ")", "\n", "self", ".", "add_module", "(", "'conv'", ",", "nn", ".", "Conv2d", "(", "num_input_features", ",", "num_output_features", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "True", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.new-stone-object_DNTD.networks.DNTD._Transition.eval": [[53, 56], ["torch.ReLU", "torch.ReLU", "super().eval"], "methods", ["home.repos.pwc.inspect_result.new-stone-object_DNTD.networks.DNTD._Transition.eval"], ["", "def", "eval", "(", "self", ")", ":", "\n", "        ", "self", ".", "_module", "[", "'relu'", "]", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "return", "super", "(", ")", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.new-stone-object_DNTD.networks.DNTD.PlainConv.__init__": [[59, 62], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.new-stone-object_DNTD.base_model.ResNet.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_layers", ",", "num_input_features", ",", "bn_size", ",", "growth_rate", ",", "num_out_features", ",", "drop_rate", "=", "0", ")", ":", "\n", "        ", "super", "(", "PlainConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "num_input_features", ",", "num_out_features", ",", "3", ",", "1", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.new-stone-object_DNTD.networks.DNTD.PlainConv.forward": [[63, 67], ["torch.nn.functional.relu", "torch.nn.functional.relu", "DNTD.PlainConv.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "F", ".", "relu", "(", "x", ",", "inplace", "=", "not", "self", ".", "training", ")", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.new-stone-object_DNTD.networks.DNTD.ConcatTransition.__init__": [[71, 74], ["torch.Module.__init__", "DNTD._Transition"], "methods", ["home.repos.pwc.inspect_result.new-stone-object_DNTD.base_model.ResNet.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_input_features", ",", "num_out_features", ")", ":", "\n", "        ", "super", "(", "ConcatTransition", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "transition", "=", "_Transition", "(", "num_input_features", ",", "num_out_features", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.new-stone-object_DNTD.networks.DNTD.ConcatTransition.forward": [[75, 82], ["isinstance", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "DNTD.ConcatTransition.transition"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "isinstance", "(", "input", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "input_features", "=", "[", "input", "]", "\n", "", "else", ":", "\n", "            ", "input_features", "=", "input", "\n", "", "input_features", "=", "torch", ".", "cat", "(", "input_features", ",", "dim", "=", "1", ")", "\n", "return", "self", ".", "transition", "(", "input_features", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.new-stone-object_DNTD.networks.DNTD.DNTD.__init__": [[87, 138], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "list", "list.copy", "DNTD.PPM", "torch.ModuleList", "torch.ModuleList", "torch.ModuleDict", "torch.ModuleDict", "len", "range", "torch.ModuleList", "torch.ModuleList", "enumerate", "torch.ModuleList", "torch.ModuleList", "enumerate", "torch.ModuleList.append", "torch.Conv2d", "torch.Conv2d", "torch.ModuleList", "torch.ModuleList", "zip", "torch.ModuleDict.add_module", "torch.ModuleList", "torch.ModuleList", "zip", "torch.ModuleDict.add_module", "DNTD.ConcatTransition", "torch.ModuleList.append", "zip", "DNTD.ConcatTransition", "torch.ModuleList.append", "DNTD.ConcatTransition", "DNTD._Transition", "DNTD.PlainConv", "torch.ModuleList.append", "torch.ModuleList.append", "zip", "enumerate", "DNTD._Transition", "torch.Sequential", "torch.Sequential", "zip", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.new-stone-object_DNTD.base_model.ResNet.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "encoder_out_channels", ",", "encoder_new_out_channels", ",", "drop_rate", "=", "0", ")", ":", "\n", "        ", "super", "(", "DNTD", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "group_transitions", "=", "nn", ".", "ModuleList", "(", "[", "_Transition", "(", "encoder_out_channel", ",", "out_encoder_channel", ")", "for", "encoder_out_channel", ",", "out_encoder_channel", "in", "zip", "(", "encoder_out_channels", ",", "encoder_new_out_channels", ")", "]", ")", "\n", "ppm_in", "=", "encoder_out_channels", "[", "0", "]", "\n", "encoder_out_channels", "=", "encoder_new_out_channels", "\n", "\n", "group1_channels", "=", "list", "(", "encoder_new_out_channels", "[", "0", ":", "]", ")", "\n", "group2_channels", "=", "group1_channels", ".", "copy", "(", ")", "\n", "ppm_channels", "=", "group1_channels", "[", "1", ":", "]", "\n", "\n", "# self.aspp actually is PPM", "\n", "self", ".", "aspp", "=", "PPM", "(", "ppm_in", ",", "encoder_out_channels", "[", "0", "]", "//", "4", ",", "ppm_channels", ")", "\n", "\n", "self", ".", "denseblocks", "=", "nn", ".", "ModuleList", "(", "[", "PlainConv", "(", "2", ",", "group2_channel", ",", "2", ",", "group2_channel", "//", "4", ",", "out_channel", ",", "drop_rate", "=", "drop_rate", ")", "\n", "for", "i", ",", "(", "group2_channel", ",", "out_channel", ")", "in", "enumerate", "(", "zip", "(", "group2_channels", "[", "0", ":", "-", "1", "]", ",", "group2_channels", "[", "1", ":", "]", ")", ")", "]", ")", "\n", "\n", "self", ".", "group1_channels", "=", "group1_channels", "\n", "self", ".", "group2_channels", "=", "group2_channels", "\n", "group1_transitions", "=", "nn", ".", "ModuleDict", "(", ")", "\n", "self", ".", "count", "=", "len", "(", "encoder_out_channels", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "count", ")", ":", "\n", "            ", "transitions", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "in_channel", ",", "out_channel", "in", "zip", "(", "group1_channels", "[", "i", "-", "1", ":", "-", "1", "]", ",", "group1_channels", "[", "i", ":", "]", ")", ":", "\n", "                ", "transitions", ".", "append", "(", "_Transition", "(", "in_channel", ",", "out_channel", ")", ")", "\n", "", "group1_transitions", ".", "add_module", "(", "'group1_transitions_%d'", "%", "i", ",", "transitions", ")", "\n", "\n", "# next four lines are not meaningful", "\n", "dw_convs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "in_channel", ",", "out_channel", "in", "zip", "(", "group1_channels", "[", "i", "-", "1", ":", "-", "1", "]", ",", "group1_channels", "[", "i", ":", "]", ")", ":", "\n", "                ", "dw_convs", ".", "append", "(", "nn", ".", "Sequential", "(", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "nn", ".", "Conv2d", "(", "out_channel", ",", "out_channel", ",", "3", ",", "1", ",", "1", ",", "groups", "=", "out_channel", ")", ")", ")", "\n", "", "group1_transitions", ".", "add_module", "(", "'dw_convs_%d'", "%", "i", ",", "dw_convs", ")", "\n", "\n", "", "self", ".", "group1_transitions", "=", "group1_transitions", "\n", "group1_cancat_transitions", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", ",", "group1_channel", "in", "enumerate", "(", "group1_channels", "[", "1", ":", "]", ")", ":", "\n", "            ", "cancat_transition", "=", "ConcatTransition", "(", "(", "2", "+", "i", ")", "*", "group1_channel", ",", "group1_channel", ")", "\n", "group1_cancat_transitions", ".", "append", "(", "cancat_transition", ")", "\n", "", "self", ".", "group1_cancat_transitions", "=", "group1_cancat_transitions", "\n", "\n", "group2_cancat_transitions", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", ",", "(", "ppm_channel", ",", "group1_channel", ",", "group2_channel", ",", "out_channel", ")", "in", "enumerate", "(", "\n", "zip", "(", "ppm_channels", "[", "0", ":", "-", "1", "]", ",", "group1_channels", "[", "1", ":", "-", "1", "]", ",", "group2_channels", "[", "1", ":", "-", "1", "]", ",", "group2_channels", "[", "1", ":", "-", "1", "]", ")", ")", ":", "\n", "            ", "cancat_transition", "=", "ConcatTransition", "(", "ppm_channel", "+", "group1_channel", "+", "2", "*", "group2_channel", ",", "out_channel", ")", "\n", "group2_cancat_transitions", ".", "append", "(", "cancat_transition", ")", "\n", "\n", "", "group2_cancat_transitions", ".", "append", "(", "\n", "ConcatTransition", "(", "ppm_channels", "[", "-", "1", "]", "+", "group1_channels", "[", "-", "1", "]", "+", "2", "*", "group2_channels", "[", "-", "1", "]", ",", "4", ")", ")", "\n", "self", ".", "group2_cancat_transitions", "=", "group2_cancat_transitions", "\n", "self", ".", "score", "=", "nn", ".", "Conv2d", "(", "4", ",", "1", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.new-stone-object_DNTD.networks.DNTD.DNTD.upsample": [[140, 153], ["isinstance", "list", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "list.append", "list.append", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate"], "methods", ["None"], ["", "def", "upsample", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ",", "size", ":", "Tuple", "[", "int", ",", "int", "]", ")", "->", "Union", "[", "torch", ".", "Tensor", ",", "List", "[", "torch", ".", "Tensor", "]", "]", ":", "\n", "        ", "if", "isinstance", "(", "x", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "x_s", "=", "list", "(", ")", "\n", "for", "_x", "in", "x", ":", "\n", "                ", "if", "_x", ".", "shape", "[", "-", "2", ":", "]", "==", "size", ":", "\n", "                    ", "x_s", ".", "append", "(", "_x", ")", "\n", "", "else", ":", "\n", "                    ", "x_s", ".", "append", "(", "F", ".", "interpolate", "(", "_x", ",", "size", "=", "size", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", ")", "\n", "", "", "return", "x_s", "\n", "", "else", ":", "\n", "            ", "if", "x", ".", "shape", "[", "-", "2", ":", "]", "==", "size", ":", "\n", "                ", "return", "x", "\n", "", "return", "F", ".", "interpolate", "(", "x", ",", "size", "=", "size", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.new-stone-object_DNTD.networks.DNTD.DNTD.forward": [[154, 200], ["DNTD.DNTD.aspp", "list", "range", "zip", "range", "torch.nn.functional.relu", "torch.nn.functional.relu", "DNTD.DNTD.score", "DNTD.DNTD.upsample", "torch.nn.functional.relu", "torch.nn.functional.relu", "module", "list.append", "enumerate", "out_list.append", "group1_out_list.append", "list", "group1_concat_out_list.append", "DNTD.DNTD.upsample", "zip", "DNTD.DNTD.upsample", "out_list.append", "module", "DNTD.DNTD.upsample"], "methods", ["home.repos.pwc.inspect_result.new-stone-object_DNTD.networks.DNTD.DNTD.upsample", "home.repos.pwc.inspect_result.new-stone-object_DNTD.networks.DNTD.DNTD.upsample", "home.repos.pwc.inspect_result.new-stone-object_DNTD.networks.DNTD.DNTD.upsample", "home.repos.pwc.inspect_result.new-stone-object_DNTD.networks.DNTD.DNTD.upsample"], ["", "", "def", "forward", "(", "self", ",", "inputs", ",", "x_size", ")", ":", "\n", "        ", "ppm_outs", "=", "self", ".", "aspp", "(", "F", ".", "relu", "(", "inputs", "[", "0", "]", ",", "inplace", "=", "not", "self", ".", "training", ")", ")", "\n", "inputs", "=", "[", "module", "(", "x", ")", "for", "module", ",", "x", "in", "zip", "(", "self", ".", "group_transitions", ",", "inputs", ")", "]", "\n", "\n", "group1_inputs", "=", "inputs", "\n", "group2_inputs", "=", "inputs", "\n", "top_group1_input", "=", "group1_inputs", "[", "0", "]", "\n", "top_group2_input", "=", "group2_inputs", "[", "0", "]", "\n", "\n", "# progressive compres-sion  shortcut  paths", "\n", "inputs", "=", "[", "top_group1_input", "]", "\n", "group1_out_list", "=", "[", "]", "\n", "dst_size_list", "=", "list", "(", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "count", ")", ":", "\n", "            ", "dst_size", "=", "group1_inputs", "[", "i", "]", ".", "shape", "[", "-", "2", ":", "]", "\n", "dst_size_list", ".", "append", "(", "dst_size", ")", "\n", "out_list", "=", "[", "]", "\n", "col", "=", "i", "\n", "for", "j", ",", "input", "in", "enumerate", "(", "inputs", ")", ":", "\n", "                ", "out", "=", "self", ".", "group1_transitions", "[", "'group1_transitions_%d'", "%", "(", "j", "+", "1", ")", "]", "[", "col", "-", "1", "]", "(", "input", ")", "\n", "out", "=", "self", ".", "upsample", "(", "out", ",", "dst_size", ")", "\n", "out_list", ".", "append", "(", "out", ")", "\n", "col", "-=", "1", "\n", "\n", "", "out_list", ".", "append", "(", "group1_inputs", "[", "i", "]", ")", "\n", "group1_out_list", ".", "append", "(", "out_list", ")", "\n", "inputs", "=", "list", "(", "out_list", ")", "\n", "\n", "\n", "", "group1_concat_out_list", "=", "[", "]", "\n", "for", "dst_size", ",", "input", ",", "module", "in", "zip", "(", "dst_size_list", ",", "group1_out_list", ",", "self", ".", "group1_cancat_transitions", ")", ":", "\n", "            ", "new_input", "=", "input", "\n", "group1_concat_out_list", ".", "append", "(", "module", "(", "new_input", ")", ")", "\n", "\n", "# fusion process", "\n", "", "input", "=", "top_group2_input", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "count", ")", ":", "\n", "            ", "dst_size", "=", "group2_inputs", "[", "i", "]", ".", "shape", "[", "-", "2", ":", "]", "\n", "db_out", "=", "self", ".", "denseblocks", "[", "i", "-", "1", "]", "(", "input", ")", "\n", "db_out", "=", "self", ".", "upsample", "(", "db_out", ",", "dst_size", ")", "\n", "inputs", "=", "[", "self", ".", "upsample", "(", "ppm_outs", "[", "i", "-", "1", "]", ",", "dst_size", ")", ",", "group1_concat_out_list", "[", "i", "-", "1", "]", ",", "db_out", ",", "group2_inputs", "[", "i", "]", "]", "\n", "input", "=", "self", ".", "group2_cancat_transitions", "[", "i", "-", "1", "]", "(", "inputs", ")", "\n", "\n", "", "db_out", "=", "F", ".", "relu", "(", "input", ",", "inplace", "=", "True", ")", "\n", "score_map", "=", "self", ".", "score", "(", "db_out", ")", "\n", "return", "self", ".", "upsample", "(", "score_map", ",", "size", "=", "x_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.new-stone-object_DNTD.networks.DNTD.Net.__init__": [[202, 235], ["torch.Module.__init__", "DNTD.Net.modules", "config.Configuration.instance", "base_model.ResNet.resnet50", "DNTD.DNTD", "isinstance", "int", "int", "int", "int", "int", "efficientnet_pytorch.EfficientNet.from_name", "DNTD.DNTD", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "efficientnet_pytorch.EfficientNet.from_name", "DNTD.DNTD", "Exception", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "config.Configuration.instance", "config.Configuration.instance", "config.Configuration.instance", "config.Configuration.instance", "config.Configuration.instance"], "methods", ["home.repos.pwc.inspect_result.new-stone-object_DNTD.base_model.ResNet.ResNet.__init__", "home.repos.pwc.inspect_result.new-stone-object_DNTD.None.config.Configuration.instance", "home.repos.pwc.inspect_result.new-stone-object_DNTD.base_model.ResNet.resnet50", "home.repos.pwc.inspect_result.new-stone-object_DNTD.efficientnet_pytorch.model.EfficientNet.from_name", "home.repos.pwc.inspect_result.new-stone-object_DNTD.efficientnet_pytorch.model.EfficientNet.from_name", "home.repos.pwc.inspect_result.new-stone-object_DNTD.None.config.Configuration.instance", "home.repos.pwc.inspect_result.new-stone-object_DNTD.None.config.Configuration.instance", "home.repos.pwc.inspect_result.new-stone-object_DNTD.None.config.Configuration.instance", "home.repos.pwc.inspect_result.new-stone-object_DNTD.None.config.Configuration.instance", "home.repos.pwc.inspect_result.new-stone-object_DNTD.None.config.Configuration.instance"], ["    ", "def", "__init__", "(", "self", ",", "drop_rate", "=", "0", ")", ":", "\n", "        ", "super", "(", "Net", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "base_modelname", "=", "Configuration", ".", "instance", "(", ")", ".", "MODEL_NAME", "\n", "base_modelname", "=", "self", ".", "base_modelname", "\n", "if", "base_modelname", "==", "\"resnet50\"", ":", "\n", "            ", "self", ".", "encoder", "=", "resnet50", "(", "pretrained", "=", "False", ")", "\n", "encoder_out_channels", "=", "(", "2048", ",", "1024", ",", "512", ",", "256", ",", "64", ")", "\n", "encoder_new_out_channels", "=", "(", "int", "(", "2048", "/", "Configuration", ".", "instance", "(", ")", ".", "RESNET_SCALE", ")", ",", "\n", "int", "(", "1024", "/", "Configuration", ".", "instance", "(", ")", ".", "RESNET_SCALE", ")", ",", "\n", "int", "(", "512", "/", "Configuration", ".", "instance", "(", ")", ".", "RESNET_SCALE", ")", ",", "\n", "int", "(", "256", "/", "Configuration", ".", "instance", "(", ")", ".", "RESNET_SCALE", ")", ",", "\n", "int", "(", "64", "/", "Configuration", ".", "instance", "(", ")", ".", "RESNET_SCALE", ")", ")", "\n", "self", ".", "decoder", ":", "DNTD", "=", "DNTD", "(", "encoder_out_channels", ",", "encoder_new_out_channels", ",", "drop_rate", "=", "drop_rate", ")", "\n", "", "elif", "base_modelname", "==", "\"efficientnet-b3\"", ":", "\n", "            ", "self", ".", "encoder", ":", "EfficientNet", "=", "EfficientNet", ".", "from_name", "(", "'efficientnet-b3'", ",", "override_params", "=", "{", "'num_classes'", ":", "None", "}", ")", "\n", "encoder_out_channels", "=", "(", "1536", ",", "96", ",", "48", ",", "32", ",", "40", ")", "\n", "encoder_new_out_channels", "=", "(", "1536", "//", "8", ",", "96", "//", "2", ",", "48", "//", "2", ",", "32", "//", "2", ",", "32", "//", "4", ")", "\n", "self", ".", "decoder", ":", "DNTD", "=", "DNTD", "(", "encoder_out_channels", ",", "encoder_new_out_channels", ",", "drop_rate", "=", "drop_rate", ")", "\n", "", "elif", "base_modelname", "==", "\"efficientnet-b0\"", ":", "\n", "            ", "self", ".", "encoder", ":", "EfficientNet", "=", "EfficientNet", ".", "from_name", "(", "'efficientnet-b0'", ",", "override_params", "=", "{", "'num_classes'", ":", "None", "}", ")", "\n", "encoder_out_channels", "=", "(", "1280", ",", "80", ",", "40", ",", "24", ",", "32", ")", "\n", "encoder_new_out_channels", "=", "(", "1280", "//", "8", ",", "80", "//", "2", ",", "40", "//", "2", ",", "24", "//", "2", ",", "32", "//", "2", ")", "\n", "self", ".", "decoder", ":", "DNTD", "=", "DNTD", "(", "encoder_out_channels", ",", "encoder_new_out_channels", ",", "drop_rate", "=", "drop_rate", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "\"No model selected\"", ")", "\n", "\n", "", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.new-stone-object_DNTD.networks.DNTD.Net.load_encoder_weight": [[236, 254], ["DNTD.Net.to", "helper.utils.file_exist", "DNTD.Net.to", "torch.load", "torch.load", "torch.load", "torch.load", "base_modelname.startswith", "DNTD.Net.encoder.load_state_dict", "open", "torch.load.pop", "torch.load.pop", "torch.load.pop", "torch.load.pop", "base_modelname.startswith", "torch.load.pop", "torch.load.pop", "torch.load.pop", "torch.load.pop"], "methods", ["home.repos.pwc.inspect_result.new-stone-object_DNTD.helper.model_saver.ModelSaver.load_state_dict"], ["", "", "", "def", "load_encoder_weight", "(", "self", ",", "pth_path", ")", ":", "\n", "        ", "device", "=", "self", ".", "decoder", ".", "score", ".", "weight", ".", "device", "\n", "self", ".", "to", "(", "'cpu'", ")", "\n", "\n", "ret", "=", "\"No pretrained file\"", "\n", "if", "file_exist", "(", "pth_path", ")", ":", "\n", "            ", "state_dict", "=", "torch", ".", "load", "(", "open", "(", "pth_path", ",", "'rb'", ")", ",", "map_location", "=", "'cpu'", ")", "\n", "base_modelname", "=", "self", ".", "base_modelname", "\n", "if", "base_modelname", ".", "startswith", "(", "'efficientnet'", ")", ":", "\n", "                ", "state_dict", ".", "pop", "(", "'_fc.weight'", ")", "\n", "state_dict", ".", "pop", "(", "'_fc.bias'", ")", "\n", "", "elif", "base_modelname", ".", "startswith", "(", "'resnet'", ")", ":", "\n", "                ", "state_dict", ".", "pop", "(", "'fc.weight'", ")", "\n", "state_dict", ".", "pop", "(", "'fc.bias'", ")", "\n", "", "ret", "=", "self", ".", "encoder", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "False", ")", "\n", "del", "state_dict", "\n", "", "self", ".", "to", "(", "device", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.new-stone-object_DNTD.networks.DNTD.Net.forward": [[255, 259], ["DNTD.Net.encoder", "DNTD.Net.decoder"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "outs", "=", "self", ".", "encoder", "(", "x", ")", "\n", "out", "=", "self", ".", "decoder", "(", "outs", ",", "x", ".", "shape", "[", "-", "2", ":", "]", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.new-stone-object_DNTD.networks.__init__.get_upsampling_weight": [[8, 22], ["numpy.zeros", "torch.from_numpy().float", "torch.from_numpy", "abs", "abs", "range", "range"], "function", ["None"], []], "home.repos.pwc.inspect_result.new-stone-object_DNTD.efficientnet_pytorch.model.MBConvBlock.__init__": [[29, 66], ["torch.nn.Module.__init__", "utils.get_same_padding_conv2d", "utils.get_same_padding_conv2d.", "torch.nn.BatchNorm2d", "utils.get_same_padding_conv2d.", "torch.nn.BatchNorm2d", "utils.MemoryEfficientSwish", "utils.get_same_padding_conv2d.", "torch.nn.BatchNorm2d", "max", "utils.get_same_padding_conv2d.", "utils.get_same_padding_conv2d.", "int"], "methods", ["home.repos.pwc.inspect_result.new-stone-object_DNTD.base_model.ResNet.ResNet.__init__", "home.repos.pwc.inspect_result.new-stone-object_DNTD.efficientnet_pytorch.utils.get_same_padding_conv2d"], ["def", "__init__", "(", "self", ",", "block_args", ",", "global_params", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_block_args", "=", "block_args", "\n", "self", ".", "_bn_mom", "=", "1", "-", "global_params", ".", "batch_norm_momentum", "\n", "self", ".", "_bn_eps", "=", "global_params", ".", "batch_norm_epsilon", "\n", "self", ".", "has_se", "=", "(", "self", ".", "_block_args", ".", "se_ratio", "is", "not", "None", ")", "and", "(", "0", "<", "self", ".", "_block_args", ".", "se_ratio", "<=", "1", ")", "\n", "self", ".", "id_skip", "=", "block_args", ".", "id_skip", "# skip connection and drop connect", "\n", "\n", "# Get static or dynamic convolution depending on image size", "\n", "Conv2d", "=", "get_same_padding_conv2d", "(", "image_size", "=", "global_params", ".", "image_size", ")", "\n", "\n", "# Expansion phase", "\n", "inp", "=", "self", ".", "_block_args", ".", "input_filters", "# number of input channels", "\n", "oup", "=", "self", ".", "_block_args", ".", "input_filters", "*", "self", ".", "_block_args", ".", "expand_ratio", "# number of output channels", "\n", "if", "self", ".", "_block_args", ".", "expand_ratio", "!=", "1", ":", "\n", "            ", "self", ".", "_expand_conv", "=", "Conv2d", "(", "in_channels", "=", "inp", ",", "out_channels", "=", "oup", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "_bn0", "=", "nn", ".", "BatchNorm2d", "(", "num_features", "=", "oup", ",", "momentum", "=", "self", ".", "_bn_mom", ",", "eps", "=", "self", ".", "_bn_eps", ")", "\n", "\n", "# Depthwise convolution phase", "\n", "", "k", "=", "self", ".", "_block_args", ".", "kernel_size", "\n", "s", "=", "self", ".", "_block_args", ".", "stride", "\n", "self", ".", "_depthwise_conv", "=", "Conv2d", "(", "\n", "in_channels", "=", "oup", ",", "out_channels", "=", "oup", ",", "groups", "=", "oup", ",", "# groups makes it depthwise", "\n", "kernel_size", "=", "k", ",", "stride", "=", "s", ",", "bias", "=", "False", ")", "\n", "self", ".", "_bn1", "=", "nn", ".", "BatchNorm2d", "(", "num_features", "=", "oup", ",", "momentum", "=", "self", ".", "_bn_mom", ",", "eps", "=", "self", ".", "_bn_eps", ")", "\n", "\n", "# Squeeze and Excitation layer, if desired", "\n", "if", "self", ".", "has_se", ":", "\n", "            ", "num_squeezed_channels", "=", "max", "(", "1", ",", "int", "(", "self", ".", "_block_args", ".", "input_filters", "*", "self", ".", "_block_args", ".", "se_ratio", ")", ")", "\n", "self", ".", "_se_reduce", "=", "Conv2d", "(", "in_channels", "=", "oup", ",", "out_channels", "=", "num_squeezed_channels", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "_se_expand", "=", "Conv2d", "(", "in_channels", "=", "num_squeezed_channels", ",", "out_channels", "=", "oup", ",", "kernel_size", "=", "1", ")", "\n", "\n", "# Output phase", "\n", "", "final_oup", "=", "self", ".", "_block_args", ".", "output_filters", "\n", "self", ".", "_project_conv", "=", "Conv2d", "(", "in_channels", "=", "oup", ",", "out_channels", "=", "final_oup", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "_bn2", "=", "nn", ".", "BatchNorm2d", "(", "num_features", "=", "final_oup", ",", "momentum", "=", "self", ".", "_bn_mom", ",", "eps", "=", "self", ".", "_bn_eps", ")", "\n", "self", ".", "_swish", "=", "MemoryEfficientSwish", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.new-stone-object_DNTD.efficientnet_pytorch.model.MBConvBlock.train": [[67, 70], ["super().train", "model.MBConvBlock.set_swish"], "methods", ["home.repos.pwc.inspect_result.new-stone-object_DNTD.efficientnet_pytorch.model.MBConvBlock.train", "home.repos.pwc.inspect_result.new-stone-object_DNTD.efficientnet_pytorch.model.EfficientNet.set_swish"], ["", "def", "train", "(", "self", ",", "mode", ")", ":", "\n", "        ", "super", "(", "MBConvBlock", ",", "self", ")", ".", "train", "(", "mode", ")", "\n", "self", ".", "set_swish", "(", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.new-stone-object_DNTD.efficientnet_pytorch.model.MBConvBlock.forward": [[71, 99], ["model.MBConvBlock._swish", "model.MBConvBlock._bn2", "model.MBConvBlock._swish", "model.MBConvBlock._bn1", "torch.nn.functional.adaptive_avg_pool2d", "model.MBConvBlock._se_expand", "model.MBConvBlock._project_conv", "model.MBConvBlock._bn0", "model.MBConvBlock._depthwise_conv", "model.MBConvBlock._swish", "torch.sigmoid", "utils.drop_connect", "model.MBConvBlock._expand_conv", "model.MBConvBlock._se_reduce"], "methods", ["home.repos.pwc.inspect_result.new-stone-object_DNTD.efficientnet_pytorch.utils.drop_connect"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "drop_connect_rate", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        :param inputs: input tensor\n        :param drop_connect_rate: drop connect rate (float, between 0 and 1)\n        :return: output of block\n        \"\"\"", "\n", "\n", "# Expansion and Depthwise Convolution", "\n", "x", "=", "inputs", "\n", "if", "self", ".", "_block_args", ".", "expand_ratio", "!=", "1", ":", "\n", "            ", "x", "=", "self", ".", "_swish", "(", "self", ".", "_bn0", "(", "self", ".", "_expand_conv", "(", "inputs", ")", ")", ")", "\n", "", "x", "=", "self", ".", "_swish", "(", "self", ".", "_bn1", "(", "self", ".", "_depthwise_conv", "(", "x", ")", ")", ")", "\n", "\n", "# Squeeze and Excitation", "\n", "if", "self", ".", "has_se", ":", "\n", "            ", "x_squeezed", "=", "F", ".", "adaptive_avg_pool2d", "(", "x", ",", "1", ")", "\n", "x_squeezed", "=", "self", ".", "_se_expand", "(", "self", ".", "_swish", "(", "self", ".", "_se_reduce", "(", "x_squeezed", ")", ")", ")", "\n", "x", "=", "torch", ".", "sigmoid", "(", "x_squeezed", ")", "*", "x", "\n", "\n", "", "x", "=", "self", ".", "_bn2", "(", "self", ".", "_project_conv", "(", "x", ")", ")", "\n", "\n", "# Skip connection and drop connect", "\n", "input_filters", ",", "output_filters", "=", "self", ".", "_block_args", ".", "input_filters", ",", "self", ".", "_block_args", ".", "output_filters", "\n", "if", "self", ".", "id_skip", "and", "self", ".", "_block_args", ".", "stride", "==", "1", "and", "input_filters", "==", "output_filters", ":", "\n", "            ", "if", "drop_connect_rate", ":", "\n", "                ", "x", "=", "drop_connect", "(", "x", ",", "p", "=", "drop_connect_rate", ",", "training", "=", "self", ".", "training", ")", "\n", "", "x", "=", "x", "+", "inputs", "# skip connection", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.new-stone-object_DNTD.efficientnet_pytorch.model.MBConvBlock.set_swish": [[100, 103], ["utils.MemoryEfficientSwish", "utils.Swish"], "methods", ["None"], ["", "def", "set_swish", "(", "self", ",", "memory_efficient", "=", "True", ")", ":", "\n", "        ", "\"\"\"Sets swish function as memory efficient (for training) or standard (for export)\"\"\"", "\n", "self", ".", "_swish", "=", "MemoryEfficientSwish", "(", ")", "if", "memory_efficient", "else", "Swish", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.new-stone-object_DNTD.efficientnet_pytorch.model.EfficientNet.__init__": [[118, 168], ["torch.nn.Module.__init__", "isinstance", "utils.get_same_padding_conv2d", "utils.round_filters", "utils.get_same_padding_conv2d.", "torch.nn.BatchNorm2d", "torch.nn.ModuleList", "utils.round_filters", "utils.get_same_padding_conv2d.", "torch.nn.BatchNorm2d", "utils.MemoryEfficientSwish", "len", "block_args._replace._replace._replace", "model.EfficientNet._blocks.append", "range", "model.MBConvBlock", "block_args._replace._replace._replace", "model.EfficientNet._blocks.append", "utils.round_filters", "utils.round_filters", "utils.round_repeats", "model.MBConvBlock"], "methods", ["home.repos.pwc.inspect_result.new-stone-object_DNTD.base_model.ResNet.ResNet.__init__", "home.repos.pwc.inspect_result.new-stone-object_DNTD.efficientnet_pytorch.utils.get_same_padding_conv2d", "home.repos.pwc.inspect_result.new-stone-object_DNTD.efficientnet_pytorch.utils.round_filters", "home.repos.pwc.inspect_result.new-stone-object_DNTD.efficientnet_pytorch.utils.round_filters", "home.repos.pwc.inspect_result.new-stone-object_DNTD.efficientnet_pytorch.utils.round_filters", "home.repos.pwc.inspect_result.new-stone-object_DNTD.efficientnet_pytorch.utils.round_filters", "home.repos.pwc.inspect_result.new-stone-object_DNTD.efficientnet_pytorch.utils.round_repeats"], ["def", "__init__", "(", "self", ",", "blocks_args", "=", "None", ",", "global_params", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "assert", "isinstance", "(", "blocks_args", ",", "list", ")", ",", "'blocks_args should be a list'", "\n", "assert", "len", "(", "blocks_args", ")", ">", "0", ",", "'block args must be greater than 0'", "\n", "self", ".", "_global_params", "=", "global_params", "\n", "self", ".", "_blocks_args", "=", "blocks_args", "\n", "\n", "# Get static or dynamic convolution depending on image size", "\n", "Conv2d", "=", "get_same_padding_conv2d", "(", "image_size", "=", "global_params", ".", "image_size", ")", "\n", "\n", "# Batch norm parameters", "\n", "bn_mom", "=", "1", "-", "self", ".", "_global_params", ".", "batch_norm_momentum", "\n", "bn_eps", "=", "self", ".", "_global_params", ".", "batch_norm_epsilon", "\n", "\n", "# Stem", "\n", "in_channels", "=", "3", "# rgb", "\n", "out_channels", "=", "round_filters", "(", "32", ",", "self", ".", "_global_params", ")", "# number of output channels", "\n", "self", ".", "_conv_stem", "=", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "bias", "=", "False", ")", "\n", "self", ".", "_bn0", "=", "nn", ".", "BatchNorm2d", "(", "num_features", "=", "out_channels", ",", "momentum", "=", "bn_mom", ",", "eps", "=", "bn_eps", ")", "\n", "\n", "# Build blocks", "\n", "self", ".", "_blocks", "=", "nn", ".", "ModuleList", "(", "[", "]", ")", "\n", "for", "block_args", "in", "self", ".", "_blocks_args", ":", "\n", "\n", "# Update block input and output filters based on depth multiplier.", "\n", "            ", "block_args", "=", "block_args", ".", "_replace", "(", "\n", "input_filters", "=", "round_filters", "(", "block_args", ".", "input_filters", ",", "self", ".", "_global_params", ")", ",", "\n", "output_filters", "=", "round_filters", "(", "block_args", ".", "output_filters", ",", "self", ".", "_global_params", ")", ",", "\n", "num_repeat", "=", "round_repeats", "(", "block_args", ".", "num_repeat", ",", "self", ".", "_global_params", ")", "\n", ")", "\n", "\n", "# The first block needs to take care of stride and filter size increase.", "\n", "self", ".", "_blocks", ".", "append", "(", "MBConvBlock", "(", "block_args", ",", "self", ".", "_global_params", ")", ")", "\n", "if", "block_args", ".", "num_repeat", ">", "1", ":", "\n", "                ", "block_args", "=", "block_args", ".", "_replace", "(", "input_filters", "=", "block_args", ".", "output_filters", ",", "stride", "=", "1", ")", "\n", "", "for", "_", "in", "range", "(", "block_args", ".", "num_repeat", "-", "1", ")", ":", "\n", "                ", "self", ".", "_blocks", ".", "append", "(", "MBConvBlock", "(", "block_args", ",", "self", ".", "_global_params", ")", ")", "\n", "\n", "# Head", "\n", "", "", "in_channels", "=", "block_args", ".", "output_filters", "# output of final block", "\n", "out_channels", "=", "round_filters", "(", "1280", ",", "self", ".", "_global_params", ")", "\n", "# print('out_channels',out_channels)", "\n", "self", ".", "_conv_head", "=", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "_bn1", "=", "nn", ".", "BatchNorm2d", "(", "num_features", "=", "out_channels", ",", "momentum", "=", "bn_mom", ",", "eps", "=", "bn_eps", ")", "\n", "\n", "# Final linear layer", "\n", "# self._avg_pooling = nn.AdaptiveAvgPool2d(1)", "\n", "# self._dropout = nn.Dropout(self._global_params.dropout_rate)", "\n", "# self._fc = nn.Linear(out_channels, self._global_params.num_classes)", "\n", "self", ".", "_swish", "=", "MemoryEfficientSwish", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.new-stone-object_DNTD.efficientnet_pytorch.model.EfficientNet.set_swish": [[169, 174], ["utils.MemoryEfficientSwish", "utils.Swish", "block.set_swish"], "methods", ["home.repos.pwc.inspect_result.new-stone-object_DNTD.efficientnet_pytorch.model.EfficientNet.set_swish"], ["", "def", "set_swish", "(", "self", ",", "memory_efficient", "=", "True", ")", ":", "\n", "        ", "\"\"\"Sets swish function as memory efficient (for training) or standard (for export)\"\"\"", "\n", "self", ".", "_swish", "=", "MemoryEfficientSwish", "(", ")", "if", "memory_efficient", "else", "Swish", "(", ")", "\n", "for", "block", "in", "self", ".", "_blocks", ":", "\n", "            ", "block", ".", "set_swish", "(", "memory_efficient", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.new-stone-object_DNTD.efficientnet_pytorch.model.EfficientNet.extract_features": [[176, 195], ["list", "model.EfficientNet._swish", "list.append", "enumerate", "model.EfficientNet._swish", "model.EfficientNet._bn0", "block", "model.EfficientNet._bn1", "model.EfficientNet._conv_stem", "isinstance", "list.append", "model.EfficientNet._conv_head", "float", "len"], "methods", ["None"], ["", "", "def", "extract_features", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "\"\"\" Returns output of the final convolution layer \"\"\"", "\n", "\n", "res", "=", "list", "(", ")", "\n", "# Stem", "\n", "x", "=", "self", ".", "_swish", "(", "self", ".", "_bn0", "(", "self", ".", "_conv_stem", "(", "inputs", ")", ")", ")", "\n", "res", ".", "append", "(", "x", ")", "\n", "# Blocks", "\n", "for", "idx", ",", "block", "in", "enumerate", "(", "self", ".", "_blocks", ")", ":", "\n", "            ", "drop_connect_rate", "=", "self", ".", "_global_params", ".", "drop_connect_rate", "\n", "if", "drop_connect_rate", ":", "\n", "                ", "drop_connect_rate", "*=", "float", "(", "idx", ")", "/", "len", "(", "self", ".", "_blocks", ")", "\n", "", "x", "=", "block", "(", "x", ",", "drop_connect_rate", "=", "drop_connect_rate", ")", "\n", "if", "isinstance", "(", "block", ".", "_block_args", ".", "stride", ",", "list", ")", "and", "block", ".", "_block_args", ".", "stride", "[", "0", "]", "==", "2", ":", "\n", "                ", "res", ".", "append", "(", "x", ")", "\n", "\n", "# Head", "\n", "", "", "x", "=", "self", ".", "_swish", "(", "self", ".", "_bn1", "(", "self", ".", "_conv_head", "(", "x", ")", ")", ")", "\n", "return", "x", ",", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.new-stone-object_DNTD.efficientnet_pytorch.model.EfficientNet.forward": [[196, 212], ["model.EfficientNet.extract_features", "res.pop", "res.append", "res.reverse"], "methods", ["home.repos.pwc.inspect_result.new-stone-object_DNTD.efficientnet_pytorch.model.EfficientNet.extract_features"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "\"\"\" Calls extract_features to extract features, applies final linear layer, and returns logits. \"\"\"", "\n", "# bs = inputs.size(0)", "\n", "# Convolution layers", "\n", "x", ",", "res", "=", "self", ".", "extract_features", "(", "inputs", ")", "\n", "res", ".", "pop", "(", ")", "\n", "res", ".", "append", "(", "x", ")", "\n", "# Pooling and final linear layer", "\n", "# x = self._avg_pooling(x)", "\n", "# x = x.view(bs, -1)", "\n", "# x = self._dropout(x)", "\n", "# x = self._fc(x)", "\n", "res", ".", "reverse", "(", ")", "\n", "# for i in res:", "\n", "#     print(i.shape)", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.new-stone-object_DNTD.efficientnet_pytorch.model.EfficientNet.from_name": [[213, 218], ["cls._check_model_name_is_valid", "utils.get_model_params", "cls"], "methods", ["home.repos.pwc.inspect_result.new-stone-object_DNTD.efficientnet_pytorch.model.EfficientNet._check_model_name_is_valid", "home.repos.pwc.inspect_result.new-stone-object_DNTD.efficientnet_pytorch.utils.get_model_params"], ["", "@", "classmethod", "\n", "def", "from_name", "(", "cls", ",", "model_name", ",", "override_params", "=", "None", ")", ":", "\n", "        ", "cls", ".", "_check_model_name_is_valid", "(", "model_name", ")", "\n", "blocks_args", ",", "global_params", "=", "get_model_params", "(", "model_name", ",", "override_params", ")", "\n", "return", "cls", "(", "blocks_args", ",", "global_params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.new-stone-object_DNTD.efficientnet_pytorch.model.EfficientNet.from_pretrained": [[219, 228], ["cls.from_name", "utils.load_pretrained_weights", "utils.get_same_padding_conv2d", "utils.round_filters", "utils.get_same_padding_conv2d."], "methods", ["home.repos.pwc.inspect_result.new-stone-object_DNTD.efficientnet_pytorch.model.EfficientNet.from_name", "home.repos.pwc.inspect_result.new-stone-object_DNTD.efficientnet_pytorch.utils.load_pretrained_weights", "home.repos.pwc.inspect_result.new-stone-object_DNTD.efficientnet_pytorch.utils.get_same_padding_conv2d", "home.repos.pwc.inspect_result.new-stone-object_DNTD.efficientnet_pytorch.utils.round_filters"], ["", "@", "classmethod", "\n", "def", "from_pretrained", "(", "cls", ",", "model_name", ",", "advprop", "=", "False", ",", "num_classes", "=", "1000", ",", "in_channels", "=", "3", ")", ":", "\n", "        ", "model", "=", "cls", ".", "from_name", "(", "model_name", ",", "override_params", "=", "{", "'num_classes'", ":", "num_classes", "}", ")", "\n", "load_pretrained_weights", "(", "model", ",", "model_name", ",", "load_fc", "=", "(", "num_classes", "==", "1000", ")", ",", "advprop", "=", "advprop", ")", "\n", "if", "in_channels", "!=", "3", ":", "\n", "            ", "Conv2d", "=", "get_same_padding_conv2d", "(", "image_size", "=", "model", ".", "_global_params", ".", "image_size", ")", "\n", "out_channels", "=", "round_filters", "(", "32", ",", "model", ".", "_global_params", ")", "\n", "model", ".", "_conv_stem", "=", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "bias", "=", "False", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.new-stone-object_DNTD.efficientnet_pytorch.model.EfficientNet.get_image_size": [[229, 234], ["cls._check_model_name_is_valid", "utils.efficientnet_params"], "methods", ["home.repos.pwc.inspect_result.new-stone-object_DNTD.efficientnet_pytorch.model.EfficientNet._check_model_name_is_valid", "home.repos.pwc.inspect_result.new-stone-object_DNTD.efficientnet_pytorch.utils.efficientnet_params"], ["", "@", "classmethod", "\n", "def", "get_image_size", "(", "cls", ",", "model_name", ")", ":", "\n", "        ", "cls", ".", "_check_model_name_is_valid", "(", "model_name", ")", "\n", "_", ",", "_", ",", "res", ",", "_", "=", "efficientnet_params", "(", "model_name", ")", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.new-stone-object_DNTD.efficientnet_pytorch.model.EfficientNet._check_model_name_is_valid": [[235, 241], ["ValueError", "str", "range"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "_check_model_name_is_valid", "(", "cls", ",", "model_name", ")", ":", "\n", "        ", "\"\"\" Validates model name. \"\"\"", "\n", "valid_models", "=", "[", "'efficientnet-b'", "+", "str", "(", "i", ")", "for", "i", "in", "range", "(", "9", ")", "]", "\n", "if", "model_name", "not", "in", "valid_models", ":", "\n", "            ", "raise", "ValueError", "(", "'model_name should be one of: '", "+", "', '", ".", "join", "(", "valid_models", ")", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.new-stone-object_DNTD.efficientnet_pytorch.utils.SwishImplementation.forward": [[38, 43], ["ctx.save_for_backward", "torch.sigmoid"], "methods", ["None"], ["def", "__delattr__", "(", "self", ",", "name", ")", ":", "del", "self", "[", "name", "]", "\n", "\n", "\n", "", "def", "pandas2markdown", "(", "dataframe", ":", "pd", ".", "DataFrame", ")", "->", "str", ":", "\n", "    "]], "home.repos.pwc.inspect_result.new-stone-object_DNTD.efficientnet_pytorch.utils.SwishImplementation.backward": [[44, 49], ["torch.sigmoid"], "methods", ["None"], ["\n", "if", "not", "hasattr", "(", "pandas2markdown", ",", "'writer'", ")", ":", "\n", "        ", "pandas2markdown", ".", "writer", ":", "MarkdownTableWriter", "=", "MarkdownTableWriter", "(", ")", "\n", "", "pandas2markdown", ".", "writer", ".", "from_dataframe", "(", "\n", "dataframe", ",", "\n"]], "home.repos.pwc.inspect_result.new-stone-object_DNTD.efficientnet_pytorch.utils.MemoryEfficientSwish.forward": [[52, 54], ["SwishImplementation.apply"], "methods", ["None"], ["return", "pandas2markdown", ".", "writer", ".", "dumps", "(", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.new-stone-object_DNTD.efficientnet_pytorch.utils.Swish.forward": [[56, 58], ["torch.sigmoid"], "methods", ["None"], ["", ""]], "home.repos.pwc.inspect_result.new-stone-object_DNTD.efficientnet_pytorch.utils.Conv2dDynamicSamePadding.__init__": [[107, 110], ["torch.nn.Conv2d.__init__", "len"], "methods", ["home.repos.pwc.inspect_result.new-stone-object_DNTD.base_model.ResNet.ResNet.__init__"], []], "home.repos.pwc.inspect_result.new-stone-object_DNTD.efficientnet_pytorch.utils.Conv2dDynamicSamePadding.forward": [[111, 121], ["max", "max", "torch.nn.functional.conv2d", "torch.nn.functional.pad.size", "utils.Conv2dDynamicSamePadding.weight.size", "math.ceil", "math.ceil", "torch.nn.functional.pad"], "methods", ["None"], []], "home.repos.pwc.inspect_result.new-stone-object_DNTD.efficientnet_pytorch.utils.Conv2dStaticSamePadding.__init__": [[126, 142], ["torch.nn.Conv2d.__init__", "max", "max", "utils.Conv2dStaticSamePadding.weight.size", "math.ceil", "math.ceil", "torch.nn.ZeroPad2d", "utils.Identity", "len", "type"], "methods", ["home.repos.pwc.inspect_result.new-stone-object_DNTD.base_model.ResNet.ResNet.__init__"], []], "home.repos.pwc.inspect_result.new-stone-object_DNTD.efficientnet_pytorch.utils.Conv2dStaticSamePadding.forward": [[143, 147], ["utils.Conv2dStaticSamePadding.static_padding", "torch.nn.functional.conv2d"], "methods", ["None"], []], "home.repos.pwc.inspect_result.new-stone-object_DNTD.efficientnet_pytorch.utils.Identity.__init__": [[150, 152], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.new-stone-object_DNTD.base_model.ResNet.ResNet.__init__"], []], "home.repos.pwc.inspect_result.new-stone-object_DNTD.efficientnet_pytorch.utils.Identity.forward": [[153, 155], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.new-stone-object_DNTD.efficientnet_pytorch.utils.BlockDecoder._decode_block_string": [[183, 209], ["isinstance", "block_string.split", "BlockArgs", "re.split", "len", "int", "int", "int", "int", "int", "len", "len", "float", "int"], "methods", ["None"], []], "home.repos.pwc.inspect_result.new-stone-object_DNTD.efficientnet_pytorch.utils.BlockDecoder._encode_block_string": [[210, 226], ["args.append", "args.append"], "methods", ["None"], []], "home.repos.pwc.inspect_result.new-stone-object_DNTD.efficientnet_pytorch.utils.BlockDecoder.decode": [[227, 240], ["isinstance", "blocks_args.append", "utils.BlockDecoder._decode_block_string"], "methods", ["home.repos.pwc.inspect_result.new-stone-object_DNTD.efficientnet_pytorch.utils.BlockDecoder._decode_block_string"], []], "home.repos.pwc.inspect_result.new-stone-object_DNTD.efficientnet_pytorch.utils.BlockDecoder.encode": [[241, 253], ["block_strings.append", "utils.BlockDecoder._encode_block_string"], "methods", ["home.repos.pwc.inspect_result.new-stone-object_DNTD.efficientnet_pytorch.utils.BlockDecoder._encode_block_string"], []], "home.repos.pwc.inspect_result.new-stone-object_DNTD.efficientnet_pytorch.utils.round_filters": [[60, 73], ["max", "int", "int"], "function", ["None"], []], "home.repos.pwc.inspect_result.new-stone-object_DNTD.efficientnet_pytorch.utils.round_repeats": [[75, 81], ["int", "math.ceil"], "function", ["None"], []], "home.repos.pwc.inspect_result.new-stone-object_DNTD.efficientnet_pytorch.utils.drop_connect": [[83, 93], ["torch.rand", "torch.floor"], "function", ["None"], []], "home.repos.pwc.inspect_result.new-stone-object_DNTD.efficientnet_pytorch.utils.get_same_padding_conv2d": [[95, 102], ["functools.partial"], "function", ["None"], []], "home.repos.pwc.inspect_result.new-stone-object_DNTD.efficientnet_pytorch.utils.efficientnet_params": [[162, 178], ["None"], "function", ["None"], []], "home.repos.pwc.inspect_result.new-stone-object_DNTD.efficientnet_pytorch.utils.efficientnet": [[255, 282], ["utils.BlockDecoder.decode", "GlobalParams"], "function", ["home.repos.pwc.inspect_result.new-stone-object_DNTD.efficientnet_pytorch.utils.BlockDecoder.decode"], []], "home.repos.pwc.inspect_result.new-stone-object_DNTD.efficientnet_pytorch.utils.get_model_params": [[284, 297], ["model_name.startswith", "utils.efficientnet_params", "utils.efficientnet", "NotImplementedError", "global_params._replace._replace"], "function", ["home.repos.pwc.inspect_result.new-stone-object_DNTD.efficientnet_pytorch.utils.efficientnet_params", "home.repos.pwc.inspect_result.new-stone-object_DNTD.efficientnet_pytorch.utils.efficientnet"], []], "home.repos.pwc.inspect_result.new-stone-object_DNTD.efficientnet_pytorch.utils.load_pretrained_weights": [[324, 349], ["os.path.basename", "os.path.join", "os.path.exists", "print", "os.path.dirname", "torch.load", "torch.utils.model_zoo.load_url", "model.load_state_dict", "model_zoo.load_url.pop", "model_zoo.load_url.pop", "model.load_state_dict", "open"], "function", ["home.repos.pwc.inspect_result.new-stone-object_DNTD.helper.model_saver.ModelSaver.load_state_dict", "home.repos.pwc.inspect_result.new-stone-object_DNTD.helper.model_saver.ModelSaver.load_state_dict"], []], "home.repos.pwc.inspect_result.new-stone-object_DNTD.base_model.ResNet.Bottleneck.__init__": [[6, 15], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.new-stone-object_DNTD.base_model.ResNet.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "dilation", "=", "1", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "(", "3", "*", "dilation", "-", "1", ")", "//", "2", ",", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "4", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "\n"]], "home.repos.pwc.inspect_result.new-stone-object_DNTD.base_model.ResNet.Bottleneck.forward": [[16, 23], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "ResNet.Bottleneck.bn3", "torch.relu", "torch.relu", "ResNet.Bottleneck.bn1", "ResNet.Bottleneck.bn2", "ResNet.Bottleneck.conv3", "ResNet.Bottleneck.downsample", "ResNet.Bottleneck.conv1", "ResNet.Bottleneck.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ",", "inplace", "=", "True", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ",", "inplace", "=", "True", ")", "\n", "out", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "downsample", "(", "x", ")", "\n", "", "return", "F", ".", "relu", "(", "out", "+", "x", ",", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.new-stone-object_DNTD.base_model.ResNet.ResNet.__init__": [[26, 35], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "ResNet.ResNet.make_layer", "ResNet.ResNet.make_layer", "ResNet.ResNet.make_layer", "ResNet.ResNet.make_layer"], "methods", ["home.repos.pwc.inspect_result.new-stone-object_DNTD.base_model.ResNet.ResNet.__init__", "home.repos.pwc.inspect_result.new-stone-object_DNTD.base_model.ResNet.ResNet.make_layer", "home.repos.pwc.inspect_result.new-stone-object_DNTD.base_model.ResNet.ResNet.make_layer", "home.repos.pwc.inspect_result.new-stone-object_DNTD.base_model.ResNet.ResNet.make_layer", "home.repos.pwc.inspect_result.new-stone-object_DNTD.base_model.ResNet.ResNet.make_layer"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "layer1", "=", "self", ".", "make_layer", "(", "64", ",", "3", ",", "stride", "=", "1", ",", "dilation", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "make_layer", "(", "128", ",", "4", ",", "stride", "=", "2", ",", "dilation", "=", "1", ")", "\n", "self", ".", "layer3", "=", "self", ".", "make_layer", "(", "256", ",", "6", ",", "stride", "=", "2", ",", "dilation", "=", "1", ")", "\n", "self", ".", "layer4", "=", "self", ".", "make_layer", "(", "512", ",", "3", ",", "stride", "=", "2", ",", "dilation", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.new-stone-object_DNTD.base_model.ResNet.ResNet.make_layer": [[36, 43], ["torch.Sequential", "torch.Sequential", "range", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "ResNet.Bottleneck", "layers.append", "ResNet.Bottleneck"], "methods", ["None"], ["", "def", "make_layer", "(", "self", ",", "planes", ",", "blocks", ",", "stride", ",", "dilation", ")", ":", "\n", "        ", "downsample", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "nn", ".", "BatchNorm2d", "(", "planes", "*", "4", ")", ")", "\n", "layers", "=", "[", "Bottleneck", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "dilation", "=", "dilation", ")", "]", "\n", "self", ".", "inplanes", "=", "planes", "*", "4", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "Bottleneck", "(", "self", ".", "inplanes", ",", "planes", ",", "dilation", "=", "dilation", ")", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.new-stone-object_DNTD.base_model.ResNet.ResNet.forward": [[44, 52], ["torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "ResNet.ResNet.layer1", "ResNet.ResNet.layer2", "ResNet.ResNet.layer3", "ResNet.ResNet.layer4", "ResNet.ResNet.bn1", "ResNet.ResNet.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out1", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ",", "inplace", "=", "True", ")", "\n", "out1", "=", "F", ".", "max_pool2d", "(", "out1", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "out2", "=", "self", ".", "layer1", "(", "out1", ")", "\n", "out3", "=", "self", ".", "layer2", "(", "out2", ")", "\n", "out4", "=", "self", ".", "layer3", "(", "out3", ")", "\n", "out5", "=", "self", ".", "layer4", "(", "out4", ")", "\n", "return", "out5", ",", "out4", ",", "out3", ",", "out2", ",", "out1", "\n", "\n"]], "home.repos.pwc.inspect_result.new-stone-object_DNTD.base_model.ResNet.resnet50": [[53, 55], ["ResNet.ResNet"], "function", ["None"], ["", "", "def", "resnet50", "(", "pretrained", "=", "False", ")", ":", "\n", "    ", "return", "ResNet", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.new-stone-object_DNTD.losses.__init__.structure_weighted_binary_cross_entropy_with_logits": [[10, 27], ["torch.pad", "torch.abs", "torch.abs", "torch.conv2d", "torch.conv2d", "torch.abs_", "torch.abs_", "torch.abs_", "torch.abs_", "torch.binary_cross_entropy_with_logits", "F.binary_cross_entropy_with_logits.sum", "torch.pad", "torch.FloatTensor().view().to", "torch.FloatTensor().view().to", "torch.pad", "torch.FloatTensor().view().to", "torch.FloatTensor().view().to", "torch.avg_pool2d", "[].unsqueeze", "[].unsqueeze", "[].unsqueeze", "torch.FloatTensor().view", "torch.FloatTensor().view", "torch.FloatTensor().view", "torch.FloatTensor().view", "config.Configuration.instance", "torch.abs.view().min", "torch.abs.view().min", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.abs.view().max", "torch.abs.view", "torch.abs.view", "torch.abs.view"], "function", ["home.repos.pwc.inspect_result.new-stone-object_DNTD.None.config.Configuration.instance"], []]}