{"home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.None.setup._get_version": [[27, 37], ["pathlib.Path", "version_path.is_file", "open", "exec", "version_file.read"], "function", ["None"], ["def", "_get_version", "(", ")", ":", "\n", "    ", "\"\"\"\"Utility function to get the version of this package.\"\"\"", "\n", "\n", "ns", "=", "{", "}", "\n", "version_path", "=", "Path", "(", "PROJECT_NAME", ")", "/", "\"version.py\"", "\n", "if", "not", "version_path", ".", "is_file", "(", ")", ":", "\n", "        ", "return", "\n", "", "with", "open", "(", "version_path", ")", "as", "version_file", ":", "\n", "        ", "exec", "(", "version_file", ".", "read", "(", ")", ",", "ns", ")", "\n", "", "return", "ns", "[", "\"__version__\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.project_joints.run_projection": [[30, 82], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "glob.glob", "tqdm.tqdm", "os.path.join", "enumerate", "logging.info", "pandas.read_pickle", "logging.info", "get_joints_verts_from_dataframe.add_joints_verts_in_dataframe", "get_joints_verts_from_dataframe.add_joints_verts_in_dataframe.to_pickle", "KeyError", "str", "df_path.replace"], "function", ["home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.get_joints_verts_from_dataframe.add_joints_verts_in_dataframe"], ["def", "run_projection", "(", "*", "args", ")", ":", "\n", "    ", "\"\"\"Function to run the evaluation.\"\"\"", "\n", "\n", "# Parser", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--modelFolder'", ",", "type", "=", "str", ",", "\n", "default", "=", "'demo/model/smplx'", ")", "\n", "parser", ".", "add_argument", "(", "'--debug_path'", ",", "type", "=", "str", ",", "\n", "default", "=", "''", ")", "\n", "parser", ".", "add_argument", "(", "'--numBetas'", ",", "type", "=", "int", ",", "default", "=", "10", ")", "\n", "parser", ".", "add_argument", "(", "'--imgHeight'", ",", "type", "=", "int", ",", "default", "=", "2160", ",", "\n", "help", "=", "'Height of the image'", ")", "\n", "parser", ".", "add_argument", "(", "'--imgWidth'", ",", "type", "=", "int", ",", "default", "=", "3840", ",", "\n", "help", "=", "'Width of the image'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--imgFolder'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "''", ",", "\n", "help", "=", "'Path to the folder containing test/validation images'", ")", "\n", "parser", ".", "add_argument", "(", "'--loadPrecomputed'", ",", "type", "=", "str", ",", "default", "=", "''", ",", "\n", "help", "=", "'Path to the ground truth SMPL/SMPLX dataframe'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--modeltype'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "'SMPLX'", ",", "\n", "help", "=", "'SMPL or SMPLX'", ")", "\n", "parser", ".", "add_argument", "(", "'--kid_template_path'", ",", "type", "=", "str", ",", "default", "=", "'template'", ")", "\n", "parser", ".", "add_argument", "(", "'--gt_model_path'", ",", "type", "=", "str", ",", "default", "=", "''", ")", "\n", "parser", ".", "add_argument", "(", "'--debug'", ",", "action", "=", "'store_true'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", "*", "args", ")", "\n", "#Because AGORA pose params are in vector format", "\n", "args", ".", "pose2rot", "=", "True", "\n", "imgHeight", "=", "args", ".", "imgHeight", "\n", "imgWidth", "=", "args", ".", "imgWidth", "\n", "\n", "all_df", "=", "glob", "(", "os", ".", "path", ".", "join", "(", "args", ".", "loadPrecomputed", ",", "'*.pkl'", ")", ")", "\n", "for", "df_iter", ",", "df_path", "in", "tqdm", "(", "enumerate", "(", "all_df", ")", ")", ":", "\n", "        ", "logging", ".", "info", "(", "\n", "'Processing {}th dataframe'", ".", "format", "(", "\n", "str", "(", "df_iter", ")", ")", ")", "\n", "df", "=", "pandas", ".", "read_pickle", "(", "df_path", ")", "\n", "# Check if gt joints and verts are stored in dataframe. If not", "\n", "# generate them ####", "\n", "if", "'gt_joints_2d'", "not", "in", "df", "or", "'gt_joints_3d'", "not", "in", "df", ":", "\n", "            ", "logging", ".", "info", "(", "'Generating Ground truth joints'", ")", "\n", "store_joints", "=", "True", "\n", "df", "=", "add_joints_verts_in_dataframe", "(", "args", ",", "df", ",", "store_joints", ")", "\n", "# write new dataframe with joints and verts stored", "\n", "df", ".", "to_pickle", "(", "df_path", ".", "replace", "(", "'.pkl'", ",", "'_withjv.pkl'", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "KeyError", "(", "'Joints already stored in the dataframe. Please remove it before processing'", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.calculate_v2v_error.get_spheres": [[30, 41], ["Sphere().to_mesh", "all", "Sphere"], "function", ["None"], ["def", "get_spheres", "(", "points", ",", "color", ",", "radius", ")", ":", "\n", "    ", "from", "psbody", ".", "mesh", ".", "sphere", "import", "Sphere", "\n", "\n", "points", "=", "points", "\n", "spheres", "=", "[", "\n", "Sphere", "(", "\n", "center", "=", "point", ",", "\n", "radius", "=", "radius", ")", ".", "to_mesh", "(", "\n", "color", "=", "color", ")", "for", "point", "in", "points", "if", "all", "(", "point", ")", "]", "\n", "\n", "return", "spheres", "\n", "\n"]], "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.calculate_v2v_error.compute_similarity_transform": [[43, 109], ["S1_p.mean", "S2_p.mean", "numpy.sum", "X1.dot", "numpy.linalg.svd", "numpy.eye", "numpy.sign", "V.dot", "numpy.linalg.det", "np.eye.dot", "numpy.trace", "U.dot", "V.dot.dot", "V.dot.dot", "V.dot.dot", "V.dot.dot"], "function", ["None"], ["", "def", "compute_similarity_transform", "(", "S1", ",", "S2", ",", "num_joints", ",", "verts", "=", "None", ")", ":", "\n", "    ", "'''\n    Computes a similarity transform (sR, t) that takes\n    a set of 3D points S1 (3 x N) closest to a set of 3D points S2,\n    where R is an 3x3 rotation matrix, t 3x1 translation, s scale.\n    i.e. solves the orthogonal Procrutes problem.\n    '''", "\n", "transposed", "=", "False", "\n", "if", "S1", ".", "shape", "[", "0", "]", "!=", "3", "and", "S1", ".", "shape", "[", "0", "]", "!=", "2", ":", "\n", "        ", "S1", "=", "S1", ".", "T", "\n", "S2", "=", "S2", ".", "T", "\n", "if", "verts", "is", "not", "None", ":", "\n", "            ", "verts", "=", "verts", ".", "T", "\n", "", "transposed", "=", "True", "\n", "", "assert", "(", "S2", ".", "shape", "[", "1", "]", "==", "S1", ".", "shape", "[", "1", "]", ")", "\n", "\n", "# Use only body joints for procrustes", "\n", "S1_p", "=", "S1", "[", ":", ",", ":", "num_joints", "]", "\n", "S2_p", "=", "S2", "[", ":", ",", ":", "num_joints", "]", "\n", "# 1. Remove mean.", "\n", "mu1", "=", "S1_p", ".", "mean", "(", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "\n", "mu2", "=", "S2_p", ".", "mean", "(", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "\n", "X1", "=", "S1_p", "-", "mu1", "\n", "X2", "=", "S2_p", "-", "mu2", "\n", "\n", "# 2. Compute variance of X1 used for scale.", "\n", "var1", "=", "np", ".", "sum", "(", "X1", "**", "2", ")", "\n", "\n", "# 3. The outer product of X1 and X2.", "\n", "K", "=", "X1", ".", "dot", "(", "X2", ".", "T", ")", "\n", "\n", "# 4. Solution that Maximizes trace(R'K) is R=U*V', where U, V are", "\n", "# singular vectors of K.", "\n", "U", ",", "s", ",", "Vh", "=", "np", ".", "linalg", ".", "svd", "(", "K", ")", "\n", "V", "=", "Vh", ".", "T", "\n", "# Construct Z that fixes the orientation of R to get det(R)=1.", "\n", "Z", "=", "np", ".", "eye", "(", "U", ".", "shape", "[", "0", "]", ")", "\n", "Z", "[", "-", "1", ",", "-", "1", "]", "*=", "np", ".", "sign", "(", "np", ".", "linalg", ".", "det", "(", "U", ".", "dot", "(", "V", ".", "T", ")", ")", ")", "\n", "# Construct R.", "\n", "R", "=", "V", ".", "dot", "(", "Z", ".", "dot", "(", "U", ".", "T", ")", ")", "\n", "\n", "# 5. Recover scale.", "\n", "scale", "=", "np", ".", "trace", "(", "R", ".", "dot", "(", "K", ")", ")", "/", "var1", "\n", "\n", "# 6. Recover translation.", "\n", "t", "=", "mu2", "-", "scale", "*", "(", "R", ".", "dot", "(", "mu1", ")", ")", "\n", "\n", "# 7. Error:", "\n", "S1_hat", "=", "scale", "*", "R", ".", "dot", "(", "S1", ")", "+", "t", "\n", "\n", "if", "verts", "is", "not", "None", ":", "\n", "        ", "verts_hat", "=", "scale", "*", "R", ".", "dot", "(", "verts", ")", "+", "t", "\n", "if", "transposed", ":", "\n", "            ", "verts_hat", "=", "verts_hat", ".", "T", "\n", "\n", "", "", "if", "transposed", ":", "\n", "        ", "S1_hat", "=", "S1_hat", ".", "T", "\n", "\n", "", "procrustes_params", "=", "{", "'scale'", ":", "scale", ",", "\n", "'R'", ":", "R", ",", "\n", "'trans'", ":", "t", "}", "\n", "\n", "if", "verts", "is", "not", "None", ":", "\n", "        ", "return", "S1_hat", ",", "verts_hat", ",", "procrustes_params", "\n", "", "else", ":", "\n", "        ", "return", "S1_hat", ",", "procrustes_params", "\n", "\n"]], "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.calculate_v2v_error.align_by_pelvis": [[111, 121], ["numpy.expand_dims", "numpy.expand_dims"], "function", ["None"], ["", "", "def", "align_by_pelvis", "(", "joints", ",", "verts", "=", "None", ")", ":", "\n", "\n", "    ", "left_id", "=", "1", "\n", "right_id", "=", "2", "\n", "\n", "pelvis", "=", "(", "joints", "[", "left_id", ",", ":", "]", "+", "joints", "[", "right_id", ",", ":", "]", ")", "/", "2.0", "\n", "if", "verts", "is", "not", "None", ":", "\n", "        ", "return", "verts", "-", "np", ".", "expand_dims", "(", "pelvis", ",", "axis", "=", "0", ")", "\n", "", "else", ":", "\n", "        ", "return", "joints", "-", "np", ".", "expand_dims", "(", "pelvis", ",", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.calculate_v2v_error.align_by_wrist": [[123, 132], ["numpy.expand_dims", "numpy.expand_dims"], "function", ["None"], ["", "", "def", "align_by_wrist", "(", "joints", ",", "verts", "=", "None", ")", ":", "\n", "\n", "    ", "wrist_id", "=", "0", "\n", "wrist", "=", "joints", "[", "wrist_id", ",", ":", "]", "\n", "\n", "if", "verts", "is", "not", "None", ":", "\n", "        ", "return", "verts", "-", "np", ".", "expand_dims", "(", "wrist", ",", "axis", "=", "0", ")", "\n", "", "else", ":", "\n", "        ", "return", "joints", "-", "np", ".", "expand_dims", "(", "wrist", ",", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.calculate_v2v_error.align_by_neck": [[134, 143], ["numpy.expand_dims", "numpy.expand_dims"], "function", ["None"], ["", "", "def", "align_by_neck", "(", "joints", ",", "verts", "=", "None", ")", ":", "\n", "\n", "    ", "neck_id", "=", "0", "\n", "neck", "=", "joints", "[", "neck_id", ",", ":", "]", "\n", "\n", "if", "verts", "is", "not", "None", ":", "\n", "        ", "return", "verts", "-", "np", ".", "expand_dims", "(", "neck", ",", "axis", "=", "0", ")", "\n", "", "else", ":", "\n", "        ", "return", "joints", "-", "np", ".", "expand_dims", "(", "neck", ",", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.calculate_v2v_error.compute_errors_joints_verts": [[145, 232], ["enumerate", "zip", "align_by_wrist.reshape", "gt_verts[].reshape", "pred_verts[].reshape", "numpy.sqrt", "numpy.sqrt", "errors.append", "errors_verts.append", "calculate_v2v_error.compute_similarity_transform", "numpy.sqrt", "numpy.sqrt", "errors_procrustes.append", "errors_procrustes_verts.append", "procrustesParams.append", "errors.append", "errors_verts.append", "errors_procrustes.append", "errors_procrustes_verts.append", "procrustesParams.append", "calculate_v2v_error.align_by_pelvis", "calculate_v2v_error.align_by_pelvis", "calculate_v2v_error.align_by_pelvis", "calculate_v2v_error.align_by_pelvis", "MeshViewer", "calculate_v2v_error.get_spheres", "calculate_v2v_error.get_spheres", "Mesh", "Mesh", "MeshViewer.set_static_meshes", "input", "numpy.sum", "numpy.sum", "numpy.mean", "numpy.mean", "numpy.sum", "numpy.sum", "MeshViewer", "calculate_v2v_error.get_spheres", "calculate_v2v_error.get_spheres", "Mesh", "Mesh", "MeshViewer.set_static_meshes", "input", "numpy.mean", "numpy.mean", "calculate_v2v_error.align_by_neck", "calculate_v2v_error.align_by_neck", "calculate_v2v_error.align_by_neck", "calculate_v2v_error.align_by_neck", "calculate_v2v_error.align_by_wrist", "calculate_v2v_error.align_by_wrist", "calculate_v2v_error.align_by_wrist", "calculate_v2v_error.align_by_wrist", "KeyError", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "function", ["home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.calculate_v2v_error.compute_similarity_transform", "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.calculate_v2v_error.align_by_pelvis", "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.calculate_v2v_error.align_by_pelvis", "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.calculate_v2v_error.align_by_pelvis", "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.calculate_v2v_error.align_by_pelvis", "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.calculate_v2v_error.get_spheres", "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.calculate_v2v_error.get_spheres", "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.calculate_v2v_error.get_spheres", "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.calculate_v2v_error.get_spheres", "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.calculate_v2v_error.align_by_neck", "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.calculate_v2v_error.align_by_neck", "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.calculate_v2v_error.align_by_neck", "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.calculate_v2v_error.align_by_neck", "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.calculate_v2v_error.align_by_wrist", "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.calculate_v2v_error.align_by_wrist", "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.calculate_v2v_error.align_by_wrist", "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.calculate_v2v_error.align_by_wrist"], ["", "", "def", "compute_errors_joints_verts", "(", "gt_verts", ",", "pred_verts", ",", "gt_joints", ",", "\n", "pred_joints", ",", "miss", ",", "flag", "=", "'body'", ",", "debug", "=", "False", ")", ":", "\n", "\n", "    ", "num_joints", "=", "gt_joints", "[", "0", "]", ".", "shape", "[", "0", "]", "\n", "errors", ",", "errors_procrustes", ",", "procrustesParams", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "errors_verts", ",", "errors_procrustes_verts", "=", "[", "]", ",", "[", "]", "\n", "\n", "for", "i", ",", "(", "gt3d", ",", "pred", ")", "in", "enumerate", "(", "zip", "(", "gt_joints", ",", "pred_joints", ")", ")", ":", "\n", "# Get corresponding ground truth and predicted 3d joints and verts", "\n", "        ", "if", "miss", "[", "i", "]", "==", "1", ":", "\n", "            ", "errors", ".", "append", "(", "0", ")", "\n", "errors_verts", ".", "append", "(", "0", ")", "\n", "errors_procrustes", ".", "append", "(", "0", ")", "\n", "errors_procrustes_verts", ".", "append", "(", "0", ")", "\n", "procrustesParams", ".", "append", "(", "{", "'scale'", ":", "0", ",", "\n", "'R'", ":", "0", ",", "\n", "'trans'", ":", "0", "}", ")", "\n", "continue", "\n", "", "gt3d", "=", "gt3d", ".", "reshape", "(", "-", "1", ",", "3", ")", "\n", "gt3d_verts", "=", "gt_verts", "[", "i", "]", ".", "reshape", "(", "-", "1", ",", "3", ")", "\n", "pred3d_verts", "=", "pred_verts", "[", "i", "]", ".", "reshape", "(", "-", "1", ",", "3", ")", "\n", "# Root align.", "\n", "if", "flag", "==", "'body'", ":", "\n", "            ", "gt3d_verts", "=", "align_by_pelvis", "(", "gt3d", ",", "gt3d_verts", ")", "\n", "pred3d_verts", "=", "align_by_pelvis", "(", "pred", ",", "pred3d_verts", ")", "\n", "gt3d", "=", "align_by_pelvis", "(", "gt3d", ")", "\n", "pred3d", "=", "align_by_pelvis", "(", "pred", ")", "\n", "", "elif", "flag", "==", "'face'", ":", "\n", "            ", "gt_dict", "=", "{", "}", "\n", "pred_dict", "=", "{", "}", "\n", "gt3d_verts", "=", "align_by_neck", "(", "gt3d", ",", "gt3d_verts", ")", "\n", "pred3d_verts", "=", "align_by_neck", "(", "pred", ",", "pred3d_verts", ")", "\n", "gt3d", "=", "align_by_neck", "(", "gt3d", ")", "\n", "pred3d", "=", "align_by_neck", "(", "pred", ")", "\n", "", "elif", "flag", "==", "'hand'", ":", "\n", "            ", "gt3d_verts", "=", "align_by_wrist", "(", "gt3d", ",", "gt3d_verts", ")", "\n", "pred3d_verts", "=", "align_by_wrist", "(", "pred", ",", "pred3d_verts", ")", "\n", "gt3d", "=", "align_by_wrist", "(", "gt3d", ")", "\n", "pred3d", "=", "align_by_wrist", "(", "pred", ")", "\n", "", "else", ":", "\n", "            ", "raise", "KeyError", "(", "\n", "'Incorrect flag provided. Should be either body,face or hand'", ")", "\n", "\n", "", "if", "debug", ":", "\n", "            ", "from", "psbody", ".", "mesh", "import", "MeshViewer", ",", "Mesh", "\n", "mv", "=", "MeshViewer", "(", ")", "\n", "gt_spheres", "=", "get_spheres", "(", "\n", "gt3d", "*", "np", ".", "array", "(", "[", "1", ",", "-", "1", ",", "-", "1", "]", ")", ",", "[", "255", ",", "0", ",", "0", "]", ",", "0.01", ")", "\n", "pred_spheres", "=", "get_spheres", "(", "\n", "pred3d", "*", "np", ".", "array", "(", "[", "1", ",", "-", "1", ",", "-", "1", "]", ")", ",", "[", "0", ",", "255", ",", "0", "]", ",", "0.01", ")", "\n", "mesh1", "=", "Mesh", "(", "v", "=", "gt3d_verts", "*", "np", ".", "array", "(", "[", "1", ",", "-", "1", ",", "-", "1", "]", ")", ")", "\n", "mesh2", "=", "Mesh", "(", "v", "=", "pred3d_verts", "*", "np", ".", "array", "(", "[", "1", ",", "-", "1", ",", "-", "1", "]", ")", ")", "\n", "mv", ".", "set_static_meshes", "(", "[", "mesh1", ",", "mesh2", "]", "+", "gt_spheres", "+", "pred_spheres", ")", "\n", "input", "(", "'Enter something to continue'", ")", "\n", "# Calculate joints and verts pelvis align error", "\n", "", "joint_error", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "(", "gt3d", "-", "pred3d", ")", "**", "2", ",", "axis", "=", "1", ")", ")", "\n", "verts_error", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "(", "gt3d_verts", "-", "pred3d_verts", ")", "**", "2", ",", "axis", "=", "1", ")", ")", "\n", "errors", ".", "append", "(", "np", ".", "mean", "(", "joint_error", ")", ")", "\n", "errors_verts", ".", "append", "(", "np", ".", "mean", "(", "verts_error", ")", ")", "\n", "\n", "# Get procrustes align error. # Not used anymore", "\n", "pred3d_sym", ",", "pred3d_verts_sym", ",", "procrustesParam", "=", "compute_similarity_transform", "(", "\n", "pred3d", ",", "gt3d", ",", "num_joints", ",", "pred3d_verts", ")", "\n", "\n", "pa_error", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "(", "gt3d", "-", "pred3d_sym", ")", "**", "2", ",", "axis", "=", "1", ")", ")", "\n", "pa_verts_error", "=", "np", ".", "sqrt", "(", "\n", "np", ".", "sum", "(", "\n", "(", "gt3d_verts", "-", "pred3d_verts_sym", ")", "**", "2", ",", "\n", "axis", "=", "1", ")", ")", "\n", "if", "debug", ":", "\n", "            ", "from", "psbody", ".", "mesh", "import", "MeshViewer", ",", "Mesh", "\n", "mv", "=", "MeshViewer", "(", ")", "\n", "proc_gt_spheres", "=", "get_spheres", "(", "\n", "gt3d", "*", "np", ".", "array", "(", "[", "1", ",", "-", "1", ",", "-", "1", "]", ")", ",", "[", "255", ",", "0", ",", "0", "]", ",", "0.01", ")", "\n", "proc_pred_spheres", "=", "get_spheres", "(", "\n", "pred3d_sym", "*", "np", ".", "array", "(", "[", "1", ",", "-", "1", ",", "-", "1", "]", ")", ",", "[", "0", ",", "255", ",", "0", "]", ",", "0.01", ")", "\n", "mesh1", "=", "Mesh", "(", "v", "=", "gt3d_verts", "*", "np", ".", "array", "(", "[", "1", ",", "-", "1", ",", "-", "1", "]", ")", ")", "\n", "mesh2", "=", "Mesh", "(", "v", "=", "pred3d_verts_sym", "*", "np", ".", "array", "(", "[", "1", ",", "-", "1", ",", "-", "1", "]", ")", ")", "\n", "mv", ".", "set_static_meshes", "(", "\n", "[", "mesh1", ",", "mesh2", "]", "+", "proc_gt_spheres", "+", "proc_pred_spheres", ")", "\n", "input", "(", "'Enter something to continue'", ")", "\n", "\n", "", "errors_procrustes", ".", "append", "(", "np", ".", "mean", "(", "pa_error", ")", ")", "\n", "errors_procrustes_verts", ".", "append", "(", "np", ".", "mean", "(", "pa_verts_error", ")", ")", "\n", "procrustesParams", ".", "append", "(", "procrustesParam", ")", "\n", "\n", "", "return", "errors", ",", "errors_verts", ",", "errors_procrustes", ",", "errors_procrustes_verts", ",", "procrustesParams", "\n", "\n"]], "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.calculate_v2v_error.compute_errors_matched_from_df_smpl": [[234, 265], ["utils.get_matching_dict", "numpy.arange", "calculate_v2v_error.compute_errors_joints_verts", "len", "gt3d_verts.append", "gt3d_joints.append", "miss_flag.append", "pred_verts.append", "pred_joints.append", "miss_flag.append", "pred_joints.append", "pred_verts.append", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.utils.get_matching_dict", "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.calculate_v2v_error.compute_errors_joints_verts"], ["", "def", "compute_errors_matched_from_df_smpl", "(", "\n", "args", ",", "df", ",", "idx", ",", "pred_j", ",", "verts_ind_dict", ",", "pred_v", "=", "None", ")", ":", "\n", "\n", "    ", "body_verts_ind", "=", "verts_ind_dict", "[", "'body-smpl'", "]", "\n", "gt_joints_3d", "=", "df", ".", "iloc", "[", "idx", "]", "[", "'gt_joints_3d'", "]", "\n", "gt_verts_3d", "=", "df", ".", "iloc", "[", "idx", "]", "[", "'gt_verts'", "]", "\n", "matching", "=", "df", ".", "iloc", "[", "idx", "]", ".", "at", "[", "'matching'", "]", "\n", "njoints", "=", "SMPL_JOINTS", "\n", "\n", "gt3d_verts", ",", "pred_verts", ",", "gt3d_joints", ",", "pred_joints", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "matchDict", ",", "falsePositive_count", "=", "utils", ".", "get_matching_dict", "(", "matching", ")", "\n", "gtIdxs", "=", "np", ".", "arange", "(", "len", "(", "gt_joints_3d", ")", ")", "\n", "miss_flag", "=", "[", "]", "\n", "for", "gtIdx", "in", "gtIdxs", ":", "\n", "        ", "gt3d_verts", ".", "append", "(", "gt_verts_3d", "[", "gtIdx", "]", "[", "body_verts_ind", ",", ":", "]", ")", "\n", "gt3d_joints", ".", "append", "(", "gt_joints_3d", "[", "gtIdx", "]", "[", ":", "njoints", ",", ":", "]", ")", "\n", "if", "matchDict", "[", "str", "(", "gtIdx", ")", "]", "==", "'miss'", "or", "matchDict", "[", "str", "(", "\n", "gtIdx", ")", "]", "==", "'invalid'", ":", "\n", "            ", "miss_flag", ".", "append", "(", "1", ")", "\n", "pred_verts", ".", "append", "(", "[", "]", ")", "\n", "pred_joints", ".", "append", "(", "[", "]", ")", "\n", "", "else", ":", "\n", "            ", "miss_flag", ".", "append", "(", "0", ")", "\n", "pred_joints", ".", "append", "(", "pred_j", "[", "matchDict", "[", "str", "(", "gtIdx", ")", "]", "]", "[", ":", "njoints", ",", ":", "]", ")", "\n", "pred_verts", ".", "append", "(", "pred_v", "[", "matchDict", "[", "str", "(", "gtIdx", ")", "]", "]", "[", "body_verts_ind", ",", ":", "]", ")", "\n", "\n", "", "", "errors_pelvis", ",", "errors_pelvis_verts", ",", "errors_procrustes", ",", "errors_procrustes_verts", ",", "procrustesParams", "=", "compute_errors_joints_verts", "(", "gt3d_verts", ",", "pred_verts", ",", "gt3d_joints", ",", "pred_joints", ",", "miss_flag", ",", "debug", "=", "False", ")", "\n", "return", "errors_pelvis", ",", "errors_pelvis_verts", ",", "errors_procrustes", ",", "errors_procrustes_verts", ",", "falsePositive_count", ",", "procrustesParams", ",", "miss_flag", "\n", "\n"]], "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.calculate_v2v_error.compute_errors_matched_from_df_smplx_hf": [[267, 366], ["numpy.array", "numpy.array", "utils.get_matching_dict", "numpy.arange", "calculate_v2v_error.compute_errors_joints_verts", "calculate_v2v_error.compute_errors_joints_verts", "calculate_v2v_error.compute_errors_joints_verts", "calculate_v2v_error.compute_errors_joints_verts", "len", "gt_verts_all.append", "gt_joints_all.append", "gt3d_verts.append", "gt3d_verts_l.append", "gt3d_verts_r.append", "gt3d_verts_f.append", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "gt3d_joints.append", "gt3d_joints_l.append", "gt3d_joints_r.append", "gt3d_joints_f.append", "miss_flag.append", "pred_verts_all.append", "pred_joints_all.append", "pred_verts.append", "pred_joints.append", "pred_joints_l.append", "pred_joints_r.append", "pred_joints_f.append", "pred_verts_l.append", "pred_verts_r.append", "pred_verts_f.append", "miss_flag.append", "pred_joints.append", "pred_joints_all.append", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "pred_joints_l.append", "pred_joints_r.append", "pred_joints_f.append", "pred_verts_all.append", "pred_verts.append", "pred_verts_l.append", "pred_verts_r.append", "pred_verts_f.append", "[].reshape", "[].reshape", "[].reshape", "pred_joints_id[].reshape", "pred_joints_id[].reshape", "pred_joints_id[].reshape", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.utils.get_matching_dict", "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.calculate_v2v_error.compute_errors_joints_verts", "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.calculate_v2v_error.compute_errors_joints_verts", "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.calculate_v2v_error.compute_errors_joints_verts", "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.calculate_v2v_error.compute_errors_joints_verts"], ["", "def", "compute_errors_matched_from_df_smplx_hf", "(", "\n", "args", ",", "df", ",", "idx", ",", "pred_j", ",", "pred_v", ",", "verts_ind_dict", ")", ":", "\n", "# Get vertex indices for different body parts", "\n", "    ", "lh_verts_ind", "=", "np", ".", "array", "(", "verts_ind_dict", "[", "'left_hand'", "]", ")", "\n", "rh_verts_ind", "=", "np", ".", "array", "(", "verts_ind_dict", "[", "'right_hand'", "]", ")", "\n", "body_verts_ind", "=", "verts_ind_dict", "[", "'body-smplx'", "]", "\n", "face_verts_ind", "=", "verts_ind_dict", "[", "'face'", "]", "\n", "\n", "# Get gt joints and vertices", "\n", "gt_joints_3d", "=", "df", ".", "iloc", "[", "idx", "]", "[", "'gt_joints_3d'", "]", "\n", "gt_verts_3d", "=", "df", ".", "iloc", "[", "idx", "]", "[", "'gt_verts'", "]", "\n", "matching", "=", "df", ".", "iloc", "[", "idx", "]", ".", "at", "[", "'matching'", "]", "\n", "\n", "gt3d_verts", ",", "pred_verts", ",", "gt3d_joints", ",", "pred_joints", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "gt3d_joints_l", ",", "gt3d_joints_r", ",", "pred_joints_l", ",", "pred_joints_r", ",", "gt3d_joints_f", ",", "pred_joints_f", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "gt3d_verts_l", ",", "gt3d_verts_r", ",", "pred_verts_l", ",", "pred_verts_r", ",", "gt3d_verts_f", ",", "pred_verts_f", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "matchDict", ",", "falsePositive_count", "=", "utils", ".", "get_matching_dict", "(", "matching", ")", "\n", "\n", "gtIdxs", "=", "np", ".", "arange", "(", "len", "(", "gt_joints_3d", ")", ")", "\n", "miss_flag", ",", "gt_verts_all", ",", "pred_verts_all", ",", "gt_joints_all", ",", "pred_joints_all", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "for", "gtIdx", "in", "gtIdxs", ":", "\n", "# Add gt verts", "\n", "        ", "gt_verts_all", ".", "append", "(", "gt_verts_3d", "[", "gtIdx", "]", ")", "\n", "gt_joints_all", ".", "append", "(", "gt_joints_3d", "[", "gtIdx", "]", ")", "\n", "gt3d_verts", ".", "append", "(", "gt_verts_3d", "[", "gtIdx", "]", "[", "body_verts_ind", ",", ":", "]", ")", "\n", "gt3d_verts_l", ".", "append", "(", "gt_verts_3d", "[", "gtIdx", "]", "[", "lh_verts_ind", ",", ":", "]", ")", "\n", "gt3d_verts_r", ".", "append", "(", "gt_verts_3d", "[", "gtIdx", "]", "[", "rh_verts_ind", ",", ":", "]", ")", "\n", "gt3d_verts_f", ".", "append", "(", "gt_verts_3d", "[", "gtIdx", "]", "[", "face_verts_ind", ",", ":", "]", ")", "\n", "\n", "# Add gt joints, 20-left wrist, 21-right wrist, 12-neck,", "\n", "# 0-22 (body jonits), 25-40 (lhand joints), 40-55, (rhand joints),56+", "\n", "# (face joints)", "\n", "leftHand", "=", "np", ".", "concatenate", "(", "[", "gt_joints_3d", "[", "gtIdx", "]", "[", "20", ",", ":", "]", ".", "reshape", "(", "(", "1", ",", "3", ")", ")", ",", "\n", "gt_joints_3d", "[", "gtIdx", "]", "[", "25", ":", "40", ",", ":", "]", "]", ",", "axis", "=", "0", ")", "\n", "rightHand", "=", "np", ".", "concatenate", "(", "[", "gt_joints_3d", "[", "gtIdx", "]", "[", "21", ",", ":", "]", ".", "reshape", "(", "(", "1", ",", "3", ")", ")", ",", "\n", "gt_joints_3d", "[", "gtIdx", "]", "[", "40", ":", "55", ",", ":", "]", "]", ",", "axis", "=", "0", ")", "\n", "gt_face", "=", "np", ".", "concatenate", "(", "[", "gt_joints_3d", "[", "gtIdx", "]", "[", "12", ",", ":", "]", ".", "reshape", "(", "(", "1", ",", "3", ")", ")", ",", "\n", "gt_joints_3d", "[", "gtIdx", "]", "[", "76", ":", "127", ",", ":", "]", "]", ",", "axis", "=", "0", ")", "\n", "gt3d_joints", ".", "append", "(", "gt_joints_3d", "[", "gtIdx", "]", "[", ":", "22", ",", ":", "]", ")", "\n", "gt3d_joints_l", ".", "append", "(", "leftHand", ")", "\n", "gt3d_joints_r", ".", "append", "(", "rightHand", ")", "\n", "gt3d_joints_f", ".", "append", "(", "gt_face", ")", "\n", "\n", "if", "matchDict", "[", "str", "(", "gtIdx", ")", "]", "==", "'miss'", "or", "matchDict", "[", "str", "(", "\n", "gtIdx", ")", "]", "==", "'invalid'", ":", "\n", "            ", "miss_flag", ".", "append", "(", "1", ")", "\n", "pred_verts_all", ".", "append", "(", "[", "]", ")", "\n", "pred_joints_all", ".", "append", "(", "[", "]", ")", "\n", "pred_verts", ".", "append", "(", "[", "]", ")", "\n", "pred_joints", ".", "append", "(", "[", "]", ")", "\n", "pred_joints_l", ".", "append", "(", "[", "]", ")", "\n", "pred_joints_r", ".", "append", "(", "[", "]", ")", "\n", "pred_joints_f", ".", "append", "(", "[", "]", ")", "\n", "pred_verts_l", ".", "append", "(", "[", "]", ")", "\n", "pred_verts_r", ".", "append", "(", "[", "]", ")", "\n", "pred_verts_f", ".", "append", "(", "[", "]", ")", "\n", "", "else", ":", "\n", "            ", "miss_flag", ".", "append", "(", "0", ")", "\n", "# Add pred joints", "\n", "pred_joints_id", "=", "pred_j", "[", "matchDict", "[", "str", "(", "gtIdx", ")", "]", "]", "\n", "pred_joints", ".", "append", "(", "pred_joints_id", "[", ":", "22", ",", ":", "]", ")", "\n", "pred_joints_all", ".", "append", "(", "pred_joints_id", "[", ":", "127", ",", ":", "]", ")", "\n", "pred_left", "=", "np", ".", "concatenate", "(", "\n", "[", "pred_joints_id", "[", "20", ",", ":", "]", ".", "reshape", "(", "(", "1", ",", "3", ")", ")", ",", "pred_joints_id", "[", "25", ":", "40", ",", ":", "]", "]", ",", "axis", "=", "0", ")", "\n", "pred_right", "=", "np", ".", "concatenate", "(", "\n", "[", "pred_joints_id", "[", "21", ",", ":", "]", ".", "reshape", "(", "(", "1", ",", "3", ")", ")", ",", "pred_joints_id", "[", "40", ":", "55", ",", ":", "]", "]", ",", "axis", "=", "0", ")", "\n", "pred_face", "=", "np", ".", "concatenate", "(", "[", "pred_joints_id", "[", "12", ",", ":", "]", ".", "reshape", "(", "\n", "(", "1", ",", "3", ")", ")", ",", "pred_joints_id", "[", "76", ":", "127", ",", ":", "]", "]", ",", "axis", "=", "0", ")", "\n", "pred_joints_l", ".", "append", "(", "pred_left", ")", "\n", "pred_joints_r", ".", "append", "(", "pred_right", ")", "\n", "pred_joints_f", ".", "append", "(", "pred_face", ")", "\n", "# Add pred verts", "\n", "all_pred_verts", "=", "pred_v", "[", "matchDict", "[", "str", "(", "gtIdx", ")", "]", "]", "\n", "pred_verts_all", ".", "append", "(", "all_pred_verts", ")", "\n", "pred_verts", ".", "append", "(", "all_pred_verts", "[", "body_verts_ind", ",", ":", "]", ")", "\n", "pred_verts_l", ".", "append", "(", "all_pred_verts", "[", "lh_verts_ind", ",", ":", "]", ")", "\n", "pred_verts_r", ".", "append", "(", "all_pred_verts", "[", "rh_verts_ind", ",", ":", "]", ")", "\n", "pred_verts_f", ".", "append", "(", "all_pred_verts", "[", "face_verts_ind", ",", ":", "]", ")", "\n", "\n", "", "", "errors_pelvis", ",", "errors_pelvis_verts", ",", "errors_procrustes", ",", "errors_procrustes_verts", ",", "procrustesParams", "=", "compute_errors_joints_verts", "(", "gt3d_verts", ",", "pred_verts", ",", "gt3d_joints", ",", "pred_joints", ",", "miss_flag", ",", "debug", "=", "False", ")", "\n", "\n", "errors_pelvis_l", ",", "errors_pelvis_verts_l", ",", "errors_procrustes_l", ",", "errors_procrustes_verts_l", ",", "procrustesParams_l", "=", "compute_errors_joints_verts", "(", "gt3d_verts_l", ",", "pred_verts_l", ",", "gt3d_joints_l", ",", "pred_joints_l", ",", "miss_flag", ",", "flag", "=", "'hand'", ",", "debug", "=", "False", ")", "\n", "\n", "errors_pelvis_r", ",", "errors_pelvis_verts_r", ",", "errors_procrustes_r", ",", "errors_procrustes_verts_r", ",", "procrustesParams_r", "=", "compute_errors_joints_verts", "(", "gt3d_verts_r", ",", "pred_verts_r", ",", "gt3d_joints_r", ",", "pred_joints_r", ",", "miss_flag", ",", "flag", "=", "'hand'", ",", "debug", "=", "False", ")", "\n", "\n", "errors_pelvis_f", ",", "errors_pelvis_verts_f", ",", "errors_procrustes_f", ",", "errors_procrustes_verts_f", ",", "procrustesParams_f", "=", "compute_errors_joints_verts", "(", "gt3d_verts_f", ",", "pred_verts_f", ",", "gt3d_joints_f", ",", "pred_joints_f", ",", "miss_flag", ",", "flag", "=", "'face'", ",", "debug", "=", "False", ")", "\n", "\n", "return", "errors_pelvis", ",", "errors_pelvis_verts", ",", "errors_pelvis_l", ",", "errors_pelvis_verts_l", ",", "errors_pelvis_r", ",", "errors_pelvis_verts_r", ",", "errors_pelvis_f", ",", "errors_pelvis_verts_f", ",", "falsePositive_count", ",", "miss_flag", "\n", "", ""]], "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.cli.project_joints": [[24, 27], ["agora_evaluation.project_joints.run_projection"], "function", ["home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.project_joints.run_projection"], ["def", "project_joints", "(", ")", ":", "\n", "    ", "\"\"\"Executable for running the evaluation algorithm.\"\"\"", "\n", "run_projection", "(", "sys", ".", "argv", "[", "1", ":", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.cli.evaluate_agora": [[28, 31], ["agora_evaluation.evaluate_agora.run_evaluation"], "function", ["home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.evaluate_agora.run_evaluation"], ["", "def", "evaluate_agora", "(", ")", ":", "\n", "    ", "\"\"\"Executable for running the evaluation algorithm.\"\"\"", "\n", "run_evaluation", "(", "sys", ".", "argv", "[", "1", ":", "]", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.matching.image_resize": [[31, 61], ["cv2.resize", "float", "int", "float", "int"], "function", ["None"], ["def", "image_resize", "(", "image", ",", "width", "=", "None", ",", "height", "=", "None", ",", "inter", "=", "cv2", ".", "INTER_AREA", ")", ":", "\n", "# initialize the dimensions of the image to be resized and", "\n", "# grab the image size", "\n", "    ", "dim", "=", "None", "\n", "(", "h", ",", "w", ")", "=", "image", ".", "shape", "[", ":", "2", "]", "\n", "\n", "# if both the width and height are None, then return the", "\n", "# original image", "\n", "if", "width", "is", "None", "and", "height", "is", "None", ":", "\n", "        ", "return", "image", "\n", "\n", "# check to see if the width is None", "\n", "", "if", "width", "is", "None", ":", "\n", "# calculate the ratio of the height and construct the", "\n", "# dimensions", "\n", "        ", "r", "=", "height", "/", "float", "(", "h", ")", "\n", "dim", "=", "(", "int", "(", "w", "*", "r", ")", ",", "height", ")", "\n", "\n", "# otherwise, the height is None", "\n", "", "else", ":", "\n", "# calculate the ratio of the width and construct the", "\n", "# dimensions", "\n", "        ", "r", "=", "width", "/", "float", "(", "w", ")", "\n", "dim", "=", "(", "width", ",", "int", "(", "h", "*", "r", ")", ")", "\n", "\n", "# resize the image", "\n", "", "resized", "=", "cv2", ".", "resize", "(", "image", ",", "dim", ",", "interpolation", "=", "inter", ")", "\n", "\n", "# return the resized image", "\n", "return", "resized", "\n", "\n"]], "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.matching.get_matching": [[63, 101], ["range", "len", "os.path.join", "enumerate", "matching.match_2d_greedy", "preds2d.append", "pred2d.squeeze", "logging.fatal", "numpy.array", "numpy.array", "df.columns.get_loc", "df.columns.get_loc", "df.columns.get_loc", "df.columns.get_loc", "df.columns.get_loc", "df.columns.get_loc"], "function", ["home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.matching.match_2d_greedy"], ["", "def", "get_matching", "(", "args", ",", "df", ",", "imgWidth", ",", "imgHeight", ")", ":", "\n", "\n", "    ", "for", "i", "in", "range", "(", "len", "(", "df", ")", ")", ":", "\n", "        ", "preds2d", "=", "[", "]", "\n", "imgPath", "=", "os", ".", "path", ".", "join", "(", "args", ".", "imgFolder", ",", "df", ".", "iloc", "[", "i", "]", "[", "'imgPath'", "]", ")", "\n", "\n", "for", "pNum", ",", "joints3d", "in", "enumerate", "(", "df", ".", "iloc", "[", "i", "]", "[", "'pred'", "]", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "pred2d", "=", "df", ".", "iloc", "[", "i", ",", "df", ".", "columns", ".", "get_loc", "(", "'pred'", ")", "]", "[", "pNum", "]", "[", "'joints'", "]", "\n", "", "except", "BaseException", ":", "\n", "                ", "logging", ".", "fatal", "(", "\n", "'pred joints  not available for '", ",", "\n", "df", ".", "iloc", "[", "i", "]", "[", "'pred_path'", "]", ")", "\n", "\n", "", "preds2d", ".", "append", "(", "pred2d", ".", "squeeze", "(", ")", ")", "\n", "\n", "", "validDF", "=", "(", "np", ".", "array", "(", "df", ".", "iloc", "[", "i", ",", "df", ".", "columns", ".", "get_loc", "(", "'occlusion'", ")", "]", ")", "<=", "90", ")", "&", "(", "np", ".", "array", "(", "df", ".", "iloc", "[", "i", ",", "df", ".", "columns", ".", "get_loc", "(", "'occlusion'", ")", "]", ")", ">=", "0", ")", "&", "df", ".", "iloc", "[", "i", ",", "df", ".", "columns", ".", "get_loc", "(", "'isValid'", ")", "]", "\n", "\n", "matching", "=", "match_2d_greedy", "(", "imgWidth", ",", "\n", "imgHeight", ",", "\n", "pred_kps", "=", "preds2d", ",", "\n", "gtkp", "=", "df", ".", "iloc", "[", "i", ",", "\n", "df", ".", "columns", ".", "get_loc", "(", "'gt_joints_2d'", ")", "]", ",", "\n", "debug_path", "=", "args", ".", "debug_path", ",", "\n", "imgPath", "=", "imgPath", ",", "\n", "baseline", "=", "args", ".", "baseline", ",", "\n", "valid", "=", "validDF", ",", "\n", "ind", "=", "i", ",", "\n", "debug", "=", "args", ".", "debug", ")", "\n", "\n", "# contains the matching between openpose and gt. each tuple is of order(idx_openpose_pred, idx_gt_kps)", "\n", "# this matching can be used to match pred to gt_kps, since the order of", "\n", "# openpose_pred and pred is the same", "\n", "df", ".", "iloc", "[", "i", ",", "df", ".", "columns", ".", "get_loc", "(", "'matching'", ")", "]", "=", "matching", "\n", "\n", "", "return", "df", "\n", "\n"]], "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.matching.match_2d_greedy": [[103, 234], ["numpy.arange", "numpy.arange", "list", "numpy.zeros", "numpy.zeros", "numpy.array", "np.zeros.sort", "np.zeros.sort", "numpy.arange", "numpy.setdiff1d", "numpy.arange", "numpy.setdiff1d", "matching.scatter2d", "len", "len", "itertools.product", "utils.l2_error", "np.array.append", "np.zeros.append", "np.zeros.append", "len", "bestMatch.append", "len", "bestMatch.append", "len", "len", "numpy.sum", "len", "len", "numpy.argmin", "matching.get_bbx_overlap", "logging.info", "bestMatch.append", "str", "numpy.sum", "sum", "len", "logging.fatal", "logging.info", "excludedGtBecauseInvalid.append", "bestMatch.append", "logging.info", "bestMatch.append", "excludedGtBecauseInvalid.append", "str", "logging.info", "bestMatch.append"], "function", ["home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.matching.scatter2d", "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.utils.l2_error", "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.matching.get_bbx_overlap"], ["", "def", "match_2d_greedy", "(", "\n", "imgWidth", ",", "\n", "imgHeight", ",", "\n", "pred_kps", ",", "\n", "gtkp", ",", "\n", "debug_path", ",", "\n", "imgPath", "=", "None", ",", "\n", "baseline", "=", "None", ",", "\n", "iou_thresh", "=", "0.1", ",", "\n", "valid", "=", "None", ",", "\n", "ind", "=", "-", "1", ",", "\n", "debug", "=", "False", ")", ":", "\n", "    ", "'''\n    matches groundtruth keypoints to the detection by considering all possible matchings.\n    :return: best possible matching, a list of tuples, where each tuple corresponds to one match of pred_person.to gt_person.\n            the order within one tuple is as follows (idx_pred_kps, idx_gt_kps)\n    '''", "\n", "\n", "nkps", "=", "24", "\n", "\n", "if", "debug", "and", "ind", "%", "200", "==", "0", ":", "\n", "# To verify if projection of 2d joints on image are correct", "\n", "        ", "scatter2d", "(", "gtkp", ",", "pred_kps", ",", "imgPath", ",", "debug_path", ",", "baseline", ")", "\n", "\n", "", "predList", "=", "np", ".", "arange", "(", "len", "(", "pred_kps", ")", ")", "\n", "gtList", "=", "np", ".", "arange", "(", "len", "(", "gtkp", ")", ")", "\n", "# get all pairs of elements in pred_kps, gtkp", "\n", "# all combinations of 2 elements from l1 and l2", "\n", "combs", "=", "list", "(", "product", "(", "predList", ",", "gtList", ")", ")", "\n", "\n", "errors_per_pair", "=", "{", "}", "\n", "errors_per_pair_list", "=", "[", "]", "\n", "for", "comb", "in", "combs", ":", "\n", "        ", "errors_per_pair", "[", "str", "(", "comb", ")", "]", "=", "l2_error", "(", "\n", "pred_kps", "[", "comb", "[", "0", "]", "]", "[", ":", "nkps", ",", ":", "2", "]", ",", "gtkp", "[", "comb", "[", "1", "]", "]", "[", ":", "nkps", ",", ":", "2", "]", ")", "\n", "errors_per_pair_list", ".", "append", "(", "errors_per_pair", "[", "str", "(", "comb", ")", "]", ")", "\n", "\n", "", "gtAssigned", "=", "np", ".", "zeros", "(", "(", "len", "(", "gtkp", ")", ",", ")", ",", "dtype", "=", "bool", ")", "\n", "opAssigned", "=", "np", ".", "zeros", "(", "(", "len", "(", "pred_kps", ")", ",", ")", ",", "dtype", "=", "bool", ")", "\n", "errors_per_pair_list", "=", "np", ".", "array", "(", "errors_per_pair_list", ")", "\n", "\n", "bestMatch", "=", "[", "]", "\n", "excludedGtBecauseInvalid", "=", "[", "]", "\n", "falsePositiveCounter", "=", "0", "\n", "while", "np", ".", "sum", "(", "gtAssigned", ")", "<", "len", "(", "gtAssigned", ")", "and", "np", ".", "sum", "(", "\n", "opAssigned", ")", "+", "falsePositiveCounter", "<", "len", "(", "pred_kps", ")", ":", "\n", "        ", "found", "=", "False", "\n", "falsePositive", "=", "False", "\n", "while", "not", "(", "found", ")", ":", "\n", "            ", "if", "sum", "(", "np", ".", "inf", "==", "errors_per_pair_list", ")", "==", "len", "(", "\n", "errors_per_pair_list", ")", ":", "\n", "                ", "logging", ".", "fatal", "(", "'something went wrong here'", ")", "\n", "\n", "", "minIdx", "=", "np", ".", "argmin", "(", "errors_per_pair_list", ")", "\n", "minComb", "=", "combs", "[", "minIdx", "]", "\n", "# compute IOU", "\n", "iou", "=", "get_bbx_overlap", "(", "\n", "pred_kps", "[", "minComb", "[", "0", "]", "]", ",", "gtkp", "[", "minComb", "[", "1", "]", "]", ",", "imgPath", ",", "baseline", ")", "\n", "# if neither prediction nor ground truth has been matched before and iou", "\n", "# is larger than threshold", "\n", "if", "not", "(", "opAssigned", "[", "minComb", "[", "0", "]", "]", ")", "and", "not", "(", "\n", "gtAssigned", "[", "minComb", "[", "1", "]", "]", ")", "and", "iou", ">=", "iou_thresh", ":", "\n", "                ", "logging", ".", "info", "(", "imgPath", "+", "': found matching'", ")", "\n", "found", "=", "True", "\n", "errors_per_pair_list", "[", "minIdx", "]", "=", "np", ".", "inf", "\n", "", "else", ":", "\n", "                ", "errors_per_pair_list", "[", "minIdx", "]", "=", "np", ".", "inf", "\n", "# if errors_per_pair_list[minIdx] >", "\n", "# matching_threshold*headBboxs[combs[minIdx][1]]:", "\n", "if", "iou", "<", "iou_thresh", ":", "\n", "                    ", "logging", ".", "info", "(", "\n", "imgPath", "+", "': false positive detected using threshold'", ")", "\n", "found", "=", "True", "\n", "falsePositive", "=", "True", "\n", "falsePositiveCounter", "+=", "1", "\n", "\n", "# if ground truth of combination is valid keep the match, else exclude", "\n", "# gt from matching", "\n", "", "", "", "if", "not", "(", "valid", "is", "None", ")", ":", "\n", "            ", "if", "valid", "[", "minComb", "[", "1", "]", "]", ":", "\n", "                ", "if", "not", "falsePositive", ":", "\n", "                    ", "bestMatch", ".", "append", "(", "minComb", ")", "\n", "opAssigned", "[", "minComb", "[", "0", "]", "]", "=", "True", "\n", "gtAssigned", "[", "minComb", "[", "1", "]", "]", "=", "True", "\n", "", "", "else", ":", "\n", "                ", "gtAssigned", "[", "minComb", "[", "1", "]", "]", "=", "True", "\n", "excludedGtBecauseInvalid", ".", "append", "(", "minComb", "[", "1", "]", ")", "\n", "\n", "", "", "elif", "not", "falsePositive", ":", "\n", "# same as above but without checking for valid", "\n", "            ", "bestMatch", ".", "append", "(", "minComb", ")", "\n", "opAssigned", "[", "minComb", "[", "0", "]", "]", "=", "True", "\n", "gtAssigned", "[", "minComb", "[", "1", "]", "]", "=", "True", "\n", "\n", "# add false positives and false negatives to the matching", "\n", "# find which elements have been successfully assigned", "\n", "", "", "opAssigned", "=", "[", "]", "\n", "gtAssigned", "=", "[", "]", "\n", "for", "pair", "in", "bestMatch", ":", "\n", "        ", "opAssigned", ".", "append", "(", "pair", "[", "0", "]", ")", "\n", "gtAssigned", ".", "append", "(", "pair", "[", "1", "]", ")", "\n", "", "opAssigned", ".", "sort", "(", ")", "\n", "gtAssigned", ".", "sort", "(", ")", "\n", "\n", "# handle false positives", "\n", "opIds", "=", "np", ".", "arange", "(", "len", "(", "pred_kps", ")", ")", "\n", "# returns values of oIds that are not in opAssigned", "\n", "notAssignedIds", "=", "np", ".", "setdiff1d", "(", "opIds", ",", "opAssigned", ")", "\n", "for", "notAssignedId", "in", "notAssignedIds", ":", "\n", "        ", "bestMatch", ".", "append", "(", "(", "notAssignedId", ",", "'falsePositive'", ")", ")", "\n", "", "gtIds", "=", "np", ".", "arange", "(", "len", "(", "gtList", ")", ")", "\n", "# returns values of gtIds that are not in gtAssigned", "\n", "notAssignedIdsGt", "=", "np", ".", "setdiff1d", "(", "gtIds", ",", "gtAssigned", ")", "\n", "\n", "# handle false negatives/misses", "\n", "for", "notAssignedIdGt", "in", "notAssignedIdsGt", ":", "\n", "        ", "if", "not", "(", "valid", "is", "None", ")", ":", "# if using the new matching", "\n", "            ", "if", "valid", "[", "notAssignedIdGt", "]", ":", "\n", "                ", "logging", ".", "info", "(", "imgPath", "+", "': miss'", ")", "\n", "bestMatch", ".", "append", "(", "(", "'miss'", ",", "notAssignedIdGt", ")", ")", "\n", "", "else", ":", "\n", "                ", "excludedGtBecauseInvalid", ".", "append", "(", "notAssignedIdGt", ")", "\n", "", "", "else", ":", "\n", "            ", "logging", ".", "info", "(", "imgPath", "+", "': miss'", ")", "\n", "bestMatch", ".", "append", "(", "(", "'miss'", ",", "notAssignedIdGt", ")", ")", "\n", "\n", "# handle invalid ground truth", "\n", "", "", "for", "invalidGt", "in", "excludedGtBecauseInvalid", ":", "\n", "        ", "bestMatch", ".", "append", "(", "(", "'invalid'", ",", "invalidGt", ")", ")", "\n", "\n", "", "return", "bestMatch", "# tuples are (idx_pred_kps, idx_gt_kps)", "\n", "\n"]], "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.matching.get_bbx_overlap": [[236, 286], ["numpy.min", "numpy.min", "numpy.max", "numpy.max", "max", "max", "min", "min", "baseline.lower", "max", "max", "float", "logging.fatal"], "function", ["None"], ["", "def", "get_bbx_overlap", "(", "p1", ",", "p2", ",", "imgpath", ",", "baseline", "=", "None", ")", ":", "\n", "    ", "if", "baseline", ".", "lower", "(", ")", "==", "'meanposebaseline'", ":", "\n", "        ", "p1", "=", "p1", "[", "p1", "[", ":", ",", "2", "]", ">", "0", ",", ":", "-", "1", "]", "\n", "\n", "", "min_p1", "=", "np", ".", "min", "(", "p1", ",", "axis", "=", "0", ")", "\n", "min_p2", "=", "np", ".", "min", "(", "p2", ",", "axis", "=", "0", ")", "\n", "max_p1", "=", "np", ".", "max", "(", "p1", ",", "axis", "=", "0", ")", "\n", "max_p2", "=", "np", ".", "max", "(", "p2", ",", "axis", "=", "0", ")", "\n", "\n", "bb1", "=", "{", "}", "\n", "bb2", "=", "{", "}", "\n", "\n", "bb1", "[", "'x1'", "]", "=", "min_p1", "[", "0", "]", "\n", "bb1", "[", "'x2'", "]", "=", "max_p1", "[", "0", "]", "\n", "bb1", "[", "'y1'", "]", "=", "min_p1", "[", "1", "]", "\n", "bb1", "[", "'y2'", "]", "=", "max_p1", "[", "1", "]", "\n", "bb2", "[", "'x1'", "]", "=", "min_p2", "[", "0", "]", "\n", "bb2", "[", "'x2'", "]", "=", "max_p2", "[", "0", "]", "\n", "bb2", "[", "'y1'", "]", "=", "min_p2", "[", "1", "]", "\n", "bb2", "[", "'y2'", "]", "=", "max_p2", "[", "1", "]", "\n", "\n", "try", ":", "\n", "        ", "assert", "bb1", "[", "'x1'", "]", "<", "bb1", "[", "'x2'", "]", "\n", "assert", "bb1", "[", "'y1'", "]", "<", "bb1", "[", "'y2'", "]", "\n", "assert", "bb2", "[", "'x1'", "]", "<", "bb2", "[", "'x2'", "]", "\n", "assert", "bb2", "[", "'y1'", "]", "<", "bb2", "[", "'y2'", "]", "\n", "", "except", "BaseException", ":", "\n", "        ", "logging", ".", "fatal", "(", "'why'", ")", "\n", "\n", "# determine the coordinates of the intersection rectangle", "\n", "", "x_left", "=", "max", "(", "bb1", "[", "'x1'", "]", ",", "bb2", "[", "'x1'", "]", ")", "\n", "y_top", "=", "max", "(", "bb1", "[", "'y1'", "]", ",", "bb2", "[", "'y1'", "]", ")", "\n", "x_right", "=", "min", "(", "bb1", "[", "'x2'", "]", ",", "bb2", "[", "'x2'", "]", ")", "\n", "y_bottom", "=", "min", "(", "bb1", "[", "'y2'", "]", ",", "bb2", "[", "'y2'", "]", ")", "\n", "\n", "# The intersection of two axis-aligned bounding boxes is always an", "\n", "# axis-aligned bounding box", "\n", "intersection_area", "=", "max", "(", "0", ",", "x_right", "-", "x_left", "+", "1", ")", "*", "max", "(", "0", ",", "y_bottom", "-", "y_top", "+", "1", ")", "\n", "\n", "# compute the area of both AABBs", "\n", "bb1_area", "=", "(", "bb1", "[", "'x2'", "]", "-", "bb1", "[", "'x1'", "]", "+", "1", ")", "*", "(", "bb1", "[", "'y2'", "]", "-", "bb1", "[", "'y1'", "]", "+", "1", ")", "\n", "bb2_area", "=", "(", "bb2", "[", "'x2'", "]", "-", "bb2", "[", "'x1'", "]", "+", "1", ")", "*", "(", "bb2", "[", "'y2'", "]", "-", "bb2", "[", "'y1'", "]", "+", "1", ")", "\n", "\n", "# compute the intersection over union by taking the intersection", "\n", "# area and dividing it by the sum of prediction + ground-truth", "\n", "# areas - the interesection area", "\n", "iou", "=", "intersection_area", "/", "float", "(", "bb1_area", "+", "bb2_area", "-", "intersection_area", ")", "\n", "\n", "return", "iou", "\n", "\n"]], "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.matching.scatter2d": [[288, 324], ["cv2.imread", "cm.tab20c", "plt.figure", "plt.figure.add_subplot", "plt.figure.add_subplot", "fig.add_subplot.imshow", "fig.add_subplot.imshow", "range", "range", "logging.info", "os.path.exists", "os.makedirs", "numpy.linspace", "len", "logging.debug", "range", "len", "range", "savename.replace.replace", "plt.savefig", "plt.close", "fig.add_subplot.scatter", "fig.add_subplot.scatter", "imgPath.split", "os.path.join", "baseline.lower"], "function", ["None"], ["", "def", "scatter2d", "(", "gtkp", ",", "openpose", ",", "imgPath", ",", "debug_path", ",", "baseline", ")", ":", "\n", "    ", "import", "cv2", "\n", "import", "matplotlib", ".", "cm", "as", "cm", "\n", "import", "matplotlib", ".", "pyplot", "as", "plt", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "debug_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "debug_path", ")", "\n", "", "img", "=", "cv2", ".", "imread", "(", "imgPath", ")", "\n", "img", "=", "img", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "\n", "colors", "=", "cm", ".", "tab20c", "(", "np", ".", "linspace", "(", "0", ",", "1", ",", "25", ")", ")", "\n", "fig", "=", "plt", ".", "figure", "(", "dpi", "=", "300", ")", "\n", "ax", "=", "fig", ".", "add_subplot", "(", "121", ")", "\n", "ax2", "=", "fig", ".", "add_subplot", "(", "122", ")", "\n", "ax", ".", "imshow", "(", "img", ")", "\n", "ax2", ".", "imshow", "(", "img", ")", "\n", "\n", "nkps", "=", "24", "\n", "\n", "for", "pNum", "in", "range", "(", "len", "(", "openpose", ")", ")", ":", "\n", "        ", "logging", ".", "debug", "(", "openpose", "[", "pNum", "]", ".", "shape", ")", "\n", "for", "i", "in", "range", "(", "nkps", ")", ":", "\n", "            ", "ax", ".", "scatter", "(", "openpose", "[", "pNum", "]", "[", "i", ",", "0", "]", ",", "openpose", "[", "pNum", "]", "\n", "[", "i", ",", "1", "]", ",", "c", "=", "colors", "[", "i", "]", ",", "s", "=", "0.05", ")", "\n", "\n", "", "", "for", "pNum", "in", "range", "(", "len", "(", "gtkp", ")", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "nkps", ")", ":", "\n", "            ", "ax2", ".", "scatter", "(", "gtkp", "[", "pNum", "]", "[", "i", ",", "0", "]", ",", "gtkp", "[", "pNum", "]", "\n", "[", "i", ",", "1", "]", ",", "c", "=", "colors", "[", "i", "]", ",", "s", "=", "0.05", ")", "\n", "\n", "", "", "if", "not", "(", "imgPath", "is", "None", ")", ":", "\n", "        ", "savename", "=", "imgPath", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "savename", "=", "savename", ".", "replace", "(", "'.pkl'", ",", "'.jpg'", ")", "\n", "plt", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "debug_path", ",", "baseline", ".", "lower", "(", ")", "+", "savename", ")", ")", "\n", "plt", ".", "close", "(", "'all'", ")", "\n", "", "logging", ".", "info", "(", "'a'", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.find_corresponding_masks.getPersonMaskPath": [[23, 46], ["os.path.join", "int", "format", "format", "print", "os.path.join", "os.path.join", "imgName.split", "KeyError", "imgName.replace().split", "imgBase.split", "imgName.split", "imgName.split", "imgName.split", "imgName.replace"], "function", ["None"], ["def", "getPersonMaskPath", "(", "maskBaseFolder", ",", "imgName", ",", "pnum", ",", "imgRes", ")", ":", "\n", "    ", "scene_type", "=", "'_'", ".", "join", "(", "imgName", ".", "split", "(", "'_'", ")", "[", "0", ":", "5", "]", ")", "\n", "maskFolder", "=", "os", ".", "path", ".", "join", "(", "maskBaseFolder", ",", "scene_type", ")", "\n", "if", "imgRes", "==", "'high'", ":", "\n", "        ", "imgBase", "=", "'_'", ".", "join", "(", "imgName", ".", "split", "(", "'_'", ")", "[", "0", ":", "-", "1", "]", ")", "\n", "ending", "=", "'.png'", "\n", "", "elif", "imgRes", "==", "'low'", ":", "\n", "        ", "imgBase", "=", "'_'", ".", "join", "(", "imgName", ".", "split", "(", "'_'", ")", "[", "0", ":", "-", "1", "]", ")", "\n", "ending", "=", "'_1280x720.png'", "\n", "", "else", ":", "\n", "        ", "raise", "KeyError", "(", "'imgRes can be either high or low'", ")", "\n", "\n", "", "i", "=", "int", "(", "imgName", ".", "replace", "(", "'.png'", ",", "''", ")", ".", "split", "(", "'_'", ")", "[", "-", "1", "]", ")", "\n", "format_pnum", "=", "format", "(", "pnum", "+", "1", ",", "'05d'", ")", "\n", "format_i", "=", "format", "(", "i", ",", "'06d'", ")", "\n", "if", "'archviz'", "in", "imgName", ":", "\n", "        ", "cam", "=", "imgBase", ".", "split", "(", "'_'", ")", "[", "-", "1", "]", "\n", "imgBase", "=", "'_'", ".", "join", "(", "imgName", ".", "split", "(", "'_'", ")", "[", "0", ":", "-", "2", "]", ")", "\n", "maskPerson", "=", "os", ".", "path", ".", "join", "(", "maskFolder", ",", "imgBase", "+", "'_mask_'", "+", "cam", "+", "'_'", "+", "format_i", "+", "'_'", "+", "format_pnum", "+", "ending", ")", "\n", "", "else", ":", "\n", "        ", "maskPerson", "=", "os", ".", "path", ".", "join", "(", "maskFolder", ",", "imgBase", "+", "'_mask_'", "+", "format_i", "+", "'_'", "+", "format_pnum", "+", "ending", ")", "\n", "", "print", "(", "maskPerson", ")", "\n", "return", "maskPerson", "\n", "\n"]], "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.find_corresponding_masks.find_corresponding_masks": [[47, 76], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "pandas.read_pickle", "range", "len", "enumerate", "find_corresponding_masks.getPersonMaskPath", "os.path.exists", "find_corresponding_masks.getPersonMaskPath", "os.path.exists", "print", "KeyError", "print", "KeyError", "pandas.read_pickle.columns.get_loc"], "function", ["home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.find_corresponding_masks.getPersonMaskPath", "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.find_corresponding_masks.getPersonMaskPath"], ["", "def", "find_corresponding_masks", "(", "*", "args", ")", ":", "\n", "# Parser", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--dataframe_path'", ",", "type", "=", "str", ",", "\n", "default", "=", "''", ")", "\n", "parser", ".", "add_argument", "(", "'--maskBaseFolder'", ",", "type", "=", "str", ",", "\n", "default", "=", "''", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--imgRes'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "'high'", ",", "\n", "help", "=", "'high or low'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", "*", "args", ")", "\n", "dataframe_path", "=", "args", ".", "dataframe_path", "\n", "maskBaseFolder", "=", "args", ".", "maskBaseFolder", "\n", "imgRes", "=", "args", ".", "imgRes", "\n", "df", "=", "pandas", ".", "read_pickle", "(", "dataframe_path", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "df", ")", ")", ":", "\n", "         ", "for", "pnum", ",", "gt", "in", "enumerate", "(", "df", ".", "iloc", "[", "i", ",", "df", ".", "columns", ".", "get_loc", "(", "'isValid'", ")", "]", ")", ":", "\n", "             ", "maskPerson_path", "=", "getPersonMaskPath", "(", "maskBaseFolder", ",", "df", ".", "iloc", "[", "i", "]", "[", "'imgPath'", "]", ",", "pnum", ",", "imgRes", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "maskPerson_path", ")", ":", "\n", "                ", "print", "(", "'individual person mask: '", ",", "maskPerson_path", ")", "\n", "", "else", ":", "\n", "                ", "raise", "KeyError", "(", "maskPerson_path", ",", "\" Mask not found in maskBaseFolder\"", ")", "\n", "", "", "maskPerson_path", "=", "getPersonMaskPath", "(", "maskBaseFolder", ",", "df", ".", "iloc", "[", "i", "]", "[", "'imgPath'", "]", ",", "-", "1", ",", "imgRes", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "maskPerson_path", ")", ":", "\n", "             ", "print", "(", "'full mask: '", ",", "maskPerson_path", ")", "\n", "", "else", ":", "\n", "             ", "raise", "KeyError", "(", "maskPerson_path", ",", "\" Mask not found in maskBaseFolder\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.get_joints_verts_from_dataframe.get_smpl_vertices": [[35, 68], ["gt.items", "model_gt", "gt.keys", "gt.pop", "gt.keys", "gt.pop", "torch.is_tensor", "model_gt.joints.detach().cpu().numpy().squeeze", "model_gt.vertices.detach().cpu().numpy().squeeze", "v.detach().cpu().numpy", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "model_gt.joints.detach().cpu().numpy", "model_gt.vertices.detach().cpu().numpy", "v.detach().cpu", "model_gt.joints.detach().cpu", "model_gt.vertices.detach().cpu", "v.detach", "model_gt.joints.detach", "model_gt.vertices.detach"], "function", ["None"], ["def", "get_smpl_vertices", "(", "\n", "kid_flag", ",", "\n", "gt", ",", "\n", "gender", ",", "\n", "smpl_neutral_kid", ",", "\n", "smpl_neutral", ",", "\n", "pose2rot", "=", "True", ")", ":", "\n", "# All neutral model are used", "\n", "    ", "if", "kid_flag", ":", "\n", "        ", "model_gt", "=", "smpl_neutral_kid", "\n", "num_betas", "=", "11", "\n", "", "else", ":", "\n", "\n", "        ", "model_gt", "=", "smpl_neutral", "\n", "num_betas", "=", "10", "\n", "\n", "# Since SMPLX to SMPL conversion tool store root_pose and translation as", "\n", "# keys", "\n", "", "if", "'root_pose'", "in", "gt", ".", "keys", "(", ")", ":", "\n", "        ", "gt", "[", "'global_orient'", "]", "=", "gt", ".", "pop", "(", "'root_pose'", ")", "\n", "", "if", "'translation'", "in", "gt", ".", "keys", "(", ")", ":", "\n", "        ", "gt", "[", "'transl'", "]", "=", "gt", ".", "pop", "(", "'translation'", ")", "\n", "", "for", "k", ",", "v", "in", "gt", ".", "items", "(", ")", ":", "\n", "        ", "if", "torch", ".", "is_tensor", "(", "v", ")", ":", "\n", "            ", "gt", "[", "k", "]", "=", "v", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "", "smplx_gt", "=", "model_gt", "(", "betas", "=", "torch", ".", "tensor", "(", "gt", "[", "'betas'", "]", "[", ":", ",", ":", "num_betas", "]", ",", "dtype", "=", "torch", ".", "float", ")", ",", "\n", "global_orient", "=", "torch", ".", "tensor", "(", "gt", "[", "'global_orient'", "]", ",", "dtype", "=", "torch", ".", "float", ")", ",", "\n", "body_pose", "=", "torch", ".", "tensor", "(", "gt", "[", "'body_pose'", "]", ",", "dtype", "=", "torch", ".", "float", ")", ",", "\n", "transl", "=", "torch", ".", "tensor", "(", "gt", "[", "'transl'", "]", ",", "dtype", "=", "torch", ".", "float", ")", ",", "pose2rot", "=", "pose2rot", ")", "\n", "\n", "return", "smplx_gt", ".", "joints", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "squeeze", "(", "\n", ")", ",", "smplx_gt", ".", "vertices", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "squeeze", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.get_joints_verts_from_dataframe.get_smplx_vertices": [[70, 119], ["model_gt", "model_gt.joints.detach().cpu().numpy().squeeze", "model_gt.vertices.detach().cpu().numpy().squeeze", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "model_gt.joints.detach().cpu().numpy", "model_gt.vertices.detach().cpu().numpy", "KeyError", "KeyError", "model_gt.joints.detach().cpu", "model_gt.vertices.detach().cpu", "model_gt.joints.detach", "model_gt.vertices.detach"], "function", ["None"], ["", "def", "get_smplx_vertices", "(", "\n", "num_betas", ",", "\n", "kid_flag", ",", "\n", "gt", ",", "\n", "gender", ",", "\n", "smplx_male_kid_gt", ",", "\n", "smplx_female_kid_gt", ",", "\n", "smplx_neutral_kid", ",", "\n", "smplx_male_gt", ",", "\n", "smplx_female_gt", ",", "\n", "smplx_neutral", ",", "\n", "pose2rot", "=", "True", ")", ":", "\n", "\n", "    ", "if", "kid_flag", ":", "\n", "        ", "num_betas", "=", "11", "\n", "if", "gender", "==", "'female'", ":", "\n", "            ", "model_gt", "=", "smplx_neutral_kid", "\n", "", "elif", "gender", "==", "'male'", ":", "\n", "            ", "model_gt", "=", "smplx_male_kid_gt", "\n", "", "elif", "gender", "==", "'neutral'", ":", "\n", "            ", "model_gt", "=", "smplx_neutral_kid", "\n", "", "else", ":", "\n", "            ", "raise", "KeyError", "(", "\n", "'Kid: Got gender {}, what gender is it?'", ".", "format", "(", "gender", ")", ")", "\n", "\n", "", "", "else", ":", "\n", "        ", "if", "gender", "==", "'female'", ":", "\n", "            ", "model_gt", "=", "smplx_female_gt", "\n", "", "elif", "gender", "==", "'male'", ":", "\n", "            ", "model_gt", "=", "smplx_male_gt", "\n", "", "elif", "gender", "==", "'neutral'", ":", "\n", "            ", "model_gt", "=", "smplx_neutral", "\n", "", "else", ":", "\n", "            ", "raise", "KeyError", "(", "'Got gender {}, what gender is it?'", ".", "format", "(", "gender", ")", ")", "\n", "\n", "", "", "smplx_gt", "=", "model_gt", "(", "\n", "betas", "=", "torch", ".", "tensor", "(", "gt", "[", "'betas'", "]", "[", ":", ",", ":", "num_betas", "]", ",", "dtype", "=", "torch", ".", "float", ")", ",", "\n", "global_orient", "=", "torch", ".", "tensor", "(", "gt", "[", "'global_orient'", "]", ",", "dtype", "=", "torch", ".", "float", ")", ",", "\n", "body_pose", "=", "torch", ".", "tensor", "(", "gt", "[", "'body_pose'", "]", ",", "dtype", "=", "torch", ".", "float", ")", ",", "\n", "left_hand_pose", "=", "torch", ".", "tensor", "(", "gt", "[", "'left_hand_pose'", "]", ",", "dtype", "=", "torch", ".", "float", ")", ",", "\n", "right_hand_pose", "=", "torch", ".", "tensor", "(", "gt", "[", "'right_hand_pose'", "]", ",", "dtype", "=", "torch", ".", "float", ")", ",", "\n", "transl", "=", "torch", ".", "tensor", "(", "gt", "[", "'transl'", "]", ",", "dtype", "=", "torch", ".", "float", ")", ",", "\n", "expression", "=", "torch", ".", "tensor", "(", "gt", "[", "'expression'", "]", ",", "dtype", "=", "torch", ".", "float", ")", ",", "\n", "jaw_pose", "=", "torch", ".", "tensor", "(", "gt", "[", "'jaw_pose'", "]", ",", "dtype", "=", "torch", ".", "float", ")", ",", "\n", "leye_pose", "=", "torch", ".", "tensor", "(", "gt", "[", "'leye_pose'", "]", ",", "dtype", "=", "torch", ".", "float", ")", ",", "\n", "reye_pose", "=", "torch", ".", "tensor", "(", "gt", "[", "'reye_pose'", "]", ",", "dtype", "=", "torch", ".", "float", ")", ",", "pose2rot", "=", "pose2rot", ")", "\n", "\n", "return", "smplx_gt", ".", "joints", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "squeeze", "(", "\n", ")", ",", "smplx_gt", ".", "vertices", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "squeeze", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.get_joints_verts_from_dataframe.get_pred_joints": [[121, 176], ["[].keys", "bool", "[].keys", "bool", "[].keys", "[].keys", "utils.load_model", "[].keys", "predJoints.append", "[].keys", "predVerts.append", "predVerts.append", "globals", "[].squeeze", "[].keys", "predJoints.append", "KeyError", "[].squeeze", "get_joints_verts_from_dataframe.get_smplx_vertices", "get_joints_verts_from_dataframe.get_smpl_vertices", "logging.DEBUG"], "function", ["home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.utils.load_model", "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.get_joints_verts_from_dataframe.get_smplx_vertices", "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.get_joints_verts_from_dataframe.get_smpl_vertices"], ["", "def", "get_pred_joints", "(", "predJoints", ",", "predVerts", ",", "df", ",", "idx", ",", "pNum", ",", "args", ")", ":", "\n", "# Add kid flag", "\n", "    ", "if", "'kid_flag'", "in", "df", ".", "iloc", "[", "idx", "]", ".", "at", "[", "'pred'", "]", "[", "pNum", "]", ".", "keys", "(", ")", ":", "\n", "        ", "kid_flag", "=", "bool", "(", "df", ".", "iloc", "[", "idx", "]", ".", "at", "[", "'pred'", "]", "[", "pNum", "]", "[", "'kid_flag'", "]", ")", "\n", "", "else", ":", "\n", "        ", "kid_flag", "=", "False", "\n", "\n", "# Add pose2rot if pose is rotation matrix", "\n", "", "if", "'pose2rot'", "in", "df", ".", "iloc", "[", "idx", "]", ".", "at", "[", "'pred'", "]", "[", "pNum", "]", ".", "keys", "(", ")", ":", "\n", "        ", "args", ".", "pose2rot", "=", "bool", "(", "df", ".", "iloc", "[", "idx", "]", ".", "at", "[", "'pred'", "]", "[", "pNum", "]", "[", "'pose2rot'", "]", ")", "\n", "", "else", ":", "\n", "        ", "args", ".", "pose2rot", "=", "True", "\n", "\n", "# Add gender", "\n", "", "if", "'gender'", "in", "df", ".", "iloc", "[", "idx", "]", ".", "at", "[", "'pred'", "]", "[", "pNum", "]", ".", "keys", "(", ")", ":", "\n", "        ", "gender", "=", "df", ".", "iloc", "[", "idx", "]", ".", "at", "[", "'pred'", "]", "[", "pNum", "]", "[", "'gender'", "]", "\n", "", "else", ":", "\n", "        ", "gender", "=", "'neutral'", "\n", "\n", "# Add num_betas for shape", "\n", "", "if", "'num_betas'", "in", "df", ".", "iloc", "[", "idx", "]", ".", "at", "[", "'pred'", "]", "[", "pNum", "]", ".", "keys", "(", ")", ":", "\n", "        ", "num_betas", "=", "df", ".", "iloc", "[", "idx", "]", ".", "at", "[", "'pred'", "]", "[", "pNum", "]", "[", "'num_betas'", "]", "\n", "", "else", ":", "\n", "        ", "num_betas", "=", "10", "\n", "\n", "", "if", "not", "'model_male'", "in", "globals", "(", ")", ":", "\n", "        ", "args", ".", "numBetas", "=", "num_betas", "\n", "global", "model_male", ",", "model_male_kid", ",", "model_female", ",", "model_female_kid", ",", "model_neutral", ",", "model_neutral_kid", "\n", "model_male", ",", "model_male_kid", ",", "model_female", ",", "model_female_kid", ",", "model_neutral", ",", "model_neutral_kid", "=", "load_model", "(", "\n", "args", ")", "\n", "# Add 3d joints", "\n", "", "if", "'allSmplJoints3d'", "in", "df", ".", "iloc", "[", "idx", "]", ".", "at", "[", "'pred'", "]", "[", "pNum", "]", ".", "keys", "(", ")", ":", "\n", "        ", "predJoints", ".", "append", "(", "df", ".", "iloc", "[", "idx", "]", ".", "at", "[", "'pred'", "]", "[", "pNum", "]", "\n", "[", "'allSmplJoints3d'", "]", ".", "squeeze", "(", ")", ")", "\n", "", "elif", "'params'", "in", "df", ".", "iloc", "[", "idx", "]", ".", "at", "[", "'pred'", "]", "[", "pNum", "]", ".", "keys", "(", ")", ":", "\n", "# Calculate joints and vertices from params", "\n", "        ", "gt", "=", "df", ".", "iloc", "[", "idx", "]", ".", "at", "[", "'pred'", "]", "[", "pNum", "]", "[", "'params'", "]", "\n", "if", "args", ".", "modeltype", "==", "'SMPLX'", ":", "\n", "            ", "pred_joints", ",", "pred_verts", "=", "get_smplx_vertices", "(", "num_betas", ",", "kid_flag", ",", "gt", ",", "gender", ",", "model_male_kid", ",", "\n", "model_female_kid", ",", "model_neutral_kid", ",", "model_male", ",", "\n", "model_female", ",", "model_neutral", ",", "args", ".", "pose2rot", ")", "\n", "", "elif", "args", ".", "modeltype", "==", "'SMPL'", ":", "\n", "            ", "pred_joints", ",", "pred_verts", "=", "get_smpl_vertices", "(", "\n", "kid_flag", ",", "gt", ",", "gender", ",", "model_neutral_kid", ",", "model_neutral", ",", "args", ".", "pose2rot", ")", "\n", "", "else", ":", "\n", "            ", "logging", ".", "DEBUG", "(", "'model '", "+", "args", ".", "modeltype", "+", "' not defined'", ")", "\n", "", "predJoints", ".", "append", "(", "pred_joints", ")", "\n", "", "else", ":", "\n", "        ", "raise", "KeyError", "(", "'no predicted paramaters are provided'", ")", "\n", "\n", "# Add 3d verts", "\n", "", "if", "'verts'", "in", "df", ".", "iloc", "[", "idx", "]", ".", "at", "[", "'pred'", "]", "[", "pNum", "]", ".", "keys", "(", ")", ":", "\n", "        ", "predVerts", ".", "append", "(", "df", ".", "iloc", "[", "idx", "]", ".", "at", "[", "'pred'", "]", "[", "pNum", "]", "[", "'verts'", "]", ".", "squeeze", "(", ")", ")", "\n", "", "else", ":", "\n", "        ", "predVerts", ".", "append", "(", "pred_verts", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.get_joints_verts_from_dataframe.get_projected_joints": [[178, 221], ["projection.project_2d", "projection.project_2d", "os.path.join().replace", "pickle.load", "get_joints_verts_from_dataframe.get_smpl_vertices", "os.path.join().replace", "pickle.load", "get_joints_verts_from_dataframe.get_smplx_vertices", "Mesh().show", "open", "open", "os.path.join", "os.path.join", "Mesh"], "function", ["home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.projection.project_2d", "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.projection.project_2d", "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.load_predictions.load", "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.get_joints_verts_from_dataframe.get_smpl_vertices", "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.load_predictions.load", "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.get_joints_verts_from_dataframe.get_smplx_vertices"], ["", "", "def", "get_projected_joints", "(", "\n", "args", ",", "\n", "df", ",", "\n", "idx", ",", "\n", "pNum", ",", "\n", "model_male_kid_gt", ",", "\n", "model_female_kid", ",", "\n", "model_neutral_kid", ",", "\n", "model_male_gt", ",", "\n", "model_female_gt", ",", "\n", "model_neutral", ",", "\n", "debug", "=", "False", ")", ":", "\n", "    ", "kid_flag", "=", "df", ".", "iloc", "[", "idx", "]", ".", "at", "[", "'kid'", "]", "[", "pNum", "]", "\n", "gender", "=", "df", ".", "iloc", "[", "idx", "]", ".", "at", "[", "'gender'", "]", "[", "pNum", "]", "\n", "\n", "if", "args", ".", "modeltype", "==", "'SMPL'", ":", "\n", "        ", "smpl_path", "=", "os", ".", "path", ".", "join", "(", "\n", "args", ".", "gt_model_path", ",", "\n", "df", ".", "iloc", "[", "idx", "]", ".", "at", "[", "'gt_path_smpl'", "]", "[", "pNum", "]", ")", ".", "replace", "(", "\n", "'.obj'", ",", "\n", "'.pkl'", ")", "\n", "gt", "=", "pickle", ".", "load", "(", "open", "(", "smpl_path", ",", "'rb'", ")", ")", "\n", "gt_joints_local", ",", "gt_verts_local", "=", "get_smpl_vertices", "(", "\n", "kid_flag", ",", "gt", ",", "gender", ",", "model_neutral_kid", ",", "model_neutral", ")", "\n", "", "else", ":", "\n", "        ", "smplx_path", "=", "os", ".", "path", ".", "join", "(", "\n", "args", ".", "gt_model_path", ",", "\n", "df", ".", "iloc", "[", "idx", "]", ".", "at", "[", "'gt_path_smplx'", "]", "[", "pNum", "]", ")", ".", "replace", "(", "\n", "'.obj'", ",", "\n", "'.pkl'", ")", "\n", "gt", "=", "pickle", ".", "load", "(", "open", "(", "smplx_path", ",", "'rb'", ")", ")", "\n", "gt_joints_local", ",", "gt_verts_local", "=", "get_smplx_vertices", "(", "args", ".", "numBetas", ",", "kid_flag", ",", "gt", ",", "gender", ",", "\n", "model_male_kid_gt", ",", "model_female_kid", ",", "\n", "model_neutral_kid", ",", "model_male_gt", ",", "\n", "model_female_gt", ",", "model_neutral", ")", "\n", "", "if", "debug", ":", "\n", "        ", "from", "psbody", ".", "mesh", "import", "Mesh", "\n", "Mesh", "(", "v", "=", "gt_verts_local", ")", ".", "show", "(", ")", "\n", "\n", "", "gt_verts_cam_2d", ",", "gt_verts_cam_3d", "=", "project_2d", "(", "args", ",", "df", ",", "idx", ",", "pNum", ",", "gt_verts_local", ")", "\n", "\n", "gt_joints_cam_2d", ",", "gt_joints_cam_3d", "=", "project_2d", "(", "args", ",", "df", ",", "idx", ",", "pNum", ",", "gt_joints_local", ")", "\n", "return", "gt_verts_cam_2d", ",", "gt_verts_cam_3d", ",", "gt_joints_cam_2d", ",", "gt_joints_cam_3d", "\n", "\n"]], "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.get_joints_verts_from_dataframe.add_joints_verts_in_dataframe": [[223, 254], ["utils.load_model", "df.insert", "df.insert", "df.insert", "tqdm.tqdm", "range", "range", "len", "len", "len", "len", "len", "len", "len", "len", "get_joints_verts_from_dataframe.get_projected_joints", "df.iloc[].at[].append", "df.iloc[].at[].append", "df.iloc[].at[].append", "df.columns.get_loc", "df.columns.get_loc", "df.columns.get_loc"], "function", ["home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.utils.load_model", "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.get_joints_verts_from_dataframe.get_projected_joints"], ["", "def", "add_joints_verts_in_dataframe", "(", "args", ",", "df", ",", "store_joints", ")", ":", "\n", "\n", "    ", "model_male", ",", "model_male_kid", ",", "model_female", ",", "model_female_kid", ",", "model_neutral", ",", "model_neutral_kid", "=", "load_model", "(", "\n", "args", ")", "\n", "\n", "df", ".", "insert", "(", "column", "=", "'gt_joints_2d'", ",", "loc", "=", "len", "(", "df", ".", "columns", ")", ",", "value", "=", "len", "(", "df", ")", "*", "[", "''", "]", ")", "\n", "df", ".", "insert", "(", "column", "=", "'gt_joints_3d'", ",", "loc", "=", "len", "(", "df", ".", "columns", ")", ",", "value", "=", "len", "(", "df", ")", "*", "[", "''", "]", ")", "\n", "df", ".", "insert", "(", "column", "=", "'gt_verts'", ",", "loc", "=", "len", "(", "df", ".", "columns", ")", ",", "value", "=", "len", "(", "df", ")", "*", "[", "''", "]", ")", "\n", "for", "idx", "in", "tqdm", "(", "range", "(", "len", "(", "df", ")", ")", ")", ":", "\n", "        ", "for", "jdx", "in", "range", "(", "len", "(", "df", ".", "iloc", "[", "idx", "]", "[", "'isValid'", "]", ")", ")", ":", "\n", "            ", "if", "jdx", "==", "0", ":", "\n", "                ", "if", "store_joints", ":", "\n", "                    ", "df", ".", "iloc", "[", "idx", ",", "df", ".", "columns", ".", "get_loc", "(", "'gt_joints_2d'", ")", "]", "=", "[", "]", "\n", "df", ".", "iloc", "[", "idx", ",", "df", ".", "columns", ".", "get_loc", "(", "'gt_joints_3d'", ")", "]", "=", "[", "]", "\n", "df", ".", "iloc", "[", "idx", ",", "df", ".", "columns", ".", "get_loc", "(", "'gt_verts'", ")", "]", "=", "[", "]", "\n", "\n", "", "", "if", "store_joints", ":", "\n", "                ", "gt_verts_cam_2d", ",", "gt_verts_cam_3d", ",", "gt_joints_cam_2d", ",", "gt_joints_cam_3d", "=", "get_projected_joints", "(", "args", ",", "df", ",", "\n", "idx", ",", "jdx", ",", "\n", "model_male_kid", ",", "\n", "model_female_kid", ",", "\n", "model_neutral_kid", ",", "\n", "model_male", ",", "\n", "model_female", ",", "\n", "model_neutral", ",", "\n", "debug", "=", "False", ")", "\n", "df", ".", "iloc", "[", "idx", "]", ".", "at", "[", "'gt_joints_2d'", "]", ".", "append", "(", "gt_joints_cam_2d", ")", "\n", "df", ".", "iloc", "[", "idx", "]", ".", "at", "[", "'gt_joints_3d'", "]", ".", "append", "(", "gt_joints_cam_3d", ")", "\n", "df", ".", "iloc", "[", "idx", "]", ".", "at", "[", "'gt_verts'", "]", ".", "append", "(", "gt_verts_cam_3d", ")", "\n", "\n", "", "", "", "return", "df", "\n", "", ""]], "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.load_predictions.make_df_complete_pred": [[29, 45], ["df.insert", "df.insert", "range", "len", "range", "range", "len", "len", "len", "len", "df.iloc[].at[].append", "len", "len", "df.columns.get_loc"], "function", ["None"], ["def", "make_df_complete_pred", "(", "df", ",", "pred_dict", ")", ":", "\n", "    ", "df", ".", "insert", "(", "column", "=", "'pred_path'", ",", "loc", "=", "len", "(", "df", ".", "columns", ")", ",", "value", "=", "len", "(", "df", ")", "*", "[", "''", "]", ")", "\n", "df", ".", "insert", "(", "column", "=", "'pred'", ",", "loc", "=", "len", "(", "df", ".", "columns", ")", ",", "value", "=", "len", "(", "df", ")", "*", "[", "''", "]", ")", "\n", "\n", "for", "idx", "in", "(", "range", "(", "len", "(", "df", ")", ")", ")", ":", "\n", "        ", "for", "jdx", "in", "range", "(", "len", "(", "df", ".", "iloc", "[", "idx", "]", "[", "'isValid'", "]", ")", ")", ":", "\n", "# necessary to make each list unique", "\n", "            ", "if", "jdx", "==", "0", ":", "\n", "                ", "df", ".", "iloc", "[", "idx", ",", "df", ".", "columns", ".", "get_loc", "(", "'pred_path'", ")", "]", "=", "[", "]", "\n", "\n", "", "", "imgName", "=", "df", ".", "iloc", "[", "idx", "]", "[", "'imgPath'", "]", "\n", "\n", "for", "jdx", "in", "range", "(", "len", "(", "pred_dict", "[", "imgName", "]", ")", ")", ":", "\n", "            ", "df", ".", "iloc", "[", "idx", "]", ".", "at", "[", "\"pred_path\"", "]", ".", "append", "(", "\n", "pred_dict", "[", "imgName", "]", "[", "jdx", "]", ")", "# not same order)", "\n", "", "", "return", "df", "\n", "\n"]], "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.load_predictions.test_img_predMatch": [[47, 63], ["range", "len", "len", "logging.debug", "[].sort", "re.sub", "[].split", "[].split", "str"], "function", ["None"], ["", "def", "test_img_predMatch", "(", "args", ",", "df", ")", ":", "\n", "# Todo Remove for github version", "\n", "    ", "for", "i", "in", "range", "(", "len", "(", "df", ")", ")", ":", "\n", "        ", "if", "len", "(", "df", ".", "iloc", "[", "i", "]", "[", "'pred_path'", "]", ")", "==", "0", ":", "\n", "            ", "logging", ".", "debug", "(", "\n", "'no prediction for frame '", "+", "\n", "str", "(", "i", ")", "+", "\n", "'at '", "+", "\n", "df", ".", "iloc", "[", "i", "]", "[", "'imgPath'", "]", ")", "\n", "", "else", ":", "\n", "            ", "df", ".", "iloc", "[", "i", "]", "[", "'pred_path'", "]", ".", "sort", "(", ")", "\n", "predPath", "=", "df", ".", "iloc", "[", "i", "]", "[", "'pred_path'", "]", "[", "0", "]", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "predictionName", "=", "re", ".", "sub", "(", "'_personId_\\\\d*.pkl'", ",", "''", ",", "predPath", ")", "\n", "imgName", "=", "df", ".", "iloc", "[", "i", "]", "[", "'imgPath'", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "#logging.debug(\"Found for imgname: {} corresponding prediction filename: {}\".format(imgName, predictionName))", "\n", "assert", "imgName", "==", "predictionName", "\n", "\n"]], "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.load_predictions.load": [[65, 92], ["glob.glob", "collections.defaultdict", "logging.info", "load_predictions.make_df_complete_pred", "load_predictions.test_img_predMatch", "range", "os.path.join", "len", "FileNotFoundError", "pred_dict[].append", "len", "range", "pred_path.split", "len", "make_df_complete_pred.iloc[].at[].append", "open", "pickle.load", "predictionName.split", "make_df_complete_pred.columns.get_loc"], "function", ["home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.load_predictions.make_df_complete_pred", "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.load_predictions.test_img_predMatch", "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.load_predictions.load"], ["", "", "", "def", "load", "(", "args", ",", "df", ")", ":", "\n", "# build up prediction dictionary (mapping from image name to predictions)", "\n", "    ", "predictions_path", "=", "glob", "(", "os", ".", "path", ".", "join", "(", "args", ".", "pred_path", ",", "'*.pkl'", ")", ")", "\n", "pred_dict", "=", "defaultdict", "(", "list", ")", "\n", "if", "len", "(", "predictions_path", ")", "==", "0", ":", "\n", "        ", "raise", "FileNotFoundError", "(", "'No predictions!'", ")", "\n", "# get idx to path mapping", "\n", "", "for", "pred_path", "in", "predictions_path", ":", "\n", "        ", "predictionName", "=", "pred_path", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "if", "predictionName", "==", "'conf.yaml'", ":", "\n", "            ", "continue", "\n", "", "orig_imgName", "=", "'_'", ".", "join", "(", "predictionName", ".", "split", "(", "'_'", ")", "[", "0", ":", "-", "2", "]", ")", "+", "'.png'", "\n", "pred_dict", "[", "orig_imgName", "]", ".", "append", "(", "pred_path", ")", "\n", "\n", "", "logging", ".", "info", "(", "'reading dataframe'", ")", "\n", "df", "=", "make_df_complete_pred", "(", "df", ",", "pred_dict", ")", "\n", "test_img_predMatch", "(", "args", ",", "df", ")", "\n", "\n", "for", "idx", "in", "(", "range", "(", "len", "(", "df", ")", ")", ")", ":", "\n", "        ", "for", "jdx", "in", "range", "(", "len", "(", "df", ".", "iloc", "[", "idx", "]", "[", "'pred_path'", "]", ")", ")", ":", "\n", "            ", "if", "jdx", "==", "0", ":", "\n", "                ", "df", ".", "iloc", "[", "idx", ",", "df", ".", "columns", ".", "get_loc", "(", "'pred'", ")", "]", "=", "[", "]", "\n", "# get prediction", "\n", "", "with", "open", "(", "df", ".", "iloc", "[", "idx", "]", "[", "'pred_path'", "]", "[", "jdx", "]", ",", "'rb'", ")", "as", "infile", ":", "\n", "                ", "pred", "=", "pickle", ".", "load", "(", "infile", ",", "encoding", "=", "'latin1'", ")", "\n", "", "df", ".", "iloc", "[", "idx", "]", ".", "at", "[", "'pred'", "]", ".", "append", "(", "pred", ")", "\n", "", "", "return", "df", "\n", "", ""]], "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.projection.focalLength_mm2px": [[30, 33], ["None"], "function", ["None"], ["def", "focalLength_mm2px", "(", "focalLength", ",", "dslr_sens", ",", "focalPoint", ")", ":", "\n", "    ", "focal_pixel", "=", "(", "focalLength", "/", "dslr_sens", ")", "*", "focalPoint", "*", "2", "\n", "return", "focal_pixel", "\n", "\n"]], "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.projection.toCamCoords": [[35, 39], ["None"], "function", ["None"], ["", "def", "toCamCoords", "(", "j3d", ",", "camPosWorld", ")", ":", "\n", "# transform gt to camera coordinate frame", "\n", "    ", "j3d", "=", "j3d", "-", "camPosWorld", "\n", "return", "j3d", "\n", "\n"]], "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.projection.unreal2cv2": [[41, 47], ["numpy.roll", "numpy.array"], "function", ["None"], ["", "def", "unreal2cv2", "(", "points", ")", ":", "\n", "# x --> y, y --> z, z --> x", "\n", "    ", "points", "=", "np", ".", "roll", "(", "points", ",", "2", ",", "1", ")", "\n", "# change direction of y", "\n", "points", "=", "points", "*", "np", ".", "array", "(", "[", "1", ",", "-", "1", ",", "1", "]", ")", "\n", "return", "points", "\n", "\n"]], "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.projection.smpl2opencv": [[49, 53], ["numpy.array"], "function", ["None"], ["", "def", "smpl2opencv", "(", "j3d", ")", ":", "\n", "# change sign of axis 1 and axis 2", "\n", "    ", "j3d", "=", "j3d", "*", "np", ".", "array", "(", "[", "1", ",", "-", "1", ",", "-", "1", "]", ")", "\n", "return", "j3d", "\n", "\n"]], "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.projection.project_point": [[55, 62], ["numpy.dot", "numpy.dot"], "function", ["None"], ["", "def", "project_point", "(", "joint", ",", "RT", ",", "KKK", ")", ":", "\n", "\n", "    ", "P", "=", "np", ".", "dot", "(", "KKK", ",", "RT", ")", "\n", "joints_2d", "=", "np", ".", "dot", "(", "P", ",", "joint", ")", "\n", "joints_2d", "=", "joints_2d", "[", "0", ":", "2", "]", "/", "joints_2d", "[", "2", "]", "\n", "\n", "return", "joints_2d", "\n", "\n"]], "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.projection.project_2d": [[64, 164], ["os.path.join", "projection.project2d", "imgName.replace.replace"], "function", ["home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.projection.project2d"], ["", "def", "project_2d", "(", "\n", "args", ",", "\n", "df", ",", "\n", "i", ",", "\n", "pNum", ",", "\n", "joints3d", ",", "\n", "meanPose", "=", "False", ")", ":", "\n", "\n", "    ", "dslr_sens_width", "=", "36", "\n", "dslr_sens_height", "=", "20.25", "\n", "imgWidth", "=", "args", ".", "imgWidth", "\n", "imgHeight", "=", "args", ".", "imgHeight", "\n", "debug_path", "=", "args", ".", "debug_path", "\n", "imgBase", "=", "args", ".", "imgFolder", "\n", "imgName", "=", "df", ".", "iloc", "[", "i", "]", "[", "'imgPath'", "]", "\n", "if", "imgWidth", "==", "1280", "and", "'_1280x720.png'", "not", "in", "imgName", ":", "\n", "#If 1280x720 images are used then image name needs to be updated", "\n", "        ", "imgName", "=", "imgName", ".", "replace", "(", "'.png'", ",", "'_1280x720.png'", ")", "\n", "df", ".", "iloc", "[", "i", "]", "[", "'imgPath'", "]", "=", "imgName", "\n", "\n", "", "imgPath", "=", "os", ".", "path", ".", "join", "(", "imgBase", ",", "df", ".", "iloc", "[", "i", "]", "[", "'imgPath'", "]", ")", "\n", "if", "'hdri'", "in", "imgPath", ":", "\n", "        ", "ground_plane", "=", "[", "0", ",", "0", ",", "0", "]", "\n", "scene3d", "=", "False", "\n", "focalLength", "=", "50", "\n", "camPosWorld", "=", "[", "0", ",", "0", ",", "170", "]", "\n", "camYaw", "=", "0", "\n", "camPitch", "=", "0", "\n", "\n", "", "elif", "'cam00'", "in", "imgPath", ":", "\n", "        ", "ground_plane", "=", "[", "0", ",", "0", ",", "0", "]", "\n", "scene3d", "=", "True", "\n", "focalLength", "=", "18", "\n", "camPosWorld", "=", "[", "400", ",", "-", "275", ",", "265", "]", "\n", "camYaw", "=", "135", "\n", "camPitch", "=", "30", "\n", "", "elif", "'cam01'", "in", "imgPath", ":", "\n", "        ", "ground_plane", "=", "[", "0", ",", "0", ",", "0", "]", "\n", "scene3d", "=", "True", "\n", "focalLength", "=", "18", "\n", "camPosWorld", "=", "[", "400", ",", "225", ",", "265", "]", "\n", "camYaw", "=", "-", "135", "\n", "camPitch", "=", "30", "\n", "", "elif", "'cam02'", "in", "imgPath", ":", "\n", "        ", "ground_plane", "=", "[", "0", ",", "0", ",", "0", "]", "\n", "scene3d", "=", "True", "\n", "focalLength", "=", "18", "\n", "camPosWorld", "=", "[", "-", "490", ",", "170", ",", "265", "]", "\n", "camYaw", "=", "-", "45", "\n", "camPitch", "=", "30", "\n", "", "elif", "'cam03'", "in", "imgPath", ":", "\n", "        ", "ground_plane", "=", "[", "0", ",", "0", ",", "0", "]", "\n", "scene3d", "=", "True", "\n", "focalLength", "=", "18", "\n", "camPosWorld", "=", "[", "-", "490", ",", "-", "275", ",", "265", "]", "\n", "camYaw", "=", "45", "\n", "camPitch", "=", "30", "\n", "", "elif", "'ag2'", "in", "imgPath", ":", "\n", "        ", "ground_plane", "=", "[", "0", ",", "0", ",", "0", "]", "\n", "scene3d", "=", "False", "\n", "focalLength", "=", "28", "\n", "camPosWorld", "=", "[", "0", ",", "0", ",", "170", "]", "\n", "camYaw", "=", "0", "\n", "camPitch", "=", "15", "\n", "", "else", ":", "\n", "        ", "ground_plane", "=", "[", "0", ",", "-", "1.7", ",", "0", "]", "\n", "scene3d", "=", "True", "\n", "focalLength", "=", "28", "\n", "camPosWorld", "=", "[", "\n", "df", ".", "iloc", "[", "i", "]", "[", "'camX'", "]", ",", "\n", "df", ".", "iloc", "[", "i", "]", "[", "'camY'", "]", ",", "\n", "df", ".", "iloc", "[", "i", "]", "[", "'camZ'", "]", "]", "\n", "camYaw", "=", "df", ".", "iloc", "[", "i", "]", "[", "'camYaw'", "]", "\n", "camPitch", "=", "0", "\n", "\n", "", "if", "meanPose", ":", "\n", "        ", "yawSMPL", "=", "0", "\n", "trans3d", "=", "[", "0", ",", "0", ",", "0", "]", "\n", "", "else", ":", "\n", "        ", "yawSMPL", "=", "df", ".", "iloc", "[", "i", "]", "[", "'Yaw'", "]", "[", "pNum", "]", "\n", "trans3d", "=", "[", "df", ".", "iloc", "[", "i", "]", "[", "'X'", "]", "[", "pNum", "]", ",", "\n", "df", ".", "iloc", "[", "i", "]", "[", "'Y'", "]", "[", "pNum", "]", ",", "\n", "df", ".", "iloc", "[", "i", "]", "[", "'Z'", "]", "[", "pNum", "]", "]", "\n", "\n", "", "gt2d", ",", "gt3d_camCoord", "=", "project2d", "(", "joints3d", ",", "focalLength", "=", "focalLength", ",", "scene3d", "=", "scene3d", ",", "\n", "trans3d", "=", "trans3d", ",", "\n", "dslr_sens_width", "=", "dslr_sens_width", ",", "\n", "dslr_sens_height", "=", "dslr_sens_height", ",", "\n", "camPosWorld", "=", "camPosWorld", ",", "\n", "cy", "=", "imgHeight", "/", "2", ",", "\n", "cx", "=", "imgWidth", "/", "2", ",", "\n", "imgPath", "=", "imgPath", ",", "\n", "yawSMPL", "=", "yawSMPL", ",", "\n", "ground_plane", "=", "ground_plane", ",", "\n", "debug_path", "=", "debug_path", ",", "\n", "debug", "=", "args", ".", "debug", ",", "\n", "ind", "=", "i", ",", "\n", "pNum", "=", "pNum", ",", "\n", "meanPose", "=", "meanPose", ",", "camPitch", "=", "camPitch", ",", "camYaw", "=", "camYaw", ")", "\n", "return", "gt2d", ",", "gt3d_camCoord", "\n", "\n"]], "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.projection.project2d": [[166, 266], ["projection.focalLength_mm2px", "projection.focalLength_mm2px", "numpy.array", "projection.unreal2cv2", "projection.smpl2opencv", "cv2.Rodrigues", "cv2.Rodrigues", "numpy.concatenate", "numpy.zeros", "range", "numpy.array", "numpy.reshape", "numpy.array", "projection.unreal2cv2", "cv2.Rodrigues", "cv2.Rodrigues", "numpy.matmul", "numpy.array().reshape", "numpy.array().reshape", "numpy.matmul", "numpy.matmul", "projection.project_point", "projection.unreal2cv2", "numpy.array", "numpy.reshape", "numpy.array", "numpy.array", "numpy.diag", "numpy.zeros", "numpy.concatenate", "os.path.exists", "os.makedirs", "len", "numpy.reshape", "numpy.array", "numpy.array", "cv2.imread", "cm.tab20c", "matplotlib.figure", "plt.figure.add_subplot", "range", "numpy.array", "numpy.linspace", "fig.add_subplot.imshow", "fig.add_subplot.scatter", "savename.replace.replace", "matplotlib.savefig", "matplotlib.close", "imgPath.split", "os.path.join", "str"], "function", ["home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.projection.focalLength_mm2px", "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.projection.focalLength_mm2px", "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.projection.unreal2cv2", "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.projection.smpl2opencv", "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.projection.unreal2cv2", "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.projection.project_point", "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.projection.unreal2cv2"], ["", "def", "project2d", "(", "\n", "j3d", ",", "\n", "focalLength", ",", "\n", "scene3d", ",", "\n", "trans3d", ",", "\n", "dslr_sens_width", ",", "\n", "dslr_sens_height", ",", "\n", "camPosWorld", ",", "\n", "cy", ",", "\n", "cx", ",", "\n", "imgPath", ",", "\n", "yawSMPL", ",", "\n", "ground_plane", ",", "\n", "debug_path", ",", "\n", "debug", "=", "False", ",", "\n", "ind", "=", "-", "1", ",", "\n", "pNum", "=", "-", "1", ",", "\n", "meanPose", "=", "False", ",", "\n", "camPitch", "=", "0", ",", "\n", "camYaw", "=", "0", ")", ":", "\n", "\n", "    ", "focalLength_x", "=", "focalLength_mm2px", "(", "focalLength", ",", "dslr_sens_width", ",", "cx", ")", "\n", "focalLength_y", "=", "focalLength_mm2px", "(", "focalLength", ",", "dslr_sens_height", ",", "cy", ")", "\n", "\n", "camMat", "=", "np", ".", "array", "(", "[", "[", "focalLength_x", ",", "0", ",", "cx", "]", ",", "\n", "[", "0", ",", "focalLength_y", ",", "cy", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", "]", ")", "\n", "\n", "# camPosWorld and trans3d are in cm. Transform to meter", "\n", "trans3d", "=", "np", ".", "array", "(", "trans3d", ")", "/", "100", "\n", "trans3d", "=", "unreal2cv2", "(", "np", ".", "reshape", "(", "trans3d", ",", "(", "1", ",", "3", ")", ")", ")", "\n", "camPosWorld", "=", "np", ".", "array", "(", "camPosWorld", ")", "/", "100", "\n", "if", "scene3d", ":", "\n", "        ", "camPosWorld", "=", "unreal2cv2", "(", "\n", "np", ".", "reshape", "(", "\n", "camPosWorld", ",", "(", "1", ",", "3", ")", ")", ")", "+", "np", ".", "array", "(", "ground_plane", ")", "\n", "", "else", ":", "\n", "        ", "camPosWorld", "=", "unreal2cv2", "(", "np", ".", "reshape", "(", "camPosWorld", ",", "(", "1", ",", "3", ")", ")", ")", "\n", "\n", "# get points in camera coordinate system", "\n", "", "j3d", "=", "smpl2opencv", "(", "j3d", ")", "\n", "\n", "# scans have a 90deg rotation, but for mean pose from vposer there is no", "\n", "# such rotation", "\n", "if", "meanPose", ":", "\n", "        ", "rotMat", ",", "_", "=", "cv2", ".", "Rodrigues", "(", "\n", "np", ".", "array", "(", "[", "[", "0", ",", "(", "yawSMPL", ")", "/", "180", "*", "np", ".", "pi", ",", "0", "]", "]", ",", "dtype", "=", "float", ")", ")", "\n", "", "else", ":", "\n", "        ", "rotMat", ",", "_", "=", "cv2", ".", "Rodrigues", "(", "\n", "np", ".", "array", "(", "[", "[", "0", ",", "(", "(", "yawSMPL", "-", "90", ")", "/", "180", ")", "*", "np", ".", "pi", ",", "0", "]", "]", ",", "dtype", "=", "float", ")", ")", "\n", "\n", "", "j3d", "=", "np", ".", "matmul", "(", "rotMat", ",", "j3d", ".", "T", ")", ".", "T", "\n", "j3d", "=", "j3d", "+", "trans3d", "\n", "\n", "camera_rotationMatrix", ",", "_", "=", "cv2", ".", "Rodrigues", "(", "\n", "np", ".", "array", "(", "[", "0", ",", "(", "(", "-", "camYaw", ")", "/", "180", ")", "*", "np", ".", "pi", ",", "0", "]", ")", ".", "reshape", "(", "3", ",", "1", ")", ")", "\n", "camera_rotationMatrix2", ",", "_", "=", "cv2", ".", "Rodrigues", "(", "\n", "np", ".", "array", "(", "[", "camPitch", "/", "180", "*", "np", ".", "pi", ",", "0", ",", "0", "]", ")", ".", "reshape", "(", "3", ",", "1", ")", ")", "\n", "\n", "j3d_new", "=", "np", ".", "matmul", "(", "camera_rotationMatrix", ",", "j3d", ".", "T", "-", "camPosWorld", ".", "T", ")", ".", "T", "\n", "j3d_new", "=", "np", ".", "matmul", "(", "camera_rotationMatrix2", ",", "j3d_new", ".", "T", ")", ".", "T", "\n", "\n", "RT", "=", "np", ".", "concatenate", "(", "(", "np", ".", "diag", "(", "[", "1.", ",", "1.", ",", "1.", "]", ")", ",", "np", ".", "zeros", "(", "(", "3", ",", "1", ")", ")", ")", ",", "axis", "=", "1", ")", "\n", "j2d", "=", "np", ".", "zeros", "(", "(", "j3d_new", ".", "shape", "[", "0", "]", ",", "2", ")", ")", "\n", "for", "i", "in", "range", "(", "j3d_new", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "j2d", "[", "i", ",", ":", "]", "=", "project_point", "(", "np", ".", "concatenate", "(", "\n", "[", "j3d_new", "[", "i", ",", ":", "]", ",", "np", ".", "array", "(", "[", "1", "]", ")", "]", ")", ",", "RT", ",", "camMat", ")", "\n", "\n", "", "if", "debug", ":", "\n", "        ", "import", "matplotlib", ".", "cm", "as", "cm", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "debug_path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "debug_path", ")", "\n", "\n", "", "if", "len", "(", "j2d", ")", "<", "200", ":", "# No rendering for verts", "\n", "            ", "if", "not", "(", "imgPath", "is", "None", ")", ":", "\n", "                ", "img", "=", "cv2", ".", "imread", "(", "imgPath", ")", "\n", "img", "=", "img", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "colors", "=", "cm", ".", "tab20c", "(", "np", ".", "linspace", "(", "0", ",", "1", ",", "25", ")", ")", "\n", "fig", "=", "plt", ".", "figure", "(", "dpi", "=", "300", ")", "\n", "ax", "=", "fig", ".", "add_subplot", "(", "111", ")", "\n", "if", "not", "(", "imgPath", "is", "None", ")", ":", "\n", "                    ", "ax", ".", "imshow", "(", "img", ")", "\n", "", "for", "i", "in", "range", "(", "22", ")", ":", "\n", "                    ", "ax", ".", "scatter", "(", "j2d", "[", "i", ",", "0", "]", ",", "j2d", "[", "i", ",", "1", "]", ",", "c", "=", "colors", "[", "i", "]", ",", "s", "=", "0.1", ")", "\n", "#ax.scatter(j2d[i,0], j2d[i,1], c=np.array([1,0,0]), s=0.1)", "\n", "# ax.text(j2d[i,0], j2d[i,1], str(i))", "\n", "# plt.show()", "\n", "\n", "", "if", "not", "(", "imgPath", "is", "None", ")", ":", "\n", "                    ", "savename", "=", "imgPath", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "savename", "=", "savename", ".", "replace", "(", "'.pkl'", ",", "'.jpg'", ")", "\n", "plt", ".", "savefig", "(", "\n", "os", ".", "path", ".", "join", "(", "\n", "debug_path", ",", "\n", "'image'", "+", "\n", "str", "(", "pNum", ")", "+", "\n", "savename", ")", ")", "\n", "plt", ".", "close", "(", "'all'", ")", "\n", "\n", "", "", "", "", "return", "j2d", ",", "j3d_new", "\n", "", ""]], "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.compute_average_error.compute_prf1": [[37, 47], ["len", "round", "round", "round"], "function", ["None"], ["def", "compute_prf1", "(", "count", ",", "miss", ",", "num_fp", ")", ":", "\n", "    ", "if", "count", "==", "0", ":", "\n", "        ", "return", "0", ",", "0", ",", "0", "\n", "", "all_tp", "=", "count", "-", "miss", "\n", "all_fp", "=", "len", "(", "num_fp", ")", "\n", "all_fn", "=", "miss", "\n", "all_f1_score", "=", "round", "(", "all_tp", "/", "(", "all_tp", "+", "0.5", "*", "(", "all_fp", "+", "all_fn", ")", ")", ",", "2", ")", "\n", "all_recall", "=", "round", "(", "all_tp", "/", "(", "all_tp", "+", "all_fn", ")", ",", "2", ")", "\n", "all_precision", "=", "round", "(", "all_tp", "/", "(", "all_tp", "+", "all_fp", ")", ",", "2", ")", "\n", "return", "all_precision", ",", "all_recall", ",", "all_f1_score", "\n", "\n"]], "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.compute_average_error.create_normalized_df": [[49, 72], ["df_without_miss.groupby().agg.reset_index", "df_without_miss.groupby().agg.columns.droplevel", "df.groupby().agg.reset_index", "df.groupby().agg.columns.droplevel", "df_without_miss[].div", "pandas.cut", "df_without_miss.groupby().agg.groupby().agg", "df.groupby().agg", "pandas.cut", "df_without_miss.groupby().agg.groupby().agg", "df.groupby().agg", "numpy.array", "numpy.array", "df_without_miss.groupby().agg.groupby", "df.groupby", "df_without_miss.groupby().agg.groupby", "df.groupby"], "function", ["None"], ["", "def", "create_normalized_df", "(", "df", ",", "flag", "=", "'occ'", ")", ":", "\n", "\n", "    ", "if", "flag", "==", "'occ'", ":", "\n", "        ", "df", "[", "'occ_bins'", "]", "=", "pd", ".", "cut", "(", "np", ".", "array", "(", "df", ".", "iloc", "[", ":", ",", "0", "]", ")", ",", "occ_bins", ")", "\n", "df_without_miss", "=", "df", ".", "loc", "[", "df", "[", "'Miss'", "]", "==", "0", "]", "\n", "df_without_miss", "=", "df_without_miss", ".", "groupby", "(", "[", "'occ_bins'", "]", ")", ".", "agg", "(", "[", "'mean'", "]", ")", "\n", "df_miss_percentage", "=", "df", ".", "groupby", "(", "[", "'occ_bins'", "]", ")", ".", "agg", "(", "[", "'mean'", "]", ")", "\n", "", "if", "flag", "==", "'ori'", ":", "\n", "        ", "df", "[", "'ori_bins'", "]", "=", "pd", ".", "cut", "(", "np", ".", "array", "(", "df", ".", "iloc", "[", ":", ",", "0", "]", ")", ",", "ori_bins", ")", "\n", "df_without_miss", "=", "df", ".", "loc", "[", "df", "[", "'Miss'", "]", "==", "0", "]", "\n", "df_without_miss", "=", "df_without_miss", ".", "groupby", "(", "[", "'ori_bins'", "]", ")", ".", "agg", "(", "[", "'mean'", "]", ")", "\n", "df_miss_percentage", "=", "df", ".", "groupby", "(", "[", "'ori_bins'", "]", ")", ".", "agg", "(", "[", "'mean'", "]", ")", "\n", "\n", "", "df_without_miss", ".", "reset_index", "(", "inplace", "=", "True", ")", "\n", "df_without_miss", ".", "columns", "=", "df_without_miss", ".", "columns", ".", "droplevel", "(", "1", ")", "\n", "\n", "df_miss_percentage", ".", "reset_index", "(", "inplace", "=", "True", ")", "\n", "df_miss_percentage", ".", "columns", "=", "df_miss_percentage", ".", "columns", ".", "droplevel", "(", "1", ")", "\n", "columns_to_divide", "=", "[", "'body-MPJPE'", ",", "'body-MVE'", "]", "\n", "df_without_miss", "[", "columns_to_divide", "]", "=", "(", "\n", "df_without_miss", "[", "columns_to_divide", "]", ".", "div", "(", "\n", "1", "-", "df_miss_percentage", "[", "'Miss'", "]", ",", "axis", "=", "0", ")", ")", "\n", "return", "df_without_miss", "\n", "\n"]], "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.compute_average_error.create_unnormalized_df": [[74, 96], ["df.loc[].copy", "df_new.groupby().agg.reset_index", "df_new.groupby().agg.columns.droplevel", "pandas.cut", "df_new.groupby().agg.groupby().agg", "pandas.cut", "df_new.groupby().agg.groupby().agg", "pandas.cut", "df_new.groupby().agg.groupby().agg", "pandas.cut", "df_new.groupby().agg.groupby().agg", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "df_new.groupby().agg.groupby", "df_new.groupby().agg.groupby", "df_new.groupby().agg.groupby", "df_new.groupby().agg.groupby"], "function", ["None"], ["", "def", "create_unnormalized_df", "(", "df", ",", "imgWidth", ",", "flag", "=", "'occ'", ")", ":", "\n", "    ", "df_new", "=", "df", ".", "loc", "[", "df", "[", "'Miss'", "]", "==", "0", "]", ".", "copy", "(", ")", "\n", "\n", "if", "flag", "==", "'occ'", ":", "\n", "        ", "df_new", "[", "'occ_bins'", "]", "=", "pd", ".", "cut", "(", "np", ".", "array", "(", "df_new", ".", "iloc", "[", ":", ",", "0", "]", ")", ",", "occ_bins", ")", "\n", "df_new", "=", "df_new", ".", "groupby", "(", "[", "'occ_bins'", "]", ")", ".", "agg", "(", "[", "'mean'", "]", ")", "\n", "\n", "", "if", "flag", "==", "'ori'", ":", "\n", "        ", "df_new", "[", "'ori_bins'", "]", "=", "pd", ".", "cut", "(", "np", ".", "array", "(", "df_new", ".", "iloc", "[", ":", ",", "0", "]", ")", ",", "ori_bins", ")", "\n", "df_new", "=", "df_new", ".", "groupby", "(", "[", "'ori_bins'", "]", ")", ".", "agg", "(", "[", "'mean'", "]", ")", "\n", "\n", "", "if", "flag", "==", "'X'", "and", "imgWidth", "==", "3840", ":", "\n", "        ", "df_new", "[", "'x_bins'", "]", "=", "pd", ".", "cut", "(", "np", ".", "array", "(", "df_new", ".", "iloc", "[", ":", ",", "0", "]", ")", ",", "x_bins", ")", "\n", "df_new", "=", "df_new", ".", "groupby", "(", "[", "'x_bins'", "]", ")", ".", "agg", "(", "[", "'mean'", "]", ")", "\n", "\n", "", "if", "flag", "==", "'X'", "and", "imgWidth", "==", "1280", ":", "\n", "        ", "df_new", "[", "'x_bins'", "]", "=", "pd", ".", "cut", "(", "np", ".", "array", "(", "df_new", ".", "iloc", "[", ":", ",", "0", "]", ")", ",", "x_bins_1280", ")", "\n", "df_new", "=", "df_new", ".", "groupby", "(", "[", "'x_bins'", "]", ")", ".", "agg", "(", "[", "'mean'", "]", ")", "\n", "\n", "", "df_new", ".", "reset_index", "(", "inplace", "=", "True", ")", "\n", "df_new", ".", "columns", "=", "df_new", ".", "columns", ".", "droplevel", "(", "1", ")", "\n", "return", "df_new", "\n", "\n"]], "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.compute_average_error.plot_x_error": [[98, 127], ["seaborn.set", "seaborn.catplot", "sns.catplot.fig.set_size_inches", "sns.catplot.axes.flatten", "axes[].set_xlabel", "axes[].set_ylabel", "sns.catplot.set_xticklabels", "sns.catplot.set_yticklabels", "axes[].set_title", "axes[].legend", "matplotlib.savefig"], "function", ["None"], ["", "def", "plot_x_error", "(", "df", ",", "x", ",", "y", ",", "xlabel", ",", "ylabel", ",", "title", ",", "outfile", ")", ":", "\n", "\n", "    ", "sns", ".", "set", "(", "style", "=", "\"whitegrid\"", ")", "\n", "\n", "ax", "=", "sns", ".", "catplot", "(", "x", "=", "x", ",", "y", "=", "y", ",", "data", "=", "df", ",", "kind", "=", "'bar'", ")", "\n", "ax", ".", "fig", ".", "set_size_inches", "(", "20", ",", "10", ")", "\n", "\n", "axes", "=", "ax", ".", "axes", ".", "flatten", "(", ")", "\n", "axes", "[", "0", "]", ".", "set_xlabel", "(", "xlabel", "=", "xlabel", ",", "fontsize", "=", "20", ")", "\n", "axes", "[", "0", "]", ".", "set_ylabel", "(", "ylabel", "=", "ylabel", ",", "fontsize", "=", "20", ")", "\n", "ax", ".", "set_xticklabels", "(", "[", "'0-10'", ",", "\n", "'10-20'", ",", "\n", "'20-30'", ",", "\n", "'30-40'", ",", "\n", "'40-50'", ",", "\n", "'50-60'", ",", "\n", "'60-70'", ",", "\n", "'70-80'", ",", "\n", "'80-90'", ",", "\n", "'90-100'", "]", ",", "\n", "rotation", "=", "'horizontal'", ",", "\n", "fontsize", "=", "20", ")", "\n", "ax", ".", "set_yticklabels", "(", "\n", "rotation", "=", "'horizontal'", ",", "fontsize", "=", "20", ")", "\n", "# ax.set_yticklabels(['20', '40', '60', '70', '80', '100', '120', '140','160'],", "\n", "#                    rotation='horizontal',fontsize=30)", "\n", "axes", "[", "0", "]", ".", "set_title", "(", "title", ",", "fontsize", "=", "20", ")", "\n", "axes", "[", "0", "]", ".", "legend", "(", "loc", "=", "'upper left'", ",", "fontsize", "=", "20", ")", "\n", "plt", ".", "savefig", "(", "outfile", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.compute_average_error.plot_occ_error": [[159, 185], ["seaborn.set", "seaborn.catplot", "sns.catplot.fig.set_size_inches", "sns.catplot.axes.flatten", "axes[].set_xlabel", "axes[].set_ylabel", "sns.catplot.set_xticklabels", "sns.catplot.set_yticklabels", "axes[].set_title", "axes[].legend", "matplotlib.savefig"], "function", ["None"], ["", "def", "plot_occ_error", "(", "df", ",", "x", ",", "y", ",", "xlabel", ",", "ylabel", ",", "title", ",", "outfile", ")", ":", "\n", "\n", "    ", "sns", ".", "set", "(", "style", "=", "\"whitegrid\"", ")", "\n", "\n", "ax", "=", "sns", ".", "catplot", "(", "x", "=", "x", ",", "y", "=", "y", ",", "data", "=", "df", ",", "kind", "=", "'bar'", ")", "\n", "ax", ".", "fig", ".", "set_size_inches", "(", "20", ",", "10", ")", "\n", "\n", "axes", "=", "ax", ".", "axes", ".", "flatten", "(", ")", "\n", "axes", "[", "0", "]", ".", "set_xlabel", "(", "xlabel", "=", "xlabel", ",", "fontsize", "=", "20", ")", "\n", "axes", "[", "0", "]", ".", "set_ylabel", "(", "ylabel", "=", "ylabel", ",", "fontsize", "=", "20", ")", "\n", "\n", "ax", ".", "set_xticklabels", "(", "[", "'0-10'", ",", "\n", "'10-20'", ",", "\n", "'20-30'", ",", "\n", "'30-40'", ",", "\n", "'40-50'", ",", "\n", "'50-60'", ",", "\n", "'60-70'", ",", "\n", "'70-80'", "]", ",", "\n", "rotation", "=", "'horizontal'", ",", "\n", "fontsize", "=", "20", ")", "\n", "ax", ".", "set_yticklabels", "(", "\n", "rotation", "=", "'horizontal'", ",", "fontsize", "=", "20", ")", "\n", "axes", "[", "0", "]", ".", "set_title", "(", "title", ",", "fontsize", "=", "20", ")", "\n", "axes", "[", "0", "]", ".", "legend", "(", "loc", "=", "'upper left'", ",", "fontsize", "=", "20", ")", "\n", "plt", ".", "savefig", "(", "outfile", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.compute_average_error.plot_ori_error": [[187, 212], ["seaborn.set", "seaborn.catplot", "sns.catplot.fig.set_size_inches", "sns.catplot.axes.flatten", "axes[].set_xlabel", "axes[].set_ylabel", "sns.catplot.set_xticklabels", "axes[].set_title", "axes[].legend", "matplotlib.savefig"], "function", ["None"], ["", "def", "plot_ori_error", "(", "df", ",", "x", ",", "y", ",", "xlabel", ",", "ylabel", ",", "title", ",", "outfile", ")", ":", "\n", "    ", "sns", ".", "set", "(", "style", "=", "\"whitegrid\"", ")", "\n", "\n", "ax", "=", "sns", ".", "catplot", "(", "x", "=", "x", ",", "y", "=", "y", ",", "data", "=", "df", ",", "kind", "=", "'bar'", ")", "\n", "ax", ".", "fig", ".", "set_size_inches", "(", "20", ",", "10", ")", "\n", "\n", "axes", "=", "ax", ".", "axes", ".", "flatten", "(", ")", "\n", "axes", "[", "0", "]", ".", "set_xlabel", "(", "xlabel", "=", "xlabel", ",", "fontsize", "=", "20", ")", "\n", "axes", "[", "0", "]", ".", "set_ylabel", "(", "ylabel", "=", "ylabel", ",", "fontsize", "=", "20", ")", "\n", "\n", "ax", ".", "set_xticklabels", "(", "[", "'0$\\\\degree$-45$\\\\degree$'", ",", "\n", "'45$\\\\degree$-90$\\\\degree$'", ",", "\n", "'90$\\\\degree$-135$\\\\degree$'", ",", "\n", "'135$\\\\degree$-180$\\\\degree$'", ",", "\n", "'180$\\\\degree$-225$\\\\degree$'", ",", "\n", "'225$\\\\degree$-270$\\\\degree$'", ",", "\n", "'270$\\\\degree$-315$\\\\degree$'", ",", "\n", "'315$\\\\degree$-360$\\\\degree$'", "]", ",", "\n", "rotation", "=", "45", ",", "\n", "fontsize", "=", "20", ")", "\n", "\n", "axes", "[", "0", "]", ".", "set_title", "(", "title", ",", "fontsize", "=", "20", ")", "\n", "axes", "[", "0", "]", ".", "legend", "(", "loc", "=", "'upper left'", ",", "fontsize", "=", "18", ")", "\n", "\n", "plt", ".", "savefig", "(", "outfile", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.compute_average_error.compute_avg_error": [[214, 633], ["range", "compute_average_error.compute_prf1", "pandas.DataFrame", "pandas.DataFrame", "pandas.DataFrame", "pandas.DataFrame", "pandas.DataFrame", "compute_average_error.create_unnormalized_df", "compute_average_error.create_unnormalized_df", "compute_average_error.create_unnormalized_df", "compute_average_error.create_normalized_df", "compute_average_error.create_normalized_df", "pd.DataFrame.to_pickle", "create_unnormalized_df.to_pickle", "create_unnormalized_df.to_pickle", "create_unnormalized_df.to_pickle", "create_normalized_df.to_pickle", "create_normalized_df.to_pickle", "compute_average_error.plot_occ_error", "compute_average_error.plot_ori_error", "compute_average_error.plot_x_error", "compute_average_error.plot_occ_error", "compute_average_error.plot_ori_error", "round", "round", "round", "compute_average_error.plot_occ_error", "compute_average_error.plot_ori_error", "compute_average_error.plot_occ_error", "compute_average_error.plot_ori_error", "round", "round", "round", "logging.info", "pickle.dump", "len", "compute_average_error.compute_prf1", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "occ_df_without_miss[].mean", "[].mean", "round", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "occ_df_without_miss[].mean", "[].mean", "round", "round", "round", "round", "round", "round", "round", "round", "round", "round", "round", "round", "round", "round", "round", "round", "round", "round", "round", "round", "round", "open", "enumerate", "range", "enumerate", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "os.path.join", "fp.append", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "df.columns.get_loc", "df.columns.get_loc", "abs", "occ_error.append", "ori_error.append", "x_error.append", "abs", "occ_error.append", "ori_error.append", "x_error.append", "lhand_joints_err.append", "rhand_joints_err.append", "face_joints_err.append", "lhand_verts_err.append", "rhand_verts_err.append", "face_verts_err.append", "df.columns.get_loc", "math.isnan", "logging.debug", "exit", "kid_lhand_joints_err.append", "kid_rhand_joints_err.append", "kid_face_joints_err.append", "kid_lhand_verts_err.append", "kid_rhand_verts_err.append", "kid_face_verts_err.append", "df.columns.get_loc", "df.columns.get_loc", "math.isnan", "logging.debug", "exit", "math.isnan", "df.columns.get_loc", "math.isnan", "df.columns.get_loc", "df.columns.get_loc", "df.columns.get_loc", "df.columns.get_loc", "df.columns.get_loc", "df.columns.get_loc", "df.columns.get_loc", "df.columns.get_loc", "df.columns.get_loc", "df.columns.get_loc", "df.columns.get_loc", "df.columns.get_loc", "df.columns.get_loc", "df.columns.get_loc", "df.columns.get_loc", "df.columns.get_loc", "df.columns.get_loc", "df.columns.get_loc", "df.columns.get_loc", "df.columns.get_loc", "df.columns.get_loc", "df.columns.get_loc", "df.columns.get_loc", "df.columns.get_loc", "df.columns.get_loc"], "function", ["home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.compute_average_error.compute_prf1", "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.compute_average_error.create_unnormalized_df", "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.compute_average_error.create_unnormalized_df", "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.compute_average_error.create_unnormalized_df", "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.compute_average_error.create_normalized_df", "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.compute_average_error.create_normalized_df", "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.compute_average_error.plot_occ_error", "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.compute_average_error.plot_ori_error", "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.compute_average_error.plot_x_error", "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.compute_average_error.plot_occ_error", "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.compute_average_error.plot_ori_error", "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.compute_average_error.plot_occ_error", "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.compute_average_error.plot_ori_error", "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.compute_average_error.plot_occ_error", "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.compute_average_error.plot_ori_error", "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.compute_average_error.compute_prf1"], ["", "def", "compute_avg_error", "(", "args", ",", "df", ")", ":", "\n", "    ", "total_miss_count", "=", "0", "\n", "total_count", "=", "0", "\n", "kid_miss_count", "=", "0", "\n", "kid_total_count", "=", "0", "\n", "lhand_joints_err", "=", "[", "]", "\n", "rhand_joints_err", "=", "[", "]", "\n", "lhand_verts_err", "=", "[", "]", "\n", "rhand_verts_err", "=", "[", "]", "\n", "face_joints_err", "=", "[", "]", "\n", "face_verts_err", "=", "[", "]", "\n", "kid_lhand_joints_err", "=", "[", "]", "\n", "kid_rhand_joints_err", "=", "[", "]", "\n", "kid_lhand_verts_err", "=", "[", "]", "\n", "kid_rhand_verts_err", "=", "[", "]", "\n", "kid_face_joints_err", "=", "[", "]", "\n", "kid_face_verts_err", "=", "[", "]", "\n", "fp", "=", "[", "]", "\n", "occ_error", "=", "[", "]", "\n", "ori_error", "=", "[", "]", "\n", "x_error", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "df", ")", ")", ":", "\n", "# If prediction is available for the image", "\n", "        ", "imgPath", "=", "df", ".", "iloc", "[", "i", ",", "df", ".", "columns", ".", "get_loc", "(", "'imgPath'", ")", "]", "\n", "if", "args", ".", "onlybfh", "and", "(", "'bfh'", "not", "in", "imgPath", "and", "'smplx'", "not", "in", "imgPath", ")", ":", "\n", "            ", "continue", "\n", "", "if", "df", ".", "iloc", "[", "i", ",", "df", ".", "columns", ".", "get_loc", "(", "'pred_path'", ")", "]", ":", "\n", "            ", "for", "j", ",", "valid", "in", "enumerate", "(", "\n", "df", ".", "iloc", "[", "i", ",", "df", ".", "columns", ".", "get_loc", "(", "'isValid'", ")", "]", ")", ":", "\n", "# If valid i.e. occlusion >0 and occlusion<90 percent", "\n", "                ", "if", "valid", ":", "\n", "# Get occlusion and orientation value for plotting", "\n", "                    ", "occ", "=", "df", ".", "iloc", "[", "i", ",", "df", ".", "columns", ".", "get_loc", "(", "'occlusion'", ")", "]", "[", "j", "]", "\n", "camYaw", "=", "df", ".", "iloc", "[", "i", "]", "[", "'camYaw'", "]", "\n", "if", "'YawLocal'", "in", "df", "and", "not", "math", ".", "isnan", "(", "\n", "df", ".", "iloc", "[", "i", "]", "[", "'YawLocal'", "]", "[", "j", "]", ")", ":", "\n", "                        ", "orient", "=", "(", "df", ".", "iloc", "[", "i", ",", "df", ".", "columns", ".", "get_loc", "(", "\n", "'YawLocal'", ")", "]", "[", "j", "]", "-", "90", "+", "22.5", "-", "camYaw", ")", "%", "360", "\n", "if", "orient", "<", "0", ":", "\n", "                            ", "orient", "+=", "360", "\n", "\n", "", "", "elif", "'Yaw'", "in", "df", "and", "not", "math", ".", "isnan", "(", "df", ".", "iloc", "[", "i", "]", "[", "'Yaw'", "]", "[", "j", "]", ")", ":", "\n", "                        ", "orient", "=", "(", "df", ".", "iloc", "[", "i", ",", "df", ".", "columns", ".", "get_loc", "(", "\n", "'Yaw'", ")", "]", "[", "j", "]", "-", "90", "+", "22.5", "-", "camYaw", ")", "%", "360", "\n", "if", "orient", "<", "0", ":", "\n", "                            ", "orient", "+=", "360", "\n", "", "", "else", ":", "\n", "                        ", "logging", ".", "debug", "(", "\n", "'either Yaw or YawLocal should be in the df'", ")", "\n", "exit", "(", "-", "1", ")", "\n", "\n", "", "kid", "=", "df", ".", "iloc", "[", "i", ",", "df", ".", "columns", ".", "get_loc", "(", "'kid'", ")", "]", "[", "j", "]", "\n", "miss", "=", "df", ".", "iloc", "[", "i", ",", "df", ".", "columns", ".", "get_loc", "(", "'miss_flag'", ")", "]", "[", "j", "]", "\n", "x_location", "=", "abs", "(", "df", ".", "iloc", "[", "i", ",", "df", ".", "columns", ".", "get_loc", "(", "\n", "'gt_joints_2d'", ")", "]", "[", "j", "]", "[", "0", ",", "0", "]", "-", "(", "args", ".", "imgWidth", "/", "2", ")", ")", "\n", "\n", "total_count", "+=", "1", "\n", "if", "kid", ":", "\n", "                        ", "kid_total_count", "+=", "1", "\n", "# Because kid are only in bfh data so hand and face can", "\n", "# be evaluted", "\n", "\n", "# Just store the miss count to divide by it in the end.", "\n", "", "if", "miss", "==", "1", ":", "\n", "                        ", "total_miss_count", "+=", "1", "\n", "if", "kid", ":", "\n", "                            ", "kid_miss_count", "+=", "1", "\n", "\n", "# Get error, will be empty for misses", "\n", "", "", "err_joints_body", "=", "df", ".", "iloc", "[", "i", ",", "\n", "df", ".", "columns", ".", "get_loc", "(", "'body-MPJPE'", ")", "]", "[", "j", "]", "\n", "if", "args", ".", "modeltype", "==", "'SMPLX'", ":", "\n", "                        ", "lhand_joints_err", ".", "append", "(", "\n", "scalar", "*", "df", ".", "iloc", "[", "i", ",", "df", ".", "columns", ".", "get_loc", "(", "'lhand-MPJPE'", ")", "]", "[", "j", "]", ")", "\n", "rhand_joints_err", ".", "append", "(", "\n", "scalar", "*", "df", ".", "iloc", "[", "i", ",", "df", ".", "columns", ".", "get_loc", "(", "'rhand-MPJPE'", ")", "]", "[", "j", "]", ")", "\n", "face_joints_err", ".", "append", "(", "\n", "scalar", "*", "df", ".", "iloc", "[", "i", ",", "df", ".", "columns", ".", "get_loc", "(", "'face-MPJPE'", ")", "]", "[", "j", "]", ")", "\n", "lhand_verts_err", ".", "append", "(", "\n", "scalar", "*", "df", ".", "iloc", "[", "i", ",", "df", ".", "columns", ".", "get_loc", "(", "'lhand-MVE'", ")", "]", "[", "j", "]", ")", "\n", "rhand_verts_err", ".", "append", "(", "\n", "scalar", "*", "df", ".", "iloc", "[", "i", ",", "df", ".", "columns", ".", "get_loc", "(", "'rhand-MVE'", ")", "]", "[", "j", "]", ")", "\n", "face_verts_err", ".", "append", "(", "\n", "scalar", "*", "df", ".", "iloc", "[", "i", ",", "df", ".", "columns", ".", "get_loc", "(", "'face-MVE'", ")", "]", "[", "j", "]", ")", "\n", "if", "kid", ":", "\n", "\n", "                            ", "kid_lhand_joints_err", ".", "append", "(", "\n", "scalar", "*", "df", ".", "iloc", "[", "i", ",", "df", ".", "columns", ".", "get_loc", "(", "'lhand-MPJPE'", ")", "]", "[", "j", "]", ")", "\n", "kid_rhand_joints_err", ".", "append", "(", "\n", "scalar", "*", "df", ".", "iloc", "[", "i", ",", "df", ".", "columns", ".", "get_loc", "(", "'rhand-MPJPE'", ")", "]", "[", "j", "]", ")", "\n", "kid_face_joints_err", ".", "append", "(", "\n", "scalar", "*", "df", ".", "iloc", "[", "i", ",", "df", ".", "columns", ".", "get_loc", "(", "'face-MPJPE'", ")", "]", "[", "j", "]", ")", "\n", "kid_lhand_verts_err", ".", "append", "(", "\n", "scalar", "*", "df", ".", "iloc", "[", "i", ",", "df", ".", "columns", ".", "get_loc", "(", "'lhand-MVE'", ")", "]", "[", "j", "]", ")", "\n", "kid_rhand_verts_err", ".", "append", "(", "\n", "scalar", "*", "df", ".", "iloc", "[", "i", ",", "df", ".", "columns", ".", "get_loc", "(", "'rhand-MVE'", ")", "]", "[", "j", "]", ")", "\n", "kid_face_verts_err", ".", "append", "(", "\n", "scalar", "*", "df", ".", "iloc", "[", "i", ",", "df", ".", "columns", ".", "get_loc", "(", "'face-MVE'", ")", "]", "[", "j", "]", ")", "\n", "\n", "", "", "err_verts_body", "=", "df", ".", "iloc", "[", "i", ",", "\n", "df", ".", "columns", ".", "get_loc", "(", "'body-MVE'", ")", "]", "[", "j", "]", "\n", "\n", "occ_error", ".", "append", "(", "[", "occ", ",", "scalar", "*", "err_joints_body", ",", "\n", "scalar", "*", "err_verts_body", ",", "kid", ",", "miss", "]", ")", "\n", "\n", "ori_error", ".", "append", "(", "[", "orient", ",", "scalar", "*", "err_joints_body", ",", "\n", "scalar", "*", "err_verts_body", ",", "kid", ",", "miss", "]", ")", "\n", "\n", "x_error", ".", "append", "(", "[", "x_location", ",", "scalar", "*", "err_joints_body", ",", "\n", "scalar", "*", "err_verts_body", ",", "kid", ",", "miss", "]", ")", "\n", "\n", "", "", "for", "j", "in", "range", "(", "df", ".", "iloc", "[", "i", ",", "df", ".", "columns", ".", "get_loc", "(", "'falsePositives'", ")", "]", ")", ":", "\n", "                ", "fp", ".", "append", "(", "df", ".", "iloc", "[", "i", ",", "df", ".", "columns", ".", "get_loc", "(", "'pred_path'", ")", "]", ")", "\n", "", "", "else", ":", "\n", "            ", "for", "j", ",", "valid", "in", "enumerate", "(", "\n", "df", ".", "iloc", "[", "i", ",", "df", ".", "columns", ".", "get_loc", "(", "'isValid'", ")", "]", ")", ":", "\n", "                ", "if", "valid", ":", "\n", "                    ", "miss", "=", "1", "\n", "total_count", "+=", "1", "\n", "total_miss_count", "+=", "1", "\n", "kid", "=", "df", ".", "iloc", "[", "i", ",", "df", ".", "columns", ".", "get_loc", "(", "'kid'", ")", "]", "[", "j", "]", "\n", "occ", "=", "df", ".", "iloc", "[", "i", ",", "df", ".", "columns", ".", "get_loc", "(", "'occlusion'", ")", "]", "[", "j", "]", "\n", "camYaw", "=", "df", ".", "iloc", "[", "i", "]", "[", "'camYaw'", "]", "\n", "if", "'YawLocal'", "in", "df", "and", "not", "math", ".", "isnan", "(", "\n", "df", ".", "iloc", "[", "i", "]", "[", "'YawLocal'", "]", "[", "j", "]", ")", ":", "\n", "                        ", "orient", "=", "(", "df", ".", "iloc", "[", "i", ",", "df", ".", "columns", ".", "get_loc", "(", "\n", "'YawLocal'", ")", "]", "[", "j", "]", "-", "90", "+", "22.5", "-", "camYaw", ")", "%", "360", "\n", "if", "orient", "<", "0", ":", "\n", "                            ", "orient", "+=", "360", "\n", "\n", "", "", "elif", "'Yaw'", "in", "df", "and", "not", "math", ".", "isnan", "(", "df", ".", "iloc", "[", "i", "]", "[", "'Yaw'", "]", "[", "j", "]", ")", ":", "\n", "                        ", "orient", "=", "(", "df", ".", "iloc", "[", "i", ",", "df", ".", "columns", ".", "get_loc", "(", "\n", "'Yaw'", ")", "]", "[", "j", "]", "-", "90", "+", "22.5", "-", "camYaw", ")", "%", "360", "\n", "if", "orient", "<", "0", ":", "\n", "                            ", "orient", "+=", "360", "\n", "", "", "else", ":", "\n", "                        ", "logging", ".", "debug", "(", "\n", "'either Yaw or YawLocal should be in the df'", ")", "\n", "exit", "(", "-", "1", ")", "\n", "\n", "", "x_location", "=", "abs", "(", "df", ".", "iloc", "[", "i", ",", "df", ".", "columns", ".", "get_loc", "(", "\n", "'gt_joints_2d'", ")", "]", "[", "j", "]", "[", "0", ",", "0", "]", "-", "(", "args", ".", "imgWidth", "/", "2", ")", ")", "\n", "if", "kid", ":", "\n", "                        ", "kid_total_count", "+=", "1", "\n", "kid_miss_count", "+=", "1", "\n", "", "occ_error", ".", "append", "(", "[", "occ", ",", "0", ",", "0", ",", "kid", ",", "miss", "]", ")", "\n", "ori_error", ".", "append", "(", "[", "orient", ",", "0", ",", "0", ",", "kid", ",", "miss", "]", ")", "\n", "x_error", ".", "append", "(", "[", "x_location", ",", "0", ",", "0", ",", "kid", ",", "miss", "]", ")", "\n", "\n", "", "", "", "", "precision", ",", "recall", ",", "f1", "=", "compute_prf1", "(", "total_count", ",", "total_miss_count", ",", "fp", ")", "\n", "if", "kid_total_count", "!=", "0", ":", "\n", "        ", "kid_precision", ",", "kid_recall", ",", "kid_f1", "=", "compute_prf1", "(", "\n", "kid_total_count", ",", "kid_miss_count", ",", "fp", ")", "\n", "", "else", ":", "\n", "        ", "kid_precision", ",", "kid_recall", ",", "kid_f1", "=", "'nan'", ",", "'nan'", ",", "'nan'", "\n", "\n", "", "occ_df", "=", "pd", ".", "DataFrame", "(", "\n", "occ_error", ",", "\n", "columns", "=", "[", "\n", "'occ (%)'", ",", "\n", "'body-MPJPE'", ",", "\n", "'body-MVE'", ",", "\n", "'Kid'", ",", "\n", "'Miss'", "]", ")", "\n", "ori_df", "=", "pd", ".", "DataFrame", "(", "\n", "ori_error", ",", "\n", "columns", "=", "[", "\n", "'orient'", ",", "\n", "'body-MPJPE'", ",", "\n", "'body-MVE'", ",", "\n", "'Kid'", ",", "\n", "'Miss'", "]", ")", "\n", "occ_df", "=", "pd", ".", "DataFrame", "(", "\n", "occ_error", ",", "\n", "columns", "=", "[", "\n", "'occ (%)'", ",", "\n", "'body-MPJPE'", ",", "\n", "'body-MVE'", ",", "\n", "'Kid'", ",", "\n", "'Miss'", "]", ")", "\n", "ori_df", "=", "pd", ".", "DataFrame", "(", "\n", "ori_error", ",", "\n", "columns", "=", "[", "\n", "'orient'", ",", "\n", "'body-MPJPE'", ",", "\n", "'body-MVE'", ",", "\n", "'Kid'", ",", "\n", "'Miss'", "]", ")", "\n", "x_df", "=", "pd", ".", "DataFrame", "(", "\n", "x_error", ",", "\n", "columns", "=", "[", "\n", "'X'", ",", "\n", "'body-MPJPE'", ",", "\n", "'body-MVE'", ",", "\n", "'Kid'", ",", "\n", "'Miss'", "]", ")", "\n", "mean_occ_df", "=", "create_unnormalized_df", "(", "occ_df", ",", "args", ".", "imgWidth", ",", "flag", "=", "'occ'", ")", "\n", "mean_x_df", "=", "create_unnormalized_df", "(", "x_df", ",", "args", ".", "imgWidth", ",", "flag", "=", "'X'", ")", "\n", "mean_ori_df", "=", "create_unnormalized_df", "(", "ori_df", ",", "args", ".", "imgWidth", ",", "flag", "=", "'ori'", ")", "\n", "norm_occ_df", "=", "create_normalized_df", "(", "occ_df", ",", "flag", "=", "'occ'", ")", "\n", "norm_ori_df", "=", "create_normalized_df", "(", "ori_df", ",", "flag", "=", "'ori'", ")", "\n", "occ_df", ".", "to_pickle", "(", "\n", "os", ".", "path", ".", "join", "(", "\n", "args", ".", "result_savePath", ",", "\n", "args", ".", "baseline", "+", "\n", "'_miss.npy'", ")", ")", "\n", "mean_x_df", ".", "to_pickle", "(", "\n", "os", ".", "path", ".", "join", "(", "\n", "args", ".", "result_savePath", ",", "\n", "args", ".", "baseline", "+", "\n", "'_mean_x_df.npy'", ")", ")", "\n", "mean_occ_df", ".", "to_pickle", "(", "\n", "os", ".", "path", ".", "join", "(", "\n", "args", ".", "result_savePath", ",", "\n", "args", ".", "baseline", "+", "\n", "'_mean_occ_df.npy'", ")", ")", "\n", "mean_ori_df", ".", "to_pickle", "(", "\n", "os", ".", "path", ".", "join", "(", "\n", "args", ".", "result_savePath", ",", "\n", "args", ".", "baseline", "+", "\n", "'_mean_ori_df.npy'", ")", ")", "\n", "norm_occ_df", ".", "to_pickle", "(", "\n", "os", ".", "path", ".", "join", "(", "\n", "args", ".", "result_savePath", ",", "\n", "args", ".", "baseline", "+", "\n", "'_norm_occ_df.npy'", ")", ")", "\n", "norm_ori_df", ".", "to_pickle", "(", "\n", "os", ".", "path", ".", "join", "(", "\n", "args", ".", "result_savePath", ",", "\n", "args", ".", "baseline", "+", "\n", "'_norm_ori_df.npy'", ")", ")", "\n", "\n", "plot_occ_error", "(", "\n", "mean_occ_df", ",", "\n", "'occ (%)'", ",", "\n", "'body-MPJPE'", ",", "\n", "'occlusion (%)'", ",", "\n", "'body-MPJPE'", ",", "\n", "args", ".", "baseline", ",", "\n", "os", ".", "path", ".", "join", "(", "\n", "args", ".", "result_savePath", ",", "\n", "args", ".", "baseline", "+", "\n", "'_occlusion_mpjpe.png'", ")", ")", "\n", "\n", "plot_ori_error", "(", "\n", "mean_ori_df", ",", "\n", "'orient'", ",", "\n", "'body-MPJPE'", ",", "\n", "'orientation'", ",", "\n", "'body-MPJPE'", ",", "\n", "args", ".", "baseline", ",", "\n", "os", ".", "path", ".", "join", "(", "\n", "args", ".", "result_savePath", ",", "\n", "args", ".", "baseline", "+", "\n", "'_orientation_mpjpe.png'", ")", ")", "\n", "\n", "plot_x_error", "(", "\n", "mean_x_df", ",", "\n", "'X'", ",", "\n", "'body-MPJPE'", ",", "\n", "'Img (X%)'", ",", "\n", "'body-MPJPE'", ",", "\n", "args", ".", "baseline", ",", "\n", "os", ".", "path", ".", "join", "(", "\n", "args", ".", "result_savePath", ",", "\n", "args", ".", "baseline", "+", "\n", "'_xlocation_mpjpe.png'", ")", ")", "\n", "\n", "plot_occ_error", "(", "\n", "norm_occ_df", ",", "\n", "'occ (%)'", ",", "\n", "'body-MPJPE'", ",", "\n", "'occlusion (%)'", ",", "\n", "'body-NMJE'", ",", "\n", "args", ".", "baseline", ",", "\n", "os", ".", "path", ".", "join", "(", "\n", "args", ".", "result_savePath", ",", "\n", "args", ".", "baseline", "+", "\n", "'_occlusion_nmje.png'", ")", ")", "\n", "\n", "plot_ori_error", "(", "\n", "norm_ori_df", ",", "\n", "'orient'", ",", "\n", "'body-MPJPE'", ",", "\n", "'orientation'", ",", "\n", "'body-NMJE'", ",", "\n", "args", ".", "baseline", ",", "\n", "os", ".", "path", ".", "join", "(", "\n", "args", ".", "result_savePath", ",", "\n", "args", ".", "baseline", "+", "\n", "'_orientation_nmje.png'", ")", ")", "\n", "\n", "occ_df_without_miss", "=", "occ_df", "[", "occ_df", "[", "'Miss'", "]", "==", "0", "]", "\n", "error_dict", "=", "{", "}", "\n", "error_dict", "[", "'precision'", "]", "=", "precision", "\n", "error_dict", "[", "'recall'", "]", "=", "recall", "\n", "error_dict", "[", "'f1'", "]", "=", "f1", "\n", "error_dict", "[", "'kid_precision'", "]", "=", "kid_precision", "\n", "error_dict", "[", "'kid_recall'", "]", "=", "kid_recall", "\n", "error_dict", "[", "'kid_f1'", "]", "=", "kid_f1", "\n", "error_dict", "[", "'body-MPJPE'", "]", "=", "round", "(", "\n", "occ_df_without_miss", "[", "'body-MPJPE'", "]", ".", "mean", "(", ")", ",", "1", ")", "\n", "error_dict", "[", "'kid-body-MPJPE'", "]", "=", "round", "(", "\n", "occ_df_without_miss", "[", "occ_df_without_miss", "[", "'Kid'", "]", "==", "1", "]", "[", "'body-MPJPE'", "]", ".", "mean", "(", ")", ",", "1", ")", "\n", "error_dict", "[", "'body-NMJE'", "]", "=", "round", "(", "error_dict", "[", "'body-MPJPE'", "]", "/", "(", "f1", ")", ",", "1", ")", "\n", "if", "kid_total_count", "!=", "0", ":", "\n", "        ", "error_dict", "[", "'kid-body-NMJE'", "]", "=", "round", "(", "\n", "error_dict", "[", "'kid-body-MPJPE'", "]", "/", "(", "kid_f1", ")", ",", "1", ")", "\n", "", "else", ":", "\n", "        ", "error_dict", "[", "'kid-body-NMJE'", "]", "=", "'nan'", "\n", "\n", "\n", "", "plot_occ_error", "(", "\n", "mean_occ_df", ",", "\n", "'occ (%)'", ",", "\n", "'body-MVE'", ",", "\n", "'occlusion (%)'", ",", "\n", "'body-MVE'", ",", "\n", "args", ".", "baseline", ",", "\n", "os", ".", "path", ".", "join", "(", "\n", "args", ".", "result_savePath", ",", "\n", "args", ".", "baseline", "+", "\n", "'_occlusion_mve.png'", ")", ")", "\n", "plot_ori_error", "(", "\n", "mean_ori_df", ",", "\n", "'orient'", ",", "\n", "'body-MVE'", ",", "\n", "'orientation'", ",", "\n", "'body-MVE'", ",", "\n", "args", ".", "baseline", ",", "\n", "os", ".", "path", ".", "join", "(", "\n", "args", ".", "result_savePath", ",", "\n", "args", ".", "baseline", "+", "\n", "'_orientation_mve.png'", ")", ")", "\n", "\n", "plot_occ_error", "(", "\n", "norm_occ_df", ",", "\n", "'occ (%)'", ",", "\n", "'body-MVE'", ",", "\n", "'occlusion (%)'", ",", "\n", "'body-NMVE'", ",", "\n", "args", ".", "baseline", ",", "\n", "os", ".", "path", ".", "join", "(", "\n", "args", ".", "result_savePath", ",", "\n", "args", ".", "baseline", "+", "\n", "'_occlusion_nmve.png'", ")", ")", "\n", "\n", "plot_ori_error", "(", "\n", "norm_ori_df", ",", "\n", "'orient'", ",", "\n", "'body-MVE'", ",", "\n", "'orientation'", ",", "\n", "'body-NMVE'", ",", "\n", "args", ".", "baseline", ",", "\n", "os", ".", "path", ".", "join", "(", "\n", "args", ".", "result_savePath", ",", "\n", "args", ".", "baseline", "+", "\n", "'_orientation_nmve.png'", ")", ")", "\n", "\n", "error_dict", "[", "'body-MVE'", "]", "=", "round", "(", "occ_df_without_miss", "[", "'body-MVE'", "]", ".", "mean", "(", ")", ",", "1", ")", "\n", "error_dict", "[", "'kid-body-MVE'", "]", "=", "round", "(", "\n", "occ_df_without_miss", "[", "occ_df_without_miss", "[", "'Kid'", "]", "==", "1", "]", "[", "'body-MVE'", "]", ".", "mean", "(", ")", ",", "1", ")", "\n", "error_dict", "[", "'body-NMVE'", "]", "=", "round", "(", "error_dict", "[", "'body-MVE'", "]", "/", "(", "f1", ")", ",", "1", ")", "\n", "if", "kid_total_count", "!=", "0", ":", "\n", "        ", "error_dict", "[", "'kid-body-NMVE'", "]", "=", "round", "(", "\n", "error_dict", "[", "'kid-body-MVE'", "]", "/", "(", "kid_f1", ")", ",", "1", ")", "\n", "", "else", ":", "\n", "        ", "error_dict", "[", "'kid-body-NMVE'", "]", "=", "'nan'", "\n", "\n", "", "if", "args", ".", "modeltype", "==", "'SMPLX'", ":", "\n", "        ", "error_dict", "[", "'lhand-MPJPE'", "]", "=", "round", "(", "\n", "np", ".", "mean", "(", "np", ".", "array", "(", "lhand_joints_err", ")", ")", ",", "1", ")", "\n", "error_dict", "[", "'rhand-MPJPE'", "]", "=", "round", "(", "\n", "np", ".", "mean", "(", "np", ".", "array", "(", "rhand_joints_err", ")", ")", ",", "1", ")", "\n", "error_dict", "[", "'face-MPJPE'", "]", "=", "round", "(", "np", ".", "mean", "(", "np", ".", "array", "(", "face_joints_err", ")", ")", ",", "1", ")", "\n", "error_dict", "[", "'lhand-MVE'", "]", "=", "round", "(", "np", ".", "mean", "(", "np", ".", "array", "(", "lhand_verts_err", ")", ")", ",", "1", ")", "\n", "error_dict", "[", "'rhand-MVE'", "]", "=", "round", "(", "np", ".", "mean", "(", "np", ".", "array", "(", "rhand_verts_err", ")", ")", ",", "1", ")", "\n", "error_dict", "[", "'face-MVE'", "]", "=", "round", "(", "np", ".", "mean", "(", "np", ".", "array", "(", "face_verts_err", ")", ")", ",", "1", ")", "\n", "error_dict", "[", "'fullbody-MPJPE'", "]", "=", "round", "(", "error_dict", "[", "'body-MPJPE'", "]", "+", "(", "1", "/", "3", ")", "*", "error_dict", "[", "'lhand-MPJPE'", "]", "+", "(", "\n", "1", "/", "3", ")", "*", "error_dict", "[", "'rhand-MPJPE'", "]", "+", "(", "1", "/", "3", ")", "*", "error_dict", "[", "'face-MPJPE'", "]", ",", "1", ")", "\n", "error_dict", "[", "'fullbody-MVE'", "]", "=", "round", "(", "error_dict", "[", "'body-MVE'", "]", "+", "(", "1", "/", "3", ")", "*", "error_dict", "[", "'lhand-MVE'", "]", "+", "(", "\n", "1", "/", "3", ")", "*", "error_dict", "[", "'rhand-MVE'", "]", "+", "(", "1", "/", "3", ")", "*", "error_dict", "[", "'face-MVE'", "]", ",", "1", ")", "\n", "error_dict", "[", "'fullbody-NMJE'", "]", "=", "round", "(", "\n", "error_dict", "[", "'fullbody-MPJPE'", "]", "/", "(", "f1", ")", ",", "1", ")", "\n", "error_dict", "[", "'fullbody-NMVE'", "]", "=", "round", "(", "\n", "error_dict", "[", "'fullbody-MVE'", "]", "/", "(", "f1", ")", ",", "1", ")", "\n", "\n", "# All kids are in bfh", "\n", "error_dict", "[", "'kid-lhand-MPJPE'", "]", "=", "round", "(", "\n", "np", ".", "mean", "(", "np", ".", "array", "(", "kid_lhand_joints_err", ")", ")", ",", "1", ")", "\n", "error_dict", "[", "'kid-rhand-MPJPE'", "]", "=", "round", "(", "\n", "np", ".", "mean", "(", "np", ".", "array", "(", "kid_rhand_joints_err", ")", ")", ",", "1", ")", "\n", "error_dict", "[", "'kid-face-MPJPE'", "]", "=", "round", "(", "\n", "np", ".", "mean", "(", "np", ".", "array", "(", "kid_face_joints_err", ")", ")", ",", "1", ")", "\n", "error_dict", "[", "'kid-lhand-MVE'", "]", "=", "round", "(", "\n", "np", ".", "mean", "(", "np", ".", "array", "(", "kid_lhand_verts_err", ")", ")", ",", "1", ")", "\n", "error_dict", "[", "'kid-rhand-MVE'", "]", "=", "round", "(", "\n", "np", ".", "mean", "(", "np", ".", "array", "(", "kid_rhand_verts_err", ")", ")", ",", "1", ")", "\n", "error_dict", "[", "'kid-face-MVE'", "]", "=", "round", "(", "\n", "np", ".", "mean", "(", "np", ".", "array", "(", "kid_face_verts_err", ")", ")", ",", "1", ")", "\n", "error_dict", "[", "'kid-fullbody-MPJPE'", "]", "=", "round", "(", "error_dict", "[", "'kid-body-MPJPE'", "]", "+", "(", "1", "/", "3", ")", "*", "error_dict", "[", "'kid-lhand-MPJPE'", "]", "+", "(", "\n", "1", "/", "3", ")", "*", "error_dict", "[", "'kid-rhand-MPJPE'", "]", "+", "(", "1", "/", "3", ")", "*", "error_dict", "[", "'kid-face-MPJPE'", "]", ",", "1", ")", "\n", "error_dict", "[", "'kid-fullbody-MVE'", "]", "=", "round", "(", "error_dict", "[", "'kid-body-MVE'", "]", "+", "(", "1", "/", "3", ")", "*", "error_dict", "[", "'kid-lhand-MVE'", "]", "+", "(", "\n", "1", "/", "3", ")", "*", "error_dict", "[", "'kid-rhand-MVE'", "]", "+", "(", "1", "/", "3", ")", "*", "error_dict", "[", "'kid-face-MVE'", "]", ",", "1", ")", "\n", "error_dict", "[", "'kid-fullbody-NMJE'", "]", "=", "round", "(", "\n", "error_dict", "[", "'kid-fullbody-MPJPE'", "]", "/", "(", "f1", ")", ",", "1", ")", "\n", "error_dict", "[", "'kid-fullbody-NMVE'", "]", "=", "round", "(", "\n", "error_dict", "[", "'kid-fullbody-MVE'", "]", "/", "(", "f1", ")", ",", "1", ")", "\n", "\n", "", "logging", ".", "info", "(", "error_dict", ")", "\n", "\n", "pickle", ".", "dump", "(", "\n", "error_dict", ",", "\n", "open", "(", "\n", "os", ".", "path", ".", "join", "(", "\n", "args", ".", "result_savePath", ",", "\n", "args", ".", "baseline", "+", "\n", "'_result.pkl'", ")", ",", "\n", "'wb'", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.evaluate_agora.run_evaluation": [[40, 297], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "logging.info", "compute_average_error.compute_avg_error", "glob.glob", "tqdm.tqdm", "pandas.concat", "pandas.read_pickle.to_pickle", "pandas.read_pickle", "os.path.join", "enumerate", "logging.info", "pandas.read_pickle", "logging.info", "matching.get_matching.insert", "load_predictions.load", "matching.get_matching", "matching.get_matching.insert", "matching.get_matching.insert", "matching.get_matching.insert", "matching.get_matching.insert", "matching.get_matching.insert", "numpy.load", "numpy.load", "numpy.load", "pickle.load", "tqdm.tqdm", "error_df_list.append", "os.path.join", "os.path.exists", "os.makedirs", "matching.get_matching.insert", "matching.get_matching.insert", "matching.get_matching.insert", "matching.get_matching.insert", "matching.get_matching.insert", "matching.get_matching.insert", "os.path.join", "os.path.join", "os.path.join", "open", "range", "range", "sum", "range", "str", "len", "len", "len", "len", "len", "len", "os.path.join", "len", "len", "calculate_v2v_error.compute_errors_matched_from_df_smplx_hf", "calculate_v2v_error.compute_errors_matched_from_df_smpl", "len", "matching.get_matching.iloc[].append", "matching.get_matching.iloc[].append", "matching.get_matching.iloc[].append", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "get_joints_verts_from_dataframe.get_pred_joints", "predJoints.append", "predVerts.append", "matching.get_matching.iloc[].append", "matching.get_matching.iloc[].append", "matching.get_matching.iloc[].append", "matching.get_matching.iloc[].append", "matching.get_matching.iloc[].append", "matching.get_matching.iloc[].append", "len", "len", "len", "len", "len", "len", "matching.get_matching.columns.get_loc", "matching.get_matching.columns.get_loc", "matching.get_matching.columns.get_loc", "matching.get_matching.columns.get_loc", "matching.get_matching.columns.get_loc", "matching.get_matching.columns.get_loc", "matching.get_matching.columns.get_loc", "matching.get_matching.columns.get_loc", "matching.get_matching.columns.get_loc", "matching.get_matching.columns.get_loc", "matching.get_matching.columns.get_loc", "matching.get_matching.columns.get_loc", "matching.get_matching.columns.get_loc", "matching.get_matching.columns.get_loc", "matching.get_matching.columns.get_loc", "matching.get_matching.columns.get_loc", "matching.get_matching.columns.get_loc", "matching.get_matching.columns.get_loc", "matching.get_matching.columns.get_loc", "matching.get_matching.columns.get_loc"], "function", ["home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.compute_average_error.compute_avg_error", "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.load_predictions.load", "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.matching.get_matching", "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.load_predictions.load", "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.load_predictions.load", "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.load_predictions.load", "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.load_predictions.load", "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.calculate_v2v_error.compute_errors_matched_from_df_smplx_hf", "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.calculate_v2v_error.compute_errors_matched_from_df_smpl", "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.get_joints_verts_from_dataframe.get_pred_joints"], ["def", "run_evaluation", "(", "*", "args", ")", ":", "\n", "    ", "\"\"\"Function to run the evaluation.\"\"\"", "\n", "\n", "# Parser", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--pred_path'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "\n", "help", "=", "'Path containing the predicitons'", ")", "\n", "parser", ".", "add_argument", "(", "'--debug_path'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "\n", "help", "=", "'Path where the debug files will be stored'", ")", "\n", "parser", ".", "add_argument", "(", "'--modelFolder'", ",", "type", "=", "str", ",", "\n", "default", "=", "'demo/model/smplx'", ")", "\n", "parser", ".", "add_argument", "(", "'--numBetas'", ",", "type", "=", "int", ",", "default", "=", "10", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--result_savePath'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "\n", "help", "=", "'Path where all the results will be saved'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--indices_path'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "''", ",", "\n", "help", "=", "'Path to hand,face and body vertex indices for SMPL-X'", ")", "\n", "parser", ".", "add_argument", "(", "'--imgHeight'", ",", "type", "=", "int", ",", "default", "=", "2160", ",", "\n", "help", "=", "'Height of the image'", ")", "\n", "parser", ".", "add_argument", "(", "'--imgWidth'", ",", "type", "=", "int", ",", "default", "=", "3840", ",", "\n", "help", "=", "'Width of the image'", ")", "\n", "parser", ".", "add_argument", "(", "'--numBodyJoints'", ",", "type", "=", "int", ",", "default", "=", "24", ",", "\n", "help", "=", "'Num of body joints used for evaluation'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--imgFolder'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "''", ",", "\n", "help", "=", "'Path to the folder containing test/validation images'", ")", "\n", "parser", ".", "add_argument", "(", "'--loadPrecomputed'", ",", "type", "=", "str", ",", "default", "=", "''", ",", "\n", "help", "=", "'Path to the ground truth SMPL/SMPLX dataframe'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--loadMatched'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "''", ",", "\n", "help", "=", "'Path to the dataframe after the matching is done'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--meanPoseBaseline'", ",", "\n", "default", "=", "False", ",", "\n", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--onlyComputeErrorLoadPath'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "''", ",", "\n", "help", "=", "'Path to the dataframe with all the errors already calculated and stored'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--baseline'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "'SPIN'", ",", "\n", "help", "=", "'Name of the baseline or the model being evaluated'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--modeltype'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "'SMPLX'", ",", "\n", "help", "=", "'SMPL or SMPLX'", ")", "\n", "parser", ".", "add_argument", "(", "'--kid_template_path'", ",", "type", "=", "str", ",", "default", "=", "'template'", ")", "\n", "parser", ".", "add_argument", "(", "'--gt_model_path'", ",", "type", "=", "str", ",", "default", "=", "''", ")", "\n", "parser", ".", "add_argument", "(", "'--onlybfh'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--debug'", ",", "action", "=", "'store_true'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", "*", "args", ")", "\n", "imgHeight", "=", "args", ".", "imgHeight", "\n", "imgWidth", "=", "args", ".", "imgWidth", "\n", "\n", "error_df_list", "=", "[", "]", "\n", "# If only average error needs to be computed then one can provide the path to the dataframe in", "\n", "# onlyComputeErrorLoadPath flag", "\n", "if", "args", ".", "onlyComputeErrorLoadPath", "==", "''", ":", "\n", "        ", "all_df", "=", "glob", "(", "os", ".", "path", ".", "join", "(", "args", ".", "loadPrecomputed", ",", "'*.pkl'", ")", ")", "\n", "for", "df_iter", ",", "df_path", "in", "tqdm", "(", "enumerate", "(", "all_df", ")", ")", ":", "\n", "            ", "logging", ".", "info", "(", "\n", "'Processing {}th dataframe'", ".", "format", "(", "\n", "str", "(", "df_iter", ")", ")", ")", "\n", "df", "=", "pandas", ".", "read_pickle", "(", "df_path", ")", "\n", "\n", "##################### get prediction joints###############", "\n", "logging", ".", "info", "(", "'Loading predictions'", ")", "\n", "\n", "df", ".", "insert", "(", "column", "=", "'matching'", ",", "loc", "=", "len", "(", "df", ".", "columns", ")", ",", "value", "=", "len", "(", "df", ")", "*", "[", "''", "]", ")", "\n", "df", "=", "load_predictions", ".", "load", "(", "args", ",", "df", ")", "\n", "df", "=", "get_matching", "(", "args", ",", "df", ",", "imgWidth", ",", "imgHeight", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "result_savePath", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "args", ".", "result_savePath", ")", "\n", "\n", "############################## compute error for matched and add to the dataframe ##########", "\n", "", "df", ".", "insert", "(", "\n", "column", "=", "'body-MPJPE'", ",", "\n", "loc", "=", "len", "(", "\n", "df", ".", "columns", ")", ",", "\n", "value", "=", "len", "(", "df", ")", "*", "\n", "[", "''", "]", ")", "\n", "df", ".", "insert", "(", "\n", "column", "=", "'falsePositives'", ",", "\n", "loc", "=", "len", "(", "\n", "df", ".", "columns", ")", ",", "\n", "value", "=", "len", "(", "df", ")", "*", "\n", "[", "''", "]", ")", "\n", "df", ".", "insert", "(", "\n", "column", "=", "'misses'", ",", "\n", "loc", "=", "len", "(", "\n", "df", ".", "columns", ")", ",", "\n", "value", "=", "len", "(", "df", ")", "*", "\n", "[", "''", "]", ")", "\n", "df", ".", "insert", "(", "\n", "column", "=", "'miss_flag'", ",", "\n", "loc", "=", "len", "(", "\n", "df", ".", "columns", ")", ",", "\n", "value", "=", "len", "(", "df", ")", "*", "\n", "[", "''", "]", ")", "\n", "df", ".", "insert", "(", "\n", "column", "=", "'body-MVE'", ",", "\n", "loc", "=", "len", "(", "\n", "df", ".", "columns", ")", ",", "\n", "value", "=", "len", "(", "df", ")", "*", "\n", "[", "''", "]", ")", "\n", "\n", "if", "args", ".", "modeltype", "==", "'SMPLX'", ":", "\n", "                ", "df", ".", "insert", "(", "\n", "column", "=", "'lhand-MPJPE'", ",", "\n", "loc", "=", "len", "(", "\n", "df", ".", "columns", ")", ",", "\n", "value", "=", "len", "(", "df", ")", "*", "\n", "[", "''", "]", ")", "\n", "df", ".", "insert", "(", "\n", "column", "=", "'rhand-MPJPE'", ",", "\n", "loc", "=", "len", "(", "\n", "df", ".", "columns", ")", ",", "\n", "value", "=", "len", "(", "df", ")", "*", "\n", "[", "''", "]", ")", "\n", "df", ".", "insert", "(", "\n", "column", "=", "'face-MPJPE'", ",", "\n", "loc", "=", "len", "(", "\n", "df", ".", "columns", ")", ",", "\n", "value", "=", "len", "(", "df", ")", "*", "\n", "[", "''", "]", ")", "\n", "df", ".", "insert", "(", "\n", "column", "=", "'lhand-MVE'", ",", "\n", "loc", "=", "len", "(", "\n", "df", ".", "columns", ")", ",", "\n", "value", "=", "len", "(", "df", ")", "*", "\n", "[", "''", "]", ")", "\n", "df", ".", "insert", "(", "\n", "column", "=", "'rhand-MVE'", ",", "\n", "loc", "=", "len", "(", "\n", "df", ".", "columns", ")", ",", "\n", "value", "=", "len", "(", "df", ")", "*", "\n", "[", "''", "]", ")", "\n", "df", ".", "insert", "(", "\n", "column", "=", "'face-MVE'", ",", "\n", "loc", "=", "len", "(", "\n", "df", ".", "columns", ")", ",", "\n", "value", "=", "len", "(", "df", ")", "*", "\n", "[", "''", "]", ")", "\n", "\n", "\n", "#Load vertex indices to calculate verts error", "\n", "", "verts_ind_dict", "=", "{", "}", "\n", "verts_ind_dict", "[", "'body-smpl'", "]", "=", "np", ".", "load", "(", "\n", "os", ".", "path", ".", "join", "(", "\n", "args", ".", "indices_path", ",", "\n", "'body_verts_smpl.npy'", ")", ")", "\n", "verts_ind_dict", "[", "'body-smplx'", "]", "=", "np", ".", "load", "(", "\n", "os", ".", "path", ".", "join", "(", "args", ".", "indices_path", ",", "'body_verts_smplx.npy'", ")", ")", "\n", "verts_ind_dict", "[", "'face'", "]", "=", "np", ".", "load", "(", "\n", "os", ".", "path", ".", "join", "(", "\n", "args", ".", "indices_path", ",", "\n", "'SMPL-X__FLAME_vertex_ids.npy'", ")", ")", "\n", "hands", "=", "pickle", ".", "load", "(", "\n", "open", "(", "\n", "os", ".", "path", ".", "join", "(", "\n", "args", ".", "indices_path", ",", "\n", "'MANO_SMPLX_vertex_ids.pkl'", ")", ",", "\n", "'rb'", ")", ")", "\n", "verts_ind_dict", "[", "'left_hand'", "]", "=", "hands", "[", "'left_hand'", "]", "\n", "verts_ind_dict", "[", "'right_hand'", "]", "=", "hands", "[", "'right_hand'", "]", "\n", "\n", "\n", "for", "idx", "in", "tqdm", "(", "range", "(", "len", "(", "df", ")", ")", ")", ":", "\n", "                ", "predJoints", "=", "[", "]", "\n", "predVerts", "=", "[", "]", "\n", "allJointsPred", "=", "[", "]", "\n", "validGts", "=", "[", "]", "\n", "df", ".", "iloc", "[", "idx", ",", "df", ".", "columns", ".", "get_loc", "(", "'body-MPJPE'", ")", "]", "=", "[", "]", "\n", "df", ".", "iloc", "[", "idx", ",", "df", ".", "columns", ".", "get_loc", "(", "'miss_flag'", ")", "]", "=", "[", "]", "\n", "df", ".", "iloc", "[", "idx", ",", "df", ".", "columns", ".", "get_loc", "(", "'body-MVE'", ")", "]", "=", "[", "]", "\n", "\n", "if", "args", ".", "modeltype", "==", "'SMPLX'", ":", "\n", "                    ", "df", ".", "iloc", "[", "idx", ",", "df", ".", "columns", ".", "get_loc", "(", "'lhand-MPJPE'", ")", "]", "=", "[", "]", "\n", "df", ".", "iloc", "[", "idx", ",", "df", ".", "columns", ".", "get_loc", "(", "'rhand-MPJPE'", ")", "]", "=", "[", "]", "\n", "df", ".", "iloc", "[", "idx", ",", "df", ".", "columns", ".", "get_loc", "(", "'face-MPJPE'", ")", "]", "=", "[", "]", "\n", "df", ".", "iloc", "[", "idx", ",", "df", ".", "columns", ".", "get_loc", "(", "'lhand-MVE'", ")", "]", "=", "[", "]", "\n", "df", ".", "iloc", "[", "idx", ",", "df", ".", "columns", ".", "get_loc", "(", "'rhand-MVE'", ")", "]", "=", "[", "]", "\n", "df", ".", "iloc", "[", "idx", ",", "df", ".", "columns", ".", "get_loc", "(", "'face-MVE'", ")", "]", "=", "[", "]", "\n", "\n", "# collect all predicted joints. Might be smaller or larger than", "\n", "# gt", "\n", "", "for", "pNum", "in", "range", "(", "len", "(", "df", ".", "iloc", "[", "idx", "]", "[", "'pred'", "]", ")", ")", ":", "\n", "                    ", "if", "df", ".", "iloc", "[", "idx", "]", ".", "at", "[", "'pred'", "]", "[", "pNum", "]", ":", "\n", "                        ", "get_pred_joints", "(", "\n", "predJoints", ",", "predVerts", ",", "df", ",", "idx", ",", "pNum", ",", "args", ")", "\n", "", "else", ":", "\n", "                        ", "predJoints", ".", "append", "(", "[", "]", ")", "\n", "predVerts", ".", "append", "(", "[", "]", ")", "\n", "\n", "", "", "if", "args", ".", "modeltype", "==", "'SMPLX'", ":", "\n", "                    ", "pel_aligned_error", ",", "pel_aligned_verts_error", ",", "lhand_joints_error", ",", "lhand_verts_error", ",", "rhand_joints_error", ",", "rhand_verts_error", ",", "face_kps_error", ",", "face_verts_error", ",", "falsePositives", ",", "miss_flag", "=", "v2v", ".", "compute_errors_matched_from_df_smplx_hf", "(", "args", ",", "df", ",", "\n", "idx", ",", "predJoints", ",", "predVerts", ",", "verts_ind_dict", ")", "\n", "", "else", ":", "\n", "                    ", "pel_aligned_error", ",", "pel_aligned_verts_error", ",", "procrustes_error", ",", "procrustes_verts_error", ",", "falsePositives", ",", "procrustesParams", ",", "miss_flag", "=", "v2v", ".", "compute_errors_matched_from_df_smpl", "(", "args", ",", "\n", "df", ",", "idx", ",", "\n", "predJoints", ",", "\n", "verts_ind_dict", ",", "\n", "predVerts", ")", "\n", "\n", "# Update dataframes", "\n", "", "df", ".", "iloc", "[", "idx", ",", "df", ".", "columns", ".", "get_loc", "(", "\n", "'falsePositives'", ")", "]", "=", "falsePositives", "\n", "df", ".", "iloc", "[", "idx", ",", "df", ".", "columns", ".", "get_loc", "(", "'misses'", ")", "]", "=", "sum", "(", "miss_flag", ")", "\n", "\n", "for", "pNum", "in", "range", "(", "len", "(", "df", ".", "iloc", "[", "idx", "]", "[", "'isValid'", "]", ")", ")", ":", "\n", "                    ", "df", ".", "iloc", "[", "idx", ",", "df", ".", "columns", ".", "get_loc", "(", "\n", "'body-MPJPE'", ")", "]", ".", "append", "(", "pel_aligned_error", "[", "pNum", "]", ")", "\n", "df", ".", "iloc", "[", "idx", ",", "df", ".", "columns", ".", "get_loc", "(", "\n", "'miss_flag'", ")", "]", ".", "append", "(", "miss_flag", "[", "pNum", "]", ")", "\n", "df", ".", "iloc", "[", "idx", ",", "df", ".", "columns", ".", "get_loc", "(", "\n", "'body-MVE'", ")", "]", ".", "append", "(", "pel_aligned_verts_error", "[", "pNum", "]", ")", "\n", "\n", "if", "args", ".", "modeltype", "==", "'SMPLX'", ":", "\n", "                        ", "df", ".", "iloc", "[", "idx", ",", "df", ".", "columns", ".", "get_loc", "(", "\n", "'lhand-MPJPE'", ")", "]", ".", "append", "(", "lhand_joints_error", "[", "pNum", "]", ")", "\n", "df", ".", "iloc", "[", "idx", ",", "df", ".", "columns", ".", "get_loc", "(", "\n", "'rhand-MPJPE'", ")", "]", ".", "append", "(", "rhand_joints_error", "[", "pNum", "]", ")", "\n", "df", ".", "iloc", "[", "idx", ",", "df", ".", "columns", ".", "get_loc", "(", "\n", "'face-MPJPE'", ")", "]", ".", "append", "(", "face_kps_error", "[", "pNum", "]", ")", "\n", "df", ".", "iloc", "[", "idx", ",", "df", ".", "columns", ".", "get_loc", "(", "\n", "'lhand-MVE'", ")", "]", ".", "append", "(", "lhand_verts_error", "[", "pNum", "]", ")", "\n", "df", ".", "iloc", "[", "idx", ",", "df", ".", "columns", ".", "get_loc", "(", "\n", "'rhand-MVE'", ")", "]", ".", "append", "(", "rhand_verts_error", "[", "pNum", "]", ")", "\n", "df", ".", "iloc", "[", "idx", ",", "df", ".", "columns", ".", "get_loc", "(", "\n", "'face-MVE'", ")", "]", ".", "append", "(", "face_verts_error", "[", "pNum", "]", ")", "\n", "# To reduce size, remove unused content from dataframe", "\n", "", "", "", "error_df_list", ".", "append", "(", "df", ")", "\n", "", "error_df", "=", "pandas", ".", "concat", "(", "error_df_list", ")", "\n", "error_df", ".", "to_pickle", "(", "\n", "os", ".", "path", ".", "join", "(", "\n", "args", ".", "result_savePath", ",", "\n", "args", ".", "baseline", "+", "\n", "'_df.pkl'", ")", ")", "\n", "", "else", ":", "\n", "        ", "error_df", "=", "pandas", ".", "read_pickle", "(", "args", ".", "onlyComputeErrorLoadPath", ")", "\n", "", "logging", ".", "info", "(", "'Calculating Average Error and Generating plots'", ")", "\n", "compute_avg_error", "(", "args", ",", "error_df", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.utils.get_camYaw": [[28, 36], ["None"], "function", ["None"], ["def", "get_camYaw", "(", "args", ",", "constants", ")", ":", "\n", "    ", "if", "args", ".", "scene3d", "and", "args", ".", "useCorrectMeanPoseRot", ":", "\n", "        ", "cam_yaw", "=", "0", "\n", "", "elif", "args", ".", "useCorrectMeanPoseRot", ":", "\n", "        ", "cam_yaw", "=", "constants", "[", "'camPitch'", "]", "\n", "", "else", ":", "\n", "        ", "cam_yaw", "=", "0", "\n", "", "return", "cam_yaw", "\n", "\n"]], "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.utils.smpl_to_openpose": [[38, 148], ["openpose_format.lower", "numpy.array", "ValueError", "numpy.array", "numpy.concatenate", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.concatenate", "ValueError", "numpy.array", "numpy.concatenate", "numpy.array", "numpy.array", "numpy.arange", "numpy.array", "numpy.array", "numpy.array", "numpy.concatenate", "ValueError", "numpy.array", "numpy.array", "numpy.arange"], "function", ["None"], ["", "def", "smpl_to_openpose", "(", "model_type", "=", "'smplx'", ",", "use_hands", "=", "True", ",", "use_face", "=", "True", ",", "\n", "use_face_contour", "=", "False", ",", "openpose_format", "=", "'coco25'", ")", ":", "\n", "    ", "''' Returns the indices of the permutation that maps OpenPose to SMPL\n\n        Parameters\n        ----------\n        model_type: str, optional\n            The type of SMPL-like model that is used. The default mapping\n            returned is for the SMPLX model\n        use_hands: bool, optional\n            Flag for adding to the returned permutation the mapping for the\n            hand keypoints. Defaults to True\n        use_face: bool, optional\n            Flag for adding to the returned permutation the mapping for the\n            face keypoints. Defaults to True\n        use_face_contour: bool, optional\n            Flag for appending the facial contour keypoints. Defaults to False\n        openpose_format: bool, optional\n            The output format of OpenPose. For now only COCO-25 and COCO-19 is\n            supported. Defaults to 'coco25'\n\n    '''", "\n", "if", "openpose_format", ".", "lower", "(", ")", "==", "'coco25'", ":", "\n", "        ", "if", "model_type", "==", "'smpl'", ":", "\n", "            ", "return", "np", ".", "array", "(", "[", "24", ",", "12", ",", "17", ",", "19", ",", "21", ",", "16", ",", "18", ",", "20", ",", "0", ",", "2", ",", "5", ",", "8", ",", "1", ",", "4", ",", "\n", "7", ",", "25", ",", "26", ",", "27", ",", "28", ",", "29", ",", "30", ",", "31", ",", "32", ",", "33", ",", "34", "]", ",", "\n", "dtype", "=", "np", ".", "int32", ")", "\n", "", "elif", "model_type", "==", "'smplh'", ":", "\n", "            ", "body_mapping", "=", "np", ".", "array", "(", "[", "52", ",", "12", ",", "17", ",", "19", ",", "21", ",", "16", ",", "18", ",", "20", ",", "0", ",", "2", ",", "5", ",", "\n", "8", ",", "1", ",", "4", ",", "7", ",", "53", ",", "54", ",", "55", ",", "56", ",", "57", ",", "58", ",", "59", ",", "\n", "60", ",", "61", ",", "62", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "mapping", "=", "[", "body_mapping", "]", "\n", "if", "use_hands", ":", "\n", "                ", "lhand_mapping", "=", "np", ".", "array", "(", "[", "20", ",", "34", ",", "35", ",", "36", ",", "63", ",", "22", ",", "23", ",", "24", ",", "64", ",", "\n", "25", ",", "26", ",", "27", ",", "65", ",", "31", ",", "32", ",", "33", ",", "66", ",", "28", ",", "\n", "29", ",", "30", ",", "67", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "rhand_mapping", "=", "np", ".", "array", "(", "[", "21", ",", "49", ",", "50", ",", "51", ",", "68", ",", "37", ",", "38", ",", "39", ",", "69", ",", "\n", "40", ",", "41", ",", "42", ",", "70", ",", "46", ",", "47", ",", "48", ",", "71", ",", "43", ",", "\n", "44", ",", "45", ",", "72", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "mapping", "+=", "[", "lhand_mapping", ",", "rhand_mapping", "]", "\n", "", "return", "np", ".", "concatenate", "(", "mapping", ")", "\n", "# SMPLX", "\n", "", "elif", "model_type", "==", "'smplx'", ":", "\n", "            ", "body_mapping", "=", "np", ".", "array", "(", "[", "55", ",", "12", ",", "17", ",", "19", ",", "21", ",", "16", ",", "18", ",", "20", ",", "0", ",", "2", ",", "5", ",", "\n", "8", ",", "1", ",", "4", ",", "7", ",", "56", ",", "57", ",", "58", ",", "59", ",", "60", ",", "61", ",", "62", ",", "\n", "63", ",", "64", ",", "65", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "mapping", "=", "[", "body_mapping", "]", "\n", "if", "use_hands", ":", "\n", "                ", "lhand_mapping", "=", "np", ".", "array", "(", "[", "20", ",", "37", ",", "38", ",", "39", ",", "66", ",", "25", ",", "26", ",", "27", ",", "\n", "67", ",", "28", ",", "29", ",", "30", ",", "68", ",", "34", ",", "35", ",", "36", ",", "69", ",", "\n", "31", ",", "32", ",", "33", ",", "70", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "rhand_mapping", "=", "np", ".", "array", "(", "[", "21", ",", "52", ",", "53", ",", "54", ",", "71", ",", "40", ",", "41", ",", "42", ",", "72", ",", "\n", "43", ",", "44", ",", "45", ",", "73", ",", "49", ",", "50", ",", "51", ",", "74", ",", "46", ",", "\n", "47", ",", "48", ",", "75", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n", "mapping", "+=", "[", "lhand_mapping", ",", "rhand_mapping", "]", "\n", "", "if", "use_face", ":", "\n", "#  end_idx = 127 + 17 * use_face_contour", "\n", "                ", "face_mapping", "=", "np", ".", "arange", "(", "76", ",", "127", "+", "17", "*", "use_face_contour", ",", "\n", "dtype", "=", "np", ".", "int32", ")", "\n", "mapping", "+=", "[", "face_mapping", "]", "\n", "\n", "", "return", "np", ".", "concatenate", "(", "mapping", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Unknown model type: {}'", ".", "format", "(", "model_type", ")", ")", "\n", "", "", "elif", "openpose_format", "==", "'coco19'", ":", "\n", "        ", "if", "model_type", "==", "'smpl'", ":", "\n", "            ", "return", "np", ".", "array", "(", "[", "24", ",", "12", ",", "17", ",", "19", ",", "21", ",", "16", ",", "18", ",", "20", ",", "0", ",", "2", ",", "5", ",", "8", ",", "\n", "1", ",", "4", ",", "7", ",", "25", ",", "26", ",", "27", ",", "28", "]", ",", "\n", "dtype", "=", "np", ".", "int32", ")", "\n", "", "elif", "model_type", "==", "'smplh'", ":", "\n", "            ", "body_mapping", "=", "np", ".", "array", "(", "[", "52", ",", "12", ",", "17", ",", "19", ",", "21", ",", "16", ",", "18", ",", "20", ",", "0", ",", "2", ",", "5", ",", "\n", "8", ",", "1", ",", "4", ",", "7", ",", "53", ",", "54", ",", "55", ",", "56", "]", ",", "\n", "dtype", "=", "np", ".", "int32", ")", "\n", "mapping", "=", "[", "body_mapping", "]", "\n", "if", "use_hands", ":", "\n", "                ", "lhand_mapping", "=", "np", ".", "array", "(", "[", "20", ",", "34", ",", "35", ",", "36", ",", "57", ",", "22", ",", "23", ",", "24", ",", "58", ",", "\n", "25", ",", "26", ",", "27", ",", "59", ",", "31", ",", "32", ",", "33", ",", "60", ",", "28", ",", "\n", "29", ",", "30", ",", "61", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "rhand_mapping", "=", "np", ".", "array", "(", "[", "21", ",", "49", ",", "50", ",", "51", ",", "62", ",", "37", ",", "38", ",", "39", ",", "63", ",", "\n", "40", ",", "41", ",", "42", ",", "64", ",", "46", ",", "47", ",", "48", ",", "65", ",", "43", ",", "\n", "44", ",", "45", ",", "66", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "mapping", "+=", "[", "lhand_mapping", ",", "rhand_mapping", "]", "\n", "", "return", "np", ".", "concatenate", "(", "mapping", ")", "\n", "# SMPLX", "\n", "", "elif", "model_type", "==", "'smplx'", ":", "\n", "            ", "body_mapping", "=", "np", ".", "array", "(", "[", "55", ",", "12", ",", "17", ",", "19", ",", "21", ",", "16", ",", "18", ",", "20", ",", "0", ",", "2", ",", "5", ",", "\n", "8", ",", "1", ",", "4", ",", "7", ",", "56", ",", "57", ",", "58", ",", "59", "]", ",", "\n", "dtype", "=", "np", ".", "int32", ")", "\n", "mapping", "=", "[", "body_mapping", "]", "\n", "if", "use_hands", ":", "\n", "                ", "lhand_mapping", "=", "np", ".", "array", "(", "[", "20", ",", "37", ",", "38", ",", "39", ",", "60", ",", "25", ",", "26", ",", "27", ",", "\n", "61", ",", "28", ",", "29", ",", "30", ",", "62", ",", "34", ",", "35", ",", "36", ",", "63", ",", "\n", "31", ",", "32", ",", "33", ",", "64", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "rhand_mapping", "=", "np", ".", "array", "(", "[", "21", ",", "52", ",", "53", ",", "54", ",", "65", ",", "40", ",", "41", ",", "42", ",", "66", ",", "\n", "43", ",", "44", ",", "45", ",", "67", ",", "49", ",", "50", ",", "51", ",", "68", ",", "46", ",", "\n", "47", ",", "48", ",", "69", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n", "mapping", "+=", "[", "lhand_mapping", ",", "rhand_mapping", "]", "\n", "", "if", "use_face", ":", "\n", "                ", "face_mapping", "=", "np", ".", "arange", "(", "70", ",", "70", "+", "51", "+", "\n", "17", "*", "use_face_contour", ",", "\n", "dtype", "=", "np", ".", "int32", ")", "\n", "mapping", "+=", "[", "face_mapping", "]", "\n", "\n", "", "return", "np", ".", "concatenate", "(", "mapping", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Unknown model type: {}'", ".", "format", "(", "model_type", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Unknown joint format: {}'", ".", "format", "(", "openpose_format", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.utils.convert_hmr23dpw": [[150, 157], ["None"], "function", ["None"], ["", "", "def", "convert_hmr23dpw", "(", "kp", ")", ":", "\n", "    ", "new_kp", "=", "kp", "\n", "smplToLSP", "=", "[", "14", ",", "12", ",", "8", ",", "7", ",", "6", ",", "9", ",", "10", ",", "11", ",", "2", ",", "1", ",", "0", ",", "3", ",", "4", ",", "5", ",", "16", ",", "15", ",", "18", ",", "17", "]", "\n", "\n", "new_kp", "=", "kp", "[", "smplToLSP", ",", ":", "]", "\n", "\n", "return", "new_kp", "\n", "\n"]], "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.utils.SMPLX2HMR": [[159, 161], ["None"], "function", ["None"], ["", "def", "SMPLX2HMR", "(", ")", ":", "\n", "    ", "return", "[", "8", ",", "5", ",", "2", ",", "1", ",", "4", ",", "7", ",", "21", ",", "19", ",", "17", ",", "16", ",", "18", ",", "20", ",", "12", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.utils.convert_smpl2coco": [[163, 172], ["None"], "function", ["None"], ["", "def", "convert_smpl2coco", "(", "kp", ")", ":", "\n", "\n", "    ", "new_kp", "=", "kp", "\n", "# smplToLSP = [14, 12, 8, 7, 6, 9, 10, 11, 2,1,0, 4,5, 6, 16, 15, 18, 17]", "\n", "smplToLSP", "=", "[", "14", ",", "15", ",", "16", ",", "17", ",", "18", ",", "9", ",", "8", ",", "10", ",", "7", ",", "11", ",", "6", ",", "3", ",", "2", ",", "4", ",", "1", ",", "5", ",", "0", "]", "\n", "\n", "new_kp", "=", "kp", "[", "smplToLSP", ",", ":", "]", "\n", "\n", "return", "new_kp", "\n", "\n"]], "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.utils.get_matching_dict": [[174, 186], ["str"], "function", ["None"], ["", "def", "get_matching_dict", "(", "matching", ")", ":", "\n", "    ", "matchDict", "=", "{", "}", "\n", "falsePositive_count", "=", "0", "\n", "for", "match", "in", "matching", ":", "\n", "        ", "if", "not", "(", "match", "[", "1", "]", "==", "'falsePositive'", ")", "or", "match", "[", "0", "]", "==", "'invalid'", ":", "\n", "# tuple order (idx_openpose_pred, idx_gt_kps)", "\n", "            ", "matchDict", "[", "str", "(", "match", "[", "1", "]", ")", "]", "=", "match", "[", "0", "]", "\n", "", "elif", "(", "match", "[", "1", "]", "==", "'falsePositive'", ")", ":", "\n", "            ", "falsePositive_count", "+=", "1", "\n", "", "else", ":", "\n", "            ", "continue", "# simply ignore invalid ground truths", "\n", "", "", "return", "matchDict", ",", "falsePositive_count", "\n", "\n"]], "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.utils.l2_error": [[188, 190], ["numpy.linalg.norm"], "function", ["None"], ["", "def", "l2_error", "(", "j1", ",", "j2", ")", ":", "\n", "    ", "return", "np", ".", "linalg", ".", "norm", "(", "j1", "-", "j2", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.utils.load_model": [[192, 308], ["smplx.create", "smplx.create", "smplx.create", "smplx.create", "smplx.create", "smplx.create", "smplx.build_layer", "smplx.build_layer", "smplx.build_layer", "smplx.build_layer", "smplx.build_layer", "smplx.build_layer", "smplx.create", "smplx.create", "smplx.create", "smplx.create", "smplx.create", "smplx.create", "ValueError"], "function", ["None"], ["", "def", "load_model", "(", "args", ")", ":", "\n", "\n", "    ", "if", "args", ".", "modeltype", "==", "'SMPLX'", "and", "args", ".", "pose2rot", ":", "\n", "        ", "model_male", "=", "smplx", ".", "create", "(", "args", ".", "modelFolder", ",", "model_type", "=", "'smplx'", ",", "\n", "gender", "=", "'male'", ",", "\n", "ext", "=", "'npz'", ",", "\n", "num_betas", "=", "args", ".", "numBetas", ",", "use_pca", "=", "False", ")", "\n", "model_male_kid", "=", "smplx", ".", "create", "(", "args", ".", "modelFolder", ",", "model_type", "=", "'smplx'", ",", "\n", "gender", "=", "'male'", ",", "\n", "age", "=", "'kid'", ",", "\n", "kid_template_path", "=", "args", ".", "kid_template_path", ",", "\n", "ext", "=", "'npz'", ",", "use_pca", "=", "False", ")", "\n", "\n", "model_female", "=", "smplx", ".", "create", "(", "args", ".", "modelFolder", ",", "model_type", "=", "'smplx'", ",", "\n", "gender", "=", "'female'", ",", "\n", "ext", "=", "'npz'", ",", "\n", "num_betas", "=", "args", ".", "numBetas", ",", "\n", "use_pca", "=", "False", ")", "\n", "\n", "model_female_kid", "=", "smplx", ".", "create", "(", "\n", "args", ".", "modelFolder", ",", "\n", "model_type", "=", "'smplx'", ",", "\n", "gender", "=", "'female'", ",", "\n", "age", "=", "'kid'", ",", "\n", "kid_template_path", "=", "args", ".", "kid_template_path", ",", "\n", "ext", "=", "'npz'", ",", "\n", "use_pca", "=", "False", ")", "\n", "\n", "model_neutral", "=", "smplx", ".", "create", "(", "args", ".", "modelFolder", ",", "model_type", "=", "'smplx'", ",", "\n", "gender", "=", "'neutral'", ",", "\n", "ext", "=", "'npz'", ",", "\n", "num_betas", "=", "args", ".", "numBetas", ",", "\n", "use_pca", "=", "False", ")", "\n", "\n", "model_neutral_kid", "=", "smplx", ".", "create", "(", "\n", "args", ".", "modelFolder", ",", "\n", "model_type", "=", "'smplx'", ",", "\n", "gender", "=", "'neutral'", ",", "\n", "age", "=", "'kid'", ",", "\n", "kid_template_path", "=", "args", ".", "kid_template_path", ",", "\n", "ext", "=", "'npz'", ",", "\n", "use_pca", "=", "False", ")", "\n", "\n", "", "elif", "args", ".", "modeltype", "==", "'SMPLX'", "and", "not", "args", ".", "pose2rot", ":", "\n", "# If params are in rotation matrix format then we need to use SMPLXLayer class", "\n", "        ", "model_male", "=", "smplx", ".", "build_layer", "(", "args", ".", "modelFolder", ",", "model_type", "=", "'smplx'", ",", "\n", "gender", "=", "'male'", ",", "\n", "ext", "=", "'npz'", ",", "\n", "num_betas", "=", "args", ".", "numBetas", ",", "use_pca", "=", "False", ")", "\n", "model_male_kid", "=", "smplx", ".", "build_layer", "(", "args", ".", "modelFolder", ",", "model_type", "=", "'smplx'", ",", "\n", "gender", "=", "'male'", ",", "\n", "age", "=", "'kid'", ",", "\n", "kid_template_path", "=", "args", ".", "kid_template_path", ",", "\n", "ext", "=", "'npz'", ",", "use_pca", "=", "False", ")", "\n", "\n", "model_female", "=", "smplx", ".", "build_layer", "(", "args", ".", "modelFolder", ",", "model_type", "=", "'smplx'", ",", "\n", "gender", "=", "'female'", ",", "\n", "ext", "=", "'npz'", ",", "\n", "num_betas", "=", "args", ".", "numBetas", ",", "\n", "use_pca", "=", "False", ")", "\n", "\n", "model_female_kid", "=", "smplx", ".", "build_layer", "(", "\n", "args", ".", "modelFolder", ",", "\n", "model_type", "=", "'smplx'", ",", "\n", "gender", "=", "'female'", ",", "\n", "age", "=", "'kid'", ",", "\n", "kid_template_path", "=", "args", ".", "kid_template_path", ",", "\n", "ext", "=", "'npz'", ",", "\n", "use_pca", "=", "False", ")", "\n", "\n", "model_neutral", "=", "smplx", ".", "build_layer", "(", "args", ".", "modelFolder", ",", "model_type", "=", "'smplx'", ",", "\n", "gender", "=", "'neutral'", ",", "\n", "ext", "=", "'npz'", ",", "\n", "num_betas", "=", "args", ".", "numBetas", ",", "\n", "use_pca", "=", "False", ")", "\n", "\n", "model_neutral_kid", "=", "smplx", ".", "build_layer", "(", "\n", "args", ".", "modelFolder", ",", "\n", "model_type", "=", "'smplx'", ",", "\n", "gender", "=", "'neutral'", ",", "\n", "age", "=", "'kid'", ",", "\n", "kid_template_path", "=", "args", ".", "kid_template_path", ",", "\n", "ext", "=", "'npz'", ",", "\n", "use_pca", "=", "False", ")", "\n", "\n", "", "elif", "args", ".", "modeltype", "==", "'SMPL'", ":", "\n", "        ", "model_male", "=", "smplx", ".", "create", "(", "args", ".", "modelFolder", ",", "model_type", "=", "'smpl'", ",", "\n", "gender", "=", "'male'", ",", "\n", "ext", "=", "'npz'", ")", "\n", "model_male_kid", "=", "smplx", ".", "create", "(", "args", ".", "modelFolder", ",", "model_type", "=", "'smpl'", ",", "\n", "gender", "=", "'male'", ",", "age", "=", "'kid'", ",", "\n", "kid_template_path", "=", "args", ".", "kid_template_path", ",", "\n", "ext", "=", "'npz'", ")", "\n", "model_female", "=", "smplx", ".", "create", "(", "args", ".", "modelFolder", ",", "model_type", "=", "'smpl'", ",", "\n", "gender", "=", "'female'", ",", "\n", "ext", "=", "'npz'", ")", "\n", "model_female_kid", "=", "smplx", ".", "create", "(", "\n", "args", ".", "modelFolder", ",", "\n", "model_type", "=", "'smpl'", ",", "\n", "gender", "=", "'female'", ",", "\n", "age", "=", "'kid'", ",", "\n", "kid_template_path", "=", "args", ".", "kid_template_path", ",", "\n", "ext", "=", "'npz'", ")", "\n", "model_neutral", "=", "smplx", ".", "create", "(", "args", ".", "modelFolder", ",", "model_type", "=", "'smpl'", ",", "\n", "gender", "=", "'neutral'", ",", "\n", "ext", "=", "'npz'", ")", "\n", "model_neutral_kid", "=", "smplx", ".", "create", "(", "\n", "args", ".", "modelFolder", ",", "\n", "model_type", "=", "'smpl'", ",", "\n", "gender", "=", "'neutral'", ",", "\n", "age", "=", "'kid'", ",", "\n", "kid_template_path", "=", "args", ".", "kid_template_path", ",", "\n", "ext", "=", "'npz'", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Provide correct modeltype smpl/smplx'", ")", "\n", "", "return", "model_male", ",", "model_male_kid", ",", "model_female", ",", "model_female_kid", ",", "model_neutral", ",", "model_neutral_kid", "\n", "", ""]], "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.check_pred_format.assert_type": [[31, 34], ["isinstance", "TypeError", "numpy.np.ndarray", "numpy.np.ndarray", "numpy.np.ndarray", "numpy.np.ndarray", "numpy.np.ndarray", "numpy.np.ndarray", "numpy.np.ndarray", "numpy.np.ndarray", "numpy.np.ndarray", "numpy.np.ndarray", "numpy.np.ndarray", "numpy.np.ndarray", "numpy.np.ndarray", "numpy.np.ndarray", "numpy.np.ndarray", "numpy.np.ndarray", "numpy.np.ndarray", "numpy.np.ndarray", "numpy.np.ndarray", "numpy.np.ndarray"], "function", ["None"], ["def", "assert_type", "(", "var", ",", "gt_type", ",", "key", ")", ":", "\n", "    ", "if", "not", "isinstance", "(", "var", ",", "gt_type", ")", ":", "\n", "        ", "raise", "TypeError", "(", "'{} should be of type {}'", ".", "format", "(", "key", ",", "gt_type", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.check_pred_format.assert_shape": [[35, 38], ["ValueError"], "function", ["None"], ["", "", "def", "assert_shape", "(", "var", ",", "gt_shape", ",", "key", ")", ":", "\n", "    ", "if", "var", ".", "shape", "!=", "gt_shape", ":", "\n", "        ", "raise", "ValueError", "(", "'{} should be of shape {} but you are providing {}'", ".", "format", "(", "key", ",", "gt_shape", ",", "var", ".", "shape", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.check_pred_format.assert_smpl_param_keys": [[39, 48], ["check_pred_format.assert_type", "check_pred_format.assert_type", "check_pred_format.assert_type", "check_pred_format.assert_type", "params.keys", "params.keys", "params.keys", "params.keys"], "function", ["home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.check_pred_format.assert_type", "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.check_pred_format.assert_type", "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.check_pred_format.assert_type", "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.check_pred_format.assert_type"], ["", "", "def", "assert_smpl_param_keys", "(", "params", ")", ":", "\n", "    ", "assert", "'transl'", "in", "params", ".", "keys", "(", ")", "\n", "assert_type", "(", "params", "[", "'transl'", "]", ",", "np", ".", "ndarray", ",", "'transl'", ")", "\n", "assert", "'betas'", "in", "params", ".", "keys", "(", ")", "\n", "assert_type", "(", "params", "[", "'betas'", "]", ",", "np", ".", "ndarray", ",", "'betas'", ")", "\n", "assert", "'global_orient'", "in", "params", ".", "keys", "(", ")", "\n", "assert_type", "(", "params", "[", "'global_orient'", "]", ",", "np", ".", "ndarray", ",", "'global_orient'", ")", "\n", "assert", "'body_pose'", "in", "params", ".", "keys", "(", ")", "\n", "assert_type", "(", "params", "[", "'body_pose'", "]", ",", "np", ".", "ndarray", ",", "'body_pose'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.check_pred_format.assert_smpl_param_shape": [[49, 58], ["check_pred_format.assert_shape", "check_pred_format.assert_shape", "check_pred_format.assert_shape", "check_pred_format.assert_shape", "check_pred_format.assert_shape", "check_pred_format.assert_shape"], "function", ["home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.check_pred_format.assert_shape", "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.check_pred_format.assert_shape", "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.check_pred_format.assert_shape", "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.check_pred_format.assert_shape", "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.check_pred_format.assert_shape", "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.check_pred_format.assert_shape"], ["", "def", "assert_smpl_param_shape", "(", "params", ",", "pos2rot", ",", "num_betas", ")", ":", "\n", "    ", "assert_shape", "(", "params", "[", "'transl'", "]", ",", "(", "1", ",", "3", ")", ",", "'transl'", ")", "\n", "assert_shape", "(", "params", "[", "'betas'", "]", ",", "(", "1", ",", "num_betas", ")", ",", "'betas'", ")", "\n", "if", "pos2rot", ":", "\n", "        ", "assert_shape", "(", "params", "[", "'global_orient'", "]", ",", "(", "1", ",", "1", ",", "3", ")", ",", "'global_orient'", ")", "\n", "assert_shape", "(", "params", "[", "'body_pose'", "]", ",", "(", "1", ",", "23", ",", "3", ")", ",", "'body_pose'", ")", "\n", "", "else", ":", "\n", "        ", "assert_shape", "(", "params", "[", "'global_orient'", "]", ",", "(", "1", ",", "1", ",", "3", ",", "3", ")", ",", "'global_orient'", ")", "\n", "assert_shape", "(", "params", "[", "'body_pose'", "]", ",", "(", "1", ",", "23", ",", "3", ",", "3", ")", ",", "'body_pose'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.check_pred_format.assert_smplx_param_keys": [[60, 81], ["check_pred_format.assert_type", "check_pred_format.assert_type", "check_pred_format.assert_type", "check_pred_format.assert_type", "check_pred_format.assert_type", "check_pred_format.assert_type", "check_pred_format.assert_type", "check_pred_format.assert_type", "check_pred_format.assert_type", "check_pred_format.assert_type", "params.keys", "params.keys", "params.keys", "params.keys", "params.keys", "params.keys", "params.keys", "params.keys", "params.keys", "params.keys"], "function", ["home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.check_pred_format.assert_type", "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.check_pred_format.assert_type", "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.check_pred_format.assert_type", "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.check_pred_format.assert_type", "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.check_pred_format.assert_type", "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.check_pred_format.assert_type", "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.check_pred_format.assert_type", "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.check_pred_format.assert_type", "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.check_pred_format.assert_type", "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.check_pred_format.assert_type"], ["", "", "def", "assert_smplx_param_keys", "(", "params", ")", ":", "\n", "    ", "assert", "'transl'", "in", "params", ".", "keys", "(", ")", "\n", "assert_type", "(", "params", "[", "'transl'", "]", ",", "np", ".", "ndarray", ",", "'transl'", ")", "\n", "assert", "'betas'", "in", "params", ".", "keys", "(", ")", "\n", "assert_type", "(", "params", "[", "'betas'", "]", ",", "np", ".", "ndarray", ",", "'betas'", ")", "\n", "assert", "'global_orient'", "in", "params", ".", "keys", "(", ")", "\n", "assert_type", "(", "params", "[", "'global_orient'", "]", ",", "np", ".", "ndarray", ",", "'global_orient'", ")", "\n", "assert", "'body_pose'", "in", "params", ".", "keys", "(", ")", "\n", "assert_type", "(", "params", "[", "'body_pose'", "]", ",", "np", ".", "ndarray", ",", "'body_pose'", ")", "\n", "assert", "'left_hand_pose'", "in", "params", ".", "keys", "(", ")", "\n", "assert_type", "(", "params", "[", "'left_hand_pose'", "]", ",", "np", ".", "ndarray", ",", "'left_hand_pose'", ")", "\n", "assert", "'right_hand_pose'", "in", "params", ".", "keys", "(", ")", "\n", "assert_type", "(", "params", "[", "'right_hand_pose'", "]", ",", "np", ".", "ndarray", ",", "'right_hand_pose'", ")", "\n", "assert", "'leye_pose'", "in", "params", ".", "keys", "(", ")", "\n", "assert_type", "(", "params", "[", "'leye_pose'", "]", ",", "np", ".", "ndarray", ",", "'leye_pose'", ")", "\n", "assert", "'reye_pose'", "in", "params", ".", "keys", "(", ")", "\n", "assert_type", "(", "params", "[", "'reye_pose'", "]", ",", "np", ".", "ndarray", ",", "'reye_pose'", ")", "\n", "assert", "'jaw_pose'", "in", "params", ".", "keys", "(", ")", "\n", "assert_type", "(", "params", "[", "'jaw_pose'", "]", ",", "np", ".", "ndarray", ",", "'jaw_pose'", ")", "\n", "assert", "'expression'", "in", "params", ".", "keys", "(", ")", "\n", "assert_type", "(", "params", "[", "'expression'", "]", ",", "np", ".", "ndarray", ",", "'expression'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.check_pred_format.assert_smplx_param_shape": [[83, 103], ["check_pred_format.assert_shape", "check_pred_format.assert_shape", "check_pred_format.assert_shape", "check_pred_format.assert_shape", "check_pred_format.assert_shape", "check_pred_format.assert_shape", "check_pred_format.assert_shape", "check_pred_format.assert_shape", "check_pred_format.assert_shape", "check_pred_format.assert_shape", "check_pred_format.assert_shape", "check_pred_format.assert_shape", "check_pred_format.assert_shape", "check_pred_format.assert_shape", "check_pred_format.assert_shape", "check_pred_format.assert_shape", "check_pred_format.assert_shape"], "function", ["home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.check_pred_format.assert_shape", "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.check_pred_format.assert_shape", "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.check_pred_format.assert_shape", "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.check_pred_format.assert_shape", "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.check_pred_format.assert_shape", "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.check_pred_format.assert_shape", "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.check_pred_format.assert_shape", "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.check_pred_format.assert_shape", "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.check_pred_format.assert_shape", "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.check_pred_format.assert_shape", "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.check_pred_format.assert_shape", "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.check_pred_format.assert_shape", "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.check_pred_format.assert_shape", "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.check_pred_format.assert_shape", "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.check_pred_format.assert_shape", "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.check_pred_format.assert_shape", "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.check_pred_format.assert_shape"], ["", "def", "assert_smplx_param_shape", "(", "params", ",", "pos2rot", ",", "num_betas", ")", ":", "\n", "    ", "assert_shape", "(", "params", "[", "'transl'", "]", ",", "(", "1", ",", "3", ")", ",", "'transl'", ")", "\n", "assert_shape", "(", "params", "[", "'betas'", "]", ",", "(", "1", ",", "num_betas", ")", ",", "'betas'", ")", "\n", "assert_shape", "(", "params", "[", "'expression'", "]", ",", "(", "1", ",", "10", ")", ",", "'expression'", ")", "\n", "if", "pos2rot", ":", "\n", "        ", "assert_shape", "(", "params", "[", "'global_orient'", "]", ",", "(", "1", ",", "3", ")", ",", "'global_orient'", ")", "\n", "assert_shape", "(", "params", "[", "'body_pose'", "]", ",", "(", "1", ",", "63", ")", ",", "'body_pose'", ")", "\n", "assert_shape", "(", "params", "[", "'left_hand_pose'", "]", ",", "(", "1", ",", "45", ")", ",", "'left_hand_pose'", ")", "\n", "assert_shape", "(", "params", "[", "'right_hand_pose'", "]", ",", "(", "1", ",", "45", ")", ",", "'right_hand_pose'", ")", "\n", "assert_shape", "(", "params", "[", "'leye_pose'", "]", ",", "(", "1", ",", "3", ")", ",", "'leye_pose'", ")", "\n", "assert_shape", "(", "params", "[", "'reye_pose'", "]", ",", "(", "1", ",", "3", ")", ",", "'reye_pose'", ")", "\n", "assert_shape", "(", "params", "[", "'jaw_pose'", "]", ",", "(", "1", ",", "3", ")", ",", "'jaw_pose'", ")", "\n", "", "else", ":", "\n", "        ", "assert_shape", "(", "params", "[", "'global_orient'", "]", ",", "(", "1", ",", "1", ",", "3", ",", "3", ")", ",", "'global_orient'", ")", "\n", "assert_shape", "(", "params", "[", "'body_pose'", "]", ",", "(", "1", ",", "21", ",", "3", ",", "3", ")", ",", "'body_pose'", ")", "\n", "assert_shape", "(", "params", "[", "'left_hand_pose'", "]", ",", "(", "1", ",", "15", ",", "3", ",", "3", ")", ",", "'left_hand_pose'", ")", "\n", "assert_shape", "(", "params", "[", "'right_hand_pose'", "]", ",", "(", "1", ",", "15", ",", "3", ",", "3", ")", ",", "'right_hand_pose'", ")", "\n", "assert_shape", "(", "params", "[", "'leye_pose'", "]", ",", "(", "1", ",", "1", ",", "3", ",", "3", ")", ",", "'leye_pose'", ")", "\n", "assert_shape", "(", "params", "[", "'reye_pose'", "]", ",", "(", "1", ",", "1", ",", "3", ",", "3", ")", ",", "'reye_pose'", ")", "\n", "assert_shape", "(", "params", "[", "'jaw_pose'", "]", ",", "(", "1", ",", "1", ",", "3", ",", "3", ")", ",", "'jaw_pose'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.check_pred_format.check_smpl": [[105, 154], ["pickle.load", "pred_param[].squeeze", "check_pred_format.assert_type", "open", "pred_param[].squeeze", "pred_param[].squeeze", "check_pred_format.assert_type", "check_pred_format.assert_type", "check_pred_format.assert_shape", "pickle.load.keys", "ValueError", "logging.warning", "pickle.load.keys", "pickle.load.keys", "ValueError", "logging.warning", "pickle.load.keys", "check_pred_format.assert_smpl_param_keys", "check_pred_format.assert_smpl_param_shape", "KeyError", "len", "len", "pickle.load.keys", "pickle.load.keys", "KeyError", "KeyError", "pickle.load.keys"], "function", ["home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.load_predictions.load", "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.check_pred_format.assert_type", "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.check_pred_format.assert_type", "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.check_pred_format.assert_type", "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.check_pred_format.assert_shape", "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.check_pred_format.assert_smpl_param_keys", "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.check_pred_format.assert_smpl_param_shape"], ["", "", "def", "check_smpl", "(", "pred_file", ")", ":", "\n", "    ", "pred_param", "=", "pickle", ".", "load", "(", "open", "(", "pred_file", ",", "'rb'", ")", ",", "encoding", "=", "'latin1'", ")", "\n", "\n", "if", "'allSmplJoints3d'", "in", "pred_param", ".", "keys", "(", ")", "and", "'verts'", "in", "pred_param", ".", "keys", "(", ")", ":", "\n", "        ", "joints3d", "=", "pred_param", "[", "'allSmplJoints3d'", "]", ".", "squeeze", "(", ")", "\n", "verts3d", "=", "pred_param", "[", "'verts'", "]", ".", "squeeze", "(", ")", "\n", "#Instance should be numpy array", "\n", "assert_type", "(", "verts3d", ",", "np", ".", "ndarray", ",", "'verts'", ")", "\n", "assert_type", "(", "joints3d", ",", "np", ".", "ndarray", ",", "'allSmplJoints3d'", ")", "\n", "#SMPL vertices shape should be (6890,3)", "\n", "assert_shape", "(", "verts3d", ",", "(", "6890", ",", "3", ")", ",", "'verts'", ")", "\n", "if", "len", "(", "joints3d", ".", "shape", ")", "!=", "2", "or", "joints3d", ".", "shape", "[", "1", "]", "!=", "3", "or", "joints3d", ".", "shape", "[", "0", "]", "<", "24", ":", "\n", "            ", "raise", "ValueError", "(", "'joints should be of shape (24,3) but you ar providing {}'", ".", "format", "(", "joints3d", ".", "shape", ")", ")", "\n", "", "if", "joints3d", ".", "shape", "[", "0", "]", ">", "24", ":", "\n", "            ", "logging", ".", "warning", "(", "' Only first 24 3d joints will be used for body evaluation but you are providing {} joints'", ".", "format", "(", "joints3d", ".", "shape", "[", "0", "]", ")", ")", "\n", "\n", "", "", "elif", "'params'", "in", "pred_param", ".", "keys", "(", ")", ":", "\n", "#Default 10 betas will be used for SMPL adult and 11 for SMPL kid", "\n", "        ", "num_betas", "=", "10", "\n", "#Optional parameter, default is adult", "\n", "if", "'kid_flag'", "in", "pred_param", ".", "keys", "(", ")", ":", "\n", "            ", "kid_flag", "=", "pred_param", "[", "'kid_flag'", "]", "\n", "if", "kid_flag", ":", "\n", "                ", "num_betas", "=", "11", "\n", "", "if", "kid_flag", "not", "in", "[", "True", ",", "False", "]", ":", "\n", "                ", "raise", "KeyError", "(", "'Either True or False should be provided in kid_flag. Found '", ".", "format", "(", "kid_flag", ")", ")", "\n", "", "if", "kid_flag", "and", "'params'", "in", "pred_param", ".", "keys", "(", ")", "and", "pred_param", "[", "'params'", "]", "[", "'betas'", "]", ".", "shape", "[", "1", "]", "!=", "11", ":", "\n", "                ", "raise", "KeyError", "(", "'For kid, 11 betas are used. Please check the ReadMe on Github'", ")", "\n", "\n", "", "", "params", "=", "pred_param", "[", "'params'", "]", "\n", "#Check if all smpl params keys are present", "\n", "assert_smpl_param_keys", "(", "params", ")", "\n", "#Check shape of smpl params", "\n", "if", "'pose2rot'", "in", "pred_param", ".", "keys", "(", ")", ":", "\n", "            ", "pose2rot", "=", "pred_param", "[", "'pose2rot'", "]", "\n", "", "else", ":", "\n", "            ", "pose2rot", "=", "True", "\n", "", "assert_smpl_param_shape", "(", "params", ",", "pose2rot", ",", "num_betas", ")", "\n", "", "else", ":", "\n", "        ", "raise", "KeyError", "(", "'Either params or allSMPLJoints3d and verts needs to be provided in key. Please check the ReadMe for details and run the evaluation code on github'", ")", "\n", "\n", "", "assert", "'joints'", "in", "pred_param", ".", "keys", "(", ")", "\n", "joints", "=", "pred_param", "[", "'joints'", "]", ".", "squeeze", "(", ")", "\n", "assert_type", "(", "joints", ",", "np", ".", "ndarray", ",", "'joints'", ")", "\n", "#Only first 24 joints will be used for matching", "\n", "if", "len", "(", "joints", ".", "shape", ")", "!=", "2", "or", "joints", ".", "shape", "[", "1", "]", "<", "2", "or", "joints", ".", "shape", "[", "0", "]", "<", "24", ":", "\n", "        ", "raise", "ValueError", "(", "'joints should be of shape (24,2) but you are providing {}'", ".", "format", "(", "joints", ".", "shape", ")", ")", "\n", "", "if", "joints", ".", "shape", "[", "0", "]", ">", "24", ":", "\n", "        ", "logging", ".", "warning", "(", "' Only first 24 joints will be used in matching but you are providing {} joints'", ".", "format", "(", "joints", ".", "shape", "[", "0", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.check_pred_format.check_smplx": [[155, 216], ["pickle.load", "check_pred_format.assert_type", "open", "pred_param[].squeeze", "pred_param[].squeeze", "check_pred_format.assert_type", "check_pred_format.assert_type", "check_pred_format.assert_shape", "pickle.load.keys", "ValueError", "logging.warning", "pickle.load.keys", "pickle.load.keys", "ValueError", "logging.warning", "pickle.load.keys", "check_pred_format.assert_smplx_param_keys", "check_pred_format.assert_smplx_param_shape", "KeyError", "len", "len", "pickle.load.keys", "pickle.load.keys", "pickle.load.keys", "pickle.load.keys", "KeyError", "KeyError", "KeyError", "ValueError", "list", "KeyError", "pickle.load.keys", "pickle.load.keys", "pickle.load.keys", "range"], "function", ["home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.load_predictions.load", "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.check_pred_format.assert_type", "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.check_pred_format.assert_type", "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.check_pred_format.assert_type", "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.check_pred_format.assert_shape", "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.check_pred_format.assert_smplx_param_keys", "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.check_pred_format.assert_smplx_param_shape"], ["", "", "def", "check_smplx", "(", "pred_file", ")", ":", "\n", "    ", "pred_param", "=", "pickle", ".", "load", "(", "open", "(", "pred_file", ",", "'rb'", ")", ",", "encoding", "=", "'latin1'", ")", "\n", "\n", "if", "'allSmplJoints3d'", "in", "pred_param", ".", "keys", "(", ")", "and", "'verts'", "in", "pred_param", ".", "keys", "(", ")", ":", "\n", "        ", "joints3d", "=", "pred_param", "[", "'allSmplJoints3d'", "]", ".", "squeeze", "(", ")", "\n", "verts3d", "=", "pred_param", "[", "'verts'", "]", ".", "squeeze", "(", ")", "\n", "#Instance should be numpy array", "\n", "assert_type", "(", "verts3d", ",", "np", ".", "ndarray", ",", "'verts'", ")", "\n", "assert_type", "(", "joints3d", ",", "np", ".", "ndarray", ",", "'allSmplJoints3d'", ")", "\n", "#SMPL-X vertices shape should be (10475,3)", "\n", "assert_shape", "(", "verts3d", ",", "(", "10475", ",", "3", ")", ",", "'verts'", ")", "\n", "if", "len", "(", "joints3d", ".", "shape", ")", "!=", "2", "or", "joints3d", ".", "shape", "[", "1", "]", "!=", "3", "or", "joints3d", ".", "shape", "[", "0", "]", "<", "127", ":", "\n", "            ", "raise", "ValueError", "(", "'joints should be of shape (127,3) but you ar providing {}'", ".", "format", "(", "joints3d", ".", "shape", ")", ")", "\n", "", "if", "joints3d", ".", "shape", "[", "0", "]", ">", "127", ":", "\n", "            ", "logging", ".", "warning", "(", "' Only first 127 3d joints will be used for body,hands and face evaluation but you are providing {} joints'", ".", "format", "(", "joints3d", ".", "shape", "[", "0", "]", ")", ")", "\n", "\n", "", "", "elif", "'params'", "in", "pred_param", ".", "keys", "(", ")", ":", "\n", "        ", "num_betas", "=", "10", "\n", "#Optional parameter, by default neutral", "\n", "if", "'gender'", "in", "pred_param", ".", "keys", "(", ")", ":", "\n", "            ", "gender", "=", "pred_param", "[", "'gender'", "]", "\n", "if", "gender", "not", "in", "[", "'male'", ",", "'female'", ",", "'neutral'", "]", ":", "\n", "                ", "raise", "KeyError", "(", "'Gender {} is not correct. It should be either male, female or neutral'", ".", "format", "(", "gender", ")", ")", "\n", "#Optional parameter, by default adult", "\n", "", "", "if", "'kid_flag'", "in", "pred_param", ".", "keys", "(", ")", ":", "\n", "            ", "kid_flag", "=", "pred_param", "[", "'kid_flag'", "]", "\n", "if", "kid_flag", "not", "in", "[", "True", ",", "False", "]", ":", "\n", "                ", "raise", "KeyError", "(", "'Either True or False should be provided in kid_flag. Found '", ".", "format", "(", "kid_flag", ")", ")", "\n", "", "if", "kid_flag", "and", "'params'", "in", "pred_param", ".", "keys", "(", ")", "and", "pred_param", "[", "'params'", "]", "[", "'betas'", "]", ".", "shape", "[", "1", "]", "!=", "11", ":", "\n", "                ", "raise", "KeyError", "(", "'For kid, 11 betas should be provided in betas. Please check the ReadMe on Github'", ")", "\n", "", "if", "kid_flag", "and", "'params'", "in", "pred_param", ".", "keys", "(", ")", "and", "'num_betas'", "in", "pred_param", ".", "keys", "(", ")", "and", "pred_param", "[", "'num_betas'", "]", "!=", "11", ":", "\n", "                ", "raise", "ValueError", "(", "'For kid, 11 betas should be provided in num_betas. Please check the ReadMe on Github'", ")", "\n", "\n", "#Optional parameter, by default 10        ", "\n", "", "", "if", "'num_betas'", "in", "pred_param", ".", "keys", "(", ")", ":", "\n", "            ", "num_betas", "=", "pred_param", "[", "'num_betas'", "]", "\n", "if", "num_betas", "not", "in", "list", "(", "range", "(", "10", ",", "300", ")", ")", ":", "\n", "                ", "raise", "KeyError", "(", "'num_betas should be greater than 10 and less than 300. Found '", ".", "format", "(", "num_betas", ")", ")", "\n", "\n", "", "", "params", "=", "pred_param", "[", "'params'", "]", "\n", "#Check if all smpl params keys are present", "\n", "assert_smplx_param_keys", "(", "params", ")", "\n", "#Check shape of smpl params", "\n", "if", "'pose2rot'", "in", "pred_param", ".", "keys", "(", ")", ":", "\n", "            ", "pose2rot", "=", "pred_param", "[", "'pose2rot'", "]", "\n", "", "else", ":", "\n", "            ", "pose2rot", "=", "True", "\n", "", "assert_smplx_param_shape", "(", "params", ",", "pose2rot", ",", "num_betas", ")", "\n", "\n", "\n", "", "else", ":", "\n", "        ", "raise", "KeyError", "(", "'Either params or allSMPLJoints3d and verts needs to be provided in key. Please check the ReadMe for details and run the evaluation code on github'", ")", "\n", "\n", "", "assert", "'joints'", "in", "pred_param", ".", "keys", "(", ")", "\n", "joints", "=", "pred_param", "[", "'joints'", "]", "\n", "assert_type", "(", "pred_param", "[", "'joints'", "]", ",", "np", ".", "ndarray", ",", "'joints'", ")", "\n", "#Only first 24 joints will be used for matching", "\n", "if", "len", "(", "joints", ".", "shape", ")", "!=", "2", "or", "joints", ".", "shape", "[", "1", "]", "<", "2", "or", "joints", ".", "shape", "[", "0", "]", "<", "24", ":", "\n", "        ", "raise", "ValueError", "(", "'joints should be of shape (24,2) but you are providing {}'", ".", "format", "(", "joints", ".", "shape", ")", ")", "\n", "", "if", "joints", ".", "shape", "[", "0", "]", ">", "24", ":", "\n", "        ", "logging", ".", "warning", "(", "' Only first 24 projected joints in joints key will be used in matching but you are providing {} joints'", ".", "format", "(", "joints", ".", "shape", "[", "0", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.check_pred_format.check_pred_file": [[218, 251], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "glob.glob", "zipfile.ZipFile", "zip_ref.extractall", "os.path.join", "len", "EOFError", "logging.info", "check_pred_format.check_smpl", "KeyError", "logging.info", "check_pred_format.check_smplx"], "function", ["home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.check_pred_format.check_smpl", "home.repos.pwc.inspect_result.pixelite1201_agora_evaluation.agora_evaluation.check_pred_format.check_smplx"], ["", "", "def", "check_pred_file", "(", "*", "args", ")", ":", "\n", "    ", "\"\"\"Function to check the prediction file\"\"\"", "\n", "\n", "# Parser", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--predZip'", ",", "type", "=", "str", ",", "\n", "default", "=", "''", ")", "\n", "parser", ".", "add_argument", "(", "'--extractZipFolder'", ",", "type", "=", "str", ",", "\n", "default", "=", "''", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--modeltype'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "'SMPLX'", ",", "\n", "help", "=", "'SMPL or SMPLX'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", "*", "args", ")", "\n", "path_to_zip_file", "=", "args", ".", "predZip", "\n", "with", "zipfile", ".", "ZipFile", "(", "path_to_zip_file", ",", "'r'", ")", "as", "zip_ref", ":", "\n", "        ", "zip_ref", ".", "extractall", "(", "args", ".", "extractZipFolder", ")", "\n", "\n", "", "all_files", "=", "glob", "(", "os", ".", "path", ".", "join", "(", "args", ".", "extractZipFolder", ",", "'predictions'", ",", "'*'", ")", ")", "\n", "if", "len", "(", "all_files", ")", "==", "0", ":", "\n", "        ", "raise", "EOFError", "(", "'No files are present inside zip'", ")", "\n", "", "if", "args", ".", "modeltype", "==", "'SMPL'", ":", "\n", "        ", "for", "pred_file", "in", "all_files", ":", "\n", "            ", "logging", ".", "info", "(", "'Reading file {}'", ".", "format", "(", "pred_file", ")", ")", "\n", "check_smpl", "(", "pred_file", ")", "\n", "", "", "elif", "args", ".", "modeltype", "==", "'SMPLX'", ":", "\n", "        ", "for", "pred_file", "in", "all_files", ":", "\n", "            ", "logging", ".", "info", "(", "'Reading file {}'", ".", "format", "(", "pred_file", ")", ")", "\n", "check_smplx", "(", "pred_file", ")", "\n", "", "", "else", ":", "\n", "        ", "raise", "KeyError", "(", "'Only SMPL/SMPLX model type are supported'", ")", "\n", "\n"]]}