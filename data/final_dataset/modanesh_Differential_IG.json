{"home.repos.pwc.inspect_result.modanesh_Differential_IG.None.env_wrapper.AtariWrapper.__init__": [[11, 17], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "env", ")", ":", "\n", "        ", "self", ".", "env", "=", "env", "\n", "self", ".", "observation_space", "=", "self", ".", "env", ".", "observation_space", "\n", "self", ".", "reward_range", "=", "self", ".", "env", ".", "reward_range", "\n", "self", ".", "metadata", "=", "self", ".", "env", ".", "metadata", "\n", "self", ".", "spec", "=", "self", ".", "env", ".", "spec", "\n", "\n"]], "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.env_wrapper.AtariWrapper.step": [[18, 23], ["env_wrapper.AtariWrapper.env.step", "env_wrapper.AtariWrapper.process_atari_image"], "methods", ["home.repos.pwc.inspect_result.modanesh_Differential_IG.None.env_wrapper.PongWrapper.step", "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.env_wrapper.BowlingWrapper.process_atari_image"], ["", "def", "step", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "state", ",", "reward", ",", "done", ",", "info", "=", "self", ".", "env", ".", "step", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "info", "[", "'org_obs'", "]", "=", "state", "\n", "state", "=", "self", ".", "process_atari_image", "(", "state", ")", "\n", "return", "state", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.env_wrapper.AtariWrapper.action_space": [[24, 27], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "action_space", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "env", ".", "action_space", "\n", "\n"]], "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.env_wrapper.AtariWrapper.close": [[28, 30], ["env_wrapper.AtariWrapper.env.close"], "methods", ["home.repos.pwc.inspect_result.modanesh_Differential_IG.None.env_wrapper.AtariWrapper.close"], ["", "def", "close", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "env", ".", "close", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.env_wrapper.AtariWrapper.render": [[31, 43], ["env_wrapper.AtariWrapper.env.render", "env_wrapper.AtariWrapper.env.env.viewer.imshow", "rendering.SimpleImageViewer"], "methods", ["home.repos.pwc.inspect_result.modanesh_Differential_IG.None.env_wrapper.AtariWrapper.render"], ["", "def", "render", "(", "self", ",", "mode", "=", "'human'", ",", "inspect", "=", "False", ",", "img", "=", "None", ")", ":", "\n", "        ", "if", "not", "inspect", ":", "\n", "            ", "return", "self", ".", "env", ".", "render", "(", "mode", ")", "\n", "", "else", ":", "\n", "            ", "if", "mode", "==", "'rgb_array'", ":", "\n", "                ", "return", "img", "\n", "", "elif", "mode", "==", "'human'", ":", "\n", "                ", "from", "gym", ".", "envs", ".", "classic_control", "import", "rendering", "\n", "if", "self", ".", "env", ".", "env", ".", "viewer", "is", "None", ":", "\n", "                    ", "self", ".", "env", ".", "env", ".", "viewer", "=", "rendering", ".", "SimpleImageViewer", "(", ")", "\n", "", "self", ".", "env", ".", "env", ".", "viewer", ".", "imshow", "(", "img", ")", "\n", "return", "self", ".", "env", ".", "env", ".", "viewer", ".", "isopen", "\n", "\n"]], "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.env_wrapper.AtariWrapper.reset": [[44, 50], ["env_wrapper.AtariWrapper.env.reset", "env_wrapper.AtariWrapper.process_atari_image", "env_wrapper.AtariWrapper.process_atari_image"], "methods", ["home.repos.pwc.inspect_result.modanesh_Differential_IG.None.env_wrapper.AtariWrapper.reset", "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.env_wrapper.BowlingWrapper.process_atari_image", "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.env_wrapper.BowlingWrapper.process_atari_image"], ["", "", "", "def", "reset", "(", "self", ",", "inspect", "=", "False", ")", ":", "\n", "        ", "state", "=", "self", ".", "env", ".", "reset", "(", ")", "\n", "if", "inspect", ":", "\n", "            ", "return", "self", ".", "process_atari_image", "(", "state", ")", ",", "state", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "process_atari_image", "(", "state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.env_wrapper.AtariWrapper.seed": [[51, 53], ["env_wrapper.AtariWrapper.env.seed"], "methods", ["home.repos.pwc.inspect_result.modanesh_Differential_IG.None.env_wrapper.AtariWrapper.seed"], ["", "", "def", "seed", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "env", ".", "seed", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.env_wrapper.AtariWrapper.process_atari_image": [[54, 57], ["scipy.misc.imresize().astype().reshape", "scipy.misc.imresize().astype", "scipy.misc.imresize", "img[].mean"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "process_atari_image", "(", "img", ")", ":", "\n", "        ", "return", "imresize", "(", "img", "[", "5", ":", "195", "]", ".", "mean", "(", "2", ")", ",", "(", "80", ",", "80", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", ".", "reshape", "(", "1", ",", "80", ",", "80", ")", "/", "255.0", "\n", "\n"]], "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.env_wrapper.Crop35And195.__init__": [[60, 62], ["env_wrapper.AtariWrapper.__init__"], "methods", ["home.repos.pwc.inspect_result.modanesh_Differential_IG.None.model_def.ControlMMNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env", ")", ":", "\n", "        ", "AtariWrapper", ".", "__init__", "(", "self", ",", "env", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.env_wrapper.Crop35And195.process_atari_image": [[63, 66], ["scipy.misc.imresize().astype().reshape", "scipy.misc.imresize().astype", "scipy.misc.imresize", "img[].mean"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "process_atari_image", "(", "img", ")", ":", "\n", "        ", "return", "imresize", "(", "img", "[", "35", ":", "195", "]", ".", "mean", "(", "2", ")", ",", "(", "80", ",", "80", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", ".", "reshape", "(", "1", ",", "80", ",", "80", ")", "/", "255.0", "\n", "\n"]], "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.env_wrapper.Crop15And195.__init__": [[69, 71], ["env_wrapper.AtariWrapper.__init__"], "methods", ["home.repos.pwc.inspect_result.modanesh_Differential_IG.None.model_def.ControlMMNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env", ")", ":", "\n", "        ", "AtariWrapper", ".", "__init__", "(", "self", ",", "env", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.env_wrapper.Crop15And195.process_atari_image": [[72, 75], ["scipy.misc.imresize().astype().reshape", "scipy.misc.imresize().astype", "scipy.misc.imresize", "img[].mean"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "process_atari_image", "(", "img", ")", ":", "\n", "        ", "return", "imresize", "(", "img", "[", ":", "195", "]", ".", "mean", "(", "2", ")", ",", "(", "80", ",", "80", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", ".", "reshape", "(", "1", ",", "80", ",", "80", ")", "/", "255.0", "\n", "\n"]], "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.env_wrapper.PongWrapper.__init__": [[78, 80], ["env_wrapper.Crop35And195.__init__"], "methods", ["home.repos.pwc.inspect_result.modanesh_Differential_IG.None.model_def.ControlMMNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env", ")", ":", "\n", "        ", "Crop35And195", ".", "__init__", "(", "self", ",", "env", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.env_wrapper.PongWrapper.step": [[81, 92], ["env_wrapper.PongWrapper.env.step", "env_wrapper.PongWrapper.process_atari_image", "Exception"], "methods", ["home.repos.pwc.inspect_result.modanesh_Differential_IG.None.env_wrapper.PongWrapper.step", "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.env_wrapper.BowlingWrapper.process_atari_image"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "if", "action", ">", "2", ":", "\n", "            ", "raise", "Exception", "(", "'Unknown Action'", ")", "\n", "", "if", "action", "==", "1", ":", "\n", "            ", "action", "=", "4", "\n", "", "elif", "action", "==", "2", ":", "\n", "            ", "action", "=", "5", "\n", "", "state", ",", "reward", ",", "done", ",", "info", "=", "self", ".", "env", ".", "step", "(", "action", ")", "\n", "info", "[", "'org_obs'", "]", "=", "state", "\n", "state", "=", "self", ".", "process_atari_image", "(", "state", ")", "\n", "return", "state", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.env_wrapper.PongWrapper.action_space": [[93, 96], ["gym.spaces.discrete.Discrete"], "methods", ["None"], ["", "@", "property", "\n", "def", "action_space", "(", "self", ")", ":", "\n", "        ", "return", "gym", ".", "spaces", ".", "discrete", ".", "Discrete", "(", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.env_wrapper.SpaceInvaderWrapper.__init__": [[99, 101], ["env_wrapper.Crop15And195.__init__"], "methods", ["home.repos.pwc.inspect_result.modanesh_Differential_IG.None.model_def.ControlMMNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env", ")", ":", "\n", "        ", "Crop15And195", ".", "__init__", "(", "self", ",", "env", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.env_wrapper.SpaceInvaderWrapper.action_space": [[102, 105], ["gym.spaces.discrete.Discrete"], "methods", ["None"], ["", "@", "property", "\n", "def", "action_space", "(", "self", ")", ":", "\n", "        ", "return", "gym", ".", "spaces", ".", "discrete", ".", "Discrete", "(", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.env_wrapper.EnduroWrapper.__init__": [[108, 110], ["env_wrapper.AtariWrapper.__init__"], "methods", ["home.repos.pwc.inspect_result.modanesh_Differential_IG.None.model_def.ControlMMNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env", ")", ":", "\n", "        ", "AtariWrapper", ".", "__init__", "(", "self", ",", "env", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.env_wrapper.EnduroWrapper.process_atari_image": [[111, 114], ["scipy.misc.imresize().astype().reshape", "scipy.misc.imresize().astype", "scipy.misc.imresize", "img[].mean"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "process_atari_image", "(", "img", ")", ":", "\n", "        ", "return", "imresize", "(", "img", "[", "0", ":", "155", ",", "10", ":", "]", ".", "mean", "(", "2", ")", ",", "(", "80", ",", "80", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", ".", "reshape", "(", "1", ",", "80", ",", "80", ")", "/", "255.0", "\n", "\n"]], "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.env_wrapper.BeamRiderWrapper.__init__": [[117, 119], ["env_wrapper.AtariWrapper.__init__"], "methods", ["home.repos.pwc.inspect_result.modanesh_Differential_IG.None.model_def.ControlMMNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env", ")", ":", "\n", "        ", "AtariWrapper", ".", "__init__", "(", "self", ",", "env", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.env_wrapper.BeamRiderWrapper.process_atari_image": [[120, 123], ["scipy.misc.imresize().astype().reshape", "scipy.misc.imresize().astype", "scipy.misc.imresize", "img[].mean"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "process_atari_image", "(", "img", ")", ":", "\n", "        ", "return", "imresize", "(", "img", "[", "30", ":", "180", ",", "10", ":", "]", ".", "mean", "(", "2", ")", ",", "(", "80", ",", "80", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", ".", "reshape", "(", "1", ",", "80", ",", "80", ")", "/", "255.0", "\n", "\n"]], "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.env_wrapper.FreewayWrapper.__init__": [[126, 128], ["env_wrapper.AtariWrapper.__init__"], "methods", ["home.repos.pwc.inspect_result.modanesh_Differential_IG.None.model_def.ControlMMNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env", ")", ":", "\n", "        ", "AtariWrapper", ".", "__init__", "(", "self", ",", "env", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.env_wrapper.FreewayWrapper.process_atari_image": [[129, 132], ["scipy.misc.imresize().astype().reshape", "scipy.misc.imresize().astype", "scipy.misc.imresize", "img[].mean"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "process_atari_image", "(", "img", ")", ":", "\n", "        ", "return", "imresize", "(", "img", "[", "25", ":", "195", ",", "10", ":", "]", ".", "mean", "(", "2", ")", ",", "(", "80", ",", "80", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", ".", "reshape", "(", "1", ",", "80", ",", "80", ")", "/", "255.0", "\n", "\n"]], "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.env_wrapper.BoxingWrapper.__init__": [[135, 137], ["env_wrapper.AtariWrapper.__init__"], "methods", ["home.repos.pwc.inspect_result.modanesh_Differential_IG.None.model_def.ControlMMNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env", ")", ":", "\n", "        ", "AtariWrapper", ".", "__init__", "(", "self", ",", "env", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.env_wrapper.BoxingWrapper.process_atari_image": [[138, 141], ["scipy.misc.imresize().astype().reshape", "scipy.misc.imresize().astype", "scipy.misc.imresize", "img[].mean"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "process_atari_image", "(", "img", ")", ":", "\n", "        ", "return", "imresize", "(", "img", "[", "15", ":", "180", ",", "30", ":", "130", "]", ".", "mean", "(", "2", ")", ",", "(", "80", ",", "80", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", ".", "reshape", "(", "1", ",", "80", ",", "80", ")", "/", "255.0", "\n", "\n"]], "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.env_wrapper.BreakoutWrapper.__init__": [[144, 146], ["env_wrapper.Crop35And195.__init__"], "methods", ["home.repos.pwc.inspect_result.modanesh_Differential_IG.None.model_def.ControlMMNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env", ")", ":", "\n", "        ", "Crop35And195", ".", "__init__", "(", "self", ",", "env", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.env_wrapper.QbertWrapper.__init__": [[149, 151], ["env_wrapper.AtariWrapper.__init__"], "methods", ["home.repos.pwc.inspect_result.modanesh_Differential_IG.None.model_def.ControlMMNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env", ")", ":", "\n", "        ", "AtariWrapper", ".", "__init__", "(", "self", ",", "env", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.env_wrapper.QbertWrapper.process_atari_image": [[152, 155], ["scipy.misc.imresize().astype().reshape", "scipy.misc.imresize().astype", "scipy.misc.imresize", "img[].mean"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "process_atari_image", "(", "img", ")", ":", "\n", "        ", "return", "imresize", "(", "img", "[", "30", ":", "190", ",", "10", ":", "150", "]", ".", "mean", "(", "2", ")", ",", "(", "80", ",", "80", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", ".", "reshape", "(", "1", ",", "80", ",", "80", ")", "/", "255.0", "\n", "\n"]], "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.env_wrapper.BowlingWrapper.__init__": [[158, 160], ["env_wrapper.AtariWrapper.__init__"], "methods", ["home.repos.pwc.inspect_result.modanesh_Differential_IG.None.model_def.ControlMMNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env", ")", ":", "\n", "        ", "AtariWrapper", ".", "__init__", "(", "self", ",", "env", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.env_wrapper.BowlingWrapper.action_space": [[161, 164], ["gym.spaces.discrete.Discrete"], "methods", ["None"], ["", "@", "property", "\n", "def", "action_space", "(", "self", ")", ":", "\n", "        ", "return", "gym", ".", "spaces", ".", "discrete", ".", "Discrete", "(", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.env_wrapper.BowlingWrapper.process_atari_image": [[165, 168], ["scipy.misc.imresize().astype().reshape", "scipy.misc.imresize().astype", "scipy.misc.imresize", "img[].mean"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "process_atari_image", "(", "img", ")", ":", "\n", "        ", "return", "imresize", "(", "img", "[", "105", ":", "172", ",", ":", "]", ".", "mean", "(", "2", ")", ",", "(", "80", ",", "80", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", ".", "reshape", "(", "1", ",", "80", ",", "80", ")", "/", "255.0", "\n", "\n"]], "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.env_wrapper.ElevatorActionWrapper.__init__": [[171, 173], ["env_wrapper.AtariWrapper.__init__"], "methods", ["home.repos.pwc.inspect_result.modanesh_Differential_IG.None.model_def.ControlMMNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env", ")", ":", "\n", "        ", "AtariWrapper", ".", "__init__", "(", "self", ",", "env", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.env_wrapper.atari_wrapper": [[175, 201], ["env_name.lower", "env_wrapper.PongWrapper", "env_name.lower.split", "env_name.lower.split", "gym.make", "env_wrapper.SpaceInvaderWrapper", "gym.make", "env_wrapper.EnduroWrapper", "gym.make", "env_wrapper.BeamRiderWrapper", "gym.make", "env_wrapper.FreewayWrapper", "gym.make", "env_wrapper.BoxingWrapper", "gym.make", "env_wrapper.BreakoutWrapper", "gym.make", "env_wrapper.QbertWrapper", "gym.make", "env_wrapper.BowlingWrapper", "gym.make", "env_wrapper.ElevatorActionWrapper", "env_wrapper.AtariWrapper", "gym.make", "gym.make"], "function", ["None"], ["", "", "def", "atari_wrapper", "(", "env_name", ")", ":", "\n", "    ", "x", "=", "env_name", ".", "lower", "(", ")", "\n", "x", "=", "x", ".", "split", "(", "'deterministic'", ")", "[", "0", "]", "if", "'deterministic'", "in", "x", "else", "x", ".", "split", "(", "'-'", ")", "[", "0", "]", "\n", "if", "x", "==", "'pong'", ":", "\n", "        ", "env", "=", "PongWrapper", "(", "gym", ".", "make", "(", "env_name", ")", ")", "\n", "", "elif", "x", "==", "'spaceinvaders'", ":", "\n", "        ", "env", "=", "SpaceInvaderWrapper", "(", "gym", ".", "make", "(", "env_name", ")", ")", "\n", "", "elif", "x", "==", "'enduro'", ":", "\n", "        ", "env", "=", "EnduroWrapper", "(", "gym", ".", "make", "(", "env_name", ")", ")", "\n", "", "elif", "x", "==", "'beamrider'", ":", "\n", "        ", "env", "=", "BeamRiderWrapper", "(", "gym", ".", "make", "(", "env_name", ")", ")", "\n", "", "elif", "x", "==", "'freeway'", ":", "\n", "        ", "env", "=", "FreewayWrapper", "(", "gym", ".", "make", "(", "env_name", ")", ")", "\n", "", "elif", "x", "==", "'boxing'", ":", "\n", "        ", "env", "=", "BoxingWrapper", "(", "gym", ".", "make", "(", "env_name", ")", ")", "\n", "", "elif", "x", "==", "'breakout'", ":", "\n", "        ", "env", "=", "BreakoutWrapper", "(", "gym", ".", "make", "(", "env_name", ")", ")", "\n", "", "elif", "x", "==", "'qbert'", ":", "\n", "        ", "env", "=", "QbertWrapper", "(", "gym", ".", "make", "(", "env_name", ")", ")", "\n", "", "elif", "x", "in", "[", "'bowling'", "]", ":", "\n", "        ", "env", "=", "BowlingWrapper", "(", "gym", ".", "make", "(", "env_name", ")", ")", "\n", "", "elif", "x", "in", "[", "'elevatoraction'", "]", ":", "\n", "        ", "env", "=", "ElevatorActionWrapper", "(", "gym", ".", "make", "(", "env_name", ")", ")", "\n", "", "else", ":", "\n", "        ", "env", "=", "AtariWrapper", "(", "gym", ".", "make", "(", "env_name", ")", ")", "\n", "", "return", "env", "\n", "", ""]], "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.tools.ensure_directory_exits": [[21, 35], ["os.path.exists", "os.makedirs"], "function", ["None"], ["def", "ensure_directory_exits", "(", "directory_path", ")", ":", "\n", "    ", "\"\"\"\n    Creates directory if path doesn't exist.\n\n    :param directory_path: path to directory to save stuff\n    :return: existing directory path\n    \"\"\"", "\n", "\n", "try", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "directory_path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "directory_path", ")", "\n", "", "", "except", "Exception", ":", "\n", "        ", "pass", "\n", "", "return", "directory_path", "\n", "\n"]], "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.tools.normalized_columns_initializer": [[37, 49], ["torch.randn", "torch.randn", "weights.size", "torch.sqrt", "torch.sqrt", "torch.randn.pow().unsqueeze().sum().expand_as", "torch.randn.pow().unsqueeze().sum", "torch.randn.pow().unsqueeze", "torch.randn.pow"], "function", ["None"], ["", "def", "normalized_columns_initializer", "(", "weights", ",", "std", "=", "1.0", ")", ":", "\n", "    ", "\"\"\"\n    Normalizing over a matrix.\n\n    :param weights: given matrix\n    :param std: standard deviation\n    :return: normalized matrix\n    \"\"\"", "\n", "\n", "out", "=", "torch", ".", "randn", "(", "weights", ".", "size", "(", ")", ")", "\n", "out", "*=", "std", "/", "torch", ".", "sqrt", "(", "out", ".", "pow", "(", "2", ")", ".", "unsqueeze", "(", "0", ")", ".", "sum", "(", "1", ")", ".", "expand_as", "(", "out", ")", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.tools.weights_init": [[51, 71], ["classname.find", "list", "numpy.prod", "numpy.sqrt", "m.weight.data.uniform_", "m.bias.data.fill_", "m.weight.data.size", "numpy.prod", "classname.find", "list", "numpy.sqrt", "m.weight.data.uniform_", "m.bias.data.fill_", "m.weight.data.size"], "function", ["None"], ["", "def", "weights_init", "(", "m", ")", ":", "\n", "    ", "\"\"\"\n    Weight initialization.\n    \"\"\"", "\n", "\n", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "weight_shape", "=", "list", "(", "m", ".", "weight", ".", "data", ".", "size", "(", ")", ")", "\n", "fan_in", "=", "np", ".", "prod", "(", "weight_shape", "[", "1", ":", "4", "]", ")", "\n", "fan_out", "=", "np", ".", "prod", "(", "weight_shape", "[", "2", ":", "4", "]", ")", "*", "weight_shape", "[", "0", "]", "\n", "w_bound", "=", "np", ".", "sqrt", "(", "6.", "/", "(", "fan_in", "+", "fan_out", ")", ")", "\n", "m", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "w_bound", ",", "w_bound", ")", "\n", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "", "elif", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ":", "\n", "        ", "weight_shape", "=", "list", "(", "m", ".", "weight", ".", "data", ".", "size", "(", ")", ")", "\n", "fan_in", "=", "weight_shape", "[", "1", "]", "\n", "fan_out", "=", "weight_shape", "[", "0", "]", "\n", "w_bound", "=", "np", ".", "sqrt", "(", "6.", "/", "(", "fan_in", "+", "fan_out", ")", ")", "\n", "m", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "w_bound", ",", "w_bound", ")", "\n", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.tools.plot_data": [[73, 96], ["logger.info", "matplotlib.grid", "matplotlib.title", "matplotlib.ylabel", "matplotlib.xlabel", "matplotlib.savefig", "matplotlib.clf", "len", "matplotlib.scatter", "matplotlib.plot", "os.path.join"], "function", ["None"], ["", "", "def", "plot_data", "(", "data_dict", ",", "plots_dir_path", ")", ":", "\n", "    ", "\"\"\"\n    Plotting given data.\n\n    :param data_dict: dictionary containing data\n    :param plots_dir_path: path to save plots\n    \"\"\"", "\n", "\n", "for", "x", "in", "data_dict", ":", "\n", "        ", "title", "=", "x", "[", "'title'", "]", "\n", "data", "=", "x", "[", "'data'", "]", "\n", "if", "len", "(", "data", ")", "==", "1", ":", "\n", "            ", "plt", ".", "scatter", "(", "[", "0", "]", ",", "data", ")", "\n", "", "else", ":", "\n", "            ", "plt", ".", "plot", "(", "data", ")", "\n", "", "plt", ".", "grid", "(", "True", ")", "\n", "plt", ".", "title", "(", "title", ")", "\n", "plt", ".", "ylabel", "(", "x", "[", "'y_label'", "]", ")", "\n", "plt", ".", "xlabel", "(", "x", "[", "'x_label'", "]", ")", "\n", "plt", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "plots_dir_path", ",", "title", "+", "\".png\"", ")", ")", "\n", "plt", ".", "clf", "(", ")", "\n", "\n", "", "logger", ".", "info", "(", "'Plot Saved! - '", "+", "plots_dir_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.tools.write_net_readme": [[98, 114], ["open", "_file.write", "_file.write", "os.path.join", "len", "_file.write", "info.keys", "net.__str__", "info.keys", "_file.write", "str"], "function", ["None"], ["", "def", "write_net_readme", "(", "net", ",", "dir", ",", "info", "=", "{", "}", ")", ":", "\n", "    ", "\"\"\"\n    Writes the configuration of the network.\n\n    :param net: given network\n    :param dir: path to where save the file\n    :param info: additional info to save\n    \"\"\"", "\n", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "dir", ",", "'NET_README.txt'", ")", ",", "'w'", ")", "as", "_file", ":", "\n", "        ", "_file", ".", "write", "(", "'********Net Information********\\n\\n'", ")", "\n", "_file", ".", "write", "(", "net", ".", "__str__", "(", ")", "+", "'\\n\\n'", ")", "\n", "if", "len", "(", "info", ".", "keys", "(", ")", ")", ">", "0", ":", "\n", "            ", "_file", ".", "write", "(", "'INFO:'", "+", "'\\n'", ")", "\n", "for", "key", "in", "info", ".", "keys", "(", ")", ":", "\n", "                ", "_file", ".", "write", "(", "key", "+", "' : '", "+", "str", "(", "info", "[", "key", "]", ")", "+", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.tools.gaussian": [[116, 131], ["torch.autograd.Variable", "ins.data.new().normal_", "abs", "ins.data.new", "ins.size"], "function", ["None"], ["", "", "", "", "def", "gaussian", "(", "ins", ",", "is_training", ",", "mean", ",", "std", ",", "one_sided", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Add Gaussian noise to data.\n\n    :param ins: input data\n    :param is_training: check if it's training\n    :param mean: mean of the distribution\n    :param std: standard deviation\n    :return: new data with noise added\n    \"\"\"", "\n", "\n", "if", "is_training", ":", "\n", "        ", "noise", "=", "Variable", "(", "ins", ".", "data", ".", "new", "(", "ins", ".", "size", "(", ")", ")", ".", "normal_", "(", "mean", ",", "std", ")", ")", "\n", "return", "ins", "+", "(", "abs", "(", "noise", ")", "if", "one_sided", "else", "noise", ")", "\n", "", "return", "ins", "\n", "\n"]], "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.tools.uniform": [[133, 141], ["torch.autograd.Variable", "ins.data.new().uniform_", "ins.data.new", "ins.size"], "function", ["None"], ["", "def", "uniform", "(", "ins", ",", "is_training", ",", "low", ",", "high", ",", "enforce_pos", "=", "False", ")", ":", "\n", "    ", "output", "=", "ins", "\n", "if", "is_training", ":", "\n", "        ", "noise", "=", "Variable", "(", "ins", ".", "data", ".", "new", "(", "ins", ".", "size", "(", ")", ")", ".", "uniform_", "(", "low", ",", "high", ")", ")", "\n", "output", "=", "ins", "+", "noise", "\n", "if", "enforce_pos", ":", "\n", "            ", "output", "[", "output", "<", "0", "]", "=", "0", "\n", "", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.tools.set_log": [[143, 160], ["logging.basicConfig", "logging.FileHandler", "logging.StreamHandler", "len"], "function", ["None"], ["", "def", "set_log", "(", "logPath", ",", "suffix", "=", "''", ")", ":", "\n", "    ", "\"\"\"\n    Set logging configuration.\n\n    :param logPath: where to write logs\n    :param suffix: any suffix added to the path\n    \"\"\"", "\n", "\n", "logging", ".", "basicConfig", "(", "\n", "format", "=", "\"%(asctime)s [%(levelname)-5.5s] [%(name)s -> %(funcName)s]  %(message)s\"", ",", "\n", "handlers", "=", "[", "\n", "logging", ".", "FileHandler", "(", "\"{0}/{1}.log\"", ".", "format", "(", "logPath", ",", "'logs'", "+", "(", "'-'", "if", "len", "(", "suffix", ")", ">", "0", "else", "''", ")", "+", "suffix", ")", ",", "\n", "mode", "=", "'w'", ")", ",", "\n", "logging", ".", "StreamHandler", "(", ")", "\n", "]", ",", "\n", "datefmt", "=", "'%m/%d/%Y %I:%M:%S %p'", ",", "\n", "level", "=", "logging", ".", "DEBUG", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.tools.generate_bottleneck_data": [[162, 240], ["os.path.exists", "logging.info", "logging.info", "pickle.loads", "logging.info", "logging.info", "logging.info", "bottleneck_data.keys", "numpy.unique().tolist", "numpy.unique().tolist", "random.shuffle", "random.shuffle", "random.shuffle", "random.shuffle", "pickle.dump", "open().read", "torch.no_grad", "torch.no_grad", "range", "logging.info", "open", "len", "len", "len", "len", "env.reset", "torch.autograd.Variable", "random.choice", "logging.info", "all_ep_rewards.append", "numpy.unique", "numpy.unique", "open", "net.init_hidden", "range", "torch.autograd.Variable().unsqueeze", "net", "env.step", "action_data.append", "[].append", "[].append", "sum", "len", "len", "len", "int", "hx.cuda.cuda", "obs.cuda.cuda", "env.action_space.sample", "torch.softmax", "int", "[].tolist", "[].tolist", "numpy.unique().tolist", "numpy.unique().tolist", "torch.autograd.Variable", "random.random", "[].data.cpu().numpy", "torch.Tensor", "torch.Tensor", "numpy.unique", "numpy.unique", "[].data.cpu", "hx.cuda.data.cpu().numpy", "obs_c.data.cpu().numpy", "len", "hx.cuda.data.cpu", "obs_c.data.cpu", "F.softmax.max"], "function", ["home.repos.pwc.inspect_result.modanesh_Differential_IG.None.env_wrapper.AtariWrapper.reset", "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.model_def.ControlMMNet.init_hidden", "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.env_wrapper.PongWrapper.step"], ["", "def", "generate_bottleneck_data", "(", "net", ",", "env", ",", "episodes", ",", "save_path", ",", "cuda", "=", "False", ",", "eps", "=", "(", "0", ",", "0", ")", ",", "max_steps", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Generating bottleneck data for the given network.\n\n    :param net: given network\n    :param env: given environment\n    :param episodes: number of episodes\n    :param save_path: path to save data in\n    :param cuda: check if cuda is available\n    :param max_steps: maximum number of steps to take. used for exploration.\n    :return: observation and hidden state bottleneck data\n    \"\"\"", "\n", "if", "os", ".", "path", ".", "exists", "(", "save_path", ")", ":", "\n", "# unpickling after reading the file is efficient", "\n", "        ", "hx_train_data", ",", "hx_test_data", ",", "obs_train_data", ",", "obs_test_data", "=", "pickle", ".", "loads", "(", "open", "(", "save_path", ",", "\"rb\"", ")", ".", "read", "(", ")", ")", "\n", "", "else", ":", "\n", "        ", "logging", ".", "info", "(", "'No Data Found @ path : {}'", ".", "format", "(", "save_path", ")", ")", "\n", "logging", ".", "info", "(", "'Generating BottleNeck Data..'", ")", "\n", "bottleneck_data", "=", "{", "}", "\n", "hx_data", ",", "obs_data", ",", "action_data", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "all_ep_rewards", "=", "[", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "ep", "in", "range", "(", "episodes", ")", ":", "\n", "                ", "done", "=", "False", "\n", "obs", "=", "env", ".", "reset", "(", ")", "\n", "hx", "=", "Variable", "(", "net", ".", "init_hidden", "(", ")", ")", "\n", "ep_reward", "=", "0", "\n", "act_count", "=", "0", "\n", "exploration_start_step", "=", "random", ".", "choice", "(", "range", "(", "0", ",", "max_steps", ",", "int", "(", "0.02", "*", "max_steps", ")", ")", ")", "\n", "while", "not", "done", ":", "\n", "# env.render()", "\n", "                    ", "obs", "=", "Variable", "(", "torch", ".", "Tensor", "(", "obs", ")", ")", ".", "unsqueeze", "(", "0", ")", "\n", "if", "cuda", ":", "\n", "                        ", "hx", "=", "hx", ".", "cuda", "(", ")", "\n", "obs", "=", "obs", ".", "cuda", "(", ")", "\n", "", "critic", ",", "logit", ",", "hx", ",", "(", "_", ",", "_", ",", "obs_c", ",", "_", ")", "=", "net", "(", "(", "obs", ",", "hx", ")", ",", "inspect", "=", "True", ")", "\n", "if", "exploration_start_step", ">=", "act_count", "and", "random", ".", "random", "(", ")", "<", "eps", "[", "ep", "%", "len", "(", "eps", ")", "]", ":", "\n", "                        ", "action", "=", "env", ".", "action_space", ".", "sample", "(", ")", "\n", "", "else", ":", "\n", "                        ", "prob", "=", "F", ".", "softmax", "(", "logit", ",", "dim", "=", "1", ")", "\n", "action", "=", "int", "(", "prob", ".", "max", "(", "1", ")", "[", "1", "]", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "obs", ",", "reward", ",", "done", ",", "info", "=", "env", ".", "step", "(", "action", ")", "\n", "action_data", ".", "append", "(", "action", ")", "\n", "act_count", "+=", "1", "\n", "done", "=", "done", "if", "act_count", "<=", "max_steps", "else", "True", "\n", "if", "action", "not", "in", "bottleneck_data", ":", "\n", "                        ", "bottleneck_data", "[", "action", "]", "=", "{", "'hx_data'", ":", "[", "]", ",", "'obs_data'", ":", "[", "]", "}", "\n", "", "bottleneck_data", "[", "action", "]", "[", "'hx_data'", "]", ".", "append", "(", "hx", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", ".", "tolist", "(", ")", ")", "\n", "bottleneck_data", "[", "action", "]", "[", "'obs_data'", "]", ".", "append", "(", "obs_c", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", ".", "tolist", "(", ")", ")", "\n", "\n", "ep_reward", "+=", "reward", "\n", "", "logging", ".", "info", "(", "'episode:{} reward:{}'", ".", "format", "(", "ep", ",", "ep_reward", ")", ")", "\n", "all_ep_rewards", ".", "append", "(", "ep_reward", ")", "\n", "", "", "logging", ".", "info", "(", "'Average Performance:{}'", ".", "format", "(", "sum", "(", "all_ep_rewards", ")", "/", "len", "(", "all_ep_rewards", ")", ")", ")", "\n", "\n", "hx_train_data", ",", "hx_test_data", ",", "obs_train_data", ",", "obs_test_data", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "action", "in", "bottleneck_data", ".", "keys", "(", ")", ":", "\n", "            ", "hx_train_data", "+=", "bottleneck_data", "[", "action", "]", "[", "'hx_data'", "]", "\n", "hx_test_data", "+=", "bottleneck_data", "[", "action", "]", "[", "'hx_data'", "]", "\n", "obs_train_data", "+=", "bottleneck_data", "[", "action", "]", "[", "'obs_data'", "]", "\n", "obs_test_data", "+=", "bottleneck_data", "[", "action", "]", "[", "'obs_data'", "]", "\n", "\n", "logging", ".", "info", "(", "'Action: {} Hx Data: {} Obs Data: {}'", ".", "format", "(", "action", ",", "len", "(", "np", ".", "unique", "(", "bottleneck_data", "[", "action", "]", "[", "'hx_data'", "]", ",", "axis", "=", "0", ")", ".", "tolist", "(", ")", ")", ",", "len", "(", "np", ".", "unique", "(", "bottleneck_data", "[", "action", "]", "[", "'obs_data'", "]", ",", "axis", "=", "0", ")", ".", "tolist", "(", ")", ")", ")", ")", "\n", "\n", "", "obs_test_data", "=", "np", ".", "unique", "(", "obs_test_data", ",", "axis", "=", "0", ")", ".", "tolist", "(", ")", "\n", "hx_test_data", "=", "np", ".", "unique", "(", "hx_test_data", ",", "axis", "=", "0", ")", ".", "tolist", "(", ")", "\n", "\n", "random", ".", "shuffle", "(", "hx_train_data", ")", "\n", "random", ".", "shuffle", "(", "obs_train_data", ")", "\n", "random", ".", "shuffle", "(", "hx_test_data", ")", "\n", "random", ".", "shuffle", "(", "obs_test_data", ")", "\n", "\n", "pickle", ".", "dump", "(", "(", "hx_train_data", ",", "hx_test_data", ",", "obs_train_data", ",", "obs_test_data", ")", ",", "open", "(", "save_path", ",", "\"wb\"", ")", ")", "\n", "\n", "", "logging", ".", "info", "(", "'Data Sizes:'", ")", "\n", "logging", ".", "info", "(", "'Hx Train:{} Hx Test:{} Obs Train:{} Obs Test:{}'", ".", "format", "(", "len", "(", "hx_train_data", ")", ",", "len", "(", "hx_test_data", ")", ",", "len", "(", "obs_train_data", ")", ",", "len", "(", "obs_test_data", ")", ")", ")", "\n", "\n", "return", "hx_train_data", ",", "hx_test_data", ",", "obs_train_data", ",", "obs_test_data", "\n", "\n"]], "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.tools.generate_correlated_bottleneck_data": [[242, 317], ["os.path.exists", "logging.info", "logging.info", "pickle.loads", "logging.info", "logging.info", "logging.info", "pickle.dump", "open().read", "torch.no_grad", "torch.no_grad", "range", "open", "len", "range", "open", "env.reset", "torch.autograd.Variable", "random.choice", "hx_data.append", "obs_data.append", "action_data.append", "data_len.append", "logging.info", "all_ep_rewards.append", "sum", "len", "net.init_hidden", "range", "_hx.append", "torch.autograd.Variable().unsqueeze", "net", "_obs.append", "_action.append", "env.step", "len", "int", "numpy.array", "hx.cuda.cuda", "obs.cuda.cuda", "[].tolist", "env.action_space.sample", "torch.softmax", "int", "torch.autograd.Variable", "random.random", "[].data.cpu().numpy", "torch.Tensor", "torch.Tensor", "obs_c.data.cpu().numpy", "[].data.cpu", "len", "obs_c.data.cpu", "F.softmax.max"], "function", ["home.repos.pwc.inspect_result.modanesh_Differential_IG.None.env_wrapper.AtariWrapper.reset", "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.model_def.ControlMMNet.init_hidden", "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.env_wrapper.PongWrapper.step"], ["", "def", "generate_correlated_bottleneck_data", "(", "net", ",", "env", ",", "save_path", ",", "num_batches", ",", "episodes", ",", "cuda", "=", "False", ",", "eps", "=", "(", "0", ",", "0", ")", ",", "max_steps", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Generating bottleneck data for the given network.\n\n    :param net: given network\n    :param env: given environment\n    :param episodes: number of episodes\n    :param save_path: path to save data in\n    :param cuda: check if cuda is available\n    :param max_steps: maximum number of steps to take. used for exploration.\n    :return: observation and hidden state bottleneck data\n    \"\"\"", "\n", "if", "os", ".", "path", ".", "exists", "(", "save_path", ")", ":", "\n", "# unpickling after reading the file is efficient", "\n", "        ", "correlated_bottleneck_data", "=", "pickle", ".", "loads", "(", "open", "(", "save_path", ",", "\"rb\"", ")", ".", "read", "(", ")", ")", "\n", "", "else", ":", "\n", "        ", "logging", ".", "info", "(", "'No Data Found @ path : {}'", ".", "format", "(", "save_path", ")", ")", "\n", "logging", ".", "info", "(", "'Generating Correlated BottleNeck Data..'", ")", "\n", "correlated_bottleneck_data", "=", "{", "}", "\n", "all_ep_rewards", "=", "[", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "seed", "in", "range", "(", "num_batches", ")", ":", "\n", "                ", "hx_data", ",", "obs_data", ",", "action_data", ",", "data_len", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "ep", "in", "range", "(", "episodes", ")", ":", "\n", "                    ", "_hx", ",", "_obs", ",", "_action", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "done", "=", "False", "\n", "obs", "=", "env", ".", "reset", "(", ")", "\n", "hx", "=", "Variable", "(", "net", ".", "init_hidden", "(", ")", ")", "\n", "ep_reward", "=", "0", "\n", "act_count", "=", "0", "\n", "exploration_start_step", "=", "random", ".", "choice", "(", "range", "(", "0", ",", "max_steps", ",", "int", "(", "0.02", "*", "max_steps", ")", ")", ")", "\n", "\n", "while", "not", "done", ":", "\n", "# if render:", "\n", "#     env.render()", "\n", "                        ", "_hx", ".", "append", "(", "np", ".", "array", "(", "hx", ")", ")", "\n", "obs", "=", "Variable", "(", "torch", ".", "Tensor", "(", "obs", ")", ")", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "# _obs.append(obs)", "\n", "\n", "if", "cuda", ":", "\n", "                            ", "hx", "=", "hx", ".", "cuda", "(", ")", "\n", "obs", "=", "obs", ".", "cuda", "(", ")", "\n", "", "critic", ",", "logit", ",", "hx", ",", "(", "_", ",", "_", ",", "obs_c", ",", "_", ")", "=", "net", "(", "(", "obs", ",", "hx", ")", ",", "inspect", "=", "True", ")", "\n", "\n", "_obs", ".", "append", "(", "obs_c", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", ".", "tolist", "(", ")", ")", "\n", "\n", "if", "exploration_start_step", ">=", "act_count", "and", "random", ".", "random", "(", ")", "<", "eps", "[", "ep", "%", "len", "(", "eps", ")", "]", ":", "\n", "                            ", "action", "=", "env", ".", "action_space", ".", "sample", "(", ")", "\n", "", "else", ":", "\n", "                            ", "prob", "=", "F", ".", "softmax", "(", "logit", ",", "dim", "=", "1", ")", "\n", "action", "=", "int", "(", "prob", ".", "max", "(", "1", ")", "[", "1", "]", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "_action", ".", "append", "(", "action", ")", "\n", "obs", ",", "reward", ",", "done", ",", "info", "=", "env", ".", "step", "(", "action", ")", "\n", "act_count", "+=", "1", "\n", "done", "=", "done", "if", "act_count", "<=", "max_steps", "else", "True", "\n", "ep_reward", "+=", "reward", "\n", "\n", "", "hx_data", ".", "append", "(", "_hx", ")", "\n", "obs_data", ".", "append", "(", "_obs", ")", "\n", "action_data", ".", "append", "(", "_action", ")", "\n", "data_len", ".", "append", "(", "len", "(", "_obs", ")", ")", "\n", "\n", "\n", "logging", ".", "info", "(", "'episode:{} reward:{}'", ".", "format", "(", "ep", ",", "ep_reward", ")", ")", "\n", "all_ep_rewards", ".", "append", "(", "ep_reward", ")", "\n", "", "correlated_bottleneck_data", "[", "seed", "]", "=", "(", "obs_data", ",", "hx_data", ",", "action_data", ",", "data_len", ")", "\n", "", "", "logging", ".", "info", "(", "'Average Performance:{}'", ".", "format", "(", "sum", "(", "all_ep_rewards", ")", "/", "len", "(", "all_ep_rewards", ")", ")", ")", "\n", "\n", "pickle", ".", "dump", "(", "correlated_bottleneck_data", ",", "open", "(", "save_path", ",", "\"wb\"", ")", ")", "\n", "\n", "", "logging", ".", "info", "(", "'Data Sizes:'", ")", "\n", "logging", ".", "info", "(", "'Correlated data:{}'", ".", "format", "(", "len", "(", "correlated_bottleneck_data", ")", ")", ")", "\n", "\n", "return", "correlated_bottleneck_data", "\n", "\n"]], "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.tools.get_args": [[320, 368], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "torch.cuda.is_available", "torch.cuda.is_available", "os.path.join", "os.getcwd"], "function", ["None"], ["", "def", "get_args", "(", ")", ":", "\n", "    ", "\"\"\"\n    Arguments used to get input from command line.\n    :return: given arguments in command line\n    \"\"\"", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'GRU to FSM'", ")", "\n", "parser", ".", "add_argument", "(", "'--generate_train_data'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "help", "=", "'Generate Train Data'", ")", "\n", "parser", ".", "add_argument", "(", "'--generate_bn_data'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "help", "=", "'Generate Bottle-Neck Data'", ")", "\n", "parser", ".", "add_argument", "(", "'--generate_max_steps'", ",", "type", "=", "int", ",", "help", "=", "'Maximum number of steps to be used for data generation'", ")", "\n", "parser", ".", "add_argument", "(", "'--gru_train'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "help", "=", "'Train GRU Network'", ")", "\n", "parser", ".", "add_argument", "(", "'--gru_test'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "help", "=", "'Test GRU Network'", ")", "\n", "parser", ".", "add_argument", "(", "'--gru_size'", ",", "type", "=", "int", ",", "help", "=", "\"No. of GRU Cells\"", ")", "\n", "parser", ".", "add_argument", "(", "'--gru_lr'", ",", "type", "=", "float", ",", "default", "=", "0.001", ",", "help", "=", "\"No. of GRU Cells\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--bhx_train'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "help", "=", "'Train bx network'", ")", "\n", "parser", ".", "add_argument", "(", "'--ox_train'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "help", "=", "'Train ox network'", ")", "\n", "parser", ".", "add_argument", "(", "'--bhx_test'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "help", "=", "'Test bx network'", ")", "\n", "parser", ".", "add_argument", "(", "'--ox_test'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "help", "=", "'Test ox network'", ")", "\n", "parser", ".", "add_argument", "(", "'--bgru_train'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "help", "=", "'Train binary gru network'", ")", "\n", "parser", ".", "add_argument", "(", "'--bgru_test'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "help", "=", "'Test binary gru network'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--bhx_size'", ",", "type", "=", "int", ",", "help", "=", "\"binary encoding size\"", ")", "\n", "parser", ".", "add_argument", "(", "'--bhx_suffix'", ",", "default", "=", "''", ",", "help", "=", "\"suffix fo bhx folder\"", ")", "\n", "parser", ".", "add_argument", "(", "'--ox_size'", ",", "type", "=", "int", ",", "help", "=", "\"binary encoding size\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--train_epochs'", ",", "type", "=", "int", ",", "default", "=", "400", ",", "help", "=", "\"No. of training episodes\"", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "32", ",", "help", "=", "\"batch size used for training\"", ")", "\n", "parser", ".", "add_argument", "(", "'--bgru_lr'", ",", "type", "=", "float", ",", "default", "=", "0.0001", ",", "help", "=", "\"Learning rate for binary GRU\"", ")", "\n", "parser", ".", "add_argument", "(", "'--gru_scratch'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "help", "=", "'use scratch gru for BGRU'", ")", "\n", "parser", ".", "add_argument", "(", "'--bx_scratch'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "help", "=", "'use scratch bx network for BGRU'", ")", "\n", "parser", ".", "add_argument", "(", "'--generate_fsm'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "help", "=", "'extract fsm from fmm net'", ")", "\n", "parser", ".", "add_argument", "(", "'--evaluate_fsm'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "help", "=", "'evaluate fsm'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--bn_episodes'", ",", "type", "=", "int", ",", "default", "=", "20", ",", "\n", "help", "=", "\"No. of episodes for generating data for Bottleneck Network\"", ")", "\n", "parser", ".", "add_argument", "(", "'--bn_epochs'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "\"No. of Training epochs\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--no_cuda'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "help", "=", "'no cuda usage'", ")", "\n", "parser", ".", "add_argument", "(", "'--env'", ",", "help", "=", "\"Name of the environment\"", ")", "\n", "parser", ".", "add_argument", "(", "'--env_seed'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "\"Seed for the environment\"", ")", "\n", "parser", ".", "add_argument", "(", "'--result_dir'", ",", "default", "=", "os", ".", "path", ".", "join", "(", "os", ".", "getcwd", "(", ")", ",", "'results'", ")", ",", "\n", "help", "=", "\"Directory Path to store results\"", ")", "\n", "parser", ".", "add_argument", "(", "'--reg_loss'", ",", "type", "=", "float", ",", "default", "=", "0.05", ",", "help", "=", "\"Regularizer loss weight\"", ")", "\n", "parser", ".", "add_argument", "(", "'--norm_type'", ",", "default", "=", "\"l2\"", ",", "help", "=", "\"Regularizer norm type\"", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "args", ".", "cuda", "=", "(", "not", "args", ".", "no_cuda", ")", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.tools.generate_trajectories": [[370, 435], ["os.path.exists", "logging.info", "pickle.loads", "logging.info", "logging.info", "pickle.dump", "open().read", "guide.eval", "torch.no_grad", "torch.no_grad", "range", "open", "range", "open", "env.reset", "data_obs.append", "data_actions.append", "data_actions_prob.append", "data_len.append", "all_ep_rewards.append", "logging.info", "sum", "len", "torch.autograd.Variable", "hx.cuda.cuda", "_obs.append", "env.step", "len", "guide.init_hidden", "env.env.get_desired_action", "_actions.append", "torch.autograd.Variable", "guide", "torch.softmax", "int", "_action_probs.append", "_actions.append", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "obs.cuda.cuda", "[].data.cpu().numpy", "[].tolist", "torch.Tensor", "torch.Tensor", "[].data.cpu", "F.softmax.data.cpu().numpy", "F.softmax.data.cpu", "F.softmax.max"], "function", ["home.repos.pwc.inspect_result.modanesh_Differential_IG.None.env_wrapper.AtariWrapper.reset", "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.env_wrapper.PongWrapper.step", "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.model_def.ControlMMNet.init_hidden"], ["", "def", "generate_trajectories", "(", "env", ",", "batches", ",", "batch_size", ",", "save_path", ",", "guide", "=", "None", ",", "cuda", "=", "False", ",", "render", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Generate trajectories used as training data.\n\n    :param env: given environment\n    :param batches: number of batches\n    :param batch_size: batch size\n    :param save_path: path to save generated data\n    :param cuda: check if cuda is available\n    :param render: check to render environment\n    :return: generated trajectory data\n    \"\"\"", "\n", "if", "os", ".", "path", ".", "exists", "(", "save_path", ")", ":", "\n", "        ", "logging", ".", "info", "(", "'Loading Saved data .. '", ")", "\n", "# unpickling after reading the file is efficient", "\n", "_train_data", "=", "pickle", ".", "loads", "(", "open", "(", "save_path", ",", "\"rb\"", ")", ".", "read", "(", ")", ")", "\n", "", "else", ":", "\n", "        ", "logging", ".", "info", "(", "'Generating data .. '", ")", "\n", "_train_data", "=", "{", "}", "\n", "all_ep_rewards", "=", "[", "]", "\n", "if", "guide", "is", "not", "None", ":", "\n", "            ", "guide", ".", "eval", "(", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "seed", "in", "range", "(", "batches", ")", ":", "\n", "                ", "data_obs", ",", "data_actions", ",", "data_actions_prob", ",", "data_len", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "ep", "in", "range", "(", "batch_size", ")", ":", "\n", "                    ", "_actions", ",", "_action_probs", ",", "_obs", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "done", "=", "False", "\n", "obs", "=", "env", ".", "reset", "(", ")", "\n", "hx", "=", "None", "if", "guide", "is", "None", "else", "Variable", "(", "guide", ".", "init_hidden", "(", ")", ")", "\n", "if", "hx", "is", "not", "None", "and", "cuda", ":", "\n", "                        ", "hx", "=", "hx", ".", "cuda", "(", ")", "\n", "", "ep_reward", "=", "0", "\n", "\n", "while", "not", "done", ":", "\n", "# if render:", "\n", "#     env.render()", "\n", "                        ", "_obs", ".", "append", "(", "obs", ")", "\n", "if", "guide", "is", "None", ":", "\n", "                            ", "action", "=", "env", ".", "env", ".", "get_desired_action", "(", ")", "\n", "_actions", ".", "append", "(", "action", ")", "\n", "", "else", ":", "\n", "                            ", "obs", "=", "Variable", "(", "torch", ".", "Tensor", "(", "obs", ")", ".", "unsqueeze", "(", "0", ")", ")", "\n", "if", "cuda", ":", "\n", "                                ", "obs", "=", "obs", ".", "cuda", "(", ")", "\n", "", "critic", ",", "logit", ",", "hx", ",", "(", "_", ",", "_", ",", "obs_c", ",", "_", ",", "_", ",", "_", ")", "=", "guide", "(", "(", "obs", ",", "hx", ")", ",", "inspect", "=", "True", ")", "\n", "prob", "=", "F", ".", "softmax", "(", "logit", ",", "dim", "=", "1", ")", "\n", "action", "=", "int", "(", "prob", ".", "max", "(", "1", ")", "[", "1", "]", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "_action_probs", ".", "append", "(", "prob", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", ".", "tolist", "(", ")", ")", "\n", "_actions", ".", "append", "(", "action", ")", "\n", "", "obs", ",", "reward", ",", "done", ",", "info", "=", "env", ".", "step", "(", "action", ")", "\n", "ep_reward", "+=", "reward", "\n", "\n", "", "data_obs", ".", "append", "(", "_obs", ")", "\n", "data_actions", ".", "append", "(", "_actions", ")", "\n", "data_actions_prob", ".", "append", "(", "_action_probs", ")", "\n", "data_len", ".", "append", "(", "len", "(", "_obs", ")", ")", "\n", "all_ep_rewards", ".", "append", "(", "ep_reward", ")", "\n", "logging", ".", "info", "(", "'Ep:{} Batch: {} Reward:{}'", ".", "format", "(", "seed", ",", "ep", ",", "ep_reward", ")", ")", "\n", "\n", "", "_train_data", "[", "seed", "]", "=", "(", "data_obs", ",", "data_actions", ",", "data_actions_prob", ",", "data_len", ")", "\n", "", "", "logging", ".", "info", "(", "'Average Performance: {}'", ".", "format", "(", "sum", "(", "all_ep_rewards", ")", "/", "len", "(", "all_ep_rewards", ")", ")", ")", "\n", "pickle", ".", "dump", "(", "_train_data", ",", "open", "(", "save_path", ",", "\"wb\"", ")", ")", "\n", "", "return", "_train_data", "\n", "", ""]], "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.visualization.convert_to_gray_scale": [[9, 11], ["numpy.average"], "function", ["None"], ["def", "convert_to_gray_scale", "(", "attributions", ")", ":", "\n", "    ", "return", "np", ".", "average", "(", "attributions", ",", "axis", "=", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.visualization.compute_threshold_by_top_percentage": [[13, 31], ["attributions.flatten", "numpy.sum", "ValueError", "numpy.min", "numpy.sort", "numpy.abs", "numpy.cumsum", "numpy.where"], "function", ["None"], ["", "def", "compute_threshold_by_top_percentage", "(", "attributions", ",", "percentage", "=", "60", ",", "plot_distribution", "=", "True", ")", ":", "\n", "    ", "if", "percentage", "<", "0", "or", "percentage", ">", "100", ":", "\n", "        ", "raise", "ValueError", "(", "'percentage must be in [0, 100]'", ")", "\n", "", "if", "percentage", "==", "100", ":", "\n", "        ", "return", "np", ".", "min", "(", "attributions", ")", "\n", "", "flat_attributions", "=", "attributions", ".", "flatten", "(", ")", "\n", "attribution_sum", "=", "np", ".", "sum", "(", "flat_attributions", ")", "\n", "sorted_attributions", "=", "np", ".", "sort", "(", "np", ".", "abs", "(", "flat_attributions", ")", ")", "[", ":", ":", "-", "1", "]", "\n", "cum_sum", "=", "100.0", "*", "np", ".", "cumsum", "(", "sorted_attributions", ")", "/", "attribution_sum", "\n", "if", "(", "cum_sum", ">=", "percentage", ")", ".", "min", "(", ")", ".", "data", ":", "\n", "        ", "threshold_idx", "=", "None", "\n", "threshold", "=", "0", "\n", "", "else", ":", "\n", "        ", "threshold_idx", "=", "np", ".", "where", "(", "cum_sum", ">=", "percentage", ")", "[", "0", "]", "[", "0", "]", "\n", "threshold", "=", "sorted_attributions", "[", "threshold_idx", "]", "\n", "", "if", "plot_distribution", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "return", "threshold", "\n", "\n"]], "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.visualization.polarity_function": [[33, 40], ["numpy.clip", "numpy.clip"], "function", ["None"], ["", "def", "polarity_function", "(", "attributions", ",", "polarity", ")", ":", "\n", "    ", "if", "polarity", "==", "'positive'", ":", "\n", "        ", "return", "np", ".", "clip", "(", "attributions", ",", "0", ",", "1", ")", "\n", "", "elif", "polarity", "==", "'negative'", ":", "\n", "        ", "return", "np", ".", "clip", "(", "attributions", ",", "-", "1", ",", "0", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.visualization.overlay_function": [[42, 44], ["numpy.clip"], "function", ["None"], ["", "", "def", "overlay_function", "(", "attributions", ",", "image", ")", ":", "\n", "    ", "return", "np", ".", "clip", "(", "0.7", "*", "image", "+", "0.5", "*", "attributions", ",", "0", ",", "255", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.visualization.visualize": [[46, 53], ["visualization.overlay_function", "image.cpu().numpy", "image.cpu"], "function", ["home.repos.pwc.inspect_result.modanesh_Differential_IG.None.visualization.overlay_function"], ["", "def", "visualize", "(", "attributions", ",", "image", ",", "overlay", "=", "True", ",", "mask_mode", "=", "False", ")", ":", "\n", "    ", "if", "overlay", ":", "\n", "        ", "if", "mask_mode", "==", "False", ":", "\n", "            ", "attributions", "=", "overlay_function", "(", "attributions", ",", "image", ")", "\n", "", "else", ":", "\n", "            ", "attributions", "=", "attributions", "*", "image", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "", "return", "attributions", "\n", "\n"]], "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.visualization.plot_feature_vector": [[55, 95], ["numpy.average", "matplotlib.subplots", "matplotlib.imshow", "matplotlib.colorbar", "matplotlib.ylabel", "matplotlib.gca().axes.get_xaxis().set_visible", "ax.set_yticklabels", "matplotlib.savefig", "matplotlib.show", "matplotlib.yticks", "os.path.join", "matplotlib.gca().axes.get_xaxis", "range", "numpy.arange", "matplotlib.yticks", "len", "numpy.arange", "matplotlib.yticks", "numpy.arange", "matplotlib.gca"], "function", ["None"], ["", "def", "plot_feature_vector", "(", "attributions", ",", "results_path", ",", "env_name", ")", ":", "\n", "    ", "attributions", "=", "np", ".", "average", "(", "attributions", ",", "axis", "=", "0", ")", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", ")", "\n", "plt", ".", "imshow", "(", "attributions", ",", "cmap", "=", "'hot'", ")", "\n", "plt", ".", "colorbar", "(", ")", "\n", "plt", ".", "ylabel", "(", "\"Input Features\"", ",", "fontsize", "=", "12", ",", "fontweight", "=", "'bold'", ")", "\n", "plt", ".", "gca", "(", ")", ".", "axes", ".", "get_xaxis", "(", ")", ".", "set_visible", "(", "False", ")", "\n", "labels", "=", "[", "\"\"", "for", "_", "in", "range", "(", "len", "(", "attributions", ")", ")", "]", "\n", "\n", "if", "env_name", "==", "'Acrobot-v1'", ":", "\n", "# labels for Acrobot's features", "\n", "        ", "plt", ".", "yticks", "(", "np", ".", "arange", "(", "0", ",", "6", ",", "1", ")", ")", "\n", "labels", "[", "0", "]", "=", "\"cos(joint1)\"", "\n", "labels", "[", "1", "]", "=", "\"sin(joint1)\"", "\n", "labels", "[", "2", "]", "=", "\"cos(joint2)\"", "\n", "labels", "[", "3", "]", "=", "\"sin(joint2)\"", "\n", "labels", "[", "4", "]", "=", "\"joint1\\nvelocity\"", "\n", "labels", "[", "5", "]", "=", "\"joint2\\nvelocity\"", "\n", "", "elif", "env_name", "==", "'CartPole-v1'", ":", "\n", "# labels for CartPole's features", "\n", "        ", "plt", ".", "yticks", "(", "np", ".", "arange", "(", "0", ",", "4", ",", "1", ")", ")", "\n", "labels", "[", "0", "]", "=", "\"cart\\nposition\"", "\n", "labels", "[", "1", "]", "=", "\"cart\\nvelocity\"", "\n", "labels", "[", "2", "]", "=", "\"pole\\nangle\"", "\n", "labels", "[", "3", "]", "=", "\"pole\\nvelocity\"", "\n", "", "elif", "env_name", "==", "'LunarLander-v2'", ":", "\n", "# labels for LunarLander's features", "\n", "        ", "plt", ".", "yticks", "(", "np", ".", "arange", "(", "0", ",", "8", ",", "1", ")", ")", "\n", "labels", "[", "0", "]", "=", "\"Pos X\"", "\n", "labels", "[", "1", "]", "=", "\"Pos Y\"", "\n", "labels", "[", "2", "]", "=", "\"Velocity X\"", "\n", "labels", "[", "3", "]", "=", "\"Velocity Y\"", "\n", "labels", "[", "4", "]", "=", "\"Angle\"", "\n", "labels", "[", "5", "]", "=", "\"Angular Velocity\"", "\n", "labels", "[", "6", "]", "=", "\"Left-leg Pos\"", "\n", "labels", "[", "7", "]", "=", "\"Right-leg Pos\"", "\n", "\n", "", "ax", ".", "set_yticklabels", "(", "labels", ")", "\n", "plt", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "results_path", ",", "\"diff_IGs.jpg\"", ")", ",", "bbox_inches", "=", "'tight'", ")", "\n", "plt", ".", "show", "(", ")", "", "", ""]], "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.functions.TernarizeTanhF.forward": [[8, 14], ["input.new", "input.new.round_", "input.size"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "cxt", ",", "input", ")", ":", "\n", "        ", "output", "=", "input", ".", "new", "(", "input", ".", "size", "(", ")", ")", "\n", "output", ".", "data", "=", "input", ".", "data", "\n", "output", ".", "round_", "(", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.functions.TernarizeTanhF.backward": [[15, 19], ["grad_output.clone"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "cxt", ",", "grad_output", ")", ":", "\n", "        ", "grad_input", "=", "grad_output", ".", "clone", "(", ")", "\n", "return", "grad_input", "\n", "\n"]], "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.functions.TernaryTanh.__init__": [[26, 28], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.modanesh_Differential_IG.None.model_def.ControlMMNet.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "TernaryTanh", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.functions.TernaryTanh.forward": [[29, 33], ["ternarizeTanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "output", "=", "1.5", "*", "F", ".", "tanh", "(", "input", ")", "+", "0.5", "*", "F", ".", "tanh", "(", "-", "3", "*", "input", ")", "\n", "output", "=", "ternarizeTanh", "(", "output", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.model_def.HxQBNet.__init__": [[12, 29], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "int", "int", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh", "torch.Linear", "torch.Linear", "functions.TernaryTanh", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh"], "methods", ["home.repos.pwc.inspect_result.modanesh_Differential_IG.None.model_def.ControlMMNet.__init__"], ["def", "__init__", "(", "self", ",", "input_size", ",", "x_features", ")", ":", "\n", "        ", "super", "(", "HxQBNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bhx_size", "=", "x_features", "\n", "f1", ",", "f2", "=", "int", "(", "8", "*", "x_features", ")", ",", "int", "(", "4", "*", "x_features", ")", "\n", "self", ".", "encoder", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "input_size", ",", "f1", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "f1", ",", "f2", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "f2", ",", "x_features", ")", ",", "\n", "TernaryTanh", "(", ")", ")", "\n", "\n", "self", ".", "decoder", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "x_features", ",", "f2", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "f2", ",", "f1", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "f1", ",", "input_size", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.model_def.HxQBNet.forward": [[30, 33], ["model_def.HxQBNet.encode", "model_def.HxQBNet.decode"], "methods", ["home.repos.pwc.inspect_result.modanesh_Differential_IG.None.model_def.ControlHxQBNet.encode", "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.model_def.ControlHxQBNet.decode"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "encode", "(", "x", ")", "\n", "return", "self", ".", "decode", "(", "x", ")", ",", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.model_def.HxQBNet.encode": [[34, 36], ["model_def.HxQBNet.encoder"], "methods", ["None"], ["", "def", "encode", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "encoder", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.model_def.HxQBNet.decode": [[37, 39], ["model_def.HxQBNet.decoder"], "methods", ["None"], ["", "def", "decode", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "decoder", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.model_def.MMNet.__init__": [[45, 53], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.modanesh_Differential_IG.None.model_def.ControlMMNet.__init__"], ["def", "__init__", "(", "self", ",", "net", ",", "hx_qbn", "=", "None", ",", "obs_qbn", "=", "None", ")", ":", "\n", "        ", "super", "(", "MMNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bhx_units", "=", "hx_qbn", ".", "bhx_size", "if", "hx_qbn", "is", "not", "None", "else", "None", "\n", "self", ".", "gru_units", "=", "net", ".", "gru_units", "\n", "self", ".", "obx_net", "=", "obs_qbn", "\n", "self", ".", "gru_net", "=", "net", "\n", "self", ".", "bhx_net", "=", "hx_qbn", "\n", "self", ".", "actor_linear", "=", "self", ".", "gru_net", ".", "get_action_linear", "\n", "\n"]], "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.model_def.MMNet.init_hidden": [[54, 56], ["model_def.MMNet.gru_net.init_hidden"], "methods", ["home.repos.pwc.inspect_result.modanesh_Differential_IG.None.model_def.ControlMMNet.init_hidden"], ["", "def", "init_hidden", "(", "self", ",", "batch_size", "=", "1", ")", ":", "\n", "        ", "return", "self", ".", "gru_net", ".", "init_hidden", "(", "batch_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.model_def.MMNet.forward": [[57, 65], ["model_def.MMNet.gru_net", "model_def.MMNet.gru_net"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "inspect", "=", "False", ")", ":", "\n", "        ", "if", "inspect", ":", "\n", "            ", "x", ",", "hx", "=", "x", "\n", "critic", ",", "actor", ",", "hx", ",", "(", "ghx", ",", "bhx", ",", "input_c", ",", "input_x", ",", "input_tanh", ")", "=", "self", ".", "gru_net", "(", "(", "x", ",", "hx", ")", ",", "input_fn", "=", "self", ".", "obx_net", ",", "hx_fn", "=", "self", ".", "bhx_net", ",", "inspect", "=", "True", ")", "\n", "return", "critic", ",", "actor", ",", "hx", ",", "(", "ghx", ",", "bhx", ")", ",", "(", "input_c", ",", "input_x", ",", "input_tanh", ")", "\n", "", "else", ":", "\n", "            ", "input_c", "=", "self", ".", "gru_net", "(", "x", ",", "input_fn", "=", "self", ".", "obx_net", ",", "hx_fn", "=", "self", ".", "bhx_net", ",", "inspect", "=", "False", ")", "\n", "return", "input_c", "\n", "\n"]], "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.model_def.MMNet.get_action_linear": [[66, 72], ["model_def.MMNet.actor_linear", "model_def.MMNet.bhx_net.decode"], "methods", ["home.repos.pwc.inspect_result.modanesh_Differential_IG.None.model_def.ControlHxQBNet.decode"], ["", "", "def", "get_action_linear", "(", "self", ",", "state", ",", "decode", "=", "False", ")", ":", "\n", "        ", "if", "decode", ":", "\n", "            ", "hx", "=", "self", ".", "bhx_net", ".", "decode", "(", "state", ")", "\n", "", "else", ":", "\n", "            ", "hx", "=", "state", "\n", "", "return", "self", ".", "actor_linear", "(", "hx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.model_def.MMNet.transact": [[73, 77], ["model_def.MMNet.gru_net.transact", "model_def.MMNet.bhx_net", "model_def.MMNet.obx_net.decode", "model_def.MMNet.bhx_net.decode"], "methods", ["home.repos.pwc.inspect_result.modanesh_Differential_IG.None.model_def.ControlMMNet.transact", "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.model_def.ControlHxQBNet.decode", "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.model_def.ControlHxQBNet.decode"], ["", "def", "transact", "(", "self", ",", "o_x", ",", "hx_x", ")", ":", "\n", "        ", "hx_x", "=", "self", ".", "gru_net", ".", "transact", "(", "self", ".", "obx_net", ".", "decode", "(", "o_x", ")", ",", "self", ".", "bhx_net", ".", "decode", "(", "hx_x", ")", ")", "\n", "_", ",", "hx_x", "=", "self", ".", "bhx_net", "(", "hx_x", ")", "\n", "return", "hx_x", "\n", "\n"]], "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.model_def.MMNet.state_encode": [[78, 80], ["model_def.MMNet.bhx_net.encode"], "methods", ["home.repos.pwc.inspect_result.modanesh_Differential_IG.None.model_def.ControlHxQBNet.encode"], ["", "def", "state_encode", "(", "self", ",", "state", ")", ":", "\n", "        ", "return", "self", ".", "bhx_net", ".", "encode", "(", "state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.model_def.MMNet.obs_encode": [[81, 88], ["model_def.MMNet.gru_net", "torch.autograd.Variable", "torch.autograd.Variable", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "next", "hx.cuda.cuda.cuda", "model_def.MMNet.parameters"], "methods", ["None"], ["", "def", "obs_encode", "(", "self", ",", "obs", ",", "hx", "=", "None", ")", ":", "\n", "        ", "if", "hx", "is", "None", ":", "\n", "            ", "hx", "=", "Variable", "(", "torch", ".", "zeros", "(", "1", ",", "self", ".", "gru_units", ")", ")", "\n", "if", "next", "(", "self", ".", "parameters", "(", ")", ")", ".", "is_cuda", ":", "\n", "                ", "hx", "=", "hx", ".", "cuda", "(", ")", "\n", "", "", "_", ",", "_", ",", "_", ",", "(", "_", ",", "_", ",", "_", ",", "input_x", ")", "=", "self", ".", "gru_net", "(", "(", "obs", ",", "hx", ")", ",", "input_fn", "=", "self", ".", "obx_net", ",", "hx_fn", "=", "self", ".", "bhx_net", ",", "inspect", "=", "True", ")", "\n", "return", "input_x", "\n", "\n"]], "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.model_def.ObsQBNet.__init__": [[95, 108], ["torch.Module.__init__", "int", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh", "torch.Linear", "torch.Linear", "functions.TernaryTanh", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh", "torch.Linear", "torch.Linear", "torch.ReLU6", "torch.ReLU6"], "methods", ["home.repos.pwc.inspect_result.modanesh_Differential_IG.None.model_def.ControlMMNet.__init__"], ["def", "__init__", "(", "self", ",", "input_size", ",", "x_features", ")", ":", "\n", "        ", "super", "(", "ObsQBNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bhx_size", "=", "x_features", "\n", "f1", "=", "int", "(", "8", "*", "x_features", ")", "\n", "self", ".", "encoder", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "input_size", ",", "f1", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "f1", ",", "x_features", ")", ",", "\n", "TernaryTanh", "(", ")", ")", "\n", "\n", "self", ".", "decoder", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "x_features", ",", "f1", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "f1", ",", "input_size", ")", ",", "\n", "nn", ".", "ReLU6", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.model_def.ObsQBNet.forward": [[109, 113], ["model_def.ObsQBNet.encode", "model_def.ObsQBNet.decode"], "methods", ["home.repos.pwc.inspect_result.modanesh_Differential_IG.None.model_def.ControlHxQBNet.encode", "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.model_def.ControlHxQBNet.decode"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "encoded", ",", "before_ttanh", "=", "self", ".", "encode", "(", "x", ")", "\n", "decoded", "=", "self", ".", "decode", "(", "encoded", ")", "\n", "return", "decoded", ",", "encoded", ",", "before_ttanh", "\n", "\n"]], "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.model_def.ObsQBNet.encode": [[114, 120], ["model_def.ObsQBNet.encoder"], "methods", ["None"], ["", "def", "encode", "(", "self", ",", "x", ")", ":", "\n", "        ", "linear1", "=", "self", ".", "encoder", "[", "0", "]", "(", "x", ")", "\n", "tanh", "=", "self", ".", "encoder", "[", "1", "]", "(", "linear1", ")", "\n", "linear2", "=", "self", ".", "encoder", "[", "2", "]", "(", "tanh", ")", "\n", "ttanh", "=", "self", ".", "encoder", "[", "3", "]", "(", "linear2", ")", "\n", "return", "self", ".", "encoder", "(", "x", ")", ",", "linear2", "\n", "\n"]], "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.model_def.ObsQBNet.decode": [[121, 123], ["model_def.ObsQBNet.decoder"], "methods", ["None"], ["", "def", "decode", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "decoder", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.model_def.GRUNet.__init__": [[130, 158], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.GRUCell", "torch.GRUCell", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "model_def.GRUNet.apply", "tools.normalized_columns_initializer", "model_def.GRUNet.actor_linear.bias.data.fill_", "tools.normalized_columns_initializer", "model_def.GRUNet.critic_linear.bias.data.fill_", "model_def.GRUNet.gru.bias_ih.data.fill_", "model_def.GRUNet.gru.bias_hh.data.fill_", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU6", "torch.ReLU6"], "methods", ["home.repos.pwc.inspect_result.modanesh_Differential_IG.None.model_def.ControlMMNet.__init__", "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.tools.normalized_columns_initializer", "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.tools.normalized_columns_initializer"], ["def", "__init__", "(", "self", ",", "input_size", ",", "gru_cells", ",", "total_actions", ")", ":", "\n", "        ", "super", "(", "GRUNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gru_units", "=", "gru_cells", "\n", "self", ".", "noise", "=", "False", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "input_size", ",", "32", ",", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "32", ",", "32", ",", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "32", ",", "16", ",", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv4", "=", "nn", ".", "Conv2d", "(", "16", ",", "8", ",", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "input_ff", "=", "nn", ".", "Sequential", "(", "self", ".", "conv1", ",", "nn", ".", "ReLU", "(", ")", ",", "\n", "self", ".", "conv2", ",", "nn", ".", "ReLU", "(", ")", ",", "\n", "self", ".", "conv3", ",", "nn", ".", "ReLU", "(", ")", ",", "\n", "self", ".", "conv4", ",", "nn", ".", "ReLU6", "(", ")", ")", "\n", "self", ".", "input_c_features", "=", "8", "*", "5", "*", "5", "\n", "self", ".", "input_c_shape", "=", "(", "8", ",", "5", ",", "5", ")", "\n", "self", ".", "gru", "=", "nn", ".", "GRUCell", "(", "self", ".", "input_c_features", ",", "gru_cells", ")", "\n", "\n", "self", ".", "critic_linear", "=", "nn", ".", "Linear", "(", "gru_cells", ",", "1", ")", "\n", "self", ".", "actor_linear", "=", "nn", ".", "Linear", "(", "gru_cells", ",", "total_actions", ")", "\n", "\n", "self", ".", "apply", "(", "tl", ".", "weights_init", ")", "\n", "self", ".", "actor_linear", ".", "weight", ".", "data", "=", "tl", ".", "normalized_columns_initializer", "(", "self", ".", "actor_linear", ".", "weight", ".", "data", ",", "0.01", ")", "\n", "self", ".", "actor_linear", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "self", ".", "critic_linear", ".", "weight", ".", "data", "=", "tl", ".", "normalized_columns_initializer", "(", "self", ".", "critic_linear", ".", "weight", ".", "data", ",", "1.0", ")", "\n", "self", ".", "critic_linear", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n", "self", ".", "gru", ".", "bias_ih", ".", "data", ".", "fill_", "(", "0", ")", "\n", "self", ".", "gru", ".", "bias_hh", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.model_def.GRUNet.forward": [[159, 173], ["model_def.GRUNet.input_ff", "c_input.view.view.view", "model_def.GRUNet.gru", "model_def.GRUNet.input_ff", "c_input.view.view.view", "input_fn", "hx_fn", "model_def.GRUNet.critic_linear", "model_def.GRUNet.actor_linear", "input_fn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "input_fn", "=", "None", ",", "hx_fn", "=", "None", ",", "inspect", "=", "False", ")", ":", "\n", "        ", "if", "inspect", ":", "\n", "            ", "input", ",", "hx", "=", "input", "\n", "c_input", "=", "self", ".", "input_ff", "(", "input", ")", "\n", "c_input", "=", "c_input", ".", "view", "(", "-", "1", ",", "self", ".", "input_c_features", ")", "\n", "input", ",", "input_x", ",", "linear2", "=", "input_fn", "(", "c_input", ")", "if", "input_fn", "is", "not", "None", "else", "(", "c_input", ",", "c_input", ")", "\n", "ghx", "=", "self", ".", "gru", "(", "input", ",", "hx", ")", "\n", "hx", ",", "bhx", "=", "hx_fn", "(", "ghx", ")", "if", "hx_fn", "is", "not", "None", "else", "(", "ghx", ",", "ghx", ")", "\n", "return", "self", ".", "critic_linear", "(", "hx", ")", ",", "self", ".", "actor_linear", "(", "hx", ")", ",", "hx", ",", "(", "ghx", ",", "bhx", ",", "c_input", ",", "input_x", ",", "linear2", ")", "\n", "", "else", ":", "\n", "            ", "c_input", "=", "self", ".", "input_ff", "(", "input", ")", "\n", "c_input", "=", "c_input", ".", "view", "(", "-", "1", ",", "self", ".", "input_c_features", ")", "\n", "input", ",", "input_x", ",", "linear2", "=", "input_fn", "(", "c_input", ")", "if", "input_fn", "is", "not", "None", "else", "(", "c_input", ",", "c_input", ")", "\n", "return", "c_input", ",", "input_x", ",", "linear2", "\n", "\n"]], "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.model_def.GRUNet.init_hidden": [[174, 176], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["", "", "def", "init_hidden", "(", "self", ",", "batch_size", "=", "1", ")", ":", "\n", "        ", "return", "torch", ".", "zeros", "(", "batch_size", ",", "self", ".", "gru_units", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.model_def.GRUNet.get_action_linear": [[177, 179], ["model_def.GRUNet.actor_linear"], "methods", ["None"], ["", "def", "get_action_linear", "(", "self", ",", "state", ")", ":", "\n", "        ", "return", "self", ".", "actor_linear", "(", "state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.model_def.GRUNet.transact": [[180, 183], ["model_def.GRUNet.gru"], "methods", ["None"], ["", "def", "transact", "(", "self", ",", "o_x", ",", "hx", ")", ":", "\n", "        ", "hx", "=", "self", ".", "gru", "(", "o_x", ",", "hx", ")", "\n", "return", "hx", "\n", "\n"]], "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.model_def.ControlGRUNet.__init__": [[189, 213], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.GRUCell", "torch.GRUCell", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "model_def.ControlGRUNet.apply", "tools.normalized_columns_initializer", "model_def.ControlGRUNet.actor_linear.bias.data.fill_", "tools.normalized_columns_initializer", "model_def.ControlGRUNet.critic_linear.bias.data.fill_", "model_def.ControlGRUNet.gru.bias_ih.data.fill_", "model_def.ControlGRUNet.gru.bias_hh.data.fill_", "torch.Linear", "torch.Linear", "torch.ELU", "torch.ELU", "torch.Linear", "torch.Linear", "torch.ReLU6", "torch.ReLU6"], "methods", ["home.repos.pwc.inspect_result.modanesh_Differential_IG.None.model_def.ControlMMNet.__init__", "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.tools.normalized_columns_initializer", "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.tools.normalized_columns_initializer"], ["def", "__init__", "(", "self", ",", "input_size", ",", "gru_cells", ",", "total_actions", ")", ":", "\n", "        ", "super", "(", "ControlGRUNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gru_units", "=", "gru_cells", "\n", "self", ".", "noise", "=", "False", "\n", "\n", "self", ".", "input_ff", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "input_size", ",", "16", ")", ",", "\n", "nn", ".", "ELU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "16", ",", "8", ")", ",", "\n", "nn", ".", "ReLU6", "(", ")", ")", "\n", "self", ".", "input_flat_size", "=", "8", "\n", "self", ".", "input_c_features", "=", "self", ".", "input_flat_size", "\n", "self", ".", "gru", "=", "nn", ".", "GRUCell", "(", "self", ".", "input_flat_size", ",", "32", ")", "\n", "\n", "self", ".", "critic_linear", "=", "nn", ".", "Linear", "(", "gru_cells", ",", "1", ")", "\n", "self", ".", "actor_linear", "=", "nn", ".", "Linear", "(", "gru_cells", ",", "total_actions", ")", "\n", "\n", "self", ".", "apply", "(", "tl", ".", "weights_init", ")", "\n", "self", ".", "actor_linear", ".", "weight", ".", "data", "=", "tl", ".", "normalized_columns_initializer", "(", "self", ".", "actor_linear", ".", "weight", ".", "data", ",", "0.01", ")", "\n", "self", ".", "actor_linear", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "self", ".", "critic_linear", ".", "weight", ".", "data", "=", "tl", ".", "normalized_columns_initializer", "(", "self", ".", "critic_linear", ".", "weight", ".", "data", ",", "1.0", ")", "\n", "self", ".", "critic_linear", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n", "self", ".", "gru", ".", "bias_ih", ".", "data", ".", "fill_", "(", "0", ")", "\n", "self", ".", "gru", ".", "bias_hh", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.model_def.ControlGRUNet.forward": [[214, 228], ["model_def.ControlGRUNet.input_ff", "c_input.view.view.view", "model_def.ControlGRUNet.gru", "model_def.ControlGRUNet.input_ff", "c_input.view.view.view", "input_fn", "hx_fn", "model_def.ControlGRUNet.critic_linear", "model_def.ControlGRUNet.actor_linear", "input_fn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "input_fn", "=", "None", ",", "hx_fn", "=", "None", ",", "inspect", "=", "False", ")", ":", "\n", "        ", "if", "inspect", ":", "\n", "            ", "input", ",", "hx", "=", "input", "\n", "c_input", "=", "self", ".", "input_ff", "(", "input", ")", "\n", "c_input", "=", "c_input", ".", "view", "(", "-", "1", ",", "self", ".", "input_flat_size", ")", "\n", "input", ",", "input_x", ",", "input_tanh", "=", "input_fn", "(", "c_input", ")", "if", "input_fn", "is", "not", "None", "else", "(", "c_input", ",", "c_input", ",", "None", ")", "\n", "ghx", "=", "self", ".", "gru", "(", "input", ",", "hx", ")", "\n", "hx", ",", "bhx", "=", "hx_fn", "(", "ghx", ")", "if", "hx_fn", "is", "not", "None", "else", "(", "ghx", ",", "ghx", ")", "\n", "return", "self", ".", "critic_linear", "(", "hx", ")", ",", "self", ".", "actor_linear", "(", "hx", ")", ",", "hx", ",", "(", "ghx", ",", "bhx", ",", "c_input", ",", "input_x", ",", "input_tanh", ")", "\n", "", "else", ":", "\n", "            ", "c_input", "=", "self", ".", "input_ff", "(", "input", ")", "\n", "c_input", "=", "c_input", ".", "view", "(", "-", "1", ",", "self", ".", "input_c_features", ")", "\n", "input", ",", "input_x", ",", "input_tanh", "=", "input_fn", "(", "c_input", ")", "if", "input_fn", "is", "not", "None", "else", "(", "c_input", ",", "c_input", ")", "\n", "return", "c_input", ",", "input_x", ",", "input_tanh", "\n", "\n"]], "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.model_def.ControlGRUNet.init_hidden": [[229, 231], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["", "", "def", "init_hidden", "(", "self", ",", "batch_size", "=", "1", ")", ":", "\n", "        ", "return", "torch", ".", "zeros", "(", "batch_size", ",", "self", ".", "gru_units", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.model_def.ControlGRUNet.get_action_linear": [[232, 234], ["model_def.ControlGRUNet.actor_linear"], "methods", ["None"], ["", "def", "get_action_linear", "(", "self", ",", "state", ")", ":", "\n", "        ", "return", "self", ".", "actor_linear", "(", "state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.model_def.ControlGRUNet.transact": [[235, 238], ["model_def.ControlGRUNet.gru"], "methods", ["None"], ["", "def", "transact", "(", "self", ",", "o_x", ",", "hx", ")", ":", "\n", "        ", "hx", "=", "self", ".", "gru", "(", "o_x", ",", "hx", ")", "\n", "return", "hx", "\n", "\n"]], "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.model_def.ControlObsQBNet.__init__": [[244, 258], ["torch.Module.__init__", "int", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh", "torch.Linear", "torch.Linear", "functions.TernaryTanh", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh", "torch.Linear", "torch.Linear", "torch.ReLU6", "torch.ReLU6"], "methods", ["home.repos.pwc.inspect_result.modanesh_Differential_IG.None.model_def.ControlMMNet.__init__"], ["def", "__init__", "(", "self", ",", "input_size", ",", "x_features", ")", ":", "\n", "        ", "super", "(", "ControlObsQBNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bhx_size", "=", "x_features", "\n", "\n", "f1", "=", "int", "(", "8", "*", "x_features", ")", "\n", "self", ".", "encoder", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "input_size", ",", "f1", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "f1", ",", "x_features", ")", ",", "\n", "TernaryTanh", "(", ")", ")", "\n", "\n", "self", ".", "decoder", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "x_features", ",", "f1", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "f1", ",", "input_size", ")", ",", "\n", "nn", ".", "ReLU6", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.model_def.ControlObsQBNet.forward": [[260, 265], ["model_def.ControlObsQBNet.encode", "model_def.ControlObsQBNet.decode"], "methods", ["home.repos.pwc.inspect_result.modanesh_Differential_IG.None.model_def.ControlHxQBNet.encode", "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.model_def.ControlHxQBNet.decode"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "encoded", ",", "before_ttanh", "=", "self", ".", "encode", "(", "x", ")", "\n", "# encoded = self.encode(x)", "\n", "decoded", "=", "self", ".", "decode", "(", "encoded", ")", "\n", "return", "decoded", ",", "encoded", ",", "before_ttanh", "\n", "# return decoded, encoded", "\n"]], "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.model_def.ControlObsQBNet.encode": [[267, 273], ["model_def.ControlObsQBNet.encoder"], "methods", ["None"], ["", "def", "encode", "(", "self", ",", "x", ")", ":", "\n", "        ", "linear1", "=", "self", ".", "encoder", "[", "0", "]", "(", "x", ")", "\n", "tanh", "=", "self", ".", "encoder", "[", "1", "]", "(", "linear1", ")", "\n", "linear2", "=", "self", ".", "encoder", "[", "2", "]", "(", "tanh", ")", "\n", "ttanh", "=", "self", ".", "encoder", "[", "3", "]", "(", "linear2", ")", "\n", "return", "self", ".", "encoder", "(", "x", ")", ",", "linear2", "\n", "# return self.encoder(x)", "\n"]], "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.model_def.ControlObsQBNet.decode": [[275, 277], ["model_def.ControlObsQBNet.decoder"], "methods", ["None"], ["", "def", "decode", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "decoder", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.model_def.ControlHxQBNet.__init__": [[284, 297], ["torch.Module.__init__", "int", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh", "torch.Linear", "torch.Linear", "functions.TernaryTanh", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh"], "methods", ["home.repos.pwc.inspect_result.modanesh_Differential_IG.None.model_def.ControlMMNet.__init__"], ["def", "__init__", "(", "self", ",", "input_size", ",", "x_features", ")", ":", "\n", "        ", "super", "(", "ControlHxQBNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bhx_size", "=", "x_features", "\n", "f1", "=", "int", "(", "8", "*", "x_features", ")", "\n", "self", ".", "encoder", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "input_size", ",", "f1", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "f1", ",", "x_features", ")", ",", "\n", "TernaryTanh", "(", ")", ")", "\n", "\n", "self", ".", "decoder", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "x_features", ",", "f1", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "f1", ",", "input_size", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.model_def.ControlHxQBNet.forward": [[298, 304], ["model_def.ControlHxQBNet.encode", "model_def.ControlHxQBNet.decode"], "methods", ["home.repos.pwc.inspect_result.modanesh_Differential_IG.None.model_def.ControlHxQBNet.encode", "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.model_def.ControlHxQBNet.decode"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# encoded, before_ttanh = self.encode(x)", "\n", "        ", "encoded", "=", "self", ".", "encode", "(", "x", ")", "\n", "decoded", "=", "self", ".", "decode", "(", "encoded", ")", "\n", "# return decoded, encoded, before_ttanh", "\n", "return", "decoded", ",", "encoded", "\n", "\n"]], "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.model_def.ControlHxQBNet.encode": [[305, 312], ["model_def.ControlHxQBNet.encoder"], "methods", ["None"], ["", "def", "encode", "(", "self", ",", "x", ")", ":", "\n", "        ", "linear1", "=", "self", ".", "encoder", "[", "0", "]", "(", "x", ")", "\n", "tanh", "=", "self", ".", "encoder", "[", "1", "]", "(", "linear1", ")", "\n", "linear2", "=", "self", ".", "encoder", "[", "2", "]", "(", "tanh", ")", "\n", "ttanh", "=", "self", ".", "encoder", "[", "3", "]", "(", "linear2", ")", "\n", "# return self.encoder(x), linear2", "\n", "return", "self", ".", "encoder", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.model_def.ControlHxQBNet.decode": [[313, 315], ["model_def.ControlHxQBNet.decoder"], "methods", ["None"], ["", "def", "decode", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "decoder", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.model_def.ControlMMNet.__init__": [[321, 329], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.modanesh_Differential_IG.None.model_def.ControlMMNet.__init__"], ["def", "__init__", "(", "self", ",", "net", ",", "hx_qbn", "=", "None", ",", "obs_qbn", "=", "None", ")", ":", "\n", "        ", "super", "(", "ControlMMNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bhx_units", "=", "hx_qbn", ".", "bhx_size", "if", "hx_qbn", "is", "not", "None", "else", "None", "\n", "self", ".", "gru_units", "=", "net", ".", "gru_units", "\n", "self", ".", "obx_net", "=", "obs_qbn", "\n", "self", ".", "gru_net", "=", "net", "\n", "self", ".", "bhx_net", "=", "hx_qbn", "\n", "self", ".", "actor_linear", "=", "self", ".", "gru_net", ".", "get_action_linear", "\n", "\n"]], "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.model_def.ControlMMNet.init_hidden": [[330, 332], ["model_def.ControlMMNet.gru_net.init_hidden"], "methods", ["home.repos.pwc.inspect_result.modanesh_Differential_IG.None.model_def.ControlMMNet.init_hidden"], ["", "def", "init_hidden", "(", "self", ",", "batch_size", "=", "1", ")", ":", "\n", "        ", "return", "self", ".", "gru_net", ".", "init_hidden", "(", "batch_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.model_def.ControlMMNet.forward": [[333, 342], ["model_def.ControlMMNet.gru_net", "model_def.ControlMMNet.gru_net"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "inspect", "=", "False", ")", ":", "\n", "        ", "if", "inspect", ":", "\n", "            ", "x", ",", "hx", "=", "x", "\n", "critic", ",", "actor", ",", "hx", ",", "(", "ghx", ",", "bhx", ",", "input_c", ",", "input_x", ",", "input_tanh", ")", "=", "self", ".", "gru_net", "(", "(", "x", ",", "hx", ")", ",", "input_fn", "=", "self", ".", "obx_net", ",", "\n", "hx_fn", "=", "self", ".", "bhx_net", ",", "inspect", "=", "True", ")", "\n", "return", "critic", ",", "actor", ",", "hx", ",", "(", "ghx", ",", "bhx", ")", ",", "(", "input_c", ",", "input_x", ",", "input_tanh", ")", "\n", "", "else", ":", "\n", "            ", "input_c", "=", "self", ".", "gru_net", "(", "x", ",", "input_fn", "=", "self", ".", "obx_net", ",", "hx_fn", "=", "self", ".", "bhx_net", ",", "inspect", "=", "False", ")", "\n", "return", "input_c", "\n", "\n"]], "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.model_def.ControlMMNet.get_action_linear": [[343, 349], ["model_def.ControlMMNet.actor_linear", "model_def.ControlMMNet.bhx_net.decode"], "methods", ["home.repos.pwc.inspect_result.modanesh_Differential_IG.None.model_def.ControlHxQBNet.decode"], ["", "", "def", "get_action_linear", "(", "self", ",", "state", ",", "decode", "=", "False", ")", ":", "\n", "        ", "if", "decode", ":", "\n", "            ", "hx", "=", "self", ".", "bhx_net", ".", "decode", "(", "state", ")", "\n", "", "else", ":", "\n", "            ", "hx", "=", "state", "\n", "", "return", "self", ".", "actor_linear", "(", "hx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.model_def.ControlMMNet.transact": [[350, 354], ["model_def.ControlMMNet.gru_net.transact", "model_def.ControlMMNet.bhx_net", "model_def.ControlMMNet.obx_net.decode", "model_def.ControlMMNet.bhx_net.decode"], "methods", ["home.repos.pwc.inspect_result.modanesh_Differential_IG.None.model_def.ControlMMNet.transact", "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.model_def.ControlHxQBNet.decode", "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.model_def.ControlHxQBNet.decode"], ["", "def", "transact", "(", "self", ",", "o_x", ",", "hx_x", ")", ":", "\n", "        ", "hx_x", "=", "self", ".", "gru_net", ".", "transact", "(", "self", ".", "obx_net", ".", "decode", "(", "o_x", ")", ",", "self", ".", "bhx_net", ".", "decode", "(", "hx_x", ")", ")", "\n", "_", ",", "hx_x", "=", "self", ".", "bhx_net", "(", "hx_x", ")", "\n", "return", "hx_x", "\n", "\n"]], "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.model_def.ControlMMNet.state_encode": [[355, 357], ["model_def.ControlMMNet.bhx_net.encode"], "methods", ["home.repos.pwc.inspect_result.modanesh_Differential_IG.None.model_def.ControlHxQBNet.encode"], ["", "def", "state_encode", "(", "self", ",", "state", ")", ":", "\n", "        ", "return", "self", ".", "bhx_net", ".", "encode", "(", "state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.model_def.ControlMMNet.obs_encode": [[358, 365], ["model_def.ControlMMNet.gru_net", "torch.autograd.Variable", "torch.autograd.Variable", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "next", "hx.cuda.cuda.cuda", "model_def.ControlMMNet.parameters"], "methods", ["None"], ["", "def", "obs_encode", "(", "self", ",", "obs", ",", "hx", "=", "None", ")", ":", "\n", "        ", "if", "hx", "is", "None", ":", "\n", "            ", "hx", "=", "Variable", "(", "torch", ".", "zeros", "(", "1", ",", "self", ".", "gru_units", ")", ")", "\n", "if", "next", "(", "self", ".", "parameters", "(", ")", ")", ".", "is_cuda", ":", "\n", "                ", "hx", "=", "hx", ".", "cuda", "(", ")", "\n", "", "", "_", ",", "_", ",", "_", ",", "(", "_", ",", "_", ",", "_", ",", "input_x", ",", "_", ",", "_", ")", "=", "self", ".", "gru_net", "(", "(", "obs", ",", "hx", ")", ",", "input_fn", "=", "self", ".", "obx_net", ",", "hx_fn", "=", "self", ".", "bhx_net", ",", "inspect", "=", "True", ")", "\n", "return", "input_x", "", "", "", ""]], "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.integrated_gradients.integrated_gradient": [[7, 28], ["range", "predict_and_gradients", "numpy.average", "range", "numpy.array", "numpy.array", "scaled_inputs.append", "integrated_gradients.plot_inputs_together", "numpy.transpose", "len", "integrated_grad.append", "integrated_grad.append", "float", "avg_grads[].reshape", "inputs.reshape", "baseline.reshape", "inputs.reshape", "baseline.reshape"], "function", ["home.repos.pwc.inspect_result.modanesh_Differential_IG.None.integrated_gradients.plot_inputs_together"], ["def", "integrated_gradient", "(", "inputs", ",", "model", ",", "predict_and_gradients", ",", "original_image_x", ",", "before_Ttanh_output", ",", "steps", ",", "device", ",", "baseline", ",", "results_path", ",", "feed_tTanh", "=", "True", ",", "feature_type", "=", "'image'", ",", "env_type", "=", "'atari'", ")", ":", "\n", "    ", "scaled_inputs", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "steps", "+", "1", ")", ":", "\n", "        ", "step_k_image", "=", "baseline", "+", "(", "float", "(", "k", ")", "/", "steps", ")", "*", "(", "inputs", "-", "baseline", ")", "\n", "scaled_inputs", ".", "append", "(", "step_k_image", ")", "\n", "", "if", "env_type", "==", "'atari'", ":", "\n", "        ", "plot_inputs_together", "(", "results_path", ",", "scaled_inputs", ")", "\n", "\n", "", "grads", "=", "predict_and_gradients", "(", "scaled_inputs", ",", "model", ",", "original_image_x", ",", "before_Ttanh_output", ",", "device", ",", "feed_tTanh", "=", "feed_tTanh", ")", "\n", "avg_grads", "=", "np", ".", "average", "(", "grads", ",", "axis", "=", "0", ")", "\n", "if", "feature_type", "==", "'image'", ":", "\n", "        ", "avg_grads", "=", "np", ".", "transpose", "(", "avg_grads", ",", "(", "0", ",", "2", ",", "3", ",", "1", ")", ")", "\n", "", "integrated_grad", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "len", "(", "avg_grads", ")", ")", ":", "\n", "        ", "if", "feature_type", "==", "'image'", ":", "\n", "            ", "integrated_grad", ".", "append", "(", "(", "inputs", ".", "reshape", "(", "80", ",", "80", ",", "1", ")", "-", "baseline", ".", "reshape", "(", "80", ",", "80", ",", "1", ")", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "*", "avg_grads", "[", "j", "]", ")", "\n", "", "elif", "feature_type", "==", "'vector'", ":", "\n", "            ", "integrated_grad", ".", "append", "(", "(", "inputs", ".", "reshape", "(", "inputs", ".", "shape", "[", "1", "]", ",", "inputs", ".", "shape", "[", "0", "]", ")", "-", "baseline", ".", "reshape", "(", "baseline", ".", "shape", "[", "1", "]", ",", "baseline", ".", "shape", "[", "0", "]", ")", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "*", "avg_grads", "[", "j", "]", ".", "reshape", "(", "baseline", ".", "shape", "[", "1", "]", ",", "baseline", ".", "shape", "[", "0", "]", ")", ")", "\n", "", "", "avg_intgrads", "=", "np", ".", "array", "(", "integrated_grad", ")", "\n", "avg_grads", "=", "np", ".", "array", "(", "avg_grads", ")", "\n", "return", "avg_intgrads", ",", "avg_grads", "\n", "\n"]], "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.integrated_gradients.plot_inputs_together": [[30, 44], ["matplotlib.subplots", "enumerate", "matplotlib.tight_layout", "matplotlib.savefig", "fig.clf", "axi.imshow", "axi.set_title", "axi.set_yticklabels", "axi.set_xticklabels", "[].reshape", "str", "steps_images[].cpu().numpy", "steps_images[].cpu"], "function", ["None"], ["", "def", "plot_inputs_together", "(", "path", ",", "steps_images", ")", ":", "\n", "    ", "nrows", ",", "ncols", "=", "5", ",", "10", "\n", "figsize", "=", "[", "80", ",", "80", "]", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "nrows", "=", "nrows", ",", "ncols", "=", "ncols", ",", "figsize", "=", "figsize", ")", "\n", "\n", "for", "i", ",", "axi", "in", "enumerate", "(", "ax", ".", "flat", ")", ":", "\n", "        ", "axi", ".", "imshow", "(", "steps_images", "[", "i", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", ".", "reshape", "(", "steps_images", "[", "i", "]", ".", "shape", "[", "2", ":", "]", ")", ")", "\n", "axi", ".", "set_title", "(", "\"step \"", "+", "str", "(", "i", ")", ",", "fontsize", "=", "45", ")", "\n", "axi", ".", "set_yticklabels", "(", "[", "]", ")", "\n", "axi", ".", "set_xticklabels", "(", "[", "]", ")", "\n", "\n", "", "plt", ".", "tight_layout", "(", "True", ")", "\n", "plt", ".", "savefig", "(", "path", "+", "\"/scaled_inputs.jpg\"", ")", "\n", "fig", ".", "clf", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.integrated_gradients.mask_diff_ig": [[46, 76], ["[].tolist", "[].tolist", "range", "numpy.average", "numpy.average", "cv2.resize", "cv2.resize", "cv2.resize", "matplotlib.subplots", "ax[].imshow", "ax[].imshow", "ax[].set_title", "ax[].set_yticklabels", "ax[].set_xticklabels", "ax[].imshow", "ax[].imshow", "ax[].set_title", "ax[].set_yticklabels", "ax[].set_xticklabels", "matplotlib.tight_layout", "matplotlib.savefig", "fig.clf", "len", "numpy.array", "numpy.array", "cv2.resize.cpu().numpy().reshape", "cv2.cvtColor", "cv2.cvtColor", "os.path.join", "different_bit_values_ig.append", "different_bit_values_uig.append", "[].tolist.cpu().detach().numpy", "[].tolist.cpu().detach().numpy", "cv2.resize.cpu().numpy", "[].tolist.cpu().detach", "[].tolist.cpu().detach", "cv2.resize.cpu", "[].tolist.cpu", "[].tolist.cpu"], "function", ["None"], ["", "def", "mask_diff_ig", "(", "img_integrated_gradient_overlay", ",", "unmasked_integrated_gradient", ",", "input_image", ",", "original_image_x", ",", "baseline_x", ",", "input_img_path", ",", "save_path", ")", ":", "\n", "    ", "original_image_x", "=", "original_image_x", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", ".", "tolist", "(", ")", "\n", "baseline_x", "=", "baseline_x", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", ".", "tolist", "(", ")", "\n", "different_bit_values_ig", "=", "[", "]", "\n", "different_bit_values_uig", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "original_image_x", ")", ")", ":", "\n", "        ", "if", "original_image_x", "[", "i", "]", "!=", "baseline_x", "[", "i", "]", ":", "\n", "            ", "different_bit_values_ig", ".", "append", "(", "img_integrated_gradient_overlay", "[", "i", "]", ")", "\n", "different_bit_values_uig", ".", "append", "(", "unmasked_integrated_gradient", "[", "i", "]", ")", "\n", "\n", "", "", "mask", "=", "np", ".", "average", "(", "np", ".", "array", "(", "different_bit_values_ig", ")", ",", "axis", "=", "0", ")", "\n", "unmask", "=", "np", ".", "average", "(", "np", ".", "array", "(", "different_bit_values_uig", ")", ",", "axis", "=", "0", ")", "\n", "input_image", "=", "cv2", ".", "resize", "(", "input_image", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "reshape", "(", "80", ",", "80", ")", ",", "(", "160", ",", "160", ")", ")", "\n", "mask", "=", "cv2", ".", "resize", "(", "mask", ",", "(", "160", ",", "160", ")", ")", "\n", "unmask", "=", "cv2", ".", "resize", "(", "unmask", ",", "(", "160", ",", "160", ")", ")", "\n", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "nrows", "=", "1", ",", "ncols", "=", "2", ",", "figsize", "=", "(", "6", ",", "3", ")", ")", "\n", "ax", "[", "0", "]", ".", "imshow", "(", "cv2", ".", "cvtColor", "(", "input_image", ",", "cv2", ".", "COLOR_BGR2RGB", ")", ")", "\n", "ax", "[", "0", "]", ".", "imshow", "(", "mask", ",", "'hot'", ",", "interpolation", "=", "'None'", ",", "alpha", "=", "0.6", ")", "\n", "ax", "[", "0", "]", ".", "set_title", "(", "\"masked_diff_IG\"", ")", "\n", "ax", "[", "0", "]", ".", "set_yticklabels", "(", "[", "]", ")", "\n", "ax", "[", "0", "]", ".", "set_xticklabels", "(", "[", "]", ")", "\n", "ax", "[", "1", "]", ".", "imshow", "(", "cv2", ".", "cvtColor", "(", "input_image", ",", "cv2", ".", "COLOR_BGR2RGB", ")", ")", "\n", "ax", "[", "1", "]", ".", "imshow", "(", "unmask", ",", "'hot'", ",", "interpolation", "=", "'None'", ",", "alpha", "=", "0.6", ")", "\n", "ax", "[", "1", "]", ".", "set_title", "(", "\"unmasked_diff_IG\"", ")", "\n", "ax", "[", "1", "]", ".", "set_yticklabels", "(", "[", "]", ")", "\n", "ax", "[", "1", "]", ".", "set_xticklabels", "(", "[", "]", ")", "\n", "plt", ".", "tight_layout", "(", "True", ")", "\n", "plt", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "save_path", ",", "\"diff_IGs.jpg\"", ")", ")", "\n", "fig", ".", "clf", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.utils.calculate_outputs_and_gradients_steps": [[12, 32], ["range", "numpy.array", "len", "torch.tensor", "model", "range", "np.array.append", "torch.tensor.to", "len", "model.zero_grad", "loss.backward", "[].tolist", "bits_gradients.append", "torch.tensor.grad.data.fill_", "nn.MSELoss", "[].to", "nn.MSELoss", "torch.tensor.grad.detach().cpu().numpy", "torch.tensor.grad.detach().cpu", "torch.tensor.grad.detach"], "function", ["home.repos.pwc.inspect_result.modanesh_Differential_IG.None.functions.TernarizeTanhF.backward"], ["def", "calculate_outputs_and_gradients_steps", "(", "inputs", ",", "model", ",", "original_image_x", ",", "input_before_quantized", ",", "device", ",", "grad_clip", "=", "1", ",", "feed_tTanh", "=", "False", ")", ":", "\n", "    ", "gradients", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "inputs", ")", ")", ":", "\n", "        ", "bits_gradients", "=", "[", "]", "\n", "input", "=", "torch", ".", "tensor", "(", "inputs", "[", "i", "]", ",", "requires_grad", "=", "True", ")", "\n", "output_c", ",", "output_x", ",", "output_before_quantized", "=", "model", "(", "input", ".", "to", "(", "device", ")", ")", "\n", "for", "j", "in", "range", "(", "len", "(", "output_x", "[", "0", "]", ")", ")", ":", "\n", "            ", "model", ".", "zero_grad", "(", ")", "\n", "if", "feed_tTanh", ":", "\n", "                ", "loss", "=", "nn", ".", "MSELoss", "(", ")", "(", "output_before_quantized", "[", "0", "]", "[", "j", "]", ",", "input_before_quantized", "[", "0", "]", "[", "j", "]", ".", "to", "(", "device", ")", ")", "\n", "", "else", ":", "\n", "                ", "loss", "=", "nn", ".", "MSELoss", "(", ")", "(", "output_x", "[", "0", "]", "[", "j", "]", ",", "original_image_x", "[", "0", "]", "[", "j", "]", ")", "\n", "", "loss", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "gradient", "=", "input", ".", "grad", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", ".", "tolist", "(", ")", "\n", "bits_gradients", ".", "append", "(", "gradient", ")", "\n", "input", ".", "grad", ".", "data", ".", "fill_", "(", "0", ")", "\n", "", "gradients", ".", "append", "(", "bits_gradients", ")", "\n", "", "gradients", "=", "np", ".", "array", "(", "gradients", ")", "\n", "assert", "gradients", "[", "0", "]", "[", "0", "]", ".", "shape", "==", "inputs", "[", "0", "]", "[", "0", "]", ".", "shape", "\n", "return", "gradients", "\n", "\n"]], "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.utils.generate_entrie_images": [[34, 46], ["range", "utils.plot_GIs_together", "len", "matplotlib.gcf", "plt.gcf.set_size_inches", "matplotlib.imshow", "plt.gcf.savefig", "str", "img_integrad_overlay[].reshape", "str", "str", "int"], "function", ["home.repos.pwc.inspect_result.modanesh_Differential_IG.None.utils.plot_GIs_together"], ["", "def", "generate_entrie_images", "(", "img_origin", ",", "img_integrad_overlay", ",", "bit_values", ",", "img_file_name", ",", "results_path", ")", ":", "\n", "    ", "for", "i", "in", "range", "(", "len", "(", "img_integrad_overlay", ")", ")", ":", "\n", "        ", "if", "i", "<", "10", ":", "\n", "            ", "bit_i", "=", "'0'", "+", "str", "(", "i", ")", "\n", "", "else", ":", "\n", "            ", "bit_i", "=", "str", "(", "i", ")", "\n", "", "fig", "=", "plt", ".", "gcf", "(", ")", "\n", "fig", ".", "set_size_inches", "(", "2", ",", "2", ")", "\n", "plt", ".", "imshow", "(", "img_integrad_overlay", "[", "i", "]", ".", "reshape", "(", "img_origin", ".", "shape", "[", ":", "-", "1", "]", ")", ",", "cmap", "=", "'hot'", ")", "\n", "fig", ".", "savefig", "(", "results_path", "+", "'/IG_bit'", "+", "bit_i", "+", "'_bv'", "+", "str", "(", "int", "(", "bit_values", "[", "0", "]", "[", "i", "]", ".", "data", ")", ")", "+", "'_'", "+", "img_file_name", "+", "\".jpg\"", ")", "\n", "\n", "", "plot_GIs_together", "(", "results_path", ",", "img_integrad_overlay", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.utils.plot_GIs_together": [[48, 61], ["matplotlib.subplots", "enumerate", "matplotlib.tight_layout", "matplotlib.savefig", "fig.clf", "axi.imshow", "axi.set_title", "axi.set_yticklabels", "axi.set_xticklabels", "IGs[].reshape", "str"], "function", ["None"], ["", "def", "plot_GIs_together", "(", "path", ",", "IGs", ")", ":", "\n", "    ", "nrows", ",", "ncols", "=", "10", ",", "10", "\n", "figsize", "=", "[", "20", ",", "20", "]", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "nrows", "=", "nrows", ",", "ncols", "=", "ncols", ",", "figsize", "=", "figsize", ")", "\n", "\n", "for", "i", ",", "axi", "in", "enumerate", "(", "ax", ".", "flat", ")", ":", "\n", "        ", "axi", ".", "imshow", "(", "IGs", "[", "i", "]", ".", "reshape", "(", "IGs", "[", "i", "]", ".", "shape", "[", ":", "2", "]", ")", ",", "cmap", "=", "'hot'", ")", "\n", "axi", ".", "set_title", "(", "\"bit: \"", "+", "str", "(", "i", ")", ")", "\n", "axi", ".", "set_yticklabels", "(", "[", "]", ")", "\n", "axi", ".", "set_xticklabels", "(", "[", "]", ")", "\n", "", "plt", ".", "tight_layout", "(", "True", ")", "\n", "plt", ".", "savefig", "(", "path", "+", "\"/IGs.jpg\"", ")", "\n", "fig", ".", "clf", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.utils.gather_observations": [[63, 138], ["os.path.exists", "model_def.ControlMMNet.load_state_dict", "model_def.ControlMMNet.eval", "model_def.ControlMMNet.eval", "random.seed", "set", "torch.save", "torch.load", "env_wrapper.atari_wrapper", "gym.make.seed", "gym.make.reset", "model_def.GRUNet", "model_def.HxQBNet", "model_def.ObsQBNet", "model_def.MMNet", "model_def.ControlMMNet.cuda", "torch.load", "torch.no_grad", "range", "len", "int", "gym.make", "gym.make.seed", "gym.make.reset", "model_def.ControlGRUNet", "model_def.ControlHxQBNet", "model_def.ControlObsQBNet", "model_def.ControlMMNet", "gym.make.reset", "model_def.ControlMMNet.init_hidden", "model_def.ControlMMNet.state_encode", "str", "len", "int", "curr_state.cuda.cuda", "model_def.ControlMMNet.get_action_linear", "torch.softmax", "int", "torch.Tensor().unsqueeze", "model_def.ControlMMNet.", "torch.load.append", "torch.softmax", "int", "gym.make.step", "set.add", "str", "str", "obs.cuda.cuda", "[].cpu().data.numpy", "len", "[].cpu().data.numpy", "torch.Tensor", "len", "actions_to_consider.count", "str", "[].cpu", "int", "[].cpu", "next_state.cpu().data.numpy", "F.softmax.max", "F.softmax.max", "next_state.cpu"], "function", ["home.repos.pwc.inspect_result.modanesh_Differential_IG.None.env_wrapper.AtariWrapper.seed", "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.env_wrapper.atari_wrapper", "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.env_wrapper.AtariWrapper.seed", "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.env_wrapper.AtariWrapper.reset", "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.env_wrapper.AtariWrapper.seed", "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.env_wrapper.AtariWrapper.reset", "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.env_wrapper.AtariWrapper.reset", "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.model_def.ControlMMNet.init_hidden", "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.model_def.ControlMMNet.state_encode", "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.model_def.ControlMMNet.get_action_linear", "home.repos.pwc.inspect_result.modanesh_Differential_IG.None.env_wrapper.PongWrapper.step"], ["", "def", "gather_observations", "(", "env_name", ",", "gru_size", ",", "bhx_size", ",", "ox_size", ",", "bgru_net_path", ",", "device", ",", "episodes", "=", "1", ",", "env_type", "=", "'atari'", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "exists", "(", "'./inputs/'", "+", "str", "(", "env_name", ")", "+", "'/observations.pt'", ")", ":", "\n", "        ", "observations", "=", "torch", ".", "load", "(", "'./inputs/'", "+", "str", "(", "env_name", ")", "+", "'/observations.pt'", ",", "map_location", "=", "device", ")", "\n", "return", "observations", "\n", "\n", "", "if", "env_type", "==", "'atari'", ":", "\n", "        ", "env", "=", "atari_wrapper", "(", "env_name", ")", "\n", "env", ".", "seed", "(", "0", ")", "\n", "obs", "=", "env", ".", "reset", "(", ")", "\n", "gru_net", "=", "GRUNet", "(", "len", "(", "obs", ")", ",", "gru_size", ",", "int", "(", "env", ".", "action_space", ".", "n", ")", ")", "\n", "bhx_net", "=", "HxQBNet", "(", "gru_size", ",", "bhx_size", ")", "\n", "ox_net", "=", "ObsQBNet", "(", "gru_net", ".", "input_c_features", ",", "ox_size", ")", "\n", "bgru_net", "=", "MMNet", "(", "gru_net", ",", "bhx_net", ",", "ox_net", ")", "\n", "", "elif", "env_type", "==", "'classic_control'", ":", "\n", "        ", "env", "=", "gym", ".", "make", "(", "env_name", ")", "\n", "env", ".", "seed", "(", "0", ")", "\n", "obs", "=", "env", ".", "reset", "(", ")", "\n", "gru_net", "=", "ControlGRUNet", "(", "len", "(", "obs", ")", ",", "gru_size", ",", "int", "(", "env", ".", "action_space", ".", "n", ")", ")", "\n", "bhx_net", "=", "ControlHxQBNet", "(", "gru_size", ",", "bhx_size", ")", "\n", "ox_net", "=", "ControlObsQBNet", "(", "gru_net", ".", "input_c_features", ",", "ox_size", ")", "\n", "bgru_net", "=", "ControlMMNet", "(", "gru_net", ",", "bhx_net", ",", "ox_net", ")", "\n", "\n", "", "if", "cuda", ":", "\n", "        ", "bgru_net", "=", "bgru_net", ".", "cuda", "(", ")", "\n", "\n", "", "bgru_net", ".", "load_state_dict", "(", "torch", ".", "load", "(", "bgru_net_path", ",", "map_location", "=", "'cpu'", ")", ")", "\n", "bgru_net", ".", "eval", "(", ")", "\n", "bgru_net", ".", "eval", "(", ")", "\n", "max_actions", "=", "10000", "\n", "random", ".", "seed", "(", "0", ")", "\n", "x", "=", "set", "(", "[", "]", ")", "\n", "observations", "=", "[", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "ep", "in", "range", "(", "episodes", ")", ":", "\n", "            ", "done", "=", "False", "\n", "obs", "=", "env", ".", "reset", "(", ")", "\n", "curr_state", "=", "bgru_net", ".", "init_hidden", "(", ")", "\n", "if", "cuda", ":", "\n", "                ", "curr_state", "=", "curr_state", ".", "cuda", "(", ")", "\n", "", "curr_state_x", "=", "bgru_net", ".", "state_encode", "(", "curr_state", ")", "\n", "ep_reward", "=", "0", "\n", "ep_actions", "=", "[", "]", "\n", "record_changes", "=", "[", "]", "\n", "while", "not", "done", ":", "\n", "# env.render()", "\n", "\n", "                ", "curr_action", "=", "bgru_net", ".", "get_action_linear", "(", "curr_state_x", ",", "decode", "=", "True", ")", "\n", "prob", "=", "F", ".", "softmax", "(", "curr_action", ",", "dim", "=", "1", ")", "\n", "curr_action", "=", "int", "(", "prob", ".", "max", "(", "1", ")", "[", "1", "]", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "[", "0", "]", ")", "\n", "obs", "=", "torch", ".", "Tensor", "(", "obs", ")", ".", "unsqueeze", "(", "0", ")", "\n", "if", "cuda", ":", "\n", "                    ", "obs", "=", "obs", ".", "cuda", "(", ")", "\n", "", "critic", ",", "logit", ",", "next_state", ",", "(", "next_state_c", ",", "next_state_x", ")", ",", "(", "_", ",", "obs_x", ",", "obs_tanh", ")", "=", "bgru_net", "(", "(", "obs", ",", "curr_state", ")", ",", "\n", "inspect", "=", "True", ")", "\n", "observations", ".", "append", "(", "obs", ")", "\n", "prob", "=", "F", ".", "softmax", "(", "logit", ",", "dim", "=", "1", ")", "\n", "next_action", "=", "int", "(", "prob", ".", "max", "(", "1", ")", "[", "1", "]", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", ")", "\n", "\n", "obs", ",", "reward", ",", "done", ",", "_", "=", "env", ".", "step", "(", "next_action", ")", "\n", "\n", "done", "=", "done", "if", "len", "(", "ep_actions", ")", "<=", "max_actions", "else", "True", "\n", "# a quick hack to prevent the agent from stucking", "\n", "max_same_action", "=", "5000", "\n", "if", "len", "(", "ep_actions", ")", ">", "max_same_action", ":", "\n", "                    ", "actions_to_consider", "=", "ep_actions", "[", "-", "max_same_action", ":", "]", "\n", "if", "actions_to_consider", ".", "count", "(", "actions_to_consider", "[", "0", "]", ")", "==", "max_same_action", ":", "\n", "                        ", "done", "=", "True", "\n", "", "", "curr_state", "=", "next_state", "\n", "curr_state_x", "=", "next_state_x", "\n", "\n", "ep_reward", "+=", "reward", "\n", "x", ".", "add", "(", "''", ".", "join", "(", "[", "str", "(", "int", "(", "i", ")", ")", "for", "i", "in", "next_state", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "[", "0", "]", "]", ")", ")", "\n", "\n", "", "", "", "torch", ".", "save", "(", "observations", ",", "'./inputs/'", "+", "str", "(", "env_name", ")", "+", "'/observations.pt'", ")", "\n", "return", "observations", "", "", ""]]}