{"home.repos.pwc.inspect_result.arunmallya_piggyback.src.networks.View.__init__": [[17, 20], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.arunmallya_piggyback.modnets.densenet.DenseNet.__init__"], ["def", "__init__", "(", "self", ",", "*", "shape", ")", ":", "\n", "        ", "super", "(", "View", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "shape", "=", "shape", "\n", "\n"]], "home.repos.pwc.inspect_result.arunmallya_piggyback.src.networks.View.forward": [[21, 23], ["input.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "input", ".", "view", "(", "*", "self", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arunmallya_piggyback.src.networks.ModifiedVGG16.__init__": [[28, 33], ["torch.Module.__init__", "networks.ModifiedVGG16.make_model"], "methods", ["home.repos.pwc.inspect_result.arunmallya_piggyback.modnets.densenet.DenseNet.__init__", "home.repos.pwc.inspect_result.arunmallya_piggyback.src.networks.ResNetDiffInit.make_model"], ["def", "__init__", "(", "self", ",", "mask_init", "=", "'1s'", ",", "mask_scale", "=", "1e-2", ",", "threshold_fn", "=", "'binarizer'", ",", "\n", "make_model", "=", "True", ",", "original", "=", "False", ")", ":", "\n", "        ", "super", "(", "ModifiedVGG16", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "make_model", ":", "\n", "            ", "self", ".", "make_model", "(", "mask_init", ",", "mask_scale", ",", "threshold_fn", ",", "original", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arunmallya_piggyback.src.networks.ModifiedVGG16.make_model": [[34, 79], ["modnets.vgg16.classifier.children", "modnets.vgg16.classifier.children", "list", "list.extend", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torchvision.models.vgg16", "print", "modnets.vgg16", "modnets.vgg16", "modnets.vgg16", "modnets.vgg16", "torchvision.models.vgg16", "zip", "print", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "isinstance", "modnets.vgg16.features.children", "modnets.vgg16.features.children", "modnets.vgg16.modules", "modnets.vgg16.modules", "torchvision.models.vgg16.modules", "networks.View", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "str", "module.weight.data.copy_", "module.bias.data.copy_", "type", "networks.ModifiedVGG16.datasets.append", "networks.ModifiedVGG16.classifiers.append"], "methods", ["home.repos.pwc.inspect_result.arunmallya_piggyback.modnets.vgg.vgg16", "home.repos.pwc.inspect_result.arunmallya_piggyback.modnets.vgg.vgg16", "home.repos.pwc.inspect_result.arunmallya_piggyback.modnets.vgg.vgg16", "home.repos.pwc.inspect_result.arunmallya_piggyback.modnets.vgg.vgg16", "home.repos.pwc.inspect_result.arunmallya_piggyback.modnets.vgg.vgg16", "home.repos.pwc.inspect_result.arunmallya_piggyback.modnets.vgg.vgg16"], ["", "", "def", "make_model", "(", "self", ",", "mask_init", ",", "mask_scale", ",", "threshold_fn", ",", "original", ")", ":", "\n", "        ", "\"\"\"Creates the model.\"\"\"", "\n", "if", "original", ":", "\n", "            ", "vgg16", "=", "models", ".", "vgg16", "(", "pretrained", "=", "True", ")", "\n", "print", "(", "'Creating model: No mask layers.'", ")", "\n", "", "else", ":", "\n", "# Get the one with masks and pretrained model.", "\n", "            ", "vgg16", "=", "modnets", ".", "vgg16", "(", "mask_init", ",", "mask_scale", ",", "threshold_fn", ")", "\n", "vgg16_pretrained", "=", "models", ".", "vgg16", "(", "pretrained", "=", "True", ")", "\n", "# Copy weights from the pretrained to the modified model.", "\n", "for", "module", ",", "module_pretrained", "in", "zip", "(", "vgg16", ".", "modules", "(", ")", ",", "vgg16_pretrained", ".", "modules", "(", ")", ")", ":", "\n", "                ", "if", "'ElementWise'", "in", "str", "(", "type", "(", "module", ")", ")", ":", "\n", "                    ", "module", ".", "weight", ".", "data", ".", "copy_", "(", "module_pretrained", ".", "weight", ".", "data", ")", "\n", "module", ".", "bias", ".", "data", ".", "copy_", "(", "module_pretrained", ".", "bias", ".", "data", ")", "\n", "", "", "print", "(", "'Creating model: Mask layers created.'", ")", "\n", "\n", "", "self", ".", "datasets", ",", "self", ".", "classifiers", "=", "[", "]", ",", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "idx", "=", "6", "\n", "for", "module", "in", "vgg16", ".", "classifier", ".", "children", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "module", ",", "(", "nn", ".", "Linear", ",", "nl", ".", "ElementWiseLinear", ")", ")", ":", "\n", "                ", "if", "idx", "==", "6", ":", "\n", "                    ", "fc6", "=", "module", "\n", "", "elif", "idx", "==", "7", ":", "\n", "                    ", "fc7", "=", "module", "\n", "", "elif", "idx", "==", "8", ":", "\n", "                    ", "self", ".", "datasets", ".", "append", "(", "'imagenet'", ")", "\n", "self", ".", "classifiers", ".", "append", "(", "module", ")", "\n", "", "idx", "+=", "1", "\n", "", "", "features", "=", "list", "(", "vgg16", ".", "features", ".", "children", "(", ")", ")", "\n", "features", ".", "extend", "(", "[", "\n", "View", "(", "-", "1", ",", "25088", ")", ",", "\n", "fc6", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Dropout", "(", ")", ",", "\n", "fc7", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Dropout", "(", ")", ",", "\n", "]", ")", "\n", "\n", "# Shared params are those which are common amongst all classes.", "\n", "self", ".", "shared", "=", "nn", ".", "Sequential", "(", "*", "features", ")", "\n", "\n", "# model.set_dataset() has to be called explicity, else model won't work.", "\n", "self", ".", "classifier", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.arunmallya_piggyback.src.networks.ModifiedVGG16.add_dataset": [[80, 85], ["networks.ModifiedVGG16.datasets.append", "networks.ModifiedVGG16.classifiers.append", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["None"], ["", "def", "add_dataset", "(", "self", ",", "dataset", ",", "num_outputs", ")", ":", "\n", "        ", "\"\"\"Adds a new dataset to the classifier.\"\"\"", "\n", "if", "dataset", "not", "in", "self", ".", "datasets", ":", "\n", "            ", "self", ".", "datasets", ".", "append", "(", "dataset", ")", "\n", "self", ".", "classifiers", ".", "append", "(", "nn", ".", "Linear", "(", "4096", ",", "num_outputs", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arunmallya_piggyback.src.networks.ModifiedVGG16.set_dataset": [[86, 90], ["networks.ModifiedVGG16.datasets.index"], "methods", ["None"], ["", "", "def", "set_dataset", "(", "self", ",", "dataset", ")", ":", "\n", "        ", "\"\"\"Change the active classifier.\"\"\"", "\n", "assert", "dataset", "in", "self", ".", "datasets", "\n", "self", ".", "classifier", "=", "self", ".", "classifiers", "[", "self", ".", "datasets", ".", "index", "(", "dataset", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.arunmallya_piggyback.src.networks.ModifiedVGG16.train_nobn": [[91, 100], ["super().train", "networks.ModifiedVGG16.shared.modules", "str", "module.eval", "type"], "methods", ["home.repos.pwc.inspect_result.arunmallya_piggyback.src.main.Manager.train", "home.repos.pwc.inspect_result.arunmallya_piggyback.src.main.Manager.eval"], ["", "def", "train_nobn", "(", "self", ",", "mode", "=", "True", ")", ":", "\n", "        ", "\"\"\"Override the default module train.\"\"\"", "\n", "super", "(", "ModifiedVGG16", ",", "self", ")", ".", "train", "(", "mode", ")", "\n", "\n", "# Set the BNs to eval mode so that the running means and averages", "\n", "# do not update.", "\n", "for", "module", "in", "self", ".", "shared", ".", "modules", "(", ")", ":", "\n", "            ", "if", "'BatchNorm'", "in", "str", "(", "type", "(", "module", ")", ")", ":", "\n", "                ", "module", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arunmallya_piggyback.src.networks.ModifiedVGG16.forward": [[101, 106], ["networks.ModifiedVGG16.shared", "networks.ModifiedVGG16.view", "networks.ModifiedVGG16.classifier", "networks.ModifiedVGG16.size"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "shared", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.arunmallya_piggyback.src.networks.ModifiedVGG16BN.__init__": [[111, 116], ["networks.ModifiedVGG16.__init__", "networks.ModifiedVGG16BN.make_model"], "methods", ["home.repos.pwc.inspect_result.arunmallya_piggyback.modnets.densenet.DenseNet.__init__", "home.repos.pwc.inspect_result.arunmallya_piggyback.src.networks.ResNetDiffInit.make_model"], ["def", "__init__", "(", "self", ",", "mask_init", "=", "'1s'", ",", "mask_scale", "=", "1e-2", ",", "threshold_fn", "=", "'binarizer'", ",", "\n", "make_model", "=", "True", ",", "original", "=", "False", ")", ":", "\n", "        ", "super", "(", "ModifiedVGG16BN", ",", "self", ")", ".", "__init__", "(", "make_model", "=", "False", ")", "\n", "if", "make_model", ":", "\n", "            ", "self", ".", "make_model", "(", "mask_init", ",", "mask_scale", ",", "threshold_fn", ",", "original", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arunmallya_piggyback.src.networks.ModifiedVGG16BN.make_model": [[117, 167], ["modnets.vgg16_bn.classifier.children", "modnets.vgg16_bn.classifier.children", "list", "list.extend", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torchvision.models.vgg16_bn", "print", "modnets.vgg16_bn", "modnets.vgg16_bn", "modnets.vgg16_bn", "modnets.vgg16_bn", "torchvision.models.vgg16_bn", "zip", "print", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "isinstance", "modnets.vgg16_bn.features.children", "modnets.vgg16_bn.features.children", "modnets.vgg16_bn.modules", "modnets.vgg16_bn.modules", "torchvision.models.vgg16_bn.modules", "networks.View", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "str", "module.weight.data.copy_", "module.bias.data.copy_", "type", "str", "module.weight.data.copy_", "module.bias.data.copy_", "module.running_mean.copy_", "module.running_var.copy_", "type", "networks.ModifiedVGG16BN.datasets.append", "networks.ModifiedVGG16BN.classifiers.append"], "methods", ["home.repos.pwc.inspect_result.arunmallya_piggyback.modnets.vgg.vgg16_bn", "home.repos.pwc.inspect_result.arunmallya_piggyback.modnets.vgg.vgg16_bn", "home.repos.pwc.inspect_result.arunmallya_piggyback.modnets.vgg.vgg16_bn", "home.repos.pwc.inspect_result.arunmallya_piggyback.modnets.vgg.vgg16_bn", "home.repos.pwc.inspect_result.arunmallya_piggyback.modnets.vgg.vgg16_bn", "home.repos.pwc.inspect_result.arunmallya_piggyback.modnets.vgg.vgg16_bn"], ["", "", "def", "make_model", "(", "self", ",", "mask_init", ",", "mask_scale", ",", "threshold_fn", ",", "original", ")", ":", "\n", "        ", "\"\"\"Creates the model.\"\"\"", "\n", "if", "original", ":", "\n", "            ", "vgg16_bn", "=", "models", ".", "vgg16_bn", "(", "pretrained", "=", "True", ")", "\n", "print", "(", "'Creating model: No mask layers.'", ")", "\n", "", "else", ":", "\n", "# Get the one with masks and pretrained model.", "\n", "            ", "vgg16_bn", "=", "modnets", ".", "vgg16_bn", "(", "mask_init", ",", "mask_scale", ",", "threshold_fn", ")", "\n", "vgg16_bn_pretrained", "=", "models", ".", "vgg16_bn", "(", "pretrained", "=", "True", ")", "\n", "# Copy weights from the pretrained to the modified model.", "\n", "for", "module", ",", "module_pretrained", "in", "zip", "(", "vgg16_bn", ".", "modules", "(", ")", ",", "vgg16_bn_pretrained", ".", "modules", "(", ")", ")", ":", "\n", "                ", "if", "'ElementWise'", "in", "str", "(", "type", "(", "module", ")", ")", ":", "\n", "                    ", "module", ".", "weight", ".", "data", ".", "copy_", "(", "module_pretrained", ".", "weight", ".", "data", ")", "\n", "module", ".", "bias", ".", "data", ".", "copy_", "(", "module_pretrained", ".", "bias", ".", "data", ")", "\n", "", "elif", "'BatchNorm'", "in", "str", "(", "type", "(", "module", ")", ")", ":", "\n", "                    ", "module", ".", "weight", ".", "data", ".", "copy_", "(", "module_pretrained", ".", "weight", ".", "data", ")", "\n", "module", ".", "bias", ".", "data", ".", "copy_", "(", "module_pretrained", ".", "bias", ".", "data", ")", "\n", "module", ".", "running_mean", ".", "copy_", "(", "module_pretrained", ".", "running_mean", ")", "\n", "module", ".", "running_var", ".", "copy_", "(", "module_pretrained", ".", "running_var", ")", "\n", "", "", "print", "(", "'Creating model: Mask layers created.'", ")", "\n", "\n", "", "self", ".", "datasets", ",", "self", ".", "classifiers", "=", "[", "]", ",", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "idx", "=", "6", "\n", "for", "module", "in", "vgg16_bn", ".", "classifier", ".", "children", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "module", ",", "(", "nn", ".", "Linear", ",", "nl", ".", "ElementWiseLinear", ")", ")", ":", "\n", "                ", "if", "idx", "==", "6", ":", "\n", "                    ", "fc6", "=", "module", "\n", "", "elif", "idx", "==", "7", ":", "\n", "                    ", "fc7", "=", "module", "\n", "", "elif", "idx", "==", "8", ":", "\n", "                    ", "self", ".", "datasets", ".", "append", "(", "'imagenet'", ")", "\n", "self", ".", "classifiers", ".", "append", "(", "module", ")", "\n", "", "idx", "+=", "1", "\n", "", "", "features", "=", "list", "(", "vgg16_bn", ".", "features", ".", "children", "(", ")", ")", "\n", "features", ".", "extend", "(", "[", "\n", "View", "(", "-", "1", ",", "25088", ")", ",", "\n", "fc6", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Dropout", "(", ")", ",", "\n", "fc7", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Dropout", "(", ")", ",", "\n", "]", ")", "\n", "\n", "# Shared params are those which are common amongst all classes.", "\n", "self", ".", "shared", "=", "nn", ".", "Sequential", "(", "*", "features", ")", "\n", "\n", "# model.set_dataset() has to be called explicity, else model won't work.", "\n", "self", ".", "classifier", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.arunmallya_piggyback.src.networks.ModifiedResNet.__init__": [[172, 177], ["networks.ModifiedVGG16.__init__", "networks.ModifiedResNet.make_model"], "methods", ["home.repos.pwc.inspect_result.arunmallya_piggyback.modnets.densenet.DenseNet.__init__", "home.repos.pwc.inspect_result.arunmallya_piggyback.src.networks.ResNetDiffInit.make_model"], ["def", "__init__", "(", "self", ",", "mask_init", "=", "'1s'", ",", "mask_scale", "=", "1e-2", ",", "threshold_fn", "=", "'binarizer'", ",", "\n", "make_model", "=", "True", ",", "original", "=", "False", ")", ":", "\n", "        ", "super", "(", "ModifiedResNet", ",", "self", ")", ".", "__init__", "(", "make_model", "=", "False", ")", "\n", "if", "make_model", ":", "\n", "            ", "self", ".", "make_model", "(", "mask_init", ",", "mask_scale", ",", "threshold_fn", ",", "original", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arunmallya_piggyback.src.networks.ModifiedResNet.make_model": [[178, 214], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "modnets.resnet50.named_children", "modnets.resnet50.named_children", "networks.ModifiedResNet.datasets.append", "networks.ModifiedResNet.classifiers.append", "torchvision.models.resnet50", "print", "modnets.resnet50", "modnets.resnet50", "modnets.resnet50", "modnets.resnet50", "torchvision.models.resnet50", "zip", "print", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "modnets.resnet50.modules", "modnets.resnet50.modules", "torchvision.models.resnet50.modules", "networks.ModifiedResNet.shared.add_module", "str", "module.weight.data.copy_", "type", "module.bias.data.copy_", "str", "module.weight.data.copy_", "module.bias.data.copy_", "module.running_mean.copy_", "module.running_var.copy_", "type"], "methods", ["home.repos.pwc.inspect_result.arunmallya_piggyback.modnets.resnet.resnet50", "home.repos.pwc.inspect_result.arunmallya_piggyback.modnets.resnet.resnet50", "home.repos.pwc.inspect_result.arunmallya_piggyback.modnets.resnet.resnet50", "home.repos.pwc.inspect_result.arunmallya_piggyback.modnets.resnet.resnet50", "home.repos.pwc.inspect_result.arunmallya_piggyback.modnets.resnet.resnet50", "home.repos.pwc.inspect_result.arunmallya_piggyback.modnets.resnet.resnet50"], ["", "", "def", "make_model", "(", "self", ",", "mask_init", ",", "mask_scale", ",", "threshold_fn", ",", "original", ")", ":", "\n", "        ", "\"\"\"Creates the model.\"\"\"", "\n", "if", "original", ":", "\n", "            ", "resnet", "=", "models", ".", "resnet50", "(", "pretrained", "=", "True", ")", "\n", "print", "(", "'Creating model: No mask layers.'", ")", "\n", "", "else", ":", "\n", "# Get the one with masks and pretrained model.", "\n", "            ", "resnet", "=", "modnets", ".", "resnet50", "(", "mask_init", ",", "mask_scale", ",", "threshold_fn", ")", "\n", "resnet_pretrained", "=", "models", ".", "resnet50", "(", "pretrained", "=", "True", ")", "\n", "# Copy weights from the pretrained to the modified model.", "\n", "for", "module", ",", "module_pretrained", "in", "zip", "(", "resnet", ".", "modules", "(", ")", ",", "resnet_pretrained", ".", "modules", "(", ")", ")", ":", "\n", "                ", "if", "'ElementWise'", "in", "str", "(", "type", "(", "module", ")", ")", ":", "\n", "                    ", "module", ".", "weight", ".", "data", ".", "copy_", "(", "module_pretrained", ".", "weight", ".", "data", ")", "\n", "if", "module", ".", "bias", ":", "\n", "                        ", "module", ".", "bias", ".", "data", ".", "copy_", "(", "module_pretrained", ".", "bias", ".", "data", ")", "\n", "", "", "elif", "'BatchNorm'", "in", "str", "(", "type", "(", "module", ")", ")", ":", "\n", "                    ", "module", ".", "weight", ".", "data", ".", "copy_", "(", "module_pretrained", ".", "weight", ".", "data", ")", "\n", "module", ".", "bias", ".", "data", ".", "copy_", "(", "module_pretrained", ".", "bias", ".", "data", ")", "\n", "module", ".", "running_mean", ".", "copy_", "(", "module_pretrained", ".", "running_mean", ")", "\n", "module", ".", "running_var", ".", "copy_", "(", "module_pretrained", ".", "running_var", ")", "\n", "", "", "print", "(", "'Creating model: Mask layers created.'", ")", "\n", "\n", "", "self", ".", "datasets", ",", "self", ".", "classifiers", "=", "[", "]", ",", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "# Create the shared feature generator.", "\n", "self", ".", "shared", "=", "nn", ".", "Sequential", "(", ")", "\n", "for", "name", ",", "module", "in", "resnet", ".", "named_children", "(", ")", ":", "\n", "            ", "if", "name", "!=", "'fc'", ":", "\n", "                ", "self", ".", "shared", ".", "add_module", "(", "name", ",", "module", ")", "\n", "\n", "# Add the default imagenet classifier.", "\n", "", "", "self", ".", "datasets", ".", "append", "(", "'imagenet'", ")", "\n", "self", ".", "classifiers", ".", "append", "(", "resnet", ".", "fc", ")", "\n", "\n", "# model.set_dataset() has to be called explicity, else model won't work.", "\n", "self", ".", "classifier", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.arunmallya_piggyback.src.networks.ModifiedResNet.add_dataset": [[215, 220], ["networks.ModifiedResNet.datasets.append", "networks.ModifiedResNet.classifiers.append", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["None"], ["", "def", "add_dataset", "(", "self", ",", "dataset", ",", "num_outputs", ")", ":", "\n", "        ", "\"\"\"Adds a new dataset to the classifier.\"\"\"", "\n", "if", "dataset", "not", "in", "self", ".", "datasets", ":", "\n", "            ", "self", ".", "datasets", ".", "append", "(", "dataset", ")", "\n", "self", ".", "classifiers", ".", "append", "(", "nn", ".", "Linear", "(", "2048", ",", "num_outputs", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arunmallya_piggyback.src.networks.ModifiedDenseNet.__init__": [[225, 230], ["networks.ModifiedVGG16.__init__", "networks.ModifiedDenseNet.make_model"], "methods", ["home.repos.pwc.inspect_result.arunmallya_piggyback.modnets.densenet.DenseNet.__init__", "home.repos.pwc.inspect_result.arunmallya_piggyback.src.networks.ResNetDiffInit.make_model"], ["def", "__init__", "(", "self", ",", "mask_init", "=", "'1s'", ",", "mask_scale", "=", "1e-2", ",", "threshold_fn", "=", "'binarizer'", ",", "\n", "make_model", "=", "True", ",", "original", "=", "False", ")", ":", "\n", "        ", "super", "(", "ModifiedDenseNet", ",", "self", ")", ".", "__init__", "(", "make_model", "=", "False", ")", "\n", "if", "make_model", ":", "\n", "            ", "self", ".", "make_model", "(", "mask_init", ",", "mask_scale", ",", "threshold_fn", ",", "original", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arunmallya_piggyback.src.networks.ModifiedDenseNet.make_model": [[231, 264], ["networks.ModifiedDenseNet.datasets.append", "networks.ModifiedDenseNet.classifiers.append", "torchvision.models.densenet121", "print", "modnets.densenet121", "modnets.densenet121", "modnets.densenet121", "modnets.densenet121", "torchvision.models.densenet121", "zip", "print", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "modnets.densenet121.modules", "modnets.densenet121.modules", "torchvision.models.densenet121.modules", "str", "module.weight.data.copy_", "type", "module.bias.data.copy_", "str", "module.weight.data.copy_", "module.bias.data.copy_", "module.running_mean.copy_", "module.running_var.copy_", "type"], "methods", ["home.repos.pwc.inspect_result.arunmallya_piggyback.modnets.densenet.densenet121", "home.repos.pwc.inspect_result.arunmallya_piggyback.modnets.densenet.densenet121", "home.repos.pwc.inspect_result.arunmallya_piggyback.modnets.densenet.densenet121", "home.repos.pwc.inspect_result.arunmallya_piggyback.modnets.densenet.densenet121", "home.repos.pwc.inspect_result.arunmallya_piggyback.modnets.densenet.densenet121", "home.repos.pwc.inspect_result.arunmallya_piggyback.modnets.densenet.densenet121"], ["", "", "def", "make_model", "(", "self", ",", "mask_init", ",", "mask_scale", ",", "threshold_fn", ",", "original", ")", ":", "\n", "        ", "\"\"\"Creates the model.\"\"\"", "\n", "if", "original", ":", "\n", "            ", "densenet", "=", "models", ".", "densenet121", "(", "pretrained", "=", "True", ")", "\n", "print", "(", "'Creating model: No mask layers.'", ")", "\n", "", "else", ":", "\n", "# Get the one with masks and pretrained model.", "\n", "            ", "densenet", "=", "modnets", ".", "densenet121", "(", "mask_init", ",", "mask_scale", ",", "threshold_fn", ")", "\n", "densenet_pretrained", "=", "models", ".", "densenet121", "(", "pretrained", "=", "True", ")", "\n", "# Copy weights from the pretrained to the modified model.", "\n", "for", "module", ",", "module_pretrained", "in", "zip", "(", "densenet", ".", "modules", "(", ")", ",", "densenet_pretrained", ".", "modules", "(", ")", ")", ":", "\n", "                ", "if", "'ElementWise'", "in", "str", "(", "type", "(", "module", ")", ")", ":", "\n", "                    ", "module", ".", "weight", ".", "data", ".", "copy_", "(", "module_pretrained", ".", "weight", ".", "data", ")", "\n", "if", "module", ".", "bias", ":", "\n", "                        ", "module", ".", "bias", ".", "data", ".", "copy_", "(", "module_pretrained", ".", "bias", ".", "data", ")", "\n", "", "", "elif", "'BatchNorm'", "in", "str", "(", "type", "(", "module", ")", ")", ":", "\n", "                    ", "module", ".", "weight", ".", "data", ".", "copy_", "(", "module_pretrained", ".", "weight", ".", "data", ")", "\n", "module", ".", "bias", ".", "data", ".", "copy_", "(", "module_pretrained", ".", "bias", ".", "data", ")", "\n", "module", ".", "running_mean", ".", "copy_", "(", "module_pretrained", ".", "running_mean", ")", "\n", "module", ".", "running_var", ".", "copy_", "(", "module_pretrained", ".", "running_var", ")", "\n", "", "", "print", "(", "'Creating model: Mask layers created.'", ")", "\n", "\n", "", "self", ".", "datasets", ",", "self", ".", "classifiers", "=", "[", "]", ",", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "# Create the shared feature generator.", "\n", "self", ".", "shared", "=", "densenet", ".", "features", "\n", "\n", "# Add the default imagenet classifier.", "\n", "self", ".", "datasets", ".", "append", "(", "'imagenet'", ")", "\n", "self", ".", "classifiers", ".", "append", "(", "densenet", ".", "classifier", ")", "\n", "\n", "# model.set_dataset() has to be called explicity, else model won't work.", "\n", "self", ".", "classifier", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.arunmallya_piggyback.src.networks.ModifiedDenseNet.forward": [[265, 271], ["networks.ModifiedDenseNet.shared", "torch.relu", "torch.relu", "torch.relu", "torch.avg_pool2d().view", "torch.avg_pool2d().view", "torch.avg_pool2d().view", "networks.ModifiedDenseNet.classifier", "networks.ModifiedDenseNet.size", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "features", "=", "self", ".", "shared", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "features", ",", "inplace", "=", "True", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "kernel_size", "=", "7", ")", ".", "view", "(", "features", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "classifier", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.arunmallya_piggyback.src.networks.ModifiedDenseNet.add_dataset": [[272, 277], ["networks.ModifiedDenseNet.datasets.append", "networks.ModifiedDenseNet.classifiers.append", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["None"], ["", "def", "add_dataset", "(", "self", ",", "dataset", ",", "num_outputs", ")", ":", "\n", "        ", "\"\"\"Adds a new dataset to the classifier.\"\"\"", "\n", "if", "dataset", "not", "in", "self", ".", "datasets", ":", "\n", "            ", "self", ".", "datasets", ".", "append", "(", "dataset", ")", "\n", "self", ".", "classifiers", ".", "append", "(", "nn", ".", "Linear", "(", "1024", ",", "num_outputs", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arunmallya_piggyback.src.networks.ResNetDiffInit.__init__": [[282, 288], ["networks.ModifiedResNet.__init__", "networks.ResNetDiffInit.make_model"], "methods", ["home.repos.pwc.inspect_result.arunmallya_piggyback.modnets.densenet.DenseNet.__init__", "home.repos.pwc.inspect_result.arunmallya_piggyback.src.networks.ResNetDiffInit.make_model"], ["def", "__init__", "(", "self", ",", "source", ",", "mask_init", "=", "'1s'", ",", "mask_scale", "=", "1e-2", ",", "threshold_fn", "=", "'binarizer'", ",", "\n", "make_model", "=", "True", ",", "original", "=", "False", ")", ":", "\n", "        ", "super", "(", "ResNetDiffInit", ",", "self", ")", ".", "__init__", "(", "make_model", "=", "False", ")", "\n", "if", "make_model", ":", "\n", "            ", "self", ".", "make_model", "(", "source", ",", "mask_init", ",", "mask_scale", ",", "\n", "threshold_fn", ",", "original", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arunmallya_piggyback.src.networks.ResNetDiffInit.make_model": [[289, 331], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "modnets.resnet50.named_children", "modnets.resnet50.named_children", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "print", "modnets.resnet50", "modnets.resnet50", "modnets.resnet50", "modnets.resnet50", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "zip", "print", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "networks.ResNetDiffInit.datasets.append", "networks.ResNetDiffInit.classifiers.append", "networks.ResNetDiffInit.classifiers.append", "modnets.resnet50.modules", "modnets.resnet50.modules", "torch.load.modules", "torch.load.modules", "torch.load.modules", "networks.ResNetDiffInit.shared.add_module", "networks.ResNetDiffInit.datasets.append", "str", "module.weight.data.copy_", "type", "module.bias.data.copy_", "str", "module.weight.data.copy_", "module.bias.data.copy_", "module.running_mean.copy_", "module.running_var.copy_", "type"], "methods", ["home.repos.pwc.inspect_result.arunmallya_piggyback.modnets.resnet.resnet50", "home.repos.pwc.inspect_result.arunmallya_piggyback.modnets.resnet.resnet50", "home.repos.pwc.inspect_result.arunmallya_piggyback.modnets.resnet.resnet50", "home.repos.pwc.inspect_result.arunmallya_piggyback.modnets.resnet.resnet50"], ["", "", "def", "make_model", "(", "self", ",", "source", ",", "mask_init", ",", "mask_scale", ",", "threshold_fn", ",", "original", ")", ":", "\n", "        ", "\"\"\"Creates the model.\"\"\"", "\n", "if", "original", ":", "\n", "            ", "resnet", "=", "torch", ".", "load", "(", "source", ")", "\n", "print", "(", "'Loading model:'", ",", "source", ")", "\n", "", "else", ":", "\n", "# Get the one with masks and pretrained model.", "\n", "            ", "resnet", "=", "modnets", ".", "resnet50", "(", "mask_init", ",", "mask_scale", ",", "threshold_fn", ")", "\n", "resnet_pretrained", "=", "torch", ".", "load", "(", "source", ")", "\n", "# Copy weights from the pretrained to the modified model.", "\n", "for", "module", ",", "module_pretrained", "in", "zip", "(", "resnet", ".", "modules", "(", ")", ",", "resnet_pretrained", ".", "modules", "(", ")", ")", ":", "\n", "                ", "if", "'ElementWise'", "in", "str", "(", "type", "(", "module", ")", ")", ":", "\n", "                    ", "module", ".", "weight", ".", "data", ".", "copy_", "(", "module_pretrained", ".", "weight", ".", "data", ")", "\n", "if", "module", ".", "bias", ":", "\n", "                        ", "module", ".", "bias", ".", "data", ".", "copy_", "(", "module_pretrained", ".", "bias", ".", "data", ")", "\n", "", "", "elif", "'BatchNorm'", "in", "str", "(", "type", "(", "module", ")", ")", ":", "\n", "                    ", "module", ".", "weight", ".", "data", ".", "copy_", "(", "module_pretrained", ".", "weight", ".", "data", ")", "\n", "module", ".", "bias", ".", "data", ".", "copy_", "(", "module_pretrained", ".", "bias", ".", "data", ")", "\n", "module", ".", "running_mean", ".", "copy_", "(", "module_pretrained", ".", "running_mean", ")", "\n", "module", ".", "running_var", ".", "copy_", "(", "module_pretrained", ".", "running_var", ")", "\n", "", "", "print", "(", "'Creating model: Mask layers created.'", ")", "\n", "\n", "", "self", ".", "datasets", ",", "self", ".", "classifiers", "=", "[", "]", ",", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "# Create the shared feature generator.", "\n", "self", ".", "shared", "=", "nn", ".", "Sequential", "(", ")", "\n", "for", "name", ",", "module", "in", "resnet", ".", "named_children", "(", ")", ":", "\n", "            ", "if", "name", "!=", "'fc'", ":", "\n", "                ", "self", ".", "shared", ".", "add_module", "(", "name", ",", "module", ")", "\n", "\n", "# Add the default classifier.", "\n", "", "", "if", "'places'", "in", "source", ":", "\n", "            ", "self", ".", "datasets", ".", "append", "(", "'places'", ")", "\n", "", "elif", "'imagenet'", "in", "source", ":", "\n", "            ", "self", ".", "datasets", ".", "append", "(", "'imagenet'", ")", "\n", "", "if", "original", ":", "\n", "            ", "self", ".", "classifiers", ".", "append", "(", "resnet", ".", "fc", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "classifiers", ".", "append", "(", "resnet_pretrained", ".", "fc", ")", "\n", "\n", "# model.set_dataset() has to be called explicity, else model won't work.", "\n", "", "self", ".", "classifier", "=", "None", "\n", "", "", ""]], "home.repos.pwc.inspect_result.arunmallya_piggyback.src.main.Manager.__init__": [[97, 114], ["train_loader", "test_loader", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss"], "methods", ["home.repos.pwc.inspect_result.arunmallya_piggyback.src.dataset.train_loader", "home.repos.pwc.inspect_result.arunmallya_piggyback.src.dataset.test_loader"], ["def", "__init__", "(", "self", ",", "args", ",", "model", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "cuda", "=", "args", ".", "cuda", "\n", "self", ".", "model", "=", "model", "\n", "\n", "# Set up data loader, criterion, and pruner.", "\n", "if", "'cropped'", "in", "args", ".", "train_path", ":", "\n", "            ", "train_loader", "=", "dataset", ".", "train_loader_cropped", "\n", "test_loader", "=", "dataset", ".", "test_loader_cropped", "\n", "", "else", ":", "\n", "            ", "train_loader", "=", "dataset", ".", "train_loader", "\n", "test_loader", "=", "dataset", ".", "test_loader", "\n", "", "self", ".", "train_data_loader", "=", "train_loader", "(", "\n", "args", ".", "train_path", ",", "args", ".", "batch_size", ",", "pin_memory", "=", "args", ".", "cuda", ")", "\n", "self", ".", "test_data_loader", "=", "test_loader", "(", "\n", "args", ".", "test_path", ",", "args", ".", "batch_size", ",", "pin_memory", "=", "args", ".", "cuda", ")", "\n", "self", ".", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arunmallya_piggyback.src.main.Manager.eval": [[115, 148], ["main.Manager.model.eval", "print", "tqdm.tqdm.tqdm", "torchnet.meter.ClassErrorMeter.value", "print", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "main.Manager.model", "torchnet.meter.ClassErrorMeter.add", "print", "batch.cuda.cuda.cuda", "torchnet.meter.ClassErrorMeter", "main.Manager.model.train", "main.Manager.model.train_nobn", "main.Manager.size", "topk.append", "zip"], "methods", ["home.repos.pwc.inspect_result.arunmallya_piggyback.src.main.Manager.eval", "home.repos.pwc.inspect_result.arunmallya_piggyback.src.main.Optimizers.add", "home.repos.pwc.inspect_result.arunmallya_piggyback.src.main.Manager.train", "home.repos.pwc.inspect_result.arunmallya_piggyback.src.networks.ModifiedVGG16.train_nobn"], ["", "def", "eval", "(", "self", ")", ":", "\n", "        ", "\"\"\"Performs evaluation.\"\"\"", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "error_meter", "=", "None", "\n", "\n", "print", "(", "'Performing eval...'", ")", "\n", "for", "batch", ",", "label", "in", "tqdm", "(", "self", ".", "test_data_loader", ",", "desc", "=", "'Eval'", ")", ":", "\n", "            ", "if", "self", ".", "cuda", ":", "\n", "                ", "batch", "=", "batch", ".", "cuda", "(", ")", "\n", "", "batch", "=", "Variable", "(", "batch", ",", "volatile", "=", "True", ")", "\n", "\n", "output", "=", "self", ".", "model", "(", "batch", ")", "\n", "\n", "# Init error meter.", "\n", "if", "error_meter", "is", "None", ":", "\n", "                ", "topk", "=", "[", "1", "]", "\n", "if", "output", ".", "size", "(", "1", ")", ">", "5", ":", "\n", "                    ", "topk", ".", "append", "(", "5", ")", "\n", "", "error_meter", "=", "tnt", ".", "meter", ".", "ClassErrorMeter", "(", "topk", "=", "topk", ")", "\n", "", "error_meter", ".", "add", "(", "output", ".", "data", ",", "label", ")", "\n", "\n", "", "errors", "=", "error_meter", ".", "value", "(", ")", "\n", "print", "(", "'Error: '", "+", "', '", ".", "join", "(", "'@%s=%.2f'", "%", "\n", "t", "for", "t", "in", "zip", "(", "topk", ",", "errors", ")", ")", ")", "\n", "\n", "if", "'train_bn'", "in", "self", ".", "args", ":", "\n", "            ", "if", "self", ".", "args", ".", "train_bn", ":", "\n", "                ", "self", ".", "model", ".", "train", "(", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "model", ".", "train_nobn", "(", ")", "\n", "", "", "else", ":", "\n", "            ", "print", "(", "'args does not have train_bn flag, probably in eval-only mode.'", ")", "\n", "", "return", "errors", "\n", "\n"]], "home.repos.pwc.inspect_result.arunmallya_piggyback.src.main.Manager.do_batch": [[149, 185], ["torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "main.Manager.model.zero_grad", "main.Manager.model", "main.Manager.criterion().backward", "optimizer.step", "batch.cuda.cuda.cuda", "label.cuda.cuda.cuda", "main.Manager.model.shared.modules", "main.Manager.model.shared.modules", "main.Manager.criterion", "str", "module.weight.data.abs", "str", "type", "module.mask_real.grad.data.div_", "type", "module.weight.grad.data.fill_", "module.bias.grad.data.fill_", "module.weight.data.abs.mean", "module.mask_real.grad.data.div_"], "methods", ["home.repos.pwc.inspect_result.arunmallya_piggyback.modnets.layers.Ternarizer.backward", "home.repos.pwc.inspect_result.arunmallya_piggyback.src.main.Optimizers.step"], ["", "def", "do_batch", "(", "self", ",", "optimizer", ",", "batch", ",", "label", ")", ":", "\n", "        ", "\"\"\"Runs model for one batch.\"\"\"", "\n", "if", "self", ".", "cuda", ":", "\n", "            ", "batch", "=", "batch", ".", "cuda", "(", ")", "\n", "label", "=", "label", ".", "cuda", "(", ")", "\n", "", "batch", "=", "Variable", "(", "batch", ")", "\n", "label", "=", "Variable", "(", "label", ")", "\n", "\n", "# Set grads to 0.", "\n", "self", ".", "model", ".", "zero_grad", "(", ")", "\n", "\n", "# Do forward-backward.", "\n", "output", "=", "self", ".", "model", "(", "batch", ")", "\n", "self", ".", "criterion", "(", "output", ",", "label", ")", ".", "backward", "(", ")", "\n", "\n", "# Scale gradients by average weight magnitude.", "\n", "if", "self", ".", "args", ".", "mask_scale_gradients", "!=", "'none'", ":", "\n", "            ", "for", "module", "in", "self", ".", "model", ".", "shared", ".", "modules", "(", ")", ":", "\n", "                ", "if", "'ElementWise'", "in", "str", "(", "type", "(", "module", ")", ")", ":", "\n", "                    ", "abs_weights", "=", "module", ".", "weight", ".", "data", ".", "abs", "(", ")", "\n", "if", "self", ".", "args", ".", "mask_scale_gradients", "==", "'average'", ":", "\n", "                        ", "module", ".", "mask_real", ".", "grad", ".", "data", ".", "div_", "(", "abs_weights", ".", "mean", "(", ")", ")", "\n", "", "elif", "self", ".", "args", ".", "mask_scale_gradients", "==", "'individual'", ":", "\n", "                        ", "module", ".", "mask_real", ".", "grad", ".", "data", ".", "div_", "(", "abs_weights", ")", "\n", "\n", "# Set batchnorm grads to 0, if required.", "\n", "", "", "", "", "if", "not", "self", ".", "args", ".", "train_bn", ":", "\n", "            ", "for", "module", "in", "self", ".", "model", ".", "shared", ".", "modules", "(", ")", ":", "\n", "                ", "if", "'BatchNorm'", "in", "str", "(", "type", "(", "module", ")", ")", ":", "\n", "                    ", "if", "module", ".", "weight", ".", "grad", "is", "not", "None", ":", "\n", "                        ", "module", ".", "weight", ".", "grad", ".", "data", ".", "fill_", "(", "0", ")", "\n", "", "if", "module", ".", "bias", ".", "grad", "is", "not", "None", ":", "\n", "                        ", "module", ".", "bias", ".", "grad", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n", "# Update params.", "\n", "", "", "", "", "optimizer", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arunmallya_piggyback.src.main.Manager.do_epoch": [[186, 207], ["tqdm.tqdm.tqdm", "print", "main.Manager.do_batch", "print", "enumerate", "main.Manager.model.shared.modules", "print", "enumerate", "str", "module.mask_real.data.lt().sum", "module.mask_real.data.numel", "print", "main.Manager.model.shared.modules", "type", "str", "module.mask_real.data.lt().sum", "module.mask_real.data.numel", "print", "module.mask_real.data.lt", "type", "module.mask_real.data.lt().sum", "module.mask_real.data.lt", "module.mask_real.data.lt"], "methods", ["home.repos.pwc.inspect_result.arunmallya_piggyback.src.main.Manager.do_batch"], ["", "def", "do_epoch", "(", "self", ",", "epoch_idx", ",", "optimizer", ")", ":", "\n", "        ", "\"\"\"Trains model for one epoch.\"\"\"", "\n", "for", "batch", ",", "label", "in", "tqdm", "(", "self", ".", "train_data_loader", ",", "desc", "=", "'Epoch: %d '", "%", "(", "epoch_idx", ")", ")", ":", "\n", "            ", "self", ".", "do_batch", "(", "optimizer", ",", "batch", ",", "label", ")", "\n", "\n", "", "if", "self", ".", "args", ".", "threshold_fn", "==", "'binarizer'", ":", "\n", "            ", "print", "(", "'Num 0ed out parameters:'", ")", "\n", "for", "idx", ",", "module", "in", "enumerate", "(", "self", ".", "model", ".", "shared", ".", "modules", "(", ")", ")", ":", "\n", "                ", "if", "'ElementWise'", "in", "str", "(", "type", "(", "module", ")", ")", ":", "\n", "                    ", "num_zero", "=", "module", ".", "mask_real", ".", "data", ".", "lt", "(", "5e-3", ")", ".", "sum", "(", ")", "\n", "total", "=", "module", ".", "mask_real", ".", "data", ".", "numel", "(", ")", "\n", "print", "(", "idx", ",", "num_zero", ",", "total", ")", "\n", "", "", "", "elif", "self", ".", "args", ".", "threshold_fn", "==", "'ternarizer'", ":", "\n", "            ", "print", "(", "'Num -1, 0ed out parameters:'", ")", "\n", "for", "idx", ",", "module", "in", "enumerate", "(", "self", ".", "model", ".", "shared", ".", "modules", "(", ")", ")", ":", "\n", "                ", "if", "'ElementWise'", "in", "str", "(", "type", "(", "module", ")", ")", ":", "\n", "                    ", "num_neg", "=", "module", ".", "mask_real", ".", "data", ".", "lt", "(", "0", ")", ".", "sum", "(", ")", "\n", "num_zero", "=", "module", ".", "mask_real", ".", "data", ".", "lt", "(", "5e-3", ")", ".", "sum", "(", ")", "-", "num_neg", "\n", "total", "=", "module", ".", "mask_real", ".", "data", ".", "numel", "(", ")", "\n", "print", "(", "idx", ",", "num_neg", ",", "num_zero", ",", "total", ")", "\n", "", "", "", "print", "(", "'-'", "*", "20", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arunmallya_piggyback.src.main.Manager.save_model": [[208, 221], ["torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save"], "methods", ["None"], ["", "def", "save_model", "(", "self", ",", "epoch", ",", "best_accuracy", ",", "errors", ",", "savename", ")", ":", "\n", "        ", "\"\"\"Saves model to file.\"\"\"", "\n", "# Prepare the ckpt.", "\n", "ckpt", "=", "{", "\n", "'args'", ":", "self", ".", "args", ",", "\n", "'epoch'", ":", "epoch", ",", "\n", "'accuracy'", ":", "best_accuracy", ",", "\n", "'errors'", ":", "errors", ",", "\n", "'model'", ":", "self", ".", "model", ",", "\n", "}", "\n", "\n", "# Save to file.", "\n", "torch", ".", "save", "(", "ckpt", ",", "savename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arunmallya_piggyback.src.main.Manager.train": [[222, 267], ["main.Manager.eval", "range", "print", "print", "print", "main.Manager.model.cuda", "print", "optimizer.update_lr", "main.Manager.do_epoch", "main.Manager.eval", "error_history.append", "main.Manager.check", "main.Manager.model.train", "main.Manager.model.train_nobn", "open", "json.dump", "print", "main.Manager.save_model", "vars"], "methods", ["home.repos.pwc.inspect_result.arunmallya_piggyback.src.main.Manager.eval", "home.repos.pwc.inspect_result.arunmallya_piggyback.src.main.Optimizers.update_lr", "home.repos.pwc.inspect_result.arunmallya_piggyback.src.main.Manager.do_epoch", "home.repos.pwc.inspect_result.arunmallya_piggyback.src.main.Manager.eval", "home.repos.pwc.inspect_result.arunmallya_piggyback.src.main.Manager.check", "home.repos.pwc.inspect_result.arunmallya_piggyback.src.main.Manager.train", "home.repos.pwc.inspect_result.arunmallya_piggyback.src.networks.ModifiedVGG16.train_nobn", "home.repos.pwc.inspect_result.arunmallya_piggyback.src.main.Manager.save_model"], ["", "def", "train", "(", "self", ",", "epochs", ",", "optimizer", ",", "save", "=", "True", ",", "savename", "=", "''", ",", "best_accuracy", "=", "0", ")", ":", "\n", "        ", "\"\"\"Performs training.\"\"\"", "\n", "best_accuracy", "=", "best_accuracy", "\n", "error_history", "=", "[", "]", "\n", "\n", "if", "self", ".", "args", ".", "cuda", ":", "\n", "            ", "self", ".", "model", "=", "self", ".", "model", ".", "cuda", "(", ")", "\n", "\n", "", "self", ".", "eval", "(", ")", "\n", "\n", "for", "idx", "in", "range", "(", "epochs", ")", ":", "\n", "            ", "epoch_idx", "=", "idx", "+", "1", "\n", "print", "(", "'Epoch: %d'", "%", "(", "epoch_idx", ")", ")", "\n", "\n", "optimizer", ".", "update_lr", "(", "epoch_idx", ")", "\n", "if", "self", ".", "args", ".", "train_bn", ":", "\n", "                ", "self", ".", "model", ".", "train", "(", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "model", ".", "train_nobn", "(", ")", "\n", "", "self", ".", "do_epoch", "(", "epoch_idx", ",", "optimizer", ")", "\n", "errors", "=", "self", ".", "eval", "(", ")", "\n", "error_history", ".", "append", "(", "errors", ")", "\n", "accuracy", "=", "100", "-", "errors", "[", "0", "]", "# Top-1 accuracy.", "\n", "\n", "# Save performance history and stats.", "\n", "with", "open", "(", "savename", "+", "'.json'", ",", "'w'", ")", "as", "fout", ":", "\n", "                ", "json", ".", "dump", "(", "{", "\n", "'error_history'", ":", "error_history", ",", "\n", "'args'", ":", "vars", "(", "self", ".", "args", ")", ",", "\n", "}", ",", "fout", ")", "\n", "\n", "# Save best model, if required.", "\n", "", "if", "save", "and", "accuracy", ">", "best_accuracy", ":", "\n", "                ", "print", "(", "'Best model so far, Accuracy: %0.2f%% -> %0.2f%%'", "%", "\n", "(", "best_accuracy", ",", "accuracy", ")", ")", "\n", "best_accuracy", "=", "accuracy", "\n", "self", ".", "save_model", "(", "epoch_idx", ",", "best_accuracy", ",", "errors", ",", "savename", ")", "\n", "\n", "# Make sure masking didn't change any weights.", "\n", "", "", "if", "not", "self", ".", "args", ".", "no_mask", ":", "\n", "            ", "self", ".", "check", "(", ")", "\n", "", "print", "(", "'Finished finetuning...'", ")", "\n", "print", "(", "'Best error/accuracy: %0.2f%%, %0.2f%%'", "%", "\n", "(", "100", "-", "best_accuracy", ",", "best_accuracy", ")", ")", "\n", "print", "(", "'-'", "*", "16", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arunmallya_piggyback.src.main.Manager.check": [[268, 306], ["print", "zip", "print", "networks.ModifiedVGG16", "main.Manager.model.shared.modules", "networks.ResNetDiffInit.shared.modules", "networks.ModifiedVGG16BN", "module.weight.data.cpu", "module_pretrained.weight.data.cpu", "networks.ModifiedResNet", "str", "str", "module.bias.data.cpu", "module_pretrained.bias.data.cpu", "str", "module.running_mean.cpu", "module_pretrained.running_mean.cpu", "module.running_var.cpu", "module_pretrained.running_var.cpu", "networks.ModifiedDenseNet", "type", "type", "type", "networks.ResNetDiffInit", "ValueError"], "methods", ["None"], ["", "def", "check", "(", "self", ")", ":", "\n", "        ", "\"\"\"Makes sure that the trained model weights match those of the pretrained model.\"\"\"", "\n", "print", "(", "'Making sure filter weights have not changed.'", ")", "\n", "if", "self", ".", "args", ".", "arch", "==", "'vgg16'", ":", "\n", "            ", "pretrained", "=", "net", ".", "ModifiedVGG16", "(", "original", "=", "True", ")", "\n", "", "elif", "self", ".", "args", ".", "arch", "==", "'vgg16bn'", ":", "\n", "            ", "pretrained", "=", "net", ".", "ModifiedVGG16BN", "(", "original", "=", "True", ")", "\n", "", "elif", "self", ".", "args", ".", "arch", "==", "'resnet50'", ":", "\n", "            ", "pretrained", "=", "net", ".", "ModifiedResNet", "(", "original", "=", "True", ")", "\n", "", "elif", "self", ".", "args", ".", "arch", "==", "'densenet121'", ":", "\n", "            ", "pretrained", "=", "net", ".", "ModifiedDenseNet", "(", "original", "=", "True", ")", "\n", "", "elif", "self", ".", "args", ".", "arch", "==", "'resnet50_diff'", ":", "\n", "            ", "pretrained", "=", "net", ".", "ResNetDiffInit", "(", "self", ".", "args", ".", "source", ",", "original", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Architecture %s not supported.'", "%", "\n", "(", "self", ".", "args", ".", "arch", ")", ")", "\n", "\n", "", "for", "module", ",", "module_pretrained", "in", "zip", "(", "self", ".", "model", ".", "shared", ".", "modules", "(", ")", ",", "pretrained", ".", "shared", ".", "modules", "(", ")", ")", ":", "\n", "            ", "if", "'ElementWise'", "in", "str", "(", "type", "(", "module", ")", ")", "or", "'BatchNorm'", "in", "str", "(", "type", "(", "module", ")", ")", ":", "\n", "                ", "weight", "=", "module", ".", "weight", ".", "data", ".", "cpu", "(", ")", "\n", "weight_pretrained", "=", "module_pretrained", ".", "weight", ".", "data", ".", "cpu", "(", ")", "\n", "# Using small threshold of 1e-8 for any floating point inconsistencies.", "\n", "# Note that threshold per element is even smaller as the 1e-8 threshold", "\n", "# is for sum of absolute differences.", "\n", "assert", "(", "weight", "-", "weight_pretrained", ")", ".", "abs", "(", ")", ".", "sum", "(", ")", "<", "1e-8", ",", "'module %s failed check'", "%", "(", "module", ")", "\n", "if", "module", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "bias", "=", "module", ".", "bias", ".", "data", ".", "cpu", "(", ")", "\n", "bias_pretrained", "=", "module_pretrained", ".", "bias", ".", "data", ".", "cpu", "(", ")", "\n", "assert", "(", "bias", "-", "bias_pretrained", ")", ".", "abs", "(", ")", ".", "sum", "(", ")", "<", "1e-8", "\n", "", "if", "'BatchNorm'", "in", "str", "(", "type", "(", "module", ")", ")", ":", "\n", "                    ", "rm", "=", "module", ".", "running_mean", ".", "cpu", "(", ")", "\n", "rm_pretrained", "=", "module_pretrained", ".", "running_mean", ".", "cpu", "(", ")", "\n", "assert", "(", "rm", "-", "rm_pretrained", ")", ".", "abs", "(", ")", ".", "sum", "(", ")", "<", "1e-8", "\n", "rv", "=", "module", ".", "running_var", ".", "cpu", "(", ")", "\n", "rv_pretrained", "=", "module_pretrained", ".", "running_var", ".", "cpu", "(", ")", "\n", "assert", "(", "rv", "-", "rv_pretrained", ")", ".", "abs", "(", ")", ".", "sum", "(", ")", "<", "1e-8", "\n", "", "", "", "print", "(", "'Passed checks...'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arunmallya_piggyback.src.main.Optimizers.__init__": [[311, 316], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "optimizers", "=", "[", "]", "\n", "self", ".", "lrs", "=", "[", "]", "\n", "self", ".", "decay_every", "=", "[", "]", "\n", "self", ".", "args", "=", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.arunmallya_piggyback.src.main.Optimizers.add": [[317, 322], ["main.Optimizers.optimizers.append", "main.Optimizers.lrs.append", "main.Optimizers.decay_every.append"], "methods", ["None"], ["", "def", "add", "(", "self", ",", "optimizer", ",", "lr", ",", "decay_every", ")", ":", "\n", "        ", "\"\"\"Adds optimizer to list.\"\"\"", "\n", "self", ".", "optimizers", ".", "append", "(", "optimizer", ")", "\n", "self", ".", "lrs", ".", "append", "(", "lr", ")", "\n", "self", ".", "decay_every", ".", "append", "(", "decay_every", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arunmallya_piggyback.src.main.Optimizers.step": [[323, 327], ["optimizer.step"], "methods", ["home.repos.pwc.inspect_result.arunmallya_piggyback.src.main.Optimizers.step"], ["", "def", "step", "(", "self", ")", ":", "\n", "        ", "\"\"\"Makes all optimizers update their params.\"\"\"", "\n", "for", "optimizer", "in", "self", ".", "optimizers", ":", "\n", "            ", "optimizer", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arunmallya_piggyback.src.main.Optimizers.update_lr": [[328, 334], ["zip", "utils.step_lr"], "methods", ["home.repos.pwc.inspect_result.arunmallya_piggyback.src.utils.step_lr"], ["", "", "def", "update_lr", "(", "self", ",", "epoch_idx", ")", ":", "\n", "        ", "\"\"\"Update learning rate of every optimizer.\"\"\"", "\n", "for", "optimizer", ",", "init_lr", ",", "decay_every", "in", "zip", "(", "self", ".", "optimizers", ",", "self", ".", "lrs", ",", "self", ".", "decay_every", ")", ":", "\n", "            ", "optimizer", "=", "utils", ".", "step_lr", "(", "\n", "epoch_idx", ",", "init_lr", ",", "decay_every", ",", "\n", "self", ".", "args", ".", "lr_decay_factor", ",", "optimizer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arunmallya_piggyback.src.main.main": [[336, 444], ["FLAGS.parse_args", "utils.set_dataset_paths", "net.ResNetDiffInit.add_dataset", "net.ResNetDiffInit.set_dataset", "main.Manager", "networks.ModifiedVGG16", "net.ResNetDiffInit.cuda", "print", "enumerate", "networks.ModifiedVGG16BN", "net.ResNetDiffInit.shared.modules", "print", "torch.SGD", "main.Optimizers", "main.Optimizers.add", "main.Manager.train", "print", "torch.Adam", "torch.Adam", "main.Optimizers", "main.Optimizers.add", "main.Optimizers.add", "main.Manager.train", "main.Manager.eval", "networks.ModifiedResNet", "str", "module.weight.data.abs().mean", "module.mask_real.data.fill_", "net.ResNetDiffInit.parameters", "net.ResNetDiffInit.shared.parameters", "net.ResNetDiffInit.classifier.parameters", "main.Manager.check", "networks.ModifiedDenseNet", "type", "net.ResNetDiffInit.shared.parameters", "net.ResNetDiffInit.classifier.parameters", "networks.ResNetDiffInit", "ValueError", "module.weight.data.abs"], "function", ["home.repos.pwc.inspect_result.arunmallya_piggyback.src.utils.set_dataset_paths", "home.repos.pwc.inspect_result.arunmallya_piggyback.src.networks.ModifiedDenseNet.add_dataset", "home.repos.pwc.inspect_result.arunmallya_piggyback.src.networks.ModifiedVGG16.set_dataset", "home.repos.pwc.inspect_result.arunmallya_piggyback.src.main.Optimizers.add", "home.repos.pwc.inspect_result.arunmallya_piggyback.src.main.Manager.train", "home.repos.pwc.inspect_result.arunmallya_piggyback.src.main.Optimizers.add", "home.repos.pwc.inspect_result.arunmallya_piggyback.src.main.Optimizers.add", "home.repos.pwc.inspect_result.arunmallya_piggyback.src.main.Manager.train", "home.repos.pwc.inspect_result.arunmallya_piggyback.src.main.Manager.eval", "home.repos.pwc.inspect_result.arunmallya_piggyback.src.main.Manager.check"], ["", "", "", "def", "main", "(", ")", ":", "\n", "    ", "\"\"\"Do stuff.\"\"\"", "\n", "args", "=", "FLAGS", ".", "parse_args", "(", ")", "\n", "\n", "# Set default train and test path if not provided as input.", "\n", "utils", ".", "set_dataset_paths", "(", "args", ")", "\n", "\n", "# Load the required model.", "\n", "if", "args", ".", "arch", "==", "'vgg16'", ":", "\n", "        ", "model", "=", "net", ".", "ModifiedVGG16", "(", "mask_init", "=", "args", ".", "mask_init", ",", "\n", "mask_scale", "=", "args", ".", "mask_scale", ",", "\n", "threshold_fn", "=", "args", ".", "threshold_fn", ",", "\n", "original", "=", "args", ".", "no_mask", ")", "\n", "", "elif", "args", ".", "arch", "==", "'vgg16bn'", ":", "\n", "        ", "model", "=", "net", ".", "ModifiedVGG16BN", "(", "mask_init", "=", "args", ".", "mask_init", ",", "\n", "mask_scale", "=", "args", ".", "mask_scale", ",", "\n", "threshold_fn", "=", "args", ".", "threshold_fn", ",", "\n", "original", "=", "args", ".", "no_mask", ")", "\n", "", "elif", "args", ".", "arch", "==", "'resnet50'", ":", "\n", "        ", "model", "=", "net", ".", "ModifiedResNet", "(", "mask_init", "=", "args", ".", "mask_init", ",", "\n", "mask_scale", "=", "args", ".", "mask_scale", ",", "\n", "threshold_fn", "=", "args", ".", "threshold_fn", ",", "\n", "original", "=", "args", ".", "no_mask", ")", "\n", "", "elif", "args", ".", "arch", "==", "'densenet121'", ":", "\n", "        ", "model", "=", "net", ".", "ModifiedDenseNet", "(", "mask_init", "=", "args", ".", "mask_init", ",", "\n", "mask_scale", "=", "args", ".", "mask_scale", ",", "\n", "threshold_fn", "=", "args", ".", "threshold_fn", ",", "\n", "original", "=", "args", ".", "no_mask", ")", "\n", "", "elif", "args", ".", "arch", "==", "'resnet50_diff'", ":", "\n", "        ", "assert", "args", ".", "source", "\n", "model", "=", "net", ".", "ResNetDiffInit", "(", "args", ".", "source", ",", "\n", "mask_init", "=", "args", ".", "mask_init", ",", "\n", "mask_scale", "=", "args", ".", "mask_scale", ",", "\n", "threshold_fn", "=", "args", ".", "threshold_fn", ",", "\n", "original", "=", "args", ".", "no_mask", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Architecture %s not supported.'", "%", "(", "args", ".", "arch", ")", ")", "\n", "\n", "# Add and set the model dataset.", "\n", "", "model", ".", "add_dataset", "(", "args", ".", "dataset", ",", "args", ".", "num_outputs", ")", "\n", "model", ".", "set_dataset", "(", "args", ".", "dataset", ")", "\n", "if", "args", ".", "cuda", ":", "\n", "        ", "model", "=", "model", ".", "cuda", "(", ")", "\n", "\n", "# Initialize with weight based method, if necessary.", "\n", "", "if", "not", "args", ".", "no_mask", "and", "args", ".", "mask_init", "==", "'weight_based_1s'", ":", "\n", "        ", "print", "(", "'Are you sure you want to try this?'", ")", "\n", "assert", "args", ".", "mask_scale_gradients", "==", "'none'", "\n", "assert", "not", "args", ".", "mask_scale", "\n", "for", "idx", ",", "module", "in", "enumerate", "(", "model", ".", "shared", ".", "modules", "(", ")", ")", ":", "\n", "            ", "if", "'ElementWise'", "in", "str", "(", "type", "(", "module", ")", ")", ":", "\n", "                ", "weight_scale", "=", "module", ".", "weight", ".", "data", ".", "abs", "(", ")", ".", "mean", "(", ")", "\n", "module", ".", "mask_real", ".", "data", ".", "fill_", "(", "weight_scale", ")", "\n", "\n", "# Create the manager object.", "\n", "", "", "", "manager", "=", "Manager", "(", "args", ",", "model", ")", "\n", "\n", "# Perform necessary mode operations.", "\n", "if", "args", ".", "mode", "==", "'finetune'", ":", "\n", "        ", "if", "args", ".", "no_mask", ":", "\n", "# No masking will be done, used to run baselines of", "\n", "# Classifier-Only and Individual Networks.", "\n", "# Checks.", "\n", "            ", "assert", "args", ".", "lr", "and", "args", ".", "lr_decay_every", "\n", "assert", "not", "args", ".", "lr_mask", "and", "not", "args", ".", "lr_mask_decay_every", "\n", "assert", "not", "args", ".", "lr_classifier", "and", "not", "args", ".", "lr_classifier_decay_every", "\n", "print", "(", "'No masking, running baselines.'", ")", "\n", "\n", "# Get optimizer with correct params.", "\n", "if", "args", ".", "finetune_layers", "==", "'all'", ":", "\n", "                ", "params_to_optimize", "=", "model", ".", "parameters", "(", ")", "\n", "", "elif", "args", ".", "finetune_layers", "==", "'classifier'", ":", "\n", "                ", "for", "param", "in", "model", ".", "shared", ".", "parameters", "(", ")", ":", "\n", "                    ", "param", ".", "requires_grad", "=", "False", "\n", "", "params_to_optimize", "=", "model", ".", "classifier", ".", "parameters", "(", ")", "\n", "\n", "# optimizer = optim.Adam(params_to_optimize, lr=args.lr)", "\n", "", "optimizer", "=", "optim", ".", "SGD", "(", "params_to_optimize", ",", "lr", "=", "args", ".", "lr", ",", "\n", "momentum", "=", "0.9", ",", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "optimizers", "=", "Optimizers", "(", "args", ")", "\n", "optimizers", ".", "add", "(", "optimizer", ",", "args", ".", "lr", ",", "args", ".", "lr_decay_every", ")", "\n", "manager", ".", "train", "(", "args", ".", "finetune_epochs", ",", "optimizers", ",", "\n", "save", "=", "True", ",", "savename", "=", "args", ".", "save_prefix", ")", "\n", "", "else", ":", "\n", "# Masking will be done.", "\n", "# Checks.", "\n", "            ", "assert", "not", "args", ".", "lr", "and", "not", "args", ".", "lr_decay_every", "\n", "assert", "args", ".", "lr_mask", "and", "args", ".", "lr_mask_decay_every", "\n", "assert", "args", ".", "lr_classifier", "and", "args", ".", "lr_classifier_decay_every", "\n", "print", "(", "'Performing masking.'", ")", "\n", "\n", "optimizer_masks", "=", "optim", ".", "Adam", "(", "\n", "model", ".", "shared", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr_mask", ")", "\n", "optimizer_classifier", "=", "optim", ".", "Adam", "(", "\n", "model", ".", "classifier", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr_classifier", ")", "\n", "\n", "optimizers", "=", "Optimizers", "(", "args", ")", "\n", "optimizers", ".", "add", "(", "optimizer_masks", ",", "args", ".", "lr_mask", ",", "\n", "args", ".", "lr_mask_decay_every", ")", "\n", "optimizers", ".", "add", "(", "optimizer_classifier", ",", "args", ".", "lr_classifier", ",", "\n", "args", ".", "lr_classifier_decay_every", ")", "\n", "manager", ".", "train", "(", "args", ".", "finetune_epochs", ",", "optimizers", ",", "\n", "save", "=", "True", ",", "savename", "=", "args", ".", "save_prefix", ")", "\n", "", "", "elif", "args", ".", "mode", "==", "'eval'", ":", "\n", "# Just run the model on the eval set.", "\n", "        ", "manager", ".", "eval", "(", ")", "\n", "", "elif", "args", ".", "mode", "==", "'check'", ":", "\n", "        ", "manager", ".", "check", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arunmallya_piggyback.src.dataset.Scale.__init__": [[119, 124], ["isinstance", "isinstance", "len"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ",", "interpolation", "=", "Image", ".", "BILINEAR", ")", ":", "\n", "        ", "assert", "isinstance", "(", "size", ",", "int", ")", "or", "(", "isinstance", "(", "\n", "size", ",", "collections", ".", "Iterable", ")", "and", "len", "(", "size", ")", "==", "2", ")", "\n", "self", ".", "size", "=", "size", "\n", "self", ".", "interpolation", "=", "interpolation", "\n", "\n"]], "home.repos.pwc.inspect_result.arunmallya_piggyback.src.dataset.Scale.__call__": [[125, 146], ["isinstance", "img.resize", "int", "img.resize", "int", "img.resize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            img (PIL.Image): Image to be scaled.\n        Returns:\n            PIL.Image: Rescaled image.\n        \"\"\"", "\n", "if", "isinstance", "(", "self", ".", "size", ",", "int", ")", ":", "\n", "            ", "w", ",", "h", "=", "img", ".", "size", "\n", "if", "(", "w", "<=", "h", "and", "w", "==", "self", ".", "size", ")", "or", "(", "h", "<=", "w", "and", "h", "==", "self", ".", "size", ")", ":", "\n", "                ", "return", "img", "\n", "", "if", "w", "<", "h", ":", "\n", "                ", "ow", "=", "self", ".", "size", "\n", "oh", "=", "int", "(", "self", ".", "size", "*", "h", "/", "w", ")", "\n", "return", "img", ".", "resize", "(", "(", "ow", ",", "oh", ")", ",", "self", ".", "interpolation", ")", "\n", "", "else", ":", "\n", "                ", "oh", "=", "self", ".", "size", "\n", "ow", "=", "int", "(", "self", ".", "size", "*", "w", "/", "h", ")", "\n", "return", "img", ".", "resize", "(", "(", "ow", ",", "oh", ")", ",", "self", ".", "interpolation", ")", "\n", "", "", "else", ":", "\n", "            ", "return", "img", ".", "resize", "(", "self", ".", "size", ",", "self", ".", "interpolation", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.arunmallya_piggyback.src.dataset.train_loader": [[19, 36], ["torch.DataLoader", "torchvision.Normalize", "torchvision.ImageFolder", "torchvision.Compose", "torchvision.Scale", "torchvision.RandomSizedCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor"], "function", ["None"], ["def", "train_loader", "(", "path", ",", "batch_size", ",", "num_workers", "=", "4", ",", "pin_memory", "=", "False", ",", "normalize", "=", "None", ")", ":", "\n", "    ", "if", "normalize", "is", "None", ":", "\n", "        ", "normalize", "=", "transforms", ".", "Normalize", "(", "\n", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "", "return", "data", ".", "DataLoader", "(", "\n", "datasets", ".", "ImageFolder", "(", "path", ",", "\n", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Scale", "(", "256", ")", ",", "\n", "transforms", ".", "RandomSizedCrop", "(", "224", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", ")", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", "pin_memory", "=", "pin_memory", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arunmallya_piggyback.src.dataset.test_loader": [[38, 54], ["torch.DataLoader", "torchvision.Normalize", "torchvision.ImageFolder", "torchvision.Compose", "torchvision.Scale", "torchvision.CenterCrop", "torchvision.ToTensor"], "function", ["None"], ["", "def", "test_loader", "(", "path", ",", "batch_size", ",", "num_workers", "=", "4", ",", "pin_memory", "=", "False", ",", "normalize", "=", "None", ")", ":", "\n", "    ", "if", "normalize", "is", "None", ":", "\n", "        ", "normalize", "=", "transforms", ".", "Normalize", "(", "\n", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "", "return", "data", ".", "DataLoader", "(", "\n", "datasets", ".", "ImageFolder", "(", "path", ",", "\n", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Scale", "(", "256", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "224", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", ")", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", "pin_memory", "=", "pin_memory", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arunmallya_piggyback.src.dataset.test_loader_caffe": [[56, 70], ["torch.DataLoader", "torchvision.ImageFolder", "torchvision.Compose", "dataset.Scale", "torchvision.ToTensor"], "function", ["None"], ["", "def", "test_loader_caffe", "(", "path", ",", "batch_size", ",", "num_workers", "=", "4", ",", "pin_memory", "=", "False", ")", ":", "\n", "    ", "\"\"\"Legacy loader for caffe. Used with models loaded from caffe.\"\"\"", "\n", "# Returns images in 256 x 256 to subtract given mean of same size.", "\n", "return", "data", ".", "DataLoader", "(", "\n", "datasets", ".", "ImageFolder", "(", "path", ",", "\n", "transforms", ".", "Compose", "(", "[", "\n", "Scale", "(", "(", "256", ",", "256", ")", ")", ",", "\n", "# transforms.CenterCrop(224),", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "]", ")", ")", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", "pin_memory", "=", "pin_memory", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arunmallya_piggyback.src.dataset.train_loader_cropped": [[72, 87], ["torchvision.Normalize", "torch.DataLoader", "torchvision.ImageFolder", "torchvision.Compose", "dataset.Scale", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor"], "function", ["None"], ["", "def", "train_loader_cropped", "(", "path", ",", "batch_size", ",", "num_workers", "=", "4", ",", "pin_memory", "=", "False", ")", ":", "\n", "    ", "normalize", "=", "transforms", ".", "Normalize", "(", "\n", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "return", "data", ".", "DataLoader", "(", "\n", "datasets", ".", "ImageFolder", "(", "path", ",", "\n", "transforms", ".", "Compose", "(", "[", "\n", "Scale", "(", "(", "224", ",", "224", ")", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", ")", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", "pin_memory", "=", "pin_memory", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arunmallya_piggyback.src.dataset.test_loader_cropped": [[89, 103], ["torchvision.Normalize", "torch.DataLoader", "torchvision.ImageFolder", "torchvision.Compose", "dataset.Scale", "torchvision.ToTensor"], "function", ["None"], ["", "def", "test_loader_cropped", "(", "path", ",", "batch_size", ",", "num_workers", "=", "4", ",", "pin_memory", "=", "False", ")", ":", "\n", "    ", "normalize", "=", "transforms", ".", "Normalize", "(", "\n", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "return", "data", ".", "DataLoader", "(", "\n", "datasets", ".", "ImageFolder", "(", "path", ",", "\n", "transforms", ".", "Compose", "(", "[", "\n", "Scale", "(", "(", "224", ",", "224", ")", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", ")", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", "pin_memory", "=", "pin_memory", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arunmallya_piggyback.src.pack.main": [[54, 184], ["FLAGS.parse_args", "open", "open", "enumerate", "open.close", "open.close", "torch.save", "line.split", "loadname.strip.strip", "print", "torch.load", "open.write", "enumerate", "print", "open.write", "open.write", "open.write", "utils.set_dataset_paths", "torch.load", "net.ResNetDiffInit.eval", "print", "enumerate", "print", "net.ResNetDiffInit.add_dataset", "net.ResNetDiffInit.set_dataset", "main.Manager", "main.Manager.eval", "ValueError", "str", "net.ResNetDiffInit.shared.modules", "ValueError", "networks.ModifiedVGG16", "net.ResNetDiffInit.shared.modules", "classifier.weight.size", "net.ResNetDiffInit.cuda", "line.strip", "type", "str", "str", "module.threshold_fn", "mask.data.cpu.data.cpu", "mask.data.cpu.eq().sum", "mask.data.cpu.eq().sum", "mask.data.cpu.eq().sum", "mask.data.cpu.numel", "mask.data.cpu.type", "total_params.append", "zerod_params.append", "neg_params.append", "open.write", "networks.ModifiedVGG16BN", "type", "str", "type", "sum", "sum", "sum", "sum", "networks.ModifiedResNet", "type", "mask.data.cpu.eq", "mask.data.cpu.eq", "mask.data.cpu.eq", "networks.ModifiedDenseNet", "mask.data.cpu.eq", "mask.data.cpu.eq", "sum", "sum", "sum", "sum", "networks.ResNetDiffInit"], "function", ["home.repos.pwc.inspect_result.arunmallya_piggyback.src.utils.set_dataset_paths", "home.repos.pwc.inspect_result.arunmallya_piggyback.src.main.Manager.eval", "home.repos.pwc.inspect_result.arunmallya_piggyback.src.networks.ModifiedDenseNet.add_dataset", "home.repos.pwc.inspect_result.arunmallya_piggyback.src.networks.ModifiedVGG16.set_dataset", "home.repos.pwc.inspect_result.arunmallya_piggyback.src.main.Manager.eval"], ["def", "main", "(", ")", ":", "\n", "    ", "\"\"\"Do stuff.\"\"\"", "\n", "args", "=", "FLAGS", ".", "parse_args", "(", ")", "\n", "\n", "if", "args", ".", "mode", "==", "'pack'", ":", "\n", "        ", "assert", "args", ".", "packlist", "and", "args", ".", "maskloc", "\n", "dataset2masks", "=", "{", "}", "\n", "dataset2classifiers", "=", "{", "}", "\n", "net_type", "=", "None", "\n", "\n", "# Location to output stats.", "\n", "fout", "=", "open", "(", "args", ".", "maskloc", "[", ":", "-", "2", "]", "+", "'txt'", ",", "'w'", ")", "\n", "\n", "# Load models one by one and store their masks.", "\n", "fin", "=", "open", "(", "args", ".", "packlist", ",", "'r'", ")", "\n", "counter", "=", "1", "\n", "for", "idx", ",", "line", "in", "enumerate", "(", "fin", ")", ":", "\n", "            ", "if", "not", "line", "or", "not", "line", ".", "strip", "(", ")", "or", "line", "[", "0", "]", "==", "'#'", ":", "\n", "                ", "continue", "\n", "", "dataset", ",", "loadname", "=", "line", ".", "split", "(", "':'", ")", "\n", "loadname", "=", "loadname", ".", "strip", "(", ")", "\n", "\n", "# Can't have same dataset twice.", "\n", "if", "dataset", "in", "dataset2masks", ":", "\n", "                ", "ValueError", "(", "'Repeated datasets as input...'", ")", "\n", "", "print", "(", "'Loading model #%d for dataset \"%s\"'", "%", "(", "counter", ",", "dataset", ")", ")", "\n", "counter", "+=", "1", "\n", "ckpt", "=", "torch", ".", "load", "(", "loadname", ")", "\n", "model", "=", "ckpt", "[", "'model'", "]", "\n", "# Ensure all inputs are for same model type.", "\n", "if", "net_type", "is", "None", ":", "\n", "                ", "net_type", "=", "str", "(", "type", "(", "model", ")", ")", "\n", "", "else", ":", "\n", "                ", "assert", "net_type", "==", "str", "(", "type", "(", "model", ")", ")", ",", "'%s != %s'", "%", "(", "\n", "net_type", ",", "str", "(", "type", "(", "model", ")", ")", ")", "\n", "\n", "# Gather masks and store in dictionary.", "\n", "", "fout", ".", "write", "(", "'Dataset: %s\\n'", "%", "(", "dataset", ")", ")", "\n", "total_params", ",", "neg_params", ",", "zerod_params", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "masks", "=", "{", "}", "\n", "for", "module_idx", ",", "module", "in", "enumerate", "(", "model", ".", "shared", ".", "modules", "(", ")", ")", ":", "\n", "                ", "if", "'ElementWise'", "in", "str", "(", "type", "(", "module", ")", ")", ":", "\n", "                    ", "mask", "=", "module", ".", "threshold_fn", "(", "module", ".", "mask_real", ")", "\n", "mask", "=", "mask", ".", "data", ".", "cpu", "(", ")", "\n", "\n", "# Make sure mask values are in {0, 1} or {-1, 0, 1}.", "\n", "num_zero", "=", "mask", ".", "eq", "(", "0", ")", ".", "sum", "(", ")", "\n", "num_one", "=", "mask", ".", "eq", "(", "1", ")", ".", "sum", "(", ")", "\n", "num_mone", "=", "mask", ".", "eq", "(", "-", "1", ")", ".", "sum", "(", ")", "\n", "total", "=", "mask", ".", "numel", "(", ")", "\n", "threshold_type", "=", "module", ".", "threshold_fn", ".", "__class__", ".", "__name__", "\n", "if", "threshold_type", "==", "'Binarizer'", ":", "\n", "                        ", "assert", "num_mone", "==", "0", "\n", "assert", "num_zero", "+", "num_one", "==", "total", "\n", "", "elif", "threshold_type", "==", "'Ternarizer'", ":", "\n", "                        ", "assert", "num_mone", "+", "num_zero", "+", "num_one", "==", "total", "\n", "", "masks", "[", "module_idx", "]", "=", "mask", ".", "type", "(", "torch", ".", "ByteTensor", ")", "\n", "\n", "# Count total and zerod out params.", "\n", "total_params", ".", "append", "(", "total", ")", "\n", "zerod_params", ".", "append", "(", "num_zero", ")", "\n", "neg_params", ".", "append", "(", "num_mone", ")", "\n", "fout", ".", "write", "(", "'%d\\t%.2f%%\\t%.2f%%\\n'", "%", "(", "\n", "module_idx", ",", "\n", "neg_params", "[", "-", "1", "]", "/", "total_params", "[", "-", "1", "]", "*", "100", ",", "\n", "zerod_params", "[", "-", "1", "]", "/", "total_params", "[", "-", "1", "]", "*", "100", ")", ")", "\n", "", "", "print", "(", "'Check Passed: Masks only have binary/ternary values.'", ")", "\n", "dataset2masks", "[", "dataset", "]", "=", "masks", "\n", "dataset2classifiers", "[", "dataset", "]", "=", "model", ".", "classifier", "\n", "\n", "fout", ".", "write", "(", "'Total -1: %d/%d = %.2f%%\\n'", "%", "(", "\n", "sum", "(", "neg_params", ")", ",", "sum", "(", "total_params", ")", ",", "sum", "(", "neg_params", ")", "/", "sum", "(", "total_params", ")", "*", "100", ")", ")", "\n", "fout", ".", "write", "(", "'Total 0: %d/%d = %.2f%%\\n'", "%", "(", "\n", "sum", "(", "zerod_params", ")", ",", "sum", "(", "total_params", ")", ",", "sum", "(", "zerod_params", ")", "/", "sum", "(", "total_params", ")", "*", "100", ")", ")", "\n", "fout", ".", "write", "(", "'-'", "*", "20", "+", "'\\n'", ")", "\n", "\n", "# Clean up and save masks to file.", "\n", "", "fin", ".", "close", "(", ")", "\n", "fout", ".", "close", "(", ")", "\n", "torch", ".", "save", "(", "{", "\n", "'dataset2masks'", ":", "dataset2masks", ",", "\n", "'dataset2classifiers'", ":", "dataset2classifiers", ",", "\n", "}", ",", "args", ".", "maskloc", ")", "\n", "\n", "", "elif", "args", ".", "mode", "==", "'eval'", ":", "\n", "        ", "assert", "args", ".", "arch", "and", "args", ".", "maskloc", "and", "args", ".", "dataset", "\n", "\n", "# Set default train and test path if not provided as input.", "\n", "utils", ".", "set_dataset_paths", "(", "args", ")", "\n", "\n", "# Load masks and classifier for this dataset.", "\n", "info", "=", "torch", ".", "load", "(", "args", ".", "maskloc", ")", "\n", "if", "args", ".", "dataset", "not", "in", "info", "[", "'dataset2masks'", "]", ":", "\n", "            ", "ValueError", "(", "'%s not found in masks.'", "%", "(", "args", ".", "dataset", ")", ")", "\n", "", "masks", "=", "info", "[", "'dataset2masks'", "]", "[", "args", ".", "dataset", "]", "\n", "classifier", "=", "info", "[", "'dataset2classifiers'", "]", "[", "args", ".", "dataset", "]", "\n", "\n", "# Create the vanilla model and apply masking.", "\n", "model", "=", "None", "\n", "if", "args", ".", "arch", "==", "'vgg16'", ":", "\n", "            ", "model", "=", "net", ".", "ModifiedVGG16", "(", "original", "=", "True", ")", "\n", "", "elif", "args", ".", "arch", "==", "'vgg16bn'", ":", "\n", "            ", "model", "=", "net", ".", "ModifiedVGG16BN", "(", "original", "=", "True", ")", "\n", "", "elif", "args", ".", "arch", "==", "'resnet50'", ":", "\n", "            ", "model", "=", "net", ".", "ModifiedResNet", "(", "original", "=", "True", ")", "\n", "", "elif", "args", ".", "arch", "==", "'densenet121'", ":", "\n", "            ", "model", "=", "net", ".", "ModifiedDenseNet", "(", "original", "=", "True", ")", "\n", "", "elif", "args", ".", "arch", "==", "'resnet50_diff'", ":", "\n", "            ", "assert", "args", ".", "source", "\n", "model", "=", "net", ".", "ResNetDiffInit", "(", "args", ".", "source", ",", "original", "=", "True", ")", "\n", "", "model", ".", "eval", "(", ")", "\n", "\n", "print", "(", "'Applying masks.'", ")", "\n", "for", "module_idx", ",", "module", "in", "enumerate", "(", "model", ".", "shared", ".", "modules", "(", ")", ")", ":", "\n", "            ", "if", "module_idx", "in", "masks", ":", "\n", "                ", "mask", "=", "masks", "[", "module_idx", "]", "\n", "module", ".", "weight", ".", "data", "[", "mask", ".", "eq", "(", "0", ")", "]", "=", "0", "\n", "module", ".", "weight", ".", "data", "[", "mask", ".", "eq", "(", "-", "1", ")", "]", "*=", "-", "1", "\n", "", "", "print", "(", "'Applied masks.'", ")", "\n", "\n", "# Override model.classifier with saved one.", "\n", "model", ".", "add_dataset", "(", "args", ".", "dataset", ",", "classifier", ".", "weight", ".", "size", "(", "0", ")", ")", "\n", "model", ".", "set_dataset", "(", "args", ".", "dataset", ")", "\n", "model", ".", "classifier", "=", "classifier", "\n", "if", "args", ".", "cuda", ":", "\n", "            ", "model", "=", "model", ".", "cuda", "(", ")", "\n", "\n", "# Create the manager and run eval.", "\n", "", "manager", "=", "Manager", "(", "args", ",", "model", ")", "\n", "manager", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arunmallya_piggyback.src.utils.step_lr": [[6, 14], ["numpy.power", "print", "numpy.floor"], "function", ["None"], ["def", "step_lr", "(", "epoch", ",", "base_lr", ",", "lr_decay_every", ",", "lr_decay_factor", ",", "optimizer", ")", ":", "\n", "    ", "\"\"\"Handles step decay of learning rate.\"\"\"", "\n", "factor", "=", "np", ".", "power", "(", "lr_decay_factor", ",", "np", ".", "floor", "(", "(", "epoch", "-", "1", ")", "/", "lr_decay_every", ")", ")", "\n", "new_lr", "=", "base_lr", "*", "factor", "\n", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "new_lr", "\n", "", "print", "(", "'Set lr to '", ",", "new_lr", ")", "\n", "return", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.arunmallya_piggyback.src.utils.set_dataset_paths": [[16, 25], ["None"], "function", ["None"], ["", "def", "set_dataset_paths", "(", "args", ")", ":", "\n", "    ", "\"\"\"Set default train and test path if not provided as input.\"\"\"", "\n", "if", "not", "args", ".", "train_path", ":", "\n", "        ", "args", ".", "train_path", "=", "'../data/%s/train'", "%", "(", "args", ".", "dataset", ")", "\n", "", "if", "not", "args", ".", "test_path", ":", "\n", "        ", "if", "args", ".", "dataset", "==", "'imagenet'", "or", "args", ".", "dataset", "==", "'places'", ":", "\n", "            ", "args", ".", "test_path", "=", "'../data/%s/val'", "%", "(", "args", ".", "dataset", ")", "\n", "", "else", ":", "\n", "            ", "args", ".", "test_path", "=", "'../data/%s/test'", "%", "(", "args", ".", "dataset", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.arunmallya_piggyback.modnets.vgg.VGG.__init__": [[14, 29], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "modnets.ElementWiseLinear", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "modnets.ElementWiseLinear", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.arunmallya_piggyback.modnets.densenet.DenseNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "features", ",", "mask_init", ",", "mask_scale", ",", "threshold_fn", ",", "num_classes", "=", "1000", ")", ":", "\n", "        ", "super", "(", "VGG", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "features", "=", "features", "\n", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "nl", ".", "ElementWiseLinear", "(", "\n", "512", "*", "7", "*", "7", ",", "4096", ",", "mask_init", "=", "mask_init", ",", "mask_scale", "=", "mask_scale", ",", "\n", "threshold_fn", "=", "threshold_fn", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Dropout", "(", ")", ",", "\n", "nl", ".", "ElementWiseLinear", "(", "\n", "4096", ",", "4096", ",", "mask_init", "=", "mask_init", ",", "mask_scale", "=", "mask_scale", ",", "\n", "threshold_fn", "=", "threshold_fn", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Dropout", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "4096", ",", "num_classes", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.arunmallya_piggyback.modnets.vgg.VGG.forward": [[31, 36], ["vgg.VGG.features", "vgg.VGG.view", "vgg.VGG.classifier", "vgg.VGG.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.arunmallya_piggyback.modnets.vgg.make_layers": [[38, 55], ["torch.Sequential", "modnets.ElementWiseConv2d", "torch.MaxPool2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "function", ["None"], ["", "", "def", "make_layers", "(", "cfg", ",", "mask_init", ",", "mask_scale", ",", "threshold_fn", ",", "batch_norm", "=", "False", ")", ":", "\n", "    ", "layers", "=", "[", "]", "\n", "in_channels", "=", "3", "\n", "for", "v", "in", "cfg", ":", "\n", "        ", "if", "v", "==", "'M'", ":", "\n", "            ", "layers", "+=", "[", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "]", "\n", "", "else", ":", "\n", "            ", "conv2d", "=", "nl", ".", "ElementWiseConv2d", "(", "\n", "in_channels", ",", "v", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "\n", "mask_init", "=", "mask_init", ",", "mask_scale", "=", "mask_scale", ",", "\n", "threshold_fn", "=", "threshold_fn", ")", "\n", "if", "batch_norm", ":", "\n", "                ", "layers", "+=", "[", "conv2d", ",", "nn", ".", "BatchNorm2d", "(", "v", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", "\n", "", "else", ":", "\n", "                ", "layers", "+=", "[", "conv2d", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", "\n", "", "in_channels", "=", "v", "\n", "", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arunmallya_piggyback.modnets.vgg.vgg16": [[65, 70], ["vgg.VGG", "vgg.make_layers"], "function", ["home.repos.pwc.inspect_result.arunmallya_piggyback.modnets.vgg.make_layers"], ["def", "vgg16", "(", "mask_init", "=", "'1s'", ",", "mask_scale", "=", "1e-2", ",", "threshold_fn", "=", "'binarizer'", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"VGG 16-layer model (configuration \"D\").\"\"\"", "\n", "model", "=", "VGG", "(", "make_layers", "(", "cfg", "[", "'D'", "]", ",", "mask_init", ",", "mask_scale", ",", "threshold_fn", ")", ",", "\n", "mask_init", ",", "mask_scale", ",", "threshold_fn", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.arunmallya_piggyback.modnets.vgg.vgg16_bn": [[72, 77], ["vgg.VGG", "vgg.make_layers"], "function", ["home.repos.pwc.inspect_result.arunmallya_piggyback.modnets.vgg.make_layers"], ["", "def", "vgg16_bn", "(", "mask_init", "=", "'1s'", ",", "mask_scale", "=", "1e-2", ",", "threshold_fn", "=", "'binarizer'", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"VGG 16-layer model (configuration \"D\") with batch normalization.\"\"\"", "\n", "model", "=", "VGG", "(", "make_layers", "(", "cfg", "[", "'D'", "]", ",", "mask_init", ",", "mask_scale", ",", "threshold_fn", ",", "batch_norm", "=", "True", ")", ",", "\n", "mask_init", ",", "mask_scale", ",", "threshold_fn", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.arunmallya_piggyback.modnets.layers.Binarizer.__init__": [[15, 18], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.arunmallya_piggyback.modnets.densenet.DenseNet.__init__"], ["def", "__init__", "(", "self", ",", "threshold", "=", "DEFAULT_THRESHOLD", ")", ":", "\n", "        ", "super", "(", "Binarizer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "threshold", "=", "threshold", "\n", "\n"]], "home.repos.pwc.inspect_result.arunmallya_piggyback.modnets.layers.Binarizer.forward": [[19, 24], ["inputs.clone", "inputs.le", "inputs.gt"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "outputs", "=", "inputs", ".", "clone", "(", ")", "\n", "outputs", "[", "inputs", ".", "le", "(", "self", ".", "threshold", ")", "]", "=", "0", "\n", "outputs", "[", "inputs", ".", "gt", "(", "self", ".", "threshold", ")", "]", "=", "1", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.arunmallya_piggyback.modnets.layers.Binarizer.backward": [[25, 27], ["None"], "methods", ["None"], ["", "def", "backward", "(", "self", ",", "gradOutput", ")", ":", "\n", "        ", "return", "gradOutput", "\n", "\n"]], "home.repos.pwc.inspect_result.arunmallya_piggyback.modnets.layers.Ternarizer.__init__": [[32, 35], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.arunmallya_piggyback.modnets.densenet.DenseNet.__init__"], ["def", "__init__", "(", "self", ",", "threshold", "=", "DEFAULT_THRESHOLD", ")", ":", "\n", "        ", "super", "(", "Ternarizer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "threshold", "=", "threshold", "\n", "\n"]], "home.repos.pwc.inspect_result.arunmallya_piggyback.modnets.layers.Ternarizer.forward": [[36, 42], ["inputs.clone", "inputs.clone.fill_"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "outputs", "=", "inputs", ".", "clone", "(", ")", "\n", "outputs", ".", "fill_", "(", "0", ")", "\n", "outputs", "[", "inputs", "<", "0", "]", "=", "-", "1", "\n", "outputs", "[", "inputs", ">", "self", ".", "threshold", "]", "=", "1", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.arunmallya_piggyback.modnets.layers.Ternarizer.backward": [[43, 45], ["None"], "methods", ["None"], ["", "def", "backward", "(", "self", ",", "gradOutput", ")", ":", "\n", "        ", "return", "gradOutput", "\n", "\n"]], "home.repos.pwc.inspect_result.arunmallya_piggyback.modnets.layers.ElementWiseConv2d.__init__": [[50, 108], ["torch.Module.__init__", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "layers.ElementWiseConv2d.weight.data.new", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "ValueError", "ValueError", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "layers.ElementWiseConv2d.register_parameter", "layers.ElementWiseConv2d.weight.size", "layers.ElementWiseConv2d.mask_real.fill_", "print", "layers.Binarizer", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "layers.ElementWiseConv2d.mask_real.uniform_", "print", "layers.Ternarizer"], "methods", ["home.repos.pwc.inspect_result.arunmallya_piggyback.modnets.densenet.DenseNet.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "bias", "=", "True", ",", "\n", "mask_init", "=", "'1s'", ",", "mask_scale", "=", "1e-2", ",", "\n", "threshold_fn", "=", "'binarizer'", ",", "threshold", "=", "None", ")", ":", "\n", "        ", "super", "(", "ElementWiseConv2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "kernel_size", "=", "_pair", "(", "kernel_size", ")", "\n", "stride", "=", "_pair", "(", "stride", ")", "\n", "padding", "=", "_pair", "(", "padding", ")", "\n", "dilation", "=", "_pair", "(", "dilation", ")", "\n", "self", ".", "mask_scale", "=", "mask_scale", "\n", "self", ".", "mask_init", "=", "mask_init", "\n", "\n", "if", "threshold", "is", "None", ":", "\n", "            ", "threshold", "=", "DEFAULT_THRESHOLD", "\n", "", "self", ".", "info", "=", "{", "\n", "'threshold_fn'", ":", "threshold_fn", ",", "\n", "'threshold'", ":", "threshold", ",", "\n", "}", "\n", "\n", "if", "in_channels", "%", "groups", "!=", "0", ":", "\n", "            ", "raise", "ValueError", "(", "'in_channels must be divisible by groups'", ")", "\n", "", "if", "out_channels", "%", "groups", "!=", "0", ":", "\n", "            ", "raise", "ValueError", "(", "'out_channels must be divisible by groups'", ")", "\n", "", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "padding", "=", "padding", "\n", "self", ".", "dilation", "=", "dilation", "\n", "self", ".", "transposed", "=", "False", "\n", "self", ".", "output_padding", "=", "_pair", "(", "0", ")", "\n", "self", ".", "groups", "=", "groups", "\n", "\n", "# weight and bias are no longer Parameters.", "\n", "self", ".", "weight", "=", "Variable", "(", "torch", ".", "Tensor", "(", "\n", "out_channels", ",", "in_channels", "//", "groups", ",", "*", "kernel_size", ")", ",", "requires_grad", "=", "False", ")", "\n", "if", "bias", ":", "\n", "            ", "self", ".", "bias", "=", "Variable", "(", "torch", ".", "Tensor", "(", "\n", "out_channels", ")", ",", "requires_grad", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "'bias'", ",", "None", ")", "\n", "\n", "# Initialize real-valued mask weights.", "\n", "", "self", ".", "mask_real", "=", "self", ".", "weight", ".", "data", ".", "new", "(", "self", ".", "weight", ".", "size", "(", ")", ")", "\n", "if", "mask_init", "==", "'1s'", ":", "\n", "            ", "self", ".", "mask_real", ".", "fill_", "(", "mask_scale", ")", "\n", "", "elif", "mask_init", "==", "'uniform'", ":", "\n", "            ", "self", ".", "mask_real", ".", "uniform_", "(", "-", "1", "*", "mask_scale", ",", "mask_scale", ")", "\n", "# mask_real is now a trainable parameter.", "\n", "", "self", ".", "mask_real", "=", "Parameter", "(", "self", ".", "mask_real", ")", "\n", "\n", "# Initialize the thresholder.", "\n", "if", "threshold_fn", "==", "'binarizer'", ":", "\n", "            ", "print", "(", "'Calling binarizer with threshold:'", ",", "threshold", ")", "\n", "self", ".", "threshold_fn", "=", "Binarizer", "(", "threshold", "=", "threshold", ")", "\n", "", "elif", "threshold_fn", "==", "'ternarizer'", ":", "\n", "            ", "print", "(", "'Calling ternarizer with threshold:'", ",", "threshold", ")", "\n", "self", ".", "threshold_fn", "=", "Ternarizer", "(", "threshold", "=", "threshold", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arunmallya_piggyback.modnets.layers.ElementWiseConv2d.forward": [[109, 117], ["layers.ElementWiseConv2d.threshold_fn", "torch.conv2d", "torch.conv2d", "torch.conv2d"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "# Get binarized/ternarized mask from real-valued mask.", "\n", "        ", "mask_thresholded", "=", "self", ".", "threshold_fn", "(", "self", ".", "mask_real", ")", "\n", "# Mask weights with above mask.", "\n", "weight_thresholded", "=", "mask_thresholded", "*", "self", ".", "weight", "\n", "# Perform conv using modified weight.", "\n", "return", "F", ".", "conv2d", "(", "input", ",", "weight_thresholded", ",", "self", ".", "bias", ",", "self", ".", "stride", ",", "\n", "self", ".", "padding", ",", "self", ".", "dilation", ",", "self", ".", "groups", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arunmallya_piggyback.modnets.layers.ElementWiseConv2d.__repr__": [[118, 133], ["s.format", "len", "len", "len"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "s", "=", "(", "'{name} ({in_channels}, {out_channels}, kernel_size={kernel_size}'", "\n", "', stride={stride}'", ")", "\n", "if", "self", ".", "padding", "!=", "(", "0", ",", ")", "*", "len", "(", "self", ".", "padding", ")", ":", "\n", "            ", "s", "+=", "', padding={padding}'", "\n", "", "if", "self", ".", "dilation", "!=", "(", "1", ",", ")", "*", "len", "(", "self", ".", "dilation", ")", ":", "\n", "            ", "s", "+=", "', dilation={dilation}'", "\n", "", "if", "self", ".", "output_padding", "!=", "(", "0", ",", ")", "*", "len", "(", "self", ".", "output_padding", ")", ":", "\n", "            ", "s", "+=", "', output_padding={output_padding}'", "\n", "", "if", "self", ".", "groups", "!=", "1", ":", "\n", "            ", "s", "+=", "', groups={groups}'", "\n", "", "if", "self", ".", "bias", "is", "None", ":", "\n", "            ", "s", "+=", "', bias=False'", "\n", "", "s", "+=", "')'", "\n", "return", "s", ".", "format", "(", "name", "=", "self", ".", "__class__", ".", "__name__", ",", "**", "self", ".", "__dict__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arunmallya_piggyback.modnets.layers.ElementWiseConv2d._apply": [[134, 153], ["layers.ElementWiseConv2d.children", "layers.ElementWiseConv2d._parameters.values", "layers.ElementWiseConv2d._buffers.items", "fn", "module._apply", "fn", "fn", "fn", "fn"], "methods", ["home.repos.pwc.inspect_result.arunmallya_piggyback.modnets.layers.ElementWiseLinear._apply"], ["", "def", "_apply", "(", "self", ",", "fn", ")", ":", "\n", "        ", "for", "module", "in", "self", ".", "children", "(", ")", ":", "\n", "            ", "module", ".", "_apply", "(", "fn", ")", "\n", "\n", "", "for", "param", "in", "self", ".", "_parameters", ".", "values", "(", ")", ":", "\n", "            ", "if", "param", "is", "not", "None", ":", "\n", "# Variables stored in modules are graph leaves, and we don't", "\n", "# want to create copy nodes, so we have to unpack the data.", "\n", "                ", "param", ".", "data", "=", "fn", "(", "param", ".", "data", ")", "\n", "if", "param", ".", "_grad", "is", "not", "None", ":", "\n", "                    ", "param", ".", "_grad", ".", "data", "=", "fn", "(", "param", ".", "_grad", ".", "data", ")", "\n", "\n", "", "", "", "for", "key", ",", "buf", "in", "self", ".", "_buffers", ".", "items", "(", ")", ":", "\n", "            ", "if", "buf", "is", "not", "None", ":", "\n", "                ", "self", ".", "_buffers", "[", "key", "]", "=", "fn", "(", "buf", ")", "\n", "\n", "", "", "self", ".", "weight", ".", "data", "=", "fn", "(", "self", ".", "weight", ".", "data", ")", "\n", "if", "self", ".", "bias", "is", "not", "None", "and", "self", ".", "bias", ".", "data", "is", "not", "None", ":", "\n", "            ", "self", ".", "bias", ".", "data", "=", "fn", "(", "self", ".", "bias", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arunmallya_piggyback.modnets.layers.ElementWiseLinear.__init__": [[158, 198], ["torch.Module.__init__", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "layers.ElementWiseLinear.weight.data.new", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "layers.ElementWiseLinear.register_parameter", "layers.ElementWiseLinear.weight.size", "layers.ElementWiseLinear.mask_real.fill_", "layers.Binarizer", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "layers.ElementWiseLinear.mask_real.uniform_", "layers.Ternarizer"], "methods", ["home.repos.pwc.inspect_result.arunmallya_piggyback.modnets.densenet.DenseNet.__init__"], ["def", "__init__", "(", "self", ",", "in_features", ",", "out_features", ",", "bias", "=", "True", ",", "\n", "mask_init", "=", "'1s'", ",", "mask_scale", "=", "1e-2", ",", "\n", "threshold_fn", "=", "'binarizer'", ",", "threshold", "=", "None", ")", ":", "\n", "        ", "super", "(", "ElementWiseLinear", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_features", "=", "in_features", "\n", "self", ".", "out_features", "=", "out_features", "\n", "self", ".", "threshold_fn", "=", "threshold_fn", "\n", "self", ".", "mask_scale", "=", "mask_scale", "\n", "self", ".", "mask_init", "=", "mask_init", "\n", "\n", "if", "threshold", "is", "None", ":", "\n", "            ", "threshold", "=", "DEFAULT_THRESHOLD", "\n", "", "self", ".", "info", "=", "{", "\n", "'threshold_fn'", ":", "threshold_fn", ",", "\n", "'threshold'", ":", "threshold", ",", "\n", "}", "\n", "\n", "# weight and bias are no longer Parameters.", "\n", "self", ".", "weight", "=", "Variable", "(", "torch", ".", "Tensor", "(", "\n", "out_features", ",", "in_features", ")", ",", "requires_grad", "=", "False", ")", "\n", "if", "bias", ":", "\n", "            ", "self", ".", "bias", "=", "Variable", "(", "torch", ".", "Tensor", "(", "\n", "out_features", ")", ",", "requires_grad", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "'bias'", ",", "None", ")", "\n", "\n", "# Initialize real-valued mask weights.", "\n", "", "self", ".", "mask_real", "=", "self", ".", "weight", ".", "data", ".", "new", "(", "self", ".", "weight", ".", "size", "(", ")", ")", "\n", "if", "mask_init", "==", "'1s'", ":", "\n", "            ", "self", ".", "mask_real", ".", "fill_", "(", "mask_scale", ")", "\n", "", "elif", "mask_init", "==", "'uniform'", ":", "\n", "            ", "self", ".", "mask_real", ".", "uniform_", "(", "-", "1", "*", "mask_scale", ",", "mask_scale", ")", "\n", "# mask_real is now a trainable parameter.", "\n", "", "self", ".", "mask_real", "=", "Parameter", "(", "self", ".", "mask_real", ")", "\n", "\n", "# Initialize the thresholder.", "\n", "if", "threshold_fn", "==", "'binarizer'", ":", "\n", "            ", "self", ".", "threshold_fn", "=", "Binarizer", "(", "threshold", "=", "threshold", ")", "\n", "", "elif", "threshold_fn", "==", "'ternarizer'", ":", "\n", "            ", "self", ".", "threshold_fn", "=", "Ternarizer", "(", "threshold", "=", "threshold", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arunmallya_piggyback.modnets.layers.ElementWiseLinear.forward": [[199, 206], ["layers.ElementWiseLinear.threshold_fn", "torch.linear", "torch.linear", "torch.linear"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "# Get binarized/ternarized mask from real-valued mask.", "\n", "        ", "mask_thresholded", "=", "self", ".", "threshold_fn", "(", "self", ".", "mask_real", ")", "\n", "# Mask weights with above mask.", "\n", "weight_thresholded", "=", "mask_thresholded", "*", "self", ".", "weight", "\n", "# Get output using modified weight.", "\n", "return", "F", ".", "linear", "(", "input", ",", "weight_thresholded", ",", "self", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arunmallya_piggyback.modnets.layers.ElementWiseLinear.__repr__": [[207, 211], ["str", "str"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "'('", "+", "'in_features='", "+", "str", "(", "self", ".", "in_features", ")", "+", "', out_features='", "+", "str", "(", "self", ".", "out_features", ")", "+", "')'", "\n", "\n"]], "home.repos.pwc.inspect_result.arunmallya_piggyback.modnets.layers.ElementWiseLinear._apply": [[212, 230], ["layers.ElementWiseLinear.children", "layers.ElementWiseLinear._parameters.values", "layers.ElementWiseLinear._buffers.items", "fn", "fn", "module._apply", "fn", "fn", "fn"], "methods", ["home.repos.pwc.inspect_result.arunmallya_piggyback.modnets.layers.ElementWiseLinear._apply"], ["", "def", "_apply", "(", "self", ",", "fn", ")", ":", "\n", "        ", "for", "module", "in", "self", ".", "children", "(", ")", ":", "\n", "            ", "module", ".", "_apply", "(", "fn", ")", "\n", "\n", "", "for", "param", "in", "self", ".", "_parameters", ".", "values", "(", ")", ":", "\n", "            ", "if", "param", "is", "not", "None", ":", "\n", "# Variables stored in modules are graph leaves, and we don't", "\n", "# want to create copy nodes, so we have to unpack the data.", "\n", "                ", "param", ".", "data", "=", "fn", "(", "param", ".", "data", ")", "\n", "if", "param", ".", "_grad", "is", "not", "None", ":", "\n", "                    ", "param", ".", "_grad", ".", "data", "=", "fn", "(", "param", ".", "_grad", ".", "data", ")", "\n", "\n", "", "", "", "for", "key", ",", "buf", "in", "self", ".", "_buffers", ".", "items", "(", ")", ":", "\n", "            ", "if", "buf", "is", "not", "None", ":", "\n", "                ", "self", ".", "_buffers", "[", "key", "]", "=", "fn", "(", "buf", ")", "\n", "\n", "", "", "self", ".", "weight", ".", "data", "=", "fn", "(", "self", ".", "weight", ".", "data", ")", "\n", "self", ".", "bias", ".", "data", "=", "fn", "(", "self", ".", "bias", ".", "data", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.arunmallya_piggyback.modnets.resnet.BasicBlock.__init__": [[20, 31], ["torch.Module.__init__", "resnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "resnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.arunmallya_piggyback.modnets.densenet.DenseNet.__init__", "home.repos.pwc.inspect_result.arunmallya_piggyback.modnets.resnet.conv3x3", "home.repos.pwc.inspect_result.arunmallya_piggyback.modnets.resnet.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "mask_init", ",", "mask_scale", ",", "threshold_fn", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "mask_init", ",", "\n", "mask_scale", ",", "threshold_fn", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ",", "mask_init", ",", "\n", "threshold_fn", ",", "mask_scale", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.arunmallya_piggyback.modnets.resnet.BasicBlock.forward": [[32, 49], ["resnet.BasicBlock.conv1", "resnet.BasicBlock.bn1", "resnet.BasicBlock.relu", "resnet.BasicBlock.conv2", "resnet.BasicBlock.bn2", "resnet.BasicBlock.relu", "resnet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.arunmallya_piggyback.modnets.resnet.Bottleneck.__init__": [[54, 71], ["torch.Module.__init__", "modnets.ElementWiseConv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "modnets.ElementWiseConv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "modnets.ElementWiseConv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.arunmallya_piggyback.modnets.densenet.DenseNet.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "mask_init", ",", "mask_scale", ",", "threshold_fn", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nl", ".", "ElementWiseConv2d", "(", "\n", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ",", "\n", "mask_init", "=", "mask_init", ",", "mask_scale", "=", "mask_scale", ",", "threshold_fn", "=", "threshold_fn", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nl", ".", "ElementWiseConv2d", "(", "\n", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ",", "\n", "mask_init", "=", "mask_init", ",", "mask_scale", "=", "mask_scale", ",", "threshold_fn", "=", "threshold_fn", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nl", ".", "ElementWiseConv2d", "(", "\n", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ",", "\n", "mask_init", "=", "mask_init", ",", "mask_scale", "=", "mask_scale", ",", "threshold_fn", "=", "threshold_fn", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "4", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.arunmallya_piggyback.modnets.resnet.Bottleneck.forward": [[72, 93], ["resnet.Bottleneck.conv1", "resnet.Bottleneck.bn1", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv2", "resnet.Bottleneck.bn2", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv3", "resnet.Bottleneck.bn3", "resnet.Bottleneck.relu", "resnet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.arunmallya_piggyback.modnets.resnet.ResNet.__init__": [[97, 124], ["torch.Module.__init__", "modnets.ElementWiseConv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "resnet.ResNet.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.arunmallya_piggyback.modnets.densenet.DenseNet.__init__", "home.repos.pwc.inspect_result.arunmallya_piggyback.modnets.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.arunmallya_piggyback.modnets.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.arunmallya_piggyback.modnets.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.arunmallya_piggyback.modnets.resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "mask_init", ",", "mask_scale", ",", "threshold_fn", ",", "num_classes", "=", "1000", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nl", ".", "ElementWiseConv2d", "(", "\n", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "bias", "=", "False", ",", "\n", "mask_init", "=", "mask_init", ",", "mask_scale", "=", "mask_scale", ",", "threshold_fn", "=", "threshold_fn", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "64", ",", "layers", "[", "0", "]", ",", "mask_init", ",", "mask_scale", ",", "threshold_fn", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "mask_init", ",", "mask_scale", ",", "threshold_fn", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "mask_init", ",", "mask_scale", ",", "threshold_fn", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "mask_init", ",", "mask_scale", ",", "threshold_fn", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "7", ",", "stride", "=", "1", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nl", ".", "ElementWiseConv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arunmallya_piggyback.modnets.resnet.ResNet._make_layer": [[125, 145], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "modnets.ElementWiseConv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "mask_init", ",", "mask_scale", ",", "threshold_fn", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nl", ".", "ElementWiseConv2d", "(", "\n", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ",", "\n", "mask_init", "=", "mask_init", ",", "mask_scale", "=", "mask_scale", ",", "threshold_fn", "=", "threshold_fn", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "mask_init", ",", "\n", "mask_scale", ",", "threshold_fn", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "\n", "mask_init", ",", "mask_scale", ",", "threshold_fn", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arunmallya_piggyback.modnets.resnet.ResNet.forward": [[146, 162], ["resnet.ResNet.conv1", "resnet.ResNet.bn1", "resnet.ResNet.relu", "resnet.ResNet.maxpool", "resnet.ResNet.layer1", "resnet.ResNet.layer2", "resnet.ResNet.layer3", "resnet.ResNet.layer4", "resnet.ResNet.avgpool", "resnet.ResNet.view", "resnet.ResNet.fc", "resnet.ResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.arunmallya_piggyback.modnets.resnet.conv3x3": [[10, 15], ["modnets.ElementWiseConv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "mask_init", ",", "mask_scale", ",", "threshold_fn", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"3x3 convolution with padding\"", "\n", "return", "nl", ".", "ElementWiseConv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ",", "mask_init", "=", "mask_init", ",", "mask_scale", "=", "mask_scale", ",", "\n", "threshold_fn", "=", "threshold_fn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arunmallya_piggyback.modnets.resnet.resnet50": [[164, 169], ["resnet.ResNet"], "function", ["None"], ["", "", "def", "resnet50", "(", "mask_init", "=", "'1s'", ",", "mask_scale", "=", "1e-2", ",", "threshold_fn", "=", "'binarizer'", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-50 model.\"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "mask_init", ",", "\n", "mask_scale", ",", "threshold_fn", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.arunmallya_piggyback.modnets.densenet._DenseLayer.__init__": [[22, 38], ["torch.Sequential.__init__", "densenet._DenseLayer.add_module", "densenet._DenseLayer.add_module", "densenet._DenseLayer.add_module", "densenet._DenseLayer.add_module", "densenet._DenseLayer.add_module", "densenet._DenseLayer.add_module", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "modnets.ElementWiseConv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "modnets.ElementWiseConv2d"], "methods", ["home.repos.pwc.inspect_result.arunmallya_piggyback.modnets.densenet.DenseNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_input_features", ",", "growth_rate", ",", "bn_size", ",", "drop_rate", ",", "mask_init", ",", "mask_scale", ",", "threshold_fn", ")", ":", "\n", "        ", "super", "(", "_DenseLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "add_module", "(", "'norm.1'", ",", "nn", ".", "BatchNorm2d", "(", "num_input_features", ")", ")", ",", "\n", "self", ".", "add_module", "(", "'relu.1'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "self", ".", "add_module", "(", "'conv.1'", ",", "nl", ".", "ElementWiseConv2d", "(", "num_input_features", ",", "bn_size", "*", "\n", "growth_rate", ",", "\n", "mask_init", "=", "mask_init", ",", "mask_scale", "=", "mask_scale", ",", "\n", "threshold_fn", "=", "threshold_fn", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ")", ",", "\n", "self", ".", "add_module", "(", "'norm.2'", ",", "nn", ".", "BatchNorm2d", "(", "bn_size", "*", "growth_rate", ")", ")", ",", "\n", "self", ".", "add_module", "(", "'relu.2'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "self", ".", "add_module", "(", "'conv.2'", ",", "nl", ".", "ElementWiseConv2d", "(", "bn_size", "*", "growth_rate", ",", "growth_rate", ",", "\n", "mask_init", "=", "mask_init", ",", "mask_scale", "=", "mask_scale", ",", "\n", "threshold_fn", "=", "threshold_fn", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ")", ",", "\n", "self", ".", "drop_rate", "=", "drop_rate", "\n", "\n"]], "home.repos.pwc.inspect_result.arunmallya_piggyback.modnets.densenet._DenseLayer.forward": [[39, 45], ["super().forward", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout"], "methods", ["home.repos.pwc.inspect_result.arunmallya_piggyback.modnets.densenet.DenseNet.forward"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "new_features", "=", "super", "(", "_DenseLayer", ",", "self", ")", ".", "forward", "(", "x", ")", "\n", "if", "self", ".", "drop_rate", ">", "0", ":", "\n", "            ", "new_features", "=", "F", ".", "dropout", "(", "\n", "new_features", ",", "p", "=", "self", ".", "drop_rate", ",", "training", "=", "self", ".", "training", ")", "\n", "", "return", "torch", ".", "cat", "(", "[", "x", ",", "new_features", "]", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arunmallya_piggyback.modnets.densenet._DenseBlock.__init__": [[48, 55], ["torch.Sequential.__init__", "range", "densenet._DenseLayer", "densenet._DenseBlock.add_module"], "methods", ["home.repos.pwc.inspect_result.arunmallya_piggyback.modnets.densenet.DenseNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_layers", ",", "num_input_features", ",", "bn_size", ",", "growth_rate", ",", "drop_rate", ",", "mask_init", ",", "mask_scale", ",", "threshold_fn", ")", ":", "\n", "        ", "super", "(", "_DenseBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "for", "i", "in", "range", "(", "num_layers", ")", ":", "\n", "            ", "layer", "=", "_DenseLayer", "(", "num_input_features", "+", "i", "*", "\n", "growth_rate", ",", "growth_rate", ",", "bn_size", ",", "drop_rate", ",", "\n", "mask_init", ",", "mask_scale", ",", "threshold_fn", ")", "\n", "self", ".", "add_module", "(", "'denselayer%d'", "%", "(", "i", "+", "1", ")", ",", "layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arunmallya_piggyback.modnets.densenet._Transition.__init__": [[58, 67], ["torch.Sequential.__init__", "densenet._Transition.add_module", "densenet._Transition.add_module", "densenet._Transition.add_module", "densenet._Transition.add_module", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "modnets.ElementWiseConv2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d"], "methods", ["home.repos.pwc.inspect_result.arunmallya_piggyback.modnets.densenet.DenseNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_input_features", ",", "num_output_features", ",", "mask_init", ",", "mask_scale", ",", "threshold_fn", ")", ":", "\n", "        ", "super", "(", "_Transition", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "add_module", "(", "'norm'", ",", "nn", ".", "BatchNorm2d", "(", "num_input_features", ")", ")", "\n", "self", ".", "add_module", "(", "'relu'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "add_module", "(", "'conv'", ",", "nl", ".", "ElementWiseConv2d", "(", "num_input_features", ",", "num_output_features", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ",", "\n", "mask_init", "=", "mask_init", ",", "mask_scale", "=", "mask_scale", ",", "\n", "threshold_fn", "=", "threshold_fn", ")", ")", "\n", "self", ".", "add_module", "(", "'pool'", ",", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arunmallya_piggyback.modnets.densenet.DenseNet.__init__": [[83, 122], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "enumerate", "densenet.DenseNet.features.add_module", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "collections.OrderedDict", "densenet._DenseBlock", "densenet.DenseNet.features.add_module", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "densenet._Transition", "densenet.DenseNet.features.add_module", "len", "modnets.ElementWiseConv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d"], "methods", ["home.repos.pwc.inspect_result.arunmallya_piggyback.modnets.densenet.DenseNet.__init__"], ["def", "__init__", "(", "self", ",", "mask_init", ",", "mask_scale", ",", "threshold_fn", ",", "growth_rate", "=", "32", ",", "\n", "block_config", "=", "(", "6", ",", "12", ",", "24", ",", "16", ")", ",", "num_init_features", "=", "64", ",", "bn_size", "=", "4", ",", "\n", "drop_rate", "=", "0", ",", "num_classes", "=", "1000", ")", ":", "\n", "\n", "        ", "super", "(", "DenseNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# First convolution", "\n", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "\n", "(", "'conv0'", ",", "nl", ".", "ElementWiseConv2d", "(", "3", ",", "num_init_features", ",", "\n", "mask_init", "=", "mask_init", ",", "\n", "mask_scale", "=", "mask_scale", ",", "\n", "threshold_fn", "=", "threshold_fn", ",", "\n", "kernel_size", "=", "7", ",", "\n", "stride", "=", "2", ",", "padding", "=", "3", ",", "bias", "=", "False", ")", ")", ",", "\n", "(", "'norm0'", ",", "nn", ".", "BatchNorm2d", "(", "num_init_features", ")", ")", ",", "\n", "(", "'relu0'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "(", "'pool0'", ",", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ")", ",", "\n", "]", ")", ")", "\n", "\n", "# Each denseblock", "\n", "num_features", "=", "num_init_features", "\n", "for", "i", ",", "num_layers", "in", "enumerate", "(", "block_config", ")", ":", "\n", "            ", "block", "=", "_DenseBlock", "(", "num_layers", "=", "num_layers", ",", "num_input_features", "=", "num_features", ",", "\n", "bn_size", "=", "bn_size", ",", "growth_rate", "=", "growth_rate", ",", "drop_rate", "=", "drop_rate", ",", "\n", "mask_init", "=", "mask_init", ",", "mask_scale", "=", "mask_scale", ",", "threshold_fn", "=", "threshold_fn", ")", "\n", "self", ".", "features", ".", "add_module", "(", "'denseblock%d'", "%", "(", "i", "+", "1", ")", ",", "block", ")", "\n", "num_features", "=", "num_features", "+", "num_layers", "*", "growth_rate", "\n", "if", "i", "!=", "len", "(", "block_config", ")", "-", "1", ":", "\n", "                ", "trans", "=", "_Transition", "(", "\n", "num_input_features", "=", "num_features", ",", "num_output_features", "=", "num_features", "//", "2", ",", "\n", "mask_init", "=", "mask_init", ",", "mask_scale", "=", "mask_scale", ",", "threshold_fn", "=", "threshold_fn", ")", "\n", "self", ".", "features", ".", "add_module", "(", "'transition%d'", "%", "(", "i", "+", "1", ")", ",", "trans", ")", "\n", "num_features", "=", "num_features", "//", "2", "\n", "\n", "# Final batch norm", "\n", "", "", "self", ".", "features", ".", "add_module", "(", "'norm5'", ",", "nn", ".", "BatchNorm2d", "(", "num_features", ")", ")", "\n", "\n", "# Linear layer", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "num_features", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arunmallya_piggyback.modnets.densenet.DenseNet.forward": [[123, 130], ["densenet.DenseNet.features", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.avg_pool2d().view", "torch.avg_pool2d().view", "torch.avg_pool2d().view", "torch.avg_pool2d().view", "densenet.DenseNet.classifier", "densenet.DenseNet.size", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "features", "=", "self", ".", "features", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "features", ",", "inplace", "=", "True", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "kernel_size", "=", "7", ",", "stride", "=", "1", ")", ".", "view", "(", "\n", "features", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "classifier", "(", "out", ")", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.arunmallya_piggyback.modnets.densenet.densenet121": [[12, 19], ["densenet.DenseNet"], "function", ["None"], ["def", "densenet121", "(", "mask_init", "=", "'1s'", ",", "mask_scale", "=", "1e-2", ",", "threshold_fn", "=", "'binarizer'", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"Densenet-121 model from\n    `\"Densely Connected Convolutional Networks\" <https://arxiv.org/pdf/1608.06993.pdf>`_\n    \"\"\"", "\n", "model", "=", "DenseNet", "(", "mask_init", ",", "mask_scale", ",", "threshold_fn", ",", "\n", "num_init_features", "=", "64", ",", "growth_rate", "=", "32", ",", "block_config", "=", "(", "6", ",", "12", ",", "24", ",", "16", ")", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]]}