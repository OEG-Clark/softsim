{"home.repos.pwc.inspect_result.yuetan031_fedproto.lib.options.args_parser": [[8, 73], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "args_parser", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "\n", "# federated arguments (Notation for the arguments followed from paper)", "\n", "parser", ".", "add_argument", "(", "'--rounds'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "\n", "help", "=", "\"number of rounds of training\"", ")", "\n", "parser", ".", "add_argument", "(", "'--num_users'", ",", "type", "=", "int", ",", "default", "=", "20", ",", "\n", "help", "=", "\"number of users: K\"", ")", "\n", "parser", ".", "add_argument", "(", "'--frac'", ",", "type", "=", "float", ",", "default", "=", "0.04", ",", "\n", "help", "=", "'the fraction of clients: C'", ")", "\n", "parser", ".", "add_argument", "(", "'--train_ep'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "\"the number of local episodes: E\"", ")", "\n", "parser", ".", "add_argument", "(", "'--local_bs'", ",", "type", "=", "int", ",", "default", "=", "4", ",", "\n", "help", "=", "\"local batch size: B\"", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.01", ",", "\n", "help", "=", "'learning rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--momentum'", ",", "type", "=", "float", ",", "default", "=", "0.5", ",", "\n", "help", "=", "'SGD momentum (default: 0.5)'", ")", "\n", "\n", "# model arguments", "\n", "parser", ".", "add_argument", "(", "'--model'", ",", "type", "=", "str", ",", "default", "=", "'cnn'", ",", "help", "=", "'model name'", ")", "\n", "parser", ".", "add_argument", "(", "'--alg'", ",", "type", "=", "str", ",", "default", "=", "'fedproto'", ",", "help", "=", "\"algorithms\"", ")", "\n", "parser", ".", "add_argument", "(", "'--mode'", ",", "type", "=", "str", ",", "default", "=", "'task_heter'", ",", "help", "=", "\"mode\"", ")", "\n", "parser", ".", "add_argument", "(", "'--num_channels'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "\"number \\\n                        of channels of imgs\"", ")", "\n", "parser", ".", "add_argument", "(", "'--norm'", ",", "type", "=", "str", ",", "default", "=", "'batch_norm'", ",", "\n", "help", "=", "\"batch_norm, layer_norm, or None\"", ")", "\n", "parser", ".", "add_argument", "(", "'--num_filters'", ",", "type", "=", "int", ",", "default", "=", "32", ",", "\n", "help", "=", "\"number of filters for conv nets -- 32 for \\\n                        mini-imagenet, 64 for omiglot.\"", ")", "\n", "parser", ".", "add_argument", "(", "'--max_pool'", ",", "type", "=", "str", ",", "default", "=", "'True'", ",", "\n", "help", "=", "\"Whether use max pooling rather than \\\n                        strided convolutions\"", ")", "\n", "\n", "# other arguments", "\n", "parser", ".", "add_argument", "(", "'--data_dir'", ",", "type", "=", "str", ",", "default", "=", "'../data/'", ",", "help", "=", "\"directory of dataset\"", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "type", "=", "str", ",", "default", "=", "'mnist'", ",", "help", "=", "\"name \\\n                        of dataset\"", ")", "\n", "parser", ".", "add_argument", "(", "'--num_classes'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "help", "=", "\"number \\\n                        of classes\"", ")", "\n", "parser", ".", "add_argument", "(", "'--gpu'", ",", "default", "=", "0", ",", "help", "=", "\"To use cuda, set \\\n                        to a specific GPU ID. Default set to use CPU.\"", ")", "\n", "parser", ".", "add_argument", "(", "'--optimizer'", ",", "type", "=", "str", ",", "default", "=", "'sgd'", ",", "help", "=", "\"type \\\n                        of optimizer\"", ")", "\n", "parser", ".", "add_argument", "(", "'--iid'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "'Default set to IID. Set to 0 for non-IID.'", ")", "\n", "parser", ".", "add_argument", "(", "'--unequal'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "'whether to use unequal data splits for  \\\n                        non-i.i.d setting (use 0 for equal splits)'", ")", "\n", "parser", ".", "add_argument", "(", "'--stopping_rounds'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "\n", "help", "=", "'rounds of early stopping'", ")", "\n", "parser", ".", "add_argument", "(", "'--verbose'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'verbose'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "1234", ",", "help", "=", "'random seed'", ")", "\n", "parser", ".", "add_argument", "(", "'--test_ep'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "help", "=", "\"num of test episodes for evaluation\"", ")", "\n", "\n", "# Local arguments", "\n", "parser", ".", "add_argument", "(", "'--ways'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "help", "=", "\"num of classes\"", ")", "\n", "parser", ".", "add_argument", "(", "'--shots'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "\"num of shots\"", ")", "\n", "parser", ".", "add_argument", "(", "'--train_shots_max'", ",", "type", "=", "int", ",", "default", "=", "110", ",", "help", "=", "\"num of shots\"", ")", "\n", "parser", ".", "add_argument", "(", "'--test_shots'", ",", "type", "=", "int", ",", "default", "=", "15", ",", "help", "=", "\"num of shots\"", ")", "\n", "parser", ".", "add_argument", "(", "'--stdev'", ",", "type", "=", "int", ",", "default", "=", "2", ",", "help", "=", "\"stdev of ways\"", ")", "\n", "parser", ".", "add_argument", "(", "'--ld'", ",", "type", "=", "float", ",", "default", "=", "1", ",", "help", "=", "\"weight of proto loss\"", ")", "\n", "parser", ".", "add_argument", "(", "'--ft_round'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "help", "=", "\"round of fine tuning\"", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "", ""]], "home.repos.pwc.inspect_result.yuetan031_fedproto.lib.update.DatasetSplit.__init__": [[16, 19], ["int"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "dataset", ",", "idxs", ")", ":", "\n", "        ", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "idxs", "=", "[", "int", "(", "i", ")", "for", "i", "in", "idxs", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yuetan031_fedproto.lib.update.DatasetSplit.__len__": [[20, 22], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "idxs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuetan031_fedproto.lib.update.DatasetSplit.__getitem__": [[23, 26], ["torch.tensor", "torch.tensor"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "image", ",", "label", "=", "self", ".", "dataset", "[", "self", ".", "idxs", "[", "item", "]", "]", "\n", "return", "torch", ".", "tensor", "(", "image", ")", ",", "torch", ".", "tensor", "(", "label", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuetan031_fedproto.lib.update.LocalUpdate.__init__": [[29, 34], ["update.LocalUpdate.train_val_test", "torch.nn.NLLLoss().to", "list", "torch.nn.NLLLoss"], "methods", ["home.repos.pwc.inspect_result.yuetan031_fedproto.lib.update.LocalUpdate.train_val_test"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "dataset", ",", "idxs", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "trainloader", "=", "self", ".", "train_val_test", "(", "dataset", ",", "list", "(", "idxs", ")", ")", "\n", "self", ".", "device", "=", "args", ".", "device", "\n", "self", ".", "criterion", "=", "nn", ".", "NLLLoss", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuetan031_fedproto.lib.update.LocalUpdate.train_val_test": [[35, 45], ["torch.utils.data.DataLoader", "update.DatasetSplit", "int", "len"], "methods", ["None"], ["", "def", "train_val_test", "(", "self", ",", "dataset", ",", "idxs", ")", ":", "\n", "        ", "\"\"\"\n        Returns train, validation and test dataloaders for a given dataset\n        and user indexes.\n        \"\"\"", "\n", "idxs_train", "=", "idxs", "[", ":", "int", "(", "1", "*", "len", "(", "idxs", ")", ")", "]", "\n", "trainloader", "=", "DataLoader", "(", "DatasetSplit", "(", "dataset", ",", "idxs_train", ")", ",", "\n", "batch_size", "=", "self", ".", "args", ".", "local_bs", ",", "shuffle", "=", "True", ",", "drop_last", "=", "True", ")", "\n", "\n", "return", "trainloader", "\n", "\n"]], "home.repos.pwc.inspect_result.yuetan031_fedproto.lib.update.LocalUpdate.update_weights": [[46, 86], ["model.train", "range", "torch.optim.SGD", "enumerate", "epoch_loss.append", "model.state_dict", "torch.eq().float().mean.item", "model.parameters", "torch.optim.Adam", "model.zero_grad", "model", "update.LocalUpdate.criterion", "update.LocalUpdate.backward", "torch.optim.Adam.step", "log_probs.max", "torch.eq().float().mean", "batch_loss.append", "sum", "len", "model.parameters", "images.to", "labels_g.to", "print", "update.LocalUpdate.item", "sum", "len", "torch.eq().float", "len", "update.LocalUpdate.item", "torch.eq().float().mean.item", "torch.eq", "len", "len", "labels.squeeze"], "methods", ["home.repos.pwc.inspect_result.yuetan031_fedproto.lib.pre_train.train"], ["", "def", "update_weights", "(", "self", ",", "idx", ",", "model", ",", "global_round", ")", ":", "\n", "# Set mode to train model", "\n", "        ", "model", ".", "train", "(", ")", "\n", "epoch_loss", "=", "[", "]", "\n", "\n", "# Set optimizer for the local updates", "\n", "if", "self", ".", "args", ".", "optimizer", "==", "'sgd'", ":", "\n", "            ", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "args", ".", "lr", ",", "\n", "momentum", "=", "0.5", ")", "\n", "", "elif", "self", ".", "args", ".", "optimizer", "==", "'adam'", ":", "\n", "            ", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "args", ".", "lr", ",", "\n", "weight_decay", "=", "1e-4", ")", "\n", "\n", "", "for", "iter", "in", "range", "(", "self", ".", "args", ".", "train_ep", ")", ":", "\n", "            ", "batch_loss", "=", "[", "]", "\n", "for", "batch_idx", ",", "(", "images", ",", "labels_g", ")", "in", "enumerate", "(", "self", ".", "trainloader", ")", ":", "\n", "                ", "images", ",", "labels", "=", "images", ".", "to", "(", "self", ".", "device", ")", ",", "labels_g", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "model", ".", "zero_grad", "(", ")", "\n", "log_probs", ",", "protos", "=", "model", "(", "images", ")", "\n", "loss", "=", "self", ".", "criterion", "(", "log_probs", ",", "labels", ")", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "_", ",", "y_hat", "=", "log_probs", ".", "max", "(", "1", ")", "\n", "acc_val", "=", "torch", ".", "eq", "(", "y_hat", ",", "labels", ".", "squeeze", "(", ")", ")", ".", "float", "(", ")", ".", "mean", "(", ")", "\n", "\n", "if", "self", ".", "args", ".", "verbose", "and", "(", "batch_idx", "%", "10", "==", "0", ")", ":", "\n", "                    ", "print", "(", "'| Global Round : {} | User: {} | Local Epoch : {} | [{}/{} ({:.0f}%)]\\tLoss: {:.3f} | Acc: {:.3f}'", ".", "format", "(", "\n", "global_round", ",", "idx", ",", "iter", ",", "batch_idx", "*", "len", "(", "images", ")", ",", "\n", "len", "(", "self", ".", "trainloader", ".", "dataset", ")", ",", "\n", "100.", "*", "batch_idx", "/", "len", "(", "self", ".", "trainloader", ")", ",", "\n", "loss", ".", "item", "(", ")", ",", "\n", "acc_val", ".", "item", "(", ")", ")", ")", "\n", "", "batch_loss", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "", "epoch_loss", ".", "append", "(", "sum", "(", "batch_loss", ")", "/", "len", "(", "batch_loss", ")", ")", "\n", "\n", "\n", "", "return", "model", ".", "state_dict", "(", ")", ",", "sum", "(", "epoch_loss", ")", "/", "len", "(", "epoch_loss", ")", ",", "acc_val", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuetan031_fedproto.lib.update.LocalUpdate.update_weights_prox": [[87, 136], ["model.train", "model.state_dict", "torch.nn.MSELoss().to", "range", "local_weights.keys", "torch.optim.SGD", "enumerate", "epoch_loss.append", "model.state_dict", "torch.eq().float().mean.item", "torch.nn.MSELoss", "model.parameters", "torch.optim.Adam", "model.zero_grad", "model", "update.LocalUpdate.criterion", "update.LocalUpdate.backward", "torch.optim.Adam.step", "log_probs.max", "torch.eq().float().mean", "batch_loss.append", "sum", "len", "model.parameters", "images.to", "labels_g.to", "local_weights.keys", "model.state_dict.keys", "len", "print", "update.LocalUpdate.item", "sum", "len", "torch.nn.MSELoss().to.", "torch.eq().float", "w_avg[].float", "w_old[].float", "len", "update.LocalUpdate.item", "torch.eq().float().mean.item", "torch.eq", "len", "len", "labels.squeeze"], "methods", ["home.repos.pwc.inspect_result.yuetan031_fedproto.lib.pre_train.train"], ["", "def", "update_weights_prox", "(", "self", ",", "idx", ",", "local_weights", ",", "model", ",", "global_round", ")", ":", "\n", "# Set mode to train model", "\n", "        ", "model", ".", "train", "(", ")", "\n", "epoch_loss", "=", "[", "]", "\n", "if", "idx", "in", "local_weights", ".", "keys", "(", ")", ":", "\n", "            ", "w_old", "=", "local_weights", "[", "idx", "]", "\n", "", "w_avg", "=", "model", ".", "state_dict", "(", ")", "\n", "loss_mse", "=", "nn", ".", "MSELoss", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "# Set optimizer for the local updates", "\n", "if", "self", ".", "args", ".", "optimizer", "==", "'sgd'", ":", "\n", "            ", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "args", ".", "lr", ",", "\n", "momentum", "=", "0.5", ")", "\n", "", "elif", "self", ".", "args", ".", "optimizer", "==", "'adam'", ":", "\n", "            ", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "args", ".", "lr", ",", "\n", "weight_decay", "=", "1e-4", ")", "\n", "\n", "", "for", "iter", "in", "range", "(", "self", ".", "args", ".", "train_ep", ")", ":", "\n", "            ", "batch_loss", "=", "[", "]", "\n", "for", "batch_idx", ",", "(", "images", ",", "labels_g", ")", "in", "enumerate", "(", "self", ".", "trainloader", ")", ":", "\n", "                ", "images", ",", "labels", "=", "images", ".", "to", "(", "self", ".", "device", ")", ",", "labels_g", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "model", ".", "zero_grad", "(", ")", "\n", "log_probs", ",", "protos", "=", "model", "(", "images", ")", "\n", "loss", "=", "self", ".", "criterion", "(", "log_probs", ",", "labels", ")", "\n", "if", "idx", "in", "local_weights", ".", "keys", "(", ")", ":", "\n", "                    ", "loss2", "=", "0", "\n", "for", "para", "in", "w_avg", ".", "keys", "(", ")", ":", "\n", "                        ", "loss2", "+=", "loss_mse", "(", "w_avg", "[", "para", "]", ".", "float", "(", ")", ",", "w_old", "[", "para", "]", ".", "float", "(", ")", ")", "\n", "", "loss2", "/=", "len", "(", "local_weights", ")", "\n", "loss", "+=", "loss2", "*", "150", "\n", "", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "_", ",", "y_hat", "=", "log_probs", ".", "max", "(", "1", ")", "\n", "acc_val", "=", "torch", ".", "eq", "(", "y_hat", ",", "labels", ".", "squeeze", "(", ")", ")", ".", "float", "(", ")", ".", "mean", "(", ")", "\n", "\n", "if", "self", ".", "args", ".", "verbose", "and", "(", "batch_idx", "%", "10", "==", "0", ")", ":", "\n", "                    ", "print", "(", "'| Global Round : {} | User: {} | Local Epoch : {} | [{}/{} ({:.0f}%)]\\tLoss: {:.3f} | Acc: {:.3f}'", ".", "format", "(", "\n", "global_round", ",", "idx", ",", "iter", ",", "batch_idx", "*", "len", "(", "images", ")", ",", "\n", "len", "(", "self", ".", "trainloader", ".", "dataset", ")", ",", "\n", "100.", "*", "batch_idx", "/", "len", "(", "self", ".", "trainloader", ")", ",", "\n", "loss", ".", "item", "(", ")", ",", "\n", "acc_val", ".", "item", "(", ")", ")", ")", "\n", "", "batch_loss", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "", "epoch_loss", ".", "append", "(", "sum", "(", "batch_loss", ")", "/", "len", "(", "batch_loss", ")", ")", "\n", "\n", "\n", "", "return", "model", ".", "state_dict", "(", ")", ",", "sum", "(", "epoch_loss", ")", "/", "len", "(", "epoch_loss", ")", ",", "acc_val", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuetan031_fedproto.lib.update.LocalUpdate.update_weights_het": [[137, 206], ["model.train", "range", "torch.optim.SGD", "enumerate", "epoch_loss[].append", "epoch_loss[].append", "epoch_loss[].append", "sum", "len", "sum", "len", "sum", "len", "model.state_dict", "torch.eq().float().mean.item", "model.parameters", "torch.optim.Adam", "model.zero_grad", "model", "update.LocalUpdate.criterion", "torch.nn.MSELoss", "loss.backward", "torch.optim.Adam.step", "range", "log_probs.max", "torch.eq().float().mean", "batch_loss[].append", "batch_loss[].append", "batch_loss[].append", "model.parameters", "images.to", "label_g.to", "len", "copy.deepcopy", "torch.nn.MSELoss.", "len", "print", "loss.item", "update.LocalUpdate.item", "nn.MSELoss.item", "sum", "len", "sum", "len", "sum", "len", "label_g[].item", "agg_protos_label[].append", "torch.eq().float", "label.item", "global_protos.keys", "len", "loss.item", "torch.eq().float().mean.item", "label_g[].item", "torch.eq", "len", "len", "labels.squeeze", "label_g[].item", "label.item"], "methods", ["home.repos.pwc.inspect_result.yuetan031_fedproto.lib.pre_train.train"], ["", "def", "update_weights_het", "(", "self", ",", "args", ",", "idx", ",", "global_protos", ",", "model", ",", "global_round", "=", "round", ")", ":", "\n", "# Set mode to train model", "\n", "        ", "model", ".", "train", "(", ")", "\n", "epoch_loss", "=", "{", "'total'", ":", "[", "]", ",", "'1'", ":", "[", "]", ",", "'2'", ":", "[", "]", ",", "'3'", ":", "[", "]", "}", "\n", "\n", "# Set optimizer for the local updates", "\n", "if", "self", ".", "args", ".", "optimizer", "==", "'sgd'", ":", "\n", "            ", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "args", ".", "lr", ",", "\n", "momentum", "=", "0.5", ")", "\n", "", "elif", "self", ".", "args", ".", "optimizer", "==", "'adam'", ":", "\n", "            ", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "args", ".", "lr", ",", "\n", "weight_decay", "=", "1e-4", ")", "\n", "\n", "", "for", "iter", "in", "range", "(", "self", ".", "args", ".", "train_ep", ")", ":", "\n", "            ", "batch_loss", "=", "{", "'total'", ":", "[", "]", ",", "'1'", ":", "[", "]", ",", "'2'", ":", "[", "]", ",", "'3'", ":", "[", "]", "}", "\n", "agg_protos_label", "=", "{", "}", "\n", "for", "batch_idx", ",", "(", "images", ",", "label_g", ")", "in", "enumerate", "(", "self", ".", "trainloader", ")", ":", "\n", "                ", "images", ",", "labels", "=", "images", ".", "to", "(", "self", ".", "device", ")", ",", "label_g", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "# loss1: cross-entrophy loss, loss2: proto distance loss", "\n", "model", ".", "zero_grad", "(", ")", "\n", "log_probs", ",", "protos", "=", "model", "(", "images", ")", "\n", "loss1", "=", "self", ".", "criterion", "(", "log_probs", ",", "labels", ")", "\n", "\n", "loss_mse", "=", "nn", ".", "MSELoss", "(", ")", "\n", "if", "len", "(", "global_protos", ")", "==", "0", ":", "\n", "                    ", "loss2", "=", "0", "*", "loss1", "\n", "", "else", ":", "\n", "                    ", "proto_new", "=", "copy", ".", "deepcopy", "(", "protos", ".", "data", ")", "\n", "i", "=", "0", "\n", "for", "label", "in", "labels", ":", "\n", "                        ", "if", "label", ".", "item", "(", ")", "in", "global_protos", ".", "keys", "(", ")", ":", "\n", "                            ", "proto_new", "[", "i", ",", ":", "]", "=", "global_protos", "[", "label", ".", "item", "(", ")", "]", "[", "0", "]", ".", "data", "\n", "", "i", "+=", "1", "\n", "", "loss2", "=", "loss_mse", "(", "proto_new", ",", "protos", ")", "\n", "\n", "", "loss", "=", "loss1", "+", "loss2", "*", "args", ".", "ld", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "labels", ")", ")", ":", "\n", "                    ", "if", "label_g", "[", "i", "]", ".", "item", "(", ")", "in", "agg_protos_label", ":", "\n", "                        ", "agg_protos_label", "[", "label_g", "[", "i", "]", ".", "item", "(", ")", "]", ".", "append", "(", "protos", "[", "i", ",", ":", "]", ")", "\n", "", "else", ":", "\n", "                        ", "agg_protos_label", "[", "label_g", "[", "i", "]", ".", "item", "(", ")", "]", "=", "[", "protos", "[", "i", ",", ":", "]", "]", "\n", "\n", "", "", "log_probs", "=", "log_probs", "[", ":", ",", "0", ":", "args", ".", "num_classes", "]", "\n", "_", ",", "y_hat", "=", "log_probs", ".", "max", "(", "1", ")", "\n", "acc_val", "=", "torch", ".", "eq", "(", "y_hat", ",", "labels", ".", "squeeze", "(", ")", ")", ".", "float", "(", ")", ".", "mean", "(", ")", "\n", "\n", "if", "self", ".", "args", ".", "verbose", "and", "(", "batch_idx", "%", "10", "==", "0", ")", ":", "\n", "                    ", "print", "(", "'| Global Round : {} | User: {} | Local Epoch : {} | [{}/{} ({:.0f}%)]\\tLoss: {:.3f} | Acc: {:.3f}'", ".", "format", "(", "\n", "global_round", ",", "idx", ",", "iter", ",", "batch_idx", "*", "len", "(", "images", ")", ",", "\n", "len", "(", "self", ".", "trainloader", ".", "dataset", ")", ",", "\n", "100.", "*", "batch_idx", "/", "len", "(", "self", ".", "trainloader", ")", ",", "\n", "loss", ".", "item", "(", ")", ",", "\n", "acc_val", ".", "item", "(", ")", ")", ")", "\n", "", "batch_loss", "[", "'total'", "]", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "batch_loss", "[", "'1'", "]", ".", "append", "(", "loss1", ".", "item", "(", ")", ")", "\n", "batch_loss", "[", "'2'", "]", ".", "append", "(", "loss2", ".", "item", "(", ")", ")", "\n", "", "epoch_loss", "[", "'total'", "]", ".", "append", "(", "sum", "(", "batch_loss", "[", "'total'", "]", ")", "/", "len", "(", "batch_loss", "[", "'total'", "]", ")", ")", "\n", "epoch_loss", "[", "'1'", "]", ".", "append", "(", "sum", "(", "batch_loss", "[", "'1'", "]", ")", "/", "len", "(", "batch_loss", "[", "'1'", "]", ")", ")", "\n", "epoch_loss", "[", "'2'", "]", ".", "append", "(", "sum", "(", "batch_loss", "[", "'2'", "]", ")", "/", "len", "(", "batch_loss", "[", "'2'", "]", ")", ")", "\n", "\n", "", "epoch_loss", "[", "'total'", "]", "=", "sum", "(", "epoch_loss", "[", "'total'", "]", ")", "/", "len", "(", "epoch_loss", "[", "'total'", "]", ")", "\n", "epoch_loss", "[", "'1'", "]", "=", "sum", "(", "epoch_loss", "[", "'1'", "]", ")", "/", "len", "(", "epoch_loss", "[", "'1'", "]", ")", "\n", "epoch_loss", "[", "'2'", "]", "=", "sum", "(", "epoch_loss", "[", "'2'", "]", ")", "/", "len", "(", "epoch_loss", "[", "'2'", "]", ")", "\n", "\n", "return", "model", ".", "state_dict", "(", ")", ",", "epoch_loss", ",", "acc_val", ".", "item", "(", ")", ",", "agg_protos_label", "\n", "\n"]], "home.repos.pwc.inspect_result.yuetan031_fedproto.lib.update.LocalUpdate.inference": [[207, 230], ["model.eval", "enumerate", "model", "update.LocalUpdate.criterion", "update.LocalUpdate.item", "torch.max", "pred_labels.view.view.view", "torch.sum().item", "len", "images.to", "labels.to", "torch.sum", "torch.eq"], "methods", ["None"], ["", "def", "inference", "(", "self", ",", "model", ")", ":", "\n", "        ", "\"\"\" Returns the inference accuracy and loss.\n        \"\"\"", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "loss", ",", "total", ",", "correct", "=", "0.0", ",", "0.0", ",", "0.0", "\n", "\n", "for", "batch_idx", ",", "(", "images", ",", "labels", ")", "in", "enumerate", "(", "self", ".", "testloader", ")", ":", "\n", "            ", "images", ",", "labels", "=", "images", ".", "to", "(", "self", ".", "device", ")", ",", "labels", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "# Inference", "\n", "outputs", "=", "model", "(", "images", ")", "\n", "batch_loss", "=", "self", ".", "criterion", "(", "outputs", ",", "labels", ")", "\n", "loss", "+=", "batch_loss", ".", "item", "(", ")", "\n", "\n", "# Prediction", "\n", "_", ",", "pred_labels", "=", "torch", ".", "max", "(", "outputs", ",", "1", ")", "\n", "pred_labels", "=", "pred_labels", ".", "view", "(", "-", "1", ")", "\n", "correct", "+=", "torch", ".", "sum", "(", "torch", ".", "eq", "(", "pred_labels", ",", "labels", ")", ")", ".", "item", "(", ")", "\n", "total", "+=", "len", "(", "labels", ")", "\n", "\n", "", "accuracy", "=", "correct", "/", "total", "\n", "return", "accuracy", ",", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.yuetan031_fedproto.lib.update.LocalTest.__init__": [[232, 237], ["update.LocalTest.test_split", "torch.nn.NLLLoss().to", "list", "torch.nn.NLLLoss"], "methods", ["home.repos.pwc.inspect_result.yuetan031_fedproto.lib.update.LocalTest.test_split"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "dataset", ",", "idxs", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "testloader", "=", "self", ".", "test_split", "(", "dataset", ",", "list", "(", "idxs", ")", ")", "\n", "self", ".", "device", "=", "args", ".", "device", "\n", "self", ".", "criterion", "=", "nn", ".", "NLLLoss", "(", ")", ".", "to", "(", "args", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuetan031_fedproto.lib.update.LocalTest.test_split": [[238, 244], ["torch.utils.data.DataLoader", "update.DatasetSplit", "int", "len"], "methods", ["None"], ["", "def", "test_split", "(", "self", ",", "dataset", ",", "idxs", ")", ":", "\n", "        ", "idxs_test", "=", "idxs", "[", ":", "int", "(", "1", "*", "len", "(", "idxs", ")", ")", "]", "\n", "\n", "testloader", "=", "DataLoader", "(", "DatasetSplit", "(", "dataset", ",", "idxs_test", ")", ",", "\n", "batch_size", "=", "64", ",", "shuffle", "=", "False", ")", "\n", "return", "testloader", "\n", "\n"]], "home.repos.pwc.inspect_result.yuetan031_fedproto.lib.update.LocalTest.get_result": [[245, 266], ["model.eval", "enumerate", "model.zero_grad", "model", "update.LocalTest.criterion", "update.LocalTest.item", "torch.max", "pred_labels.view.view.view", "torch.sum().item", "len", "images.to", "labels.to", "torch.sum", "torch.eq"], "methods", ["None"], ["", "def", "get_result", "(", "self", ",", "args", ",", "idx", ",", "classes_list", ",", "model", ")", ":", "\n", "# Set mode to train model", "\n", "        ", "model", ".", "eval", "(", ")", "\n", "loss", ",", "total", ",", "correct", "=", "0.0", ",", "0.0", ",", "0.0", "\n", "for", "batch_idx", ",", "(", "images", ",", "labels", ")", "in", "enumerate", "(", "self", ".", "testloader", ")", ":", "\n", "            ", "images", ",", "labels", "=", "images", ".", "to", "(", "self", ".", "device", ")", ",", "labels", ".", "to", "(", "self", ".", "device", ")", "\n", "model", ".", "zero_grad", "(", ")", "\n", "outputs", ",", "protos", "=", "model", "(", "images", ")", "\n", "batch_loss", "=", "self", ".", "criterion", "(", "outputs", ",", "labels", ")", "\n", "loss", "+=", "batch_loss", ".", "item", "(", ")", "\n", "\n", "# prediction", "\n", "outputs", "=", "outputs", "[", ":", ",", "0", ":", "args", ".", "num_classes", "]", "\n", "_", ",", "pred_labels", "=", "torch", ".", "max", "(", "outputs", ",", "1", ")", "\n", "pred_labels", "=", "pred_labels", ".", "view", "(", "-", "1", ")", "\n", "correct", "+=", "torch", ".", "sum", "(", "torch", ".", "eq", "(", "pred_labels", ",", "labels", ")", ")", ".", "item", "(", ")", "\n", "total", "+=", "len", "(", "labels", ")", "\n", "\n", "", "acc", "=", "correct", "/", "total", "\n", "\n", "return", "loss", ",", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.yuetan031_fedproto.lib.update.LocalTest.fine_tune": [[267, 289], ["update.LocalTest.test_split", "torch.nn.NLLLoss().to", "model.train", "range", "model.state_dict", "list", "torch.optim.SGD", "enumerate", "torch.nn.NLLLoss", "model.parameters", "torch.optim.Adam", "model.zero_grad", "model", "torch.nn.NLLLoss().to.", "nn.NLLLoss().to.backward", "torch.optim.Adam.step", "model.parameters", "images.to", "label_g.to"], "methods", ["home.repos.pwc.inspect_result.yuetan031_fedproto.lib.update.LocalTest.test_split", "home.repos.pwc.inspect_result.yuetan031_fedproto.lib.pre_train.train"], ["", "def", "fine_tune", "(", "self", ",", "args", ",", "dataset", ",", "idxs", ",", "model", ")", ":", "\n", "        ", "trainloader", "=", "self", ".", "test_split", "(", "dataset", ",", "list", "(", "idxs", ")", ")", "\n", "device", "=", "args", ".", "device", "\n", "criterion", "=", "nn", ".", "NLLLoss", "(", ")", ".", "to", "(", "device", ")", "\n", "if", "args", ".", "optimizer", "==", "'sgd'", ":", "\n", "            ", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "momentum", "=", "0.5", ")", "\n", "", "elif", "args", ".", "optimizer", "==", "'adam'", ":", "\n", "            ", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "weight_decay", "=", "1e-4", ")", "\n", "\n", "", "model", ".", "train", "(", ")", "\n", "for", "i", "in", "range", "(", "args", ".", "ft_round", ")", ":", "\n", "            ", "for", "batch_idx", ",", "(", "images", ",", "label_g", ")", "in", "enumerate", "(", "trainloader", ")", ":", "\n", "                ", "images", ",", "labels", "=", "images", ".", "to", "(", "device", ")", ",", "label_g", ".", "to", "(", "device", ")", "\n", "\n", "# compute loss", "\n", "model", ".", "zero_grad", "(", ")", "\n", "log_probs", ",", "protos", "=", "model", "(", "images", ")", "\n", "loss", "=", "criterion", "(", "log_probs", ",", "labels", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "", "return", "model", ".", "state_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuetan031_fedproto.lib.update.test_inference": [[291, 319], ["model.eval", "torch.nn.NLLLoss().to", "torch.utils.data.DataLoader", "enumerate", "model", "nn.NLLLoss().to.", "criterion.item", "torch.max", "pred_labels.view.view", "torch.sum().item", "len", "torch.nn.NLLLoss", "images.to", "labels.to", "torch.sum", "torch.eq"], "function", ["None"], ["", "", "def", "test_inference", "(", "args", ",", "model", ",", "test_dataset", ",", "global_protos", ")", ":", "\n", "    ", "\"\"\" Returns the test accuracy and loss.\n    \"\"\"", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "loss", ",", "total", ",", "correct", "=", "0.0", ",", "0.0", ",", "0.0", "\n", "\n", "device", "=", "args", ".", "device", "\n", "criterion", "=", "nn", ".", "NLLLoss", "(", ")", ".", "to", "(", "device", ")", "\n", "testloader", "=", "DataLoader", "(", "test_dataset", ",", "batch_size", "=", "128", ",", "\n", "shuffle", "=", "False", ")", "\n", "\n", "for", "batch_idx", ",", "(", "images", ",", "labels", ")", "in", "enumerate", "(", "testloader", ")", ":", "\n", "        ", "images", ",", "labels", "=", "images", ".", "to", "(", "device", ")", ",", "labels", ".", "to", "(", "device", ")", "\n", "\n", "# Inference", "\n", "outputs", ",", "protos", "=", "model", "(", "images", ")", "\n", "batch_loss", "=", "criterion", "(", "outputs", ",", "labels", ")", "\n", "loss", "+=", "batch_loss", ".", "item", "(", ")", "\n", "\n", "# Prediction", "\n", "_", ",", "pred_labels", "=", "torch", ".", "max", "(", "outputs", ",", "1", ")", "\n", "pred_labels", "=", "pred_labels", ".", "view", "(", "-", "1", ")", "\n", "correct", "+=", "torch", ".", "sum", "(", "torch", ".", "eq", "(", "pred_labels", ",", "labels", ")", ")", ".", "item", "(", ")", "\n", "total", "+=", "len", "(", "labels", ")", "\n", "\n", "", "accuracy", "=", "correct", "/", "total", "\n", "return", "accuracy", ",", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.yuetan031_fedproto.lib.update.test_inference_new": [[320, 363], ["torch.nn.NLLLoss().to", "torch.utils.data.DataLoader", "enumerate", "range", "torch.zeros().to", "numpy.zeros", "range", "range", "nn.NLLLoss().to.", "criterion.item", "torch.max", "pred_labels.view.view", "torch.sum().item", "len", "torch.nn.NLLLoss", "images.to.to", "labels.to", "images.to.to", "model", "prob_list.append", "range", "torch.zeros", "torch.sum", "torch.eq", "numpy.where"], "function", ["None"], ["", "def", "test_inference_new", "(", "args", ",", "local_model_list", ",", "test_dataset", ",", "classes_list", ",", "global_protos", "=", "[", "]", ")", ":", "\n", "    ", "\"\"\" Returns the test accuracy and loss.\n    \"\"\"", "\n", "loss", ",", "total", ",", "correct", "=", "0.0", ",", "0.0", ",", "0.0", "\n", "\n", "device", "=", "args", ".", "device", "\n", "criterion", "=", "nn", ".", "NLLLoss", "(", ")", ".", "to", "(", "device", ")", "\n", "testloader", "=", "DataLoader", "(", "test_dataset", ",", "batch_size", "=", "64", ",", "shuffle", "=", "False", ")", "\n", "\n", "for", "batch_idx", ",", "(", "images", ",", "labels", ")", "in", "enumerate", "(", "testloader", ")", ":", "\n", "        ", "images", ",", "labels", "=", "images", ".", "to", "(", "device", ")", ",", "labels", ".", "to", "(", "device", ")", "\n", "prob_list", "=", "[", "]", "\n", "for", "idx", "in", "range", "(", "args", ".", "num_users", ")", ":", "\n", "            ", "images", "=", "images", ".", "to", "(", "args", ".", "device", ")", "\n", "model", "=", "local_model_list", "[", "idx", "]", "\n", "probs", ",", "protos", "=", "model", "(", "images", ")", "# outputs 64*6", "\n", "prob_list", ".", "append", "(", "probs", ")", "\n", "\n", "", "outputs", "=", "torch", ".", "zeros", "(", "size", "=", "(", "images", ".", "shape", "[", "0", "]", ",", "10", ")", ")", ".", "to", "(", "device", ")", "# outputs 64*10", "\n", "cnt", "=", "np", ".", "zeros", "(", "10", ")", "\n", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "            ", "for", "idx", "in", "range", "(", "args", ".", "num_users", ")", ":", "\n", "                ", "if", "i", "in", "classes_list", "[", "idx", "]", ":", "\n", "                    ", "tmp", "=", "np", ".", "where", "(", "classes_list", "[", "idx", "]", "==", "i", ")", "[", "0", "]", "[", "0", "]", "\n", "outputs", "[", ":", ",", "i", "]", "+=", "prob_list", "[", "idx", "]", "[", ":", ",", "tmp", "]", "\n", "cnt", "[", "i", "]", "+=", "1", "\n", "", "", "", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "            ", "if", "cnt", "[", "i", "]", "!=", "0", ":", "\n", "                ", "outputs", "[", ":", ",", "i", "]", "=", "outputs", "[", ":", ",", "i", "]", "/", "cnt", "[", "i", "]", "\n", "\n", "", "", "batch_loss", "=", "criterion", "(", "outputs", ",", "labels", ")", "\n", "loss", "+=", "batch_loss", ".", "item", "(", ")", "\n", "\n", "# Prediction", "\n", "_", ",", "pred_labels", "=", "torch", ".", "max", "(", "outputs", ",", "1", ")", "\n", "pred_labels", "=", "pred_labels", ".", "view", "(", "-", "1", ")", "\n", "correct", "+=", "torch", ".", "sum", "(", "torch", ".", "eq", "(", "pred_labels", ",", "labels", ")", ")", ".", "item", "(", ")", "\n", "total", "+=", "len", "(", "labels", ")", "\n", "\n", "\n", "", "acc", "=", "correct", "/", "total", "\n", "\n", "return", "loss", ",", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.yuetan031_fedproto.lib.update.test_inference_new_cifar": [[364, 407], ["torch.nn.NLLLoss().to", "torch.utils.data.DataLoader", "enumerate", "range", "torch.zeros().to", "numpy.zeros", "range", "range", "nn.NLLLoss().to.", "criterion.item", "torch.max", "pred_labels.view.view", "torch.sum().item", "len", "torch.nn.NLLLoss", "images.to.to", "labels.to", "images.to.to", "model", "prob_list.append", "range", "torch.zeros", "torch.sum", "torch.eq", "numpy.where"], "function", ["None"], ["", "def", "test_inference_new_cifar", "(", "args", ",", "local_model_list", ",", "test_dataset", ",", "classes_list", ",", "global_protos", "=", "[", "]", ")", ":", "\n", "    ", "\"\"\" Returns the test accuracy and loss.\n    \"\"\"", "\n", "loss", ",", "total", ",", "correct", "=", "0.0", ",", "0.0", ",", "0.0", "\n", "\n", "device", "=", "args", ".", "device", "\n", "criterion", "=", "nn", ".", "NLLLoss", "(", ")", ".", "to", "(", "device", ")", "\n", "testloader", "=", "DataLoader", "(", "test_dataset", ",", "batch_size", "=", "64", ",", "shuffle", "=", "False", ")", "\n", "\n", "for", "batch_idx", ",", "(", "images", ",", "labels", ")", "in", "enumerate", "(", "testloader", ")", ":", "\n", "        ", "images", ",", "labels", "=", "images", ".", "to", "(", "device", ")", ",", "labels", ".", "to", "(", "device", ")", "\n", "prob_list", "=", "[", "]", "\n", "for", "idx", "in", "range", "(", "args", ".", "num_users", ")", ":", "\n", "            ", "images", "=", "images", ".", "to", "(", "args", ".", "device", ")", "\n", "model", "=", "local_model_list", "[", "idx", "]", "\n", "probs", ",", "protos", "=", "model", "(", "images", ")", "# outputs 64*6", "\n", "prob_list", ".", "append", "(", "probs", ")", "\n", "\n", "", "outputs", "=", "torch", ".", "zeros", "(", "size", "=", "(", "images", ".", "shape", "[", "0", "]", ",", "100", ")", ")", ".", "to", "(", "device", ")", "# outputs 64*10", "\n", "cnt", "=", "np", ".", "zeros", "(", "100", ")", "\n", "for", "i", "in", "range", "(", "100", ")", ":", "\n", "            ", "for", "idx", "in", "range", "(", "args", ".", "num_users", ")", ":", "\n", "                ", "if", "i", "in", "classes_list", "[", "idx", "]", ":", "\n", "                    ", "tmp", "=", "np", ".", "where", "(", "classes_list", "[", "idx", "]", "==", "i", ")", "[", "0", "]", "[", "0", "]", "\n", "outputs", "[", ":", ",", "i", "]", "+=", "prob_list", "[", "idx", "]", "[", ":", ",", "tmp", "]", "\n", "cnt", "[", "i", "]", "+=", "1", "\n", "", "", "", "for", "i", "in", "range", "(", "100", ")", ":", "\n", "            ", "if", "cnt", "[", "i", "]", "!=", "0", ":", "\n", "                ", "outputs", "[", ":", ",", "i", "]", "=", "outputs", "[", ":", ",", "i", "]", "/", "cnt", "[", "i", "]", "\n", "\n", "", "", "batch_loss", "=", "criterion", "(", "outputs", ",", "labels", ")", "\n", "loss", "+=", "batch_loss", ".", "item", "(", ")", "\n", "\n", "# Prediction", "\n", "_", ",", "pred_labels", "=", "torch", ".", "max", "(", "outputs", ",", "1", ")", "\n", "pred_labels", "=", "pred_labels", ".", "view", "(", "-", "1", ")", "\n", "correct", "+=", "torch", ".", "sum", "(", "torch", ".", "eq", "(", "pred_labels", ",", "labels", ")", ")", ".", "item", "(", ")", "\n", "total", "+=", "len", "(", "labels", ")", "\n", "\n", "\n", "", "acc", "=", "correct", "/", "total", "\n", "\n", "return", "loss", ",", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.yuetan031_fedproto.lib.update.test_inference_new_het": [[409, 452], ["torch.nn.MSELoss", "torch.utils.data.DataLoader", "enumerate", "range", "torch.zeros().to", "len", "range", "torch.min", "pred_labels.view.view", "torch.sum().item", "len", "images.to.to", "labels.to", "images.to.to", "model", "protos_list.append", "torch.ones().to", "range", "torch.zeros", "torch.sum", "torch.ones", "global_protos.keys", "nn.MSELoss.", "torch.eq"], "function", ["None"], ["", "def", "test_inference_new_het", "(", "args", ",", "local_model_list", ",", "test_dataset", ",", "global_protos", "=", "[", "]", ")", ":", "\n", "    ", "\"\"\" Returns the test accuracy and loss.\n    \"\"\"", "\n", "loss", ",", "total", ",", "correct", "=", "0.0", ",", "0.0", ",", "0.0", "\n", "loss_mse", "=", "nn", ".", "MSELoss", "(", ")", "\n", "\n", "device", "=", "args", ".", "device", "\n", "testloader", "=", "DataLoader", "(", "test_dataset", ",", "batch_size", "=", "64", ",", "shuffle", "=", "False", ")", "\n", "\n", "cnt", "=", "0", "\n", "for", "batch_idx", ",", "(", "images", ",", "labels", ")", "in", "enumerate", "(", "testloader", ")", ":", "\n", "        ", "images", ",", "labels", "=", "images", ".", "to", "(", "device", ")", ",", "labels", ".", "to", "(", "device", ")", "\n", "prob_list", "=", "[", "]", "\n", "protos_list", "=", "[", "]", "\n", "for", "idx", "in", "range", "(", "args", ".", "num_users", ")", ":", "\n", "            ", "images", "=", "images", ".", "to", "(", "args", ".", "device", ")", "\n", "model", "=", "local_model_list", "[", "idx", "]", "\n", "_", ",", "protos", "=", "model", "(", "images", ")", "\n", "protos_list", ".", "append", "(", "protos", ")", "\n", "\n", "", "ensem_proto", "=", "torch", ".", "zeros", "(", "size", "=", "(", "images", ".", "shape", "[", "0", "]", ",", "protos", ".", "shape", "[", "1", "]", ")", ")", ".", "to", "(", "device", ")", "\n", "# protos ensemble", "\n", "for", "protos", "in", "protos_list", ":", "\n", "            ", "ensem_proto", "+=", "protos", "\n", "", "ensem_proto", "/=", "len", "(", "protos_list", ")", "\n", "\n", "a_large_num", "=", "100", "\n", "outputs", "=", "a_large_num", "*", "torch", ".", "ones", "(", "size", "=", "(", "images", ".", "shape", "[", "0", "]", ",", "10", ")", ")", ".", "to", "(", "device", ")", "# outputs 64*10", "\n", "for", "i", "in", "range", "(", "images", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "10", ")", ":", "\n", "                ", "if", "j", "in", "global_protos", ".", "keys", "(", ")", ":", "\n", "                    ", "dist", "=", "loss_mse", "(", "ensem_proto", "[", "i", ",", ":", "]", ",", "global_protos", "[", "j", "]", "[", "0", "]", ")", "\n", "outputs", "[", "i", ",", "j", "]", "=", "dist", "\n", "\n", "# Prediction", "\n", "", "", "", "_", ",", "pred_labels", "=", "torch", ".", "min", "(", "outputs", ",", "1", ")", "\n", "pred_labels", "=", "pred_labels", ".", "view", "(", "-", "1", ")", "\n", "correct", "+=", "torch", ".", "sum", "(", "torch", ".", "eq", "(", "pred_labels", ",", "labels", ")", ")", ".", "item", "(", ")", "\n", "total", "+=", "len", "(", "labels", ")", "\n", "\n", "", "acc", "=", "correct", "/", "total", "\n", "\n", "return", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.yuetan031_fedproto.lib.update.test_inference_new_het_lt": [[453, 531], ["torch.nn.MSELoss", "torch.nn.NLLLoss().to", "range", "model.to", "torch.utils.data.DataLoader", "model.eval", "enumerate", "print", "acc_list_l.append", "torch.nn.NLLLoss", "update.DatasetSplit", "model.zero_grad", "model", "nn.NLLLoss().to.", "criterion.item", "torch.max", "pred_labels.view.view", "torch.sum().item", "len", "enumerate", "print", "acc_list_g.append", "loss_list.append", "images.to", "labels.to", "model.zero_grad", "model", "range", "torch.min", "pred_labels.view.view", "torch.sum().item", "len", "copy.deepcopy", "nn.MSELoss.", "torch.sum", "images.to", "labels.to", "torch.ones().to", "range", "loss2.detach().numpy.cpu().detach().numpy", "loss2.detach().numpy.detach().numpy", "torch.eq", "torch.sum", "label.item", "global_protos.keys", "torch.ones", "nn.MSELoss.", "torch.eq", "loss2.detach().numpy.cpu().detach", "loss2.detach().numpy.detach", "global_protos.keys", "loss2.detach().numpy.cpu", "label.item"], "function", ["None"], ["", "def", "test_inference_new_het_lt", "(", "args", ",", "local_model_list", ",", "test_dataset", ",", "classes_list", ",", "user_groups_gt", ",", "global_protos", "=", "[", "]", ")", ":", "\n", "    ", "\"\"\" Returns the test accuracy and loss.\n    \"\"\"", "\n", "loss", ",", "total", ",", "correct", "=", "0.0", ",", "0.0", ",", "0.0", "\n", "loss_mse", "=", "nn", ".", "MSELoss", "(", ")", "\n", "\n", "device", "=", "args", ".", "device", "\n", "criterion", "=", "nn", ".", "NLLLoss", "(", ")", ".", "to", "(", "device", ")", "\n", "\n", "acc_list_g", "=", "[", "]", "\n", "acc_list_l", "=", "[", "]", "\n", "loss_list", "=", "[", "]", "\n", "for", "idx", "in", "range", "(", "args", ".", "num_users", ")", ":", "\n", "        ", "model", "=", "local_model_list", "[", "idx", "]", "\n", "model", ".", "to", "(", "args", ".", "device", ")", "\n", "testloader", "=", "DataLoader", "(", "DatasetSplit", "(", "test_dataset", ",", "user_groups_gt", "[", "idx", "]", ")", ",", "batch_size", "=", "64", ",", "shuffle", "=", "True", ")", "\n", "\n", "# test (local model)", "\n", "model", ".", "eval", "(", ")", "\n", "for", "batch_idx", ",", "(", "images", ",", "labels", ")", "in", "enumerate", "(", "testloader", ")", ":", "\n", "            ", "images", ",", "labels", "=", "images", ".", "to", "(", "device", ")", ",", "labels", ".", "to", "(", "device", ")", "\n", "model", ".", "zero_grad", "(", ")", "\n", "outputs", ",", "protos", "=", "model", "(", "images", ")", "\n", "\n", "batch_loss", "=", "criterion", "(", "outputs", ",", "labels", ")", "\n", "loss", "+=", "batch_loss", ".", "item", "(", ")", "\n", "\n", "# prediction", "\n", "_", ",", "pred_labels", "=", "torch", ".", "max", "(", "outputs", ",", "1", ")", "\n", "pred_labels", "=", "pred_labels", ".", "view", "(", "-", "1", ")", "\n", "correct", "+=", "torch", ".", "sum", "(", "torch", ".", "eq", "(", "pred_labels", ",", "labels", ")", ")", ".", "item", "(", ")", "\n", "total", "+=", "len", "(", "labels", ")", "\n", "\n", "", "acc", "=", "correct", "/", "total", "\n", "print", "(", "'| User: {} | Global Test Acc w/o protos: {:.3f}'", ".", "format", "(", "idx", ",", "acc", ")", ")", "\n", "acc_list_l", ".", "append", "(", "acc", ")", "\n", "\n", "# test (use global proto)", "\n", "if", "global_protos", "!=", "[", "]", ":", "\n", "            ", "for", "batch_idx", ",", "(", "images", ",", "labels", ")", "in", "enumerate", "(", "testloader", ")", ":", "\n", "                ", "images", ",", "labels", "=", "images", ".", "to", "(", "device", ")", ",", "labels", ".", "to", "(", "device", ")", "\n", "model", ".", "zero_grad", "(", ")", "\n", "outputs", ",", "protos", "=", "model", "(", "images", ")", "\n", "\n", "# compute the dist between protos and global_protos", "\n", "a_large_num", "=", "100", "\n", "dist", "=", "a_large_num", "*", "torch", ".", "ones", "(", "size", "=", "(", "images", ".", "shape", "[", "0", "]", ",", "args", ".", "num_classes", ")", ")", ".", "to", "(", "device", ")", "# initialize a distance matrix", "\n", "for", "i", "in", "range", "(", "images", ".", "shape", "[", "0", "]", ")", ":", "\n", "                    ", "for", "j", "in", "range", "(", "args", ".", "num_classes", ")", ":", "\n", "                        ", "if", "j", "in", "global_protos", ".", "keys", "(", ")", "and", "j", "in", "classes_list", "[", "idx", "]", ":", "\n", "                            ", "d", "=", "loss_mse", "(", "protos", "[", "i", ",", ":", "]", ",", "global_protos", "[", "j", "]", "[", "0", "]", ")", "\n", "dist", "[", "i", ",", "j", "]", "=", "d", "\n", "\n", "# prediction", "\n", "", "", "", "_", ",", "pred_labels", "=", "torch", ".", "min", "(", "dist", ",", "1", ")", "\n", "pred_labels", "=", "pred_labels", ".", "view", "(", "-", "1", ")", "\n", "correct", "+=", "torch", ".", "sum", "(", "torch", ".", "eq", "(", "pred_labels", ",", "labels", ")", ")", ".", "item", "(", ")", "\n", "total", "+=", "len", "(", "labels", ")", "\n", "\n", "# compute loss", "\n", "proto_new", "=", "copy", ".", "deepcopy", "(", "protos", ".", "data", ")", "\n", "i", "=", "0", "\n", "for", "label", "in", "labels", ":", "\n", "                    ", "if", "label", ".", "item", "(", ")", "in", "global_protos", ".", "keys", "(", ")", ":", "\n", "                        ", "proto_new", "[", "i", ",", ":", "]", "=", "global_protos", "[", "label", ".", "item", "(", ")", "]", "[", "0", "]", ".", "data", "\n", "", "i", "+=", "1", "\n", "", "loss2", "=", "loss_mse", "(", "proto_new", ",", "protos", ")", "\n", "if", "args", ".", "device", "==", "'cuda'", ":", "\n", "                    ", "loss2", "=", "loss2", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "                    ", "loss2", "=", "loss2", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "", "acc", "=", "correct", "/", "total", "\n", "print", "(", "'| User: {} | Global Test Acc with protos: {:.5f}'", ".", "format", "(", "idx", ",", "acc", ")", ")", "\n", "acc_list_g", ".", "append", "(", "acc", ")", "\n", "loss_list", ".", "append", "(", "loss2", ")", "\n", "\n", "", "", "return", "acc_list_l", ",", "acc_list_g", ",", "loss_list", "\n", "\n"]], "home.repos.pwc.inspect_result.yuetan031_fedproto.lib.update.save_protos": [[533, 592], ["torch.nn.NLLLoss().to", "range", "range", "numpy.array", "numpy.array", "numpy.array", "numpy.save", "numpy.save", "numpy.save", "print", "model.to", "torch.utils.data.DataLoader", "model.eval", "enumerate", "agg_protos_label[].keys", "torch.nn.NLLLoss", "update.DatasetSplit", "model.zero_grad", "model", "nn.NLLLoss().to.", "criterion.item", "torch.max", "pred_labels.view.view", "torch.sum().item", "len", "range", "images.to", "labels.to", "len", "np.array.append", "np.array.append", "np.array.append", "torch.sum", "labels[].item", "[].append", "proto.cpu().detach().numpy", "proto.detach().numpy", "torch.eq", "labels[].item", "proto.cpu().detach", "proto.detach", "labels[].item", "proto.cpu"], "function", ["None"], ["", "def", "save_protos", "(", "args", ",", "local_model_list", ",", "test_dataset", ",", "user_groups_gt", ")", ":", "\n", "    ", "\"\"\" Returns the test accuracy and loss.\n    \"\"\"", "\n", "loss", ",", "total", ",", "correct", "=", "0.0", ",", "0.0", ",", "0.0", "\n", "\n", "device", "=", "args", ".", "device", "\n", "criterion", "=", "nn", ".", "NLLLoss", "(", ")", ".", "to", "(", "device", ")", "\n", "\n", "agg_protos_label", "=", "{", "}", "\n", "for", "idx", "in", "range", "(", "args", ".", "num_users", ")", ":", "\n", "        ", "agg_protos_label", "[", "idx", "]", "=", "{", "}", "\n", "model", "=", "local_model_list", "[", "idx", "]", "\n", "model", ".", "to", "(", "args", ".", "device", ")", "\n", "testloader", "=", "DataLoader", "(", "DatasetSplit", "(", "test_dataset", ",", "user_groups_gt", "[", "idx", "]", ")", ",", "batch_size", "=", "64", ",", "shuffle", "=", "True", ")", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "for", "batch_idx", ",", "(", "images", ",", "labels", ")", "in", "enumerate", "(", "testloader", ")", ":", "\n", "            ", "images", ",", "labels", "=", "images", ".", "to", "(", "device", ")", ",", "labels", ".", "to", "(", "device", ")", "\n", "\n", "model", ".", "zero_grad", "(", ")", "\n", "outputs", ",", "protos", "=", "model", "(", "images", ")", "\n", "\n", "batch_loss", "=", "criterion", "(", "outputs", ",", "labels", ")", "\n", "loss", "+=", "batch_loss", ".", "item", "(", ")", "\n", "\n", "# prediction", "\n", "_", ",", "pred_labels", "=", "torch", ".", "max", "(", "outputs", ",", "1", ")", "\n", "pred_labels", "=", "pred_labels", ".", "view", "(", "-", "1", ")", "\n", "correct", "+=", "torch", ".", "sum", "(", "torch", ".", "eq", "(", "pred_labels", ",", "labels", ")", ")", ".", "item", "(", ")", "\n", "total", "+=", "len", "(", "labels", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "labels", ")", ")", ":", "\n", "                ", "if", "labels", "[", "i", "]", ".", "item", "(", ")", "in", "agg_protos_label", "[", "idx", "]", ":", "\n", "                    ", "agg_protos_label", "[", "idx", "]", "[", "labels", "[", "i", "]", ".", "item", "(", ")", "]", ".", "append", "(", "protos", "[", "i", ",", ":", "]", ")", "\n", "", "else", ":", "\n", "                    ", "agg_protos_label", "[", "idx", "]", "[", "labels", "[", "i", "]", ".", "item", "(", ")", "]", "=", "[", "protos", "[", "i", ",", ":", "]", "]", "\n", "\n", "", "", "", "", "x", "=", "[", "]", "\n", "y", "=", "[", "]", "\n", "d", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "args", ".", "num_users", ")", ":", "\n", "        ", "for", "label", "in", "agg_protos_label", "[", "i", "]", ".", "keys", "(", ")", ":", "\n", "            ", "for", "proto", "in", "agg_protos_label", "[", "i", "]", "[", "label", "]", ":", "\n", "                ", "if", "args", ".", "device", "==", "'cuda'", ":", "\n", "                    ", "tmp", "=", "proto", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "                    ", "tmp", "=", "proto", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "", "x", ".", "append", "(", "tmp", ")", "\n", "y", ".", "append", "(", "label", ")", "\n", "d", ".", "append", "(", "i", ")", "\n", "\n", "", "", "", "x", "=", "np", ".", "array", "(", "x", ")", "\n", "y", "=", "np", ".", "array", "(", "y", ")", "\n", "d", "=", "np", ".", "array", "(", "d", ")", "\n", "np", ".", "save", "(", "'./'", "+", "args", ".", "alg", "+", "'_protos.npy'", ",", "x", ")", "\n", "np", ".", "save", "(", "'./'", "+", "args", ".", "alg", "+", "'_labels.npy'", ",", "y", ")", "\n", "np", ".", "save", "(", "'./'", "+", "args", ".", "alg", "+", "'_idx.npy'", ",", "d", ")", "\n", "\n", "print", "(", "\"Save protos and labels successfully.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuetan031_fedproto.lib.update.test_inference_new_het_cifar": [[593, 632], ["torch.nn.MSELoss", "torch.utils.data.DataLoader", "enumerate", "range", "range", "torch.topk", "range", "len", "images.to.to", "labels.to", "images.to.to", "model", "prob_list.append", "torch.ones().to", "range", "torch.sum().item", "torch.ones", "global_protos.keys", "nn.MSELoss.", "torch.sum", "torch.eq"], "function", ["None"], ["", "def", "test_inference_new_het_cifar", "(", "args", ",", "local_model_list", ",", "test_dataset", ",", "global_protos", "=", "[", "]", ")", ":", "\n", "    ", "\"\"\" Returns the test accuracy and loss.\n    \"\"\"", "\n", "loss", ",", "total", ",", "correct", "=", "0.0", ",", "0.0", ",", "0.0", "\n", "loss_mse", "=", "nn", ".", "MSELoss", "(", ")", "\n", "\n", "device", "=", "args", ".", "device", "\n", "testloader", "=", "DataLoader", "(", "test_dataset", ",", "batch_size", "=", "64", ",", "shuffle", "=", "False", ")", "\n", "\n", "cnt", "=", "0", "\n", "for", "batch_idx", ",", "(", "images", ",", "labels", ")", "in", "enumerate", "(", "testloader", ")", ":", "\n", "        ", "images", ",", "labels", "=", "images", ".", "to", "(", "device", ")", ",", "labels", ".", "to", "(", "device", ")", "\n", "prob_list", "=", "[", "]", "\n", "for", "idx", "in", "range", "(", "args", ".", "num_users", ")", ":", "\n", "            ", "images", "=", "images", ".", "to", "(", "args", ".", "device", ")", "\n", "model", "=", "local_model_list", "[", "idx", "]", "\n", "probs", ",", "protos", "=", "model", "(", "images", ")", "# outputs 64*6", "\n", "prob_list", ".", "append", "(", "probs", ")", "\n", "\n", "", "a_large_num", "=", "1000", "\n", "outputs", "=", "a_large_num", "*", "torch", ".", "ones", "(", "size", "=", "(", "images", ".", "shape", "[", "0", "]", ",", "100", ")", ")", ".", "to", "(", "device", ")", "# outputs 64*10", "\n", "for", "i", "in", "range", "(", "images", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "100", ")", ":", "\n", "                ", "if", "j", "in", "global_protos", ".", "keys", "(", ")", ":", "\n", "                    ", "dist", "=", "loss_mse", "(", "protos", "[", "i", ",", ":", "]", ",", "global_protos", "[", "j", "]", "[", "0", "]", ")", "\n", "outputs", "[", "i", ",", "j", "]", "=", "dist", "\n", "\n", "", "", "", "_", ",", "pred_labels", "=", "torch", ".", "topk", "(", "outputs", ",", "5", ")", "\n", "for", "i", "in", "range", "(", "pred_labels", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "correct", "+=", "torch", ".", "sum", "(", "torch", ".", "eq", "(", "pred_labels", "[", ":", ",", "i", "]", ",", "labels", ")", ")", ".", "item", "(", ")", "\n", "", "total", "+=", "len", "(", "labels", ")", "\n", "\n", "cnt", "+=", "1", "\n", "if", "cnt", "==", "20", ":", "\n", "            ", "break", "\n", "\n", "", "", "acc", "=", "correct", "/", "total", "\n", "\n", "return", "acc", "", "", ""]], "home.repos.pwc.inspect_result.yuetan031_fedproto.lib.pre_train.train": [[46, 119], ["models.Lenet", "models.Lenet.to", "torch.nn.CrossEntropyLoss", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "models.Lenet.train", "torch.nn.NLLLoss().to", "range", "print", "print", "models.Lenet.eval", "print", "torch.save", "torch.save", "torch.save", "models.Lenet.parameters", "time.time", "enumerate", "print", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.nn.NLLLoss", "torch.optim.Adam.zero_grad", "models.Lenet.zero_grad", "models.Lenet.", "nn.NLLLoss().to.", "criterion.backward", "torch.optim.Adam.step", "criterion.item", "models.Lenet.", "torch.max", "torch.max", "torch.max", "labels.size", "str", "models.Lenet.state_dict", "torch.optim.Adam.state_dict", "inputs.to", "labels.to", "print", "torch.max", "torch.max", "torch.max", "labels.size", "print", "images.to", "labels.to", "time.time"], "function", ["home.repos.pwc.inspect_result.yuetan031_fedproto.lib.pre_train.train"], ["def", "train", "(", "args", ",", "num_epoch", ",", "trainloader", ",", "testloader", ")", ":", "\n", "    ", "model", "=", "Lenet", "(", "args", "=", "args", ")", "\n", "model", ".", "to", "(", "args", ".", "device", ")", "\n", "loss", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "# optimizer = optim.SGD(self.parameters(),lr=0.01)", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "0.0001", ")", "\n", "model", ".", "train", "(", ")", "\n", "criterion", "=", "nn", ".", "NLLLoss", "(", ")", ".", "to", "(", "args", ".", "device", ")", "\n", "for", "epoch", "in", "range", "(", "num_epoch", ")", ":", "# loop over the dataset multiple times", "\n", "# for epoch in range(1):", "\n", "        ", "timestart", "=", "time", ".", "time", "(", ")", "\n", "\n", "running_loss", "=", "0.0", "\n", "total", "=", "0", "\n", "correct", "=", "0", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "trainloader", ",", "0", ")", ":", "\n", "# get the inputs", "\n", "            ", "inputs", ",", "labels", "=", "data", "\n", "inputs", ",", "labels", "=", "inputs", ".", "to", "(", "args", ".", "device", ")", ",", "labels", ".", "to", "(", "args", ".", "device", ")", "\n", "\n", "# zero the parameter gradients", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "# forward + backward + optimize", "\n", "\n", "model", ".", "zero_grad", "(", ")", "\n", "log_probs", ",", "protos", "=", "model", "(", "inputs", ")", "\n", "loss", "=", "criterion", "(", "log_probs", ",", "labels", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# print statistics", "\n", "running_loss", "+=", "loss", ".", "item", "(", ")", "\n", "# print(\"i \",i)", "\n", "# if i % 500 == 499:  # print every 500 mini-batches", "\n", "if", "i", "%", "100", "==", "0", ":", "\n", "                ", "print", "(", "'[%d, %5d] loss: %.4f'", "%", "\n", "(", "epoch", ",", "i", ",", "running_loss", "/", "500", ")", ")", "\n", "running_loss", "=", "0.0", "\n", "_", ",", "predicted", "=", "torch", ".", "max", "(", "log_probs", ".", "data", ",", "1", ")", "\n", "total", "+=", "labels", ".", "size", "(", "0", ")", "\n", "correct", "+=", "(", "predicted", "==", "labels", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "print", "(", "'Accuracy of the network on the %d tran images: %.3f %%'", "%", "(", "total", ",", "\n", "100.0", "*", "correct", "/", "total", ")", ")", "\n", "total", "=", "0", "\n", "correct", "=", "0", "\n", "\n", "", "", "print", "(", "'epoch %d cost %3f sec'", "%", "(", "epoch", ",", "time", ".", "time", "(", ")", "-", "timestart", ")", ")", "\n", "\n", "", "print", "(", "'Finished Training'", ")", "\n", "\n", "print", "(", "'Start Testing'", ")", "\n", "correct", "=", "0", "\n", "total", "=", "0", "\n", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "data", "in", "testloader", ":", "\n", "            ", "images", ",", "labels", "=", "data", "\n", "images", ",", "labels", "=", "images", ".", "to", "(", "args", ".", "device", ")", ",", "labels", ".", "to", "(", "args", ".", "device", ")", "\n", "log_probs", ",", "protos", "=", "model", "(", "images", ")", "\n", "_", ",", "predicted", "=", "torch", ".", "max", "(", "log_probs", ".", "data", ",", "1", ")", "\n", "total", "+=", "labels", ".", "size", "(", "0", ")", "\n", "correct", "+=", "(", "predicted", "==", "labels", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "", "", "print", "(", "'Accuracy of the network on the 10000 test images: %.3f %%'", "%", "(", "\n", "100.0", "*", "correct", "/", "total", ")", ")", "\n", "\n", "path", "=", "'../save/weights_'", "+", "str", "(", "num_epoch", ")", "+", "'ep.tar'", "\n", "torch", ".", "save", "(", "{", "'epoch'", ":", "epoch", ",", "\n", "'model_state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'optimizer_state_dict'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'loss'", ":", "loss", "\n", "}", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuetan031_fedproto.lib.pre_train.test": [[120, 153], ["print", "torchvision.resnet18", "torch.load_url", "local_model.state_dict", "model_zoo.load_url.keys", "local_model.load_state_dict", "print", "torch.no_grad", "torch.no_grad", "torch.no_grad", "local_model", "torch.max", "torch.max", "torch.max", "labels.size", "images.to", "labels.to"], "function", ["home.repos.pwc.inspect_result.yuetan031_fedproto.models.resnet.resnet18"], ["", "def", "test", "(", "args", ",", "num_epoch", ",", "testloader", ")", ":", "\n", "    ", "print", "(", "'Start Testing'", ")", "\n", "# model = Lenet(args=args)", "\n", "# model.to(args.device)", "\n", "\n", "resnet18", "=", "models", ".", "resnet18", "(", "pretrained", "=", "False", ",", "num_classes", "=", "args", ".", "num_classes", ")", "\n", "local_model", "=", "resnet18", "\n", "initial_weight", "=", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet18'", "]", ")", "\n", "initial_weight_1", "=", "local_model", ".", "state_dict", "(", ")", "\n", "for", "key", "in", "initial_weight", ".", "keys", "(", ")", ":", "\n", "        ", "if", "key", "[", "0", ":", "3", "]", "==", "'fc.'", ":", "\n", "            ", "initial_weight", "[", "key", "]", "=", "initial_weight_1", "[", "key", "]", "\n", "\n", "", "", "local_model", ".", "load_state_dict", "(", "initial_weight", ")", "\n", "\n", "# path = '../save/weights_'+str(num_epoch)+'ep.tar'", "\n", "#", "\n", "# checkpoint = torch.load(path, map_location=torch.device(args.device))", "\n", "# model.load_state_dict(checkpoint['model_state_dict'])", "\n", "# optimizer.load_state_dict(checkpoint['optimizer_state_dict'])", "\n", "correct", "=", "0", "\n", "total", "=", "0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "data", "in", "testloader", ":", "\n", "            ", "images", ",", "labels", "=", "data", "\n", "images", ",", "labels", "=", "images", ".", "to", "(", "args", ".", "device", ")", ",", "labels", ".", "to", "(", "args", ".", "device", ")", "\n", "log_probs", ",", "protos", "=", "local_model", "(", "images", ")", "\n", "_", ",", "predicted", "=", "torch", ".", "max", "(", "log_probs", ".", "data", ",", "1", ")", "\n", "total", "+=", "labels", ".", "size", "(", "0", ")", "\n", "correct", "+=", "(", "predicted", "==", "labels", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "", "", "print", "(", "'Accuracy of the network on the 10000 test images: %.3f %%'", "%", "(", "\n", "100.0", "*", "correct", "/", "total", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuetan031_fedproto.lib.visualize.visualize": [[9, 64], ["matplotlib.figure", "print", "numpy.hstack", "pandas.DataFrame", "range", "matplotlib.subplots_adjust", "matplotlib.savefig", "matplotlib.scatter"], "function", ["None"], ["def", "visualize", "(", "args", ",", "x", ",", "y", ")", ":", "\n", "    ", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "4", ",", "3", ")", ")", "\n", "print", "(", "\"Begin visualization ...\"", ")", "\n", "markers", "=", "[", "'.'", ",", "'o'", ",", "'v'", ",", "'^'", ",", "'s'", ",", "'p'", ",", "'*'", ",", "'<'", ",", "'>'", ",", "'D'", ",", "'d'", ",", "'h'", ",", "'H'", "]", "\n", "# colors = ['#C0C0C0', 'lightcoral', 'bisque', 'lemonchiffon', 'lightcyan', 'lavender', 'yellowgreen', 'lavenderblush', 'thistle', 'aquamarine']", "\n", "# colors_1 = ['#000000', '#FF0000', '#FF8C00', 'gold', 'lightseagreen', 'royalblue', 'sage', 'palevioletred', 'darkviolet', 'g']", "\n", "colors", "=", "[", "'#000000'", ",", "'peru'", ",", "'#FF8C00'", ",", "'gold'", ",", "'lightseagreen'", ",", "'royalblue'", ",", "'darkseagreen'", ",", "'violet'", ",", "'palevioletred'", ",", "'g'", "]", "\n", "\n", "Label_Com", "=", "[", "'0'", ",", "'1'", ",", "'2'", ",", "'3'", ",", "'4'", ",", "'5'", ",", "'6'", ",", "'7'", ",", "'8'", ",", "'9'", "]", "\n", "font1", "=", "{", "'family'", ":", "'Times New Roman'", ",", "\n", "'weight'", ":", "'bold'", ",", "\n", "'size'", ":", "14", "\n", "}", "\n", "\n", "# S_data = np.hstack((x, y, d))", "\n", "S_data", "=", "np", ".", "hstack", "(", "(", "x", ",", "y", ")", ")", "\n", "# S_data = pd.DataFrame({'x': S_data[:, 0], 'y': S_data[:, 1], 'label': S_data[:, 2], 'device': S_data[:,3]})", "\n", "S_data", "=", "pd", ".", "DataFrame", "(", "{", "'x'", ":", "S_data", "[", ":", ",", "0", "]", ",", "'y'", ":", "S_data", "[", ":", ",", "1", "]", ",", "'label'", ":", "S_data", "[", ":", ",", "2", "]", "}", ")", "\n", "# for class_index in range(args.num_classes):", "\n", "#     for device_index in range(args.num_users):", "\n", "#         X = S_data.loc[(S_data['label'] == class_index) & (S_data['device'] == device_index)]['x']", "\n", "#         Y = S_data.loc[(S_data['label'] == class_index) & (S_data['device'] == device_index)]['y']", "\n", "#         # plt.scatter(X, Y, cmap='brg', s=100, marker='.', c='', edgecolors=colors[index], alpha=0.65)", "\n", "#         # plt.scatter(X, Y, marker='.', color=colors[class_index], alpha=0.6)", "\n", "#         plt.scatter(X, Y, marker=markers[device_index], c=colors[class_index])", "\n", "\n", "for", "class_index", "in", "range", "(", "args", ".", "num_classes", ")", ":", "\n", "        ", "X", "=", "S_data", ".", "loc", "[", "S_data", "[", "'label'", "]", "==", "class_index", "]", "[", "'x'", "]", "\n", "Y", "=", "S_data", ".", "loc", "[", "S_data", "[", "'label'", "]", "==", "class_index", "]", "[", "'y'", "]", "\n", "# plt.scatter(X, Y, cmap='brg', s=100, marker='.', c='', edgecolors=colors[index], alpha=0.65)", "\n", "# alpha set: fedavg-0.1, fedsem-0.08, fedper-0.03, hetfel-0.03", "\n", "plt", ".", "scatter", "(", "X", ",", "Y", ",", "marker", "=", "'.'", ",", "color", "=", "colors", "[", "class_index", "]", ",", "alpha", "=", "0.08", ")", "\n", "\n", "\n", "# for class_index in range(args.num_classes):", "\n", "#     # global prototype", "\n", "#     X = S_data.loc[(S_data['label'] == class_index)]['x']", "\n", "#     Y = S_data.loc[(S_data['label'] == class_index)]['y']", "\n", "#     x_avg = np.average(X)", "\n", "#     y_avg = np.average(Y)", "\n", "#     plt.scatter(x_avg, y_avg, marker='o', c=colors[class_index], s=50)", "\n", "\n", "\n", "# plt.xticks([])  # \u53bb\u6389\u6a2a\u5750\u6807\u503c", "\n", "# plt.yticks([])  # \u53bb\u6389\u7eb5\u5750\u6807\u503c", "\n", "\n", "# plt.title(args.alg, fontsize=14, fontweight='normal', pad=20)", "\n", "", "plt", ".", "subplots_adjust", "(", "left", "=", "None", ",", "bottom", "=", "0.15", ",", "right", "=", "None", ",", "top", "=", "None", ",", "wspace", "=", "0.1", ",", "hspace", "=", "0.15", ")", "\n", "# plt.legend(scatterpoints=1, labels=Label_Com, loc='best', labelspacing=0.4, columnspacing=0.4, markerscale=2,", "\n", "#            bbox_to_anchor=(0.9, 0), ncol=12, prop=font1, handletextpad=0.1)", "\n", "# plt.legend(scatterpoints=1, labels=Label_Com, loc='best', labelspacing=0.4, columnspacing=0.4,", "\n", "#            bbox_to_anchor=(0.9, 0), ncol=12, prop=font1, handletextpad=0.1)", "\n", "\n", "# fig.show()", "\n", "plt", ".", "savefig", "(", "\"./protos_\"", "+", "args", ".", "alg", "+", "\".pdf\"", ",", "format", "=", "'pdf'", ",", "dpi", "=", "600", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuetan031_fedproto.lib.femnist.FEMNIST.train_labels": [[48, 52], ["warnings.warn"], "methods", ["None"], ["@", "property", "\n", "def", "train_labels", "(", "self", ")", ":", "\n", "        ", "warnings", ".", "warn", "(", "\"train_labels has been renamed targets\"", ")", "\n", "return", "self", ".", "targets", "\n", "\n"]], "home.repos.pwc.inspect_result.yuetan031_fedproto.lib.femnist.FEMNIST.test_labels": [[53, 57], ["warnings.warn"], "methods", ["None"], ["", "@", "property", "\n", "def", "test_labels", "(", "self", ")", ":", "\n", "        ", "warnings", ".", "warn", "(", "\"test_labels has been renamed targets\"", ")", "\n", "return", "self", ".", "targets", "\n", "\n"]], "home.repos.pwc.inspect_result.yuetan031_fedproto.lib.femnist.FEMNIST.train_data": [[58, 62], ["warnings.warn"], "methods", ["None"], ["", "@", "property", "\n", "def", "train_data", "(", "self", ")", ":", "\n", "        ", "warnings", ".", "warn", "(", "\"train_data has been renamed data\"", ")", "\n", "return", "self", ".", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.yuetan031_fedproto.lib.femnist.FEMNIST.test_data": [[63, 67], ["warnings.warn"], "methods", ["None"], ["", "@", "property", "\n", "def", "test_data", "(", "self", ")", ":", "\n", "        ", "warnings", ".", "warn", "(", "\"test_data has been renamed data\"", ")", "\n", "return", "self", ".", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.yuetan031_fedproto.lib.femnist.FEMNIST.__init__": [[68, 82], ["os.path.expanduser", "femnist.FEMNIST.generate_ds", "femnist.FEMNIST.generate_ds_test"], "methods", ["home.repos.pwc.inspect_result.yuetan031_fedproto.lib.femnist.FEMNIST.generate_ds", "home.repos.pwc.inspect_result.yuetan031_fedproto.lib.femnist.FEMNIST.generate_ds_test"], ["", "def", "__init__", "(", "self", ",", "args", ",", "root", ",", "train", "=", "True", ",", "transform", "=", "None", ",", "target_transform", "=", "None", ",", "download", "=", "False", ")", ":", "\n", "        ", "self", ".", "root", "=", "os", ".", "path", ".", "expanduser", "(", "root", ")", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "self", ".", "train", "=", "train", "# training set or test set", "\n", "\n", "# s_list = random.sample(range(0, 7), num_users)", "\n", "if", "self", ".", "train", ":", "\n", "# data_file = self.training_file", "\n", "            ", "self", ".", "data", ",", "self", ".", "targets", "=", "self", ".", "generate_ds", "(", "args", ",", "self", ".", "root", ")", "\n", "# self.loader = self.generate_ds(args, self.root)", "\n", "", "else", ":", "\n", "# data_file = self.test_file", "\n", "            ", "self", ".", "data", ",", "self", ".", "targets", "=", "self", ".", "generate_ds_test", "(", "args", ",", "self", ".", "root", ")", "\n", "# self.loader = self.generate_ds_test(args, self.root)", "\n"]], "home.repos.pwc.inspect_result.yuetan031_fedproto.lib.femnist.FEMNIST.__getitem__": [[86, 109], ["PIL.Image.open().convert", "int", "femnist.FEMNIST.transform", "femnist.FEMNIST.target_transform", "PIL.Image.open"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            index (int): Index\n\n        Returns:\n            tuple: (image, target) where target is index of the target class.\n        \"\"\"", "\n", "img", ",", "target", "=", "self", ".", "data", "[", "index", "]", ",", "int", "(", "self", ".", "targets", "[", "index", "]", ")", "\n", "\n", "# doing this so that it is consistent with all other datasets", "\n", "# to return a PIL Image", "\n", "img", "=", "Image", ".", "open", "(", "img", ")", ".", "convert", "(", "'L'", ")", "\n", "# loader = transforms.Compose([transforms.ToTensor()])", "\n", "# img = loader(img).unsqueeze(0)[0, 0, :, :]", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "target", "=", "self", ".", "target_transform", "(", "target", ")", "\n", "\n", "", "return", "img", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.yuetan031_fedproto.lib.femnist.FEMNIST.__len__": [[110, 112], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuetan031_fedproto.lib.femnist.FEMNIST.raw_folder": [[113, 116], ["os.path.join"], "methods", ["None"], ["", "@", "property", "\n", "def", "raw_folder", "(", "self", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "__class__", ".", "__name__", ",", "'raw'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuetan031_fedproto.lib.femnist.FEMNIST.processed_folder": [[117, 120], ["os.path.join"], "methods", ["None"], ["", "@", "property", "\n", "def", "processed_folder", "(", "self", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'data'", ",", "'processed'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuetan031_fedproto.lib.femnist.FEMNIST.class_to_idx": [[121, 124], ["enumerate"], "methods", ["None"], ["", "@", "property", "\n", "def", "class_to_idx", "(", "self", ")", ":", "\n", "        ", "return", "{", "_class", ":", "i", "for", "i", ",", "_class", "in", "enumerate", "(", "self", ".", "classes", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.yuetan031_fedproto.lib.femnist.FEMNIST.generate_ds": [[125, 143], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "os.listdir", "range", "targets.reshape.reshape.reshape", "os.path.join", "range", "os.path.join", "torch.append", "torch.append", "str"], "methods", ["None"], ["", "def", "generate_ds", "(", "self", ",", "args", ",", "root", ")", ":", "\n", "# read 100 images per class per style", "\n", "        ", "num_class", "=", "args", ".", "num_classes", "\n", "num_img", "=", "args", ".", "train_shots_max", "*", "args", ".", "num_users", "\n", "\n", "data", "=", "[", "]", "\n", "targets", "=", "torch", ".", "zeros", "(", "[", "num_class", "*", "num_img", "]", ")", "\n", "files", "=", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "root", ",", "'data'", ",", "'raw_data'", ",", "'by_class'", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "num_class", ")", ":", "\n", "            ", "for", "k", "in", "range", "(", "num_img", ")", ":", "\n", "                ", "img", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'data'", ",", "'raw_data'", ",", "'by_class'", ",", "files", "[", "i", "]", ",", "'train_'", "+", "files", "[", "i", "]", ",", "'train_'", "+", "files", "[", "i", "]", "+", "'_'", "+", "str", "(", "\"%05d\"", "%", "k", ")", "+", "'.png'", ")", "\n", "data", ".", "append", "(", "img", ")", "\n", "targets", "[", "i", "*", "num_img", "+", "k", "]", "=", "i", "\n", "\n", "", "", "targets", "=", "targets", ".", "reshape", "(", "[", "num_class", "*", "num_img", "]", ")", "\n", "\n", "return", "data", ",", "targets", "\n", "\n"]], "home.repos.pwc.inspect_result.yuetan031_fedproto.lib.femnist.FEMNIST.generate_ds_test": [[144, 165], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "os.listdir", "range", "targets.reshape.reshape.reshape", "os.path.join", "range", "os.path.join", "torch.append", "torch.append", "str"], "methods", ["None"], ["", "def", "generate_ds_test", "(", "self", ",", "args", ",", "root", ")", ":", "\n", "# read 100 images per classes per style", "\n", "\n", "        ", "num_class", "=", "args", ".", "num_classes", "\n", "# num_style = args.num_styles", "\n", "num_img", "=", "args", ".", "test_shots", "*", "args", ".", "num_users", "\n", "\n", "data", "=", "[", "]", "\n", "# targets = torch.zeros([num_class * num_style * num_img])", "\n", "targets", "=", "torch", ".", "zeros", "(", "[", "num_class", "*", "num_img", "]", ")", "\n", "files", "=", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "root", ",", "'data'", ",", "'raw_data'", ",", "'by_class'", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "num_class", ")", ":", "\n", "            ", "for", "k", "in", "range", "(", "num_img", ")", ":", "\n", "                ", "img", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'data'", ",", "'raw_data'", ",", "'by_class'", ",", "files", "[", "i", "]", ",", "'hsf_0'", ",", "'hsf_0'", "+", "'_00'", "+", "str", "(", "\"%03d\"", "%", "(", "k", ")", ")", "+", "'.png'", ")", "\n", "data", ".", "append", "(", "img", ")", "\n", "targets", "[", "i", "*", "num_img", "+", "k", "]", "=", "i", "\n", "\n", "", "", "targets", "=", "targets", ".", "reshape", "(", "[", "num_class", "*", "num_img", "]", ")", "\n", "\n", "return", "data", ",", "targets", "", "", "", ""]], "home.repos.pwc.inspect_result.yuetan031_fedproto.lib.femnist.load_image_path": [[9, 12], ["PIL.Image.open().convert", "PIL.Image.open"], "function", ["None"], ["def", "load_image_path", "(", "key", ",", "out_field", ",", "d", ")", ":", "\n", "    ", "out_field", "=", "Image", ".", "open", "(", "d", ")", ".", "convert", "(", "'L'", ")", "\n", "return", "out_field", "\n", "\n"]], "home.repos.pwc.inspect_result.yuetan031_fedproto.lib.femnist.convert_tensor": [[13, 18], ["torch.from_numpy().transpose().contiguous().view", "torch.from_numpy().transpose().contiguous().view", "torch.from_numpy().transpose().contiguous", "torch.from_numpy().transpose().contiguous", "torch.from_numpy().transpose", "torch.from_numpy().transpose", "torch.from_numpy", "torch.from_numpy", "numpy.array"], "function", ["None"], ["", "def", "convert_tensor", "(", "key", ",", "d", ")", ":", "\n", "# d[key] = 1.0 - torch.from_numpy(np.array(d[key], np.float32, copy=False)).transpose(0, 1).contiguous().view(1, d[key].size[0], d[key].size[1])", "\n", "    ", "c", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "d", "[", "key", "]", ",", "np", ".", "float32", ",", "copy", "=", "False", ")", ")", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", ".", "view", "(", "1", ",", "d", "[", "key", "]", ".", "size", "[", "0", "]", ",", "d", "[", "key", "]", ".", "size", "[", "1", "]", ")", "\n", "d", "=", "(", "255.0", "-", "c", ")", "/", "255.0", "\n", "return", "d", "\n", "\n"]], "home.repos.pwc.inspect_result.yuetan031_fedproto.lib.femnist.scale_image": [[19, 22], ["d[].resize"], "function", ["None"], ["", "def", "scale_image", "(", "key", ",", "height", ",", "width", ",", "d", ")", ":", "\n", "    ", "d", "[", "key", "]", "=", "d", "[", "key", "]", ".", "resize", "(", "(", "height", ",", "width", ")", ")", "\n", "return", "d", "\n", "\n"]], "home.repos.pwc.inspect_result.yuetan031_fedproto.lib.femnist.convert_dict": [[23, 25], ["None"], "function", ["None"], ["", "def", "convert_dict", "(", "k", ",", "v", ")", ":", "\n", "    ", "return", "{", "k", ":", "v", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.yuetan031_fedproto.lib.utils.get_dataset": [[31, 127], ["torchvision.transforms.Compose", "torchvision.datasets.MNIST", "torchvision.datasets.MNIST", "sampling.mnist_iid", "torchvision.transforms.Compose", "femnist.FEMNIST", "femnist.FEMNIST", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "sampling.mnist_noniid_unequal", "sampling.mnist_noniid", "sampling.mnist_noniid_lt", "sampling.femnist_iid", "torchvision.datasets.CIFAR10", "torchvision.datasets.CIFAR10", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "sampling.femnist_noniid_unequal", "sampling.femnist_noniid", "sampling.femnist_noniid_lt", "sampling.cifar_iid", "torchvision.datasets.CIFAR100", "torchvision.datasets.CIFAR100", "NotImplementedError", "sampling.cifar10_noniid", "sampling.cifar10_noniid_lt", "sampling.cifar_iid", "NotImplementedError", "sampling.cifar100_noniid", "sampling.cifar100_noniid_lt"], "function", ["home.repos.pwc.inspect_result.yuetan031_fedproto.lib.sampling.mnist_iid", "home.repos.pwc.inspect_result.yuetan031_fedproto.lib.sampling.mnist_noniid_unequal", "home.repos.pwc.inspect_result.yuetan031_fedproto.lib.sampling.mnist_noniid", "home.repos.pwc.inspect_result.yuetan031_fedproto.lib.sampling.mnist_noniid_lt", "home.repos.pwc.inspect_result.yuetan031_fedproto.lib.sampling.femnist_iid", "home.repos.pwc.inspect_result.yuetan031_fedproto.lib.sampling.femnist_noniid_unequal", "home.repos.pwc.inspect_result.yuetan031_fedproto.lib.sampling.femnist_noniid", "home.repos.pwc.inspect_result.yuetan031_fedproto.lib.sampling.femnist_noniid_lt", "home.repos.pwc.inspect_result.yuetan031_fedproto.lib.sampling.cifar_iid", "home.repos.pwc.inspect_result.yuetan031_fedproto.lib.sampling.cifar10_noniid", "home.repos.pwc.inspect_result.yuetan031_fedproto.lib.sampling.cifar10_noniid_lt", "home.repos.pwc.inspect_result.yuetan031_fedproto.lib.sampling.cifar_iid", "home.repos.pwc.inspect_result.yuetan031_fedproto.lib.sampling.cifar100_noniid", "home.repos.pwc.inspect_result.yuetan031_fedproto.lib.sampling.cifar100_noniid_lt"], ["def", "get_dataset", "(", "args", ",", "n_list", ",", "k_list", ")", ":", "\n", "    ", "\"\"\" Returns train and test datasets and a user group which is a dict where\n    the keys are the user index and the values are the corresponding data for\n    each of those users.\n    \"\"\"", "\n", "data_dir", "=", "args", ".", "data_dir", "+", "args", ".", "dataset", "\n", "if", "args", ".", "dataset", "==", "'mnist'", ":", "\n", "        ", "apply_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.1307", ",", ")", ",", "(", "0.3081", ",", ")", ")", "]", ")", "\n", "\n", "train_dataset", "=", "datasets", ".", "MNIST", "(", "data_dir", ",", "train", "=", "True", ",", "download", "=", "True", ",", "\n", "transform", "=", "apply_transform", ")", "\n", "\n", "test_dataset", "=", "datasets", ".", "MNIST", "(", "data_dir", ",", "train", "=", "False", ",", "download", "=", "True", ",", "\n", "transform", "=", "apply_transform", ")", "\n", "\n", "# sample training data amongst users", "\n", "if", "args", ".", "iid", ":", "\n", "# Sample IID user data from Mnist", "\n", "            ", "user_groups", "=", "mnist_iid", "(", "train_dataset", ",", "args", ".", "num_users", ")", "\n", "", "else", ":", "\n", "# Sample Non-IID user data from Mnist", "\n", "            ", "if", "args", ".", "unequal", ":", "\n", "# Chose uneuqal splits for every user", "\n", "                ", "user_groups", "=", "mnist_noniid_unequal", "(", "args", ",", "train_dataset", ",", "args", ".", "num_users", ")", "\n", "", "else", ":", "\n", "# Chose euqal splits for every user", "\n", "                ", "user_groups", ",", "classes_list", "=", "mnist_noniid", "(", "args", ",", "train_dataset", ",", "args", ".", "num_users", ",", "n_list", ",", "k_list", ")", "\n", "user_groups_lt", "=", "mnist_noniid_lt", "(", "args", ",", "test_dataset", ",", "args", ".", "num_users", ",", "n_list", ",", "k_list", ",", "classes_list", ")", "\n", "classes_list_gt", "=", "classes_list", "\n", "\n", "", "", "", "elif", "args", ".", "dataset", "==", "'femnist'", ":", "\n", "        ", "apply_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.1307", ",", ")", ",", "(", "0.3081", ",", ")", ")", "]", ")", "\n", "\n", "train_dataset", "=", "femnist", ".", "FEMNIST", "(", "args", ",", "data_dir", ",", "train", "=", "True", ",", "download", "=", "True", ",", "\n", "transform", "=", "apply_transform", ")", "\n", "test_dataset", "=", "femnist", ".", "FEMNIST", "(", "args", ",", "data_dir", ",", "train", "=", "False", ",", "download", "=", "True", ",", "\n", "transform", "=", "apply_transform", ")", "\n", "\n", "# sample training data amongst users", "\n", "if", "args", ".", "iid", ":", "\n", "# Sample IID user data from Mnist", "\n", "            ", "user_groups", "=", "femnist_iid", "(", "train_dataset", ",", "args", ".", "num_users", ")", "\n", "# print(\"TBD\")", "\n", "", "else", ":", "\n", "# Sample Non-IID user data from Mnist", "\n", "            ", "if", "args", ".", "unequal", ":", "\n", "# Chose uneuqal splits for every user", "\n", "# user_groups = mnist_noniid_unequal(train_dataset, args.num_users)", "\n", "                ", "user_groups", "=", "femnist_noniid_unequal", "(", "args", ",", "train_dataset", ",", "args", ".", "num_users", ")", "\n", "# print(\"TBD\")", "\n", "", "else", ":", "\n", "# Chose euqal splits for every user", "\n", "                ", "user_groups", ",", "classes_list", ",", "classes_list_gt", "=", "femnist_noniid", "(", "args", ",", "args", ".", "num_users", ",", "n_list", ",", "k_list", ")", "\n", "user_groups_lt", "=", "femnist_noniid_lt", "(", "args", ",", "args", ".", "num_users", ",", "classes_list", ")", "\n", "\n", "", "", "", "elif", "args", ".", "dataset", "==", "'cifar10'", ":", "\n", "        ", "train_dataset", "=", "datasets", ".", "CIFAR10", "(", "data_dir", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "trans_cifar10_train", ")", "\n", "test_dataset", "=", "datasets", ".", "CIFAR10", "(", "data_dir", ",", "train", "=", "False", ",", "download", "=", "True", ",", "transform", "=", "trans_cifar10_val", ")", "\n", "\n", "# sample training data amongst users", "\n", "if", "args", ".", "iid", ":", "\n", "# Sample IID user data from Mnist", "\n", "            ", "user_groups", "=", "cifar_iid", "(", "train_dataset", ",", "args", ".", "num_users", ")", "\n", "", "else", ":", "\n", "# Sample Non-IID user data from Mnist", "\n", "            ", "if", "args", ".", "unequal", ":", "\n", "# Chose uneuqal splits for every user", "\n", "                ", "raise", "NotImplementedError", "(", ")", "\n", "", "else", ":", "\n", "# Chose euqal splits for every user", "\n", "                ", "user_groups", ",", "classes_list", ",", "classes_list_gt", "=", "cifar10_noniid", "(", "args", ",", "train_dataset", ",", "args", ".", "num_users", ",", "n_list", ",", "k_list", ")", "\n", "user_groups_lt", "=", "cifar10_noniid_lt", "(", "args", ",", "test_dataset", ",", "args", ".", "num_users", ",", "n_list", ",", "k_list", ",", "classes_list", ")", "\n", "\n", "", "", "", "elif", "args", ".", "dataset", "==", "'cifar100'", ":", "\n", "        ", "train_dataset", "=", "datasets", ".", "CIFAR100", "(", "data_dir", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "trans_cifar100_train", ")", "\n", "test_dataset", "=", "datasets", ".", "CIFAR100", "(", "data_dir", ",", "train", "=", "False", ",", "download", "=", "True", ",", "transform", "=", "trans_cifar100_val", ")", "\n", "\n", "# sample training data amongst users", "\n", "if", "args", ".", "iid", ":", "\n", "# Sample IID user data from Mnist", "\n", "            ", "user_groups", "=", "cifar_iid", "(", "train_dataset", ",", "args", ".", "num_users", ")", "\n", "", "else", ":", "\n", "# Sample Non-IID user data from Mnist", "\n", "            ", "if", "args", ".", "unequal", ":", "\n", "# Chose uneuqal splits for every user", "\n", "                ", "raise", "NotImplementedError", "(", ")", "\n", "", "else", ":", "\n", "# Chose euqal splits for every user", "\n", "                ", "user_groups", ",", "classes_list", "=", "cifar100_noniid", "(", "args", ",", "train_dataset", ",", "args", ".", "num_users", ",", "n_list", ",", "k_list", ")", "\n", "user_groups_lt", "=", "cifar100_noniid_lt", "(", "test_dataset", ",", "args", ".", "num_users", ",", "classes_list", ")", "\n", "\n", "", "", "", "return", "train_dataset", ",", "test_dataset", ",", "user_groups", ",", "user_groups_lt", ",", "classes_list", ",", "classes_list_gt", "\n", "\n"]], "home.repos.pwc.inspect_result.yuetan031_fedproto.lib.utils.average_weights": [[128, 142], ["copy.deepcopy", "w[].keys", "range", "torch.div", "range", "len", "len", "len"], "function", ["None"], ["", "def", "average_weights", "(", "w", ")", ":", "\n", "    ", "\"\"\"\n    Returns the average of the weights.\n    \"\"\"", "\n", "w_avg", "=", "copy", ".", "deepcopy", "(", "w", ")", "\n", "for", "key", "in", "w", "[", "0", "]", ".", "keys", "(", ")", ":", "\n", "        ", "if", "key", "[", "0", ":", "4", "]", "!=", "'....'", ":", "\n", "            ", "for", "i", "in", "range", "(", "1", ",", "len", "(", "w", ")", ")", ":", "\n", "                ", "w_avg", "[", "0", "]", "[", "key", "]", "+=", "w", "[", "i", "]", "[", "key", "]", "\n", "# w_avg[0][key] = torch.true_divide(w_avg[0][key], len(w))", "\n", "", "w_avg", "[", "0", "]", "[", "key", "]", "=", "torch", ".", "div", "(", "w_avg", "[", "0", "]", "[", "key", "]", ",", "len", "(", "w", ")", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "w", ")", ")", ":", "\n", "                ", "w_avg", "[", "i", "]", "[", "key", "]", "=", "w_avg", "[", "0", "]", "[", "key", "]", "\n", "", "", "", "return", "w_avg", "\n", "\n"]], "home.repos.pwc.inspect_result.yuetan031_fedproto.lib.utils.average_weights_sem": [[143, 174], ["range", "copy.deepcopy", "model_dict.keys", "copy.deepcopy", "copy.deepcopy.keys", "numpy.mean", "model_dict[].append", "model_dict[].append", "range", "torch.true_divide", "ww[].keys", "len", "len"], "function", ["None"], ["", "def", "average_weights_sem", "(", "w", ",", "n_list", ")", ":", "\n", "    ", "\"\"\"\n    Returns the average of the weights.\n    \"\"\"", "\n", "k", "=", "2", "\n", "model_dict", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "k", ")", ":", "\n", "        ", "model_dict", "[", "i", "]", "=", "[", "]", "\n", "\n", "", "idx", "=", "0", "\n", "for", "i", "in", "n_list", ":", "\n", "        ", "if", "i", "<", "np", ".", "mean", "(", "n_list", ")", ":", "\n", "            ", "model_dict", "[", "0", "]", ".", "append", "(", "idx", ")", "\n", "", "else", ":", "\n", "            ", "model_dict", "[", "1", "]", ".", "append", "(", "idx", ")", "\n", "", "idx", "+=", "1", "\n", "\n", "", "ww", "=", "copy", ".", "deepcopy", "(", "w", ")", "\n", "for", "cluster_id", "in", "model_dict", ".", "keys", "(", ")", ":", "\n", "        ", "model_id_list", "=", "model_dict", "[", "cluster_id", "]", "\n", "w_avg", "=", "copy", ".", "deepcopy", "(", "w", "[", "model_id_list", "[", "0", "]", "]", ")", "\n", "for", "key", "in", "w_avg", ".", "keys", "(", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "1", ",", "len", "(", "model_id_list", ")", ")", ":", "\n", "                ", "w_avg", "[", "key", "]", "+=", "w", "[", "model_id_list", "[", "j", "]", "]", "[", "key", "]", "\n", "", "w_avg", "[", "key", "]", "=", "torch", ".", "true_divide", "(", "w_avg", "[", "key", "]", ",", "len", "(", "model_id_list", ")", ")", "\n", "# w_avg[key] = torch.div(w_avg[key], len(model_id_list))", "\n", "", "for", "model_id", "in", "model_id_list", ":", "\n", "            ", "for", "key", "in", "ww", "[", "model_id", "]", ".", "keys", "(", ")", ":", "\n", "                ", "ww", "[", "model_id", "]", "[", "key", "]", "=", "w_avg", "[", "key", "]", "\n", "\n", "", "", "", "return", "ww", "\n", "\n"]], "home.repos.pwc.inspect_result.yuetan031_fedproto.lib.utils.average_weights_per": [[175, 189], ["copy.deepcopy", "w[].keys", "range", "torch.true_divide", "range", "len", "len", "len"], "function", ["None"], ["", "def", "average_weights_per", "(", "w", ")", ":", "\n", "    ", "\"\"\"\n    Returns the average of the weights.\n    \"\"\"", "\n", "w_avg", "=", "copy", ".", "deepcopy", "(", "w", ")", "\n", "for", "key", "in", "w", "[", "0", "]", ".", "keys", "(", ")", ":", "\n", "        ", "if", "key", "[", "0", ":", "2", "]", "!=", "'fc'", ":", "\n", "            ", "for", "i", "in", "range", "(", "1", ",", "len", "(", "w", ")", ")", ":", "\n", "                ", "w_avg", "[", "0", "]", "[", "key", "]", "+=", "w", "[", "i", "]", "[", "key", "]", "\n", "", "w_avg", "[", "0", "]", "[", "key", "]", "=", "torch", ".", "true_divide", "(", "w_avg", "[", "0", "]", "[", "key", "]", ",", "len", "(", "w", ")", ")", "\n", "# w_avg[0][key] = torch.div(w_avg[0][key], len(w))", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "w", ")", ")", ":", "\n", "                ", "w_avg", "[", "i", "]", "[", "key", "]", "=", "w_avg", "[", "0", "]", "[", "key", "]", "\n", "", "", "", "return", "w_avg", "\n", "\n"]], "home.repos.pwc.inspect_result.yuetan031_fedproto.lib.utils.average_weights_het": [[190, 204], ["copy.deepcopy", "w[].keys", "range", "torch.div", "range", "len", "len", "len"], "function", ["None"], ["", "def", "average_weights_het", "(", "w", ")", ":", "\n", "    ", "\"\"\"\n    Returns the average of the weights.\n    \"\"\"", "\n", "w_avg", "=", "copy", ".", "deepcopy", "(", "w", ")", "\n", "for", "key", "in", "w", "[", "0", "]", ".", "keys", "(", ")", ":", "\n", "        ", "if", "key", "[", "0", ":", "4", "]", "!=", "'fc2.'", ":", "\n", "            ", "for", "i", "in", "range", "(", "1", ",", "len", "(", "w", ")", ")", ":", "\n", "                ", "w_avg", "[", "0", "]", "[", "key", "]", "+=", "w", "[", "i", "]", "[", "key", "]", "\n", "# w_avg[0][key] = torch.true_divide(w_avg[0][key], len(w))", "\n", "", "w_avg", "[", "0", "]", "[", "key", "]", "=", "torch", ".", "div", "(", "w_avg", "[", "0", "]", "[", "key", "]", ",", "len", "(", "w", ")", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "w", ")", ")", ":", "\n", "                ", "w_avg", "[", "i", "]", "[", "key", "]", "=", "w_avg", "[", "0", "]", "[", "key", "]", "\n", "", "", "", "return", "w_avg", "\n", "\n"]], "home.repos.pwc.inspect_result.yuetan031_fedproto.lib.utils.agg_func": [[205, 220], ["protos.items", "len", "len"], "function", ["None"], ["", "def", "agg_func", "(", "protos", ")", ":", "\n", "    ", "\"\"\"\n    Returns the average of the weights.\n    \"\"\"", "\n", "\n", "for", "[", "label", ",", "proto_list", "]", "in", "protos", ".", "items", "(", ")", ":", "\n", "        ", "if", "len", "(", "proto_list", ")", ">", "1", ":", "\n", "            ", "proto", "=", "0", "*", "proto_list", "[", "0", "]", ".", "data", "\n", "for", "i", "in", "proto_list", ":", "\n", "                ", "proto", "+=", "i", ".", "data", "\n", "", "protos", "[", "label", "]", "=", "proto", "/", "len", "(", "proto_list", ")", "\n", "", "else", ":", "\n", "            ", "protos", "[", "label", "]", "=", "proto_list", "[", "0", "]", "\n", "\n", "", "", "return", "protos", "\n", "\n"]], "home.repos.pwc.inspect_result.yuetan031_fedproto.lib.utils.proto_aggregation": [[221, 241], ["dict", "dict.items", "local_protos.keys", "len", "agg_protos_label[].append", "len"], "function", ["None"], ["", "def", "proto_aggregation", "(", "local_protos_list", ")", ":", "\n", "    ", "agg_protos_label", "=", "dict", "(", ")", "\n", "for", "idx", "in", "local_protos_list", ":", "\n", "        ", "local_protos", "=", "local_protos_list", "[", "idx", "]", "\n", "for", "label", "in", "local_protos", ".", "keys", "(", ")", ":", "\n", "            ", "if", "label", "in", "agg_protos_label", ":", "\n", "                ", "agg_protos_label", "[", "label", "]", ".", "append", "(", "local_protos", "[", "label", "]", ")", "\n", "", "else", ":", "\n", "                ", "agg_protos_label", "[", "label", "]", "=", "[", "local_protos", "[", "label", "]", "]", "\n", "\n", "", "", "", "for", "[", "label", ",", "proto_list", "]", "in", "agg_protos_label", ".", "items", "(", ")", ":", "\n", "        ", "if", "len", "(", "proto_list", ")", ">", "1", ":", "\n", "            ", "proto", "=", "0", "*", "proto_list", "[", "0", "]", ".", "data", "\n", "for", "i", "in", "proto_list", ":", "\n", "                ", "proto", "+=", "i", ".", "data", "\n", "", "agg_protos_label", "[", "label", "]", "=", "[", "proto", "/", "len", "(", "proto_list", ")", "]", "\n", "", "else", ":", "\n", "            ", "agg_protos_label", "[", "label", "]", "=", "[", "proto_list", "[", "0", "]", ".", "data", "]", "\n", "\n", "", "", "return", "agg_protos_label", "\n", "\n"]], "home.repos.pwc.inspect_result.yuetan031_fedproto.lib.utils.exp_details": [[243, 259], ["print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print"], "function", ["None"], ["", "def", "exp_details", "(", "args", ")", ":", "\n", "    ", "print", "(", "'\\nExperimental details:'", ")", "\n", "print", "(", "f'    Model     : {args.model}'", ")", "\n", "print", "(", "f'    Optimizer : {args.optimizer}'", ")", "\n", "print", "(", "f'    Learning  : {args.lr}'", ")", "\n", "print", "(", "f'    Global Rounds   : {args.rounds}\\n'", ")", "\n", "\n", "print", "(", "'    Federated parameters:'", ")", "\n", "if", "args", ".", "iid", ":", "\n", "        ", "print", "(", "'    IID'", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'    Non-IID'", ")", "\n", "", "print", "(", "f'    Fraction of users  : {args.frac}'", ")", "\n", "print", "(", "f'    Local Batch size   : {args.local_bs}'", ")", "\n", "print", "(", "f'    Local Epochs       : {args.train_ep}\\n'", ")", "\n", "return", "", "", ""]], "home.repos.pwc.inspect_result.yuetan031_fedproto.lib.sampling.mnist_iid": [[12, 26], ["int", "range", "set", "list", "len", "numpy.random.choice", "range", "set", "len"], "function", ["None"], ["def", "mnist_iid", "(", "dataset", ",", "num_users", ")", ":", "\n", "    ", "\"\"\"\n    Sample I.I.D. client data from MNIST dataset\n    :param dataset:\n    :param num_users:\n    :return: dict of image index\n    \"\"\"", "\n", "num_items", "=", "int", "(", "len", "(", "dataset", ")", "/", "num_users", ")", "\n", "dict_users", ",", "all_idxs", "=", "{", "}", ",", "[", "i", "for", "i", "in", "range", "(", "len", "(", "dataset", ")", ")", "]", "\n", "for", "i", "in", "range", "(", "num_users", ")", ":", "\n", "        ", "dict_users", "[", "i", "]", "=", "set", "(", "np", ".", "random", ".", "choice", "(", "all_idxs", ",", "num_items", ",", "\n", "replace", "=", "False", ")", ")", "\n", "all_idxs", "=", "list", "(", "set", "(", "all_idxs", ")", "-", "dict_users", "[", "i", "]", ")", "\n", "", "return", "dict_users", "\n", "\n"]], "home.repos.pwc.inspect_result.yuetan031_fedproto.lib.sampling.mnist_noniid": [[56, 99], ["numpy.arange", "dataset.train_labels.numpy", "numpy.vstack", "range", "random.sample", "numpy.sort", "print", "print", "numpy.array", "classes_list.append", "range", "range", "numpy.concatenate", "idxs_labels[].argsort", "each_class.item"], "function", ["None"], ["", "def", "mnist_noniid", "(", "args", ",", "dataset", ",", "num_users", ",", "n_list", ",", "k_list", ")", ":", "\n", "    ", "\"\"\"\n    Sample non-I.I.D client data from MNIST dataset\n    :param dataset:\n    :param num_users:\n    :return:\n    \"\"\"", "\n", "\n", "# 60,000 training imgs -->  200 imgs/shard X 300 shards", "\n", "num_shards", ",", "num_imgs", "=", "10", ",", "6000", "\n", "idx_shard", "=", "[", "i", "for", "i", "in", "range", "(", "num_shards", ")", "]", "\n", "dict_users", "=", "{", "}", "\n", "idxs", "=", "np", ".", "arange", "(", "num_shards", "*", "num_imgs", ")", "\n", "labels", "=", "dataset", ".", "train_labels", ".", "numpy", "(", ")", "\n", "# sort labels", "\n", "idxs_labels", "=", "np", ".", "vstack", "(", "(", "idxs", ",", "labels", ")", ")", "\n", "idxs_labels", "=", "idxs_labels", "[", ":", ",", "idxs_labels", "[", "1", ",", ":", "]", ".", "argsort", "(", ")", "]", "\n", "idxs", "=", "idxs_labels", "[", "0", ",", ":", "]", "\n", "label_begin", "=", "{", "}", "\n", "cnt", "=", "0", "\n", "for", "i", "in", "idxs_labels", "[", "1", ",", ":", "]", ":", "\n", "        ", "if", "i", "not", "in", "label_begin", ":", "\n", "                ", "label_begin", "[", "i", "]", "=", "cnt", "\n", "", "cnt", "+=", "1", "\n", "\n", "", "classes_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_users", ")", ":", "\n", "        ", "n", "=", "n_list", "[", "i", "]", "\n", "k", "=", "k_list", "[", "i", "]", "\n", "k_len", "=", "args", ".", "train_shots_max", "\n", "classes", "=", "random", ".", "sample", "(", "range", "(", "0", ",", "args", ".", "num_classes", ")", ",", "n", ")", "\n", "classes", "=", "np", ".", "sort", "(", "classes", ")", "\n", "print", "(", "\"user {:d}: {:d}-way {:d}-shot\"", ".", "format", "(", "i", "+", "1", ",", "n", ",", "k", ")", ")", "\n", "print", "(", "\"classes:\"", ",", "classes", ")", "\n", "user_data", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "for", "each_class", "in", "classes", ":", "\n", "# begin = i*10 + label_begin[each_class.item()]", "\n", "            ", "begin", "=", "i", "*", "k_len", "+", "label_begin", "[", "each_class", ".", "item", "(", ")", "]", "\n", "user_data", "=", "np", ".", "concatenate", "(", "(", "user_data", ",", "idxs", "[", "begin", ":", "begin", "+", "k", "]", ")", ",", "axis", "=", "0", ")", "\n", "", "dict_users", "[", "i", "]", "=", "user_data", "\n", "classes_list", ".", "append", "(", "classes", ")", "\n", "\n", "", "return", "dict_users", ",", "classes_list", "\n", "#", "\n"]], "home.repos.pwc.inspect_result.yuetan031_fedproto.lib.sampling.mnist_noniid_lt": [[113, 150], ["numpy.arange", "test_dataset.train_labels.numpy", "numpy.vstack", "range", "print", "numpy.array", "range", "numpy.concatenate", "idxs_labels[].argsort", "each_class.item"], "function", ["None"], ["", "def", "mnist_noniid_lt", "(", "args", ",", "test_dataset", ",", "num_users", ",", "n_list", ",", "k_list", ",", "classes_list", ")", ":", "\n", "    ", "\"\"\"\n    Sample non-I.I.D client data from MNIST dataset\n    :param dataset:\n    :param num_users:\n    :return:\n    \"\"\"", "\n", "\n", "# 60,000 training imgs -->  200 imgs/shard X 300 shards", "\n", "num_shards", ",", "num_imgs", "=", "10", ",", "1000", "\n", "idx_shard", "=", "[", "i", "for", "i", "in", "range", "(", "num_shards", ")", "]", "\n", "dict_users", "=", "{", "}", "\n", "idxs", "=", "np", ".", "arange", "(", "num_shards", "*", "num_imgs", ")", "\n", "labels", "=", "test_dataset", ".", "train_labels", ".", "numpy", "(", ")", "\n", "# sort labels", "\n", "idxs_labels", "=", "np", ".", "vstack", "(", "(", "idxs", ",", "labels", ")", ")", "\n", "idxs_labels", "=", "idxs_labels", "[", ":", ",", "idxs_labels", "[", "1", ",", ":", "]", ".", "argsort", "(", ")", "]", "\n", "idxs", "=", "idxs_labels", "[", "0", ",", ":", "]", "\n", "label_begin", "=", "{", "}", "\n", "cnt", "=", "0", "\n", "for", "i", "in", "idxs_labels", "[", "1", ",", ":", "]", ":", "\n", "        ", "if", "i", "not", "in", "label_begin", ":", "\n", "                ", "label_begin", "[", "i", "]", "=", "cnt", "\n", "", "cnt", "+=", "1", "\n", "\n", "", "for", "i", "in", "range", "(", "num_users", ")", ":", "\n", "        ", "k", "=", "40", "# \u6bcf\u4e2a\u7c7b\u9009\u591a\u5c11\u5f20\u505a\u6d4b\u8bd5", "\n", "classes", "=", "classes_list", "[", "i", "]", "\n", "print", "(", "\"local test classes:\"", ",", "classes", ")", "\n", "user_data", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "for", "each_class", "in", "classes", ":", "\n", "            ", "begin", "=", "i", "*", "40", "+", "label_begin", "[", "each_class", ".", "item", "(", ")", "]", "\n", "user_data", "=", "np", ".", "concatenate", "(", "(", "user_data", ",", "idxs", "[", "begin", ":", "begin", "+", "k", "]", ")", ",", "axis", "=", "0", ")", "\n", "", "dict_users", "[", "i", "]", "=", "user_data", "\n", "\n", "\n", "", "return", "dict_users", "\n", "#", "\n"]], "home.repos.pwc.inspect_result.yuetan031_fedproto.lib.sampling.mnist_noniid_unequal": [[164, 251], ["numpy.arange", "dataset.train_labels.numpy", "numpy.vstack", "numpy.random.randint", "numpy.around", "random_shard_size.astype.astype", "numpy.array", "sum", "range", "range", "range", "range", "range", "set", "list", "set", "list", "set", "list", "len", "len", "min", "set", "idxs_labels[].argsort", "sum", "numpy.random.choice", "numpy.concatenate", "len", "len", "len", "numpy.random.choice", "numpy.concatenate", "numpy.random.choice", "numpy.concatenate", "numpy.random.choice", "numpy.concatenate", "set", "set", "set", "len", "dict_users.get"], "function", ["None"], ["", "def", "mnist_noniid_unequal", "(", "dataset", ",", "num_users", ")", ":", "\n", "    ", "\"\"\"\n    Sample non-I.I.D client data from MNIST dataset s.t clients\n    have unequal amount of data\n    :param dataset:\n    :param num_users:\n    :returns a dict of clients with each clients assigned certain\n    number of training imgs\n    \"\"\"", "\n", "# 60,000 training imgs --> 50 imgs/shard X 1200 shards", "\n", "num_shards", ",", "num_imgs", "=", "1200", ",", "50", "\n", "idx_shard", "=", "[", "i", "for", "i", "in", "range", "(", "num_shards", ")", "]", "\n", "dict_users", "=", "{", "i", ":", "np", ".", "array", "(", "[", "]", ")", "for", "i", "in", "range", "(", "num_users", ")", "}", "\n", "idxs", "=", "np", ".", "arange", "(", "num_shards", "*", "num_imgs", ")", "\n", "labels", "=", "dataset", ".", "train_labels", ".", "numpy", "(", ")", "\n", "\n", "# sort labels", "\n", "idxs_labels", "=", "np", ".", "vstack", "(", "(", "idxs", ",", "labels", ")", ")", "\n", "idxs_labels", "=", "idxs_labels", "[", ":", ",", "idxs_labels", "[", "1", ",", ":", "]", ".", "argsort", "(", ")", "]", "\n", "idxs", "=", "idxs_labels", "[", "0", ",", ":", "]", "\n", "\n", "# Minimum and maximum shards assigned per client:", "\n", "min_shard", "=", "1", "\n", "max_shard", "=", "30", "\n", "\n", "# Divide the shards into random chunks for every client", "\n", "# s.t the sum of these chunks = num_shards", "\n", "random_shard_size", "=", "np", ".", "random", ".", "randint", "(", "min_shard", ",", "max_shard", "+", "1", ",", "\n", "size", "=", "num_users", ")", "\n", "random_shard_size", "=", "np", ".", "around", "(", "random_shard_size", "/", "\n", "sum", "(", "random_shard_size", ")", "*", "num_shards", ")", "\n", "random_shard_size", "=", "random_shard_size", ".", "astype", "(", "int", ")", "\n", "\n", "# Assign the shards randomly to each client", "\n", "if", "sum", "(", "random_shard_size", ")", ">", "num_shards", ":", "\n", "\n", "        ", "for", "i", "in", "range", "(", "num_users", ")", ":", "\n", "# First assign each client 1 shard to ensure every client has", "\n", "# atleast one shard of data", "\n", "            ", "rand_set", "=", "set", "(", "np", ".", "random", ".", "choice", "(", "idx_shard", ",", "1", ",", "replace", "=", "False", ")", ")", "\n", "idx_shard", "=", "list", "(", "set", "(", "idx_shard", ")", "-", "rand_set", ")", "\n", "for", "rand", "in", "rand_set", ":", "\n", "                ", "dict_users", "[", "i", "]", "=", "np", ".", "concatenate", "(", "\n", "(", "dict_users", "[", "i", "]", ",", "idxs", "[", "rand", "*", "num_imgs", ":", "(", "rand", "+", "1", ")", "*", "num_imgs", "]", ")", ",", "\n", "axis", "=", "0", ")", "\n", "\n", "", "", "random_shard_size", "=", "random_shard_size", "-", "1", "\n", "\n", "# Next, randomly assign the remaining shards", "\n", "for", "i", "in", "range", "(", "num_users", ")", ":", "\n", "            ", "if", "len", "(", "idx_shard", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "", "shard_size", "=", "random_shard_size", "[", "i", "]", "\n", "if", "shard_size", ">", "len", "(", "idx_shard", ")", ":", "\n", "                ", "shard_size", "=", "len", "(", "idx_shard", ")", "\n", "", "rand_set", "=", "set", "(", "np", ".", "random", ".", "choice", "(", "idx_shard", ",", "shard_size", ",", "\n", "replace", "=", "False", ")", ")", "\n", "idx_shard", "=", "list", "(", "set", "(", "idx_shard", ")", "-", "rand_set", ")", "\n", "for", "rand", "in", "rand_set", ":", "\n", "                ", "dict_users", "[", "i", "]", "=", "np", ".", "concatenate", "(", "\n", "(", "dict_users", "[", "i", "]", ",", "idxs", "[", "rand", "*", "num_imgs", ":", "(", "rand", "+", "1", ")", "*", "num_imgs", "]", ")", ",", "\n", "axis", "=", "0", ")", "\n", "", "", "", "else", ":", "\n", "\n", "        ", "for", "i", "in", "range", "(", "num_users", ")", ":", "\n", "            ", "shard_size", "=", "random_shard_size", "[", "i", "]", "\n", "rand_set", "=", "set", "(", "np", ".", "random", ".", "choice", "(", "idx_shard", ",", "shard_size", ",", "\n", "replace", "=", "False", ")", ")", "\n", "idx_shard", "=", "list", "(", "set", "(", "idx_shard", ")", "-", "rand_set", ")", "\n", "for", "rand", "in", "rand_set", ":", "\n", "                ", "dict_users", "[", "i", "]", "=", "np", ".", "concatenate", "(", "\n", "(", "dict_users", "[", "i", "]", ",", "idxs", "[", "rand", "*", "num_imgs", ":", "(", "rand", "+", "1", ")", "*", "num_imgs", "]", ")", ",", "\n", "axis", "=", "0", ")", "\n", "\n", "", "", "if", "len", "(", "idx_shard", ")", ">", "0", ":", "\n", "# Add the leftover shards to the client with minimum images:", "\n", "            ", "shard_size", "=", "len", "(", "idx_shard", ")", "\n", "# Add the remaining shard to the client with lowest data", "\n", "k", "=", "min", "(", "dict_users", ",", "key", "=", "lambda", "x", ":", "len", "(", "dict_users", ".", "get", "(", "x", ")", ")", ")", "\n", "rand_set", "=", "set", "(", "np", ".", "random", ".", "choice", "(", "idx_shard", ",", "shard_size", ",", "\n", "replace", "=", "False", ")", ")", "\n", "for", "rand", "in", "rand_set", ":", "\n", "                ", "dict_users", "[", "k", "]", "=", "np", ".", "concatenate", "(", "\n", "(", "dict_users", "[", "k", "]", ",", "idxs", "[", "rand", "*", "num_imgs", ":", "(", "rand", "+", "1", ")", "*", "num_imgs", "]", ")", ",", "\n", "axis", "=", "0", ")", "\n", "\n", "", "", "", "return", "dict_users", "\n", "\n"]], "home.repos.pwc.inspect_result.yuetan031_fedproto.lib.sampling.femnist_iid": [[253, 267], ["int", "range", "set", "list", "len", "numpy.random.choice", "range", "set", "len"], "function", ["None"], ["", "def", "femnist_iid", "(", "dataset", ",", "num_users", ")", ":", "\n", "    ", "\"\"\"\n    Sample I.I.D. client data from FEMNIST dataset\n    :param dataset:\n    :param num_users:\n    :return: dict of image index\n    \"\"\"", "\n", "num_items", "=", "int", "(", "len", "(", "dataset", ")", "/", "num_users", ")", "\n", "dict_users", ",", "all_idxs", "=", "{", "}", ",", "[", "i", "for", "i", "in", "range", "(", "len", "(", "dataset", ")", ")", "]", "\n", "for", "i", "in", "range", "(", "num_users", ")", ":", "\n", "        ", "dict_users", "[", "i", "]", "=", "set", "(", "np", ".", "random", ".", "choice", "(", "all_idxs", ",", "num_items", ",", "\n", "replace", "=", "False", ")", ")", "\n", "all_idxs", "=", "list", "(", "set", "(", "all_idxs", ")", "-", "dict_users", "[", "i", "]", ")", "\n", "", "return", "dict_users", "\n", "\n"]], "home.repos.pwc.inspect_result.yuetan031_fedproto.lib.sampling.femnist_noniid": [[268, 298], ["range", "random.sample", "numpy.sort", "print", "print", "print", "numpy.array", "classes_list.append", "classes_list_gt.append", "range", "numpy.concatenate", "numpy.arange"], "function", ["None"], ["", "def", "femnist_noniid", "(", "args", ",", "num_users", ",", "n_list", ",", "k_list", ")", ":", "\n", "    ", "\"\"\"\n    Sample non-I.I.D client data from FEMNIST dataset\n    :param dataset:\n    :param num_users:\n    :return:\n    \"\"\"", "\n", "\n", "dict_users", "=", "{", "}", "\n", "classes_list", "=", "[", "]", "\n", "classes_list_gt", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "num_users", ")", ":", "\n", "        ", "n", "=", "n_list", "[", "i", "]", "\n", "k", "=", "k_list", "[", "i", "]", "\n", "k_len", "=", "args", ".", "train_shots_max", "\n", "classes", "=", "random", ".", "sample", "(", "range", "(", "0", ",", "args", ".", "num_classes", ")", ",", "n", ")", "\n", "classes", "=", "np", ".", "sort", "(", "classes", ")", "\n", "print", "(", "\"user {:d}: {:d}-way {:d}-shot\"", ".", "format", "(", "i", "+", "1", ",", "n", ",", "k", ")", ")", "\n", "print", "(", "\"classes:\"", ",", "classes", ")", "\n", "print", "(", "\"classes_gt:\"", ",", "classes", ")", "\n", "user_data", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "for", "class_idx", "in", "classes", ":", "\n", "            ", "begin", "=", "class_idx", "*", "k_len", "*", "num_users", "+", "i", "*", "k_len", "\n", "user_data", "=", "np", ".", "concatenate", "(", "(", "user_data", ",", "np", ".", "arange", "(", "begin", ",", "begin", "+", "k", ")", ")", ",", "axis", "=", "0", ")", "\n", "", "dict_users", "[", "i", "]", "=", "user_data", "\n", "classes_list", ".", "append", "(", "classes", ")", "\n", "classes_list_gt", ".", "append", "(", "classes", ")", "\n", "\n", "", "return", "dict_users", ",", "classes_list", ",", "classes_list_gt", "\n", "\n"]], "home.repos.pwc.inspect_result.yuetan031_fedproto.lib.sampling.femnist_noniid_lt": [[299, 320], ["range", "numpy.array", "numpy.concatenate", "numpy.arange"], "function", ["None"], ["", "def", "femnist_noniid_lt", "(", "args", ",", "num_users", ",", "classes_list", ")", ":", "\n", "    ", "\"\"\"\n    Sample non-I.I.D client data from MNIST dataset\n    :param dataset:\n    :param num_users:\n    :return:\n    \"\"\"", "\n", "\n", "# 60,000 training imgs -->  200 imgs/shard X 300 shards", "\n", "dict_users", "=", "{", "}", "\n", "\n", "for", "i", "in", "range", "(", "num_users", ")", ":", "\n", "        ", "k", "=", "args", ".", "test_shots", "\n", "classes", "=", "classes_list", "[", "i", "]", "\n", "user_data", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "for", "class_idx", "in", "classes", ":", "\n", "            ", "begin", "=", "class_idx", "*", "k", "*", "num_users", "+", "i", "*", "k", "\n", "user_data", "=", "np", ".", "concatenate", "(", "(", "user_data", ",", "np", ".", "arange", "(", "begin", ",", "begin", "+", "k", ")", ")", ",", "axis", "=", "0", ")", "\n", "", "dict_users", "[", "i", "]", "=", "user_data", "\n", "\n", "", "return", "dict_users", "\n", "\n"]], "home.repos.pwc.inspect_result.yuetan031_fedproto.lib.sampling.femnist_noniid_unequal": [[322, 409], ["numpy.arange", "dataset.train_labels.numpy", "numpy.vstack", "numpy.random.randint", "numpy.around", "random_shard_size.astype.astype", "numpy.array", "sum", "range", "range", "range", "range", "range", "set", "list", "set", "list", "set", "list", "len", "len", "min", "set", "idxs_labels[].argsort", "sum", "numpy.random.choice", "numpy.concatenate", "len", "len", "len", "numpy.random.choice", "numpy.concatenate", "numpy.random.choice", "numpy.concatenate", "numpy.random.choice", "numpy.concatenate", "set", "set", "set", "len", "dict_users.get"], "function", ["None"], ["", "def", "femnist_noniid_unequal", "(", "dataset", ",", "num_users", ")", ":", "\n", "    ", "\"\"\"\n    Sample non-I.I.D client data from MNIST dataset s.t clients\n    have unequal amount of data\n    :param dataset:\n    :param num_users:\n    :returns a dict of clients with each clients assigned certain\n    number of training imgs\n    \"\"\"", "\n", "# 60,000 training imgs --> 50 imgs/shard X 1200 shards", "\n", "num_shards", ",", "num_imgs", "=", "1200", ",", "50", "\n", "idx_shard", "=", "[", "i", "for", "i", "in", "range", "(", "num_shards", ")", "]", "\n", "dict_users", "=", "{", "i", ":", "np", ".", "array", "(", "[", "]", ")", "for", "i", "in", "range", "(", "num_users", ")", "}", "\n", "idxs", "=", "np", ".", "arange", "(", "num_shards", "*", "num_imgs", ")", "\n", "labels", "=", "dataset", ".", "train_labels", ".", "numpy", "(", ")", "\n", "\n", "# sort labels", "\n", "idxs_labels", "=", "np", ".", "vstack", "(", "(", "idxs", ",", "labels", ")", ")", "\n", "idxs_labels", "=", "idxs_labels", "[", ":", ",", "idxs_labels", "[", "1", ",", ":", "]", ".", "argsort", "(", ")", "]", "\n", "idxs", "=", "idxs_labels", "[", "0", ",", ":", "]", "\n", "\n", "# Minimum and maximum shards assigned per client:", "\n", "min_shard", "=", "1", "\n", "max_shard", "=", "30", "\n", "\n", "# Divide the shards into random chunks for every client", "\n", "# s.t the sum of these chunks = num_shards", "\n", "random_shard_size", "=", "np", ".", "random", ".", "randint", "(", "min_shard", ",", "max_shard", "+", "1", ",", "\n", "size", "=", "num_users", ")", "\n", "random_shard_size", "=", "np", ".", "around", "(", "random_shard_size", "/", "\n", "sum", "(", "random_shard_size", ")", "*", "num_shards", ")", "\n", "random_shard_size", "=", "random_shard_size", ".", "astype", "(", "int", ")", "\n", "\n", "# Assign the shards randomly to each client", "\n", "if", "sum", "(", "random_shard_size", ")", ">", "num_shards", ":", "\n", "\n", "        ", "for", "i", "in", "range", "(", "num_users", ")", ":", "\n", "# First assign each client 1 shard to ensure every client has", "\n", "# atleast one shard of data", "\n", "            ", "rand_set", "=", "set", "(", "np", ".", "random", ".", "choice", "(", "idx_shard", ",", "1", ",", "replace", "=", "False", ")", ")", "\n", "idx_shard", "=", "list", "(", "set", "(", "idx_shard", ")", "-", "rand_set", ")", "\n", "for", "rand", "in", "rand_set", ":", "\n", "                ", "dict_users", "[", "i", "]", "=", "np", ".", "concatenate", "(", "\n", "(", "dict_users", "[", "i", "]", ",", "idxs", "[", "rand", "*", "num_imgs", ":", "(", "rand", "+", "1", ")", "*", "num_imgs", "]", ")", ",", "\n", "axis", "=", "0", ")", "\n", "\n", "", "", "random_shard_size", "=", "random_shard_size", "-", "1", "\n", "\n", "# Next, randomly assign the remaining shards", "\n", "for", "i", "in", "range", "(", "num_users", ")", ":", "\n", "            ", "if", "len", "(", "idx_shard", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "", "shard_size", "=", "random_shard_size", "[", "i", "]", "\n", "if", "shard_size", ">", "len", "(", "idx_shard", ")", ":", "\n", "                ", "shard_size", "=", "len", "(", "idx_shard", ")", "\n", "", "rand_set", "=", "set", "(", "np", ".", "random", ".", "choice", "(", "idx_shard", ",", "shard_size", ",", "\n", "replace", "=", "False", ")", ")", "\n", "idx_shard", "=", "list", "(", "set", "(", "idx_shard", ")", "-", "rand_set", ")", "\n", "for", "rand", "in", "rand_set", ":", "\n", "                ", "dict_users", "[", "i", "]", "=", "np", ".", "concatenate", "(", "\n", "(", "dict_users", "[", "i", "]", ",", "idxs", "[", "rand", "*", "num_imgs", ":", "(", "rand", "+", "1", ")", "*", "num_imgs", "]", ")", ",", "\n", "axis", "=", "0", ")", "\n", "", "", "", "else", ":", "\n", "\n", "        ", "for", "i", "in", "range", "(", "num_users", ")", ":", "\n", "            ", "shard_size", "=", "random_shard_size", "[", "i", "]", "\n", "rand_set", "=", "set", "(", "np", ".", "random", ".", "choice", "(", "idx_shard", ",", "shard_size", ",", "\n", "replace", "=", "False", ")", ")", "\n", "idx_shard", "=", "list", "(", "set", "(", "idx_shard", ")", "-", "rand_set", ")", "\n", "for", "rand", "in", "rand_set", ":", "\n", "                ", "dict_users", "[", "i", "]", "=", "np", ".", "concatenate", "(", "\n", "(", "dict_users", "[", "i", "]", ",", "idxs", "[", "rand", "*", "num_imgs", ":", "(", "rand", "+", "1", ")", "*", "num_imgs", "]", ")", ",", "\n", "axis", "=", "0", ")", "\n", "\n", "", "", "if", "len", "(", "idx_shard", ")", ">", "0", ":", "\n", "# Add the leftover shards to the client with minimum images:", "\n", "            ", "shard_size", "=", "len", "(", "idx_shard", ")", "\n", "# Add the remaining shard to the client with lowest data", "\n", "k", "=", "min", "(", "dict_users", ",", "key", "=", "lambda", "x", ":", "len", "(", "dict_users", ".", "get", "(", "x", ")", ")", ")", "\n", "rand_set", "=", "set", "(", "np", ".", "random", ".", "choice", "(", "idx_shard", ",", "shard_size", ",", "\n", "replace", "=", "False", ")", ")", "\n", "for", "rand", "in", "rand_set", ":", "\n", "                ", "dict_users", "[", "k", "]", "=", "np", ".", "concatenate", "(", "\n", "(", "dict_users", "[", "k", "]", ",", "idxs", "[", "rand", "*", "num_imgs", ":", "(", "rand", "+", "1", ")", "*", "num_imgs", "]", ")", ",", "\n", "axis", "=", "0", ")", "\n", "\n", "", "", "", "return", "dict_users", "\n", "\n"]], "home.repos.pwc.inspect_result.yuetan031_fedproto.lib.sampling.cifar10_noniid": [[410, 452], ["numpy.arange", "numpy.array", "numpy.vstack", "range", "random.sample", "numpy.sort", "print", "print", "numpy.array", "classes_list.append", "classes_list_gt.append", "range", "numpy.concatenate", "idxs_labels[].argsort", "each_class.item"], "function", ["None"], ["", "def", "cifar10_noniid", "(", "args", ",", "dataset", ",", "num_users", ",", "n_list", ",", "k_list", ")", ":", "\n", "    ", "\"\"\"\n    Sample non-I.I.D client data from MNIST dataset\n    :param dataset:\n    :param num_users:\n    :return:\n    \"\"\"", "\n", "# 60,000 training imgs -->  200 imgs/shard X 300 shards", "\n", "num_shards", ",", "num_imgs", "=", "10", ",", "5000", "\n", "dict_users", "=", "{", "}", "\n", "idxs", "=", "np", ".", "arange", "(", "num_shards", "*", "num_imgs", ")", "\n", "labels", "=", "np", ".", "array", "(", "dataset", ".", "targets", ")", "\n", "# sort labels", "\n", "idxs_labels", "=", "np", ".", "vstack", "(", "(", "idxs", ",", "labels", ")", ")", "\n", "idxs_labels", "=", "idxs_labels", "[", ":", ",", "idxs_labels", "[", "1", ",", ":", "]", ".", "argsort", "(", ")", "]", "\n", "idxs", "=", "idxs_labels", "[", "0", ",", ":", "]", "\n", "label_begin", "=", "{", "}", "\n", "cnt", "=", "0", "\n", "for", "i", "in", "idxs_labels", "[", "1", ",", ":", "]", ":", "\n", "        ", "if", "i", "not", "in", "label_begin", ":", "\n", "            ", "label_begin", "[", "i", "]", "=", "cnt", "\n", "", "cnt", "+=", "1", "\n", "\n", "", "classes_list", "=", "[", "]", "\n", "classes_list_gt", "=", "[", "]", "\n", "k_len", "=", "args", ".", "train_shots_max", "\n", "for", "i", "in", "range", "(", "num_users", ")", ":", "\n", "        ", "n", "=", "n_list", "[", "i", "]", "\n", "k", "=", "k_list", "[", "i", "]", "\n", "classes", "=", "random", ".", "sample", "(", "range", "(", "0", ",", "args", ".", "num_classes", ")", ",", "n", ")", "\n", "classes", "=", "np", ".", "sort", "(", "classes", ")", "\n", "print", "(", "\"user {:d}: {:d}-way {:d}-shot\"", ".", "format", "(", "i", "+", "1", ",", "n", ",", "k", ")", ")", "\n", "print", "(", "\"classes:\"", ",", "classes", ")", "\n", "user_data", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "for", "each_class", "in", "classes", ":", "\n", "            ", "begin", "=", "i", "*", "k_len", "+", "label_begin", "[", "each_class", ".", "item", "(", ")", "]", "\n", "user_data", "=", "np", ".", "concatenate", "(", "(", "user_data", ",", "idxs", "[", "begin", ":", "begin", "+", "k", "]", ")", ",", "axis", "=", "0", ")", "\n", "", "dict_users", "[", "i", "]", "=", "user_data", "\n", "classes_list", ".", "append", "(", "classes", ")", "\n", "classes_list_gt", ".", "append", "(", "classes", ")", "\n", "\n", "", "return", "dict_users", ",", "classes_list", ",", "classes_list_gt", "\n", "\n"]], "home.repos.pwc.inspect_result.yuetan031_fedproto.lib.sampling.cifar10_noniid_lt": [[453, 489], ["numpy.arange", "numpy.array", "numpy.vstack", "range", "print", "numpy.array", "numpy.concatenate", "idxs_labels[].argsort", "each_class.item"], "function", ["None"], ["", "def", "cifar10_noniid_lt", "(", "args", ",", "test_dataset", ",", "num_users", ",", "n_list", ",", "k_list", ",", "classes_list", ")", ":", "\n", "    ", "\"\"\"\n    Sample non-I.I.D client data from MNIST dataset\n    :param dataset:\n    :param num_users:\n    :return:\n    \"\"\"", "\n", "\n", "# 60,000 training imgs -->  200 imgs/shard X 300 shards", "\n", "num_shards", ",", "num_imgs", "=", "10", ",", "1000", "\n", "dict_users", "=", "{", "}", "\n", "idxs", "=", "np", ".", "arange", "(", "num_shards", "*", "num_imgs", ")", "\n", "labels", "=", "np", ".", "array", "(", "test_dataset", ".", "targets", ")", "\n", "# sort labels", "\n", "idxs_labels", "=", "np", ".", "vstack", "(", "(", "idxs", ",", "labels", ")", ")", "\n", "idxs_labels", "=", "idxs_labels", "[", ":", ",", "idxs_labels", "[", "1", ",", ":", "]", ".", "argsort", "(", ")", "]", "\n", "idxs", "=", "idxs_labels", "[", "0", ",", ":", "]", "\n", "label_begin", "=", "{", "}", "\n", "cnt", "=", "0", "\n", "for", "i", "in", "idxs_labels", "[", "1", ",", ":", "]", ":", "\n", "        ", "if", "i", "not", "in", "label_begin", ":", "\n", "                ", "label_begin", "[", "i", "]", "=", "cnt", "\n", "", "cnt", "+=", "1", "\n", "\n", "", "for", "i", "in", "range", "(", "num_users", ")", ":", "\n", "        ", "k", "=", "args", ".", "test_shots", "\n", "classes", "=", "classes_list", "[", "i", "]", "\n", "print", "(", "\"local test classes:\"", ",", "classes", ")", "\n", "user_data", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "for", "each_class", "in", "classes", ":", "\n", "            ", "begin", "=", "i", "*", "k", "+", "label_begin", "[", "each_class", ".", "item", "(", ")", "]", "\n", "user_data", "=", "np", ".", "concatenate", "(", "(", "user_data", ",", "idxs", "[", "begin", ":", "begin", "+", "k", "]", ")", ",", "axis", "=", "0", ")", "\n", "", "dict_users", "[", "i", "]", "=", "user_data", "\n", "\n", "\n", "", "return", "dict_users", "\n", "#", "\n"]], "home.repos.pwc.inspect_result.yuetan031_fedproto.lib.sampling.cifar_iid": [[505, 519], ["int", "range", "set", "list", "len", "numpy.random.choice", "range", "set", "len"], "function", ["None"], ["", "def", "cifar_iid", "(", "dataset", ",", "num_users", ")", ":", "\n", "    ", "\"\"\"\n    Sample I.I.D. client data from CIFAR10 dataset\n    :param dataset:\n    :param num_users:\n    :return: dict of image index\n    \"\"\"", "\n", "num_items", "=", "int", "(", "len", "(", "dataset", ")", "/", "num_users", ")", "\n", "dict_users", ",", "all_idxs", "=", "{", "}", ",", "[", "i", "for", "i", "in", "range", "(", "len", "(", "dataset", ")", ")", "]", "\n", "for", "i", "in", "range", "(", "num_users", ")", ":", "\n", "        ", "dict_users", "[", "i", "]", "=", "set", "(", "np", ".", "random", ".", "choice", "(", "all_idxs", ",", "num_items", ",", "\n", "replace", "=", "False", ")", ")", "\n", "all_idxs", "=", "list", "(", "set", "(", "all_idxs", ")", "-", "dict_users", "[", "i", "]", ")", "\n", "", "return", "dict_users", "\n", "\n"]], "home.repos.pwc.inspect_result.yuetan031_fedproto.lib.sampling.cifar100_noniid": [[522, 562], ["numpy.arange", "numpy.array", "numpy.vstack", "range", "random.sample", "numpy.sort", "print", "print", "numpy.array", "classes_list.append", "range", "numpy.concatenate", "idxs_labels[].argsort", "each_class.item"], "function", ["None"], ["", "def", "cifar100_noniid", "(", "args", ",", "dataset", ",", "num_users", ",", "n_list", ",", "k_list", ")", ":", "\n", "    ", "\"\"\"\n    Sample non-I.I.D client data from MNIST dataset\n    :param dataset:\n    :param num_users:\n    :return:\n    \"\"\"", "\n", "\n", "# 60,000 training imgs -->  200 imgs/shard X 300 shards", "\n", "num_shards", ",", "num_imgs", "=", "100", ",", "500", "\n", "dict_users", "=", "{", "}", "\n", "idxs", "=", "np", ".", "arange", "(", "num_shards", "*", "num_imgs", ")", "\n", "labels", "=", "np", ".", "array", "(", "dataset", ".", "targets", ")", "\n", "# sort labels", "\n", "idxs_labels", "=", "np", ".", "vstack", "(", "(", "idxs", ",", "labels", ")", ")", "\n", "idxs_labels", "=", "idxs_labels", "[", ":", ",", "idxs_labels", "[", "1", ",", ":", "]", ".", "argsort", "(", ")", "]", "\n", "idxs", "=", "idxs_labels", "[", "0", ",", ":", "]", "\n", "label_begin", "=", "{", "}", "\n", "cnt", "=", "0", "\n", "for", "i", "in", "idxs_labels", "[", "1", ",", ":", "]", ":", "\n", "        ", "if", "i", "not", "in", "label_begin", ":", "\n", "                ", "label_begin", "[", "i", "]", "=", "cnt", "\n", "", "cnt", "+=", "1", "\n", "\n", "", "classes_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_users", ")", ":", "\n", "        ", "n", "=", "n_list", "[", "i", "]", "\n", "k", "=", "k_list", "[", "i", "]", "\n", "classes", "=", "random", ".", "sample", "(", "range", "(", "0", ",", "args", ".", "num_classes", ")", ",", "n", ")", "\n", "classes", "=", "np", ".", "sort", "(", "classes", ")", "\n", "print", "(", "\"user {:d}: {:d}-way {:d}-shot\"", ".", "format", "(", "i", "+", "1", ",", "n", ",", "k", ")", ")", "\n", "print", "(", "\"classes:\"", ",", "classes", ")", "\n", "user_data", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "for", "each_class", "in", "classes", ":", "\n", "            ", "begin", "=", "label_begin", "[", "each_class", ".", "item", "(", ")", "]", "+", "i", "*", "5", "\n", "user_data", "=", "np", ".", "concatenate", "(", "(", "user_data", ",", "idxs", "[", "begin", ":", "begin", "+", "k", "]", ")", ",", "axis", "=", "0", ")", "\n", "", "dict_users", "[", "i", "]", "=", "user_data", "\n", "classes_list", ".", "append", "(", "classes", ")", "\n", "\n", "", "return", "dict_users", ",", "classes_list", "\n", "\n"]], "home.repos.pwc.inspect_result.yuetan031_fedproto.lib.sampling.cifar100_noniid_lt": [[564, 602], ["numpy.arange", "numpy.array", "numpy.vstack", "range", "print", "numpy.array", "range", "numpy.concatenate", "idxs_labels[].argsort", "random.randint", "each_class.item"], "function", ["None"], ["", "def", "cifar100_noniid_lt", "(", "test_dataset", ",", "num_users", ",", "classes_list", ")", ":", "\n", "    ", "\"\"\"\n    Sample non-I.I.D client data from MNIST dataset\n    :param dataset:\n    :param num_users:\n    :return:\n    \"\"\"", "\n", "\n", "# 60,000 training imgs -->  200 imgs/shard X 300 shards", "\n", "num_shards", ",", "num_imgs", "=", "100", ",", "100", "\n", "idx_shard", "=", "[", "i", "for", "i", "in", "range", "(", "num_shards", ")", "]", "\n", "dict_users", "=", "{", "}", "\n", "idxs", "=", "np", ".", "arange", "(", "num_shards", "*", "num_imgs", ")", "\n", "labels", "=", "np", ".", "array", "(", "test_dataset", ".", "targets", ")", "\n", "# sort labels", "\n", "idxs_labels", "=", "np", ".", "vstack", "(", "(", "idxs", ",", "labels", ")", ")", "\n", "idxs_labels", "=", "idxs_labels", "[", ":", ",", "idxs_labels", "[", "1", ",", ":", "]", ".", "argsort", "(", ")", "]", "\n", "idxs", "=", "idxs_labels", "[", "0", ",", ":", "]", "\n", "label_begin", "=", "{", "}", "\n", "cnt", "=", "0", "\n", "for", "i", "in", "idxs_labels", "[", "1", ",", ":", "]", ":", "\n", "        ", "if", "i", "not", "in", "label_begin", ":", "\n", "                ", "label_begin", "[", "i", "]", "=", "cnt", "\n", "", "cnt", "+=", "1", "\n", "\n", "", "for", "i", "in", "range", "(", "num_users", ")", ":", "\n", "        ", "k", "=", "5", "# \u6bcf\u4e2a\u7c7b\u9009\u591a\u5c11\u5f20\u505a\u6d4b\u8bd5", "\n", "classes", "=", "classes_list", "[", "i", "]", "\n", "print", "(", "\"local test classes:\"", ",", "classes", ")", "\n", "user_data", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "for", "each_class", "in", "classes", ":", "\n", "# begin = i*5 + label_begin[each_class.item()]", "\n", "            ", "begin", "=", "random", ".", "randint", "(", "0", ",", "90", ")", "+", "label_begin", "[", "each_class", ".", "item", "(", ")", "]", "\n", "user_data", "=", "np", ".", "concatenate", "(", "(", "user_data", ",", "idxs", "[", "begin", ":", "begin", "+", "k", "]", ")", ",", "axis", "=", "0", ")", "\n", "", "dict_users", "[", "i", "]", "=", "user_data", "\n", "\n", "\n", "", "return", "dict_users", "\n", "#", "\n"]], "home.repos.pwc.inspect_result.yuetan031_fedproto.models.models.MLP.__init__": [[11, 18], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.Softmax"], "methods", ["home.repos.pwc.inspect_result.yuetan031_fedproto.models.resnet.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim_in", ",", "dim_hidden", ",", "dim_out", ")", ":", "\n", "        ", "super", "(", "MLP", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layer_input", "=", "nn", ".", "Linear", "(", "dim_in", ",", "dim_hidden", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", ")", "\n", "self", ".", "layer_hidden", "=", "nn", ".", "Linear", "(", "dim_hidden", ",", "dim_out", ")", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuetan031_fedproto.models.models.MLP.forward": [[19, 26], ["torchvision.MLP.view", "torchvision.MLP.layer_input", "torchvision.MLP.dropout", "torchvision.MLP.relu", "torchvision.MLP.layer_hidden", "torchvision.MLP.softmax"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", ".", "view", "(", "-", "1", ",", "x", ".", "shape", "[", "1", "]", "*", "x", ".", "shape", "[", "-", "2", "]", "*", "x", ".", "shape", "[", "-", "1", "]", ")", "\n", "x", "=", "self", ".", "layer_input", "(", "x", ")", "\n", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "layer_hidden", "(", "x", ")", "\n", "return", "self", ".", "softmax", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuetan031_fedproto.models.models.CNNFemnist.__init__": [[28, 35], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Dropout2d", "torch.nn.Linear", "torch.nn.Linear", "int"], "methods", ["home.repos.pwc.inspect_result.yuetan031_fedproto.models.resnet.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "CNNFemnist", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "args", ".", "num_channels", ",", "10", ",", "kernel_size", "=", "3", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "10", ",", "args", ".", "out_channels", ",", "kernel_size", "=", "5", ")", "\n", "self", ".", "conv2_drop", "=", "nn", ".", "Dropout2d", "(", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "int", "(", "16820", "/", "20", "*", "args", ".", "out_channels", ")", ",", "50", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "50", ",", "args", ".", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuetan031_fedproto.models.models.CNNFemnist.forward": [[36, 44], ["torch.relu", "torch.relu", "torchvision.CNNFemnist.view", "torch.relu", "torch.dropout", "torchvision.CNNFemnist.fc2", "torch.max_pool2d", "torch.max_pool2d", "torchvision.CNNFemnist.fc1", "torch.log_softmax", "torchvision.CNNFemnist.conv1", "torchvision.CNNFemnist.conv2_drop", "torchvision.CNNFemnist.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "F", ".", "relu", "(", "F", ".", "max_pool2d", "(", "self", ".", "conv1", "(", "x", ")", ",", "2", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "F", ".", "max_pool2d", "(", "self", ".", "conv2_drop", "(", "self", ".", "conv2", "(", "x", ")", ")", ",", "2", ")", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "x", ".", "shape", "[", "1", "]", "*", "x", ".", "shape", "[", "2", "]", "*", "x", ".", "shape", "[", "3", "]", ")", "\n", "x1", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x1", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "return", "F", ".", "log_softmax", "(", "x", ",", "dim", "=", "1", ")", ",", "x1", "\n", "\n"]], "home.repos.pwc.inspect_result.yuetan031_fedproto.models.models.CNNMnist.__init__": [[46, 53], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Dropout2d", "torch.nn.Linear", "torch.nn.Linear", "int"], "methods", ["home.repos.pwc.inspect_result.yuetan031_fedproto.models.resnet.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "CNNMnist", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "args", ".", "num_channels", ",", "10", ",", "kernel_size", "=", "5", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "10", ",", "args", ".", "out_channels", ",", "kernel_size", "=", "5", ")", "\n", "self", ".", "conv2_drop", "=", "nn", ".", "Dropout2d", "(", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "int", "(", "320", "/", "20", "*", "args", ".", "out_channels", ")", ",", "50", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "50", ",", "args", ".", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuetan031_fedproto.models.models.CNNMnist.forward": [[54, 62], ["torch.relu", "torch.relu", "torchvision.CNNMnist.view", "torch.relu", "torch.dropout", "torchvision.CNNMnist.fc2", "torch.max_pool2d", "torch.max_pool2d", "torchvision.CNNMnist.fc1", "torch.log_softmax", "torchvision.CNNMnist.conv1", "torchvision.CNNMnist.conv2_drop", "torchvision.CNNMnist.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "F", ".", "relu", "(", "F", ".", "max_pool2d", "(", "self", ".", "conv1", "(", "x", ")", ",", "2", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "F", ".", "max_pool2d", "(", "self", ".", "conv2_drop", "(", "self", ".", "conv2", "(", "x", ")", ")", ",", "2", ")", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "x", ".", "shape", "[", "1", "]", "*", "x", ".", "shape", "[", "2", "]", "*", "x", ".", "shape", "[", "3", "]", ")", "\n", "x1", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x1", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "return", "F", ".", "log_softmax", "(", "x", ",", "dim", "=", "1", ")", ",", "x1", "\n", "\n"]], "home.repos.pwc.inspect_result.yuetan031_fedproto.models.models.CNNFashion_Mnist.__init__": [[64, 77], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Linear", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.MaxPool2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.MaxPool2d"], "methods", ["home.repos.pwc.inspect_result.yuetan031_fedproto.models.resnet.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "CNNFashion_Mnist", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layer1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "1", ",", "16", ",", "kernel_size", "=", "5", ",", "padding", "=", "2", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "16", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ")", ")", "\n", "self", ".", "layer2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "16", ",", "32", ",", "kernel_size", "=", "5", ",", "padding", "=", "2", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "32", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ")", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "7", "*", "7", "*", "32", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuetan031_fedproto.models.models.CNNFashion_Mnist.forward": [[78, 84], ["torchvision.CNNFashion_Mnist.layer1", "torchvision.CNNFashion_Mnist.layer2", "torchvision.CNNFashion_Mnist.view", "torchvision.CNNFashion_Mnist.fc", "torchvision.CNNFashion_Mnist.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "layer1", "(", "x", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "fc", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.yuetan031_fedproto.models.models.CNNCifar.__init__": [[86, 94], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.MaxPool2d", "torch.nn.Conv2d", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.yuetan031_fedproto.models.resnet.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "CNNCifar", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "6", ",", "5", ")", "\n", "self", ".", "pool", "=", "nn", ".", "MaxPool2d", "(", "2", ",", "2", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "6", ",", "16", ",", "5", ")", "\n", "self", ".", "fc0", "=", "nn", ".", "Linear", "(", "16", "*", "5", "*", "5", ",", "120", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "120", ",", "84", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "84", ",", "args", ".", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuetan031_fedproto.models.models.CNNCifar.forward": [[104, 112], ["torchvision.CNNCifar.pool", "torchvision.CNNCifar.pool", "torchvision.CNNCifar.view", "torch.relu", "torch.relu", "torchvision.CNNCifar.fc2", "torch.relu", "torch.relu", "torchvision.CNNCifar.fc0", "torchvision.CNNCifar.fc1", "torch.log_softmax", "torchvision.CNNCifar.conv1", "torchvision.CNNCifar.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "pool", "(", "F", ".", "relu", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "pool", "(", "F", ".", "relu", "(", "self", ".", "conv2", "(", "x", ")", ")", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "16", "*", "5", "*", "5", ")", "\n", "x1", "=", "F", ".", "relu", "(", "self", ".", "fc0", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "x1", ")", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "return", "F", ".", "log_softmax", "(", "x", ",", "dim", "=", "1", ")", ",", "x1", "\n", "\n"]], "home.repos.pwc.inspect_result.yuetan031_fedproto.models.models.Lenet.__init__": [[115, 124], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.MaxPool2d", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.yuetan031_fedproto.models.resnet.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "Lenet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n_cls", "=", "10", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "3", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "5", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "5", ")", "\n", "self", ".", "pool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "64", "*", "5", "*", "5", ",", "384", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "384", ",", "192", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "192", ",", "self", ".", "n_cls", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuetan031_fedproto.models.models.Lenet.forward": [[125, 134], ["torchvision.Lenet.pool", "torchvision.Lenet.pool", "torchvision.Lenet.view", "torch.relu", "torch.relu", "torchvision.Lenet.fc3", "torch.relu", "torch.relu", "torchvision.Lenet.fc1", "torchvision.Lenet.fc2", "torch.log_softmax", "torchvision.Lenet.conv1", "torchvision.Lenet.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "pool", "(", "F", ".", "relu", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "pool", "(", "F", ".", "relu", "(", "self", ".", "conv2", "(", "x", ")", ")", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "64", "*", "5", "*", "5", ")", "\n", "x1", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "fc2", "(", "x1", ")", ")", "\n", "x", "=", "self", ".", "fc3", "(", "x", ")", "\n", "\n", "return", "F", ".", "log_softmax", "(", "x", ",", "dim", "=", "1", ")", ",", "x1", "", "", "", ""]], "home.repos.pwc.inspect_result.yuetan031_fedproto.models.resnet.BasicBlock.__init__": [[33, 42], ["torch.Module.__init__", "resnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "resnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.yuetan031_fedproto.models.resnet.ResNet.__init__", "home.repos.pwc.inspect_result.yuetan031_fedproto.models.resnet.conv3x3", "home.repos.pwc.inspect_result.yuetan031_fedproto.models.resnet.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.yuetan031_fedproto.models.resnet.BasicBlock.forward": [[43, 60], ["resnet.BasicBlock.conv1", "resnet.BasicBlock.bn1", "resnet.BasicBlock.relu", "resnet.BasicBlock.conv2", "resnet.BasicBlock.bn2", "resnet.BasicBlock.relu", "resnet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.yuetan031_fedproto.models.resnet.Bottleneck.__init__": [[65, 76], ["torch.Module.__init__", "resnet.conv1x1", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnet.conv1x1", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.yuetan031_fedproto.models.resnet.ResNet.__init__", "home.repos.pwc.inspect_result.yuetan031_fedproto.models.resnet.conv1x1", "home.repos.pwc.inspect_result.yuetan031_fedproto.models.resnet.conv3x3", "home.repos.pwc.inspect_result.yuetan031_fedproto.models.resnet.conv1x1"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv1x1", "(", "inplanes", ",", "planes", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "conv1x1", "(", "planes", ",", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.yuetan031_fedproto.models.resnet.Bottleneck.forward": [[77, 98], ["resnet.Bottleneck.conv1", "resnet.Bottleneck.bn1", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv2", "resnet.Bottleneck.bn2", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv3", "resnet.Bottleneck.bn3", "resnet.Bottleneck.relu", "resnet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.yuetan031_fedproto.models.resnet.ResNet.__init__": [[102, 132], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "resnet.ResNet.modules", "isinstance", "resnet.ResNet.modules", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.yuetan031_fedproto.models.resnet.ResNet.__init__", "home.repos.pwc.inspect_result.yuetan031_fedproto.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.yuetan031_fedproto.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.yuetan031_fedproto.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.yuetan031_fedproto.models.resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ",", "zero_init_residual", "=", "False", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "args", ".", "stride", "[", "0", "]", ",", "padding", "=", "3", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "args", ".", "stride", "[", "1", "]", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "# Zero-initialize the last BN in each residual branch,", "\n", "# so that the residual branch starts with zeros, and each residual block behaves like an identity.", "\n", "# This improves the model by 0.2~0.3% according to https://arxiv.org/abs/1706.02677", "\n", "", "", "if", "zero_init_residual", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "Bottleneck", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn3", ".", "weight", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "BasicBlock", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn2", ".", "weight", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuetan031_fedproto.models.resnet.ResNet._make_layer": [[133, 148], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "resnet.conv1x1", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["home.repos.pwc.inspect_result.yuetan031_fedproto.models.resnet.conv1x1"], ["", "", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "stride", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuetan031_fedproto.models.resnet.ResNet.forward": [[149, 165], ["resnet.ResNet.conv1", "resnet.ResNet.bn1", "resnet.ResNet.relu", "resnet.ResNet.maxpool", "resnet.ResNet.layer1", "resnet.ResNet.layer2", "resnet.ResNet.layer3", "resnet.ResNet.layer4", "resnet.ResNet.avgpool", "resnet.ResNet.view", "resnet.ResNet.fc", "resnet.ResNet.size", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x1", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x1", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "F", ".", "log_softmax", "(", "x", ",", "dim", "=", "1", ")", ",", "x1", "\n", "\n"]], "home.repos.pwc.inspect_result.yuetan031_fedproto.models.resnet.conv3x3": [[19, 23], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuetan031_fedproto.models.resnet.conv1x1": [[25, 28], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"1x1 convolution\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuetan031_fedproto.models.resnet.resnet18": [[167, 177], ["resnet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "", "def", "resnet18", "(", "args", ",", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-18 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "args", ",", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet18'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.yuetan031_fedproto.models.resnet.resnet34": [[179, 189], ["resnet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet34", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-34 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet34'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.yuetan031_fedproto.models.resnet.resnet50": [[191, 201], ["resnet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet50", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-50 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet50'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.yuetan031_fedproto.models.resnet.resnet101": [[203, 213], ["resnet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet101", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-101 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet101'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.yuetan031_fedproto.models.resnet.resnet152": [[215, 225], ["resnet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet152", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-152 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet152'", "]", ")", ")", "\n", "", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.yuetan031_fedproto.exps.federated_main.FedProto_taskheter": [[36, 85], ["tensorboardX.SummaryWriter", "numpy.arange", "tqdm.tqdm", "update.test_inference_new_het_lt", "print", "print", "print", "range", "print", "utils.proto_aggregation", "train_loss.append", "update.save_protos", "update.LocalUpdate", "copy.deepcopy.update_weights_het", "utils.agg_func", "local_weights.append", "local_losses.append", "tensorboardX.SummaryWriter.add_scalar", "tensorboardX.SummaryWriter.add_scalar", "tensorboardX.SummaryWriter.add_scalar", "tensorboardX.SummaryWriter.add_scalar", "copy.deepcopy", "copy.deepcopy.load_state_dict", "sum", "len", "numpy.mean", "numpy.std", "numpy.mean", "numpy.std", "numpy.mean", "numpy.std", "str", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "str", "str", "str", "str", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.yuetan031_fedproto.lib.update.test_inference_new_het_lt", "home.repos.pwc.inspect_result.yuetan031_fedproto.lib.utils.proto_aggregation", "home.repos.pwc.inspect_result.yuetan031_fedproto.lib.update.save_protos", "home.repos.pwc.inspect_result.yuetan031_fedproto.lib.update.LocalUpdate.update_weights_het", "home.repos.pwc.inspect_result.yuetan031_fedproto.lib.utils.agg_func"], ["def", "FedProto_taskheter", "(", "args", ",", "train_dataset", ",", "test_dataset", ",", "user_groups", ",", "user_groups_lt", ",", "local_model_list", ",", "classes_list", ")", ":", "\n", "    ", "summary_writer", "=", "SummaryWriter", "(", "'../tensorboard/'", "+", "args", ".", "dataset", "+", "'_fedproto_'", "+", "str", "(", "args", ".", "ways", ")", "+", "'w'", "+", "str", "(", "args", ".", "shots", ")", "+", "'s'", "+", "str", "(", "args", ".", "stdev", ")", "+", "'e_'", "+", "str", "(", "args", ".", "num_users", ")", "+", "'u_'", "+", "str", "(", "args", ".", "rounds", ")", "+", "'r'", ")", "\n", "\n", "global_protos", "=", "[", "]", "\n", "idxs_users", "=", "np", ".", "arange", "(", "args", ".", "num_users", ")", "\n", "\n", "train_loss", ",", "train_accuracy", "=", "[", "]", ",", "[", "]", "\n", "\n", "for", "round", "in", "tqdm", "(", "range", "(", "args", ".", "rounds", ")", ")", ":", "\n", "        ", "local_weights", ",", "local_losses", ",", "local_protos", "=", "[", "]", ",", "[", "]", ",", "{", "}", "\n", "print", "(", "f'\\n | Global Training Round : {round + 1} |\\n'", ")", "\n", "\n", "proto_loss", "=", "0", "\n", "for", "idx", "in", "idxs_users", ":", "\n", "            ", "local_model", "=", "LocalUpdate", "(", "args", "=", "args", ",", "dataset", "=", "train_dataset", ",", "idxs", "=", "user_groups", "[", "idx", "]", ")", "\n", "w", ",", "loss", ",", "acc", ",", "protos", "=", "local_model", ".", "update_weights_het", "(", "args", ",", "idx", ",", "global_protos", ",", "model", "=", "copy", ".", "deepcopy", "(", "local_model_list", "[", "idx", "]", ")", ",", "global_round", "=", "round", ")", "\n", "agg_protos", "=", "agg_func", "(", "protos", ")", "\n", "\n", "local_weights", ".", "append", "(", "copy", ".", "deepcopy", "(", "w", ")", ")", "\n", "local_losses", ".", "append", "(", "copy", ".", "deepcopy", "(", "loss", "[", "'total'", "]", ")", ")", "\n", "local_protos", "[", "idx", "]", "=", "agg_protos", "\n", "summary_writer", ".", "add_scalar", "(", "'Train/Loss/user'", "+", "str", "(", "idx", "+", "1", ")", ",", "loss", "[", "'total'", "]", ",", "round", ")", "\n", "summary_writer", ".", "add_scalar", "(", "'Train/Loss1/user'", "+", "str", "(", "idx", "+", "1", ")", ",", "loss", "[", "'1'", "]", ",", "round", ")", "\n", "summary_writer", ".", "add_scalar", "(", "'Train/Loss2/user'", "+", "str", "(", "idx", "+", "1", ")", ",", "loss", "[", "'2'", "]", ",", "round", ")", "\n", "summary_writer", ".", "add_scalar", "(", "'Train/Acc/user'", "+", "str", "(", "idx", "+", "1", ")", ",", "acc", ",", "round", ")", "\n", "proto_loss", "+=", "loss", "[", "'2'", "]", "\n", "\n", "# update global weights", "\n", "", "local_weights_list", "=", "local_weights", "\n", "\n", "for", "idx", "in", "idxs_users", ":", "\n", "            ", "local_model", "=", "copy", ".", "deepcopy", "(", "local_model_list", "[", "idx", "]", ")", "\n", "local_model", ".", "load_state_dict", "(", "local_weights_list", "[", "idx", "]", ",", "strict", "=", "True", ")", "\n", "local_model_list", "[", "idx", "]", "=", "local_model", "\n", "\n", "# update global weights", "\n", "", "global_protos", "=", "proto_aggregation", "(", "local_protos", ")", "\n", "\n", "loss_avg", "=", "sum", "(", "local_losses", ")", "/", "len", "(", "local_losses", ")", "\n", "train_loss", ".", "append", "(", "loss_avg", ")", "\n", "\n", "", "acc_list_l", ",", "acc_list_g", ",", "loss_list", "=", "test_inference_new_het_lt", "(", "args", ",", "local_model_list", ",", "test_dataset", ",", "classes_list", ",", "user_groups_lt", ",", "global_protos", ")", "\n", "print", "(", "'For all users (with protos), mean of test acc is {:.5f}, std of test acc is {:.5f}'", ".", "format", "(", "np", ".", "mean", "(", "acc_list_g", ")", ",", "np", ".", "std", "(", "acc_list_g", ")", ")", ")", "\n", "print", "(", "'For all users (w/o protos), mean of test acc is {:.5f}, std of test acc is {:.5f}'", ".", "format", "(", "np", ".", "mean", "(", "acc_list_l", ")", ",", "np", ".", "std", "(", "acc_list_l", ")", ")", ")", "\n", "print", "(", "'For all users (with protos), mean of proto loss is {:.5f}, std of test acc is {:.5f}'", ".", "format", "(", "np", ".", "mean", "(", "loss_list", ")", ",", "np", ".", "std", "(", "loss_list", ")", ")", ")", "\n", "\n", "# save protos", "\n", "if", "args", ".", "dataset", "==", "'mnist'", ":", "\n", "        ", "save_protos", "(", "args", ",", "local_model_list", ",", "test_dataset", ",", "user_groups_lt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuetan031_fedproto.exps.federated_main.FedProto_modelheter": [[86, 131], ["tensorboardX.SummaryWriter", "numpy.arange", "tqdm.tqdm", "update.test_inference_new_het_lt", "print", "print", "range", "print", "utils.proto_aggregation", "train_loss.append", "update.LocalUpdate", "copy.deepcopy.update_weights_het", "utils.agg_func", "local_weights.append", "local_losses.append", "tensorboardX.SummaryWriter.add_scalar", "tensorboardX.SummaryWriter.add_scalar", "tensorboardX.SummaryWriter.add_scalar", "tensorboardX.SummaryWriter.add_scalar", "copy.deepcopy", "copy.deepcopy.load_state_dict", "sum", "len", "numpy.mean", "numpy.std", "numpy.mean", "numpy.std", "str", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "str", "str", "str", "str", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.yuetan031_fedproto.lib.update.test_inference_new_het_lt", "home.repos.pwc.inspect_result.yuetan031_fedproto.lib.utils.proto_aggregation", "home.repos.pwc.inspect_result.yuetan031_fedproto.lib.update.LocalUpdate.update_weights_het", "home.repos.pwc.inspect_result.yuetan031_fedproto.lib.utils.agg_func"], ["", "", "def", "FedProto_modelheter", "(", "args", ",", "train_dataset", ",", "test_dataset", ",", "user_groups", ",", "user_groups_lt", ",", "local_model_list", ",", "classes_list", ")", ":", "\n", "    ", "summary_writer", "=", "SummaryWriter", "(", "'../tensorboard/'", "+", "args", ".", "dataset", "+", "'_fedproto_mh_'", "+", "str", "(", "args", ".", "ways", ")", "+", "'w'", "+", "str", "(", "args", ".", "shots", ")", "+", "'s'", "+", "str", "(", "args", ".", "stdev", ")", "+", "'e_'", "+", "str", "(", "args", ".", "num_users", ")", "+", "'u_'", "+", "str", "(", "args", ".", "rounds", ")", "+", "'r'", ")", "\n", "\n", "global_protos", "=", "[", "]", "\n", "idxs_users", "=", "np", ".", "arange", "(", "args", ".", "num_users", ")", "\n", "\n", "train_loss", ",", "train_accuracy", "=", "[", "]", ",", "[", "]", "\n", "\n", "for", "round", "in", "tqdm", "(", "range", "(", "args", ".", "rounds", ")", ")", ":", "\n", "        ", "local_weights", ",", "local_losses", ",", "local_protos", "=", "[", "]", ",", "[", "]", ",", "{", "}", "\n", "print", "(", "f'\\n | Global Training Round : {round + 1} |\\n'", ")", "\n", "\n", "proto_loss", "=", "0", "\n", "for", "idx", "in", "idxs_users", ":", "\n", "            ", "local_model", "=", "LocalUpdate", "(", "args", "=", "args", ",", "dataset", "=", "train_dataset", ",", "idxs", "=", "user_groups", "[", "idx", "]", ")", "\n", "w", ",", "loss", ",", "acc", ",", "protos", "=", "local_model", ".", "update_weights_het", "(", "args", ",", "idx", ",", "global_protos", ",", "model", "=", "copy", ".", "deepcopy", "(", "local_model_list", "[", "idx", "]", ")", ",", "global_round", "=", "round", ")", "\n", "agg_protos", "=", "agg_func", "(", "protos", ")", "\n", "\n", "local_weights", ".", "append", "(", "copy", ".", "deepcopy", "(", "w", ")", ")", "\n", "local_losses", ".", "append", "(", "copy", ".", "deepcopy", "(", "loss", "[", "'total'", "]", ")", ")", "\n", "\n", "local_protos", "[", "idx", "]", "=", "agg_protos", "\n", "summary_writer", ".", "add_scalar", "(", "'Train/Loss/user'", "+", "str", "(", "idx", "+", "1", ")", ",", "loss", "[", "'total'", "]", ",", "round", ")", "\n", "summary_writer", ".", "add_scalar", "(", "'Train/Loss1/user'", "+", "str", "(", "idx", "+", "1", ")", ",", "loss", "[", "'1'", "]", ",", "round", ")", "\n", "summary_writer", ".", "add_scalar", "(", "'Train/Loss2/user'", "+", "str", "(", "idx", "+", "1", ")", ",", "loss", "[", "'2'", "]", ",", "round", ")", "\n", "summary_writer", ".", "add_scalar", "(", "'Train/Acc/user'", "+", "str", "(", "idx", "+", "1", ")", ",", "acc", ",", "round", ")", "\n", "proto_loss", "+=", "loss", "[", "'2'", "]", "\n", "\n", "# update global weights", "\n", "", "local_weights_list", "=", "local_weights", "\n", "\n", "for", "idx", "in", "idxs_users", ":", "\n", "            ", "local_model", "=", "copy", ".", "deepcopy", "(", "local_model_list", "[", "idx", "]", ")", "\n", "local_model", ".", "load_state_dict", "(", "local_weights_list", "[", "idx", "]", ",", "strict", "=", "True", ")", "\n", "local_model_list", "[", "idx", "]", "=", "local_model", "\n", "\n", "# update global protos", "\n", "", "global_protos", "=", "proto_aggregation", "(", "local_protos", ")", "\n", "\n", "loss_avg", "=", "sum", "(", "local_losses", ")", "/", "len", "(", "local_losses", ")", "\n", "train_loss", ".", "append", "(", "loss_avg", ")", "\n", "\n", "", "acc_list_l", ",", "acc_list_g", "=", "test_inference_new_het_lt", "(", "args", ",", "local_model_list", ",", "test_dataset", ",", "classes_list", ",", "user_groups_lt", ",", "global_protos", ")", "\n", "print", "(", "'For all users (with protos), mean of test acc is {:.5f}, std of test acc is {:.5f}'", ".", "format", "(", "np", ".", "mean", "(", "acc_list_g", ")", ",", "np", ".", "std", "(", "acc_list_g", ")", ")", ")", "\n", "print", "(", "'For all users (w/o protos), mean of test acc is {:.5f}, std of test acc is {:.5f}'", ".", "format", "(", "np", ".", "mean", "(", "acc_list_l", ")", ",", "np", ".", "std", "(", "acc_list_l", ")", ")", ")", "\n", "\n"]]}