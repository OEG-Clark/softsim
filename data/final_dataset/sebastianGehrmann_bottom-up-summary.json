{"home.repos.pwc.inspect_result.sebastianGehrmann_bottom-up-summary.None.prediction_to_text.get_sents": [[42, 75], ["zip", "so_far.append", "current_tags.append", "current_probs.append", "sum", "numpy.max", "so_far.copy", "numpy.mean"], "function", ["None"], ["def", "get_sents", "(", "words", ",", "tags", ",", "probs", ")", ":", "\n", "# 1: divide into sentences with associated probabilities", "\n", "    ", "STARTTOKEN", "=", "\"<t>\"", "\n", "ENDTOKEN", "=", "\"</t>\"", "\n", "\n", "full_text", "=", "\"\"", "\n", "so_far", "=", "[", "]", "\n", "current_tags", "=", "[", "]", "\n", "current_probs", "=", "[", "]", "\n", "\n", "highest_so_far", "=", "[", "]", "\n", "avg_of_highest", "=", "0.", "\n", "for", "word", ",", "tag", ",", "prob", "in", "zip", "(", "words", ",", "tags", ",", "probs", ")", ":", "\n", "        ", "so_far", ".", "append", "(", "word", ")", "\n", "current_tags", ".", "append", "(", "tag", ")", "\n", "current_probs", ".", "append", "(", "prob", ")", "\n", "if", "word", "==", "\".\"", ":", "\n", "            ", "if", "sum", "(", "current_tags", ")", ">", "1", ":", "\n", "                ", "full_text", "+=", "STARTTOKEN", "+", "\" \"", "+", "\" \"", ".", "join", "(", "so_far", ")", "+", "\" \"", "+", "ENDTOKEN", "+", "\" \"", "\n", "", "if", "np", ".", "max", "(", "current_probs", ")", ">", "avg_of_highest", ":", "\n", "                ", "highest_so_far", "=", "so_far", ".", "copy", "(", ")", "\n", "avg_of_highest", "=", "np", ".", "mean", "(", "current_probs", ")", "\n", "\n", "", "current_tags", "=", "[", "]", "\n", "so_far", "=", "[", "]", "\n", "current_probs", "=", "[", "]", "\n", "", "", "if", "full_text", "==", "\"\"", ":", "\n", "        ", "full_text", "=", "STARTTOKEN", "+", "\" \"", "+", "\" \"", ".", "join", "(", "highest_so_far", ")", "+", "\" \"", "+", "ENDTOKEN", "+", "\" \"", "\n", "", "return", "full_text", "\n", "\n"]], "home.repos.pwc.inspect_result.sebastianGehrmann_bottom-up-summary.None.prediction_to_text.get_phrases": [[76, 87], ["zip", "pred.append", "pred.append"], "function", ["None"], ["", "def", "get_phrases", "(", "words", ",", "tags", ")", ":", "\n", "    ", "prev", "=", "0", "\n", "pred", "=", "[", "]", "\n", "for", "word", ",", "tag", "in", "zip", "(", "words", ",", "tags", ")", ":", "\n", "        ", "if", "tag", "==", "1", ":", "\n", "            ", "pred", ".", "append", "(", "word", ")", "\n", "", "elif", "prev", "==", "1", "and", "opt", ".", "divider", "!=", "\"\"", ":", "\n", "            ", "pred", ".", "append", "(", "opt", ".", "divider", ")", "\n", "", "prev", "=", "tag", "\n", "", "pred", "=", "\" \"", ".", "join", "(", "pred", ")", "\n", "return", "pred", "\n", "\n"]], "home.repos.pwc.inspect_result.sebastianGehrmann_bottom-up-summary.None.prediction_to_text.get_three": [[88, 126], ["zip", "scores.sort", "top3.sort", "current_sent.append", "current_probs.append", "outf.write", "scores.append", "sents.append", "str", "numpy.mean"], "function", ["None"], ["", "def", "get_three", "(", "words", ",", "outf", ",", "probs", ")", ":", "\n", "# 1: divide into sentences with associated probabilities", "\n", "    ", "STARTTOKEN", "=", "\"<t>\"", "\n", "ENDTOKEN", "=", "\"</t>\"", "\n", "\n", "sents", "=", "[", "]", "\n", "scores", "=", "[", "]", "\n", "current_sent", "=", "[", "]", "\n", "current_probs", "=", "[", "]", "\n", "current_num", "=", "0", "\n", "\n", "# First get all sentences and associated avg copy scores", "\n", "for", "word", ",", "prob", "in", "zip", "(", "words", ",", "probs", ")", ":", "\n", "        ", "current_sent", ".", "append", "(", "word", ")", "\n", "current_probs", ".", "append", "(", "prob", ")", "\n", "if", "word", "==", "\".\"", "or", "word", "==", "\"!\"", "or", "word", "==", "\"?\"", ":", "\n", "            ", "scores", ".", "append", "(", "(", "np", ".", "mean", "(", "current_probs", ")", ",", "current_num", ")", ")", "\n", "sent", "=", "STARTTOKEN", "+", "\" \"", "+", "\" \"", ".", "join", "(", "current_sent", ")", "+", "\" \"", "+", "ENDTOKEN", "\n", "sents", ".", "append", "(", "sent", ")", "\n", "\n", "current_sent", "=", "[", "]", "\n", "current_num", "+=", "1", "\n", "\n", "# Now select 3 top ones", "\n", "", "", "scores", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", "[", "0", "]", ")", "\n", "# print (scores)", "\n", "top3", "=", "scores", "[", "-", "3", ":", "]", "\n", "top3", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "\n", "\n", "for", "i", "in", "top3", ":", "\n", "        ", "outf", ".", "write", "(", "str", "(", "i", "[", "1", "]", ")", "+", "\"\\n\"", ")", "\n", "# print(top3)", "\n", "# print([i[1] for i in top3])", "\n", "", "full_text", "=", "\" \"", ".", "join", "(", "[", "sents", "[", "i", "[", "1", "]", "]", "for", "i", "in", "top3", "]", ")", "\n", "# print(full_text)", "\n", "return", "full_text", "\n", "\n"]], "home.repos.pwc.inspect_result.sebastianGehrmann_bottom-up-summary.None.prediction_to_text.read_tgt_file": [[127, 133], ["codecs.open", "tgt.append", "int", "l.split"], "function", ["None"], ["", "def", "read_tgt_file", "(", "fname", ")", ":", "\n", "    ", "tgt", "=", "[", "]", "\n", "with", "codecs", ".", "open", "(", "fname", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "for", "l", "in", "f", ":", "\n", "            ", "tgt", ".", "append", "(", "[", "int", "(", "i", ")", "for", "i", "in", "l", ".", "split", "(", ")", "]", "[", ":", "opt", ".", "prune", "]", ")", "\n", "", "", "return", "tgt", "\n", "\n"]], "home.repos.pwc.inspect_result.sebastianGehrmann_bottom-up-summary.None.prediction_to_text.main": [[135, 207], ["codecs.open", "tqdm.tqdm", "codecs.open.close", "codecs.open", "enumerate", "codecs.open", "codecs.open", "prediction_to_text.read_tgt_file", "enumerate", "json.loads", "print", "zip", "numpy.array", "numpy.array", "numpy.array", "sklearn.metrics.roc_curve", "print", "print", "print", "print", "print", "print", "codecs.open.close", "codecs.open.close", "codecs.open.write", "yhat.append", "yprobs.append", "sklearn.metrics.confusion_matrix", "sklearn.metrics.classification_report", "prediction_to_text.get_phrases", "len", "len", "zip", "prediction_to_text.get_sents", "np.array.append", "np.array.append", "np.array.append", "sklearn.metrics.auc", "sklearn.metrics.f1_score", "len", "prediction_to_text.get_three"], "function", ["home.repos.pwc.inspect_result.sebastianGehrmann_bottom-up-summary.None.prediction_to_text.read_tgt_file", "home.repos.pwc.inspect_result.sebastianGehrmann_bottom-up-summary.None.prediction_to_text.get_phrases", "home.repos.pwc.inspect_result.sebastianGehrmann_bottom-up-summary.None.prediction_to_text.get_sents", "home.repos.pwc.inspect_result.sebastianGehrmann_bottom-up-summary.None.prediction_to_text.get_three"], ["", "def", "main", "(", ")", ":", "\n", "\n", "# Get a line counter", "\n", "    ", "lcounter", "=", "0", "\n", "with", "codecs", ".", "open", "(", "opt", ".", "data", ",", "'r'", ",", "\"utf-8\"", ")", "as", "sfile", ":", "\n", "        ", "for", "ix", ",", "l", "in", "enumerate", "(", "sfile", ")", ":", "\n", "            ", "lcounter", "+=", "1", "\n", "\n", "", "", "resfile", "=", "codecs", ".", "open", "(", "opt", ".", "data", ",", "'r'", ")", "\n", "if", "opt", ".", "output", ":", "\n", "        ", "outfile", "=", "codecs", ".", "open", "(", "opt", ".", "output", ",", "'w'", ")", "\n", "outfile2", "=", "codecs", ".", "open", "(", "opt", ".", "output", "+", "\".track\"", ",", "\"w\"", ")", "\n", "\n", "", "if", "opt", ".", "tgt", ":", "\n", "        ", "y", "=", "read_tgt_file", "(", "opt", ".", "tgt", ")", "\n", "yhat", "=", "[", "]", "\n", "yprobs", "=", "[", "]", "\n", "\n", "", "for", "ix", ",", "line", "in", "tqdm", "(", "enumerate", "(", "resfile", ")", ",", "total", "=", "lcounter", ")", ":", "\n", "        ", "cline", "=", "json", ".", "loads", "(", "line", ")", "\n", "words", "=", "cline", "[", "'words'", "]", "\n", "# print(\"len words\", len(words))", "\n", "probs", "=", "[", "p", "[", "1", "]", "for", "p", "in", "cline", "[", "'class_probabilities'", "]", "[", ":", "len", "(", "words", ")", "]", "]", "\n", "tags", "=", "[", "1", "if", "p", ">", "opt", ".", "threshold", "else", "0", "for", "p", "in", "probs", "]", "\n", "\n", "if", "opt", ".", "output", ":", "\n", "            ", "if", "opt", ".", "style", "==", "\"phrases\"", ":", "\n", "                ", "pred", "=", "get_phrases", "(", "words", ",", "tags", ")", "\n", "", "elif", "opt", ".", "style", "==", "\"sentences\"", ":", "\n", "                ", "pred", "=", "get_sents", "(", "words", ",", "tags", ",", "probs", ")", "\n", "", "elif", "opt", ".", "style", "==", "\"threesent\"", ":", "\n", "                    ", "pred", "=", "get_three", "(", "words", ",", "outfile2", ",", "probs", ")", "\n", "", "outfile", ".", "write", "(", "pred", "+", "\"\\n\"", ")", "\n", "\n", "", "if", "opt", ".", "tgt", ":", "\n", "            ", "yhat", ".", "append", "(", "tags", ")", "\n", "yprobs", ".", "append", "(", "probs", ")", "\n", "\n", "# if ix > 150:", "\n", "#     break", "\n", "", "", "if", "opt", ".", "tgt", ":", "\n", "        ", "print", "(", "\"Evaluating Model...\"", ")", "\n", "y_flat", "=", "[", "]", "\n", "yhat_flat", "=", "[", "]", "\n", "probs_flat", "=", "[", "]", "\n", "for", "tgt", ",", "pred", ",", "pr", "in", "zip", "(", "y", ",", "yhat", ",", "yprobs", ")", ":", "\n", "            ", "if", "len", "(", "pred", ")", "!=", "len", "(", "tgt", ")", ":", "\n", "                ", "pass", "\n", "# print(\"woa\", len(pred), len(tgt))", "\n", "", "else", ":", "\n", "                ", "for", "t", ",", "p", ",", "cpr", "in", "zip", "(", "tgt", ",", "pred", ",", "pr", ")", ":", "\n", "                    ", "y_flat", ".", "append", "(", "t", ")", "\n", "yhat_flat", ".", "append", "(", "p", ")", "\n", "probs_flat", ".", "append", "(", "cpr", ")", "\n", "", "", "", "y_flat", "=", "np", ".", "array", "(", "y_flat", ")", "\n", "yhat_flat", "=", "np", ".", "array", "(", "yhat_flat", ")", "\n", "probs_flat", "=", "np", ".", "array", "(", "probs_flat", ")", "\n", "fpr", ",", "tpr", ",", "thresholds", "=", "roc_curve", "(", "y_flat", ",", "probs_flat", ")", "\n", "print", "(", "\"AUC: {:.1f}\"", ".", "format", "(", "auc", "(", "fpr", ",", "tpr", ")", "*", "100", ")", ")", "\n", "print", "(", "\"F1-Score (binary): {:.2f}\"", ".", "format", "(", "f1_score", "(", "y_flat", ",", "yhat_flat", ")", "*", "100", ")", ")", "\n", "print", "(", "\"Confusion Matrix:\"", ")", "\n", "print", "(", "confusion_matrix", "(", "y_flat", ",", "yhat_flat", ")", ")", "\n", "\n", "tgt_names", "=", "[", "\"O\"", ",", "\"I\"", "]", "\n", "print", "(", "\"Classification Report:\"", ")", "\n", "print", "(", "classification_report", "(", "y_flat", ",", "yhat_flat", ",", "target_names", "=", "tgt_names", ")", ")", "\n", "\n", "\n", "", "resfile", ".", "close", "(", ")", "\n", "if", "opt", ".", "output", ":", "\n", "        ", "outfile", ".", "close", "(", ")", "\n", "outfile2", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sebastianGehrmann_bottom-up-summary.None.preprocess_copy.compile_substring": [[34, 38], ["None"], "function", ["None"], ["def", "compile_substring", "(", "start", ",", "end", ",", "split", ")", ":", "\n", "    ", "if", "start", "==", "end", ":", "\n", "        ", "return", "split", "[", "start", "]", "\n", "", "return", "\" \"", ".", "join", "(", "split", "[", "start", ":", "end", "+", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sebastianGehrmann_bottom-up-summary.None.preprocess_copy.format_json": [[39, 41], ["json.dumps"], "function", ["None"], ["", "def", "format_json", "(", "s", ")", ":", "\n", "    ", "return", "json", ".", "dumps", "(", "{", "'sentence'", ":", "s", "}", ")", "+", "\"\\n\"", "\n", "\n"]], "home.repos.pwc.inspect_result.sebastianGehrmann_bottom-up-summary.None.preprocess_copy.splits": [[42, 44], ["s.split"], "function", ["None"], ["", "def", "splits", "(", "s", ",", "num", "=", "200", ")", ":", "\n", "    ", "return", "s", ".", "split", "(", ")", "[", ":", "num", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sebastianGehrmann_bottom-up-summary.None.preprocess_copy.make_BIO_tgt": [[45, 75], ["collections.Counter", "len", "preprocess_copy.compile_substring", "matches.extend", "preprocess_copy.compile_substring", "len", "matches.extend", "matches.extend"], "function", ["home.repos.pwc.inspect_result.sebastianGehrmann_bottom-up-summary.None.preprocess_copy.compile_substring", "home.repos.pwc.inspect_result.sebastianGehrmann_bottom-up-summary.None.preprocess_copy.compile_substring"], ["", "def", "make_BIO_tgt", "(", "s", ",", "t", ")", ":", "\n", "# tsplit = t.split()", "\n", "    ", "ssplit", "=", "s", "#.split()", "\n", "startix", "=", "0", "\n", "endix", "=", "0", "\n", "matches", "=", "[", "]", "\n", "matchstrings", "=", "Counter", "(", ")", "\n", "while", "endix", "<", "len", "(", "ssplit", ")", ":", "\n", "# last check is to make sure that phrases at end can be copied", "\n", "        ", "searchstring", "=", "compile_substring", "(", "startix", ",", "endix", ",", "ssplit", ")", "\n", "if", "searchstring", "in", "t", "and", "endix", "<", "len", "(", "ssplit", ")", "-", "1", ":", "\n", "            ", "endix", "+=", "1", "\n", "", "else", ":", "\n", "# only phrases, not words", "\n", "# uncomment the -1 if you only want phrases > len 1", "\n", "            ", "if", "startix", ">=", "endix", ":", "#-1:", "\n", "                ", "matches", ".", "extend", "(", "[", "\"0\"", "]", "*", "(", "endix", "-", "startix", "+", "1", ")", ")", "\n", "endix", "+=", "1", "\n", "", "else", ":", "\n", "# First one has to be 2 if you want phrases not words", "\n", "                ", "full_string", "=", "compile_substring", "(", "startix", ",", "endix", "-", "1", ",", "ssplit", ")", "\n", "if", "matchstrings", "[", "full_string", "]", ">=", "1", ":", "\n", "                    ", "matches", ".", "extend", "(", "[", "\"0\"", "]", "*", "(", "endix", "-", "startix", ")", ")", "\n", "", "else", ":", "\n", "                    ", "matches", ".", "extend", "(", "[", "\"1\"", "]", "*", "(", "endix", "-", "startix", ")", ")", "\n", "matchstrings", "[", "full_string", "]", "+=", "1", "\n", "#endix += 1", "\n", "", "", "startix", "=", "endix", "\n", "", "", "return", "\" \"", ".", "join", "(", "matches", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sebastianGehrmann_bottom-up-summary.None.preprocess_copy.main": [[77, 126], ["codecs.open", "codecs.open", "codecs.open", "codecs.open", "codecs.open", "tqdm.tqdm", "codecs.open.close", "codecs.open.close", "codecs.open.close", "codecs.open.close", "codecs.open.close", "codecs.open", "enumerate", "enumerate", "preprocess_copy.splits", "preprocess_copy.make_BIO_tgt", "zip", "codecs.open.write", "codecs.open.write", "codecs.open.write", "zip", "make_BIO_tgt.split", "codecs.open.write", "preprocess_copy.format_json", "len", "len", "t.split"], "function", ["home.repos.pwc.inspect_result.sebastianGehrmann_bottom-up-summary.None.preprocess_copy.splits", "home.repos.pwc.inspect_result.sebastianGehrmann_bottom-up-summary.None.preprocess_copy.make_BIO_tgt", "home.repos.pwc.inspect_result.sebastianGehrmann_bottom-up-summary.None.preprocess_copy.format_json"], ["", "def", "main", "(", ")", ":", "\n", "\n", "\t", "lcounter", "=", "0", "\n", "max_total", "=", "opt", ".", "num_examples", "\n", "\n", "SOURCE_PATH", "=", "opt", ".", "src", "\n", "TARGET_PATH", "=", "opt", ".", "tgt", "\n", "\n", "NEW_TARGET_PATH", "=", "opt", ".", "output", "+", "\".txt\"", "\n", "PRED_SRC_PATH", "=", "opt", ".", "output", "+", "\".pred.txt\"", "\n", "PRED_TGT_PATH", "=", "opt", ".", "output", "+", "\".src.txt\"", "\n", "\n", "with", "codecs", ".", "open", "(", "SOURCE_PATH", ",", "'r'", ",", "\"utf-8\"", ")", "as", "sfile", ":", "\n", "\t    ", "for", "ix", ",", "l", "in", "enumerate", "(", "sfile", ")", ":", "\n", "\t        ", "lcounter", "+=", "1", "\n", "if", "lcounter", ">=", "max_total", ":", "\n", "\t            ", "break", "\n", "\n", "", "", "", "sfile", "=", "codecs", ".", "open", "(", "SOURCE_PATH", ",", "'r'", ",", "\"utf-8\"", ")", "\n", "tfile", "=", "codecs", ".", "open", "(", "TARGET_PATH", ",", "'r'", ",", "\"utf-8\"", ")", "\n", "outf", "=", "codecs", ".", "open", "(", "NEW_TARGET_PATH", ",", "'w'", ",", "\"utf-8\"", ",", "buffering", "=", "1", ")", "\n", "outf_tgt_src", "=", "codecs", ".", "open", "(", "PRED_SRC_PATH", ",", "'w'", ",", "\"utf-8\"", ",", "buffering", "=", "1", ")", "\n", "outf_tgt_tgt", "=", "codecs", ".", "open", "(", "PRED_TGT_PATH", ",", "'w'", ",", "\"utf-8\"", ",", "buffering", "=", "1", ")", "\n", "\n", "actual_lines", "=", "0", "\n", "for", "ix", ",", "(", "s", ",", "t", ")", "in", "tqdm", "(", "enumerate", "(", "zip", "(", "sfile", ",", "tfile", ")", ")", ",", "total", "=", "lcounter", ")", ":", "\n", "\t    ", "ssplit", "=", "splits", "(", "s", ",", "num", "=", "opt", ".", "prune", ")", "\n", "# Skip empty lines", "\n", "if", "len", "(", "ssplit", ")", "<", "2", "or", "len", "(", "t", ".", "split", "(", ")", ")", "<", "2", ":", "\n", "\t        ", "continue", "\n", "", "else", ":", "\n", "\t        ", "actual_lines", "+=", "1", "\n", "# Build the target", "\n", "", "tgt", "=", "make_BIO_tgt", "(", "ssplit", ",", "t", ")", "\n", "# Format for allennlp", "\n", "for", "token", ",", "tag", "in", "zip", "(", "ssplit", ",", "tgt", ".", "split", "(", ")", ")", ":", "\n", "\t        ", "outf", ".", "write", "(", "token", "+", "\"###\"", "+", "tag", "+", "\" \"", ")", "\n", "", "outf", ".", "write", "(", "\"\\n\"", ")", "\n", "# Format for predicting with allennlp", "\n", "outf_tgt_src", ".", "write", "(", "format_json", "(", "\" \"", ".", "join", "(", "ssplit", ")", ")", ")", "\n", "outf_tgt_tgt", ".", "write", "(", "tgt", "+", "\"\\n\"", ")", "\n", "if", "actual_lines", ">=", "max_total", ":", "\n", "\t        ", "break", "\n", "\n", "", "", "sfile", ".", "close", "(", ")", "\n", "tfile", ".", "close", "(", ")", "\n", "outf", ".", "close", "(", ")", "\n", "outf_tgt_src", ".", "close", "(", ")", "\n", "outf_tgt_tgt", ".", "close", "(", ")", "\n", "\n"]]}