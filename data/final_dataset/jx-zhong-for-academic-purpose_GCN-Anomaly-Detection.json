{"home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.extract_tsn.kinetics_extract_flow.build_net": [[29, 33], ["pyActionRecog.action_caffe.CaffeNet", "len", "multiprocessing.current_process"], "function", ["None"], ["def", "build_net", "(", ")", ":", "\n", "    ", "global", "net", "\n", "gpu_id", "=", "gpu_list", "[", "current_process", "(", ")", ".", "_identity", "[", "0", "]", "%", "len", "(", "gpu_list", ")", "]", "\n", "net", "=", "CaffeNet", "(", "deploy_file", ",", "caffemodel", ",", "gpu_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.extract_tsn.kinetics_extract_flow.eval_video": [[35, 94], ["os.path.basename", "print", "os.listdir", "os.path.join", "os.path.isfile", "range", "numpy.savez", "print", "len", "os.path.join", "print", "frame_scores.append", "ValueError", "os.path.basename().replace", "range", "numpy.array().mean", "cv2.imread", "net.predict_single_frame", "range", "numpy.array().mean", "net.predict_single_flow_stack", "os.path.basename", "cv2.imread", "net.predict_single_flow_stack.append", "os.path.join", "net.predict_single_flow_stack.append", "min", "flow_stack.append", "flow_stack.append", "os.path.join", "net.predict_single_frame", "numpy.array", "min", "flow_stack.append", "flow_stack.append", "net.predict_single_flow_stack", "numpy.array", "xrange", "cv2.imread", "cv2.imread", "xrange", "cv2.imread", "cv2.imread", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.pyActionRecog.action_caffe.CaffeNet.predict_single_frame", "home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.pyActionRecog.action_caffe.CaffeNet.predict_single_flow_stack", "home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.pyActionRecog.action_caffe.CaffeNet.predict_single_frame", "home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.pyActionRecog.action_caffe.CaffeNet.predict_single_flow_stack"], ["", "def", "eval_video", "(", "video_frame_path", ")", ":", "\n", "    ", "global", "net", "\n", "vid", "=", "os", ".", "path", ".", "basename", "(", "video_frame_path", ")", "\n", "print", "(", "\"video {} doing\"", ".", "format", "(", "vid", ")", ")", "\n", "all_files", "=", "os", ".", "listdir", "(", "video_frame_path", ")", "\n", "frame_cnt", "=", "len", "(", "all_files", ")", "//", "3", "\n", "if", "modality", "==", "\"rgb\"", ":", "\n", "        ", "stack_depth", "=", "1", "\n", "", "elif", "modality", "==", "\"flow\"", ":", "\n", "        ", "stack_depth", "=", "5", "\n", "frame_cnt", "-=", "1", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "modality", ")", "\n", "", "output_file", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "join", "(", "output_folder", ",", "os", ".", "path", ".", "basename", "(", "caffemodel", ")", ".", "replace", "(", "\".caffemodel\"", ",", "\"\"", ")", ")", ",", "vid", "+", "\"_\"", "+", "modality", "+", "\".npz\"", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "output_file", ")", ":", "\n", "        ", "print", "(", "\"{} exists!\"", ".", "format", "(", "output_file", ")", ")", "\n", "return", "\n", "", "frame_ticks", "=", "range", "(", "1", ",", "frame_cnt", "+", "1", ",", "step", ")", "\n", "frame_scores", "=", "[", "]", "\n", "for", "tick", "in", "frame_ticks", ":", "\n", "        ", "if", "modality", "==", "\"rgb\"", ":", "\n", "            ", "if", "dense_sample", ":", "\n", "                ", "scores", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "step", ",", "stack_depth", ")", ":", "\n", "                    ", "if", "i", "+", "tick", ">", "frame_cnt", ":", "\n", "                        ", "continue", "\n", "", "name", "=", "\"{}{:06d}.jpg\"", ".", "format", "(", "rgb_prefix", ",", "tick", "+", "i", ")", "\n", "frame", "=", "cv2", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "video_frame_path", ",", "name", ")", ",", "cv2", ".", "IMREAD_COLOR", ")", "\n", "scores", ".", "append", "(", "net", ".", "predict_single_frame", "(", "[", "frame", ",", "]", ",", "score_name", ",", "frame_size", "=", "(", "340", ",", "256", ")", ")", ")", "\n", "", "scores", "=", "np", ".", "array", "(", "scores", ")", ".", "mean", "(", "axis", "=", "0", ")", "\n", "", "else", ":", "\n", "                ", "name", "=", "\"{}{:06d}.jpg\"", ".", "format", "(", "rgb_prefix", ",", "tick", ")", "\n", "frame", "=", "cv2", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "video_frame_path", ",", "name", ")", ",", "cv2", ".", "IMREAD_COLOR", ")", "\n", "scores", "=", "net", ".", "predict_single_frame", "(", "[", "frame", ",", "]", ",", "score_name", ",", "frame_size", "=", "(", "340", ",", "256", ")", ")", "\n", "", "", "if", "modality", "==", "\"flow\"", ":", "\n", "            ", "if", "dense_sample", ":", "\n", "                ", "scores", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "step", ",", "stack_depth", ")", ":", "\n", "                    ", "frame_idx", "=", "[", "min", "(", "frame_cnt", ",", "tick", "+", "i", "+", "offset", ")", "for", "offset", "in", "xrange", "(", "stack_depth", ")", "]", "\n", "flow_stack", "=", "[", "]", "\n", "for", "idx", "in", "frame_idx", ":", "\n", "                        ", "x_name", "=", "\"{}{:06d}.jpg\"", ".", "format", "(", "flow_x_prefix", ",", "idx", ")", "\n", "y_name", "=", "\"{}{:06d}.jpg\"", ".", "format", "(", "flow_y_prefix", ",", "idx", ")", "\n", "flow_stack", ".", "append", "(", "cv2", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "video_frame_path", ",", "x_name", ")", ",", "cv2", ".", "IMREAD_GRAYSCALE", ")", ")", "\n", "flow_stack", ".", "append", "(", "cv2", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "video_frame_path", ",", "y_name", ")", ",", "cv2", ".", "IMREAD_GRAYSCALE", ")", ")", "\n", "", "scores", ".", "append", "(", "net", ".", "predict_single_flow_stack", "(", "flow_stack", ",", "score_name", ",", "frame_size", "=", "(", "340", ",", "256", ")", ")", ")", "\n", "", "scores", "=", "np", ".", "array", "(", "scores", ")", ".", "mean", "(", "axis", "=", "0", ")", "\n", "", "else", ":", "\n", "                ", "frame_idx", "=", "[", "min", "(", "frame_cnt", ",", "tick", "+", "offset", ")", "for", "offset", "in", "xrange", "(", "stack_depth", ")", "]", "\n", "flow_stack", "=", "[", "]", "\n", "for", "idx", "in", "frame_idx", ":", "\n", "                    ", "x_name", "=", "\"{}{:06d}.jpg\"", ".", "format", "(", "flow_x_prefix", ",", "idx", ")", "\n", "y_name", "=", "\"{}{:06d}.jpg\"", ".", "format", "(", "flow_y_prefix", ",", "idx", ")", "\n", "flow_stack", ".", "append", "(", "cv2", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "video_frame_path", ",", "x_name", ")", ",", "cv2", ".", "IMREAD_GRAYSCALE", ")", ")", "\n", "flow_stack", ".", "append", "(", "cv2", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "video_frame_path", ",", "y_name", ")", ",", "cv2", ".", "IMREAD_GRAYSCALE", ")", ")", "\n", "", "scores", "=", "net", ".", "predict_single_flow_stack", "(", "flow_stack", ",", "score_name", ",", "frame_size", "=", "(", "340", ",", "256", ")", ")", "\n", "", "", "frame_scores", ".", "append", "(", "scores", ")", "\n", "", "np", ".", "savez", "(", "output_file", ",", "scores", "=", "frame_scores", ",", "begin_idx", "=", "frame_ticks", ")", "\n", "print", "(", "\"video {} done\"", ".", "format", "(", "vid", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.extract_tsn.kinetics_extract_rgb.build_net": [[30, 34], ["pyActionRecog.action_caffe.CaffeNet", "len", "multiprocessing.current_process"], "function", ["None"], ["def", "build_net", "(", ")", ":", "\n", "    ", "global", "net", "\n", "gpu_id", "=", "gpu_list", "[", "current_process", "(", ")", ".", "_identity", "[", "0", "]", "%", "len", "(", "gpu_list", ")", "]", "\n", "net", "=", "CaffeNet", "(", "deploy_file", ",", "caffemodel", ",", "gpu_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.extract_tsn.kinetics_extract_rgb.eval_video": [[36, 95], ["os.path.basename", "print", "os.listdir", "os.path.join", "os.path.isfile", "range", "numpy.savez", "print", "len", "os.path.join", "print", "frame_scores.append", "ValueError", "os.path.basename().replace", "range", "numpy.array().mean", "cv2.imread", "net.predict_single_frame", "range", "numpy.array().mean", "net.predict_single_flow_stack", "os.path.basename", "cv2.imread", "net.predict_single_flow_stack.append", "os.path.join", "net.predict_single_flow_stack.append", "min", "flow_stack.append", "flow_stack.append", "os.path.join", "net.predict_single_frame", "numpy.array", "min", "flow_stack.append", "flow_stack.append", "net.predict_single_flow_stack", "numpy.array", "xrange", "cv2.imread", "cv2.imread", "xrange", "cv2.imread", "cv2.imread", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.pyActionRecog.action_caffe.CaffeNet.predict_single_frame", "home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.pyActionRecog.action_caffe.CaffeNet.predict_single_flow_stack", "home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.pyActionRecog.action_caffe.CaffeNet.predict_single_frame", "home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.pyActionRecog.action_caffe.CaffeNet.predict_single_flow_stack"], ["", "def", "eval_video", "(", "video_frame_path", ")", ":", "\n", "    ", "global", "net", "\n", "vid", "=", "os", ".", "path", ".", "basename", "(", "video_frame_path", ")", "\n", "print", "(", "\"video {} doing\"", ".", "format", "(", "vid", ")", ")", "\n", "all_files", "=", "os", ".", "listdir", "(", "video_frame_path", ")", "\n", "frame_cnt", "=", "len", "(", "all_files", ")", "//", "3", "\n", "if", "modality", "==", "\"rgb\"", ":", "\n", "        ", "stack_depth", "=", "1", "\n", "", "elif", "modality", "==", "\"flow\"", ":", "\n", "        ", "stack_depth", "=", "5", "\n", "frame_cnt", "-=", "1", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "modality", ")", "\n", "", "output_file", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "join", "(", "output_folder", ",", "os", ".", "path", ".", "basename", "(", "caffemodel", ")", ".", "replace", "(", "\".caffemodel\"", ",", "\"\"", ")", ")", ",", "vid", "+", "\"_\"", "+", "modality", "+", "\".npz\"", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "output_file", ")", ":", "\n", "        ", "print", "(", "\"{} exists!\"", ".", "format", "(", "output_file", ")", ")", "\n", "return", "\n", "", "frame_ticks", "=", "range", "(", "1", ",", "frame_cnt", "+", "1", ",", "step", ")", "\n", "frame_scores", "=", "[", "]", "\n", "for", "tick", "in", "frame_ticks", ":", "\n", "        ", "if", "modality", "==", "\"rgb\"", ":", "\n", "            ", "if", "dense_sample", ":", "\n", "                ", "scores", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "step", ",", "stack_depth", ")", ":", "\n", "                    ", "if", "i", "+", "tick", ">", "frame_cnt", ":", "\n", "                        ", "continue", "\n", "", "name", "=", "\"{}{:06d}.jpg\"", ".", "format", "(", "rgb_prefix", ",", "tick", "+", "i", ")", "\n", "frame", "=", "cv2", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "video_frame_path", ",", "name", ")", ",", "cv2", ".", "IMREAD_COLOR", ")", "\n", "scores", ".", "append", "(", "net", ".", "predict_single_frame", "(", "[", "frame", ",", "]", ",", "score_name", ",", "frame_size", "=", "(", "340", ",", "256", ")", ")", ")", "\n", "", "scores", "=", "np", ".", "array", "(", "scores", ")", ".", "mean", "(", "axis", "=", "0", ")", "\n", "", "else", ":", "\n", "                ", "name", "=", "\"{}{:06d}.jpg\"", ".", "format", "(", "rgb_prefix", ",", "tick", ")", "\n", "frame", "=", "cv2", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "video_frame_path", ",", "name", ")", ",", "cv2", ".", "IMREAD_COLOR", ")", "\n", "scores", "=", "net", ".", "predict_single_frame", "(", "[", "frame", ",", "]", ",", "score_name", ",", "frame_size", "=", "(", "340", ",", "256", ")", ")", "\n", "", "", "if", "modality", "==", "\"flow\"", ":", "\n", "            ", "if", "dense_sample", ":", "\n", "                ", "scores", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "step", ",", "stack_depth", ")", ":", "\n", "                    ", "frame_idx", "=", "[", "min", "(", "frame_cnt", ",", "tick", "+", "i", "+", "offset", ")", "for", "offset", "in", "xrange", "(", "stack_depth", ")", "]", "\n", "flow_stack", "=", "[", "]", "\n", "for", "idx", "in", "frame_idx", ":", "\n", "                        ", "x_name", "=", "\"{}{:06d}.jpg\"", ".", "format", "(", "flow_x_prefix", ",", "idx", ")", "\n", "y_name", "=", "\"{}{:06d}.jpg\"", ".", "format", "(", "flow_y_prefix", ",", "idx", ")", "\n", "flow_stack", ".", "append", "(", "cv2", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "video_frame_path", ",", "x_name", ")", ",", "cv2", ".", "IMREAD_GRAYSCALE", ")", ")", "\n", "flow_stack", ".", "append", "(", "cv2", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "video_frame_path", ",", "y_name", ")", ",", "cv2", ".", "IMREAD_GRAYSCALE", ")", ")", "\n", "", "scores", ".", "append", "(", "net", ".", "predict_single_flow_stack", "(", "flow_stack", ",", "score_name", ",", "frame_size", "=", "(", "340", ",", "256", ")", ")", ")", "\n", "", "scores", "=", "np", ".", "array", "(", "scores", ")", ".", "mean", "(", "axis", "=", "0", ")", "\n", "", "else", ":", "\n", "                ", "frame_idx", "=", "[", "min", "(", "frame_cnt", ",", "tick", "+", "offset", ")", "for", "offset", "in", "xrange", "(", "stack_depth", ")", "]", "\n", "flow_stack", "=", "[", "]", "\n", "for", "idx", "in", "frame_idx", ":", "\n", "                    ", "x_name", "=", "\"{}{:06d}.jpg\"", ".", "format", "(", "flow_x_prefix", ",", "idx", ")", "\n", "y_name", "=", "\"{}{:06d}.jpg\"", ".", "format", "(", "flow_y_prefix", ",", "idx", ")", "\n", "flow_stack", ".", "append", "(", "cv2", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "video_frame_path", ",", "x_name", ")", ",", "cv2", ".", "IMREAD_GRAYSCALE", ")", ")", "\n", "flow_stack", ".", "append", "(", "cv2", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "video_frame_path", ",", "y_name", ")", ",", "cv2", ".", "IMREAD_GRAYSCALE", ")", ")", "\n", "", "scores", "=", "net", ".", "predict_single_flow_stack", "(", "flow_stack", ",", "score_name", ",", "frame_size", "=", "(", "340", ",", "256", ")", ")", "\n", "", "", "frame_scores", ".", "append", "(", "scores", ")", "\n", "", "np", ".", "savez", "(", "output_file", ",", "scores", "=", "frame_scores", ",", "begin_idx", "=", "frame_ticks", ")", "\n", "print", "(", "\"video {} done\"", ".", "format", "(", "vid", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.pyActionRecog.action_caffe.CaffeNet.__init__": [[11, 33], ["caffe.set_mode_gpu", "caffe.set_device", "caffe.Net", "caffe.io.Transformer"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "net_proto", ",", "net_weights", ",", "device_id", ",", "input_size", "=", "None", ")", ":", "\n", "        ", "caffe", ".", "set_device", "(", "device_id", ")", "\n", "caffe", ".", "set_mode_gpu", "(", ")", "\n", "self", ".", "_net", "=", "caffe", ".", "Net", "(", "net_proto", ",", "net_weights", ",", "caffe", ".", "TEST", ")", "\n", "\n", "input_shape", "=", "self", ".", "_net", ".", "blobs", "[", "'data'", "]", ".", "data", ".", "shape", "\n", "\n", "if", "input_size", "is", "not", "None", ":", "\n", "            ", "input_shape", "=", "input_shape", "[", ":", "2", "]", "+", "input_size", "\n", "\n", "", "transformer", "=", "caffe", ".", "io", ".", "Transformer", "(", "{", "'data'", ":", "input_shape", "}", ")", "\n", "\n", "if", "self", ".", "_net", ".", "blobs", "[", "'data'", "]", ".", "data", ".", "shape", "[", "1", "]", "==", "3", ":", "\n", "            ", "transformer", ".", "set_transpose", "(", "'data'", ",", "(", "2", ",", "0", ",", "1", ")", ")", "# move image channels to outermost dimension", "\n", "transformer", ".", "set_mean", "(", "'data'", ",", "np", ".", "array", "(", "[", "104", ",", "117", ",", "123", "]", ")", ")", "# subtract the dataset-mean value in each channel", "\n", "", "else", ":", "\n", "            ", "pass", "# non RGB data need not use transformer", "\n", "\n", "", "self", ".", "_transformer", "=", "transformer", "\n", "\n", "self", ".", "_sample_shape", "=", "self", ".", "_net", ".", "blobs", "[", "'data'", "]", ".", "data", ".", "shape", "\n", "\n", "", "def", "predict_single_frame", "(", "self", ",", "frame", ",", "score_name", ",", "over_sample", "=", "True", ",", "multiscale", "=", "None", ",", "frame_size", "=", "None", ")", ":", "\n"]], "home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.pyActionRecog.action_caffe.CaffeNet.predict_single_frame": [[34, 61], ["data.transpose.transpose.transpose", "action_caffe.CaffeNet._net.blobs[].reshape", "action_caffe.CaffeNet._net.reshape", "utils.io.fast_list2arr", "action_caffe.CaffeNet._net.forward", "out[].copy", "action_caffe.CaffeNet._net.forward", "cv2.resize", "caffe.io.oversample", "out[].copy", "out[].copy", "caffe.io.oversample.extend", "cv2.resize", "caffe.io.oversample"], "methods", ["home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.utils.io.fast_list2arr", "home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.pygcn.experiment_c3d.ClusteringLoss.forward", "home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.pygcn.experiment_c3d.ClusteringLoss.forward"], ["\n", "        ", "if", "frame_size", "is", "not", "None", ":", "\n", "            ", "frame", "=", "[", "cv2", ".", "resize", "(", "x", ",", "frame_size", ")", "for", "x", "in", "frame", "]", "\n", "\n", "", "if", "over_sample", ":", "\n", "            ", "if", "multiscale", "is", "None", ":", "\n", "                ", "os_frame", "=", "oversample", "(", "frame", ",", "(", "self", ".", "_sample_shape", "[", "2", "]", ",", "self", ".", "_sample_shape", "[", "3", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "os_frame", "=", "[", "]", "\n", "for", "scale", "in", "multiscale", ":", "\n", "                    ", "resized_frame", "=", "[", "cv2", ".", "resize", "(", "x", ",", "(", "0", ",", "0", ")", ",", "fx", "=", "1.0", "/", "scale", ",", "fy", "=", "1.0", "/", "scale", ")", "for", "x", "in", "frame", "]", "\n", "os_frame", ".", "extend", "(", "oversample", "(", "resized_frame", ",", "(", "self", ".", "_sample_shape", "[", "2", "]", ",", "self", ".", "_sample_shape", "[", "3", "]", ")", ")", ")", "\n", "", "", "", "else", ":", "\n", "            ", "os_frame", "=", "fast_list2arr", "(", "frame", ")", "\n", "", "data", "=", "fast_list2arr", "(", "[", "self", ".", "_transformer", ".", "preprocess", "(", "'data'", ",", "x", ")", "for", "x", "in", "os_frame", "]", ")", "\n", "\n", "self", ".", "_net", ".", "blobs", "[", "'data'", "]", ".", "reshape", "(", "*", "data", ".", "shape", ")", "\n", "self", ".", "_net", ".", "reshape", "(", ")", "\n", "out", "=", "self", ".", "_net", ".", "forward", "(", "blobs", "=", "[", "score_name", ",", "]", ",", "data", "=", "data", ")", "\n", "return", "out", "[", "score_name", "]", ".", "copy", "(", ")", "\n", "\n", "", "def", "predict_single_flow_stack", "(", "self", ",", "frame", ",", "score_name", ",", "over_sample", "=", "True", ",", "frame_size", "=", "None", ")", ":", "\n", "\n", "        ", "if", "frame_size", "is", "not", "None", ":", "\n", "            ", "frame", "=", "fast_list2arr", "(", "[", "cv2", ".", "resize", "(", "x", ",", "frame_size", ")", "for", "x", "in", "frame", "]", ")", "\n", "", "else", ":", "\n", "            ", "frame", "=", "fast_list2arr", "(", "frame", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.pyActionRecog.action_caffe.CaffeNet.predict_single_flow_stack": [[62, 84], ["action_caffe.CaffeNet._net.blobs[].reshape", "action_caffe.CaffeNet._net.reshape", "utils.io.fast_list2arr", "utils.io.fast_list2arr", "utils.io.flow_stack_oversample", "utils.io.fast_list2arr", "numpy.float32", "action_caffe.CaffeNet._net.forward", "out[].copy", "action_caffe.CaffeNet._net.forward", "out[].copy", "out[].copy", "cv2.resize"], "methods", ["home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.utils.io.fast_list2arr", "home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.utils.io.fast_list2arr", "home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.utils.io.flow_stack_oversample", "home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.utils.io.fast_list2arr", "home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.pygcn.experiment_c3d.ClusteringLoss.forward", "home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.pygcn.experiment_c3d.ClusteringLoss.forward"], ["", "if", "over_sample", ":", "\n", "            ", "os_frame", "=", "flow_stack_oversample", "(", "frame", ",", "(", "self", ".", "_sample_shape", "[", "2", "]", ",", "self", ".", "_sample_shape", "[", "3", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "os_frame", "=", "fast_list2arr", "(", "[", "frame", "]", ")", "\n", "\n", "", "data", "=", "os_frame", "-", "np", ".", "float32", "(", "128.0", ")", "\n", "\n", "self", ".", "_net", ".", "blobs", "[", "'data'", "]", ".", "reshape", "(", "*", "data", ".", "shape", ")", "\n", "self", ".", "_net", ".", "reshape", "(", ")", "\n", "out", "=", "self", ".", "_net", ".", "forward", "(", "blobs", "=", "[", "score_name", ",", "]", ",", "data", "=", "data", ")", "\n", "return", "out", "[", "score_name", "]", ".", "copy", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.pyActionRecog.action_parrots.ParrotsNet.__init__": [[10, 24], ["pyparrots.Runner", "action_parrots.ParrotsNet._parrots_runner.setup", "action_parrots.ParrotsNet._parrots_session.flow", "flow.get_data_spec"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "parrots_session_file", ",", "input_size", "=", "None", ")", ":", "\n", "\n", "        ", "self", ".", "_parrots_runner", "=", "dnn", ".", "Runner", "(", "parrots_session_file", ",", "extract", "=", "True", ")", "\n", "self", ".", "_parrots_runner", ".", "setup", "(", ")", "\n", "self", ".", "_parrots_session", "=", "self", ".", "_parrots_runner", ".", "session", "\n", "\n", "with", "self", ".", "_parrots_session", ".", "flow", "(", "'main'", ")", "as", "flow", ":", "\n", "            ", "input_shape", "=", "flow", ".", "get_data_spec", "(", "'data'", ")", ".", "shape", "[", ":", ":", "-", "1", "]", "\n", "\n", "", "if", "input_size", "is", "not", "None", ":", "\n", "            ", "input_shape", "=", "input_shape", "[", ":", "2", "]", "+", "input_size", "\n", "\n", "", "self", ".", "_sample_shape", "=", "input_shape", "\n", "self", ".", "_channel_mean", "=", "[", "104", ",", "117", ",", "123", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.pyActionRecog.action_parrots.ParrotsNet.predict_rgb_frame_list": [[25, 68], ["numpy.zeros", "xrange", "utils.io.rgb_to_parrots", "min", "numpy.concatenate", "numpy.concatenate.reshape", "numpy.concatenate", "cv2.resize", "numpy.concatenate", "numpy.concatenate", "action_parrots.ParrotsNet._parrots_session.flow", "flow.set_input", "flow.forward", "score_list.append", "numpy.concatenate.extend", "numpy.zeros.astype", "utils.io.rgb_to_parrots", "cv2.resize", "numpy.concatenate", "len", "flow.data().value", "utils.io.rgb_to_parrots", "flow.data"], "methods", ["home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.utils.io.rgb_to_parrots", "home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.pygcn.experiment_c3d.ClusteringLoss.forward", "home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.utils.io.rgb_to_parrots", "home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.utils.io.rgb_to_parrots"], ["", "def", "predict_rgb_frame_list", "(", "self", ",", "frame_list", ",", "\n", "score_name", ",", "over_sample", "=", "True", ",", "\n", "multiscale", "=", "None", ",", "frame_size", "=", "None", ")", ":", "\n", "\n", "        ", "if", "frame_size", "is", "not", "None", ":", "\n", "            ", "frame_list", "=", "[", "cv2", ".", "resize", "(", "x", ",", "frame_size", ")", "for", "x", "in", "frame_list", "]", "\n", "\n", "", "if", "over_sample", ":", "\n", "            ", "if", "multiscale", "is", "None", ":", "\n", "                ", "os_frame", "=", "np", ".", "concatenate", "(", "[", "rgb_to_parrots", "(", "x", ",", "mean_val", "=", "self", ".", "_channel_mean", ",", "\n", "crop_size", "=", "(", "self", ".", "_sample_shape", "[", "2", "]", ",", "self", ".", "_sample_shape", "[", "3", "]", ")", ")", "\n", "for", "x", "in", "frame_list", "]", ",", "axis", "=", "0", ")", "\n", "", "else", ":", "\n", "                ", "os_frame", "=", "[", "]", "\n", "for", "scale", "in", "multiscale", ":", "\n", "                    ", "resized_frame_list", "=", "[", "cv2", ".", "resize", "(", "x", ",", "(", "0", ",", "0", ")", ",", "fx", "=", "1.0", "/", "scale", ",", "fy", "=", "1.0", "/", "scale", ")", "for", "x", "in", "frame_list", "]", "\n", "os_frame", ".", "extend", "(", "np", ".", "concatenate", "(", "[", "rgb_to_parrots", "(", "x", ",", "mean_val", "=", "self", ".", "_channel_mean", ",", "\n", "crop_size", "=", "(", "\n", "self", ".", "_sample_shape", "[", "2", "]", ",", "self", ".", "_sample_shape", "[", "3", "]", ")", ")", "\n", "for", "x", "in", "resized_frame_list", "]", ")", ")", "\n", "", "os_frame", "=", "np", ".", "concatenate", "(", "os_frame", ",", "axis", "=", "0", ")", "\n", "", "", "else", ":", "\n", "            ", "os_frame", "=", "rgb_to_parrots", "(", "False", ")", "\n", "\n", "", "bs", "=", "self", ".", "_sample_shape", "[", "0", "]", "\n", "\n", "feed_data", "=", "np", ".", "zeros", "(", "self", ".", "_sample_shape", ")", "\n", "\n", "score_list", "=", "[", "]", "\n", "for", "offset", "in", "xrange", "(", "0", ",", "os_frame", ".", "shape", "[", "0", "]", ",", "bs", ")", ":", "\n", "            ", "step", "=", "min", "(", "bs", ",", "os_frame", ".", "shape", "[", "0", "]", "-", "offset", ")", "\n", "feed_data", "[", ":", "step", ",", "...", "]", "=", "os_frame", "[", "offset", ":", "offset", "+", "step", ",", "...", "]", "\n", "\n", "with", "self", ".", "_parrots_session", ".", "flow", "(", "\"main\"", ")", "as", "flow", ":", "\n", "                ", "flow", ".", "set_input", "(", "'data'", ",", "feed_data", ".", "astype", "(", "np", ".", "float32", ",", "order", "=", "'C'", ")", ")", "\n", "flow", ".", "forward", "(", ")", "\n", "score_list", ".", "append", "(", "flow", ".", "data", "(", "score_name", ")", ".", "value", "(", ")", ".", "T", "[", ":", "step", "]", ")", "\n", "\n", "", "", "if", "over_sample", ":", "\n", "            ", "tmp", "=", "np", ".", "concatenate", "(", "score_list", ",", "axis", "=", "0", ")", "\n", "return", "tmp", ".", "reshape", "(", "(", "len", "(", "os_frame", ")", "/", "10", ",", "10", ",", "score_list", "[", "0", "]", ".", "shape", "[", "-", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "return", "np", ".", "concatenate", "(", "score_list", ",", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.pyActionRecog.action_parrots.ParrotsNet.predict_flow_stack_list": [[69, 102], ["numpy.zeros", "xrange", "xrange", "numpy.concatenate", "numpy.array", "min", "numpy.concatenate", "numpy.concatenate.reshape", "numpy.concatenate", "len", "numpy.array", "utils.io.flow_stack_oversample", "action_parrots.ParrotsNet._parrots_session.flow", "flow.set_input", "flow.forward", "score_list.append", "numpy.zeros.astype", "cv2.resize", "len", "flow.data().value", "flow.data"], "methods", ["home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.utils.io.flow_stack_oversample", "home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.pygcn.experiment_c3d.ClusteringLoss.forward"], ["", "", "def", "predict_flow_stack_list", "(", "self", ",", "flow_stack_list", ",", "score_name", ",", "over_sample", "=", "True", ",", "frame_size", "=", "None", ")", ":", "\n", "\n", "        ", "if", "frame_size", "is", "not", "None", ":", "\n", "            ", "for", "i", "in", "xrange", "(", "len", "(", "flow_stack_list", ")", ")", ":", "\n", "                ", "flow_stack_list", "[", "i", "]", "=", "np", ".", "array", "(", "[", "cv2", ".", "resize", "(", "x", ",", "frame_size", ")", "for", "x", "in", "flow_stack_list", "[", "i", "]", "]", ")", "\n", "\n", "", "", "if", "over_sample", ":", "\n", "            ", "tmp", "=", "[", "flow_stack_oversample", "(", "stack", ",", "(", "self", ".", "_sample_shape", "[", "2", "]", ",", "self", ".", "_sample_shape", "[", "3", "]", ")", ")", "\n", "for", "stack", "in", "flow_stack_list", "]", "\n", "os_frame", "=", "np", ".", "concatenate", "(", "tmp", ",", "axis", "=", "0", ")", "\n", "", "else", ":", "\n", "            ", "os_frame", "=", "np", ".", "array", "(", "flow_stack_list", ")", "\n", "\n", "", "os_frame", "-=", "128", "\n", "\n", "bs", "=", "self", ".", "_sample_shape", "[", "0", "]", "\n", "feed_data", "=", "np", ".", "zeros", "(", "self", ".", "_sample_shape", ")", "\n", "\n", "score_list", "=", "[", "]", "\n", "for", "offset", "in", "xrange", "(", "0", ",", "os_frame", ".", "shape", "[", "0", "]", ",", "bs", ")", ":", "\n", "            ", "step", "=", "min", "(", "bs", ",", "os_frame", ".", "shape", "[", "0", "]", "-", "offset", ")", "\n", "feed_data", "[", ":", "step", ",", "...", "]", "=", "os_frame", "[", "offset", ":", "offset", "+", "step", ",", "...", "]", "\n", "\n", "with", "self", ".", "_parrots_session", ".", "flow", "(", "\"main\"", ")", "as", "flow", ":", "\n", "                ", "flow", ".", "set_input", "(", "'data'", ",", "feed_data", ".", "astype", "(", "np", ".", "float32", ",", "order", "=", "'C'", ")", ")", "\n", "flow", ".", "forward", "(", ")", "\n", "score_list", ".", "append", "(", "flow", ".", "data", "(", "score_name", ")", ".", "value", "(", ")", ".", "T", "[", ":", "step", "]", ")", "\n", "\n", "", "", "if", "over_sample", ":", "\n", "            ", "tmp", "=", "np", ".", "concatenate", "(", "score_list", ",", "axis", "=", "0", ")", "\n", "return", "tmp", ".", "reshape", "(", "(", "len", "(", "os_frame", ")", "/", "10", ",", "10", ",", "score_list", "[", "0", "]", ".", "shape", "[", "-", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "return", "np", ".", "concatenate", "(", "score_list", ",", "axis", "=", "0", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.pyActionRecog.anet_db.Instance.__init__": [[9, 19], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "idx", ",", "anno", ",", "vid_id", ",", "vid_info", ",", "name_num_mapping", ")", ":", "\n", "        ", "self", ".", "_starting", ",", "self", ".", "_ending", "=", "anno", "[", "'segment'", "]", "[", "0", "]", ",", "anno", "[", "'segment'", "]", "[", "1", "]", "\n", "self", ".", "_str_label", "=", "anno", "[", "'label'", "]", "\n", "self", ".", "_total_duration", "=", "vid_info", "[", "'duration'", "]", "\n", "self", ".", "_idx", "=", "idx", "\n", "self", ".", "_vid_id", "=", "vid_id", "\n", "self", ".", "_file_path", "=", "None", "\n", "\n", "if", "name_num_mapping", ":", "\n", "            ", "self", ".", "_num_label", "=", "name_num_mapping", "[", "self", ".", "_str_label", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.pyActionRecog.anet_db.Instance.time_span": [[20, 23], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "time_span", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_starting", ",", "self", ".", "_ending", "\n", "\n"]], "home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.pyActionRecog.anet_db.Instance.covering_ratio": [[24, 27], ["float", "float"], "methods", ["None"], ["", "@", "property", "\n", "def", "covering_ratio", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_starting", "/", "float", "(", "self", ".", "_total_duration", ")", ",", "self", ".", "_ending", "/", "float", "(", "self", ".", "_total_duration", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.pyActionRecog.anet_db.Instance.num_label": [[28, 31], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_label", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_num_label", "\n", "\n"]], "home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.pyActionRecog.anet_db.Instance.label": [[32, 35], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "label", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_str_label", "\n", "\n"]], "home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.pyActionRecog.anet_db.Instance.name": [[36, 39], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'{}_{}'", ".", "format", "(", "self", ".", "_vid_id", ",", "self", ".", "_idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.pyActionRecog.anet_db.Instance.path": [[46, 49], ["None"], "methods", ["None"], ["", "@", "path", ".", "setter", "\n", "def", "path", "(", "self", ",", "path", ")", ":", "\n", "        ", "self", ".", "_file_path", "=", "path", "\n", "\n"]], "home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.pyActionRecog.anet_db.Video.__init__": [[56, 62], ["anet_db.Instance", "enumerate"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "key", ",", "info", ",", "name_idx_mapping", "=", "None", ")", ":", "\n", "        ", "self", ".", "_id", "=", "key", "\n", "self", ".", "_info_dict", "=", "info", "\n", "self", ".", "_instances", "=", "[", "Instance", "(", "i", ",", "x", ",", "self", ".", "_id", ",", "self", ".", "_info_dict", ",", "name_idx_mapping", ")", "\n", "for", "i", ",", "x", "in", "enumerate", "(", "self", ".", "_info_dict", "[", "'annotations'", "]", ")", "]", "\n", "self", ".", "_file_path", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.pyActionRecog.anet_db.Video.id": [[63, 66], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "id", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_id", "\n", "\n"]], "home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.pyActionRecog.anet_db.Video.url": [[67, 70], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "url", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_info_dict", "[", "'url'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.pyActionRecog.anet_db.Video.instances": [[71, 74], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "instances", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_instances", "\n", "\n"]], "home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.pyActionRecog.anet_db.Video.duration": [[75, 78], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "duration", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_info_dict", "[", "'duration'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.pyActionRecog.anet_db.Video.subset": [[79, 82], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "subset", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_info_dict", "[", "'subset'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.pyActionRecog.anet_db.Video.instance": [[83, 86], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "instance", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_instances", "\n", "\n"]], "home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.pyActionRecog.anet_db.Video.path": [[93, 96], ["None"], "methods", ["None"], ["", "@", "path", ".", "setter", "\n", "def", "path", "(", "self", ",", "path", ")", ":", "\n", "        ", "self", ".", "_file_path", "=", "path", "\n", "\n"]], "home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.pyActionRecog.anet_db.ANetDB.__init__": [[105, 113], ["ValueError"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "token", ")", ":", "\n", "        ", "\"\"\"\n        Disabled constructor\n        :param token:\n        :return:\n        \"\"\"", "\n", "if", "token", "is", "not", "self", ".", "_CONSTRUCTOR_LOCK", ":", "\n", "            ", "raise", "ValueError", "(", "\"Use get_db to construct an instance, do not directly use the constructor\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.pyActionRecog.anet_db.ANetDB.get_db": [[114, 137], ["os.path.join", "json.load", "cls", "cls.prepare_data", "ValueError", "open", "version.replace"], "methods", ["home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.pyActionRecog.anet_db.ANetDB.prepare_data"], ["", "", "@", "classmethod", "\n", "def", "get_db", "(", "cls", ",", "version", "=", "\"1.2\"", ")", ":", "\n", "        ", "\"\"\"\n        Build the internal representation of Activity Net databases\n        We use the alphabetic order to transfer the label string to its numerical index in learning\n        :param version:\n        :return:\n        \"\"\"", "\n", "if", "version", "not", "in", "[", "\"1.2\"", ",", "\"1.3\"", "]", ":", "\n", "            ", "raise", "ValueError", "(", "\"Unsupported database version {}\"", ".", "format", "(", "version", ")", ")", "\n", "\n", "", "import", "os", "\n", "raw_db_file", "=", "os", ".", "path", ".", "join", "(", "\"data/activitynet_splits\"", ",", "\n", "\"activity_net.v{}.min.json\"", ".", "format", "(", "version", ".", "replace", "(", "'.'", ",", "'-'", ")", ")", ")", "\n", "\n", "import", "json", "\n", "db_data", "=", "json", ".", "load", "(", "open", "(", "raw_db_file", ")", ")", "\n", "\n", "me", "=", "cls", "(", "cls", ".", "_CONSTRUCTOR_LOCK", ")", "\n", "me", ".", "version", "=", "version", "\n", "me", ".", "prepare_data", "(", "db_data", ")", "\n", "\n", "return", "me", "\n", "\n"]], "home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.pyActionRecog.anet_db.ANetDB.prepare_data": [[138, 155], ["anet_db.ANetDB._parse_taxonomy", "anet_db.Video", "anet_db.ANetDB._database.items", "anet_db.ANetDB._video_dict.items", "anet_db.ANetDB._video_dict.items", "anet_db.ANetDB._video_dict.items", "anet_db.ANetDB._training_dict.values", "anet_db.ANetDB._validation_dict.values"], "methods", ["home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.pyActionRecog.anet_db.ANetDB._parse_taxonomy"], ["", "def", "prepare_data", "(", "self", ",", "raw_db", ")", ":", "\n", "        ", "self", ".", "_version", "=", "raw_db", "[", "'version'", "]", "\n", "\n", "# deal with taxonomy", "\n", "self", ".", "_taxonomy", "=", "raw_db", "[", "'taxonomy'", "]", "\n", "self", ".", "_parse_taxonomy", "(", ")", "\n", "\n", "self", ".", "_database", "=", "raw_db", "[", "'database'", "]", "\n", "self", ".", "_video_dict", "=", "{", "k", ":", "Video", "(", "k", ",", "v", ",", "self", ".", "_name_idx_table", ")", "for", "k", ",", "v", "in", "self", ".", "_database", ".", "items", "(", ")", "}", "\n", "\n", "# split testing/training/validation set", "\n", "self", ".", "_testing_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "self", ".", "_video_dict", ".", "items", "(", ")", "if", "v", ".", "subset", "==", "'testing'", "}", "\n", "self", ".", "_training_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "self", ".", "_video_dict", ".", "items", "(", ")", "if", "v", ".", "subset", "==", "'training'", "}", "\n", "self", ".", "_validation_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "self", ".", "_video_dict", ".", "items", "(", ")", "if", "v", ".", "subset", "==", "'validation'", "}", "\n", "\n", "self", ".", "_training_inst_dict", "=", "{", "i", ".", "name", ":", "i", "for", "v", "in", "self", ".", "_training_dict", ".", "values", "(", ")", "for", "i", "in", "v", ".", "instances", "}", "\n", "self", ".", "_validation_inst_dict", "=", "{", "i", ".", "name", ":", "i", "for", "v", "in", "self", ".", "_validation_dict", ".", "values", "(", ")", "for", "i", "in", "v", ".", "instances", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.pyActionRecog.anet_db.ANetDB.get_subset_videos": [[156, 165], ["anet_db.ANetDB._training_dict.values", "anet_db.ANetDB._validation_dict.values", "anet_db.ANetDB._testing_dict.values", "ValueError"], "methods", ["None"], ["", "def", "get_subset_videos", "(", "self", ",", "subset_name", ")", ":", "\n", "        ", "if", "subset_name", "==", "'training'", ":", "\n", "            ", "return", "self", ".", "_training_dict", ".", "values", "(", ")", "\n", "", "elif", "subset_name", "==", "'validation'", ":", "\n", "            ", "return", "self", ".", "_validation_dict", ".", "values", "(", ")", "\n", "", "elif", "subset_name", "==", "'testing'", ":", "\n", "            ", "return", "self", ".", "_testing_dict", ".", "values", "(", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Unknown subset {}\"", ".", "format", "(", "subset_name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.pyActionRecog.anet_db.ANetDB.get_subset_instance": [[166, 173], ["anet_db.ANetDB._training_inst_dict.values", "anet_db.ANetDB._validation_inst_dict.values", "ValueError"], "methods", ["None"], ["", "", "def", "get_subset_instance", "(", "self", ",", "subset_name", ")", ":", "\n", "        ", "if", "subset_name", "==", "'training'", ":", "\n", "            ", "return", "self", ".", "_training_inst_dict", ".", "values", "(", ")", "\n", "", "elif", "subset_name", "==", "'validation'", ":", "\n", "            ", "return", "self", ".", "_validation_inst_dict", ".", "values", "(", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Unknown subset {}\"", ".", "format", "(", "subset_name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.pyActionRecog.anet_db.ANetDB.get_ordered_label_list": [[174, 176], ["sorted", "anet_db.ANetDB._idx_name_table.keys"], "methods", ["None"], ["", "", "def", "get_ordered_label_list", "(", "self", ")", ":", "\n", "        ", "return", "[", "self", ".", "_idx_name_table", "[", "x", "]", "for", "x", "in", "sorted", "(", "self", ".", "_idx_name_table", ".", "keys", "(", ")", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.pyActionRecog.anet_db.ANetDB._parse_taxonomy": [[177, 195], ["set", "sorted", "set.add", "list", "enumerate", "enumerate", "set().difference", "set", "name_dict.keys"], "methods", ["None"], ["", "def", "_parse_taxonomy", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        This function just parse the taxonomy file\n        It gives alphabetical ordered indices to the classes in competition\n        :return:\n        \"\"\"", "\n", "name_dict", "=", "{", "x", "[", "'nodeName'", "]", ":", "x", "for", "x", "in", "self", ".", "_taxonomy", "}", "\n", "parents", "=", "set", "(", ")", "\n", "for", "x", "in", "self", ".", "_taxonomy", ":", "\n", "            ", "parents", ".", "add", "(", "x", "[", "'parentName'", "]", ")", "\n", "\n", "# leaf nodes are those without any child", "\n", "", "leaf_nodes", "=", "[", "name_dict", "[", "x", "]", "for", "x", "\n", "in", "list", "(", "set", "(", "name_dict", ".", "keys", "(", ")", ")", ".", "difference", "(", "parents", ")", ")", "]", "\n", "sorted_lead_nodes", "=", "sorted", "(", "leaf_nodes", ",", "key", "=", "lambda", "l", ":", "l", "[", "'nodeName'", "]", ")", "\n", "self", ".", "_idx_name_table", "=", "{", "i", ":", "e", "[", "'nodeName'", "]", "for", "i", ",", "e", "in", "enumerate", "(", "sorted_lead_nodes", ")", "}", "\n", "self", ".", "_name_idx_table", "=", "{", "e", "[", "'nodeName'", "]", ":", "i", "for", "i", ",", "e", "in", "enumerate", "(", "sorted_lead_nodes", ")", "}", "\n", "self", ".", "_name_table", "=", "{", "x", "[", "'nodeName'", "]", ":", "x", "for", "x", "in", "sorted_lead_nodes", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.pyActionRecog.__init__.parse_split_file": [[11, 14], ["sp"], "function", ["None"], ["def", "parse_split_file", "(", "dataset", ")", ":", "\n", "    ", "sp", "=", "split_parsers", "[", "dataset", "]", "\n", "return", "sp", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.pyActionRecog.action_caffe.CaffeNet.predict_single_c3d_rgb_stack": [[85, 104], ["numpy.transpose", "numpy.transpose.copy", "action_caffe.CaffeNet._net.forward", "action_caffe.CaffeNet._net.blobs[].data.copy", "action_caffe.CaffeNet.copy", "utils.io.fast_list2arr", "utils.io.fast_list2arr", "utils.io.c3d_rgb_stack_oversample", "utils.io.fast_list2arr", "numpy.float32", "cv2.resize"], "methods", ["home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.pygcn.experiment_c3d.ClusteringLoss.forward", "home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.utils.io.fast_list2arr", "home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.utils.io.fast_list2arr", "home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.utils.io.c3d_rgb_stack_oversample", "home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.utils.io.fast_list2arr"], []], "home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.pyActionRecog.action_caffe.CaffeNet.predict_single_c3d_flow_stack": [[105, 124], ["numpy.transpose", "numpy.transpose.copy", "action_caffe.CaffeNet._net.forward", "action_caffe.CaffeNet._net.blobs[].data.copy", "action_caffe.CaffeNet.copy", "utils.io.fast_list2arr", "utils.io.fast_list2arr", "utils.io.c3d_flow_stack_oversample", "utils.io.fast_list2arr", "numpy.float32", "cv2.resize"], "methods", ["home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.pygcn.experiment_c3d.ClusteringLoss.forward", "home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.utils.io.fast_list2arr", "home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.utils.io.fast_list2arr", "home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.utils.io.c3d_flow_stack_oversample", "home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.utils.io.fast_list2arr"], []], "home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.utils.io.flow_stack_oversample": [[4, 43], ["numpy.array", "numpy.array", "numpy.empty", "numpy.tile", "numpy.empty", "xrange", "range", "range"], "function", ["None"], ["def", "flow_stack_oversample", "(", "flow_stack", ",", "crop_dims", ")", ":", "\n", "    ", "\"\"\"\n    This function performs oversampling on flow stacks.\n    Adapted from pyCaffe's oversample function\n    :param flow_stack:\n    :param crop_dims:\n    :return:\n    \"\"\"", "\n", "im_shape", "=", "np", ".", "array", "(", "flow_stack", ".", "shape", "[", "1", ":", "]", ")", "\n", "stack_depth", "=", "flow_stack", ".", "shape", "[", "0", "]", "\n", "crop_dims", "=", "np", ".", "array", "(", "crop_dims", ")", "\n", "\n", "h_indices", "=", "(", "0", ",", "im_shape", "[", "0", "]", "-", "crop_dims", "[", "0", "]", ")", "\n", "w_indices", "=", "(", "0", ",", "im_shape", "[", "1", "]", "-", "crop_dims", "[", "1", "]", ")", "\n", "\n", "h_center_offset", "=", "(", "im_shape", "[", "0", "]", "-", "crop_dims", "[", "0", "]", ")", "/", "2", "\n", "w_center_offset", "=", "(", "im_shape", "[", "1", "]", "-", "crop_dims", "[", "1", "]", ")", "/", "2", "\n", "\n", "crop_ix", "=", "np", ".", "empty", "(", "(", "5", ",", "4", ")", ",", "dtype", "=", "int", ")", "\n", "\n", "cnt", "=", "0", "\n", "for", "i", "in", "h_indices", ":", "\n", "        ", "for", "j", "in", "w_indices", ":", "\n", "            ", "crop_ix", "[", "cnt", ",", ":", "]", "=", "(", "i", ",", "j", ",", "i", "+", "crop_dims", "[", "0", "]", ",", "j", "+", "crop_dims", "[", "1", "]", ")", "\n", "cnt", "+=", "1", "\n", "", "", "crop_ix", "[", "4", ",", ":", "]", "=", "[", "h_center_offset", ",", "w_center_offset", ",", "\n", "h_center_offset", "+", "crop_dims", "[", "0", "]", ",", "w_center_offset", "+", "crop_dims", "[", "1", "]", "]", "\n", "\n", "crop_ix", "=", "np", ".", "tile", "(", "crop_ix", ",", "(", "2", ",", "1", ")", ")", "\n", "\n", "crops", "=", "np", ".", "empty", "(", "(", "10", ",", "flow_stack", ".", "shape", "[", "0", "]", ",", "crop_dims", "[", "0", "]", ",", "crop_dims", "[", "1", "]", ")", ",", "\n", "dtype", "=", "flow_stack", ".", "dtype", ")", "\n", "\n", "for", "ix", "in", "xrange", "(", "10", ")", ":", "\n", "        ", "cp", "=", "crop_ix", "[", "ix", "]", "\n", "crops", "[", "ix", "]", "=", "flow_stack", "[", ":", ",", "cp", "[", "0", "]", ":", "cp", "[", "2", "]", ",", "cp", "[", "1", "]", ":", "cp", "[", "3", "]", "]", "\n", "", "crops", "[", "5", ":", "]", "=", "crops", "[", "5", ":", ",", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "crops", "[", "5", ":", ",", "range", "(", "0", ",", "stack_depth", ",", "2", ")", ",", "...", "]", "=", "255", "-", "crops", "[", "5", ":", ",", "range", "(", "0", ",", "stack_depth", ",", "2", ")", ",", "...", "]", "\n", "return", "crops", "\n", "\n"]], "home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.utils.io.rgb_oversample": [[130, 172], ["numpy.array", "numpy.array", "numpy.empty", "numpy.tile", "numpy.empty", "numpy.tile", "numpy.concatenate"], "function", ["None"], []], "home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.utils.io.rgb_to_parrots": [[174, 187], ["crops.transpose", "io.rgb_oversample"], "function", ["home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.utils.io.rgb_oversample"], []], "home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.utils.io.fast_list2arr": [[189, 205], ["len", "numpy.empty", "xrange"], "function", ["None"], []], "home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.utils.metrics.softmax": [[8, 12], ["numpy.exp", "np.exp.sum", "raw_score.max"], "function", ["None"], ["def", "softmax", "(", "raw_score", ",", "T", "=", "1", ")", ":", "\n", "    ", "exp_s", "=", "np", ".", "exp", "(", "(", "raw_score", "-", "raw_score", ".", "max", "(", "axis", "=", "-", "1", ")", "[", "...", ",", "None", "]", ")", "*", "T", ")", "\n", "sum_s", "=", "exp_s", ".", "sum", "(", "axis", "=", "-", "1", ")", "\n", "return", "exp_s", "/", "sum_s", "[", "...", ",", "None", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.utils.metrics.top_k_acc": [[14, 17], ["numpy.argsort", "len", "len", "lb_set.intersection"], "function", ["None"], ["", "def", "top_k_acc", "(", "lb_set", ",", "scores", ",", "k", "=", "3", ")", ":", "\n", "    ", "idx", "=", "np", ".", "argsort", "(", "scores", ")", "[", "-", "k", ":", "]", "\n", "return", "len", "(", "lb_set", ".", "intersection", "(", "idx", ")", ")", ",", "len", "(", "lb_set", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.utils.metrics.top_k_hit": [[19, 22], ["numpy.argsort", "len", "lb_set.intersection"], "function", ["None"], ["", "def", "top_k_hit", "(", "lb_set", ",", "scores", ",", "k", "=", "3", ")", ":", "\n", "    ", "idx", "=", "np", ".", "argsort", "(", "scores", ")", "[", "-", "k", ":", "]", "\n", "return", "len", "(", "lb_set", ".", "intersection", "(", "idx", ")", ")", ">", "0", ",", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.utils.metrics.top_3_accuracy": [[24, 26], ["metrics.top_k_accuracy"], "function", ["home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.utils.metrics.top_k_accuracy"], ["", "def", "top_3_accuracy", "(", "score_dict", ",", "video_list", ")", ":", "\n", "    ", "return", "top_k_accuracy", "(", "score_dict", ",", "video_list", ",", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.utils.metrics.top_k_accuracy": [[28, 39], ["numpy.array", "np.array.sum().astype", "set", "metrics.top_k_hit", "np.array.sum", "zip"], "function", ["home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.utils.metrics.top_k_hit"], ["", "def", "top_k_accuracy", "(", "score_dict", ",", "video_list", ",", "k", ")", ":", "\n", "    ", "video_labels", "=", "[", "set", "(", "[", "i", ".", "num_label", "for", "i", "in", "v", ".", "instances", "]", ")", "for", "v", "in", "video_list", "]", "\n", "\n", "video_top_k_acc", "=", "np", ".", "array", "(", "\n", "[", "top_k_hit", "(", "lb", ",", "score_dict", "[", "v", ".", "id", "]", ",", "k", "=", "k", ")", "for", "v", ",", "lb", "in", "zip", "(", "video_list", ",", "video_labels", ")", "\n", "if", "v", ".", "id", "in", "score_dict", "]", ")", "\n", "\n", "tmp", "=", "video_top_k_acc", ".", "sum", "(", "axis", "=", "0", ")", ".", "astype", "(", "float", ")", "\n", "top_k_acc", "=", "tmp", "[", "0", "]", "/", "tmp", "[", "1", "]", "\n", "\n", "return", "top_k_acc", "\n", "\n"]], "home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.utils.metrics.video_mean_ap": [[41, 51], ["numpy.array", "numpy.zeros", "xrange", "sklearn.metrics.average_precision_score", "set", "list"], "function", ["None"], ["", "def", "video_mean_ap", "(", "score_dict", ",", "video_list", ")", ":", "\n", "    ", "avail_video_labels", "=", "[", "set", "(", "[", "i", ".", "num_label", "for", "i", "in", "v", ".", "instances", "]", ")", "for", "v", "in", "video_list", "if", "\n", "v", ".", "id", "in", "score_dict", "]", "\n", "pred_array", "=", "np", ".", "array", "(", "[", "score_dict", "[", "v", ".", "id", "]", "for", "v", "in", "video_list", "if", "v", ".", "id", "in", "score_dict", "]", ")", "\n", "gt_array", "=", "np", ".", "zeros", "(", "pred_array", ".", "shape", ")", "\n", "\n", "for", "i", "in", "xrange", "(", "pred_array", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "gt_array", "[", "i", ",", "list", "(", "avail_video_labels", "[", "i", "]", ")", "]", "=", "1", "\n", "", "mean_ap", "=", "average_precision_score", "(", "gt_array", ",", "pred_array", ",", "average", "=", "'macro'", ")", "\n", "return", "mean_ap", "\n", "\n"]], "home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.utils.metrics.mean_class_accuracy": [[53, 61], ["numpy.argmax", "sklearn.metrics.confusion_matrix().astype", "confusion_matrix().astype.sum", "numpy.diag", "numpy.mean", "sklearn.metrics.confusion_matrix"], "function", ["None"], ["", "def", "mean_class_accuracy", "(", "scores", ",", "labels", ")", ":", "\n", "    ", "pred", "=", "np", ".", "argmax", "(", "scores", ",", "axis", "=", "1", ")", "\n", "cf", "=", "confusion_matrix", "(", "labels", ",", "pred", ")", ".", "astype", "(", "float", ")", "\n", "\n", "cls_cnt", "=", "cf", ".", "sum", "(", "axis", "=", "1", ")", "\n", "cls_hit", "=", "np", ".", "diag", "(", "cf", ")", "\n", "\n", "return", "np", ".", "mean", "(", "cls_hit", "/", "cls_cnt", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.utils.video_funcs.default_aggregation_func": [[8, 19], ["metrics.softmax", "crop_agg().mean", "crop_agg().mean", "crop_agg", "crop_agg"], "function", ["home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.utils.metrics.softmax"], ["def", "default_aggregation_func", "(", "score_arr", ",", "normalization", "=", "True", ",", "crop_agg", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    This is the default function for make video-level prediction\n    :param score_arr: a 3-dim array with (frame, crop, class) layout\n    :return:\n    \"\"\"", "\n", "crop_agg", "=", "np", ".", "mean", "if", "crop_agg", "is", "None", "else", "crop_agg", "\n", "if", "normalization", ":", "\n", "        ", "return", "softmax", "(", "crop_agg", "(", "score_arr", ",", "axis", "=", "1", ")", ".", "mean", "(", "axis", "=", "0", ")", ")", "\n", "", "else", ":", "\n", "        ", "return", "crop_agg", "(", "score_arr", ",", "axis", "=", "1", ")", ".", "mean", "(", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.utils.video_funcs.min_max_norm": [[21, 41], ["numpy.array", "np.array.mean", "preprocessing.MinMaxScaler().fit_transform", "numpy.mean().mean", "preprocessing.MinMaxScaler", "numpy.mean"], "function", ["None"], ["", "", "def", "min_max_norm", "(", "list_score_arr", ",", "remove_pos_list", "=", "None", ")", ":", "\n", "# score_arr: a 3-dim array with (15, 10, 101) layout", "\n", "    ", "'''\n    np.mean(score_arr, axis=1).shape = (15, 101)\n    np.mean(score_arr, axis=1).mean(axis=0).shape = (101)\n    '''", "\n", "classification_scores", "=", "[", "np", ".", "mean", "(", "seg", ",", "axis", "=", "1", ")", ".", "mean", "(", "axis", "=", "0", ")", "for", "seg", "in", "list_score_arr", "]", "\n", "classification_scores", "=", "np", ".", "array", "(", "classification_scores", ")", "\n", "classification_scores_mean", "=", "classification_scores", ".", "mean", "(", "axis", "=", "0", ")", "\n", "if", "remove_pos_list", "is", "not", "None", ":", "\n", "        ", "for", "it", "in", "remove_pos_list", ":", "\n", "            ", "classification_scores", "[", "it", "[", "0", "]", "]", "[", "it", "[", "1", "]", "]", "=", "classification_scores_mean", "[", "it", "[", "1", "]", "]", "\n", "", "", "'''\n    min_ =  np.min(classification_scores, axis=0)\n    max_ =  np.max(classification_scores, axis=0)\n    norm_ = (classification_scores - min_) / (max_ - min_)\n    '''", "\n", "from", "sklearn", "import", "preprocessing", "\n", "result_norm", "=", "preprocessing", ".", "MinMaxScaler", "(", ")", ".", "fit_transform", "(", "classification_scores", ")", "\n", "return", "result_norm", "\n", "\n"]], "home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.utils.video_funcs.top_k_aggregation_func": [[42, 48], ["metrics.softmax", "[].mean", "[].mean", "numpy.sort", "numpy.sort", "crop_agg", "crop_agg"], "function", ["home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.utils.metrics.softmax"], ["", "def", "top_k_aggregation_func", "(", "score_arr", ",", "k", ",", "normalization", "=", "True", ",", "crop_agg", "=", "None", ")", ":", "\n", "    ", "crop_agg", "=", "np", ".", "mean", "if", "crop_agg", "is", "None", "else", "crop_agg", "\n", "if", "normalization", ":", "\n", "        ", "return", "softmax", "(", "np", ".", "sort", "(", "crop_agg", "(", "score_arr", ",", "axis", "=", "1", ")", ",", "axis", "=", "0", ")", "[", "-", "k", ":", ",", ":", "]", ".", "mean", "(", "axis", "=", "0", ")", ")", "\n", "", "else", ":", "\n", "        ", "return", "np", ".", "sort", "(", "crop_agg", "(", "score_arr", ",", "axis", "=", "1", ")", ",", "axis", "=", "0", ")", "[", "-", "k", ":", ",", ":", "]", ".", "mean", "(", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.utils.video_funcs.sliding_window_aggregation_func": [[50, 79], ["score.max", "numpy.mean", "[].mean", "int", "max", "slide_score.append", "metrics.softmax", "numpy.ceil", "frm_max[].max", "video_funcs.sliding_window_aggregation_func.top_k_pool"], "function", ["home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.utils.metrics.softmax"], ["", "", "def", "sliding_window_aggregation_func", "(", "score", ",", "spans", "=", "[", "1", ",", "2", ",", "4", ",", "8", ",", "16", "]", ",", "overlap", "=", "0.2", ",", "norm", "=", "True", ",", "fps", "=", "1", ")", ":", "\n", "    ", "\"\"\"\n    This is the aggregation function used for ActivityNet Challenge 2016\n    :param score:\n    :param spans:\n    :param overlap:\n    :param norm:\n    :param fps:\n    :return:\n    \"\"\"", "\n", "frm_max", "=", "score", ".", "max", "(", "axis", "=", "1", ")", "\n", "slide_score", "=", "[", "]", "\n", "\n", "def", "top_k_pool", "(", "scores", ",", "k", ")", ":", "\n", "        ", "return", "np", ".", "sort", "(", "scores", ",", "axis", "=", "0", ")", "[", "-", "k", ":", ",", ":", "]", ".", "mean", "(", "axis", "=", "0", ")", "\n", "\n", "", "for", "t_span", "in", "spans", ":", "\n", "        ", "span", "=", "t_span", "*", "fps", "\n", "step", "=", "int", "(", "np", ".", "ceil", "(", "span", "*", "(", "1", "-", "overlap", ")", ")", ")", "\n", "local_agg", "=", "[", "frm_max", "[", "i", ":", "i", "+", "span", "]", ".", "max", "(", "axis", "=", "0", ")", "for", "i", "in", "xrange", "(", "0", ",", "frm_max", ".", "shape", "[", "0", "]", ",", "step", ")", "]", "\n", "k", "=", "max", "(", "15", ",", "len", "(", "local_agg", ")", "/", "4", ")", "\n", "slide_score", ".", "append", "(", "top_k_pool", "(", "np", ".", "array", "(", "local_agg", ")", ",", "k", ")", ")", "\n", "\n", "", "out_score", "=", "np", ".", "mean", "(", "slide_score", ",", "axis", "=", "0", ")", "\n", "\n", "if", "norm", ":", "\n", "        ", "return", "softmax", "(", "out_score", ")", "\n", "", "else", ":", "\n", "        ", "return", "out_score", "\n", "\n"]], "home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.utils.video_funcs.default_fusion_func": [[81, 91], ["zip", "len", "len", "metrics.softmax"], "function", ["home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.utils.metrics.softmax"], ["", "", "def", "default_fusion_func", "(", "major_score", ",", "other_scores", ",", "fusion_weights", ",", "norm", "=", "True", ")", ":", "\n", "    ", "assert", "len", "(", "other_scores", ")", "==", "len", "(", "fusion_weights", ")", "\n", "out_score", "=", "major_score", "\n", "for", "s", ",", "w", "in", "zip", "(", "other_scores", ",", "fusion_weights", ")", ":", "\n", "        ", "out_score", "+=", "s", "*", "w", "\n", "\n", "", "if", "norm", ":", "\n", "        ", "return", "softmax", "(", "out_score", ")", "\n", "", "else", ":", "\n", "        ", "return", "out_score", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.utils.io.c3d_rgb_stack_oversample": [[45, 83], ["numpy.array", "numpy.array", "numpy.empty", "numpy.tile", "numpy.empty", "xrange"], "function", ["None"], ["", "def", "rgb_oversample", "(", "image", ",", "crop_dims", ")", ":", "\n", "    ", "\"\"\"\n    Crop images into the four corners, center, and their mirrored versions.\n    Adapted from Caffe\n    Parameters\n    ----------\n    image : (H x W x K) ndarray\n    crop_dims : (height, width) tuple for the crops.\n    Returns\n    -------\n    crops : (10 x H x W x K) ndarray of crops.\n    \"\"\"", "\n", "# Dimensions and center.", "\n", "im_shape", "=", "np", ".", "array", "(", "image", ".", "shape", ")", "\n", "crop_dims", "=", "np", ".", "array", "(", "crop_dims", ")", "\n", "im_center", "=", "im_shape", "[", ":", "2", "]", "/", "2.0", "\n", "\n", "# Make crop coordinates", "\n", "h_indices", "=", "(", "0", ",", "im_shape", "[", "0", "]", "-", "crop_dims", "[", "0", "]", ")", "\n", "w_indices", "=", "(", "0", ",", "im_shape", "[", "1", "]", "-", "crop_dims", "[", "1", "]", ")", "\n", "crops_ix", "=", "np", ".", "empty", "(", "(", "5", ",", "4", ")", ",", "dtype", "=", "int", ")", "\n", "curr", "=", "0", "\n", "for", "i", "in", "h_indices", ":", "\n", "        ", "for", "j", "in", "w_indices", ":", "\n", "            ", "crops_ix", "[", "curr", "]", "=", "(", "i", ",", "j", ",", "i", "+", "crop_dims", "[", "0", "]", ",", "j", "+", "crop_dims", "[", "1", "]", ")", "\n", "curr", "+=", "1", "\n", "", "", "crops_ix", "[", "4", "]", "=", "np", ".", "tile", "(", "im_center", ",", "(", "1", ",", "2", ")", ")", "+", "np", ".", "concatenate", "(", "[", "\n", "-", "crop_dims", "/", "2.0", ",", "\n", "crop_dims", "/", "2.0", "\n", "]", ")", "\n", "crops_ix", "=", "np", ".", "tile", "(", "crops_ix", ",", "(", "2", ",", "1", ")", ")", "\n", "\n", "# Extract crops", "\n", "crops", "=", "np", ".", "empty", "(", "(", "10", ",", "crop_dims", "[", "0", "]", ",", "crop_dims", "[", "1", "]", ",", "\n", "im_shape", "[", "-", "1", "]", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "ix", "=", "0", "\n", "for", "crop", "in", "crops_ix", ":", "\n", "        ", "crops", "[", "ix", "]", "=", "image", "[", "crop", "[", "0", "]", ":", "crop", "[", "2", "]", ",", "crop", "[", "1", "]", ":", "crop", "[", "3", "]", ",", ":", "]", "\n"]], "home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.utils.io.c3d_flow_stack_oversample": [[85, 128], ["numpy.array", "numpy.array", "numpy.empty", "numpy.tile", "numpy.empty", "xrange"], "function", ["None"], ["", "crops", "[", "ix", "-", "5", ":", "ix", "]", "=", "crops", "[", "ix", "-", "5", ":", "ix", ",", ":", ",", ":", ":", "-", "1", ",", ":", "]", "# flip for mirrors", "\n", "return", "crops", "\n", "\n", "\n", "", "def", "rgb_to_parrots", "(", "frame", ",", "oversample", "=", "True", ",", "mean_val", "=", "None", ",", "crop_size", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Pre-process the rgb frame for Parrots input\n    \"\"\"", "\n", "if", "mean_val", "is", "None", ":", "\n", "        ", "mean_val", "=", "[", "104", ",", "117", ",", "123", "]", "\n", "", "if", "not", "oversample", ":", "\n", "        ", "ret_frame", "=", "(", "frame", "-", "mean_val", ")", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "return", "ret_frame", "[", "None", ",", "...", "]", "\n", "", "else", ":", "\n", "        ", "crops", "=", "rgb_oversample", "(", "frame", ",", "crop_size", ")", "-", "mean_val", "\n", "ret_frames", "=", "crops", ".", "transpose", "(", "(", "0", ",", "3", ",", "1", ",", "2", ")", ")", "\n", "return", "ret_frames", "\n", "\n", "\n", "", "", "def", "fast_list2arr", "(", "data", ",", "offset", "=", "None", ",", "dtype", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Convert a list of numpy arrays with the same size to a large numpy array.\n    This is way more efficient than directly using numpy.array()\n    See\n        https://github.com/obspy/obspy/wiki/Known-Python-Issues\n    :param data: [numpy.array]\n    :param offset: array to be subtracted from the each array.\n    :param dtype: data type\n    :return: numpy.array\n    \"\"\"", "\n", "num", "=", "len", "(", "data", ")", "\n", "out_data", "=", "np", ".", "empty", "(", "(", "num", ",", ")", "+", "data", "[", "0", "]", ".", "shape", ",", "dtype", "=", "dtype", "if", "dtype", "else", "data", "[", "0", "]", ".", "dtype", ")", "\n", "for", "i", "in", "xrange", "(", "num", ")", ":", "\n", "        ", "out_data", "[", "i", "]", "=", "data", "[", "i", "]", "-", "offset", "if", "offset", "else", "data", "[", "i", "]", "\n", "", "return", "out_data", "\n", "", ""]], "home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.extract_c3d.extract_c3d_all.build_net": [[29, 33], ["pyActionRecog.action_caffe.CaffeNet", "len", "multiprocessing.current_process"], "function", ["None"], ["def", "build_net", "(", ")", ":", "\n", "    ", "global", "net", "\n", "gpu_id", "=", "gpu_list", "[", "current_process", "(", ")", ".", "_identity", "[", "0", "]", "%", "len", "(", "gpu_list", ")", "]", "\n", "net", "=", "CaffeNet", "(", "deploy_file", ",", "caffemodel", ",", "gpu_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.extract_c3d.extract_c3d_all.eval_video": [[35, 66], ["os.path.basename", "print", "os.listdir", "len", "os.path.join", "os.path.isfile", "range", "numpy.savez", "print", "ValueError", "os.path.join", "print", "frame_scores.append", "os.path.basename().replace", "range", "net.predict_single_c3d_rgb_stack", "print", "os.path.basename", "min", "frames.append", "range", "cv2.imread", "os.path.join"], "function", ["home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.pyActionRecog.action_caffe.CaffeNet.predict_single_c3d_rgb_stack"], ["", "def", "eval_video", "(", "video_frame_path", ")", ":", "\n", "    ", "global", "net", "\n", "vid", "=", "os", ".", "path", ".", "basename", "(", "video_frame_path", ")", "\n", "print", "(", "\"video {} doing\"", ".", "format", "(", "vid", ")", ")", "\n", "all_files", "=", "os", ".", "listdir", "(", "video_frame_path", ")", "\n", "frame_cnt", "=", "len", "(", "all_files", ")", "\n", "if", "modality", "==", "\"c3d\"", ":", "\n", "        ", "stack_depth", "=", "16", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "modality", ")", "\n", "", "output_file", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "join", "(", "output_folder", ",", "os", ".", "path", ".", "basename", "(", "caffemodel", ")", ".", "replace", "(", "\".caffemodel\"", ",", "\"\"", ")", ")", ",", "vid", "+", "\"_c3d\"", "+", "\".npz\"", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "output_file", ")", ":", "\n", "        ", "print", "(", "\"{} exists!\"", ".", "format", "(", "output_file", ")", ")", "\n", "return", "\n", "", "frame_ticks", "=", "range", "(", "1", ",", "frame_cnt", "+", "1", ",", "step", ")", "\n", "frame_scores", "=", "[", "]", "\n", "for", "tick", "in", "frame_ticks", ":", "\n", "        ", "if", "modality", "==", "\"c3d\"", ":", "\n", "            ", "if", "dense_sample", ":", "\n", "                ", "frames", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "step", ",", "stack_depth", ")", ":", "\n", "                    ", "frame_idx", "=", "[", "min", "(", "frame_cnt", ",", "tick", "+", "i", "+", "offset", ")", "for", "offset", "in", "range", "(", "stack_depth", ")", "]", "\n", "for", "idx", "in", "frame_idx", ":", "\n", "                        ", "name", "=", "\"{}{:06d}.jpg\"", ".", "format", "(", "rgb_prefix", ",", "idx", ")", "\n", "frames", ".", "append", "(", "cv2", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "video_frame_path", ",", "name", ")", ",", "cv2", ".", "IMREAD_COLOR", ")", ")", "\n", "", "", "scores", "=", "net", ".", "predict_single_c3d_rgb_stack", "(", "frames", ",", "score_name", ",", "frame_size", "=", "(", "171", ",", "128", ")", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "\"Sparse sampling has yet to be done.\"", ")", "\n", "", "", "frame_scores", ".", "append", "(", "scores", ")", "\n", "", "np", ".", "savez", "(", "output_file", ",", "scores", "=", "frame_scores", ",", "begin_idx", "=", "frame_ticks", ")", "\n", "print", "(", "\"video {} done\"", ".", "format", "(", "vid", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.pygcn.models.NoiseFilter.__init__": [[8, 20], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "layers.GraphConvolution", "layers.GraphConvolution", "layers.GraphConvolution", "layers.GraphConvolution"], "methods", ["home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.pygcn.experiment_c3d.ClusteringLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nfeat", ",", "nclass", ",", "dropout_rate", "=", "0.6", ")", ":", "\n", "        ", "super", "(", "NoiseFilter", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# original layers", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "nfeat", ",", "512", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "512", ",", "128", ")", "\n", "# Graph Convolution", "\n", "self", ".", "gc1", "=", "GraphConvolution", "(", "128", ",", "32", ")", "#nn.Linear(128, 32)", "\n", "self", ".", "gc2", "=", "GraphConvolution", "(", "32", ",", "nclass", ")", "\n", "self", ".", "gc3", "=", "GraphConvolution", "(", "128", ",", "32", ")", "#nn.Linear(128, 32)", "\n", "self", ".", "gc4", "=", "GraphConvolution", "(", "32", ",", "nclass", ")", "#nn.Linear(128, 32)", "\n", "\n", "self", ".", "dropout_rate", "=", "dropout_rate", "\n", "\n"]], "home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.pygcn.models.NoiseFilter.forward": [[21, 62], ["torch.relu", "torch.relu", "torch.relu", "torch.dropout", "torch.dropout", "torch.dropout", "torch.relu", "torch.relu", "torch.relu", "torch.dropout", "torch.dropout", "torch.dropout", "torch.relu", "torch.relu", "torch.relu", "models.NoiseFilter.gc2", "torch.dropout.view", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "x_norm.matmul.matmul.view", "x2.matmul.matmul.matmul", "x_norm.matmul.matmul.matmul", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag.matmul().matmul", "torch.diag.matmul().matmul", "torch.diag.matmul().matmul", "adj_hat2.view.view.view", "torch.relu", "torch.relu", "torch.relu", "models.NoiseFilter.view", "torch.norm().view", "torch.norm().view", "torch.norm().view", "torch.norm().view", "torch.norm().view", "torch.norm().view", "torch.norm().view", "torch.norm().view", "torch.norm().view", "y22.matmul.matmul.matmul", "y2_norm.matmul.matmul.matmul", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag.matmul().matmul", "torch.diag.matmul().matmul", "torch.diag.matmul().matmul", "adj_hat3.view.view.view", "models.NoiseFilter.gc4", "models.NoiseFilter.fc1", "models.NoiseFilter.fc2", "models.NoiseFilter.gc1", "x2.matmul.matmul.t", "x_norm.matmul.matmul.t", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "models.NoiseFilter.gc3", "y22.matmul.matmul.t", "y2_norm.matmul.matmul.t", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.diag.matmul", "torch.diag.matmul", "torch.diag.matmul", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.diag.matmul", "torch.diag.matmul", "torch.diag.matmul", "x2.matmul.matmul.max"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "adj", ")", ":", "\n", "        ", "assert", "(", "x", ".", "shape", "[", "0", "]", "==", "1", ")", "\n", "# original layers", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "self", ".", "dropout_rate", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "fc2", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "self", ".", "dropout_rate", ",", "training", "=", "self", ".", "training", ")", "\n", "\n", "\n", "# Graph Convolution", "\n", "x1", "=", "F", ".", "relu", "(", "self", ".", "gc1", "(", "x", ",", "adj", ")", ")", "\n", "x1", "=", "self", ".", "gc2", "(", "x1", ",", "adj", ")", "\n", "\n", "# Learnable Graph branch", "\n", "x2", "=", "x", ".", "view", "(", "-", "1", ",", "x", ".", "shape", "[", "-", "1", "]", ")", "\n", "x_norm", "=", "torch", ".", "norm", "(", "x2", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "x_norm", "=", "x_norm", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "x2", "=", "x2", ".", "matmul", "(", "x2", ".", "t", "(", ")", ")", "\n", "x_norm", "=", "x_norm", ".", "matmul", "(", "x_norm", ".", "t", "(", ")", ")", "\n", "adj2", "=", "torch", ".", "exp", "(", "x2", "-", "x2", ".", "max", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", ")", "#1 + x2 / x_norm", "\n", "d_inv_sqrt2", "=", "torch", ".", "diag", "(", "torch", ".", "pow", "(", "torch", ".", "sum", "(", "adj2", ",", "dim", "=", "1", ")", ",", "-", "0.5", ")", ")", "\n", "adj_hat2", "=", "d_inv_sqrt2", ".", "matmul", "(", "adj2", ")", ".", "matmul", "(", "d_inv_sqrt2", ")", "\n", "adj_hat2", "=", "adj_hat2", ".", "view", "(", "x", ".", "shape", "[", "0", "]", ",", "adj_hat2", ".", "shape", "[", "0", "]", ",", "adj_hat2", ".", "shape", "[", "1", "]", ")", "\n", "\n", "y2", "=", "F", ".", "relu", "(", "self", ".", "gc3", "(", "x", ",", "adj_hat2", ")", ")", "\n", "\n", "#y2 = F.relu(self.gc3(x, adj_hat2))", "\n", "\n", "y22", "=", "y2", ".", "view", "(", "-", "1", ",", "y2", ".", "shape", "[", "-", "1", "]", ")", "\n", "y2_norm", "=", "torch", ".", "norm", "(", "y22", ",", "p", "=", "2", ",", "dim", "=", "1", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "y22", "=", "y22", ".", "matmul", "(", "y22", ".", "t", "(", ")", ")", "\n", "y2_norm", "=", "y2_norm", ".", "matmul", "(", "y2_norm", ".", "t", "(", ")", ")", "\n", "adj3", "=", "1", "+", "y22", "/", "y2_norm", "\n", "d_inv_sqrt3", "=", "torch", ".", "diag", "(", "torch", ".", "pow", "(", "torch", ".", "sum", "(", "adj3", ",", "dim", "=", "1", ")", ",", "-", "0.5", ")", ")", "\n", "adj_hat3", "=", "d_inv_sqrt3", ".", "matmul", "(", "adj3", ")", ".", "matmul", "(", "d_inv_sqrt3", ")", "\n", "adj_hat3", "=", "adj_hat3", ".", "view", "(", "x", ".", "shape", "[", "0", "]", ",", "adj_hat3", ".", "shape", "[", "0", "]", ",", "adj_hat3", ".", "shape", "[", "1", "]", ")", "\n", "\n", "y2", "=", "self", ".", "gc4", "(", "y2", ",", "adj_hat2", ")", "\n", "\n", "#y2 = self.gc4(y2, adj3_hat)", "\n", "return", "(", "x1", "+", "y2", ")", "/", "2.0", "", "", "", ""]], "home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.pygcn.experiment_rgb.SigmoidMAELoss.__init__": [[23, 28], ["torch.nn.Module.__init__", "Sigmoid", "torch.nn.L1Loss"], "methods", ["home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.pygcn.experiment_c3d.ClusteringLoss.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "SigmoidMAELoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "from", "torch", ".", "nn", "import", "Sigmoid", "\n", "self", ".", "__sigmoid__", "=", "Sigmoid", "(", ")", "\n", "self", ".", "__l1_loss__", "=", "L1Loss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.pygcn.experiment_rgb.SigmoidMAELoss.forward": [[29, 31], ["experiment_rgb.SigmoidMAELoss.__l1_loss__", "experiment_rgb.SigmoidMAELoss.__sigmoid__"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "pred", ",", "target", ")", ":", "\n", "        ", "return", "self", ".", "__l1_loss__", "(", "self", ".", "__sigmoid__", "(", "pred", ")", ",", "target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.pygcn.experiment_rgb.SigmoidCrossEntropyLoss.__init__": [[35, 37], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.pygcn.experiment_c3d.ClusteringLoss.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "SigmoidCrossEntropyLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.pygcn.experiment_rgb.SigmoidCrossEntropyLoss.forward": [[38, 41], ["torch.mean", "torch.exp", "torch.log", "torch.abs", "torch.clamp"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "target", ")", ":", "\n", "        ", "tmp", "=", "1", "+", "torch", ".", "exp", "(", "-", "torch", ".", "abs", "(", "x", ")", ")", "\n", "return", "torch", ".", "mean", "(", "-", "x", "*", "target", "+", "torch", ".", "clamp", "(", "x", ",", "min", "=", "0", ")", "+", "torch", ".", "log", "(", "tmp", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.pygcn.experiment_rgb.ClusteringLoss.__init__": [[49, 56], ["torch.nn.Module.__init__", "torch.nn.Parameter", "torch.nn.init.xavier_normal_", "torch.nn.KLDivLoss", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.pygcn.experiment_c3d.ClusteringLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_clusters", ",", "n_z", ",", "alpha", "=", "1.0", ")", ":", "\n", "        ", "super", "(", "ClusteringLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "alpha", "=", "alpha", "\n", "# cluster layer", "\n", "self", ".", "cluster_layer", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "n_clusters", ",", "n_z", ")", ")", "\n", "torch", ".", "nn", ".", "init", ".", "xavier_normal_", "(", "self", ".", "cluster_layer", ".", "data", ")", "\n", "self", ".", "kl_divergence", "=", "nn", ".", "KLDivLoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.pygcn.experiment_rgb.ClusteringLoss.forward": [[57, 64], ["q.pow.pow.pow", "torch.sum", "q.pow.pow.t", "torch.sum", "torch.pow", "z.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "z", ")", ":", "\n", "# cluster", "\n", "        ", "q", "=", "1.0", "/", "(", "1.0", "+", "torch", ".", "sum", "(", "\n", "torch", ".", "pow", "(", "z", ".", "unsqueeze", "(", "1", ")", "-", "self", ".", "cluster_layer", ",", "2", ")", ",", "2", ")", "/", "self", ".", "alpha", ")", "\n", "q", "=", "q", ".", "pow", "(", "(", "self", ".", "alpha", "+", "1.0", ")", "/", "2.0", ")", "\n", "q", "=", "(", "q", ".", "t", "(", ")", "/", "torch", ".", "sum", "(", "q", ",", "1", ")", ")", ".", "t", "(", ")", "\n", "return", "q", "\n", "\n"]], "home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.pygcn.experiment_rgb.ClusteringLoss.target_distribution": [[65, 69], ["q.sum", "weight.t", "weight.sum"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "target_distribution", "(", "q", ")", ":", "\n", "        ", "weight", "=", "q", "**", "2", "/", "q", ".", "sum", "(", "0", ")", "\n", "return", "(", "weight", ".", "t", "(", ")", "/", "weight", ".", "sum", "(", "1", ")", ")", ".", "t", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.pygcn.experiment_rgb.get_centroids_of_kmean": [[71, 75], ["sklearn.cluster.KMeans", "sklearn.cluster.KMeans.fit_predict"], "function", ["None"], ["", "", "def", "get_centroids_of_kmean", "(", "data", ",", "k", ")", ":", "\n", "    ", "kmeans", "=", "KMeans", "(", "k", ",", "n_jobs", "=", "16", ")", "\n", "y_pred", "=", "kmeans", ".", "fit_predict", "(", "data", ")", "\n", "return", "y_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.pygcn.experiment_rgb.train_gcn": [[77, 156], ["torch.cuda.empty_cache", "dataset.UCFCrimeSlow", "torch.utils.data.DataLoader", "models.NoiseFilter", "experiment_rgb.SigmoidCrossEntropyLoss", "experiment_rgb.SigmoidMAELoss", "torch.optim.SGD", "torch.optim.lr_scheduler.StepLR", "range", "model.cuda.cuda", "criterion_supervised.cuda.cuda", "criterion_unsupervised.cuda.cuda", "model.cuda.parameters", "model.cuda.train", "optim.lr_scheduler.StepLR.step", "enumerate", "torch.save", "print", "torch.autograd.Variable", "model.cuda.", "numpy.array().flatten", "numpy.array().flatten", "experiment_rgb.get_sample_index", "criterion_supervised.backward", "mean_pred.cuda.data.cpu().numpy().copy().flatten", "torch.nn.functional.sigmoid().data.cpu().numpy().copy().flatten", "model.cuda.state_dict", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "vid2mean_pred.has_key", "pred.cuda.data.cpu().numpy().flatten().copy", "torch.from_numpy", "feat.cuda.cuda", "adj.cuda.cuda", "pred.cuda.cuda", "mean_pred.cuda.cuda", "optim.SGD.zero_grad", "criterion_supervised.cuda.", "print", "optim.SGD.step", "numpy.array", "numpy.array", "model.view", "criterion_supervised.cuda.", "criterion_unsupervised.cuda.", "mean_pred.cuda.data.cpu().numpy().copy", "torch.nn.functional.sigmoid().data.cpu().numpy().copy", "pred.cuda.data.cpu().numpy().flatten", "pred.cuda.view", "model.view", "model.view", "pred.cuda.view", "mean_pred.cuda.view", "mean_pred.cuda.data.cpu().numpy", "torch.nn.functional.sigmoid().data.cpu().numpy", "pred.cuda.data.cpu().numpy", "range", "mean_pred.cuda.data.cpu", "torch.nn.functional.sigmoid().data.cpu", "pred.cuda.data.cpu", "torch.nn.functional.sigmoid"], "function", ["home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.pygcn.experiment_c3d.get_sample_index"], ["", "def", "train_gcn", "(", "param", ")", ":", "\n", "    ", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "videos_pkl_train", "=", "\"/home/lnn/workspace/pygcn/pygcn/ucf_crime_train.pkl\"", "\n", "videos_pkl_test", "=", "\"/home/lnn/workspace/pygcn/pygcn/ucf_crime_test.pkl\"", "\n", "feature_folder", "=", "\"/home/lnn/workspace/UCF_Crimes/kinetics_rgb5000_feat/\"", "\n", "prediction_folder", "=", "\"/home/lnn/workspace/UCF_Crimes/kinetics_2_rgb_high_conf/_iter_1000/\"", "\n", "test_pred_gt_folder", "=", "\"/home/lnn/data/UCF_Crimes/test_pred_groundtruth/\"", "\n", "modality", "=", "\"rgb\"", "\n", "gpu_id", "=", "0", "\n", "iter_size", "=", "32", "\n", "ucf_crime_train", "=", "UCFCrimeSlow", "(", "videos_pkl_train", ",", "prediction_folder", ",", "feature_folder", ",", "modality", ",", "\n", "graph_generator", "=", "soft_uniform_sampling", ",", "graph_generator_param", "=", "param", ")", "\n", "train_loader", "=", "DataLoader", "(", "dataset", "=", "ucf_crime_train", ",", "batch_size", "=", "1", ",", "shuffle", "=", "True", ",", "num_workers", "=", "16", ")", "\n", "model", "=", "NoiseFilter", "(", "nfeat", "=", "1024", ",", "nclass", "=", "1", ")", "\n", "criterion_supervised", "=", "SigmoidCrossEntropyLoss", "(", ")", "\n", "criterion_unsupervised", "=", "SigmoidMAELoss", "(", ")", "\n", "if", "gpu_id", "!=", "-", "1", ":", "\n", "        ", "model", "=", "model", ".", "cuda", "(", "gpu_id", ")", "\n", "criterion_supervised", "=", "criterion_supervised", ".", "cuda", "(", "gpu_id", ")", "\n", "criterion_unsupervised", "=", "criterion_unsupervised", ".", "cuda", "(", "gpu_id", ")", "\n", "", "optimizer", "=", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "0.0001", ",", "momentum", "=", "0.9", ",", "weight_decay", "=", "0.0008", ")", "\n", "opt_scheduler", "=", "optim", ".", "lr_scheduler", ".", "StepLR", "(", "optimizer", ",", "8", ",", "0.1", ")", "\n", "iter_count", "=", "0", "\n", "avg_loss_train", "=", "0", "\n", "alpha", "=", "0.5", "\n", "vid2mean_pred", "=", "{", "}", "\n", "for", "epoch", "in", "range", "(", "20", ")", ":", "\n", "        ", "model", ".", "train", "(", ")", "\n", "opt_scheduler", ".", "step", "(", ")", "\n", "for", "step", ",", "data", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "            ", "(", "feat", ",", "adj", ",", "labeled_index_in_the_graph", ",", "labeled_index", ")", ",", "pred", ",", "vid", "=", "data", "\n", "feat", ",", "adj", ",", "pred", "=", "Variable", "(", "feat", ")", ",", "Variable", "(", "adj", ")", ",", "Variable", "(", "pred", ")", "\n", "\n", "if", "not", "vid2mean_pred", ".", "has_key", "(", "vid", "[", "0", "]", ")", ":", "\n", "                ", "vid2mean_pred", "[", "vid", "[", "0", "]", "]", "=", "pred", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "flatten", "(", ")", ".", "copy", "(", ")", "\n", "", "mean_pred", "=", "Variable", "(", "torch", ".", "from_numpy", "(", "vid2mean_pred", "[", "vid", "[", "0", "]", "]", ")", ",", "requires_grad", "=", "False", ")", "\n", "\n", "if", "gpu_id", "!=", "-", "1", ":", "\n", "                ", "feat", "=", "feat", ".", "cuda", "(", "gpu_id", ")", "\n", "adj", "=", "adj", ".", "cuda", "(", "gpu_id", ")", "\n", "pred", "=", "pred", ".", "cuda", "(", "gpu_id", ")", "\n", "mean_pred", "=", "mean_pred", ".", "cuda", "(", "gpu_id", ")", "\n", "\n", "", "if", "iter_count", "%", "iter_size", "==", "0", ":", "\n", "                ", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "", "output", "=", "model", "(", "feat", ",", "adj", ")", "\n", "labeled_index_in_the_graph", "=", "np", ".", "array", "(", "labeled_index_in_the_graph", ")", ".", "flatten", "(", ")", "\n", "labeled_index", "=", "np", ".", "array", "(", "labeled_index", ")", ".", "flatten", "(", ")", "\n", "sample_index", "=", "get_sample_index", "(", "labeled_index", ",", "pred", ")", "\n", "\n", "if", "\"Normal\"", "in", "vid", "[", "0", "]", ":", "\n", "                ", "loss_train", "=", "criterion_supervised", "(", "output", ".", "view", "(", "1", ",", "-", "1", ")", ",", "\n", "pred", ".", "view", "(", "1", ",", "-", "1", ")", "[", ":", ",", "range", "(", "output", ".", "shape", "[", "1", "]", ")", "]", ")", "\n", "", "else", ":", "\n", "                ", "loss_train", "=", "criterion_supervised", "(", "output", ".", "view", "(", "1", ",", "-", "1", ")", "[", ":", ",", "labeled_index_in_the_graph", "]", ",", "\n", "pred", ".", "view", "(", "1", ",", "-", "1", ")", "[", ":", ",", "labeled_index", "]", ")", "+", "criterion_unsupervised", "(", "output", ".", "view", "(", "1", ",", "-", "1", ")", ",", "\n", "mean_pred", ".", "view", "(", "1", ",", "-", "1", ")", "[", ":", ",", "sample_index", "]", ")", "\n", "\n", "", "avg_loss_train", "+=", "loss_train", "\n", "iter_count", "+=", "1", "\n", "loss_train", ".", "backward", "(", ")", "\n", "\n", "mean_pred_current", "=", "mean_pred", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "copy", "(", ")", ".", "flatten", "(", ")", "\n", "mean_pred_current", "[", "sample_index", "]", "=", "sigmoid", "(", "output", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "copy", "(", ")", ".", "flatten", "(", ")", "\n", "vid2mean_pred", "[", "vid", "[", "0", "]", "]", "=", "alpha", "*", "vid2mean_pred", "[", "vid", "[", "0", "]", "]", "+", "(", "1", "-", "alpha", ")", "*", "mean_pred_current", "\n", "\n", "if", "(", "iter_count", "+", "1", ")", "%", "iter_size", "==", "0", ":", "\n", "                ", "print", "(", "\"Train loss: %.4f\"", "%", "(", "avg_loss_train", "/", "iter_size", ")", ")", "\n", "avg_loss_train", "=", "0", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "\"rgb_%d.pth\"", "%", "epoch", ")", "\n", "# iter_count += 1610", "\n", "# model.load_state_dict(torch.load(\"%d.pth\" % iter_count))", "\n", "\n", "\n", "print", "(", "\"Epoch %d done !\"", "%", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.pygcn.experiment_rgb.get_sample_index": [[158, 170], ["set", "list", "list.sort", "range", "len", "list.add", "pred.data.cpu().numpy().flatten", "pred.data.cpu().numpy", "pred.data.cpu"], "function", ["None"], ["", "", "def", "get_sample_index", "(", "labeled_index", ",", "pred", ")", ":", "\n", "    ", "local_samples", "=", "8", "\n", "sample_index", "=", "set", "(", ")", "\n", "for", "i", "in", "labeled_index", ":", "\n", "        ", "b", "=", "i", "-", "local_samples", "/", "2", "\n", "e", "=", "i", "+", "1", "+", "local_samples", "/", "2", "\n", "for", "j", "in", "range", "(", "b", ",", "e", ")", ":", "\n", "            ", "if", "0", "<=", "j", "<", "len", "(", "pred", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "flatten", "(", ")", ")", ":", "\n", "                ", "sample_index", ".", "add", "(", "j", ")", "\n", "", "", "", "sample_index", "=", "list", "(", "sample_index", ")", "\n", "sample_index", ".", "sort", "(", ")", "\n", "return", "sample_index", "\n", "\n"]], "home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.pygcn.dataset.UCFCrime.__init__": [[9, 39], ["numpy.exp", "numpy.exp.sum", "open", "pickle.load", "dataset.UCFCrime.__vid__.append", "os.path.join", "os.path.join", "len", "len", "len", "numpy.load", "f[].mean", "f[].mean.resize", "dataset.UCFCrime.__feat__.append", "numpy.load", "f[].mean", "numpy.array", "dataset.UCFCrime.__pred__.append", "dataset.UCFCrime.__pred__.append", "raw_score.max", "numpy.array", "numpy.exp"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "videos_pkl", ",", "prediction_folder", ",", "feature_folder", ",", "modality", ",", "\n", "normalized", "=", "True", ",", "graph_generator", "=", "None", ",", "graph_generator_param", "=", "None", ")", ":", "\n", "        ", "self", ".", "__vid__", "=", "[", "]", "\n", "self", ".", "__feat__", "=", "[", "]", "\n", "self", ".", "__pred__", "=", "[", "]", "\n", "self", ".", "__graph_func__", "=", "graph_generator", "\n", "self", ".", "__graph_param__", "=", "graph_generator_param", "\n", "\n", "def", "softmax", "(", "raw_score", ")", ":", "\n", "            ", "exp_s", "=", "np", ".", "exp", "(", "raw_score", "-", "raw_score", ".", "max", "(", "axis", "=", "-", "1", ")", "[", "...", ",", "None", "]", ")", "\n", "sum_s", "=", "exp_s", ".", "sum", "(", "axis", "=", "-", "1", ")", "\n", "return", "exp_s", "/", "sum_s", "[", "...", ",", "None", "]", "\n", "\n", "", "with", "open", "(", "videos_pkl", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "videos", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "for", "v", "in", "videos", ":", "\n", "            ", "self", ".", "__vid__", ".", "append", "(", "v", ")", "\n", "feat_path", "=", "os", ".", "path", ".", "join", "(", "feature_folder", ",", "\"%s_%s.npz\"", "%", "(", "v", ",", "modality", ")", ")", "\n", "pred_path", "=", "os", ".", "path", ".", "join", "(", "prediction_folder", ",", "\"%s_%s.npz\"", "%", "(", "v", ",", "modality", ")", ")", "\n", "with", "np", ".", "load", "(", "feat_path", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "tmp", "=", "f", "[", "\"scores\"", "]", ".", "mean", "(", "axis", "=", "1", ")", "\n", "tmp", ".", "resize", "(", "(", "tmp", ".", "shape", "[", "0", "]", ",", "tmp", ".", "shape", "[", "1", "]", ")", ")", "\n", "self", ".", "__feat__", ".", "append", "(", "np", ".", "array", "(", "tmp", ")", ")", "\n", "", "with", "np", ".", "load", "(", "pred_path", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "tmp", "=", "f", "[", "\"scores\"", "]", ".", "mean", "(", "axis", "=", "1", ")", "\n", "if", "normalized", ":", "\n", "                    ", "self", ".", "__pred__", ".", "append", "(", "1.0", "/", "(", "1", "+", "np", ".", "exp", "(", "-", "tmp", ")", ")", ".", "flatten", "(", ")", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "__pred__", ".", "append", "(", "np", ".", "array", "(", "tmp", ")", ")", "\n", "", "", "", "assert", "len", "(", "self", ".", "__vid__", ")", "==", "len", "(", "self", ".", "__feat__", ")", "==", "len", "(", "self", ".", "__pred__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.pygcn.dataset.UCFCrime.__getitem__": [[40, 47], ["dataset.UCFCrime.__graph_func__"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "feat", "=", "self", ".", "__feat__", "[", "index", "]", "\n", "pred", "=", "self", ".", "__pred__", "[", "index", "]", "\n", "vid", "=", "self", ".", "__vid__", "[", "index", "]", "\n", "if", "self", ".", "__graph_func__", ":", "\n", "            ", "feat", "=", "self", ".", "__graph_func__", "(", "feat", ",", "pred", ",", "self", ".", "__graph_param__", ")", "\n", "", "return", "feat", ",", "pred", ",", "vid", "\n", "\n"]], "home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.pygcn.dataset.UCFCrime.__len__": [[48, 50], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "__vid__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.pygcn.dataset.UCFCrimeSlow.__init__": [[53, 69], ["open", "pickle.load", "dataset.UCFCrimeSlow.__vid__.append"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "videos_pkl", ",", "prediction_folder", ",", "feature_folder", ",", "modality", ",", "\n", "normalized", "=", "True", ",", "graph_generator", "=", "None", ",", "graph_generator_param", "=", "None", ",", "random_crop", "=", "True", ")", ":", "\n", "        ", "self", ".", "__vid__", "=", "[", "]", "\n", "self", ".", "__feat__", "=", "[", "]", "\n", "self", ".", "__pred__", "=", "[", "]", "\n", "self", ".", "__graph_func__", "=", "graph_generator", "\n", "self", ".", "__graph_param__", "=", "graph_generator_param", "\n", "self", ".", "__normalize__", "=", "normalized", "\n", "self", ".", "__prediction_folder__", "=", "prediction_folder", "\n", "self", ".", "__feature_folder__", "=", "feature_folder", "\n", "self", ".", "__modality__", "=", "modality", "\n", "with", "open", "(", "videos_pkl", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "videos", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "for", "v", "in", "videos", ":", "\n", "            ", "self", ".", "__vid__", ".", "append", "(", "v", ")", "\n", "", "self", ".", "__random_crop__", "=", "random_crop", "\n", "\n"]], "home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.pygcn.dataset.UCFCrimeSlow.__getitem__": [[70, 91], ["os.path.join", "os.path.join", "numpy.load", "numpy.resize", "numpy.load", "f[].mean().flatten", "f[].var().flatten", "dataset.UCFCrimeSlow.__graph_func__", "f[].mean", "numpy.array", "f[].mean", "f[].var", "numpy.exp", "random.randint"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "vid", "=", "self", ".", "__vid__", "[", "index", "]", "\n", "feat_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "__feature_folder__", ",", "\"%s_%s.npz\"", "%", "(", "vid", ",", "self", ".", "__modality__", ")", ")", "\n", "pred_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "__prediction_folder__", ",", "\"%s_%s.npz\"", "%", "(", "vid", ",", "self", ".", "__modality__", ")", ")", "\n", "with", "np", ".", "load", "(", "feat_path", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "if", "self", ".", "__random_crop__", ":", "\n", "                ", "tmp", "=", "f", "[", "\"scores\"", "]", "[", ":", ",", "randint", "(", "0", ",", "f", "[", "\"scores\"", "]", ".", "shape", "[", "1", "]", "-", "1", ")", ",", ":", "]", "\n", "", "else", ":", "\n", "                ", "tmp", "=", "f", "[", "\"scores\"", "]", ".", "mean", "(", "axis", "=", "1", ")", "\n", "", "feat", "=", "np", ".", "resize", "(", "tmp", ",", "(", "tmp", ".", "shape", "[", "0", "]", ",", "tmp", ".", "shape", "[", "1", "]", ")", ")", "\n", "", "with", "np", ".", "load", "(", "pred_path", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "tmp", "=", "f", "[", "\"scores\"", "]", ".", "mean", "(", "axis", "=", "1", ")", ".", "flatten", "(", ")", "\n", "uncertainty", "=", "f", "[", "\"scores\"", "]", ".", "var", "(", "axis", "=", "1", ")", ".", "flatten", "(", ")", "\n", "if", "self", ".", "__normalize__", ":", "\n", "                ", "pred", "=", "1.0", "/", "(", "1", "+", "np", ".", "exp", "(", "-", "tmp", ")", ")", "\n", "", "else", ":", "\n", "                ", "pred", "=", "np", ".", "array", "(", "tmp", ")", "\n", "", "", "if", "self", ".", "__graph_func__", ":", "\n", "            ", "feat", "=", "self", ".", "__graph_func__", "(", "feat", ",", "pred", ",", "uncertainty", ",", "self", ".", "__graph_param__", ")", "\n", "#print feat[0].shape, feat[1].shape, feat[2].shape, feat[3].shape, pred.shape", "\n", "", "return", "feat", ",", "pred", ",", "vid", "\n", "\n"]], "home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.pygcn.dataset.UCFCrimeSlow.__len__": [[92, 94], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "__vid__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.pygcn.layers.GraphAttentionLayer.__init__": [[15, 27], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.init.xavier_uniform", "torch.init.xavier_uniform", "torch.init.xavier_uniform", "torch.init.xavier_uniform", "torch.init.xavier_uniform", "torch.init.xavier_uniform", "torch.Tensor().type", "torch.Tensor().type", "torch.Tensor().type", "torch.Tensor().type", "torch.Tensor().type", "torch.Tensor().type", "torch.Tensor().type", "torch.Tensor().type", "torch.Tensor().type", "torch.Tensor().type", "torch.Tensor().type", "torch.Tensor().type", "torch.Tensor().type", "torch.Tensor().type", "torch.Tensor().type", "torch.Tensor().type", "torch.Tensor().type", "torch.Tensor().type", "numpy.sqrt", "numpy.sqrt", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available"], "methods", ["home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.pygcn.experiment_c3d.ClusteringLoss.__init__"], ["def", "__init__", "(", "self", ",", "in_features", ",", "out_features", ",", "dropout", ",", "alpha", ",", "concat", "=", "True", ")", ":", "\n", "        ", "super", "(", "GraphAttentionLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "in_features", "=", "in_features", "\n", "self", ".", "out_features", "=", "out_features", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "concat", "=", "concat", "\n", "\n", "self", ".", "W", "=", "nn", ".", "Parameter", "(", "nn", ".", "init", ".", "xavier_uniform", "(", "torch", ".", "Tensor", "(", "in_features", ",", "out_features", ")", ".", "type", "(", "torch", ".", "cuda", ".", "FloatTensor", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "torch", ".", "FloatTensor", ")", ",", "gain", "=", "np", ".", "sqrt", "(", "2.0", ")", ")", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "a", "=", "nn", ".", "Parameter", "(", "nn", ".", "init", ".", "xavier_uniform", "(", "torch", ".", "Tensor", "(", "2", "*", "out_features", ",", "1", ")", ".", "type", "(", "torch", ".", "cuda", ".", "FloatTensor", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "torch", ".", "FloatTensor", ")", ",", "gain", "=", "np", ".", "sqrt", "(", "2.0", ")", ")", ",", "requires_grad", "=", "True", ")", "\n", "\n", "self", ".", "leakyrelu", "=", "nn", ".", "LeakyReLU", "(", "self", ".", "alpha", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.pygcn.layers.GraphAttentionLayer.forward": [[28, 45], ["torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "layers.GraphAttentionLayer.leakyrelu", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.softmax", "torch.softmax", "torch.softmax", "torch.dropout", "torch.dropout", "torch.dropout", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.mm.size", "torch.mm.size", "torch.mm.size", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.elu", "torch.elu", "torch.elu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.mm.repeat().view", "torch.mm.repeat().view", "torch.mm.repeat().view", "torch.mm.repeat", "torch.mm.repeat", "torch.mm.repeat", "torch.mm.repeat", "torch.mm.repeat", "torch.mm.repeat"], "methods", ["home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.utils.metrics.softmax", "home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.utils.metrics.softmax", "home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.utils.metrics.softmax"], ["", "def", "forward", "(", "self", ",", "input", ",", "adj", ")", ":", "\n", "        ", "h", "=", "torch", ".", "mm", "(", "input", ",", "self", ".", "W", ")", "\n", "N", "=", "h", ".", "size", "(", ")", "[", "0", "]", "\n", "\n", "a_input", "=", "torch", ".", "cat", "(", "[", "h", ".", "repeat", "(", "1", ",", "N", ")", ".", "view", "(", "N", "*", "N", ",", "-", "1", ")", ",", "h", ".", "repeat", "(", "N", ",", "1", ")", "]", ",", "dim", "=", "1", ")", ".", "view", "(", "N", ",", "-", "1", ",", "2", "*", "self", ".", "out_features", ")", "\n", "e", "=", "self", ".", "leakyrelu", "(", "torch", ".", "matmul", "(", "a_input", ",", "self", ".", "a", ")", ".", "squeeze", "(", "2", ")", ")", "\n", "\n", "zero_vec", "=", "-", "9e15", "*", "torch", ".", "ones_like", "(", "e", ")", "\n", "attention", "=", "torch", ".", "where", "(", "adj", ">", "0", ",", "e", ",", "zero_vec", ")", "\n", "attention", "=", "F", ".", "softmax", "(", "attention", ",", "dim", "=", "1", ")", "\n", "attention", "=", "F", ".", "dropout", "(", "attention", ",", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "h_prime", "=", "torch", ".", "matmul", "(", "attention", ",", "h", ")", "\n", "\n", "if", "self", ".", "concat", ":", "\n", "            ", "return", "F", ".", "elu", "(", "h_prime", ")", "\n", "", "else", ":", "\n", "            ", "return", "h_prime", "\n", "\n"]], "home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.pygcn.layers.GraphAttentionLayer.__repr__": [[46, 48], ["str", "str"], "methods", ["None"], ["", "", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "' ('", "+", "str", "(", "self", ".", "in_features", ")", "+", "' -> '", "+", "str", "(", "self", ".", "out_features", ")", "+", "')'", "\n", "\n"]], "home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.pygcn.layers.GraphConvolution.__init__": [[55, 65], ["torch.nn.modules.module.Module.__init__", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "layers.GraphConvolution.reset_parameters", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "layers.GraphConvolution.register_parameter", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.pygcn.experiment_c3d.ClusteringLoss.__init__", "home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.pygcn.layers.GraphConvolution.reset_parameters"], ["def", "__init__", "(", "self", ",", "in_features", ",", "out_features", ",", "bias", "=", "False", ")", ":", "\n", "        ", "super", "(", "GraphConvolution", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_features", "=", "in_features", "\n", "self", ".", "out_features", "=", "out_features", "\n", "self", ".", "weight", "=", "Parameter", "(", "FloatTensor", "(", "in_features", ",", "out_features", ")", ")", "\n", "if", "bias", ":", "\n", "            ", "self", ".", "bias", "=", "Parameter", "(", "FloatTensor", "(", "out_features", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "'bias'", ",", "None", ")", "\n", "", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.pygcn.layers.GraphConvolution.reset_parameters": [[66, 71], ["layers.GraphConvolution.weight.data.uniform_", "math.sqrt", "layers.GraphConvolution.bias.data.uniform_", "layers.GraphConvolution.weight.size"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "stdv", "=", "1.", "/", "sqrt", "(", "self", ".", "weight", ".", "size", "(", "1", ")", ")", "\n", "self", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "self", ".", "bias", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.pygcn.layers.GraphConvolution.forward": [[72, 81], ["input.matmul", "adj.matmul"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input", ",", "adj", ")", ":", "\n", "# To support batch operations", "\n", "        ", "support", "=", "input", ".", "matmul", "(", "self", ".", "weight", ")", "\n", "output", "=", "adj", ".", "matmul", "(", "support", ")", "\n", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "return", "output", "+", "self", ".", "bias", "\n", "", "else", ":", "\n", "            ", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.pygcn.layers.GraphConvolution.__repr__": [[82, 86], ["str", "str"], "methods", ["None"], ["", "", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "' ('", "+", "str", "(", "self", ".", "in_features", ")", "+", "' -> '", "+", "str", "(", "self", ".", "out_features", ")", "+", "')'", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.pygcn.experiment_flow.SigmoidMAELoss.__init__": [[23, 28], ["torch.nn.Module.__init__", "Sigmoid", "torch.nn.L1Loss"], "methods", ["home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.pygcn.experiment_c3d.ClusteringLoss.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "SigmoidMAELoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "from", "torch", ".", "nn", "import", "Sigmoid", "\n", "self", ".", "__sigmoid__", "=", "Sigmoid", "(", ")", "\n", "self", ".", "__l1_loss__", "=", "L1Loss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.pygcn.experiment_flow.SigmoidMAELoss.forward": [[29, 31], ["experiment_flow.SigmoidMAELoss.__l1_loss__", "experiment_flow.SigmoidMAELoss.__sigmoid__"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "pred", ",", "target", ")", ":", "\n", "        ", "return", "self", ".", "__l1_loss__", "(", "self", ".", "__sigmoid__", "(", "pred", ")", ",", "target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.pygcn.experiment_flow.SigmoidCrossEntropyLoss.__init__": [[35, 37], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.pygcn.experiment_c3d.ClusteringLoss.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "SigmoidCrossEntropyLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.pygcn.experiment_flow.SigmoidCrossEntropyLoss.forward": [[38, 41], ["torch.mean", "torch.exp", "torch.log", "torch.abs", "torch.clamp"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "target", ")", ":", "\n", "        ", "tmp", "=", "1", "+", "torch", ".", "exp", "(", "-", "torch", ".", "abs", "(", "x", ")", ")", "\n", "return", "torch", ".", "mean", "(", "-", "x", "*", "target", "+", "torch", ".", "clamp", "(", "x", ",", "min", "=", "0", ")", "+", "torch", ".", "log", "(", "tmp", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.pygcn.experiment_flow.ClusteringLoss.__init__": [[49, 56], ["torch.nn.Module.__init__", "torch.nn.Parameter", "torch.nn.init.xavier_normal_", "torch.nn.KLDivLoss", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.pygcn.experiment_c3d.ClusteringLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_clusters", ",", "n_z", ",", "alpha", "=", "1.0", ")", ":", "\n", "        ", "super", "(", "ClusteringLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "alpha", "=", "alpha", "\n", "# cluster layer", "\n", "self", ".", "cluster_layer", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "n_clusters", ",", "n_z", ")", ")", "\n", "torch", ".", "nn", ".", "init", ".", "xavier_normal_", "(", "self", ".", "cluster_layer", ".", "data", ")", "\n", "self", ".", "kl_divergence", "=", "nn", ".", "KLDivLoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.pygcn.experiment_flow.ClusteringLoss.forward": [[57, 64], ["q.pow.pow.pow", "torch.sum", "q.pow.pow.t", "torch.sum", "torch.pow", "z.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "z", ")", ":", "\n", "# cluster", "\n", "        ", "q", "=", "1.0", "/", "(", "1.0", "+", "torch", ".", "sum", "(", "\n", "torch", ".", "pow", "(", "z", ".", "unsqueeze", "(", "1", ")", "-", "self", ".", "cluster_layer", ",", "2", ")", ",", "2", ")", "/", "self", ".", "alpha", ")", "\n", "q", "=", "q", ".", "pow", "(", "(", "self", ".", "alpha", "+", "1.0", ")", "/", "2.0", ")", "\n", "q", "=", "(", "q", ".", "t", "(", ")", "/", "torch", ".", "sum", "(", "q", ",", "1", ")", ")", ".", "t", "(", ")", "\n", "return", "q", "\n", "\n"]], "home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.pygcn.experiment_flow.ClusteringLoss.target_distribution": [[65, 69], ["q.sum", "weight.t", "weight.sum"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "target_distribution", "(", "q", ")", ":", "\n", "        ", "weight", "=", "q", "**", "2", "/", "q", ".", "sum", "(", "0", ")", "\n", "return", "(", "weight", ".", "t", "(", ")", "/", "weight", ".", "sum", "(", "1", ")", ")", ".", "t", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.pygcn.experiment_flow.get_centroids_of_kmean": [[71, 75], ["sklearn.cluster.KMeans", "sklearn.cluster.KMeans.fit_predict"], "function", ["None"], ["", "", "def", "get_centroids_of_kmean", "(", "data", ",", "k", ")", ":", "\n", "    ", "kmeans", "=", "KMeans", "(", "k", ",", "n_jobs", "=", "16", ")", "\n", "y_pred", "=", "kmeans", ".", "fit_predict", "(", "data", ")", "\n", "return", "y_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.pygcn.experiment_flow.train_gcn": [[77, 169], ["torch.cuda.empty_cache", "dataset.UCFCrimeSlow", "torch.utils.data.DataLoader", "models.NoiseFilter", "experiment_flow.SigmoidCrossEntropyLoss", "experiment_flow.SigmoidMAELoss", "torch.optim.SGD", "torch.optim.lr_scheduler.StepLR", "range", "model.cuda.cuda", "criterion_supervised.cuda.cuda", "criterion_unsupervised.cuda.cuda", "model.cuda.parameters", "model.cuda.train", "optim.lr_scheduler.StepLR.step", "enumerate", "torch.save", "print", "torch.autograd.Variable", "model.cuda.", "numpy.array().flatten", "numpy.array().flatten", "experiment_flow.get_sample_index", "criterion_supervised.backward", "mean_pred.cuda.data.cpu().numpy().copy().flatten", "torch.nn.functional.sigmoid().data.cpu().numpy().copy().flatten", "model.cuda.state_dict", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "vid2mean_pred.has_key", "pred.cuda.data.cpu().numpy().flatten().copy", "torch.from_numpy", "feat.cuda.cuda", "adj.cuda.cuda", "pred.cuda.cuda", "mean_pred.cuda.cuda", "optim.SGD.zero_grad", "criterion_supervised.cuda.", "print", "optim.SGD.step", "numpy.array", "numpy.array", "model.view", "criterion_supervised.cuda.", "criterion_unsupervised.cuda.", "mean_pred.cuda.data.cpu().numpy().copy", "torch.nn.functional.sigmoid().data.cpu().numpy().copy", "pred.cuda.data.cpu().numpy().flatten", "pred.cuda.view", "model.view", "model.view", "pred.cuda.view", "mean_pred.cuda.view", "mean_pred.cuda.data.cpu().numpy", "torch.nn.functional.sigmoid().data.cpu().numpy", "pred.cuda.data.cpu().numpy", "range", "mean_pred.cuda.data.cpu", "torch.nn.functional.sigmoid().data.cpu", "pred.cuda.data.cpu", "torch.nn.functional.sigmoid"], "function", ["home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.pygcn.experiment_c3d.get_sample_index"], ["", "def", "train_gcn", "(", "param", ")", ":", "\n", "    ", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "videos_pkl_train", "=", "\"/home/lnn/workspace/pygcn/pygcn/ucf_crime_train.pkl\"", "\n", "videos_pkl_test", "=", "\"/home/lnn/workspace/pygcn/pygcn/ucf_crime_test.pkl\"", "\n", "feature_folder", "=", "\"/home/lnn/workspace/UCF_Crimes/kinetics_flow5000_feat/\"", "\n", "prediction_folder", "=", "\"/home/lnn/workspace/UCF_Crimes/kinetics_flow5000/\"", "\n", "test_pred_gt_folder", "=", "\"/home/lnn/data/UCF_Crimes/test_pred_groundtruth/\"", "\n", "modality", "=", "\"flow\"", "\n", "gpu_id", "=", "1", "\n", "iter_size", "=", "32", "\n", "ucf_crime_train", "=", "UCFCrimeSlow", "(", "videos_pkl_train", ",", "prediction_folder", ",", "feature_folder", ",", "modality", ",", "\n", "graph_generator", "=", "soft_uniform_sampling", ",", "graph_generator_param", "=", "param", ")", "\n", "train_loader", "=", "DataLoader", "(", "dataset", "=", "ucf_crime_train", ",", "batch_size", "=", "1", ",", "shuffle", "=", "True", ",", "num_workers", "=", "16", ")", "\n", "model", "=", "NoiseFilter", "(", "nfeat", "=", "1024", ",", "nclass", "=", "1", ")", "\n", "criterion_supervised", "=", "SigmoidCrossEntropyLoss", "(", ")", "\n", "criterion_unsupervised", "=", "SigmoidMAELoss", "(", ")", "\n", "if", "gpu_id", "!=", "-", "1", ":", "\n", "        ", "model", "=", "model", ".", "cuda", "(", "gpu_id", ")", "\n", "criterion_supervised", "=", "criterion_supervised", ".", "cuda", "(", "gpu_id", ")", "\n", "criterion_unsupervised", "=", "criterion_unsupervised", ".", "cuda", "(", "gpu_id", ")", "\n", "", "optimizer", "=", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "0.0001", ",", "momentum", "=", "0.9", ",", "weight_decay", "=", "0.0005", ")", "\n", "opt_scheduler", "=", "optim", ".", "lr_scheduler", ".", "StepLR", "(", "optimizer", ",", "16", ",", "0.1", ")", "\n", "iter_count", "=", "0", "\n", "avg_loss_train", "=", "0", "\n", "alpha", "=", "0.5", "\n", "vid2mean_pred", "=", "{", "}", "\n", "#model.load_state_dict(torch.load(\"flow_9_0.6.pth\"))", "\n", "for", "epoch", "in", "range", "(", "20", ")", ":", "\n", "        ", "model", ".", "train", "(", ")", "\n", "opt_scheduler", ".", "step", "(", ")", "\n", "for", "step", ",", "data", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "            ", "(", "feat", ",", "adj", ",", "labeled_index_in_the_graph", ",", "labeled_index", ")", ",", "pred", ",", "vid", "=", "data", "\n", "feat", ",", "adj", ",", "pred", "=", "Variable", "(", "feat", ")", ",", "Variable", "(", "adj", ")", ",", "Variable", "(", "pred", ")", "\n", "\n", "if", "not", "vid2mean_pred", ".", "has_key", "(", "vid", "[", "0", "]", ")", ":", "\n", "                ", "vid2mean_pred", "[", "vid", "[", "0", "]", "]", "=", "pred", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "flatten", "(", ")", ".", "copy", "(", ")", "\n", "", "mean_pred", "=", "Variable", "(", "torch", ".", "from_numpy", "(", "vid2mean_pred", "[", "vid", "[", "0", "]", "]", ")", ",", "requires_grad", "=", "False", ")", "\n", "\n", "if", "gpu_id", "!=", "-", "1", ":", "\n", "                ", "feat", "=", "feat", ".", "cuda", "(", "gpu_id", ")", "\n", "adj", "=", "adj", ".", "cuda", "(", "gpu_id", ")", "\n", "pred", "=", "pred", ".", "cuda", "(", "gpu_id", ")", "\n", "mean_pred", "=", "mean_pred", ".", "cuda", "(", "gpu_id", ")", "\n", "\n", "", "if", "iter_count", "%", "iter_size", "==", "0", ":", "\n", "                ", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "", "output", "=", "model", "(", "feat", ",", "adj", ")", "\n", "labeled_index_in_the_graph", "=", "np", ".", "array", "(", "labeled_index_in_the_graph", ")", ".", "flatten", "(", ")", "\n", "labeled_index", "=", "np", ".", "array", "(", "labeled_index", ")", ".", "flatten", "(", ")", "\n", "sample_index", "=", "get_sample_index", "(", "labeled_index", ",", "pred", ")", "\n", "\n", "if", "\"Normal\"", "in", "vid", "[", "0", "]", ":", "\n", "                ", "loss_train", "=", "criterion_supervised", "(", "output", ".", "view", "(", "1", ",", "-", "1", ")", ",", "\n", "pred", ".", "view", "(", "1", ",", "-", "1", ")", "[", ":", ",", "range", "(", "output", ".", "shape", "[", "1", "]", ")", "]", ")", "\n", "", "else", ":", "\n", "                ", "'''\n                loss_train = criterion_supervised(output.view(1, -1)[:, labeled_index_in_the_graph],\n                                                  pred.view(1, -1)[:, labeled_index])\n                '''", "\n", "loss_train", "=", "criterion_supervised", "(", "output", ".", "view", "(", "1", ",", "-", "1", ")", "[", ":", ",", "labeled_index_in_the_graph", "]", ",", "\n", "pred", ".", "view", "(", "1", ",", "-", "1", ")", "[", ":", ",", "labeled_index", "]", ")", "+", "criterion_unsupervised", "(", "output", ".", "view", "(", "1", ",", "-", "1", ")", ",", "\n", "mean_pred", ".", "view", "(", "1", ",", "-", "1", ")", "[", ":", ",", "sample_index", "]", ")", "\n", "\n", "\n", "", "avg_loss_train", "+=", "loss_train", "\n", "iter_count", "+=", "1", "\n", "loss_train", ".", "backward", "(", ")", "\n", "\n", "#torch.nn.utils.clip_grad_norm(model.parameters(), 40)", "\n", "\n", "mean_pred_current", "=", "mean_pred", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "copy", "(", ")", ".", "flatten", "(", ")", "\n", "mean_pred_current", "[", "sample_index", "]", "=", "sigmoid", "(", "output", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "copy", "(", ")", ".", "flatten", "(", ")", "\n", "vid2mean_pred", "[", "vid", "[", "0", "]", "]", "=", "alpha", "*", "vid2mean_pred", "[", "vid", "[", "0", "]", "]", "+", "(", "1", "-", "alpha", ")", "*", "mean_pred_current", "\n", "\n", "if", "(", "iter_count", "+", "1", ")", "%", "iter_size", "==", "0", ":", "\n", "                ", "print", "(", "\"Train loss: %.4f\"", "%", "(", "avg_loss_train", "/", "iter_size", ")", ")", "\n", "avg_loss_train", "=", "0", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "\"flow_%d.pth\"", "%", "epoch", ")", "\n", "# iter_count += 1610", "\n", "# model.load_state_dict(torch.load(\"%d.pth\" % iter_count))", "\n", "\n", "'''\n        x = range(len(gt))\n        plt.scatter(x, gt, color='g')\n        plt.scatter(x, ans, color='r')\n        plt.show()\n        '''", "\n", "print", "(", "\"Epoch %d done !\"", "%", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.pygcn.experiment_flow.get_sample_index": [[171, 183], ["set", "list", "list.sort", "range", "len", "list.add", "pred.data.cpu().numpy().flatten", "pred.data.cpu().numpy", "pred.data.cpu"], "function", ["None"], ["", "", "def", "get_sample_index", "(", "labeled_index", ",", "pred", ")", ":", "\n", "    ", "local_samples", "=", "8", "\n", "sample_index", "=", "set", "(", ")", "\n", "for", "i", "in", "labeled_index", ":", "\n", "        ", "b", "=", "i", "-", "local_samples", "/", "2", "\n", "e", "=", "i", "+", "1", "+", "local_samples", "/", "2", "\n", "for", "j", "in", "range", "(", "b", ",", "e", ")", ":", "\n", "            ", "if", "0", "<=", "j", "<", "len", "(", "pred", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "flatten", "(", ")", ")", ":", "\n", "                ", "sample_index", ".", "add", "(", "j", ")", "\n", "", "", "", "sample_index", "=", "list", "(", "sample_index", ")", "\n", "sample_index", ".", "sort", "(", ")", "\n", "return", "sample_index", "\n", "\n"]], "home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.pygcn.experiment_c3d.SigmoidMAELoss.__init__": [[23, 28], ["torch.nn.Module.__init__", "Sigmoid", "torch.nn.L1Loss"], "methods", ["home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.pygcn.experiment_c3d.ClusteringLoss.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "SigmoidMAELoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "from", "torch", ".", "nn", "import", "Sigmoid", "\n", "self", ".", "__sigmoid__", "=", "Sigmoid", "(", ")", "\n", "self", ".", "__l1_loss__", "=", "L1Loss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.pygcn.experiment_c3d.SigmoidMAELoss.forward": [[29, 31], ["experiment_c3d.SigmoidMAELoss.__l1_loss__", "experiment_c3d.SigmoidMAELoss.__sigmoid__"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "pred", ",", "target", ")", ":", "\n", "        ", "return", "self", ".", "__l1_loss__", "(", "self", ".", "__sigmoid__", "(", "pred", ")", ",", "target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.pygcn.experiment_c3d.SigmoidCrossEntropyLoss.__init__": [[35, 37], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.pygcn.experiment_c3d.ClusteringLoss.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "SigmoidCrossEntropyLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.pygcn.experiment_c3d.SigmoidCrossEntropyLoss.forward": [[38, 41], ["torch.mean", "torch.exp", "torch.log", "torch.abs", "torch.clamp"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "target", ")", ":", "\n", "        ", "tmp", "=", "1", "+", "torch", ".", "exp", "(", "-", "torch", ".", "abs", "(", "x", ")", ")", "\n", "return", "torch", ".", "mean", "(", "-", "x", "*", "target", "+", "torch", ".", "clamp", "(", "x", ",", "min", "=", "0", ")", "+", "torch", ".", "log", "(", "tmp", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.pygcn.experiment_c3d.ClusteringLoss.__init__": [[49, 56], ["torch.nn.Module.__init__", "torch.nn.Parameter", "torch.nn.init.xavier_normal_", "torch.nn.KLDivLoss", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.pygcn.experiment_c3d.ClusteringLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_clusters", ",", "n_z", ",", "alpha", "=", "1.0", ")", ":", "\n", "        ", "super", "(", "ClusteringLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "alpha", "=", "alpha", "\n", "# cluster layer", "\n", "self", ".", "cluster_layer", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "n_clusters", ",", "n_z", ")", ")", "\n", "torch", ".", "nn", ".", "init", ".", "xavier_normal_", "(", "self", ".", "cluster_layer", ".", "data", ")", "\n", "self", ".", "kl_divergence", "=", "nn", ".", "KLDivLoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.pygcn.experiment_c3d.ClusteringLoss.forward": [[57, 64], ["q.pow.pow.pow", "torch.sum", "q.pow.pow.t", "torch.sum", "torch.pow", "z.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "z", ")", ":", "\n", "# cluster", "\n", "        ", "q", "=", "1.0", "/", "(", "1.0", "+", "torch", ".", "sum", "(", "\n", "torch", ".", "pow", "(", "z", ".", "unsqueeze", "(", "1", ")", "-", "self", ".", "cluster_layer", ",", "2", ")", ",", "2", ")", "/", "self", ".", "alpha", ")", "\n", "q", "=", "q", ".", "pow", "(", "(", "self", ".", "alpha", "+", "1.0", ")", "/", "2.0", ")", "\n", "q", "=", "(", "q", ".", "t", "(", ")", "/", "torch", ".", "sum", "(", "q", ",", "1", ")", ")", ".", "t", "(", ")", "\n", "return", "q", "\n", "\n"]], "home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.pygcn.experiment_c3d.ClusteringLoss.target_distribution": [[65, 69], ["q.sum", "weight.t", "weight.sum"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "target_distribution", "(", "q", ")", ":", "\n", "        ", "weight", "=", "q", "**", "2", "/", "q", ".", "sum", "(", "0", ")", "\n", "return", "(", "weight", ".", "t", "(", ")", "/", "weight", ".", "sum", "(", "1", ")", ")", ".", "t", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.pygcn.experiment_c3d.get_centroids_of_kmean": [[71, 75], ["sklearn.cluster.KMeans", "sklearn.cluster.KMeans.fit_predict"], "function", ["None"], ["", "", "def", "get_centroids_of_kmean", "(", "data", ",", "k", ")", ":", "\n", "    ", "kmeans", "=", "KMeans", "(", "k", ",", "n_jobs", "=", "16", ")", "\n", "y_pred", "=", "kmeans", ".", "fit_predict", "(", "data", ")", "\n", "return", "y_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.pygcn.experiment_c3d.train_gcn": [[77, 156], ["torch.cuda.empty_cache", "dataset.UCFCrimeSlow", "torch.utils.data.DataLoader", "models.NoiseFilter", "experiment_c3d.SigmoidCrossEntropyLoss", "experiment_c3d.SigmoidMAELoss", "torch.optim.SGD", "torch.optim.lr_scheduler.StepLR", "range", "model.cuda.cuda", "criterion_supervised.cuda.cuda", "criterion_unsupervised.cuda.cuda", "model.cuda.parameters", "model.cuda.train", "optim.lr_scheduler.StepLR.step", "enumerate", "torch.save", "print", "torch.autograd.Variable", "model.cuda.", "numpy.array().flatten", "numpy.array().flatten", "experiment_c3d.get_sample_index", "criterion_supervised.backward", "mean_pred.cuda.data.cpu().numpy().copy().flatten", "torch.nn.functional.sigmoid().data.cpu().numpy().copy().flatten", "model.cuda.state_dict", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "vid2mean_pred.has_key", "pred.cuda.data.cpu().numpy().flatten().copy", "torch.from_numpy", "feat.cuda.cuda", "adj.cuda.cuda", "pred.cuda.cuda", "mean_pred.cuda.cuda", "optim.SGD.zero_grad", "criterion_supervised.cuda.", "print", "optim.SGD.step", "numpy.array", "numpy.array", "model.view", "criterion_supervised.cuda.", "criterion_unsupervised.cuda.", "mean_pred.cuda.data.cpu().numpy().copy", "torch.nn.functional.sigmoid().data.cpu().numpy().copy", "pred.cuda.data.cpu().numpy().flatten", "pred.cuda.view", "model.view", "model.view", "pred.cuda.view", "mean_pred.cuda.view", "mean_pred.cuda.data.cpu().numpy", "torch.nn.functional.sigmoid().data.cpu().numpy", "pred.cuda.data.cpu().numpy", "range", "mean_pred.cuda.data.cpu", "torch.nn.functional.sigmoid().data.cpu", "pred.cuda.data.cpu", "torch.nn.functional.sigmoid"], "function", ["home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.pygcn.experiment_c3d.get_sample_index"], ["", "def", "train_gcn", "(", "param", ")", ":", "\n", "    ", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "videos_pkl_train", "=", "\"/home/lnn/workspace/pygcn/pygcn/ucf_crime_train.pkl\"", "\n", "videos_pkl_test", "=", "\"/home/lnn/workspace/pygcn/pygcn/ucf_crime_test.pkl\"", "\n", "feature_folder", "=", "\"/home/lnn/workspace/UCF_Crimes/c3d_features_all/_iter_4500/\"", "\n", "prediction_folder", "=", "\"/home/lnn/workspace/UCF_Crimes/c3d_features_1_high_conf_sampling_0.6/_iter_1000/\"", "\n", "test_pred_gt_folder", "=", "\"/home/lnn/data/UCF_Crimes/test_pred_groundtruth/\"", "\n", "modality", "=", "\"c3d\"", "\n", "gpu_id", "=", "0", "\n", "iter_size", "=", "32", "\n", "ucf_crime_train", "=", "UCFCrimeSlow", "(", "videos_pkl_train", ",", "prediction_folder", ",", "feature_folder", ",", "modality", ",", "\n", "graph_generator", "=", "soft_uniform_sampling", ",", "graph_generator_param", "=", "param", ")", "\n", "train_loader", "=", "DataLoader", "(", "dataset", "=", "ucf_crime_train", ",", "batch_size", "=", "1", ",", "shuffle", "=", "True", ",", "num_workers", "=", "16", ")", "\n", "model", "=", "NoiseFilter", "(", "nfeat", "=", "4096", ",", "nclass", "=", "1", ")", "\n", "criterion_supervised", "=", "SigmoidCrossEntropyLoss", "(", ")", "\n", "criterion_unsupervised", "=", "SigmoidMAELoss", "(", ")", "\n", "if", "gpu_id", "!=", "-", "1", ":", "\n", "        ", "model", "=", "model", ".", "cuda", "(", "gpu_id", ")", "\n", "criterion_supervised", "=", "criterion_supervised", ".", "cuda", "(", "gpu_id", ")", "\n", "criterion_unsupervised", "=", "criterion_unsupervised", ".", "cuda", "(", "gpu_id", ")", "\n", "", "optimizer", "=", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "0.0001", ",", "momentum", "=", "0.9", ",", "weight_decay", "=", "0.0005", ")", "\n", "opt_scheduler", "=", "optim", ".", "lr_scheduler", ".", "StepLR", "(", "optimizer", ",", "5", ",", "0.1", ")", "\n", "iter_count", "=", "0", "\n", "avg_loss_train", "=", "0", "\n", "alpha", "=", "0.5", "\n", "vid2mean_pred", "=", "{", "}", "\n", "for", "epoch", "in", "range", "(", "20", ")", ":", "\n", "        ", "model", ".", "train", "(", ")", "\n", "opt_scheduler", ".", "step", "(", ")", "\n", "for", "step", ",", "data", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "            ", "(", "feat", ",", "adj", ",", "labeled_index_in_the_graph", ",", "labeled_index", ")", ",", "pred", ",", "vid", "=", "data", "\n", "feat", ",", "adj", ",", "pred", "=", "Variable", "(", "feat", ")", ",", "Variable", "(", "adj", ")", ",", "Variable", "(", "pred", ")", "\n", "\n", "if", "not", "vid2mean_pred", ".", "has_key", "(", "vid", "[", "0", "]", ")", ":", "\n", "                ", "vid2mean_pred", "[", "vid", "[", "0", "]", "]", "=", "pred", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "flatten", "(", ")", ".", "copy", "(", ")", "\n", "", "mean_pred", "=", "Variable", "(", "torch", ".", "from_numpy", "(", "vid2mean_pred", "[", "vid", "[", "0", "]", "]", ")", ",", "requires_grad", "=", "False", ")", "\n", "\n", "if", "gpu_id", "!=", "-", "1", ":", "\n", "                ", "feat", "=", "feat", ".", "cuda", "(", "gpu_id", ")", "\n", "adj", "=", "adj", ".", "cuda", "(", "gpu_id", ")", "\n", "pred", "=", "pred", ".", "cuda", "(", "gpu_id", ")", "\n", "mean_pred", "=", "mean_pred", ".", "cuda", "(", "gpu_id", ")", "\n", "\n", "", "if", "iter_count", "%", "iter_size", "==", "0", ":", "\n", "                ", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "", "output", "=", "model", "(", "feat", ",", "adj", ")", "\n", "labeled_index_in_the_graph", "=", "np", ".", "array", "(", "labeled_index_in_the_graph", ")", ".", "flatten", "(", ")", "\n", "labeled_index", "=", "np", ".", "array", "(", "labeled_index", ")", ".", "flatten", "(", ")", "\n", "sample_index", "=", "get_sample_index", "(", "labeled_index", ",", "pred", ")", "\n", "\n", "if", "\"Normal\"", "in", "vid", "[", "0", "]", ":", "\n", "                ", "loss_train", "=", "criterion_supervised", "(", "output", ".", "view", "(", "1", ",", "-", "1", ")", ",", "\n", "pred", ".", "view", "(", "1", ",", "-", "1", ")", "[", ":", ",", "range", "(", "output", ".", "shape", "[", "1", "]", ")", "]", ")", "\n", "", "else", ":", "\n", "                ", "loss_train", "=", "criterion_supervised", "(", "output", ".", "view", "(", "1", ",", "-", "1", ")", "[", ":", ",", "labeled_index_in_the_graph", "]", ",", "\n", "pred", ".", "view", "(", "1", ",", "-", "1", ")", "[", ":", ",", "labeled_index", "]", ")", "+", "criterion_unsupervised", "(", "output", ".", "view", "(", "1", ",", "-", "1", ")", ",", "\n", "mean_pred", ".", "view", "(", "1", ",", "-", "1", ")", "[", ":", ",", "sample_index", "]", ")", "\n", "\n", "", "avg_loss_train", "+=", "loss_train", "\n", "iter_count", "+=", "1", "\n", "loss_train", ".", "backward", "(", ")", "\n", "\n", "mean_pred_current", "=", "mean_pred", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "copy", "(", ")", ".", "flatten", "(", ")", "\n", "mean_pred_current", "[", "sample_index", "]", "=", "sigmoid", "(", "output", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "copy", "(", ")", ".", "flatten", "(", ")", "\n", "vid2mean_pred", "[", "vid", "[", "0", "]", "]", "=", "alpha", "*", "vid2mean_pred", "[", "vid", "[", "0", "]", "]", "+", "(", "1", "-", "alpha", ")", "*", "mean_pred_current", "\n", "\n", "if", "(", "iter_count", "+", "1", ")", "%", "iter_size", "==", "0", ":", "\n", "                ", "print", "(", "\"Train loss: %.4f\"", "%", "(", "avg_loss_train", "/", "iter_size", ")", ")", "\n", "avg_loss_train", "=", "0", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "\"c3d_%d.pth\"", "%", "epoch", ")", "\n", "# iter_count += 1610", "\n", "# model.load_state_dict(torch.load(\"%d.pth\" % iter_count))", "\n", "\n", "\n", "print", "(", "\"Epoch %d done !\"", "%", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jx-zhong-for-academic-purpose_GCN-Anomaly-Detection.pygcn.experiment_c3d.get_sample_index": [[158, 170], ["set", "list", "list.sort", "range", "len", "list.add", "pred.data.cpu().numpy().flatten", "pred.data.cpu().numpy", "pred.data.cpu"], "function", ["None"], ["", "", "def", "get_sample_index", "(", "labeled_index", ",", "pred", ")", ":", "\n", "    ", "local_samples", "=", "8", "\n", "sample_index", "=", "set", "(", ")", "\n", "for", "i", "in", "labeled_index", ":", "\n", "        ", "b", "=", "i", "-", "local_samples", "/", "2", "\n", "e", "=", "i", "+", "1", "+", "local_samples", "/", "2", "\n", "for", "j", "in", "range", "(", "b", ",", "e", ")", ":", "\n", "            ", "if", "0", "<=", "j", "<", "len", "(", "pred", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "flatten", "(", ")", ")", ":", "\n", "                ", "sample_index", ".", "add", "(", "j", ")", "\n", "", "", "", "sample_index", "=", "list", "(", "sample_index", ")", "\n", "sample_index", ".", "sort", "(", ")", "\n", "return", "sample_index", "\n", "\n"]]}