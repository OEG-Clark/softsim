{"home.repos.pwc.inspect_result.suamin_t2ner.None.run.main": [[26, 70], ["transformers.HfArgumentParser", "t2ner.trainers.NERTrainer", "t2ner.trainers.MMETrainer.run", "t2ner.trainers.MMETrainer.run", "run.parse_json_config", "transformers.HfArgumentParser", "t2ner.trainers.GRLTrainer", "t2ner.trainers.MMETrainer.run", "transformers.HfArgumentParser", "t2ner.trainers.EMDTrainer", "transformers.HfArgumentParser", "t2ner.trainers.EntMinTrainer", "NotImplementedError", "transformers.HfArgumentParser", "t2ner.trainers.MultiTaskNERTrainer", "t2ner.trainers.MMETrainer.run", "NotImplementedError", "run.parse_json_config", "transformers.HfArgumentParser", "t2ner.trainers.KeungTrainer", "run.parse_json_config", "transformers.HfArgumentParser", "t2ner.trainers.MCDTrainer", "run.parse_json_config", "run.parse_json_config", "run.parse_json_config", "transformers.HfArgumentParser", "t2ner.trainers.MMETrainer", "NotImplementedError", "run.parse_json_config", "run.parse_json_config"], "function", ["home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.run", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.run", "home.repos.pwc.inspect_result.suamin_t2ner.None.run.parse_json_config", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.run", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.run", "home.repos.pwc.inspect_result.suamin_t2ner.None.run.parse_json_config", "home.repos.pwc.inspect_result.suamin_t2ner.None.run.parse_json_config", "home.repos.pwc.inspect_result.suamin_t2ner.None.run.parse_json_config", "home.repos.pwc.inspect_result.suamin_t2ner.None.run.parse_json_config", "home.repos.pwc.inspect_result.suamin_t2ner.None.run.parse_json_config", "home.repos.pwc.inspect_result.suamin_t2ner.None.run.parse_json_config", "home.repos.pwc.inspect_result.suamin_t2ner.None.run.parse_json_config"], ["def", "main", "(", "args", ")", ":", "\n", "    ", "base_json", "=", "args", ".", "base_json", "\n", "exp_json", "=", "args", ".", "exp_json", "\n", "\n", "if", "args", ".", "exp_type", "==", "\"ner\"", ":", "\n", "        ", "parser", "=", "HfArgumentParser", "(", "(", "TrainingArguments", ",", "ModelArguments", ",", "NERArguments", ")", ")", "\n", "trainer", "=", "NERTrainer", "(", "*", "parse_json_config", "(", "parser", ".", "dataclass_types", ",", "base_json", ",", "exp_json", ")", ")", "\n", "trainer", ".", "run", "(", "AutoModelForTokenClassification", ")", "\n", "\n", "", "elif", "args", ".", "exp_type", "==", "\"unsup_adapt\"", ":", "\n", "        ", "if", "args", ".", "method", "==", "\"grl\"", ":", "\n", "            ", "parser", "=", "HfArgumentParser", "(", "(", "TrainingArguments", ",", "ModelArguments", ",", "GRLArguments", ")", ")", "\n", "trainer", "=", "GRLTrainer", "(", "*", "parse_json_config", "(", "parser", ".", "dataclass_types", ",", "base_json", ",", "exp_json", ")", ")", "\n", "", "elif", "args", ".", "method", "==", "\"emd\"", ":", "\n", "            ", "parser", "=", "HfArgumentParser", "(", "(", "TrainingArguments", ",", "ModelArguments", ",", "EMDArguments", ")", ")", "\n", "trainer", "=", "EMDTrainer", "(", "*", "parse_json_config", "(", "parser", ".", "dataclass_types", ",", "base_json", ",", "exp_json", ")", ")", "\n", "", "elif", "args", ".", "method", "==", "\"keung\"", ":", "\n", "            ", "parser", "=", "HfArgumentParser", "(", "(", "TrainingArguments", ",", "ModelArguments", ",", "KeungArguments", ")", ")", "\n", "trainer", "=", "KeungTrainer", "(", "*", "parse_json_config", "(", "parser", ".", "dataclass_types", ",", "base_json", ",", "exp_json", ")", ")", "\n", "", "elif", "args", ".", "method", "==", "\"mcd\"", ":", "\n", "            ", "parser", "=", "HfArgumentParser", "(", "(", "TrainingArguments", ",", "ModelArguments", ",", "MCDArguments", ")", ")", "\n", "trainer", "=", "MCDTrainer", "(", "*", "parse_json_config", "(", "parser", ".", "dataclass_types", ",", "base_json", ",", "exp_json", ")", ")", "\n", "", "elif", "args", ".", "method", "==", "\"mme\"", ":", "\n", "            ", "parser", "=", "HfArgumentParser", "(", "(", "TrainingArguments", ",", "ModelArguments", ",", "MMEArguments", ")", ")", "\n", "trainer", "=", "MMETrainer", "(", "*", "parse_json_config", "(", "parser", ".", "dataclass_types", ",", "base_json", ",", "exp_json", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Unknown method.\"", ")", "\n", "", "trainer", ".", "run", "(", "AutoModelForTokenClassification", ")", "\n", "\n", "", "elif", "args", ".", "exp_type", "==", "\"ssl\"", ":", "\n", "        ", "if", "args", ".", "method", "==", "\"entmin\"", ":", "\n", "            ", "parser", "=", "HfArgumentParser", "(", "(", "TrainingArguments", ",", "ModelArguments", ",", "EntMinArguments", ")", ")", "\n", "trainer", "=", "EntMinTrainer", "(", "*", "parse_json_config", "(", "parser", ".", "dataclass_types", ",", "base_json", ",", "exp_json", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Unknown method.\"", ")", "\n", "", "trainer", ".", "run", "(", "AutoModelForTokenClassification", ")", "\n", "\n", "", "elif", "args", ".", "exp_type", "==", "\"multitask\"", ":", "\n", "        ", "parser", "=", "HfArgumentParser", "(", "(", "TrainingArguments", ",", "ModelArguments", ",", "MultiTaskNERArguments", ")", ")", "\n", "trainer", "=", "MultiTaskNERTrainer", "(", "*", "parse_json_config", "(", "parser", ".", "dataclass_types", ",", "base_json", ",", "exp_json", ")", ")", "\n", "trainer", ".", "run", "(", "AutoModelForMultiTokenClassification", ")", "\n", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"Implment please!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.None.run.parse_json_config": [[72, 85], ["json.loads", "pathlib.Path().read_text", "json.loads", "json.loads.items", "dtype", "outputs.append", "pathlib.Path().read_text", "pathlib.Path", "dataclasses.fields", "json.loads.items", "pathlib.Path"], "function", ["None"], ["", "", "def", "parse_json_config", "(", "dataclass_types", ",", "base_json", ",", "exp_json", "=", "None", ")", ":", "\n", "    ", "data", "=", "json", ".", "loads", "(", "Path", "(", "base_json", ")", ".", "read_text", "(", ")", ")", "\n", "if", "exp_json", ":", "\n", "        ", "exp_data", "=", "json", ".", "loads", "(", "Path", "(", "exp_json", ")", ".", "read_text", "(", ")", ")", "\n", "for", "k", ",", "v", "in", "exp_data", ".", "items", "(", ")", ":", "\n", "            ", "data", "[", "k", "]", "=", "v", "\n", "", "", "outputs", "=", "[", "]", "\n", "for", "dtype", "in", "dataclass_types", ":", "\n", "        ", "keys", "=", "{", "f", ".", "name", "for", "f", "in", "dataclasses", ".", "fields", "(", "dtype", ")", "}", "\n", "inputs", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "data", ".", "items", "(", ")", "if", "k", "in", "keys", "}", "\n", "obj", "=", "dtype", "(", "**", "inputs", ")", "\n", "outputs", ".", "append", "(", "obj", ")", "\n", "", "return", "(", "*", "outputs", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.utils.convert_i2b2style_xml_to_conll.read_i2b2_xml": [[22, 65], ["xml.parse().getroot", "list", "list", "re.sub", "list", "nltk.sent_tokenize", "ET.parse().getroot.find", "list", "list.append", "re.sub", "list.append", "re.sub().strip", "xml.parse", "ET.parse().getroot.find().iter", "int", "int", "len", "list.append", "re.sub", "re.findall", "ET.parse().getroot.find", "re.sub().strip.strip"], "function", ["None"], ["def", "read_i2b2_xml", "(", "fname", ",", "fine_grained", "=", "True", ",", "fix", "=", "False", ")", ":", "\n", "    ", "root", "=", "ET", ".", "parse", "(", "fname", ")", ".", "getroot", "(", ")", "\n", "doc", "=", "root", ".", "find", "(", "\"TEXT\"", ")", ".", "text", "\n", "tags", "=", "list", "(", "root", ".", "find", "(", "\"TAGS\"", ")", ".", "iter", "(", ")", ")", "[", "1", ":", "]", "# first is \"tags\" element itself", "\n", "labels", "=", "list", "(", ")", "\n", "for", "element", "in", "tags", ":", "\n", "        ", "labels", ".", "append", "(", "(", "element", ".", "tag", ",", "element", ".", "attrib", ")", ")", "\n", "\n", "", "masked_doc", "=", "\"\"", "\n", "masked", "=", "list", "(", ")", "\n", "i", "=", "0", "\n", "for", "tag", ",", "attr", "in", "labels", ":", "\n", "        ", "j", ",", "k", "=", "int", "(", "attr", "[", "\"start\"", "]", ")", ",", "int", "(", "attr", "[", "\"end\"", "]", ")", "\n", "chunk", "=", "doc", "[", "i", ":", "j", "]", "\n", "phi", "=", "doc", "[", "j", ":", "k", "]", "\n", "phi", "=", "re", ".", "sub", "(", "r\"\\s+\"", ",", "\" \"", ",", "phi", ")", "# normalize whitespace / newlines in entity", "\n", "if", "fine_grained", ":", "\n", "            ", "entity_type", "=", "tag", "+", "\"-\"", "+", "attr", "[", "\"TYPE\"", "]", "if", "tag", "!=", "attr", "[", "\"TYPE\"", "]", "else", "tag", "\n", "", "else", ":", "\n", "            ", "et", "=", "attr", "[", "\"TYPE\"", "]", "\n", "if", "tag", "==", "\"PHI\"", "and", "(", "et", "==", "\"DOCTOR\"", "or", "et", "==", "\"PATIENT\"", ")", ":", "\n", "                ", "tag", "=", "\"NAME\"", "\n", "", "elif", "tag", "==", "\"PHI\"", "and", "et", "==", "\"DATE\"", ":", "\n", "                ", "tag", "=", "\"DATE\"", "\n", "", "entity_type", "=", "tag", "\n", "", "if", "entity_type", "in", "fixes", "and", "fix", ":", "\n", "            ", "entity_type", "=", "fixes", "[", "entity_type", "]", "\n", "", "masked", ".", "append", "(", "(", "phi", ",", "entity_type", ")", ")", "\n", "masked_doc", "+=", "chunk", "+", "\" {}\"", ".", "format", "(", "MASK_TOKEN", ")", "\n", "i", "=", "k", "\n", "\n", "# heuristic to obtain good sentence tokenization", "\n", "", "masked_doc", "=", "re", ".", "sub", "(", "r\"\\n\"", ",", "\" \"", ",", "masked_doc", ")", "\n", "data", "=", "list", "(", ")", "\n", "\n", "for", "sent", "in", "nltk", ".", "sent_tokenize", "(", "masked_doc", ")", ":", "\n", "        ", "sent", "=", "re", ".", "sub", "(", "r\"\\s+\"", ",", "\" \"", ",", "sent", ".", "strip", "(", ")", ")", ".", "strip", "(", ")", "\n", "if", "sent", ":", "\n", "            ", "n", "=", "len", "(", "re", ".", "findall", "(", "MASK_TOKEN", ",", "sent", ")", ")", "\n", "data", ".", "append", "(", "(", "sent", ",", "masked", "[", ":", "n", "]", ")", ")", "\n", "masked", "=", "masked", "[", "n", ":", "]", "\n", "\n", "", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.utils.convert_i2b2style_xml_to_conll.data_to_bio": [[67, 103], ["list", "zip", "list.append", "list", "list", "enumerate", "nltk.word_tokenize", "bio.append", "nltk.word_tokenize", "len", "token.split", "enumerate", "nltk.word_tokenize.append", "list.append", "nltk.word_tokenize", "nltk.word_tokenize.append", "list.append", "list.append"], "function", ["None"], ["", "def", "data_to_bio", "(", "data", ",", "ignore_meddocan_other", "=", "False", ")", ":", "\n", "    ", "bio_corpus", "=", "list", "(", ")", "\n", "for", "sent", ",", "labels", "in", "data", ":", "\n", "        ", "if", "labels", ":", "\n", "            ", "tokens", "=", "list", "(", ")", "\n", "tags", "=", "list", "(", ")", "\n", "i", "=", "0", "\n", "for", "idx", ",", "token", "in", "enumerate", "(", "nltk", ".", "word_tokenize", "(", "sent", ")", ")", ":", "\n", "                ", "if", "token", "==", "MASK_TOKEN", ":", "\n", "                    ", "temp", "=", "[", "\"\"", "]", "\n", "", "else", ":", "\n", "                    ", "temp", "=", "token", ".", "split", "(", "MASK_TOKEN", ")", "\n", "", "for", "subtoken", "in", "temp", ":", "\n", "                    ", "if", "subtoken", "==", "\"\"", ":", "\n", "                        ", "entity", ",", "entity_type", "=", "labels", "[", "i", "]", "\n", "for", "j", ",", "entity_token", "in", "enumerate", "(", "nltk", ".", "word_tokenize", "(", "entity", ")", ")", ":", "\n", "                            ", "tokens", ".", "append", "(", "entity_token", ")", "\n", "if", "j", "==", "0", ":", "\n", "                                ", "tags", ".", "append", "(", "\"B-\"", "+", "entity_type", ")", "\n", "", "else", ":", "\n", "                                ", "tags", ".", "append", "(", "\"I-\"", "+", "entity_type", ")", "\n", "", "", "i", "+=", "1", "\n", "", "else", ":", "\n", "                        ", "tokens", ".", "append", "(", "subtoken", ")", "\n", "tags", ".", "append", "(", "\"O\"", ")", "\n", "", "", "", "", "else", ":", "\n", "            ", "tokens", "=", "nltk", ".", "word_tokenize", "(", "sent", ")", "\n", "tags", "=", "[", "\"O\"", "]", "*", "len", "(", "tokens", ")", "\n", "", "bio", "=", "[", "]", "\n", "for", "token", ",", "tag", "in", "zip", "(", "tokens", ",", "tags", ")", ":", "\n", "            ", "if", "ignore_meddocan_other", ":", "\n", "                ", "if", "tag", "==", "\"B-OTHER\"", "or", "tag", "==", "\"I-OTHER\"", ":", "\n", "                    ", "tag", "=", "\"O\"", "\n", "", "", "bio", ".", "append", "(", "token", "+", "\" \"", "+", "tag", ")", "\n", "", "bio_corpus", ".", "append", "(", "bio", ")", "\n", "", "return", "bio_corpus", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.utils.convert_i2b2style_xml_to_conll.write_output": [[105, 111], ["open", "list", "wf.write", "list.append"], "function", ["None"], ["", "def", "write_output", "(", "bio_corpus", ",", "fname", ")", ":", "\n", "    ", "with", "open", "(", "fname", ",", "\"w\"", ",", "encoding", "=", "\"utf-8\"", ",", "errors", "=", "\"ignore\"", ")", "as", "wf", ":", "\n", "        ", "temp", "=", "list", "(", ")", "\n", "for", "sent", "in", "bio_corpus", ":", "\n", "            ", "temp", ".", "append", "(", "\"\\n\"", ".", "join", "(", "sent", ")", ")", "\n", "", "wf", ".", "write", "(", "\"\\n\\n\"", ".", "join", "(", "temp", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.utils.convert_i2b2style_xml_to_conll.convert_i2b2_deid_to_conll": [[113, 148], ["os.makedirs", "os.makedirs", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "list", "os.listdir", "os.path.join", "list.append", "random.shuffle", "list", "convert_i2b2style_xml_to_conll.write_output", "list", "convert_i2b2style_xml_to_conll.write_output", "list", "convert_i2b2style_xml_to_conll.write_output", "convert_i2b2style_xml_to_conll.data_to_bio", "list.extend", "os.path.join", "list.extend", "os.path.join", "list.extend", "os.path.join", "convert_i2b2style_xml_to_conll.read_i2b2_xml"], "function", ["home.repos.pwc.inspect_result.suamin_t2ner.utils.convert_i2b2style_xml_to_conll.write_output", "home.repos.pwc.inspect_result.suamin_t2ner.utils.convert_i2b2style_xml_to_conll.write_output", "home.repos.pwc.inspect_result.suamin_t2ner.utils.convert_i2b2style_xml_to_conll.write_output", "home.repos.pwc.inspect_result.suamin_t2ner.utils.convert_i2b2style_xml_to_conll.data_to_bio", "home.repos.pwc.inspect_result.suamin_t2ner.utils.convert_i2b2style_xml_to_conll.read_i2b2_xml"], ["", "", "def", "convert_i2b2_deid_to_conll", "(", "fine_grained", "=", "True", ",", "fix", "=", "False", ")", ":", "\n", "    ", "data_dir", "=", "\"/raid/saam01/uned/data/sources/i2b2_deid\"", "\n", "output_dir", "=", "\"/raid/saam01/uned/data/sources/i2b2_conll\"", "\n", "os", ".", "makedirs", "(", "output_dir", ",", "exist_ok", "=", "True", ")", "\n", "if", "fine_grained", ":", "\n", "        ", "output_dir", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "\"i2b2deid-fine\"", ")", "\n", "", "else", ":", "\n", "        ", "output_dir", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "\"i2b2deid\"", ")", "\n", "", "if", "fix", ":", "\n", "        ", "output_dir", "=", "os", ".", "path", ".", "join", "(", "output_dir", "+", "\"-fix\"", ")", "\n", "", "os", ".", "makedirs", "(", "output_dir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "for", "split", "in", "(", "\"train\"", ",", "\"test\"", ")", ":", "\n", "        ", "path", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "split", ")", "\n", "bio_corpus", "=", "list", "(", ")", "\n", "for", "fname", "in", "os", ".", "listdir", "(", "path", ")", ":", "\n", "            ", "file_path", "=", "os", ".", "path", ".", "join", "(", "path", ",", "fname", ")", "\n", "bio_corpus", ".", "append", "(", "data_to_bio", "(", "read_i2b2_xml", "(", "file_path", ",", "fine_grained", ",", "fix", ")", ")", ")", "\n", "", "if", "split", "==", "\"train\"", ":", "\n", "            ", "random", ".", "shuffle", "(", "bio_corpus", ")", "\n", "# 790 total, take 700 for training, 90 for validation", "\n", "train_corpus", "=", "list", "(", ")", "\n", "for", "doc", "in", "bio_corpus", "[", ":", "700", "]", ":", "\n", "                ", "train_corpus", ".", "extend", "(", "doc", ")", "\n", "", "write_output", "(", "train_corpus", ",", "os", ".", "path", ".", "join", "(", "output_dir", ",", "\"train.txt\"", ")", ")", "\n", "\n", "valid_corpus", "=", "list", "(", ")", "\n", "for", "doc", "in", "bio_corpus", "[", "700", ":", "]", ":", "\n", "                ", "valid_corpus", ".", "extend", "(", "doc", ")", "\n", "", "write_output", "(", "valid_corpus", ",", "os", ".", "path", ".", "join", "(", "output_dir", ",", "\"dev.txt\"", ")", ")", "\n", "", "else", ":", "\n", "            ", "test_corpus", "=", "list", "(", ")", "\n", "for", "doc", "in", "bio_corpus", ":", "\n", "                ", "test_corpus", ".", "extend", "(", "doc", ")", "\n", "", "write_output", "(", "test_corpus", ",", "os", ".", "path", ".", "join", "(", "output_dir", ",", "\"test.txt\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.utils.convert_i2b2style_xml_to_conll.convert_meddocan_deid_to_conll": [[150, 172], ["os.makedirs", "os.makedirs", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "list", "os.listdir", "list", "convert_i2b2style_xml_to_conll.write_output", "os.path.join", "list.append", "list.extend", "os.path.join", "convert_i2b2style_xml_to_conll.data_to_bio", "convert_i2b2style_xml_to_conll.read_i2b2_xml"], "function", ["home.repos.pwc.inspect_result.suamin_t2ner.utils.convert_i2b2style_xml_to_conll.write_output", "home.repos.pwc.inspect_result.suamin_t2ner.utils.convert_i2b2style_xml_to_conll.data_to_bio", "home.repos.pwc.inspect_result.suamin_t2ner.utils.convert_i2b2style_xml_to_conll.read_i2b2_xml"], ["", "", "", "def", "convert_meddocan_deid_to_conll", "(", "fine_grained", "=", "True", ",", "ignore_meddocan_other", "=", "False", ")", ":", "\n", "    ", "data_dir", "=", "\"/raid/saam01/uned/data/sources/MEDDOCAN\"", "\n", "output_dir", "=", "\"/raid/saam01/uned/data/sources/meddocan_conll\"", "\n", "os", ".", "makedirs", "(", "output_dir", ",", "exist_ok", "=", "True", ")", "\n", "if", "fine_grained", ":", "\n", "        ", "output_dir", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "\"meddocandeid-fine\"", ")", "\n", "", "else", ":", "\n", "        ", "output_dir", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "\"meddocandeid\"", ")", "\n", "", "if", "ignore_meddocan_other", ":", "\n", "        ", "output_dir", "=", "os", ".", "path", ".", "join", "(", "output_dir", "+", "\"-ignore\"", ")", "\n", "", "os", ".", "makedirs", "(", "output_dir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "for", "split", "in", "(", "\"train\"", ",", "\"dev\"", ",", "\"test\"", ")", ":", "\n", "        ", "path", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "split", ",", "\"xml\"", ")", "\n", "bio_corpus", "=", "list", "(", ")", "\n", "for", "fname", "in", "os", ".", "listdir", "(", "path", ")", ":", "\n", "            ", "file_path", "=", "os", ".", "path", ".", "join", "(", "path", ",", "fname", ")", "\n", "bio_corpus", ".", "append", "(", "data_to_bio", "(", "read_i2b2_xml", "(", "file_path", ",", "fine_grained", ")", ",", "ignore_meddocan_other", ")", ")", "\n", "", "split_data", "=", "list", "(", ")", "\n", "for", "doc", "in", "bio_corpus", ":", "\n", "            ", "split_data", ".", "extend", "(", "doc", ")", "\n", "", "write_output", "(", "split_data", ",", "os", ".", "path", ".", "join", "(", "output_dir", ",", "\"{}.txt\"", ".", "format", "(", "split", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.utils.conll2standoff.reference_text_filename": [[34, 47], ["os.path.basename", "os.path.join", "os.path.exists", "re.sub"], "function", ["None"], ["def", "reference_text_filename", "(", "fn", ")", ":", "\n", "# Tries to determine the name of the reference text file", "\n", "# for the given CoNLL output file.", "\n", "\n", "    ", "fnbase", "=", "os", ".", "path", ".", "basename", "(", "fn", ")", "\n", "reffn", "=", "os", ".", "path", ".", "join", "(", "reference_directory", ",", "fnbase", ")", "\n", "\n", "# if the file doesn't exist, try replacing the last dot-separated", "\n", "# suffix in the filename with .txt", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "reffn", ")", ":", "\n", "        ", "reffn", "=", "re", ".", "sub", "(", "r'(.*)\\..*'", ",", "r'\\1.txt'", ",", "reffn", ")", "\n", "\n", "", "return", "reffn", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.utils.conll2standoff.output_filename": [[49, 59], ["conll2standoff.reference_text_filename", "os.path.join", "os.path.basename().replace", "os.path.basename"], "function", ["home.repos.pwc.inspect_result.suamin_t2ner.utils.conll2standoff.reference_text_filename"], ["", "def", "output_filename", "(", "fn", ")", ":", "\n", "    ", "if", "output_directory", "is", "None", ":", "\n", "        ", "return", "None", "\n", "\n", "", "reffn", "=", "reference_text_filename", "(", "fn", ")", "\n", "return", "os", ".", "path", ".", "join", "(", "\n", "output_directory", ",", "\n", "os", ".", "path", ".", "basename", "(", "reffn", ")", ".", "replace", "(", "\n", "\".txt\"", ",", "\n", "\".a1\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.utils.conll2standoff.process": [[61, 219], ["conll2standoff.reference_text_filename", "codecs.open.read", "codecs.open.close", "codecs.open.read", "codecs.open.close", "enumerate", "codecs.open", "codecs.open", "conll2standoff.output_filename", "open", "tagfile.read.split", "l.split", "re.match", "re.match.groups", "taggedTokens.append", "print", "open.close", "print", "print", "l.strip", "len", "int", "int", "eText.strip", "print", "entityStr().encode", "len", "l.encode", "len", "reftext[].encode", "ttext.encode", "l.encode", "entityStr().encode", "conll2standoff.process.entityStr"], "function", ["home.repos.pwc.inspect_result.suamin_t2ner.utils.conll2standoff.reference_text_filename", "home.repos.pwc.inspect_result.suamin_t2ner.utils.conll2standoff.output_filename", "home.repos.pwc.inspect_result.suamin_t2ner.data.ner.NERFeatures.encode", "home.repos.pwc.inspect_result.suamin_t2ner.data.ner.NERFeatures.encode", "home.repos.pwc.inspect_result.suamin_t2ner.data.ner.NERFeatures.encode", "home.repos.pwc.inspect_result.suamin_t2ner.data.ner.NERFeatures.encode", "home.repos.pwc.inspect_result.suamin_t2ner.data.ner.NERFeatures.encode", "home.repos.pwc.inspect_result.suamin_t2ner.data.ner.NERFeatures.encode"], ["", "def", "process", "(", "fn", ")", ":", "\n", "    ", "global", "out", "\n", "\n", "reffn", "=", "reference_text_filename", "(", "fn", ")", "\n", "\n", "try", ":", "\n", "#reffile = open(reffn)", "\n", "        ", "reffile", "=", "codecs", ".", "open", "(", "reffn", ",", "\"rt\"", ",", "\"UTF-8\"", ")", "\n", "", "except", "BaseException", ":", "\n", "        ", "print", "(", "\"ERROR: failed to open reference file %s\"", "%", "reffn", ",", "file", "=", "sys", ".", "stderr", ")", "\n", "raise", "\n", "", "reftext", "=", "reffile", ".", "read", "(", ")", "\n", "reffile", ".", "close", "(", ")", "\n", "\n", "# ... and the tagged file", "\n", "try", ":", "\n", "#tagfile = open(fn)", "\n", "        ", "tagfile", "=", "codecs", ".", "open", "(", "fn", ",", "\"rt\"", ",", "\"UTF-8\"", ")", "\n", "", "except", "BaseException", ":", "\n", "        ", "print", "(", "\"ERROR: failed to open file %s\"", "%", "fn", ",", "file", "=", "sys", ".", "stderr", ")", "\n", "raise", "\n", "", "tagtext", "=", "tagfile", ".", "read", "(", ")", "\n", "tagfile", ".", "close", "(", ")", "\n", "\n", "# if an output directory is specified, write a file with an", "\n", "# appropriate name there", "\n", "if", "output_directory", "is", "not", "None", ":", "\n", "        ", "outfn", "=", "output_filename", "(", "fn", ")", "\n", "#out = codecs.open(outfn, \"wt\", \"UTF-8\")", "\n", "out", "=", "open", "(", "outfn", ",", "\"wt\"", ")", "\n", "\n", "# parse CoNLL-X-flavored tab-separated BIO, storing boundaries and", "\n", "# tagged tokens. The format is one token per line, with the", "\n", "# following tab-separated fields:", "\n", "#", "\n", "#     START END TOKEN LEMMA POS CHUNK TAG", "\n", "#", "\n", "# where we're only interested in the start and end offsets", "\n", "# (START,END), the token text (TOKEN) for verification, and the", "\n", "# NER tags (TAG).  Additionally, sentence boundaries are marked by", "\n", "# blank lines in the input.", "\n", "\n", "", "taggedTokens", "=", "[", "]", "\n", "for", "ln", ",", "l", "in", "enumerate", "(", "tagtext", ".", "split", "(", "'\\n'", ")", ")", ":", "\n", "        ", "if", "l", ".", "strip", "(", ")", "==", "''", ":", "\n", "# skip blank lines (sentence boundary markers)", "\n", "            ", "continue", "\n", "\n", "", "fields", "=", "l", ".", "split", "(", "'\\t'", ")", "\n", "assert", "len", "(", "fields", ")", "==", "7", ",", "\"Error: expected 7 tab-separated fields on line %d in %s, found %d: %s\"", "%", "(", "\n", "ln", "+", "1", ",", "fn", ",", "len", "(", "fields", ")", ",", "l", ".", "encode", "(", "\"UTF-8\"", ")", ")", "\n", "\n", "start", ",", "end", ",", "ttext", "=", "fields", "[", "0", ":", "3", "]", "\n", "tag", "=", "fields", "[", "6", "]", "\n", "start", ",", "end", "=", "int", "(", "start", ")", ",", "int", "(", "end", ")", "\n", "\n", "# parse tag", "\n", "m", "=", "re", ".", "match", "(", "r'^([BIO])((?:-[A-Za-z_]+)?)$'", ",", "tag", ")", "\n", "assert", "m", ",", "\"ERROR: failed to parse tag '%s' in %s\"", "%", "(", "tag", ",", "fn", ")", "\n", "ttag", ",", "ttype", "=", "m", ".", "groups", "(", ")", "\n", "\n", "# strip off starting \"-\" from tagged type", "\n", "if", "len", "(", "ttype", ")", ">", "0", "and", "ttype", "[", "0", "]", "==", "\"-\"", ":", "\n", "            ", "ttype", "=", "ttype", "[", "1", ":", "]", "\n", "\n", "# sanity check", "\n", "", "assert", "(", "(", "ttype", "==", "\"\"", "and", "ttag", "==", "\"O\"", ")", "or", "(", "ttype", "!=", "\"\"", "and", "ttag", "in", "(", "\n", "\"B\"", ",", "\"I\"", ")", ")", ")", ",", "\"Error: tag format '%s' in %s\"", "%", "(", "tag", ",", "fn", ")", "\n", "\n", "# verify that the text matches the original", "\n", "assert", "reftext", "[", "start", ":", "end", "]", "==", "ttext", ",", "\"ERROR: text mismatch for %s on line %d: reference '%s' tagged '%s': %s\"", "%", "(", "\n", "fn", ",", "ln", "+", "1", ",", "reftext", "[", "start", ":", "end", "]", ".", "encode", "(", "\"UTF-8\"", ")", ",", "ttext", ".", "encode", "(", "\"UTF-8\"", ")", ",", "l", ".", "encode", "(", "\"UTF-8\"", ")", ")", "\n", "\n", "# store tagged token as (begin, end, tag, tagtype) tuple.", "\n", "taggedTokens", ".", "append", "(", "(", "start", ",", "end", ",", "ttag", ",", "ttype", ")", ")", "\n", "\n", "# transform input text from CoNLL-X flavored tabbed BIO format to", "\n", "# inline-tagged BIO format for processing (this is a bit", "\n", "# convoluted, sorry; this script written as a modification of an", "\n", "# inline-format BIO conversion script).", "\n", "\n", "### Output for entities ###", "\n", "\n", "# returns a string containing annotation in the output format", "\n", "# for an Entity with the given properties.", "\n", "", "def", "entityStr", "(", "startOff", ",", "endOff", ",", "eType", ",", "idNum", ",", "fullText", ")", ":", "\n", "# sanity checks: the string should not contain newlines and", "\n", "# should be minimal wrt surrounding whitespace", "\n", "        ", "eText", "=", "fullText", "[", "startOff", ":", "endOff", "]", "\n", "assert", "\"\\n\"", "not", "in", "eText", ",", "\"ERROR: newline in entity in %s: '%s'\"", "%", "(", "\n", "fn", ",", "eText", ")", "\n", "assert", "eText", "==", "eText", ".", "strip", "(", "\n", ")", ",", "\"ERROR: entity contains extra whitespace in %s: '%s'\"", "%", "(", "fn", ",", "eText", ")", "\n", "return", "\"T%d\\t%s %d %d\\t%s\"", "%", "(", "idNum", ",", "eType", ",", "startOff", ",", "endOff", ",", "eText", ")", "\n", "\n", "", "idIdx", "=", "1", "\n", "prevTag", ",", "prevEnd", "=", "\"O\"", ",", "0", "\n", "currType", ",", "currStart", "=", "None", ",", "None", "\n", "for", "startoff", ",", "endoff", ",", "ttag", ",", "ttype", "in", "taggedTokens", ":", "\n", "\n", "# special case for surviving format errors in input: if the", "\n", "# type sequence changes without a \"B\" tag, change the tag", "\n", "# to allow some output (assumed to be preferable to complete", "\n", "# failure.)", "\n", "        ", "if", "prevTag", "!=", "\"O\"", "and", "ttag", "==", "\"I\"", "and", "currType", "!=", "ttype", ":", "\n", "            ", "if", "SEQUENCE_ERROR_PROCESSING", "==", "SEQUENCE_ERROR_RECOVER", ":", "\n", "# reinterpret as the missing \"B\" tag.", "\n", "                ", "ttag", "=", "\"B\"", "\n", "", "elif", "SEQUENCE_ERROR_PROCESSING", "==", "SEQUENCE_ERROR_DISCARD", ":", "\n", "                ", "ttag", "=", "\"O\"", "\n", "", "else", ":", "\n", "                ", "assert", "SEQUENCE_ERROR_PROCESSING", "==", "SEQUENCE_ERROR_FAIL", "\n", "pass", "# will fail on later check", "\n", "\n", "# similarly if an \"I\" tag occurs after an \"O\" tag", "\n", "", "", "if", "prevTag", "==", "\"O\"", "and", "ttag", "==", "\"I\"", ":", "\n", "            ", "if", "SEQUENCE_ERROR_PROCESSING", "==", "SEQUENCE_ERROR_RECOVER", ":", "\n", "                ", "ttag", "=", "\"B\"", "\n", "", "elif", "SEQUENCE_ERROR_PROCESSING", "==", "SEQUENCE_ERROR_DISCARD", ":", "\n", "                ", "ttag", "=", "\"O\"", "\n", "", "else", ":", "\n", "                ", "assert", "SEQUENCE_ERROR_PROCESSING", "==", "SEQUENCE_ERROR_FAIL", "\n", "pass", "# will fail on later check", "\n", "\n", "", "", "if", "prevTag", "!=", "\"O\"", "and", "ttag", "!=", "\"I\"", ":", "\n", "# previous entity does not continue into this tag; output", "\n", "            ", "assert", "currType", "is", "not", "None", "and", "currStart", "is", "not", "None", ",", "\"ERROR at %s (%d-%d) in %s\"", "%", "(", "\n", "reftext", "[", "startoff", ":", "endoff", "]", ",", "startoff", ",", "endoff", ",", "fn", ")", "\n", "\n", "print", "(", "entityStr", "(", "\n", "currStart", ",", "prevEnd", ",", "currType", ",", "idIdx", ",", "reftext", ")", ".", "encode", "(", "\"UTF-8\"", ")", ",", "file", "=", "out", ")", "\n", "\n", "idIdx", "+=", "1", "\n", "\n", "# reset current entity", "\n", "currType", ",", "currStart", "=", "None", ",", "None", "\n", "\n", "", "elif", "prevTag", "!=", "\"O\"", ":", "\n", "# previous entity continues ; just check sanity", "\n", "            ", "assert", "ttag", "==", "\"I\"", ",", "\"ERROR in %s\"", "%", "fn", "\n", "assert", "currType", "==", "ttype", ",", "\"ERROR: entity of type '%s' continues as type '%s' in %s\"", "%", "(", "\n", "currType", ",", "ttype", ",", "fn", ")", "\n", "\n", "", "if", "ttag", "==", "\"B\"", ":", "\n", "# new entity starts", "\n", "            ", "currType", ",", "currStart", "=", "ttype", ",", "startoff", "\n", "\n", "", "prevTag", ",", "prevEnd", "=", "ttag", ",", "endoff", "\n", "\n", "# if there's an open entity after all tokens have been processed,", "\n", "# we need to output it separately", "\n", "", "if", "prevTag", "!=", "\"O\"", ":", "\n", "        ", "print", "(", "entityStr", "(", "\n", "currStart", ",", "prevEnd", ",", "currType", ",", "idIdx", ",", "reftext", ")", ".", "encode", "(", "\"UTF-8\"", ")", ",", "file", "=", "out", ")", "\n", "\n", "", "if", "output_directory", "is", "not", "None", ":", "\n", "# we've opened a specific output for this", "\n", "        ", "out", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.utils.conll2standoff.main": [[221, 281], ["print", "print", "os.path.isdir", "print", "print", "len", "len", "len", "os.path.join", "conll2standoff.process", "os.listdir", "print", "conll2standoff.output_filename", "len", "os.remove", "len"], "function", ["home.repos.pwc.inspect_result.suamin_t2ner.utils.conll02tostandoff.process", "home.repos.pwc.inspect_result.suamin_t2ner.utils.conll2standoff.output_filename"], ["", "", "def", "main", "(", "argv", ")", ":", "\n", "    ", "global", "reference_directory", ",", "output_directory", "\n", "\n", "# (clumsy arg parsing, sorry)", "\n", "\n", "# Take a mandatory \"-d\" arg that tells us where to find the original,", "\n", "# unsegmented and untagged reference files.", "\n", "\n", "if", "len", "(", "argv", ")", "<", "3", "or", "argv", "[", "1", "]", "!=", "\"-d\"", ":", "\n", "        ", "print", "(", "\"USAGE:\"", ",", "argv", "[", "0", "]", ",", "\"-d REF-DIR [-o OUT-DIR] (FILES|DIR)\"", ",", "file", "=", "sys", ".", "stderr", ")", "\n", "return", "1", "\n", "\n", "", "reference_directory", "=", "argv", "[", "2", "]", "\n", "\n", "# Take an optional \"-o\" arg specifying an output directory for the results", "\n", "\n", "output_directory", "=", "None", "\n", "filenames", "=", "argv", "[", "3", ":", "]", "\n", "if", "len", "(", "argv", ")", ">", "4", "and", "argv", "[", "3", "]", "==", "\"-o\"", ":", "\n", "        ", "output_directory", "=", "argv", "[", "4", "]", "\n", "print", "(", "\"Writing output to %s\"", "%", "output_directory", ",", "file", "=", "sys", ".", "stderr", ")", "\n", "filenames", "=", "argv", "[", "5", ":", "]", "\n", "\n", "# special case: if we only have a single file in input and it specifies", "\n", "# a directory, process all files in that directory", "\n", "", "input_directory", "=", "None", "\n", "if", "len", "(", "filenames", ")", "==", "1", "and", "os", ".", "path", ".", "isdir", "(", "filenames", "[", "0", "]", ")", ":", "\n", "        ", "input_directory", "=", "filenames", "[", "0", "]", "\n", "filenames", "=", "[", "os", ".", "path", ".", "join", "(", "input_directory", ",", "fn", ")", "\n", "for", "fn", "in", "os", ".", "listdir", "(", "input_directory", ")", "]", "\n", "print", "(", "\"Processing %d files in %s ...\"", "%", "(", "\n", "len", "(", "filenames", ")", ",", "input_directory", ")", ",", "file", "=", "sys", ".", "stderr", ")", "\n", "\n", "", "fail_count", "=", "0", "\n", "for", "fn", "in", "filenames", ":", "\n", "        ", "try", ":", "\n", "            ", "process", "(", "fn", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "            ", "print", "(", "\"Error processing %s: %s\"", "%", "(", "fn", ",", "e", ")", ",", "file", "=", "sys", ".", "stderr", ")", "\n", "fail_count", "+=", "1", "\n", "\n", "# if we're storing output on disk, remove the output file", "\n", "# to avoid having partially-written data", "\n", "ofn", "=", "output_filename", "(", "fn", ")", "\n", "try", ":", "\n", "                ", "os", ".", "remove", "(", "ofn", ")", "\n", "", "except", "BaseException", ":", "\n", "# never mind if that fails", "\n", "                ", "pass", "\n", "\n", "", "", "", "if", "fail_count", ">", "0", ":", "\n", "        ", "print", "(", "\"\"\"\n##############################################################################\n#\n# WARNING: error in processing %d/%d files, output is incomplete!\n#\n##############################################################################\n\"\"\"", "%", "(", "fail_count", ",", "len", "(", "filenames", ")", ")", ",", "file", "=", "sys", ".", "stderr", ")", "\n", "\n", "", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.utils.conll02tostandoff.quote": [[20, 22], ["None"], "function", ["None"], ["def", "quote", "(", "s", ")", ":", "\n", "    ", "return", "s", "in", "(", "'\"'", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.utils.conll02tostandoff.space": [[24, 38], ["re.match", "re.match", "conll02tostandoff.quote", "conll02tostandoff.quote"], "function", ["home.repos.pwc.inspect_result.suamin_t2ner.utils.conll02tostandoff.quote", "home.repos.pwc.inspect_result.suamin_t2ner.utils.conll02tostandoff.quote"], ["", "def", "space", "(", "t1", ",", "t2", ",", "quote_count", "=", "None", ")", ":", "\n", "# Helper for reconstructing sentence text. Given the text of two", "\n", "# consecutive tokens, returns a heuristic estimate of whether a", "\n", "# space character should be placed between them.", "\n", "\n", "    ", "if", "re", ".", "match", "(", "r'^[\\(]$'", ",", "t1", ")", ":", "\n", "        ", "return", "False", "\n", "", "if", "re", ".", "match", "(", "r'^[.,\\)\\?\\!]$'", ",", "t2", ")", ":", "\n", "        ", "return", "False", "\n", "", "if", "quote", "(", "t1", ")", "and", "quote_count", "is", "not", "None", "and", "quote_count", "%", "2", "==", "1", ":", "\n", "        ", "return", "False", "\n", "", "if", "quote", "(", "t2", ")", "and", "quote_count", "is", "not", "None", "and", "quote_count", "%", "2", "==", "1", ":", "\n", "        ", "return", "False", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.utils.conll02tostandoff.tagstr": [[40, 45], ["text.strip"], "function", ["None"], ["", "def", "tagstr", "(", "start", ",", "end", ",", "ttype", ",", "idnum", ",", "text", ")", ":", "\n", "# sanity checks", "\n", "    ", "assert", "'\\n'", "not", "in", "text", ",", "\"ERROR: newline in entity '%s'\"", "%", "(", "text", ")", "\n", "assert", "text", "==", "text", ".", "strip", "(", ")", ",", "\"ERROR: tagged span contains extra whitespace: '%s'\"", "%", "(", "text", ")", "\n", "return", "\"T%d\\t%s %d %d\\t%s\"", "%", "(", "idnum", ",", "ttype", ",", "start", ",", "end", ",", "text", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.utils.conll02tostandoff.output": [[47, 110], ["enumerate", "print", "os.path.join", "codecs.open", "codecs.open", "len", "conll02tostandoff.quote", "print", "len", "str", "print", "conll02tostandoff.space", "conll02tostandoff.tagstr", "os.path.basename", "conll02tostandoff.tagstr"], "function", ["home.repos.pwc.inspect_result.suamin_t2ner.utils.conll02tostandoff.quote", "home.repos.pwc.inspect_result.suamin_t2ner.utils.conll02tostandoff.space", "home.repos.pwc.inspect_result.suamin_t2ner.utils.conll02tostandoff.tagstr", "home.repos.pwc.inspect_result.suamin_t2ner.utils.conll02tostandoff.tagstr"], ["", "def", "output", "(", "infn", ",", "docnum", ",", "sentences", ")", ":", "\n", "    ", "global", "output_directory", "\n", "\n", "if", "output_directory", "is", "None", ":", "\n", "        ", "txtout", "=", "sys", ".", "stdout", "\n", "soout", "=", "sys", ".", "stdout", "\n", "", "else", ":", "\n", "        ", "outfn", "=", "os", ".", "path", ".", "join", "(", "\n", "output_directory", ",", "\n", "os", ".", "path", ".", "basename", "(", "infn", ")", "+", "\n", "'-doc-'", "+", "\n", "str", "(", "docnum", ")", ")", "\n", "txtout", "=", "codecs", ".", "open", "(", "outfn", "+", "'.txt'", ",", "'w'", ",", "encoding", "=", "OUTPUT_ENCODING", ")", "\n", "soout", "=", "codecs", ".", "open", "(", "outfn", "+", "'.ann'", ",", "'w'", ",", "encoding", "=", "OUTPUT_ENCODING", ")", "\n", "\n", "", "offset", ",", "idnum", "=", "0", ",", "1", "\n", "\n", "doctext", "=", "\"\"", "\n", "\n", "for", "si", ",", "sentence", "in", "enumerate", "(", "sentences", ")", ":", "\n", "\n", "        ", "prev_token", "=", "None", "\n", "curr_start", ",", "curr_type", "=", "None", ",", "None", "\n", "quote_count", "=", "0", "\n", "\n", "for", "token", ",", "ttag", ",", "ttype", "in", "sentence", ":", "\n", "\n", "            ", "if", "curr_type", "is", "not", "None", "and", "(", "ttag", "!=", "\"I\"", "or", "ttype", "!=", "curr_type", ")", ":", "\n", "# a previously started tagged sequence does not", "\n", "# continue into this position.", "\n", "                ", "print", "(", "tagstr", "(", "\n", "curr_start", ",", "offset", ",", "curr_type", ",", "idnum", ",", "doctext", "[", "curr_start", ":", "offset", "]", ")", ",", "file", "=", "soout", ")", "\n", "idnum", "+=", "1", "\n", "curr_start", ",", "curr_type", "=", "None", ",", "None", "\n", "\n", "", "if", "prev_token", "is", "not", "None", "and", "space", "(", "\n", "prev_token", ",", "token", ",", "quote_count", ")", ":", "\n", "                ", "doctext", "=", "doctext", "+", "' '", "\n", "offset", "+=", "1", "\n", "\n", "", "if", "curr_type", "is", "None", "and", "ttag", "!=", "\"O\"", ":", "\n", "# a new tagged sequence begins here", "\n", "                ", "curr_start", ",", "curr_type", "=", "offset", ",", "ttype", "\n", "\n", "", "doctext", "=", "doctext", "+", "token", "\n", "offset", "+=", "len", "(", "token", ")", "\n", "\n", "if", "quote", "(", "token", ")", ":", "\n", "                ", "quote_count", "+=", "1", "\n", "\n", "", "prev_token", "=", "token", "\n", "\n", "# leftovers?", "\n", "", "if", "curr_type", "is", "not", "None", ":", "\n", "            ", "print", "(", "tagstr", "(", "\n", "curr_start", ",", "offset", ",", "curr_type", ",", "idnum", ",", "doctext", "[", "curr_start", ":", "offset", "]", ")", ",", "file", "=", "soout", ")", "\n", "idnum", "+=", "1", "\n", "\n", "", "if", "si", "+", "1", "!=", "len", "(", "sentences", ")", ":", "\n", "            ", "doctext", "=", "doctext", "+", "'\\n'", "\n", "offset", "+=", "1", "\n", "\n", "", "", "print", "(", "doctext", ",", "file", "=", "txtout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.utils.conll02tostandoff.process": [[112, 136], ["open", "f.readlines", "enumerate", "len", "conll02tostandoff.output", "l.strip.strip", "l.strip.split", "current.append", "sentences.append"], "function", ["home.repos.pwc.inspect_result.suamin_t2ner.utils.conll02tostandoff.output"], ["", "def", "process", "(", "fn", ")", ":", "\n", "    ", "docnum", "=", "1", "\n", "sentences", "=", "[", "]", "\n", "\n", "with", "open", "(", "fn", ",", "encoding", "=", "\"utf-8\"", ",", "errors", "=", "\"ignore\"", ")", "as", "f", ":", "\n", "\n", "# store (token, BIO-tag, type) triples for sentence", "\n", "        ", "current", "=", "[", "]", "\n", "\n", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "\n", "for", "ln", ",", "l", "in", "enumerate", "(", "lines", ")", ":", "\n", "            ", "l", "=", "l", ".", "strip", "(", ")", "\n", "if", "not", "l", ":", "\n", "                ", "sentences", ".", "append", "(", "current", ")", "\n", "current", "=", "[", "]", "\n", "continue", "\n", "", "token", ",", "temp", "=", "l", ".", "split", "(", "\"\\t\"", ")", "\n", "ttag", ",", "ttype", "=", "temp", "[", "0", "]", ",", "temp", "[", "2", ":", "]", "\n", "\n", "current", ".", "append", "(", "(", "token", ",", "ttag", ",", "ttype", ")", ")", "\n", "\n", "", "", "if", "len", "(", "sentences", ")", ">", "0", ":", "\n", "        ", "output", "(", "fn", ",", "docnum", ",", "sentences", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.utils.conll02tostandoff.main": [[138, 198], ["print", "print", "os.path.isdir", "print", "print", "len", "len", "len", "os.path.join", "conll02tostandoff.process", "os.listdir", "print", "output_filename", "len", "os.remove", "len"], "function", ["home.repos.pwc.inspect_result.suamin_t2ner.utils.conll02tostandoff.process", "home.repos.pwc.inspect_result.suamin_t2ner.utils.conll2standoff.output_filename"], ["", "", "def", "main", "(", "argv", ")", ":", "\n", "    ", "global", "reference_directory", ",", "output_directory", "\n", "\n", "# (clumsy arg parsing, sorry)", "\n", "\n", "# Take a mandatory \"-d\" arg that tells us where to find the original,", "\n", "# unsegmented and untagged reference files.", "\n", "\n", "if", "len", "(", "argv", ")", "<", "3", "or", "argv", "[", "1", "]", "!=", "\"-d\"", ":", "\n", "        ", "print", "(", "\"USAGE:\"", ",", "argv", "[", "0", "]", ",", "\"-d REF-DIR [-o OUT-DIR] (FILES|DIR)\"", ",", "file", "=", "sys", ".", "stderr", ")", "\n", "return", "1", "\n", "\n", "", "reference_directory", "=", "argv", "[", "2", "]", "\n", "\n", "# Take an optional \"-o\" arg specifying an output directory for the results", "\n", "\n", "output_directory", "=", "None", "\n", "filenames", "=", "argv", "[", "3", ":", "]", "\n", "if", "len", "(", "argv", ")", ">", "4", "and", "argv", "[", "3", "]", "==", "\"-o\"", ":", "\n", "        ", "output_directory", "=", "argv", "[", "4", "]", "\n", "print", "(", "\"Writing output to %s\"", "%", "output_directory", ",", "file", "=", "sys", ".", "stderr", ")", "\n", "filenames", "=", "argv", "[", "5", ":", "]", "\n", "\n", "# special case: if we only have a single file in input and it specifies", "\n", "# a directory, process all files in that directory", "\n", "", "input_directory", "=", "None", "\n", "if", "len", "(", "filenames", ")", "==", "1", "and", "os", ".", "path", ".", "isdir", "(", "filenames", "[", "0", "]", ")", ":", "\n", "        ", "input_directory", "=", "filenames", "[", "0", "]", "\n", "filenames", "=", "[", "os", ".", "path", ".", "join", "(", "input_directory", ",", "fn", ")", "\n", "for", "fn", "in", "os", ".", "listdir", "(", "input_directory", ")", "]", "\n", "print", "(", "\"Processing %d files in %s ...\"", "%", "(", "\n", "len", "(", "filenames", ")", ",", "input_directory", ")", ",", "file", "=", "sys", ".", "stderr", ")", "\n", "\n", "", "fail_count", "=", "0", "\n", "for", "fn", "in", "filenames", ":", "\n", "        ", "try", ":", "\n", "            ", "process", "(", "fn", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "            ", "print", "(", "\"Error processing %s: %s\"", "%", "(", "fn", ",", "e", ")", ",", "file", "=", "sys", ".", "stderr", ")", "\n", "fail_count", "+=", "1", "\n", "\n", "# if we're storing output on disk, remove the output file", "\n", "# to avoid having partially-written data", "\n", "ofn", "=", "output_filename", "(", "fn", ")", "\n", "try", ":", "\n", "                ", "os", ".", "remove", "(", "ofn", ")", "\n", "", "except", "BaseException", ":", "\n", "# never mind if that fails", "\n", "                ", "pass", "\n", "\n", "", "", "", "if", "fail_count", ">", "0", ":", "\n", "        ", "print", "(", "\"\"\"\n##############################################################################\n#\n# WARNING: error in processing %d/%d files, output is incomplete!\n#\n##############################################################################\n\"\"\"", "%", "(", "fail_count", ",", "len", "(", "filenames", ")", ")", ",", "file", "=", "sys", ".", "stderr", ")", "\n", "\n", "", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.utils.tag_scheme_converter.BIO2BIOES": [[16, 50], ["print", "open", "open.close", "print", "open", "in_file.readlines", "len", "len", "range", "open.write", "line.strip().split", "words.append", "labels.append", "pair[].upper", "open.write", "line.strip", "labels[].split", "open.write", "open.write", "open.write", "open.write"], "function", ["None"], ["def", "BIO2BIOES", "(", "input_file", ",", "output_file", ")", ":", "\n", "    ", "print", "(", "\"Convert BIO -> BIOES for file:\"", ",", "input_file", ")", "\n", "with", "open", "(", "input_file", ",", "'r'", ",", "encoding", "=", "\"utf-8\"", ",", "errors", "=", "\"ignore\"", ")", "as", "in_file", ":", "\n", "        ", "fins", "=", "in_file", ".", "readlines", "(", ")", "\n", "", "fout", "=", "open", "(", "output_file", ",", "'w'", ",", "encoding", "=", "\"utf-8\"", ",", "errors", "=", "\"ignore\"", ")", "\n", "words", "=", "[", "]", "\n", "labels", "=", "[", "]", "\n", "for", "line", "in", "fins", ":", "\n", "        ", "if", "len", "(", "line", ")", "<", "3", ":", "\n", "            ", "sent_len", "=", "len", "(", "words", ")", "\n", "for", "idx", "in", "range", "(", "sent_len", ")", ":", "\n", "                ", "if", "\"-\"", "not", "in", "labels", "[", "idx", "]", ":", "\n", "                    ", "fout", ".", "write", "(", "words", "[", "idx", "]", "+", "\" \"", "+", "labels", "[", "idx", "]", "+", "\"\\n\"", ")", "\n", "", "else", ":", "\n", "                    ", "label_type", "=", "labels", "[", "idx", "]", ".", "split", "(", "'-'", ")", "[", "-", "1", "]", "\n", "if", "\"B-\"", "in", "labels", "[", "idx", "]", ":", "\n", "                        ", "if", "(", "idx", "==", "sent_len", "-", "1", ")", "or", "(", "\"I-\"", "not", "in", "labels", "[", "idx", "+", "1", "]", ")", ":", "\n", "                            ", "fout", ".", "write", "(", "words", "[", "idx", "]", "+", "\" S-\"", "+", "label_type", "+", "\"\\n\"", ")", "\n", "", "else", ":", "\n", "                            ", "fout", ".", "write", "(", "words", "[", "idx", "]", "+", "\" B-\"", "+", "label_type", "+", "\"\\n\"", ")", "\n", "", "", "elif", "\"I-\"", "in", "labels", "[", "idx", "]", ":", "\n", "                        ", "if", "(", "idx", "==", "sent_len", "-", "1", ")", "or", "(", "\"I-\"", "not", "in", "labels", "[", "idx", "+", "1", "]", ")", ":", "\n", "                            ", "fout", ".", "write", "(", "words", "[", "idx", "]", "+", "\" E-\"", "+", "label_type", "+", "\"\\n\"", ")", "\n", "", "else", ":", "\n", "                            ", "fout", ".", "write", "(", "words", "[", "idx", "]", "+", "\" I-\"", "+", "label_type", "+", "\"\\n\"", ")", "\n", "", "", "", "", "fout", ".", "write", "(", "'\\n'", ")", "\n", "words", "=", "[", "]", "\n", "labels", "=", "[", "]", "\n", "", "else", ":", "\n", "            ", "pair", "=", "line", ".", "strip", "(", "'\\n'", ")", ".", "split", "(", ")", "\n", "words", ".", "append", "(", "pair", "[", "0", "]", ")", "\n", "labels", ".", "append", "(", "pair", "[", "-", "1", "]", ".", "upper", "(", ")", ")", "\n", "", "", "fout", ".", "close", "(", ")", "\n", "print", "(", "\"BIOES file generated:\"", ",", "output_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.utils.tag_scheme_converter.BIOES2BIO": [[53, 83], ["print", "open", "open.close", "print", "open", "in_file.readlines", "len", "len", "range", "open.write", "line.strip().split", "words.append", "labels.append", "pair[].upper", "open.write", "line.strip", "labels[].split", "open.write", "open.write", "open.write"], "function", ["None"], ["", "def", "BIOES2BIO", "(", "input_file", ",", "output_file", ")", ":", "\n", "    ", "print", "(", "\"Convert BIOES -> BIO for file:\"", ",", "input_file", ")", "\n", "with", "open", "(", "input_file", ",", "'r'", ",", "encoding", "=", "\"utf-8\"", ",", "errors", "=", "\"ignore\"", ")", "as", "in_file", ":", "\n", "        ", "fins", "=", "in_file", ".", "readlines", "(", ")", "\n", "", "fout", "=", "open", "(", "output_file", ",", "'w'", ",", "encoding", "=", "\"utf-8\"", ",", "errors", "=", "\"ignore\"", ")", "\n", "words", "=", "[", "]", "\n", "labels", "=", "[", "]", "\n", "for", "line", "in", "fins", ":", "\n", "        ", "if", "len", "(", "line", ")", "<", "3", ":", "\n", "            ", "sent_len", "=", "len", "(", "words", ")", "\n", "for", "idx", "in", "range", "(", "sent_len", ")", ":", "\n", "                ", "if", "\"-\"", "not", "in", "labels", "[", "idx", "]", ":", "\n", "                    ", "fout", ".", "write", "(", "words", "[", "idx", "]", "+", "\" \"", "+", "labels", "[", "idx", "]", "+", "\"\\n\"", ")", "\n", "", "else", ":", "\n", "                    ", "label_type", "=", "labels", "[", "idx", "]", ".", "split", "(", "'-'", ")", "[", "-", "1", "]", "\n", "if", "\"E-\"", "in", "labels", "[", "idx", "]", ":", "\n", "                        ", "fout", ".", "write", "(", "words", "[", "idx", "]", "+", "\" I-\"", "+", "label_type", "+", "\"\\n\"", ")", "\n", "", "elif", "\"S-\"", "in", "labels", "[", "idx", "]", ":", "\n", "                        ", "fout", ".", "write", "(", "words", "[", "idx", "]", "+", "\" B-\"", "+", "label_type", "+", "\"\\n\"", ")", "\n", "", "else", ":", "\n", "                        ", "fout", ".", "write", "(", "words", "[", "idx", "]", "+", "\" \"", "+", "labels", "[", "idx", "]", "+", "\"\\n\"", ")", "\n", "", "", "", "fout", ".", "write", "(", "'\\n'", ")", "\n", "words", "=", "[", "]", "\n", "labels", "=", "[", "]", "\n", "", "else", ":", "\n", "            ", "pair", "=", "line", ".", "strip", "(", "'\\n'", ")", ".", "split", "(", ")", "\n", "words", ".", "append", "(", "pair", "[", "0", "]", ")", "\n", "labels", ".", "append", "(", "pair", "[", "-", "1", "]", ".", "upper", "(", ")", ")", "\n", "", "", "fout", ".", "close", "(", ")", "\n", "print", "(", "\"BIO file generated:\"", ",", "output_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.utils.tag_scheme_converter.IOB2BIO": [[85, 113], ["print", "open", "open.close", "print", "open", "in_file.readlines", "len", "len", "range", "open.write", "line.strip().split", "words.append", "labels.append", "pair[].upper", "open.write", "line.strip", "labels[].split", "open.write", "open.write", "labels[].split"], "function", ["None"], ["", "def", "IOB2BIO", "(", "input_file", ",", "output_file", ")", ":", "\n", "    ", "print", "(", "\"Convert IOB -> BIO for file:\"", ",", "input_file", ")", "\n", "with", "open", "(", "input_file", ",", "'r'", ",", "encoding", "=", "\"utf-8\"", ",", "errors", "=", "\"ignore\"", ")", "as", "in_file", ":", "\n", "        ", "fins", "=", "in_file", ".", "readlines", "(", ")", "\n", "", "fout", "=", "open", "(", "output_file", ",", "'w'", ",", "encoding", "=", "\"utf-8\"", ",", "errors", "=", "\"ignore\"", ")", "\n", "words", "=", "[", "]", "\n", "labels", "=", "[", "]", "\n", "for", "line", "in", "fins", ":", "\n", "        ", "if", "len", "(", "line", ")", "<", "3", ":", "\n", "            ", "sent_len", "=", "len", "(", "words", ")", "\n", "for", "idx", "in", "range", "(", "sent_len", ")", ":", "\n", "                ", "if", "\"I-\"", "in", "labels", "[", "idx", "]", ":", "\n", "                    ", "label_type", "=", "labels", "[", "idx", "]", ".", "split", "(", "'-'", ")", "[", "-", "1", "]", "\n", "if", "(", "idx", "==", "0", ")", "or", "(", "labels", "[", "idx", "-", "1", "]", "==", "\"O\"", ")", "or", "(", "label_type", "!=", "labels", "[", "idx", "-", "1", "]", ".", "split", "(", "'-'", ")", "[", "-", "1", "]", ")", ":", "\n", "                        ", "fout", ".", "write", "(", "words", "[", "idx", "]", "+", "\" B-\"", "+", "label_type", "+", "\"\\n\"", ")", "\n", "", "else", ":", "\n", "                        ", "fout", ".", "write", "(", "words", "[", "idx", "]", "+", "\" \"", "+", "labels", "[", "idx", "]", "+", "\"\\n\"", ")", "\n", "", "", "else", ":", "\n", "                    ", "fout", ".", "write", "(", "words", "[", "idx", "]", "+", "\" \"", "+", "labels", "[", "idx", "]", "+", "\"\\n\"", ")", "\n", "", "", "fout", ".", "write", "(", "'\\n'", ")", "\n", "words", "=", "[", "]", "\n", "labels", "=", "[", "]", "\n", "", "else", ":", "\n", "            ", "pair", "=", "line", ".", "strip", "(", "'\\n'", ")", ".", "split", "(", ")", "\n", "words", ".", "append", "(", "pair", "[", "0", "]", ")", "\n", "labels", ".", "append", "(", "pair", "[", "-", "1", "]", ".", "upper", "(", ")", ")", "\n", "", "", "fout", ".", "close", "(", ")", "\n", "print", "(", "\"BIO file generated:\"", ",", "output_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.utils.tag_scheme_converter.choose_label": [[115, 125], ["open", "in_file.readlines", "open", "len", "fout.write", "line.strip().split", "fout.write", "line.strip"], "function", ["None"], ["", "def", "choose_label", "(", "input_file", ",", "output_file", ")", ":", "\n", "    ", "with", "open", "(", "input_file", ",", "'r'", ",", "encoding", "=", "\"utf-8\"", ",", "errors", "=", "\"ignore\"", ")", "as", "in_file", ":", "\n", "        ", "fins", "=", "in_file", ".", "readlines", "(", ")", "\n", "", "with", "open", "(", "output_file", ",", "'w'", ",", "encoding", "=", "\"utf-8\"", ",", "errors", "=", "\"ignore\"", ")", "as", "fout", ":", "\n", "        ", "for", "line", "in", "fins", ":", "\n", "            ", "if", "len", "(", "line", ")", "<", "3", ":", "\n", "                ", "fout", ".", "write", "(", "line", ")", "\n", "", "else", ":", "\n", "                ", "pairs", "=", "line", ".", "strip", "(", "'\\n'", ")", ".", "split", "(", "' '", ")", "\n", "fout", ".", "write", "(", "pairs", "[", "0", "]", "+", "\" \"", "+", "pairs", "[", "-", "1", "]", "+", "\"\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.utils.convert_brat_to_conll.standarize_bratconll_to_conll": [[11, 21], ["list", "open", "line.strip", "list.append", "line.strip().split", "list.append", "line.strip"], "function", ["None"], ["def", "standarize_bratconll_to_conll", "(", "fname", ")", ":", "\n", "    ", "lines", "=", "list", "(", ")", "\n", "with", "open", "(", "fname", ",", "encoding", "=", "\"utf-8\"", ",", "errors", "=", "\"ignore\"", ")", "as", "rf", ":", "\n", "        ", "for", "line", "in", "rf", ":", "\n", "            ", "if", "not", "line", ".", "strip", "(", ")", ":", "\n", "                ", "lines", ".", "append", "(", "line", ")", "\n", "", "else", ":", "\n", "                ", "label", ",", "_", ",", "_", ",", "token", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "\"\\t\"", ")", "\n", "lines", ".", "append", "(", "\"{}\\t{}\\n\"", ".", "format", "(", "token", ",", "label", ")", ")", "\n", "", "", "", "return", "lines", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.base.TrainInferenceUtils._setup_devices": [[20, 36], ["logger.info", "hasattr", "hasattr", "torch.device", "torch.cuda.device_count", "torch.device", "torch.cuda.is_available"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.t2ner.base.TrainInferenceUtils.device", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.base.TrainInferenceUtils.device"], ["    ", "@", "cached_property", "\n", "def", "_setup_devices", "(", "self", ")", ":", "\n", "        ", "logger", ".", "info", "(", "\"PyTorch: setting up devices\"", ")", "\n", "if", "hasattr", "(", "self", ",", "\"training_args\"", ")", ":", "\n", "            ", "no_cuda", "=", "self", ".", "training_args", ".", "no_cuda", "\n", "", "elif", "hasattr", "(", "self", ",", "\"no_cuda\"", ")", ":", "\n", "            ", "no_cuda", "=", "self", ".", "no_cuda", "\n", "", "else", ":", "\n", "            ", "no_cuda", "=", "False", "\n", "", "if", "not", "no_cuda", ":", "\n", "            ", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "n_gpu", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "", "else", ":", "\n", "            ", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", "\n", "n_gpu", "=", "0", "\n", "", "return", "device", ",", "n_gpu", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.base.TrainInferenceUtils.device": [[37, 40], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "device", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_setup_devices", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.base.TrainInferenceUtils.n_gpu": [[41, 44], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "n_gpu", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_setup_devices", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.base.TrainInferenceUtils.seed": [[49, 53], ["base.TrainInferenceUtils.set_seed"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.t2ner.base.TrainInferenceUtils.set_seed"], ["", "@", "seed", ".", "setter", "\n", "def", "seed", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "set_seed", "(", "value", ")", "\n", "self", ".", "_seed", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.base.TrainInferenceUtils.train_batch_size": [[54, 61], ["hasattr", "max"], "methods", ["None"], ["", "@", "property", "\n", "def", "train_batch_size", "(", "self", ")", ":", "\n", "        ", "if", "hasattr", "(", "self", ",", "\"training_args\"", ")", ":", "\n", "            ", "per_device_train_batch_size", "=", "self", ".", "training_args", ".", "per_device_train_batch_size", "\n", "", "else", ":", "\n", "            ", "per_device_train_batch_size", "=", "self", ".", "per_device_train_batch_size", "\n", "", "return", "per_device_train_batch_size", "*", "max", "(", "1", ",", "self", ".", "n_gpu", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.base.TrainInferenceUtils.eval_batch_size": [[62, 69], ["hasattr", "max"], "methods", ["None"], ["", "@", "property", "\n", "def", "eval_batch_size", "(", "self", ")", ":", "\n", "        ", "if", "hasattr", "(", "self", ",", "\"training_args\"", ")", ":", "\n", "            ", "per_device_eval_batch_size", "=", "self", ".", "training_args", ".", "per_device_eval_batch_size", "\n", "", "else", ":", "\n", "            ", "per_device_eval_batch_size", "=", "self", ".", "per_device_eval_batch_size", "\n", "", "return", "per_device_eval_batch_size", "*", "max", "(", "1", ",", "self", ".", "n_gpu", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.base.TrainInferenceUtils.load_or_create_model": [[70, 95], ["model_class.from_pretrained", "ValueError", "logger.info", "logger.info"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.models.multi_token_classification.AutoModelForMultiTokenClassification.from_pretrained"], ["", "@", "staticmethod", "\n", "def", "load_or_create_model", "(", "\n", "model_class", ",", "\n", "model_name_or_path", "=", "None", ",", "\n", "init_checkpoint", "=", "None", ",", "\n", "**", "config_kwargs", "\n", ")", ":", "\n", "        ", "if", "model_name_or_path", "is", "None", "and", "init_checkpoint", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"For loading or creating a new model model_name_or_path or \"", "\n", "\"init_checkpoint is required. When both are passed, init_checkpoint \"", "\n", "\"takes precedence.\"", "\n", ")", "\n", "", "if", "init_checkpoint", ":", "\n", "            ", "model_name_or_path", "=", "init_checkpoint", "\n", "logger", ".", "info", "(", "\"loading from init_checkpoint = {}\"", ".", "format", "(", "model_name_or_path", ")", ")", "\n", "", "else", ":", "\n", "            ", "logger", ".", "info", "(", "\"loading from cached model = {}\"", ".", "format", "(", "model_name_or_path", ")", ")", "\n", "\n", "", "model", "=", "model_class", ".", "from_pretrained", "(", "\n", "model_name_or_path", ",", "\n", "config_kwargs", "=", "config_kwargs", "\n", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.base.TrainInferenceUtils.save_model": [[96, 124], ["os.makedirs", "logger.info", "hasattr", "save_model.save_pretrained", "args.to_json_string", "open", "wf.write", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.t2ner.base.ArgumentsBase.to_json_string"], ["", "@", "staticmethod", "\n", "def", "save_model", "(", "\n", "model", ",", "\n", "output_dir", ",", "\n", "training_args", "=", "None", ",", "\n", "model_args", "=", "None", ",", "\n", "exp_args", "=", "None", "\n", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "output_dir", ",", "exist_ok", "=", "True", ")", "\n", "logger", ".", "info", "(", "\"Saving model checkpoint to %s\"", ",", "output_dir", ")", "\n", "# In all cases (even distributed/parallel), model is always a reference", "\n", "# to the model we want to save.", "\n", "if", "hasattr", "(", "model", ",", "\"module\"", ")", ":", "\n", "            ", "save_model", "=", "model", ".", "module", "\n", "", "else", ":", "\n", "            ", "save_model", "=", "model", "\n", "", "save_model", ".", "save_pretrained", "(", "output_dir", ")", "\n", "\n", "# Good practice: save your arguments together with the trained model", "\n", "for", "name", ",", "args", "in", "[", "\n", "(", "\"training_args\"", ",", "training_args", ")", ",", "\n", "(", "\"model_args\"", ",", "model_args", ")", ",", "\n", "(", "\"exp_args\"", ",", "exp_args", ")", "\n", "]", ":", "\n", "            ", "if", "args", "is", "not", "None", ":", "\n", "                ", "args_json", "=", "args", ".", "to_json_string", "(", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "output_dir", ",", "name", "+", "\".json\"", ")", ",", "\"w\"", ")", "as", "wf", ":", "\n", "                    ", "wf", ".", "write", "(", "args_json", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.base.TrainInferenceUtils.parse_input_to_dataset_metadata": [[125, 152], ["dict", "isinstance", "len", "range", "ValueError", "len"], "methods", ["None"], ["", "", "", "", "@", "staticmethod", "\n", "def", "parse_input_to_dataset_metadata", "(", "item", ")", ":", "\n", "        ", "metadata", "=", "dict", "(", "\n", "name", "=", "None", ",", "\n", "max_examples", "=", "-", "1", ",", "\n", "drop_last", "=", "False", ",", "\n", "forever", "=", "False", ",", "\n", "shuffle", "=", "False", "\n", ")", "\n", "if", "isinstance", "(", "item", ",", "str", ")", ":", "\n", "            ", "metadata", "[", "\"name\"", "]", "=", "item", "\n", "", "elif", "len", "(", "item", ")", ">", "1", ":", "\n", "            ", "metadata", "[", "\"name\"", "]", "=", "item", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "item", ")", "-", "1", ")", ":", "\n", "                ", "if", "i", "==", "1", ":", "\n", "                    ", "metadata", "[", "\"max_examples\"", "]", "=", "item", "[", "1", "]", "\n", "", "elif", "i", "==", "2", ":", "\n", "                    ", "metadata", "[", "\"drop_last\"", "]", "=", "item", "[", "2", "]", "\n", "", "elif", "i", "==", "3", ":", "\n", "                    ", "metadata", "[", "\"forever\"", "]", "=", "item", "[", "3", "]", "\n", "", "elif", "i", "==", "4", ":", "\n", "                    ", "metadata", "[", "\"shuffle\"", "]", "=", "item", "[", "4", "]", "\n", "", "", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Unable to parse item `{}` to metadata.\"", ".", "format", "(", "item", ")", "\n", ")", "\n", "", "return", "metadata", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.base.TrainInferenceUtils.init_logging": [[153, 168], ["logging.FileHandler", "logging.FileHandler.setLevel", "logging.basicConfig", "logging.FileHandler.setFormatter", "logging.Formatter", "logging.StreamHandler"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "init_logging", "(", "log_file", ")", ":", "\n", "        ", "fh", "=", "logging", ".", "FileHandler", "(", "log_file", ")", "\n", "fh", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "logging", ".", "basicConfig", "(", "\n", "handlers", "=", "[", "logging", ".", "StreamHandler", "(", ")", "]", ",", "\n", "format", "=", "'%(asctime)s - %(levelname)s - %(name)s -   %(message)s'", ",", "\n", "datefmt", "=", "'%m/%d/%Y %H:%M:%S'", ",", "\n", "level", "=", "logging", ".", "INFO", "\n", ")", "\n", "fh", ".", "setFormatter", "(", "logging", ".", "Formatter", "(", "\n", "'%(asctime)s - %(levelname)s - %(name)s -   %(message)s'", ",", "\n", "datefmt", "=", "'%m/%d/%Y %H:%M:%S'", "\n", ")", ")", "\n", "return", "fh", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.base.TrainInferenceUtils.freeze": [[169, 173], ["module.parameters"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "freeze", "(", "module", ")", ":", "\n", "        ", "for", "params", "in", "module", ".", "parameters", "(", ")", ":", "\n", "            ", "params", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.base.TrainInferenceUtils.unfreeze": [[174, 178], ["module.parameters"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "unfreeze", "(", "module", ")", ":", "\n", "        ", "for", "params", "in", "module", ".", "parameters", "(", ")", ":", "\n", "            ", "params", ".", "requires_grad", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.base.TrainInferenceUtils.set_seed": [[179, 185], ["random.seed", "numpy.random.seed", "torch.manual_seed", "torch.cuda.manual_seed_all"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.t2ner.base.TrainInferenceUtils.seed", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.base.TrainInferenceUtils.seed"], ["", "", "def", "set_seed", "(", "self", ",", "seed", ")", ":", "\n", "        ", "random", ".", "seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "if", "self", ".", "n_gpu", ">", "0", ":", "\n", "            ", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.base.TrainInferenceUtils.detach": [[186, 189], ["tensor.detach().cpu().numpy", "tensor.detach().cpu", "tensor.detach"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.t2ner.base.TrainInferenceUtils.detach"], ["", "", "@", "staticmethod", "\n", "def", "detach", "(", "tensor", ")", ":", "\n", "        ", "return", "tensor", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.base.ArgumentsBase.to_json_string": [[194, 199], ["json.dumps", "dataclasses.asdict"], "methods", ["None"], ["    ", "def", "to_json_string", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Serializes this instance to a JSON string.\n        \"\"\"", "\n", "return", "json", ".", "dumps", "(", "dataclasses", ".", "asdict", "(", "self", ")", ",", "indent", "=", "2", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.evaluate.Evaluator.__init__": [[26, 30], ["kwargs.get", "kwargs.get", "kwargs.get"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "per_device_eval_batch_size", "=", "kwargs", ".", "get", "(", "\"per_device_eval_batch_size\"", ",", "32", ")", "\n", "self", ".", "no_cuda", "=", "kwargs", ".", "get", "(", "\"no_cuda\"", ",", "False", ")", "\n", "self", ".", "verbose", "=", "kwargs", ".", "get", "(", "\"verbose\"", ",", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.evaluate.Evaluator.evaluate": [[31, 165], ["logger.info", "logger.info", "logger.info", "model.eval", "tqdm.tqdm.tqdm", "len", "eval_loss.item", "evaluate.Evaluator.align_predictions", "batch.get", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model", "evaluate.Evaluator.detach", "seqeval.metrics.precision_score", "seqeval.metrics.recall_score", "seqeval.metrics.f1_score", "zip", "logger.info", "sorted", "batch[].to", "len", "ValueError", "list", "[].to", "batch[].get", "batch[].get", "evaluate.Evaluator.detach", "numpy.append", "evaluate.Evaluator.detach", "numpy.append", "numpy.append", "seqeval.metrics.classification_report", "list", "sum", "results.keys", "logger.info", "batch.keys", "tmp_eval_loss.mean.mean.mean", "evaluate.Evaluator.detach", "evaluate.Evaluator.detach", "sum", "len", "correct.append", "str", "sum", "len"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.t2ner.evaluate.Evaluator.align_predictions", "home.repos.pwc.inspect_result.suamin_t2ner.models.base.TransformersUtils.model", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.base.TrainInferenceUtils.detach", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.base.TrainInferenceUtils.detach", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.base.TrainInferenceUtils.detach", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.base.TrainInferenceUtils.detach", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.base.TrainInferenceUtils.detach"], ["", "def", "evaluate", "(", "\n", "self", ",", "\n", "model", ",", "\n", "dataloader", ",", "\n", "id2label", "=", "None", ",", "\n", "name", "=", "\"\"", ",", "\n", "predict_only", "=", "False", ",", "\n", "loss_only", "=", "False", "\n", ")", ":", "\n", "        ", "eval_batch_size", "=", "self", ".", "eval_batch_size", "\n", "logger", ".", "info", "(", "\"***** Running evaluation %s *****\"", "%", "name", ")", "\n", "logger", ".", "info", "(", "\"  Num examples = %d\"", ",", "len", "(", "dataloader", ".", "dataset", ")", ")", "\n", "logger", ".", "info", "(", "\"  Eval batch size = %d\"", ",", "eval_batch_size", ")", "\n", "\n", "eval_loss", "=", "0.", "\n", "nb_eval_steps", "=", "0", "\n", "preds", "=", "None", "\n", "has_crf", "=", "False", "\n", "out_label_ids", "=", "None", "\n", "has_labels", "=", "True", "if", "not", "predict_only", "else", "False", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "for", "batch", "in", "tqdm", "(", "dataloader", ",", "desc", "=", "\"Evaluating\"", ")", ":", "\n", "            ", "if", "\"input_ids\"", "in", "batch", ":", "\n", "                ", "pred_layer", "=", "None", "\n", "for", "tensor_key", "in", "batch", ":", "\n", "                    ", "batch", "[", "tensor_key", "]", "=", "batch", "[", "tensor_key", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "", "batch_label_ids", "=", "batch", ".", "get", "(", "\"label_ids\"", ",", "None", ")", "\n", "", "else", ":", "\n", "# If multiple-NER setting (i.e. multiple classification layers ", "\n", "# for different datasets in multi-dataset setting).", "\n", "                ", "if", "len", "(", "batch", ")", ">", "1", ":", "\n", "                    ", "raise", "ValueError", "(", "\n", "\"For evaluation with more than one output classification \"", "\n", "\"layer, only one layer can be evaluated at a time.\"", "\n", ")", "\n", "\n", "", "pred_layer", "=", "list", "(", "batch", ".", "keys", "(", ")", ")", "[", "0", "]", "\n", "for", "tensor_key", "in", "batch", "[", "pred_layer", "]", ":", "\n", "                    ", "batch", "[", "pred_layer", "]", "[", "tensor_key", "]", "=", "(", "\n", "batch", "[", "pred_layer", "]", "[", "tensor_key", "]", ".", "to", "(", "self", ".", "device", ")", "\n", ")", "\n", "\n", "", "if", "pred_layer", "==", "\"shared\"", ":", "\n", "                    ", "batch_label_ids", "=", "batch", "[", "pred_layer", "]", ".", "get", "(", "\"shared_label_ids\"", ",", "None", ")", "\n", "", "else", ":", "\n", "                    ", "batch_label_ids", "=", "batch", "[", "pred_layer", "]", ".", "get", "(", "\"label_ids\"", ",", "None", ")", "\n", "\n", "# TODO Remove: normally it should not happen but if we have mixed ", "\n", "# batches with/without labels, then if there is any unlabeled batch, ", "\n", "# hard set has_labels to False", "\n", "", "", "if", "batch_label_ids", "is", "None", ":", "\n", "                ", "has_labels", "=", "False", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "outputs", "=", "model", "(", "batch", ")", "\n", "\n", "if", "pred_layer", "is", "None", ":", "\n", "                    ", "outputs", "=", "outputs", "[", "\"ner\"", "]", "\n", "", "else", ":", "\n", "# second index is aux_output; used when using shared labels", "\n", "                    ", "if", "pred_layer", "==", "\"shared\"", ":", "\n", "                        ", "outputs", "=", "outputs", "[", "1", "]", "[", "pred_layer", "]", "\n", "", "else", ":", "\n", "                        ", "outputs", "=", "outputs", "[", "0", "]", "\n", "outputs", "=", "outputs", "[", "pred_layer", "]", "[", "\"ner\"", "]", "\n", "\n", "", "", "logits", "=", "outputs", "[", "\"logits\"", "]", "\n", "\n", "# for CRF output layers, the decoded sequence is attached", "\n", "if", "\"prediction\"", "in", "outputs", ":", "\n", "                    ", "has_crf", "=", "True", "\n", "crf_predictions", "=", "outputs", "[", "\"prediction\"", "]", "\n", "\n", "", "if", "has_labels", ":", "\n", "                    ", "tmp_eval_loss", "=", "outputs", "[", "\"loss\"", "]", "\n", "if", "self", ".", "n_gpu", ">", "1", ":", "\n", "                        ", "tmp_eval_loss", "=", "tmp_eval_loss", ".", "mean", "(", ")", "\n", "", "eval_loss", "+=", "tmp_eval_loss", "\n", "\n", "", "", "nb_eval_steps", "+=", "1", "\n", "\n", "if", "has_crf", ":", "\n", "                ", "if", "preds", "is", "None", ":", "\n", "                    ", "preds", "=", "self", ".", "detach", "(", "crf_predictions", ")", "\n", "", "else", ":", "\n", "                    ", "preds", "=", "np", ".", "append", "(", "preds", ",", "self", ".", "detach", "(", "crf_predictions", ")", ",", "axis", "=", "0", ")", "\n", "", "", "else", ":", "\n", "                ", "if", "preds", "is", "None", ":", "\n", "                    ", "preds", "=", "self", ".", "detach", "(", "logits", ")", "\n", "", "else", ":", "\n", "                    ", "preds", "=", "np", ".", "append", "(", "preds", ",", "self", ".", "detach", "(", "logits", ")", ",", "axis", "=", "0", ")", "\n", "\n", "", "", "if", "has_labels", ":", "\n", "                ", "batch_label_ids", "=", "self", ".", "detach", "(", "batch_label_ids", ")", "\n", "if", "out_label_ids", "is", "None", ":", "\n", "                    ", "out_label_ids", "=", "batch_label_ids", "\n", "", "else", ":", "\n", "                    ", "out_label_ids", "=", "np", ".", "append", "(", "out_label_ids", ",", "batch_label_ids", ",", "axis", "=", "0", ")", "\n", "\n", "", "", "", "results", "=", "{", "\"loss\"", ":", "0.", "}", "\n", "preds_list", "=", "[", "]", "\n", "\n", "if", "nb_eval_steps", "!=", "0", "and", "has_labels", ":", "\n", "            ", "eval_loss", "/=", "nb_eval_steps", "\n", "results", "[", "\"loss\"", "]", "=", "eval_loss", ".", "item", "(", ")", "\n", "preds_list", ",", "out_label_list", "=", "self", ".", "align_predictions", "(", "\n", "preds", ",", "out_label_ids", ",", "id2label", "\n", ")", "\n", "\n", "if", "not", "loss_only", ":", "\n", "                ", "results", "[", "\"precision\"", "]", "=", "precision_score", "(", "out_label_list", ",", "preds_list", ")", "\n", "results", "[", "\"recall\"", "]", "=", "recall_score", "(", "out_label_list", ",", "preds_list", ")", "\n", "results", "[", "\"f1\"", "]", "=", "f1_score", "(", "out_label_list", ",", "preds_list", ")", "\n", "results", "[", "\"report\"", "]", "=", "\"\\n\"", "+", "classification_report", "(", "\n", "out_label_list", ",", "preds_list", ",", "digits", "=", "4", "\n", ")", "\n", "\n", "ntotal", ",", "correct", "=", "0", ",", "list", "(", ")", "\n", "for", "out_label", ",", "pred", "in", "zip", "(", "out_label_list", ",", "preds_list", ")", ":", "\n", "                    ", "if", "sum", "(", "l", "==", "\"O\"", "for", "l", "in", "out_label", ")", "==", "len", "(", "out_label", ")", ":", "\n", "                        ", "correct", ".", "append", "(", "sum", "(", "l", "==", "\"O\"", "for", "l", "in", "pred", ")", "==", "len", "(", "out_label", ")", ")", "\n", "ntotal", "+=", "1", "\n", "", "", "results", "[", "\"accuracy\"", "]", "=", "sum", "(", "correct", ")", "/", "ntotal", "\n", "\n", "", "if", "self", ".", "verbose", ":", "\n", "                ", "logger", ".", "info", "(", "\"***** Evaluation result *****\"", ")", "\n", "for", "key", "in", "sorted", "(", "results", ".", "keys", "(", ")", ")", ":", "\n", "                    ", "logger", ".", "info", "(", "\"  %s = %s\"", ",", "key", ",", "str", "(", "results", "[", "key", "]", ")", ")", "\n", "\n", "", "", "", "else", ":", "\n", "            ", "preds_list", "=", "preds", "\n", "\n", "", "return", "results", ",", "preds_list", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.evaluate.Evaluator.save_results": [[166, 172], ["os.path.join", "open", "results.items", "wf.write"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "save_results", "(", "results", ",", "output_dir", ",", "name", "=", "\"\"", ",", "split", "=", "\"dev\"", ")", ":", "\n", "        ", "output_file", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "\"{}_{}_results.txt\"", ".", "format", "(", "split", ",", "name", ")", ")", "\n", "with", "open", "(", "output_file", ",", "\"w\"", ")", "as", "wf", ":", "\n", "            ", "for", "key", ",", "value", "in", "results", ".", "items", "(", ")", ":", "\n", "                ", "wf", ".", "write", "(", "\"%s = %s\\n\"", "%", "(", "key", ",", "value", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.evaluate.Evaluator.align_predictions": [[173, 193], ["range", "len", "numpy.argmax", "range", "range", "range", "out_label_list[].append", "preds_list[].append"], "methods", ["None"], ["", "", "", "@", "staticmethod", "\n", "def", "align_predictions", "(", "predictions", ",", "label_ids", ",", "id2label", "=", "None", ")", ":", "\n", "        ", "assert", "predictions", ".", "shape", "[", "0", "]", "==", "label_ids", ".", "shape", "[", "0", "]", "\n", "if", "len", "(", "predictions", ".", "shape", ")", "==", "3", ":", "\n", "            ", "preds", "=", "np", ".", "argmax", "(", "predictions", ",", "axis", "=", "2", ")", "\n", "", "else", ":", "\n", "            ", "preds", "=", "predictions", "\n", "", "num_examples", ",", "seq_len", "=", "label_ids", ".", "shape", "\n", "out_label_list", "=", "[", "[", "]", "for", "_", "in", "range", "(", "num_examples", ")", "]", "\n", "preds_list", "=", "[", "[", "]", "for", "_", "in", "range", "(", "num_examples", ")", "]", "\n", "\n", "for", "i", "in", "range", "(", "num_examples", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "seq_len", ")", ":", "\n", "                ", "if", "label_ids", "[", "i", ",", "j", "]", "!=", "IGNORE_INDEX", ":", "\n", "                    ", "o", "=", "label_ids", "[", "i", "]", "[", "j", "]", "\n", "p", "=", "preds", "[", "i", "]", "[", "j", "]", "\n", "out_label_list", "[", "i", "]", ".", "append", "(", "id2label", "[", "o", "]", "if", "id2label", "else", "o", ")", "\n", "preds_list", "[", "i", "]", ".", "append", "(", "id2label", "[", "p", "]", "if", "id2label", "else", "p", ")", "\n", "\n", "", "", "", "return", "preds_list", ",", "out_label_list", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.evaluate.Evaluator.save_predictions": [[194, 208], ["data.utils.read_conll_ner_file", "len", "len", "open", "enumerate", "zip", "wf.write", "len", "len", "wf.write"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.data.utils.read_conll_ner_file"], ["", "@", "staticmethod", "\n", "def", "save_predictions", "(", "preds_list", ",", "input_file", ",", "output_file", ")", ":", "\n", "        ", "examples", "=", "utils", ".", "read_conll_ner_file", "(", "input_file", ")", "\n", "assert", "len", "(", "preds_list", ")", "==", "len", "(", "examples", ")", "\n", "\n", "with", "open", "(", "output_file", ",", "\"w\"", ",", "encoding", "=", "\"utf-8\"", ",", "errors", "=", "\"ignore\"", ")", "as", "wf", ":", "\n", "            ", "example_id", "=", "0", "\n", "for", "idx", ",", "example", "in", "enumerate", "(", "examples", ")", ":", "\n", "                ", "words", "=", "example", "[", "\"words\"", "]", "\n", "preds", "=", "preds_list", "[", "idx", "]", "\n", "assert", "len", "(", "words", ")", "==", "len", "(", "preds", ")", "\n", "for", "word", ",", "pred", "in", "zip", "(", "words", ",", "preds", ")", ":", "\n", "                    ", "wf", ".", "write", "(", "\"{}\\t{}\\n\"", ".", "format", "(", "word", ",", "pred", ")", ")", "\n", "", "wf", ".", "write", "(", "\"\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.evaluate.Evaluator.run_eval_on_collection": [[209, 256], ["dict", "collection.items", "evaluate.Evaluator.evaluate", "evaluate.Evaluator.save_results", "unique_name.split", "os.path.join", "os.path.join", "evaluate.Evaluator.save_predictions", "ValueError"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.t2ner.evaluate.Evaluator.evaluate", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.evaluate.Evaluator.save_results", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.evaluate.Evaluator.save_predictions"], ["", "", "", "def", "run_eval_on_collection", "(", "\n", "self", ",", "\n", "model", ",", "\n", "collection", ",", "\n", "output_dir", ",", "\n", "split", "=", "\"dev\"", ",", "\n", "input_dir", "=", "None", ",", "\n", "loss_only", "=", "False", ",", "\n", "predict_only", "=", "False", ",", "\n", "save_predictions", "=", "False", "\n", ")", ":", "\n", "        ", "eval_results", "=", "dict", "(", ")", "\n", "\n", "for", "unique_name", ",", "(", "dataloader", ",", "id2label", ")", "in", "collection", ".", "items", "(", ")", ":", "\n", "            ", "results", ",", "preds", "=", "self", ".", "evaluate", "(", "\n", "model", "=", "model", ",", "\n", "dataloader", "=", "dataloader", ",", "\n", "id2label", "=", "id2label", ",", "\n", "name", "=", "unique_name", ",", "\n", "predict_only", "=", "predict_only", ",", "\n", "loss_only", "=", "loss_only", "\n", ")", "\n", "eval_results", "[", "unique_name", "]", "=", "results", "\n", "self", ".", "save_results", "(", "results", ",", "output_dir", ",", "unique_name", ",", "split", ")", "\n", "\n", "if", "save_predictions", ":", "\n", "# TODO remove dependence on source file", "\n", "                ", "if", "input_dir", "is", "None", ":", "\n", "                    ", "raise", "ValueError", "(", "\n", "\"For saving predictions, input_dir is reequired \"", "\n", "\"to read the source file.\"", "\n", ")", "\n", "\n", "# Check if shared", "\n", "", "temp", "=", "unique_name", ".", "split", "(", "\".\"", ")", "\n", "if", "temp", "[", "-", "1", "]", "==", "\"shared\"", ":", "\n", "                    ", "input_fname", "=", "\"{}-{}\"", ".", "format", "(", "\".\"", ".", "join", "(", "temp", "[", ":", "-", "1", "]", ")", ",", "split", ")", "\n", "output_fname", "=", "\"predictions_{}_shared.txt\"", ".", "format", "(", "input_fname", ")", "\n", "", "else", ":", "\n", "                    ", "input_fname", "=", "\"{}-{}\"", ".", "format", "(", "unique_name", ",", "split", ")", "\n", "output_fname", "=", "\"predictions_{}.txt\"", ".", "format", "(", "input_fname", ")", "\n", "\n", "", "input_file", "=", "os", ".", "path", ".", "join", "(", "input_dir", ",", "input_fname", ")", "\n", "output_file", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "output_fname", ")", "\n", "self", ".", "save_predictions", "(", "preds", ",", "input_file", ",", "output_file", ")", "\n", "\n", "", "", "return", "eval_results", "\n", "", "", ""]], "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.__init__": [[29, 48], ["abc.ABC.__init__", "train.BaseTrainer.setup_output_dir", "train.BaseTrainer.setup_logging", "train.BaseTrainer.setup_config_kwargs", "train.BaseTrainer.setup_evaluator", "collections.OrderedDict", "collections.OrderedDict", "collections.OrderedDict", "evaluate.logger.info", "evaluate.logger.info"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.annotate.annotate.SentAnnObj.__init__", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.setup_output_dir", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.setup_logging", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.setup_config_kwargs", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.setup_evaluator"], ["    ", "def", "__init__", "(", "self", ",", "training_args", ",", "model_args", ",", "exp_args", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "training_args", "=", "training_args", "\n", "self", ".", "model_args", "=", "model_args", "\n", "self", ".", "exp_args", "=", "exp_args", "\n", "self", ".", "seed", "=", "training_args", ".", "seed", "\n", "\n", "self", ".", "setup_output_dir", "(", ")", "\n", "self", ".", "setup_logging", "(", ")", "\n", "self", ".", "setup_config_kwargs", "(", ")", "\n", "self", ".", "setup_evaluator", "(", ")", "\n", "\n", "self", ".", "_models", "=", "OrderedDict", "(", ")", "\n", "self", ".", "_optims", "=", "OrderedDict", "(", ")", "\n", "self", ".", "_scheds", "=", "OrderedDict", "(", ")", "\n", "\n", "logger", ".", "info", "(", "\"Input args: %r %r %r\"", ",", "model_args", ",", "exp_args", ",", "training_args", ")", "\n", "logger", ".", "info", "(", "\"Process device: %s, n_gpu: %s\"", ",", "self", ".", "device", ",", "self", ".", "n_gpu", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.setup_output_dir": [[49, 64], ["os.path.exists", "os.listdir", "ValueError", "os.path.exists", "os.makedirs"], "methods", ["None"], ["", "def", "setup_output_dir", "(", "self", ")", ":", "\n", "# Check if output directory is empty", "\n", "        ", "if", "os", ".", "path", ".", "exists", "(", "self", ".", "training_args", ".", "output_dir", ")", "and", "os", ".", "listdir", "(", "self", ".", "training_args", ".", "output_dir", ")", "and", "self", ".", "training_args", ".", "do_train", "and", "not", "self", ".", "training_args", ".", "overwrite_output_dir", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Output directory ({}) already exists and is not empty. \"", "\n", "\"Use --overwrite_output_dir to overcome.\"", "\n", ".", "format", "(", "self", ".", "training_args", ".", "output_dir", ")", "\n", ")", "\n", "\n", "# Create output directory if needed", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "training_args", ".", "output_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "training_args", ".", "output_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.setup_logging": [[65, 71], ["os.path.join", "train.BaseTrainer.init_logging", "evaluate.logger.addHandler", "evaluate.logger.addHandler"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.annotate.annotate.init_logging"], ["", "", "def", "setup_logging", "(", "self", ")", ":", "\n", "# Setup logging", "\n", "        ", "log_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "training_args", ".", "output_dir", ",", "\"log.txt\"", ")", "\n", "fh", "=", "self", ".", "init_logging", "(", "log_file", ")", "\n", "logger", ".", "addHandler", "(", "fh", ")", "\n", "eval_logger", ".", "addHandler", "(", "fh", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.setup_config_kwargs": [[72, 85], ["train.BaseTrainer.__setattr__", "dict"], "methods", ["None"], ["", "def", "setup_config_kwargs", "(", "self", ")", ":", "\n", "        ", "self", ".", "__setattr__", "(", "\"config_kwargs\"", ",", "dict", "(", "\n", "mode", "=", "self", ".", "model_args", ".", "encoder_mode", ",", "\n", "use_crf", "=", "self", ".", "model_args", ".", "use_crf", ",", "\n", "crf_bigram", "=", "self", ".", "model_args", ".", "crf_bigram", ",", "\n", "normalize_clf", "=", "self", ".", "model_args", ".", "normalize_clf", ",", "\n", "temp_clf", "=", "self", ".", "model_args", ".", "temp_clf", ",", "\n", "output_classifier_dropout", "=", "self", ".", "model_args", ".", "output_classifier_dropout", ",", "\n", "loss_fct", "=", "self", ".", "model_args", ".", "loss_fct", ",", "\n", "ignore_heads", "=", "self", ".", "model_args", ".", "ignore_heads", ",", "\n", "add_xnet", "=", "self", ".", "model_args", ".", "add_xnet", ",", "\n", "class_num_list", "=", "self", ".", "model_args", ".", "class_num_list", ",", "\n", "valid_metric", "=", "self", ".", "model_args", ".", "valid_metric", "\n", ")", ")", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.setup_evaluator": [[87, 92], ["train.BaseTrainer.__setattr__", "evaluate.Evaluator"], "methods", ["None"], ["", "def", "setup_evaluator", "(", "self", ")", ":", "\n", "        ", "self", ".", "__setattr__", "(", "\"evaluator\"", ",", "Evaluator", "(", "\n", "per_device_eval_batch_size", "=", "self", ".", "training_args", ".", "per_device_eval_batch_size", ",", "\n", "no_cuda", "=", "self", ".", "training_args", ".", "no_cuda", ",", "\n", "verbose", "=", "True", "\n", ")", ")", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.features_kwargs": [[94, 107], ["dict"], "methods", ["None"], ["", "@", "property", "\n", "def", "features_kwargs", "(", "self", ")", ":", "\n", "# Set features options", "\n", "        ", "tokenizer_name_or_path", "=", "self", ".", "model_args", ".", "model_name_or_path", "\n", "if", "self", ".", "model_args", ".", "tokenizer_name_or_path", "is", "not", "None", ":", "\n", "            ", "tokenizer_name_or_path", "=", "self", ".", "model_args", ".", "tokenizer_name_or_path", "\n", "", "features_kwargs", "=", "dict", "(", "\n", "tokenizer_name_or_path", "=", "tokenizer_name_or_path", ",", "\n", "do_lower_case", "=", "self", ".", "model_args", ".", "do_lower_case", ",", "\n", "max_seq_length", "=", "self", ".", "model_args", ".", "max_seq_length", ",", "\n", "cache_dir", "=", "self", ".", "model_args", ".", "cache_dir", "\n", ")", "\n", "return", "features_kwargs", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.data_kwargs": [[108, 119], ["dict"], "methods", ["None"], ["", "@", "property", "\n", "def", "data_kwargs", "(", "self", ")", ":", "\n", "        ", "data_kwargs", "=", "dict", "(", "\n", "preprocessed_data_dir", "=", "self", ".", "exp_args", ".", "preprocessed_data_dir", ",", "\n", "train_batch_size", "=", "self", ".", "train_batch_size", ",", "\n", "eval_batch_size", "=", "self", ".", "eval_batch_size", ",", "\n", "features_cache_dir", "=", "self", ".", "model_args", ".", "features_cache_dir", ",", "\n", "overwrite_cache", "=", "self", ".", "model_args", ".", "overwrite_cache", ",", "\n", "features_kwargs", "=", "self", ".", "features_kwargs", "\n", ")", "\n", "return", "data_kwargs", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.is_max_step": [[120, 127], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "is_max_step", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "training_args", ".", "max_steps", ">", "0", "and", "self", ".", "global_step", ">", "self", ".", "training_args", ".", "max_steps", ":", "\n", "            ", "return", "True", "\n", "", "else", ":", "\n", "            ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.is_update_step": [[128, 139], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "is_update_step", "(", "self", ")", ":", "\n", "# Requires external attributes (step, num_batches)", "\n", "        ", "if", "(", "self", ".", "step", "+", "1", ")", "%", "self", ".", "training_args", ".", "gradient_accumulation_steps", "==", "0", "or", "(", "\n", "# last step in epoch but step is always smaller than gradient_accumulation_steps", "\n", "self", ".", "num_batches", "<=", "self", ".", "training_args", ".", "gradient_accumulation_steps", "\n", "and", "(", "self", ".", "step", "+", "1", ")", "==", "self", ".", "num_batches", "\n", ")", ":", "\n", "            ", "return", "True", "\n", "", "else", ":", "\n", "            ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.progress": [[140, 144], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "progress", "(", "self", ")", ":", "\n", "# Requires external attributes (epoch, step, num_batches)", "\n", "        ", "return", "self", ".", "epoch", "+", "(", "(", "self", ".", "step", "+", "1", ")", "/", "self", ".", "num_batches", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.total_train_batch_size": [[145, 150], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "total_train_batch_size", "(", "self", ")", ":", "\n", "        ", "return", "(", "\n", "self", ".", "training_args", ".", "train_batch_size", "*", "\n", "self", ".", "training_args", ".", "gradient_accumulation_steps", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.train_dataloader_length": [[156, 159], ["None"], "methods", ["None"], ["", "@", "train_dataloader_length", ".", "setter", "\n", "def", "train_dataloader_length", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_train_dataloader_length", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.t_total": [[160, 177], ["int"], "methods", ["None"], ["", "@", "property", "\n", "def", "t_total", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "training_args", ".", "max_steps", ">", "0", ":", "\n", "            ", "t_total", "=", "self", ".", "training_args", ".", "max_steps", "\n", "num_train_epochs", "=", "(", "\n", "self", ".", "training_args", ".", "max_steps", "//", "\n", "(", "self", ".", "train_dataloader_length", "//", "self", ".", "training_args", ".", "gradient_accumulation_steps", ")", "\n", "+", "1", "\n", ")", "\n", "self", ".", "training_args", ".", "num_train_epochs", "=", "num_train_epochs", "\n", "", "else", ":", "\n", "            ", "t_total", "=", "int", "(", "\n", "self", ".", "train_dataloader_length", "//", "\n", "self", ".", "training_args", ".", "gradient_accumulation_steps", "*", "\n", "self", ".", "training_args", ".", "num_train_epochs", "\n", ")", "\n", "", "return", "t_total", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.register_optim_and_scheduler": [[178, 191], ["train.BaseTrainer.__dict__.get", "AttributeError", "train.BaseTrainer.__dict__.get", "AttributeError"], "methods", ["None"], ["", "def", "register_optim_and_scheduler", "(", "self", ",", "name", "=", "\"model\"", ",", "optim", "=", "None", ",", "sched", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "__dict__", ".", "get", "(", "\"_optims\"", ")", "is", "None", ":", "\n", "            ", "raise", "AttributeError", "(", "\n", "\"Cannot assign optim before super().__init__() call\"", "\n", ")", "\n", "\n", "", "if", "self", ".", "__dict__", ".", "get", "(", "\"_scheds\"", ")", "is", "None", ":", "\n", "            ", "raise", "AttributeError", "(", "\n", "\"Cannot assign sched before super().__init__() call\"", "\n", ")", "\n", "\n", "", "self", ".", "_optims", "[", "name", "]", "=", "optim", "\n", "self", ".", "_scheds", "[", "name", "]", "=", "sched", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.register_model": [[192, 199], ["train.BaseTrainer.__dict__.get", "AttributeError"], "methods", ["None"], ["", "def", "register_model", "(", "self", ",", "model", ",", "name", "=", "\"model\"", ")", ":", "\n", "        ", "if", "self", ".", "__dict__", ".", "get", "(", "\"_models\"", ")", "is", "None", ":", "\n", "            ", "raise", "AttributeError", "(", "\n", "\"Cannot assign model before super().__init__() call\"", "\n", ")", "\n", "\n", "", "self", ".", "_models", "[", "name", "]", "=", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.model": [[204, 207], ["train.BaseTrainer.register_model"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.register_model"], ["", "@", "model", ".", "setter", "\n", "def", "model", "(", "self", ",", "model", ")", ":", "\n", "        ", "self", ".", "register_model", "(", "model", ",", "name", "=", "\"model\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.__getitem__": [[208, 212], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "name", ")", ":", "\n", "        ", "optim", "=", "self", ".", "_optims", "[", "name", "]", "\n", "sched", "=", "self", ".", "_scheds", "[", "name", "]", "\n", "return", "optim", ",", "sched", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.get_optimizer_and_scheduler": [[213, 243], ["dict", "dict", "optim.build_optimizer", "optim.build_lr_scheduler"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.optim.optimizer.build_optimizer", "home.repos.pwc.inspect_result.suamin_t2ner.optim.lr_scheduler.build_lr_scheduler"], ["", "def", "get_optimizer_and_scheduler", "(", "\n", "self", ",", "\n", "model", ",", "\n", "optim", "=", "\"adamw\"", ",", "\n", "optim_kwargs", "=", "dict", "(", ")", ",", "\n", "lr_scheduler", "=", "\"constant\"", ",", "\n", "lr_scheduler_kwargs", "=", "dict", "(", ")", "\n", ")", ":", "\n", "        ", "if", "\"lr\"", "not", "in", "optim_kwargs", ":", "\n", "            ", "optim_kwargs", "[", "\"lr\"", "]", "=", "self", ".", "training_args", ".", "learning_rate", "\n", "", "if", "\"weight_decay\"", "not", "in", "optim_kwargs", ":", "\n", "            ", "optim_kwargs", "[", "\"weight_decay\"", "]", "=", "self", ".", "training_args", ".", "weight_decay", "\n", "", "if", "optim", "==", "\"adamw\"", "and", "\"adam_epsilon\"", "not", "in", "optim_kwargs", ":", "\n", "            ", "optim_kwargs", "[", "\"adam_epsilon\"", "]", "=", "self", ".", "training_args", ".", "adam_epsilon", "\n", "\n", "", "optimizer", "=", "build_optimizer", "(", "model", ",", "optim", ",", "**", "optim_kwargs", ")", "\n", "\n", "if", "lr_scheduler", "!=", "\"constant\"", ":", "\n", "            ", "try", ":", "\n", "                ", "t_total", "=", "self", ".", "t_total", "\n", "", "except", ":", "\n", "                ", "t_total", "=", "-", "1", "\n", "", "if", "\"num_training_steps\"", "not", "in", "lr_scheduler_kwargs", ":", "\n", "                ", "lr_scheduler_kwargs", "[", "\"num_training_steps\"", "]", "=", "t_total", "\n", "", "if", "\"warmup_steps\"", "not", "in", "lr_scheduler_kwargs", ":", "\n", "                ", "lr_scheduler_kwargs", "[", "\"warmup_steps\"", "]", "=", "self", ".", "training_args", ".", "warmup_steps", "\n", "\n", "", "", "lr_scheduler", "=", "build_lr_scheduler", "(", "optimizer", ",", "lr_scheduler", ",", "**", "lr_scheduler_kwargs", ")", "\n", "\n", "return", "optimizer", ",", "lr_scheduler", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.model_optim_config": [[248, 251], ["None"], "methods", ["None"], ["", "@", "model_optim_config", ".", "setter", "\n", "def", "model_optim_config", "(", "self", ",", "optim_config", ")", ":", "\n", "        ", "self", ".", "_model_optim_config", "=", "optim_config", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.extended_optim_config_dict": [[256, 259], ["None"], "methods", ["None"], ["", "@", "extended_optim_config_dict", ".", "setter", "\n", "def", "extended_optim_config_dict", "(", "self", ",", "optim_config_dict", ")", ":", "\n", "        ", "self", ".", "_extended_optim_config_dict", "=", "optim_config_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.configure_optimization": [[260, 283], ["hasattr", "optim_config_dict.items", "extended.items", "train.BaseTrainer.get_optimizer_and_scheduler", "train.BaseTrainer.register_optim_and_scheduler", "ValueError", "item.get", "item.get", "dict", "dict"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.get_optimizer_and_scheduler", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.register_optim_and_scheduler"], ["", "def", "configure_optimization", "(", "self", ")", ":", "\n", "        ", "optim_config_dict", "=", "{", "\"model\"", ":", "self", ".", "model_optim_config", "}", "\n", "if", "hasattr", "(", "self", ",", "\"extended_optim_config_dict\"", ")", ":", "\n", "            ", "extended", "=", "self", ".", "extended_optim_config_dict", "\n", "", "else", ":", "\n", "            ", "extended", "=", "None", "\n", "", "if", "extended", "is", "not", "None", ":", "\n", "            ", "for", "name", ",", "item", "in", "extended", ".", "items", "(", ")", ":", "\n", "                ", "if", "name", "==", "\"model\"", ":", "\n", "                    ", "raise", "ValueError", "(", "\n", "\"The name 'model' is reserved for optimization\"", "\n", ")", "\n", "", "optim_config_dict", "[", "name", "]", "=", "item", "\n", "\n", "", "", "for", "name", ",", "item", "in", "optim_config_dict", ".", "items", "(", ")", ":", "\n", "            ", "optim", ",", "lr_scheduler", "=", "self", ".", "get_optimizer_and_scheduler", "(", "\n", "item", "[", "name", "]", ",", "\n", "optim", "=", "item", "[", "\"optim\"", "]", ",", "\n", "optim_kwargs", "=", "item", ".", "get", "(", "\"optim_kwargs\"", ",", "dict", "(", ")", ")", ",", "\n", "lr_scheduler", "=", "item", "[", "\"lr_scheduler\"", "]", ",", "\n", "lr_scheduler_kwargs", "=", "item", ".", "get", "(", "\"lr_scheduler_kwargs\"", ",", "dict", "(", ")", ")", "\n", ")", "\n", "self", ".", "register_optim_and_scheduler", "(", "name", "=", "name", ",", "optim", "=", "optim", ",", "sched", "=", "lr_scheduler", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.get_last_lr": [[284, 290], ["dict", "train.BaseTrainer._scheds[].get_last_lr"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.get_last_lr"], ["", "", "def", "get_last_lr", "(", "self", ",", "names", "=", "[", "\"model\"", "]", ")", ":", "\n", "        ", "last_lrs", "=", "dict", "(", ")", "\n", "for", "name", "in", "names", ":", "\n", "            ", "if", "self", ".", "_scheds", "[", "name", "]", "is", "not", "None", ":", "\n", "                ", "last_lrs", "[", "name", "]", "=", "self", ".", "_scheds", "[", "name", "]", ".", "get_last_lr", "(", ")", "[", "0", "]", "\n", "", "", "return", "last_lrs", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.model_to_gpu": [[291, 296], ["torch.DataParallel.to", "torch.DataParallel", "torch.DataParallel"], "methods", ["None"], ["", "def", "model_to_gpu", "(", "self", ",", "model", ")", ":", "\n", "        ", "if", "self", ".", "n_gpu", ">", "1", ":", "\n", "            ", "model", "=", "nn", ".", "DataParallel", "(", "model", ")", "\n", "", "model", ".", "to", "(", "self", ".", "device", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.update_lr": [[297, 303], ["list", "train.BaseTrainer._scheds.keys", "train.BaseTrainer._scheds[].step"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.modules.grl.WarmStartGradientReverseLayer.step"], ["", "def", "update_lr", "(", "self", ",", "names", "=", "None", ")", ":", "\n", "        ", "if", "names", "is", "None", ":", "\n", "            ", "names", "=", "list", "(", "self", ".", "_scheds", ".", "keys", "(", ")", ")", "\n", "", "for", "name", "in", "names", ":", "\n", "            ", "if", "self", ".", "_scheds", "[", "name", "]", "is", "not", "None", ":", "\n", "                ", "self", ".", "_scheds", "[", "name", "]", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.model_zero_grad": [[304, 309], ["list", "train.BaseTrainer._optims[].zero_grad", "train.BaseTrainer._optims.keys"], "methods", ["None"], ["", "", "", "def", "model_zero_grad", "(", "self", ",", "names", "=", "None", ")", ":", "\n", "        ", "if", "names", "is", "None", ":", "\n", "            ", "names", "=", "list", "(", "self", ".", "_optims", ".", "keys", "(", ")", ")", "\n", "", "for", "name", "in", "names", ":", "\n", "            ", "self", ".", "_optims", "[", "name", "]", ".", "zero_grad", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.model_backward": [[310, 314], ["train.BaseTrainer.adjust_loss", "train.BaseTrainer.detect_anomaly", "train.BaseTrainer.backward"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.adjust_loss", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.detect_anomaly", "home.repos.pwc.inspect_result.suamin_t2ner.modules.grl.GradientReverseFunction.backward"], ["", "", "def", "model_backward", "(", "self", ",", "loss", ",", "retain_graph", "=", "False", ")", ":", "\n", "        ", "loss", "=", "self", ".", "adjust_loss", "(", "loss", ")", "\n", "self", ".", "detect_anomaly", "(", "loss", ")", "\n", "loss", ".", "backward", "(", "retain_graph", "=", "retain_graph", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.model_update": [[315, 320], ["list", "train.BaseTrainer._optims[].step", "train.BaseTrainer._optims.keys"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.modules.grl.WarmStartGradientReverseLayer.step"], ["", "def", "model_update", "(", "self", ",", "names", "=", "None", ")", ":", "\n", "        ", "if", "names", "is", "None", ":", "\n", "            ", "names", "=", "list", "(", "self", ".", "_optims", ".", "keys", "(", ")", ")", "\n", "", "for", "name", "in", "names", ":", "\n", "            ", "self", ".", "_optims", "[", "name", "]", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.model_backward_and_update": [[321, 327], ["train.BaseTrainer.model_backward", "train.BaseTrainer.adjust_loss", "train.BaseTrainer.model_update", "train.BaseTrainer.update_lr", "train.BaseTrainer.model_zero_grad"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.model_backward", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.adjust_loss", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.model_update", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.update_lr", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.model_zero_grad"], ["", "", "def", "model_backward_and_update", "(", "self", ",", "loss", ",", "names", "=", "None", ",", "retain_graph", "=", "False", ")", ":", "\n", "        ", "self", ".", "model_backward", "(", "self", ".", "adjust_loss", "(", "loss", ")", ",", "retain_graph", ")", "\n", "if", "self", ".", "is_update_step", ":", "\n", "            ", "self", ".", "model_update", "(", "names", ")", "\n", "self", ".", "update_lr", "(", "names", ")", "\n", "self", ".", "model_zero_grad", "(", "names", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.detect_anomaly": [[328, 331], ["torch.isfinite().all", "torch.isfinite().all", "torch.isfinite().all", "torch.isfinite().all", "FloatingPointError", "torch.isfinite", "torch.isfinite", "torch.isfinite", "torch.isfinite"], "methods", ["None"], ["", "", "def", "detect_anomaly", "(", "self", ",", "loss", ")", ":", "\n", "        ", "if", "not", "torch", ".", "isfinite", "(", "loss", ")", ".", "all", "(", ")", ":", "\n", "            ", "raise", "FloatingPointError", "(", "\"Loss is infinite or NaN!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.adjust_loss": [[332, 338], ["loss.mean.mean.mean"], "methods", ["None"], ["", "", "def", "adjust_loss", "(", "self", ",", "loss", ")", ":", "\n", "        ", "if", "self", ".", "n_gpu", ">", "1", ":", "\n", "            ", "loss", "=", "loss", ".", "mean", "(", ")", "\n", "", "if", "self", ".", "training_args", ".", "gradient_accumulation_steps", ">", "1", ":", "\n", "            ", "loss", "/=", "self", ".", "training_args", ".", "gradient_accumulation_steps", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.joint_loss": [[339, 373], ["list", "sum", "list", "isinstance", "isinstance", "list.append", "isinstance", "isinstance", "list.append", "sum", "len", "len"], "methods", ["None"], ["", "def", "joint_loss", "(", "self", ",", "main_losses", ",", "aux_losses", "=", "None", ",", "lmbda", "=", "1.0", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "main_losses", ",", "list", ")", ":", "\n", "            ", "main_losses", "=", "[", "main_losses", ",", "]", "\n", "\n", "", "temp_losses", "=", "list", "(", ")", "\n", "for", "l", "in", "main_losses", ":", "\n", "            ", "if", "isinstance", "(", "l", ",", "tuple", ")", ":", "\n", "                ", "l", ",", "scale", "=", "l", "\n", "", "else", ":", "\n", "                ", "scale", "=", "1.", "/", "len", "(", "main_losses", ")", "\n", "", "l", "*=", "scale", "\n", "temp_losses", ".", "append", "(", "l", ")", "\n", "\n", "", "loss", "=", "sum", "(", "temp_losses", ")", "\n", "\n", "if", "aux_losses", "is", "None", ":", "\n", "            ", "aux_losses", "=", "[", "]", "\n", "", "if", "not", "isinstance", "(", "aux_losses", ",", "list", ")", ":", "\n", "            ", "aux_losses", "=", "[", "aux_losses", "]", "\n", "\n", "", "temp_losses", "=", "list", "(", ")", "\n", "for", "l", "in", "aux_losses", ":", "\n", "            ", "if", "isinstance", "(", "l", ",", "tuple", ")", ":", "\n", "                ", "l", ",", "scale", "=", "l", "\n", "", "else", ":", "\n", "                ", "scale", "=", "1.", "/", "len", "(", "aux_losses", ")", "\n", "", "l", "*=", "scale", "\n", "temp_losses", ".", "append", "(", "l", ")", "\n", "\n", "", "if", "temp_losses", ":", "\n", "            ", "aux_loss", "=", "lmbda", "*", "sum", "(", "temp_losses", ")", "\n", "loss", "+=", "aux_loss", "\n", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.clip_grad_norm_": [[374, 376], ["torch.utils.clip_grad_norm_", "torch.utils.clip_grad_norm_"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.clip_grad_norm_", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.clip_grad_norm_"], ["", "def", "clip_grad_norm_", "(", "self", ",", "params", ")", ":", "\n", "        ", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "params", ",", "self", ".", "training_args", ".", "max_grad_norm", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.set_common_train_attr": [[377, 387], ["int", "tqdm.tqdm.trange", "list", "list", "list"], "methods", ["None"], ["", "def", "set_common_train_attr", "(", "self", ")", ":", "\n", "        ", "self", ".", "global_step", "=", "0", "\n", "self", ".", "num_batches_seen", "=", "0", "\n", "self", ".", "best_metric", "=", "None", "\n", "num_train_epochs", "=", "int", "(", "self", ".", "training_args", ".", "num_train_epochs", ")", "\n", "self", ".", "train_iterator", "=", "trange", "(", "0", ",", "num_train_epochs", ",", "desc", "=", "\"Epoch\"", ")", "\n", "self", ".", "stats", "=", "{", "\n", "\"batch_train_loss\"", ":", "list", "(", ")", ",", "\n", "\"epoch\"", ":", "list", "(", ")", ",", "\n", "\"step_eval_log\"", ":", "list", "(", ")", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.load_train_data": [[389, 396], ["hasattr", "train.BaseTrainer.data.get_train_data", "len"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.data.multi_dataset.MultiData.get_train_data"], ["", "def", "load_train_data", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "assert", "hasattr", "(", "self", ",", "\"data\"", ")", ",", "\"Can't find data source to load from\"", "\n", "train_data", "=", "self", ".", "data", ".", "get_train_data", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "assert", "len", "(", "train_data", ")", "==", "3", ",", "\"Expected a tuple of 3\"", "\n", "self", ".", "train_data", "=", "train_data", "[", "0", "]", "\n", "self", ".", "train_dataloader_length", "=", "train_data", "[", "1", "]", "\n", "self", ".", "num_train_examples", "=", "train_data", "[", "2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.load_eval_data": [[397, 426], ["list", "hasattr", "set.update", "sorted", "hasattr", "hasattr", "train.BaseTrainer.data.get_eval_and_test_dataloaders", "set", "set", "list"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.data.multi_dataset.MultiData.get_eval_and_test_dataloaders"], ["", "def", "load_eval_data", "(", "self", ",", "train_datasets", "=", "list", "(", ")", ")", ":", "\n", "        ", "assert", "hasattr", "(", "self", ",", "\"data\"", ")", ",", "\"Can't find data source to load from\"", "\n", "# Additional dev, test, zero-shot datasets go here and will not be used for training", "\n", "# NOTE ``self.validation_datasets`` is the collection used for tracking best model", "\n", "eval_datasets", "=", "self", ".", "exp_args", ".", "eval_datasets", "\n", "if", "eval_datasets", "is", "None", ":", "\n", "            ", "eval_datasets", "=", "set", "(", ")", "\n", "", "else", ":", "\n", "            ", "eval_datasets", "=", "set", "(", "eval_datasets", ")", "\n", "", "eval_datasets", ".", "update", "(", "train_datasets", ")", "\n", "eval_datasets", "=", "sorted", "(", "list", "(", "eval_datasets", ")", ")", "\n", "\n", "# Following two arguments only matter in multi-datasets setting", "\n", "if", "hasattr", "(", "self", ".", "exp_args", ",", "\"use_all_shared_clf\"", ")", ":", "\n", "            ", "all_shared", "=", "self", ".", "exp_args", ".", "use_all_shared_clf", "\n", "", "else", ":", "\n", "            ", "all_shared", "=", "False", "\n", "", "if", "hasattr", "(", "self", ".", "exp_args", ",", "\"use_private_clf\"", ")", ":", "\n", "            ", "private", "=", "self", ".", "exp_args", ".", "use_private_clf", "\n", "", "else", ":", "\n", "            ", "private", "=", "False", "\n", "\n", "# Both are mappings of dataset unique name to NERDataset and the id2label", "\n", "", "self", ".", "eval_data", ",", "self", ".", "test_data", "=", "self", ".", "data", ".", "get_eval_and_test_dataloaders", "(", "\n", "eval_datasets", ",", "\n", "do_eval", "=", "self", ".", "training_args", ".", "do_eval", ",", "\n", "do_predict", "=", "self", ".", "training_args", ".", "do_predict", ",", "\n", "all_shared", "=", "all_shared", ",", "\n", "private", "=", "private", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.load_data": [[428, 431], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "load_data", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.batch_to_device": [[432, 435], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "batch_to_device", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.before_epoch": [[436, 438], ["None"], "methods", ["None"], ["", "def", "before_epoch", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.run_epoch": [[439, 442], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "run_epoch", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.after_epoch": [[443, 458], ["train.BaseTrainer.run_eval", "list", "train.BaseTrainer.keys", "train.BaseTrainer.stats[].append", "train.BaseTrainer.check_and_save_best_model", "list.append"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.run_eval", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.check_and_save_best_model"], ["", "def", "after_epoch", "(", "self", ")", ":", "\n", "        ", "model", "=", "self", ".", "_models", "[", "\"model\"", "]", "\n", "if", "self", ".", "training_args", ".", "evaluate_during_training", ":", "\n", "            ", "results", "=", "self", ".", "run_eval", "(", "\n", "model", ",", "\n", "loss_only", "=", "False", ",", "\n", "save_predictions", "=", "False", ",", "\n", "verbose", "=", "True", ",", "\n", "eval_datasets", "=", "self", ".", "validation_datasets", "\n", ")", "\n", "results_list", "=", "list", "(", ")", "\n", "for", "name", "in", "results", ".", "keys", "(", ")", ":", "\n", "                ", "results_list", ".", "append", "(", "results", "[", "name", "]", ")", "\n", "", "self", ".", "stats", "[", "\"epoch\"", "]", ".", "append", "(", "results_list", ")", "\n", "self", ".", "check_and_save_best_model", "(", "model", ",", "results", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.before_train": [[459, 462], ["None"], "methods", ["None"], ["", "", "@", "abstractmethod", "\n", "def", "before_train", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.train": [[463, 484], ["train.BaseTrainer.set_common_train_attr", "train.BaseTrainer.before_train_log", "train.BaseTrainer._models.items", "train.BaseTrainer.dump_stats", "train.BaseTrainer.model_to_gpu", "tqdm.tqdm.trange", "len", "train.BaseTrainer.before_epoch", "train.BaseTrainer.run_epoch", "train.BaseTrainer.after_epoch", "train.BaseTrainer.train_iterator.close"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.set_common_train_attr", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.before_train_log", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.dump_stats", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.model_to_gpu", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.before_epoch", "home.repos.pwc.inspect_result.suamin_t2ner.semisupervised_learning.entmin.EntMinTrainer.run_epoch", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.after_epoch"], ["", "def", "train", "(", "self", ")", ":", "\n", "        ", "self", ".", "set_common_train_attr", "(", ")", "\n", "self", ".", "before_train_log", "(", "self", ".", "total_train_batch_size", ",", "self", ".", "t_total", ")", "\n", "for", "name", ",", "model", "in", "self", ".", "_models", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "_models", "[", "name", "]", "=", "self", ".", "model_to_gpu", "(", "model", ")", "\n", "\n", "", "for", "self", ".", "epoch", "in", "self", ".", "train_iterator", ":", "\n", "            ", "self", ".", "epoch_iterator", "=", "trange", "(", "0", ",", "self", ".", "train_dataloader_length", ",", "desc", "=", "\"Iteration\"", ")", "\n", "self", ".", "num_batches", "=", "len", "(", "self", ".", "epoch_iterator", ")", "\n", "\n", "self", ".", "before_epoch", "(", ")", "\n", "self", ".", "run_epoch", "(", ")", "\n", "self", ".", "after_epoch", "(", ")", "\n", "\n", "if", "self", ".", "is_max_step", ":", "\n", "                ", "self", ".", "train_iterator", ".", "close", "(", ")", "\n", "break", "\n", "\n", "", "", "self", ".", "dump_stats", "(", "self", ".", "stats", ")", "\n", "\n", "return", "self", ".", "global_step", ",", "self", ".", "stats", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.register_model_validation_datasets": [[485, 489], ["isinstance"], "methods", ["None"], ["", "def", "register_model_validation_datasets", "(", "self", ",", "unique_names", ")", ":", "\n", "        ", "if", "isinstance", "(", "unique_names", ",", "str", ")", ":", "\n", "            ", "unique_names", "=", "[", "unique_names", ",", "]", "\n", "", "self", ".", "validation_datasets", "=", "unique_names", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.before_train_log": [[490, 507], ["evaluate.logger.info", "evaluate.logger.info", "evaluate.logger.info", "evaluate.logger.info", "evaluate.logger.info", "evaluate.logger.info", "evaluate.logger.info"], "methods", ["None"], ["", "def", "before_train_log", "(", "self", ",", "total_train_batch_size", ",", "t_total", "=", "-", "1", ")", ":", "\n", "        ", "logger", ".", "info", "(", "\"***** Running training *****\"", ")", "\n", "logger", ".", "info", "(", "\"  Num examples = %d\"", ",", "self", ".", "num_train_examples", ")", "\n", "logger", ".", "info", "(", "\"  Num Epochs = %d\"", ",", "self", ".", "training_args", ".", "num_train_epochs", ")", "\n", "logger", ".", "info", "(", "\n", "\"  Instantaneous batch size per device = %d\"", ",", "\n", "self", ".", "training_args", ".", "per_device_train_batch_size", "\n", ")", "\n", "logger", ".", "info", "(", "\n", "\"  Total train batch size (w. parallel & accumulation) = %d\"", ",", "\n", "total_train_batch_size", "\n", ")", "\n", "logger", ".", "info", "(", "\n", "\"  Gradient Accumulation steps = %d\"", ",", "\n", "self", ".", "training_args", ".", "gradient_accumulation_steps", "\n", ")", "\n", "logger", ".", "info", "(", "\"  Total optimization steps = %d\"", ",", "t_total", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.do_logging_step": [[508, 517], ["train.BaseTrainer.log", "train.BaseTrainer.run_eval", "train.BaseTrainer.stats[].append", "train.BaseTrainer.check_and_save_best_model"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.log", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.run_eval", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.check_and_save_best_model"], ["", "def", "do_logging_step", "(", "self", ",", "model", ",", "logs", ",", "evaluate", "=", "False", ")", ":", "\n", "        ", "if", "self", ".", "training_args", ".", "logging_steps", ">", "0", "and", "self", ".", "global_step", "%", "self", ".", "training_args", ".", "logging_steps", "==", "0", "and", "self", ".", "global_step", ">", "1", ":", "\n", "            ", "self", ".", "log", "(", "logs", ")", "\n", "if", "self", ".", "training_args", ".", "evaluate_during_training", "and", "evaluate", ":", "\n", "                ", "results", "=", "self", ".", "run_eval", "(", "model", ",", "eval_datasets", "=", "self", ".", "validation_datasets", ")", "\n", "self", ".", "stats", "[", "\"step_eval_log\"", "]", ".", "append", "(", "results", ")", "\n", "self", ".", "check_and_save_best_model", "(", "model", ",", "results", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.do_save_step": [[518, 528], ["os.path.join", "train.BaseTrainer.save_model"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.t2ner.base.TrainInferenceUtils.save_model"], ["", "", "", "def", "do_save_step", "(", "self", ",", "model", ")", ":", "\n", "        ", "if", "self", ".", "training_args", ".", "save_steps", ">", "0", "and", "self", ".", "global_step", "%", "self", ".", "training_args", ".", "save_steps", "==", "0", "and", "self", ".", "global_step", ">", "1", ":", "\n", "# Save model checkpoint", "\n", "            ", "output_dir", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "training_args", ".", "output_dir", ",", "\n", "\"checkpoint-{}\"", ".", "format", "(", "self", ".", "global_step", ")", "\n", ")", "\n", "self", ".", "save_model", "(", "model", ",", "output_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.log": [[529, 533], ["evaluate.logger.info", "sorted", "logs.keys", "evaluate.logger.info", "str"], "methods", ["None"], ["", "", "def", "log", "(", "self", ",", "logs", ")", ":", "\n", "        ", "logger", ".", "info", "(", "\"***** Training log *****\"", ")", "\n", "for", "key", "in", "sorted", "(", "logs", ".", "keys", "(", ")", ")", ":", "\n", "            ", "logger", ".", "info", "(", "\"  %s = %s\"", ",", "key", ",", "str", "(", "logs", "[", "key", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.dump_stats": [[534, 538], ["os.path.join", "open", "json.dump"], "methods", ["None"], ["", "", "def", "dump_stats", "(", "self", ",", "stats", ")", ":", "\n", "        ", "stats_json_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "training_args", ".", "output_dir", ",", "\"stats.json\"", ")", "\n", "with", "open", "(", "stats_json_file", ",", "\"w\"", ")", "as", "wf", ":", "\n", "            ", "json", ".", "dump", "(", "stats", ",", "wf", ",", "indent", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.check_and_save_best_model": [[539, 562], ["list", "list.append", "sum", "len", "os.path.join", "train.BaseTrainer.save_model", "train.BaseTrainer.evaluator.save_results"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.t2ner.base.TrainInferenceUtils.save_model", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.evaluate.Evaluator.save_results"], ["", "", "def", "check_and_save_best_model", "(", "self", ",", "model", ",", "results", ")", ":", "\n", "        ", "eval_metric", "=", "list", "(", ")", "\n", "for", "unique_name", "in", "results", ":", "\n", "            ", "eval_metric", ".", "append", "(", "results", "[", "unique_name", "]", "[", "self", ".", "model_args", ".", "valid_metric", "]", ")", "\n", "", "eval_metric", "=", "sum", "(", "eval_metric", ")", "/", "len", "(", "eval_metric", ")", "\n", "\n", "if", "self", ".", "best_metric", "is", "None", ":", "\n", "            ", "self", ".", "best_metric", "=", "eval_metric", "\n", "\n", "# Save best checkpoint", "\n", "", "if", "self", ".", "model_args", ".", "valid_metric", "==", "\"loss\"", ":", "\n", "            ", "flag", "=", "eval_metric", "<=", "self", ".", "best_metric", "\n", "", "else", ":", "\n", "            ", "flag", "=", "eval_metric", ">=", "self", ".", "best_metric", "\n", "\n", "", "if", "flag", ":", "\n", "            ", "best_output_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "training_args", ".", "output_dir", ",", "\"best\"", ")", "\n", "self", ".", "save_model", "(", "model", ",", "best_output_dir", ")", "\n", "for", "unique_name", "in", "results", ":", "\n", "                ", "self", ".", "evaluator", ".", "save_results", "(", "\n", "results", "[", "unique_name", "]", ",", "best_output_dir", ",", "unique_name", ",", "\"dev\"", "\n", ")", "\n", "", "self", ".", "best_metric", "=", "eval_metric", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.run_eval": [[563, 588], ["kwargs.get", "kwargs.get", "train.BaseTrainer.evaluator.run_eval_on_collection", "kwargs.pop", "kwargs.pop", "train.BaseTrainer.eval_data.items"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.t2ner.evaluate.Evaluator.run_eval_on_collection"], ["", "", "def", "run_eval", "(", "self", ",", "model", ",", "**", "kwargs", ")", ":", "\n", "        ", "output_dir", "=", "kwargs", ".", "get", "(", "\"output_dir\"", ",", "self", ".", "training_args", ".", "output_dir", ")", "\n", "eval_datasets", "=", "kwargs", ".", "get", "(", "\"eval_datasets\"", ",", "None", ")", "\n", "if", "eval_datasets", "is", "not", "None", ":", "\n", "            ", "eval_data", "=", "{", "\n", "unique_name", ":", "data", "\n", "for", "unique_name", ",", "data", "in", "self", ".", "eval_data", ".", "items", "(", ")", "\n", "if", "unique_name", "in", "eval_datasets", "\n", "}", "\n", "for", "unique_name", "in", "eval_datasets", ":", "\n", "                ", "shared_unique_name", "=", "unique_name", "+", "\".shared\"", "\n", "if", "shared_unique_name", "in", "self", ".", "eval_data", ":", "\n", "                    ", "eval_data", "[", "shared_unique_name", "]", "=", "self", ".", "eval_data", "[", "shared_unique_name", "]", "\n", "", "", "", "else", ":", "\n", "            ", "eval_data", "=", "self", ".", "eval_data", "\n", "", "results", "=", "self", ".", "evaluator", ".", "run_eval_on_collection", "(", "\n", "model", "=", "model", ",", "\n", "collection", "=", "eval_data", ",", "\n", "output_dir", "=", "output_dir", ",", "\n", "split", "=", "\"dev\"", ",", "\n", "input_dir", "=", "self", ".", "exp_args", ".", "preprocessed_data_dir", ",", "\n", "loss_only", "=", "kwargs", ".", "pop", "(", "\"loss_only\"", ",", "False", ")", ",", "\n", "save_predictions", "=", "kwargs", ".", "pop", "(", "\"save_predictions\"", ",", "False", ")", "\n", ")", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.run_predict": [[589, 602], ["kwargs.get", "train.BaseTrainer.evaluator.run_eval_on_collection", "kwargs.pop", "kwargs.pop", "kwargs.pop"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.t2ner.evaluate.Evaluator.run_eval_on_collection"], ["", "def", "run_predict", "(", "self", ",", "model", ",", "**", "kwargs", ")", ":", "\n", "        ", "output_dir", "=", "kwargs", ".", "get", "(", "\"output_dir\"", ",", "self", ".", "training_args", ".", "output_dir", ")", "\n", "results", "=", "self", ".", "evaluator", ".", "run_eval_on_collection", "(", "\n", "model", "=", "model", ",", "\n", "collection", "=", "self", ".", "test_data", ",", "\n", "output_dir", "=", "output_dir", ",", "\n", "split", "=", "\"test\"", ",", "\n", "input_dir", "=", "self", ".", "exp_args", ".", "preprocessed_data_dir", ",", "\n", "loss_only", "=", "kwargs", ".", "pop", "(", "\"loss_only\"", ",", "False", ")", ",", "\n", "predict_only", "=", "kwargs", ".", "pop", "(", "\"predict_only\"", ",", "False", ")", ",", "\n", "save_predictions", "=", "kwargs", ".", "pop", "(", "\"save_predictions\"", ",", "True", ")", "\n", ")", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.eval_and_test_checkpoints": [[603, 618], ["os.path.join", "os.path.exists", "checkpoints.append"], "methods", ["None"], ["", "def", "eval_and_test_checkpoints", "(", "self", ")", ":", "\n", "# Initialization for evaluation", "\n", "        ", "if", "self", ".", "model_args", ".", "init_checkpoint", ":", "\n", "            ", "checkpoint", "=", "self", ".", "model_args", ".", "init_checkpoint", "\n", "", "else", ":", "\n", "            ", "checkpoint", "=", "self", ".", "training_args", ".", "output_dir", "\n", "\n", "", "best_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "training_args", ".", "output_dir", ",", "\"best\"", ")", "\n", "checkpoints", "=", "[", "checkpoint", "]", "\n", "\n", "# Check for best checkpoint and add it as well", "\n", "if", "os", ".", "path", ".", "exists", "(", "best_path", ")", "and", "best_path", "!=", "checkpoint", ":", "\n", "            ", "checkpoints", ".", "append", "(", "best_path", ")", "\n", "\n", "", "return", "checkpoints", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.do_eval": [[619, 630], ["train.BaseTrainer.eval_and_test_checkpoints", "evaluate.logger.info", "train.BaseTrainer.load_or_create_model", "train.BaseTrainer.model_to_gpu", "train.BaseTrainer.run_eval", "time.sleep"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.eval_and_test_checkpoints", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.base.TrainInferenceUtils.load_or_create_model", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.model_to_gpu", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.run_eval"], ["", "def", "do_eval", "(", "self", ",", "model_class", ")", ":", "\n", "        ", "if", "not", "self", ".", "training_args", ".", "do_eval", ":", "\n", "            ", "return", "\n", "\n", "", "checkpoints", "=", "self", ".", "eval_and_test_checkpoints", "(", ")", "\n", "for", "ckpt", "in", "checkpoints", ":", "\n", "            ", "logger", ".", "info", "(", "\"Evaluate the following checkpoint: %s\"", ",", "ckpt", ")", "\n", "model", "=", "self", ".", "load_or_create_model", "(", "model_class", ",", "init_checkpoint", "=", "ckpt", ")", "\n", "model", "=", "self", ".", "model_to_gpu", "(", "model", ")", "\n", "self", ".", "run_eval", "(", "model", ",", "output_dir", "=", "ckpt", ")", "\n", "time", ".", "sleep", "(", "3", ")", "# give user time to read the screen", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.do_predict": [[631, 642], ["train.BaseTrainer.eval_and_test_checkpoints", "evaluate.logger.info", "train.BaseTrainer.load_or_create_model", "train.BaseTrainer.model_to_gpu", "train.BaseTrainer.run_predict", "time.sleep"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.eval_and_test_checkpoints", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.base.TrainInferenceUtils.load_or_create_model", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.model_to_gpu", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.run_predict"], ["", "", "def", "do_predict", "(", "self", ",", "model_class", ")", ":", "\n", "        ", "if", "not", "self", ".", "training_args", ".", "do_predict", ":", "\n", "            ", "return", "\n", "\n", "", "checkpoints", "=", "self", ".", "eval_and_test_checkpoints", "(", ")", "\n", "for", "ckpt", "in", "checkpoints", ":", "\n", "            ", "logger", ".", "info", "(", "\"Predicting with the following checkpoint: %s\"", ",", "ckpt", ")", "\n", "model", "=", "self", ".", "load_or_create_model", "(", "model_class", ",", "init_checkpoint", "=", "ckpt", ")", "\n", "model", "=", "self", ".", "model_to_gpu", "(", "model", ")", "\n", "self", ".", "run_predict", "(", "model", ",", "output_dir", "=", "ckpt", ",", "loss_only", "=", "False", ",", "save_predictions", "=", "True", ")", "\n", "time", ".", "sleep", "(", "3", ")", "# give user time to read the screen", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.do_train": [[643, 687], ["train.BaseTrainer.load_or_create_model", "hasattr", "train.BaseTrainer.before_train", "evaluate.logger.info", "train.BaseTrainer.train", "evaluate.logger.info", "evaluate.logger.info", "time.sleep", "train.BaseTrainer.save_model", "hasattr", "train.BaseTrainer.xnet_class", "train.BaseTrainer.add_xnet", "sum", "dict"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.t2ner.base.TrainInferenceUtils.load_or_create_model", "home.repos.pwc.inspect_result.suamin_t2ner.semisupervised_learning.entmin.EntMinTrainer.before_train", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.train", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.base.TrainInferenceUtils.save_model", "home.repos.pwc.inspect_result.suamin_t2ner.models.base.TransformersUtils.add_xnet"], ["", "", "def", "do_train", "(", "self", ",", "model_class", ")", ":", "\n", "        ", "if", "not", "self", ".", "training_args", ".", "do_train", ":", "\n", "            ", "return", "\n", "\n", "", "model", "=", "self", ".", "load_or_create_model", "(", "\n", "model_class", "=", "model_class", ",", "\n", "model_name_or_path", "=", "self", ".", "model_args", ".", "model_name_or_path", ",", "\n", "init_checkpoint", "=", "self", ".", "model_args", ".", "init_checkpoint", ",", "\n", "**", "self", ".", "config_kwargs", "\n", ")", "\n", "\n", "# Add extra network layers between encoder and classifier(s)", "\n", "if", "hasattr", "(", "self", ",", "\"xnet_class\"", ")", ":", "\n", "            ", "if", "hasattr", "(", "self", ",", "\"xnet_kwargs\"", ")", ":", "\n", "                ", "xnet_kwargs", "=", "self", ".", "xnet_kwargs", "\n", "", "else", ":", "\n", "                ", "xnet_kwargs", "=", "dict", "(", ")", "\n", "", "xnet", "=", "self", ".", "xnet_class", "(", "model", ".", "config", ",", "**", "xnet_kwargs", ")", "\n", "model", ".", "add_xnet", "(", "xnet", ")", "\n", "\n", "", "self", ".", "model", "=", "model", "\n", "self", ".", "before_train", "(", ")", "\n", "\n", "logger", ".", "info", "(", "\"Training/evaluation parameters %s\"", ",", "self", ".", "training_args", ")", "\n", "global_step", ",", "stats", "=", "self", ".", "train", "(", ")", "\n", "tr_loss", "=", "sum", "(", "stats", "[", "\"batch_train_loss\"", "]", ")", "/", "global_step", "\n", "logger", ".", "info", "(", "\n", "\"\\n\\nTraining completed. Do not forget to share your model on \"", "\n", "\"huggingface.co/models =)\\n\\n\"", "\n", ")", "\n", "logger", ".", "info", "(", "\" global_step = %s, tr_loss = %s\"", ",", "global_step", ",", "tr_loss", ")", "\n", "time", ".", "sleep", "(", "3", ")", "# give user time to read the screen", "\n", "\n", "self", ".", "save_model", "(", "\n", "model", "=", "self", ".", "model", ",", "\n", "output_dir", "=", "self", ".", "training_args", ".", "output_dir", ",", "\n", "training_args", "=", "self", ".", "training_args", ",", "\n", "model_args", "=", "self", ".", "model_args", ",", "\n", "exp_args", "=", "self", ".", "exp_args", "\n", ")", "\n", "# If training was started with initial checkpoint, we should", "\n", "# clear it so that evaluation (if any) can happen on now trained", "\n", "if", "self", ".", "model_args", ".", "init_checkpoint", ":", "\n", "            ", "self", ".", "model_args", ".", "init_checkpoint", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.run": [[688, 692], ["train.BaseTrainer.do_train", "train.BaseTrainer.do_eval", "train.BaseTrainer.do_predict"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.do_train", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.do_eval", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.do_predict"], ["", "", "def", "run", "(", "self", ",", "model_class", ")", ":", "\n", "        ", "self", ".", "do_train", "(", "model_class", ")", "\n", "self", ".", "do_eval", "(", "model_class", ")", "\n", "self", ".", "do_predict", "(", "model_class", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.preprocess.preprocess_one_file": [[25, 77], ["set", "os.path.exists", "print", "isinstance", "open", "open", "set", "line.strip.strip", "line.strip.split", "items[].strip", "set.add", "tokenizer.tokenize", "len", "fout.write", "len", "items[].strip", "fout.write", "fout.write", "fout.write", "items[].strip.split", "label.upper.upper"], "function", ["home.repos.pwc.inspect_result.suamin_t2ner.annotate.annotate.SentAnnObj.add"], ["def", "preprocess_one_file", "(", "infile", ",", "outfile", ",", "tokenizer", ",", "max_len", ",", "wikiann", "=", "False", ",", "wnut", "=", "False", ")", ":", "\n", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "infile", ")", ":", "\n", "        ", "print", "(", "\"{} does not exist\"", ".", "format", "(", "infile", ")", ")", "\n", "return", "0", ",", "set", "(", ")", "\n", "\n", "", "special_tokens_count", "=", "3", "if", "isinstance", "(", "tokenizer", ",", "XLMRobertaTokenizer", ")", "else", "2", "\n", "max_seq_len", "=", "max_len", "-", "special_tokens_count", "\n", "subword_len_counter", "=", "0", "\n", "labels", "=", "set", "(", ")", "\n", "\n", "with", "open", "(", "infile", ",", "\"r\"", ",", "encoding", "=", "\"utf-8\"", ",", "errors", "=", "\"ignore\"", ")", "as", "fin", ",", "open", "(", "outfile", ",", "\"w\"", ",", "encoding", "=", "\"utf-8\"", ",", "errors", "=", "\"ignore\"", ")", "as", "fout", ":", "\n", "\n", "         ", "for", "line", "in", "fin", ":", "\n", "            ", "line", "=", "line", ".", "strip", "(", ")", "\n", "if", "not", "line", ":", "\n", "                ", "fout", ".", "write", "(", "\"\\n\"", ")", "\n", "subword_len_counter", "=", "0", "\n", "continue", "\n", "\n", "", "items", "=", "line", ".", "split", "(", ")", "\n", "token", "=", "items", "[", "0", "]", ".", "strip", "(", ")", "\n", "\n", "if", "wikiann", ":", "\n", "                ", "token", "=", "token", ".", "split", "(", "\":\"", ")", "[", "1", "]", "# first is language code", "\n", "if", "token", "==", "\"\"", ":", "# : token", "\n", "                    ", "token", "=", "\":\"", "\n", "\n", "", "", "if", "len", "(", "items", ")", ">", "1", ":", "\n", "                ", "label", "=", "items", "[", "-", "1", "]", ".", "strip", "(", ")", "\n", "if", "wnut", ":", "\n", "                    ", "label", "=", "label", ".", "upper", "(", ")", "\n", "", "", "else", ":", "\n", "                ", "label", "=", "\"O\"", "\n", "\n", "", "labels", ".", "add", "(", "label", ")", "\n", "\n", "subword_tokens", "=", "tokenizer", ".", "tokenize", "(", "token", ")", "\n", "if", "not", "subword_tokens", ":", "\n", "                ", "continue", "\n", "", "current_subwords_len", "=", "len", "(", "subword_tokens", ")", "\n", "\n", "if", "(", "subword_len_counter", "+", "current_subwords_len", ")", ">=", "max_seq_len", ":", "\n", "                ", "fout", ".", "write", "(", "\"\\n\"", ")", "\n", "fout", ".", "write", "(", "\"{}\\t{}\\n\"", ".", "format", "(", "token", ",", "label", ")", ")", "\n", "subword_len_counter", "=", "current_subwords_len", "\n", "", "else", ":", "\n", "                ", "fout", ".", "write", "(", "\"{}\\t{}\\n\"", ".", "format", "(", "token", ",", "label", ")", ")", "\n", "subword_len_counter", "+=", "current_subwords_len", "\n", "\n", "", "", "", "return", "1", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.preprocess.preprocess": [[79, 125], ["transformers.AutoTokenizer.from_pretrained", "os.path.join", "args.languages.split", "os.path.exists", "os.makedirs", "os.path.join", "os.listdir", "dataset.split", "os.path.join", "set", "os.listdir", "os.path.join", "os.path.splitext", "os.path.join", "os.path.join", "preprocess.preprocess_one_file", "set.update", "os.path.exists", "open", "sorted", "os.path.exists", "print", "wf.write"], "function", ["home.repos.pwc.inspect_result.suamin_t2ner.models.multi_token_classification.AutoModelForMultiTokenClassification.from_pretrained", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.preprocess.preprocess_one_file"], ["", "def", "preprocess", "(", "args", ")", ":", "\n", "    ", "model_type", "=", "args", ".", "model_type", "\n", "tokenizer", "=", "AutoTokenizer", ".", "from_pretrained", "(", "\n", "args", ".", "model_name_or_path", ",", "do_lower_case", "=", "args", ".", "do_lower_case", ",", "\n", "cache_dir", "=", "args", ".", "cache_dir", "if", "args", ".", "cache_dir", "else", "None", "\n", ")", "\n", "output_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "args", ".", "model_name_or_path", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "output_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "output_dir", ")", "\n", "\n", "", "for", "lang", "in", "args", ".", "languages", ".", "split", "(", "\",\"", ")", ":", "\n", "        ", "lang_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data_dir", ",", "lang", ")", "\n", "# dataset: domain_datasetname", "\n", "for", "dataset", "in", "os", ".", "listdir", "(", "lang_dir", ")", ":", "\n", "            ", "domain", ",", "dataset_name", "=", "dataset", ".", "split", "(", "\"_\"", ")", "\n", "wikiann", "=", "dataset_name", "==", "\"wikiann\"", "\n", "wnut", "=", "dataset_name", "==", "\"wnut17\"", "\n", "final_dir", "=", "os", ".", "path", ".", "join", "(", "lang_dir", ",", "dataset", ")", "\n", "labels", "=", "set", "(", ")", "\n", "for", "file", "in", "os", ".", "listdir", "(", "final_dir", ")", ":", "\n", "                ", "fname", ",", "ext", "=", "os", ".", "path", ".", "splitext", "(", "file", ")", "\n", "if", "fname", "==", "\"extra\"", ":", "# sometimes appear in wikiann", "\n", "                    ", "continue", "\n", "", "if", "fname", "==", "\"valid\"", "or", "fname", "==", "\"devel\"", ":", "\n", "                    ", "split", "=", "\"dev\"", "\n", "", "else", ":", "\n", "                    ", "split", "=", "fname", "\n", "\n", "", "infile", "=", "os", ".", "path", ".", "join", "(", "final_dir", ",", "file", ")", "\n", "outfile", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "\"{}.{}.{}-{}\"", ".", "format", "(", "lang", ",", "domain", ",", "dataset_name", ",", "split", ")", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "outfile", ")", "and", "not", "args", ".", "overwrite_output_dir", ":", "\n", "                    ", "continue", "\n", "\n", "", "code", ",", "file_labels", "=", "preprocess_one_file", "(", "\n", "infile", ",", "outfile", ",", "tokenizer", ",", "args", ".", "max_len", ",", "wikiann", ",", "wnut", "\n", ")", "\n", "labels", ".", "update", "(", "file_labels", ")", "\n", "if", "code", ">", "0", ":", "\n", "                    ", "print", "(", "\"Finished preprocessing {}\"", ".", "format", "(", "outfile", ")", ")", "\n", "\n", "", "", "labels_file", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "\"{}.{}.{}.labels\"", ".", "format", "(", "lang", ",", "domain", ",", "dataset_name", ")", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "labels_file", ")", "and", "not", "args", ".", "overwrite_output_dir", ":", "\n", "                ", "continue", "\n", "", "with", "open", "(", "labels_file", ",", "\"w\"", ")", "as", "wf", ":", "\n", "                ", "for", "label", "in", "sorted", "(", "labels", ")", ":", "\n", "                    ", "wf", ".", "write", "(", "\"{}\\n\"", ".", "format", "(", "label", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.optim.lr_scheduler.build_lr_scheduler": [[11, 65], ["kwargs.get", "kwargs.get", "ValueError", "ValueError", "int", "ValueError", "transformers.optimization.get_constant_schedule_with_warmup", "transformers.optimization.get_constant_schedule", "transformers.optimization.get_linear_schedule_with_warmup", "isinstance", "kwargs.get", "transformers.optimization.get_cosine_schedule_with_warmup", "isinstance", "kwargs.get", "transformers.optimization.get_cosine_with_hard_restarts_schedule_with_warmup"], "function", ["None"], ["def", "build_lr_scheduler", "(", "optimizer", ",", "lr_scheduler", "=", "\"linear\"", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"A function wrapper for building a learning rate scheduler.\"\"\"", "\n", "\n", "num_training_steps", "=", "kwargs", ".", "get", "(", "\"num_training_steps\"", ",", "-", "1", ")", "\n", "warmup_steps", "=", "kwargs", ".", "get", "(", "\"warmup_steps\"", ",", "0", ")", "\n", "\n", "if", "lr_scheduler", "not", "in", "AVAI_SCHEDS", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "\"Unsupported scheduler: {}. Must be one of {}\"", ".", "format", "(", "\n", "lr_scheduler", ",", "AVAI_SCHEDS", "\n", ")", "\n", ")", "\n", "\n", "", "if", "lr_scheduler", "!=", "\"constant\"", ":", "\n", "        ", "if", "num_training_steps", "<", "0", "or", "not", "isinstance", "(", "num_training_steps", ",", "int", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"For non-constant lr schedulers, positive integer value \"", "\n", "\"is expected as num_training_steps.\"", "\n", ")", "\n", "", "if", "0.", "<", "warmup_steps", "<", "1.", ":", "\n", "            ", "warmup_steps", "=", "int", "(", "num_training_steps", "*", "warmup_steps", ")", "\n", "", "", "else", ":", "\n", "        ", "if", "0.", "<", "warmup_steps", "<", "1.", "and", "(", "\n", "num_training_steps", "<", "0", "or", "not", "isinstance", "(", "num_training_steps", ",", "int", ")", "\n", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"For constant lr scheduler with fractional warmup_steps \"", "\n", "\"num_training_steps is required as positive integer value.\"", "\n", ")", "\n", "\n", "", "", "if", "lr_scheduler", "==", "\"constant\"", ":", "\n", "        ", "if", "warmup_steps", ">", "0", ":", "\n", "            ", "scheduler", "=", "optim", ".", "get_constant_schedule_with_warmup", "(", "optimizer", ",", "warmup_steps", ")", "\n", "", "else", ":", "\n", "            ", "scheduler", "=", "optim", ".", "get_constant_schedule", "(", "optimizer", ")", "\n", "\n", "", "", "elif", "lr_scheduler", "==", "\"linear\"", ":", "\n", "        ", "scheduler", "=", "optim", ".", "get_linear_schedule_with_warmup", "(", "\n", "optimizer", ",", "warmup_steps", ",", "num_training_steps", "\n", ")", "\n", "\n", "", "elif", "lr_scheduler", "==", "\"cosine\"", ":", "\n", "        ", "num_cycles", "=", "kwargs", ".", "get", "(", "\"num_cycles\"", ",", "0.5", ")", "\n", "scheduler", "=", "optim", ".", "get_cosine_schedule_with_warmup", "(", "\n", "optimizer", ",", "warmup_steps", ",", "num_training_steps", ",", "num_cycles", "\n", ")", "\n", "\n", "", "elif", "lr_scheduler", "==", "\"cosinehr\"", ":", "\n", "        ", "num_cycles", "=", "kwargs", ".", "get", "(", "\"num_cycles\"", ",", "1.0", ")", "\n", "scheduler", "=", "optim", ".", "get_cosine_with_hard_restarts_schedule_with_warmup", "(", "\n", "optimizer", ",", "warmup_steps", ",", "num_training_steps", ",", "num_cycles", "\n", ")", "\n", "\n", "", "return", "scheduler", "\n", "", ""]], "home.repos.pwc.inspect_result.suamin_t2ner.optim.radam.RAdam.__init__": [[20, 46], ["dict", "torch.optim.optimizer.Optimizer.__init__", "ValueError", "ValueError", "ValueError", "ValueError", "range"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.annotate.annotate.SentAnnObj.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "params", ",", "\n", "lr", "=", "1e-3", ",", "\n", "betas", "=", "(", "0.9", ",", "0.999", ")", ",", "\n", "eps", "=", "1e-8", ",", "\n", "weight_decay", "=", "0", ",", "\n", "degenerated_to_sgd", "=", "True", "\n", ")", ":", "\n", "        ", "if", "not", "0.0", "<=", "lr", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid learning rate: {}\"", ".", "format", "(", "lr", ")", ")", "\n", "", "if", "not", "0.0", "<=", "eps", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid epsilon value: {}\"", ".", "format", "(", "eps", ")", ")", "\n", "", "if", "not", "0.0", "<=", "betas", "[", "0", "]", "<", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Invalid beta parameter at index 0: {}\"", ".", "format", "(", "betas", "[", "0", "]", ")", "\n", ")", "\n", "", "if", "not", "0.0", "<=", "betas", "[", "1", "]", "<", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Invalid beta parameter at index 1: {}\"", ".", "format", "(", "betas", "[", "1", "]", ")", "\n", ")", "\n", "\n", "", "self", ".", "degenerated_to_sgd", "=", "degenerated_to_sgd", "\n", "defaults", "=", "dict", "(", "lr", "=", "lr", ",", "betas", "=", "betas", ",", "eps", "=", "eps", ",", "weight_decay", "=", "weight_decay", ")", "\n", "self", ".", "buffer", "=", "[", "[", "None", ",", "None", ",", "None", "]", "for", "ind", "in", "range", "(", "10", ")", "]", "\n", "super", "(", "RAdam", ",", "self", ")", ".", "__init__", "(", "params", ",", "defaults", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.optim.radam.RAdam.__setstate__": [[47, 49], ["super().__setstate__"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.optim.radam.AdamW.__setstate__"], ["", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "super", "(", "RAdam", ",", "self", ")", ".", "__setstate__", "(", "state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.optim.radam.RAdam.step": [[50, 131], ["closure", "p.grad.data.float", "p.data.float", "exp_avg_sq.mul_().addcmul_", "exp_avg.mul_().add_", "RuntimeError", "len", "torch.zeros_like", "torch.zeros_like", "state[].type_as", "state[].type_as", "exp_avg_sq.sqrt().add_", "p.data.float.addcdiv_", "p.data.copy_", "exp_avg_sq.mul_", "exp_avg.mul_", "int", "p.data.float.add_", "p.data.float.add_", "p.data.copy_", "math.sqrt", "exp_avg_sq.sqrt", "p.data.float.add_"], "methods", ["None"], ["", "def", "step", "(", "self", ",", "closure", "=", "None", ")", ":", "\n", "\n", "        ", "loss", "=", "None", "\n", "if", "closure", "is", "not", "None", ":", "\n", "            ", "loss", "=", "closure", "(", ")", "\n", "\n", "", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "\n", "            ", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "grad", "=", "p", ".", "grad", ".", "data", ".", "float", "(", ")", "\n", "if", "grad", ".", "is_sparse", ":", "\n", "                    ", "raise", "RuntimeError", "(", "\n", "'RAdam does not support sparse gradients'", "\n", ")", "\n", "\n", "", "p_data_fp32", "=", "p", ".", "data", ".", "float", "(", ")", "\n", "\n", "state", "=", "self", ".", "state", "[", "p", "]", "\n", "\n", "if", "len", "(", "state", ")", "==", "0", ":", "\n", "                    ", "state", "[", "'step'", "]", "=", "0", "\n", "state", "[", "'exp_avg'", "]", "=", "torch", ".", "zeros_like", "(", "p_data_fp32", ")", "\n", "state", "[", "'exp_avg_sq'", "]", "=", "torch", ".", "zeros_like", "(", "p_data_fp32", ")", "\n", "", "else", ":", "\n", "                    ", "state", "[", "'exp_avg'", "]", "=", "state", "[", "'exp_avg'", "]", ".", "type_as", "(", "p_data_fp32", ")", "\n", "state", "[", "'exp_avg_sq'", "]", "=", "state", "[", "'exp_avg_sq'", "]", ".", "type_as", "(", "\n", "p_data_fp32", "\n", ")", "\n", "\n", "", "exp_avg", ",", "exp_avg_sq", "=", "state", "[", "'exp_avg'", "]", ",", "state", "[", "'exp_avg_sq'", "]", "\n", "beta1", ",", "beta2", "=", "group", "[", "'betas'", "]", "\n", "\n", "exp_avg_sq", ".", "mul_", "(", "beta2", ")", ".", "addcmul_", "(", "1", "-", "beta2", ",", "grad", ",", "grad", ")", "\n", "exp_avg", ".", "mul_", "(", "beta1", ")", ".", "add_", "(", "1", "-", "beta1", ",", "grad", ")", "\n", "\n", "state", "[", "'step'", "]", "+=", "1", "\n", "buffered", "=", "self", ".", "buffer", "[", "int", "(", "state", "[", "'step'", "]", "%", "10", ")", "]", "\n", "if", "state", "[", "'step'", "]", "==", "buffered", "[", "0", "]", ":", "\n", "                    ", "N_sma", ",", "step_size", "=", "buffered", "[", "1", "]", ",", "buffered", "[", "2", "]", "\n", "", "else", ":", "\n", "                    ", "buffered", "[", "0", "]", "=", "state", "[", "'step'", "]", "\n", "beta2_t", "=", "beta2", "**", "state", "[", "'step'", "]", "\n", "N_sma_max", "=", "2", "/", "(", "1", "-", "beta2", ")", "-", "1", "\n", "N_sma", "=", "N_sma_max", "-", "2", "*", "state", "[", "'step'", "\n", "]", "*", "beta2_t", "/", "(", "1", "-", "beta2_t", ")", "\n", "buffered", "[", "1", "]", "=", "N_sma", "\n", "\n", "# more conservative since it's an approximated value", "\n", "if", "N_sma", ">=", "5", ":", "\n", "                        ", "step_size", "=", "math", ".", "sqrt", "(", "\n", "(", "1", "-", "beta2_t", ")", "*", "(", "N_sma", "-", "4", ")", "/", "(", "N_sma_max", "-", "4", ")", "*", "\n", "(", "N_sma", "-", "2", ")", "/", "N_sma", "*", "N_sma_max", "/", "(", "N_sma_max", "-", "2", ")", "\n", ")", "/", "(", "1", "-", "beta1", "**", "state", "[", "'step'", "]", ")", "\n", "", "elif", "self", ".", "degenerated_to_sgd", ":", "\n", "                        ", "step_size", "=", "1.0", "/", "(", "1", "-", "beta1", "**", "state", "[", "'step'", "]", ")", "\n", "", "else", ":", "\n", "                        ", "step_size", "=", "-", "1", "\n", "", "buffered", "[", "2", "]", "=", "step_size", "\n", "\n", "# more conservative since it's an approximated value", "\n", "", "if", "N_sma", ">=", "5", ":", "\n", "                    ", "if", "group", "[", "'weight_decay'", "]", "!=", "0", ":", "\n", "                        ", "p_data_fp32", ".", "add_", "(", "\n", "-", "group", "[", "'weight_decay'", "]", "*", "group", "[", "'lr'", "]", ",", "p_data_fp32", "\n", ")", "\n", "", "denom", "=", "exp_avg_sq", ".", "sqrt", "(", ")", ".", "add_", "(", "group", "[", "'eps'", "]", ")", "\n", "p_data_fp32", ".", "addcdiv_", "(", "\n", "-", "step_size", "*", "group", "[", "'lr'", "]", ",", "exp_avg", ",", "denom", "\n", ")", "\n", "p", ".", "data", ".", "copy_", "(", "p_data_fp32", ")", "\n", "", "elif", "step_size", ">", "0", ":", "\n", "                    ", "if", "group", "[", "'weight_decay'", "]", "!=", "0", ":", "\n", "                        ", "p_data_fp32", ".", "add_", "(", "\n", "-", "group", "[", "'weight_decay'", "]", "*", "group", "[", "'lr'", "]", ",", "p_data_fp32", "\n", ")", "\n", "", "p_data_fp32", ".", "add_", "(", "-", "step_size", "*", "group", "[", "'lr'", "]", ",", "exp_avg", ")", "\n", "p", ".", "data", ".", "copy_", "(", "p_data_fp32", ")", "\n", "\n", "", "", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.optim.radam.PlainRAdam.__init__": [[135, 161], ["dict", "torch.optim.optimizer.Optimizer.__init__", "ValueError", "ValueError", "ValueError", "ValueError"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.annotate.annotate.SentAnnObj.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "params", ",", "\n", "lr", "=", "1e-3", ",", "\n", "betas", "=", "(", "0.9", ",", "0.999", ")", ",", "\n", "eps", "=", "1e-8", ",", "\n", "weight_decay", "=", "0", ",", "\n", "degenerated_to_sgd", "=", "True", "\n", ")", ":", "\n", "        ", "if", "not", "0.0", "<=", "lr", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid learning rate: {}\"", ".", "format", "(", "lr", ")", ")", "\n", "", "if", "not", "0.0", "<=", "eps", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid epsilon value: {}\"", ".", "format", "(", "eps", ")", ")", "\n", "", "if", "not", "0.0", "<=", "betas", "[", "0", "]", "<", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Invalid beta parameter at index 0: {}\"", ".", "format", "(", "betas", "[", "0", "]", ")", "\n", ")", "\n", "", "if", "not", "0.0", "<=", "betas", "[", "1", "]", "<", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Invalid beta parameter at index 1: {}\"", ".", "format", "(", "betas", "[", "1", "]", ")", "\n", ")", "\n", "\n", "", "self", ".", "degenerated_to_sgd", "=", "degenerated_to_sgd", "\n", "defaults", "=", "dict", "(", "lr", "=", "lr", ",", "betas", "=", "betas", ",", "eps", "=", "eps", ",", "weight_decay", "=", "weight_decay", ")", "\n", "\n", "super", "(", "PlainRAdam", ",", "self", ")", ".", "__init__", "(", "params", ",", "defaults", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.optim.radam.PlainRAdam.__setstate__": [[162, 164], ["super().__setstate__"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.optim.radam.AdamW.__setstate__"], ["", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "super", "(", "PlainRAdam", ",", "self", ")", ".", "__setstate__", "(", "state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.optim.radam.PlainRAdam.step": [[165, 230], ["closure", "p.grad.data.float", "p.data.float", "exp_avg_sq.mul_().addcmul_", "exp_avg.mul_().add_", "RuntimeError", "len", "torch.zeros_like", "torch.zeros_like", "state[].type_as", "state[].type_as", "exp_avg_sq.sqrt().add_", "p.data.float.addcdiv_", "p.data.copy_", "exp_avg_sq.mul_", "exp_avg.mul_", "p.data.float.add_", "p.data.float.add_", "p.data.copy_", "math.sqrt", "exp_avg_sq.sqrt", "p.data.float.add_"], "methods", ["None"], ["", "def", "step", "(", "self", ",", "closure", "=", "None", ")", ":", "\n", "\n", "        ", "loss", "=", "None", "\n", "if", "closure", "is", "not", "None", ":", "\n", "            ", "loss", "=", "closure", "(", ")", "\n", "\n", "", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "\n", "            ", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "grad", "=", "p", ".", "grad", ".", "data", ".", "float", "(", ")", "\n", "if", "grad", ".", "is_sparse", ":", "\n", "                    ", "raise", "RuntimeError", "(", "\n", "'RAdam does not support sparse gradients'", "\n", ")", "\n", "\n", "", "p_data_fp32", "=", "p", ".", "data", ".", "float", "(", ")", "\n", "\n", "state", "=", "self", ".", "state", "[", "p", "]", "\n", "\n", "if", "len", "(", "state", ")", "==", "0", ":", "\n", "                    ", "state", "[", "'step'", "]", "=", "0", "\n", "state", "[", "'exp_avg'", "]", "=", "torch", ".", "zeros_like", "(", "p_data_fp32", ")", "\n", "state", "[", "'exp_avg_sq'", "]", "=", "torch", ".", "zeros_like", "(", "p_data_fp32", ")", "\n", "", "else", ":", "\n", "                    ", "state", "[", "'exp_avg'", "]", "=", "state", "[", "'exp_avg'", "]", ".", "type_as", "(", "p_data_fp32", ")", "\n", "state", "[", "'exp_avg_sq'", "]", "=", "state", "[", "'exp_avg_sq'", "]", ".", "type_as", "(", "\n", "p_data_fp32", "\n", ")", "\n", "\n", "", "exp_avg", ",", "exp_avg_sq", "=", "state", "[", "'exp_avg'", "]", ",", "state", "[", "'exp_avg_sq'", "]", "\n", "beta1", ",", "beta2", "=", "group", "[", "'betas'", "]", "\n", "\n", "exp_avg_sq", ".", "mul_", "(", "beta2", ")", ".", "addcmul_", "(", "1", "-", "beta2", ",", "grad", ",", "grad", ")", "\n", "exp_avg", ".", "mul_", "(", "beta1", ")", ".", "add_", "(", "1", "-", "beta1", ",", "grad", ")", "\n", "\n", "state", "[", "'step'", "]", "+=", "1", "\n", "beta2_t", "=", "beta2", "**", "state", "[", "'step'", "]", "\n", "N_sma_max", "=", "2", "/", "(", "1", "-", "beta2", ")", "-", "1", "\n", "N_sma", "=", "N_sma_max", "-", "2", "*", "state", "[", "'step'", "]", "*", "beta2_t", "/", "(", "1", "-", "beta2_t", ")", "\n", "\n", "# more conservative since it's an approximated value", "\n", "if", "N_sma", ">=", "5", ":", "\n", "                    ", "if", "group", "[", "'weight_decay'", "]", "!=", "0", ":", "\n", "                        ", "p_data_fp32", ".", "add_", "(", "\n", "-", "group", "[", "'weight_decay'", "]", "*", "group", "[", "'lr'", "]", ",", "p_data_fp32", "\n", ")", "\n", "", "step_size", "=", "group", "[", "'lr'", "]", "*", "math", ".", "sqrt", "(", "\n", "(", "1", "-", "beta2_t", ")", "*", "(", "N_sma", "-", "4", ")", "/", "(", "N_sma_max", "-", "4", ")", "*", "\n", "(", "N_sma", "-", "2", ")", "/", "N_sma", "*", "N_sma_max", "/", "(", "N_sma_max", "-", "2", ")", "\n", ")", "/", "(", "1", "-", "beta1", "**", "state", "[", "'step'", "]", ")", "\n", "denom", "=", "exp_avg_sq", ".", "sqrt", "(", ")", ".", "add_", "(", "group", "[", "'eps'", "]", ")", "\n", "p_data_fp32", ".", "addcdiv_", "(", "-", "step_size", ",", "exp_avg", ",", "denom", ")", "\n", "p", ".", "data", ".", "copy_", "(", "p_data_fp32", ")", "\n", "", "elif", "self", ".", "degenerated_to_sgd", ":", "\n", "                    ", "if", "group", "[", "'weight_decay'", "]", "!=", "0", ":", "\n", "                        ", "p_data_fp32", ".", "add_", "(", "\n", "-", "group", "[", "'weight_decay'", "]", "*", "group", "[", "'lr'", "]", ",", "p_data_fp32", "\n", ")", "\n", "", "step_size", "=", "group", "[", "'lr'", "]", "/", "(", "1", "-", "beta1", "**", "state", "[", "'step'", "]", ")", "\n", "p_data_fp32", ".", "add_", "(", "-", "step_size", ",", "exp_avg", ")", "\n", "p", ".", "data", ".", "copy_", "(", "p_data_fp32", ")", "\n", "\n", "", "", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.optim.radam.AdamW.__init__": [[234, 264], ["dict", "torch.optim.optimizer.Optimizer.__init__", "ValueError", "ValueError", "ValueError", "ValueError"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.annotate.annotate.SentAnnObj.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "params", ",", "\n", "lr", "=", "1e-3", ",", "\n", "betas", "=", "(", "0.9", ",", "0.999", ")", ",", "\n", "eps", "=", "1e-8", ",", "\n", "weight_decay", "=", "0", ",", "\n", "warmup", "=", "0", "\n", ")", ":", "\n", "        ", "if", "not", "0.0", "<=", "lr", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid learning rate: {}\"", ".", "format", "(", "lr", ")", ")", "\n", "", "if", "not", "0.0", "<=", "eps", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid epsilon value: {}\"", ".", "format", "(", "eps", ")", ")", "\n", "", "if", "not", "0.0", "<=", "betas", "[", "0", "]", "<", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Invalid beta parameter at index 0: {}\"", ".", "format", "(", "betas", "[", "0", "]", ")", "\n", ")", "\n", "", "if", "not", "0.0", "<=", "betas", "[", "1", "]", "<", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Invalid beta parameter at index 1: {}\"", ".", "format", "(", "betas", "[", "1", "]", ")", "\n", ")", "\n", "\n", "", "defaults", "=", "dict", "(", "\n", "lr", "=", "lr", ",", "\n", "betas", "=", "betas", ",", "\n", "eps", "=", "eps", ",", "\n", "weight_decay", "=", "weight_decay", ",", "\n", "warmup", "=", "warmup", "\n", ")", "\n", "super", "(", "AdamW", ",", "self", ")", ".", "__init__", "(", "params", ",", "defaults", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.optim.radam.AdamW.__setstate__": [[265, 267], ["super().__setstate__"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.optim.radam.AdamW.__setstate__"], ["", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "super", "(", "AdamW", ",", "self", ")", ".", "__setstate__", "(", "state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.optim.radam.AdamW.step": [[268, 330], ["closure", "p.grad.data.float", "p.data.float", "exp_avg_sq.mul_().addcmul_", "exp_avg.mul_().add_", "exp_avg_sq.sqrt().add_", "p.data.float.addcdiv_", "p.data.copy_", "RuntimeError", "len", "torch.zeros_like", "torch.zeros_like", "state[].type_as", "state[].type_as", "p.data.float.add_", "exp_avg_sq.mul_", "exp_avg.mul_", "exp_avg_sq.sqrt", "math.sqrt"], "methods", ["None"], ["", "def", "step", "(", "self", ",", "closure", "=", "None", ")", ":", "\n", "        ", "loss", "=", "None", "\n", "if", "closure", "is", "not", "None", ":", "\n", "            ", "loss", "=", "closure", "(", ")", "\n", "\n", "", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "\n", "            ", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "grad", "=", "p", ".", "grad", ".", "data", ".", "float", "(", ")", "\n", "if", "grad", ".", "is_sparse", ":", "\n", "                    ", "raise", "RuntimeError", "(", "\n", "'Adam does not support sparse gradients, please consider SparseAdam instead'", "\n", ")", "\n", "\n", "", "p_data_fp32", "=", "p", ".", "data", ".", "float", "(", ")", "\n", "\n", "state", "=", "self", ".", "state", "[", "p", "]", "\n", "\n", "if", "len", "(", "state", ")", "==", "0", ":", "\n", "                    ", "state", "[", "'step'", "]", "=", "0", "\n", "state", "[", "'exp_avg'", "]", "=", "torch", ".", "zeros_like", "(", "p_data_fp32", ")", "\n", "state", "[", "'exp_avg_sq'", "]", "=", "torch", ".", "zeros_like", "(", "p_data_fp32", ")", "\n", "", "else", ":", "\n", "                    ", "state", "[", "'exp_avg'", "]", "=", "state", "[", "'exp_avg'", "]", ".", "type_as", "(", "p_data_fp32", ")", "\n", "state", "[", "'exp_avg_sq'", "]", "=", "state", "[", "'exp_avg_sq'", "]", ".", "type_as", "(", "\n", "p_data_fp32", "\n", ")", "\n", "\n", "", "exp_avg", ",", "exp_avg_sq", "=", "state", "[", "'exp_avg'", "]", ",", "state", "[", "'exp_avg_sq'", "]", "\n", "beta1", ",", "beta2", "=", "group", "[", "'betas'", "]", "\n", "\n", "state", "[", "'step'", "]", "+=", "1", "\n", "\n", "exp_avg_sq", ".", "mul_", "(", "beta2", ")", ".", "addcmul_", "(", "1", "-", "beta2", ",", "grad", ",", "grad", ")", "\n", "exp_avg", ".", "mul_", "(", "beta1", ")", ".", "add_", "(", "1", "-", "beta1", ",", "grad", ")", "\n", "\n", "denom", "=", "exp_avg_sq", ".", "sqrt", "(", ")", ".", "add_", "(", "group", "[", "'eps'", "]", ")", "\n", "bias_correction1", "=", "1", "-", "beta1", "**", "state", "[", "'step'", "]", "\n", "bias_correction2", "=", "1", "-", "beta2", "**", "state", "[", "'step'", "]", "\n", "\n", "if", "group", "[", "'warmup'", "]", ">", "state", "[", "'step'", "]", ":", "\n", "                    ", "scheduled_lr", "=", "1e-8", "+", "state", "[", "'step'", "]", "*", "group", "[", "'lr'", "]", "/", "group", "[", "\n", "'warmup'", "]", "\n", "", "else", ":", "\n", "                    ", "scheduled_lr", "=", "group", "[", "'lr'", "]", "\n", "\n", "", "step_size", "=", "scheduled_lr", "*", "math", ".", "sqrt", "(", "\n", "bias_correction2", "\n", ")", "/", "bias_correction1", "\n", "\n", "if", "group", "[", "'weight_decay'", "]", "!=", "0", ":", "\n", "                    ", "p_data_fp32", ".", "add_", "(", "\n", "-", "group", "[", "'weight_decay'", "]", "*", "scheduled_lr", ",", "p_data_fp32", "\n", ")", "\n", "\n", "", "p_data_fp32", ".", "addcdiv_", "(", "-", "step_size", ",", "exp_avg", ",", "denom", ")", "\n", "\n", "p", ".", "data", ".", "copy_", "(", "p_data_fp32", ")", "\n", "\n", "", "", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.suamin_t2ner.optim.optimizer.build_optimizer": [[14, 150], ["kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "ValueError", "isinstance", "TypeError", "isinstance", "isinstance", "model.named_children", "optimizer.decouple_no_decay_params", "optimizer.decouple_no_decay_params", "model.named_parameters", "optimizer.decouple_no_decay_params", "torch.optim.Adam", "torch.optim.Adam", "transformers.optimization.AdamW", "warnings.warn", "module.named_parameters", "module.named_parameters", "base_layers.append", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.RMSprop", "torch.optim.RMSprop", "radam.RAdam"], "function", ["home.repos.pwc.inspect_result.suamin_t2ner.optim.optimizer.decouple_no_decay_params", "home.repos.pwc.inspect_result.suamin_t2ner.optim.optimizer.decouple_no_decay_params", "home.repos.pwc.inspect_result.suamin_t2ner.optim.optimizer.decouple_no_decay_params"], ["def", "build_optimizer", "(", "model", ",", "optim", "=", "\"adamw\"", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"A function wrapper for building an optimizer.\"\"\"", "\n", "\n", "lr", "=", "kwargs", ".", "get", "(", "\"lr\"", ",", "2e-5", ")", "\n", "weight_decay", "=", "kwargs", ".", "get", "(", "\"weight_decay\"", ",", "0.0", ")", "\n", "momentum", "=", "kwargs", ".", "get", "(", "\"momentum\"", ",", "0.9", ")", "\n", "sgd_dampening", "=", "kwargs", ".", "get", "(", "\"sgd_dampening\"", ",", "0", ")", "\n", "sgd_nesterov", "=", "kwargs", ".", "get", "(", "\"sgd_nesterov\"", ",", "False", ")", "\n", "rmsprop_alpha", "=", "kwargs", ".", "get", "(", "\"rmsprop_alpha\"", ",", "0.99", ")", "\n", "adam_beta1", "=", "kwargs", ".", "get", "(", "\"adam_beta1\"", ",", "0.9", ")", "\n", "adam_beta2", "=", "kwargs", ".", "get", "(", "\"adam_beta2\"", ",", "0.999", ")", "\n", "adam_epsilon", "=", "kwargs", ".", "get", "(", "\"adam_epsilon\"", ",", "1e-8", ")", "\n", "staged_lr", "=", "kwargs", ".", "get", "(", "\"staged_lr\"", ",", "False", ")", "\n", "new_layers", "=", "kwargs", ".", "get", "(", "\"new_layers\"", ",", "(", ")", ")", "\n", "base_lr_mult", "=", "kwargs", ".", "get", "(", "\"base_lr_mult\"", ",", "0.1", ")", "\n", "\n", "if", "optim", "not", "in", "AVAI_OPTIMS", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "\"Unsupported optim: {}. Must be one of {}\"", ".", "format", "(", "\n", "optim", ",", "AVAI_OPTIMS", "\n", ")", "\n", ")", "\n", "\n", "", "if", "not", "isinstance", "(", "model", ",", "nn", ".", "Module", ")", ":", "\n", "        ", "raise", "TypeError", "(", "\n", "\"model given to build_optimizer must be an instance of nn.Module\"", "\n", ")", "\n", "\n", "", "if", "staged_lr", ":", "\n", "        ", "if", "isinstance", "(", "new_layers", ",", "str", ")", ":", "\n", "            ", "if", "new_layers", "is", "None", ":", "\n", "                ", "warnings", ".", "warn", "(", "\n", "\"new_layers is empty, therefore, staged_lr is useless\"", "\n", ")", "\n", "", "new_layers", "=", "[", "new_layers", "]", "\n", "\n", "", "if", "isinstance", "(", "model", ",", "nn", ".", "DataParallel", ")", ":", "\n", "            ", "model", "=", "model", ".", "module", "\n", "\n", "", "base_params", "=", "[", "]", "\n", "base_layers", "=", "[", "]", "\n", "new_params", "=", "[", "]", "\n", "\n", "for", "name", ",", "module", "in", "model", ".", "named_children", "(", ")", ":", "\n", "            ", "if", "name", "in", "new_layers", ":", "\n", "                ", "new_params", "+=", "module", ".", "named_parameters", "(", ")", "\n", "", "else", ":", "\n", "                ", "base_params", "+=", "module", ".", "named_parameters", "(", ")", "\n", "base_layers", ".", "append", "(", "name", ")", "\n", "\n", "", "", "base_decay_params", ",", "base_no_decay_params", "=", "decouple_no_decay_params", "(", "base_params", ")", "\n", "new_decay_params", ",", "new_no_decay_params", "=", "decouple_no_decay_params", "(", "new_params", ")", "\n", "param_groups", "=", "[", "\n", "{", "\n", "\"params\"", ":", "base_decay_params", ",", "\n", "\"weight_decay\"", ":", "weight_decay", ",", "\n", "\"lr\"", ":", "lr", "*", "base_lr_mult", "\n", "}", ",", "\n", "{", "\n", "\"params\"", ":", "base_no_decay_params", ",", "\n", "\"weight_decay\"", ":", "0.0", ",", "\n", "\"lr\"", ":", "lr", "*", "base_lr_mult", "\n", "}", ",", "\n", "{", "\n", "\"params\"", ":", "new_decay_params", ",", "\n", "\"weight_decay\"", ":", "weight_decay", "\n", "}", ",", "\n", "{", "\n", "\"params\"", ":", "new_no_decay_params", ",", "\n", "\"weight_decay\"", ":", "0.0", "\n", "}", "\n", "]", "\n", "\n", "", "else", ":", "\n", "        ", "no_decay", "=", "[", "\"bias\"", ",", "\"LayerNorm.weight\"", "]", "\n", "params", "=", "model", ".", "named_parameters", "(", ")", "\n", "decay_params", ",", "no_decay_params", "=", "decouple_no_decay_params", "(", "params", ")", "\n", "param_groups", "=", "[", "\n", "{", "\n", "\"params\"", ":", "decay_params", ",", "\n", "\"weight_decay\"", ":", "weight_decay", ",", "\n", "}", ",", "\n", "{", "\n", "\"params\"", ":", "no_decay_params", ",", "\n", "\"weight_decay\"", ":", "0.0", ",", "\n", "}", ",", "\n", "]", "\n", "\n", "", "if", "optim", "==", "\"adam\"", ":", "\n", "        ", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "\n", "param_groups", ",", "\n", "lr", "=", "lr", ",", "\n", "betas", "=", "(", "adam_beta1", ",", "adam_beta2", ")", ",", "\n", ")", "\n", "\n", "", "elif", "optim", "==", "\"adamw\"", ":", "\n", "        ", "optimizer", "=", "AdamW", "(", "\n", "param_groups", ",", "\n", "lr", "=", "lr", ",", "\n", "eps", "=", "adam_epsilon", ",", "\n", "betas", "=", "(", "adam_beta1", ",", "adam_beta2", ")", "\n", ")", "\n", "\n", "", "elif", "optim", "==", "\"amsgrad\"", ":", "\n", "        ", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "\n", "param_groups", ",", "\n", "lr", "=", "lr", ",", "\n", "betas", "=", "(", "adam_beta1", ",", "adam_beta2", ")", ",", "\n", "amsgrad", "=", "True", ",", "\n", ")", "\n", "\n", "", "elif", "optim", "==", "\"sgd\"", ":", "\n", "        ", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "\n", "param_groups", ",", "\n", "lr", "=", "lr", ",", "\n", "momentum", "=", "momentum", ",", "\n", "dampening", "=", "sgd_dampening", ",", "\n", "nesterov", "=", "sgd_nesterov", ",", "\n", ")", "\n", "\n", "", "elif", "optim", "==", "\"rmsprop\"", ":", "\n", "        ", "optimizer", "=", "torch", ".", "optim", ".", "RMSprop", "(", "\n", "param_groups", ",", "\n", "lr", "=", "lr", ",", "\n", "momentum", "=", "momentum", ",", "\n", "alpha", "=", "rmsprop_alpha", ",", "\n", ")", "\n", "\n", "", "elif", "optim", "==", "\"radam\"", ":", "\n", "        ", "optimizer", "=", "RAdam", "(", "\n", "param_groups", ",", "\n", "lr", "=", "lr", ",", "\n", "betas", "=", "(", "adam_beta1", ",", "adam_beta2", ")", "\n", ")", "\n", "\n", "", "return", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.optim.optimizer.decouple_no_decay_params": [[152, 157], ["any", "any"], "function", ["None"], ["", "def", "decouple_no_decay_params", "(", "params", ")", ":", "\n", "    ", "no_decay", "=", "[", "\"bias\"", ",", "\"LayerNorm.weight\"", "]", "\n", "decay_params", "=", "[", "p", "for", "n", ",", "p", "in", "params", "if", "not", "any", "(", "nd", "in", "n", "for", "nd", "in", "no_decay", ")", "]", "\n", "no_decay_params", "=", "[", "p", "for", "n", ",", "p", "in", "params", "if", "any", "(", "nd", "in", "n", "for", "nd", "in", "no_decay", ")", "]", "\n", "return", "decay_params", ",", "no_decay_params", "\n", "", ""]], "home.repos.pwc.inspect_result.suamin_t2ner.trainers.semisupervised.SSLTrainer.__init__": [[11, 14], ["train.BaseTrainer.__init__", "semisupervised.SSLTrainer.load_data"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.annotate.annotate.SentAnnObj.__init__", "home.repos.pwc.inspect_result.suamin_t2ner.trainers.adaptation.AdaptationTrainer.load_data"], ["    ", "def", "__init__", "(", "self", ",", "training_args", ",", "model_args", ",", "exp_args", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "training_args", ",", "model_args", ",", "exp_args", ")", "\n", "self", ".", "load_data", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.trainers.semisupervised.SSLTrainer.load_data": [[15, 31], ["semisupervised.SSLTrainer.parse_input_to_dataset_metadata", "data_kwargs.pop", "data.SemiSupervisedData", "semisupervised.SSLTrainer.register_model_validation_datasets", "semisupervised.SSLTrainer.load_eval_data", "semisupervised.SSLTrainer.data.get_label_maps", "semisupervised.SSLTrainer.data.get_type_maps", "semisupervised.SSLTrainer.config_kwargs.update", "dict"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.t2ner.base.TrainInferenceUtils.parse_input_to_dataset_metadata", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.register_model_validation_datasets", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.load_eval_data", "home.repos.pwc.inspect_result.suamin_t2ner.data.base.BaseData.get_label_maps", "home.repos.pwc.inspect_result.suamin_t2ner.data.base.BaseData.get_type_maps"], ["", "def", "load_data", "(", "self", ")", ":", "\n", "        ", "metadata", "=", "self", ".", "parse_input_to_dataset_metadata", "(", "self", ".", "exp_args", ".", "train_dataset", ")", "\n", "\n", "data_kwargs", "=", "self", ".", "data_kwargs", "\n", "data_dir", "=", "data_kwargs", ".", "pop", "(", "\"preprocessed_data_dir\"", ")", "\n", "\n", "self", ".", "data", "=", "SemiSupervisedData", "(", "data_dir", ",", "metadata", ",", "**", "data_kwargs", ")", "\n", "self", ".", "register_model_validation_datasets", "(", "metadata", "[", "\"name\"", "]", ")", "\n", "self", ".", "load_eval_data", "(", "train_datasets", "=", "[", "metadata", "[", "\"name\"", "]", ",", "]", ")", "\n", "\n", "id2label", ",", "label2id", "=", "self", ".", "data", ".", "get_label_maps", "(", "metadata", "[", "\"name\"", "]", ")", "\n", "id2type", ",", "type2id", "=", "self", ".", "data", ".", "get_type_maps", "(", "metadata", "[", "\"name\"", "]", ")", "\n", "\n", "self", ".", "config_kwargs", ".", "update", "(", "dict", "(", "\n", "label2id", "=", "label2id", ",", "id2label", "=", "id2label", ",", "\n", "type2id", "=", "type2id", ",", "id2type", "=", "id2type", "\n", ")", ")", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.trainers.semisupervised.SSLTrainer.batch_to_device": [[33, 35], ["tensor.to", "inputs.items"], "methods", ["None"], ["", "def", "batch_to_device", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "return", "{", "tensor_name", ":", "tensor", ".", "to", "(", "self", ".", "device", ")", "for", "tensor_name", ",", "tensor", "in", "inputs", ".", "items", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.trainers.semisupervised.SSLTrainer._get_batch": [[36, 55], ["semisupervised.SSLTrainer.batch_to_device", "next", "hasattr", "semisupervised.SSLTrainer.data.to_iter", "semisupervised.SSLTrainer.__setattr__", "semisupervised.SSLTrainer.__getattribute__", "hasattr", "semisupervised.SSLTrainer.data.to_iter", "semisupervised.SSLTrainer.__setattr__", "semisupervised.SSLTrainer.__getattribute__"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.trainers.adaptation.AdaptationTrainer.batch_to_device", "home.repos.pwc.inspect_result.suamin_t2ner.data.base.BaseData.to_iter", "home.repos.pwc.inspect_result.suamin_t2ner.data.base.BaseData.to_iter"], ["", "def", "_get_batch", "(", "self", ",", "sup_or_unsup", ",", "task", "=", "\"ner\"", ",", "dataloader_idx", "=", "0", ")", ":", "\n", "        ", "if", "task", "==", "\"ner\"", ":", "\n", "            ", "name", "=", "\"{}_ner_{}_train_iter\"", ".", "format", "(", "sup_or_unsup", ",", "dataloader_idx", ")", "\n", "if", "not", "hasattr", "(", "self", ",", "name", ")", ":", "\n", "                ", "dataloader", "=", "self", ".", "train_data", "[", "task", "]", "[", "sup_or_unsup", "]", "[", "dataloader_idx", "]", "\n", "diter", "=", "self", ".", "data", ".", "to_iter", "(", "dataloader", ")", "\n", "self", ".", "__setattr__", "(", "name", ",", "diter", ")", "\n", "", "else", ":", "\n", "                ", "diter", "=", "self", ".", "__getattribute__", "(", "name", ")", "\n", "", "", "else", ":", "\n", "            ", "name", "=", "\"{}_train_iter\"", ".", "format", "(", "task", ")", "\n", "if", "not", "hasattr", "(", "self", ",", "name", ")", ":", "\n", "                ", "dataloader", "=", "self", ".", "train_data", "[", "task", "]", "\n", "diter", "=", "self", ".", "data", ".", "to_iter", "(", "dataloader", ")", "\n", "self", ".", "__setattr__", "(", "name", ",", "diter", ")", "\n", "", "else", ":", "\n", "                ", "diter", "=", "self", ".", "__getattribute__", "(", "name", ")", "\n", "\n", "", "", "return", "self", ".", "batch_to_device", "(", "next", "(", "diter", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.trainers.semisupervised.SSLTrainer.get_sup_batch": [[56, 58], ["semisupervised.SSLTrainer._get_batch"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.trainers.adaptation.AdaptationTrainer._get_batch"], ["", "def", "get_sup_batch", "(", "self", ",", "task", "=", "\"ner\"", ",", "dataloader_idx", "=", "0", ")", ":", "\n", "        ", "return", "self", ".", "_get_batch", "(", "\"sup\"", ",", "task", ",", "dataloader_idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.trainers.semisupervised.SSLTrainer.get_unsup_batch": [[59, 61], ["semisupervised.SSLTrainer._get_batch"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.trainers.adaptation.AdaptationTrainer._get_batch"], ["", "def", "get_unsup_batch", "(", "self", ",", "task", "=", "\"ner\"", ",", "dataloader_idx", "=", "0", ")", ":", "\n", "        ", "return", "self", ".", "_get_batch", "(", "\"unsup\"", ",", "task", ",", "dataloader_idx", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.suamin_t2ner.trainers.multitask.MultiTaskNERTrainer.__init__": [[12, 15], ["train.BaseTrainer.__init__", "multitask.MultiTaskNERTrainer.load_data"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.annotate.annotate.SentAnnObj.__init__", "home.repos.pwc.inspect_result.suamin_t2ner.trainers.adaptation.AdaptationTrainer.load_data"], ["    ", "def", "__init__", "(", "self", ",", "training_args", ",", "model_args", ",", "exp_args", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "training_args", ",", "model_args", ",", "exp_args", ")", "\n", "self", ".", "load_data", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.trainers.multitask.MultiTaskNERTrainer.load_data": [[16, 65], ["data_kwargs.pop", "data.MultiData", "dict", "multitask.MultiTaskNERTrainer.data.register_training_datasets_with_labels", "multitask.MultiTaskNERTrainer.register_model_validation_datasets", "multitask.MultiTaskNERTrainer.load_eval_data", "multitask.MultiTaskNERTrainer.config_kwargs.update", "multitask.MultiTaskNERTrainer.parse_input_to_dataset_metadata", "dict", "multitask.MultiTaskNERTrainer.parse_input_to_dataset_metadata"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.data.multi_dataset.MultiData.register_training_datasets_with_labels", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.register_model_validation_datasets", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.load_eval_data", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.base.TrainInferenceUtils.parse_input_to_dataset_metadata", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.base.TrainInferenceUtils.parse_input_to_dataset_metadata"], ["", "def", "load_data", "(", "self", ")", ":", "\n", "        ", "train_metadata_list", "=", "[", "\n", "self", ".", "parse_input_to_dataset_metadata", "(", "item", ")", "\n", "for", "item", "in", "self", ".", "exp_args", ".", "train_datasets", "\n", "]", "\n", "train_datasets", "=", "[", "metadata", "[", "\"name\"", "]", "for", "metadata", "in", "train_metadata_list", "]", "\n", "\n", "if", "self", ".", "exp_args", ".", "valid_datasets", ":", "\n", "            ", "valid_datasets", "=", "[", "\n", "self", ".", "parse_input_to_dataset_metadata", "(", "item", ")", "[", "\"name\"", "]", "\n", "for", "item", "in", "self", ".", "exp_args", ".", "valid_datasets", "\n", "if", "item", "in", "train_datasets", "# make sure valid split is in train set", "\n", "]", "\n", "", "else", ":", "\n", "            ", "valid_datasets", "=", "train_datasets", "\n", "\n", "", "data_kwargs", "=", "self", ".", "data_kwargs", "\n", "data_dir", "=", "data_kwargs", ".", "pop", "(", "\"preprocessed_data_dir\"", ")", "\n", "\n", "self", ".", "data", "=", "MultiData", "(", "data_dir", ",", "train_metadata_list", ",", "**", "data_kwargs", ")", "\n", "self", ".", "data", ".", "train_metadata", "=", "dict", "(", "\n", "max_examples", "=", "self", ".", "exp_args", ".", "max_num_train_examples", ",", "\n", "private", "=", "self", ".", "exp_args", ".", "use_private_clf", "\n", ")", "\n", "self", ".", "data", ".", "register_training_datasets_with_labels", "(", "train_datasets", ")", "\n", "self", ".", "register_model_validation_datasets", "(", "valid_datasets", ")", "\n", "self", ".", "load_eval_data", "(", "train_datasets", "=", "train_datasets", ")", "\n", "\n", "# Config kwargs that will be hooked to model config file", "\n", "self", ".", "config_kwargs", ".", "update", "(", "dict", "(", "\n", "multidata_type", "=", "self", ".", "data", ".", "type", ",", "\n", "heads_info", "=", "self", ".", "data", ".", "heads_info", ",", "\n", "lang2id", "=", "self", ".", "data", ".", "lang2id", ",", "\n", "domain2id", "=", "self", ".", "data", ".", "domain2id", ",", "\n", "langs", "=", "self", ".", "data", ".", "langs", ",", "\n", "domains", "=", "self", ".", "data", ".", "domains", ",", "\n", "private_clf", "=", "self", ".", "exp_args", ".", "use_private_clf", ",", "\n", "shared_clf", "=", "self", ".", "exp_args", ".", "use_shared_clf", ",", "\n", "all_shared", "=", "self", ".", "exp_args", ".", "use_all_shared_clf", ",", "\n", "num_shared_labels", "=", "self", ".", "data", ".", "total_shared_labels", ",", "\n", "shared_label2id", "=", "self", ".", "data", ".", "shared_label2id", ",", "\n", "shared_id2label", "=", "self", ".", "data", ".", "shared_id2label", ",", "\n", "ignore_metadata", "=", "self", ".", "exp_args", ".", "ignore_metadata", ",", "\n", "add_lang_clf", "=", "self", ".", "exp_args", ".", "add_lang_clf", ",", "\n", "add_domain_clf", "=", "self", ".", "exp_args", ".", "add_domain_clf", ",", "\n", "add_type_clf", "=", "self", ".", "exp_args", ".", "add_type_clf", ",", "\n", "add_all_outside_clf", "=", "self", ".", "exp_args", ".", "add_all_outside_clf", ",", "\n", "add_lm", "=", "self", ".", "exp_args", ".", "add_lm", ",", "\n", "pooling", "=", "self", ".", "exp_args", ".", "pooling", "\n", ")", ")", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.trainers.multitask.MultiTaskNERTrainer.batch_to_device": [[67, 72], ["inputs[].items", "tensor.to"], "methods", ["None"], ["", "def", "batch_to_device", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "for", "key", "in", "inputs", ":", "\n", "            ", "for", "tensor_name", ",", "tensor", "in", "inputs", "[", "key", "]", ".", "items", "(", ")", ":", "\n", "                ", "inputs", "[", "key", "]", "[", "tensor_name", "]", "=", "tensor", ".", "to", "(", "self", ".", "device", ")", "\n", "", "", "return", "inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.trainers.multitask.MultiTaskNERTrainer.before_train": [[73, 81], ["multitask.MultiTaskNERTrainer.load_train_data", "dict", "multitask.MultiTaskNERTrainer.configure_optimization"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.load_train_data", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.configure_optimization"], ["", "def", "before_train", "(", "self", ")", ":", "\n", "        ", "self", ".", "load_train_data", "(", ")", "\n", "self", ".", "model_optim_config", "=", "dict", "(", "\n", "model", "=", "self", ".", "model", ",", "\n", "optim", "=", "\"adamw\"", ",", "\n", "lr_scheduler", "=", "self", ".", "exp_args", ".", "lr_scheduler", "\n", ")", "\n", "self", ".", "configure_optimization", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.trainers.multitask.MultiTaskNERTrainer.run_epoch": [[82, 142], ["multitask.MultiTaskNERTrainer.data.to_iter", "multitask.MultiTaskNERTrainer.data.to_iter", "next", "multitask.MultiTaskNERTrainer.batch_to_device", "model.train", "model", "multitask.MultiTaskNERTrainer.joint_loss", "multitask.MultiTaskNERTrainer.model_backward", "multitask.MultiTaskNERTrainer.stats[].append", "next", "multitask.MultiTaskNERTrainer.batch_to_device", "model", "aux_losses.append", "multitask.MultiTaskNERTrainer.adjust_loss().item", "multitask.MultiTaskNERTrainer.clip_grad_norm_", "multitask.MultiTaskNERTrainer.model_update", "multitask.MultiTaskNERTrainer.update_lr", "multitask.MultiTaskNERTrainer.model_zero_grad", "multitask.MultiTaskNERTrainer.do_logging_step", "multitask.MultiTaskNERTrainer.do_save_step", "multitask.MultiTaskNERTrainer.epoch_iterator.close", "sum", "len", "model.parameters", "sum", "aux_outputs.values", "multitask.MultiTaskNERTrainer.adjust_loss"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.data.base.BaseData.to_iter", "home.repos.pwc.inspect_result.suamin_t2ner.data.base.BaseData.to_iter", "home.repos.pwc.inspect_result.suamin_t2ner.trainers.adaptation.AdaptationTrainer.batch_to_device", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.train", "home.repos.pwc.inspect_result.suamin_t2ner.models.base.TransformersUtils.model", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.joint_loss", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.model_backward", "home.repos.pwc.inspect_result.suamin_t2ner.trainers.adaptation.AdaptationTrainer.batch_to_device", "home.repos.pwc.inspect_result.suamin_t2ner.models.base.TransformersUtils.model", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.clip_grad_norm_", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.model_update", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.update_lr", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.model_zero_grad", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.do_logging_step", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.do_save_step", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.adjust_loss"], ["", "def", "run_epoch", "(", "self", ")", ":", "\n", "        ", "train_dataloader", "=", "self", ".", "train_data", "[", "\"ner\"", "]", "\n", "train_iter", "=", "self", ".", "data", ".", "to_iter", "(", "train_dataloader", ")", "\n", "\n", "if", "\"lm\"", "in", "self", ".", "train_data", ":", "\n", "            ", "train_lm_dataloader", "=", "self", ".", "train_data", "[", "\"lm\"", "]", "\n", "train_lm_iter", "=", "self", ".", "data", ".", "to_iter", "(", "train_lm_dataloader", ")", "\n", "has_lm", "=", "True", "\n", "", "else", ":", "\n", "            ", "has_lm", "=", "False", "\n", "\n", "", "model", "=", "self", ".", "model", "\n", "\n", "for", "self", ".", "step", "in", "self", ".", "epoch_iterator", ":", "\n", "            ", "inputs", "=", "next", "(", "train_iter", ")", "\n", "inputs", "=", "self", ".", "batch_to_device", "(", "inputs", ")", "\n", "model", ".", "train", "(", ")", "\n", "\n", "outputs", ",", "aux_outputs", "=", "model", "(", "inputs", ")", "\n", "main_losses", "=", "[", "outputs", "[", "pred_layer", "]", "[", "\"ner\"", "]", "[", "\"loss\"", "]", "for", "pred_layer", "in", "outputs", "]", "\n", "\n", "if", "aux_outputs", ":", "\n", "                ", "aux_losses", "=", "[", "item", "[", "\"loss\"", "]", "for", "item", "in", "aux_outputs", ".", "values", "(", ")", "]", "\n", "", "else", ":", "\n", "                ", "aux_losses", "=", "[", "]", "\n", "\n", "", "if", "has_lm", ":", "\n", "                ", "lm_inputs", "=", "next", "(", "train_lm_iter", ")", "\n", "lm_inputs", "=", "self", ".", "batch_to_device", "(", "lm_inputs", ")", "\n", "lm_outputs", "=", "model", "(", "lm_inputs", ",", "is_lm", "=", "True", ")", "\n", "lm_loss", "=", "sum", "(", "[", "outputs", "[", "pred_layer", "]", "[", "\"loss\"", "]", "for", "pred_layer", "in", "lm_outputs", "]", ")", "/", "len", "(", "lm_outputs", ")", "\n", "aux_losses", ".", "append", "(", "lm_loss", ")", "\n", "\n", "", "if", "not", "aux_losses", ":", "\n", "                ", "aux_losses", "=", "None", "\n", "\n", "", "loss", "=", "self", ".", "joint_loss", "(", "main_losses", ",", "aux_losses", ",", "lmbda", "=", "self", ".", "exp_args", ".", "aux_lmbda", ")", "\n", "\n", "self", ".", "model_backward", "(", "loss", ")", "\n", "self", ".", "stats", "[", "\"batch_train_loss\"", "]", ".", "append", "(", "self", ".", "adjust_loss", "(", "loss", ")", ".", "item", "(", ")", ")", "\n", "self", ".", "num_batches_seen", "+=", "1", "\n", "\n", "if", "self", ".", "is_update_step", ":", "\n", "                ", "self", ".", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ")", "\n", "self", ".", "model_update", "(", ")", "\n", "self", ".", "global_step", "+=", "1", "\n", "self", ".", "update_lr", "(", ")", "\n", "self", ".", "model_zero_grad", "(", ")", "\n", "\n", "logs", "=", "{", "}", "\n", "logs", "[", "\"loss\"", "]", "=", "sum", "(", "self", ".", "stats", "[", "\"batch_train_loss\"", "]", ")", "/", "self", ".", "num_batches_seen", "\n", "logs", "[", "\"epoch\"", "]", "=", "self", ".", "progress", "\n", "logs", "[", "\"step\"", "]", "=", "self", ".", "global_step", "\n", "\n", "self", ".", "do_logging_step", "(", "model", ",", "logs", ",", "evaluate", "=", "True", ")", "\n", "self", ".", "do_save_step", "(", "model", ")", "\n", "\n", "", "if", "self", ".", "is_max_step", ":", "\n", "                ", "self", ".", "epoch_iterator", ".", "close", "(", ")", "\n", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.trainers.ner.NERTrainer.__init__": [[12, 15], ["train.BaseTrainer.__init__", "ner.NERTrainer.load_data"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.annotate.annotate.SentAnnObj.__init__", "home.repos.pwc.inspect_result.suamin_t2ner.trainers.adaptation.AdaptationTrainer.load_data"], ["    ", "def", "__init__", "(", "self", ",", "training_args", ",", "model_args", ",", "exp_args", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "training_args", ",", "model_args", ",", "exp_args", ")", "\n", "self", ".", "load_data", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.trainers.ner.NERTrainer.load_data": [[16, 45], ["ner.NERTrainer.parse_input_to_dataset_metadata", "data_kwargs.pop", "data.SimpleData", "ner.NERTrainer.register_model_validation_datasets", "ner.NERTrainer.load_eval_data", "ner.NERTrainer.data.get_label_maps", "ner.NERTrainer.data.get_type_maps", "ner.NERTrainer.config_kwargs.update", "dict", "ner.NERTrainer.data.get_train_dataset", "ner.NERTrainer.get_class_counts"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.t2ner.base.TrainInferenceUtils.parse_input_to_dataset_metadata", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.register_model_validation_datasets", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.load_eval_data", "home.repos.pwc.inspect_result.suamin_t2ner.data.base.BaseData.get_label_maps", "home.repos.pwc.inspect_result.suamin_t2ner.data.base.BaseData.get_type_maps", "home.repos.pwc.inspect_result.suamin_t2ner.data.base.BaseData.get_train_dataset", "home.repos.pwc.inspect_result.suamin_t2ner.data.ner.NERDataset.get_class_counts"], ["", "def", "load_data", "(", "self", ")", ":", "\n", "# Standardize input into right format as metadata", "\n", "        ", "metadata", "=", "self", ".", "parse_input_to_dataset_metadata", "(", "self", ".", "exp_args", ".", "train_dataset", ")", "\n", "# Override the max_examples if max_num_train_examples is provided separately", "\n", "if", "self", ".", "exp_args", ".", "max_num_train_examples", ">", "0", ":", "\n", "            ", "metadata", "[", "\"max_examples\"", "]", "=", "self", ".", "exp_args", ".", "max_num_train_examples", "\n", "\n", "", "data_kwargs", "=", "self", ".", "data_kwargs", "\n", "data_dir", "=", "data_kwargs", ".", "pop", "(", "\"preprocessed_data_dir\"", ")", "\n", "\n", "self", ".", "data", "=", "SimpleData", "(", "data_dir", ",", "metadata", ",", "**", "data_kwargs", ")", "\n", "# In this setting we only use validation set of training dataset", "\n", "self", ".", "register_model_validation_datasets", "(", "metadata", "[", "\"name\"", "]", ")", "\n", "self", ".", "load_eval_data", "(", "train_datasets", "=", "[", "metadata", "[", "\"name\"", "]", ",", "]", ")", "\n", "\n", "# Config kwargs that will be hooked to model config file", "\n", "id2label", ",", "label2id", "=", "self", ".", "data", ".", "get_label_maps", "(", "metadata", "[", "\"name\"", "]", ")", "\n", "id2type", ",", "type2id", "=", "self", ".", "data", ".", "get_type_maps", "(", "metadata", "[", "\"name\"", "]", ")", "\n", "\n", "self", ".", "config_kwargs", ".", "update", "(", "dict", "(", "\n", "label2id", "=", "label2id", ",", "id2label", "=", "id2label", ",", "\n", "type2id", "=", "type2id", ",", "id2type", "=", "id2type", "\n", ")", ")", "\n", "\n", "# For LDAM we need additional information about class frequencies", "\n", "if", "self", ".", "model_args", ".", "loss_fct", "==", "\"ldam\"", "and", "self", ".", "training_args", ".", "do_train", ":", "\n", "            ", "train_dataset", "=", "self", ".", "data", ".", "get_train_dataset", "(", "metadata", ")", "\n", "class_num_list", "=", "train_dataset", ".", "get_class_counts", "(", ")", "\n", "self", ".", "config_kwargs", "[", "\"class_num_list\"", "]", "=", "class_num_list", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.trainers.ner.NERTrainer.batch_to_device": [[46, 48], ["tensor.to", "inputs.items"], "methods", ["None"], ["", "", "def", "batch_to_device", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "return", "{", "tensor_name", ":", "tensor", ".", "to", "(", "self", ".", "device", ")", "for", "tensor_name", ",", "tensor", "in", "inputs", ".", "items", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.trainers.ner.NERTrainer.before_train": [[49, 57], ["ner.NERTrainer.load_train_data", "dict", "ner.NERTrainer.configure_optimization"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.load_train_data", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.configure_optimization"], ["", "def", "before_train", "(", "self", ")", ":", "\n", "        ", "self", ".", "load_train_data", "(", ")", "\n", "self", ".", "model_optim_config", "=", "dict", "(", "\n", "model", "=", "self", ".", "model", ",", "\n", "optim", "=", "\"adamw\"", ",", "\n", "lr_scheduler", "=", "self", ".", "exp_args", ".", "lr_scheduler", "\n", ")", "\n", "self", ".", "configure_optimization", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.trainers.ner.NERTrainer.run_epoch": [[58, 94], ["ner.NERTrainer.data.to_iter", "next", "ner.NERTrainer.batch_to_device", "model.train", "model", "ner.NERTrainer.model_backward", "ner.NERTrainer.stats[].append", "ner.NERTrainer.adjust_loss().item", "ner.NERTrainer.clip_grad_norm_", "ner.NERTrainer.model_update", "ner.NERTrainer.update_lr", "ner.NERTrainer.model_zero_grad", "ner.NERTrainer.do_logging_step", "ner.NERTrainer.do_save_step", "ner.NERTrainer.epoch_iterator.close", "model.parameters", "sum", "ner.NERTrainer.adjust_loss"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.data.base.BaseData.to_iter", "home.repos.pwc.inspect_result.suamin_t2ner.trainers.adaptation.AdaptationTrainer.batch_to_device", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.train", "home.repos.pwc.inspect_result.suamin_t2ner.models.base.TransformersUtils.model", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.model_backward", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.clip_grad_norm_", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.model_update", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.update_lr", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.model_zero_grad", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.do_logging_step", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.do_save_step", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.adjust_loss"], ["", "def", "run_epoch", "(", "self", ")", ":", "\n", "        ", "train_dataloader", "=", "self", ".", "train_data", "[", "\"ner\"", "]", "\n", "train_iter", "=", "self", ".", "data", ".", "to_iter", "(", "train_dataloader", ")", "\n", "\n", "model", "=", "self", ".", "model", "\n", "\n", "for", "self", ".", "step", "in", "self", ".", "epoch_iterator", ":", "\n", "            ", "inputs", "=", "next", "(", "train_iter", ")", "\n", "inputs", "=", "self", ".", "batch_to_device", "(", "inputs", ")", "\n", "model", ".", "train", "(", ")", "\n", "\n", "outputs", "=", "model", "(", "inputs", ")", "\n", "loss", "=", "outputs", "[", "\"ner\"", "]", "[", "\"loss\"", "]", "\n", "\n", "self", ".", "model_backward", "(", "loss", ")", "\n", "self", ".", "stats", "[", "\"batch_train_loss\"", "]", ".", "append", "(", "self", ".", "adjust_loss", "(", "loss", ")", ".", "item", "(", ")", ")", "\n", "self", ".", "num_batches_seen", "+=", "1", "\n", "\n", "if", "self", ".", "is_update_step", ":", "\n", "                ", "self", ".", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ")", "\n", "self", ".", "model_update", "(", ")", "\n", "self", ".", "global_step", "+=", "1", "\n", "self", ".", "update_lr", "(", ")", "\n", "self", ".", "model_zero_grad", "(", ")", "\n", "\n", "logs", "=", "{", "}", "\n", "logs", "[", "\"loss\"", "]", "=", "sum", "(", "self", ".", "stats", "[", "\"batch_train_loss\"", "]", ")", "/", "self", ".", "num_batches_seen", "\n", "logs", "[", "\"epoch\"", "]", "=", "self", ".", "progress", "\n", "logs", "[", "\"step\"", "]", "=", "self", ".", "global_step", "\n", "\n", "self", ".", "do_logging_step", "(", "model", ",", "logs", ",", "evaluate", "=", "True", ")", "\n", "self", ".", "do_save_step", "(", "model", ")", "\n", "\n", "", "if", "self", ".", "is_max_step", ":", "\n", "                ", "self", ".", "epoch_iterator", ".", "close", "(", ")", "\n", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.trainers.adaptation.AdaptationTrainer.__init__": [[9, 12], ["train.BaseTrainer.__init__", "adaptation.AdaptationTrainer.load_data"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.annotate.annotate.SentAnnObj.__init__", "home.repos.pwc.inspect_result.suamin_t2ner.trainers.adaptation.AdaptationTrainer.load_data"], ["    ", "def", "__init__", "(", "self", ",", "training_args", ",", "model_args", ",", "exp_args", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "training_args", ",", "model_args", ",", "exp_args", ")", "\n", "self", ".", "load_data", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.trainers.adaptation.AdaptationTrainer.load_data": [[13, 36], ["adaptation.AdaptationTrainer.parse_input_to_dataset_metadata", "adaptation.AdaptationTrainer.parse_input_to_dataset_metadata", "data_kwargs.pop", "data.SimpleAdaptationData", "adaptation.AdaptationTrainer.register_model_validation_datasets", "adaptation.AdaptationTrainer.load_eval_data", "adaptation.AdaptationTrainer.data.get_label_maps", "adaptation.AdaptationTrainer.data.get_type_maps", "dict", "hasattr", "adaptation.AdaptationTrainer.config_kwargs.update"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.t2ner.base.TrainInferenceUtils.parse_input_to_dataset_metadata", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.base.TrainInferenceUtils.parse_input_to_dataset_metadata", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.register_model_validation_datasets", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.load_eval_data", "home.repos.pwc.inspect_result.suamin_t2ner.data.base.BaseData.get_label_maps", "home.repos.pwc.inspect_result.suamin_t2ner.data.base.BaseData.get_type_maps"], ["", "def", "load_data", "(", "self", ")", ":", "\n", "        ", "src_metadata", "=", "self", ".", "parse_input_to_dataset_metadata", "(", "self", ".", "exp_args", ".", "src_dataset", ")", "\n", "tgt_metadata", "=", "self", ".", "parse_input_to_dataset_metadata", "(", "self", ".", "exp_args", ".", "tgt_dataset", ")", "\n", "\n", "data_kwargs", "=", "self", ".", "data_kwargs", "\n", "data_dir", "=", "data_kwargs", ".", "pop", "(", "\"preprocessed_data_dir\"", ")", "\n", "\n", "self", ".", "data", "=", "SimpleAdaptationData", "(", "data_dir", ",", "src_metadata", ",", "tgt_metadata", ",", "**", "data_kwargs", ")", "\n", "# In this setting we only use src validation set of training dataset", "\n", "self", ".", "register_model_validation_datasets", "(", "src_metadata", "[", "\"name\"", "]", ")", "\n", "self", ".", "load_eval_data", "(", "train_datasets", "=", "[", "src_metadata", "[", "\"name\"", "]", ",", "tgt_metadata", "[", "\"name\"", "]", "]", ")", "\n", "\n", "# Config kwargs that will be hooked to model config file", "\n", "id2label", ",", "label2id", "=", "self", ".", "data", ".", "get_label_maps", "(", "src_metadata", "[", "\"name\"", "]", ")", "\n", "id2type", ",", "type2id", "=", "self", ".", "data", ".", "get_type_maps", "(", "src_metadata", "[", "\"name\"", "]", ")", "\n", "\n", "update_config_kwargs", "=", "dict", "(", "\n", "label2id", "=", "label2id", ",", "id2label", "=", "id2label", ",", "\n", "type2id", "=", "type2id", ",", "id2type", "=", "id2type", "\n", ")", "\n", "if", "hasattr", "(", "self", ".", "exp_args", ",", "\"pooling\"", ")", ":", "\n", "            ", "update_config_kwargs", "[", "\"pooling\"", "]", "=", "self", ".", "exp_args", ".", "pooling", "\n", "", "self", ".", "config_kwargs", ".", "update", "(", "update_config_kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.trainers.adaptation.AdaptationTrainer.batch_to_device": [[37, 39], ["tensor.to", "inputs.items"], "methods", ["None"], ["", "def", "batch_to_device", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "return", "{", "tensor_name", ":", "tensor", ".", "to", "(", "self", ".", "device", ")", "for", "tensor_name", ",", "tensor", "in", "inputs", ".", "items", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.trainers.adaptation.AdaptationTrainer._get_batch": [[40, 59], ["adaptation.AdaptationTrainer.batch_to_device", "next", "hasattr", "adaptation.AdaptationTrainer.data.to_iter", "adaptation.AdaptationTrainer.__setattr__", "adaptation.AdaptationTrainer.__getattribute__", "hasattr", "adaptation.AdaptationTrainer.data.to_iter", "adaptation.AdaptationTrainer.__setattr__", "adaptation.AdaptationTrainer.__getattribute__"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.trainers.adaptation.AdaptationTrainer.batch_to_device", "home.repos.pwc.inspect_result.suamin_t2ner.data.base.BaseData.to_iter", "home.repos.pwc.inspect_result.suamin_t2ner.data.base.BaseData.to_iter"], ["", "def", "_get_batch", "(", "self", ",", "src_or_tgt", ",", "task", "=", "\"ner\"", ",", "dataloader_idx", "=", "0", ")", ":", "\n", "        ", "if", "task", "==", "\"ner\"", ":", "\n", "            ", "name", "=", "\"{}_ner_{}_train_iter\"", ".", "format", "(", "src_or_tgt", ",", "dataloader_idx", ")", "\n", "if", "not", "hasattr", "(", "self", ",", "name", ")", ":", "\n", "                ", "dataloader", "=", "self", ".", "train_data", "[", "task", "]", "[", "src_or_tgt", "]", "[", "dataloader_idx", "]", "\n", "diter", "=", "self", ".", "data", ".", "to_iter", "(", "dataloader", ")", "\n", "self", ".", "__setattr__", "(", "name", ",", "diter", ")", "\n", "", "else", ":", "\n", "                ", "diter", "=", "self", ".", "__getattribute__", "(", "name", ")", "\n", "", "", "else", ":", "\n", "            ", "name", "=", "\"{}_{}_train_iter\"", ".", "format", "(", "src_or_tgt", ",", "task", ")", "\n", "if", "not", "hasattr", "(", "self", ",", "name", ")", ":", "\n", "                ", "dataloader", "=", "self", ".", "train_data", "[", "task", "]", "[", "src_or_tgt", "]", "\n", "diter", "=", "self", ".", "data", ".", "to_iter", "(", "dataloader", ")", "\n", "self", ".", "__setattr__", "(", "name", ",", "diter", ")", "\n", "", "else", ":", "\n", "                ", "diter", "=", "self", ".", "__getattribute__", "(", "name", ")", "\n", "\n", "", "", "return", "self", ".", "batch_to_device", "(", "next", "(", "diter", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.trainers.adaptation.AdaptationTrainer.get_src_batch": [[60, 62], ["adaptation.AdaptationTrainer._get_batch"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.trainers.adaptation.AdaptationTrainer._get_batch"], ["", "def", "get_src_batch", "(", "self", ",", "task", "=", "\"ner\"", ",", "dataloader_idx", "=", "0", ")", ":", "\n", "        ", "return", "self", ".", "_get_batch", "(", "\"src\"", ",", "task", ",", "dataloader_idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.trainers.adaptation.AdaptationTrainer.get_tgt_batch": [[63, 65], ["adaptation.AdaptationTrainer._get_batch"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.trainers.adaptation.AdaptationTrainer._get_batch"], ["", "def", "get_tgt_batch", "(", "self", ",", "task", "=", "\"ner\"", ",", "dataloader_idx", "=", "0", ")", ":", "\n", "        ", "return", "self", ".", "_get_batch", "(", "\"tgt\"", ",", "task", ",", "dataloader_idx", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.suamin_t2ner.unsup_adaptation.emd.EMDTrainer.__init__": [[15, 17], ["adaptation.AdaptationTrainer.__init__"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.annotate.annotate.SentAnnObj.__init__"], ["    ", "def", "__init__", "(", "self", ",", "training_args", ",", "model_args", ",", "exp_args", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "training_args", ",", "model_args", ",", "exp_args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.unsup_adaptation.emd.EMDTrainer.before_train": [[18, 59], ["emd.EMDTrainer.load_train_data", "emd.EMDTrainer.register_model", "dict", "dict", "emd.EMDTrainer.configure_optimization", "modules.SeqWassersteinCritic", "modules.WassersteinCritic", "dict"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.load_train_data", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.register_model", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.configure_optimization"], ["", "def", "before_train", "(", "self", ")", ":", "\n", "        ", "self", ".", "load_train_data", "(", "k", "=", "2", ")", "\n", "model", "=", "self", ".", "model", "\n", "\n", "# Create critic", "\n", "if", "self", ".", "exp_args", ".", "pooling", "is", "None", ":", "\n", "            ", "critic", "=", "SeqWassersteinCritic", "(", "\n", "model", ".", "config", ".", "hidden_size", ",", "\n", "num_layers", "=", "self", ".", "exp_args", ".", "num_critic_layers", ",", "\n", "dropout", "=", "self", ".", "exp_args", ".", "critic_dropout", "\n", ")", "\n", "self", ".", "pool", "=", "False", "\n", "", "else", ":", "\n", "            ", "critic", "=", "WassersteinCritic", "(", "\n", "model", ".", "config", ".", "hidden_size", ",", "\n", "num_layers", "=", "self", ".", "exp_args", ".", "num_critic_layers", ",", "\n", "dropout", "=", "self", ".", "exp_args", ".", "critic_dropout", "\n", ")", "\n", "self", ".", "pool", "=", "True", "\n", "", "self", ".", "register_model", "(", "critic", ",", "name", "=", "\"critic\"", ")", "\n", "\n", "model_optim_config", "=", "dict", "(", ")", "\n", "extended_optim_config_dict", "=", "dict", "(", ")", "\n", "\n", "for", "name", ",", "lr", ",", "sched_name", "in", "[", "\n", "(", "\"model\"", ",", "self", ".", "training_args", ".", "learning_rate", ",", "self", ".", "exp_args", ".", "lr_scheduler", ")", ",", "\n", "(", "\"critic\"", ",", "self", ".", "exp_args", ".", "learning_rate_critic", ",", "self", ".", "exp_args", ".", "lr_scheduler_critic", ")", "\n", "]", ":", "\n", "            ", "optim_config", "=", "dict", "(", "\n", "optim", "=", "\"adamw\"", ",", "optim_kwargs", "=", "{", "\"lr\"", ":", "lr", "}", ",", "lr_scheduler", "=", "sched_name", "\n", ")", "\n", "if", "name", "==", "\"model\"", ":", "\n", "                ", "optim_config", "[", "\"model\"", "]", "=", "model", "\n", "model_optim_config", "=", "optim_config", "\n", "", "elif", "name", "==", "\"critic\"", ":", "\n", "                ", "optim_config", "[", "\"critic\"", "]", "=", "critic", "\n", "extended_optim_config_dict", "[", "name", "]", "=", "optim_config", "\n", "\n", "", "", "self", ".", "model_optim_config", "=", "model_optim_config", "\n", "self", ".", "extended_optim_config_dict", "=", "extended_optim_config_dict", "\n", "self", ".", "configure_optimization", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.unsup_adaptation.emd.EMDTrainer.gradient_penalty": [[60, 101], ["torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "grad.norm", "grad_pen.sum.sum.mean", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.Variable", "torch.Variable", "torch.rand().unsqueeze().to", "torch.rand().unsqueeze().to", "torch.rand().unsqueeze().to", "torch.rand().unsqueeze().to", "torch.Variable", "torch.Variable", "torch.grad", "torch.grad", "grad_pen.sum.sum.sum", "critic", "critic", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand().unsqueeze", "torch.rand().unsqueeze", "torch.rand().unsqueeze", "torch.rand().unsqueeze", "outputs.size", "torch.rand", "torch.rand", "torch.rand", "torch.rand"], "methods", ["None"], ["", "def", "gradient_penalty", "(", "self", ",", "xs", ",", "xt", ",", "critic", ",", "masks", "=", "None", ",", "maskt", "=", "None", ")", ":", "\n", "        ", "\"\"\"Modified from: \n        \n        https://github.com/caogang/wgan-gp/blob/master/gan_mnist.py#L129\n        \n        \"\"\"", "\n", "if", "self", ".", "pool", ":", "\n", "            ", "eps", "=", "torch", ".", "rand", "(", "xs", ".", "shape", "[", "0", "]", ",", "1", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "# linearly interpolated pairs", "\n", "inputs", "=", "eps", "*", "xs", "+", "(", "(", "1", "-", "eps", ")", "*", "xt", ")", "\n", "inputs", "=", "autograd", ".", "Variable", "(", "inputs", ",", "requires_grad", "=", "True", ")", "\n", "outputs", "=", "critic", "(", "inputs", ")", "[", "\"logits\"", "]", "\n", "", "else", ":", "\n", "            ", "eps", "=", "torch", ".", "rand", "(", "xs", ".", "shape", "[", ":", "-", "1", "]", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "if", "masks", "is", "not", "None", "and", "maskt", "is", "not", "None", ":", "\n", "                ", "mask", "=", "masks", "*", "maskt", "\n", "", "else", ":", "\n", "                ", "mask", "=", "None", "\n", "", "inputs", "=", "eps", "*", "xs", "+", "(", "(", "1", "-", "eps", ")", "*", "xt", ")", "\n", "inputs", "=", "autograd", ".", "Variable", "(", "inputs", ",", "requires_grad", "=", "True", ")", "\n", "outputs", "=", "critic", "(", "inputs", ",", "mask", "=", "mask", ")", "[", "\"logits\"", "]", "\n", "\n", "", "grad_outputs", "=", "torch", ".", "ones", "(", "outputs", ".", "size", "(", ")", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "grad", "=", "autograd", ".", "grad", "(", "\n", "inputs", "=", "inputs", ",", "outputs", "=", "outputs", ",", "grad_outputs", "=", "grad_outputs", ",", "\n", "create_graph", "=", "True", ",", "retain_graph", "=", "True", ",", "only_inputs", "=", "True", "\n", ")", "[", "0", "]", "\n", "grad_norm", "=", "grad", ".", "norm", "(", "2", ",", "dim", "=", "-", "1", ")", "\n", "\n", "if", "not", "self", ".", "pool", ":", "\n", "            ", "if", "mask", "is", "not", "None", ":", "\n", "                ", "grad_pen", "=", "(", "(", "grad_norm", "-", "1", ")", "*", "mask", ")", "**", "2", "\n", "", "else", ":", "\n", "                ", "grad_pen", "=", "(", "grad_norm", "-", "1", ")", "**", "2", "\n", "", "grad_pen", "=", "grad_pen", ".", "sum", "(", "1", ")", "\n", "", "else", ":", "\n", "            ", "grad_pen", "=", "(", "grad_norm", "-", "1", ")", "**", "2", "\n", "\n", "", "grad_pen", "=", "grad_pen", ".", "mean", "(", ")", "\n", "\n", "return", "grad_pen", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.unsup_adaptation.emd.EMDTrainer.critic_half_score": [[102, 111], ["critic", "batch.get", "critic"], "methods", ["None"], ["", "def", "critic_half_score", "(", "self", ",", "encoded", ",", "batch", ",", "critic", ")", ":", "\n", "        ", "if", "self", ".", "pool", ":", "\n", "            ", "x", "=", "encoded", "[", "\"pooled\"", "]", "\n", "c", "=", "critic", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "encoded", "[", "\"seq\"", "]", "\n", "mask", "=", "batch", ".", "get", "(", "\"input_mask\"", ",", "None", ")", "\n", "c", "=", "critic", "(", "x", ",", "mask", "=", "mask", ")", "\n", "", "return", "x", ",", "c", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.unsup_adaptation.emd.EMDTrainer.emd_train_step": [[112, 188], ["emd.EMDTrainer.freeze", "emd.EMDTrainer.unfreeze", "range", "emd.EMDTrainer.unfreeze", "emd.EMDTrainer.freeze", "emd.EMDTrainer.get_src_batch", "emd.EMDTrainer.get_tgt_batch", "emd.EMDTrainer.model_zero_grad", "model", "emd.EMDTrainer.model_backward", "emd.EMDTrainer.critic_half_score", "emd.EMDTrainer.model_backward", "emd.EMDTrainer.critic_half_score", "emd.EMDTrainer.model_backward", "emd.EMDTrainer.get_src_batch", "emd.EMDTrainer.critic_half_score", "emd.EMDTrainer.model_backward", "emd.EMDTrainer.get_tgt_batch", "emd.EMDTrainer.critic_half_score", "emd.EMDTrainer.model_backward", "emd.EMDTrainer.model_update", "emd.EMDTrainer.update_lr", "emd.EMDTrainer.model_zero_grad", "model", "emd.EMDTrainer.gradient_penalty", "critic.parameters", "model", "model", "emd.EMDTrainer.gradient_penalty", "critic.parameters", "emd.EMDTrainer.get", "emd.EMDTrainer.get", "p.data.clamp_", "emd.EMDTrainer.get", "emd.EMDTrainer.get", "p.data.clamp_"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.models.base.TransformersUtils.freeze", "home.repos.pwc.inspect_result.suamin_t2ner.models.base.TransformersUtils.unfreeze", "home.repos.pwc.inspect_result.suamin_t2ner.models.base.TransformersUtils.unfreeze", "home.repos.pwc.inspect_result.suamin_t2ner.models.base.TransformersUtils.freeze", "home.repos.pwc.inspect_result.suamin_t2ner.trainers.adaptation.AdaptationTrainer.get_src_batch", "home.repos.pwc.inspect_result.suamin_t2ner.trainers.adaptation.AdaptationTrainer.get_tgt_batch", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.model_zero_grad", "home.repos.pwc.inspect_result.suamin_t2ner.models.base.TransformersUtils.model", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.model_backward", "home.repos.pwc.inspect_result.suamin_t2ner.unsup_adaptation.emd.EMDTrainer.critic_half_score", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.model_backward", "home.repos.pwc.inspect_result.suamin_t2ner.unsup_adaptation.emd.EMDTrainer.critic_half_score", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.model_backward", "home.repos.pwc.inspect_result.suamin_t2ner.trainers.adaptation.AdaptationTrainer.get_src_batch", "home.repos.pwc.inspect_result.suamin_t2ner.unsup_adaptation.emd.EMDTrainer.critic_half_score", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.model_backward", "home.repos.pwc.inspect_result.suamin_t2ner.trainers.adaptation.AdaptationTrainer.get_tgt_batch", "home.repos.pwc.inspect_result.suamin_t2ner.unsup_adaptation.emd.EMDTrainer.critic_half_score", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.model_backward", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.model_update", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.update_lr", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.model_zero_grad", "home.repos.pwc.inspect_result.suamin_t2ner.models.base.TransformersUtils.model", "home.repos.pwc.inspect_result.suamin_t2ner.unsup_adaptation.emd.EMDTrainer.gradient_penalty", "home.repos.pwc.inspect_result.suamin_t2ner.models.base.TransformersUtils.model", "home.repos.pwc.inspect_result.suamin_t2ner.models.base.TransformersUtils.model", "home.repos.pwc.inspect_result.suamin_t2ner.unsup_adaptation.emd.EMDTrainer.gradient_penalty"], ["", "def", "emd_train_step", "(", "self", ",", "model", ",", "critic", ")", ":", "\n", "        ", "self", ".", "freeze", "(", "model", ")", "\n", "self", ".", "unfreeze", "(", "critic", ")", "\n", "\n", "# critic iterations", "\n", "for", "_", "in", "range", "(", "self", ".", "exp_args", ".", "n_critic", ")", ":", "\n", "            ", "src", "=", "self", ".", "get_src_batch", "(", "dataloader_idx", "=", "0", ")", "\n", "encodeds", "=", "model", "(", "src", ",", "tag", "=", "False", ")", "[", "\"encoder\"", "]", "\n", "xs", ",", "cs", "=", "self", ".", "critic_half_score", "(", "encodeds", ",", "src", ",", "critic", ")", "\n", "loss_qs", "=", "cs", "[", "\"loss\"", "]", "\n", "self", ".", "model_backward", "(", "-", "loss_qs", ")", "\n", "\n", "tgt", "=", "self", ".", "get_tgt_batch", "(", "dataloader_idx", "=", "0", ")", "\n", "encodedt", "=", "model", "(", "tgt", ",", "tag", "=", "False", ")", "[", "\"encoder\"", "]", "\n", "xt", ",", "ct", "=", "self", ".", "critic_half_score", "(", "encodedt", ",", "tgt", ",", "critic", ")", "\n", "loss_qt", "=", "ct", "[", "\"loss\"", "]", "\n", "\n", "if", "self", ".", "exp_args", ".", "use_gp", ":", "\n", "                ", "gp", "=", "self", ".", "gradient_penalty", "(", "\n", "xs", ".", "data", ",", "xt", ".", "data", ",", "critic", ",", "\n", "src", ".", "get", "(", "\"input_mask\"", ",", "None", ")", ",", "\n", "tgt", ".", "get", "(", "\"input_mask\"", ",", "None", ")", "\n", ")", "\n", "loss_qt", "+=", "self", ".", "exp_args", ".", "gp_lmbda", "*", "gp", "\n", "\n", "", "self", ".", "model_backward", "(", "loss_qt", ")", "\n", "self", ".", "model_update", "(", "[", "\"critic\"", "]", ")", "\n", "self", ".", "update_lr", "(", "[", "\"critic\"", "]", ")", "\n", "self", ".", "model_zero_grad", "(", "[", "\"critic\"", "]", ")", "\n", "\n", "if", "not", "self", ".", "exp_args", ".", "use_gp", ":", "\n", "# clip critic weight to enforce Lipschitz constraint", "\n", "                ", "for", "p", "in", "critic", ".", "parameters", "(", ")", ":", "\n", "                    ", "p", ".", "data", ".", "clamp_", "(", "-", "self", ".", "exp_args", ".", "critic_clamp", ",", "self", ".", "exp_args", ".", "critic_clamp", ")", "\n", "\n", "# FIXME if model is not in 'finetune', i.e., parts of model", "\n", "# are frozen by user then this will unfreeze them?", "\n", "", "", "", "self", ".", "unfreeze", "(", "model", ")", "\n", "self", ".", "freeze", "(", "critic", ")", "\n", "\n", "src", "=", "self", ".", "get_src_batch", "(", "dataloader_idx", "=", "1", ")", "\n", "tgt", "=", "self", ".", "get_tgt_batch", "(", "dataloader_idx", "=", "1", ")", "\n", "\n", "self", ".", "model_zero_grad", "(", "[", "\"model\"", ",", "\"critic\"", "]", ")", "\n", "\n", "outputs", "=", "model", "(", "src", ")", "\n", "clf_loss", "=", "outputs", "[", "\"ner\"", "]", "[", "\"loss\"", "]", "\n", "self", ".", "model_backward", "(", "clf_loss", ",", "retain_graph", "=", "True", ")", "\n", "\n", "encodeds", "=", "outputs", "[", "\"encoder\"", "]", "\n", "xs", ",", "cs", "=", "self", ".", "critic_half_score", "(", "encodeds", ",", "src", ",", "critic", ")", "\n", "loss_qs", "=", "cs", "[", "\"loss\"", "]", "\n", "self", ".", "model_backward", "(", "self", ".", "exp_args", ".", "lmbda", "*", "loss_qs", ",", "retain_graph", "=", "True", ")", "\n", "\n", "encodedt", "=", "model", "(", "tgt", ",", "tag", "=", "False", ")", "[", "\"encoder\"", "]", "\n", "xt", ",", "ct", "=", "self", ".", "critic_half_score", "(", "encodedt", ",", "tgt", ",", "critic", ")", "\n", "loss_qt", "=", "ct", "[", "\"loss\"", "]", "\n", "if", "self", ".", "exp_args", ".", "use_gp", ":", "\n", "            ", "gp", "=", "self", ".", "gradient_penalty", "(", "\n", "xs", ".", "data", ",", "xt", ".", "data", ",", "critic", ",", "\n", "src", ".", "get", "(", "\"input_mask\"", ",", "None", ")", ",", "\n", "tgt", ".", "get", "(", "\"input_mask\"", ",", "None", ")", "\n", ")", "\n", "loss_qt", "=", "loss_qt", "+", "self", ".", "exp_args", ".", "gp_lmbda", "*", "gp", "\n", "\n", "", "self", ".", "model_backward", "(", "-", "self", ".", "exp_args", ".", "lmbda", "*", "loss_qt", ")", "\n", "\n", "if", "not", "self", ".", "exp_args", ".", "use_gp", ":", "\n", "# clip critic weight to enforce Lipschitz constraint", "\n", "            ", "for", "p", "in", "critic", ".", "parameters", "(", ")", ":", "\n", "                ", "p", ".", "data", ".", "clamp_", "(", "-", "self", ".", "exp_args", ".", "critic_clamp", ",", "self", ".", "exp_args", ".", "critic_clamp", ")", "\n", "# Q.net[1].weight.grad.data.norm()", "\n", "\n", "", "", "critic_loss", "=", "loss_qs", "-", "loss_qt", "\n", "\n", "return", "clf_loss", ",", "critic_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.unsup_adaptation.emd.EMDTrainer.run_epoch": [[189, 226], ["emd.EMDTrainer.emd_train_step", "emd.EMDTrainer.stats[].append", "emd.EMDTrainer.stats[].append", "emd.EMDTrainer.stats[].append", "list", "emd.EMDTrainer.adjust_loss().item", "emd.EMDTrainer.adjust_loss().item", "emd.EMDTrainer.adjust_loss().item", "emd.EMDTrainer.model_update", "emd.EMDTrainer.update_lr", "emd.EMDTrainer.model_zero_grad", "emd.EMDTrainer.do_logging_step", "emd.EMDTrainer.do_save_step", "emd.EMDTrainer.epoch_iterator.close", "sum", "emd.EMDTrainer.adjust_loss", "emd.EMDTrainer.adjust_loss", "emd.EMDTrainer.adjust_loss", "sum"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.unsup_adaptation.emd.EMDTrainer.emd_train_step", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.model_update", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.update_lr", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.model_zero_grad", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.do_logging_step", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.do_save_step", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.adjust_loss", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.adjust_loss", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.adjust_loss"], ["", "def", "run_epoch", "(", "self", ")", ":", "\n", "        ", "model", "=", "self", ".", "_models", "[", "\"model\"", "]", "\n", "critic", "=", "self", ".", "_models", "[", "\"critic\"", "]", "\n", "\n", "metrics", "=", "[", "\"batch_clf_loss\"", ",", "\"batch_critic_loss\"", "]", "\n", "for", "k", "in", "metrics", ":", "\n", "            ", "if", "k", "not", "in", "self", ".", "stats", ":", "\n", "                ", "self", ".", "stats", "[", "k", "]", "=", "list", "(", ")", "\n", "\n", "", "", "for", "self", ".", "step", "in", "self", ".", "epoch_iterator", ":", "\n", "            ", "clf_loss", ",", "critic_loss", "=", "self", ".", "emd_train_step", "(", "model", ",", "critic", ")", "\n", "loss", "=", "clf_loss", "+", "self", ".", "exp_args", ".", "lmbda", "*", "critic_loss", "\n", "\n", "self", ".", "stats", "[", "\"batch_train_loss\"", "]", ".", "append", "(", "self", ".", "adjust_loss", "(", "loss", ")", ".", "item", "(", ")", ")", "\n", "self", ".", "stats", "[", "\"batch_clf_loss\"", "]", ".", "append", "(", "self", ".", "adjust_loss", "(", "clf_loss", ")", ".", "item", "(", ")", ")", "\n", "self", ".", "stats", "[", "\"batch_critic_loss\"", "]", ".", "append", "(", "self", ".", "adjust_loss", "(", "critic_loss", ")", ".", "item", "(", ")", ")", "\n", "self", ".", "num_batches_seen", "+=", "1", "\n", "\n", "if", "self", ".", "is_update_step", ":", "\n", "                ", "self", ".", "model_update", "(", "[", "\"model\"", "]", ")", "\n", "self", ".", "global_step", "+=", "1", "\n", "self", ".", "update_lr", "(", "[", "\"model\"", "]", ")", "\n", "self", ".", "model_zero_grad", "(", "[", "\"model\"", "]", ")", "\n", "\n", "logs", "=", "{", "}", "\n", "logs", "[", "\"loss\"", "]", "=", "sum", "(", "self", ".", "stats", "[", "\"batch_train_loss\"", "]", ")", "/", "self", ".", "num_batches_seen", "\n", "for", "k", "in", "metrics", ":", "\n", "                    ", "logs", "[", "k", "[", "6", ":", "]", "]", "=", "sum", "(", "self", ".", "stats", "[", "k", "]", ")", "/", "self", ".", "num_batches_seen", "\n", "", "logs", "[", "\"epoch\"", "]", "=", "self", ".", "progress", "\n", "logs", "[", "\"step\"", "]", "=", "self", ".", "global_step", "\n", "\n", "self", ".", "do_logging_step", "(", "model", ",", "logs", ",", "evaluate", "=", "True", ")", "\n", "self", ".", "do_save_step", "(", "model", ")", "\n", "\n", "", "if", "self", ".", "is_max_step", ":", "\n", "                ", "self", ".", "epoch_iterator", ".", "close", "(", ")", "\n", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.unsup_adaptation.mme.MMETrainer.__init__": [[15, 17], ["adaptation.AdaptationTrainer.__init__"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.annotate.annotate.SentAnnObj.__init__"], ["    ", "def", "__init__", "(", "self", ",", "training_args", ",", "model_args", ",", "exp_args", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "training_args", ",", "model_args", ",", "exp_args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.unsup_adaptation.mme.MMETrainer.before_train": [[18, 58], ["mme.MMETrainer.load_train_data", "torch.ModuleList", "torch.ModuleList", "hasattr", "mme.MMETrainer.register_model", "modules.GRL", "dict", "dict", "mme.MMETrainer.configure_optimization", "torch.ModuleList.append", "dict"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.load_train_data", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.register_model", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.configure_optimization"], ["", "def", "before_train", "(", "self", ")", ":", "\n", "        ", "self", ".", "load_train_data", "(", ")", "\n", "# Note the model is composed of <trasnformers encoder, (xnet), classifier>", "\n", "model", "=", "self", ".", "model", "\n", "\n", "try", ":", "\n", "            ", "assert", "not", "model", ".", "config", ".", "use_crf", "\n", "assert", "model", ".", "config", ".", "loss_fct", "==", "\"ce\"", "\n", "", "except", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "F", "=", "nn", ".", "ModuleList", "(", "[", "model", ".", "model", "]", ")", "# encoder", "\n", "if", "hasattr", "(", "model", ",", "\"xnet\"", ")", ":", "\n", "            ", "F", ".", "append", "(", "model", ".", "xnet", ")", "\n", "\n", "", "C", "=", "model", ".", "classifier", "\n", "self", ".", "register_model", "(", "C", ",", "name", "=", "\"C\"", ")", "\n", "self", ".", "revgrad", "=", "GRL", "(", "self", ".", "exp_args", ".", "grl_coeff", ")", "\n", "\n", "model_optim_config", "=", "dict", "(", ")", "\n", "extended_optim_config_dict", "=", "dict", "(", ")", "\n", "\n", "for", "name", ",", "lr", ",", "sched_name", "in", "[", "\n", "(", "\"model\"", ",", "self", ".", "exp_args", ".", "learning_rate_F", ",", "self", ".", "exp_args", ".", "lr_scheduler_F", ")", ",", "\n", "(", "\"C\"", ",", "self", ".", "exp_args", ".", "learning_rate_C", ",", "self", ".", "exp_args", ".", "lr_scheduler_C", ")", "\n", "]", ":", "\n", "            ", "optim_config", "=", "dict", "(", "\n", "optim", "=", "\"adamw\"", ",", "optim_kwargs", "=", "{", "\"lr\"", ":", "lr", "}", ",", "lr_scheduler", "=", "sched_name", "\n", ")", "\n", "if", "name", "==", "\"model\"", ":", "\n", "                ", "optim_config", "[", "\"model\"", "]", "=", "F", "\n", "model_optim_config", "=", "optim_config", "\n", "\n", "", "elif", "name", "==", "\"C\"", ":", "\n", "                ", "optim_config", "[", "\"C\"", "]", "=", "C", "\n", "extended_optim_config_dict", "[", "name", "]", "=", "optim_config", "\n", "\n", "", "", "self", ".", "model_optim_config", "=", "model_optim_config", "\n", "self", ".", "extended_optim_config_dict", "=", "extended_optim_config_dict", "\n", "self", ".", "configure_optimization", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.unsup_adaptation.mme.MMETrainer.run_epoch": [[59, 114], ["model.train", "C.train", "model", "mme.MMETrainer.model_backward", "mme.MMETrainer.revgrad", "mme.MMETrainer.model_backward", "mme.MMETrainer.stats[].append", "mme.MMETrainer.stats[].append", "list", "mme.MMETrainer.get_src_batch", "mme.MMETrainer.get_tgt_batch", "mme.MMETrainer.model_update", "mme.MMETrainer.model_zero_grad", "C", "modules.MaskedSoftmax", "mme.MMETrainer.adjust_loss().item", "mme.MMETrainer.adjust_loss().item", "mme.MMETrainer.model_update", "mme.MMETrainer.update_lr", "mme.MMETrainer.model_zero_grad", "mme.MMETrainer.do_logging_step", "mme.MMETrainer.do_save_step", "mme.MMETrainer.epoch_iterator.close", "model", "tgt.get", "sum", "mme.MMETrainer.adjust_loss", "mme.MMETrainer.adjust_loss", "sum", "torch.log", "torch.log", "torch.log", "torch.log"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.train", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.train", "home.repos.pwc.inspect_result.suamin_t2ner.models.base.TransformersUtils.model", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.model_backward", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.model_backward", "home.repos.pwc.inspect_result.suamin_t2ner.trainers.adaptation.AdaptationTrainer.get_src_batch", "home.repos.pwc.inspect_result.suamin_t2ner.trainers.adaptation.AdaptationTrainer.get_tgt_batch", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.model_update", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.model_zero_grad", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.model_update", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.update_lr", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.model_zero_grad", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.do_logging_step", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.do_save_step", "home.repos.pwc.inspect_result.suamin_t2ner.models.base.TransformersUtils.model", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.adjust_loss", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.adjust_loss", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.log", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.log", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.log", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.log"], ["", "def", "run_epoch", "(", "self", ")", ":", "\n", "        ", "model", "=", "self", ".", "_models", "[", "\"model\"", "]", "\n", "C", "=", "self", ".", "_models", "[", "\"C\"", "]", "\n", "\n", "metrics", "=", "[", "\"batch_loss_tgt\"", "]", "\n", "for", "k", "in", "metrics", ":", "\n", "            ", "if", "k", "not", "in", "self", ".", "stats", ":", "\n", "                ", "self", ".", "stats", "[", "k", "]", "=", "list", "(", ")", "\n", "\n", "", "", "for", "self", ".", "step", "in", "self", ".", "epoch_iterator", ":", "\n", "            ", "model", ".", "train", "(", ")", "\n", "C", ".", "train", "(", ")", "\n", "\n", "src", ",", "tgt", "=", "self", ".", "get_src_batch", "(", ")", ",", "self", ".", "get_tgt_batch", "(", ")", "\n", "\n", "# Source NER inputs", "\n", "model_outputs", "=", "model", "(", "src", ")", "\n", "clf_loss", "=", "model_outputs", "[", "\"ner\"", "]", "[", "\"loss\"", "]", "\n", "\n", "self", ".", "model_backward", "(", "clf_loss", ")", "\n", "\n", "if", "self", ".", "is_update_step", ":", "\n", "                ", "self", ".", "model_update", "(", ")", "\n", "self", ".", "model_zero_grad", "(", ")", "\n", "\n", "", "tgt_seq", "=", "model", "(", "tgt", ",", "tag", "=", "False", ")", "[", "\"encoder\"", "]", "[", "\"seq\"", "]", "\n", "tgt_seq", "=", "self", ".", "revgrad", "(", "tgt_seq", ")", "\n", "tgt_logits", "=", "C", "(", "tgt_seq", ")", "[", "\"logits\"", "]", "\n", "tgt_prob", "=", "MaskedSoftmax", "(", ")", "(", "tgt_logits", ",", "mask", "=", "tgt", ".", "get", "(", "\"input_mask\"", ",", "None", ")", ")", "\n", "loss_tgt", "=", "-", "(", "-", "tgt_prob", "*", "torch", ".", "log", "(", "tgt_prob", "+", "1e-5", ")", ")", ".", "sum", "(", "2", ")", ".", "sum", "(", "1", ")", ".", "mean", "(", ")", "\n", "\n", "self", ".", "model_backward", "(", "loss_tgt", "*", "self", ".", "exp_args", ".", "lmbda", ")", "\n", "self", ".", "stats", "[", "\"batch_train_loss\"", "]", ".", "append", "(", "self", ".", "adjust_loss", "(", "clf_loss", ")", ".", "item", "(", ")", ")", "\n", "self", ".", "stats", "[", "\"batch_loss_tgt\"", "]", ".", "append", "(", "self", ".", "adjust_loss", "(", "loss_tgt", ")", ".", "item", "(", ")", ")", "\n", "self", ".", "num_batches_seen", "+=", "1", "\n", "\n", "if", "self", ".", "is_update_step", ":", "\n", "                ", "self", ".", "model_update", "(", ")", "\n", "self", ".", "global_step", "+=", "1", "\n", "self", ".", "update_lr", "(", ")", "\n", "self", ".", "model_zero_grad", "(", ")", "\n", "\n", "logs", "=", "{", "}", "\n", "logs", "[", "\"loss\"", "]", "=", "sum", "(", "self", ".", "stats", "[", "\"batch_train_loss\"", "]", ")", "/", "self", ".", "num_batches_seen", "\n", "for", "k", "in", "metrics", ":", "\n", "                    ", "logs", "[", "k", "[", "6", ":", "]", "]", "=", "sum", "(", "self", ".", "stats", "[", "k", "]", ")", "/", "self", ".", "num_batches_seen", "\n", "", "logs", "[", "\"epoch\"", "]", "=", "self", ".", "progress", "\n", "logs", "[", "\"step\"", "]", "=", "self", ".", "global_step", "\n", "\n", "self", ".", "do_logging_step", "(", "model", ",", "logs", ",", "evaluate", "=", "True", ")", "\n", "self", ".", "do_save_step", "(", "model", ")", "\n", "\n", "", "if", "self", ".", "is_max_step", ":", "\n", "                ", "self", ".", "epoch_iterator", ".", "close", "(", ")", "\n", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.unsup_adaptation.grl.GRLTrainer.__init__": [[14, 16], ["adaptation.AdaptationTrainer.__init__"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.annotate.annotate.SentAnnObj.__init__"], ["    ", "def", "__init__", "(", "self", ",", "training_args", ",", "model_args", ",", "exp_args", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "training_args", ",", "model_args", ",", "exp_args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.unsup_adaptation.grl.GRLTrainer.before_train": [[17, 39], ["grl.GRLTrainer.load_train_data", "modules.BinaryAdvClassifier", "grl.GRLTrainer.register_model", "dict", "grl.GRLTrainer.configure_optimization", "torch.ModuleList"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.load_train_data", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.register_model", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.configure_optimization"], ["", "def", "before_train", "(", "self", ")", ":", "\n", "        ", "self", ".", "load_train_data", "(", ")", "\n", "model", "=", "self", ".", "model", "\n", "# Create GRL discriminator", "\n", "disc", "=", "BinaryAdvClassifier", "(", "\n", "model", ".", "config", ".", "hidden_size", ",", "\n", "coeff", "=", "self", ".", "exp_args", ".", "grl_coeff", ",", "\n", "**", "{", "\n", "\"gamma\"", ":", "self", ".", "exp_args", ".", "grl_scheduler_gamma", ",", "\n", "\"max_iter\"", ":", "self", ".", "exp_args", ".", "grl_scheduler_max_iter", ",", "\n", "\"lo\"", ":", "self", ".", "exp_args", ".", "grl_scheduler_lo", ",", "\n", "\"hi\"", ":", "self", ".", "exp_args", ".", "grl_scheduler_hi", "\n", "}", "\n", ")", "\n", "self", ".", "register_model", "(", "disc", ",", "name", "=", "\"disc\"", ")", "\n", "# Joint optimization setup", "\n", "self", ".", "model_optim_config", "=", "dict", "(", "\n", "model", "=", "nn", ".", "ModuleList", "(", "[", "model", ",", "disc", "]", ")", ",", "\n", "optim", "=", "\"adamw\"", ",", "\n", "lr_scheduler", "=", "self", ".", "exp_args", ".", "lr_scheduler", "\n", ")", "\n", "self", ".", "configure_optimization", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.unsup_adaptation.grl.GRLTrainer.run_epoch": [[40, 96], ["model.train", "disc.train", "model", "disc", "grl.GRLTrainer.model_backward", "grl.GRLTrainer.stats[].append", "grl.GRLTrainer.stats[].append", "grl.GRLTrainer.stats[].append", "grl.GRLTrainer.stats[].append", "list", "grl.GRLTrainer.get_src_batch", "grl.GRLTrainer.get_tgt_batch", "disc_outputs[].mean", "grl.GRLTrainer.adjust_loss().item", "grl.GRLTrainer.adjust_loss().item", "grl.GRLTrainer.adjust_loss().item", "disc_outputs[].item", "grl.GRLTrainer.model_update", "grl.GRLTrainer.update_lr", "grl.GRLTrainer.model_zero_grad", "grl.GRLTrainer.do_logging_step", "grl.GRLTrainer.do_save_step", "grl.GRLTrainer.epoch_iterator.close", "model", "sum", "grl.GRLTrainer.adjust_loss", "grl.GRLTrainer.adjust_loss", "grl.GRLTrainer.adjust_loss", "sum"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.train", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.train", "home.repos.pwc.inspect_result.suamin_t2ner.models.base.TransformersUtils.model", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.model_backward", "home.repos.pwc.inspect_result.suamin_t2ner.trainers.adaptation.AdaptationTrainer.get_src_batch", "home.repos.pwc.inspect_result.suamin_t2ner.trainers.adaptation.AdaptationTrainer.get_tgt_batch", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.model_update", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.update_lr", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.model_zero_grad", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.do_logging_step", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.do_save_step", "home.repos.pwc.inspect_result.suamin_t2ner.models.base.TransformersUtils.model", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.adjust_loss", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.adjust_loss", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.adjust_loss"], ["", "def", "run_epoch", "(", "self", ")", ":", "\n", "        ", "model", "=", "self", ".", "_models", "[", "\"model\"", "]", "\n", "disc", "=", "self", ".", "_models", "[", "\"disc\"", "]", "\n", "\n", "metrics", "=", "[", "\"batch_clf_loss\"", ",", "\"batch_disc_loss\"", ",", "\"batch_disc_acc\"", "]", "\n", "for", "k", "in", "metrics", ":", "\n", "            ", "if", "k", "not", "in", "self", ".", "stats", ":", "\n", "                ", "self", ".", "stats", "[", "k", "]", "=", "list", "(", ")", "\n", "\n", "", "", "for", "self", ".", "step", "in", "self", ".", "epoch_iterator", ":", "\n", "            ", "model", ".", "train", "(", ")", "\n", "disc", ".", "train", "(", ")", "\n", "\n", "src", ",", "tgt", "=", "self", ".", "get_src_batch", "(", ")", ",", "self", ".", "get_tgt_batch", "(", ")", "\n", "\n", "# Source NER inputs", "\n", "model_outputs", "=", "model", "(", "src", ")", "\n", "clf_loss", "=", "model_outputs", "[", "\"ner\"", "]", "[", "\"loss\"", "]", "\n", "\n", "# Adversarial inputs", "\n", "xs", "=", "model_outputs", "[", "\"encoder\"", "]", "[", "\"pooled\"", "]", "\n", "# Turn off tagging for tgt", "\n", "xt", "=", "model", "(", "tgt", ",", "tag", "=", "False", ")", "[", "\"encoder\"", "]", "[", "\"pooled\"", "]", "\n", "disc_outputs", "=", "disc", "(", "xs", ",", "xt", ")", "\n", "disc_loss", "=", "disc_outputs", "[", "\"loss\"", "]", "\n", "if", "self", ".", "n_gpu", ">", "1", ":", "\n", "                ", "disc_outputs", "[", "\"acc\"", "]", "=", "disc_outputs", "[", "\"acc\"", "]", ".", "mean", "(", ")", "\n", "\n", "", "loss", "=", "clf_loss", "+", "self", ".", "exp_args", ".", "lmbda", "*", "disc_loss", "\n", "self", ".", "model_backward", "(", "loss", ")", "\n", "\n", "self", ".", "stats", "[", "\"batch_train_loss\"", "]", ".", "append", "(", "self", ".", "adjust_loss", "(", "loss", ")", ".", "item", "(", ")", ")", "\n", "self", ".", "stats", "[", "\"batch_clf_loss\"", "]", ".", "append", "(", "self", ".", "adjust_loss", "(", "clf_loss", ")", ".", "item", "(", ")", ")", "\n", "self", ".", "stats", "[", "\"batch_disc_loss\"", "]", ".", "append", "(", "self", ".", "adjust_loss", "(", "disc_loss", ")", ".", "item", "(", ")", ")", "\n", "self", ".", "stats", "[", "\"batch_disc_acc\"", "]", ".", "append", "(", "disc_outputs", "[", "\"acc\"", "]", ".", "item", "(", ")", ")", "\n", "self", ".", "num_batches_seen", "+=", "1", "\n", "\n", "if", "self", ".", "is_update_step", ":", "\n", "                ", "self", ".", "model_update", "(", ")", "\n", "self", ".", "global_step", "+=", "1", "\n", "self", ".", "update_lr", "(", ")", "\n", "self", ".", "model_zero_grad", "(", ")", "\n", "\n", "logs", "=", "{", "}", "\n", "logs", "[", "\"loss\"", "]", "=", "sum", "(", "self", ".", "stats", "[", "\"batch_train_loss\"", "]", ")", "/", "self", ".", "num_batches_seen", "\n", "for", "k", "in", "metrics", ":", "\n", "                    ", "logs", "[", "k", "[", "6", ":", "]", "]", "=", "sum", "(", "self", ".", "stats", "[", "k", "]", ")", "/", "self", ".", "num_batches_seen", "\n", "", "logs", "[", "\"epoch\"", "]", "=", "self", ".", "progress", "\n", "logs", "[", "\"step\"", "]", "=", "self", ".", "global_step", "\n", "\n", "self", ".", "do_logging_step", "(", "model", ",", "logs", ",", "evaluate", "=", "True", ")", "\n", "self", ".", "do_save_step", "(", "model", ")", "\n", "\n", "", "if", "self", ".", "is_max_step", ":", "\n", "                ", "self", ".", "epoch_iterator", ".", "close", "(", ")", "\n", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.unsup_adaptation.mcd.MCDTrainer.__init__": [[15, 17], ["adaptation.AdaptationTrainer.__init__"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.annotate.annotate.SentAnnObj.__init__"], ["    ", "def", "__init__", "(", "self", ",", "training_args", ",", "model_args", ",", "exp_args", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "training_args", ",", "model_args", ",", "exp_args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.unsup_adaptation.mcd.MCDTrainer.before_train": [[18, 69], ["mcd.MCDTrainer.load_train_data", "torch.ModuleList", "torch.ModuleList", "hasattr", "modules.TokenClassifier", "mcd.MCDTrainer.register_model", "mcd.MCDTrainer.register_model", "dict", "dict", "mcd.MCDTrainer.configure_optimization", "torch.ModuleList.append", "dict"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.load_train_data", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.register_model", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.register_model", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.configure_optimization"], ["", "def", "before_train", "(", "self", ")", ":", "\n", "        ", "self", ".", "load_train_data", "(", ")", "\n", "\n", "# Note the model is composed of <trasnformers encoder, (xnet), classifier 1>", "\n", "# This is main classifier that is used for inference as well. We regard", "\n", "# trasnformers encoder and any additional network (xnet) as features generator.", "\n", "model", "=", "self", ".", "model", "\n", "\n", "try", ":", "\n", "            ", "assert", "not", "model", ".", "config", ".", "use_crf", "\n", "assert", "model", ".", "config", ".", "loss_fct", "==", "\"ce\"", "\n", "", "except", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "G", "=", "nn", ".", "ModuleList", "(", "[", "model", ".", "model", "]", ")", "# encoder", "\n", "if", "hasattr", "(", "model", ",", "\"xnet\"", ")", ":", "\n", "            ", "G", ".", "append", "(", "model", ".", "xnet", ")", "\n", "\n", "# Two classifiers (discriminators)", "\n", "", "C1", "=", "model", ".", "classifier", "\n", "C2", "=", "TokenClassifier", "(", "model", ".", "config", ".", "hidden_size", ",", "model", ".", "config", ".", "num_labels", ")", "\n", "\n", "self", ".", "register_model", "(", "C1", ",", "name", "=", "\"C1\"", ")", "\n", "self", ".", "register_model", "(", "C2", ",", "name", "=", "\"C2\"", ")", "\n", "\n", "model_optim_config", "=", "dict", "(", ")", "\n", "extended_optim_config_dict", "=", "dict", "(", ")", "\n", "\n", "for", "name", ",", "lr", ",", "sched_name", "in", "[", "\n", "(", "\"model\"", ",", "self", ".", "exp_args", ".", "learning_rate_F", ",", "self", ".", "exp_args", ".", "lr_scheduler_F", ")", ",", "\n", "(", "\"C1\"", ",", "self", ".", "exp_args", ".", "learning_rate_C1", ",", "self", ".", "exp_args", ".", "lr_scheduler_C1", ")", ",", "\n", "(", "\"C2\"", ",", "self", ".", "exp_args", ".", "learning_rate_C2", ",", "self", ".", "exp_args", ".", "lr_scheduler_C2", ")", "\n", "]", ":", "\n", "            ", "optim_config", "=", "dict", "(", "\n", "optim", "=", "\"adamw\"", ",", "optim_kwargs", "=", "{", "\"lr\"", ":", "lr", "}", ",", "lr_scheduler", "=", "sched_name", "\n", ")", "\n", "if", "name", "==", "\"model\"", ":", "\n", "                ", "optim_config", "[", "\"model\"", "]", "=", "G", "\n", "model_optim_config", "=", "optim_config", "\n", "\n", "", "elif", "name", "==", "\"C1\"", ":", "\n", "                ", "optim_config", "[", "\"C1\"", "]", "=", "C1", "\n", "extended_optim_config_dict", "[", "name", "]", "=", "optim_config", "\n", "\n", "", "elif", "name", "==", "\"C2\"", ":", "\n", "                ", "optim_config", "[", "\"C2\"", "]", "=", "C2", "\n", "extended_optim_config_dict", "[", "name", "]", "=", "optim_config", "\n", "\n", "", "", "self", ".", "model_optim_config", "=", "model_optim_config", "\n", "self", ".", "extended_optim_config_dict", "=", "extended_optim_config_dict", "\n", "self", ".", "configure_optimization", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.unsup_adaptation.mcd.MCDTrainer.discrepancy": [[70, 73], ["None"], "methods", ["None"], ["", "def", "discrepancy", "(", "self", ",", "y1", ",", "y2", ")", ":", "\n", "# y{1,2} = batch_size x seq_len x num_classes", "\n", "        ", "return", "(", "y1", "-", "y2", ")", ".", "abs", "(", ")", ".", "sum", "(", "1", ")", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.unsup_adaptation.mcd.MCDTrainer.run_epoch": [[74, 160], ["modules.MaskedSoftmax", "model.train", "C1.train", "C2.train", "mcd.MCDTrainer.model_backward_and_update", "mcd.MCDTrainer.stats[].append", "mcd.MCDTrainer.stats[].append", "modules.MaskedSoftmax.", "modules.MaskedSoftmax.", "mcd.MCDTrainer.discrepancy", "mcd.MCDTrainer.model_backward_and_update", "mcd.MCDTrainer.stats[].append", "range", "mcd.MCDTrainer.stats[].append", "list", "mcd.MCDTrainer.get_src_batch", "mcd.MCDTrainer.get_tgt_batch", "C1", "C2", "mcd.MCDTrainer.adjust_loss().item", "mcd.MCDTrainer.adjust_loss().item", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "C1", "C2", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "mcd.MCDTrainer.adjust_loss().item", "modules.MaskedSoftmax.", "modules.MaskedSoftmax.", "mcd.MCDTrainer.discrepancy", "mcd.MCDTrainer.model_backward_and_update", "mcd.MCDTrainer.adjust_loss().item", "mcd.MCDTrainer.do_logging_step", "mcd.MCDTrainer.do_save_step", "mcd.MCDTrainer.epoch_iterator.close", "model", "C1", "C2", "sum", "mcd.MCDTrainer.adjust_loss", "mcd.MCDTrainer.adjust_loss", "model", "model", "mcd.MCDTrainer.adjust_loss", "model", "C1", "C2", "mcd.MCDTrainer.adjust_loss", "sum"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.train", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.train", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.train", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.model_backward_and_update", "home.repos.pwc.inspect_result.suamin_t2ner.unsup_adaptation.mcd.MCDTrainer.discrepancy", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.model_backward_and_update", "home.repos.pwc.inspect_result.suamin_t2ner.trainers.adaptation.AdaptationTrainer.get_src_batch", "home.repos.pwc.inspect_result.suamin_t2ner.trainers.adaptation.AdaptationTrainer.get_tgt_batch", "home.repos.pwc.inspect_result.suamin_t2ner.unsup_adaptation.mcd.MCDTrainer.discrepancy", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.model_backward_and_update", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.do_logging_step", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.do_save_step", "home.repos.pwc.inspect_result.suamin_t2ner.models.base.TransformersUtils.model", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.adjust_loss", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.adjust_loss", "home.repos.pwc.inspect_result.suamin_t2ner.models.base.TransformersUtils.model", "home.repos.pwc.inspect_result.suamin_t2ner.models.base.TransformersUtils.model", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.adjust_loss", "home.repos.pwc.inspect_result.suamin_t2ner.models.base.TransformersUtils.model", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.adjust_loss"], ["", "def", "run_epoch", "(", "self", ")", ":", "\n", "        ", "model", "=", "self", ".", "_models", "[", "\"model\"", "]", "\n", "C1", "=", "self", ".", "_models", "[", "\"C1\"", "]", "\n", "C2", "=", "self", ".", "_models", "[", "\"C2\"", "]", "\n", "softmax", "=", "MaskedSoftmax", "(", ")", "\n", "\n", "metrics", "=", "[", "\"batch_step_A_loss\"", ",", "\"batch_step_B_loss\"", ",", "\"batch_step_C_loss\"", "]", "\n", "for", "k", "in", "metrics", ":", "\n", "            ", "if", "k", "not", "in", "self", ".", "stats", ":", "\n", "                ", "self", ".", "stats", "[", "k", "]", "=", "list", "(", ")", "\n", "\n", "", "", "for", "self", ".", "step", "in", "self", ".", "epoch_iterator", ":", "\n", "            ", "model", ".", "train", "(", ")", "\n", "C1", ".", "train", "(", ")", "\n", "C2", ".", "train", "(", ")", "\n", "\n", "src", ",", "tgt", "=", "self", ".", "get_src_batch", "(", ")", ",", "self", ".", "get_tgt_batch", "(", ")", "\n", "\n", "# ==========================", "\n", "# Step A", "\n", "# ==========================", "\n", "xs", "=", "model", "(", "src", ",", "tag", "=", "False", ")", "[", "\"encoder\"", "]", "[", "\"seq\"", "]", "\n", "mask", ",", "labels", "=", "src", "[", "\"input_mask\"", "]", ",", "src", "[", "\"label_ids\"", "]", "\n", "C1_loss", "=", "C1", "(", "xs", ",", "mask", ",", "labels", ")", "[", "\"loss\"", "]", "\n", "C2_loss", "=", "C2", "(", "xs", ",", "mask", ",", "labels", ")", "[", "\"loss\"", "]", "\n", "\n", "loss_step_A", "=", "C1_loss", "+", "C2_loss", "# Eq.2", "\n", "\n", "if", "self", ".", "is_update_step", ":", "\n", "                ", "self", ".", "global_step", "+=", "1", "\n", "\n", "", "self", ".", "model_backward_and_update", "(", "loss_step_A", ")", "\n", "\n", "self", ".", "stats", "[", "\"batch_train_loss\"", "]", ".", "append", "(", "self", ".", "adjust_loss", "(", "C1_loss", ")", ".", "item", "(", ")", ")", "\n", "self", ".", "stats", "[", "\"batch_step_A_loss\"", "]", ".", "append", "(", "self", ".", "adjust_loss", "(", "loss_step_A", ")", ".", "item", "(", ")", ")", "\n", "\n", "# ==========================", "\n", "# Step B", "\n", "# ==========================", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "xs", "=", "model", "(", "src", ",", "tag", "=", "False", ")", "[", "\"encoder\"", "]", "[", "\"seq\"", "]", "\n", "\n", "", "C1_loss", "=", "C1", "(", "xs", ",", "mask", ",", "labels", ")", "[", "\"loss\"", "]", "\n", "C2_loss", "=", "C2", "(", "xs", ",", "mask", ",", "labels", ")", "[", "\"loss\"", "]", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "xt", "=", "model", "(", "tgt", ",", "tag", "=", "False", ")", "[", "\"encoder\"", "]", "[", "\"seq\"", "]", "\n", "\n", "", "mask", "=", "tgt", "[", "\"input_mask\"", "]", "\n", "xt_p1", "=", "softmax", "(", "C1", "(", "xt", ",", "mask", ")", "[", "\"logits\"", "]", ",", "mask", ")", "\n", "xt_p2", "=", "softmax", "(", "C2", "(", "xt", ",", "mask", ")", "[", "\"logits\"", "]", ",", "mask", ")", "\n", "adv_loss", "=", "self", ".", "discrepancy", "(", "xt_p1", ",", "xt_p2", ")", "\n", "\n", "loss_step_B", "=", "(", "C1_loss", "+", "C2_loss", ")", "-", "adv_loss", "# Eq.4", "\n", "self", ".", "model_backward_and_update", "(", "loss_step_B", ",", "[", "\"C1\"", ",", "\"C2\"", "]", ")", "\n", "\n", "self", ".", "stats", "[", "\"batch_step_B_loss\"", "]", ".", "append", "(", "self", ".", "adjust_loss", "(", "loss_step_B", ")", ".", "item", "(", ")", ")", "\n", "\n", "# ==========================", "\n", "# Step C", "\n", "# ==========================", "\n", "for", "_", "in", "range", "(", "self", ".", "exp_args", ".", "n_gen", ")", ":", "\n", "                ", "xt", "=", "model", "(", "tgt", ",", "tag", "=", "False", ")", "[", "\"encoder\"", "]", "[", "\"seq\"", "]", "\n", "xt_p1", "=", "softmax", "(", "C1", "(", "xt", ",", "mask", ")", "[", "\"logits\"", "]", ",", "mask", ")", "\n", "xt_p2", "=", "softmax", "(", "C2", "(", "xt", ",", "mask", ")", "[", "\"logits\"", "]", ",", "mask", ")", "\n", "\n", "loss_step_C", "=", "self", ".", "discrepancy", "(", "xt_p1", ",", "xt_p2", ")", "\n", "self", ".", "model_backward_and_update", "(", "loss_step_C", ",", "[", "\"model\"", "]", ")", "\n", "\n", "", "self", ".", "stats", "[", "\"batch_step_C_loss\"", "]", ".", "append", "(", "self", ".", "adjust_loss", "(", "loss_step_C", ")", ".", "item", "(", ")", ")", "\n", "self", ".", "num_batches_seen", "+=", "1", "\n", "\n", "if", "self", ".", "is_update_step", ":", "\n", "                ", "logs", "=", "{", "}", "\n", "logs", "[", "\"loss\"", "]", "=", "sum", "(", "self", ".", "stats", "[", "\"batch_train_loss\"", "]", ")", "/", "self", ".", "num_batches_seen", "\n", "for", "k", "in", "metrics", ":", "\n", "                    ", "logs", "[", "k", "[", "6", ":", "]", "]", "=", "sum", "(", "self", ".", "stats", "[", "k", "]", ")", "/", "self", ".", "num_batches_seen", "\n", "", "logs", "[", "\"epoch\"", "]", "=", "self", ".", "progress", "\n", "logs", "[", "\"step\"", "]", "=", "self", ".", "global_step", "\n", "\n", "self", ".", "do_logging_step", "(", "model", ",", "logs", ",", "evaluate", "=", "True", ")", "\n", "self", ".", "do_save_step", "(", "model", ")", "\n", "\n", "", "if", "self", ".", "is_max_step", ":", "\n", "                ", "self", ".", "epoch_iterator", ".", "close", "(", ")", "\n", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.unsup_adaptation.keung.KeungTrainer.__init__": [[14, 16], ["adaptation.AdaptationTrainer.__init__"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.annotate.annotate.SentAnnObj.__init__"], ["    ", "def", "__init__", "(", "self", ",", "training_args", ",", "model_args", ",", "exp_args", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "training_args", ",", "model_args", ",", "exp_args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.unsup_adaptation.keung.KeungTrainer.before_train": [[17, 56], ["keung.KeungTrainer.load_train_data", "torch.ModuleList", "hasattr", "modules.BinaryAdvClassifier", "keung.KeungTrainer.register_model", "dict", "dict", "keung.KeungTrainer.configure_optimization", "torch.ModuleList.append", "dict"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.load_train_data", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.register_model", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.configure_optimization"], ["", "def", "before_train", "(", "self", ")", ":", "\n", "        ", "self", ".", "load_train_data", "(", "k", "=", "3", ")", "\n", "\n", "# Note the model is composed of <transformers encoder, (xnet), classifier>", "\n", "# We regard transformers encoder and any additional network (xnet) as feat generator", "\n", "model", "=", "self", ".", "model", "\n", "\n", "gen", "=", "nn", ".", "ModuleList", "(", "[", "model", ".", "model", "]", ")", "# encoder", "\n", "if", "hasattr", "(", "model", ",", "\"xnet\"", ")", ":", "\n", "            ", "gen", ".", "append", "(", "model", ".", "xnet", ")", "\n", "\n", "# Create discriminator", "\n", "", "disc", "=", "BinaryAdvClassifier", "(", "model", ".", "config", ".", "hidden_size", ")", "\n", "self", ".", "register_model", "(", "disc", ",", "name", "=", "\"disc\"", ")", "\n", "\n", "model_optim_config", "=", "dict", "(", ")", "\n", "extended_optim_config_dict", "=", "dict", "(", ")", "\n", "\n", "for", "name", ",", "lr", ",", "sched_name", "in", "[", "\n", "(", "\"model\"", ",", "self", ".", "exp_args", ".", "learning_rate_task", ",", "self", ".", "exp_args", ".", "lr_scheduler_task", ")", ",", "\n", "(", "\"disc\"", ",", "self", ".", "exp_args", ".", "learning_rate_disc", ",", "self", ".", "exp_args", ".", "lr_scheduler_disc", ")", ",", "\n", "(", "\"gen\"", ",", "self", ".", "exp_args", ".", "learning_rate_gen", ",", "self", ".", "exp_args", ".", "lr_scheduler_gen", ")", "\n", "]", ":", "\n", "            ", "optim_config", "=", "dict", "(", "\n", "optim", "=", "\"adamw\"", ",", "optim_kwargs", "=", "{", "\"lr\"", ":", "lr", "}", ",", "lr_scheduler", "=", "sched_name", "\n", ")", "\n", "if", "name", "==", "\"model\"", ":", "\n", "                ", "optim_config", "[", "\"model\"", "]", "=", "model", "\n", "model_optim_config", "=", "optim_config", "\n", "", "elif", "name", "==", "\"disc\"", ":", "\n", "                ", "optim_config", "[", "\"disc\"", "]", "=", "disc", "\n", "extended_optim_config_dict", "[", "name", "]", "=", "optim_config", "\n", "", "elif", "name", "==", "\"gen\"", ":", "\n", "                ", "optim_config", "[", "\"gen\"", "]", "=", "gen", "\n", "extended_optim_config_dict", "[", "name", "]", "=", "optim_config", "\n", "\n", "", "", "self", ".", "model_optim_config", "=", "model_optim_config", "\n", "self", ".", "extended_optim_config_dict", "=", "extended_optim_config_dict", "\n", "self", ".", "configure_optimization", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.unsup_adaptation.keung.KeungTrainer.run_epoch": [[57, 140], ["model.train", "disc.train", "keung.KeungTrainer.get_src_batch", "model", "keung.KeungTrainer.model_backward_and_update", "keung.KeungTrainer.stats[].append", "keung.KeungTrainer.stats[].append", "keung.KeungTrainer.get_src_batch", "keung.KeungTrainer.get_tgt_batch", "disc", "keung.KeungTrainer.model_backward_and_update", "keung.KeungTrainer.stats[].append", "keung.KeungTrainer.stats[].append", "keung.KeungTrainer.get_src_batch", "keung.KeungTrainer.get_tgt_batch", "disc", "keung.KeungTrainer.model_backward_and_update", "keung.KeungTrainer.stats[].append", "keung.KeungTrainer.stats[].append", "list", "keung.KeungTrainer.adjust_loss().item", "keung.KeungTrainer.adjust_loss().item", "keung.KeungTrainer.adjust_loss().item", "disc_outputs[].mean", "disc_outputs[].item", "keung.KeungTrainer.adjust_loss().item", "gen_outputs[].mean", "gen_outputs[].item", "keung.KeungTrainer.do_logging_step", "keung.KeungTrainer.do_save_step", "keung.KeungTrainer.epoch_iterator.close", "model", "model", "model", "model", "sum", "keung.KeungTrainer.adjust_loss", "keung.KeungTrainer.adjust_loss", "keung.KeungTrainer.adjust_loss", "keung.KeungTrainer.adjust_loss", "sum"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.train", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.train", "home.repos.pwc.inspect_result.suamin_t2ner.trainers.adaptation.AdaptationTrainer.get_src_batch", "home.repos.pwc.inspect_result.suamin_t2ner.models.base.TransformersUtils.model", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.model_backward_and_update", "home.repos.pwc.inspect_result.suamin_t2ner.trainers.adaptation.AdaptationTrainer.get_src_batch", "home.repos.pwc.inspect_result.suamin_t2ner.trainers.adaptation.AdaptationTrainer.get_tgt_batch", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.model_backward_and_update", "home.repos.pwc.inspect_result.suamin_t2ner.trainers.adaptation.AdaptationTrainer.get_src_batch", "home.repos.pwc.inspect_result.suamin_t2ner.trainers.adaptation.AdaptationTrainer.get_tgt_batch", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.model_backward_and_update", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.do_logging_step", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.do_save_step", "home.repos.pwc.inspect_result.suamin_t2ner.models.base.TransformersUtils.model", "home.repos.pwc.inspect_result.suamin_t2ner.models.base.TransformersUtils.model", "home.repos.pwc.inspect_result.suamin_t2ner.models.base.TransformersUtils.model", "home.repos.pwc.inspect_result.suamin_t2ner.models.base.TransformersUtils.model", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.adjust_loss", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.adjust_loss", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.adjust_loss", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.adjust_loss"], ["", "def", "run_epoch", "(", "self", ")", ":", "\n", "        ", "model", "=", "self", ".", "_models", "[", "\"model\"", "]", "\n", "disc", "=", "self", ".", "_models", "[", "\"disc\"", "]", "\n", "\n", "metrics", "=", "[", "\n", "\"batch_clf_loss\"", ",", "\n", "\"batch_disc_loss\"", ",", "\"batch_disc_acc\"", ",", "\n", "\"batch_gen_loss\"", ",", "\"batch_gen_acc\"", "\n", "]", "\n", "for", "k", "in", "metrics", ":", "\n", "            ", "if", "k", "not", "in", "self", ".", "stats", ":", "\n", "                ", "self", ".", "stats", "[", "k", "]", "=", "list", "(", ")", "\n", "\n", "", "", "for", "self", ".", "step", "in", "self", ".", "epoch_iterator", ":", "\n", "            ", "model", ".", "train", "(", ")", "\n", "disc", ".", "train", "(", ")", "\n", "\n", "# ==========================", "\n", "# PART-I Task optimization", "\n", "# ==========================", "\n", "src", "=", "self", ".", "get_src_batch", "(", "dataloader_idx", "=", "0", ")", "\n", "task_outputs", "=", "model", "(", "src", ")", "\n", "task_loss", "=", "task_outputs", "[", "\"ner\"", "]", "[", "\"loss\"", "]", "\n", "\n", "if", "self", ".", "is_update_step", ":", "\n", "                ", "self", ".", "global_step", "+=", "1", "\n", "\n", "", "self", ".", "model_backward_and_update", "(", "task_loss", ",", "[", "\"model\"", "]", ")", "\n", "\n", "self", ".", "stats", "[", "\"batch_clf_loss\"", "]", ".", "append", "(", "self", ".", "adjust_loss", "(", "task_loss", ")", ".", "item", "(", ")", ")", "\n", "self", ".", "stats", "[", "\"batch_train_loss\"", "]", ".", "append", "(", "self", ".", "adjust_loss", "(", "task_loss", ")", ".", "item", "(", ")", ")", "\n", "\n", "# ==========================", "\n", "# PART-II Disc optimization", "\n", "# ==========================", "\n", "src", "=", "self", ".", "get_src_batch", "(", "dataloader_idx", "=", "1", ")", "\n", "tgt", "=", "self", ".", "get_tgt_batch", "(", "dataloader_idx", "=", "1", ")", "\n", "xs", "=", "model", "(", "src", ",", "tag", "=", "False", ")", "[", "\"encoder\"", "]", "[", "\"pooled\"", "]", "\n", "xt", "=", "model", "(", "tgt", ",", "tag", "=", "False", ")", "[", "\"encoder\"", "]", "[", "\"pooled\"", "]", "\n", "disc_outputs", "=", "disc", "(", "xs", ",", "xt", ",", "apply_grl", "=", "False", ",", "flip", "=", "False", ")", "\n", "disc_loss", "=", "disc_outputs", "[", "\"loss\"", "]", "\n", "\n", "self", ".", "model_backward_and_update", "(", "disc_loss", ",", "[", "\"disc\"", "]", ")", "\n", "\n", "self", ".", "stats", "[", "\"batch_disc_loss\"", "]", ".", "append", "(", "self", ".", "adjust_loss", "(", "disc_loss", ")", ".", "item", "(", ")", ")", "\n", "if", "self", ".", "n_gpu", ">", "1", ":", "\n", "                ", "disc_outputs", "[", "\"acc\"", "]", "=", "disc_outputs", "[", "\"acc\"", "]", ".", "mean", "(", ")", "\n", "", "self", ".", "stats", "[", "\"batch_disc_acc\"", "]", ".", "append", "(", "disc_outputs", "[", "\"acc\"", "]", ".", "item", "(", ")", ")", "\n", "\n", "# ==========================", "\n", "# PART-III Gen optimization", "\n", "# ==========================", "\n", "src", "=", "self", ".", "get_src_batch", "(", "dataloader_idx", "=", "2", ")", "\n", "tgt", "=", "self", ".", "get_tgt_batch", "(", "dataloader_idx", "=", "2", ")", "\n", "xs", "=", "model", "(", "src", ",", "tag", "=", "False", ")", "[", "\"encoder\"", "]", "[", "\"pooled\"", "]", "\n", "xt", "=", "model", "(", "tgt", ",", "tag", "=", "False", ")", "[", "\"encoder\"", "]", "[", "\"pooled\"", "]", "\n", "# Note the flip=True flag, this time we will use 0s label", "\n", "# for source and 1s for target", "\n", "gen_outputs", "=", "disc", "(", "xs", ",", "xt", ",", "apply_grl", "=", "False", ",", "flip", "=", "True", ")", "\n", "gen_loss", "=", "gen_outputs", "[", "\"loss\"", "]", "\n", "\n", "self", ".", "model_backward_and_update", "(", "gen_loss", ",", "[", "\"gen\"", "]", ")", "\n", "\n", "self", ".", "stats", "[", "\"batch_disc_loss\"", "]", ".", "append", "(", "self", ".", "adjust_loss", "(", "gen_loss", ")", ".", "item", "(", ")", ")", "\n", "if", "self", ".", "n_gpu", ">", "1", ":", "\n", "                ", "gen_outputs", "[", "\"acc\"", "]", "=", "gen_outputs", "[", "\"acc\"", "]", ".", "mean", "(", ")", "\n", "", "self", ".", "stats", "[", "\"batch_disc_acc\"", "]", ".", "append", "(", "gen_outputs", "[", "\"acc\"", "]", ".", "item", "(", ")", ")", "\n", "self", ".", "num_batches_seen", "+=", "1", "\n", "\n", "if", "self", ".", "is_update_step", ":", "\n", "                ", "logs", "=", "{", "}", "\n", "logs", "[", "\"loss\"", "]", "=", "sum", "(", "self", ".", "stats", "[", "\"batch_train_loss\"", "]", ")", "/", "self", ".", "num_batches_seen", "\n", "for", "k", "in", "metrics", ":", "\n", "                    ", "logs", "[", "k", "[", "6", ":", "]", "]", "=", "sum", "(", "self", ".", "stats", "[", "k", "]", ")", "/", "self", ".", "num_batches_seen", "\n", "", "logs", "[", "\"epoch\"", "]", "=", "self", ".", "progress", "\n", "logs", "[", "\"step\"", "]", "=", "self", ".", "global_step", "\n", "\n", "self", ".", "do_logging_step", "(", "model", ",", "logs", ",", "evaluate", "=", "True", ")", "\n", "self", ".", "do_save_step", "(", "model", ")", "\n", "\n", "", "if", "self", ".", "is_max_step", ":", "\n", "                ", "self", ".", "epoch_iterator", ".", "close", "(", ")", "\n", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.semisupervised_learning.entmin.EntMinTrainer.__init__": [[15, 17], ["semisupervised.SSLTrainer.__init__"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.annotate.annotate.SentAnnObj.__init__"], ["    ", "def", "__init__", "(", "self", ",", "training_args", ",", "model_args", ",", "exp_args", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "training_args", ",", "model_args", ",", "exp_args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.semisupervised_learning.entmin.EntMinTrainer.before_train": [[18, 26], ["entmin.EntMinTrainer.load_train_data", "dict", "entmin.EntMinTrainer.configure_optimization"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.load_train_data", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.configure_optimization"], ["", "def", "before_train", "(", "self", ")", ":", "\n", "        ", "self", ".", "load_train_data", "(", "split_ratio", "=", "self", ".", "exp_args", ".", "split_ratio", ")", "\n", "self", ".", "model_optim_config", "=", "dict", "(", "\n", "model", "=", "self", ".", "model", ",", "\n", "optim", "=", "\"adamw\"", ",", "\n", "lr_scheduler", "=", "self", ".", "exp_args", ".", "lr_scheduler", "\n", ")", "\n", "self", ".", "configure_optimization", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.semisupervised_learning.entmin.EntMinTrainer.run_epoch": [[27, 83], ["model.train", "model", "entmin.EntMinTrainer.joint_loss", "entmin.EntMinTrainer.model_backward", "entmin.EntMinTrainer.stats[].append", "entmin.EntMinTrainer.stats[].append", "entmin.EntMinTrainer.stats[].append", "list", "entmin.EntMinTrainer.get_sup_batch", "entmin.EntMinTrainer.get_unsup_batch", "modules.MaskedSoftmax", "entmin.EntMinTrainer.item", "entmin.EntMinTrainer.adjust_loss().item", "entmin.EntMinTrainer.adjust_loss().item", "entmin.EntMinTrainer.clip_grad_norm_", "entmin.EntMinTrainer.model_update", "entmin.EntMinTrainer.update_lr", "entmin.EntMinTrainer.model_zero_grad", "entmin.EntMinTrainer.do_logging_step", "entmin.EntMinTrainer.do_save_step", "entmin.EntMinTrainer.epoch_iterator.close", "unsup.get", "model.parameters", "sum", "entmin.EntMinTrainer.adjust_loss", "entmin.EntMinTrainer.adjust_loss", "sum", "model", "torch.log", "torch.log", "torch.log", "torch.log"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.train", "home.repos.pwc.inspect_result.suamin_t2ner.models.base.TransformersUtils.model", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.joint_loss", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.model_backward", "home.repos.pwc.inspect_result.suamin_t2ner.trainers.semisupervised.SSLTrainer.get_sup_batch", "home.repos.pwc.inspect_result.suamin_t2ner.trainers.semisupervised.SSLTrainer.get_unsup_batch", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.clip_grad_norm_", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.model_update", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.update_lr", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.model_zero_grad", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.do_logging_step", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.do_save_step", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.adjust_loss", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.adjust_loss", "home.repos.pwc.inspect_result.suamin_t2ner.models.base.TransformersUtils.model", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.log", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.log", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.log", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.log"], ["", "def", "run_epoch", "(", "self", ")", ":", "\n", "        ", "metrics", "=", "[", "\"batch_train_loss\"", ",", "\"batch_sup_loss\"", ",", "\"batch_unsup_loss\"", "]", "\n", "for", "k", "in", "metrics", ":", "\n", "            ", "if", "k", "not", "in", "self", ".", "stats", ":", "\n", "                ", "self", ".", "stats", "[", "k", "]", "=", "list", "(", ")", "\n", "\n", "", "", "model", "=", "self", ".", "model", "\n", "\n", "for", "self", ".", "step", "in", "self", ".", "epoch_iterator", ":", "\n", "            ", "model", ".", "train", "(", ")", "\n", "\n", "# Batch of supervised and unsupervised inputs", "\n", "sup", ",", "unsup", "=", "self", ".", "get_sup_batch", "(", ")", ",", "self", ".", "get_unsup_batch", "(", ")", "\n", "\n", "sup_outputs", "=", "model", "(", "sup", ")", "\n", "sup_loss", "=", "sup_outputs", "[", "\"ner\"", "]", "[", "\"loss\"", "]", "\n", "\n", "# Remove labels so classifier don't expect labels", "\n", "unsup", "[", "\"label_ids\"", "]", "=", "None", "\n", "\n", "unsup_outputs", "=", "MaskedSoftmax", "(", ")", "(", "\n", "logits", "=", "model", "(", "unsup", ")", "[", "\"ner\"", "]", "[", "\"logits\"", "]", ",", "\n", "mask", "=", "unsup", ".", "get", "(", "\"input_mask\"", ",", "None", ")", ",", "\n", "dim", "=", "2", "\n", ")", "# batch_size x seq_len x num_classes", "\n", "unsup_loss", "=", "(", "-", "unsup_outputs", "*", "torch", ".", "log", "(", "unsup_outputs", "+", "1e-5", ")", ")", ".", "sum", "(", "2", ")", ".", "sum", "(", "1", ")", ".", "mean", "(", ")", "\n", "\n", "loss", "=", "self", ".", "joint_loss", "(", "sup_loss", ",", "aux_losses", "=", "unsup_loss", ",", "lmbda", "=", "self", ".", "exp_args", ".", "lmbda", ")", "\n", "\n", "self", ".", "model_backward", "(", "loss", ")", "\n", "\n", "self", ".", "stats", "[", "\"batch_train_loss\"", "]", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "self", ".", "stats", "[", "\"batch_sup_loss\"", "]", ".", "append", "(", "self", ".", "adjust_loss", "(", "sup_loss", ")", ".", "item", "(", ")", ")", "\n", "self", ".", "stats", "[", "\"batch_unsup_loss\"", "]", ".", "append", "(", "self", ".", "adjust_loss", "(", "unsup_loss", ")", ".", "item", "(", ")", ")", "\n", "self", ".", "num_batches_seen", "+=", "1", "\n", "\n", "if", "self", ".", "is_update_step", ":", "\n", "                ", "self", ".", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ")", "\n", "self", ".", "model_update", "(", "[", "\"model\"", "]", ")", "\n", "self", ".", "global_step", "+=", "1", "\n", "self", ".", "update_lr", "(", "[", "\"model\"", "]", ")", "\n", "self", ".", "model_zero_grad", "(", "[", "\"model\"", "]", ")", "\n", "\n", "logs", "=", "{", "}", "\n", "logs", "[", "\"loss\"", "]", "=", "sum", "(", "self", ".", "stats", "[", "\"batch_train_loss\"", "]", ")", "/", "self", ".", "num_batches_seen", "\n", "for", "k", "in", "metrics", ":", "\n", "                    ", "logs", "[", "k", "[", "6", ":", "]", "]", "=", "sum", "(", "self", ".", "stats", "[", "k", "]", ")", "/", "self", ".", "num_batches_seen", "\n", "", "logs", "[", "\"epoch\"", "]", "=", "self", ".", "progress", "\n", "logs", "[", "\"step\"", "]", "=", "self", ".", "global_step", "\n", "\n", "self", ".", "do_logging_step", "(", "model", ",", "logs", ",", "evaluate", "=", "True", ")", "\n", "self", ".", "do_save_step", "(", "model", ")", "\n", "\n", "", "if", "self", ".", "is_max_step", ":", "\n", "                ", "self", ".", "epoch_iterator", ".", "close", "(", ")", "\n", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.modules.multicell_lstm.Compute_Gate.__init__": [[17, 29], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "copy.deepcopy", "copy.deepcopy", "range", "range"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.annotate.annotate.SentAnnObj.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_size", ",", "hidden_size", ",", "cell_num", ",", "use_bias", "=", "True", ")", ":", "\n", "        ", "super", "(", "Compute_Gate", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_size", "=", "input_size", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "cell_num", "=", "cell_num", "\n", "self", ".", "use_bias", "=", "use_bias", "\n", "\n", "cell_x", "=", "nn", ".", "Linear", "(", "self", ".", "input_size", ",", "2", "*", "self", ".", "hidden_size", ",", "bias", "=", "use_bias", ")", "\n", "cell_h", "=", "nn", ".", "Linear", "(", "self", ".", "hidden_size", ",", "2", "*", "self", ".", "hidden_size", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "cell_x_list", "=", "nn", ".", "ModuleList", "(", "[", "copy", ".", "deepcopy", "(", "cell_x", ")", "for", "_", "in", "range", "(", "self", ".", "cell_num", ")", "]", ")", "\n", "self", ".", "cell_h_list", "=", "nn", ".", "ModuleList", "(", "[", "copy", ".", "deepcopy", "(", "cell_h", ")", "for", "_", "in", "range", "(", "self", ".", "cell_num", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.modules.multicell_lstm.Compute_Gate.forward": [[30, 45], ["input_word.size", "range", "torch.cat().contiguous().transpose", "torch.cat().contiguous().transpose", "torch.cat().contiguous().transpose", "torch.cat().contiguous().transpose", "torch.split", "torch.split", "torch.split", "torch.split", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "net_cell_list.append", "net_cell.unsqueeze", "torch.cat().contiguous", "torch.cat().contiguous", "torch.cat().contiguous", "torch.cat().contiguous", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_word", ",", "hidden_states", ")", ":", "\n", "        ", "batch_size", "=", "input_word", ".", "size", "(", "0", ")", "\n", "net_cell_list", "=", "[", "]", "\n", "for", "cell_idx", "in", "range", "(", "self", ".", "cell_num", ")", ":", "\n", "            ", "net_input_x", "=", "self", ".", "cell_x_list", "[", "cell_idx", "]", "(", "input_word", ")", "# (batch_size, 3 * hidden_size)", "\n", "net_input_h", "=", "self", ".", "cell_h_list", "[", "cell_idx", "]", "(", "hidden_states", ")", "\n", "net_cell", "=", "net_input_x", "+", "net_input_h", "\n", "net_cell_list", ".", "append", "(", "net_cell", ".", "unsqueeze", "(", "0", ")", ")", "\n", "\n", "", "net_cells", "=", "torch", ".", "cat", "(", "net_cell_list", ",", "dim", "=", "0", ")", ".", "contiguous", "(", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "input_gate", ",", "cell_states", "=", "torch", ".", "split", "(", "net_cells", ",", "split_size_or_sections", "=", "self", ".", "hidden_size", ",", "dim", "=", "-", "1", ")", "\n", "cell_input", "=", "torch", ".", "tanh", "(", "cell_states", ")", "\n", "input_gate", "=", "torch", ".", "sigmoid", "(", "input_gate", ")", "\n", "\n", "return", "cell_input", ",", "input_gate", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.modules.multicell_lstm.Compute_Add_Attention.__init__": [[48, 62], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Parameter", "torch.nn.Parameter", "multicell_lstm.Compute_Add_Attention.reset_parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.annotate.annotate.SentAnnObj.__init__", "home.repos.pwc.inspect_result.suamin_t2ner.modules.multicell_lstm.Compute_Add_Attention.reset_parameter"], ["    ", "def", "__init__", "(", "self", ",", "input_size", ",", "hidden_size", ",", "cell_num", ")", ":", "\n", "        ", "super", "(", "Compute_Add_Attention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_size", "=", "input_size", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "cell_num", "=", "cell_num", "\n", "\n", "self", ".", "input_proj", "=", "nn", ".", "Linear", "(", "self", ".", "hidden_size", ",", "2", "*", "self", ".", "hidden_size", ",", "bias", "=", "False", ")", "\n", "self", ".", "cell_proj", "=", "nn", ".", "Linear", "(", "self", ".", "hidden_size", ",", "2", "*", "self", ".", "hidden_size", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "atten_v", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "Tensor", "(", "2", "*", "self", ".", "hidden_size", ")", "\n", ")", "\n", "\n", "self", ".", "reset_parameter", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.modules.multicell_lstm.Compute_Add_Attention.reset_parameter": [[63, 66], ["torch.nn.init.uniform_", "torch.nn.init.uniform_", "math.sqrt", "multicell_lstm.Compute_Add_Attention.atten_v.size"], "methods", ["None"], ["", "def", "reset_parameter", "(", "self", ")", ":", "\n", "        ", "bound", "=", "1.0", "/", "math", ".", "sqrt", "(", "self", ".", "atten_v", ".", "size", "(", "0", ")", ")", "\n", "init", ".", "uniform_", "(", "self", ".", "atten_v", ",", "-", "bound", ",", "bound", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.modules.multicell_lstm.Compute_Add_Attention.forward": [[67, 82], ["cell_state_c.size", "cell_state_c.unsqueeze().expand", "multicell_lstm.Compute_Add_Attention.input_proj", "multicell_lstm.Compute_Add_Attention.cell_proj", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.softmax", "torch.softmax", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "cell_state_c.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "cell_state_c", ",", "cell_states", ")", ":", "\n", "        ", "batch_size", "=", "cell_state_c", ".", "size", "(", "0", ")", "\n", "atten_input", "=", "cell_state_c", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "batch_size", ",", "self", ".", "cell_num", ",", "self", ".", "hidden_size", ")", "\n", "\n", "net_atten_input", "=", "self", ".", "input_proj", "(", "atten_input", ")", "\n", "net_atten_cell", "=", "self", ".", "cell_proj", "(", "cell_states", ")", "\n", "\n", "scores", "=", "torch", ".", "tanh", "(", "net_atten_input", "+", "net_atten_cell", ")", "\n", "scores", "=", "torch", ".", "einsum", "(", "'h,bch->bc'", ",", "(", "self", ".", "atten_v", ",", "scores", ")", ")", "# (batch_size, cell_num)", "\n", "# scores = scores.float().masked_fill(1 - entity_mask[None,:,None], float('-inf')).type_as(scores)", "\n", "probs", "=", "F", ".", "softmax", "(", "scores", ",", "dim", "=", "1", ")", "#(batch_size, cell_num)", "\n", "\n", "atten_output", "=", "torch", ".", "einsum", "(", "'bc,bch->bh'", ",", "(", "probs", ",", "cell_states", ")", ")", "\n", "\n", "return", "atten_output", ",", "probs", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.modules.multicell_lstm.Composition_Cell.__init__": [[85, 93], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.annotate.annotate.SentAnnObj.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_size", ",", "hidden_size", ",", "use_bias", "=", "True", ")", ":", "\n", "        ", "super", "(", "Composition_Cell", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_size", "=", "input_size", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "use_bias", "=", "use_bias", "\n", "\n", "self", ".", "input_x", "=", "nn", ".", "Linear", "(", "self", ".", "input_size", ",", "3", "*", "self", ".", "hidden_size", ",", "bias", "=", "use_bias", ")", "\n", "self", ".", "input_h", "=", "nn", ".", "Linear", "(", "self", ".", "hidden_size", ",", "3", "*", "self", ".", "hidden_size", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.modules.multicell_lstm.Composition_Cell.forward": [[94, 107], ["multicell_lstm.Composition_Cell.input_x", "multicell_lstm.Composition_Cell.input_h", "torch.split", "torch.split", "torch.split", "torch.split", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "hidden_states", ")", ":", "\n", "        ", "net_input_x", "=", "self", ".", "input_x", "(", "input", ")", "\n", "net_input_h", "=", "self", ".", "input_h", "(", "hidden_states", ")", "\n", "\n", "net_input", "=", "net_input_x", "+", "net_input_h", "\n", "\n", "input_gate", ",", "output_gate", ",", "cell_states", "=", "torch", ".", "split", "(", "net_input", ",", "split_size_or_sections", "=", "self", ".", "hidden_size", ",", "dim", "=", "-", "1", ")", "\n", "\n", "input_gate", "=", "torch", ".", "sigmoid", "(", "input_gate", ")", "\n", "output_gate", "=", "torch", ".", "sigmoid", "(", "output_gate", ")", "\n", "cell_states", "=", "torch", ".", "tanh", "(", "cell_states", ")", "\n", "\n", "return", "input_gate", ",", "output_gate", ",", "cell_states", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.modules.multicell_lstm.MultiCell_layer.__init__": [[110, 120], ["torch.nn.Module.__init__", "multicell_lstm.Compute_Gate", "multicell_lstm.Composition_Cell", "multicell_lstm.Compute_Add_Attention"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.annotate.annotate.SentAnnObj.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_size", ",", "hidden_size", ",", "cell_num", ",", "use_bias", "=", "True", ")", ":", "\n", "        ", "super", "(", "MultiCell_layer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_size", "=", "input_size", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "cell_num", "=", "cell_num", "\n", "self", ".", "use_bias", "=", "use_bias", "\n", "\n", "self", ".", "compute_gate", "=", "Compute_Gate", "(", "input_size", ",", "hidden_size", ",", "cell_num", ",", "use_bias", "=", "use_bias", ")", "\n", "self", ".", "composition_cell", "=", "Composition_Cell", "(", "input_size", ",", "hidden_size", ",", "use_bias", "=", "use_bias", ")", "\n", "self", ".", "compute_atten", "=", "Compute_Add_Attention", "(", "input_size", ",", "hidden_size", ",", "cell_num", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.modules.multicell_lstm.MultiCell_layer.forward": [[122, 143], ["multicell_lstm.MultiCell_layer.compute_gate", "multicell_lstm.MultiCell_layer.composition_cell", "multicell_lstm.MultiCell_layer.compute_atten", "hidden_states.size", "hidden_states.size", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "cell_state_pre.unsqueeze().expand_as", "cell_state_pre.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_word", ",", "hidden_states", ",", "cell_state_pre", ")", ":", "\n", "        ", "\"\"\"\n        :param input_word: (batch_size, input_size)\n        :param hidden_states: (batch_size, hidden_size)\n        :param cell_state_pre: (batch_size, hidden_size)\n        :return:\n        \"\"\"", "\n", "batch_size", ",", "hidden_size", "=", "hidden_states", ".", "size", "(", "0", ")", ",", "hidden_states", ".", "size", "(", "1", ")", "\n", "## compute entity cells (batch_size, cell_num, hidden_size)", "\n", "cell_states", ",", "input_gates", "=", "self", ".", "compute_gate", "(", "input_word", ",", "hidden_states", ")", "\n", "cell_states", "=", "input_gates", "*", "cell_states", "+", "(", "1", "-", "input_gates", ")", "*", "cell_state_pre", ".", "unsqueeze", "(", "1", ")", ".", "expand_as", "(", "cell_states", ")", "\n", "## compute the center cell", "\n", "input_gate", ",", "output_gate", ",", "cell_state_c", "=", "self", ".", "composition_cell", "(", "input_word", ",", "hidden_states", ")", "\n", "## center cell attention entity cells", "\n", "atten_cell", ",", "probs", "=", "self", ".", "compute_atten", "(", "cell_state_c", ",", "cell_states", ")", "\n", "\n", "cell_state_c", "=", "(", "1", "-", "input_gate", ")", "*", "cell_state_pre", "+", "input_gate", "*", "atten_cell", "\n", "\n", "hidden_outputs", "=", "output_gate", "*", "torch", ".", "tanh", "(", "cell_state_c", ")", "\n", "\n", "return", "hidden_outputs", ",", "cell_state_c", ",", "cell_states", ",", "probs", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.modules.multicell_lstm._MultiCellLSTM.__init__": [[146, 155], ["torch.nn.Module.__init__", "multicell_lstm.MultiCell_layer"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.annotate.annotate.SentAnnObj.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_size", ",", "hidden_size", ",", "cell_num", ",", "left2right", "=", "True", ",", "use_bias", "=", "True", ")", ":", "\n", "        ", "super", "(", "_MultiCellLSTM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_size", "=", "input_size", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "cell_num", "=", "cell_num", "\n", "self", ".", "left2right", "=", "left2right", "\n", "self", ".", "use_bias", "=", "use_bias", "\n", "\n", "self", ".", "layer", "=", "MultiCell_layer", "(", "self", ".", "input_size", ",", "self", ".", "hidden_size", ",", "self", ".", "cell_num", ",", "self", ".", "use_bias", ",", "self", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.modules.multicell_lstm._MultiCellLSTM.forward": [[156, 213], ["torch.zeros_like().to.masked_scatter.size", "torch.zeros_like().to.masked_scatter.size", "list", "torch.zeros_like().to.masked_scatter.transpose", "torch.cat().transpose", "torch.cat().transpose", "torch.cat().transpose", "torch.cat().transpose", "torch.cat().transpose", "torch.cat().transpose", "torch.cat().transpose", "torch.cat().transpose", "torch.cat().transpose", "torch.cat().transpose", "torch.cat().transpose", "torch.cat().transpose", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "range", "list", "mask.transpose", "mask_t_r.transpose", "torch.zeros_like().to.masked_scatter.masked_select", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to.masked_scatter", "torch.zeros_like().to.masked_scatter", "multicell_lstm._MultiCellLSTM.layer", "list.append", "list.append", "list.append", "list", "list", "list", "torch.zeros_like().to.masked_scatter.masked_select", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to.masked_scatter", "torch.zeros_like().to.masked_scatter", "torch.zeros_like().to.masked_scatter.masked_select", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to.masked_scatter", "torch.zeros_like().to.masked_scatter", "torch.zeros_like().to.masked_scatter.masked_select", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to.masked_scatter", "torch.zeros_like().to.masked_scatter", "reversed", "torch.zeros().to.unsqueeze", "torch.zeros().to.unsqueeze", "cell_states.unsqueeze", "atten_probs.unsqueeze", "reversed", "reversed", "reversed", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "mask", ",", "hidden_states", "=", "None", ")", ":", "\n", "# entity_mask = torch.Tensor(entity_mask).byte().to(self.device) # (cell_num) [1:'O', 1/0:'PER', ...]", "\n", "        ", "batch_size", "=", "input", ".", "size", "(", "0", ")", "\n", "seq_len", "=", "input", ".", "size", "(", "1", ")", "\n", "device", "=", "input", ".", "device", "\n", "\n", "if", "hidden_states", "is", "not", "None", ":", "\n", "            ", "hidden_states", "=", "hidden_states", "\n", "", "else", ":", "\n", "            ", "cell_state_c", "=", "torch", ".", "zeros", "(", "batch_size", ",", "self", ".", "hidden_size", ",", "dtype", "=", "input", ".", "dtype", ")", ".", "to", "(", "device", ")", "\n", "hidden_states", "=", "torch", ".", "zeros", "(", "batch_size", ",", "self", ".", "hidden_size", ",", "dtype", "=", "input", ".", "dtype", ")", ".", "to", "(", "device", ")", "\n", "\n", "", "seq_list", "=", "list", "(", "range", "(", "seq_len", ")", ")", "\n", "if", "not", "self", ".", "left2right", ":", "\n", "            ", "seq_list", "=", "list", "(", "reversed", "(", "seq_list", ")", ")", "\n", "mask_t", "=", "mask", ".", "transpose", "(", "0", ",", "1", ")", "\n", "mask_t_r", "=", "mask_t", "[", "seq_list", "]", "\n", "mask_r", "=", "mask_t_r", ".", "transpose", "(", "0", ",", "1", ")", "\n", "## reorder the input", "\n", "input_value", "=", "input", ".", "masked_select", "(", "mask", "[", ":", ",", ":", ",", "None", "]", ")", "\n", "input_zero", "=", "torch", ".", "zeros_like", "(", "input", ",", "dtype", "=", "input", ".", "dtype", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "input", "=", "input_zero", ".", "masked_scatter", "(", "mask_r", "[", ":", ",", ":", ",", "None", "]", ",", "input_value", ")", "\n", "\n", "", "input", "=", "input", ".", "transpose", "(", "0", ",", "1", ")", "# (seq_len, batch_size, input_size)", "\n", "hidden_list", "=", "[", "]", "\n", "cell_states_list", "=", "[", "]", "\n", "atten_probs_list", "=", "[", "]", "\n", "for", "pos_idx", "in", "seq_list", ":", "\n", "            ", "hidden_states", ",", "cell_state_c", ",", "cell_states", ",", "atten_probs", "=", "self", ".", "layer", "(", "input", "[", "pos_idx", "]", ",", "hidden_states", ",", "cell_state_c", ")", "\n", "hidden_list", ".", "append", "(", "hidden_states", ".", "unsqueeze", "(", "0", ")", ")", "\n", "cell_states_list", ".", "append", "(", "cell_states", ".", "unsqueeze", "(", "0", ")", ")", "\n", "atten_probs_list", ".", "append", "(", "atten_probs", ".", "unsqueeze", "(", "0", ")", ")", "\n", "# print(hidden_outputs.size())", "\n", "\n", "", "if", "not", "self", ".", "left2right", ":", "\n", "            ", "hidden_list", "=", "list", "(", "reversed", "(", "hidden_list", ")", ")", "\n", "cell_states_list", "=", "list", "(", "reversed", "(", "cell_states_list", ")", ")", "\n", "atten_probs_list", "=", "list", "(", "reversed", "(", "atten_probs_list", ")", ")", "\n", "# print(hidden_list)", "\n", "", "hidden_output_seq", "=", "torch", ".", "cat", "(", "hidden_list", ",", "dim", "=", "0", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "cell_states_seq", "=", "torch", ".", "cat", "(", "cell_states_list", ",", "dim", "=", "0", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "atten_probs_seq", "=", "torch", ".", "cat", "(", "atten_probs_list", ",", "dim", "=", "0", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "if", "not", "self", ".", "left2right", ":", "## reorder the output", "\n", "# print(hidden_output_seq.size(), mask_r.size())", "\n", "            ", "hidden_output_seq_value", "=", "hidden_output_seq", ".", "masked_select", "(", "mask_r", "[", ":", ",", ":", ",", "None", "]", ")", "\n", "output_zero", "=", "torch", ".", "zeros_like", "(", "hidden_output_seq", ",", "dtype", "=", "hidden_output_seq", ".", "dtype", ")", ".", "to", "(", "device", ")", "\n", "hidden_output_seq", "=", "output_zero", ".", "masked_scatter", "(", "mask", "[", ":", ",", ":", ",", "None", "]", ",", "hidden_output_seq_value", ")", "\n", "##cell states", "\n", "cell_states_seq_value", "=", "cell_states_seq", ".", "masked_select", "(", "mask_r", "[", ":", ",", ":", ",", "None", ",", "None", "]", ")", "\n", "cell_zero", "=", "torch", ".", "zeros_like", "(", "cell_states_seq", ",", "dtype", "=", "hidden_output_seq", ".", "dtype", ")", ".", "to", "(", "device", ")", "\n", "cell_states_seq", "=", "cell_zero", ".", "masked_scatter", "(", "mask", "[", ":", ",", ":", ",", "None", ",", "None", "]", ",", "cell_states_seq_value", ")", "\n", "## atten probs", "\n", "atten_probs_value", "=", "atten_probs_seq", ".", "masked_select", "(", "mask_r", "[", ":", ",", ":", ",", "None", "]", ")", "\n", "atten_probs_zero", "=", "torch", ".", "zeros_like", "(", "atten_probs_seq", ",", "dtype", "=", "hidden_output_seq", ".", "dtype", ")", ".", "to", "(", "device", ")", "\n", "atten_probs_seq", "=", "atten_probs_zero", ".", "masked_scatter", "(", "mask", "[", ":", ",", ":", ",", "None", "]", ",", "atten_probs_value", ")", "\n", "\n", "", "return", "hidden_output_seq", ",", "cell_states_seq", ",", "atten_probs_seq", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.modules.multicell_lstm.MultiCellLSTM.__init__": [[217, 243], ["torch.nn.Module.__init__", "multicell_lstm.MultiCellLSTM", "multicell_lstm.MultiCellLSTM"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.annotate.annotate.SentAnnObj.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "input_dim", ",", "\n", "hidden_dim", ",", "\n", "cell_num", ",", "\n", "bidirectional", "=", "True", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "bidirectional", ":", "\n", "            ", "assert", "hidden_dim", "%", "2", "==", "0", ",", "\"Non-divisble by 2.\"", "\n", "hidden_dim", "=", "hidden_dim", "//", "2", "\n", "", "self", ".", "fwd_multi_lstm", "=", "MultiCellLSTM", "(", "\n", "input_size", ",", "\n", "hidden_dim", ",", "\n", "cell_num", ",", "\n", "left2right", "=", "True", ",", "\n", "use_bias", "=", "True", "\n", ")", "\n", "if", "bidirectional", ":", "\n", "            ", "self", ".", "bwd_multi_lstm", "=", "MultiCellLSTM", "(", "\n", "input_size", ",", "\n", "hidden_dim", ",", "\n", "cell_num", ",", "\n", "left2right", "=", "False", ",", "\n", "use_bias", "=", "True", "\n", ")", "\n", "", "self", ".", "bidirectional", "=", "bidirectional", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.modules.multicell_lstm.MultiCellLSTM.forward": [[244, 250], ["multicell_lstm.MultiCellLSTM.fwd_multi_lstm", "multicell_lstm.MultiCellLSTM.bwd_multi_lstm", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "mask", ",", "hidden_states", "=", "None", ")", ":", "\n", "        ", "h", ",", "c", ",", "a", "=", "self", ".", "fwd_multi_lstm", "(", "input", ",", "mask", ",", "hidden_states", ")", "\n", "if", "self", ".", "bidirectional", ":", "\n", "            ", "h_", ",", "c_", ",", "a_", "=", "self", ".", "bwd_multi_lstm", "(", "input", ",", "mask", ",", "hidden_states", ")", "\n", "h", ",", "c", ",", "a", "=", "torch", ".", "cat", "(", "(", "h", ",", "h_", ")", ",", "-", "1", ")", ",", "torch", ".", "cat", "(", "(", "c", ",", "c_", ")", ",", "-", "1", ")", ",", "torch", ".", "cat", "(", "(", "a", ",", "a_", ")", ",", "-", "1", ")", "\n", "", "return", "h", ",", "c", ",", "a", "\n", "", "", ""]], "home.repos.pwc.inspect_result.suamin_t2ner.modules.optimal_transport.OptimalTransport.distance": [[10, 33], ["torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.sum.addmm_", "torch.sum.addmm_", "batch2.unsqueeze.unsqueeze.t", "batch1.unsqueeze.unsqueeze.size", "batch2.unsqueeze.unsqueeze.size", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand().t", "torch.pow().sum().expand().t", "torch.pow().sum().expand().t", "torch.pow().sum().expand().t", "batch2.unsqueeze.unsqueeze.t", "batch1.unsqueeze.unsqueeze.unsqueeze", "batch2.unsqueeze.unsqueeze.unsqueeze", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "ValueError", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow", "torch.pow", "torch.pow", "torch.pow"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "distance", "(", "batch1", ",", "batch2", ",", "dist_metric", "=", "\"cosine\"", ")", ":", "\n", "        ", "if", "dist_metric", "==", "\"cosine\"", ":", "\n", "            ", "batch1", "=", "F", ".", "normalize", "(", "batch1", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "batch2", "=", "F", ".", "normalize", "(", "batch2", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "dist_mat", "=", "1", "-", "torch", ".", "mm", "(", "batch1", ",", "batch2", ".", "t", "(", ")", ")", "\n", "", "elif", "dist_metric", "==", "\"euclidean\"", ":", "\n", "            ", "m", ",", "n", "=", "batch1", ".", "size", "(", "0", ")", ",", "batch2", ".", "size", "(", "0", ")", "\n", "dist_mat", "=", "torch", ".", "pow", "(", "batch1", ",", "2", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "expand", "(", "m", ",", "n", ")", "+", "torch", ".", "pow", "(", "batch2", ",", "2", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "expand", "(", "n", ",", "m", ")", ".", "t", "(", ")", "\n", "dist_mat", ".", "addmm_", "(", "\n", "1", ",", "-", "2", ",", "batch1", ",", "batch2", ".", "t", "(", ")", "\n", ")", "# squared euclidean distance", "\n", "", "elif", "dist_metric", "==", "\"fast_euclidean\"", ":", "\n", "            ", "batch1", "=", "batch1", ".", "unsqueeze", "(", "-", "2", ")", "\n", "batch2", "=", "batch2", ".", "unsqueeze", "(", "-", "3", ")", "\n", "dist_mat", "=", "torch", ".", "sum", "(", "(", "torch", ".", "abs", "(", "batch1", "-", "batch2", ")", ")", "**", "2", ",", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Unknown cost function: {}. Expected to \"", "\n", "\"be one of [cosine | euclidean]\"", ".", "format", "(", "dist_metric", ")", "\n", ")", "\n", "", "return", "dist_mat", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.modules.optimal_transport.SinkhornDivergence.__init__": [[38, 50], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.annotate.annotate.SentAnnObj.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "dist_metric", "=", "\"cosine\"", ",", "\n", "eps", "=", "0.01", ",", "\n", "max_iter", "=", "5", ",", "\n", "bp_to_sinkhorn", "=", "False", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dist_metric", "=", "dist_metric", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "max_iter", "=", "max_iter", "\n", "self", ".", "bp_to_sinkhorn", "=", "bp_to_sinkhorn", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.modules.optimal_transport.SinkhornDivergence.forward": [[51, 57], ["optimal_transport.SinkhornDivergence.transport_cost", "optimal_transport.SinkhornDivergence.transport_cost", "optimal_transport.SinkhornDivergence.transport_cost"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.modules.optimal_transport.SinkhornDivergence.transport_cost", "home.repos.pwc.inspect_result.suamin_t2ner.modules.optimal_transport.SinkhornDivergence.transport_cost", "home.repos.pwc.inspect_result.suamin_t2ner.modules.optimal_transport.SinkhornDivergence.transport_cost"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "# x, y: two batches of data with shape (batch, dim)", "\n", "        ", "W_xy", "=", "self", ".", "transport_cost", "(", "x", ",", "y", ")", "\n", "W_xx", "=", "self", ".", "transport_cost", "(", "x", ",", "x", ")", "\n", "W_yy", "=", "self", ".", "transport_cost", "(", "y", ",", "y", ")", "\n", "return", "2", "*", "W_xy", "-", "W_xx", "-", "W_yy", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.modules.optimal_transport.SinkhornDivergence.transport_cost": [[58, 67], ["optimal_transport.SinkhornDivergence.distance", "optimal_transport.SinkhornDivergence.sinkhorn_iterate", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "pi.detach.detach.detach"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.modules.optimal_transport.OptimalTransport.distance", "home.repos.pwc.inspect_result.suamin_t2ner.modules.optimal_transport.SinkhornDivergence.sinkhorn_iterate", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.base.TrainInferenceUtils.detach"], ["", "def", "transport_cost", "(", "self", ",", "x", ",", "y", ",", "return_pi", "=", "False", ")", ":", "\n", "        ", "C", "=", "self", ".", "distance", "(", "x", ",", "y", ",", "dist_metric", "=", "self", ".", "dist_metric", ")", "\n", "pi", "=", "self", ".", "sinkhorn_iterate", "(", "C", ",", "self", ".", "eps", ",", "self", ".", "max_iter", ",", "self", ".", "thre", ")", "\n", "if", "not", "self", ".", "bp_to_sinkhorn", ":", "\n", "            ", "pi", "=", "pi", ".", "detach", "(", ")", "\n", "", "cost", "=", "torch", ".", "sum", "(", "pi", "*", "C", ")", "\n", "if", "return_pi", ":", "\n", "            ", "return", "cost", ",", "pi", "\n", "", "return", "cost", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.modules.optimal_transport.SinkhornDivergence.sinkhorn_iterate": [[68, 99], ["torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "range", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "optimal_transport.SinkhornDivergence.sinkhorn_iterate.M"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "sinkhorn_iterate", "(", "C", ",", "eps", ",", "max_iter", ",", "thre", ")", ":", "\n", "        ", "nx", ",", "ny", "=", "C", ".", "shape", "\n", "mu", "=", "torch", ".", "ones", "(", "nx", ",", "dtype", "=", "C", ".", "dtype", ",", "device", "=", "C", ".", "device", ")", "*", "(", "1.", "/", "nx", ")", "\n", "nu", "=", "torch", ".", "ones", "(", "ny", ",", "dtype", "=", "C", ".", "dtype", ",", "device", "=", "C", ".", "device", ")", "*", "(", "1.", "/", "ny", ")", "\n", "u", "=", "torch", ".", "zeros_like", "(", "mu", ")", "\n", "v", "=", "torch", ".", "zeros_like", "(", "nu", ")", "\n", "\n", "def", "M", "(", "_C", ",", "_u", ",", "_v", ")", ":", "\n", "            ", "\"\"\"Modified cost for logarithmic updates.\n            Eq: M_{ij} = (-c_{ij} + u_i + v_j) / epsilon\n            \"\"\"", "\n", "return", "(", "-", "_C", "+", "_u", ".", "unsqueeze", "(", "-", "1", ")", "+", "_v", ".", "unsqueeze", "(", "-", "2", ")", ")", "/", "eps", "\n", "\n", "", "real_iter", "=", "0", "# check if algorithm terminates before max_iter", "\n", "# Sinkhorn iterations", "\n", "for", "i", "in", "range", "(", "max_iter", ")", ":", "\n", "            ", "u0", "=", "u", "\n", "u", "=", "eps", "*", "(", "\n", "torch", ".", "log", "(", "mu", "+", "1e-8", ")", "-", "torch", ".", "logsumexp", "(", "M", "(", "C", ",", "u", ",", "v", ")", ",", "dim", "=", "1", ")", "\n", ")", "+", "u", "\n", "v", "=", "eps", "*", "(", "\n", "torch", ".", "log", "(", "nu", "+", "1e-8", ")", "-", "\n", "torch", ".", "logsumexp", "(", "M", "(", "C", ",", "u", ",", "v", ")", ".", "permute", "(", "1", ",", "0", ")", ",", "dim", "=", "1", ")", "\n", ")", "+", "v", "\n", "err", "=", "(", "u", "-", "u0", ")", ".", "abs", "(", ")", ".", "sum", "(", ")", "\n", "real_iter", "+=", "1", "\n", "if", "err", ".", "item", "(", ")", "<", "thre", ":", "\n", "                ", "break", "\n", "# Transport plan pi = diag(a)*K*diag(b)", "\n", "", "", "return", "torch", ".", "exp", "(", "M", "(", "C", ",", "u", ",", "v", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.suamin_t2ner.modules.hyper_multi_head_attention.MHAParameterGenetrator.__init__": [[10, 23], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "print", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "sum", "p.numel", "hyper_multi_head_attention.MHAParameterGenetrator.parameters"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.annotate.annotate.SentAnnObj.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", ",", "hidden_dim", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "hidden_dim", "=", "hidden_dim", "\n", "\n", "self", ".", "in_hparam_w", "=", "nn", ".", "Parameter", "(", "torch", ".", "empty", "(", "input_dim", ",", "3", "*", "hidden_dim", ")", ")", "\n", "self", ".", "in_hparam_b", "=", "nn", ".", "Parameter", "(", "torch", ".", "empty", "(", "input_dim", ",", "3", "*", "hidden_dim", ")", ")", "\n", "self", ".", "in_cross_v", "=", "nn", ".", "Parameter", "(", "torch", ".", "empty", "(", "input_dim", ",", "hidden_dim", ")", ")", "\n", "\n", "self", ".", "out_hparam_w", "=", "nn", ".", "Parameter", "(", "torch", ".", "empty", "(", "input_dim", ",", "hidden_dim", ")", ")", "\n", "self", ".", "out_hparam_b", "=", "nn", ".", "Parameter", "(", "torch", ".", "empty", "(", "input_dim", ",", "hidden_dim", ")", ")", "\n", "self", ".", "out_cross_v", "=", "nn", ".", "Parameter", "(", "torch", ".", "empty", "(", "input_dim", ",", "hidden_dim", ")", ")", "\n", "\n", "print", "(", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "self", ".", "parameters", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.modules.hyper_multi_head_attention.MHAParameterGenetrator.forward": [[24, 41], ["dict", "h.matmul", "h.matmul", "h.matmul.unsqueeze().matmul", "h.matmul", "h.matmul", "h.matmul", "h.matmul.unsqueeze().matmul", "h.matmul", "h.matmul.unsqueeze", "h.matmul.unsqueeze", "h.matmul.unsqueeze", "h.matmul.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "h", ")", ":", "\n", "# h = hidden_dim", "\n", "        ", "params", "=", "dict", "(", ")", "\n", "\n", "# generate params of in_proj(_weight/bias)", "\n", "in_h1", "=", "h", ".", "matmul", "(", "self", ".", "in_hparam_w", ")", "# 3h", "\n", "in_h2", "=", "h", ".", "matmul", "(", "self", ".", "in_cross_v", ")", "# h", "\n", "params", "[", "\"in_proj_weight\"", "]", "=", "in_h1", ".", "unsqueeze", "(", "1", ")", ".", "matmul", "(", "in_h2", ".", "unsqueeze", "(", "0", ")", ")", "# 3h x h", "\n", "params", "[", "\"in_proj_bias\"", "]", "=", "h", ".", "matmul", "(", "self", ".", "in_hparam_b", ")", "# 3h", "\n", "\n", "# generate params of out_proj(_weight/bias)", "\n", "out_h1", "=", "h", ".", "matmul", "(", "self", ".", "out_hparam_w", ")", "# h", "\n", "out_h2", "=", "h", ".", "matmul", "(", "self", ".", "out_cross_v", ")", "# h", "\n", "params", "[", "\"out_proj_weight\"", "]", "=", "out_h1", ".", "unsqueeze", "(", "1", ")", ".", "matmul", "(", "out_h2", ".", "unsqueeze", "(", "0", ")", ")", "# h x h", "\n", "params", "[", "\"out_proj_bias\"", "]", "=", "h", ".", "matmul", "(", "self", ".", "out_hparam_b", ")", "# h ", "\n", "\n", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.modules.hyper_multi_head_attention.MHAParameterGenetratorNetwork.__init__": [[45, 49], ["torch.Module.__init__", "hyper_multi_head_attention.MHAParameterGenetrator", "hyper_multi_head_attention.MHAParameterGenetratorNetwork.init_params"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.annotate.annotate.SentAnnObj.__init__", "home.repos.pwc.inspect_result.suamin_t2ner.modules.hyper_multi_head_attention.MHAParameterGenetratorNetwork.init_params"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", ",", "hidden_dim", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "mha_pg", "=", "MHAParameterGenetrator", "(", "input_dim", ",", "hidden_dim", ")", "\n", "self", ".", "init_params", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.modules.hyper_multi_head_attention.MHAParameterGenetratorNetwork.init_params": [[50, 53], ["hyper_multi_head_attention.MHAParameterGenetratorNetwork.parameters", "weight.data.normal_"], "methods", ["None"], ["", "def", "init_params", "(", "self", ")", ":", "\n", "        ", "for", "weight", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "weight", ".", "data", ".", "normal_", "(", "mean", "=", "0.0", ",", "std", "=", "0.02", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.modules.hyper_multi_head_attention.MHAParameterGenetratorNetwork.forward": [[54, 57], ["hyper_multi_head_attention.MHAParameterGenetratorNetwork.mha_pg"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "h", ")", ":", "\n", "        ", "h_params", "=", "self", ".", "mha_pg", "(", "h", ")", "\n", "return", "h_params", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.modules.hyper_multi_head_attention.HyperMultiHeadAttention.__init__": [[61, 66], ["torch.Module.__init__", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.annotate.annotate.SentAnnObj.__init__"], ["    ", "def", "__init__", "(", "self", ",", "hidden_dim", ",", "num_heads", "=", "8", ",", "dropout", "=", "0.1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "hidden_dim", "=", "hidden_dim", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.modules.hyper_multi_head_attention.HyperMultiHeadAttention.forward": [[67, 79], ["x.transpose", "h.transpose.transpose.transpose", "torch.multi_head_attention_forward", "torch.multi_head_attention_forward", "torch.multi_head_attention_forward", "hyper_multi_head_attention.HyperMultiHeadAttention.dropout"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "params", ",", "mask", "=", "None", ")", ":", "\n", "        ", "h", "=", "x", ".", "transpose", "(", "0", ",", "1", ")", "\n", "h_", "=", "F", ".", "multi_head_attention_forward", "(", "\n", "h", ",", "h", ",", "h", ",", "self", ".", "hidden_dim", ",", "self", ".", "num_heads", ",", "\n", "params", "[", "\"in_proj_weight\"", "]", ",", "params", "[", "\"in_proj_bias\"", "]", ",", "\n", "None", ",", "None", ",", "False", ",", "0.", ",", "params", "[", "\"out_proj_weight\"", "]", ",", "\n", "params", "[", "\"out_proj_bias\"", "]", ",", "training", "=", "self", ".", "training", ",", "\n", "key_padding_mask", "=", "(", "mask", "==", "0", ")", ",", "need_weights", "=", "True", "\n", ")", "[", "0", "]", "\n", "h", "=", "h", "+", "self", ".", "dropout", "(", "h_", ")", "\n", "h", "=", "h", ".", "transpose", "(", "0", ",", "1", ")", "\n", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.modules.hyper_multi_head_attention.test": [[81, 91], ["hyper_multi_head_attention.MHAParameterGenetratorNetwork", "torch.randn", "torch.randn", "torch.randn", "MHAParameterGenetratorNetwork.", "torch.randn", "torch.randn", "torch.randn", "torch.ones", "torch.ones", "torch.ones", "hyper_multi_head_attention.HyperMultiHeadAttention", "HyperMultiHeadAttention."], "function", ["None"], ["", "", "def", "test", "(", ")", ":", "\n", "    ", "input_dim", "=", "8", "\n", "hidden_dim", "=", "768", "\n", "hn_mha", "=", "MHAParameterGenetratorNetwork", "(", "input_dim", ",", "hidden_dim", ")", "\n", "h", "=", "torch", ".", "randn", "(", "input_dim", ")", "\n", "h_params", "=", "hn_mha", "(", "h", ")", "\n", "x", "=", "torch", ".", "randn", "(", "3", ",", "5", ",", "768", ")", "\n", "mask", "=", "torch", ".", "ones", "(", "3", ",", "5", ")", "\n", "h_mha", "=", "HyperMultiHeadAttention", "(", "hidden_dim", ",", "num_heads", "=", "8", ",", "dropout", "=", "0.1", ")", "\n", "output", "=", "h_mha", "(", "x", ",", "h_params", ",", "mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.modules.crf.ChainCRF.__init__": [[36, 64], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "crf.ChainCRF.reset_parameters", "torch.Linear", "torch.Linear", "crf.ChainCRF.register_parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.annotate.annotate.SentAnnObj.__init__", "home.repos.pwc.inspect_result.suamin_t2ner.modules.crf.ChainCRF.reset_parameters"], ["    ", "def", "__init__", "(", "self", ",", "input_size", ",", "num_labels", ",", "bigram", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            input_size: int\n                the dimension of the input.\n            num_labels: int\n                the number of labels of the crf layer\n            bigram: bool\n                if apply bi-gram parameter.\n        \"\"\"", "\n", "super", "(", "ChainCRF", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_size", "=", "input_size", "\n", "self", ".", "num_labels", "=", "num_labels", "+", "1", "\n", "self", ".", "bigram", "=", "bigram", "\n", "\n", "# state weight tensor", "\n", "self", ".", "state_nn", "=", "nn", ".", "Linear", "(", "input_size", ",", "self", ".", "num_labels", ")", "\n", "if", "bigram", ":", "\n", "# transition weight tensor", "\n", "            ", "self", ".", "trans_nn", "=", "nn", ".", "Linear", "(", "input_size", ",", "self", ".", "num_labels", "*", "self", ".", "num_labels", ")", "\n", "self", ".", "register_parameter", "(", "\"trans_matrix\"", ",", "None", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "trans_nn", "=", "None", "\n", "self", ".", "trans_matrix", "=", "Parameter", "(", "\n", "torch", ".", "Tensor", "(", "self", ".", "num_labels", ",", "self", ".", "num_labels", ")", "\n", ")", "\n", "\n", "", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.modules.crf.ChainCRF.reset_parameters": [[65, 72], ["torch.init.constant_", "torch.init.constant_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.constant_", "torch.init.constant_", "torch.init.normal_", "torch.init.normal_"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "nn", ".", "init", ".", "constant_", "(", "self", ".", "state_nn", ".", "bias", ",", "0.0", ")", "\n", "if", "self", ".", "bigram", ":", "\n", "            ", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "trans_nn", ".", "weight", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "trans_nn", ".", "bias", ",", "0.0", ")", "\n", "", "else", ":", "\n", "            ", "nn", ".", "init", ".", "normal_", "(", "self", ".", "trans_matrix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.modules.crf.ChainCRF.forward": [[73, 106], ["input.size", "crf.ChainCRF.state_nn().unsqueeze", "crf.ChainCRF.trans_nn().view", "mask.unsqueeze().unsqueeze", "crf.ChainCRF.state_nn", "crf.ChainCRF.trans_nn", "mask.unsqueeze"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input", ",", "mask", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            input: Tensor\n                the input tensor with shape = [batch, length, input_size]\n            mask: Tensor\n                the mask tensor with shape = [batch, length]\n\n        Returns: Tensor\n            the energy tensor with shape = [batch, length, num_label, num_label]\n        \"\"\"", "\n", "batch", ",", "length", ",", "_", "=", "input", ".", "size", "(", ")", "\n", "\n", "# compute out_s by tensor dot [batch, length, input_size] * [input_size,", "\n", "# num_label] thus out_s should be [batch, length, num_label] --> [batch, length,", "\n", "# num_label, 1]", "\n", "out_s", "=", "self", ".", "state_nn", "(", "input", ")", ".", "unsqueeze", "(", "2", ")", "\n", "\n", "if", "self", ".", "bigram", ":", "\n", "# compute out_s by tensor dot: [batch, length, input_size] * [input_size,", "\n", "# num_label * num_label] the output should be [batch, length, num_label,", "\n", "# num_label]", "\n", "            ", "out_t", "=", "self", ".", "trans_nn", "(", "input", ")", ".", "view", "(", "\n", "batch", ",", "length", ",", "self", ".", "num_labels", ",", "self", ".", "num_labels", "\n", ")", "\n", "output", "=", "out_t", "+", "out_s", "\n", "", "else", ":", "\n", "# [batch, length, num_label, num_label]", "\n", "            ", "output", "=", "self", ".", "trans_matrix", "+", "out_s", "\n", "\n", "", "output", "=", "output", "*", "mask", ".", "unsqueeze", "(", "2", ")", ".", "unsqueeze", "(", "3", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.modules.crf.ChainCRF.loss": [[107, 154], ["target.size", "energy.transpose", "target.transpose", "mask.unsqueeze().transpose", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "prev_label.fill_.fill_.fill_", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "mask.unsqueeze", "crf.logsumexp", "mask_t.squeeze().long", "crf.logsumexp", "partition.unsqueeze", "mask_t.squeeze"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.modules.crf.logsumexp", "home.repos.pwc.inspect_result.suamin_t2ner.modules.crf.logsumexp"], ["", "def", "loss", "(", "self", ",", "energy", ",", "target", ",", "mask", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            energy: Tensor\n                the energy tensor with shape = [batch, length, num_label, num_label]\n            target: Tensor\n                the tensor of target labels with shape [batch, length]\n            mask:Tensor\n                the mask tensor with shape = [batch, length]\n\n        Returns: Tensor\n                A 1D tensor for minus log likelihood loss\n        \"\"\"", "\n", "batch", ",", "length", "=", "target", ".", "size", "(", ")", "\n", "# shape = [length, batch, num_label, num_label]", "\n", "energy_transpose", "=", "energy", ".", "transpose", "(", "0", ",", "1", ")", "\n", "# shape = [length, batch]", "\n", "target_transpose", "=", "target", ".", "transpose", "(", "0", ",", "1", ")", "\n", "# shape = [length, batch, 1]", "\n", "mask_transpose", "=", "mask", ".", "unsqueeze", "(", "2", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "\n", "# shape = [batch, num_label]", "\n", "partition", "=", "None", "\n", "\n", "# shape = [batch]", "\n", "batch_index", "=", "torch", ".", "arange", "(", "0", ",", "batch", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "target", ".", "device", ")", "\n", "prev_label", "=", "torch", ".", "zeros", "(", "batch", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "target", ".", "device", ")", "\n", "prev_label", "=", "prev_label", ".", "fill_", "(", "self", ".", "num_labels", "-", "1", ")", "\n", "tgt_energy", "=", "torch", ".", "zeros", "(", "batch", ",", "device", "=", "target", ".", "device", ")", "\n", "\n", "for", "t", "in", "range", "(", "length", ")", ":", "\n", "# shape = [batch, num_label, num_label]", "\n", "            ", "curr_energy", "=", "energy_transpose", "[", "t", "]", "\n", "mask_t", "=", "mask_transpose", "[", "t", "]", "\n", "if", "t", "==", "0", ":", "\n", "                ", "partition", "=", "curr_energy", "[", ":", ",", "-", "1", ",", ":", "]", "\n", "", "else", ":", "\n", "# shape = [batch, num_label]", "\n", "                ", "partition_new", "=", "logsumexp", "(", "curr_energy", "+", "partition", ".", "unsqueeze", "(", "2", ")", ",", "dim", "=", "1", ")", "\n", "partition", "=", "partition", "+", "(", "partition_new", "-", "partition", ")", "*", "mask_t", "\n", "", "tgt_energy", "+=", "curr_energy", "[", "batch_index", ",", "prev_label", ",", "target_transpose", "[", "t", "]", ".", "data", "]", "\n", "prev_label_new", "=", "target_transpose", "[", "t", "]", ".", "data", "\n", "prev_label", "=", "(", "\n", "prev_label", "+", "(", "prev_label_new", "-", "prev_label", ")", "*", "mask_t", ".", "squeeze", "(", "1", ")", ".", "long", "(", ")", "\n", ")", "\n", "\n", "", "return", "(", "logsumexp", "(", "partition", ",", "dim", "=", "1", ")", "-", "tgt_energy", ")", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.modules.crf.ChainCRF.decode": [[155, 209], ["energy.transpose", "mask.unsqueeze().transpose().long", "energy.transpose.size", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "energy[].unsqueeze", "range", "torch.max", "torch.max", "torch.max", "torch.max", "reversed", "torch.zeros.transpose", "torch.zeros.transpose", "torch.max", "torch.max", "torch.max", "torch.max", "pi[].squeeze", "range", "mask.unsqueeze().transpose", "mask.unsqueeze", "mask_t.unsqueeze"], "methods", ["None"], ["", "def", "decode", "(", "self", ",", "energy", ",", "mask", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            energy: Tensor\n                the energy tensor with shape = [batch, length, num_label, num_label]\n            mask: Tensor\n                the mask tensor with shape = [batch, length]\n\n        Returns: Tensor\n            decoding results in shape [batch, length]\n        \"\"\"", "\n", "# Input should be provided as (n_batch, n_time_steps, num_labels, num_labels)", "\n", "# For convenience, we need to dimshuffle to (n_time_steps, n_batch, num_labels,", "\n", "# num_labels)", "\n", "energy_transpose", "=", "energy", ".", "transpose", "(", "0", ",", "1", ")", "\n", "# shape = [length, batch, 1]", "\n", "mask_transpose", "=", "mask", ".", "unsqueeze", "(", "2", ")", ".", "transpose", "(", "0", ",", "1", ")", ".", "long", "(", ")", "\n", "\n", "# the last row and column is the tag for pad symbol. reduce these two dimensions", "\n", "# by 1 to remove that.", "\n", "# now the shape of energies_shuffled is [n_time_steps, b_batch, t, t] where t =", "\n", "# num_labels - 1.", "\n", "energy_transpose", "=", "energy_transpose", "[", ":", ",", ":", ",", ":", "-", "1", ",", ":", "-", "1", "]", "\n", "\n", "length", ",", "batch_size", ",", "num_label", ",", "_", "=", "energy_transpose", ".", "size", "(", ")", "\n", "\n", "batch_index", "=", "torch", ".", "arange", "(", "\n", "0", ",", "batch_size", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "energy", ".", "device", "\n", ")", "\n", "pi", "=", "torch", ".", "zeros", "(", "[", "length", ",", "batch_size", ",", "num_label", ",", "1", "]", ",", "device", "=", "energy", ".", "device", ")", "\n", "pointer", "=", "torch", ".", "zeros", "(", "\n", "[", "length", ",", "batch_size", ",", "num_label", "]", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "energy", ".", "device", "\n", ")", "\n", "dummy_pointer", "=", "torch", ".", "arange", "(", "self", ".", "num_labels", "-", "1", ",", "device", "=", "energy", ".", "device", ")", "\n", "back_pointer", "=", "torch", ".", "zeros", "(", "\n", "[", "length", ",", "batch_size", "]", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "energy", ".", "device", "\n", ")", "\n", "\n", "# [length, batch_size, num_label, 1]", "\n", "pi", "[", "0", "]", "=", "energy", "[", ":", ",", "0", ",", "-", "1", ",", ":", "-", "1", "]", ".", "unsqueeze", "(", "2", ")", "\n", "pointer", "[", "0", "]", "=", "-", "1", "\n", "for", "t", "in", "range", "(", "1", ",", "length", ")", ":", "\n", "            ", "pi_prev", "=", "pi", "[", "t", "-", "1", "]", "\n", "mask_t", "=", "mask_transpose", "[", "t", "]", "\n", "pi_t", ",", "pointer_t", "=", "torch", ".", "max", "(", "energy_transpose", "[", "t", "]", "+", "pi_prev", ",", "dim", "=", "1", ")", "\n", "pointer", "[", "t", "]", "=", "pointer_t", "*", "mask_t", "+", "dummy_pointer", "*", "(", "1", "-", "mask_t", ")", "\n", "pi", "[", "t", "]", "=", "(", "pi_t", "*", "mask_t", ")", ".", "unsqueeze", "(", "2", ")", "+", "pi", "[", "t", "-", "1", "]", "*", "(", "1", "-", "mask_t", ".", "unsqueeze", "(", "2", ")", ")", "\n", "\n", "", "_", ",", "back_pointer", "[", "-", "1", "]", "=", "torch", ".", "max", "(", "pi", "[", "-", "1", "]", ".", "squeeze", "(", "2", ")", ",", "dim", "=", "1", ")", "\n", "for", "t", "in", "reversed", "(", "range", "(", "length", "-", "1", ")", ")", ":", "\n", "            ", "pointer_last", "=", "pointer", "[", "t", "+", "1", "]", "\n", "back_pointer", "[", "t", "]", "=", "pointer_last", "[", "batch_index", ",", "back_pointer", "[", "t", "+", "1", "]", "]", "\n", "\n", "", "return", "back_pointer", ".", "transpose", "(", "0", ",", "1", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.suamin_t2ner.modules.crf.logsumexp": [[16, 32], ["x.max", "x.max", "x.max", "x.max", "torch.log", "torch.log", "torch.log", "torch.log", "torch.exp().sum", "torch.exp().sum", "torch.exp().sum", "torch.exp().sum", "torch.exp", "torch.exp", "torch.exp", "torch.exp"], "function", ["home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.log", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.log", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.log", "home.repos.pwc.inspect_result.suamin_t2ner.t2ner.train.BaseTrainer.log"], ["def", "logsumexp", "(", "x", ",", "dim", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        x: A pytorch tensor (any dimension will do)\n        dim: int or None, over which to perform the summation. `None`, the\n             default, performs over all axes.\n    Returns: The result of the log(sum(exp(...))) operation.\n    \"\"\"", "\n", "if", "dim", "is", "None", ":", "\n", "        ", "xmax", "=", "x", ".", "max", "(", ")", "\n", "xmax_", "=", "x", ".", "max", "(", ")", "\n", "return", "xmax_", "+", "torch", ".", "log", "(", "torch", ".", "exp", "(", "x", "-", "xmax", ")", ".", "sum", "(", ")", ")", "\n", "", "else", ":", "\n", "        ", "xmax", ",", "_", "=", "x", ".", "max", "(", "dim", ",", "keepdim", "=", "True", ")", "\n", "xmax_", ",", "_", "=", "x", ".", "max", "(", "dim", ")", "\n", "return", "xmax_", "+", "torch", ".", "log", "(", "torch", ".", "exp", "(", "x", "-", "xmax", ")", ".", "sum", "(", "dim", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.modules.language_modeling.TransformersCLM.__init__": [[11, 23], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.LayerNorm", "torch.LayerNorm", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.annotate.annotate.SentAnnObj.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "net", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", ",", "\n", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "hidden_size", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "LayerNorm", "(", "config", ".", "hidden_size", ",", "eps", "=", "config", ".", "layer_norm_eps", ")", ",", "\n", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "vocab_size", ")", "\n", ")", "\n", "\n", "self", ".", "vocab_size", "=", "config", ".", "vocab_size", "\n", "self", ".", "num_hidden_layers", "=", "config", ".", "num_hidden_layers", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.modules.language_modeling.TransformersCLM.get_extended_attention_mask": [[24, 44], ["[].repeat", "mask.to.to.to", "extended_attention_mask.to.to.to", "attention_mask.dim", "ValueError", "torch.triu().transpose", "torch.triu().transpose", "torch.triu().transpose", "torch.triu().transpose", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["None"], ["", "def", "get_extended_attention_mask", "(", "self", ",", "attention_mask", ")", ":", "\n", "        ", "if", "attention_mask", ".", "dim", "(", ")", "!=", "2", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Expected 2-dim (batch_size x seq_length) mask.\"", "\n", ")", "\n", "\n", "", "batch_size", ",", "seq_length", "=", "attention_mask", ".", "shape", "# batch_size x seq_len", "\n", "\n", "# Create mask for causal language modeling", "\n", "mask", "=", "(", "\n", "torch", ".", "triu", "(", "torch", ".", "ones", "(", "seq_length", ",", "seq_length", ")", ")", "\n", ".", "transpose", "(", "0", ",", "1", ")", "[", "None", ",", ":", ",", ":", "]", "\n", ".", "repeat", "(", "batch_size", ",", "1", ",", "1", ")", "\n", ")", "\n", "mask", "=", "mask", ".", "to", "(", "attention_mask", ".", "device", ")", "# batch_size x seq_len x seq_len", "\n", "extended_attention_mask", "=", "mask", "[", ":", ",", "None", ",", ":", ",", ":", "]", "*", "attention_mask", "[", ":", ",", "None", ",", "None", ",", ":", "]", "\n", "extended_attention_mask", "=", "extended_attention_mask", ".", "to", "(", "dtype", "=", "attention_mask", ".", "dtype", ")", "\n", "extended_attention_mask", "=", "(", "1.0", "-", "extended_attention_mask", ")", "*", "-", "10000.0", "\n", "\n", "return", "extended_attention_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.modules.language_modeling.TransformersCLM.forward": [[45, 65], ["model.embeddings", "model.get_head_mask", "language_modeling.TransformersCLM.get_extended_attention_mask", "model.encoder", "language_modeling.TransformersCLM.net", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "losses.CausalLanguageModelingLoss"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.modules.language_modeling.TransformersCLM.get_extended_attention_mask"], ["", "def", "forward", "(", "self", ",", "model", ",", "input_ids", ",", "attention_mask", "=", "None", ")", ":", "\n", "        ", "embedding_output", "=", "model", ".", "embeddings", "(", "input_ids", "=", "input_ids", ")", "\n", "head_mask", "=", "model", ".", "get_head_mask", "(", "None", ",", "self", ".", "num_hidden_layers", ")", "\n", "\n", "if", "attention_mask", "is", "None", ":", "\n", "            ", "attention_mask", "=", "torch", ".", "ones", "(", "input_shape", ",", "device", "=", "input_ids", ".", "device", ")", "\n", "\n", "", "extended_attention_mask", "=", "self", ".", "get_extended_attention_mask", "(", "attention_mask", ")", "\n", "\n", "encoder_outputs", "=", "model", ".", "encoder", "(", "\n", "embedding_output", ",", "\n", "attention_mask", "=", "extended_attention_mask", ",", "\n", "head_mask", "=", "head_mask", "\n", ")", "\n", "sequence_output", "=", "encoder_outputs", "[", "0", "]", "\n", "prediction_scores", "=", "self", ".", "net", "(", "sequence_output", ")", "\n", "loss", "=", "CausalLanguageModelingLoss", "(", "self", ".", "vocab_size", ")", "(", "prediction_scores", ",", "input_ids", ")", "\n", "outputs", "=", "{", "\"logits\"", ":", "prediction_scores", ",", "\"loss\"", ":", "loss", "}", "\n", "\n", "return", "outputs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.suamin_t2ner.modules.lstm.LSTM.__init__": [[17, 30], ["torch.Module.__init__", "torch.LSTM", "torch.LSTM"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.annotate.annotate.SentAnnObj.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "input_dim", ",", "\n", "hidden_dim", "=", "384", ",", "\n", "num_layers", "=", "1", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bilstm", "=", "nn", ".", "LSTM", "(", "\n", "input_dim", ",", "\n", "hidden_dim", ",", "\n", "num_layers", ",", "\n", "batch_first", "=", "True", ",", "\n", "bidirectional", "=", "True", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.modules.lstm.LSTM.forward": [[32, 50], ["torch.ones().to.sum().long", "torch.ones().to.sum().long", "torch.ones().to.sum().long.sort", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "lstm.LSTM.bilstm.flatten_parameters", "lstm.LSTM.bilstm", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to.sum().long.cpu().data.numpy", "torch.ones().to.sum", "torch.ones().to.sum", "x.size", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "numpy.argsort", "torch.ones().to.sum().long.cpu", "sorted_idx.cpu().data.numpy", "sorted_idx.cpu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "mask", "=", "None", ")", ":", "\n", "        ", "if", "mask", "is", "None", ":", "\n", "            ", "mask", "=", "torch", ".", "ones", "(", "x", ".", "shape", "[", ":", "2", "]", ")", ".", "to", "(", "x", ".", "device", ")", "\n", "", "lengths", "=", "mask", ".", "sum", "(", "1", ")", ".", "long", "(", ")", "\n", "lengths", ",", "sorted_idx", "=", "lengths", ".", "sort", "(", "0", ",", "descending", "=", "True", ")", "\n", "x", "=", "x", "[", "sorted_idx", "]", "\n", "\n", "packed_x", "=", "pack_padded_sequence", "(", "x", ",", "lengths", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", ",", "batch_first", "=", "True", ")", "\n", "\n", "# TODO (why it happens) current fix cf. https://discuss.pytorch.org/t/rnn-module-weights-are-not-part-of-single-contiguous-chunk-of-memory/6011", "\n", "self", ".", "bilstm", ".", "flatten_parameters", "(", ")", "\n", "\n", "packed_h", ",", "_", "=", "self", ".", "bilstm", "(", "packed_x", ")", "\n", "h", ",", "_", "=", "pad_packed_sequence", "(", "packed_h", ",", "batch_first", "=", "True", ",", "total_length", "=", "x", ".", "size", "(", "1", ")", ")", "\n", "unsorted_idx", "=", "torch", ".", "from_numpy", "(", "np", ".", "argsort", "(", "sorted_idx", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", ")", ")", ".", "to", "(", "x", ".", "device", ")", "\n", "h", "=", "h", "[", "unsorted_idx", "]", "\n", "\n", "return", "h", "\n", "", "", ""]], "home.repos.pwc.inspect_result.suamin_t2ner.modules.grl.GradientReverseFunction.forward": [[12, 17], ["None"], "methods", ["None"], ["class", "GRLTrainer", "(", "AdaptationTrainer", ")", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ",", "training_args", ",", "model_args", ",", "exp_args", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "training_args", ",", "model_args", ",", "exp_args", ")", "\n", "\n", "", "def", "before_train", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.modules.grl.GradientReverseFunction.backward": [[18, 21], ["grad_output.neg"], "methods", ["None"], ["        ", "self", ".", "load_train_data", "(", ")", "\n", "model", "=", "self", ".", "model", "\n", "# Create GRL discriminator", "\n", "disc", "=", "BinaryAdvClassifier", "(", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.modules.grl.GradientReverseLayer.__init__": [[25, 28], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.annotate.annotate.SentAnnObj.__init__"], ["\"gamma\"", ":", "self", ".", "exp_args", ".", "grl_scheduler_gamma", ",", "\n", "\"max_iter\"", ":", "self", ".", "exp_args", ".", "grl_scheduler_max_iter", ",", "\n", "\"lo\"", ":", "self", ".", "exp_args", ".", "grl_scheduler_lo", ",", "\n", "\"hi\"", ":", "self", ".", "exp_args", ".", "grl_scheduler_hi", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.modules.grl.GradientReverseLayer.forward": [[29, 31], ["GradientReverseFunction.apply"], "methods", ["None"], ["}", "\n", ")", "\n", "self", ".", "register_model", "(", "disc", ",", "name", "=", "\"disc\"", ")", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.modules.grl.WarmStartGradientReverseLayer.__init__": [[35, 50], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.annotate.annotate.SentAnnObj.__init__"], ["optim", "=", "\"adamw\"", ",", "\n", "lr_scheduler", "=", "self", ".", "exp_args", ".", "lr_scheduler", "\n", ")", "\n", "self", ".", "configure_optimization", "(", ")", "\n", "\n", "", "def", "run_epoch", "(", "self", ")", ":", "\n", "        ", "model", "=", "self", ".", "_models", "[", "\"model\"", "]", "\n", "disc", "=", "self", ".", "_models", "[", "\"disc\"", "]", "\n", "\n", "metrics", "=", "[", "\"batch_clf_loss\"", ",", "\"batch_disc_loss\"", ",", "\"batch_disc_acc\"", "]", "\n", "for", "k", "in", "metrics", ":", "\n", "            ", "if", "k", "not", "in", "self", ".", "stats", ":", "\n", "                ", "self", ".", "stats", "[", "k", "]", "=", "list", "(", ")", "\n", "\n", "", "", "for", "self", ".", "step", "in", "self", ".", "epoch_iterator", ":", "\n", "            ", "model", ".", "train", "(", ")", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.modules.grl.WarmStartGradientReverseLayer.forward": [[51, 59], ["numpy.float", "GradientReverseFunction.apply", "grl.WarmStartGradientReverseLayer.step", "numpy.exp"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.modules.grl.WarmStartGradientReverseLayer.step"], ["disc", ".", "train", "(", ")", "\n", "\n", "src", ",", "tgt", "=", "self", ".", "get_src_batch", "(", ")", ",", "self", ".", "get_tgt_batch", "(", ")", "\n", "\n", "# Source NER inputs", "\n", "model_outputs", "=", "model", "(", "src", ")", "\n", "clf_loss", "=", "model_outputs", "[", "\"ner\"", "]", "[", "\"loss\"", "]", "\n", "\n", "# Adversarial inputs", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.modules.grl.WarmStartGradientReverseLayer.step": [[60, 62], ["None"], "methods", ["None"], ["xs", "=", "model_outputs", "[", "\"encoder\"", "]", "[", "\"pooled\"", "]", "\n", "# Turn off tagging for tgt", "\n", "xt", "=", "model", "(", "tgt", ",", "tag", "=", "False", ")", "[", "\"encoder\"", "]", "[", "\"pooled\"", "]", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.modules.pooling.Pooling.__init__": [[9, 14], ["torch.Module.__init__", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.annotate.annotate.SentAnnObj.__init__"], ["    ", "def", "__init__", "(", "self", ",", "mode", "=", "\"mean\"", ",", "hidden_dim", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "mode", "=", "mode", "\n", "if", "mode", "==", "\"attn\"", ":", "\n", "            ", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "hidden_dim", ",", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.modules.pooling.Pooling.forward": [[15, 55], ["torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "x.contiguous().view", "pooling.Pooling.linear().view", "attn_scores.masked_fill.masked_fill.masked_fill", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax.unsqueeze().bmm().squeeze", "torch.softmax.unsqueeze().bmm().squeeze", "torch.ones().to.unsqueeze().expand().float", "torch.ones().to.unsqueeze().expand().float", "torch.ones().float().to", "torch.ones().float().to", "torch.ones().float().to", "torch.ones().float().to", "weights.masked_fill.masked_fill.unsqueeze", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "x.contiguous", "pooling.Pooling.linear", "torch.softmax.unsqueeze().bmm", "torch.softmax.unsqueeze().bmm", "weights.masked_fill.masked_fill.masked_fill", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "weights.masked_fill.masked_fill.masked_fill", "torch.ones().to.unsqueeze().expand", "torch.ones().to.unsqueeze().expand", "torch.max", "torch.max", "torch.max", "torch.max", "torch.ones().to.unsqueeze().expand().float.sum", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.ones().float", "torch.ones().float", "torch.ones().float", "torch.ones().float", "x.size", "torch.softmax.unsqueeze", "torch.softmax.unsqueeze", "torch.ones().to.unsqueeze", "torch.ones().to.unsqueeze", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "mask", "=", "None", ",", "weights", "=", "None", ",", "normalize_weights", "=", "False", ")", ":", "\n", "        ", "if", "mask", "is", "None", ":", "\n", "            ", "mask", "=", "torch", ".", "ones", "(", "x", ".", "shape", "[", ":", "2", "]", ")", ".", "to", "(", "x", ".", "device", ")", "\n", "\n", "", "if", "self", ".", "mode", "==", "\"attn\"", ":", "\n", "            ", "batch_size", ",", "seq_len", ",", "hidden_dim", "=", "x", ".", "shape", "\n", "h", "=", "x", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "hidden_dim", ")", "\n", "attn_scores", "=", "self", ".", "linear", "(", "h", ")", ".", "view", "(", "batch_size", ",", "seq_len", ")", "\n", "attn_scores", "=", "attn_scores", ".", "masked_fill", "(", "mask", "==", "0", ",", "-", "1e9", ")", "\n", "attn", "=", "torch", ".", "softmax", "(", "attn_scores", ",", "dim", "=", "1", ")", "\n", "output", "=", "attn", ".", "unsqueeze", "(", "1", ")", ".", "bmm", "(", "x", ")", ".", "squeeze", "(", "1", ")", "\n", "\n", "", "else", ":", "\n", "            ", "if", "weights", "is", "not", "None", ":", "\n", "                ", "if", "normalize_weights", ":", "\n", "                    ", "weights", "=", "weights", ".", "masked_fill", "(", "mask", "==", "0", ",", "-", "1e9", ")", "\n", "weights", "=", "torch", ".", "softmax", "(", "weights", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "                    ", "weights", "=", "weights", ".", "masked_fill", "(", "mask", "==", "0", ",", "0.", ")", "\n", "", "", "else", ":", "\n", "                ", "weights", "=", "torch", ".", "ones", "(", "x", ".", "shape", "[", ":", "2", "]", ")", ".", "float", "(", ")", ".", "to", "(", "x", ".", "device", ")", "\n", "\n", "", "x", "=", "x", "*", "weights", ".", "unsqueeze", "(", "-", "1", ")", "\n", "mask_expanded", "=", "mask", ".", "unsqueeze", "(", "-", "1", ")", ".", "expand", "(", "x", ".", "size", "(", ")", ")", ".", "float", "(", ")", "\n", "\n", "if", "self", ".", "mode", "==", "\"max\"", ":", "\n", "                ", "output", "=", "torch", ".", "max", "(", "x", ",", "1", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "                ", "sum_x", "=", "torch", ".", "sum", "(", "x", "*", "mask_expanded", ",", "1", ")", "\n", "if", "self", ".", "mode", "==", "\"sum\"", ":", "\n", "                    ", "output", "=", "sum_x", "\n", "", "else", ":", "\n", "                    ", "sum_mask", "=", "mask_expanded", ".", "sum", "(", "1", ")", "\n", "sum_mask", "=", "torch", ".", "clamp", "(", "sum_mask", ",", "min", "=", "1e-9", ")", "\n", "if", "self", ".", "mode", "==", "\"mean_sqrt_len\"", ":", "\n", "                        ", "output", "=", "sum_x", "/", "torch", ".", "sqrt", "(", "sum_mask", ")", "\n", "", "else", ":", "\n", "                        ", "output", "=", "sum_x", "/", "sum_mask", "\n", "\n", "", "", "", "", "return", "output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.suamin_t2ner.modules.masked_softmax.MaskedSoftmax.__init__": [[9, 11], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.annotate.annotate.SentAnnObj.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.modules.masked_softmax.MaskedSoftmax.forward": [[12, 21], ["torch.exp", "torch.exp", "torch.exp", "torch.exp", "masked_exps.sum", "mask.unsqueeze().float", "mask.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "logits", ",", "mask", "=", "None", ",", "dim", "=", "-", "1", ",", "epsilon", "=", "1e-5", ")", ":", "\n", "# cf. https://discuss.pytorch.org/t/apply-mask-softmax/14212/15", "\n", "        ", "exps", "=", "torch", ".", "exp", "(", "logits", ")", "\n", "if", "mask", "is", "not", "None", ":", "\n", "            ", "masked_exps", "=", "exps", "*", "mask", ".", "unsqueeze", "(", "-", "1", ")", ".", "float", "(", ")", "\n", "", "else", ":", "\n", "            ", "masked_exps", "=", "exps", "\n", "", "masked_sums", "=", "masked_exps", ".", "sum", "(", "dim", ",", "keepdim", "=", "True", ")", "+", "epsilon", "\n", "return", "masked_exps", "/", "masked_sums", "\n", "", "", ""]], "home.repos.pwc.inspect_result.suamin_t2ner.modules.mmd.MaximumMeanDiscrepancy.__init__": [[11, 15], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.annotate.annotate.SentAnnObj.__init__"], ["    ", "def", "__init__", "(", "self", ",", "kernel_type", "=", "\"rbf\"", ",", "normalize", "=", "False", ")", ":", "\n", "        ", "super", "(", "MaximumMeanDiscrepancy", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "kernel_type", "=", "kernel_type", "\n", "self", ".", "normalize", "=", "normalize", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.modules.mmd.MaximumMeanDiscrepancy.forward": [[16, 30], ["torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "mmd.MaximumMeanDiscrepancy.linear_mmd", "mmd.MaximumMeanDiscrepancy.poly_mmd", "mmd.MaximumMeanDiscrepancy.rbf_mmd"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.modules.mmd.MaximumMeanDiscrepancy.linear_mmd", "home.repos.pwc.inspect_result.suamin_t2ner.modules.mmd.MaximumMeanDiscrepancy.poly_mmd", "home.repos.pwc.inspect_result.suamin_t2ner.modules.mmd.MaximumMeanDiscrepancy.rbf_mmd"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "# x, y: two batches of data with shape (batch, dim)", "\n", "# MMD^2(x, y) = k(x, x') - 2k(x, y) + k(y, y')", "\n", "        ", "if", "self", ".", "normalize", ":", "\n", "            ", "x", "=", "F", ".", "normalize", "(", "x", ",", "dim", "=", "1", ")", "\n", "y", "=", "F", ".", "normalize", "(", "y", ",", "dim", "=", "1", ")", "\n", "", "if", "self", ".", "kernel_type", "==", "\"linear\"", ":", "\n", "            ", "return", "self", ".", "linear_mmd", "(", "x", ",", "y", ")", "\n", "", "elif", "self", ".", "kernel_type", "==", "\"poly\"", ":", "\n", "            ", "return", "self", ".", "poly_mmd", "(", "x", ",", "y", ")", "\n", "", "elif", "self", ".", "kernel_type", "==", "\"rbf\"", ":", "\n", "            ", "return", "self", ".", "rbf_mmd", "(", "x", ",", "y", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.modules.mmd.MaximumMeanDiscrepancy.linear_mmd": [[31, 37], ["mmd.MaximumMeanDiscrepancy.remove_self_distance", "mmd.MaximumMeanDiscrepancy.remove_self_distance", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "y.t", "x.t", "y.t", "mmd.MaximumMeanDiscrepancy.mean", "mmd.MaximumMeanDiscrepancy.mean", "torch.mm.mean", "torch.mm.mean"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.modules.mmd.MaximumMeanDiscrepancy.remove_self_distance", "home.repos.pwc.inspect_result.suamin_t2ner.modules.mmd.MaximumMeanDiscrepancy.remove_self_distance"], ["", "", "def", "linear_mmd", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "# k(x, y) = x^T y", "\n", "        ", "k_xx", "=", "self", ".", "remove_self_distance", "(", "torch", ".", "mm", "(", "x", ",", "x", ".", "t", "(", ")", ")", ")", "\n", "k_yy", "=", "self", ".", "remove_self_distance", "(", "torch", ".", "mm", "(", "y", ",", "y", ".", "t", "(", ")", ")", ")", "\n", "k_xy", "=", "torch", ".", "mm", "(", "x", ",", "y", ".", "t", "(", ")", ")", "\n", "return", "k_xx", ".", "mean", "(", ")", "+", "k_yy", ".", "mean", "(", ")", "-", "2", "*", "k_xy", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.modules.mmd.MaximumMeanDiscrepancy.poly_mmd": [[38, 47], ["mmd.MaximumMeanDiscrepancy.remove_self_distance", "mmd.MaximumMeanDiscrepancy.remove_self_distance", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "y.t", "x.t", "y.t", "mmd.MaximumMeanDiscrepancy.mean", "mmd.MaximumMeanDiscrepancy.mean", "torch.mm.mean", "torch.mm.mean"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.modules.mmd.MaximumMeanDiscrepancy.remove_self_distance", "home.repos.pwc.inspect_result.suamin_t2ner.modules.mmd.MaximumMeanDiscrepancy.remove_self_distance"], ["", "def", "poly_mmd", "(", "self", ",", "x", ",", "y", ",", "alpha", "=", "1.", ",", "c", "=", "2.", ",", "d", "=", "2", ")", ":", "\n", "# k(x, y) = (alpha * x^T y + c)^d", "\n", "        ", "k_xx", "=", "self", ".", "remove_self_distance", "(", "torch", ".", "mm", "(", "x", ",", "x", ".", "t", "(", ")", ")", ")", "\n", "k_xx", "=", "(", "alpha", "*", "k_xx", "+", "c", ")", ".", "pow", "(", "d", ")", "\n", "k_yy", "=", "self", ".", "remove_self_distance", "(", "torch", ".", "mm", "(", "y", ",", "y", ".", "t", "(", ")", ")", ")", "\n", "k_yy", "=", "(", "alpha", "*", "k_yy", "+", "c", ")", ".", "pow", "(", "d", ")", "\n", "k_xy", "=", "torch", ".", "mm", "(", "x", ",", "y", ".", "t", "(", ")", ")", "\n", "k_xy", "=", "(", "alpha", "*", "k_xy", "+", "c", ")", ".", "pow", "(", "d", ")", "\n", "return", "k_xx", ".", "mean", "(", ")", "+", "k_yy", ".", "mean", "(", ")", "-", "2", "*", "k_xy", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.modules.mmd.MaximumMeanDiscrepancy.rbf_mmd": [[48, 61], ["mmd.MaximumMeanDiscrepancy.euclidean_squared_distance", "mmd.MaximumMeanDiscrepancy.remove_self_distance", "mmd.MaximumMeanDiscrepancy.rbf_kernel_mixture", "mmd.MaximumMeanDiscrepancy.euclidean_squared_distance", "mmd.MaximumMeanDiscrepancy.remove_self_distance", "mmd.MaximumMeanDiscrepancy.rbf_kernel_mixture", "mmd.MaximumMeanDiscrepancy.euclidean_squared_distance", "mmd.MaximumMeanDiscrepancy.rbf_kernel_mixture", "mmd.MaximumMeanDiscrepancy.mean", "mmd.MaximumMeanDiscrepancy.mean", "mmd.MaximumMeanDiscrepancy.mean"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.modules.mmd.MaximumMeanDiscrepancy.euclidean_squared_distance", "home.repos.pwc.inspect_result.suamin_t2ner.modules.mmd.MaximumMeanDiscrepancy.remove_self_distance", "home.repos.pwc.inspect_result.suamin_t2ner.modules.mmd.MaximumMeanDiscrepancy.rbf_kernel_mixture", "home.repos.pwc.inspect_result.suamin_t2ner.modules.mmd.MaximumMeanDiscrepancy.euclidean_squared_distance", "home.repos.pwc.inspect_result.suamin_t2ner.modules.mmd.MaximumMeanDiscrepancy.remove_self_distance", "home.repos.pwc.inspect_result.suamin_t2ner.modules.mmd.MaximumMeanDiscrepancy.rbf_kernel_mixture", "home.repos.pwc.inspect_result.suamin_t2ner.modules.mmd.MaximumMeanDiscrepancy.euclidean_squared_distance", "home.repos.pwc.inspect_result.suamin_t2ner.modules.mmd.MaximumMeanDiscrepancy.rbf_kernel_mixture"], ["", "def", "rbf_mmd", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "# k_xx", "\n", "        ", "d_xx", "=", "self", ".", "euclidean_squared_distance", "(", "x", ",", "x", ")", "\n", "d_xx", "=", "self", ".", "remove_self_distance", "(", "d_xx", ")", "\n", "k_xx", "=", "self", ".", "rbf_kernel_mixture", "(", "d_xx", ")", "\n", "# k_yy", "\n", "d_yy", "=", "self", ".", "euclidean_squared_distance", "(", "y", ",", "y", ")", "\n", "d_yy", "=", "self", ".", "remove_self_distance", "(", "d_yy", ")", "\n", "k_yy", "=", "self", ".", "rbf_kernel_mixture", "(", "d_yy", ")", "\n", "# k_xy", "\n", "d_xy", "=", "self", ".", "euclidean_squared_distance", "(", "x", ",", "y", ")", "\n", "k_xy", "=", "self", ".", "rbf_kernel_mixture", "(", "d_xy", ")", "\n", "return", "k_xx", ".", "mean", "(", ")", "+", "k_yy", ".", "mean", "(", ")", "-", "2", "*", "k_xy", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.modules.mmd.MaximumMeanDiscrepancy.rbf_kernel_mixture": [[62, 69], ["torch.exp", "torch.exp", "torch.exp", "torch.exp"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "rbf_kernel_mixture", "(", "exponent", ",", "sigmas", "=", "[", "1", ",", "5", ",", "10", "]", ")", ":", "\n", "        ", "K", "=", "0", "\n", "for", "sigma", "in", "sigmas", ":", "\n", "            ", "gamma", "=", "1.", "/", "(", "2.", "*", "sigma", "**", "2", ")", "\n", "K", "+=", "torch", ".", "exp", "(", "-", "gamma", "*", "exponent", ")", "\n", "", "return", "K", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.modules.mmd.MaximumMeanDiscrepancy.remove_self_distance": [[70, 77], ["enumerate", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "tmp_list.append"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "remove_self_distance", "(", "distmat", ")", ":", "\n", "        ", "tmp_list", "=", "[", "]", "\n", "for", "i", ",", "row", "in", "enumerate", "(", "distmat", ")", ":", "\n", "            ", "row1", "=", "torch", ".", "cat", "(", "[", "row", "[", ":", "i", "]", ",", "row", "[", "i", "+", "1", ":", "]", "]", ")", "\n", "tmp_list", ".", "append", "(", "row1", ")", "\n", "", "return", "torch", ".", "stack", "(", "tmp_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.modules.mmd.MaximumMeanDiscrepancy.euclidean_squared_distance": [[78, 85], ["distmat.addmm_", "x.size", "y.size", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand().t", "torch.pow().sum().expand().t", "torch.pow().sum().expand().t", "torch.pow().sum().expand().t", "y.t", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow", "torch.pow", "torch.pow", "torch.pow"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "euclidean_squared_distance", "(", "x", ",", "y", ")", ":", "\n", "        ", "m", ",", "n", "=", "x", ".", "size", "(", "0", ")", ",", "y", ".", "size", "(", "0", ")", "\n", "distmat", "=", "torch", ".", "pow", "(", "x", ",", "2", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "expand", "(", "m", ",", "n", ")", "+", "torch", ".", "pow", "(", "y", ",", "2", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "expand", "(", "n", ",", "m", ")", ".", "t", "(", ")", "\n", "distmat", ".", "addmm_", "(", "1", ",", "-", "2", ",", "x", ",", "y", ".", "t", "(", ")", ")", "\n", "return", "distmat", "\n", "", "", ""]], "home.repos.pwc.inspect_result.suamin_t2ner.modules.transformer.Transformer.__init__": [[8, 26], ["torch.Module.__init__", "torch.TransformerEncoderLayer", "torch.TransformerEncoder"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.annotate.annotate.SentAnnObj.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "input_dim", ",", "\n", "hidden_dim", "=", "768", ",", "\n", "num_layers", "=", "1", ",", "\n", "num_heads", "=", "8", ",", "\n", "dropout", "=", "0.1", ",", "\n", "activation", "=", "\"relu\"", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "transformer_encoder_layer", "=", "nn", ".", "TransformerEncoderLayer", "(", "\n", "input_dim", ",", "\n", "num_heads", ",", "\n", "dim_feedforward", "=", "hidden_dim", ",", "\n", "dropout", "=", "dropout", ",", "\n", "activation", "=", "activation", ",", "\n", ")", "\n", "self", ".", "transformer", "=", "nn", ".", "TransformerEncoder", "(", "transformer_encoder_layer", ",", "num_layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.modules.transformer.Transformer.forward": [[27, 33], ["transformer.Transformer.transformer", "h.transpose.transpose.transpose", "torch.ones().to", "x.transpose", "torch.ones"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "mask", "=", "None", ")", ":", "\n", "        ", "if", "mask", "is", "None", ":", "\n", "            ", "mask", "=", "torch", ".", "ones", "(", "x", ".", "shape", "[", ":", "2", "]", ")", ".", "to", "(", "x", ".", "device", ")", "\n", "", "h", "=", "self", ".", "transformer", "(", "x", ".", "transpose", "(", "0", ",", "1", ")", ",", "src_key_padding_mask", "=", "(", "mask", "==", "0", ")", ")", "\n", "h", "=", "h", ".", "transpose", "(", "0", ",", "1", ")", "\n", "return", "h", "\n", "", "", ""]], "home.repos.pwc.inspect_result.suamin_t2ner.modules.tagger.Tagger.__init__": [[12, 37], ["torch.Module.__init__", "crf.ChainCRF", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.annotate.annotate.SentAnnObj.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "input_dim", ",", "\n", "num_labels", ",", "\n", "use_crf", "=", "False", ",", "\n", "bigram", "=", "None", ",", "\n", "loss_fct", "=", "None", ",", "\n", "class_num_list", "=", "None", ",", "\n", "ignore_bias", "=", "False", ",", "\n", "normalize", "=", "False", ",", "\n", "temp", "=", "-", "1", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "use_crf", ":", "\n", "            ", "if", "bigram", "is", "None", ":", "\n", "                ", "bigram", "=", "True", "\n", "", "self", ".", "crf", "=", "ChainCRF", "(", "input_dim", ",", "num_labels", ",", "bigram", "=", "bigram", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "clf", "=", "nn", ".", "Linear", "(", "input_dim", ",", "num_labels", ",", "bias", "=", "not", "ignore_bias", ")", "\n", "", "self", ".", "use_crf", "=", "use_crf", "\n", "self", ".", "num_labels", "=", "num_labels", "\n", "self", ".", "loss_fct", "=", "loss_fct", "\n", "self", ".", "class_num_list", "=", "class_num_list", "\n", "self", ".", "normalize", "=", "normalize", "\n", "self", ".", "temp", "=", "temp", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.modules.tagger.Tagger.crf_forward": [[38, 53], ["tagger.Tagger.crf", "labels.masked_fill", "mask.float.float.float", "tagger.Tagger.crf.loss", "tagger.Tagger.crf.decode"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.modules.crf.ChainCRF.loss", "home.repos.pwc.inspect_result.suamin_t2ner.modules.crf.ChainCRF.decode"], ["", "def", "crf_forward", "(", "self", ",", "x", ",", "mask", "=", "None", ",", "labels", "=", "None", ")", ":", "\n", "        ", "if", "mask", "is", "not", "None", ":", "\n", "            ", "mask", "=", "mask", ".", "float", "(", ")", "\n", "", "energy", "=", "self", ".", "crf", "(", "x", ",", "mask", "=", "mask", ")", "\n", "target", "=", "labels", ".", "masked_fill", "(", "labels", "==", "IGNORE_INDEX", ",", "self", ".", "num_labels", ")", "\n", "log_probs", "=", "energy", "\n", "outputs", "=", "{", "\"logits\"", ":", "log_probs", "}", "\n", "\n", "if", "labels", "is", "not", "None", ":", "\n", "            ", "outputs", "[", "\"loss\"", "]", "=", "self", ".", "crf", ".", "loss", "(", "log_probs", ",", "labels", ",", "mask", "=", "mask", ")", "\n", "# If in evaluation mode, perform decoding here", "\n", "if", "not", "self", ".", "training", ":", "\n", "                ", "outputs", "[", "\"prediction\"", "]", "=", "self", ".", "crf", ".", "decode", "(", "log_probs", ",", "mask", "=", "mask", ")", "\n", "\n", "", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.modules.tagger.Tagger.clf_forward": [[54, 72], ["tagger.Tagger.clf", "torch.functional.normalize", "losses.MaskedSeqCrossEntropyLoss.", "losses.MaskedSeqFocalLoss", "losses.MaskedSeqLDAMLoss", "losses.MaskedSeqCrossEntropyLoss"], "methods", ["None"], ["", "def", "clf_forward", "(", "self", ",", "x", ",", "mask", "=", "None", ",", "labels", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "normalize", ":", "\n", "            ", "x", "=", "nn", ".", "functional", ".", "normalize", "(", "x", ",", "p", "=", "2", ",", "dim", "=", "-", "1", ")", "\n", "", "logits", "=", "self", ".", "clf", "(", "x", ")", "\n", "if", "self", ".", "temp", ">", "0.", ":", "\n", "            ", "logits", "/=", "self", ".", "temp", "\n", "", "outputs", "=", "{", "\"logits\"", ":", "logits", "}", "\n", "\n", "if", "labels", "is", "not", "None", ":", "\n", "            ", "if", "self", ".", "loss_fct", "==", "\"focal\"", ":", "\n", "                ", "loss_fct", "=", "MaskedSeqFocalLoss", "(", "self", ".", "num_labels", ")", "\n", "", "elif", "self", ".", "loss_fct", "==", "\"ldam\"", ":", "\n", "                ", "loss_fct", "=", "MaskedSeqLDAMLoss", "(", "self", ".", "num_labels", ",", "self", ".", "class_num_list", ")", "\n", "", "else", ":", "\n", "                ", "loss_fct", "=", "MaskedSeqCrossEntropyLoss", "(", "self", ".", "num_labels", ")", "\n", "", "outputs", "[", "\"loss\"", "]", "=", "loss_fct", "(", "logits", ",", "labels", ",", "mask", ")", "\n", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.modules.tagger.Tagger.forward": [[73, 79], ["tagger.Tagger.crf_forward", "tagger.Tagger.clf_forward"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.modules.tagger.Tagger.crf_forward", "home.repos.pwc.inspect_result.suamin_t2ner.modules.tagger.Tagger.clf_forward"], ["", "def", "forward", "(", "self", ",", "x", ",", "mask", "=", "None", ",", "labels", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "use_crf", ":", "\n", "            ", "outputs", "=", "self", ".", "crf_forward", "(", "x", ",", "mask", ",", "labels", ")", "# Use CRF", "\n", "", "else", ":", "\n", "            ", "outputs", "=", "self", ".", "clf_forward", "(", "x", ",", "mask", ",", "labels", ")", "# Use simple linear classifier", "\n", "", "return", "outputs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.suamin_t2ner.modules.classifier.SoftmaxClassifier.__init__": [[12, 15], ["torch.Module.__init__", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.annotate.annotate.SentAnnObj.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", ",", "num_labels", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "input_dim", ",", "num_labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.modules.classifier.SoftmaxClassifier.forward": [[16, 22], ["classifier.SoftmaxClassifier.linear", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "label", "=", "None", ")", ":", "\n", "        ", "logits", "=", "self", ".", "linear", "(", "x", ")", "\n", "outputs", "=", "{", "\"logits\"", ":", "logits", "}", "\n", "if", "label", "is", "not", "None", ":", "\n", "            ", "outputs", "[", "\"loss\"", "]", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "(", "logits", ",", "label", ")", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.modules.classifier.BinaryClassifier.__init__": [[26, 29], ["torch.Module.__init__", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.annotate.annotate.SentAnnObj.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "input_dim", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.modules.classifier.BinaryClassifier.forward": [[30, 36], ["classifier.BinaryClassifier.linear().squeeze_", "classifier.BinaryClassifier.linear", "torch.BCEWithLogitsLoss", "torch.BCEWithLogitsLoss", "label.float"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "label", "=", "None", ")", ":", "\n", "        ", "logits", "=", "self", ".", "linear", "(", "x", ")", ".", "squeeze_", "(", "-", "1", ")", "\n", "outputs", "=", "{", "\"logits\"", ":", "logits", "}", "\n", "if", "label", "is", "not", "None", ":", "\n", "            ", "outputs", "[", "\"loss\"", "]", "=", "nn", ".", "BCEWithLogitsLoss", "(", ")", "(", "logits", ",", "label", ".", "float", "(", ")", ")", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.modules.classifier.MLP.__init__": [[47, 59], ["torch.Module.__init__", "list", "range", "list.append", "torch.Sequential", "torch.Sequential", "list", "list.append", "list.append", "list.extend", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "list.append", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.annotate.annotate.SentAnnObj.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", ",", "output_dim", ",", "num_layers", "=", "1", ",", "dropout", "=", "0.", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "net", "=", "list", "(", ")", "\n", "for", "_", "in", "range", "(", "num_layers", "-", "1", ")", ":", "\n", "            ", "layers", "=", "list", "(", ")", "\n", "layers", ".", "append", "(", "nn", ".", "Linear", "(", "input_dim", ",", "input_dim", ")", ")", "\n", "layers", ".", "append", "(", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "if", "dropout", ">", "0", ":", "\n", "                ", "layers", ".", "append", "(", "nn", ".", "Dropout", "(", "dropout", ")", ")", "\n", "", "net", ".", "extend", "(", "layers", ")", "\n", "", "net", ".", "append", "(", "nn", ".", "Linear", "(", "input_dim", ",", "output_dim", ")", ")", "\n", "self", ".", "net", "=", "nn", ".", "Sequential", "(", "*", "net", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.modules.classifier.MLP.forward": [[60, 62], ["classifier.MLP.net().squeeze_", "classifier.MLP.net"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "net", "(", "x", ")", ".", "squeeze_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.modules.classifier.WassersteinCritic.__init__": [[66, 68], ["classifier.MLP.__init__"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.annotate.annotate.SentAnnObj.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", ",", "output_dim", "=", "1", ",", "num_layers", "=", "1", ",", "dropout", "=", "0.", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "input_dim", ",", "output_dim", ",", "num_layers", ",", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.modules.classifier.WassersteinCritic.forward": [[69, 73], ["classifier.WassersteinCritic.net", "classifier.WassersteinCritic.mean"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "fx", "=", "self", ".", "net", "(", "x", ")", "\n", "outputs", "=", "{", "\"logits\"", ":", "fx", ",", "\"loss\"", ":", "fx", ".", "mean", "(", ")", "}", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.modules.classifier.SeqWassersteinCritic.__init__": [[77, 79], ["classifier.MLP.__init__"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.annotate.annotate.SentAnnObj.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", ",", "output_dim", "=", "1", ",", "num_layers", "=", "1", ",", "dropout", "=", "0.", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "input_dim", ",", "output_dim", ",", "num_layers", ",", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.modules.classifier.SeqWassersteinCritic.forward": [[80, 89], ["classifier.SeqWassersteinCritic.net", "fx.sum.sum.sum", "fx.sum.sum.mean", "mask.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "seq", ",", "mask", "=", "None", ")", ":", "\n", "# seq : batch_size x seq_len x hidden_dim", "\n", "# mask : batch_size x seq_len", "\n", "        ", "fx", "=", "self", ".", "net", "(", "seq", ")", "\n", "if", "mask", "is", "not", "None", ":", "\n", "            ", "fx", "=", "fx", "*", "mask", ".", "unsqueeze", "(", "-", "1", ")", "\n", "", "fx", "=", "fx", ".", "sum", "(", "-", "1", ")", "\n", "outputs", "=", "{", "\"logits\"", ":", "fx", ",", "\"loss\"", ":", "fx", ".", "mean", "(", ")", "}", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.modules.classifier.BinaryAdvClassifier.__init__": [[112, 117], ["torch.Module.__init__", "GRL", "classifier.BinaryClassifier", "torch.BCEWithLogitsLoss", "torch.BCEWithLogitsLoss"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.annotate.annotate.SentAnnObj.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", ",", "coeff", "=", "-", "1", ",", "**", "scheduler_kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "grl", "=", "GRL", "(", "coeff", ",", "**", "scheduler_kwargs", ")", "\n", "self", ".", "classifier", "=", "BinaryClassifier", "(", "input_dim", ")", "\n", "self", ".", "bce", "=", "nn", ".", "BCEWithLogitsLoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.modules.classifier.BinaryAdvClassifier.forward": [[118, 130], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "h.chunk", "classifier.get_dummy_labels", "classifier.BinaryAdvClassifier.grl", "classifier.BinaryAdvClassifier.classifier", "classifier.BinaryAdvClassifier.bce", "classifier.BinaryAdvClassifier.bce", "classifier.binary_accuracy", "classifier.binary_accuracy", "ls.float", "lt.float"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.modules.classifier.get_dummy_labels", "home.repos.pwc.inspect_result.suamin_t2ner.modules.classifier.binary_accuracy", "home.repos.pwc.inspect_result.suamin_t2ner.modules.classifier.binary_accuracy"], ["", "def", "forward", "(", "self", ",", "xs", ",", "xt", ",", "apply_grl", "=", "True", ",", "flip", "=", "False", ")", ":", "\n", "        ", "x", "=", "torch", ".", "cat", "(", "(", "xs", ",", "xt", ")", ",", "dim", "=", "0", ")", "\n", "if", "apply_grl", ":", "\n", "            ", "x", "=", "self", ".", "grl", "(", "x", ")", "\n", "", "h", "=", "self", ".", "classifier", "(", "x", ")", "[", "\"logits\"", "]", "\n", "hs", ",", "ht", "=", "h", ".", "chunk", "(", "2", ",", "dim", "=", "0", ")", "\n", "ls", ",", "lt", "=", "get_dummy_labels", "(", "hs", ".", "shape", ",", "ht", ".", "shape", ",", "xs", ".", "device", ",", "flip", ")", "\n", "outputs", "=", "{", "\n", "\"loss\"", ":", "0.5", "*", "(", "self", ".", "bce", "(", "hs", ",", "ls", ".", "float", "(", ")", ")", "+", "self", ".", "bce", "(", "ht", ",", "lt", ".", "float", "(", ")", ")", ")", ",", "\n", "\"acc\"", ":", "0.5", "*", "(", "binary_accuracy", "(", "hs", ",", "ls", ")", "+", "binary_accuracy", "(", "ht", ",", "lt", ")", ")", "\n", "}", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.modules.classifier.get_clf_head": [[38, 43], ["classifier.BinaryClassifier", "classifier.SoftmaxClassifier"], "function", ["None"], ["", "", "def", "get_clf_head", "(", "input_dim", ",", "num_labels", ")", ":", "\n", "    ", "if", "num_labels", "==", "2", ":", "\n", "        ", "return", "BinaryClassifier", "(", "input_dim", ")", "\n", "", "else", ":", "\n", "        ", "return", "SoftmaxClassifier", "(", "input_dim", ",", "num_labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.modules.classifier.get_grl": [[91, 103], ["grl.GradientReverseLayer", "grl.WarmStartGradientReverseLayer", "scheduler_kwargs.get", "scheduler_kwargs.get", "scheduler_kwargs.get", "scheduler_kwargs.get", "scheduler_kwargs.get"], "function", ["None"], ["", "", "def", "get_grl", "(", "coeff", "=", "-", "1", ",", "**", "scheduler_kwargs", ")", ":", "\n", "    ", "if", "coeff", ">", "0.", ":", "\n", "        ", "grl", "=", "GradientReverseLayer", "(", "coeff", ")", "\n", "", "else", ":", "\n", "        ", "grl", "=", "WarmStartGradientReverseLayer", "(", "\n", "alpha", "=", "scheduler_kwargs", ".", "get", "(", "\"gamma\"", ",", "10.", ")", ",", "\n", "lo", "=", "scheduler_kwargs", ".", "get", "(", "\"lo\"", ",", "0.", ")", ",", "\n", "hi", "=", "scheduler_kwargs", ".", "get", "(", "\"hi\"", ",", "1.", ")", ",", "\n", "max_iters", "=", "scheduler_kwargs", ".", "get", "(", "\"max_iters\"", ",", "1000.", ")", ",", "\n", "auto_step", "=", "scheduler_kwargs", ".", "get", "(", "\"auto_step\"", ",", "True", ")", "\n", ")", "\n", "", "return", "grl", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.modules.classifier.get_dummy_labels": [[132, 141], ["len", "len", "torch.ones().to", "torch.ones().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.ones().to", "torch.ones().to", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones"], "function", ["None"], ["", "", "def", "get_dummy_labels", "(", "shape_s", ",", "shape_t", ",", "device", ",", "flip", "=", "False", ")", ":", "\n", "    ", "if", "len", "(", "shape_s", ")", ">", "1", ":", "\n", "        ", "shape_s", "=", "shape_s", "[", ":", "-", "1", "]", "\n", "", "if", "len", "(", "shape_t", ")", ">", "1", ":", "\n", "        ", "shape_t", "=", "shape_t", "[", ":", "-", "1", "]", "\n", "", "if", "not", "flip", ":", "\n", "        ", "return", "torch", ".", "ones", "(", "shape_s", ")", ".", "to", "(", "device", ")", ",", "torch", ".", "zeros", "(", "shape_t", ")", ".", "to", "(", "device", ")", "\n", "", "else", ":", "\n", "        ", "return", "torch", ".", "zeros", "(", "shape_s", ")", ".", "to", "(", "device", ")", ",", "torch", ".", "ones", "(", "shape_t", ")", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.modules.classifier.binary_accuracy": [[143, 151], ["torch.no_grad", "torch.no_grad", "target.size", "pred.eq().float().sum", "pred.eq().float().sum.mul_", "torch.Sigmoid", "pred.eq().float", "pred.eq", "target.view"], "function", ["None"], ["", "", "def", "binary_accuracy", "(", "output", ",", "target", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "output", "=", "nn", ".", "Sigmoid", "(", ")", "(", "output", ")", "\n", "pred", "=", "(", "output", ">=", "0.5", ")", ".", "float", "(", ")", ".", "t", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "-", "1", ")", ")", ".", "float", "(", ")", ".", "sum", "(", ")", "\n", "correct", ".", "mul_", "(", "100.", "/", "batch_size", ")", "\n", "return", "correct", "\n", "", "", ""]], "home.repos.pwc.inspect_result.suamin_t2ner.models.token_classification.TokenClassificationUtils.__init__": [[17, 19], ["base.TransformersUtils.__init__"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.annotate.annotate.SentAnnObj.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.models.token_classification.TokenClassificationUtils.add_classifier": [[20, 33], ["modules.TokenClassifier", "torch.Dropout", "torch.Dropout"], "methods", ["None"], ["", "def", "add_classifier", "(", "self", ")", ":", "\n", "        ", "self", ".", "classifier", "=", "modules", ".", "TokenClassifier", "(", "\n", "self", ".", "config", ".", "hidden_size", ",", "\n", "self", ".", "config", ".", "num_labels", ",", "\n", "use_crf", "=", "self", ".", "config", ".", "use_crf", ",", "\n", "bigram", "=", "self", ".", "config", ".", "crf_bigram", ",", "\n", "loss_fct", "=", "self", ".", "config", ".", "loss_fct", ",", "\n", "class_num_list", "=", "self", ".", "config", ".", "class_num_list", ",", "\n", "ignore_bias", "=", "self", ".", "config", ".", "ignore_bias_clf", ",", "\n", "normalize", "=", "self", ".", "config", ".", "normalize_clf", ",", "\n", "temp", "=", "self", ".", "config", ".", "temp_clf", "\n", ")", "\n", "self", ".", "output_dropout", "=", "nn", ".", "Dropout", "(", "self", ".", "config", ".", "output_classifier_dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.models.token_classification.TokenClassificationUtils.forward": [[34, 63], ["inputs.get", "token_classification.TokenClassificationUtils.encode", "hasattr", "token_classification.TokenClassificationUtils.output_dropout", "hasattr", "token_classification.TokenClassificationUtils.xnet", "token_classification.TokenClassificationUtils.pooler", "token_classification.TokenClassificationUtils.output_dropout", "inputs.get", "token_classification.TokenClassificationUtils.classifier"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.data.ner.NERFeatures.encode"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "tag", "=", "True", ")", ":", "\n", "        ", "input_ids", "=", "inputs", "[", "\"input_ids\"", "]", "\n", "input_mask", "=", "inputs", ".", "get", "(", "\"input_mask\"", ",", "None", ")", "\n", "encoded", "=", "self", ".", "encode", "(", "input_ids", ",", "input_mask", ")", "\n", "sequence_output", ",", "cls_output", ",", "pooled", ",", "x_output", "=", "encoded", "\n", "\n", "if", "hasattr", "(", "self", ",", "\"xnet\"", ")", ":", "\n", "            ", "sequence_output", "=", "self", ".", "xnet", "(", "encoded", ",", "mask", "=", "input_mask", ")", "\n", "\n", "", "sequence_output", "=", "self", ".", "output_dropout", "(", "sequence_output", ")", "\n", "\n", "if", "hasattr", "(", "self", ",", "\"pooler\"", ")", ":", "\n", "            ", "pooled", "=", "self", ".", "pooler", "(", "sequence_output", ",", "mask", "=", "input_mask", ")", "\n", "", "else", ":", "\n", "            ", "pooled", "=", "self", ".", "output_dropout", "(", "pooled", ")", "\n", "\n", "", "outputs", "=", "{", "\n", "\"encoder\"", ":", "{", "\n", "\"seq\"", ":", "sequence_output", ",", "\n", "\"cls\"", ":", "cls_output", ",", "\n", "\"pooled\"", ":", "pooled", ",", "\n", "\"x\"", ":", "x_output", "\n", "}", "\n", "}", "\n", "if", "tag", ":", "\n", "            ", "labels", "=", "inputs", ".", "get", "(", "\"label_ids\"", ",", "None", ")", "\n", "outputs", "[", "\"ner\"", "]", "=", "self", ".", "classifier", "(", "sequence_output", ",", "mask", "=", "input_mask", ",", "labels", "=", "labels", ")", "\n", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.models.token_classification.XForTokenClassificationBase.__init__": [[67, 69], ["token_classification.TokenClassificationUtils.__init__"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.annotate.annotate.SentAnnObj.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.models.token_classification.XForTokenClassificationBase.setup": [[70, 89], ["sum", "token_classification.XForTokenClassificationBase.add_classifier", "ValueError", "isinstance", "isinstance", "hf_model.Model", "token_classification.XForTokenClassificationBase.configure_encoder"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.models.token_classification.TokenClassificationUtils.add_classifier", "home.repos.pwc.inspect_result.suamin_t2ner.models.base.TransformersUtils.configure_encoder"], ["", "def", "setup", "(", "self", ",", "config", ")", ":", "\n", "        ", "check", "=", "sum", "(", "[", "isinstance", "(", "config", ",", "hf_model", ".", "Config", ")", "for", "hf_model", "in", "HF_MODELS", "]", ")", "\n", "\n", "# TODO add more informative message", "\n", "if", "not", "check", ":", "\n", "            ", "raise", "ValueError", "(", "\"Unknown / unsupported config.\"", ")", "\n", "\n", "", "for", "hf_model", "in", "HF_MODELS", ":", "\n", "            ", "if", "isinstance", "(", "config", ",", "hf_model", ".", "Config", ")", ":", "\n", "                ", "encoder", "=", "hf_model", ".", "Model", "(", "config", ")", "\n", "\n", "# NOTE this function dynamically creates an attribute of (any sub-)class ", "\n", "# with same name as ``config.model_type`` so the weights can be correctly ", "\n", "# initialized when using the ``from_pretrained`` method. Creating an attr", "\n", "# , e.g., self.encoder will not allow the weights to be loaded. This is by ", "\n", "# design from HF library.", "\n", "self", ".", "configure_encoder", "(", "encoder", ")", "\n", "\n", "", "", "self", ".", "add_classifier", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.models.token_classification.BertForTokenClassification.__init__": [[93, 97], ["super().__init__", "token_classification.BertForTokenClassification.setup", "token_classification.BertForTokenClassification.init_weights"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.annotate.annotate.SentAnnObj.__init__", "home.repos.pwc.inspect_result.suamin_t2ner.models.multi_token_classification.XForMultiTokenClassificationBase.setup"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "setup", "(", "config", ")", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.models.token_classification.XLMRobertaForTokenClassification.__init__": [[101, 105], ["super().__init__", "token_classification.XLMRobertaForTokenClassification.setup", "token_classification.XLMRobertaForTokenClassification.init_weights"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.annotate.annotate.SentAnnObj.__init__", "home.repos.pwc.inspect_result.suamin_t2ner.models.multi_token_classification.XForMultiTokenClassificationBase.setup"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "setup", "(", "config", ")", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.models.token_classification.XLMForTokenClassification.__init__": [[109, 113], ["super().__init__", "token_classification.XLMForTokenClassification.setup", "token_classification.XLMForTokenClassification.init_weights"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.annotate.annotate.SentAnnObj.__init__", "home.repos.pwc.inspect_result.suamin_t2ner.models.multi_token_classification.XForMultiTokenClassificationBase.setup"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "setup", "(", "config", ")", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.models.token_classification.AutoModelForTokenClassification.__init__": [[126, 129], ["EnvironmentError"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "raise", "EnvironmentError", "(", "\n", "\"AutoModelForTokenClassification is designed to be instantiated \"", "\n", "\"using the `AutoModelForTokenClassification.from_pretrained(pret\"", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.models.token_classification.AutoModelForTokenClassification.get_models_map": [[133, 140], ["collections.OrderedDict", "external_map.items"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "get_models_map", "(", "cls", ",", "external_map", "=", "None", ")", ":", "\n", "        ", "models_map", "=", "OrderedDict", "(", "MODEL_FOR_TOKEN_CLASSIFICATION_MAPPING", ")", "\n", "if", "external_map", ":", "\n", "            ", "for", "model_config", ",", "model_class", "in", "external_map", ".", "items", "(", ")", ":", "\n", "                ", "models_map", "[", "model_config", "]", "=", "model_class", "\n", "", "", "return", "models_map", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.models.token_classification.AutoModelForTokenClassification.from_pretrained": [[141, 193], ["kwargs.pop", "kwargs.pop", "cls.get_models_map", "cls.get_models_map.items", "ValueError", "isinstance", "transformers.AutoConfig.from_pretrained", "isinstance", "kwargs.pop", "os.path.isdir", "transformers.AutoConfig.from_pretrained.update", "model_class.check_config_for_shared_attr", "model_class.check_config_for_specific_attr", "model_class.from_pretrained", "dict", "kwargs.pop.get", "os.path.join", "torch.load", "torch.load", "torch.load", "torch.load", "list", "torch.load.keys", "torch.load.keys", "k.startswith", "MODEL_FOR_TOKEN_CLASSIFICATION_MAPPING.keys"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.models.multi_token_classification.AutoModelForMultiTokenClassification.get_models_map", "home.repos.pwc.inspect_result.suamin_t2ner.models.multi_token_classification.AutoModelForMultiTokenClassification.from_pretrained", "home.repos.pwc.inspect_result.suamin_t2ner.models.base.TransformersUtils.check_config_for_shared_attr", "home.repos.pwc.inspect_result.suamin_t2ner.models.multi_token_classification.MultiTokenClassificationUtils.check_config_for_specific_attr", "home.repos.pwc.inspect_result.suamin_t2ner.models.multi_token_classification.AutoModelForMultiTokenClassification.from_pretrained"], ["", "@", "classmethod", "\n", "def", "from_pretrained", "(", "cls", ",", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", ":", "\n", "        ", "config", "=", "kwargs", ".", "pop", "(", "\"config\"", ",", "None", ")", "\n", "if", "not", "isinstance", "(", "config", ",", "PretrainedConfig", ")", ":", "\n", "            ", "config", "=", "AutoConfig", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "**", "kwargs", ")", "\n", "\n", "", "external_map", "=", "kwargs", ".", "pop", "(", "\"models_map\"", ",", "None", ")", "\n", "models_map", "=", "cls", ".", "get_models_map", "(", "external_map", ")", "\n", "\n", "for", "config_class", ",", "model_class", "in", "models_map", ".", "items", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "config", ",", "config_class", ")", ":", "\n", "\n", "# FIXME HF default config forcibly sets `id2label` with 2 labels;", "\n", "# to ovrride pass a custom map in config_kwargs. There is no easy", "\n", "# way to check this in `check_config_for_specific_attr` for example", "\n", "# except to override variable name or change this behavior in", "\n", "# ``PretrainedConfig`` class, which is unnecessary.", "\n", "                ", "config_kwargs", "=", "kwargs", ".", "pop", "(", "\"config_kwargs\"", ",", "dict", "(", ")", ")", "\n", "\n", "# In case we have a trained model and we are transfering from", "\n", "# dataset with different number of entity types, the classifier", "\n", "# weights have to be explicitly removed to avoid shape mismatch", "\n", "# when using `from_pretrained`.", "\n", "state_dict", "=", "None", "\n", "if", "os", ".", "path", ".", "isdir", "(", "pretrained_model_name_or_path", ")", ":", "\n", "                    ", "ignore_heads", "=", "config_kwargs", ".", "get", "(", "\"ignore_heads\"", ",", "False", ")", "\n", "if", "ignore_heads", ":", "\n", "                        ", "weights_file", "=", "os", ".", "path", ".", "join", "(", "pretrained_model_name_or_path", ",", "\"pytorch_model.bin\"", ")", "\n", "state_dict", "=", "torch", ".", "load", "(", "weights_file", ",", "map_location", "=", "\"cpu\"", ")", "\n", "for", "k", "in", "list", "(", "state_dict", ".", "keys", "(", ")", ")", ":", "\n", "                            ", "if", "k", ".", "startswith", "(", "\"classifier\"", ")", ":", "\n", "                                ", "del", "state_dict", "[", "k", "]", "\n", "\n", "", "", "", "", "config", ".", "update", "(", "config_kwargs", ")", "\n", "\n", "model_class", ".", "check_config_for_shared_attr", "(", "config", ")", "\n", "model_class", ".", "check_config_for_specific_attr", "(", "config", ")", "\n", "\n", "return", "model_class", ".", "from_pretrained", "(", "\n", "pretrained_model_name_or_path", ",", "\n", "*", "model_args", ",", "\n", "config", "=", "config", ",", "\n", "state_dict", "=", "state_dict", ",", "\n", "**", "kwargs", "\n", ")", "\n", "\n", "", "", "raise", "ValueError", "(", "\n", "\"Unrecognized configuration class {} for this kind of AutoModel: {}.\\n\"", "\n", "\"Model type should be one of {}.\"", ".", "format", "(", "\n", "config", ".", "__class__", ",", "\n", "cls", ".", "__name__", ",", "\n", "\", \"", ".", "join", "(", "c", ".", "__name__", "for", "c", "in", "MODEL_FOR_TOKEN_CLASSIFICATION_MAPPING", ".", "keys", "(", ")", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.models.base.TransformersUtils.__init__": [[17, 19], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.annotate.annotate.SentAnnObj.__init__"], ["\n", "class", "TrainInferenceUtils", ":", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.models.base.TransformersUtils.check_config_for_shared_attr": [[20, 99], ["dict", "config.update", "hasattr", "mode.startswith", "hasattr", "hasattr", "hasattr", "hasattr", "hasattr", "hasattr", "hasattr", "hasattr", "hasattr", "hasattr", "hasattr", "int", "mode.startswith", "int"], "methods", ["None"], ["    ", "@", "cached_property", "\n", "def", "_setup_devices", "(", "self", ")", ":", "\n", "        ", "logger", ".", "info", "(", "\"PyTorch: setting up devices\"", ")", "\n", "if", "hasattr", "(", "self", ",", "\"training_args\"", ")", ":", "\n", "            ", "no_cuda", "=", "self", ".", "training_args", ".", "no_cuda", "\n", "", "elif", "hasattr", "(", "self", ",", "\"no_cuda\"", ")", ":", "\n", "            ", "no_cuda", "=", "self", ".", "no_cuda", "\n", "", "else", ":", "\n", "            ", "no_cuda", "=", "False", "\n", "", "if", "not", "no_cuda", ":", "\n", "            ", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "n_gpu", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "", "else", ":", "\n", "            ", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", "\n", "n_gpu", "=", "0", "\n", "", "return", "device", ",", "n_gpu", "\n", "\n", "", "@", "property", "\n", "def", "device", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_setup_devices", "[", "0", "]", "\n", "\n", "", "@", "property", "\n", "def", "n_gpu", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_setup_devices", "[", "1", "]", "\n", "\n", "", "@", "property", "\n", "def", "seed", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_seed", "\n", "\n", "", "@", "seed", ".", "setter", "\n", "def", "seed", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "set_seed", "(", "value", ")", "\n", "self", ".", "_seed", "=", "value", "\n", "\n", "", "@", "property", "\n", "def", "train_batch_size", "(", "self", ")", ":", "\n", "        ", "if", "hasattr", "(", "self", ",", "\"training_args\"", ")", ":", "\n", "            ", "per_device_train_batch_size", "=", "self", ".", "training_args", ".", "per_device_train_batch_size", "\n", "", "else", ":", "\n", "            ", "per_device_train_batch_size", "=", "self", ".", "per_device_train_batch_size", "\n", "", "return", "per_device_train_batch_size", "*", "max", "(", "1", ",", "self", ".", "n_gpu", ")", "\n", "\n", "", "@", "property", "\n", "def", "eval_batch_size", "(", "self", ")", ":", "\n", "        ", "if", "hasattr", "(", "self", ",", "\"training_args\"", ")", ":", "\n", "            ", "per_device_eval_batch_size", "=", "self", ".", "training_args", ".", "per_device_eval_batch_size", "\n", "", "else", ":", "\n", "            ", "per_device_eval_batch_size", "=", "self", ".", "per_device_eval_batch_size", "\n", "", "return", "per_device_eval_batch_size", "*", "max", "(", "1", ",", "self", ".", "n_gpu", ")", "\n", "\n", "", "@", "staticmethod", "\n", "def", "load_or_create_model", "(", "\n", "model_class", ",", "\n", "model_name_or_path", "=", "None", ",", "\n", "init_checkpoint", "=", "None", ",", "\n", "**", "config_kwargs", "\n", ")", ":", "\n", "        ", "if", "model_name_or_path", "is", "None", "and", "init_checkpoint", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"For loading or creating a new model model_name_or_path or \"", "\n", "\"init_checkpoint is required. When both are passed, init_checkpoint \"", "\n", "\"takes precedence.\"", "\n", ")", "\n", "", "if", "init_checkpoint", ":", "\n", "            ", "model_name_or_path", "=", "init_checkpoint", "\n", "logger", ".", "info", "(", "\"loading from init_checkpoint = {}\"", ".", "format", "(", "model_name_or_path", ")", ")", "\n", "", "else", ":", "\n", "            ", "logger", ".", "info", "(", "\"loading from cached model = {}\"", ".", "format", "(", "model_name_or_path", ")", ")", "\n", "\n", "", "model", "=", "model_class", ".", "from_pretrained", "(", "\n", "model_name_or_path", ",", "\n", "config_kwargs", "=", "config_kwargs", "\n", ")", "\n", "\n", "return", "model", "\n", "\n", "", "@", "staticmethod", "\n", "def", "save_model", "(", "\n", "model", ",", "\n", "output_dir", ",", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.models.base.TransformersUtils.check_config_for_specific_attr": [[100, 103], ["None"], "methods", ["None"], ["training_args", "=", "None", ",", "\n", "model_args", "=", "None", ",", "\n", "exp_args", "=", "None", "\n", ")", ":", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.models.base.TransformersUtils.configure_encoder": [[104, 110], ["setattr", "base.TransformersUtils.config.mode.startswith", "base.TransformersUtils.freeze", "base.TransformersUtils.config.mode.startswith", "base.TransformersUtils.freeze_layers"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.models.base.TransformersUtils.freeze", "home.repos.pwc.inspect_result.suamin_t2ner.models.base.TransformersUtils.freeze_layers"], ["        ", "os", ".", "makedirs", "(", "output_dir", ",", "exist_ok", "=", "True", ")", "\n", "logger", ".", "info", "(", "\"Saving model checkpoint to %s\"", ",", "output_dir", ")", "\n", "# In all cases (even distributed/parallel), model is always a reference", "\n", "# to the model we want to save.", "\n", "if", "hasattr", "(", "model", ",", "\"module\"", ")", ":", "\n", "            ", "save_model", "=", "model", ".", "module", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.models.base.TransformersUtils.model": [[111, 114], ["getattr"], "methods", ["None"], ["            ", "save_model", "=", "model", "\n", "", "save_model", ".", "save_pretrained", "(", "output_dir", ")", "\n", "\n", "# Good practice: save your arguments together with the trained model", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.models.base.TransformersUtils.freeze": [[115, 119], ["module.parameters"], "methods", ["None"], ["for", "name", ",", "args", "in", "[", "\n", "(", "\"training_args\"", ",", "training_args", ")", ",", "\n", "(", "\"model_args\"", ",", "model_args", ")", ",", "\n", "(", "\"exp_args\"", ",", "exp_args", ")", "\n", "]", ":", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.models.base.TransformersUtils.unfreeze": [[120, 124], ["module.parameters"], "methods", ["None"], ["            ", "if", "args", "is", "not", "None", ":", "\n", "                ", "args_json", "=", "args", ".", "to_json_string", "(", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "output_dir", ",", "name", "+", "\".json\"", ")", ",", "\"w\"", ")", "as", "wf", ":", "\n", "                    ", "wf", ".", "write", "(", "args_json", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.models.base.TransformersUtils.freeze_layers": [[125, 132], ["range", "base.TransformersUtils.freeze", "base.TransformersUtils.freeze"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.models.base.TransformersUtils.freeze", "home.repos.pwc.inspect_result.suamin_t2ner.models.base.TransformersUtils.freeze"], ["", "", "", "", "@", "staticmethod", "\n", "def", "parse_input_to_dataset_metadata", "(", "item", ")", ":", "\n", "        ", "metadata", "=", "dict", "(", "\n", "name", "=", "None", ",", "\n", "max_examples", "=", "-", "1", ",", "\n", "drop_last", "=", "False", ",", "\n", "forever", "=", "False", ",", "\n", "shuffle", "=", "False", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.models.base.TransformersUtils.encode": [[133, 154], ["base.TransformersUtils.model.get_input_embeddings", "base.TransformersUtils.", "base.TransformersUtils.model", "base.TransformersUtils.config.mode.startswith", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "sequence_output[].sum"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.models.base.TransformersUtils.model"], [")", "\n", "if", "isinstance", "(", "item", ",", "str", ")", ":", "\n", "            ", "metadata", "[", "\"name\"", "]", "=", "item", "\n", "", "elif", "len", "(", "item", ")", ">", "1", ":", "\n", "            ", "metadata", "[", "\"name\"", "]", "=", "item", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "item", ")", "-", "1", ")", ":", "\n", "                ", "if", "i", "==", "1", ":", "\n", "                    ", "metadata", "[", "\"max_examples\"", "]", "=", "item", "[", "1", "]", "\n", "", "elif", "i", "==", "2", ":", "\n", "                    ", "metadata", "[", "\"drop_last\"", "]", "=", "item", "[", "2", "]", "\n", "", "elif", "i", "==", "3", ":", "\n", "                    ", "metadata", "[", "\"forever\"", "]", "=", "item", "[", "3", "]", "\n", "", "elif", "i", "==", "4", ":", "\n", "                    ", "metadata", "[", "\"shuffle\"", "]", "=", "item", "[", "4", "]", "\n", "", "", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Unable to parse item `{}` to metadata.\"", ".", "format", "(", "item", ")", "\n", ")", "\n", "", "return", "metadata", "\n", "\n", "", "@", "staticmethod", "\n", "def", "init_logging", "(", "log_file", ")", ":", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.models.base.TransformersUtils.add_xnet": [[155, 157], ["None"], "methods", ["None"], ["        ", "fh", "=", "logging", ".", "FileHandler", "(", "log_file", ")", "\n", "fh", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "logging", ".", "basicConfig", "(", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.models.base.TransformersUtils.add_pooler": [[158, 163], ["modules.Pooling", "modules.Pooling"], "methods", ["None"], ["handlers", "=", "[", "logging", ".", "StreamHandler", "(", ")", "]", ",", "\n", "format", "=", "'%(asctime)s - %(levelname)s - %(name)s -   %(message)s'", ",", "\n", "datefmt", "=", "'%m/%d/%Y %H:%M:%S'", ",", "\n", "level", "=", "logging", ".", "INFO", "\n", ")", "\n", "fh", ".", "setFormatter", "(", "logging", ".", "Formatter", "(", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.models.multi_token_classification.MultiTokenClassificationUtils.__init__": [[17, 21], ["base.TransformersUtils.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.annotate.annotate.SentAnnObj.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "classifiers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "aux_modules", "=", "nn", ".", "ModuleList", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.models.multi_token_classification.MultiTokenClassificationUtils.check_config_for_specific_attr": [[22, 78], ["dict", "config.update", "hasattr", "hasattr", "hasattr", "hasattr", "hasattr", "hasattr", "hasattr", "hasattr", "hasattr", "AttributeError", "hasattr", "hasattr", "len", "len", "hasattr", "AttributeError"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "check_config_for_specific_attr", "(", "cls", ",", "config", ")", ":", "\n", "        ", "update_kwargs", "=", "dict", "(", ")", "\n", "for", "k", "in", "(", "\"multidata_type\"", ",", "\"heads_info\"", ",", "\"lang2id\"", ",", "\"domain2id\"", ")", ":", "\n", "            ", "if", "not", "hasattr", "(", "config", ",", "k", ")", ":", "\n", "                ", "raise", "AttributeError", "(", "\n", "\"Missing required attribute in the configuration, \"", "\n", "\"{}. See data.MultiData.\"", ".", "format", "(", "k", ")", "\n", ")", "\n", "\n", "", "if", "not", "hasattr", "(", "config", ",", "\"private_clf\"", ")", ":", "\n", "                ", "update_kwargs", "[", "\"private_clf\"", "]", "=", "False", "\n", "\n", "", "if", "not", "hasattr", "(", "config", ",", "\"shared_clf\"", ")", ":", "\n", "                ", "update_kwargs", "[", "\"shared_clf\"", "]", "=", "True", "\n", "\n", "", "if", "k", "==", "\"lang2id\"", ":", "\n", "                ", "update_kwargs", "[", "\"num_langs\"", "]", "=", "len", "(", "config", ".", "lang2id", ")", "\n", "\n", "", "if", "k", "==", "\"domain2id\"", ":", "\n", "                ", "update_kwargs", "[", "\"num_domains\"", "]", "=", "len", "(", "config", ".", "domain2id", ")", "\n", "\n", "", "", "if", "not", "hasattr", "(", "config", ",", "\"all_shared\"", ")", ":", "\n", "            ", "update_kwargs", "[", "\"all_shared\"", "]", "=", "False", "\n", "", "else", ":", "\n", "            ", "if", "not", "hasattr", "(", "config", ",", "\"num_shared_labels\"", ")", ":", "\n", "                ", "raise", "AttributeError", "(", "\n", "\"Missing required attribute num_shared_labels for \"", "\n", "\"training with shared labels.\"", "\n", ")", "\n", "\n", "", "", "if", "not", "hasattr", "(", "config", ",", "\"ignore_metadata\"", ")", ":", "\n", "            ", "update_kwargs", "[", "\"ignore_metadata\"", "]", "=", "True", "\n", "\n", "", "if", "not", "hasattr", "(", "config", ",", "\"add_lang_clf\"", ")", ":", "\n", "            ", "update_kwargs", "[", "\"add_lang_clf\"", "]", "=", "False", "\n", "\n", "", "if", "not", "hasattr", "(", "config", ",", "\"add_domain_clf\"", ")", ":", "\n", "            ", "update_kwargs", "[", "\"add_domain_clf\"", "]", "=", "False", "\n", "\n", "", "if", "not", "hasattr", "(", "config", ",", "\"add_type_clf\"", ")", ":", "\n", "            ", "update_kwargs", "[", "\"add_type_clf\"", "]", "=", "False", "\n", "\n", "", "if", "not", "hasattr", "(", "config", ",", "\"add_all_outside_clf\"", ")", ":", "\n", "            ", "update_kwargs", "[", "\"add_all_outside_clf\"", "]", "=", "False", "\n", "\n", "", "if", "not", "hasattr", "(", "config", ",", "\"add_lm\"", ")", ":", "\n", "            ", "update_kwargs", "[", "\"add_lm\"", "]", "=", "False", "\n", "\n", "", "if", "not", "hasattr", "(", "config", ",", "\"pooling\"", ")", ":", "\n", "            ", "update_kwargs", "[", "\"pooling\"", "]", "=", "\"mean\"", "\n", "", "else", ":", "\n", "            ", "if", "not", "config", ".", "pooling", ":", "\n", "                ", "update_kwargs", "[", "\"pooling\"", "]", "=", "\"mean\"", "\n", "\n", "", "", "config", ".", "update", "(", "update_kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.models.multi_token_classification.MultiTokenClassificationUtils._add_token_classifier": [[79, 92], ["module_list.add_module", "modules.TokenClassifier"], "methods", ["None"], ["", "def", "_add_token_classifier", "(", "self", ",", "head_name", ",", "num_labels", ",", "aux", "=", "False", ")", ":", "\n", "        ", "if", "aux", ":", "\n", "            ", "module_list", "=", "self", ".", "aux_modules", "\n", "", "else", ":", "\n", "            ", "module_list", "=", "self", ".", "classifiers", "\n", "", "module_list", ".", "add_module", "(", "\n", "head_name", ",", "\n", "modules", ".", "TokenClassifier", "(", "\n", "self", ".", "config", ".", "hidden_size", ",", "\n", "num_labels", ",", "\n", "use_crf", "=", "self", ".", "config", ".", "use_crf", ",", "\n", "bigram", "=", "self", ".", "config", ".", "crf_bigram", ",", "\n", "loss_fct", "=", "self", ".", "config", ".", "loss_fct", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.models.multi_token_classification.MultiTokenClassificationUtils.add_classifiers": [[95, 118], ["multi_token_classification.MultiTokenClassificationUtils.config.heads_info.items", "torch.Dropout", "torch.Dropout", "multi_token_classification.MultiTokenClassificationUtils._add_token_classifier", "multi_token_classification.MultiTokenClassificationUtils._add_token_classifier", "multi_token_classification.MultiTokenClassificationUtils._add_token_classifier", "multi_token_classification.MultiTokenClassificationUtils._add_token_classifier", "ValueError", "str"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.models.multi_token_classification.MultiTokenClassificationUtils._add_token_classifier", "home.repos.pwc.inspect_result.suamin_t2ner.models.multi_token_classification.MultiTokenClassificationUtils._add_token_classifier", "home.repos.pwc.inspect_result.suamin_t2ner.models.multi_token_classification.MultiTokenClassificationUtils._add_token_classifier", "home.repos.pwc.inspect_result.suamin_t2ner.models.multi_token_classification.MultiTokenClassificationUtils._add_token_classifier"], ["", "def", "add_classifiers", "(", "self", ")", ":", "\n", "        ", "for", "unique_name", ",", "head_info", "in", "self", ".", "config", ".", "heads_info", ".", "items", "(", ")", ":", "\n", "            ", "num_labels", "=", "head_info", "[", "\"num_labels\"", "]", "\n", "num_types", "=", "head_info", "[", "\"num_types\"", "]", "\n", "\n", "if", "self", ".", "config", ".", "private_clf", ":", "\n", "                ", "self", ".", "_add_token_classifier", "(", "head_info", "[", "\"private_head_name\"", "]", ",", "num_labels", ")", "\n", "\n", "", "if", "self", ".", "config", ".", "shared_clf", ":", "\n", "                ", "self", ".", "_add_token_classifier", "(", "head_info", "[", "\"shared_head_name\"", "]", ",", "num_labels", ")", "\n", "\n", "", "if", "self", ".", "config", ".", "add_type_clf", ":", "\n", "                ", "self", ".", "_add_token_classifier", "(", "str", "(", "head_info", "[", "\"shared_head_name\"", "]", ")", "+", "\"_type\"", ",", "num_types", ")", "\n", "\n", "", "if", "not", "(", "self", ".", "config", ".", "private_clf", "or", "self", ".", "config", ".", "shared_clf", ")", ":", "\n", "                ", "raise", "ValueError", "(", "\n", "\"At least a private or shared classification layer must be set.\"", "\n", ")", "\n", "\n", "", "", "if", "self", ".", "config", ".", "all_shared", ":", "\n", "            ", "self", ".", "_add_token_classifier", "(", "\"shared\"", ",", "self", ".", "config", ".", "num_shared_labels", ")", "\n", "\n", "", "self", ".", "output_dropout", "=", "nn", ".", "Dropout", "(", "self", ".", "config", ".", "output_classifier_dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.models.multi_token_classification.MultiTokenClassificationUtils.add_lang_classifier": [[119, 132], ["multi_token_classification.MultiTokenClassificationUtils.aux_modules.add_module", "modules.Classifier", "hasattr", "multi_token_classification.MultiTokenClassificationUtils.add_pooler"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.models.base.TransformersUtils.add_pooler"], ["", "def", "add_lang_classifier", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "config", ".", "num_langs", "<", "2", "or", "self", ".", "config", ".", "ignore_metadata", ":", "\n", "            ", "return", "\n", "\n", "", "if", "not", "self", ".", "config", ".", "add_lang_clf", ":", "\n", "            ", "return", "\n", "\n", "", "self", ".", "aux_modules", ".", "add_module", "(", "\n", "\"lang_clf\"", ",", "\n", "modules", ".", "Classifier", "(", "self", ".", "config", ".", "hidden_size", ",", "self", ".", "config", ".", "num_langs", ")", "\n", ")", "\n", "if", "not", "hasattr", "(", "self", ",", "\"pooler\"", ")", ":", "\n", "            ", "self", ".", "add_pooler", "(", "self", ".", "config", ".", "pooling", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.models.multi_token_classification.MultiTokenClassificationUtils.add_domain_classifier": [[139, 152], ["multi_token_classification.MultiTokenClassificationUtils.aux_modules.add_module", "modules.Classifier", "hasattr", "multi_token_classification.MultiTokenClassificationUtils.add_pooler"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.models.base.TransformersUtils.add_pooler"], ["", "", "def", "add_domain_classifier", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "config", ".", "num_domains", "<", "2", "or", "self", ".", "config", ".", "ignore_metadata", ":", "\n", "            ", "return", "\n", "\n", "", "if", "not", "self", ".", "config", ".", "add_domain_clf", ":", "\n", "            ", "return", "\n", "\n", "", "self", ".", "aux_modules", ".", "add_module", "(", "\n", "\"domain_clf\"", ",", "\n", "modules", ".", "Classifier", "(", "self", ".", "config", ".", "hidden_size", ",", "self", ".", "config", ".", "num_domains", ")", "\n", ")", "\n", "if", "not", "hasattr", "(", "self", ",", "\"pooler\"", ")", ":", "\n", "            ", "self", ".", "add_pooler", "(", "self", ".", "config", ".", "pooling", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.models.multi_token_classification.MultiTokenClassificationUtils.add_language_modeling": [[153, 160], ["multi_token_classification.MultiTokenClassificationUtils.aux_modules.add_module", "modules.TransformersCLM"], "methods", ["None"], ["", "", "def", "add_language_modeling", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "config", ".", "add_lm", ":", "\n", "            ", "return", "\n", "\n", "", "self", ".", "aux_modules", ".", "add_module", "(", "\n", "\"lm_head\"", ",", "\n", "modules", ".", "TransformersCLM", "(", "self", ".", "config", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.models.multi_token_classification.MultiTokenClassificationUtils.add_all_outside_classifier": [[162, 169], ["multi_token_classification.MultiTokenClassificationUtils.aux_modules.add_module", "modules.Classifier"], "methods", ["None"], ["", "def", "add_all_outside_classifier", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "config", ".", "add_all_outside_clf", ":", "\n", "            ", "return", "\n", "\n", "", "self", ".", "aux_modules", ".", "add_module", "(", "\n", "\"all_outside_clf\"", ",", "\n", "modules", ".", "Classifier", "(", "self", ".", "config", ".", "hidden_size", ",", "2", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.models.multi_token_classification.MultiTokenClassificationUtils.__getitem__": [[171, 180], ["str", "multi_token_classification.MultiTokenClassificationUtils.classifiers.__getattr__", "multi_token_classification.MultiTokenClassificationUtils.aux_modules.__getattr__"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "value", ")", ":", "\n", "        ", "value", "=", "str", "(", "value", ")", "\n", "# FIXME If value is same for some classifier and", "\n", "# auxiliary module then find a way to resolve", "\n", "try", ":", "\n", "            ", "module", "=", "self", ".", "classifiers", ".", "__getattr__", "(", "value", ")", "\n", "", "except", "AttributeError", ":", "\n", "            ", "module", "=", "self", ".", "aux_modules", ".", "__getattr__", "(", "value", ")", "\n", "", "return", "module", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.models.multi_token_classification.MultiTokenClassificationUtils.forward_lm": [[181, 192], ["dict", "inputs.items", "inputs.get", "sub_inputs.get"], "methods", ["None"], ["", "def", "forward_lm", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "outputs", "=", "dict", "(", ")", "\n", "for", "head", ",", "sub_inputs", "in", "inputs", ".", "items", "(", ")", ":", "\n", "            ", "input_ids", "=", "sub_inputs", "\n", "input_mask", "=", "inputs", ".", "get", "(", "\"input_mask\"", ",", "None", ")", "\n", "outputs", "[", "head", "]", "=", "self", "[", "\"lm_head\"", "]", "(", "\n", "self", ".", "model", ",", "\n", "input_ids", "=", "sub_inputs", "[", "\"input_ids\"", "]", ",", "\n", "attention_mask", "=", "sub_inputs", ".", "get", "(", "\"input_mask\"", ",", "None", ")", "\n", ")", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.models.multi_token_classification.MultiTokenClassificationUtils.joint_encode": [[193, 221], ["dict", "inputs.items", "sub_inputs.get", "multi_token_classification.MultiTokenClassificationUtils.encode", "hasattr", "multi_token_classification.MultiTokenClassificationUtils.output_dropout", "hasattr", "multi_token_classification.MultiTokenClassificationUtils.xnet", "multi_token_classification.MultiTokenClassificationUtils.pooler", "multi_token_classification.MultiTokenClassificationUtils.output_dropout"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.data.ner.NERFeatures.encode"], ["", "def", "joint_encode", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "encoded", "=", "dict", "(", ")", "\n", "\n", "for", "head", ",", "sub_inputs", "in", "inputs", ".", "items", "(", ")", ":", "\n", "            ", "input_ids", "=", "sub_inputs", "[", "\"input_ids\"", "]", "\n", "input_mask", "=", "sub_inputs", ".", "get", "(", "\"input_mask\"", ",", "None", ")", "\n", "sub_encoded", "=", "self", ".", "encode", "(", "input_ids", ",", "input_mask", ")", "\n", "\n", "sequence_output", ",", "cls_output", ",", "pooled", ",", "x_output", "=", "sub_encoded", "\n", "\n", "if", "hasattr", "(", "self", ",", "\"xnet\"", ")", ":", "\n", "                ", "sequence_output", "=", "self", ".", "xnet", "(", "sub_encoded", ",", "mask", "=", "input_mask", ")", "\n", "\n", "", "sequence_output", "=", "self", ".", "output_dropout", "(", "sequence_output", ")", "\n", "\n", "if", "hasattr", "(", "self", ",", "\"pooler\"", ")", ":", "\n", "                ", "pooled", "=", "self", ".", "pooler", "(", "sequence_output", ",", "mask", "=", "input_mask", ")", "\n", "", "else", ":", "\n", "                ", "pooled", "=", "self", ".", "output_dropout", "(", "pooled", ")", "\n", "\n", "", "encoded", "[", "head", "]", "=", "{", "\n", "\"seq\"", ":", "sequence_output", ",", "\n", "\"cls\"", ":", "cls_output", ",", "\n", "\"pooled\"", ":", "pooled", ",", "\n", "\"x\"", ":", "x_output", "\n", "}", "\n", "\n", "", "return", "encoded", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.models.multi_token_classification.MultiTokenClassificationUtils.forward_common": [[222, 259], ["multi_token_classification.MultiTokenClassificationUtils.joint_encode", "list", "inputs.items", "zip", "dict", "dict.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "sub_inputs.get", "sub_inputs.get", "sub_inputs.get", "sub_inputs.get", "sub_inputs.get", "sub_inputs.get", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.models.multi_token_classification.MultiTokenClassificationUtils.joint_encode"], ["", "def", "forward_common", "(", "self", ",", "inputs", ",", "tag", "=", "True", ")", ":", "\n", "        ", "encoded", "=", "self", ".", "joint_encode", "(", "inputs", ")", "\n", "aux_inputs", "=", "list", "(", ")", "\n", "\n", "for", "head", ",", "sub_inputs", "in", "inputs", ".", "items", "(", ")", ":", "\n", "            ", "aux_inputs", ".", "append", "(", "\n", "(", "\n", "sub_inputs", ".", "get", "(", "\"input_mask\"", ",", "None", ")", ",", "\n", "encoded", "[", "head", "]", "[", "\"seq\"", "]", ",", "\n", "encoded", "[", "head", "]", "[", "\"pooled\"", "]", ",", "\n", "sub_inputs", ".", "get", "(", "\"type_ids\"", ",", "None", ")", ",", "\n", "sub_inputs", ".", "get", "(", "\"shared_label_ids\"", ",", "None", ")", ",", "\n", "sub_inputs", ".", "get", "(", "\"all_outside_id\"", ",", "None", ")", ",", "\n", "sub_inputs", ".", "get", "(", "\"lang_id\"", ",", "None", ")", ",", "\n", "sub_inputs", ".", "get", "(", "\"domain_id\"", ",", "None", ")", "\n", ")", "\n", ")", "\n", "\n", "", "(", "\n", "input_mask", ",", "sequence_output", ",", "pooled", ",", "type_ids", ",", "\n", "shared_label_ids", ",", "all_outside_id", ",", "lang_id", ",", "domain_id", "\n", ")", "=", "zip", "(", "\n", "*", "aux_inputs", "\n", ")", "\n", "\n", "aux_inputs", "=", "dict", "(", "\n", "sequence_output", "=", "torch", ".", "cat", "(", "sequence_output", ")", ",", "\n", "pooled", "=", "torch", ".", "cat", "(", "pooled", ")", ",", "\n", "input_mask", "=", "None", "if", "input_mask", "[", "0", "]", "is", "None", "else", "torch", ".", "cat", "(", "input_mask", ")", ",", "\n", "type_ids", "=", "None", "if", "type_ids", "[", "0", "]", "is", "None", "else", "torch", ".", "cat", "(", "type_ids", ")", ",", "\n", "shared_label_ids", "=", "None", "if", "shared_label_ids", "[", "0", "]", "is", "None", "else", "torch", ".", "cat", "(", "shared_label_ids", ")", ",", "\n", "all_outside_id", "=", "None", "if", "all_outside_id", "[", "0", "]", "is", "None", "else", "torch", ".", "cat", "(", "all_outside_id", ")", ",", "\n", "lang_id", "=", "None", "if", "lang_id", "[", "0", "]", "is", "None", "else", "torch", ".", "cat", "(", "lang_id", ")", ",", "\n", "domain_id", "=", "None", "if", "domain_id", "[", "0", "]", "is", "None", "else", "torch", ".", "cat", "(", "domain_id", ")", "\n", ")", "\n", "\n", "return", "encoded", ",", "aux_inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.models.multi_token_classification.MultiTokenClassificationUtils.forward": [[260, 312], ["multi_token_classification.MultiTokenClassificationUtils.forward_common", "dict", "dict", "multi_token_classification.MultiTokenClassificationUtils.forward_lm", "inputs.items", "lang_clf", "domain_clf", "all_outside_clf", "sub_inputs.get", "sub_inputs.get", "dict"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.models.multi_token_classification.MultiTokenClassificationUtils.forward_common", "home.repos.pwc.inspect_result.suamin_t2ner.models.multi_token_classification.MultiTokenClassificationUtils.forward_lm"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "tag", "=", "True", ",", "is_lm", "=", "False", ")", ":", "\n", "        ", "if", "not", "is_lm", ":", "\n", "            ", "encoded", ",", "aux_inputs", "=", "self", ".", "forward_common", "(", "inputs", ")", "\n", "\n", "outputs", "=", "dict", "(", ")", "\n", "aux_outputs", "=", "dict", "(", ")", "\n", "\n", "if", "tag", ":", "\n", "                ", "for", "head", ",", "sub_inputs", "in", "inputs", ".", "items", "(", ")", ":", "\n", "                    ", "if", "head", "==", "\"shared\"", "or", "head", "==", "\"unk\"", ":", "\n", "                        ", "continue", "\n", "", "input_mask", "=", "sub_inputs", ".", "get", "(", "\"input_mask\"", ",", "None", ")", "\n", "labels", "=", "sub_inputs", ".", "get", "(", "\"label_ids\"", ",", "None", ")", "\n", "outputs", "[", "head", "]", "=", "dict", "(", "\n", "ner", "=", "self", "[", "head", "]", "(", "encoded", "[", "head", "]", "[", "\"seq\"", "]", ",", "mask", "=", "input_mask", ",", "labels", "=", "labels", ")", ",", "\n", "encoder", "=", "encoded", "[", "head", "]", "\n", ")", "\n", "\n", "", "", "if", "self", ".", "config", ".", "all_shared", "and", "tag", ":", "\n", "                ", "aux_outputs", "[", "\"shared\"", "]", "=", "self", "[", "\"shared\"", "]", "(", "\n", "aux_inputs", "[", "\"sequence_output\"", "]", ",", "\n", "mask", "=", "aux_inputs", "[", "\"input_mask\"", "]", ",", "\n", "labels", "=", "aux_inputs", "[", "\"shared_label_ids\"", "]", "\n", ")", "\n", "\n", "", "pooled", "=", "aux_inputs", "[", "\"pooled\"", "]", "\n", "\n", "# language identification", "\n", "try", ":", "\n", "                ", "lang_clf", "=", "self", "[", "\"lang_clf\"", "]", "\n", "aux_outputs", "[", "\"lang_clf\"", "]", "=", "lang_clf", "(", "pooled", ",", "aux_inputs", "[", "\"lang_id\"", "]", ")", "\n", "", "except", ":", "\n", "                ", "pass", "\n", "\n", "# domain classification", "\n", "", "try", ":", "\n", "                ", "domain_clf", "=", "self", "[", "\"domain_clf\"", "]", "\n", "aux_outputs", "[", "\"domain_clf\"", "]", "=", "domain_clf", "(", "pooled", ",", "aux_inputs", "[", "\"domain_id\"", "]", ")", "\n", "", "except", ":", "\n", "                ", "pass", "\n", "\n", "# all O classification", "\n", "", "try", ":", "\n", "                ", "all_outside_clf", "=", "self", "[", "\"all_outside_clf\"", "]", "\n", "aux_outputs", "[", "\"all_outside_clf\"", "]", "=", "all_outside_clf", "(", "pooled", ",", "aux_inputs", "[", "\"all_outside_id\"", "]", ")", "\n", "", "except", ":", "\n", "                ", "pass", "\n", "\n", "", "return", "outputs", ",", "aux_outputs", "\n", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "forward_lm", "(", "inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.models.multi_token_classification.XForMultiTokenClassificationBase.__init__": [[316, 318], ["multi_token_classification.MultiTokenClassificationUtils.__init__"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.annotate.annotate.SentAnnObj.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.models.multi_token_classification.XForMultiTokenClassificationBase.setup": [[319, 342], ["sum", "multi_token_classification.XForMultiTokenClassificationBase.add_classifiers", "multi_token_classification.XForMultiTokenClassificationBase.add_lang_classifier", "multi_token_classification.XForMultiTokenClassificationBase.add_domain_classifier", "multi_token_classification.XForMultiTokenClassificationBase.add_all_outside_classifier", "multi_token_classification.XForMultiTokenClassificationBase.add_language_modeling", "ValueError", "isinstance", "isinstance", "hf_model.Model", "multi_token_classification.XForMultiTokenClassificationBase.configure_encoder"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.models.multi_token_classification.MultiTokenClassificationUtils.add_classifiers", "home.repos.pwc.inspect_result.suamin_t2ner.models.multi_token_classification.MultiTokenClassificationUtils.add_lang_classifier", "home.repos.pwc.inspect_result.suamin_t2ner.models.multi_token_classification.MultiTokenClassificationUtils.add_domain_classifier", "home.repos.pwc.inspect_result.suamin_t2ner.models.multi_token_classification.MultiTokenClassificationUtils.add_all_outside_classifier", "home.repos.pwc.inspect_result.suamin_t2ner.models.multi_token_classification.MultiTokenClassificationUtils.add_language_modeling", "home.repos.pwc.inspect_result.suamin_t2ner.models.base.TransformersUtils.configure_encoder"], ["", "def", "setup", "(", "self", ",", "config", ")", ":", "\n", "        ", "check", "=", "sum", "(", "[", "isinstance", "(", "config", ",", "hf_model", ".", "Config", ")", "for", "hf_model", "in", "HF_MODELS", "]", ")", "\n", "\n", "# TODO add more informative message", "\n", "if", "not", "check", ":", "\n", "            ", "raise", "ValueError", "(", "\"Unknown / unsupported config.\"", ")", "\n", "\n", "", "for", "hf_model", "in", "HF_MODELS", ":", "\n", "            ", "if", "isinstance", "(", "config", ",", "hf_model", ".", "Config", ")", ":", "\n", "                ", "encoder", "=", "hf_model", ".", "Model", "(", "config", ")", "\n", "\n", "# NOTE this function dynamically creates an attribute of (any sub-)class ", "\n", "# with same name as ``config.model_type`` so the weights can be correctly ", "\n", "# initialized when using the ``from_pretrained`` method. Creating an attr", "\n", "# , e.g., self.encoder will not allow the weights to be loaded. This is by ", "\n", "# design from HF library.", "\n", "self", ".", "configure_encoder", "(", "encoder", ")", "\n", "\n", "", "", "self", ".", "add_classifiers", "(", ")", "\n", "self", ".", "add_lang_classifier", "(", ")", "\n", "self", ".", "add_domain_classifier", "(", ")", "\n", "self", ".", "add_all_outside_classifier", "(", ")", "\n", "self", ".", "add_language_modeling", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.models.multi_token_classification.BertForMultiTokenClassification.__init__": [[346, 350], ["super().__init__", "multi_token_classification.BertForMultiTokenClassification.setup", "multi_token_classification.BertForMultiTokenClassification.init_weights"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.annotate.annotate.SentAnnObj.__init__", "home.repos.pwc.inspect_result.suamin_t2ner.models.multi_token_classification.XForMultiTokenClassificationBase.setup"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "setup", "(", "config", ")", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.models.multi_token_classification.XLMRobertaForMultiTokenClassification.__init__": [[354, 358], ["super().__init__", "multi_token_classification.XLMRobertaForMultiTokenClassification.setup", "multi_token_classification.XLMRobertaForMultiTokenClassification.init_weights"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.annotate.annotate.SentAnnObj.__init__", "home.repos.pwc.inspect_result.suamin_t2ner.models.multi_token_classification.XForMultiTokenClassificationBase.setup"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "setup", "(", "config", ")", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.models.multi_token_classification.XLMForMultiTokenClassification.__init__": [[362, 366], ["super().__init__", "multi_token_classification.XLMForMultiTokenClassification.setup", "multi_token_classification.XLMForMultiTokenClassification.init_weights"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.annotate.annotate.SentAnnObj.__init__", "home.repos.pwc.inspect_result.suamin_t2ner.models.multi_token_classification.XForMultiTokenClassificationBase.setup"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "setup", "(", "config", ")", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.models.multi_token_classification.AutoModelForMultiTokenClassification.__init__": [[379, 382], ["EnvironmentError"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "raise", "EnvironmentError", "(", "\n", "\"AutoModelForMultiTokenClassification is designed to be instantiated \"", "\n", "\"using the `AutoModelForMultiTokenClassification.from_pretrained(pret\"", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.models.multi_token_classification.AutoModelForMultiTokenClassification.get_models_map": [[386, 393], ["collections.OrderedDict", "external_map.items"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "get_models_map", "(", "cls", ",", "external_map", "=", "None", ")", ":", "\n", "        ", "models_map", "=", "OrderedDict", "(", "MODEL_FOR_MULTI_TOKEN_CLASSIFICATION_MAPPING", ")", "\n", "if", "external_map", ":", "\n", "            ", "for", "model_config", ",", "model_class", "in", "external_map", ".", "items", "(", ")", ":", "\n", "                ", "models_map", "[", "model_config", "]", "=", "model_class", "\n", "", "", "return", "models_map", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.models.multi_token_classification.AutoModelForMultiTokenClassification.from_pretrained": [[394, 440], ["kwargs.pop", "kwargs.pop", "cls.get_models_map", "cls.get_models_map.items", "ValueError", "isinstance", "transformers.AutoConfig.from_pretrained", "isinstance", "kwargs.pop", "os.path.isdir", "transformers.AutoConfig.from_pretrained.update", "model_class.check_config_for_shared_attr", "model_class.check_config_for_specific_attr", "model_class.from_pretrained", "dict", "kwargs.pop.get", "os.path.join", "torch.load", "torch.load", "torch.load", "torch.load", "list", "torch.load.keys", "torch.load.keys", "MODEL_FOR_TOKEN_CLASSIFICATION_MAPPING.keys", "k.startswith", "k.startswith"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.models.multi_token_classification.AutoModelForMultiTokenClassification.get_models_map", "home.repos.pwc.inspect_result.suamin_t2ner.models.multi_token_classification.AutoModelForMultiTokenClassification.from_pretrained", "home.repos.pwc.inspect_result.suamin_t2ner.models.base.TransformersUtils.check_config_for_shared_attr", "home.repos.pwc.inspect_result.suamin_t2ner.models.multi_token_classification.MultiTokenClassificationUtils.check_config_for_specific_attr", "home.repos.pwc.inspect_result.suamin_t2ner.models.multi_token_classification.AutoModelForMultiTokenClassification.from_pretrained"], ["", "@", "classmethod", "\n", "def", "from_pretrained", "(", "cls", ",", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", ":", "\n", "        ", "config", "=", "kwargs", ".", "pop", "(", "\"config\"", ",", "None", ")", "\n", "if", "not", "isinstance", "(", "config", ",", "PretrainedConfig", ")", ":", "\n", "            ", "config", "=", "AutoConfig", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "**", "kwargs", ")", "\n", "\n", "", "external_map", "=", "kwargs", ".", "pop", "(", "\"models_map\"", ",", "None", ")", "\n", "models_map", "=", "cls", ".", "get_models_map", "(", "external_map", ")", "\n", "\n", "for", "config_class", ",", "model_class", "in", "models_map", ".", "items", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "config", ",", "config_class", ")", ":", "\n", "                ", "config_kwargs", "=", "kwargs", ".", "pop", "(", "\"config_kwargs\"", ",", "dict", "(", ")", ")", "\n", "\n", "# In case we have a trained model and we are transfering from", "\n", "# dataset with different number of entity types, the classifier", "\n", "# weights have to be explicitly removed to avoid shape mismatch", "\n", "# when using `from_pretrained`.", "\n", "state_dict", "=", "None", "\n", "if", "os", ".", "path", ".", "isdir", "(", "pretrained_model_name_or_path", ")", ":", "\n", "                    ", "ignore_heads", "=", "config_kwargs", ".", "get", "(", "\"ignore_heads\"", ",", "False", ")", "\n", "if", "ignore_heads", ":", "\n", "                        ", "weights_file", "=", "os", ".", "path", ".", "join", "(", "pretrained_model_name_or_path", ",", "\"pytorch_model.bin\"", ")", "\n", "state_dict", "=", "torch", ".", "load", "(", "weights_file", ",", "map_location", "=", "\"cpu\"", ")", "\n", "for", "k", "in", "list", "(", "state_dict", ".", "keys", "(", ")", ")", ":", "\n", "                            ", "if", "k", ".", "startswith", "(", "\"classifiers\"", ")", "or", "k", ".", "startswith", "(", "\"aux_modules\"", ")", ":", "\n", "                                ", "del", "state_dict", "[", "k", "]", "\n", "\n", "", "", "", "", "config", ".", "update", "(", "config_kwargs", ")", "\n", "\n", "model_class", ".", "check_config_for_shared_attr", "(", "config", ")", "\n", "model_class", ".", "check_config_for_specific_attr", "(", "config", ")", "\n", "\n", "return", "model_class", ".", "from_pretrained", "(", "\n", "pretrained_model_name_or_path", ",", "\n", "*", "model_args", ",", "\n", "config", "=", "config", ",", "\n", "state_dict", "=", "state_dict", ",", "\n", "**", "kwargs", "\n", ")", "\n", "\n", "", "", "raise", "ValueError", "(", "\n", "\"Unrecognized configuration class {} for this kind of AutoModel: {}.\\n\"", "\n", "\"Model type should be one of {}.\"", ".", "format", "(", "\n", "config", ".", "__class__", ",", "\n", "cls", ".", "__name__", ",", "\n", "\", \"", ".", "join", "(", "c", ".", "__name__", "for", "c", "in", "MODEL_FOR_TOKEN_CLASSIFICATION_MAPPING", ".", "keys", "(", ")", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.data.adaptation_dataset.SimpleAdaptationData.__init__": [[8, 11], ["base.BaseData.__init__", "adaptation_dataset.SimpleAdaptationData.collect_metadata"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.annotate.annotate.SentAnnObj.__init__", "home.repos.pwc.inspect_result.suamin_t2ner.data.multi_dataset.MultiData.collect_metadata"], ["    ", "def", "__init__", "(", "self", ",", "preprocessed_data_dir", ",", "src_metadata", ",", "tgt_metadata", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "preprocessed_data_dir", ",", "**", "kwargs", ")", "\n", "self", ".", "metadata", "=", "self", ".", "collect_metadata", "(", "src_metadata", ",", "tgt_metadata", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.data.adaptation_dataset.SimpleAdaptationData.collect_metadata": [[12, 55], ["src_metadata[].split", "tgt_metadata[].split", "adaptation_dataset.SimpleAdaptationData.get_label_list", "adaptation_dataset.SimpleAdaptationData.get_type_list", "adaptation_dataset.SimpleAdaptationData.get_label_list", "NotImplementedError", "len", "len", "src_metadata[].replace", "tgt_metadata[].replace"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.data.base.BaseData.get_label_list", "home.repos.pwc.inspect_result.suamin_t2ner.data.base.BaseData.get_type_list", "home.repos.pwc.inspect_result.suamin_t2ner.data.base.BaseData.get_label_list"], ["", "def", "collect_metadata", "(", "self", ",", "src_metadata", ",", "tgt_metadata", ")", ":", "\n", "        ", "src_lang", ",", "src_domain", ",", "src_source", "=", "src_metadata", "[", "\"name\"", "]", ".", "split", "(", "\".\"", ")", "\n", "tgt_lang", ",", "tgt_domain", ",", "tgt_source", "=", "tgt_metadata", "[", "\"name\"", "]", ".", "split", "(", "\".\"", ")", "\n", "\n", "if", "src_lang", "==", "tgt_lang", "and", "src_domain", "!=", "tgt_domain", ":", "\n", "            ", "mode", "=", "\"CD\"", "\n", "", "elif", "src_domain", "==", "tgt_domain", "and", "src_lang", "!=", "tgt_domain", ":", "\n", "            ", "mode", "=", "\"CL\"", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "label_list", "=", "self", ".", "get_label_list", "(", "src_metadata", "[", "\"name\"", "]", ")", "\n", "type_list", "=", "self", ".", "get_type_list", "(", "src_metadata", "[", "\"name\"", "]", ")", "\n", "temp_label_list", "=", "self", ".", "get_label_list", "(", "tgt_metadata", "[", "\"name\"", "]", ")", "\n", "\n", "if", "label_list", "!=", "temp_label_list", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\n", "\"Currently the src-tgt adaptation is only allowed when label spaces are shared.\"", "\n", ")", "\n", "\n", "", "metadata", "=", "{", "\n", "\"mode\"", ":", "mode", ",", "\n", "\"src\"", ":", "{", "\n", "\"name\"", ":", "src_metadata", "[", "\"name\"", "]", ".", "replace", "(", "\".\"", ",", "\"_\"", ")", ",", "\n", "\"lang\"", ":", "src_lang", ",", "\n", "\"domain\"", ":", "src_domain", ",", "\n", "\"source\"", ":", "src_source", ",", "\n", "\"metadata\"", ":", "src_metadata", "\n", "}", ",", "\n", "\"tgt\"", ":", "{", "\n", "\"name\"", ":", "tgt_metadata", "[", "\"name\"", "]", ".", "replace", "(", "\".\"", ",", "\"_\"", ")", ",", "\n", "\"lang\"", ":", "tgt_lang", ",", "\n", "\"domain\"", ":", "tgt_domain", ",", "\n", "\"source\"", ":", "tgt_source", ",", "\n", "\"metadata\"", ":", "tgt_metadata", "\n", "}", ",", "\n", "\"label_list\"", ":", "label_list", ",", "\n", "\"num_labels\"", ":", "len", "(", "label_list", ")", ",", "\n", "\"type_list\"", ":", "type_list", ",", "\n", "\"num_types\"", ":", "len", "(", "type_list", ")", "\n", "}", "\n", "\n", "return", "metadata", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.data.adaptation_dataset.SimpleAdaptationData.type": [[56, 59], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "type", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "metadata", "[", "\"mode\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.data.adaptation_dataset.SimpleAdaptationData.src_lang": [[60, 63], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "src_lang", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "metadata", "[", "\"src\"", "]", "[", "\"lang\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.data.adaptation_dataset.SimpleAdaptationData.src_domain": [[64, 67], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "src_domain", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "metadata", "[", "\"src\"", "]", "[", "\"domain\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.data.adaptation_dataset.SimpleAdaptationData.tgt_lang": [[68, 71], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "tgt_lang", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "metadata", "[", "\"tgt\"", "]", "[", "\"lang\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.data.adaptation_dataset.SimpleAdaptationData.tgt_domain": [[72, 75], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "tgt_domain", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "metadata", "[", "\"tgt\"", "]", "[", "\"domain\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.data.adaptation_dataset.SimpleAdaptationData.get_train_data": [[76, 93], ["dict", "adaptation_dataset.SimpleAdaptationData.get_k_train_dataloaders", "adaptation_dataset.SimpleAdaptationData.get_k_train_dataloaders", "len", "len", "dict", "adaptation_dataset.SimpleAdaptationData.get_clm_train_dataloader", "adaptation_dataset.SimpleAdaptationData.get_clm_train_dataloader", "dict"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.data.base.BaseData.get_k_train_dataloaders", "home.repos.pwc.inspect_result.suamin_t2ner.data.base.BaseData.get_k_train_dataloaders", "home.repos.pwc.inspect_result.suamin_t2ner.data.base.BaseData.get_clm_train_dataloader", "home.repos.pwc.inspect_result.suamin_t2ner.data.base.BaseData.get_clm_train_dataloader"], ["", "def", "get_train_data", "(", "self", ",", "k", "=", "1", ",", "lm", "=", "False", ",", "src_lm_dataset", "=", "None", ",", "tgt_lm_dataset", "=", "None", ")", ":", "\n", "        ", "train_dataloaders", "=", "dict", "(", "ner", "=", "dict", "(", "src", "=", "None", ",", "tgt", "=", "None", ")", ")", "\n", "\n", "src_metadata", "=", "self", ".", "metadata", "[", "\"src\"", "]", "[", "\"metadata\"", "]", "\n", "tgt_metadata", "=", "self", ".", "metadata", "[", "\"tgt\"", "]", "[", "\"metadata\"", "]", "\n", "\n", "train_dataloaders", "[", "\"ner\"", "]", "[", "\"src\"", "]", "=", "self", ".", "get_k_train_dataloaders", "(", "src_metadata", ",", "k", "=", "k", ")", "\n", "train_dataloaders", "[", "\"ner\"", "]", "[", "\"tgt\"", "]", "=", "self", ".", "get_k_train_dataloaders", "(", "tgt_metadata", ",", "k", "=", "k", ")", "\n", "train_dataloader_len", "=", "len", "(", "train_dataloaders", "[", "\"ner\"", "]", "[", "\"src\"", "]", "[", "0", "]", ")", "\n", "num_train_examples", "=", "len", "(", "train_dataloaders", "[", "\"ner\"", "]", "[", "\"src\"", "]", "[", "0", "]", ".", "dataset", ")", "\n", "\n", "if", "lm", "and", "src_lm_dataset", "is", "not", "None", "and", "tgt_lm_dataset", "is", "not", "None", ":", "\n", "            ", "train_dataloaders", "[", "\"lm\"", "]", "=", "dict", "(", "src", "=", "None", ",", "tgt", "=", "None", ")", "\n", "train_dataloaders", "[", "\"lm\"", "]", "[", "\"src\"", "]", "=", "self", ".", "get_clm_train_dataloader", "(", "src_metadata", ",", "src_lm_dataset", ")", "\n", "train_dataloaders", "[", "\"lm\"", "]", "[", "\"tgt\"", "]", "=", "self", ".", "get_clm_train_dataloader", "(", "tgt_metadata", ",", "tgt_lm_dataset", ")", "\n", "\n", "", "return", "train_dataloaders", ",", "train_dataloader_len", ",", "num_train_examples", "\n", "", "", ""]], "home.repos.pwc.inspect_result.suamin_t2ner.data.base.BaseData.__init__": [[13, 20], ["kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "dict"], "methods", ["None"], ["\n", "\n", "logger", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "\n", "\n", "class", "TrainInferenceUtils", ":", "\n", "\n", "    ", "@", "cached_property", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.data.base.BaseData.get_datasets": [[21, 32], ["ner.NERDataset.load_and_cache_features_as_datasets"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.data.ner.NERDataset.load_and_cache_features_as_datasets"], ["def", "_setup_devices", "(", "self", ")", ":", "\n", "        ", "logger", ".", "info", "(", "\"PyTorch: setting up devices\"", ")", "\n", "if", "hasattr", "(", "self", ",", "\"training_args\"", ")", ":", "\n", "            ", "no_cuda", "=", "self", ".", "training_args", ".", "no_cuda", "\n", "", "elif", "hasattr", "(", "self", ",", "\"no_cuda\"", ")", ":", "\n", "            ", "no_cuda", "=", "self", ".", "no_cuda", "\n", "", "else", ":", "\n", "            ", "no_cuda", "=", "False", "\n", "", "if", "not", "no_cuda", ":", "\n", "            ", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "n_gpu", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.data.base.BaseData.get_label_list": [[33, 38], ["os.path.join", "utils.read_labels", "sorted", "list", "set"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.data.utils.read_labels"], ["            ", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", "\n", "n_gpu", "=", "0", "\n", "", "return", "device", ",", "n_gpu", "\n", "\n", "", "@", "property", "\n", "def", "device", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.data.base.BaseData.get_label_maps": [[39, 44], ["base.BaseData.get_label_list", "enumerate", "label2id.items"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.data.base.BaseData.get_label_list"], ["        ", "return", "self", ".", "_setup_devices", "[", "0", "]", "\n", "\n", "", "@", "property", "\n", "def", "n_gpu", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_setup_devices", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.data.base.BaseData.get_type_list": [[45, 50], ["base.BaseData.get_label_list", "sorted", "list", "set"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.data.base.BaseData.get_label_list"], ["", "@", "property", "\n", "def", "seed", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_seed", "\n", "\n", "", "@", "seed", ".", "setter", "\n", "def", "seed", "(", "self", ",", "value", ")", ":", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.data.base.BaseData.get_type_maps": [[51, 56], ["base.BaseData.get_type_list", "enumerate", "type2id.items"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.data.base.BaseData.get_type_list"], ["        ", "self", ".", "set_seed", "(", "value", ")", "\n", "self", ".", "_seed", "=", "value", "\n", "\n", "", "@", "property", "\n", "def", "train_batch_size", "(", "self", ")", ":", "\n", "        ", "if", "hasattr", "(", "self", ",", "\"training_args\"", ")", ":", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.data.base.BaseData.get_train_data": [[57, 60], ["None"], "methods", ["None"], ["            ", "per_device_train_batch_size", "=", "self", ".", "training_args", ".", "per_device_train_batch_size", "\n", "", "else", ":", "\n", "            ", "per_device_train_batch_size", "=", "self", ".", "per_device_train_batch_size", "\n", "", "return", "per_device_train_batch_size", "*", "max", "(", "1", ",", "self", ".", "n_gpu", ")", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.data.base.BaseData.get_train_dataset": [[61, 66], ["base.BaseData.get_datasets", "list"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.data.base.BaseData.get_datasets"], ["\n", "", "@", "property", "\n", "def", "eval_batch_size", "(", "self", ")", ":", "\n", "        ", "if", "hasattr", "(", "self", ",", "\"training_args\"", ")", ":", "\n", "            ", "per_device_eval_batch_size", "=", "self", ".", "training_args", ".", "per_device_eval_batch_size", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.data.base.BaseData.get_dataset": [[67, 77], ["base.BaseData.get_train_dataset", "ValueError"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.data.base.BaseData.get_train_dataset"], ["            ", "per_device_eval_batch_size", "=", "self", ".", "per_device_eval_batch_size", "\n", "", "return", "per_device_eval_batch_size", "*", "max", "(", "1", ",", "self", ".", "n_gpu", ")", "\n", "\n", "", "@", "staticmethod", "\n", "def", "load_or_create_model", "(", "\n", "model_class", ",", "\n", "model_name_or_path", "=", "None", ",", "\n", "init_checkpoint", "=", "None", ",", "\n", "**", "config_kwargs", "\n", ")", ":", "\n", "        ", "if", "model_name_or_path", "is", "None", "and", "init_checkpoint", "is", "None", ":", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.data.base.BaseData._get_train_dataloader": [[78, 88], ["ner.NERDataLoader.train_dataloader", "metadata.get", "metadata.get", "metadata.get", "metadata.get"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.data.ner.MultiNERDataLoader.train_dataloader"], ["            ", "raise", "ValueError", "(", "\n", "\"For loading or creating a new model model_name_or_path or \"", "\n", "\"init_checkpoint is required. When both are passed, init_checkpoint \"", "\n", "\"takes precedence.\"", "\n", ")", "\n", "", "if", "init_checkpoint", ":", "\n", "            ", "model_name_or_path", "=", "init_checkpoint", "\n", "logger", ".", "info", "(", "\"loading from init_checkpoint = {}\"", ".", "format", "(", "model_name_or_path", ")", ")", "\n", "", "else", ":", "\n", "            ", "logger", ".", "info", "(", "\"loading from cached model = {}\"", ".", "format", "(", "model_name_or_path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.data.base.BaseData.get_train_dataloader": [[89, 94], ["base.BaseData.get_dataset", "base.BaseData._get_train_dataloader", "dict"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.data.base.BaseData.get_dataset", "home.repos.pwc.inspect_result.suamin_t2ner.data.base.BaseData._get_train_dataloader"], ["", "model", "=", "model_class", ".", "from_pretrained", "(", "\n", "model_name_or_path", ",", "\n", "config_kwargs", "=", "config_kwargs", "\n", ")", "\n", "\n", "return", "model", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.data.base.BaseData.get_k_train_dataloaders": [[95, 106], ["list", "base.BaseData.get_train_dataset", "range", "base.BaseData.get_train_dataloader", "list.append"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.data.base.BaseData.get_train_dataset", "home.repos.pwc.inspect_result.suamin_t2ner.data.multi_dataset.MultiData.get_train_dataloader"], ["\n", "", "@", "staticmethod", "\n", "def", "save_model", "(", "\n", "model", ",", "\n", "output_dir", ",", "\n", "training_args", "=", "None", ",", "\n", "model_args", "=", "None", ",", "\n", "exp_args", "=", "None", "\n", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "output_dir", ",", "exist_ok", "=", "True", ")", "\n", "logger", ".", "info", "(", "\"Saving model checkpoint to %s\"", ",", "output_dir", ")", "\n", "# In all cases (even distributed/parallel), model is always a reference", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.data.base.BaseData._get_ssl_train_dataloaders": [[107, 119], ["ner.NERDataLoader.ssl_train_dataloaders"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.data.ner.NERDataLoader.ssl_train_dataloaders"], ["# to the model we want to save.", "\n", "if", "hasattr", "(", "model", ",", "\"module\"", ")", ":", "\n", "            ", "save_model", "=", "model", ".", "module", "\n", "", "else", ":", "\n", "            ", "save_model", "=", "model", "\n", "", "save_model", ".", "save_pretrained", "(", "output_dir", ")", "\n", "\n", "# Good practice: save your arguments together with the trained model", "\n", "for", "name", ",", "args", "in", "[", "\n", "(", "\"training_args\"", ",", "training_args", ")", ",", "\n", "(", "\"model_args\"", ",", "model_args", ")", ",", "\n", "(", "\"exp_args\"", ",", "exp_args", ")", "\n", "]", ":", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.data.base.BaseData.get_ssl_train_dataloaders": [[120, 124], ["base.BaseData.get_dataset", "base.BaseData._get_ssl_train_dataloaders"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.data.base.BaseData.get_dataset", "home.repos.pwc.inspect_result.suamin_t2ner.data.base.BaseData._get_ssl_train_dataloaders"], ["            ", "if", "args", "is", "not", "None", ":", "\n", "                ", "args_json", "=", "args", ".", "to_json_string", "(", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "output_dir", ",", "name", "+", "\".json\"", ")", ",", "\"w\"", ")", "as", "wf", ":", "\n", "                    ", "wf", ".", "write", "(", "args_json", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.data.base.BaseData.to_iter": [[125, 133], ["iter"], "methods", ["None"], ["", "", "", "", "@", "staticmethod", "\n", "def", "parse_input_to_dataset_metadata", "(", "item", ")", ":", "\n", "        ", "metadata", "=", "dict", "(", "\n", "name", "=", "None", ",", "\n", "max_examples", "=", "-", "1", ",", "\n", "drop_last", "=", "False", ",", "\n", "forever", "=", "False", ",", "\n", "shuffle", "=", "False", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.data.base.BaseData.get_clm_train_dataloader": [[134, 140], ["ner.NERDataLoader.lm_dataloader", "base.BaseData.get_train_dataset"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.data.base.BaseData.get_train_dataset"], ["if", "isinstance", "(", "item", ",", "str", ")", ":", "\n", "            ", "metadata", "[", "\"name\"", "]", "=", "item", "\n", "", "elif", "len", "(", "item", ")", ">", "1", ":", "\n", "            ", "metadata", "[", "\"name\"", "]", "=", "item", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "item", ")", "-", "1", ")", ":", "\n", "                ", "if", "i", "==", "1", ":", "\n", "                    ", "metadata", "[", "\"max_examples\"", "]", "=", "item", "[", "1", "]", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.data.base.BaseData.get_eval_and_test_dataloaders": [[141, 174], ["dict", "kwargs.get", "dict", "kwargs.get", "set", "dict", "base.BaseData.get_datasets", "ner.NERDataLoader.dev_dataloader", "ner.NERDataLoader.dev_dataloader"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.data.base.BaseData.get_datasets", "home.repos.pwc.inspect_result.suamin_t2ner.data.ner.MultiNERDataLoader.dev_dataloader", "home.repos.pwc.inspect_result.suamin_t2ner.data.ner.MultiNERDataLoader.dev_dataloader"], ["", "elif", "i", "==", "2", ":", "\n", "                    ", "metadata", "[", "\"drop_last\"", "]", "=", "item", "[", "2", "]", "\n", "", "elif", "i", "==", "3", ":", "\n", "                    ", "metadata", "[", "\"forever\"", "]", "=", "item", "[", "3", "]", "\n", "", "elif", "i", "==", "4", ":", "\n", "                    ", "metadata", "[", "\"shuffle\"", "]", "=", "item", "[", "4", "]", "\n", "", "", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Unable to parse item `{}` to metadata.\"", ".", "format", "(", "item", ")", "\n", ")", "\n", "", "return", "metadata", "\n", "\n", "", "@", "staticmethod", "\n", "def", "init_logging", "(", "log_file", ")", ":", "\n", "        ", "fh", "=", "logging", ".", "FileHandler", "(", "log_file", ")", "\n", "fh", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "logging", ".", "basicConfig", "(", "\n", "handlers", "=", "[", "logging", ".", "StreamHandler", "(", ")", "]", ",", "\n", "format", "=", "'%(asctime)s - %(levelname)s - %(name)s -   %(message)s'", ",", "\n", "datefmt", "=", "'%m/%d/%Y %H:%M:%S'", ",", "\n", "level", "=", "logging", ".", "INFO", "\n", ")", "\n", "fh", ".", "setFormatter", "(", "logging", ".", "Formatter", "(", "\n", "'%(asctime)s - %(levelname)s - %(name)s -   %(message)s'", ",", "\n", "datefmt", "=", "'%m/%d/%Y %H:%M:%S'", "\n", ")", ")", "\n", "return", "fh", "\n", "\n", "", "@", "staticmethod", "\n", "def", "freeze", "(", "module", ")", ":", "\n", "        ", "for", "params", "in", "module", ".", "parameters", "(", ")", ":", "\n", "            ", "params", ".", "requires_grad", "=", "False", "\n", "\n", "", "", "@", "staticmethod", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.data.ner.InputExample.__init__": [[22, 37], ["None"], "methods", ["None"], ["\n", "", "data_kwargs", "=", "self", ".", "data_kwargs", "\n", "data_dir", "=", "data_kwargs", ".", "pop", "(", "\"preprocessed_data_dir\"", ")", "\n", "\n", "self", ".", "data", "=", "SimpleData", "(", "data_dir", ",", "metadata", ",", "**", "data_kwargs", ")", "\n", "# In this setting we only use validation set of training dataset", "\n", "self", ".", "register_model_validation_datasets", "(", "metadata", "[", "\"name\"", "]", ")", "\n", "self", ".", "load_eval_data", "(", "train_datasets", "=", "[", "metadata", "[", "\"name\"", "]", ",", "]", ")", "\n", "\n", "# Config kwargs that will be hooked to model config file", "\n", "id2label", ",", "label2id", "=", "self", ".", "data", ".", "get_label_maps", "(", "metadata", "[", "\"name\"", "]", ")", "\n", "id2type", ",", "type2id", "=", "self", ".", "data", ".", "get_type_maps", "(", "metadata", "[", "\"name\"", "]", ")", "\n", "\n", "self", ".", "config_kwargs", ".", "update", "(", "dict", "(", "\n", "label2id", "=", "label2id", ",", "id2label", "=", "id2label", ",", "\n", "type2id", "=", "type2id", ",", "id2type", "=", "id2type", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.data.ner.InputFeatures.__init__": [[41, 58], ["None"], "methods", ["None"], ["if", "self", ".", "model_args", ".", "loss_fct", "==", "\"ldam\"", "and", "self", ".", "training_args", ".", "do_train", ":", "\n", "            ", "train_dataset", "=", "self", ".", "data", ".", "get_train_dataset", "(", "metadata", ")", "\n", "class_num_list", "=", "train_dataset", ".", "get_class_counts", "(", ")", "\n", "self", ".", "config_kwargs", "[", "\"class_num_list\"", "]", "=", "class_num_list", "\n", "\n", "", "", "def", "batch_to_device", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "return", "{", "tensor_name", ":", "tensor", ".", "to", "(", "self", ".", "device", ")", "for", "tensor_name", ",", "tensor", "in", "inputs", ".", "items", "(", ")", "}", "\n", "\n", "", "def", "before_train", "(", "self", ")", ":", "\n", "        ", "self", ".", "load_train_data", "(", ")", "\n", "self", ".", "model_optim_config", "=", "dict", "(", "\n", "model", "=", "self", ".", "model", ",", "\n", "optim", "=", "\"adamw\"", ",", "\n", "lr_scheduler", "=", "self", ".", "exp_args", ".", "lr_scheduler", "\n", ")", "\n", "self", ".", "configure_optimization", "(", ")", "\n", "\n", "", "def", "run_epoch", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.data.ner.NERFeatures.__init__": [[62, 68], ["utils.TokenizerFeatures.__init__", "sorted", "sorted", "list", "list", "set", "enumerate", "set", "enumerate", "kwargs.pop", "kwargs.pop"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.annotate.annotate.SentAnnObj.__init__"], ["model", "=", "self", ".", "model", "\n", "\n", "for", "self", ".", "step", "in", "self", ".", "epoch_iterator", ":", "\n", "            ", "inputs", "=", "next", "(", "train_iter", ")", "\n", "inputs", "=", "self", ".", "batch_to_device", "(", "inputs", ")", "\n", "model", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.data.ner.NERFeatures.id2label": [[69, 72], ["ner.NERFeatures.label2id.items"], "methods", ["None"], ["outputs", "=", "model", "(", "inputs", ")", "\n", "loss", "=", "outputs", "[", "\"ner\"", "]", "[", "\"loss\"", "]", "\n", "\n", "self", ".", "model_backward", "(", "loss", ")", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.data.ner.NERFeatures.id2type": [[73, 76], ["ner.NERFeatures.type2id.items"], "methods", ["None"], ["self", ".", "stats", "[", "\"batch_train_loss\"", "]", ".", "append", "(", "self", ".", "adjust_loss", "(", "loss", ")", ".", "item", "(", ")", ")", "\n", "self", ".", "num_batches_seen", "+=", "1", "\n", "\n", "if", "self", ".", "is_update_step", ":", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.data.ner.NERFeatures.encode": [[77, 115], ["ner.NERFeatures.tokenizer.build_inputs_with_special_tokens", "ner.NERFeatures.tokenizer.build_inputs_with_special_tokens", "ner.NERFeatures.tokenizer.build_inputs_with_special_tokens", "ner.NERFeatures.tokenizer.get_special_tokens_mask", "len", "len", "len", "enumerate", "enumerate"], "methods", ["None"], ["                ", "self", ".", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ")", "\n", "self", ".", "model_update", "(", ")", "\n", "self", ".", "global_step", "+=", "1", "\n", "self", ".", "update_lr", "(", ")", "\n", "self", ".", "model_zero_grad", "(", ")", "\n", "\n", "logs", "=", "{", "}", "\n", "logs", "[", "\"loss\"", "]", "=", "sum", "(", "self", ".", "stats", "[", "\"batch_train_loss\"", "]", ")", "/", "self", ".", "num_batches_seen", "\n", "logs", "[", "\"epoch\"", "]", "=", "self", ".", "progress", "\n", "logs", "[", "\"step\"", "]", "=", "self", ".", "global_step", "\n", "\n", "self", ".", "do_logging_step", "(", "model", ",", "logs", ",", "evaluate", "=", "True", ")", "\n", "self", ".", "do_save_step", "(", "model", ")", "\n", "\n", "", "if", "self", ".", "is_max_step", ":", "\n", "                ", "self", ".", "epoch_iterator", ".", "close", "(", ")", "\n", "break", "\n", "\n", "\n", "", "", "", "", "@", "dataclass", "\n", "class", "NERArguments", "(", "ArgumentsBase", ")", ":", "\n", "    ", "\"\"\"\n    Experiment specific arguments.\n    \"\"\"", "\n", "preprocessed_data_dir", ":", "str", "=", "field", "(", "\n", "metadata", "=", "{", "\"help\"", ":", "\"The data directory created by preprocessing script.\"", "}", "\n", ")", "\n", "train_dataset", ":", "str", "=", "field", "(", "\n", "metadata", "=", "{", "\"help\"", ":", "\"NER training dataset.\"", "}", "\n", ")", "\n", "eval_datasets", ":", "list", "=", "field", "(", "\n", "default", "=", "None", ",", "\n", "metadata", "=", "{", "\"help\"", ":", "\"Additional datasets to evaluate the trained model in zero-shot setting.\"", "}", "\n", ")", "\n", "max_num_train_examples", ":", "int", "=", "field", "(", "\n", "default", "=", "-", "1", ",", "\n", "metadata", "=", "{", "\"help\"", ":", "\"Maximum no. of training examples to consider (-1 = consider all).\"", "}", "\n", ")", "\n", "lr_scheduler", ":", "str", "=", "field", "(", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.data.ner.NERFeatures.convert_example_to_feature": [[116, 179], ["list", "list", "list", "list", "zip", "ner.NERFeatures.tokenizer.convert_tokens_to_ids", "ner.NERFeatures.encode", "ner.InputFeatures", "isinstance", "ner.NERFeatures.extend", "list.extend", "list.append", "list.extend", "sum", "len", "len", "len", "len", "len", "logger.info", "logger.info", "logger.info", "logger.info", "logger.info", "ner.NERFeatures.tokenizer.convert_ids_to_tokens", "logger.info", "logger.info", "logger.info", "logger.info", "logger.info", "logger.info", "ner.NERFeatures.tokenizer.tokenize", "ner.NERFeatures.tokenizer.tokenize", "str", "str", "str", "str", "len", "len"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.data.ner.NERFeatures.encode"], ["default", "=", "\"linear\"", ",", "\n", "metadata", "=", "{", "\"help\"", ":", "\"Which learning rate scheduler to use.\"", "}", "\n", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.suamin_t2ner.data.ner.NERDataset.__init__": [[183, 196], ["logger.info", "len"], "methods", ["None"], []], "home.repos.pwc.inspect_result.suamin_t2ner.data.ner.NERDataset.read_examples_from_file": [[197, 220], ["list", "enumerate", "utils.read_conll_ner_file", "ner.InputExample", "list.append"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.data.utils.read_conll_ner_file"], []], "home.repos.pwc.inspect_result.suamin_t2ner.data.ner.NERDataset.load_and_cache_features_as_datasets": [[221, 324], ["os.makedirs", "os.path.join", "ner.NERDataset", "unique_name.split", "os.path.join", "utils.read_labels", "list", "os.path.exists", "os.path.splitext", "os.path.exists", "utils.TokenizerFeatures.load_features", "ner.NERFeatures", "ner.NERDataset.read_examples_from_file", "NERFeatures.convert_examples_to_features", "utils.TokenizerFeatures.save_features", "ValueError", "ValueError", "sorted", "os.path.join", "ner.NERDataset", "list", "set", "os.path.exists", "utils.TokenizerFeatures.load_features", "os.path.join", "ner.NERDataset.read_examples_from_file", "NERFeatures.convert_examples_to_features", "utils.TokenizerFeatures.save_features", "os.path.split", "sorted", "os.path.exists", "logger.warn", "ner.NERFeatures", "set"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.data.utils.read_labels", "home.repos.pwc.inspect_result.suamin_t2ner.data.utils.TokenizerFeatures.load_features", "home.repos.pwc.inspect_result.suamin_t2ner.data.ner.NERDataset.read_examples_from_file", "home.repos.pwc.inspect_result.suamin_t2ner.data.utils.TokenizerFeatures.convert_examples_to_features", "home.repos.pwc.inspect_result.suamin_t2ner.data.utils.TokenizerFeatures.save_features", "home.repos.pwc.inspect_result.suamin_t2ner.data.utils.TokenizerFeatures.load_features", "home.repos.pwc.inspect_result.suamin_t2ner.data.ner.NERDataset.read_examples_from_file", "home.repos.pwc.inspect_result.suamin_t2ner.data.utils.TokenizerFeatures.convert_examples_to_features", "home.repos.pwc.inspect_result.suamin_t2ner.data.utils.TokenizerFeatures.save_features"], []], "home.repos.pwc.inspect_result.suamin_t2ner.data.ner.NERDataset.decode_label_ids": [[325, 330], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.suamin_t2ner.data.ner.NERDataset.__len__": [[332, 334], ["len"], "methods", ["None"], []], "home.repos.pwc.inspect_result.suamin_t2ner.data.ner.NERDataset.__getitem__": [[335, 337], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.suamin_t2ner.data.ner.NERDataset.get_class_counts": [[338, 346], ["collections.Counter", "collections.Counter.update", "sorted", "collections.Counter.items"], "methods", ["None"], []], "home.repos.pwc.inspect_result.suamin_t2ner.data.ner.NERDataset.get_type_counts": [[347, 355], ["collections.Counter", "collections.Counter.update", "sorted", "collections.Counter.items"], "methods", ["None"], []], "home.repos.pwc.inspect_result.suamin_t2ner.data.ner.NERDataset.add_metadata": [[356, 360], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.suamin_t2ner.data.ner.NERDataset.collate_fn": [[361, 393], ["dict", "batch[].append", "batch[].append", "batch[].append", "batch[].append", "batch[].append", "torch.cat", "torch.tensor().long", "list", "list", "list", "list", "list", "list", "list", "torch.tensor().long().unsqueeze", "torch.tensor().long().unsqueeze", "torch.tensor().long().unsqueeze", "torch.tensor().long().unsqueeze", "batch[].append", "batch[].append", "torch.tensor", "torch.tensor().long", "torch.tensor().long", "torch.tensor().long", "torch.tensor().long", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["None"], []], "home.repos.pwc.inspect_result.suamin_t2ner.data.ner.NERDataset.clm_collate_fn": [[394, 409], ["dict", "batch[].append", "batch[].append", "torch.cat", "list", "list", "isinstance", "isinstance", "torch.tensor().long().unsqueeze", "torch.tensor().long().unsqueeze", "torch.tensor().long", "torch.tensor().long", "torch.tensor", "torch.tensor"], "methods", ["None"], []], "home.repos.pwc.inspect_result.suamin_t2ner.data.ner.ForeverDataIterator.__init__": [[413, 416], ["iter"], "methods", ["None"], []], "home.repos.pwc.inspect_result.suamin_t2ner.data.ner.ForeverDataIterator.__next__": [[417, 424], ["next", "iter", "next"], "methods", ["None"], []], "home.repos.pwc.inspect_result.suamin_t2ner.data.ner.ForeverDataIterator.dataset": [[425, 428], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.suamin_t2ner.data.ner.ForeverDataIterator.__len__": [[429, 431], ["len"], "methods", ["None"], []], "home.repos.pwc.inspect_result.suamin_t2ner.data.ner.BaseDataLoader.forever": [[435, 438], ["ner.ForeverDataIterator"], "methods", ["None"], []], "home.repos.pwc.inspect_result.suamin_t2ner.data.ner.BaseDataLoader.trim_dataset_": [[439, 448], ["int", "random.shuffle", "len", "len"], "methods", ["None"], []], "home.repos.pwc.inspect_result.suamin_t2ner.data.ner.BaseDataLoader.split_dataset": [[449, 456], ["int", "random.shuffle", "len"], "methods", ["None"], []], "home.repos.pwc.inspect_result.suamin_t2ner.data.ner.NERDataLoader.train_dataloader": [[460, 482], ["ner.BaseDataLoader.trim_dataset_", "torch.utils.data.DataLoader", "random.shuffle", "ner.BaseDataLoader.forever", "torch.utils.data.RandomSampler"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.data.ner.BaseDataLoader.trim_dataset_", "home.repos.pwc.inspect_result.suamin_t2ner.data.ner.BaseDataLoader.forever"], []], "home.repos.pwc.inspect_result.suamin_t2ner.data.ner.NERDataLoader.dev_dataloader": [[483, 492], ["torch.utils.data.DataLoader", "torch.utils.data.SequentialSampler"], "methods", ["None"], []], "home.repos.pwc.inspect_result.suamin_t2ner.data.ner.NERDataLoader.ssl_train_dataloaders": [[493, 538], ["dict", "range", "ner.BaseDataLoader.split_dataset", "ner.NERDataset", "ner.NERDataset", "list", "list", "torch.utils.data.DataLoader", "outputs[].append", "random.shuffle", "ner.BaseDataLoader.forever", "torch.utils.data.RandomSampler"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.data.ner.BaseDataLoader.split_dataset", "home.repos.pwc.inspect_result.suamin_t2ner.data.ner.BaseDataLoader.forever"], []], "home.repos.pwc.inspect_result.suamin_t2ner.data.ner.NERDataLoader.clm_dataloader": [[539, 550], ["torch.utils.data.RandomSampler", "torch.utils.data.DataLoader", "ner.BaseDataLoader.forever"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.data.ner.BaseDataLoader.forever"], []], "home.repos.pwc.inspect_result.suamin_t2ner.data.ner.MultiNERDataset.__init__": [[554, 556], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.suamin_t2ner.data.ner.MultiNERDataset.__len__": [[557, 559], ["len"], "methods", ["None"], []], "home.repos.pwc.inspect_result.suamin_t2ner.data.ner.MultiNERDataset.__getitem__": [[560, 562], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.suamin_t2ner.data.ner.MultiNERDataset._collate_fn": [[563, 604], ["dict", "d[].append", "d[].append", "d[].append", "d[].append", "d[].append", "d[].append", "dict", "torch.tensor().long().unsqueeze", "torch.tensor().long().unsqueeze", "torch.tensor().long().unsqueeze", "torch.tensor().long().unsqueeze", "torch.tensor().long().unsqueeze", "d[].append", "d[].append", "torch.cat", "torch.tensor().long", "list", "list", "list", "list", "list", "list", "list", "list", "torch.tensor().long", "torch.tensor().long", "torch.tensor().long", "torch.tensor().long", "torch.tensor().long", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["None"], []], "home.repos.pwc.inspect_result.suamin_t2ner.data.ner.MultiNERDataset.shared_as_single_collate_fn": [[608, 645], ["dict", "d[].append", "d[].append", "d[].append", "d[].append", "d[].append", "d[].append", "torch.cat", "torch.tensor().long", "torch.tensor().long().unsqueeze", "torch.tensor().long().unsqueeze", "torch.tensor().long().unsqueeze", "torch.tensor().long().unsqueeze", "torch.tensor().long().unsqueeze", "d[].append", "d[].append", "list", "list", "list", "list", "list", "list", "list", "list", "torch.tensor", "torch.tensor().long", "torch.tensor().long", "torch.tensor().long", "torch.tensor().long", "torch.tensor().long", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["None"], []], "home.repos.pwc.inspect_result.suamin_t2ner.data.ner.MultiNERDataLoader.train_dataloader": [[649, 671], ["ner.BaseDataLoader.trim_dataset_", "torch.utils.data.RandomSampler", "torch.utils.data.DataLoader", "ner.BaseDataLoader.forever"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.data.ner.BaseDataLoader.trim_dataset_", "home.repos.pwc.inspect_result.suamin_t2ner.data.ner.BaseDataLoader.forever"], []], "home.repos.pwc.inspect_result.suamin_t2ner.data.ner.MultiNERDataLoader.dev_dataloader": [[672, 682], ["torch.utils.data.DataLoader", "torch.utils.data.SequentialSampler"], "methods", ["None"], []], "home.repos.pwc.inspect_result.suamin_t2ner.data.ner.MultiNERDataLoader.shared_as_single_dataloader": [[683, 692], ["torch.utils.data.DataLoader", "torch.utils.data.SequentialSampler"], "methods", ["None"], []], "home.repos.pwc.inspect_result.suamin_t2ner.data.semisupervised_dataset.SemiSupervisedData.__init__": [[9, 12], ["base.BaseData.__init__", "semisupervised_dataset.SemiSupervisedData.collect_metadata"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.annotate.annotate.SentAnnObj.__init__", "home.repos.pwc.inspect_result.suamin_t2ner.data.multi_dataset.MultiData.collect_metadata"], ["    ", "def", "__init__", "(", "self", ",", "preprocessed_data_dir", ",", "train_dataset_metadata", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "preprocessed_data_dir", ",", "**", "kwargs", ")", "\n", "self", ".", "metadata", "=", "self", ".", "collect_metadata", "(", "train_dataset_metadata", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.data.semisupervised_dataset.SemiSupervisedData.collect_metadata": [[13, 32], ["semisupervised_dataset.SemiSupervisedData.get_label_list", "semisupervised_dataset.SemiSupervisedData.get_type_list", "unique_name.split", "train_dataset_metadata[].replace", "len", "len"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.data.base.BaseData.get_label_list", "home.repos.pwc.inspect_result.suamin_t2ner.data.base.BaseData.get_type_list"], ["", "def", "collect_metadata", "(", "self", ",", "train_dataset_metadata", ")", ":", "\n", "        ", "unique_name", "=", "train_dataset_metadata", "[", "\"name\"", "]", "\n", "label_list", "=", "self", ".", "get_label_list", "(", "unique_name", ")", "\n", "type_list", "=", "self", ".", "get_type_list", "(", "unique_name", ")", "\n", "lang", ",", "domain", ",", "source", "=", "unique_name", ".", "split", "(", "\".\"", ")", "\n", "\n", "metadata", "=", "{", "\n", "\"name\"", ":", "train_dataset_metadata", "[", "\"name\"", "]", ".", "replace", "(", "\".\"", ",", "\"_\"", ")", ",", "\n", "\"lang\"", ":", "lang", ",", "\n", "\"domain\"", ":", "domain", ",", "\n", "\"source\"", ":", "source", ",", "\n", "\"label_list\"", ":", "label_list", ",", "\n", "\"num_labels\"", ":", "len", "(", "label_list", ")", ",", "\n", "\"type_list\"", ":", "type_list", ",", "\n", "\"num_types\"", ":", "len", "(", "type_list", ")", ",", "\n", "\"metadata\"", ":", "train_dataset_metadata", "\n", "}", "\n", "\n", "return", "metadata", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.data.semisupervised_dataset.SemiSupervisedData.lang": [[33, 36], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "lang", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "metadata", "[", "\"lang\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.data.semisupervised_dataset.SemiSupervisedData.domain": [[37, 40], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "domain", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "metadata", "[", "\"domain\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.data.semisupervised_dataset.SemiSupervisedData.get_train_data": [[41, 55], ["dict", "semisupervised_dataset.SemiSupervisedData.get_ssl_train_dataloaders", "len", "len", "semisupervised_dataset.SemiSupervisedData.get_clm_train_dataloader"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.data.base.BaseData.get_ssl_train_dataloaders", "home.repos.pwc.inspect_result.suamin_t2ner.data.base.BaseData.get_clm_train_dataloader"], ["", "def", "get_train_data", "(", "self", ",", "k", "=", "1", ",", "split_ratio", "=", "0.5", ",", "lm", "=", "False", ",", "lm_dataset", "=", "None", ")", ":", "\n", "        ", "train_dataloaders", "=", "dict", "(", ")", "\n", "metadata", "=", "self", ".", "metadata", "[", "\"metadata\"", "]", "\n", "\n", "train_dataloaders", "[", "\"ner\"", "]", "=", "self", ".", "get_ssl_train_dataloaders", "(", "\n", "metadata", "=", "metadata", ",", "k", "=", "k", ",", "split_ratio", "=", "split_ratio", "\n", ")", "\n", "train_dataloader_len", "=", "len", "(", "train_dataloaders", "[", "\"ner\"", "]", "[", "\"sup\"", "]", "[", "0", "]", ")", "\n", "num_train_examples", "=", "len", "(", "train_dataloaders", "[", "\"ner\"", "]", "[", "\"sup\"", "]", "[", "0", "]", ".", "dataset", ")", "\n", "\n", "if", "lm", ":", "\n", "            ", "train_dataloaders", "[", "\"lm\"", "]", "=", "self", ".", "get_clm_train_dataloader", "(", "metadata", ",", "lm_dataset", ")", "\n", "\n", "", "return", "train_dataloaders", ",", "train_dataloader_len", ",", "num_train_examples", "\n", "", "", ""]], "home.repos.pwc.inspect_result.suamin_t2ner.data.single_dataset.SimpleData.__init__": [[9, 12], ["base.BaseData.__init__", "single_dataset.SimpleData.collect_metadata"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.annotate.annotate.SentAnnObj.__init__", "home.repos.pwc.inspect_result.suamin_t2ner.data.multi_dataset.MultiData.collect_metadata"], ["    ", "def", "__init__", "(", "self", ",", "preprocessed_data_dir", ",", "train_dataset_metadata", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "preprocessed_data_dir", ",", "**", "kwargs", ")", "\n", "self", ".", "metadata", "=", "self", ".", "collect_metadata", "(", "train_dataset_metadata", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.data.single_dataset.SimpleData.collect_metadata": [[13, 32], ["single_dataset.SimpleData.get_label_list", "single_dataset.SimpleData.get_type_list", "unique_name.split", "train_dataset_metadata[].replace", "len", "len"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.data.base.BaseData.get_label_list", "home.repos.pwc.inspect_result.suamin_t2ner.data.base.BaseData.get_type_list"], ["", "def", "collect_metadata", "(", "self", ",", "train_dataset_metadata", ")", ":", "\n", "        ", "unique_name", "=", "train_dataset_metadata", "[", "\"name\"", "]", "\n", "label_list", "=", "self", ".", "get_label_list", "(", "unique_name", ")", "\n", "type_list", "=", "self", ".", "get_type_list", "(", "unique_name", ")", "\n", "lang", ",", "domain", ",", "source", "=", "unique_name", ".", "split", "(", "\".\"", ")", "\n", "\n", "metadata", "=", "{", "\n", "\"name\"", ":", "train_dataset_metadata", "[", "\"name\"", "]", ".", "replace", "(", "\".\"", ",", "\"_\"", ")", ",", "\n", "\"lang\"", ":", "lang", ",", "\n", "\"domain\"", ":", "domain", ",", "\n", "\"source\"", ":", "source", ",", "\n", "\"label_list\"", ":", "label_list", ",", "\n", "\"num_labels\"", ":", "len", "(", "label_list", ")", ",", "\n", "\"type_list\"", ":", "type_list", ",", "\n", "\"num_types\"", ":", "len", "(", "type_list", ")", ",", "\n", "\"metadata\"", ":", "train_dataset_metadata", "\n", "}", "\n", "\n", "return", "metadata", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.data.single_dataset.SimpleData.lang": [[33, 36], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "lang", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "metadata", "[", "\"lang\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.data.single_dataset.SimpleData.domain": [[37, 40], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "domain", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "metadata", "[", "\"domain\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.data.single_dataset.SimpleData.get_train_data": [[41, 53], ["dict", "single_dataset.SimpleData.get_train_dataloader", "len", "len", "single_dataset.SimpleData.get_clm_train_dataloader"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.data.multi_dataset.MultiData.get_train_dataloader", "home.repos.pwc.inspect_result.suamin_t2ner.data.base.BaseData.get_clm_train_dataloader"], ["", "def", "get_train_data", "(", "self", ",", "lm", "=", "False", ",", "lm_dataset", "=", "None", ")", ":", "\n", "        ", "train_dataloaders", "=", "dict", "(", ")", "\n", "metadata", "=", "self", ".", "metadata", "[", "\"metadata\"", "]", "\n", "\n", "train_dataloaders", "[", "\"ner\"", "]", "=", "self", ".", "get_train_dataloader", "(", "metadata", ")", "\n", "train_dataloader_len", "=", "len", "(", "train_dataloaders", "[", "\"ner\"", "]", ")", "\n", "num_train_examples", "=", "len", "(", "train_dataloaders", "[", "\"ner\"", "]", ".", "dataset", ")", "\n", "\n", "if", "lm", ":", "\n", "            ", "train_dataloaders", "[", "\"lm\"", "]", "=", "self", ".", "get_clm_train_dataloader", "(", "metadata", ",", "lm_dataset", ")", "\n", "\n", "", "return", "train_dataloaders", ",", "train_dataloader_len", ",", "num_train_examples", "\n", "", "", ""]], "home.repos.pwc.inspect_result.suamin_t2ner.data.multi_dataset.MultiData.__init__": [[14, 17], ["base.BaseData.__init__", "multi_dataset.MultiData.collect_metadata"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.annotate.annotate.SentAnnObj.__init__", "home.repos.pwc.inspect_result.suamin_t2ner.data.multi_dataset.MultiData.collect_metadata"], ["    ", "def", "__init__", "(", "self", ",", "preprocessed_data_dir", ",", "train_datasets_metadata_list", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "preprocessed_data_dir", ",", "**", "kwargs", ")", "\n", "self", ".", "metadata", "=", "self", ".", "collect_metadata", "(", "train_datasets_metadata_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.data.multi_dataset.MultiData.collect_metadata": [[18, 76], ["sorted", "zip", "sorted", "len", "sorted", "len", "sorted", "len", "dict", "set", "list", "list", "list", "list", "multi_dataset.MultiData.get_label_list", "multi_dataset.MultiData.get_type_list", "unique_name.split", "set.update", "sorted", "set", "set", "set", "set", "unique_name.replace", "len", "len", "list", "dataset.split", "ValueError"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.data.base.BaseData.get_label_list", "home.repos.pwc.inspect_result.suamin_t2ner.data.base.BaseData.get_type_list"], ["", "def", "collect_metadata", "(", "self", ",", "train_datasets_metadata_list", ")", ":", "\n", "        ", "unique_names", "=", "sorted", "(", "list", "(", "set", "(", "[", "metadata", "[", "\"name\"", "]", "for", "metadata", "in", "train_datasets_metadata_list", "]", ")", ")", ")", "\n", "\n", "langs", ",", "domains", ",", "sources", "=", "zip", "(", "*", "[", "dataset", ".", "split", "(", "\".\"", ")", "for", "dataset", "in", "unique_names", "]", ")", "\n", "langs", "=", "sorted", "(", "list", "(", "set", "(", "langs", ")", ")", ")", "\n", "num_langs", "=", "len", "(", "langs", ")", "\n", "\n", "domains", "=", "sorted", "(", "list", "(", "set", "(", "domains", ")", ")", ")", "\n", "num_domains", "=", "len", "(", "domains", ")", "\n", "\n", "sources", "=", "sorted", "(", "list", "(", "set", "(", "sources", ")", ")", ")", "\n", "num_sources", "=", "len", "(", "sources", ")", "\n", "\n", "# Identify mode (S: single, M: multi, L: lang, D: domain)", "\n", "if", "num_langs", "==", "1", "and", "num_domains", "==", "1", ":", "\n", "            ", "mode", "=", "\"SLSD\"", "\n", "", "elif", "num_langs", "==", "1", "and", "num_domains", ">", "1", ":", "\n", "            ", "mode", "=", "\"SLMD\"", "\n", "", "elif", "num_langs", ">", "1", "and", "num_domains", "==", "1", ":", "\n", "            ", "mode", "=", "\"MLSD\"", "\n", "", "elif", "num_langs", ">", "1", "and", "num_domains", ">", "1", ":", "\n", "            ", "mode", "=", "\"MLMD\"", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid mode for multi-dataset.\"", ")", "\n", "\n", "", "dataset_info", "=", "dict", "(", ")", "\n", "all_labels", "=", "set", "(", ")", "\n", "for", "metadata", "in", "train_datasets_metadata_list", ":", "\n", "            ", "unique_name", "=", "metadata", "[", "\"name\"", "]", "\n", "# possible duplication", "\n", "if", "unique_name", "in", "dataset_info", ":", "\n", "                ", "continue", "\n", "", "label_list", "=", "self", ".", "get_label_list", "(", "unique_name", ")", "\n", "type_list", "=", "self", ".", "get_type_list", "(", "unique_name", ")", "\n", "lang", ",", "domain", ",", "source", "=", "unique_name", ".", "split", "(", "\".\"", ")", "\n", "dataset_info", "[", "unique_name", "]", "=", "{", "\n", "\"name\"", ":", "unique_name", ".", "replace", "(", "\".\"", ",", "\"_\"", ")", ",", "\n", "\"domain\"", ":", "domain", ",", "\n", "\"lang\"", ":", "lang", ",", "\n", "\"source\"", ":", "source", ",", "\n", "\"label_list\"", ":", "label_list", ",", "\n", "\"num_labels\"", ":", "len", "(", "label_list", ")", ",", "\n", "\"type_list\"", ":", "type_list", ",", "\n", "\"num_types\"", ":", "len", "(", "type_list", ")", ",", "\n", "\"metadata\"", ":", "metadata", "\n", "}", "\n", "all_labels", ".", "update", "(", "label_list", ")", "\n", "\n", "", "metadata", "=", "{", "\n", "\"mode\"", ":", "mode", ",", "\n", "\"langs\"", ":", "langs", ",", "\n", "\"domains\"", ":", "domains", ",", "\n", "\"sources\"", ":", "sources", ",", "\n", "\"dataset_info\"", ":", "dataset_info", ",", "\n", "\"all_labels\"", ":", "sorted", "(", "list", "(", "all_labels", ")", ")", "\n", "}", "\n", "\n", "return", "metadata", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.data.multi_dataset.MultiData.type": [[77, 80], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "type", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "metadata", "[", "\"mode\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.data.multi_dataset.MultiData.langs": [[81, 84], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "langs", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "metadata", "[", "\"langs\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.data.multi_dataset.MultiData.num_langs": [[85, 88], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_langs", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "langs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.data.multi_dataset.MultiData.lang2id": [[89, 92], ["enumerate"], "methods", ["None"], ["", "@", "property", "\n", "def", "lang2id", "(", "self", ")", ":", "\n", "        ", "return", "{", "lang", ":", "idx", "for", "idx", ",", "lang", "in", "enumerate", "(", "self", ".", "langs", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.data.multi_dataset.MultiData.id2lang": [[93, 96], ["multi_dataset.MultiData.lang2id.items"], "methods", ["None"], ["", "@", "property", "\n", "def", "id2lang", "(", "self", ")", ":", "\n", "        ", "return", "{", "idx", ":", "lang", "for", "lang", ",", "idx", "in", "self", ".", "lang2id", ".", "items", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.data.multi_dataset.MultiData.domains": [[97, 100], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "domains", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "metadata", "[", "\"domains\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.data.multi_dataset.MultiData.num_domains": [[101, 104], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_domains", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "domains", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.data.multi_dataset.MultiData.domain2id": [[105, 108], ["enumerate"], "methods", ["None"], ["", "@", "property", "\n", "def", "domain2id", "(", "self", ")", ":", "\n", "        ", "return", "{", "domain", ":", "idx", "for", "idx", ",", "domain", "in", "enumerate", "(", "self", ".", "domains", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.data.multi_dataset.MultiData.id2domain": [[109, 112], ["multi_dataset.MultiData.domain2id.items"], "methods", ["None"], ["", "@", "property", "\n", "def", "id2domain", "(", "self", ")", ":", "\n", "        ", "return", "{", "idx", ":", "domain", "for", "domain", ",", "idx", "in", "self", ".", "domain2id", ".", "items", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.data.multi_dataset.MultiData.sources": [[113, 116], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "sources", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "metadata", "[", "\"sources\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.data.multi_dataset.MultiData.num_sources": [[117, 120], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_sources", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "sources", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.data.multi_dataset.MultiData.shared_labels": [[121, 124], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "shared_labels", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "metadata", "[", "\"all_labels\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.data.multi_dataset.MultiData.total_shared_labels": [[125, 128], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "total_shared_labels", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "shared_labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.data.multi_dataset.MultiData.shared_label2id": [[129, 132], ["enumerate", "sorted"], "methods", ["None"], ["", "@", "property", "\n", "def", "shared_label2id", "(", "self", ")", ":", "\n", "        ", "return", "{", "label", ":", "idx", "for", "idx", ",", "label", "in", "enumerate", "(", "sorted", "(", "self", ".", "shared_labels", ")", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.data.multi_dataset.MultiData.shared_id2label": [[133, 136], ["multi_dataset.MultiData.shared_label2id.items"], "methods", ["None"], ["", "@", "property", "\n", "def", "shared_id2label", "(", "self", ")", ":", "\n", "        ", "return", "{", "idx", ":", "label", "for", "label", ",", "idx", "in", "self", ".", "shared_label2id", ".", "items", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.data.multi_dataset.MultiData.__getitem__": [[137, 139], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "unique_name", ")", ":", "\n", "        ", "return", "self", ".", "metadata", "[", "\"dataset_info\"", "]", "[", "unique_name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.data.multi_dataset.MultiData.__iter__": [[140, 143], ["multi_dataset.MultiData.metadata[].items"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "for", "unique_name", ",", "dataset_info", "in", "self", ".", "metadata", "[", "\"dataset_info\"", "]", ".", "items", "(", ")", ":", "\n", "            ", "yield", "unique_name", ",", "dataset_info", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.data.multi_dataset.MultiData.labels_str_to_datasets": [[144, 154], ["collections.defaultdict", "labels_str_to_datasets[].append"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "labels_str_to_datasets", "(", "self", ")", ":", "\n", "        ", "labels_str_to_datasets", "=", "collections", ".", "defaultdict", "(", "list", ")", "\n", "\n", "for", "unique_name", ",", "dataset_info", "in", "self", ":", "\n", "            ", "label_list", "=", "dataset_info", "[", "\"label_list\"", "]", "\n", "labels_str", "=", "\"\\t\"", ".", "join", "(", "label_list", ")", "\n", "labels_str_to_datasets", "[", "labels_str", "]", ".", "append", "(", "unique_name", ")", "\n", "\n", "", "return", "labels_str_to_datasets", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.data.multi_dataset.MultiData.dataset_to_labels_str": [[155, 161], ["multi_dataset.MultiData.labels_str_to_datasets.items"], "methods", ["None"], ["", "@", "property", "\n", "def", "dataset_to_labels_str", "(", "self", ")", ":", "\n", "        ", "return", "{", "\n", "unique_name", ":", "labels_str", "\n", "for", "labels_str", ",", "unique_names", "in", "self", ".", "labels_str_to_datasets", ".", "items", "(", ")", "\n", "for", "unique_name", "in", "unique_names", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.data.multi_dataset.MultiData.register_training_datasets_with_labels": [[163, 177], ["set", "list", "ValueError", "list.append"], "methods", ["None"], ["", "def", "register_training_datasets_with_labels", "(", "self", ",", "dataset_names", ")", ":", "\n", "        ", "dataset_names", "=", "set", "(", "dataset_names", ")", "\n", "train_datasets_names_with_labels", "=", "list", "(", ")", "\n", "\n", "for", "unique_name", ",", "_", "in", "self", ":", "\n", "            ", "if", "unique_name", "in", "dataset_names", ":", "\n", "                ", "train_datasets_names_with_labels", ".", "append", "(", "unique_name", ")", "\n", "\n", "", "", "if", "not", "train_datasets_names_with_labels", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Could not find any training dataset in the original collection.\"", "\n", ")", "\n", "\n", "", "self", ".", "train_datasets_names_with_labels", "=", "train_datasets_names_with_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.data.multi_dataset.MultiData.register_training_datasets_without_labels": [[178, 192], ["set", "list", "ValueError", "list.append"], "methods", ["None"], ["", "def", "register_training_datasets_without_labels", "(", "self", ",", "dataset_names", ")", ":", "\n", "        ", "dataset_names", "=", "set", "(", "dataset_names", ")", "\n", "train_datasets_names_without_labels", "=", "list", "(", ")", "\n", "\n", "for", "unique_name", ",", "_", "in", "self", ":", "\n", "            ", "if", "unique_name", "in", "dataset_names", ":", "\n", "                ", "train_datasets_names_without_labels", ".", "append", "(", "unique_name", ")", "\n", "\n", "", "", "if", "not", "train_datasets_names_without_labels", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Could not find any training dataset in the original collection.\"", "\n", ")", "\n", "\n", "", "self", ".", "train_datasets_names_without_labels", "=", "train_datasets_names_without_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.data.multi_dataset.MultiData._load_datasets": [[193, 202], ["dict", "multi_dataset.MultiData.get_datasets", "[].get", "ner.BaseDataLoader.trim_dataset_", "list"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.data.base.BaseData.get_datasets", "home.repos.pwc.inspect_result.suamin_t2ner.data.ner.BaseDataLoader.trim_dataset_"], ["", "def", "_load_datasets", "(", "self", ",", "dataset_names", ",", "split", ")", ":", "\n", "        ", "unique_name2train_dataset", "=", "dict", "(", ")", "\n", "for", "unique_name", "in", "dataset_names", ":", "\n", "            ", "datasets", "=", "self", ".", "get_datasets", "(", "unique_name", "=", "unique_name", ",", "splits", "=", "(", "split", ",", ")", ")", "\n", "dataset", "=", "list", "(", "datasets", ")", "[", "0", "]", "[", "1", "]", "\n", "max_examples", "=", "self", "[", "unique_name", "]", "[", "\"metadata\"", "]", ".", "get", "(", "\"max_examples\"", ",", "-", "1", ")", "\n", "ner", ".", "BaseDataLoader", ".", "trim_dataset_", "(", "dataset", ",", "max_examples", "=", "max_examples", ")", "\n", "unique_name2train_dataset", "[", "unique_name", "]", "=", "dataset", "\n", "", "return", "unique_name2train_dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.data.multi_dataset.MultiData.train_datasets_labeled": [[203, 206], ["multi_dataset.MultiData._load_datasets"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.data.multi_dataset.MultiData._load_datasets"], ["", "@", "property", "\n", "def", "train_datasets_labeled", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_load_datasets", "(", "self", ".", "train_datasets_names_with_labels", ",", "\"train\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.data.multi_dataset.MultiData.train_datasets_unlabeled": [[207, 210], ["multi_dataset.MultiData._load_datasets"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.data.multi_dataset.MultiData._load_datasets"], ["", "@", "property", "\n", "def", "train_datasets_unlabeled", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_load_datasets", "(", "self", ".", "train_datasets_names_without_labels", ",", "\"train\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.data.multi_dataset.MultiData.heads_info": [[211, 227], ["dict", "sorted", "list", "enumerate", "str", "dataset_to_labels_str.values"], "methods", ["None"], ["", "@", "property", "\n", "def", "heads_info", "(", "self", ")", ":", "\n", "        ", "dataset_to_head_info", "=", "dict", "(", ")", "\n", "dataset_to_labels_str", "=", "self", ".", "dataset_to_labels_str", "\n", "labels_strs", "=", "sorted", "(", "list", "(", "{", "labels_str", "for", "labels_str", "in", "dataset_to_labels_str", ".", "values", "(", ")", "}", ")", ")", "\n", "labels_str2id", "=", "{", "labels_str", ":", "idx", "for", "idx", ",", "labels_str", "in", "enumerate", "(", "labels_strs", ")", "}", "\n", "\n", "for", "unique_name", ",", "dataset_info", "in", "self", ":", "\n", "            ", "dataset_to_head_info", "[", "unique_name", "]", "=", "{", "\n", "\"private_head_name\"", ":", "dataset_info", "[", "\"name\"", "]", ",", "\n", "\"shared_head_name\"", ":", "str", "(", "labels_str2id", "[", "dataset_to_labels_str", "[", "unique_name", "]", "]", ")", ",", "\n", "\"num_labels\"", ":", "dataset_info", "[", "\"num_labels\"", "]", ",", "\n", "\"num_types\"", ":", "dataset_info", "[", "\"num_types\"", "]", "\n", "}", "\n", "\n", "", "return", "dataset_to_head_info", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.data.multi_dataset.MultiData.convert_to_shared_label_ids": [[228, 234], ["ner_dataset.decode_label_ids", "isinstance"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.data.ner.NERDataset.decode_label_ids"], ["", "def", "convert_to_shared_label_ids", "(", "self", ",", "shared_label2id", ",", "label_ids", ",", "ner_dataset", ")", ":", "\n", "# Transform `label_ids` of a given dataset to `shared_label_ids`", "\n", "        ", "labels", "=", "ner_dataset", ".", "decode_label_ids", "(", "label_ids", ")", "\n", "# l == int implies pad id (e.g. -100), otherwise label string", "\n", "shared_label_ids", "=", "[", "shared_label2id", "[", "l", "]", "if", "isinstance", "(", "l", ",", "str", ")", "else", "l", "for", "l", "in", "labels", "]", "\n", "return", "shared_label_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.data.multi_dataset.MultiData._unioned_datasets": [[235, 263], ["list", "list", "list", "list", "random.shuffle", "ner.MultiNERDataset", "dataset.add_metadata", "list.extend", "list.extend", "list.extend", "zip", "multi_dataset.MultiData.convert_to_shared_label_ids", "len", "len"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.data.ner.NERDataset.add_metadata", "home.repos.pwc.inspect_result.suamin_t2ner.data.multi_dataset.MultiData.convert_to_shared_label_ids"], ["", "def", "_unioned_datasets", "(", "self", ",", "unique_name2train_dataset", ")", ":", "\n", "        ", "features", "=", "list", "(", ")", "\n", "private_head_names", "=", "list", "(", ")", "\n", "shared_head_names", "=", "list", "(", ")", "\n", "heads_info", "=", "self", ".", "heads_info", "\n", "shared_label2id", "=", "self", ".", "shared_label2id", "\n", "\n", "for", "unique_name", "in", "unique_name2train_dataset", ":", "\n", "            ", "dataset_info", "=", "self", "[", "unique_name", "]", "\n", "dataset", "=", "unique_name2train_dataset", "[", "unique_name", "]", "\n", "\n", "# Add shared label ids", "\n", "for", "f", "in", "dataset", ".", "features", ":", "\n", "                ", "f", ".", "shared_label_ids", "=", "self", ".", "convert_to_shared_label_ids", "(", "\n", "shared_label2id", ",", "f", ".", "label_ids", ",", "dataset", "\n", ")", "\n", "\n", "", "lang_id", "=", "self", ".", "lang2id", "[", "dataset_info", "[", "\"lang\"", "]", "]", "\n", "domain_id", "=", "self", ".", "domain2id", "[", "dataset_info", "[", "\"domain\"", "]", "]", "\n", "dataset", ".", "add_metadata", "(", "lang_id", ",", "domain_id", ")", "\n", "features", ".", "extend", "(", "dataset", ".", "features", ")", "\n", "private_head_names", ".", "extend", "(", "[", "heads_info", "[", "unique_name", "]", "[", "\"private_head_name\"", "]", "]", "*", "len", "(", "dataset", ")", ")", "\n", "shared_head_names", ".", "extend", "(", "[", "heads_info", "[", "unique_name", "]", "[", "\"shared_head_name\"", "]", "]", "*", "len", "(", "dataset", ")", ")", "\n", "\n", "# We need to pass this information here to make ``collate_fn`` independent", "\n", "", "features", "=", "list", "(", "zip", "(", "features", ",", "private_head_names", ",", "shared_head_names", ")", ")", "\n", "random", ".", "shuffle", "(", "features", ")", "\n", "return", "ner", ".", "MultiNERDataset", "(", "features", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.data.multi_dataset.MultiData.train_metadata": [[268, 271], ["None"], "methods", ["None"], ["", "@", "train_metadata", ".", "setter", "\n", "def", "train_metadata", "(", "self", ",", "metadata", ")", ":", "\n", "        ", "self", ".", "_train_metadata", "=", "metadata", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.data.multi_dataset.MultiData.get_train_dataloader": [[272, 289], ["metadata.get", "ner.MultiNERDataLoader.train_dataloader", "multi_dataset.MultiData._unioned_datasets", "metadata.get", "metadata.get", "metadata.get", "metadata.get"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.data.ner.MultiNERDataLoader.train_dataloader", "home.repos.pwc.inspect_result.suamin_t2ner.data.multi_dataset.MultiData._unioned_datasets"], ["", "def", "get_train_dataloader", "(", "self", ",", "metadata", ")", ":", "\n", "        ", "mix_method", "=", "metadata", ".", "get", "(", "\"mix_method\"", ",", "\"union\"", ")", "\n", "if", "mix_method", "==", "\"union\"", ":", "\n", "            ", "dataset", "=", "self", ".", "_unioned_datasets", "(", "self", ".", "train_datasets_labeled", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "dataloader", "=", "ner", ".", "MultiNERDataLoader", ".", "train_dataloader", "(", "\n", "dataset", ",", "\n", "batch_size", "=", "self", ".", "train_batch_size", ",", "\n", "drop_last", "=", "metadata", ".", "get", "(", "\"drop_last\"", ",", "False", ")", ",", "\n", "max_examples", "=", "metadata", ".", "get", "(", "\"max_examples\"", ",", "-", "1", ")", ",", "\n", "forever", "=", "metadata", ".", "get", "(", "\"forever\"", ",", "False", ")", ",", "\n", "private", "=", "metadata", ".", "get", "(", "\"private\"", ",", "False", ")", "\n", ")", "\n", "\n", "return", "dataloader", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.data.multi_dataset.MultiData.get_train_data": [[290, 304], ["dict", "multi_dataset.MultiData.get_train_dataloader", "len", "len", "multi_dataset.MultiData.get_clm_train_dataloader"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.data.multi_dataset.MultiData.get_train_dataloader", "home.repos.pwc.inspect_result.suamin_t2ner.data.base.BaseData.get_clm_train_dataloader"], ["", "def", "get_train_data", "(", "self", ",", "lm", "=", "False", ",", "lm_dataset", "=", "None", ")", ":", "\n", "        ", "train_dataloaders", "=", "dict", "(", ")", "\n", "metadata", "=", "self", ".", "train_metadata", "\n", "\n", "train_dataloaders", "[", "\"ner\"", "]", "=", "self", ".", "get_train_dataloader", "(", "metadata", ")", "\n", "train_dataloader_len", "=", "len", "(", "train_dataloaders", "[", "\"ner\"", "]", ")", "\n", "num_train_examples", "=", "len", "(", "train_dataloaders", "[", "\"ner\"", "]", ".", "dataset", ")", "\n", "\n", "if", "lm", ":", "\n", "            ", "train_dataloaders", "[", "\"lm\"", "]", "=", "self", ".", "get_clm_train_dataloader", "(", "\n", "lm_dataset", "=", "train_dataloaders", "[", "\"ner\"", "]", ".", "dataset", "if", "lm_dataset", "is", "None", "else", "lm_dataset", "\n", ")", "\n", "\n", "", "return", "train_dataloaders", ",", "train_dataloader_len", ",", "num_train_examples", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.data.multi_dataset.MultiData.get_eval_and_test_datasets": [[305, 327], ["dict", "set", "dict", "dict", "multi_dataset.MultiData.get_datasets", "multi_dataset.MultiData.convert_to_shared_label_ids"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.data.base.BaseData.get_datasets", "home.repos.pwc.inspect_result.suamin_t2ner.data.multi_dataset.MultiData.convert_to_shared_label_ids"], ["", "def", "get_eval_and_test_datasets", "(", "self", ",", "eval_datasets", ")", ":", "\n", "        ", "split2dataset", "=", "dict", "(", "dev", "=", "dict", "(", ")", ",", "test", "=", "dict", "(", ")", ")", "\n", "shared_label2id", "=", "self", ".", "shared_label2id", "\n", "\n", "for", "eval_unique_name", "in", "set", "(", "eval_datasets", ")", ":", "\n", "            ", "splits", "=", "(", "\"dev\"", ",", "\"test\"", ")", "\n", "split2dataset_i", "=", "{", "split", ":", "dataset", "\n", "for", "split", ",", "dataset", "in", "self", ".", "get_datasets", "(", "eval_unique_name", ",", "splits", ")", "\n", "}", "\n", "for", "split", "in", "splits", ":", "\n", "                ", "if", "split", "not", "in", "split2dataset_i", ":", "\n", "                    ", "continue", "\n", "", "dataset", "=", "split2dataset_i", "[", "split", "]", "\n", "# Add shared label ids", "\n", "for", "f", "in", "dataset", ".", "features", ":", "\n", "                    ", "f", ".", "shared_label_ids", "=", "self", ".", "convert_to_shared_label_ids", "(", "\n", "shared_label2id", ",", "f", ".", "label_ids", ",", "dataset", "\n", ")", "\n", "\n", "", "split2dataset", "[", "split", "]", "[", "eval_unique_name", "]", "=", "dataset", "\n", "\n", "", "", "return", "split2dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.data.multi_dataset.MultiData.get_eval_and_test_dataloaders": [[328, 412], ["kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "multi_dataset.MultiData.get_eval_and_test_datasets", "dict", "dict", "list", "zip", "dataset.id2label.items", "sorted", "RuntimeError", "ner.MultiNERDataLoader.dev_dataloader", "list", "len", "len", "ner.MultiNERDataLoader.shared_as_single_dataloader", "ner.MultiNERDataLoader.dev_dataloader", "label2id.keys", "ner.MultiNERDataLoader.shared_as_single_dataloader"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.data.multi_dataset.MultiData.get_eval_and_test_datasets", "home.repos.pwc.inspect_result.suamin_t2ner.data.ner.MultiNERDataLoader.dev_dataloader", "home.repos.pwc.inspect_result.suamin_t2ner.data.ner.MultiNERDataLoader.shared_as_single_dataloader", "home.repos.pwc.inspect_result.suamin_t2ner.data.ner.MultiNERDataLoader.dev_dataloader", "home.repos.pwc.inspect_result.suamin_t2ner.data.ner.MultiNERDataLoader.shared_as_single_dataloader"], ["", "def", "get_eval_and_test_dataloaders", "(", "self", ",", "eval_datasets", ",", "**", "kwargs", ")", ":", "\n", "        ", "do_eval", "=", "kwargs", ".", "get", "(", "\"do_eval\"", ",", "True", ")", "\n", "do_predict", "=", "kwargs", ".", "get", "(", "\"do_predict\"", ",", "False", ")", "\n", "all_shared", "=", "kwargs", ".", "get", "(", "\"all_shared\"", ",", "False", ")", "\n", "private", "=", "kwargs", ".", "get", "(", "\"private\"", ",", "False", ")", "\n", "\n", "split2dataset", "=", "self", ".", "get_eval_and_test_datasets", "(", "eval_datasets", ")", "\n", "eval_data", "=", "dict", "(", ")", "\n", "test_data", "=", "dict", "(", ")", "\n", "heads_info", "=", "self", ".", "heads_info", "\n", "labels_str_to_datasets", "=", "self", ".", "labels_str_to_datasets", "\n", "\n", "for", "split", "in", "split2dataset", ":", "\n", "            ", "for", "eval_unique_name", "in", "split2dataset", "[", "split", "]", ":", "\n", "                ", "dataset", "=", "split2dataset", "[", "split", "]", "[", "eval_unique_name", "]", "\n", "add_dataset_for_shared_only", "=", "False", "\n", "\n", "# Find the prediction layer for eval set and zip with the features", "\n", "label2id", "=", "{", "label", ":", "idx", "for", "idx", ",", "label", "in", "dataset", ".", "id2label", ".", "items", "(", ")", "}", "\n", "try", ":", "\n", "                    ", "labels_str", "=", "\"\\t\"", ".", "join", "(", "sorted", "(", "list", "(", "label2id", ".", "keys", "(", ")", ")", ")", ")", "\n", "same_labels_datasets", "=", "labels_str_to_datasets", "[", "labels_str", "]", "\n", "", "except", "KeyError", ":", "\n", "                    ", "raise", "RuntimeError", "(", "\n", "\"{}-{} dataset does not have label set seen in training.\"", "\n", ".", "format", "(", "split", ",", "eval_unique_name", ")", "\n", ")", "\n", "", "else", ":", "\n", "                    ", "if", "not", "private", ":", "\n", "# When same prediction layer is used in multi-dataset", "\n", "# setting with same labels, we can take any dataset", "\n", "# name as they have same layer so the index [0]", "\n", "                        ", "head_info", "=", "heads_info", "[", "same_labels_datasets", "[", "0", "]", "]", "\n", "", "else", ":", "\n", "                        ", "zero_shot", "=", "eval_unique_name", "not", "in", "heads_info", "\n", "if", "zero_shot", ":", "\n", "# When we use different layers for each dataset, despite", "\n", "# having same label set and we come across a zero-shot dataset ", "\n", "                            ", "head_info", "=", "None", "\n", "", "else", ":", "\n", "                            ", "head_info", "=", "heads_info", "[", "eval_unique_name", "]", "\n", "\n", "", "", "", "if", "head_info", "is", "None", ":", "\n", "                    ", "private_head_name", "=", "\"unk\"", "\n", "shared_head_name", "=", "None", "\n", "", "else", ":", "\n", "                    ", "private_head_name", "=", "head_info", "[", "\"private_head_name\"", "]", "\n", "shared_head_name", "=", "head_info", "[", "\"shared_head_name\"", "]", "\n", "\n", "", "dataset", ".", "features", "=", "list", "(", "zip", "(", "\n", "dataset", ".", "features", ",", "\n", "[", "private_head_name", "]", "*", "len", "(", "dataset", ")", ",", "\n", "[", "shared_head_name", "]", "*", "len", "(", "dataset", ")", "\n", ")", ")", "\n", "\n", "if", "split", "==", "\"dev\"", "and", "do_eval", ":", "\n", "                    ", "eval_data", "[", "eval_unique_name", "]", "=", "(", "\n", "ner", ".", "MultiNERDataLoader", "\n", ".", "dev_dataloader", "(", "dataset", ",", "self", ".", "eval_batch_size", ",", "private", "=", "private", ")", ",", "\n", "dataset", ".", "id2label", "\n", ")", "\n", "\n", "if", "all_shared", ":", "\n", "                        ", "eval_data", "[", "eval_unique_name", "+", "\".shared\"", "]", "=", "(", "\n", "ner", ".", "MultiNERDataLoader", "\n", ".", "shared_as_single_dataloader", "(", "dataset", ")", ",", "\n", "self", ".", "shared_id2label", "\n", ")", "\n", "\n", "", "", "elif", "split", "==", "\"test\"", "and", "do_predict", ":", "\n", "                    ", "test_data", "[", "eval_unique_name", "]", "=", "(", "\n", "ner", ".", "MultiNERDataLoader", "\n", ".", "dev_dataloader", "(", "dataset", ",", "self", ".", "eval_batch_size", ",", "private", "=", "private", ")", ",", "\n", "dataset", ".", "id2label", "\n", ")", "\n", "\n", "if", "all_shared", ":", "\n", "                        ", "test_data", "[", "eval_unique_name", "+", "\".shared\"", "]", "=", "(", "\n", "ner", ".", "MultiNERDataLoader", "\n", ".", "shared_as_single_dataloader", "(", "dataset", ")", ",", "\n", "self", ".", "shared_id2label", "\n", ")", "\n", "\n", "", "", "", "", "return", "eval_data", ",", "test_data", "\n", "", "", ""]], "home.repos.pwc.inspect_result.suamin_t2ner.data.utils.TokenizerFeatures.__init__": [[18, 35], ["dict", "transformers.AutoTokenizer.from_pretrained", "dict.get", "dict.get", "dict.get", "dict.get"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.models.multi_token_classification.AutoModelForMultiTokenClassification.from_pretrained"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "# By default we consider using mBERT", "\n", "        ", "kwargs", "=", "dict", "(", "\n", "tokenizer_name_or_path", "=", "kwargs", ".", "get", "(", "\n", "\"tokenizer_name_or_path\"", ",", "\n", "\"bert-base-multilingual-cased\"", "\n", ")", ",", "\n", "do_lower_case", "=", "kwargs", ".", "get", "(", "\"do_lower_case\"", ",", "False", ")", ",", "\n", "max_seq_length", "=", "kwargs", ".", "get", "(", "\"max_seq_length\"", ",", "128", ")", ",", "\n", "cache_dir", "=", "kwargs", ".", "get", "(", "\"cache_dir\"", ",", "None", ")", "\n", ")", "\n", "self", ".", "tokenizer", "=", "AutoTokenizer", ".", "from_pretrained", "(", "\n", "kwargs", "[", "\"tokenizer_name_or_path\"", "]", ",", "\n", "do_lower_case", "=", "kwargs", "[", "\"do_lower_case\"", "]", ",", "\n", "cache_dir", "=", "kwargs", "[", "\"cache_dir\"", "]", "\n", ")", "\n", "self", ".", "kwargs", "=", "kwargs", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.data.utils.TokenizerFeatures.pad_token": [[36, 39], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "pad_token", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "tokenizer", ".", "pad_token", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.data.utils.TokenizerFeatures.pad_token_input_id": [[40, 43], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "pad_token_input_id", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "tokenizer", ".", "pad_token_id", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.data.utils.TokenizerFeatures.pad_token_label_id": [[44, 47], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "pad_token_label_id", "(", "self", ")", ":", "\n", "        ", "return", "IGNORE_INDEX", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.data.utils.TokenizerFeatures.max_seq_length": [[48, 51], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "max_seq_length", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "kwargs", "[", "\"max_seq_length\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.data.utils.TokenizerFeatures.convert_example_to_feature": [[52, 55], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "convert_example_to_feature", "(", "self", ",", "example", ",", "verbose", "=", "False", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.data.utils.TokenizerFeatures.convert_examples_to_features": [[56, 67], ["enumerate", "features.append", "logger.info", "utils.TokenizerFeatures.convert_example_to_feature", "len"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.data.utils.TokenizerFeatures.convert_example_to_feature"], ["", "def", "convert_examples_to_features", "(", "self", ",", "examples", ")", ":", "\n", "        ", "features", "=", "[", "]", "\n", "for", "(", "ex_index", ",", "example", ")", "in", "enumerate", "(", "examples", ")", ":", "\n", "            ", "if", "ex_index", "%", "10000", "==", "0", ":", "\n", "                ", "logger", ".", "info", "(", "\"Writing example %d of %d\"", ",", "ex_index", ",", "len", "(", "examples", ")", ")", "\n", "", "if", "ex_index", "<", "5", ":", "\n", "                ", "verbose", "=", "True", "\n", "", "else", ":", "\n", "                ", "verbose", "=", "False", "\n", "", "features", ".", "append", "(", "self", ".", "convert_example_to_feature", "(", "example", ",", "verbose", ")", ")", "\n", "", "return", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.data.utils.TokenizerFeatures.save_features": [[68, 72], ["logger.info", "torch.save", "torch.save", "torch.save", "torch.save"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "save_features", "(", "features", ",", "cached_features_file", ")", ":", "\n", "        ", "logger", ".", "info", "(", "\"Saving features into cached file {}\"", ".", "format", "(", "cached_features_file", ")", ")", "\n", "torch", ".", "save", "(", "features", ",", "cached_features_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.data.utils.TokenizerFeatures.load_features": [[73, 78], ["logger.info", "torch.load", "torch.load", "torch.load", "torch.load"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "load_features", "(", "cached_features_file", ")", ":", "\n", "        ", "logger", ".", "info", "(", "\"Loading features from cached file {}\"", ".", "format", "(", "cached_features_file", ")", ")", "\n", "features", "=", "torch", ".", "load", "(", "cached_features_file", ")", "\n", "return", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.data.utils.read_conll_ner_file": [[80, 113], ["list", "os.path.exists", "logger.warn", "open", "list", "list", "rf.readlines", "line.strip.strip", "list.append", "line.strip.startswith", "line.strip.split", "list.append", "list.append", "list", "list", "len", "split[].replace", "list.append", "list.append"], "function", ["None"], ["", "", "def", "read_conll_ner_file", "(", "file_path", ")", ":", "\n", "    ", "examples", "=", "list", "(", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "file_path", ")", ":", "\n", "        ", "logger", ".", "warn", "(", "\"File {} not exists\"", ".", "format", "(", "file_path", ")", ")", "\n", "", "else", ":", "\n", "        ", "with", "open", "(", "file_path", ",", "encoding", "=", "\"utf-8\"", ",", "errors", "=", "\"ignore\"", ")", "as", "rf", ":", "\n", "            ", "words", "=", "list", "(", ")", "\n", "labels", "=", "list", "(", ")", "\n", "\n", "for", "line", "in", "rf", ".", "readlines", "(", ")", ":", "\n", "                ", "line", "=", "line", ".", "strip", "(", ")", "\n", "if", "line", ".", "startswith", "(", "\"-DOCSTART-\"", ")", "or", "line", "==", "\"\"", ":", "\n", "                    ", "if", "words", ":", "\n", "                        ", "examples", ".", "append", "(", "{", "\"words\"", ":", "words", ",", "\"labels\"", ":", "labels", "}", ")", "\n", "words", "=", "list", "(", ")", "\n", "labels", "=", "list", "(", ")", "\n", "", "", "else", ":", "\n", "                    ", "split", "=", "line", ".", "split", "(", "\"\\t\"", ")", "\n", "word", "=", "split", "[", "0", "]", "\n", "words", ".", "append", "(", "split", "[", "0", "]", ")", "\n", "\n", "if", "len", "(", "split", ")", ">", "1", ":", "\n", "                        ", "label", "=", "split", "[", "-", "1", "]", ".", "replace", "(", "\"\\n\"", ",", "\"\"", ")", "\n", "labels", ".", "append", "(", "label", ")", "\n", "", "else", ":", "\n", "# Possibly no label in test mode", "\n", "                        ", "labels", ".", "append", "(", "\"O\"", ")", "\n", "\n", "", "", "", "if", "words", ":", "\n", "                ", "examples", ".", "append", "(", "{", "\"words\"", ":", "words", ",", "\"labels\"", ":", "labels", "}", ")", "\n", "\n", "", "", "", "return", "examples", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.data.utils.read_labels": [[115, 126], ["set", "list", "open", "list.add", "sorted", "line.strip.strip", "list.add"], "function", ["home.repos.pwc.inspect_result.suamin_t2ner.annotate.annotate.SentAnnObj.add", "home.repos.pwc.inspect_result.suamin_t2ner.annotate.annotate.SentAnnObj.add"], ["", "def", "read_labels", "(", "file_path", ")", ":", "\n", "    ", "labels", "=", "set", "(", ")", "\n", "with", "open", "(", "file_path", ")", "as", "rf", ":", "\n", "        ", "for", "line", "in", "rf", ":", "\n", "            ", "line", "=", "line", ".", "strip", "(", ")", "\n", "if", "line", ":", "\n", "                ", "labels", ".", "add", "(", "line", ")", "\n", "", "", "", "if", "\"O\"", "not", "in", "labels", ":", "\n", "        ", "labels", ".", "add", "(", "\"O\"", ")", "\n", "", "labels", "=", "list", "(", "sorted", "(", "labels", ")", ")", "\n", "return", "labels", "\n", "", ""]], "home.repos.pwc.inspect_result.suamin_t2ner.losses.cross_entropy.MaskedSeqCrossEntropyLoss.__init__": [[12, 16], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.annotate.annotate.SentAnnObj.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_labels", ",", "weight", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_labels", "=", "num_labels", "\n", "self", ".", "weight", "=", "weight", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.losses.cross_entropy.MaskedSeqCrossEntropyLoss.forward": [[17, 41], ["torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "loss.view().sum().mean.view().sum().mean.view().sum().mean", "logits.view", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "logits.view", "labels.view", "mask.view", "labels.view", "torch.tensor().type_as", "torch.tensor().type_as", "torch.tensor().type_as", "torch.tensor().type_as", "torch.tensor().type_as", "torch.tensor().type_as", "torch.tensor().type_as", "torch.tensor().type_as", "torch.tensor().type_as", "loss.view().sum().mean.view().sum().mean.view().sum", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "loss.view().sum().mean.view().sum().mean.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "logits", ",", "labels", ",", "mask", "=", "None", ")", ":", "\n", "        ", "if", "mask", "is", "not", "None", ":", "\n", "            ", "active_loss", "=", "mask", ".", "view", "(", "-", "1", ")", "==", "1", "\n", "active_logits", "=", "logits", ".", "view", "(", "-", "1", ",", "self", ".", "num_labels", ")", "\n", "active_labels", "=", "torch", ".", "where", "(", "\n", "active_loss", ",", "\n", "labels", ".", "view", "(", "-", "1", ")", ",", "\n", "torch", ".", "tensor", "(", "IGNORE_INDEX", ")", ".", "type_as", "(", "labels", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "active_logits", "=", "logits", ".", "view", "(", "-", "1", ",", "self", ".", "num_labels", ")", "\n", "active_labels", "=", "labels", ".", "view", "(", "-", "1", ")", "\n", "\n", "", "loss", "=", "F", ".", "cross_entropy", "(", "\n", "active_logits", ",", "\n", "active_labels", ",", "\n", "reduction", "=", "\"none\"", ",", "\n", "weight", "=", "self", ".", "weight", ",", "\n", "ignore_index", "=", "IGNORE_INDEX", "\n", ")", "\n", "seq_len", "=", "logits", ".", "shape", "[", "1", "]", "\n", "loss", "=", "loss", ".", "view", "(", "-", "1", ",", "seq_len", ")", ".", "sum", "(", "1", ")", ".", "mean", "(", ")", "\n", "\n", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.suamin_t2ner.losses.focal.MaskedSeqFocalLoss.__init__": [[14, 20], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.annotate.annotate.SentAnnObj.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_labels", ",", "weight", "=", "None", ",", "gamma", "=", "2.", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "assert", "gamma", ">=", "0", ",", "\"gamma should be >= 0 for focal_loss (good values in [0,5])\"", "\n", "self", ".", "num_labels", "=", "num_labels", "\n", "self", ".", "weight", "=", "weight", "\n", "self", ".", "gamma", "=", "gamma", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.losses.focal.MaskedSeqFocalLoss.forward": [[21, 46], ["torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "focal.focal_loss", "loss.view().sum().mean.view().sum().mean.view().sum().mean", "logits.view", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "logits.view", "labels.view", "mask.view", "labels.view", "torch.tensor().type_as", "torch.tensor().type_as", "torch.tensor().type_as", "torch.tensor().type_as", "torch.tensor().type_as", "torch.tensor().type_as", "torch.tensor().type_as", "torch.tensor().type_as", "torch.tensor().type_as", "loss.view().sum().mean.view().sum().mean.view().sum", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "loss.view().sum().mean.view().sum().mean.view"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.losses.focal.focal_loss"], ["", "def", "forward", "(", "self", ",", "logits", ",", "labels", ",", "mask", "=", "None", ")", ":", "\n", "        ", "if", "mask", "is", "not", "None", ":", "\n", "            ", "active_loss", "=", "mask", ".", "view", "(", "-", "1", ")", "==", "1", "\n", "active_logits", "=", "logits", ".", "view", "(", "-", "1", ",", "self", ".", "num_labels", ")", "\n", "active_labels", "=", "torch", ".", "where", "(", "\n", "active_loss", ",", "\n", "labels", ".", "view", "(", "-", "1", ")", ",", "\n", "torch", ".", "tensor", "(", "IGNORE_INDEX", ")", ".", "type_as", "(", "labels", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "active_logits", "=", "logits", ".", "view", "(", "-", "1", ",", "self", ".", "num_labels", ")", "\n", "active_labels", "=", "labels", ".", "view", "(", "-", "1", ")", "\n", "\n", "", "loss", "=", "F", ".", "cross_entropy", "(", "\n", "active_logits", ",", "\n", "active_labels", ",", "\n", "reduction", "=", "\"none\"", ",", "\n", "weight", "=", "self", ".", "weight", ",", "\n", "ignore_index", "=", "IGNORE_INDEX", "\n", ")", "\n", "seq_len", "=", "logits", ".", "shape", "[", "1", "]", "\n", "loss", "=", "focal_loss", "(", "loss", ",", "self", ".", "gamma", ")", "\n", "loss", "=", "loss", ".", "view", "(", "-", "1", ",", "seq_len", ")", ".", "sum", "(", "1", ")", ".", "mean", "(", ")", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.losses.focal.focal_loss": [[48, 53], ["torch.exp", "torch.exp", "torch.exp"], "function", ["None"], ["", "", "def", "focal_loss", "(", "cross_entropy_outputs", ",", "gamma", ")", ":", "\n", "    ", "\"\"\"Computes the focal loss\"\"\"", "\n", "p", "=", "torch", ".", "exp", "(", "-", "cross_entropy_outputs", ")", "\n", "loss", "=", "(", "1", "-", "p", ")", "**", "gamma", "*", "cross_entropy_outputs", "\n", "return", "loss", "\n", "", ""]], "home.repos.pwc.inspect_result.suamin_t2ner.losses.ldam.MaskedSeqLDAMLoss.__init__": [[15, 25], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "len", "numpy.sqrt", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "numpy.sqrt", "numpy.max", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.annotate.annotate.SentAnnObj.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_labels", ",", "cls_num_list", ",", "max_m", "=", "0.5", ",", "weight", "=", "None", ",", "s", "=", "30", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "assert", "len", "(", "cls_num_list", ")", "==", "num_labels", "\n", "assert", "s", ">", "0", "\n", "m_list", "=", "1.0", "/", "np", ".", "sqrt", "(", "np", ".", "sqrt", "(", "cls_num_list", ")", ")", "\n", "m_list", "=", "m_list", "*", "(", "max_m", "/", "np", ".", "max", "(", "m_list", ")", ")", "\n", "self", ".", "num_labels", "=", "num_labels", "\n", "self", ".", "m_list", "=", "nn", ".", "Parameter", "(", "torch", ".", "from_numpy", "(", "m_list", ")", ".", "float", "(", ")", ",", "requires_grad", "=", "False", ")", "\n", "self", ".", "s", "=", "s", "\n", "self", ".", "weight", "=", "weight", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.losses.ldam.MaskedSeqLDAMLoss.forward": [[26, 63], ["torch.zeros_like().byte", "torch.zeros_like().byte", "torch.zeros_like().byte", "torch.zeros_like().byte", "torch.zeros_like().byte", "torch.zeros_like().byte", "torch.zeros_like().byte", "torch.zeros_like().byte", "torch.zeros_like().byte", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like.copy_", "torch.empty_like.copy_", "torch.empty_like.copy_", "torch.zeros_like().byte.scatter_", "torch.zeros_like().byte.scatter_", "torch.zeros_like().byte.scatter_", "torch.zeros_like().byte.float().to", "torch.zeros_like().byte.float().to", "torch.zeros_like().byte.float().to", "ldam.MaskedSeqLDAMLoss.m_list.to", "m_list[].matmul().view", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "loss.view().sum().mean.view().sum().mean.view().sum().mean", "logits.view", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "logits.view", "labels.view", "torch.empty_like.view", "torch.empty_like.view", "torch.empty_like.view", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "mask.view", "labels.view", "torch.tensor().type_as", "torch.tensor().type_as", "torch.tensor().type_as", "torch.tensor().type_as", "torch.tensor().type_as", "torch.tensor().type_as", "torch.tensor().type_as", "torch.tensor().type_as", "torch.tensor().type_as", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "labels.view.data.view", "torch.zeros_like().byte.float", "torch.zeros_like().byte.float", "torch.zeros_like().byte.float", "m_list[].matmul", "loss.view().sum().mean.view().sum().mean.view().sum", "torch.zeros_like().byte.float().to.transpose", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "loss.view().sum().mean.view().sum().mean.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "logits", ",", "labels", ",", "mask", "=", "None", ")", ":", "\n", "        ", "if", "mask", "is", "not", "None", ":", "\n", "            ", "active_loss", "=", "mask", ".", "view", "(", "-", "1", ")", "==", "1", "\n", "active_logits", "=", "logits", ".", "view", "(", "-", "1", ",", "self", ".", "num_labels", ")", "\n", "active_labels", "=", "torch", ".", "where", "(", "\n", "active_loss", ",", "\n", "labels", ".", "view", "(", "-", "1", ")", ",", "\n", "torch", ".", "tensor", "(", "IGNORE_INDEX", ")", ".", "type_as", "(", "labels", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "active_logits", "=", "logits", ".", "view", "(", "-", "1", ",", "self", ".", "num_labels", ")", "\n", "active_labels", "=", "labels", ".", "view", "(", "-", "1", ")", "\n", "\n", "", "index", "=", "torch", ".", "zeros_like", "(", "active_logits", ")", ".", "byte", "(", ")", "\n", "temp_labels", "=", "torch", ".", "empty_like", "(", "active_labels", ")", "\n", "temp_labels", ".", "copy_", "(", "active_labels", ".", "data", ")", "\n", "temp_labels", "[", "temp_labels", "==", "IGNORE_INDEX", "]", "=", "0", "\n", "index", ".", "scatter_", "(", "1", ",", "temp_labels", ".", "view", "(", "-", "1", ",", "1", ")", ",", "1", ")", "\n", "index", "=", "index", "*", "(", "active_labels", ".", "data", ".", "view", "(", "-", "1", ",", "1", ")", "!=", "IGNORE_INDEX", ")", "\n", "\n", "index_float", "=", "index", ".", "float", "(", ")", ".", "to", "(", "logits", ".", "device", ")", "\n", "m_list", "=", "self", ".", "m_list", ".", "to", "(", "logits", ".", "device", ")", "\n", "batch_m", "=", "m_list", "[", "None", ",", ":", "]", ".", "matmul", "(", "index_float", ".", "transpose", "(", "0", ",", "1", ")", ")", ".", "view", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "active_logits_m", "=", "active_logits", "-", "batch_m", "\n", "\n", "active_logits", "=", "self", ".", "s", "*", "torch", ".", "where", "(", "index", ",", "active_logits_m", ",", "active_logits", ")", "\n", "loss", "=", "F", ".", "cross_entropy", "(", "\n", "active_logits", ",", "\n", "active_labels", ",", "\n", "reduction", "=", "\"none\"", ",", "\n", "weight", "=", "self", ".", "weight", ",", "\n", "ignore_index", "=", "IGNORE_INDEX", "\n", ")", "\n", "seq_len", "=", "logits", ".", "shape", "[", "1", "]", "\n", "loss", "=", "loss", ".", "view", "(", "-", "1", ",", "seq_len", ")", ".", "sum", "(", "1", ")", ".", "mean", "(", ")", "\n", "\n", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.suamin_t2ner.losses.causal_language_modeling.CausalLanguageModelingLoss.__init__": [[9, 13], ["torch.Module.__init__", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.annotate.annotate.SentAnnObj.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_labels", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_labels", "=", "num_labels", "\n", "self", ".", "cross_entropy", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.losses.causal_language_modeling.CausalLanguageModelingLoss.forward": [[14, 22], ["logits[].contiguous", "labels[].contiguous", "causal_language_modeling.CausalLanguageModelingLoss.cross_entropy", "logits[].contiguous.view", "labels[].contiguous.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "logits", ",", "labels", ")", ":", "\n", "# labels are assumed to be input_ids; as we are ", "\n", "# doing next-token prediction; shift prediction ", "\n", "# scores and input ids by one", "\n", "        ", "logits", "=", "logits", "[", ":", ",", ":", "-", "1", ",", ":", "]", ".", "contiguous", "(", ")", "\n", "labels", "=", "labels", "[", ":", ",", "1", ":", "]", ".", "contiguous", "(", ")", "\n", "loss", "=", "self", ".", "cross_entropy", "(", "logits", ".", "view", "(", "-", "1", ",", "self", ".", "num_labels", ")", ",", "labels", ".", "view", "(", "-", "1", ")", ")", "\n", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.suamin_t2ner.nets.nets.XNetBase.__init__": [[10, 12], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.annotate.annotate.SentAnnObj.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.nets.nets.XNetBase.forward": [[13, 15], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "encoded", ",", "mask", "=", "None", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.nets.nets.LSTMNet.__init__": [[19, 26], ["nets.XNetBase.__init__", "torch.Dropout", "modules.LSTM", "kwargs.get", "kwargs.get"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.annotate.annotate.SentAnnObj.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "kwargs", ".", "get", "(", "\"input_dropout\"", ",", "config", ".", "hidden_dropout_prob", ")", ")", "\n", "self", ".", "xlstm", "=", "LSTM", "(", "\n", "input_dim", "=", "config", ".", "hidden_size", ",", "\n", "hidden_dim", "=", "config", ".", "hidden_size", "//", "2", ",", "\n", "num_layers", "=", "kwargs", ".", "get", "(", "\"num_layers\"", ",", "2", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.nets.nets.LSTMNet.forward": [[28, 33], ["nets.LSTMNet.dropout", "nets.LSTMNet.xlstm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "encoded", ",", "mask", "=", "None", ")", ":", "\n", "        ", "x", "=", "encoded", "[", "0", "]", "\n", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "h", "=", "self", ".", "xlstm", "(", "x", ",", "mask", ")", "\n", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.nets.nets.TransformerNet.__init__": [[37, 47], ["nets.XNetBase.__init__", "torch.Dropout", "modules.Transformer", "kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.annotate.annotate.SentAnnObj.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "kwargs", ".", "get", "(", "\"input_dropout\"", ",", "config", ".", "hidden_dropout_prob", ")", ")", "\n", "self", ".", "xtrsf", "=", "Transformer", "(", "\n", "input_dim", "=", "config", ".", "hidden_size", ",", "\n", "hidden_dim", "=", "config", ".", "hidden_size", ",", "\n", "num_layers", "=", "kwargs", ".", "get", "(", "\"num_layers\"", ",", "2", ")", ",", "\n", "num_heads", "=", "kwargs", ".", "get", "(", "\"num_heads\"", ",", "config", ".", "num_attention_heads", ")", ",", "\n", "dropout", "=", "kwargs", ".", "get", "(", "\"hidden_dropout\"", ",", "config", ".", "hidden_dropout_prob", ")", ",", "\n", "activation", "=", "\"relu\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.nets.nets.TransformerNet.forward": [[49, 54], ["nets.TransformerNet.dropout", "nets.TransformerNet.xtrsf"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "encoded", ",", "mask", "=", "None", ")", ":", "\n", "        ", "x", "=", "encoded", "[", "0", "]", "\n", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "h", "=", "self", ".", "xtrsf", "(", "x", ",", "mask", ")", "\n", "return", "h", "\n", "", "", ""]], "home.repos.pwc.inspect_result.suamin_t2ner.annotate.annotate.SentAnnObj.__init__": [[66, 73], ["hashlib.md5().hexdigest", "len", "len", "hashlib.md5", "bytes"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "tokens", ",", "label_map", ",", "print_width", "=", "60", ")", ":", "\n", "        ", "assert", "len", "(", "tokens", ")", ">", "0", ",", "\"Empty sentence passed for annotation.\"", "\n", "self", ".", "tokens", "=", "tokens", "\n", "self", ".", "label_map", "=", "label_map", "\n", "self", ".", "labels", "=", "[", "\"O\"", "]", "*", "len", "(", "tokens", ")", "\n", "self", ".", "print_width", "=", "print_width", "\n", "self", ".", "hash", "=", "hashlib", ".", "md5", "(", "bytes", "(", "\" \"", ".", "join", "(", "tokens", ")", ",", "\"utf-8\"", ")", ")", ".", "hexdigest", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.annotate.annotate.SentAnnObj.__eq__": [[74, 76], ["None"], "methods", ["None"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "self", ".", "hash", "==", "other", ".", "hash", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.annotate.annotate.SentAnnObj.add": [[77, 92], ["range", "len", "len"], "methods", ["None"], ["", "def", "add", "(", "self", ",", "start", ",", "label", ",", "end", "=", "None", ")", ":", "\n", "        ", "assert", "0", "<=", "start", "<", "len", "(", "self", ".", "tokens", ")", ",", "\"Invalid start position\"", "\n", "if", "end", "is", "None", ":", "\n", "            ", "end", "=", "start", "\n", "", "else", ":", "\n", "            ", "assert", "start", "<", "end", "<", "len", "(", "self", ".", "tokens", ")", ",", "\"Invalid end position\"", "\n", "", "assert", "label", "in", "self", ".", "label_map", ",", "(", "\n", "\"Unknown label `{}`, expected index from map `{}`\"", ".", "format", "(", "label", ",", "self", ".", "label_map", ")", "\n", ")", "\n", "tag", "=", "self", ".", "label_map", "[", "label", "]", "\n", "for", "i", "in", "range", "(", "start", ",", "end", "+", "1", ")", ":", "\n", "            ", "if", "i", "==", "start", ":", "\n", "                ", "self", ".", "labels", "[", "i", "]", "=", "\"B-{}\"", ".", "format", "(", "tag", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "labels", "[", "i", "]", "=", "\"I-{}\"", ".", "format", "(", "tag", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.annotate.annotate.SentAnnObj.clear": [[93, 95], ["len"], "methods", ["None"], ["", "", "", "def", "clear", "(", "self", ")", ":", "\n", "        ", "self", ".", "labels", "=", "[", "\"O\"", "]", "*", "len", "(", "self", ".", "tokens", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.annotate.annotate.SentAnnObj.is_all_O": [[96, 99], ["sum", "len"], "methods", ["None"], ["", "@", "property", "\n", "def", "is_all_O", "(", "self", ")", ":", "\n", "        ", "return", "sum", "(", "[", "l", "==", "\"O\"", "for", "l", "in", "self", ".", "labels", "]", ")", "==", "len", "(", "self", ".", "labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.annotate.annotate.SentAnnObj.__str__": [[100, 103], ["annotate.pretty_str", "str", "range", "len"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.annotate.annotate.pretty_str"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "ids", "=", "[", "str", "(", "i", ")", "for", "i", "in", "range", "(", "len", "(", "self", ".", "tokens", ")", ")", "]", "\n", "return", "pretty_str", "(", "self", ".", "tokens", ",", "ids", ",", "self", ".", "labels", ",", "self", ".", "print_width", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.annotate.annotate.Annotater.read_source": [[107, 123], ["list", "open", "list", "list.append", "line.startswith", "line.split", "list.append", "list.append", "list", "splits[].strip"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "read_source", "(", "src_file", ")", ":", "\n", "        ", "sentences", "=", "list", "(", ")", "\n", "with", "open", "(", "src_file", ",", "encoding", "=", "\"utf-8\"", ",", "errors", "=", "\"ignore\"", ")", "as", "rf", ":", "\n", "            ", "tokens", "=", "list", "(", ")", "\n", "for", "line", "in", "rf", ":", "\n", "                ", "if", "line", ".", "startswith", "(", "\"-DOCSTART-\"", ")", "or", "line", "==", "\"\"", "or", "line", "==", "\"\\n\"", ":", "\n", "                    ", "if", "tokens", ":", "\n", "                        ", "sentences", ".", "append", "(", "tokens", ")", "\n", "tokens", "=", "list", "(", ")", "\n", "", "", "else", ":", "\n", "                    ", "splits", "=", "line", ".", "split", "(", "\"\\t\"", ")", "\n", "tokens", ".", "append", "(", "splits", "[", "0", "]", ".", "strip", "(", ")", ")", "\n", "", "", "if", "tokens", ":", "\n", "                ", "sentences", ".", "append", "(", "tokens", ")", "\n", "", "", "return", "sentences", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.annotate.annotate.Annotater.read_json_source": [[124, 130], ["open", "json.load", "int", "json.load.items"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "read_json_source", "(", "src_file", ")", ":", "\n", "        ", "with", "open", "(", "src_file", ",", "encoding", "=", "\"utf-8\"", ",", "errors", "=", "\"ignore\"", ")", "as", "rf", ":", "\n", "            ", "idx2sents", "=", "json", ".", "load", "(", "rf", ")", "\n", "", "idx2sents", "=", "{", "int", "(", "idx", ")", ":", "s", "for", "idx", ",", "s", "in", "idx2sents", ".", "items", "(", ")", "}", "\n", "return", "idx2sents", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.annotate.annotate.Annotater.stats": [[131, 137], ["dict", "sum", "sum", "sum", "len", "anns.items", "anns.items", "anns.items"], "methods", ["None"], ["", "def", "stats", "(", "self", ",", "anns", ",", "total", ")", ":", "\n", "        ", "return", "dict", "(", "\n", "annotated", "=", "sum", "(", "[", "1", "for", "idx", ",", "val", "in", "anns", ".", "items", "(", ")", "if", "val", "[", "1", "]", "==", "1", "]", ")", ",", "\n", "skipped", "=", "sum", "(", "[", "1", "for", "idx", ",", "val", "in", "anns", ".", "items", "(", ")", "if", "val", "[", "1", "]", "==", "0", "]", ")", ",", "\n", "revised", "=", "sum", "(", "[", "1", "for", "idx", ",", "val", "in", "anns", ".", "items", "(", ")", "if", "val", "[", "1", "]", "==", "2", "]", ")", ",", "\n", "remaining", "=", "total", "-", "len", "(", "anns", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.annotate.annotate.Annotater.log_progress": [[139, 146], ["logger.info"], "methods", ["None"], ["", "def", "log_progress", "(", "self", ",", "stats", ")", ":", "\n", "        ", "A", "=", "stats", "[", "\"annotated\"", "]", "\n", "Z", "=", "stats", "[", "\"revised\"", "]", "\n", "S", "=", "stats", "[", "\"skipped\"", "]", "\n", "R", "=", "stats", "[", "\"remaining\"", "]", "\n", "logger", ".", "info", "(", "\"Progress ({:.3f}%): Annotated={} / Skipped={} / Remaining={} / Revised={}\"", ".", "format", "(", "\n", "(", "R", "/", "(", "A", "+", "S", "+", "R", ")", ")", "*", "100", ",", "A", ",", "S", ",", "R", ",", "Z", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.annotate.annotate.Annotater.init_session": [[148, 410], ["annotate.Annotater.read_source", "os.path.join", "os.path.exists", "os.path.join", "annotate.init_logging", "logger.addHandler", "os.path.join", "os.path.join", "dict", "dict", "logger.info", "logger.info", "json.load.items", "os.path.join", "os.path.join", "annotate.Annotater.read_json_source", "logger.info", "logger.info", "os.makedirs", "logger.info", "set", "set", "set", "enumerate", "open", "logger.info", "annotate.Annotater.stats", "json.dump", "open", "logger.info", "pickle.dump", "open", "logger.info", "dict", "pickle.load.items", "json.dump", "open", "logger.info", "pickle.load.items", "os.path.splitext", "Exception", "len", "logger.info", "logger.info", "sorted", "set", "logger.info", "annotate.Annotater.init_session.review_or_revise"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.annotate.annotate.Annotater.read_source", "home.repos.pwc.inspect_result.suamin_t2ner.annotate.annotate.init_logging", "home.repos.pwc.inspect_result.suamin_t2ner.annotate.annotate.Annotater.read_json_source", "home.repos.pwc.inspect_result.suamin_t2ner.annotate.annotate.Annotater.stats"], ["", "def", "init_session", "(", "self", ",", "args", ")", ":", "\n", "# Raw tokenized sentences", "\n", "        ", "sentences", "=", "self", ".", "read_source", "(", "args", ".", "src_file", ")", "\n", "if", "args", ".", "translated_src_file", ":", "\n", "            ", "self", ".", "idx2sentence_en", "=", "self", ".", "read_json_source", "(", "args", ".", "translated_src_file", ")", "\n", "# Make working dir unique per source file", "\n", "", "work_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "work_dir", ",", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "split", "(", "args", ".", "src_file", ")", "[", "1", "]", ")", "[", "0", "]", ")", "\n", "resume", "=", "False", "\n", "if", "os", ".", "path", ".", "exists", "(", "work_dir", ")", ":", "\n", "            ", "if", "not", "args", ".", "overwrite", ":", "\n", "                ", "raise", "Exception", "(", "\n", "\"Working directory `{}` exists already. Set `overwrite` flag to reset.\"", ".", "format", "(", "work_dir", ")", "\n", ")", "\n", "", "logger", ".", "info", "(", "\"Using existing directory `{}` as working directory.\"", ".", "format", "(", "work_dir", ")", ")", "\n", "resume", "=", "True", "\n", "", "else", ":", "\n", "            ", "logger", ".", "info", "(", "\"Creating new working directory `{}`.\"", ".", "format", "(", "work_dir", ")", ")", "\n", "os", ".", "makedirs", "(", "work_dir", ")", "\n", "\n", "", "log_file", "=", "os", ".", "path", ".", "join", "(", "work_dir", ",", "args", ".", "log_file", ")", "\n", "fh", "=", "init_logging", "(", "log_file", ")", "\n", "logger", ".", "addHandler", "(", "fh", ")", "\n", "\n", "progress_file", "=", "os", ".", "path", ".", "join", "(", "work_dir", ",", "\"progress.json\"", ")", "\n", "ann_objs_file", "=", "os", ".", "path", ".", "join", "(", "work_dir", ",", "\"anns.pkl\"", ")", "\n", "progress", "=", "dict", "(", "annotated", "=", "0", ",", "skipped", "=", "0", ",", "remaining", "=", "len", "(", "sentences", ")", ")", "\n", "anns", "=", "dict", "(", ")", "\n", "\n", "if", "resume", ":", "\n", "            ", "try", ":", "\n", "                ", "logger", ".", "info", "(", "\"Loading progress from : `{}` ...\"", ".", "format", "(", "progress_file", ")", ")", "\n", "with", "open", "(", "progress_file", ")", "as", "rf", ":", "\n", "                    ", "progress", "=", "json", ".", "load", "(", "rf", ")", "\n", "", "logger", ".", "info", "(", "\"Loading annotations from : `{}` ...\"", ".", "format", "(", "ann_objs_file", ")", ")", "\n", "with", "open", "(", "ann_objs_file", ",", "\"rb\"", ")", "as", "rf", ":", "\n", "                    ", "anns", "=", "pickle", ".", "load", "(", "rf", ")", "\n", "", "", "except", ":", "\n", "                ", "pass", "\n", "\n", "", "", "logger", ".", "info", "(", "\"Initializing annotation ...\"", ")", "\n", "logger", ".", "info", "(", "\"******   Annotation stats   ******\"", ")", "\n", "for", "k", ",", "v", "in", "progress", ".", "items", "(", ")", ":", "\n", "            ", "logger", ".", "info", "(", "\" {} : {}\"", ".", "format", "(", "k", ",", "v", ")", ")", "\n", "\n", "", "def", "get_confid", "(", "confid", "=", "None", ")", ":", "\n", "            ", "if", "args", ".", "ask_for_confidence", ":", "\n", "                ", "while", "True", ":", "\n", "                    ", "y", "=", "input", "(", "\">> INPUT : Confidence : \"", ")", "\n", "logger", ".", "info", "(", "\"AnnInput: `{}`\"", ".", "format", "(", "y", ")", ")", "\n", "try", ":", "\n", "                        ", "y", "=", "int", "(", "y", ")", "\n", "", "except", ":", "\n", "                        ", "logger", ".", "error", "(", "\"Please provide rating as int in [1 - 5]\"", ")", "\n", "continue", "\n", "", "else", ":", "\n", "                        ", "if", "y", "in", "{", "1", ",", "2", ",", "3", ",", "4", ",", "5", "}", ":", "\n", "                            ", "confid", "=", "y", "\n", "break", "\n", "", "else", ":", "\n", "                            ", "logger", ".", "error", "(", "\"Please provide rating as in [1, 2, 3, 4, 5]\"", ")", "\n", "continue", "\n", "", "", "", "", "else", ":", "\n", "                ", "if", "confid", "is", "None", ":", "\n", "                    ", "confid", "=", "5", "\n", "", "", "return", "confid", "\n", "\n", "", "try", ":", "\n", "            ", "skipped_idxs", "=", "set", "(", ")", "\n", "revised_idxs", "=", "set", "(", ")", "\n", "revision_idxs", "=", "set", "(", ")", "\n", "\n", "for", "idx", ",", "sent_tokens", "in", "enumerate", "(", "sentences", ")", ":", "\n", "                ", "checked", "=", "idx", "in", "anns", "\n", "if", "checked", ":", "\n", "                    ", "ann_obj", ",", "status", ",", "confid", "=", "anns", "[", "idx", "]", "\n", "if", "(", "status", "==", "0", "and", "args", ".", "review_skipped", ")", "or", "(", "status", "==", "1", "and", "args", ".", "revise_annotated", ")", "or", "(", "status", "==", "2", "and", "args", ".", "revise_annotated", ")", ":", "\n", "                        ", "if", "args", ".", "filter_by_confidence", ">", "-", "1", ":", "\n", "                            ", "if", "args", ".", "filter_by_confidence", "in", "{", "1", ",", "2", ",", "3", ",", "4", ",", "5", "}", ":", "\n", "                                ", "if", "confid", "!=", "args", ".", "filter_by_confidence", ":", "\n", "                                    ", "continue", "\n", "", "", "else", ":", "\n", "                                ", "raise", "ValueError", "(", "\n", "\"Invalid value for `filter_by_confidence`, should be in \"", "\n", "\"range [1, 5].\"", "\n", ")", "\n", "", "", "if", "args", ".", "filter_by_status", ">", "-", "1", ":", "\n", "                            ", "if", "args", ".", "filter_by_status", "in", "{", "0", ",", "1", ",", "2", "}", ":", "\n", "                                ", "if", "status", "!=", "args", ".", "filter_by_status", ":", "\n", "                                    ", "continue", "\n", "", "", "else", ":", "\n", "                                ", "raise", "ValueError", "(", "\n", "\"Invalid value for `filter_by_status`, should be one of \"", "\n", "\"0, 1 or 2.\"", "\n", ")", "\n", "", "", "if", "args", ".", "filter_by_token", ":", "\n", "                            ", "if", "args", ".", "filter_by_token", ".", "lower", "(", ")", "not", "in", "set", "(", "\" \"", ".", "join", "(", "sent_tokens", ")", ".", "lower", "(", ")", ".", "split", "(", "\" \"", ")", ")", ":", "\n", "                               ", "continue", "\n", "", "", "if", "args", ".", "filter_all_O", ":", "\n", "                            ", "if", "ann_obj", ".", "is_all_O", ":", "\n", "                                ", "continue", "\n", "", "", "if", "args", ".", "filter_all_non_O", ":", "\n", "                            ", "if", "not", "ann_obj", ".", "is_all_O", ":", "\n", "                                ", "continue", "\n", "", "", "if", "status", "==", "0", ":", "\n", "                            ", "skipped_idxs", ".", "add", "(", "idx", ")", "\n", "", "if", "status", "==", "1", ":", "\n", "                            ", "revision_idxs", ".", "add", "(", "idx", ")", "\n", "", "if", "status", "==", "2", ":", "\n", "                            ", "revised_idxs", ".", "add", "(", "idx", ")", "\n", "", "", "else", ":", "\n", "                        ", "continue", "\n", "", "", "else", ":", "\n", "                    ", "if", "args", ".", "review_skipped", "or", "args", ".", "revise_annotated", ":", "\n", "                        ", "continue", "\n", "# Check if the sentence is duplicate", "\n", "", "ann_obj", "=", "SentAnnObj", "(", "sent_tokens", ",", "LABELS", ")", "\n", "has_dupe", "=", "False", "\n", "for", "_", ",", "(", "ann_obj_i", ",", "_", ",", "confid", ")", "in", "anns", ".", "items", "(", ")", ":", "\n", "                        ", "if", "ann_obj", "==", "ann_obj_i", ":", "\n", "                            ", "logger", ".", "info", "(", "\"Found duplicate sentence `{}` with existing \"", "\n", "\"annotation, copying!\"", ".", "format", "(", "\" \"", ".", "join", "(", "ann_obj", ".", "tokens", ")", ")", ")", "\n", "ann_obj", ".", "labels", "=", "ann_obj_i", ".", "labels", "# Shallow copy will influence all refs", "\n", "status", "=", "1", "\n", "has_dupe", "=", "True", "\n", "anns", "[", "idx", "]", "=", "(", "ann_obj", ",", "status", ",", "confid", ")", "\n", "self", ".", "log_progress", "(", "self", ".", "stats", "(", "anns", ",", "len", "(", "sentences", ")", ")", ")", "\n", "break", "\n", "", "", "if", "not", "has_dupe", ":", "\n", "                        ", "try", ":", "\n", "                            ", "status", "=", "self", ".", "annotate", "(", "ann_obj", ",", "idx", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                            ", "logger", ".", "error", "(", "\"Unknown exception : `{}` -- continuing\"", ".", "format", "(", "e", ")", ")", "\n", "continue", "\n", "", "else", ":", "\n", "                            ", "confid", "=", "get_confid", "(", ")", "\n", "anns", "[", "idx", "]", "=", "(", "ann_obj", ",", "status", ",", "confid", ")", "\n", "self", ".", "log_progress", "(", "self", ".", "stats", "(", "anns", ",", "len", "(", "sentences", ")", ")", ")", "\n", "\n", "", "", "", "", "def", "review_or_revise", "(", "idxs", ",", "revised_idxs", "=", "None", ")", ":", "\n", "                ", "j", "=", "0", "\n", "idxs", "=", "sorted", "(", "list", "(", "set", "(", "idxs", ")", ")", ")", "\n", "if", "revised_idxs", "is", "None", ":", "\n", "                    ", "revised_idxs", "=", "set", "(", ")", "\n", "", "idxs_done", "=", "set", "(", ")", "\n", "while", "True", ":", "\n", "                    ", "if", "len", "(", "idxs", ")", "==", "0", ":", "\n", "                        ", "break", "\n", "", "idxs", "=", "sorted", "(", "list", "(", "set", "(", "idxs", ")", ")", ")", "\n", "total", "=", "len", "(", "idxs", ")", "\n", "remain", "=", "len", "(", "set", "(", "idxs", ")", "-", "set", "(", "idxs_done", ")", ")", "\n", "raw_progress", "=", "(", "(", "total", "-", "remain", ")", "/", "total", ")", "*", "100", "\n", "actual_progress", "=", "(", "(", "total", "-", "(", "total", "-", "len", "(", "idxs_done", ")", ")", ")", "/", "total", ")", "*", "100", "\n", "logger", ".", "info", "(", "\n", "\"Raw Progress ({:.3f}%), Actual Progress ({:.3f}%): \"", "\n", "\"Total = {}, Remain = {}, Revised/Reviewed={}, Annotated = {}\"", ".", "format", "(", "\n", "raw_progress", ",", "actual_progress", ",", "total", ",", "remain", ",", "\n", "total", "-", "remain", ",", "len", "(", "idxs_done", ")", "\n", ")", "\n", ")", "\n", "try", ":", "\n", "                        ", "if", "args", ".", "ask_ids_for_review_revise", ":", "\n", "                            ", "i", "=", "input", "(", "\"Enter sentence index to review = \"", ")", "\n", "i", "=", "int", "(", "i", ")", "\n", "if", "args", ".", "revise_annotated", ":", "\n", "                                ", "if", "i", "in", "revised_idxs", ":", "\n", "                                    ", "revised_idxs", ".", "remove", "(", "i", ")", "\n", "if", "i", "in", "idxs_done", ":", "\n", "                                        ", "idxs_done", ".", "remove", "(", "i", ")", "\n", "", "idxs", ".", "append", "(", "i", ")", "\n", "", "", "elif", "args", ".", "review_skipped", ":", "\n", "                                ", "if", "i", "in", "idxs_done", ":", "\n", "                                    ", "idxs_done", ".", "remove", "(", "i", ")", "\n", "idxs", ".", "append", "(", "i", ")", "\n", "", "", "if", "i", "not", "in", "set", "(", "idxs", ")", ":", "\n", "                                ", "logger", ".", "warning", "(", "\"Couldn't find this index in the set.\"", ")", "\n", "continue", "\n", "", "", "else", ":", "\n", "                            ", "i", "=", "None", "\n", "", "if", "i", "is", "None", ":", "\n", "                            ", "if", "j", "==", "len", "(", "idxs", ")", ":", "\n", "                                ", "break", "\n", "", "idx", "=", "idxs", "[", "j", "]", "\n", "", "else", ":", "\n", "                            ", "idx", "=", "i", "\n", "", "ann_obj", ",", "old_status", ",", "confid", "=", "anns", "[", "idx", "]", "\n", "status", "=", "self", ".", "annotate", "(", "ann_obj", ",", "idx", ",", "is_revision", "=", "args", ".", "revise_annotated", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                        ", "logger", ".", "error", "(", "\"Unknown exception : `{}` -- continuing\"", ".", "format", "(", "e", ")", ")", "\n", "continue", "\n", "", "else", ":", "\n", "                        ", "if", "(", "old_status", "==", "2", "or", "old_status", "==", "1", ")", "and", "status", "==", "0", ":", "\n", "                            ", "logger", ".", "warn", "(", "\"Tried to change revised / annotated sentence to skipped one.\"", ")", "\n", "bad_overwrite", "=", "input", "(", "\"Are you sure (y/n)? \"", ")", "\n", "if", "bad_overwrite", "!=", "\"y\"", ":", "\n", "                                ", "continue", "\n", "", "", "confid", "=", "get_confid", "(", "confid", ")", "\n", "anns", "[", "idx", "]", "=", "(", "ann_obj", ",", "status", ",", "confid", ")", "\n", "self", ".", "log_progress", "(", "self", ".", "stats", "(", "anns", ",", "len", "(", "sentences", ")", ")", ")", "\n", "if", "not", "args", ".", "ask_ids_for_review_revise", ":", "\n", "                            ", "j", "+=", "1", "\n", "", "else", ":", "\n", "                            ", "if", "status", "==", "2", "and", "args", ".", "revise_annotated", ":", "\n", "                                ", "idxs", ".", "remove", "(", "i", ")", "\n", "", "elif", "status", "==", "1", "and", "args", ".", "review_skipped", ":", "\n", "                                ", "idxs", ".", "remove", "(", "i", ")", "\n", "", "if", "len", "(", "idxs", ")", "==", "0", ":", "\n", "                                ", "break", "\n", "\n", "", "", "if", "status", "==", "2", "and", "args", ".", "revise_annotated", ":", "\n", "                            ", "idxs_done", ".", "add", "(", "idx", ")", "\n", "revised_idxs", ".", "add", "(", "idx", ")", "\n", "", "elif", "status", "==", "1", "and", "args", ".", "review_skipped", ":", "\n", "                            ", "idxs_done", ".", "add", "(", "idx", ")", "\n", "\n", "", "", "", "", "if", "args", ".", "review_skipped", "and", "skipped_idxs", ":", "\n", "                ", "logger", ".", "info", "(", "\"Reviewing skipped ...\"", ")", "\n", "review_or_revise", "(", "skipped_idxs", ")", "\n", "\n", "", "if", "not", "revision_idxs", "and", "revised_idxs", ":", "\n", "                ", "revision_idxs", "=", "set", "(", "revised_idxs", ")", "\n", "\n", "", "if", "args", ".", "revise_annotated", "and", "revision_idxs", ":", "\n", "                ", "logger", ".", "info", "(", "\"Revising annotated ...\"", ")", "\n", "review_or_revise", "(", "revision_idxs", ",", "revised_idxs", "=", "revised_idxs", ")", "\n", "\n", "", "", "except", "KeyboardInterrupt", ":", "\n", "            ", "logger", ".", "error", "(", "\"Early exiting!\"", ")", "\n", "\n", "", "with", "open", "(", "progress_file", ",", "\"w\"", ")", "as", "wf", ":", "\n", "            ", "logger", ".", "info", "(", "\"Saving progrees at : `{}` ...\"", ".", "format", "(", "progress_file", ")", ")", "\n", "progress", "=", "self", ".", "stats", "(", "anns", ",", "len", "(", "sentences", ")", ")", "\n", "json", ".", "dump", "(", "progress", ",", "wf", ")", "\n", "\n", "", "with", "open", "(", "ann_objs_file", ",", "\"wb\"", ")", "as", "wf", ":", "\n", "            ", "logger", ".", "info", "(", "\"Saving binary annotations at : `{}` ...\"", ".", "format", "(", "ann_objs_file", ")", ")", "\n", "pickle", ".", "dump", "(", "anns", ",", "wf", ")", "\n", "\n", "", "json_anns_file", "=", "os", ".", "path", ".", "join", "(", "work_dir", ",", "\"annotated.json\"", ")", "\n", "with", "open", "(", "json_anns_file", ",", "\"w\"", ",", "encoding", "=", "\"utf-8\"", ",", "errors", "=", "\"ignore\"", ")", "as", "wf", ":", "\n", "            ", "logger", ".", "info", "(", "\"Saving (friendly) json annotations at : `{}` ...\"", ".", "format", "(", "json_anns_file", ")", ")", "\n", "json_data", "=", "dict", "(", ")", "\n", "for", "idx", ",", "(", "ann_obj_i", ",", "status", ",", "confid", ")", "in", "anns", ".", "items", "(", ")", ":", "\n", "                ", "json_data", "[", "idx", "]", "=", "{", "\n", "\"tokens\"", ":", "ann_obj_i", ".", "tokens", ",", "\n", "\"labels\"", ":", "ann_obj_i", ".", "labels", ",", "\n", "\"status\"", ":", "status", ",", "\n", "\"confid\"", ":", "confid", "\n", "}", "\n", "", "json", ".", "dump", "(", "json_data", ",", "wf", ",", "indent", "=", "1", ")", "\n", "\n", "", "friendly_anns_file", "=", "os", ".", "path", ".", "join", "(", "work_dir", ",", "\"annotated_friendly.txt\"", ")", "\n", "with", "open", "(", "friendly_anns_file", ",", "\"w\"", ",", "encoding", "=", "\"utf-8\"", ",", "errors", "=", "\"ignore\"", ")", "as", "wf", ":", "\n", "            ", "logger", ".", "info", "(", "\"Saving (more friendly) text annotations at : `{}` ...\"", ".", "format", "(", "friendly_anns_file", ")", ")", "\n", "for", "idx", ",", "(", "ann_obj_i", ",", "status", ",", "confid", ")", "in", "anns", ".", "items", "(", ")", ":", "\n", "                ", "wf", ".", "write", "(", "\"STATUS={} | ID={} | CONFID={}\\n\"", ".", "format", "(", "status", ",", "idx", ",", "confid", ")", ")", "\n", "wf", ".", "write", "(", "\"=============================\\n\\n\"", ".", "format", "(", "status", ")", ")", "\n", "for", "w", ",", "l", "in", "list", "(", "zip", "(", "ann_obj_i", ".", "tokens", ",", "ann_obj_i", ".", "labels", ")", ")", ":", "\n", "                    ", "wf", ".", "write", "(", "\"{}\\t{}\\n\"", ".", "format", "(", "w", ".", "center", "(", "15", ")", ",", "l", ".", "center", "(", "15", ")", ")", ")", "\n", "", "wf", ".", "write", "(", "\"\\n\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.annotate.annotate.Annotater.annotate": [[411, 460], ["print", "print", "input", "logger.info", "x.strip.strip.strip", "str", "print", "logger.info", "input", "logger.info", "ann_obj.clear", "logger.info", "str", "hasattr", "x.strip.strip.split", "logger.info", "logger.info", "logger.info", "int", "len", "logger.error", "ann_obj.add", "i.split", "len", "logger.error"], "methods", ["home.repos.pwc.inspect_result.suamin_t2ner.annotate.annotate.SentAnnObj.clear", "home.repos.pwc.inspect_result.suamin_t2ner.annotate.annotate.SentAnnObj.add"], ["", "", "", "def", "annotate", "(", "self", ",", "ann_obj", ",", "idx", "=", "None", ",", "is_revision", "=", "False", ")", ":", "\n", "        ", "while", "True", ":", "\n", "            ", "print", "(", "\"\\n>> ID = {}\\n\\n\"", ".", "format", "(", "idx", ")", "+", "str", "(", "ann_obj", ")", ")", "\n", "print", "(", ")", "\n", "x", "=", "input", "(", "\">> input = \"", ")", "\n", "logger", ".", "info", "(", "\"AnnInput: `{}`\"", ".", "format", "(", "x", ")", ")", "\n", "x", "=", "x", ".", "strip", "(", ")", "\n", "if", "x", "==", "\"s\"", ":", "\n", "                ", "return", "0", "\n", "", "elif", "x", "==", "\"d\"", ":", "\n", "                ", "print", "(", "\">> review = \"", ")", "\n", "logger", ".", "info", "(", "\"\\n\"", "+", "str", "(", "ann_obj", ")", ")", "\n", "y", "=", "input", "(", "\">> INPUT : Are you sure? (y/n) : \"", ")", "\n", "logger", ".", "info", "(", "\"AnnInput: `{}`\"", ".", "format", "(", "y", ")", ")", "\n", "if", "y", "==", "\"y\"", ":", "\n", "                    ", "if", "is_revision", ":", "\n", "                        ", "return", "2", "\n", "", "else", ":", "\n", "                        ", "return", "1", "\n", "", "", "", "elif", "x", "==", "\"c\"", ":", "\n", "                ", "ann_obj", ".", "clear", "(", ")", "\n", "logger", ".", "info", "(", "\"cleared!\"", ")", "\n", "", "elif", "x", "==", "\"h\"", ":", "\n", "                ", "if", "hasattr", "(", "self", ",", "\"idx2sentence_en\"", ")", ":", "\n", "                    ", "if", "idx", "in", "self", ".", "idx2sentence_en", ":", "\n", "                        ", "translation", "=", "self", ".", "idx2sentence_en", "[", "idx", "]", "\n", "logger", ".", "info", "(", "\"(Hint) {}\"", ".", "format", "(", "translation", ")", ")", "\n", "", "else", ":", "\n", "                        ", "logger", ".", "info", "(", "\"No hint available!\"", ")", "\n", "", "", "else", ":", "\n", "                    ", "logger", ".", "info", "(", "\"No hint available!\"", ")", "\n", "", "", "else", ":", "\n", "                ", "for", "i", "in", "x", ".", "split", "(", ")", ":", "\n", "                    ", "try", ":", "\n", "                        ", "temp", "=", "[", "int", "(", "j", ")", "for", "j", "in", "i", ".", "split", "(", "\",\"", ")", "]", "\n", "if", "len", "(", "temp", ")", "==", "2", ":", "\n", "                            ", "start", ",", "label", "=", "temp", "\n", "end", "=", "None", "\n", "", "elif", "len", "(", "temp", ")", "==", "3", ":", "\n", "                            ", "start", ",", "end", ",", "label", "=", "temp", "\n", "", "else", ":", "\n", "                            ", "raise", "Exception", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "                        ", "logger", ".", "error", "(", "\"Invalid input `{}` : `{}` -- ignored!\"", ".", "format", "(", "i", ",", "e", ")", ")", "\n", "", "else", ":", "\n", "                        ", "try", ":", "\n", "                            ", "ann_obj", ".", "add", "(", "start", ",", "label", ",", "end", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                            ", "logger", ".", "error", "(", "\"Couldn't add input `{}` : `{}`\"", ".", "format", "(", "i", ",", "e", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.annotate.annotate.init_logging": [[19, 33], ["logging.FileHandler", "logging.FileHandler.setLevel", "logging.basicConfig", "logging.FileHandler.setFormatter", "logging.Formatter", "logging.StreamHandler"], "function", ["None"], ["def", "init_logging", "(", "log_file", ")", ":", "\n", "    ", "fh", "=", "logging", ".", "FileHandler", "(", "log_file", ")", "\n", "fh", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "logging", ".", "basicConfig", "(", "\n", "handlers", "=", "[", "logging", ".", "StreamHandler", "(", ")", "]", ",", "\n", "format", "=", "'%(asctime)s - %(levelname)s - %(name)s -   %(message)s'", ",", "\n", "datefmt", "=", "'%m/%d/%Y %H:%M:%S'", ",", "\n", "level", "=", "logging", ".", "INFO", "\n", ")", "\n", "fh", ".", "setFormatter", "(", "logging", ".", "Formatter", "(", "\n", "'%(asctime)s - %(levelname)s - %(name)s -   %(message)s'", ",", "\n", "datefmt", "=", "'%m/%d/%Y %H:%M:%S'", "\n", ")", ")", "\n", "return", "fh", "\n", "\n"]], "home.repos.pwc.inspect_result.suamin_t2ner.annotate.annotate.pretty_str": [[35, 62], ["list", "list", "list", "sum", "enumerate", "list.append", "list.append", "max", "list.append", "list.append", "len", "range", "list.append", "list.append", "list.append", "list", "list", "len", "t.center", "i.center", "len", "len", "LABELS.items", "t.center", "i.center"], "function", ["None"], ["", "def", "pretty_str", "(", "tokens", ",", "ids", ",", "labels", ",", "print_width", "=", "60", ")", ":", "\n", "    ", "lens", "=", "[", "max", "(", "len", "(", "tokens", "[", "i", "]", ")", ",", "len", "(", "ids", "[", "i", "]", ")", "+", "len", "(", "labels", "[", "i", "]", ")", "+", "7", ")", "for", "i", "in", "range", "(", "len", "(", "tokens", ")", ")", "]", "\n", "lines", "=", "list", "(", ")", "\n", "tline", "=", "list", "(", ")", "\n", "iline", "=", "list", "(", ")", "\n", "rlen", "=", "0", "\n", "tlen", "=", "sum", "(", "lens", ")", "\n", "if", "tlen", "<=", "print_width", ":", "\n", "        ", "print_width", "=", "tlen", "\n", "", "for", "idx", ",", "l", "in", "enumerate", "(", "lens", ")", ":", "\n", "        ", "if", "rlen", ">=", "print_width", ":", "\n", "            ", "lines", ".", "append", "(", "\"    \"", ".", "join", "(", "[", "t", ".", "center", "(", "lj", ")", "for", "t", ",", "lj", "in", "tline", "]", ")", ")", "\n", "lines", ".", "append", "(", "\"    \"", ".", "join", "(", "[", "i", ".", "center", "(", "lj", ")", "for", "i", ",", "lj", "in", "iline", "]", ")", ")", "\n", "lines", ".", "append", "(", "\"\\n\"", ")", "\n", "tline", "=", "list", "(", ")", "\n", "iline", "=", "list", "(", ")", "\n", "rlen", "=", "0", "\n", "", "tline", ".", "append", "(", "(", "tokens", "[", "idx", "]", ",", "l", ")", ")", "\n", "iline", ".", "append", "(", "(", "ids", "[", "idx", "]", "+", "\" -> \"", "+", "labels", "[", "idx", "]", ",", "l", ")", ")", "\n", "rlen", "+=", "l", "\n", "\n", "", "lines", ".", "append", "(", "\"    \"", ".", "join", "(", "[", "t", ".", "center", "(", "lj", ")", "for", "t", ",", "lj", "in", "tline", "]", ")", ")", "\n", "lines", ".", "append", "(", "\"    \"", ".", "join", "(", "[", "i", ".", "center", "(", "lj", ")", "for", "i", ",", "lj", "in", "iline", "]", ")", ")", "\n", "label_line", "=", "\">> labels = \"", "+", "\" \"", ".", "join", "(", "[", "\"({} -> {})\"", ".", "format", "(", "k", ",", "v", ")", "for", "k", ",", "v", "in", "LABELS", ".", "items", "(", ")", "]", ")", "\n", "lines", "=", "[", "\">> sentence = \"", "+", "\" \"", ".", "join", "(", "tokens", ")", "+", "\"\\n\"", ",", "label_line", "+", "\"\\n\"", ",", "\">> tagged =\\n\"", "]", "+", "lines", "\n", "\n", "return", "\"\\n\"", ".", "join", "(", "lines", ")", "\n", "\n"]]}