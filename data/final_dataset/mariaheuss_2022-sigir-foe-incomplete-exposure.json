{"home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.tests.test_run_foeir.test_individual_fairness_constraint": [[6, 33], ["numpy.allclose", "felix.src.candidate_creator.candidate.Candidate", "felix.src.candidate_creator.candidate.Candidate", "felix.src.algorithms.run_foeir.solve_lp_with_DTC", "len"], "function", ["home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.algorithms.run_foeir.solve_lp_with_DTC"], ["def", "test_individual_fairness_constraint", "(", ")", ":", "\n", "    ", "ranking", "=", "[", "\n", "Candidate", "(", "\n", "qualification", "=", "1", ",", "\n", "originalQualification", "=", "1", ",", "\n", "protectedAttributes", "=", "None", ",", "\n", "query", "=", "1", ",", "\n", "features", "=", "None", ",", "\n", "outlier_feature", "=", "0", ",", "\n", ")", ",", "\n", "Candidate", "(", "\n", "qualification", "=", "1", ",", "\n", "originalQualification", "=", "0.8", ",", "\n", "protectedAttributes", "=", "None", ",", "\n", "query", "=", "1", ",", "\n", "features", "=", "None", ",", "\n", "outlier_feature", "=", "0", ",", "\n", ")", ",", "\n", "]", "\n", "a", "=", "solve_lp_with_DTC", "(", "\n", "candidates", "=", "ranking", ",", "\n", "top_k", "=", "len", "(", "ranking", ")", ",", "\n", "outlier_objective", "=", "False", ",", "\n", "individual_fairness", "=", "True", ",", "\n", ")", "[", "0", "]", "\n", "assert", "np", ".", "allclose", "(", "a", ",", "[", "[", "0.745501", "]", ",", "[", "1", "-", "0.745501", "]", ",", "[", "1", "-", "0.745501", "]", ",", "[", "0.745501", "]", "]", ")", "\n", "return", "True", "\n", "", ""]], "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.tests.test_metrics.test_fairness_metric": [[11, 39], ["felix.src.candidate_creator.candidate.get_test_candidate", "felix.src.candidate_creator.candidate.get_test_candidate", "felix.src.candidate_creator.candidate.get_test_candidate", "felix.src.algorithms.plackett_luce.rankers.to_permutation_matrix", "felix.src.algorithms.plackett_luce.rankers.to_permutation_matrix", "felix.src.algorithms.stochastic_policy.StochasticPolicy", "felix.src.measures.run_metrics.runMetrics", "sum", "np.log2", "np.log2", "np.log2", "range", "len"], "function", ["home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.candidate_creator.candidate.get_test_candidate", "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.candidate_creator.candidate.get_test_candidate", "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.candidate_creator.candidate.get_test_candidate", "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.code_bvn_decomposition.bvn_decomposition.to_permutation_matrix", "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.code_bvn_decomposition.bvn_decomposition.to_permutation_matrix", "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.measures.run_metrics.runMetrics"], ["def", "test_fairness_metric", "(", ")", ":", "\n", "    ", "candidate_a", "=", "get_test_candidate", "(", "1", ",", "0", ")", "\n", "candidate_b", "=", "get_test_candidate", "(", "1", ",", "0", ")", "\n", "candidate_c", "=", "get_test_candidate", "(", "0", ",", "0", ")", "\n", "mat1", "=", "to_permutation_matrix", "(", "[", "0", ",", "2", "]", ",", "3", ")", "\n", "coef1", "=", "0.8", "\n", "mat2", "=", "to_permutation_matrix", "(", "[", "1", ",", "0", "]", ",", "3", ")", "\n", "coef2", "=", "0.2", "\n", "coefficient_matrix_tuples", "=", "[", "(", "coef1", ",", "mat1", ")", ",", "(", "coef2", ",", "mat2", ")", "]", "\n", "stochastic_policy", "=", "StochasticPolicy", "(", "\n", "query_number", "=", "1", ",", "\n", "candidates", "=", "[", "candidate_a", ",", "candidate_b", ",", "candidate_c", "]", ",", "\n", "coefficient_matrix_tuples", "=", "coefficient_matrix_tuples", ",", "\n", ")", "\n", "metrics", "=", "runMetrics", "(", "stochastic_policy", ")", "\n", "\n", "available_exposure", "=", "1", "+", "1", "/", "np", ".", "log2", "(", "3", ")", "\n", "target_exposure", "=", "[", "0.5", "*", "available_exposure", ",", "0.5", "*", "available_exposure", ",", "0", "]", "\n", "actual_exposure", "=", "[", "\n", "coef1", "*", "1", "+", "coef2", "*", "1", "/", "np", ".", "log2", "(", "3", ")", ",", "\n", "coef2", "*", "1", ",", "\n", "coef1", "*", "1", "/", "np", ".", "log2", "(", "3", ")", ",", "\n", "]", "\n", "EEL", "=", "sum", "(", "\n", "(", "target_exposure", "[", "i", "]", "-", "actual_exposure", "[", "i", "]", ")", "**", "2", "\n", "for", "i", "in", "range", "(", "len", "(", "target_exposure", ")", ")", "\n", ")", "\n", "assert", "metrics", "[", "\"EEL\"", "]", "==", "EEL", "\n", "\n"]], "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.tests.test_metrics.test_ndcg_and_outlier_metrics": [[41, 65], ["candidates.append", "candidates.append", "felix.src.algorithms.plackett_luce.rankers.to_permutation_matrix", "felix.src.algorithms.plackett_luce.rankers.to_permutation_matrix", "felix.src.algorithms.stochastic_policy.StochasticPolicy", "felix.src.measures.run_metrics.runMetrics", "felix.src.candidate_creator.candidate.get_test_candidate", "felix.src.candidate_creator.candidate.get_test_candidate", "felix.src.candidate_creator.candidate.get_test_candidate", "pytest.approx", "range", "np.log2"], "function", ["home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.code_bvn_decomposition.bvn_decomposition.to_permutation_matrix", "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.code_bvn_decomposition.bvn_decomposition.to_permutation_matrix", "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.measures.run_metrics.runMetrics", "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.candidate_creator.candidate.get_test_candidate", "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.candidate_creator.candidate.get_test_candidate", "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.candidate_creator.candidate.get_test_candidate"], ["", "def", "test_ndcg_and_outlier_metrics", "(", ")", ":", "\n", "    ", "candidates", "=", "[", "get_test_candidate", "(", "0", ",", "0", ")", "for", "_", "in", "range", "(", "8", ")", "]", "\n", "candidates", ".", "append", "(", "get_test_candidate", "(", "1", ",", "0", ")", ")", "\n", "candidates", ".", "append", "(", "get_test_candidate", "(", "1", ",", "1000", ")", ")", "\n", "mat1", "=", "to_permutation_matrix", "(", "[", "0", ",", "1", ",", "9", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", "]", ",", "10", ")", "\n", "mat2", "=", "to_permutation_matrix", "(", "[", "8", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", "]", ",", "10", ")", "\n", "coef1", "=", "0.8", "\n", "coef2", "=", "0.2", "\n", "\n", "coefficient_matrix_tuples", "=", "[", "(", "coef1", ",", "mat1", ")", ",", "(", "coef2", ",", "mat2", ")", "]", "\n", "stochastic_policy", "=", "StochasticPolicy", "(", "\n", "query_number", "=", "1", ",", "\n", "candidates", "=", "candidates", ",", "\n", "coefficient_matrix_tuples", "=", "coefficient_matrix_tuples", ",", "\n", ")", "\n", "metrics", "=", "runMetrics", "(", "stochastic_policy", ")", "\n", "\n", "outlier_count", "=", "0.8", "\n", "optimal_dcg", "=", "1", "+", "1", "/", "np", ".", "log2", "(", "3", ")", "\n", "expected_dcg", "=", "0.8", "*", "1", "/", "2", "+", "0.2", "*", "1", "\n", "ndcg5", "=", "expected_dcg", "/", "optimal_dcg", "\n", "\n", "assert", "metrics", "[", "\"outlier_count\"", "]", "==", "outlier_count", "\n", "assert", "metrics", "[", "\"ndcg5\"", "]", "==", "pytest", ".", "approx", "(", "ndcg5", ",", "0.0001", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.tests.test_metrics.test_expected_number_of_outliers": [[67, 94], ["expected_number_of_outliers"], "function", ["home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.measures.outlier_metrics.expected_number_of_outliers"], ["", "def", "test_expected_number_of_outliers", "(", ")", ":", "\n", "    ", "policy", "=", "[", "\n", "(", "\n", "0.4", ",", "\n", "[", "\n", "[", "1", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "1", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "]", ",", "\n", ")", ",", "\n", "(", "\n", "0.6", ",", "\n", "[", "\n", "[", "1", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "1", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "]", ",", "\n", ")", ",", "\n", "]", "\n", "scores", "=", "[", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "100000", "]", "\n", "assert", "expected_number_of_outliers", "(", "policy", ",", "scores", ",", "alpha", "=", "1.5", ")", "==", "0.6", "\n", "\n"]], "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.tests.test_metrics.test_probability_displayed_outlier_matrix": [[96, 104], ["probability_displayed_outlier_matrix"], "function", ["home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.measures.outlier_metrics.probability_displayed_outlier_matrix"], ["", "def", "test_probability_displayed_outlier_matrix", "(", ")", ":", "\n", "    ", "policy", "=", "[", "\n", "(", "0.4", ",", "[", "[", "1", ",", "0", "]", ",", "[", "0", ",", "1", "]", ",", "[", "0", ",", "0", "]", "]", ")", ",", "\n", "(", "0.35", ",", "[", "[", "0", ",", "1", "]", ",", "[", "0", ",", "0", "]", ",", "[", "1", ",", "0", "]", "]", ")", ",", "\n", "(", "0.25", ",", "[", "[", "0", ",", "1", "]", ",", "[", "1", ",", "0", "]", ",", "[", "0", ",", "0", "]", "]", ")", ",", "\n", "]", "\n", "scores", "=", "[", "1", ",", "2", ",", "2", "]", "\n", "assert", "probability_displayed_outlier_matrix", "(", "policy", ",", "scores", ",", "alpha", "=", "2.0", ")", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.tests.test_metrics.test_probability_displayed_outlier_matrix_2": [[106, 133], ["probability_displayed_outlier_matrix"], "function", ["home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.measures.outlier_metrics.probability_displayed_outlier_matrix"], ["", "def", "test_probability_displayed_outlier_matrix_2", "(", ")", ":", "\n", "    ", "policy", "=", "[", "\n", "(", "\n", "0.4", ",", "\n", "[", "\n", "[", "1", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "1", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "]", ",", "\n", ")", ",", "\n", "(", "\n", "0.6", ",", "\n", "[", "\n", "[", "1", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "1", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "]", ",", "\n", ")", ",", "\n", "]", "\n", "scores", "=", "[", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "100000", "]", "\n", "assert", "probability_displayed_outlier_matrix", "(", "policy", ",", "scores", ",", "alpha", "=", "1.5", ")", "==", "0.6", "\n", "\n"]], "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.tests.test_metrics.run_metrics_tests": [[135, 141], ["test_metrics.test_fairness_metric", "test_metrics.test_ndcg_and_outlier_metrics", "test_metrics.test_expected_number_of_outliers", "test_metrics.test_probability_displayed_outlier_matrix", "test_metrics.test_probability_displayed_outlier_matrix_2"], "function", ["home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.tests.test_metrics.test_fairness_metric", "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.tests.test_metrics.test_ndcg_and_outlier_metrics", "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.tests.test_metrics.test_expected_number_of_outliers", "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.tests.test_metrics.test_probability_displayed_outlier_matrix", "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.tests.test_metrics.test_probability_displayed_outlier_matrix_2"], ["", "def", "run_metrics_tests", "(", ")", ":", "\n", "    ", "test_fairness_metric", "(", ")", "\n", "test_ndcg_and_outlier_metrics", "(", ")", "\n", "test_expected_number_of_outliers", "(", ")", "\n", "test_probability_displayed_outlier_matrix", "(", ")", "\n", "test_probability_displayed_outlier_matrix_2", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.tests.test_bvn_decomposition.test_resampling_condition": [[11, 26], ["numpy.array", "numpy.array", "felix.src.code_bvn_decomposition.bvn_decomposition.resampling_condition", "felix.src.code_bvn_decomposition.bvn_decomposition.resampling_condition"], "function", ["home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.code_bvn_decomposition.bvn_decomposition.resampling_condition", "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.code_bvn_decomposition.bvn_decomposition.resampling_condition"], ["def", "test_resampling_condition", "(", ")", ":", "\n", "# Each row encodes one item at different positions.", "\n", "    ", "matrix_true", "=", "np", ".", "array", "(", "[", "[", "0", ",", "0", ",", "1", "]", ",", "[", "0", ",", "1", ",", "0", "]", ",", "[", "1", ",", "0", ",", "0", "]", "]", ")", "\n", "matrix_false", "=", "np", ".", "array", "(", "[", "[", "0", ",", "1", ",", "0", "]", ",", "[", "1", ",", "0", ",", "0", "]", ",", "[", "0", ",", "0", ",", "1", "]", "]", ")", "\n", "scores", "=", "[", "1.0", ",", "2.0", ",", "3.0", "]", "\n", "quality_measure", "=", "np", ".", "mean", "\n", "threshold", "=", "2", "\n", "top_k", "=", "2", "\n", "assert", "(", "\n", "resampling_condition", "(", "matrix_true", ",", "scores", ",", "quality_measure", ",", "threshold", ",", "top_k", ")", "\n", "==", "True", "\n", ")", "\n", "assert", "(", "\n", "resampling_condition", "(", "matrix_false", ",", "scores", ",", "quality_measure", ",", "threshold", ",", "top_k", ")", "\n", "==", "False", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.tests.test_bvn_decomposition.simple_test_bvn_with_test_resampling_condition": [[29, 54], ["numpy.array", "felix.src.code_bvn_decomposition.bvn_decomposition.birkhoff_von_neumann_decomposition", "sum"], "function", ["home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.code_bvn_decomposition.bvn_decomposition.birkhoff_von_neumann_decomposition"], ["", "def", "simple_test_bvn_with_test_resampling_condition", "(", ")", ":", "\n", "# Create a list of 20 identical candidates all with same relevance score and same learned score.", "\n", "    ", "D", "=", "np", ".", "array", "(", "\n", "[", "\n", "[", "0.2", ",", "0.4", ",", "0.2", ",", "0.2", "]", ",", "\n", "[", "0.2", ",", "0.2", ",", "0.2", ",", "0.4", "]", ",", "\n", "[", "0.2", ",", "0.2", ",", "0.4", ",", "0.2", "]", ",", "\n", "[", "0.4", ",", "0.2", ",", "0.2", ",", "0.2", "]", ",", "\n", "]", "\n", ")", "\n", "scores", "=", "[", "1", ",", "1", ",", "0", ",", "0", "]", "\n", "\n", "def", "test_quality_measure", "(", "scores", ")", ":", "\n", "        ", "return", "sum", "(", "scores", ")", "%", "2", "\n", "\n", "", "quality_measure", "=", "test_quality_measure", "\n", "top_k", "=", "2", "\n", "resampling_threshold", "=", "1", "\n", "a", "=", "birkhoff_von_neumann_decomposition", "(", "\n", "D", ",", "\n", "resampling_threshold", "=", "resampling_threshold", ",", "\n", "top_k", "=", "top_k", ",", "\n", "quality_measure", "=", "quality_measure", ",", "\n", "scores", "=", "scores", ",", "\n", "re_search_outliers", "=", "4", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.tests.test_bvn_decomposition.test_add_single_column_with_rest_probabilities": [[57, 68], ["felix.src.code_bvn_decomposition.random_stochastic_matrix.add_single_column_with_rest_probabilities", "numpy.allclose"], "function", ["home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.code_bvn_decomposition.random_stochastic_matrix.add_single_column_with_rest_probabilities"], ["", "def", "test_add_single_column_with_rest_probabilities", "(", ")", ":", "\n", "    ", "mat", "=", "[", "[", "1", "/", "4", ",", "1", "/", "2", "]", ",", "[", "1", "/", "4", ",", "0", "]", ",", "[", "1", "/", "4", ",", "1", "/", "3", "]", ",", "[", "1", "/", "4", ",", "1", "/", "6", "]", "]", "\n", "rest_added", "=", "add_single_column_with_rest_probabilities", "(", "mat", ")", "\n", "assert", "np", ".", "allclose", "(", "\n", "[", "\n", "[", "1", "/", "4", ",", "1", "/", "2", ",", "1", "/", "4", "]", ",", "\n", "[", "1", "/", "4", ",", "0", ",", "3", "/", "4", "]", ",", "\n", "[", "1", "/", "4", ",", "1", "/", "3", ",", "5", "/", "12", "]", ",", "\n", "[", "1", "/", "4", ",", "1", "/", "6", ",", "7", "/", "12", "]", ",", "\n", "]", ",", "\n", "rest_added", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.tests.test_bvn_decomposition.run_bvn_tests": [[71, 75], ["test_bvn_decomposition.test_resampling_condition", "test_bvn_decomposition.simple_test_bvn_with_test_resampling_condition", "test_bvn_decomposition.test_add_single_column_with_rest_probabilities"], "function", ["home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.tests.test_bvn_decomposition.test_resampling_condition", "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.tests.test_bvn_decomposition.simple_test_bvn_with_test_resampling_condition", "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.tests.test_bvn_decomposition.test_add_single_column_with_rest_probabilities"], ["", "def", "run_bvn_tests", "(", ")", ":", "\n", "    ", "test_resampling_condition", "(", ")", "\n", "simple_test_bvn_with_test_resampling_condition", "(", ")", "\n", "test_add_single_column_with_rest_probabilities", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.felix.experimental_setup.get_predicted_test_candidates_per_fold": [[28, 147], ["os.walk", "felix.src.candidate_creator.ranking_candidates_loader.RankingCandidatesLoader", "felix.src.candidate_creator.ranking_candidates_loader.RankingCandidatesLoader.load_learning_candidates", "felix.src.candidate_creator.ranking_candidates_loader.RankingCandidatesLoader", "felix.src.candidate_creator.ranking_candidates_loader.RankingCandidatesLoader.load_learning_candidates", "range", "copy.deepcopy", "len", "int", "train_rankings.keys", "len", "felix.src.algorithms.listnet.ListNet", "felix.src.algorithms.listnet.ListNet.fit", "copy.deepcopy", "felix.src.algorithms.listnet.ListNet.test", "numpy.random.randint", "random.sample", "sum", "to_remove_k.append", "copy.deepcopy", "ValueError", "numpy.min", "numpy.max", "len", "copy.deepcopy", "test_rankings[].candidates.append", "train_rankings.keys", "str"], "function", ["home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.candidate_creator.ranking_candidates_loader.RankingCandidatesLoader.load_learning_candidates", "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.candidate_creator.ranking_candidates_loader.RankingCandidatesLoader.load_learning_candidates", "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.algorithms.listnet.ListNet.fit", "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.algorithms.listnet.ListNet.test"], ["def", "get_predicted_test_candidates_per_fold", "(", "\n", "data_path", ",", "\n", "label_prediction", ",", "\n", "upsample", "=", "False", ",", "\n", "min_item_num", "=", "None", ",", "\n", "upsample_number", "=", "100", ",", "\n", "normalize_scores", "=", "True", ",", "\n", "normalization_epsilon", "=", "1e-4", ",", "\n", "repeat", "=", "1", ",", "\n", ")", ":", "\n", "    ", "\"\"\"\n    Returns the test ranking candidates, with either oracle labels or listnet predicted scores,\n    trained on training candidates.\n    \"\"\"", "\n", "\n", "predicted_test_candidates_per_fold", "=", "{", "}", "\n", "for", "dirpath", ",", "dirnames", ",", "files", "in", "os", ".", "walk", "(", "data_path", ")", ":", "\n", "\n", "        ", "if", "\"fold\"", "in", "dirpath", ":", "\n", "            ", "test_path", ",", "train_path", "=", "(", "\n", "dirpath", "+", "\"/\"", "+", "\"test.csv\"", ",", "\n", "dirpath", "+", "\"/\"", "+", "\"train.csv\"", ",", "\n", ")", "\n", "train_candidate_loader", "=", "RankingCandidatesLoader", "(", "train_path", ")", "\n", "(", "\n", "train_rankings_as_lists", ",", "\n", "train_rankings", ",", "\n", "train_queryNumbers", ",", "\n", ")", "=", "train_candidate_loader", ".", "load_learning_candidates", "(", "min_item_num", "=", "None", ")", "\n", "\n", "test_candidate_loader", "=", "RankingCandidatesLoader", "(", "test_path", ")", "\n", "(", "\n", "test_rankings_as_lists", ",", "\n", "test_rankings", ",", "\n", "test_queryNumbers", ",", "\n", ")", "=", "test_candidate_loader", ".", "load_learning_candidates", "(", "\n", "min_item_num", "=", "min_item_num", "\n", ")", "\n", "\n", "if", "upsample", ":", "\n", "# Upsample with random items from train queries, labeled as non-relevant.", "\n", "                ", "upsample_candidates", "=", "copy", ".", "deepcopy", "(", "train_rankings_as_lists", ")", "\n", "upsample_candidates", "=", "[", "\n", "c", "for", "c", "in", "upsample_candidates", "if", "c", ".", "originalQualification", "==", "0", "\n", "]", "\n", "for", "candidate", "in", "upsample_candidates", ":", "\n", "                    ", "candidate", ".", "qualification", "=", "0", "\n", "candidate", ".", "originalQualification", "=", "0", "\n", "", "for", "query", "in", "test_rankings", ":", "\n", "                    ", "num_candidates", "=", "len", "(", "test_rankings", "[", "query", "]", ".", "candidates", ")", "\n", "if", "num_candidates", "<", "upsample_number", ":", "\n", "                        ", "indices", "=", "np", ".", "random", ".", "randint", "(", "\n", "0", ",", "\n", "len", "(", "upsample_candidates", ")", ",", "\n", "size", "=", "upsample_number", "-", "num_candidates", ",", "\n", ")", "\n", "for", "i", "in", "indices", ":", "\n", "                            ", "new_candidate", "=", "copy", ".", "deepcopy", "(", "upsample_candidates", "[", "i", "]", ")", "\n", "new_candidate", ".", "query", "=", "query", "\n", "test_rankings", "[", "query", "]", ".", "candidates", ".", "append", "(", "new_candidate", ")", "\n", "\n", "", "", "", "", "for", "split", "in", "range", "(", "repeat", ")", ":", "\n", "                ", "num_train_rankings", "=", "len", "(", "train_rankings", ")", "\n", "size_train_set_split", "=", "int", "(", "1", "*", "num_train_rankings", ")", "\n", "train_set", "=", "{", "\n", "key", ":", "train_rankings", "[", "key", "]", "\n", "for", "key", "in", "random", ".", "sample", "(", "\n", "train_rankings", ".", "keys", "(", ")", ",", "size_train_set_split", "\n", ")", "\n", "}", "\n", "\n", "to_remove_k", "=", "[", "]", "\n", "for", "k", "in", "train_rankings", ".", "keys", "(", ")", ":", "\n", "                    ", "lv", "=", "[", "i", ".", "originalQualification", "for", "i", "in", "train_rankings", "[", "k", "]", ".", "candidates", "]", "\n", "if", "sum", "(", "lv", ")", "==", "0", ":", "\n", "                        ", "to_remove_k", ".", "append", "(", "k", ")", "\n", "", "", "for", "k", "in", "to_remove_k", ":", "\n", "                    ", "del", "train_set", "[", "k", "]", "\n", "", "if", "label_prediction", "==", "\"ListNet\"", ":", "\n", "                    ", "agent", "=", "ListNet", "(", "\n", "verbose", "=", "50", ",", "\n", "max_iter", "=", "10", ",", "\n", "val_ratio", "=", "0.2", ",", "\n", "n_thres_cand", "=", "100", ",", "\n", "batch_size", "=", "128", ",", "\n", ")", "\n", "agent", ".", "fit", "(", "\n", "candidate_dict", "=", "train_set", ",", "\n", ")", "\n", "\n", "# Estimate scores for the test data:", "\n", "test_rankings_predicted", "=", "copy", ".", "deepcopy", "(", "test_rankings", ")", "\n", "test_rankings_predicted", "=", "agent", ".", "test", "(", "\n", "candidates", "=", "test_rankings_predicted", ",", "noscore", "=", "True", "\n", ")", "\n", "", "elif", "label_prediction", "==", "\"oracle\"", ":", "\n", "                    ", "test_rankings_predicted", "=", "copy", ".", "deepcopy", "(", "test_rankings", ")", "\n", "# use the original labels as scores", "\n", "", "else", ":", "\n", "                    ", "ValueError", "(", "\n", "\"Please choose one of the implemented label prediction options\"", "\n", ")", "\n", "", "for", "query", "in", "test_rankings_predicted", ":", "\n", "                    ", "cand", "=", "test_rankings_predicted", "[", "query", "]", ".", "candidates", "\n", "if", "normalize_scores", ":", "\n", "                        ", "learned_scores", "=", "[", "candidate", ".", "learnedScores", "for", "candidate", "in", "cand", "]", "\n", "min_score", "=", "np", ".", "min", "(", "learned_scores", ")", "\n", "max_score", "=", "np", ".", "max", "(", "learned_scores", ")", "\n", "for", "candidate", "in", "cand", ":", "\n", "                            ", "candidate", ".", "learnedScores", "=", "(", "\n", "candidate", ".", "learnedScores", "-", "min_score", "\n", ")", "*", "(", "1", "-", "normalization_epsilon", ")", "/", "(", "\n", "max_score", "-", "min_score", "\n", ")", "+", "normalization_epsilon", "\n", "\n", "", "", "", "predicted_test_candidates_per_fold", "[", "\n", "dirpath", "+", "str", "(", "split", ")", "\n", "]", "=", "test_rankings_predicted", "\n", "", "", "", "return", "predicted_test_candidates_per_fold", "\n", "\n"]], "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.felix.experimental_setup.run_experiment": [[149, 334], ["datetime.datetime.now", "datetime.datetime.now", "print", "collections.defaultdict", "experimental_setup.get_predicted_test_candidates_per_fold", "print", "test_rankings.keys", "results.append", "print", "print", "query_candidates.sort", "sum", "str", "len", "felix.src.algorithms.plackett_luce.rankers.PLRanker", "felix.src.algorithms.plackett_luce.rankers.PLRanker.get_stochastic_policy", "print", "evalResults.append", "felix.src.algorithms.plackett_luce.rankers.DeterministicRanker", "felix.src.algorithms.plackett_luce.rankers.DeterministicRanker.get_stochastic_policy", "felix.src.measures.run_metrics.runMetrics", "len", "felix.src.algorithms.plackett_luce.rankers.PLRanker", "felix.src.algorithms.plackett_luce.rankers.PLRanker.get_stochastic_policy", "felix.src.algorithms.run_foeir.runFOEIR", "pl_ranker.get_stochastic_policy.compute_mrp", "mrp_matrices_fold.keys", "mrp_matrices_fold.keys"], "function", ["home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.felix.experimental_setup.get_predicted_test_candidates_per_fold", "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.plackett_luce.rankers.DeterministicRanker.get_stochastic_policy", "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.plackett_luce.rankers.DeterministicRanker.get_stochastic_policy", "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.measures.run_metrics.runMetrics", "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.plackett_luce.rankers.DeterministicRanker.get_stochastic_policy", "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.algorithms.run_foeir.runFOEIR", "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.algorithms.stochastic_policy.StochasticPolicy.compute_mrp"], ["", "def", "run_experiment", "(", "\n", "data_path", "=", "\"/data/TREC2020/features/fold\"", ",", "\n", "label_prediction", "=", "\"oracle\"", ",", "\n", "normalize_scores", "=", "True", ",", "\n", "normalization_epsilon", "=", "1e-4", ",", "\n", "plackett_luce", "=", "False", ",", "\n", "deterministic_ranker", "=", "False", ",", "\n", "uniform_stochastic_policy", "=", "False", ",", "\n", "lp_outlier_objective", "=", "False", ",", "\n", "fairness_constraint", "=", "\"individual_fairness\"", ",", "\n", "decomposition_method", "=", "\"outlier_resample\"", ",", "\n", "number_of_resamples", "=", "10", ",", "\n", "top_k", "=", "None", ",", "\n", "max_num_items", "=", "60", ",", "\n", "min_item_num", "=", "None", ",", "\n", "upsample", "=", "False", ",", "\n", "upsample_number", "=", "100", ",", "\n", "outlier_top_k", "=", "10", ",", "\n", "repeat", "=", "5", ",", "\n", "predicted_test_candidates_per_fold", "=", "{", "}", ",", "\n", "mrp_matrices", "=", "None", ",", "\n", ")", ":", "\n", "    ", "\"\"\"\n    Runs a fair ranking experiment. Returns results in form of a list of dictionaries, candidates with\n    predicted ranking scores and marginal rank probability matrices that can be used in next experiment.\n\n    data_path: str\n        path to data,\n    label_prediction: \"oracle\" or \"ListNet\"\n        method to predict labels,\n    normalize_scores: bool\n        if true predicted scores are normalized,\n    normalization_epsilon: float\n        epsilon used in normalization for more stability,\n    plackett_luce: bool\n        if true, plackett-luce model is used as probabilistic ranker,\n    deterministic_ranker: bool\n        if true, deterministic ranker is used,\n    uniform_stochastic_policy:bool\n        if true stochastic policy with uniform distribution over items is used as ranker,\n    lp_outlier_objective: bool\n        if true linear programming approach to fairness is used,\n    fairness_constraint: \"individual_fairness\" or \"group_fairness\"\n        kind of fairness being used (only if lp_outlier_objective is true),\n    decomposition_method: \"outlier_resample\" or vanilla_BvN\n        kind of decomposition method used (only if lp_outlier_objective is true),\n    number_of_resamples: int\n        number of resampling iterations to use if decomposition_method is 'resample',\n    top_k: None or int\n        length of the rankings if None all items are ranked,\n    max_num_items: int\n        maximum number of items to be used in the experiments,\n    min_item_num: int\n        minimum number of items that a query has to possess to be considered in experiment,\n    upsample: bool\n        if true number of candidates gets upsampled,\n    upsample_number: int\n        number to which candidates get upsampled if upsample is true,\n    outlier_top_k: int\n        number of top candidates in ranking to consider for outlier metrics,\n    repeat: int\n        number of times to run the experiment with different train/val splits,\n    predicted_test_candidates_per_fold: dict\n        if non-empty, predetermined labels are used instead of re-determining the labels,\n    mrp_matrices: None or dict\n        if not None, predetermined stochastic matrices are used instead of re-determining them,\n    \"\"\"", "\n", "results", "=", "[", "]", "\n", "if", "mrp_matrices", "is", "None", ":", "\n", "        ", "mrp_matrices", "=", "defaultdict", "(", "dict", ")", "\n", "\n", "", "startTime", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "\n", "# If there have not been any predicted candidates inputted, get them and predict their score.", "\n", "if", "not", "predicted_test_candidates_per_fold", ":", "\n", "        ", "predicted_test_candidates_per_fold", "=", "get_predicted_test_candidates_per_fold", "(", "\n", "path", "+", "data_path", ",", "\n", "label_prediction", ",", "\n", "upsample", ",", "\n", "min_item_num", "=", "min_item_num", ",", "\n", "upsample_number", "=", "upsample_number", ",", "\n", "normalize_scores", "=", "normalize_scores", ",", "\n", "normalization_epsilon", "=", "normalization_epsilon", ",", "\n", "repeat", "=", "repeat", ",", "\n", ")", "\n", "print", "(", "path", "+", "data_path", ")", "\n", "\n", "#################################################################", "\n", "", "for", "fold", "in", "predicted_test_candidates_per_fold", ":", "\n", "        ", "mrp_matrices_fold", "=", "mrp_matrices", "[", "fold", "]", "\n", "test_rankings", "=", "predicted_test_candidates_per_fold", "[", "fold", "]", "\n", "\n", "queryNumbers", "=", "test_rankings", ".", "keys", "(", ")", "\n", "\n", "evalResults", "=", "[", "]", "\n", "\n", "progress_monitor", "=", "0", "\n", "\n", "for", "query", "in", "queryNumbers", ":", "\n", "            ", "print", "(", "\"Query number: \"", ",", "query", ")", "\n", "progress_monitor", "+=", "1", "\n", "print", "(", "\n", "\"************ \"", ",", "\n", "progress_monitor", ",", "\n", "\" / \"", ",", "\n", "len", "(", "queryNumbers", ")", ",", "\n", "\" ************\"", ",", "\n", ")", "\n", "\n", "query_candidates", "=", "test_rankings", "[", "query", "]", ".", "candidates", "\n", "\n", "# sorting the ranking in accordance with its original scores", "\n", "# to be able to only use the top_k items.", "\n", "query_candidates", ".", "sort", "(", "\n", "key", "=", "lambda", "candidate", ":", "candidate", ".", "qualification", ",", "reverse", "=", "True", "\n", ")", "\n", "query_candidates", "=", "query_candidates", "[", ":", "max_num_items", "]", "\n", "\n", "num_protected", "=", "sum", "(", "\n", "[", "candidate", ".", "isProtected", "for", "candidate", "in", "query_candidates", "]", "\n", ")", "\n", "\n", "# If we work with group fairness check whether there is at least", "\n", "# one protected/nonprotected item in the ranking.", "\n", "if", "fairness_constraint", "==", "\"group_fairness\"", "and", "num_protected", "in", "[", "\n", "0", ",", "\n", "len", "(", "query_candidates", ")", ",", "\n", "]", ":", "\n", "                ", "continue", "\n", "\n", "", "if", "plackett_luce", ":", "\n", "                ", "pl_ranker", "=", "PLRanker", "(", "query_candidates", ",", "1000", ")", "\n", "stochastic_policy", "=", "pl_ranker", ".", "get_stochastic_policy", "(", "\n", "top_k", "=", "top_k", ",", "query", "=", "query", "\n", ")", "\n", "\n", "", "elif", "deterministic_ranker", ":", "\n", "                ", "ranker", "=", "DeterministicRanker", "(", "query_candidates", ")", "\n", "stochastic_policy", "=", "ranker", ".", "get_stochastic_policy", "(", "\n", "top_k", "=", "top_k", ",", "query", "=", "query", "\n", ")", "\n", "\n", "", "elif", "uniform_stochastic_policy", ":", "\n", "                ", "pl_ranker", "=", "PLRanker", "(", "query_candidates", ",", "1000", ",", "uniform_scores", "=", "True", ")", "\n", "stochastic_policy", "=", "pl_ranker", ".", "get_stochastic_policy", "(", "\n", "top_k", "=", "top_k", ",", "query", "=", "query", "\n", ")", "\n", "\n", "", "elif", "fairness_constraint", ":", "\n", "                ", "stochastic_policy", ",", "isDTC", "=", "runFOEIR", "(", "\n", "query_candidates", ",", "\n", "outlier_objective", "=", "lp_outlier_objective", ",", "\n", "individual_fairness", "=", "(", "fairness_constraint", "==", "\"individual_fairness\"", ")", ",", "\n", "top_k", "=", "top_k", ",", "\n", "decomposition_method", "=", "decomposition_method", ",", "\n", "number_of_resamples", "=", "number_of_resamples", ",", "\n", "mrp_matrix", "=", "mrp_matrices_fold", "[", "query", "]", "\n", "if", "query", "in", "mrp_matrices_fold", ".", "keys", "(", ")", "\n", "else", "None", ",", "\n", ")", "\n", "if", "(", "\n", "query", "not", "in", "mrp_matrices_fold", ".", "keys", "(", ")", "\n", "and", "stochastic_policy", "is", "not", "None", "\n", ")", ":", "\n", "                    ", "mrp_matrices_fold", "[", "query", "]", "=", "stochastic_policy", ".", "compute_mrp", "(", ")", "\n", "\n", "", "", "if", "stochastic_policy", "is", "None", ":", "\n", "                ", "print", "(", "\n", "\"No stochastic policy could be calculated for query: \"", ",", "query", "\n", ")", "\n", "", "else", ":", "\n", "                ", "evalResults", ".", "append", "(", "\n", "runMetrics", "(", "\n", "stochastic_policy", ",", "\n", "outlier_top_k", "=", "outlier_top_k", ",", "\n", ")", "\n", ")", "\n", "", "", "mrp_matrices", "[", "fold", "]", "=", "mrp_matrices_fold", "\n", "listResults", "=", "evalResults", "\n", "\n", "results", ".", "append", "(", "listResults", ")", "\n", "\n", "", "endTime", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "print", "(", "\"Total time of execution: \"", "+", "str", "(", "endTime", "-", "startTime", ")", ")", "\n", "return", "results", ",", "predicted_test_candidates_per_fold", ",", "mrp_matrices", "\n", "\n"]], "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.felix.experimental_setup.table_final_results": [[336, 390], ["pathlib.Path().mkdir", "pandas.DataFrame", "print", "open", "pickle.dump", "open.close", "collections.defaultdict", "tabulate.tabulate", "pd.DataFrame.to_csv", "pathlib.Path", "pandas.DataFrame", "fold_dict[].append", "fold_dict[].append", "fold_dict[].append", "fold_dict[].append", "fold_dict[].append", "fold_dict[].append", "fold_dict[].append", "fold_results[].mean", "fold_results[].mean", "fold_results[].mean", "fold_results[].mean", "fold_results[].mean", "fold_results[].mean", "fold_results[].mean", "str", "str", "str", "str", "str", "str", "str", "str", "round", "str", "round", "str", "round", "str", "round", "str", "round", "str", "round", "str", "round", "round", "numpy.std", "round", "numpy.std", "round", "numpy.std", "round", "numpy.std", "round", "numpy.std", "round", "numpy.std", "round", "numpy.std", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean"], "function", ["None"], ["", "def", "table_final_results", "(", "results", ",", "file_name", "=", "None", ",", "raw_data_file_name", "=", "None", ")", ":", "\n", "    ", "result_df", "=", "{", "}", "\n", "Path", "(", "result_path", ")", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "if", "raw_data_file_name", ":", "\n", "        ", "a_file", "=", "open", "(", "result_path", "+", "raw_data_file_name", ",", "\"wb\"", ")", "\n", "pickle", ".", "dump", "(", "results", ",", "a_file", ")", "\n", "a_file", ".", "close", "(", ")", "\n", "\n", "", "for", "experiment", "in", "results", ":", "\n", "        ", "fold_dict", "=", "defaultdict", "(", "list", ")", "\n", "for", "fold_results", "in", "results", "[", "experiment", "]", ":", "\n", "            ", "fold_results", "=", "pd", ".", "DataFrame", "(", "fold_results", ")", "\n", "\n", "fold_dict", "[", "\"ndcg1\"", "]", ".", "append", "(", "fold_results", "[", "\"ndcg1\"", "]", ".", "mean", "(", ")", ")", "\n", "fold_dict", "[", "\"ndcg5\"", "]", ".", "append", "(", "fold_results", "[", "\"ndcg5\"", "]", ".", "mean", "(", ")", ")", "\n", "fold_dict", "[", "\"ndcg10\"", "]", ".", "append", "(", "fold_results", "[", "\"ndcg10\"", "]", ".", "mean", "(", ")", ")", "\n", "fold_dict", "[", "\"outlierness_omit\"", "]", ".", "append", "(", "\n", "fold_results", "[", "\"outlierness_omit\"", "]", ".", "mean", "(", ")", "\n", ")", "\n", "fold_dict", "[", "\"outlier_count\"", "]", ".", "append", "(", "fold_results", "[", "\"outlier_count\"", "]", ".", "mean", "(", ")", ")", "\n", "fold_dict", "[", "\"outlier_probability\"", "]", ".", "append", "(", "\n", "fold_results", "[", "\"outlier_probability\"", "]", ".", "mean", "(", ")", "\n", ")", "\n", "fold_dict", "[", "\"EEL\"", "]", ".", "append", "(", "fold_results", "[", "\"EEL\"", "]", ".", "mean", "(", ")", ")", "\n", "", "result_df", "[", "experiment", "]", "=", "{", "\n", "\"ndcg1\"", ":", "str", "(", "round", "(", "np", ".", "mean", "(", "fold_dict", "[", "\"ndcg1\"", "]", ")", ",", "4", ")", ")", "\n", "+", "\"+-\"", "\n", "+", "str", "(", "round", "(", "np", ".", "std", "(", "fold_dict", "[", "\"ndcg1\"", "]", ")", ",", "6", ")", ")", ",", "\n", "\"ndcg5\"", ":", "str", "(", "round", "(", "np", ".", "mean", "(", "fold_dict", "[", "\"ndcg5\"", "]", ")", ",", "4", ")", ")", "\n", "+", "\"+-\"", "\n", "+", "str", "(", "round", "(", "np", ".", "std", "(", "fold_dict", "[", "\"ndcg5\"", "]", ")", ",", "6", ")", ")", ",", "\n", "\"ndcg10\"", ":", "str", "(", "round", "(", "np", ".", "mean", "(", "fold_dict", "[", "\"ndcg10\"", "]", ")", ",", "4", ")", ")", "\n", "+", "\"+-\"", "\n", "+", "str", "(", "round", "(", "np", ".", "std", "(", "fold_dict", "[", "\"ndcg10\"", "]", ")", ",", "6", ")", ")", ",", "\n", "\"outlierness_omit\"", ":", "str", "(", "round", "(", "np", ".", "mean", "(", "fold_dict", "[", "\"outlierness_omit\"", "]", ")", ",", "4", ")", ")", "\n", "+", "\"+-\"", "\n", "+", "str", "(", "round", "(", "np", ".", "std", "(", "fold_dict", "[", "\"outlierness_omit\"", "]", ")", ",", "4", ")", ")", ",", "\n", "\"outlier_count\"", ":", "str", "(", "round", "(", "np", ".", "mean", "(", "fold_dict", "[", "\"outlier_count\"", "]", ")", ",", "4", ")", ")", "\n", "+", "\"+-\"", "\n", "+", "str", "(", "round", "(", "np", ".", "std", "(", "fold_dict", "[", "\"outlier_count\"", "]", ")", ",", "4", ")", ")", ",", "\n", "\"outlier_probability\"", ":", "str", "(", "\n", "round", "(", "np", ".", "mean", "(", "fold_dict", "[", "\"outlier_probability\"", "]", ")", ",", "4", ")", "\n", ")", "\n", "+", "\"+-\"", "\n", "+", "str", "(", "round", "(", "np", ".", "std", "(", "fold_dict", "[", "\"outlier_probability\"", "]", ")", ",", "4", ")", ")", ",", "\n", "\"EEL\"", ":", "str", "(", "round", "(", "np", ".", "mean", "(", "fold_dict", "[", "\"EEL\"", "]", ")", ",", "4", ")", ")", "\n", "+", "\"+-\"", "\n", "+", "str", "(", "round", "(", "np", ".", "std", "(", "fold_dict", "[", "\"EEL\"", "]", ")", ",", "4", ")", ")", ",", "\n", "}", "\n", "", "result_df", "=", "pd", ".", "DataFrame", "(", "result_df", ")", "\n", "print", "(", "tabulate", "(", "result_df", ",", "headers", "=", "\"keys\"", ",", "tablefmt", "=", "\"psql\"", ")", ")", "\n", "if", "file_name", "is", "not", "None", ":", "\n", "        ", "path", "=", "result_path", "+", "file_name", "\n", "result_df", ".", "to_csv", "(", "path", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.algorithms.net.MLPListNet.__init__": [[12, 21], ["chainer.Chain.__init__", "chainer.Linear", "chainer.Linear", "chainer.Linear", "chainer.Linear", "chainer.Linear", "chainer.Linear", "chainer.Linear", "chainer.Linear", "chainer.BatchNormalization", "chainer.BatchNormalization", "chainer.BatchNormalization", "chainer.BatchNormalization", "chainer.BatchNormalization", "chainer.BatchNormalization"], "methods", ["home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.candidate_creator.candidate.Candidate.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_in", ",", "n_hidden1", ",", "n_hidden2", ",", "n_hidden3", ")", ":", "\n", "        ", "super", "(", "MLPListNet", ",", "self", ")", ".", "__init__", "(", "\n", "l1", "=", "L", ".", "Linear", "(", "n_in", ",", "n_hidden1", ")", ",", "\n", "l2", "=", "L", ".", "Linear", "(", "n_hidden1", ",", "n_hidden2", ")", ",", "\n", "l3", "=", "L", ".", "Linear", "(", "n_hidden2", ",", "n_hidden3", ")", ",", "\n", "l4", "=", "L", ".", "Linear", "(", "n_hidden3", ",", "1", ")", ",", "\n", "bnorm1", "=", "L", ".", "BatchNormalization", "(", "n_hidden1", ")", ",", "\n", "bnorm2", "=", "L", ".", "BatchNormalization", "(", "n_hidden2", ")", ",", "\n", "bnorm3", "=", "L", ".", "BatchNormalization", "(", "n_hidden3", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.algorithms.net.MLPListNet.__call__": [[23, 30], ["chainer.relu", "chainer.relu", "chainer.relu", "chainer.relu", "chainer.relu", "chainer.relu", "net.MLPListNet.l4", "net.MLPListNet.bnorm1", "net.MLPListNet.bnorm2", "net.MLPListNet.bnorm3", "net.MLPListNet.l1", "net.MLPListNet.l2", "net.MLPListNet.l3"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "x", ")", ":", "\n", "        ", "h1", "=", "F", ".", "relu", "(", "self", ".", "bnorm1", "(", "self", ".", "l1", "(", "x", ")", ")", ")", "\n", "# h1 = F.dropout(h1)", "\n", "h2", "=", "F", ".", "relu", "(", "self", ".", "bnorm2", "(", "self", ".", "l2", "(", "h1", ")", ")", ")", "\n", "# h2 = F.dropout(h2)", "\n", "h3", "=", "F", ".", "relu", "(", "self", ".", "bnorm3", "(", "self", ".", "l3", "(", "h2", ")", ")", ")", "\n", "return", "self", ".", "l4", "(", "h3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.algorithms.net.RankNet.__init__": [[33, 35], ["chainer.Chain.__init__"], "methods", ["home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.candidate_creator.candidate.Candidate.__init__"], ["    ", "def", "__init__", "(", "self", ",", "predictor", ")", ":", "\n", "        ", "super", "(", "RankNet", ",", "self", ")", ".", "__init__", "(", "predictor", "=", "predictor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.algorithms.net.RankNet.__call__": [[36, 50], ["net.RankNet.predictor", "net.RankNet.predictor", "chainer.math.exponential.Log", "chainer.math.exponential.Log", "chainer.math.exponential.Exp", "chainer.math.exponential.Exp"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "x_i", ",", "x_j", ",", "t_i", ",", "t_j", ")", ":", "\n", "        ", "s_i", "=", "self", ".", "predictor", "(", "x_i", ")", "\n", "s_j", "=", "self", ".", "predictor", "(", "x_j", ")", "\n", "s_diff", "=", "s_i", "-", "s_j", "\n", "if", "t_i", ".", "data", ">", "t_j", ".", "data", ":", "\n", "            ", "S_ij", "=", "1", "\n", "", "elif", "t_i", ".", "data", "<", "t_j", ".", "data", ":", "\n", "            ", "S_ij", "=", "-", "1", "\n", "", "else", ":", "\n", "            ", "S_ij", "=", "0", "\n", "", "self", ".", "loss", "=", "(", "1", "-", "S_ij", ")", "*", "s_diff", "/", "2.0", "+", "F", ".", "math", ".", "exponential", ".", "Log", "(", ")", "(", "\n", "1", "+", "F", ".", "math", ".", "exponential", ".", "Exp", "(", ")", "(", "-", "s_diff", ")", "\n", ")", "\n", "return", "self", ".", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.algorithms.stochastic_policy.StochasticPolicy.__init__": [[49, 53], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "query_number", ",", "candidates", ",", "coefficient_matrix_tuples", ":", "list", ")", ":", "\n", "        ", "self", ".", "query_number", "=", "query_number", "\n", "self", ".", "coefficients_matrix_tuples", "=", "coefficient_matrix_tuples", "\n", "self", ".", "candidates", "=", "candidates", "\n", "\n"]], "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.algorithms.stochastic_policy.StochasticPolicy.from_mrp": [[54, 90], ["cls", "felix.src.code_bvn_decomposition.bvn_decomposition.birkhoff_von_neumann_decomposition", "felix.src.code_bvn_decomposition.bvn_decomposition.birkhoff_von_neumann_decomposition", "functools.partial"], "methods", ["home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.code_bvn_decomposition.bvn_decomposition.birkhoff_von_neumann_decomposition", "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.code_bvn_decomposition.bvn_decomposition.birkhoff_von_neumann_decomposition"], ["", "@", "classmethod", "\n", "def", "from_mrp", "(", "\n", "cls", ",", "\n", "marginal_rank_probability_matrix", ",", "\n", "candidates", ",", "\n", "decomposition_method", "=", "\"vanilla_BvN\"", ",", "\n", "query_number", "=", "None", ",", "\n", "atol", "=", "1e-5", ",", "\n", "top_k", "=", "10", ",", "\n", "number_of_resamples", "=", "10", ",", "\n", "outlier_threshold", "=", "2.5", ",", "\n", ")", ":", "\n", "        ", "if", "decomposition_method", "==", "\"vanilla_BvN\"", ":", "\n", "            ", "decomposition", "=", "birkhoff_von_neumann_decomposition", "(", "\n", "marginal_rank_probability_matrix", "\n", ")", "\n", "", "elif", "decomposition_method", "==", "\"outlier_resample\"", ":", "\n", "            ", "scores", "=", "[", "candidate", ".", "outlier_feature", "for", "candidate", "in", "candidates", "]", "\n", "decomposition", "=", "birkhoff_von_neumann_decomposition", "(", "\n", "marginal_rank_probability_matrix", ",", "\n", "re_search_outliers", "=", "number_of_resamples", ",", "\n", "scores", "=", "scores", ",", "\n", "quality_measure", "=", "partial", "(", "count_outliers_zscore", ",", "alpha", "=", "outlier_threshold", ")", ",", "\n", "top_k", "=", "top_k", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "# Remove extremely matrices with extremely small coefficients to not have rounding errors", "\n", "# blow up decomposition size.", "\n", "", "decomposition", "=", "[", "(", "c", ",", "m", ")", "for", "c", ",", "m", "in", "decomposition", "if", "c", ">", "atol", "]", "\n", "\n", "return", "cls", "(", "\n", "query_number", "=", "query_number", ",", "\n", "candidates", "=", "candidates", ",", "\n", "coefficient_matrix_tuples", "=", "decomposition", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.algorithms.stochastic_policy.StochasticPolicy.compute_mrp": [[92, 97], ["numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.code_bvn_decomposition.bvn_decomposition.zeros"], ["", "def", "compute_mrp", "(", "self", ")", ":", "\n", "        ", "mrp", "=", "np", ".", "zeros", "(", "self", ".", "coefficients_matrix_tuples", "[", "0", "]", "[", "1", "]", ".", "shape", ")", "\n", "for", "coeff", ",", "pmatrix", "in", "self", ".", "coefficients_matrix_tuples", ":", "\n", "            ", "mrp", "+=", "coeff", "*", "pmatrix", "\n", "", "return", "mrp", "\n", "\n"]], "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.algorithms.stochastic_policy.StochasticPolicy.is_valid_policy": [[98, 112], ["numpy.isclose", "print", "sum", "sum", "stochastic_policy.is_permutation_matrix", "print"], "methods", ["home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.algorithms.stochastic_policy.is_permutation_matrix"], ["", "def", "is_valid_policy", "(", "self", ")", ":", "\n", "        ", "is_valid", "=", "True", "\n", "if", "not", "np", ".", "isclose", "(", "sum", "(", "c", "for", "c", ",", "_", "in", "self", ".", "coefficients_matrix_tuples", ")", ",", "1", ")", ":", "\n", "            ", "print", "(", "\n", "\"Coefficients do not sum to 1: \"", ",", "\n", "sum", "(", "c", "for", "c", ",", "_", "in", "self", ".", "coefficients_matrix_tuples", ")", ",", "\n", ")", "\n", "is_valid", "=", "False", "\n", "\n", "", "for", "matrix", "in", "[", "m", "for", "_", ",", "m", "in", "self", ".", "coefficients_matrix_tuples", "]", ":", "\n", "            ", "if", "not", "is_permutation_matrix", "(", "matrix", ")", ":", "\n", "                ", "print", "(", "\"Contains matrices that are not permutation matrices\"", ")", "\n", "is_valid", "=", "False", "\n", "", "", "return", "is_valid", "\n", "\n"]], "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.algorithms.stochastic_policy.StochasticPolicy.expected_outlierness": [[113, 124], ["len", "numpy.matmul", "felix.src.measures.outlier_metrics.measure_outlierness"], "methods", ["home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.measures.outlier_metrics.measure_outlierness"], ["", "def", "expected_outlierness", "(", "self", ",", "k", "=", "None", ",", "outlier_threshold", "=", "2.5", ")", ":", "\n", "        ", "if", "k", "is", "None", ":", "\n", "            ", "k", "=", "len", "(", "self", ".", "coefficients_matrix_tuples", "[", "0", "]", "[", "1", "]", "[", "0", "]", ")", "\n", "", "expected_outlireness", "=", "0", "\n", "scores", "=", "[", "candidate", ".", "outlier_feature", "for", "candidate", "in", "self", ".", "candidates", "]", "\n", "for", "coefficient", ",", "matrix", "in", "self", ".", "coefficients_matrix_tuples", ":", "\n", "            ", "top_k_scores", "=", "np", ".", "matmul", "(", "scores", ",", "matrix", ")", "[", ":", "k", "]", "\n", "expected_outlireness", "+=", "coefficient", "*", "measure_outlierness", "(", "\n", "top_k_scores", ",", "alpha", "=", "outlier_threshold", "\n", ")", "\n", "", "return", "expected_outlireness", "\n", "\n"]], "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.algorithms.stochastic_policy.StochasticPolicy.expected_number_of_outliers": [[125, 136], ["len", "numpy.matmul", "felix.src.measures.outlier_metrics.count_outliers_zscore"], "methods", ["home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.measures.outlier_metrics.count_outliers_zscore"], ["", "def", "expected_number_of_outliers", "(", "self", ",", "k", "=", "None", ",", "outlier_threshold", "=", "2.5", ")", ":", "\n", "        ", "if", "k", "is", "None", ":", "\n", "            ", "k", "=", "len", "(", "self", ".", "coefficients_matrix_tuples", "[", "0", "]", "[", "1", "]", "[", "0", "]", ")", "\n", "", "expected_outlireness", "=", "0", "\n", "scores", "=", "[", "candidate", ".", "outlier_feature", "for", "candidate", "in", "self", ".", "candidates", "]", "\n", "for", "coefficient", ",", "matrix", "in", "self", ".", "coefficients_matrix_tuples", ":", "\n", "            ", "top_k_scores", "=", "np", ".", "matmul", "(", "scores", ",", "matrix", ")", "[", ":", "k", "]", "\n", "expected_outlireness", "+=", "coefficient", "*", "count_outliers_zscore", "(", "\n", "top_k_scores", ",", "alpha", "=", "outlier_threshold", "\n", ")", "\n", "", "return", "expected_outlireness", "\n", "\n"]], "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.algorithms.stochastic_policy.StochasticPolicy.probability_of_displaying_an_outlier_ranking": [[137, 149], ["len", "numpy.matmul", "felix.src.measures.outlier_metrics.count_outliers_zscore"], "methods", ["home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.measures.outlier_metrics.count_outliers_zscore"], ["", "def", "probability_of_displaying_an_outlier_ranking", "(", "\n", "self", ",", "k", "=", "None", ",", "outlier_threshold", "=", "2.5", "\n", ")", ":", "\n", "        ", "if", "k", "is", "None", ":", "\n", "            ", "k", "=", "len", "(", "self", ".", "coefficients_matrix_tuples", "[", "0", "]", "[", "1", "]", "[", "0", "]", ")", "\n", "", "prob", "=", "0", "\n", "scores", "=", "[", "candidate", ".", "outlier_feature", "for", "candidate", "in", "self", ".", "candidates", "]", "\n", "for", "coefficient", ",", "matrix", "in", "self", ".", "coefficients_matrix_tuples", ":", "\n", "            ", "top_k_scores", "=", "np", ".", "matmul", "(", "scores", ",", "matrix", ")", "[", ":", "k", "]", "\n", "if", "count_outliers_zscore", "(", "top_k_scores", ",", "alpha", "=", "outlier_threshold", ")", ">=", "1", ":", "\n", "                ", "prob", "+=", "coefficient", "\n", "", "", "return", "prob", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.algorithms.stochastic_policy.is_doubly_stochastic_matrix": [[13, 34], ["len", "len", "numpy.any", "numpy.any", "numpy.allclose", "print", "numpy.all", "print", "print", "print", "numpy.ones", "numpy.less_equal", "sum", "numpy.ones", "range", "sum", "range"], "function", ["None"], ["def", "is_doubly_stochastic_matrix", "(", "matrix", ")", ":", "\n", "    ", "k", "=", "len", "(", "matrix", "[", "0", "]", ")", "\n", "n", "=", "len", "(", "matrix", ")", "\n", "doubly_stochastic", "=", "True", "\n", "if", "not", "np", ".", "allclose", "(", "\n", "[", "sum", "(", "[", "row", "[", "j", "]", "for", "row", "in", "matrix", "]", ")", "for", "j", "in", "range", "(", "k", ")", "]", ",", "np", ".", "ones", "(", "k", ")", ",", "atol", "=", "1e-04", "\n", ")", ":", "\n", "        ", "print", "(", "\"Columns do not sum to 1\"", ")", "\n", "doubly_stochastic", "=", "False", "\n", "", "if", "not", "np", ".", "all", "(", "\n", "np", ".", "less_equal", "(", "[", "sum", "(", "[", "row", "[", "j", "]", "for", "row", "in", "matrix", ".", "T", "]", ")", "for", "j", "in", "range", "(", "n", ")", "]", ",", "np", ".", "ones", "(", "n", ")", ")", "\n", ")", ":", "\n", "        ", "print", "(", "\"Sum of rows are smaller than 1\"", ")", "\n", "doubly_stochastic", "=", "False", "\n", "", "if", "np", ".", "any", "(", "matrix", "<", "-", "1e-5", ")", ":", "\n", "        ", "print", "(", "\"Values smaller than 0\"", ")", "\n", "doubly_stochastic", "=", "False", "\n", "", "if", "np", ".", "any", "(", "matrix", ">", "1", ")", ":", "\n", "        ", "print", "(", "\"Values bigger than 1\"", ")", "\n", "doubly_stochastic", "=", "False", "\n", "", "return", "doubly_stochastic", "\n", "\n"]], "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.algorithms.stochastic_policy.is_permutation_matrix": [[36, 46], ["len", "stochastic_policy.is_doubly_stochastic_matrix", "print", "numpy.allclose", "numpy.allclose", "numpy.min", "numpy.zeros", "numpy.max", "numpy.ones"], "function", ["home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.algorithms.stochastic_policy.is_doubly_stochastic_matrix", "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.code_bvn_decomposition.bvn_decomposition.zeros"], ["", "def", "is_permutation_matrix", "(", "matrix", ")", ":", "\n", "    ", "k", "=", "len", "(", "matrix", "[", "0", "]", ")", "\n", "permutation", "=", "is_doubly_stochastic_matrix", "(", "matrix", ")", "\n", "if", "not", "(", "\n", "np", ".", "allclose", "(", "np", ".", "min", "(", "matrix", ",", "axis", "=", "0", ")", ",", "np", ".", "zeros", "(", "k", ")", ",", "atol", "=", "1e-05", ")", "\n", "and", "np", ".", "allclose", "(", "np", ".", "max", "(", "matrix", ",", "axis", "=", "0", ")", ",", "np", ".", "ones", "(", "k", ")", ",", "atol", "=", "1e-05", ")", "\n", ")", ":", "\n", "        ", "print", "(", "\"Not a permutation matrix\"", ")", "\n", "permutation", "=", "False", "\n", "", "return", "permutation", "\n", "\n"]], "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.algorithms.listnet.RankingModel.prepare_data_from_candidate_list": [[32, 49], ["numpy.array().astype", "numpy.array().astype", "numpy.array", "numpy.array"], "methods", ["None"], ["    ", "def", "prepare_data_from_candidate_list", "(", "self", ",", "candidate_dict", ")", ":", "\n", "        ", "labels", "=", "[", "\n", "np", ".", "array", "(", "\n", "[", "\n", "candidate", ".", "originalQualification", "\n", "for", "candidate", "in", "candidate_dict", "[", "query", "]", ".", "candidates", "\n", "]", "\n", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "for", "query", "in", "candidate_dict", "\n", "]", "\n", "X", "=", "[", "\n", "np", ".", "array", "(", "\n", "[", "candidate", ".", "features", "for", "candidate", "in", "candidate_dict", "[", "query", "]", ".", "candidates", "]", "\n", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "for", "query", "in", "candidate_dict", "\n", "]", "\n", "return", "labels", ",", "X", "\n", "\n"]], "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.algorithms.listnet.RankingModel.prepare_train_data_from_candidates_dict": [[50, 57], ["listnet.RankingModel.prepare_data_from_candidate_list", "len", "numpy.random.permutation", "len", "int", "int"], "methods", ["home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.algorithms.listnet.RankingModel.prepare_data_from_candidate_list"], ["", "def", "prepare_train_data_from_candidates_dict", "(", "self", ",", "candidate_dict", ")", ":", "\n", "        ", "self", ".", "labels", ",", "self", ".", "X", "=", "self", ".", "prepare_data_from_candidate_list", "(", "candidate_dict", ")", "\n", "self", ".", "num_sessions", "=", "len", "(", "self", ".", "X", ")", "\n", "perm_all", "=", "np", ".", "random", ".", "permutation", "(", "self", ".", "num_sessions", ")", "\n", "self", ".", "train_indices", "=", "perm_all", "[", "int", "(", "self", ".", "val_ratio", "*", "self", ".", "num_sessions", ")", ":", "]", "\n", "self", ".", "val_indices", "=", "perm_all", "[", ":", "int", "(", "self", ".", "val_ratio", "*", "self", ".", "num_sessions", ")", "]", "\n", "self", ".", "dim", "=", "len", "(", "self", ".", "X", "[", "0", "]", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.algorithms.listnet.RankingModel.prepare_test_data_from_candidates_dict": [[58, 66], ["len", "listnet.RankingModel.prepare_data_from_candidate_list", "listnet.RankingModel.prepare_data_from_candidate_list"], "methods", ["home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.algorithms.listnet.RankingModel.prepare_data_from_candidate_list", "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.algorithms.listnet.RankingModel.prepare_data_from_candidate_list"], ["", "def", "prepare_test_data_from_candidates_dict", "(", "self", ",", "candidate_dict", ",", "noscore", "=", "True", ")", ":", "\n", "        ", "if", "noscore", ":", "\n", "            ", "_", ",", "self", ".", "test_X", "=", "self", ".", "prepare_data_from_candidate_list", "(", "candidate_dict", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "test_labels", ",", "self", ".", "test_X", "=", "self", ".", "prepare_data_from_candidate_list", "(", "\n", "candidate_dict", "\n", ")", "\n", "", "self", ".", "test_num_sessions", "=", "len", "(", "self", ".", "test_X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.algorithms.listnet.ListNet.__init__": [[70, 92], ["object.__init__"], "methods", ["home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.candidate_creator.candidate.Candidate.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "n_hidden1", "=", "200", ",", "\n", "n_hidden2", "=", "78", ",", "\n", "n_hidden3", "=", "40", ",", "\n", "batch_size", "=", "28", ",", "\n", "max_iter", "=", "1000", ",", "\n", "n_thres_cand", "=", "40", ",", "\n", "val_ratio", "=", "0.5", ",", "\n", "verbose", "=", "10", ",", "\n", "early_stopping_waits", "=", "10", ",", "\n", ")", ":", "\n", "        ", "super", "(", "ListNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "verbose", "=", "verbose", "\n", "self", ".", "max_iter", "=", "max_iter", "\n", "self", ".", "val_ratio", "=", "val_ratio", "\n", "self", ".", "n_hidden1", "=", "n_hidden1", "\n", "self", ".", "n_hidden2", "=", "n_hidden2", "\n", "self", ".", "n_hidden3", "=", "n_hidden3", "\n", "self", ".", "n_thres_cand", "=", "n_thres_cand", "\n", "self", ".", "early_stopping_waits", "=", "early_stopping_waits", "\n", "\n"]], "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.algorithms.listnet.ListNet.get_loss": [[93, 112], ["chainer.Variable", "chainer.Variable", "chainer.reshape", "chainer.normalize", "listnet.ListNet.model.cleargrads", "listnet.ListNet.model", "chainer.reshape", "chainer.reshape", "chainer.max", "chainer.logsumexp", "chainer.broadcast_to", "listnet.ndcg", "numpy.isnan", "chainer.sum", "print", "chainer.normalize.data.max", "chainer.normalize.data.min"], "methods", ["home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.algorithms.listnet.ndcg"], ["", "def", "get_loss", "(", "self", ",", "x_t", ",", "y_t", ")", ":", "\n", "        ", "x_t", "=", "Variable", "(", "x_t", ")", "\n", "y_t", "=", "Variable", "(", "y_t", ")", "\n", "y_t", "=", "F", ".", "reshape", "(", "y_t", ",", "(", "1", ",", "y_t", ".", "shape", "[", "0", "]", ")", ")", "\n", "# normalize output score to avoid divergence", "\n", "y_t", "=", "F", ".", "normalize", "(", "y_t", ")", "\n", "self", ".", "model", ".", "cleargrads", "(", ")", "\n", "pred", "=", "self", ".", "model", "(", "x_t", ")", "\n", "# ---- start loss calculation ----", "\n", "pred", "=", "F", ".", "reshape", "(", "pred", ",", "(", "pred", ".", "shape", "[", "1", "]", ",", "pred", ".", "shape", "[", "0", "]", ")", ")", "\n", "p_true", "=", "F", ".", "reshape", "(", "y_t", ",", "(", "y_t", ".", "shape", "[", "0", "]", ",", "y_t", ".", "shape", "[", "1", "]", ")", ")", "\n", "xm", "=", "F", ".", "max", "(", "pred", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "\n", "logsumexp", "=", "F", ".", "logsumexp", "(", "pred", ",", "axis", "=", "1", ")", "\n", "logsumexp", "=", "F", ".", "broadcast_to", "(", "logsumexp", ",", "(", "xm", ".", "shape", "[", "0", "]", ",", "pred", ".", "shape", "[", "1", "]", ")", ")", "\n", "loss", "=", "-", "1", "*", "F", ".", "sum", "(", "p_true", "*", "(", "pred", "-", "logsumexp", ")", ")", "\n", "trainres", "=", "ndcg", "(", "y_t", ".", "data", ",", "pred", ".", "data", ",", "self", ".", "n_thres_cand", ")", "\n", "if", "np", ".", "isnan", "(", "trainres", ")", ":", "\n", "            ", "print", "(", "y_t", ".", "data", ".", "max", "(", ")", ",", "y_t", ".", "data", ".", "min", "(", ")", ")", "\n", "", "return", "loss", ",", "trainres", "\n", "\n"]], "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.algorithms.listnet.ListNet.fit": [[113, 155], ["listnet.ListNet.prepare_train_data_from_candidates_dict", "felix.MLPListNet", "chainer.optimizers.Adam", "listnet.ListNet.optimizer.setup", "range", "numpy.random.permutation", "six.moves.range", "loss.backward", "listnet.ListNet.optimizer.update", "min", "listnet.ListNet.get_loss", "print", "print", "numpy.argsort", "len", "listnet.ListNet.validation", "print", "len"], "methods", ["home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.algorithms.listnet.RankingModel.prepare_train_data_from_candidates_dict", "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.algorithms.listnet.ListNet.get_loss", "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.algorithms.listnet.ListNet.validation"], ["", "def", "fit", "(", "self", ",", "candidate_dict", "=", "None", ")", ":", "\n", "\n", "        ", "self", ".", "prepare_train_data_from_candidates_dict", "(", "candidate_dict", ")", "\n", "# model initialization", "\n", "\n", "self", ".", "model", "=", "net", ".", "MLPListNet", "(", "\n", "self", ".", "dim", ",", "self", ".", "n_hidden1", ",", "self", ".", "n_hidden2", ",", "self", ".", "n_hidden3", "\n", ")", "\n", "self", ".", "optimizer", "=", "optimizers", ".", "Adam", "(", ")", "\n", "self", ".", "optimizer", ".", "alpha", "=", "0.02", "\n", "self", ".", "optimizer", ".", "setup", "(", "self", ".", "model", ")", "\n", "# start training", "\n", "trainres", "=", "0.0", "\n", "traincnt", "=", "0", "\n", "for", "iter_", "in", "range", "(", "self", ".", "max_iter", ")", ":", "\n", "            ", "perm_tr", "=", "np", ".", "random", ".", "permutation", "(", "self", ".", "train_indices", ")", "\n", "for", "batch_idx", "in", "six", ".", "moves", ".", "range", "(", "\n", "0", ",", "self", ".", "train_indices", ".", "shape", "[", "0", "]", ",", "self", ".", "batch_size", "\n", ")", ":", "\n", "                ", "loss", "=", "0.0", "\n", "for", "t", "in", "perm_tr", "[", "batch_idx", ":", "batch_idx", "+", "self", ".", "batch_size", "]", ":", "\n", "                    ", "traincnt", "+=", "1", "\n", "sorted_idxes", "=", "np", ".", "argsort", "(", "self", ".", "labels", "[", "t", "]", ")", "[", "\n", ":", ":", "-", "1", "\n", "]", "# get indexes of best items in the beginning of the list", "\n", "nthres", "=", "min", "(", "self", ".", "n_thres_cand", ",", "sorted_idxes", ".", "shape", "[", "0", "]", ")", "\n", "x_t", "=", "self", ".", "X", "[", "t", "]", "[", "sorted_idxes", "[", ":", "nthres", "]", "]", "\n", "y_t", "=", "self", ".", "labels", "[", "t", "]", "[", "sorted_idxes", "[", ":", "nthres", "]", "]", "\n", "loss_t", ",", "trainres_t", "=", "self", ".", "get_loss", "(", "x_t", ",", "y_t", ")", "\n", "loss", "+=", "loss_t", "\n", "trainres", "+=", "trainres_t", "\n", "", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "update", "(", ")", "\n", "", "if", "self", ".", "verbose", ":", "\n", "                ", "if", "(", "iter_", "+", "1", ")", "%", "self", ".", "verbose", "==", "0", "or", "iter_", "==", "self", ".", "max_iter", "-", "1", ":", "\n", "                    ", "print", "(", "\"step:{},train_loss:{}\"", ".", "format", "(", "iter_", ",", "loss", ".", "data", ")", ")", "\n", "print", "(", "\"train_ndcg:{}\"", ".", "format", "(", "trainres", "/", "traincnt", ")", ")", "\n", "trainres", "=", "0.0", "\n", "traincnt", "=", "0", "\n", "if", "len", "(", "self", ".", "val_indices", ")", "!=", "0", ":", "\n", "                        ", "testres", "=", "self", ".", "validation", "(", ")", "\n", "print", "(", "\"valid_ndcg:{}\"", ".", "format", "(", "testres", "/", "len", "(", "self", ".", "val_indices", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.algorithms.listnet.ListNet.validation": [[156, 170], ["min", "chainer.Variable", "chainer.Variable", "chainer.reshape", "chainer.normalize", "listnet.ListNet.predict", "chainer.reshape", "listnet.ndcg", "numpy.argsort"], "methods", ["home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.algorithms.listnet.ListNet.predict", "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.algorithms.listnet.ndcg"], ["", "", "", "", "", "def", "validation", "(", "self", ")", ":", "\n", "        ", "testres", "=", "0.0", "\n", "for", "j", "in", "self", ".", "val_indices", ":", "\n", "            ", "sorted_idxes", "=", "np", ".", "argsort", "(", "self", ".", "labels", "[", "j", "]", ")", "[", ":", ":", "-", "1", "]", "\n", "nthres", "=", "min", "(", "self", ".", "n_thres_cand", ",", "sorted_idxes", ".", "shape", "[", "0", "]", ")", "\n", "x_j", "=", "Variable", "(", "self", ".", "X", "[", "j", "]", "[", "sorted_idxes", "[", ":", "nthres", "]", "]", ")", "\n", "y_j", "=", "Variable", "(", "self", ".", "labels", "[", "j", "]", "[", "sorted_idxes", "[", ":", "nthres", "]", "]", ")", "\n", "y_j", "=", "F", ".", "reshape", "(", "y_j", ",", "(", "1", ",", "y_j", ".", "shape", "[", "0", "]", ")", ")", "\n", "# normalize output score to avoid divergence", "\n", "y_j", "=", "F", ".", "normalize", "(", "y_j", ")", "\n", "pred_j", "=", "self", ".", "predict", "(", "x_j", ")", "\n", "pred_j", "=", "F", ".", "reshape", "(", "pred_j", ",", "(", "pred_j", ".", "data", ".", "shape", "[", "0", "]", ",", ")", ")", "\n", "testres", "+=", "ndcg", "(", "y_j", ".", "data", ",", "pred_j", ".", "data", ",", "self", ".", "n_thres_cand", ")", "\n", "", "return", "testres", "\n", "\n"]], "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.algorithms.listnet.ListNet.predict": [[171, 181], ["listnet.ListNet.model", "enumerate", "listnet.ListNet.model", "print", "pred.append"], "methods", ["None"], ["", "def", "predict", "(", "self", ",", "test_X", ")", ":", "\n", "        ", "if", "test_X", ".", "ndim", "==", "2", ":", "\n", "            ", "return", "self", ".", "model", "(", "test_X", ")", "\n", "", "else", ":", "\n", "            ", "pred", "=", "[", "]", "\n", "for", "t", ",", "x_t", "in", "enumerate", "(", "test_X", ")", ":", "\n", "                ", "pred_t", "=", "self", ".", "model", "(", "x_t", ")", "\n", "print", "(", "pred_t", ")", "\n", "pred", ".", "append", "(", "pred_t", ")", "\n", "", "return", "pred", "\n", "\n"]], "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.algorithms.listnet.ListNet.test": [[182, 210], ["listnet.ListNet.prepare_test_data_from_candidates_dict", "enumerate", "enumerate", "print", "chainer.Variable", "listnet.ListNet.predict", "chainer.reshape", "zip", "chainer.Variable", "chainer.Variable", "chainer.reshape", "chainer.normalize", "listnet.ListNet.predict", "chainer.reshape", "listnet.ndcg"], "methods", ["home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.algorithms.listnet.RankingModel.prepare_test_data_from_candidates_dict", "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.algorithms.listnet.ListNet.predict", "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.algorithms.listnet.ListNet.predict", "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.algorithms.listnet.ndcg"], ["", "", "def", "test", "(", "self", ",", "candidates", ",", "noscore", "=", "True", ")", ":", "\n", "\n", "        ", "self", ".", "prepare_test_data_from_candidates_dict", "(", "\n", "candidate_dict", "=", "candidates", ",", "noscore", "=", "noscore", "\n", ")", "\n", "testres", "=", "0", "\n", "if", "noscore", ":", "\n", "            ", "for", "i", ",", "query", "in", "enumerate", "(", "candidates", ")", ":", "\n", "                ", "x_i", "=", "Variable", "(", "self", ".", "test_X", "[", "i", "]", ")", "\n", "pred_i", "=", "self", ".", "predict", "(", "x_i", ")", "\n", "pred_i", "=", "F", ".", "reshape", "(", "pred_i", ",", "(", "pred_i", ".", "data", ".", "shape", "[", "0", "]", ",", ")", ")", "\n", "for", "elem", ",", "candidate", "in", "zip", "(", "pred_i", ",", "candidates", "[", "query", "]", ".", "candidates", ")", ":", "\n", "                    ", "candidate", ".", "learnedScores", "=", "elem", ".", "data", "\n", "candidate", ".", "qualification", "=", "elem", ".", "data", "\n", "", "", "return", "candidates", "\n", "\n", "", "else", ":", "\n", "            ", "for", "i", ",", "query", "in", "enumerate", "(", "candidates", ")", ":", "\n", "                ", "x_i", "=", "Variable", "(", "self", ".", "test_X", "[", "i", "]", ")", "\n", "y_i", "=", "Variable", "(", "self", ".", "test_labels", "[", "i", "]", ")", "\n", "y_i", "=", "F", ".", "reshape", "(", "y_i", ",", "(", "1", ",", "y_i", ".", "shape", "[", "0", "]", ")", ")", "\n", "# normalize output score to avoid divergence", "\n", "y_i", "=", "F", ".", "normalize", "(", "y_i", ")", "\n", "pred_i", "=", "self", ".", "predict", "(", "x_i", ")", "\n", "pred_i", "=", "F", ".", "reshape", "(", "pred_i", ",", "(", "pred_i", ".", "data", ".", "shape", "[", "0", "]", ",", ")", ")", "\n", "testres", "+=", "ndcg", "(", "y_i", ".", "data", ",", "pred_i", ".", "data", ",", "10", ")", "\n", "", "print", "(", "\"score:{}\"", ".", "format", "(", "testres", "/", "self", ".", "test_num_sessions", ")", ")", "\n", "return", "[", "]", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.algorithms.listnet.ndcg": [[15, 29], ["y_true.ravel.ravel", "y_score.ravel.ravel", "sorted", "min", "range", "range", "numpy.argsort", "numpy.log2", "numpy.log2"], "function", ["None"], ["def", "ndcg", "(", "y_true", ",", "y_score", ",", "k", "=", "100", ")", ":", "\n", "    ", "y_true", "=", "y_true", ".", "ravel", "(", ")", "\n", "y_score", "=", "y_score", ".", "ravel", "(", ")", "\n", "y_true_sorted", "=", "sorted", "(", "y_true", ",", "reverse", "=", "True", ")", "\n", "ideal_dcg", "=", "0", "\n", "nthres", "=", "min", "(", "y_true", ".", "shape", "[", "0", "]", ",", "k", ")", "\n", "for", "i", "in", "range", "(", "nthres", ")", ":", "\n", "        ", "ideal_dcg", "+=", "(", "2", "**", "y_true_sorted", "[", "i", "]", "-", "1.0", ")", "/", "np", ".", "log2", "(", "i", "+", "2", ")", "\n", "", "dcg", "=", "0", "\n", "argsort_indices", "=", "np", ".", "argsort", "(", "y_score", ")", "[", ":", ":", "-", "1", "]", "\n", "for", "i", "in", "range", "(", "nthres", ")", ":", "\n", "        ", "dcg", "+=", "(", "2", "**", "y_true", "[", "argsort_indices", "[", "i", "]", "]", "-", "1.0", ")", "/", "np", ".", "log2", "(", "i", "+", "2", ")", "\n", "", "ndcg", "=", "dcg", "/", "ideal_dcg", "\n", "return", "ndcg", "\n", "\n"]], "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.algorithms.run_foeir.runFOEIR": [[16, 72], ["len", "len", "run_foeir.solve_lp_with_DTC", "felix.src.algorithms.stochastic_policy.StochasticPolicy.from_mrp", "print", "numpy.reshape", "numpy.asarray", "felix.src.algorithms.stochastic_policy.StochasticPolicy.from_mrp", "felix.src.algorithms.stochastic_policy.is_doubly_stochastic_matrix", "print"], "function", ["home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.algorithms.run_foeir.solve_lp_with_DTC", "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.algorithms.stochastic_policy.StochasticPolicy.from_mrp", "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.algorithms.stochastic_policy.StochasticPolicy.from_mrp", "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.algorithms.stochastic_policy.is_doubly_stochastic_matrix"], ["def", "runFOEIR", "(", "\n", "candidates", ",", "\n", "outlier_objective", "=", "False", ",", "\n", "top_k", "=", "None", ",", "\n", "decomposition_method", "=", "\"vanilla_BvN\"", ",", "\n", "individual_fairness", "=", "True", ",", "\n", "number_of_resamples", "=", "10", ",", "\n", "mrp_matrix", "=", "None", ",", "\n", ")", ":", "\n", "\n", "    ", "\"\"\"\n    Start the calculation of the ranking for fairness of exposure under the\n    Disparate Treatment (DT) fairness constraint.\n\n    Returns the stochastic ranking policy and a boolean signaling whether the\n    calculation was successful.\n    \"\"\"", "\n", "\n", "n", "=", "len", "(", "candidates", ")", "\n", "if", "not", "top_k", ":", "\n", "        ", "top_k", "=", "len", "(", "candidates", ")", "\n", "\n", "", "if", "mrp_matrix", "is", "None", ":", "\n", "        ", "x", ",", "isRanked", "=", "solve_lp_with_DTC", "(", "\n", "candidates", ",", "\n", "top_k", "=", "top_k", ",", "\n", "outlier_objective", "=", "outlier_objective", ",", "\n", "individual_fairness", "=", "individual_fairness", ",", "\n", ")", "\n", "if", "individual_fairness", ":", "\n", "            ", "print", "(", "\"We use individual fairness\"", ")", "\n", "", "if", "isRanked", "==", "True", ":", "\n", "\n", "            ", "x", "=", "np", ".", "reshape", "(", "x", ",", "(", "n", ",", "top_k", ")", ")", "\n", "x", "=", "np", ".", "asarray", "(", "x", ",", "dtype", "=", "\"float64\"", ")", "\n", "if", "not", "is_doubly_stochastic_matrix", "(", "x", ")", ":", "\n", "                ", "print", "(", "\"MRP is not doubly stochastic\"", ")", "\n", "\n", "", "stochastic_policy", "=", "StochasticPolicy", ".", "from_mrp", "(", "\n", "x", ",", "\n", "candidates", "=", "candidates", ",", "\n", "decomposition_method", "=", "decomposition_method", ",", "\n", "number_of_resamples", "=", "number_of_resamples", ",", "\n", ")", "\n", "\n", "return", "stochastic_policy", ",", "isRanked", "\n", "\n", "", "", "else", ":", "\n", "        ", "stochastic_policy", "=", "StochasticPolicy", ".", "from_mrp", "(", "\n", "mrp_matrix", ",", "\n", "candidates", "=", "candidates", ",", "\n", "decomposition_method", "=", "decomposition_method", ",", "\n", "number_of_resamples", "=", "number_of_resamples", ",", "\n", ")", "\n", "return", "stochastic_policy", ",", "True", "\n", "", "return", "None", ",", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.algorithms.run_foeir.solve_lp_with_DTC": [[74, 274], ["len", "print", "numpy.arange", "numpy.reshape", "numpy.asarray", "range", "range", "range", "numpy.reshape", "np.reshape.dot", "np.negative.flatten", "numpy.negative", "cvxopt.spmatrix", "cvxopt.spmatrix", "cvxopt.spmatrix", "cvxopt.spmatrix", "cvxopt.spmatrix", "cvxopt.matrix", "cvxopt.matrix", "cvxopt.matrix", "cvxopt.matrix", "cvxopt.matrix", "cvxopt.sparse", "cvxopt.matrix", "print", "print", "np.reshape.append", "numpy.log2", "J.append", "range", "numpy.zeros", "np.zeros.dot", "np.reshape.flatten", "numpy.reshape", "cvxopt.matrix", "range", "cvxopt.matrix", "cvxopt.matrix", "felix.src.measures.outlier_metrics.determine_outlier_vector", "numpy.array", "numpy.reshape", "numpy.array", "numpy.reshape", "np.reshape.dot", "np.negative.flatten", "numpy.negative", "range", "range", "range", "range", "cvxopt.matrix", "cvxopt.matrix", "cvxopt.solvers.lp", "print", "numpy.array", "J2.append", "I.append", "I2.append", "pro_indices.append", "unpro_indicex.append", "print", "print", "len", "range", "numpy.array", "numpy.zeros", "print", "len", "numpy.zeros", "c.flatten.flatten", "cvxopt.matrix.append", "enumerate"], "function", ["home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.code_bvn_decomposition.bvn_decomposition.zeros", "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.measures.outlier_metrics.determine_outlier_vector", "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.code_bvn_decomposition.bvn_decomposition.zeros", "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.code_bvn_decomposition.bvn_decomposition.zeros"], ["", "def", "solve_lp_with_DTC", "(", "\n", "candidates", ",", "\n", "top_k", "=", "None", ",", "\n", "outlier_window_size", "=", "10", ",", "\n", "outlier_objective", "=", "False", ",", "\n", "individual_fairness", "=", "True", ",", "\n", ")", ":", "\n", "    ", "\"\"\"\n    Solve the linear program with the disparate treatment constraint.\n\n    Returns doubly stochastic matrix as numpy array\n    \"\"\"", "\n", "\n", "n", "=", "len", "(", "candidates", ")", "\n", "if", "top_k", "is", "None", ":", "\n", "        ", "top_k", "=", "n", "\n", "\n", "", "print", "(", "\"Start building LP with DTC.\"", ")", "\n", "learned_scores", "=", "[", "]", "\n", "unprotected_aggregated_scores", "=", "0", "\n", "protected_aggregated_scores", "=", "0", "\n", "proCount", "=", "0", "\n", "unproCount", "=", "0", "\n", "pro_indices", "=", "[", "]", "\n", "unpro_indicex", "=", "[", "]", "\n", "\n", "for", "candidate", "in", "candidates", ":", "\n", "        ", "learned_scores", ".", "append", "(", "candidate", ".", "learnedScores", ")", "\n", "\n", "# initialize position-based exposure v", "\n", "", "position_bias", "=", "np", ".", "arange", "(", "1", ",", "(", "top_k", "+", "1", ")", ",", "1", ")", "\n", "position_bias", "=", "1", "/", "np", ".", "log2", "(", "1", "+", "position_bias", ")", "\n", "position_bias", "=", "np", ".", "reshape", "(", "position_bias", ",", "(", "1", ",", "top_k", ")", ")", "\n", "\n", "learned_scores", "=", "np", ".", "asarray", "(", "learned_scores", ")", "\n", "\n", "I", "=", "[", "]", "\n", "J", "=", "[", "]", "\n", "I2", "=", "[", "]", "\n", "J2", "=", "[", "]", "\n", "\n", "# set up indices for column and row constraints", "\n", "for", "j", "in", "range", "(", "n", "*", "top_k", ")", ":", "\n", "        ", "J", ".", "append", "(", "j", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "top_k", ")", ":", "\n", "            ", "J2", ".", "append", "(", "j", "*", "n", "+", "i", ")", "\n", "I", ".", "append", "(", "i", ")", "\n", "I2", ".", "append", "(", "j", ")", "\n", "\n", "# aggregate the scores of the protected and unprotected groups resp.", "\n", "", "", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "\n", "        ", "if", "candidates", "[", "i", "]", ".", "isProtected", "==", "True", ":", "\n", "\n", "            ", "proCount", "+=", "1", "\n", "pro_indices", ".", "append", "(", "i", ")", "\n", "protected_aggregated_scores", "+=", "learned_scores", "[", "i", "]", "\n", "", "else", ":", "\n", "            ", "unproCount", "+=", "1", "\n", "unpro_indicex", ".", "append", "(", "i", ")", "\n", "unprotected_aggregated_scores", "+=", "learned_scores", "[", "i", "]", "\n", "\n", "", "", "learned_scores", "=", "np", ".", "reshape", "(", "learned_scores", ",", "(", "n", ",", "1", ")", ")", "\n", "# uv contains the product of position bias at each position with the merit at", "\n", "# each item (flattened and negated).", "\n", "uv", "=", "learned_scores", ".", "dot", "(", "position_bias", ")", "\n", "\n", "if", "not", "individual_fairness", ":", "\n", "# check if there are protected items", "\n", "        ", "if", "proCount", "==", "0", ":", "\n", "            ", "print", "(", "\n", "\"Cannot create a marginal rank probability matrix P for \"", "\n", "\" because there are no protected items in the data set.\"", "\n", ")", "\n", "return", "0", ",", "False", "\n", "# check if there are unprotected items", "\n", "", "if", "unproCount", "==", "0", ":", "\n", "            ", "print", "(", "\n", "\"Cannot create a marginal rank probability matrix P for \"", "\n", "\" because there are no unprotected items in the data set.\"", "\n", ")", "\n", "return", "0", ",", "False", "\n", "\n", "", "initf", "=", "np", ".", "zeros", "(", "(", "n", ",", "1", ")", ")", "\n", "\n", "initf", "[", "pro_indices", "]", "=", "unprotected_aggregated_scores", "\n", "initf", "[", "unpro_indicex", "]", "=", "-", "protected_aggregated_scores", "\n", "\n", "f1", "=", "initf", ".", "dot", "(", "position_bias", ")", "\n", "\n", "f1", "=", "f1", ".", "flatten", "(", ")", "\n", "f1", "=", "np", ".", "reshape", "(", "f1", ",", "(", "1", ",", "n", "*", "top_k", ")", ")", "\n", "\n", "# we define f and f_value to be used for the fairness constraint", "\n", "f", "=", "matrix", "(", "f1", ")", "\n", "f_value", "=", "0", "\n", "\n", "# Individual fairness", "\n", "", "else", ":", "\n", "# For individual fairness we compare the ratio of expected exposure at each item", "\n", "        ", "individual_fairness_constraint", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "uv", ")", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "i", "+", "1", ",", "len", "(", "uv", ")", ")", ":", "\n", "                ", "c", "=", "np", ".", "zeros", "(", "uv", ".", "shape", ")", "\n", "c", "[", "i", "]", "=", "uv", "[", "j", "]", "\n", "c", "[", "j", "]", "=", "-", "uv", "[", "i", "]", "\n", "c", "=", "c", ".", "flatten", "(", ")", "\n", "individual_fairness_constraint", ".", "append", "(", "c", ")", "\n", "\n", "", "", "individual_fairness_constraint", "=", "matrix", "(", "\n", "np", ".", "array", "(", "individual_fairness_constraint", ")", "\n", ")", "\n", "individual_fairness_value", "=", "matrix", "(", "\n", "np", ".", "zeros", "(", "individual_fairness_constraint", ".", "size", "[", "0", "]", ")", "\n", ")", "\n", "# we define f and f_value to be used for the fairness constraint", "\n", "f", "=", "individual_fairness_constraint", "\n", "f_value", "=", "individual_fairness_value", "\n", "\n", "# Set up objectives", "\n", "\n", "", "if", "outlier_objective", ":", "\n", "# we add the outlier objective, using the outlierness vector calculated based", "\n", "# on all available candidate items.", "\n", "        ", "outlier_vector", ",", "outlierness_vector", "=", "determine_outlier_vector", "(", "\n", "[", "c", ".", "outlier_feature", "for", "c", "in", "candidates", "]", ",", "alpha", "=", "2.5", "\n", ")", "\n", "outlierness_vector", "=", "[", "\n", "i", "if", "outlier_vector", "[", "id", "]", "==", "1", "else", "0", "\n", "for", "id", ",", "i", "in", "enumerate", "(", "outlierness_vector", ")", "\n", "]", "\n", "# we are only concerned with removing outliers from the top-k of the rankings", "\n", "h", "=", "np", ".", "array", "(", "[", "1", "]", "*", "outlier_window_size", "+", "[", "0", "]", "*", "(", "top_k", "-", "outlier_window_size", ")", ")", "\n", "h", "=", "np", ".", "reshape", "(", "h", ",", "(", "1", ",", "top_k", ")", ")", "\n", "o", "=", "np", ".", "array", "(", "outlierness_vector", ")", "\n", "o", "=", "np", ".", "reshape", "(", "o", ",", "(", "n", ",", "1", ")", ")", "\n", "\n", "oh", "=", "o", ".", "dot", "(", "h", ")", "\n", "\n", "ohuv", "=", "uv", "-", "oh", "\n", "\n", "ohuv", "=", "ohuv", ".", "flatten", "(", ")", "\n", "ohuv", "=", "np", ".", "negative", "(", "ohuv", ")", "\n", "\n", "", "uv", "=", "uv", ".", "flatten", "(", ")", "\n", "# negate objective function to convert maximization problem to minimization problem", "\n", "uv", "=", "np", ".", "negative", "(", "uv", ")", "\n", "\n", "# set up constraints x <= 1", "\n", "A", "=", "spmatrix", "(", "1.0", ",", "range", "(", "n", "*", "top_k", ")", ",", "range", "(", "n", "*", "top_k", ")", ")", "\n", "# set up constraints x >= 0", "\n", "A1", "=", "spmatrix", "(", "-", "1.0", ",", "range", "(", "n", "*", "top_k", ")", ",", "range", "(", "n", "*", "top_k", ")", ")", "\n", "# set up constraints that sum(rows) <= 1", "\n", "M1", "=", "spmatrix", "(", "1.0", ",", "I", ",", "J", ")", "\n", "# set up constraints sum(columns) <= 1", "\n", "M2", "=", "spmatrix", "(", "1.0", ",", "I2", ",", "J", ")", "\n", "\n", "alpha", "=", "0.99999", "# we tolerate an error of 1e-5", "\n", "# set up constraints sum(columns)>alpha", "\n", "M3", "=", "spmatrix", "(", "-", "1.0", ",", "I2", ",", "J", ")", "\n", "\n", "# values for x<=1", "\n", "a", "=", "matrix", "(", "1.0", ",", "(", "n", "*", "top_k", ",", "1", ")", ")", "\n", "# values for x >= 0", "\n", "a1", "=", "matrix", "(", "0.0", ",", "(", "n", "*", "top_k", ",", "1", ")", ")", "\n", "# values for sums columns <= 1", "\n", "h1", "=", "matrix", "(", "1.0", ",", "(", "n", ",", "1", ")", ")", "\n", "# values for sums rows <= 1", "\n", "h2", "=", "matrix", "(", "1.0", ",", "(", "top_k", ",", "1", ")", ")", "\n", "# values for sums columns > alpha", "\n", "h3", "=", "matrix", "(", "-", "alpha", ",", "(", "top_k", ",", "1", ")", ")", "\n", "\n", "# construct objective function", "\n", "if", "outlier_objective", ":", "\n", "        ", "c", "=", "matrix", "(", "ohuv", ")", "\n", "", "else", ":", "\n", "        ", "c", "=", "matrix", "(", "uv", ")", "\n", "\n", "", "G", "=", "sparse", "(", "[", "M1", ",", "M2", ",", "M3", ",", "A", ",", "A1", ",", "f", "]", ")", "\n", "h", "=", "matrix", "(", "[", "h2", ",", "h1", ",", "h3", ",", "a", ",", "a1", ",", "f_value", "]", ")", "\n", "\n", "print", "(", "\"Start solving LP with DTC.\"", ")", "\n", "try", ":", "\n", "        ", "sol", "=", "solvers", ".", "lp", "(", "c", ",", "G", ",", "h", ")", "\n", "", "except", "Exception", ":", "\n", "        ", "print", "(", "\n", "\"Cannot create a marginal rank probability matrix P because \"", "\n", "\"linear program can not be solved.\"", "\n", ")", "\n", "return", "0", ",", "False", "\n", "", "print", "(", "\"Finished solving LP with DTC.\"", ")", "\n", "if", "sol", "[", "\"x\"", "]", "is", "None", ":", "\n", "        ", "print", "(", "\n", "\"Cannot create a marginal rank probability matrix P because \"", "\n", "\"linear program can not be solved.\"", "\n", ")", "\n", "return", "0", ",", "False", "\n", "", "return", "np", ".", "array", "(", "sol", "[", "\"x\"", "]", ")", ",", "True", "\n", "", ""]], "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.plackett_luce.rankers.PLRanker.__init__": [[31, 43], ["numpy.array"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "candidate_list", ",", "num_samplings", "=", "1000", ",", "uniform_scores", "=", "False", ")", ":", "\n", "        ", "self", ".", "candidate_list", "=", "candidate_list", "\n", "self", ".", "predicted_scores", "=", "np", ".", "array", "(", "\n", "[", "candidate", ".", "learnedScores", "for", "candidate", "in", "self", ".", "candidate_list", "]", "\n", ")", "\n", "self", ".", "num_samplings", "=", "num_samplings", "\n", "# if uniform_scores is true, to get a uniform ranking policy that samples", "\n", "# item at each position with the same probability, we set a high epsilon value", "\n", "if", "uniform_scores", ":", "\n", "            ", "self", ".", "epsilon", "=", "10000", "\n", "", "else", ":", "\n", "            ", "self", ".", "epsilon", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.plackett_luce.rankers.PLRanker.get_stochastic_policy": [[44, 73], ["numpy.min", "numpy.log", "felix.src.algorithms.stochastic_policy.StochasticPolicy", "numpy.max", "felix.src.algorithms.plackett_luce.gumbel_sampling.gumbel_sample_rankings", "rankers.to_permutation_matrix", "coefficients_matrix_tuples.append", "numpy.max", "len"], "methods", ["home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.plackett_luce.gumbel_sampling.gumbel_sample_rankings", "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.code_bvn_decomposition.bvn_decomposition.to_permutation_matrix"], ["", "", "def", "get_stochastic_policy", "(", "\n", "self", ",", "\n", "top_k", "=", "None", ",", "\n", "query", "=", "None", ",", "\n", ")", ":", "\n", "# We need to normalize the scores and take their logarithm to input into the gumbel sampling.", "\n", "        ", "scores", "=", "self", ".", "predicted_scores", "\n", "min_score", "=", "np", ".", "min", "(", "scores", ")", "\n", "scores", "=", "scores", "-", "min_score", "\n", "# If epsilon is big, it will overshadow the scores to get an uniform policy", "\n", "scores", "=", "scores", "+", "self", ".", "epsilon", "*", "np", ".", "max", "(", "scores", ")", "\n", "scores", "=", "scores", "/", "np", ".", "max", "(", "scores", ")", "\n", "log_scores", "=", "np", ".", "log", "(", "scores", ")", "\n", "# Use the gumbel_sampling as a fast approximation of PL sampling", "\n", "rankings", "=", "gumbel_sample_rankings", "(", "\n", "log_scores", "=", "log_scores", ",", "n_samples", "=", "self", ".", "num_samplings", "\n", ")", "[", "0", "]", "\n", "coefficients_matrix_tuples", "=", "[", "]", "\n", "for", "ranking", "in", "rankings", ":", "\n", "# We are only interested in the first k items that were sampled by the PL sampler", "\n", "            ", "ranking", "=", "ranking", "[", ":", "top_k", "]", "\n", "permutation_mat", "=", "to_permutation_matrix", "(", "ranking", ",", "num_docs", "=", "len", "(", "scores", ")", ")", "\n", "coefficients_matrix_tuples", ".", "append", "(", "(", "1", "/", "self", ".", "num_samplings", ",", "permutation_mat", ")", ")", "\n", "", "policy", "=", "StochasticPolicy", "(", "\n", "query_number", "=", "query", ",", "\n", "candidates", "=", "self", ".", "candidate_list", ",", "\n", "coefficient_matrix_tuples", "=", "coefficients_matrix_tuples", ",", "\n", ")", "\n", "return", "policy", "\n", "\n"]], "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.plackett_luce.rankers.DeterministicRanker.__init__": [[76, 83], ["numpy.array"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "candidate_list", ",", "oracle", "=", "False", ",", "descending", "=", "True", ")", ":", "\n", "        ", "self", ".", "candidate_list", "=", "candidate_list", "\n", "self", ".", "predicted_scores", "=", "np", ".", "array", "(", "\n", "[", "candidate", ".", "learnedScores", "for", "candidate", "in", "self", ".", "candidate_list", "]", "\n", ")", "\n", "self", ".", "oracle", "=", "oracle", "\n", "self", ".", "descending", "=", "descending", "\n", "\n"]], "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.plackett_luce.rankers.DeterministicRanker.get_stochastic_policy": [[84, 112], ["zip", "rankers.to_permutation_matrix", "felix.src.algorithms.stochastic_policy.StochasticPolicy", "range", "sorted", "sorted", "len", "len"], "methods", ["home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.code_bvn_decomposition.bvn_decomposition.to_permutation_matrix"], ["", "def", "get_stochastic_policy", "(", "\n", "self", ",", "\n", "top_k", "=", "None", ",", "\n", "query", "=", "None", ",", "\n", ")", ":", "\n", "        ", "ranking", "=", "zip", "(", "range", "(", "len", "(", "self", ".", "candidate_list", ")", ")", ",", "self", ".", "candidate_list", ")", "\n", "if", "self", ".", "oracle", ":", "\n", "            ", "ranking", "=", "sorted", "(", "\n", "ranking", ",", "\n", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ".", "originalQualification", ",", "\n", "reverse", "=", "self", ".", "descending", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "ranking", "=", "sorted", "(", "\n", "ranking", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ".", "learnedScores", ",", "reverse", "=", "self", ".", "descending", "\n", ")", "\n", "", "ranking", "=", "[", "s", "[", "0", "]", "for", "s", "in", "ranking", "]", "\n", "ranking", "=", "ranking", "[", ":", "top_k", "]", "\n", "permutation_mat", "=", "to_permutation_matrix", "(", "\n", "ranking", ",", "num_docs", "=", "len", "(", "self", ".", "candidate_list", ")", "\n", ")", "\n", "coefficients_matrix_tuples", "=", "[", "(", "1", ",", "permutation_mat", ")", "]", "\n", "policy", "=", "StochasticPolicy", "(", "\n", "query_number", "=", "query", ",", "\n", "candidates", "=", "self", ".", "candidate_list", ",", "\n", "coefficient_matrix_tuples", "=", "coefficients_matrix_tuples", ",", "\n", ")", "\n", "return", "policy", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.plackett_luce.rankers.to_permutation_matrix": [[15, 28], ["len", "numpy.zeros", "zip", "tuple", "numpy.arange", "zip"], "function", ["home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.code_bvn_decomposition.bvn_decomposition.zeros"], ["def", "to_permutation_matrix", "(", "permutation", ",", "num_docs", ")", ":", "\n", "    ", "\"\"\"Converts a permutation into a permutation matrix.\"\"\"", "\n", "top_k", "=", "len", "(", "permutation", ")", "\n", "P", "=", "np", ".", "zeros", "(", "(", "num_docs", ",", "top_k", ")", ")", "\n", "matches", "=", "zip", "(", "permutation", ",", "np", ".", "arange", "(", "0", ",", "top_k", ",", "1", ")", ")", "\n", "# This is a cleverer way of doing", "\n", "#", "\n", "#     for (u, v) in matches.items():", "\n", "#         P[u, v] = 1", "\n", "#", "\n", "targets", "=", "tuple", "(", "zip", "(", "*", "matches", ")", ")", "\n", "P", "[", "targets", "]", "=", "1", "\n", "return", "P", "\n", "\n"]], "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.plackett_luce.gumbel_sampling.multiple_cutoff_rankings": [[9, 25], ["min", "numpy.arange", "numpy.argsort", "numpy.argpartition", "numpy.full", "numpy.arange"], "function", ["None"], ["def", "multiple_cutoff_rankings", "(", "scores", ",", "cutoff", ",", "invert", "=", "True", ",", "noise_tiebreak", "=", "False", ")", ":", "\n", "    ", "n_samples", "=", "scores", ".", "shape", "[", "0", "]", "\n", "n_docs", "=", "scores", ".", "shape", "[", "1", "]", "\n", "cutoff", "=", "min", "(", "n_docs", ",", "cutoff", ")", "\n", "\n", "ind", "=", "np", ".", "arange", "(", "n_samples", ")", "\n", "partition", "=", "np", ".", "argpartition", "(", "scores", ",", "cutoff", "-", "1", ",", "axis", "=", "1", ")", "[", ":", ",", ":", "cutoff", "]", "\n", "sorted_partition", "=", "np", ".", "argsort", "(", "scores", "[", "ind", "[", ":", ",", "None", "]", ",", "partition", "]", ",", "axis", "=", "1", ")", "\n", "rankings", "=", "partition", "[", "ind", "[", ":", ",", "None", "]", ",", "sorted_partition", "]", "\n", "\n", "if", "not", "invert", ":", "\n", "        ", "return", "rankings", ",", "None", "\n", "", "else", ":", "\n", "        ", "inverted", "=", "np", ".", "full", "(", "(", "n_samples", ",", "n_docs", ")", ",", "cutoff", ",", "dtype", "=", "rankings", ".", "dtype", ")", "\n", "inverted", "[", "ind", "[", ":", ",", "None", "]", ",", "rankings", "]", "=", "np", ".", "arange", "(", "cutoff", ")", "[", "None", ",", ":", "]", "\n", "return", "rankings", ",", "inverted", "\n", "\n"]], "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.plackett_luce.gumbel_sampling.gumbel_sample_rankings": [[27, 86], ["numpy.arange", "numpy.random.gumbel", "gumbel_sampling.multiple_cutoff_rankings", "numpy.tile", "numpy.empty", "range", "min", "numpy.empty", "numpy.log", "numpy.exp", "numpy.sum", "numpy.mean", "numpy.amax", "numpy.exp"], "function", ["home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.plackett_luce.gumbel_sampling.multiple_cutoff_rankings"], ["", "", "def", "gumbel_sample_rankings", "(", "\n", "log_scores", ",", "\n", "n_samples", ",", "\n", "cutoff", "=", "None", ",", "\n", "inverted", "=", "False", ",", "\n", "doc_prob", "=", "False", ",", "\n", "prob_per_rank", "=", "False", ",", "\n", "return_gumbel", "=", "False", ",", "\n", ")", ":", "\n", "    ", "n_docs", "=", "log_scores", ".", "shape", "[", "0", "]", "\n", "ind", "=", "np", ".", "arange", "(", "n_samples", ")", "\n", "\n", "if", "cutoff", ":", "\n", "        ", "ranking_len", "=", "min", "(", "n_docs", ",", "cutoff", ")", "\n", "", "else", ":", "\n", "        ", "ranking_len", "=", "n_docs", "\n", "\n", "", "if", "prob_per_rank", ":", "\n", "        ", "rank_prob_matrix", "=", "np", ".", "empty", "(", "(", "ranking_len", ",", "n_docs", ")", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "\n", "", "gumbel_samples", "=", "np", ".", "random", ".", "gumbel", "(", "size", "=", "(", "n_samples", ",", "n_docs", ")", ")", "\n", "gumbel_scores", "=", "-", "(", "log_scores", "[", "None", ",", ":", "]", "+", "gumbel_samples", ")", "\n", "\n", "rankings", ",", "inv_rankings", "=", "multiple_cutoff_rankings", "(", "\n", "gumbel_scores", ",", "ranking_len", ",", "invert", "=", "inverted", "\n", ")", "\n", "\n", "if", "not", "doc_prob", ":", "\n", "        ", "if", "not", "return_gumbel", ":", "\n", "            ", "return", "rankings", ",", "inv_rankings", ",", "None", ",", "None", ",", "None", "\n", "", "else", ":", "\n", "            ", "return", "rankings", ",", "inv_rankings", ",", "None", ",", "None", ",", "gumbel_scores", "\n", "\n", "", "", "log_scores", "=", "np", ".", "tile", "(", "log_scores", "[", "None", ",", ":", "]", ",", "(", "n_samples", ",", "1", ")", ")", "\n", "rankings_prob", "=", "np", ".", "empty", "(", "(", "n_samples", ",", "ranking_len", ")", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "for", "i", "in", "range", "(", "ranking_len", ")", ":", "\n", "        ", "log_scores", "+=", "18", "-", "np", ".", "amax", "(", "log_scores", ",", "axis", "=", "1", ")", "[", ":", ",", "None", "]", "\n", "log_denom", "=", "np", ".", "log", "(", "np", ".", "sum", "(", "np", ".", "exp", "(", "log_scores", ")", ",", "axis", "=", "1", ")", ")", "\n", "probs", "=", "np", ".", "exp", "(", "log_scores", "-", "log_denom", "[", ":", ",", "None", "]", ")", "\n", "if", "prob_per_rank", ":", "\n", "            ", "rank_prob_matrix", "[", "i", ",", ":", "]", "=", "np", ".", "mean", "(", "probs", ",", "axis", "=", "0", ")", "\n", "", "rankings_prob", "[", ":", ",", "i", "]", "=", "probs", "[", "ind", ",", "rankings", "[", ":", ",", "i", "]", "]", "\n", "log_scores", "[", "ind", ",", "rankings", "[", ":", ",", "i", "]", "]", "=", "np", ".", "NINF", "\n", "\n", "", "if", "return_gumbel", ":", "\n", "        ", "gumbel_return_values", "=", "gumbel_scores", "\n", "", "else", ":", "\n", "        ", "gumbel_return_values", "=", "None", "\n", "\n", "", "if", "prob_per_rank", ":", "\n", "        ", "return", "(", "\n", "rankings", ",", "\n", "inv_rankings", ",", "\n", "rankings_prob", ",", "\n", "rank_prob_matrix", ",", "\n", "gumbel_return_values", ",", "\n", ")", "\n", "", "else", ":", "\n", "        ", "return", "rankings", ",", "inv_rankings", ",", "rankings_prob", ",", "None", ",", "gumbel_return_values", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.measures.run_metrics.get_relevance_labels": [[6, 11], ["relevance_labels.append"], "function", ["None"], ["def", "get_relevance_labels", "(", "candidates", ")", ":", "\n", "    ", "relevance_labels", "=", "[", "]", "\n", "for", "candidate", "in", "candidates", ":", "\n", "        ", "relevance_labels", ".", "append", "(", "candidate", ".", "originalQualification", ")", "\n", "", "return", "relevance_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.measures.run_metrics.weighted_average_ndcg": [[13, 22], ["numpy.matmul", "felix.ndcg_at_k"], "function", ["home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.measures.ranking_metrics.ndcg_at_k"], ["", "def", "weighted_average_ndcg", "(", "k", ",", "stochastic_policy", ",", "relevance_labels", ")", ":", "\n", "    ", "total_ndcg", "=", "0", "\n", "for", "coefficient", ",", "permutation", "in", "stochastic_policy", ":", "\n", "        ", "ranking_labels", "=", "np", ".", "matmul", "(", "permutation", ".", "T", ",", "relevance_labels", ")", "\n", "ndcg", "=", "ranking_metrics", ".", "ndcg_at_k", "(", "\n", "k", ",", "ranking_labels", ",", "total_labels", "=", "relevance_labels", "\n", ")", "\n", "total_ndcg", "+=", "coefficient", "*", "ndcg", "\n", "", "return", "total_ndcg", "\n", "\n"]], "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.measures.run_metrics.get_protected_attribute_matrix": [[24, 32], ["numpy.zeros", "enumerate", "len"], "function", ["home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.code_bvn_decomposition.bvn_decomposition.zeros"], ["", "def", "get_protected_attribute_matrix", "(", "candidates", ")", ":", "\n", "    ", "group", "=", "np", ".", "zeros", "(", "(", "2", ",", "len", "(", "candidates", ")", ")", ")", "\n", "for", "i", ",", "candidate", "in", "enumerate", "(", "candidates", ")", ":", "\n", "        ", "if", "candidate", ".", "isProtected", ":", "\n", "            ", "group", "[", "1", ",", "i", "]", "=", "1", "\n", "", "else", ":", "\n", "            ", "group", "[", "0", ",", "i", "]", "=", "1", "\n", "", "", "return", "group", "\n", "\n"]], "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.measures.run_metrics.runMetrics": [[34, 87], ["felix.total_exposure_per_group", "numpy.array", "felix.get_metrit_per_group", "felix.EEL", "run_metrics.weighted_average_ndcg", "run_metrics.weighted_average_ndcg", "run_metrics.weighted_average_ndcg", "stochastic_policy.expected_outlierness", "stochastic_policy.expected_number_of_outliers", "stochastic_policy.probability_of_displaying_an_outlier_ranking", "numpy.identity", "run_metrics.get_protected_attribute_matrix", "run_metrics.get_relevance_labels", "len"], "function", ["home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.measures.fairness_metrics.total_exposure_per_group", "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.measures.fairness_metrics.get_metrit_per_group", "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.measures.fairness_metrics.EEL", "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.measures.run_metrics.weighted_average_ndcg", "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.measures.run_metrics.weighted_average_ndcg", "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.measures.run_metrics.weighted_average_ndcg", "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.algorithms.stochastic_policy.StochasticPolicy.expected_outlierness", "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.measures.outlier_metrics.expected_number_of_outliers", "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.algorithms.stochastic_policy.StochasticPolicy.probability_of_displaying_an_outlier_ranking", "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.measures.run_metrics.get_protected_attribute_matrix", "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.measures.run_metrics.get_relevance_labels"], ["", "def", "runMetrics", "(", "stochastic_policy", ",", "individual_fairness", "=", "True", ",", "outlier_top_k", "=", "10", ")", ":", "\n", "\n", "    ", "coefficients_matrix_tuples", "=", "stochastic_policy", ".", "coefficients_matrix_tuples", "\n", "\n", "# If we use individual fairness as constraint we get an identity matrix as group matrix.", "\n", "if", "individual_fairness", ":", "\n", "        ", "group_matrix", "=", "np", ".", "identity", "(", "len", "(", "stochastic_policy", ".", "candidates", ")", ")", "\n", "\n", "# In case we want to use group fairness we use the attributes that are given in the data", "\n", "", "else", ":", "\n", "        ", "group_matrix", "=", "get_protected_attribute_matrix", "(", "\n", "candidates", "=", "stochastic_policy", ".", "candidates", "\n", ")", "\n", "\n", "", "exposure_per_group", "=", "fairness_metrics", ".", "total_exposure_per_group", "(", "\n", "coefficients_matrix_tuples", ",", "group_matrix", "\n", ")", "\n", "\n", "relevance_labels", "=", "np", ".", "array", "(", "get_relevance_labels", "(", "stochastic_policy", ".", "candidates", ")", ")", "\n", "\n", "merit", "=", "fairness_metrics", ".", "get_metrit_per_group", "(", "relevance_labels", ",", "group_matrix", ")", "\n", "\n", "eel", "=", "fairness_metrics", ".", "EEL", "(", "\n", "merit_per_group", "=", "merit", ",", "exposure_per_group", "=", "exposure_per_group", "\n", ")", "\n", "\n", "ndcg1", "=", "weighted_average_ndcg", "(", "1", ",", "coefficients_matrix_tuples", ",", "relevance_labels", ")", "\n", "ndcg5", "=", "weighted_average_ndcg", "(", "5", ",", "coefficients_matrix_tuples", ",", "relevance_labels", ")", "\n", "ndcg10", "=", "weighted_average_ndcg", "(", "10", ",", "coefficients_matrix_tuples", ",", "relevance_labels", ")", "\n", "\n", "outlierness_omit", "=", "stochastic_policy", ".", "expected_outlierness", "(", "\n", "k", "=", "outlier_top_k", ",", "outlier_threshold", "=", "2.5", "\n", ")", "\n", "\n", "outlier_count", "=", "stochastic_policy", ".", "expected_number_of_outliers", "(", "\n", "k", "=", "outlier_top_k", ",", "outlier_threshold", "=", "2.5", "\n", ")", "\n", "\n", "prob_outlier", "=", "stochastic_policy", ".", "probability_of_displaying_an_outlier_ranking", "(", "\n", "k", "=", "outlier_top_k", ",", "outlier_threshold", "=", "2.5", "\n", ")", "\n", "\n", "results", "=", "{", "\n", "\"EEL\"", ":", "eel", ",", "\n", "\"ndcg1\"", ":", "ndcg1", ",", "\n", "\"ndcg5\"", ":", "ndcg5", ",", "\n", "\"ndcg10\"", ":", "ndcg10", ",", "\n", "\"outlierness_omit\"", ":", "outlierness_omit", ",", "\n", "\"outlier_count\"", ":", "outlier_count", ",", "\n", "\"outlier_probability\"", ":", "prob_outlier", ",", "\n", "}", "\n", "\n", "return", "results", "\n", "", ""]], "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.measures.outlier_metrics.count_outliers_zscore": [[4, 12], ["numpy.std", "numpy.mean", "abs"], "function", ["None"], ["def", "count_outliers_zscore", "(", "list", ",", "alpha", "=", "2.5", ")", ":", "\n", "    ", "std", "=", "np", ".", "std", "(", "list", ")", "\n", "mean", "=", "np", ".", "mean", "(", "list", ")", "\n", "count", "=", "0", "\n", "for", "i", "in", "list", ":", "\n", "        ", "if", "abs", "(", "i", "-", "mean", ")", ">", "alpha", "*", "std", ":", "\n", "            ", "count", "+=", "1", "\n", "", "", "return", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.measures.outlier_metrics.determine_outlier_vector": [[14, 22], ["numpy.std", "numpy.mean", "abs", "abs"], "function", ["None"], ["", "def", "determine_outlier_vector", "(", "list", ",", "alpha", "=", "2.5", ")", ":", "\n", "    ", "std", "=", "np", ".", "std", "(", "list", ")", "\n", "mean", "=", "np", ".", "mean", "(", "list", ")", "\n", "outlierness_vector", "=", "[", "\n", "(", "i", "-", "mean", ")", "/", "std", "if", "abs", "(", "i", "-", "mean", ")", ">", "alpha", "*", "std", "else", "0", "for", "i", "in", "list", "\n", "]", "\n", "outlier_vector", "=", "[", "1", "if", "abs", "(", "i", "-", "mean", ")", ">", "alpha", "*", "std", "else", "0", "for", "i", "in", "list", "]", "\n", "return", "outlier_vector", ",", "outlierness_vector", "\n", "\n"]], "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.measures.outlier_metrics.measure_outlierness": [[24, 35], ["numpy.std", "numpy.mean", "outlier_metrics.determine_outlier_vector", "numpy.mean", "abs", "enumerate"], "function", ["home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.measures.outlier_metrics.determine_outlier_vector"], ["", "def", "measure_outlierness", "(", "list", ",", "alpha", "=", "2.5", ")", ":", "\n", "    ", "std", "=", "np", ".", "std", "(", "list", ")", "\n", "if", "std", "==", "0", ":", "\n", "        ", "return", "0", "\n", "", "mean", "=", "np", ".", "mean", "(", "list", ")", "\n", "list", "=", "[", "(", "abs", "(", "(", "s", "-", "mean", ")", ")", "/", "std", ")", "for", "s", "in", "list", "]", "\n", "outlier_vector", ",", "outlierness_vector", "=", "determine_outlier_vector", "(", "list", ",", "alpha", "=", "alpha", ")", "\n", "outlierness_vector", "=", "[", "\n", "o", "if", "outlier_vector", "[", "i", "]", "!=", "0", "else", "0", "for", "i", ",", "o", "in", "enumerate", "(", "outlierness_vector", ")", "\n", "]", "\n", "return", "0", "if", "not", "outlierness_vector", "else", "np", ".", "mean", "(", "outlierness_vector", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.measures.outlier_metrics.probability_displayed_outlier_matrix": [[37, 53], ["outlier_metrics.count_outliers_zscore", "range", "len", "sum"], "function", ["home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.measures.outlier_metrics.count_outliers_zscore"], ["", "def", "probability_displayed_outlier_matrix", "(", "policy", ",", "observable_scores", ",", "alpha", "=", "2.5", ")", ":", "\n", "    ", "\"\"\"Takes as an input a list of pairs of permutation matrix and probability coefficient\n    and a list of observable scores and returns the probability that a matrix with an\n    outlier is being displayed.\"\"\"", "\n", "prob", "=", "0", "\n", "for", "coefficient", ",", "matrix", "in", "policy", ":", "\n", "# get a list with all items in the top k ranking", "\n", "        ", "top_k", "=", "[", "i", "for", "i", "in", "range", "(", "len", "(", "matrix", ")", ")", "if", "sum", "(", "matrix", "[", "i", "]", ")", "==", "1", "]", "\n", "# get score of all items in the list", "\n", "scores", "=", "[", "observable_scores", "[", "i", "]", "for", "i", "in", "top_k", "]", "\n", "# calculate whether the ranking has an outlier", "\n", "if", "count_outliers_zscore", "(", "scores", ",", "alpha", "=", "alpha", ")", ">", "0", ":", "\n", "# add the probability that this ranking is displayed to the total", "\n", "# probability of getting an outlier list.", "\n", "            ", "prob", "+=", "coefficient", "\n", "", "", "return", "prob", "\n", "\n"]], "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.measures.outlier_metrics.expected_number_of_outliers": [[55, 67], ["outlier_metrics.count_outliers_zscore", "range", "len", "sum"], "function", ["home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.measures.outlier_metrics.count_outliers_zscore"], ["", "def", "expected_number_of_outliers", "(", "policy", ",", "observable_scores", ",", "alpha", "=", "2.5", ")", ":", "\n", "    ", "\"\"\"Takes as an input a list of pairs of permutation matrix and probability scalar and returns\n    the expected number of outliers in a sampled ranking.\"\"\"", "\n", "E", "=", "0", "\n", "for", "coefficient", ",", "matrix", "in", "policy", ":", "\n", "# get a list with all items in the top k ranking", "\n", "        ", "top_k", "=", "[", "i", "for", "i", "in", "range", "(", "len", "(", "matrix", ")", ")", "if", "sum", "(", "matrix", "[", "i", "]", ")", "==", "1", "]", "\n", "# get score of all items in the list", "\n", "scores", "=", "[", "observable_scores", "[", "i", "]", "for", "i", "in", "top_k", "]", "\n", "# add to weighted sum if scores contain an outlier", "\n", "E", "+=", "coefficient", "*", "count_outliers_zscore", "(", "scores", ",", "alpha", "=", "alpha", ")", "\n", "", "return", "E", "\n", "", ""]], "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.measures.ranking_metrics.dcg_at_k": [[4, 13], ["numpy.sum", "min", "numpy.log2", "numpy.arange"], "function", ["None"], ["def", "dcg_at_k", "(", "labels_ranked", ",", "k", ")", ":", "\n", "    ", "if", "k", ">", "0", ":", "\n", "        ", "k", "=", "min", "(", "labels_ranked", ".", "shape", "[", "0", "]", ",", "k", ")", "\n", "", "else", ":", "\n", "        ", "k", "=", "labels_ranked", ".", "shape", "[", "0", "]", "\n", "", "denom", "=", "1.0", "/", "np", ".", "log2", "(", "np", ".", "arange", "(", "k", ")", "+", "2.0", ")", "\n", "nom", "=", "2", "**", "labels_ranked", "-", "1.0", "\n", "dcg", "=", "np", ".", "sum", "(", "nom", "[", ":", "k", "]", "*", "denom", ")", "\n", "return", "dcg", "\n", "\n"]], "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.measures.ranking_metrics.ndcg_at_k": [[15, 38], ["numpy.array", "numpy.array", "numpy.array", "ranking_metrics.dcg_at_k", "sorted", "ranking_metrics.dcg_at_k", "ranking_metrics.dcg_at_k", "sorted", "len"], "function", ["home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.measures.ranking_metrics.dcg_at_k", "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.measures.ranking_metrics.dcg_at_k", "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.measures.ranking_metrics.dcg_at_k"], ["", "def", "ndcg_at_k", "(", "k", ",", "relevance_labels", ",", "total_labels", "=", "None", ")", ":", "\n", "\n", "    ", "\"\"\"\n    Calculate NDCG\n\n    @param k: rank of last item we consider for this metric\n    @param relevance_labels: true relevance labels in order that we want to determine the ndcg of\n    @param total_labels: if not None, defines the labels used for determining the ideal ranking\n\n    return NDCG\n    \"\"\"", "\n", "if", "total_labels", "is", "None", ":", "\n", "        ", "ideal_labels", "=", "np", ".", "array", "(", "sorted", "(", "relevance_labels", ",", "reverse", "=", "True", ")", ")", "\n", "", "else", ":", "\n", "        ", "ideal_labels", "=", "np", ".", "array", "(", "\n", "sorted", "(", "total_labels", ",", "reverse", "=", "True", ")", "[", ":", "len", "(", "relevance_labels", ")", "]", "\n", ")", "\n", "", "relevance_labels", "=", "np", ".", "array", "(", "relevance_labels", ")", "\n", "if", "dcg_at_k", "(", "relevance_labels", ",", "k", ")", "==", "0", ":", "\n", "        ", "return", "0", "\n", "", "else", ":", "\n", "        ", "ndcg", "=", "dcg_at_k", "(", "relevance_labels", ",", "k", ")", "/", "dcg_at_k", "(", "ideal_labels", ",", "k", ")", "\n", "", "return", "ndcg", "\n", "", ""]], "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.measures.fairness_metrics.get_exposure_per_rank": [[4, 8], ["numpy.arange", "numpy.log2"], "function", ["None"], ["def", "get_exposure_per_rank", "(", "num_positions", ")", ":", "\n", "    ", "v", "=", "np", ".", "arange", "(", "1", ",", "(", "num_positions", "+", "1", ")", ",", "1", ")", "\n", "v", "=", "1", "/", "np", ".", "log2", "(", "1", "+", "v", ")", "\n", "return", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.measures.fairness_metrics.get_exposure_per_item": [[10, 13], ["fairness_metrics.get_exposure_per_rank", "numpy.matmul", "len"], "function", ["home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.measures.fairness_metrics.get_exposure_per_rank"], ["", "def", "get_exposure_per_item", "(", "permutation_matrix", ")", ":", "\n", "    ", "exposure_per_rank", "=", "get_exposure_per_rank", "(", "len", "(", "permutation_matrix", "[", "0", "]", ")", ")", "\n", "return", "np", ".", "matmul", "(", "permutation_matrix", ",", "exposure_per_rank", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.measures.fairness_metrics.get_exposure_per_group": [[15, 18], ["fairness_metrics.get_exposure_per_item", "numpy.matmul"], "function", ["home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.measures.fairness_metrics.get_exposure_per_item"], ["", "def", "get_exposure_per_group", "(", "permutation_matrix", ",", "group_per_candidate", ")", ":", "\n", "    ", "exposure_per_item", "=", "get_exposure_per_item", "(", "permutation_matrix", ")", "\n", "return", "np", ".", "matmul", "(", "group_per_candidate", ",", "exposure_per_item", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.measures.fairness_metrics.total_exposure_per_group": [[20, 27], ["numpy.zeros", "len", "fairness_metrics.get_exposure_per_group"], "function", ["home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.code_bvn_decomposition.bvn_decomposition.zeros", "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.measures.fairness_metrics.get_exposure_per_group"], ["", "def", "total_exposure_per_group", "(", "coefficient_matrix_tuples", ",", "group_per_candidate", ")", ":", "\n", "    ", "exposure_per_group", "=", "np", ".", "zeros", "(", "(", "len", "(", "group_per_candidate", ")", ",", ")", ")", "\n", "for", "coefficient", ",", "permutation", "in", "coefficient_matrix_tuples", ":", "\n", "        ", "exposure_per_group", "+=", "coefficient", "*", "get_exposure_per_group", "(", "\n", "permutation", ",", "group_per_candidate", "\n", ")", "\n", "", "return", "exposure_per_group", "\n", "\n"]], "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.measures.fairness_metrics.get_metrit_per_group": [[29, 31], ["numpy.matmul"], "function", ["None"], ["", "def", "get_metrit_per_group", "(", "relevance_labels", ",", "group_per_candidate", ")", ":", "\n", "    ", "return", "np", ".", "matmul", "(", "group_per_candidate", ",", "relevance_labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.measures.fairness_metrics.EEL": [[33, 42], ["sum", "sum", "numpy.dot"], "function", ["None"], ["", "def", "EEL", "(", "merit_per_group", ",", "exposure_per_group", ")", ":", "\n", "    ", "s_exp", "=", "exposure_per_group", "\n", "avail_exp", "=", "sum", "(", "exposure_per_group", ")", "\n", "total_merit", "=", "sum", "(", "merit_per_group", ")", "\n", "tgt_exp", "=", "merit_per_group", "*", "(", "avail_exp", "/", "total_merit", ")", "\n", "delta", "=", "s_exp", "-", "tgt_exp", "\n", "\n", "ee_loss", "=", "np", ".", "dot", "(", "delta", ",", "delta", ")", "\n", "return", "ee_loss", "\n", "", ""]], "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.code_bvn_decomposition.matching.hopcroft_karp_matching_multiplicity": [[23, 181], ["networkx.algorithms.bipartite.sets", "collections.deque", "matching.hopcroft_karp_matching_multiplicity.breadth_first_search"], "function", ["None"], ["def", "hopcroft_karp_matching_multiplicity", "(", "\n", "G", ",", "\n", "top_nodes", "=", "None", ",", "\n", "right_nodes_multiplicity", "=", "None", ",", "\n", ")", ":", "\n", "    ", "\"\"\"Returns the maximum cardinality matching of the bipartite graph `G`.\n\n    A matching is a set of edges that do not share any nodes. In this variant\n    of the Hopcroft Karb matching algorithm, we allow certain nodes to have a\n    higher multiplicity, which allows them to match with more than one node.\n    Maximum cardinality matching is a matching with the most edges possible. It\n    is not always unique. Finding a matching in a bipartite graph can be\n    treated as a networkx flow problem.\n\n    Parameters\n    ----------\n    G : NetworkX graph\n\n      Undirected bipartite graph\n\n    top_nodes : container of nodes\n\n      Container with all nodes in one bipartite node set. If not supplied\n      it will be computed. But if more than one solution exists an exception\n      will be raised.\n\n    right_nodes_multiplicity: dict\n\n      Dictionary with right-node-id as keys and multiplicity counter as values.\n\n    Returns\n    -------\n    matches : dictionary\n\n      The matching is returned as a dictionary, `matches`, such that\n      ``matches[v] == w`` if node `v` is matched to node `w`. Unmatched\n      nodes do not occur as a key in `matches`.\n\n    Raises\n    ------\n    AmbiguousSolution\n      Raised if the input bipartite graph is disconnected and no container\n      with all nodes in one bipartite set is provided. When determining\n      the nodes in each bipartite set more than one valid solution is\n      possible if the input graph is disconnected.\n\n    Notes\n    -----\n    This function is implemented with the `Hopcroft--Karp matching algorithm\n    <https://en.wikipedia.org/wiki/Hopcroft%E2%80%93Karp_algorithm>`_ for\n    bipartite graphs.\n\n    See :mod:`bipartite documentation <networkx.algorithms.bipartite>`\n    for further details on how bipartite graphs are handled in NetworkX.\n\n    See Also\n    --------\n    maximum_matching\n    hopcroft_karp_matching\n    eppstein_matching\n\n    References\n    ----------\n    .. [1] John E. Hopcroft and Richard M. Karp. \"An n^{5 / 2} Algorithm for\n       Maximum Matchings in Bipartite Graphs\" In: **SIAM Journal of Computing**\n       2.4 (1973), pp. 225--231. <https://doi.org/10.1137/0202019>.\n\n    \"\"\"", "\n", "# First we define some auxiliary search functions.", "\n", "#", "\n", "# If you are a human reading these auxiliary search functions, the \"global\"", "\n", "# variables `leftmatches`, `rightmatches`, `distances`, etc. are defined", "\n", "# below the functions, so that they are initialized close to the initial", "\n", "# invocation of the search functions.", "\n", "def", "breadth_first_search", "(", ")", ":", "\n", "        ", "for", "v", "in", "left", ":", "\n", "            ", "if", "leftmatches", "[", "v", "]", "is", "None", ":", "\n", "                ", "distances", "[", "v", "]", "=", "0", "\n", "queue", ".", "append", "(", "v", ")", "\n", "", "else", ":", "\n", "                ", "distances", "[", "v", "]", "=", "INFINITY", "\n", "", "", "distances", "[", "None", "]", "=", "INFINITY", "\n", "while", "queue", ":", "\n", "            ", "v", "=", "queue", ".", "popleft", "(", ")", "\n", "if", "distances", "[", "v", "]", "<", "distances", "[", "None", "]", ":", "\n", "                ", "for", "u", "in", "G", "[", "v", "]", ":", "\n", "                    ", "if", "len", "(", "rightmatches", "[", "u", "]", ")", "<", "right_nodes_multiplicity", ".", "get", "(", "u", ",", "0", ")", ":", "\n", "                        ", "distances", "[", "None", "]", "=", "distances", "[", "v", "]", "+", "1", "\n", "", "else", ":", "\n", "                        ", "for", "rightmatch", "in", "rightmatches", "[", "u", "]", ":", "\n", "                            ", "if", "distances", "[", "rightmatch", "]", "is", "INFINITY", ":", "\n", "                                ", "distances", "[", "rightmatch", "]", "=", "distances", "[", "v", "]", "+", "1", "\n", "queue", ".", "append", "(", "rightmatch", ")", "\n", "", "", "", "", "", "", "return", "distances", "[", "None", "]", "is", "not", "INFINITY", "\n", "\n", "", "def", "depth_first_search", "(", "v", ")", ":", "\n", "        ", "if", "v", "is", "not", "None", ":", "\n", "            ", "if", "type", "(", "v", ")", "==", "int", ":", "\n", "                ", "v", "=", "[", "v", "]", "\n", "", "for", "v_", "in", "v", ":", "\n", "                ", "for", "u", "in", "G", "[", "v_", "]", ":", "\n", "# If u not matched with full multiplicity_count we have a new path.", "\n", "                    ", "if", "not", "rightmatches", "[", "u", "]", "or", "len", "(", "\n", "rightmatches", "[", "u", "]", "\n", ")", "<", "right_nodes_multiplicity", ".", "get", "(", "u", ",", "0", ")", ":", "\n", "# We need to remove the previous connection of v_", "\n", "                        ", "if", "leftmatches", "[", "v_", "]", ":", "\n", "                            ", "rightmatches", "[", "leftmatches", "[", "v_", "]", "]", ".", "remove", "(", "v_", ")", "\n", "", "leftmatches", "[", "v_", "]", "=", "u", "\n", "rightmatches", "[", "u", "]", ".", "append", "(", "v_", ")", "\n", "return", "True", "\n", "# If u matched with full multiplicity_count we need to look further for a path", "\n", "", "else", ":", "\n", "                        ", "for", "r", "in", "rightmatches", "[", "u", "]", ":", "\n", "                            ", "if", "distances", "[", "r", "]", "==", "distances", "[", "v_", "]", "+", "1", ":", "\n", "                                ", "if", "len", "(", "rightmatches", "[", "u", "]", ")", "<", "right_nodes_multiplicity", ".", "get", "(", "\n", "u", ",", "0", "\n", ")", ":", "\n", "                                    ", "rightmatches", "[", "u", "]", ".", "append", "(", "v_", ")", "\n", "leftmatches", "[", "v_", "]", "=", "u", "\n", "return", "True", "\n", "", "elif", "depth_first_search", "(", "r", ")", ":", "\n", "                                    ", "if", "leftmatches", "[", "v_", "]", ":", "\n", "                                        ", "rightmatches", "[", "leftmatches", "[", "v_", "]", "]", ".", "remove", "(", "v_", ")", "\n", "", "rightmatches", "[", "u", "]", ".", "append", "(", "v_", ")", "\n", "leftmatches", "[", "v_", "]", "=", "u", "\n", "return", "True", "\n", "", "", "", "", "", "distances", "[", "v_", "]", "=", "INFINITY", "\n", "", "return", "False", "\n", "", "return", "True", "\n", "\n", "# Initialize the \"global\" variables that maintain state during the search.", "\n", "", "left", ",", "right", "=", "bipartite_sets", "(", "G", ",", "top_nodes", ")", "\n", "leftmatches", "=", "{", "v", ":", "None", "for", "v", "in", "left", "}", "\n", "rightmatches", "=", "{", "v", ":", "[", "]", "for", "v", "in", "right", "}", "\n", "distances", "=", "{", "}", "\n", "queue", "=", "collections", ".", "deque", "(", ")", "\n", "\n", "if", "right_nodes_multiplicity", "is", "None", ":", "\n", "        ", "right_nodes_multiplicity", "=", "{", "r", ":", "1", "for", "r", "in", "right", "}", "\n", "\n", "", "while", "breadth_first_search", "(", ")", ":", "\n", "        ", "for", "v", "in", "left", ":", "\n", "            ", "if", "leftmatches", "[", "v", "]", "is", "None", ":", "\n", "                ", "if", "depth_first_search", "(", "v", ")", ":", "\n", "                    ", "pass", "\n", "\n", "# Strip the entries matched to `None`.", "\n", "", "", "", "", "leftmatches", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "leftmatches", ".", "items", "(", ")", "if", "v", "is", "not", "None", "}", "\n", "rightmatches", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "rightmatches", ".", "items", "(", ")", "if", "v", "is", "not", "None", "}", "\n", "\n", "# At this point, the left matches and the right matches are inverses of one", "\n", "# another. In other words,", "\n", "#", "\n", "#     leftmatches == {v, k for k, v in rightmatches.items()}", "\n", "#", "\n", "# Finally, we combine both the left matches and right matches.", "\n", "return", "dict", "(", "itertools", ".", "chain", "(", "leftmatches", ".", "items", "(", ")", ",", "rightmatches", ".", "items", "(", ")", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.code_bvn_decomposition.random_stochastic_matrix.random_permutation_matrix": [[4, 7], ["numpy.random.permutation", "random_stochastic_matrix.list_to_permutation_matrix"], "function", ["home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.code_bvn_decomposition.random_stochastic_matrix.list_to_permutation_matrix"], ["def", "random_permutation_matrix", "(", "n", ",", "top_k", "=", "None", ")", ":", "\n", "    ", "per", "=", "np", ".", "random", ".", "permutation", "(", "n", ")", "\n", "return", "list_to_permutation_matrix", "(", "per", ",", "top_k", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.code_bvn_decomposition.random_stochastic_matrix.random_stochastic_matrix": [[9, 20], ["numpy.random.random", "numpy.zeros", "numpy.sum", "random_stochastic_matrix.random_permutation_matrix"], "function", ["home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.code_bvn_decomposition.bvn_decomposition.zeros", "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.code_bvn_decomposition.random_stochastic_matrix.random_permutation_matrix"], ["", "def", "random_stochastic_matrix", "(", "set_length", ",", "num_permutations", ",", "k", "=", "10", ")", ":", "\n", "    ", "\"\"\"This will produce a stochastic matrix, where the sum of each column sums to 1, and the sum of each\n    row is bounded by 1. If l=set_length, this function will return a doubly stochastic matrix. Each column\n    represents a position, the columns represent the different items.\"\"\"", "\n", "coefficients", "=", "np", ".", "random", ".", "random", "(", "num_permutations", ")", "\n", "coefficients", "=", "coefficients", "/", "np", ".", "sum", "(", "coefficients", ")", "\n", "sm", "=", "np", ".", "zeros", "(", "[", "set_length", ",", "k", "]", ")", "\n", "for", "coefficient", "in", "coefficients", ":", "\n", "        ", "P", "=", "random_permutation_matrix", "(", "set_length", ",", "top_k", "=", "k", ")", "\n", "sm", "=", "sm", "+", "coefficient", "*", "P", "\n", "", "return", "sm", "\n", "\n"]], "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.code_bvn_decomposition.random_stochastic_matrix.add_single_column_with_rest_probabilities": [[22, 37], ["numpy.array", "numpy.ones", "numpy.sum", "numpy.concatenate", "numpy.sum", "len"], "function", ["None"], ["", "def", "add_single_column_with_rest_probabilities", "(", "potentially_stochastic_matrix", ")", ":", "\n", "    ", "potentially_stochastic_matrix", "=", "np", ".", "array", "(", "potentially_stochastic_matrix", ")", "\n", "column_sum", "=", "np", ".", "sum", "(", "potentially_stochastic_matrix", ",", "axis", "=", "0", ")", "[", "0", "]", "\n", "ones", "=", "np", ".", "ones", "(", "\n", "shape", "=", "(", "\n", "len", "(", "potentially_stochastic_matrix", ")", ",", "\n", "1", ",", "\n", ")", "\n", ")", "\n", "rest_prob_rows", "=", "np", ".", "sum", "(", "potentially_stochastic_matrix", ",", "axis", "=", "1", ")", "\n", "rest_prob_rows", "=", "(", "column_sum", "*", "ones", ".", "T", "-", "rest_prob_rows", "*", "ones", ".", "T", ")", ".", "T", "\n", "potentially_stochastic_matrix", "=", "np", ".", "concatenate", "(", "\n", "(", "potentially_stochastic_matrix", ",", "rest_prob_rows", ")", ",", "axis", "=", "1", "\n", ")", "\n", "return", "potentially_stochastic_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.code_bvn_decomposition.random_stochastic_matrix.list_to_permutation_matrix": [[39, 51], ["len", "numpy.arange", "numpy.identity", "numpy.array", "numpy.zeros", "range"], "function", ["home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.code_bvn_decomposition.bvn_decomposition.zeros"], ["", "def", "list_to_permutation_matrix", "(", "permut_as_list", ",", "k", "=", "None", ")", ":", "\n", "    ", "set_length", "=", "len", "(", "permut_as_list", ")", "\n", "if", "k", "is", "None", ":", "\n", "        ", "k", "=", "set_length", "\n", "\n", "", "top_k", "=", "np", ".", "arange", "(", "k", ")", "\n", "E", "=", "np", ".", "identity", "(", "set_length", ")", "# initialize an identity matrix", "\n", "permutation", "=", "np", ".", "array", "(", "[", "top_k", ",", "permut_as_list", "]", ")", "# butterfly permutation example", "\n", "P", "=", "np", ".", "zeros", "(", "[", "set_length", ",", "k", "]", ")", "# initialize the permutation matrix", "\n", "for", "j", "in", "range", "(", "0", ",", "set_length", ")", ":", "\n", "        ", "P", "[", "j", "]", "=", "E", "[", "permutation", "[", "1", "]", "[", "j", "]", "]", "[", ":", "k", "]", "# Only consider positions up to k", "\n", "", "return", "P", "\n", "", ""]], "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.code_bvn_decomposition.bvn_decomposition.to_pattern_matrix": [[32, 45], ["numpy.zeros_like", "D.nonzero"], "function", ["None"], ["def", "to_pattern_matrix", "(", "D", ")", ":", "\n", "    ", "\"\"\"Returns the Boolean matrix in the same shape as `D` with ones exactly\n    where there are nonzero entries in `D`.\n    `D` must be a NumPy array.\n    \"\"\"", "\n", "result", "=", "np", ".", "zeros_like", "(", "D", ")", "\n", "# This is a cleverer way of doing", "\n", "#", "\n", "#     for (u, v) in zip(*(D.nonzero())):", "\n", "#         result[u, v] = 1", "\n", "#", "\n", "result", "[", "D", ".", "nonzero", "(", ")", "]", "=", "1", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.code_bvn_decomposition.bvn_decomposition.zeros": [[47, 50], ["numpy.zeros"], "function", ["home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.code_bvn_decomposition.bvn_decomposition.zeros"], ["", "def", "zeros", "(", "m", ",", "n", ")", ":", "\n", "    ", "\"\"\"Convenience function for ``numpy.zeros((m, n))``.\"\"\"", "\n", "return", "np", ".", "zeros", "(", "(", "m", ",", "n", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.code_bvn_decomposition.bvn_decomposition.hstack": [[52, 55], ["numpy.hstack"], "function", ["home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.code_bvn_decomposition.bvn_decomposition.hstack"], ["", "def", "hstack", "(", "left", ",", "right", ")", ":", "\n", "    ", "\"\"\"Convenience function for ``numpy.hstack((left, right))``.\"\"\"", "\n", "return", "np", ".", "hstack", "(", "(", "left", ",", "right", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.code_bvn_decomposition.bvn_decomposition.vstack": [[57, 60], ["numpy.vstack"], "function", ["home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.code_bvn_decomposition.bvn_decomposition.vstack"], ["", "def", "vstack", "(", "top", ",", "bottom", ")", ":", "\n", "    ", "\"\"\"Convenience function for ``numpy.vstack((top, bottom))``.\"\"\"", "\n", "return", "np", ".", "vstack", "(", "(", "top", ",", "bottom", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.code_bvn_decomposition.bvn_decomposition.four_blocks": [[62, 70], ["bvn_decomposition.vstack", "bvn_decomposition.hstack", "bvn_decomposition.hstack"], "function", ["home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.code_bvn_decomposition.bvn_decomposition.vstack", "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.code_bvn_decomposition.bvn_decomposition.hstack", "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.code_bvn_decomposition.bvn_decomposition.hstack"], ["", "def", "four_blocks", "(", "topleft", ",", "topright", ",", "bottomleft", ",", "bottomright", ")", ":", "\n", "    ", "\"\"\"Convenience function that creates a block matrix with the specified\n    blocks.\n    Each argument must be a NumPy matrix. The two top matrices must have the\n    same number of rows, as must the two bottom matrices. The two left matrices\n    must have the same number of columns, as must the two right matrices.\n    \"\"\"", "\n", "return", "vstack", "(", "hstack", "(", "topleft", ",", "topright", ")", ",", "hstack", "(", "bottomleft", ",", "bottomright", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.code_bvn_decomposition.bvn_decomposition.to_bipartite_matrix": [[72, 81], ["bvn_decomposition.four_blocks", "bvn_decomposition.zeros", "bvn_decomposition.zeros"], "function", ["home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.code_bvn_decomposition.bvn_decomposition.four_blocks", "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.code_bvn_decomposition.bvn_decomposition.zeros", "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.code_bvn_decomposition.bvn_decomposition.zeros"], ["", "def", "to_bipartite_matrix", "(", "A", ")", ":", "\n", "    ", "\"\"\"Returns the adjacency matrix of a bipartite graph whose biadjacency\n    matrix is `A`.\n    `A` must be a NumPy array.\n    If `A` has **m** rows and **n** columns, then the returned matrix has **m +\n    n** rows and columns.\n    \"\"\"", "\n", "m", ",", "n", "=", "A", ".", "shape", "\n", "return", "four_blocks", "(", "zeros", "(", "m", ",", "m", ")", ",", "A", ",", "A", ".", "T", ",", "zeros", "(", "n", ",", "n", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.code_bvn_decomposition.bvn_decomposition.to_permutation_matrix": [[83, 101], ["numpy.zeros", "tuple", "zip", "matches.items"], "function", ["home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.code_bvn_decomposition.bvn_decomposition.zeros"], ["", "def", "to_permutation_matrix", "(", "matches", ",", "m", ",", "n", ")", ":", "\n", "    ", "\"\"\"Converts a permutation into a permutation matrix.\n    `matches` is a dictionary whose keys are vertices and whose values are\n    partners. For each vertex ``u`` and ``v``, entry (``u``, ``v``) in the\n    returned matrix will be a ``1`` if and only if ``matches[u] == v``.\n    Pre-condition: `matches` must be a permutation on an initial subset of the\n    natural numbers.\n    Returns a permutation matrix as a square NumPy array.\n    \"\"\"", "\n", "P", "=", "np", ".", "zeros", "(", "(", "m", ",", "n", ")", ")", "\n", "# This is a cleverer way of doing", "\n", "#", "\n", "#     for (u, v) in matches.items():", "\n", "#         P[u, v] = 1", "\n", "#", "\n", "targets", "=", "tuple", "(", "zip", "(", "*", "(", "matches", ".", "items", "(", ")", ")", ")", ")", "\n", "P", "[", "targets", "]", "=", "1", "\n", "return", "P", "\n", "\n"]], "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.code_bvn_decomposition.bvn_decomposition.resampling_condition": [[103, 106], ["numpy.matmul", "quality_measure"], "function", ["None"], ["", "def", "resampling_condition", "(", "matrix", ",", "scores", ",", "quality_measure", ",", "threshold", "=", "1", ",", "top_k", "=", "10", ")", ":", "\n", "    ", "scores", "=", "np", ".", "matmul", "(", "scores", ",", "matrix", ")", "[", ":", "top_k", "]", "\n", "return", "quality_measure", "(", "scores", ")", ">=", "threshold", "\n", "\n"]], "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.code_bvn_decomposition.bvn_decomposition.birkhoff_von_neumann_decomposition": [[108, 252], ["add_single_column_with_rest_probabilities.astype", "ValueError", "numpy.allclose", "bvn_decomposition.to_pattern_matrix", "bvn_decomposition.to_bipartite_matrix", "networkx.from_numpy_matrix", "range", "felix.src.code_bvn_decomposition.matching.hopcroft_karp_matching_multiplicity", "bvn_decomposition.to_permutation_matrix", "min", "functools.reduce", "permut[].dot", "permut[].dot", "bvn_decomposition.birkhoff_von_neumann_decomposition", "list", "list", "add_single_column_with_rest_probabilities", "list", "list", "bvn_decomposition.resampling_condition", "outlier_permutations.append", "outlier_coefficients.append", "coefficients.append", "permutations.append", "random_permutation_matrix", "random_permutation_matrix", "list", "zip", "zip", "list", "itertools.product", "itertools.product", "felix.src.code_bvn_decomposition.matching.hopcroft_karp_matching_multiplicity.items", "zip", "permut[].T.dot", "list", "zip", "list", "range", "range", "range", "range", "range", "numpy.abs"], "function", ["home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.code_bvn_decomposition.bvn_decomposition.to_pattern_matrix", "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.code_bvn_decomposition.bvn_decomposition.to_bipartite_matrix", "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.code_bvn_decomposition.matching.hopcroft_karp_matching_multiplicity", "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.code_bvn_decomposition.bvn_decomposition.to_permutation_matrix", "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.code_bvn_decomposition.bvn_decomposition.birkhoff_von_neumann_decomposition", "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.code_bvn_decomposition.random_stochastic_matrix.add_single_column_with_rest_probabilities", "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.code_bvn_decomposition.bvn_decomposition.resampling_condition", "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.code_bvn_decomposition.random_stochastic_matrix.random_permutation_matrix", "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.code_bvn_decomposition.random_stochastic_matrix.random_permutation_matrix"], ["", "def", "birkhoff_von_neumann_decomposition", "(", "\n", "D", ",", "\n", "re_search_outliers", "=", "0", ",", "\n", "quality_measure", "=", "None", ",", "\n", "scores", "=", "None", ",", "\n", "top_k", "=", "None", ",", "\n", "resampling_threshold", "=", "1", ",", "\n", ")", ":", "\n", "    ", "m", ",", "n", "=", "D", ".", "shape", "\n", "right_nodes_multiplicity", "=", "None", "\n", "if", "m", "<", "n", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "\"The input matrix should have at least as many rows as columns. Else input transposed matrix.\"", "\n", ")", "\n", "", "elif", "m", ">", "n", ":", "\n", "# For a non-squared matrix add a column with multiplicity m - n.", "\n", "# We will use an adjusted version of the Hopcroft-Karb algorithm", "\n", "# with multiplicity to find a matching that fits this multiplicity", "\n", "# perfectly.", "\n", "        ", "right_nodes_multiplicity", "=", "{", "column", ":", "1", "for", "column", "in", "range", "(", "m", ",", "m", "+", "n", ")", "}", "\n", "D", "=", "add_single_column_with_rest_probabilities", "(", "D", ")", "\n", "right_nodes_multiplicity", "[", "m", "+", "n", "]", "=", "m", "-", "n", "\n", "\n", "indices", "=", "list", "(", "itertools", ".", "product", "(", "range", "(", "m", ")", ",", "range", "(", "n", "+", "1", ")", ")", ")", "\n", "", "else", ":", "\n", "        ", "indices", "=", "list", "(", "itertools", ".", "product", "(", "range", "(", "m", ")", ",", "range", "(", "n", ")", ")", ")", "\n", "\n", "# These two lists store the coefficients and matrices that we iteratively", "\n", "# split off with the BvN decomposition", "\n", "", "coefficients", "=", "[", "]", "\n", "permutations", "=", "[", "]", "\n", "\n", "# Create a copy of D so that we don't modify it directly. Cast the", "\n", "# entries of the matrix to floating point numbers, regardless of", "\n", "# whether they were integers.", "\n", "S", "=", "D", ".", "astype", "(", "\"float\"", ")", "\n", "outlier_permutations", "=", "[", "]", "\n", "outlier_coefficients", "=", "[", "]", "\n", "while", "not", "np", ".", "allclose", "(", "S", ",", "0", ")", ":", "\n", "# Create an undirected graph whose adjacency matrix contains a 1", "\n", "# exactly where the matrix S has a nonzero entry.", "\n", "        ", "W", "=", "to_pattern_matrix", "(", "S", ")", "\n", "\n", "# Construct the bipartite graph whose left and right vertices both", "\n", "# represent the vertex set of the pattern graph (whose adjacency matrix", "\n", "# is ``W``).", "\n", "X", "=", "to_bipartite_matrix", "(", "W", ")", "\n", "\n", "# Convert the matrix of a bipartite graph into a NetworkX graph object.", "\n", "G", "=", "from_numpy_matrix", "(", "X", ")", "\n", "\n", "# Compute a perfect matching for this graph. The dictionary `M` has one", "\n", "# entry for each matched vertex (in both the left and the right vertex", "\n", "# sets), and the corresponding value is its partner.", "\n", "#", "\n", "# The bipartite maximum matching algorithm requires specifying", "\n", "# the left set of nodes in the bipartite graph. By construction,", "\n", "# the left set of nodes is {0, ..., n - 1} and the right set is", "\n", "# {n, ..., 2n - 1}; see `to_bipartite_matrix()`.", "\n", "left_nodes", "=", "range", "(", "m", ")", "\n", "\n", "M", "=", "hopcroft_karp_matching_multiplicity", "(", "\n", "G", ",", "\n", "left_nodes", ",", "\n", "right_nodes_multiplicity", "=", "right_nodes_multiplicity", ",", "\n", ")", "\n", "\n", "# However, since we have both a left vertex set and a right vertex set,", "\n", "# each representing the original vertex set of the pattern graph", "\n", "# (``W``), we need to convert any vertex greater than ``n`` to its", "\n", "# original vertex number. To do this,", "\n", "#", "\n", "#   - ignore any keys greater than ``n``, since they are already", "\n", "#     covered by earlier key/value pairs,", "\n", "#   - ensure that all values are less than ``n``.", "\n", "#", "\n", "\n", "M", "=", "{", "u", ":", "v", "-", "m", "for", "u", ",", "v", "in", "M", ".", "items", "(", ")", "if", "u", "<", "m", "}", "\n", "\n", "# Convert that perfect matching to a permutation matrix.", "\n", "P", "=", "to_permutation_matrix", "(", "M", ",", "m", ",", "m", ")", "\n", "P", "=", "P", "[", ":", ",", ":", "n", "+", "1", "]", "\n", "\n", "# Get the smallest entry of S corresponding to the 1 entries in the", "\n", "# permutation matrix.", "\n", "q", "=", "min", "(", "S", "[", "i", ",", "j", "]", "for", "(", "i", ",", "j", ")", "in", "indices", "if", "P", "[", "i", ",", "j", "]", "==", "1", ")", "\n", "\n", "# If the re_search_outliers argument is passed as True we group the", "\n", "# permutation matrices into two sets, dependent on whether they contain", "\n", "# an outlier.", "\n", "if", "re_search_outliers", ">", "0", "and", "resampling_condition", "(", "\n", "matrix", "=", "P", ",", "\n", "scores", "=", "scores", ",", "\n", "quality_measure", "=", "quality_measure", ",", "\n", "top_k", "=", "top_k", ",", "\n", "threshold", "=", "resampling_threshold", ",", "\n", ")", ":", "\n", "            ", "outlier_permutations", ".", "append", "(", "P", "[", ":", ",", ":", "n", "]", ")", "\n", "outlier_coefficients", ".", "append", "(", "q", ")", "\n", "", "else", ":", "\n", "            ", "coefficients", ".", "append", "(", "q", ")", "\n", "permutations", ".", "append", "(", "P", "[", ":", ",", ":", "n", "]", ")", "\n", "# Subtract P scaled by q. After this subtraction, S has a zero entry", "\n", "# where the value q used to live.", "\n", "", "S", "-=", "q", "*", "P", "\n", "# PRECISION ISSUE: There seems to be a problem with floating point", "\n", "# precision here, so we need to round down to 0 any entry that is very", "\n", "# small.", "\n", "S", "[", "np", ".", "abs", "(", "S", ")", "<", "TOLERANCE", "]", "=", "0.0", "\n", "\n", "# If re_search_outliers is passed as True we aggregate the rankings with", "\n", "# outliers to a new matrix that we input into another iteration of the BvN", "\n", "# decomposition algorithm.", "\n", "", "if", "re_search_outliers", ">", "0", "and", "outlier_permutations", ":", "\n", "# We aggregate the outlier matrices.", "\n", "        ", "outliers", "=", "[", "q", "*", "P", "for", "q", ",", "P", "in", "zip", "(", "outlier_coefficients", ",", "outlier_permutations", ")", "]", "\n", "outliers_sum", "=", "reduce", "(", "lambda", "x", ",", "y", ":", "x", "+", "y", ",", "outliers", ")", "\n", "# Since our algorithm does not actually sample randomly but in order", "\n", "# we permute the rows of the matrix to get a different decomposition", "\n", "# in the next iteration", "\n", "permut", "=", "(", "random_permutation_matrix", "(", "m", ")", ",", "random_permutation_matrix", "(", "n", ")", ")", "\n", "scores_perm", "=", "permut", "[", "0", "]", ".", "dot", "(", "scores", ")", "\n", "outliers_sum", "=", "permut", "[", "0", "]", ".", "dot", "(", "outliers_sum", "[", ":", ",", ":", "n", "]", ")", "\n", "# call the bvn algorithm on this matrix", "\n", "rest_decomposition", "=", "birkhoff_von_neumann_decomposition", "(", "\n", "outliers_sum", ",", "\n", "quality_measure", "=", "quality_measure", ",", "\n", "scores", "=", "scores_perm", ",", "\n", "re_search_outliers", "=", "re_search_outliers", "-", "1", ",", "\n", "top_k", "=", "top_k", ",", "\n", ")", "\n", "# Permute all matrices in the decomposition back", "\n", "rest_decomposition", "=", "[", "\n", "(", "c", ",", "permut", "[", "0", "]", ".", "T", ".", "dot", "(", "mat", ")", ")", "for", "c", ",", "mat", "in", "list", "(", "rest_decomposition", ")", "\n", "]", "\n", "decomp", "=", "list", "(", "zip", "(", "coefficients", ",", "permutations", ")", ")", "+", "rest_decomposition", "\n", "# We are only interested in the first n columns of the permutation matrices", "\n", "decomp", "=", "[", "(", "c", ",", "mat", "[", ":", ",", ":", "n", "]", ")", "for", "c", ",", "mat", "in", "list", "(", "decomp", ")", "]", "\n", "return", "decomp", "\n", "", "decomp", "=", "list", "(", "zip", "(", "coefficients", ",", "permutations", ")", ")", "+", "list", "(", "\n", "zip", "(", "outlier_coefficients", ",", "outlier_permutations", ")", "\n", ")", "\n", "decomp", "=", "[", "(", "c", ",", "mat", "[", ":", ",", ":", "n", "]", ")", "for", "c", ",", "mat", "in", "list", "(", "decomp", ")", "]", "\n", "return", "decomp", "\n", "", ""]], "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.candidate_creator.ranking_candidates_loader.RankingCandidates.__init__": [[16, 21], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "query_number", ",", "candidates", ",", "protected", ",", "non_protected", ")", ":", "\n", "        ", "self", ".", "candidates", "=", "candidates", "\n", "self", ".", "query_number", "=", "query_number", "\n", "self", ".", "protected", "=", "protected", "\n", "self", ".", "non_protected", "=", "non_protected", "\n", "\n"]], "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.candidate_creator.ranking_candidates_loader.RankingCandidatesLoader.__init__": [[24, 28], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "filename", ")", ":", "\n", "        ", "self", ".", "filename", "=", "filename", "\n", "self", ".", "queries", "=", "[", "]", "\n", "self", ".", "rankings", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.candidate_creator.ranking_candidates_loader.RankingCandidatesLoader.load_learning_candidates": [[29, 116], ["queryNumbers.drop_duplicates.drop_duplicates.drop_duplicates", "list", "pandas.read_csv", "dataQuery.itertuples", "protected.sort", "nonProtected.sort", "queryRanking.sort", "ranking_candidates_loader.RankingCandidates", "ranking_candidates_loader.RankingCandidatesLoader.rankings.keys", "FileNotFoundError", "numpy.asarray", "len", "nonProtected.append", "protected.append", "felix.src.candidate_creator.candidate.Candidate", "felix.src.candidate_creator.candidate.Candidate", "float", "float", "float", "float", "float", "float"], "methods", ["None"], ["", "def", "load_learning_candidates", "(", "self", ",", "min_item_num", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n\n        @param filename: Path of input file. Assuming preprocessed CSV file:\n\n            sensitive_attribute | session | label as index value | feature_1 | ... | feature_n\n\n            sensitive_attribute: is either 0 for non-protected or 1 for protected\n            session: indicates the query identifier of the file\n            score: we assume that score is given indirectly as enumeration, therefore we normalize\n            the score with 1 - score/len(query)\n\n        return    a list with candidate objects from the inputed document, might contain multiple queries\n\n        \"\"\"", "\n", "\n", "self", ".", "rankings", "=", "{", "}", "\n", "rankings_as_list", "=", "[", "]", "\n", "\n", "try", ":", "\n", "            ", "data", "=", "pd", ".", "read_csv", "(", "self", ".", "filename", ")", "\n", "", "except", "FileNotFoundError", ":", "\n", "            ", "raise", "FileNotFoundError", "(", "\n", "\"File could not be found. Something must have gone wrong during preprocessing.\"", "\n", ")", "\n", "\n", "", "queryNumbers", "=", "data", "[", "\"session\"", "]", "\n", "\n", "queryNumbers", "=", "queryNumbers", ".", "drop_duplicates", "(", ")", "\n", "self", ".", "queries", "=", "queryNumbers", "\n", "\n", "for", "query", "in", "queryNumbers", ":", "\n", "            ", "dataQuery", "=", "data", ".", "loc", "[", "data", ".", "session", "==", "query", "]", "\n", "if", "min_item_num", "is", "not", "None", "and", "len", "(", "dataQuery", ")", "<", "min_item_num", ":", "\n", "                ", "continue", "\n", "", "nonProtected", "=", "[", "]", "\n", "protected", "=", "[", "]", "\n", "for", "row", "in", "dataQuery", ".", "itertuples", "(", ")", ":", "\n", "                ", "features", "=", "np", ".", "asarray", "(", "row", "[", "4", ":", "]", ")", "\n", "# access second row of .csv with protected attribute 'H' = nonprotected group and 'L' = protected group", "\n", "if", "row", "[", "1", "]", "==", "\"H\"", ":", "\n", "                    ", "nonProtected", ".", "append", "(", "\n", "Candidate", "(", "\n", "qualification", "=", "float", "(", "row", "[", "3", "]", ")", ",", "\n", "originalQualification", "=", "float", "(", "\n", "row", "[", "3", "]", "\n", ")", ",", "# TODO why do we set the qualification and the original qualification here?", "\n", "protectedAttributes", "=", "[", "]", ",", "\n", "query", "=", "row", "[", "2", "]", ",", "\n", "features", "=", "features", ",", "\n", "outlier_feature", "=", "float", "(", "features", "[", "-", "1", "]", ")", ",", "\n", ")", "\n", ")", "\n", "", "else", ":", "\n", "                    ", "protected", ".", "append", "(", "\n", "Candidate", "(", "\n", "qualification", "=", "float", "(", "row", "[", "3", "]", ")", ",", "\n", "originalQualification", "=", "float", "(", "row", "[", "3", "]", ")", ",", "\n", "protectedAttributes", "=", "\"protectedGroup\"", ",", "\n", "query", "=", "row", "[", "2", "]", ",", "\n", "features", "=", "features", ",", "\n", "outlier_feature", "=", "float", "(", "features", "[", "-", "1", "]", ")", ",", "\n", ")", "\n", ")", "\n", "\n", "", "", "queryRanking", "=", "nonProtected", "+", "protected", "\n", "\n", "# sort candidates by credit scores", "\n", "protected", ".", "sort", "(", "key", "=", "lambda", "candidate", ":", "candidate", ".", "qualification", ",", "reverse", "=", "True", ")", "\n", "nonProtected", ".", "sort", "(", "\n", "key", "=", "lambda", "candidate", ":", "candidate", ".", "qualification", ",", "reverse", "=", "True", "\n", ")", "\n", "\n", "# creating a color-blind ranking which is only based on scores", "\n", "queryRanking", ".", "sort", "(", "\n", "key", "=", "lambda", "candidate", ":", "candidate", ".", "qualification", ",", "reverse", "=", "True", "\n", ")", "\n", "ranking_candidates", "=", "RankingCandidates", "(", "\n", "query_number", "=", "queryNumbers", ",", "\n", "candidates", "=", "queryRanking", ",", "\n", "protected", "=", "protected", ",", "\n", "non_protected", "=", "nonProtected", ",", "\n", ")", "\n", "self", ".", "rankings", "[", "query", "]", "=", "ranking_candidates", "\n", "rankings_as_list", "+=", "queryRanking", "\n", "", "self", ".", "queries", "=", "list", "(", "self", ".", "rankings", ".", "keys", "(", ")", ")", "\n", "return", "rankings_as_list", ",", "self", ".", "rankings", ",", "self", ".", "queries", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.candidate_creator.candidate.Candidate.__init__": [[15, 50], ["uuid.uuid4"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "\n", "qualification", ",", "\n", "originalQualification", ",", "\n", "protectedAttributes", ",", "\n", "query", ",", "\n", "features", ",", "\n", "outlier_feature", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        qualification : float\n            describes the relevance of an item to the query,\n        protectedAttributes: list of strings\n            represent the protected attributes,\n        index: int\n            index of a candidate in a ranking,\n        query: int\n            query number,\n        features: numpy array\n            with feature vector for a candidate inside,\n        outlier_feature: float\n            number that will be used in the outlier detection,\n        \"\"\"", "\n", "self", ".", "qualification", "=", "qualification", "\n", "self", ".", "protectedAttributes", "=", "protectedAttributes", "\n", "# keeps the candidate's initial qualification for evaluation purposes", "\n", "self", ".", "originalQualification", "=", "originalQualification", "\n", "self", ".", "learnedScores", "=", "originalQualification", "\n", "self", ".", "uuid", "=", "uuid", ".", "uuid4", "(", ")", "\n", "# query number for more than one data set", "\n", "self", ".", "query", "=", "query", "\n", "# numpy array with features inside", "\n", "self", ".", "features", "=", "features", "\n", "\n", "self", ".", "outlier_feature", "=", "outlier_feature", "\n", "\n"]], "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.candidate_creator.candidate.Candidate.isProtected": [[51, 58], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "isProtected", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        true if the list of ProtectedAttribute elements actually contains anything\n        false otherwise\n        \"\"\"", "\n", "return", "not", "self", ".", "protectedAttributes", "==", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.candidate_creator.candidate.get_test_candidate": [[60, 70], ["candidate.Candidate"], "function", ["None"], ["", "", "def", "get_test_candidate", "(", "relevance", "=", "0.0", ",", "outlier_feature", "=", "0", ")", ":", "\n", "    ", "candidate", "=", "Candidate", "(", "\n", "qualification", "=", "relevance", ",", "\n", "originalQualification", "=", "relevance", ",", "\n", "protectedAttributes", "=", "None", ",", "\n", "query", "=", "None", ",", "\n", "features", "=", "None", ",", "\n", "outlier_feature", "=", "outlier_feature", ",", "\n", ")", "\n", "return", "candidate", "\n", "", ""]], "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.experiments.analysis_experiments.sample_normal_distribution": [[30, 32], ["numpy.random.normal"], "function", ["None"], ["def", "sample_normal_distribution", "(", "sample_size", "=", "10", ",", "std", "=", "1", ",", "mean", "=", "0", ")", ":", "\n", "    ", "return", "np", ".", "random", ".", "normal", "(", "loc", "=", "mean", ",", "scale", "=", "std", ",", "size", "=", "sample_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.experiments.analysis_experiments.sample_powerlaw_distribution": [[34, 37], ["numpy.array", "numpy.random.random"], "function", ["None"], ["", "def", "sample_powerlaw_distribution", "(", "sample_size", "=", "10", ",", "alpha", "=", "1", ")", ":", "\n", "    ", "exp", "=", "-", "1", "/", "alpha", "\n", "return", "np", ".", "array", "(", "[", "u", "**", "exp", "for", "u", "in", "np", ".", "random", ".", "random", "(", "sample_size", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.experiments.analysis_experiments.sample_log_normal_distribution": [[39, 43], ["numpy.random.normal", "numpy.exp"], "function", ["None"], ["", "def", "sample_log_normal_distribution", "(", "sample_size", "=", "10", ",", "std", "=", "1", ",", "mean", "=", "0", ")", ":", "\n", "    ", "normal_scores", "=", "np", ".", "random", ".", "normal", "(", "loc", "=", "mean", ",", "scale", "=", "std", ",", "size", "=", "sample_size", ")", "\n", "log_normal_scores", "=", "np", ".", "exp", "(", "normal_scores", ")", "\n", "return", "log_normal_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.experiments.analysis_experiments.sample_uniform_distribution": [[45, 47], ["numpy.random.uniform"], "function", ["None"], ["", "def", "sample_uniform_distribution", "(", "sample_size", "=", "10", ")", ":", "\n", "    ", "return", "np", ".", "random", ".", "uniform", "(", "low", "=", "0", ",", "high", "=", "1", ",", "size", "=", "sample_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.experiments.analysis_experiments.get_mocked_candidates": [[49, 59], ["relevance_distribution", "outlier_score_distribution", "felix.src.candidate_creator.candidate.get_test_candidate", "range", "len"], "function", ["home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.candidate_creator.candidate.get_test_candidate"], ["", "def", "get_mocked_candidates", "(", "\n", "num_candidates", ",", "relevance_distribution", ",", "outlier_score_distribution", "\n", ")", ":", "\n", "    ", "relevance_scores", "=", "relevance_distribution", "(", "sample_size", "=", "num_candidates", ")", "\n", "outlier_scores", "=", "outlier_score_distribution", "(", "sample_size", "=", "num_candidates", ")", "\n", "candidates", "=", "[", "\n", "get_test_candidate", "(", "relevance_scores", "[", "i", "]", ",", "outlier_scores", "[", "i", "]", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "relevance_scores", ")", ")", "\n", "]", "\n", "return", "candidates", "\n", "\n"]], "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.experiments.analysis_experiments.get_mocked_candidates_per_query_per_fold": [[61, 77], ["range", "analysis_experiments.get_mocked_candidates", "felix.src.candidate_creator.ranking_candidates_loader.RankingCandidates"], "function", ["home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.experiments.analysis_experiments.get_mocked_candidates"], ["", "def", "get_mocked_candidates_per_query_per_fold", "(", "\n", "num_queries", ",", "num_candidates", ",", "relevance_distribution", ",", "outlier_score_distribution", "\n", ")", ":", "\n", "    ", "cand", "=", "{", "}", "\n", "for", "query", "in", "range", "(", "num_queries", ")", ":", "\n", "        ", "query_candidates", "=", "get_mocked_candidates", "(", "\n", "num_candidates", ",", "relevance_distribution", ",", "outlier_score_distribution", "\n", ")", "\n", "query_candidates", "=", "RankingCandidates", "(", "\n", "query_number", "=", "query", ",", "\n", "candidates", "=", "query_candidates", ",", "\n", "protected", "=", "None", ",", "\n", "non_protected", "=", "None", ",", "\n", ")", "\n", "cand", "[", "query", "]", "=", "query_candidates", "\n", "", "return", "{", "\"fold1\"", ":", "cand", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.experiments.analysis_experiments.candidate_set_size_experiment": [[79, 138], ["felix.experimental_setup.table_final_results", "analysis_experiments.get_mocked_candidates_per_query_per_fold", "felix.experimental_setup.run_experiment", "felix.experimental_setup.run_experiment", "str", "str"], "function", ["home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.felix.experimental_setup.table_final_results", "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.experiments.analysis_experiments.get_mocked_candidates_per_query_per_fold", "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.felix.experimental_setup.run_experiment", "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.felix.experimental_setup.run_experiment"], ["", "def", "candidate_set_size_experiment", "(", "\n", "num_queries", ",", "\n", "num_candidates_list", ",", "\n", "file_name", "=", "\"candidate_set_size\"", ",", "\n", ")", ":", "\n", "    ", "experiment_results", "=", "{", "}", "\n", "\n", "top_k", "=", "10", "\n", "distributions", "=", "{", "\n", "\"powerlaw\"", ":", "sample_powerlaw_distribution", ",", "\n", "\"log_normal\"", ":", "sample_log_normal_distribution", ",", "\n", "\"gaussian\"", ":", "sample_normal_distribution", ",", "\n", "\"uniform\"", ":", "sample_uniform_distribution", ",", "\n", "}", "\n", "for", "distribution", "in", "distributions", ":", "\n", "        ", "for", "num_candidates", "in", "num_candidates_list", ":", "\n", "            ", "candidates", "=", "get_mocked_candidates_per_query_per_fold", "(", "\n", "num_queries", "=", "num_queries", ",", "\n", "num_candidates", "=", "num_candidates", ",", "\n", "relevance_distribution", "=", "sample_uniform_distribution", ",", "\n", "outlier_score_distribution", "=", "distributions", "[", "distribution", "]", ",", "\n", ")", "\n", "(", "\n", "experiment_results", "[", "\n", "\"Vanilla_\"", "+", "distribution", "+", "\"_\"", "+", "str", "(", "num_candidates", ")", "\n", "]", ",", "\n", "_", ",", "\n", "mrp_matrices", ",", "\n", ")", "=", "run_experiment", "(", "\n", "fairness_constraint", "=", "\"individual_fairness\"", ",", "\n", "decomposition_method", "=", "\"vanilla_BvN\"", ",", "\n", "predicted_test_candidates_per_fold", "=", "candidates", ",", "\n", "top_k", "=", "top_k", ",", "\n", "max_num_items", "=", "None", ",", "\n", "upsample", "=", "False", ",", "\n", "normalize_scores", "=", "False", ",", "\n", ")", "\n", "\n", "(", "\n", "experiment_results", "[", "\n", "\"Resample_\"", "+", "distribution", "+", "\"_\"", "+", "str", "(", "num_candidates", ")", "\n", "]", ",", "\n", "_", ",", "\n", "mrp_matrices", ",", "\n", ")", "=", "run_experiment", "(", "\n", "fairness_constraint", "=", "\"individual_fairness\"", ",", "\n", "decomposition_method", "=", "\"outlier_resample\"", ",", "\n", "number_of_resamples", "=", "20", ",", "\n", "predicted_test_candidates_per_fold", "=", "candidates", ",", "\n", "top_k", "=", "top_k", ",", "\n", "max_num_items", "=", "None", ",", "\n", "upsample", "=", "False", ",", "\n", "mrp_matrices", "=", "mrp_matrices", ",", "\n", "normalize_scores", "=", "False", ",", "\n", ")", "\n", "", "table_final_results", "(", "\n", "experiment_results", ",", "\n", "file_name", "=", "file_name", "+", "\".csv\"", ",", "\n", "raw_data_file_name", "=", "file_name", "+", "\".pkl\"", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.experiments.analysis_experiments.number_of_resample_experiment": [[141, 196], ["felix.experimental_setup.table_final_results", "analysis_experiments.get_mocked_candidates_per_query_per_fold", "felix.experimental_setup.run_experiment", "felix.experimental_setup.run_experiment", "str", "str"], "function", ["home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.felix.experimental_setup.table_final_results", "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.experiments.analysis_experiments.get_mocked_candidates_per_query_per_fold", "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.felix.experimental_setup.run_experiment", "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.felix.experimental_setup.run_experiment"], ["", "", "def", "number_of_resample_experiment", "(", "\n", "num_queries", ",", "resample_num_list", ",", "file_name", "=", "\"number_of_resamples_experiment\"", "\n", ")", ":", "\n", "    ", "num_candidates", "=", "100", "\n", "experiment_results", "=", "{", "}", "\n", "\n", "top_k", "=", "10", "\n", "distributions", "=", "{", "\n", "\"powerlaw\"", ":", "sample_powerlaw_distribution", ",", "\n", "\"log_normal\"", ":", "sample_log_normal_distribution", ",", "\n", "\"gaussian\"", ":", "sample_normal_distribution", ",", "\n", "\"uniform\"", ":", "sample_uniform_distribution", ",", "\n", "}", "\n", "for", "distribution", "in", "distributions", ":", "\n", "        ", "candidates", "=", "get_mocked_candidates_per_query_per_fold", "(", "\n", "num_queries", "=", "num_queries", ",", "\n", "num_candidates", "=", "num_candidates", ",", "\n", "relevance_distribution", "=", "sample_uniform_distribution", ",", "\n", "outlier_score_distribution", "=", "distributions", "[", "distribution", "]", ",", "\n", ")", "\n", "(", "\n", "experiment_results", "[", "\"Vanilla_\"", "+", "distribution", "+", "\"_\"", "+", "str", "(", "num_candidates", ")", "]", ",", "\n", "_", ",", "\n", "mrp_matrices", ",", "\n", ")", "=", "run_experiment", "(", "\n", "fairness_constraint", "=", "\"individual_fairness\"", ",", "\n", "decomposition_method", "=", "\"vanilla_BvN\"", ",", "\n", "predicted_test_candidates_per_fold", "=", "candidates", ",", "\n", "top_k", "=", "top_k", ",", "\n", "max_num_items", "=", "None", ",", "\n", "upsample", "=", "False", ",", "\n", "normalize_scores", "=", "False", ",", "\n", ")", "\n", "for", "resample", "in", "resample_num_list", ":", "\n", "            ", "(", "\n", "experiment_results", "[", "\"Resample_\"", "+", "distribution", "+", "\"_\"", "+", "str", "(", "resample", ")", "]", ",", "\n", "_", ",", "\n", "_", ",", "\n", ")", "=", "run_experiment", "(", "\n", "fairness_constraint", "=", "\"individual_fairness\"", ",", "\n", "decomposition_method", "=", "\"outlier_resample\"", ",", "\n", "predicted_test_candidates_per_fold", "=", "candidates", ",", "\n", "top_k", "=", "top_k", ",", "\n", "max_num_items", "=", "None", ",", "\n", "upsample", "=", "False", ",", "\n", "outlier_top_k", "=", "top_k", ",", "\n", "number_of_resamples", "=", "resample", ",", "\n", "mrp_matrices", "=", "mrp_matrices", ",", "\n", "normalize_scores", "=", "False", ",", "\n", ")", "\n", "\n", "", "", "table_final_results", "(", "\n", "experiment_results", ",", "\n", "file_name", "=", "file_name", "+", "\".csv\"", ",", "\n", "raw_data_file_name", "=", "file_name", "+", "\".pkl\"", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.experiments.analysis_experiments.plot_candidate_set_experiment_results": [[199, 263], ["pathlib.Path().mkdir", "pandas.read_csv", "results.drop.rename", "results.drop.drop", "matplotlib.gcf", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.title", "matplotlib.legend", "matplotlib.show", "plt.gcf.savefig", "matplotlib.gcf", "pandas.DataFrame", "pd.DataFrame.to_csv", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.title", "matplotlib.legend", "matplotlib.show", "matplotlib.draw", "plt.gcf.savefig", "os.path.join", "zip", "vanilla[].tolist", "resample[].tolist", "matplotlib.plot", "pathlib.Path", "subresults[].tolist", "matplotlib.plot", "float", "float", "results.drop.index.str.contains", "subexperiment.index.str.contains", "subexperiment.index.str.contains", "float", "results.drop.index.str.contains", "subexperiment.index.str.contains", "subexperiment.index.str.contains", "range", "o.split", "o.split", "len", "o.split"], "function", ["None"], ["", "def", "plot_candidate_set_experiment_results", "(", "path_to_csv", ",", "candidate_list", ")", ":", "\n", "    ", "Path", "(", "figure_path", ")", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "# Read the csv with the results and format the dataframe", "\n", "results", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "result_path", ",", "path_to_csv", ")", ")", "\n", "results", "=", "results", ".", "T", "\n", "results", "=", "results", ".", "rename", "(", "columns", "=", "results", ".", "iloc", "[", "0", "]", ")", "\n", "results", "=", "results", ".", "drop", "(", "index", "=", "\"Unnamed: 0\"", ")", "\n", "# Plot outlier_probability against number of candidates", "\n", "fig1", "=", "plt", ".", "gcf", "(", ")", "\n", "for", "distribution", "in", "[", "\"powerlaw\"", ",", "\"log_normal\"", ",", "\"gaussian\"", ",", "\"uniform\"", "]", ":", "\n", "        ", "subexperiment", "=", "results", "[", "results", ".", "index", ".", "str", ".", "contains", "(", "distribution", ")", "]", "\n", "vanilla", "=", "subexperiment", "[", "subexperiment", ".", "index", ".", "str", ".", "contains", "(", "\"Vanilla\"", ")", "]", "\n", "resample", "=", "subexperiment", "[", "subexperiment", ".", "index", ".", "str", ".", "contains", "(", "\"Resample\"", ")", "]", "\n", "for", "name", ",", "subresults", "in", "zip", "(", "[", "\"vanilla\"", ",", "\"resample\"", "]", ",", "[", "vanilla", ",", "resample", "]", ")", ":", "\n", "            ", "outlier_probability", "=", "subresults", "[", "\"outlier_probability\"", "]", ".", "tolist", "(", ")", "\n", "outlier_probability", "=", "[", "float", "(", "o", ".", "split", "(", "\"+\"", ")", "[", "0", "]", ")", "for", "o", "in", "outlier_probability", "]", "\n", "plt", ".", "plot", "(", "\n", "candidate_list", ",", "outlier_probability", ",", "label", "=", "distribution", "+", "\"_\"", "+", "name", "\n", ")", "\n", "\n", "", "", "plt", ".", "xlabel", "(", "\"Number of Candidates\"", ")", "\n", "plt", ".", "ylabel", "(", "\"Outlier probability\"", ")", "\n", "plt", ".", "title", "(", "\"Impact of the number of available candidates on FELIX\"", ")", "\n", "plt", ".", "legend", "(", ")", "\n", "plt", ".", "show", "(", ")", "\n", "fig1", ".", "savefig", "(", "figure_path", "+", "\"available_candidates.png\"", ",", "format", "=", "\"png\"", ")", "\n", "\n", "improvement_df", "=", "{", "\"num_candidates\"", ":", "candidate_list", "}", "\n", "\n", "# Plot the improvement over no resamples against number of available candidates", "\n", "fig2", "=", "plt", ".", "gcf", "(", ")", "\n", "for", "distribution", "in", "[", "\"powerlaw\"", ",", "\"log_normal\"", ",", "\"gaussian\"", ",", "\"uniform\"", "]", ":", "\n", "        ", "subexperiment", "=", "results", "[", "results", ".", "index", ".", "str", ".", "contains", "(", "distribution", ")", "]", "\n", "vanilla", "=", "subexperiment", "[", "subexperiment", ".", "index", ".", "str", ".", "contains", "(", "\"Vanilla\"", ")", "]", "\n", "resample", "=", "subexperiment", "[", "subexperiment", ".", "index", ".", "str", ".", "contains", "(", "\"Resample\"", ")", "]", "\n", "vanilla_outlier_probability", "=", "vanilla", "[", "\"outlier_probability\"", "]", ".", "tolist", "(", ")", "\n", "vanilla_outlier_probability", "=", "[", "\n", "float", "(", "o", ".", "split", "(", "\"+\"", ")", "[", "0", "]", ")", "for", "o", "in", "vanilla_outlier_probability", "\n", "]", "\n", "resample_outlier_probability", "=", "resample", "[", "\"outlier_probability\"", "]", ".", "tolist", "(", ")", "\n", "resample_outlier_probability", "=", "[", "\n", "float", "(", "o", ".", "split", "(", "\"+\"", ")", "[", "0", "]", ")", "for", "o", "in", "resample_outlier_probability", "\n", "]", "\n", "improvement", "=", "[", "\n", "(", "resample_outlier_probability", "[", "i", "]", "-", "vanilla_outlier_probability", "[", "i", "]", ")", "\n", "/", "vanilla_outlier_probability", "[", "i", "]", "\n", "*", "100", "\n", "if", "vanilla_outlier_probability", "[", "i", "]", "!=", "0", "\n", "else", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "vanilla_outlier_probability", ")", ")", "\n", "]", "\n", "plt", ".", "plot", "(", "candidate_list", ",", "improvement", ",", "label", "=", "distribution", ")", "\n", "improvement_df", "[", "distribution", "]", "=", "improvement", "\n", "\n", "", "improvement_df", "=", "pd", ".", "DataFrame", "(", "improvement_df", ")", "\n", "improvement_df", ".", "to_csv", "(", "figure_path", "+", "\"candidates.csv\"", ")", "\n", "\n", "plt", ".", "xlabel", "(", "\"Number of Candidates\"", ")", "\n", "plt", ".", "ylabel", "(", "\"Relative improvement in Outlier Probability\"", ")", "\n", "plt", ".", "title", "(", "\"Impact of the number of available candidates on FELIX\"", ")", "\n", "plt", ".", "legend", "(", ")", "\n", "plt", ".", "show", "(", ")", "\n", "plt", ".", "draw", "(", ")", "\n", "fig2", ".", "savefig", "(", "figure_path", "+", "\"available_candidates_relative.png\"", ",", "format", "=", "\"png\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.experiments.analysis_experiments.plot_number_of_resamples_experiment_results": [[265, 324], ["pathlib.Path().mkdir", "pandas.read_csv", "results.drop.rename", "results.drop.drop", "matplotlib.gcf", "matplotlib.plot", "matplotlib.xscale", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.title", "matplotlib.legend", "matplotlib.show", "plt.gcf.savefig", "matplotlib.gcf", "pandas.DataFrame", "pd.DataFrame.to_csv", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.title", "matplotlib.legend", "matplotlib.show", "plt.gcf.savefig", "os.path.join", "resample[].tolist", "vanilla[].tolist", "resample[].tolist", "matplotlib.plot", "pathlib.Path", "float", "float", "float", "results.drop.index.str.contains", "subexperiment.index.str.contains", "results.drop.index.str.contains", "subexperiment.index.str.contains", "subexperiment.index.str.contains", "range", "o.split", "o.split", "o.split", "len"], "function", ["None"], ["", "def", "plot_number_of_resamples_experiment_results", "(", "path_to_csv", ",", "number_of_resamples", ")", ":", "\n", "    ", "Path", "(", "figure_path", ")", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "number_of_resamples", "=", "[", "r", "+", "1", "for", "r", "in", "number_of_resamples", "]", "\n", "# Read the csv with the results and format the dataframe", "\n", "results", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "result_path", ",", "path_to_csv", ")", ")", "\n", "results", "=", "results", ".", "T", "\n", "results", "=", "results", ".", "rename", "(", "columns", "=", "results", ".", "iloc", "[", "0", "]", ")", "\n", "results", "=", "results", ".", "drop", "(", "index", "=", "\"Unnamed: 0\"", ")", "\n", "\n", "fig1", "=", "plt", ".", "gcf", "(", ")", "\n", "# Plot outlier_probability against number of resamples", "\n", "for", "distribution", "in", "[", "\"powerlaw\"", ",", "\"log_normal\"", ",", "\"gaussian\"", ",", "\"uniform\"", "]", ":", "\n", "        ", "subexperiment", "=", "results", "[", "results", ".", "index", ".", "str", ".", "contains", "(", "distribution", ")", "]", "\n", "resample", "=", "subexperiment", "[", "subexperiment", ".", "index", ".", "str", ".", "contains", "(", "\"Resample\"", ")", "]", "\n", "\n", "outlier_probability", "=", "resample", "[", "\"outlier_probability\"", "]", ".", "tolist", "(", ")", "\n", "outlier_probability", "=", "[", "float", "(", "o", ".", "split", "(", "\"+\"", ")", "[", "0", "]", ")", "for", "o", "in", "outlier_probability", "]", "\n", "", "plt", ".", "plot", "(", "number_of_resamples", ",", "outlier_probability", ",", "label", "=", "distribution", ")", "\n", "plt", ".", "xscale", "(", "\"log\"", ")", "\n", "plt", ".", "xlabel", "(", "\"Number of resampling iterations\"", ")", "\n", "plt", ".", "ylabel", "(", "\"Outlier probability\"", ")", "\n", "plt", ".", "title", "(", "\"Impact of the choice of the resampling parameter on FELIX\"", ")", "\n", "plt", ".", "legend", "(", ")", "\n", "plt", ".", "show", "(", ")", "\n", "fig1", ".", "savefig", "(", "figure_path", "+", "\"resampling_parameter.png\"", ",", "format", "=", "\"png\"", ")", "\n", "\n", "improvement_df", "=", "{", "\"number_of_resamples\"", ":", "number_of_resamples", "}", "\n", "fig2", "=", "plt", ".", "gcf", "(", ")", "\n", "# Plot the improvement over no resamples against number of resamples", "\n", "for", "distribution", "in", "[", "\"powerlaw\"", ",", "\"log_normal\"", ",", "\"gaussian\"", ",", "\"uniform\"", "]", ":", "\n", "        ", "subexperiment", "=", "results", "[", "results", ".", "index", ".", "str", ".", "contains", "(", "distribution", ")", "]", "\n", "vanilla", "=", "subexperiment", "[", "subexperiment", ".", "index", ".", "str", ".", "contains", "(", "\"Vanilla\"", ")", "]", "\n", "resample", "=", "subexperiment", "[", "subexperiment", ".", "index", ".", "str", ".", "contains", "(", "\"Resample\"", ")", "]", "\n", "vanilla_outlier_probability", "=", "vanilla", "[", "\"outlier_probability\"", "]", ".", "tolist", "(", ")", "\n", "vanilla_outlier_probability", "=", "[", "\n", "float", "(", "o", ".", "split", "(", "\"+\"", ")", "[", "0", "]", ")", "for", "o", "in", "vanilla_outlier_probability", "\n", "]", "\n", "resample_outlier_probability", "=", "resample", "[", "\"outlier_probability\"", "]", ".", "tolist", "(", ")", "\n", "resample_outlier_probability", "=", "[", "\n", "float", "(", "o", ".", "split", "(", "\"+\"", ")", "[", "0", "]", ")", "for", "o", "in", "resample_outlier_probability", "\n", "]", "\n", "improvement", "=", "[", "\n", "(", "resample_outlier_probability", "[", "i", "]", "-", "vanilla_outlier_probability", "[", "0", "]", ")", "\n", "/", "vanilla_outlier_probability", "[", "0", "]", "\n", "*", "100", "\n", "if", "vanilla_outlier_probability", "[", "0", "]", "!=", "0", "\n", "else", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "resample_outlier_probability", ")", ")", "\n", "]", "\n", "improvement_df", "[", "distribution", "]", "=", "improvement", "\n", "plt", ".", "plot", "(", "number_of_resamples", ",", "improvement", ",", "label", "=", "distribution", ")", "\n", "", "improvement_df", "=", "pd", ".", "DataFrame", "(", "improvement_df", ")", "\n", "improvement_df", ".", "to_csv", "(", "figure_path", "+", "\"resample_experiment.csv\"", ")", "\n", "plt", ".", "xlabel", "(", "\"Number of resampling iterations\"", ")", "\n", "plt", ".", "ylabel", "(", "\"Relative improvement in Outlier Probability\"", ")", "\n", "plt", ".", "title", "(", "\"Impact of the choice of the resampling parameter on FELIX\"", ")", "\n", "plt", ".", "legend", "(", ")", "\n", "plt", ".", "show", "(", ")", "\n", "fig2", ".", "savefig", "(", "figure_path", "+", "\"resampling_parameter_relative.png\"", ",", "format", "=", "\"png\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.experiments.analysis_experiments.run_analysis_experiments": [[326, 341], ["analysis_experiments.number_of_resample_experiment", "analysis_experiments.plot_number_of_resamples_experiment_results", "analysis_experiments.candidate_set_size_experiment", "analysis_experiments.plot_candidate_set_experiment_results"], "function", ["home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.experiments.analysis_experiments.number_of_resample_experiment", "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.experiments.analysis_experiments.plot_number_of_resamples_experiment_results", "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.experiments.analysis_experiments.candidate_set_size_experiment", "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.experiments.analysis_experiments.plot_candidate_set_experiment_results"], ["", "def", "run_analysis_experiments", "(", ")", ":", "\n", "    ", "number_of_resamples", "=", "[", "0", ",", "1", ",", "2", ",", "4", ",", "8", ",", "16", ",", "32", "]", "\n", "number_of_resample_experiment", "(", "\n", "100", ",", "number_of_resamples", ",", "file_name", "=", "\"number_of_resamples\"", "\n", ")", "\n", "plot_number_of_resamples_experiment_results", "(", "\n", "\"number_of_resamples.csv\"", ",", "number_of_resamples", "\n", ")", "\n", "\n", "num_candidates_list", "=", "[", "10", ",", "15", ",", "20", ",", "40", ",", "60", ",", "80", ",", "100", ",", "140", ",", "200", "]", "\n", "candidate_set_size_experiment", "(", "\n", "100", ",", "num_candidates_list", ",", "file_name", "=", "\"candidate_set_size\"", "\n", ")", "\n", "plot_candidate_set_experiment_results", "(", "\n", "\"candidate_set_size.csv\"", ",", "num_candidates_list", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.experiments.trec20_topk_experiment.trec20_top_k": [[4, 55], ["felix.experimental_setup.run_experiment", "felix.experimental_setup.run_experiment", "print", "felix.experimental_setup.run_experiment", "print", "felix.experimental_setup.run_experiment", "felix.experimental_setup.run_experiment", "felix.experimental_setup.run_experiment", "felix.experimental_setup.table_final_results"], "function", ["home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.felix.experimental_setup.run_experiment", "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.felix.experimental_setup.run_experiment", "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.felix.experimental_setup.run_experiment", "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.felix.experimental_setup.run_experiment", "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.felix.experimental_setup.run_experiment", "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.felix.experimental_setup.run_experiment", "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.felix.experimental_setup.table_final_results"], ["def", "trec20_top_k", "(", ")", ":", "\n", "    ", "experiment_results", "=", "{", "}", "\n", "(", "experiment_results", "[", "\"PL ranker\"", "]", ",", "listnet_predicted_candidates", ",", "_", ")", "=", "run_experiment", "(", "\n", "data_path", "=", "\"/data/TREC2020/features/fold\"", ",", "\n", "label_prediction", "=", "\"ListNet\"", ",", "\n", "plackett_luce", "=", "True", ",", "\n", "top_k", "=", "10", ",", "\n", "min_item_num", "=", "20", ",", "\n", "repeat", "=", "5", ",", "\n", ")", "\n", "(", "experiment_results", "[", "\"PL uniform\"", "]", ",", "_", ",", "_", ")", "=", "run_experiment", "(", "\n", "top_k", "=", "10", ",", "\n", "uniform_stochastic_policy", "=", "True", ",", "\n", "predicted_test_candidates_per_fold", "=", "listnet_predicted_candidates", ",", "\n", ")", "\n", "\n", "print", "(", "\"Deterministic ranker\"", ")", "\n", "(", "experiment_results", "[", "\"Deterministic ranking\"", "]", ",", "_", ",", "_", ")", "=", "run_experiment", "(", "\n", "top_k", "=", "10", ",", "\n", "deterministic_ranker", "=", "True", ",", "\n", "predicted_test_candidates_per_fold", "=", "listnet_predicted_candidates", ",", "\n", ")", "\n", "\n", "# Linear Programming approach", "\n", "print", "(", "\"Felix only top-k\"", ")", "\n", "(", "experiment_results", "[", "\"FELIX top-k\"", "]", ",", "_", ",", "mrp_matrices", ")", "=", "run_experiment", "(", "\n", "decomposition_method", "=", "\"vanilla_BvN\"", ",", "\n", "lp_outlier_objective", "=", "False", ",", "\n", "predicted_test_candidates_per_fold", "=", "listnet_predicted_candidates", ",", "\n", "top_k", "=", "10", ",", "\n", ")", "\n", "# LP outlier resample", "\n", "(", "experiment_results", "[", "\"FELIX outlier resample\"", "]", ",", "_", ",", "_", ")", "=", "run_experiment", "(", "\n", "decomposition_method", "=", "\"outlier_resample\"", ",", "\n", "predicted_test_candidates_per_fold", "=", "listnet_predicted_candidates", ",", "\n", "lp_outlier_objective", "=", "False", ",", "\n", "top_k", "=", "10", ",", "\n", "mrp_matrices", "=", "mrp_matrices", ",", "\n", "number_of_resamples", "=", "20", ",", "\n", ")", "\n", "# omit (with std method)", "\n", "(", "experiment_results", "[", "\"OMIT\"", "]", ",", "_", ",", "mrp_matrices", ")", "=", "run_experiment", "(", "\n", "decomposition_method", "=", "\"vanilla_BvN\"", ",", "\n", "lp_outlier_objective", "=", "True", ",", "\n", "predicted_test_candidates_per_fold", "=", "listnet_predicted_candidates", ",", "\n", "top_k", "=", "10", ",", "\n", ")", "\n", "table_final_results", "(", "\n", "experiment_results", ",", "\n", "file_name", "=", "\"trec20_topk_experiment_results.csv\"", ",", "\n", "raw_data_file_name", "=", "\"trec20_topk_experiment_results.pkl\"", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.experiments.trec19_topk_experiment.trec19_top_k": [[4, 54], ["felix.experimental_setup.run_experiment", "felix.experimental_setup.run_experiment", "felix.experimental_setup.run_experiment", "felix.experimental_setup.run_experiment", "felix.experimental_setup.run_experiment", "felix.experimental_setup.run_experiment", "felix.experimental_setup.table_final_results"], "function", ["home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.felix.experimental_setup.run_experiment", "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.felix.experimental_setup.run_experiment", "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.felix.experimental_setup.run_experiment", "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.felix.experimental_setup.run_experiment", "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.felix.experimental_setup.run_experiment", "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.felix.experimental_setup.run_experiment", "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.felix.experimental_setup.table_final_results"], ["def", "trec19_top_k", "(", ")", ":", "\n", "    ", "experiment_results", "=", "{", "}", "\n", "(", "experiment_results", "[", "\"PL ranker\"", "]", ",", "listnet_predicted_candidates", ",", "_", ")", "=", "run_experiment", "(", "\n", "data_path", "=", "\"/data/TREC2019/features/fold\"", ",", "\n", "label_prediction", "=", "\"ListNet\"", ",", "\n", "plackett_luce", "=", "True", ",", "\n", "top_k", "=", "10", ",", "\n", "min_item_num", "=", "10", ",", "\n", "upsample", "=", "True", ",", "\n", "upsample_number", "=", "50", ",", "\n", "repeat", "=", "5", ",", "\n", ")", "\n", "(", "experiment_results", "[", "\"PL uniform\"", "]", ",", "_", ",", "_", ")", "=", "run_experiment", "(", "\n", "top_k", "=", "10", ",", "\n", "uniform_stochastic_policy", "=", "True", ",", "\n", "predicted_test_candidates_per_fold", "=", "listnet_predicted_candidates", ",", "\n", ")", "\n", "(", "experiment_results", "[", "\"Deterministic ranking\"", "]", ",", "_", ",", "_", ")", "=", "run_experiment", "(", "\n", "top_k", "=", "10", ",", "\n", "deterministic_ranker", "=", "True", ",", "\n", "predicted_test_candidates_per_fold", "=", "listnet_predicted_candidates", ",", "\n", ")", "\n", "\n", "# Linear Programming approach", "\n", "(", "experiment_results", "[", "\"FELIX top-k\"", "]", ",", "_", ",", "mrp_matrices", ")", "=", "run_experiment", "(", "\n", "decomposition_method", "=", "\"vanilla_BvN\"", ",", "\n", "lp_outlier_objective", "=", "False", ",", "\n", "predicted_test_candidates_per_fold", "=", "listnet_predicted_candidates", ",", "\n", "top_k", "=", "10", ",", "\n", ")", "\n", "# LP outlier resample", "\n", "(", "experiment_results", "[", "\"FELIX outlier resample\"", "]", ",", "_", ",", "_", ")", "=", "run_experiment", "(", "\n", "decomposition_method", "=", "\"outlier_resample\"", ",", "\n", "predicted_test_candidates_per_fold", "=", "listnet_predicted_candidates", ",", "\n", "lp_outlier_objective", "=", "False", ",", "\n", "top_k", "=", "10", ",", "\n", "mrp_matrices", "=", "mrp_matrices", ",", "\n", "number_of_resamples", "=", "20", ",", "\n", ")", "\n", "# omit (with std method)", "\n", "(", "experiment_results", "[", "\"OMIT\"", "]", ",", "_", ",", "mrp_matrices", ")", "=", "run_experiment", "(", "\n", "decomposition_method", "=", "\"vanilla_BvN\"", ",", "\n", "lp_outlier_objective", "=", "True", ",", "\n", "predicted_test_candidates_per_fold", "=", "listnet_predicted_candidates", ",", "\n", "top_k", "=", "10", ",", "\n", ")", "\n", "table_final_results", "(", "\n", "experiment_results", ",", "\n", "file_name", "=", "\"trec19_topk_experiment_resultsv\"", ",", "\n", "raw_data_file_name", "=", "\"trec19_topk_experiment_results.pkl\"", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.experiments.trec19_full_ranking_experiment.trec19_full_ranking": [[4, 53], ["felix.experimental_setup.run_experiment", "felix.experimental_setup.run_experiment", "felix.experimental_setup.run_experiment", "felix.experimental_setup.run_experiment", "felix.experimental_setup.run_experiment", "felix.experimental_setup.run_experiment", "felix.experimental_setup.table_final_results"], "function", ["home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.felix.experimental_setup.run_experiment", "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.felix.experimental_setup.run_experiment", "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.felix.experimental_setup.run_experiment", "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.felix.experimental_setup.run_experiment", "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.felix.experimental_setup.run_experiment", "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.felix.experimental_setup.run_experiment", "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.felix.experimental_setup.table_final_results"], ["def", "trec19_full_ranking", "(", ")", ":", "\n", "    ", "experiment_results", "=", "{", "}", "\n", "(", "experiment_results", "[", "\"PL ranker\"", "]", ",", "listnet_predicted_candidates", ",", "_", ")", "=", "run_experiment", "(", "\n", "data_path", "=", "\"/data/TREC2019/features/fold\"", ",", "\n", "label_prediction", "=", "\"ListNet\"", ",", "\n", "plackett_luce", "=", "True", ",", "\n", "min_item_num", "=", "10", ",", "\n", "upsample", "=", "True", ",", "\n", "upsample_number", "=", "50", ",", "\n", "repeat", "=", "5", ",", "\n", ")", "\n", "(", "experiment_results", "[", "\"PL uniform\"", "]", ",", "_", ",", "_", ")", "=", "run_experiment", "(", "\n", "top_k", "=", "10", ",", "\n", "uniform_stochastic_policy", "=", "True", ",", "\n", "predicted_test_candidates_per_fold", "=", "listnet_predicted_candidates", ",", "\n", ")", "\n", "(", "experiment_results", "[", "\"Deterministic ranking\"", "]", ",", "_", ",", "_", ")", "=", "run_experiment", "(", "\n", "top_k", "=", "10", ",", "\n", "deterministic_ranker", "=", "True", ",", "\n", "predicted_test_candidates_per_fold", "=", "listnet_predicted_candidates", ",", "\n", ")", "\n", "\n", "# Linear Programming approach", "\n", "(", "experiment_results", "[", "\"FELIX top-k\"", "]", ",", "_", ",", "mrp_matrices", ")", "=", "run_experiment", "(", "\n", "decomposition_method", "=", "\"vanilla_BvN\"", ",", "\n", "lp_outlier_objective", "=", "False", ",", "\n", "predicted_test_candidates_per_fold", "=", "listnet_predicted_candidates", ",", "\n", "top_k", "=", "10", ",", "\n", ")", "\n", "# LP outlier resample", "\n", "(", "experiment_results", "[", "\"FELIX outlier resample\"", "]", ",", "_", ",", "_", ")", "=", "run_experiment", "(", "\n", "decomposition_method", "=", "\"outlier_resample\"", ",", "\n", "predicted_test_candidates_per_fold", "=", "listnet_predicted_candidates", ",", "\n", "lp_outlier_objective", "=", "False", ",", "\n", "top_k", "=", "10", ",", "\n", "mrp_matrices", "=", "mrp_matrices", ",", "\n", "number_of_resamples", "=", "20", ",", "\n", ")", "\n", "# omit (with std method)", "\n", "(", "experiment_results", "[", "\"OMIT\"", "]", ",", "_", ",", "mrp_matrices", ")", "=", "run_experiment", "(", "\n", "decomposition_method", "=", "\"vanilla_BvN\"", ",", "\n", "lp_outlier_objective", "=", "True", ",", "\n", "predicted_test_candidates_per_fold", "=", "listnet_predicted_candidates", ",", "\n", "top_k", "=", "10", ",", "\n", ")", "\n", "table_final_results", "(", "\n", "experiment_results", ",", "\n", "file_name", "=", "\"trec19_full_ranking_experiment_results.csv\"", ",", "\n", "raw_data_file_name", "=", "\"trec19_full_ranking_experiment_results.pkl\"", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.experiments.trec20_full_ranking_experiment.trec20_full_ranking": [[4, 54], ["felix.experimental_setup.run_experiment", "felix.experimental_setup.run_experiment", "print", "felix.experimental_setup.run_experiment", "print", "felix.experimental_setup.run_experiment", "felix.experimental_setup.run_experiment", "felix.experimental_setup.run_experiment", "felix.experimental_setup.table_final_results"], "function", ["home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.felix.experimental_setup.run_experiment", "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.felix.experimental_setup.run_experiment", "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.felix.experimental_setup.run_experiment", "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.felix.experimental_setup.run_experiment", "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.felix.experimental_setup.run_experiment", "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.felix.experimental_setup.run_experiment", "home.repos.pwc.inspect_result.mariaheuss_2022-sigir-foe-incomplete-exposure.felix.experimental_setup.table_final_results"], ["def", "trec20_full_ranking", "(", ")", ":", "\n", "    ", "experiment_results", "=", "{", "}", "\n", "(", "experiment_results", "[", "\"PL ranker\"", "]", ",", "listnet_predicted_candidates", ",", "_", ")", "=", "run_experiment", "(", "\n", "data_path", "=", "\"/data/TREC2020/features/fold\"", ",", "\n", "label_prediction", "=", "\"ListNet\"", ",", "\n", "plackett_luce", "=", "True", ",", "\n", "min_item_num", "=", "20", ",", "\n", "repeat", "=", "5", ",", "\n", ")", "\n", "(", "experiment_results", "[", "\"PL uniform\"", "]", ",", "_", ",", "_", ")", "=", "run_experiment", "(", "\n", "top_k", "=", "10", ",", "\n", "uniform_stochastic_policy", "=", "True", ",", "\n", "predicted_test_candidates_per_fold", "=", "listnet_predicted_candidates", ",", "\n", ")", "\n", "\n", "print", "(", "\"Deterministic ranker\"", ")", "\n", "(", "experiment_results", "[", "\"Deterministic ranking\"", "]", ",", "_", ",", "_", ")", "=", "run_experiment", "(", "\n", "top_k", "=", "10", ",", "\n", "deterministic_ranker", "=", "True", ",", "\n", "predicted_test_candidates_per_fold", "=", "listnet_predicted_candidates", ",", "\n", ")", "\n", "\n", "# Linear Programming approach", "\n", "print", "(", "\"Felix only top-k\"", ")", "\n", "(", "experiment_results", "[", "\"FELIX top-k\"", "]", ",", "_", ",", "mrp_matrices", ")", "=", "run_experiment", "(", "\n", "decomposition_method", "=", "\"vanilla_BvN\"", ",", "\n", "lp_outlier_objective", "=", "False", ",", "\n", "predicted_test_candidates_per_fold", "=", "listnet_predicted_candidates", ",", "\n", "top_k", "=", "10", ",", "\n", ")", "\n", "# LP outlier resample", "\n", "(", "experiment_results", "[", "\"FELIX outlier resample\"", "]", ",", "_", ",", "_", ")", "=", "run_experiment", "(", "\n", "decomposition_method", "=", "\"outlier_resample\"", ",", "\n", "predicted_test_candidates_per_fold", "=", "listnet_predicted_candidates", ",", "\n", "lp_outlier_objective", "=", "False", ",", "\n", "top_k", "=", "10", ",", "\n", "mrp_matrices", "=", "mrp_matrices", ",", "\n", "number_of_resamples", "=", "20", ",", "\n", ")", "\n", "# omit (with std method)", "\n", "(", "experiment_results", "[", "\"OMIT\"", "]", ",", "_", ",", "mrp_matrices", ")", "=", "run_experiment", "(", "\n", "decomposition_method", "=", "\"vanilla_BvN\"", ",", "\n", "lp_outlier_objective", "=", "True", ",", "\n", "predicted_test_candidates_per_fold", "=", "listnet_predicted_candidates", ",", "\n", "top_k", "=", "10", ",", "\n", ")", "\n", "table_final_results", "(", "\n", "experiment_results", ",", "\n", "file_name", "=", "\"trec20_full_ranking_experiment_results.csv\"", ",", "\n", "raw_data_file_name", "=", "\"trec20_full_ranking_experiment_results.pkl\"", ",", "\n", ")", "\n"]]}