{"home.repos.pwc.inspect_result.moberweger_deep-prior-pp.util.theano_helpers.sigmoid": [[39, 48], ["T.nnet.sigmoid"], "function", ["home.repos.pwc.inspect_result.moberweger_deep-prior-pp.util.theano_helpers.sigmoid"], ["def", "sigmoid", "(", "x", ")", ":", "\n", "    ", "\"\"\"\n    Sigmoid unit\n    :param x: input value\n    :return: sigmoid(x)\n    \"\"\"", "\n", "import", "theano", ".", "tensor", "as", "T", "\n", "\n", "return", "T", ".", "nnet", ".", "sigmoid", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.util.theano_helpers.tanh": [[50, 59], ["T.tanh"], "function", ["home.repos.pwc.inspect_result.moberweger_deep-prior-pp.util.theano_helpers.tanh"], ["", "def", "tanh", "(", "x", ")", ":", "\n", "    ", "\"\"\"\n    Tanh unit\n    :param x: input value\n    :return: tanh(x)\n    \"\"\"", "\n", "import", "theano", ".", "tensor", "as", "T", "\n", "\n", "return", "T", ".", "tanh", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.util.theano_helpers.ReLU": [[61, 70], ["T.maximum"], "function", ["None"], ["", "def", "ReLU", "(", "x", ")", ":", "\n", "    ", "\"\"\"\n    Rectified linear unit\n    :param x: input value\n    :return: max(x, 0)\n    \"\"\"", "\n", "import", "theano", ".", "tensor", "as", "T", "\n", "\n", "return", "T", ".", "maximum", "(", "x", ",", "0", ")", "# this version is slightly slower, but has defined gradients, not as theano version", "\n", "# return T.nnet.relu(x, 0)", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.util.helpers.cartesian": [[35, 85], ["numpy.prod", "numpy.repeat", "numpy.asarray", "numpy.zeros", "helpers.cartesian", "xrange", "len"], "function", ["home.repos.pwc.inspect_result.moberweger_deep-prior-pp.util.helpers.cartesian"], ["def", "cartesian", "(", "arrays", ",", "out", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Generate a cartesian product of input arrays.\n\n    Parameters\n    ----------\n    arrays : list of array-like\n        1-D arrays to form the cartesian product of.\n    out : ndarray\n        Array to place the cartesian product in.\n\n    Returns\n    -------\n    out : ndarray\n        2-D array of shape (M, len(arrays)) containing cartesian products\n        formed of input arrays.\n\n    Examples\n    --------\n    >>> cartesian(([1, 2, 3], [4, 5], [6, 7]))\n    array([[1, 4, 6],\n           [1, 4, 7],\n           [1, 5, 6],\n           [1, 5, 7],\n           [2, 4, 6],\n           [2, 4, 7],\n           [2, 5, 6],\n           [2, 5, 7],\n           [3, 4, 6],\n           [3, 4, 7],\n           [3, 5, 6],\n           [3, 5, 7]])\n\n    \"\"\"", "\n", "\n", "# https://stackoverflow.com/questions/1208118/using-numpy-to-build-an-array-of-all-combinations-of-two-arrays", "\n", "arrays", "=", "[", "numpy", ".", "asarray", "(", "x", ")", "for", "x", "in", "arrays", "]", "\n", "dtype", "=", "arrays", "[", "0", "]", ".", "dtype", "\n", "\n", "n", "=", "numpy", ".", "prod", "(", "[", "x", ".", "size", "for", "x", "in", "arrays", "]", ")", "\n", "if", "out", "is", "None", ":", "\n", "        ", "out", "=", "numpy", ".", "zeros", "(", "[", "n", ",", "len", "(", "arrays", ")", "]", ",", "dtype", "=", "dtype", ")", "\n", "\n", "", "m", "=", "n", "/", "arrays", "[", "0", "]", ".", "size", "\n", "out", "[", ":", ",", "0", "]", "=", "numpy", ".", "repeat", "(", "arrays", "[", "0", "]", ",", "m", ")", "\n", "if", "arrays", "[", "1", ":", "]", ":", "\n", "        ", "cartesian", "(", "arrays", "[", "1", ":", "]", ",", "out", "=", "out", "[", "0", ":", "m", ",", "1", ":", "]", ")", "\n", "for", "j", "in", "xrange", "(", "1", ",", "arrays", "[", "0", "]", ".", "size", ")", ":", "\n", "            ", "out", "[", "j", "*", "m", ":", "(", "j", "+", "1", ")", "*", "m", ",", "1", ":", "]", "=", "out", "[", "0", ":", "m", ",", "1", ":", "]", "\n", "", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.util.helpers.shuffle_many_inplace": [[87, 109], ["all", "reversed", "isinstance", "range", "rng.randint", "ValueError"], "function", ["None"], ["", "def", "shuffle_many_inplace", "(", "arrays", ",", "random_state", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Shuffle given list of array consistently along first dimension\n    :param arrays: list of arrays\n    :param random_state: random state or seed\n    :return: None\n    \"\"\"", "\n", "\n", "if", "random_state", "is", "None", ":", "\n", "        ", "rng", "=", "numpy", ".", "random", ".", "mtrand", ".", "_rand", "\n", "", "elif", "isinstance", "(", "random_state", ",", "numpy", ".", "random", ".", "RandomState", ")", ":", "\n", "        ", "rng", "=", "random_state", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"random_state must be None or numpy RandomState\"", ")", "\n", "\n", "", "assert", "all", "(", "i", ".", "shape", "[", "0", "]", "==", "arrays", "[", "0", "]", ".", "shape", "[", "0", "]", "for", "i", "in", "arrays", "[", "1", ":", "]", ")", "\n", "\n", "# Fisher-Yates Shuffle", "\n", "for", "oi", "in", "reversed", "(", "range", "(", "1", ",", "arrays", "[", "0", "]", ".", "shape", "[", "0", "]", ")", ")", ":", "\n", "        ", "ni", "=", "rng", ".", "randint", "(", "oi", "+", "1", ")", "\n", "for", "a", "in", "arrays", ":", "\n", "            ", "a", "[", "[", "oi", ",", "ni", "]", "]", "=", "a", "[", "[", "ni", ",", "oi", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.util.helpers.gaussian_kernel": [[111, 134], ["numpy.zeros", "numpy.floor", "xrange", "xrange", "numpy.sum", "numpy.exp", "helpers.gaussian_kernel.gauss"], "function", ["None"], ["", "", "", "def", "gaussian_kernel", "(", "kernel_shape", ",", "sigma", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Get 2D Gaussian kernel\n    :param kernel_shape: kernel size\n    :param sigma: sigma of Gaussian distribution\n    :return: 2D Gaussian kernel\n    \"\"\"", "\n", "kern", "=", "numpy", ".", "zeros", "(", "(", "kernel_shape", ",", "kernel_shape", ")", ",", "dtype", "=", "'float32'", ")", "\n", "\n", "# get sigma from kernel size", "\n", "if", "sigma", "is", "None", ":", "\n", "        ", "sigma", "=", "0.3", "*", "(", "(", "kernel_shape", "-", "1.", ")", "*", "0.5", "-", "1.", ")", "+", "0.8", "\n", "\n", "", "def", "gauss", "(", "x", ",", "y", ",", "s", ")", ":", "\n", "        ", "Z", "=", "2.", "*", "numpy", ".", "pi", "*", "s", "**", "2.", "\n", "return", "1.", "/", "Z", "*", "numpy", ".", "exp", "(", "-", "(", "x", "**", "2.", "+", "y", "**", "2.", ")", "/", "(", "2.", "*", "s", "**", "2.", ")", ")", "\n", "\n", "", "mid", "=", "numpy", ".", "floor", "(", "kernel_shape", "/", "2.", ")", "\n", "for", "i", "in", "xrange", "(", "0", ",", "kernel_shape", ")", ":", "\n", "        ", "for", "j", "in", "xrange", "(", "0", ",", "kernel_shape", ")", ":", "\n", "            ", "kern", "[", "i", ",", "j", "]", "=", "gauss", "(", "i", "-", "mid", ",", "j", "-", "mid", ",", "sigma", ")", "\n", "\n", "", "", "return", "kern", "/", "numpy", ".", "sum", "(", "kern", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.util.helpers.rgb_to_gray": [[136, 143], ["numpy.asarray", "len", "len"], "function", ["None"], ["", "def", "rgb_to_gray", "(", "rgb", ")", ":", "\n", "    ", "\"\"\"\n    Convert rgb color to gray\n    \"\"\"", "\n", "assert", "len", "(", "rgb", ")", "==", "3", ",", "\"rgb should be 3, got {}\"", ".", "format", "(", "len", "(", "rgb", ")", ")", "\n", "g", "=", "0.21", "*", "rgb", "[", "0", "]", "+", "0.72", "*", "rgb", "[", "1", "]", "+", "0.07", "*", "rgb", "[", "2", "]", "\n", "return", "numpy", ".", "asarray", "(", "[", "g", ",", "g", ",", "g", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.util.helpers.chunks": [[145, 154], ["xrange", "len"], "function", ["None"], ["", "def", "chunks", "(", "l", ",", "n", ")", ":", "\n", "    ", "\"\"\"\n    Yield successive n-sized chunks from l\n    :param l: list\n    :param n: size of chunk\n    :return: iterator\n    \"\"\"", "\n", "for", "i", "in", "xrange", "(", "0", ",", "len", "(", "l", ")", ",", "n", ")", ":", "\n", "        ", "yield", "l", "[", "i", ":", "i", "+", "n", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.util.vtkpointcloud.VtkPointCloud.__init__": [[43, 67], ["int", "vtk.vtkPolyData", "vtkpointcloud.VtkPointCloud.clearPoints", "vtk.vtkPolyDataMapper", "vtk.vtkPolyDataMapper.SetInputData", "vtk.vtkPolyDataMapper.SetColorModeToDefault", "vtk.vtkPolyDataMapper.SetScalarRange", "vtk.vtkPolyDataMapper.SetScalarVisibility", "vtk.vtkActor", "vtkpointcloud.VtkPointCloud.vtkActor.SetMapper", "vtkpointcloud.VtkPointCloud.vtkActor.GetProperty().SetPointSize", "numpy.random.RandomState", "vtkpointcloud.VtkPointCloud.addPoints", "vtkpointcloud.VtkPointCloud.vtkActor.GetProperty"], "methods", ["home.repos.pwc.inspect_result.moberweger_deep-prior-pp.util.vtkpointcloud.VtkPointCloud.clearPoints", "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.util.vtkpointcloud.VtkPointCloud.addPoints"], ["def", "__init__", "(", "self", ",", "pts", "=", "None", ",", "zMin", "=", "-", "10.0", ",", "zMax", "=", "10.0", ",", "maxNumPoints", "=", "1e6", ",", "color", "=", "'depth'", ")", ":", "\n", "        ", "\"\"\"\n        Initialize class\n        :param zMin: minimum depth\n        :param zMax: maximum depth\n        :param maxNumPoints: maximum number of points\n        :return: None\n        \"\"\"", "\n", "self", ".", "color", "=", "color", "\n", "self", ".", "maxNumPoints", "=", "int", "(", "maxNumPoints", ")", "\n", "self", ".", "vtkPolyData", "=", "vtk", ".", "vtkPolyData", "(", ")", "\n", "self", ".", "clearPoints", "(", ")", "\n", "mapper", "=", "vtk", ".", "vtkPolyDataMapper", "(", ")", "\n", "mapper", ".", "SetInputData", "(", "self", ".", "vtkPolyData", ")", "\n", "mapper", ".", "SetColorModeToDefault", "(", ")", "\n", "mapper", ".", "SetScalarRange", "(", "zMin", ",", "zMax", ")", "\n", "mapper", ".", "SetScalarVisibility", "(", "1", ")", "\n", "self", ".", "vtkActor", "=", "vtk", ".", "vtkActor", "(", ")", "\n", "self", ".", "vtkActor", ".", "SetMapper", "(", "mapper", ")", "\n", "self", ".", "vtkActor", ".", "GetProperty", "(", ")", ".", "SetPointSize", "(", "3.0", ")", "\n", "self", ".", "rng", "=", "numpy", ".", "random", ".", "RandomState", "(", "23455", ")", "\n", "\n", "if", "pts", "is", "not", "None", ":", "\n", "            ", "self", ".", "addPoints", "(", "pts", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.util.vtkpointcloud.VtkPointCloud.addPoint": [[68, 90], ["vtkpointcloud.VtkPointCloud.vtkCells.Modified", "vtkpointcloud.VtkPointCloud.vtkPoints.Modified", "vtkpointcloud.VtkPointCloud.vtkDepth.Modified", "vtkpointcloud.VtkPointCloud.vtkPoints.GetNumberOfPoints", "vtkpointcloud.VtkPointCloud.vtkPoints.InsertNextPoint", "vtkpointcloud.VtkPointCloud.vtkCells.InsertNextCell", "vtkpointcloud.VtkPointCloud.vtkCells.InsertCellPoint", "vtkpointcloud.VtkPointCloud.rng.randint", "vtkpointcloud.VtkPointCloud.vtkPoints.SetPoint", "vtkpointcloud.VtkPointCloud.vtkDepth.InsertNextValue", "isinstance", "vtkpointcloud.VtkPointCloud.vtkDepth.InsertNextValue"], "methods", ["None"], ["", "", "def", "addPoint", "(", "self", ",", "point", ")", ":", "\n", "        ", "\"\"\"\n        Add point to point cloud, if more than maximum points are set, they are randomly subsampled\n        :param point: 3D coordinates\n        :return: None\n        \"\"\"", "\n", "if", "self", ".", "vtkPoints", ".", "GetNumberOfPoints", "(", ")", "<", "self", ".", "maxNumPoints", ":", "\n", "            ", "pointId", "=", "self", ".", "vtkPoints", ".", "InsertNextPoint", "(", "point", "[", ":", "]", ")", "\n", "if", "self", ".", "color", "==", "'depth'", ":", "\n", "                ", "self", ".", "vtkDepth", ".", "InsertNextValue", "(", "point", "[", "2", "]", ")", "\n", "", "else", ":", "\n", "                ", "import", "numbers", "\n", "assert", "isinstance", "(", "self", ".", "color", ",", "numbers", ".", "Number", ")", "\n", "self", ".", "vtkDepth", ".", "InsertNextValue", "(", "self", ".", "color", ")", "\n", "", "self", ".", "vtkCells", ".", "InsertNextCell", "(", "1", ")", "\n", "self", ".", "vtkCells", ".", "InsertCellPoint", "(", "pointId", ")", "\n", "", "else", ":", "\n", "            ", "r", "=", "self", ".", "rng", ".", "randint", "(", "0", ",", "self", ".", "maxNumPoints", ")", "\n", "self", ".", "vtkPoints", ".", "SetPoint", "(", "r", ",", "point", "[", ":", "]", ")", "\n", "", "self", ".", "vtkCells", ".", "Modified", "(", ")", "\n", "self", ".", "vtkPoints", ".", "Modified", "(", ")", "\n", "self", ".", "vtkDepth", ".", "Modified", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.util.vtkpointcloud.VtkPointCloud.addPoints": [[91, 101], ["xrange", "len", "vtkpointcloud.VtkPointCloud.addPoint"], "methods", ["home.repos.pwc.inspect_result.moberweger_deep-prior-pp.util.vtkpointcloud.VtkPointCloud.addPoint"], ["", "def", "addPoints", "(", "self", ",", "points", ")", ":", "\n", "        ", "\"\"\"\n        Add points to the point cloud\n        :param points: Nx3 matrix with points\n        :return: None\n        \"\"\"", "\n", "assert", "len", "(", "points", ".", "shape", ")", "==", "2", ",", "points", ".", "shape", "\n", "assert", "points", ".", "shape", "[", "1", "]", "==", "3", ",", "points", ".", "shape", "\n", "for", "k", "in", "xrange", "(", "points", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "self", ".", "addPoint", "(", "points", "[", "k", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.util.vtkpointcloud.VtkPointCloud.clearPoints": [[102, 115], ["vtk.vtkPoints", "vtk.vtkCellArray", "vtk.vtkDoubleArray", "vtkpointcloud.VtkPointCloud.vtkDepth.SetName", "vtkpointcloud.VtkPointCloud.vtkPolyData.SetPoints", "vtkpointcloud.VtkPointCloud.vtkPolyData.SetVerts", "vtkpointcloud.VtkPointCloud.vtkPolyData.GetPointData().SetScalars", "vtkpointcloud.VtkPointCloud.vtkPolyData.GetPointData().SetActiveScalars", "vtkpointcloud.VtkPointCloud.vtkPolyData.GetPointData", "vtkpointcloud.VtkPointCloud.vtkPolyData.GetPointData"], "methods", ["None"], ["", "", "def", "clearPoints", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Clear all points from the point cloud\n        :return: None\n        \"\"\"", "\n", "self", ".", "vtkPoints", "=", "vtk", ".", "vtkPoints", "(", ")", "\n", "self", ".", "vtkCells", "=", "vtk", ".", "vtkCellArray", "(", ")", "\n", "self", ".", "vtkDepth", "=", "vtk", ".", "vtkDoubleArray", "(", ")", "\n", "self", ".", "vtkDepth", ".", "SetName", "(", "'DepthArray'", ")", "\n", "self", ".", "vtkPolyData", ".", "SetPoints", "(", "self", ".", "vtkPoints", ")", "\n", "self", ".", "vtkPolyData", ".", "SetVerts", "(", "self", ".", "vtkCells", ")", "\n", "self", ".", "vtkPolyData", ".", "GetPointData", "(", ")", ".", "SetScalars", "(", "self", ".", "vtkDepth", ")", "\n", "self", ".", "vtkPolyData", ".", "GetPointData", "(", ")", ".", "SetActiveScalars", "(", "'DepthArray'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.util.vtkpointcloud.VtkPointCloud.viewer": [[116, 141], ["all", "vtk.vtkRenderer", "vtk.vtkRenderer.SetBackground", "vtk.vtkRenderer.ResetCamera", "vtk.vtkRenderWindow", "vtk.vtkRenderWindow.AddRenderer", "vtk.vtkRenderWindowInteractor", "vtk.vtkRenderWindowInteractor.SetRenderWindow", "vtk.vtkRenderWindow.Render", "vtk.vtkRenderWindow.SetWindowName", "vtk.vtkRenderWindowInteractor.Start", "vtk.vtkRenderer.AddActor", "isinstance"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "viewer", "(", "pointclouds", ")", ":", "\n", "        ", "assert", "all", "(", "[", "isinstance", "(", "p", ",", "VtkPointCloud", ")", "for", "p", "in", "pointclouds", "]", ")", "\n", "\n", "# Renderer", "\n", "renderer", "=", "vtk", ".", "vtkRenderer", "(", ")", "\n", "renderer", ".", "SetBackground", "(", "1.0", ",", "1.0", ",", "1.0", ")", "\n", "\n", "for", "p", "in", "pointclouds", ":", "\n", "            ", "renderer", ".", "AddActor", "(", "p", ".", "vtkActor", ")", "\n", "", "renderer", ".", "ResetCamera", "(", ")", "\n", "\n", "# Render Window", "\n", "renderWindow", "=", "vtk", ".", "vtkRenderWindow", "(", ")", "\n", "renderWindow", ".", "AddRenderer", "(", "renderer", ")", "\n", "\n", "# Interactor", "\n", "renderWindowInteractor", "=", "vtk", ".", "vtkRenderWindowInteractor", "(", ")", "\n", "renderWindowInteractor", ".", "SetRenderWindow", "(", "renderWindow", ")", "\n", "\n", "# Begin Interaction", "\n", "renderWindow", ".", "Render", "(", ")", "\n", "renderWindow", ".", "SetWindowName", "(", "\"XYZ Data Viewer\"", ")", "\n", "\n", "renderWindowInteractor", ".", "Start", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.trainer.poseregnettrainer.PoseRegNetTrainerParams.__init__": [[45, 47], ["trainer.nettrainer.NetTrainerParams.__init__"], "methods", ["home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.hiddenlayer.HiddenLayer.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "PoseRegNetTrainerParams", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.trainer.poseregnettrainer.PoseRegNetTrainer.__init__": [[54, 69], ["trainer.nettrainer.NetTrainer.__init__", "poseregnettrainer.PoseRegNetTrainer.setupFunctions", "isinstance", "ValueError"], "methods", ["home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.hiddenlayer.HiddenLayer.__init__", "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.trainer.scalenettrainer.ScaleNetTrainer.setupFunctions"], ["def", "__init__", "(", "self", ",", "poseNet", "=", "None", ",", "cfgParams", "=", "None", ",", "rng", "=", "None", ",", "subfolder", "=", "'./eval/'", ",", "numChunks", "=", "1", ")", ":", "\n", "        ", "\"\"\"\n        Constructor\n        \n        :param poseNet: initialized DescriptorNet\n        :param cfgParams: initialized PoseRegNetTrainerParams\n        \"\"\"", "\n", "super", "(", "PoseRegNetTrainer", ",", "self", ")", ".", "__init__", "(", "cfgParams", ",", "5", ",", "subfolder", ",", "numChunks", ")", "\n", "self", ".", "poseNet", "=", "poseNet", "\n", "self", ".", "rng", "=", "rng", "\n", "\n", "if", "not", "isinstance", "(", "cfgParams", ",", "PoseRegNetTrainerParams", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"cfgParams must be an instance of PoseRegNetTrainerParams\"", ")", "\n", "\n", "", "self", ".", "setupFunctions", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.trainer.poseregnettrainer.PoseRegNetTrainer.setupFunctions": [[70, 133], ["theano.scalar", "theano.scalar", "theano.scalar", "theano.scalar", "theano.lscalar", "theano.lscalar", "theano.sqr().sum().mean.mean", "theano.grad", "theano.grad", "theano.tensor3", "theano.tensor3", "theano.matrix", "theano.matrix", "theano.vector", "theano.vector", "theano.sqrt().mean().mean", "theano.sqrt().mean().mean", "theano.sqrt().max().max", "theano.sqrt().max().max", "theano.sqrt().mean.mean", "theano.vector", "theano.vector", "theano.sqr().mean", "theano.sqr().mean", "poseregnettrainer.PoseRegNetTrainer.poseNet.hasDropout", "theano.sqrt().mean", "theano.sqrt().mean", "theano.matrix", "theano.matrix", "theano.tensor3", "theano.tensor3", "theano.sqr().sum", "theano.sqr().sum", "theano.sqr().sum().mean", "theano.sqr().sum().mean", "theano.sqrt", "theano.sqrt", "theano.sqrt().mean", "theano.sqrt().mean", "theano.sqrt().mean", "theano.sqrt().mean", "theano.sqrt().max", "theano.sqrt().max", "theano.sqr", "theano.sqr", "theano.sqrt", "theano.sqrt", "theano.sqr().sum", "theano.sqr().sum", "theano.sqr", "theano.sqr", "theano.sqr().sum", "theano.sqr().sum", "theano.sqr", "theano.sqr", "theano.sqrt", "theano.sqrt", "theano.sqrt", "theano.sqrt", "theano.sqrt", "theano.sqrt", "theano.reshape", "theano.reshape", "theano.sqr", "theano.sqr", "theano.sqr().sum", "theano.sqr().sum", "theano.sqr().sum", "theano.sqr().sum", "theano.sqr().sum", "theano.sqr().sum", "theano.reshape", "theano.reshape", "theano.sqr", "theano.sqr", "theano.reshape", "theano.reshape", "theano.reshape", "theano.reshape", "theano.sqr", "theano.sqr", "theano.sqr", "theano.sqr", "theano.sqr", "theano.sqr", "theano.reshape", "theano.reshape", "theano.reshape", "theano.reshape", "theano.reshape", "theano.reshape", "theano.reshape", "theano.reshape", "theano.dot", "theano.dot", "theano.dot", "theano.dot"], "methods", ["None"], ["", "def", "setupFunctions", "(", "self", ")", ":", "\n", "        ", "floatX", "=", "theano", ".", "config", ".", "floatX", "# @UndefinedVariable", "\n", "\n", "dnParams", "=", "self", ".", "poseNet", ".", "cfgParams", "\n", "\n", "# params", "\n", "self", ".", "learning_rate", "=", "T", ".", "scalar", "(", "'learning_rate'", ")", "\n", "self", ".", "momentum", "=", "T", ".", "scalar", "(", "'momentum'", ")", "\n", "\n", "# input", "\n", "self", ".", "index", "=", "T", ".", "lscalar", "(", ")", "# index to a [mini]batch", "\n", "self", ".", "x", "=", "self", ".", "poseNet", ".", "inputVar", "\n", "\n", "# targets", "\n", "if", "self", ".", "poseNet", ".", "cfgParams", ".", "numJoints", "==", "1", "and", "self", ".", "poseNet", ".", "cfgParams", ".", "nDims", "==", "1", ":", "\n", "            ", "y", "=", "T", ".", "vector", "(", "'y'", ")", "# R^D", "\n", "", "elif", "self", ".", "poseNet", ".", "cfgParams", ".", "numJoints", "==", "1", ":", "\n", "            ", "y", "=", "T", ".", "matrix", "(", "'y'", ")", "# R^Dx3", "\n", "", "else", ":", "\n", "            ", "y", "=", "T", ".", "tensor3", "(", "'y'", ")", "# R^Dx16x3", "\n", "\n", "# L2 error", "\n", "", "if", "self", ".", "poseNet", ".", "cfgParams", ".", "numJoints", "==", "1", "and", "self", ".", "poseNet", ".", "cfgParams", ".", "nDims", "==", "1", ":", "\n", "            ", "cost", "=", "T", ".", "sqr", "(", "T", ".", "reshape", "(", "self", ".", "poseNet", ".", "output", ",", "(", "self", ".", "cfgParams", ".", "batch_size", ",", "self", ".", "poseNet", ".", "cfgParams", ".", "nDims", ")", ")", "-", "y", ")", ".", "mean", "(", "axis", "=", "1", ")", "\n", "", "elif", "self", ".", "poseNet", ".", "cfgParams", ".", "numJoints", "==", "1", ":", "\n", "            ", "cost", "=", "T", ".", "sqr", "(", "T", ".", "reshape", "(", "self", ".", "poseNet", ".", "output", ",", "(", "self", ".", "cfgParams", ".", "batch_size", ",", "self", ".", "poseNet", ".", "cfgParams", ".", "nDims", ")", ")", "-", "y", ")", ".", "sum", "(", "axis", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "cost", "=", "T", ".", "sqr", "(", "T", ".", "reshape", "(", "self", ".", "poseNet", ".", "output", ",", "(", "self", ".", "cfgParams", ".", "batch_size", ",", "self", ".", "poseNet", ".", "cfgParams", ".", "numJoints", ",", "self", ".", "poseNet", ".", "cfgParams", ".", "nDims", ")", ")", "-", "y", ")", ".", "sum", "(", "axis", "=", "2", ")", ".", "mean", "(", "axis", "=", "1", ")", "# error is sum of all joints", "\n", "\n", "", "self", ".", "cost", "=", "cost", ".", "mean", "(", ")", "# The cost to minimize", "\n", "\n", "# weight vector length for regularization (weight decay)       ", "\n", "totalWeightVectorLength", "=", "0", "\n", "for", "W", "in", "self", ".", "poseNet", ".", "weights", ":", "\n", "            ", "totalWeightVectorLength", "+=", "self", ".", "cfgParams", ".", "weightreg_factor", "*", "(", "W", "**", "2", ")", ".", "sum", "(", ")", "\n", "\n", "", "if", "not", "self", ".", "poseNet", ".", "hasDropout", "(", ")", ":", "\n", "            ", "self", ".", "cost", "+=", "totalWeightVectorLength", "# + weight vector norm", "\n", "\n", "# create a list of gradients for all model parameters", "\n", "", "self", ".", "params", "=", "self", ".", "poseNet", ".", "params", "\n", "self", ".", "grads", "=", "T", ".", "grad", "(", "self", ".", "cost", ",", "self", ".", "params", ")", "\n", "\n", "# euclidean mean errors over all joints", "\n", "if", "self", ".", "poseNet", ".", "cfgParams", ".", "numJoints", "==", "1", "and", "self", ".", "poseNet", ".", "cfgParams", ".", "nDims", "==", "1", ":", "\n", "            ", "errors", "=", "T", ".", "sqrt", "(", "T", ".", "sqr", "(", "T", ".", "reshape", "(", "self", ".", "poseNet", ".", "output", ",", "(", "self", ".", "cfgParams", ".", "batch_size", ",", "self", ".", "poseNet", ".", "cfgParams", ".", "nDims", ")", ")", "-", "y", ")", ")", ".", "mean", "(", "axis", "=", "1", ")", "\n", "", "elif", "self", ".", "poseNet", ".", "cfgParams", ".", "numJoints", "==", "1", ":", "\n", "            ", "errors", "=", "T", ".", "sqrt", "(", "T", ".", "sqr", "(", "T", ".", "reshape", "(", "self", ".", "poseNet", ".", "output", ",", "(", "self", ".", "cfgParams", ".", "batch_size", ",", "self", ".", "poseNet", ".", "cfgParams", ".", "nDims", ")", ")", "-", "y", ")", ".", "sum", "(", "axis", "=", "1", ")", ")", "\n", "", "else", ":", "\n", "            ", "errors", "=", "T", ".", "sqrt", "(", "T", ".", "sqr", "(", "T", ".", "reshape", "(", "self", ".", "poseNet", ".", "output", ",", "(", "self", ".", "cfgParams", ".", "batch_size", ",", "self", ".", "poseNet", ".", "cfgParams", ".", "numJoints", ",", "self", ".", "poseNet", ".", "cfgParams", ".", "nDims", ")", ")", "-", "y", ")", ".", "sum", "(", "axis", "=", "2", ")", ")", ".", "mean", "(", "axis", "=", "1", ")", "\n", "\n", "# evaluation errors", "\n", "", "self", ".", "y_eval", "=", "T", ".", "tensor3", "(", "'y'", ")", "# R^Dx16x3", "\n", "self", ".", "pca", "=", "T", ".", "matrix", "(", "'pca'", ")", "\n", "self", ".", "mean", "=", "T", ".", "vector", "(", "'mean'", ")", "\n", "self", ".", "errors_avg", "=", "T", ".", "sqrt", "(", "T", ".", "sqr", "(", "T", ".", "reshape", "(", "T", ".", "dot", "(", "self", ".", "poseNet", ".", "output", ",", "self", ".", "pca", ")", "+", "self", ".", "mean", ",", "(", "self", ".", "cfgParams", ".", "batch_size", ",", "self", ".", "pca", ".", "shape", "[", "1", "]", "//", "3", ",", "3", ")", ")", "-", "self", ".", "y_eval", ")", ".", "sum", "(", "axis", "=", "2", ")", ")", ".", "mean", "(", "axis", "=", "1", ")", ".", "mean", "(", ")", "\n", "self", ".", "errors_max", "=", "T", ".", "sqrt", "(", "T", ".", "sqr", "(", "T", ".", "reshape", "(", "T", ".", "dot", "(", "self", ".", "poseNet", ".", "output", ",", "self", ".", "pca", ")", "+", "self", ".", "mean", ",", "(", "self", ".", "cfgParams", ".", "batch_size", ",", "self", ".", "pca", ".", "shape", "[", "1", "]", "//", "3", ",", "3", ")", ")", "-", "self", ".", "y_eval", ")", ".", "sum", "(", "axis", "=", "2", ")", ")", ".", "max", "(", "axis", "=", "1", ")", ".", "max", "(", ")", "\n", "\n", "# mean error over full set", "\n", "self", ".", "errors", "=", "errors", ".", "mean", "(", ")", "\n", "\n", "# store stuff                    ", "\n", "self", ".", "y", "=", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.trainer.poseregnettrainer.PoseRegNetTrainer.compileFunctions": [[134, 145], ["poseregnettrainer.PoseRegNetTrainer.setupTrain", "poseregnettrainer.PoseRegNetTrainer.setupValidate", "poseregnettrainer.PoseRegNetTrainer.setupDebugFunctions"], "methods", ["home.repos.pwc.inspect_result.moberweger_deep-prior-pp.trainer.scalenettrainer.ScaleNetTrainer.setupTrain", "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.trainer.scalenettrainer.ScaleNetTrainer.setupValidate", "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.trainer.scalenettrainer.ScaleNetTrainer.setupDebugFunctions"], ["", "def", "compileFunctions", "(", "self", ",", "compileDebugFcts", "=", "False", ")", ":", "\n", "# TRAIN", "\n", "        ", "self", ".", "setupTrain", "(", ")", "\n", "\n", "# DEBUG", "\n", "self", ".", "compileDebugFcts", "=", "compileDebugFcts", "\n", "if", "compileDebugFcts", ":", "\n", "            ", "self", ".", "setupDebugFunctions", "(", ")", "\n", "\n", "# VALIDATE", "\n", "", "self", ".", "setupValidate", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.trainer.poseregnettrainer.PoseRegNetTrainer.setupTrain": [[146, 171], ["trainer.optimizer.Optimizer", "trainer.optimizer.Optimizer.ADAM", "print", "theano.function", "theano.function", "theano.function", "theano.function", "print", "print", "theano.function", "theano.function", "theano.function", "theano.function", "print"], "methods", ["None"], ["", "def", "setupTrain", "(", "self", ")", ":", "\n", "# train_model is a function that updates the model parameters by SGD", "\n", "        ", "opt", "=", "Optimizer", "(", "self", ".", "grads", ",", "self", ".", "params", ")", "\n", "self", ".", "updates", "=", "opt", ".", "ADAM", "(", "self", ".", "learning_rate", ")", "\n", "\n", "batch_size", "=", "self", ".", "cfgParams", ".", "batch_size", "\n", "givens_train", "=", "{", "self", ".", "x", ":", "self", ".", "train_data_x", "[", "self", ".", "index", "*", "batch_size", ":", "(", "self", ".", "index", "+", "1", ")", "*", "batch_size", "]", "}", "\n", "givens_train", "[", "self", ".", "y", "]", "=", "self", ".", "train_data_y", "[", "self", ".", "index", "*", "batch_size", ":", "(", "self", ".", "index", "+", "1", ")", "*", "batch_size", "]", "\n", "\n", "print", "(", "\"compiling train_model() ... \"", ")", "\n", "self", ".", "train_model", "=", "theano", ".", "function", "(", "inputs", "=", "[", "self", ".", "index", ",", "self", ".", "learning_rate", "]", ",", "\n", "outputs", "=", "self", ".", "cost", ",", "\n", "updates", "=", "self", ".", "updates", ",", "\n", "givens", "=", "givens_train", ")", "\n", "print", "(", "\"done.\"", ")", "\n", "\n", "print", "(", "\"compiling test_model_on_train() ... \"", ")", "\n", "batch_size", "=", "self", ".", "cfgParams", ".", "batch_size", "\n", "givens_test_on_train", "=", "{", "self", ".", "x", ":", "self", ".", "train_data_x", "[", "self", ".", "index", "*", "batch_size", ":", "(", "self", ".", "index", "+", "1", ")", "*", "batch_size", "]", "}", "\n", "givens_test_on_train", "[", "self", ".", "y", "]", "=", "self", ".", "train_data_y", "[", "self", ".", "index", "*", "batch_size", ":", "(", "self", ".", "index", "+", "1", ")", "*", "batch_size", "]", "\n", "\n", "self", ".", "test_model_on_train", "=", "theano", ".", "function", "(", "inputs", "=", "[", "self", ".", "index", "]", ",", "\n", "outputs", "=", "self", ".", "errors", ",", "\n", "givens", "=", "givens_test_on_train", ")", "\n", "print", "(", "\"done.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.trainer.poseregnettrainer.PoseRegNetTrainer.setupValidate": [[172, 210], ["print", "theano.function", "theano.function", "theano.function", "theano.function", "print", "poseregnettrainer.PoseRegNetTrainer.validation_observer.append", "print", "theano.function", "theano.function", "theano.function", "theano.function", "print", "poseregnettrainer.PoseRegNetTrainer.validation_observer.append", "print", "hasattr", "print", "theano.function", "theano.function", "theano.function", "theano.function", "theano.function", "theano.function", "theano.function", "theano.function", "poseregnettrainer.PoseRegNetTrainer.validation_observer.append", "poseregnettrainer.PoseRegNetTrainer.validation_observer.append"], "methods", ["None"], ["", "def", "setupValidate", "(", "self", ")", ":", "\n", "\n", "        ", "batch_size", "=", "self", ".", "cfgParams", ".", "batch_size", "\n", "givens_val", "=", "{", "self", ".", "x", ":", "self", ".", "val_data_x", "[", "self", ".", "index", "*", "batch_size", ":", "(", "self", ".", "index", "+", "1", ")", "*", "batch_size", "]", "}", "\n", "givens_val", "[", "self", ".", "y", "]", "=", "self", ".", "val_data_y", "[", "self", ".", "index", "*", "batch_size", ":", "(", "self", ".", "index", "+", "1", ")", "*", "batch_size", "]", "\n", "\n", "print", "(", "\"compiling validation_cost() ... \"", ")", "\n", "self", ".", "validation_cost", "=", "theano", ".", "function", "(", "inputs", "=", "[", "self", ".", "index", "]", ",", "\n", "outputs", "=", "self", ".", "cost", ",", "\n", "givens", "=", "givens_val", ")", "\n", "print", "(", "\"done.\"", ")", "\n", "self", ".", "validation_observer", ".", "append", "(", "self", ".", "validation_cost", ")", "\n", "\n", "givens_val_err", "=", "{", "self", ".", "x", ":", "self", ".", "val_data_x", "[", "self", ".", "index", "*", "batch_size", ":", "(", "self", ".", "index", "+", "1", ")", "*", "batch_size", "]", "}", "\n", "givens_val_err", "[", "self", ".", "y", "]", "=", "self", ".", "val_data_y", "[", "self", ".", "index", "*", "batch_size", ":", "(", "self", ".", "index", "+", "1", ")", "*", "batch_size", "]", "\n", "\n", "print", "(", "\"compiling validation_error() ... \"", ")", "\n", "self", ".", "validation_error", "=", "theano", ".", "function", "(", "inputs", "=", "[", "self", ".", "index", "]", ",", "\n", "outputs", "=", "self", ".", "errors", ",", "\n", "givens", "=", "givens_val_err", ")", "\n", "print", "(", "\"done.\"", ")", "\n", "self", ".", "validation_observer", ".", "append", "(", "self", ".", "validation_error", ")", "\n", "\n", "print", "(", "\"compiling validation_error_avg() ... \"", ")", "\n", "if", "hasattr", "(", "self", ",", "'val_data_y3D'", ")", ":", "\n", "            ", "givens_val2", "=", "{", "self", ".", "x", ":", "self", ".", "val_data_x", "[", "self", ".", "index", "*", "batch_size", ":", "(", "self", ".", "index", "+", "1", ")", "*", "batch_size", "]", "}", "\n", "givens_val2", "[", "self", ".", "y_eval", "]", "=", "self", ".", "val_data_y3D", "[", "self", ".", "index", "*", "batch_size", ":", "(", "self", ".", "index", "+", "1", ")", "*", "batch_size", "]", "\n", "givens_val2", "[", "self", ".", "pca", "]", "=", "self", ".", "pca_data", "\n", "givens_val2", "[", "self", ".", "mean", "]", "=", "self", ".", "mean_data", "\n", "self", ".", "validation_error_avg", "=", "theano", ".", "function", "(", "inputs", "=", "[", "self", ".", "index", "]", ",", "\n", "outputs", "=", "self", ".", "errors_avg", ",", "\n", "givens", "=", "givens_val2", ")", "\n", "self", ".", "validation_error_max", "=", "theano", ".", "function", "(", "inputs", "=", "[", "self", ".", "index", "]", ",", "\n", "outputs", "=", "self", ".", "errors_max", ",", "\n", "givens", "=", "givens_val2", ")", "\n", "self", ".", "validation_observer", ".", "append", "(", "self", ".", "validation_error_avg", ")", "\n", "self", ".", "validation_observer", ".", "append", "(", "self", ".", "validation_error_max", ")", "\n", "", "print", "(", "\"done.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.trainer.poseregnettrainer.PoseRegNetTrainer.setupDebugFunctions": [[211, 220], ["print", "theano.function", "theano.function", "theano.function", "theano.function", "print"], "methods", ["None"], ["", "def", "setupDebugFunctions", "(", "self", ")", ":", "\n", "        ", "batch_size", "=", "self", ".", "cfgParams", ".", "batch_size", "\n", "\n", "print", "(", "\"compiling compute_train_descr() ... \"", ")", "\n", "givens_train_descr", "=", "{", "self", ".", "x", ":", "self", ".", "train_data_x", "[", "self", ".", "index", "*", "batch_size", ":", "(", "self", ".", "index", "+", "1", ")", "*", "batch_size", "]", "}", "\n", "self", ".", "compute_train_descr", "=", "theano", ".", "function", "(", "inputs", "=", "[", "self", ".", "index", "]", ",", "\n", "outputs", "=", "self", ".", "poseNet", ".", "output", ",", "\n", "givens", "=", "givens_train_descr", ")", "\n", "print", "(", "\"done.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.trainer.poseregnettrainer.PoseRegNetTrainer.augment_poses": [[221, 265], ["zip", "poseregnettrainer.PoseRegNetTrainer.augmentCrop", "[].jointImgTo3D", "poseregnettrainer.PoseRegNetTrainer.train_data_xDBlast[].copy", "[].joint3DToImg", "poseregnettrainer.PoseRegNetTrainer.train_data_cubeDBlast[].copy", "poseregnettrainer.PoseRegNetTrainer.train_data_MDBlast[].copy", "poseregnettrainer.PoseRegNetTrainer.train_data_xDB[].copy", "[].joint3DToImg", "poseregnettrainer.PoseRegNetTrainer.train_data_cubeDB[].copy", "poseregnettrainer.PoseRegNetTrainer.train_data_MDB[].copy", "curLabel.reshape", "poseregnettrainer.PoseRegNetTrainer.getNumMacroBatches", "poseregnettrainer.PoseRegNetTrainer.train_gt3DcropDBlast[].copy", "poseregnettrainer.PoseRegNetTrainer.train_gt3DcropDB[].copy", "[].transform", "poseregnettrainer.PoseRegNetTrainer.train_data_yDBlast[].copy().reshape", "poseregnettrainer.PoseRegNetTrainer.train_data_yDB[].copy().reshape", "curLabel.reshape", "poseregnettrainer.PoseRegNetTrainer.train_data_yDBlast[].copy", "poseregnettrainer.PoseRegNetTrainer.train_data_yDB[].copy"], "methods", ["home.repos.pwc.inspect_result.moberweger_deep-prior-pp.data.importers.NYUImporter.jointImgTo3D", "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.data.importers.NYUImporter.joint3DToImg", "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.data.importers.NYUImporter.joint3DToImg"], ["", "def", "augment_poses", "(", "self", ",", "macro_params", ",", "macro_idx", ",", "last", ",", "tidxs", ",", "idxs", ",", "new_data", ")", ":", "\n", "# augment the training data within current data range", "\n", "        ", "for", "idx", ",", "i", "in", "zip", "(", "tidxs", ",", "idxs", ")", ":", "\n", "# com now in image coordinates", "\n", "            ", "if", "(", "self", ".", "getNumMacroBatches", "(", ")", ">", "1", ")", "and", "(", "last", "is", "True", ")", ":", "\n", "                ", "img", "=", "self", ".", "train_data_xDBlast", "[", "i", ",", "0", "]", ".", "copy", "(", ")", "\n", "com", "=", "macro_params", "[", "'args'", "]", "[", "'di'", "]", ".", "joint3DToImg", "(", "self", ".", "train_data_comDBlast", "[", "i", "]", ")", "\n", "cube", "=", "self", ".", "train_data_cubeDBlast", "[", "i", "]", ".", "copy", "(", ")", "\n", "M", "=", "self", ".", "train_data_MDBlast", "[", "i", "]", ".", "copy", "(", ")", "\n", "if", "'proj'", "in", "macro_params", "[", "'args'", "]", "and", "macro_params", "[", "'args'", "]", "[", "'proj'", "]", "is", "not", "None", ":", "\n", "                    ", "gt3Dcrop", "=", "self", ".", "train_gt3DcropDBlast", "[", "i", "]", ".", "copy", "(", ")", "\n", "", "else", ":", "\n", "                    ", "gt3Dcrop", "=", "self", ".", "train_data_yDBlast", "[", "i", "]", ".", "copy", "(", ")", ".", "reshape", "(", "(", "-", "1", ",", "3", ")", ")", "*", "(", "cube", "[", "2", "]", "/", "2.", ")", "\n", "", "", "else", ":", "\n", "                ", "img", "=", "self", ".", "train_data_xDB", "[", "i", ",", "0", "]", ".", "copy", "(", ")", "\n", "com", "=", "macro_params", "[", "'args'", "]", "[", "'di'", "]", ".", "joint3DToImg", "(", "self", ".", "train_data_comDB", "[", "i", "]", ")", "\n", "cube", "=", "self", ".", "train_data_cubeDB", "[", "i", "]", ".", "copy", "(", ")", "\n", "M", "=", "self", ".", "train_data_MDB", "[", "i", "]", ".", "copy", "(", ")", "\n", "if", "'proj'", "in", "macro_params", "[", "'args'", "]", "and", "macro_params", "[", "'args'", "]", "[", "'proj'", "]", "is", "not", "None", ":", "\n", "                    ", "gt3Dcrop", "=", "self", ".", "train_gt3DcropDB", "[", "i", "]", ".", "copy", "(", ")", "\n", "", "else", ":", "\n", "                    ", "gt3Dcrop", "=", "self", ".", "train_data_yDB", "[", "i", "]", ".", "copy", "(", ")", ".", "reshape", "(", "(", "-", "1", ",", "3", ")", ")", "*", "(", "cube", "[", "2", "]", "/", "2.", ")", "\n", "\n", "", "", "imgD", ",", "_", ",", "curLabel", ",", "cube", ",", "com2D", ",", "M", ",", "_", "=", "self", ".", "augmentCrop", "(", "\n", "img", ",", "gt3Dcrop", ",", "com", ",", "cube", ",", "M", ",", "macro_params", "[", "'args'", "]", "[", "'aug_modes'", "]", ",", "\n", "macro_params", "[", "'args'", "]", "[", "'hd'", "]", ",", "macro_params", "[", "'args'", "]", "[", "'normZeroOne'", "]", ",", "\n", "sigma_com", "=", "(", "macro_params", "[", "'args'", "]", "[", "'sigma_com'", "]", "if", "'sigma_com'", "in", "macro_params", "[", "'args'", "]", "else", "None", ")", ",", "\n", "sigma_sc", "=", "(", "macro_params", "[", "'args'", "]", "[", "'sigma_sc'", "]", "if", "'sigma_sc'", "in", "macro_params", "[", "'args'", "]", "else", "None", ")", ",", "\n", "rot_range", "=", "(", "macro_params", "[", "'args'", "]", "[", "'rot_range'", "]", "if", "'rot_range'", "in", "macro_params", "[", "'args'", "]", "else", "None", ")", ")", "\n", "com", "=", "macro_params", "[", "'args'", "]", "[", "'di'", "]", ".", "jointImgTo3D", "(", "com2D", ")", "\n", "\n", "# import scipy", "\n", "# scipy.misc.imshow(numpy.concatenate([train_data_xDB[i+start_idx, 0], imgD], axis=0))", "\n", "\n", "if", "'binarizeImage'", "in", "macro_params", "[", "'args'", "]", ":", "\n", "                ", "if", "macro_params", "[", "'args'", "]", "[", "'binarizeImage'", "]", "is", "True", ":", "\n", "                    ", "imgD", "[", "imgD", "<", "0.5", "]", "=", "0", "\n", "imgD", "[", "imgD", ">=", "0.5", "]", "=", "1", "\n", "", "", "new_data", "[", "'train_data_x'", "]", "[", "idx", "]", "=", "imgD", "\n", "if", "'proj'", "in", "macro_params", "[", "'args'", "]", "and", "macro_params", "[", "'args'", "]", "[", "'proj'", "]", "is", "not", "None", ":", "\n", "# check for projection deep prior", "\n", "                ", "new_data", "[", "'train_data_y'", "]", "[", "idx", "]", "=", "macro_params", "[", "'args'", "]", "[", "'proj'", "]", ".", "transform", "(", "curLabel", ".", "reshape", "(", "1", ",", "-", "1", ")", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "                ", "new_data", "[", "'train_data_y'", "]", "[", "idx", "]", "=", "curLabel", ".", "reshape", "(", "new_data", "[", "'train_data_y'", "]", "[", "idx", "]", ".", "shape", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.trainer.scalenettrainer.ScaleNetTrainerParams.__init__": [[46, 48], ["trainer.nettrainer.NetTrainerParams.__init__"], "methods", ["home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.hiddenlayer.HiddenLayer.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "ScaleNetTrainerParams", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.trainer.scalenettrainer.ScaleNetTrainer.__init__": [[55, 71], ["trainer.nettrainer.NetTrainer.__init__", "scalenettrainer.ScaleNetTrainer.setupFunctions", "isinstance", "ValueError"], "methods", ["home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.hiddenlayer.HiddenLayer.__init__", "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.trainer.scalenettrainer.ScaleNetTrainer.setupFunctions"], ["def", "__init__", "(", "self", ",", "poseNet", "=", "None", ",", "cfgParams", "=", "None", ",", "rng", "=", "None", ",", "subfolder", "=", "'./eval/'", ",", "numChunks", "=", "1", ")", ":", "\n", "        ", "\"\"\"\n        Constructor\n        \n        :param poseNet: initialized DescriptorNet\n        :param cfgParams: initialized PoseRegNetTrainerParams\n        \"\"\"", "\n", "\n", "super", "(", "ScaleNetTrainer", ",", "self", ")", ".", "__init__", "(", "cfgParams", ",", "8", ",", "subfolder", ",", "numChunks", ")", "\n", "self", ".", "poseNet", "=", "poseNet", "\n", "self", ".", "rng", "=", "rng", "\n", "\n", "if", "not", "isinstance", "(", "cfgParams", ",", "ScaleNetTrainerParams", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"cfgParams must be an instance of ScaleNetTrainerParams\"", ")", "\n", "\n", "", "self", ".", "setupFunctions", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.trainer.scalenettrainer.ScaleNetTrainer.setupFunctions": [[72, 130], ["theano.scalar", "theano.scalar", "theano.scalar", "theano.scalar", "theano.lscalar", "theano.lscalar", "range", "theano.sqr().sum().mean.mean", "theano.grad", "theano.grad", "theano.sqrt().mean.mean", "scalenettrainer.ScaleNetTrainer.x.append", "theano.vector", "theano.vector", "theano.sqr", "theano.sqr", "scalenettrainer.ScaleNetTrainer.poseNet.hasDropout", "theano.sqrt", "theano.sqrt", "theano.matrix", "theano.matrix", "theano.tensor3", "theano.tensor3", "theano.sqr().sum", "theano.sqr().sum", "theano.sqr().sum().mean", "theano.sqr().sum().mean", "theano.sqr", "theano.sqr", "theano.sqrt", "theano.sqrt", "theano.sqrt().mean", "theano.sqrt().mean", "theano.reshape", "theano.reshape", "theano.sqr().sum", "theano.sqr().sum", "theano.sqr", "theano.sqr", "theano.sqr().sum", "theano.sqr().sum", "theano.reshape", "theano.reshape", "theano.sqrt", "theano.sqrt", "theano.sqr", "theano.sqr", "theano.sqr().sum", "theano.sqr().sum", "theano.reshape", "theano.reshape", "theano.sqr", "theano.sqr", "theano.reshape", "theano.reshape", "theano.sqr", "theano.sqr", "theano.reshape", "theano.reshape", "theano.reshape", "theano.reshape"], "methods", ["None"], ["", "def", "setupFunctions", "(", "self", ")", ":", "\n", "        ", "floatX", "=", "theano", ".", "config", ".", "floatX", "# @UndefinedVariable", "\n", "\n", "dnParams", "=", "self", ".", "poseNet", ".", "cfgParams", "\n", "\n", "# params", "\n", "self", ".", "learning_rate", "=", "T", ".", "scalar", "(", "'learning_rate'", ")", "\n", "self", ".", "momentum", "=", "T", ".", "scalar", "(", "'momentum'", ")", "\n", "\n", "# input", "\n", "self", ".", "index", "=", "T", ".", "lscalar", "(", ")", "# index to a [mini]batch", "\n", "self", ".", "x", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "poseNet", ".", "cfgParams", ".", "numInputs", ")", ":", "\n", "            ", "self", ".", "x", ".", "append", "(", "self", ".", "poseNet", ".", "inputVar", "[", "i", "]", ")", "\n", "\n", "# targets", "\n", "", "if", "self", ".", "poseNet", ".", "cfgParams", ".", "numJoints", "==", "1", "and", "self", ".", "poseNet", ".", "cfgParams", ".", "nDims", "==", "1", ":", "\n", "            ", "y", "=", "T", ".", "vector", "(", "'y'", ")", "# R^D", "\n", "", "elif", "self", ".", "poseNet", ".", "cfgParams", ".", "numJoints", "==", "1", ":", "\n", "            ", "y", "=", "T", ".", "matrix", "(", "'y'", ")", "# R^Dx3", "\n", "", "else", ":", "\n", "            ", "y", "=", "T", ".", "tensor3", "(", "'y'", ")", "# R^Dx16x3", "\n", "\n", "# L2 error", "\n", "", "if", "self", ".", "poseNet", ".", "cfgParams", ".", "numJoints", "==", "1", "and", "self", ".", "poseNet", ".", "cfgParams", ".", "nDims", "==", "1", ":", "\n", "            ", "cost", "=", "T", ".", "sqr", "(", "T", ".", "reshape", "(", "self", ".", "poseNet", ".", "output", ",", "(", "self", ".", "cfgParams", ".", "batch_size", ",", "self", ".", "poseNet", ".", "cfgParams", ".", "nDims", ")", ")", "-", "y", ")", "\n", "", "elif", "self", ".", "poseNet", ".", "cfgParams", ".", "numJoints", "==", "1", ":", "\n", "            ", "cost", "=", "T", ".", "sqr", "(", "T", ".", "reshape", "(", "self", ".", "poseNet", ".", "output", ",", "(", "self", ".", "cfgParams", ".", "batch_size", ",", "self", ".", "poseNet", ".", "cfgParams", ".", "nDims", ")", ")", "-", "y", ")", ".", "sum", "(", "axis", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "cost", "=", "T", ".", "sqr", "(", "T", ".", "reshape", "(", "self", ".", "poseNet", ".", "output", ",", "(", "self", ".", "cfgParams", ".", "batch_size", ",", "self", ".", "poseNet", ".", "cfgParams", ".", "numJoints", ",", "self", ".", "poseNet", ".", "cfgParams", ".", "nDims", ")", ")", "-", "y", ")", ".", "sum", "(", "axis", "=", "2", ")", ".", "mean", "(", "axis", "=", "1", ")", "# error is sum of all joints", "\n", "\n", "", "self", ".", "cost", "=", "cost", ".", "mean", "(", ")", "# The cost to minimize", "\n", "\n", "# weight vector length for regularization (weight decay)       ", "\n", "totalWeightVectorLength", "=", "0", "\n", "for", "W", "in", "self", ".", "poseNet", ".", "weights", ":", "\n", "            ", "totalWeightVectorLength", "+=", "self", ".", "cfgParams", ".", "weightreg_factor", "*", "(", "W", "**", "2", ")", ".", "sum", "(", ")", "\n", "\n", "", "if", "not", "self", ".", "poseNet", ".", "hasDropout", "(", ")", ":", "\n", "            ", "self", ".", "cost", "+=", "totalWeightVectorLength", "# + weight vector norm", "\n", "\n", "# create a list of gradients for all model parameters", "\n", "", "self", ".", "params", "=", "self", ".", "poseNet", ".", "params", "\n", "self", ".", "grads", "=", "T", ".", "grad", "(", "self", ".", "cost", ",", "self", ".", "params", ")", "\n", "\n", "# euclidean mean errors over all joints", "\n", "if", "self", ".", "poseNet", ".", "cfgParams", ".", "numJoints", "==", "1", "and", "self", ".", "poseNet", ".", "cfgParams", ".", "nDims", "==", "1", ":", "\n", "            ", "errors", "=", "T", ".", "sqrt", "(", "T", ".", "sqr", "(", "T", ".", "reshape", "(", "self", ".", "poseNet", ".", "output", ",", "(", "self", ".", "cfgParams", ".", "batch_size", ",", "self", ".", "poseNet", ".", "cfgParams", ".", "nDims", ")", ")", "-", "y", ")", ")", "\n", "", "elif", "self", ".", "poseNet", ".", "cfgParams", ".", "numJoints", "==", "1", ":", "\n", "            ", "errors", "=", "T", ".", "sqrt", "(", "T", ".", "sqr", "(", "T", ".", "reshape", "(", "self", ".", "poseNet", ".", "output", ",", "(", "self", ".", "cfgParams", ".", "batch_size", ",", "self", ".", "poseNet", ".", "cfgParams", ".", "nDims", ")", ")", "-", "y", ")", ".", "sum", "(", "axis", "=", "1", ")", ")", "\n", "", "else", ":", "\n", "            ", "errors", "=", "T", ".", "sqrt", "(", "T", ".", "sqr", "(", "T", ".", "reshape", "(", "self", ".", "poseNet", ".", "output", ",", "(", "self", ".", "cfgParams", ".", "batch_size", ",", "self", ".", "poseNet", ".", "cfgParams", ".", "numJoints", ",", "self", ".", "poseNet", ".", "cfgParams", ".", "nDims", ")", ")", "-", "y", ")", ".", "sum", "(", "axis", "=", "2", ")", ")", ".", "mean", "(", "axis", "=", "1", ")", "\n", "\n", "# mean error over full set", "\n", "", "self", ".", "errors", "=", "errors", ".", "mean", "(", ")", "\n", "\n", "# store stuff                    ", "\n", "self", ".", "y", "=", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.trainer.scalenettrainer.ScaleNetTrainer.compileFunctions": [[131, 141], ["scalenettrainer.ScaleNetTrainer.setupTrain", "scalenettrainer.ScaleNetTrainer.setupValidate", "scalenettrainer.ScaleNetTrainer.setupDebugFunctions"], "methods", ["home.repos.pwc.inspect_result.moberweger_deep-prior-pp.trainer.scalenettrainer.ScaleNetTrainer.setupTrain", "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.trainer.scalenettrainer.ScaleNetTrainer.setupValidate", "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.trainer.scalenettrainer.ScaleNetTrainer.setupDebugFunctions"], ["", "def", "compileFunctions", "(", "self", ",", "compileDebugFcts", "=", "False", ")", ":", "\n", "# TRAIN", "\n", "        ", "self", ".", "setupTrain", "(", ")", "\n", "\n", "self", ".", "compileDebugFcts", "=", "compileDebugFcts", "\n", "if", "compileDebugFcts", ":", "\n", "            ", "self", ".", "setupDebugFunctions", "(", ")", "\n", "\n", "# VALIDATE", "\n", "", "self", ".", "setupValidate", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.trainer.scalenettrainer.ScaleNetTrainer.setupTrain": [[142, 172], ["trainer.optimizer.Optimizer", "trainer.optimizer.Optimizer.ADAM", "range", "print", "theano.function", "theano.function", "theano.function", "theano.function", "print", "print", "range", "theano.function", "theano.function", "theano.function", "theano.function", "print", "getattr", "getattr", "str", "str"], "methods", ["None"], ["", "def", "setupTrain", "(", "self", ")", ":", "\n", "# train_model is a function that updates the model parameters by SGD", "\n", "        ", "opt", "=", "Optimizer", "(", "self", ".", "grads", ",", "self", ".", "params", ")", "\n", "self", ".", "updates", "=", "opt", ".", "ADAM", "(", "self", ".", "learning_rate", ")", "\n", "\n", "batch_size", "=", "self", ".", "cfgParams", ".", "batch_size", "\n", "givens_train", "=", "{", "self", ".", "x", "[", "0", "]", ":", "self", ".", "train_data_x", "[", "self", ".", "index", "*", "batch_size", ":", "(", "self", ".", "index", "+", "1", ")", "*", "batch_size", "]", "}", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "poseNet", ".", "cfgParams", ".", "numInputs", ")", ":", "\n", "            ", "givens_train", "[", "self", ".", "x", "[", "i", "]", "]", "=", "getattr", "(", "self", ",", "'train_data_x'", "+", "str", "(", "i", ")", ")", "[", "self", ".", "index", "*", "batch_size", ":", "(", "self", ".", "index", "+", "1", ")", "*", "batch_size", "]", "\n", "", "givens_train", "[", "self", ".", "y", "]", "=", "self", ".", "train_data_y", "[", "self", ".", "index", "*", "batch_size", ":", "(", "self", ".", "index", "+", "1", ")", "*", "batch_size", "]", "\n", "\n", "print", "(", "\"compiling train_model() ... \"", ")", "\n", "self", ".", "train_model", "=", "theano", ".", "function", "(", "inputs", "=", "[", "self", ".", "index", ",", "self", ".", "learning_rate", "]", ",", "\n", "outputs", "=", "self", ".", "cost", ",", "\n", "updates", "=", "self", ".", "updates", ",", "\n", "givens", "=", "givens_train", ")", "\n", "\n", "print", "(", "\"done.\"", ")", "\n", "\n", "print", "(", "\"compiling test_model_on_train() ... \"", ")", "\n", "batch_size", "=", "self", ".", "cfgParams", ".", "batch_size", "\n", "givens_test_on_train", "=", "{", "self", ".", "x", "[", "0", "]", ":", "self", ".", "train_data_x", "[", "self", ".", "index", "*", "batch_size", ":", "(", "self", ".", "index", "+", "1", ")", "*", "batch_size", "]", "}", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "poseNet", ".", "cfgParams", ".", "numInputs", ")", ":", "\n", "            ", "givens_test_on_train", "[", "self", ".", "x", "[", "i", "]", "]", "=", "getattr", "(", "self", ",", "'train_data_x'", "+", "str", "(", "i", ")", ")", "[", "self", ".", "index", "*", "batch_size", ":", "(", "self", ".", "index", "+", "1", ")", "*", "batch_size", "]", "\n", "", "givens_test_on_train", "[", "self", ".", "y", "]", "=", "self", ".", "train_data_y", "[", "self", ".", "index", "*", "batch_size", ":", "(", "self", ".", "index", "+", "1", ")", "*", "batch_size", "]", "\n", "\n", "self", ".", "test_model_on_train", "=", "theano", ".", "function", "(", "inputs", "=", "[", "self", ".", "index", "]", ",", "\n", "outputs", "=", "self", ".", "errors", ",", "\n", "givens", "=", "givens_test_on_train", ")", "\n", "print", "(", "\"done.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.trainer.scalenettrainer.ScaleNetTrainer.setupValidate": [[173, 198], ["range", "range", "print", "theano.function", "theano.function", "theano.function", "theano.function", "print", "scalenettrainer.ScaleNetTrainer.validation_observer.append", "print", "theano.function", "theano.function", "theano.function", "theano.function", "print", "scalenettrainer.ScaleNetTrainer.validation_observer.append", "getattr", "getattr", "str", "str"], "methods", ["None"], ["", "def", "setupValidate", "(", "self", ")", ":", "\n", "\n", "        ", "batch_size", "=", "self", ".", "cfgParams", ".", "batch_size", "\n", "givens_val", "=", "{", "self", ".", "x", "[", "0", "]", ":", "self", ".", "val_data_x", "[", "self", ".", "index", "*", "batch_size", ":", "(", "self", ".", "index", "+", "1", ")", "*", "batch_size", "]", "}", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "poseNet", ".", "cfgParams", ".", "numInputs", ")", ":", "\n", "            ", "givens_val", "[", "self", ".", "x", "[", "i", "]", "]", "=", "getattr", "(", "self", ",", "'val_data_x'", "+", "str", "(", "i", ")", ")", "[", "self", ".", "index", "*", "batch_size", ":", "(", "self", ".", "index", "+", "1", ")", "*", "batch_size", "]", "\n", "", "givens_val", "[", "self", ".", "y", "]", "=", "self", ".", "val_data_y", "[", "self", ".", "index", "*", "batch_size", ":", "(", "self", ".", "index", "+", "1", ")", "*", "batch_size", "]", "\n", "\n", "givens_val_cost", "=", "{", "self", ".", "x", "[", "0", "]", ":", "self", ".", "val_data_x", "[", "self", ".", "index", "*", "batch_size", ":", "(", "self", ".", "index", "+", "1", ")", "*", "batch_size", "]", "}", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "poseNet", ".", "cfgParams", ".", "numInputs", ")", ":", "\n", "            ", "givens_val_cost", "[", "self", ".", "x", "[", "i", "]", "]", "=", "getattr", "(", "self", ",", "'val_data_x'", "+", "str", "(", "i", ")", ")", "[", "self", ".", "index", "*", "batch_size", ":", "(", "self", ".", "index", "+", "1", ")", "*", "batch_size", "]", "\n", "", "givens_val_cost", "[", "self", ".", "y", "]", "=", "self", ".", "val_data_y", "[", "self", ".", "index", "*", "batch_size", ":", "(", "self", ".", "index", "+", "1", ")", "*", "batch_size", "]", "\n", "print", "(", "\"compiling validation_cost() ... \"", ")", "\n", "self", ".", "validation_cost", "=", "theano", ".", "function", "(", "inputs", "=", "[", "self", ".", "index", "]", ",", "\n", "outputs", "=", "self", ".", "cost", ",", "\n", "givens", "=", "givens_val_cost", ")", "\n", "print", "(", "\"done.\"", ")", "\n", "self", ".", "validation_observer", ".", "append", "(", "self", ".", "validation_cost", ")", "\n", "\n", "print", "(", "\"compiling validation_error() ... \"", ")", "\n", "self", ".", "validation_error", "=", "theano", ".", "function", "(", "inputs", "=", "[", "self", ".", "index", "]", ",", "\n", "outputs", "=", "self", ".", "errors", ",", "\n", "givens", "=", "givens_val", ")", "\n", "print", "(", "\"done.\"", ")", "\n", "self", ".", "validation_observer", ".", "append", "(", "self", ".", "validation_error", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.trainer.scalenettrainer.ScaleNetTrainer.setupDebugFunctions": [[199, 210], ["print", "range", "theano.function", "theano.function", "theano.function", "theano.function", "print", "getattr", "str"], "methods", ["None"], ["", "def", "setupDebugFunctions", "(", "self", ")", ":", "\n", "        ", "batch_size", "=", "self", ".", "cfgParams", ".", "batch_size", "\n", "\n", "print", "(", "\"compiling compute_train_descr() ... \"", ")", "\n", "givens_train_descr", "=", "{", "self", ".", "x", "[", "0", "]", ":", "self", ".", "train_data_x", "[", "self", ".", "index", "*", "batch_size", ":", "(", "self", ".", "index", "+", "1", ")", "*", "batch_size", "]", "}", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "poseNet", ".", "cfgParams", ".", "numInputs", ")", ":", "\n", "            ", "givens_train_descr", "[", "self", ".", "x", "[", "i", "]", "]", "=", "getattr", "(", "self", ",", "'train_data_x'", "+", "str", "(", "i", ")", ")", "[", "self", ".", "index", "*", "batch_size", ":", "(", "self", ".", "index", "+", "1", ")", "*", "batch_size", "]", "\n", "", "self", ".", "compute_train_descr", "=", "theano", ".", "function", "(", "inputs", "=", "[", "self", ".", "index", "]", ",", "\n", "outputs", "=", "self", ".", "poseNet", ".", "output", ",", "\n", "givens", "=", "givens_train_descr", ")", "\n", "print", "(", "\"done.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.trainer.scalenettrainer.ScaleNetTrainer.augment_poses": [[211, 252], ["zip", "int", "int", "int", "int", "scalenettrainer.ScaleNetTrainer.augmentCrop", "[].jointImgTo3D", "scalenettrainer.ScaleNetTrainer.flatten", "int", "int", "int", "int", "scalenettrainer.ScaleNetTrainer.train_data_xDBlast[].copy", "scalenettrainer.ScaleNetTrainer.train_data_comDBlast[].copy", "scalenettrainer.ScaleNetTrainer.train_data_MDBlast[].copy", "scalenettrainer.ScaleNetTrainer.train_data_cubeDBlast[].copy", "scalenettrainer.ScaleNetTrainer.train_data_yDBlast[].copy().reshape", "scalenettrainer.ScaleNetTrainer.train_data_xDB[].copy", "scalenettrainer.ScaleNetTrainer.train_data_comDB[].copy", "scalenettrainer.ScaleNetTrainer.train_data_MDB[].copy", "scalenettrainer.ScaleNetTrainer.train_data_cubeDB[].copy", "scalenettrainer.ScaleNetTrainer.train_data_yDB[].copy().reshape", "[].joint3DToImg", "scalenettrainer.ScaleNetTrainer.getNumMacroBatches", "scalenettrainer.ScaleNetTrainer.train_data_yDBlast[].copy", "scalenettrainer.ScaleNetTrainer.train_data_yDB[].copy"], "methods", ["home.repos.pwc.inspect_result.moberweger_deep-prior-pp.data.importers.NYUImporter.jointImgTo3D", "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.data.importers.NYUImporter.joint3DToImg"], ["", "def", "augment_poses", "(", "self", ",", "macro_params", ",", "macro_idx", ",", "last", ",", "tidxs", ",", "idxs", ",", "new_data", ")", ":", "\n", "# augment the training data within current data range", "\n", "        ", "for", "idx", ",", "i", "in", "zip", "(", "tidxs", ",", "idxs", ")", ":", "\n", "# com now in image coordinates", "\n", "            ", "if", "(", "self", ".", "getNumMacroBatches", "(", ")", ">", "1", ")", "and", "(", "last", "is", "True", ")", ":", "\n", "                ", "img", "=", "self", ".", "train_data_xDBlast", "[", "i", ",", "0", "]", ".", "copy", "(", ")", "\n", "com", "=", "self", ".", "train_data_comDBlast", "[", "i", "]", ".", "copy", "(", ")", "\n", "M", "=", "self", ".", "train_data_MDBlast", "[", "i", "]", ".", "copy", "(", ")", "\n", "cube", "=", "self", ".", "train_data_cubeDBlast", "[", "i", "]", ".", "copy", "(", ")", "\n", "gt3D", "=", "self", ".", "train_data_yDBlast", "[", "i", "]", ".", "copy", "(", ")", ".", "reshape", "(", "(", "1", ",", "3", ")", ")", "\n", "", "else", ":", "\n", "                ", "img", "=", "self", ".", "train_data_xDB", "[", "i", ",", "0", "]", ".", "copy", "(", ")", "\n", "com", "=", "self", ".", "train_data_comDB", "[", "i", "]", ".", "copy", "(", ")", "\n", "M", "=", "self", ".", "train_data_MDB", "[", "i", "]", ".", "copy", "(", ")", "\n", "cube", "=", "self", ".", "train_data_cubeDB", "[", "i", "]", ".", "copy", "(", ")", "\n", "gt3D", "=", "self", ".", "train_data_yDB", "[", "i", "]", ".", "copy", "(", ")", ".", "reshape", "(", "(", "1", ",", "3", ")", ")", "\n", "\n", "", "imgD", ",", "_", ",", "gt3D", ",", "cube", ",", "com2D", ",", "M", ",", "_", "=", "self", ".", "augmentCrop", "(", "\n", "img", ",", "gt3D", "*", "(", "cube", "[", "2", "]", "/", "2.", ")", ",", "macro_params", "[", "'args'", "]", "[", "'di'", "]", ".", "joint3DToImg", "(", "com", ")", ",", "cube", ",", "M", ",", "\n", "macro_params", "[", "'args'", "]", "[", "'aug_modes'", "]", ",", "macro_params", "[", "'args'", "]", "[", "'hd'", "]", ",", "macro_params", "[", "'args'", "]", "[", "'normZeroOne'", "]", ",", "\n", "sigma_com", "=", "(", "macro_params", "[", "'args'", "]", "[", "'sigma_com'", "]", "if", "'sigma_com'", "in", "macro_params", "[", "'args'", "]", "else", "None", ")", ",", "\n", "sigma_sc", "=", "(", "macro_params", "[", "'args'", "]", "[", "'sigma_sc'", "]", "if", "'sigma_sc'", "in", "macro_params", "[", "'args'", "]", "else", "None", ")", ",", "\n", "rot_range", "=", "(", "macro_params", "[", "'args'", "]", "[", "'rot_range'", "]", "if", "'rot_range'", "in", "macro_params", "[", "'args'", "]", "else", "None", ")", ")", "\n", "com", "=", "macro_params", "[", "'args'", "]", "[", "'di'", "]", ".", "jointImgTo3D", "(", "com2D", ")", "\n", "\n", "new_data", "[", "'train_data_x'", "]", "[", "idx", "]", "=", "imgD", "\n", "new_data", "[", "'train_data_y'", "]", "[", "idx", "]", "=", "gt3D", ".", "flatten", "(", ")", "\n", "\n", "", "dsize", "=", "(", "int", "(", "new_data", "[", "'train_data_x'", "]", ".", "shape", "[", "2", "]", "//", "2", ")", ",", "int", "(", "new_data", "[", "'train_data_x'", "]", ".", "shape", "[", "3", "]", "//", "2", ")", ")", "\n", "xstart", "=", "int", "(", "new_data", "[", "'train_data_x'", "]", ".", "shape", "[", "2", "]", "/", "2", "-", "dsize", "[", "0", "]", "/", "2", ")", "\n", "xend", "=", "xstart", "+", "dsize", "[", "0", "]", "\n", "ystart", "=", "int", "(", "new_data", "[", "'train_data_x'", "]", ".", "shape", "[", "3", "]", "/", "2", "-", "dsize", "[", "1", "]", "/", "2", ")", "\n", "yend", "=", "ystart", "+", "dsize", "[", "1", "]", "\n", "new_data", "[", "'train_data_x1'", "]", "[", ":", "]", "=", "new_data", "[", "'train_data_x'", "]", "[", ":", ",", ":", ",", "ystart", ":", "yend", ",", "xstart", ":", "xend", "]", "\n", "\n", "dsize", "=", "(", "int", "(", "new_data", "[", "'train_data_x'", "]", ".", "shape", "[", "2", "]", "//", "4", ")", ",", "int", "(", "new_data", "[", "'train_data_x'", "]", ".", "shape", "[", "3", "]", "//", "4", ")", ")", "\n", "xstart", "=", "int", "(", "new_data", "[", "'train_data_x'", "]", ".", "shape", "[", "2", "]", "/", "2", "-", "dsize", "[", "0", "]", "/", "2", ")", "\n", "xend", "=", "xstart", "+", "dsize", "[", "0", "]", "\n", "ystart", "=", "int", "(", "new_data", "[", "'train_data_x'", "]", ".", "shape", "[", "3", "]", "/", "2", "-", "dsize", "[", "1", "]", "/", "2", ")", "\n", "yend", "=", "ystart", "+", "dsize", "[", "1", "]", "\n", "new_data", "[", "'train_data_x2'", "]", "[", ":", "]", "=", "new_data", "[", "'train_data_x'", "]", "[", ":", ",", ":", ",", "ystart", ":", "yend", ",", "xstart", ":", "xend", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.data.transformations.getTransformationMatrix": [[34, 45], ["numpy.cos", "numpy.sin", "numpy.array"], "function", ["None"], ["def", "getTransformationMatrix", "(", "center", ",", "rot", ",", "trans", ",", "scale", ")", ":", "\n", "    ", "ca", "=", "numpy", ".", "cos", "(", "rot", ")", "\n", "sa", "=", "numpy", ".", "sin", "(", "rot", ")", "\n", "sc", "=", "scale", "\n", "cx", "=", "center", "[", "0", "]", "\n", "cy", "=", "center", "[", "1", "]", "\n", "tx", "=", "trans", "[", "0", "]", "\n", "ty", "=", "trans", "[", "1", "]", "\n", "t", "=", "numpy", ".", "array", "(", "[", "ca", "*", "sc", ",", "-", "sa", "*", "sc", ",", "sc", "*", "(", "ca", "*", "(", "-", "tx", "-", "cx", ")", "+", "sa", "*", "(", "cy", "+", "ty", ")", ")", "+", "cx", ",", "\n", "sa", "*", "sc", ",", "ca", "*", "sc", ",", "sc", "*", "(", "ca", "*", "(", "-", "ty", "-", "cy", ")", "+", "sa", "*", "(", "-", "tx", "-", "cx", ")", ")", "+", "cy", "]", ")", "\n", "return", "t", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.data.transformations.transformPoint2D": [[47, 56], ["numpy.dot", "numpy.asarray", "numpy.asarray().reshape", "numpy.asarray", "numpy.asarray"], "function", ["None"], ["", "def", "transformPoint2D", "(", "pt", ",", "M", ")", ":", "\n", "    ", "\"\"\"\n    Transform point in 2D coordinates\n    :param pt: point coordinates\n    :param M: transformation matrix\n    :return: transformed point\n    \"\"\"", "\n", "pt2", "=", "numpy", ".", "dot", "(", "numpy", ".", "asarray", "(", "M", ")", ".", "reshape", "(", "(", "3", ",", "3", ")", ")", ",", "numpy", ".", "asarray", "(", "[", "pt", "[", "0", "]", ",", "pt", "[", "1", "]", ",", "1", "]", ")", ")", "\n", "return", "numpy", ".", "asarray", "(", "[", "pt2", "[", "0", "]", "/", "pt2", "[", "2", "]", ",", "pt2", "[", "1", "]", "/", "pt2", "[", "2", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.data.transformations.transformPoints2D": [[58, 69], ["pts.copy", "range", "transformations.transformPoint2D"], "function", ["home.repos.pwc.inspect_result.moberweger_deep-prior-pp.data.transformations.transformPoint2D"], ["", "def", "transformPoints2D", "(", "pts", ",", "M", ")", ":", "\n", "    ", "\"\"\"\n    Transform points in 2D coordinates\n    :param pts: point coordinates\n    :param M: transformation matrix\n    :return: transformed points\n    \"\"\"", "\n", "ret", "=", "pts", ".", "copy", "(", ")", "\n", "for", "i", "in", "range", "(", "pts", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "ret", "[", "i", ",", "0", ":", "2", "]", "=", "transformPoint2D", "(", "pts", "[", "i", ",", "0", ":", "2", "]", ",", "M", ")", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.data.transformations.rotatePoint2D": [[71, 89], ["p1.copy", "numpy.zeros_like", "numpy.cos", "numpy.sin", "numpy.sin", "numpy.cos"], "function", ["None"], ["", "def", "rotatePoint2D", "(", "p1", ",", "center", ",", "angle", ")", ":", "\n", "    ", "\"\"\"\n    Rotate a point in 2D around center\n    :param p1: point in 2D (u,v,d)\n    :param center: 2D center of rotation\n    :param angle: angle in deg\n    :return: rotated point\n    \"\"\"", "\n", "alpha", "=", "angle", "*", "numpy", ".", "pi", "/", "180.", "\n", "pp", "=", "p1", ".", "copy", "(", ")", "\n", "pp", "[", "0", ":", "2", "]", "-=", "center", "[", "0", ":", "2", "]", "\n", "pr", "=", "numpy", ".", "zeros_like", "(", "pp", ")", "\n", "pr", "[", "0", "]", "=", "pp", "[", "0", "]", "*", "numpy", ".", "cos", "(", "alpha", ")", "-", "pp", "[", "1", "]", "*", "numpy", ".", "sin", "(", "alpha", ")", "\n", "pr", "[", "1", "]", "=", "pp", "[", "0", "]", "*", "numpy", ".", "sin", "(", "alpha", ")", "+", "pp", "[", "1", "]", "*", "numpy", ".", "cos", "(", "alpha", ")", "\n", "pr", "[", "2", "]", "=", "pp", "[", "2", "]", "\n", "ps", "=", "pr", "\n", "ps", "[", "0", ":", "2", "]", "+=", "center", "[", "0", ":", "2", "]", "\n", "return", "ps", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.data.transformations.rotatePoints2D": [[91, 103], ["pts.copy", "xrange", "transformations.rotatePoint2D"], "function", ["home.repos.pwc.inspect_result.moberweger_deep-prior-pp.data.transformations.rotatePoint2D"], ["", "def", "rotatePoints2D", "(", "pts", ",", "center", ",", "angle", ")", ":", "\n", "    ", "\"\"\"\n    Transform points in 2D coordinates\n    :param pts: point coordinates\n    :param center: 2D center of rotation\n    :param angle: angle in deg\n    :return: rotated points\n    \"\"\"", "\n", "ret", "=", "pts", ".", "copy", "(", ")", "\n", "for", "i", "in", "xrange", "(", "pts", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "ret", "[", "i", "]", "=", "rotatePoint2D", "(", "pts", "[", "i", "]", ",", "center", ",", "angle", ")", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.data.transformations.getRotationMatrix": [[105, 120], ["numpy.eye", "euler2mat"], "function", ["None"], ["", "def", "getRotationMatrix", "(", "angle_x", ",", "angle_y", ",", "angle_z", ")", ":", "\n", "    ", "\"\"\"\n    Get rotation matrix\n    :param angle_x: angle around x-axis in deg\n    :param angle_y: angle around y-axis in deg\n    :param angle_z: angle around z-axis in deg\n    :return: 4x4 rotation matrix\n    \"\"\"", "\n", "alpha_x", "=", "angle_x", "*", "numpy", ".", "pi", "/", "180.", "\n", "alpha_y", "=", "angle_y", "*", "numpy", ".", "pi", "/", "180.", "\n", "alpha_z", "=", "angle_z", "*", "numpy", ".", "pi", "/", "180.", "\n", "R", "=", "numpy", ".", "eye", "(", "4", ")", "\n", "from", "transforms3d", ".", "euler", "import", "euler2mat", "\n", "R", "[", ":", "3", ",", ":", "3", "]", "=", "euler2mat", "(", "alpha_x", ",", "alpha_y", ",", "alpha_z", ",", "'rxyz'", ")", "\n", "return", "R", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.data.transformations.rotatePoint3D": [[122, 140], ["p1.copy", "transformations.getRotationMatrix", "numpy.array", "numpy.dot"], "function", ["home.repos.pwc.inspect_result.moberweger_deep-prior-pp.data.transformations.getRotationMatrix"], ["", "def", "rotatePoint3D", "(", "p1", ",", "center", ",", "angle_x", ",", "angle_y", ",", "angle_z", ")", ":", "\n", "    ", "\"\"\"\n    Rotate a point in 3D around center\n    :param p1: point in 3D (x,y,z)\n    :param center: 3D center of rotation\n    :param angle_x: angle around x-axis in deg\n    :param angle_y: angle around y-axis in deg\n    :param angle_z: angle around z-axis in deg\n    :return: rotated point\n    \"\"\"", "\n", "pp", "=", "p1", ".", "copy", "(", ")", "\n", "pp", "-=", "center", "\n", "R", "=", "getRotationMatrix", "(", "angle_x", ",", "angle_y", ",", "angle_z", ")", "\n", "pr", "=", "numpy", ".", "array", "(", "[", "pp", "[", "0", "]", ",", "pp", "[", "1", "]", ",", "pp", "[", "2", "]", ",", "1", "]", ")", "\n", "ps", "=", "numpy", ".", "dot", "(", "R", ",", "pr", ")", "\n", "ps", "=", "ps", "[", "0", ":", "3", "]", "/", "ps", "[", "3", "]", "\n", "ps", "+=", "center", "\n", "return", "ps", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.data.transformations.rotatePoints3D": [[142, 156], ["pts.copy", "xrange", "transformations.rotatePoint3D"], "function", ["home.repos.pwc.inspect_result.moberweger_deep-prior-pp.data.transformations.rotatePoint3D"], ["", "def", "rotatePoints3D", "(", "pts", ",", "center", ",", "angle_x", ",", "angle_y", ",", "angle_z", ")", ":", "\n", "    ", "\"\"\"\n    Transform points in 3D coordinates\n    :param pts: point coordinates\n    :param center: 3D center of rotation\n    :param angle_x: angle around x-axis in deg\n    :param angle_y: angle around y-axis in deg\n    :param angle_z: angle around z-axis in deg\n    :return: rotated points\n    \"\"\"", "\n", "ret", "=", "pts", ".", "copy", "(", ")", "\n", "for", "i", "in", "xrange", "(", "pts", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "ret", "[", "i", "]", "=", "rotatePoint3D", "(", "pts", "[", "i", "]", ",", "center", ",", "angle_x", ",", "angle_y", ",", "angle_z", ")", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.data.transformations.transformPoint3D": [[158, 167], ["numpy.dot", "numpy.asarray", "numpy.asarray().reshape", "numpy.asarray", "numpy.asarray"], "function", ["None"], ["", "def", "transformPoint3D", "(", "pt", ",", "M", ")", ":", "\n", "    ", "\"\"\"\n    Transform point in 3D coordinates\n    :param pt: point coordinates\n    :param M: transformation matrix\n    :return: transformed point\n    \"\"\"", "\n", "pt3", "=", "numpy", ".", "dot", "(", "numpy", ".", "asarray", "(", "M", ")", ".", "reshape", "(", "(", "4", ",", "4", ")", ")", ",", "numpy", ".", "asarray", "(", "[", "pt", "[", "0", "]", ",", "pt", "[", "1", "]", ",", "pt", "[", "2", "]", ",", "1", "]", ")", ")", "\n", "return", "numpy", ".", "asarray", "(", "[", "pt3", "[", "0", "]", "/", "pt3", "[", "3", "]", ",", "pt3", "[", "1", "]", "/", "pt3", "[", "3", "]", ",", "pt3", "[", "2", "]", "/", "pt3", "[", "3", "]", "]", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.data.dataset.Dataset.__init__": [[44, 56], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "imgSeqs", "=", "None", ",", "localCache", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Constructor\n        :param localCache: keeps image stacks locally for faster access, but might require more memory\n        \"\"\"", "\n", "self", ".", "localCache", "=", "localCache", "\n", "if", "imgSeqs", "is", "None", ":", "\n", "            ", "self", ".", "_imgSeqs", "=", "[", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "_imgSeqs", "=", "imgSeqs", "\n", "", "self", ".", "_imgStacks", "=", "{", "}", "\n", "self", ".", "_labelStacks", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.data.dataset.Dataset.imgSeqs": [[67, 71], ["None"], "methods", ["None"], ["", "@", "imgSeqs", ".", "setter", "\n", "def", "imgSeqs", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_imgSeqs", "=", "value", "\n", "self", ".", "_imgStacks", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.data.dataset.Dataset.imgSeq": [[61, 66], ["None"], "methods", ["None"], ["", "def", "imgSeq", "(", "self", ",", "seqName", ")", ":", "\n", "        ", "for", "seq", "in", "self", ".", "_imgSeqs", ":", "\n", "            ", "if", "seq", ".", "name", "==", "seqName", ":", "\n", "                ", "return", "seq", "\n", "", "", "return", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.data.dataset.Dataset.imgStackDepthOnly": [[72, 112], ["len", "numpy.asarray", "numpy.asarray", "numpy.zeros", "numpy.zeros", "xrange", "numpy.asarray", "numpy.asarray", "numpy.asarray", "imgSeq.data[].dpt.copy", "imgSeq.data[].dpt.copy"], "methods", ["None"], ["", "def", "imgStackDepthOnly", "(", "self", ",", "seqName", ",", "normZeroOne", "=", "False", ")", ":", "\n", "        ", "imgSeq", "=", "None", "\n", "for", "seq", "in", "self", ".", "_imgSeqs", ":", "\n", "            ", "if", "seq", ".", "name", "==", "seqName", ":", "\n", "                ", "imgSeq", "=", "seq", "\n", "break", "\n", "", "", "if", "imgSeq", "is", "None", ":", "\n", "            ", "return", "[", "]", "\n", "\n", "", "if", "seqName", "not", "in", "self", ".", "_imgStacks", ":", "\n", "# compute the stack from the sequence", "\n", "            ", "numImgs", "=", "len", "(", "imgSeq", ".", "data", ")", "\n", "data0", "=", "numpy", ".", "asarray", "(", "imgSeq", ".", "data", "[", "0", "]", ".", "dpt", ",", "'float32'", ")", "\n", "label0", "=", "numpy", ".", "asarray", "(", "imgSeq", ".", "data", "[", "0", "]", ".", "gtorig", ",", "'float32'", ")", "\n", "h", ",", "w", "=", "data0", ".", "shape", "\n", "j", ",", "d", "=", "label0", ".", "shape", "\n", "imgStack", "=", "numpy", ".", "zeros", "(", "(", "numImgs", ",", "1", ",", "h", ",", "w", ")", ",", "dtype", "=", "'float32'", ")", "# num_imgs,stack_size,rows,cols", "\n", "labelStack", "=", "numpy", ".", "zeros", "(", "(", "numImgs", ",", "j", ",", "d", ")", ",", "dtype", "=", "'float32'", ")", "# num_imgs,joints,dim", "\n", "for", "i", "in", "xrange", "(", "numImgs", ")", ":", "\n", "                ", "if", "normZeroOne", ":", "\n", "                    ", "imgD", "=", "numpy", ".", "asarray", "(", "imgSeq", ".", "data", "[", "i", "]", ".", "dpt", ".", "copy", "(", ")", ",", "'float32'", ")", "\n", "imgD", "[", "imgD", "==", "0", "]", "=", "imgSeq", ".", "data", "[", "i", "]", ".", "com", "[", "2", "]", "+", "(", "imgSeq", ".", "config", "[", "'cube'", "]", "[", "2", "]", "/", "2.", ")", "\n", "imgD", "-=", "(", "imgSeq", ".", "data", "[", "i", "]", ".", "com", "[", "2", "]", "-", "(", "imgSeq", ".", "config", "[", "'cube'", "]", "[", "2", "]", "/", "2.", ")", ")", "\n", "imgD", "/=", "imgSeq", ".", "config", "[", "'cube'", "]", "[", "2", "]", "\n", "", "else", ":", "\n", "                    ", "imgD", "=", "numpy", ".", "asarray", "(", "imgSeq", ".", "data", "[", "i", "]", ".", "dpt", ".", "copy", "(", ")", ",", "'float32'", ")", "\n", "imgD", "[", "imgD", "==", "0", "]", "=", "imgSeq", ".", "data", "[", "i", "]", ".", "com", "[", "2", "]", "+", "(", "imgSeq", ".", "config", "[", "'cube'", "]", "[", "2", "]", "/", "2.", ")", "\n", "imgD", "-=", "imgSeq", ".", "data", "[", "i", "]", ".", "com", "[", "2", "]", "\n", "imgD", "/=", "(", "imgSeq", ".", "config", "[", "'cube'", "]", "[", "2", "]", "/", "2.", ")", "\n", "\n", "", "imgStack", "[", "i", "]", "=", "imgD", "\n", "labelStack", "[", "i", "]", "=", "numpy", ".", "asarray", "(", "imgSeq", ".", "data", "[", "i", "]", ".", "gt3Dcrop", ",", "dtype", "=", "'float32'", ")", "/", "(", "imgSeq", ".", "config", "[", "'cube'", "]", "[", "2", "]", "/", "2.", ")", "\n", "\n", "", "if", "self", ".", "localCache", ":", "\n", "                ", "self", ".", "_imgStacks", "[", "seqName", "]", "=", "imgStack", "\n", "self", ".", "_labelStacks", "[", "seqName", "]", "=", "labelStack", "\n", "", "else", ":", "\n", "                ", "return", "imgStack", ",", "labelStack", "\n", "\n", "", "", "return", "self", ".", "_imgStacks", "[", "seqName", "]", ",", "self", ".", "_labelStacks", "[", "seqName", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.data.dataset.ICVLDataset.__init__": [[115, 124], ["dataset.Dataset.__init__", "data.importers.ICVLImporter"], "methods", ["home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.hiddenlayer.HiddenLayer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "imgSeqs", "=", "None", ",", "basepath", "=", "None", ",", "localCache", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        constructor\n        \"\"\"", "\n", "super", "(", "ICVLDataset", ",", "self", ")", ".", "__init__", "(", "imgSeqs", ",", "localCache", ")", "\n", "if", "basepath", "is", "None", ":", "\n", "            ", "basepath", "=", "'../../data/ICVL/'", "\n", "\n", "", "self", ".", "lmi", "=", "ICVLImporter", "(", "basepath", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.data.dataset.MSRA15Dataset.__init__": [[127, 136], ["dataset.Dataset.__init__", "data.importers.MSRA15Importer"], "methods", ["home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.hiddenlayer.HiddenLayer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "imgSeqs", "=", "None", ",", "basepath", "=", "None", ",", "localCache", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        constructor\n        \"\"\"", "\n", "super", "(", "MSRA15Dataset", ",", "self", ")", ".", "__init__", "(", "imgSeqs", ",", "localCache", ")", "\n", "if", "basepath", "is", "None", ":", "\n", "            ", "basepath", "=", "'../../data/MSRA15/'", "\n", "\n", "", "self", ".", "lmi", "=", "MSRA15Importer", "(", "basepath", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.data.dataset.NYUDataset.__init__": [[139, 148], ["dataset.Dataset.__init__", "data.importers.NYUImporter"], "methods", ["home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.hiddenlayer.HiddenLayer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "imgSeqs", "=", "None", ",", "basepath", "=", "None", ",", "localCache", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        constructor\n        \"\"\"", "\n", "super", "(", "NYUDataset", ",", "self", ")", ".", "__init__", "(", "imgSeqs", ",", "localCache", ")", "\n", "if", "basepath", "is", "None", ":", "\n", "            ", "basepath", "=", "'../../data/NYU/'", "\n", "\n", "", "self", ".", "lmi", "=", "NYUImporter", "(", "basepath", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.data.importers.DepthImporter.__init__": [[51, 68], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "fx", ",", "fy", ",", "ux", ",", "uy", ",", "hand", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Initialize object\n        :param fx: focal length in x direction\n        :param fy: focal length in y direction\n        :param ux: principal point in x direction\n        :param uy: principal point in y direction\n        \"\"\"", "\n", "\n", "self", ".", "fx", "=", "fx", "\n", "self", ".", "fy", "=", "fy", "\n", "self", ".", "ux", "=", "ux", "\n", "self", ".", "uy", "=", "uy", "\n", "self", ".", "depth_map_size", "=", "(", "320", ",", "240", ")", "\n", "self", ".", "refineNet", "=", "None", "\n", "self", ".", "crop_joint_idx", "=", "0", "\n", "self", ".", "hand", "=", "hand", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.data.importers.DepthImporter.jointsImgTo3D": [[69, 79], ["numpy.zeros", "range", "importers.DepthImporter.jointImgTo3D"], "methods", ["home.repos.pwc.inspect_result.moberweger_deep-prior-pp.data.importers.NYUImporter.jointImgTo3D"], ["", "def", "jointsImgTo3D", "(", "self", ",", "sample", ")", ":", "\n", "        ", "\"\"\"\n        Normalize sample to metric 3D\n        :param sample: joints in (x,y,z) with x,y in image coordinates and z in mm\n        :return: normalized joints in mm\n        \"\"\"", "\n", "ret", "=", "np", ".", "zeros", "(", "(", "sample", ".", "shape", "[", "0", "]", ",", "3", ")", ",", "np", ".", "float32", ")", "\n", "for", "i", "in", "range", "(", "sample", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "ret", "[", "i", "]", "=", "self", ".", "jointImgTo3D", "(", "sample", "[", "i", "]", ")", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.data.importers.DepthImporter.jointImgTo3D": [[80, 92], ["numpy.zeros"], "methods", ["None"], ["", "def", "jointImgTo3D", "(", "self", ",", "sample", ")", ":", "\n", "        ", "\"\"\"\n        Normalize sample to metric 3D\n        :param sample: joints in (x,y,z) with x,y in image coordinates and z in mm\n        :return: normalized joints in mm\n        \"\"\"", "\n", "ret", "=", "np", ".", "zeros", "(", "(", "3", ",", ")", ",", "np", ".", "float32", ")", "\n", "# convert to metric using f", "\n", "ret", "[", "0", "]", "=", "(", "sample", "[", "0", "]", "-", "self", ".", "ux", ")", "*", "sample", "[", "2", "]", "/", "self", ".", "fx", "\n", "ret", "[", "1", "]", "=", "(", "sample", "[", "1", "]", "-", "self", ".", "uy", ")", "*", "sample", "[", "2", "]", "/", "self", ".", "fy", "\n", "ret", "[", "2", "]", "=", "sample", "[", "2", "]", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.data.importers.DepthImporter.joints3DToImg": [[93, 103], ["numpy.zeros", "range", "importers.DepthImporter.joint3DToImg"], "methods", ["home.repos.pwc.inspect_result.moberweger_deep-prior-pp.data.importers.NYUImporter.joint3DToImg"], ["", "def", "joints3DToImg", "(", "self", ",", "sample", ")", ":", "\n", "        ", "\"\"\"\n        Denormalize sample from metric 3D to image coordinates\n        :param sample: joints in (x,y,z) with x,y and z in mm\n        :return: joints in (x,y,z) with x,y in image coordinates and z in mm\n        \"\"\"", "\n", "ret", "=", "np", ".", "zeros", "(", "(", "sample", ".", "shape", "[", "0", "]", ",", "3", ")", ",", "np", ".", "float32", ")", "\n", "for", "i", "in", "range", "(", "sample", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "ret", "[", "i", "]", "=", "self", ".", "joint3DToImg", "(", "sample", "[", "i", "]", ")", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.data.importers.DepthImporter.joint3DToImg": [[104, 120], ["numpy.zeros"], "methods", ["None"], ["", "def", "joint3DToImg", "(", "self", ",", "sample", ")", ":", "\n", "        ", "\"\"\"\n        Denormalize sample from metric 3D to image coordinates\n        :param sample: joints in (x,y,z) with x,y and z in mm\n        :return: joints in (x,y,z) with x,y in image coordinates and z in mm\n        \"\"\"", "\n", "ret", "=", "np", ".", "zeros", "(", "(", "3", ",", ")", ",", "np", ".", "float32", ")", "\n", "# convert to metric using f", "\n", "if", "sample", "[", "2", "]", "==", "0.", ":", "\n", "            ", "ret", "[", "0", "]", "=", "self", ".", "ux", "\n", "ret", "[", "1", "]", "=", "self", ".", "uy", "\n", "return", "ret", "\n", "", "ret", "[", "0", "]", "=", "sample", "[", "0", "]", "/", "sample", "[", "2", "]", "*", "self", ".", "fx", "+", "self", ".", "ux", "\n", "ret", "[", "1", "]", "=", "sample", "[", "1", "]", "/", "sample", "[", "2", "]", "*", "self", ".", "fy", "+", "self", ".", "uy", "\n", "ret", "[", "2", "]", "=", "sample", "[", "2", "]", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.data.importers.DepthImporter.getCameraProjection": [[121, 134], ["numpy.zeros"], "methods", ["None"], ["", "def", "getCameraProjection", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Get homogenous camera projection matrix\n        :return: 4x4 camera projection matrix\n        \"\"\"", "\n", "ret", "=", "np", ".", "zeros", "(", "(", "4", ",", "4", ")", ",", "np", ".", "float32", ")", "\n", "ret", "[", "0", ",", "0", "]", "=", "self", ".", "fx", "\n", "ret", "[", "1", ",", "1", "]", "=", "self", ".", "fy", "\n", "ret", "[", "2", ",", "2", "]", "=", "1.", "\n", "ret", "[", "0", ",", "2", "]", "=", "self", ".", "ux", "\n", "ret", "[", "1", ",", "2", "]", "=", "self", ".", "uy", "\n", "ret", "[", "3", ",", "2", "]", "=", "1.", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.data.importers.DepthImporter.getCameraIntrinsics": [[135, 147], ["numpy.zeros"], "methods", ["None"], ["", "def", "getCameraIntrinsics", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Get intrinsic camera matrix\n        :return: 3x3 intrinsic camera matrix\n        \"\"\"", "\n", "ret", "=", "np", ".", "zeros", "(", "(", "3", ",", "3", ")", ",", "np", ".", "float32", ")", "\n", "ret", "[", "0", ",", "0", "]", "=", "self", ".", "fx", "\n", "ret", "[", "1", ",", "1", "]", "=", "self", ".", "fy", "\n", "ret", "[", "2", ",", "2", "]", "=", "1.", "\n", "ret", "[", "0", ",", "2", "]", "=", "self", ".", "ux", "\n", "ret", "[", "1", ",", "2", "]", "=", "self", ".", "uy", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.data.importers.DepthImporter.showAnnotatedDepth": [[148, 155], ["NotImplementedError"], "methods", ["None"], ["", "def", "showAnnotatedDepth", "(", "self", ",", "frame", ")", ":", "\n", "        ", "\"\"\"\n        Show the depth image\n        :param frame: image to show\n        :return:\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", "\"Must be overloaded by base!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.data.importers.DepthImporter.depthToPCL": [[156, 174], ["numpy.asarray().transpose", "numpy.concatenate", "numpy.column_stack", "numpy.dot", "numpy.asarray", "numpy.ones", "numpy.linalg.inv", "numpy.where", "numpy.asarray", "numpy.isclose", "numpy.isclose"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "depthToPCL", "(", "dpt", ",", "T", ",", "background_val", "=", "0.", ")", ":", "\n", "\n", "# get valid points and transform", "\n", "        ", "pts", "=", "np", ".", "asarray", "(", "np", ".", "where", "(", "~", "np", ".", "isclose", "(", "dpt", ",", "background_val", ")", ")", ")", ".", "transpose", "(", ")", "\n", "pts", "=", "np", ".", "concatenate", "(", "[", "pts", "[", ":", ",", "[", "1", ",", "0", "]", "]", "+", "0.5", ",", "np", ".", "ones", "(", "(", "pts", ".", "shape", "[", "0", "]", ",", "1", ")", ",", "dtype", "=", "'float32'", ")", "]", ",", "axis", "=", "1", ")", "\n", "pts", "=", "np", ".", "dot", "(", "np", ".", "linalg", ".", "inv", "(", "np", ".", "asarray", "(", "T", ")", ")", ",", "pts", ".", "T", ")", ".", "T", "\n", "pts", "=", "(", "pts", "[", ":", ",", "0", ":", "2", "]", "/", "pts", "[", ":", ",", "2", "]", "[", ":", ",", "None", "]", ")", ".", "reshape", "(", "(", "pts", ".", "shape", "[", "0", "]", ",", "2", ")", ")", "\n", "\n", "# replace the invalid data", "\n", "depth", "=", "dpt", "[", "(", "~", "np", ".", "isclose", "(", "dpt", ",", "background_val", ")", ")", "]", "\n", "\n", "# get x and y data in a vectorized way", "\n", "row", "=", "(", "pts", "[", ":", ",", "0", "]", "-", "160.", ")", "/", "241.42", "*", "depth", "\n", "col", "=", "(", "pts", "[", ":", ",", "1", "]", "-", "120.", ")", "/", "241.42", "*", "depth", "\n", "\n", "# combine x,y,depth", "\n", "return", "np", ".", "column_stack", "(", "(", "row", ",", "col", ",", "depth", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.data.importers.DepthImporter.loadRefineNetLazy": [[175, 185], ["isinstance", "os.path.exists", "ScaleNetParams", "ScaleNet", "importers.DepthImporter.refineNet.load", "EnvironmentError", "numpy.random.RandomState"], "methods", ["None"], ["", "def", "loadRefineNetLazy", "(", "self", ",", "net", ")", ":", "\n", "        ", "if", "isinstance", "(", "net", ",", "basestring", ")", ":", "\n", "            ", "if", "os", ".", "path", ".", "exists", "(", "net", ")", ":", "\n", "                ", "from", "net", ".", "scalenet", "import", "ScaleNet", ",", "ScaleNetParams", "\n", "comrefNetParams", "=", "ScaleNetParams", "(", "type", "=", "5", ",", "nChan", "=", "1", ",", "wIn", "=", "128", ",", "hIn", "=", "128", ",", "batchSize", "=", "1", ",", "resizeFactor", "=", "2", ",", "\n", "numJoints", "=", "1", ",", "nDims", "=", "3", ")", "\n", "self", ".", "refineNet", "=", "ScaleNet", "(", "np", ".", "random", ".", "RandomState", "(", "23455", ")", ",", "cfgParams", "=", "comrefNetParams", ")", "\n", "self", ".", "refineNet", ".", "load", "(", "net", ")", "\n", "", "else", ":", "\n", "                ", "raise", "EnvironmentError", "(", "\"File not found: {}\"", ".", "format", "(", "net", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.data.importers.ICVLImporter.__init__": [[192, 212], ["importers.DepthImporter.__init__"], "methods", ["home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.hiddenlayer.HiddenLayer.__init__"], ["def", "__init__", "(", "self", ",", "basepath", ",", "useCache", "=", "True", ",", "cacheDir", "=", "'./cache/'", ",", "refineNet", "=", "None", ",", "hand", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Constructor\n        :param basepath: base path of the ICVL dataset\n        :return:\n        \"\"\"", "\n", "\n", "super", "(", "ICVLImporter", ",", "self", ")", ".", "__init__", "(", "241.42", ",", "241.42", ",", "160.", ",", "120.", ",", "hand", ")", "# see Qian et.al.", "\n", "\n", "self", ".", "depth_map_size", "=", "(", "320", ",", "240", ")", "\n", "self", ".", "basepath", "=", "basepath", "\n", "self", ".", "useCache", "=", "useCache", "\n", "self", ".", "cacheDir", "=", "cacheDir", "\n", "self", ".", "numJoints", "=", "16", "\n", "self", ".", "crop_joint_idx", "=", "0", "\n", "self", ".", "refineNet", "=", "refineNet", "\n", "self", ".", "default_cubes", "=", "{", "'train'", ":", "(", "250", ",", "250", ",", "250", ")", ",", "\n", "'test_seq_1'", ":", "(", "250", ",", "250", ",", "250", ")", ",", "\n", "'test_seq_2'", ":", "(", "250", ",", "250", ",", "250", ")", "}", "\n", "self", ".", "sides", "=", "{", "'train'", ":", "'right'", ",", "'test_seq1'", ":", "'right'", ",", "'test_seq_2'", ":", "'right'", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.data.importers.ICVLImporter.loadDepthMap": [[213, 225], ["PIL.Image.open", "numpy.asarray", "len", "PIL.Image.open.getbands"], "methods", ["None"], ["", "def", "loadDepthMap", "(", "self", ",", "filename", ")", ":", "\n", "        ", "\"\"\"\n        Read a depth-map\n        :param filename: file name to load\n        :return: image data of depth image\n        \"\"\"", "\n", "\n", "img", "=", "Image", ".", "open", "(", "filename", ")", "# open image", "\n", "assert", "len", "(", "img", ".", "getbands", "(", ")", ")", "==", "1", "# ensure depth image", "\n", "imgdata", "=", "np", ".", "asarray", "(", "img", ",", "np", ".", "float32", ")", "\n", "\n", "return", "imgdata", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.data.importers.ICVLImporter.getDepthMapNV": [[226, 232], ["None"], "methods", ["None"], ["", "def", "getDepthMapNV", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Get the value of invalid depth values in the depth map\n        :return: value\n        \"\"\"", "\n", "return", "32001", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.data.importers.ICVLImporter.loadSequence": [[233, 421], ["float", "importers.ICVLImporter.loadRefineNetLazy", "open", "progressbar.ProgressBar", "progressbar.ProgressBar.start", "open.seek", "open.close", "progressbar.ProgressBar.finish", "print", "data.basetypes.NamedImgSequence", "TypeError", "isinstance", "os.path.isfile", "line.split", "importers.ICVLImporter.loadDepthMap", "numpy.zeros", "range", "importers.ICVLImporter.jointsImgTo3D", "util.handdetector.HandDetector", "importers.ICVLImporter.jointImgTo3D", "data.transformations.transformPoints2D", "data.append", "progressbar.ProgressBar.update", "print", "open", "cPickle.dump", "open.close", "print", "rng.shuffle", "isinstance", "len", "util.handdetector.HandDetector.detectionModeToString", "util.handdetector.HandDetector.detectionModeToString", "print", "open", "cPickle.load", "open.close", "len", "len", "part[].split", "os.path.isfile", "print", "range", "util.handdetector.HandDetector.checkImage", "print", "util.handdetector.HandDetector.cropArea3D", "data.basetypes.DepthFrame", "len", "print", "rng.shuffle", "numpy.isinf", "data.basetypes.NamedImgSequence", "data.basetypes.NamedImgSequence", "len", "range", "open.readlines", "progressbar.Percentage", "progressbar.Bar", "len", "NotImplementedError", "print", "importers.ICVLImporter.astype", "len", "print", "open", "cPickle.load", "open.close", "range", "len", "os.path.isfile", "print", "util.handdetector.HandDetector.detectionModeToString", "len", "print", "open", "cPickle.load", "fullData.extend", "open.close", "print", "rng.shuffle", "numpy.isinf", "data.basetypes.NamedImgSequence", "data.basetypes.NamedImgSequence", "len", "util.handdetector.HandDetector.detectionModeToString", "len", "util.handdetector.HandDetector.detectionModeToString", "len"], "methods", ["home.repos.pwc.inspect_result.moberweger_deep-prior-pp.data.importers.DepthImporter.loadRefineNetLazy", "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.data.importers.NYUImporter.loadDepthMap", "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.data.importers.NYUImporter.jointsImgTo3D", "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.data.importers.NYUImporter.jointImgTo3D", "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.data.transformations.transformPoints2D", "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.layerparams.LayerParams.update"], ["", "def", "loadSequence", "(", "self", ",", "seqName", ",", "subSeq", "=", "None", ",", "Nmax", "=", "float", "(", "'inf'", ")", ",", "shuffle", "=", "False", ",", "rng", "=", "None", ",", "docom", "=", "False", ",", "cube", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Load an image sequence from the dataset\n        :param seqName: sequence name, e.g. train\n        :param subSeq: list of subsequence names, e.g. 0, 45, 122-5\n        :param Nmax: maximum number of samples to load\n        :return: returns named image sequence\n        \"\"\"", "\n", "\n", "if", "(", "subSeq", "is", "not", "None", ")", "and", "(", "not", "isinstance", "(", "subSeq", ",", "list", ")", ")", ":", "\n", "            ", "raise", "TypeError", "(", "\"subSeq must be None or list\"", ")", "\n", "\n", "", "if", "cube", "is", "None", ":", "\n", "            ", "config", "=", "{", "'cube'", ":", "self", ".", "default_cubes", "[", "seqName", "]", "}", "\n", "", "else", ":", "\n", "            ", "assert", "isinstance", "(", "cube", ",", "tuple", ")", "\n", "assert", "len", "(", "cube", ")", "==", "3", "\n", "config", "=", "{", "'cube'", ":", "cube", "}", "\n", "\n", "", "if", "subSeq", "is", "None", ":", "\n", "            ", "pickleCache", "=", "'{}/{}_{}_{}_{}_{}_cache.pkl'", ".", "format", "(", "self", ".", "cacheDir", ",", "self", ".", "__class__", ".", "__name__", ",", "seqName", ",", "self", ".", "hand", ",", "\n", "HandDetector", ".", "detectionModeToString", "(", "docom", ",", "self", ".", "refineNet", "is", "not", "None", ")", ",", "config", "[", "'cube'", "]", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "            ", "pickleCache", "=", "'{}/{}_{}_{}_{}_{}_{}_cache.pkl'", ".", "format", "(", "self", ".", "cacheDir", ",", "self", ".", "__class__", ".", "__name__", ",", "seqName", ",", "\n", "''", ".", "join", "(", "subSeq", ")", ",", "self", ".", "hand", ",", "\n", "HandDetector", ".", "detectionModeToString", "(", "docom", ",", "self", ".", "refineNet", "is", "not", "None", ")", ",", "config", "[", "'cube'", "]", "[", "0", "]", ")", "\n", "", "if", "self", ".", "useCache", ":", "\n", "            ", "if", "os", ".", "path", ".", "isfile", "(", "pickleCache", ")", ":", "\n", "                ", "print", "(", "\"Loading cache data from {}\"", ".", "format", "(", "pickleCache", ")", ")", "\n", "f", "=", "open", "(", "pickleCache", ",", "'rb'", ")", "\n", "(", "seqName", ",", "data", ",", "config", ")", "=", "cPickle", ".", "load", "(", "f", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n", "# shuffle data", "\n", "if", "shuffle", "and", "rng", "is", "not", "None", ":", "\n", "                    ", "print", "(", "\"Shuffling\"", ")", "\n", "rng", ".", "shuffle", "(", "data", ")", "\n", "", "if", "not", "(", "np", ".", "isinf", "(", "Nmax", ")", ")", ":", "\n", "                    ", "return", "NamedImgSequence", "(", "seqName", ",", "data", "[", "0", ":", "Nmax", "]", ",", "config", ")", "\n", "", "else", ":", "\n", "                    ", "return", "NamedImgSequence", "(", "seqName", ",", "data", ",", "config", ")", "\n", "\n", "# check for multiple subsequences", "\n", "", "", "if", "subSeq", "is", "not", "None", ":", "\n", "                ", "if", "len", "(", "subSeq", ")", ">", "1", ":", "\n", "                    ", "missing", "=", "False", "\n", "for", "i", "in", "range", "(", "len", "(", "subSeq", ")", ")", ":", "\n", "                        ", "if", "not", "os", ".", "path", ".", "isfile", "(", "'{}/{}_{}_{}_{}_{}_cache.pkl'", ".", "format", "(", "self", ".", "cacheDir", ",", "self", ".", "__class__", ".", "__name__", ",", "\n", "seqName", ",", "self", ".", "hand", ",", "subSeq", "[", "i", "]", ",", "\n", "HandDetector", ".", "detectionModeToString", "(", "docom", ",", "self", ".", "refineNet", "is", "not", "None", ")", ")", ")", ":", "\n", "                            ", "missing", "=", "True", "\n", "print", "(", "\"missing: {}\"", ".", "format", "(", "subSeq", "[", "i", "]", ")", ")", "\n", "break", "\n", "\n", "", "", "if", "not", "missing", ":", "\n", "# load first data", "\n", "                        ", "pickleCache", "=", "'{}/{}_{}_{}_{}_{}_cache.pkl'", ".", "format", "(", "self", ".", "cacheDir", ",", "self", ".", "__class__", ".", "__name__", ",", "\n", "seqName", ",", "self", ".", "hand", ",", "subSeq", "[", "0", "]", ",", "\n", "HandDetector", ".", "detectionModeToString", "(", "docom", ",", "self", ".", "refineNet", "is", "not", "None", ")", ")", "\n", "print", "(", "\"Loading cache data from {}\"", ".", "format", "(", "pickleCache", ")", ")", "\n", "f", "=", "open", "(", "pickleCache", ",", "'rb'", ")", "\n", "(", "seqName", ",", "fullData", ",", "config", ")", "=", "cPickle", ".", "load", "(", "f", ")", "\n", "f", ".", "close", "(", ")", "\n", "# load rest of data", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "subSeq", ")", ")", ":", "\n", "                            ", "pickleCache", "=", "'{}/{}_{}_{}_{}_{}_cache.pkl'", ".", "format", "(", "self", ".", "cacheDir", ",", "self", ".", "__class__", ".", "__name__", ",", "\n", "seqName", ",", "self", ".", "hand", ",", "subSeq", "[", "i", "]", ",", "\n", "HandDetector", ".", "detectionModeToString", "(", "docom", ",", "self", ".", "refineNet", "is", "not", "None", ")", ")", "\n", "print", "(", "\"Loading cache data from {}\"", ".", "format", "(", "pickleCache", ")", ")", "\n", "f", "=", "open", "(", "pickleCache", ",", "'rb'", ")", "\n", "(", "seqName", ",", "data", ",", "config", ")", "=", "cPickle", ".", "load", "(", "f", ")", "\n", "fullData", ".", "extend", "(", "data", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n", "# shuffle data", "\n", "", "if", "shuffle", "and", "rng", "is", "not", "None", ":", "\n", "                            ", "print", "(", "\"Shuffling\"", ")", "\n", "rng", ".", "shuffle", "(", "fullData", ")", "\n", "", "if", "not", "(", "np", ".", "isinf", "(", "Nmax", ")", ")", ":", "\n", "                            ", "return", "NamedImgSequence", "(", "seqName", ",", "fullData", "[", "0", ":", "Nmax", "]", ",", "config", ")", "\n", "", "else", ":", "\n", "                            ", "return", "NamedImgSequence", "(", "seqName", ",", "fullData", ",", "config", ")", "\n", "\n", "", "", "", "", "", "self", ".", "loadRefineNetLazy", "(", "self", ".", "refineNet", ")", "\n", "\n", "# Load the dataset", "\n", "objdir", "=", "'{}/Depth/'", ".", "format", "(", "self", ".", "basepath", ")", "\n", "trainlabels", "=", "'{}/{}.txt'", ".", "format", "(", "self", ".", "basepath", ",", "seqName", ")", "\n", "\n", "inputfile", "=", "open", "(", "trainlabels", ")", "\n", "\n", "txt", "=", "'Loading {}'", ".", "format", "(", "seqName", ")", "\n", "pbar", "=", "pb", ".", "ProgressBar", "(", "maxval", "=", "len", "(", "inputfile", ".", "readlines", "(", ")", ")", ",", "widgets", "=", "[", "txt", ",", "pb", ".", "Percentage", "(", ")", ",", "pb", ".", "Bar", "(", ")", "]", ")", "\n", "pbar", ".", "start", "(", ")", "\n", "inputfile", ".", "seek", "(", "0", ")", "\n", "\n", "data", "=", "[", "]", "\n", "i", "=", "0", "\n", "for", "line", "in", "inputfile", ":", "\n", "# early stop", "\n", "            ", "if", "len", "(", "data", ")", ">=", "Nmax", ":", "\n", "                ", "break", "\n", "\n", "", "part", "=", "line", ".", "split", "(", "' '", ")", "\n", "# check for subsequences and skip them if necessary", "\n", "subSeqName", "=", "''", "\n", "if", "subSeq", "is", "not", "None", ":", "\n", "                ", "p", "=", "part", "[", "0", "]", ".", "split", "(", "'/'", ")", "\n", "# handle original data (unrotated '0') separately", "\n", "if", "(", "'0'", "in", "subSeq", ")", "and", "len", "(", "p", "[", "0", "]", ")", ">", "6", ":", "\n", "                    ", "pass", "\n", "", "elif", "not", "(", "'0'", "in", "subSeq", ")", "and", "len", "(", "p", "[", "0", "]", ")", ">", "6", ":", "\n", "                    ", "i", "+=", "1", "\n", "continue", "\n", "", "elif", "(", "p", "[", "0", "]", "in", "subSeq", ")", "and", "len", "(", "p", "[", "0", "]", ")", "<=", "6", ":", "\n", "                    ", "pass", "\n", "", "elif", "not", "(", "p", "[", "0", "]", "in", "subSeq", ")", "and", "len", "(", "p", "[", "0", "]", ")", "<=", "6", ":", "\n", "                    ", "i", "+=", "1", "\n", "continue", "\n", "\n", "", "if", "len", "(", "p", "[", "0", "]", ")", "<=", "6", ":", "\n", "                    ", "subSeqName", "=", "p", "[", "0", "]", "\n", "", "else", ":", "\n", "                    ", "subSeqName", "=", "'0'", "\n", "\n", "", "", "dptFileName", "=", "'{}/{}'", ".", "format", "(", "objdir", ",", "part", "[", "0", "]", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "dptFileName", ")", ":", "\n", "                ", "print", "(", "\"File {} does not exist!\"", ".", "format", "(", "dptFileName", ")", ")", "\n", "i", "+=", "1", "\n", "continue", "\n", "", "dpt", "=", "self", ".", "loadDepthMap", "(", "dptFileName", ")", "\n", "if", "self", ".", "hand", "is", "not", "None", ":", "\n", "                ", "if", "self", ".", "hand", "!=", "self", ".", "sides", "[", "seqName", "]", ":", "\n", "                    ", "raise", "NotImplementedError", "(", ")", "\n", "dpt", "=", "dpt", "[", ":", ",", ":", ":", "-", "1", "]", "\n", "\n", "# joints in image coordinates", "\n", "", "", "gtorig", "=", "np", ".", "zeros", "(", "(", "self", ".", "numJoints", ",", "3", ")", ",", "np", ".", "float32", ")", "\n", "for", "joint", "in", "range", "(", "self", ".", "numJoints", ")", ":", "\n", "                ", "for", "xyz", "in", "range", "(", "0", ",", "3", ")", ":", "\n", "                    ", "gtorig", "[", "joint", ",", "xyz", "]", "=", "part", "[", "joint", "*", "3", "+", "xyz", "+", "1", "]", "\n", "\n", "# normalized joints in 3D coordinates", "\n", "", "", "gt3Dorig", "=", "self", ".", "jointsImgTo3D", "(", "gtorig", ")", "\n", "# print gt3D", "\n", "# self.showAnnotatedDepth(DepthFrame(dpt,gtorig,gtorig,0,gt3Dorig,gt3Dcrop,0,dptFileName,subSeqName,''))", "\n", "\n", "# Detect hand", "\n", "hd", "=", "HandDetector", "(", "dpt", ",", "self", ".", "fx", ",", "self", ".", "fy", ",", "refineNet", "=", "self", ".", "refineNet", ",", "importer", "=", "self", ")", "\n", "if", "not", "hd", ".", "checkImage", "(", "1", ")", ":", "\n", "                ", "print", "(", "\"Skipping image {}, no content\"", ".", "format", "(", "dptFileName", ")", ")", "\n", "i", "+=", "1", "\n", "continue", "\n", "", "try", ":", "\n", "                ", "dpt", ",", "M", ",", "com", "=", "hd", ".", "cropArea3D", "(", "com", "=", "gtorig", "[", "self", ".", "crop_joint_idx", "]", ",", "size", "=", "config", "[", "'cube'", "]", ",", "docom", "=", "docom", ")", "\n", "", "except", "UserWarning", ":", "\n", "                ", "print", "(", "\"Skipping image {}, no hand detected\"", ".", "format", "(", "dptFileName", ")", ")", "\n", "i", "+=", "1", "\n", "continue", "\n", "\n", "", "com3D", "=", "self", ".", "jointImgTo3D", "(", "com", ")", "\n", "gt3Dcrop", "=", "gt3Dorig", "-", "com3D", "# normalize to com", "\n", "gtcrop", "=", "transformPoints2D", "(", "gtorig", ",", "M", ")", "\n", "\n", "# print(\"{}\".format(gt3Dorig))", "\n", "# self.showAnnotatedDepth(DepthFrame(dpt,gtorig,gtcrop,M,gt3Dorig,gt3Dcrop,com3D,dptFileName,subSeqName,''))", "\n", "\n", "data", ".", "append", "(", "DepthFrame", "(", "dpt", ".", "astype", "(", "np", ".", "float32", ")", ",", "gtorig", ",", "gtcrop", ",", "M", ",", "gt3Dorig", ",", "gt3Dcrop", ",", "com3D", ",", "dptFileName", ",", "\n", "subSeqName", ",", "'left'", ",", "{", "}", ")", ")", "\n", "pbar", ".", "update", "(", "i", ")", "\n", "i", "+=", "1", "\n", "\n", "", "inputfile", ".", "close", "(", ")", "\n", "pbar", ".", "finish", "(", ")", "\n", "print", "(", "\"Loaded {} samples.\"", ".", "format", "(", "len", "(", "data", ")", ")", ")", "\n", "\n", "if", "self", ".", "useCache", ":", "\n", "            ", "print", "(", "\"Save cache data to {}\"", ".", "format", "(", "pickleCache", ")", ")", "\n", "f", "=", "open", "(", "pickleCache", ",", "'wb'", ")", "\n", "cPickle", ".", "dump", "(", "(", "seqName", ",", "data", ",", "config", ")", ",", "f", ",", "protocol", "=", "cPickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n", "# shuffle data", "\n", "", "if", "shuffle", "and", "rng", "is", "not", "None", ":", "\n", "            ", "print", "(", "\"Shuffling\"", ")", "\n", "rng", ".", "shuffle", "(", "data", ")", "\n", "", "return", "NamedImgSequence", "(", "seqName", ",", "data", ",", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.data.importers.ICVLImporter.loadBaseline": [[422, 457], ["open", "open.seek", "importers.ICVLImporter.loadBaseline.nonblank_lines"], "methods", ["None"], ["", "def", "loadBaseline", "(", "self", ",", "filename", ",", "firstName", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Load baseline data\n        :param filename: file name of data\n        :return: list with joint coordinates\n        \"\"\"", "\n", "\n", "def", "nonblank_lines", "(", "f", ")", ":", "\n", "            ", "for", "l", "in", "f", ":", "\n", "                ", "line", "=", "l", ".", "rstrip", "(", ")", "\n", "if", "line", ":", "\n", "                    ", "yield", "line", "\n", "\n", "", "", "", "inputfile", "=", "open", "(", "filename", ")", "\n", "inputfile", ".", "seek", "(", "0", ")", "\n", "\n", "if", "firstName", "==", "True", ":", "\n", "            ", "off", "=", "1", "\n", "", "else", ":", "\n", "            ", "off", "=", "0", "\n", "\n", "", "data", "=", "[", "]", "\n", "for", "line", "in", "nonblank_lines", "(", "inputfile", ")", ":", "\n", "            ", "part", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "\n", "# joints in image coordinates", "\n", "ev", "=", "np", ".", "zeros", "(", "(", "self", ".", "numJoints", ",", "3", ")", ",", "np", ".", "float32", ")", "\n", "for", "joint", "in", "range", "(", "ev", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "for", "xyz", "in", "range", "(", "0", ",", "3", ")", ":", "\n", "                    ", "ev", "[", "joint", ",", "xyz", "]", "=", "part", "[", "joint", "*", "3", "+", "xyz", "+", "off", "]", "\n", "\n", "", "", "gt3Dworld", "=", "self", ".", "jointsImgTo3D", "(", "ev", ")", "\n", "\n", "data", ".", "append", "(", "gt3Dworld", ")", "\n", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.data.importers.ICVLImporter.loadBaseline2D": [[458, 485], ["open", "open.seek", "line.split", "numpy.zeros", "range", "data.append", "range"], "methods", ["None"], ["", "def", "loadBaseline2D", "(", "self", ",", "filename", ",", "firstName", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Load baseline data\n        :param filename: file name of data\n        :return: list with joint coordinates\n        \"\"\"", "\n", "\n", "inputfile", "=", "open", "(", "filename", ")", "\n", "inputfile", ".", "seek", "(", "0", ")", "\n", "\n", "if", "firstName", "is", "True", ":", "\n", "            ", "off", "=", "1", "\n", "", "else", ":", "\n", "            ", "off", "=", "0", "\n", "\n", "", "data", "=", "[", "]", "\n", "for", "line", "in", "inputfile", ":", "\n", "            ", "part", "=", "line", ".", "split", "(", "' '", ")", "\n", "# joints in image coordinates", "\n", "ev", "=", "np", ".", "zeros", "(", "(", "self", ".", "numJoints", ",", "2", ")", ",", "np", ".", "float32", ")", "\n", "for", "joint", "in", "range", "(", "ev", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "for", "xyz", "in", "range", "(", "0", ",", "2", ")", ":", "\n", "                    ", "ev", "[", "joint", ",", "xyz", "]", "=", "part", "[", "joint", "*", "3", "+", "xyz", "+", "off", "]", "\n", "\n", "", "", "data", ".", "append", "(", "ev", ")", "\n", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.data.importers.ICVLImporter.showAnnotatedDepth": [[486, 527], ["print", "plt.figure", "plt.figure.add_subplot", "plt.figure.add_subplot.imshow", "plt.figure.add_subplot.scatter", "plt.figure.add_subplot.plot", "plt.figure.add_subplot.plot", "plt.figure.add_subplot.plot", "plt.figure.add_subplot.plot", "plt.figure.add_subplot.plot", "range", "plt.show", "numpy.hstack", "numpy.hstack", "numpy.hstack", "numpy.hstack", "numpy.hstack", "numpy.hstack", "numpy.hstack", "numpy.hstack", "int", "int", "plt.figure.add_subplot.annotate", "frame.dpt.min", "frame.dpt.max", "str", "int", "int"], "methods", ["None"], ["", "def", "showAnnotatedDepth", "(", "self", ",", "frame", ")", ":", "\n", "        ", "\"\"\"\n        Show the depth image\n        :param frame: image to show\n        :return:\n        \"\"\"", "\n", "import", "matplotlib", "\n", "import", "matplotlib", ".", "pyplot", "as", "plt", "\n", "\n", "print", "(", "\"img min {}, max {}\"", ".", "format", "(", "frame", ".", "dpt", ".", "min", "(", ")", ",", "frame", ".", "dpt", ".", "max", "(", ")", ")", ")", "\n", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "ax", "=", "fig", ".", "add_subplot", "(", "111", ")", "\n", "ax", ".", "imshow", "(", "frame", ".", "dpt", ",", "cmap", "=", "matplotlib", ".", "cm", ".", "jet", ",", "interpolation", "=", "'nearest'", ")", "\n", "ax", ".", "scatter", "(", "frame", ".", "gtcrop", "[", ":", ",", "0", "]", ",", "frame", ".", "gtcrop", "[", ":", ",", "1", "]", ")", "\n", "\n", "ax", ".", "plot", "(", "frame", ".", "gtcrop", "[", "0", ":", "4", ",", "0", "]", ",", "frame", ".", "gtcrop", "[", "0", ":", "4", ",", "1", "]", ",", "c", "=", "'r'", ")", "\n", "ax", ".", "plot", "(", "np", ".", "hstack", "(", "(", "frame", ".", "gtcrop", "[", "0", ",", "0", "]", ",", "frame", ".", "gtcrop", "[", "4", ":", "7", ",", "0", "]", ")", ")", ",", "\n", "np", ".", "hstack", "(", "(", "frame", ".", "gtcrop", "[", "0", ",", "1", "]", ",", "frame", ".", "gtcrop", "[", "4", ":", "7", ",", "1", "]", ")", ")", ",", "c", "=", "'r'", ")", "\n", "ax", ".", "plot", "(", "np", ".", "hstack", "(", "(", "frame", ".", "gtcrop", "[", "0", ",", "0", "]", ",", "frame", ".", "gtcrop", "[", "7", ":", "10", ",", "0", "]", ")", ")", ",", "\n", "np", ".", "hstack", "(", "(", "frame", ".", "gtcrop", "[", "0", ",", "1", "]", ",", "frame", ".", "gtcrop", "[", "7", ":", "10", ",", "1", "]", ")", ")", ",", "c", "=", "'r'", ")", "\n", "ax", ".", "plot", "(", "np", ".", "hstack", "(", "(", "frame", ".", "gtcrop", "[", "0", ",", "0", "]", ",", "frame", ".", "gtcrop", "[", "10", ":", "13", ",", "0", "]", ")", ")", ",", "\n", "np", ".", "hstack", "(", "(", "frame", ".", "gtcrop", "[", "0", ",", "1", "]", ",", "frame", ".", "gtcrop", "[", "10", ":", "13", ",", "1", "]", ")", ")", ",", "c", "=", "'r'", ")", "\n", "ax", ".", "plot", "(", "np", ".", "hstack", "(", "(", "frame", ".", "gtcrop", "[", "0", ",", "0", "]", ",", "frame", ".", "gtcrop", "[", "13", ":", "16", ",", "0", "]", ")", ")", ",", "\n", "np", ".", "hstack", "(", "(", "frame", ".", "gtcrop", "[", "0", ",", "1", "]", ",", "frame", ".", "gtcrop", "[", "13", ":", "16", ",", "1", "]", ")", ")", ",", "c", "=", "'r'", ")", "\n", "\n", "def", "format_coord", "(", "x", ",", "y", ")", ":", "\n", "            ", "numrows", ",", "numcols", "=", "frame", ".", "dpt", ".", "shape", "\n", "col", "=", "int", "(", "x", "+", "0.5", ")", "\n", "row", "=", "int", "(", "y", "+", "0.5", ")", "\n", "if", "col", ">=", "0", "and", "col", "<", "numcols", "and", "row", ">=", "0", "and", "row", "<", "numrows", ":", "\n", "                ", "z", "=", "frame", ".", "dpt", "[", "row", ",", "col", "]", "\n", "return", "'x=%1.4f, y=%1.4f, z=%1.4f'", "%", "(", "x", ",", "y", ",", "z", ")", "\n", "", "else", ":", "\n", "                ", "return", "'x=%1.4f, y=%1.4f'", "%", "(", "x", ",", "y", ")", "\n", "\n", "", "", "ax", ".", "format_coord", "=", "format_coord", "\n", "\n", "for", "i", "in", "range", "(", "frame", ".", "gtcrop", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "ax", ".", "annotate", "(", "str", "(", "i", ")", ",", "(", "int", "(", "frame", ".", "gtcrop", "[", "i", ",", "0", "]", ")", ",", "int", "(", "frame", ".", "gtcrop", "[", "i", ",", "1", "]", ")", ")", ")", "\n", "\n", "", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.data.importers.MSRA15Importer.__init__": [[540, 569], ["importers.DepthImporter.__init__"], "methods", ["home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.hiddenlayer.HiddenLayer.__init__"], ["def", "__init__", "(", "self", ",", "basepath", ",", "useCache", "=", "True", ",", "cacheDir", "=", "'./cache/'", ",", "refineNet", "=", "None", ",", "detectorNet", "=", "None", ",", "derotNet", "=", "None", ",", "hand", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Constructor\n        :param basepath: base path of the MSRA dataset\n        :return:\n        \"\"\"", "\n", "\n", "super", "(", "MSRA15Importer", ",", "self", ")", ".", "__init__", "(", "241.42", ",", "241.42", ",", "160.", ",", "120.", ",", "hand", ")", "# see Sun et.al.", "\n", "\n", "self", ".", "depth_map_size", "=", "(", "320", ",", "240", ")", "\n", "self", ".", "basepath", "=", "basepath", "\n", "self", ".", "useCache", "=", "useCache", "\n", "self", ".", "cacheDir", "=", "cacheDir", "\n", "self", ".", "refineNet", "=", "refineNet", "\n", "self", ".", "derotNet", "=", "derotNet", "\n", "self", ".", "detectorNet", "=", "detectorNet", "\n", "self", ".", "numJoints", "=", "21", "\n", "self", ".", "crop_joint_idx", "=", "5", "\n", "self", ".", "default_cubes", "=", "{", "'P0'", ":", "(", "200", ",", "200", ",", "200", ")", ",", "\n", "'P1'", ":", "(", "200", ",", "200", ",", "200", ")", ",", "\n", "'P2'", ":", "(", "200", ",", "200", ",", "200", ")", ",", "\n", "'P3'", ":", "(", "180", ",", "180", ",", "180", ")", ",", "\n", "'P4'", ":", "(", "180", ",", "180", ",", "180", ")", ",", "\n", "'P5'", ":", "(", "180", ",", "180", ",", "180", ")", ",", "\n", "'P6'", ":", "(", "170", ",", "170", ",", "170", ")", ",", "\n", "'P7'", ":", "(", "160", ",", "160", ",", "160", ")", ",", "\n", "'P8'", ":", "(", "150", ",", "150", ",", "150", ")", "}", "\n", "self", ".", "sides", "=", "{", "'P0'", ":", "'right'", ",", "'P1'", ":", "'right'", ",", "'P2'", ":", "'right'", ",", "'P3'", ":", "'right'", ",", "'P4'", ":", "'right'", ",", "'P5'", ":", "'right'", ",", "\n", "'P6'", ":", "'right'", ",", "'P7'", ":", "'right'", ",", "'P8'", ":", "'right'", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.data.importers.MSRA15Importer.loadDepthMap": [[570, 589], ["open", "numpy.fromfile", "numpy.zeros", "numpy.fromfile.reshape", "struct.unpack", "struct.unpack", "struct.unpack", "struct.unpack", "struct.unpack", "struct.unpack", "f.read", "f.read", "f.read", "f.read", "f.read", "f.read"], "methods", ["None"], ["", "def", "loadDepthMap", "(", "self", ",", "filename", ")", ":", "\n", "        ", "\"\"\"\n        Read a depth-map\n        :param filename: file name to load\n        :return: image data of depth image\n        \"\"\"", "\n", "with", "open", "(", "filename", ",", "'rb'", ")", "as", "f", ":", "\n", "# first 6 uint define the full image", "\n", "            ", "width", "=", "struct", ".", "unpack", "(", "'i'", ",", "f", ".", "read", "(", "4", ")", ")", "[", "0", "]", "\n", "height", "=", "struct", ".", "unpack", "(", "'i'", ",", "f", ".", "read", "(", "4", ")", ")", "[", "0", "]", "\n", "left", "=", "struct", ".", "unpack", "(", "'i'", ",", "f", ".", "read", "(", "4", ")", ")", "[", "0", "]", "\n", "top", "=", "struct", ".", "unpack", "(", "'i'", ",", "f", ".", "read", "(", "4", ")", ")", "[", "0", "]", "\n", "right", "=", "struct", ".", "unpack", "(", "'i'", ",", "f", ".", "read", "(", "4", ")", ")", "[", "0", "]", "\n", "bottom", "=", "struct", ".", "unpack", "(", "'i'", ",", "f", ".", "read", "(", "4", ")", ")", "[", "0", "]", "\n", "patch", "=", "np", ".", "fromfile", "(", "f", ",", "dtype", "=", "'float32'", ",", "sep", "=", "\"\"", ")", "\n", "imgdata", "=", "np", ".", "zeros", "(", "(", "height", ",", "width", ")", ",", "dtype", "=", "'float32'", ")", "\n", "imgdata", "[", "top", ":", "bottom", ",", "left", ":", "right", "]", "=", "patch", ".", "reshape", "(", "[", "bottom", "-", "top", ",", "right", "-", "left", "]", ")", "\n", "\n", "", "return", "imgdata", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.data.importers.MSRA15Importer.getDepthMapNV": [[590, 596], ["None"], "methods", ["None"], ["", "def", "getDepthMapNV", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Get the value of invalid depth values in the depth map\n        :return: value\n        \"\"\"", "\n", "return", "32001", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.data.importers.MSRA15Importer.loadSequence": [[597, 744], ["float", "importers.MSRA15Importer.loadRefineNetLazy", "sorted", "progressbar.ProgressBar", "progressbar.ProgressBar.start", "progressbar.ProgressBar.finish", "print", "data.basetypes.NamedImgSequence", "TypeError", "isinstance", "os.path.isfile", "print", "open", "cPickle.load", "open.close", "sum", "open", "int", "range", "open.close", "print", "open", "cPickle.dump", "open.close", "print", "rng.shuffle", "isinstance", "len", "util.handdetector.HandDetector.detectionModeToString", "util.handdetector.HandDetector.detectionModeToString", "print", "rng.shuffle", "numpy.isinf", "data.basetypes.NamedImgSequence", "data.basetypes.NamedImgSequence", "open.readline", "open.readline", "open.readline.split", "importers.MSRA15Importer.loadDepthMap", "numpy.zeros", "range", "importers.MSRA15Importer.joints3DToImg", "util.handdetector.HandDetector", "importers.MSRA15Importer.jointImgTo3D", "data.transformations.transformPoints2D", "data.append", "progressbar.ProgressBar.update", "len", "os.listdir", "os.path.isdir", "len", "progressbar.Percentage", "progressbar.Bar", "len", "str().zfill", "os.path.isfile", "print", "range", "util.handdetector.HandDetector.checkImage", "print", "util.handdetector.HandDetector.cropArea3D", "data.basetypes.DepthFrame", "os.path.join", "os.walk", "importers.MSRA15Importer.jointsImgTo3D", "print", "importers.MSRA15Importer.astype", "str"], "methods", ["home.repos.pwc.inspect_result.moberweger_deep-prior-pp.data.importers.DepthImporter.loadRefineNetLazy", "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.data.importers.NYUImporter.loadDepthMap", "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.data.importers.NYUImporter.joints3DToImg", "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.data.importers.NYUImporter.jointImgTo3D", "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.data.transformations.transformPoints2D", "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.layerparams.LayerParams.update", "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.data.importers.NYUImporter.jointsImgTo3D"], ["", "def", "loadSequence", "(", "self", ",", "seqName", ",", "subSeq", "=", "None", ",", "Nmax", "=", "float", "(", "'inf'", ")", ",", "shuffle", "=", "False", ",", "rng", "=", "None", ",", "docom", "=", "False", ",", "cube", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Load an image sequence from the dataset\n        :param seqName: sequence name, e.g. subject1\n        :param Nmax: maximum number of samples to load\n        :return: returns named image sequence\n        \"\"\"", "\n", "\n", "if", "(", "subSeq", "is", "not", "None", ")", "and", "(", "not", "isinstance", "(", "subSeq", ",", "list", ")", ")", ":", "\n", "            ", "raise", "TypeError", "(", "\"subSeq must be None or list\"", ")", "\n", "\n", "", "if", "cube", "is", "None", ":", "\n", "            ", "config", "=", "{", "'cube'", ":", "self", ".", "default_cubes", "[", "seqName", "]", "}", "\n", "", "else", ":", "\n", "            ", "assert", "isinstance", "(", "cube", ",", "tuple", ")", "\n", "assert", "len", "(", "cube", ")", "==", "3", "\n", "config", "=", "{", "'cube'", ":", "cube", "}", "\n", "\n", "", "if", "subSeq", "is", "None", ":", "\n", "            ", "pickleCache", "=", "'{}/{}_{}_{}_{}_{}_cache.pkl'", ".", "format", "(", "self", ".", "cacheDir", ",", "self", ".", "__class__", ".", "__name__", ",", "seqName", ",", "self", ".", "hand", ",", "\n", "HandDetector", ".", "detectionModeToString", "(", "docom", ",", "self", ".", "refineNet", "is", "not", "None", ")", ",", "config", "[", "'cube'", "]", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "            ", "pickleCache", "=", "'{}/{}_{}_{}_{}_{}_{}_cache.pkl'", ".", "format", "(", "self", ".", "cacheDir", ",", "self", ".", "__class__", ".", "__name__", ",", "seqName", ",", "self", ".", "hand", ",", "\n", "''", ".", "join", "(", "subSeq", ")", ",", "HandDetector", ".", "detectionModeToString", "(", "docom", ",", "self", ".", "refineNet", "is", "not", "None", ")", ",", "config", "[", "'cube'", "]", "[", "0", "]", ")", "\n", "", "if", "self", ".", "useCache", "&", "os", ".", "path", ".", "isfile", "(", "pickleCache", ")", ":", "\n", "            ", "print", "(", "\"Loading cache data from {}\"", ".", "format", "(", "pickleCache", ")", ")", "\n", "f", "=", "open", "(", "pickleCache", ",", "'rb'", ")", "\n", "(", "seqName", ",", "data", ",", "config", ")", "=", "cPickle", ".", "load", "(", "f", ")", "\n", "f", ".", "close", "(", ")", "\n", "# shuffle data", "\n", "if", "shuffle", "and", "rng", "is", "not", "None", ":", "\n", "                ", "print", "(", "\"Shuffling\"", ")", "\n", "rng", ".", "shuffle", "(", "data", ")", "\n", "", "if", "not", "(", "np", ".", "isinf", "(", "Nmax", ")", ")", ":", "\n", "                ", "return", "NamedImgSequence", "(", "seqName", ",", "data", "[", "0", ":", "Nmax", "]", ",", "config", ")", "\n", "", "else", ":", "\n", "                ", "return", "NamedImgSequence", "(", "seqName", ",", "data", ",", "config", ")", "\n", "\n", "", "", "self", ".", "loadRefineNetLazy", "(", "self", ".", "refineNet", ")", "\n", "\n", "# Load the dataset", "\n", "objdir", "=", "'{}/{}/'", ".", "format", "(", "self", ".", "basepath", ",", "seqName", ")", "\n", "subdirs", "=", "sorted", "(", "[", "name", "for", "name", "in", "os", ".", "listdir", "(", "objdir", ")", "if", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "join", "(", "objdir", ",", "name", ")", ")", "]", ")", "\n", "\n", "txt", "=", "'Loading {}'", ".", "format", "(", "seqName", ")", "\n", "nImgs", "=", "sum", "(", "[", "len", "(", "files", ")", "for", "r", ",", "d", ",", "files", "in", "os", ".", "walk", "(", "objdir", ")", "]", ")", "//", "2", "\n", "pbar", "=", "pb", ".", "ProgressBar", "(", "maxval", "=", "nImgs", ",", "widgets", "=", "[", "txt", ",", "pb", ".", "Percentage", "(", ")", ",", "pb", ".", "Bar", "(", ")", "]", ")", "\n", "pbar", ".", "start", "(", ")", "\n", "\n", "data", "=", "[", "]", "\n", "pi", "=", "0", "\n", "for", "subdir", "in", "subdirs", ":", "\n", "# check for subsequences and skip them if necessary", "\n", "            ", "subSeqName", "=", "''", "\n", "if", "subSeq", "is", "not", "None", ":", "\n", "                ", "if", "subdir", "not", "in", "subSeq", ":", "\n", "                    ", "continue", "\n", "\n", "", "subSeqName", "=", "subdir", "\n", "\n", "# iterate all subdirectories", "\n", "", "trainlabels", "=", "'{}/{}/joint.txt'", ".", "format", "(", "objdir", ",", "subdir", ")", "\n", "\n", "inputfile", "=", "open", "(", "trainlabels", ")", "\n", "# read number of samples", "\n", "nImgs", "=", "int", "(", "inputfile", ".", "readline", "(", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "nImgs", ")", ":", "\n", "# early stop", "\n", "                ", "if", "len", "(", "data", ")", ">=", "Nmax", ":", "\n", "                    ", "break", "\n", "\n", "", "line", "=", "inputfile", ".", "readline", "(", ")", "\n", "part", "=", "line", ".", "split", "(", "' '", ")", "\n", "\n", "dptFileName", "=", "'{}/{}/{}_depth.bin'", ".", "format", "(", "objdir", ",", "subdir", ",", "str", "(", "i", ")", ".", "zfill", "(", "6", ")", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "dptFileName", ")", ":", "\n", "                    ", "print", "(", "\"File {} does not exist!\"", ".", "format", "(", "dptFileName", ")", ")", "\n", "continue", "\n", "", "dpt", "=", "self", ".", "loadDepthMap", "(", "dptFileName", ")", "\n", "\n", "# joints in image coordinates", "\n", "gt3Dorig", "=", "np", ".", "zeros", "(", "(", "self", ".", "numJoints", ",", "3", ")", ",", "np", ".", "float32", ")", "\n", "for", "joint", "in", "range", "(", "gt3Dorig", ".", "shape", "[", "0", "]", ")", ":", "\n", "                    ", "for", "xyz", "in", "range", "(", "0", ",", "3", ")", ":", "\n", "                        ", "gt3Dorig", "[", "joint", ",", "xyz", "]", "=", "part", "[", "joint", "*", "3", "+", "xyz", "]", "\n", "\n", "# invert axis", "\n", "# gt3Dorig[:, 0] *= (-1.)", "\n", "# gt3Dorig[:, 1] *= (-1.)", "\n", "", "", "gt3Dorig", "[", ":", ",", "2", "]", "*=", "(", "-", "1.", ")", "\n", "\n", "# normalized joints in 3D coordinates", "\n", "gtorig", "=", "self", ".", "joints3DToImg", "(", "gt3Dorig", ")", "\n", "\n", "if", "self", ".", "hand", "is", "not", "None", ":", "\n", "                    ", "if", "self", ".", "hand", "!=", "self", ".", "sides", "[", "seqName", "]", ":", "\n", "                        ", "gtorig", "[", ":", ",", "0", "]", "-=", "dpt", ".", "shape", "[", "1", "]", "/", "2.", "\n", "gtorig", "[", ":", ",", "0", "]", "*=", "(", "-", "1", ")", "\n", "gtorig", "[", ":", ",", "0", "]", "+=", "dpt", ".", "shape", "[", "1", "]", "/", "2.", "\n", "gt3Dorig", "=", "self", ".", "jointsImgTo3D", "(", "gtorig", ")", "\n", "dpt", "=", "dpt", "[", ":", ",", ":", ":", "-", "1", "]", "\n", "\n", "# print gt3D", "\n", "# self.showAnnotatedDepth(DepthFrame(dpt,gtorig,gtorig,0,gt3Dorig,gt3Dcrop,com3D,dptFileName,'',''))", "\n", "# Detect hand", "\n", "", "", "hd", "=", "HandDetector", "(", "dpt", ",", "self", ".", "fx", ",", "self", ".", "fy", ",", "refineNet", "=", "self", ".", "refineNet", ",", "importer", "=", "self", ")", "\n", "if", "not", "hd", ".", "checkImage", "(", "1.", ")", ":", "\n", "                    ", "print", "(", "\"Skipping image {}, no content\"", ".", "format", "(", "dptFileName", ")", ")", "\n", "continue", "\n", "\n", "", "try", ":", "\n", "                    ", "dpt", ",", "M", ",", "com", "=", "hd", ".", "cropArea3D", "(", "com", "=", "gtorig", "[", "self", ".", "crop_joint_idx", "]", ",", "size", "=", "config", "[", "'cube'", "]", ",", "docom", "=", "docom", ")", "\n", "", "except", "UserWarning", ":", "\n", "                    ", "print", "(", "\"Skipping image {}, no hand detected\"", ".", "format", "(", "dptFileName", ")", ")", "\n", "continue", "\n", "\n", "", "com3D", "=", "self", ".", "jointImgTo3D", "(", "com", ")", "\n", "gt3Dcrop", "=", "gt3Dorig", "-", "com3D", "# normalize to com", "\n", "\n", "gtcrop", "=", "transformPoints2D", "(", "gtorig", ",", "M", ")", "\n", "\n", "# print(\"{}\".format(gt3Dorig))", "\n", "# self.showAnnotatedDepth(DepthFrame(dpt,gtorig,gtcrop,M,gt3Dorig,gt3Dcrop,com3D,dptFileName,'','',{}))", "\n", "\n", "data", ".", "append", "(", "DepthFrame", "(", "dpt", ".", "astype", "(", "np", ".", "float32", ")", ",", "gtorig", ",", "gtcrop", ",", "M", ",", "gt3Dorig", ",", "gt3Dcrop", ",", "com3D", ",", "\n", "dptFileName", ",", "subSeqName", ",", "self", ".", "sides", "[", "seqName", "]", ",", "{", "}", ")", ")", "\n", "pbar", ".", "update", "(", "pi", ")", "\n", "pi", "+=", "1", "\n", "\n", "", "inputfile", ".", "close", "(", ")", "\n", "\n", "", "pbar", ".", "finish", "(", ")", "\n", "print", "(", "\"Loaded {} samples.\"", ".", "format", "(", "len", "(", "data", ")", ")", ")", "\n", "\n", "if", "self", ".", "useCache", ":", "\n", "            ", "print", "(", "\"Save cache data to {}\"", ".", "format", "(", "pickleCache", ")", ")", "\n", "f", "=", "open", "(", "pickleCache", ",", "'wb'", ")", "\n", "cPickle", ".", "dump", "(", "(", "seqName", ",", "data", ",", "config", ")", ",", "f", ",", "protocol", "=", "cPickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n", "# shuffle data", "\n", "", "if", "shuffle", "and", "rng", "is", "not", "None", ":", "\n", "            ", "print", "(", "\"Shuffling\"", ")", "\n", "rng", ".", "shuffle", "(", "data", ")", "\n", "", "return", "NamedImgSequence", "(", "seqName", ",", "data", ",", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.data.importers.MSRA15Importer.jointsImgTo3D": [[745, 755], ["numpy.zeros", "xrange", "importers.MSRA15Importer.jointImgTo3D"], "methods", ["home.repos.pwc.inspect_result.moberweger_deep-prior-pp.data.importers.NYUImporter.jointImgTo3D"], ["", "def", "jointsImgTo3D", "(", "self", ",", "sample", ")", ":", "\n", "        ", "\"\"\"\n        Normalize sample to metric 3D\n        :param sample: joints in (x,y,z) with x,y in image coordinates and z in mm\n        :return: normalized joints in mm\n        \"\"\"", "\n", "ret", "=", "np", ".", "zeros", "(", "(", "sample", ".", "shape", "[", "0", "]", ",", "3", ")", ",", "np", ".", "float32", ")", "\n", "for", "i", "in", "xrange", "(", "sample", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "ret", "[", "i", "]", "=", "self", ".", "jointImgTo3D", "(", "sample", "[", "i", "]", ")", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.data.importers.MSRA15Importer.jointImgTo3D": [[756, 767], ["numpy.zeros"], "methods", ["None"], ["", "def", "jointImgTo3D", "(", "self", ",", "sample", ")", ":", "\n", "        ", "\"\"\"\n        Normalize sample to metric 3D\n        :param sample: joints in (x,y,z) with x,y in image coordinates and z in mm\n        :return: normalized joints in mm\n        \"\"\"", "\n", "ret", "=", "np", ".", "zeros", "(", "(", "3", ",", ")", ",", "np", ".", "float32", ")", "\n", "ret", "[", "0", "]", "=", "(", "sample", "[", "0", "]", "-", "self", ".", "ux", ")", "*", "sample", "[", "2", "]", "/", "self", ".", "fx", "\n", "ret", "[", "1", "]", "=", "(", "self", ".", "uy", "-", "sample", "[", "1", "]", ")", "*", "sample", "[", "2", "]", "/", "self", ".", "fy", "\n", "ret", "[", "2", "]", "=", "sample", "[", "2", "]", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.data.importers.MSRA15Importer.joints3DToImg": [[768, 778], ["numpy.zeros", "xrange", "importers.MSRA15Importer.joint3DToImg"], "methods", ["home.repos.pwc.inspect_result.moberweger_deep-prior-pp.data.importers.NYUImporter.joint3DToImg"], ["", "def", "joints3DToImg", "(", "self", ",", "sample", ")", ":", "\n", "        ", "\"\"\"\n        Denormalize sample from metric 3D to image coordinates\n        :param sample: joints in (x,y,z) with x,y and z in mm\n        :return: joints in (x,y,z) with x,y in image coordinates and z in mm\n        \"\"\"", "\n", "ret", "=", "np", ".", "zeros", "(", "(", "sample", ".", "shape", "[", "0", "]", ",", "3", ")", ",", "np", ".", "float32", ")", "\n", "for", "i", "in", "xrange", "(", "sample", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "ret", "[", "i", "]", "=", "self", ".", "joint3DToImg", "(", "sample", "[", "i", "]", ")", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.data.importers.MSRA15Importer.joint3DToImg": [[779, 794], ["numpy.zeros"], "methods", ["None"], ["", "def", "joint3DToImg", "(", "self", ",", "sample", ")", ":", "\n", "        ", "\"\"\"\n        Denormalize sample from metric 3D to image coordinates\n        :param sample: joints in (x,y,z) with x,y and z in mm\n        :return: joints in (x,y,z) with x,y in image coordinates and z in mm\n        \"\"\"", "\n", "ret", "=", "np", ".", "zeros", "(", "(", "3", ",", ")", ",", "np", ".", "float32", ")", "\n", "if", "sample", "[", "2", "]", "==", "0.", ":", "\n", "            ", "ret", "[", "0", "]", "=", "self", ".", "ux", "\n", "ret", "[", "1", "]", "=", "self", ".", "uy", "\n", "return", "ret", "\n", "", "ret", "[", "0", "]", "=", "sample", "[", "0", "]", "/", "sample", "[", "2", "]", "*", "self", ".", "fx", "+", "self", ".", "ux", "\n", "ret", "[", "1", "]", "=", "self", ".", "uy", "-", "sample", "[", "1", "]", "/", "sample", "[", "2", "]", "*", "self", ".", "fy", "\n", "ret", "[", "2", "]", "=", "sample", "[", "2", "]", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.data.importers.MSRA15Importer.getCameraIntrinsics": [[795, 807], ["numpy.zeros"], "methods", ["None"], ["", "def", "getCameraIntrinsics", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Get intrinsic camera matrix\n        :return: 3x3 intrinsic camera matrix\n        \"\"\"", "\n", "ret", "=", "np", ".", "zeros", "(", "(", "3", ",", "3", ")", ",", "np", ".", "float32", ")", "\n", "ret", "[", "0", ",", "0", "]", "=", "self", ".", "fx", "\n", "ret", "[", "1", ",", "1", "]", "=", "-", "self", ".", "fy", "\n", "ret", "[", "2", ",", "2", "]", "=", "1", "\n", "ret", "[", "0", ",", "2", "]", "=", "self", ".", "ux", "\n", "ret", "[", "1", ",", "2", "]", "=", "self", ".", "uy", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.data.importers.MSRA15Importer.getCameraProjection": [[808, 821], ["numpy.zeros"], "methods", ["None"], ["", "def", "getCameraProjection", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Get homogenous camera projection matrix\n        :return: 4x4 camera projection matrix\n        \"\"\"", "\n", "ret", "=", "np", ".", "zeros", "(", "(", "4", ",", "4", ")", ",", "np", ".", "float32", ")", "\n", "ret", "[", "0", ",", "0", "]", "=", "self", ".", "fx", "\n", "ret", "[", "1", ",", "1", "]", "=", "-", "self", ".", "fy", "\n", "ret", "[", "2", ",", "2", "]", "=", "1.", "\n", "ret", "[", "0", ",", "2", "]", "=", "self", ".", "ux", "\n", "ret", "[", "1", ",", "2", "]", "=", "self", ".", "uy", "\n", "ret", "[", "3", ",", "2", "]", "=", "1.", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.data.importers.MSRA15Importer.showAnnotatedDepth": [[822, 858], ["print", "plt.figure", "plt.figure.add_subplot", "plt.figure.add_subplot.imshow", "plt.figure.add_subplot.scatter", "plt.figure.add_subplot.plot", "plt.figure.add_subplot.plot", "plt.figure.add_subplot.plot", "plt.figure.add_subplot.plot", "plt.figure.add_subplot.plot", "range", "plt.show", "numpy.hstack", "numpy.hstack", "numpy.hstack", "numpy.hstack", "numpy.hstack", "numpy.hstack", "numpy.hstack", "numpy.hstack", "int", "int", "plt.figure.add_subplot.annotate", "frame.dpt.min", "frame.dpt.max", "str", "int", "int"], "methods", ["None"], ["", "def", "showAnnotatedDepth", "(", "self", ",", "frame", ")", ":", "\n", "        ", "\"\"\"\n        Show the depth image\n        :param frame: image to show\n        :return:\n        \"\"\"", "\n", "import", "matplotlib", "\n", "import", "matplotlib", ".", "pyplot", "as", "plt", "\n", "\n", "print", "(", "\"img min {}, max {}\"", ".", "format", "(", "frame", ".", "dpt", ".", "min", "(", ")", ",", "frame", ".", "dpt", ".", "max", "(", ")", ")", ")", "\n", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "ax", "=", "fig", ".", "add_subplot", "(", "111", ")", "\n", "ax", ".", "imshow", "(", "frame", ".", "dpt", ",", "cmap", "=", "matplotlib", ".", "cm", ".", "jet", ",", "interpolation", "=", "'nearest'", ")", "\n", "ax", ".", "scatter", "(", "frame", ".", "gtcrop", "[", ":", ",", "0", "]", ",", "frame", ".", "gtcrop", "[", ":", ",", "1", "]", ")", "\n", "\n", "ax", ".", "plot", "(", "frame", ".", "gtcrop", "[", "0", ":", "5", ",", "0", "]", ",", "frame", ".", "gtcrop", "[", "0", ":", "5", ",", "1", "]", ",", "c", "=", "'r'", ")", "\n", "ax", ".", "plot", "(", "np", ".", "hstack", "(", "(", "frame", ".", "gtcrop", "[", "0", ",", "0", "]", ",", "frame", ".", "gtcrop", "[", "5", ":", "9", ",", "0", "]", ")", ")", ",", "np", ".", "hstack", "(", "(", "frame", ".", "gtcrop", "[", "0", ",", "1", "]", ",", "frame", ".", "gtcrop", "[", "5", ":", "9", ",", "1", "]", ")", ")", ",", "c", "=", "'r'", ")", "\n", "ax", ".", "plot", "(", "np", ".", "hstack", "(", "(", "frame", ".", "gtcrop", "[", "0", ",", "0", "]", ",", "frame", ".", "gtcrop", "[", "9", ":", "13", ",", "0", "]", ")", ")", ",", "np", ".", "hstack", "(", "(", "frame", ".", "gtcrop", "[", "0", ",", "1", "]", ",", "frame", ".", "gtcrop", "[", "9", ":", "13", ",", "1", "]", ")", ")", ",", "c", "=", "'r'", ")", "\n", "ax", ".", "plot", "(", "np", ".", "hstack", "(", "(", "frame", ".", "gtcrop", "[", "0", ",", "0", "]", ",", "frame", ".", "gtcrop", "[", "13", ":", "17", ",", "0", "]", ")", ")", ",", "np", ".", "hstack", "(", "(", "frame", ".", "gtcrop", "[", "0", ",", "1", "]", ",", "frame", ".", "gtcrop", "[", "13", ":", "17", ",", "1", "]", ")", ")", ",", "c", "=", "'r'", ")", "\n", "ax", ".", "plot", "(", "np", ".", "hstack", "(", "(", "frame", ".", "gtcrop", "[", "0", ",", "0", "]", ",", "frame", ".", "gtcrop", "[", "17", ":", "21", ",", "0", "]", ")", ")", ",", "np", ".", "hstack", "(", "(", "frame", ".", "gtcrop", "[", "0", ",", "1", "]", ",", "frame", ".", "gtcrop", "[", "17", ":", "21", ",", "1", "]", ")", ")", ",", "c", "=", "'r'", ")", "\n", "\n", "def", "format_coord", "(", "x", ",", "y", ")", ":", "\n", "            ", "numrows", ",", "numcols", "=", "frame", ".", "dpt", ".", "shape", "\n", "col", "=", "int", "(", "x", "+", "0.5", ")", "\n", "row", "=", "int", "(", "y", "+", "0.5", ")", "\n", "if", "0", "<=", "col", "<", "numcols", "and", "0", "<=", "row", "<", "numrows", ":", "\n", "                ", "z", "=", "frame", ".", "dpt", "[", "row", ",", "col", "]", "\n", "return", "'x=%1.4f, y=%1.4f, z=%1.4f'", "%", "(", "x", ",", "y", ",", "z", ")", "\n", "", "else", ":", "\n", "                ", "return", "'x=%1.4f, y=%1.4f'", "%", "(", "x", ",", "y", ")", "\n", "", "", "ax", ".", "format_coord", "=", "format_coord", "\n", "\n", "for", "i", "in", "range", "(", "frame", ".", "gtcrop", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "ax", ".", "annotate", "(", "str", "(", "i", ")", ",", "(", "int", "(", "frame", ".", "gtcrop", "[", "i", ",", "0", "]", ")", ",", "int", "(", "frame", ".", "gtcrop", "[", "i", ",", "1", "]", ")", ")", ")", "\n", "\n", "", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.data.importers.MSRA15Importer.depthToPCL": [[859, 877], ["numpy.asarray().transpose", "numpy.concatenate", "numpy.column_stack", "numpy.dot", "numpy.asarray", "numpy.ones", "numpy.linalg.inv", "numpy.where", "numpy.asarray", "numpy.isclose", "numpy.isclose"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "depthToPCL", "(", "dpt", ",", "T", ",", "background_val", "=", "0.", ")", ":", "\n", "\n", "# get valid points and transform", "\n", "        ", "pts", "=", "np", ".", "asarray", "(", "np", ".", "where", "(", "~", "np", ".", "isclose", "(", "dpt", ",", "background_val", ")", ")", ")", ".", "transpose", "(", ")", "\n", "pts", "=", "np", ".", "concatenate", "(", "[", "pts", "[", ":", ",", "[", "1", ",", "0", "]", "]", "+", "0.5", ",", "np", ".", "ones", "(", "(", "pts", ".", "shape", "[", "0", "]", ",", "1", ")", ",", "dtype", "=", "'float32'", ")", "]", ",", "axis", "=", "1", ")", "\n", "pts", "=", "np", ".", "dot", "(", "np", ".", "linalg", ".", "inv", "(", "np", ".", "asarray", "(", "T", ")", ")", ",", "pts", ".", "T", ")", ".", "T", "\n", "pts", "=", "(", "pts", "[", ":", ",", "0", ":", "2", "]", "/", "pts", "[", ":", ",", "2", "]", "[", ":", ",", "None", "]", ")", ".", "reshape", "(", "(", "pts", ".", "shape", "[", "0", "]", ",", "2", ")", ")", "\n", "\n", "# replace the invalid data", "\n", "depth", "=", "dpt", "[", "(", "~", "np", ".", "isclose", "(", "dpt", ",", "background_val", ")", ")", "]", "\n", "\n", "# get x and y data in a vectorized way", "\n", "row", "=", "(", "pts", "[", ":", ",", "0", "]", "-", "160.", ")", "/", "241.42", "*", "depth", "\n", "col", "=", "(", "120.", "-", "pts", "[", ":", ",", "1", "]", ")", "/", "241.42", "*", "depth", "\n", "\n", "# combine x,y,depth", "\n", "return", "np", ".", "column_stack", "(", "(", "row", ",", "col", ",", "depth", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.data.importers.NYUImporter.__init__": [[883, 916], ["importers.DepthImporter.__init__"], "methods", ["home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.hiddenlayer.HiddenLayer.__init__"], ["def", "__init__", "(", "self", ",", "basepath", ",", "useCache", "=", "True", ",", "cacheDir", "=", "'./cache/'", ",", "refineNet", "=", "None", ",", "\n", "allJoints", "=", "False", ",", "hand", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Constructor\n        :param basepath: base path of the ICVL dataset\n        :return:\n        \"\"\"", "\n", "\n", "super", "(", "NYUImporter", ",", "self", ")", ".", "__init__", "(", "588.03", ",", "587.07", ",", "320.", ",", "240.", ",", "hand", ")", "\n", "\n", "self", ".", "depth_map_size", "=", "(", "640", ",", "480", ")", "\n", "self", ".", "basepath", "=", "basepath", "\n", "self", ".", "useCache", "=", "useCache", "\n", "self", ".", "cacheDir", "=", "cacheDir", "\n", "self", ".", "allJoints", "=", "allJoints", "\n", "self", ".", "numJoints", "=", "36", "\n", "if", "self", ".", "allJoints", ":", "\n", "            ", "self", ".", "crop_joint_idx", "=", "32", "\n", "", "else", ":", "\n", "            ", "self", ".", "crop_joint_idx", "=", "13", "\n", "", "self", ".", "default_cubes", "=", "{", "'train'", ":", "(", "300", ",", "300", ",", "300", ")", ",", "\n", "'test_1'", ":", "(", "300", ",", "300", ",", "300", ")", ",", "\n", "'test_2'", ":", "(", "250", ",", "250", ",", "250", ")", ",", "\n", "'test'", ":", "(", "300", ",", "300", ",", "300", ")", ",", "\n", "'train_synth'", ":", "(", "300", ",", "300", ",", "300", ")", ",", "\n", "'test_synth_1'", ":", "(", "300", ",", "300", ",", "300", ")", ",", "\n", "'test_synth_2'", ":", "(", "250", ",", "250", ",", "250", ")", ",", "\n", "'test_synth'", ":", "(", "300", ",", "300", ",", "300", ")", "}", "\n", "self", ".", "sides", "=", "{", "'train'", ":", "'right'", ",", "'test_1'", ":", "'right'", ",", "'test_2'", ":", "'right'", ",", "'test'", ":", "'right'", ",", "'train_synth'", ":", "'right'", ",", "\n", "'test_synth_1'", ":", "'right'", ",", "'test_synth_2'", ":", "'right'", ",", "'test_synth'", ":", "'right'", "}", "\n", "# joint indices used for evaluation of Tompson et al.", "\n", "self", ".", "restrictedJointsEval", "=", "[", "0", ",", "3", ",", "6", ",", "9", ",", "12", ",", "15", ",", "18", ",", "21", ",", "24", ",", "25", ",", "27", ",", "30", ",", "31", ",", "32", "]", "\n", "self", ".", "refineNet", "=", "refineNet", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.data.importers.NYUImporter.loadDepthMap": [[917, 935], ["PIL.Image.open", "PIL.Image.open.split", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.bitwise_or", "numpy.asarray", "len", "numpy.left_shift", "PIL.Image.open.getbands"], "methods", ["None"], ["", "def", "loadDepthMap", "(", "self", ",", "filename", ")", ":", "\n", "        ", "\"\"\"\n        Read a depth-map\n        :param filename: file name to load\n        :return: image data of depth image\n        \"\"\"", "\n", "\n", "img", "=", "Image", ".", "open", "(", "filename", ")", "\n", "# top 8 bits of depth are packed into green channel and lower 8 bits into blue", "\n", "assert", "len", "(", "img", ".", "getbands", "(", ")", ")", "==", "3", "\n", "r", ",", "g", ",", "b", "=", "img", ".", "split", "(", ")", "\n", "r", "=", "np", ".", "asarray", "(", "r", ",", "np", ".", "int32", ")", "\n", "g", "=", "np", ".", "asarray", "(", "g", ",", "np", ".", "int32", ")", "\n", "b", "=", "np", ".", "asarray", "(", "b", ",", "np", ".", "int32", ")", "\n", "dpt", "=", "np", ".", "bitwise_or", "(", "np", ".", "left_shift", "(", "g", ",", "8", ")", ",", "b", ")", "\n", "imgdata", "=", "np", ".", "asarray", "(", "dpt", ",", "np", ".", "float32", ")", "\n", "\n", "return", "imgdata", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.data.importers.NYUImporter.getDepthMapNV": [[936, 942], ["None"], "methods", ["None"], ["", "def", "getDepthMapNV", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Get the value of invalid depth values in the depth map\n        :return: value\n        \"\"\"", "\n", "return", "32001", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.data.importers.NYUImporter.loadSequence": [[943, 1078], ["float", "importers.NYUImporter.loadRefineNetLazy", "scipy.io.loadmat", "len", "progressbar.ProgressBar", "progressbar.ProgressBar.start", "range", "progressbar.ProgressBar.finish", "print", "data.basetypes.NamedImgSequence", "isinstance", "util.handdetector.HandDetector.detectionModeToString", "os.path.isfile", "numpy.arange", "importers.NYUImporter.loadDepthMap", "numpy.zeros", "range", "numpy.zeros", "range", "util.handdetector.HandDetector", "importers.NYUImporter.jointImgTo3D", "data.transformations.transformPoints2D", "data.append", "progressbar.ProgressBar.update", "print", "open", "cPickle.dump", "open.close", "print", "rng.shuffle", "len", "print", "open", "cPickle.load", "open.close", "os.path.isfile", "print", "util.handdetector.HandDetector.checkImage", "print", "util.handdetector.HandDetector.cropArea3D", "data.basetypes.DepthFrame", "len", "len", "print", "rng.shuffle", "numpy.isinf", "data.basetypes.NamedImgSequence", "data.basetypes.NamedImgSequence", "progressbar.Percentage", "progressbar.Bar", "NotImplementedError", "print", "importers.NYUImporter.astype"], "methods", ["home.repos.pwc.inspect_result.moberweger_deep-prior-pp.data.importers.DepthImporter.loadRefineNetLazy", "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.data.importers.NYUImporter.loadDepthMap", "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.data.importers.NYUImporter.jointImgTo3D", "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.data.transformations.transformPoints2D", "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.layerparams.LayerParams.update"], ["", "def", "loadSequence", "(", "self", ",", "seqName", ",", "Nmax", "=", "float", "(", "'inf'", ")", ",", "shuffle", "=", "False", ",", "rng", "=", "None", ",", "docom", "=", "False", ",", "cube", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Load an image sequence from the dataset\n        :param seqName: sequence name, e.g. train\n        :param Nmax: maximum number of samples to load\n        :return: returns named image sequence\n        \"\"\"", "\n", "if", "cube", "is", "None", ":", "\n", "            ", "config", "=", "{", "'cube'", ":", "self", ".", "default_cubes", "[", "seqName", "]", "}", "\n", "", "else", ":", "\n", "            ", "assert", "isinstance", "(", "cube", ",", "tuple", ")", "\n", "assert", "len", "(", "cube", ")", "==", "3", "\n", "config", "=", "{", "'cube'", ":", "cube", "}", "\n", "\n", "", "pickleCache", "=", "'{}/{}_{}_{}_{}_{}_{}__cache.pkl'", ".", "format", "(", "self", ".", "cacheDir", ",", "self", ".", "__class__", ".", "__name__", ",", "seqName", ",", "\n", "self", ".", "hand", ",", "self", ".", "allJoints", ",", "\n", "HandDetector", ".", "detectionModeToString", "(", "docom", ",", "self", ".", "refineNet", "is", "not", "None", ")", ",", "config", "[", "'cube'", "]", "[", "0", "]", ")", "\n", "if", "self", ".", "useCache", ":", "\n", "            ", "if", "os", ".", "path", ".", "isfile", "(", "pickleCache", ")", ":", "\n", "                ", "print", "(", "\"Loading cache data from {}\"", ".", "format", "(", "pickleCache", ")", ")", "\n", "f", "=", "open", "(", "pickleCache", ",", "'rb'", ")", "\n", "(", "seqName", ",", "data", ",", "config", ")", "=", "cPickle", ".", "load", "(", "f", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n", "# shuffle data", "\n", "if", "shuffle", "and", "rng", "is", "not", "None", ":", "\n", "                    ", "print", "(", "\"Shuffling\"", ")", "\n", "rng", ".", "shuffle", "(", "data", ")", "\n", "", "if", "not", "(", "np", ".", "isinf", "(", "Nmax", ")", ")", ":", "\n", "                    ", "return", "NamedImgSequence", "(", "seqName", ",", "data", "[", "0", ":", "Nmax", "]", ",", "config", ")", "\n", "", "else", ":", "\n", "                    ", "return", "NamedImgSequence", "(", "seqName", ",", "data", ",", "config", ")", "\n", "\n", "", "", "", "self", ".", "loadRefineNetLazy", "(", "self", ".", "refineNet", ")", "\n", "\n", "# Load the dataset", "\n", "objdir", "=", "'{}/{}/'", ".", "format", "(", "self", ".", "basepath", ",", "seqName", ")", "\n", "trainlabels", "=", "'{}/{}/joint_data.mat'", ".", "format", "(", "self", ".", "basepath", ",", "seqName", ")", "\n", "\n", "mat", "=", "scipy", ".", "io", ".", "loadmat", "(", "trainlabels", ")", "\n", "joints3D", "=", "mat", "[", "'joint_xyz'", "]", "[", "0", "]", "\n", "joints2D", "=", "mat", "[", "'joint_uvd'", "]", "[", "0", "]", "\n", "if", "self", ".", "allJoints", ":", "\n", "            ", "eval_idxs", "=", "np", ".", "arange", "(", "36", ")", "\n", "", "else", ":", "\n", "            ", "eval_idxs", "=", "self", ".", "restrictedJointsEval", "\n", "\n", "", "self", ".", "numJoints", "=", "len", "(", "eval_idxs", ")", "\n", "\n", "txt", "=", "'Loading {}'", ".", "format", "(", "seqName", ")", "\n", "pbar", "=", "pb", ".", "ProgressBar", "(", "maxval", "=", "joints3D", ".", "shape", "[", "0", "]", ",", "widgets", "=", "[", "txt", ",", "pb", ".", "Percentage", "(", ")", ",", "pb", ".", "Bar", "(", ")", "]", ")", "\n", "pbar", ".", "start", "(", ")", "\n", "\n", "data", "=", "[", "]", "\n", "i", "=", "0", "\n", "for", "line", "in", "range", "(", "joints3D", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "dptFileName", "=", "'{0:s}/depth_1_{1:07d}.png'", ".", "format", "(", "objdir", ",", "line", "+", "1", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "dptFileName", ")", ":", "\n", "                ", "print", "(", "\"File {} does not exist!\"", ".", "format", "(", "dptFileName", ")", ")", "\n", "i", "+=", "1", "\n", "continue", "\n", "", "dpt", "=", "self", ".", "loadDepthMap", "(", "dptFileName", ")", "\n", "if", "self", ".", "hand", "is", "not", "None", ":", "\n", "                ", "if", "self", ".", "hand", "!=", "self", ".", "sides", "[", "seqName", "]", ":", "\n", "                    ", "raise", "NotImplementedError", "(", ")", "\n", "dpt", "=", "dpt", "[", ":", ",", ":", ":", "-", "1", "]", "\n", "\n", "# joints in image coordinates", "\n", "", "", "gtorig", "=", "np", ".", "zeros", "(", "(", "self", ".", "numJoints", ",", "3", ")", ",", "np", ".", "float32", ")", "\n", "jt", "=", "0", "\n", "for", "ii", "in", "range", "(", "joints2D", ".", "shape", "[", "1", "]", ")", ":", "\n", "                ", "if", "ii", "not", "in", "eval_idxs", ":", "\n", "                    ", "continue", "\n", "", "gtorig", "[", "jt", ",", "0", "]", "=", "joints2D", "[", "line", ",", "ii", ",", "0", "]", "\n", "gtorig", "[", "jt", ",", "1", "]", "=", "joints2D", "[", "line", ",", "ii", ",", "1", "]", "\n", "gtorig", "[", "jt", ",", "2", "]", "=", "joints2D", "[", "line", ",", "ii", ",", "2", "]", "\n", "jt", "+=", "1", "\n", "\n", "# normalized joints in 3D coordinates", "\n", "", "gt3Dorig", "=", "np", ".", "zeros", "(", "(", "self", ".", "numJoints", ",", "3", ")", ",", "np", ".", "float32", ")", "\n", "jt", "=", "0", "\n", "for", "jj", "in", "range", "(", "joints3D", ".", "shape", "[", "1", "]", ")", ":", "\n", "                ", "if", "jj", "not", "in", "eval_idxs", ":", "\n", "                    ", "continue", "\n", "", "gt3Dorig", "[", "jt", ",", "0", "]", "=", "joints3D", "[", "line", ",", "jj", ",", "0", "]", "\n", "gt3Dorig", "[", "jt", ",", "1", "]", "=", "joints3D", "[", "line", ",", "jj", ",", "1", "]", "\n", "gt3Dorig", "[", "jt", ",", "2", "]", "=", "joints3D", "[", "line", ",", "jj", ",", "2", "]", "\n", "jt", "+=", "1", "\n", "# print gt3D", "\n", "# self.showAnnotatedDepth(DepthFrame(dpt,gtorig,gtorig,0,gt3Dorig,gt3Dorig,0,dptFileName,'',''))", "\n", "\n", "# Detect hand", "\n", "", "hd", "=", "HandDetector", "(", "dpt", ",", "self", ".", "fx", ",", "self", ".", "fy", ",", "refineNet", "=", "self", ".", "refineNet", ",", "importer", "=", "self", ")", "\n", "if", "not", "hd", ".", "checkImage", "(", "1", ")", ":", "\n", "                ", "print", "(", "\"Skipping image {}, no content\"", ".", "format", "(", "dptFileName", ")", ")", "\n", "i", "+=", "1", "\n", "continue", "\n", "", "try", ":", "\n", "                ", "dpt", ",", "M", ",", "com", "=", "hd", ".", "cropArea3D", "(", "com", "=", "gtorig", "[", "self", ".", "crop_joint_idx", "]", ",", "size", "=", "config", "[", "'cube'", "]", ",", "docom", "=", "docom", ")", "\n", "", "except", "UserWarning", ":", "\n", "                ", "print", "(", "\"Skipping image {}, no hand detected\"", ".", "format", "(", "dptFileName", ")", ")", "\n", "i", "+=", "1", "\n", "continue", "\n", "\n", "", "com3D", "=", "self", ".", "jointImgTo3D", "(", "com", ")", "\n", "gt3Dcrop", "=", "gt3Dorig", "-", "com3D", "# normalize to com", "\n", "gtcrop", "=", "transformPoints2D", "(", "gtorig", ",", "M", ")", "\n", "\n", "# print(\"{}\".format(gt3Dorig))", "\n", "# self.showAnnotatedDepth(DepthFrame(dpt,gtorig,gtcrop,M,gt3Dorig,gt3Dcrop,com3D,dptFileName,'','',{}))", "\n", "\n", "data", ".", "append", "(", "DepthFrame", "(", "dpt", ".", "astype", "(", "np", ".", "float32", ")", ",", "gtorig", ",", "gtcrop", ",", "M", ",", "gt3Dorig", ",", "gt3Dcrop", ",", "com3D", ",", "dptFileName", ",", "\n", "''", ",", "self", ".", "sides", "[", "seqName", "]", ",", "{", "}", ")", ")", "\n", "pbar", ".", "update", "(", "i", ")", "\n", "i", "+=", "1", "\n", "\n", "# early stop", "\n", "if", "len", "(", "data", ")", ">=", "Nmax", ":", "\n", "                ", "break", "\n", "\n", "", "", "pbar", ".", "finish", "(", ")", "\n", "print", "(", "\"Loaded {} samples.\"", ".", "format", "(", "len", "(", "data", ")", ")", ")", "\n", "\n", "if", "self", ".", "useCache", ":", "\n", "            ", "print", "(", "\"Save cache data to {}\"", ".", "format", "(", "pickleCache", ")", ")", "\n", "f", "=", "open", "(", "pickleCache", ",", "'wb'", ")", "\n", "cPickle", ".", "dump", "(", "(", "seqName", ",", "data", ",", "config", ")", ",", "f", ",", "protocol", "=", "cPickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n", "# shuffle data", "\n", "", "if", "shuffle", "and", "rng", "is", "not", "None", ":", "\n", "            ", "print", "(", "\"Shuffling\"", ")", "\n", "rng", ".", "shuffle", "(", "data", ")", "\n", "", "return", "NamedImgSequence", "(", "seqName", ",", "data", ",", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.data.importers.NYUImporter.loadBaseline": [[1079, 1146], ["scipy.io.loadmat", "range", "open", "open.seek", "importers.NYUImporter.loadBaseline.nonblank_lines"], "methods", ["None"], ["", "def", "loadBaseline", "(", "self", ",", "filename", ",", "gt", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Load baseline data\n        :param filename: file name of data\n        :return: list with joint coordinates\n        \"\"\"", "\n", "\n", "if", "gt", "is", "not", "None", ":", "\n", "            ", "mat", "=", "scipy", ".", "io", ".", "loadmat", "(", "filename", ")", "\n", "names", "=", "mat", "[", "'conv_joint_names'", "]", "[", "0", "]", "\n", "joints", "=", "mat", "[", "'pred_joint_uvconf'", "]", "[", "0", "]", "\n", "\n", "self", ".", "numJoints", "=", "names", ".", "shape", "[", "0", "]", "\n", "\n", "data", "=", "[", "]", "\n", "for", "dat", "in", "range", "(", "min", "(", "joints", ".", "shape", "[", "0", "]", ",", "gt", ".", "shape", "[", "0", "]", ")", ")", ":", "\n", "                ", "fname", "=", "'{0:s}/depth_1_{1:07d}.png'", ".", "format", "(", "os", ".", "path", ".", "split", "(", "filename", ")", "[", "0", "]", ",", "dat", "+", "1", ")", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "fname", ")", ":", "\n", "                    ", "continue", "\n", "", "dm", "=", "self", ".", "loadDepthMap", "(", "fname", ")", "\n", "# joints in image coordinates", "\n", "ev", "=", "np", ".", "zeros", "(", "(", "self", ".", "numJoints", ",", "3", ")", ",", "np", ".", "float32", ")", "\n", "jt", "=", "0", "\n", "for", "i", "in", "range", "(", "joints", ".", "shape", "[", "1", "]", ")", ":", "\n", "                    ", "if", "np", ".", "count_nonzero", "(", "joints", "[", "dat", ",", "i", ",", ":", "]", ")", "==", "0", ":", "\n", "                        ", "continue", "\n", "", "ev", "[", "jt", ",", "0", "]", "=", "joints", "[", "dat", ",", "i", ",", "0", "]", "\n", "ev", "[", "jt", ",", "1", "]", "=", "joints", "[", "dat", ",", "i", ",", "1", "]", "\n", "ev", "[", "jt", ",", "2", "]", "=", "dm", "[", "int", "(", "ev", "[", "jt", ",", "1", "]", ")", ",", "int", "(", "ev", "[", "jt", ",", "0", "]", ")", "]", "\n", "jt", "+=", "1", "\n", "\n", "", "for", "jt", "in", "range", "(", "ev", ".", "shape", "[", "0", "]", ")", ":", "\n", "#if ev[jt,2] == 2001. or ev[jt,2] == 0.:", "\n", "                    ", "if", "abs", "(", "ev", "[", "jt", ",", "2", "]", "-", "gt", "[", "dat", ",", "13", ",", "2", "]", ")", ">", "150.", ":", "\n", "                        ", "ev", "[", "jt", ",", "2", "]", "=", "gt", "[", "dat", ",", "jt", ",", "2", "]", "#np.clip(ev[jt,2],gt[dat,13,2]-150.,gt[dat,13,2]+150.) # set to groundtruth if unknown", "\n", "\n", "", "", "ev3D", "=", "self", ".", "jointsImgTo3D", "(", "ev", ")", "\n", "data", ".", "append", "(", "ev3D", ")", "\n", "\n", "", "return", "data", "\n", "", "else", ":", "\n", "\n", "            ", "def", "nonblank_lines", "(", "f", ")", ":", "\n", "                ", "for", "l", "in", "f", ":", "\n", "                    ", "line", "=", "l", ".", "rstrip", "(", ")", "\n", "if", "line", ":", "\n", "                        ", "yield", "line", "\n", "\n", "", "", "", "inputfile", "=", "open", "(", "filename", ")", "\n", "# first line specifies the number of 3D joints", "\n", "self", ".", "numJoints", "=", "len", "(", "inputfile", ".", "readline", "(", ")", ".", "split", "(", "' '", ")", ")", "/", "3", "\n", "inputfile", ".", "seek", "(", "0", ")", "\n", "\n", "data", "=", "[", "]", "\n", "for", "line", "in", "nonblank_lines", "(", "inputfile", ")", ":", "\n", "                ", "part", "=", "line", ".", "split", "(", "' '", ")", "\n", "# joints in image coordinates", "\n", "ev", "=", "np", ".", "zeros", "(", "(", "self", ".", "numJoints", ",", "3", ")", ",", "np", ".", "float32", ")", "\n", "for", "joint", "in", "range", "(", "ev", ".", "shape", "[", "0", "]", ")", ":", "\n", "                    ", "for", "xyz", "in", "range", "(", "0", ",", "3", ")", ":", "\n", "                        ", "ev", "[", "joint", ",", "xyz", "]", "=", "part", "[", "joint", "*", "3", "+", "xyz", "]", "\n", "\n", "", "", "gt3Dworld", "=", "self", ".", "jointsImgTo3D", "(", "ev", ")", "\n", "\n", "data", ".", "append", "(", "gt3Dworld", ")", "\n", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.data.importers.NYUImporter.loadBaseline2D": [[1147, 1175], ["scipy.io.loadmat", "range", "numpy.zeros", "range", "data.append", "numpy.count_nonzero"], "methods", ["None"], ["", "", "def", "loadBaseline2D", "(", "self", ",", "filename", ")", ":", "\n", "        ", "\"\"\"\n        Load baseline data\n        :param filename: file name of data\n        :return: list with joint coordinates\n        \"\"\"", "\n", "\n", "mat", "=", "scipy", ".", "io", ".", "loadmat", "(", "filename", ")", "\n", "names", "=", "mat", "[", "'conv_joint_names'", "]", "[", "0", "]", "\n", "joints", "=", "mat", "[", "'pred_joint_uvconf'", "]", "[", "0", "]", "\n", "\n", "self", ".", "numJoints", "=", "names", ".", "shape", "[", "0", "]", "\n", "\n", "data", "=", "[", "]", "\n", "for", "dat", "in", "range", "(", "joints", ".", "shape", "[", "0", "]", ")", ":", "\n", "# joints in image coordinates", "\n", "            ", "ev", "=", "np", ".", "zeros", "(", "(", "self", ".", "numJoints", ",", "2", ")", ",", "np", ".", "float32", ")", "\n", "jt", "=", "0", "\n", "for", "i", "in", "range", "(", "joints", ".", "shape", "[", "1", "]", ")", ":", "\n", "                ", "if", "np", ".", "count_nonzero", "(", "joints", "[", "dat", ",", "i", ",", ":", "]", ")", "==", "0", ":", "\n", "                    ", "continue", "\n", "", "ev", "[", "jt", ",", "0", "]", "=", "joints", "[", "dat", ",", "i", ",", "0", "]", "\n", "ev", "[", "jt", ",", "1", "]", "=", "joints", "[", "dat", ",", "i", ",", "1", "]", "\n", "jt", "+=", "1", "\n", "\n", "", "data", ".", "append", "(", "ev", ")", "\n", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.data.importers.NYUImporter.jointsImgTo3D": [[1176, 1186], ["numpy.zeros", "xrange", "importers.NYUImporter.jointImgTo3D"], "methods", ["home.repos.pwc.inspect_result.moberweger_deep-prior-pp.data.importers.NYUImporter.jointImgTo3D"], ["", "def", "jointsImgTo3D", "(", "self", ",", "sample", ")", ":", "\n", "        ", "\"\"\"\n        Normalize sample to metric 3D\n        :param sample: joints in (x,y,z) with x,y in image coordinates and z in mm\n        :return: normalized joints in mm\n        \"\"\"", "\n", "ret", "=", "np", ".", "zeros", "(", "(", "sample", ".", "shape", "[", "0", "]", ",", "3", ")", ",", "np", ".", "float32", ")", "\n", "for", "i", "in", "xrange", "(", "sample", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "ret", "[", "i", "]", "=", "self", ".", "jointImgTo3D", "(", "sample", "[", "i", "]", ")", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.data.importers.NYUImporter.jointImgTo3D": [[1187, 1198], ["numpy.zeros"], "methods", ["None"], ["", "def", "jointImgTo3D", "(", "self", ",", "sample", ")", ":", "\n", "        ", "\"\"\"\n        Normalize sample to metric 3D\n        :param sample: joints in (x,y,z) with x,y in image coordinates and z in mm\n        :return: normalized joints in mm\n        \"\"\"", "\n", "ret", "=", "np", ".", "zeros", "(", "(", "3", ",", ")", ",", "np", ".", "float32", ")", "\n", "ret", "[", "0", "]", "=", "(", "sample", "[", "0", "]", "-", "self", ".", "ux", ")", "*", "sample", "[", "2", "]", "/", "self", ".", "fx", "\n", "ret", "[", "1", "]", "=", "(", "self", ".", "uy", "-", "sample", "[", "1", "]", ")", "*", "sample", "[", "2", "]", "/", "self", ".", "fy", "\n", "ret", "[", "2", "]", "=", "sample", "[", "2", "]", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.data.importers.NYUImporter.joints3DToImg": [[1199, 1209], ["numpy.zeros", "xrange", "importers.NYUImporter.joint3DToImg"], "methods", ["home.repos.pwc.inspect_result.moberweger_deep-prior-pp.data.importers.NYUImporter.joint3DToImg"], ["", "def", "joints3DToImg", "(", "self", ",", "sample", ")", ":", "\n", "        ", "\"\"\"\n        Denormalize sample from metric 3D to image coordinates\n        :param sample: joints in (x,y,z) with x,y and z in mm\n        :return: joints in (x,y,z) with x,y in image coordinates and z in mm\n        \"\"\"", "\n", "ret", "=", "np", ".", "zeros", "(", "(", "sample", ".", "shape", "[", "0", "]", ",", "3", ")", ",", "np", ".", "float32", ")", "\n", "for", "i", "in", "xrange", "(", "sample", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "ret", "[", "i", "]", "=", "self", ".", "joint3DToImg", "(", "sample", "[", "i", "]", ")", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.data.importers.NYUImporter.joint3DToImg": [[1210, 1225], ["numpy.zeros"], "methods", ["None"], ["", "def", "joint3DToImg", "(", "self", ",", "sample", ")", ":", "\n", "        ", "\"\"\"\n        Denormalize sample from metric 3D to image coordinates\n        :param sample: joints in (x,y,z) with x,y and z in mm\n        :return: joints in (x,y,z) with x,y in image coordinates and z in mm\n        \"\"\"", "\n", "ret", "=", "np", ".", "zeros", "(", "(", "3", ",", ")", ",", "np", ".", "float32", ")", "\n", "if", "sample", "[", "2", "]", "==", "0.", ":", "\n", "            ", "ret", "[", "0", "]", "=", "self", ".", "ux", "\n", "ret", "[", "1", "]", "=", "self", ".", "uy", "\n", "return", "ret", "\n", "", "ret", "[", "0", "]", "=", "sample", "[", "0", "]", "/", "sample", "[", "2", "]", "*", "self", ".", "fx", "+", "self", ".", "ux", "\n", "ret", "[", "1", "]", "=", "self", ".", "uy", "-", "sample", "[", "1", "]", "/", "sample", "[", "2", "]", "*", "self", ".", "fy", "\n", "ret", "[", "2", "]", "=", "sample", "[", "2", "]", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.data.importers.NYUImporter.getCameraIntrinsics": [[1226, 1238], ["numpy.zeros"], "methods", ["None"], ["", "def", "getCameraIntrinsics", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Get intrinsic camera matrix\n        :return: 3x3 intrinsic camera matrix\n        \"\"\"", "\n", "ret", "=", "np", ".", "zeros", "(", "(", "3", ",", "3", ")", ",", "np", ".", "float32", ")", "\n", "ret", "[", "0", ",", "0", "]", "=", "self", ".", "fx", "\n", "ret", "[", "1", ",", "1", "]", "=", "-", "self", ".", "fy", "\n", "ret", "[", "2", ",", "2", "]", "=", "1", "\n", "ret", "[", "0", ",", "2", "]", "=", "self", ".", "ux", "\n", "ret", "[", "1", ",", "2", "]", "=", "self", ".", "uy", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.data.importers.NYUImporter.getCameraProjection": [[1239, 1252], ["numpy.zeros"], "methods", ["None"], ["", "def", "getCameraProjection", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Get homogenous camera projection matrix\n        :return: 4x4 camera projection matrix\n        \"\"\"", "\n", "ret", "=", "np", ".", "zeros", "(", "(", "4", ",", "4", ")", ",", "np", ".", "float32", ")", "\n", "ret", "[", "0", ",", "0", "]", "=", "self", ".", "fx", "\n", "ret", "[", "1", ",", "1", "]", "=", "-", "self", ".", "fy", "\n", "ret", "[", "2", ",", "2", "]", "=", "1.", "\n", "ret", "[", "0", ",", "2", "]", "=", "self", ".", "ux", "\n", "ret", "[", "1", ",", "2", "]", "=", "self", ".", "uy", "\n", "ret", "[", "3", ",", "2", "]", "=", "1.", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.data.importers.NYUImporter.showAnnotatedDepth": [[1253, 1291], ["print", "plt.figure", "plt.figure.add_subplot", "plt.figure.add_subplot.imshow", "plt.figure.add_subplot.scatter", "plt.figure.add_subplot.plot", "plt.figure.add_subplot.plot", "plt.figure.add_subplot.plot", "plt.figure.add_subplot.plot", "plt.figure.add_subplot.plot", "plt.figure.add_subplot.plot", "plt.figure.add_subplot.plot", "range", "plt.show", "numpy.hstack", "numpy.hstack", "numpy.hstack", "numpy.hstack", "numpy.hstack", "numpy.hstack", "numpy.hstack", "numpy.hstack", "numpy.hstack", "numpy.hstack", "numpy.hstack", "numpy.hstack", "numpy.hstack", "numpy.hstack", "int", "int", "plt.figure.add_subplot.annotate", "frame.dpt.min", "frame.dpt.max", "str", "int", "int"], "methods", ["None"], ["", "def", "showAnnotatedDepth", "(", "self", ",", "frame", ")", ":", "\n", "        ", "\"\"\"\n        Show the depth image\n        :param frame: image to show\n        :return:\n        \"\"\"", "\n", "import", "matplotlib", "\n", "import", "matplotlib", ".", "pyplot", "as", "plt", "\n", "\n", "print", "(", "\"img min {}, max {}\"", ".", "format", "(", "frame", ".", "dpt", ".", "min", "(", ")", ",", "frame", ".", "dpt", ".", "max", "(", ")", ")", ")", "\n", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "ax", "=", "fig", ".", "add_subplot", "(", "111", ")", "\n", "ax", ".", "imshow", "(", "frame", ".", "dpt", ",", "cmap", "=", "matplotlib", ".", "cm", ".", "jet", ",", "interpolation", "=", "'nearest'", ")", "\n", "ax", ".", "scatter", "(", "frame", ".", "gtcrop", "[", ":", ",", "0", "]", ",", "frame", ".", "gtcrop", "[", ":", ",", "1", "]", ")", "\n", "\n", "ax", ".", "plot", "(", "np", ".", "hstack", "(", "(", "frame", ".", "gtcrop", "[", "13", ",", "0", "]", ",", "frame", ".", "gtcrop", "[", "1", ":", ":", "-", "1", ",", "0", "]", ")", ")", ",", "np", ".", "hstack", "(", "(", "frame", ".", "gtcrop", "[", "13", ",", "1", "]", ",", "frame", ".", "gtcrop", "[", "1", ":", ":", "-", "1", ",", "1", "]", ")", ")", ",", "c", "=", "'r'", ")", "\n", "ax", ".", "plot", "(", "np", ".", "hstack", "(", "(", "frame", ".", "gtcrop", "[", "13", ",", "0", "]", ",", "frame", ".", "gtcrop", "[", "3", ":", "1", ":", "-", "1", ",", "0", "]", ")", ")", ",", "np", ".", "hstack", "(", "(", "frame", ".", "gtcrop", "[", "13", ",", "1", "]", ",", "frame", ".", "gtcrop", "[", "3", ":", "1", ":", "-", "1", ",", "1", "]", ")", ")", ",", "c", "=", "'r'", ")", "\n", "ax", ".", "plot", "(", "np", ".", "hstack", "(", "(", "frame", ".", "gtcrop", "[", "13", ",", "0", "]", ",", "frame", ".", "gtcrop", "[", "5", ":", "3", ":", "-", "1", ",", "0", "]", ")", ")", ",", "np", ".", "hstack", "(", "(", "frame", ".", "gtcrop", "[", "13", ",", "1", "]", ",", "frame", ".", "gtcrop", "[", "5", ":", "3", ":", "-", "1", ",", "1", "]", ")", ")", ",", "c", "=", "'r'", ")", "\n", "ax", ".", "plot", "(", "np", ".", "hstack", "(", "(", "frame", ".", "gtcrop", "[", "13", ",", "0", "]", ",", "frame", ".", "gtcrop", "[", "7", ":", "5", ":", "-", "1", ",", "0", "]", ")", ")", ",", "np", ".", "hstack", "(", "(", "frame", ".", "gtcrop", "[", "13", ",", "1", "]", ",", "frame", ".", "gtcrop", "[", "7", ":", "5", ":", "-", "1", ",", "1", "]", ")", ")", ",", "c", "=", "'r'", ")", "\n", "ax", ".", "plot", "(", "np", ".", "hstack", "(", "(", "frame", ".", "gtcrop", "[", "13", ",", "0", "]", ",", "frame", ".", "gtcrop", "[", "10", ":", "7", ":", "-", "1", ",", "0", "]", ")", ")", ",", "np", ".", "hstack", "(", "(", "frame", ".", "gtcrop", "[", "13", ",", "1", "]", ",", "frame", ".", "gtcrop", "[", "10", ":", "7", ":", "-", "1", ",", "1", "]", ")", ")", ",", "c", "=", "'r'", ")", "\n", "ax", ".", "plot", "(", "np", ".", "hstack", "(", "(", "frame", ".", "gtcrop", "[", "13", ",", "0", "]", ",", "frame", ".", "gtcrop", "[", "11", ",", "0", "]", ")", ")", ",", "np", ".", "hstack", "(", "(", "frame", ".", "gtcrop", "[", "13", ",", "1", "]", ",", "frame", ".", "gtcrop", "[", "11", ",", "1", "]", ")", ")", ",", "c", "=", "'r'", ")", "\n", "ax", ".", "plot", "(", "np", ".", "hstack", "(", "(", "frame", ".", "gtcrop", "[", "13", ",", "0", "]", ",", "frame", ".", "gtcrop", "[", "12", ",", "0", "]", ")", ")", ",", "np", ".", "hstack", "(", "(", "frame", ".", "gtcrop", "[", "13", ",", "1", "]", ",", "frame", ".", "gtcrop", "[", "12", ",", "1", "]", ")", ")", ",", "c", "=", "'r'", ")", "\n", "\n", "def", "format_coord", "(", "x", ",", "y", ")", ":", "\n", "            ", "numrows", ",", "numcols", "=", "frame", ".", "dpt", ".", "shape", "\n", "col", "=", "int", "(", "x", "+", "0.5", ")", "\n", "row", "=", "int", "(", "y", "+", "0.5", ")", "\n", "if", "col", ">=", "0", "and", "col", "<", "numcols", "and", "row", ">=", "0", "and", "row", "<", "numrows", ":", "\n", "                ", "z", "=", "frame", ".", "dpt", "[", "row", ",", "col", "]", "\n", "return", "'x=%1.4f, y=%1.4f, z=%1.4f'", "%", "(", "x", ",", "y", ",", "z", ")", "\n", "", "else", ":", "\n", "                ", "return", "'x=%1.4f, y=%1.4f'", "%", "(", "x", ",", "y", ")", "\n", "", "", "ax", ".", "format_coord", "=", "format_coord", "\n", "\n", "for", "i", "in", "range", "(", "frame", ".", "gtcrop", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "ax", ".", "annotate", "(", "str", "(", "i", ")", ",", "(", "int", "(", "frame", ".", "gtcrop", "[", "i", ",", "0", "]", ")", ",", "int", "(", "frame", ".", "gtcrop", "[", "i", ",", "1", "]", ")", ")", ")", "\n", "\n", "", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.data.importers.NYUImporter.depthToPCL": [[1292, 1310], ["numpy.asarray().transpose", "numpy.concatenate", "numpy.column_stack", "numpy.dot", "numpy.asarray", "numpy.ones", "numpy.linalg.inv", "numpy.where", "numpy.asarray", "numpy.isclose", "numpy.isclose"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "depthToPCL", "(", "dpt", ",", "T", ",", "background_val", "=", "0.", ")", ":", "\n", "\n", "# get valid points and transform", "\n", "        ", "pts", "=", "np", ".", "asarray", "(", "np", ".", "where", "(", "~", "np", ".", "isclose", "(", "dpt", ",", "background_val", ")", ")", ")", ".", "transpose", "(", ")", "\n", "pts", "=", "np", ".", "concatenate", "(", "[", "pts", "[", ":", ",", "[", "1", ",", "0", "]", "]", "+", "0.5", ",", "np", ".", "ones", "(", "(", "pts", ".", "shape", "[", "0", "]", ",", "1", ")", ",", "dtype", "=", "'float32'", ")", "]", ",", "axis", "=", "1", ")", "\n", "pts", "=", "np", ".", "dot", "(", "np", ".", "linalg", ".", "inv", "(", "np", ".", "asarray", "(", "T", ")", ")", ",", "pts", ".", "T", ")", ".", "T", "\n", "pts", "=", "(", "pts", "[", ":", ",", "0", ":", "2", "]", "/", "pts", "[", ":", ",", "2", "]", "[", ":", ",", "None", "]", ")", ".", "reshape", "(", "(", "pts", ".", "shape", "[", "0", "]", ",", "2", ")", ")", "\n", "\n", "# replace the invalid data", "\n", "depth", "=", "dpt", "[", "(", "~", "np", ".", "isclose", "(", "dpt", ",", "background_val", ")", ")", "]", "\n", "\n", "# get x and y data in a vectorized way", "\n", "row", "=", "(", "pts", "[", ":", ",", "0", "]", "-", "320.", ")", "/", "588.03", "*", "depth", "\n", "col", "=", "(", "240.", "-", "pts", "[", ":", ",", "1", "]", ")", "/", "587.07", "*", "depth", "\n", "\n", "# combine x,y,depth", "\n", "return", "np", ".", "column_stack", "(", "(", "row", ",", "col", ",", "depth", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.poseregnet.PoseRegNetParams.__init__": [[45, 146], ["net.netbase.NetBaseParams.__init__", "poseregnet.PoseRegNetParams.layers.append", "poseregnet.PoseRegNetParams.layers.append", "poseregnet.PoseRegNetParams.layers.append", "poseregnet.PoseRegNetParams.layers.append", "poseregnet.PoseRegNetParams.layers.append", "poseregnet.PoseRegNetParams.layers.append", "poseregnet.PoseRegNetParams.layers.append", "poseregnet.PoseRegNetParams.layers.append", "net.convpoollayer.ConvPoolLayerParams", "net.convpoollayer.ConvPoolLayerParams", "net.convpoollayer.ConvPoolLayerParams", "net.hiddenlayer.HiddenLayerParams", "net.dropoutlayer.DropoutLayerParams", "net.hiddenlayer.HiddenLayerParams", "net.dropoutlayer.DropoutLayerParams", "net.hiddenlayer.HiddenLayerParams", "poseregnet.PoseRegNetParams.layers.append", "poseregnet.PoseRegNetParams.layers.append", "poseregnet.PoseRegNetParams.layers.append", "poseregnet.PoseRegNetParams.layers.append", "poseregnet.PoseRegNetParams.layers.append", "poseregnet.PoseRegNetParams.layers.append", "poseregnet.PoseRegNetParams.layers.append", "poseregnet.PoseRegNetParams.layers.append", "poseregnet.PoseRegNetParams.layers.append", "NotImplementedError", "net.convpoollayer.ConvPoolLayerParams", "net.convpoollayer.ConvPoolLayerParams", "net.convpoollayer.ConvPoolLayerParams", "net.hiddenlayer.HiddenLayerParams", "net.dropoutlayer.DropoutLayerParams", "net.hiddenlayer.HiddenLayerParams", "net.dropoutlayer.DropoutLayerParams", "net.hiddenlayer.HiddenLayerParams", "net.hiddenlayer.HiddenLayerParams"], "methods", ["home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.hiddenlayer.HiddenLayer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "type", "=", "0", ",", "nChan", "=", "1", ",", "wIn", "=", "128", ",", "hIn", "=", "128", ",", "batchSize", "=", "128", ",", "numJoints", "=", "16", ",", "nDims", "=", "3", ")", ":", "\n", "        ", "\"\"\"\n        Init the parametrization\n\n        :type type: int\n        :param type: type of descr network\n        \"\"\"", "\n", "\n", "super", "(", "PoseRegNetParams", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "batch_size", "=", "batchSize", "\n", "self", ".", "numJoints", "=", "numJoints", "\n", "self", ".", "nDims", "=", "nDims", "\n", "self", ".", "inputDim", "=", "(", "batchSize", ",", "nChan", ",", "hIn", ",", "wIn", ")", "\n", "\n", "if", "type", "==", "0", ":", "\n", "# Try DeepPose CNN similar configuration", "\n", "            ", "self", ".", "layers", ".", "append", "(", "ConvPoolLayerParams", "(", "inputDim", "=", "(", "batchSize", ",", "nChan", ",", "hIn", ",", "wIn", ")", ",", "# w,h,nChannel", "\n", "nFilters", "=", "8", ",", "\n", "filterDim", "=", "(", "5", ",", "5", ")", ",", "\n", "poolsize", "=", "(", "4", ",", "4", ")", ",", "\n", "activation", "=", "ReLU", ")", ")", "\n", "\n", "self", ".", "layers", ".", "append", "(", "ConvPoolLayerParams", "(", "inputDim", "=", "self", ".", "layers", "[", "-", "1", "]", ".", "outputDim", ",", "\n", "nFilters", "=", "8", ",", "\n", "filterDim", "=", "(", "5", ",", "5", ")", ",", "\n", "poolsize", "=", "(", "2", ",", "2", ")", ",", "\n", "activation", "=", "ReLU", ")", ")", "\n", "\n", "self", ".", "layers", ".", "append", "(", "ConvPoolLayerParams", "(", "inputDim", "=", "self", ".", "layers", "[", "-", "1", "]", ".", "outputDim", ",", "\n", "nFilters", "=", "8", ",", "\n", "filterDim", "=", "(", "3", ",", "3", ")", ",", "\n", "poolsize", "=", "(", "1", ",", "1", ")", ",", "\n", "activation", "=", "ReLU", ")", ")", "\n", "\n", "l3out", "=", "self", ".", "layers", "[", "-", "1", "]", ".", "outputDim", "\n", "self", ".", "layers", ".", "append", "(", "HiddenLayerParams", "(", "inputDim", "=", "(", "l3out", "[", "0", "]", ",", "l3out", "[", "1", "]", "*", "l3out", "[", "2", "]", "*", "l3out", "[", "3", "]", ")", ",", "\n", "outputDim", "=", "(", "batchSize", ",", "1024", ")", ",", "\n", "activation", "=", "ReLU", ")", ")", "\n", "\n", "self", ".", "layers", ".", "append", "(", "DropoutLayerParams", "(", "inputDim", "=", "self", ".", "layers", "[", "-", "1", "]", ".", "outputDim", ",", "\n", "outputDim", "=", "self", ".", "layers", "[", "-", "1", "]", ".", "outputDim", ")", ")", "\n", "\n", "self", ".", "layers", ".", "append", "(", "HiddenLayerParams", "(", "inputDim", "=", "self", ".", "layers", "[", "-", "1", "]", ".", "outputDim", ",", "\n", "outputDim", "=", "(", "batchSize", ",", "1024", ")", ",", "\n", "activation", "=", "ReLU", ")", ")", "\n", "\n", "self", ".", "layers", ".", "append", "(", "DropoutLayerParams", "(", "inputDim", "=", "self", ".", "layers", "[", "-", "1", "]", ".", "outputDim", ",", "\n", "outputDim", "=", "self", ".", "layers", "[", "-", "1", "]", ".", "outputDim", ")", ")", "\n", "\n", "self", ".", "layers", ".", "append", "(", "HiddenLayerParams", "(", "inputDim", "=", "self", ".", "layers", "[", "-", "1", "]", ".", "outputDim", ",", "\n", "outputDim", "=", "(", "batchSize", ",", "numJoints", "*", "nDims", ")", ",", "\n", "activation", "=", "None", ")", ")", "# last one is linear for regression", "\n", "\n", "self", ".", "outputDim", "=", "self", ".", "layers", "[", "-", "1", "]", ".", "outputDim", "\n", "", "elif", "type", "==", "11", ":", "\n", "# Try DeepPose CNN similar configuration", "\n", "            ", "self", ".", "layers", ".", "append", "(", "ConvPoolLayerParams", "(", "inputDim", "=", "(", "batchSize", ",", "nChan", ",", "hIn", ",", "wIn", ")", ",", "# w,h,nChannel", "\n", "nFilters", "=", "8", ",", "\n", "filterDim", "=", "(", "5", ",", "5", ")", ",", "\n", "poolsize", "=", "(", "4", ",", "4", ")", ",", "\n", "activation", "=", "ReLU", ")", ")", "\n", "\n", "self", ".", "layers", ".", "append", "(", "ConvPoolLayerParams", "(", "inputDim", "=", "self", ".", "layers", "[", "-", "1", "]", ".", "outputDim", ",", "\n", "nFilters", "=", "8", ",", "\n", "filterDim", "=", "(", "5", ",", "5", ")", ",", "\n", "poolsize", "=", "(", "2", ",", "2", ")", ",", "\n", "activation", "=", "ReLU", ")", ")", "\n", "\n", "self", ".", "layers", ".", "append", "(", "ConvPoolLayerParams", "(", "inputDim", "=", "self", ".", "layers", "[", "-", "1", "]", ".", "outputDim", ",", "\n", "nFilters", "=", "8", ",", "\n", "filterDim", "=", "(", "3", ",", "3", ")", ",", "\n", "poolsize", "=", "(", "1", ",", "1", ")", ",", "\n", "activation", "=", "ReLU", ")", ")", "\n", "\n", "l3out", "=", "self", ".", "layers", "[", "-", "1", "]", ".", "outputDim", "\n", "self", ".", "layers", ".", "append", "(", "HiddenLayerParams", "(", "inputDim", "=", "(", "l3out", "[", "0", "]", ",", "l3out", "[", "1", "]", "*", "l3out", "[", "2", "]", "*", "l3out", "[", "3", "]", ")", ",", "\n", "outputDim", "=", "(", "batchSize", ",", "1024", ")", ",", "\n", "activation", "=", "ReLU", ")", ")", "\n", "\n", "self", ".", "layers", ".", "append", "(", "DropoutLayerParams", "(", "inputDim", "=", "self", ".", "layers", "[", "-", "1", "]", ".", "outputDim", ",", "\n", "outputDim", "=", "self", ".", "layers", "[", "-", "1", "]", ".", "outputDim", ")", ")", "\n", "\n", "self", ".", "layers", ".", "append", "(", "HiddenLayerParams", "(", "inputDim", "=", "self", ".", "layers", "[", "-", "1", "]", ".", "outputDim", ",", "\n", "outputDim", "=", "(", "batchSize", ",", "1024", ")", ",", "\n", "activation", "=", "ReLU", ")", ")", "\n", "\n", "self", ".", "layers", ".", "append", "(", "DropoutLayerParams", "(", "inputDim", "=", "self", ".", "layers", "[", "-", "1", "]", ".", "outputDim", ",", "\n", "outputDim", "=", "self", ".", "layers", "[", "-", "1", "]", ".", "outputDim", ")", ")", "\n", "\n", "self", ".", "layers", ".", "append", "(", "HiddenLayerParams", "(", "inputDim", "=", "self", ".", "layers", "[", "-", "1", "]", ".", "outputDim", ",", "\n", "outputDim", "=", "(", "batchSize", ",", "30", ")", ",", "\n", "activation", "=", "None", ")", ")", "\n", "\n", "self", ".", "layers", ".", "append", "(", "HiddenLayerParams", "(", "inputDim", "=", "self", ".", "layers", "[", "-", "1", "]", ".", "outputDim", ",", "\n", "outputDim", "=", "(", "batchSize", ",", "numJoints", "*", "nDims", ")", ",", "\n", "activation", "=", "None", ")", ")", "\n", "\n", "self", ".", "outputDim", "=", "self", ".", "layers", "[", "-", "1", "]", ".", "outputDim", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"not implemented\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.poseregnet.PoseRegNet.__init__": [[149, 166], ["net.netbase.NetBase.__init__", "Exception", "T.tensor4", "isinstance", "T.tensor4"], "methods", ["home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.hiddenlayer.HiddenLayer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "rng", ",", "inputVar", "=", "None", ",", "cfgParams", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n\n        :type cfgParams: DescriptorNetParams\n        \"\"\"", "\n", "import", "theano", ".", "tensor", "as", "T", "\n", "\n", "if", "cfgParams", "is", "None", ":", "\n", "            ", "raise", "Exception", "(", "\"Cannot create a Net without config parameters (ie. cfgParams==None)\"", ")", "\n", "\n", "", "if", "inputVar", "is", "None", ":", "\n", "            ", "inputVar", "=", "T", ".", "tensor4", "(", "'x'", ")", "# input variable", "\n", "", "elif", "isinstance", "(", "inputVar", ",", "str", ")", ":", "\n", "            ", "inputVar", "=", "T", ".", "tensor4", "(", "inputVar", ")", "# input variable", "\n", "\n", "# create structure", "\n", "", "super", "(", "PoseRegNet", ",", "self", ")", ".", "__init__", "(", "rng", ",", "inputVar", ",", "cfgParams", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.convpoollayer.ConvPoolLayerParams.__init__": [[41, 69], ["net.layerparams.LayerParams.__init__", "convpoollayer.ConvPoolLayerParams.update"], "methods", ["home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.hiddenlayer.HiddenLayer.__init__", "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.layerparams.LayerParams.update"], ["    ", "def", "__init__", "(", "self", ",", "inputDim", "=", "None", ",", "nFilters", "=", "None", ",", "filterDim", "=", "None", ",", "activation", "=", "None", ",", "poolsize", "=", "(", "1", ",", "1", ")", ",", "poolType", "=", "0", ",", "\n", "filter_shape", "=", "None", ",", "image_shape", "=", "None", ",", "outputDim", "=", "None", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "border_mode", "=", "'valid'", ",", "hasBias", "=", "True", ",", "\n", "init_method", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        :type filter_shape: tuple or list of length 4\n        :param filter_shape: (number of filters, num inputVar feature maps, filter height,filter width)\n\n        :type image_shape: tuple or list of length 4\n        :param image_shape: (batch size, num inputVar feature maps, image height, image width)\n\n        :type poolsize: tuple or list of length 2\n        :param poolsize: the downsampling (pooling) factor (#rows,#cols)\n        \"\"\"", "\n", "\n", "super", "(", "ConvPoolLayerParams", ",", "self", ")", ".", "__init__", "(", "inputDim", ",", "outputDim", ")", "\n", "\n", "self", ".", "_nFilters", "=", "nFilters", "\n", "self", ".", "_filterDim", "=", "filterDim", "\n", "self", ".", "_poolsize", "=", "poolsize", "\n", "self", ".", "_poolType", "=", "poolType", "\n", "self", ".", "_filter_shape", "=", "filter_shape", "\n", "self", ".", "_image_shape", "=", "image_shape", "\n", "self", ".", "_activation", "=", "activation", "\n", "self", ".", "_hasbias", "=", "hasBias", "\n", "self", ".", "_stride", "=", "stride", "\n", "self", ".", "_border_mode", "=", "'half'", "if", "border_mode", "==", "'same'", "else", "border_mode", "\n", "self", ".", "_init_method", "=", "init_method", "\n", "self", ".", "update", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.convpoollayer.ConvPoolLayerParams.filter_shape": [[70, 73], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "filter_shape", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_filter_shape", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.convpoollayer.ConvPoolLayerParams.image_shape": [[74, 77], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "image_shape", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_image_shape", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.convpoollayer.ConvPoolLayerParams.stride": [[82, 86], ["convpoollayer.ConvPoolLayerParams.update"], "methods", ["home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.layerparams.LayerParams.update"], ["", "@", "stride", ".", "setter", "\n", "def", "stride", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_stride", "=", "value", "\n", "self", ".", "update", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.convpoollayer.ConvPoolLayerParams.border_mode": [[91, 97], ["convpoollayer.ConvPoolLayerParams.update"], "methods", ["home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.layerparams.LayerParams.update"], ["", "@", "border_mode", ".", "setter", "\n", "def", "border_mode", "(", "self", ",", "value", ")", ":", "\n", "        ", "if", "value", "==", "'same'", ":", "\n", "            ", "value", "=", "'half'", "\n", "", "self", ".", "_border_mode", "=", "value", "\n", "self", ".", "update", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.convpoollayer.ConvPoolLayerParams.nFilters": [[102, 106], ["convpoollayer.ConvPoolLayerParams.update"], "methods", ["home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.layerparams.LayerParams.update"], ["", "@", "nFilters", ".", "setter", "\n", "def", "nFilters", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_nFilters", "=", "value", "\n", "self", ".", "update", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.convpoollayer.ConvPoolLayerParams.filterDim": [[111, 115], ["convpoollayer.ConvPoolLayerParams.update"], "methods", ["home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.layerparams.LayerParams.update"], ["", "@", "filterDim", ".", "setter", "\n", "def", "filterDim", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_filterDim", "=", "value", "\n", "self", ".", "update", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.convpoollayer.ConvPoolLayerParams.poolsize": [[120, 124], ["convpoollayer.ConvPoolLayerParams.update"], "methods", ["home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.layerparams.LayerParams.update"], ["", "@", "poolsize", ".", "setter", "\n", "def", "poolsize", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_poolsize", "=", "value", "\n", "self", ".", "update", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.convpoollayer.ConvPoolLayerParams.poolType": [[125, 128], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "poolType", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_poolType", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.convpoollayer.ConvPoolLayerParams.activation": [[133, 136], ["None"], "methods", ["None"], ["", "@", "activation", ".", "setter", "\n", "def", "activation", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_activation", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.convpoollayer.ConvPoolLayerParams.hasBias": [[141, 144], ["None"], "methods", ["None"], ["", "@", "hasBias", ".", "setter", "\n", "def", "hasBias", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_hasbias", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.convpoollayer.ConvPoolLayerParams.update": [[145, 182], ["list", "tuple", "int", "int", "numpy.ceil", "numpy.ceil", "ValueError", "float", "float"], "methods", ["None"], ["", "def", "update", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        calc image_shape,\n        \"\"\"", "\n", "self", ".", "_filter_shape", "=", "(", "self", ".", "_nFilters", ",", "\n", "self", ".", "_inputDim", "[", "1", "]", ",", "\n", "self", ".", "_filterDim", "[", "0", "]", ",", "\n", "self", ".", "_filterDim", "[", "1", "]", ")", "\n", "self", ".", "_image_shape", "=", "self", ".", "_inputDim", "\n", "\n", "if", "self", ".", "_border_mode", "==", "'valid'", ":", "\n", "            ", "self", ".", "_outputDim", "=", "(", "self", ".", "_inputDim", "[", "0", "]", ",", "# batch_size", "\n", "self", ".", "_nFilters", ",", "# number of kernels", "\n", "(", "self", ".", "_inputDim", "[", "2", "]", "-", "self", ".", "_filterDim", "[", "0", "]", "+", "1", ")", ",", "# output H", "\n", "(", "self", ".", "_inputDim", "[", "3", "]", "-", "self", ".", "_filterDim", "[", "1", "]", "+", "1", ")", ")", "# output W", "\n", "", "elif", "self", ".", "_border_mode", "==", "'full'", ":", "\n", "            ", "self", ".", "_outputDim", "=", "(", "self", ".", "_inputDim", "[", "0", "]", ",", "# batch_size", "\n", "self", ".", "_nFilters", ",", "# number of kernels", "\n", "(", "self", ".", "_inputDim", "[", "2", "]", "+", "self", ".", "_filterDim", "[", "0", "]", "-", "1", ")", ",", "# output H", "\n", "(", "self", ".", "_inputDim", "[", "3", "]", "+", "self", ".", "_filterDim", "[", "1", "]", "-", "1", ")", ")", "# output W", "\n", "", "elif", "self", ".", "_border_mode", "==", "'half'", ":", "\n", "            ", "self", ".", "_outputDim", "=", "(", "self", ".", "_inputDim", "[", "0", "]", ",", "# batch_size", "\n", "self", ".", "_nFilters", ",", "# number of kernels", "\n", "self", ".", "_inputDim", "[", "2", "]", ",", "# output H", "\n", "self", ".", "_inputDim", "[", "3", "]", ")", "# output W", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Unknown border mode\"", ")", "\n", "\n", "# correct stride", "\n", "", "self", ".", "_outputDim", "=", "list", "(", "self", ".", "_outputDim", ")", "\n", "self", ".", "_outputDim", "[", "2", "]", "=", "int", "(", "numpy", ".", "ceil", "(", "self", ".", "_outputDim", "[", "2", "]", "/", "float", "(", "self", ".", "_stride", "[", "0", "]", ")", ")", ")", "//", "self", ".", "_poolsize", "[", "0", "]", "\n", "self", ".", "_outputDim", "[", "3", "]", "=", "int", "(", "numpy", ".", "ceil", "(", "self", ".", "_outputDim", "[", "3", "]", "/", "float", "(", "self", ".", "_stride", "[", "1", "]", ")", ")", ")", "//", "self", ".", "_poolsize", "[", "1", "]", "\n", "self", ".", "_outputDim", "=", "tuple", "(", "self", ".", "_outputDim", ")", "\n", "\n", "# no pooling required", "\n", "if", "(", "self", ".", "_poolsize", "[", "0", "]", "==", "1", ")", "and", "(", "self", ".", "_poolsize", "[", "1", "]", "==", "1", ")", ":", "\n", "            ", "self", ".", "_poolType", "=", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.convpoollayer.ConvPoolLayerParams.getMemoryRequirement": [[183, 189], ["numpy.prod"], "methods", ["None"], ["", "", "def", "getMemoryRequirement", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Get memory requirements of weights\n        :return: memory requirement\n        \"\"\"", "\n", "return", "(", "numpy", ".", "prod", "(", "self", ".", "filter_shape", ")", "+", "self", ".", "filter_shape", "[", "0", "]", ")", "*", "4", "# sizeof(theano.config.floatX)", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.convpoollayer.ConvPoolLayer.__init__": [[198, 289], ["net.layer.Layer.__init__", "isinstance", "conv2d", "convpoollayer.ConvPoolLayer.getInitVals", "theano.shared", "pool_2d", "activation", "numpy.zeros", "theano.shared", "pool_2d", "convpoollayer.ConvPoolLayer.b.dimshuffle", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.hiddenlayer.HiddenLayer.__init__", "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.layer.Layer.getInitVals", "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.hiddenlayer.HiddenLayerParams.activation"], ["def", "__init__", "(", "self", ",", "rng", ",", "inputVar", ",", "cfgParams", ",", "copyLayer", "=", "None", ",", "layerNum", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Allocate a LeNetConvPoolLayer with shared variable internal parameters.\n\n        :type rng: numpy.random.RandomState\n        :param rng: a random number generator used to initialize weights\n\n        :type inputVar: theano.tensor.dtensor4\n        :param inputVar: symbolic image tensor, of shape image_shape\n\n        :type cfgParams: ConvPoolLayerParams\n        \"\"\"", "\n", "import", "theano", "\n", "import", "theano", ".", "tensor", "as", "T", "\n", "from", "theano", ".", "tensor", ".", "signal", ".", "pool", "import", "pool_2d", "\n", "from", "theano", ".", "tensor", ".", "nnet", "import", "conv2d", "\n", "\n", "super", "(", "ConvPoolLayer", ",", "self", ")", ".", "__init__", "(", "rng", ")", "\n", "\n", "assert", "isinstance", "(", "cfgParams", ",", "ConvPoolLayerParams", ")", "\n", "\n", "floatX", "=", "theano", ".", "config", ".", "floatX", "# @UndefinedVariable", "\n", "\n", "filter_shape", "=", "cfgParams", ".", "filter_shape", "\n", "image_shape", "=", "cfgParams", ".", "image_shape", "\n", "filter_stride", "=", "cfgParams", ".", "stride", "\n", "poolsize", "=", "cfgParams", ".", "poolsize", "\n", "poolType", "=", "cfgParams", ".", "poolType", "\n", "activation", "=", "cfgParams", ".", "activation", "\n", "inputDim", "=", "cfgParams", ".", "inputDim", "\n", "border_mode", "=", "cfgParams", ".", "border_mode", "\n", "\n", "self", ".", "cfgParams", "=", "cfgParams", "\n", "self", ".", "layerNum", "=", "layerNum", "\n", "\n", "assert", "image_shape", "[", "1", "]", "==", "filter_shape", "[", "1", "]", "\n", "self", ".", "inputVar", "=", "inputVar", "\n", "\n", "if", "not", "(", "copyLayer", "is", "None", ")", ":", "\n", "            ", "self", ".", "W", "=", "copyLayer", ".", "W", "\n", "", "else", ":", "\n", "            ", "wInitVals", "=", "self", ".", "getInitVals", "(", "filter_shape", ",", "'conv'", ",", "act_fn", "=", "cfgParams", ".", "activation_str", ",", "orthogonal", "=", "False", ",", "method", "=", "cfgParams", ".", "_init_method", ")", "\n", "self", ".", "W", "=", "theano", ".", "shared", "(", "wInitVals", ",", "borrow", "=", "True", ",", "name", "=", "'convW{}'", ".", "format", "(", "layerNum", ")", ")", "\n", "\n", "# the bias is a 1D tensor -- one bias per output feature map", "\n", "", "if", "self", ".", "cfgParams", ".", "hasBias", "is", "True", ":", "\n", "            ", "if", "not", "(", "copyLayer", "is", "None", ")", ":", "\n", "                ", "self", ".", "b", "=", "copyLayer", ".", "b", "\n", "", "else", ":", "\n", "                ", "b_values", "=", "numpy", ".", "zeros", "(", "(", "filter_shape", "[", "0", "]", ",", ")", ",", "dtype", "=", "floatX", ")", "\n", "self", ".", "b", "=", "theano", ".", "shared", "(", "value", "=", "b_values", ",", "borrow", "=", "True", ",", "name", "=", "'convB{}'", ".", "format", "(", "layerNum", ")", ")", "\n", "\n", "# convolve inputVar feature maps with filters", "\n", "", "", "conv_out", "=", "conv2d", "(", "input", "=", "inputVar", ",", "\n", "filters", "=", "self", ".", "W", ",", "\n", "filter_shape", "=", "filter_shape", ",", "\n", "input_shape", "=", "image_shape", ",", "\n", "subsample", "=", "filter_stride", ",", "\n", "border_mode", "=", "border_mode", ")", "\n", "\n", "# downsample each feature map individually, using maxpooling", "\n", "if", "poolType", "==", "0", ":", "\n", "# use maxpooling", "\n", "            ", "pooled_out", "=", "pool_2d", "(", "input", "=", "conv_out", ",", "ds", "=", "poolsize", ",", "ignore_border", "=", "True", ",", "mode", "=", "'max'", ")", "\n", "", "elif", "poolType", "==", "1", ":", "\n", "# use average pooling", "\n", "            ", "pooled_out", "=", "pool_2d", "(", "input", "=", "conv_out", ",", "ds", "=", "poolsize", ",", "ignore_border", "=", "True", ",", "mode", "=", "'average_inc_pad'", ")", "\n", "", "elif", "poolType", "==", "3", ":", "\n", "# use subsampling and ignore border", "\n", "            ", "pooled_out", "=", "conv_out", "[", ":", ",", ":", ",", ":", "(", "inputDim", "[", "2", "]", "//", "poolsize", "[", "0", "]", ")", "*", "poolsize", "[", "0", "]", ",", ":", "(", "inputDim", "[", "3", "]", "//", "poolsize", "[", "1", "]", ")", "*", "poolsize", "[", "1", "]", "]", "[", ":", ",", ":", ",", ":", ":", "2", ",", ":", ":", "2", "]", "\n", "", "elif", "poolType", "==", "-", "1", ":", "\n", "# no pooling at all", "\n", "            ", "pooled_out", "=", "conv_out", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", ")", "\n", "\n", "# add the bias term. Since the bias is a vector (1D array), we first reshape it to a tensor of shape", "\n", "# (1,n_filters,1,1). Each bias will thus be broadcasted across mini-batches and feature map width & height", "\n", "", "if", "self", ".", "cfgParams", ".", "hasBias", "is", "True", ":", "\n", "            ", "lin_output", "=", "pooled_out", "+", "self", ".", "b", ".", "dimshuffle", "(", "'x'", ",", "0", ",", "'x'", ",", "'x'", ")", "\n", "", "else", ":", "\n", "            ", "lin_output", "=", "pooled_out", "\n", "", "self", ".", "output_pre_act", "=", "lin_output", "\n", "self", ".", "output", "=", "(", "lin_output", "if", "activation", "is", "None", "\n", "else", "activation", "(", "lin_output", ")", ")", "\n", "\n", "self", ".", "output", ".", "name", "=", "'output_layer_{}'", ".", "format", "(", "self", ".", "layerNum", ")", "\n", "\n", "# store parameters of this layer", "\n", "self", ".", "params", "=", "[", "self", ".", "W", ",", "self", ".", "b", "]", "if", "self", ".", "cfgParams", ".", "hasBias", "else", "[", "self", ".", "W", "]", "\n", "self", ".", "weights", "=", "[", "self", ".", "W", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.convpoollayer.ConvPoolLayer.__str__": [[290, 306], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Print configuration of layer\n        :return: configuration string\n        \"\"\"", "\n", "return", "\"inputDim {}, outputDim {}, filterDim {}, nFilters {}, activation {}, stride {}, border_mode {}, \"", "\"hasBias {}, pool_type {}, pool_size {}\"", ".", "format", "(", "self", ".", "cfgParams", ".", "inputDim", ",", "\n", "self", ".", "cfgParams", ".", "outputDim", ",", "\n", "self", ".", "cfgParams", ".", "filterDim", ",", "\n", "self", ".", "cfgParams", ".", "nFilters", ",", "\n", "self", ".", "cfgParams", ".", "activation_str", ",", "\n", "self", ".", "cfgParams", ".", "stride", ",", "\n", "self", ".", "cfgParams", ".", "border_mode", ",", "\n", "self", ".", "cfgParams", ".", "hasBias", ",", "\n", "self", ".", "cfgParams", ".", "poolType", ",", "\n", "self", ".", "cfgParams", ".", "poolsize", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.scalenet.ScaleNetParams.__init__": [[34, 133], ["net.netbase.NetBaseParams.__init__", "scalenet.ScaleNetParams.layers.append", "scalenet.ScaleNetParams.layers.append", "scalenet.ScaleNetParams.layers.append", "scalenet.ScaleNetParams.layers.append", "scalenet.ScaleNetParams.layers.append", "scalenet.ScaleNetParams.layers.append", "scalenet.ScaleNetParams.layers.append", "scalenet.ScaleNetParams.layers.append", "scalenet.ScaleNetParams.layers.append", "range", "scalenet.ScaleNetParams.layers.append", "scalenet.ScaleNetParams.layers.append", "scalenet.ScaleNetParams.layers.append", "scalenet.ScaleNetParams.layers.append", "scalenet.ScaleNetParams.layers.append", "NotImplementedError", "net.convpoollayer.ConvPoolLayerParams", "net.convpoollayer.ConvPoolLayerParams", "net.convpoollayer.ConvPoolLayerParams", "net.convpoollayer.ConvPoolLayerParams", "net.convpoollayer.ConvPoolLayerParams", "net.convpoollayer.ConvPoolLayerParams", "net.convpoollayer.ConvPoolLayerParams", "net.convpoollayer.ConvPoolLayerParams", "net.convpoollayer.ConvPoolLayerParams", "net.hiddenlayer.HiddenLayerParams", "net.dropoutlayer.DropoutLayerParams", "net.hiddenlayer.HiddenLayerParams", "net.dropoutlayer.DropoutLayerParams", "net.hiddenlayer.HiddenLayerParams"], "methods", ["home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.hiddenlayer.HiddenLayer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "type", "=", "0", ",", "nChan", "=", "1", ",", "wIn", "=", "128", ",", "hIn", "=", "128", ",", "batchSize", "=", "128", ",", "numJoints", "=", "16", ",", "nDims", "=", "3", ",", "resizeFactor", "=", "2", ",", "shared_conv", "=", "False", ")", ":", "\n", "        ", "'''\n        Init the parametrization\n\n        :type typeID: int\n        :param typeID: type of descr network\n        '''", "\n", "\n", "super", "(", "ScaleNetParams", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "batch_size", "=", "batchSize", "\n", "self", ".", "numJoints", "=", "numJoints", "\n", "self", ".", "nDims", "=", "nDims", "\n", "self", ".", "shared_conv", "=", "shared_conv", "\n", "\n", "if", "type", "==", "1", ":", "\n", "            ", "self", ".", "numInputs", "=", "3", "\n", "self", ".", "inpConv", "=", "3", "\n", "self", ".", "inputDim", "=", "[", "(", "batchSize", ",", "nChan", ",", "hIn", ",", "wIn", ")", ",", "(", "batchSize", ",", "nChan", ",", "hIn", "//", "resizeFactor", ",", "wIn", "//", "resizeFactor", ")", ",", "(", "batchSize", ",", "nChan", ",", "hIn", "//", "resizeFactor", "**", "2", ",", "wIn", "//", "resizeFactor", "**", "2", ")", "]", "\n", "# Try small configuration", "\n", "self", ".", "layers", ".", "append", "(", "ConvPoolLayerParams", "(", "inputDim", "=", "(", "batchSize", ",", "nChan", ",", "hIn", ",", "wIn", ")", ",", "# w,h,nChannel", "\n", "nFilters", "=", "8", ",", "\n", "filterDim", "=", "(", "5", ",", "5", ")", ",", "\n", "poolsize", "=", "(", "4", ",", "4", ")", ",", "\n", "activation", "=", "ReLU", ")", ")", "\n", "\n", "self", ".", "layers", ".", "append", "(", "ConvPoolLayerParams", "(", "inputDim", "=", "self", ".", "layers", "[", "-", "1", "]", ".", "outputDim", ",", "\n", "nFilters", "=", "8", ",", "\n", "filterDim", "=", "(", "5", ",", "5", ")", ",", "\n", "poolsize", "=", "(", "2", ",", "2", ")", ",", "\n", "activation", "=", "ReLU", ")", ")", "\n", "\n", "self", ".", "layers", ".", "append", "(", "ConvPoolLayerParams", "(", "inputDim", "=", "self", ".", "layers", "[", "-", "1", "]", ".", "outputDim", ",", "\n", "nFilters", "=", "8", ",", "\n", "filterDim", "=", "(", "3", ",", "3", ")", ",", "\n", "poolsize", "=", "(", "1", ",", "1", ")", ",", "\n", "activation", "=", "ReLU", ")", ")", "\n", "\n", "self", ".", "layers", ".", "append", "(", "ConvPoolLayerParams", "(", "inputDim", "=", "(", "batchSize", ",", "nChan", ",", "hIn", "//", "resizeFactor", ",", "wIn", "//", "resizeFactor", ")", ",", "# w,h,nChannel", "\n", "nFilters", "=", "8", ",", "\n", "filterDim", "=", "(", "5", ",", "5", ")", ",", "\n", "poolsize", "=", "(", "2", ",", "2", ")", ",", "\n", "activation", "=", "ReLU", ")", ")", "\n", "\n", "self", ".", "layers", ".", "append", "(", "ConvPoolLayerParams", "(", "inputDim", "=", "self", ".", "layers", "[", "-", "1", "]", ".", "outputDim", ",", "\n", "nFilters", "=", "8", ",", "\n", "filterDim", "=", "(", "5", ",", "5", ")", ",", "\n", "poolsize", "=", "(", "2", ",", "2", ")", ",", "\n", "activation", "=", "ReLU", ")", ")", "\n", "\n", "self", ".", "layers", ".", "append", "(", "ConvPoolLayerParams", "(", "inputDim", "=", "self", ".", "layers", "[", "-", "1", "]", ".", "outputDim", ",", "\n", "nFilters", "=", "8", ",", "\n", "filterDim", "=", "(", "3", ",", "3", ")", ",", "\n", "poolsize", "=", "(", "1", ",", "1", ")", ",", "\n", "activation", "=", "ReLU", ")", ")", "\n", "\n", "self", ".", "layers", ".", "append", "(", "ConvPoolLayerParams", "(", "inputDim", "=", "(", "batchSize", ",", "nChan", ",", "hIn", "//", "resizeFactor", "**", "2", ",", "wIn", "//", "resizeFactor", "**", "2", ")", ",", "# w,h,nChannel", "\n", "nFilters", "=", "8", ",", "\n", "filterDim", "=", "(", "5", ",", "5", ")", ",", "\n", "poolsize", "=", "(", "2", ",", "2", ")", ",", "\n", "activation", "=", "ReLU", ")", ")", "\n", "\n", "self", ".", "layers", ".", "append", "(", "ConvPoolLayerParams", "(", "inputDim", "=", "self", ".", "layers", "[", "-", "1", "]", ".", "outputDim", ",", "\n", "nFilters", "=", "8", ",", "\n", "filterDim", "=", "(", "5", ",", "5", ")", ",", "\n", "poolsize", "=", "(", "1", ",", "1", ")", ",", "\n", "activation", "=", "ReLU", ")", ")", "\n", "\n", "self", ".", "layers", ".", "append", "(", "ConvPoolLayerParams", "(", "inputDim", "=", "self", ".", "layers", "[", "-", "1", "]", ".", "outputDim", ",", "\n", "nFilters", "=", "8", ",", "\n", "filterDim", "=", "(", "3", ",", "3", ")", ",", "\n", "poolsize", "=", "(", "1", ",", "1", ")", ",", "\n", "activation", "=", "ReLU", ")", ")", "\n", "lout", "=", "0", "\n", "for", "j", "in", "range", "(", "self", ".", "numInputs", ")", ":", "\n", "                ", "idx", "=", "(", "j", "+", "1", ")", "*", "self", ".", "inpConv", "-", "1", "\n", "lout", "+=", "self", ".", "layers", "[", "idx", "]", ".", "outputDim", "[", "1", "]", "*", "self", ".", "layers", "[", "idx", "]", ".", "outputDim", "[", "2", "]", "*", "self", ".", "layers", "[", "idx", "]", ".", "outputDim", "[", "3", "]", "\n", "\n", "", "self", ".", "layers", ".", "append", "(", "HiddenLayerParams", "(", "inputDim", "=", "(", "batchSize", ",", "lout", ")", ",", "\n", "outputDim", "=", "(", "batchSize", ",", "1024", ")", ",", "\n", "activation", "=", "ReLU", ")", ")", "\n", "\n", "self", ".", "layers", ".", "append", "(", "DropoutLayerParams", "(", "inputDim", "=", "self", ".", "layers", "[", "-", "1", "]", ".", "outputDim", ",", "\n", "outputDim", "=", "self", ".", "layers", "[", "-", "1", "]", ".", "outputDim", ")", ")", "\n", "\n", "self", ".", "layers", ".", "append", "(", "HiddenLayerParams", "(", "inputDim", "=", "self", ".", "layers", "[", "-", "1", "]", ".", "outputDim", ",", "\n", "outputDim", "=", "(", "batchSize", ",", "1024", ")", ",", "\n", "activation", "=", "ReLU", ")", ")", "\n", "\n", "self", ".", "layers", ".", "append", "(", "DropoutLayerParams", "(", "inputDim", "=", "self", ".", "layers", "[", "-", "1", "]", ".", "outputDim", ",", "\n", "outputDim", "=", "self", ".", "layers", "[", "-", "1", "]", ".", "outputDim", ")", ")", "\n", "\n", "self", ".", "layers", ".", "append", "(", "HiddenLayerParams", "(", "inputDim", "=", "self", ".", "layers", "[", "-", "1", "]", ".", "outputDim", ",", "\n", "outputDim", "=", "(", "batchSize", ",", "numJoints", "*", "nDims", ")", ",", "\n", "activation", "=", "None", ")", ")", "# last one is linear for regression", "\n", "\n", "self", ".", "outputDim", "=", "self", ".", "layers", "[", "-", "1", "]", ".", "outputDim", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"not implemented\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.scalenet.ScaleNet.__init__": [[136, 196], ["scalenet.ScaleNet.load", "Exception", "range", "Exception", "scalenet.ScaleNet.layers.append", "scalenet.ScaleNet.inputVar.append", "globals", "constructor", "T.tensor4", "range", "T.concatenate", "cList.append", "scalenet.ScaleNet.layers[].output.flatten"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "rng", ",", "inputVar", "=", "None", ",", "cfgParams", "=", "None", ",", "twin", "=", "None", ")", ":", "\n", "        ", "'''\n\n        :type cfgParams: DescriptorNetParams\n        '''", "\n", "import", "theano", "\n", "import", "theano", ".", "tensor", "as", "T", "\n", "\n", "if", "cfgParams", "is", "None", ":", "\n", "            ", "raise", "Exception", "(", "\"Cannot create a Net without config parameters (ie. cfgParams==None)\"", ")", "\n", "\n", "", "if", "inputVar", "is", "None", ":", "\n", "            ", "self", ".", "inputVar", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "cfgParams", ".", "numInputs", ")", ":", "\n", "                ", "self", ".", "inputVar", ".", "append", "(", "T", ".", "tensor4", "(", "'x{}'", ".", "format", "(", "i", ")", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "\"Do not give inputVar, created inline\"", ")", "\n", "\n", "# create structure", "\n", "\n", "", "self", ".", "cfgParams", "=", "cfgParams", "\n", "\n", "# create network", "\n", "self", ".", "layers", "=", "[", "]", "\n", "i", "=", "0", "\n", "inI", "=", "0", "\n", "for", "layerParam", "in", "cfgParams", ".", "layers", ":", "\n", "# first input is inputVar, otherwise input is output of last one", "\n", "            ", "if", "(", "i", "%", "self", ".", "cfgParams", ".", "inpConv", ")", "==", "0", "and", "i", "<", "self", ".", "cfgParams", ".", "numInputs", "*", "self", ".", "cfgParams", ".", "inpConv", ":", "\n", "                ", "inp", "=", "self", ".", "inputVar", "[", "inI", "]", "\n", "inI", "+=", "1", "\n", "", "else", ":", "\n", "# flatten output from conv to hidden layer", "\n", "                ", "if", "i", "==", "self", ".", "cfgParams", ".", "numInputs", "*", "self", ".", "cfgParams", ".", "inpConv", ":", "\n", "                    ", "cList", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "self", ".", "cfgParams", ".", "numInputs", ")", ":", "\n", "                        ", "idx", "=", "(", "j", "+", "1", ")", "*", "self", ".", "cfgParams", ".", "inpConv", "-", "1", "\n", "cList", ".", "append", "(", "self", ".", "layers", "[", "idx", "]", ".", "output", ".", "flatten", "(", "2", ")", ")", "\n", "", "inp", "=", "T", ".", "concatenate", "(", "cList", ",", "axis", "=", "1", ")", "\n", "", "else", ":", "\n", "                    ", "inp", "=", "self", ".", "layers", "[", "-", "1", "]", ".", "output", "\n", "\n", "", "", "cl", "=", "(", "None", "if", "(", "twin", "is", "None", ")", "else", "twin", ".", "layers", "[", "i", "]", ")", "\n", "if", "cl", "is", "None", "and", "self", ".", "cfgParams", ".", "shared_conv", "is", "True", "and", "self", ".", "cfgParams", ".", "inpConv", "-", "1", "<", "i", "<", "self", ".", "cfgParams", ".", "numInputs", "*", "self", ".", "cfgParams", ".", "inpConv", ":", "\n", "                ", "cl", "=", "self", ".", "layers", "[", "i", "%", "self", ".", "cfgParams", ".", "inpConv", "]", "\n", "\n", "", "id", "=", "layerParam", ".", "__class__", ".", "__name__", "[", ":", "-", "6", "]", "\n", "constructor", "=", "globals", "(", ")", "[", "id", "]", "\n", "self", ".", "layers", ".", "append", "(", "constructor", "(", "rng", ",", "\n", "inputVar", "=", "inp", ",", "\n", "cfgParams", "=", "layerParam", ",", "\n", "copyLayer", "=", "cl", ",", "\n", "layerNum", "=", "i", ")", ")", "\n", "\n", "i", "+=", "1", "\n", "\n", "# assemble externally visible parameters", "\n", "", "self", ".", "output", "=", "self", ".", "layers", "[", "-", "1", "]", ".", "output", "\n", "\n", "self", ".", "load", "(", "self", ".", "cfgParams", ".", "loadFile", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.nonlinearitylayer.NonlinearityLayerParams.__init__": [[43, 59], ["net.layerparams.LayerParams.__init__"], "methods", ["home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.hiddenlayer.HiddenLayer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inputDim", "=", "None", ",", "outputDim", "=", "None", ",", "activation", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        :type inputDim: tuple of [int]\n        :param inputDim: dimensionality of input\n\n        :type outputDim: tuple of [int]\n        :param outputDim: number of hidden units\n\n        :type activation: theano.Op or function\n        :param activation: Non linearity to be applied in the hidden layer\n        \"\"\"", "\n", "\n", "super", "(", "NonlinearityLayerParams", ",", "self", ")", ".", "__init__", "(", "inputDim", ",", "outputDim", ")", "\n", "\n", "self", ".", "_outputDim", "=", "self", ".", "_inputDim", "\n", "self", ".", "_activation", "=", "activation", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.nonlinearitylayer.NonlinearityLayerParams.activation": [[64, 67], ["None"], "methods", ["None"], ["", "@", "activation", ".", "setter", "\n", "def", "activation", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_activation", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.nonlinearitylayer.NonlinearityLayerParams.getMemoryRequirement": [[68, 74], ["None"], "methods", ["None"], ["", "def", "getMemoryRequirement", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Get memory requirements of weights\n        :return: memory requirement\n        \"\"\"", "\n", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.nonlinearitylayer.NonlinearityLayer.__init__": [[77, 125], ["net.layer.Layer.__init__", "isinstance", "inspect.isfunction", "theano.shared", "activation", "activation", "len", "numpy.ones", "inspect.getargspec"], "methods", ["home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.hiddenlayer.HiddenLayer.__init__", "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.hiddenlayer.HiddenLayerParams.activation", "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.hiddenlayer.HiddenLayerParams.activation"], ["    ", "def", "__init__", "(", "self", ",", "rng", ",", "inputVar", ",", "cfgParams", ",", "copyLayer", "=", "None", ",", "layerNum", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Activation layer that applies non-linearity to input\n\n        Hidden unit activation is given by: activation(inputVar)\n\n        :type rng: numpy.random.RandomState\n        :param rng: a random number generator used to initialize weights\n\n        :type inputVar: theano.tensor.dmatrix\n        :param inputVar: a symbolic tensor of shape (n_examples, n_in)\n\n        :type cfgParams: HiddenLayerParams\n        \"\"\"", "\n", "import", "theano", "\n", "\n", "super", "(", "NonlinearityLayer", ",", "self", ")", ".", "__init__", "(", "rng", ")", "\n", "\n", "assert", "isinstance", "(", "cfgParams", ",", "NonlinearityLayerParams", ")", "\n", "\n", "self", ".", "inputVar", "=", "inputVar", "\n", "self", ".", "cfgParams", "=", "cfgParams", "\n", "self", ".", "layerNum", "=", "layerNum", "\n", "\n", "n_out", "=", "cfgParams", ".", "outputDim", "[", "1", "]", "\n", "activation", "=", "cfgParams", ".", "activation", "\n", "\n", "floatX", "=", "theano", ".", "config", ".", "floatX", "# @UndefinedVariable", "\n", "self", ".", "output_pre_act", "=", "inputVar", "\n", "\n", "if", "activation", "is", "None", ":", "\n", "            ", "self", ".", "output", "=", "inputVar", "\n", "self", ".", "output", ".", "name", "=", "'output_layer_{}'", ".", "format", "(", "self", ".", "layerNum", ")", "\n", "self", ".", "params", "=", "[", "]", "\n", "", "else", ":", "\n", "            ", "if", "inspect", ".", "isfunction", "(", "activation", ")", "and", "len", "(", "inspect", ".", "getargspec", "(", "activation", ")", ".", "args", ")", "==", "2", ":", "\n", "                ", "c_values", "=", "numpy", ".", "ones", "(", "(", "n_out", ",", ")", ",", "dtype", "=", "floatX", ")", "*", "0.5", "\n", "self", ".", "c", "=", "theano", ".", "shared", "(", "value", "=", "c_values", ",", "name", "=", "'c{}'", ".", "format", "(", "layerNum", ")", ",", "borrow", "=", "True", ")", "\n", "self", ".", "output", "=", "activation", "(", "inputVar", ",", "self", ".", "c", ")", "\n", "self", ".", "output", ".", "name", "=", "'output_layer_{}'", ".", "format", "(", "self", ".", "layerNum", ")", "\n", "self", ".", "params", "=", "[", "self", ".", "c", "]", "\n", "", "else", ":", "\n", "                ", "self", ".", "output", "=", "activation", "(", "inputVar", ")", "\n", "self", ".", "output", ".", "name", "=", "'output_layer_{}'", ".", "format", "(", "self", ".", "layerNum", ")", "\n", "self", ".", "params", "=", "[", "]", "\n", "\n", "# parameters of the model", "\n", "", "", "self", ".", "weights", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.nonlinearitylayer.NonlinearityLayer.__str__": [[126, 134], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Print configuration of layer\n        :return: configuration string\n        \"\"\"", "\n", "return", "\"inputDim {}, outputDim {}, activation {}\"", ".", "format", "(", "self", ".", "cfgParams", ".", "inputDim", ",", "\n", "self", ".", "cfgParams", ".", "outputDim", ",", "\n", "self", ".", "cfgParams", ".", "activation_str", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.batchnormlayer.BatchNormLayerParams.__init__": [[42, 58], ["net.layerparams.LayerParams.__init__"], "methods", ["home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.hiddenlayer.HiddenLayer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inputDim", "=", "None", ",", "outputDim", "=", "None", ",", "epsilon", "=", "1e-4", ",", "alpha", "=", "0.1", ",", "mode", "=", "'low_mem'", ",", "\n", "learn_beta", "=", "True", ",", "learn_gamma", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n\n        :type epsilon: float\n        :param epsilon: used for numerical stability\n        \"\"\"", "\n", "\n", "super", "(", "BatchNormLayerParams", ",", "self", ")", ".", "__init__", "(", "inputDim", ",", "outputDim", ")", "\n", "\n", "self", ".", "_learn_beta", "=", "learn_beta", "\n", "self", ".", "_learn_gamma", "=", "learn_gamma", "\n", "self", ".", "_epsilon", "=", "epsilon", "\n", "self", ".", "_alpha", "=", "alpha", "\n", "self", ".", "_mode", "=", "mode", "\n", "self", ".", "_outputDim", "=", "self", ".", "_inputDim", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.batchnormlayer.BatchNormLayerParams.epsilon": [[63, 66], ["None"], "methods", ["None"], ["", "@", "epsilon", ".", "setter", "\n", "def", "epsilon", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_epsilon", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.batchnormlayer.BatchNormLayerParams.alpha": [[71, 74], ["None"], "methods", ["None"], ["", "@", "alpha", ".", "setter", "\n", "def", "alpha", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_alpha", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.batchnormlayer.BatchNormLayerParams.mode": [[79, 82], ["None"], "methods", ["None"], ["", "@", "mode", ".", "setter", "\n", "def", "mode", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_mode", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.batchnormlayer.BatchNormLayer.__init__": [[91, 195], ["net.layer.Layer.__init__", "theano.shared", "tuple", "any", "theano.shared", "theano.shared", "T.mean", "T.inv", "T.switch", "T.switch", "theano.clone", "theano.clone", "T.switch", "T.switch", "iter", "batchnormlayer.BatchNormLayer.beta.dimshuffle", "batchnormlayer.BatchNormLayer.gamma.dimshuffle", "mean.dimshuffle.dimshuffle.dimshuffle", "inv_std.dimshuffle.dimshuffle.dimshuffle", "T.nnet.batch_normalization", "tuple", "ValueError", "theano.shared", "theano.shared", "numpy.zeros", "numpy.ones", "batchnormlayer.BatchNormLayer.mean.set_value", "batchnormlayer.BatchNormLayer.inv_std.set_value", "batchnormlayer.BatchNormLayer.params.append", "batchnormlayer.BatchNormLayer.params.append", "T.sqrt", "range", "range", "numpy.zeros", "numpy.ones", "copyLayer.mean.get_value", "copyLayer.inv_std.get_value", "next", "range", "len", "enumerate", "copyLayer.beta.get_value", "copyLayer.gamma.get_value", "T.var", "len"], "methods", ["home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.hiddenlayer.HiddenLayer.__init__"], ["def", "__init__", "(", "self", ",", "rng", ",", "inputVar", ",", "cfgParams", ",", "copyLayer", "=", "None", ",", "layerNum", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Allocate a BatchNormLayer with shared variable internal parameters.\n\n        :type rng: numpy.random.RandomState\n        :param rng: a random number generator used to initialize weights\n\n        :type inputVar: theano.tensor.dtensor4\n        :param inputVar: symbolic image tensor, of shape image_shape\n\n        :type cfgParams: BatchNormLayerParams\n        \"\"\"", "\n", "import", "theano", "\n", "import", "theano", ".", "tensor", "as", "T", "\n", "\n", "super", "(", "BatchNormLayer", ",", "self", ")", ".", "__init__", "(", "rng", ")", "\n", "\n", "floatX", "=", "theano", ".", "config", ".", "floatX", "# @UndefinedVariable", "\n", "\n", "self", ".", "cfgParams", "=", "cfgParams", "\n", "self", ".", "layerNum", "=", "layerNum", "\n", "self", ".", "inputVar", "=", "inputVar", "\n", "\n", "inputDim", "=", "cfgParams", ".", "inputDim", "\n", "epsilon", "=", "cfgParams", ".", "epsilon", "\n", "alpha", "=", "cfgParams", ".", "alpha", "\n", "mode", "=", "cfgParams", ".", "mode", "\n", "\n", "self", ".", "flag_on", "=", "theano", ".", "shared", "(", "numpy", ".", "cast", "[", "theano", ".", "config", ".", "floatX", "]", "(", "1.0", ")", ",", "name", "=", "'flag_on'", ")", "\n", "\n", "# normalize over all but the second axis", "\n", "axes", "=", "(", "0", ",", ")", "+", "tuple", "(", "range", "(", "2", ",", "len", "(", "inputDim", ")", ")", ")", "\n", "\n", "# create parameters, ignoring all dimensions in axes", "\n", "shape", "=", "tuple", "(", "[", "size", "for", "axis", ",", "size", "in", "enumerate", "(", "inputDim", ")", "if", "axis", "not", "in", "axes", "]", ")", "\n", "if", "any", "(", "size", "is", "None", "for", "size", "in", "shape", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"BatchNormLayer needs specified input sizes for all axes not normalized over.\"", ")", "\n", "\n", "", "if", "not", "(", "copyLayer", "is", "None", ")", ":", "\n", "            ", "assert", "copyLayer", ".", "beta", ".", "get_value", "(", ")", ".", "shape", "==", "shape", "\n", "self", ".", "beta", "=", "copyLayer", ".", "beta", "\n", "", "else", ":", "\n", "            ", "self", ".", "beta", "=", "theano", ".", "shared", "(", "numpy", ".", "zeros", "(", "shape", ",", "dtype", "=", "floatX", ")", ",", "name", "=", "'beta{}'", ".", "format", "(", "layerNum", ")", ",", "borrow", "=", "True", ")", "\n", "", "if", "not", "(", "copyLayer", "is", "None", ")", ":", "\n", "            ", "assert", "copyLayer", ".", "gamma", ".", "get_value", "(", ")", ".", "shape", "==", "shape", "\n", "self", ".", "gamma", "=", "copyLayer", ".", "gamma", "\n", "", "else", ":", "\n", "            ", "self", ".", "gamma", "=", "theano", ".", "shared", "(", "numpy", ".", "ones", "(", "shape", ",", "dtype", "=", "floatX", ")", ",", "name", "=", "'gamma{}'", ".", "format", "(", "layerNum", ")", ",", "borrow", "=", "True", ")", "\n", "# mean and std are not shared, since streams might come from different statistics", "\n", "# and it is not supported by this implementation!?", "\n", "", "self", ".", "mean", "=", "theano", ".", "shared", "(", "numpy", ".", "zeros", "(", "shape", ",", "dtype", "=", "floatX", ")", ",", "name", "=", "'mean{}'", ".", "format", "(", "layerNum", ")", ",", "borrow", "=", "True", ")", "\n", "self", ".", "inv_std", "=", "theano", ".", "shared", "(", "numpy", ".", "ones", "(", "shape", ",", "dtype", "=", "floatX", ")", ",", "name", "=", "'inv_std{}'", ".", "format", "(", "layerNum", ")", ",", "borrow", "=", "True", ")", "\n", "if", "not", "(", "copyLayer", "is", "None", ")", ":", "\n", "            ", "self", ".", "mean", ".", "set_value", "(", "copyLayer", ".", "mean", ".", "get_value", "(", ")", ")", "\n", "self", ".", "inv_std", ".", "set_value", "(", "copyLayer", ".", "inv_std", ".", "get_value", "(", ")", ")", "\n", "", "self", ".", "weights", "=", "[", "]", "\n", "self", ".", "params", "=", "[", "]", "\n", "if", "self", ".", "cfgParams", ".", "_learn_beta", "is", "True", ":", "\n", "            ", "self", ".", "params", ".", "append", "(", "self", ".", "beta", ")", "\n", "", "if", "self", ".", "cfgParams", ".", "_learn_gamma", "is", "True", ":", "\n", "            ", "self", ".", "params", ".", "append", "(", "self", ".", "gamma", ")", "\n", "", "self", ".", "params_nontrained", "=", "[", "self", ".", "mean", ",", "self", ".", "inv_std", "]", "\n", "\n", "input_mean", "=", "T", ".", "mean", "(", "inputVar", ",", "axis", "=", "axes", ")", "\n", "input_inv_std", "=", "T", ".", "inv", "(", "T", ".", "sqrt", "(", "T", ".", "var", "(", "inputVar", ",", "axis", "=", "axes", ")", "+", "epsilon", ")", ")", "\n", "\n", "# Decide whether to use the stored averages or mini-batch statistics", "\n", "mean", "=", "T", ".", "switch", "(", "self", ".", "flag_on", ",", "input_mean", ",", "self", ".", "mean", ")", "\n", "inv_std", "=", "T", ".", "switch", "(", "self", ".", "flag_on", ",", "input_inv_std", ",", "self", ".", "inv_std", ")", "\n", "\n", "# Decide whether to update the stored averages", "\n", "# Trick: To update the stored statistics, we create memory-aliased", "\n", "# clones of the stored statistics:", "\n", "running_mean", "=", "theano", ".", "clone", "(", "self", ".", "mean", ",", "share_inputs", "=", "False", ")", "\n", "running_inv_std", "=", "theano", ".", "clone", "(", "self", ".", "inv_std", ",", "share_inputs", "=", "False", ")", "\n", "# set a default update for them:", "\n", "running_mean", ".", "default_update", "=", "T", ".", "switch", "(", "self", ".", "flag_on", ",", "\n", "(", "(", "1.", "-", "alpha", ")", "*", "running_mean", "+", "alpha", "*", "input_mean", ")", ",", "\n", "self", ".", "mean", ")", "\n", "running_inv_std", ".", "default_update", "=", "T", ".", "switch", "(", "self", ".", "flag_on", ",", "\n", "(", "(", "1.", "-", "alpha", ")", "*", "running_inv_std", "+", "alpha", "*", "input_inv_std", ")", ",", "\n", "self", ".", "inv_std", ")", "\n", "# and make sure they end up in the graph without participating in", "\n", "# the computation (this way their default_update will be collected", "\n", "# and applied, but the computation will be optimized away):", "\n", "mean", "+=", "0", "*", "running_mean", "\n", "inv_std", "+=", "0", "*", "running_inv_std", "\n", "\n", "# prepare dimshuffle pattern inserting broadcastable axes as needed", "\n", "param_axes", "=", "iter", "(", "range", "(", "inputVar", ".", "ndim", "-", "len", "(", "axes", ")", ")", ")", "\n", "pattern", "=", "[", "'x'", "if", "input_axis", "in", "axes", "else", "next", "(", "param_axes", ")", "for", "input_axis", "in", "range", "(", "inputVar", ".", "ndim", ")", "]", "\n", "\n", "# apply dimshuffle pattern to all parameters", "\n", "beta", "=", "self", ".", "beta", ".", "dimshuffle", "(", "pattern", ")", "\n", "gamma", "=", "self", ".", "gamma", ".", "dimshuffle", "(", "pattern", ")", "\n", "mean", "=", "mean", ".", "dimshuffle", "(", "pattern", ")", "\n", "inv_std", "=", "inv_std", ".", "dimshuffle", "(", "pattern", ")", "\n", "\n", "# normalize", "\n", "# self.output = (inputVar - mean) * (gamma * inv_std) + beta", "\n", "# where either inv_std == 1 or std == 1, depending on which one is used", "\n", "self", ".", "output", "=", "T", ".", "nnet", ".", "batch_normalization", "(", "inputVar", ",", "gamma", "=", "gamma", "*", "inv_std", ",", "beta", "=", "beta", ",", "mean", "=", "mean", ",", "std", "=", "1", ",", "mode", "=", "mode", ")", "\n", "self", ".", "output", ".", "name", "=", "'output_layer_{}'", ".", "format", "(", "self", ".", "layerNum", ")", "\n", "self", ".", "output_pre_act", "=", "self", ".", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.batchnormlayer.BatchNormLayer.unsetDeterministic": [[196, 202], ["batchnormlayer.BatchNormLayer.flag_on.set_value"], "methods", ["None"], ["", "def", "unsetDeterministic", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Enable batch normalization, learn mean and variance\n        :return: None\n        \"\"\"", "\n", "self", ".", "flag_on", ".", "set_value", "(", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.batchnormlayer.BatchNormLayer.setDeterministic": [[203, 209], ["batchnormlayer.BatchNormLayer.flag_on.set_value"], "methods", ["None"], ["", "def", "setDeterministic", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Disable batch normalization, use learned mean and variance\n        :return: None\n        \"\"\"", "\n", "self", ".", "flag_on", ".", "set_value", "(", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.batchnormlayer.BatchNormLayer.isDeterministic": [[210, 216], ["bool", "numpy.allclose", "batchnormlayer.BatchNormLayer.flag_on.get_value"], "methods", ["None"], ["", "def", "isDeterministic", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Check if batch normalization is enabled\n        :return: True if enabled\n        \"\"\"", "\n", "return", "bool", "(", "numpy", ".", "allclose", "(", "self", ".", "flag_on", ".", "get_value", "(", ")", ",", "0.0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.batchnormlayer.BatchNormLayer.__str__": [[217, 223], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Print configuration of layer\n        :return: configuration string\n        \"\"\"", "\n", "return", "\"epsilon {}, alpha {}\"", ".", "format", "(", "self", ".", "cfgParams", ".", "epsilon", ",", "self", ".", "cfgParams", ".", "alpha", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.poollayer.PoolLayerParams.__init__": [[41, 55], ["net.layerparams.LayerParams.__init__", "poollayer.PoolLayerParams.update"], "methods", ["home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.hiddenlayer.HiddenLayer.__init__", "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.layerparams.LayerParams.update"], ["    ", "def", "__init__", "(", "self", ",", "inputDim", "=", "None", ",", "poolsize", "=", "None", ",", "redDim", "=", "None", ",", "outputDim", "=", "None", ",", "activation", "=", "None", ",", "poolType", "=", "0", ")", ":", "\n", "        ", "\"\"\"\n\n        :type poolsize: tuple or list of length 2\n        :param poolsize: the downsampling (pooling) factor (#rows,#cols)\n        \"\"\"", "\n", "\n", "super", "(", "PoolLayerParams", ",", "self", ")", ".", "__init__", "(", "inputDim", ",", "outputDim", ")", "\n", "\n", "self", ".", "_poolsize", "=", "poolsize", "\n", "self", ".", "_redDim", "=", "redDim", "\n", "self", ".", "_activation", "=", "activation", "\n", "self", ".", "_poolType", "=", "poolType", "\n", "self", ".", "update", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.poollayer.PoolLayerParams.poolsize": [[60, 64], ["poollayer.PoolLayerParams.update"], "methods", ["home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.layerparams.LayerParams.update"], ["", "@", "poolsize", ".", "setter", "\n", "def", "poolsize", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_poolsize", "=", "value", "\n", "self", ".", "update", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.poollayer.PoolLayerParams.activation": [[65, 68], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "activation", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_activation", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.poollayer.PoolLayerParams.poolType": [[69, 72], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "poolType", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_poolType", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.poollayer.PoolLayerParams.update": [[73, 84], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        calc image_shape, \n        \"\"\"", "\n", "self", ".", "_outputDim", "=", "(", "self", ".", "_inputDim", "[", "0", "]", ",", "# batch_size", "\n", "self", ".", "_redDim", "*", "self", ".", "_inputDim", "[", "1", "]", "if", "self", ".", "_redDim", "is", "not", "None", "else", "self", ".", "_inputDim", "[", "1", "]", ",", "# number of kernels", "\n", "self", ".", "_inputDim", "[", "2", "]", "//", "self", ".", "_poolsize", "[", "0", "]", ",", "#  output H", "\n", "self", ".", "_inputDim", "[", "3", "]", "//", "self", ".", "_poolsize", "[", "1", "]", ")", "#  output W", "\n", "\n", "if", "(", "self", ".", "_poolsize", "[", "0", "]", "==", "1", ")", "and", "(", "self", ".", "_poolsize", "[", "1", "]", "==", "1", ")", ":", "\n", "            ", "self", ".", "_poolType", "=", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.poollayer.PoolLayer.__init__": [[91, 150], ["net.layer.Layer.__init__", "TypeError", "pool_2d", "activation", "pool_2d", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.hiddenlayer.HiddenLayer.__init__", "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.hiddenlayer.HiddenLayerParams.activation"], ["def", "__init__", "(", "self", ",", "rng", ",", "inputVar", ",", "cfgParams", ",", "copyLayer", "=", "None", ",", "layerNum", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Allocate a PoolLayer with shared variable internal parameters.\n\n        :type rng: numpy.random.RandomState\n        :param rng: a random number generator used to initialize weights\n\n        :type inputVar: theano.tensor.dtensor4\n        :param inputVar: symbolic image tensor, of shape image_shape\n\n        :type cfgParams: PoolLayerParams\n        \"\"\"", "\n", "import", "theano", "\n", "import", "theano", ".", "sandbox", ".", "neighbours", "\n", "import", "theano", ".", "tensor", "as", "T", "\n", "from", "theano", ".", "tensor", ".", "signal", ".", "pool", "import", "pool_2d", "\n", "\n", "super", "(", "PoolLayer", ",", "self", ")", ".", "__init__", "(", "rng", ")", "\n", "\n", "floatX", "=", "theano", ".", "config", ".", "floatX", "# @UndefinedVariable", "\n", "\n", "outputDim", "=", "cfgParams", ".", "outputDim", "\n", "poolsize", "=", "cfgParams", ".", "poolsize", "\n", "inputDim", "=", "cfgParams", ".", "inputDim", "\n", "activation", "=", "cfgParams", ".", "activation", "\n", "poolType", "=", "cfgParams", ".", "poolType", "\n", "\n", "self", ".", "cfgParams", "=", "cfgParams", "\n", "self", ".", "layerNum", "=", "layerNum", "\n", "\n", "self", ".", "inputVar", "=", "inputVar", "\n", "\n", "if", "inputVar", ".", "type", ".", "ndim", "!=", "4", ":", "\n", "            ", "raise", "TypeError", "(", ")", "\n", "\n", "", "self", ".", "params", "=", "[", "]", "\n", "self", ".", "weights", "=", "[", "]", "\n", "\n", "# downsample each feature map individually, using maxpooling", "\n", "if", "poolType", "==", "0", ":", "\n", "# use maxpooling", "\n", "            ", "pooled_out", "=", "pool_2d", "(", "input", "=", "self", ".", "inputVar", ",", "ds", "=", "poolsize", ",", "ignore_border", "=", "True", ",", "mode", "=", "'max'", ")", "\n", "", "elif", "poolType", "==", "1", ":", "\n", "# use average pooling", "\n", "            ", "pooled_out", "=", "pool_2d", "(", "input", "=", "self", ".", "inputVar", ",", "ds", "=", "poolsize", ",", "ignore_border", "=", "True", ",", "mode", "=", "'average_inc_pad'", ")", "\n", "", "elif", "poolType", "==", "3", ":", "\n", "# use subsampling and ignore border", "\n", "            ", "pooled_out", "=", "self", ".", "inputVar", "[", ":", ",", ":", ",", ":", "(", "inputDim", "[", "2", "]", "//", "poolsize", "[", "0", "]", ")", "*", "poolsize", "[", "0", "]", ",", ":", "(", "inputDim", "[", "3", "]", "//", "poolsize", "[", "1", "]", ")", "*", "poolsize", "[", "1", "]", "]", "[", ":", ",", ":", ",", ":", ":", "poolsize", "[", "0", "]", ",", ":", ":", "poolsize", "[", "1", "]", "]", "\n", "", "elif", "poolType", "==", "-", "1", ":", "\n", "# no pooling at all", "\n", "            ", "pooled_out", "=", "self", ".", "inputVar", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", ")", "\n", "", "self", ".", "output_pre_act", "=", "pooled_out", "\n", "\n", "self", ".", "output", "=", "(", "pooled_out", "if", "activation", "is", "None", "\n", "else", "activation", "(", "pooled_out", ")", ")", "\n", "\n", "self", ".", "output", ".", "name", "=", "'output_layer_{}'", ".", "format", "(", "self", ".", "layerNum", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.poollayer.PoolLayer.__str__": [[151, 158], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Print configuration of layer\n        :return: configuration string\n        \"\"\"", "\n", "return", "\"poolsize {}, pooltype {}, activation {}\"", ".", "format", "(", "self", ".", "cfgParams", ".", "poolsize", ",", "self", ".", "cfgParams", ".", "poolType", ",", "\n", "self", ".", "cfgParams", ".", "activation_str", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.layer.Layer.__init__": [[40, 48], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "rng", ")", ":", "\n", "        ", "\"\"\"\n        Constructor\n        \"\"\"", "\n", "self", ".", "weights", "=", "[", "]", "\n", "self", ".", "params", "=", "[", "]", "\n", "self", ".", "params_nontrained", "=", "[", "]", "\n", "self", ".", "rng", "=", "rng", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.layer.Layer.orthogonalize": [[49, 56], ["numpy.reshape", "numpy.linalg.svd", "numpy.reshape", "numpy.reshape.swapaxes"], "methods", ["None"], ["", "def", "orthogonalize", "(", "self", ",", "init_vals", ")", ":", "\n", "# try pca to create an orthogonal set of filters to start with", "\n", "        ", "wInitVals", "=", "numpy", ".", "reshape", "(", "init_vals", ",", "(", "init_vals", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ")", "\n", "svd", "=", "numpy", ".", "linalg", ".", "svd", "(", "wInitVals", ".", "T", ")", "\n", "U", "=", "svd", "[", "0", "]", "\n", "wInitVals", "=", "U", ".", "T", "[", "0", ":", "init_vals", ".", "shape", "[", "0", "]", "]", ".", "T", "\n", "return", "numpy", ".", "reshape", "(", "wInitVals", ".", "swapaxes", "(", "0", ",", "1", ")", ",", "init_vals", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.layer.Layer.getOptimalInitMethod": [[57, 69], ["NotImplementedError", "str"], "methods", ["None"], ["", "def", "getOptimalInitMethod", "(", "self", ",", "act_str", ")", ":", "\n", "\n", "        ", "if", "act_str", "==", "ReLU", ".", "__name__", ":", "\n", "            ", "return", "'He'", "\n", "", "elif", "act_str", "==", "sigmoid", ".", "__name__", ":", "\n", "            ", "return", "'sigmoid'", "\n", "", "elif", "act_str", "in", "tanh", ".", "__name__", ":", "\n", "            ", "return", "'tanh'", "\n", "", "elif", "act_str", "is", "None", "or", "str", "(", "act_str", ")", "==", "'None'", ":", "\n", "            ", "return", "None", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Unknown activation function: {}\"", ".", "format", "(", "act_str", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.layer.Layer.getInitVals": [[70, 125], ["UserWarning", "layer.Layer.getOptimalInitMethod", "layer.Layer.orthogonalize", "numpy.sqrt", "numpy.asarray", "layer.Layer.rng.normal", "numpy.asarray", "NotImplementedError", "numpy.sqrt", "numpy.asarray", "numpy.prod", "layer.Layer.rng.normal", "layer.Layer.rng.uniform", "numpy.sqrt", "numpy.asarray", "NotImplementedError", "numpy.asarray", "NotImplementedError", "numpy.prod", "layer.Layer.rng.uniform", "numpy.sqrt", "layer.Layer.rng.uniform", "NotImplementedError", "numpy.asarray", "numpy.asarray", "layer.Layer.rng.uniform", "numpy.asarray", "NotImplementedError", "layer.Layer.rng.uniform", "numpy.prod", "layer.Layer.rng.uniform", "numpy.prod", "numpy.prod", "numpy.prod", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum"], "methods", ["home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.layer.Layer.getOptimalInitMethod", "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.layer.Layer.orthogonalize"], ["", "", "def", "getInitVals", "(", "self", ",", "shape", ",", "mode", ",", "act_fn", "=", "None", ",", "method", "=", "None", ",", "orthogonal", "=", "False", ")", ":", "\n", "        ", "import", "theano", "\n", "\n", "floatX", "=", "theano", ".", "config", ".", "floatX", "# @UndefinedVariable", "\n", "\n", "if", "act_fn", "is", "None", "and", "method", "is", "None", ":", "\n", "            ", "raise", "UserWarning", "(", "\"act_fn and method not defined! At least one must be specified.\"", ")", "\n", "\n", "", "if", "act_fn", "is", "not", "None", "and", "method", "is", "None", ":", "\n", "            ", "method", "=", "self", ".", "getOptimalInitMethod", "(", "act_fn", ")", "\n", "\n", "# initialize weights with random weights", "\n", "", "if", "method", "==", "'He'", ":", "\n", "# Initialization of He, Zhang, Ren and Sun, Delving Deep into Rectifiers, 2015", "\n", "            ", "if", "mode", "==", "'conv'", ":", "\n", "                ", "W_bound", "=", "numpy", ".", "sqrt", "(", "2.", "/", "numpy", ".", "prod", "(", "shape", "[", "1", ":", "]", ")", ")", "\n", "init_vals", "=", "numpy", ".", "asarray", "(", "self", ".", "rng", ".", "normal", "(", "loc", "=", "0.0", ",", "scale", "=", "W_bound", ",", "size", "=", "shape", ")", ",", "dtype", "=", "floatX", ")", "\n", "", "elif", "mode", "==", "'fc'", ":", "\n", "                ", "init_vals", "=", "numpy", ".", "asarray", "(", "self", ".", "rng", ".", "normal", "(", "loc", "=", "0.0", ",", "scale", "=", "0.01", ",", "size", "=", "shape", ")", ",", "dtype", "=", "floatX", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "(", ")", "\n", "", "", "elif", "method", "==", "'Xavier'", ":", "\n", "# Initialization \"Xavier\" of Glorot and Bengio, Understanding the difficulty of training deep feedforward neural networks, 2010", "\n", "            ", "if", "mode", "==", "'conv'", ":", "\n", "                ", "W_bound", "=", "numpy", ".", "sqrt", "(", "3.", "/", "numpy", ".", "prod", "(", "shape", "[", "1", ":", "]", ")", ")", "\n", "init_vals", "=", "numpy", ".", "asarray", "(", "self", ".", "rng", ".", "uniform", "(", "low", "=", "-", "W_bound", ",", "high", "=", "W_bound", ",", "size", "=", "shape", ")", ",", "dtype", "=", "floatX", ")", "\n", "", "elif", "mode", "==", "'fc'", ":", "\n", "                ", "W_bound", "=", "numpy", ".", "sqrt", "(", "1.", "/", "shape", "[", "0", "]", ")", "\n", "init_vals", "=", "numpy", ".", "asarray", "(", "self", ".", "rng", ".", "uniform", "(", "low", "=", "-", "W_bound", ",", "high", "=", "W_bound", ",", "size", "=", "shape", ")", ",", "dtype", "=", "floatX", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "(", ")", "\n", "", "", "elif", "method", "==", "'sigmoid'", ":", "\n", "            ", "if", "mode", "==", "'conv'", ":", "\n", "                ", "W_bound", "=", "4.", "*", "numpy", ".", "sqrt", "(", "6.", "/", "(", "numpy", ".", "prod", "(", "shape", "[", "1", ":", "]", ")", "+", "(", "shape", "[", "0", "]", "*", "numpy", ".", "prod", "(", "shape", "[", "2", ":", "]", ")", ")", ")", ")", "\n", "init_vals", "=", "numpy", ".", "asarray", "(", "self", ".", "rng", ".", "uniform", "(", "low", "=", "-", "W_bound", ",", "high", "=", "W_bound", ",", "size", "=", "shape", ")", ",", "dtype", "=", "floatX", ")", "\n", "", "elif", "mode", "==", "'fc'", ":", "\n", "                ", "init_vals", "=", "4.", "*", "numpy", ".", "asarray", "(", "self", ".", "rng", ".", "uniform", "(", "low", "=", "-", "numpy", ".", "sqrt", "(", "6.", "/", "numpy", ".", "sum", "(", "shape", ")", ")", ",", "\n", "high", "=", "numpy", ".", "sqrt", "(", "6.", "/", "numpy", ".", "sum", "(", "shape", ")", ")", ",", "\n", "size", "=", "shape", ")", ",", "dtype", "=", "floatX", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "(", ")", "\n", "", "", "elif", "method", "==", "'tanh'", "or", "method", "is", "None", ":", "\n", "            ", "if", "mode", "==", "'conv'", ":", "\n", "                ", "W_bound", "=", "1.", "/", "(", "numpy", ".", "prod", "(", "shape", "[", "1", ":", "]", ")", "+", "(", "shape", "[", "0", "]", "*", "numpy", ".", "prod", "(", "shape", "[", "2", ":", "]", ")", ")", ")", "\n", "init_vals", "=", "numpy", ".", "asarray", "(", "self", ".", "rng", ".", "uniform", "(", "low", "=", "-", "W_bound", ",", "high", "=", "W_bound", ",", "size", "=", "shape", ")", ",", "dtype", "=", "floatX", ")", "\n", "", "elif", "mode", "==", "'fc'", ":", "\n", "                ", "init_vals", "=", "numpy", ".", "asarray", "(", "self", ".", "rng", ".", "uniform", "(", "low", "=", "-", "numpy", ".", "sqrt", "(", "6.", "/", "numpy", ".", "sum", "(", "shape", ")", ")", ",", "\n", "high", "=", "numpy", ".", "sqrt", "(", "6.", "/", "numpy", ".", "sum", "(", "shape", ")", ")", ",", "\n", "size", "=", "shape", ")", ",", "dtype", "=", "floatX", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "(", ")", "\n", "", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Unknown method!\"", ")", "\n", "\n", "", "return", "init_vals", "if", "orthogonal", "is", "False", "else", "self", ".", "orthogonalize", "(", "init_vals", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.resnet.ResNetParams.__init__": [[46, 90], ["net.netbase.NetBaseParams.__init__", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.hiddenlayer.HiddenLayer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "type", "=", "0", ",", "nChan", "=", "1", ",", "wIn", "=", "128", ",", "hIn", "=", "128", ",", "batchSize", "=", "128", ",", "numJoints", "=", "16", ",", "nDims", "=", "3", ")", ":", "\n", "        ", "\"\"\"\n        Init the parametrization\n\n        :type type: int\n        :param type: type of descr network\n        \"\"\"", "\n", "\n", "super", "(", "ResNetParams", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "batch_size", "=", "batchSize", "\n", "self", ".", "numJoints", "=", "numJoints", "\n", "self", ".", "nDims", "=", "nDims", "\n", "self", ".", "numInputs", "=", "1", "\n", "self", ".", "inputDim", "=", "(", "batchSize", ",", "nChan", ",", "hIn", ",", "wIn", ")", "\n", "self", ".", "type", "=", "type", "\n", "\n", "if", "type", "==", "0", ":", "\n", "# set in net class", "\n", "            ", "self", ".", "numOutputs", "=", "1", "\n", "\n", "self", ".", "outputDim", "=", "(", "batchSize", ",", "numJoints", "*", "nDims", ")", "\n", "", "elif", "type", "==", "1", ":", "\n", "# set in net class", "\n", "            ", "self", ".", "numOutputs", "=", "1", "\n", "\n", "self", ".", "outputDim", "=", "(", "batchSize", ",", "numJoints", "*", "nDims", ")", "\n", "", "elif", "type", "==", "2", ":", "\n", "# set in net class", "\n", "            ", "self", ".", "numOutputs", "=", "1", "\n", "\n", "self", ".", "outputDim", "=", "(", "batchSize", ",", "numJoints", "*", "nDims", ")", "\n", "", "elif", "type", "==", "3", ":", "\n", "# set in net class", "\n", "            ", "self", ".", "numOutputs", "=", "1", "\n", "\n", "self", ".", "outputDim", "=", "(", "batchSize", ",", "numJoints", "*", "nDims", ")", "\n", "", "elif", "type", "==", "4", ":", "\n", "# set in net class", "\n", "            ", "self", ".", "numOutputs", "=", "1", "\n", "\n", "self", ".", "outputDim", "=", "(", "batchSize", ",", "numJoints", "*", "nDims", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"not implemented\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.resnet.ResNet.__init__": [[93, 341], ["resnet.ResNet.load", "Exception", "T.tensor4", "isinstance", "resnet.ResNet.layers.append", "resnet.ResNet.add_res_layers", "resnet.ResNet.add_res_layers", "resnet.ResNet.add_res_layers", "resnet.ResNet.add_res_layers", "resnet.ResNet.layers.append", "resnet.ResNet.layers.append", "resnet.ResNet.layers.append", "resnet.ResNet.layers.append", "resnet.ResNet.layers.append", "NotImplementedError", "net.convpoollayer.ConvPoolLayer", "net.batchnormlayer.BatchNormLayer", "net.nonlinearitylayer.NonlinearityLayer", "net.hiddenlayer.HiddenLayer", "net.hiddenlayer.HiddenLayer", "net.hiddenlayer.HiddenLayer", "resnet.ResNet.layers.append", "resnet.ResNet.add_res_layers", "resnet.ResNet.add_res_layers", "resnet.ResNet.add_res_layers", "resnet.ResNet.add_res_layers", "resnet.ResNet.layers.append", "resnet.ResNet.layers.append", "resnet.ResNet.layers.append", "resnet.ResNet.layers.append", "resnet.ResNet.layers.append", "resnet.ResNet.layers.append", "net.convpoollayer.ConvPoolLayerParams", "net.batchnormlayer.BatchNormLayerParams", "net.nonlinearitylayer.NonlinearityLayerParams", "resnet.ResNet.layers[].output.flatten", "net.hiddenlayer.HiddenLayerParams", "net.hiddenlayer.HiddenLayerParams", "net.hiddenlayer.HiddenLayerParams", "net.convpoollayer.ConvPoolLayer", "net.batchnormlayer.BatchNormLayer", "net.nonlinearitylayer.NonlinearityLayer", "net.hiddenlayer.HiddenLayer", "net.hiddenlayer.HiddenLayer", "net.hiddenlayer.HiddenLayer", "net.hiddenlayer.HiddenLayer", "resnet.ResNet.layers.append", "resnet.ResNet.add_res_layers", "resnet.ResNet.add_res_layers", "resnet.ResNet.add_res_layers", "resnet.ResNet.add_res_layers", "resnet.ResNet.layers.append", "resnet.ResNet.layers.append", "resnet.ResNet.layers.append", "resnet.ResNet.layers.append", "resnet.ResNet.layers.append", "resnet.ResNet.layers.append", "resnet.ResNet.layers.append", "len", "len", "len", "len", "len", "len", "net.convpoollayer.ConvPoolLayerParams", "net.batchnormlayer.BatchNormLayerParams", "net.nonlinearitylayer.NonlinearityLayerParams", "resnet.ResNet.layers[].output.flatten", "net.hiddenlayer.HiddenLayerParams", "net.hiddenlayer.HiddenLayerParams", "net.hiddenlayer.HiddenLayerParams", "net.hiddenlayer.HiddenLayerParams", "net.convpoollayer.ConvPoolLayer", "net.batchnormlayer.BatchNormLayer", "net.nonlinearitylayer.NonlinearityLayer", "net.hiddenlayer.HiddenLayer", "net.dropoutlayer.DropoutLayer", "net.hiddenlayer.HiddenLayer", "net.dropoutlayer.DropoutLayer", "net.hiddenlayer.HiddenLayer", "resnet.ResNet.layers.append", "resnet.ResNet.add_res_layers", "resnet.ResNet.add_res_layers", "resnet.ResNet.add_res_layers", "resnet.ResNet.add_res_layers", "resnet.ResNet.layers.append", "resnet.ResNet.layers.append", "resnet.ResNet.layers.append", "resnet.ResNet.layers.append", "resnet.ResNet.layers.append", "resnet.ResNet.layers.append", "resnet.ResNet.layers.append", "len", "len", "len", "len", "len", "len", "len", "net.convpoollayer.ConvPoolLayerParams", "net.batchnormlayer.BatchNormLayerParams", "net.nonlinearitylayer.NonlinearityLayerParams", "resnet.ResNet.layers[].output.flatten", "net.hiddenlayer.HiddenLayerParams", "net.dropoutlayer.DropoutLayerParams", "net.hiddenlayer.HiddenLayerParams", "net.dropoutlayer.DropoutLayerParams", "net.hiddenlayer.HiddenLayerParams", "net.convpoollayer.ConvPoolLayer", "net.batchnormlayer.BatchNormLayer", "net.nonlinearitylayer.NonlinearityLayer", "net.hiddenlayer.HiddenLayer", "net.dropoutlayer.DropoutLayer", "net.hiddenlayer.HiddenLayer", "net.dropoutlayer.DropoutLayer", "net.hiddenlayer.HiddenLayer", "resnet.ResNet.layers.append", "resnet.ResNet.add_res_layers", "resnet.ResNet.add_res_layers", "resnet.ResNet.add_res_layers", "resnet.ResNet.add_res_layers", "resnet.ResNet.layers.append", "resnet.ResNet.layers.append", "resnet.ResNet.layers.append", "resnet.ResNet.layers.append", "resnet.ResNet.layers.append", "resnet.ResNet.layers.append", "resnet.ResNet.layers.append", "resnet.ResNet.layers.append", "NotImplementedError", "numpy.prod", "len", "len", "len", "len", "len", "len", "len", "len", "net.convpoollayer.ConvPoolLayerParams", "net.batchnormlayer.BatchNormLayerParams", "net.nonlinearitylayer.NonlinearityLayerParams", "resnet.ResNet.layers[].output.flatten", "net.hiddenlayer.HiddenLayerParams", "net.dropoutlayer.DropoutLayerParams", "net.hiddenlayer.HiddenLayerParams", "net.dropoutlayer.DropoutLayerParams", "net.hiddenlayer.HiddenLayerParams", "net.convpoollayer.ConvPoolLayer", "net.batchnormlayer.BatchNormLayer", "net.nonlinearitylayer.NonlinearityLayer", "net.hiddenlayer.HiddenLayer", "net.dropoutlayer.DropoutLayer", "net.hiddenlayer.HiddenLayer", "net.dropoutlayer.DropoutLayer", "net.hiddenlayer.HiddenLayer", "net.hiddenlayer.HiddenLayer", "numpy.prod", "len", "len", "len", "len", "len", "len", "len", "len", "net.convpoollayer.ConvPoolLayerParams", "net.batchnormlayer.BatchNormLayerParams", "net.nonlinearitylayer.NonlinearityLayerParams", "resnet.ResNet.layers[].output.flatten", "net.hiddenlayer.HiddenLayerParams", "net.dropoutlayer.DropoutLayerParams", "net.hiddenlayer.HiddenLayerParams", "net.dropoutlayer.DropoutLayerParams", "net.hiddenlayer.HiddenLayerParams", "net.hiddenlayer.HiddenLayerParams", "numpy.prod", "len", "len", "len", "len", "len", "len", "len", "len", "len", "numpy.prod", "numpy.prod"], "methods", ["home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.resnet.ResNet.add_res_layers", "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.resnet.ResNet.add_res_layers", "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.resnet.ResNet.add_res_layers", "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.resnet.ResNet.add_res_layers", "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.resnet.ResNet.add_res_layers", "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.resnet.ResNet.add_res_layers", "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.resnet.ResNet.add_res_layers", "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.resnet.ResNet.add_res_layers", "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.resnet.ResNet.add_res_layers", "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.resnet.ResNet.add_res_layers", "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.resnet.ResNet.add_res_layers", "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.resnet.ResNet.add_res_layers", "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.resnet.ResNet.add_res_layers", "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.resnet.ResNet.add_res_layers", "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.resnet.ResNet.add_res_layers", "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.resnet.ResNet.add_res_layers", "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.resnet.ResNet.add_res_layers", "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.resnet.ResNet.add_res_layers", "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.resnet.ResNet.add_res_layers", "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.resnet.ResNet.add_res_layers"], ["    ", "def", "__init__", "(", "self", ",", "rng", ",", "inputVar", "=", "None", ",", "cfgParams", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        @see https://github.com/KaimingHe/resnet-1k-layers/blob/master/resnet-pre-act.lua\n        :type cfgParams: DescriptorNetParams\n        \"\"\"", "\n", "import", "theano", ".", "tensor", "as", "T", "\n", "\n", "self", ".", "_params_filter", "=", "[", "]", "\n", "self", ".", "_weights_filter", "=", "[", "]", "\n", "\n", "if", "cfgParams", "is", "None", ":", "\n", "            ", "raise", "Exception", "(", "\"Cannot create a Net without config parameters (ie. cfgParams==None)\"", ")", "\n", "\n", "", "if", "inputVar", "is", "None", ":", "\n", "            ", "inputVar", "=", "T", ".", "tensor4", "(", "'x'", ")", "# input variable", "\n", "", "elif", "isinstance", "(", "inputVar", ",", "str", ")", ":", "\n", "            ", "raise", "NotImplementedError", "(", ")", "\n", "\n", "", "self", ".", "inputVar", "=", "inputVar", "\n", "self", ".", "cfgParams", "=", "cfgParams", "\n", "\n", "# create network", "\n", "self", ".", "layers", "=", "[", "]", "\n", "\n", "batchSize", "=", "cfgParams", ".", "batch_size", "\n", "\n", "# create structure", "\n", "if", "cfgParams", ".", "type", "==", "0", ":", "\n", "# Try ResNet similar configuration", "\n", "            ", "depth", "=", "47", "\n", "assert", "(", "depth", "-", "2", ")", "%", "9", "==", "0", ",", "'depth should be 9n+2 (e.g., 164 or 1001)'", "\n", "n", "=", "(", "depth", "-", "2", ")", "/", "9", "\n", "\n", "nStages", "=", "[", "32", ",", "64", ",", "128", ",", "256", ",", "256", "]", "\n", "\n", "self", ".", "layers", ".", "append", "(", "ConvPoolLayer", "(", "rng", ",", "self", ".", "inputVar", ",", "\n", "ConvPoolLayerParams", "(", "inputDim", "=", "self", ".", "cfgParams", ".", "inputDim", ",", "nFilters", "=", "nStages", "[", "0", "]", ",", "\n", "filterDim", "=", "(", "5", ",", "5", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "\n", "poolsize", "=", "(", "2", ",", "2", ")", ",", "border_mode", "=", "'same'", ",", "activation", "=", "None", ",", "\n", "init_method", "=", "'He'", ")", ",", "\n", "layerNum", "=", "len", "(", "self", ".", "layers", ")", ")", ")", "# one conv at the beginning", "\n", "rout", "=", "self", ".", "add_res_layers", "(", "rng", ",", "self", ".", "layers", "[", "-", "1", "]", ".", "output", ",", "self", ".", "layers", "[", "-", "1", "]", ".", "cfgParams", ".", "outputDim", ",", "nStages", "[", "1", "]", ",", "n", ",", "2", ")", "# Stage 1", "\n", "rout", "=", "self", ".", "add_res_layers", "(", "rng", ",", "rout", ",", "self", ".", "layers", "[", "-", "1", "]", ".", "cfgParams", ".", "outputDim", ",", "nStages", "[", "2", "]", ",", "n", ",", "2", ")", "# Stage 2", "\n", "rout", "=", "self", ".", "add_res_layers", "(", "rng", ",", "rout", ",", "self", ".", "layers", "[", "-", "1", "]", ".", "cfgParams", ".", "outputDim", ",", "nStages", "[", "3", "]", ",", "n", ",", "2", ")", "# Stage 3", "\n", "rout", "=", "self", ".", "add_res_layers", "(", "rng", ",", "rout", ",", "self", ".", "layers", "[", "-", "1", "]", ".", "cfgParams", ".", "outputDim", ",", "nStages", "[", "4", "]", ",", "n", ",", "2", ")", "# Stage 4", "\n", "self", ".", "layers", ".", "append", "(", "BatchNormLayer", "(", "rng", ",", "rout", ",", "BatchNormLayerParams", "(", "inputDim", "=", "self", ".", "layers", "[", "-", "1", "]", ".", "cfgParams", ".", "outputDim", ")", ",", "layerNum", "=", "len", "(", "self", ".", "layers", ")", ")", ")", "\n", "self", ".", "layers", ".", "append", "(", "NonlinearityLayer", "(", "rng", ",", "self", ".", "layers", "[", "-", "1", "]", ".", "output", ",", "NonlinearityLayerParams", "(", "inputDim", "=", "self", ".", "layers", "[", "-", "1", "]", ".", "cfgParams", ".", "outputDim", ",", "activation", "=", "ReLU", ")", ",", "layerNum", "=", "len", "(", "self", ".", "layers", ")", ")", ")", "\n", "# self.layers.append(GlobalAveragePoolLayer(rng, self.layers[-1].output, GlobalAveragePoolLayerParams(inputDim=self.layers[-1].cfgParams.outputDim), layerNum=len(self.layers)))", "\n", "self", ".", "layers", ".", "append", "(", "HiddenLayer", "(", "rng", ",", "self", ".", "layers", "[", "-", "1", "]", ".", "output", ".", "flatten", "(", "2", ")", ",", "\n", "HiddenLayerParams", "(", "# inputDim=self.layers[-1].cfgParams.outputDim,", "\n", "inputDim", "=", "(", "self", ".", "layers", "[", "-", "1", "]", ".", "cfgParams", ".", "outputDim", "[", "0", "]", ",", "numpy", ".", "prod", "(", "self", ".", "layers", "[", "-", "1", "]", ".", "cfgParams", ".", "outputDim", "[", "1", ":", "]", ")", ")", ",", "\n", "outputDim", "=", "(", "batchSize", ",", "1024", ")", ",", "activation", "=", "ReLU", ")", ",", "\n", "layerNum", "=", "len", "(", "self", ".", "layers", ")", ")", ")", "\n", "self", ".", "layers", ".", "append", "(", "HiddenLayer", "(", "rng", ",", "self", ".", "layers", "[", "-", "1", "]", ".", "output", ",", "\n", "HiddenLayerParams", "(", "inputDim", "=", "self", ".", "layers", "[", "-", "1", "]", ".", "cfgParams", ".", "outputDim", ",", "\n", "outputDim", "=", "(", "batchSize", ",", "1024", ")", ",", "activation", "=", "ReLU", ")", ",", "\n", "layerNum", "=", "len", "(", "self", ".", "layers", ")", ")", ")", "\n", "self", ".", "layers", ".", "append", "(", "HiddenLayer", "(", "rng", ",", "self", ".", "layers", "[", "-", "1", "]", ".", "output", ",", "\n", "HiddenLayerParams", "(", "inputDim", "=", "self", ".", "layers", "[", "-", "1", "]", ".", "cfgParams", ".", "outputDim", ",", "\n", "outputDim", "=", "(", "batchSize", ",", "self", ".", "cfgParams", ".", "numJoints", "*", "self", ".", "cfgParams", ".", "nDims", ")", ",", "\n", "activation", "=", "None", ")", ",", "\n", "layerNum", "=", "len", "(", "self", ".", "layers", ")", ")", ")", "\n", "\n", "self", ".", "output", "=", "self", ".", "layers", "[", "-", "1", "]", ".", "output", "\n", "", "elif", "cfgParams", ".", "type", "==", "1", ":", "\n", "# Try ResNet similar configuration", "\n", "            ", "depth", "=", "47", "\n", "assert", "(", "depth", "-", "2", ")", "%", "9", "==", "0", ",", "'depth should be 9n+2 (e.g., 164 or 1001)'", "\n", "n", "=", "(", "depth", "-", "2", ")", "/", "9", "\n", "\n", "nStages", "=", "[", "32", ",", "64", ",", "128", ",", "256", ",", "256", "]", "\n", "\n", "self", ".", "layers", ".", "append", "(", "ConvPoolLayer", "(", "rng", ",", "self", ".", "inputVar", ",", "\n", "ConvPoolLayerParams", "(", "inputDim", "=", "self", ".", "cfgParams", ".", "inputDim", ",", "nFilters", "=", "nStages", "[", "0", "]", ",", "\n", "filterDim", "=", "(", "5", ",", "5", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "\n", "poolsize", "=", "(", "2", ",", "2", ")", ",", "border_mode", "=", "'same'", ",", "activation", "=", "None", ",", "\n", "init_method", "=", "'He'", ")", ",", "\n", "layerNum", "=", "len", "(", "self", ".", "layers", ")", ")", ")", "# one conv at the beginning", "\n", "rout", "=", "self", ".", "add_res_layers", "(", "rng", ",", "self", ".", "layers", "[", "-", "1", "]", ".", "output", ",", "self", ".", "layers", "[", "-", "1", "]", ".", "cfgParams", ".", "outputDim", ",", "nStages", "[", "1", "]", ",", "n", ",", "2", ")", "# Stage 1", "\n", "rout", "=", "self", ".", "add_res_layers", "(", "rng", ",", "rout", ",", "self", ".", "layers", "[", "-", "1", "]", ".", "cfgParams", ".", "outputDim", ",", "nStages", "[", "2", "]", ",", "n", ",", "2", ")", "# Stage 2", "\n", "rout", "=", "self", ".", "add_res_layers", "(", "rng", ",", "rout", ",", "self", ".", "layers", "[", "-", "1", "]", ".", "cfgParams", ".", "outputDim", ",", "nStages", "[", "3", "]", ",", "n", ",", "2", ")", "# Stage 3", "\n", "rout", "=", "self", ".", "add_res_layers", "(", "rng", ",", "rout", ",", "self", ".", "layers", "[", "-", "1", "]", ".", "cfgParams", ".", "outputDim", ",", "nStages", "[", "4", "]", ",", "n", ",", "2", ")", "# Stage 4", "\n", "self", ".", "layers", ".", "append", "(", "BatchNormLayer", "(", "rng", ",", "rout", ",", "BatchNormLayerParams", "(", "inputDim", "=", "self", ".", "layers", "[", "-", "1", "]", ".", "cfgParams", ".", "outputDim", ")", ",", "layerNum", "=", "len", "(", "self", ".", "layers", ")", ")", ")", "\n", "self", ".", "layers", ".", "append", "(", "NonlinearityLayer", "(", "rng", ",", "self", ".", "layers", "[", "-", "1", "]", ".", "output", ",", "NonlinearityLayerParams", "(", "inputDim", "=", "self", ".", "layers", "[", "-", "1", "]", ".", "cfgParams", ".", "outputDim", ",", "activation", "=", "ReLU", ")", ",", "layerNum", "=", "len", "(", "self", ".", "layers", ")", ")", ")", "\n", "self", ".", "layers", ".", "append", "(", "HiddenLayer", "(", "rng", ",", "self", ".", "layers", "[", "-", "1", "]", ".", "output", ".", "flatten", "(", "2", ")", ",", "\n", "HiddenLayerParams", "(", "inputDim", "=", "(", "self", ".", "layers", "[", "-", "1", "]", ".", "cfgParams", ".", "outputDim", "[", "0", "]", ",", "numpy", ".", "prod", "(", "self", ".", "layers", "[", "-", "1", "]", ".", "cfgParams", ".", "outputDim", "[", "1", ":", "]", ")", ")", ",", "\n", "outputDim", "=", "(", "batchSize", ",", "1024", ")", ",", "activation", "=", "ReLU", ")", ",", "\n", "layerNum", "=", "len", "(", "self", ".", "layers", ")", ")", ")", "\n", "self", ".", "layers", ".", "append", "(", "HiddenLayer", "(", "rng", ",", "self", ".", "layers", "[", "-", "1", "]", ".", "output", ",", "\n", "HiddenLayerParams", "(", "inputDim", "=", "self", ".", "layers", "[", "-", "1", "]", ".", "cfgParams", ".", "outputDim", ",", "\n", "outputDim", "=", "(", "batchSize", ",", "1024", ")", ",", "activation", "=", "ReLU", ")", ",", "\n", "layerNum", "=", "len", "(", "self", ".", "layers", ")", ")", ")", "\n", "self", ".", "layers", ".", "append", "(", "HiddenLayer", "(", "rng", ",", "self", ".", "layers", "[", "-", "1", "]", ".", "output", ",", "\n", "HiddenLayerParams", "(", "inputDim", "=", "self", ".", "layers", "[", "-", "1", "]", ".", "cfgParams", ".", "outputDim", ",", "\n", "outputDim", "=", "(", "batchSize", ",", "30", ")", ",", "activation", "=", "None", ")", ",", "\n", "layerNum", "=", "len", "(", "self", ".", "layers", ")", ")", ")", "\n", "self", ".", "layers", ".", "append", "(", "HiddenLayer", "(", "rng", ",", "self", ".", "layers", "[", "-", "1", "]", ".", "output", ",", "\n", "HiddenLayerParams", "(", "inputDim", "=", "self", ".", "layers", "[", "-", "1", "]", ".", "cfgParams", ".", "outputDim", ",", "\n", "outputDim", "=", "(", "batchSize", ",", "self", ".", "cfgParams", ".", "numJoints", "*", "self", ".", "cfgParams", ".", "nDims", ")", ",", "\n", "activation", "=", "None", ")", ",", "\n", "layerNum", "=", "len", "(", "self", ".", "layers", ")", ")", ")", "\n", "\n", "self", ".", "output", "=", "self", ".", "layers", "[", "-", "1", "]", ".", "output", "\n", "", "elif", "cfgParams", ".", "type", "==", "2", ":", "\n", "# Try ResNet similar configuration", "\n", "            ", "depth", "=", "47", "\n", "assert", "(", "depth", "-", "2", ")", "%", "9", "==", "0", ",", "'depth should be 9n+2 (e.g., 164 or 1001)'", "\n", "n", "=", "(", "depth", "-", "2", ")", "/", "9", "\n", "\n", "nStages", "=", "[", "32", ",", "64", ",", "128", ",", "256", ",", "256", "]", "\n", "\n", "self", ".", "layers", ".", "append", "(", "ConvPoolLayer", "(", "rng", ",", "self", ".", "inputVar", ",", "\n", "ConvPoolLayerParams", "(", "inputDim", "=", "self", ".", "cfgParams", ".", "inputDim", ",", "nFilters", "=", "nStages", "[", "0", "]", ",", "\n", "filterDim", "=", "(", "5", ",", "5", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "\n", "poolsize", "=", "(", "2", ",", "2", ")", ",", "border_mode", "=", "'same'", ",", "activation", "=", "None", ",", "\n", "init_method", "=", "'He'", ")", ",", "\n", "layerNum", "=", "len", "(", "self", ".", "layers", ")", ")", ")", "# one conv at the beginning", "\n", "rout", "=", "self", ".", "add_res_layers", "(", "rng", ",", "self", ".", "layers", "[", "-", "1", "]", ".", "output", ",", "self", ".", "layers", "[", "-", "1", "]", ".", "cfgParams", ".", "outputDim", ",", "nStages", "[", "1", "]", ",", "n", ",", "2", ")", "# Stage 1", "\n", "rout", "=", "self", ".", "add_res_layers", "(", "rng", ",", "rout", ",", "self", ".", "layers", "[", "-", "1", "]", ".", "cfgParams", ".", "outputDim", ",", "nStages", "[", "2", "]", ",", "n", ",", "2", ")", "# Stage 2", "\n", "rout", "=", "self", ".", "add_res_layers", "(", "rng", ",", "rout", ",", "self", ".", "layers", "[", "-", "1", "]", ".", "cfgParams", ".", "outputDim", ",", "nStages", "[", "3", "]", ",", "n", ",", "2", ")", "# Stage 3", "\n", "rout", "=", "self", ".", "add_res_layers", "(", "rng", ",", "rout", ",", "self", ".", "layers", "[", "-", "1", "]", ".", "cfgParams", ".", "outputDim", ",", "nStages", "[", "4", "]", ",", "n", ",", "2", ")", "# Stage 4", "\n", "self", ".", "layers", ".", "append", "(", "BatchNormLayer", "(", "rng", ",", "rout", ",", "BatchNormLayerParams", "(", "inputDim", "=", "self", ".", "layers", "[", "-", "1", "]", ".", "cfgParams", ".", "outputDim", ")", ",", "layerNum", "=", "len", "(", "self", ".", "layers", ")", ")", ")", "\n", "self", ".", "layers", ".", "append", "(", "NonlinearityLayer", "(", "rng", ",", "self", ".", "layers", "[", "-", "1", "]", ".", "output", ",", "NonlinearityLayerParams", "(", "inputDim", "=", "self", ".", "layers", "[", "-", "1", "]", ".", "cfgParams", ".", "outputDim", ",", "activation", "=", "ReLU", ")", ",", "layerNum", "=", "len", "(", "self", ".", "layers", ")", ")", ")", "\n", "self", ".", "layers", ".", "append", "(", "HiddenLayer", "(", "rng", ",", "self", ".", "layers", "[", "-", "1", "]", ".", "output", ".", "flatten", "(", "2", ")", ",", "\n", "HiddenLayerParams", "(", "inputDim", "=", "(", "self", ".", "layers", "[", "-", "1", "]", ".", "cfgParams", ".", "outputDim", "[", "0", "]", ",", "numpy", ".", "prod", "(", "self", ".", "layers", "[", "-", "1", "]", ".", "cfgParams", ".", "outputDim", "[", "1", ":", "]", ")", ")", ",", "\n", "outputDim", "=", "(", "batchSize", ",", "1024", ")", ",", "activation", "=", "ReLU", ")", ",", "\n", "layerNum", "=", "len", "(", "self", ".", "layers", ")", ")", ")", "\n", "\n", "self", ".", "layers", ".", "append", "(", "DropoutLayer", "(", "rng", ",", "self", ".", "layers", "[", "-", "1", "]", ".", "output", ",", "\n", "DropoutLayerParams", "(", "inputDim", "=", "self", ".", "layers", "[", "-", "1", "]", ".", "cfgParams", ".", "outputDim", ",", "\n", "outputDim", "=", "self", ".", "layers", "[", "-", "1", "]", ".", "cfgParams", ".", "outputDim", ")", ",", "\n", "layerNum", "=", "len", "(", "self", ".", "layers", ")", ")", ")", "\n", "\n", "self", ".", "layers", ".", "append", "(", "HiddenLayer", "(", "rng", ",", "self", ".", "layers", "[", "-", "1", "]", ".", "output", ",", "\n", "HiddenLayerParams", "(", "inputDim", "=", "self", ".", "layers", "[", "-", "1", "]", ".", "cfgParams", ".", "outputDim", ",", "\n", "outputDim", "=", "(", "batchSize", ",", "1024", ")", ",", "activation", "=", "ReLU", ")", ",", "\n", "layerNum", "=", "len", "(", "self", ".", "layers", ")", ")", ")", "\n", "\n", "self", ".", "layers", ".", "append", "(", "DropoutLayer", "(", "rng", ",", "self", ".", "layers", "[", "-", "1", "]", ".", "output", ",", "\n", "DropoutLayerParams", "(", "inputDim", "=", "self", ".", "layers", "[", "-", "1", "]", ".", "cfgParams", ".", "outputDim", ",", "\n", "outputDim", "=", "self", ".", "layers", "[", "-", "1", "]", ".", "cfgParams", ".", "outputDim", ")", ",", "\n", "layerNum", "=", "len", "(", "self", ".", "layers", ")", ")", ")", "\n", "\n", "self", ".", "layers", ".", "append", "(", "HiddenLayer", "(", "rng", ",", "self", ".", "layers", "[", "-", "1", "]", ".", "output", ",", "\n", "HiddenLayerParams", "(", "inputDim", "=", "self", ".", "layers", "[", "-", "1", "]", ".", "cfgParams", ".", "outputDim", ",", "\n", "outputDim", "=", "(", "batchSize", ",", "self", ".", "cfgParams", ".", "numJoints", "*", "self", ".", "cfgParams", ".", "nDims", ")", ",", "\n", "activation", "=", "None", ")", ",", "\n", "layerNum", "=", "len", "(", "self", ".", "layers", ")", ")", ")", "\n", "\n", "self", ".", "output", "=", "self", ".", "layers", "[", "-", "1", "]", ".", "output", "\n", "", "elif", "cfgParams", ".", "type", "==", "3", ":", "\n", "# Try ResNet similar configuration", "\n", "            ", "depth", "=", "47", "\n", "assert", "(", "depth", "-", "2", ")", "%", "9", "==", "0", ",", "'depth should be 9n+2 (e.g., 164 or 1001)'", "\n", "n", "=", "(", "depth", "-", "2", ")", "/", "9", "\n", "\n", "nStages", "=", "[", "32", ",", "64", ",", "128", ",", "128", ",", "128", "]", "\n", "\n", "self", ".", "layers", ".", "append", "(", "ConvPoolLayer", "(", "rng", ",", "self", ".", "inputVar", ",", "\n", "ConvPoolLayerParams", "(", "inputDim", "=", "self", ".", "cfgParams", ".", "inputDim", ",", "nFilters", "=", "nStages", "[", "0", "]", ",", "\n", "filterDim", "=", "(", "5", ",", "5", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "\n", "poolsize", "=", "(", "2", ",", "2", ")", ",", "border_mode", "=", "'same'", ",", "activation", "=", "None", ",", "\n", "init_method", "=", "'He'", ")", ",", "\n", "layerNum", "=", "len", "(", "self", ".", "layers", ")", ")", ")", "# one conv at the beginning", "\n", "rout", "=", "self", ".", "add_res_layers", "(", "rng", ",", "self", ".", "layers", "[", "-", "1", "]", ".", "output", ",", "self", ".", "layers", "[", "-", "1", "]", ".", "cfgParams", ".", "outputDim", ",", "nStages", "[", "1", "]", ",", "n", ",", "2", ")", "# Stage 1", "\n", "rout", "=", "self", ".", "add_res_layers", "(", "rng", ",", "rout", ",", "self", ".", "layers", "[", "-", "1", "]", ".", "cfgParams", ".", "outputDim", ",", "nStages", "[", "2", "]", ",", "n", ",", "2", ")", "# Stage 2", "\n", "rout", "=", "self", ".", "add_res_layers", "(", "rng", ",", "rout", ",", "self", ".", "layers", "[", "-", "1", "]", ".", "cfgParams", ".", "outputDim", ",", "nStages", "[", "3", "]", ",", "n", ",", "2", ")", "# Stage 3", "\n", "rout", "=", "self", ".", "add_res_layers", "(", "rng", ",", "rout", ",", "self", ".", "layers", "[", "-", "1", "]", ".", "cfgParams", ".", "outputDim", ",", "nStages", "[", "4", "]", ",", "n", ",", "2", ")", "# Stage 4", "\n", "self", ".", "layers", ".", "append", "(", "BatchNormLayer", "(", "rng", ",", "rout", ",", "BatchNormLayerParams", "(", "inputDim", "=", "self", ".", "layers", "[", "-", "1", "]", ".", "cfgParams", ".", "outputDim", ")", ",", "layerNum", "=", "len", "(", "self", ".", "layers", ")", ")", ")", "\n", "self", ".", "layers", ".", "append", "(", "NonlinearityLayer", "(", "rng", ",", "self", ".", "layers", "[", "-", "1", "]", ".", "output", ",", "NonlinearityLayerParams", "(", "inputDim", "=", "self", ".", "layers", "[", "-", "1", "]", ".", "cfgParams", ".", "outputDim", ",", "activation", "=", "ReLU", ")", ",", "layerNum", "=", "len", "(", "self", ".", "layers", ")", ")", ")", "\n", "self", ".", "layers", ".", "append", "(", "HiddenLayer", "(", "rng", ",", "self", ".", "layers", "[", "-", "1", "]", ".", "output", ".", "flatten", "(", "2", ")", ",", "\n", "HiddenLayerParams", "(", "inputDim", "=", "(", "self", ".", "layers", "[", "-", "1", "]", ".", "cfgParams", ".", "outputDim", "[", "0", "]", ",", "numpy", ".", "prod", "(", "self", ".", "layers", "[", "-", "1", "]", ".", "cfgParams", ".", "outputDim", "[", "1", ":", "]", ")", ")", ",", "\n", "outputDim", "=", "(", "batchSize", ",", "1024", ")", ",", "activation", "=", "ReLU", ")", ",", "\n", "layerNum", "=", "len", "(", "self", ".", "layers", ")", ")", ")", "\n", "\n", "self", ".", "layers", ".", "append", "(", "DropoutLayer", "(", "rng", ",", "self", ".", "layers", "[", "-", "1", "]", ".", "output", ",", "\n", "DropoutLayerParams", "(", "inputDim", "=", "self", ".", "layers", "[", "-", "1", "]", ".", "cfgParams", ".", "outputDim", ",", "\n", "outputDim", "=", "self", ".", "layers", "[", "-", "1", "]", ".", "cfgParams", ".", "outputDim", ")", ",", "\n", "layerNum", "=", "len", "(", "self", ".", "layers", ")", ")", ")", "\n", "\n", "self", ".", "layers", ".", "append", "(", "HiddenLayer", "(", "rng", ",", "self", ".", "layers", "[", "-", "1", "]", ".", "output", ",", "\n", "HiddenLayerParams", "(", "inputDim", "=", "self", ".", "layers", "[", "-", "1", "]", ".", "cfgParams", ".", "outputDim", ",", "\n", "outputDim", "=", "(", "batchSize", ",", "1024", ")", ",", "activation", "=", "ReLU", ")", ",", "\n", "layerNum", "=", "len", "(", "self", ".", "layers", ")", ")", ")", "\n", "\n", "self", ".", "layers", ".", "append", "(", "DropoutLayer", "(", "rng", ",", "self", ".", "layers", "[", "-", "1", "]", ".", "output", ",", "\n", "DropoutLayerParams", "(", "inputDim", "=", "self", ".", "layers", "[", "-", "1", "]", ".", "cfgParams", ".", "outputDim", ",", "\n", "outputDim", "=", "self", ".", "layers", "[", "-", "1", "]", ".", "cfgParams", ".", "outputDim", ")", ",", "\n", "layerNum", "=", "len", "(", "self", ".", "layers", ")", ")", ")", "\n", "\n", "self", ".", "layers", ".", "append", "(", "HiddenLayer", "(", "rng", ",", "self", ".", "layers", "[", "-", "1", "]", ".", "output", ",", "\n", "HiddenLayerParams", "(", "inputDim", "=", "self", ".", "layers", "[", "-", "1", "]", ".", "cfgParams", ".", "outputDim", ",", "\n", "outputDim", "=", "(", "batchSize", ",", "self", ".", "cfgParams", ".", "numJoints", "*", "self", ".", "cfgParams", ".", "nDims", ")", ",", "\n", "activation", "=", "None", ")", ",", "\n", "layerNum", "=", "len", "(", "self", ".", "layers", ")", ")", ")", "\n", "\n", "self", ".", "output", "=", "self", ".", "layers", "[", "-", "1", "]", ".", "output", "\n", "", "elif", "cfgParams", ".", "type", "==", "4", ":", "\n", "# Try ResNet similar configuration", "\n", "            ", "depth", "=", "47", "\n", "assert", "(", "depth", "-", "2", ")", "%", "9", "==", "0", ",", "'depth should be 9n+2 (e.g., 164 or 1001)'", "\n", "n", "=", "(", "depth", "-", "2", ")", "/", "9", "\n", "\n", "nStages", "=", "[", "32", ",", "64", ",", "128", ",", "256", ",", "256", "]", "\n", "\n", "self", ".", "layers", ".", "append", "(", "ConvPoolLayer", "(", "rng", ",", "self", ".", "inputVar", ",", "\n", "ConvPoolLayerParams", "(", "inputDim", "=", "self", ".", "cfgParams", ".", "inputDim", ",", "nFilters", "=", "nStages", "[", "0", "]", ",", "\n", "filterDim", "=", "(", "5", ",", "5", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "\n", "poolsize", "=", "(", "2", ",", "2", ")", ",", "border_mode", "=", "'same'", ",", "activation", "=", "None", ",", "\n", "init_method", "=", "'He'", ")", ",", "\n", "layerNum", "=", "len", "(", "self", ".", "layers", ")", ")", ")", "# one conv at the beginning", "\n", "rout", "=", "self", ".", "add_res_layers", "(", "rng", ",", "self", ".", "layers", "[", "-", "1", "]", ".", "output", ",", "self", ".", "layers", "[", "-", "1", "]", ".", "cfgParams", ".", "outputDim", ",", "nStages", "[", "1", "]", ",", "n", ",", "2", ")", "# Stage 1", "\n", "rout", "=", "self", ".", "add_res_layers", "(", "rng", ",", "rout", ",", "self", ".", "layers", "[", "-", "1", "]", ".", "cfgParams", ".", "outputDim", ",", "nStages", "[", "2", "]", ",", "n", ",", "2", ")", "# Stage 2", "\n", "rout", "=", "self", ".", "add_res_layers", "(", "rng", ",", "rout", ",", "self", ".", "layers", "[", "-", "1", "]", ".", "cfgParams", ".", "outputDim", ",", "nStages", "[", "3", "]", ",", "n", ",", "2", ")", "# Stage 3", "\n", "rout", "=", "self", ".", "add_res_layers", "(", "rng", ",", "rout", ",", "self", ".", "layers", "[", "-", "1", "]", ".", "cfgParams", ".", "outputDim", ",", "nStages", "[", "4", "]", ",", "n", ",", "2", ")", "# Stage 4", "\n", "self", ".", "layers", ".", "append", "(", "BatchNormLayer", "(", "rng", ",", "rout", ",", "BatchNormLayerParams", "(", "inputDim", "=", "self", ".", "layers", "[", "-", "1", "]", ".", "cfgParams", ".", "outputDim", ")", ",", "layerNum", "=", "len", "(", "self", ".", "layers", ")", ")", ")", "\n", "self", ".", "layers", ".", "append", "(", "NonlinearityLayer", "(", "rng", ",", "self", ".", "layers", "[", "-", "1", "]", ".", "output", ",", "NonlinearityLayerParams", "(", "inputDim", "=", "self", ".", "layers", "[", "-", "1", "]", ".", "cfgParams", ".", "outputDim", ",", "activation", "=", "ReLU", ")", ",", "layerNum", "=", "len", "(", "self", ".", "layers", ")", ")", ")", "\n", "self", ".", "layers", ".", "append", "(", "HiddenLayer", "(", "rng", ",", "self", ".", "layers", "[", "-", "1", "]", ".", "output", ".", "flatten", "(", "2", ")", ",", "\n", "HiddenLayerParams", "(", "inputDim", "=", "(", "self", ".", "layers", "[", "-", "1", "]", ".", "cfgParams", ".", "outputDim", "[", "0", "]", ",", "numpy", ".", "prod", "(", "self", ".", "layers", "[", "-", "1", "]", ".", "cfgParams", ".", "outputDim", "[", "1", ":", "]", ")", ")", ",", "\n", "outputDim", "=", "(", "batchSize", ",", "1024", ")", ",", "activation", "=", "ReLU", ")", ",", "\n", "layerNum", "=", "len", "(", "self", ".", "layers", ")", ")", ")", "\n", "self", ".", "layers", ".", "append", "(", "DropoutLayer", "(", "rng", ",", "self", ".", "layers", "[", "-", "1", "]", ".", "output", ",", "\n", "DropoutLayerParams", "(", "inputDim", "=", "self", ".", "layers", "[", "-", "1", "]", ".", "cfgParams", ".", "outputDim", ",", "\n", "outputDim", "=", "self", ".", "layers", "[", "-", "1", "]", ".", "cfgParams", ".", "outputDim", ")", ",", "\n", "layerNum", "=", "len", "(", "self", ".", "layers", ")", ")", ")", "\n", "self", ".", "layers", ".", "append", "(", "HiddenLayer", "(", "rng", ",", "self", ".", "layers", "[", "-", "1", "]", ".", "output", ",", "\n", "HiddenLayerParams", "(", "inputDim", "=", "self", ".", "layers", "[", "-", "1", "]", ".", "cfgParams", ".", "outputDim", ",", "\n", "outputDim", "=", "(", "batchSize", ",", "1024", ")", ",", "activation", "=", "ReLU", ")", ",", "\n", "layerNum", "=", "len", "(", "self", ".", "layers", ")", ")", ")", "\n", "self", ".", "layers", ".", "append", "(", "DropoutLayer", "(", "rng", ",", "self", ".", "layers", "[", "-", "1", "]", ".", "output", ",", "\n", "DropoutLayerParams", "(", "inputDim", "=", "self", ".", "layers", "[", "-", "1", "]", ".", "cfgParams", ".", "outputDim", ",", "\n", "outputDim", "=", "self", ".", "layers", "[", "-", "1", "]", ".", "cfgParams", ".", "outputDim", ")", ",", "\n", "layerNum", "=", "len", "(", "self", ".", "layers", ")", ")", ")", "\n", "self", ".", "layers", ".", "append", "(", "HiddenLayer", "(", "rng", ",", "self", ".", "layers", "[", "-", "1", "]", ".", "output", ",", "\n", "HiddenLayerParams", "(", "inputDim", "=", "self", ".", "layers", "[", "-", "1", "]", ".", "cfgParams", ".", "outputDim", ",", "\n", "outputDim", "=", "(", "batchSize", ",", "30", ")", ",", "activation", "=", "None", ")", ",", "\n", "layerNum", "=", "len", "(", "self", ".", "layers", ")", ")", ")", "\n", "self", ".", "layers", ".", "append", "(", "HiddenLayer", "(", "rng", ",", "self", ".", "layers", "[", "-", "1", "]", ".", "output", ",", "\n", "HiddenLayerParams", "(", "inputDim", "=", "self", ".", "layers", "[", "-", "1", "]", ".", "cfgParams", ".", "outputDim", ",", "\n", "outputDim", "=", "(", "batchSize", ",", "self", ".", "cfgParams", ".", "numJoints", "*", "self", ".", "cfgParams", ".", "nDims", ")", ",", "\n", "activation", "=", "None", ")", ",", "\n", "layerNum", "=", "len", "(", "self", ".", "layers", ")", ")", ")", "\n", "\n", "self", ".", "output", "=", "self", ".", "layers", "[", "-", "1", "]", ".", "output", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", ")", "\n", "\n", "", "self", ".", "load", "(", "self", ".", "cfgParams", ".", "loadFile", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.resnet.ResNet.add_res_layers": [[342, 347], ["resnet.res_block", "xrange", "resnet.res_block"], "methods", ["home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.resnet.res_block", "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.resnet.res_block"], ["", "def", "add_res_layers", "(", "self", ",", "rng", ",", "inputVar", ",", "inputDim", ",", "outputFilters", ",", "count", ",", "stride", ")", ":", "\n", "        ", "rout", "=", "res_block", "(", "self", ".", "layers", ",", "rng", ",", "inputVar", ",", "inputDim", ",", "outputFilters", ",", "stride", ")", "\n", "for", "i", "in", "xrange", "(", "1", ",", "count", ")", ":", "\n", "            ", "rout", "=", "res_block", "(", "self", ".", "layers", ",", "rng", ",", "rout", ",", "self", ".", "layers", "[", "-", "1", "]", ".", "cfgParams", ".", "outputDim", ",", "outputFilters", ",", "1", ")", "\n", "", "return", "rout", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.resnet.res_block": [[349, 415], ["layers.append", "layers.append", "layers.append", "layers.append", "layers.append", "layers.append", "layers.append", "layers.append", "layers.append", "layers.append", "layers.append", "layers.append", "layers.append", "layers.append", "layers.append", "layers.append", "layers.append", "layers.append", "layers.append", "net.batchnormlayer.BatchNormLayer", "net.nonlinearitylayer.NonlinearityLayer", "net.convlayer.ConvLayer", "net.batchnormlayer.BatchNormLayer", "net.nonlinearitylayer.NonlinearityLayer", "net.convlayer.ConvLayer", "net.batchnormlayer.BatchNormLayer", "net.nonlinearitylayer.NonlinearityLayer", "net.convlayer.ConvLayer", "net.batchnormlayer.BatchNormLayer", "net.nonlinearitylayer.NonlinearityLayer", "net.convlayer.ConvLayer", "net.batchnormlayer.BatchNormLayer", "net.nonlinearitylayer.NonlinearityLayer", "net.convlayer.ConvLayer", "net.batchnormlayer.BatchNormLayer", "net.nonlinearitylayer.NonlinearityLayer", "net.convlayer.ConvLayer", "net.convlayer.ConvLayer", "net.batchnormlayer.BatchNormLayerParams", "net.nonlinearitylayer.NonlinearityLayerParams", "net.convlayer.ConvLayerParams", "net.batchnormlayer.BatchNormLayerParams", "net.nonlinearitylayer.NonlinearityLayerParams", "net.convlayer.ConvLayerParams", "net.batchnormlayer.BatchNormLayerParams", "net.nonlinearitylayer.NonlinearityLayerParams", "net.convlayer.ConvLayerParams", "net.batchnormlayer.BatchNormLayerParams", "net.nonlinearitylayer.NonlinearityLayerParams", "net.convlayer.ConvLayerParams", "net.batchnormlayer.BatchNormLayerParams", "net.nonlinearitylayer.NonlinearityLayerParams", "net.convlayer.ConvLayerParams", "net.batchnormlayer.BatchNormLayerParams", "net.nonlinearitylayer.NonlinearityLayerParams", "net.convlayer.ConvLayerParams", "net.convlayer.ConvLayerParams", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len"], "function", ["None"], ["", "", "def", "res_block", "(", "layers", ",", "rng", ",", "inputVar", ",", "inputDim", ",", "outputFilters", ",", "stride", ",", "nBottleneckFilters", "=", "None", ")", ":", "\n", "    ", "if", "nBottleneckFilters", "is", "None", ":", "\n", "        ", "nBottleneckFilters", "=", "outputFilters", "//", "4", "\n", "\n", "", "if", "inputDim", "[", "1", "]", "==", "outputFilters", ":", "\n", "# conv1x1", "\n", "        ", "layers", ".", "append", "(", "BatchNormLayer", "(", "rng", ",", "inputVar", ",", "BatchNormLayerParams", "(", "inputDim", "=", "inputDim", ")", ",", "layerNum", "=", "len", "(", "layers", ")", ")", ")", "\n", "layers", ".", "append", "(", "NonlinearityLayer", "(", "rng", ",", "layers", "[", "-", "1", "]", ".", "output", ",", "NonlinearityLayerParams", "(", "inputDim", "=", "layers", "[", "-", "1", "]", ".", "cfgParams", ".", "outputDim", ",", "activation", "=", "ReLU", ")", ",", "layerNum", "=", "len", "(", "layers", ")", ")", ")", "\n", "layers", ".", "append", "(", "ConvLayer", "(", "rng", ",", "layers", "[", "-", "1", "]", ".", "output", ",", "ConvLayerParams", "(", "inputDim", "=", "layers", "[", "-", "1", "]", ".", "cfgParams", ".", "outputDim", ",", "\n", "nFilters", "=", "nBottleneckFilters", ",", "filterDim", "=", "(", "1", ",", "1", ")", ",", "\n", "border_mode", "=", "'same'", ",", "activation", "=", "None", ",", "\n", "init_method", "=", "'He'", ")", ",", "layerNum", "=", "len", "(", "layers", ")", ")", ")", "\n", "\n", "# conv3x3", "\n", "layers", ".", "append", "(", "BatchNormLayer", "(", "rng", ",", "layers", "[", "-", "1", "]", ".", "output", ",", "BatchNormLayerParams", "(", "inputDim", "=", "layers", "[", "-", "1", "]", ".", "cfgParams", ".", "outputDim", ")", ",", "layerNum", "=", "len", "(", "layers", ")", ")", ")", "\n", "layers", ".", "append", "(", "NonlinearityLayer", "(", "rng", ",", "layers", "[", "-", "1", "]", ".", "output", ",", "NonlinearityLayerParams", "(", "inputDim", "=", "layers", "[", "-", "1", "]", ".", "cfgParams", ".", "outputDim", ",", "activation", "=", "ReLU", ")", ",", "layerNum", "=", "len", "(", "layers", ")", ")", ")", "\n", "layers", ".", "append", "(", "ConvLayer", "(", "rng", ",", "layers", "[", "-", "1", "]", ".", "output", ",", "ConvLayerParams", "(", "inputDim", "=", "layers", "[", "-", "1", "]", ".", "cfgParams", ".", "outputDim", ",", "\n", "nFilters", "=", "nBottleneckFilters", ",", "filterDim", "=", "(", "3", ",", "3", ")", ",", "\n", "border_mode", "=", "'same'", ",", "activation", "=", "None", ",", "\n", "init_method", "=", "'He'", ")", ",", "layerNum", "=", "len", "(", "layers", ")", ")", ")", "\n", "\n", "# conv1x1", "\n", "layers", ".", "append", "(", "BatchNormLayer", "(", "rng", ",", "layers", "[", "-", "1", "]", ".", "output", ",", "BatchNormLayerParams", "(", "inputDim", "=", "layers", "[", "-", "1", "]", ".", "cfgParams", ".", "outputDim", ")", ",", "layerNum", "=", "len", "(", "layers", ")", ")", ")", "\n", "layers", ".", "append", "(", "NonlinearityLayer", "(", "rng", ",", "layers", "[", "-", "1", "]", ".", "output", ",", "NonlinearityLayerParams", "(", "inputDim", "=", "layers", "[", "-", "1", "]", ".", "cfgParams", ".", "outputDim", ",", "activation", "=", "ReLU", ")", ",", "layerNum", "=", "len", "(", "layers", ")", ")", ")", "\n", "layers", ".", "append", "(", "ConvLayer", "(", "rng", ",", "layers", "[", "-", "1", "]", ".", "output", ",", "ConvLayerParams", "(", "inputDim", "=", "layers", "[", "-", "1", "]", ".", "cfgParams", ".", "outputDim", ",", "\n", "nFilters", "=", "outputFilters", ",", "filterDim", "=", "(", "1", ",", "1", ")", ",", "\n", "border_mode", "=", "'same'", ",", "activation", "=", "None", ",", "\n", "init_method", "=", "'He'", ")", ",", "layerNum", "=", "len", "(", "layers", ")", ")", ")", "\n", "\n", "# add identity connection", "\n", "return", "inputVar", "+", "layers", "[", "-", "1", "]", ".", "output", "\n", "", "else", ":", "\n", "# common BN, ReLU", "\n", "        ", "layers", ".", "append", "(", "BatchNormLayer", "(", "rng", ",", "inputVar", ",", "BatchNormLayerParams", "(", "inputDim", "=", "inputDim", ")", ",", "layerNum", "=", "len", "(", "layers", ")", ")", ")", "\n", "layers", ".", "append", "(", "NonlinearityLayer", "(", "rng", ",", "layers", "[", "-", "1", "]", ".", "output", ",", "NonlinearityLayerParams", "(", "inputDim", "=", "layers", "[", "-", "1", "]", ".", "cfgParams", ".", "outputDim", ",", "activation", "=", "ReLU", ")", ",", "layerNum", "=", "len", "(", "layers", ")", ")", ")", "\n", "\n", "# conv1x1", "\n", "layers", ".", "append", "(", "ConvLayer", "(", "rng", ",", "layers", "[", "-", "1", "]", ".", "output", ",", "ConvLayerParams", "(", "inputDim", "=", "layers", "[", "-", "1", "]", ".", "cfgParams", ".", "outputDim", ",", "\n", "nFilters", "=", "nBottleneckFilters", ",", "filterDim", "=", "(", "1", ",", "1", ")", ",", "\n", "stride", "=", "(", "stride", ",", "stride", ")", ",", "border_mode", "=", "'same'", ",", "\n", "activation", "=", "None", ",", "init_method", "=", "'He'", ")", ",", "layerNum", "=", "len", "(", "layers", ")", ")", ")", "\n", "\n", "# conv3x3", "\n", "layers", ".", "append", "(", "BatchNormLayer", "(", "rng", ",", "layers", "[", "-", "1", "]", ".", "output", ",", "BatchNormLayerParams", "(", "inputDim", "=", "layers", "[", "-", "1", "]", ".", "cfgParams", ".", "outputDim", ")", ",", "layerNum", "=", "len", "(", "layers", ")", ")", ")", "\n", "layers", ".", "append", "(", "NonlinearityLayer", "(", "rng", ",", "layers", "[", "-", "1", "]", ".", "output", ",", "NonlinearityLayerParams", "(", "inputDim", "=", "layers", "[", "-", "1", "]", ".", "cfgParams", ".", "outputDim", ",", "activation", "=", "ReLU", ")", ",", "layerNum", "=", "len", "(", "layers", ")", ")", ")", "\n", "layers", ".", "append", "(", "ConvLayer", "(", "rng", ",", "layers", "[", "-", "1", "]", ".", "output", ",", "ConvLayerParams", "(", "inputDim", "=", "layers", "[", "-", "1", "]", ".", "cfgParams", ".", "outputDim", ",", "\n", "nFilters", "=", "nBottleneckFilters", ",", "filterDim", "=", "(", "3", ",", "3", ")", ",", "\n", "border_mode", "=", "'same'", ",", "activation", "=", "None", ",", "\n", "init_method", "=", "'He'", ")", ",", "layerNum", "=", "len", "(", "layers", ")", ")", ")", "\n", "\n", "# conv1x1", "\n", "layers", ".", "append", "(", "BatchNormLayer", "(", "rng", ",", "layers", "[", "-", "1", "]", ".", "output", ",", "BatchNormLayerParams", "(", "inputDim", "=", "layers", "[", "-", "1", "]", ".", "cfgParams", ".", "outputDim", ")", ",", "layerNum", "=", "len", "(", "layers", ")", ")", ")", "\n", "layers", ".", "append", "(", "NonlinearityLayer", "(", "rng", ",", "layers", "[", "-", "1", "]", ".", "output", ",", "NonlinearityLayerParams", "(", "inputDim", "=", "layers", "[", "-", "1", "]", ".", "cfgParams", ".", "outputDim", ",", "activation", "=", "ReLU", ")", ",", "layerNum", "=", "len", "(", "layers", ")", ")", ")", "\n", "layers", ".", "append", "(", "ConvLayer", "(", "rng", ",", "layers", "[", "-", "1", "]", ".", "output", ",", "ConvLayerParams", "(", "inputDim", "=", "layers", "[", "-", "1", "]", ".", "cfgParams", ".", "outputDim", ",", "\n", "nFilters", "=", "outputFilters", ",", "filterDim", "=", "(", "1", ",", "1", ")", ",", "\n", "border_mode", "=", "'same'", ",", "activation", "=", "None", ",", "\n", "init_method", "=", "'He'", ")", ",", "layerNum", "=", "len", "(", "layers", ")", ")", ")", "\n", "\n", "# shortcut", "\n", "layers", ".", "append", "(", "ConvLayer", "(", "rng", ",", "layers", "[", "-", "8", "]", ".", "output", ",", "ConvLayerParams", "(", "inputDim", "=", "layers", "[", "-", "8", "]", ".", "cfgParams", ".", "outputDim", ",", "\n", "nFilters", "=", "outputFilters", ",", "filterDim", "=", "(", "1", ",", "1", ")", ",", "\n", "stride", "=", "(", "stride", ",", "stride", ")", ",", "border_mode", "=", "'same'", ",", "\n", "activation", "=", "None", ",", "init_method", "=", "'He'", ")", ",", "layerNum", "=", "len", "(", "layers", ")", ")", ")", "\n", "\n", "# add identity connection", "\n", "return", "layers", "[", "-", "2", "]", ".", "output", "+", "layers", "[", "-", "1", "]", ".", "output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.convlayer.ConvLayerParams.__init__": [[41, 67], ["net.layerparams.LayerParams.__init__", "convlayer.ConvLayerParams.update"], "methods", ["home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.hiddenlayer.HiddenLayer.__init__", "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.layerparams.LayerParams.update"], ["    ", "def", "__init__", "(", "self", ",", "inputDim", "=", "None", ",", "nFilters", "=", "None", ",", "filterDim", "=", "None", ",", "activation", "=", "None", ",", "hasBias", "=", "True", ",", "\n", "filter_shape", "=", "None", ",", "image_shape", "=", "None", ",", "outputDim", "=", "None", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "border_mode", "=", "'valid'", ",", "\n", "init_method", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        :type filter_shape: tuple or list of length 4\n        :param filter_shape: (number of filters, num inputVar feature maps, filter height,filter width)\n\n        :type image_shape: tuple or list of length 4\n        :param image_shape: (batch size, num inputVar feature maps, image height, image width)\n\n        :type stride: tuple or list of length 2\n        :param stride: the downsampling (pooling) factor (#rows,#cols)\n        \"\"\"", "\n", "\n", "super", "(", "ConvLayerParams", ",", "self", ")", ".", "__init__", "(", "inputDim", ",", "outputDim", ")", "\n", "\n", "self", ".", "_nFilters", "=", "nFilters", "\n", "self", ".", "_filterDim", "=", "filterDim", "\n", "self", ".", "_filter_shape", "=", "filter_shape", "\n", "self", ".", "_image_shape", "=", "image_shape", "\n", "self", ".", "_activation", "=", "activation", "\n", "self", ".", "_hasbias", "=", "hasBias", "\n", "self", ".", "_stride", "=", "stride", "\n", "self", ".", "_border_mode", "=", "'half'", "if", "border_mode", "==", "'same'", "else", "border_mode", "\n", "self", ".", "_init_method", "=", "init_method", "\n", "self", ".", "update", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.convlayer.ConvLayerParams.filter_shape": [[68, 71], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "filter_shape", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_filter_shape", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.convlayer.ConvLayerParams.image_shape": [[72, 75], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "image_shape", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_image_shape", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.convlayer.ConvLayerParams.stride": [[80, 84], ["convlayer.ConvLayerParams.update"], "methods", ["home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.layerparams.LayerParams.update"], ["", "@", "stride", ".", "setter", "\n", "def", "stride", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_stride", "=", "value", "\n", "self", ".", "update", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.convlayer.ConvLayerParams.border_mode": [[89, 96], ["convlayer.ConvLayerParams.update"], "methods", ["home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.layerparams.LayerParams.update"], ["", "@", "border_mode", ".", "setter", "\n", "def", "border_mode", "(", "self", ",", "value", ")", ":", "\n", "        ", "if", "value", "==", "'same'", ":", "\n", "            ", "value", "=", "'half'", "\n", "", "self", ".", "_border_mode", "=", "value", "\n", "\n", "self", ".", "update", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.convlayer.ConvLayerParams.nFilters": [[101, 105], ["convlayer.ConvLayerParams.update"], "methods", ["home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.layerparams.LayerParams.update"], ["", "@", "nFilters", ".", "setter", "\n", "def", "nFilters", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_nFilters", "=", "value", "\n", "self", ".", "update", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.convlayer.ConvLayerParams.filterDim": [[110, 114], ["convlayer.ConvLayerParams.update"], "methods", ["home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.layerparams.LayerParams.update"], ["", "@", "filterDim", ".", "setter", "\n", "def", "filterDim", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_filterDim", "=", "value", "\n", "self", ".", "update", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.convlayer.ConvLayerParams.activation": [[119, 122], ["None"], "methods", ["None"], ["", "@", "activation", ".", "setter", "\n", "def", "activation", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_activation", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.convlayer.ConvLayerParams.hasBias": [[127, 130], ["None"], "methods", ["None"], ["", "@", "hasBias", ".", "setter", "\n", "def", "hasBias", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_hasbias", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.convlayer.ConvLayerParams.update": [[131, 164], ["list", "int", "int", "tuple", "numpy.ceil", "numpy.ceil", "ValueError", "float", "float"], "methods", ["None"], ["", "def", "update", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        calc image_shape,\n        \"\"\"", "\n", "self", ".", "_filter_shape", "=", "(", "self", ".", "_nFilters", ",", "\n", "self", ".", "_inputDim", "[", "1", "]", ",", "\n", "self", ".", "_filterDim", "[", "0", "]", ",", "\n", "self", ".", "_filterDim", "[", "1", "]", ")", "\n", "self", ".", "_image_shape", "=", "self", ".", "_inputDim", "\n", "\n", "if", "self", ".", "_border_mode", "==", "'valid'", ":", "\n", "            ", "self", ".", "_outputDim", "=", "(", "self", ".", "_inputDim", "[", "0", "]", ",", "# batch_size", "\n", "self", ".", "_nFilters", ",", "# number of kernels", "\n", "(", "self", ".", "_inputDim", "[", "2", "]", "-", "self", ".", "_filterDim", "[", "0", "]", "+", "1", ")", ",", "# output H", "\n", "(", "self", ".", "_inputDim", "[", "3", "]", "-", "self", ".", "_filterDim", "[", "1", "]", "+", "1", ")", ")", "# output W", "\n", "", "elif", "self", ".", "_border_mode", "==", "'full'", ":", "\n", "            ", "self", ".", "_outputDim", "=", "(", "self", ".", "_inputDim", "[", "0", "]", ",", "# batch_size", "\n", "self", ".", "_nFilters", ",", "# number of kernels", "\n", "(", "self", ".", "_inputDim", "[", "2", "]", "+", "self", ".", "_filterDim", "[", "0", "]", "-", "1", ")", ",", "# output H", "\n", "(", "self", ".", "_inputDim", "[", "3", "]", "+", "self", ".", "_filterDim", "[", "1", "]", "-", "1", ")", ")", "# output W", "\n", "", "elif", "self", ".", "_border_mode", "==", "'half'", ":", "\n", "            ", "self", ".", "_outputDim", "=", "(", "self", ".", "_inputDim", "[", "0", "]", ",", "# batch_size", "\n", "self", ".", "_nFilters", ",", "# number of kernels", "\n", "self", ".", "_inputDim", "[", "2", "]", ",", "# output H", "\n", "self", ".", "_inputDim", "[", "3", "]", ")", "# output W", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Unknown border mode\"", ")", "\n", "\n", "# correct stride", "\n", "", "self", ".", "_outputDim", "=", "list", "(", "self", ".", "_outputDim", ")", "\n", "self", ".", "_outputDim", "[", "2", "]", "=", "int", "(", "numpy", ".", "ceil", "(", "self", ".", "_outputDim", "[", "2", "]", "/", "float", "(", "self", ".", "_stride", "[", "0", "]", ")", ")", ")", "\n", "self", ".", "_outputDim", "[", "3", "]", "=", "int", "(", "numpy", ".", "ceil", "(", "self", ".", "_outputDim", "[", "3", "]", "/", "float", "(", "self", ".", "_stride", "[", "1", "]", ")", ")", ")", "\n", "self", ".", "_outputDim", "=", "tuple", "(", "self", ".", "_outputDim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.convlayer.ConvLayerParams.getMemoryRequirement": [[165, 171], ["numpy.prod"], "methods", ["None"], ["", "def", "getMemoryRequirement", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Get memory requirements of weights\n        :return: memory requirement\n        \"\"\"", "\n", "return", "(", "numpy", ".", "prod", "(", "self", ".", "filter_shape", ")", "+", "self", ".", "filter_shape", "[", "0", "]", ")", "*", "4", "# sizeof(theano.config.floatX)", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.convlayer.ConvLayer.__init__": [[180, 252], ["net.layer.Layer.__init__", "isinstance", "conv2d", "convlayer.ConvLayer.getInitVals", "theano.shared", "activation", "numpy.zeros", "theano.shared", "convlayer.ConvLayer.b.dimshuffle"], "methods", ["home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.hiddenlayer.HiddenLayer.__init__", "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.layer.Layer.getInitVals", "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.hiddenlayer.HiddenLayerParams.activation"], ["def", "__init__", "(", "self", ",", "rng", ",", "inputVar", ",", "cfgParams", ",", "copyLayer", "=", "None", ",", "layerNum", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Allocate a LeNetConvPoolLayer with shared variable internal parameters.\n\n        :type rng: numpy.random.RandomState\n        :param rng: a random number generator used to initialize weights\n\n        :type inputVar: theano.tensor.dtensor4\n        :param inputVar: symbolic image tensor, of shape image_shape\n\n        :type cfgParams: ConvPoolLayerParams\n        \"\"\"", "\n", "import", "theano", "\n", "import", "theano", ".", "tensor", "as", "T", "\n", "from", "theano", ".", "tensor", ".", "nnet", "import", "conv2d", "\n", "\n", "super", "(", "ConvLayer", ",", "self", ")", ".", "__init__", "(", "rng", ")", "\n", "\n", "assert", "isinstance", "(", "cfgParams", ",", "ConvLayerParams", ")", "\n", "\n", "floatX", "=", "theano", ".", "config", ".", "floatX", "# @UndefinedVariable", "\n", "\n", "filter_shape", "=", "cfgParams", ".", "filter_shape", "\n", "image_shape", "=", "cfgParams", ".", "image_shape", "\n", "filter_stride", "=", "cfgParams", ".", "stride", "\n", "activation", "=", "cfgParams", ".", "activation", "\n", "inputDim", "=", "cfgParams", ".", "inputDim", "\n", "border_mode", "=", "cfgParams", ".", "border_mode", "\n", "\n", "self", ".", "cfgParams", "=", "cfgParams", "\n", "self", ".", "layerNum", "=", "layerNum", "\n", "\n", "assert", "image_shape", "[", "1", "]", "==", "filter_shape", "[", "1", "]", "\n", "self", ".", "inputVar", "=", "inputVar", "\n", "\n", "if", "not", "(", "copyLayer", "is", "None", ")", ":", "\n", "            ", "self", ".", "W", "=", "copyLayer", ".", "W", "\n", "", "else", ":", "\n", "            ", "wInitVals", "=", "self", ".", "getInitVals", "(", "filter_shape", ",", "'conv'", ",", "act_fn", "=", "cfgParams", ".", "activation_str", ",", "orthogonal", "=", "False", ",", "method", "=", "cfgParams", ".", "_init_method", ")", "\n", "self", ".", "W", "=", "theano", ".", "shared", "(", "wInitVals", ",", "borrow", "=", "True", ",", "name", "=", "'convW{}'", ".", "format", "(", "layerNum", ")", ")", "\n", "\n", "# the bias is a 1D tensor -- one bias per output feature map", "\n", "", "if", "self", ".", "cfgParams", ".", "hasBias", "is", "True", ":", "\n", "            ", "if", "not", "(", "copyLayer", "is", "None", ")", ":", "\n", "                ", "self", ".", "b", "=", "copyLayer", ".", "b", "\n", "", "else", ":", "\n", "                ", "b_values", "=", "numpy", ".", "zeros", "(", "(", "filter_shape", "[", "0", "]", ",", ")", ",", "dtype", "=", "floatX", ")", "\n", "self", ".", "b", "=", "theano", ".", "shared", "(", "value", "=", "b_values", ",", "borrow", "=", "True", ",", "name", "=", "'convB{}'", ".", "format", "(", "layerNum", ")", ")", "\n", "\n", "# convolve inputVar feature maps with filters", "\n", "", "", "conv_out", "=", "conv2d", "(", "input", "=", "inputVar", ",", "\n", "filters", "=", "self", ".", "W", ",", "\n", "filter_shape", "=", "filter_shape", ",", "\n", "input_shape", "=", "image_shape", ",", "\n", "subsample", "=", "filter_stride", ",", "\n", "border_mode", "=", "border_mode", ")", "\n", "\n", "# add the bias term. Since the bias is a vector (1D array), we first reshape it to a tensor of shape", "\n", "# (1,n_filters,1,1). Each bias will thus be broadcasted across mini-batches and feature map width & height", "\n", "if", "self", ".", "cfgParams", ".", "hasBias", "is", "True", ":", "\n", "            ", "lin_output", "=", "conv_out", "+", "self", ".", "b", ".", "dimshuffle", "(", "'x'", ",", "0", ",", "'x'", ",", "'x'", ")", "\n", "", "else", ":", "\n", "            ", "lin_output", "=", "conv_out", "\n", "", "self", ".", "output_pre_act", "=", "lin_output", "\n", "self", ".", "output", "=", "(", "lin_output", "if", "activation", "is", "None", "\n", "else", "activation", "(", "lin_output", ")", ")", "\n", "\n", "self", ".", "output", ".", "name", "=", "'output_layer_{}'", ".", "format", "(", "self", ".", "layerNum", ")", "\n", "\n", "# store parameters of this layer", "\n", "self", ".", "params", "=", "[", "self", ".", "W", ",", "self", ".", "b", "]", "if", "self", ".", "cfgParams", ".", "hasBias", "else", "[", "self", ".", "W", "]", "\n", "self", ".", "weights", "=", "[", "self", ".", "W", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.convlayer.ConvLayer.__str__": [[253, 267], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Print configuration of layer\n        :return: configuration string\n        \"\"\"", "\n", "return", "\"inputDim {}, outputDim {}, filterDim {}, nFilters {}, activation {}, stride {}, border_mode {}, \"", "\"hasBias {}\"", ".", "format", "(", "self", ".", "cfgParams", ".", "inputDim", ",", "\n", "self", ".", "cfgParams", ".", "outputDim", ",", "\n", "self", ".", "cfgParams", ".", "filterDim", ",", "\n", "self", ".", "cfgParams", ".", "nFilters", ",", "\n", "self", ".", "cfgParams", ".", "activation_str", ",", "\n", "self", ".", "cfgParams", ".", "stride", ",", "\n", "self", ".", "cfgParams", ".", "border_mode", ",", "\n", "self", ".", "cfgParams", ".", "hasBias", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.dropoutlayer.DropoutLayerParams.__init__": [[40, 55], ["net.layerparams.LayerParams.__init__"], "methods", ["home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.hiddenlayer.HiddenLayer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inputDim", "=", "None", ",", "outputDim", "=", "None", ",", "p", "=", "0.3", ")", ":", "\n", "        ", "\"\"\"\n        :type inputDim: tuple of [int]\n        :param inputDim: dimensionality of input\n\n        :type outputDim: tuple of [int]\n        :param outputDim: number of hidden units\n\n        :type p: float\n        :param p: Probability for dropping a unit of the layer\n        \"\"\"", "\n", "\n", "super", "(", "DropoutLayerParams", ",", "self", ")", ".", "__init__", "(", "inputDim", "=", "inputDim", ",", "outputDim", "=", "outputDim", ")", "\n", "\n", "self", ".", "_p", "=", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.dropoutlayer.DropoutLayerParams.p": [[60, 63], ["None"], "methods", ["None"], ["", "@", "p", ".", "setter", "\n", "def", "p", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_p", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.dropoutlayer.DropoutLayer.__init__": [[66, 111], ["net.layer.Layer.__init__", "theano.shared", "MRG_RandomStreams", "ifelse", "rng.randint", "MRG_RandomStreams.binomial", "T.gt"], "methods", ["home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.hiddenlayer.HiddenLayer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "rng", ",", "inputVar", ",", "cfgParams", ",", "copyLayer", "=", "None", ",", "layerNum", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Dropout layer of a MLP: units are fully-connected and connections are\n        dropped randomly during training.\n\n        :type rng: numpy.random.RandomState\n        :param rng: a random number generator used to initialize mask\n\n        :type inputVar: theano.tensor.matrix\n        :param inputVar: a symbolic tensor of shape (n_examples, n_in)\n\n        :type cfgParams: DropoutLayerParams\n        \"\"\"", "\n", "import", "theano", "\n", "import", "theano", ".", "tensor", "as", "T", "\n", "from", "theano", ".", "ifelse", "import", "ifelse", "\n", "\n", "super", "(", "DropoutLayer", ",", "self", ")", ".", "__init__", "(", "rng", ")", "\n", "\n", "self", ".", "inputVar", "=", "inputVar", "\n", "self", ".", "cfgParams", "=", "cfgParams", "\n", "self", ".", "layerNum", "=", "layerNum", "\n", "\n", "assert", "0.", "<", "cfgParams", ".", "p", "<", "1.", "\n", "\n", "# see https://github.com/uoguelph-mlrg/theano_alexnet/blob/master/alex_net.py", "\n", "self", ".", "prob_drop", "=", "cfgParams", ".", "p", "\n", "self", ".", "prob_keep", "=", "1.0", "-", "cfgParams", ".", "p", "\n", "self", ".", "flag_on", "=", "theano", ".", "shared", "(", "numpy", ".", "cast", "[", "theano", ".", "config", ".", "floatX", "]", "(", "1.0", ")", ",", "name", "=", "'flag_on'", ")", "\n", "\n", "# mask_rng = theano.tensor.shared_randomstreams.RandomStreams(rng.randint(999999))", "\n", "# faster rng on GPU", "\n", "from", "theano", ".", "sandbox", ".", "rng_mrg", "import", "MRG_RandomStreams", "\n", "mask_rng", "=", "MRG_RandomStreams", "(", "rng", ".", "randint", "(", "999999", ")", ")", "\n", "if", "not", "(", "copyLayer", "is", "None", ")", ":", "\n", "            ", "self", ".", "mask", "=", "copyLayer", ".", "mask", "\n", "", "else", ":", "\n", "            ", "self", ".", "mask", "=", "mask_rng", ".", "binomial", "(", "n", "=", "1", ",", "p", "=", "self", ".", "prob_keep", ",", "size", "=", "self", ".", "cfgParams", ".", "inputDim", ",", "dtype", "=", "theano", ".", "config", ".", "floatX", ")", "\n", "", "self", ".", "output", "=", "ifelse", "(", "T", ".", "gt", "(", "self", ".", "flag_on", ",", "0", ")", ",", "self", ".", "mask", "*", "self", ".", "inputVar", ",", "self", ".", "prob_keep", "*", "self", ".", "inputVar", ")", "\n", "self", ".", "output", ".", "name", "=", "'output_layer_{}'", ".", "format", "(", "self", ".", "layerNum", ")", "\n", "self", ".", "output_pre_act", "=", "self", ".", "output", "# for compatibility", "\n", "\n", "# no params and weights", "\n", "self", ".", "params", "=", "[", "]", "\n", "self", ".", "weights", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.dropoutlayer.DropoutLayer.unsetDeterministic": [[112, 118], ["dropoutlayer.DropoutLayer.flag_on.set_value"], "methods", ["None"], ["", "def", "unsetDeterministic", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Enable dropout\n        :return: None\n        \"\"\"", "\n", "self", ".", "flag_on", ".", "set_value", "(", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.dropoutlayer.DropoutLayer.setDeterministic": [[119, 125], ["dropoutlayer.DropoutLayer.flag_on.set_value"], "methods", ["None"], ["", "def", "setDeterministic", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Disable dropout\n        :return: None\n        \"\"\"", "\n", "self", ".", "flag_on", ".", "set_value", "(", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.dropoutlayer.DropoutLayer.isDeterministic": [[126, 132], ["bool", "numpy.allclose", "dropoutlayer.DropoutLayer.flag_on.get_value"], "methods", ["None"], ["", "def", "isDeterministic", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Check if dropout is enabled\n        :return: True if enabled\n        \"\"\"", "\n", "return", "bool", "(", "numpy", ".", "allclose", "(", "self", ".", "flag_on", ".", "get_value", "(", ")", ",", "0.0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.dropoutlayer.DropoutLayer.__str__": [[133, 139], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Print configuration of layer\n        :return: configuration string\n        \"\"\"", "\n", "return", "\"inputDim {}, outputDim {}, p {}\"", ".", "format", "(", "self", ".", "cfgParams", ".", "inputDim", ",", "self", ".", "cfgParams", ".", "outputDim", ",", "self", ".", "cfgParams", ".", "p", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.layerparams.LayerParams.__init__": [[40, 46], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "inputDim", ",", "outputDim", ")", ":", "\n", "        ", "\"\"\"\n        Constructor\n        \"\"\"", "\n", "self", ".", "_inputDim", "=", "inputDim", "\n", "self", ".", "_outputDim", "=", "outputDim", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.layerparams.LayerParams.outputDim": [[51, 55], ["layerparams.LayerParams.update"], "methods", ["home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.layerparams.LayerParams.update"], ["", "@", "outputDim", ".", "setter", "\n", "def", "outputDim", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_outputDim", "=", "value", "\n", "self", ".", "update", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.layerparams.LayerParams.inputDim": [[60, 64], ["layerparams.LayerParams.update"], "methods", ["home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.layerparams.LayerParams.update"], ["", "@", "inputDim", ".", "setter", "\n", "def", "inputDim", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_inputDim", "=", "value", "\n", "self", ".", "update", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.layerparams.LayerParams.update": [[65, 70], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Default. Override in derived\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.layerparams.LayerParams.activation_str": [[71, 88], ["hasattr", "str", "inspect.isclass", "inspect.isfunction", "str"], "methods", ["None"], ["", "@", "property", "\n", "def", "activation_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Get printable string from activation function.\n        :return: string\n        \"\"\"", "\n", "if", "hasattr", "(", "self", ",", "'activation'", ")", ":", "\n", "            ", "if", "self", ".", "activation", "is", "None", ":", "\n", "                ", "return", "str", "(", "None", ")", "\n", "", "elif", "inspect", ".", "isclass", "(", "self", ".", "activation", ")", ":", "\n", "                ", "return", "self", ".", "activation", ".", "__class__", ".", "__name__", "\n", "", "elif", "inspect", ".", "isfunction", "(", "self", ".", "activation", ")", ":", "\n", "                ", "return", "self", ".", "activation", ".", "__name__", "\n", "", "else", ":", "\n", "                ", "return", "str", "(", "self", ".", "activation", ")", "\n", "", "", "else", ":", "\n", "            ", "return", "''", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.layerparams.LayerParams.getOutputRange": [[89, 105], ["hasattr"], "methods", ["None"], ["", "", "def", "getOutputRange", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Get output range of layer\n        :return: output range as tuple\n        \"\"\"", "\n", "if", "not", "hasattr", "(", "self", ",", "'activation'", ")", ":", "\n", "            ", "return", "[", "-", "numpy", ".", "inf", ",", "numpy", ".", "inf", "]", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "activation_str", "==", "'tanh'", ":", "\n", "                ", "return", "[", "-", "1", ",", "1", "]", "\n", "", "elif", "self", ".", "activation_str", "==", "'sigmoid'", ":", "\n", "                ", "return", "[", "0", ",", "1", "]", "\n", "", "elif", "self", ".", "activation_str", "==", "'ReLU'", ":", "\n", "                ", "return", "[", "0", ",", "numpy", ".", "inf", "]", "\n", "", "else", ":", "\n", "                ", "return", "[", "-", "numpy", ".", "inf", ",", "numpy", ".", "inf", "]", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.hiddenlayer.HiddenLayerParams.__init__": [[41, 58], ["net.layerparams.LayerParams.__init__"], "methods", ["home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.hiddenlayer.HiddenLayer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inputDim", "=", "None", ",", "outputDim", "=", "None", ",", "activation", "=", "None", ",", "hasBias", "=", "True", ",", "init_method", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        :type inputDim: tuple of [int]\n        :param inputDim: dimensionality of input\n\n        :type outputDim: tuple of [int]\n        :param outputDim: number of hidden units\n\n        :type activation: theano.Op or function\n        :param activation: Non linearity to be applied in the hidden layer\n        \"\"\"", "\n", "\n", "super", "(", "HiddenLayerParams", ",", "self", ")", ".", "__init__", "(", "inputDim", ",", "outputDim", ")", "\n", "\n", "self", ".", "_activation", "=", "activation", "\n", "self", ".", "_hasbias", "=", "hasBias", "\n", "self", ".", "_init_method", "=", "init_method", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.hiddenlayer.HiddenLayerParams.activation": [[63, 66], ["None"], "methods", ["None"], ["", "@", "activation", ".", "setter", "\n", "def", "activation", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_activation", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.hiddenlayer.HiddenLayerParams.hasBias": [[71, 74], ["None"], "methods", ["None"], ["", "@", "hasBias", ".", "setter", "\n", "def", "hasBias", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_hasbias", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.hiddenlayer.HiddenLayerParams.getMemoryRequirement": [[75, 81], ["None"], "methods", ["None"], ["", "def", "getMemoryRequirement", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Get memory requirements of weights\n        :return: memory requirement\n        \"\"\"", "\n", "return", "(", "(", "self", ".", "inputDim", "[", "1", "]", "*", "self", ".", "outputDim", "[", "1", "]", ")", "+", "self", ".", "outputDim", "[", "1", "]", ")", "*", "4", "# sizeof(theano.config.floatX)", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.hiddenlayer.HiddenLayer.__init__": [[84, 160], ["net.layer.Layer.__init__", "isinstance", "T.dot", "hiddenlayer.HiddenLayer.getInitVals", "theano.shared", "numpy.zeros", "theano.shared", "inspect.isfunction", "theano.shared", "activation", "activation", "len", "numpy.ones", "inspect.getargspec"], "methods", ["home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.hiddenlayer.HiddenLayer.__init__", "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.layer.Layer.getInitVals", "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.hiddenlayer.HiddenLayerParams.activation", "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.hiddenlayer.HiddenLayerParams.activation"], ["    ", "def", "__init__", "(", "self", ",", "rng", ",", "inputVar", ",", "cfgParams", ",", "copyLayer", "=", "None", ",", "layerNum", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Typical hidden layer of a MLP: units are fully-connected.\n        Weight matrix W is of shape (n_in,n_out)\n        and the bias vector b is of shape (n_out,).\n\n        Hidden unit activation is given by: activation(dot(inputVar,W) + b)\n\n        :type rng: numpy.random.RandomState\n        :param rng: a random number generator used to initialize weights\n\n        :type inputVar: theano.tensor.dmatrix\n        :param inputVar: a symbolic tensor of shape (n_examples, n_in)\n\n        :type cfgParams: HiddenLayerParams\n        \"\"\"", "\n", "import", "theano", "\n", "import", "theano", ".", "tensor", "as", "T", "\n", "\n", "super", "(", "HiddenLayer", ",", "self", ")", ".", "__init__", "(", "rng", ")", "\n", "\n", "assert", "isinstance", "(", "cfgParams", ",", "HiddenLayerParams", ")", "\n", "\n", "self", ".", "inputVar", "=", "inputVar", "\n", "self", ".", "cfgParams", "=", "cfgParams", "\n", "self", ".", "layerNum", "=", "layerNum", "\n", "\n", "n_in", "=", "cfgParams", ".", "inputDim", "[", "1", "]", "\n", "n_out", "=", "cfgParams", ".", "outputDim", "[", "1", "]", "\n", "activation", "=", "cfgParams", ".", "activation", "\n", "\n", "# `W` is initialized with `W_values` which is uniformely sampled from sqrt(-6./(n_in+n_hidden)) and", "\n", "# sqrt(6./(n_in+n_hidden)) for tanh activation function the output of uniform if converted using asarray", "\n", "# to dtype theano.config.floatX so that the code is runable on GPU.", "\n", "# Note : optimal initialization of weights is dependent on the activation function used (among other things).", "\n", "# For example, results presented in [Xavier10] suggest that you should use 4 times larger initial weights for", "\n", "# sigmoid compared to tanh. We have no info for other function, so we use the same as tanh.", "\n", "floatX", "=", "theano", ".", "config", ".", "floatX", "# @UndefinedVariable", "\n", "\n", "if", "copyLayer", "is", "None", ":", "\n", "            ", "wInitVals", "=", "self", ".", "getInitVals", "(", "(", "n_in", ",", "n_out", ")", ",", "'fc'", ",", "act_fn", "=", "cfgParams", ".", "activation_str", ",", "method", "=", "cfgParams", ".", "_init_method", ")", "\n", "self", ".", "W", "=", "theano", ".", "shared", "(", "value", "=", "wInitVals", ",", "name", "=", "'W{}'", ".", "format", "(", "layerNum", ")", ",", "borrow", "=", "True", ")", "\n", "\n", "if", "self", ".", "cfgParams", ".", "hasBias", "is", "True", ":", "\n", "                ", "b_values", "=", "numpy", ".", "zeros", "(", "(", "n_out", ",", ")", ",", "dtype", "=", "floatX", ")", "\n", "self", ".", "b", "=", "theano", ".", "shared", "(", "value", "=", "b_values", ",", "name", "=", "'b{}'", ".", "format", "(", "layerNum", ")", ",", "borrow", "=", "True", ")", "\n", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "W", "=", "copyLayer", ".", "W", "\n", "if", "self", ".", "cfgParams", ".", "hasBias", "is", "True", ":", "\n", "                ", "self", ".", "b", "=", "copyLayer", ".", "b", "\n", "\n", "", "", "lin_output", "=", "T", ".", "dot", "(", "inputVar", ",", "self", ".", "W", ")", "\n", "\n", "if", "self", ".", "cfgParams", ".", "hasBias", "is", "True", ":", "\n", "            ", "lin_output", "=", "lin_output", "+", "self", ".", "b", "\n", "", "self", ".", "output_pre_act", "=", "lin_output", "\n", "\n", "if", "activation", "is", "None", ":", "\n", "            ", "self", ".", "output", "=", "lin_output", "\n", "self", ".", "output", ".", "name", "=", "'output_layer_{}'", ".", "format", "(", "self", ".", "layerNum", ")", "\n", "self", ".", "params", "=", "[", "self", ".", "W", ",", "self", ".", "b", "]", "if", "self", ".", "cfgParams", ".", "hasBias", "else", "[", "self", ".", "W", "]", "\n", "", "else", ":", "\n", "            ", "if", "inspect", ".", "isfunction", "(", "activation", ")", "and", "len", "(", "inspect", ".", "getargspec", "(", "activation", ")", ".", "args", ")", "==", "2", ":", "\n", "                ", "c_values", "=", "numpy", ".", "ones", "(", "(", "n_out", ",", ")", ",", "dtype", "=", "floatX", ")", "*", "0.5", "\n", "self", ".", "c", "=", "theano", ".", "shared", "(", "value", "=", "c_values", ",", "name", "=", "'c{}'", ".", "format", "(", "layerNum", ")", ",", "borrow", "=", "True", ")", "\n", "self", ".", "output", "=", "activation", "(", "lin_output", ",", "self", ".", "c", ")", "\n", "self", ".", "output", ".", "name", "=", "'output_layer_{}'", ".", "format", "(", "self", ".", "layerNum", ")", "\n", "self", ".", "params", "=", "[", "self", ".", "W", ",", "self", ".", "b", ",", "self", ".", "c", "]", "if", "self", ".", "cfgParams", ".", "hasBias", "else", "[", "self", ".", "W", ",", "self", ".", "c", "]", "\n", "", "else", ":", "\n", "                ", "self", ".", "output", "=", "activation", "(", "lin_output", ")", "\n", "self", ".", "output", ".", "name", "=", "'output_layer_{}'", ".", "format", "(", "self", ".", "layerNum", ")", "\n", "self", ".", "params", "=", "[", "self", ".", "W", ",", "self", ".", "b", "]", "if", "self", ".", "cfgParams", ".", "hasBias", "else", "[", "self", ".", "W", "]", "\n", "\n", "# parameters of the model", "\n", "", "", "self", ".", "weights", "=", "[", "self", ".", "W", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.moberweger_deep-prior-pp.net.hiddenlayer.HiddenLayer.__str__": [[161, 170], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Print configuration of layer\n        :return: configuration string\n        \"\"\"", "\n", "return", "\"inputDim {}, outputDim {}, activiation {}, hasBias {}\"", ".", "format", "(", "self", ".", "cfgParams", ".", "inputDim", ",", "\n", "self", ".", "cfgParams", ".", "outputDim", ",", "\n", "self", ".", "cfgParams", ".", "activation_str", ",", "\n", "self", ".", "cfgParams", ".", "hasBias", ")", "\n", "", "", ""]]}