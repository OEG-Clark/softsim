{"home.repos.pwc.inspect_result.goldblum_FeatureClustering.None.utils.Timer.__init__": [[27, 29], ["time.time"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "o", "=", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.goldblum_FeatureClustering.None.utils.Timer.measure": [[30, 38], ["int", "float", "time.time", "round"], "methods", ["None"], ["", "def", "measure", "(", "self", ",", "p", "=", "1", ")", ":", "\n", "        ", "x", "=", "(", "time", ".", "time", "(", ")", "-", "self", ".", "o", ")", "/", "float", "(", "p", ")", "\n", "x", "=", "int", "(", "x", ")", "\n", "if", "x", ">=", "3600", ":", "\n", "            ", "return", "'{:.1f}h'", ".", "format", "(", "x", "/", "3600", ")", "\n", "", "if", "x", ">=", "60", ":", "\n", "            ", "return", "'{}m'", ".", "format", "(", "round", "(", "x", "/", "60", ")", ")", "\n", "", "return", "'{}s'", ".", "format", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.goldblum_FeatureClustering.None.utils.set_gpu": [[8, 11], ["print"], "function", ["None"], ["def", "set_gpu", "(", "x", ")", ":", "\n", "    ", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", "=", "x", "\n", "print", "(", "'using gpu:'", ",", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.goldblum_FeatureClustering.None.utils.check_dir": [[12, 19], ["os.path.exists", "os.mkdir"], "function", ["None"], ["", "def", "check_dir", "(", "path", ")", ":", "\n", "    ", "'''\n    Create directory if it does not exist.\n        path:           Path of directory.\n    '''", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.goldblum_FeatureClustering.None.utils.count_accuracy": [[20, 25], ["torch.argmax().view", "torch.argmax().view", "label.view.view", "torch.argmax().view.eq().float().mean", "torch.argmax", "torch.argmax", "torch.argmax().view.eq().float", "torch.argmax().view.eq"], "function", ["None"], ["", "", "def", "count_accuracy", "(", "logits", ",", "label", ")", ":", "\n", "    ", "pred", "=", "torch", ".", "argmax", "(", "logits", ",", "dim", "=", "1", ")", ".", "view", "(", "-", "1", ")", "\n", "label", "=", "label", ".", "view", "(", "-", "1", ")", "\n", "accuracy", "=", "100", "*", "pred", ".", "eq", "(", "label", ")", ".", "float", "(", ")", ".", "mean", "(", ")", "\n", "return", "accuracy", "\n", "\n"]], "home.repos.pwc.inspect_result.goldblum_FeatureClustering.None.utils.log": [[39, 49], ["print", "open", "f.write", "f.flush"], "function", ["None"], ["", "", "def", "log", "(", "log_file_path", ",", "string", ")", ":", "\n", "    ", "'''\n    Write one line of log into screen and file.\n        log_file_path: Path of log file.\n        string:        String to write in log file.\n    '''", "\n", "with", "open", "(", "log_file_path", ",", "'a+'", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "string", "+", "'\\n'", ")", "\n", "f", ".", "flush", "(", ")", "\n", "", "print", "(", "string", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.goldblum_FeatureClustering.models.MAML_architecture.MAML_net.__init__": [[5, 35], ["torch.Module.__init__", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU", "torch.MaxPool2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU", "torch.MaxPool2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU", "torch.MaxPool2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU", "torch.MaxPool2d", "torch.Linear", "MAML_architecture.MAML_net.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "torch.init.kaiming_normal_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.mini_imagenet.FewShotDataloader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_channels", "=", "3", ",", "num_filters", "=", "32", ",", "num_classes", "=", "5", ",", "bias", "=", "True", ")", ":", "\n", "        ", "super", "(", "MAML_net", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "input_channels", ",", "num_filters", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "bias", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "num_filters", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool1", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "num_filters", ",", "num_filters", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "bias", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "num_filters", ")", "\n", "self", ".", "relu2", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool2", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "num_filters", ",", "num_filters", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "bias", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "num_filters", ")", "\n", "self", ".", "relu3", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool3", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", "\n", "self", ".", "conv4", "=", "nn", ".", "Conv2d", "(", "num_filters", ",", "num_filters", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "bias", ")", "\n", "self", ".", "bn4", "=", "nn", ".", "BatchNorm2d", "(", "num_filters", ")", "\n", "self", ".", "relu4", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool4", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", "\n", "self", ".", "head", "=", "nn", ".", "Linear", "(", "5", "*", "5", "*", "num_filters", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ".", "data", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.goldblum_FeatureClustering.models.MAML_architecture.MAML_net.forward": [[36, 43], ["MAML_architecture.MAML_net.maxpool1", "MAML_architecture.MAML_net.maxpool2", "MAML_architecture.MAML_net.maxpool3", "MAML_architecture.MAML_net.maxpool4", "MAML_architecture.MAML_net.head", "MAML_architecture.MAML_net.relu1", "MAML_architecture.MAML_net.relu2", "MAML_architecture.MAML_net.relu3", "MAML_architecture.MAML_net.relu4", "MAML_architecture.MAML_net.view", "MAML_architecture.MAML_net.bn1", "MAML_architecture.MAML_net.bn2", "MAML_architecture.MAML_net.bn3", "MAML_architecture.MAML_net.bn4", "MAML_architecture.MAML_net.size", "MAML_architecture.MAML_net.conv1", "MAML_architecture.MAML_net.conv2", "MAML_architecture.MAML_net.conv3", "MAML_architecture.MAML_net.conv4"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "maxpool1", "(", "self", ".", "relu1", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", ")", "\n", "x", "=", "self", ".", "maxpool2", "(", "self", ".", "relu2", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "x", ")", ")", ")", ")", "\n", "x", "=", "self", ".", "maxpool3", "(", "self", ".", "relu3", "(", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "x", ")", ")", ")", ")", "\n", "x", "=", "self", ".", "maxpool4", "(", "self", ".", "relu4", "(", "self", ".", "bn4", "(", "self", ".", "conv4", "(", "x", ")", ")", ")", ")", "\n", "x", "=", "self", ".", "head", "(", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.goldblum_FeatureClustering.models.MAML_architecture.MAML_Embedding.__init__": [[45, 74], ["torch.Module.__init__", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU", "torch.MaxPool2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU", "torch.MaxPool2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU", "torch.MaxPool2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU", "torch.MaxPool2d", "MAML_architecture.MAML_Embedding.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "torch.init.kaiming_normal_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.mini_imagenet.FewShotDataloader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_channels", "=", "3", ",", "num_filters", "=", "32", ",", "bias", "=", "True", ")", ":", "\n", "        ", "super", "(", "MAML_Embedding", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "input_channels", ",", "num_filters", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "bias", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "num_filters", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool1", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "num_filters", ",", "num_filters", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "bias", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "num_filters", ")", "\n", "self", ".", "relu2", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool2", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "num_filters", ",", "num_filters", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "bias", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "num_filters", ")", "\n", "self", ".", "relu3", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool3", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", "\n", "self", ".", "conv4", "=", "nn", ".", "Conv2d", "(", "num_filters", ",", "num_filters", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "bias", ")", "\n", "self", ".", "bn4", "=", "nn", ".", "BatchNorm2d", "(", "num_filters", ")", "\n", "self", ".", "relu4", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool4", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ".", "data", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.goldblum_FeatureClustering.models.MAML_architecture.MAML_Embedding.forward": [[75, 81], ["MAML_architecture.MAML_Embedding.maxpool1", "MAML_architecture.MAML_Embedding.maxpool2", "MAML_architecture.MAML_Embedding.maxpool3", "MAML_architecture.MAML_Embedding.maxpool4", "MAML_architecture.MAML_Embedding.view", "MAML_architecture.MAML_Embedding.relu1", "MAML_architecture.MAML_Embedding.relu2", "MAML_architecture.MAML_Embedding.relu3", "MAML_architecture.MAML_Embedding.relu4", "MAML_architecture.MAML_Embedding.size", "MAML_architecture.MAML_Embedding.bn1", "MAML_architecture.MAML_Embedding.bn2", "MAML_architecture.MAML_Embedding.bn3", "MAML_architecture.MAML_Embedding.bn4", "MAML_architecture.MAML_Embedding.conv1", "MAML_architecture.MAML_Embedding.conv2", "MAML_architecture.MAML_Embedding.conv3", "MAML_architecture.MAML_Embedding.conv4"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "maxpool1", "(", "self", ".", "relu1", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", ")", "\n", "x", "=", "self", ".", "maxpool2", "(", "self", ".", "relu2", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "x", ")", ")", ")", ")", "\n", "x", "=", "self", ".", "maxpool3", "(", "self", ".", "relu3", "(", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "x", ")", ")", ")", ")", "\n", "x", "=", "self", ".", "maxpool4", "(", "self", ".", "relu4", "(", "self", ".", "bn4", "(", "self", ".", "conv4", "(", "x", ")", ")", ")", ")", "\n", "return", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.goldblum_FeatureClustering.models.ResNet12_embedding.BasicBlock.__init__": [[19, 36], ["torch.Module.__init__", "ResNet12_embedding.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "ResNet12_embedding.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "ResNet12_embedding.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "models.dropblock.DropBlock"], "methods", ["home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.mini_imagenet.FewShotDataloader.__init__", "home.repos.pwc.inspect_result.goldblum_FeatureClustering.models.WRN_embedding.conv3x3", "home.repos.pwc.inspect_result.goldblum_FeatureClustering.models.WRN_embedding.conv3x3", "home.repos.pwc.inspect_result.goldblum_FeatureClustering.models.WRN_embedding.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "drop_rate", "=", "0.0", ",", "drop_block", "=", "False", ",", "block_size", "=", "1", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "LeakyReLU", "(", "0.1", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "stride", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "drop_rate", "=", "drop_rate", "\n", "self", ".", "num_batches_tracked", "=", "0", "\n", "self", ".", "drop_block", "=", "drop_block", "\n", "self", ".", "block_size", "=", "block_size", "\n", "self", ".", "DropBlock", "=", "DropBlock", "(", "block_size", "=", "self", ".", "block_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.goldblum_FeatureClustering.models.ResNet12_embedding.BasicBlock.forward": [[37, 69], ["ResNet12_embedding.BasicBlock.conv1", "ResNet12_embedding.BasicBlock.bn1", "ResNet12_embedding.BasicBlock.relu", "ResNet12_embedding.BasicBlock.conv2", "ResNet12_embedding.BasicBlock.bn2", "ResNet12_embedding.BasicBlock.relu", "ResNet12_embedding.BasicBlock.conv3", "ResNet12_embedding.BasicBlock.bn3", "ResNet12_embedding.BasicBlock.relu", "ResNet12_embedding.BasicBlock.maxpool", "ResNet12_embedding.BasicBlock.downsample", "max", "ResNet12_embedding.BasicBlock.DropBlock", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "self", ".", "num_batches_tracked", "+=", "1", "\n", "\n", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "maxpool", "(", "out", ")", "\n", "\n", "if", "self", ".", "drop_rate", ">", "0", ":", "\n", "            ", "if", "self", ".", "drop_block", "==", "True", ":", "\n", "                ", "feat_size", "=", "out", ".", "size", "(", ")", "[", "2", "]", "\n", "keep_rate", "=", "max", "(", "1.0", "-", "self", ".", "drop_rate", "/", "(", "20", "*", "2000", ")", "*", "(", "self", ".", "num_batches_tracked", ")", ",", "1.0", "-", "self", ".", "drop_rate", ")", "\n", "gamma", "=", "(", "1", "-", "keep_rate", ")", "/", "self", ".", "block_size", "**", "2", "*", "feat_size", "**", "2", "/", "(", "feat_size", "-", "self", ".", "block_size", "+", "1", ")", "**", "2", "\n", "out", "=", "self", ".", "DropBlock", "(", "out", ",", "gamma", "=", "gamma", ")", "\n", "", "else", ":", "\n", "                ", "out", "=", "F", ".", "dropout", "(", "out", ",", "p", "=", "self", ".", "drop_rate", ",", "training", "=", "self", ".", "training", ",", "inplace", "=", "True", ")", "\n", "\n", "", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.goldblum_FeatureClustering.models.ResNet12_embedding.ResNet.__init__": [[72, 93], ["torch.Module.__init__", "ResNet12_embedding.ResNet._make_layer", "ResNet12_embedding.ResNet._make_layer", "ResNet12_embedding.ResNet._make_layer", "ResNet12_embedding.ResNet._make_layer", "torch.Dropout", "torch.Dropout", "torch.Dropout", "ResNet12_embedding.ResNet.modules", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.mini_imagenet.FewShotDataloader.__init__", "home.repos.pwc.inspect_result.goldblum_FeatureClustering.models.ResNet12_embedding.ResNet._make_layer", "home.repos.pwc.inspect_result.goldblum_FeatureClustering.models.ResNet12_embedding.ResNet._make_layer", "home.repos.pwc.inspect_result.goldblum_FeatureClustering.models.ResNet12_embedding.ResNet._make_layer", "home.repos.pwc.inspect_result.goldblum_FeatureClustering.models.ResNet12_embedding.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "keep_prob", "=", "1.0", ",", "avg_pool", "=", "False", ",", "drop_rate", "=", "0.0", ",", "dropblock_size", "=", "5", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "3", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "stride", "=", "2", ",", "drop_rate", "=", "drop_rate", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "160", ",", "stride", "=", "2", ",", "drop_rate", "=", "drop_rate", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "320", ",", "stride", "=", "2", ",", "drop_rate", "=", "drop_rate", ",", "drop_block", "=", "True", ",", "block_size", "=", "dropblock_size", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "640", ",", "stride", "=", "2", ",", "drop_rate", "=", "drop_rate", ",", "drop_block", "=", "True", ",", "block_size", "=", "dropblock_size", ")", "\n", "if", "avg_pool", ":", "\n", "            ", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "2", ",", "stride", "=", "1", ")", "\n", "", "self", ".", "keep_prob", "=", "keep_prob", "\n", "self", ".", "keep_avg_pool", "=", "avg_pool", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "1", "-", "self", ".", "keep_prob", ",", "inplace", "=", "False", ")", "\n", "self", ".", "drop_rate", "=", "drop_rate", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'leaky_relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.goldblum_FeatureClustering.models.ResNet12_embedding.ResNet._make_layer": [[94, 108], ["layers.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "stride", "=", "1", ",", "drop_rate", "=", "0.0", ",", "drop_block", "=", "False", ",", "block_size", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "drop_rate", ",", "drop_block", ",", "block_size", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "\n", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.goldblum_FeatureClustering.models.ResNet12_embedding.ResNet.forward": [[109, 118], ["ResNet12_embedding.ResNet.layer1", "ResNet12_embedding.ResNet.layer2", "ResNet12_embedding.ResNet.layer3", "ResNet12_embedding.ResNet.layer4", "ResNet12_embedding.ResNet.view", "ResNet12_embedding.ResNet.avgpool", "ResNet12_embedding.ResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "if", "self", ".", "keep_avg_pool", ":", "\n", "            ", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.goldblum_FeatureClustering.models.ResNet12_embedding.conv3x3": [[10, 14], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.goldblum_FeatureClustering.models.ResNet12_embedding.resnet12": [[120, 125], ["ResNet12_embedding.ResNet"], "function", ["None"], ["", "", "def", "resnet12", "(", "keep_prob", "=", "1.0", ",", "avg_pool", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-12 model.\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "keep_prob", "=", "keep_prob", ",", "avg_pool", "=", "avg_pool", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.goldblum_FeatureClustering.models.protonet_embedding.ConvBlock.__init__": [[5, 21], ["torch.Module.__init__", "torch.Sequential", "protonet_embedding.ConvBlock.block.add_module", "torch.Conv2d", "torch.BatchNorm2d", "torch.MaxPool2d", "protonet_embedding.ConvBlock.block.add_module", "torch.ReLU", "protonet_embedding.ConvBlock.block.add_module", "torch.LeakyReLU", "protonet_embedding.ConvBlock.block.add_module", "torch.Softplus"], "methods", ["home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.mini_imagenet.FewShotDataloader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "retain_activation", "=", "True", ",", "activation", "=", "'ReLU'", ")", ":", "\n", "        ", "super", "(", "ConvBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "block", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", "\n", ")", "\n", "\n", "if", "retain_activation", ":", "\n", "            ", "if", "activation", "==", "'ReLU'", ":", "\n", "                ", "self", ".", "block", ".", "add_module", "(", "\"ReLU\"", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "", "elif", "activation", "==", "'LeakyReLU'", ":", "\n", "                ", "self", ".", "block", ".", "add_module", "(", "\"LeakyReLU\"", ",", "nn", ".", "LeakyReLU", "(", "0.1", ")", ")", "\n", "", "elif", "activation", "==", "'Softplus'", ":", "\n", "                ", "self", ".", "block", ".", "add_module", "(", "\"Softplus\"", ",", "nn", ".", "Softplus", "(", ")", ")", "\n", "", "", "self", ".", "block", ".", "add_module", "(", "\"MaxPool2d\"", ",", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.goldblum_FeatureClustering.models.protonet_embedding.ConvBlock.forward": [[22, 25], ["protonet_embedding.ConvBlock.block"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "block", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.goldblum_FeatureClustering.models.protonet_embedding.ProtoNetEmbedding.__init__": [[30, 45], ["torch.Module.__init__", "torch.Sequential", "protonet_embedding.ProtoNetEmbedding.modules", "protonet_embedding.ConvBlock", "protonet_embedding.ConvBlock", "protonet_embedding.ConvBlock", "protonet_embedding.ConvBlock", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.mini_imagenet.FewShotDataloader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "x_dim", "=", "3", ",", "h_dim", "=", "64", ",", "z_dim", "=", "64", ",", "retain_last_activation", "=", "True", ",", "activation", "=", "'ReLU'", ")", ":", "\n", "        ", "super", "(", "ProtoNetEmbedding", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "encoder", "=", "nn", ".", "Sequential", "(", "\n", "ConvBlock", "(", "x_dim", ",", "h_dim", ",", "activation", "=", "activation", ")", ",", "\n", "ConvBlock", "(", "h_dim", ",", "h_dim", ",", "activation", "=", "activation", ")", ",", "\n", "ConvBlock", "(", "h_dim", ",", "h_dim", ",", "activation", "=", "activation", ")", ",", "\n", "ConvBlock", "(", "h_dim", ",", "z_dim", ",", "retain_activation", "=", "retain_last_activation", ",", "activation", "=", "activation", ")", ",", "\n", ")", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.goldblum_FeatureClustering.models.protonet_embedding.ProtoNetEmbedding.forward": [[46, 49], ["protonet_embedding.ProtoNetEmbedding.encoder", "protonet_embedding.ProtoNetEmbedding.view", "protonet_embedding.ProtoNetEmbedding.size"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "encoder", "(", "x", ")", "\n", "return", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.goldblum_FeatureClustering.models.R2D2_embedding.R2D2Embedding.__init__": [[32, 46], ["torch.Module.__init__", "R2D2_embedding.R2D2_conv_block", "R2D2_embedding.R2D2_conv_block", "R2D2_embedding.R2D2_conv_block", "R2D2_embedding.R2D2_conv_block"], "methods", ["home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.mini_imagenet.FewShotDataloader.__init__", "home.repos.pwc.inspect_result.goldblum_FeatureClustering.models.R2D2_embedding.R2D2_conv_block", "home.repos.pwc.inspect_result.goldblum_FeatureClustering.models.R2D2_embedding.R2D2_conv_block", "home.repos.pwc.inspect_result.goldblum_FeatureClustering.models.R2D2_embedding.R2D2_conv_block", "home.repos.pwc.inspect_result.goldblum_FeatureClustering.models.R2D2_embedding.R2D2_conv_block"], ["    ", "def", "__init__", "(", "self", ",", "x_dim", "=", "3", ",", "h1_dim", "=", "96", ",", "h2_dim", "=", "192", ",", "h3_dim", "=", "384", ",", "z_dim", "=", "512", ",", "retain_last_activation", "=", "False", ",", "denoise", "=", "False", ",", "activation", "=", "'LeakyReLU'", ")", ":", "\n", "        ", "super", "(", "R2D2Embedding", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "block1", "=", "R2D2_conv_block", "(", "x_dim", ",", "h1_dim", ",", "activation", "=", "activation", ")", "\n", "self", ".", "block2", "=", "R2D2_conv_block", "(", "h1_dim", ",", "h2_dim", ",", "activation", "=", "activation", ")", "\n", "self", ".", "block3", "=", "R2D2_conv_block", "(", "h2_dim", ",", "h3_dim", ",", "keep_prob", "=", "0.9", ",", "activation", "=", "activation", ")", "\n", "self", ".", "denoise", "=", "denoise", "\n", "# In the last conv block, we disable activation function to boost the classification accuracy.", "\n", "# This trick was proposed by Gidaris et al. (CVPR 2018).", "\n", "# With this trick, the accuracy goes up from 50% to 51%.", "\n", "# Although the authors of R2D2 did not mention this trick in the paper,", "\n", "# we were unable to reproduce the result of Bertinetto et al. without resorting to this trick.", "\n", "self", ".", "block4", "=", "R2D2_conv_block", "(", "h3_dim", ",", "z_dim", ",", "retain_activation", "=", "retain_last_activation", ",", "keep_prob", "=", "0.7", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.goldblum_FeatureClustering.models.R2D2_embedding.R2D2Embedding.forward": [[47, 74], ["R2D2_embedding.R2D2Embedding.block1", "R2D2_embedding.R2D2Embedding.block2", "R2D2_embedding.R2D2Embedding.block3", "R2D2_embedding.R2D2Embedding.block4", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "R2D2_embedding.R2D2Embedding.size", "torch.Conv2d().to", "torch.Conv2d().to", "torch.Conv2d().to", "torch.Conv2d().to", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "nn.Conv2d().to.size", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax.", "torch.nn.Softmax.", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.Conv2d().to", "torch.Conv2d().to", "torch.Conv2d().to.", "torch.Conv2d().to.", "torch.Conv2d().to.", "math.sqrt", "R2D2_embedding.R2D2Embedding.view", "R2D2_embedding.R2D2Embedding.view", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "R2D2_embedding.R2D2Embedding.size", "R2D2_embedding.R2D2Embedding.size", "int", "int", "nn.Conv2d().to.size", "nn.Conv2d().to.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "b1", "=", "self", ".", "block1", "(", "x", ")", "\n", "b2", "=", "self", ".", "block2", "(", "b1", ")", "\n", "if", "self", ".", "denoise", ":", "\n", "#print(\"before denoise\", b2.size())", "\n", "            ", "_", ",", "n_in", ",", "H", ",", "W", "=", "b2", ".", "size", "(", ")", "\n", "theta", "=", "nn", ".", "Conv2d", "(", "n_in", ",", "int", "(", "n_in", "/", "2", ")", ",", "1", ",", "\n", "stride", "=", "1", ",", "bias", "=", "False", ")", ".", "to", "(", "'cuda'", ")", "\n", "phi", "=", "nn", ".", "Conv2d", "(", "n_in", ",", "int", "(", "n_in", "/", "2", ")", ",", "1", ",", "\n", "stride", "=", "1", ",", "bias", "=", "False", ")", ".", "to", "(", "'cuda'", ")", "\n", "g", "=", "b2", "\n", "f", "=", "torch", ".", "einsum", "(", "'niab,nicd->nabcd'", ",", "theta", "(", "b2", ")", ",", "phi", "(", "b2", ")", ")", "\n", "orig_shape", "=", "f", ".", "size", "(", ")", "\n", "f", "=", "torch", ".", "reshape", "(", "f", ",", "(", "-", "1", ",", "H", "*", "W", ",", "H", "*", "W", ")", ")", "\n", "f", "=", "f", "/", "math", ".", "sqrt", "(", "n_in", ")", "\n", "softmax", "=", "torch", ".", "nn", ".", "Softmax", "(", "dim", "=", "0", ")", "\n", "f", "=", "softmax", "(", "f", ")", "\n", "f", "=", "torch", ".", "reshape", "(", "f", ",", "orig_shape", ")", "\n", "f", "=", "torch", ".", "einsum", "(", "'nabcd,nicd->niab'", ",", "f", ",", "g", ")", "\n", "final_conv", "=", "nn", ".", "Conv2d", "(", "f", ".", "size", "(", ")", "[", "1", "]", ",", "f", ".", "size", "(", ")", "[", "1", "]", ",", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ".", "to", "(", "'cuda'", ")", "\n", "f", "=", "final_conv", "(", "f", ")", "\n", "b2", "=", "b2", "+", "f", "\n", "#print(\"after denoise\", b2.size())", "\n", "", "b3", "=", "self", ".", "block3", "(", "b2", ")", "\n", "b4", "=", "self", ".", "block4", "(", "b3", ")", "\n", "# Flatten and concatenate the output of the 3rd and 4th conv blocks as proposed in R2D2 paper.", "\n", "return", "torch", ".", "cat", "(", "(", "b3", ".", "view", "(", "b3", ".", "size", "(", "0", ")", ",", "-", "1", ")", ",", "b4", ".", "view", "(", "b4", ".", "size", "(", "0", ")", ",", "-", "1", ")", ")", ",", "1", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.goldblum_FeatureClustering.models.R2D2_embedding.R2D2_conv_block": [[12, 30], ["torch.Sequential", "torch.Conv2d", "torch.BatchNorm2d", "torch.MaxPool2d", "nn.Sequential.add_module", "nn.Sequential.add_module", "torch.Dropout", "torch.LeakyReLU", "nn.Sequential.add_module", "torch.ReLU", "nn.Sequential.add_module", "torch.Softplus"], "function", ["None"], ["def", "R2D2_conv_block", "(", "in_channels", ",", "out_channels", ",", "retain_activation", "=", "True", ",", "keep_prob", "=", "1.0", ",", "activation", "=", "'LeakyReLU'", ")", ":", "\n", "    ", "block", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ")", "\n", ")", "\n", "if", "retain_activation", ":", "\n", "        ", "if", "activation", "==", "'LeakyReLU'", ":", "\n", "            ", "block", ".", "add_module", "(", "\"LeakyReLU\"", ",", "nn", ".", "LeakyReLU", "(", "0.1", ")", ")", "\n", "", "elif", "activation", "==", "'ReLU'", ":", "\n", "            ", "block", ".", "add_module", "(", "\"ReLU\"", ",", "nn", ".", "ReLU", "(", ")", ")", "\n", "", "elif", "activation", "==", "'Softplus'", ":", "\n", "            ", "block", ".", "add_module", "(", "\"Softplus\"", ",", "nn", ".", "Softplus", "(", ")", ")", "\n", "\n", "", "", "if", "keep_prob", "<", "1.0", ":", "\n", "        ", "block", ".", "add_module", "(", "\"Dropout\"", ",", "nn", ".", "Dropout", "(", "p", "=", "1", "-", "keep_prob", ",", "inplace", "=", "False", ")", ")", "\n", "\n", "", "return", "block", "\n", "\n"]], "home.repos.pwc.inspect_result.goldblum_FeatureClustering.models.WRN_embedding.wide_basic.__init__": [[23, 35], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.mini_imagenet.FewShotDataloader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "dropout_rate", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "wide_basic", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "dropout_rate", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "True", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.goldblum_FeatureClustering.models.WRN_embedding.wide_basic.forward": [[37, 43], ["WRN_embedding.wide_basic.dropout", "WRN_embedding.wide_basic.conv2", "WRN_embedding.wide_basic.shortcut", "WRN_embedding.wide_basic.conv1", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "WRN_embedding.wide_basic.bn2", "WRN_embedding.wide_basic.bn1"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "dropout", "(", "self", ".", "conv1", "(", "F", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ")", ")", ")", "\n", "out", "=", "self", ".", "conv2", "(", "F", ".", "relu", "(", "self", ".", "bn2", "(", "out", ")", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.goldblum_FeatureClustering.models.WRN_embedding.Wide_ResNet.__init__": [[45, 63], ["torch.Module.__init__", "print", "WRN_embedding.conv3x3", "WRN_embedding.Wide_ResNet._wide_layer", "WRN_embedding.Wide_ResNet._wide_layer", "WRN_embedding.Wide_ResNet._wide_layer", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.mini_imagenet.FewShotDataloader.__init__", "home.repos.pwc.inspect_result.goldblum_FeatureClustering.models.WRN_embedding.conv3x3", "home.repos.pwc.inspect_result.goldblum_FeatureClustering.models.WRN_embedding.Wide_ResNet._wide_layer", "home.repos.pwc.inspect_result.goldblum_FeatureClustering.models.WRN_embedding.Wide_ResNet._wide_layer", "home.repos.pwc.inspect_result.goldblum_FeatureClustering.models.WRN_embedding.Wide_ResNet._wide_layer"], ["    ", "def", "__init__", "(", "self", ",", "depth", ",", "widen_factor", ",", "dropout_rate", ",", "num_classes", ",", "avg_pool", "=", "False", ")", ":", "\n", "        ", "super", "(", "Wide_ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "16", "\n", "\n", "assert", "(", "(", "depth", "-", "4", ")", "%", "6", "==", "0", ")", ",", "'Wide-resnet depth should be 6n+4'", "\n", "n", "=", "(", "depth", "-", "4", ")", "/", "6", "\n", "k", "=", "widen_factor", "\n", "\n", "print", "(", "'| Wide-Resnet %dx%d'", "%", "(", "depth", ",", "k", ")", ")", "\n", "nStages", "=", "[", "16", ",", "16", "*", "k", ",", "32", "*", "k", ",", "64", "*", "k", "]", "\n", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "3", ",", "nStages", "[", "0", "]", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_wide_layer", "(", "wide_basic", ",", "nStages", "[", "1", "]", ",", "n", ",", "dropout_rate", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_wide_layer", "(", "wide_basic", ",", "nStages", "[", "2", "]", ",", "n", ",", "dropout_rate", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_wide_layer", "(", "wide_basic", ",", "nStages", "[", "3", "]", ",", "n", ",", "dropout_rate", ",", "stride", "=", "2", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "nStages", "[", "3", "]", ",", "momentum", "=", "0.9", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "nStages", "[", "3", "]", ",", "num_classes", ")", "\n", "self", ".", "keep_avg_pool", "=", "avg_pool", "\n", "\n"]], "home.repos.pwc.inspect_result.goldblum_FeatureClustering.models.WRN_embedding.Wide_ResNet._wide_layer": [[64, 73], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block", "int"], "methods", ["None"], ["", "def", "_wide_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "dropout_rate", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "int", "(", "num_blocks", ")", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "dropout_rate", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.goldblum_FeatureClustering.models.WRN_embedding.Wide_ResNet.forward": [[74, 86], ["WRN_embedding.Wide_ResNet.conv1", "WRN_embedding.Wide_ResNet.layer1", "WRN_embedding.Wide_ResNet.layer2", "WRN_embedding.Wide_ResNet.layer3", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.avg_pool2d.view", "WRN_embedding.Wide_ResNet.bn1", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "out", ")", ")", "\n", "if", "self", ".", "keep_avg_pool", ":", "\n", "            ", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "8", ")", "\n", "", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "#out = self.linear(out)", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.goldblum_FeatureClustering.models.WRN_embedding.conv3x3": [[10, 12], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.goldblum_FeatureClustering.models.WRN_embedding.conv_init": [[13, 21], ["classname.find", "torch.xavier_uniform_", "torch.constant_", "classname.find", "torch.constant_", "torch.constant_", "numpy.sqrt"], "function", ["None"], ["", "def", "conv_init", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "xavier_uniform_", "(", "m", ".", "weight", ",", "gain", "=", "np", ".", "sqrt", "(", "2", ")", ")", "\n", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "classname", ".", "find", "(", "'BatchNorm'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.goldblum_FeatureClustering.models.WRN_embedding.wrn_28_10": [[87, 90], ["WRN_embedding.Wide_ResNet"], "function", ["None"], ["", "", "def", "wrn_28_10", "(", ")", ":", "\n", "    ", "model", "=", "Wide_ResNet", "(", "28", ",", "10", ",", "0.3", ",", "64", ",", "True", ")", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.goldblum_FeatureClustering.models.dropblock.DropBlock.__init__": [[8, 12], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.mini_imagenet.FewShotDataloader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "block_size", ")", ":", "\n", "        ", "super", "(", "DropBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "block_size", "=", "block_size", "\n", "#self.gamma = gamma", "\n"]], "home.repos.pwc.inspect_result.goldblum_FeatureClustering.models.dropblock.DropBlock.forward": [[15, 33], ["torch.distributions.Bernoulli", "torch.distributions.Bernoulli", "torch.distributions.Bernoulli.sample().cuda", "torch.distributions.Bernoulli.sample().cuda", "dropblock.DropBlock._compute_block_mask", "dropblock.DropBlock.sum", "torch.distributions.Bernoulli.sample", "torch.distributions.Bernoulli.sample", "dropblock.DropBlock.size", "dropblock.DropBlock.size", "dropblock.DropBlock.size", "dropblock.DropBlock.size"], "methods", ["home.repos.pwc.inspect_result.goldblum_FeatureClustering.models.dropblock.DropBlock._compute_block_mask"], ["", "def", "forward", "(", "self", ",", "x", ",", "gamma", ")", ":", "\n", "# shape: (bsize, channels, height, width)", "\n", "\n", "        ", "if", "self", ".", "training", ":", "\n", "            ", "batch_size", ",", "channels", ",", "height", ",", "width", "=", "x", ".", "shape", "\n", "\n", "bernoulli", "=", "Bernoulli", "(", "gamma", ")", "\n", "mask", "=", "bernoulli", ".", "sample", "(", "(", "batch_size", ",", "channels", ",", "height", "-", "(", "self", ".", "block_size", "-", "1", ")", ",", "width", "-", "(", "self", ".", "block_size", "-", "1", ")", ")", ")", ".", "cuda", "(", ")", "\n", "#print((x.sample[-2], x.sample[-1]))", "\n", "block_mask", "=", "self", ".", "_compute_block_mask", "(", "mask", ")", "\n", "#print (block_mask.size())", "\n", "#print (x.size())", "\n", "countM", "=", "block_mask", ".", "size", "(", ")", "[", "0", "]", "*", "block_mask", ".", "size", "(", ")", "[", "1", "]", "*", "block_mask", ".", "size", "(", ")", "[", "2", "]", "*", "block_mask", ".", "size", "(", ")", "[", "3", "]", "\n", "count_ones", "=", "block_mask", ".", "sum", "(", ")", "\n", "\n", "return", "block_mask", "*", "x", "*", "(", "countM", "/", "count_ones", ")", "\n", "", "else", ":", "\n", "            ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.goldblum_FeatureClustering.models.dropblock.DropBlock._compute_block_mask": [[34, 65], ["int", "int", "mask.nonzero", "torch.stack().t().cuda", "torch.stack().t().cuda", "torch.stack().t().cuda", "torch.stack().t().cuda", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "non_zero_idxs.repeat.repeat.repeat", "offsets.long.long.repeat().view", "offsets.long.long.long", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.stack().t", "torch.stack().t", "torch.stack().t", "torch.stack().t", "torch.zeros().cuda().long", "torch.zeros().cuda().long", "torch.zeros().cuda().long", "torch.zeros().cuda().long", "offsets.long.long.long", "offsets.long.long.repeat", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.arange().view().expand().reshape", "torch.arange().view().expand().reshape", "torch.arange().view().expand().reshape", "torch.arange().view().expand().reshape", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.arange().view().expand", "torch.arange().view().expand", "torch.arange().view().expand", "torch.arange().view().expand", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["None"], ["", "", "def", "_compute_block_mask", "(", "self", ",", "mask", ")", ":", "\n", "        ", "left_padding", "=", "int", "(", "(", "self", ".", "block_size", "-", "1", ")", "/", "2", ")", "\n", "right_padding", "=", "int", "(", "self", ".", "block_size", "/", "2", ")", "\n", "\n", "batch_size", ",", "channels", ",", "height", ",", "width", "=", "mask", ".", "shape", "\n", "#print (\"mask\", mask[0][0])", "\n", "non_zero_idxs", "=", "mask", ".", "nonzero", "(", ")", "\n", "nr_blocks", "=", "non_zero_idxs", ".", "shape", "[", "0", "]", "\n", "\n", "offsets", "=", "torch", ".", "stack", "(", "\n", "[", "\n", "torch", ".", "arange", "(", "self", ".", "block_size", ")", ".", "view", "(", "-", "1", ",", "1", ")", ".", "expand", "(", "self", ".", "block_size", ",", "self", ".", "block_size", ")", ".", "reshape", "(", "-", "1", ")", ",", "# - left_padding,", "\n", "torch", ".", "arange", "(", "self", ".", "block_size", ")", ".", "repeat", "(", "self", ".", "block_size", ")", ",", "#- left_padding", "\n", "]", "\n", ")", ".", "t", "(", ")", ".", "cuda", "(", ")", "\n", "offsets", "=", "torch", ".", "cat", "(", "(", "torch", ".", "zeros", "(", "self", ".", "block_size", "**", "2", ",", "2", ")", ".", "cuda", "(", ")", ".", "long", "(", ")", ",", "offsets", ".", "long", "(", ")", ")", ",", "1", ")", "\n", "\n", "if", "nr_blocks", ">", "0", ":", "\n", "            ", "non_zero_idxs", "=", "non_zero_idxs", ".", "repeat", "(", "self", ".", "block_size", "**", "2", ",", "1", ")", "\n", "offsets", "=", "offsets", ".", "repeat", "(", "nr_blocks", ",", "1", ")", ".", "view", "(", "-", "1", ",", "4", ")", "\n", "offsets", "=", "offsets", ".", "long", "(", ")", "\n", "\n", "block_idxs", "=", "non_zero_idxs", "+", "offsets", "\n", "#block_idxs += left_padding", "\n", "padded_mask", "=", "F", ".", "pad", "(", "mask", ",", "(", "left_padding", ",", "right_padding", ",", "left_padding", ",", "right_padding", ")", ")", "\n", "padded_mask", "[", "block_idxs", "[", ":", ",", "0", "]", ",", "block_idxs", "[", ":", ",", "1", "]", ",", "block_idxs", "[", ":", ",", "2", "]", ",", "block_idxs", "[", ":", ",", "3", "]", "]", "=", "1.", "\n", "", "else", ":", "\n", "            ", "padded_mask", "=", "F", ".", "pad", "(", "mask", ",", "(", "left_padding", ",", "right_padding", ",", "left_padding", ",", "right_padding", ")", ")", "\n", "\n", "", "block_mask", "=", "1", "-", "padded_mask", "#[:height, :width]", "\n", "return", "block_mask", "\n", "", "", ""]], "home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.CIFAR_FS.CIFAR_FS.__init__": [[54, 144], ["print", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "torchvision.Normalize", "torchvision.Normalize", "torchvision.Normalize", "CIFAR_FS.load_data", "CIFAR_FS.buildLabelIndex", "sorted", "len", "len", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "CIFAR_FS.CIFAR_FS.label2ind.keys", "numpy.concatenate", "CIFAR_FS.buildLabelIndex", "sorted", "len", "buildLabelIndex().keys", "buildLabelIndex().keys", "len", "len", "ValueError", "CIFAR_FS.load_data", "CIFAR_FS.load_data", "CIFAR_FS.load_data", "CIFAR_FS.load_data", "CIFAR_FS.CIFAR_FS.label2ind.keys", "set", "set", "len", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.RandomCrop", "torchvision.RandomCrop", "torchvision.RandomCrop", "torchvision.ColorJitter", "torchvision.ColorJitter", "torchvision.ColorJitter", "torchvision.RandomHorizontalFlip", "torchvision.RandomHorizontalFlip", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.ToTensor", "CIFAR_FS.buildLabelIndex", "CIFAR_FS.buildLabelIndex", "numpy.asarray", "numpy.asarray"], "methods", ["home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.mini_imagenet.load_data", "home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.mini_imagenet.buildLabelIndex", "home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.mini_imagenet.buildLabelIndex", "home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.mini_imagenet.load_data", "home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.mini_imagenet.load_data", "home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.mini_imagenet.load_data", "home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.mini_imagenet.load_data", "home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.mini_imagenet.buildLabelIndex", "home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.mini_imagenet.buildLabelIndex"], ["    ", "def", "__init__", "(", "self", ",", "phase", "=", "'train'", ",", "do_not_use_random_transf", "=", "False", ")", ":", "\n", "\n", "        ", "assert", "(", "phase", "==", "'train'", "or", "phase", "==", "'val'", "or", "phase", "==", "'test'", ")", "\n", "self", ".", "phase", "=", "phase", "\n", "self", ".", "name", "=", "'CIFAR_FS_'", "+", "phase", "\n", "\n", "print", "(", "'Loading CIFAR-FS dataset - phase {0}'", ".", "format", "(", "phase", ")", ")", "\n", "file_train_categories_train_phase", "=", "os", ".", "path", ".", "join", "(", "\n", "_CIFAR_FS_DATASET_DIR", ",", "\n", "'CIFAR_FS_train.pickle'", ")", "\n", "file_train_categories_val_phase", "=", "os", ".", "path", ".", "join", "(", "\n", "_CIFAR_FS_DATASET_DIR", ",", "\n", "'CIFAR_FS_train.pickle'", ")", "\n", "file_train_categories_test_phase", "=", "os", ".", "path", ".", "join", "(", "\n", "_CIFAR_FS_DATASET_DIR", ",", "\n", "'CIFAR_FS_train.pickle'", ")", "\n", "file_val_categories_val_phase", "=", "os", ".", "path", ".", "join", "(", "\n", "_CIFAR_FS_DATASET_DIR", ",", "\n", "'CIFAR_FS_val.pickle'", ")", "\n", "file_test_categories_test_phase", "=", "os", ".", "path", ".", "join", "(", "\n", "_CIFAR_FS_DATASET_DIR", ",", "\n", "'CIFAR_FS_test.pickle'", ")", "\n", "\n", "if", "self", ".", "phase", "==", "'train'", ":", "\n", "# During training phase we only load the training phase images", "\n", "# of the training categories (aka base categories).", "\n", "            ", "data_train", "=", "load_data", "(", "file_train_categories_train_phase", ")", "\n", "self", ".", "data", "=", "data_train", "[", "'data'", "]", "\n", "self", ".", "labels", "=", "data_train", "[", "'labels'", "]", "\n", "\n", "self", ".", "label2ind", "=", "buildLabelIndex", "(", "self", ".", "labels", ")", "\n", "self", ".", "labelIds", "=", "sorted", "(", "self", ".", "label2ind", ".", "keys", "(", ")", ")", "\n", "self", ".", "num_cats", "=", "len", "(", "self", ".", "labelIds", ")", "\n", "self", ".", "labelIds_base", "=", "self", ".", "labelIds", "\n", "self", ".", "num_cats_base", "=", "len", "(", "self", ".", "labelIds_base", ")", "\n", "\n", "", "elif", "self", ".", "phase", "==", "'val'", "or", "self", ".", "phase", "==", "'test'", ":", "\n", "            ", "if", "self", ".", "phase", "==", "'test'", ":", "\n", "# load data that will be used for evaluating the recognition", "\n", "# accuracy of the base categories.", "\n", "                ", "data_base", "=", "load_data", "(", "file_train_categories_test_phase", ")", "\n", "# load data that will be use for evaluating the few-shot recogniton", "\n", "# accuracy on the novel categories.", "\n", "data_novel", "=", "load_data", "(", "file_test_categories_test_phase", ")", "\n", "", "else", ":", "# phase=='val'", "\n", "# load data that will be used for evaluating the recognition", "\n", "# accuracy of the base categories.", "\n", "                ", "data_base", "=", "load_data", "(", "file_train_categories_val_phase", ")", "\n", "# load data that will be use for evaluating the few-shot recogniton", "\n", "# accuracy on the novel categories.", "\n", "data_novel", "=", "load_data", "(", "file_val_categories_val_phase", ")", "\n", "\n", "", "self", ".", "data", "=", "np", ".", "concatenate", "(", "\n", "[", "data_base", "[", "'data'", "]", ",", "data_novel", "[", "'data'", "]", "]", ",", "axis", "=", "0", ")", "\n", "self", ".", "labels", "=", "data_base", "[", "'labels'", "]", "+", "data_novel", "[", "'labels'", "]", "\n", "\n", "self", ".", "label2ind", "=", "buildLabelIndex", "(", "self", ".", "labels", ")", "\n", "self", ".", "labelIds", "=", "sorted", "(", "self", ".", "label2ind", ".", "keys", "(", ")", ")", "\n", "self", ".", "num_cats", "=", "len", "(", "self", ".", "labelIds", ")", "\n", "\n", "self", ".", "labelIds_base", "=", "buildLabelIndex", "(", "data_base", "[", "'labels'", "]", ")", ".", "keys", "(", ")", "\n", "self", ".", "labelIds_novel", "=", "buildLabelIndex", "(", "data_novel", "[", "'labels'", "]", ")", ".", "keys", "(", ")", "\n", "self", ".", "num_cats_base", "=", "len", "(", "self", ".", "labelIds_base", ")", "\n", "self", ".", "num_cats_novel", "=", "len", "(", "self", ".", "labelIds_novel", ")", "\n", "intersection", "=", "set", "(", "self", ".", "labelIds_base", ")", "&", "set", "(", "self", ".", "labelIds_novel", ")", "\n", "assert", "(", "len", "(", "intersection", ")", "==", "0", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Not valid phase {0}'", ".", "format", "(", "self", ".", "phase", ")", ")", "\n", "\n", "", "mean_pix", "=", "[", "x", "/", "255.0", "for", "x", "in", "[", "129.37731888", ",", "124.10583864", ",", "112.47758569", "]", "]", "\n", "\n", "std_pix", "=", "[", "x", "/", "255.0", "for", "x", "in", "[", "68.20947949", ",", "65.43124043", ",", "70.45866994", "]", "]", "\n", "\n", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "mean_pix", ",", "std", "=", "std_pix", ")", "\n", "\n", "if", "(", "self", ".", "phase", "==", "'test'", "or", "self", ".", "phase", "==", "'val'", ")", "or", "(", "do_not_use_random_transf", "==", "True", ")", ":", "\n", "\n", "            ", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "lambda", "x", ":", "np", ".", "asarray", "(", "x", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", "#,", "\n", "#normalize", "\n", "]", ")", "\n", "", "else", ":", "\n", "\n", "            ", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomCrop", "(", "32", ",", "padding", "=", "4", ")", ",", "\n", "transforms", ".", "ColorJitter", "(", "brightness", "=", "0.4", ",", "contrast", "=", "0.4", ",", "saturation", "=", "0.4", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "lambda", "x", ":", "np", ".", "asarray", "(", "x", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", "#,", "\n", "#normalize", "\n"]], "home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.CIFAR_FS.CIFAR_FS.__getitem__": [[147, 155], ["PIL.Image.fromarray", "CIFAR_FS.CIFAR_FS.transform"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "img", ",", "label", "=", "self", ".", "data", "[", "index", "]", ",", "self", ".", "labels", "[", "index", "]", "\n", "# doing this so that it is consistent with all other datasets", "\n", "# to return a PIL Image", "\n", "img", "=", "Image", ".", "fromarray", "(", "img", ")", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "", "return", "img", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.CIFAR_FS.CIFAR_FS.__len__": [[156, 158], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.CIFAR_FS.FewShotDataloader.__init__": [[161, 196], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "dataset", ",", "\n", "nKnovel", "=", "5", ",", "# number of novel categories.", "\n", "nKbase", "=", "-", "1", ",", "# number of base categories.", "\n", "nExemplars", "=", "1", ",", "# number of training examples per novel category.", "\n", "nTestNovel", "=", "15", "*", "5", ",", "# number of test examples for all the novel categories.", "\n", "nTestBase", "=", "15", "*", "5", ",", "# number of test examples for all the base categories.", "\n", "batch_size", "=", "1", ",", "# number of training episodes per batch.", "\n", "num_workers", "=", "4", ",", "\n", "epoch_size", "=", "2000", ",", "# number of batches per epoch.", "\n", ")", ":", "\n", "\n", "        ", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "phase", "=", "self", ".", "dataset", ".", "phase", "\n", "max_possible_nKnovel", "=", "(", "self", ".", "dataset", ".", "num_cats_base", "if", "self", ".", "phase", "==", "'train'", "\n", "else", "self", ".", "dataset", ".", "num_cats_novel", ")", "\n", "assert", "(", "nKnovel", ">=", "0", "and", "nKnovel", "<", "max_possible_nKnovel", ")", "\n", "self", ".", "nKnovel", "=", "nKnovel", "\n", "\n", "max_possible_nKbase", "=", "self", ".", "dataset", ".", "num_cats_base", "\n", "nKbase", "=", "nKbase", "if", "nKbase", ">=", "0", "else", "max_possible_nKbase", "\n", "if", "self", ".", "phase", "==", "'train'", "and", "nKbase", ">", "0", ":", "\n", "            ", "nKbase", "-=", "self", ".", "nKnovel", "\n", "max_possible_nKbase", "-=", "self", ".", "nKnovel", "\n", "\n", "", "assert", "(", "nKbase", ">=", "0", "and", "nKbase", "<=", "max_possible_nKbase", ")", "\n", "self", ".", "nKbase", "=", "nKbase", "\n", "\n", "self", ".", "nExemplars", "=", "nExemplars", "\n", "self", ".", "nTestNovel", "=", "nTestNovel", "\n", "self", ".", "nTestBase", "=", "nTestBase", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "epoch_size", "=", "epoch_size", "\n", "self", ".", "num_workers", "=", "num_workers", "\n", "self", ".", "is_eval_mode", "=", "(", "self", ".", "phase", "==", "'test'", ")", "or", "(", "self", ".", "phase", "==", "'val'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.CIFAR_FS.FewShotDataloader.sampleImageIdsFrom": [[197, 214], ["random.sample", "len"], "methods", ["None"], ["", "def", "sampleImageIdsFrom", "(", "self", ",", "cat_id", ",", "sample_size", "=", "1", ")", ":", "\n", "        ", "\"\"\"\n        Samples `sample_size` number of unique image ids picked from the\n        category `cat_id` (i.e., self.dataset.label2ind[cat_id]).\n\n        Args:\n            cat_id: a scalar with the id of the category from which images will\n                be sampled.\n            sample_size: number of images that will be sampled.\n\n        Returns:\n            image_ids: a list of length `sample_size` with unique image ids.\n        \"\"\"", "\n", "assert", "(", "cat_id", "in", "self", ".", "dataset", ".", "label2ind", ")", "\n", "assert", "(", "len", "(", "self", ".", "dataset", ".", "label2ind", "[", "cat_id", "]", ")", ">=", "sample_size", ")", "\n", "# Note: random.sample samples elements without replacement.", "\n", "return", "random", ".", "sample", "(", "self", ".", "dataset", ".", "label2ind", "[", "cat_id", "]", ",", "sample_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.CIFAR_FS.FewShotDataloader.sampleCategories": [[215, 240], ["random.sample", "len", "ValueError"], "methods", ["None"], ["", "def", "sampleCategories", "(", "self", ",", "cat_set", ",", "sample_size", "=", "1", ")", ":", "\n", "        ", "\"\"\"\n        Samples `sample_size` number of unique categories picked from the\n        `cat_set` set of categories. `cat_set` can be either 'base' or 'novel'.\n\n        Args:\n            cat_set: string that specifies the set of categories from which\n                categories will be sampled.\n            sample_size: number of categories that will be sampled.\n\n        Returns:\n            cat_ids: a list of length `sample_size` with unique category ids.\n        \"\"\"", "\n", "if", "cat_set", "==", "'base'", ":", "\n", "            ", "labelIds", "=", "self", ".", "dataset", ".", "labelIds_base", "\n", "", "elif", "cat_set", "==", "'novel'", ":", "\n", "            ", "labelIds", "=", "self", ".", "dataset", ".", "labelIds_novel", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Not recognized category set {}'", ".", "format", "(", "cat_set", ")", ")", "\n", "\n", "", "assert", "(", "len", "(", "labelIds", ")", ">=", "sample_size", ")", "\n", "# return sample_size unique categories chosen from labelIds set of", "\n", "# categories (that can be either self.labelIds_base or self.labelIds_novel)", "\n", "# Note: random.sample samples elements without replacement.", "\n", "return", "random", ".", "sample", "(", "labelIds", ",", "sample_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.CIFAR_FS.FewShotDataloader.sample_base_and_novel_categories": [[241, 276], ["sorted", "sorted", "CIFAR_FS.FewShotDataloader.sampleCategories", "random.shuffle", "sorted", "sorted", "CIFAR_FS.FewShotDataloader.sampleCategories", "CIFAR_FS.FewShotDataloader.sampleCategories", "len"], "methods", ["home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.mini_imagenet.FewShotDataloader.sampleCategories", "home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.mini_imagenet.FewShotDataloader.sampleCategories", "home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.mini_imagenet.FewShotDataloader.sampleCategories"], ["", "def", "sample_base_and_novel_categories", "(", "self", ",", "nKbase", ",", "nKnovel", ")", ":", "\n", "        ", "\"\"\"\n        Samples `nKbase` number of base categories and `nKnovel` number of novel\n        categories.\n\n        Args:\n            nKbase: number of base categories\n            nKnovel: number of novel categories\n\n        Returns:\n            Kbase: a list of length 'nKbase' with the ids of the sampled base\n                categories.\n            Knovel: a list of lenght 'nKnovel' with the ids of the sampled novel\n                categories.\n        \"\"\"", "\n", "if", "self", ".", "is_eval_mode", ":", "\n", "            ", "assert", "(", "nKnovel", "<=", "self", ".", "dataset", ".", "num_cats_novel", ")", "\n", "# sample from the set of base categories 'nKbase' number of base", "\n", "# categories.", "\n", "Kbase", "=", "sorted", "(", "self", ".", "sampleCategories", "(", "'base'", ",", "nKbase", ")", ")", "\n", "# sample from the set of novel categories 'nKnovel' number of novel", "\n", "# categories.", "\n", "Knovel", "=", "sorted", "(", "self", ".", "sampleCategories", "(", "'novel'", ",", "nKnovel", ")", ")", "\n", "", "else", ":", "\n", "# sample from the set of base categories 'nKnovel' + 'nKbase' number", "\n", "# of categories.", "\n", "            ", "cats_ids", "=", "self", ".", "sampleCategories", "(", "'base'", ",", "nKnovel", "+", "nKbase", ")", "\n", "assert", "(", "len", "(", "cats_ids", ")", "==", "(", "nKnovel", "+", "nKbase", ")", ")", "\n", "# Randomly pick 'nKnovel' number of fake novel categories and keep", "\n", "# the rest as base categories.", "\n", "random", ".", "shuffle", "(", "cats_ids", ")", "\n", "Knovel", "=", "sorted", "(", "cats_ids", "[", ":", "nKnovel", "]", ")", "\n", "Kbase", "=", "sorted", "(", "cats_ids", "[", "nKnovel", ":", "]", ")", "\n", "\n", "", "return", "Kbase", ",", "Knovel", "\n", "\n"]], "home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.CIFAR_FS.FewShotDataloader.sample_test_examples_for_base_categories": [[277, 309], ["len", "numpy.random.choice", "numpy.unique", "zip", "len", "numpy.arange", "CIFAR_FS.FewShotDataloader.sampleImageIdsFrom", "len"], "methods", ["home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.mini_imagenet.FewShotDataloader.sampleImageIdsFrom"], ["", "def", "sample_test_examples_for_base_categories", "(", "self", ",", "Kbase", ",", "nTestBase", ")", ":", "\n", "        ", "\"\"\"\n        Sample `nTestBase` number of images from the `Kbase` categories.\n\n        Args:\n            Kbase: a list of length `nKbase` with the ids of the categories from\n                where the images will be sampled.\n            nTestBase: the total number of images that will be sampled.\n\n        Returns:\n            Tbase: a list of length `nTestBase` with 2-element tuples. The 1st\n                element of each tuple is the image id that was sampled and the\n                2nd elemend is its category label (which is in the range\n                [0, len(Kbase)-1]).\n        \"\"\"", "\n", "Tbase", "=", "[", "]", "\n", "if", "len", "(", "Kbase", ")", ">", "0", ":", "\n", "# Sample for each base category a number images such that the total", "\n", "# number sampled images of all categories to be equal to `nTestBase`.", "\n", "            ", "KbaseIndices", "=", "np", ".", "random", ".", "choice", "(", "\n", "np", ".", "arange", "(", "len", "(", "Kbase", ")", ")", ",", "size", "=", "nTestBase", ",", "replace", "=", "True", ")", "\n", "KbaseIndices", ",", "NumImagesPerCategory", "=", "np", ".", "unique", "(", "\n", "KbaseIndices", ",", "return_counts", "=", "True", ")", "\n", "\n", "for", "Kbase_idx", ",", "NumImages", "in", "zip", "(", "KbaseIndices", ",", "NumImagesPerCategory", ")", ":", "\n", "                ", "imd_ids", "=", "self", ".", "sampleImageIdsFrom", "(", "\n", "Kbase", "[", "Kbase_idx", "]", ",", "sample_size", "=", "NumImages", ")", "\n", "Tbase", "+=", "[", "(", "img_id", ",", "Kbase_idx", ")", "for", "img_id", "in", "imd_ids", "]", "\n", "\n", "", "", "assert", "(", "len", "(", "Tbase", ")", "==", "nTestBase", ")", "\n", "\n", "return", "Tbase", "\n", "\n"]], "home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.CIFAR_FS.FewShotDataloader.sample_train_and_test_examples_for_novel_categories": [[310, 358], ["len", "int", "range", "random.shuffle", "len", "len", "CIFAR_FS.FewShotDataloader.sampleImageIdsFrom", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.mini_imagenet.FewShotDataloader.sampleImageIdsFrom"], ["", "def", "sample_train_and_test_examples_for_novel_categories", "(", "\n", "self", ",", "Knovel", ",", "nTestNovel", ",", "nExemplars", ",", "nKbase", ")", ":", "\n", "        ", "\"\"\"Samples train and test examples of the novel categories.\n\n        Args:\n    \t    Knovel: a list with the ids of the novel categories.\n            nTestNovel: the total number of test images that will be sampled\n                from all the novel categories.\n            nExemplars: the number of training examples per novel category that\n                will be sampled.\n            nKbase: the number of base categories. It is used as offset of the\n                category index of each sampled image.\n\n        Returns:\n            Tnovel: a list of length `nTestNovel` with 2-element tuples. The\n                1st element of each tuple is the image id that was sampled and\n                the 2nd element is its category label (which is in the range\n                [nKbase, nKbase + len(Knovel) - 1]).\n            Exemplars: a list of length len(Knovel) * nExemplars of 2-element\n                tuples. The 1st element of each tuple is the image id that was\n                sampled and the 2nd element is its category label (which is in\n                the ragne [nKbase, nKbase + len(Knovel) - 1]).\n        \"\"\"", "\n", "\n", "if", "len", "(", "Knovel", ")", "==", "0", ":", "\n", "            ", "return", "[", "]", ",", "[", "]", "\n", "\n", "", "nKnovel", "=", "len", "(", "Knovel", ")", "\n", "Tnovel", "=", "[", "]", "\n", "Exemplars", "=", "[", "]", "\n", "assert", "(", "(", "nTestNovel", "%", "nKnovel", ")", "==", "0", ")", "\n", "nEvalExamplesPerClass", "=", "int", "(", "nTestNovel", "/", "nKnovel", ")", "\n", "\n", "for", "Knovel_idx", "in", "range", "(", "len", "(", "Knovel", ")", ")", ":", "\n", "            ", "imd_ids", "=", "self", ".", "sampleImageIdsFrom", "(", "\n", "Knovel", "[", "Knovel_idx", "]", ",", "\n", "sample_size", "=", "(", "nEvalExamplesPerClass", "+", "nExemplars", ")", ")", "\n", "\n", "imds_tnovel", "=", "imd_ids", "[", ":", "nEvalExamplesPerClass", "]", "\n", "imds_ememplars", "=", "imd_ids", "[", "nEvalExamplesPerClass", ":", "]", "\n", "\n", "Tnovel", "+=", "[", "(", "img_id", ",", "nKbase", "+", "Knovel_idx", ")", "for", "img_id", "in", "imds_tnovel", "]", "\n", "Exemplars", "+=", "[", "(", "img_id", ",", "nKbase", "+", "Knovel_idx", ")", "for", "img_id", "in", "imds_ememplars", "]", "\n", "", "assert", "(", "len", "(", "Tnovel", ")", "==", "nTestNovel", ")", "\n", "assert", "(", "len", "(", "Exemplars", ")", "==", "len", "(", "Knovel", ")", "*", "nExemplars", ")", "\n", "random", ".", "shuffle", "(", "Exemplars", ")", "\n", "\n", "return", "Tnovel", ",", "Exemplars", "\n", "\n"]], "home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.CIFAR_FS.FewShotDataloader.sample_episode": [[359, 378], ["CIFAR_FS.FewShotDataloader.sample_base_and_novel_categories", "CIFAR_FS.FewShotDataloader.sample_test_examples_for_base_categories", "CIFAR_FS.FewShotDataloader.sample_train_and_test_examples_for_novel_categories", "random.shuffle"], "methods", ["home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.mini_imagenet.FewShotDataloader.sample_base_and_novel_categories", "home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.mini_imagenet.FewShotDataloader.sample_test_examples_for_base_categories", "home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.mini_imagenet.FewShotDataloader.sample_train_and_test_examples_for_novel_categories"], ["", "def", "sample_episode", "(", "self", ")", ":", "\n", "        ", "\"\"\"Samples a training episode.\"\"\"", "\n", "nKnovel", "=", "self", ".", "nKnovel", "\n", "nKbase", "=", "self", ".", "nKbase", "\n", "nTestNovel", "=", "self", ".", "nTestNovel", "\n", "nTestBase", "=", "self", ".", "nTestBase", "\n", "nExemplars", "=", "self", ".", "nExemplars", "\n", "\n", "Kbase", ",", "Knovel", "=", "self", ".", "sample_base_and_novel_categories", "(", "nKbase", ",", "nKnovel", ")", "\n", "Tbase", "=", "self", ".", "sample_test_examples_for_base_categories", "(", "Kbase", ",", "nTestBase", ")", "\n", "Tnovel", ",", "Exemplars", "=", "self", ".", "sample_train_and_test_examples_for_novel_categories", "(", "\n", "Knovel", ",", "nTestNovel", ",", "nExemplars", ",", "nKbase", ")", "\n", "\n", "# concatenate the base and novel category examples.", "\n", "Test", "=", "Tbase", "+", "Tnovel", "\n", "random", ".", "shuffle", "(", "Test", ")", "\n", "Kall", "=", "Kbase", "+", "Knovel", "\n", "\n", "return", "Exemplars", ",", "Test", ",", "Kall", ",", "nKbase", "\n", "\n"]], "home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.CIFAR_FS.FewShotDataloader.createExamplesTensorData": [[379, 402], ["torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor"], "methods", ["None"], ["", "def", "createExamplesTensorData", "(", "self", ",", "examples", ")", ":", "\n", "        ", "\"\"\"\n        Creates the examples image and label tensor data.\n\n        Args:\n            examples: a list of 2-element tuples, each representing a\n                train or test example. The 1st element of each tuple\n                is the image id of the example and 2nd element is the\n                category label of the example, which is in the range\n                [0, nK - 1], where nK is the total number of categories\n                (both novel and base).\n\n        Returns:\n            images: a tensor of shape [nExamples, Height, Width, 3] with the\n                example images, where nExamples is the number of examples\n                (i.e., nExamples = len(examples)).\n            labels: a tensor of shape [nExamples] with the category label\n                of each example.\n        \"\"\"", "\n", "images", "=", "torch", ".", "stack", "(", "\n", "[", "self", ".", "dataset", "[", "img_idx", "]", "[", "0", "]", "for", "img_idx", ",", "_", "in", "examples", "]", ",", "dim", "=", "0", ")", "\n", "labels", "=", "torch", ".", "LongTensor", "(", "[", "label", "for", "_", ",", "label", "in", "examples", "]", ")", "\n", "return", "images", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.CIFAR_FS.FewShotDataloader.get_iterator": [[403, 425], ["random.seed", "numpy.random.seed", "torchnet.dataset.ListDataset", "torchnet.dataset.ListDataset.parallel", "CIFAR_FS.FewShotDataloader.sample_episode", "CIFAR_FS.FewShotDataloader.createExamplesTensorData", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "len", "CIFAR_FS.FewShotDataloader.createExamplesTensorData", "range"], "methods", ["home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.mini_imagenet.FewShotDataloader.sample_episode", "home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.mini_imagenet.FewShotDataloader.createExamplesTensorData", "home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.mini_imagenet.FewShotDataloader.createExamplesTensorData"], ["", "def", "get_iterator", "(", "self", ",", "epoch", "=", "0", ")", ":", "\n", "        ", "rand_seed", "=", "epoch", "\n", "random", ".", "seed", "(", "rand_seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "rand_seed", ")", "\n", "def", "load_function", "(", "iter_idx", ")", ":", "\n", "            ", "Exemplars", ",", "Test", ",", "Kall", ",", "nKbase", "=", "self", ".", "sample_episode", "(", ")", "\n", "Xt", ",", "Yt", "=", "self", ".", "createExamplesTensorData", "(", "Test", ")", "\n", "Kall", "=", "torch", ".", "LongTensor", "(", "Kall", ")", "\n", "if", "len", "(", "Exemplars", ")", ">", "0", ":", "\n", "                ", "Xe", ",", "Ye", "=", "self", ".", "createExamplesTensorData", "(", "Exemplars", ")", "\n", "return", "Xe", ",", "Ye", ",", "Xt", ",", "Yt", ",", "Kall", ",", "nKbase", "\n", "", "else", ":", "\n", "                ", "return", "Xt", ",", "Yt", ",", "Kall", ",", "nKbase", "\n", "\n", "", "", "tnt_dataset", "=", "tnt", ".", "dataset", ".", "ListDataset", "(", "\n", "elem_list", "=", "range", "(", "self", ".", "epoch_size", ")", ",", "load", "=", "load_function", ")", "\n", "data_loader", "=", "tnt_dataset", ".", "parallel", "(", "\n", "batch_size", "=", "self", ".", "batch_size", ",", "\n", "num_workers", "=", "(", "0", "if", "self", ".", "is_eval_mode", "else", "self", ".", "num_workers", ")", ",", "\n", "shuffle", "=", "(", "False", "if", "self", ".", "is_eval_mode", "else", "True", ")", ")", "\n", "\n", "return", "data_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.CIFAR_FS.FewShotDataloader.__call__": [[426, 428], ["CIFAR_FS.FewShotDataloader.get_iterator"], "methods", ["home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.mini_imagenet.FewShotDataloader.get_iterator"], ["", "def", "__call__", "(", "self", ",", "epoch", "=", "0", ")", ":", "\n", "        ", "return", "self", ".", "get_iterator", "(", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.CIFAR_FS.FewShotDataloader.__len__": [[429, 431], ["int"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "int", "(", "self", ".", "epoch_size", "/", "self", ".", "batch_size", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.CIFAR_FS.buildLabelIndex": [[32, 40], ["enumerate", "label2inds[].append"], "function", ["None"], ["def", "buildLabelIndex", "(", "labels", ")", ":", "\n", "    ", "label2inds", "=", "{", "}", "\n", "for", "idx", ",", "label", "in", "enumerate", "(", "labels", ")", ":", "\n", "        ", "if", "label", "not", "in", "label2inds", ":", "\n", "            ", "label2inds", "[", "label", "]", "=", "[", "]", "\n", "", "label2inds", "[", "label", "]", ".", "append", "(", "idx", ")", "\n", "\n", "", "return", "label2inds", "\n", "\n"]], "home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.CIFAR_FS.load_data": [[41, 52], ["open", "pickle.load", "open", "pickle._Unpickler", "pickle._Unpickler.load"], "function", ["None"], ["", "def", "load_data", "(", "file", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "with", "open", "(", "file", ",", "'rb'", ")", "as", "fo", ":", "\n", "            ", "data", "=", "pickle", ".", "load", "(", "fo", ")", "\n", "", "return", "data", "\n", "", "except", ":", "\n", "        ", "with", "open", "(", "file", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "u", "=", "pickle", ".", "_Unpickler", "(", "f", ")", "\n", "u", ".", "encoding", "=", "'latin1'", "\n", "data", "=", "u", ".", "load", "(", ")", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.tiered_imagenet.tieredImageNet.__init__": [[55, 167], ["print", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "torchvision.Normalize", "torchvision.Normalize", "torchvision.Normalize", "tiered_imagenet.load_data", "tiered_imagenet.buildLabelIndex", "sorted", "len", "len", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "numpy.load", "tiered_imagenet.tieredImageNet.label2ind.keys", "numpy.concatenate", "tiered_imagenet.buildLabelIndex", "sorted", "len", "buildLabelIndex().keys", "buildLabelIndex().keys", "len", "len", "print", "ValueError", "tiered_imagenet.load_data", "tiered_imagenet.load_data", "tiered_imagenet.load_data", "tiered_imagenet.load_data", "tiered_imagenet.tieredImageNet.label2ind.keys", "set", "set", "len", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.RandomCrop", "torchvision.RandomCrop", "torchvision.RandomCrop", "torchvision.ColorJitter", "torchvision.ColorJitter", "torchvision.ColorJitter", "torchvision.RandomHorizontalFlip", "torchvision.RandomHorizontalFlip", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.ToTensor", "numpy.load", "numpy.load", "numpy.load", "numpy.load", "tiered_imagenet.buildLabelIndex", "tiered_imagenet.buildLabelIndex", "numpy.asarray", "numpy.asarray"], "methods", ["home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.mini_imagenet.load_data", "home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.mini_imagenet.buildLabelIndex", "home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.mini_imagenet.buildLabelIndex", "home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.mini_imagenet.load_data", "home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.mini_imagenet.load_data", "home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.mini_imagenet.load_data", "home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.mini_imagenet.load_data", "home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.mini_imagenet.buildLabelIndex", "home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.mini_imagenet.buildLabelIndex"], ["    ", "def", "__init__", "(", "self", ",", "phase", "=", "'train'", ",", "do_not_use_random_transf", "=", "False", ")", ":", "\n", "\n", "        ", "assert", "(", "phase", "==", "'train'", "or", "phase", "==", "'val'", "or", "phase", "==", "'test'", ")", "\n", "self", ".", "phase", "=", "phase", "\n", "self", ".", "name", "=", "'tieredImageNet_'", "+", "phase", "\n", "\n", "print", "(", "'Loading tiered ImageNet dataset - phase {0}'", ".", "format", "(", "phase", ")", ")", "\n", "file_train_categories_train_phase", "=", "os", ".", "path", ".", "join", "(", "\n", "_TIERED_IMAGENET_DATASET_DIR", ",", "\n", "'train_images.npz'", ")", "\n", "label_train_categories_train_phase", "=", "os", ".", "path", ".", "join", "(", "\n", "_TIERED_IMAGENET_DATASET_DIR", ",", "\n", "'train_labels.pkl'", ")", "\n", "file_train_categories_val_phase", "=", "os", ".", "path", ".", "join", "(", "\n", "_TIERED_IMAGENET_DATASET_DIR", ",", "\n", "'train_images.npz'", ")", "\n", "label_train_categories_val_phase", "=", "os", ".", "path", ".", "join", "(", "\n", "_TIERED_IMAGENET_DATASET_DIR", ",", "\n", "'train_labels.pkl'", ")", "\n", "file_train_categories_test_phase", "=", "os", ".", "path", ".", "join", "(", "\n", "_TIERED_IMAGENET_DATASET_DIR", ",", "\n", "'train_images.npz'", ")", "\n", "label_train_categories_test_phase", "=", "os", ".", "path", ".", "join", "(", "\n", "_TIERED_IMAGENET_DATASET_DIR", ",", "\n", "'train_labels.pkl'", ")", "\n", "\n", "file_val_categories_val_phase", "=", "os", ".", "path", ".", "join", "(", "\n", "_TIERED_IMAGENET_DATASET_DIR", ",", "\n", "'val_images.npz'", ")", "\n", "label_val_categories_val_phase", "=", "os", ".", "path", ".", "join", "(", "\n", "_TIERED_IMAGENET_DATASET_DIR", ",", "\n", "'val_labels.pkl'", ")", "\n", "file_test_categories_test_phase", "=", "os", ".", "path", ".", "join", "(", "\n", "_TIERED_IMAGENET_DATASET_DIR", ",", "\n", "'test_images.npz'", ")", "\n", "label_test_categories_test_phase", "=", "os", ".", "path", ".", "join", "(", "\n", "_TIERED_IMAGENET_DATASET_DIR", ",", "\n", "'test_labels.pkl'", ")", "\n", "\n", "if", "self", ".", "phase", "==", "'train'", ":", "\n", "# During training phase we only load the training phase images", "\n", "# of the training categories (aka base categories).", "\n", "            ", "data_train", "=", "load_data", "(", "label_train_categories_train_phase", ")", "\n", "#self.data = data_train['data']", "\n", "self", ".", "labels", "=", "data_train", "[", "'labels'", "]", "\n", "self", ".", "data", "=", "np", ".", "load", "(", "file_train_categories_train_phase", ")", "[", "'images'", "]", "#np.array(load_data(file_train_categories_train_phase))", "\n", "#self.labels = load_data(file_train_categories_train_phase)#data_train['labels']", "\n", "\n", "self", ".", "label2ind", "=", "buildLabelIndex", "(", "self", ".", "labels", ")", "\n", "self", ".", "labelIds", "=", "sorted", "(", "self", ".", "label2ind", ".", "keys", "(", ")", ")", "\n", "self", ".", "num_cats", "=", "len", "(", "self", ".", "labelIds", ")", "\n", "self", ".", "labelIds_base", "=", "self", ".", "labelIds", "\n", "self", ".", "num_cats_base", "=", "len", "(", "self", ".", "labelIds_base", ")", "\n", "\n", "", "elif", "self", ".", "phase", "==", "'val'", "or", "self", ".", "phase", "==", "'test'", ":", "\n", "            ", "if", "self", ".", "phase", "==", "'test'", ":", "\n", "# load data that will be used for evaluating the recognition", "\n", "# accuracy of the base categories.", "\n", "                ", "data_base", "=", "load_data", "(", "label_train_categories_test_phase", ")", "\n", "data_base_images", "=", "np", ".", "load", "(", "file_train_categories_test_phase", ")", "[", "'images'", "]", "\n", "\n", "# load data that will be use for evaluating the few-shot recogniton", "\n", "# accuracy on the novel categories.", "\n", "data_novel", "=", "load_data", "(", "label_test_categories_test_phase", ")", "\n", "data_novel_images", "=", "np", ".", "load", "(", "file_test_categories_test_phase", ")", "[", "'images'", "]", "\n", "", "else", ":", "# phase=='val'", "\n", "# load data that will be used for evaluating the recognition", "\n", "# accuracy of the base categories.", "\n", "                ", "data_base", "=", "load_data", "(", "label_train_categories_val_phase", ")", "\n", "data_base_images", "=", "np", ".", "load", "(", "file_train_categories_val_phase", ")", "[", "'images'", "]", "\n", "#print (data_base_images)", "\n", "#print (data_base_images.shape)", "\n", "# load data that will be use for evaluating the few-shot recogniton", "\n", "# accuracy on the novel categories.", "\n", "data_novel", "=", "load_data", "(", "label_val_categories_val_phase", ")", "\n", "data_novel_images", "=", "np", ".", "load", "(", "file_val_categories_val_phase", ")", "[", "'images'", "]", "\n", "\n", "", "self", ".", "data", "=", "np", ".", "concatenate", "(", "\n", "[", "data_base_images", ",", "data_novel_images", "]", ",", "axis", "=", "0", ")", "\n", "self", ".", "labels", "=", "data_base", "[", "'labels'", "]", "+", "data_novel", "[", "'labels'", "]", "\n", "\n", "self", ".", "label2ind", "=", "buildLabelIndex", "(", "self", ".", "labels", ")", "\n", "self", ".", "labelIds", "=", "sorted", "(", "self", ".", "label2ind", ".", "keys", "(", ")", ")", "\n", "self", ".", "num_cats", "=", "len", "(", "self", ".", "labelIds", ")", "\n", "\n", "self", ".", "labelIds_base", "=", "buildLabelIndex", "(", "data_base", "[", "'labels'", "]", ")", ".", "keys", "(", ")", "\n", "self", ".", "labelIds_novel", "=", "buildLabelIndex", "(", "data_novel", "[", "'labels'", "]", ")", ".", "keys", "(", ")", "\n", "self", ".", "num_cats_base", "=", "len", "(", "self", ".", "labelIds_base", ")", "\n", "self", ".", "num_cats_novel", "=", "len", "(", "self", ".", "labelIds_novel", ")", "\n", "intersection", "=", "set", "(", "self", ".", "labelIds_base", ")", "&", "set", "(", "self", ".", "labelIds_novel", ")", "\n", "print", "(", "intersection", ")", "\n", "assert", "(", "len", "(", "intersection", ")", "==", "0", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Not valid phase {0}'", ".", "format", "(", "self", ".", "phase", ")", ")", "\n", "\n", "", "mean_pix", "=", "[", "x", "/", "255.0", "for", "x", "in", "[", "120.39586422", ",", "115.59361427", ",", "104.54012653", "]", "]", "\n", "std_pix", "=", "[", "x", "/", "255.0", "for", "x", "in", "[", "70.68188272", ",", "68.27635443", ",", "72.54505529", "]", "]", "\n", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "mean_pix", ",", "std", "=", "std_pix", ")", "\n", "\n", "if", "(", "self", ".", "phase", "==", "'test'", "or", "self", ".", "phase", "==", "'val'", ")", "or", "(", "do_not_use_random_transf", "==", "True", ")", ":", "\n", "            ", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "lambda", "x", ":", "np", ".", "asarray", "(", "x", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", "#,", "\n", "#normalize", "\n", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomCrop", "(", "84", ",", "padding", "=", "8", ")", ",", "\n", "transforms", ".", "ColorJitter", "(", "brightness", "=", "0.4", ",", "contrast", "=", "0.4", ",", "saturation", "=", "0.4", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "lambda", "x", ":", "np", ".", "asarray", "(", "x", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", "#,", "\n", "#normalize", "\n"]], "home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.tiered_imagenet.tieredImageNet.__getitem__": [[170, 178], ["PIL.Image.fromarray", "tiered_imagenet.tieredImageNet.transform"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "img", ",", "label", "=", "self", ".", "data", "[", "index", "]", ",", "self", ".", "labels", "[", "index", "]", "\n", "# doing this so that it is consistent with all other datasets", "\n", "# to return a PIL Image", "\n", "img", "=", "Image", ".", "fromarray", "(", "img", ")", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "", "return", "img", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.tiered_imagenet.tieredImageNet.__len__": [[179, 181], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.tiered_imagenet.FewShotDataloader.__init__": [[184, 219], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "dataset", ",", "\n", "nKnovel", "=", "5", ",", "# number of novel categories.", "\n", "nKbase", "=", "-", "1", ",", "# number of base categories.", "\n", "nExemplars", "=", "1", ",", "# number of training examples per novel category.", "\n", "nTestNovel", "=", "15", "*", "5", ",", "# number of test examples for all the novel categories.", "\n", "nTestBase", "=", "15", "*", "5", ",", "# number of test examples for all the base categories.", "\n", "batch_size", "=", "1", ",", "# number of training episodes per batch.", "\n", "num_workers", "=", "4", ",", "\n", "epoch_size", "=", "2000", ",", "# number of batches per epoch.", "\n", ")", ":", "\n", "\n", "        ", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "phase", "=", "self", ".", "dataset", ".", "phase", "\n", "max_possible_nKnovel", "=", "(", "self", ".", "dataset", ".", "num_cats_base", "if", "self", ".", "phase", "==", "'train'", "\n", "else", "self", ".", "dataset", ".", "num_cats_novel", ")", "\n", "assert", "(", "nKnovel", ">=", "0", "and", "nKnovel", "<", "max_possible_nKnovel", ")", "\n", "self", ".", "nKnovel", "=", "nKnovel", "\n", "\n", "max_possible_nKbase", "=", "self", ".", "dataset", ".", "num_cats_base", "\n", "nKbase", "=", "nKbase", "if", "nKbase", ">=", "0", "else", "max_possible_nKbase", "\n", "if", "self", ".", "phase", "==", "'train'", "and", "nKbase", ">", "0", ":", "\n", "            ", "nKbase", "-=", "self", ".", "nKnovel", "\n", "max_possible_nKbase", "-=", "self", ".", "nKnovel", "\n", "\n", "", "assert", "(", "nKbase", ">=", "0", "and", "nKbase", "<=", "max_possible_nKbase", ")", "\n", "self", ".", "nKbase", "=", "nKbase", "\n", "\n", "self", ".", "nExemplars", "=", "nExemplars", "\n", "self", ".", "nTestNovel", "=", "nTestNovel", "\n", "self", ".", "nTestBase", "=", "nTestBase", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "epoch_size", "=", "epoch_size", "\n", "self", ".", "num_workers", "=", "num_workers", "\n", "self", ".", "is_eval_mode", "=", "(", "self", ".", "phase", "==", "'test'", ")", "or", "(", "self", ".", "phase", "==", "'val'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.tiered_imagenet.FewShotDataloader.sampleImageIdsFrom": [[220, 237], ["random.sample", "len"], "methods", ["None"], ["", "def", "sampleImageIdsFrom", "(", "self", ",", "cat_id", ",", "sample_size", "=", "1", ")", ":", "\n", "        ", "\"\"\"\n        Samples `sample_size` number of unique image ids picked from the\n        category `cat_id` (i.e., self.dataset.label2ind[cat_id]).\n\n        Args:\n            cat_id: a scalar with the id of the category from which images will\n                be sampled.\n            sample_size: number of images that will be sampled.\n\n        Returns:\n            image_ids: a list of length `sample_size` with unique image ids.\n        \"\"\"", "\n", "assert", "(", "cat_id", "in", "self", ".", "dataset", ".", "label2ind", ")", "\n", "assert", "(", "len", "(", "self", ".", "dataset", ".", "label2ind", "[", "cat_id", "]", ")", ">=", "sample_size", ")", "\n", "# Note: random.sample samples elements without replacement.", "\n", "return", "random", ".", "sample", "(", "self", ".", "dataset", ".", "label2ind", "[", "cat_id", "]", ",", "sample_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.tiered_imagenet.FewShotDataloader.sampleCategories": [[238, 263], ["random.sample", "len", "ValueError"], "methods", ["None"], ["", "def", "sampleCategories", "(", "self", ",", "cat_set", ",", "sample_size", "=", "1", ")", ":", "\n", "        ", "\"\"\"\n        Samples `sample_size` number of unique categories picked from the\n        `cat_set` set of categories. `cat_set` can be either 'base' or 'novel'.\n\n        Args:\n            cat_set: string that specifies the set of categories from which\n                categories will be sampled.\n            sample_size: number of categories that will be sampled.\n\n        Returns:\n            cat_ids: a list of length `sample_size` with unique category ids.\n        \"\"\"", "\n", "if", "cat_set", "==", "'base'", ":", "\n", "            ", "labelIds", "=", "self", ".", "dataset", ".", "labelIds_base", "\n", "", "elif", "cat_set", "==", "'novel'", ":", "\n", "            ", "labelIds", "=", "self", ".", "dataset", ".", "labelIds_novel", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Not recognized category set {}'", ".", "format", "(", "cat_set", ")", ")", "\n", "\n", "", "assert", "(", "len", "(", "labelIds", ")", ">=", "sample_size", ")", "\n", "# return sample_size unique categories chosen from labelIds set of", "\n", "# categories (that can be either self.labelIds_base or self.labelIds_novel)", "\n", "# Note: random.sample samples elements without replacement.", "\n", "return", "random", ".", "sample", "(", "labelIds", ",", "sample_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.tiered_imagenet.FewShotDataloader.sample_base_and_novel_categories": [[264, 299], ["sorted", "sorted", "tiered_imagenet.FewShotDataloader.sampleCategories", "random.shuffle", "sorted", "sorted", "tiered_imagenet.FewShotDataloader.sampleCategories", "tiered_imagenet.FewShotDataloader.sampleCategories", "len"], "methods", ["home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.mini_imagenet.FewShotDataloader.sampleCategories", "home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.mini_imagenet.FewShotDataloader.sampleCategories", "home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.mini_imagenet.FewShotDataloader.sampleCategories"], ["", "def", "sample_base_and_novel_categories", "(", "self", ",", "nKbase", ",", "nKnovel", ")", ":", "\n", "        ", "\"\"\"\n        Samples `nKbase` number of base categories and `nKnovel` number of novel\n        categories.\n\n        Args:\n            nKbase: number of base categories\n            nKnovel: number of novel categories\n\n        Returns:\n            Kbase: a list of length 'nKbase' with the ids of the sampled base\n                categories.\n            Knovel: a list of lenght 'nKnovel' with the ids of the sampled novel\n                categories.\n        \"\"\"", "\n", "if", "self", ".", "is_eval_mode", ":", "\n", "            ", "assert", "(", "nKnovel", "<=", "self", ".", "dataset", ".", "num_cats_novel", ")", "\n", "# sample from the set of base categories 'nKbase' number of base", "\n", "# categories.", "\n", "Kbase", "=", "sorted", "(", "self", ".", "sampleCategories", "(", "'base'", ",", "nKbase", ")", ")", "\n", "# sample from the set of novel categories 'nKnovel' number of novel", "\n", "# categories.", "\n", "Knovel", "=", "sorted", "(", "self", ".", "sampleCategories", "(", "'novel'", ",", "nKnovel", ")", ")", "\n", "", "else", ":", "\n", "# sample from the set of base categories 'nKnovel' + 'nKbase' number", "\n", "# of categories.", "\n", "            ", "cats_ids", "=", "self", ".", "sampleCategories", "(", "'base'", ",", "nKnovel", "+", "nKbase", ")", "\n", "assert", "(", "len", "(", "cats_ids", ")", "==", "(", "nKnovel", "+", "nKbase", ")", ")", "\n", "# Randomly pick 'nKnovel' number of fake novel categories and keep", "\n", "# the rest as base categories.", "\n", "random", ".", "shuffle", "(", "cats_ids", ")", "\n", "Knovel", "=", "sorted", "(", "cats_ids", "[", ":", "nKnovel", "]", ")", "\n", "Kbase", "=", "sorted", "(", "cats_ids", "[", "nKnovel", ":", "]", ")", "\n", "\n", "", "return", "Kbase", ",", "Knovel", "\n", "\n"]], "home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.tiered_imagenet.FewShotDataloader.sample_test_examples_for_base_categories": [[300, 332], ["len", "numpy.random.choice", "numpy.unique", "zip", "len", "numpy.arange", "tiered_imagenet.FewShotDataloader.sampleImageIdsFrom", "len"], "methods", ["home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.mini_imagenet.FewShotDataloader.sampleImageIdsFrom"], ["", "def", "sample_test_examples_for_base_categories", "(", "self", ",", "Kbase", ",", "nTestBase", ")", ":", "\n", "        ", "\"\"\"\n        Sample `nTestBase` number of images from the `Kbase` categories.\n\n        Args:\n            Kbase: a list of length `nKbase` with the ids of the categories from\n                where the images will be sampled.\n            nTestBase: the total number of images that will be sampled.\n\n        Returns:\n            Tbase: a list of length `nTestBase` with 2-element tuples. The 1st\n                element of each tuple is the image id that was sampled and the\n                2nd elemend is its category label (which is in the range\n                [0, len(Kbase)-1]).\n        \"\"\"", "\n", "Tbase", "=", "[", "]", "\n", "if", "len", "(", "Kbase", ")", ">", "0", ":", "\n", "# Sample for each base category a number images such that the total", "\n", "# number sampled images of all categories to be equal to `nTestBase`.", "\n", "            ", "KbaseIndices", "=", "np", ".", "random", ".", "choice", "(", "\n", "np", ".", "arange", "(", "len", "(", "Kbase", ")", ")", ",", "size", "=", "nTestBase", ",", "replace", "=", "True", ")", "\n", "KbaseIndices", ",", "NumImagesPerCategory", "=", "np", ".", "unique", "(", "\n", "KbaseIndices", ",", "return_counts", "=", "True", ")", "\n", "\n", "for", "Kbase_idx", ",", "NumImages", "in", "zip", "(", "KbaseIndices", ",", "NumImagesPerCategory", ")", ":", "\n", "                ", "imd_ids", "=", "self", ".", "sampleImageIdsFrom", "(", "\n", "Kbase", "[", "Kbase_idx", "]", ",", "sample_size", "=", "NumImages", ")", "\n", "Tbase", "+=", "[", "(", "img_id", ",", "Kbase_idx", ")", "for", "img_id", "in", "imd_ids", "]", "\n", "\n", "", "", "assert", "(", "len", "(", "Tbase", ")", "==", "nTestBase", ")", "\n", "\n", "return", "Tbase", "\n", "\n"]], "home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.tiered_imagenet.FewShotDataloader.sample_train_and_test_examples_for_novel_categories": [[333, 381], ["len", "int", "range", "random.shuffle", "len", "len", "tiered_imagenet.FewShotDataloader.sampleImageIdsFrom", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.mini_imagenet.FewShotDataloader.sampleImageIdsFrom"], ["", "def", "sample_train_and_test_examples_for_novel_categories", "(", "\n", "self", ",", "Knovel", ",", "nTestNovel", ",", "nExemplars", ",", "nKbase", ")", ":", "\n", "        ", "\"\"\"Samples train and test examples of the novel categories.\n\n        Args:\n    \t    Knovel: a list with the ids of the novel categories.\n            nTestNovel: the total number of test images that will be sampled\n                from all the novel categories.\n            nExemplars: the number of training examples per novel category that\n                will be sampled.\n            nKbase: the number of base categories. It is used as offset of the\n                category index of each sampled image.\n\n        Returns:\n            Tnovel: a list of length `nTestNovel` with 2-element tuples. The\n                1st element of each tuple is the image id that was sampled and\n                the 2nd element is its category label (which is in the range\n                [nKbase, nKbase + len(Knovel) - 1]).\n            Exemplars: a list of length len(Knovel) * nExemplars of 2-element\n                tuples. The 1st element of each tuple is the image id that was\n                sampled and the 2nd element is its category label (which is in\n                the ragne [nKbase, nKbase + len(Knovel) - 1]).\n        \"\"\"", "\n", "\n", "if", "len", "(", "Knovel", ")", "==", "0", ":", "\n", "            ", "return", "[", "]", ",", "[", "]", "\n", "\n", "", "nKnovel", "=", "len", "(", "Knovel", ")", "\n", "Tnovel", "=", "[", "]", "\n", "Exemplars", "=", "[", "]", "\n", "assert", "(", "(", "nTestNovel", "%", "nKnovel", ")", "==", "0", ")", "\n", "nEvalExamplesPerClass", "=", "int", "(", "nTestNovel", "/", "nKnovel", ")", "\n", "\n", "for", "Knovel_idx", "in", "range", "(", "len", "(", "Knovel", ")", ")", ":", "\n", "            ", "imd_ids", "=", "self", ".", "sampleImageIdsFrom", "(", "\n", "Knovel", "[", "Knovel_idx", "]", ",", "\n", "sample_size", "=", "(", "nEvalExamplesPerClass", "+", "nExemplars", ")", ")", "\n", "\n", "imds_tnovel", "=", "imd_ids", "[", ":", "nEvalExamplesPerClass", "]", "\n", "imds_ememplars", "=", "imd_ids", "[", "nEvalExamplesPerClass", ":", "]", "\n", "\n", "Tnovel", "+=", "[", "(", "img_id", ",", "nKbase", "+", "Knovel_idx", ")", "for", "img_id", "in", "imds_tnovel", "]", "\n", "Exemplars", "+=", "[", "(", "img_id", ",", "nKbase", "+", "Knovel_idx", ")", "for", "img_id", "in", "imds_ememplars", "]", "\n", "", "assert", "(", "len", "(", "Tnovel", ")", "==", "nTestNovel", ")", "\n", "assert", "(", "len", "(", "Exemplars", ")", "==", "len", "(", "Knovel", ")", "*", "nExemplars", ")", "\n", "random", ".", "shuffle", "(", "Exemplars", ")", "\n", "\n", "return", "Tnovel", ",", "Exemplars", "\n", "\n"]], "home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.tiered_imagenet.FewShotDataloader.sample_episode": [[382, 401], ["tiered_imagenet.FewShotDataloader.sample_base_and_novel_categories", "tiered_imagenet.FewShotDataloader.sample_test_examples_for_base_categories", "tiered_imagenet.FewShotDataloader.sample_train_and_test_examples_for_novel_categories", "random.shuffle"], "methods", ["home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.mini_imagenet.FewShotDataloader.sample_base_and_novel_categories", "home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.mini_imagenet.FewShotDataloader.sample_test_examples_for_base_categories", "home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.mini_imagenet.FewShotDataloader.sample_train_and_test_examples_for_novel_categories"], ["", "def", "sample_episode", "(", "self", ")", ":", "\n", "        ", "\"\"\"Samples a training episode.\"\"\"", "\n", "nKnovel", "=", "self", ".", "nKnovel", "\n", "nKbase", "=", "self", ".", "nKbase", "\n", "nTestNovel", "=", "self", ".", "nTestNovel", "\n", "nTestBase", "=", "self", ".", "nTestBase", "\n", "nExemplars", "=", "self", ".", "nExemplars", "\n", "\n", "Kbase", ",", "Knovel", "=", "self", ".", "sample_base_and_novel_categories", "(", "nKbase", ",", "nKnovel", ")", "\n", "Tbase", "=", "self", ".", "sample_test_examples_for_base_categories", "(", "Kbase", ",", "nTestBase", ")", "\n", "Tnovel", ",", "Exemplars", "=", "self", ".", "sample_train_and_test_examples_for_novel_categories", "(", "\n", "Knovel", ",", "nTestNovel", ",", "nExemplars", ",", "nKbase", ")", "\n", "\n", "# concatenate the base and novel category examples.", "\n", "Test", "=", "Tbase", "+", "Tnovel", "\n", "random", ".", "shuffle", "(", "Test", ")", "\n", "Kall", "=", "Kbase", "+", "Knovel", "\n", "\n", "return", "Exemplars", ",", "Test", ",", "Kall", ",", "nKbase", "\n", "\n"]], "home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.tiered_imagenet.FewShotDataloader.createExamplesTensorData": [[402, 425], ["torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor"], "methods", ["None"], ["", "def", "createExamplesTensorData", "(", "self", ",", "examples", ")", ":", "\n", "        ", "\"\"\"\n        Creates the examples image and label tensor data.\n\n        Args:\n            examples: a list of 2-element tuples, each representing a\n                train or test example. The 1st element of each tuple\n                is the image id of the example and 2nd element is the\n                category label of the example, which is in the range\n                [0, nK - 1], where nK is the total number of categories\n                (both novel and base).\n\n        Returns:\n            images: a tensor of shape [nExamples, Height, Width, 3] with the\n                example images, where nExamples is the number of examples\n                (i.e., nExamples = len(examples)).\n            labels: a tensor of shape [nExamples] with the category label\n                of each example.\n        \"\"\"", "\n", "images", "=", "torch", ".", "stack", "(", "\n", "[", "self", ".", "dataset", "[", "img_idx", "]", "[", "0", "]", "for", "img_idx", ",", "_", "in", "examples", "]", ",", "dim", "=", "0", ")", "\n", "labels", "=", "torch", ".", "LongTensor", "(", "[", "label", "for", "_", ",", "label", "in", "examples", "]", ")", "\n", "return", "images", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.tiered_imagenet.FewShotDataloader.get_iterator": [[426, 448], ["random.seed", "numpy.random.seed", "torchnet.dataset.ListDataset", "torchnet.dataset.ListDataset.parallel", "tiered_imagenet.FewShotDataloader.sample_episode", "tiered_imagenet.FewShotDataloader.createExamplesTensorData", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "len", "tiered_imagenet.FewShotDataloader.createExamplesTensorData", "range"], "methods", ["home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.mini_imagenet.FewShotDataloader.sample_episode", "home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.mini_imagenet.FewShotDataloader.createExamplesTensorData", "home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.mini_imagenet.FewShotDataloader.createExamplesTensorData"], ["", "def", "get_iterator", "(", "self", ",", "epoch", "=", "0", ")", ":", "\n", "        ", "rand_seed", "=", "epoch", "\n", "random", ".", "seed", "(", "rand_seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "rand_seed", ")", "\n", "def", "load_function", "(", "iter_idx", ")", ":", "\n", "            ", "Exemplars", ",", "Test", ",", "Kall", ",", "nKbase", "=", "self", ".", "sample_episode", "(", ")", "\n", "Xt", ",", "Yt", "=", "self", ".", "createExamplesTensorData", "(", "Test", ")", "\n", "Kall", "=", "torch", ".", "LongTensor", "(", "Kall", ")", "\n", "if", "len", "(", "Exemplars", ")", ">", "0", ":", "\n", "                ", "Xe", ",", "Ye", "=", "self", ".", "createExamplesTensorData", "(", "Exemplars", ")", "\n", "return", "Xe", ",", "Ye", ",", "Xt", ",", "Yt", ",", "Kall", ",", "nKbase", "\n", "", "else", ":", "\n", "                ", "return", "Xt", ",", "Yt", ",", "Kall", ",", "nKbase", "\n", "\n", "", "", "tnt_dataset", "=", "tnt", ".", "dataset", ".", "ListDataset", "(", "\n", "elem_list", "=", "range", "(", "self", ".", "epoch_size", ")", ",", "load", "=", "load_function", ")", "\n", "data_loader", "=", "tnt_dataset", ".", "parallel", "(", "\n", "batch_size", "=", "self", ".", "batch_size", ",", "\n", "num_workers", "=", "(", "0", "if", "self", ".", "is_eval_mode", "else", "self", ".", "num_workers", ")", ",", "\n", "shuffle", "=", "(", "False", "if", "self", ".", "is_eval_mode", "else", "True", ")", ")", "\n", "\n", "return", "data_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.tiered_imagenet.FewShotDataloader.__call__": [[449, 451], ["tiered_imagenet.FewShotDataloader.get_iterator"], "methods", ["home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.mini_imagenet.FewShotDataloader.get_iterator"], ["", "def", "__call__", "(", "self", ",", "epoch", "=", "0", ")", ":", "\n", "        ", "return", "self", ".", "get_iterator", "(", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.tiered_imagenet.FewShotDataloader.__len__": [[452, 454], ["int"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "int", "(", "self", ".", "epoch_size", "/", "self", ".", "batch_size", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.tiered_imagenet.buildLabelIndex": [[32, 40], ["enumerate", "label2inds[].append"], "function", ["None"], ["def", "buildLabelIndex", "(", "labels", ")", ":", "\n", "    ", "label2inds", "=", "{", "}", "\n", "for", "idx", ",", "label", "in", "enumerate", "(", "labels", ")", ":", "\n", "        ", "if", "label", "not", "in", "label2inds", ":", "\n", "            ", "label2inds", "[", "label", "]", "=", "[", "]", "\n", "", "label2inds", "[", "label", "]", ".", "append", "(", "idx", ")", "\n", "\n", "", "return", "label2inds", "\n", "\n"]], "home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.tiered_imagenet.load_data": [[42, 53], ["open", "pickle.load", "open", "pickle._Unpickler", "pickle._Unpickler.load"], "function", ["None"], ["", "def", "load_data", "(", "file", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "with", "open", "(", "file", ",", "'rb'", ")", "as", "fo", ":", "\n", "            ", "data", "=", "pickle", ".", "load", "(", "fo", ")", "\n", "", "return", "data", "\n", "", "except", ":", "\n", "        ", "with", "open", "(", "file", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "u", "=", "pickle", ".", "_Unpickler", "(", "f", ")", "\n", "u", ".", "encoding", "=", "'latin1'", "\n", "data", "=", "u", ".", "load", "(", ")", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.FC100.FC100.__init__": [[54, 142], ["print", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "torchvision.Normalize", "torchvision.Normalize", "torchvision.Normalize", "FC100.load_data", "FC100.buildLabelIndex", "sorted", "len", "len", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "FC100.FC100.label2ind.keys", "numpy.concatenate", "FC100.buildLabelIndex", "sorted", "len", "buildLabelIndex().keys", "buildLabelIndex().keys", "len", "len", "ValueError", "FC100.load_data", "FC100.load_data", "FC100.load_data", "FC100.load_data", "FC100.FC100.label2ind.keys", "set", "set", "len", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.RandomCrop", "torchvision.RandomCrop", "torchvision.RandomCrop", "torchvision.ColorJitter", "torchvision.ColorJitter", "torchvision.ColorJitter", "torchvision.RandomHorizontalFlip", "torchvision.RandomHorizontalFlip", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.ToTensor", "FC100.buildLabelIndex", "FC100.buildLabelIndex", "numpy.asarray", "numpy.asarray"], "methods", ["home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.mini_imagenet.load_data", "home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.mini_imagenet.buildLabelIndex", "home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.mini_imagenet.buildLabelIndex", "home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.mini_imagenet.load_data", "home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.mini_imagenet.load_data", "home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.mini_imagenet.load_data", "home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.mini_imagenet.load_data", "home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.mini_imagenet.buildLabelIndex", "home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.mini_imagenet.buildLabelIndex"], ["    ", "def", "__init__", "(", "self", ",", "phase", "=", "'train'", ",", "do_not_use_random_transf", "=", "False", ")", ":", "\n", "\n", "        ", "assert", "(", "phase", "==", "'train'", "or", "phase", "==", "'val'", "or", "phase", "==", "'test'", ")", "\n", "self", ".", "phase", "=", "phase", "\n", "self", ".", "name", "=", "'FC100_'", "+", "phase", "\n", "\n", "print", "(", "'Loading FC100 dataset - phase {0}'", ".", "format", "(", "phase", ")", ")", "\n", "file_train_categories_train_phase", "=", "os", ".", "path", ".", "join", "(", "\n", "_FC100_DATASET_DIR", ",", "\n", "'FC100_train.pickle'", ")", "\n", "file_train_categories_val_phase", "=", "os", ".", "path", ".", "join", "(", "\n", "_FC100_DATASET_DIR", ",", "\n", "'FC100_train.pickle'", ")", "\n", "file_train_categories_test_phase", "=", "os", ".", "path", ".", "join", "(", "\n", "_FC100_DATASET_DIR", ",", "\n", "'FC100_train.pickle'", ")", "\n", "file_val_categories_val_phase", "=", "os", ".", "path", ".", "join", "(", "\n", "_FC100_DATASET_DIR", ",", "\n", "'FC100_val.pickle'", ")", "\n", "file_test_categories_test_phase", "=", "os", ".", "path", ".", "join", "(", "\n", "_FC100_DATASET_DIR", ",", "\n", "'FC100_test.pickle'", ")", "\n", "\n", "if", "self", ".", "phase", "==", "'train'", ":", "\n", "# During training phase we only load the training phase images", "\n", "# of the training categories (aka base categories).", "\n", "            ", "data_train", "=", "load_data", "(", "file_train_categories_train_phase", ")", "\n", "self", ".", "data", "=", "data_train", "[", "'data'", "]", "\n", "self", ".", "labels", "=", "data_train", "[", "'labels'", "]", "\n", "#print (self.labels)", "\n", "self", ".", "label2ind", "=", "buildLabelIndex", "(", "self", ".", "labels", ")", "\n", "self", ".", "labelIds", "=", "sorted", "(", "self", ".", "label2ind", ".", "keys", "(", ")", ")", "\n", "self", ".", "num_cats", "=", "len", "(", "self", ".", "labelIds", ")", "\n", "self", ".", "labelIds_base", "=", "self", ".", "labelIds", "\n", "self", ".", "num_cats_base", "=", "len", "(", "self", ".", "labelIds_base", ")", "\n", "#print (self.data.shape)", "\n", "", "elif", "self", ".", "phase", "==", "'val'", "or", "self", ".", "phase", "==", "'test'", ":", "\n", "            ", "if", "self", ".", "phase", "==", "'test'", ":", "\n", "# load data that will be used for evaluating the recognition", "\n", "# accuracy of the base categories.", "\n", "                ", "data_base", "=", "load_data", "(", "file_train_categories_test_phase", ")", "\n", "# load data that will be use for evaluating the few-shot recogniton", "\n", "# accuracy on the novel categories.", "\n", "data_novel", "=", "load_data", "(", "file_test_categories_test_phase", ")", "\n", "", "else", ":", "# phase=='val'", "\n", "# load data that will be used for evaluating the recognition", "\n", "# accuracy of the base categories.", "\n", "                ", "data_base", "=", "load_data", "(", "file_train_categories_val_phase", ")", "\n", "# load data that will be use for evaluating the few-shot recogniton", "\n", "# accuracy on the novel categories.", "\n", "data_novel", "=", "load_data", "(", "file_val_categories_val_phase", ")", "\n", "\n", "", "self", ".", "data", "=", "np", ".", "concatenate", "(", "\n", "[", "data_base", "[", "'data'", "]", ",", "data_novel", "[", "'data'", "]", "]", ",", "axis", "=", "0", ")", "\n", "self", ".", "labels", "=", "data_base", "[", "'labels'", "]", "+", "data_novel", "[", "'labels'", "]", "\n", "\n", "self", ".", "label2ind", "=", "buildLabelIndex", "(", "self", ".", "labels", ")", "\n", "self", ".", "labelIds", "=", "sorted", "(", "self", ".", "label2ind", ".", "keys", "(", ")", ")", "\n", "self", ".", "num_cats", "=", "len", "(", "self", ".", "labelIds", ")", "\n", "\n", "self", ".", "labelIds_base", "=", "buildLabelIndex", "(", "data_base", "[", "'labels'", "]", ")", ".", "keys", "(", ")", "\n", "self", ".", "labelIds_novel", "=", "buildLabelIndex", "(", "data_novel", "[", "'labels'", "]", ")", ".", "keys", "(", ")", "\n", "self", ".", "num_cats_base", "=", "len", "(", "self", ".", "labelIds_base", ")", "\n", "self", ".", "num_cats_novel", "=", "len", "(", "self", ".", "labelIds_novel", ")", "\n", "intersection", "=", "set", "(", "self", ".", "labelIds_base", ")", "&", "set", "(", "self", ".", "labelIds_novel", ")", "\n", "assert", "(", "len", "(", "intersection", ")", "==", "0", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Not valid phase {0}'", ".", "format", "(", "self", ".", "phase", ")", ")", "\n", "\n", "", "mean_pix", "=", "[", "x", "/", "255.0", "for", "x", "in", "[", "129.37731888", ",", "124.10583864", ",", "112.47758569", "]", "]", "\n", "\n", "std_pix", "=", "[", "x", "/", "255.0", "for", "x", "in", "[", "68.20947949", ",", "65.43124043", ",", "70.45866994", "]", "]", "\n", "\n", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "mean_pix", ",", "std", "=", "std_pix", ")", "\n", "\n", "if", "(", "self", ".", "phase", "==", "'test'", "or", "self", ".", "phase", "==", "'val'", ")", "or", "(", "do_not_use_random_transf", "==", "True", ")", ":", "\n", "            ", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "lambda", "x", ":", "np", ".", "asarray", "(", "x", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", "#,", "\n", "#normalize", "\n", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomCrop", "(", "32", ",", "padding", "=", "4", ")", ",", "\n", "transforms", ".", "ColorJitter", "(", "brightness", "=", "0.4", ",", "contrast", "=", "0.4", ",", "saturation", "=", "0.4", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "lambda", "x", ":", "np", ".", "asarray", "(", "x", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", "#,", "\n", "#normalize", "\n"]], "home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.FC100.FC100.__getitem__": [[145, 153], ["PIL.Image.fromarray", "FC100.FC100.transform"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "img", ",", "label", "=", "self", ".", "data", "[", "index", "]", ",", "self", ".", "labels", "[", "index", "]", "\n", "# doing this so that it is consistent with all other datasets", "\n", "# to return a PIL Image", "\n", "img", "=", "Image", ".", "fromarray", "(", "img", ")", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "", "return", "img", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.FC100.FC100.__len__": [[154, 156], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.FC100.FewShotDataloader.__init__": [[159, 194], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "dataset", ",", "\n", "nKnovel", "=", "5", ",", "# number of novel categories.", "\n", "nKbase", "=", "-", "1", ",", "# number of base categories.", "\n", "nExemplars", "=", "1", ",", "# number of training examples per novel category.", "\n", "nTestNovel", "=", "15", "*", "5", ",", "# number of test examples for all the novel categories.", "\n", "nTestBase", "=", "15", "*", "5", ",", "# number of test examples for all the base categories.", "\n", "batch_size", "=", "1", ",", "# number of training episodes per batch.", "\n", "num_workers", "=", "4", ",", "\n", "epoch_size", "=", "2000", ",", "# number of batches per epoch.", "\n", ")", ":", "\n", "\n", "        ", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "phase", "=", "self", ".", "dataset", ".", "phase", "\n", "max_possible_nKnovel", "=", "(", "self", ".", "dataset", ".", "num_cats_base", "if", "self", ".", "phase", "==", "'train'", "\n", "else", "self", ".", "dataset", ".", "num_cats_novel", ")", "\n", "assert", "(", "nKnovel", ">=", "0", "and", "nKnovel", "<", "max_possible_nKnovel", ")", "\n", "self", ".", "nKnovel", "=", "nKnovel", "\n", "\n", "max_possible_nKbase", "=", "self", ".", "dataset", ".", "num_cats_base", "\n", "nKbase", "=", "nKbase", "if", "nKbase", ">=", "0", "else", "max_possible_nKbase", "\n", "if", "self", ".", "phase", "==", "'train'", "and", "nKbase", ">", "0", ":", "\n", "            ", "nKbase", "-=", "self", ".", "nKnovel", "\n", "max_possible_nKbase", "-=", "self", ".", "nKnovel", "\n", "\n", "", "assert", "(", "nKbase", ">=", "0", "and", "nKbase", "<=", "max_possible_nKbase", ")", "\n", "self", ".", "nKbase", "=", "nKbase", "\n", "\n", "self", ".", "nExemplars", "=", "nExemplars", "\n", "self", ".", "nTestNovel", "=", "nTestNovel", "\n", "self", ".", "nTestBase", "=", "nTestBase", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "epoch_size", "=", "epoch_size", "\n", "self", ".", "num_workers", "=", "num_workers", "\n", "self", ".", "is_eval_mode", "=", "(", "self", ".", "phase", "==", "'test'", ")", "or", "(", "self", ".", "phase", "==", "'val'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.FC100.FewShotDataloader.sampleImageIdsFrom": [[195, 212], ["random.sample", "len"], "methods", ["None"], ["", "def", "sampleImageIdsFrom", "(", "self", ",", "cat_id", ",", "sample_size", "=", "1", ")", ":", "\n", "        ", "\"\"\"\n        Samples `sample_size` number of unique image ids picked from the\n        category `cat_id` (i.e., self.dataset.label2ind[cat_id]).\n\n        Args:\n            cat_id: a scalar with the id of the category from which images will\n                be sampled.\n            sample_size: number of images that will be sampled.\n\n        Returns:\n            image_ids: a list of length `sample_size` with unique image ids.\n        \"\"\"", "\n", "assert", "(", "cat_id", "in", "self", ".", "dataset", ".", "label2ind", ")", "\n", "assert", "(", "len", "(", "self", ".", "dataset", ".", "label2ind", "[", "cat_id", "]", ")", ">=", "sample_size", ")", "\n", "# Note: random.sample samples elements without replacement.", "\n", "return", "random", ".", "sample", "(", "self", ".", "dataset", ".", "label2ind", "[", "cat_id", "]", ",", "sample_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.FC100.FewShotDataloader.sampleCategories": [[213, 238], ["random.sample", "len", "ValueError"], "methods", ["None"], ["", "def", "sampleCategories", "(", "self", ",", "cat_set", ",", "sample_size", "=", "1", ")", ":", "\n", "        ", "\"\"\"\n        Samples `sample_size` number of unique categories picked from the\n        `cat_set` set of categories. `cat_set` can be either 'base' or 'novel'.\n\n        Args:\n            cat_set: string that specifies the set of categories from which\n                categories will be sampled.\n            sample_size: number of categories that will be sampled.\n\n        Returns:\n            cat_ids: a list of length `sample_size` with unique category ids.\n        \"\"\"", "\n", "if", "cat_set", "==", "'base'", ":", "\n", "            ", "labelIds", "=", "self", ".", "dataset", ".", "labelIds_base", "\n", "", "elif", "cat_set", "==", "'novel'", ":", "\n", "            ", "labelIds", "=", "self", ".", "dataset", ".", "labelIds_novel", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Not recognized category set {}'", ".", "format", "(", "cat_set", ")", ")", "\n", "\n", "", "assert", "(", "len", "(", "labelIds", ")", ">=", "sample_size", ")", "\n", "# return sample_size unique categories chosen from labelIds set of", "\n", "# categories (that can be either self.labelIds_base or self.labelIds_novel)", "\n", "# Note: random.sample samples elements without replacement.", "\n", "return", "random", ".", "sample", "(", "labelIds", ",", "sample_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.FC100.FewShotDataloader.sample_base_and_novel_categories": [[239, 274], ["sorted", "sorted", "FC100.FewShotDataloader.sampleCategories", "random.shuffle", "sorted", "sorted", "FC100.FewShotDataloader.sampleCategories", "FC100.FewShotDataloader.sampleCategories", "len"], "methods", ["home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.mini_imagenet.FewShotDataloader.sampleCategories", "home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.mini_imagenet.FewShotDataloader.sampleCategories", "home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.mini_imagenet.FewShotDataloader.sampleCategories"], ["", "def", "sample_base_and_novel_categories", "(", "self", ",", "nKbase", ",", "nKnovel", ")", ":", "\n", "        ", "\"\"\"\n        Samples `nKbase` number of base categories and `nKnovel` number of novel\n        categories.\n\n        Args:\n            nKbase: number of base categories\n            nKnovel: number of novel categories\n\n        Returns:\n            Kbase: a list of length 'nKbase' with the ids of the sampled base\n                categories.\n            Knovel: a list of lenght 'nKnovel' with the ids of the sampled novel\n                categories.\n        \"\"\"", "\n", "if", "self", ".", "is_eval_mode", ":", "\n", "            ", "assert", "(", "nKnovel", "<=", "self", ".", "dataset", ".", "num_cats_novel", ")", "\n", "# sample from the set of base categories 'nKbase' number of base", "\n", "# categories.", "\n", "Kbase", "=", "sorted", "(", "self", ".", "sampleCategories", "(", "'base'", ",", "nKbase", ")", ")", "\n", "# sample from the set of novel categories 'nKnovel' number of novel", "\n", "# categories.", "\n", "Knovel", "=", "sorted", "(", "self", ".", "sampleCategories", "(", "'novel'", ",", "nKnovel", ")", ")", "\n", "", "else", ":", "\n", "# sample from the set of base categories 'nKnovel' + 'nKbase' number", "\n", "# of categories.", "\n", "            ", "cats_ids", "=", "self", ".", "sampleCategories", "(", "'base'", ",", "nKnovel", "+", "nKbase", ")", "\n", "assert", "(", "len", "(", "cats_ids", ")", "==", "(", "nKnovel", "+", "nKbase", ")", ")", "\n", "# Randomly pick 'nKnovel' number of fake novel categories and keep", "\n", "# the rest as base categories.", "\n", "random", ".", "shuffle", "(", "cats_ids", ")", "\n", "Knovel", "=", "sorted", "(", "cats_ids", "[", ":", "nKnovel", "]", ")", "\n", "Kbase", "=", "sorted", "(", "cats_ids", "[", "nKnovel", ":", "]", ")", "\n", "\n", "", "return", "Kbase", ",", "Knovel", "\n", "\n"]], "home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.FC100.FewShotDataloader.sample_test_examples_for_base_categories": [[275, 307], ["len", "numpy.random.choice", "numpy.unique", "zip", "len", "numpy.arange", "FC100.FewShotDataloader.sampleImageIdsFrom", "len"], "methods", ["home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.mini_imagenet.FewShotDataloader.sampleImageIdsFrom"], ["", "def", "sample_test_examples_for_base_categories", "(", "self", ",", "Kbase", ",", "nTestBase", ")", ":", "\n", "        ", "\"\"\"\n        Sample `nTestBase` number of images from the `Kbase` categories.\n\n        Args:\n            Kbase: a list of length `nKbase` with the ids of the categories from\n                where the images will be sampled.\n            nTestBase: the total number of images that will be sampled.\n\n        Returns:\n            Tbase: a list of length `nTestBase` with 2-element tuples. The 1st\n                element of each tuple is the image id that was sampled and the\n                2nd elemend is its category label (which is in the range\n                [0, len(Kbase)-1]).\n        \"\"\"", "\n", "Tbase", "=", "[", "]", "\n", "if", "len", "(", "Kbase", ")", ">", "0", ":", "\n", "# Sample for each base category a number images such that the total", "\n", "# number sampled images of all categories to be equal to `nTestBase`.", "\n", "            ", "KbaseIndices", "=", "np", ".", "random", ".", "choice", "(", "\n", "np", ".", "arange", "(", "len", "(", "Kbase", ")", ")", ",", "size", "=", "nTestBase", ",", "replace", "=", "True", ")", "\n", "KbaseIndices", ",", "NumImagesPerCategory", "=", "np", ".", "unique", "(", "\n", "KbaseIndices", ",", "return_counts", "=", "True", ")", "\n", "\n", "for", "Kbase_idx", ",", "NumImages", "in", "zip", "(", "KbaseIndices", ",", "NumImagesPerCategory", ")", ":", "\n", "                ", "imd_ids", "=", "self", ".", "sampleImageIdsFrom", "(", "\n", "Kbase", "[", "Kbase_idx", "]", ",", "sample_size", "=", "NumImages", ")", "\n", "Tbase", "+=", "[", "(", "img_id", ",", "Kbase_idx", ")", "for", "img_id", "in", "imd_ids", "]", "\n", "\n", "", "", "assert", "(", "len", "(", "Tbase", ")", "==", "nTestBase", ")", "\n", "\n", "return", "Tbase", "\n", "\n"]], "home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.FC100.FewShotDataloader.sample_train_and_test_examples_for_novel_categories": [[308, 356], ["len", "int", "range", "random.shuffle", "len", "len", "FC100.FewShotDataloader.sampleImageIdsFrom", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.mini_imagenet.FewShotDataloader.sampleImageIdsFrom"], ["", "def", "sample_train_and_test_examples_for_novel_categories", "(", "\n", "self", ",", "Knovel", ",", "nTestNovel", ",", "nExemplars", ",", "nKbase", ")", ":", "\n", "        ", "\"\"\"Samples train and test examples of the novel categories.\n\n        Args:\n    \t    Knovel: a list with the ids of the novel categories.\n            nTestNovel: the total number of test images that will be sampled\n                from all the novel categories.\n            nExemplars: the number of training examples per novel category that\n                will be sampled.\n            nKbase: the number of base categories. It is used as offset of the\n                category index of each sampled image.\n\n        Returns:\n            Tnovel: a list of length `nTestNovel` with 2-element tuples. The\n                1st element of each tuple is the image id that was sampled and\n                the 2nd element is its category label (which is in the range\n                [nKbase, nKbase + len(Knovel) - 1]).\n            Exemplars: a list of length len(Knovel) * nExemplars of 2-element\n                tuples. The 1st element of each tuple is the image id that was\n                sampled and the 2nd element is its category label (which is in\n                the ragne [nKbase, nKbase + len(Knovel) - 1]).\n        \"\"\"", "\n", "\n", "if", "len", "(", "Knovel", ")", "==", "0", ":", "\n", "            ", "return", "[", "]", ",", "[", "]", "\n", "\n", "", "nKnovel", "=", "len", "(", "Knovel", ")", "\n", "Tnovel", "=", "[", "]", "\n", "Exemplars", "=", "[", "]", "\n", "assert", "(", "(", "nTestNovel", "%", "nKnovel", ")", "==", "0", ")", "\n", "nEvalExamplesPerClass", "=", "int", "(", "nTestNovel", "/", "nKnovel", ")", "\n", "\n", "for", "Knovel_idx", "in", "range", "(", "len", "(", "Knovel", ")", ")", ":", "\n", "            ", "imd_ids", "=", "self", ".", "sampleImageIdsFrom", "(", "\n", "Knovel", "[", "Knovel_idx", "]", ",", "\n", "sample_size", "=", "(", "nEvalExamplesPerClass", "+", "nExemplars", ")", ")", "\n", "\n", "imds_tnovel", "=", "imd_ids", "[", ":", "nEvalExamplesPerClass", "]", "\n", "imds_ememplars", "=", "imd_ids", "[", "nEvalExamplesPerClass", ":", "]", "\n", "\n", "Tnovel", "+=", "[", "(", "img_id", ",", "nKbase", "+", "Knovel_idx", ")", "for", "img_id", "in", "imds_tnovel", "]", "\n", "Exemplars", "+=", "[", "(", "img_id", ",", "nKbase", "+", "Knovel_idx", ")", "for", "img_id", "in", "imds_ememplars", "]", "\n", "", "assert", "(", "len", "(", "Tnovel", ")", "==", "nTestNovel", ")", "\n", "assert", "(", "len", "(", "Exemplars", ")", "==", "len", "(", "Knovel", ")", "*", "nExemplars", ")", "\n", "random", ".", "shuffle", "(", "Exemplars", ")", "\n", "\n", "return", "Tnovel", ",", "Exemplars", "\n", "\n"]], "home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.FC100.FewShotDataloader.sample_episode": [[357, 376], ["FC100.FewShotDataloader.sample_base_and_novel_categories", "FC100.FewShotDataloader.sample_test_examples_for_base_categories", "FC100.FewShotDataloader.sample_train_and_test_examples_for_novel_categories", "random.shuffle"], "methods", ["home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.mini_imagenet.FewShotDataloader.sample_base_and_novel_categories", "home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.mini_imagenet.FewShotDataloader.sample_test_examples_for_base_categories", "home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.mini_imagenet.FewShotDataloader.sample_train_and_test_examples_for_novel_categories"], ["", "def", "sample_episode", "(", "self", ")", ":", "\n", "        ", "\"\"\"Samples a training episode.\"\"\"", "\n", "nKnovel", "=", "self", ".", "nKnovel", "\n", "nKbase", "=", "self", ".", "nKbase", "\n", "nTestNovel", "=", "self", ".", "nTestNovel", "\n", "nTestBase", "=", "self", ".", "nTestBase", "\n", "nExemplars", "=", "self", ".", "nExemplars", "\n", "\n", "Kbase", ",", "Knovel", "=", "self", ".", "sample_base_and_novel_categories", "(", "nKbase", ",", "nKnovel", ")", "\n", "Tbase", "=", "self", ".", "sample_test_examples_for_base_categories", "(", "Kbase", ",", "nTestBase", ")", "\n", "Tnovel", ",", "Exemplars", "=", "self", ".", "sample_train_and_test_examples_for_novel_categories", "(", "\n", "Knovel", ",", "nTestNovel", ",", "nExemplars", ",", "nKbase", ")", "\n", "\n", "# concatenate the base and novel category examples.", "\n", "Test", "=", "Tbase", "+", "Tnovel", "\n", "random", ".", "shuffle", "(", "Test", ")", "\n", "Kall", "=", "Kbase", "+", "Knovel", "\n", "\n", "return", "Exemplars", ",", "Test", ",", "Kall", ",", "nKbase", "\n", "\n"]], "home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.FC100.FewShotDataloader.createExamplesTensorData": [[377, 400], ["torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor"], "methods", ["None"], ["", "def", "createExamplesTensorData", "(", "self", ",", "examples", ")", ":", "\n", "        ", "\"\"\"\n        Creates the examples image and label tensor data.\n\n        Args:\n            examples: a list of 2-element tuples, each representing a\n                train or test example. The 1st element of each tuple\n                is the image id of the example and 2nd element is the\n                category label of the example, which is in the range\n                [0, nK - 1], where nK is the total number of categories\n                (both novel and base).\n\n        Returns:\n            images: a tensor of shape [nExamples, Height, Width, 3] with the\n                example images, where nExamples is the number of examples\n                (i.e., nExamples = len(examples)).\n            labels: a tensor of shape [nExamples] with the category label\n                of each example.\n        \"\"\"", "\n", "images", "=", "torch", ".", "stack", "(", "\n", "[", "self", ".", "dataset", "[", "img_idx", "]", "[", "0", "]", "for", "img_idx", ",", "_", "in", "examples", "]", ",", "dim", "=", "0", ")", "\n", "labels", "=", "torch", ".", "LongTensor", "(", "[", "label", "for", "_", ",", "label", "in", "examples", "]", ")", "\n", "return", "images", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.FC100.FewShotDataloader.get_iterator": [[401, 423], ["random.seed", "numpy.random.seed", "torchnet.dataset.ListDataset", "torchnet.dataset.ListDataset.parallel", "FC100.FewShotDataloader.sample_episode", "FC100.FewShotDataloader.createExamplesTensorData", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "len", "FC100.FewShotDataloader.createExamplesTensorData", "range"], "methods", ["home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.mini_imagenet.FewShotDataloader.sample_episode", "home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.mini_imagenet.FewShotDataloader.createExamplesTensorData", "home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.mini_imagenet.FewShotDataloader.createExamplesTensorData"], ["", "def", "get_iterator", "(", "self", ",", "epoch", "=", "0", ")", ":", "\n", "        ", "rand_seed", "=", "epoch", "\n", "random", ".", "seed", "(", "rand_seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "rand_seed", ")", "\n", "def", "load_function", "(", "iter_idx", ")", ":", "\n", "            ", "Exemplars", ",", "Test", ",", "Kall", ",", "nKbase", "=", "self", ".", "sample_episode", "(", ")", "\n", "Xt", ",", "Yt", "=", "self", ".", "createExamplesTensorData", "(", "Test", ")", "\n", "Kall", "=", "torch", ".", "LongTensor", "(", "Kall", ")", "\n", "if", "len", "(", "Exemplars", ")", ">", "0", ":", "\n", "                ", "Xe", ",", "Ye", "=", "self", ".", "createExamplesTensorData", "(", "Exemplars", ")", "\n", "return", "Xe", ",", "Ye", ",", "Xt", ",", "Yt", ",", "Kall", ",", "nKbase", "\n", "", "else", ":", "\n", "                ", "return", "Xt", ",", "Yt", ",", "Kall", ",", "nKbase", "\n", "\n", "", "", "tnt_dataset", "=", "tnt", ".", "dataset", ".", "ListDataset", "(", "\n", "elem_list", "=", "range", "(", "self", ".", "epoch_size", ")", ",", "load", "=", "load_function", ")", "\n", "data_loader", "=", "tnt_dataset", ".", "parallel", "(", "\n", "batch_size", "=", "self", ".", "batch_size", ",", "\n", "num_workers", "=", "(", "0", "if", "self", ".", "is_eval_mode", "else", "self", ".", "num_workers", ")", ",", "\n", "shuffle", "=", "(", "False", "if", "self", ".", "is_eval_mode", "else", "True", ")", ")", "\n", "\n", "return", "data_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.FC100.FewShotDataloader.__call__": [[424, 426], ["FC100.FewShotDataloader.get_iterator"], "methods", ["home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.mini_imagenet.FewShotDataloader.get_iterator"], ["", "def", "__call__", "(", "self", ",", "epoch", "=", "0", ")", ":", "\n", "        ", "return", "self", ".", "get_iterator", "(", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.FC100.FewShotDataloader.__len__": [[427, 429], ["int"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "int", "(", "self", ".", "epoch_size", "/", "self", ".", "batch_size", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.FC100.buildLabelIndex": [[32, 40], ["enumerate", "label2inds[].append"], "function", ["None"], ["def", "buildLabelIndex", "(", "labels", ")", ":", "\n", "    ", "label2inds", "=", "{", "}", "\n", "for", "idx", ",", "label", "in", "enumerate", "(", "labels", ")", ":", "\n", "        ", "if", "label", "not", "in", "label2inds", ":", "\n", "            ", "label2inds", "[", "label", "]", "=", "[", "]", "\n", "", "label2inds", "[", "label", "]", ".", "append", "(", "idx", ")", "\n", "\n", "", "return", "label2inds", "\n", "\n"]], "home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.FC100.load_data": [[41, 52], ["open", "pickle.load", "open", "pickle._Unpickler", "pickle._Unpickler.load"], "function", ["None"], ["", "def", "load_data", "(", "file", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "with", "open", "(", "file", ",", "'rb'", ")", "as", "fo", ":", "\n", "            ", "data", "=", "pickle", ".", "load", "(", "fo", ")", "\n", "", "return", "data", "\n", "", "except", ":", "\n", "        ", "with", "open", "(", "file", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "u", "=", "pickle", ".", "_Unpickler", "(", "f", ")", "\n", "u", ".", "encoding", "=", "'latin1'", "\n", "data", "=", "u", ".", "load", "(", ")", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.mini_imagenet.MiniImageNet.__init__": [[55, 143], ["print", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "torchvision.Normalize", "torchvision.Normalize", "torchvision.Normalize", "mini_imagenet.load_data", "mini_imagenet.buildLabelIndex", "sorted", "len", "len", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "mini_imagenet.MiniImageNet.label2ind.keys", "numpy.concatenate", "mini_imagenet.buildLabelIndex", "sorted", "len", "buildLabelIndex().keys", "buildLabelIndex().keys", "len", "len", "ValueError", "mini_imagenet.load_data", "mini_imagenet.load_data", "mini_imagenet.load_data", "mini_imagenet.load_data", "mini_imagenet.MiniImageNet.label2ind.keys", "set", "set", "len", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.RandomCrop", "torchvision.RandomCrop", "torchvision.RandomCrop", "torchvision.ColorJitter", "torchvision.ColorJitter", "torchvision.ColorJitter", "torchvision.RandomHorizontalFlip", "torchvision.RandomHorizontalFlip", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.ToTensor", "mini_imagenet.buildLabelIndex", "mini_imagenet.buildLabelIndex", "numpy.asarray", "numpy.asarray"], "methods", ["home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.mini_imagenet.load_data", "home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.mini_imagenet.buildLabelIndex", "home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.mini_imagenet.buildLabelIndex", "home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.mini_imagenet.load_data", "home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.mini_imagenet.load_data", "home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.mini_imagenet.load_data", "home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.mini_imagenet.load_data", "home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.mini_imagenet.buildLabelIndex", "home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.mini_imagenet.buildLabelIndex"], ["    ", "def", "__init__", "(", "self", ",", "phase", "=", "'train'", ",", "do_not_use_random_transf", "=", "False", ")", ":", "\n", "\n", "        ", "self", ".", "base_folder", "=", "'miniImagenet'", "\n", "assert", "(", "phase", "==", "'train'", "or", "phase", "==", "'val'", "or", "phase", "==", "'test'", ")", "\n", "self", ".", "phase", "=", "phase", "\n", "self", ".", "name", "=", "'MiniImageNet_'", "+", "phase", "\n", "\n", "print", "(", "'Loading mini ImageNet dataset - phase {0}'", ".", "format", "(", "phase", ")", ")", "\n", "file_train_categories_train_phase", "=", "os", ".", "path", ".", "join", "(", "\n", "_MINI_IMAGENET_DATASET_DIR", ",", "\n", "'miniImageNet_category_split_train_phase_train.pickle'", ")", "\n", "file_train_categories_val_phase", "=", "os", ".", "path", ".", "join", "(", "\n", "_MINI_IMAGENET_DATASET_DIR", ",", "\n", "'miniImageNet_category_split_train_phase_val.pickle'", ")", "\n", "file_train_categories_test_phase", "=", "os", ".", "path", ".", "join", "(", "\n", "_MINI_IMAGENET_DATASET_DIR", ",", "\n", "'miniImageNet_category_split_train_phase_test.pickle'", ")", "\n", "file_val_categories_val_phase", "=", "os", ".", "path", ".", "join", "(", "\n", "_MINI_IMAGENET_DATASET_DIR", ",", "\n", "'miniImageNet_category_split_val.pickle'", ")", "\n", "file_test_categories_test_phase", "=", "os", ".", "path", ".", "join", "(", "\n", "_MINI_IMAGENET_DATASET_DIR", ",", "\n", "'miniImageNet_category_split_test.pickle'", ")", "\n", "\n", "if", "self", ".", "phase", "==", "'train'", ":", "\n", "# During training phase we only load the training phase images", "\n", "# of the training categories (aka base categories).", "\n", "            ", "data_train", "=", "load_data", "(", "file_train_categories_train_phase", ")", "\n", "self", ".", "data", "=", "data_train", "[", "'data'", "]", "\n", "self", ".", "labels", "=", "data_train", "[", "'labels'", "]", "\n", "\n", "self", ".", "label2ind", "=", "buildLabelIndex", "(", "self", ".", "labels", ")", "\n", "self", ".", "labelIds", "=", "sorted", "(", "self", ".", "label2ind", ".", "keys", "(", ")", ")", "\n", "self", ".", "num_cats", "=", "len", "(", "self", ".", "labelIds", ")", "\n", "self", ".", "labelIds_base", "=", "self", ".", "labelIds", "\n", "self", ".", "num_cats_base", "=", "len", "(", "self", ".", "labelIds_base", ")", "\n", "\n", "", "elif", "self", ".", "phase", "==", "'val'", "or", "self", ".", "phase", "==", "'test'", ":", "\n", "            ", "if", "self", ".", "phase", "==", "'test'", ":", "\n", "# load data that will be used for evaluating the recognition", "\n", "# accuracy of the base categories.", "\n", "                ", "data_base", "=", "load_data", "(", "file_train_categories_test_phase", ")", "\n", "# load data that will be use for evaluating the few-shot recogniton", "\n", "# accuracy on the novel categories.", "\n", "data_novel", "=", "load_data", "(", "file_test_categories_test_phase", ")", "\n", "", "else", ":", "# phase=='val'", "\n", "# load data that will be used for evaluating the recognition", "\n", "# accuracy of the base categories.", "\n", "                ", "data_base", "=", "load_data", "(", "file_train_categories_val_phase", ")", "\n", "# load data that will be use for evaluating the few-shot recogniton", "\n", "# accuracy on the novel categories.", "\n", "data_novel", "=", "load_data", "(", "file_val_categories_val_phase", ")", "\n", "\n", "", "self", ".", "data", "=", "np", ".", "concatenate", "(", "\n", "[", "data_base", "[", "'data'", "]", ",", "data_novel", "[", "'data'", "]", "]", ",", "axis", "=", "0", ")", "\n", "self", ".", "labels", "=", "data_base", "[", "'labels'", "]", "+", "data_novel", "[", "'labels'", "]", "\n", "\n", "self", ".", "label2ind", "=", "buildLabelIndex", "(", "self", ".", "labels", ")", "\n", "self", ".", "labelIds", "=", "sorted", "(", "self", ".", "label2ind", ".", "keys", "(", ")", ")", "\n", "self", ".", "num_cats", "=", "len", "(", "self", ".", "labelIds", ")", "\n", "\n", "self", ".", "labelIds_base", "=", "buildLabelIndex", "(", "data_base", "[", "'labels'", "]", ")", ".", "keys", "(", ")", "\n", "self", ".", "labelIds_novel", "=", "buildLabelIndex", "(", "data_novel", "[", "'labels'", "]", ")", ".", "keys", "(", ")", "\n", "self", ".", "num_cats_base", "=", "len", "(", "self", ".", "labelIds_base", ")", "\n", "self", ".", "num_cats_novel", "=", "len", "(", "self", ".", "labelIds_novel", ")", "\n", "intersection", "=", "set", "(", "self", ".", "labelIds_base", ")", "&", "set", "(", "self", ".", "labelIds_novel", ")", "\n", "assert", "(", "len", "(", "intersection", ")", "==", "0", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Not valid phase {0}'", ".", "format", "(", "self", ".", "phase", ")", ")", "\n", "\n", "", "mean_pix", "=", "[", "x", "/", "255.0", "for", "x", "in", "[", "120.39586422", ",", "115.59361427", ",", "104.54012653", "]", "]", "\n", "std_pix", "=", "[", "x", "/", "255.0", "for", "x", "in", "[", "70.68188272", ",", "68.27635443", ",", "72.54505529", "]", "]", "\n", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "mean_pix", ",", "std", "=", "std_pix", ")", "\n", "\n", "if", "(", "self", ".", "phase", "==", "'test'", "or", "self", ".", "phase", "==", "'val'", ")", "or", "(", "do_not_use_random_transf", "==", "True", ")", ":", "\n", "            ", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "lambda", "x", ":", "np", ".", "asarray", "(", "x", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", "\n", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomCrop", "(", "84", ",", "padding", "=", "8", ")", ",", "\n", "transforms", ".", "ColorJitter", "(", "brightness", "=", "0.4", ",", "contrast", "=", "0.4", ",", "saturation", "=", "0.4", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "lambda", "x", ":", "np", ".", "asarray", "(", "x", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.mini_imagenet.MiniImageNet.__getitem__": [[145, 153], ["PIL.Image.fromarray", "mini_imagenet.MiniImageNet.transform"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "img", ",", "label", "=", "self", ".", "data", "[", "index", "]", ",", "self", ".", "labels", "[", "index", "]", "\n", "# doing this so that it is consistent with all other datasets", "\n", "# to return a PIL Image", "\n", "img", "=", "Image", ".", "fromarray", "(", "img", ")", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "", "return", "img", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.mini_imagenet.MiniImageNet.__len__": [[154, 156], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.mini_imagenet.FewShotDataloader.__init__": [[159, 194], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "dataset", ",", "\n", "nKnovel", "=", "5", ",", "# number of novel categories.", "\n", "nKbase", "=", "-", "1", ",", "# number of base categories.", "\n", "nExemplars", "=", "1", ",", "# number of training examples per novel category.", "\n", "nTestNovel", "=", "15", "*", "5", ",", "# number of test examples for all the novel categories.", "\n", "nTestBase", "=", "15", "*", "5", ",", "# number of test examples for all the base categories.", "\n", "batch_size", "=", "1", ",", "# number of training episodes per batch.", "\n", "num_workers", "=", "4", ",", "\n", "epoch_size", "=", "2000", ",", "# number of batches per epoch.", "\n", ")", ":", "\n", "\n", "        ", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "phase", "=", "self", ".", "dataset", ".", "phase", "\n", "max_possible_nKnovel", "=", "(", "self", ".", "dataset", ".", "num_cats_base", "if", "self", ".", "phase", "==", "'train'", "\n", "else", "self", ".", "dataset", ".", "num_cats_novel", ")", "\n", "assert", "(", "nKnovel", ">=", "0", "and", "nKnovel", "<", "max_possible_nKnovel", ")", "\n", "self", ".", "nKnovel", "=", "nKnovel", "\n", "\n", "max_possible_nKbase", "=", "self", ".", "dataset", ".", "num_cats_base", "\n", "nKbase", "=", "nKbase", "if", "nKbase", ">=", "0", "else", "max_possible_nKbase", "\n", "if", "self", ".", "phase", "==", "'train'", "and", "nKbase", ">", "0", ":", "\n", "            ", "nKbase", "-=", "self", ".", "nKnovel", "\n", "max_possible_nKbase", "-=", "self", ".", "nKnovel", "\n", "\n", "", "assert", "(", "nKbase", ">=", "0", "and", "nKbase", "<=", "max_possible_nKbase", ")", "\n", "self", ".", "nKbase", "=", "nKbase", "\n", "\n", "self", ".", "nExemplars", "=", "nExemplars", "\n", "self", ".", "nTestNovel", "=", "nTestNovel", "\n", "self", ".", "nTestBase", "=", "nTestBase", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "epoch_size", "=", "epoch_size", "\n", "self", ".", "num_workers", "=", "num_workers", "\n", "self", ".", "is_eval_mode", "=", "(", "self", ".", "phase", "==", "'test'", ")", "or", "(", "self", ".", "phase", "==", "'val'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.mini_imagenet.FewShotDataloader.sampleImageIdsFrom": [[195, 212], ["random.sample", "len"], "methods", ["None"], ["", "def", "sampleImageIdsFrom", "(", "self", ",", "cat_id", ",", "sample_size", "=", "1", ")", ":", "\n", "        ", "\"\"\"\n        Samples `sample_size` number of unique image ids picked from the\n        category `cat_id` (i.e., self.dataset.label2ind[cat_id]).\n\n        Args:\n            cat_id: a scalar with the id of the category from which images will\n                be sampled.\n            sample_size: number of images that will be sampled.\n\n        Returns:\n            image_ids: a list of length `sample_size` with unique image ids.\n        \"\"\"", "\n", "assert", "(", "cat_id", "in", "self", ".", "dataset", ".", "label2ind", ")", "\n", "assert", "(", "len", "(", "self", ".", "dataset", ".", "label2ind", "[", "cat_id", "]", ")", ">=", "sample_size", ")", "\n", "# Note: random.sample samples elements without replacement.", "\n", "return", "random", ".", "sample", "(", "self", ".", "dataset", ".", "label2ind", "[", "cat_id", "]", ",", "sample_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.mini_imagenet.FewShotDataloader.sampleCategories": [[213, 238], ["random.sample", "len", "ValueError"], "methods", ["None"], ["", "def", "sampleCategories", "(", "self", ",", "cat_set", ",", "sample_size", "=", "1", ")", ":", "\n", "        ", "\"\"\"\n        Samples `sample_size` number of unique categories picked from the\n        `cat_set` set of categories. `cat_set` can be either 'base' or 'novel'.\n\n        Args:\n            cat_set: string that specifies the set of categories from which\n                categories will be sampled.\n            sample_size: number of categories that will be sampled.\n\n        Returns:\n            cat_ids: a list of length `sample_size` with unique category ids.\n        \"\"\"", "\n", "if", "cat_set", "==", "'base'", ":", "\n", "            ", "labelIds", "=", "self", ".", "dataset", ".", "labelIds_base", "\n", "", "elif", "cat_set", "==", "'novel'", ":", "\n", "            ", "labelIds", "=", "self", ".", "dataset", ".", "labelIds_novel", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Not recognized category set {}'", ".", "format", "(", "cat_set", ")", ")", "\n", "\n", "", "assert", "(", "len", "(", "labelIds", ")", ">=", "sample_size", ")", "\n", "# return sample_size unique categories chosen from labelIds set of", "\n", "# categories (that can be either self.labelIds_base or self.labelIds_novel)", "\n", "# Note: random.sample samples elements without replacement.", "\n", "return", "random", ".", "sample", "(", "labelIds", ",", "sample_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.mini_imagenet.FewShotDataloader.sample_base_and_novel_categories": [[239, 274], ["sorted", "sorted", "mini_imagenet.FewShotDataloader.sampleCategories", "random.shuffle", "sorted", "sorted", "mini_imagenet.FewShotDataloader.sampleCategories", "mini_imagenet.FewShotDataloader.sampleCategories", "len"], "methods", ["home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.mini_imagenet.FewShotDataloader.sampleCategories", "home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.mini_imagenet.FewShotDataloader.sampleCategories", "home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.mini_imagenet.FewShotDataloader.sampleCategories"], ["", "def", "sample_base_and_novel_categories", "(", "self", ",", "nKbase", ",", "nKnovel", ")", ":", "\n", "        ", "\"\"\"\n        Samples `nKbase` number of base categories and `nKnovel` number of novel\n        categories.\n\n        Args:\n            nKbase: number of base categories\n            nKnovel: number of novel categories\n\n        Returns:\n            Kbase: a list of length 'nKbase' with the ids of the sampled base\n                categories.\n            Knovel: a list of lenght 'nKnovel' with the ids of the sampled novel\n                categories.\n        \"\"\"", "\n", "if", "self", ".", "is_eval_mode", ":", "\n", "            ", "assert", "(", "nKnovel", "<=", "self", ".", "dataset", ".", "num_cats_novel", ")", "\n", "# sample from the set of base categories 'nKbase' number of base", "\n", "# categories.", "\n", "Kbase", "=", "sorted", "(", "self", ".", "sampleCategories", "(", "'base'", ",", "nKbase", ")", ")", "\n", "# sample from the set of novel categories 'nKnovel' number of novel", "\n", "# categories.", "\n", "Knovel", "=", "sorted", "(", "self", ".", "sampleCategories", "(", "'novel'", ",", "nKnovel", ")", ")", "\n", "", "else", ":", "\n", "# sample from the set of base categories 'nKnovel' + 'nKbase' number", "\n", "# of categories.", "\n", "            ", "cats_ids", "=", "self", ".", "sampleCategories", "(", "'base'", ",", "nKnovel", "+", "nKbase", ")", "\n", "assert", "(", "len", "(", "cats_ids", ")", "==", "(", "nKnovel", "+", "nKbase", ")", ")", "\n", "# Randomly pick 'nKnovel' number of fake novel categories and keep", "\n", "# the rest as base categories.", "\n", "random", ".", "shuffle", "(", "cats_ids", ")", "\n", "Knovel", "=", "sorted", "(", "cats_ids", "[", ":", "nKnovel", "]", ")", "\n", "Kbase", "=", "sorted", "(", "cats_ids", "[", "nKnovel", ":", "]", ")", "\n", "\n", "", "return", "Kbase", ",", "Knovel", "\n", "\n"]], "home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.mini_imagenet.FewShotDataloader.sample_test_examples_for_base_categories": [[275, 307], ["len", "numpy.random.choice", "numpy.unique", "zip", "len", "numpy.arange", "mini_imagenet.FewShotDataloader.sampleImageIdsFrom", "len"], "methods", ["home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.mini_imagenet.FewShotDataloader.sampleImageIdsFrom"], ["", "def", "sample_test_examples_for_base_categories", "(", "self", ",", "Kbase", ",", "nTestBase", ")", ":", "\n", "        ", "\"\"\"\n        Sample `nTestBase` number of images from the `Kbase` categories.\n\n        Args:\n            Kbase: a list of length `nKbase` with the ids of the categories from\n                where the images will be sampled.\n            nTestBase: the total number of images that will be sampled.\n\n        Returns:\n            Tbase: a list of length `nTestBase` with 2-element tuples. The 1st\n                element of each tuple is the image id that was sampled and the\n                2nd elemend is its category label (which is in the range\n                [0, len(Kbase)-1]).\n        \"\"\"", "\n", "Tbase", "=", "[", "]", "\n", "if", "len", "(", "Kbase", ")", ">", "0", ":", "\n", "# Sample for each base category a number images such that the total", "\n", "# number sampled images of all categories to be equal to `nTestBase`.", "\n", "            ", "KbaseIndices", "=", "np", ".", "random", ".", "choice", "(", "\n", "np", ".", "arange", "(", "len", "(", "Kbase", ")", ")", ",", "size", "=", "nTestBase", ",", "replace", "=", "True", ")", "\n", "KbaseIndices", ",", "NumImagesPerCategory", "=", "np", ".", "unique", "(", "\n", "KbaseIndices", ",", "return_counts", "=", "True", ")", "\n", "\n", "for", "Kbase_idx", ",", "NumImages", "in", "zip", "(", "KbaseIndices", ",", "NumImagesPerCategory", ")", ":", "\n", "                ", "imd_ids", "=", "self", ".", "sampleImageIdsFrom", "(", "\n", "Kbase", "[", "Kbase_idx", "]", ",", "sample_size", "=", "NumImages", ")", "\n", "Tbase", "+=", "[", "(", "img_id", ",", "Kbase_idx", ")", "for", "img_id", "in", "imd_ids", "]", "\n", "\n", "", "", "assert", "(", "len", "(", "Tbase", ")", "==", "nTestBase", ")", "\n", "\n", "return", "Tbase", "\n", "\n"]], "home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.mini_imagenet.FewShotDataloader.sample_train_and_test_examples_for_novel_categories": [[308, 356], ["len", "int", "range", "random.shuffle", "len", "len", "mini_imagenet.FewShotDataloader.sampleImageIdsFrom", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.mini_imagenet.FewShotDataloader.sampleImageIdsFrom"], ["", "def", "sample_train_and_test_examples_for_novel_categories", "(", "\n", "self", ",", "Knovel", ",", "nTestNovel", ",", "nExemplars", ",", "nKbase", ")", ":", "\n", "        ", "\"\"\"Samples train and test examples of the novel categories.\n\n        Args:\n    \t    Knovel: a list with the ids of the novel categories.\n            nTestNovel: the total number of test images that will be sampled\n                from all the novel categories.\n            nExemplars: the number of training examples per novel category that\n                will be sampled.\n            nKbase: the number of base categories. It is used as offset of the\n                category index of each sampled image.\n\n        Returns:\n            Tnovel: a list of length `nTestNovel` with 2-element tuples. The\n                1st element of each tuple is the image id that was sampled and\n                the 2nd element is its category label (which is in the range\n                [nKbase, nKbase + len(Knovel) - 1]).\n            Exemplars: a list of length len(Knovel) * nExemplars of 2-element\n                tuples. The 1st element of each tuple is the image id that was\n                sampled and the 2nd element is its category label (which is in\n                the ragne [nKbase, nKbase + len(Knovel) - 1]).\n        \"\"\"", "\n", "\n", "if", "len", "(", "Knovel", ")", "==", "0", ":", "\n", "            ", "return", "[", "]", ",", "[", "]", "\n", "\n", "", "nKnovel", "=", "len", "(", "Knovel", ")", "\n", "Tnovel", "=", "[", "]", "\n", "Exemplars", "=", "[", "]", "\n", "assert", "(", "(", "nTestNovel", "%", "nKnovel", ")", "==", "0", ")", "\n", "nEvalExamplesPerClass", "=", "int", "(", "nTestNovel", "/", "nKnovel", ")", "\n", "\n", "for", "Knovel_idx", "in", "range", "(", "len", "(", "Knovel", ")", ")", ":", "\n", "            ", "imd_ids", "=", "self", ".", "sampleImageIdsFrom", "(", "\n", "Knovel", "[", "Knovel_idx", "]", ",", "\n", "sample_size", "=", "(", "nEvalExamplesPerClass", "+", "nExemplars", ")", ")", "\n", "\n", "imds_tnovel", "=", "imd_ids", "[", ":", "nEvalExamplesPerClass", "]", "\n", "imds_ememplars", "=", "imd_ids", "[", "nEvalExamplesPerClass", ":", "]", "\n", "\n", "Tnovel", "+=", "[", "(", "img_id", ",", "nKbase", "+", "Knovel_idx", ")", "for", "img_id", "in", "imds_tnovel", "]", "\n", "Exemplars", "+=", "[", "(", "img_id", ",", "nKbase", "+", "Knovel_idx", ")", "for", "img_id", "in", "imds_ememplars", "]", "\n", "", "assert", "(", "len", "(", "Tnovel", ")", "==", "nTestNovel", ")", "\n", "assert", "(", "len", "(", "Exemplars", ")", "==", "len", "(", "Knovel", ")", "*", "nExemplars", ")", "\n", "random", ".", "shuffle", "(", "Exemplars", ")", "\n", "\n", "return", "Tnovel", ",", "Exemplars", "\n", "\n"]], "home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.mini_imagenet.FewShotDataloader.sample_episode": [[357, 376], ["mini_imagenet.FewShotDataloader.sample_base_and_novel_categories", "mini_imagenet.FewShotDataloader.sample_test_examples_for_base_categories", "mini_imagenet.FewShotDataloader.sample_train_and_test_examples_for_novel_categories", "random.shuffle"], "methods", ["home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.mini_imagenet.FewShotDataloader.sample_base_and_novel_categories", "home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.mini_imagenet.FewShotDataloader.sample_test_examples_for_base_categories", "home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.mini_imagenet.FewShotDataloader.sample_train_and_test_examples_for_novel_categories"], ["", "def", "sample_episode", "(", "self", ")", ":", "\n", "        ", "\"\"\"Samples a training episode.\"\"\"", "\n", "nKnovel", "=", "self", ".", "nKnovel", "\n", "nKbase", "=", "self", ".", "nKbase", "\n", "nTestNovel", "=", "self", ".", "nTestNovel", "\n", "nTestBase", "=", "self", ".", "nTestBase", "\n", "nExemplars", "=", "self", ".", "nExemplars", "\n", "\n", "Kbase", ",", "Knovel", "=", "self", ".", "sample_base_and_novel_categories", "(", "nKbase", ",", "nKnovel", ")", "\n", "Tbase", "=", "self", ".", "sample_test_examples_for_base_categories", "(", "Kbase", ",", "nTestBase", ")", "\n", "Tnovel", ",", "Exemplars", "=", "self", ".", "sample_train_and_test_examples_for_novel_categories", "(", "\n", "Knovel", ",", "nTestNovel", ",", "nExemplars", ",", "nKbase", ")", "\n", "\n", "# concatenate the base and novel category examples.", "\n", "Test", "=", "Tbase", "+", "Tnovel", "\n", "random", ".", "shuffle", "(", "Test", ")", "\n", "Kall", "=", "Kbase", "+", "Knovel", "\n", "\n", "return", "Exemplars", ",", "Test", ",", "Kall", ",", "nKbase", "\n", "\n"]], "home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.mini_imagenet.FewShotDataloader.createExamplesTensorData": [[377, 400], ["torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor"], "methods", ["None"], ["", "def", "createExamplesTensorData", "(", "self", ",", "examples", ")", ":", "\n", "        ", "\"\"\"\n        Creates the examples image and label tensor data.\n\n        Args:\n            examples: a list of 2-element tuples, each representing a\n                train or test example. The 1st element of each tuple\n                is the image id of the example and 2nd element is the\n                category label of the example, which is in the range\n                [0, nK - 1], where nK is the total number of categories\n                (both novel and base).\n\n        Returns:\n            images: a tensor of shape [nExamples, Height, Width, 3] with the\n                example images, where nExamples is the number of examples\n                (i.e., nExamples = len(examples)).\n            labels: a tensor of shape [nExamples] with the category label\n                of each example.\n        \"\"\"", "\n", "images", "=", "torch", ".", "stack", "(", "\n", "[", "self", ".", "dataset", "[", "img_idx", "]", "[", "0", "]", "for", "img_idx", ",", "_", "in", "examples", "]", ",", "dim", "=", "0", ")", "\n", "labels", "=", "torch", ".", "LongTensor", "(", "[", "label", "for", "_", ",", "label", "in", "examples", "]", ")", "\n", "return", "images", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.mini_imagenet.FewShotDataloader.get_iterator": [[401, 423], ["random.seed", "numpy.random.seed", "torchnet.dataset.ListDataset", "torchnet.dataset.ListDataset.parallel", "mini_imagenet.FewShotDataloader.sample_episode", "mini_imagenet.FewShotDataloader.createExamplesTensorData", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "len", "mini_imagenet.FewShotDataloader.createExamplesTensorData", "range"], "methods", ["home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.mini_imagenet.FewShotDataloader.sample_episode", "home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.mini_imagenet.FewShotDataloader.createExamplesTensorData", "home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.mini_imagenet.FewShotDataloader.createExamplesTensorData"], ["", "def", "get_iterator", "(", "self", ",", "epoch", "=", "0", ")", ":", "\n", "        ", "rand_seed", "=", "epoch", "\n", "random", ".", "seed", "(", "rand_seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "rand_seed", ")", "\n", "def", "load_function", "(", "iter_idx", ")", ":", "\n", "            ", "Exemplars", ",", "Test", ",", "Kall", ",", "nKbase", "=", "self", ".", "sample_episode", "(", ")", "\n", "Xt", ",", "Yt", "=", "self", ".", "createExamplesTensorData", "(", "Test", ")", "\n", "Kall", "=", "torch", ".", "LongTensor", "(", "Kall", ")", "\n", "if", "len", "(", "Exemplars", ")", ">", "0", ":", "\n", "                ", "Xe", ",", "Ye", "=", "self", ".", "createExamplesTensorData", "(", "Exemplars", ")", "\n", "return", "Xe", ",", "Ye", ",", "Xt", ",", "Yt", ",", "Kall", ",", "nKbase", "\n", "", "else", ":", "\n", "                ", "return", "Xt", ",", "Yt", ",", "Kall", ",", "nKbase", "\n", "\n", "", "", "tnt_dataset", "=", "tnt", ".", "dataset", ".", "ListDataset", "(", "\n", "elem_list", "=", "range", "(", "self", ".", "epoch_size", ")", ",", "load", "=", "load_function", ")", "\n", "data_loader", "=", "tnt_dataset", ".", "parallel", "(", "\n", "batch_size", "=", "self", ".", "batch_size", ",", "\n", "num_workers", "=", "(", "0", "if", "self", ".", "is_eval_mode", "else", "self", ".", "num_workers", ")", ",", "\n", "shuffle", "=", "(", "False", "if", "self", ".", "is_eval_mode", "else", "True", ")", ")", "\n", "\n", "return", "data_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.mini_imagenet.FewShotDataloader.__call__": [[424, 426], ["mini_imagenet.FewShotDataloader.get_iterator"], "methods", ["home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.mini_imagenet.FewShotDataloader.get_iterator"], ["", "def", "__call__", "(", "self", ",", "epoch", "=", "0", ")", ":", "\n", "        ", "return", "self", ".", "get_iterator", "(", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.mini_imagenet.FewShotDataloader.__len__": [[427, 429], ["int"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "int", "(", "self", ".", "epoch_size", "/", "self", ".", "batch_size", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.mini_imagenet.buildLabelIndex": [[32, 40], ["enumerate", "label2inds[].append"], "function", ["None"], ["def", "buildLabelIndex", "(", "labels", ")", ":", "\n", "    ", "label2inds", "=", "{", "}", "\n", "for", "idx", ",", "label", "in", "enumerate", "(", "labels", ")", ":", "\n", "        ", "if", "label", "not", "in", "label2inds", ":", "\n", "            ", "label2inds", "[", "label", "]", "=", "[", "]", "\n", "", "label2inds", "[", "label", "]", ".", "append", "(", "idx", ")", "\n", "\n", "", "return", "label2inds", "\n", "\n"]], "home.repos.pwc.inspect_result.goldblum_FeatureClustering.data.mini_imagenet.load_data": [[42, 53], ["open", "pickle.load", "open", "pickle._Unpickler", "pickle._Unpickler.load"], "function", ["None"], ["", "def", "load_data", "(", "file", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "with", "open", "(", "file", ",", "'rb'", ")", "as", "fo", ":", "\n", "            ", "data", "=", "pickle", ".", "load", "(", "fo", ")", "\n", "", "return", "data", "\n", "", "except", ":", "\n", "        ", "with", "open", "(", "file", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "u", "=", "pickle", ".", "_Unpickler", "(", "f", ")", "\n", "u", ".", "encoding", "=", "'latin1'", "\n", "data", "=", "u", ".", "load", "(", ")", "\n", "", "return", "data", "\n", "\n"]]}