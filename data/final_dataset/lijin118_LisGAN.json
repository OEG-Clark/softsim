{"home.repos.pwc.inspect_result.lijin118_LisGAN.None.classifier2.CLASSIFIER.__init__": [[26, 72], ["_train_X.size", "classifier2.LINEAR_LOGSOFTMAX", "classifier2.CLASSIFIER.model.apply", "torch.NLLLoss", "torch.NLLLoss", "torch.NLLLoss", "torch.NLLLoss", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.Adam", "torch.Adam", "torch.Adam", "torch.Adam", "classifier2.CLASSIFIER.model.parameters", "classifier2.CLASSIFIER.model.cuda", "classifier2.CLASSIFIER.criterion.cuda", "classifier2.CLASSIFIER.input.cuda", "classifier2.CLASSIFIER.label.cuda", "classifier2.CLASSIFIER.train_X.size", "classifier2.CLASSIFIER.fit", "classifier2.CLASSIFIER.fit_zsl"], "methods", ["home.repos.pwc.inspect_result.lijin118_LisGAN.None.classifier.CLASSIFIER.fit", "home.repos.pwc.inspect_result.lijin118_LisGAN.None.classifier2.CLASSIFIER.fit_zsl"], ["    ", "def", "__init__", "(", "self", ",", "_train_X", ",", "_train_Y", ",", "data_loader", ",", "_nclass", ",", "_cuda", ",", "_lr", "=", "0.001", ",", "_beta1", "=", "0.5", ",", "_nepoch", "=", "20", ",", "_batch_size", "=", "100", ",", "generalized", "=", "True", ",", "ratio", "=", "0.6", ",", "epoch", "=", "20", ")", ":", "\n", "        ", "self", ".", "train_X", "=", "_train_X", "\n", "self", ".", "train_Y", "=", "_train_Y", "\n", "self", ".", "test_seen_feature", "=", "data_loader", ".", "test_seen_feature", "\n", "self", ".", "test_seen_label", "=", "data_loader", ".", "test_seen_label", "\n", "self", ".", "test_unseen_feature", "=", "data_loader", ".", "test_unseen_feature", "\n", "self", ".", "test_unseen_label", "=", "data_loader", ".", "test_unseen_label", "\n", "self", ".", "seenclasses", "=", "data_loader", ".", "seenclasses", "\n", "self", ".", "unseenclasses", "=", "data_loader", ".", "unseenclasses", "\n", "self", ".", "batch_size", "=", "_batch_size", "\n", "self", ".", "nepoch", "=", "_nepoch", "\n", "self", ".", "nclass", "=", "_nclass", "\n", "self", ".", "input_dim", "=", "_train_X", ".", "size", "(", "1", ")", "\n", "self", ".", "cuda", "=", "_cuda", "\n", "self", ".", "model", "=", "LINEAR_LOGSOFTMAX", "(", "self", ".", "input_dim", ",", "self", ".", "nclass", ")", "\n", "self", ".", "model", ".", "apply", "(", "util", ".", "weights_init", ")", "\n", "self", ".", "criterion", "=", "nn", ".", "NLLLoss", "(", ")", "\n", "\n", "self", ".", "data", "=", "data_loader", "\n", "\n", "self", ".", "input", "=", "torch", ".", "FloatTensor", "(", "_batch_size", ",", "self", ".", "input_dim", ")", "\n", "self", ".", "label", "=", "torch", ".", "LongTensor", "(", "_batch_size", ")", "\n", "\n", "self", ".", "lr", "=", "_lr", "\n", "self", ".", "beta1", "=", "_beta1", "\n", "# setup optimizer", "\n", "self", ".", "optimizer", "=", "optim", ".", "Adam", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "lr", "=", "_lr", ",", "betas", "=", "(", "_beta1", ",", "0.999", ")", ")", "\n", "self", ".", "ratio", "=", "ratio", "\n", "self", ".", "epoch", "=", "epoch", "\n", "\n", "if", "self", ".", "cuda", ":", "\n", "            ", "self", ".", "model", ".", "cuda", "(", ")", "\n", "self", ".", "criterion", ".", "cuda", "(", ")", "\n", "self", ".", "input", "=", "self", ".", "input", ".", "cuda", "(", ")", "\n", "self", ".", "label", "=", "self", ".", "label", ".", "cuda", "(", ")", "\n", "\n", "", "self", ".", "index_in_epoch", "=", "0", "\n", "self", ".", "epochs_completed", "=", "0", "\n", "self", ".", "ntrain", "=", "self", ".", "train_X", ".", "size", "(", ")", "[", "0", "]", "\n", "self", ".", "backup_X", "=", "_train_X", "\n", "self", ".", "backup_Y", "=", "_train_Y", "\n", "\n", "if", "generalized", ":", "\n", "            ", "self", ".", "acc_seen", ",", "self", ".", "acc_unseen", ",", "self", ".", "H", "=", "self", ".", "fit", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "acc", "=", "self", ".", "fit_zsl", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lijin118_LisGAN.None.classifier2.CLASSIFIER.pairwise_distances": [[73, 94], ["torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "x_norm.view", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag"], "methods", ["None"], ["", "", "def", "pairwise_distances", "(", "self", ",", "x", ",", "y", "=", "None", ")", ":", "\n", "        ", "'''\n        Input: x is a Nxd matrix\n               y is an optional Mxd matirx\n        Output: dist is a NxM matrix where dist[i,j] is the square norm between x[i,:] and y[j,:]\n                if y is not given then use 'y=x'.\n        i.e. dist[i,j] = ||x[i,:]-y[j,:]||^2\n        '''", "\n", "x_norm", "=", "(", "x", "**", "2", ")", ".", "sum", "(", "1", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "if", "y", "is", "not", "None", ":", "\n", "            ", "y_t", "=", "torch", ".", "transpose", "(", "y", ",", "0", ",", "1", ")", "\n", "y_norm", "=", "(", "y", "**", "2", ")", ".", "sum", "(", "1", ")", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "y_t", "=", "torch", ".", "transpose", "(", "x", ",", "0", ",", "1", ")", "\n", "y_norm", "=", "x_norm", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "\n", "", "dist", "=", "x_norm", "+", "y_norm", "-", "2.0", "*", "torch", ".", "mm", "(", "x", ",", "y_t", ")", "\n", "# Ensure diagonal is zero if x=y", "\n", "if", "y", "is", "None", ":", "\n", "            ", "dist", "=", "dist", "-", "torch", ".", "diag", "(", "dist", ".", "diag", ")", "\n", "", "return", "torch", ".", "clamp", "(", "dist", ",", "0.0", ",", "np", ".", "inf", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lijin118_LisGAN.None.classifier2.CLASSIFIER.fit_zsl": [[95, 201], ["classifier2.CLASSIFIER.test_unseen_feature.size", "util.map_label", "range", "print", "int", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "classifier2.CLASSIFIER.compute_per_class_acc", "classifier2.CLASSIFIER.compute_per_class_acc", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "classifier2.CLASSIFIER.pairwise_distances", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "classifier2.CLASSIFIER.compute_per_class_acc", "classifier2.CLASSIFIER.compute_per_class_acc", "classifier2.CLASSIFIER.compute_every_class_acc", "print", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "classifier2.CLASSIFIER.compute_per_class_acc", "classifier2.CLASSIFIER.compute_per_class_acc", "classifier2.CLASSIFIER.compute_every_class_acc", "print", "sys.stdout.flush", "int", "range", "classifier2.CLASSIFIER.val", "numpy.asarray", "numpy.asarray", "classifier2.CLASSIFIER.unseenclasses.size", "classifier2.CLASSIFIER.unseenclasses.size", "classifier2.CLASSIFIER.unseenclasses.size", "classifier2.CLASSIFIER.unseenclasses.size", "classifier2.CLASSIFIER.unseenclasses.size", "range", "classifier2.CLASSIFIER.val", "pred.eq().cpu().sum", "classifier2.CLASSIFIER.size", "classifier2.CLASSIFIER.unseenclasses.size", "classifier2.CLASSIFIER.unseenclasses.size", "classifier2.CLASSIFIER.unseenclasses.size", "classifier2.CLASSIFIER.model.zero_grad", "classifier2.CLASSIFIER.next_batch", "classifier2.CLASSIFIER.input.copy_", "classifier2.CLASSIFIER.label.copy_", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "classifier2.CLASSIFIER.model", "classifier2.CLASSIFIER.criterion", "classifier2.CLASSIFIER.backward", "classifier2.CLASSIFIER.optimizer.step", "list", "classifier2.CLASSIFIER.backup_X.size", "classifier2.CLASSIFIER.model.zero_grad", "classifier2.CLASSIFIER.next_batch", "classifier2.CLASSIFIER.input.copy_", "classifier2.CLASSIFIER.label.copy_", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "classifier2.CLASSIFIER.model", "classifier2.CLASSIFIER.criterion", "classifier2.CLASSIFIER.backward", "classifier2.CLASSIFIER.optimizer.step", "map", "pred.eq().cpu", "pred.eq"], "methods", ["home.repos.pwc.inspect_result.lijin118_LisGAN.None.util.map_label", "home.repos.pwc.inspect_result.lijin118_LisGAN.None.classifier.CLASSIFIER.compute_per_class_acc", "home.repos.pwc.inspect_result.lijin118_LisGAN.None.classifier.CLASSIFIER.compute_per_class_acc", "home.repos.pwc.inspect_result.lijin118_LisGAN.None.lisgan.pairwise_distances", "home.repos.pwc.inspect_result.lijin118_LisGAN.None.classifier.CLASSIFIER.compute_per_class_acc", "home.repos.pwc.inspect_result.lijin118_LisGAN.None.classifier.CLASSIFIER.compute_per_class_acc", "home.repos.pwc.inspect_result.lijin118_LisGAN.None.classifier2.CLASSIFIER.compute_every_class_acc", "home.repos.pwc.inspect_result.lijin118_LisGAN.None.classifier.CLASSIFIER.compute_per_class_acc", "home.repos.pwc.inspect_result.lijin118_LisGAN.None.classifier.CLASSIFIER.compute_per_class_acc", "home.repos.pwc.inspect_result.lijin118_LisGAN.None.classifier2.CLASSIFIER.compute_every_class_acc", "home.repos.pwc.inspect_result.lijin118_LisGAN.None.classifier.CLASSIFIER.val", "home.repos.pwc.inspect_result.lijin118_LisGAN.None.classifier.CLASSIFIER.val", "home.repos.pwc.inspect_result.lijin118_LisGAN.None.classifier.CLASSIFIER.next_batch", "home.repos.pwc.inspect_result.lijin118_LisGAN.None.classifier.CLASSIFIER.next_batch"], ["", "def", "fit_zsl", "(", "self", ")", ":", "\n", "        ", "first_acc", "=", "0", "\n", "first_all_pred", "=", "None", "\n", "first_all_output", "=", "None", "\n", "first_all_acc", "=", "[", "]", "\n", "\n", "trun", "=", "lambda", "x", ":", "int", "(", "x", "*", "100", ")", "\n", "\n", "all_length", "=", "self", ".", "test_unseen_feature", ".", "size", "(", "0", ")", "\n", "mapped_test_label", "=", "util", ".", "map_label", "(", "self", ".", "test_unseen_label", ",", "self", ".", "unseenclasses", ")", "\n", "for", "epoch", "in", "range", "(", "self", ".", "nepoch", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "0", ",", "self", ".", "ntrain", ",", "self", ".", "batch_size", ")", ":", "\n", "                ", "self", ".", "model", ".", "zero_grad", "(", ")", "\n", "batch_input", ",", "batch_label", "=", "self", ".", "next_batch", "(", "self", ".", "batch_size", ")", "\n", "self", ".", "input", ".", "copy_", "(", "batch_input", ")", "\n", "self", ".", "label", ".", "copy_", "(", "batch_label", ")", "\n", "inputv", "=", "Variable", "(", "self", ".", "input", ")", "# fake_feature", "\n", "labelv", "=", "Variable", "(", "self", ".", "label", ")", "# fake_labels", "\n", "output", "=", "self", ".", "model", "(", "inputv", ")", "\n", "loss", "=", "self", ".", "criterion", "(", "output", ",", "labelv", ")", "# \u4f7f\u7528fake_unseen_feature\u548clabels\u6765\u8bad\u7ec3\u5206\u7c7b\u5668", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "acc", ",", "pred", ",", "output", ",", "all_acc", "=", "self", ".", "val", "(", "self", ".", "test_unseen_feature", ",", "self", ".", "test_unseen_label", ",", "self", ".", "unseenclasses", ")", "\n", "if", "acc", ">", "first_acc", ":", "\n", "                ", "first_acc", "=", "acc", "\n", "first_all_pred", "=", "pred", "\n", "first_all_output", "=", "output", "\n", "first_all_acc", "=", "all_acc", "\n", "\n", "", "", "print", "(", "'First Acc: {:.2f}%'", ".", "format", "(", "first_acc", "*", "100", ")", ")", "\n", "# print([trun(x) for  x in  list(first_all_acc)])", "\n", "# cprint('First Acc: {:.2f}%'.format(first_acc * 100),'red')", "\n", "easy_len", "=", "int", "(", "all_length", "*", "self", ".", "ratio", ")", "\n", "hard_len", "=", "all_length", "-", "easy_len", "\n", "entropy_value", "=", "torch", ".", "from_numpy", "(", "np", ".", "asarray", "(", "list", "(", "map", "(", "entropy", ",", "first_all_output", ".", "data", ")", ")", ")", ")", "\n", "_", ",", "indices", "=", "torch", ".", "sort", "(", "-", "entropy_value", ")", "\n", "exit_indices", "=", "indices", "[", ":", "easy_len", "]", "\n", "keep_indices", "=", "indices", "[", "easy_len", ":", "]", "\n", "\n", "first_easy_pred", "=", "first_all_pred", "[", "exit_indices", "]", "\n", "first_easy_label", "=", "mapped_test_label", "[", "exit_indices", "]", "\n", "first_hard_pred", "=", "first_all_pred", "[", "keep_indices", "]", "\n", "first_hard_label", "=", "mapped_test_label", "[", "keep_indices", "]", "\n", "acc_first_easy", "=", "self", ".", "compute_per_class_acc", "(", "first_easy_label", ",", "first_easy_pred", ",", "self", ".", "unseenclasses", ".", "size", "(", "0", ")", ")", "\n", "acc_first_hard", "=", "self", ".", "compute_per_class_acc", "(", "first_hard_label", ",", "first_hard_pred", ",", "self", ".", "unseenclasses", ".", "size", "(", "0", ")", ")", "\n", "all_easy_hard_label", "=", "torch", ".", "cat", "(", "(", "first_easy_label", ",", "first_hard_label", ")", ",", "0", ")", "\n", "# print('First Easy Acc:{:.2f}%'.format(acc_first_easy*100))", "\n", "# print('First Hard Acc:{:.2f}%'.format(acc_first_hard*100))", "\n", "\n", "self", ".", "index_in_epoch", "=", "0", "\n", "self", ".", "epochs_completed", "=", "0", "\n", "self", ".", "ntrain", "=", "self", ".", "backup_X", ".", "size", "(", ")", "[", "0", "]", "+", "easy_len", "# fake+easy_sample", "\n", "self", ".", "train_X", "=", "torch", ".", "cat", "(", "(", "self", ".", "backup_X", ",", "self", ".", "test_unseen_feature", "[", "exit_indices", "]", ")", ",", "0", ")", "\n", "self", ".", "train_Y", "=", "torch", ".", "cat", "(", "(", "self", ".", "backup_Y", ",", "first_easy_pred", ")", ",", "0", ")", "\n", "\n", "sims", "=", "self", ".", "pairwise_distances", "(", "self", ".", "test_unseen_feature", "[", "keep_indices", "]", ",", "self", ".", "train_X", ")", "\n", "value", ",", "idx", "=", "torch", ".", "min", "(", "sims", ",", "dim", "=", "1", ")", "\n", "knn_hard_pred", "=", "self", ".", "train_Y", "[", "idx", "]", "\n", "knn_all_pred", "=", "torch", ".", "cat", "(", "(", "first_easy_pred", ",", "knn_hard_pred", ")", ",", "0", ")", "\n", "\n", "acc_knn_hard", "=", "self", ".", "compute_per_class_acc", "(", "first_hard_label", ",", "knn_hard_pred", ",", "self", ".", "unseenclasses", ".", "size", "(", "0", ")", ")", "\n", "acc_knn", "=", "self", ".", "compute_per_class_acc", "(", "all_easy_hard_label", ",", "knn_all_pred", ",", "self", ".", "unseenclasses", ".", "size", "(", "0", ")", ")", "\n", "all_acc_knn", "=", "self", ".", "compute_every_class_acc", "(", "all_easy_hard_label", ",", "knn_all_pred", ",", "self", ".", "unseenclasses", ".", "size", "(", "0", ")", ")", "\n", "# print('1NN Hard Acc: {:.2f}%'.format(acc_knn_hard*100))", "\n", "print", "(", "'1NN   Acc: {:.2f}%'", ".", "format", "(", "acc_knn", "*", "100", ")", ")", "\n", "# print([trun(x) for x in list(all_acc_knn)])", "\n", "\n", "acc_fc_hard", "=", "0", "\n", "fc_hard_pred", "=", "None", "\n", "real_mean_acc", "=", "0", "\n", "for", "epoch", "in", "range", "(", "self", ".", "nepoch", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "0", ",", "self", ".", "ntrain", ",", "self", ".", "batch_size", ")", ":", "\n", "                ", "self", ".", "model", ".", "zero_grad", "(", ")", "\n", "batch_input", ",", "batch_label", "=", "self", ".", "next_batch", "(", "self", ".", "batch_size", ")", "\n", "self", ".", "input", ".", "copy_", "(", "batch_input", ")", "\n", "self", ".", "label", ".", "copy_", "(", "batch_label", ")", "\n", "\n", "inputv", "=", "Variable", "(", "self", ".", "input", ")", "# fake_feature", "\n", "labelv", "=", "Variable", "(", "self", ".", "label", ")", "# fake_labels", "\n", "output", "=", "self", ".", "model", "(", "inputv", ")", "\n", "loss", "=", "self", ".", "criterion", "(", "output", ",", "labelv", ")", "# \u4f7f\u7528fake_unseen_feature\u548clabels\u6765\u8bad\u7ec3\u5206\u7c7b\u5668", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "", "acc", ",", "pred", ",", "output", ",", "_", "=", "self", ".", "val", "(", "self", ".", "test_unseen_feature", "[", "keep_indices", "]", ",", "self", ".", "test_unseen_label", "[", "keep_indices", "]", ",", "self", ".", "unseenclasses", ")", "\n", "\n", "correct_num", "=", "pred", ".", "eq", "(", "mapped_test_label", "[", "keep_indices", "]", ")", ".", "cpu", "(", ")", ".", "sum", "(", ")", "\n", "all_length", "=", "output", ".", "size", "(", "0", ")", "\n", "first_acc", "=", "correct_num", "/", "all_length", "\n", "\n", "if", "first_acc", ">", "acc_fc_hard", ":", "\n", "                ", "acc_fc_hard", "=", "acc", "\n", "fc_hard_pred", "=", "pred", "\n", "real_mean_acc", "=", "first_acc", "\n", "\n", "", "", "fc_all_pred", "=", "torch", ".", "cat", "(", "(", "first_easy_pred", ",", "fc_hard_pred", ")", ",", "0", ")", "\n", "acc_fc_hard", "=", "self", ".", "compute_per_class_acc", "(", "first_hard_label", ",", "fc_hard_pred", ",", "self", ".", "unseenclasses", ".", "size", "(", "0", ")", ")", "\n", "acc_fc", "=", "self", ".", "compute_per_class_acc", "(", "all_easy_hard_label", ",", "fc_all_pred", ",", "self", ".", "unseenclasses", ".", "size", "(", "0", ")", ")", "\n", "all_acc_fc", "=", "self", ".", "compute_every_class_acc", "(", "all_easy_hard_label", ",", "fc_all_pred", ",", "self", ".", "unseenclasses", ".", "size", "(", "0", ")", ")", "\n", "# print('FC Hard Acc: {:.2f}%'.format(acc_fc_hard*100))", "\n", "print", "(", "'FC    Acc: {:.2f}%'", ".", "format", "(", "acc_fc", "*", "100", ")", ")", "\n", "# print([trun(x) for x in list(all_acc_fc)])", "\n", "# cprint('FC Overall Acc: {:.2f}%\\n'.format(acc_fc*100),'red')", "\n", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "return", "acc_fc", "\n", "\n"]], "home.repos.pwc.inspect_result.lijin118_LisGAN.None.classifier2.CLASSIFIER.split_pred": [[204, 228], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "split_pred", "(", "self", ",", "all_pred", ",", "real_label", ")", ":", "\n", "        ", "seen_pred", "=", "None", "\n", "seen_label", "=", "None", "\n", "unseen_pred", "=", "None", "\n", "unseen_label", "=", "None", "\n", "for", "i", "in", "self", ".", "seenclasses", ":", "\n", "            ", "idx", "=", "(", "real_label", "==", "i", ")", "\n", "if", "seen_pred", "is", "None", ":", "\n", "                ", "seen_pred", "=", "all_pred", "[", "idx", "]", "\n", "seen_label", "=", "real_label", "[", "idx", "]", "\n", "", "else", ":", "\n", "                ", "seen_pred", "=", "torch", ".", "cat", "(", "(", "seen_pred", ",", "all_pred", "[", "idx", "]", ")", ",", "0", ")", "\n", "seen_label", "=", "torch", ".", "cat", "(", "(", "seen_label", ",", "real_label", "[", "idx", "]", ")", ")", "\n", "\n", "", "", "for", "i", "in", "self", ".", "unseenclasses", ":", "\n", "            ", "idx", "=", "(", "real_label", "==", "i", ")", "\n", "if", "unseen_pred", "is", "None", ":", "\n", "                ", "unseen_pred", "=", "all_pred", "[", "idx", "]", "\n", "unseen_label", "=", "real_label", "[", "idx", "]", "\n", "", "else", ":", "\n", "                ", "unseen_pred", "=", "torch", ".", "cat", "(", "(", "unseen_pred", ",", "all_pred", "[", "idx", "]", ")", ",", "0", ")", "\n", "unseen_label", "=", "torch", ".", "cat", "(", "(", "unseen_label", ",", "real_label", "[", "idx", "]", ")", ",", "0", ")", "\n", "\n", "", "", "return", "seen_pred", ",", "seen_label", ",", "unseen_pred", ",", "unseen_label", "\n", "\n"]], "home.repos.pwc.inspect_result.lijin118_LisGAN.None.classifier2.CLASSIFIER.fit": [[232, 347], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "range", "classifier2.CLASSIFIER.split_pred", "classifier2.CLASSIFIER.compute_per_class_acc_gzsl", "classifier2.CLASSIFIER.compute_per_class_acc_gzsl", "print", "int", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "classifier2.CLASSIFIER.compute_per_class_acc_gzsl", "classifier2.CLASSIFIER.compute_per_class_acc_gzsl", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "classifier2.CLASSIFIER.pairwise_distances", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "classifier2.CLASSIFIER.split_pred", "classifier2.CLASSIFIER.compute_per_class_acc_gzsl", "classifier2.CLASSIFIER.compute_per_class_acc_gzsl", "print", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "classifier2.CLASSIFIER.split_pred", "classifier2.CLASSIFIER.compute_per_class_acc_gzsl", "classifier2.CLASSIFIER.compute_per_class_acc_gzsl", "print", "classifier2.CLASSIFIER.compute_per_class_acc_gzsl", "sys.stdout.flush", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "range", "classifier2.CLASSIFIER.val_gzsl", "classifier2.CLASSIFIER.val_gzsl", "numpy.asarray", "numpy.asarray", "classifier2.CLASSIFIER.backup_X.size", "range", "classifier2.CLASSIFIER.val_gzsl", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "classifier2.CLASSIFIER.model.zero_grad", "classifier2.CLASSIFIER.next_batch", "classifier2.CLASSIFIER.input.copy_", "classifier2.CLASSIFIER.label.copy_", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "classifier2.CLASSIFIER.model", "classifier2.CLASSIFIER.criterion", "classifier2.CLASSIFIER.backward", "classifier2.CLASSIFIER.optimizer.step", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "list", "classifier2.CLASSIFIER.model.zero_grad", "classifier2.CLASSIFIER.next_batch", "classifier2.CLASSIFIER.input.copy_", "classifier2.CLASSIFIER.label.copy_", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "classifier2.CLASSIFIER.model", "classifier2.CLASSIFIER.criterion", "classifier2.CLASSIFIER.backward", "classifier2.CLASSIFIER.optimizer.step", "map"], "methods", ["home.repos.pwc.inspect_result.lijin118_LisGAN.None.classifier2.CLASSIFIER.split_pred", "home.repos.pwc.inspect_result.lijin118_LisGAN.None.classifier2.CLASSIFIER.compute_per_class_acc_gzsl", "home.repos.pwc.inspect_result.lijin118_LisGAN.None.classifier2.CLASSIFIER.compute_per_class_acc_gzsl", "home.repos.pwc.inspect_result.lijin118_LisGAN.None.classifier2.CLASSIFIER.compute_per_class_acc_gzsl", "home.repos.pwc.inspect_result.lijin118_LisGAN.None.classifier2.CLASSIFIER.compute_per_class_acc_gzsl", "home.repos.pwc.inspect_result.lijin118_LisGAN.None.lisgan.pairwise_distances", "home.repos.pwc.inspect_result.lijin118_LisGAN.None.classifier2.CLASSIFIER.split_pred", "home.repos.pwc.inspect_result.lijin118_LisGAN.None.classifier2.CLASSIFIER.compute_per_class_acc_gzsl", "home.repos.pwc.inspect_result.lijin118_LisGAN.None.classifier2.CLASSIFIER.compute_per_class_acc_gzsl", "home.repos.pwc.inspect_result.lijin118_LisGAN.None.classifier2.CLASSIFIER.split_pred", "home.repos.pwc.inspect_result.lijin118_LisGAN.None.classifier2.CLASSIFIER.compute_per_class_acc_gzsl", "home.repos.pwc.inspect_result.lijin118_LisGAN.None.classifier2.CLASSIFIER.compute_per_class_acc_gzsl", "home.repos.pwc.inspect_result.lijin118_LisGAN.None.classifier2.CLASSIFIER.compute_per_class_acc_gzsl", "home.repos.pwc.inspect_result.lijin118_LisGAN.None.classifier2.CLASSIFIER.val_gzsl", "home.repos.pwc.inspect_result.lijin118_LisGAN.None.classifier2.CLASSIFIER.val_gzsl", "home.repos.pwc.inspect_result.lijin118_LisGAN.None.classifier2.CLASSIFIER.val_gzsl", "home.repos.pwc.inspect_result.lijin118_LisGAN.None.classifier.CLASSIFIER.next_batch", "home.repos.pwc.inspect_result.lijin118_LisGAN.None.classifier.CLASSIFIER.next_batch"], ["", "def", "fit", "(", "self", ")", ":", "\n", "# 3\u4e2alength", "\n", "        ", "test_seen_length", "=", "self", ".", "test_seen_feature", ".", "shape", "[", "0", "]", "#1764", "\n", "test_unseen_length", "=", "self", ".", "test_unseen_feature", ".", "shape", "[", "0", "]", "#2967", "\n", "all_length", "=", "test_seen_length", "+", "test_unseen_length", "\n", "all_test_feature", "=", "torch", ".", "cat", "(", "(", "self", ".", "test_seen_feature", ",", "self", ".", "test_unseen_feature", ")", ",", "0", ")", "\n", "all_test_label", "=", "torch", ".", "cat", "(", "(", "self", ".", "test_seen_label", ",", "self", ".", "test_unseen_label", ")", ",", "0", ")", "\n", "all_classes", "=", "torch", ".", "sort", "(", "torch", ".", "cat", "(", "(", "self", ".", "seenclasses", ",", "self", ".", "unseenclasses", ")", ",", "0", ")", ")", "[", "0", "]", "\n", "first_acc", "=", "0", "\n", "first_all_pred", "=", "None", "\n", "first_all_output", "=", "None", "\n", "\n", "best_H", "=", "0", "\n", "for", "epoch", "in", "range", "(", "self", ".", "nepoch", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "0", ",", "self", ".", "ntrain", ",", "self", ".", "batch_size", ")", ":", "#self.ntrain=22057, self.batch_size=300", "\n", "                ", "self", ".", "model", ".", "zero_grad", "(", ")", "\n", "batch_input", ",", "batch_label", "=", "self", ".", "next_batch", "(", "self", ".", "batch_size", ")", "\n", "self", ".", "input", ".", "copy_", "(", "batch_input", ")", "\n", "self", ".", "label", ".", "copy_", "(", "batch_label", ")", "\n", "\n", "inputv", "=", "Variable", "(", "self", ".", "input", ")", "\n", "labelv", "=", "Variable", "(", "self", ".", "label", ")", "\n", "output", "=", "self", ".", "model", "(", "inputv", ")", "\n", "loss", "=", "self", ".", "criterion", "(", "output", ",", "labelv", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "acc_seen", ",", "pred_seen", ",", "output_seen", "=", "self", ".", "val_gzsl", "(", "self", ".", "test_seen_feature", ",", "self", ".", "test_seen_label", ",", "self", ".", "seenclasses", ")", "\n", "acc_unseen", ",", "pred_unseen", ",", "output_unseen", "=", "self", ".", "val_gzsl", "(", "self", ".", "test_unseen_feature", ",", "self", ".", "test_unseen_label", ",", "self", ".", "unseenclasses", ")", "\n", "H", "=", "2", "*", "acc_seen", "*", "acc_unseen", "/", "(", "acc_seen", "+", "acc_unseen", ")", "\n", "if", "H", ">", "best_H", ":", "\n", "                ", "best_H", "=", "H", "\n", "first_all_pred", "=", "torch", ".", "cat", "(", "(", "pred_seen", ",", "pred_unseen", ")", ",", "0", ")", "\n", "first_all_output", "=", "torch", ".", "cat", "(", "(", "output_seen", ",", "output_unseen", ")", ",", "0", ")", "\n", "\n", "", "", "first_seen_pred", ",", "first_seen_label", ",", "first_unseen_pred", ",", "first_unseen_label", "=", "self", ".", "split_pred", "(", "first_all_pred", ",", "all_test_label", ")", "\n", "#def compute_per_class_acc_gzsl(self, test_label, predicted_label, target_classes):", "\n", "acc_first_seen", "=", "self", ".", "compute_per_class_acc_gzsl", "(", "first_seen_label", ",", "first_seen_pred", ",", "self", ".", "seenclasses", ")", "\n", "acc_first_unseen", "=", "self", ".", "compute_per_class_acc_gzsl", "(", "first_unseen_label", ",", "first_unseen_pred", ",", "self", ".", "unseenclasses", ")", "\n", "acc_first_H", "=", "2", "*", "acc_first_seen", "*", "acc_first_unseen", "/", "(", "acc_first_seen", "+", "acc_first_unseen", ")", "\n", "print", "(", "'First Seen: {:.2f}%, Unseen: {:.2f}%, First H: {:.2f}%'", ".", "format", "(", "acc_first_seen", "*", "100", ",", "acc_first_unseen", "*", "100", ",", "acc_first_H", "*", "100", ")", ")", "\n", "# print('First Unseen Acc: {:.2f}%'.format(acc_first_unseen*100))", "\n", "# print('First Harmonic Acc: {:.2f}%\\n'.format(acc_first_H*100))", "\n", "\n", "easy_length", "=", "int", "(", "all_length", "*", "self", ".", "ratio", ")", "\n", "hard_length", "=", "all_length", "-", "easy_length", "\n", "entropy_value", "=", "torch", ".", "from_numpy", "(", "np", ".", "asarray", "(", "list", "(", "map", "(", "entropy", ",", "first_all_output", ".", "data", ")", ")", ")", ")", "\n", "_", ",", "indices", "=", "torch", ".", "sort", "(", "-", "entropy_value", ")", "\n", "exit_indices", "=", "indices", "[", ":", "easy_length", "]", "\n", "keep_indices", "=", "indices", "[", "easy_length", ":", "]", "\n", "first_easy_pred", "=", "first_all_pred", "[", "exit_indices", "]", "\n", "first_easy_label", "=", "all_test_label", "[", "exit_indices", "]", "\n", "first_hard_pred", "=", "first_all_pred", "[", "keep_indices", "]", "\n", "first_hard_label", "=", "all_test_label", "[", "keep_indices", "]", "\n", "all_easy_hard_label", "=", "torch", ".", "cat", "(", "(", "first_easy_label", ",", "first_hard_label", ")", ",", "0", ")", "\n", "\n", "acc_first_easy", "=", "self", ".", "compute_per_class_acc_gzsl", "(", "first_easy_label", ",", "first_easy_pred", ",", "all_classes", ")", "\n", "acc_first_hard", "=", "self", ".", "compute_per_class_acc_gzsl", "(", "first_hard_label", ",", "first_hard_pred", ",", "all_classes", ")", "\n", "# print('First Easy Acc: {:.2f}%'.format(acc_first_easy*100))", "\n", "# print('First Hard Acc: {:.2f}%'.format(acc_first_hard*100))", "\n", "\n", "self", ".", "index_in_epoch", "=", "0", "\n", "self", ".", "epochs_completed", "=", "0", "\n", "self", ".", "ntrain", "=", "self", ".", "backup_X", ".", "size", "(", "0", ")", "+", "easy_length", "\n", "self", ".", "train_X", "=", "torch", ".", "cat", "(", "(", "self", ".", "backup_X", ",", "all_test_feature", "[", "exit_indices", "]", ")", ",", "0", ")", "\n", "self", ".", "train_Y", "=", "torch", ".", "cat", "(", "(", "self", ".", "backup_Y", ",", "first_easy_pred", ")", ",", "0", ")", "\n", "\n", "sims", "=", "self", ".", "pairwise_distances", "(", "all_test_feature", "[", "keep_indices", "]", ",", "self", ".", "train_X", ")", "\n", "value", ",", "idx", "=", "torch", ".", "min", "(", "sims", ",", "dim", "=", "1", ")", "\n", "knn_hard_pred", "=", "self", ".", "train_Y", "[", "idx", "]", "\n", "knn_all_pred", "=", "torch", ".", "cat", "(", "(", "first_easy_pred", ",", "knn_hard_pred", ")", ",", "0", ")", "\n", "knn_seen_pred", ",", "knn_seen_label", ",", "knn_unseen_pred", ",", "knn_unseen_label", "=", "self", ".", "split_pred", "(", "knn_all_pred", ",", "all_easy_hard_label", ")", "\n", "acc_knn_seen", "=", "self", ".", "compute_per_class_acc_gzsl", "(", "knn_seen_label", ",", "knn_seen_pred", ",", "self", ".", "seenclasses", ")", "\n", "acc_knn_unseen", "=", "self", ".", "compute_per_class_acc_gzsl", "(", "knn_unseen_label", ",", "knn_unseen_pred", ",", "self", ".", "unseenclasses", ")", "\n", "acc_knn_H", "=", "2", "*", "acc_knn_seen", "*", "acc_knn_unseen", "/", "(", "acc_knn_seen", "+", "acc_knn_unseen", ")", "\n", "print", "(", "'1NN   Seen: {:.2f}%, Unseen: {:.2f}%, 1NN H: {:.2f}%'", ".", "format", "(", "acc_knn_seen", "*", "100", ",", "acc_knn_unseen", "*", "100", ",", "acc_knn_H", "*", "100", ")", ")", "\n", "# print('1NN Unseen Acc: {:.2f}%'.format(acc_knn_unseen*100))", "\n", "# print('1NN H Acc: {:.2f}%'.format(acc_knn_H*100))", "\n", "\n", "# acc_knn_hard = self.compute_per_class_acc_gzsl(first_hard_label,knn_hard_pred,all_classes)", "\n", "# print('1NN Hard Acc: {:.2f}%'.format(acc_knn_hard*100))", "\n", "\n", "best_fc_hard_acc", "=", "0", "\n", "fc_hard_pred", "=", "None", "\n", "for", "epoch", "in", "range", "(", "self", ".", "nepoch", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "0", ",", "self", ".", "ntrain", ",", "self", ".", "batch_size", ")", ":", "\n", "                ", "self", ".", "model", ".", "zero_grad", "(", ")", "\n", "batch_input", ",", "batch_label", "=", "self", ".", "next_batch", "(", "self", ".", "batch_size", ")", "\n", "self", ".", "input", ".", "copy_", "(", "batch_input", ")", "\n", "self", ".", "label", ".", "copy_", "(", "batch_label", ")", "\n", "inputv", "=", "Variable", "(", "self", ".", "input", ")", "# fake_feature", "\n", "labelv", "=", "Variable", "(", "self", ".", "label", ")", "# fake_labels", "\n", "output", "=", "self", ".", "model", "(", "inputv", ")", "\n", "loss", "=", "self", ".", "criterion", "(", "output", ",", "labelv", ")", "# \u4f7f\u7528fake_unseen_feature\u548clabels\u6765\u8bad\u7ec3\u5206\u7c7b\u5668", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "acc", ",", "pred", ",", "_", "=", "self", ".", "val_gzsl", "(", "all_test_feature", "[", "keep_indices", "]", ",", "first_hard_label", ",", "all_classes", ")", "\n", "if", "acc", ">", "best_fc_hard_acc", ":", "\n", "                ", "fc_hard_pred", "=", "pred", "\n", "\n", "", "", "fc_all_pred", "=", "torch", ".", "cat", "(", "(", "first_easy_pred", ",", "fc_hard_pred", ")", ",", "0", ")", "\n", "fc_seen_pred", ",", "fc_seen_label", ",", "fc_unseen_pred", ",", "fc_unseen_label", "=", "self", ".", "split_pred", "(", "fc_all_pred", ",", "all_easy_hard_label", ")", "\n", "acc_fc_seen", "=", "self", ".", "compute_per_class_acc_gzsl", "(", "fc_seen_label", ",", "fc_seen_pred", ",", "self", ".", "seenclasses", ")", "\n", "acc_fc_unseen", "=", "self", ".", "compute_per_class_acc_gzsl", "(", "fc_unseen_label", ",", "fc_unseen_pred", ",", "self", ".", "unseenclasses", ")", "\n", "acc_fc_H", "=", "2", "*", "acc_fc_seen", "*", "acc_fc_unseen", "/", "(", "acc_fc_seen", "+", "acc_fc_unseen", ")", "\n", "print", "(", "'FC    Seen: {:.2f}%, Unseen: {:.2f}%, FC H: {:.2f}%'", ".", "format", "(", "acc_fc_seen", "*", "100", ",", "acc_fc_unseen", "*", "100", ",", "acc_fc_H", "*", "100", ")", ")", "\n", "# print('FC Unseen Acc: {:.2f}%'.format(acc_fc_unseen * 100))", "\n", "# print('FC H Acc: {:.2f}%'.format(acc_fc_H * 100))", "\n", "\n", "acc_fc_hard", "=", "self", ".", "compute_per_class_acc_gzsl", "(", "first_hard_label", ",", "fc_hard_pred", ",", "all_classes", ")", "\n", "# print('FC Hard Acc: {:.2f}%\\n'.format(acc_fc_hard*100))", "\n", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "return", "acc_fc_seen", ",", "acc_fc_unseen", ",", "acc_fc_H", "\n", "\n"]], "home.repos.pwc.inspect_result.lijin118_LisGAN.None.classifier2.CLASSIFIER.val": [[348, 368], ["torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "range", "classifier2.CLASSIFIER.compute_per_class_acc", "classifier2.CLASSIFIER.compute_every_class_acc", "test_X.size", "test_label.size", "min", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "util.map_label", "target_classes.size", "util.map_label", "target_classes.size", "classifier2.CLASSIFIER.model", "classifier2.CLASSIFIER.model", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "test_X[].cuda"], "methods", ["home.repos.pwc.inspect_result.lijin118_LisGAN.None.classifier.CLASSIFIER.compute_per_class_acc", "home.repos.pwc.inspect_result.lijin118_LisGAN.None.classifier2.CLASSIFIER.compute_every_class_acc", "home.repos.pwc.inspect_result.lijin118_LisGAN.None.util.map_label", "home.repos.pwc.inspect_result.lijin118_LisGAN.None.util.map_label"], ["", "def", "val", "(", "self", ",", "test_X", ",", "test_label", ",", "target_classes", ",", "second", "=", "False", ")", ":", "\n", "        ", "start", "=", "0", "\n", "ntest", "=", "test_X", ".", "size", "(", ")", "[", "0", "]", "\n", "predicted_label", "=", "torch", ".", "LongTensor", "(", "test_label", ".", "size", "(", ")", ")", "\n", "all_output", "=", "None", "\n", "for", "i", "in", "range", "(", "0", ",", "ntest", ",", "self", ".", "batch_size", ")", ":", "\n", "            ", "end", "=", "min", "(", "ntest", ",", "start", "+", "self", ".", "batch_size", ")", "\n", "if", "self", ".", "cuda", ":", "\n", "                ", "output", "=", "self", ".", "model", "(", "Variable", "(", "test_X", "[", "start", ":", "end", "]", ".", "cuda", "(", ")", ",", "volatile", "=", "True", ")", ")", "\n", "", "else", ":", "\n", "                ", "output", "=", "self", ".", "model", "(", "Variable", "(", "test_X", "[", "start", ":", "end", "]", ",", "volatile", "=", "True", ")", ")", "\n", "", "if", "all_output", "is", "None", ":", "\n", "                ", "all_output", "=", "output", "\n", "", "else", ":", "\n", "                ", "all_output", "=", "torch", ".", "cat", "(", "(", "all_output", ",", "output", ")", ",", "0", ")", "\n", "", "_", ",", "predicted_label", "[", "start", ":", "end", "]", "=", "torch", ".", "max", "(", "output", ".", "data", ",", "1", ")", "\n", "start", "=", "end", "\n", "", "acc", "=", "self", ".", "compute_per_class_acc", "(", "util", ".", "map_label", "(", "test_label", ",", "target_classes", ")", ",", "predicted_label", ",", "target_classes", ".", "size", "(", "0", ")", ")", "\n", "acc_all", "=", "self", ".", "compute_every_class_acc", "(", "util", ".", "map_label", "(", "test_label", ",", "target_classes", ")", ",", "predicted_label", ",", "target_classes", ".", "size", "(", "0", ")", ")", "\n", "return", "acc", ",", "predicted_label", ",", "all_output", ",", "acc_all", "\n", "\n"]], "home.repos.pwc.inspect_result.lijin118_LisGAN.None.classifier2.CLASSIFIER.val_gzsl": [[369, 390], ["torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "range", "classifier2.CLASSIFIER.compute_per_class_acc_gzsl", "test_X.size", "test_label.size", "min", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "classifier2.CLASSIFIER.model", "classifier2.CLASSIFIER.model", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "test_X[].cuda"], "methods", ["home.repos.pwc.inspect_result.lijin118_LisGAN.None.classifier2.CLASSIFIER.compute_per_class_acc_gzsl"], ["", "def", "val_gzsl", "(", "self", ",", "test_X", ",", "test_label", ",", "target_classes", ")", ":", "\n", "        ", "start", "=", "0", "\n", "ntest", "=", "test_X", ".", "size", "(", ")", "[", "0", "]", "\n", "predicted_label", "=", "torch", ".", "LongTensor", "(", "test_label", ".", "size", "(", ")", ")", "\n", "all_output", "=", "None", "\n", "for", "i", "in", "range", "(", "0", ",", "ntest", ",", "self", ".", "batch_size", ")", ":", "\n", "            ", "end", "=", "min", "(", "ntest", ",", "start", "+", "self", ".", "batch_size", ")", "\n", "if", "self", ".", "cuda", ":", "\n", "                ", "output", "=", "self", ".", "model", "(", "Variable", "(", "test_X", "[", "start", ":", "end", "]", ".", "cuda", "(", ")", ",", "volatile", "=", "True", ")", ")", "\n", "", "else", ":", "\n", "                ", "output", "=", "self", ".", "model", "(", "Variable", "(", "test_X", "[", "start", ":", "end", "]", ",", "volatile", "=", "True", ")", ")", "\n", "\n", "", "if", "all_output", "is", "None", ":", "\n", "                ", "all_output", "=", "output", "\n", "", "else", ":", "\n", "                ", "all_output", "=", "torch", ".", "cat", "(", "(", "all_output", ",", "output", ")", ",", "0", ")", "\n", "", "_", ",", "predicted_label", "[", "start", ":", "end", "]", "=", "torch", ".", "max", "(", "output", ".", "data", ",", "1", ")", "\n", "start", "=", "end", "\n", "# acc = self.compute_per_class_acc(util.map_label(test_label, target_classes), predicted_label, target_classes.size(0))", "\n", "", "acc", "=", "self", ".", "compute_per_class_acc_gzsl", "(", "test_label", ",", "predicted_label", ",", "target_classes", ")", "\n", "return", "acc", ",", "predicted_label", ",", "all_output", "\n", "\n"]], "home.repos.pwc.inspect_result.lijin118_LisGAN.None.classifier2.CLASSIFIER.next_batch": [[391, 423], ["torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "next_batch", "(", "self", ",", "batch_size", ")", ":", "\n", "        ", "start", "=", "self", ".", "index_in_epoch", "\n", "# shuffle the data at the first epoch", "\n", "if", "self", ".", "epochs_completed", "==", "0", "and", "start", "==", "0", ":", "\n", "            ", "perm", "=", "torch", ".", "randperm", "(", "self", ".", "ntrain", ")", "\n", "self", ".", "train_X", "=", "self", ".", "train_X", "[", "perm", "]", "\n", "self", ".", "train_Y", "=", "self", ".", "train_Y", "[", "perm", "]", "\n", "# the last batch", "\n", "", "if", "start", "+", "batch_size", ">", "self", ".", "ntrain", ":", "\n", "            ", "self", ".", "epochs_completed", "+=", "1", "\n", "rest_num_examples", "=", "self", ".", "ntrain", "-", "start", "\n", "if", "rest_num_examples", ">", "0", ":", "\n", "                ", "X_rest_part", "=", "self", ".", "train_X", "[", "start", ":", "self", ".", "ntrain", "]", "\n", "Y_rest_part", "=", "self", ".", "train_Y", "[", "start", ":", "self", ".", "ntrain", "]", "\n", "# shuffle the data", "\n", "", "perm", "=", "torch", ".", "randperm", "(", "self", ".", "ntrain", ")", "\n", "self", ".", "train_X", "=", "self", ".", "train_X", "[", "perm", "]", "\n", "self", ".", "train_Y", "=", "self", ".", "train_Y", "[", "perm", "]", "\n", "# start next epoch", "\n", "start", "=", "0", "\n", "self", ".", "index_in_epoch", "=", "batch_size", "-", "rest_num_examples", "\n", "end", "=", "self", ".", "index_in_epoch", "\n", "X_new_part", "=", "self", ".", "train_X", "[", "start", ":", "end", "]", "\n", "Y_new_part", "=", "self", ".", "train_Y", "[", "start", ":", "end", "]", "\n", "if", "rest_num_examples", ">", "0", ":", "\n", "                ", "return", "torch", ".", "cat", "(", "(", "X_rest_part", ",", "X_new_part", ")", ",", "0", ")", ",", "torch", ".", "cat", "(", "(", "Y_rest_part", ",", "Y_new_part", ")", ",", "0", ")", "\n", "", "else", ":", "\n", "                ", "return", "X_new_part", ",", "Y_new_part", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "index_in_epoch", "+=", "batch_size", "\n", "end", "=", "self", ".", "index_in_epoch", "\n", "return", "self", ".", "train_X", "[", "start", ":", "end", "]", ",", "self", ".", "train_Y", "[", "start", ":", "end", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lijin118_LisGAN.None.classifier2.CLASSIFIER.compute_per_class_acc_gzsl": [[424, 434], ["target_classes.size", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["", "", "def", "compute_per_class_acc_gzsl", "(", "self", ",", "test_label", ",", "predicted_label", ",", "target_classes", ")", ":", "\n", "        ", "acc_per_class", "=", "0", "\n", "for", "i", "in", "target_classes", ":", "\n", "            ", "idx", "=", "(", "test_label", "==", "i", ")", "\n", "if", "torch", ".", "sum", "(", "idx", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "", "else", ":", "\n", "                ", "acc_per_class", "+=", "torch", ".", "sum", "(", "test_label", "[", "idx", "]", "==", "predicted_label", "[", "idx", "]", ")", "/", "torch", ".", "sum", "(", "idx", ")", "\n", "", "", "acc_per_class", "/=", "target_classes", ".", "size", "(", "0", ")", "\n", "return", "acc_per_class", "\n", "\n"]], "home.repos.pwc.inspect_result.lijin118_LisGAN.None.classifier2.CLASSIFIER.compute_per_class_acc": [[435, 442], ["torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "range", "torch.FloatTensor().fill_.mean", "torch.FloatTensor().fill_.mean", "torch.FloatTensor().fill_.mean", "torch.FloatTensor().fill_.mean", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["", "def", "compute_per_class_acc", "(", "self", ",", "test_label", ",", "predicted_label", ",", "nclass", ")", ":", "\n", "        ", "acc_per_class", "=", "torch", ".", "FloatTensor", "(", "nclass", ")", ".", "fill_", "(", "0", ")", "\n", "for", "i", "in", "range", "(", "nclass", ")", ":", "\n", "            ", "idx", "=", "(", "test_label", "==", "i", ")", "\n", "if", "torch", ".", "sum", "(", "idx", ")", "!=", "0", ":", "\n", "                ", "acc_per_class", "[", "i", "]", "=", "torch", ".", "sum", "(", "test_label", "[", "idx", "]", "==", "predicted_label", "[", "idx", "]", ")", "/", "torch", ".", "sum", "(", "idx", ")", "\n", "", "", "return", "acc_per_class", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lijin118_LisGAN.None.classifier2.CLASSIFIER.compute_every_class_acc": [[443, 450], ["torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "range", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["", "def", "compute_every_class_acc", "(", "self", ",", "test_label", ",", "predicted_label", ",", "nclass", ")", ":", "\n", "        ", "acc_per_class", "=", "torch", ".", "FloatTensor", "(", "nclass", ")", ".", "fill_", "(", "0", ")", "\n", "for", "i", "in", "range", "(", "nclass", ")", ":", "\n", "            ", "idx", "=", "(", "test_label", "==", "i", ")", "\n", "if", "torch", ".", "sum", "(", "idx", ")", "!=", "0", ":", "\n", "                ", "acc_per_class", "[", "i", "]", "=", "torch", ".", "sum", "(", "test_label", "[", "idx", "]", "==", "predicted_label", "[", "idx", "]", ")", "/", "torch", ".", "sum", "(", "idx", ")", "\n", "", "", "return", "acc_per_class", "\n", "\n"]], "home.repos.pwc.inspect_result.lijin118_LisGAN.None.classifier2.LINEAR_LOGSOFTMAX.__init__": [[452, 456], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LogSoftmax", "torch.LogSoftmax", "torch.LogSoftmax", "torch.LogSoftmax"], "methods", ["home.repos.pwc.inspect_result.lijin118_LisGAN.None.classifier.LINEAR_LOGSOFTMAX.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", ",", "nclass", ")", ":", "\n", "        ", "super", "(", "LINEAR_LOGSOFTMAX", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "input_dim", ",", "nclass", ")", "\n", "self", ".", "logic", "=", "nn", ".", "LogSoftmax", "(", "dim", "=", "1", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lijin118_LisGAN.None.classifier2.LINEAR_LOGSOFTMAX.forward": [[456, 459], ["classifier2.LINEAR_LOGSOFTMAX.logic", "classifier2.LINEAR_LOGSOFTMAX.fc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "o", "=", "self", ".", "logic", "(", "self", ".", "fc", "(", "x", ")", ")", "\n", "return", "o", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lijin118_LisGAN.None.lisgan.GetNowTime": [[70, 72], ["time.strftime", "time.localtime", "time.time"], "function", ["None"], ["def", "GetNowTime", "(", ")", ":", "\n", "    ", "return", "time", ".", "strftime", "(", "\"%Y-%m-%d %H:%M:%S\"", ",", "time", ".", "localtime", "(", "time", ".", "time", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lijin118_LisGAN.None.lisgan.sample": [[131, 136], ["data.next_batch", "input_res.copy_", "input_att.copy_", "input_label.copy_", "util.map_label"], "function", ["home.repos.pwc.inspect_result.lijin118_LisGAN.None.classifier.CLASSIFIER.next_batch", "home.repos.pwc.inspect_result.lijin118_LisGAN.None.util.map_label"], ["", "def", "sample", "(", ")", ":", "\n", "    ", "batch_feature", ",", "batch_label", ",", "batch_att", "=", "data", ".", "next_batch", "(", "opt", ".", "batch_size", ")", "\n", "input_res", ".", "copy_", "(", "batch_feature", ")", "\n", "input_att", ".", "copy_", "(", "batch_att", ")", "\n", "input_label", ".", "copy_", "(", "util", ".", "map_label", "(", "batch_label", ",", "data", ".", "seenclasses", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lijin118_LisGAN.None.lisgan.generate_syn_feature": [[138, 158], ["classes.size", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "range", "syn_att.cuda.cuda", "syn_noise.cuda.cuda", "syn_att.cuda.copy_", "syn_noise.cuda.normal_", "netG", "torch.FloatTensor.narrow().copy_", "torch.LongTensor.narrow().fill_", "iclass_att.repeat", "torch.autograd.Variable", "torch.autograd.Variable", "netG.data.cpu", "torch.FloatTensor.narrow", "torch.LongTensor.narrow"], "function", ["None"], ["", "def", "generate_syn_feature", "(", "netG", ",", "classes", ",", "attribute", ",", "num", ")", ":", "\n", "    ", "nclass", "=", "classes", ".", "size", "(", "0", ")", "\n", "syn_feature", "=", "torch", ".", "FloatTensor", "(", "nclass", "*", "num", ",", "opt", ".", "resSize", ")", "\n", "syn_label", "=", "torch", ".", "LongTensor", "(", "nclass", "*", "num", ")", "\n", "syn_att", "=", "torch", ".", "FloatTensor", "(", "num", ",", "opt", ".", "attSize", ")", "\n", "syn_noise", "=", "torch", ".", "FloatTensor", "(", "num", ",", "opt", ".", "nz", ")", "\n", "if", "opt", ".", "cuda", ":", "\n", "        ", "syn_att", "=", "syn_att", ".", "cuda", "(", ")", "\n", "syn_noise", "=", "syn_noise", ".", "cuda", "(", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "nclass", ")", ":", "\n", "        ", "iclass", "=", "classes", "[", "i", "]", "\n", "iclass_att", "=", "attribute", "[", "iclass", "]", "\n", "syn_att", ".", "copy_", "(", "iclass_att", ".", "repeat", "(", "num", ",", "1", ")", ")", "\n", "syn_noise", ".", "normal_", "(", "0", ",", "1", ")", "\n", "output", "=", "netG", "(", "Variable", "(", "syn_noise", ",", "volatile", "=", "True", ")", ",", "Variable", "(", "syn_att", ",", "volatile", "=", "True", ")", ")", "\n", "syn_feature", ".", "narrow", "(", "0", ",", "i", "*", "num", ",", "num", ")", ".", "copy_", "(", "output", ".", "data", ".", "cpu", "(", ")", ")", "\n", "syn_label", ".", "narrow", "(", "0", ",", "i", "*", "num", ",", "num", ")", ".", "fill_", "(", "iclass", ")", "\n", "\n", "", "return", "syn_feature", ",", "syn_label", "\n", "\n"]], "home.repos.pwc.inspect_result.lijin118_LisGAN.None.lisgan.generate_syn_feature_with_grad": [[159, 177], ["classes.size", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "syn_noise.cuda.normal_", "range", "netG", "syn_att.cuda.cuda", "syn_noise.cuda.cuda", "syn_label.cuda.cuda", "syn_att.cuda.narrow().copy_", "syn_label.cuda.narrow().fill_", "torch.autograd.Variable", "torch.autograd.Variable", "syn_label.cuda.cpu", "iclass_att.repeat", "syn_att.cuda.narrow", "syn_label.cuda.narrow"], "function", ["None"], ["", "def", "generate_syn_feature_with_grad", "(", "netG", ",", "classes", ",", "attribute", ",", "num", ")", ":", "\n", "    ", "nclass", "=", "classes", ".", "size", "(", "0", ")", "\n", "# syn_feature = torch.FloatTensor(nclass*num, opt.resSize)", "\n", "syn_label", "=", "torch", ".", "LongTensor", "(", "nclass", "*", "num", ")", "\n", "syn_att", "=", "torch", ".", "FloatTensor", "(", "nclass", "*", "num", ",", "opt", ".", "attSize", ")", "\n", "syn_noise", "=", "torch", ".", "FloatTensor", "(", "nclass", "*", "num", ",", "opt", ".", "nz", ")", "\n", "if", "opt", ".", "cuda", ":", "\n", "        ", "syn_att", "=", "syn_att", ".", "cuda", "(", ")", "\n", "syn_noise", "=", "syn_noise", ".", "cuda", "(", ")", "\n", "syn_label", "=", "syn_label", ".", "cuda", "(", ")", "\n", "", "syn_noise", ".", "normal_", "(", "0", ",", "1", ")", "\n", "for", "i", "in", "range", "(", "nclass", ")", ":", "\n", "        ", "iclass", "=", "classes", "[", "i", "]", "\n", "iclass_att", "=", "attribute", "[", "iclass", "]", "\n", "syn_att", ".", "narrow", "(", "0", ",", "i", "*", "num", ",", "num", ")", ".", "copy_", "(", "iclass_att", ".", "repeat", "(", "num", ",", "1", ")", ")", "\n", "syn_label", ".", "narrow", "(", "0", ",", "i", "*", "num", ",", "num", ")", ".", "fill_", "(", "iclass", ")", "\n", "", "syn_feature", "=", "netG", "(", "Variable", "(", "syn_noise", ")", ",", "Variable", "(", "syn_att", ")", ")", "\n", "return", "syn_feature", ",", "syn_label", ".", "cpu", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lijin118_LisGAN.None.lisgan.map_label": [[178, 184], ["torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "range", "label.size", "classes.size"], "function", ["None"], ["", "def", "map_label", "(", "label", ",", "classes", ")", ":", "\n", "    ", "mapped_label", "=", "torch", ".", "LongTensor", "(", "label", ".", "size", "(", ")", ")", "\n", "for", "i", "in", "range", "(", "classes", ".", "size", "(", "0", ")", ")", ":", "\n", "        ", "mapped_label", "[", "label", "==", "classes", "[", "i", "]", "]", "=", "i", "\n", "\n", "", "return", "mapped_label", "\n", "\n"]], "home.repos.pwc.inspect_result.lijin118_LisGAN.None.lisgan.pairwise_distances": [[186, 207], ["torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "x_norm.view", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag"], "function", ["None"], ["", "def", "pairwise_distances", "(", "x", ",", "y", "=", "None", ")", ":", "\n", "    ", "'''\n    Input: x is a Nxd matrix\n           y is an optional Mxd matirx\n    Output: dist is a NxM matrix where dist[i,j] is the square norm between x[i,:] and y[j,:]\n            if y is not given then use 'y=x'.\n    i.e. dist[i,j] = ||x[i,:]-y[j,:]||^2\n    '''", "\n", "x_norm", "=", "(", "x", "**", "2", ")", ".", "sum", "(", "1", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "if", "y", "is", "not", "None", ":", "\n", "        ", "y_t", "=", "torch", ".", "transpose", "(", "y", ",", "0", ",", "1", ")", "\n", "y_norm", "=", "(", "y", "**", "2", ")", ".", "sum", "(", "1", ")", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "", "else", ":", "\n", "        ", "y_t", "=", "torch", ".", "transpose", "(", "x", ",", "0", ",", "1", ")", "\n", "y_norm", "=", "x_norm", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "\n", "", "dist", "=", "x_norm", "+", "y_norm", "-", "2.0", "*", "torch", ".", "mm", "(", "x", ",", "y_t", ")", "\n", "# Ensure diagonal is zero if x=y", "\n", "if", "y", "is", "None", ":", "\n", "        ", "dist", "=", "dist", "-", "torch", ".", "diag", "(", "dist", ".", "diag", ")", "\n", "", "return", "torch", ".", "clamp", "(", "dist", ",", "0.0", ",", "np", ".", "inf", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lijin118_LisGAN.None.lisgan.calc_gradient_penalty": [[213, 239], ["torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "alpha.cuda.expand", "torch.autograd.Variable", "netD", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "real_data.size", "alpha.cuda.cuda", "interpolates.cuda.cuda", "torch.autograd.Variable", "netD.size", "ones.cuda.cuda", "torch.grad", "gradients.norm"], "function", ["None"], ["def", "calc_gradient_penalty", "(", "netD", ",", "real_data", ",", "fake_data", ",", "input_att", ")", ":", "\n", "# print real_data.size()", "\n", "    ", "alpha", "=", "torch", ".", "rand", "(", "opt", ".", "batch_size", ",", "1", ")", "\n", "alpha", "=", "alpha", ".", "expand", "(", "real_data", ".", "size", "(", ")", ")", "\n", "if", "opt", ".", "cuda", ":", "\n", "        ", "alpha", "=", "alpha", ".", "cuda", "(", ")", "\n", "\n", "", "interpolates", "=", "alpha", "*", "real_data", "+", "(", "(", "1", "-", "alpha", ")", "*", "fake_data", ")", "\n", "\n", "if", "opt", ".", "cuda", ":", "\n", "        ", "interpolates", "=", "interpolates", ".", "cuda", "(", ")", "\n", "\n", "", "interpolates", "=", "Variable", "(", "interpolates", ",", "requires_grad", "=", "True", ")", "\n", "\n", "disc_interpolates", "=", "netD", "(", "interpolates", ",", "Variable", "(", "input_att", ")", ")", "\n", "\n", "ones", "=", "torch", ".", "ones", "(", "disc_interpolates", ".", "size", "(", ")", ")", "\n", "if", "opt", ".", "cuda", ":", "\n", "        ", "ones", "=", "ones", ".", "cuda", "(", ")", "\n", "\n", "", "gradients", "=", "autograd", ".", "grad", "(", "outputs", "=", "disc_interpolates", ",", "inputs", "=", "interpolates", ",", "\n", "grad_outputs", "=", "ones", ",", "\n", "create_graph", "=", "True", ",", "retain_graph", "=", "True", ",", "only_inputs", "=", "True", ")", "[", "0", "]", "\n", "\n", "gradient_penalty", "=", "(", "(", "gradients", ".", "norm", "(", "2", ",", "dim", "=", "1", ")", "-", "1", ")", "**", "2", ")", ".", "mean", "(", ")", "*", "opt", ".", "lambda1", "\n", "return", "gradient_penalty", "\n", "\n"]], "home.repos.pwc.inspect_result.lijin118_LisGAN.None.model.MLP_AC_D.__init__": [[14, 23], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Sigmoid", "torch.Sigmoid", "model.MLP_AC_D.apply"], "methods", ["home.repos.pwc.inspect_result.lijin118_LisGAN.None.classifier.LINEAR_LOGSOFTMAX.__init__"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", "MLP_AC_D", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "opt", ".", "resSize", ",", "opt", ".", "ndh", ")", "\n", "self", ".", "disc_linear", "=", "nn", ".", "Linear", "(", "opt", ".", "ndh", ",", "1", ")", "\n", "self", ".", "aux_linear", "=", "nn", ".", "Linear", "(", "opt", ".", "ndh", ",", "opt", ".", "attSize", ")", "\n", "self", ".", "lrelu", "=", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "\n", "self", ".", "apply", "(", "weights_init", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lijin118_LisGAN.None.model.MLP_AC_D.forward": [[24, 29], ["model.MLP_AC_D.lrelu", "model.MLP_AC_D.sigmoid", "model.MLP_AC_D.aux_linear", "model.MLP_AC_D.fc1", "model.MLP_AC_D.disc_linear"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "h", "=", "self", ".", "lrelu", "(", "self", ".", "fc1", "(", "x", ")", ")", "\n", "s", "=", "self", ".", "sigmoid", "(", "self", ".", "disc_linear", "(", "h", ")", ")", "\n", "a", "=", "self", ".", "aux_linear", "(", "h", ")", "\n", "return", "s", ",", "a", "\n", "\n"]], "home.repos.pwc.inspect_result.lijin118_LisGAN.None.model.MLP_AC_2HL_D.__init__": [[31, 42], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Sigmoid", "torch.Sigmoid", "torch.Dropout", "torch.Dropout", "model.MLP_AC_2HL_D.apply"], "methods", ["home.repos.pwc.inspect_result.lijin118_LisGAN.None.classifier.LINEAR_LOGSOFTMAX.__init__"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", "MLP_AC_2HL_D", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "opt", ".", "resSize", ",", "opt", ".", "ndh", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "opt", ".", "ndh", ",", "opt", ".", "ndh", ")", "\n", "self", ".", "disc_linear", "=", "nn", ".", "Linear", "(", "opt", ".", "ndh", ",", "1", ")", "\n", "self", ".", "aux_linear", "=", "nn", ".", "Linear", "(", "opt", ".", "ndh", ",", "opt", ".", "attSize", ")", "\n", "self", ".", "lrelu", "=", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "0.5", ")", "\n", "\n", "self", ".", "apply", "(", "weights_init", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lijin118_LisGAN.None.model.MLP_AC_2HL_D.forward": [[43, 49], ["model.MLP_AC_2HL_D.dropout", "model.MLP_AC_2HL_D.dropout", "model.MLP_AC_2HL_D.sigmoid", "model.MLP_AC_2HL_D.aux_linear", "model.MLP_AC_2HL_D.lrelu", "model.MLP_AC_2HL_D.lrelu", "model.MLP_AC_2HL_D.disc_linear", "model.MLP_AC_2HL_D.fc1", "model.MLP_AC_2HL_D.fc2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "h", "=", "self", ".", "dropout", "(", "self", ".", "lrelu", "(", "self", ".", "fc1", "(", "x", ")", ")", ")", "\n", "h", "=", "self", ".", "dropout", "(", "self", ".", "lrelu", "(", "self", ".", "fc2", "(", "h", ")", ")", ")", "\n", "s", "=", "self", ".", "sigmoid", "(", "self", ".", "disc_linear", "(", "h", ")", ")", "\n", "a", "=", "self", ".", "aux_linear", "(", "h", ")", "\n", "return", "s", ",", "a", "\n", "\n"]], "home.repos.pwc.inspect_result.lijin118_LisGAN.None.model.MLP_3HL_CRITIC.__init__": [[51, 59], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "model.MLP_3HL_CRITIC.apply"], "methods", ["home.repos.pwc.inspect_result.lijin118_LisGAN.None.classifier.LINEAR_LOGSOFTMAX.__init__"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", "MLP_3HL_CRITIC", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "opt", ".", "resSize", "+", "opt", ".", "attSize", ",", "opt", ".", "ndh", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "opt", ".", "ndh", ",", "opt", ".", "ndh", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "opt", ".", "ndh", ",", "opt", ".", "ndh", ")", "\n", "self", ".", "fc4", "=", "nn", ".", "Linear", "(", "opt", ".", "ndh", ",", "1", ")", "\n", "self", ".", "lrelu", "=", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "\n", "self", ".", "apply", "(", "weights_init", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lijin118_LisGAN.None.model.MLP_3HL_CRITIC.forward": [[60, 67], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.MLP_3HL_CRITIC.lrelu", "model.MLP_3HL_CRITIC.lrelu", "model.MLP_3HL_CRITIC.lrelu", "model.MLP_3HL_CRITIC.fc4", "model.MLP_3HL_CRITIC.fc1", "model.MLP_3HL_CRITIC.fc2", "model.MLP_3HL_CRITIC.fc3"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "att", ")", ":", "\n", "        ", "h", "=", "torch", ".", "cat", "(", "(", "x", ",", "att", ")", ",", "1", ")", "\n", "h", "=", "self", ".", "lrelu", "(", "self", ".", "fc1", "(", "h", ")", ")", "\n", "h", "=", "self", ".", "lrelu", "(", "self", ".", "fc2", "(", "h", ")", ")", "\n", "h", "=", "self", ".", "lrelu", "(", "self", ".", "fc3", "(", "h", ")", ")", "\n", "h", "=", "self", ".", "fc4", "(", "h", ")", "\n", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.lijin118_LisGAN.None.model.MLP_2HL_CRITIC.__init__": [[69, 76], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "model.MLP_2HL_CRITIC.apply"], "methods", ["home.repos.pwc.inspect_result.lijin118_LisGAN.None.classifier.LINEAR_LOGSOFTMAX.__init__"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", "MLP_2HL_CRITIC", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "opt", ".", "resSize", "+", "opt", ".", "attSize", ",", "opt", ".", "ndh", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "opt", ".", "ndh", ",", "opt", ".", "ndh", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "opt", ".", "ndh", ",", "1", ")", "\n", "self", ".", "lrelu", "=", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "\n", "self", ".", "apply", "(", "weights_init", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lijin118_LisGAN.None.model.MLP_2HL_CRITIC.forward": [[77, 83], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.MLP_2HL_CRITIC.lrelu", "model.MLP_2HL_CRITIC.lrelu", "model.MLP_2HL_CRITIC.fc3", "model.MLP_2HL_CRITIC.fc1", "model.MLP_2HL_CRITIC.fc2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "att", ")", ":", "\n", "        ", "h", "=", "torch", ".", "cat", "(", "(", "x", ",", "att", ")", ",", "1", ")", "\n", "h", "=", "self", ".", "lrelu", "(", "self", ".", "fc1", "(", "h", ")", ")", "\n", "h", "=", "self", ".", "lrelu", "(", "self", ".", "fc2", "(", "h", ")", ")", "\n", "h", "=", "self", ".", "fc3", "(", "h", ")", "\n", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.lijin118_LisGAN.None.model.MLP_2HL_Dropout_CRITIC.__init__": [[85, 93], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Dropout", "torch.Dropout", "model.MLP_2HL_Dropout_CRITIC.apply"], "methods", ["home.repos.pwc.inspect_result.lijin118_LisGAN.None.classifier.LINEAR_LOGSOFTMAX.__init__"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", "MLP_2HL_Dropout_CRITIC", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "opt", ".", "resSize", "+", "opt", ".", "attSize", ",", "opt", ".", "ndh", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "opt", ".", "ndh", ",", "opt", ".", "ndh", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "opt", ".", "ndh", ",", "1", ")", "\n", "self", ".", "lrelu", "=", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "0.5", ")", "\n", "self", ".", "apply", "(", "weights_init", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lijin118_LisGAN.None.model.MLP_2HL_Dropout_CRITIC.forward": [[94, 100], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.MLP_2HL_Dropout_CRITIC.dropout", "model.MLP_2HL_Dropout_CRITIC.dropout", "model.MLP_2HL_Dropout_CRITIC.fc3", "model.MLP_2HL_Dropout_CRITIC.lrelu", "model.MLP_2HL_Dropout_CRITIC.lrelu", "model.MLP_2HL_Dropout_CRITIC.fc1", "model.MLP_2HL_Dropout_CRITIC.fc2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "att", ")", ":", "\n", "        ", "h", "=", "torch", ".", "cat", "(", "(", "x", ",", "att", ")", ",", "1", ")", "\n", "h", "=", "self", ".", "dropout", "(", "self", ".", "lrelu", "(", "self", ".", "fc1", "(", "h", ")", ")", ")", "\n", "h", "=", "self", ".", "dropout", "(", "self", ".", "lrelu", "(", "self", ".", "fc2", "(", "h", ")", ")", ")", "\n", "h", "=", "self", ".", "fc3", "(", "h", ")", "\n", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.lijin118_LisGAN.None.model.MLP_CRITIC.__init__": [[102, 110], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "model.MLP_CRITIC.apply"], "methods", ["home.repos.pwc.inspect_result.lijin118_LisGAN.None.classifier.LINEAR_LOGSOFTMAX.__init__"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", "MLP_CRITIC", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "opt", ".", "resSize", "+", "opt", ".", "attSize", ",", "opt", ".", "ndh", ")", "\n", "#self.fc2 = nn.Linear(opt.ndh, opt.ndh)", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "opt", ".", "ndh", ",", "1", ")", "\n", "self", ".", "lrelu", "=", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "\n", "\n", "self", ".", "apply", "(", "weights_init", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lijin118_LisGAN.None.model.MLP_CRITIC.forward": [[111, 116], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.MLP_CRITIC.lrelu", "model.MLP_CRITIC.fc2", "model.MLP_CRITIC.fc1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "att", ")", ":", "\n", "        ", "h", "=", "torch", ".", "cat", "(", "(", "x", ",", "att", ")", ",", "1", ")", "\n", "h", "=", "self", ".", "lrelu", "(", "self", ".", "fc1", "(", "h", ")", ")", "\n", "h", "=", "self", ".", "fc2", "(", "h", ")", "\n", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.lijin118_LisGAN.None.model.MLP_D.__init__": [[118, 126], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Sigmoid", "torch.Sigmoid", "model.MLP_D.apply"], "methods", ["home.repos.pwc.inspect_result.lijin118_LisGAN.None.classifier.LINEAR_LOGSOFTMAX.__init__"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", "MLP_D", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "opt", ".", "resSize", "+", "opt", ".", "attSize", ",", "opt", ".", "ndh", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "opt", ".", "ndh", ",", "1", ")", "\n", "self", ".", "lrelu", "=", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "\n", "self", ".", "apply", "(", "weights_init", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lijin118_LisGAN.None.model.MLP_D.forward": [[127, 132], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.MLP_D.lrelu", "model.MLP_D.sigmoid", "model.MLP_D.fc1", "model.MLP_D.fc2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "att", ")", ":", "\n", "        ", "h", "=", "torch", ".", "cat", "(", "(", "x", ",", "att", ")", ",", "1", ")", "\n", "h", "=", "self", ".", "lrelu", "(", "self", ".", "fc1", "(", "h", ")", ")", "\n", "h", "=", "self", ".", "sigmoid", "(", "self", ".", "fc2", "(", "h", ")", ")", "\n", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.lijin118_LisGAN.None.model.MLP_2HL_Dropout_G.__init__": [[134, 145], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "model.MLP_2HL_Dropout_G.apply"], "methods", ["home.repos.pwc.inspect_result.lijin118_LisGAN.None.classifier.LINEAR_LOGSOFTMAX.__init__"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", "MLP_2HL_Dropout_G", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "opt", ".", "attSize", "+", "opt", ".", "nz", ",", "opt", ".", "ngh", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "opt", ".", "ngh", ",", "opt", ".", "ngh", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "opt", ".", "ngh", ",", "opt", ".", "resSize", ")", "\n", "self", ".", "lrelu", "=", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "\n", "#self.prelu = nn.PReLU()", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "True", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "0.5", ")", "\n", "\n", "self", ".", "apply", "(", "weights_init", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lijin118_LisGAN.None.model.MLP_2HL_Dropout_G.forward": [[146, 152], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.MLP_2HL_Dropout_G.dropout", "model.MLP_2HL_Dropout_G.dropout", "model.MLP_2HL_Dropout_G.relu", "model.MLP_2HL_Dropout_G.lrelu", "model.MLP_2HL_Dropout_G.lrelu", "model.MLP_2HL_Dropout_G.fc3", "model.MLP_2HL_Dropout_G.fc1", "model.MLP_2HL_Dropout_G.fc2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "noise", ",", "att", ")", ":", "\n", "        ", "h", "=", "torch", ".", "cat", "(", "(", "noise", ",", "att", ")", ",", "1", ")", "\n", "h", "=", "self", ".", "dropout", "(", "self", ".", "lrelu", "(", "self", ".", "fc1", "(", "h", ")", ")", ")", "\n", "h", "=", "self", ".", "dropout", "(", "self", ".", "lrelu", "(", "self", ".", "fc2", "(", "h", ")", ")", ")", "\n", "h", "=", "self", ".", "relu", "(", "self", ".", "fc3", "(", "h", ")", ")", "\n", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.lijin118_LisGAN.None.model.MLP_3HL_G.__init__": [[154, 165], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ReLU", "torch.ReLU", "model.MLP_3HL_G.apply"], "methods", ["home.repos.pwc.inspect_result.lijin118_LisGAN.None.classifier.LINEAR_LOGSOFTMAX.__init__"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", "MLP_3HL_G", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "opt", ".", "attSize", "+", "opt", ".", "nz", ",", "opt", ".", "ngh", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "opt", ".", "ngh", ",", "opt", ".", "ngh", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "opt", ".", "ngh", ",", "opt", ".", "ngh", ")", "\n", "self", ".", "fc4", "=", "nn", ".", "Linear", "(", "opt", ".", "ngh", ",", "opt", ".", "resSize", ")", "\n", "self", ".", "lrelu", "=", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "\n", "#self.prelu = nn.PReLU()", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "True", ")", "\n", "\n", "self", ".", "apply", "(", "weights_init", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lijin118_LisGAN.None.model.MLP_3HL_G.forward": [[166, 173], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.MLP_3HL_G.lrelu", "model.MLP_3HL_G.lrelu", "model.MLP_3HL_G.lrelu", "model.MLP_3HL_G.relu", "model.MLP_3HL_G.fc1", "model.MLP_3HL_G.fc2", "model.MLP_3HL_G.fc3", "model.MLP_3HL_G.fc4"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "noise", ",", "att", ")", ":", "\n", "        ", "h", "=", "torch", ".", "cat", "(", "(", "noise", ",", "att", ")", ",", "1", ")", "\n", "h", "=", "self", ".", "lrelu", "(", "self", ".", "fc1", "(", "h", ")", ")", "\n", "h", "=", "self", ".", "lrelu", "(", "self", ".", "fc2", "(", "h", ")", ")", "\n", "h", "=", "self", ".", "lrelu", "(", "self", ".", "fc3", "(", "h", ")", ")", "\n", "h", "=", "self", ".", "relu", "(", "self", ".", "fc4", "(", "h", ")", ")", "\n", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.lijin118_LisGAN.None.model.MLP_2HL_G.__init__": [[175, 185], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ReLU", "torch.ReLU", "model.MLP_2HL_G.apply"], "methods", ["home.repos.pwc.inspect_result.lijin118_LisGAN.None.classifier.LINEAR_LOGSOFTMAX.__init__"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", "MLP_2HL_G", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "opt", ".", "attSize", "+", "opt", ".", "nz", ",", "opt", ".", "ngh", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "opt", ".", "ngh", ",", "opt", ".", "ngh", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "opt", ".", "ngh", ",", "opt", ".", "resSize", ")", "\n", "self", ".", "lrelu", "=", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "\n", "#self.prelu = nn.PReLU()", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "True", ")", "\n", "\n", "self", ".", "apply", "(", "weights_init", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lijin118_LisGAN.None.model.MLP_2HL_G.forward": [[186, 192], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.MLP_2HL_G.lrelu", "model.MLP_2HL_G.lrelu", "model.MLP_2HL_G.relu", "model.MLP_2HL_G.fc1", "model.MLP_2HL_G.fc2", "model.MLP_2HL_G.fc3"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "noise", ",", "att", ")", ":", "\n", "        ", "h", "=", "torch", ".", "cat", "(", "(", "noise", ",", "att", ")", ",", "1", ")", "\n", "h", "=", "self", ".", "lrelu", "(", "self", ".", "fc1", "(", "h", ")", ")", "\n", "h", "=", "self", ".", "lrelu", "(", "self", ".", "fc2", "(", "h", ")", ")", "\n", "h", "=", "self", ".", "relu", "(", "self", ".", "fc3", "(", "h", ")", ")", "\n", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.lijin118_LisGAN.None.model.MLP_Dropout_G.__init__": [[194, 203], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "model.MLP_Dropout_G.apply"], "methods", ["home.repos.pwc.inspect_result.lijin118_LisGAN.None.classifier.LINEAR_LOGSOFTMAX.__init__"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", "MLP_Dropout_G", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "opt", ".", "attSize", "+", "opt", ".", "nz", ",", "opt", ".", "ngh", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "opt", ".", "ngh", ",", "opt", ".", "resSize", ")", "\n", "self", ".", "lrelu", "=", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "True", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "0.2", ")", "\n", "\n", "self", ".", "apply", "(", "weights_init", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lijin118_LisGAN.None.model.MLP_Dropout_G.forward": [[204, 209], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.MLP_Dropout_G.dropout", "model.MLP_Dropout_G.relu", "model.MLP_Dropout_G.lrelu", "model.MLP_Dropout_G.fc2", "model.MLP_Dropout_G.fc1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "noise", ",", "att", ")", ":", "\n", "        ", "h", "=", "torch", ".", "cat", "(", "(", "noise", ",", "att", ")", ",", "1", ")", "\n", "h", "=", "self", ".", "dropout", "(", "self", ".", "lrelu", "(", "self", ".", "fc1", "(", "h", ")", ")", ")", "\n", "h", "=", "self", ".", "relu", "(", "self", ".", "fc2", "(", "h", ")", ")", "\n", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.lijin118_LisGAN.None.model.MLP_G.__init__": [[211, 220], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ReLU", "torch.ReLU", "model.MLP_G.apply"], "methods", ["home.repos.pwc.inspect_result.lijin118_LisGAN.None.classifier.LINEAR_LOGSOFTMAX.__init__"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", "MLP_G", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "opt", ".", "attSize", "+", "opt", ".", "nz", ",", "opt", ".", "ngh", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "opt", ".", "ngh", ",", "opt", ".", "resSize", ")", "\n", "self", ".", "lrelu", "=", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "\n", "#self.prelu = nn.PReLU()", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "True", ")", "\n", "\n", "self", ".", "apply", "(", "weights_init", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lijin118_LisGAN.None.model.MLP_G.forward": [[221, 226], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.MLP_G.lrelu", "model.MLP_G.relu", "model.MLP_G.fc1", "model.MLP_G.fc2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "noise", ",", "att", ")", ":", "\n", "        ", "h", "=", "torch", ".", "cat", "(", "(", "noise", ",", "att", ")", ",", "1", ")", "\n", "h", "=", "self", ".", "lrelu", "(", "self", ".", "fc1", "(", "h", ")", ")", "\n", "h", "=", "self", ".", "relu", "(", "self", ".", "fc2", "(", "h", ")", ")", "\n", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.lijin118_LisGAN.None.model.MLP_2048_1024_Dropout_G.__init__": [[228, 240], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Dropout", "torch.Dropout", "model.MLP_2048_1024_Dropout_G.apply"], "methods", ["home.repos.pwc.inspect_result.lijin118_LisGAN.None.classifier.LINEAR_LOGSOFTMAX.__init__"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", "MLP_2048_1024_Dropout_G", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "opt", ".", "attSize", "+", "opt", ".", "nz", ",", "opt", ".", "ngh", ")", "\n", "#self.fc2 = nn.Linear(opt.ngh, opt.ngh)", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "opt", ".", "ngh", ",", "1024", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "1024", ",", "opt", ".", "resSize", ")", "\n", "self", ".", "lrelu", "=", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "\n", "#self.prelu = nn.PReLU()", "\n", "#self.relu = nn.ReLU(True)", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "0.5", ")", "\n", "\n", "self", ".", "apply", "(", "weights_init", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lijin118_LisGAN.None.model.MLP_2048_1024_Dropout_G.forward": [[241, 247], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.MLP_2048_1024_Dropout_G.dropout", "model.MLP_2048_1024_Dropout_G.dropout", "model.MLP_2048_1024_Dropout_G.fc3", "model.MLP_2048_1024_Dropout_G.lrelu", "model.MLP_2048_1024_Dropout_G.lrelu", "model.MLP_2048_1024_Dropout_G.fc1", "model.MLP_2048_1024_Dropout_G.fc2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "noise", ",", "att", ")", ":", "\n", "        ", "h", "=", "torch", ".", "cat", "(", "(", "noise", ",", "att", ")", ",", "1", ")", "\n", "h", "=", "self", ".", "dropout", "(", "self", ".", "lrelu", "(", "self", ".", "fc1", "(", "h", ")", ")", ")", "\n", "h", "=", "self", ".", "dropout", "(", "self", ".", "lrelu", "(", "self", ".", "fc2", "(", "h", ")", ")", ")", "\n", "h", "=", "self", ".", "fc3", "(", "h", ")", "\n", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.lijin118_LisGAN.None.model.MLP_SKIP_G.__init__": [[250, 262], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ReLU", "torch.ReLU", "model.MLP_SKIP_G.apply"], "methods", ["home.repos.pwc.inspect_result.lijin118_LisGAN.None.classifier.LINEAR_LOGSOFTMAX.__init__"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", "MLP_SKIP_G", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "opt", ".", "attSize", "+", "opt", ".", "nz", ",", "opt", ".", "ngh", ")", "\n", "#self.fc2 = nn.Linear(opt.ngh, opt.ngh)", "\n", "#self.fc2 = nn.Linear(opt.ngh, 1024)", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "opt", ".", "ngh", ",", "opt", ".", "resSize", ")", "\n", "self", ".", "fc_skip", "=", "nn", ".", "Linear", "(", "opt", ".", "attSize", ",", "opt", ".", "resSize", ")", "\n", "self", ".", "lrelu", "=", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "\n", "#self.prelu = nn.PReLU()", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "True", ")", "\n", "\n", "self", ".", "apply", "(", "weights_init", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lijin118_LisGAN.None.model.MLP_SKIP_G.forward": [[263, 270], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.MLP_SKIP_G.lrelu", "model.MLP_SKIP_G.relu", "model.MLP_SKIP_G.fc_skip", "model.MLP_SKIP_G.fc1", "model.MLP_SKIP_G.fc2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "noise", ",", "att", ")", ":", "\n", "        ", "h", "=", "torch", ".", "cat", "(", "(", "noise", ",", "att", ")", ",", "1", ")", "\n", "h", "=", "self", ".", "lrelu", "(", "self", ".", "fc1", "(", "h", ")", ")", "\n", "#h = self.lrelu(self.fc2(h))", "\n", "h", "=", "self", ".", "relu", "(", "self", ".", "fc2", "(", "h", ")", ")", "\n", "h2", "=", "self", ".", "fc_skip", "(", "att", ")", "\n", "return", "h", "+", "h2", "\n", "\n"]], "home.repos.pwc.inspect_result.lijin118_LisGAN.None.model.MLP_SKIP_D.__init__": [[274, 283], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Sigmoid", "torch.Sigmoid", "model.MLP_SKIP_D.apply"], "methods", ["home.repos.pwc.inspect_result.lijin118_LisGAN.None.classifier.LINEAR_LOGSOFTMAX.__init__"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", "MLP_SKIP_D", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "opt", ".", "resSize", "+", "opt", ".", "attSize", ",", "opt", ".", "ndh", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "opt", ".", "ndh", ",", "1", ")", "\n", "self", ".", "fc_skip", "=", "nn", ".", "Linear", "(", "opt", ".", "attSize", ",", "opt", ".", "ndh", ")", "\n", "self", ".", "lrelu", "=", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "\n", "self", ".", "apply", "(", "weights_init", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lijin118_LisGAN.None.model.MLP_SKIP_D.forward": [[284, 290], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.MLP_SKIP_D.lrelu", "model.MLP_SKIP_D.lrelu", "model.MLP_SKIP_D.sigmoid", "model.MLP_SKIP_D.fc1", "model.MLP_SKIP_D.fc_skip", "model.MLP_SKIP_D.fc2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "att", ")", ":", "\n", "        ", "h", "=", "torch", ".", "cat", "(", "(", "x", ",", "att", ")", ",", "1", ")", "\n", "h", "=", "self", ".", "lrelu", "(", "self", ".", "fc1", "(", "h", ")", ")", "\n", "h2", "=", "self", ".", "lrelu", "(", "self", ".", "fc_skip", "(", "att", ")", ")", "\n", "h", "=", "self", ".", "sigmoid", "(", "self", ".", "fc2", "(", "h", "+", "h2", ")", ")", "\n", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.lijin118_LisGAN.None.model.weights_init": [[4, 12], ["classname.find", "m.weight.data.normal_", "m.bias.data.fill_", "classname.find", "m.weight.data.normal_", "m.bias.data.fill_"], "function", ["None"], ["def", "weights_init", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0.0", ",", "0.02", ")", "\n", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "", "elif", "classname", ".", "find", "(", "'BatchNorm'", ")", "!=", "-", "1", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "1.0", ",", "0.02", ")", "\n", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lijin118_LisGAN.None.util.Logger.__init__": [[26, 30], ["open", "open.close"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "filename", ")", ":", "\n", "        ", "self", ".", "filename", "=", "filename", "\n", "f", "=", "open", "(", "self", ".", "filename", "+", "'.log'", ",", "\"a\"", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lijin118_LisGAN.None.util.Logger.write": [[31, 35], ["open", "open.write", "open.close"], "methods", ["home.repos.pwc.inspect_result.lijin118_LisGAN.None.util.Logger.write"], ["", "def", "write", "(", "self", ",", "message", ")", ":", "\n", "        ", "f", "=", "open", "(", "self", ".", "filename", "+", "'.log'", ",", "\"a\"", ")", "\n", "f", ".", "write", "(", "message", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lijin118_LisGAN.None.util.DATA_LOADER.__init__": [[37, 67], ["numpy.zeros", "range", "torch.zeros", "range", "numpy.mean", "util.DATA_LOADER.read_matimagenet", "util.DATA_LOADER.read_matdataset", "util.DATA_LOADER.train_feature[].numpy", "sample_idx.numel", "torch.zeros", "sklearn.cluster.KMeans().fit_predict", "range", "torch.from_numpy", "sklearn.cluster.KMeans", "real_sample_cls[].mean().cpu().numpy", "real_sample_cls[].mean().cpu", "torch.nonzero", "real_sample_cls[].mean", "torch.nonzero", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.lijin118_LisGAN.None.util.DATA_LOADER.read_matimagenet", "home.repos.pwc.inspect_result.lijin118_LisGAN.None.util.DATA_LOADER.read_matdataset"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "if", "opt", ".", "matdataset", ":", "\n", "            ", "if", "opt", ".", "dataset", "==", "'imageNet1K'", ":", "\n", "                ", "self", ".", "read_matimagenet", "(", "opt", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "read_matdataset", "(", "opt", ")", "\n", "", "", "self", ".", "index_in_epoch", "=", "0", "\n", "self", ".", "epochs_completed", "=", "0", "\n", "\n", "self", ".", "feature_dim", "=", "self", ".", "train_feature", ".", "shape", "[", "1", "]", "\n", "self", ".", "att_dim", "=", "self", ".", "attribute", ".", "shape", "[", "1", "]", "\n", "self", ".", "text_dim", "=", "self", ".", "att_dim", "\n", "self", ".", "train_cls_num", "=", "self", ".", "seenclasses", ".", "shape", "[", "0", "]", "\n", "self", ".", "test_cls_num", "=", "self", ".", "unseenclasses", ".", "shape", "[", "0", "]", "\n", "self", ".", "tr_cls_centroid", "=", "np", ".", "zeros", "(", "[", "self", ".", "seenclasses", ".", "shape", "[", "0", "]", ",", "self", ".", "feature_dim", "]", ",", "np", ".", "float32", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "seenclasses", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "self", ".", "tr_cls_centroid", "[", "i", "]", "=", "np", ".", "mean", "(", "self", ".", "train_feature", "[", "torch", ".", "nonzero", "(", "self", ".", "train_mapped_label", "==", "i", ")", ",", ":", "]", ".", "numpy", "(", ")", ",", "axis", "=", "0", ")", "\n", "\n", "", "n_cluster", "=", "opt", ".", "n_clusters", "\n", "real_proto", "=", "torch", ".", "zeros", "(", "n_cluster", "*", "self", ".", "train_cls_num", ",", "self", ".", "feature_dim", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "train_cls_num", ")", ":", "\n", "            ", "sample_idx", "=", "(", "self", ".", "train_mapped_label", "==", "i", ")", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "\n", "if", "sample_idx", ".", "numel", "(", ")", "==", "0", ":", "\n", "                ", "real_proto", "[", "n_cluster", "*", "i", ":", "n_cluster", "*", "(", "i", "+", "1", ")", "]", "=", "torch", ".", "zeros", "(", "n_cluster", ",", "self", ".", "feature_dim", ")", "\n", "", "else", ":", "\n", "                ", "real_sample_cls", "=", "self", ".", "train_feature", "[", "sample_idx", ",", ":", "]", "\n", "y_pred", "=", "KMeans", "(", "n_clusters", "=", "n_cluster", ",", "random_state", "=", "3", ")", ".", "fit_predict", "(", "real_sample_cls", ")", "\n", "for", "j", "in", "range", "(", "n_cluster", ")", ":", "\n", "                    ", "real_proto", "[", "n_cluster", "*", "i", "+", "j", "]", "=", "torch", ".", "from_numpy", "(", "real_sample_cls", "[", "torch", ".", "nonzero", "(", "torch", ".", "from_numpy", "(", "y_pred", ")", "==", "j", ")", ",", ":", "]", ".", "mean", "(", "dim", "=", "0", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "", "", "self", ".", "real_proto", "=", "real_proto", "\n", "\n"]], "home.repos.pwc.inspect_result.lijin118_LisGAN.None.util.DATA_LOADER.read_h5dataset": [[70, 102], ["h5py.File", "h5py.File.close", "h5py.File", "h5py.File.close", "numpy.unique", "numpy.unique", "util.DATA_LOADER.seenclasses.size"], "methods", ["None"], ["", "def", "read_h5dataset", "(", "self", ",", "opt", ")", ":", "\n", "# read image feature", "\n", "        ", "fid", "=", "h5py", ".", "File", "(", "opt", ".", "dataroot", "+", "\"/\"", "+", "opt", ".", "dataset", "+", "\"/\"", "+", "opt", ".", "image_embedding", "+", "\".hdf5\"", ",", "'r'", ")", "\n", "feature", "=", "fid", "[", "'feature'", "]", "[", "(", ")", "]", "\n", "label", "=", "fid", "[", "'label'", "]", "[", "(", ")", "]", "\n", "trainval_loc", "=", "fid", "[", "'trainval_loc'", "]", "[", "(", ")", "]", "\n", "train_loc", "=", "fid", "[", "'train_loc'", "]", "[", "(", ")", "]", "\n", "val_unseen_loc", "=", "fid", "[", "'val_unseen_loc'", "]", "[", "(", ")", "]", "\n", "test_seen_loc", "=", "fid", "[", "'test_seen_loc'", "]", "[", "(", ")", "]", "\n", "test_unseen_loc", "=", "fid", "[", "'test_unseen_loc'", "]", "[", "(", ")", "]", "\n", "fid", ".", "close", "(", ")", "\n", "# read attributes", "\n", "fid", "=", "h5py", ".", "File", "(", "opt", ".", "dataroot", "+", "\"/\"", "+", "opt", ".", "dataset", "+", "\"/\"", "+", "opt", ".", "class_embedding", "+", "\".hdf5\"", ",", "'r'", ")", "\n", "self", ".", "attribute", "=", "fid", "[", "'attribute'", "]", "[", "(", ")", "]", "\n", "fid", ".", "close", "(", ")", "\n", "\n", "if", "not", "opt", ".", "validation", ":", "\n", "            ", "self", ".", "train_feature", "=", "feature", "[", "trainval_loc", "]", "\n", "self", ".", "train_label", "=", "label", "[", "trainval_loc", "]", "\n", "self", ".", "test_unseen_feature", "=", "feature", "[", "test_unseen_loc", "]", "\n", "self", ".", "test_unseen_label", "=", "label", "[", "test_unseen_loc", "]", "\n", "self", ".", "test_seen_feature", "=", "feature", "[", "test_seen_loc", "]", "\n", "self", ".", "test_seen_label", "=", "label", "[", "test_seen_loc", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "train_feature", "=", "feature", "[", "train_loc", "]", "\n", "self", ".", "train_label", "=", "label", "[", "train_loc", "]", "\n", "self", ".", "test_unseen_feature", "=", "feature", "[", "val_unseen_loc", "]", "\n", "self", ".", "test_unseen_label", "=", "label", "[", "val_unseen_loc", "]", "\n", "\n", "", "self", ".", "seenclasses", "=", "np", ".", "unique", "(", "self", ".", "train_label", ")", "\n", "self", ".", "unseenclasses", "=", "np", ".", "unique", "(", "self", ".", "test_unseen_label", ")", "\n", "self", ".", "nclasses", "=", "self", ".", "seenclasses", ".", "size", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lijin118_LisGAN.None.util.DATA_LOADER.read_matimagenet": [[103, 140], ["scipy.loadmat", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().long", "torch.from_numpy().float", "torch.from_numpy().long", "torch.from_numpy().float", "torch.from_numpy().long", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "util.DATA_LOADER.seenclasses.size", "util.DATA_LOADER.unseenclasses.size", "print", "sklearn.preprocessing.MinMaxScaler", "h5py.File", "sklearn.preprocessing.MinMaxScaler.fit_transform", "sklearn.preprocessing.MinMaxScaler.transform", "h5py.File.close", "h5py.File", "sklearn.preprocessing.MinMaxScaler.transform", "h5py.File.close", "h5py.File", "numpy.array", "numpy.array", "h5py.File.close", "util.DATA_LOADER.train_feature.size", "numpy.unique", "numpy.unique", "numpy.unique", "numpy.array", "numpy.array().astype().squeeze", "numpy.array", "numpy.array().astype().squeeze", "numpy.array", "numpy.array().astype().squeeze", "numpy.array().astype().squeeze", "numpy.array().astype().squeeze", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "util.DATA_LOADER.train_label.numpy", "util.DATA_LOADER.test_unseen_label.numpy", "util.DATA_LOADER.train_label.numpy", "numpy.array().astype", "numpy.array().astype", "numpy.array().astype", "numpy.array().astype", "numpy.array().astype", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "methods", ["None"], ["", "def", "read_matimagenet", "(", "self", ",", "opt", ")", ":", "\n", "        ", "if", "opt", ".", "preprocessing", ":", "\n", "            ", "print", "(", "'MinMaxScaler...'", ")", "\n", "scaler", "=", "preprocessing", ".", "MinMaxScaler", "(", ")", "\n", "matcontent", "=", "h5py", ".", "File", "(", "opt", ".", "dataroot", "+", "\"/\"", "+", "opt", ".", "dataset", "+", "\"/\"", "+", "opt", ".", "image_embedding", "+", "\".mat\"", ",", "'r'", ")", "\n", "feature", "=", "scaler", ".", "fit_transform", "(", "np", ".", "array", "(", "matcontent", "[", "'features'", "]", ")", ")", "\n", "label", "=", "np", ".", "array", "(", "matcontent", "[", "'labels'", "]", ")", ".", "astype", "(", "int", ")", ".", "squeeze", "(", ")", "-", "1", "\n", "feature_val", "=", "scaler", ".", "transform", "(", "np", ".", "array", "(", "matcontent", "[", "'features_val'", "]", ")", ")", "\n", "label_val", "=", "np", ".", "array", "(", "matcontent", "[", "'labels_val'", "]", ")", ".", "astype", "(", "int", ")", ".", "squeeze", "(", ")", "-", "1", "\n", "matcontent", ".", "close", "(", ")", "\n", "matcontent", "=", "h5py", ".", "File", "(", "'/BS/xian/work/data/imageNet21K/extract_res/res101_1crop_2hops_t.mat'", ",", "'r'", ")", "\n", "feature_unseen", "=", "scaler", ".", "transform", "(", "np", ".", "array", "(", "matcontent", "[", "'features'", "]", ")", ")", "\n", "label_unseen", "=", "np", ".", "array", "(", "matcontent", "[", "'labels'", "]", ")", ".", "astype", "(", "int", ")", ".", "squeeze", "(", ")", "-", "1", "\n", "matcontent", ".", "close", "(", ")", "\n", "", "else", ":", "\n", "            ", "matcontent", "=", "h5py", ".", "File", "(", "opt", ".", "dataroot", "+", "\"/\"", "+", "opt", ".", "dataset", "+", "\"/\"", "+", "opt", ".", "image_embedding", "+", "\".mat\"", ",", "'r'", ")", "\n", "feature", "=", "np", ".", "array", "(", "matcontent", "[", "'features'", "]", ")", "\n", "label", "=", "np", ".", "array", "(", "matcontent", "[", "'labels'", "]", ")", ".", "astype", "(", "int", ")", ".", "squeeze", "(", ")", "-", "1", "\n", "feature_val", "=", "np", ".", "array", "(", "matcontent", "[", "'features_val'", "]", ")", "\n", "label_val", "=", "np", ".", "array", "(", "matcontent", "[", "'labels_val'", "]", ")", ".", "astype", "(", "int", ")", ".", "squeeze", "(", ")", "-", "1", "\n", "matcontent", ".", "close", "(", ")", "\n", "\n", "\n", "", "matcontent", "=", "sio", ".", "loadmat", "(", "opt", ".", "dataroot", "+", "\"/\"", "+", "opt", ".", "dataset", "+", "\"/\"", "+", "opt", ".", "class_embedding", "+", "\".mat\"", ")", "\n", "self", ".", "attribute", "=", "torch", ".", "from_numpy", "(", "matcontent", "[", "'w2v'", "]", ")", ".", "float", "(", ")", "\n", "self", ".", "train_feature", "=", "torch", ".", "from_numpy", "(", "feature", ")", ".", "float", "(", ")", "\n", "self", ".", "train_label", "=", "torch", ".", "from_numpy", "(", "label", ")", ".", "long", "(", ")", "\n", "self", ".", "test_seen_feature", "=", "torch", ".", "from_numpy", "(", "feature_val", ")", ".", "float", "(", ")", "\n", "self", ".", "test_seen_label", "=", "torch", ".", "from_numpy", "(", "label_val", ")", ".", "long", "(", ")", "\n", "self", ".", "test_unseen_feature", "=", "torch", ".", "from_numpy", "(", "feature_unseen", ")", ".", "float", "(", ")", "\n", "self", ".", "test_unseen_label", "=", "torch", ".", "from_numpy", "(", "label_unseen", ")", ".", "long", "(", ")", "\n", "self", ".", "ntrain", "=", "self", ".", "train_feature", ".", "size", "(", ")", "[", "0", "]", "\n", "self", ".", "seenclasses", "=", "torch", ".", "from_numpy", "(", "np", ".", "unique", "(", "self", ".", "train_label", ".", "numpy", "(", ")", ")", ")", "\n", "self", ".", "unseenclasses", "=", "torch", ".", "from_numpy", "(", "np", ".", "unique", "(", "self", ".", "test_unseen_label", ".", "numpy", "(", ")", ")", ")", "\n", "self", ".", "train_class", "=", "torch", ".", "from_numpy", "(", "np", ".", "unique", "(", "self", ".", "train_label", ".", "numpy", "(", ")", ")", ")", "\n", "self", ".", "ntrain_class", "=", "self", ".", "seenclasses", ".", "size", "(", "0", ")", "\n", "self", ".", "ntest_class", "=", "self", ".", "unseenclasses", ".", "size", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lijin118_LisGAN.None.util.DATA_LOADER.read_matdataset": [[142, 201], ["scipy.loadmat", "scipy.loadmat", "torch.from_numpy().float", "torch.from_numpy", "torch.from_numpy", "util.DATA_LOADER.seenclasses.size", "util.DATA_LOADER.unseenclasses.size", "util.DATA_LOADER.seenclasses.clone", "torch.arange().long", "util.map_label", "util.DATA_LOADER.attribute[].numpy", "util.DATA_LOADER.attribute[].numpy", "matcontent[].astype().squeeze", "matcontent[].squeeze", "matcontent[].squeeze", "matcontent[].squeeze", "matcontent[].squeeze", "matcontent[].squeeze", "torch.from_numpy().float", "torch.from_numpy().long", "torch.from_numpy().float", "torch.from_numpy().long", "numpy.unique", "numpy.unique", "util.DATA_LOADER.train_feature.size", "torch.from_numpy", "sklearn.preprocessing.MinMaxScaler.fit_transform", "sklearn.preprocessing.MinMaxScaler.transform", "sklearn.preprocessing.MinMaxScaler.transform", "torch.from_numpy().float", "util.DATA_LOADER.train_feature.max", "util.DATA_LOADER.train_feature.mul_", "torch.from_numpy().long", "torch.from_numpy().float", "util.DATA_LOADER.test_unseen_feature.mul_", "torch.from_numpy().long", "torch.from_numpy().float", "util.DATA_LOADER.test_seen_feature.mul_", "torch.from_numpy().long", "torch.from_numpy().float", "torch.from_numpy().long", "torch.from_numpy().float", "torch.from_numpy().long", "torch.from_numpy().float", "torch.from_numpy().long", "util.DATA_LOADER.train_label.numpy", "util.DATA_LOADER.test_unseen_label.numpy", "torch.arange", "matcontent[].astype", "print", "sklearn.preprocessing.StandardScaler", "sklearn.preprocessing.MinMaxScaler", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.lijin118_LisGAN.None.util.map_label"], ["", "def", "read_matdataset", "(", "self", ",", "opt", ")", ":", "\n", "        ", "matcontent", "=", "sio", ".", "loadmat", "(", "opt", ".", "dataroot", "+", "\"/\"", "+", "opt", ".", "dataset", "+", "\"/\"", "+", "opt", ".", "image_embedding", "+", "\".mat\"", ")", "\n", "feature", "=", "matcontent", "[", "'features'", "]", ".", "T", "\n", "label", "=", "matcontent", "[", "'labels'", "]", ".", "astype", "(", "int", ")", ".", "squeeze", "(", ")", "-", "1", "\n", "matcontent", "=", "sio", ".", "loadmat", "(", "opt", ".", "dataroot", "+", "\"/\"", "+", "opt", ".", "dataset", "+", "\"/\"", "+", "opt", ".", "class_embedding", "+", "\"_splits.mat\"", ")", "\n", "# numpy array index starts from 0, matlab starts from 1", "\n", "trainval_loc", "=", "matcontent", "[", "'trainval_loc'", "]", ".", "squeeze", "(", ")", "-", "1", "\n", "train_loc", "=", "matcontent", "[", "'train_loc'", "]", ".", "squeeze", "(", ")", "-", "1", "\n", "val_unseen_loc", "=", "matcontent", "[", "'val_loc'", "]", ".", "squeeze", "(", ")", "-", "1", "\n", "test_seen_loc", "=", "matcontent", "[", "'test_seen_loc'", "]", ".", "squeeze", "(", ")", "-", "1", "\n", "test_unseen_loc", "=", "matcontent", "[", "'test_unseen_loc'", "]", ".", "squeeze", "(", ")", "-", "1", "\n", "\n", "self", ".", "attribute", "=", "torch", ".", "from_numpy", "(", "matcontent", "[", "'att'", "]", ".", "T", ")", ".", "float", "(", ")", "\n", "if", "not", "opt", ".", "validation", ":", "\n", "            ", "if", "opt", ".", "preprocessing", ":", "\n", "                ", "if", "opt", ".", "standardization", ":", "\n", "                    ", "print", "(", "'standardization...'", ")", "\n", "scaler", "=", "preprocessing", ".", "StandardScaler", "(", ")", "\n", "", "else", ":", "\n", "                    ", "scaler", "=", "preprocessing", ".", "MinMaxScaler", "(", ")", "\n", "\n", "", "_train_feature", "=", "scaler", ".", "fit_transform", "(", "feature", "[", "trainval_loc", "]", ")", "\n", "_test_seen_feature", "=", "scaler", ".", "transform", "(", "feature", "[", "test_seen_loc", "]", ")", "\n", "_test_unseen_feature", "=", "scaler", ".", "transform", "(", "feature", "[", "test_unseen_loc", "]", ")", "\n", "self", ".", "train_feature", "=", "torch", ".", "from_numpy", "(", "_train_feature", ")", ".", "float", "(", ")", "\n", "mx", "=", "self", ".", "train_feature", ".", "max", "(", ")", "\n", "self", ".", "train_feature", ".", "mul_", "(", "1", "/", "mx", ")", "\n", "self", ".", "train_label", "=", "torch", ".", "from_numpy", "(", "label", "[", "trainval_loc", "]", ")", ".", "long", "(", ")", "\n", "self", ".", "test_unseen_feature", "=", "torch", ".", "from_numpy", "(", "_test_unseen_feature", ")", ".", "float", "(", ")", "\n", "self", ".", "test_unseen_feature", ".", "mul_", "(", "1", "/", "mx", ")", "\n", "self", ".", "test_unseen_label", "=", "torch", ".", "from_numpy", "(", "label", "[", "test_unseen_loc", "]", ")", ".", "long", "(", ")", "\n", "self", ".", "test_seen_feature", "=", "torch", ".", "from_numpy", "(", "_test_seen_feature", ")", ".", "float", "(", ")", "\n", "self", ".", "test_seen_feature", ".", "mul_", "(", "1", "/", "mx", ")", "\n", "self", ".", "test_seen_label", "=", "torch", ".", "from_numpy", "(", "label", "[", "test_seen_loc", "]", ")", ".", "long", "(", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "train_feature", "=", "torch", ".", "from_numpy", "(", "feature", "[", "trainval_loc", "]", ")", ".", "float", "(", ")", "\n", "self", ".", "train_label", "=", "torch", ".", "from_numpy", "(", "label", "[", "trainval_loc", "]", ")", ".", "long", "(", ")", "\n", "self", ".", "test_unseen_feature", "=", "torch", ".", "from_numpy", "(", "feature", "[", "test_unseen_loc", "]", ")", ".", "float", "(", ")", "\n", "self", ".", "test_unseen_label", "=", "torch", ".", "from_numpy", "(", "label", "[", "test_unseen_loc", "]", ")", ".", "long", "(", ")", "\n", "self", ".", "test_seen_feature", "=", "torch", ".", "from_numpy", "(", "feature", "[", "test_seen_loc", "]", ")", ".", "float", "(", ")", "\n", "self", ".", "test_seen_label", "=", "torch", ".", "from_numpy", "(", "label", "[", "test_seen_loc", "]", ")", ".", "long", "(", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "train_feature", "=", "torch", ".", "from_numpy", "(", "feature", "[", "train_loc", "]", ")", ".", "float", "(", ")", "\n", "self", ".", "train_label", "=", "torch", ".", "from_numpy", "(", "label", "[", "train_loc", "]", ")", ".", "long", "(", ")", "\n", "self", ".", "test_unseen_feature", "=", "torch", ".", "from_numpy", "(", "feature", "[", "val_unseen_loc", "]", ")", ".", "float", "(", ")", "\n", "self", ".", "test_unseen_label", "=", "torch", ".", "from_numpy", "(", "label", "[", "val_unseen_loc", "]", ")", ".", "long", "(", ")", "\n", "\n", "", "self", ".", "seenclasses", "=", "torch", ".", "from_numpy", "(", "np", ".", "unique", "(", "self", ".", "train_label", ".", "numpy", "(", ")", ")", ")", "\n", "self", ".", "unseenclasses", "=", "torch", ".", "from_numpy", "(", "np", ".", "unique", "(", "self", ".", "test_unseen_label", ".", "numpy", "(", ")", ")", ")", "\n", "self", ".", "ntrain", "=", "self", ".", "train_feature", ".", "size", "(", ")", "[", "0", "]", "\n", "self", ".", "ntrain_class", "=", "self", ".", "seenclasses", ".", "size", "(", "0", ")", "\n", "self", ".", "ntest_class", "=", "self", ".", "unseenclasses", ".", "size", "(", "0", ")", "\n", "self", ".", "train_class", "=", "self", ".", "seenclasses", ".", "clone", "(", ")", "\n", "self", ".", "allclasses", "=", "torch", ".", "arange", "(", "0", ",", "self", ".", "ntrain_class", "+", "self", ".", "ntest_class", ")", ".", "long", "(", ")", "\n", "self", ".", "train_mapped_label", "=", "map_label", "(", "self", ".", "train_label", ",", "self", ".", "seenclasses", ")", "\n", "self", ".", "train_att", "=", "self", ".", "attribute", "[", "self", ".", "seenclasses", "]", ".", "numpy", "(", ")", "\n", "self", ".", "test_att", "=", "self", ".", "attribute", "[", "self", ".", "unseenclasses", "]", ".", "numpy", "(", ")", "\n", "self", ".", "train_cls_num", "=", "self", ".", "ntrain_class", "\n", "self", ".", "test_cls_num", "=", "self", ".", "ntest_class", "\n", "\n"]], "home.repos.pwc.inspect_result.lijin118_LisGAN.None.util.DATA_LOADER.next_batch_one_class": [[202, 216], ["util.DATA_LOADER.train_label.eq().nonzero().squeeze", "torch.randperm", "torch.randperm", "util.DATA_LOADER.size", "util.DATA_LOADER.train_label.eq().nonzero", "util.DATA_LOADER.train_label.eq"], "methods", ["None"], ["", "def", "next_batch_one_class", "(", "self", ",", "batch_size", ")", ":", "\n", "        ", "if", "self", ".", "index_in_epoch", "==", "self", ".", "ntrain_class", ":", "\n", "            ", "self", ".", "index_in_epoch", "=", "0", "\n", "perm", "=", "torch", ".", "randperm", "(", "self", ".", "ntrain_class", ")", "\n", "self", ".", "train_class", "[", "perm", "]", "=", "self", ".", "train_class", "[", "perm", "]", "\n", "\n", "", "iclass", "=", "self", ".", "train_class", "[", "self", ".", "index_in_epoch", "]", "\n", "idx", "=", "self", ".", "train_label", ".", "eq", "(", "iclass", ")", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "\n", "perm", "=", "torch", ".", "randperm", "(", "idx", ".", "size", "(", "0", ")", ")", "\n", "idx", "=", "idx", "[", "perm", "]", "\n", "iclass_feature", "=", "self", ".", "train_feature", "[", "idx", "]", "\n", "iclass_label", "=", "self", ".", "train_label", "[", "idx", "]", "\n", "self", ".", "index_in_epoch", "+=", "1", "\n", "return", "iclass_feature", "[", "0", ":", "batch_size", "]", ",", "iclass_label", "[", "0", ":", "batch_size", "]", ",", "self", ".", "attribute", "[", "iclass_label", "[", "0", ":", "batch_size", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lijin118_LisGAN.None.util.DATA_LOADER.next_batch": [[217, 223], ["torch.randperm"], "methods", ["None"], ["", "def", "next_batch", "(", "self", ",", "batch_size", ")", ":", "\n", "        ", "idx", "=", "torch", ".", "randperm", "(", "self", ".", "ntrain", ")", "[", "0", ":", "batch_size", "]", "\n", "batch_feature", "=", "self", ".", "train_feature", "[", "idx", "]", "\n", "batch_label", "=", "self", ".", "train_label", "[", "idx", "]", "\n", "batch_att", "=", "self", ".", "attribute", "[", "batch_label", "]", "\n", "return", "batch_feature", ",", "batch_label", ",", "batch_att", "\n", "\n"]], "home.repos.pwc.inspect_result.lijin118_LisGAN.None.util.DATA_LOADER.next_batch_uniform_class": [[225, 243], ["torch.LongTensor", "range", "torch.FloatTensor", "torch.LongTensor", "torch.FloatTensor", "range", "util.DATA_LOADER.train_feature.size", "util.DATA_LOADER.attribute.size", "util.DATA_LOADER.train_label.eq().nonzero().squeeze", "torch.randperm", "torch.randperm", "util.DATA_LOADER.train_label.eq().nonzero", "util.DATA_LOADER.size", "util.DATA_LOADER.train_label.eq"], "methods", ["None"], ["", "def", "next_batch_uniform_class", "(", "self", ",", "batch_size", ")", ":", "\n", "        ", "batch_class", "=", "torch", ".", "LongTensor", "(", "batch_size", ")", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "idx", "=", "torch", ".", "randperm", "(", "self", ".", "ntrain_class", ")", "[", "0", "]", "\n", "batch_class", "[", "i", "]", "=", "self", ".", "train_class", "[", "idx", "]", "\n", "\n", "", "batch_feature", "=", "torch", ".", "FloatTensor", "(", "batch_size", ",", "self", ".", "train_feature", ".", "size", "(", "1", ")", ")", "\n", "batch_label", "=", "torch", ".", "LongTensor", "(", "batch_size", ")", "\n", "batch_att", "=", "torch", ".", "FloatTensor", "(", "batch_size", ",", "self", ".", "attribute", ".", "size", "(", "1", ")", ")", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "iclass", "=", "batch_class", "[", "i", "]", "\n", "idx_iclass", "=", "self", ".", "train_label", ".", "eq", "(", "iclass", ")", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "\n", "idx_in_iclass", "=", "torch", ".", "randperm", "(", "idx_iclass", ".", "size", "(", "0", ")", ")", "[", "0", "]", "\n", "idx_file", "=", "idx_iclass", "[", "idx_in_iclass", "]", "\n", "batch_feature", "[", "i", "]", "=", "self", ".", "train_feature", "[", "idx_file", "]", "\n", "batch_label", "[", "i", "]", "=", "self", ".", "train_label", "[", "idx_file", "]", "\n", "batch_att", "[", "i", "]", "=", "self", ".", "attribute", "[", "batch_label", "[", "i", "]", "]", "\n", "", "return", "batch_feature", ",", "batch_label", ",", "batch_att", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lijin118_LisGAN.None.util.weights_init": [[9, 17], ["classname.find", "m.weight.data.normal_", "m.bias.data.fill_", "classname.find", "m.weight.data.normal_", "m.bias.data.fill_"], "function", ["None"], ["def", "weights_init", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0.0", ",", "0.02", ")", "\n", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "", "elif", "classname", ".", "find", "(", "'BatchNorm'", ")", "!=", "-", "1", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "1.0", ",", "0.02", ")", "\n", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lijin118_LisGAN.None.util.map_label": [[18, 24], ["torch.LongTensor", "range", "label.size", "classes.size"], "function", ["None"], ["", "", "def", "map_label", "(", "label", ",", "classes", ")", ":", "\n", "    ", "mapped_label", "=", "torch", ".", "LongTensor", "(", "label", ".", "size", "(", ")", ")", "\n", "for", "i", "in", "range", "(", "classes", ".", "size", "(", "0", ")", ")", ":", "\n", "        ", "mapped_label", "[", "label", "==", "classes", "[", "i", "]", "]", "=", "i", "\n", "\n", "", "return", "mapped_label", "\n", "\n"]], "home.repos.pwc.inspect_result.lijin118_LisGAN.None.classifier.CLASSIFIER.__init__": [[12, 46], ["classifier.LINEAR_LOGSOFTMAX", "classifier.CLASSIFIER.model.apply", "torch.NLLLoss", "torch.NLLLoss", "torch.NLLLoss", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.Adam", "torch.Adam", "torch.Adam", "classifier.CLASSIFIER.model.parameters", "classifier.CLASSIFIER.model.cuda", "classifier.CLASSIFIER.criterion.cuda", "classifier.CLASSIFIER.input.cuda", "classifier.CLASSIFIER.label.cuda", "classifier.CLASSIFIER.train_X.size", "classifier.CLASSIFIER.fit", "classifier.CLASSIFIER.model.load_state_dict", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load"], "methods", ["home.repos.pwc.inspect_result.lijin118_LisGAN.None.classifier.CLASSIFIER.fit"], ["    ", "def", "__init__", "(", "self", ",", "_train_X", ",", "_train_Y", ",", "_nclass", ",", "_input_dim", ",", "_cuda", ",", "_lr", "=", "0.001", ",", "_beta1", "=", "0.5", ",", "_nepoch", "=", "20", ",", "_batch_size", "=", "100", ",", "pretrain_classifer", "=", "''", ")", ":", "\n", "        ", "self", ".", "train_X", "=", "_train_X", "\n", "self", ".", "train_Y", "=", "_train_Y", "\n", "self", ".", "batch_size", "=", "_batch_size", "\n", "self", ".", "nepoch", "=", "_nepoch", "\n", "self", ".", "nclass", "=", "_nclass", "\n", "self", ".", "input_dim", "=", "_input_dim", "\n", "self", ".", "cuda", "=", "_cuda", "\n", "self", ".", "model", "=", "LINEAR_LOGSOFTMAX", "(", "self", ".", "input_dim", ",", "self", ".", "nclass", ")", "\n", "self", ".", "model", ".", "apply", "(", "util", ".", "weights_init", ")", "\n", "self", ".", "criterion", "=", "nn", ".", "NLLLoss", "(", ")", "\n", "\n", "self", ".", "input", "=", "torch", ".", "FloatTensor", "(", "_batch_size", ",", "self", ".", "input_dim", ")", "\n", "self", ".", "label", "=", "torch", ".", "LongTensor", "(", "_batch_size", ")", "\n", "\n", "self", ".", "lr", "=", "_lr", "\n", "self", ".", "beta1", "=", "_beta1", "\n", "# setup optimizer", "\n", "self", ".", "optimizer", "=", "optim", ".", "Adam", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "lr", "=", "_lr", ",", "betas", "=", "(", "_beta1", ",", "0.999", ")", ")", "\n", "\n", "if", "self", ".", "cuda", ":", "\n", "            ", "self", ".", "model", ".", "cuda", "(", ")", "\n", "self", ".", "criterion", ".", "cuda", "(", ")", "\n", "self", ".", "input", "=", "self", ".", "input", ".", "cuda", "(", ")", "\n", "self", ".", "label", "=", "self", ".", "label", ".", "cuda", "(", ")", "\n", "\n", "", "self", ".", "index_in_epoch", "=", "0", "\n", "self", ".", "epochs_completed", "=", "0", "\n", "self", ".", "ntrain", "=", "self", ".", "train_X", ".", "size", "(", ")", "[", "0", "]", "\n", "\n", "if", "pretrain_classifer", "==", "''", ":", "\n", "            ", "self", ".", "fit", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "pretrain_classifier", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lijin118_LisGAN.None.classifier.CLASSIFIER.fit": [[48, 62], ["range", "range", "classifier.CLASSIFIER.model.zero_grad", "classifier.CLASSIFIER.next_batch", "classifier.CLASSIFIER.input.copy_", "classifier.CLASSIFIER.label.copy_", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "classifier.CLASSIFIER.model", "classifier.CLASSIFIER.criterion", "classifier.CLASSIFIER.backward", "classifier.CLASSIFIER.optimizer.step"], "methods", ["home.repos.pwc.inspect_result.lijin118_LisGAN.None.classifier.CLASSIFIER.next_batch"], ["", "", "def", "fit", "(", "self", ")", ":", "\n", "        ", "for", "epoch", "in", "range", "(", "self", ".", "nepoch", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "0", ",", "self", ".", "ntrain", ",", "self", ".", "batch_size", ")", ":", "\n", "                ", "self", ".", "model", ".", "zero_grad", "(", ")", "\n", "batch_input", ",", "batch_label", "=", "self", ".", "next_batch", "(", "self", ".", "batch_size", ")", "\n", "self", ".", "input", ".", "copy_", "(", "batch_input", ")", "\n", "self", ".", "label", ".", "copy_", "(", "batch_label", ")", "\n", "\n", "inputv", "=", "Variable", "(", "self", ".", "input", ")", "\n", "labelv", "=", "Variable", "(", "self", ".", "label", ")", "\n", "output", "=", "self", ".", "model", "(", "inputv", ")", "\n", "loss", "=", "self", ".", "criterion", "(", "output", ",", "labelv", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lijin118_LisGAN.None.classifier.CLASSIFIER.next_batch": [[63, 96], ["torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "", "", "def", "next_batch", "(", "self", ",", "batch_size", ")", ":", "\n", "        ", "start", "=", "self", ".", "index_in_epoch", "\n", "# shuffle the data at the first epoch", "\n", "if", "self", ".", "epochs_completed", "==", "0", "and", "start", "==", "0", ":", "\n", "            ", "perm", "=", "torch", ".", "randperm", "(", "self", ".", "ntrain", ")", "\n", "self", ".", "train_X", "=", "self", ".", "train_X", "[", "perm", "]", "\n", "self", ".", "train_Y", "=", "self", ".", "train_Y", "[", "perm", "]", "\n", "# the last batch", "\n", "", "if", "start", "+", "batch_size", ">", "self", ".", "ntrain", ":", "\n", "            ", "self", ".", "epochs_completed", "+=", "1", "\n", "rest_num_examples", "=", "self", ".", "ntrain", "-", "start", "\n", "if", "rest_num_examples", ">", "0", ":", "\n", "                ", "X_rest_part", "=", "self", ".", "train_X", "[", "start", ":", "self", ".", "ntrain", "]", "\n", "Y_rest_part", "=", "self", ".", "train_Y", "[", "start", ":", "self", ".", "ntrain", "]", "\n", "# shuffle the data", "\n", "", "perm", "=", "torch", ".", "randperm", "(", "self", ".", "ntrain", ")", "\n", "self", ".", "train_X", "=", "self", ".", "train_X", "[", "perm", "]", "\n", "self", ".", "train_Y", "=", "self", ".", "train_Y", "[", "perm", "]", "\n", "# start next epoch", "\n", "start", "=", "0", "\n", "self", ".", "index_in_epoch", "=", "batch_size", "-", "rest_num_examples", "\n", "end", "=", "self", ".", "index_in_epoch", "\n", "X_new_part", "=", "self", ".", "train_X", "[", "start", ":", "end", "]", "\n", "Y_new_part", "=", "self", ".", "train_Y", "[", "start", ":", "end", "]", "\n", "if", "rest_num_examples", ">", "0", ":", "\n", "                ", "return", "torch", ".", "cat", "(", "(", "X_rest_part", ",", "X_new_part", ")", ",", "0", ")", ",", "torch", ".", "cat", "(", "(", "Y_rest_part", ",", "Y_new_part", ")", ",", "0", ")", "\n", "", "else", ":", "\n", "                ", "return", "X_new_part", ",", "Y_new_part", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "index_in_epoch", "+=", "batch_size", "\n", "end", "=", "self", ".", "index_in_epoch", "\n", "# from index start to index end-1", "\n", "return", "self", ".", "train_X", "[", "start", ":", "end", "]", ",", "self", ".", "train_Y", "[", "start", ":", "end", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lijin118_LisGAN.None.classifier.CLASSIFIER.val": [[98, 113], ["torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "range", "classifier.CLASSIFIER.compute_per_class_acc", "test_X.size", "test_label.size", "min", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "util.map_label", "target_classes.size", "classifier.CLASSIFIER.model", "classifier.CLASSIFIER.model", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "test_X[].cuda"], "methods", ["home.repos.pwc.inspect_result.lijin118_LisGAN.None.classifier.CLASSIFIER.compute_per_class_acc", "home.repos.pwc.inspect_result.lijin118_LisGAN.None.util.map_label"], ["", "", "def", "val", "(", "self", ",", "test_X", ",", "test_label", ",", "target_classes", ")", ":", "\n", "        ", "start", "=", "0", "\n", "ntest", "=", "test_X", ".", "size", "(", ")", "[", "0", "]", "\n", "predicted_label", "=", "torch", ".", "LongTensor", "(", "test_label", ".", "size", "(", ")", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "ntest", ",", "self", ".", "batch_size", ")", ":", "\n", "            ", "end", "=", "min", "(", "ntest", ",", "start", "+", "self", ".", "batch_size", ")", "\n", "if", "self", ".", "cuda", ":", "\n", "                ", "output", "=", "self", ".", "model", "(", "Variable", "(", "test_X", "[", "start", ":", "end", "]", ".", "cuda", "(", ")", ",", "volatile", "=", "True", ")", ")", "\n", "", "else", ":", "\n", "                ", "output", "=", "self", ".", "model", "(", "Variable", "(", "test_X", "[", "start", ":", "end", "]", ",", "volatile", "=", "True", ")", ")", "\n", "", "_", ",", "predicted_label", "[", "start", ":", "end", "]", "=", "torch", ".", "max", "(", "output", ".", "data", ",", "1", ")", "\n", "start", "=", "end", "\n", "\n", "", "acc", "=", "self", ".", "compute_per_class_acc", "(", "util", ".", "map_label", "(", "test_label", ",", "target_classes", ")", ",", "predicted_label", ",", "target_classes", ".", "size", "(", "0", ")", ")", "\n", "return", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.lijin118_LisGAN.None.classifier.CLASSIFIER.compute_per_class_acc": [[114, 120], ["torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "range", "torch.FloatTensor().fill_.mean", "torch.FloatTensor().fill_.mean", "torch.FloatTensor().fill_.mean", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["", "def", "compute_per_class_acc", "(", "self", ",", "test_label", ",", "predicted_label", ",", "nclass", ")", ":", "\n", "        ", "acc_per_class", "=", "torch", ".", "FloatTensor", "(", "nclass", ")", ".", "fill_", "(", "0", ")", "\n", "for", "i", "in", "range", "(", "nclass", ")", ":", "\n", "            ", "idx", "=", "(", "test_label", "==", "i", ")", "\n", "acc_per_class", "[", "i", "]", "=", "torch", ".", "sum", "(", "test_label", "[", "idx", "]", "==", "predicted_label", "[", "idx", "]", ")", "/", "torch", ".", "sum", "(", "idx", ")", "\n", "", "return", "acc_per_class", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lijin118_LisGAN.None.classifier.LINEAR_LOGSOFTMAX.__init__": [[122, 126], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LogSoftmax", "torch.LogSoftmax", "torch.LogSoftmax"], "methods", ["home.repos.pwc.inspect_result.lijin118_LisGAN.None.classifier.LINEAR_LOGSOFTMAX.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", ",", "nclass", ")", ":", "\n", "        ", "super", "(", "LINEAR_LOGSOFTMAX", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "input_dim", ",", "nclass", ")", "\n", "self", ".", "logic", "=", "nn", ".", "LogSoftmax", "(", "dim", "=", "1", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lijin118_LisGAN.None.classifier.LINEAR_LOGSOFTMAX.forward": [[126, 129], ["classifier.LINEAR_LOGSOFTMAX.logic", "classifier.LINEAR_LOGSOFTMAX.fc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "o", "=", "self", ".", "logic", "(", "self", ".", "fc", "(", "x", ")", ")", "\n", "return", "o", "\n", "", "", ""]]}