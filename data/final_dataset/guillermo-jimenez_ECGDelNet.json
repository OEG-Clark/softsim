{"home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.None.main.main": [[23, 91], ["numpy.random.seed", "pandas.read_csv", "dataset.sort_index.sort_index", "numpy.asarray", "dataset.sort_index.describe", "os.path.exists", "utils.data_structures.DataStorage", "utils.data_structures.DataStorage", "utils.data_structures.DataStorage", "utils.data_structures.DataStorage.init_P", "utils.data_structures.DataStorage.init_QRS", "utils.data_structures.DataStorage.init_T", "utils.data_structures.MetricsStorage", "utils.data_structures.MetricsStorage", "os.path.join", "list", "os.path.join", "pandas.DataFrame", "pandas.read_csv", "utils.data_structures.load_data", "utils.data_structures.load_data", "utils.data_structures.load_data", "pandas.read_csv", "utils.data_structures.load_data", "utils.data_structures.load_data", "utils.data_structures.load_data", "pandas.read_csv", "utils.data_structures.load_data", "utils.data_structures.load_data", "utils.data_structures.load_data", "config.splitting.lower", "pandas.read_csv", "pandas.read_csv", "utils.train.train_cross_val", "pandas.read_csv", "dict", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "tuple", "config.splitting.lower", "numpy.asarray", "utils.train.train_all", "ValueError", "os.path.join", "zip", "range", "list", "dataset.sort_index.keys", "labels[].split", "range", "set", "len", "len", "dataset.sort_index.keys"], "function", ["home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.data_structures.MetricsStorage.init_P", "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.data_structures.MetricsStorage.init_QRS", "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.data_structures.MetricsStorage.init_T", "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.data_structures.load_data", "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.data_structures.load_data", "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.data_structures.load_data", "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.data_structures.load_data", "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.data_structures.load_data", "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.data_structures.load_data", "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.data_structures.load_data", "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.data_structures.load_data", "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.data_structures.load_data", "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.train.train_cross_val", "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.train.train_all"], ["def", "main", "(", "config", ")", ":", "\n", "    ", "seed", "(", "seed", "=", "config", ".", "seed", ")", "\n", "\n", "#### LOAD DATASETS ####", "\n", "dataset", "=", "read_csv", "(", "join", "(", "config", ".", "data_path", ",", "'Dataset.csv'", ")", ",", "index_col", "=", "0", ")", "\n", "dataset", "=", "dataset", ".", "sort_index", "(", "axis", "=", "1", ")", "\n", "labels", "=", "asarray", "(", "list", "(", "dataset", ")", ")", "# In case no data augmentation is applied", "\n", "description", "=", "dataset", ".", "describe", "(", ")", "\n", "\n", "# Define the window of validity of the ground truth masks", "\n", "if", "exists", "(", "join", "(", "config", ".", "data_path", ",", "'Validity.csv'", ")", ")", ":", "\n", "        ", "validity", "=", "read_csv", "(", "join", "(", "config", ".", "data_path", ",", "'Validity.csv'", ")", ",", "index_col", "=", "0", ",", "\n", "converters", "=", "{", "\"on\"", ":", "literal_eval", ",", "\"off\"", ":", "literal_eval", "}", ")", ".", "T", "\n", "", "else", ":", "\n", "        ", "validity", "=", "DataFrame", "(", "dict", "(", "zip", "(", "dataset", ".", "keys", "(", ")", ",", "[", "[", "[", "0", "]", ",", "[", "225000", "]", "]", "]", "*", "len", "(", "dataset", ".", "keys", "(", ")", ")", ")", ")", ",", "\n", "index", "=", "[", "'on'", ",", "'off'", "]", ")", "\n", "\n", "# Zero-center data", "\n", "", "for", "key", "in", "description", ":", "\n", "        ", "dataset", "[", "key", "]", "=", "(", "dataset", "[", "key", "]", "-", "description", "[", "key", "]", "[", "'mean'", "]", ")", "/", "description", "[", "key", "]", "[", "'std'", "]", "\n", "\n", "# Initialize data structures for results storage", "\n", "", "data", "=", "DataStorage", "(", "dataset", ",", "validity", ")", "\n", "results", "=", "DataStorage", "(", "dataset", ",", "validity", ")", "\n", "results_CV2", "=", "DataStorage", "(", "dataset", ",", "validity", ")", "\n", "\n", "# Initialize data storage", "\n", "data", ".", "init_P", "(", "\n", "read_csv", "(", "join", "(", "config", ".", "data_path", ",", "'Pwave.csv'", ")", ",", "index_col", "=", "0", ",", "dtype", "=", "'float'", ")", ",", "\n", "load_data", "(", "join", "(", "config", ".", "data_path", ",", "'Pon.csv'", ")", ")", ",", "\n", "load_data", "(", "join", "(", "config", ".", "data_path", ",", "'Ppeak.csv'", ")", ")", ",", "\n", "load_data", "(", "join", "(", "config", ".", "data_path", ",", "'Poff.csv'", ")", ")", "\n", ")", "\n", "\n", "data", ".", "init_QRS", "(", "\n", "read_csv", "(", "join", "(", "config", ".", "data_path", ",", "'QRSwave.csv'", ")", ",", "index_col", "=", "0", ",", "dtype", "=", "'float'", ")", ",", "\n", "load_data", "(", "join", "(", "config", ".", "data_path", ",", "'QRSon.csv'", ")", ")", ",", "\n", "load_data", "(", "join", "(", "config", ".", "data_path", ",", "'QRSpeak.csv'", ")", ")", ",", "\n", "load_data", "(", "join", "(", "config", ".", "data_path", ",", "'QRSoff.csv'", ")", ")", "\n", ")", "\n", "\n", "data", ".", "init_T", "(", "\n", "read_csv", "(", "join", "(", "config", ".", "data_path", ",", "'Twave.csv'", ")", ",", "index_col", "=", "0", ",", "dtype", "=", "'float'", ")", ",", "\n", "load_data", "(", "join", "(", "config", ".", "data_path", ",", "'Ton.csv'", ")", ")", ",", "\n", "load_data", "(", "join", "(", "config", ".", "data_path", ",", "'Tpeak.csv'", ")", ")", ",", "\n", "load_data", "(", "join", "(", "config", ".", "data_path", ",", "'Toff.csv'", ")", ")", "\n", ")", "\n", "\n", "# Store metrics", "\n", "metrics", "=", "MetricsStorage", "(", ")", "\n", "metrics_CV2", "=", "MetricsStorage", "(", ")", "\n", "\n", "#### TRAIN/TEST DISTRIBUTION IMPORTING ####", "\n", "if", "config", ".", "splitting", ".", "lower", "(", ")", "==", "'cross_validation'", ":", "\n", "        ", "train_keys", "=", "read_csv", "(", "'./CommonDistribution/TrainSplit_Labels.csv'", ",", "index_col", "=", "0", ")", "\n", "test_keys", "=", "read_csv", "(", "'./CommonDistribution/TestSplit_Labels.csv'", ",", "index_col", "=", "0", ")", "\n", "KFolds", "=", "[", "tuple", "(", "[", "train_keys", ".", "values", "[", "i", ",", ":", "]", ",", "test_keys", ".", "values", "[", "i", ",", ":", "]", "]", ")", "for", "i", "in", "range", "(", "train_keys", ".", "shape", "[", "0", "]", ")", "]", "\n", "\n", "#### TRAIN THE MODEL ####", "\n", "train_cross_val", "(", "KFolds", ",", "config", ",", "data", ",", "metrics", ",", "metrics_CV2", ",", "results", ",", "results_CV2", ")", "\n", "", "elif", "config", ".", "splitting", ".", "lower", "(", ")", "==", "'all'", ":", "\n", "        ", "IDs", "=", "[", "labels", "[", "i", "]", ".", "split", "(", "\"_\"", ")", "[", "0", "]", "for", "i", "in", "range", "(", "len", "(", "labels", ")", ")", "]", "\n", "IDs", "=", "asarray", "(", "list", "(", "set", "(", "IDs", ")", ")", ")", "# Avoid duplicates", "\n", "\n", "#### TRAIN THE MODEL ####", "\n", "train_all", "(", "config", ",", "data", ",", "metrics", ",", "metrics_CV2", ",", "results", ",", "results_CV2", ",", "IDs", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Train type not understood\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.evaluation.evaluate": [[9, 27], ["utils.inference.predict", "numpy.concatenate", "evaluation.retrieve_fiducials", "evaluation.retrieve_fiducials", "evaluation.metric_computation", "evaluation.metric_computation", "evaluation.save_results", "evaluation.save_results", "os.path.splitext", "pandas.Index", "pandas.Index", "os.path.splitext"], "function", ["home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.inference.predict", "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.evaluation2.retrieve_fiducials", "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.evaluation2.retrieve_fiducials", "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.evaluation2.metric_computation", "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.evaluation2.metric_computation", "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.evaluation2.save_results", "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.evaluation2.save_results"], ["def", "evaluate", "(", "model", ",", "config", ",", "data", ",", "execinfo", ",", "metrics", ",", "metrics_CV2", ",", "results", ",", "results_CV2", ",", "recompute", ")", ":", "\n", "    ", "\"\"\"Wave evaluation\"\"\"", "\n", "predict", "(", "model", ",", "config", ",", "data", ",", "execinfo", ",", "results", ",", "results_CV2", ",", "recompute", ")", "\n", "\n", "# IF IT'S NOT THE OVERALL EVALUATION", "\n", "leads", "=", "np", ".", "concatenate", "(", "(", "pandas", ".", "Index", "(", "execinfo", ".", "test", ")", "+", "'_0'", ",", "pandas", ".", "Index", "(", "execinfo", ".", "test", ")", "+", "'_1'", ")", ")", "\n", "\n", "retrieve_fiducials", "(", "results", ",", "leads", ",", "recompute", ")", "\n", "retrieve_fiducials", "(", "results_CV2", ",", "leads", ",", "recompute", ")", "\n", "\n", "### COMPUTE METRICS ###", "\n", "metrics", "=", "metric_computation", "(", "config", ",", "data", ",", "metrics", ",", "results", ",", "execinfo", ".", "test", ",", "recompute", ")", "\n", "metrics_CV2", "=", "metric_computation", "(", "config", ",", "data", ",", "metrics_CV2", ",", "results_CV2", ",", "execinfo", ".", "test", ",", "recompute", ")", "\n", "\n", "### SAVE RESULTS ###", "\n", "path_CV2", "=", "os", ".", "path", ".", "splitext", "(", "execinfo", ".", "results", ")", "[", "0", "]", "+", "'_CV2'", "+", "os", ".", "path", ".", "splitext", "(", "execinfo", ".", "results", ")", "[", "1", "]", "\n", "save_results", "(", "metrics", ",", "config", ",", "execinfo", ".", "test", ",", "execinfo", ".", "results", ")", "\n", "save_results", "(", "metrics_CV2", ",", "config", ",", "execinfo", ".", "test", ",", "path_CV2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.evaluation.save_results": [[29, 47], ["dict", "evaluation.wave_evaluation_from_metrics", "evaluation.wave_evaluation_from_metrics", "evaluation.wave_evaluation_from_metrics", "pandas.DataFrame", "pandas.DataFrame.to_csv", "output_path[].lower", "onset_P.mean", "onset_QRS.mean", "onset_T.mean", "onset_P.std", "onset_QRS.std", "onset_T.std", "offset_P.mean", "offset_QRS.mean", "offset_T.mean", "offset_P.std", "offset_QRS.std", "offset_T.std"], "function", ["home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.evaluation2.wave_evaluation_from_metrics", "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.evaluation2.wave_evaluation_from_metrics", "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.evaluation2.wave_evaluation_from_metrics"], ["", "def", "save_results", "(", "metrics", ",", "config", ",", "test", ",", "output_path", ")", ":", "\n", "    ", "if", "output_path", "[", "-", "4", ":", "]", ".", "lower", "(", ")", "!=", "'.csv'", ":", "output_path", "+=", "'.csv'", "\n", "res", "=", "dict", "(", ")", "\n", "\n", "precision_P", ",", "recall_P", ",", "onset_P", ",", "offset_P", ",", "dice_P", "=", "wave_evaluation_from_metrics", "(", "metrics", ".", "P", ",", "test", ")", "\n", "precision_QRS", ",", "recall_QRS", ",", "onset_QRS", ",", "offset_QRS", ",", "dice_QRS", "=", "wave_evaluation_from_metrics", "(", "metrics", ".", "QRS", ",", "test", ")", "\n", "precision_T", ",", "recall_T", ",", "onset_T", ",", "offset_T", ",", "dice_T", "=", "wave_evaluation_from_metrics", "(", "metrics", ".", "T", ",", "test", ")", "\n", "\n", "res", "[", "'Precision (P+)'", "]", "=", "[", "precision_P", ",", "precision_QRS", ",", "precision_T", "]", "\n", "res", "[", "'Recall (Se%)'", "]", "=", "[", "recall_P", ",", "recall_QRS", ",", "recall_T", "]", "\n", "res", "[", "'Onset error (Mean), ms'", "]", "=", "[", "onset_P", ".", "mean", "(", ")", "*", "(", "1.", "/", "config", ".", "sampling_freq", "*", "1000", ")", ",", "onset_QRS", ".", "mean", "(", ")", "*", "(", "1.", "/", "config", ".", "sampling_freq", "*", "1000", ")", ",", "onset_T", ".", "mean", "(", ")", "*", "(", "1.", "/", "config", ".", "sampling_freq", "*", "1000", ")", "]", "\n", "res", "[", "'Onset error (STD), ms'", "]", "=", "[", "onset_P", ".", "std", "(", ")", "*", "(", "1.", "/", "config", ".", "sampling_freq", "*", "1000", ")", ",", "onset_QRS", ".", "std", "(", ")", "*", "(", "1.", "/", "config", ".", "sampling_freq", "*", "1000", ")", ",", "onset_T", ".", "std", "(", ")", "*", "(", "1.", "/", "config", ".", "sampling_freq", "*", "1000", ")", "]", "\n", "res", "[", "'Offset error (Mean), ms'", "]", "=", "[", "offset_P", ".", "mean", "(", ")", "*", "(", "1.", "/", "config", ".", "sampling_freq", "*", "1000", ")", ",", "offset_QRS", ".", "mean", "(", ")", "*", "(", "1.", "/", "config", ".", "sampling_freq", "*", "1000", ")", ",", "offset_T", ".", "mean", "(", ")", "*", "(", "1.", "/", "config", ".", "sampling_freq", "*", "1000", ")", "]", "\n", "res", "[", "'Offset error (STD), ms'", "]", "=", "[", "offset_P", ".", "std", "(", ")", "*", "(", "1.", "/", "config", ".", "sampling_freq", "*", "1000", ")", ",", "offset_QRS", ".", "std", "(", ")", "*", "(", "1.", "/", "config", ".", "sampling_freq", "*", "1000", ")", ",", "offset_T", ".", "std", "(", ")", "*", "(", "1.", "/", "config", ".", "sampling_freq", "*", "1000", ")", "]", "\n", "res", "[", "'Dice Coefficient'", "]", "=", "[", "dice_P", ",", "dice_QRS", ",", "dice_T", "]", "\n", "\n", "res", "=", "pandas", ".", "DataFrame", "(", "res", ",", "columns", "=", "[", "'Precision (P+)'", ",", "'Recall (Se%)'", ",", "'Onset error (Mean), ms'", ",", "'Onset error (STD), ms'", ",", "'Offset error (Mean), ms'", ",", "'Offset error (STD), ms'", ",", "'Dice Coefficient'", "]", ",", "index", "=", "[", "'P wave'", ",", "'QRS wave'", ",", "'T wave'", "]", ")", "\n", "res", ".", "to_csv", "(", "output_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.evaluation.retrieve_fiducials": [[49, 53], ["evaluation.wave_fiducials", "evaluation.wave_fiducials", "evaluation.wave_fiducials"], "function", ["home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.evaluation2.wave_fiducials", "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.evaluation2.wave_fiducials", "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.evaluation2.wave_fiducials"], ["", "def", "retrieve_fiducials", "(", "results", ",", "test", ",", "recompute", "=", "False", ")", ":", "\n", "    ", "wave_fiducials", "(", "results", ".", "P", ",", "test", ",", "recompute", ")", "\n", "wave_fiducials", "(", "results", ".", "QRS", ",", "test", ",", "recompute", ")", "\n", "wave_fiducials", "(", "results", ".", "T", ",", "test", ",", "recompute", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.evaluation.wave_fiducials": [[55, 63], ["numpy.diff", "wave.onset.keys", "numpy.pad", "numpy.where", "numpy.where"], "function", ["None"], ["", "def", "wave_fiducials", "(", "wave", ",", "test", ",", "recompute", "=", "False", ")", ":", "\n", "    ", "for", "k", "in", "test", ":", "\n", "        ", "if", "recompute", "or", "(", "k", "not", "in", "wave", ".", "onset", ".", "keys", "(", ")", ")", ":", "\n", "            ", "seg", "=", "np", ".", "diff", "(", "np", ".", "pad", "(", "wave", ".", "wave", "[", "k", "]", ".", "values", ",", "(", "(", "1", ",", "1", ")", ",", ")", ",", "'constant'", ",", "constant_values", "=", "0", ")", ",", "axis", "=", "-", "1", ")", "\n", "\n", "wave", ".", "onset", "[", "k", "]", "=", "np", ".", "where", "(", "seg", "==", "1.", ")", "[", "0", "]", "\n", "wave", ".", "offset", "[", "k", "]", "=", "np", ".", "where", "(", "seg", "==", "-", "1.", ")", "[", "0", "]", "-", "1", "\n", "wave", ".", "peak", "[", "k", "]", "=", "(", "wave", ".", "onset", "[", "k", "]", "+", "wave", ".", "offset", "[", "k", "]", ")", "//", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.evaluation.get_boolean_mask": [[65, 94], ["numpy.any", "numpy.any", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray"], "function", ["None"], ["", "", "", "def", "get_correspondence_between_gt_and_predicted", "(", "fiducials_data", ",", "fiducials_results", ",", "k", ",", "validity", ")", ":", "\n", "    ", "mask_on", "=", "(", "fiducials_data", ".", "onset", "[", "k", "]", ">=", "np", ".", "asarray", "(", "validity", "[", "k", "]", "[", "0", "]", ")", "[", ":", ",", "np", ".", "newaxis", "]", ")", "&", "(", "fiducials_data", ".", "onset", "[", "k", "]", "<=", "np", ".", "asarray", "(", "validity", "[", "k", "]", "[", "1", "]", ")", "[", ":", ",", "np", ".", "newaxis", "]", ")", "\n", "mask_peak", "=", "(", "fiducials_data", ".", "peak", "[", "k", "]", ">=", "np", ".", "asarray", "(", "validity", "[", "k", "]", "[", "0", "]", ")", "[", ":", ",", "np", ".", "newaxis", "]", ")", "&", "(", "fiducials_data", ".", "peak", "[", "k", "]", "<=", "np", ".", "asarray", "(", "validity", "[", "k", "]", "[", "1", "]", ")", "[", ":", ",", "np", ".", "newaxis", "]", ")", "\n", "mask_off", "=", "(", "fiducials_data", ".", "offset", "[", "k", "]", ">=", "np", ".", "asarray", "(", "validity", "[", "k", "]", "[", "0", "]", ")", "[", ":", ",", "np", ".", "newaxis", "]", ")", "&", "(", "fiducials_data", ".", "offset", "[", "k", "]", "<=", "np", ".", "asarray", "(", "validity", "[", "k", "]", "[", "1", "]", ")", "[", ":", ",", "np", ".", "newaxis", "]", ")", "\n", "mask_total", "=", "np", ".", "any", "(", "mask_on", "&", "mask_peak", "&", "mask_off", ",", "axis", "=", "0", ")", "# beat has to be found in every one", "\n", "\n", "d_on", "=", "fiducials_data", ".", "onset", "[", "k", "]", "[", "mask_total", "]", "\n", "d_pk", "=", "fiducials_data", ".", "peak", "[", "k", "]", "[", "mask_total", "]", "\n", "d_of", "=", "fiducials_data", ".", "offset", "[", "k", "]", "[", "mask_total", "]", "\n", "\n", "mask_on", "=", "(", "fiducials_results", ".", "onset", "[", "k", "]", ">=", "np", ".", "asarray", "(", "validity", "[", "k", "]", "[", "0", "]", ")", "[", ":", ",", "np", ".", "newaxis", "]", ")", "&", "(", "fiducials_results", ".", "onset", "[", "k", "]", "<=", "np", ".", "asarray", "(", "validity", "[", "k", "]", "[", "1", "]", ")", "[", ":", ",", "np", ".", "newaxis", "]", ")", "\n", "mask_peak", "=", "(", "fiducials_results", ".", "peak", "[", "k", "]", ">=", "np", ".", "asarray", "(", "validity", "[", "k", "]", "[", "0", "]", ")", "[", ":", ",", "np", ".", "newaxis", "]", ")", "&", "(", "fiducials_results", ".", "peak", "[", "k", "]", "<=", "np", ".", "asarray", "(", "validity", "[", "k", "]", "[", "1", "]", ")", "[", ":", ",", "np", ".", "newaxis", "]", ")", "\n", "mask_off", "=", "(", "fiducials_results", ".", "offset", "[", "k", "]", ">=", "np", ".", "asarray", "(", "validity", "[", "k", "]", "[", "0", "]", ")", "[", ":", ",", "np", ".", "newaxis", "]", ")", "&", "(", "fiducials_results", ".", "offset", "[", "k", "]", "<=", "np", ".", "asarray", "(", "validity", "[", "k", "]", "[", "1", "]", ")", "[", ":", ",", "np", ".", "newaxis", "]", ")", "\n", "mask_total", "=", "np", ".", "any", "(", "mask_on", "&", "mask_peak", "&", "mask_off", ",", "axis", "=", "0", ")", "# beat has to be found in every one", "\n", "\n", "r_on", "=", "fiducials_results", ".", "onset", "[", "k", "]", "[", "mask_total", "]", "\n", "r_pk", "=", "fiducials_results", ".", "peak", "[", "k", "]", "[", "mask_total", "]", "\n", "r_of", "=", "fiducials_results", ".", "offset", "[", "k", "]", "[", "mask_total", "]", "\n", "\n", "filtA", "=", "(", "d_on", "<=", "r_on", "[", ":", ",", "np", ".", "newaxis", "]", ")", "&", "(", "r_on", "[", ":", ",", "np", ".", "newaxis", "]", "<=", "d_of", ")", "\n", "filtB", "=", "(", "d_on", "<=", "r_pk", "[", ":", ",", "np", ".", "newaxis", "]", ")", "&", "(", "r_pk", "[", ":", ",", "np", ".", "newaxis", "]", "<=", "d_of", ")", "\n", "filtC", "=", "(", "d_on", "<=", "r_of", "[", ":", ",", "np", ".", "newaxis", "]", ")", "&", "(", "r_of", "[", ":", ",", "np", ".", "newaxis", "]", "<=", "d_of", ")", "\n", "filtD", "=", "(", "(", "r_on", "<=", "d_on", "[", ":", ",", "np", ".", "newaxis", "]", ")", "&", "(", "d_on", "[", ":", ",", "np", ".", "newaxis", "]", "<=", "r_of", ")", ")", ".", "T", "\n", "filtE", "=", "(", "(", "r_on", "<=", "d_pk", "[", ":", ",", "np", ".", "newaxis", "]", ")", "&", "(", "d_pk", "[", ":", ",", "np", ".", "newaxis", "]", "<=", "r_of", ")", ")", ".", "T", "\n", "filtF", "=", "(", "(", "r_on", "<=", "d_of", "[", ":", ",", "np", ".", "newaxis", "]", ")", "&", "(", "d_of", "[", ":", ",", "np", ".", "newaxis", "]", "<=", "r_of", ")", ")", ".", "T", "\n", "\n", "filt_all", "=", "filtA", "|", "filtB", "|", "filtC", "|", "filtD", "|", "filtE", "|", "filtF", "\n", "\n", "return", "filt_all", ",", "r_on", ",", "r_of", ",", "d_on", ",", "d_of", "\n", "\n"]], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.evaluation.get_multi_lead_correspondence": [[96, 125], ["numpy.any", "numpy.any", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray"], "function", ["None"], ["", "def", "get_correspondence_between_predicted_leads", "(", "fiducials_results", ",", "k", ",", "validity", ")", ":", "\n", "    ", "mask_on", "=", "(", "fiducials_results", ".", "onset", "[", "k", "+", "'_0'", "]", ">=", "np", ".", "asarray", "(", "validity", "[", "k", "+", "'_0'", "]", "[", "0", "]", ")", "[", ":", ",", "np", ".", "newaxis", "]", ")", "&", "(", "fiducials_results", ".", "onset", "[", "k", "+", "'_0'", "]", "<=", "np", ".", "asarray", "(", "validity", "[", "k", "+", "'_0'", "]", "[", "1", "]", ")", "[", ":", ",", "np", ".", "newaxis", "]", ")", "\n", "mask_peak", "=", "(", "fiducials_results", ".", "peak", "[", "k", "+", "'_0'", "]", ">=", "np", ".", "asarray", "(", "validity", "[", "k", "+", "'_0'", "]", "[", "0", "]", ")", "[", ":", ",", "np", ".", "newaxis", "]", ")", "&", "(", "fiducials_results", ".", "peak", "[", "k", "+", "'_0'", "]", "<=", "np", ".", "asarray", "(", "validity", "[", "k", "+", "'_0'", "]", "[", "1", "]", ")", "[", ":", ",", "np", ".", "newaxis", "]", ")", "\n", "mask_off", "=", "(", "fiducials_results", ".", "offset", "[", "k", "+", "'_0'", "]", ">=", "np", ".", "asarray", "(", "validity", "[", "k", "+", "'_0'", "]", "[", "0", "]", ")", "[", ":", ",", "np", ".", "newaxis", "]", ")", "&", "(", "fiducials_results", ".", "offset", "[", "k", "+", "'_0'", "]", "<=", "np", ".", "asarray", "(", "validity", "[", "k", "+", "'_0'", "]", "[", "1", "]", ")", "[", ":", ",", "np", ".", "newaxis", "]", ")", "\n", "mask_total", "=", "np", ".", "any", "(", "mask_on", "&", "mask_peak", "&", "mask_off", ",", "axis", "=", "0", ")", "# beat has to be found in every one", "\n", "\n", "res_0_on", "=", "fiducials_results", ".", "onset", "[", "k", "+", "'_0'", "]", "[", "mask_total", "]", "\n", "res_0_pk", "=", "fiducials_results", ".", "peak", "[", "k", "+", "'_0'", "]", "[", "mask_total", "]", "\n", "res_0_of", "=", "fiducials_results", ".", "offset", "[", "k", "+", "'_0'", "]", "[", "mask_total", "]", "\n", "\n", "mask_on", "=", "(", "fiducials_results", ".", "onset", "[", "k", "+", "'_1'", "]", ">=", "np", ".", "asarray", "(", "validity", "[", "k", "+", "'_1'", "]", "[", "0", "]", ")", "[", ":", ",", "np", ".", "newaxis", "]", ")", "&", "(", "fiducials_results", ".", "onset", "[", "k", "+", "'_1'", "]", "<=", "np", ".", "asarray", "(", "validity", "[", "k", "+", "'_1'", "]", "[", "1", "]", ")", "[", ":", ",", "np", ".", "newaxis", "]", ")", "\n", "mask_peak", "=", "(", "fiducials_results", ".", "peak", "[", "k", "+", "'_1'", "]", ">=", "np", ".", "asarray", "(", "validity", "[", "k", "+", "'_1'", "]", "[", "0", "]", ")", "[", ":", ",", "np", ".", "newaxis", "]", ")", "&", "(", "fiducials_results", ".", "peak", "[", "k", "+", "'_1'", "]", "<=", "np", ".", "asarray", "(", "validity", "[", "k", "+", "'_1'", "]", "[", "1", "]", ")", "[", ":", ",", "np", ".", "newaxis", "]", ")", "\n", "mask_off", "=", "(", "fiducials_results", ".", "offset", "[", "k", "+", "'_1'", "]", ">=", "np", ".", "asarray", "(", "validity", "[", "k", "+", "'_1'", "]", "[", "0", "]", ")", "[", ":", ",", "np", ".", "newaxis", "]", ")", "&", "(", "fiducials_results", ".", "offset", "[", "k", "+", "'_1'", "]", "<=", "np", ".", "asarray", "(", "validity", "[", "k", "+", "'_1'", "]", "[", "1", "]", ")", "[", ":", ",", "np", ".", "newaxis", "]", ")", "\n", "mask_total", "=", "np", ".", "any", "(", "mask_on", "&", "mask_peak", "&", "mask_off", ",", "axis", "=", "0", ")", "# beat has to be found in every one", "\n", "\n", "res_1_on", "=", "fiducials_results", ".", "onset", "[", "k", "+", "'_1'", "]", "[", "mask_total", "]", "\n", "res_1_pk", "=", "fiducials_results", ".", "peak", "[", "k", "+", "'_1'", "]", "[", "mask_total", "]", "\n", "res_1_of", "=", "fiducials_results", ".", "offset", "[", "k", "+", "'_1'", "]", "[", "mask_total", "]", "\n", "\n", "filtA", "=", "(", "res_0_on", "<=", "res_1_on", "[", ":", ",", "np", ".", "newaxis", "]", ")", "&", "(", "res_1_on", "[", ":", ",", "np", ".", "newaxis", "]", "<=", "res_0_of", ")", "\n", "filtB", "=", "(", "res_0_on", "<=", "res_1_pk", "[", ":", ",", "np", ".", "newaxis", "]", ")", "&", "(", "res_1_pk", "[", ":", ",", "np", ".", "newaxis", "]", "<=", "res_0_of", ")", "\n", "filtC", "=", "(", "res_0_on", "<=", "res_1_of", "[", ":", ",", "np", ".", "newaxis", "]", ")", "&", "(", "res_1_of", "[", ":", ",", "np", ".", "newaxis", "]", "<=", "res_0_of", ")", "\n", "filtD", "=", "(", "(", "res_1_on", "<=", "res_0_on", "[", ":", ",", "np", ".", "newaxis", "]", ")", "&", "(", "res_0_on", "[", ":", ",", "np", ".", "newaxis", "]", "<=", "res_1_of", ")", ")", ".", "T", "\n", "filtE", "=", "(", "(", "res_1_on", "<=", "res_0_pk", "[", ":", ",", "np", ".", "newaxis", "]", ")", "&", "(", "res_0_pk", "[", ":", ",", "np", ".", "newaxis", "]", "<=", "res_1_of", ")", ")", ".", "T", "\n", "filtF", "=", "(", "(", "res_1_on", "<=", "res_0_of", "[", ":", ",", "np", ".", "newaxis", "]", ")", "&", "(", "res_0_of", "[", ":", ",", "np", ".", "newaxis", "]", "<=", "res_1_of", ")", ")", ".", "T", "\n", "\n", "filt_all", "=", "filtA", "|", "filtB", "|", "filtC", "|", "filtD", "|", "filtE", "|", "filtF", "\n", "\n", "return", "filt_all", "\n", "\n"]], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.evaluation.compute_wave_metrics": [[133, 218], ["evaluation.get_correspondence_between_gt_and_predicted", "evaluation.get_correspondence_between_gt_and_predicted", "evaluation.get_correspondence_between_predicted_leads", "dict", "numpy.zeros", "numpy.zeros", "range", "range", "range", "wave_metrics.keys.append", "numpy.where", "numpy.where", "len", "evaluation.compute_dice_score", "evaluation.compute_dice_score", "[].sum", "[].tolist", "[].tolist", "numpy.logical_not", "numpy.logical_not", "numpy.hstack", "numpy.hstack", "len", "len", "len", "len", "len", "numpy.asarray", "numpy.asarray", "len", "numpy.asarray", "numpy.asarray", "int", "int", "len", "len", "min", "len", "len", "numpy.where", "numpy.where", "len", "len", "numpy.argmin", "numpy.argmin", "numpy.abs", "numpy.abs"], "function", ["home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.evaluation.get_correspondence_between_gt_and_predicted", "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.evaluation.get_correspondence_between_gt_and_predicted", "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.evaluation.get_correspondence_between_predicted_leads", "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.evaluation.compute_dice_score", "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.evaluation.compute_dice_score"], ["", "def", "compute_wave_metrics", "(", "config", ",", "fiducials_data", ",", "fiducials_results", ",", "wave_metrics", ",", "test", ",", "validity", ",", "recompute", "=", "False", ")", ":", "\n", "    ", "for", "k", "in", "test", ":", "\n", "        ", "if", "(", "k", "not", "in", "wave_metrics", ".", "keys", ")", "or", "recompute", ":", "\n", "# If the prediction is different for every lead (single-lead strategy)", "\n", "            ", "filt_all_0", ",", "r_on_0", ",", "r_of_0", ",", "d_on_0", ",", "d_of_0", "=", "get_correspondence_between_gt_and_predicted", "(", "fiducials_data", ",", "fiducials_results", ",", "k", "+", "'_0'", ",", "validity", ")", "\n", "filt_all_1", ",", "r_on_1", ",", "r_of_1", ",", "d_on_1", ",", "d_of_1", "=", "get_correspondence_between_gt_and_predicted", "(", "fiducials_data", ",", "fiducials_results", ",", "k", "+", "'_1'", ",", "validity", ")", "\n", "filt_corr", "=", "get_correspondence_between_predicted_leads", "(", "fiducials_results", ",", "k", ",", "validity", ")", "\n", "\n", "# Check correspondence of GT beats to detected beats", "\n", "corr", "=", "dict", "(", ")", "\n", "\n", "# Account for already detected beats to calculate false positives", "\n", "chosen_0", "=", "np", ".", "zeros", "(", "(", "filt_all_0", ".", "shape", "[", "0", "]", ",", ")", ",", "dtype", "=", "bool", ")", "\n", "chosen_1", "=", "np", ".", "zeros", "(", "(", "filt_all_1", ".", "shape", "[", "0", "]", ",", ")", ",", "dtype", "=", "bool", ")", "\n", "\n", "for", "i", "in", "range", "(", "filt_all_0", ".", "shape", "[", "1", "]", ")", ":", "\n", "                ", "corr", "[", "i", "]", "=", "[", "np", ".", "where", "(", "filt_all_0", "[", ":", ",", "i", "]", ")", "[", "0", "]", ".", "tolist", "(", ")", ",", "\n", "np", ".", "where", "(", "filt_all_1", "[", ":", ",", "i", "]", ")", "[", "0", "]", ".", "tolist", "(", ")", "]", "\n", "chosen_0", "=", "chosen_0", "|", "filt_all_0", "[", ":", ",", "i", "]", "\n", "chosen_1", "=", "chosen_1", "|", "filt_all_1", "[", ":", ",", "i", "]", "\n", "\n", "# Retrieve beats detected that do not correspond to any GT beat (potential false positives)", "\n", "", "not_chosen_0", "=", "np", ".", "where", "(", "np", ".", "logical_not", "(", "chosen_0", ")", ")", "[", "0", "]", "\n", "not_chosen_1", "=", "np", ".", "where", "(", "np", ".", "logical_not", "(", "chosen_1", ")", ")", "[", "0", "]", "\n", "\n", "# Initialize metrics", "\n", "wave_metrics", ".", "truepositive", "[", "k", "]", "=", "0", "\n", "wave_metrics", ".", "falsepositive", "[", "k", "]", "=", "0", "\n", "wave_metrics", ".", "falsenegative", "[", "k", "]", "=", "0", "\n", "wave_metrics", ".", "dice", "[", "k", "]", "=", "0", "\n", "wave_metrics", ".", "onseterror", "[", "k", "]", "=", "[", "]", "\n", "wave_metrics", ".", "offseterror", "[", "k", "]", "=", "[", "]", "\n", "\n", "# Compute Dice coefficient", "\n", "for", "i", "in", "range", "(", "len", "(", "validity", "[", "k", "+", "'_0'", "]", "[", "0", "]", ")", ")", ":", "\n", "                ", "on", "=", "validity", "[", "k", "+", "'_0'", "]", "[", "0", "]", "[", "i", "]", "\n", "off", "=", "validity", "[", "k", "+", "'_0'", "]", "[", "1", "]", "[", "i", "]", "\n", "\n", "wave_metrics", ".", "dice", "[", "k", "]", "+=", "compute_dice_score", "(", "fiducials_data", ".", "wave", "[", "k", "+", "'_0'", "]", "[", "on", ":", "off", "]", ",", "fiducials_results", ".", "wave", "[", "k", "+", "'_0'", "]", "[", "on", ":", "off", "]", ")", "\n", "wave_metrics", ".", "dice", "[", "k", "]", "+=", "compute_dice_score", "(", "fiducials_data", ".", "wave", "[", "k", "+", "'_1'", "]", "[", "on", ":", "off", "]", ",", "fiducials_results", ".", "wave", "[", "k", "+", "'_1'", "]", "[", "on", ":", "off", "]", ")", "\n", "wave_metrics", ".", "dice", "[", "k", "]", "/=", "2.", "# Average both leads", "\n", "\n", "# Compute metrics - Fusion strategy of results of both leads, following Martinez et al.", "\n", "", "for", "i", "in", "range", "(", "filt_all_0", ".", "shape", "[", "1", "]", ")", ":", "\n", "# If any GT beat has a correspondence to any segmented beat, true positive + accounts for on/offset error", "\n", "                ", "if", "(", "len", "(", "corr", "[", "i", "]", "[", "0", "]", ")", "!=", "0", ")", "or", "(", "len", "(", "corr", "[", "i", "]", "[", "1", "]", ")", "!=", "0", ")", ":", "\n", "# Mark beat as true positive", "\n", "                    ", "wave_metrics", ".", "truepositive", "[", "k", "]", "+=", "1", "\n", "\n", "# To compute the onset-offset errors, check which is the lead with the least error to the GT (Martinez et al.)", "\n", "if", "len", "(", "corr", "[", "i", "]", "[", "0", "]", ")", "!=", "0", ":", "\n", "                        ", "onset_0", "=", "(", "d_on_0", "[", "i", "]", "-", "r_on_0", "[", "corr", "[", "i", "]", "[", "0", "]", "]", ")", "\n", "offset_0", "=", "(", "d_of_0", "[", "i", "]", "-", "r_of_0", "[", "corr", "[", "i", "]", "[", "0", "]", "]", ")", "\n", "", "else", ":", "\n", "                        ", "onset_0", "=", "np", ".", "asarray", "(", "[", "np", ".", "inf", "]", ")", "\n", "offset_0", "=", "np", ".", "asarray", "(", "[", "np", ".", "inf", "]", ")", "\n", "", "if", "len", "(", "corr", "[", "i", "]", "[", "1", "]", ")", "!=", "0", ":", "\n", "                        ", "onset_1", "=", "(", "d_on_1", "[", "i", "]", "-", "r_on_1", "[", "corr", "[", "i", "]", "[", "1", "]", "]", ")", "\n", "offset_1", "=", "(", "d_of_1", "[", "i", "]", "-", "r_of_1", "[", "corr", "[", "i", "]", "[", "1", "]", "]", ")", "\n", "", "else", ":", "\n", "                        ", "onset_1", "=", "np", ".", "asarray", "(", "[", "np", ".", "inf", "]", ")", "\n", "offset_1", "=", "np", ".", "asarray", "(", "[", "np", ".", "inf", "]", ")", "\n", "\n", "# Concatenate errors in one error vector", "\n", "", "onset_error", "=", "np", ".", "hstack", "(", "(", "onset_0", ",", "onset_1", ")", ")", "\n", "offset_error", "=", "np", ".", "hstack", "(", "(", "offset_0", ",", "offset_1", ")", ")", "\n", "\n", "# Onset/offset Error as the value resulting in the minimum absolute value", "\n", "wave_metrics", ".", "onseterror", "[", "k", "]", "+=", "[", "int", "(", "onset_error", "[", "np", ".", "argmin", "(", "np", ".", "abs", "(", "onset_error", ")", ")", "]", ")", "]", "\n", "wave_metrics", ".", "offseterror", "[", "k", "]", "+=", "[", "int", "(", "offset_error", "[", "np", ".", "argmin", "(", "np", ".", "abs", "(", "offset_error", ")", ")", "]", ")", "]", "\n", "\n", "# If any GT beat has a correspondence to more than one segmented beat, ", "\n", "#     the rest of the pairs have to be false positives (Martinez et al.)", "\n", "", "if", "(", "len", "(", "corr", "[", "i", "]", "[", "0", "]", ")", ">", "1", ")", "and", "(", "len", "(", "corr", "[", "i", "]", "[", "1", "]", ")", ">", "1", ")", ":", "\n", "                    ", "wave_metrics", ".", "falsepositive", "[", "k", "]", "+=", "min", "(", "[", "len", "(", "corr", "[", "i", "]", "[", "0", "]", ")", ",", "len", "(", "corr", "[", "i", "]", "[", "1", "]", ")", "]", ")", "-", "1", "\n", "\n", "# If any GT beat has no correspondence to any segmented beat, false negative", "\n", "", "if", "(", "len", "(", "corr", "[", "i", "]", "[", "0", "]", ")", "==", "0", ")", "and", "(", "len", "(", "corr", "[", "i", "]", "[", "1", "]", ")", "==", "0", ")", ":", "\n", "                    ", "wave_metrics", ".", "falsenegative", "[", "k", "]", "+=", "1", "\n", "\n", "# False positives will correspond to those existing in the results that do not correspond to any beat in the GT (the not chosen)", "\n", "", "", "wave_metrics", ".", "falsepositive", "[", "k", "]", "+=", "len", "(", "not_chosen_0", ")", "+", "len", "(", "not_chosen_1", ")", "-", "(", "filt_corr", "[", "not_chosen_1", ",", ":", "]", "[", ":", ",", "not_chosen_0", "]", ")", ".", "sum", "(", ")", "\n", "\n", "# Mark the key as computed", "\n", "wave_metrics", ".", "keys", ".", "append", "(", "k", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.evaluation.wave_evaluation_from_metrics": [[220, 243], ["numpy.asarray", "numpy.asarray", "len"], "function", ["None"], ["", "", "", "def", "wave_evaluation_from_metrics", "(", "wave_metrics", ",", "test", ")", ":", "\n", "    ", "tp", "=", "0", "\n", "fp", "=", "0", "\n", "fn", "=", "0", "\n", "dice", "=", "0", "\n", "on", "=", "[", "]", "\n", "of", "=", "[", "]", "\n", "\n", "for", "k", "in", "test", ":", "\n", "        ", "tp", "+=", "wave_metrics", ".", "truepositive", "[", "k", "]", "\n", "fp", "+=", "wave_metrics", ".", "falsepositive", "[", "k", "]", "\n", "fn", "+=", "wave_metrics", ".", "falsenegative", "[", "k", "]", "\n", "on", "+=", "wave_metrics", ".", "onseterror", "[", "k", "]", "\n", "of", "+=", "wave_metrics", ".", "offseterror", "[", "k", "]", "\n", "dice", "+=", "wave_metrics", ".", "dice", "[", "k", "]", "\n", "\n", "", "precision", "=", "tp", "/", "(", "tp", "+", "fp", ")", "\n", "recall", "=", "tp", "/", "(", "tp", "+", "fn", ")", "\n", "on", "=", "np", ".", "asarray", "(", "on", ")", "\n", "of", "=", "np", ".", "asarray", "(", "of", ")", "\n", "dice", "=", "dice", "/", "len", "(", "test", ")", "\n", "\n", "return", "precision", ",", "recall", ",", "on", ",", "of", ",", "dice", "\n", "\n"]], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.evaluation.metric_computation": [[245, 251], ["evaluation.compute_wave_metrics", "evaluation.compute_wave_metrics", "evaluation.compute_wave_metrics"], "function", ["home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.evaluation2.compute_wave_metrics", "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.evaluation2.compute_wave_metrics", "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.evaluation2.compute_wave_metrics"], ["", "def", "metric_computation", "(", "config", ",", "data", ",", "metrics", ",", "results", ",", "test", ",", "recompute", "=", "False", ")", ":", "\n", "    ", "compute_wave_metrics", "(", "config", ",", "data", ".", "P", ",", "results", ".", "P", ",", "metrics", ".", "P", ",", "test", ",", "data", ".", "validity", ",", "recompute", ")", "\n", "compute_wave_metrics", "(", "config", ",", "data", ".", "QRS", ",", "results", ".", "QRS", ",", "metrics", ".", "QRS", ",", "test", ",", "data", ".", "validity", ",", "recompute", ")", "\n", "compute_wave_metrics", "(", "config", ",", "data", ".", "T", ",", "results", ".", "T", ",", "metrics", ".", "T", ",", "test", ",", "data", ".", "validity", ",", "recompute", ")", "\n", "\n", "return", "metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.transforms.DistanceMapTransform": [[5, 14], ["DataStorage.P.wave.keys", "mode.lower", "transforms.GetDistanceMap", "transforms.GetDistanceMap", "transforms.GetDistanceMap"], "function", ["home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.transforms.GetDistanceMap", "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.transforms.GetDistanceMap", "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.transforms.GetDistanceMap"], ["def", "DistanceMapTransform", "(", "DataStorage", ",", "mode", "=", "'log'", ")", ":", "\n", "    ", "assert", "mode", ".", "lower", "(", ")", "in", "(", "'log'", ",", "'linear'", ")", "\n", "\n", "# For every element in the database", "\n", "for", "k", "in", "DataStorage", ".", "P", ".", "wave", ".", "keys", "(", ")", ":", "\n", "# Store distances", "\n", "        ", "DataStorage", ".", "P", ".", "wave", "[", "k", "]", "=", "GetDistanceMap", "(", "DataStorage", ".", "P", ".", "wave", "[", "k", "]", ",", "mode", ")", "\n", "DataStorage", ".", "QRS", ".", "wave", "[", "k", "]", "=", "GetDistanceMap", "(", "DataStorage", ".", "QRS", ".", "wave", "[", "k", "]", ",", "mode", ")", "\n", "DataStorage", ".", "T", ".", "wave", "[", "k", "]", "=", "GetDistanceMap", "(", "DataStorage", ".", "T", ".", "wave", "[", "k", "]", ",", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.transforms.GetDistanceMap": [[16, 32], ["numpy.zeros_like", "mode.lower", "numpy.logical_or", "mode.lower", "scipy.ndimage.distance_transform_edt", "numpy.logical_not", "numpy.log", "numpy.log", "numpy.pad", "numpy.logical_not", "scipy.ndimage.distance_transform_edt", "np.zeros_like.clip", "np.zeros_like.clip"], "function", ["None"], ["", "", "def", "GetDistanceMap", "(", "mask", ",", "mode", "=", "'log'", ")", ":", "\n", "    ", "assert", "mode", ".", "lower", "(", ")", "in", "(", "'log'", ",", "'linear'", ")", "\n", "\n", "# Create storage for distance map", "\n", "distance", "=", "np", ".", "zeros_like", "(", "mask", ")", "\n", "\n", "# Due to edge calculation method in ContourLoss, masks have to extend 1 sample to the left", "\n", "mask", "=", "np", ".", "logical_or", "(", "np", ".", "pad", "(", "mask", ",", "(", "(", "0", ",", "1", ")", ",", ")", ",", "'edge'", ")", "[", "1", ":", "]", ",", "mask", ")", ".", "values", "\n", "\n", "# Obtain the distance transform", "\n", "distance", "=", "dist_transform", "(", "np", ".", "logical_not", "(", "mask", ")", ")", "*", "np", ".", "logical_not", "(", "mask", ")", "-", "(", "dist_transform", "(", "mask", ")", "-", "1", ")", "*", "mask", "\n", "\n", "# Clip and log it", "\n", "if", "mode", ".", "lower", "(", ")", "==", "'log'", ":", "distance", "=", "np", ".", "log", "(", "distance", ".", "clip", "(", "min", "=", "0.5", ")", ")", "-", "np", ".", "log", "(", "-", "distance", ".", "clip", "(", "max", "=", "-", "0.5", ")", ")", "\n", "\n", "return", "distance", "\n", "\n"]], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.transforms.SignalPower": [[34, 36], ["numpy.mean", "numpy.median"], "function", ["None"], ["", "def", "SignalPower", "(", "X", ")", ":", "\n", "    ", "return", "np", ".", "mean", "(", "(", "X", "-", "np", ".", "median", "(", "X", ")", ")", "**", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.transforms.additive_white_gaussian_noise": [[37, 47], ["transforms.SignalPower", "numpy.random.normal", "numpy.random.uniform", "numpy.sqrt", "len"], "function", ["home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.transforms.SignalPower"], ["", "def", "additive_white_gaussian_noise", "(", "X", ",", "snr", ")", ":", "\n", "# Compute signal power", "\n", "    ", "Power", "=", "SignalPower", "(", "X", ")", "\n", "\n", "# Calculate signal to noise ratio with randomness", "\n", "SignalToNoiseRatio", "=", "snr", "+", "np", ".", "random", ".", "uniform", "(", "low", "=", "-", "snr", "/", "10", ",", "high", "=", "snr", "/", "10", ")", "\n", "NoisePower", "=", "Power", "/", "10", "**", "(", "SignalToNoiseRatio", "/", "10.", ")", "\n", "Noise", "=", "np", ".", "random", ".", "normal", "(", "0", ",", "np", ".", "sqrt", "(", "NoisePower", ")", ",", "len", "(", "X", ")", ")", "\n", "\n", "return", "Noise", "\n", "\n"]], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.transforms.random_spikes": [[48, 91], ["transforms.SignalPower", "numpy.random.randint", "numpy.zeros", "scipy.interpolate.interp1d", "scipy.interpolate.interp1d.", "numpy.random.randint", "numpy.zeros", "numpy.sqrt", "numpy.convolve", "numpy.random.uniform", "numpy.random.uniform", "numpy.random.uniform", "numpy.random.uniform", "numpy.random.uniform", "numpy.linspace", "numpy.linspace", "numpy.sqrt", "numpy.random.uniform", "numpy.random.randint", "np.convolve.sum"], "function", ["home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.transforms.SignalPower"], ["", "def", "random_spikes", "(", "X", ",", "snr", ",", "period", ")", ":", "\n", "# Compute signal power", "\n", "    ", "Power", "=", "SignalPower", "(", "X", ")", "\n", "\n", "# Specify number of samples", "\n", "N", "=", "np", ".", "random", ".", "randint", "(", "7", ",", "13", ")", "\n", "\n", "# Define a randomly initialized filter bank", "\n", "F", "=", "np", ".", "zeros", "(", "(", "5", ",", ")", ")", "\n", "F", "[", "0", "]", "=", "np", ".", "random", ".", "uniform", "(", "-", "0.15", ",", "0.25", ",", "1", ")", "[", "0", "]", "\n", "F", "[", "1", "]", "=", "np", ".", "random", ".", "uniform", "(", "0.25", ",", "0.5", ",", "1", ")", "[", "0", "]", "\n", "F", "[", "2", "]", "=", "np", ".", "random", ".", "uniform", "(", "1", ",", "2", ",", "1", ")", "[", "0", "]", "\n", "F", "[", "3", "]", "=", "np", ".", "random", ".", "uniform", "(", "-", "0.5", ",", "0.25", ",", "1", ")", "[", "0", "]", "\n", "F", "[", "4", "]", "=", "np", ".", "random", ".", "uniform", "(", "0", ",", "0.25", ",", "1", ")", "[", "0", "]", "\n", "\n", "# Interpolate to number of samples", "\n", "interp", "=", "interp1d", "(", "np", ".", "linspace", "(", "0", ",", "1", ",", "F", ".", "size", ")", ",", "F", ",", "kind", "=", "'quadratic'", ")", "\n", "F", "=", "interp", "(", "np", ".", "linspace", "(", "0", ",", "1", ",", "N", ")", ")", "\n", "E", "=", "(", "F", "**", "2", ")", ".", "sum", "(", ")", "\n", "F", "=", "F", "/", "np", ".", "sqrt", "(", "E", ")", "\n", "\n", "SNRdb", "=", "snr", "+", "np", ".", "random", ".", "uniform", "(", "low", "=", "-", "snr", "/", "N", ",", "high", "=", "snr", "/", "N", ")", "\n", "T", "=", "period", "+", "np", ".", "random", ".", "randint", "(", "low", "=", "-", "period", "/", "4", ",", "high", "=", "period", "/", "4", ")", "\n", "P", "=", "np", ".", "random", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "T", ")", "\n", "\n", "# Train of deltas", "\n", "Noise", "=", "np", ".", "zeros", "(", "X", ".", "shape", ")", "\n", "Noise", "[", "P", ":", ":", "T", "]", "=", "1", "\n", "\n", "# Compute real period of the signal", "\n", "Treal", "=", "Noise", ".", "size", "/", "Noise", ".", "sum", "(", ")", "\n", "\n", "# Compute noise power", "\n", "NoisePower", "=", "Power", "/", "10", "**", "(", "SNRdb", "/", "10.", ")", "\n", "Amplitude", "=", "np", ".", "sqrt", "(", "NoisePower", "*", "Treal", ")", "\n", "\n", "# Specify filter normalized to power", "\n", "F", "=", "Amplitude", "*", "F", "\n", "\n", "# Convolution of deltas", "\n", "Noise", "=", "np", ".", "convolve", "(", "Noise", ",", "F", ",", "'same'", ")", "\n", "\n", "return", "Noise", "\n", "\n"]], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.transforms.sinusoidal_noise": [[92, 105], ["transforms.SignalPower", "numpy.sqrt", "numpy.random.uniform", "numpy.random.uniform", "numpy.sin", "numpy.random.uniform", "numpy.arange", "len"], "function", ["home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.transforms.SignalPower"], ["", "def", "sinusoidal_noise", "(", "X", ",", "snr", ",", "freq", ")", ":", "\n", "# Compute signal power", "\n", "    ", "Power", "=", "SignalPower", "(", "X", ")", "\n", "\n", "SNRdb", "=", "snr", "+", "np", ".", "random", ".", "uniform", "(", "low", "=", "-", "snr", "/", "10", ",", "high", "=", "snr", "/", "10", ")", "\n", "Freq", "=", "freq", "+", "np", ".", "random", ".", "uniform", "(", "low", "=", "-", "freq", "/", "4", ",", "high", "=", "freq", "/", "4", ")", "\n", "\n", "NormFreq", "=", "2.", "*", "np", ".", "pi", "*", "Freq", "/", "250.", "\n", "NoisePower", "=", "Power", "/", "10", "**", "(", "SNRdb", "/", "10.", ")", "\n", "Amplitude", "=", "np", ".", "sqrt", "(", "2", "*", "NoisePower", ")", "\n", "Noise", "=", "Amplitude", "*", "np", ".", "sin", "(", "NormFreq", "*", "np", ".", "arange", "(", "len", "(", "X", ")", ")", "+", "np", ".", "random", ".", "uniform", "(", "low", "=", "-", "np", ".", "pi", ",", "high", "=", "np", ".", "pi", ")", ")", "# Random initial phase", "\n", "\n", "return", "Noise", "\n", "\n"]], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.transforms.pacemaker_spikes": [[106, 121], ["transforms.SignalPower", "numpy.sqrt", "numpy.zeros", "numpy.random.uniform", "numpy.where", "numpy.random.randint", "int", "numpy.diff", "float", "len", "len"], "function", ["home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.transforms.SignalPower"], ["", "def", "pacemaker_spikes", "(", "X", ",", "y", ",", "snr", ")", ":", "\n", "# Compute signal power", "\n", "    ", "Power", "=", "SignalPower", "(", "X", ")", "\n", "\n", "SNRdb", "=", "snr", "+", "np", ".", "random", ".", "uniform", "(", "low", "=", "-", "snr", "/", "10", ",", "high", "=", "snr", "/", "10", ")", "\n", "\n", "NoisePower", "=", "Power", "/", "10", "**", "(", "SNRdb", "/", "10.", ")", "\n", "Onset", "=", "np", ".", "where", "(", "np", ".", "diff", "(", "y", ")", "==", "1", ")", "[", "0", "]", "\n", "Onset", "=", "Onset", "+", "np", ".", "random", ".", "randint", "(", "low", "=", "-", "3", ",", "high", "=", "1", ",", "size", "=", "Onset", ".", "size", ")", "# 1 is never included", "\n", "Onset", "=", "Onset", "[", "Onset", ">=", "0", "]", "\n", "Amplitude", "=", "np", ".", "sqrt", "(", "NoisePower", "*", "int", "(", "float", "(", "len", "(", "X", ")", ")", "/", "len", "(", "Onset", ")", ")", ")", "\n", "Noise", "=", "np", ".", "zeros", "(", "X", ".", "shape", ")", "\n", "Noise", "[", "Onset", "]", "=", "Amplitude", "\n", "\n", "return", "Noise", "\n", "\n"]], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.transforms.amplifier_saturation": [[122, 135], ["numpy.zeros", "numpy.max", "numpy.abs", "numpy.abs", "numpy.random.uniform"], "function", ["None"], ["", "def", "amplifier_saturation", "(", "X", ",", "threshold", ")", ":", "\n", "    ", "Noise", "=", "np", ".", "zeros", "(", "X", ".", "shape", ")", "\n", "Maxmin", "=", "np", ".", "max", "(", "np", ".", "abs", "(", "X", ")", ")", "\n", "Percentile", "=", "threshold", "+", "np", ".", "random", ".", "uniform", "(", "low", "=", "-", "threshold", "/", "4", ",", "high", "=", "threshold", "/", "4", ")", "# Random percentile change", "\n", "\n", "# Saturate on a percentage of the maximum value", "\n", "SatValue", "=", "np", ".", "abs", "(", "Maxmin", "*", "(", "100", "-", "Percentile", ")", "/", "100", ")", "\n", "\n", "# Saturate on range (-oo, -v] U [v, +oo), as saturation is symmetrical", "\n", "Noise", "[", "X", ">=", "SatValue", "]", "=", "SatValue", "-", "X", "[", "X", ">=", "SatValue", "]", "\n", "Noise", "[", "X", "<=", "-", "SatValue", "]", "=", "-", "SatValue", "-", "X", "[", "X", "<=", "-", "SatValue", "]", "\n", "\n", "return", "Noise", "\n", "\n"]], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.transforms.DataAugmentationTransform": [[136, 151], ["transforms.additive_white_gaussian_noise", "transforms.random_spikes", "transforms.sinusoidal_noise", "transforms.sinusoidal_noise", "transforms.pacemaker_spikes", "transforms.amplifier_saturation"], "function", ["home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.transforms.additive_white_gaussian_noise", "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.transforms.random_spikes", "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.transforms.sinusoidal_noise", "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.transforms.sinusoidal_noise", "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.transforms.pacemaker_spikes", "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.transforms.amplifier_saturation"], ["", "def", "DataAugmentationTransform", "(", "X", ",", "label", ",", "parameters", ",", "y", ")", ":", "\n", "    ", "if", "(", "label", "==", "'awgn'", ")", ":", "\n", "        ", "Noise", "=", "additive_white_gaussian_noise", "(", "X", ",", "parameters", ")", "\n", "", "elif", "(", "label", "==", "'spikes'", ")", ":", "\n", "        ", "Noise", "=", "random_spikes", "(", "X", ",", "*", "parameters", ")", "\n", "", "elif", "(", "label", "==", "'powerline'", ")", ":", "\n", "        ", "Noise", "=", "sinusoidal_noise", "(", "X", ",", "*", "parameters", ")", "\n", "", "elif", "(", "label", "==", "'baseline'", ")", ":", "\n", "        ", "Noise", "=", "sinusoidal_noise", "(", "X", ",", "parameters", "[", "0", "]", ",", "0", ")", "\n", "", "elif", "(", "label", "==", "'pacemaker'", ")", ":", "\n", "        ", "Noise", "=", "pacemaker_spikes", "(", "X", ",", "y", ",", "parameters", ")", "\n", "", "elif", "(", "label", "==", "'sat_threshold'", ")", ":", "\n", "        ", "Noise", "=", "amplifier_saturation", "(", "X", ",", "parameters", ")", "\n", "\n", "", "return", "Noise", "\n", "", ""]], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.disambiguator.select_loss": [[6, 12], ["switcher.get", "loss.lower"], "function", ["None"], ["def", "select_loss", "(", "loss", ")", ":", "\n", "    ", "switcher", "=", "{", "\n", "'dice'", ":", "DiceLoss", ",", "\n", "'jaccard'", ":", "JaccardLoss", "\n", "}", "\n", "return", "switcher", ".", "get", "(", "loss", ".", "lower", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.disambiguator.select_optimizer": [[14, 25], ["switcher.get", "optim.lower"], "function", ["None"], ["", "def", "select_optimizer", "(", "optim", ")", ":", "\n", "    ", "switcher", "=", "{", "\n", "'adadelta'", ":", "keras", ".", "optimizers", ".", "Adadelta", ",", "\n", "'adagrad'", ":", "keras", ".", "optimizers", ".", "Adagrad", ",", "\n", "'adam'", ":", "keras", ".", "optimizers", ".", "Adam", ",", "\n", "'adamax'", ":", "keras", ".", "optimizers", ".", "Adamax", ",", "\n", "'rmsprop'", ":", "keras", ".", "optimizers", ".", "RMSprop", ",", "\n", "'sgd'", ":", "keras", ".", "optimizers", ".", "SGD", ",", "\n", "'nadam'", ":", "keras", ".", "optimizers", ".", "Nadam", "\n", "}", "\n", "return", "switcher", ".", "get", "(", "optim", ".", "lower", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.disambiguator.select_kernel_initializer": [[27, 47], ["switcher.get", "keras.initializers.Zeros", "keras.initializers.Zeros", "keras.initializers.Ones", "keras.initializers.Ones", "keras.initializers.Orthogonal", "keras.initializers.Orthogonal", "keras.initializers.VarianceScaling", "keras.initializers.VarianceScaling", "keras.initializers.TruncatedNormal", "keras.initializers.TruncatedNormal", "keras.initializers.RandomUniform", "keras.initializers.RandomUniform", "keras.initializers.RandomNormal", "keras.initializers.RandomNormal", "keras.initializers.Identity", "keras.initializers.Identity", "keras.initializers.glorot_normal", "keras.initializers.glorot_normal", "keras.initializers.glorot_normal", "keras.initializers.glorot_normal", "keras.initializers.glorot_uniform", "keras.initializers.glorot_uniform", "keras.initializers.glorot_uniform", "keras.initializers.glorot_uniform", "keras.initializers.he_normal", "keras.initializers.he_normal", "keras.initializers.he_uniform", "keras.initializers.he_uniform", "keras.initializers.lecun_normal", "keras.initializers.lecun_normal", "keras.initializers.lecun_uniform", "keras.initializers.lecun_uniform", "kernel_init.lower"], "function", ["None"], ["", "def", "select_kernel_initializer", "(", "kernel_init", ")", ":", "\n", "    ", "switcher", "=", "{", "\n", "'zeros'", ":", "keras", ".", "initializers", ".", "Zeros", "(", ")", ",", "\n", "'ones'", ":", "keras", ".", "initializers", ".", "Ones", "(", ")", ",", "\n", "'orthogonal'", ":", "keras", ".", "initializers", ".", "Orthogonal", "(", ")", ",", "\n", "'variance_scaling'", ":", "keras", ".", "initializers", ".", "VarianceScaling", "(", ")", ",", "\n", "'truncated_normal'", ":", "keras", ".", "initializers", ".", "TruncatedNormal", "(", ")", ",", "\n", "'random_uniform'", ":", "keras", ".", "initializers", ".", "RandomUniform", "(", ")", ",", "\n", "'random_normal'", ":", "keras", ".", "initializers", ".", "RandomNormal", "(", ")", ",", "\n", "'identity'", ":", "keras", ".", "initializers", ".", "Identity", "(", ")", ",", "\n", "'glorot_normal'", ":", "keras", ".", "initializers", ".", "glorot_normal", "(", ")", ",", "\n", "'xavier_normal'", ":", "keras", ".", "initializers", ".", "glorot_normal", "(", ")", ",", "\n", "'glorot_uniform'", ":", "keras", ".", "initializers", ".", "glorot_uniform", "(", ")", ",", "\n", "'xavier_uniform'", ":", "keras", ".", "initializers", ".", "glorot_uniform", "(", ")", ",", "\n", "'he_normal'", ":", "keras", ".", "initializers", ".", "he_normal", "(", ")", ",", "\n", "'he_normal'", ":", "keras", ".", "initializers", ".", "he_uniform", "(", ")", ",", "\n", "'lecun_normal'", ":", "keras", ".", "initializers", ".", "lecun_normal", "(", ")", ",", "\n", "'lecun_uniform'", ":", "keras", ".", "initializers", ".", "lecun_uniform", "(", ")", "\n", "}", "\n", "return", "switcher", ".", "get", "(", "kernel_init", ".", "lower", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.modules.soft_orthogonal_regularizer": [[13, 26], ["keras.int_shape", "keras.reshape", "keras.backend.square", "keras.backend.square", "keras.backend.square", "keras.backend.square", "keras.backend.sum", "keras.backend.sum", "keras.backend.sum", "keras.backend.sum", "keras.backend.sqrt", "keras.backend.sqrt", "keras.backend.sqrt", "keras.backend.sqrt", "keras.dot", "keras.eye", "keras.transpose"], "function", ["None"], ["def", "soft_orthogonal_regularizer", "(", "d_rate", "=", "0.01", ")", ":", "\n", "    ", "def", "aux_so", "(", "w", ")", ":", "\n", "        ", "S", ",", "C", ",", "M", "=", "K", ".", "int_shape", "(", "w", ")", "\n", "wf", "=", "K", ".", "reshape", "(", "w", ",", "[", "S", "*", "C", ",", "M", "]", ")", "\n", "o", "=", "K", ".", "dot", "(", "K", ".", "transpose", "(", "wf", ")", ",", "wf", ")", "-", "K", ".", "eye", "(", "M", ",", "dtype", "=", "wf", ".", "dtype", ")", "\n", "n", "=", "keras", ".", "backend", ".", "square", "(", "o", ")", "\n", "n", "=", "keras", ".", "backend", ".", "sum", "(", "n", ")", "\n", "n", "=", "keras", ".", "backend", ".", "sqrt", "(", "n", ")", "\n", "out", "=", "d_rate", "*", "n", "\n", "\n", "return", "out", "\n", "\n", "", "return", "aux_so", "\n", "\n"]], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.modules.spectral_res_iso_reg": [[27, 50], ["keras.int_shape", "keras.reshape", "keras.random_uniform", "keras.dot", "tensorflow.divide", "keras.dot", "keras.dot", "keras.eye", "keras.sum", "keras.transpose", "keras.square", "keras.sum", "keras.sum", "keras.square", "keras.square"], "function", ["None"], ["", "def", "spectral_res_iso_reg", "(", "d_rate", "=", "0.01", ",", "w_rate", "=", "1e-4", ")", ":", "\n", "    ", "def", "aux_srip", "(", "w", ")", ":", "\n", "        ", "inp_shape", "=", "K", ".", "int_shape", "(", "w", ")", "\n", "row_dims", "=", "inp_shape", "[", "0", "]", "*", "inp_shape", "[", "1", "]", "\n", "col_dims", "=", "inp_shape", "[", "2", "]", "\n", "\n", "# Reshape w into square matrix", "\n", "w", "=", "K", ".", "reshape", "(", "w", ",", "(", "row_dims", ",", "col_dims", ")", ")", "\n", "\n", "# Compute the norm of the weight matrix", "\n", "n", "=", "K", ".", "dot", "(", "K", ".", "transpose", "(", "w", ")", ",", "w", ")", "-", "K", ".", "eye", "(", "col_dims", ",", "dtype", "=", "w", ".", "dtype", ")", "\n", "\n", "# Compute vector of random uniform values", "\n", "v", "=", "K", ".", "random_uniform", "(", "(", "col_dims", ",", "1", ")", ")", "\n", "\n", "v1", "=", "K", ".", "dot", "(", "n", ",", "v", ")", "\n", "norm1", "=", "K", ".", "sum", "(", "K", ".", "square", "(", "v1", ")", ")", "**", "0.5", "\n", "v2", "=", "tf", ".", "divide", "(", "v1", ",", "norm1", ")", "\n", "v3", "=", "K", ".", "dot", "(", "n", ",", "v2", ")", "\n", "\n", "return", "d_rate", "*", "(", "K", ".", "sum", "(", "K", ".", "square", "(", "v3", ")", ")", "**", "0.5", ")", "+", "w_rate", "*", "(", "K", ".", "sum", "(", "K", ".", "square", "(", "w", ")", ")", "**", "0.5", ")", "\n", "\n", "", "return", "aux_srip", "\n", "\n"]], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.modules.StemModule": [[12, 45], ["m_name.lower", "keras.layers.Conv1D", "keras.layers.Conv1D", "keras.layers.Conv1D", "keras.layers.ReLU", "keras.layers.ReLU", "keras.layers.ReLU", "keras.layers.BatchNormalization", "keras.layers.BatchNormalization", "keras.layers.BatchNormalization", "keras.layers.Conv1D", "keras.layers.Conv1D", "keras.layers.Conv1D", "keras.layers.Conv1D", "keras.layers.Conv1D", "keras.layers.Conv1D", "keras.layers.ReLU", "keras.layers.ReLU", "keras.layers.ReLU", "keras.layers.BatchNormalization", "keras.layers.BatchNormalization", "keras.layers.BatchNormalization", "keras.layers.Conv1D", "keras.layers.Conv1D", "keras.layers.Conv1D", "keras.layers.SeparableConv1D", "keras.layers.SeparableConv1D", "keras.layers.SeparableConv1D", "keras.layers.ReLU", "keras.layers.ReLU", "keras.layers.ReLU", "keras.layers.BatchNormalization", "keras.layers.BatchNormalization", "keras.layers.BatchNormalization", "keras.layers.SeparableConv1D", "keras.layers.SeparableConv1D", "keras.layers.SeparableConv1D", "m_name.lower", "m_name.lower", "ValueError"], "function", ["None"], ["\n", "def", "soft_orthogonal_regularizer", "(", "d_rate", "=", "0.01", ")", ":", "\n", "    ", "def", "aux_so", "(", "w", ")", ":", "\n", "        ", "S", ",", "C", ",", "M", "=", "K", ".", "int_shape", "(", "w", ")", "\n", "wf", "=", "K", ".", "reshape", "(", "w", ",", "[", "S", "*", "C", ",", "M", "]", ")", "\n", "o", "=", "K", ".", "dot", "(", "K", ".", "transpose", "(", "wf", ")", ",", "wf", ")", "-", "K", ".", "eye", "(", "M", ",", "dtype", "=", "wf", ".", "dtype", ")", "\n", "n", "=", "keras", ".", "backend", ".", "square", "(", "o", ")", "\n", "n", "=", "keras", ".", "backend", ".", "sum", "(", "n", ")", "\n", "n", "=", "keras", ".", "backend", ".", "sqrt", "(", "n", ")", "\n", "out", "=", "d_rate", "*", "n", "\n", "\n", "return", "out", "\n", "\n", "", "return", "aux_so", "\n", "\n", "", "def", "spectral_res_iso_reg", "(", "d_rate", "=", "0.01", ",", "w_rate", "=", "1e-4", ")", ":", "\n", "    ", "def", "aux_srip", "(", "w", ")", ":", "\n", "        ", "inp_shape", "=", "K", ".", "int_shape", "(", "w", ")", "\n", "row_dims", "=", "inp_shape", "[", "0", "]", "*", "inp_shape", "[", "1", "]", "\n", "col_dims", "=", "inp_shape", "[", "2", "]", "\n", "\n", "# Reshape w into square matrix", "\n", "w", "=", "K", ".", "reshape", "(", "w", ",", "(", "row_dims", ",", "col_dims", ")", ")", "\n", "\n", "# Compute the norm of the weight matrix", "\n", "n", "=", "K", ".", "dot", "(", "K", ".", "transpose", "(", "w", ")", ",", "w", ")", "-", "K", ".", "eye", "(", "col_dims", ",", "dtype", "=", "w", ".", "dtype", ")", "\n", "\n", "# Compute vector of random uniform values", "\n", "v", "=", "K", ".", "random_uniform", "(", "(", "col_dims", ",", "1", ")", ")", "\n", "\n", "v1", "=", "K", ".", "dot", "(", "n", ",", "v", ")", "\n", "norm1", "=", "K", ".", "sum", "(", "K", ".", "square", "(", "v1", ")", ")", "**", "0.5", "\n", "v2", "=", "tf", ".", "divide", "(", "v1", ",", "norm1", ")", "\n", "v3", "=", "K", ".", "dot", "(", "n", ",", "v2", ")", "\n"]], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.modules.LevelModule": [[48, 99], ["keras.layers.add", "keras.layers.add", "keras.layers.add", "keras.layers.add", "keras.layers.add", "keras.layers.add", "m_name.lower", "keras.layers.ReLU", "keras.layers.ReLU", "keras.layers.ReLU", "keras.layers.BatchNormalization", "keras.layers.BatchNormalization", "keras.layers.BatchNormalization", "keras.layers.Conv1D", "keras.layers.Conv1D", "keras.layers.Conv1D", "keras.layers.ReLU", "keras.layers.ReLU", "keras.layers.ReLU", "keras.layers.BatchNormalization", "keras.layers.BatchNormalization", "keras.layers.BatchNormalization", "keras.layers.Conv1D", "keras.layers.Conv1D", "keras.layers.Conv1D", "keras.layers.ReLU", "keras.layers.ReLU", "keras.layers.ReLU", "keras.layers.BatchNormalization", "keras.layers.BatchNormalization", "keras.layers.BatchNormalization", "keras.layers.Conv1D", "keras.layers.Conv1D", "keras.layers.Conv1D", "keras.layers.ReLU", "keras.layers.ReLU", "keras.layers.ReLU", "keras.layers.BatchNormalization", "keras.layers.BatchNormalization", "keras.layers.BatchNormalization", "keras.layers.Conv1D", "keras.layers.Conv1D", "keras.layers.Conv1D", "keras.layers.ReLU", "keras.layers.ReLU", "keras.layers.ReLU", "keras.layers.BatchNormalization", "keras.layers.BatchNormalization", "keras.layers.BatchNormalization", "keras.layers.SeparableConv1D", "keras.layers.SeparableConv1D", "keras.layers.SeparableConv1D", "keras.layers.ReLU", "keras.layers.ReLU", "keras.layers.ReLU", "keras.layers.BatchNormalization", "keras.layers.BatchNormalization", "keras.layers.BatchNormalization", "keras.layers.SeparableConv1D", "keras.layers.SeparableConv1D", "keras.layers.SeparableConv1D", "m_name.lower", "keras.layers.ReLU", "keras.layers.ReLU", "keras.layers.ReLU", "keras.layers.BatchNormalization", "keras.layers.BatchNormalization", "keras.layers.BatchNormalization", "keras.layers.Conv1D", "keras.layers.Conv1D", "keras.layers.Conv1D", "keras.layers.ReLU", "keras.layers.ReLU", "keras.layers.ReLU", "keras.layers.BatchNormalization", "keras.layers.BatchNormalization", "keras.layers.BatchNormalization", "keras.layers.SeparableConv1D", "keras.layers.SeparableConv1D", "keras.layers.SeparableConv1D", "m_name.lower", "ValueError"], "function", ["None"], ["\n", "", "return", "aux_srip", "\n", "\n", "\n", "################################################################################################################################################################################", "\n", "", "def", "StemModule", "(", "m_name", ")", ":", "\n", "    ", "if", "m_name", ".", "lower", "(", ")", "==", "'vanilla'", ":", "ConvolutionalOperation", "=", "keras", ".", "layers", ".", "Conv1D", "\n", "elif", "m_name", ".", "lower", "(", ")", "==", "'residual'", ":", "ConvolutionalOperation", "=", "keras", ".", "layers", ".", "Conv1D", "\n", "elif", "m_name", ".", "lower", "(", ")", "==", "'xception'", ":", "ConvolutionalOperation", "=", "keras", ".", "layers", ".", "SeparableConv1D", "\n", "else", ":", "raise", "ValueError", "(", "'Module name not correctly specified'", ")", "\n", "\n", "def", "Stem", "(", "x", ",", "n_filters", ",", "ker_size", ",", "dropout_rate", ",", "kernel_init", ")", ":", "\n", "        ", "m", "=", "ConvolutionalOperation", "(", "n_filters", ",", "\n", "ker_size", ",", "\n", "padding", "=", "'same'", ",", "\n", "kernel_initializer", "=", "kernel_init", ")", "(", "x", ")", "\n", "\n", "m", "=", "keras", ".", "layers", ".", "ReLU", "(", ")", "(", "m", ")", "\n", "m", "=", "keras", ".", "layers", ".", "BatchNormalization", "(", ")", "(", "m", ")", "\n", "m", "=", "keras", ".", "layers", ".", "SpatialDropout1D", "(", "dropout_rate", ")", "(", "m", ")", "\n", "m", "=", "ConvolutionalOperation", "(", "n_filters", ",", "\n", "ker_size", ",", "\n", "padding", "=", "'same'", ",", "\n", "kernel_initializer", "=", "kernel_init", ")", "(", "m", ")", "\n", "\n", "return", "m", "\n", "\n", "", "return", "Stem", "\n", "\n", "\n", "\n", "################################################################################################################################################################################", "\n", "", "def", "LevelModule", "(", "m_name", ")", ":", "\n", "    ", "if", "m_name", ".", "lower", "(", ")", "==", "'vanilla'", ":", "ConvolutionalOperation", "=", "keras", ".", "layers", ".", "Conv1D", "\n", "elif", "m_name", ".", "lower", "(", ")", "==", "'residual'", ":", "ConvolutionalOperation", "=", "keras", ".", "layers", ".", "Conv1D", "\n", "elif", "m_name", ".", "lower", "(", ")", "==", "'xception'", ":", "ConvolutionalOperation", "=", "keras", ".", "layers", ".", "SeparableConv1D", "\n", "else", ":", "raise", "ValueError", "(", "'Module name not correctly specified'", ")", "\n", "\n", "def", "res_OutputOperation", "(", "x", ",", "m", ",", "n_filters", ",", "dropout_rate", ")", ":", "\n", "        ", "if", "(", "x", ".", "shape", "[", "-", "1", "]", "!=", "n_filters", ")", ":", "\n", "            ", "x", "=", "keras", ".", "layers", ".", "ReLU", "(", ")", "(", "x", ")", "\n", "x", "=", "keras", ".", "layers", ".", "BatchNormalization", "(", ")", "(", "x", ")", "\n", "x", "=", "keras", ".", "layers", ".", "SpatialDropout1D", "(", "dropout_rate", ")", "(", "x", ")", "\n", "x", "=", "ConvolutionalOperation", "(", "n_filters", ",", "kernel_size", "=", "(", "1", ",", ")", ",", "padding", "=", "'same'", ")", "(", "x", ")", "\n", "\n", "", "return", "keras", ".", "layers", ".", "add", "(", "[", "x", ",", "m", "]", ")", "\n", "\n", "", "if", "m_name", ".", "lower", "(", ")", "==", "'vanilla'", ":", "OutputOperation", "=", "lambda", "x", ",", "m", ",", "n_filters", ",", "dropout_rate", ":", "m", "\n", "elif", "m_name", ".", "lower", "(", ")", "==", "'residual'", ":", "OutputOperation", "=", "lambda", "x", ",", "m", ",", "n_filters", ",", "dropout_rate", ":", "res_OutputOperation", "(", "x", ",", "m", ",", "n_filters", ",", "dropout_rate", ")", "\n", "elif", "m_name", ".", "lower", "(", ")", "==", "'xception'", ":", "OutputOperation", "=", "lambda", "x", ",", "m", ",", "n_filters", ",", "dropout_rate", ":", "res_OutputOperation", "(", "x", ",", "m", ",", "n_filters", ",", "dropout_rate", ")", "\n", "else", ":", "raise", "ValueError", "(", "'Module name not correctly specified'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.modules.AtrousMiddleModule": [[101, 148], ["m_name.lower", "keras.layers.ReLU", "keras.layers.ReLU", "keras.layers.ReLU", "keras.layers.BatchNormalization", "keras.layers.BatchNormalization", "keras.layers.BatchNormalization", "keras.layers.Conv1D", "keras.layers.Conv1D", "keras.layers.Conv1D", "keras.layers.Conv1D", "keras.layers.Conv1D", "keras.layers.Conv1D", "keras.layers.Conv1D", "keras.layers.Conv1D", "keras.layers.Conv1D", "keras.layers.Conv1D", "keras.layers.Conv1D", "keras.layers.Conv1D", "keras.layers.RepeatVector", "keras.layers.RepeatVector", "keras.layers.RepeatVector", "keras.layers.Concatenate", "keras.layers.Concatenate", "keras.layers.Concatenate", "keras.layers.ReLU", "keras.layers.ReLU", "keras.layers.ReLU", "keras.layers.BatchNormalization", "keras.layers.BatchNormalization", "keras.layers.BatchNormalization", "keras.layers.Conv1D", "keras.layers.Conv1D", "keras.layers.Conv1D", "keras.layers.Conv1D", "keras.layers.Conv1D", "keras.layers.Conv1D", "keras.layers.Conv1D", "keras.layers.Conv1D", "keras.layers.Conv1D", "keras.layers.Conv1D", "keras.layers.Conv1D", "keras.layers.Conv1D", "keras.layers.RepeatVector", "keras.layers.RepeatVector", "keras.layers.RepeatVector", "keras.layers.Concatenate", "keras.layers.Concatenate", "keras.layers.Concatenate", "keras.layers.ReLU", "keras.layers.ReLU", "keras.layers.ReLU", "keras.layers.BatchNormalization", "keras.layers.BatchNormalization", "keras.layers.BatchNormalization", "keras.layers.SeparableConv1D", "keras.layers.SeparableConv1D", "keras.layers.SeparableConv1D", "keras.layers.SeparableConv1D", "keras.layers.SeparableConv1D", "keras.layers.SeparableConv1D", "keras.layers.SeparableConv1D", "keras.layers.SeparableConv1D", "keras.layers.SeparableConv1D", "keras.layers.SeparableConv1D", "keras.layers.SeparableConv1D", "keras.layers.SeparableConv1D", "keras.layers.RepeatVector", "keras.layers.RepeatVector", "keras.layers.RepeatVector", "keras.layers.Concatenate", "keras.layers.Concatenate", "keras.layers.Concatenate", "m_name.lower", "keras.layers.GlobalAveragePooling1D", "keras.layers.GlobalAveragePooling1D", "keras.layers.GlobalAveragePooling1D", "keras.layers.GlobalAveragePooling1D", "keras.layers.GlobalAveragePooling1D", "keras.layers.GlobalAveragePooling1D", "keras.layers.GlobalAveragePooling1D", "keras.layers.GlobalAveragePooling1D", "keras.layers.GlobalAveragePooling1D", "keras.layers.GlobalAveragePooling1D", "keras.layers.GlobalAveragePooling1D", "keras.layers.GlobalAveragePooling1D", "keras.layers.GlobalAveragePooling1D", "keras.layers.GlobalAveragePooling1D", "keras.layers.GlobalAveragePooling1D", "keras.layers.GlobalAveragePooling1D", "keras.layers.GlobalAveragePooling1D", "keras.layers.GlobalAveragePooling1D", "m_name.lower", "ValueError"], "function", ["None"], ["        ", "m", "=", "keras", ".", "layers", ".", "ReLU", "(", ")", "(", "x", ")", "\n", "m", "=", "keras", ".", "layers", ".", "BatchNormalization", "(", ")", "(", "m", ")", "\n", "m", "=", "keras", ".", "layers", ".", "SpatialDropout1D", "(", "dropout_rate", ")", "(", "m", ")", "\n", "m", "=", "ConvolutionalOperation", "(", "n_filters", ",", "\n", "ker_size", ",", "\n", "padding", "=", "'same'", ",", "\n", "kernel_initializer", "=", "kernel_init", ")", "(", "m", ")", "\n", "\n", "m", "=", "keras", ".", "layers", ".", "ReLU", "(", ")", "(", "m", ")", "\n", "m", "=", "keras", ".", "layers", ".", "BatchNormalization", "(", ")", "(", "m", ")", "\n", "m", "=", "keras", ".", "layers", ".", "SpatialDropout1D", "(", "dropout_rate", ")", "(", "m", ")", "\n", "m", "=", "ConvolutionalOperation", "(", "n_filters", ",", "\n", "ker_size", ",", "\n", "padding", "=", "'same'", ",", "\n", "kernel_initializer", "=", "kernel_init", ")", "(", "m", ")", "\n", "\n", "return", "OutputOperation", "(", "x", ",", "m", ",", "n_filters", ",", "dropout_rate", ")", "\n", "\n", "", "return", "LevelBlock", "\n", "\n", "\n", "", "def", "AtrousMiddleModule", "(", "m_name", ")", ":", "\n", "    ", "if", "m_name", ".", "lower", "(", ")", "==", "'vanilla'", ":", "ConvolutionalOperation", "=", "keras", ".", "layers", ".", "Conv1D", "\n", "elif", "m_name", ".", "lower", "(", ")", "==", "'residual'", ":", "ConvolutionalOperation", "=", "keras", ".", "layers", ".", "Conv1D", "\n", "elif", "m_name", ".", "lower", "(", ")", "==", "'xception'", ":", "ConvolutionalOperation", "=", "keras", ".", "layers", ".", "SeparableConv1D", "\n", "else", ":", "raise", "ValueError", "(", "'Module name not correctly specified'", ")", "\n", "\n", "def", "AtrousBlock", "(", "x", ",", "n_filters", ",", "ker_size", ",", "dropout_rate", ",", "kernel_init", ")", ":", "\n", "        ", "m", "=", "keras", ".", "layers", ".", "ReLU", "(", ")", "(", "x", ")", "\n", "m", "=", "keras", ".", "layers", ".", "BatchNormalization", "(", ")", "(", "m", ")", "\n", "m", "=", "keras", ".", "layers", ".", "SpatialDropout1D", "(", "dropout_rate", ")", "(", "m", ")", "\n", "m1", "=", "ConvolutionalOperation", "(", "n_filters", ",", "\n", "1", ",", "\n", "dilation_rate", "=", "1", ",", "\n", "padding", "=", "'same'", ",", "\n", "kernel_initializer", "=", "kernel_init", ")", "(", "m", ")", "\n", "m6", "=", "ConvolutionalOperation", "(", "n_filters", ",", "\n", "ker_size", ",", "\n", "dilation_rate", "=", "6", ",", "\n", "padding", "=", "'same'", ",", "\n", "kernel_initializer", "=", "kernel_init", ")", "(", "m", ")", "\n", "m12", "=", "ConvolutionalOperation", "(", "n_filters", ",", "\n", "ker_size", ",", "\n", "dilation_rate", "=", "12", ",", "\n", "padding", "=", "'same'", ",", "\n", "kernel_initializer", "=", "kernel_init", ")", "(", "m", ")", "\n", "m18", "=", "ConvolutionalOperation", "(", "n_filters", ",", "\n", "ker_size", ",", "\n"]], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.modules.PoolingModule": [[151, 210], ["keras.layers.add", "keras.layers.add", "keras.layers.add", "keras.layers.add", "keras.layers.add", "keras.layers.add", "m_name.lower", "keras.layers.ReLU", "keras.layers.ReLU", "keras.layers.ReLU", "keras.layers.BatchNormalization", "keras.layers.BatchNormalization", "keras.layers.BatchNormalization", "keras.layers.Conv1D", "keras.layers.Conv1D", "keras.layers.Conv1D", "keras.layers.ReLU", "keras.layers.ReLU", "keras.layers.ReLU", "keras.layers.BatchNormalization", "keras.layers.BatchNormalization", "keras.layers.BatchNormalization", "keras.layers.Conv1D", "keras.layers.Conv1D", "keras.layers.Conv1D", "keras.layers.ReLU", "keras.layers.ReLU", "keras.layers.ReLU", "keras.layers.BatchNormalization", "keras.layers.BatchNormalization", "keras.layers.BatchNormalization", "keras.layers.Conv1D", "keras.layers.Conv1D", "keras.layers.Conv1D", "keras.layers.ReLU", "keras.layers.ReLU", "keras.layers.ReLU", "keras.layers.BatchNormalization", "keras.layers.BatchNormalization", "keras.layers.BatchNormalization", "keras.layers.Conv1D", "keras.layers.Conv1D", "keras.layers.Conv1D", "keras.layers.ReLU", "keras.layers.ReLU", "keras.layers.ReLU", "keras.layers.BatchNormalization", "keras.layers.BatchNormalization", "keras.layers.BatchNormalization", "keras.layers.Conv1D", "keras.layers.Conv1D", "keras.layers.Conv1D", "keras.layers.ReLU", "keras.layers.ReLU", "keras.layers.ReLU", "keras.layers.BatchNormalization", "keras.layers.BatchNormalization", "keras.layers.BatchNormalization", "keras.layers.SeparableConv1D", "keras.layers.SeparableConv1D", "keras.layers.SeparableConv1D", "keras.layers.ReLU", "keras.layers.ReLU", "keras.layers.ReLU", "keras.layers.BatchNormalization", "keras.layers.BatchNormalization", "keras.layers.BatchNormalization", "keras.layers.SeparableConv1D", "keras.layers.SeparableConv1D", "keras.layers.SeparableConv1D", "keras.layers.ReLU", "keras.layers.ReLU", "keras.layers.ReLU", "keras.layers.BatchNormalization", "keras.layers.BatchNormalization", "keras.layers.BatchNormalization", "keras.layers.SeparableConv1D", "keras.layers.SeparableConv1D", "keras.layers.SeparableConv1D", "m_name.lower", "keras.layers.MaxPooling1D", "keras.layers.MaxPooling1D", "keras.layers.MaxPooling1D", "keras.layers.AveragePooling1D", "keras.layers.AveragePooling1D", "keras.layers.AveragePooling1D", "keras.layers.MaxPooling1D", "keras.layers.MaxPooling1D", "keras.layers.MaxPooling1D", "keras.layers.AveragePooling1D", "keras.layers.AveragePooling1D", "keras.layers.AveragePooling1D", "keras.layers.MaxPooling1D", "keras.layers.MaxPooling1D", "keras.layers.MaxPooling1D", "keras.layers.AveragePooling1D", "keras.layers.AveragePooling1D", "keras.layers.AveragePooling1D", "m_name.lower"], "function", ["None"], ["kernel_initializer", "=", "kernel_init", ")", "(", "m", ")", "\n", "\n", "mgap", "=", "keras", ".", "layers", ".", "GlobalAveragePooling1D", "(", ")", "(", "m1", ")", "if", "(", "m", ".", "shape", "[", "1", "]", "!=", "n_filters", ")", "else", "keras", ".", "layers", ".", "GlobalAveragePooling1D", "(", ")", "(", "m", ")", "\n", "mgap", "=", "keras", ".", "layers", ".", "RepeatVector", "(", "m", ".", "shape", "[", "1", "]", ".", "value", ")", "(", "mgap", ")", "\n", "m", "=", "keras", ".", "layers", ".", "Concatenate", "(", ")", "(", "[", "m1", ",", "m6", ",", "m12", ",", "m18", ",", "mgap", "]", ")", "\n", "\n", "return", "m", "\n", "\n", "", "return", "AtrousBlock", "\n", "\n", "\n", "################################################################################################################################################################################", "\n", "", "def", "PoolingModule", "(", "m_name", ")", ":", "\n", "    ", "if", "m_name", ".", "lower", "(", ")", "==", "'vanilla'", ":", "ConvolutionalOperation", "=", "keras", ".", "layers", ".", "Conv1D", "\n", "elif", "m_name", ".", "lower", "(", ")", "==", "'residual'", ":", "ConvolutionalOperation", "=", "keras", ".", "layers", ".", "Conv1D", "\n", "elif", "m_name", ".", "lower", "(", ")", "==", "'xception'", ":", "ConvolutionalOperation", "=", "keras", ".", "layers", ".", "SeparableConv1D", "\n", "else", ":", "raise", "ValueError", "(", "'Module name not correctly specified'", ")", "\n", "\n", "def", "res_OutputOperation", "(", "x", ",", "m", ",", "n_filters", ",", "dropout_rate", ")", ":", "\n", "        ", "x", "=", "keras", ".", "layers", ".", "ReLU", "(", ")", "(", "x", ")", "\n", "x", "=", "keras", ".", "layers", ".", "BatchNormalization", "(", ")", "(", "x", ")", "\n", "x", "=", "keras", ".", "layers", ".", "SpatialDropout1D", "(", "dropout_rate", ")", "(", "x", ")", "\n", "x", "=", "ConvolutionalOperation", "(", "n_filters", ",", "\n", "kernel_size", "=", "(", "1", ",", ")", ",", "\n", "strides", "=", "(", "2", ",", ")", ",", "\n", "padding", "=", "'same'", ")", "(", "x", ")", "\n", "\n", "return", "keras", ".", "layers", ".", "add", "(", "[", "x", ",", "m", "]", ")", "\n", "\n", "", "if", "m_name", ".", "lower", "(", ")", "==", "'vanilla'", ":", "OutputOperation", "=", "lambda", "x", ",", "m", ",", "n_filters", ",", "dropout_rate", ":", "m", "\n", "elif", "m_name", ".", "lower", "(", ")", "==", "'residual'", ":", "OutputOperation", "=", "lambda", "x", ",", "m", ",", "n_filters", ",", "dropout_rate", ":", "res_OutputOperation", "(", "x", ",", "m", ",", "n_filters", ",", "dropout_rate", ")", "\n", "elif", "m_name", ".", "lower", "(", ")", "==", "'xception'", ":", "OutputOperation", "=", "lambda", "x", ",", "m", ",", "n_filters", ",", "dropout_rate", ":", "res_OutputOperation", "(", "x", ",", "m", ",", "n_filters", ",", "dropout_rate", ")", "\n", "else", ":", "raise", "ValueError", "(", "'Module name not correctly specified'", ")", "\n", "\n", "\n", "def", "PoolingBlock", "(", "x", ",", "n_filters", ",", "ker_size", ",", "dropout_rate", ",", "kernel_init", ",", "strides", "=", "(", "2", ",", ")", ")", ":", "\n", "        ", "m", "=", "keras", ".", "layers", ".", "ReLU", "(", ")", "(", "x", ")", "\n", "m", "=", "keras", ".", "layers", ".", "BatchNormalization", "(", ")", "(", "m", ")", "\n", "m", "=", "keras", ".", "layers", ".", "SpatialDropout1D", "(", "dropout_rate", ")", "(", "m", ")", "\n", "m", "=", "ConvolutionalOperation", "(", "n_filters", ",", "\n", "ker_size", ",", "\n", "padding", "=", "'same'", ",", "\n", "kernel_initializer", "=", "kernel_init", ")", "(", "m", ")", "\n", "\n", "m", "=", "keras", ".", "layers", ".", "ReLU", "(", ")", "(", "m", ")", "\n", "m", "=", "keras", ".", "layers", ".", "BatchNormalization", "(", ")", "(", "m", ")", "\n", "m", "=", "keras", ".", "layers", ".", "SpatialDropout1D", "(", "dropout_rate", ")", "(", "m", ")", "\n", "m", "=", "ConvolutionalOperation", "(", "n_filters", ",", "\n", "ker_size", ",", "\n", "padding", "=", "'same'", ",", "\n", "kernel_initializer", "=", "kernel_init", ")", "(", "m", ")", "\n", "\n", "m", "=", "keras", ".", "layers", ".", "MaxPooling1D", "(", "pool_size", "=", "ker_size", ",", "padding", "=", "'same'", ",", "strides", "=", "strides", ")", "(", "m", ")", "\n", "\n", "return", "OutputOperation", "(", "x", ",", "m", ",", "n_filters", ",", "dropout_rate", ")", "\n", "\n", "", "return", "PoolingBlock", "\n", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.modules.OutputModule": [[213, 240], ["m_name.lower", "keras.layers.ReLU", "keras.layers.ReLU", "keras.layers.ReLU", "keras.layers.BatchNormalization", "keras.layers.BatchNormalization", "keras.layers.BatchNormalization", "keras.layers.Conv1D", "keras.layers.Conv1D", "keras.layers.Conv1D", "keras.layers.ReLU", "keras.layers.ReLU", "keras.layers.ReLU", "keras.layers.BatchNormalization", "keras.layers.BatchNormalization", "keras.layers.BatchNormalization", "keras.layers.Conv1D", "keras.layers.Conv1D", "keras.layers.Conv1D", "keras.layers.ReLU", "keras.layers.ReLU", "keras.layers.ReLU", "keras.layers.BatchNormalization", "keras.layers.BatchNormalization", "keras.layers.BatchNormalization", "keras.layers.SeparableConv1D", "keras.layers.SeparableConv1D", "keras.layers.SeparableConv1D", "m_name.lower", "m_name.lower", "ValueError"], "function", ["None"], ["        ", "ConvolutionalOperation", "=", "keras", ".", "layers", ".", "Conv1D", "\n", "OutputOperation", "=", "lambda", "x", ",", "m", ":", "m", "\n", "", "elif", "m_name", ".", "lower", "(", ")", "==", "'residual'", ":", "\n", "        ", "ConvolutionalOperation", "=", "keras", ".", "layers", ".", "Conv1D", "\n", "OutputOperation", "=", "lambda", "x", ",", "m", ":", "keras", ".", "layers", ".", "add", "(", "[", "x", ",", "m", "]", ")", "\n", "", "elif", "m_name", ".", "lower", "(", ")", "==", "'xception'", ":", "\n", "        ", "ConvolutionalOperation", "=", "keras", ".", "layers", ".", "SeparableConv1D", "\n", "OutputOperation", "=", "lambda", "x", ",", "m", ":", "keras", ".", "layers", ".", "add", "(", "[", "x", ",", "m", "]", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Module name not correctly specified'", ")", "\n", "\n", "", "def", "OutputBlock", "(", "x", ",", "n_filters", ",", "ker_size", ",", "dropout_rate", ",", "kernel_init", ")", ":", "\n", "        ", "m", "=", "keras", ".", "layers", ".", "ReLU", "(", ")", "(", "x", ")", "\n", "m", "=", "keras", ".", "layers", ".", "BatchNormalization", "(", ")", "(", "m", ")", "\n", "m", "=", "keras", ".", "layers", ".", "SpatialDropout1D", "(", "dropout_rate", ")", "(", "m", ")", "\n", "m", "=", "ConvolutionalOperation", "(", "n_filters", ",", "\n", "1", ",", "\n", "padding", "=", "'same'", ",", "\n", "activation", "=", "'sigmoid'", ",", "\n", "kernel_initializer", "=", "kernel_init", ")", "(", "m", ")", "\n", "\n", "return", "m", "\n", "\n", "", "return", "OutputBlock", "\n", "\n", "", ""]], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.evaluation2.evaluate": [[9, 27], ["utils.inference.predict", "numpy.concatenate", "evaluation2.retrieve_fiducials", "evaluation2.retrieve_fiducials", "evaluation2.metric_computation", "evaluation2.metric_computation", "evaluation2.save_results", "evaluation2.save_results", "os.path.splitext", "pandas.Index", "pandas.Index", "os.path.splitext"], "function", ["home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.inference.predict", "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.evaluation2.retrieve_fiducials", "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.evaluation2.retrieve_fiducials", "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.evaluation2.metric_computation", "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.evaluation2.metric_computation", "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.evaluation2.save_results", "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.evaluation2.save_results"], ["def", "evaluate", "(", "model", ",", "config", ",", "data", ",", "execinfo", ",", "metrics", ",", "metrics_CV2", ",", "results", ",", "results_CV2", ",", "recompute", ")", ":", "\n", "    ", "\"\"\"Wave evaluation\"\"\"", "\n", "predict", "(", "model", ",", "config", ",", "data", ",", "execinfo", ",", "results", ",", "results_CV2", ",", "recompute", ")", "\n", "\n", "# IF IT'S NOT THE OVERALL EVALUATION", "\n", "leads", "=", "np", ".", "concatenate", "(", "(", "pandas", ".", "Index", "(", "execinfo", ".", "test", ")", "+", "'_0'", ",", "pandas", ".", "Index", "(", "execinfo", ".", "test", ")", "+", "'_1'", ")", ")", "\n", "\n", "retrieve_fiducials", "(", "results", ",", "leads", ",", "recompute", ")", "\n", "retrieve_fiducials", "(", "results_CV2", ",", "leads", ",", "recompute", ")", "\n", "\n", "### COMPUTE METRICS ###", "\n", "metric_computation", "(", "config", ",", "data", ",", "metrics", ",", "results", ",", "execinfo", ".", "test", ",", "recompute", ")", "\n", "metric_computation", "(", "config", ",", "data", ",", "metrics_CV2", ",", "results_CV2", ",", "execinfo", ".", "test", ",", "recompute", ")", "\n", "\n", "### SAVE RESULTS ###", "\n", "path_CV2", "=", "os", ".", "path", ".", "splitext", "(", "execinfo", ".", "results", ")", "[", "0", "]", "+", "'_CV2'", "+", "os", ".", "path", ".", "splitext", "(", "execinfo", ".", "results", ")", "[", "1", "]", "\n", "save_results", "(", "metrics", ",", "config", ",", "execinfo", ".", "test", ",", "execinfo", ".", "results", ")", "\n", "save_results", "(", "metrics_CV2", ",", "config", ",", "execinfo", ".", "test", ",", "path_CV2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.evaluation2.save_results": [[29, 47], ["dict", "evaluation2.wave_evaluation_from_metrics", "evaluation2.wave_evaluation_from_metrics", "evaluation2.wave_evaluation_from_metrics", "pandas.DataFrame", "pandas.DataFrame.to_csv", "output_path[].lower", "onset_P.mean", "onset_QRS.mean", "onset_T.mean", "onset_P.std", "onset_QRS.std", "onset_T.std", "offset_P.mean", "offset_QRS.mean", "offset_T.mean", "offset_P.std", "offset_QRS.std", "offset_T.std"], "function", ["home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.evaluation2.wave_evaluation_from_metrics", "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.evaluation2.wave_evaluation_from_metrics", "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.evaluation2.wave_evaluation_from_metrics"], ["", "def", "save_results", "(", "metrics", ",", "config", ",", "test", ",", "output_path", ")", ":", "\n", "    ", "if", "output_path", "[", "-", "4", ":", "]", ".", "lower", "(", ")", "!=", "'.csv'", ":", "output_path", "+=", "'.csv'", "\n", "res", "=", "dict", "(", ")", "\n", "\n", "precision_P", ",", "recall_P", ",", "onset_P", ",", "offset_P", ",", "dice_P", "=", "wave_evaluation_from_metrics", "(", "metrics", ".", "P", ",", "test", ")", "\n", "precision_QRS", ",", "recall_QRS", ",", "onset_QRS", ",", "offset_QRS", ",", "dice_QRS", "=", "wave_evaluation_from_metrics", "(", "metrics", ".", "QRS", ",", "test", ")", "\n", "precision_T", ",", "recall_T", ",", "onset_T", ",", "offset_T", ",", "dice_T", "=", "wave_evaluation_from_metrics", "(", "metrics", ".", "T", ",", "test", ")", "\n", "\n", "res", "[", "'Precision (P+)'", "]", "=", "[", "precision_P", ",", "precision_QRS", ",", "precision_T", "]", "\n", "res", "[", "'Recall (Se%)'", "]", "=", "[", "recall_P", ",", "recall_QRS", ",", "recall_T", "]", "\n", "res", "[", "'Onset error (Mean), ms'", "]", "=", "[", "onset_P", ".", "mean", "(", ")", "*", "(", "1.", "/", "config", ".", "sampling_freq", "*", "1000", ")", ",", "onset_QRS", ".", "mean", "(", ")", "*", "(", "1.", "/", "config", ".", "sampling_freq", "*", "1000", ")", ",", "onset_T", ".", "mean", "(", ")", "*", "(", "1.", "/", "config", ".", "sampling_freq", "*", "1000", ")", "]", "\n", "res", "[", "'Onset error (STD), ms'", "]", "=", "[", "onset_P", ".", "std", "(", ")", "*", "(", "1.", "/", "config", ".", "sampling_freq", "*", "1000", ")", ",", "onset_QRS", ".", "std", "(", ")", "*", "(", "1.", "/", "config", ".", "sampling_freq", "*", "1000", ")", ",", "onset_T", ".", "std", "(", ")", "*", "(", "1.", "/", "config", ".", "sampling_freq", "*", "1000", ")", "]", "\n", "res", "[", "'Offset error (Mean), ms'", "]", "=", "[", "offset_P", ".", "mean", "(", ")", "*", "(", "1.", "/", "config", ".", "sampling_freq", "*", "1000", ")", ",", "offset_QRS", ".", "mean", "(", ")", "*", "(", "1.", "/", "config", ".", "sampling_freq", "*", "1000", ")", ",", "offset_T", ".", "mean", "(", ")", "*", "(", "1.", "/", "config", ".", "sampling_freq", "*", "1000", ")", "]", "\n", "res", "[", "'Offset error (STD), ms'", "]", "=", "[", "offset_P", ".", "std", "(", ")", "*", "(", "1.", "/", "config", ".", "sampling_freq", "*", "1000", ")", ",", "offset_QRS", ".", "std", "(", ")", "*", "(", "1.", "/", "config", ".", "sampling_freq", "*", "1000", ")", ",", "offset_T", ".", "std", "(", ")", "*", "(", "1.", "/", "config", ".", "sampling_freq", "*", "1000", ")", "]", "\n", "res", "[", "'Dice Coefficient'", "]", "=", "[", "dice_P", ",", "dice_QRS", ",", "dice_T", "]", "\n", "\n", "res", "=", "pandas", ".", "DataFrame", "(", "res", ",", "columns", "=", "[", "'Precision (P+)'", ",", "'Recall (Se%)'", ",", "'Onset error (Mean), ms'", ",", "'Onset error (STD), ms'", ",", "'Offset error (Mean), ms'", ",", "'Offset error (STD), ms'", ",", "'Dice Coefficient'", "]", ",", "index", "=", "[", "'P wave'", ",", "'QRS wave'", ",", "'T wave'", "]", ")", "\n", "res", ".", "to_csv", "(", "output_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.evaluation2.retrieve_fiducials": [[49, 53], ["evaluation2.wave_fiducials", "evaluation2.wave_fiducials", "evaluation2.wave_fiducials"], "function", ["home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.evaluation2.wave_fiducials", "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.evaluation2.wave_fiducials", "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.evaluation2.wave_fiducials"], ["", "def", "retrieve_fiducials", "(", "results", ",", "test", ",", "recompute", "=", "False", ")", ":", "\n", "    ", "wave_fiducials", "(", "results", ".", "P", ",", "test", ",", "recompute", ")", "\n", "wave_fiducials", "(", "results", ".", "QRS", ",", "test", ",", "recompute", ")", "\n", "wave_fiducials", "(", "results", ".", "T", ",", "test", ",", "recompute", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.evaluation2.wave_fiducials": [[55, 63], ["numpy.diff", "wave.onset.keys", "numpy.pad", "numpy.where", "numpy.where"], "function", ["None"], ["", "def", "wave_fiducials", "(", "wave", ",", "test", ",", "recompute", "=", "False", ")", ":", "\n", "    ", "for", "k", "in", "test", ":", "\n", "        ", "if", "recompute", "or", "(", "k", "not", "in", "wave", ".", "onset", ".", "keys", "(", ")", ")", ":", "\n", "            ", "seg", "=", "np", ".", "diff", "(", "np", ".", "pad", "(", "wave", ".", "wave", "[", "k", "]", ".", "values", ",", "(", "(", "1", ",", "1", ")", ",", ")", ",", "'constant'", ",", "constant_values", "=", "0", ")", ",", "axis", "=", "-", "1", ")", "\n", "\n", "wave", ".", "onset", "[", "k", "]", "=", "np", ".", "where", "(", "seg", "==", "1.", ")", "[", "0", "]", "\n", "wave", ".", "offset", "[", "k", "]", "=", "np", ".", "where", "(", "seg", "==", "-", "1.", ")", "[", "0", "]", "-", "1", "\n", "wave", ".", "peak", "[", "k", "]", "=", "(", "wave", ".", "onset", "[", "k", "]", "+", "wave", ".", "offset", "[", "k", "]", ")", "//", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.evaluation2.get_correspondence_between_gt_and_predicted": [[65, 94], ["numpy.any", "numpy.any", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray"], "function", ["None"], ["", "", "", "def", "get_correspondence_between_gt_and_predicted", "(", "fiducials_data", ",", "fiducials_results", ",", "k", ",", "validity", ")", ":", "\n", "    ", "mask_on", "=", "(", "fiducials_data", ".", "onset", "[", "k", "]", ">=", "np", ".", "asarray", "(", "validity", "[", "k", "]", "[", "0", "]", ")", "[", ":", ",", "np", ".", "newaxis", "]", ")", "&", "(", "fiducials_data", ".", "onset", "[", "k", "]", "<=", "np", ".", "asarray", "(", "validity", "[", "k", "]", "[", "1", "]", ")", "[", ":", ",", "np", ".", "newaxis", "]", ")", "\n", "mask_peak", "=", "(", "fiducials_data", ".", "peak", "[", "k", "]", ">=", "np", ".", "asarray", "(", "validity", "[", "k", "]", "[", "0", "]", ")", "[", ":", ",", "np", ".", "newaxis", "]", ")", "&", "(", "fiducials_data", ".", "peak", "[", "k", "]", "<=", "np", ".", "asarray", "(", "validity", "[", "k", "]", "[", "1", "]", ")", "[", ":", ",", "np", ".", "newaxis", "]", ")", "\n", "mask_off", "=", "(", "fiducials_data", ".", "offset", "[", "k", "]", ">=", "np", ".", "asarray", "(", "validity", "[", "k", "]", "[", "0", "]", ")", "[", ":", ",", "np", ".", "newaxis", "]", ")", "&", "(", "fiducials_data", ".", "offset", "[", "k", "]", "<=", "np", ".", "asarray", "(", "validity", "[", "k", "]", "[", "1", "]", ")", "[", ":", ",", "np", ".", "newaxis", "]", ")", "\n", "mask_total", "=", "np", ".", "any", "(", "mask_on", "&", "mask_peak", "&", "mask_off", ",", "axis", "=", "0", ")", "# beat has to be found in every one", "\n", "\n", "d_on", "=", "fiducials_data", ".", "onset", "[", "k", "]", "[", "mask_total", "]", "\n", "d_pk", "=", "fiducials_data", ".", "peak", "[", "k", "]", "[", "mask_total", "]", "\n", "d_of", "=", "fiducials_data", ".", "offset", "[", "k", "]", "[", "mask_total", "]", "\n", "\n", "mask_on", "=", "(", "fiducials_results", ".", "onset", "[", "k", "]", ">=", "np", ".", "asarray", "(", "validity", "[", "k", "]", "[", "0", "]", ")", "[", ":", ",", "np", ".", "newaxis", "]", ")", "&", "(", "fiducials_results", ".", "onset", "[", "k", "]", "<=", "np", ".", "asarray", "(", "validity", "[", "k", "]", "[", "1", "]", ")", "[", ":", ",", "np", ".", "newaxis", "]", ")", "\n", "mask_peak", "=", "(", "fiducials_results", ".", "peak", "[", "k", "]", ">=", "np", ".", "asarray", "(", "validity", "[", "k", "]", "[", "0", "]", ")", "[", ":", ",", "np", ".", "newaxis", "]", ")", "&", "(", "fiducials_results", ".", "peak", "[", "k", "]", "<=", "np", ".", "asarray", "(", "validity", "[", "k", "]", "[", "1", "]", ")", "[", ":", ",", "np", ".", "newaxis", "]", ")", "\n", "mask_off", "=", "(", "fiducials_results", ".", "offset", "[", "k", "]", ">=", "np", ".", "asarray", "(", "validity", "[", "k", "]", "[", "0", "]", ")", "[", ":", ",", "np", ".", "newaxis", "]", ")", "&", "(", "fiducials_results", ".", "offset", "[", "k", "]", "<=", "np", ".", "asarray", "(", "validity", "[", "k", "]", "[", "1", "]", ")", "[", ":", ",", "np", ".", "newaxis", "]", ")", "\n", "mask_total", "=", "np", ".", "any", "(", "mask_on", "&", "mask_peak", "&", "mask_off", ",", "axis", "=", "0", ")", "# beat has to be found in every one", "\n", "\n", "r_on", "=", "fiducials_results", ".", "onset", "[", "k", "]", "[", "mask_total", "]", "\n", "r_pk", "=", "fiducials_results", ".", "peak", "[", "k", "]", "[", "mask_total", "]", "\n", "r_of", "=", "fiducials_results", ".", "offset", "[", "k", "]", "[", "mask_total", "]", "\n", "\n", "filtA", "=", "(", "d_on", "<=", "r_on", "[", ":", ",", "np", ".", "newaxis", "]", ")", "&", "(", "r_on", "[", ":", ",", "np", ".", "newaxis", "]", "<=", "d_of", ")", "\n", "filtB", "=", "(", "d_on", "<=", "r_pk", "[", ":", ",", "np", ".", "newaxis", "]", ")", "&", "(", "r_pk", "[", ":", ",", "np", ".", "newaxis", "]", "<=", "d_of", ")", "\n", "filtC", "=", "(", "d_on", "<=", "r_of", "[", ":", ",", "np", ".", "newaxis", "]", ")", "&", "(", "r_of", "[", ":", ",", "np", ".", "newaxis", "]", "<=", "d_of", ")", "\n", "filtD", "=", "(", "(", "r_on", "<=", "d_on", "[", ":", ",", "np", ".", "newaxis", "]", ")", "&", "(", "d_on", "[", ":", ",", "np", ".", "newaxis", "]", "<=", "r_of", ")", ")", ".", "T", "\n", "filtE", "=", "(", "(", "r_on", "<=", "d_pk", "[", ":", ",", "np", ".", "newaxis", "]", ")", "&", "(", "d_pk", "[", ":", ",", "np", ".", "newaxis", "]", "<=", "r_of", ")", ")", ".", "T", "\n", "filtF", "=", "(", "(", "r_on", "<=", "d_of", "[", ":", ",", "np", ".", "newaxis", "]", ")", "&", "(", "d_of", "[", ":", ",", "np", ".", "newaxis", "]", "<=", "r_of", ")", ")", ".", "T", "\n", "\n", "filt_all", "=", "filtA", "|", "filtB", "|", "filtC", "|", "filtD", "|", "filtE", "|", "filtF", "\n", "\n", "return", "filt_all", ",", "r_on", ",", "r_of", ",", "d_on", ",", "d_of", "\n", "\n"]], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.evaluation2.get_correspondence_between_predicted_leads": [[96, 125], ["numpy.any", "numpy.any", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray"], "function", ["None"], ["", "def", "get_correspondence_between_predicted_leads", "(", "fiducials_results", ",", "k", ",", "validity", ")", ":", "\n", "    ", "mask_on", "=", "(", "fiducials_results", ".", "onset", "[", "k", "+", "'_0'", "]", ">=", "np", ".", "asarray", "(", "validity", "[", "k", "+", "'_0'", "]", "[", "0", "]", ")", "[", ":", ",", "np", ".", "newaxis", "]", ")", "&", "(", "fiducials_results", ".", "onset", "[", "k", "+", "'_0'", "]", "<=", "np", ".", "asarray", "(", "validity", "[", "k", "+", "'_0'", "]", "[", "1", "]", ")", "[", ":", ",", "np", ".", "newaxis", "]", ")", "\n", "mask_peak", "=", "(", "fiducials_results", ".", "peak", "[", "k", "+", "'_0'", "]", ">=", "np", ".", "asarray", "(", "validity", "[", "k", "+", "'_0'", "]", "[", "0", "]", ")", "[", ":", ",", "np", ".", "newaxis", "]", ")", "&", "(", "fiducials_results", ".", "peak", "[", "k", "+", "'_0'", "]", "<=", "np", ".", "asarray", "(", "validity", "[", "k", "+", "'_0'", "]", "[", "1", "]", ")", "[", ":", ",", "np", ".", "newaxis", "]", ")", "\n", "mask_off", "=", "(", "fiducials_results", ".", "offset", "[", "k", "+", "'_0'", "]", ">=", "np", ".", "asarray", "(", "validity", "[", "k", "+", "'_0'", "]", "[", "0", "]", ")", "[", ":", ",", "np", ".", "newaxis", "]", ")", "&", "(", "fiducials_results", ".", "offset", "[", "k", "+", "'_0'", "]", "<=", "np", ".", "asarray", "(", "validity", "[", "k", "+", "'_0'", "]", "[", "1", "]", ")", "[", ":", ",", "np", ".", "newaxis", "]", ")", "\n", "mask_total", "=", "np", ".", "any", "(", "mask_on", "&", "mask_peak", "&", "mask_off", ",", "axis", "=", "0", ")", "# beat has to be found in every one", "\n", "\n", "res_0_on", "=", "fiducials_results", ".", "onset", "[", "k", "+", "'_0'", "]", "[", "mask_total", "]", "\n", "res_0_pk", "=", "fiducials_results", ".", "peak", "[", "k", "+", "'_0'", "]", "[", "mask_total", "]", "\n", "res_0_of", "=", "fiducials_results", ".", "offset", "[", "k", "+", "'_0'", "]", "[", "mask_total", "]", "\n", "\n", "mask_on", "=", "(", "fiducials_results", ".", "onset", "[", "k", "+", "'_1'", "]", ">=", "np", ".", "asarray", "(", "validity", "[", "k", "+", "'_1'", "]", "[", "0", "]", ")", "[", ":", ",", "np", ".", "newaxis", "]", ")", "&", "(", "fiducials_results", ".", "onset", "[", "k", "+", "'_1'", "]", "<=", "np", ".", "asarray", "(", "validity", "[", "k", "+", "'_1'", "]", "[", "1", "]", ")", "[", ":", ",", "np", ".", "newaxis", "]", ")", "\n", "mask_peak", "=", "(", "fiducials_results", ".", "peak", "[", "k", "+", "'_1'", "]", ">=", "np", ".", "asarray", "(", "validity", "[", "k", "+", "'_1'", "]", "[", "0", "]", ")", "[", ":", ",", "np", ".", "newaxis", "]", ")", "&", "(", "fiducials_results", ".", "peak", "[", "k", "+", "'_1'", "]", "<=", "np", ".", "asarray", "(", "validity", "[", "k", "+", "'_1'", "]", "[", "1", "]", ")", "[", ":", ",", "np", ".", "newaxis", "]", ")", "\n", "mask_off", "=", "(", "fiducials_results", ".", "offset", "[", "k", "+", "'_1'", "]", ">=", "np", ".", "asarray", "(", "validity", "[", "k", "+", "'_1'", "]", "[", "0", "]", ")", "[", ":", ",", "np", ".", "newaxis", "]", ")", "&", "(", "fiducials_results", ".", "offset", "[", "k", "+", "'_1'", "]", "<=", "np", ".", "asarray", "(", "validity", "[", "k", "+", "'_1'", "]", "[", "1", "]", ")", "[", ":", ",", "np", ".", "newaxis", "]", ")", "\n", "mask_total", "=", "np", ".", "any", "(", "mask_on", "&", "mask_peak", "&", "mask_off", ",", "axis", "=", "0", ")", "# beat has to be found in every one", "\n", "\n", "res_1_on", "=", "fiducials_results", ".", "onset", "[", "k", "+", "'_1'", "]", "[", "mask_total", "]", "\n", "res_1_pk", "=", "fiducials_results", ".", "peak", "[", "k", "+", "'_1'", "]", "[", "mask_total", "]", "\n", "res_1_of", "=", "fiducials_results", ".", "offset", "[", "k", "+", "'_1'", "]", "[", "mask_total", "]", "\n", "\n", "filtA", "=", "(", "res_0_on", "<=", "res_1_on", "[", ":", ",", "np", ".", "newaxis", "]", ")", "&", "(", "res_1_on", "[", ":", ",", "np", ".", "newaxis", "]", "<=", "res_0_of", ")", "\n", "filtB", "=", "(", "res_0_on", "<=", "res_1_pk", "[", ":", ",", "np", ".", "newaxis", "]", ")", "&", "(", "res_1_pk", "[", ":", ",", "np", ".", "newaxis", "]", "<=", "res_0_of", ")", "\n", "filtC", "=", "(", "res_0_on", "<=", "res_1_of", "[", ":", ",", "np", ".", "newaxis", "]", ")", "&", "(", "res_1_of", "[", ":", ",", "np", ".", "newaxis", "]", "<=", "res_0_of", ")", "\n", "filtD", "=", "(", "(", "res_1_on", "<=", "res_0_on", "[", ":", ",", "np", ".", "newaxis", "]", ")", "&", "(", "res_0_on", "[", ":", ",", "np", ".", "newaxis", "]", "<=", "res_1_of", ")", ")", ".", "T", "\n", "filtE", "=", "(", "(", "res_1_on", "<=", "res_0_pk", "[", ":", ",", "np", ".", "newaxis", "]", ")", "&", "(", "res_0_pk", "[", ":", ",", "np", ".", "newaxis", "]", "<=", "res_1_of", ")", ")", ".", "T", "\n", "filtF", "=", "(", "(", "res_1_on", "<=", "res_0_of", "[", ":", ",", "np", ".", "newaxis", "]", ")", "&", "(", "res_0_of", "[", ":", ",", "np", ".", "newaxis", "]", "<=", "res_1_of", ")", ")", ".", "T", "\n", "\n", "filt_all", "=", "filtA", "|", "filtB", "|", "filtC", "|", "filtD", "|", "filtE", "|", "filtF", "\n", "\n", "return", "filt_all", "\n", "\n"]], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.evaluation2.compute_dice_score": [[127, 131], ["mask_1.sum", "mask_2.sum", "numpy.finfo"], "function", ["None"], ["", "def", "compute_dice_score", "(", "mask_1", ",", "mask_2", ")", ":", "\n", "    ", "intersection", "=", "(", "mask_1", "*", "mask_2", ")", ".", "sum", "(", ")", "\n", "union", "=", "mask_1", ".", "sum", "(", ")", "+", "mask_2", ".", "sum", "(", ")", "\n", "return", "2.", "*", "intersection", "/", "(", "union", "+", "np", ".", "finfo", "(", "'double'", ")", ".", "eps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.evaluation2.compute_wave_metrics": [[133, 218], ["evaluation2.get_correspondence_between_gt_and_predicted", "evaluation2.get_correspondence_between_gt_and_predicted", "evaluation2.get_correspondence_between_predicted_leads", "dict", "numpy.zeros", "numpy.zeros", "range", "range", "range", "wave_metrics.keys.append", "numpy.where", "numpy.where", "len", "evaluation2.compute_dice_score", "evaluation2.compute_dice_score", "[].sum", "[].tolist", "[].tolist", "numpy.logical_not", "numpy.logical_not", "numpy.hstack", "numpy.hstack", "len", "len", "len", "len", "len", "numpy.asarray", "numpy.asarray", "len", "numpy.asarray", "numpy.asarray", "int", "int", "len", "len", "min", "len", "len", "numpy.where", "numpy.where", "len", "len", "numpy.argmin", "numpy.argmin", "numpy.abs", "numpy.abs"], "function", ["home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.evaluation.get_correspondence_between_gt_and_predicted", "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.evaluation.get_correspondence_between_gt_and_predicted", "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.evaluation.get_correspondence_between_predicted_leads", "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.evaluation.compute_dice_score", "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.evaluation.compute_dice_score"], ["", "def", "compute_wave_metrics", "(", "config", ",", "fiducials_data", ",", "fiducials_results", ",", "wave_metrics", ",", "test", ",", "validity", ",", "recompute", "=", "False", ")", ":", "\n", "    ", "for", "k", "in", "test", ":", "\n", "        ", "if", "(", "k", "not", "in", "wave_metrics", ".", "keys", ")", "or", "recompute", ":", "\n", "# If the prediction is different for every lead (single-lead strategy)", "\n", "            ", "filt_all_0", ",", "r_on_0", ",", "r_of_0", ",", "d_on_0", ",", "d_of_0", "=", "get_correspondence_between_gt_and_predicted", "(", "fiducials_data", ",", "fiducials_results", ",", "k", "+", "'_0'", ",", "validity", ")", "\n", "filt_all_1", ",", "r_on_1", ",", "r_of_1", ",", "d_on_1", ",", "d_of_1", "=", "get_correspondence_between_gt_and_predicted", "(", "fiducials_data", ",", "fiducials_results", ",", "k", "+", "'_1'", ",", "validity", ")", "\n", "filt_corr", "=", "get_correspondence_between_predicted_leads", "(", "fiducials_results", ",", "k", ",", "validity", ")", "# Will be an identity matrix in case of multi-lead", "\n", "\n", "# Check correspondence of GT beats to detected beats", "\n", "corr", "=", "dict", "(", ")", "\n", "\n", "# Account for already detected beats to calculate false positives", "\n", "chosen_0", "=", "np", ".", "zeros", "(", "(", "filt_all_0", ".", "shape", "[", "0", "]", ",", ")", ",", "dtype", "=", "bool", ")", "\n", "chosen_1", "=", "np", ".", "zeros", "(", "(", "filt_all_1", ".", "shape", "[", "0", "]", ",", ")", ",", "dtype", "=", "bool", ")", "\n", "\n", "for", "i", "in", "range", "(", "filt_all_0", ".", "shape", "[", "1", "]", ")", ":", "\n", "                ", "corr", "[", "i", "]", "=", "[", "np", ".", "where", "(", "filt_all_0", "[", ":", ",", "i", "]", ")", "[", "0", "]", ".", "tolist", "(", ")", ",", "\n", "np", ".", "where", "(", "filt_all_1", "[", ":", ",", "i", "]", ")", "[", "0", "]", ".", "tolist", "(", ")", "]", "\n", "chosen_0", "=", "chosen_0", "|", "filt_all_0", "[", ":", ",", "i", "]", "\n", "chosen_1", "=", "chosen_1", "|", "filt_all_1", "[", ":", ",", "i", "]", "\n", "\n", "# Retrieve beats detected that do not correspond to any GT beat (potential false positives)", "\n", "", "not_chosen_0", "=", "np", ".", "where", "(", "np", ".", "logical_not", "(", "chosen_0", ")", ")", "[", "0", "]", "\n", "not_chosen_1", "=", "np", ".", "where", "(", "np", ".", "logical_not", "(", "chosen_1", ")", ")", "[", "0", "]", "\n", "\n", "# Initialize metrics", "\n", "wave_metrics", ".", "truepositive", "[", "k", "]", "=", "0", "\n", "wave_metrics", ".", "falsepositive", "[", "k", "]", "=", "0", "\n", "wave_metrics", ".", "falsenegative", "[", "k", "]", "=", "0", "\n", "wave_metrics", ".", "dice", "[", "k", "]", "=", "0", "\n", "wave_metrics", ".", "onseterror", "[", "k", "]", "=", "[", "]", "\n", "wave_metrics", ".", "offseterror", "[", "k", "]", "=", "[", "]", "\n", "\n", "# Compute Dice coefficient", "\n", "for", "i", "in", "range", "(", "len", "(", "validity", "[", "k", "+", "'_0'", "]", "[", "0", "]", ")", ")", ":", "\n", "                ", "on", "=", "validity", "[", "k", "+", "'_0'", "]", "[", "0", "]", "[", "i", "]", "\n", "off", "=", "validity", "[", "k", "+", "'_0'", "]", "[", "1", "]", "[", "i", "]", "\n", "\n", "wave_metrics", ".", "dice", "[", "k", "]", "+=", "compute_dice_score", "(", "fiducials_data", ".", "wave", "[", "k", "+", "'_0'", "]", "[", "on", ":", "off", "]", ",", "fiducials_results", ".", "wave", "[", "k", "+", "'_0'", "]", "[", "on", ":", "off", "]", ")", "\n", "wave_metrics", ".", "dice", "[", "k", "]", "+=", "compute_dice_score", "(", "fiducials_data", ".", "wave", "[", "k", "+", "'_1'", "]", "[", "on", ":", "off", "]", ",", "fiducials_results", ".", "wave", "[", "k", "+", "'_1'", "]", "[", "on", ":", "off", "]", ")", "\n", "wave_metrics", ".", "dice", "[", "k", "]", "/=", "2.", "# Average both leads", "\n", "\n", "# Compute metrics - Fusion strategy of results of both leads, following Martinez et al.", "\n", "", "for", "i", "in", "range", "(", "filt_all_0", ".", "shape", "[", "1", "]", ")", ":", "\n", "# If any GT beat has a correspondence to any segmented beat, true positive + accounts for on/offset error", "\n", "                ", "if", "(", "len", "(", "corr", "[", "i", "]", "[", "0", "]", ")", "!=", "0", ")", "or", "(", "len", "(", "corr", "[", "i", "]", "[", "1", "]", ")", "!=", "0", ")", ":", "\n", "# Mark beat as true positive", "\n", "                    ", "wave_metrics", ".", "truepositive", "[", "k", "]", "+=", "1", "\n", "\n", "# To compute the onset-offset errors, check which is the lead with the least error to the GT (Martinez et al.)", "\n", "if", "len", "(", "corr", "[", "i", "]", "[", "0", "]", ")", "!=", "0", ":", "\n", "                        ", "onset_0", "=", "(", "d_on_0", "[", "i", "]", "-", "r_on_0", "[", "corr", "[", "i", "]", "[", "0", "]", "]", ")", "\n", "offset_0", "=", "(", "d_of_0", "[", "i", "]", "-", "r_of_0", "[", "corr", "[", "i", "]", "[", "0", "]", "]", ")", "\n", "", "else", ":", "\n", "                        ", "onset_0", "=", "np", ".", "asarray", "(", "[", "np", ".", "inf", "]", ")", "\n", "offset_0", "=", "np", ".", "asarray", "(", "[", "np", ".", "inf", "]", ")", "\n", "", "if", "len", "(", "corr", "[", "i", "]", "[", "1", "]", ")", "!=", "0", ":", "\n", "                        ", "onset_1", "=", "(", "d_on_1", "[", "i", "]", "-", "r_on_1", "[", "corr", "[", "i", "]", "[", "1", "]", "]", ")", "\n", "offset_1", "=", "(", "d_of_1", "[", "i", "]", "-", "r_of_1", "[", "corr", "[", "i", "]", "[", "1", "]", "]", ")", "\n", "", "else", ":", "\n", "                        ", "onset_1", "=", "np", ".", "asarray", "(", "[", "np", ".", "inf", "]", ")", "\n", "offset_1", "=", "np", ".", "asarray", "(", "[", "np", ".", "inf", "]", ")", "\n", "\n", "# Concatenate errors in one error vector", "\n", "", "onset_error", "=", "np", ".", "hstack", "(", "(", "onset_0", ",", "onset_1", ")", ")", "\n", "offset_error", "=", "np", ".", "hstack", "(", "(", "offset_0", ",", "offset_1", ")", ")", "\n", "\n", "# Onset/offset Error as the value resulting in the minimum absolute value", "\n", "wave_metrics", ".", "onseterror", "[", "k", "]", "+=", "[", "int", "(", "onset_error", "[", "np", ".", "argmin", "(", "np", ".", "abs", "(", "onset_error", ")", ")", "]", ")", "]", "\n", "wave_metrics", ".", "offseterror", "[", "k", "]", "+=", "[", "int", "(", "offset_error", "[", "np", ".", "argmin", "(", "np", ".", "abs", "(", "offset_error", ")", ")", "]", ")", "]", "\n", "\n", "# If any GT beat has a correspondence to more than one segmented beat, ", "\n", "#     the rest of the pairs have to be false positives (Martinez et al.)", "\n", "", "if", "(", "len", "(", "corr", "[", "i", "]", "[", "0", "]", ")", ">", "1", ")", "and", "(", "len", "(", "corr", "[", "i", "]", "[", "1", "]", ")", ">", "1", ")", ":", "\n", "                    ", "wave_metrics", ".", "falsepositive", "[", "k", "]", "+=", "min", "(", "[", "len", "(", "corr", "[", "i", "]", "[", "0", "]", ")", ",", "len", "(", "corr", "[", "i", "]", "[", "1", "]", ")", "]", ")", "-", "1", "\n", "\n", "# If any GT beat has no correspondence to any segmented beat, false negative", "\n", "", "if", "(", "len", "(", "corr", "[", "i", "]", "[", "0", "]", ")", "==", "0", ")", "and", "(", "len", "(", "corr", "[", "i", "]", "[", "1", "]", ")", "==", "0", ")", ":", "\n", "                    ", "wave_metrics", ".", "falsenegative", "[", "k", "]", "+=", "1", "\n", "\n", "# False positives will correspond to those existing in the results that do not correspond to any beat in the GT (the not chosen)", "\n", "", "", "wave_metrics", ".", "falsepositive", "[", "k", "]", "+=", "len", "(", "not_chosen_0", ")", "+", "len", "(", "not_chosen_1", ")", "-", "(", "filt_corr", "[", "not_chosen_1", ",", ":", "]", "[", ":", ",", "not_chosen_0", "]", ")", ".", "sum", "(", ")", "\n", "\n", "# Mark the key as computed", "\n", "wave_metrics", ".", "keys", ".", "append", "(", "k", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.evaluation2.wave_evaluation_from_metrics": [[220, 243], ["numpy.asarray", "numpy.asarray", "len"], "function", ["None"], ["", "", "", "def", "wave_evaluation_from_metrics", "(", "wave_metrics", ",", "test", ")", ":", "\n", "    ", "tp", "=", "0", "\n", "fp", "=", "0", "\n", "fn", "=", "0", "\n", "dice", "=", "0", "\n", "on", "=", "[", "]", "\n", "of", "=", "[", "]", "\n", "\n", "for", "k", "in", "test", ":", "\n", "        ", "tp", "+=", "wave_metrics", ".", "truepositive", "[", "k", "]", "\n", "fp", "+=", "wave_metrics", ".", "falsepositive", "[", "k", "]", "\n", "fn", "+=", "wave_metrics", ".", "falsenegative", "[", "k", "]", "\n", "on", "+=", "wave_metrics", ".", "onseterror", "[", "k", "]", "\n", "of", "+=", "wave_metrics", ".", "offseterror", "[", "k", "]", "\n", "dice", "+=", "wave_metrics", ".", "dice", "[", "k", "]", "\n", "\n", "", "precision", "=", "tp", "/", "(", "tp", "+", "fp", ")", "\n", "recall", "=", "tp", "/", "(", "tp", "+", "fn", ")", "\n", "on", "=", "np", ".", "asarray", "(", "on", ")", "\n", "of", "=", "np", ".", "asarray", "(", "of", ")", "\n", "dice", "=", "dice", "/", "len", "(", "test", ")", "\n", "\n", "return", "precision", ",", "recall", ",", "on", ",", "of", ",", "dice", "\n", "\n"]], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.evaluation2.metric_computation": [[245, 249], ["evaluation2.compute_wave_metrics", "evaluation2.compute_wave_metrics", "evaluation2.compute_wave_metrics"], "function", ["home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.evaluation2.compute_wave_metrics", "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.evaluation2.compute_wave_metrics", "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.evaluation2.compute_wave_metrics"], ["", "def", "metric_computation", "(", "config", ",", "data", ",", "metrics", ",", "results", ",", "test", ",", "recompute", "=", "False", ")", ":", "\n", "    ", "compute_wave_metrics", "(", "config", ",", "data", ".", "P", ",", "results", ".", "P", ",", "metrics", ".", "P", ",", "test", ",", "data", ".", "validity", ",", "recompute", ")", "\n", "compute_wave_metrics", "(", "config", ",", "data", ".", "QRS", ",", "results", ".", "QRS", ",", "metrics", ".", "QRS", ",", "test", ",", "data", ".", "validity", ",", "recompute", ")", "\n", "compute_wave_metrics", "(", "config", ",", "data", ".", "T", ",", "results", ".", "T", ",", "metrics", ".", "T", ",", "test", ",", "data", ".", "validity", ",", "recompute", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.evaluation.compute_dice_score": [[127, 131], ["mask_1.sum", "mask_2.sum", "numpy.finfo"], "function", ["None"], ["", "def", "compute_dice_score", "(", "mask_1", ",", "mask_2", ")", ":", "\n", "    ", "intersection", "=", "(", "mask_1", "*", "mask_2", ")", ".", "sum", "(", ")", "\n", "union", "=", "mask_1", ".", "sum", "(", ")", "+", "mask_2", ".", "sum", "(", ")", "\n", "return", "2.", "*", "intersection", "/", "(", "union", "+", "np", ".", "finfo", "(", "'double'", ")", ".", "eps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.architecture.FlatNet.__init__": [[18, 41], ["utils.disambiguator.select_kernel_initializer"], "methods", ["home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.disambiguator.select_kernel_initializer"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "'''Initialization'''", "\n", "\n", "assert", "config", ".", "m_name", "in", "(", "'vanilla'", ",", "'residual'", ",", "'xception'", ")", "\n", "\n", "# Parameters", "\n", "self", ".", "sig_shape", "=", "(", "config", ".", "window", ",", "config", ".", "in_ch", ")", "\n", "self", ".", "m_name", "=", "config", ".", "m_name", "\n", "self", ".", "m_repetitions", "=", "config", ".", "m_repetitions", "\n", "self", ".", "ms_upsampling", "=", "config", ".", "ms_upsampling", "\n", "self", ".", "hyperdense", "=", "config", ".", "hyperdense", "\n", "self", ".", "atrous_conv", "=", "config", ".", "atrous_conv", "\n", "self", ".", "maxpool", "=", "False", "\n", "self", ".", "out_ch", "=", "config", ".", "out_ch", "\n", "self", ".", "dropout_rate", "=", "config", ".", "dropout_rate", "\n", "self", ".", "start_ch", "=", "config", ".", "start_ch", "\n", "self", ".", "kernel_size", "=", "config", ".", "kernel_size", "\n", "self", ".", "depth", "=", "config", ".", "depth", "\n", "self", ".", "inc_rate", "=", "config", ".", "inc_rate", "\n", "self", ".", "kernel_init", "=", "select_kernel_initializer", "(", "config", ".", "kernel_init", ")", "\n", "\n", "# Declutter code -> essentially the same information in every single function call", "\n", "self", ".", "constant_info", "=", "(", "self", ".", "kernel_size", ",", "self", ".", "dropout_rate", ",", "self", ".", "kernel_init", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.architecture.FlatNet.__skipped_connection": [[43, 56], ["keras.layers.Concatenate", "keras.layers.Concatenate", "keras.layers.Concatenate", "keras.layers.Concatenate", "keras.layers.UpSampling1D", "keras.layers.UpSampling1D", "keras.layers.UpSampling1D", "keras.layers.UpSampling1D", "range", "keras.layers.UpSampling1D", "keras.layers.UpSampling1D", "keras.layers.UpSampling1D", "keras.layers.UpSampling1D"], "methods", ["None"], ["", "def", "__skipped_connection", "(", "self", ",", "model", ",", "level", ")", ":", "\n", "# Add last element of the encoder", "\n", "        ", "vector", "=", "[", "model", "[", "level", "-", "1", "]", "[", "-", "1", "]", "]", "\n", "\n", "if", "self", ".", "ms_upsampling", ":", "\n", "# Add all possible combinations of upsamplings from previous levels in the decoder", "\n", "            ", "vector", "+=", "[", "keras", ".", "layers", ".", "UpSampling1D", "(", "size", "=", "2", "**", "(", "i", "+", "1", ")", ")", "(", "model", "[", "level", "+", "i", "]", "[", "-", "1", "]", ")", "for", "i", "in", "range", "(", "(", "self", ".", "depth", ")", "-", "level", ")", "]", "\n", "", "else", ":", "\n", "# Upsample last layer", "\n", "            ", "vector", "+=", "[", "keras", ".", "layers", ".", "UpSampling1D", "(", ")", "(", "model", "[", "level", "]", "[", "-", "1", "]", ")", "]", "\n", "\n", "# Concatenate result", "\n", "", "return", "keras", ".", "layers", ".", "Concatenate", "(", ")", "(", "vector", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.architecture.FlatNet.__input_selector": [[58, 63], ["len", "keras.layers.Concatenate", "keras.layers.Concatenate", "keras.layers.Concatenate", "keras.layers.Concatenate"], "methods", ["None"], ["", "def", "__input_selector", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "hyperdense", "and", "(", "len", "(", "x", ")", "!=", "1", ")", ":", "\n", "            ", "return", "keras", ".", "layers", ".", "Concatenate", "(", ")", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "return", "x", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.architecture.FlatNet.__level_operation": [[65, 73], ["range", "x.append", "utils.modules.LevelModule", "architecture.FlatNet.__input_selector", "int"], "methods", ["home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.modules2D.LevelModule", "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.architecture2D.FlatNet.__input_selector"], ["", "", "def", "__level_operation", "(", "self", ",", "x", ",", "level", ")", ":", "\n", "# If single tensor, add to list for posterior concatenation", "\n", "        ", "for", "j", "in", "range", "(", "self", ".", "m_repetitions", ")", ":", "\n", "            ", "x", ".", "append", "(", "LevelModule", "(", "self", ".", "m_name", ")", "(", "self", ".", "__input_selector", "(", "x", ")", ",", "\n", "int", "(", "self", ".", "inc_rate", "**", "level", ")", "*", "self", ".", "start_ch", ",", "\n", "*", "self", ".", "constant_info", ")", ")", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.architecture.FlatNet.create_model": [[42, 218], ["keras.Input", "keras.Input", "keras.Input", "keras.Input", "encoder_module[].append", "keras.Model", "keras.Model", "keras.Model", "keras.Model", "utils.modules.StemModule", "int", "range", "embedding_module.append", "range", "decoder_module[].append", "range", "embedding_module.append", "range", "decoder_module[].append", "range", "range", "range", "range", "range", "len", "range", "range", "range", "utils.modules.OutputModule", "int", "len", "range", "range", "decoder_module[].append", "range", "utils.modules.OutputModule", "int", "encoder_module[].append", "utils.modules.PoolingModule", "utils.modules.PoolingModule", "range", "concat[].append", "keras.layers.UpSampling1D", "keras.layers.UpSampling1D", "keras.layers.UpSampling1D", "keras.layers.UpSampling1D", "len", "decoder_module[].append", "keras.layers.Concatenate", "keras.layers.Concatenate", "keras.layers.Concatenate", "keras.layers.Concatenate", "encoder_module[].append", "encoder_module[].append", "utils.modules.PoolingModule", "embedding_module.append", "embedding_module.append", "keras.layers.UpSampling1D", "keras.layers.UpSampling1D", "keras.layers.UpSampling1D", "keras.layers.UpSampling1D", "len", "range", "decoder_module[].append", "decoder_module[].append", "decoder_module[].append", "utils.modules.PoolingModule", "range", "len", "int", "int", "len", "embedding_module.append", "embedding_module.append", "len", "embedding_module.append", "embedding_module.append", "keras.layers.UpSampling1D", "keras.layers.UpSampling1D", "keras.layers.UpSampling1D", "keras.layers.UpSampling1D", "range", "len", "decoder_module[].append", "decoder_module[].append", "len", "int", "keras.layers.Concatenate", "keras.layers.Concatenate", "keras.layers.Concatenate", "keras.layers.Concatenate", "int", "len", "encoder_module[].append", "encoder_module[].append", "IOError", "utils.modules.PoolingModule", "int", "keras.layers.UpSampling1D", "keras.layers.UpSampling1D", "keras.layers.UpSampling1D", "keras.layers.UpSampling1D", "keras.layers.UpSampling1D", "keras.layers.UpSampling1D", "keras.layers.UpSampling1D", "keras.layers.UpSampling1D", "utils.modules.LevelModule", "utils.modules.PoolingModule", "utils.modules.AtrousMiddleModule", "utils.modules.LevelModule", "keras.layers.Concatenate", "keras.layers.Concatenate", "keras.layers.Concatenate", "keras.layers.Concatenate", "utils.modules.LevelModule", "keras.layers.UpSampling1D", "keras.layers.UpSampling1D", "keras.layers.UpSampling1D", "keras.layers.UpSampling1D", "int", "int", "utils.modules.AtrousMiddleModule", "utils.modules.AtrousMiddleModule", "utils.modules.LevelModule", "utils.modules.LevelModule", "utils.modules.LevelModule", "utils.modules.LevelModule", "int", "int", "int", "int", "keras.layers.UpSampling1D", "keras.layers.UpSampling1D", "keras.layers.UpSampling1D", "keras.layers.UpSampling1D", "int", "utils.modules.LevelModule", "utils.modules.LevelModule", "keras.layers.Concatenate", "keras.layers.Concatenate", "keras.layers.Concatenate", "keras.layers.Concatenate", "int", "int", "keras.layers.Concatenate", "keras.layers.Concatenate", "keras.layers.Concatenate", "keras.layers.Concatenate", "int", "int", "keras.layers.Concatenate", "keras.layers.Concatenate", "keras.layers.Concatenate", "keras.layers.Concatenate", "int", "int", "keras.layers.Concatenate", "keras.layers.Concatenate", "keras.layers.Concatenate", "keras.layers.Concatenate", "int", "int"], "methods", ["home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.modules2D.StemModule", "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.modules2D.OutputModule", "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.modules2D.OutputModule", "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.modules2D.PoolingModule", "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.modules2D.PoolingModule", "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.modules2D.PoolingModule", "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.modules2D.PoolingModule", "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.modules2D.PoolingModule", "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.modules2D.LevelModule", "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.modules2D.PoolingModule", "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.modules2D.AtrousMiddleModule", "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.modules2D.LevelModule", "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.modules2D.LevelModule", "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.modules2D.AtrousMiddleModule", "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.modules2D.AtrousMiddleModule", "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.modules2D.LevelModule", "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.modules2D.LevelModule", "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.modules2D.LevelModule", "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.modules2D.LevelModule", "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.modules2D.LevelModule", "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.modules2D.LevelModule"], ["\n", "", "def", "__skipped_connection", "(", "self", ",", "model", ",", "level", ")", ":", "\n", "# Add last element of the encoder", "\n", "        ", "vector", "=", "[", "model", "[", "level", "-", "1", "]", "[", "-", "1", "]", "]", "\n", "\n", "if", "self", ".", "ms_upsampling", ":", "\n", "# Add all possible combinations of upsamplings from previous levels in the decoder", "\n", "            ", "vector", "+=", "[", "keras", ".", "layers", ".", "UpSampling1D", "(", "size", "=", "2", "**", "(", "i", "+", "1", ")", ")", "(", "model", "[", "level", "+", "i", "]", "[", "-", "1", "]", ")", "for", "i", "in", "range", "(", "(", "self", ".", "depth", ")", "-", "level", ")", "]", "\n", "", "else", ":", "\n", "# Upsample last layer", "\n", "            ", "vector", "+=", "[", "keras", ".", "layers", ".", "UpSampling1D", "(", ")", "(", "model", "[", "level", "]", "[", "-", "1", "]", ")", "]", "\n", "\n", "# Concatenate result", "\n", "", "return", "keras", ".", "layers", ".", "Concatenate", "(", ")", "(", "vector", ")", "\n", "\n", "\n", "", "def", "__input_selector", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "hyperdense", "and", "(", "len", "(", "x", ")", "!=", "1", ")", ":", "\n", "            ", "return", "keras", ".", "layers", ".", "Concatenate", "(", ")", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "return", "x", "[", "-", "1", "]", "\n", "\n", "\n", "", "", "def", "__level_operation", "(", "self", ",", "x", ",", "level", ")", ":", "\n", "# If single tensor, add to list for posterior concatenation", "\n", "        ", "for", "j", "in", "range", "(", "self", ".", "m_repetitions", ")", ":", "\n", "            ", "x", ".", "append", "(", "LevelModule", "(", "self", ".", "m_name", ")", "(", "self", ".", "__input_selector", "(", "x", ")", ",", "\n", "int", "(", "self", ".", "inc_rate", "**", "level", ")", "*", "self", ".", "start_ch", ",", "\n", "*", "self", ".", "constant_info", ")", ")", "\n", "\n", "", "return", "x", "\n", "\n", "\n", "", "def", "create_model", "(", "self", ")", ":", "\n", "# Storage of output tensors", "\n", "        ", "model", "=", "[", "[", "]", "for", "i", "in", "range", "(", "self", ".", "depth", ")", "]", "\n", "\n", "# Define model's input", "\n", "model", "[", "0", "]", ".", "append", "(", "keras", ".", "layers", ".", "Input", "(", "shape", "=", "self", ".", "sig_shape", ")", ")", "\n", "\n", "# Add stem to bridge the gap between segmentation and classification architectures", "\n", "model", "[", "0", "]", ".", "append", "(", "StemModule", "(", "self", ".", "m_name", ")", "(", "model", "[", "0", "]", "[", "-", "1", "]", ",", "self", ".", "start_ch", ",", "*", "self", ".", "constant_info", ")", ")", "\n", "\n", "######################### ENCODER ##########################", "\n", "for", "level", "in", "range", "(", "self", ".", "depth", ")", ":", "\n", "# Fill level with convolutional blocks", "\n", "            ", "model", "[", "level", "]", "=", "self", ".", "__level_operation", "(", "model", "[", "level", "]", ",", "level", ")", "\n", "\n", "# Start the next level's module", "\n", "if", "(", "level", "+", "1", ")", "!=", "self", ".", "depth", ":", "\n", "                ", "model", "[", "level", "+", "1", "]", ".", "append", "(", "PoolingModule", "(", "self", ".", "m_name", ")", "(", "self", ".", "__input_selector", "(", "model", "[", "level", "]", ")", ",", "int", "(", "self", ".", "inc_rate", "**", "(", "level", "+", "1", ")", ")", "*", "self", ".", "start_ch", ",", "*", "self", ".", "constant_info", ")", ")", "\n", "\n", "######################### BOTTLENECK ##########################", "\n", "", "", "if", "self", ".", "atrous_conv", ":", "\n", "# Withdraw last operation", "\n", "            ", "model", "[", "-", "1", "]", ".", "pop", "(", ")", "\n", "\n", "# Include atrous convolution", "\n", "model", "[", "-", "1", "]", ".", "append", "(", "AtrousMiddleModule", "(", "self", ".", "m_name", ")", "(", "self", ".", "__input_selector", "(", "model", "[", "level", "]", ")", ",", "int", "(", "self", ".", "inc_rate", "**", "(", "self", ".", "depth", "-", "1", ")", ")", "*", "self", ".", "start_ch", ",", "*", "self", ".", "constant_info", ")", ")", "\n", "\n", "######################### DECODER ##########################", "\n", "# Upsample last tensor of the bottleneck", "\n", "", "model", "[", "-", "2", "]", ".", "append", "(", "self", ".", "__skipped_connection", "(", "model", ",", "self", ".", "depth", "-", "1", ")", ")", "\n", "\n", "# Traverse the blocks in reverse order", "\n", "for", "level", "in", "range", "(", "self", ".", "depth", "-", "1", ")", "[", ":", ":", "-", "1", "]", ":", "\n", "# Fill level with convolutional blocks", "\n", "            ", "model", "[", "level", "]", "=", "self", ".", "__level_operation", "(", "model", "[", "level", "]", ",", "level", ")", "\n", "\n", "# Start the next level's module with (multi-scale?) upsampling and skipped connection", "\n", "if", "level", "!=", "0", ":", "\n", "                ", "model", "[", "level", "-", "1", "]", ".", "append", "(", "self", ".", "__skipped_connection", "(", "model", ",", "level", ")", ")", "\n", "\n", "# Apply final convolution with sigmoid activation function", "\n", "", "", "model", "[", "0", "]", ".", "append", "(", "OutputModule", "(", "self", ".", "m_name", ")", "(", "self", ".", "__input_selector", "(", "model", "[", "0", "]", ")", ",", "int", "(", "self", ".", "out_ch", ")", ",", "1", ",", "self", ".", "dropout_rate", ",", "self", ".", "kernel_init", ")", ")", "\n", "\n", "return", "keras", ".", "Model", "(", "inputs", "=", "model", "[", "0", "]", "[", "0", "]", ",", "outputs", "=", "model", "[", "0", "]", "[", "-", "1", "]", ")", "\n", "\n", "\n", "", "def", "Export", "(", "self", ",", "path", ")", ":", "\n", "        ", "with", "open", "(", "path", ",", "'wb'", ")", "as", "f", ":", "\n", "            ", "printDict", "=", "dict", "(", ")", "\n", "printDict", "[", "'Input_SignalShape:                       '", "]", "=", "self", ".", "sig_shape", "\n", "printDict", "[", "'Architecture_IsHyperDense:               '", "]", "=", "self", ".", "hyperdense", "\n", "printDict", "[", "'Architecture_Depth:                      '", "]", "=", "self", ".", "depth", "\n", "printDict", "[", "'Architecture_OutputChannels:             '", "]", "=", "self", ".", "out_ch", "\n", "printDict", "[", "'Architecture_StartingChannels:           '", "]", "=", "self", ".", "start_ch", "\n", "printDict", "[", "'Architecture_ChannelIncrementRate:       '", "]", "=", "self", ".", "inc_rate", "\n", "printDict", "[", "'Architecture_KernelInitializer:          '", "]", "=", "self", ".", "kernel_init", "\n", "printDict", "[", "'Module_Name:                             '", "]", "=", "self", ".", "m_name", "\n", "printDict", "[", "'Module_Repetitions:                      '", "]", "=", "self", ".", "m_repetitions", "\n", "printDict", "[", "'Module_KernelSize:                       '", "]", "=", "self", ".", "kernel_size", "\n", "\n", "w", "=", "csv", ".", "writer", "(", "f", ")", "\n", "w", ".", "writerows", "(", "printDict", ".", "items", "(", ")", ")", "\n", "\n", "\n", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.architecture.FlatNet.Export": [[220, 237], ["open", "dict", "csv.writer", "csv.writer.writerows", "dict.items"], "methods", ["None"], []], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.inference.predict": [[11, 31], ["tqdm.tqdm", "inference.predict_single", "inference.predict_single", "NotImplementedError", "inference.predict_multi", "str"], "function", ["home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.inference.predict_single", "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.inference.predict_single", "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.inference.predict_multi"], ["def", "predict", "(", "model", ",", "config", ",", "data", ",", "execinfo", ",", "results", ",", "results_CV2", ",", "retrain", "=", "False", ")", ":", "\n", "# Load best model state", "\n", "# if (execinfo.state != None) and (model != None): backend.load_state(model, execinfo)", "\n", "\n", "# Predict evaluation on test set", "\n", "    ", "for", "key", "in", "tqdm", ".", "tqdm", "(", "execinfo", ".", "test", ",", "ascii", "=", "True", ",", "desc", "=", "\"Test \"", ")", ":", "\n", "        ", "key_0", "=", "key", "+", "'_0'", "\n", "key_1", "=", "key", "+", "'_1'", "\n", "\n", "if", "config", ".", "in_ch", "==", "1", ":", "# Single lead", "\n", "            ", "if", "retrain", "or", "(", "key_0", "not", "in", "results", ".", "keys", ")", "or", "(", "key_0", "not", "in", "results_CV2", ".", "keys", ")", "or", "(", "key_1", "not", "in", "results", ".", "keys", ")", "or", "(", "key_1", "not", "in", "results_CV2", ".", "keys", ")", ":", "\n", "                ", "predict_single", "(", "model", ",", "config", ",", "data", ",", "key_0", ",", "results", ",", "results_CV2", ")", "\n", "predict_single", "(", "model", ",", "config", ",", "data", ",", "key_1", ",", "results", ",", "results_CV2", ")", "\n", "\n", "", "", "elif", "config", ".", "in_ch", "==", "2", ":", "# Multi lead", "\n", "            ", "if", "retrain", "or", "(", "key_0", "not", "in", "results", ".", "keys", ")", "or", "(", "key_0", "not", "in", "results_CV2", ".", "keys", ")", "or", "(", "key_1", "not", "in", "results", ".", "keys", ")", "or", "(", "key_1", "not", "in", "results_CV2", ".", "keys", ")", ":", "\n", "                ", "predict_multi", "(", "model", ",", "config", ",", "data", ",", "key_0", ",", "key_1", ",", "results", ",", "results_CV2", ")", "\n", "\n", "", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"No batch generation strategy for \"", "+", "str", "(", "config", ".", "in_ch", ")", "+", "\" channels has been devised\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.inference.predict_single": [[33, 78], ["utils.data_structures.series_to_supervised", "numpy.zeros", "math.ceil", "range", "[].round", "[].round", "[].round", "cv2.morphologyEx", "cv2.morphologyEx", "cv2.morphologyEx", "cv2.morphologyEx().squeeze", "cv2.morphologyEx().squeeze", "cv2.morphologyEx().squeeze", "results.keys.append", "results_CV2.keys.append", "model.predict", "numpy.ones", "numpy.ones", "numpy.ones", "cv2.morphologyEx", "cv2.morphologyEx", "cv2.morphologyEx", "utils.data_structures.supervised_to_series", "utils.data_structures.supervised_to_series", "utils.data_structures.supervised_to_series", "numpy.ones", "numpy.ones", "numpy.ones", "seg[].squeeze", "seg[].squeeze", "seg[].squeeze"], "function", ["home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.data_structures.series_to_supervised", "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.inference.predict", "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.data_structures.supervised_to_series", "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.data_structures.supervised_to_series", "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.data_structures.supervised_to_series"], ["", "", "", "def", "predict_single", "(", "model", ",", "config", ",", "data", ",", "key", ",", "results", ",", "results_CV2", ")", ":", "\n", "# Step 1: Convert from series to supervised (with a finer stride for improved results in the window boundaries):", "\n", "    ", "series", "=", "series_to_supervised", "(", "data", ".", "dataset", "[", "key", "]", ",", "config", ".", "window", ",", "config", ".", "window", "//", "8", ")", "\n", "\n", "# Step 2: Predict:", "\n", "seg", "=", "np", ".", "zeros", "(", "(", "series", ".", "shape", "[", "0", "]", ",", "series", ".", "shape", "[", "1", "]", ",", "config", ".", "out_ch", ")", ")", "\n", "sub_batches", "=", "math", ".", "ceil", "(", "series", ".", "shape", "[", "0", "]", "/", "(", "config", ".", "batch_size", ")", ")", "\n", "\n", "# Avoid GPU RAM management problems", "\n", "for", "b", "in", "range", "(", "sub_batches", ")", ":", "\n", "        ", "batch", "=", "series", "[", "b", "*", "config", ".", "batch_size", ":", "(", "b", "+", "1", ")", "*", "config", ".", "batch_size", ",", "...", "]", "\n", "batch", "=", "batch", "[", "...", ",", "np", ".", "newaxis", "]", "\n", "seg", "[", "b", "*", "config", ".", "batch_size", ":", "(", "b", "+", "1", ")", "*", "config", ".", "batch_size", ",", "...", "]", "=", "model", ".", "predict", "(", "batch", ")", "\n", "\n", "del", "batch", "\n", "\n", "# Step 3: Convert from supervised to series:", "\n", "", "lead_P", "=", "supervised_to_series", "(", "seg", "[", "...", ",", "0", "]", ".", "squeeze", "(", ")", ",", "config", ".", "window", ",", "config", ".", "window", "//", "8", ")", "[", ":", "config", ".", "max_size", "]", ".", "round", "(", ")", "\n", "lead_QRS", "=", "supervised_to_series", "(", "seg", "[", "...", ",", "1", "]", ".", "squeeze", "(", ")", ",", "config", ".", "window", ",", "config", ".", "window", "//", "8", ")", "[", ":", "config", ".", "max_size", "]", ".", "round", "(", ")", "\n", "lead_T", "=", "supervised_to_series", "(", "seg", "[", "...", ",", "2", "]", ".", "squeeze", "(", ")", ",", "config", ".", "window", ",", "config", ".", "window", "//", "8", ")", "[", ":", "config", ".", "max_size", "]", ".", "round", "(", ")", "\n", "\n", "# Step 4: Store in the output matrices:", "\n", "results", ".", "P", ".", "wave", "[", "key", "]", "=", "lead_P", "\n", "results", ".", "QRS", ".", "wave", "[", "key", "]", "=", "lead_QRS", "\n", "results", ".", "T", ".", "wave", "[", "key", "]", "=", "lead_T", "\n", "\n", "# Step 5.1: Apply morphological closing", "\n", "lead_P", "=", "cv2", ".", "morphologyEx", "(", "lead_P", ",", "cv2", ".", "MORPH_CLOSE", ",", "np", ".", "ones", "(", "(", "config", ".", "element_size", ",", ")", ")", ")", "# Close holes in segmentations", "\n", "lead_QRS", "=", "cv2", ".", "morphologyEx", "(", "lead_QRS", ",", "cv2", ".", "MORPH_CLOSE", ",", "np", ".", "ones", "(", "(", "config", ".", "element_size", ",", ")", ")", ")", "# Close holes in segmentations", "\n", "lead_T", "=", "cv2", ".", "morphologyEx", "(", "lead_T", ",", "cv2", ".", "MORPH_CLOSE", ",", "np", ".", "ones", "(", "(", "config", ".", "element_size", ",", ")", ")", ")", "# Close holes in segmentations", "\n", "\n", "lead_P", "=", "cv2", ".", "morphologyEx", "(", "lead_P", ",", "cv2", ".", "MORPH_OPEN", ",", "np", ".", "ones", "(", "(", "5", ",", ")", ")", ")", ".", "squeeze", "(", ")", "# Erosion + Dilation to get rid of noisy activations", "\n", "lead_QRS", "=", "cv2", ".", "morphologyEx", "(", "lead_QRS", ",", "cv2", ".", "MORPH_OPEN", ",", "np", ".", "ones", "(", "(", "5", ",", ")", ")", ")", ".", "squeeze", "(", ")", "# Erosion + Dilation to get rid of noisy activations", "\n", "lead_T", "=", "cv2", ".", "morphologyEx", "(", "lead_T", ",", "cv2", ".", "MORPH_OPEN", ",", "np", ".", "ones", "(", "(", "5", ",", ")", ")", ")", ".", "squeeze", "(", ")", "# Erosion + Dilation to get rid of noisy activations", "\n", "\n", "results_CV2", ".", "P", ".", "wave", "[", "key", "]", "=", "lead_P", "\n", "results_CV2", ".", "QRS", ".", "wave", "[", "key", "]", "=", "lead_QRS", "\n", "results_CV2", ".", "T", ".", "wave", "[", "key", "]", "=", "lead_T", "\n", "\n", "# Mark as computed", "\n", "results", ".", "keys", ".", "append", "(", "key", ")", "\n", "results_CV2", ".", "keys", ".", "append", "(", "key", ")", "\n", "\n", "# Step 6: Avoid GPU memory filled with old data", "\n", "del", "series", ",", "seg", "\n", "\n"]], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.inference.predict_multi": [[80, 139], ["utils.data_structures.series_to_supervised", "utils.data_structures.series_to_supervised", "numpy.dstack", "numpy.zeros", "math.ceil", "range", "[].round", "[].round", "[].round", "cv2.morphologyEx", "cv2.morphologyEx", "cv2.morphologyEx", "cv2.morphologyEx().squeeze", "cv2.morphologyEx().squeeze", "cv2.morphologyEx().squeeze", "results.keys.append", "results.keys.append", "results_CV2.keys.append", "results_CV2.keys.append", "model.predict().squeeze", "numpy.ones", "numpy.ones", "numpy.ones", "cv2.morphologyEx", "cv2.morphologyEx", "cv2.morphologyEx", "model.predict", "utils.data_structures.supervised_to_series", "utils.data_structures.supervised_to_series", "utils.data_structures.supervised_to_series", "numpy.ones", "numpy.ones", "numpy.ones", "seg[].squeeze", "seg[].squeeze", "seg[].squeeze"], "function", ["home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.data_structures.series_to_supervised", "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.data_structures.series_to_supervised", "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.inference.predict", "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.data_structures.supervised_to_series", "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.data_structures.supervised_to_series", "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.data_structures.supervised_to_series"], ["", "def", "predict_multi", "(", "model", ",", "config", ",", "data", ",", "key_0", ",", "key_1", ",", "results", ",", "results_CV2", ")", ":", "\n", "# Step 1: Convert from series to supervised (with a finer stride for improved results in the window boundaries):", "\n", "    ", "series_0", "=", "series_to_supervised", "(", "data", ".", "dataset", "[", "key_0", "]", ",", "config", ".", "window", ",", "config", ".", "window", "//", "8", ")", "\n", "series_1", "=", "series_to_supervised", "(", "data", ".", "dataset", "[", "key_1", "]", ",", "config", ".", "window", ",", "config", ".", "window", "//", "8", ")", "\n", "\n", "# Combine both series", "\n", "series", "=", "np", ".", "dstack", "(", "(", "series_0", ",", "series_1", ")", ")", "# Stack on the channels", "\n", "\n", "# Step 2: Predict:", "\n", "seg", "=", "np", ".", "zeros", "(", "(", "series", ".", "shape", "[", "0", "]", ",", "series", ".", "shape", "[", "1", "]", ",", "config", ".", "out_ch", ")", ")", "# Segmentation storage", "\n", "sub_batches", "=", "math", ".", "ceil", "(", "series", ".", "shape", "[", "0", "]", "/", "(", "config", ".", "batch_size", ")", ")", "# Number of batches", "\n", "\n", "# Avoid GPU RAM management problems", "\n", "for", "b", "in", "range", "(", "sub_batches", ")", ":", "\n", "        ", "batch", "=", "series", "[", "b", "*", "config", ".", "batch_size", ":", "(", "b", "+", "1", ")", "*", "config", ".", "batch_size", ",", "...", "]", "\n", "# batch = batch[:,:,np.newaxis,:]", "\n", "seg", "[", "b", "*", "config", ".", "batch_size", ":", "(", "b", "+", "1", ")", "*", "config", ".", "batch_size", ",", "...", "]", "=", "model", ".", "predict", "(", "batch", ")", ".", "squeeze", "(", ")", "\n", "\n", "del", "batch", "\n", "\n", "# Step 3: Convert from supervised to series:", "\n", "", "lead_P", "=", "supervised_to_series", "(", "seg", "[", "...", ",", "0", "]", ".", "squeeze", "(", ")", ",", "config", ".", "window", ",", "config", ".", "window", "//", "8", ")", "[", ":", "config", ".", "max_size", "]", ".", "round", "(", ")", "\n", "lead_QRS", "=", "supervised_to_series", "(", "seg", "[", "...", ",", "1", "]", ".", "squeeze", "(", ")", ",", "config", ".", "window", ",", "config", ".", "window", "//", "8", ")", "[", ":", "config", ".", "max_size", "]", ".", "round", "(", ")", "\n", "lead_T", "=", "supervised_to_series", "(", "seg", "[", "...", ",", "2", "]", ".", "squeeze", "(", ")", ",", "config", ".", "window", ",", "config", ".", "window", "//", "8", ")", "[", ":", "config", ".", "max_size", "]", ".", "round", "(", ")", "\n", "\n", "# Step 4: Store in the output matrices:", "\n", "results", ".", "P", ".", "wave", "[", "key_0", "]", "=", "lead_P", "\n", "results", ".", "QRS", ".", "wave", "[", "key_0", "]", "=", "lead_QRS", "\n", "results", ".", "T", ".", "wave", "[", "key_0", "]", "=", "lead_T", "\n", "\n", "results", ".", "P", ".", "wave", "[", "key_1", "]", "=", "lead_P", "\n", "results", ".", "QRS", ".", "wave", "[", "key_1", "]", "=", "lead_QRS", "\n", "results", ".", "T", ".", "wave", "[", "key_1", "]", "=", "lead_T", "\n", "\n", "# Step 5.1: Apply morphological closing", "\n", "lead_P", "=", "cv2", ".", "morphologyEx", "(", "lead_P", ",", "cv2", ".", "MORPH_CLOSE", ",", "np", ".", "ones", "(", "(", "config", ".", "element_size", ",", ")", ")", ")", "# Close holes in segmentations", "\n", "lead_QRS", "=", "cv2", ".", "morphologyEx", "(", "lead_QRS", ",", "cv2", ".", "MORPH_CLOSE", ",", "np", ".", "ones", "(", "(", "config", ".", "element_size", ",", ")", ")", ")", "# Close holes in segmentations", "\n", "lead_T", "=", "cv2", ".", "morphologyEx", "(", "lead_T", ",", "cv2", ".", "MORPH_CLOSE", ",", "np", ".", "ones", "(", "(", "config", ".", "element_size", ",", ")", ")", ")", "# Close holes in segmentations", "\n", "\n", "lead_P", "=", "cv2", ".", "morphologyEx", "(", "lead_P", ",", "cv2", ".", "MORPH_OPEN", ",", "np", ".", "ones", "(", "(", "5", ",", ")", ")", ")", ".", "squeeze", "(", ")", "# Erosion + Dilation to get rid of noisy activations", "\n", "lead_QRS", "=", "cv2", ".", "morphologyEx", "(", "lead_QRS", ",", "cv2", ".", "MORPH_OPEN", ",", "np", ".", "ones", "(", "(", "5", ",", ")", ")", ")", ".", "squeeze", "(", ")", "# Erosion + Dilation to get rid of noisy activations", "\n", "lead_T", "=", "cv2", ".", "morphologyEx", "(", "lead_T", ",", "cv2", ".", "MORPH_OPEN", ",", "np", ".", "ones", "(", "(", "5", ",", ")", ")", ")", ".", "squeeze", "(", ")", "# Erosion + Dilation to get rid of noisy activations", "\n", "\n", "results_CV2", ".", "P", ".", "wave", "[", "key_0", "]", "=", "lead_P", "\n", "results_CV2", ".", "QRS", ".", "wave", "[", "key_0", "]", "=", "lead_QRS", "\n", "results_CV2", ".", "T", ".", "wave", "[", "key_0", "]", "=", "lead_T", "\n", "\n", "results_CV2", ".", "P", ".", "wave", "[", "key_1", "]", "=", "lead_P", "\n", "results_CV2", ".", "QRS", ".", "wave", "[", "key_1", "]", "=", "lead_QRS", "\n", "results_CV2", ".", "T", ".", "wave", "[", "key_1", "]", "=", "lead_T", "\n", "\n", "# Mark as computed", "\n", "results", ".", "keys", ".", "append", "(", "key_0", ")", "\n", "results", ".", "keys", ".", "append", "(", "key_1", ")", "\n", "results_CV2", ".", "keys", ".", "append", "(", "key_0", ")", "\n", "results_CV2", ".", "keys", ".", "append", "(", "key_1", ")", "\n", "\n", "# Step 6: Avoid GPU memory filled with old data", "\n", "del", "series_0", ",", "series_1", ",", "series", ",", "seg", "\n", "\n"]], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.visualization.plot_signal": [[5, 31], ["plt.gca.plot", "plt.gca.axvspan", "plt.gca.set_xlim", "plt.gca.tick_params", "matplotlib.gca", "numpy.linspace", "plt.gca.set_xticks", "plt.gca.set_xlabel", "plt.gca.set_yticks", "plt.gca.set_ylabel"], "function", ["None"], ["def", "plot_signal", "(", "config", ",", "data", ",", "key", ",", "on", ",", "off", "=", "None", ",", "ax", "=", "None", ",", "xlabel", "=", "True", ",", "ylabel", "=", "True", ",", "twinx_label", "=", "True", ",", "labelsize", "=", "14", ",", "fontsize", "=", "24", ")", ":", "\n", "    ", "if", "ax", "==", "None", ":", "\n", "        ", "ax", "=", "plt", ".", "gca", "(", ")", "\n", "", "if", "off", "==", "None", ":", "\n", "        ", "off", "=", "on", "+", "config", ".", "window", "\n", "", "if", "config", ".", "sampling_freq", "==", "None", ":", "\n", "        ", "f", "=", "1", "\n", "", "else", ":", "\n", "        ", "f", "=", "config", ".", "sampling_freq", "\n", "\n", "", "ax", ".", "plot", "(", "np", ".", "linspace", "(", "on", "/", "f", ",", "off", "/", "f", ",", "num", "=", "off", "-", "on", ")", ",", "data", ".", "dataset", "[", "key", "]", "[", "on", ":", "off", "]", ",", "'b'", ")", "\n", "ax", ".", "axvspan", "(", "on", "/", "f", ",", "off", "/", "f", ",", "facecolor", "=", "'y'", ",", "alpha", "=", "0.1", ")", "\n", "ax", ".", "set_xlim", "(", "[", "on", "/", "f", ",", "off", "/", "f", "]", ")", "\n", "ax", ".", "tick_params", "(", "axis", "=", "'both'", ",", "which", "=", "'major'", ",", "labelsize", "=", "labelsize", ",", "labelrotation", "=", "45.", ")", "\n", "\n", "if", "not", "(", "xlabel", ")", ":", "\n", "        ", "ax", ".", "set_xticks", "(", "[", "]", ")", "\n", "", "else", ":", "\n", "        ", "ax", ".", "set_xlabel", "(", "'Time (s)'", ",", "fontsize", "=", "fontsize", ",", "fontname", "=", "'Times New Roman'", ")", "\n", "\n", "", "if", "not", "(", "ylabel", ")", ":", "\n", "        ", "ax", ".", "set_yticks", "(", "[", "]", ")", "\n", "", "else", ":", "\n", "        ", "ax", ".", "set_ylabel", "(", "'Voltage (mV)'", ",", "fontsize", "=", "fontsize", ",", "fontname", "=", "'Times New Roman'", ")", "\n", "\n", "", "return", "ax", "\n", "\n"]], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.visualization.plot_markers": [[33, 71], ["plt.gca.plot", "plt.gca.plot", "plt.gca.plot", "plt.gca.plot", "plt.gca.plot", "plt.gca.plot", "plt.gca.plot", "plt.gca.plot", "plt.gca.plot", "plt.gca.plot", "plt.gca.axvspan", "plt.gca.set_xlim", "plt.gca.tick_params", "matplotlib.gca", "numpy.linspace", "plt.gca.set_xticks", "plt.gca.set_xlabel", "plt.gca.set_yticks", "plt.gca.set_ylabel"], "function", ["None"], ["", "def", "plot_markers", "(", "config", ",", "data", ",", "key", ",", "on", ",", "off", "=", "None", ",", "ax", "=", "None", ",", "xlabel", "=", "True", ",", "ylabel", "=", "True", ",", "twinx_label", "=", "True", ",", "labelsize", "=", "14", ",", "fontsize", "=", "24", ",", "markersize", "=", "10", ")", ":", "\n", "    ", "if", "ax", "==", "None", ":", "\n", "        ", "ax", "=", "plt", ".", "gca", "(", ")", "\n", "", "if", "off", "==", "None", ":", "\n", "        ", "off", "=", "on", "+", "config", ".", "window", "\n", "", "if", "config", ".", "sampling_freq", "==", "None", ":", "\n", "        ", "f", "=", "1", "\n", "", "else", ":", "\n", "        ", "f", "=", "config", ".", "sampling_freq", "\n", "\n", "", "ax", ".", "plot", "(", "np", ".", "linspace", "(", "on", "/", "f", ",", "off", "/", "f", ",", "num", "=", "off", "-", "on", ")", ",", "data", ".", "dataset", "[", "key", "]", "[", "on", ":", "off", "]", ",", "'b'", ")", "\n", "ax", ".", "plot", "(", "data", ".", "P", ".", "onset", "[", "key", "]", "[", "(", "data", ".", "P", ".", "onset", "[", "key", "]", ">=", "on", ")", "&", "(", "data", ".", "P", ".", "onset", "[", "key", "]", "<=", "off", ")", "]", "/", "f", ",", "data", ".", "dataset", "[", "key", "]", "[", "data", ".", "P", ".", "onset", "[", "key", "]", "[", "(", "data", ".", "P", ".", "onset", "[", "key", "]", ">=", "on", ")", "&", "(", "data", ".", "P", ".", "onset", "[", "key", "]", "<=", "off", ")", "]", "]", ",", "'r*'", ",", "markersize", "=", "markersize", ")", "\n", "ax", ".", "plot", "(", "data", ".", "P", ".", "peak", "[", "key", "]", "[", "(", "data", ".", "P", ".", "peak", "[", "key", "]", ">=", "on", ")", "&", "(", "data", ".", "P", ".", "peak", "[", "key", "]", "<=", "off", ")", "]", "/", "f", ",", "data", ".", "dataset", "[", "key", "]", "[", "data", ".", "P", ".", "peak", "[", "key", "]", "[", "(", "data", ".", "P", ".", "peak", "[", "key", "]", ">=", "on", ")", "&", "(", "data", ".", "P", ".", "peak", "[", "key", "]", "<=", "off", ")", "]", "]", ",", "'r*'", ",", "markersize", "=", "markersize", ")", "\n", "ax", ".", "plot", "(", "data", ".", "P", ".", "offset", "[", "key", "]", "[", "(", "data", ".", "P", ".", "offset", "[", "key", "]", ">=", "on", ")", "&", "(", "data", ".", "P", ".", "offset", "[", "key", "]", "<=", "off", ")", "]", "/", "f", ",", "data", ".", "dataset", "[", "key", "]", "[", "data", ".", "P", ".", "offset", "[", "key", "]", "[", "(", "data", ".", "P", ".", "offset", "[", "key", "]", ">=", "on", ")", "&", "(", "data", ".", "P", ".", "offset", "[", "key", "]", "<=", "off", ")", "]", "]", ",", "'r*'", ",", "markersize", "=", "markersize", ")", "\n", "\n", "ax", ".", "plot", "(", "data", ".", "QRS", ".", "onset", "[", "key", "]", "[", "(", "data", ".", "QRS", ".", "onset", "[", "key", "]", ">=", "on", ")", "&", "(", "data", ".", "QRS", ".", "onset", "[", "key", "]", "<=", "off", ")", "]", "/", "f", ",", "data", ".", "dataset", "[", "key", "]", "[", "data", ".", "QRS", ".", "onset", "[", "key", "]", "[", "(", "data", ".", "QRS", ".", "onset", "[", "key", "]", ">=", "on", ")", "&", "(", "data", ".", "QRS", ".", "onset", "[", "key", "]", "<=", "off", ")", "]", "]", ",", "'g^'", ",", "markersize", "=", "markersize", ")", "\n", "ax", ".", "plot", "(", "data", ".", "QRS", ".", "peak", "[", "key", "]", "[", "(", "data", ".", "QRS", ".", "peak", "[", "key", "]", ">=", "on", ")", "&", "(", "data", ".", "QRS", ".", "peak", "[", "key", "]", "<=", "off", ")", "]", "/", "f", ",", "data", ".", "dataset", "[", "key", "]", "[", "data", ".", "QRS", ".", "peak", "[", "key", "]", "[", "(", "data", ".", "QRS", ".", "peak", "[", "key", "]", ">=", "on", ")", "&", "(", "data", ".", "QRS", ".", "peak", "[", "key", "]", "<=", "off", ")", "]", "]", ",", "'g^'", ",", "markersize", "=", "markersize", ")", "\n", "ax", ".", "plot", "(", "data", ".", "QRS", ".", "offset", "[", "key", "]", "[", "(", "data", ".", "QRS", ".", "offset", "[", "key", "]", ">=", "on", ")", "&", "(", "data", ".", "QRS", ".", "offset", "[", "key", "]", "<=", "off", ")", "]", "/", "f", ",", "data", ".", "dataset", "[", "key", "]", "[", "data", ".", "QRS", ".", "offset", "[", "key", "]", "[", "(", "data", ".", "QRS", ".", "offset", "[", "key", "]", ">=", "on", ")", "&", "(", "data", ".", "QRS", ".", "offset", "[", "key", "]", "<=", "off", ")", "]", "]", ",", "'g^'", ",", "markersize", "=", "markersize", ")", "\n", "\n", "ax", ".", "plot", "(", "data", ".", "T", ".", "onset", "[", "key", "]", "[", "(", "data", ".", "T", ".", "onset", "[", "key", "]", ">=", "on", ")", "&", "(", "data", ".", "T", ".", "onset", "[", "key", "]", "<=", "off", ")", "]", "/", "f", ",", "data", ".", "dataset", "[", "key", "]", "[", "data", ".", "T", ".", "onset", "[", "key", "]", "[", "(", "data", ".", "T", ".", "onset", "[", "key", "]", ">=", "on", ")", "&", "(", "data", ".", "T", ".", "onset", "[", "key", "]", "<=", "off", ")", "]", "]", ",", "'mo'", ",", "markersize", "=", "markersize", ")", "\n", "ax", ".", "plot", "(", "data", ".", "T", ".", "peak", "[", "key", "]", "[", "(", "data", ".", "T", ".", "peak", "[", "key", "]", ">=", "on", ")", "&", "(", "data", ".", "T", ".", "peak", "[", "key", "]", "<=", "off", ")", "]", "/", "f", ",", "data", ".", "dataset", "[", "key", "]", "[", "data", ".", "T", ".", "peak", "[", "key", "]", "[", "(", "data", ".", "T", ".", "peak", "[", "key", "]", ">=", "on", ")", "&", "(", "data", ".", "T", ".", "peak", "[", "key", "]", "<=", "off", ")", "]", "]", ",", "'mo'", ",", "markersize", "=", "markersize", ")", "\n", "ax", ".", "plot", "(", "data", ".", "T", ".", "offset", "[", "key", "]", "[", "(", "data", ".", "T", ".", "offset", "[", "key", "]", ">=", "on", ")", "&", "(", "data", ".", "T", ".", "offset", "[", "key", "]", "<=", "off", ")", "]", "/", "f", ",", "data", ".", "dataset", "[", "key", "]", "[", "data", ".", "T", ".", "offset", "[", "key", "]", "[", "(", "data", ".", "T", ".", "offset", "[", "key", "]", ">=", "on", ")", "&", "(", "data", ".", "T", ".", "offset", "[", "key", "]", "<=", "off", ")", "]", "]", ",", "'mo'", ",", "markersize", "=", "markersize", ")", "\n", "\n", "ax", ".", "axvspan", "(", "on", "/", "f", ",", "off", "/", "f", ",", "facecolor", "=", "'y'", ",", "alpha", "=", "0.0", ")", "\n", "ax", ".", "set_xlim", "(", "[", "on", "/", "f", ",", "off", "/", "f", "]", ")", "\n", "ax", ".", "tick_params", "(", "axis", "=", "'both'", ",", "which", "=", "'major'", ",", "labelsize", "=", "labelsize", ",", "labelrotation", "=", "45.", ")", "\n", "\n", "if", "not", "(", "xlabel", ")", ":", "\n", "        ", "ax", ".", "set_xticks", "(", "[", "]", ")", "\n", "", "else", ":", "\n", "        ", "ax", ".", "set_xlabel", "(", "'Time (s)'", ",", "fontsize", "=", "fontsize", ",", "fontname", "=", "'Times New Roman'", ")", "\n", "\n", "", "if", "not", "(", "ylabel", ")", ":", "\n", "        ", "ax", ".", "set_yticks", "(", "[", "]", ")", "\n", "", "else", ":", "\n", "        ", "ax", ".", "set_ylabel", "(", "'Voltage (mV)'", ",", "fontsize", "=", "fontsize", ",", "fontname", "=", "'Times New Roman'", ")", "\n", "\n", "", "return", "ax", "\n", "\n"]], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.visualization.plot_mask": [[73, 119], ["plt.gca.plot", "plt.gca.twinx", "ax.twinx.plot", "ax.twinx.plot", "ax.twinx.plot", "ax.twinx.fill_between", "ax.twinx.fill_between", "ax.twinx.fill_between", "plt.gca.axvspan", "plt.gca.set_xlim", "plt.gca.tick_params", "matplotlib.gca", "numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.linspace", "plt.gca.set_xticks", "plt.gca.set_xlabel", "plt.gca.set_yticks", "plt.gca.set_ylabel", "ax.twinx.set_yticks", "ax.twinx.set_ylabel", "ax.twinx.set_yticks", "numpy.zeros", "numpy.zeros", "numpy.zeros"], "function", ["None"], ["", "def", "plot_mask", "(", "config", ",", "data", ",", "key", ",", "on", ",", "off", "=", "None", ",", "ax", "=", "None", ",", "xlabel", "=", "True", ",", "ylabel", "=", "True", ",", "twinx_label", "=", "True", ",", "labelsize", "=", "14", ",", "fontsize", "=", "24", ")", ":", "\n", "    ", "if", "ax", "==", "None", ":", "\n", "        ", "ax", "=", "plt", ".", "gca", "(", ")", "\n", "", "if", "off", "==", "None", ":", "\n", "        ", "off", "=", "on", "+", "config", ".", "window", "\n", "", "if", "config", ".", "sampling_freq", "==", "None", ":", "\n", "        ", "f", "=", "1", "\n", "", "else", ":", "\n", "        ", "f", "=", "config", ".", "sampling_freq", "\n", "\n", "", "ax", ".", "plot", "(", "np", ".", "linspace", "(", "on", "/", "f", ",", "off", "/", "f", ",", "num", "=", "off", "-", "on", ")", ",", "data", ".", "dataset", "[", "key", "]", "[", "on", ":", "off", "]", ",", "'b'", ")", "\n", "\n", "# Plot mask", "\n", "ax_2", "=", "ax", ".", "twinx", "(", ")", "\n", "\n", "# Plot", "\n", "ax_2", ".", "plot", "(", "np", ".", "linspace", "(", "on", "/", "f", ",", "off", "/", "f", ",", "num", "=", "off", "-", "on", ")", ",", "data", ".", "P", ".", "wave", "[", "key", "]", ".", "values", "[", "on", ":", "off", "]", ",", "'r-'", ")", "\n", "ax_2", ".", "plot", "(", "np", ".", "linspace", "(", "on", "/", "f", ",", "off", "/", "f", ",", "num", "=", "off", "-", "on", ")", ",", "data", ".", "QRS", ".", "wave", "[", "key", "]", ".", "values", "[", "on", ":", "off", "]", ",", "'g-'", ")", "\n", "ax_2", ".", "plot", "(", "np", ".", "linspace", "(", "on", "/", "f", ",", "off", "/", "f", ",", "num", "=", "off", "-", "on", ")", ",", "data", ".", "T", ".", "wave", "[", "key", "]", ".", "values", "[", "on", ":", "off", "]", ",", "'m-'", ")", "\n", "\n", "# Fill", "\n", "ax_2", ".", "fill_between", "(", "np", ".", "linspace", "(", "on", "/", "f", ",", "off", "/", "f", ",", "num", "=", "off", "-", "on", ")", ",", "data", ".", "P", ".", "wave", "[", "key", "]", ".", "values", "[", "on", ":", "off", "]", ",", "0", ",", "where", "=", "data", ".", "P", ".", "wave", "[", "key", "]", ".", "values", "[", "on", ":", "off", "]", ">=", "np", ".", "zeros", "(", "data", ".", "P", ".", "wave", "[", "key", "]", ".", "values", "[", "on", ":", "off", "]", ".", "shape", ")", ",", "color", "=", "'red'", ",", "alpha", "=", "0.1", ")", "\n", "ax_2", ".", "fill_between", "(", "np", ".", "linspace", "(", "on", "/", "f", ",", "off", "/", "f", ",", "num", "=", "off", "-", "on", ")", ",", "data", ".", "QRS", ".", "wave", "[", "key", "]", ".", "values", "[", "on", ":", "off", "]", ",", "0", ",", "where", "=", "data", ".", "QRS", ".", "wave", "[", "key", "]", ".", "values", "[", "on", ":", "off", "]", ">=", "np", ".", "zeros", "(", "data", ".", "QRS", ".", "wave", "[", "key", "]", ".", "values", "[", "on", ":", "off", "]", ".", "shape", ")", ",", "color", "=", "'green'", ",", "alpha", "=", "0.1", ")", "\n", "ax_2", ".", "fill_between", "(", "np", ".", "linspace", "(", "on", "/", "f", ",", "off", "/", "f", ",", "num", "=", "off", "-", "on", ")", ",", "data", ".", "T", ".", "wave", "[", "key", "]", ".", "values", "[", "on", ":", "off", "]", ",", "0", ",", "where", "=", "data", ".", "T", ".", "wave", "[", "key", "]", ".", "values", "[", "on", ":", "off", "]", ">=", "np", ".", "zeros", "(", "data", ".", "T", ".", "wave", "[", "key", "]", ".", "values", "[", "on", ":", "off", "]", ".", "shape", ")", ",", "color", "=", "'magenta'", ",", "alpha", "=", "0.1", ")", "\n", "\n", "ax", ".", "axvspan", "(", "on", "/", "f", ",", "off", "/", "f", ",", "facecolor", "=", "'y'", ",", "alpha", "=", "0.0", ")", "\n", "ax", ".", "set_xlim", "(", "[", "on", "/", "f", ",", "off", "/", "f", "]", ")", "\n", "ax", ".", "tick_params", "(", "axis", "=", "'both'", ",", "which", "=", "'major'", ",", "labelsize", "=", "labelsize", ",", "labelrotation", "=", "45.", ")", "\n", "\n", "if", "not", "(", "xlabel", ")", ":", "\n", "        ", "ax", ".", "set_xticks", "(", "[", "]", ")", "\n", "", "else", ":", "\n", "        ", "ax", ".", "set_xlabel", "(", "'Time (s)'", ",", "fontsize", "=", "fontsize", ",", "fontname", "=", "'Times New Roman'", ")", "\n", "\n", "", "if", "not", "(", "ylabel", ")", ":", "\n", "        ", "ax", ".", "set_yticks", "(", "[", "]", ")", "\n", "", "else", ":", "\n", "        ", "ax", ".", "set_ylabel", "(", "'Voltage (mV)'", ",", "fontsize", "=", "fontsize", ",", "fontname", "=", "'Times New Roman'", ")", "\n", "\n", "", "if", "(", "twinx_label", ")", ":", "\n", "        ", "ax_2", ".", "set_yticks", "(", "[", "0.", ",", "1.", "]", ")", "# Binary mask", "\n", "ax_2", ".", "set_ylabel", "(", "'Arbitrary units'", ",", "fontsize", "=", "fontsize", ",", "fontname", "=", "'Times New Roman'", ")", "\n", "", "else", ":", "\n", "        ", "ax_2", ".", "set_yticks", "(", "[", "]", ")", "\n", "\n", "", "return", "ax", "\n", "\n"]], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.visualization.plot_all": [[121, 198], ["plt.gca.plot", "numpy.sort", "numpy.sort", "range", "numpy.sort", "numpy.sort", "range", "numpy.sort", "numpy.sort", "range", "plt.gca.axvspan", "plt.gca.set_xlim", "plt.gca.tick_params", "matplotlib.gca", "numpy.linspace", "len", "len", "plt.gca.axvspan", "len", "len", "plt.gca.axvspan", "len", "len", "plt.gca.axvspan", "plt.gca.set_xticks", "plt.gca.set_xlabel", "plt.gca.set_yticks", "plt.gca.set_ylabel", "numpy.asarray", "numpy.asarray", "numpy.asarray", "len", "len", "numpy.asarray", "len", "len", "numpy.asarray", "len", "len", "numpy.asarray", "np.asarray.tolist", "len", "len", "numpy.asarray", "numpy.asarray", "np.asarray.tolist", "len", "len", "numpy.asarray", "numpy.asarray", "np.asarray.tolist", "len", "len", "numpy.asarray", "numpy.asarray", "np.asarray.tolist", "np.asarray.tolist", "np.asarray.tolist", "np.asarray.tolist", "np.asarray.tolist", "np.asarray.tolist", "np.asarray.tolist", "np.asarray.tolist", "np.asarray.tolist"], "function", ["None"], ["", "def", "plot_all", "(", "config", ",", "data", ",", "key", ",", "on", ",", "off", "=", "None", ",", "ax", "=", "None", ",", "xlabel", "=", "True", ",", "ylabel", "=", "True", ",", "twinx_label", "=", "True", ",", "labelsize", "=", "14", ",", "fontsize", "=", "24", ")", ":", "\n", "    ", "if", "ax", "==", "None", ":", "\n", "        ", "ax", "=", "plt", ".", "gca", "(", ")", "\n", "", "if", "off", "==", "None", ":", "\n", "        ", "off", "=", "on", "+", "config", ".", "window", "\n", "", "f", "=", "config", ".", "sampling_freq", "\n", "\n", "ax", ".", "plot", "(", "np", ".", "linspace", "(", "on", "/", "f", ",", "off", "/", "f", ",", "num", "=", "off", "-", "on", ")", ",", "data", ".", "dataset", "[", "key", "]", "[", "on", ":", "off", "]", ",", "'b'", ")", "\n", "\n", "onsets", "=", "np", ".", "sort", "(", "data", ".", "P", ".", "onset", "[", "key", "]", "[", "(", "data", ".", "P", ".", "onset", "[", "key", "]", ">=", "on", ")", "&", "(", "data", ".", "P", ".", "onset", "[", "key", "]", "<=", "off", ")", "]", ")", "\n", "offsets", "=", "np", ".", "sort", "(", "data", ".", "P", ".", "offset", "[", "key", "]", "[", "(", "data", ".", "P", ".", "onset", "[", "key", "]", ">=", "on", ")", "&", "(", "data", ".", "P", ".", "offset", "[", "key", "]", "<=", "off", ")", "]", ")", "\n", "\n", "# If any wave found", "\n", "if", "len", "(", "offsets", ")", ">", "0", ":", "\n", "        ", "if", "(", "len", "(", "onsets", ")", "!=", "len", "(", "offsets", ")", ")", "&", "(", "onsets", "[", "0", "]", ">", "offsets", "[", "0", "]", ")", ":", "\n", "            ", "onsets", "=", "np", ".", "asarray", "(", "[", "on", "]", "+", "onsets", ".", "tolist", "(", ")", ",", "dtype", "=", "int", ")", "\n", "", "elif", "(", "len", "(", "onsets", ")", "!=", "len", "(", "offsets", ")", ")", "&", "(", "onsets", "[", "0", "]", "<", "offsets", "[", "0", "]", ")", ":", "\n", "            ", "offsets", "=", "np", ".", "asarray", "(", "offsets", ".", "tolist", "(", ")", "+", "[", "off", "]", ",", "dtype", "=", "int", ")", "\n", "", "elif", "(", "onsets", "[", "0", "]", ">", "offsets", "[", "0", "]", ")", ":", "\n", "            ", "onsets", "=", "np", ".", "asarray", "(", "[", "on", "]", "+", "onsets", ".", "tolist", "(", ")", ",", "dtype", "=", "int", ")", "\n", "offsets", "=", "np", ".", "asarray", "(", "offsets", ".", "tolist", "(", ")", "+", "[", "off", "]", ",", "dtype", "=", "int", ")", "\n", "\n", "", "", "for", "i", "in", "range", "(", "len", "(", "onsets", ")", ")", ":", "\n", "        ", "ax", ".", "axvspan", "(", "onsets", "[", "i", "]", "/", "f", ",", "\n", "offsets", "[", "i", "]", "/", "f", ",", "\n", "facecolor", "=", "'r'", ",", "alpha", "=", "0.3", ")", "\n", "\n", "", "onsets", "=", "np", ".", "sort", "(", "data", ".", "QRS", ".", "onset", "[", "key", "]", "[", "(", "data", ".", "QRS", ".", "onset", "[", "key", "]", ">=", "on", ")", "&", "(", "data", ".", "QRS", ".", "onset", "[", "key", "]", "<=", "off", ")", "]", ")", "\n", "offsets", "=", "np", ".", "sort", "(", "data", ".", "QRS", ".", "offset", "[", "key", "]", "[", "(", "data", ".", "QRS", ".", "onset", "[", "key", "]", ">=", "on", ")", "&", "(", "data", ".", "QRS", ".", "offset", "[", "key", "]", "<=", "off", ")", "]", ")", "\n", "\n", "if", "len", "(", "offsets", ")", ">", "0", ":", "\n", "        ", "if", "(", "len", "(", "onsets", ")", "!=", "len", "(", "offsets", ")", ")", "&", "(", "onsets", "[", "0", "]", ">", "offsets", "[", "0", "]", ")", ":", "\n", "            ", "onsets", "=", "np", ".", "asarray", "(", "[", "on", "]", "+", "onsets", ".", "tolist", "(", ")", ",", "dtype", "=", "int", ")", "\n", "", "elif", "(", "len", "(", "onsets", ")", "!=", "len", "(", "offsets", ")", ")", "&", "(", "onsets", "[", "0", "]", "<", "offsets", "[", "0", "]", ")", ":", "\n", "            ", "offsets", "=", "np", ".", "asarray", "(", "offsets", ".", "tolist", "(", ")", "+", "[", "off", "]", ",", "dtype", "=", "int", ")", "\n", "", "elif", "(", "onsets", "[", "0", "]", ">", "offsets", "[", "0", "]", ")", ":", "\n", "            ", "onsets", "=", "np", ".", "asarray", "(", "[", "on", "]", "+", "onsets", ".", "tolist", "(", ")", ",", "dtype", "=", "int", ")", "\n", "offsets", "=", "np", ".", "asarray", "(", "offsets", ".", "tolist", "(", ")", "+", "[", "off", "]", ",", "dtype", "=", "int", ")", "\n", "\n", "", "", "for", "i", "in", "range", "(", "len", "(", "onsets", ")", ")", ":", "\n", "        ", "ax", ".", "axvspan", "(", "onsets", "[", "i", "]", "/", "f", ",", "\n", "offsets", "[", "i", "]", "/", "f", ",", "\n", "facecolor", "=", "'g'", ",", "alpha", "=", "0.3", ")", "\n", "\n", "", "onsets", "=", "np", ".", "sort", "(", "data", ".", "T", ".", "onset", "[", "key", "]", "[", "(", "data", ".", "T", ".", "onset", "[", "key", "]", ">=", "on", ")", "&", "(", "data", ".", "T", ".", "onset", "[", "key", "]", "<=", "off", ")", "]", ")", "\n", "offsets", "=", "np", ".", "sort", "(", "data", ".", "T", ".", "offset", "[", "key", "]", "[", "(", "data", ".", "T", ".", "onset", "[", "key", "]", ">=", "on", ")", "&", "(", "data", ".", "T", ".", "offset", "[", "key", "]", "<=", "off", ")", "]", ")", "\n", "\n", "if", "len", "(", "offsets", ")", ">", "0", ":", "\n", "        ", "if", "(", "len", "(", "onsets", ")", "!=", "len", "(", "offsets", ")", ")", "&", "(", "onsets", "[", "0", "]", ">", "offsets", "[", "0", "]", ")", ":", "\n", "            ", "onsets", "=", "np", ".", "asarray", "(", "[", "on", "]", "+", "onsets", ".", "tolist", "(", ")", ",", "dtype", "=", "int", ")", "\n", "", "elif", "(", "len", "(", "onsets", ")", "!=", "len", "(", "offsets", ")", ")", "&", "(", "onsets", "[", "0", "]", "<", "offsets", "[", "0", "]", ")", ":", "\n", "            ", "offsets", "=", "np", ".", "asarray", "(", "offsets", ".", "tolist", "(", ")", "+", "[", "off", "]", ",", "dtype", "=", "int", ")", "\n", "", "elif", "(", "onsets", "[", "0", "]", ">", "offsets", "[", "0", "]", ")", ":", "\n", "            ", "onsets", "=", "np", ".", "asarray", "(", "[", "on", "]", "+", "onsets", ".", "tolist", "(", ")", ",", "dtype", "=", "int", ")", "\n", "offsets", "=", "np", ".", "asarray", "(", "offsets", ".", "tolist", "(", ")", "+", "[", "off", "]", ",", "dtype", "=", "int", ")", "\n", "\n", "", "", "for", "i", "in", "range", "(", "len", "(", "onsets", ")", ")", ":", "\n", "        ", "ax", ".", "axvspan", "(", "onsets", "[", "i", "]", "/", "f", ",", "\n", "offsets", "[", "i", "]", "/", "f", ",", "\n", "facecolor", "=", "'m'", ",", "alpha", "=", "0.3", ")", "\n", "\n", "", "ax", ".", "axvspan", "(", "on", "/", "f", ",", "off", "/", "f", ",", "facecolor", "=", "'y'", ",", "alpha", "=", "0.05", ")", "\n", "ax", ".", "set_xlim", "(", "[", "on", "/", "f", ",", "off", "/", "f", "]", ")", "\n", "ax", ".", "tick_params", "(", "axis", "=", "'both'", ",", "which", "=", "'major'", ",", "labelsize", "=", "labelsize", ",", "labelrotation", "=", "45.", ")", "\n", "# ax.get_yaxis().set_label_coords(-0.09,0.5)", "\n", "\n", "if", "not", "(", "xlabel", ")", ":", "\n", "        ", "ax", ".", "set_xticks", "(", "[", "]", ")", "\n", "", "else", ":", "\n", "        ", "ax", ".", "set_xlabel", "(", "'Time (s)'", ",", "fontsize", "=", "fontsize", ",", "fontname", "=", "'Times New Roman'", ")", "\n", "\n", "", "if", "not", "(", "ylabel", ")", ":", "\n", "        ", "ax", ".", "set_yticks", "(", "[", "]", ")", "\n", "", "else", ":", "\n", "        ", "ax", ".", "set_ylabel", "(", "'Voltage (mV)'", ",", "fontsize", "=", "fontsize", ",", "fontname", "=", "'Times New Roman'", ")", "\n", "\n", "", "return", "ax", "\n", "", ""]], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.architecture2D.FlatNet.__init__": [[19, 42], ["utils.disambiguator.select_kernel_initializer"], "methods", ["home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.disambiguator.select_kernel_initializer"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "'''Initialization'''", "\n", "\n", "assert", "config", ".", "m_name", "in", "(", "'vanilla'", ",", "'residual'", ",", "'xception'", ")", "\n", "\n", "# Parameters", "\n", "self", ".", "sig_shape", "=", "(", "config", ".", "window", ",", "config", ".", "in_ch", ",", "1", ")", "\n", "self", ".", "m_name", "=", "config", ".", "m_name", "\n", "self", ".", "m_repetitions", "=", "config", ".", "m_repetitions", "\n", "self", ".", "ms_upsampling", "=", "config", ".", "ms_upsampling", "\n", "self", ".", "hyperdense", "=", "config", ".", "hyperdense", "\n", "self", ".", "atrous_conv", "=", "config", ".", "atrous_conv", "\n", "self", ".", "maxpool", "=", "False", "\n", "self", ".", "out_ch", "=", "config", ".", "out_ch", "\n", "self", ".", "dropout_rate", "=", "config", ".", "dropout_rate", "\n", "self", ".", "start_ch", "=", "config", ".", "start_ch", "\n", "self", ".", "kernel_size", "=", "(", "config", ".", "kernel_size", ",", "1", ")", "\n", "self", ".", "depth", "=", "config", ".", "depth", "\n", "self", ".", "inc_rate", "=", "config", ".", "inc_rate", "\n", "self", ".", "kernel_init", "=", "select_kernel_initializer", "(", "config", ".", "kernel_init", ")", "\n", "\n", "# Declutter code -> essentially the same information in every single function call", "\n", "self", ".", "constant_info", "=", "(", "self", ".", "kernel_size", ",", "self", ".", "dropout_rate", ",", "self", ".", "kernel_init", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.architecture2D.FlatNet.__skipped_connection": [[44, 57], ["keras.layers.Concatenate", "keras.layers.Concatenate", "keras.layers.Concatenate", "keras.layers.Concatenate", "keras.layers.UpSampling2D", "keras.layers.UpSampling2D", "keras.layers.UpSampling2D", "keras.layers.UpSampling2D", "range", "keras.layers.UpSampling2D", "keras.layers.UpSampling2D", "keras.layers.UpSampling2D", "keras.layers.UpSampling2D"], "methods", ["None"], ["", "def", "__skipped_connection", "(", "self", ",", "model", ",", "level", ")", ":", "\n", "# Add last element of the encoder", "\n", "        ", "vector", "=", "[", "model", "[", "level", "-", "1", "]", "[", "-", "1", "]", "]", "\n", "\n", "if", "self", ".", "ms_upsampling", ":", "\n", "# Add all possible combinations of upsamplings from previous levels in the decoder", "\n", "            ", "vector", "+=", "[", "keras", ".", "layers", ".", "UpSampling2D", "(", "size", "=", "(", "2", "**", "(", "i", "+", "1", ")", ",", "1", ")", ")", "(", "model", "[", "level", "+", "i", "]", "[", "-", "1", "]", ")", "for", "i", "in", "range", "(", "(", "self", ".", "depth", ")", "-", "level", ")", "]", "\n", "", "else", ":", "\n", "# Upsample last layer", "\n", "            ", "vector", "+=", "[", "keras", ".", "layers", ".", "UpSampling2D", "(", "size", "=", "(", "2", ",", "1", ")", ")", "(", "model", "[", "level", "]", "[", "-", "1", "]", ")", "]", "\n", "\n", "# Concatenate result", "\n", "", "return", "keras", ".", "layers", ".", "Concatenate", "(", ")", "(", "vector", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.architecture2D.FlatNet.__input_selector": [[59, 64], ["len", "keras.layers.Concatenate", "keras.layers.Concatenate", "keras.layers.Concatenate", "keras.layers.Concatenate"], "methods", ["None"], ["", "def", "__input_selector", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "hyperdense", "and", "(", "len", "(", "x", ")", "!=", "1", ")", ":", "\n", "            ", "return", "keras", ".", "layers", ".", "Concatenate", "(", ")", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "return", "x", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.architecture2D.FlatNet.__level_operation": [[66, 74], ["range", "x.append", "utils.modules2D.LevelModule", "architecture2D.FlatNet.__input_selector", "int"], "methods", ["home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.modules2D.LevelModule", "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.architecture2D.FlatNet.__input_selector"], ["", "", "def", "__level_operation", "(", "self", ",", "x", ",", "level", ")", ":", "\n", "# If single tensor, add to list for posterior concatenation", "\n", "        ", "for", "j", "in", "range", "(", "self", ".", "m_repetitions", ")", ":", "\n", "            ", "x", ".", "append", "(", "LevelModule", "(", "self", ".", "m_name", ")", "(", "self", ".", "__input_selector", "(", "x", ")", ",", "\n", "int", "(", "self", ".", "inc_rate", "**", "level", ")", "*", "self", ".", "start_ch", ",", "\n", "*", "self", ".", "constant_info", ")", ")", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.architecture2D.FlatNet.create_model": [[76, 129], ["model[].append", "model[].append", "range", "model[].append", "model[].append", "keras.Model", "keras.Model", "keras.Model", "keras.Model", "keras.layers.Input", "keras.layers.Input", "keras.layers.Input", "keras.layers.Input", "architecture2D.FlatNet.__level_operation", "model[].pop", "model[].append", "architecture2D.FlatNet.__skipped_connection", "range", "architecture2D.FlatNet.__level_operation", "model[].pop", "model[].append", "model[].append", "range", "utils.modules2D.StemModule", "model[].append", "model[].append", "utils.modules2D.OutputModule", "architecture2D.FlatNet.__input_selector", "int", "utils.modules2D.AtrousMiddleModule", "architecture2D.FlatNet.__input_selector", "architecture2D.FlatNet.__skipped_connection", "utils.modules2D.MergeModule", "architecture2D.FlatNet.__input_selector", "utils.modules2D.LevelModule", "architecture2D.FlatNet.__input_selector", "utils.modules2D.PoolingModule", "architecture2D.FlatNet.__input_selector", "int", "int"], "methods", ["home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.architecture2D.FlatNet.__level_operation", "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.architecture2D.FlatNet.__skipped_connection", "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.architecture2D.FlatNet.__level_operation", "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.modules2D.StemModule", "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.modules2D.OutputModule", "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.architecture2D.FlatNet.__input_selector", "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.modules2D.AtrousMiddleModule", "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.architecture2D.FlatNet.__input_selector", "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.architecture2D.FlatNet.__skipped_connection", "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.modules2D.MergeModule", "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.architecture2D.FlatNet.__input_selector", "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.modules2D.LevelModule", "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.architecture2D.FlatNet.__input_selector", "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.modules2D.PoolingModule", "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.architecture2D.FlatNet.__input_selector"], ["", "def", "create_model", "(", "self", ")", ":", "\n", "# Storage of output tensors", "\n", "        ", "model", "=", "[", "[", "]", "for", "i", "in", "range", "(", "self", ".", "depth", ")", "]", "\n", "\n", "# Define model's input", "\n", "model", "[", "0", "]", ".", "append", "(", "keras", ".", "layers", ".", "Input", "(", "shape", "=", "self", ".", "sig_shape", ")", ")", "\n", "\n", "# Add stem to bridge the gap between segmentation and classification architectures", "\n", "model", "[", "0", "]", ".", "append", "(", "StemModule", "(", "self", ".", "m_name", ")", "(", "model", "[", "0", "]", "[", "-", "1", "]", ",", "self", ".", "start_ch", ",", "*", "self", ".", "constant_info", ")", ")", "\n", "\n", "######################### ENCODER ##########################", "\n", "for", "level", "in", "range", "(", "self", ".", "depth", ")", ":", "\n", "# Fill level with convolutional blocks", "\n", "            ", "model", "[", "level", "]", "=", "self", ".", "__level_operation", "(", "model", "[", "level", "]", ",", "level", ")", "\n", "\n", "# Start the next level's module", "\n", "if", "(", "level", "+", "1", ")", "!=", "self", ".", "depth", ":", "\n", "                ", "model", "[", "level", "+", "1", "]", ".", "append", "(", "PoolingModule", "(", "self", ".", "m_name", ")", "(", "self", ".", "__input_selector", "(", "model", "[", "level", "]", ")", ",", "int", "(", "self", ".", "inc_rate", "**", "(", "level", "+", "1", ")", ")", "*", "self", ".", "start_ch", ",", "*", "self", ".", "constant_info", ")", ")", "\n", "\n", "######################### BOTTLENECK ##########################", "\n", "", "", "if", "self", ".", "atrous_conv", ":", "\n", "# Withdraw last operation", "\n", "            ", "model", "[", "-", "1", "]", ".", "pop", "(", ")", "\n", "\n", "# Include atrous convolution", "\n", "model", "[", "-", "1", "]", ".", "append", "(", "AtrousMiddleModule", "(", "self", ".", "m_name", ")", "(", "self", ".", "__input_selector", "(", "model", "[", "level", "]", ")", ",", "int", "(", "self", ".", "inc_rate", "**", "(", "self", ".", "depth", "-", "1", ")", ")", "*", "self", ".", "start_ch", ",", "*", "self", ".", "constant_info", ")", ")", "\n", "\n", "######################### DECODER ##########################", "\n", "# Upsample last tensor of the bottleneck", "\n", "", "model", "[", "-", "2", "]", ".", "append", "(", "self", ".", "__skipped_connection", "(", "model", ",", "self", ".", "depth", "-", "1", ")", ")", "\n", "\n", "# Traverse the blocks in reverse order", "\n", "for", "level", "in", "range", "(", "self", ".", "depth", "-", "1", ")", "[", ":", ":", "-", "1", "]", ":", "\n", "# If output level:", "\n", "# if level == 0:", "\n", "#     model[level].append(MergeModule(self.m_name)(self.__input_selector(model[level]), self.start_ch, *self.constant_info))", "\n", "\n", "# Fill level with convolutional blocks", "\n", "            ", "model", "[", "level", "]", "=", "self", ".", "__level_operation", "(", "model", "[", "level", "]", ",", "level", ")", "\n", "\n", "# Start the next level's module with (multi-scale?) upsampling and skipped connection", "\n", "if", "level", "!=", "0", ":", "\n", "                ", "model", "[", "level", "-", "1", "]", ".", "append", "(", "self", ".", "__skipped_connection", "(", "model", ",", "level", ")", ")", "\n", "\n", "", "", "if", "self", ".", "sig_shape", "[", "1", "]", "==", "2", ":", "\n", "            ", "model", "[", "0", "]", ".", "pop", "(", ")", "\n", "model", "[", "0", "]", ".", "append", "(", "MergeModule", "(", "self", ".", "m_name", ")", "(", "self", ".", "__input_selector", "(", "model", "[", "0", "]", ")", ",", "self", ".", "start_ch", ",", "*", "self", ".", "constant_info", ")", ")", "\n", "model", "[", "0", "]", ".", "append", "(", "LevelModule", "(", "self", ".", "m_name", ")", "(", "self", ".", "__input_selector", "(", "model", "[", "0", "]", ")", ",", "self", ".", "start_ch", ",", "*", "self", ".", "constant_info", ")", ")", "\n", "\n", "# Apply final convolution with sigmoid activation function", "\n", "", "model", "[", "0", "]", ".", "append", "(", "OutputModule", "(", "self", ".", "m_name", ")", "(", "self", ".", "__input_selector", "(", "model", "[", "0", "]", ")", ",", "int", "(", "self", ".", "out_ch", ")", ",", "(", "1", ",", "1", ")", ",", "self", ".", "dropout_rate", ",", "self", ".", "kernel_init", ")", ")", "\n", "\n", "return", "keras", ".", "Model", "(", "inputs", "=", "model", "[", "0", "]", "[", "0", "]", ",", "outputs", "=", "model", "[", "0", "]", "[", "-", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.architecture2D.FlatNet.Export": [[131, 147], ["open", "dict", "csv.writer", "csv.writer.writerows", "dict.items"], "methods", ["None"], ["", "def", "Export", "(", "self", ",", "path", ")", ":", "\n", "        ", "with", "open", "(", "path", ",", "'wb'", ")", "as", "f", ":", "\n", "            ", "printDict", "=", "dict", "(", ")", "\n", "printDict", "[", "'Input_SignalShape:                       '", "]", "=", "self", ".", "sig_shape", "\n", "printDict", "[", "'Architecture_IsHyperDense:               '", "]", "=", "self", ".", "hyperdense", "\n", "printDict", "[", "'Architecture_Depth:                      '", "]", "=", "self", ".", "depth", "\n", "printDict", "[", "'Architecture_OutputChannels:             '", "]", "=", "self", ".", "out_ch", "\n", "printDict", "[", "'Architecture_StartingChannels:           '", "]", "=", "self", ".", "start_ch", "\n", "printDict", "[", "'Architecture_ChannelIncrementRate:       '", "]", "=", "self", ".", "inc_rate", "\n", "printDict", "[", "'Architecture_KernelInitializer:          '", "]", "=", "self", ".", "kernel_init", "\n", "printDict", "[", "'Module_Name:                             '", "]", "=", "self", ".", "m_name", "\n", "printDict", "[", "'Module_Repetitions:                      '", "]", "=", "self", ".", "m_repetitions", "\n", "printDict", "[", "'Module_KernelSize:                       '", "]", "=", "self", ".", "kernel_size", "\n", "\n", "w", "=", "csv", ".", "writer", "(", "f", ")", "\n", "w", ".", "writerows", "(", "printDict", ".", "items", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.logger.conditional_makedir": [[11, 26], ["pathlib.Path", "pathlib.Path.parent.mkdir", "os.path.normpath().split", "os.path.join", "os.path.exists", "os.makedirs", "os.path.normpath"], "function", ["None"], ["def", "conditional_makedir", "(", "path", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "import", "pathlib", "\n", "p", "=", "pathlib", ".", "Path", "(", "path", ")", "\n", "p", ".", "parent", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "\n", "", "except", ":", "\n", "        ", "list_path", "=", "normpath", "(", "path", ")", ".", "split", "(", "sep", ")", "[", "1", ":", "]", "\n", "t", "=", "'/'", "\n", "\n", "for", "p", "in", "list_path", ":", "\n", "            ", "t", "=", "join", "(", "t", ",", "p", ")", "\n", "\n", "if", "not", "exists", "(", "t", ")", ":", "\n", "                ", "makedirs", "(", "t", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.logger.retrieve_terminal_size": [[28, 38], ["os.get_terminal_size"], "function", ["None"], ["", "", "", "", "def", "retrieve_terminal_size", "(", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "width", "=", "(", "get_terminal_size", "(", ")", ".", "columns", "-", "15", ")", "/", "2", "\n", "", "except", "OSError", ":", "\n", "        ", "width", "=", "(", "80", "-", "15", ")", "/", "2", "\n", "\n", "# Just in case", "\n", "", "if", "(", "width", "==", "None", ")", ":", "width", "=", "(", "80", "-", "15", ")", "/", "2", "\n", "\n", "return", "width", "\n", "\n"]], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.logger.write_summary": [[40, 45], ["open", "model.summary", "f.write"], "function", ["None"], ["", "def", "write_summary", "(", "filename", ",", "model", ")", ":", "\n", "# Open the file", "\n", "    ", "with", "open", "(", "filename", ",", "'w'", ")", "as", "f", ":", "\n", "# Pass the file handle in as a lambda function to make it callable", "\n", "        ", "model", ".", "summary", "(", "print_fn", "=", "lambda", "x", ":", "f", ".", "write", "(", "x", "+", "'\\n'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.logger.print_summary": [[47, 51], ["print"], "function", ["None"], ["", "", "def", "print_summary", "(", "f", ")", ":", "\n", "    ", "def", "__print__", "(", "s", ")", ":", "\n", "        ", "print", "(", "s", ",", "file", "=", "f", ")", "\n", "", "return", "__print__", "\n", "\n"]], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.logger.lr_scheduler": [[53, 58], ["math.pow", "math.floor"], "function", ["None"], ["", "def", "lr_scheduler", "(", "initial_lrate", ",", "drop", ",", "epochs_drop", ")", ":", "\n", "    ", "def", "step_decay", "(", "epoch", ")", ":", "\n", "        ", "lrate", "=", "initial_lrate", "*", "pow", "(", "drop", ",", "floor", "(", "(", "1", "+", "epoch", ")", "/", "epochs_drop", ")", ")", "\n", "return", "lrate", "\n", "", "return", "step_decay", "\n", "\n"]], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.train.train_cross_val": [[27, 66], ["range", "numpy.asarray", "utils.data_structures.ExecutionInformation", "utils.evaluation.evaluate", "isinstance", "tensorflow.set_random_seed", "numpy.random.seed", "utils.check.check_weights_exist", "len", "time.time", "utils.data_structures.ExecutionInformation", "train.train_fold", "print", "list", "len", "ValueError", "time.time", "set", "len", "len", "train_keys.tolist", "test_keys.tolist"], "function", ["home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.evaluation2.evaluate", "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.check.check_weights_exist", "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.train.train_fold"], ["def", "train_cross_val", "(", "KFolds", ",", "config", ",", "data", ",", "metrics", ",", "metrics_CV2", ",", "results", ",", "results_CV2", ")", ":", "\n", "# Set random seed", "\n", "    ", "if", "(", "config", ".", "seed", "!=", "None", ")", "and", "isinstance", "(", "config", ".", "seed", ",", "int", ")", ":", "\n", "        ", "tf", ".", "set_random_seed", "(", "config", ".", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "config", ".", "seed", ")", "\n", "\n", "# Ensure that the model will fit in GPU memory", "\n", "", "good_batch_size", "=", "False", "\n", "\n", "# Check whether weight files exist before starting, if evaluate flag is active", "\n", "if", "(", "config", ".", "evaluate", ")", ":", "check_weights_exist", "(", "config", ",", "KFolds", ")", "\n", "\n", "for", "fold", "in", "range", "(", "len", "(", "KFolds", ")", ")", ":", "\n", "# Keep track of training time", "\n", "        ", "t_start", "=", "time", ".", "time", "(", ")", "\n", "(", "train_keys", ",", "test_keys", ")", "=", "KFolds", "[", "fold", "]", "\n", "# (train_keys, valid_keys) = shuffle_split_array(train_keys, config.val_split)", "\n", "\n", "# Retrieve fold information", "\n", "# execinfo = FoldKeys(train_keys=train_keys, valid_keys=valid_keys, test_keys=test_keys)", "\n", "execinfo", "=", "ExecutionInformation", "(", "config", ",", "fold", ",", "train_keys", ",", "test_keys", ",", "config", ".", "evaluate", ")", "\n", "\n", "# Train a single fold", "\n", "good_batch_size", "=", "train_fold", "(", "config", ",", "data", ",", "execinfo", ",", "metrics", ",", "metrics_CV2", ",", "results", ",", "results_CV2", ",", "good_batch_size", ",", "True", ")", "\n", "\n", "# Check total training time", "\n", "time_elapsed", "=", "time", ".", "time", "(", ")", "-", "t_start", "\n", "print", "(", "'\\n * Training complete in {:.0f}m {:.0f}s\\n'", ".", "format", "(", "time_elapsed", "//", "60", ",", "time_elapsed", "%", "60", ")", ")", "\n", "\n", "# Retrieve patient ID from lead data", "\n", "", "IDs", "=", "np", ".", "asarray", "(", "list", "(", "set", "(", "train_keys", ".", "tolist", "(", ")", "+", "test_keys", ".", "tolist", "(", ")", ")", ")", ")", "# Avoid duplicates", "\n", "\n", "# Sanity check", "\n", "if", "len", "(", "IDs", ")", "!=", "len", "(", "train_keys", ")", "+", "len", "(", "test_keys", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\"Some record shared between train and test!\"", ")", "\n", "\n", "# Evaluation of whole dataset", "\n", "", "execinfo", "=", "ExecutionInformation", "(", "config", ",", "None", ",", "None", ",", "IDs", ",", "True", ")", "\n", "evaluate", "(", "None", ",", "config", ",", "data", ",", "execinfo", ",", "metrics", ",", "metrics_CV2", ",", "results", ",", "results_CV2", ",", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.train.train_all": [[68, 105], ["time.time", "print", "isinstance", "tensorflow.set_random_seed", "numpy.random.seed", "utils.FlatNet().create_model", "utils.disambiguator.select_loss", "arch.FlatNet().create_model.compile", "utils.data_structures.ExecutionInformation", "utils.evaluation.evaluate", "utils.data_structures.ExecutionInformation", "train.train_fold", "time.time", "utils.disambiguator.select_optimizer", "config.loss.lower", "FileNotFoundError", "utils.FlatNet", "config.optimizer.lower", "os.path.exists", "os.path.exists"], "function", ["home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.architecture2D.FlatNet.create_model", "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.disambiguator.select_loss", "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.evaluation2.evaluate", "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.train.train_fold", "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.disambiguator.select_optimizer"], ["", "def", "train_all", "(", "IDs", ",", "config", ",", "data", ",", "metrics", ",", "metrics_CV2", ",", "results", ",", "results_CV2", ")", ":", "\n", "# Set random seed", "\n", "    ", "if", "(", "config", ".", "seed", "!=", "None", ")", "and", "isinstance", "(", "config", ".", "seed", ",", "int", ")", ":", "\n", "        ", "tf", ".", "set_random_seed", "(", "config", ".", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "config", ".", "seed", ")", "\n", "\n", "# Keep track of training time", "\n", "", "t_start", "=", "time", ".", "time", "(", ")", "\n", "\n", "# \"iif\" evaluate, test on whole database: useful for testing on other DB's", "\n", "if", "config", ".", "evaluate", ":", "\n", "# Define the model according to the configuration", "\n", "# if config.strategy == 'single': model = arch.FlatNet(config).create_model()", "\n", "# else:                           model = arch2D.FlatNet(config).create_model()", "\n", "        ", "model", "=", "arch", ".", "FlatNet", "(", "config", ")", ".", "create_model", "(", ")", "\n", "\n", "# Select optimizer and loss + compile", "\n", "optim", "=", "select_optimizer", "(", "config", ".", "optimizer", ".", "lower", "(", ")", ")", "(", "lr", "=", "config", ".", "learning_rate", ")", "\n", "loss", "=", "select_loss", "(", "config", ".", "loss", ".", "lower", "(", ")", ")", "\n", "model", ".", "compile", "(", "optimizer", "=", "optim", ",", "loss", "=", "loss", ")", "\n", "\n", "execinfo", "=", "ExecutionInformation", "(", "config", ",", "None", ",", "None", ",", "IDs", ",", "True", ")", "# Define execution", "\n", "evaluate", "(", "model", ",", "config", ",", "data", ",", "execinfo", ",", "metrics", ",", "metrics_CV2", ",", "results", ",", "results_CV2", ",", "True", ")", "# Evaluate", "\n", "", "else", ":", "\n", "# Retrieve execution information", "\n", "        ", "execinfo", "=", "ExecutionInformation", "(", "config", ",", "None", ",", "IDs", ",", "None", ",", "False", ")", "\n", "\n", "# Check whether weight files exist before starting, if evaluate flag is active", "\n", "if", "(", "config", ".", "evaluate", ")", "and", "(", "not", "os", ".", "path", ".", "exists", "(", "execinfo", ".", "state", ")", ")", ":", "\n", "            ", "raise", "FileNotFoundError", "(", "\"Weights file not found\"", ")", "\n", "\n", "# Train a single \"\"fold\"\"", "\n", "", "_", "=", "train_fold", "(", "config", ",", "data", ",", "execinfo", ",", "metrics", ",", "metrics_CV2", ",", "results", ",", "results_CV2", ",", "False", ",", "True", ")", "\n", "\n", "# Check total training time", "\n", "", "time_elapsed", "=", "time", ".", "time", "(", ")", "-", "t_start", "\n", "print", "(", "'\\n * Training complete in {:.0f}m {:.0f}s\\n'", ".", "format", "(", "time_elapsed", "//", "60", ",", "time_elapsed", "%", "60", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.train.train_fold": [[107, 145], ["keras.backend.clear_session", "keras.backend.clear_session", "utils.FlatNet().create_model", "utils.disambiguator.select_loss", "arch.FlatNet().create_model.compile", "utils.logger.write_summary", "utils.disambiguator.select_optimizer", "config.loss.lower", "os.path.exists", "os.path.exists", "arch.FlatNet().create_model.load_weights", "utils.data_structures.DataGenerator", "utils.data_structures.DataGenerator", "train.train_epochs", "utils.FlatNet", "config.optimizer.lower", "config.splitting.lower", "utils.evaluation.evaluate", "config.splitting.lower", "utils.evaluation.evaluate"], "function", ["home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.architecture2D.FlatNet.create_model", "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.disambiguator.select_loss", "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.logger.write_summary", "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.disambiguator.select_optimizer", "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.train.train_epochs", "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.evaluation2.evaluate", "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.evaluation2.evaluate"], ["", "def", "train_fold", "(", "config", ",", "data", ",", "execinfo", ",", "metrics", ",", "metrics_CV2", ",", "results", ",", "results_CV2", ",", "good_batch_size", ",", "recompute", ")", ":", "\n", "############################# MODEL CREATION ############################", "\n", "# Clear cache", "\n", "    ", "keras", ".", "backend", ".", "clear_session", "(", ")", "\n", "\n", "# Define the model according to the configuration", "\n", "# if config.strategy == 'single': model = arch.FlatNet(config).create_model()", "\n", "# else:                           model = arch2D.FlatNet(config).create_model()", "\n", "model", "=", "arch", ".", "FlatNet", "(", "config", ")", ".", "create_model", "(", ")", "\n", "\n", "# Select optimizer and loss + compile", "\n", "optim", "=", "select_optimizer", "(", "config", ".", "optimizer", ".", "lower", "(", ")", ")", "(", "lr", "=", "config", ".", "learning_rate", ")", "\n", "loss", "=", "select_loss", "(", "config", ".", "loss", ".", "lower", "(", ")", ")", "\n", "model", ".", "compile", "(", "optimizer", "=", "optim", ",", "loss", "=", "loss", ")", "\n", "\n", "write_summary", "(", "execinfo", ".", "summary", ",", "model", ")", "\n", "\n", "# If chosen and exists, load weights (fine-tuning, etc.)", "\n", "if", "(", "config", ".", "load_weights", "or", "config", ".", "evaluate", ")", "and", "os", ".", "path", ".", "exists", "(", "execinfo", ".", "state", ")", ":", "\n", "        ", "model", ".", "load_weights", "(", "execinfo", ".", "state", ")", "\n", "\n", "# If the flag to evaluate has not been set, train the model", "\n", "", "if", "not", "config", ".", "evaluate", ":", "\n", "# Data generators", "\n", "        ", "GeneratorTrain", "=", "DataGenerator", "(", "execinfo", ".", "train", ",", "config", ",", "data", ")", "\n", "GeneratorValid", "=", "DataGenerator", "(", "execinfo", ".", "valid", ",", "config", ",", "data", ")", "\n", "\n", "# keras-specific train", "\n", "good_batch_size", "=", "train_epochs", "(", "config", ",", "model", ",", "data", ",", "execinfo", ",", "results", ",", "results_CV2", ",", "good_batch_size", ",", "GeneratorTrain", ",", "GeneratorValid", ")", "\n", "\n", "# Evaluate model", "\n", "if", "config", ".", "splitting", ".", "lower", "(", ")", "==", "\"cross_validation\"", ":", "\n", "            ", "evaluate", "(", "model", ",", "config", ",", "data", ",", "execinfo", ",", "metrics", ",", "metrics_CV2", ",", "results", ",", "results_CV2", ",", "recompute", ")", "\n", "", "", "else", ":", "\n", "        ", "if", "config", ".", "splitting", ".", "lower", "(", ")", "==", "\"cross_validation\"", ":", "\n", "            ", "evaluate", "(", "model", ",", "config", ",", "data", ",", "execinfo", ",", "metrics", ",", "metrics_CV2", ",", "results", ",", "results_CV2", ",", "recompute", ")", "\n", "\n", "", "", "return", "good_batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.train.train_epochs": [[147, 177], ["keras.callbacks.ModelCheckpoint", "keras.callbacks.ModelCheckpoint", "keras.callbacks.CSVLogger", "keras.callbacks.CSVLogger", "keras.callbacks.EarlyStopping", "keras.callbacks.EarlyStopping", "model.fit_generator", "print", "model.fit_generator", "print", "str", "exit", "utils.data_structures.DataGenerator", "utils.data_structures.DataGenerator"], "function", ["None"], ["", "def", "train_epochs", "(", "config", ",", "model", ",", "data", ",", "execinfo", ",", "results", ",", "results_CV2", ",", "good_batch_size", ",", "GeneratorTrain", ",", "GeneratorValid", ")", ":", "\n", "# Keras Callbacks", "\n", "    ", "pointer", "=", "keras", ".", "callbacks", ".", "ModelCheckpoint", "(", "filepath", "=", "execinfo", ".", "state", ",", "save_best_only", "=", "True", ")", "\n", "csv_logger", "=", "keras", ".", "callbacks", ".", "CSVLogger", "(", "execinfo", ".", "logger", ",", "append", "=", "False", ",", "separator", "=", "','", ")", "\n", "stopper", "=", "keras", ".", "callbacks", ".", "EarlyStopping", "(", "patience", "=", "config", ".", "patience", ",", "restore_best_weights", "=", "True", ")", "\n", "\n", "# Avoid issues with model not fitting in GPU RAM", "\n", "while", "not", "good_batch_size", ":", "\n", "        ", "try", ":", "\n", "            ", "print", "(", "'Current batch size: '", "+", "str", "(", "config", ".", "batch_size", ")", ")", "\n", "model", ".", "fit_generator", "(", "GeneratorTrain", ",", "validation_data", "=", "GeneratorValid", ",", "epochs", "=", "config", ".", "n_epochs", ",", "\n", "shuffle", "=", "True", ",", "callbacks", "=", "[", "pointer", ",", "stopper", ",", "csv_logger", "]", ")", "\n", "print", "(", "\" \"", ")", "\n", "good_batch_size", "=", "True", "\n", "", "except", "tf", ".", "errors", ".", "ResourceExhaustedError", ":", "# Adjust Batch Size dynamically for cluster", "\n", "            ", "if", "config", ".", "batch_size", "==", "1", ":", "# Avoid infinite loops", "\n", "                ", "exit", "(", ")", "\n", "", "else", ":", "\n", "# Update batch size, *also for future folds*", "\n", "                ", "config", ".", "batch_size", "//=", "2", "\n", "\n", "# Create again Generators with updated batch size", "\n", "GeneratorTrain", "=", "DataGenerator", "(", "execinfo", ".", "train", ",", "config", ",", "data", ")", "\n", "GeneratorValid", "=", "DataGenerator", "(", "execinfo", ".", "valid", ",", "config", ",", "data", ")", "\n", "\n", "", "", "", "if", "not", "(", "execinfo", ".", "fold", "in", "[", "0", ",", "None", "]", ")", ":", "\n", "        ", "model", ".", "fit_generator", "(", "GeneratorTrain", ",", "validation_data", "=", "GeneratorValid", ",", "epochs", "=", "config", ".", "n_epochs", ",", "\n", "shuffle", "=", "True", ",", "callbacks", "=", "[", "pointer", ",", "stopper", ",", "csv_logger", "]", ")", "\n", "\n", "", "return", "good_batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.check.check_weights_exist": [[6, 14], ["range", "len", "utils.data_structures.ExecutionInformation", "os.path.exists", "FileNotFoundError"], "function", ["None"], ["def", "check_weights_exist", "(", "config", ",", "KFolds", ")", ":", "\n", "    ", "for", "fold", "in", "range", "(", "len", "(", "KFolds", ")", ")", ":", "\n", "        ", "(", "train_keys", ",", "test_keys", ")", "=", "KFolds", "[", "fold", "]", "\n", "\n", "execinfo", "=", "ExecutionInformation", "(", "config", ",", "fold", ",", "train_keys", ",", "test_keys", ",", "config", ".", "evaluate", ")", "\n", "\n", "if", "not", "exists", "(", "execinfo", ".", "state", ")", ":", "\n", "            ", "raise", "FileNotFoundError", "(", "\"Weights file not found\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.check.shuffle_split_array": [[16, 22], ["numpy.random.permutation", "math.ceil", "math.ceil", "len", "len"], "function", ["None"], ["", "", "", "def", "shuffle_split_array", "(", "array", ",", "ptg", "=", "0.2", ")", ":", "\n", "    ", "array", "=", "permutation", "(", "array", ")", "\n", "end_array", "=", "array", "[", ":", "ceil", "(", "ptg", "*", "len", "(", "array", ")", ")", "]", "\n", "beginning_array", "=", "array", "[", "ceil", "(", "ptg", "*", "len", "(", "array", ")", ")", ":", "]", "\n", "\n", "return", "beginning_array", ",", "end_array", "\n", "\n"]], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.modules2D.soft_orthogonal_regularizer": [[13, 26], ["keras.int_shape", "keras.reshape", "keras.backend.square", "keras.backend.square", "keras.backend.square", "keras.backend.square", "keras.backend.sum", "keras.backend.sum", "keras.backend.sum", "keras.backend.sum", "keras.backend.sqrt", "keras.backend.sqrt", "keras.backend.sqrt", "keras.backend.sqrt", "keras.dot", "keras.eye", "keras.transpose"], "function", ["None"], ["def", "soft_orthogonal_regularizer", "(", "d_rate", "=", "0.01", ")", ":", "\n", "    ", "def", "aux_so", "(", "w", ")", ":", "\n", "        ", "S", ",", "C", ",", "M", "=", "K", ".", "int_shape", "(", "w", ")", "\n", "wf", "=", "K", ".", "reshape", "(", "w", ",", "[", "S", "*", "C", ",", "M", "]", ")", "\n", "o", "=", "K", ".", "dot", "(", "K", ".", "transpose", "(", "wf", ")", ",", "wf", ")", "-", "K", ".", "eye", "(", "M", ",", "dtype", "=", "wf", ".", "dtype", ")", "\n", "n", "=", "keras", ".", "backend", ".", "square", "(", "o", ")", "\n", "n", "=", "keras", ".", "backend", ".", "sum", "(", "n", ")", "\n", "n", "=", "keras", ".", "backend", ".", "sqrt", "(", "n", ")", "\n", "out", "=", "d_rate", "*", "n", "\n", "\n", "return", "out", "\n", "\n", "", "return", "aux_so", "\n", "\n"]], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.modules2D.spectral_res_iso_reg": [[27, 50], ["keras.int_shape", "keras.reshape", "keras.random_uniform", "keras.dot", "tensorflow.divide", "keras.dot", "keras.dot", "keras.eye", "keras.sum", "keras.transpose", "keras.square", "keras.sum", "keras.sum", "keras.square", "keras.square"], "function", ["None"], ["", "def", "spectral_res_iso_reg", "(", "d_rate", "=", "0.01", ",", "w_rate", "=", "1e-4", ")", ":", "\n", "    ", "def", "aux_srip", "(", "w", ")", ":", "\n", "        ", "inp_shape", "=", "K", ".", "int_shape", "(", "w", ")", "\n", "row_dims", "=", "inp_shape", "[", "0", "]", "*", "inp_shape", "[", "1", "]", "\n", "col_dims", "=", "inp_shape", "[", "2", "]", "\n", "\n", "# Reshape w into square matrix", "\n", "w", "=", "K", ".", "reshape", "(", "w", ",", "(", "row_dims", ",", "col_dims", ")", ")", "\n", "\n", "# Compute the norm of the weight matrix", "\n", "n", "=", "K", ".", "dot", "(", "K", ".", "transpose", "(", "w", ")", ",", "w", ")", "-", "K", ".", "eye", "(", "col_dims", ",", "dtype", "=", "w", ".", "dtype", ")", "\n", "\n", "# Compute vector of random uniform values", "\n", "v", "=", "K", ".", "random_uniform", "(", "(", "col_dims", ",", "1", ")", ")", "\n", "\n", "v1", "=", "K", ".", "dot", "(", "n", ",", "v", ")", "\n", "norm1", "=", "K", ".", "sum", "(", "K", ".", "square", "(", "v1", ")", ")", "**", "0.5", "\n", "v2", "=", "tf", ".", "divide", "(", "v1", ",", "norm1", ")", "\n", "v3", "=", "K", ".", "dot", "(", "n", ",", "v2", ")", "\n", "\n", "return", "d_rate", "*", "(", "K", ".", "sum", "(", "K", ".", "square", "(", "v3", ")", ")", "**", "0.5", ")", "+", "w_rate", "*", "(", "K", ".", "sum", "(", "K", ".", "square", "(", "w", ")", ")", "**", "0.5", ")", "\n", "\n", "", "return", "aux_srip", "\n", "\n"]], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.modules2D.StemModule": [[53, 76], ["m_name.lower", "m_name.lower", "ConvolutionalOperation", "keras.layers.ReLU", "keras.layers.ReLU", "keras.layers.ReLU", "keras.layers.ReLU", "keras.layers.BatchNormalization", "keras.layers.BatchNormalization", "keras.layers.BatchNormalization", "keras.layers.BatchNormalization", "keras.layers.SpatialDropout2D", "keras.layers.SpatialDropout2D", "keras.layers.SpatialDropout2D", "keras.layers.SpatialDropout2D", "ConvolutionalOperation", "m_name.lower", "ValueError"], "function", ["None"], ["", "def", "StemModule", "(", "m_name", ")", ":", "\n", "    ", "if", "m_name", ".", "lower", "(", ")", "==", "'vanilla'", ":", "ConvolutionalOperation", "=", "keras", ".", "layers", ".", "Conv2D", "\n", "elif", "m_name", ".", "lower", "(", ")", "==", "'residual'", ":", "ConvolutionalOperation", "=", "keras", ".", "layers", ".", "Conv2D", "\n", "elif", "m_name", ".", "lower", "(", ")", "==", "'xception'", ":", "ConvolutionalOperation", "=", "keras", ".", "layers", ".", "SeparableConv2D", "\n", "else", ":", "raise", "ValueError", "(", "'Module name not correctly specified'", ")", "\n", "\n", "def", "Stem", "(", "x", ",", "n_filters", ",", "ker_size", ",", "dropout_rate", ",", "kernel_init", ")", ":", "\n", "        ", "m", "=", "ConvolutionalOperation", "(", "n_filters", ",", "\n", "ker_size", ",", "\n", "padding", "=", "'same'", ",", "\n", "kernel_initializer", "=", "kernel_init", ")", "(", "x", ")", "\n", "\n", "m", "=", "keras", ".", "layers", ".", "ReLU", "(", ")", "(", "m", ")", "\n", "m", "=", "keras", ".", "layers", ".", "BatchNormalization", "(", ")", "(", "m", ")", "\n", "m", "=", "keras", ".", "layers", ".", "SpatialDropout2D", "(", "dropout_rate", ")", "(", "m", ")", "\n", "m", "=", "ConvolutionalOperation", "(", "n_filters", ",", "\n", "ker_size", ",", "\n", "padding", "=", "'same'", ",", "\n", "kernel_initializer", "=", "kernel_init", ")", "(", "m", ")", "\n", "\n", "return", "m", "\n", "\n", "", "return", "Stem", "\n", "\n"]], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.modules2D.LevelModule": [[80, 120], ["m_name.lower", "keras.layers.add", "keras.layers.add", "keras.layers.add", "keras.layers.add", "m_name.lower", "OutputOperation", "m_name.lower", "m_name.lower", "keras.layers.ReLU", "keras.layers.ReLU", "keras.layers.ReLU", "keras.layers.ReLU", "keras.layers.BatchNormalization", "keras.layers.BatchNormalization", "keras.layers.BatchNormalization", "keras.layers.BatchNormalization", "keras.layers.SpatialDropout2D", "keras.layers.SpatialDropout2D", "keras.layers.SpatialDropout2D", "keras.layers.SpatialDropout2D", "ConvolutionalOperation", "keras.layers.ReLU", "keras.layers.ReLU", "keras.layers.ReLU", "keras.layers.ReLU", "keras.layers.BatchNormalization", "keras.layers.BatchNormalization", "keras.layers.BatchNormalization", "keras.layers.BatchNormalization", "keras.layers.SpatialDropout2D", "keras.layers.SpatialDropout2D", "keras.layers.SpatialDropout2D", "keras.layers.SpatialDropout2D", "ConvolutionalOperation", "m_name.lower", "ValueError", "keras.layers.ReLU", "keras.layers.ReLU", "keras.layers.ReLU", "keras.layers.ReLU", "keras.layers.BatchNormalization", "keras.layers.BatchNormalization", "keras.layers.BatchNormalization", "keras.layers.BatchNormalization", "keras.layers.SpatialDropout2D", "keras.layers.SpatialDropout2D", "keras.layers.SpatialDropout2D", "keras.layers.SpatialDropout2D", "ConvolutionalOperation", "m_name.lower", "ValueError"], "function", ["None"], ["", "def", "LevelModule", "(", "m_name", ")", ":", "\n", "    ", "if", "m_name", ".", "lower", "(", ")", "==", "'vanilla'", ":", "ConvolutionalOperation", "=", "keras", ".", "layers", ".", "Conv2D", "\n", "elif", "m_name", ".", "lower", "(", ")", "==", "'residual'", ":", "ConvolutionalOperation", "=", "keras", ".", "layers", ".", "Conv2D", "\n", "elif", "m_name", ".", "lower", "(", ")", "==", "'xception'", ":", "ConvolutionalOperation", "=", "keras", ".", "layers", ".", "SeparableConv2D", "\n", "else", ":", "raise", "ValueError", "(", "'Module name not correctly specified'", ")", "\n", "\n", "def", "res_OutputOperation", "(", "x", ",", "m", ",", "n_filters", ",", "dropout_rate", ")", ":", "\n", "        ", "if", "(", "x", ".", "shape", "[", "-", "1", "]", "!=", "n_filters", ")", ":", "\n", "            ", "x", "=", "keras", ".", "layers", ".", "ReLU", "(", ")", "(", "x", ")", "\n", "x", "=", "keras", ".", "layers", ".", "BatchNormalization", "(", ")", "(", "x", ")", "\n", "x", "=", "keras", ".", "layers", ".", "SpatialDropout2D", "(", "dropout_rate", ")", "(", "x", ")", "\n", "x", "=", "ConvolutionalOperation", "(", "n_filters", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "'same'", ")", "(", "x", ")", "\n", "\n", "", "return", "keras", ".", "layers", ".", "add", "(", "[", "x", ",", "m", "]", ")", "\n", "\n", "", "if", "m_name", ".", "lower", "(", ")", "==", "'vanilla'", ":", "OutputOperation", "=", "lambda", "x", ",", "m", ",", "n_filters", ",", "dropout_rate", ":", "m", "\n", "elif", "m_name", ".", "lower", "(", ")", "==", "'residual'", ":", "OutputOperation", "=", "lambda", "x", ",", "m", ",", "n_filters", ",", "dropout_rate", ":", "m", "# res_OutputOperation(x, m, n_filters, dropout_rate)", "\n", "elif", "m_name", ".", "lower", "(", ")", "==", "'xception'", ":", "OutputOperation", "=", "lambda", "x", ",", "m", ",", "n_filters", ",", "dropout_rate", ":", "m", "# res_OutputOperation(x, m, n_filters, dropout_rate)", "\n", "else", ":", "raise", "ValueError", "(", "'Module name not correctly specified'", ")", "\n", "\n", "def", "LevelBlock", "(", "x", ",", "n_filters", ",", "ker_size", ",", "dropout_rate", ",", "kernel_init", ")", ":", "\n", "        ", "m", "=", "keras", ".", "layers", ".", "ReLU", "(", ")", "(", "x", ")", "\n", "m", "=", "keras", ".", "layers", ".", "BatchNormalization", "(", ")", "(", "m", ")", "\n", "m", "=", "keras", ".", "layers", ".", "SpatialDropout2D", "(", "dropout_rate", ")", "(", "m", ")", "\n", "m", "=", "ConvolutionalOperation", "(", "n_filters", ",", "\n", "ker_size", ",", "\n", "padding", "=", "'same'", ",", "\n", "kernel_initializer", "=", "kernel_init", ")", "(", "m", ")", "\n", "\n", "m", "=", "keras", ".", "layers", ".", "ReLU", "(", ")", "(", "m", ")", "\n", "m", "=", "keras", ".", "layers", ".", "BatchNormalization", "(", ")", "(", "m", ")", "\n", "m", "=", "keras", ".", "layers", ".", "SpatialDropout2D", "(", "dropout_rate", ")", "(", "m", ")", "\n", "m", "=", "ConvolutionalOperation", "(", "n_filters", ",", "\n", "ker_size", ",", "\n", "padding", "=", "'same'", ",", "\n", "kernel_initializer", "=", "kernel_init", ")", "(", "m", ")", "\n", "\n", "return", "OutputOperation", "(", "x", ",", "m", ",", "n_filters", ",", "dropout_rate", ")", "\n", "\n", "", "return", "LevelBlock", "\n", "\n"]], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.modules2D.AtrousMiddleModule": [[122, 168], ["m_name.lower", "m_name.lower", "keras.layers.ReLU", "keras.layers.ReLU", "keras.layers.ReLU", "keras.layers.ReLU", "keras.layers.BatchNormalization", "keras.layers.BatchNormalization", "keras.layers.BatchNormalization", "keras.layers.BatchNormalization", "keras.layers.SpatialDropout2D", "keras.layers.SpatialDropout2D", "keras.layers.SpatialDropout2D", "keras.layers.SpatialDropout2D", "ConvolutionalOperation", "keras.layers.ReLU", "keras.layers.ReLU", "keras.layers.ReLU", "keras.layers.ReLU", "keras.layers.BatchNormalization", "keras.layers.BatchNormalization", "keras.layers.BatchNormalization", "keras.layers.BatchNormalization", "keras.layers.SpatialDropout2D", "keras.layers.SpatialDropout2D", "keras.layers.SpatialDropout2D", "keras.layers.SpatialDropout2D", "ConvolutionalOperation", "ConvolutionalOperation", "ConvolutionalOperation", "ConvolutionalOperation", "keras.layers.RepeatVector", "keras.layers.RepeatVector", "keras.layers.RepeatVector", "keras.layers.RepeatVector", "keras.layers.Concatenate", "keras.layers.Concatenate", "keras.layers.Concatenate", "keras.layers.Concatenate", "m_name.lower", "ValueError", "keras.layers.GlobalAveragePooling2D", "keras.layers.GlobalAveragePooling2D", "keras.layers.GlobalAveragePooling2D", "keras.layers.GlobalAveragePooling2D", "keras.layers.GlobalAveragePooling2D", "keras.layers.GlobalAveragePooling2D", "keras.layers.GlobalAveragePooling2D", "keras.layers.GlobalAveragePooling2D"], "function", ["None"], ["", "def", "AtrousMiddleModule", "(", "m_name", ")", ":", "\n", "    ", "if", "m_name", ".", "lower", "(", ")", "==", "'vanilla'", ":", "ConvolutionalOperation", "=", "keras", ".", "layers", ".", "Conv2D", "\n", "elif", "m_name", ".", "lower", "(", ")", "==", "'residual'", ":", "ConvolutionalOperation", "=", "keras", ".", "layers", ".", "Conv2D", "\n", "elif", "m_name", ".", "lower", "(", ")", "==", "'xception'", ":", "ConvolutionalOperation", "=", "keras", ".", "layers", ".", "SeparableConv2D", "\n", "else", ":", "raise", "ValueError", "(", "'Module name not correctly specified'", ")", "\n", "\n", "def", "AtrousBlock", "(", "x", ",", "n_filters", ",", "ker_size", ",", "dropout_rate", ",", "kernel_init", ")", ":", "\n", "        ", "m", "=", "keras", ".", "layers", ".", "ReLU", "(", ")", "(", "x", ")", "\n", "m", "=", "keras", ".", "layers", ".", "BatchNormalization", "(", ")", "(", "m", ")", "\n", "m", "=", "keras", ".", "layers", ".", "SpatialDropout2D", "(", "dropout_rate", ")", "(", "m", ")", "\n", "m", "=", "ConvolutionalOperation", "(", "n_filters", ",", "\n", "ker_size", ",", "\n", "padding", "=", "'same'", ",", "\n", "kernel_initializer", "=", "kernel_init", ")", "(", "m", ")", "\n", "\n", "m", "=", "keras", ".", "layers", ".", "ReLU", "(", ")", "(", "m", ")", "\n", "m", "=", "keras", ".", "layers", ".", "BatchNormalization", "(", ")", "(", "m", ")", "\n", "m", "=", "keras", ".", "layers", ".", "SpatialDropout2D", "(", "dropout_rate", ")", "(", "m", ")", "\n", "m1", "=", "ConvolutionalOperation", "(", "n_filters", ",", "\n", "ker_size", ",", "\n", "dilation_rate", "=", "(", "1", ",", "1", ")", ",", "\n", "padding", "=", "'same'", ",", "\n", "kernel_initializer", "=", "kernel_init", ")", "(", "m", ")", "\n", "m6", "=", "ConvolutionalOperation", "(", "n_filters", ",", "\n", "ker_size", ",", "\n", "dilation_rate", "=", "(", "6", ",", "1", ")", ",", "\n", "padding", "=", "'same'", ",", "\n", "kernel_initializer", "=", "kernel_init", ")", "(", "m", ")", "\n", "m12", "=", "ConvolutionalOperation", "(", "n_filters", ",", "\n", "ker_size", ",", "\n", "dilation_rate", "=", "(", "12", ",", "1", ")", ",", "\n", "padding", "=", "'same'", ",", "\n", "kernel_initializer", "=", "kernel_init", ")", "(", "m", ")", "\n", "m18", "=", "ConvolutionalOperation", "(", "n_filters", ",", "\n", "ker_size", ",", "\n", "dilation_rate", "=", "(", "18", ",", "1", ")", ",", "\n", "padding", "=", "'same'", ",", "\n", "kernel_initializer", "=", "kernel_init", ")", "(", "m", ")", "\n", "\n", "mgap", "=", "keras", ".", "layers", ".", "GlobalAveragePooling2D", "(", ")", "(", "m1", ")", "if", "(", "m", ".", "shape", "[", "1", "]", "!=", "n_filters", ")", "else", "keras", ".", "layers", ".", "GlobalAveragePooling2D", "(", ")", "(", "m", ")", "\n", "mgap", "=", "keras", ".", "layers", ".", "RepeatVector", "(", "m", ".", "shape", "[", "1", ":", "3", "]", ")", "(", "mgap", ")", "\n", "m", "=", "keras", ".", "layers", ".", "Concatenate", "(", ")", "(", "[", "m1", ",", "m6", ",", "m12", ",", "m18", ",", "mgap", "]", ")", "\n", "\n", "return", "m", "\n", "\n", "", "return", "AtrousBlock", "\n", "\n"]], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.modules2D.MergeModule": [[171, 189], ["m_name.lower", "m_name.lower", "keras.layers.ReLU", "keras.layers.ReLU", "keras.layers.ReLU", "keras.layers.ReLU", "keras.layers.BatchNormalization", "keras.layers.BatchNormalization", "keras.layers.BatchNormalization", "keras.layers.BatchNormalization", "keras.layers.SpatialDropout2D", "keras.layers.SpatialDropout2D", "keras.layers.SpatialDropout2D", "keras.layers.SpatialDropout2D", "ConvolutionalOperation", "m_name.lower", "ValueError"], "function", ["None"], ["", "def", "MergeModule", "(", "m_name", ")", ":", "\n", "    ", "if", "m_name", ".", "lower", "(", ")", "==", "'vanilla'", ":", "ConvolutionalOperation", "=", "keras", ".", "layers", ".", "Conv2D", "\n", "elif", "m_name", ".", "lower", "(", ")", "==", "'residual'", ":", "ConvolutionalOperation", "=", "keras", ".", "layers", ".", "Conv2D", "\n", "elif", "m_name", ".", "lower", "(", ")", "==", "'xception'", ":", "ConvolutionalOperation", "=", "keras", ".", "layers", ".", "SeparableConv2D", "\n", "else", ":", "raise", "ValueError", "(", "'Module name not correctly specified'", ")", "\n", "\n", "def", "MergeBlock", "(", "x", ",", "n_filters", ",", "ker_size", ",", "dropout_rate", ",", "kernel_init", ")", ":", "\n", "        ", "m", "=", "keras", ".", "layers", ".", "ReLU", "(", ")", "(", "x", ")", "\n", "m", "=", "keras", ".", "layers", ".", "BatchNormalization", "(", ")", "(", "m", ")", "\n", "m", "=", "keras", ".", "layers", ".", "SpatialDropout2D", "(", "dropout_rate", ")", "(", "m", ")", "\n", "m", "=", "ConvolutionalOperation", "(", "n_filters", ",", "\n", "(", "1", ",", "2", ")", ",", "\n", "padding", "=", "'valid'", ",", "\n", "kernel_initializer", "=", "kernel_init", ")", "(", "m", ")", "\n", "\n", "return", "m", "\n", "\n", "", "return", "MergeBlock", "\n", "\n"]], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.modules2D.PoolingModule": [[193, 238], ["m_name.lower", "keras.layers.add", "keras.layers.add", "keras.layers.add", "keras.layers.add", "m_name.lower", "OutputOperation", "m_name.lower", "keras.layers.ReLU", "keras.layers.ReLU", "keras.layers.ReLU", "keras.layers.ReLU", "keras.layers.BatchNormalization", "keras.layers.BatchNormalization", "keras.layers.BatchNormalization", "keras.layers.BatchNormalization", "keras.layers.SpatialDropout2D", "keras.layers.SpatialDropout2D", "keras.layers.SpatialDropout2D", "keras.layers.SpatialDropout2D", "ConvolutionalOperation", "m_name.lower", "keras.layers.ReLU", "keras.layers.ReLU", "keras.layers.ReLU", "keras.layers.ReLU", "keras.layers.BatchNormalization", "keras.layers.BatchNormalization", "keras.layers.BatchNormalization", "keras.layers.BatchNormalization", "keras.layers.SpatialDropout2D", "keras.layers.SpatialDropout2D", "keras.layers.SpatialDropout2D", "keras.layers.SpatialDropout2D", "ConvolutionalOperation", "keras.layers.ReLU", "keras.layers.ReLU", "keras.layers.ReLU", "keras.layers.ReLU", "keras.layers.BatchNormalization", "keras.layers.BatchNormalization", "keras.layers.BatchNormalization", "keras.layers.BatchNormalization", "keras.layers.SpatialDropout2D", "keras.layers.SpatialDropout2D", "keras.layers.SpatialDropout2D", "keras.layers.SpatialDropout2D", "ConvolutionalOperation", "keras.layers.MaxPooling2D", "keras.layers.MaxPooling2D", "keras.layers.MaxPooling2D", "keras.layers.MaxPooling2D", "m_name.lower", "ValueError", "m_name.lower", "ValueError"], "function", ["None"], ["", "def", "PoolingModule", "(", "m_name", ")", ":", "\n", "    ", "if", "m_name", ".", "lower", "(", ")", "==", "'vanilla'", ":", "ConvolutionalOperation", "=", "keras", ".", "layers", ".", "Conv2D", "\n", "elif", "m_name", ".", "lower", "(", ")", "==", "'residual'", ":", "ConvolutionalOperation", "=", "keras", ".", "layers", ".", "Conv2D", "\n", "elif", "m_name", ".", "lower", "(", ")", "==", "'xception'", ":", "ConvolutionalOperation", "=", "keras", ".", "layers", ".", "SeparableConv2D", "\n", "else", ":", "raise", "ValueError", "(", "'Module name not correctly specified'", ")", "\n", "\n", "def", "res_OutputOperation", "(", "x", ",", "m", ",", "n_filters", ",", "dropout_rate", ")", ":", "\n", "        ", "x", "=", "keras", ".", "layers", ".", "ReLU", "(", ")", "(", "x", ")", "\n", "x", "=", "keras", ".", "layers", ".", "BatchNormalization", "(", ")", "(", "x", ")", "\n", "x", "=", "keras", ".", "layers", ".", "SpatialDropout2D", "(", "dropout_rate", ")", "(", "x", ")", "\n", "x", "=", "ConvolutionalOperation", "(", "n_filters", ",", "\n", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "\n", "strides", "=", "(", "2", ",", "1", ")", ",", "\n", "padding", "=", "'same'", ")", "(", "x", ")", "\n", "\n", "return", "keras", ".", "layers", ".", "add", "(", "[", "x", ",", "m", "]", ")", "\n", "\n", "", "if", "m_name", ".", "lower", "(", ")", "==", "'vanilla'", ":", "OutputOperation", "=", "lambda", "x", ",", "m", ",", "n_filters", ",", "dropout_rate", ":", "m", "\n", "elif", "m_name", ".", "lower", "(", ")", "==", "'residual'", ":", "OutputOperation", "=", "lambda", "x", ",", "m", ",", "n_filters", ",", "dropout_rate", ":", "m", "# res_OutputOperation(x, m, n_filters, dropout_rate)", "\n", "elif", "m_name", ".", "lower", "(", ")", "==", "'xception'", ":", "OutputOperation", "=", "lambda", "x", ",", "m", ",", "n_filters", ",", "dropout_rate", ":", "m", "# res_OutputOperation(x, m, n_filters, dropout_rate)", "\n", "else", ":", "raise", "ValueError", "(", "'Module name not correctly specified'", ")", "\n", "\n", "\n", "def", "PoolingBlock", "(", "x", ",", "n_filters", ",", "ker_size", ",", "dropout_rate", ",", "kernel_init", ",", "strides", "=", "(", "2", ",", "1", ")", ")", ":", "\n", "        ", "m", "=", "keras", ".", "layers", ".", "ReLU", "(", ")", "(", "x", ")", "\n", "m", "=", "keras", ".", "layers", ".", "BatchNormalization", "(", ")", "(", "m", ")", "\n", "m", "=", "keras", ".", "layers", ".", "SpatialDropout2D", "(", "dropout_rate", ")", "(", "m", ")", "\n", "m", "=", "ConvolutionalOperation", "(", "n_filters", ",", "\n", "ker_size", ",", "\n", "padding", "=", "'same'", ",", "\n", "kernel_initializer", "=", "kernel_init", ")", "(", "m", ")", "\n", "\n", "m", "=", "keras", ".", "layers", ".", "ReLU", "(", ")", "(", "m", ")", "\n", "m", "=", "keras", ".", "layers", ".", "BatchNormalization", "(", ")", "(", "m", ")", "\n", "m", "=", "keras", ".", "layers", ".", "SpatialDropout2D", "(", "dropout_rate", ")", "(", "m", ")", "\n", "m", "=", "ConvolutionalOperation", "(", "n_filters", ",", "\n", "ker_size", ",", "\n", "padding", "=", "'same'", ",", "\n", "kernel_initializer", "=", "kernel_init", ")", "(", "m", ")", "\n", "\n", "m", "=", "keras", ".", "layers", ".", "MaxPooling2D", "(", "pool_size", "=", "ker_size", ",", "padding", "=", "'same'", ",", "strides", "=", "strides", ")", "(", "m", ")", "\n", "\n", "return", "OutputOperation", "(", "x", ",", "m", ",", "n_filters", ",", "dropout_rate", ")", "\n", "\n", "", "return", "PoolingBlock", "\n", "\n"]], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.modules2D.OutputModule": [[241, 267], ["m_name.lower", "m_name.lower", "keras.layers.ReLU", "keras.layers.ReLU", "keras.layers.ReLU", "keras.layers.ReLU", "keras.layers.BatchNormalization", "keras.layers.BatchNormalization", "keras.layers.BatchNormalization", "keras.layers.BatchNormalization", "keras.layers.SpatialDropout2D", "keras.layers.SpatialDropout2D", "keras.layers.SpatialDropout2D", "keras.layers.SpatialDropout2D", "ConvolutionalOperation", "keras.layers.add", "keras.layers.add", "keras.layers.add", "keras.layers.add", "m_name.lower", "ValueError", "keras.layers.add", "keras.layers.add", "keras.layers.add", "keras.layers.add"], "function", ["None"], ["", "def", "OutputModule", "(", "m_name", ")", ":", "\n", "    ", "if", "m_name", ".", "lower", "(", ")", "==", "'vanilla'", ":", "\n", "        ", "ConvolutionalOperation", "=", "keras", ".", "layers", ".", "Conv2D", "\n", "OutputOperation", "=", "lambda", "x", ",", "m", ":", "m", "\n", "", "elif", "m_name", ".", "lower", "(", ")", "==", "'residual'", ":", "\n", "        ", "ConvolutionalOperation", "=", "keras", ".", "layers", ".", "Conv2D", "\n", "OutputOperation", "=", "lambda", "x", ",", "m", ":", "keras", ".", "layers", ".", "add", "(", "[", "x", ",", "m", "]", ")", "\n", "", "elif", "m_name", ".", "lower", "(", ")", "==", "'xception'", ":", "\n", "        ", "ConvolutionalOperation", "=", "keras", ".", "layers", ".", "SeparableConv2D", "\n", "OutputOperation", "=", "lambda", "x", ",", "m", ":", "keras", ".", "layers", ".", "add", "(", "[", "x", ",", "m", "]", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Module name not correctly specified'", ")", "\n", "\n", "", "def", "OutputBlock", "(", "x", ",", "n_filters", ",", "ker_size", ",", "dropout_rate", ",", "kernel_init", ")", ":", "\n", "        ", "m", "=", "keras", ".", "layers", ".", "ReLU", "(", ")", "(", "x", ")", "\n", "m", "=", "keras", ".", "layers", ".", "BatchNormalization", "(", ")", "(", "m", ")", "\n", "m", "=", "keras", ".", "layers", ".", "SpatialDropout2D", "(", "dropout_rate", ")", "(", "m", ")", "\n", "m", "=", "ConvolutionalOperation", "(", "n_filters", ",", "\n", "ker_size", ",", "\n", "padding", "=", "'valid'", ",", "\n", "activation", "=", "'sigmoid'", ",", "\n", "kernel_initializer", "=", "kernel_init", ")", "(", "m", ")", "\n", "\n", "return", "m", "\n", "\n", "", "return", "OutputBlock", "\n", "\n"]], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.evaluation.get_correspondence_between_gt_and_predicted": [[65, 94], ["numpy.any", "numpy.any", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray"], "function", ["None"], ["", "", "", "def", "get_correspondence_between_gt_and_predicted", "(", "fiducials_data", ",", "fiducials_results", ",", "k", ",", "validity", ")", ":", "\n", "    ", "mask_on", "=", "(", "fiducials_data", ".", "onset", "[", "k", "]", ">=", "np", ".", "asarray", "(", "validity", "[", "k", "]", "[", "0", "]", ")", "[", ":", ",", "np", ".", "newaxis", "]", ")", "&", "(", "fiducials_data", ".", "onset", "[", "k", "]", "<=", "np", ".", "asarray", "(", "validity", "[", "k", "]", "[", "1", "]", ")", "[", ":", ",", "np", ".", "newaxis", "]", ")", "\n", "mask_peak", "=", "(", "fiducials_data", ".", "peak", "[", "k", "]", ">=", "np", ".", "asarray", "(", "validity", "[", "k", "]", "[", "0", "]", ")", "[", ":", ",", "np", ".", "newaxis", "]", ")", "&", "(", "fiducials_data", ".", "peak", "[", "k", "]", "<=", "np", ".", "asarray", "(", "validity", "[", "k", "]", "[", "1", "]", ")", "[", ":", ",", "np", ".", "newaxis", "]", ")", "\n", "mask_off", "=", "(", "fiducials_data", ".", "offset", "[", "k", "]", ">=", "np", ".", "asarray", "(", "validity", "[", "k", "]", "[", "0", "]", ")", "[", ":", ",", "np", ".", "newaxis", "]", ")", "&", "(", "fiducials_data", ".", "offset", "[", "k", "]", "<=", "np", ".", "asarray", "(", "validity", "[", "k", "]", "[", "1", "]", ")", "[", ":", ",", "np", ".", "newaxis", "]", ")", "\n", "mask_total", "=", "np", ".", "any", "(", "mask_on", "&", "mask_peak", "&", "mask_off", ",", "axis", "=", "0", ")", "# beat has to be found in every one", "\n", "\n", "d_on", "=", "fiducials_data", ".", "onset", "[", "k", "]", "[", "mask_total", "]", "\n", "d_pk", "=", "fiducials_data", ".", "peak", "[", "k", "]", "[", "mask_total", "]", "\n", "d_of", "=", "fiducials_data", ".", "offset", "[", "k", "]", "[", "mask_total", "]", "\n", "\n", "mask_on", "=", "(", "fiducials_results", ".", "onset", "[", "k", "]", ">=", "np", ".", "asarray", "(", "validity", "[", "k", "]", "[", "0", "]", ")", "[", ":", ",", "np", ".", "newaxis", "]", ")", "&", "(", "fiducials_results", ".", "onset", "[", "k", "]", "<=", "np", ".", "asarray", "(", "validity", "[", "k", "]", "[", "1", "]", ")", "[", ":", ",", "np", ".", "newaxis", "]", ")", "\n", "mask_peak", "=", "(", "fiducials_results", ".", "peak", "[", "k", "]", ">=", "np", ".", "asarray", "(", "validity", "[", "k", "]", "[", "0", "]", ")", "[", ":", ",", "np", ".", "newaxis", "]", ")", "&", "(", "fiducials_results", ".", "peak", "[", "k", "]", "<=", "np", ".", "asarray", "(", "validity", "[", "k", "]", "[", "1", "]", ")", "[", ":", ",", "np", ".", "newaxis", "]", ")", "\n", "mask_off", "=", "(", "fiducials_results", ".", "offset", "[", "k", "]", ">=", "np", ".", "asarray", "(", "validity", "[", "k", "]", "[", "0", "]", ")", "[", ":", ",", "np", ".", "newaxis", "]", ")", "&", "(", "fiducials_results", ".", "offset", "[", "k", "]", "<=", "np", ".", "asarray", "(", "validity", "[", "k", "]", "[", "1", "]", ")", "[", ":", ",", "np", ".", "newaxis", "]", ")", "\n", "mask_total", "=", "np", ".", "any", "(", "mask_on", "&", "mask_peak", "&", "mask_off", ",", "axis", "=", "0", ")", "# beat has to be found in every one", "\n", "\n", "r_on", "=", "fiducials_results", ".", "onset", "[", "k", "]", "[", "mask_total", "]", "\n", "r_pk", "=", "fiducials_results", ".", "peak", "[", "k", "]", "[", "mask_total", "]", "\n", "r_of", "=", "fiducials_results", ".", "offset", "[", "k", "]", "[", "mask_total", "]", "\n", "\n", "filtA", "=", "(", "d_on", "<=", "r_on", "[", ":", ",", "np", ".", "newaxis", "]", ")", "&", "(", "r_on", "[", ":", ",", "np", ".", "newaxis", "]", "<=", "d_of", ")", "\n", "filtB", "=", "(", "d_on", "<=", "r_pk", "[", ":", ",", "np", ".", "newaxis", "]", ")", "&", "(", "r_pk", "[", ":", ",", "np", ".", "newaxis", "]", "<=", "d_of", ")", "\n", "filtC", "=", "(", "d_on", "<=", "r_of", "[", ":", ",", "np", ".", "newaxis", "]", ")", "&", "(", "r_of", "[", ":", ",", "np", ".", "newaxis", "]", "<=", "d_of", ")", "\n", "filtD", "=", "(", "(", "r_on", "<=", "d_on", "[", ":", ",", "np", ".", "newaxis", "]", ")", "&", "(", "d_on", "[", ":", ",", "np", ".", "newaxis", "]", "<=", "r_of", ")", ")", ".", "T", "\n", "filtE", "=", "(", "(", "r_on", "<=", "d_pk", "[", ":", ",", "np", ".", "newaxis", "]", ")", "&", "(", "d_pk", "[", ":", ",", "np", ".", "newaxis", "]", "<=", "r_of", ")", ")", ".", "T", "\n", "filtF", "=", "(", "(", "r_on", "<=", "d_of", "[", ":", ",", "np", ".", "newaxis", "]", ")", "&", "(", "d_of", "[", ":", ",", "np", ".", "newaxis", "]", "<=", "r_of", ")", ")", ".", "T", "\n", "\n", "filt_all", "=", "filtA", "|", "filtB", "|", "filtC", "|", "filtD", "|", "filtE", "|", "filtF", "\n", "\n", "return", "filt_all", ",", "r_on", ",", "r_of", ",", "d_on", ",", "d_of", "\n", "\n"]], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.evaluation.get_correspondence_between_predicted_leads": [[96, 125], ["numpy.any", "numpy.any", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray"], "function", ["None"], ["", "def", "get_correspondence_between_predicted_leads", "(", "fiducials_results", ",", "k", ",", "validity", ")", ":", "\n", "    ", "mask_on", "=", "(", "fiducials_results", ".", "onset", "[", "k", "+", "'_0'", "]", ">=", "np", ".", "asarray", "(", "validity", "[", "k", "+", "'_0'", "]", "[", "0", "]", ")", "[", ":", ",", "np", ".", "newaxis", "]", ")", "&", "(", "fiducials_results", ".", "onset", "[", "k", "+", "'_0'", "]", "<=", "np", ".", "asarray", "(", "validity", "[", "k", "+", "'_0'", "]", "[", "1", "]", ")", "[", ":", ",", "np", ".", "newaxis", "]", ")", "\n", "mask_peak", "=", "(", "fiducials_results", ".", "peak", "[", "k", "+", "'_0'", "]", ">=", "np", ".", "asarray", "(", "validity", "[", "k", "+", "'_0'", "]", "[", "0", "]", ")", "[", ":", ",", "np", ".", "newaxis", "]", ")", "&", "(", "fiducials_results", ".", "peak", "[", "k", "+", "'_0'", "]", "<=", "np", ".", "asarray", "(", "validity", "[", "k", "+", "'_0'", "]", "[", "1", "]", ")", "[", ":", ",", "np", ".", "newaxis", "]", ")", "\n", "mask_off", "=", "(", "fiducials_results", ".", "offset", "[", "k", "+", "'_0'", "]", ">=", "np", ".", "asarray", "(", "validity", "[", "k", "+", "'_0'", "]", "[", "0", "]", ")", "[", ":", ",", "np", ".", "newaxis", "]", ")", "&", "(", "fiducials_results", ".", "offset", "[", "k", "+", "'_0'", "]", "<=", "np", ".", "asarray", "(", "validity", "[", "k", "+", "'_0'", "]", "[", "1", "]", ")", "[", ":", ",", "np", ".", "newaxis", "]", ")", "\n", "mask_total", "=", "np", ".", "any", "(", "mask_on", "&", "mask_peak", "&", "mask_off", ",", "axis", "=", "0", ")", "# beat has to be found in every one", "\n", "\n", "res_0_on", "=", "fiducials_results", ".", "onset", "[", "k", "+", "'_0'", "]", "[", "mask_total", "]", "\n", "res_0_pk", "=", "fiducials_results", ".", "peak", "[", "k", "+", "'_0'", "]", "[", "mask_total", "]", "\n", "res_0_of", "=", "fiducials_results", ".", "offset", "[", "k", "+", "'_0'", "]", "[", "mask_total", "]", "\n", "\n", "mask_on", "=", "(", "fiducials_results", ".", "onset", "[", "k", "+", "'_1'", "]", ">=", "np", ".", "asarray", "(", "validity", "[", "k", "+", "'_1'", "]", "[", "0", "]", ")", "[", ":", ",", "np", ".", "newaxis", "]", ")", "&", "(", "fiducials_results", ".", "onset", "[", "k", "+", "'_1'", "]", "<=", "np", ".", "asarray", "(", "validity", "[", "k", "+", "'_1'", "]", "[", "1", "]", ")", "[", ":", ",", "np", ".", "newaxis", "]", ")", "\n", "mask_peak", "=", "(", "fiducials_results", ".", "peak", "[", "k", "+", "'_1'", "]", ">=", "np", ".", "asarray", "(", "validity", "[", "k", "+", "'_1'", "]", "[", "0", "]", ")", "[", ":", ",", "np", ".", "newaxis", "]", ")", "&", "(", "fiducials_results", ".", "peak", "[", "k", "+", "'_1'", "]", "<=", "np", ".", "asarray", "(", "validity", "[", "k", "+", "'_1'", "]", "[", "1", "]", ")", "[", ":", ",", "np", ".", "newaxis", "]", ")", "\n", "mask_off", "=", "(", "fiducials_results", ".", "offset", "[", "k", "+", "'_1'", "]", ">=", "np", ".", "asarray", "(", "validity", "[", "k", "+", "'_1'", "]", "[", "0", "]", ")", "[", ":", ",", "np", ".", "newaxis", "]", ")", "&", "(", "fiducials_results", ".", "offset", "[", "k", "+", "'_1'", "]", "<=", "np", ".", "asarray", "(", "validity", "[", "k", "+", "'_1'", "]", "[", "1", "]", ")", "[", ":", ",", "np", ".", "newaxis", "]", ")", "\n", "mask_total", "=", "np", ".", "any", "(", "mask_on", "&", "mask_peak", "&", "mask_off", ",", "axis", "=", "0", ")", "# beat has to be found in every one", "\n", "\n", "res_1_on", "=", "fiducials_results", ".", "onset", "[", "k", "+", "'_1'", "]", "[", "mask_total", "]", "\n", "res_1_pk", "=", "fiducials_results", ".", "peak", "[", "k", "+", "'_1'", "]", "[", "mask_total", "]", "\n", "res_1_of", "=", "fiducials_results", ".", "offset", "[", "k", "+", "'_1'", "]", "[", "mask_total", "]", "\n", "\n", "filtA", "=", "(", "res_0_on", "<=", "res_1_on", "[", ":", ",", "np", ".", "newaxis", "]", ")", "&", "(", "res_1_on", "[", ":", ",", "np", ".", "newaxis", "]", "<=", "res_0_of", ")", "\n", "filtB", "=", "(", "res_0_on", "<=", "res_1_pk", "[", ":", ",", "np", ".", "newaxis", "]", ")", "&", "(", "res_1_pk", "[", ":", ",", "np", ".", "newaxis", "]", "<=", "res_0_of", ")", "\n", "filtC", "=", "(", "res_0_on", "<=", "res_1_of", "[", ":", ",", "np", ".", "newaxis", "]", ")", "&", "(", "res_1_of", "[", ":", ",", "np", ".", "newaxis", "]", "<=", "res_0_of", ")", "\n", "filtD", "=", "(", "(", "res_1_on", "<=", "res_0_on", "[", ":", ",", "np", ".", "newaxis", "]", ")", "&", "(", "res_0_on", "[", ":", ",", "np", ".", "newaxis", "]", "<=", "res_1_of", ")", ")", ".", "T", "\n", "filtE", "=", "(", "(", "res_1_on", "<=", "res_0_pk", "[", ":", ",", "np", ".", "newaxis", "]", ")", "&", "(", "res_0_pk", "[", ":", ",", "np", ".", "newaxis", "]", "<=", "res_1_of", ")", ")", ".", "T", "\n", "filtF", "=", "(", "(", "res_1_on", "<=", "res_0_of", "[", ":", ",", "np", ".", "newaxis", "]", ")", "&", "(", "res_0_of", "[", ":", ",", "np", ".", "newaxis", "]", "<=", "res_1_of", ")", ")", ".", "T", "\n", "\n", "filt_all", "=", "filtA", "|", "filtB", "|", "filtC", "|", "filtD", "|", "filtE", "|", "filtF", "\n", "\n", "return", "filt_all", "\n", "\n"]], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.losses.DiceLoss": [[6, 14], ["keras.batch_flatten", "keras.batch_flatten", "keras.sum", "keras.mean", "numpy.finfo", "keras.sum", "keras.sum"], "function", ["None"], ["def", "DiceLoss", "(", "y_true", ",", "y_pred", ")", ":", "\n", "    ", "smooth", "=", "np", ".", "finfo", "(", "y_true", ".", "dtype", ".", "as_numpy_dtype", ")", ".", "eps", "\n", "y_true_f", "=", "K", ".", "batch_flatten", "(", "y_true", ")", "\n", "y_pred_f", "=", "K", ".", "batch_flatten", "(", "y_pred", ")", "\n", "intersection", "=", "K", ".", "sum", "(", "y_true_f", "*", "y_pred_f", ",", "axis", "=", "-", "1", ",", "keepdims", "=", "True", ")", "\n", "union", "=", "K", ".", "sum", "(", "y_true_f", ",", "axis", "=", "-", "1", ",", "keepdims", "=", "True", ")", "+", "K", ".", "sum", "(", "y_pred_f", ",", "axis", "=", "-", "1", ",", "keepdims", "=", "True", ")", "\n", "dice", "=", "K", ".", "mean", "(", "(", "2.", "*", "intersection", "+", "1.", "+", "smooth", ")", "/", "(", "union", "+", "1.", "+", "smooth", ")", ")", "\n", "return", "1", "-", "dice", "\n", "\n"]], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.losses.JaccardLoss": [[16, 24], ["keras.batch_flatten", "keras.batch_flatten", "keras.sum", "keras.mean", "numpy.finfo", "keras.sum", "keras.sum"], "function", ["None"], ["", "def", "JaccardLoss", "(", "y_true", ",", "y_pred", ")", ":", "\n", "    ", "smooth", "=", "np", ".", "finfo", "(", "y_true", ".", "dtype", ".", "as_numpy_dtype", ")", ".", "eps", "\n", "y_true_f", "=", "K", ".", "batch_flatten", "(", "y_true", ")", "\n", "y_pred_f", "=", "K", ".", "batch_flatten", "(", "y_pred", ")", "\n", "intersection", "=", "K", ".", "sum", "(", "y_true_f", "*", "y_pred_f", ",", "axis", "=", "-", "1", ",", "keepdims", "=", "True", ")", "\n", "union", "=", "K", ".", "sum", "(", "y_true_f", ",", "axis", "=", "-", "1", ",", "keepdims", "=", "True", ")", "+", "K", ".", "sum", "(", "y_pred_f", ",", "axis", "=", "-", "1", ",", "keepdims", "=", "True", ")", "\n", "jacc", "=", "K", ".", "mean", "(", "(", "intersection", "+", "smooth", ")", "/", "(", "union", "-", "intersection", "+", "smooth", ")", ")", "\n", "return", "1", "-", "jacc", "\n", "", ""]], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.data_structures.WaveInformation.__init__": [[168, 173], ["pandas.DataFrame", "dict", "dict", "dict"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "wave", "=", "pandas", ".", "DataFrame", "(", ")", "\n", "self", ".", "onset", "=", "dict", "(", ")", "\n", "self", ".", "peak", "=", "dict", "(", ")", "\n", "self", ".", "offset", "=", "dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.data_structures.WaveInformation.__str__": [[174, 180], ["data_structures.WaveInformation.__dict__.keys", "str", "str"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "s", "=", "''", "\n", "for", "k", "in", "self", ".", "__dict__", ".", "keys", "(", ")", ":", "\n", "            ", "s", "+=", "'    \u251c> '", "+", "str", "(", "k", ")", "+", "':\\t'", "+", "str", "(", "self", ".", "__dict__", "[", "k", "]", ")", "+", "'\\n'", "\n", "\n", "", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.data_structures.WaveInformation.__repr__": [[181, 183], ["data_structures.WaveInformation.__str__"], "methods", ["home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.data_structures.DataGenerator.__str__"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__str__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.data_structures.ExecutionInformation.__init__": [[185, 226], ["config.backend.lower", "config.data_set.lower", "config.splitting.lower", "os.path.join", "utils.logger.conditional_makedir", "utils.logger.conditional_makedir", "utils.logger.conditional_makedir", "utils.logger.conditional_makedir", "numpy.random.permutation", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "math.ceil", "math.ceil", "str", "str", "str", "len", "len"], "methods", ["home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.logger.conditional_makedir", "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.logger.conditional_makedir", "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.logger.conditional_makedir", "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.logger.conditional_makedir"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "fold", ",", "train_keys", ",", "test_keys", ",", "evaluate", ")", ":", "\n", "        ", "\"\"\"Use fold = None for whole dataset test \"\"\"", "\n", "\n", "# Specify fold", "\n", "self", ".", "fold", "=", "fold", "\n", "self", ".", "evaluate", "=", "evaluate", "\n", "self", ".", "output_dir", "=", "config", ".", "output_dir", "\n", "self", ".", "backend", "=", "config", ".", "backend", ".", "lower", "(", ")", "\n", "self", ".", "data_set", "=", "config", ".", "data_set", ".", "lower", "(", ")", "\n", "self", ".", "splitting", "=", "config", ".", "splitting", ".", "lower", "(", ")", "\n", "\n", "\n", "# Define train/test sets", "\n", "if", "self", ".", "evaluate", "==", "True", ":", "# If only evaluating, no need for validation set", "\n", "            ", "valid_keys", "=", "[", "]", "\n", "", "else", ":", "\n", "            ", "train_keys", "=", "np", ".", "random", ".", "permutation", "(", "train_keys", ")", "\n", "valid_keys", "=", "train_keys", "[", ":", "math", ".", "ceil", "(", "config", ".", "val_split", "*", "len", "(", "train_keys", ")", ")", "]", "\n", "train_keys", "=", "train_keys", "[", "math", ".", "ceil", "(", "config", ".", "val_split", "*", "len", "(", "train_keys", ")", ")", ":", "]", "\n", "\n", "# Set paths", "\n", "", "self", ".", "summary", "=", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "'Summary.txt'", ")", "\n", "\n", "if", "(", "self", ".", "splitting", "==", "\"cross_validation\"", ")", "and", "self", ".", "fold", "!=", "None", ":", "\n", "            ", "self", ".", "logger", "=", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "self", ".", "backend", ",", "self", ".", "splitting", ",", "'Training'", ",", "'Fold_'", "+", "str", "(", "self", ".", "fold", "+", "1", ")", ",", "'Model.log'", ")", "\n", "self", ".", "state", "=", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "self", ".", "backend", ",", "self", ".", "splitting", ",", "'Training'", ",", "'Fold_'", "+", "str", "(", "self", ".", "fold", "+", "1", ")", ",", "'Model.hdf5'", ")", "\n", "self", ".", "results", "=", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "self", ".", "backend", ",", "self", ".", "splitting", ",", "'Results'", ",", "self", ".", "data_set", ",", "'Fold_'", "+", "str", "(", "self", ".", "fold", "+", "1", ")", ",", "'Results_ALL.csv'", ")", "\n", "\n", "", "else", ":", "# Case \"all\"", "\n", "            ", "self", ".", "logger", "=", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "self", ".", "backend", ",", "self", ".", "splitting", ",", "'Training'", ",", "'Total.log'", ")", "\n", "self", ".", "state", "=", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "self", ".", "backend", ",", "self", ".", "splitting", ",", "'Training'", ",", "'Total.hdf5'", ")", "\n", "self", ".", "results", "=", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "self", ".", "backend", ",", "self", ".", "splitting", ",", "'Results'", ",", "self", ".", "data_set", ",", "'Total_ALL.csv'", ")", "\n", "\n", "", "conditional_makedir", "(", "self", ".", "summary", ")", "\n", "conditional_makedir", "(", "self", ".", "logger", ")", "\n", "conditional_makedir", "(", "self", ".", "state", ")", "\n", "conditional_makedir", "(", "self", ".", "results", ")", "\n", "\n", "self", ".", "train", "=", "train_keys", "\n", "self", ".", "valid", "=", "valid_keys", "\n", "self", ".", "test", "=", "test_keys", "\n", "\n"]], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.data_structures.ExecutionInformation.__str__": [[227, 233], ["data_structures.ExecutionInformation.__dict__.keys", "str", "str"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "s", "=", "''", "\n", "for", "k", "in", "self", ".", "__dict__", ".", "keys", "(", ")", ":", "\n", "            ", "s", "+=", "'    \u251c> '", "+", "str", "(", "k", ")", "+", "':\\t'", "+", "str", "(", "self", ".", "__dict__", "[", "k", "]", ")", "+", "'\\n'", "\n", "\n", "", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.data_structures.ExecutionInformation.__repr__": [[234, 236], ["data_structures.ExecutionInformation.__str__"], "methods", ["home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.data_structures.DataGenerator.__str__"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__str__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.data_structures.DataStorage.__init__": [[239, 246], ["data_structures.WaveInformation", "data_structures.WaveInformation", "data_structures.WaveInformation"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "validity", "=", "None", ")", ":", "\n", "        ", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "validity", "=", "validity", "\n", "self", ".", "P", "=", "WaveInformation", "(", ")", "\n", "self", ".", "QRS", "=", "WaveInformation", "(", ")", "\n", "self", ".", "T", "=", "WaveInformation", "(", ")", "\n", "self", ".", "keys", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.data_structures.DataStorage.__str__": [[247, 253], ["data_structures.DataStorage.__dict__.keys", "str", "str"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "s", "=", "''", "\n", "for", "k", "in", "self", ".", "__dict__", ".", "keys", "(", ")", ":", "\n", "            ", "s", "+=", "'    \u251c> '", "+", "str", "(", "k", ")", "+", "':\\t'", "+", "str", "(", "self", ".", "__dict__", "[", "k", "]", ")", "+", "'\\n'", "\n", "\n", "", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.data_structures.DataStorage.__repr__": [[254, 256], ["data_structures.DataStorage.__str__"], "methods", ["home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.data_structures.DataGenerator.__str__"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__str__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.data_structures.DataStorage.init_P": [[257, 263], ["list", "set", "wave.keys().tolist", "wave.keys"], "methods", ["None"], ["", "def", "init_P", "(", "self", ",", "wave", ",", "onset", ",", "peak", ",", "offset", ")", ":", "\n", "        ", "self", ".", "P", ".", "wave", "=", "wave", "\n", "self", ".", "P", ".", "onset", "=", "onset", "\n", "self", ".", "P", ".", "peak", "=", "peak", "\n", "self", ".", "P", ".", "offset", "=", "offset", "\n", "self", ".", "keys", "=", "list", "(", "set", "(", "self", ".", "keys", "+", "wave", ".", "keys", "(", ")", ".", "tolist", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.data_structures.DataStorage.init_QRS": [[264, 270], ["list", "set", "wave.keys().tolist", "wave.keys"], "methods", ["None"], ["", "def", "init_QRS", "(", "self", ",", "wave", ",", "onset", ",", "peak", ",", "offset", ")", ":", "\n", "        ", "self", ".", "QRS", ".", "wave", "=", "wave", "\n", "self", ".", "QRS", ".", "onset", "=", "onset", "\n", "self", ".", "QRS", ".", "peak", "=", "peak", "\n", "self", ".", "QRS", ".", "offset", "=", "offset", "\n", "self", ".", "keys", "=", "list", "(", "set", "(", "self", ".", "keys", "+", "wave", ".", "keys", "(", ")", ".", "tolist", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.data_structures.DataStorage.init_T": [[271, 277], ["list", "set", "wave.keys().tolist", "wave.keys"], "methods", ["None"], ["", "def", "init_T", "(", "self", ",", "wave", ",", "onset", ",", "peak", ",", "offset", ")", ":", "\n", "        ", "self", ".", "T", ".", "wave", "=", "wave", "\n", "self", ".", "T", ".", "onset", "=", "onset", "\n", "self", ".", "T", ".", "peak", "=", "peak", "\n", "self", ".", "T", ".", "offset", "=", "offset", "\n", "self", ".", "keys", "=", "list", "(", "set", "(", "self", ".", "keys", "+", "wave", ".", "keys", "(", ")", ".", "tolist", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.data_structures.WaveMetricsStorage.__init__": [[280, 288], ["dict", "dict", "dict", "dict", "dict", "dict"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "truepositive", "=", "dict", "(", ")", "\n", "self", ".", "falsepositive", "=", "dict", "(", ")", "\n", "self", ".", "falsenegative", "=", "dict", "(", ")", "\n", "self", ".", "onseterror", "=", "dict", "(", ")", "\n", "self", ".", "offseterror", "=", "dict", "(", ")", "\n", "self", ".", "dice", "=", "dict", "(", ")", "\n", "self", ".", "keys", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.data_structures.WaveMetricsStorage.__str__": [[289, 295], ["data_structures.WaveMetricsStorage.__dict__.keys", "str", "str"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "s", "=", "''", "\n", "for", "k", "in", "self", ".", "__dict__", ".", "keys", "(", ")", ":", "\n", "            ", "s", "+=", "'    \u251c> '", "+", "str", "(", "k", ")", "+", "':\\t'", "+", "str", "(", "self", ".", "__dict__", "[", "k", "]", ")", "+", "'\\n'", "\n", "\n", "", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.data_structures.WaveMetricsStorage.__repr__": [[296, 298], ["data_structures.WaveMetricsStorage.__str__"], "methods", ["home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.data_structures.DataGenerator.__str__"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__str__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.data_structures.WaveMetricsStorage.__getitem__": [[299, 301], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "k", ")", ":", "\n", "        ", "return", "self", ".", "truepositive", "[", "k", "]", ",", "self", ".", "falsepositive", "[", "k", "]", ",", "self", ".", "falsenegative", "[", "k", "]", ",", "self", ".", "onseterror", "[", "k", "]", ",", "self", ".", "offseterror", "[", "k", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.data_structures.Database.__init__": [[304, 306], ["dict"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "registries", "=", "dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.data_structures.Database.__str__": [[307, 313], ["data_structures.Database.__dict__.keys", "str", "str"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "s", "=", "''", "\n", "for", "k", "in", "self", ".", "__dict__", ".", "keys", "(", ")", ":", "\n", "            ", "s", "+=", "'    \u251c> '", "+", "str", "(", "k", ")", "+", "':\\t'", "+", "str", "(", "self", ".", "__dict__", "[", "k", "]", ")", "+", "'\\n'", "\n", "\n", "", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.data_structures.Database.__repr__": [[314, 316], ["data_structures.Database.__str__"], "methods", ["home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.data_structures.DataGenerator.__str__"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__str__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.data_structures.Registry.__init__": [[319, 322], ["data_structures.Signal", "data_structures.Signal"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "lead_0", ",", "lead_1", ")", ":", "\n", "        ", "self", ".", "lead_0", "=", "Signal", "(", ")", "\n", "self", ".", "lead_1", "=", "Signal", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.data_structures.Registry.__str__": [[323, 329], ["data_structures.Registry.__dict__.keys", "str", "str"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "s", "=", "''", "\n", "for", "k", "in", "self", ".", "__dict__", ".", "keys", "(", ")", ":", "\n", "            ", "s", "+=", "'    \u251c> '", "+", "str", "(", "k", ")", "+", "':\\t'", "+", "str", "(", "self", ".", "__dict__", "[", "k", "]", ")", "+", "'\\n'", "\n", "\n", "", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.data_structures.Registry.__repr__": [[330, 332], ["data_structures.Registry.__str__"], "methods", ["home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.data_structures.DataGenerator.__str__"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__str__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.data_structures.Signal.__init__": [[335, 339], ["data_structures.Wave", "data_structures.Wave", "data_structures.Wave"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "P", "=", "Wave", "(", ")", "\n", "self", ".", "QRS", "=", "Wave", "(", ")", "\n", "self", ".", "T", "=", "Wave", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.data_structures.Wave.__init__": [[342, 349], ["dict", "data_structures.WaveMetricsStorage"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "signal", "=", "[", "]", "\n", "self", ".", "validity", "=", "dict", "(", ")", "\n", "self", ".", "onset", "=", "[", "]", "\n", "self", ".", "peak", "=", "[", "]", "\n", "self", ".", "offset", "=", "[", "]", "\n", "self", ".", "metrics", "=", "WaveMetricsStorage", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.data_structures.Wave.__str__": [[350, 356], ["data_structures.Wave.__dict__.keys", "str", "str"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "s", "=", "''", "\n", "for", "k", "in", "self", ".", "__dict__", ".", "keys", "(", ")", ":", "\n", "            ", "s", "+=", "'    \u251c> '", "+", "str", "(", "k", ")", "+", "':\\t'", "+", "str", "(", "self", ".", "__dict__", "[", "k", "]", ")", "+", "'\\n'", "\n", "\n", "", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.data_structures.Wave.__repr__": [[357, 359], ["data_structures.Wave.__str__"], "methods", ["home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.data_structures.DataGenerator.__str__"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__str__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.data_structures.MetricsStorage.__init__": [[363, 367], ["data_structures.WaveMetricsStorage", "data_structures.WaveMetricsStorage", "data_structures.WaveMetricsStorage"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "P", "=", "WaveMetricsStorage", "(", ")", "\n", "self", ".", "QRS", "=", "WaveMetricsStorage", "(", ")", "\n", "self", ".", "T", "=", "WaveMetricsStorage", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.data_structures.MetricsStorage.__str__": [[368, 374], ["data_structures.MetricsStorage.__dict__.keys", "str", "str"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "s", "=", "''", "\n", "for", "k", "in", "self", ".", "__dict__", ".", "keys", "(", ")", ":", "\n", "            ", "s", "+=", "'    \u251c> '", "+", "str", "(", "k", ")", "+", "':\\t'", "+", "str", "(", "self", ".", "__dict__", "[", "k", "]", ")", "+", "'\\n'", "\n", "\n", "", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.data_structures.MetricsStorage.__repr__": [[375, 377], ["data_structures.MetricsStorage.__str__"], "methods", ["home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.data_structures.DataGenerator.__str__"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__str__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.data_structures.MetricsStorage.init_P": [[378, 384], ["None"], "methods", ["None"], ["", "def", "init_P", "(", "self", ",", "truepositive", ",", "falsepositive", ",", "falsenegative", ",", "onseterror", ",", "offseterror", ")", ":", "\n", "        ", "self", ".", "P", ".", "truepositive", "=", "truepositive", "\n", "self", ".", "P", ".", "falsepositive", "=", "falsepositive", "\n", "self", ".", "P", ".", "falsenegative", "=", "falsenegative", "\n", "self", ".", "P", ".", "onseterror", "=", "onseterror", "\n", "self", ".", "P", ".", "offseterror", "=", "offseterror", "\n", "\n"]], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.data_structures.MetricsStorage.init_QRS": [[385, 391], ["None"], "methods", ["None"], ["", "def", "init_QRS", "(", "self", ",", "truepositive", ",", "falsepositive", ",", "falsenegative", ",", "onseterror", ",", "offseterror", ")", ":", "\n", "        ", "self", ".", "QRS", ".", "truepositive", "=", "truepositive", "\n", "self", ".", "QRS", ".", "falsepositive", "=", "falsepositive", "\n", "self", ".", "QRS", ".", "falsenegative", "=", "falsenegative", "\n", "self", ".", "QRS", ".", "onseterror", "=", "onseterror", "\n", "self", ".", "QRS", ".", "offseterror", "=", "offseterror", "\n", "\n"]], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.data_structures.MetricsStorage.init_T": [[392, 398], ["None"], "methods", ["None"], ["", "def", "init_T", "(", "self", ",", "truepositive", ",", "falsepositive", ",", "falsenegative", ",", "onseterror", ",", "offseterror", ")", ":", "\n", "        ", "self", ".", "T", ".", "truepositive", "=", "truepositive", "\n", "self", ".", "T", ".", "falsepositive", "=", "falsepositive", "\n", "self", ".", "T", ".", "falsenegative", "=", "falsenegative", "\n", "self", ".", "T", ".", "onseterror", "=", "onseterror", "\n", "self", ".", "T", ".", "offseterror", "=", "offseterror", "\n", "\n"]], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.data_structures.ConfigParser.__init__": [[401, 457], ["int", "int", "int", "bool", "bool", "bool", "bool", "str", "str", "str", "float", "float", "str", "int", "float", "int", "int", "int", "int", "int", "float", "int", "int", "int", "int", "int", "float", "int", "str", "int", "os.path.join", "backend.lower", "os.path.join", "os.path.join", "ValueError", "os.path.abspath", "str", "str", "str"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "config_dict", ",", "ex_id", ",", "data_path", ",", "data_set", ",", "splitting", ",", "load_weights", ",", "backend", ",", "output_dir", ",", "evaluate", ")", ":", "\n", "        ", "assert", "backend", ".", "lower", "(", ")", "in", "(", "'keras'", ",", "'torch'", ",", "'pytorch'", ")", "\n", "\n", "# Retrieve information from configuration dictionary", "\n", "self", ".", "depth", "=", "int", "(", "config_dict", "[", "'A_Depth'", "]", ")", "\n", "self", ".", "m_repetitions", "=", "int", "(", "config_dict", "[", "'A_Repetitions'", "]", ")", "\n", "self", ".", "start_ch", "=", "int", "(", "config_dict", "[", "'A_InitChannels'", "]", ")", "\n", "self", ".", "data_aug", "=", "bool", "(", "config_dict", "[", "'T_DataAug'", "]", ")", "\n", "self", ".", "ms_upsampling", "=", "bool", "(", "config_dict", "[", "'A_MSUpsampling'", "]", ")", "\n", "self", ".", "atrous_conv", "=", "bool", "(", "config_dict", "[", "'A_ASPP'", "]", ")", "\n", "self", ".", "hyperdense", "=", "bool", "(", "config_dict", "[", "'A_HyperDense'", "]", ")", "\n", "self", ".", "m_name", "=", "str", "(", "config_dict", "[", "'A_Module'", "]", ")", "\n", "self", ".", "loss", "=", "str", "(", "config_dict", "[", "'T_Loss'", "]", ")", "\n", "self", ".", "optimizer", "=", "str", "(", "config_dict", "[", "'T_Optimizer'", "]", ")", "\n", "self", ".", "inc_rate", "=", "float", "(", "config_dict", "[", "'A_LvlGrowth'", "]", ")", "\n", "self", ".", "learning_rate", "=", "float", "(", "config_dict", "[", "'T_LearningRate'", "]", ")", "\n", "self", ".", "kernel_init", "=", "str", "(", "config_dict", "[", "'A_KernelInitializer'", "]", ")", "\n", "self", ".", "kernel_size", "=", "int", "(", "config_dict", "[", "'A_KernelSize'", "]", ")", "\n", "self", ".", "dropout_rate", "=", "float", "(", "config_dict", "[", "'A_DropoutRate'", "]", ")", "\n", "self", ".", "batch_size", "=", "int", "(", "config_dict", "[", "'T_BatchSize'", "]", ")", "\n", "self", ".", "out_ch", "=", "int", "(", "config_dict", "[", "'A_OutChannels'", "]", ")", "\n", "self", ".", "element_size", "=", "int", "(", "config_dict", "[", "'P_ElementSize'", "]", ")", "\n", "self", ".", "max_size", "=", "int", "(", "config_dict", "[", "'D_MaxSize'", "]", ")", "\n", "self", ".", "maxpool", "=", "int", "(", "config_dict", "[", "'A_MaxPooling'", "]", ")", "\n", "self", ".", "sampling_freq", "=", "float", "(", "config_dict", "[", "'D_fs'", "]", ")", "\n", "self", ".", "stride", "=", "int", "(", "config_dict", "[", "'T_Stride'", "]", ")", "\n", "self", ".", "window", "=", "int", "(", "config_dict", "[", "'T_Window'", "]", ")", "\n", "self", ".", "n_epochs", "=", "int", "(", "config_dict", "[", "'T_Epochs'", "]", ")", "\n", "self", ".", "lr_patience", "=", "int", "(", "config_dict", "[", "'T_LRPatience'", "]", ")", "\n", "self", ".", "patience", "=", "int", "(", "config_dict", "[", "'T_Patience'", "]", ")", "\n", "self", ".", "val_split", "=", "float", "(", "config_dict", "[", "'T_ValidationSplit'", "]", ")", "\n", "self", ".", "seed", "=", "int", "(", "config_dict", "[", "'T_Seed'", "]", ")", "\n", "self", ".", "strategy", "=", "str", "(", "config_dict", "[", "'A_Strategy'", "]", ")", "\n", "\n", "if", "self", ".", "strategy", "in", "(", "'single'", ",", "'single_lead'", ",", "'single-lead'", ",", "'single lead'", ")", ":", "\n", "            ", "self", ".", "in_ch", "=", "1", "\n", "", "elif", "self", ".", "strategy", "in", "(", "'multi'", ",", "'multilead'", ",", "'multi_lead'", ",", "'multi-lead'", ",", "'multi lead'", ")", ":", "\n", "            ", "self", ".", "in_ch", "=", "2", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Training strategy '\"", "+", "str", "(", "self", ".", "strategy", ")", "+", "\"' not implemented\"", ")", "\n", "\n", "# Inputs", "\n", "", "self", ".", "ex_id", "=", "int", "(", "ex_id", ")", "\n", "self", ".", "backend", "=", "backend", "\n", "self", ".", "data_set", "=", "data_set", "\n", "self", ".", "data_path", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "data_set", ")", "\n", "self", ".", "splitting", "=", "splitting", "\n", "self", ".", "load_weights", "=", "load_weights", "\n", "self", ".", "evaluate", "=", "evaluate", "\n", "self", ".", "device", "=", "'cuda'", "\n", "self", ".", "output_dir", "=", "output_dir", "\n", "\n", "if", "self", ".", "output_dir", "==", "None", ":", "\n", "            ", "self", ".", "output_dir", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "abspath", "(", "'./Logs/'", ")", ",", "'Config'", "+", "str", "(", "self", ".", "ex_id", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "output_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "'Config'", "+", "str", "(", "self", ".", "ex_id", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.data_structures.ConfigParser.__str__": [[459, 465], ["data_structures.ConfigParser.__dict__.keys", "str", "str"], "methods", ["None"], ["", "", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "s", "=", "''", "\n", "for", "k", "in", "self", ".", "__dict__", ".", "keys", "(", ")", ":", "\n", "            ", "s", "+=", "'    \u251c> '", "+", "str", "(", "k", ")", "+", "':\\t'", "+", "str", "(", "self", ".", "__dict__", "[", "k", "]", ")", "+", "'\\n'", "\n", "\n", "", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.data_structures.ConfigParser.__repr__": [[466, 468], ["data_structures.ConfigParser.__str__"], "methods", ["home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.data_structures.DataGenerator.__str__"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__str__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.data_structures.DataGenerator.__init__": [[473, 543], ["numpy.concatenate", "dict", "len", "numpy.arange", "numpy.asarray().sum", "data_structures.DataGenerator.correspondence.keys", "range", "NotImplementedError", "len", "pandas.Index", "pandas.Index", "numpy.asarray", "len", "max", "range", "range", "data_structures.DataGenerator.correspondence.keys", "numpy.where", "numpy.where", "len", "max", "range", "str", "numpy.asarray", "numpy.asarray"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "labels", ",", "config", ",", "data", ",", "shuffle", "=", "True", ")", ":", "\n", "        ", "'''Initialization'''", "\n", "# awgn=20, spikes=(30,200), powerline=(20,50.), baseline=(-5,0.15), pacemaker=15, sat_threshold=5)", "\n", "\n", "# Easier indexing", "\n", "leads", "=", "np", ".", "concatenate", "(", "(", "pandas", ".", "Index", "(", "labels", ")", "+", "'_0'", ",", "pandas", ".", "Index", "(", "labels", ")", "+", "'_1'", ")", ")", "\n", "\n", "# Set properties", "\n", "self", ".", "labels", "=", "labels", "\n", "self", ".", "shuffle", "=", "shuffle", "\n", "self", ".", "window", "=", "config", ".", "window", "\n", "self", ".", "channels", "=", "config", ".", "in_ch", "\n", "self", ".", "stride", "=", "config", ".", "stride", "\n", "self", ".", "batch_size", "=", "config", ".", "batch_size", "\n", "self", ".", "dataset", "=", "data", ".", "dataset", "[", "leads", "]", "# Much simpler index generation", "\n", "self", ".", "validity", "=", "data", ".", "validity", "[", "leads", "]", "\n", "self", ".", "mask_p", "=", "data", ".", "P", ".", "wave", "[", "leads", "]", "# Much simpler index generation", "\n", "self", ".", "mask_qrs", "=", "data", ".", "QRS", ".", "wave", "[", "leads", "]", "# Much simpler index generation", "\n", "self", ".", "mask_t", "=", "data", ".", "T", ".", "wave", "[", "leads", "]", "# Much simpler index generation", "\n", "\n", "if", "config", ".", "data_aug", ":", "# TO-DO: MORE PARAMETERS", "\n", "            ", "self", ".", "awgn", "=", "20", "\n", "self", ".", "spikes", "=", "(", "25", ",", "150", ")", "\n", "self", ".", "powerline", "=", "(", "20", ",", "50.", ")", "\n", "self", ".", "baseline", "=", "(", "-", "5", ",", "0.15", ")", "\n", "self", ".", "pacemaker", "=", "20", "\n", "self", ".", "sat_threshold", "=", "50", "\n", "\n", "# Types of data augmentation considered", "\n", "self", ".", "DataAug", "=", "[", "0", ",", "self", ".", "awgn", ",", "self", ".", "spikes", ",", "self", ".", "powerline", ",", "self", ".", "baseline", ",", "self", ".", "pacemaker", ",", "self", ".", "sat_threshold", "]", "\n", "self", ".", "DataAugLabel", "=", "[", "'NoAugment'", ",", "'awgn'", ",", "'spikes'", ",", "'powerline'", ",", "'baseline'", ",", "'pacemaker'", ",", "'sat_threshold'", "]", "\n", "self", ".", "DataAugLength", "=", "np", ".", "asarray", "(", "[", "x", "is", "not", "None", "for", "x", "in", "self", ".", "DataAug", "]", ")", ".", "sum", "(", ")", "\n", "\n", "# Obtain only the indices that we want", "\n", "self", ".", "DataAugLabel", "=", "[", "self", ".", "DataAugLabel", "[", "i", "]", "for", "i", "in", "np", ".", "where", "(", "np", ".", "asarray", "(", "[", "x", "is", "not", "None", "for", "x", "in", "self", ".", "DataAug", "]", ")", "==", "True", ")", "[", "0", "]", "]", "\n", "self", ".", "DataAug", "=", "[", "self", ".", "DataAug", "[", "i", "]", "for", "i", "in", "np", ".", "where", "(", "np", ".", "asarray", "(", "[", "x", "is", "not", "None", "for", "x", "in", "self", ".", "DataAug", "]", ")", "==", "True", ")", "[", "0", "]", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "DataAugLabel", "=", "[", "'NoAugment'", "]", "\n", "self", ".", "DataAugLength", "=", "1", "\n", "\n", "# Index-Window correspondence", "\n", "", "self", ".", "correspondence", "=", "dict", "(", ")", "\n", "counter", "=", "0", "# Keep track of how many windows have already been stored", "\n", "\n", "# Single-lead strategy", "\n", "if", "self", ".", "channels", "==", "1", ":", "\n", "            ", "for", "key", "in", "leads", ":", "\n", "                ", "for", "w", "in", "range", "(", "len", "(", "self", ".", "validity", "[", "key", "]", "[", "0", "]", ")", ")", ":", "\n", "                    ", "window_elements", "=", "max", "(", "(", "(", "self", ".", "validity", "[", "key", "]", "[", "'off'", "]", "[", "w", "]", "-", "self", ".", "validity", "[", "key", "]", "[", "'on'", "]", "[", "w", "]", "+", "1", ")", "-", "self", ".", "window", "+", "self", ".", "stride", ")", "//", "self", ".", "stride", ",", "0", ")", "\n", "\n", "for", "i", "in", "range", "(", "window_elements", ")", ":", "\n", "                        ", "self", ".", "correspondence", "[", "counter", "+", "i", "]", "=", "[", "key", ",", "self", ".", "validity", "[", "key", "]", "[", "'on'", "]", "[", "w", "]", "+", "self", ".", "stride", "*", "i", "]", "\n", "\n", "", "counter", "+=", "window_elements", "\n", "\n", "", "", "", "elif", "self", ".", "channels", "==", "2", ":", "# Two-lead strategy. Both leads will have the same validity <- selecting validity of lead '_0'", "\n", "            ", "for", "key", "in", "self", ".", "labels", ":", "\n", "                ", "for", "w", "in", "range", "(", "len", "(", "self", ".", "validity", "[", "key", "+", "'_0'", "]", "[", "0", "]", ")", ")", ":", "\n", "                    ", "window_elements", "=", "max", "(", "(", "(", "self", ".", "validity", "[", "key", "+", "'_0'", "]", "[", "'off'", "]", "[", "w", "]", "-", "self", ".", "validity", "[", "key", "+", "'_0'", "]", "[", "'on'", "]", "[", "w", "]", "+", "1", ")", "-", "self", ".", "window", "+", "self", ".", "stride", ")", "//", "self", ".", "stride", ",", "0", ")", "\n", "\n", "for", "i", "in", "range", "(", "window_elements", ")", ":", "\n", "                        ", "self", ".", "correspondence", "[", "counter", "+", "i", "]", "=", "[", "key", ",", "self", ".", "validity", "[", "key", "+", "'_0'", "]", "[", "'on'", "]", "[", "w", "]", "+", "self", ".", "stride", "*", "i", "]", "\n", "\n", "", "counter", "+=", "window_elements", "\n", "", "", "", "else", ":", "# Not implemented", "\n", "            ", "raise", "NotImplementedError", "(", "\"No database available for \"", "+", "str", "(", "self", ".", "channels", ")", "+", "\" channels\"", ")", "\n", "\n", "# Custom indexing", "\n", "", "self", ".", "length_no_aug", "=", "len", "(", "self", ".", "correspondence", ".", "keys", "(", ")", ")", "\n", "self", ".", "indexes", "=", "np", ".", "arange", "(", "len", "(", "self", ".", "correspondence", ".", "keys", "(", ")", ")", "*", "self", ".", "DataAugLength", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.data_structures.DataGenerator.__len__": [[544, 547], ["math.ceil", "float", "len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "'''Denotes the number of batches per epoch'''", "\n", "return", "math", ".", "ceil", "(", "float", "(", "len", "(", "self", ".", "indexes", ")", ")", "/", "self", ".", "batch_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.data_structures.DataGenerator.__getitem__": [[548, 564], ["data_structures.DataGenerator.__batch_generation_single", "data_structures.DataGenerator.__batch_generation_multi", "NotImplementedError", "str"], "methods", ["home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.data_structures.DataGenerator.__batch_generation_single", "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.data_structures.DataGenerator.__batch_generation_multi"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "'''Generate one batch of data'''", "\n", "# Generate self.indexes of the batch", "\n", "ix", "=", "self", ".", "indexes", "[", "index", "*", "self", ".", "batch_size", ":", "(", "index", "+", "1", ")", "*", "self", ".", "batch_size", "]", "\n", "\n", "# Generate data", "\n", "if", "self", ".", "channels", "==", "1", ":", "\n", "            ", "X", ",", "y", "=", "self", ".", "__batch_generation_single", "(", "ix", ")", "\n", "", "elif", "self", ".", "channels", "==", "2", ":", "\n", "            ", "X", ",", "y", "=", "self", ".", "__batch_generation_multi", "(", "ix", ")", "\n", "# X = X[:,:,:,np.newaxis]", "\n", "# y = y[:,:,np.newaxis,:]", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"No batch generation strategy for \"", "+", "str", "(", "self", ".", "channels", ")", "+", "\" channels has been devised\"", ")", "\n", "\n", "", "return", "X", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.data_structures.DataGenerator.on_epoch_end": [[565, 569], ["numpy.random.shuffle"], "methods", ["None"], ["", "def", "on_epoch_end", "(", "self", ")", ":", "\n", "        ", "'''Updates self.indexes after each epoch'''", "\n", "if", "self", ".", "shuffle", "==", "True", ":", "\n", "            ", "np", ".", "random", ".", "shuffle", "(", "self", ".", "indexes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.data_structures.DataGenerator.__batch_generation_single": [[570, 600], ["numpy.empty", "numpy.empty", "enumerate", "len", "len", "utils.transforms.DataAugmentationTransform"], "methods", ["home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.transforms.DataAugmentationTransform"], ["", "", "def", "__batch_generation_single", "(", "self", ",", "ix", ")", ":", "\n", "        ", "'''Generates one datapoint'''", "\n", "# X : (n_samples, *dim, n_channels)", "\n", "# Initialization", "\n", "X", "=", "np", ".", "empty", "(", "(", "len", "(", "ix", ")", ",", "self", ".", "window", ",", "self", ".", "channels", ")", ",", "dtype", "=", "'float32'", ")", "\n", "y", "=", "np", ".", "empty", "(", "(", "len", "(", "ix", ")", ",", "self", ".", "window", ",", "3", ")", ",", "dtype", "=", "'float32'", ")", "\n", "\n", "# Generate data", "\n", "for", "i", ",", "ID", "in", "enumerate", "(", "ix", ")", ":", "\n", "# Desambiguate data augmentation", "\n", "            ", "j", "=", "ID", "//", "self", ".", "length_no_aug", "\n", "ID", "=", "ID", "%", "self", ".", "length_no_aug", "\n", "w_info", "=", "self", ".", "correspondence", "[", "ID", "]", "\n", "key", "=", "w_info", "[", "0", "]", "\n", "onset", "=", "w_info", "[", "1", "]", "\n", "\n", "# Store sample", "\n", "X", "[", "i", ",", ":", ",", "0", "]", "=", "self", ".", "dataset", "[", "key", "]", "[", "onset", ":", "onset", "+", "self", ".", "window", "]", "\n", "\n", "# Store mask", "\n", "y", "[", "i", ",", ":", ",", "0", "]", "=", "self", ".", "mask_p", "[", "key", "]", ".", "values", "[", "onset", ":", "onset", "+", "self", ".", "window", "]", "\n", "y", "[", "i", ",", ":", ",", "1", "]", "=", "self", ".", "mask_qrs", "[", "key", "]", ".", "values", "[", "onset", ":", "onset", "+", "self", ".", "window", "]", "\n", "y", "[", "i", ",", ":", ",", "2", "]", "=", "self", ".", "mask_t", "[", "key", "]", ".", "values", "[", "onset", ":", "onset", "+", "self", ".", "window", "]", "\n", "\n", "# Apply data augmentation:", "\n", "if", "not", "(", "self", ".", "DataAugLabel", "[", "j", "]", "==", "'NoAugment'", ")", ":", "\n", "                ", "Noise", "=", "DataAugmentationTransform", "(", "X", "[", "i", ",", ":", ",", "0", "]", ",", "self", ".", "DataAugLabel", "[", "j", "]", ",", "self", ".", "DataAug", "[", "j", "]", ",", "y", "[", "i", ",", ":", ",", "1", "]", ")", "\n", "X", "[", "i", ",", ":", ",", "0", "]", "+=", "Noise", "\n", "\n", "", "", "return", "X", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.data_structures.DataGenerator.__batch_generation_multi": [[601, 634], ["numpy.empty", "numpy.empty", "enumerate", "len", "len", "utils.transforms.DataAugmentationTransform", "utils.transforms.DataAugmentationTransform.squeeze", "utils.transforms.DataAugmentationTransform", "utils.transforms.DataAugmentationTransform.squeeze"], "methods", ["home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.transforms.DataAugmentationTransform", "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.transforms.DataAugmentationTransform"], ["", "def", "__batch_generation_multi", "(", "self", ",", "ix", ")", ":", "\n", "        ", "'''Generates one datapoint'''", "\n", "# X : (n_samples, *dim, n_channels)", "\n", "# Initialization", "\n", "X", "=", "np", ".", "empty", "(", "(", "len", "(", "ix", ")", ",", "self", ".", "window", ",", "self", ".", "channels", ")", ",", "dtype", "=", "'float32'", ")", "\n", "y", "=", "np", ".", "empty", "(", "(", "len", "(", "ix", ")", ",", "self", ".", "window", ",", "3", ")", ",", "dtype", "=", "'float32'", ")", "\n", "\n", "# Generate data", "\n", "for", "i", ",", "ID", "in", "enumerate", "(", "ix", ")", ":", "\n", "# Desambiguate data augmentation", "\n", "            ", "j", "=", "ID", "//", "self", ".", "length_no_aug", "\n", "ID", "=", "ID", "%", "self", ".", "length_no_aug", "\n", "w_info", "=", "self", ".", "correspondence", "[", "ID", "]", "\n", "key", "=", "w_info", "[", "0", "]", "\n", "onset", "=", "w_info", "[", "1", "]", "\n", "\n", "# Store sample", "\n", "X", "[", "i", ",", ":", ",", "1", "]", "=", "self", ".", "dataset", "[", "key", "+", "'_0'", "]", "[", "onset", ":", "onset", "+", "self", ".", "window", "]", "\n", "X", "[", "i", ",", ":", ",", "0", "]", "=", "self", ".", "dataset", "[", "key", "+", "'_1'", "]", "[", "onset", ":", "onset", "+", "self", ".", "window", "]", "\n", "\n", "# Store mask", "\n", "y", "[", "i", ",", ":", ",", "0", "]", "=", "self", ".", "mask_p", "[", "key", "+", "'_0'", "]", ".", "values", "[", "onset", ":", "onset", "+", "self", ".", "window", "]", "\n", "y", "[", "i", ",", ":", ",", "1", "]", "=", "self", ".", "mask_qrs", "[", "key", "+", "'_0'", "]", ".", "values", "[", "onset", ":", "onset", "+", "self", ".", "window", "]", "\n", "y", "[", "i", ",", ":", ",", "2", "]", "=", "self", ".", "mask_t", "[", "key", "+", "'_0'", "]", ".", "values", "[", "onset", ":", "onset", "+", "self", ".", "window", "]", "\n", "\n", "# Apply data augmentation:", "\n", "if", "not", "(", "self", ".", "DataAugLabel", "[", "j", "]", "==", "'NoAugment'", ")", ":", "\n", "                ", "Noise_0", "=", "DataAugmentationTransform", "(", "X", "[", "i", ",", ":", ",", "0", "]", ",", "self", ".", "DataAugLabel", "[", "j", "]", ",", "self", ".", "DataAug", "[", "j", "]", ",", "y", "[", "i", ",", ":", ",", "1", "]", ")", "\n", "X", "[", "i", ",", ":", ",", "0", "]", "+=", "Noise_0", ".", "squeeze", "(", ")", "\n", "Noise_1", "=", "DataAugmentationTransform", "(", "X", "[", "i", ",", ":", ",", "0", "]", ",", "self", ".", "DataAugLabel", "[", "j", "]", ",", "self", ".", "DataAug", "[", "j", "]", ",", "y", "[", "i", ",", ":", ",", "1", "]", ")", "\n", "X", "[", "i", ",", ":", ",", "1", "]", "+=", "Noise_1", ".", "squeeze", "(", ")", "\n", "\n", "", "", "return", "X", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.data_structures.DataGenerator.__str__": [[635, 641], ["data_structures.DataGenerator.__dict__.keys", "str", "str"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "s", "=", "''", "\n", "for", "k", "in", "self", ".", "__dict__", ".", "keys", "(", ")", ":", "\n", "            ", "s", "+=", "'    \u251c> '", "+", "str", "(", "k", ")", "+", "':\\t'", "+", "str", "(", "self", ".", "__dict__", "[", "k", "]", ")", "+", "'\\n'", "\n", "\n", "", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.data_structures.DataGenerator.__repr__": [[642, 644], ["str"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "str", "(", "self", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.data_structures.series_to_supervised": [[12, 20], ["numpy.pad", "numpy.zeros", "range", "int", "math.ceil", "math.ceil", "float"], "function", ["None"], ["def", "series_to_supervised", "(", "data", ",", "n_length", ",", "n_stride", "=", "1", ")", ":", "\n", "    ", "data", "=", "np", ".", "pad", "(", "data", ",", "(", "(", "0", ",", "int", "(", "(", "math", ".", "ceil", "(", "(", "float", "(", "data", ".", "shape", "[", "0", "]", ")", "-", "n_length", "+", "n_stride", ")", "/", "n_stride", ")", "-", "1", ")", "*", "n_stride", "+", "n_length", "-", "data", ".", "shape", "[", "0", "]", ")", ")", ")", ",", "'edge'", ")", "\n", "agg", "=", "np", ".", "zeros", "(", "(", "math", ".", "ceil", "(", "(", "data", ".", "shape", "[", "0", "]", "-", "n_length", "+", "n_stride", ")", "/", "n_stride", ")", ",", "n_length", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "0", ",", "agg", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "agg", "[", "i", ",", ":", "]", "=", "data", "[", "i", "*", "n_stride", ":", "(", "i", "*", "n_stride", "+", "n_length", ")", "]", "\n", "\n", "", "return", "agg", "\n", "\n"]], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.data_structures.supervised_to_series": [[22, 32], ["numpy.zeros", "numpy.zeros", "range"], "function", ["None"], ["", "def", "supervised_to_series", "(", "supervised", ",", "n_length", ",", "n_stride", "=", "1", ")", ":", "\n", "    ", "dtype", "=", "supervised", ".", "dtype", "\n", "agg", "=", "np", ".", "zeros", "(", "(", "(", "supervised", ".", "shape", "[", "0", "]", "-", "1", ")", "*", "n_stride", "+", "n_length", ",", ")", ")", "\n", "contrib", "=", "np", ".", "zeros", "(", "(", "(", "supervised", ".", "shape", "[", "0", "]", "-", "1", ")", "*", "n_stride", "+", "n_length", ",", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "0", ",", "supervised", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "agg", "[", "i", "*", "n_stride", ":", "(", "i", "*", "n_stride", "+", "n_length", ")", "]", "+=", "supervised", "[", "i", ",", ":", "]", "\n", "contrib", "[", "i", "*", "n_stride", ":", "(", "i", "*", "n_stride", "+", "n_length", ")", "]", "+=", "1", "\n", "\n", "", "return", "(", "agg", "/", "contrib", ")", ".", "astype", "(", "dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.data_structures.load_data": [[35, 51], ["dict", "open", "list", "line.replace().replace().replace.replace().replace().replace", "line.replace().replace().replace.split", "line.replace().replace().replace.split", "numpy.asarray", "numpy.asarray().astype", "line.replace().replace().replace.replace().replace", "numpy.asarray", "line.replace().replace().replace.replace"], "function", ["None"], ["", "def", "load_data", "(", "filepath", ")", ":", "\n", "    ", "dic", "=", "dict", "(", ")", "\n", "with", "open", "(", "filepath", ")", "as", "f", ":", "\n", "        ", "text", "=", "list", "(", "f", ")", "\n", "", "for", "line", "in", "text", ":", "\n", "        ", "line", "=", "line", ".", "replace", "(", "' '", ",", "''", ")", ".", "replace", "(", "'\\n'", ",", "''", ")", ".", "replace", "(", "',,'", ",", "''", ")", "\n", "if", "line", "[", "-", "1", "]", "==", "','", ":", "line", "=", "line", "[", ":", "-", "1", "]", "\n", "head", "=", "line", ".", "split", "(", "','", ")", "[", "0", "]", "\n", "tail", "=", "line", ".", "split", "(", "','", ")", "[", "1", ":", "]", "\n", "if", "tail", "==", "[", "''", "]", ":", "\n", "            ", "tail", "=", "np", ".", "asarray", "(", "[", "]", ")", "\n", "", "else", ":", "\n", "            ", "tail", "=", "np", ".", "asarray", "(", "tail", ")", ".", "astype", "(", "int", ")", "\n", "\n", "", "dic", "[", "head", "]", "=", "tail", "\n", "", "return", "dic", "\n", "\n"]], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.data_structures.save_data": [[54, 59], ["open", "dic.keys", "f.write", "str().replace().replace().replace", "str().replace().replace", "str().replace", "str", "dic[].tolist"], "function", ["None"], ["", "def", "save_data", "(", "filepath", ",", "dic", ")", ":", "\n", "    ", "with", "open", "(", "filepath", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "for", "key", "in", "dic", ".", "keys", "(", ")", ":", "\n", "# f.write(\"%s,%s\\n\"%(key,dic[key].tolist()))", "\n", "            ", "f", ".", "write", "(", "\"{},{}\\n\"", ".", "format", "(", "key", ",", "str", "(", "dic", "[", "key", "]", ".", "tolist", "(", ")", ")", ".", "replace", "(", "']'", ",", "''", ")", ".", "replace", "(", "'['", ",", "''", ")", ".", "replace", "(", "' '", ",", "''", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.guillermo-jimenez_ECGDelNet.utils.data_structures.save_fiducials": [[61, 65], ["open", "fiducial.keys", "f.write", "str().replace().replace", "str().replace", "str", "fiducial[].tolist"], "function", ["None"], ["", "", "", "def", "save_fiducials", "(", "fiducial", ",", "path", ")", ":", "\n", "    ", "with", "open", "(", "path", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "for", "key", "in", "fiducial", ".", "keys", "(", ")", ":", "\n", "            ", "f", ".", "write", "(", "\"%s,%s\\n\"", "%", "(", "key", ",", "str", "(", "fiducial", "[", "key", "]", ".", "tolist", "(", ")", ")", ".", "replace", "(", "'['", ",", "''", ")", ".", "replace", "(", "']'", ",", "''", ")", ")", ")", "\n", "\n"]]}