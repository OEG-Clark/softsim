{"home.repos.pwc.inspect_result.bethgelab_robustness.None.demo.main": [[15, 70], ["torchvision.models.resnet50", "robusta.datasets.imagenetc.ImageNetC", "torch.utils.data.DataLoader", "robusta.batchnorm.adapt", "robusta.selflearning.adapt", "torch.optim.SGD", "robusta.selflearning.GeneralizedCrossEntropy", "range", "torchvision.transforms.Compose", "torchvision.models.resnet50.", "model.argmax", "demo..", "torch.optim.SGD.zero_grad", "rpl_loss.backward", "torch.optim.SGD.step", "len", "print", "torchvision.transforms.ToTensor"], "function", ["home.repos.pwc.inspect_result.bethgelab_robustness.models.resnet_gn.resnet50", "home.repos.pwc.inspect_result.bethgelab_robustness.batchnorm.__init__.adapt", "home.repos.pwc.inspect_result.bethgelab_robustness.batchnorm.__init__.adapt"], ["def", "main", "(", ")", ":", "\n", "    ", "model", "=", "torchvision", ".", "models", ".", "resnet50", "(", "pretrained", "=", "True", ")", "\n", "\n", "# Dummy-ImageNetC dataset has only 1 image.", "\n", "# Change this to evaluate on a full dataset.", "\n", "batch_size", "=", "1", "\n", "dataset_folder", "=", "'test/dummy_datasets/ImageNet-C'", "\n", "num_epochs", "=", "1", "\n", "\n", "# We provide implementations for ImageNet-val, ImageNetC, ImageNetR,", "\n", "# ImageNetA and ImageNetD:", "\n", "val_dataset", "=", "robusta", ".", "datasets", ".", "imagenetc", ".", "ImageNetC", "(", "\n", "root", "=", "dataset_folder", ",", "corruption", "=", "\"gaussian_blur\"", ",", "severity", "=", "1", ",", "\n", "transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToTensor", "(", ")", "]", ")", "\n", ")", "\n", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "val_dataset", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ")", "\n", "\n", "# We offer different options for batch norm adaptation;", "\n", "# alternatives are \"ema\", \"batch_wise_prior\", ...", "\n", "robusta", ".", "batchnorm", ".", "adapt", "(", "model", ",", "adapt_type", "=", "\"batch_wise\"", ")", "\n", "\n", "# The accuracy metric can be specific to the dataset:", "\n", "# For example, ImageNet-R requires remapping into 200 classes.", "\n", "# accuracy_metric = val_dataset.accuracy", "\n", "\n", "# You can also easily use self-learning in your model.", "\n", "# Self-learning adaptation can be combined with batch norm adaptation, example:", "\n", "parameters", "=", "robusta", ".", "selflearning", ".", "adapt", "(", "model", ",", "adapt_type", "=", "\"affine\"", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "parameters", ",", "lr", "=", "1e-3", ")", "\n", "\n", "# You can choose from a set of adaptation losses (GCE, Entropy, ...)", "\n", "rpl_loss", "=", "robusta", ".", "selflearning", ".", "GeneralizedCrossEntropy", "(", "q", "=", "0.8", ")", "\n", "\n", "acc1_sum", ",", "acc5_sum", ",", "num_samples", "=", "0.", ",", "0.", ",", "0.", "\n", "for", "epoch", "in", "range", "(", "num_epochs", ")", ":", "\n", "        ", "predictions", "=", "[", "]", "\n", "for", "images", ",", "targets", "in", "val_loader", ":", "\n", "\n", "            ", "logits", "=", "model", "(", "images", ")", "\n", "predictions", "=", "logits", ".", "argmax", "(", "dim", "=", "1", ")", "\n", "\n", "# Predictions are optional. If you do not specify them,", "\n", "# they will be computed within the loss function.", "\n", "loss", "=", "rpl_loss", "(", "logits", ",", "predictions", ")", "\n", "\n", "# When using self-learning, you need to add an additional optimizer", "\n", "# step in your evaluation loop.", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# acc1_sum, acc5_sum += accuracy_metric(predictions, targets, topk=(1,5))", "\n", "num_samples", "+=", "len", "(", "targets", ")", "\n", "print", "(", "f\"Top-1: {acc1_sum/num_samples}, Top-5: {acc5_sum/num_samples}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.test.test_models.test_imports": [[4, 7], ["None"], "function", ["None"], ["def", "test_imports", "(", ")", ":", "\n", "    ", "\"\"\"API tests.\"\"\"", "\n", "assert", "robusta", ".", "models", "", "", ""]], "home.repos.pwc.inspect_result.bethgelab_robustness.test.test_datasets.test_imagenet": [[11, 19], ["torchvision.datasets.ImageFolder", "torch.utils.data.DataLoader", "next", "iter", "len", "torchvision.transforms.Compose", "torchvision.transforms.ToTensor"], "function", ["None"], ["def", "test_imagenet", "(", ")", ":", "\n", "    ", "dataset", "=", "ImageFolder", "(", "root", "=", "dummy_dataset_folder", "+", "'ImageNet2012/val'", ",", "\n", "transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToTensor", "(", ")", "]", ")", "\n", ")", "\n", "data_loader", "=", "DataLoader", "(", "dataset", ")", "\n", "record", "=", "next", "(", "iter", "(", "data_loader", ")", ")", "\n", "assert", "record", "is", "not", "None", "\n", "assert", "len", "(", "dataset", ")", "==", "1", "# It's only 1 record", "\n", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.test.test_datasets.test_imagenetc": [[21, 34], ["ImageNetC", "torch.utils.data.DataLoader", "next", "iter", "len", "torchvision.transforms.Compose", "torchvision.transforms.ToTensor"], "function", ["None"], ["", "def", "test_imagenetc", "(", ")", ":", "\n", "    ", "dataset", "=", "ImageNetC", "(", "root", "=", "dummy_dataset_folder", "+", "'ImageNet-C'", ",", "\n", "corruption", "=", "\"gaussian_blur\"", ",", "severity", "=", "\"1\"", ",", "\n", "transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToTensor", "(", ")", "]", ")", "\n", ")", "\n", "data_loader", "=", "DataLoader", "(", "dataset", ")", "\n", "record", "=", "next", "(", "iter", "(", "data_loader", ")", ")", "\n", "assert", "record", "is", "not", "None", "\n", "\n", "assert", "dataset", ".", "num_samples", "==", "50000", "\n", "assert", "dataset", ".", "image_size", "==", "(", "224", ",", "224", ")", "\n", "assert", "dataset", ".", "num_classes", "==", "1000", "\n", "assert", "len", "(", "dataset", ")", "==", "1", "# It's only 1 record", "\n", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.test.test_datasets.test_imagenetr": [[36, 43], ["robusta.datasets.ImageNetR"], "function", ["None"], ["", "def", "test_imagenetr", "(", ")", ":", "\n", "    ", "dataset", "=", "robusta", ".", "datasets", ".", "ImageNetR", "(", "\n", "corruption", "=", "corruption", ",", "\n", "severity", "=", "severity", "\n", ")", "\n", "\n", "assert", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.test.test_datasets.test_imageneta": [[44, 46], ["None"], "function", ["None"], ["", "def", "test_imageneta", "(", ")", ":", "\n", "    ", "assert", "False", "\n", "", ""]], "home.repos.pwc.inspect_result.bethgelab_robustness.test.test_imports.test_imports": [[4, 9], ["None"], "function", ["None"], ["def", "test_imports", "(", ")", ":", "\n", "    ", "assert", "robusta", ".", "batchnorm", "\n", "assert", "robusta", ".", "datasets", "\n", "assert", "robusta", ".", "models", "\n", "assert", "robusta", ".", "selflearning", "", "", ""]], "home.repos.pwc.inspect_result.bethgelab_robustness.test.test_batchnorm.test_adapt_changes_BatchNorm_to_EMABatchNorm": [[6, 12], ["torch.nn.Sequential", "robusta.batchnorm.bn.adapt_ema", "next", "isinstance", "torch.nn.BatchNorm2d", "iter", "bn.adapt_ema.named_children"], "function", ["home.repos.pwc.inspect_result.bethgelab_robustness.batchnorm.bn.adapt_ema"], ["def", "test_adapt_changes_BatchNorm_to_EMABatchNorm", "(", ")", ":", "\n", "    ", "model", "=", "nn", ".", "Sequential", "(", "nn", ".", "BatchNorm2d", "(", "10", ")", ")", "\n", "model", "=", "bn", ".", "adapt_ema", "(", "model", ")", "\n", "\n", "_", ",", "result_layer", "=", "next", "(", "iter", "(", "model", ".", "named_children", "(", ")", ")", ")", "\n", "assert", "isinstance", "(", "result_layer", ",", "bn", ".", "EMABatchNorm", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.test.test_batchnorm.test_adaptparts_changes_BatchNorm_to_PartlyAdaptiveBN": [[14, 23], ["torch.nn.Sequential", "robusta.batchnorm.bn.adapt_parts", "next", "isinstance", "torch.nn.BatchNorm2d", "iter", "bn.adapt_parts.named_children"], "function", ["home.repos.pwc.inspect_result.bethgelab_robustness.batchnorm.bn.adapt_parts"], ["", "def", "test_adaptparts_changes_BatchNorm_to_PartlyAdaptiveBN", "(", ")", ":", "\n", "    ", "model", "=", "nn", ".", "Sequential", "(", "nn", ".", "BatchNorm2d", "(", "10", ")", ")", "\n", "adapt_mean", ",", "adapt_var", "=", "False", ",", "True", "\n", "model", "=", "bn", ".", "adapt_parts", "(", "model", ",", "adapt_mean", ",", "adapt_var", ")", "\n", "\n", "_", ",", "result_layer", "=", "next", "(", "iter", "(", "model", ".", "named_children", "(", ")", ")", ")", "\n", "assert", "isinstance", "(", "result_layer", ",", "bn", ".", "PartlyAdaptiveBN", ")", "\n", "assert", "result_layer", ".", "estimate_mean", "==", "adapt_mean", "\n", "assert", "result_layer", ".", "estimate_var", "==", "adapt_var", "\n", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.test.test_batchnorm.test_adaptbayesian_changes_BatchNorm_to_BayesianBatchNorm": [[25, 33], ["torch.nn.Sequential", "robusta.batchnorm.bn.adapt_bayesian", "next", "isinstance", "torch.nn.BatchNorm2d", "iter", "bn.adapt_bayesian.named_children"], "function", ["home.repos.pwc.inspect_result.bethgelab_robustness.batchnorm.bn.adapt_bayesian"], ["", "def", "test_adaptbayesian_changes_BatchNorm_to_BayesianBatchNorm", "(", ")", ":", "\n", "    ", "model", "=", "nn", ".", "Sequential", "(", "nn", ".", "BatchNorm2d", "(", "10", ")", ")", "\n", "prior", "=", "0.2", "\n", "model", "=", "bn", ".", "adapt_bayesian", "(", "model", ",", "prior", "=", "prior", ")", "\n", "\n", "_", ",", "result_layer", "=", "next", "(", "iter", "(", "model", ".", "named_children", "(", ")", ")", ")", "\n", "assert", "isinstance", "(", "result_layer", ",", "bn", ".", "BayesianBatchNorm", ")", "\n", "assert", "result_layer", ".", "prior", "==", "prior", "\n", "", ""]], "home.repos.pwc.inspect_result.bethgelab_robustness.robustness_eval.main.AverageMeter.__init__": [[373, 377], ["main.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.bethgelab_robustness.batchnorm.bn.PartlyAdaptiveBN.reset"], ["def", "__init__", "(", "self", ",", "name", ",", "fmt", "=", "':f'", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "fmt", "=", "fmt", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.robustness_eval.main.AverageMeter.reset": [[378, 383], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.robustness_eval.main.AverageMeter.update": [[384, 389], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.robustness_eval.main.AverageMeter.__str__": [[390, 393], ["fmtstr.format"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "fmtstr", "=", "'{name} {val'", "+", "self", ".", "fmt", "+", "'} ({avg'", "+", "self", ".", "fmt", "+", "'})'", "\n", "return", "fmtstr", ".", "format", "(", "**", "self", ".", "__dict__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.robustness_eval.main.ProgressMeter.__init__": [[396, 400], ["main.ProgressMeter._get_batch_fmtstr"], "methods", ["home.repos.pwc.inspect_result.bethgelab_robustness.src.meters.ProgressMeter._get_batch_fmtstr"], ["    ", "def", "__init__", "(", "self", ",", "num_batches", ",", "meters", ",", "prefix", "=", "\"\"", ")", ":", "\n", "        ", "self", ".", "batch_fmtstr", "=", "self", ".", "_get_batch_fmtstr", "(", "num_batches", ")", "\n", "self", ".", "meters", "=", "meters", "\n", "self", ".", "prefix", "=", "prefix", "\n", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.robustness_eval.main.ProgressMeter.display": [[401, 405], ["print", "str", "main.ProgressMeter.batch_fmtstr.format"], "methods", ["None"], ["", "def", "display", "(", "self", ",", "batch", ")", ":", "\n", "        ", "entries", "=", "[", "self", ".", "prefix", "+", "self", ".", "batch_fmtstr", ".", "format", "(", "batch", ")", "]", "\n", "entries", "+=", "[", "str", "(", "meter", ")", "for", "meter", "in", "self", ".", "meters", "]", "\n", "print", "(", "'\\t'", ".", "join", "(", "entries", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.robustness_eval.main.ProgressMeter._get_batch_fmtstr": [[406, 410], ["len", "str", "str", "fmt.format"], "methods", ["None"], ["", "def", "_get_batch_fmtstr", "(", "self", ",", "num_batches", ")", ":", "\n", "        ", "num_digits", "=", "len", "(", "str", "(", "num_batches", "//", "1", ")", ")", "\n", "fmt", "=", "'{:'", "+", "str", "(", "num_digits", ")", "+", "'d}'", "\n", "return", "'['", "+", "fmt", "+", "'/'", "+", "fmt", ".", "format", "(", "num_batches", ")", "+", "']'", "\n", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.robustness_eval.main.main": [[83, 116], ["parser.parse_args", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "warnings.warn", "warnings.warn", "int", "torch.spawn", "main.main_worker"], "function", ["home.repos.pwc.inspect_result.bethgelab_robustness.src.config.parse_args", "home.repos.pwc.inspect_result.bethgelab_robustness.src.evaluate.main_worker"], ["def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "if", "args", ".", "seed", "is", "not", "None", ":", "\n", "        ", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "cudnn", ".", "deterministic", "=", "True", "\n", "warnings", ".", "warn", "(", "'You have chosen to seed training. '", "\n", "'This will turn on the CUDNN deterministic setting, '", "\n", "'which can slow down your training considerably! '", "\n", "'You may see unexpected behavior when restarting '", "\n", "'from checkpoints.'", ")", "\n", "\n", "", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "        ", "warnings", ".", "warn", "(", "'You have chosen a specific GPU. This will completely '", "\n", "'disable data parallelism.'", ")", "\n", "\n", "", "if", "args", ".", "dist_url", "==", "\"env://\"", "and", "args", ".", "world_size", "==", "-", "1", ":", "\n", "        ", "args", ".", "world_size", "=", "int", "(", "os", ".", "environ", "[", "\"WORLD_SIZE\"", "]", ")", "\n", "\n", "", "args", ".", "distributed", "=", "args", ".", "world_size", ">", "1", "or", "args", ".", "multiprocessing_distributed", "\n", "\n", "ngpus_per_node", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "if", "args", ".", "multiprocessing_distributed", ":", "\n", "# Since we have ngpus_per_node processes per node, the total world_size", "\n", "# needs to be adjusted accordingly", "\n", "        ", "args", ".", "world_size", "=", "ngpus_per_node", "*", "args", ".", "world_size", "\n", "# Use torch.multiprocessing.spawn to launch distributed processes: the", "\n", "# main_worker process function", "\n", "mp", ".", "spawn", "(", "main_worker", ",", "nprocs", "=", "ngpus_per_node", ",", "args", "=", "(", "ngpus_per_node", ",", "args", ")", ")", "\n", "", "else", ":", "\n", "# Simply call main_worker function", "\n", "        ", "main_worker", "(", "args", ".", "gpu", ",", "ngpus_per_node", ",", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.robustness_eval.main.main_worker": [[118, 270], ["torch.CrossEntropyLoss().cuda", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "os.path.join", "torchvision.Normalize", "torchvision.ImageFolder", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "robusta.datasets.ImageNetC", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "range", "print", "torch.init_process_group", "print", "print", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "print", "torch.nn.DataParallel().cuda.parameters", "os.path.isfile", "torchvision.Compose", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "main.validate", "main.adjust_learning_rate", "main.train", "main.validate", "max", "int", "torch.CrossEntropyLoss", "print", "torch.nn.DataParallel().cuda.load_state_dict", "torch.optim.SGD.load_state_dict", "print", "print", "torchvision.Compose", "torch.utils.data.distributed.DistributedSampler.set_epoch", "main.save_checkpoint", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.nn.DataParallel().cuda.cuda", "int", "int", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.DataParallel().cuda.cuda", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.nn.DataParallel().cuda.cuda", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "best_acc1.to.to", "torchvision.RandomResizedCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "args.arch.startswith", "args.arch.startswith", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel().cuda.cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torchvision.ToTensor", "torch.nn.DataParallel().cuda.state_dict", "torch.optim.SGD.state_dict", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel"], "function", ["home.repos.pwc.inspect_result.bethgelab_robustness.imagenet_d.main.validate", "home.repos.pwc.inspect_result.bethgelab_robustness.imagenet_d.main.adjust_learning_rate", "home.repos.pwc.inspect_result.bethgelab_robustness.robustness_eval.main.train", "home.repos.pwc.inspect_result.bethgelab_robustness.imagenet_d.main.validate", "home.repos.pwc.inspect_result.bethgelab_robustness.imagenet_d.main.save_checkpoint"], ["", "", "def", "main_worker", "(", "gpu", ",", "ngpus_per_node", ",", "args", ")", ":", "\n", "    ", "global", "best_acc1", "\n", "args", ".", "gpu", "=", "gpu", "\n", "\n", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "        ", "print", "(", "\"Use GPU: {} for training\"", ".", "format", "(", "args", ".", "gpu", ")", ")", "\n", "\n", "", "if", "args", ".", "distributed", ":", "\n", "        ", "if", "args", ".", "dist_url", "==", "\"env://\"", "and", "args", ".", "rank", "==", "-", "1", ":", "\n", "            ", "args", ".", "rank", "=", "int", "(", "os", ".", "environ", "[", "\"RANK\"", "]", ")", "\n", "", "if", "args", ".", "multiprocessing_distributed", ":", "\n", "# For multiprocessing distributed training, rank needs to be the", "\n", "# global rank among all the processes", "\n", "            ", "args", ".", "rank", "=", "args", ".", "rank", "*", "ngpus_per_node", "+", "gpu", "\n", "", "dist", ".", "init_process_group", "(", "backend", "=", "args", ".", "dist_backend", ",", "init_method", "=", "args", ".", "dist_url", ",", "\n", "world_size", "=", "args", ".", "world_size", ",", "rank", "=", "args", ".", "rank", ")", "\n", "# create model", "\n", "", "if", "args", ".", "pretrained", ":", "\n", "        ", "print", "(", "\"=> using pre-trained model '{}'\"", ".", "format", "(", "args", ".", "arch", ")", ")", "\n", "model", "=", "models", ".", "__dict__", "[", "args", ".", "arch", "]", "(", "pretrained", "=", "True", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"=> creating model '{}'\"", ".", "format", "(", "args", ".", "arch", ")", ")", "\n", "model", "=", "models", ".", "__dict__", "[", "args", ".", "arch", "]", "(", ")", "\n", "\n", "", "if", "not", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "print", "(", "'using CPU, this will be slow'", ")", "\n", "", "elif", "args", ".", "distributed", ":", "\n", "# For multiprocessing distributed, DistributedDataParallel constructor", "\n", "# should always set the single device scope, otherwise,", "\n", "# DistributedDataParallel will use all available devices.", "\n", "        ", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "            ", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "model", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "# When using a single GPU per process and per", "\n", "# DistributedDataParallel, we need to divide the batch size", "\n", "# ourselves based on the total number of GPUs we have", "\n", "args", ".", "batch_size", "=", "int", "(", "args", ".", "batch_size", "/", "ngpus_per_node", ")", "\n", "args", ".", "workers", "=", "int", "(", "(", "args", ".", "workers", "+", "ngpus_per_node", "-", "1", ")", "/", "ngpus_per_node", ")", "\n", "model", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "model", ",", "device_ids", "=", "[", "args", ".", "gpu", "]", ")", "\n", "", "else", ":", "\n", "            ", "model", ".", "cuda", "(", ")", "\n", "# DistributedDataParallel will divide and allocate batch_size to all", "\n", "# available GPUs if device_ids are not set", "\n", "model", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "model", ")", "\n", "", "", "elif", "args", ".", "gpu", "is", "not", "None", ":", "\n", "        ", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "model", "=", "model", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "", "else", ":", "\n", "# DataParallel will divide and allocate batch_size to all available GPUs", "\n", "        ", "if", "args", ".", "arch", ".", "startswith", "(", "'alexnet'", ")", "or", "args", ".", "arch", ".", "startswith", "(", "'vgg'", ")", ":", "\n", "            ", "model", ".", "features", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ".", "features", ")", "\n", "model", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "            ", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ")", ".", "cuda", "(", ")", "\n", "\n", "# define loss function (criterion) and optimizer", "\n", "", "", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "args", ".", "lr", ",", "\n", "momentum", "=", "args", ".", "momentum", ",", "\n", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "\n", "# optionally resume from a checkpoint", "\n", "if", "args", ".", "resume", ":", "\n", "        ", "if", "os", ".", "path", ".", "isfile", "(", "args", ".", "resume", ")", ":", "\n", "            ", "print", "(", "\"=> loading checkpoint '{}'\"", ".", "format", "(", "args", ".", "resume", ")", ")", "\n", "if", "args", ".", "gpu", "is", "None", ":", "\n", "                ", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "resume", ")", "\n", "", "else", ":", "\n", "# Map model to be loaded to specified single gpu.", "\n", "                ", "loc", "=", "'cuda:{}'", ".", "format", "(", "args", ".", "gpu", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "resume", ",", "map_location", "=", "loc", ")", "\n", "", "args", ".", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "best_acc1", "=", "checkpoint", "[", "'best_acc1'", "]", "\n", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "# best_acc1 may be from a checkpoint from a different GPU", "\n", "                ", "best_acc1", "=", "best_acc1", ".", "to", "(", "args", ".", "gpu", ")", "\n", "", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "print", "(", "\"=> loaded checkpoint '{}' (epoch {})\"", "\n", ".", "format", "(", "args", ".", "resume", ",", "checkpoint", "[", "'epoch'", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"=> no checkpoint found at '{}'\"", ".", "format", "(", "args", ".", "resume", ")", ")", "\n", "\n", "", "", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "# Data loading code", "\n", "traindir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data", ",", "'train'", ")", "\n", "valdir", "=", "args", ".", "data", "\n", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "\n", "train_dataset", "=", "datasets", ".", "ImageFolder", "(", "\n", "traindir", ",", "\n", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "224", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", ")", "\n", "\n", "if", "args", ".", "distributed", ":", "\n", "        ", "train_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "train_dataset", ")", "\n", "", "else", ":", "\n", "        ", "train_sampler", "=", "None", "\n", "\n", "", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "(", "train_sampler", "is", "None", ")", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ",", "sampler", "=", "train_sampler", ")", "\n", "\n", "val_dataset", "=", "robusta", ".", "datasets", ".", "ImageNetC", "(", "root", "=", "valdir", ",", "\n", "corruptions", "=", "\"zoom_blur\"", ",", "\n", "severities", "=", "1", ",", "\n", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", "\n", ")", "\n", "\n", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "val_dataset", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ")", "\n", "\n", "if", "args", ".", "evaluate", ":", "\n", "        ", "validate", "(", "val_loader", ",", "model", ",", "criterion", ",", "args", ")", "\n", "return", "\n", "\n", "", "for", "epoch", "in", "range", "(", "args", ".", "start_epoch", ",", "args", ".", "epochs", ")", ":", "\n", "        ", "if", "args", ".", "distributed", ":", "\n", "            ", "train_sampler", ".", "set_epoch", "(", "epoch", ")", "\n", "", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ",", "args", ")", "\n", "\n", "# train for one epoch", "\n", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "args", ")", "\n", "\n", "# evaluate on validation set", "\n", "acc1", "=", "validate", "(", "val_loader", ",", "model", ",", "criterion", ",", "args", ")", "\n", "\n", "# remember best acc@1 and save checkpoint", "\n", "is_best", "=", "acc1", ">", "best_acc1", "\n", "best_acc1", "=", "max", "(", "acc1", ",", "best_acc1", ")", "\n", "\n", "if", "not", "args", ".", "multiprocessing_distributed", "or", "(", "args", ".", "multiprocessing_distributed", "\n", "and", "args", ".", "rank", "%", "ngpus_per_node", "==", "0", ")", ":", "\n", "            ", "save_checkpoint", "(", "{", "\n", "'epoch'", ":", "epoch", "+", "1", ",", "\n", "'arch'", ":", "args", ".", "arch", ",", "\n", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'best_acc1'", ":", "best_acc1", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "}", ",", "is_best", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.robustness_eval.main.train": [[272, 317], ["main.AverageMeter", "main.AverageMeter", "main.AverageMeter", "main.AverageMeter", "main.AverageMeter", "main.ProgressMeter", "model.train", "time.time", "enumerate", "len", "main.AverageMeter.update", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "model", "criterion", "main.accuracy", "main.AverageMeter.update", "main.AverageMeter.update", "main.AverageMeter.update", "optimizer.zero_grad", "criterion.backward", "optimizer.step", "main.AverageMeter.update", "time.time", "images.cuda.cuda", "target.cuda.cuda", "criterion.item", "images.cuda.size", "images.cuda.size", "images.cuda.size", "main.ProgressMeter.display", "time.time", "time.time"], "function", ["home.repos.pwc.inspect_result.bethgelab_robustness.robustness_eval.main.train", "home.repos.pwc.inspect_result.bethgelab_robustness.src.meters.AverageMeter.update", "home.repos.pwc.inspect_result.bethgelab_robustness.imagenet_d.main.accuracy", "home.repos.pwc.inspect_result.bethgelab_robustness.src.meters.AverageMeter.update", "home.repos.pwc.inspect_result.bethgelab_robustness.src.meters.AverageMeter.update", "home.repos.pwc.inspect_result.bethgelab_robustness.src.meters.AverageMeter.update", "home.repos.pwc.inspect_result.bethgelab_robustness.src.meters.AverageMeter.update", "home.repos.pwc.inspect_result.bethgelab_robustness.src.meters.ProgressMeter.display"], ["", "", "", "def", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "args", ")", ":", "\n", "    ", "batch_time", "=", "AverageMeter", "(", "'Time'", ",", "':6.3f'", ")", "\n", "data_time", "=", "AverageMeter", "(", "'Data'", ",", "':6.3f'", ")", "\n", "losses", "=", "AverageMeter", "(", "'Loss'", ",", "':.4e'", ")", "\n", "top1", "=", "AverageMeter", "(", "'Acc@1'", ",", "':6.2f'", ")", "\n", "top5", "=", "AverageMeter", "(", "'Acc@5'", ",", "':6.2f'", ")", "\n", "progress", "=", "ProgressMeter", "(", "\n", "len", "(", "train_loader", ")", ",", "\n", "[", "batch_time", ",", "data_time", ",", "losses", ",", "top1", ",", "top5", "]", ",", "\n", "prefix", "=", "\"Epoch: [{}]\"", ".", "format", "(", "epoch", ")", ")", "\n", "\n", "# switch to train mode", "\n", "model", ".", "train", "(", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "i", ",", "(", "images", ",", "target", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "# measure data loading time", "\n", "        ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "            ", "images", "=", "images", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "target", "=", "target", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "\n", "# compute output", "\n", "", "output", "=", "model", "(", "images", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "\n", "# measure accuracy and record loss", "\n", "acc1", ",", "acc5", "=", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "images", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "acc1", "[", "0", "]", ",", "images", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "acc5", "[", "0", "]", ",", "images", ".", "size", "(", "0", ")", ")", "\n", "\n", "# compute gradient and do SGD step", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "i", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "            ", "progress", ".", "display", "(", "i", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.robustness_eval.main.validate": [[319, 363], ["main.AverageMeter", "main.AverageMeter", "main.AverageMeter", "main.AverageMeter", "main.ProgressMeter", "model.eval", "len", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "time.time", "enumerate", "print", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "model", "criterion", "val_accuracy", "main.AverageMeter.update", "main.AverageMeter.update", "main.AverageMeter.update", "main.AverageMeter.update", "time.time", "images.cuda.cuda", "target.cuda.cuda", "criterion.item", "images.cuda.size", "images.cuda.size", "images.cuda.size", "main.ProgressMeter.display", "time.time"], "function", ["home.repos.pwc.inspect_result.bethgelab_robustness.src.meters.AverageMeter.update", "home.repos.pwc.inspect_result.bethgelab_robustness.src.meters.AverageMeter.update", "home.repos.pwc.inspect_result.bethgelab_robustness.src.meters.AverageMeter.update", "home.repos.pwc.inspect_result.bethgelab_robustness.src.meters.AverageMeter.update", "home.repos.pwc.inspect_result.bethgelab_robustness.src.meters.ProgressMeter.display"], ["", "", "", "def", "validate", "(", "val_loader", ",", "model", ",", "criterion", ",", "args", ")", ":", "\n", "    ", "batch_time", "=", "AverageMeter", "(", "'Time'", ",", "':6.3f'", ")", "\n", "losses", "=", "AverageMeter", "(", "'Loss'", ",", "':.4e'", ")", "\n", "top1", "=", "AverageMeter", "(", "'Acc@1'", ",", "':6.2f'", ")", "\n", "top5", "=", "AverageMeter", "(", "'Acc@5'", ",", "':6.2f'", ")", "\n", "progress", "=", "ProgressMeter", "(", "\n", "len", "(", "val_loader", ")", ",", "\n", "[", "batch_time", ",", "losses", ",", "top1", ",", "top5", "]", ",", "\n", "prefix", "=", "'Test: '", ")", "\n", "\n", "# switch to evaluate mode", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "i", ",", "(", "images", ",", "target", ")", "in", "enumerate", "(", "val_loader", ")", ":", "\n", "            ", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "                ", "images", "=", "images", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                ", "target", "=", "target", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "\n", "# compute output", "\n", "", "output", "=", "model", "(", "images", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "\n", "# measure accuracy and record loss", "\n", "acc1", ",", "acc5", "=", "val_accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "images", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "acc1", "[", "0", "]", ",", "images", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "acc5", "[", "0", "]", ",", "images", ".", "size", "(", "0", ")", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "i", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "                ", "progress", ".", "display", "(", "i", ")", "\n", "\n", "# TODO: this should also be done with the ProgressMeter", "\n", "", "", "print", "(", "' * Acc@1 {top1.avg:.3f} Acc@5 {top5.avg:.3f}'", "\n", ".", "format", "(", "top1", "=", "top1", ",", "top5", "=", "top5", ")", ")", "\n", "\n", "", "return", "top1", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.robustness_eval.main.save_checkpoint": [[365, 369], ["torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "shutil.copyfile"], "function", ["home.repos.pwc.inspect_result.bethgelab_robustness.src.evaluate.Emissions.save", "home.repos.pwc.inspect_result.bethgelab_robustness.src.evaluate.Emissions.save", "home.repos.pwc.inspect_result.bethgelab_robustness.src.evaluate.Emissions.save", "home.repos.pwc.inspect_result.bethgelab_robustness.src.evaluate.Emissions.save", "home.repos.pwc.inspect_result.bethgelab_robustness.src.evaluate.Emissions.save", "home.repos.pwc.inspect_result.bethgelab_robustness.src.evaluate.Emissions.save", "home.repos.pwc.inspect_result.bethgelab_robustness.src.evaluate.Emissions.save", "home.repos.pwc.inspect_result.bethgelab_robustness.src.evaluate.Emissions.save", "home.repos.pwc.inspect_result.bethgelab_robustness.src.evaluate.Emissions.save"], ["", "def", "save_checkpoint", "(", "state", ",", "is_best", ",", "filename", "=", "'checkpoint.pth.tar'", ")", ":", "\n", "    ", "torch", ".", "save", "(", "state", ",", "filename", ")", "\n", "if", "is_best", ":", "\n", "        ", "shutil", ".", "copyfile", "(", "filename", ",", "'model_best.pth.tar'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.robustness_eval.main.adjust_learning_rate": [[412, 417], ["None"], "function", ["None"], ["", "", "def", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ",", "args", ")", ":", "\n", "    ", "\"\"\"Sets the learning rate to the initial LR decayed by 10 every 30 epochs\"\"\"", "\n", "lr", "=", "args", ".", "lr", "*", "(", "0.1", "**", "(", "epoch", "//", "30", ")", ")", "\n", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.robustness_eval.main.accuracy": [[419, 434], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].reshape().float().sum", "res.append", "correct[].reshape().float().sum.mul_", "target.view", "correct[].reshape().float", "correct[].reshape"], "function", ["home.repos.pwc.inspect_result.bethgelab_robustness.src.evaluate.Emissions.append"], ["", "", "def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"Computes the accuracy over the k top predictions for the specified values of k\"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "            ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "reshape", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ",", "keepdim", "=", "True", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.selflearning.main.get_dataset_loader": [[48, 60], ["torchvision.datasets.ImageFolder", "torch.utils.data.DataLoader", "torchvision.transforms.Compose", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize"], "function", ["None"], ["metavar", "=", "'LR'", ",", "help", "=", "'initial learning rate'", ",", "dest", "=", "'lr'", ")", "\n", "parser", ".", "add_argument", "(", "'--momentum'", ",", "default", "=", "0.9", ",", "type", "=", "float", ",", "metavar", "=", "'M'", ",", "\n", "help", "=", "'momentum'", ")", "\n", "parser", ".", "add_argument", "(", "'--wd'", ",", "'--weight-decay'", ",", "default", "=", "1e-4", ",", "type", "=", "float", ",", "\n", "metavar", "=", "'W'", ",", "help", "=", "'weight decay (default: 1e-4)'", ",", "\n", "dest", "=", "'weight_decay'", ")", "\n", "parser", ".", "add_argument", "(", "'-p'", ",", "'--print-freq'", ",", "default", "=", "10", ",", "type", "=", "int", ",", "\n", "metavar", "=", "'N'", ",", "help", "=", "'print frequency (default: 10)'", ")", "\n", "parser", ".", "add_argument", "(", "'--resume'", ",", "default", "=", "''", ",", "type", "=", "str", ",", "metavar", "=", "'PATH'", ",", "\n", "help", "=", "'path to latest checkpoint (default: none)'", ")", "\n", "parser", ".", "add_argument", "(", "'-e'", ",", "'--evaluate'", ",", "dest", "=", "'evaluate'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'evaluate model on validation set'", ")", "\n", "parser", ".", "add_argument", "(", "'--pretrained'", ",", "dest", "=", "'pretrained'", ",", "action", "=", "'store_true'", ",", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.selflearning.main.gce": [[61, 70], ["torch.nn.functional.softmax", "torch.nn.functional.softmax.index_select().diag", "loss.mean", "torch.nn.functional.softmax.index_select"], "function", ["None"], ["help", "=", "'use pre-trained model'", ")", "\n", "parser", ".", "add_argument", "(", "'--world-size'", ",", "default", "=", "-", "1", ",", "type", "=", "int", ",", "\n", "help", "=", "'number of nodes for distributed training'", ")", "\n", "parser", ".", "add_argument", "(", "'--rank'", ",", "default", "=", "-", "1", ",", "type", "=", "int", ",", "\n", "help", "=", "'node rank for distributed training'", ")", "\n", "parser", ".", "add_argument", "(", "'--dist-url'", ",", "default", "=", "'tcp://224.66.41.62:23456'", ",", "type", "=", "str", ",", "\n", "help", "=", "'url used to set up distributed training'", ")", "\n", "parser", ".", "add_argument", "(", "'--dist-backend'", ",", "default", "=", "'nccl'", ",", "type", "=", "str", ",", "\n", "help", "=", "'distributed backend'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "default", "=", "None", ",", "type", "=", "int", ",", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.selflearning.main.adapt_batchnorm": [[71, 79], ["model.eval", "model.modules", "isinstance", "parameters.extend", "module.train", "module.parameters"], "function", ["home.repos.pwc.inspect_result.bethgelab_robustness.robustness_eval.main.train"], ["help", "=", "'seed for initializing training. '", ")", "\n", "parser", ".", "add_argument", "(", "'--gpu'", ",", "default", "=", "None", ",", "type", "=", "int", ",", "\n", "help", "=", "'GPU id to use.'", ")", "\n", "parser", ".", "add_argument", "(", "'--multiprocessing-distributed'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Use multi-processing distributed training to launch '", "\n", "'N processes per node, which has N GPUs. This is the '", "\n", "'fastest way to use PyTorch for either single node or '", "\n", "'multi node data parallel training'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.selflearning.main.evaluate": [[83, 118], ["torchvision.models.resnet50().cuda", "main.adapt_batchnorm", "main.get_dataset_loader", "torch.optim.SGD", "range", "models.resnet50().cuda.parameters", "torchvision.models.resnet50", "models.resnet50().cuda.", "model.argmax", "main.gce", "torch.optim.SGD.zero_grad", "gce.backward", "torch.optim.SGD.step", "len", "print", "images.cuda", "logits.argmax.detach().cpu", "logits.argmax.detach"], "function", ["home.repos.pwc.inspect_result.bethgelab_robustness.selflearning.main.adapt_batchnorm", "home.repos.pwc.inspect_result.bethgelab_robustness.selflearning.main.get_dataset_loader", "home.repos.pwc.inspect_result.bethgelab_robustness.models.resnet_gn.resnet50", "home.repos.pwc.inspect_result.bethgelab_robustness.selflearning.functional.gce"], ["def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "if", "args", ".", "seed", "is", "not", "None", ":", "\n", "        ", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "cudnn", ".", "deterministic", "=", "True", "\n", "warnings", ".", "warn", "(", "'You have chosen to seed training. '", "\n", "'This will turn on the CUDNN deterministic setting, '", "\n", "'which can slow down your training considerably! '", "\n", "'You may see unexpected behavior when restarting '", "\n", "'from checkpoints.'", ")", "\n", "\n", "", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "        ", "warnings", ".", "warn", "(", "'You have chosen a specific GPU. This will completely '", "\n", "'disable data parallelism.'", ")", "\n", "\n", "", "if", "args", ".", "dist_url", "==", "\"env://\"", "and", "args", ".", "world_size", "==", "-", "1", ":", "\n", "        ", "args", ".", "world_size", "=", "int", "(", "os", ".", "environ", "[", "\"WORLD_SIZE\"", "]", ")", "\n", "\n", "", "args", ".", "distributed", "=", "args", ".", "world_size", ">", "1", "or", "args", ".", "multiprocessing_distributed", "\n", "\n", "ngpus_per_node", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "if", "args", ".", "multiprocessing_distributed", ":", "\n", "# Since we have ngpus_per_node processes per node, the total world_size", "\n", "# needs to be adjusted accordingly", "\n", "        ", "args", ".", "world_size", "=", "ngpus_per_node", "*", "args", ".", "world_size", "\n", "# Use torch.multiprocessing.spawn to launch distributed processes: the", "\n", "# main_worker process function", "\n", "mp", ".", "spawn", "(", "main_worker", ",", "nprocs", "=", "ngpus_per_node", ",", "args", "=", "(", "ngpus_per_node", ",", "args", ")", ")", "\n", "", "else", ":", "\n", "# Simply call main_worker function", "\n", "        ", "main_worker", "(", "args", ".", "gpu", ",", "ngpus_per_node", ",", "args", ")", "\n", "\n", "\n", "", "", "def", "main_worker", "(", "gpu", ",", "ngpus_per_node", ",", "args", ")", ":", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.selflearning.nn.GeneralizedCrossEntropy.__init__": [[26, 29], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.bethgelab_robustness.batchnorm.bn.BayesianBatchNorm.__init__"], ["    ", "def", "__init__", "(", "self", ",", "q", "=", "0.8", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "q", "=", "q", "\n", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.selflearning.nn.GeneralizedCrossEntropy.forward": [[30, 34], ["robusta.gce", "logits.argmax"], "methods", ["home.repos.pwc.inspect_result.bethgelab_robustness.selflearning.functional.gce"], ["", "def", "forward", "(", "self", ",", "logits", ",", "target", "=", "None", ")", ":", "\n", "        ", "if", "target", "is", "None", ":", "\n", "            ", "target", "=", "logits", ".", "argmax", "(", "dim", "=", "1", ")", "\n", "", "return", "RF", ".", "gce", "(", "logits", ",", "target", ",", "self", ".", "q", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.selflearning.nn.EntropyLoss.__init__": [[37, 40], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.bethgelab_robustness.batchnorm.bn.BayesianBatchNorm.__init__"], ["    ", "def", "__init__", "(", "self", ",", "stop_teacher_gradient", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stop_teacher_gradient", "=", "stop_teacher_gradient", "\n", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.selflearning.nn.EntropyLoss.forward": [[41, 47], ["robusta.entropy", "target.detach.detach.detach"], "methods", ["home.repos.pwc.inspect_result.bethgelab_robustness.selflearning.functional.entropy"], ["", "def", "forward", "(", "self", ",", "logits", ",", "target", "=", "None", ")", ":", "\n", "        ", "if", "target", "is", "None", ":", "\n", "            ", "target", "=", "logits", "\n", "", "if", "self", ".", "top_teacher_gradient", ":", "\n", "            ", "target", "=", "target", ".", "detach", "(", ")", "\n", "", "return", "RF", ".", "entropy", "(", "logits", ",", "target", ",", "self", ".", "q", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.bethgelab_robustness.selflearning.functional.gce": [[23, 32], ["torch.softmax", "F.softmax.index_select().diag", "loss.mean", "F.softmax.index_select"], "function", ["None"], ["def", "gce", "(", "logits", ",", "target", ",", "q", "=", "0.8", ")", ":", "\n", "    ", "\"\"\" Generalized cross entropy.\n    \n    Reference: https://arxiv.org/abs/1805.07836\n    \"\"\"", "\n", "probs", "=", "F", ".", "softmax", "(", "logits", ",", "dim", "=", "1", ")", "\n", "probs_with_correct_idx", "=", "probs", ".", "index_select", "(", "-", "1", ",", "target", ")", ".", "diag", "(", ")", "\n", "loss", "=", "(", "1.", "-", "probs_with_correct_idx", "**", "q", ")", "/", "q", "\n", "return", "loss", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.selflearning.functional.entropy": [[33, 40], ["torch.log_softmax", "torch.softmax"], "function", ["None"], ["", "def", "entropy", "(", "logits", ",", "target", ",", "q", "=", "0.8", ")", ":", "\n", "    ", "\"\"\" Entropy.\n    \n    \"\"\"", "\n", "log_probs", "=", "F", ".", "log_softmax", "(", "logits", ",", "dim", "=", "1", ")", "\n", "probs", "=", "F", ".", "softmax", "(", "logits", ",", "dim", "=", "1", ")", "\n", "return", "-", "(", "probs", "*", "log_probs", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", ".", "mean", "(", ")", "", "", ""]], "home.repos.pwc.inspect_result.bethgelab_robustness.selflearning.__init__._iter_params": [[28, 33], ["model.modules", "isinstance", "module.parameters"], "function", ["None"], []], "home.repos.pwc.inspect_result.bethgelab_robustness.selflearning.__init__.adapt": [[35, 39], ["iter", "ValueError", "__init__._iter_params"], "function", ["home.repos.pwc.inspect_result.bethgelab_robustness.selflearning.__init__._iter_params"], []], "home.repos.pwc.inspect_result.bethgelab_robustness.imagenet_d.main.AverageMeter.__init__": [[309, 313], ["main.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.bethgelab_robustness.batchnorm.bn.PartlyAdaptiveBN.reset"], ["optimizer", ".", "step", "(", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.imagenet_d.main.AverageMeter.reset": [[314, 319], ["None"], "methods", ["None"], ["\n", "if", "i", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "            ", "progress", ".", "display", "(", "i", ")", "\n", "\n", "\n", "", "", "", "def", "validate", "(", "val_loader", ",", "model", ",", "criterion", ",", "args", ")", ":", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.imagenet_d.main.AverageMeter.update": [[320, 325], ["None"], "methods", ["None"], ["    ", "batch_time", "=", "AverageMeter", "(", "'Time'", ",", "':6.3f'", ")", "\n", "losses", "=", "AverageMeter", "(", "'Loss'", ",", "':.4e'", ")", "\n", "top1", "=", "AverageMeter", "(", "'Acc@1'", ",", "':6.2f'", ")", "\n", "top5", "=", "AverageMeter", "(", "'Acc@5'", ",", "':6.2f'", ")", "\n", "progress", "=", "ProgressMeter", "(", "\n", "len", "(", "val_loader", ")", ",", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.imagenet_d.main.AverageMeter.__str__": [[326, 329], ["fmtstr.format"], "methods", ["None"], ["[", "batch_time", ",", "losses", ",", "top1", ",", "top5", "]", ",", "\n", "prefix", "=", "'Test: '", ")", "\n", "\n", "# switch to evaluate mode", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.imagenet_d.main.ProgressMeter.__init__": [[332, 336], ["main.ProgressMeter._get_batch_fmtstr"], "methods", ["home.repos.pwc.inspect_result.bethgelab_robustness.src.meters.ProgressMeter._get_batch_fmtstr"], ["\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "i", ",", "(", "images", ",", "target", ")", "in", "enumerate", "(", "val_loader", ")", ":", "\n", "            ", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.imagenet_d.main.ProgressMeter.display": [[337, 341], ["print", "str", "main.ProgressMeter.batch_fmtstr.format"], "methods", ["None"], ["                ", "images", "=", "images", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                ", "target", "=", "target", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "\n", "# compute output", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.imagenet_d.main.ProgressMeter._get_batch_fmtstr": [[342, 346], ["len", "str", "str", "fmt.format"], "methods", ["None"], ["", "output", "=", "model", "(", "images", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "\n", "# measure accuracy and record loss", "\n", "acc1", ",", "acc5", "=", "val_accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.imagenet_d.main.use_train_statistics": [[81, 84], ["isinstance", "module.train"], "function", ["home.repos.pwc.inspect_result.bethgelab_robustness.robustness_eval.main.train"], ["\n", "\n", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parser", ".", "parse_args", "(", ")", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.imagenet_d.main.main": [[88, 122], ["parser.parse_args", "print", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "warnings.warn", "warnings.warn", "int", "torch.spawn", "main.main_worker"], "function", ["home.repos.pwc.inspect_result.bethgelab_robustness.src.config.parse_args", "home.repos.pwc.inspect_result.bethgelab_robustness.src.evaluate.main_worker"], ["torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "cudnn", ".", "deterministic", "=", "True", "\n", "warnings", ".", "warn", "(", "'You have chosen to seed training. '", "\n", "'This will turn on the CUDNN deterministic setting, '", "\n", "'which can slow down your training considerably! '", "\n", "'You may see unexpected behavior when restarting '", "\n", "'from checkpoints.'", ")", "\n", "\n", "", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "        ", "warnings", ".", "warn", "(", "'You have chosen a specific GPU. This will completely '", "\n", "'disable data parallelism.'", ")", "\n", "\n", "", "if", "args", ".", "dist_url", "==", "\"env://\"", "and", "args", ".", "world_size", "==", "-", "1", ":", "\n", "        ", "args", ".", "world_size", "=", "int", "(", "os", ".", "environ", "[", "\"WORLD_SIZE\"", "]", ")", "\n", "\n", "", "args", ".", "distributed", "=", "args", ".", "world_size", ">", "1", "or", "args", ".", "multiprocessing_distributed", "\n", "\n", "ngpus_per_node", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "if", "args", ".", "multiprocessing_distributed", ":", "\n", "# Since we have ngpus_per_node processes per node, the total world_size", "\n", "# needs to be adjusted accordingly", "\n", "        ", "args", ".", "world_size", "=", "ngpus_per_node", "*", "args", ".", "world_size", "\n", "# Use torch.multiprocessing.spawn to launch distributed processes: the", "\n", "# main_worker process function", "\n", "mp", ".", "spawn", "(", "main_worker", ",", "nprocs", "=", "ngpus_per_node", ",", "args", "=", "(", "ngpus_per_node", ",", "args", ")", ")", "\n", "", "else", ":", "\n", "# Simply call main_worker function", "\n", "        ", "main_worker", "(", "args", ".", "gpu", ",", "ngpus_per_node", ",", "args", ")", "\n", "\n", "\n", "", "", "def", "main_worker", "(", "gpu", ",", "ngpus_per_node", ",", "args", ")", ":", "\n", "    ", "global", "best_acc1", "\n", "args", ".", "gpu", "=", "gpu", "\n", "\n", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.imagenet_d.main.main_worker": [[124, 253], ["torch.CrossEntropyLoss().cuda", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "map_files.create_symlinks_and_get_imagenet_visda_mapping", "torchvision.Normalize", "torchvision.ImageFolder", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "print", "print", "range", "print", "torch.init_process_group", "print", "print", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "print", "torch.nn.DataParallel().cuda.parameters", "os.path.isfile", "torchvision.Compose", "len", "len", "main.validate", "main.adjust_learning_rate", "main.validate", "max", "int", "torch.CrossEntropyLoss", "print", "torch.nn.DataParallel().cuda.load_state_dict", "torch.optim.SGD.load_state_dict", "print", "print", "main.save_checkpoint", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.nn.DataParallel().cuda.cuda", "int", "int", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.DataParallel().cuda.cuda", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.nn.DataParallel().cuda.cuda", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "best_acc1.to.to", "args.data.split", "torchvision.Resize", "torchvision.CenterCrop", "torchvision.ToTensor", "args.arch.startswith", "args.arch.startswith", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel().cuda.cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda.state_dict", "torch.optim.SGD.state_dict", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel"], "function", ["home.repos.pwc.inspect_result.bethgelab_robustness.imagenet_d.map_files.create_symlinks_and_get_imagenet_visda_mapping", "home.repos.pwc.inspect_result.bethgelab_robustness.imagenet_d.main.validate", "home.repos.pwc.inspect_result.bethgelab_robustness.imagenet_d.main.adjust_learning_rate", "home.repos.pwc.inspect_result.bethgelab_robustness.imagenet_d.main.validate", "home.repos.pwc.inspect_result.bethgelab_robustness.imagenet_d.main.save_checkpoint"], ["\n", "", "if", "args", ".", "distributed", ":", "\n", "        ", "if", "args", ".", "dist_url", "==", "\"env://\"", "and", "args", ".", "rank", "==", "-", "1", ":", "\n", "            ", "args", ".", "rank", "=", "int", "(", "os", ".", "environ", "[", "\"RANK\"", "]", ")", "\n", "", "if", "args", ".", "multiprocessing_distributed", ":", "\n", "# For multiprocessing distributed training, rank needs to be the", "\n", "# global rank among all the processes", "\n", "            ", "args", ".", "rank", "=", "args", ".", "rank", "*", "ngpus_per_node", "+", "gpu", "\n", "", "dist", ".", "init_process_group", "(", "backend", "=", "args", ".", "dist_backend", ",", "init_method", "=", "args", ".", "dist_url", ",", "\n", "world_size", "=", "args", ".", "world_size", ",", "rank", "=", "args", ".", "rank", ")", "\n", "# create model", "\n", "", "if", "args", ".", "pretrained", ":", "\n", "        ", "print", "(", "\"=> using pre-trained model '{}'\"", ".", "format", "(", "args", ".", "arch", ")", ")", "\n", "model", "=", "models", ".", "__dict__", "[", "args", ".", "arch", "]", "(", "pretrained", "=", "True", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"=> creating model '{}'\"", ".", "format", "(", "args", ".", "arch", ")", ")", "\n", "model", "=", "models", ".", "__dict__", "[", "args", ".", "arch", "]", "(", ")", "\n", "\n", "", "if", "not", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "print", "(", "'using CPU, this will be slow'", ")", "\n", "", "elif", "args", ".", "distributed", ":", "\n", "# For multiprocessing distributed, DistributedDataParallel constructor", "\n", "# should always set the single device scope, otherwise,", "\n", "# DistributedDataParallel will use all available devices.", "\n", "        ", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "            ", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "model", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "# When using a single GPU per process and per", "\n", "# DistributedDataParallel, we need to divide the batch size", "\n", "# ourselves based on the total number of GPUs we have", "\n", "args", ".", "batch_size", "=", "int", "(", "args", ".", "batch_size", "/", "ngpus_per_node", ")", "\n", "args", ".", "workers", "=", "int", "(", "(", "args", ".", "workers", "+", "ngpus_per_node", "-", "1", ")", "/", "ngpus_per_node", ")", "\n", "model", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "model", ",", "device_ids", "=", "[", "args", ".", "gpu", "]", ")", "\n", "", "else", ":", "\n", "            ", "model", ".", "cuda", "(", ")", "\n", "# DistributedDataParallel will divide and allocate batch_size to all", "\n", "# available GPUs if device_ids are not set", "\n", "model", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "model", ")", "\n", "", "", "elif", "args", ".", "gpu", "is", "not", "None", ":", "\n", "        ", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "model", "=", "model", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "", "else", ":", "\n", "# DataParallel will divide and allocate batch_size to all available GPUs", "\n", "        ", "if", "args", ".", "arch", ".", "startswith", "(", "'alexnet'", ")", "or", "args", ".", "arch", ".", "startswith", "(", "'vgg'", ")", ":", "\n", "            ", "model", ".", "features", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ".", "features", ")", "\n", "model", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "            ", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ")", ".", "cuda", "(", ")", "\n", "\n", "# define loss function (criterion) and optimizer", "\n", "", "", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "args", ".", "lr", ",", "\n", "momentum", "=", "args", ".", "momentum", ",", "\n", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "\n", "# optionally resume from a checkpoint", "\n", "if", "args", ".", "resume", ":", "\n", "        ", "if", "os", ".", "path", ".", "isfile", "(", "args", ".", "resume", ")", ":", "\n", "            ", "print", "(", "\"=> loading checkpoint '{}'\"", ".", "format", "(", "args", ".", "resume", ")", ")", "\n", "if", "args", ".", "gpu", "is", "None", ":", "\n", "                ", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "resume", ")", "\n", "", "else", ":", "\n", "# Map model to be loaded to specified single gpu.", "\n", "                ", "loc", "=", "'cuda:{}'", ".", "format", "(", "args", ".", "gpu", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "resume", ",", "map_location", "=", "loc", ")", "\n", "", "args", ".", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "best_acc1", "=", "checkpoint", "[", "'best_acc1'", "]", "\n", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "# best_acc1 may be from a checkpoint from a different GPU", "\n", "                ", "best_acc1", "=", "best_acc1", ".", "to", "(", "args", ".", "gpu", ")", "\n", "", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "print", "(", "\"=> loaded checkpoint '{}' (epoch {})\"", "\n", ".", "format", "(", "args", ".", "resume", ",", "checkpoint", "[", "'epoch'", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"=> no checkpoint found at '{}'\"", ".", "format", "(", "args", ".", "resume", ")", ")", "\n", "\n", "", "", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "# Data loading code", "\n", "traindir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data", ",", "'train'", ")", "\n", "valdir", "=", "args", ".", "data", "\n", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "\n", "train_dataset", "=", "datasets", ".", "ImageFolder", "(", "\n", "traindir", ",", "\n", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "224", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", ")", "\n", "\n", "if", "args", ".", "distributed", ":", "\n", "        ", "train_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "train_dataset", ")", "\n", "", "else", ":", "\n", "        ", "train_sampler", "=", "None", "\n", "\n", "", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "(", "train_sampler", "is", "None", ")", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ",", "sampler", "=", "train_sampler", ")", "\n", "\n", "val_dataset", "=", "robusta", ".", "datasets", ".", "ImageNetC", "(", "root", "=", "valdir", ",", "\n", "corruptions", "=", "\"zoom_blur\"", ",", "\n", "severities", "=", "1", ",", "\n", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", "\n", ")", "\n", "\n", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "val_dataset", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ")", "\n", "\n", "if", "args", ".", "evaluate", ":", "\n", "        ", "validate", "(", "val_loader", ",", "model", ",", "criterion", ",", "args", ")", "\n", "return", "\n", "\n", "", "for", "epoch", "in", "range", "(", "args", ".", "start_epoch", ",", "args", ".", "epochs", ")", ":", "\n", "        ", "if", "args", ".", "distributed", ":", "\n", "            ", "train_sampler", ".", "set_epoch", "(", "epoch", ")", "\n", "", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ",", "args", ")", "\n", "\n", "# train for one epoch", "\n", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.imagenet_d.main.validate": [[255, 299], ["main.AverageMeter", "main.AverageMeter", "main.AverageMeter", "main.ProgressMeter", "model.eval", "len", "model.apply", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "time.time", "enumerate", "print", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "model", "main.accuracy", "main.AverageMeter.update", "main.AverageMeter.update", "main.AverageMeter.update", "time.time", "images.cuda.cuda", "target.cuda.cuda", "acc[].item", "images.cuda.size", "acc[].item", "images.cuda.size", "main.ProgressMeter.display", "time.time"], "function", ["home.repos.pwc.inspect_result.bethgelab_robustness.imagenet_d.main.accuracy", "home.repos.pwc.inspect_result.bethgelab_robustness.src.meters.AverageMeter.update", "home.repos.pwc.inspect_result.bethgelab_robustness.src.meters.AverageMeter.update", "home.repos.pwc.inspect_result.bethgelab_robustness.src.meters.AverageMeter.update", "home.repos.pwc.inspect_result.bethgelab_robustness.src.meters.ProgressMeter.display"], ["acc1", "=", "validate", "(", "val_loader", ",", "model", ",", "criterion", ",", "args", ")", "\n", "\n", "# remember best acc@1 and save checkpoint", "\n", "is_best", "=", "acc1", ">", "best_acc1", "\n", "best_acc1", "=", "max", "(", "acc1", ",", "best_acc1", ")", "\n", "\n", "if", "not", "args", ".", "multiprocessing_distributed", "or", "(", "args", ".", "multiprocessing_distributed", "\n", "and", "args", ".", "rank", "%", "ngpus_per_node", "==", "0", ")", ":", "\n", "            ", "save_checkpoint", "(", "{", "\n", "'epoch'", ":", "epoch", "+", "1", ",", "\n", "'arch'", ":", "args", ".", "arch", ",", "\n", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'best_acc1'", ":", "best_acc1", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "}", ",", "is_best", ")", "\n", "\n", "\n", "", "", "", "def", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "args", ")", ":", "\n", "    ", "batch_time", "=", "AverageMeter", "(", "'Time'", ",", "':6.3f'", ")", "\n", "data_time", "=", "AverageMeter", "(", "'Data'", ",", "':6.3f'", ")", "\n", "losses", "=", "AverageMeter", "(", "'Loss'", ",", "':.4e'", ")", "\n", "top1", "=", "AverageMeter", "(", "'Acc@1'", ",", "':6.2f'", ")", "\n", "top5", "=", "AverageMeter", "(", "'Acc@5'", ",", "':6.2f'", ")", "\n", "progress", "=", "ProgressMeter", "(", "\n", "len", "(", "train_loader", ")", ",", "\n", "[", "batch_time", ",", "data_time", ",", "losses", ",", "top1", ",", "top5", "]", ",", "\n", "prefix", "=", "\"Epoch: [{}]\"", ".", "format", "(", "epoch", ")", ")", "\n", "\n", "# switch to train mode", "\n", "model", ".", "train", "(", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "i", ",", "(", "images", ",", "target", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "# measure data loading time", "\n", "        ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "            ", "images", "=", "images", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "target", "=", "target", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "\n", "# compute output", "\n", "", "output", "=", "model", "(", "images", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.imagenet_d.main.save_checkpoint": [[301, 305], ["torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "shutil.copyfile"], "function", ["home.repos.pwc.inspect_result.bethgelab_robustness.src.evaluate.Emissions.save", "home.repos.pwc.inspect_result.bethgelab_robustness.src.evaluate.Emissions.save", "home.repos.pwc.inspect_result.bethgelab_robustness.src.evaluate.Emissions.save", "home.repos.pwc.inspect_result.bethgelab_robustness.src.evaluate.Emissions.save", "home.repos.pwc.inspect_result.bethgelab_robustness.src.evaluate.Emissions.save", "home.repos.pwc.inspect_result.bethgelab_robustness.src.evaluate.Emissions.save", "home.repos.pwc.inspect_result.bethgelab_robustness.src.evaluate.Emissions.save", "home.repos.pwc.inspect_result.bethgelab_robustness.src.evaluate.Emissions.save", "home.repos.pwc.inspect_result.bethgelab_robustness.src.evaluate.Emissions.save"], ["acc1", ",", "acc5", "=", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "images", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "acc1", "[", "0", "]", ",", "images", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "acc5", "[", "0", "]", ",", "images", ".", "size", "(", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.imagenet_d.main.adjust_learning_rate": [[348, 353], ["None"], "function", ["None"], ["top1", ".", "update", "(", "acc1", "[", "0", "]", ",", "images", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "acc5", "[", "0", "]", ",", "images", ".", "size", "(", "0", ")", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.imagenet_d.main.accuracy": [[355, 379], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "max", "target.size", "output.topk", "pred.t.t", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "range", "torch.zeros().cuda.eq", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "map_files.map_imagenet_class_to_visda_class", "target.view().expand_as", "correct[].float().max", "correct_k.sum.sum", "res.append", "correct_k.sum.mul_", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "target.view", "correct[].float"], "function", ["home.repos.pwc.inspect_result.bethgelab_robustness.imagenet_d.map_files.map_imagenet_class_to_visda_class", "home.repos.pwc.inspect_result.bethgelab_robustness.src.evaluate.Emissions.append"], ["if", "i", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "                ", "progress", ".", "display", "(", "i", ")", "\n", "\n", "# TODO: this should also be done with the ProgressMeter", "\n", "", "", "print", "(", "' * Acc@1 {top1.avg:.3f} Acc@5 {top5.avg:.3f}'", "\n", ".", "format", "(", "top1", "=", "top1", ",", "top5", "=", "top5", ")", ")", "\n", "\n", "", "return", "top1", ".", "avg", "\n", "\n", "\n", "", "def", "save_checkpoint", "(", "state", ",", "is_best", ",", "filename", "=", "'checkpoint.pth.tar'", ")", ":", "\n", "    ", "torch", ".", "save", "(", "state", ",", "filename", ")", "\n", "if", "is_best", ":", "\n", "        ", "shutil", ".", "copyfile", "(", "filename", ",", "'model_best.pth.tar'", ")", "\n", "\n", "\n", "", "", "class", "AverageMeter", "(", "object", ")", ":", "\n", "    ", "\"\"\"Computes and stores the average and current value\"\"\"", "\n", "def", "__init__", "(", "self", ",", "name", ",", "fmt", "=", "':f'", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "fmt", "=", "fmt", "\n", "self", ".", "reset", "(", ")", "\n", "\n", "", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.imagenet_d.map_files.get_imagenet_visda_mapping": [[9, 39], ["dict", "dict", "dict", "os.listdir", "sorted", "map_files.clean_dataset", "item.split", "re.search", "matching_names[].append", "matching_labels[].append", "list", "matching_names[].append", "list", "matching_labels[].append", "str", "str", "str", "imagenet_dict.map_dict", "imagenet_dict.map_dict"], "function", ["home.repos.pwc.inspect_result.bethgelab_robustness.imagenet_d.map_files.clean_dataset", "home.repos.pwc.inspect_result.bethgelab_robustness.src.evaluate.Emissions.append", "home.repos.pwc.inspect_result.bethgelab_robustness.src.evaluate.Emissions.append", "home.repos.pwc.inspect_result.bethgelab_robustness.src.evaluate.Emissions.append", "home.repos.pwc.inspect_result.bethgelab_robustness.src.evaluate.Emissions.append"], ["def", "get_imagenet_visda_mapping", "(", "visda_dir", ",", "map_dict", ")", ":", "\n", "\n", "    ", "matching_names", "=", "dict", "(", ")", "\n", "matching_labels", "=", "dict", "(", ")", "\n", "map_dict_visda", "=", "dict", "(", ")", "\n", "count", "=", "0", "\n", "\n", "#if True:", "\n", "label", "=", "0", "\n", "visda", "=", "os", ".", "listdir", "(", "visda_dir", ")", "\n", "for", "item", "in", "sorted", "(", "visda", ")", ":", "\n", "        ", "map_dict_visda", "[", "item", "]", "=", "label", "\n", "item_split", "=", "item", ".", "split", "(", "\"_\"", ")", "\n", "for", "ii", "in", "item_split", ":", "\n", "            ", "for", "j", "in", "map_dict", ":", "\n", "                ", "if", "re", ".", "search", "(", "r'\\b'", "+", "ii", "+", "r'\\b'", ",", "map_dict", "[", "j", "]", ")", ":", "\n", "                    ", "try", ":", "\n", "                        ", "matching_names", "[", "item", "]", ".", "append", "(", "[", "map_dict", "[", "j", "]", "]", ")", "\n", "matching_labels", "[", "str", "(", "label", ")", "]", ".", "append", "(", "j", ")", "\n", "", "except", ":", "\n", "                        ", "matching_names", "[", "item", "]", "=", "list", "(", ")", "\n", "matching_names", "[", "item", "]", ".", "append", "(", "[", "map_dict", "[", "j", "]", "]", ")", "\n", "\n", "matching_labels", "[", "str", "(", "label", ")", "]", "=", "list", "(", ")", "\n", "matching_labels", "[", "str", "(", "label", ")", "]", ".", "append", "(", "j", ")", "\n", "", "", "", "", "label", "+=", "1", "\n", "\n", "", "matching_names", ",", "matching_labels", "=", "clean_dataset", "(", "matching_names", ",", "matching_labels", ",", "map_dict_visda", ")", "\n", "\n", "return", "matching_names", ",", "matching_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.imagenet_d.map_files.create_symlinks_and_get_imagenet_visda_mapping": [[41, 98], ["map_files.get_imagenet_visda_mapping", "map_files.get_ambiguous_classes", "matching_names.keys", "map_files.get_imagenet_visda_mapping", "torch.zeros", "torch.cuda.is_available", "dict", "range", "dict.keys", "os.path.exists", "os.makedirs", "print", "os.path.exists", "os.makedirs", "print", "os.path.join", "torch.zeros().cuda", "os.path.exists", "os.makedirs", "glob.glob", "glob.glob", "dict.keys", "list", "len", "print", "visda_location.split", "os.symlink", "torch.zeros", "int", "mapping_vector_counts[].append", "file.split"], "function", ["home.repos.pwc.inspect_result.bethgelab_robustness.imagenet_d.map_files.get_imagenet_visda_mapping", "home.repos.pwc.inspect_result.bethgelab_robustness.imagenet_d.map_files.get_ambiguous_classes", "home.repos.pwc.inspect_result.bethgelab_robustness.imagenet_d.map_files.get_imagenet_visda_mapping", "home.repos.pwc.inspect_result.bethgelab_robustness.src.evaluate.Emissions.append"], ["", "def", "create_symlinks_and_get_imagenet_visda_mapping", "(", "visda_location", ",", "map_dict", ")", ":", "\n", "\n", "# initial mapping and cleaning", "\n", "    ", "matching_names", ",", "matching_labels", "=", "get_imagenet_visda_mapping", "(", "visda_location", ",", "map_dict", ")", "\n", "\n", "# some classes are ambiguous", "\n", "ambiguous_matching", "=", "get_ambiguous_classes", "(", "matching_names", ")", "\n", "\n", "# create symlinks for all valid classes", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "'./visda_symlinks/'", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "'./visda_symlinks/'", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'Path ./visda_symlinks/ exists, skipping.'", ")", "\n", "", "target_folder", "=", "'./visda_symlinks/'", "+", "visda_location", ".", "split", "(", "'/'", ")", "[", "-", "2", "]", "+", "'/'", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "target_folder", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "target_folder", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'Path '", ",", "target_folder", ",", "' exists, skipping.'", ")", "\n", "", "for", "folder", "in", "matching_names", ".", "keys", "(", ")", ":", "\n", "        ", "target_folder_class", "=", "os", ".", "path", ".", "join", "(", "target_folder", ",", "ambiguous_matching", "[", "folder", "]", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "target_folder_class", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "target_folder_class", ")", "\n", "", "try", ":", "\n", "            ", "allFiles_path_jpg", "=", "visda_location", "+", "folder", "+", "'/*.jpg'", "\n", "allFiles_path_png", "=", "visda_location", "+", "folder", "+", "'/*.png'", "\n", "allFiles_jpg", "=", "glob", ".", "glob", "(", "allFiles_path_jpg", ")", "\n", "allFiles_png", "=", "glob", ".", "glob", "(", "allFiles_path_png", ")", "\n", "allFiles", "=", "allFiles_jpg", "+", "allFiles_png", "\n", "for", "file", "in", "allFiles", ":", "\n", "                ", "newFile", "=", "target_folder_class", "+", "'/'", "+", "file", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "os", ".", "symlink", "(", "file", ",", "newFile", ")", "\n", "", "", "except", "FileExistsError", ":", "\n", "            ", "pass", "\n", "\n", "# final mapping and cleaning with the symlinks", "\n", "", "", "matching_names", ",", "matching_labels", "=", "get_imagenet_visda_mapping", "(", "target_folder", ",", "map_dict", ")", "\n", "\n", "mapping_vector", "=", "torch", ".", "zeros", "(", "(", "1000", ")", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "mapping_vector", "=", "torch", ".", "zeros", "(", "(", "1000", ")", ")", ".", "cuda", "(", ")", "\n", "", "mapping_vector", "-=", "1", "\n", "mapping_vector_counts", "=", "dict", "(", ")", "\n", "for", "i", "in", "range", "(", "1000", ")", ":", "\n", "        ", "if", "i", "not", "in", "mapping_vector_counts", ".", "keys", "(", ")", ":", "\n", "            ", "mapping_vector_counts", "[", "i", "]", "=", "list", "(", ")", "\n", "", "for", "j", "in", "matching_labels", ":", "\n", "            ", "if", "i", "in", "matching_labels", "[", "j", "]", ":", "\n", "                ", "mapping_vector", "[", "i", "]", "=", "int", "(", "j", ")", "\n", "mapping_vector_counts", "[", "i", "]", ".", "append", "(", "j", ")", "\n", "\n", "# if classes are mapped to more than one class, we want to know about it:", "\n", "", "", "", "for", "i", "in", "mapping_vector_counts", ".", "keys", "(", ")", ":", "\n", "        ", "if", "len", "(", "mapping_vector_counts", "[", "i", "]", ")", ">", "1", ":", "\n", "            ", "print", "(", "map_dict", "[", "i", "]", ",", "i", ",", "'is mapped to visda classes: '", ",", "mapping_vector_counts", "[", "i", "]", ")", "\n", "\n", "\n", "", "", "return", "mapping_vector", ",", "matching_names", ",", "matching_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.imagenet_d.map_files.clean_dataset": [[100, 319], ["matching_names[].append", "matching_labels[].extend", "matching_names[].append", "matching_labels[].extend", "matching_names[].append", "matching_labels[].extend", "matching_names[].append", "matching_labels[].extend", "matching_names[].append", "matching_labels[].extend", "matching_names[].append", "matching_labels[].extend", "matching_names[].append", "matching_labels[].extend", "matching_names[].append", "matching_labels[].extend", "matching_names[].append", "matching_labels[].extend", "matching_names[].append", "matching_labels[].extend", "matching_names[].append", "matching_labels[].extend", "matching_labels[].extend", "numpy.arange", "matching_labels[].extend", "numpy.arange", "matching_labels[].extend", "numpy.arange", "matching_labels[].extend", "numpy.arange", "matching_labels[].extend", "numpy.arange", "matching_labels[].extend", "numpy.arange", "matching_names[].append", "matching_labels[].extend", "matching_labels[].extend", "numpy.arange", "matching_labels[].extend", "numpy.arange", "list", "list", "list", "list", "list", "list", "list", "list", "set", "list", "str", "str", "str", "numpy.arange", "matching_names[].append", "numpy.arange", "matching_names[].append", "numpy.arange", "matching_names[].append", "numpy.arange", "matching_names[].append", "numpy.arange", "matching_names[].append", "numpy.arange", "matching_names[].append", "numpy.arange", "matching_names[].append", "numpy.arange", "matching_names[].append", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.bethgelab_robustness.src.evaluate.Emissions.append", "home.repos.pwc.inspect_result.bethgelab_robustness.src.evaluate.Emissions.append", "home.repos.pwc.inspect_result.bethgelab_robustness.src.evaluate.Emissions.append", "home.repos.pwc.inspect_result.bethgelab_robustness.src.evaluate.Emissions.append", "home.repos.pwc.inspect_result.bethgelab_robustness.src.evaluate.Emissions.append", "home.repos.pwc.inspect_result.bethgelab_robustness.src.evaluate.Emissions.append", "home.repos.pwc.inspect_result.bethgelab_robustness.src.evaluate.Emissions.append", "home.repos.pwc.inspect_result.bethgelab_robustness.src.evaluate.Emissions.append", "home.repos.pwc.inspect_result.bethgelab_robustness.src.evaluate.Emissions.append", "home.repos.pwc.inspect_result.bethgelab_robustness.src.evaluate.Emissions.append", "home.repos.pwc.inspect_result.bethgelab_robustness.src.evaluate.Emissions.append", "home.repos.pwc.inspect_result.bethgelab_robustness.src.evaluate.Emissions.append", "home.repos.pwc.inspect_result.bethgelab_robustness.src.evaluate.Emissions.append", "home.repos.pwc.inspect_result.bethgelab_robustness.src.evaluate.Emissions.append", "home.repos.pwc.inspect_result.bethgelab_robustness.src.evaluate.Emissions.append", "home.repos.pwc.inspect_result.bethgelab_robustness.src.evaluate.Emissions.append", "home.repos.pwc.inspect_result.bethgelab_robustness.src.evaluate.Emissions.append", "home.repos.pwc.inspect_result.bethgelab_robustness.src.evaluate.Emissions.append", "home.repos.pwc.inspect_result.bethgelab_robustness.src.evaluate.Emissions.append", "home.repos.pwc.inspect_result.bethgelab_robustness.src.evaluate.Emissions.append"], ["", "def", "clean_dataset", "(", "matching_names", ",", "matching_labels", ",", "map_dict_visda", ")", ":", "\n", "\n", "# delete labels completely", "\n", "    ", "del_list", "=", "[", "'mouse'", ",", "'fish'", ",", "'light_bulb'", ",", "'leaf'", ",", "'face'", ",", "'wine_glass'", ",", "'hockey_stick'", ",", "'star'", ",", "'see_saw'", ",", "'pencil'", ",", "'grass'", ",", "'fire_hydrant'", ",", "'brain'", ",", "'apple'", ",", "'river'", ",", "'rhinoceros'", ",", "'power_outlet'", ",", "'rain'", ",", "'pool'", ",", "'picture_frame'", ",", "'paper_clip'", ",", "'palm_tree'", ",", "'paint_can'", ",", "'mouth'", ",", "'The_Great_Wall_of_China'", ",", "\n", "'garden'", ",", "'garden_hose'", ",", "'hand'", ",", "'house_plant'", ",", "'jacket'", ",", "'tree'", ",", "'sun'", ",", "'smiley_face'", ",", "'beach'", ",", "'diving_board'", ",", "'mountain'", "]", "\n", "for", "item", "in", "del_list", ":", "\n", "        ", "try", ":", "\n", "            ", "del", "matching_names", "[", "item", "]", "\n", "del", "matching_labels", "[", "str", "(", "map_dict_visda", "[", "item", "]", ")", "]", "\n", "", "except", ":", "\n", "            ", "pass", "\n", "# delete some imagenet labels", "\n", "\n", "", "", "del", "matching_names", "[", "'cat'", "]", "[", "5", ":", "]", "\n", "del", "matching_labels", "[", "str", "(", "map_dict_visda", "[", "'cat'", "]", ")", "]", "[", "5", ":", "]", "\n", "\n", "del", "matching_names", "[", "'dog'", "]", "[", "-", "1", "]", "\n", "del", "matching_labels", "[", "str", "(", "map_dict_visda", "[", "'dog'", "]", ")", "]", "[", "-", "1", "]", "\n", "\n", "del", "matching_names", "[", "'pig'", "]", "[", "0", "]", "\n", "del", "matching_labels", "[", "str", "(", "map_dict_visda", "[", "'pig'", "]", ")", "]", "[", "0", "]", "\n", "\n", "del", "matching_names", "[", "'bear'", "]", "[", "-", "1", "]", "\n", "del", "matching_labels", "[", "str", "(", "map_dict_visda", "[", "'bear'", "]", ")", "]", "[", "-", "1", "]", "\n", "\n", "del", "matching_names", "[", "'horse'", "]", "[", "0", "]", "\n", "del", "matching_labels", "[", "str", "(", "map_dict_visda", "[", "'horse'", "]", ")", "]", "[", "0", "]", "\n", "\n", "del", "matching_names", "[", "'hot_air_balloon'", "]", "[", "0", ":", "2", "]", "\n", "del", "matching_labels", "[", "str", "(", "map_dict_visda", "[", "'hot_air_balloon'", "]", ")", "]", "[", "0", ":", "2", "]", "\n", "\n", "del", "matching_names", "[", "'hot_dog'", "]", "[", "2", ":", "15", "]", "\n", "del", "matching_labels", "[", "str", "(", "map_dict_visda", "[", "'hot_dog'", "]", ")", "]", "[", "2", ":", "15", "]", "\n", "\n", "del", "matching_names", "[", "'house'", "]", "[", "0", "]", "\n", "del", "matching_labels", "[", "str", "(", "map_dict_visda", "[", "'house'", "]", ")", "]", "[", "0", "]", "\n", "\n", "del", "matching_names", "[", "'ice_cream'", "]", "[", "0", "]", "\n", "del", "matching_labels", "[", "str", "(", "map_dict_visda", "[", "'ice_cream'", "]", ")", "]", "[", "0", "]", "\n", "\n", "del", "matching_names", "[", "'kangaroo'", "]", "[", "1", "]", "\n", "del", "matching_labels", "[", "str", "(", "map_dict_visda", "[", "'kangaroo'", "]", ")", "]", "[", "1", "]", "\n", "\n", "del", "matching_names", "[", "'washing_machine'", "]", "[", "1", ":", "-", "1", "]", "\n", "del", "matching_labels", "[", "str", "(", "map_dict_visda", "[", "'washing_machine'", "]", ")", "]", "[", "1", ":", "-", "1", "]", "\n", "\n", "del", "matching_names", "[", "'traffic_light'", "]", "[", "1", ":", "-", "1", "]", "\n", "del", "matching_labels", "[", "str", "(", "map_dict_visda", "[", "'traffic_light'", "]", ")", "]", "[", "1", ":", "-", "1", "]", "\n", "\n", "del", "matching_names", "[", "'table'", "]", "[", "-", "1", "]", "\n", "del", "matching_labels", "[", "str", "(", "map_dict_visda", "[", "'table'", "]", ")", "]", "[", "-", "1", "]", "\n", "\n", "del", "matching_names", "[", "'stop_sign'", "]", "[", "0", "]", "\n", "del", "matching_labels", "[", "str", "(", "map_dict_visda", "[", "'stop_sign'", "]", ")", "]", "[", "0", "]", "\n", "\n", "del", "matching_names", "[", "'spider'", "]", "[", "-", "2", "]", "\n", "del", "matching_labels", "[", "str", "(", "map_dict_visda", "[", "'spider'", "]", ")", "]", "[", "-", "2", "]", "\n", "\n", "del", "matching_names", "[", "'snake'", "]", "[", "-", "2", ":", "]", "\n", "del", "matching_labels", "[", "str", "(", "map_dict_visda", "[", "'snake'", "]", ")", "]", "[", "-", "2", ":", "]", "\n", "\n", "del", "matching_names", "[", "'sleeping_bag'", "]", "[", "1", "]", "\n", "del", "matching_labels", "[", "str", "(", "map_dict_visda", "[", "'sleeping_bag'", "]", ")", "]", "[", "1", "]", "\n", "\n", "del", "matching_names", "[", "'sleeping_bag'", "]", "[", "1", "]", "# not a bug that this comes twice", "\n", "del", "matching_labels", "[", "str", "(", "map_dict_visda", "[", "'sleeping_bag'", "]", ")", "]", "[", "1", "]", "\n", "\n", "del", "matching_names", "[", "'sheep'", "]", "[", "0", "]", "\n", "del", "matching_labels", "[", "str", "(", "map_dict_visda", "[", "'sheep'", "]", ")", "]", "[", "0", "]", "\n", "\n", "del", "matching_names", "[", "'sea_turtle'", "]", "[", ":", "-", "4", "]", "\n", "del", "matching_labels", "[", "str", "(", "map_dict_visda", "[", "'sea_turtle'", "]", ")", "]", "[", ":", "-", "4", "]", "\n", "\n", "del", "matching_names", "[", "'squirrel'", "]", "[", "1", "]", "\n", "del", "matching_labels", "[", "str", "(", "map_dict_visda", "[", "'squirrel'", "]", ")", "]", "[", "1", "]", "\n", "\n", "del", "matching_names", "[", "'lion'", "]", "[", "0", "]", "\n", "del", "matching_labels", "[", "str", "(", "map_dict_visda", "[", "'lion'", "]", ")", "]", "[", "0", "]", "\n", "\n", "del", "matching_names", "[", "'bee'", "]", "[", "0", "]", "\n", "del", "matching_labels", "[", "str", "(", "map_dict_visda", "[", "'bee'", "]", ")", "]", "[", "0", "]", "\n", "\n", "del", "matching_names", "[", "'bee'", "]", "[", "-", "1", "]", "\n", "del", "matching_labels", "[", "str", "(", "map_dict_visda", "[", "'bee'", "]", ")", "]", "[", "-", "1", "]", "\n", "\n", "del", "matching_names", "[", "'soccer_ball'", "]", "[", "1", ":", "]", "\n", "del", "matching_labels", "[", "str", "(", "map_dict_visda", "[", "'soccer_ball'", "]", ")", "]", "[", "1", ":", "]", "\n", "\n", "del", "matching_names", "[", "'tractor'", "]", "[", "1", "]", "\n", "del", "matching_labels", "[", "str", "(", "map_dict_visda", "[", "'tractor'", "]", ")", "]", "[", "1", "]", "\n", "\n", "del", "matching_names", "[", "'oven'", "]", "[", "-", "1", "]", "\n", "del", "matching_labels", "[", "str", "(", "map_dict_visda", "[", "'oven'", "]", ")", "]", "[", "-", "1", "]", "\n", "\n", "del", "matching_names", "[", "'piano'", "]", "[", "0", "]", "\n", "del", "matching_labels", "[", "str", "(", "map_dict_visda", "[", "'piano'", "]", ")", "]", "[", "0", "]", "\n", "\n", "del", "matching_names", "[", "'barn'", "]", "[", "0", "]", "\n", "del", "matching_labels", "[", "str", "(", "map_dict_visda", "[", "'barn'", "]", ")", "]", "[", "0", "]", "\n", "\n", "del", "matching_names", "[", "'tiger'", "]", "[", "0", ":", "2", "]", "\n", "del", "matching_labels", "[", "str", "(", "map_dict_visda", "[", "'tiger'", "]", ")", "]", "[", "0", ":", "2", "]", "\n", "\n", "del", "matching_names", "[", "'tiger'", "]", "[", "-", "1", "]", "\n", "del", "matching_labels", "[", "str", "(", "map_dict_visda", "[", "'tiger'", "]", ")", "]", "[", "-", "1", "]", "\n", "\n", "del", "matching_names", "[", "'monkey'", "]", "[", "0", "]", "\n", "del", "matching_labels", "[", "str", "(", "map_dict_visda", "[", "'monkey'", "]", ")", "]", "[", "0", "]", "\n", "\n", "del", "matching_names", "[", "'bear'", "]", "[", "-", "2", ":", "]", "\n", "del", "matching_labels", "[", "str", "(", "map_dict_visda", "[", "'bear'", "]", ")", "]", "[", "-", "2", ":", "]", "\n", "\n", "del", "matching_names", "[", "'car'", "]", "[", "2", "]", "\n", "del", "matching_labels", "[", "str", "(", "map_dict_visda", "[", "'car'", "]", ")", "]", "[", "2", "]", "\n", "\n", "del", "matching_names", "[", "'car'", "]", "[", "-", "1", "]", "\n", "del", "matching_labels", "[", "str", "(", "map_dict_visda", "[", "'car'", "]", ")", "]", "[", "-", "1", "]", "\n", "\n", "# add items:", "\n", "matching_names", "[", "'airplane'", "]", "=", "[", "[", "'warplane, military plane'", "]", ",", "[", "'airliner'", "]", ",", "[", "'airship, dirigible'", "]", "]", "\n", "matching_labels", "[", "str", "(", "map_dict_visda", "[", "'airplane'", "]", ")", "]", "=", "[", "895", ",", "404", ",", "405", "]", "\n", "\n", "matching_names", "[", "'t-shirt'", "]", "=", "[", "'jersey, T-shirt, tee shirt'", "]", "\n", "matching_labels", "[", "str", "(", "map_dict_visda", "[", "'t-shirt'", "]", ")", "]", "=", "[", "610", "]", "\n", "\n", "matching_names", "[", "'teddy-bear'", "]", "=", "[", "'teddy, teddy bear'", "]", "\n", "matching_labels", "[", "str", "(", "map_dict_visda", "[", "'teddy-bear'", "]", ")", "]", "=", "[", "850", "]", "\n", "\n", "matching_names", "[", "'bicycle'", "]", ".", "append", "(", "[", "'mountain bike, all-terrain bike, off-roader'", "]", ")", "\n", "matching_labels", "[", "str", "(", "map_dict_visda", "[", "'bicycle'", "]", ")", "]", ".", "extend", "(", "[", "671", "]", ")", "\n", "\n", "matching_names", "[", "'bus'", "]", ".", "append", "(", "[", "'trolleybus, trolley coach, trackless trolley'", "]", ")", "\n", "matching_labels", "[", "str", "(", "map_dict_visda", "[", "'bus'", "]", ")", "]", ".", "extend", "(", "[", "874", "]", ")", "\n", "\n", "matching_names", "[", "'bus'", "]", ".", "append", "(", "[", "'minibus'", "]", ")", "\n", "matching_labels", "[", "str", "(", "map_dict_visda", "[", "'bus'", "]", ")", "]", ".", "extend", "(", "[", "654", "]", ")", "\n", "\n", "matching_names", "[", "'frog'", "]", ".", "append", "(", "[", "'bullfrog, Rana catesbeiana'", "]", ")", "\n", "matching_labels", "[", "str", "(", "map_dict_visda", "[", "'frog'", "]", ")", "]", ".", "extend", "(", "[", "30", "]", ")", "\n", "\n", "matching_names", "[", "'rabbit'", "]", ".", "append", "(", "[", "'hare'", "]", ")", "\n", "matching_labels", "[", "str", "(", "map_dict_visda", "[", "'rabbit'", "]", ")", "]", ".", "extend", "(", "[", "331", "]", ")", "\n", "\n", "matching_names", "[", "'sea_turtle'", "]", ".", "append", "(", "[", "'terrapin'", "]", ")", "\n", "matching_labels", "[", "str", "(", "map_dict_visda", "[", "'sea_turtle'", "]", ")", "]", ".", "extend", "(", "[", "36", "]", ")", "\n", "\n", "matching_names", "[", "'whale'", "]", ".", "append", "(", "[", "'dugong, Dugong dugon'", "]", ")", "\n", "matching_labels", "[", "str", "(", "map_dict_visda", "[", "'whale'", "]", ")", "]", ".", "extend", "(", "[", "149", "]", ")", "\n", "\n", "matching_names", "[", "'pig'", "]", ".", "append", "(", "[", "'wild boar, boar, Sus scrofa'", "]", ")", "\n", "matching_labels", "[", "str", "(", "map_dict_visda", "[", "'pig'", "]", ")", "]", ".", "extend", "(", "[", "342", "]", ")", "\n", "\n", "matching_names", "[", "'pig'", "]", ".", "append", "(", "[", "'warthog'", "]", ")", "\n", "matching_labels", "[", "str", "(", "map_dict_visda", "[", "'pig'", "]", ")", "]", ".", "extend", "(", "[", "343", "]", ")", "\n", "\n", "matching_names", "[", "'pig'", "]", ".", "append", "(", "[", "'piggy bank, penny bank'", "]", ")", "\n", "matching_labels", "[", "str", "(", "map_dict_visda", "[", "'pig'", "]", ")", "]", ".", "extend", "(", "[", "719", "]", ")", "\n", "\n", "matching_names", "[", "'car'", "]", ".", "append", "(", "[", "'police van, police wagon, paddy wagon, patrol wagon, wagon, black Maria'", "]", ")", "\n", "matching_labels", "[", "str", "(", "map_dict_visda", "[", "'car'", "]", ")", "]", ".", "extend", "(", "[", "734", "]", ")", "\n", "\n", "# add dogs to dog label:", "\n", "matching_labels", "[", "str", "(", "map_dict_visda", "[", "'dog'", "]", ")", "]", ".", "extend", "(", "list", "(", "np", ".", "arange", "(", "151", ",", "269", ")", ")", ")", "\n", "for", "i", "in", "np", ".", "arange", "(", "151", ",", "269", ")", ":", "\n", "        ", "if", "map_dict", "[", "i", "]", "not", "in", "matching_names", "[", "'dog'", "]", ":", "\n", "            ", "matching_names", "[", "'dog'", "]", ".", "append", "(", "[", "map_dict", "[", "i", "]", "]", ")", "\n", "\n", "# add more butterflies:", "\n", "", "", "matching_labels", "[", "str", "(", "map_dict_visda", "[", "'butterfly'", "]", ")", "]", ".", "extend", "(", "list", "(", "np", ".", "arange", "(", "320", ",", "322", ")", ")", ")", "\n", "for", "i", "in", "np", ".", "arange", "(", "320", ",", "322", ")", ":", "\n", "        ", "if", "map_dict", "[", "i", "]", "not", "in", "matching_names", "[", "'butterfly'", "]", ":", "\n", "            ", "matching_names", "[", "'butterfly'", "]", ".", "append", "(", "[", "map_dict", "[", "i", "]", "]", ")", "\n", "\n", "# add more mosquitos:", "\n", "", "", "matching_labels", "[", "str", "(", "map_dict_visda", "[", "'mosquito'", "]", ")", "]", ".", "extend", "(", "list", "(", "np", ".", "arange", "(", "318", ",", "320", ")", ")", ")", "\n", "for", "i", "in", "np", ".", "arange", "(", "318", ",", "320", ")", ":", "\n", "        ", "if", "map_dict", "[", "i", "]", "not", "in", "matching_names", "[", "'mosquito'", "]", ":", "\n", "            ", "matching_names", "[", "'mosquito'", "]", ".", "append", "(", "[", "map_dict", "[", "i", "]", "]", ")", "\n", "\n", "# add more monkeys:", "\n", "", "", "matching_labels", "[", "str", "(", "map_dict_visda", "[", "'monkey'", "]", ")", "]", ".", "extend", "(", "list", "(", "np", ".", "arange", "(", "365", ",", "385", ")", ")", ")", "\n", "for", "i", "in", "np", ".", "arange", "(", "365", ",", "385", ")", ":", "\n", "        ", "if", "map_dict", "[", "i", "]", "not", "in", "matching_names", "[", "'monkey'", "]", ":", "\n", "            ", "matching_names", "[", "'monkey'", "]", ".", "append", "(", "[", "map_dict", "[", "i", "]", "]", ")", "\n", "\n", "# add more snakes:", "\n", "", "", "matching_labels", "[", "str", "(", "map_dict_visda", "[", "'snake'", "]", ")", "]", ".", "extend", "(", "list", "(", "np", ".", "arange", "(", "52", ",", "69", ")", ")", ")", "\n", "for", "i", "in", "np", ".", "arange", "(", "52", ",", "69", ")", ":", "\n", "        ", "if", "map_dict", "[", "i", "]", "not", "in", "matching_names", "[", "'snake'", "]", ":", "\n", "            ", "matching_names", "[", "'snake'", "]", ".", "append", "(", "[", "map_dict", "[", "i", "]", "]", ")", "\n", "\n", "# add more spiders:", "\n", "", "", "matching_labels", "[", "str", "(", "map_dict_visda", "[", "'spider'", "]", ")", "]", ".", "extend", "(", "list", "(", "np", ".", "arange", "(", "72", ",", "79", ")", ")", ")", "\n", "for", "i", "in", "np", ".", "arange", "(", "72", ",", "79", ")", ":", "\n", "        ", "if", "map_dict", "[", "i", "]", "not", "in", "matching_names", "[", "'spider'", "]", ":", "\n", "            ", "matching_names", "[", "'spider'", "]", ".", "append", "(", "[", "map_dict", "[", "i", "]", "]", ")", "\n", "\n", "", "", "matching_names", "[", "'spider'", "]", ".", "append", "(", "[", "'harvestman, daddy longlegs, Phalangium opilio'", "]", ")", "\n", "matching_labels", "[", "str", "(", "map_dict_visda", "[", "'spider'", "]", ")", "]", ".", "extend", "(", "[", "70", "]", ")", "\n", "\n", "# add more birds:", "\n", "matching_labels", "[", "str", "(", "map_dict_visda", "[", "'bird'", "]", ")", "]", ".", "extend", "(", "list", "(", "np", ".", "arange", "(", "80", ",", "101", ")", ")", ")", "\n", "for", "i", "in", "np", ".", "arange", "(", "80", ",", "101", ")", ":", "\n", "        ", "if", "map_dict", "[", "i", "]", "not", "in", "matching_names", "[", "'bird'", "]", ":", "\n", "            ", "matching_names", "[", "'bird'", "]", ".", "append", "(", "[", "map_dict", "[", "i", "]", "]", ")", "\n", "\n", "# add more birds:", "\n", "", "", "matching_labels", "[", "str", "(", "map_dict_visda", "[", "'bird'", "]", ")", "]", ".", "extend", "(", "list", "(", "np", ".", "arange", "(", "7", ",", "24", ")", ")", ")", "\n", "for", "i", "in", "np", ".", "arange", "(", "7", ",", "24", ")", ":", "\n", "        ", "if", "map_dict", "[", "i", "]", "not", "in", "matching_names", "[", "'bird'", "]", ":", "\n", "            ", "matching_names", "[", "'bird'", "]", ".", "append", "(", "[", "map_dict", "[", "i", "]", "]", ")", "\n", "\n", "# remove dublicates from labels:", "\n", "", "", "for", "item", "in", "matching_labels", ":", "\n", "        ", "tmp", "=", "set", "(", "matching_labels", "[", "item", "]", ")", "\n", "matching_labels", "[", "item", "]", "=", "list", "(", "tmp", ")", "\n", "\n", "\n", "", "return", "matching_names", ",", "matching_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.imagenet_d.map_files.map_imagenet_class_to_visda_class": [[321, 326], ["mapping_vector[].long"], "function", ["None"], ["", "def", "map_imagenet_class_to_visda_class", "(", "pred_label", ",", "mapping_vector", ")", ":", "\n", "\n", "    ", "pred_label_visda_tensor", "=", "mapping_vector", "[", "pred_label", "]", ".", "long", "(", ")", "\n", "\n", "return", "pred_label_visda_tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.imagenet_d.map_files.map_visda_class_to_imagenet_class": [[328, 333], ["mapping_vector[].long"], "function", ["None"], ["", "def", "map_visda_class_to_imagenet_class", "(", "pred_label", ",", "mapping_vector", ")", ":", "\n", "\n", "    ", "pred_label_visda_tensor", "=", "mapping_vector", "[", "pred_label", "]", ".", "long", "(", ")", "\n", "\n", "return", "pred_label_visda_tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.imagenet_d.map_files.get_ambiguous_classes": [[335, 394], ["matching_names.keys"], "function", ["None"], ["", "def", "get_ambiguous_classes", "(", "matching_names", ")", ":", "\n", "\n", "# these are the ambiguous classes", "\n", "    ", "ambiguous_classes", "=", "[", "[", "'alarm_clock'", ",", "'clock'", "]", ",", "[", "'baseball'", ",", "'baseball_bat'", "]", ",", "[", "'bed'", ",", "'couch'", "]", ",", "[", "'car'", ",", "'police_car'", "]", ",", "\n", "[", "'coffee_cup'", ",", "'cup'", ",", "'mug'", "]", ",", "[", "'computer'", ",", "'keyboard'", ",", "'laptop'", "]", ",", "[", "'ice_cream'", ",", "'lollipop'", ",", "'popsicle'", "]", ",", "\n", "[", "'bus'", ",", "'school_bus'", "]", ",", "[", "'truck'", ",", "'pickup_truck'", ",", "'firetruck'", ",", "'van'", "]", ",", "[", "'bird'", ",", "'swan'", "]", ",", "[", "'hot_tub'", ",", "'bathtub'", "]", ",", "\n", "[", "'telephone'", ",", "'cell_phone'", "]", ",", "[", "'ceiling_fan'", ",", "'fan'", "]", "]", "\n", "\n", "ambiguous_matching", "=", "{", "}", "\n", "\n", "ambiguous_matching", "[", "'telephone'", "]", "=", "'telephone'", "\n", "ambiguous_matching", "[", "'cell_phone'", "]", "=", "'telephone'", "\n", "\n", "ambiguous_matching", "[", "'fan'", "]", "=", "'fan'", "\n", "ambiguous_matching", "[", "'ceiling_fan'", "]", "=", "'fan'", "\n", "\n", "ambiguous_matching", "[", "'clock'", "]", "=", "'clock'", "\n", "ambiguous_matching", "[", "'alarm_clock'", "]", "=", "'clock'", "\n", "\n", "ambiguous_matching", "[", "'bathtub'", "]", "=", "'bathtub'", "\n", "ambiguous_matching", "[", "'hot_tub'", "]", "=", "'bathtub'", "\n", "\n", "ambiguous_matching", "[", "'baseball'", "]", "=", "'baseball'", "\n", "ambiguous_matching", "[", "'baseball_bat'", "]", "=", "'baseball'", "\n", "\n", "ambiguous_matching", "[", "'bed'", "]", "=", "'bed'", "\n", "ambiguous_matching", "[", "'couch'", "]", "=", "'bed'", "\n", "\n", "ambiguous_matching", "[", "'car'", "]", "=", "'car'", "\n", "ambiguous_matching", "[", "'police_car'", "]", "=", "'car'", "\n", "\n", "ambiguous_matching", "[", "'coffee_cup'", "]", "=", "'cup'", "\n", "ambiguous_matching", "[", "'cup'", "]", "=", "'cup'", "\n", "ambiguous_matching", "[", "'mug'", "]", "=", "'cup'", "\n", "\n", "ambiguous_matching", "[", "'computer'", "]", "=", "'computer'", "\n", "ambiguous_matching", "[", "'keyboard'", "]", "=", "'computer'", "\n", "ambiguous_matching", "[", "'laptop'", "]", "=", "'computer'", "\n", "\n", "ambiguous_matching", "[", "'ice_cream'", "]", "=", "'ice_cream'", "\n", "ambiguous_matching", "[", "'lollipop'", "]", "=", "'ice_cream'", "\n", "ambiguous_matching", "[", "'popsicle'", "]", "=", "'ice_cream'", "\n", "\n", "ambiguous_matching", "[", "'bus'", "]", "=", "'bus'", "\n", "ambiguous_matching", "[", "'school_bus'", "]", "=", "'bus'", "\n", "\n", "ambiguous_matching", "[", "'truck'", "]", "=", "'truck'", "\n", "ambiguous_matching", "[", "'pickup_truck'", "]", "=", "'truck'", "\n", "ambiguous_matching", "[", "'van'", "]", "=", "'truck'", "\n", "ambiguous_matching", "[", "'firetruck'", "]", "=", "'truck'", "\n", "\n", "ambiguous_matching", "[", "'bird'", "]", "=", "'bird'", "\n", "ambiguous_matching", "[", "'swan'", "]", "=", "'bird'", "\n", "\n", "for", "key", "in", "matching_names", ".", "keys", "(", ")", ":", "\n", "        ", "if", "key", "not", "in", "ambiguous_matching", ":", "\n", "            ", "ambiguous_matching", "[", "key", "]", "=", "key", "\n", "\n", "", "", "return", "ambiguous_matching", "", "", ""]], "home.repos.pwc.inspect_result.bethgelab_robustness.src.config.assert_exists": [[7, 10], ["os.path.exists"], "function", ["None"], ["def", "assert_exists", "(", "fname", ")", ":", "\n", "    ", "assert", "os", ".", "path", ".", "exists", "(", "fname", ")", "\n", "return", "fname", "\n", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.src.config.assert_not_exists": [[12, 15], ["os.path.exists"], "function", ["None"], ["", "def", "assert_not_exists", "(", "fname", ")", ":", "\n", "    ", "assert", "not", "os", ".", "path", ".", "exists", "(", "fname", ")", "\n", "return", "fname", "\n", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.src.config.parse_args": [[17, 191], ["sorted", "sorted.extend", "sorted.extend", "sorted.extend", "argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "name.islower", "callable", "name.startswith"], "function", ["home.repos.pwc.inspect_result.bethgelab_robustness.src.config.parse_args"], ["", "def", "parse_args", "(", "args", ")", ":", "\n", "    ", "model_names", "=", "sorted", "(", "\n", "name", "\n", "for", "name", "in", "models", ".", "__dict__", "\n", "if", "name", ".", "islower", "(", ")", "\n", "and", "not", "name", ".", "startswith", "(", "\"__\"", ")", "\n", "and", "callable", "(", "models", ".", "__dict__", "[", "name", "]", ")", "\n", ")", "\n", "model_names", ".", "extend", "(", "\n", "[", "\n", "\"resnext101_32x8d_wsl\"", ",", "\n", "\"resnext101_32x16d_wsl\"", ",", "\n", "\"resnext101_32x32d_wsl\"", ",", "\n", "\"resnext101_32x48d_wsl\"", ",", "\n", "]", "\n", ")", "\n", "model_names", ".", "extend", "(", "\n", "[", "\n", "\"efficientnet-b0\"", ",", "\n", "\"efficientnet-b1\"", ",", "\n", "\"efficientnet-b2\"", ",", "\n", "\"efficientnet-b2\"", ",", "\n", "\"efficientnet-b4\"", ",", "\n", "\"efficientnet-b5\"", ",", "\n", "\"efficientnet-b6\"", ",", "\n", "\"efficientnet-b7\"", ",", "\n", "]", "\n", ")", "\n", "model_names", ".", "extend", "(", "\n", "[", "\n", "\"fixup_resnet50\"", ",", "\n", "\"resnet50_gn\"", ",", "\n", "\"resnet101_gn\"", ",", "\n", "\"resnet152_gn\"", ",", "\n", "\"efficientnet-b0\"", ",", "\n", "\"efficientnet-b1\"", ",", "\n", "\"efficientnet-b2\"", ",", "\n", "\"efficientnet-b2\"", ",", "\n", "\"efficientnet-b4\"", ",", "\n", "\"efficientnet-b5\"", ",", "\n", "\"efficientnet-b6\"", ",", "\n", "\"efficientnet-b7\"", ",", "\n", "]", "\n", ")", "\n", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"PyTorch ImageNet Training\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--imagenet-path\"", ",", "type", "=", "assert_exists", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "\"--resize-and-crop\"", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--emission-path\"", ",", "type", "=", "assert_not_exists", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "\"--seed\"", ",", "type", "=", "int", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"-a\"", ",", "\n", "\"--arch\"", ",", "\n", "metavar", "=", "\"ARCH\"", ",", "\n", "default", "=", "\"resnet50\"", ",", "\n", "choices", "=", "model_names", ",", "\n", "help", "=", "\"model architecture: \"", "+", "\" | \"", ".", "join", "(", "model_names", ")", "+", "\" (default: resnet18)\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"-j\"", ",", "\n", "\"--workers\"", ",", "\n", "default", "=", "2", ",", "\n", "type", "=", "int", ",", "\n", "metavar", "=", "\"N\"", ",", "\n", "help", "=", "\"number of data loading workers (default: 2)\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--resizepar\"", ",", "\n", "default", "=", "256", ",", "\n", "type", "=", "int", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--croppar\"", ",", "\n", "default", "=", "224", ",", "\n", "type", "=", "int", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"-tb\"", ",", "\n", "\"--test-batch-size\"", ",", "\n", "default", "=", "200", ",", "\n", "type", "=", "int", ",", "\n", "metavar", "=", "\"N\"", ",", "\n", "help", "=", "\"mini-batch size (default: 256), this is the total \"", "\n", "\"batch size of all GPUs on the current node when \"", "\n", "\"using Data Parallel\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--resume\"", ",", "\n", "default", "=", "\"\"", ",", "\n", "type", "=", "str", ",", "\n", "metavar", "=", "\"PATH\"", ",", "\n", "help", "=", "\"path to latest checkpoint (default: none)\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--no-shuffle\"", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"-e\"", ",", "\n", "\"--evaluate\"", ",", "\n", "dest", "=", "\"evaluate\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"evaluate model on validation set\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--gpu\"", ",", "default", "=", "None", ",", "type", "=", "int", ",", "help", "=", "\"GPU id to use.\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--train-mode-during-eval\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"use train mode during evaluation.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--adapt-only-one-layer\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"use train mode during evaluation.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--layer-to-adapt\"", ",", "default", "=", "0", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--pretrained\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"use pre-trained model\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--dry-run\"", ",", "action", "=", "\"store_true\"", ")", "\n", "\n", "# ############ Ablation arguments", "\n", "parser", ".", "add_argument", "(", "\n", "\"--adapt-mean\"", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"use test time statistics for mean\"", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--adapt-var\"", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"use test time statistics for variance\"", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--adapt-stage\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "\"use test time statistics in only this stage\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--leave-stage\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "\"use test time statistics everywhere except in this stage\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--adapt-prior\"", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "\"use train time statistics as a prior during evaluation. Specify the averaging factor directly\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--adapt-prior-bsz\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "\"use train time statistics as a prior during evaluation. Specify the training set size.\"", ",", "\n", ")", "\n", "\n", "# EMA", "\n", "parser", ".", "add_argument", "(", "\n", "\"--ema-batchnorm\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"use test time ema statistics for all batch norm layers\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--ema-warmup-samples\"", ",", "type", "=", "int", ",", "default", "=", "5000", ")", "\n", "# ############ End ablation arguments", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"-p\"", ",", "\n", "\"--print-freq\"", ",", "\n", "default", "=", "1000", ",", "\n", "type", "=", "int", ",", "\n", "metavar", "=", "\"N\"", ",", "\n", "help", "=", "\"print frequency (default: 10)\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--tqdm\"", ",", "action", "=", "\"store_true\"", ")", "\n", "\n", "return", "parser", ".", "parse_args", "(", "args", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.bethgelab_robustness.src.evaluate.Emissions.__init__": [[208, 211], ["evaluate.Emissions.init_metrics"], "methods", ["home.repos.pwc.inspect_result.bethgelab_robustness.src.evaluate.Emissions.init_metrics"], ["def", "__init__", "(", "self", ",", "num_batches", ")", ":", "\n", "        ", "self", ".", "num_batches", "=", "num_batches", "\n", "self", ".", "init_metrics", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.src.evaluate.Emissions.init_metrics": [[212, 225], ["meters.AverageMeter", "meters.AverageMeter", "meters.AverageMeter", "meters.AverageMeter", "meters.ProgressMeter"], "methods", ["None"], ["", "def", "init_metrics", "(", "self", ")", ":", "\n", "        ", "self", ".", "targets", "=", "[", "]", "\n", "self", ".", "predictions", "=", "[", "]", "\n", "self", ".", "batch_time", "=", "AverageMeter", "(", "\"Time\"", ",", "\":6.3f\"", ")", "\n", "self", ".", "losses", "=", "AverageMeter", "(", "\"Loss\"", ",", "\":.4e\"", ")", "\n", "self", ".", "top1", "=", "AverageMeter", "(", "\"Acc@1\"", ",", "\":6.2f\"", ")", "\n", "self", ".", "top5", "=", "AverageMeter", "(", "\"Acc@5\"", ",", "\":6.2f\"", ")", "\n", "self", ".", "progress", "=", "ProgressMeter", "(", "\n", "self", ".", "num_batches", ",", "\n", "[", "self", ".", "batch_time", ",", "self", ".", "losses", ",", "self", ".", "top1", ",", "self", ".", "top5", "]", ",", "\n", "prefix", "=", "\"| Test: \"", ",", "\n", ")", "\n", "self", ".", "finalized", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.src.evaluate.Emissions.update_metrics": [[226, 232], ["meters.get_accuracy", "evaluate.Emissions.losses.update", "evaluate.Emissions.top1.update", "evaluate.Emissions.top5.update", "loss.item", "output.size", "acc1[].cpu", "output.size", "acc5[].cpu", "output.size"], "methods", ["home.repos.pwc.inspect_result.bethgelab_robustness.src.meters.get_accuracy", "home.repos.pwc.inspect_result.bethgelab_robustness.src.meters.AverageMeter.update", "home.repos.pwc.inspect_result.bethgelab_robustness.src.meters.AverageMeter.update", "home.repos.pwc.inspect_result.bethgelab_robustness.src.meters.AverageMeter.update"], ["", "def", "update_metrics", "(", "self", ",", "output", ",", "target", ",", "loss", ")", ":", "\n", "        ", "assert", "not", "self", ".", "finalized", "\n", "acc1", ",", "acc5", "=", "get_accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "self", ".", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "output", ".", "size", "(", "0", ")", ")", "\n", "self", ".", "top1", ".", "update", "(", "acc1", "[", "0", "]", ".", "cpu", "(", ")", ",", "output", ".", "size", "(", "0", ")", ")", "\n", "self", ".", "top5", ".", "update", "(", "acc5", "[", "0", "]", ".", "cpu", "(", ")", ",", "output", ".", "size", "(", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.src.evaluate.Emissions.append": [[233, 242], ["evaluate.Emissions.batch_time.update", "evaluate.Emissions.update_metrics", "evaluate.Emissions.predictions.append", "evaluate.Emissions.targets.append", "len", "len", "output.detach().cpu().numpy", "targets.detach().cpu().numpy", "output.detach().cpu", "targets.detach().cpu", "output.detach", "targets.detach"], "methods", ["home.repos.pwc.inspect_result.bethgelab_robustness.src.meters.AverageMeter.update", "home.repos.pwc.inspect_result.bethgelab_robustness.src.evaluate.Emissions.update_metrics", "home.repos.pwc.inspect_result.bethgelab_robustness.src.evaluate.Emissions.append", "home.repos.pwc.inspect_result.bethgelab_robustness.src.evaluate.Emissions.append"], ["", "def", "append", "(", "self", ",", "output", ",", "targets", ",", "loss", ",", "time", "=", "0", ")", ":", "\n", "        ", "assert", "len", "(", "output", ")", "==", "len", "(", "targets", ")", "\n", "assert", "not", "self", ".", "finalized", "\n", "\n", "self", ".", "batch_time", ".", "update", "(", "time", ")", "\n", "self", ".", "update_metrics", "(", "output", ",", "targets", ",", "loss", ")", "\n", "\n", "self", ".", "predictions", ".", "append", "(", "output", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "self", ".", "targets", ".", "append", "(", "targets", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.src.evaluate.Emissions.finalize": [[243, 252], ["numpy.concatenate", "numpy.concatenate"], "methods", ["None"], ["", "def", "finalize", "(", "self", ")", ":", "\n", "        ", "assert", "not", "self", ".", "finalized", "\n", "# assert self.num_batches == len(self.targets)", "\n", "# assert self.num_batches == len(self.predictions)", "\n", "\n", "self", ".", "predictions", "=", "np", ".", "concatenate", "(", "self", ".", "predictions", ",", "axis", "=", "0", ")", "\n", "self", ".", "targets", "=", "np", ".", "concatenate", "(", "self", ".", "targets", ",", "axis", "=", "0", ")", "\n", "self", ".", "finalized", "=", "True", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.src.evaluate.Emissions.save": [[253, 266], ["numpy.savez", "os.path.exists"], "methods", ["None"], ["", "def", "save", "(", "self", ",", "fname", ",", "**", "kwargs", ")", ":", "\n", "        ", "assert", "self", ".", "finalized", "\n", "assert", "not", "os", ".", "path", ".", "exists", "(", "fname", ")", "\n", "np", ".", "savez", "(", "\n", "fname", ",", "\n", "top1", "=", "self", ".", "top1", ".", "avg", ",", "\n", "top5", "=", "self", ".", "top5", ".", "avg", ",", "\n", "loss", "=", "self", ".", "losses", ".", "avg", ",", "\n", "predictions", "=", "self", ".", "predictions", ",", "\n", "targets", "=", "self", ".", "targets", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.src.evaluate.Evaluation.__init__": [[271, 277], ["super().__init__", "evaluate.Evaluation.to_device"], "methods", ["home.repos.pwc.inspect_result.bethgelab_robustness.batchnorm.bn.BayesianBatchNorm.__init__", "home.repos.pwc.inspect_result.bethgelab_robustness.src.evaluate.Evaluation.to_device"], ["def", "__init__", "(", "self", ",", "model", ",", "criterion", ",", "args", ")", ":", "\n", "        ", "super", "(", "Evaluation", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "criterion", "=", "Evaluation", ".", "to_device", "(", "criterion", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.src.evaluate.Evaluation.to_device": [[280, 285], ["arg.cuda"], "methods", ["None"], ["def", "to_device", "(", "arg", ")", ":", "\n", "        ", "if", "Evaluation", ".", "gpu", "is", "not", "None", ":", "\n", "            ", "return", "arg", ".", "cuda", "(", "Evaluation", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "return", "arg", "\n", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.src.evaluate.Evaluation.iterate": [[286, 290], ["enumerate", "tqdm", "enumerate"], "methods", ["None"], ["", "", "def", "iterate", "(", "self", ",", "loader", ")", ":", "\n", "        ", "if", "self", ".", "args", ".", "tqdm", "and", "tqdm", "is", "not", "None", ":", "\n", "            ", "return", "tqdm", "(", "enumerate", "(", "loader", ")", ")", "\n", "", "return", "enumerate", "(", "loader", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.src.evaluate.Evaluation.use_train_statistics": [[291, 294], ["isinstance", "module.train"], "methods", ["home.repos.pwc.inspect_result.bethgelab_robustness.robustness_eval.main.train"], ["", "def", "use_train_statistics", "(", "self", ",", "module", ")", ":", "\n", "        ", "if", "isinstance", "(", "module", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "            ", "module", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.src.evaluate.Evaluation.elapsed_time": [[295, 303], ["time.time", "hasattr", "time.time", "time.time"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "elapsed_time", "(", "self", ")", ":", "\n", "        ", "\"\"\" return elapsed time since last call \"\"\"", "\n", "if", "not", "hasattr", "(", "self", ",", "\"_end\"", ")", ":", "\n", "            ", "self", ".", "_end", "=", "time", ".", "time", "(", ")", "\n", "", "span", "=", "time", ".", "time", "(", ")", "-", "self", ".", "_end", "\n", "self", ".", "_end", "=", "time", ".", "time", "(", ")", "\n", "return", "span", "\n", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.src.evaluate.Evaluation.select_ablations": [[304, 354], ["print", "robusta.batchnorm.bn.adapt", "print", "robusta.batchnorm.bn.adapt_parts", "print", "robusta.batchnorm.stages.choose_one_adaptation", "print", "robusta.batchnorm.stages.leave_one_out_adaptation", "print", "robusta.batchnorm.bn.adapt_bayesian", "setattr", "float", "float"], "methods", ["home.repos.pwc.inspect_result.bethgelab_robustness.batchnorm.__init__.adapt", "home.repos.pwc.inspect_result.bethgelab_robustness.batchnorm.bn.adapt_parts", "home.repos.pwc.inspect_result.bethgelab_robustness.batchnorm.stages.choose_one_adaptation", "home.repos.pwc.inspect_result.bethgelab_robustness.batchnorm.stages.leave_one_out_adaptation", "home.repos.pwc.inspect_result.bethgelab_robustness.batchnorm.bn.adapt_bayesian"], ["", "def", "select_ablations", "(", "self", ")", ":", "\n", "        ", "\"\"\" Check args for ablation settings \"\"\"", "\n", "if", "self", ".", "args", ".", "ema_batchnorm", ":", "\n", "            ", "print", "(", "\n", "\"| Collecting statistics during test time with exponential \\\n                    moving averaging. Experimental version from 30-04\"", "\n", ")", "\n", "bn", ".", "adapt", "(", "self", ".", "model", ")", "\n", "self", ".", "warmup_batches", "=", "(", "\n", "self", ".", "args", ".", "ema_warmup_samples", "//", "self", ".", "args", ".", "test_batch_size", "\n", ")", "\n", "assert", "self", ".", "warmup_batches", ">", "0", "\n", "return", "\n", "\n", "", "if", "self", ".", "args", ".", "adapt_mean", "or", "self", ".", "args", ".", "adapt_var", ":", "\n", "            ", "print", "(", "\n", "f\"| Adapting mean[{self.args.adapt_mean}] and \\\n                    var[{self.args.adapt_var}]\"", "\n", ")", "\n", "bn", ".", "adapt_parts", "(", "self", ".", "model", ",", "\n", "self", ".", "args", ".", "adapt_mean", ",", "self", ".", "args", ".", "adapt_var", ")", "\n", "return", "\n", "\n", "", "if", "self", ".", "args", ".", "adapt_stage", "is", "not", "None", ":", "\n", "            ", "print", "(", "f\"| Adapting only model stage {self.args.adapt_stage}\"", ")", "\n", "stages", ".", "choose_one_adaptation", "(", "self", ".", "model", ",", "self", ".", "args", ".", "adapt_stage", ")", "\n", "return", "\n", "\n", "", "if", "self", ".", "args", ".", "leave_stage", "is", "not", "None", ":", "\n", "            ", "print", "(", "f\"| Adapting all but model stage {self.args.adapt_stage}\"", ")", "\n", "stages", ".", "leave_one_out_adaptation", "(", "self", ".", "model", ",", "self", ".", "args", ".", "leave_stage", ")", "\n", "return", "\n", "\n", "", "if", "self", ".", "args", ".", "adapt_prior", "is", "not", "None", "or", "self", ".", "args", ".", "adapt_prior_bsz", "is", "not", "None", ":", "\n", "\n", "            ", "assert", "self", ".", "args", ".", "adapt_prior", "is", "None", "or", "self", ".", "args", ".", "adapt_prior_bsz", "is", "None", "\n", "\n", "if", "self", ".", "args", ".", "adapt_prior_bsz", "is", "not", "None", ":", "\n", "                ", "n", "=", "self", ".", "args", ".", "test_batch_size", "\n", "N", "=", "self", ".", "args", ".", "adapt_prior_bsz", "\n", "setattr", "(", "self", ".", "args", ",", "\"adapt_prior\"", ",", "float", "(", "N", ")", "/", "float", "(", "N", "+", "n", ")", ")", "\n", "", "print", "(", "\n", "f\"| Using a prior on the statistics with \\\n                    lambda = {self.args.adapt_prior}\"", "\n", ")", "\n", "bn", ".", "adapt_bayesian", "(", "self", ".", "model", ",", "self", ".", "args", ".", "adapt_prior", ",", "\n", "Evaluation", ".", "to_device", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.src.evaluate.Evaluation.__call__": [[355, 400], ["print", "os.system", "evaluate.Evaluation.model.eval", "evaluate.Emissions", "print", "evaluate.Evaluation.model.apply", "print", "evaluate.Evaluation.model.eval", "evaluate.Evaluation.select_ablations", "len", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "print", "evaluate.Evaluation.iterate", "print", "evaluate.Evaluation.iterate", "evaluate.Evaluation.to_device", "evaluate.Evaluation.to_device", "evaluate.Evaluation.model", "evaluate.Evaluation.criterion", "evaluate.Emissions.append", "evaluate.Evaluation.to_device", "evaluate.Evaluation.model", "Emissions.progress.display"], "methods", ["home.repos.pwc.inspect_result.bethgelab_robustness.src.evaluate.Evaluation.select_ablations", "home.repos.pwc.inspect_result.bethgelab_robustness.bin.adapt_full.iterate", "home.repos.pwc.inspect_result.bethgelab_robustness.bin.adapt_full.iterate", "home.repos.pwc.inspect_result.bethgelab_robustness.src.evaluate.Evaluation.to_device", "home.repos.pwc.inspect_result.bethgelab_robustness.src.evaluate.Evaluation.to_device", "home.repos.pwc.inspect_result.bethgelab_robustness.src.evaluate.Emissions.append", "home.repos.pwc.inspect_result.bethgelab_robustness.src.evaluate.Evaluation.to_device", "home.repos.pwc.inspect_result.bethgelab_robustness.src.meters.ProgressMeter.display"], ["", "", "def", "__call__", "(", "self", ",", "val_loader", ")", ":", "\n", "        ", "print", "(", "\"| Start evaluation\"", ")", "\n", "\n", "os", ".", "system", "(", "\"git log -n1 --oneline\"", ")", "\n", "self", ".", "warmup_batches", "=", "0", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "if", "self", ".", "args", ".", "train_mode_during_eval", ":", "\n", "            ", "print", "(", "\"| Using model in train() mode\"", ")", "\n", "self", ".", "model", ".", "apply", "(", "self", ".", "use_train_statistics", ")", "\n", "\n", "assert", "self", ".", "args", ".", "ema_batchnorm", "is", "False", ",", "\"--ema-batchnorm mode does not make sense with \\\n                    --train-mode-during-eval\"", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"| Using model in eval() mode\"", ")", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "self", ".", "select_ablations", "(", ")", "\n", "\n", "", "emissions", "=", "Emissions", "(", "len", "(", "val_loader", ")", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "_", "=", "self", ".", "elapsed_time", "\n", "\n", "if", "self", ".", "warmup_batches", ">", "0", ":", "\n", "                ", "print", "(", "f\"| Starting warmup for a total of \\\n                    {self.warmup_batches} batches\"", ")", "\n", "for", "i", ",", "(", "images", ",", "target", ")", "in", "self", ".", "iterate", "(", "val_loader", ")", ":", "\n", "                    ", "if", "i", ">", "self", ".", "warmup_batches", ":", "\n", "                        ", "break", "\n", "", "images", "=", "Evaluation", ".", "to_device", "(", "images", ")", "\n", "output", "=", "self", ".", "model", "(", "images", ")", "\n", "\n", "", "", "print", "(", "\"| Starting evaluation\"", ")", "\n", "for", "i", ",", "(", "images", ",", "target", ")", "in", "self", ".", "iterate", "(", "val_loader", ")", ":", "\n", "                ", "images", "=", "Evaluation", ".", "to_device", "(", "images", ")", "\n", "target", "=", "Evaluation", ".", "to_device", "(", "target", ")", "\n", "output", "=", "self", ".", "model", "(", "images", ")", "\n", "loss", "=", "self", ".", "criterion", "(", "output", ",", "target", ")", "\n", "\n", "emissions", ".", "append", "(", "output", ",", "target", ",", "loss", ",", "self", ".", "elapsed_time", ")", "\n", "if", "i", "%", "self", ".", "args", ".", "print_freq", "==", "0", ":", "\n", "                    ", "emissions", ".", "progress", ".", "display", "(", "i", ")", "\n", "if", "self", ".", "args", ".", "dry_run", ":", "\n", "                        ", "break", "\n", "\n", "", "", "", "", "return", "emissions", "\n", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.src.evaluate.print_version": [[40, 47], ["globals().items", "isinstance", "globals", "print"], "function", ["None"], ["", "def", "print_version", "(", ")", ":", "\n", "    ", "for", "name", ",", "val", "in", "globals", "(", ")", ".", "items", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "val", ",", "types", ".", "ModuleType", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "print", "(", "f\"| {val.__name__} version: {imp.__version__}\"", ")", "\n", "", "except", "Exception", ":", "\n", "                ", "continue", "\n", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.src.evaluate.main": [[49, 76], ["evaluate.print_version", "config.parse_args", "print", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "print", "evaluate.main_worker", "random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "warnings.warn", "warnings.warn"], "function", ["home.repos.pwc.inspect_result.bethgelab_robustness.src.evaluate.print_version", "home.repos.pwc.inspect_result.bethgelab_robustness.src.config.parse_args", "home.repos.pwc.inspect_result.bethgelab_robustness.src.evaluate.main_worker"], ["", "", "", "", "def", "main", "(", "argv", ")", ":", "\n", "    ", "print_version", "(", ")", "\n", "\n", "args", "=", "config", ".", "parse_args", "(", "argv", ")", "\n", "print", "(", "\"| Parsed arguments:\"", ",", "args", ")", "\n", "\n", "if", "args", ".", "seed", "is", "not", "None", ":", "\n", "        ", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "cudnn", ".", "deterministic", "=", "True", "\n", "warnings", ".", "warn", "(", "\n", "\"You have chosen to seed training. \"", "\n", "\"This will turn on the CUDNN deterministic setting, \"", "\n", "\"which can slow down your training considerably! \"", "\n", "\"You may see unexpected behavior when restarting \"", "\n", "\"from checkpoints.\"", "\n", ")", "\n", "\n", "", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "        ", "warnings", ".", "warn", "(", "\n", "\"You have chosen a specific GPU. This will completely \"", "\n", "\"disable data parallelism.\"", "\n", ")", "\n", "\n", "", "ngpus_per_node", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "print", "(", "f\"| Using {ngpus_per_node} gpus.\"", ")", "\n", "return", "main_worker", "(", "args", ".", "gpu", ",", "ngpus_per_node", ",", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.src.evaluate.main_worker": [[78, 202], ["torch.CrossEntropyLoss", "torchvision.Normalize", "T.extend", "print", "glob.glob", "print", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "print", "evaluate.Evaluation", "Evaluation.", "print", "print", "args.arch.startswith", "args.arch.endswith", "torch.hub.load", "torch.hub.load", "torch.hub.load", "torch.hub.load", "torch.hub.load", "torch.hub.load", "torch.hub.load", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "criterion.cuda.cuda", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "robusta.models.resnet_gn.resnet152.load_state_dict", "T.extend", "efficientnet_pytorch.EfficientNet.get_image_size", "T.extend", "os.path.join", "len", "print", "torchvision.ImageFolder", "print", "print", "torch.utils.data.ConcatDataset", "torch.utils.data.ConcatDataset", "torch.utils.data.ConcatDataset", "torch.utils.data.ConcatDataset", "torch.utils.data.ConcatDataset", "torch.utils.data.ConcatDataset", "torch.utils.data.ConcatDataset", "print", "args.arch.startswith", "args.arch.startswith", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "robusta.models.resnet_gn.resnet152.cuda", "torchvision.ToTensor", "torchvision.Compose", "efficientnet_pytorch.EfficientNet.from_pretrained", "NotImplementedError", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torchvision.Resize", "torchvision.CenterCrop", "torchvision.Resize", "torchvision.CenterCrop", "len", "torchvision.ImageFolder", "robusta.models.fixup.fixup_resnet50", "robusta.models.resnet_gn.resnet50", "torchvision.Compose", "robusta.models.resnet_gn.resnet50", "robusta.models.resnet_gn.resnet101", "robusta.models.resnet_gn.resnet101", "robusta.models.resnet_gn.resnet152", "print", "robusta.models.resnet_gn.resnet152"], "function", ["home.repos.pwc.inspect_result.bethgelab_robustness.models.fixup.fixup_resnet50", "home.repos.pwc.inspect_result.bethgelab_robustness.models.resnet_gn.resnet50", "home.repos.pwc.inspect_result.bethgelab_robustness.models.resnet_gn.resnet50", "home.repos.pwc.inspect_result.bethgelab_robustness.models.resnet_gn.resnet101", "home.repos.pwc.inspect_result.bethgelab_robustness.models.resnet_gn.resnet101", "home.repos.pwc.inspect_result.bethgelab_robustness.models.resnet_gn.resnet152", "home.repos.pwc.inspect_result.bethgelab_robustness.models.resnet_gn.resnet152"], ["", "def", "main_worker", "(", "gpu", ",", "ngpus_per_node", ",", "args", ")", ":", "\n", "    ", "args", ".", "gpu", "=", "gpu", "\n", "\n", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "        ", "print", "(", "\"| Use GPU: {} for training\"", ".", "format", "(", "args", ".", "gpu", ")", ")", "\n", "\n", "# create model", "\n", "", "if", "args", ".", "arch", ".", "startswith", "(", "\"resnext\"", ")", "and", "args", ".", "arch", ".", "endswith", "(", "\"wsl\"", ")", ":", "\n", "        ", "valid_options", "=", "[", "\n", "\"resnext101_32x8d_wsl\"", ",", "\n", "\"resnext101_32x16d_wsl\"", ",", "\n", "\"resnext101_32x32d_wsl\"", ",", "\n", "\"resnext101_32x48d_wsl\"", ",", "\n", "]", "\n", "assert", "args", ".", "arch", "in", "valid_options", "\n", "model", "=", "torch", ".", "hub", ".", "load", "(", "\"facebookresearch/WSL-Images\"", ",", "args", ".", "arch", ")", "\n", "", "else", ":", "\n", "        ", "if", "args", ".", "pretrained", ":", "\n", "            ", "print", "(", "\"| => using pre-trained model '{}'\"", ".", "format", "(", "args", ".", "arch", ")", ")", "\n", "if", "\"efficientnet\"", "in", "args", ".", "arch", ":", "\n", "                ", "model", "=", "EfficientNet", ".", "from_pretrained", "(", "args", ".", "arch", ")", "\n", "", "elif", "\"fixup_resnet50\"", "in", "args", ".", "arch", ":", "\n", "                ", "model", "=", "fixup_resnet50", "(", ")", "\n", "", "elif", "\"resnet50_gn\"", "in", "args", ".", "arch", ":", "\n", "                ", "model", "=", "resnet_50_gn", "(", ")", "\n", "", "elif", "\"resnet101_gn\"", "in", "args", ".", "arch", ":", "\n", "                ", "model", "=", "resnet_101_gn", "(", ")", "\n", "", "elif", "\"resnet152_gn\"", "in", "args", ".", "arch", ":", "\n", "                ", "model", "=", "resnet_152_gn", "(", ")", "\n", "", "else", ":", "\n", "                ", "model", "=", "models", ".", "__dict__", "[", "args", ".", "arch", "]", "(", "pretrained", "=", "True", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "\"efficientnet\"", "in", "args", ".", "arch", ":", "\n", "                ", "raise", "NotImplementedError", "(", "\n", "\"Using a not pretrained Efficient Net is not supported.\"", "\n", ")", "\n", "", "elif", "\"resnet50_gn\"", "in", "args", ".", "arch", ":", "\n", "                ", "model", "=", "resnet_50_gn", "(", ")", "\n", "", "elif", "\"resnet101_gn\"", "in", "args", ".", "arch", ":", "\n", "                ", "model", "=", "resnet_101_gn", "(", ")", "\n", "", "elif", "\"resnet152_gn\"", "in", "args", ".", "arch", ":", "\n", "                ", "model", "=", "resnet_152_gn", "(", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "\"| => creating model '{}'\"", ".", "format", "(", "args", ".", "arch", ")", ")", "\n", "model", "=", "models", ".", "__dict__", "[", "args", ".", "arch", "]", "(", ")", "\n", "\n", "", "", "", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "        ", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ")", ".", "cuda", "(", ")", "\n", "\n", "# DataParallel will divide and allocate batch_size to all available GPU", "\n", "if", "args", ".", "arch", ".", "startswith", "(", "\"alexnet\"", ")", "or", "args", ".", "arch", ".", "startswith", "(", "\"vgg\"", ")", ":", "\n", "            ", "model", ".", "features", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ".", "features", ")", "\n", "model", ".", "cuda", "(", ")", "\n", "\n", "# define loss function (criterion) and optimizer", "\n", "", "", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "        ", "criterion", "=", "criterion", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "\n", "# optionally evaluate previous model", "\n", "", "if", "args", ".", "resume", "!=", "\"\"", ":", "\n", "        ", "print", "(", "'Loading model checkpoint'", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "resume", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "\"state_dict\"", "]", ")", "\n", "\n", "# cudnn.benchmark = True", "\n", "\n", "# Data loading code", "\n", "", "normalize", "=", "transforms", ".", "Normalize", "(", "\n", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", "\n", ")", "\n", "T", "=", "[", "]", "\n", "if", "args", ".", "resize_and_crop", "and", "\"efficientnet\"", "not", "in", "args", ".", "arch", ":", "\n", "        ", "T", ".", "extend", "(", "\n", "[", "\n", "transforms", ".", "Resize", "(", "args", ".", "resizepar", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "args", ".", "croppar", ")", ",", "\n", "]", "\n", ")", "\n", "", "if", "\"efficientnet\"", "in", "args", ".", "arch", ":", "\n", "        ", "image_size", "=", "EfficientNet", ".", "get_image_size", "(", "args", ".", "arch", ")", "\n", "T", ".", "extend", "(", "\n", "[", "\n", "transforms", ".", "Resize", "(", "image_size", ",", "interpolation", "=", "PIL", ".", "Image", ".", "BICUBIC", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "image_size", ")", ",", "\n", "]", "\n", ")", "\n", "", "T", ".", "extend", "(", "[", "transforms", ".", "ToTensor", "(", ")", ",", "normalize", "]", ")", "\n", "print", "(", "T", ")", "\n", "\n", "fnames", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "args", ".", "imagenet_path", ",", "\"*\"", ")", ")", "\n", "print", "(", "f\"Dataset at {args.imagenet_path}, {len(fnames)}\"", ")", "\n", "if", "len", "(", "fnames", ")", "==", "1000", ":", "\n", "        ", "print", "(", "f\"| Use imagenet folder from {args.imagenet_path}\"", ")", "\n", "dataset", "=", "datasets", ".", "ImageFolder", "(", "\n", "args", ".", "imagenet_path", ",", "transforms", ".", "Compose", "(", "T", ")", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "f\"| Use subfolders in {args.imagenet_path}\"", ")", "\n", "print", "(", "\"|\"", "+", "\"\\n|\"", ".", "join", "(", "fnames", ")", ")", "\n", "dataset", "=", "torch", ".", "utils", ".", "data", ".", "ConcatDataset", "(", "\n", "[", "datasets", ".", "ImageFolder", "(", "path", ",", "transforms", ".", "Compose", "(", "T", ")", ")", "\n", "for", "path", "in", "fnames", "]", "\n", ")", "\n", "\n", "", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "dataset", ",", "\n", "batch_size", "=", "args", ".", "test_batch_size", ",", "\n", "shuffle", "=", "not", "args", ".", "no_shuffle", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "\n", "pin_memory", "=", "True", ",", "\n", ")", "\n", "print", "(", "\"| Shuffling: \"", ",", "not", "args", ".", "no_shuffle", ")", "\n", "\n", "Evaluation", ".", "gpu", "=", "args", ".", "gpu", "\n", "evaluate", "=", "Evaluation", "(", "model", ",", "criterion", ",", "args", ")", "\n", "emissions", "=", "evaluate", "(", "val_loader", ")", "\n", "\n", "top1", ",", "top5", ",", "loss", "=", "emissions", ".", "top1", ".", "avg", ",", "emissions", ".", "top5", ".", "avg", ",", "emissions", ".", "losses", ".", "avg", "\n", "print", "(", "f\"| Finished eval with: top-1 {top1}; top-5 {top5}; loss {loss}\"", ")", "\n", "\n", "return", "emissions", "\n", "# emissions.finalize().save(args.emission_path, args=args)", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.src.meters.AverageMeter.__init__": [[6, 10], ["meters.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.bethgelab_robustness.batchnorm.bn.PartlyAdaptiveBN.reset"], ["def", "__init__", "(", "self", ",", "name", ",", "fmt", "=", "\":f\"", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "fmt", "=", "fmt", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.src.meters.AverageMeter.reset": [[11, 16], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.src.meters.AverageMeter.update": [[17, 22], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.src.meters.AverageMeter.__str__": [[23, 26], ["fmtstr.format"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "fmtstr", "=", "\"{name} {val\"", "+", "self", ".", "fmt", "+", "\"} ({avg\"", "+", "self", ".", "fmt", "+", "\"})\"", "\n", "return", "fmtstr", ".", "format", "(", "**", "self", ".", "__dict__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.src.meters.ProgressMeter.__init__": [[29, 33], ["meters.ProgressMeter._get_batch_fmtstr"], "methods", ["home.repos.pwc.inspect_result.bethgelab_robustness.src.meters.ProgressMeter._get_batch_fmtstr"], ["    ", "def", "__init__", "(", "self", ",", "num_batches", ",", "meters", ",", "prefix", "=", "\"\"", ")", ":", "\n", "        ", "self", ".", "batch_fmtstr", "=", "self", ".", "_get_batch_fmtstr", "(", "num_batches", ")", "\n", "self", ".", "meters", "=", "meters", "\n", "self", ".", "prefix", "=", "prefix", "\n", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.src.meters.ProgressMeter.display": [[34, 38], ["print", "str", "meters.ProgressMeter.batch_fmtstr.format"], "methods", ["None"], ["", "def", "display", "(", "self", ",", "batch", ")", ":", "\n", "        ", "entries", "=", "[", "self", ".", "prefix", "+", "self", ".", "batch_fmtstr", ".", "format", "(", "batch", ")", "]", "\n", "entries", "+=", "[", "str", "(", "meter", ")", "for", "meter", "in", "self", ".", "meters", "]", "\n", "print", "(", "\"\\t\"", ".", "join", "(", "entries", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.src.meters.ProgressMeter._get_batch_fmtstr": [[39, 43], ["len", "str", "str", "fmt.format"], "methods", ["None"], ["", "def", "_get_batch_fmtstr", "(", "self", ",", "num_batches", ")", ":", "\n", "        ", "num_digits", "=", "len", "(", "str", "(", "num_batches", "//", "1", ")", ")", "\n", "fmt", "=", "\"{:\"", "+", "str", "(", "num_digits", ")", "+", "\"d}\"", "\n", "return", "\"[\"", "+", "fmt", "+", "\"/\"", "+", "fmt", ".", "format", "(", "num_batches", ")", "+", "\"]\"", "\n", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.src.meters.get_accuracy": [[45, 60], ["torch.no_grad", "max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].reshape().float().sum", "res.append", "correct[].reshape().float().sum.mul_", "target.view", "correct[].reshape().float", "correct[].reshape"], "function", ["home.repos.pwc.inspect_result.bethgelab_robustness.src.evaluate.Emissions.append"], ["", "", "def", "get_accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"Computes the accuracy over the k top predictions for the specified values of k\"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "            ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "reshape", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ",", "keepdim", "=", "True", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "", "", ""]], "home.repos.pwc.inspect_result.bethgelab_robustness.bin.adapt_full.ZipLoader.__init__": [[134, 137], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "outputs", ",", "targets", ")", ":", "\n", "        ", "self", ".", "outputs", "=", "outputs", "\n", "self", ".", "targets", "=", "targets", "\n", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.bin.adapt_full.ZipLoader.__getitem__": [[138, 146], ["len"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "if", "index", ">=", "len", "(", "self", ")", ":", "\n", "            ", "raise", "StopIteration", "\n", "", "outputs", "=", "self", ".", "outputs", "[", "index", "]", "\n", "targets", "=", "self", ".", "targets", "[", "index", "]", "\n", "# self.outputs[index] = None", "\n", "# self.targets[index] = None", "\n", "return", "outputs", ",", "targets", "\n", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.bin.adapt_full.ZipLoader.__len__": [[147, 149], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "outputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.bin.adapt_full.get_stages": [[22, 55], ["torch.nn.Sequential", "isinstance", "current_module.append", "flattened_stages.append", "adapt_full.count_bn_layers", "stages.append", "flattened_stages.append", "torch.nn.Sequential"], "function", ["home.repos.pwc.inspect_result.bethgelab_robustness.src.evaluate.Emissions.append", "home.repos.pwc.inspect_result.bethgelab_robustness.src.evaluate.Emissions.append", "home.repos.pwc.inspect_result.bethgelab_robustness.bin.adapt_full.count_bn_layers", "home.repos.pwc.inspect_result.bethgelab_robustness.src.evaluate.Emissions.append", "home.repos.pwc.inspect_result.bethgelab_robustness.src.evaluate.Emissions.append"], ["def", "get_stages", "(", "model", ")", ":", "\n", "    ", "input_stage", "=", "nn", ".", "Sequential", "(", "\n", "model", ".", "conv1", ",", "\n", "model", ".", "bn1", ",", "\n", "model", ".", "relu", ",", "\n", "model", ".", "maxpool", ",", "\n", ")", "\n", "stages", "=", "(", "\n", "model", ".", "layer1", ",", "\n", "model", ".", "layer2", ",", "\n", "model", ".", "layer3", ",", "\n", "model", ".", "layer4", ",", "\n", ")", "\n", "flattened_stages", "=", "[", "]", "\n", "for", "stage", "in", "stages", ":", "\n", "        ", "if", "isinstance", "(", "stage", ",", "nn", ".", "Sequential", ")", ":", "\n", "            ", "for", "layer", "in", "stage", ":", "\n", "                ", "flattened_stages", ".", "append", "(", "layer", ")", "\n", "", "", "else", ":", "\n", "            ", "flattened_stages", ".", "append", "(", "stage", ")", "\n", "\n", "", "", "stages", "=", "[", "]", "\n", "current_module", "=", "[", "]", "\n", "for", "stage", "in", "flattened_stages", ":", "\n", "        ", "current_module", ".", "append", "(", "stage", ")", "\n", "if", "count_bn_layers", "(", "stage", ")", ">", "0", ":", "\n", "            ", "stages", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "current_module", ")", ")", "\n", "current_module", "=", "[", "]", "\n", "\n", "", "", "stages", "=", "[", "\n", "input_stage", ",", "\n", "]", "+", "stages", "\n", "return", "stages", "\n", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.bin.adapt_full.count_bn_layers": [[57, 59], ["len", "list", "filter", "stage.modules", "isinstance"], "function", ["None"], ["", "def", "count_bn_layers", "(", "stage", ")", ":", "\n", "    ", "return", "len", "(", "list", "(", "filter", "(", "lambda", "m", ":", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ",", "stage", ".", "modules", "(", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.bin.adapt_full.reset_stats": [[61, 68], ["isinstance", "module.parameters", "module.reset_running_stats", "p.requires_grad_"], "function", ["None"], ["", "def", "reset_stats", "(", "module", ")", ":", "\n", "    ", "if", "isinstance", "(", "module", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "module", ".", "reset_running_stats", "(", ")", "\n", "# Use exponential moving average", "\n", "module", ".", "momentum", "=", "None", "\n", "", "for", "p", "in", "module", ".", "parameters", "(", ")", ":", "\n", "        ", "p", ".", "requires_grad_", "(", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.bin.adapt_full.get_args": [[70, 93], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.bethgelab_robustness.src.config.parse_args"], ["", "", "def", "get_args", "(", ")", ":", "\n", "\n", "    ", "import", "argparse", "\n", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "description", "=", "\"Full model adaptation to the test set.\"", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--batch-size\"", ",", "type", "=", "int", ",", "default", "=", "128", ")", "\n", "parser", ".", "add_argument", "(", "\"--dataset\"", ",", "type", "=", "str", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "\"--workers\"", ",", "\"-j\"", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "\"--output\"", ",", "\"-o\"", ",", "type", "=", "str", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "\"--dry-run\"", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--verbose\"", ",", "\"-v\"", ",", "type", "=", "str", ",", "default", "=", "\"false\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--resume\"", ",", "\n", "default", "=", "\"\"", ",", "\n", "type", "=", "str", ",", "\n", "metavar", "=", "\"PATH\"", ",", "\n", "help", "=", "\"path to latest checkpoint (default: none)\"", ",", "\n", ")", "\n", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.bin.adapt_full.get_dataset": [[95, 113], ["torchvision.transforms.Compose", "glob.glob", "os.path.join", "len", "print", "torchvision.datasets.ImageFolder", "print", "print", "torch.utils.data.ConcatDataset", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.Compose", "torchvision.datasets.ImageFolder", "torchvision.transforms.Compose"], "function", ["None"], ["", "def", "get_dataset", "(", "args", ")", ":", "\n", "    ", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", "\n", "\n", "T", "=", "Compose", "(", "[", "ToTensor", "(", ")", ",", "Normalize", "(", "mean", ",", "std", ")", "]", ")", "\n", "\n", "fnames", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "args", ".", "dataset", ",", "\"*\"", ")", ")", "\n", "if", "len", "(", "fnames", ")", "==", "1000", ":", "\n", "        ", "print", "(", "f\"| Use imagenet folder from {args.dataset}\"", ")", "\n", "dataset", "=", "datasets", ".", "ImageFolder", "(", "args", ".", "dataset", ",", "Compose", "(", "T", ")", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "f\"| Use subfolders in {args.dataset}\"", ")", "\n", "print", "(", "\"|\"", "+", "\"\\n|\"", ".", "join", "(", "fnames", ")", ")", "\n", "dataset", "=", "torch", ".", "utils", ".", "data", ".", "ConcatDataset", "(", "\n", "[", "datasets", ".", "ImageFolder", "(", "path", ",", "Compose", "(", "T", ")", ")", "for", "path", "in", "fnames", "]", "\n", ")", "\n", "\n", "", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.bin.adapt_full.get_loader": [[115, 124], ["torch.utils.data.DataLoader"], "function", ["None"], ["", "def", "get_loader", "(", "dataset", ",", "args", ")", ":", "\n", "    ", "loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "dataset", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "\n", "pin_memory", "=", "True", ",", "\n", ")", "\n", "return", "loader", "\n", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.bin.adapt_full.iterate": [[126, 131], ["tqdm.tqdm", "enumerate", "enumerate", "len"], "function", ["None"], ["", "def", "iterate", "(", "loader", ",", "args", ")", ":", "\n", "    ", "if", "args", ".", "verbose", "==", "\"tqdm\"", ":", "\n", "        ", "return", "tqdm", ".", "tqdm", "(", "enumerate", "(", "loader", ")", ",", "total", "=", "len", "(", "loader", ")", ")", "\n", "", "else", ":", "\n", "        ", "return", "enumerate", "(", "loader", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.tests.run_test.test_architectures": [[12, 49], ["pytest.mark.parametrize", "run.main", "run.main.predictions[].max", "str"], "function", ["home.repos.pwc.inspect_result.bethgelab_robustness.src.evaluate.main"], ["@", "pytest", ".", "mark", ".", "parametrize", "(", "\"arch\"", ",", "[", "\n", "(", "\"alexnet\"", ")", ",", "\n", "(", "\"efficientnet-b0\"", ")", ",", "\n", "(", "\"efficientnet-b1\"", ")", ",", "\n", "(", "\"fixup_resnet50\"", ")", ",", "\n", "(", "\"resnet50\"", ")", ",", "\n", "(", "\"resnet101\"", ")", ",", "\n", "(", "\"resnet152\"", ")", ",", "\n", "(", "\"resnet50_gn\"", ")", ",", "\n", "(", "\"resnet101_gn\"", ")", ",", "\n", "(", "\"resnet152_gn\"", ")", ",", "\n", "(", "\"resnext101_32x8d_wsl\"", ")", ",", "\n", "(", "\"resnext101_32x16d_wsl\"", ")", ",", "\n", "(", "\"resnext101_32x32d_wsl\"", ")", ",", "\n", "(", "\"resnext101_32x48d_wsl\"", ")", ",", "\n", "(", "\"vgg11\"", ")", ",", "\n", "(", "\"vgg11_bn\"", ")", ",", "\n", "(", "\"vgg19\"", ")", ",", "\n", "(", "\"vgg19_bn\"", ")", ",", "\n", "]", ")", "\n", "def", "test_architectures", "(", "arch", ")", ":", "\n", "    ", "emissions", "=", "run", ".", "main", "(", "[", "\n", "\"--test-batch-size\"", ",", "\"1\"", ",", "\n", "\"--imagenet-path\"", ",", "str", "(", "module_folder", ")", "+", "\"/tests/imagenet_c\"", ",", "\n", "\"--arch\"", ",", "arch", ",", "\n", "\"--pretrained\"", ",", "\n", "\"--emission-path\"", ",", "\"/tmp/run_experiment\"", "\n", "]", ")", "\n", "\n", "# This is a dry run test. We test that:", "\n", "# 1. code compiles", "\n", "# 2. feed-forward works and we have a prediction for an input image. ", "\n", "assert", "emissions", ".", "predictions", "is", "not", "None", "\n", "\n", "# TODO why all predictions are 0 on fixup_resnet50?", "\n", "if", "arch", "is", "not", "\"fixup_resnet50\"", ":", "\n", "        ", "assert", "emissions", ".", "predictions", "[", "0", "]", ".", "max", "(", ")", ">", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.tests.run_test.test_adaptations": [[51, 77], ["pytest.mark.parametrize", "run.main", "run.main.predictions[].max", "str"], "function", ["home.repos.pwc.inspect_result.bethgelab_robustness.src.evaluate.main"], ["", "", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"extra_args\"", ",", "[", "\n", "(", "\"--resize-and-crop\"", ",", ")", ",", "\n", "(", "\"--ema-batchnorm\"", ",", ")", ",", "\n", "(", "\"--adapt-mean\"", ",", ")", ",", "\n", "(", "\"--adapt-stage\"", ",", "\"0\"", ")", ",", "\n", "(", "\"--leave-stage\"", ",", "\"0\"", ")", ",", "\n", "(", "\"--adapt-prior\"", ",", "\"0\"", ")", ",", "\n", "(", "\"--adapt-prior-bsz\"", ",", "\"0\"", ")", ",", "\n", "(", "\"--train-mode-during-eval\"", ",", ")", "\n", "]", ")", "\n", "def", "test_adaptations", "(", "extra_args", ")", ":", "\n", "    ", "emissions", "=", "run", ".", "main", "(", "[", "\n", "\"--test-batch-size\"", ",", "\"1\"", ",", "\n", "\"--imagenet-path\"", ",", "str", "(", "module_folder", ")", "+", "\"/tests/imagenet_c\"", ",", "\n", "\"--arch\"", ",", "\"resnet50\"", ",", "\n", "\"--pretrained\"", ",", "\n", "\"--emission-path\"", ",", "\"/tmp/run_experiment\"", ",", "\n", "*", "extra_args", "# expand values from tuple", "\n", "]", ")", "\n", "\n", "# This is a dry run test. We test that:", "\n", "# 1. code compiles", "\n", "# 2. applying an adaptation works", "\n", "# 3. feed-forward works and we have a prediction for an input image. ", "\n", "assert", "emissions", ".", "predictions", "is", "not", "None", "and", "emissions", ".", "predictions", "[", "0", "]", ".", "max", "(", ")", ">", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.datasets.imagenet200.ImageNet200.get_class_mask": [[68, 74], ["None"], "methods", ["None"], ["def", "get_class_mask", "(", "self", ")", ":", "\n", "        ", "all_wnids", "=", "[", "'n01440764'", ",", "'n01443537'", ",", "'n01484850'", ",", "'n01491361'", ",", "'n01494475'", ",", "'n01496331'", ",", "'n01498041'", ",", "'n01514668'", ",", "'n01514859'", ",", "'n01518878'", ",", "'n01530575'", ",", "'n01531178'", ",", "'n01532829'", ",", "'n01534433'", ",", "'n01537544'", ",", "'n01558993'", ",", "'n01560419'", ",", "'n01580077'", ",", "'n01582220'", ",", "'n01592084'", ",", "'n01601694'", ",", "'n01608432'", ",", "'n01614925'", ",", "'n01616318'", ",", "'n01622779'", ",", "'n01629819'", ",", "'n01630670'", ",", "'n01631663'", ",", "'n01632458'", ",", "'n01632777'", ",", "'n01641577'", ",", "'n01644373'", ",", "'n01644900'", ",", "'n01664065'", ",", "'n01665541'", ",", "'n01667114'", ",", "'n01667778'", ",", "'n01669191'", ",", "'n01675722'", ",", "'n01677366'", ",", "'n01682714'", ",", "'n01685808'", ",", "'n01687978'", ",", "'n01688243'", ",", "'n01689811'", ",", "'n01692333'", ",", "'n01693334'", ",", "'n01694178'", ",", "'n01695060'", ",", "'n01697457'", ",", "'n01698640'", ",", "'n01704323'", ",", "'n01728572'", ",", "'n01728920'", ",", "'n01729322'", ",", "'n01729977'", ",", "'n01734418'", ",", "'n01735189'", ",", "'n01737021'", ",", "'n01739381'", ",", "'n01740131'", ",", "'n01742172'", ",", "'n01744401'", ",", "'n01748264'", ",", "'n01749939'", ",", "'n01751748'", ",", "'n01753488'", ",", "'n01755581'", ",", "'n01756291'", ",", "'n01768244'", ",", "'n01770081'", ",", "'n01770393'", ",", "'n01773157'", ",", "'n01773549'", ",", "'n01773797'", ",", "'n01774384'", ",", "'n01774750'", ",", "'n01775062'", ",", "'n01776313'", ",", "'n01784675'", ",", "'n01795545'", ",", "'n01796340'", ",", "'n01797886'", ",", "'n01798484'", ",", "'n01806143'", ",", "'n01806567'", ",", "'n01807496'", ",", "'n01817953'", ",", "'n01818515'", ",", "'n01819313'", ",", "'n01820546'", ",", "'n01824575'", ",", "'n01828970'", ",", "'n01829413'", ",", "'n01833805'", ",", "'n01843065'", ",", "'n01843383'", ",", "'n01847000'", ",", "'n01855032'", ",", "'n01855672'", ",", "'n01860187'", ",", "'n01871265'", ",", "'n01872401'", ",", "'n01873310'", ",", "'n01877812'", ",", "'n01882714'", ",", "'n01883070'", ",", "'n01910747'", ",", "'n01914609'", ",", "'n01917289'", ",", "'n01924916'", ",", "'n01930112'", ",", "'n01943899'", ",", "'n01944390'", ",", "'n01945685'", ",", "'n01950731'", ",", "'n01955084'", ",", "'n01968897'", ",", "'n01978287'", ",", "'n01978455'", ",", "'n01980166'", ",", "'n01981276'", ",", "'n01983481'", ",", "'n01984695'", ",", "'n01985128'", ",", "'n01986214'", ",", "'n01990800'", ",", "'n02002556'", ",", "'n02002724'", ",", "'n02006656'", ",", "'n02007558'", ",", "'n02009229'", ",", "'n02009912'", ",", "'n02011460'", ",", "'n02012849'", ",", "'n02013706'", ",", "'n02017213'", ",", "'n02018207'", ",", "'n02018795'", ",", "'n02025239'", ",", "'n02027492'", ",", "'n02028035'", ",", "'n02033041'", ",", "'n02037110'", ",", "'n02051845'", ",", "'n02056570'", ",", "'n02058221'", ",", "'n02066245'", ",", "'n02071294'", ",", "'n02074367'", ",", "'n02077923'", ",", "'n02085620'", ",", "'n02085782'", ",", "'n02085936'", ",", "'n02086079'", ",", "'n02086240'", ",", "'n02086646'", ",", "'n02086910'", ",", "'n02087046'", ",", "'n02087394'", ",", "'n02088094'", ",", "'n02088238'", ",", "'n02088364'", ",", "'n02088466'", ",", "'n02088632'", ",", "'n02089078'", ",", "'n02089867'", ",", "'n02089973'", ",", "'n02090379'", ",", "'n02090622'", ",", "'n02090721'", ",", "'n02091032'", ",", "'n02091134'", ",", "'n02091244'", ",", "'n02091467'", ",", "'n02091635'", ",", "'n02091831'", ",", "'n02092002'", ",", "'n02092339'", ",", "'n02093256'", ",", "'n02093428'", ",", "'n02093647'", ",", "'n02093754'", ",", "'n02093859'", ",", "'n02093991'", ",", "'n02094114'", ",", "'n02094258'", ",", "'n02094433'", ",", "'n02095314'", ",", "'n02095570'", ",", "'n02095889'", ",", "'n02096051'", ",", "'n02096177'", ",", "'n02096294'", ",", "'n02096437'", ",", "'n02096585'", ",", "'n02097047'", ",", "'n02097130'", ",", "'n02097209'", ",", "'n02097298'", ",", "'n02097474'", ",", "'n02097658'", ",", "'n02098105'", ",", "'n02098286'", ",", "'n02098413'", ",", "'n02099267'", ",", "'n02099429'", ",", "'n02099601'", ",", "'n02099712'", ",", "'n02099849'", ",", "'n02100236'", ",", "'n02100583'", ",", "'n02100735'", ",", "'n02100877'", ",", "'n02101006'", ",", "'n02101388'", ",", "'n02101556'", ",", "'n02102040'", ",", "'n02102177'", ",", "'n02102318'", ",", "'n02102480'", ",", "'n02102973'", ",", "'n02104029'", ",", "'n02104365'", ",", "'n02105056'", ",", "'n02105162'", ",", "'n02105251'", ",", "'n02105412'", ",", "'n02105505'", ",", "'n02105641'", ",", "'n02105855'", ",", "'n02106030'", ",", "'n02106166'", ",", "'n02106382'", ",", "'n02106550'", ",", "'n02106662'", ",", "'n02107142'", ",", "'n02107312'", ",", "'n02107574'", ",", "'n02107683'", ",", "'n02107908'", ",", "'n02108000'", ",", "'n02108089'", ",", "'n02108422'", ",", "'n02108551'", ",", "'n02108915'", ",", "'n02109047'", ",", "'n02109525'", ",", "'n02109961'", ",", "'n02110063'", ",", "'n02110185'", ",", "'n02110341'", ",", "'n02110627'", ",", "'n02110806'", ",", "'n02110958'", ",", "'n02111129'", ",", "'n02111277'", ",", "'n02111500'", ",", "'n02111889'", ",", "'n02112018'", ",", "'n02112137'", ",", "'n02112350'", ",", "'n02112706'", ",", "'n02113023'", ",", "'n02113186'", ",", "'n02113624'", ",", "'n02113712'", ",", "'n02113799'", ",", "'n02113978'", ",", "'n02114367'", ",", "'n02114548'", ",", "'n02114712'", ",", "'n02114855'", ",", "'n02115641'", ",", "'n02115913'", ",", "'n02116738'", ",", "'n02117135'", ",", "'n02119022'", ",", "'n02119789'", ",", "'n02120079'", ",", "'n02120505'", ",", "'n02123045'", ",", "'n02123159'", ",", "'n02123394'", ",", "'n02123597'", ",", "'n02124075'", ",", "'n02125311'", ",", "'n02127052'", ",", "'n02128385'", ",", "'n02128757'", ",", "'n02128925'", ",", "'n02129165'", ",", "'n02129604'", ",", "'n02130308'", ",", "'n02132136'", ",", "'n02133161'", ",", "'n02134084'", ",", "'n02134418'", ",", "'n02137549'", ",", "'n02138441'", ",", "'n02165105'", ",", "'n02165456'", ",", "'n02167151'", ",", "'n02168699'", ",", "'n02169497'", ",", "'n02172182'", ",", "'n02174001'", ",", "'n02177972'", ",", "'n02190166'", ",", "'n02206856'", ",", "'n02219486'", ",", "'n02226429'", ",", "'n02229544'", ",", "'n02231487'", ",", "'n02233338'", ",", "'n02236044'", ",", "'n02256656'", ",", "'n02259212'", ",", "'n02264363'", ",", "'n02268443'", ",", "'n02268853'", ",", "'n02276258'", ",", "'n02277742'", ",", "'n02279972'", ",", "'n02280649'", ",", "'n02281406'", ",", "'n02281787'", ",", "'n02317335'", ",", "'n02319095'", ",", "'n02321529'", ",", "'n02325366'", ",", "'n02326432'", ",", "'n02328150'", ",", "'n02342885'", ",", "'n02346627'", ",", "'n02356798'", ",", "'n02361337'", ",", "'n02363005'", ",", "'n02364673'", ",", "'n02389026'", ",", "'n02391049'", ",", "'n02395406'", ",", "'n02396427'", ",", "'n02397096'", ",", "'n02398521'", ",", "'n02403003'", ",", "'n02408429'", ",", "'n02410509'", ",", "'n02412080'", ",", "'n02415577'", ",", "'n02417914'", ",", "'n02422106'", ",", "'n02422699'", ",", "'n02423022'", ",", "'n02437312'", ",", "'n02437616'", ",", "'n02441942'", ",", "'n02442845'", ",", "'n02443114'", ",", "'n02443484'", ",", "'n02444819'", ",", "'n02445715'", ",", "'n02447366'", ",", "'n02454379'", ",", "'n02457408'", ",", "'n02480495'", ",", "'n02480855'", ",", "'n02481823'", ",", "'n02483362'", ",", "'n02483708'", ",", "'n02484975'", ",", "'n02486261'", ",", "'n02486410'", ",", "'n02487347'", ",", "'n02488291'", ",", "'n02488702'", ",", "'n02489166'", ",", "'n02490219'", ",", "'n02492035'", ",", "'n02492660'", ",", "'n02493509'", ",", "'n02493793'", ",", "'n02494079'", ",", "'n02497673'", ",", "'n02500267'", ",", "'n02504013'", ",", "'n02504458'", ",", "'n02509815'", ",", "'n02510455'", ",", "'n02514041'", ",", "'n02526121'", ",", "'n02536864'", ",", "'n02606052'", ",", "'n02607072'", ",", "'n02640242'", ",", "'n02641379'", ",", "'n02643566'", ",", "'n02655020'", ",", "'n02666196'", ",", "'n02667093'", ",", "'n02669723'", ",", "'n02672831'", ",", "'n02676566'", ",", "'n02687172'", ",", "'n02690373'", ",", "'n02692877'", ",", "'n02699494'", ",", "'n02701002'", ",", "'n02704792'", ",", "'n02708093'", ",", "'n02727426'", ",", "'n02730930'", ",", "'n02747177'", ",", "'n02749479'", ",", "'n02769748'", ",", "'n02776631'", ",", "'n02777292'", ",", "'n02782093'", ",", "'n02783161'", ",", "'n02786058'", ",", "'n02787622'", ",", "'n02788148'", ",", "'n02790996'", ",", "'n02791124'", ",", "'n02791270'", ",", "'n02793495'", ",", "'n02794156'", ",", "'n02795169'", ",", "'n02797295'", ",", "'n02799071'", ",", "'n02802426'", ",", "'n02804414'", ",", "'n02804610'", ",", "'n02807133'", ",", "'n02808304'", ",", "'n02808440'", ",", "'n02814533'", ",", "'n02814860'", ",", "'n02815834'", ",", "'n02817516'", ",", "'n02823428'", ",", "'n02823750'", ",", "'n02825657'", ",", "'n02834397'", ",", "'n02835271'", ",", "'n02837789'", ",", "'n02840245'", ",", "'n02841315'", ",", "'n02843684'", ",", "'n02859443'", ",", "'n02860847'", ",", "'n02865351'", ",", "'n02869837'", ",", "'n02870880'", ",", "'n02871525'", ",", "'n02877765'", ",", "'n02879718'", ",", "'n02883205'", ",", "'n02892201'", ",", "'n02892767'", ",", "'n02894605'", ",", "'n02895154'", ",", "'n02906734'", ",", "'n02909870'", ",", "'n02910353'", ",", "'n02916936'", ",", "'n02917067'", ",", "'n02927161'", ",", "'n02930766'", ",", "'n02939185'", ",", "'n02948072'", ",", "'n02950826'", ",", "'n02951358'", ",", "'n02951585'", ",", "'n02963159'", ",", "'n02965783'", ",", "'n02966193'", ",", "'n02966687'", ",", "'n02971356'", ",", "'n02974003'", ",", "'n02977058'", ",", "'n02978881'", ",", "'n02979186'", ",", "'n02980441'", ",", "'n02981792'", ",", "'n02988304'", ",", "'n02992211'", ",", "'n02992529'", ",", "'n02999410'", ",", "'n03000134'", ",", "'n03000247'", ",", "'n03000684'", ",", "'n03014705'", ",", "'n03016953'", ",", "'n03017168'", ",", "'n03018349'", ",", "'n03026506'", ",", "'n03028079'", ",", "'n03032252'", ",", "'n03041632'", ",", "\n", "'n03042490'", ",", "'n03045698'", ",", "'n03047690'", ",", "'n03062245'", ",", "'n03063599'", ",", "'n03063689'", ",", "'n03065424'", ",", "'n03075370'", ",", "'n03085013'", ",", "'n03089624'", ",", "'n03095699'", ",", "'n03100240'", ",", "'n03109150'", ",", "'n03110669'", ",", "'n03124043'", ",", "'n03124170'", ",", "'n03125729'", ",", "'n03126707'", ",", "'n03127747'", ",", "'n03127925'", ",", "'n03131574'", ",", "'n03133878'", ",", "'n03134739'", ",", "'n03141823'", ",", "'n03146219'", ",", "'n03160309'", ",", "'n03179701'", ",", "'n03180011'", ",", "'n03187595'", ",", "'n03188531'", ",", "'n03196217'", ",", "'n03197337'", ",", "'n03201208'", ",", "'n03207743'", ",", "'n03207941'", ",", "'n03208938'", ",", "'n03216828'", ",", "'n03218198'", ",", "'n03220513'", ",", "'n03223299'", ",", "'n03240683'", ",", "'n03249569'", ",", "'n03250847'", ",", "'n03255030'", ",", "'n03259280'", ",", "'n03271574'", ",", "'n03272010'", ",", "'n03272562'", ",", "'n03290653'", ",", "'n03291819'", ",", "'n03297495'", ",", "'n03314780'", ",", "'n03325584'", ",", "'n03337140'", ",", "'n03344393'", ",", "'n03345487'", ",", "'n03347037'", ",", "'n03355925'", ",", "'n03372029'", ",", "'n03376595'", ",", "'n03379051'", ",", "'n03384352'", ",", "'n03388043'", ",", "'n03388183'", ",", "'n03388549'", ",", "'n03393912'", ",", "'n03394916'", ",", "'n03400231'", ",", "'n03404251'", ",", "'n03417042'", ",", "'n03424325'", ",", "'n03425413'", ",", "'n03443371'", ",", "'n03444034'", ",", "'n03445777'", ",", "'n03445924'", ",", "'n03447447'", ",", "'n03447721'", ",", "'n03450230'", ",", "'n03452741'", ",", "'n03457902'", ",", "'n03459775'", ",", "'n03461385'", ",", "'n03467068'", ",", "'n03476684'", ",", "'n03476991'", ",", "'n03478589'", ",", "'n03481172'", ",", "'n03482405'", ",", "'n03483316'", ",", "'n03485407'", ",", "'n03485794'", ",", "'n03492542'", ",", "'n03494278'", ",", "'n03495258'", ",", "'n03496892'", ",", "'n03498962'", ",", "'n03527444'", ",", "'n03529860'", ",", "'n03530642'", ",", "'n03532672'", ",", "'n03534580'", ",", "'n03535780'", ",", "'n03538406'", ",", "'n03544143'", ",", "'n03584254'", ",", "'n03584829'", ",", "'n03590841'", ",", "'n03594734'", ",", "'n03594945'", ",", "'n03595614'", ",", "'n03598930'", ",", "'n03599486'", ",", "'n03602883'", ",", "'n03617480'", ",", "'n03623198'", ",", "'n03627232'", ",", "'n03630383'", ",", "'n03633091'", ",", "'n03637318'", ",", "'n03642806'", ",", "'n03649909'", ",", "'n03657121'", ",", "'n03658185'", ",", "'n03661043'", ",", "'n03662601'", ",", "'n03666591'", ",", "'n03670208'", ",", "'n03673027'", ",", "'n03676483'", ",", "'n03680355'", ",", "'n03690938'", ",", "'n03691459'", ",", "'n03692522'", ",", "'n03697007'", ",", "'n03706229'", ",", "'n03709823'", ",", "'n03710193'", ",", "'n03710637'", ",", "'n03710721'", ",", "'n03717622'", ",", "'n03720891'", ",", "'n03721384'", ",", "'n03724870'", ",", "'n03729826'", ",", "'n03733131'", ",", "'n03733281'", ",", "'n03733805'", ",", "'n03742115'", ",", "'n03743016'", ",", "'n03759954'", ",", "'n03761084'", ",", "'n03763968'", ",", "'n03764736'", ",", "'n03769881'", ",", "'n03770439'", ",", "'n03770679'", ",", "'n03773504'", ",", "'n03775071'", ",", "'n03775546'", ",", "'n03776460'", ",", "'n03777568'", ",", "'n03777754'", ",", "'n03781244'", ",", "'n03782006'", ",", "'n03785016'", ",", "'n03786901'", ",", "'n03787032'", ",", "'n03788195'", ",", "'n03788365'", ",", "'n03791053'", ",", "'n03792782'", ",", "'n03792972'", ",", "'n03793489'", ",", "'n03794056'", ",", "'n03796401'", ",", "'n03803284'", ",", "'n03804744'", ",", "'n03814639'", ",", "'n03814906'", ",", "'n03825788'", ",", "'n03832673'", ",", "'n03837869'", ",", "'n03838899'", ",", "'n03840681'", ",", "'n03841143'", ",", "'n03843555'", ",", "'n03854065'", ",", "'n03857828'", ",", "'n03866082'", ",", "'n03868242'", ",", "'n03868863'", ",", "'n03871628'", ",", "'n03873416'", ",", "'n03874293'", ",", "'n03874599'", ",", "'n03876231'", ",", "'n03877472'", ",", "'n03877845'", ",", "'n03884397'", ",", "'n03887697'", ",", "'n03888257'", ",", "'n03888605'", ",", "'n03891251'", ",", "'n03891332'", ",", "'n03895866'", ",", "'n03899768'", ",", "'n03902125'", ",", "'n03903868'", ",", "'n03908618'", ",", "'n03908714'", ",", "'n03916031'", ",", "'n03920288'", ",", "'n03924679'", ",", "'n03929660'", ",", "'n03929855'", ",", "'n03930313'", ",", "'n03930630'", ",", "'n03933933'", ",", "'n03935335'", ",", "'n03937543'", ",", "'n03938244'", ",", "'n03942813'", ",", "'n03944341'", ",", "'n03947888'", ",", "'n03950228'", ",", "'n03954731'", ",", "'n03956157'", ",", "'n03958227'", ",", "'n03961711'", ",", "'n03967562'", ",", "'n03970156'", ",", "'n03976467'", ",", "'n03976657'", ",", "'n03977966'", ",", "'n03980874'", ",", "'n03982430'", ",", "'n03983396'", ",", "'n03991062'", ",", "'n03992509'", ",", "'n03995372'", ",", "'n03998194'", ",", "'n04004767'", ",", "'n04005630'", ",", "'n04008634'", ",", "'n04009552'", ",", "'n04019541'", ",", "'n04023962'", ",", "'n04026417'", ",", "'n04033901'", ",", "'n04033995'", ",", "'n04037443'", ",", "'n04039381'", ",", "'n04040759'", ",", "'n04041544'", ",", "'n04044716'", ",", "'n04049303'", ",", "'n04065272'", ",", "'n04067472'", ",", "'n04069434'", ",", "'n04070727'", ",", "'n04074963'", ",", "'n04081281'", ",", "'n04086273'", ",", "'n04090263'", ",", "'n04099969'", ",", "'n04111531'", ",", "'n04116512'", ",", "'n04118538'", ",", "'n04118776'", ",", "'n04120489'", ",", "'n04125021'", ",", "'n04127249'", ",", "'n04131690'", ",", "'n04133789'", ",", "'n04136333'", ",", "'n04141076'", ",", "'n04141327'", ",", "'n04141975'", ",", "'n04146614'", ",", "'n04147183'", ",", "'n04149813'", ",", "'n04152593'", ",", "'n04153751'", ",", "'n04154565'", ",", "'n04162706'", ",", "'n04179913'", ",", "'n04192698'", ",", "'n04200800'", ",", "'n04201297'", ",", "'n04204238'", ",", "'n04204347'", ",", "'n04208210'", ",", "'n04209133'", ",", "'n04209239'", ",", "'n04228054'", ",", "'n04229816'", ",", "'n04235860'", ",", "'n04238763'", ",", "'n04239074'", ",", "'n04243546'", ",", "'n04251144'", ",", "'n04252077'", ",", "'n04252225'", ",", "'n04254120'", ",", "'n04254680'", ",", "'n04254777'", ",", "'n04258138'", ",", "'n04259630'", ",", "'n04263257'", ",", "'n04264628'", ",", "'n04265275'", ",", "'n04266014'", ",", "'n04270147'", ",", "'n04273569'", ",", "'n04275548'", ",", "'n04277352'", ",", "'n04285008'", ",", "'n04286575'", ",", "'n04296562'", ",", "'n04310018'", ",", "'n04311004'", ",", "'n04311174'", ",", "'n04317175'", ",", "'n04325704'", ",", "'n04326547'", ",", "'n04328186'", ",", "'n04330267'", ",", "'n04332243'", ",", "'n04335435'", ",", "'n04336792'", ",", "'n04344873'", ",", "'n04346328'", ",", "'n04347754'", ",", "'n04350905'", ",", "'n04355338'", ",", "'n04355933'", ",", "'n04356056'", ",", "'n04357314'", ",", "'n04366367'", ",", "'n04367480'", ",", "'n04370456'", ",", "'n04371430'", ",", "'n04371774'", ",", "'n04372370'", ",", "'n04376876'", ",", "'n04380533'", ",", "'n04389033'", ",", "'n04392985'", ",", "'n04398044'", ",", "'n04399382'", ",", "'n04404412'", ",", "'n04409515'", ",", "'n04417672'", ",", "'n04418357'", ",", "'n04423845'", ",", "'n04428191'", ",", "'n04429376'", ",", "'n04435653'", ",", "'n04442312'", ",", "'n04443257'", ",", "'n04447861'", ",", "'n04456115'", ",", "'n04458633'", ",", "'n04461696'", ",", "'n04462240'", ",", "'n04465501'", ",", "'n04467665'", ",", "'n04476259'", ",", "'n04479046'", ",", "'n04482393'", ",", "'n04483307'", ",", "'n04485082'", ",", "'n04486054'", ",", "'n04487081'", ",", "'n04487394'", ",", "'n04493381'", ",", "'n04501370'", ",", "'n04505470'", ",", "'n04507155'", ",", "'n04509417'", ",", "'n04515003'", ",", "'n04517823'", ",", "'n04522168'", ",", "'n04523525'", ",", "'n04525038'", ",", "'n04525305'", ",", "'n04532106'", ",", "'n04532670'", ",", "'n04536866'", ",", "'n04540053'", ",", "'n04542943'", ",", "'n04548280'", ",", "'n04548362'", ",", "'n04550184'", ",", "'n04552348'", ",", "'n04553703'", ",", "'n04554684'", ",", "'n04557648'", ",", "'n04560804'", ",", "'n04562935'", ",", "'n04579145'", ",", "'n04579432'", ",", "'n04584207'", ",", "'n04589890'", ",", "'n04590129'", ",", "'n04591157'", ",", "'n04591713'", ",", "'n04592741'", ",", "'n04596742'", ",", "'n04597913'", ",", "'n04599235'", ",", "'n04604644'", ",", "'n04606251'", ",", "'n04612504'", ",", "'n04613696'", ",", "'n06359193'", ",", "'n06596364'", ",", "'n06785654'", ",", "'n06794110'", ",", "'n06874185'", ",", "'n07248320'", ",", "'n07565083'", ",", "'n07579787'", ",", "'n07583066'", ",", "'n07584110'", ",", "'n07590611'", ",", "'n07613480'", ",", "'n07614500'", ",", "'n07615774'", ",", "'n07684084'", ",", "'n07693725'", ",", "'n07695742'", ",", "'n07697313'", ",", "'n07697537'", ",", "'n07711569'", ",", "'n07714571'", ",", "'n07714990'", ",", "'n07715103'", ",", "'n07716358'", ",", "'n07716906'", ",", "'n07717410'", ",", "'n07717556'", ",", "'n07718472'", ",", "'n07718747'", ",", "'n07720875'", ",", "'n07730033'", ",", "'n07734744'", ",", "'n07742313'", ",", "'n07745940'", ",", "'n07747607'", ",", "'n07749582'", ",", "'n07753113'", ",", "'n07753275'", ",", "'n07753592'", ",", "'n07754684'", ",", "'n07760859'", ",", "'n07768694'", ",", "'n07802026'", ",", "'n07831146'", ",", "'n07836838'", ",", "'n07860988'", ",", "'n07871810'", ",", "'n07873807'", ",", "'n07875152'", ",", "'n07880968'", ",", "'n07892512'", ",", "'n07920052'", ",", "'n07930864'", ",", "'n07932039'", ",", "'n09193705'", ",", "'n09229709'", ",", "'n09246464'", ",", "'n09256479'", ",", "'n09288635'", ",", "'n09332890'", ",", "'n09399592'", ",", "'n09421951'", ",", "'n09428293'", ",", "'n09468604'", ",", "'n09472597'", ",", "'n09835506'", ",", "'n10148035'", ",", "'n10565667'", ",", "'n11879895'", ",", "'n11939491'", ",", "'n12057211'", ",", "'n12144580'", ",", "'n12267677'", ",", "'n12620546'", ",", "'n12768682'", ",", "'n12985857'", ",", "'n12998815'", ",", "'n13037406'", ",", "'n13040303'", ",", "'n13044778'", ",", "'n13052670'", ",", "'n13054560'", ",", "'n13133613'", ",", "'n15075141'", "]", "\n", "imagenet_r_wnids", "=", "{", "'n01443537'", ",", "'n01484850'", ",", "'n01494475'", ",", "'n01498041'", ",", "'n01514859'", ",", "'n01518878'", ",", "'n01531178'", ",", "'n01534433'", ",", "'n01614925'", ",", "'n01616318'", ",", "'n01630670'", ",", "'n01632777'", ",", "'n01644373'", ",", "'n01677366'", ",", "'n01694178'", ",", "'n01748264'", ",", "'n01770393'", ",", "'n01774750'", ",", "'n01784675'", ",", "'n01806143'", ",", "'n01820546'", ",", "'n01833805'", ",", "'n01843383'", ",", "'n01847000'", ",", "'n01855672'", ",", "'n01860187'", ",", "'n01882714'", ",", "'n01910747'", ",", "'n01944390'", ",", "'n01983481'", ",", "'n01986214'", ",", "'n02007558'", ",", "'n02009912'", ",", "'n02051845'", ",", "'n02056570'", ",", "'n02066245'", ",", "'n02071294'", ",", "'n02077923'", ",", "'n02085620'", ",", "'n02086240'", ",", "'n02088094'", ",", "'n02088238'", ",", "'n02088364'", ",", "'n02088466'", ",", "'n02091032'", ",", "'n02091134'", ",", "'n02092339'", ",", "'n02094433'", ",", "'n02096585'", ",", "'n02097298'", ",", "'n02098286'", ",", "'n02099601'", ",", "'n02099712'", ",", "'n02102318'", ",", "'n02106030'", ",", "'n02106166'", ",", "'n02106550'", ",", "'n02106662'", ",", "'n02108089'", ",", "'n02108915'", ",", "'n02109525'", ",", "'n02110185'", ",", "'n02110341'", ",", "'n02110958'", ",", "'n02112018'", ",", "'n02112137'", ",", "'n02113023'", ",", "'n02113624'", ",", "'n02113799'", ",", "'n02114367'", ",", "'n02117135'", ",", "'n02119022'", ",", "'n02123045'", ",", "'n02128385'", ",", "'n02128757'", ",", "'n02129165'", ",", "'n02129604'", ",", "'n02130308'", ",", "'n02134084'", ",", "'n02138441'", ",", "'n02165456'", ",", "'n02190166'", ",", "'n02206856'", ",", "'n02219486'", ",", "'n02226429'", ",", "'n02233338'", ",", "'n02236044'", ",", "'n02268443'", ",", "'n02279972'", ",", "'n02317335'", ",", "'n02325366'", ",", "'n02346627'", ",", "'n02356798'", ",", "'n02363005'", ",", "'n02364673'", ",", "'n02391049'", ",", "'n02395406'", ",", "'n02398521'", ",", "'n02410509'", ",", "\n", "'n02423022'", ",", "'n02437616'", ",", "'n02445715'", ",", "'n02447366'", ",", "'n02480495'", ",", "'n02480855'", ",", "'n02481823'", ",", "'n02483362'", ",", "'n02486410'", ",", "'n02510455'", ",", "'n02526121'", ",", "'n02607072'", ",", "'n02655020'", ",", "'n02672831'", ",", "'n02701002'", ",", "'n02749479'", ",", "'n02769748'", ",", "'n02793495'", ",", "'n02797295'", ",", "'n02802426'", ",", "'n02808440'", ",", "'n02814860'", ",", "'n02823750'", ",", "'n02841315'", ",", "'n02843684'", ",", "'n02883205'", ",", "'n02906734'", ",", "'n02909870'", ",", "'n02939185'", ",", "'n02948072'", ",", "'n02950826'", ",", "'n02951358'", ",", "'n02966193'", ",", "'n02980441'", ",", "'n02992529'", ",", "'n03124170'", ",", "'n03272010'", ",", "'n03345487'", ",", "'n03372029'", ",", "'n03424325'", ",", "'n03452741'", ",", "'n03467068'", ",", "'n03481172'", ",", "'n03494278'", ",", "'n03495258'", ",", "'n03498962'", ",", "'n03594945'", ",", "'n03602883'", ",", "'n03630383'", ",", "'n03649909'", ",", "'n03676483'", ",", "'n03710193'", ",", "'n03773504'", ",", "'n03775071'", ",", "'n03888257'", ",", "'n03930630'", ",", "'n03947888'", ",", "'n04086273'", ",", "'n04118538'", ",", "'n04133789'", ",", "'n04141076'", ",", "'n04146614'", ",", "'n04147183'", ",", "'n04192698'", ",", "'n04254680'", ",", "'n04266014'", ",", "'n04275548'", ",", "'n04310018'", ",", "'n04325704'", ",", "'n04347754'", ",", "'n04389033'", ",", "'n04409515'", ",", "'n04465501'", ",", "'n04487394'", ",", "'n04522168'", ",", "'n04536866'", ",", "'n04552348'", ",", "'n04591713'", ",", "'n07614500'", ",", "'n07693725'", ",", "'n07695742'", ",", "'n07697313'", ",", "'n07697537'", ",", "'n07714571'", ",", "'n07714990'", ",", "'n07718472'", ",", "'n07720875'", ",", "'n07734744'", ",", "'n07742313'", ",", "'n07745940'", ",", "'n07749582'", ",", "'n07753275'", ",", "'n07753592'", ",", "'n07768694'", ",", "'n07873807'", ",", "'n07880968'", ",", "'n07920052'", ",", "'n09472597'", ",", "'n09835506'", ",", "'n10565667'", ",", "'n12267677'", "}", "\n", "return", "[", "wnid", "in", "imagenet_r_wnids", "for", "wnid", "in", "all_wnids", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.datasets.imagenet200.ImageNet200.create_symlinks_to_imagenet": [[75, 84], ["os.path.exists", "os.makedirs", "imagenet200.ImageNet200.get_class_mask", "print", "os.symlink"], "methods", ["home.repos.pwc.inspect_result.bethgelab_robustness.datasets.imagenet200.ImageNet200.get_class_mask"], ["", "def", "create_symlinks_to_imagenet", "(", "self", ")", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "imagenet_200_location", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "imagenet_200_location", ")", "\n", "folders_of_interest", "=", "self", ".", "get_class_mask", "(", ")", "\n", "for", "folder", "in", "folders_of_interest", ":", "\n", "                ", "os", ".", "symlink", "(", "self", ".", "imagenet_1k_location", "+", "folder", ",", "\n", "self", ".", "imagenet_200_location", "+", "folder", ",", "target_is_directory", "=", "True", ")", "\n", "", "", "else", ":", "\n", "            ", "print", "(", "'Folder containing IID validation images already exists'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.datasets.imagenet200.ImageNet200.__init__": [[85, 92], ["imagenet200.ImageNet200.create_symlinks_to_imagenet", "robusta.datasets.base.RemappedImageNet.__init__"], "methods", ["home.repos.pwc.inspect_result.bethgelab_robustness.datasets.imagenet200.ImageNet200.create_symlinks_to_imagenet", "home.repos.pwc.inspect_result.bethgelab_robustness.batchnorm.bn.BayesianBatchNorm.__init__"], ["", "", "def", "__init__", "(", "self", ",", "imagenet_directory", ",", "imagenet_200_directory", "=", "\"/tmp/in200\"", ",", "transform", "=", "None", ")", ":", "\n", "        ", "self", ".", "imagenet_1k_location", "=", "imagenet_directory", "\n", "self", ".", "imagenet_200_location", "=", "imagenet_200_directory", "\n", "self", ".", "create_symlinks_to_imagenet", "(", ")", "\n", "super", "(", ")", ".", "__init__", "(", "\n", "self", ".", "imagenet_200_location", ",", "\n", "transform", "=", "transform", "\n", ")", ""]], "home.repos.pwc.inspect_result.bethgelab_robustness.datasets.base.TorchvisionTransform.__init__": [[27, 38], ["super().__init__", "torchvision.transforms.Resize", "torchvision.transforms.Resize", "torchvision.transforms.Resize", "torchvision.transforms.Resize", "torchvision.transforms.CenterCrop", "torchvision.transforms.CenterCrop", "torchvision.transforms.CenterCrop", "torchvision.transforms.CenterCrop", "torchvision.transforms.ToTensor", "torchvision.transforms.ToTensor", "torchvision.transforms.ToTensor", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.Normalize", "torchvision.transforms.Normalize", "torchvision.transforms.Normalize"], "methods", ["home.repos.pwc.inspect_result.bethgelab_robustness.batchnorm.bn.BayesianBatchNorm.__init__"], ["def", "__init__", "(", "self", ",", "resize", "=", "False", ")", ":", "\n", "        ", "self", ".", "resize", "=", "resize", "\n", "\n", "self", ".", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", "\n", "self", ".", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", "\n", "super", "(", ")", ".", "__init__", "(", "[", "\n", "torchvision", ".", "transforms", ".", "Resize", "(", "256", ")", ",", "\n", "torchvision", ".", "transforms", ".", "CenterCrop", "(", "224", ")", ",", "\n", "torchvision", ".", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "torchvision", ".", "transforms", ".", "Normalize", "(", "\n", "self", ".", "mean", ",", "self", ".", "std", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.datasets.base.ImageNetRobustnessDataset.__init__": [[43, 47], ["super().__init__", "base.TorchvisionTransform"], "methods", ["home.repos.pwc.inspect_result.bethgelab_robustness.batchnorm.bn.BayesianBatchNorm.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dataset_dir", ",", "transform", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "transform", "==", "\"torchvision\"", ":", "\n", "            ", "transform", "=", "TorchvisionTransform", "(", ")", "\n", "", "super", "(", ")", ".", "__init__", "(", "dataset_dir", ",", "transform", "=", "transform", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.datasets.base.ImageNetRobustnessDataset.accuracy_metric": [[48, 50], ["NotImplementedError"], "methods", ["None"], ["", "def", "accuracy_metric", "(", "self", ",", "logits", ",", "targets", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.datasets.base.RemappedImageNet.__init__": [[53, 55], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.bethgelab_robustness.batchnorm.bn.BayesianBatchNorm.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.datasets.base.RemappedImageNet.map_logits": [[56, 59], ["None"], "methods", ["None"], ["", "def", "map_logits", "(", "self", ",", "logits", ")", ":", "\n", "        ", "output", "=", "logits", "[", ":", ",", "imagenet_r_mask", "]", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.datasets.base.RemappedImageNet.accuracy_metric": [[60, 63], ["base.RemappedImageNet.map_logits", "super().accuracy_metric"], "methods", ["home.repos.pwc.inspect_result.bethgelab_robustness.datasets.base.RemappedImageNet.map_logits", "home.repos.pwc.inspect_result.bethgelab_robustness.datasets.base.RemappedImageNet.accuracy_metric"], ["", "def", "accuracy_metric", "(", "self", ",", "logits", ",", "targets", ")", ":", "\n", "        ", "logits200", "=", "self", ".", "map_logits", "(", "logits", ")", "\n", "super", "(", ")", ".", "accuracy_metric", "(", "logits200", ",", "targets", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.datasets.imageneta.ImageNetA.__init__": [[60, 71], ["torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "net", "torchvision.Resize", "torchvision.Resize", "torchvision.Resize", "torchvision.Resize", "torchvision.CenterCrop", "torchvision.CenterCrop", "torchvision.CenterCrop", "torchvision.CenterCrop", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.Normalize", "torchvision.Normalize", "torchvision.Normalize"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "thousand_k_to_200", "=", "{", "0", ":", "-", "1", ",", "1", ":", "-", "1", ",", "2", ":", "-", "1", ",", "3", ":", "-", "1", ",", "4", ":", "-", "1", ",", "5", ":", "-", "1", ",", "6", ":", "0", ",", "7", ":", "-", "1", ",", "8", ":", "-", "1", ",", "9", ":", "-", "1", ",", "10", ":", "-", "1", ",", "11", ":", "1", ",", "12", ":", "-", "1", ",", "13", ":", "2", ",", "14", ":", "-", "1", ",", "15", ":", "3", ",", "16", ":", "-", "1", ",", "17", ":", "4", ",", "18", ":", "-", "1", ",", "19", ":", "-", "1", ",", "20", ":", "-", "1", ",", "21", ":", "-", "1", ",", "22", ":", "5", ",", "23", ":", "6", ",", "24", ":", "-", "1", ",", "25", ":", "-", "1", ",", "26", ":", "-", "1", ",", "27", ":", "7", ",", "28", ":", "-", "1", ",", "29", ":", "-", "1", ",", "30", ":", "8", ",", "31", ":", "-", "1", ",", "32", ":", "-", "1", ",", "33", ":", "-", "1", ",", "34", ":", "-", "1", ",", "35", ":", "-", "1", ",", "36", ":", "-", "1", ",", "37", ":", "9", ",", "38", ":", "-", "1", ",", "39", ":", "10", ",", "40", ":", "-", "1", ",", "41", ":", "-", "1", ",", "42", ":", "11", ",", "43", ":", "-", "1", ",", "44", ":", "-", "1", ",", "45", ":", "-", "1", ",", "46", ":", "-", "1", ",", "47", ":", "12", ",", "48", ":", "-", "1", ",", "49", ":", "-", "1", ",", "50", ":", "13", ",", "51", ":", "-", "1", ",", "52", ":", "-", "1", ",", "53", ":", "-", "1", ",", "54", ":", "-", "1", ",", "55", ":", "-", "1", ",", "56", ":", "-", "1", ",", "57", ":", "14", ",", "58", ":", "-", "1", ",", "59", ":", "-", "1", ",", "60", ":", "-", "1", ",", "61", ":", "-", "1", ",", "62", ":", "-", "1", ",", "63", ":", "-", "1", ",", "64", ":", "-", "1", ",", "65", ":", "-", "1", ",", "66", ":", "-", "1", ",", "67", ":", "-", "1", ",", "68", ":", "-", "1", ",", "69", ":", "-", "1", ",", "70", ":", "15", ",", "71", ":", "16", ",", "72", ":", "-", "1", ",", "73", ":", "-", "1", ",", "74", ":", "-", "1", ",", "75", ":", "-", "1", ",", "76", ":", "17", ",", "77", ":", "-", "1", ",", "78", ":", "-", "1", ",", "79", ":", "18", ",", "80", ":", "-", "1", ",", "81", ":", "-", "1", ",", "82", ":", "-", "1", ",", "83", ":", "-", "1", ",", "84", ":", "-", "1", ",", "85", ":", "-", "1", ",", "86", ":", "-", "1", ",", "87", ":", "-", "1", ",", "88", ":", "-", "1", ",", "89", ":", "19", ",", "90", ":", "20", ",", "91", ":", "-", "1", ",", "92", ":", "-", "1", ",", "93", ":", "-", "1", ",", "94", ":", "21", ",", "95", ":", "-", "1", ",", "96", ":", "22", ",", "97", ":", "23", ",", "98", ":", "-", "1", ",", "99", ":", "24", ",", "100", ":", "-", "1", ",", "101", ":", "-", "1", ",", "102", ":", "-", "1", ",", "103", ":", "-", "1", ",", "104", ":", "-", "1", ",", "105", ":", "25", ",", "106", ":", "-", "1", ",", "107", ":", "26", ",", "108", ":", "27", ",", "109", ":", "-", "1", ",", "110", ":", "28", ",", "111", ":", "-", "1", ",", "112", ":", "-", "1", ",", "113", ":", "29", ",", "114", ":", "-", "1", ",", "115", ":", "-", "1", ",", "116", ":", "-", "1", ",", "117", ":", "-", "1", ",", "118", ":", "-", "1", ",", "119", ":", "-", "1", ",", "120", ":", "-", "1", ",", "121", ":", "-", "1", ",", "122", ":", "-", "1", ",", "123", ":", "-", "1", ",", "124", ":", "30", ",", "125", ":", "31", ",", "126", ":", "-", "1", ",", "127", ":", "-", "1", ",", "128", ":", "-", "1", ",", "129", ":", "-", "1", ",", "130", ":", "32", ",", "131", ":", "-", "1", ",", "132", ":", "33", ",", "133", ":", "-", "1", ",", "134", ":", "-", "1", ",", "135", ":", "-", "1", ",", "136", ":", "-", "1", ",", "137", ":", "-", "1", ",", "138", ":", "-", "1", ",", "139", ":", "-", "1", ",", "140", ":", "-", "1", ",", "141", ":", "-", "1", ",", "142", ":", "-", "1", ",", "143", ":", "34", ",", "144", ":", "35", ",", "145", ":", "-", "1", ",", "146", ":", "-", "1", ",", "147", ":", "-", "1", ",", "148", ":", "-", "1", ",", "149", ":", "-", "1", ",", "150", ":", "36", ",", "151", ":", "37", ",", "152", ":", "-", "1", ",", "153", ":", "-", "1", ",", "154", ":", "-", "1", ",", "155", ":", "-", "1", ",", "156", ":", "-", "1", ",", "157", ":", "-", "1", ",", "158", ":", "-", "1", ",", "159", ":", "-", "1", ",", "160", ":", "-", "1", ",", "161", ":", "-", "1", ",", "162", ":", "-", "1", ",", "163", ":", "-", "1", ",", "164", ":", "-", "1", ",", "165", ":", "-", "1", ",", "166", ":", "-", "1", ",", "167", ":", "-", "1", ",", "168", ":", "-", "1", ",", "169", ":", "-", "1", ",", "170", ":", "-", "1", ",", "171", ":", "-", "1", ",", "172", ":", "-", "1", ",", "173", ":", "-", "1", ",", "174", ":", "-", "1", ",", "175", ":", "-", "1", ",", "176", ":", "-", "1", ",", "177", ":", "-", "1", ",", "178", ":", "-", "1", ",", "179", ":", "-", "1", ",", "180", ":", "-", "1", ",", "181", ":", "-", "1", ",", "182", ":", "-", "1", ",", "183", ":", "-", "1", ",", "184", ":", "-", "1", ",", "185", ":", "-", "1", ",", "186", ":", "-", "1", ",", "187", ":", "-", "1", ",", "188", ":", "-", "1", ",", "189", ":", "-", "1", ",", "190", ":", "-", "1", ",", "191", ":", "-", "1", ",", "192", ":", "-", "1", ",", "193", ":", "-", "1", ",", "194", ":", "-", "1", ",", "195", ":", "-", "1", ",", "196", ":", "-", "1", ",", "197", ":", "-", "1", ",", "198", ":", "-", "1", ",", "199", ":", "-", "1", ",", "200", ":", "-", "1", ",", "201", ":", "-", "1", ",", "202", ":", "-", "1", ",", "203", ":", "-", "1", ",", "204", ":", "-", "1", ",", "205", ":", "-", "1", ",", "206", ":", "-", "1", ",", "207", ":", "38", ",", "208", ":", "-", "1", ",", "209", ":", "-", "1", ",", "210", ":", "-", "1", ",", "211", ":", "-", "1", ",", "212", ":", "-", "1", ",", "213", ":", "-", "1", ",", "214", ":", "-", "1", ",", "215", ":", "-", "1", ",", "216", ":", "-", "1", ",", "217", ":", "-", "1", ",", "218", ":", "-", "1", ",", "219", ":", "-", "1", ",", "220", ":", "-", "1", ",", "221", ":", "-", "1", ",", "222", ":", "-", "1", ",", "223", ":", "-", "1", ",", "224", ":", "-", "1", ",", "225", ":", "-", "1", ",", "226", ":", "-", "1", ",", "227", ":", "-", "1", ",", "228", ":", "-", "1", ",", "229", ":", "-", "1", ",", "230", ":", "-", "1", ",", "231", ":", "-", "1", ",", "232", ":", "-", "1", ",", "233", ":", "-", "1", ",", "234", ":", "39", ",", "235", ":", "40", ",", "236", ":", "-", "1", ",", "237", ":", "-", "1", ",", "238", ":", "-", "1", ",", "239", ":", "-", "1", ",", "240", ":", "-", "1", ",", "241", ":", "-", "1", ",", "242", ":", "-", "1", ",", "243", ":", "-", "1", ",", "244", ":", "-", "1", ",", "245", ":", "-", "1", ",", "246", ":", "-", "1", ",", "247", ":", "-", "1", ",", "248", ":", "-", "1", ",", "249", ":", "-", "1", ",", "250", ":", "-", "1", ",", "251", ":", "-", "1", ",", "252", ":", "-", "1", ",", "253", ":", "-", "1", ",", "254", ":", "41", ",", "255", ":", "-", "1", ",", "256", ":", "-", "1", ",", "257", ":", "-", "1", ",", "258", ":", "-", "1", ",", "259", ":", "-", "1", ",", "260", ":", "-", "1", ",", "261", ":", "-", "1", ",", "262", ":", "-", "1", ",", "263", ":", "-", "1", ",", "264", ":", "-", "1", ",", "265", ":", "-", "1", ",", "266", ":", "-", "1", ",", "267", ":", "-", "1", ",", "268", ":", "-", "1", ",", "269", ":", "-", "1", ",", "270", ":", "-", "1", ",", "271", ":", "-", "1", ",", "272", ":", "-", "1", ",", "273", ":", "-", "1", ",", "274", ":", "-", "1", ",", "275", ":", "-", "1", ",", "276", ":", "-", "1", ",", "277", ":", "42", ",", "278", ":", "-", "1", ",", "279", ":", "-", "1", ",", "280", ":", "-", "1", ",", "281", ":", "-", "1", ",", "282", ":", "-", "1", ",", "283", ":", "43", ",", "284", ":", "-", "1", ",", "285", ":", "-", "1", ",", "286", ":", "-", "1", ",", "287", ":", "44", ",", "288", ":", "-", "1", ",", "289", ":", "-", "1", ",", "290", ":", "-", "1", ",", "291", ":", "45", ",", "292", ":", "-", "1", ",", "293", ":", "-", "1", ",", "294", ":", "-", "1", ",", "295", ":", "46", ",", "296", ":", "-", "1", ",", "297", ":", "-", "1", ",", "298", ":", "47", ",", "299", ":", "-", "1", ",", "300", ":", "-", "1", ",", "301", ":", "48", ",", "302", ":", "-", "1", ",", "303", ":", "-", "1", ",", "304", ":", "-", "1", ",", "305", ":", "-", "1", ",", "306", ":", "49", ",", "307", ":", "50", ",", "308", ":", "51", ",", "309", ":", "52", ",", "310", ":", "53", ",", "311", ":", "54", ",", "312", ":", "-", "1", ",", "313", ":", "55", ",", "314", ":", "56", ",", "315", ":", "57", ",", "316", ":", "-", "1", ",", "317", ":", "58", ",", "318", ":", "-", "1", ",", "319", ":", "59", ",", "320", ":", "-", "1", ",", "321", ":", "-", "1", ",", "322", ":", "-", "1", ",", "323", ":", "60", ",", "324", ":", "61", ",", "325", ":", "-", "1", ",", "326", ":", "62", ",", "327", ":", "63", ",", "328", ":", "-", "1", ",", "329", ":", "-", "1", ",", "330", ":", "64", ",", "331", ":", "-", "1", ",", "332", ":", "-", "1", ",", "333", ":", "-", "1", ",", "334", ":", "65", ",", "335", ":", "66", ",", "336", ":", "67", ",", "337", ":", "-", "1", ",", "338", ":", "-", "1", ",", "339", ":", "-", "1", ",", "340", ":", "-", "1", ",", "341", ":", "-", "1", ",", "342", ":", "-", "1", ",", "343", ":", "-", "1", ",", "344", ":", "-", "1", ",", "345", ":", "-", "1", ",", "346", ":", "-", "1", ",", "347", ":", "68", ",", "348", ":", "-", "1", ",", "349", ":", "-", "1", ",", "350", ":", "-", "1", ",", "351", ":", "-", "1", ",", "352", ":", "-", "1", ",", "353", ":", "-", "1", ",", "354", ":", "-", "1", ",", "355", ":", "-", "1", ",", "356", ":", "-", "1", ",", "357", ":", "-", "1", ",", "358", ":", "-", "1", ",", "359", ":", "-", "1", ",", "360", ":", "-", "1", ",", "361", ":", "69", ",", "362", ":", "-", "1", ",", "363", ":", "70", ",", "364", ":", "-", "1", ",", "365", ":", "-", "1", ",", "366", ":", "-", "1", ",", "367", ":", "-", "1", ",", "368", ":", "-", "1", ",", "369", ":", "-", "1", ",", "370", ":", "-", "1", ",", "371", ":", "-", "1", ",", "372", ":", "71", ",", "373", ":", "-", "1", ",", "374", ":", "-", "1", ",", "375", ":", "-", "1", ",", "376", ":", "-", "1", ",", "377", ":", "-", "1", ",", "378", ":", "72", ",", "379", ":", "-", "1", ",", "380", ":", "-", "1", ",", "381", ":", "-", "1", ",", "382", ":", "-", "1", ",", "383", ":", "-", "1", ",", "384", ":", "-", "1", ",", "385", ":", "-", "1", ",", "386", ":", "73", ",", "387", ":", "-", "1", ",", "388", ":", "-", "1", ",", "389", ":", "-", "1", ",", "390", ":", "-", "1", ",", "391", ":", "-", "1", ",", "392", ":", "-", "1", ",", "393", ":", "-", "1", ",", "394", ":", "-", "1", ",", "395", ":", "-", "1", ",", "396", ":", "-", "1", ",", "397", ":", "74", ",", "398", ":", "-", "1", ",", "399", ":", "-", "1", ",", "400", ":", "75", ",", "401", ":", "76", ",", "402", ":", "77", ",", "403", ":", "-", "1", ",", "404", ":", "78", ",", "405", ":", "-", "1", ",", "406", ":", "-", "1", ",", "407", ":", "79", ",", "408", ":", "-", "1", ",", "409", ":", "-", "1", ",", "410", ":", "-", "1", ",", "411", ":", "80", ",", "412", ":", "-", "1", ",", "413", ":", "-", "1", ",", "414", ":", "-", "1", ",", "415", ":", "-", "1", ",", "416", ":", "81", ",", "417", ":", "82", ",", "418", ":", "-", "1", ",", "419", ":", "-", "1", ",", "420", ":", "83", ",", "421", ":", "-", "1", ",", "422", ":", "-", "1", ",", "423", ":", "-", "1", ",", "424", ":", "-", "1", ",", "425", ":", "84", ",", "426", ":", "-", "1", ",", "427", ":", "-", "1", ",", "428", ":", "85", ",", "429", ":", "-", "1", ",", "430", ":", "86", ",", "431", ":", "-", "1", ",", "432", ":", "-", "1", ",", "433", ":", "-", "1", ",", "434", ":", "-", "1", ",", "435", ":", "-", "1", ",", "436", ":", "-", "1", ",", "437", ":", "87", ",", "438", ":", "88", ",", "439", ":", "-", "1", ",", "440", ":", "-", "1", ",", "441", ":", "-", "1", ",", "442", ":", "-", "1", ",", "443", ":", "-", "1", ",", "444", ":", "-", "1", ",", "445", ":", "89", ",", "446", ":", "-", "1", ",", "447", ":", "-", "1", ",", "448", ":", "-", "1", ",", "449", ":", "-", "1", ",", "450", ":", "-", "1", ",", "451", ":", "-", "1", ",", "452", ":", "-", "1", ",", "453", ":", "-", "1", ",", "454", ":", "-", "1", ",", "455", ":", "-", "1", ",", "456", ":", "90", ",", "457", ":", "91", ",", "458", ":", "-", "1", ",", "459", ":", "-", "1", ",", "460", ":", "-", "1", ",", "461", ":", "92", ",", "462", ":", "93", ",", "463", ":", "-", "1", ",", "464", ":", "-", "1", ",", "465", ":", "-", "1", ",", "466", ":", "-", "1", ",", "467", ":", "-", "1", ",", "468", ":", "-", "1", ",", "469", ":", "-", "1", ",", "470", ":", "94", ",", "471", ":", "-", "1", ",", "472", ":", "95", ",", "473", ":", "-", "1", ",", "474", ":", "-", "1", ",", "475", ":", "-", "1", ",", "476", ":", "-", "1", ",", "477", ":", "-", "1", ",", "478", ":", "-", "1", ",", "479", ":", "-", "1", ",", "480", ":", "-", "1", ",", "481", ":", "-", "1", ",", "482", ":", "-", "1", ",", "483", ":", "96", ",", "484", ":", "-", "1", ",", "485", ":", "-", "1", ",", "486", ":", "97", ",", "487", ":", "-", "1", ",", "488", ":", "98", ",", "489", ":", "-", "1", ",", "490", ":", "-", "1", ",", "491", ":", "-", "1", ",", "492", ":", "99", ",", "493", ":", "-", "1", ",", "494", ":", "-", "1", ",", "495", ":", "-", "1", ",", "496", ":", "100", ",", "497", ":", "-", "1", ",", "498", ":", "-", "1", ",", "499", ":", "-", "1", ",", "500", ":", "-", "1", ",", "501", ":", "-", "1", ",", "502", ":", "-", "1", ",", "503", ":", "-", "1", ",", "504", ":", "-", "1", ",", "505", ":", "-", "1", ",", "506", ":", "-", "1", ",", "507", ":", "-", "1", ",", "508", ":", "-", "1", ",", "509", ":", "-", "1", ",", "510", ":", "-", "1", ",", "511", ":", "-", "1", ",", "512", ":", "-", "1", ",", "513", ":", "-", "1", ",", "514", ":", "101", ",", "515", ":", "-", "1", ",", "516", ":", "102", ",", "517", ":", "-", "1", ",", "518", ":", "-", "1", ",", "519", ":", "-", "1", ",", "520", ":", "-", "1", ",", "521", ":", "-", "1", ",", "522", ":", "-", "1", ",", "523", ":", "-", "1", ",", "524", ":", "-", "1", ",", "525", ":", "-", "1", ",", "526", ":", "-", "1", ",", "527", ":", "-", "1", ",", "528", ":", "103", ",", "529", ":", "-", "1", ",", "530", ":", "104", ",", "531", ":", "-", "1", ",", "532", ":", "-", "1", ",", "533", ":", "-", "1", ",", "534", ":", "-", "1", ",", "535", ":", "-", "1", ",", "536", ":", "-", "1", ",", "537", ":", "-", "1", ",", "538", ":", "-", "1", ",", "539", ":", "105", ",", "540", ":", "-", "1", ",", "541", ":", "-", "1", ",", "542", ":", "106", ",", "543", ":", "107", ",", "544", ":", "-", "1", ",", "545", ":", "-", "1", ",", "546", ":", "-", "1", ",", "547", ":", "-", "1", ",", "548", ":", "-", "1", ",", "549", ":", "108", ",", "550", ":", "-", "1", ",", "551", ":", "-", "1", ",", "552", ":", "109", ",", "553", ":", "-", "1", ",", "554", ":", "-", "1", ",", "555", ":", "-", "1", ",", "556", ":", "-", "1", ",", "557", ":", "110", ",", "558", ":", "-", "1", ",", "559", ":", "-", "1", ",", "560", ":", "-", "1", ",", "561", ":", "111", ",", "562", ":", "112", ",", "563", ":", "-", "1", ",", "564", ":", "-", "1", ",", "565", ":", "-", "1", ",", "566", ":", "-", "1", ",", "567", ":", "-", "1", ",", "568", ":", "-", "1", ",", "569", ":", "113", ",", "570", ":", "-", "1", ",", "571", ":", "-", "1", ",", "572", ":", "114", ",", "573", ":", "115", ",", "574", ":", "-", "1", ",", "575", ":", "116", ",", "576", ":", "-", "1", ",", "577", ":", "-", "1", ",", "578", ":", "-", "1", ",", "579", ":", "117", ",", "580", ":", "-", "1", ",", "581", ":", "-", "1", ",", "582", ":", "-", "1", ",", "583", ":", "-", "1", ",", "584", ":", "-", "1", ",", "585", ":", "-", "1", ",", "586", ":", "-", "1", ",", "587", ":", "-", "1", ",", "588", ":", "-", "1", ",", "589", ":", "118", ",", "590", ":", "-", "1", ",", "591", ":", "-", "1", ",", "592", ":", "-", "1", ",", "593", ":", "-", "1", ",", "594", ":", "-", "1", ",", "595", ":", "-", "1", ",", "596", ":", "-", "1", ",", "597", ":", "-", "1", ",", "598", ":", "-", "1", ",", "599", ":", "-", "1", ",", "600", ":", "-", "1", ",", "601", ":", "-", "1", ",", "602", ":", "-", "1", ",", "603", ":", "-", "1", ",", "604", ":", "-", "1", ",", "605", ":", "-", "1", ",", "606", ":", "119", ",", "607", ":", "120", ",", "608", ":", "-", "1", ",", "609", ":", "121", ",", "610", ":", "-", "1", ",", "611", ":", "-", "1", ",", "612", ":", "-", "1", ",", "613", ":", "-", "1", ",", "614", ":", "122", ",", "615", ":", "-", "1", ",", "616", ":", "-", "1", ",", "617", ":", "-", "1", ",", "618", ":", "-", "1", ",", "619", ":", "-", "1", ",", "620", ":", "-", "1", ",", "621", ":", "-", "1", ",", "622", ":", "-", "1", ",", "623", ":", "-", "1", ",", "624", ":", "-", "1", ",", "625", ":", "-", "1", ",", "626", ":", "123", ",", "627", ":", "124", ",", "628", ":", "-", "1", ",", "629", ":", "-", "1", ",", "630", ":", "-", "1", ",", "631", ":", "-", "1", ",", "632", ":", "-", "1", ",", "633", ":", "-", "1", ",", "634", ":", "-", "1", ",", "635", ":", "-", "1", ",", "636", ":", "-", "1", ",", "637", ":", "-", "1", ",", "638", ":", "-", "1", ",", "639", ":", "-", "1", ",", "640", ":", "125", ",", "641", ":", "126", ",", "642", ":", "127", ",", "643", ":", "128", ",", "644", ":", "-", "1", ",", "645", ":", "-", "1", ",", "646", ":", "-", "1", ",", "647", ":", "-", "1", ",", "648", ":", "-", "1", ",", "649", ":", "-", "1", ",", "650", ":", "-", "1", ",", "651", ":", "-", "1", ",", "652", ":", "-", "1", ",", "653", ":", "-", "1", ",", "654", ":", "-", "1", ",", "655", ":", "-", "1", ",", "656", ":", "-", "1", ",", "657", ":", "-", "1", ",", "658", ":", "129", ",", "659", ":", "-", "1", ",", "660", ":", "-", "1", ",", "661", ":", "-", "1", ",", "662", ":", "-", "1", ",", "663", ":", "-", "1", ",", "664", ":", "-", "1", ",", "665", ":", "-", "1", ",", "666", ":", "-", "1", ",", "667", ":", "-", "1", ",", "668", ":", "130", ",", "669", ":", "-", "1", ",", "670", ":", "-", "1", ",", "671", ":", "-", "1", ",", "672", ":", "-", "1", ",", "673", ":", "-", "1", ",", "674", ":", "-", "1", ",", "675", ":", "-", "1", ",", "676", ":", "-", "1", ",", "677", ":", "131", ",", "678", ":", "-", "1", ",", "679", ":", "-", "1", ",", "680", ":", "-", "1", ",", "681", ":", "-", "1", ",", "682", ":", "132", ",", "683", ":", "-", "1", ",", "684", ":", "133", ",", "685", ":", "-", "1", ",", "686", ":", "-", "1", ",", "687", ":", "134", ",", "688", ":", "-", "1", ",", "689", ":", "-", "1", ",", "690", ":", "-", "1", ",", "691", ":", "-", "1", ",", "692", ":", "-", "1", ",", "693", ":", "-", "1", ",", "694", ":", "-", "1", ",", "695", ":", "-", "1", ",", "696", ":", "-", "1", ",", "697", ":", "-", "1", ",", "698", ":", "-", "1", ",", "699", ":", "-", "1", ",", "700", ":", "-", "1", ",", "701", ":", "135", ",", "702", ":", "-", "1", ",", "703", ":", "-", "1", ",", "704", ":", "136", ",", "705", ":", "-", "1", ",", "706", ":", "-", "1", ",", "707", ":", "-", "1", ",", "708", ":", "-", "1", ",", "709", ":", "-", "1", ",", "710", ":", "-", "1", ",", "711", ":", "-", "1", ",", "712", ":", "-", "1", ",", "713", ":", "-", "1", ",", "714", ":", "-", "1", ",", "715", ":", "-", "1", ",", "716", ":", "-", "1", ",", "717", ":", "-", "1", ",", "718", ":", "-", "1", ",", "719", ":", "137", ",", "720", ":", "-", "1", ",", "721", ":", "-", "1", ",", "722", ":", "-", "1", ",", "723", ":", "-", "1", ",", "724", ":", "-", "1", ",", "725", ":", "-", "1", ",", "726", ":", "-", "1", ",", "727", ":", "-", "1", ",", "728", ":", "-", "1", ",", "729", ":", "-", "1", ",", "730", ":", "-", "1", ",", "731", ":", "-", "1", ",", "732", ":", "-", "1", ",", "733", ":", "-", "1", ",", "734", ":", "-", "1", ",", "735", ":", "-", "1", ",", "736", ":", "138", ",", "737", ":", "-", "1", ",", "738", ":", "-", "1", ",", "739", ":", "-", "1", ",", "740", ":", "-", "1", ",", "741", ":", "-", "1", ",", "742", ":", "-", "1", ",", "743", ":", "-", "1", ",", "744", ":", "-", "1", ",", "745", ":", "-", "1", ",", "746", ":", "139", ",", "747", ":", "-", "1", ",", "748", ":", "-", "1", ",", "749", ":", "140", ",", "750", ":", "-", "1", ",", "751", ":", "-", "1", ",", "752", ":", "141", ",", "753", ":", "-", "1", ",", "754", ":", "-", "1", ",", "755", ":", "-", "1", ",", "756", ":", "-", "1", ",", "757", ":", "-", "1", ",", "758", ":", "142", ",", "759", ":", "-", "1", ",", "760", ":", "-", "1", ",", "761", ":", "-", "1", ",", "762", ":", "-", "1", ",", "763", ":", "143", ",", "764", ":", "-", "1", ",", "765", ":", "144", ",", "766", ":", "-", "1", ",", "767", ":", "-", "1", ",", "768", ":", "145", ",", "769", ":", "-", "1", ",", "770", ":", "-", "1", ",", "771", ":", "-", "1", ",", "772", ":", "-", "1", ",", "773", ":", "146", ",", "774", ":", "147", ",", "775", ":", "-", "1", ",", "776", ":", "148", ",", "777", ":", "-", "1", ",", "778", ":", "-", "1", ",", "779", ":", "149", ",", "780", ":", "150", ",", "781", ":", "-", "1", ",", "782", ":", "-", "1", ",", "783", ":", "-", "1", ",", "784", ":", "-", "1", ",", "785", ":", "-", "1", ",", "786", ":", "151", ",", "787", ":", "-", "1", ",", "788", ":", "-", "1", ",", "789", ":", "-", "1", ",", "790", ":", "-", "1", ",", "791", ":", "-", "1", ",", "792", ":", "152", ",", "793", ":", "-", "1", ",", "794", ":", "-", "1", ",", "795", ":", "-", "1", ",", "796", ":", "-", "1", ",", "797", ":", "153", ",", "798", ":", "-", "1", ",", "799", ":", "-", "1", ",", "800", ":", "-", "1", ",", "801", ":", "-", "1", ",", "802", ":", "154", ",", "803", ":", "155", ",", "804", ":", "156", ",", "805", ":", "-", "1", ",", "806", ":", "-", "1", ",", "807", ":", "-", "1", ",", "808", ":", "-", "1", ",", "809", ":", "-", "1", ",", "810", ":", "-", "1", ",", "811", ":", "-", "1", ",", "812", ":", "-", "1", ",", "813", ":", "157", ",", "814", ":", "-", "1", ",", "815", ":", "158", ",", "816", ":", "-", "1", ",", "817", ":", "-", "1", ",", "818", ":", "-", "1", ",", "819", ":", "-", "1", ",", "820", ":", "159", ",", "821", ":", "-", "1", ",", "822", ":", "-", "1", ",", "823", ":", "160", ",", "824", ":", "-", "1", ",", "825", ":", "-", "1", ",", "826", ":", "-", "1", ",", "827", ":", "-", "1", ",", "828", ":", "-", "1", ",", "829", ":", "-", "1", ",", "830", ":", "-", "1", ",", "831", ":", "161", ",", "832", ":", "-", "1", ",", "833", ":", "162", ",", "834", ":", "-", "1", ",", "835", ":", "163", ",", "836", ":", "-", "1", ",", "837", ":", "-", "1", ",", "838", ":", "-", "1", ",", "839", ":", "164", ",", "840", ":", "-", "1", ",", "841", ":", "-", "1", ",", "842", ":", "-", "1", ",", "843", ":", "-", "1", ",", "844", ":", "-", "1", ",", "845", ":", "165", ",", "846", ":", "-", "1", ",", "847", ":", "166", ",", "848", ":", "-", "1", ",", "849", ":", "-", "1", ",", "850", ":", "167", ",", "851", ":", "-", "1", ",", "852", ":", "-", "1", ",", "853", ":", "-", "1", ",", "854", ":", "-", "1", ",", "855", ":", "-", "1", ",", "856", ":", "-", "1", ",", "857", ":", "-", "1", ",", "858", ":", "-", "1", ",", "859", ":", "168", ",", "860", ":", "-", "1", ",", "861", ":", "-", "1", ",", "862", ":", "169", ",", "863", ":", "-", "1", ",", "864", ":", "-", "1", ",", "865", ":", "-", "1", ",", "866", ":", "-", "1", ",", "867", ":", "-", "1", ",", "868", ":", "-", "1", ",", "869", ":", "-", "1", ",", "870", ":", "170", ",", "871", ":", "-", "1", ",", "872", ":", "-", "1", ",", "873", ":", "-", "1", ",", "874", ":", "-", "1", ",", "875", ":", "-", "1", ",", "876", ":", "-", "1", ",", "877", ":", "-", "1", ",", "878", ":", "-", "1", ",", "879", ":", "171", ",", "880", ":", "172", ",", "881", ":", "-", "1", ",", "882", ":", "-", "1", ",", "883", ":", "-", "1", ",", "884", ":", "-", "1", ",", "885", ":", "-", "1", ",", "886", ":", "-", "1", ",", "887", ":", "-", "1", ",", "888", ":", "173", ",", "889", ":", "-", "1", ",", "890", ":", "174", ",", "891", ":", "-", "1", ",", "892", ":", "-", "1", ",", "893", ":", "-", "1", ",", "894", ":", "-", "1", ",", "895", ":", "-", "1", ",", "896", ":", "-", "1", ",", "897", ":", "175", ",", "898", ":", "-", "1", ",", "899", ":", "-", "1", ",", "900", ":", "176", ",", "901", ":", "-", "1", ",", "902", ":", "-", "1", ",", "903", ":", "-", "1", ",", "904", ":", "-", "1", ",", "905", ":", "-", "1", ",", "906", ":", "-", "1", ",", "907", ":", "177", ",", "908", ":", "-", "1", ",", "909", ":", "-", "1", ",", "910", ":", "-", "1", ",", "911", ":", "-", "1", ",", "912", ":", "-", "1", ",", "913", ":", "178", ",", "914", ":", "-", "1", ",", "915", ":", "-", "1", ",", "916", ":", "-", "1", ",", "917", ":", "-", "1", ",", "918", ":", "-", "1", ",", "919", ":", "-", "1", ",", "920", ":", "-", "1", ",", "921", ":", "-", "1", ",", "922", ":", "-", "1", ",", "923", ":", "-", "1", ",", "924", ":", "179", ",", "925", ":", "-", "1", ",", "926", ":", "-", "1", ",", "927", ":", "-", "1", ",", "928", ":", "-", "1", ",", "929", ":", "-", "1", ",", "930", ":", "-", "1", ",", "931", ":", "-", "1", ",", "932", ":", "180", ",", "933", ":", "181", ",", "934", ":", "182", ",", "935", ":", "-", "1", ",", "936", ":", "-", "1", ",", "937", ":", "183", ",", "938", ":", "-", "1", ",", "939", ":", "-", "1", ",", "940", ":", "-", "1", ",", "941", ":", "-", "1", ",", "942", ":", "-", "1", ",", "943", ":", "184", ",", "944", ":", "-", "1", ",", "945", ":", "185", ",", "946", ":", "-", "1", ",", "947", ":", "186", ",", "948", ":", "-", "1", ",", "949", ":", "-", "1", ",", "950", ":", "-", "1", ",", "951", ":", "187", ",", "952", ":", "-", "1", ",", "953", ":", "-", "1", ",", "954", ":", "188", ",", "955", ":", "-", "1", ",", "956", ":", "189", ",", "957", ":", "190", ",", "958", ":", "-", "1", ",", "959", ":", "191", ",", "960", ":", "-", "1", ",", "961", ":", "-", "1", ",", "962", ":", "-", "1", ",", "963", ":", "-", "1", ",", "964", ":", "-", "1", ",", "965", ":", "-", "1", ",", "966", ":", "-", "1", ",", "967", ":", "-", "1", ",", "968", ":", "-", "1", ",", "969", ":", "-", "1", ",", "970", ":", "-", "1", ",", "971", ":", "192", ",", "972", ":", "193", ",", "973", ":", "-", "1", ",", "974", ":", "-", "1", ",", "975", ":", "-", "1", ",", "976", ":", "-", "1", ",", "977", ":", "-", "1", ",", "978", ":", "-", "1", ",", "979", ":", "-", "1", ",", "980", ":", "194", ",", "981", ":", "195", ",", "982", ":", "-", "1", ",", "983", ":", "-", "1", ",", "984", ":", "196", ",", "985", ":", "-", "1", ",", "986", ":", "197", ",", "987", ":", "198", ",", "988", ":", "199", ",", "989", ":", "-", "1", ",", "990", ":", "-", "1", ",", "991", ":", "-", "1", ",", "992", ":", "-", "1", ",", "993", ":", "-", "1", ",", "994", ":", "-", "1", ",", "995", ":", "-", "1", ",", "996", ":", "-", "1", ",", "997", ":", "-", "1", ",", "998", ":", "-", "1", ",", "999", ":", "-", "1", "}", "\n", "indices_in_1k", "=", "[", "k", "for", "k", "in", "thousand_k_to_200", "if", "thousand_k_to_200", "[", "k", "]", "!=", "-", "1", "]", "\n", "\n", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", "\n", "\n", "test_transform", "=", "trn", ".", "Compose", "(", "\n", "[", "trn", ".", "Resize", "(", "256", ")", ",", "trn", ".", "CenterCrop", "(", "224", ")", ",", "trn", ".", "ToTensor", "(", ")", ",", "trn", ".", "Normalize", "(", "mean", ",", "std", ")", "]", ")", "\n", "\n", "output", "=", "net", "(", "data", ")", "[", ":", ",", "indices_in_1k", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.datasets.imagenetc.ImageNetC.__init__": [[21, 37], ["super().__init__", "str", "os.path.join", "str"], "methods", ["home.repos.pwc.inspect_result.bethgelab_robustness.batchnorm.bn.BayesianBatchNorm.__init__"], ["def", "__init__", "(", "self", ",", "root", ":", "str", ",", "corruption", ":", "str", ",", "severity", ":", "str", ",", "\n", "transform", ":", "Optional", "[", "Callable", "]", "=", "None", ",", "\n", "target_transform", ":", "Optional", "[", "Callable", "]", "=", "None", ",", "\n", "loader", ":", "Callable", "[", "[", "str", "]", ",", "Any", "]", "=", "default_loader", ",", "\n", "is_valid_file", ":", "Optional", "[", "Callable", "[", "[", "str", "]", ",", "bool", "]", "]", "=", "None", "\n", ")", ":", "\n", "        ", "super", "(", "ImageNetC", ",", "self", ")", ".", "__init__", "(", "\n", "root", "=", "os", ".", "path", ".", "join", "(", "root", ",", "corruption", ",", "str", "(", "severity", ")", ")", ",", "\n", "transform", "=", "transform", ",", "\n", "target_transform", "=", "target_transform", ",", "\n", "loader", "=", "loader", ",", "\n", "is_valid_file", "=", "is_valid_file", "\n", ")", "\n", "assert", "corruption", "in", "ImageNetC", ".", "train_corruptions", "or", "corruption", "in", "ImageNetC", ".", "test_corruptions", "\n", "assert", "str", "(", "severity", ")", "in", "ImageNetC", ".", "severities", "\n", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.models.fixup.FixupBasicBlock.__init__": [[68, 81], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "fixup.conv3x3", "torch.Parameter", "torch.Parameter", "torch.ReLU", "torch.ReLU", "torch.Parameter", "torch.Parameter", "fixup.conv3x3", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.bethgelab_robustness.batchnorm.bn.BayesianBatchNorm.__init__", "home.repos.pwc.inspect_result.bethgelab_robustness.models.BiT_models.conv3x3", "home.repos.pwc.inspect_result.bethgelab_robustness.models.BiT_models.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "FixupBasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# Both self.conv1 and self.downsample layers downsample the input when stride != 1", "\n", "self", ".", "bias1a", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ")", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bias1b", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ")", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "bias2a", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ")", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "scale", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "1", ")", ")", "\n", "self", ".", "bias2b", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ")", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.models.fixup.FixupBasicBlock.forward": [[82, 98], ["fixup.FixupBasicBlock.conv1", "fixup.FixupBasicBlock.relu", "fixup.FixupBasicBlock.conv2", "fixup.FixupBasicBlock.relu", "fixup.FixupBasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", "+", "self", ".", "bias1a", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", "+", "self", ".", "bias1b", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", "+", "self", ".", "bias2a", ")", "\n", "out", "=", "out", "*", "self", ".", "scale", "+", "self", ".", "bias2b", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", "+", "self", ".", "bias1a", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.models.fixup.FixupBottleneck.__init__": [[103, 119], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "fixup.conv1x1", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "fixup.conv3x3", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "fixup.conv1x1", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.ReLU", "torch.ReLU", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.bethgelab_robustness.batchnorm.bn.BayesianBatchNorm.__init__", "home.repos.pwc.inspect_result.bethgelab_robustness.models.BiT_models.conv1x1", "home.repos.pwc.inspect_result.bethgelab_robustness.models.BiT_models.conv3x3", "home.repos.pwc.inspect_result.bethgelab_robustness.models.BiT_models.conv1x1"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "FixupBottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# Both self.conv2 and self.downsample layers downsample the input when stride != 1", "\n", "self", ".", "bias1a", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ")", ")", "\n", "self", ".", "conv1", "=", "conv1x1", "(", "inplanes", ",", "planes", ")", "\n", "self", ".", "bias1b", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ")", ")", "\n", "self", ".", "bias2a", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ")", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bias2b", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ")", ")", "\n", "self", ".", "bias3a", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ")", ")", "\n", "self", ".", "conv3", "=", "conv1x1", "(", "planes", ",", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "scale", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "1", ")", ")", "\n", "self", ".", "bias3b", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ")", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.models.fixup.FixupBottleneck.forward": [[120, 139], ["fixup.FixupBottleneck.conv1", "fixup.FixupBottleneck.relu", "fixup.FixupBottleneck.conv2", "fixup.FixupBottleneck.relu", "fixup.FixupBottleneck.conv3", "fixup.FixupBottleneck.relu", "fixup.FixupBottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", "+", "self", ".", "bias1a", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", "+", "self", ".", "bias1b", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", "+", "self", ".", "bias2a", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", "+", "self", ".", "bias2b", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", "+", "self", ".", "bias3a", ")", "\n", "out", "=", "out", "*", "self", ".", "scale", "+", "self", ".", "bias3b", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", "+", "self", ".", "bias1a", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.models.fixup.FixupResNet.__init__": [[142, 217], ["torch.Module.__init__", "sum", "torch.Conv2d", "torch.Conv2d", "torch.Parameter", "torch.Parameter", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "fixup.FixupResNet._make_layer", "fixup.FixupResNet._make_layer", "fixup.FixupResNet._make_layer", "fixup.FixupResNet._make_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Parameter", "torch.Parameter", "torch.Linear", "torch.Linear", "fixup.FixupResNet.modules", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "isinstance", "torch.init.normal_", "torch.init.normal_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.normal_", "torch.init.normal_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.prod", "numpy.prod", "numpy.prod", "numpy.prod", "numpy.prod"], "methods", ["home.repos.pwc.inspect_result.bethgelab_robustness.batchnorm.bn.BayesianBatchNorm.__init__", "home.repos.pwc.inspect_result.bethgelab_robustness.models.resnet_gn.ResNet._make_layer", "home.repos.pwc.inspect_result.bethgelab_robustness.models.resnet_gn.ResNet._make_layer", "home.repos.pwc.inspect_result.bethgelab_robustness.models.resnet_gn.ResNet._make_layer", "home.repos.pwc.inspect_result.bethgelab_robustness.models.resnet_gn.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ")", ":", "\n", "        ", "super", "(", "FixupResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_layers", "=", "sum", "(", "layers", ")", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "bias", "=", "False", ")", "\n", "self", ".", "bias1", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ")", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "bias2", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ")", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "FixupBasicBlock", ")", ":", "\n", "                ", "nn", ".", "init", ".", "normal_", "(", "\n", "m", ".", "conv1", ".", "weight", ",", "\n", "mean", "=", "0", ",", "\n", "std", "=", "np", ".", "sqrt", "(", "\n", "2", "\n", "/", "(", "m", ".", "conv1", ".", "weight", ".", "shape", "[", "0", "]", "*", "np", ".", "prod", "(", "m", ".", "conv1", ".", "weight", ".", "shape", "[", "2", ":", "]", ")", ")", "\n", ")", "\n", "*", "self", ".", "num_layers", "**", "(", "-", "0.5", ")", ",", "\n", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "conv2", ".", "weight", ",", "0", ")", "\n", "if", "m", ".", "downsample", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "normal_", "(", "\n", "m", ".", "downsample", ".", "weight", ",", "\n", "mean", "=", "0", ",", "\n", "std", "=", "np", ".", "sqrt", "(", "\n", "2", "\n", "/", "(", "\n", "m", ".", "downsample", ".", "weight", ".", "shape", "[", "0", "]", "\n", "*", "np", ".", "prod", "(", "m", ".", "downsample", ".", "weight", ".", "shape", "[", "2", ":", "]", ")", "\n", ")", "\n", ")", ",", "\n", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "FixupBottleneck", ")", ":", "\n", "                ", "nn", ".", "init", ".", "normal_", "(", "\n", "m", ".", "conv1", ".", "weight", ",", "\n", "mean", "=", "0", ",", "\n", "std", "=", "np", ".", "sqrt", "(", "\n", "2", "\n", "/", "(", "m", ".", "conv1", ".", "weight", ".", "shape", "[", "0", "]", "*", "np", ".", "prod", "(", "m", ".", "conv1", ".", "weight", ".", "shape", "[", "2", ":", "]", ")", ")", "\n", ")", "\n", "*", "self", ".", "num_layers", "**", "(", "-", "0.25", ")", ",", "\n", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "\n", "m", ".", "conv2", ".", "weight", ",", "\n", "mean", "=", "0", ",", "\n", "std", "=", "np", ".", "sqrt", "(", "\n", "2", "\n", "/", "(", "m", ".", "conv2", ".", "weight", ".", "shape", "[", "0", "]", "*", "np", ".", "prod", "(", "m", ".", "conv2", ".", "weight", ".", "shape", "[", "2", ":", "]", ")", ")", "\n", ")", "\n", "*", "self", ".", "num_layers", "**", "(", "-", "0.25", ")", ",", "\n", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "conv3", ".", "weight", ",", "0", ")", "\n", "if", "m", ".", "downsample", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "normal_", "(", "\n", "m", ".", "downsample", ".", "weight", ",", "\n", "mean", "=", "0", ",", "\n", "std", "=", "np", ".", "sqrt", "(", "\n", "2", "\n", "/", "(", "\n", "m", ".", "downsample", ".", "weight", ".", "shape", "[", "0", "]", "\n", "*", "np", ".", "prod", "(", "m", ".", "downsample", ".", "weight", ".", "shape", "[", "2", ":", "]", ")", "\n", ")", "\n", ")", ",", "\n", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.models.fixup.FixupResNet._make_layer": [[218, 230], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "fixup.conv1x1", "block", "layers.append", "block"], "methods", ["home.repos.pwc.inspect_result.bethgelab_robustness.src.evaluate.Emissions.append", "home.repos.pwc.inspect_result.bethgelab_robustness.models.BiT_models.conv1x1", "home.repos.pwc.inspect_result.bethgelab_robustness.src.evaluate.Emissions.append"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "stride", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.models.fixup.FixupResNet.forward": [[231, 246], ["fixup.FixupResNet.conv1", "fixup.FixupResNet.relu", "fixup.FixupResNet.maxpool", "fixup.FixupResNet.layer1", "fixup.FixupResNet.layer2", "fixup.FixupResNet.layer3", "fixup.FixupResNet.layer4", "fixup.FixupResNet.avgpool", "fixup.FixupResNet.view", "fixup.FixupResNet.fc", "fixup.FixupResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", "+", "self", ".", "bias1", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", "+", "self", ".", "bias2", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.models.fixup.conv3x3": [[53, 57], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.models.fixup.conv1x1": [[60, 63], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"1x1 convolution\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.models.fixup.fixup_resnet18": [[248, 252], ["fixup.FixupResNet"], "function", ["None"], ["", "", "def", "fixup_resnet18", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a Fixup-ResNet-18 model.\"\"\"", "\n", "model", "=", "FixupResNet", "(", "FixupBasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.models.fixup.fixup_resnet34": [[254, 258], ["fixup.FixupResNet"], "function", ["None"], ["", "def", "fixup_resnet34", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a Fixup-ResNet-34 model.\"\"\"", "\n", "model", "=", "FixupResNet", "(", "FixupBasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.models.fixup.fixup_resnet50": [[260, 264], ["fixup.FixupResNet"], "function", ["None"], ["", "def", "fixup_resnet50", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a Fixup-ResNet-50 model.\"\"\"", "\n", "model", "=", "FixupResNet", "(", "FixupBottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.models.fixup.fixup_resnet101": [[266, 270], ["fixup.FixupResNet"], "function", ["None"], ["", "def", "fixup_resnet101", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a Fixup-ResNet-101 model.\"\"\"", "\n", "model", "=", "FixupResNet", "(", "FixupBottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.models.fixup.fixup_resnet152": [[272, 276], ["fixup.FixupResNet"], "function", ["None"], ["", "def", "fixup_resnet152", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a Fixup-ResNet-152 model.\"\"\"", "\n", "model", "=", "FixupResNet", "(", "FixupBottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.bethgelab_robustness.models.imagenet_model.ZeroOneResNet50_parallel.__init__": [[7, 18], ["torch.Module.__init__", "torchvision.resnet50", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.bethgelab_robustness.batchnorm.bn.BayesianBatchNorm.__init__", "home.repos.pwc.inspect_result.bethgelab_robustness.models.resnet_gn.resnet50"], ["    ", "def", "__init__", "(", "self", ",", "device", "=", "\"cuda\"", ",", "pretrained", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "resnet", "=", "models", ".", "resnet50", "(", "pretrained", "=", "pretrained", ")", "\n", "\n", "self", ".", "mean", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "FloatTensor", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ")", "[", "None", ",", ":", ",", "None", ",", "None", "]", ",", "\n", "requires_grad", "=", "False", ",", "\n", ")", "# asdf changed", "\n", "self", ".", "std", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "FloatTensor", "(", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "[", "None", ",", ":", ",", "None", ",", "None", "]", ",", "\n", "requires_grad", "=", "False", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.models.imagenet_model.ZeroOneResNet50_parallel.forward": [[20, 23], ["imagenet_model.ZeroOneResNet50_parallel.resnet"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "# input = (input - self.mean) / self.std", "\n", "        ", "return", "self", ".", "resnet", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.models.imagenet_model.ZeroOneInceptionV3.__init__": [[26, 36], ["torch.Module.__init__", "torchvision.inception_v3", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.bethgelab_robustness.batchnorm.bn.BayesianBatchNorm.__init__"], ["    ", "def", "__init__", "(", "self", ",", "device", "=", "\"cuda\"", ",", "pretrained", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "inception", "=", "models", ".", "inception_v3", "(", "pretrained", "=", "True", ",", "transform_input", "=", "True", ")", "\n", "self", ".", "mean", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "FloatTensor", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ")", "[", "None", ",", ":", ",", "None", ",", "None", "]", ",", "\n", "requires_grad", "=", "False", ",", "\n", ")", "\n", "self", ".", "std", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "FloatTensor", "(", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "[", "None", ",", ":", ",", "None", ",", "None", "]", ",", "\n", "requires_grad", "=", "False", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.models.imagenet_model.ZeroOneInceptionV3.forward": [[38, 41], ["imagenet_model.ZeroOneInceptionV3.inception"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "# input = (input - self.mean) / self.std", "\n", "        ", "return", "self", ".", "inception", "(", "input", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.bethgelab_robustness.models.resnet_gn.Bottleneck.__init__": [[19, 36], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.GroupNorm", "torch.GroupNorm", "torch.Conv2d", "torch.Conv2d", "torch.GroupNorm", "torch.GroupNorm", "torch.Conv2d", "torch.Conv2d", "torch.GroupNorm", "torch.GroupNorm", "torch.ReLU", "torch.ReLU", "resnet_gn.gn_init", "resnet_gn.gn_init", "resnet_gn.gn_init"], "methods", ["home.repos.pwc.inspect_result.bethgelab_robustness.batchnorm.bn.BayesianBatchNorm.__init__", "home.repos.pwc.inspect_result.bethgelab_robustness.models.resnet_gn.gn_init", "home.repos.pwc.inspect_result.bethgelab_robustness.models.resnet_gn.gn_init", "home.repos.pwc.inspect_result.bethgelab_robustness.models.resnet_gn.gn_init"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "GroupNorm", "(", "32", ",", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "\n", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", "\n", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "GroupNorm", "(", "32", ",", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "GroupNorm", "(", "32", ",", "planes", "*", "4", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n", "gn_init", "(", "self", ".", "bn1", ")", "\n", "gn_init", "(", "self", ".", "bn2", ")", "\n", "gn_init", "(", "self", ".", "bn3", ",", "zero_init", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.models.resnet_gn.Bottleneck.forward": [[37, 58], ["resnet_gn.Bottleneck.conv1", "resnet_gn.Bottleneck.bn1", "resnet_gn.Bottleneck.relu", "resnet_gn.Bottleneck.conv2", "resnet_gn.Bottleneck.bn2", "resnet_gn.Bottleneck.relu", "resnet_gn.Bottleneck.conv3", "resnet_gn.Bottleneck.bn3", "resnet_gn.Bottleneck.relu", "resnet_gn.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.models.resnet_gn.ResNet.__init__": [[73, 91], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.GroupNorm", "torch.GroupNorm", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "resnet_gn.ResNet._make_layer", "resnet_gn.ResNet._make_layer", "resnet_gn.ResNet._make_layer", "resnet_gn.ResNet._make_layer", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "resnet_gn.ResNet.modules", "resnet_gn.gn_init", "isinstance", "resnet_gn.conv2d_init"], "methods", ["home.repos.pwc.inspect_result.bethgelab_robustness.batchnorm.bn.BayesianBatchNorm.__init__", "home.repos.pwc.inspect_result.bethgelab_robustness.models.resnet_gn.ResNet._make_layer", "home.repos.pwc.inspect_result.bethgelab_robustness.models.resnet_gn.ResNet._make_layer", "home.repos.pwc.inspect_result.bethgelab_robustness.models.resnet_gn.ResNet._make_layer", "home.repos.pwc.inspect_result.bethgelab_robustness.models.resnet_gn.ResNet._make_layer", "home.repos.pwc.inspect_result.bethgelab_robustness.models.resnet_gn.gn_init", "home.repos.pwc.inspect_result.bethgelab_robustness.models.resnet_gn.conv2d_init"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "GroupNorm", "(", "32", ",", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "7", ",", "stride", "=", "1", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "conv2d_init", "(", "m", ")", "\n", "", "", "gn_init", "(", "self", ".", "bn1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.models.resnet_gn.ResNet._make_layer": [[92, 116], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "isinstance", "resnet_gn.gn_init", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.GroupNorm", "torch.GroupNorm", "block"], "methods", ["home.repos.pwc.inspect_result.bethgelab_robustness.src.evaluate.Emissions.append", "home.repos.pwc.inspect_result.bethgelab_robustness.models.resnet_gn.gn_init", "home.repos.pwc.inspect_result.bethgelab_robustness.src.evaluate.Emissions.append"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "self", ".", "inplanes", ",", "\n", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "stride", ",", "\n", "bias", "=", "False", ",", "\n", ")", ",", "\n", "nn", ".", "GroupNorm", "(", "32", ",", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "m", "=", "downsample", "[", "1", "]", "\n", "assert", "isinstance", "(", "m", ",", "nn", ".", "GroupNorm", ")", "\n", "gn_init", "(", "m", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.models.resnet_gn.ResNet.forward": [[117, 133], ["resnet_gn.ResNet.conv1", "resnet_gn.ResNet.bn1", "resnet_gn.ResNet.relu", "resnet_gn.ResNet.maxpool", "resnet_gn.ResNet.layer1", "resnet_gn.ResNet.layer2", "resnet_gn.ResNet.layer3", "resnet_gn.ResNet.layer4", "resnet_gn.ResNet.avgpool", "resnet_gn.ResNet.view", "resnet_gn.ResNet.fc", "resnet_gn.ResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.models.resnet_gn.conv3x3": [[9, 13], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"3x3 convolution with padding\"", "\n", "return", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.models.resnet_gn.conv2d_init": [[60, 64], ["isinstance", "m.weight.data.normal_", "math.sqrt"], "function", ["None"], ["", "", "def", "conv2d_init", "(", "m", ")", ":", "\n", "    ", "assert", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", "\n", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.0", "/", "n", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.models.resnet_gn.gn_init": [[66, 70], ["isinstance", "m.weight.data.fill_", "m.bias.data.zero_"], "function", ["None"], ["", "def", "gn_init", "(", "m", ",", "zero_init", "=", "False", ")", ":", "\n", "    ", "assert", "isinstance", "(", "m", ",", "nn", ".", "GroupNorm", ")", "\n", "m", ".", "weight", ".", "data", ".", "fill_", "(", "0.0", "if", "zero_init", "else", "1.0", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.models.resnet_gn.resnet50": [[135, 138], ["resnet_gn.ResNet"], "function", ["None"], ["", "", "def", "resnet50", "(", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.models.resnet_gn.resnet101": [[140, 143], ["resnet_gn.ResNet"], "function", ["None"], ["", "def", "resnet101", "(", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.models.resnet_gn.resnet152": [[145, 148], ["resnet_gn.ResNet"], "function", ["None"], ["", "def", "resnet152", "(", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.bethgelab_robustness.models.BiT_models.StdConv2d.forward": [[26, 32], ["torch.var_mean", "torch.var_mean", "torch.var_mean", "torch.var_mean", "torch.var_mean", "torch.var_mean", "torch.var_mean", "torch.var_mean", "torch.var_mean", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "w", "=", "self", ".", "weight", "\n", "v", ",", "m", "=", "torch", ".", "var_mean", "(", "w", ",", "dim", "=", "[", "1", ",", "2", ",", "3", "]", ",", "keepdim", "=", "True", ",", "unbiased", "=", "False", ")", "\n", "w", "=", "(", "w", "-", "m", ")", "/", "torch", ".", "sqrt", "(", "v", "+", "1e-10", ")", "\n", "return", "F", ".", "conv2d", "(", "\n", "x", ",", "w", ",", "self", ".", "bias", ",", "self", ".", "stride", ",", "self", ".", "padding", ",", "self", ".", "dilation", ",", "self", ".", "groups", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.models.BiT_models.PreActBottleneck.__init__": [[59, 75], ["torch.Module.__init__", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "BiT_models.conv1x1", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "BiT_models.conv3x3", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "BiT_models.conv1x1", "torch.ReLU", "torch.ReLU", "torch.ReLU", "BiT_models.conv1x1"], "methods", ["home.repos.pwc.inspect_result.bethgelab_robustness.batchnorm.bn.BayesianBatchNorm.__init__", "home.repos.pwc.inspect_result.bethgelab_robustness.models.BiT_models.conv1x1", "home.repos.pwc.inspect_result.bethgelab_robustness.models.BiT_models.conv3x3", "home.repos.pwc.inspect_result.bethgelab_robustness.models.BiT_models.conv1x1", "home.repos.pwc.inspect_result.bethgelab_robustness.models.BiT_models.conv1x1"], ["def", "__init__", "(", "self", ",", "cin", ",", "cout", "=", "None", ",", "cmid", "=", "None", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "cout", "=", "cout", "or", "cin", "\n", "cmid", "=", "cmid", "or", "cout", "//", "4", "\n", "\n", "self", ".", "gn1", "=", "nn", ".", "GroupNorm", "(", "32", ",", "cin", ")", "\n", "self", ".", "conv1", "=", "conv1x1", "(", "cin", ",", "cmid", ")", "\n", "self", ".", "gn2", "=", "nn", ".", "GroupNorm", "(", "32", ",", "cmid", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "cmid", ",", "cmid", ",", "stride", ")", "# Original code has it on conv1!!", "\n", "self", ".", "gn3", "=", "nn", ".", "GroupNorm", "(", "32", ",", "cmid", ")", "\n", "self", ".", "conv3", "=", "conv1x1", "(", "cmid", ",", "cout", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "if", "stride", "!=", "1", "or", "cin", "!=", "cout", ":", "\n", "# Projection also with pre-activation according to paper.", "\n", "            ", "self", ".", "downsample", "=", "conv1x1", "(", "cin", ",", "cout", ",", "stride", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.models.BiT_models.PreActBottleneck.forward": [[76, 90], ["BiT_models.PreActBottleneck.relu", "hasattr", "BiT_models.PreActBottleneck.conv1", "BiT_models.PreActBottleneck.conv2", "BiT_models.PreActBottleneck.conv3", "BiT_models.PreActBottleneck.gn1", "BiT_models.PreActBottleneck.downsample", "BiT_models.PreActBottleneck.relu", "BiT_models.PreActBottleneck.relu", "BiT_models.PreActBottleneck.gn2", "BiT_models.PreActBottleneck.gn3"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "relu", "(", "self", ".", "gn1", "(", "x", ")", ")", "\n", "\n", "# Residual branch", "\n", "residual", "=", "x", "\n", "if", "hasattr", "(", "self", ",", "\"downsample\"", ")", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "out", ")", "\n", "\n", "# Unit's branch", "\n", "", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "self", ".", "relu", "(", "self", ".", "gn2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "conv3", "(", "self", ".", "relu", "(", "self", ".", "gn3", "(", "out", ")", ")", ")", "\n", "\n", "return", "out", "+", "residual", "\n", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.models.BiT_models.PreActBottleneck.load_from": [[91, 106], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "BiT_models.PreActBottleneck.conv1.weight.copy_", "BiT_models.PreActBottleneck.conv2.weight.copy_", "BiT_models.PreActBottleneck.conv3.weight.copy_", "BiT_models.PreActBottleneck.gn1.weight.copy_", "BiT_models.PreActBottleneck.gn2.weight.copy_", "BiT_models.PreActBottleneck.gn3.weight.copy_", "BiT_models.PreActBottleneck.gn1.bias.copy_", "BiT_models.PreActBottleneck.gn2.bias.copy_", "BiT_models.PreActBottleneck.gn3.bias.copy_", "hasattr", "BiT_models.tf2th", "BiT_models.tf2th", "BiT_models.tf2th", "BiT_models.tf2th", "BiT_models.tf2th", "BiT_models.tf2th", "BiT_models.tf2th", "BiT_models.tf2th", "BiT_models.tf2th", "BiT_models.PreActBottleneck.downsample.weight.copy_", "BiT_models.tf2th"], "methods", ["home.repos.pwc.inspect_result.bethgelab_robustness.models.BiT_models.tf2th", "home.repos.pwc.inspect_result.bethgelab_robustness.models.BiT_models.tf2th", "home.repos.pwc.inspect_result.bethgelab_robustness.models.BiT_models.tf2th", "home.repos.pwc.inspect_result.bethgelab_robustness.models.BiT_models.tf2th", "home.repos.pwc.inspect_result.bethgelab_robustness.models.BiT_models.tf2th", "home.repos.pwc.inspect_result.bethgelab_robustness.models.BiT_models.tf2th", "home.repos.pwc.inspect_result.bethgelab_robustness.models.BiT_models.tf2th", "home.repos.pwc.inspect_result.bethgelab_robustness.models.BiT_models.tf2th", "home.repos.pwc.inspect_result.bethgelab_robustness.models.BiT_models.tf2th", "home.repos.pwc.inspect_result.bethgelab_robustness.models.BiT_models.tf2th"], ["", "def", "load_from", "(", "self", ",", "weights", ",", "prefix", "=", "\"\"", ")", ":", "\n", "        ", "convname", "=", "\"standardized_conv2d\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "self", ".", "conv1", ".", "weight", ".", "copy_", "(", "tf2th", "(", "weights", "[", "f\"{prefix}a/{convname}/kernel\"", "]", ")", ")", "\n", "self", ".", "conv2", ".", "weight", ".", "copy_", "(", "tf2th", "(", "weights", "[", "f\"{prefix}b/{convname}/kernel\"", "]", ")", ")", "\n", "self", ".", "conv3", ".", "weight", ".", "copy_", "(", "tf2th", "(", "weights", "[", "f\"{prefix}c/{convname}/kernel\"", "]", ")", ")", "\n", "self", ".", "gn1", ".", "weight", ".", "copy_", "(", "tf2th", "(", "weights", "[", "f\"{prefix}a/group_norm/gamma\"", "]", ")", ")", "\n", "self", ".", "gn2", ".", "weight", ".", "copy_", "(", "tf2th", "(", "weights", "[", "f\"{prefix}b/group_norm/gamma\"", "]", ")", ")", "\n", "self", ".", "gn3", ".", "weight", ".", "copy_", "(", "tf2th", "(", "weights", "[", "f\"{prefix}c/group_norm/gamma\"", "]", ")", ")", "\n", "self", ".", "gn1", ".", "bias", ".", "copy_", "(", "tf2th", "(", "weights", "[", "f\"{prefix}a/group_norm/beta\"", "]", ")", ")", "\n", "self", ".", "gn2", ".", "bias", ".", "copy_", "(", "tf2th", "(", "weights", "[", "f\"{prefix}b/group_norm/beta\"", "]", ")", ")", "\n", "self", ".", "gn3", ".", "bias", ".", "copy_", "(", "tf2th", "(", "weights", "[", "f\"{prefix}c/group_norm/beta\"", "]", ")", ")", "\n", "if", "hasattr", "(", "self", ",", "\"downsample\"", ")", ":", "\n", "                ", "w", "=", "weights", "[", "f\"{prefix}a/proj/{convname}/kernel\"", "]", "\n", "self", ".", "downsample", ".", "weight", ".", "copy_", "(", "tf2th", "(", "w", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.models.BiT_models.ResNetV2.__init__": [[111, 255], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "collections.OrderedDict", "collections.OrderedDict", "collections.OrderedDict", "BiT_models.StdConv2d", "torch.ConstantPad2d", "torch.ConstantPad2d", "torch.ConstantPad2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "collections.OrderedDict", "collections.OrderedDict", "collections.OrderedDict", "collections.OrderedDict", "BiT_models.PreActBottleneck", "BiT_models.PreActBottleneck", "range", "BiT_models.PreActBottleneck", "BiT_models.PreActBottleneck", "range", "BiT_models.PreActBottleneck", "BiT_models.PreActBottleneck", "range", "BiT_models.PreActBottleneck", "BiT_models.PreActBottleneck", "range"], "methods", ["home.repos.pwc.inspect_result.bethgelab_robustness.batchnorm.bn.BayesianBatchNorm.__init__"], ["def", "__init__", "(", "self", ",", "block_units", ",", "width_factor", ",", "head_size", "=", "21843", ",", "zero_head", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "wf", "=", "width_factor", "# shortcut 'cause we'll use it a lot.", "\n", "\n", "# The following will be unreadable if we split lines.", "\n", "# pylint: disable=line-too-long", "\n", "self", ".", "root", "=", "nn", ".", "Sequential", "(", "\n", "OrderedDict", "(", "\n", "[", "\n", "(", "\n", "\"conv\"", ",", "\n", "StdConv2d", "(", "\n", "3", ",", "64", "*", "wf", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "bias", "=", "False", "\n", ")", ",", "\n", ")", ",", "\n", "(", "\"pad\"", ",", "nn", ".", "ConstantPad2d", "(", "1", ",", "0", ")", ")", ",", "\n", "(", "\"pool\"", ",", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", ")", ",", "\n", "# The following is subtly not the same!", "\n", "# ('pool', nn.MaxPool2d(kernel_size=3, stride=2, padding=1)),", "\n", "]", "\n", ")", "\n", ")", "\n", "\n", "self", ".", "body", "=", "nn", ".", "Sequential", "(", "\n", "OrderedDict", "(", "\n", "[", "\n", "(", "\n", "\"block1\"", ",", "\n", "nn", ".", "Sequential", "(", "\n", "OrderedDict", "(", "\n", "[", "\n", "(", "\n", "\"unit01\"", ",", "\n", "PreActBottleneck", "(", "\n", "cin", "=", "64", "*", "wf", ",", "cout", "=", "256", "*", "wf", ",", "cmid", "=", "64", "*", "wf", "\n", ")", ",", "\n", ")", "\n", "]", "\n", "+", "[", "\n", "(", "\n", "f\"unit{i:02d}\"", ",", "\n", "PreActBottleneck", "(", "\n", "cin", "=", "256", "*", "wf", ",", "cout", "=", "256", "*", "wf", ",", "cmid", "=", "64", "*", "wf", "\n", ")", ",", "\n", ")", "\n", "for", "i", "in", "range", "(", "2", ",", "block_units", "[", "0", "]", "+", "1", ")", "\n", "]", ",", "\n", ")", "\n", ")", ",", "\n", ")", ",", "\n", "(", "\n", "\"block2\"", ",", "\n", "nn", ".", "Sequential", "(", "\n", "OrderedDict", "(", "\n", "[", "\n", "(", "\n", "\"unit01\"", ",", "\n", "PreActBottleneck", "(", "\n", "cin", "=", "256", "*", "wf", ",", "\n", "cout", "=", "512", "*", "wf", ",", "\n", "cmid", "=", "128", "*", "wf", ",", "\n", "stride", "=", "2", ",", "\n", ")", ",", "\n", ")", "\n", "]", "\n", "+", "[", "\n", "(", "\n", "f\"unit{i:02d}\"", ",", "\n", "PreActBottleneck", "(", "\n", "cin", "=", "512", "*", "wf", ",", "cout", "=", "512", "*", "wf", ",", "cmid", "=", "128", "*", "wf", "\n", ")", ",", "\n", ")", "\n", "for", "i", "in", "range", "(", "2", ",", "block_units", "[", "1", "]", "+", "1", ")", "\n", "]", ",", "\n", ")", "\n", ")", ",", "\n", ")", ",", "\n", "(", "\n", "\"block3\"", ",", "\n", "nn", ".", "Sequential", "(", "\n", "OrderedDict", "(", "\n", "[", "\n", "(", "\n", "\"unit01\"", ",", "\n", "PreActBottleneck", "(", "\n", "cin", "=", "512", "*", "wf", ",", "\n", "cout", "=", "1024", "*", "wf", ",", "\n", "cmid", "=", "256", "*", "wf", ",", "\n", "stride", "=", "2", ",", "\n", ")", ",", "\n", ")", "\n", "]", "\n", "+", "[", "\n", "(", "\n", "f\"unit{i:02d}\"", ",", "\n", "PreActBottleneck", "(", "\n", "cin", "=", "1024", "*", "wf", ",", "cout", "=", "1024", "*", "wf", ",", "cmid", "=", "256", "*", "wf", "\n", ")", ",", "\n", ")", "\n", "for", "i", "in", "range", "(", "2", ",", "block_units", "[", "2", "]", "+", "1", ")", "\n", "]", ",", "\n", ")", "\n", ")", ",", "\n", ")", ",", "\n", "(", "\n", "\"block4\"", ",", "\n", "nn", ".", "Sequential", "(", "\n", "OrderedDict", "(", "\n", "[", "\n", "(", "\n", "\"unit01\"", ",", "\n", "PreActBottleneck", "(", "\n", "cin", "=", "1024", "*", "wf", ",", "\n", "cout", "=", "2048", "*", "wf", ",", "\n", "cmid", "=", "512", "*", "wf", ",", "\n", "stride", "=", "2", ",", "\n", ")", ",", "\n", ")", "\n", "]", "\n", "+", "[", "\n", "(", "\n", "f\"unit{i:02d}\"", ",", "\n", "PreActBottleneck", "(", "\n", "cin", "=", "2048", "*", "wf", ",", "cout", "=", "2048", "*", "wf", ",", "cmid", "=", "512", "*", "wf", "\n", ")", ",", "\n", ")", "\n", "for", "i", "in", "range", "(", "2", ",", "block_units", "[", "3", "]", "+", "1", ")", "\n", "]", ",", "\n", ")", "\n", ")", ",", "\n", ")", ",", "\n", "]", "\n", ")", "\n", ")", "\n", "# pylint: enable=line-too-long", "\n", "\n", "self", ".", "zero_head", "=", "zero_head", "\n", "self", ".", "head", "=", "nn", ".", "Sequential", "(", "\n", "OrderedDict", "(", "\n", "[", "\n", "(", "\"gn\"", ",", "nn", ".", "GroupNorm", "(", "32", ",", "2048", "*", "wf", ")", ")", ",", "\n", "(", "\"relu\"", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "(", "\"avg\"", ",", "nn", ".", "AdaptiveAvgPool2d", "(", "output_size", "=", "1", ")", ")", ",", "\n", "(", "\"conv\"", ",", "nn", ".", "Conv2d", "(", "2048", "*", "wf", ",", "head_size", ",", "kernel_size", "=", "1", ",", "bias", "=", "True", ")", ")", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.models.BiT_models.ResNetV2.forward": [[259, 263], ["BiT_models.ResNetV2.head", "BiT_models.ResNetV2.body", "BiT_models.ResNetV2.root"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "head", "(", "self", ".", "body", "(", "self", ".", "root", "(", "x", ")", ")", ")", "\n", "assert", "x", ".", "shape", "[", "-", "2", ":", "]", "==", "(", "1", ",", "1", ")", "# We should have no spatial shape left.", "\n", "return", "x", "[", "...", ",", "0", ",", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.models.BiT_models.ResNetV2.load_from": [[264, 283], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "BiT_models.ResNetV2.root.conv.weight.copy_", "BiT_models.ResNetV2.head.gn.weight.copy_", "BiT_models.ResNetV2.head.gn.bias.copy_", "BiT_models.ResNetV2.body.named_children", "BiT_models.tf2th", "BiT_models.tf2th", "BiT_models.tf2th", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_", "BiT_models.ResNetV2.head.conv.weight.copy_", "BiT_models.ResNetV2.head.conv.bias.copy_", "block.named_children", "BiT_models.tf2th", "BiT_models.tf2th", "unit.load_from"], "methods", ["home.repos.pwc.inspect_result.bethgelab_robustness.models.BiT_models.tf2th", "home.repos.pwc.inspect_result.bethgelab_robustness.models.BiT_models.tf2th", "home.repos.pwc.inspect_result.bethgelab_robustness.models.BiT_models.tf2th", "home.repos.pwc.inspect_result.bethgelab_robustness.models.BiT_models.tf2th", "home.repos.pwc.inspect_result.bethgelab_robustness.models.BiT_models.tf2th", "home.repos.pwc.inspect_result.bethgelab_robustness.models.BiT_models.ResNetV2.load_from"], ["", "def", "load_from", "(", "self", ",", "weights", ",", "prefix", "=", "\"resnet/\"", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "self", ".", "root", ".", "conv", ".", "weight", ".", "copy_", "(", "\n", "tf2th", "(", "weights", "[", "f\"{prefix}root_block/standardized_conv2d/kernel\"", "]", ")", "\n", ")", "# pylint: disable=line-too-long", "\n", "self", ".", "head", ".", "gn", ".", "weight", ".", "copy_", "(", "tf2th", "(", "weights", "[", "f\"{prefix}group_norm/gamma\"", "]", ")", ")", "\n", "self", ".", "head", ".", "gn", ".", "bias", ".", "copy_", "(", "tf2th", "(", "weights", "[", "f\"{prefix}group_norm/beta\"", "]", ")", ")", "\n", "if", "self", ".", "zero_head", ":", "\n", "                ", "nn", ".", "init", ".", "zeros_", "(", "self", ".", "head", ".", "conv", ".", "weight", ")", "\n", "nn", ".", "init", ".", "zeros_", "(", "self", ".", "head", ".", "conv", ".", "bias", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "head", ".", "conv", ".", "weight", ".", "copy_", "(", "\n", "tf2th", "(", "weights", "[", "f\"{prefix}head/conv2d/kernel\"", "]", ")", "\n", ")", "# pylint: disable=line-too-long", "\n", "self", ".", "head", ".", "conv", ".", "bias", ".", "copy_", "(", "tf2th", "(", "weights", "[", "f\"{prefix}head/conv2d/bias\"", "]", ")", ")", "\n", "\n", "", "for", "bname", ",", "block", "in", "self", ".", "body", ".", "named_children", "(", ")", ":", "\n", "                ", "for", "uname", ",", "unit", "in", "block", ".", "named_children", "(", ")", ":", "\n", "                    ", "unit", ".", "load_from", "(", "weights", ",", "prefix", "=", "f\"{prefix}{bname}/{uname}/\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.models.BiT_models.conv3x3": [[35, 38], ["BiT_models.StdConv2d"], "function", ["None"], ["", "", "def", "conv3x3", "(", "cin", ",", "cout", ",", "stride", "=", "1", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ":", "\n", "    ", "return", "StdConv2d", "(", "\n", "cin", ",", "cout", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "bias", ",", "groups", "=", "groups", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.models.BiT_models.conv1x1": [[41, 43], ["BiT_models.StdConv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "cin", ",", "cout", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ":", "\n", "    ", "return", "StdConv2d", "(", "cin", ",", "cout", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "padding", "=", "0", ",", "bias", "=", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.models.BiT_models.tf2th": [[45, 50], ["torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "conv_weights.transpose.transpose"], "function", ["None"], ["", "def", "tf2th", "(", "conv_weights", ")", ":", "\n", "    ", "\"\"\"Possibly convert HWIO to OIHW.\"\"\"", "\n", "if", "conv_weights", ".", "ndim", "==", "4", ":", "\n", "        ", "conv_weights", "=", "conv_weights", ".", "transpose", "(", "[", "3", ",", "2", ",", "0", ",", "1", "]", ")", "\n", "", "return", "torch", ".", "from_numpy", "(", "conv_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.batchnorm.bn.PartlyAdaptiveBN.find_bns": [[42, 59], ["parent.named_children", "child.requires_grad_", "isinstance", "bn.PartlyAdaptiveBN", "replace_mods.append", "replace_mods.extend", "PartlyAdaptiveBN.find_bns"], "methods", ["home.repos.pwc.inspect_result.bethgelab_robustness.src.evaluate.Emissions.append", "home.repos.pwc.inspect_result.bethgelab_robustness.batchnorm.bn.BayesianBatchNorm.find_bns"], ["    ", "@", "staticmethod", "\n", "def", "find_bns", "(", "parent", ",", "estimate_mean", ",", "estimate_var", ")", ":", "\n", "        ", "replace_mods", "=", "[", "]", "\n", "if", "parent", "is", "None", ":", "\n", "            ", "return", "[", "]", "\n", "", "for", "name", ",", "child", "in", "parent", ".", "named_children", "(", ")", ":", "\n", "            ", "child", ".", "requires_grad_", "(", "False", ")", "\n", "if", "isinstance", "(", "child", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "module", "=", "PartlyAdaptiveBN", "(", "child", ",", "estimate_mean", ",", "estimate_var", ")", "\n", "replace_mods", ".", "append", "(", "(", "parent", ",", "name", ",", "module", ")", ")", "\n", "", "else", ":", "\n", "                ", "replace_mods", ".", "extend", "(", "\n", "PartlyAdaptiveBN", ".", "find_bns", "(", "child", ",", "estimate_mean", ",", "\n", "estimate_var", ")", "\n", ")", "\n", "\n", "", "", "return", "replace_mods", "\n", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.batchnorm.bn.PartlyAdaptiveBN.adapt_model": [[60, 67], ["PartlyAdaptiveBN.find_bns", "print", "setattr", "len"], "methods", ["home.repos.pwc.inspect_result.bethgelab_robustness.batchnorm.bn.BayesianBatchNorm.find_bns"], ["", "@", "staticmethod", "\n", "def", "adapt_model", "(", "model", ",", "adapt_mean", ",", "adapt_var", ")", ":", "\n", "        ", "replace_mods", "=", "PartlyAdaptiveBN", ".", "find_bns", "(", "model", ",", "adapt_mean", ",", "adapt_var", ")", "\n", "print", "(", "f\"| Found {len(replace_mods)} modules to be replaced.\"", ")", "\n", "for", "(", "parent", ",", "name", ",", "child", ")", "in", "replace_mods", ":", "\n", "            ", "setattr", "(", "parent", ",", "name", ",", "child", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.batchnorm.bn.PartlyAdaptiveBN.__init__": [[68, 87], ["torch.nn.Module.__init__", "bn.PartlyAdaptiveBN.register_buffer", "bn.PartlyAdaptiveBN.register_buffer", "bn.PartlyAdaptiveBN.register_buffer", "bn.PartlyAdaptiveBN.register_buffer", "torch.zeros", "torch.ones", "layer.running_mean.size", "layer.running_var.size"], "methods", ["home.repos.pwc.inspect_result.bethgelab_robustness.batchnorm.bn.BayesianBatchNorm.__init__"], ["", "def", "__init__", "(", "self", ",", "layer", ",", "estimate_mean", "=", "True", ",", "estimate_var", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layer", "=", "layer", "\n", "\n", "self", ".", "estimate_mean", "=", "estimate_mean", "\n", "self", ".", "estimate_var", "=", "estimate_var", "\n", "\n", "self", ".", "register_buffer", "(", "\"source_mean\"", ",", "layer", ".", "running_mean", ".", "data", ")", "\n", "self", ".", "register_buffer", "(", "\"source_var\"", ",", "layer", ".", "running_var", ".", "data", ")", "\n", "\n", "self", ".", "register_buffer", "(", "\n", "\"estimated_mean\"", ",", "\n", "torch", ".", "zeros", "(", "layer", ".", "running_mean", ".", "size", "(", ")", ",", "\n", "device", "=", "layer", ".", "running_mean", ".", "device", ")", ",", "\n", ")", "\n", "self", ".", "register_buffer", "(", "\n", "\"estimated_var\"", ",", "\n", "torch", ".", "ones", "(", "layer", ".", "running_var", ".", "size", "(", ")", ",", "\n", "device", "=", "layer", ".", "running_mean", ".", "device", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.batchnorm.bn.PartlyAdaptiveBN.reset": [[89, 92], ["bn.PartlyAdaptiveBN.estimated_mean.zero_", "bn.PartlyAdaptiveBN.estimated_var.fill_"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "estimated_mean", ".", "zero_", "(", ")", "\n", "self", ".", "estimated_var", ".", "fill_", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.batchnorm.bn.PartlyAdaptiveBN.running_mean": [[93, 98], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "running_mean", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "estimate_mean", ":", "\n", "            ", "return", "self", ".", "estimated_mean", "\n", "", "return", "self", ".", "source_mean", "\n", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.batchnorm.bn.PartlyAdaptiveBN.running_var": [[99, 104], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "running_var", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "estimate_var", ":", "\n", "            ", "return", "self", ".", "estimated_var", "\n", "", "return", "self", ".", "source_var", "\n", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.batchnorm.bn.PartlyAdaptiveBN.forward": [[105, 128], ["bn.PartlyAdaptiveBN.reset", "torch.nn.functional.batch_norm", "torch.nn.functional.batch_norm"], "methods", ["home.repos.pwc.inspect_result.bethgelab_robustness.batchnorm.bn.PartlyAdaptiveBN.reset"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "# Estimate training set statistics", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "F", ".", "batch_norm", "(", "\n", "input", ",", "\n", "self", ".", "estimated_mean", ",", "\n", "self", ".", "estimated_var", ",", "\n", "None", ",", "\n", "None", ",", "\n", "True", ",", "\n", "1.0", ",", "\n", "self", ".", "layer", ".", "eps", ",", "\n", ")", "\n", "\n", "return", "F", ".", "batch_norm", "(", "\n", "input", ",", "\n", "self", ".", "running_mean", ",", "\n", "self", ".", "running_var", ",", "\n", "self", ".", "layer", ".", "weight", ",", "\n", "self", ".", "layer", ".", "bias", ",", "\n", "False", ",", "\n", "0.0", ",", "\n", "self", ".", "layer", ".", "eps", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.batchnorm.bn.EMABatchNorm.reset_stats": [[132, 137], ["module.reset_running_stats"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "reset_stats", "(", "module", ")", ":", "\n", "        ", "module", ".", "reset_running_stats", "(", ")", "\n", "module", ".", "momentum", "=", "None", "\n", "return", "module", "\n", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.batchnorm.bn.EMABatchNorm.find_bns": [[138, 153], ["parent.named_children", "child.requires_grad_", "isinstance", "bn.EMABatchNorm.reset_stats", "bn.EMABatchNorm", "replace_mods.append", "replace_mods.extend", "EMABatchNorm.find_bns"], "methods", ["home.repos.pwc.inspect_result.bethgelab_robustness.batchnorm.bn.EMABatchNorm.reset_stats", "home.repos.pwc.inspect_result.bethgelab_robustness.src.evaluate.Emissions.append", "home.repos.pwc.inspect_result.bethgelab_robustness.batchnorm.bn.BayesianBatchNorm.find_bns"], ["", "@", "staticmethod", "\n", "def", "find_bns", "(", "parent", ")", ":", "\n", "        ", "replace_mods", "=", "[", "]", "\n", "if", "parent", "is", "None", ":", "\n", "            ", "return", "[", "]", "\n", "", "for", "name", ",", "child", "in", "parent", ".", "named_children", "(", ")", ":", "\n", "            ", "child", ".", "requires_grad_", "(", "False", ")", "\n", "if", "isinstance", "(", "child", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "module", "=", "EMABatchNorm", ".", "reset_stats", "(", "child", ")", "\n", "module", "=", "EMABatchNorm", "(", "module", ")", "\n", "replace_mods", ".", "append", "(", "(", "parent", ",", "name", ",", "module", ")", ")", "\n", "", "else", ":", "\n", "                ", "replace_mods", ".", "extend", "(", "EMABatchNorm", ".", "find_bns", "(", "child", ")", ")", "\n", "\n", "", "", "return", "replace_mods", "\n", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.batchnorm.bn.EMABatchNorm.adapt_model": [[154, 161], ["EMABatchNorm.find_bns", "print", "setattr", "len"], "methods", ["home.repos.pwc.inspect_result.bethgelab_robustness.batchnorm.bn.BayesianBatchNorm.find_bns"], ["", "@", "staticmethod", "\n", "def", "adapt_model", "(", "model", ")", ":", "\n", "        ", "replace_mods", "=", "EMABatchNorm", ".", "find_bns", "(", "model", ")", "\n", "print", "(", "f\"| Found {len(replace_mods)} modules to be replaced.\"", ")", "\n", "for", "(", "parent", ",", "name", ",", "child", ")", "in", "replace_mods", ":", "\n", "            ", "setattr", "(", "parent", ",", "name", ",", "child", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.batchnorm.bn.EMABatchNorm.__init__": [[162, 165], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.bethgelab_robustness.batchnorm.bn.BayesianBatchNorm.__init__"], ["", "def", "__init__", "(", "self", ",", "layer", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layer", "=", "layer", "\n", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.batchnorm.bn.EMABatchNorm.forward": [[166, 173], ["bn.EMABatchNorm.layer.train", "bn.EMABatchNorm.layer", "bn.EMABatchNorm.layer.eval", "bn.EMABatchNorm.layer"], "methods", ["home.repos.pwc.inspect_result.bethgelab_robustness.robustness_eval.main.train"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# store statistics, but discard result", "\n", "        ", "self", ".", "layer", ".", "train", "(", ")", "\n", "self", ".", "layer", "(", "x", ")", "\n", "# store statistics, use the stored stats", "\n", "self", ".", "layer", ".", "eval", "(", ")", "\n", "return", "self", ".", "layer", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.batchnorm.bn.BayesianBatchNorm.find_bns": [[178, 192], ["parent.named_children", "child.requires_grad_", "isinstance", "bn.BayesianBatchNorm", "replace_mods.append", "replace_mods.extend", "BayesianBatchNorm.find_bns"], "methods", ["home.repos.pwc.inspect_result.bethgelab_robustness.src.evaluate.Emissions.append", "home.repos.pwc.inspect_result.bethgelab_robustness.batchnorm.bn.BayesianBatchNorm.find_bns"], ["@", "staticmethod", "\n", "def", "find_bns", "(", "parent", ",", "prior", ")", ":", "\n", "        ", "replace_mods", "=", "[", "]", "\n", "if", "parent", "is", "None", ":", "\n", "            ", "return", "[", "]", "\n", "", "for", "name", ",", "child", "in", "parent", ".", "named_children", "(", ")", ":", "\n", "            ", "child", ".", "requires_grad_", "(", "False", ")", "\n", "if", "isinstance", "(", "child", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "module", "=", "BayesianBatchNorm", "(", "child", ",", "prior", ")", "\n", "replace_mods", ".", "append", "(", "(", "parent", ",", "name", ",", "module", ")", ")", "\n", "", "else", ":", "\n", "                ", "replace_mods", ".", "extend", "(", "BayesianBatchNorm", ".", "find_bns", "(", "child", ",", "prior", ")", ")", "\n", "\n", "", "", "return", "replace_mods", "\n", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.batchnorm.bn.BayesianBatchNorm.adapt_model": [[193, 200], ["BayesianBatchNorm.find_bns", "print", "setattr", "len"], "methods", ["home.repos.pwc.inspect_result.bethgelab_robustness.batchnorm.bn.BayesianBatchNorm.find_bns"], ["", "@", "staticmethod", "\n", "def", "adapt_model", "(", "model", ",", "prior", ")", ":", "\n", "        ", "replace_mods", "=", "BayesianBatchNorm", ".", "find_bns", "(", "model", ",", "prior", ")", "\n", "print", "(", "f\"| Found {len(replace_mods)} modules to be replaced.\"", ")", "\n", "for", "(", "parent", ",", "name", ",", "child", ")", "in", "replace_mods", ":", "\n", "            ", "setattr", "(", "parent", ",", "name", ",", "child", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.batchnorm.bn.BayesianBatchNorm.__init__": [[201, 213], ["torch.nn.Module.__init__", "bn.BayesianBatchNorm.layer.eval", "torch.nn.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.bethgelab_robustness.batchnorm.bn.BayesianBatchNorm.__init__"], ["", "def", "__init__", "(", "self", ",", "layer", ",", "prior", ")", ":", "\n", "        ", "assert", "prior", ">=", "0", "and", "prior", "<=", "1", "\n", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layer", "=", "layer", "\n", "self", ".", "layer", ".", "eval", "(", ")", "\n", "\n", "self", ".", "norm", "=", "nn", ".", "BatchNorm2d", "(", "\n", "self", ".", "layer", ".", "num_features", ",", "affine", "=", "False", ",", "momentum", "=", "1.0", "\n", ")", "\n", "\n", "self", ".", "prior", "=", "prior", "\n", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.batchnorm.bn.BayesianBatchNorm.forward": [[214, 235], ["bn.BayesianBatchNorm.norm", "torch.nn.functional.batch_norm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "self", ".", "norm", "(", "input", ")", "\n", "\n", "running_mean", "=", "(", "\n", "self", ".", "prior", "*", "self", ".", "layer", ".", "running_mean", "\n", "+", "(", "1", "-", "self", ".", "prior", ")", "*", "self", ".", "norm", ".", "running_mean", "\n", ")", "\n", "running_var", "=", "(", "\n", "self", ".", "prior", "*", "self", ".", "layer", ".", "running_var", "\n", "+", "(", "1", "-", "self", ".", "prior", ")", "*", "self", ".", "norm", ".", "running_var", "\n", ")", "\n", "\n", "return", "F", ".", "batch_norm", "(", "\n", "input", ",", "\n", "running_mean", ",", "\n", "running_var", ",", "\n", "self", ".", "layer", ".", "weight", ",", "\n", "self", ".", "layer", ".", "bias", ",", "\n", "False", ",", "\n", "0", ",", "\n", "self", ".", "layer", ".", "eps", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.batchnorm.bn.adapt_ema": [[29, 31], ["bn.EMABatchNorm.adapt_model"], "function", ["home.repos.pwc.inspect_result.bethgelab_robustness.batchnorm.bn.BayesianBatchNorm.adapt_model"], ["def", "adapt_ema", "(", "model", ":", "nn", ".", "Module", ")", ":", "\n", "    ", "return", "EMABatchNorm", ".", "adapt_model", "(", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.batchnorm.bn.adapt_parts": [[33, 35], ["bn.PartlyAdaptiveBN.adapt_model"], "function", ["home.repos.pwc.inspect_result.bethgelab_robustness.batchnorm.bn.BayesianBatchNorm.adapt_model"], ["", "def", "adapt_parts", "(", "model", ":", "nn", ".", "Module", ",", "adapt_mean", ":", "bool", ",", "adapt_var", ":", "bool", ")", ":", "\n", "    ", "return", "PartlyAdaptiveBN", ".", "adapt_model", "(", "model", ",", "adapt_mean", ",", "adapt_var", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.batchnorm.bn.adapt_bayesian": [[37, 39], ["bn.BayesianBatchNorm.adapt_model"], "function", ["home.repos.pwc.inspect_result.bethgelab_robustness.batchnorm.bn.BayesianBatchNorm.adapt_model"], ["", "def", "adapt_bayesian", "(", "model", ":", "nn", ".", "Module", ",", "prior", ":", "float", ")", ":", "\n", "    ", "return", "BayesianBatchNorm", ".", "adapt_model", "(", "model", ",", "prior", "=", "prior", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.batchnorm.__init__.adapt": [[24, 32], ["model.eval", "model.modules", "ValueError", "isinstance", "module.train"], "function", ["home.repos.pwc.inspect_result.bethgelab_robustness.robustness_eval.main.train"], ["from", "robusta", "import", "datasets", "\n", "from", "robusta", "import", "models", "\n", "from", "robusta", "import", "selflearning", "\n", ""]], "home.repos.pwc.inspect_result.bethgelab_robustness.batchnorm.stages.split_model": [[26, 30], ["isinstance", "print"], "function", ["None"], ["def", "split_model", "(", "model", ")", ":", "\n", "    ", "if", "not", "isinstance", "(", "model", ",", "torchvision", ".", "models", ".", "ResNet", ")", ":", "\n", "        ", "print", "(", "\"Only resnet models defined for this analysis so far\"", ")", "\n", "", "return", "model", ".", "bn1", ",", "model", ".", "layer1", ",", "model", ".", "layer2", ",", "model", ".", "layer3", ",", "model", ".", "layer4", "\n", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.batchnorm.stages.use_train_statistics": [[32, 36], ["isinstance", "print", "module.train"], "function", ["home.repos.pwc.inspect_result.bethgelab_robustness.robustness_eval.main.train"], ["", "def", "use_train_statistics", "(", "module", ")", ":", "\n", "    ", "if", "isinstance", "(", "module", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "print", "(", "f\"Setting {module} to adaptive\"", ")", "\n", "module", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.batchnorm.stages.choose_one_adaptation": [[38, 43], ["model.eval", "[].apply", "stages.split_model"], "function", ["home.repos.pwc.inspect_result.bethgelab_robustness.batchnorm.stages.split_model"], ["", "", "def", "choose_one_adaptation", "(", "model", ",", "stage", ")", ":", "\n", "    ", "\"\"\" select exactly on stage for adaptation \"\"\"", "\n", "assert", "stage", ">=", "0", "and", "stage", "<", "5", "\n", "model", ".", "eval", "(", ")", "\n", "split_model", "(", "model", ")", "[", "stage", "]", ".", "apply", "(", "use_train_statistics", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bethgelab_robustness.batchnorm.stages.leave_one_out_adaptation": [[45, 51], ["model.eval", "model.apply", "[].eval", "stages.split_model"], "function", ["home.repos.pwc.inspect_result.bethgelab_robustness.batchnorm.stages.split_model"], ["", "def", "leave_one_out_adaptation", "(", "model", ",", "stage", ")", ":", "\n", "    ", "\"\"\" set all BN layers to train mode except for ones in the selected stage \"\"\"", "\n", "assert", "stage", ">=", "0", "and", "stage", "<", "5", "\n", "model", ".", "eval", "(", ")", "\n", "model", ".", "apply", "(", "use_train_statistics", ")", "\n", "split_model", "(", "model", ")", "[", "stage", "]", ".", "eval", "(", ")", "\n", "", ""]]}