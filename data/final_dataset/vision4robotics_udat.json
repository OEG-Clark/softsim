{"home.repos.pwc.inspect_result.vision4robotics_udat.preprocessing.gen_seq_bboxes.N_dis": [[13, 33], ["numpy.array", "numpy.array", "delta.append", "delta.append", "delta.append", "delta.append", "sum", "list", "list", "math.log", "math.log", "range", "len"], "function", ["home.repos.pwc.inspect_result.vision4robotics_udat.datasets.dataset.SubDataset.log", "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.dataset.SubDataset.log"], ["def", "N_dis", "(", "bbox1", ",", "bbox2", ")", ":", "\n", "\n", "    ", "bbox1", "=", "np", ".", "array", "(", "list", "(", "bbox1", ")", ")", "\n", "bbox2", "=", "np", ".", "array", "(", "list", "(", "bbox2", ")", ")", "\n", "\n", "w1", "=", "bbox1", "[", "2", "]", "-", "bbox1", "[", "0", "]", "\n", "h1", "=", "bbox1", "[", "3", "]", "-", "bbox1", "[", "1", "]", "\n", "w2", "=", "bbox2", "[", "2", "]", "-", "bbox2", "[", "0", "]", "\n", "h2", "=", "bbox2", "[", "3", "]", "-", "bbox2", "[", "1", "]", "\n", "\n", "delta", "=", "[", "]", "\n", "delta", ".", "append", "(", "(", "bbox2", "[", "0", "]", "-", "bbox1", "[", "0", "]", ")", "/", "w1", ")", "\n", "delta", ".", "append", "(", "(", "bbox2", "[", "1", "]", "-", "bbox1", "[", "1", "]", ")", "/", "h1", ")", "\n", "delta", ".", "append", "(", "math", ".", "log", "(", "w2", "/", "w1", ")", ")", "\n", "delta", ".", "append", "(", "math", ".", "log", "(", "h2", "/", "h1", ")", ")", "\n", "\n", "N_dis", "=", "sum", "(", "[", "delta", "[", "i", "]", "**", "2", "for", "i", "in", "range", "(", "len", "(", "delta", ")", ")", "]", ")", "\n", "\n", "\n", "return", "N_dis", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.preprocessing.gen_seq_bboxes.gen_seq_bboxes": [[35, 183], ["range", "range", "range", "range", "range", "range", "len", "len", "min_distance_dp.append", "last_bbox_cut.append", "range", "picked_bbox.insert", "len", "picked_frame_index.append", "range", "bbox_feedback.append", "len", "bbox_feedback.append", "len", "range", "len", "len", "len", "numpy.isnan().any", "bbox_not_random.append", "len", "len", "range", "min_distance_dp_this.append", "last_bbox_cut_this.append", "len", "len", "len", "min", "numpy.random.uniform", "len", "abs", "max", "range", "bbox_feedback.append", "bbox_feedback.append", "list", "numpy.isnan", "len", "gen_seq_bboxes.N_dis", "min", "numpy.random.uniform", "list"], "function", ["home.repos.pwc.inspect_result.vision4robotics_udat.preprocessing.gen_seq_bboxes.N_dis"], ["", "def", "gen_seq_bboxes", "(", "bboxes", ",", "length", ")", ":", "\n", "    ", "bbox_feedback", "=", "[", "]", "\n", "\n", "bbox_index", "=", "0", "\n", "bbox_found_num", "=", "0", "\n", "bbox_not_random", "=", "[", "]", "\n", "for", "frame_index", "in", "range", "(", "length", ")", ":", "## Count which frames have valid frames", "\n", "\n", "        ", "bboxs", "=", "bboxes", "[", "bbox_index", "]", "\n", "# Do statistics for the number of frames having valid candidate boxes", "\n", "if", "not", "np", ".", "isnan", "(", "bboxs", ")", ".", "any", "(", ")", ":", "\n", "            ", "bbox_found_num", "+=", "1", "\n", "# Cache all candidate boxes and their frame index", "\n", "bbox_not_random", ".", "append", "(", "(", "bboxs", ",", "frame_index", ")", ")", "\n", "", "bbox_index", "+=", "1", "\n", "", "if", "len", "(", "bbox_not_random", ")", "==", "0", ":", "\n", "        ", "return", "None", ",", "None", ",", "None", ",", "None", ",", "None", "\n", "# Now begin to use dynamic programming to find the optimal path for bbox sequences", "\n", "\n", "# Reward for appending new candidate bbox", "\n", "", "bbox_reward", "=", "-", "0.5", "\n", "# Minimum distance from virtual node -1 to node i", "\n", "min_distance_dp", "=", "[", "[", "bbox_reward", "]", "*", "len", "(", "bbox_not_random", "[", "0", "]", "[", "0", "]", ")", "]", "\n", "# Last bbox index to achieve minimum path distance (namely maximum reward)", "\n", "last_bbox_cut", "=", "[", "[", "(", "-", "1", ",", "-", "1", ")", "]", "*", "len", "(", "bbox_not_random", "[", "0", "]", "[", "0", "]", ")", "]", "\n", "# Maximum gap for frame connection", "\n", "max_dp_gap", "=", "100", "\n", "\n", "# The main DP loop", "\n", "for", "nr_index", "in", "range", "(", "1", ",", "len", "(", "bbox_not_random", ")", ")", ":", "\n", "        ", "bboxs", ",", "frame_index", "=", "bbox_not_random", "[", "nr_index", "]", "\n", "min_distance_dp_this", "=", "[", "]", "\n", "last_bbox_cut_this", "=", "[", "]", "\n", "for", "bbox", "in", "bboxs", ":", "\n", "# If directly connect from virtual node -1", "\n", "            ", "min_distance", "=", "bbox_reward", "\n", "min_distance_index", "=", "(", "-", "1", ",", "-", "1", ")", "\n", "for", "dp_index", "in", "range", "(", "max", "(", "0", ",", "nr_index", "-", "max_dp_gap", ")", ",", "nr_index", ")", ":", "# find from the past 100 frames ", "\n", "                ", "last_bboxs", ",", "last_frame_index", "=", "bbox_not_random", "[", "dp_index", "]", "\n", "for", "sub_index", "in", "range", "(", "len", "(", "last_bboxs", ")", ")", ":", "\n", "                    ", "last_bbox", "=", "last_bboxs", "[", "sub_index", "]", "\n", "iou_cle", "=", "N_dis", "(", "bbox", ",", "last_bbox", ")", "\n", "iou_reward", "=", "iou_cle", "\n", "distance", "=", "min_distance_dp", "[", "dp_index", "]", "[", "sub_index", "]", "+", "iou_reward", "+", "bbox_reward", "\n", "# Record the selected path", "\n", "if", "distance", "<=", "min_distance", ":", "\n", "                        ", "min_distance", "=", "distance", "\n", "min_distance_index", "=", "(", "dp_index", ",", "sub_index", ")", "\n", "# Record middle results for DP path", "\n", "", "", "", "min_distance_dp_this", ".", "append", "(", "min_distance", ")", "\n", "last_bbox_cut_this", ".", "append", "(", "min_distance_index", ")", "\n", "# Record middle results for DP path", "\n", "", "min_distance_dp", ".", "append", "(", "min_distance_dp_this", ")", "\n", "last_bbox_cut", ".", "append", "(", "last_bbox_cut_this", ")", "\n", "\n", "# Now find the last bbox in sequence (the candidate box where the maximum reward path ends)", "\n", "", "last_index", "=", "(", "len", "(", "bbox_not_random", ")", "-", "1", ",", "0", ")", "\n", "min_distance", "=", "min_distance_dp", "[", "last_index", "[", "0", "]", "]", "[", "last_index", "[", "1", "]", "]", "\n", "for", "nr_index", "in", "range", "(", "len", "(", "bbox_not_random", ")", "-", "1", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "        ", "for", "sub_index", "in", "range", "(", "len", "(", "bbox_not_random", "[", "nr_index", "]", "[", "0", "]", ")", ")", ":", "\n", "            ", "if", "min_distance_dp", "[", "nr_index", "]", "[", "sub_index", "]", "<=", "min_distance", ":", "\n", "                ", "last_index", "=", "(", "nr_index", ",", "sub_index", ")", "\n", "min_distance", "=", "min_distance_dp", "[", "nr_index", "]", "[", "sub_index", "]", "\n", "\n", "# Now track back the selected candidate boxes in the maximum reward path to form a box sequence", "\n", "", "", "", "picked_bbox", "=", "[", "]", "\n", "while", "last_index", "[", "1", "]", "!=", "-", "1", ":", "\n", "        ", "bboxs", ",", "frame_index", "=", "bbox_not_random", "[", "last_index", "[", "0", "]", "]", "\n", "picked_bbox", ".", "insert", "(", "0", ",", "(", "bboxs", "[", "last_index", "[", "1", "]", "]", ",", "frame_index", ")", ")", "\n", "last_index", "=", "last_bbox_cut", "[", "last_index", "[", "0", "]", "]", "[", "last_index", "[", "1", "]", "]", "\n", "\n", "\n", "# Now begin to smooth the sequence", "\n", "", "last_already_generated", "=", "-", "1", "\n", "# The list for all DP-picked frame index", "\n", "picked_frame_index", "=", "[", "]", "\n", "\n", "for", "bbox_picked_index", "in", "range", "(", "len", "(", "picked_bbox", ")", ")", ":", "\n", "\n", "        ", "bbox", ",", "frame_index", "=", "picked_bbox", "[", "bbox_picked_index", "]", "\n", "picked_frame_index", ".", "append", "(", "frame_index", ")", "\n", "\n", "# Now begin to smooth the bbox sequence in a video", "\n", "# Case 1 : index from last_gen + 1 to frame_index - 1 (candidate boxes in these frames are not selected by DP)", "\n", "for", "j", "in", "range", "(", "last_already_generated", "+", "1", ",", "frame_index", ")", ":", "\n", "            ", "if", "bbox_picked_index", "==", "0", ":", "\n", "# Starting frames before the first DP-selected candidate box", "\n", "                ", "if", "min", "(", "list", "(", "bbox", ")", ")", "<", "75", ":", "\n", "                    ", "bbox_perturbed", "=", "bbox", "\n", "", "else", ":", "\n", "# Add very small random perturbation (optional)", "\n", "                    ", "bbox_perturbation", "=", "np", ".", "random", ".", "uniform", "(", "-", "3", ",", "3", ",", "size", "=", "4", ")", "\n", "bbox_perturbed", "=", "(", "bbox", "[", "0", "]", "+", "bbox_perturbation", "[", "0", "]", ",", "\n", "bbox", "[", "1", "]", "+", "bbox_perturbation", "[", "1", "]", ",", "\n", "bbox", "[", "2", "]", "+", "bbox_perturbation", "[", "2", "]", ",", "\n", "bbox", "[", "3", "]", "+", "bbox_perturbation", "[", "3", "]", ")", "\n", "", "bbox_feedback", ".", "append", "(", "bbox_perturbed", ")", "\n", "", "else", ":", "\n", "# Linear interpolation for generating the remaining boxes", "\n", "                ", "last_bbox", ",", "_", "=", "picked_bbox", "[", "bbox_picked_index", "-", "1", "]", "\n", "\n", "ratio", "=", "(", "frame_index", "-", "j", ")", "/", "(", "frame_index", "-", "last_already_generated", ")", "\n", "\n", "current_bbox", "=", "(", "last_bbox", "[", "0", "]", "*", "ratio", "+", "bbox", "[", "0", "]", "*", "(", "1", "-", "ratio", ")", ",", "\n", "last_bbox", "[", "1", "]", "*", "ratio", "+", "bbox", "[", "1", "]", "*", "(", "1", "-", "ratio", ")", ",", "\n", "last_bbox", "[", "2", "]", "*", "ratio", "+", "bbox", "[", "2", "]", "*", "(", "1", "-", "ratio", ")", ",", "\n", "last_bbox", "[", "3", "]", "*", "ratio", "+", "bbox", "[", "3", "]", "*", "(", "1", "-", "ratio", ")", ")", "\n", "bbox_feedback", ".", "append", "(", "current_bbox", ")", "\n", "\n", "# Case 2 : index equals to frame_index (the current frame has a candidate box selected by DP)", "\n", "", "", "bbox_feedback", ".", "append", "(", "bbox", ")", "\n", "last_already_generated", "=", "frame_index", "\n", "\n", "# Fill in the last bboxes", "\n", "", "pending_num", "=", "length", "-", "len", "(", "bbox_feedback", ")", "\n", "last_bbox", "=", "bbox_feedback", "[", "-", "1", "]", "\n", "# Ending frames after the last DP-selected candidate box", "\n", "for", "i", "in", "range", "(", "pending_num", ")", ":", "\n", "        ", "if", "min", "(", "list", "(", "last_bbox", ")", ")", "<", "50", ":", "\n", "            ", "bbox_perturbed", "=", "last_bbox", "\n", "", "else", ":", "\n", "# Add very small random perturbation (optional)", "\n", "            ", "bbox_perturbation", "=", "np", ".", "random", ".", "uniform", "(", "-", "3", ",", "3", ",", "size", "=", "4", ")", "\n", "bbox_perturbed", "=", "(", "last_bbox", "[", "0", "]", "+", "bbox_perturbation", "[", "0", "]", ",", "\n", "last_bbox", "[", "1", "]", "+", "bbox_perturbation", "[", "1", "]", ",", "\n", "last_bbox", "[", "2", "]", "+", "bbox_perturbation", "[", "2", "]", ",", "\n", "last_bbox", "[", "3", "]", "+", "bbox_perturbation", "[", "3", "]", ")", "\n", "", "bbox_feedback", ".", "append", "(", "bbox_perturbed", ")", "\n", "\n", "", "assert", "length", "==", "len", "(", "bbox_feedback", ")", "\n", "\n", "# Now do statistics and calculate various related metrics", "\n", "# Average box vary in box sequence (not utilized at last, deprecated)", "\n", "total_vary", "=", "0", "\n", "for", "i", "in", "range", "(", "length", "-", "1", ")", ":", "\n", "        ", "current_bbox", "=", "bbox_feedback", "[", "i", "]", "\n", "next_bbox", "=", "bbox_feedback", "[", "i", "+", "1", "]", "\n", "for", "j", "in", "range", "(", "len", "(", "current_bbox", ")", ")", ":", "\n", "            ", "total_vary", "+=", "abs", "(", "current_bbox", "[", "j", "]", "-", "next_bbox", "[", "j", "]", ")", "\n", "\n", "", "", "aver_vary", "=", "total_vary", "/", "(", "length", "-", "1", ")", "\n", "\n", "# Frequency for candidate bboxes be picked by dp", "\n", "bbox_picked_freq", "=", "len", "(", "picked_bbox", ")", "/", "len", "(", "bboxes", ")", "\n", "\n", "bbox_found_freq", "=", "bbox_found_num", "/", "len", "(", "bboxes", ")", "\n", "\n", "return", "bbox_feedback", ",", "picked_frame_index", ",", "bbox_found_freq", ",", "bbox_picked_freq", ",", "aver_vary", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.preprocessing.gen_seq_bboxes.calc_nearby_bbox_freq": [[185, 227], ["range", "range", "range", "len", "range", "len", "range", "feedback.append", "len", "range", "range", "max", "min", "range", "max", "min", "range", "len", "len", "len", "score.append", "score.append", "float", "float"], "function", ["None"], ["", "def", "calc_nearby_bbox_freq", "(", "picked_frame_index", ",", "video_length", ",", "search_range", "=", "None", ")", ":", "\n", "\n", "    ", "if", "search_range", "is", "None", "or", "len", "(", "search_range", ")", "==", "0", ":", "\n", "        ", "search_range", "=", "[", "3", ",", "10", "]", "\n", "\n", "", "search_range", "=", "[", "s", "for", "s", "in", "search_range", "]", "\n", "\n", "# Init for doing statistics", "\n", "freq_dicts", "=", "[", "[", "0", "]", "*", "video_length", "for", "_", "in", "range", "(", "len", "(", "search_range", ")", ")", "]", "\n", "freq_collect_max", "=", "[", "[", "0", "]", "*", "video_length", "for", "_", "in", "range", "(", "len", "(", "search_range", ")", ")", "]", "\n", "\n", "# Do statistic for the number of adjacent frames (of a certain frame) potential to be selected by DP", "\n", "for", "r_i", "in", "range", "(", "len", "(", "search_range", ")", ")", ":", "\n", "        ", "for", "v_i", "in", "range", "(", "1", ",", "video_length", ")", ":", "\n", "            ", "left_index", "=", "max", "(", "0", ",", "v_i", "-", "search_range", "[", "r_i", "]", ")", "\n", "right_index", "=", "min", "(", "video_length", "-", "1", ",", "v_i", "+", "search_range", "[", "r_i", "]", ")", "\n", "for", "sub_i", "in", "range", "(", "left_index", ",", "right_index", "+", "1", ")", ":", "\n", "# increment count", "\n", "                ", "current", "=", "freq_collect_max", "[", "r_i", "]", "[", "sub_i", "]", "\n", "freq_collect_max", "[", "r_i", "]", "[", "sub_i", "]", "=", "current", "+", "1", "\n", "\n", "# Do statistic for the number of adjacent frames (of a certain frame) indeed selected by DP", "\n", "", "", "", "for", "r_i", "in", "range", "(", "len", "(", "search_range", ")", ")", ":", "\n", "        ", "for", "v_i", "in", "picked_frame_index", ":", "\n", "            ", "left_index", "=", "max", "(", "0", ",", "v_i", "-", "search_range", "[", "r_i", "]", ")", "\n", "right_index", "=", "min", "(", "video_length", "-", "1", ",", "v_i", "+", "search_range", "[", "r_i", "]", ")", "\n", "for", "sub_i", "in", "range", "(", "left_index", ",", "right_index", "+", "1", ")", ":", "\n", "# increment count", "\n", "                ", "current", "=", "freq_dicts", "[", "r_i", "]", "[", "sub_i", "]", "\n", "freq_dicts", "[", "r_i", "]", "[", "sub_i", "]", "=", "current", "+", "1", "\n", "\n", "# Calculate the frequency of DP selection within all adjacent frames (of a certain frame)", "\n", "", "", "", "feedback", "=", "[", "]", "\n", "for", "v_i", "in", "range", "(", "video_length", ")", ":", "\n", "        ", "score", "=", "[", "]", "\n", "for", "r_i", "in", "range", "(", "len", "(", "search_range", ")", ")", ":", "\n", "            ", "if", "freq_collect_max", "[", "r_i", "]", "[", "v_i", "]", "!=", "0", ":", "\n", "                ", "score", ".", "append", "(", "float", "(", "freq_dicts", "[", "r_i", "]", "[", "v_i", "]", "/", "freq_collect_max", "[", "r_i", "]", "[", "v_i", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "score", ".", "append", "(", "float", "(", "0.0", ")", ")", "\n", "", "", "feedback", ".", "append", "(", "score", ")", "\n", "", "return", "feedback", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.preprocessing.gen_json.parse_and_sched": [[13, 45], ["os.listdir", "tqdm.tqdm", "json.dump", "print", "os.path.join", "os.path.join", "open", "open.readlines", "open.close", "enumerate", "open", "gt_line.strip().split", "int", "int", "int", "int", "gt_line.strip", "float", "float", "int", "int", "int", "int", "float", "float", "float", "float"], "function", ["None"], ["def", "parse_and_sched", "(", "dl_dir", "=", "'.'", ")", ":", "\n", "    ", "js", "=", "{", "}", "\n", "\n", "videos", "=", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "dataset_path", ")", ")", "\n", "for", "video", "in", "tqdm", "(", "videos", ")", ":", "\n", "        ", "if", "video", "==", "'list.txt'", ":", "\n", "            ", "continue", "\n", "", "gt_path", "=", "join", "(", "pseudo_label_path", ",", "video", "+", "'_gt.txt'", ")", "\n", "f", "=", "open", "(", "gt_path", ",", "'r'", ")", "\n", "groundtruth", "=", "f", ".", "readlines", "(", ")", "\n", "f", ".", "close", "(", ")", "\n", "idx_woOcc", "=", "0", "\n", "for", "idx", ",", "gt_line", "in", "enumerate", "(", "groundtruth", ")", ":", "\n", "            ", "if", "gt_line", "==", "'NaN,NaN,NaN,NaN\\n'", ":", "\n", "                ", "continue", "\n", "", "gt_image", "=", "gt_line", ".", "strip", "(", ")", ".", "split", "(", "','", ")", "\n", "frame", "=", "'%06d'", "%", "(", "int", "(", "idx_woOcc", ")", ")", "# idx", "\n", "obj", "=", "'%02d'", "%", "(", "int", "(", "0", ")", ")", "\n", "bbox", "=", "[", "int", "(", "float", "(", "gt_image", "[", "0", "]", ")", ")", ",", "int", "(", "float", "(", "gt_image", "[", "1", "]", ")", ")", ",", "\n", "int", "(", "float", "(", "gt_image", "[", "0", "]", ")", ")", "+", "int", "(", "float", "(", "gt_image", "[", "2", "]", ")", ")", ",", "\n", "int", "(", "float", "(", "gt_image", "[", "1", "]", ")", ")", "+", "int", "(", "float", "(", "gt_image", "[", "3", "]", ")", ")", "]", "# xmin,ymin,xmax,ymax", "\n", "\n", "if", "video", "not", "in", "js", ":", "\n", "                ", "js", "[", "video", "]", "=", "{", "}", "\n", "", "if", "obj", "not", "in", "js", "[", "video", "]", ":", "\n", "                ", "js", "[", "video", "]", "[", "obj", "]", "=", "{", "}", "\n", "", "js", "[", "video", "]", "[", "obj", "]", "[", "frame", "]", "=", "bbox", "\n", "idx_woOcc", "=", "idx_woOcc", "+", "1", "\n", "\n", "", "", "json", ".", "dump", "(", "js", ",", "open", "(", "'/YOUR/PATH/NAT2021-train/train.json'", ",", "'w'", ")", ",", "indent", "=", "4", ",", "sort_keys", "=", "True", ")", "\n", "\n", "print", "(", "': All videos downloaded'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.preprocessing.draw_mask.union_image_mask": [[8, 33], ["cv2.imread", "cv2.imread", "cv2.resize", "cv2.findContours", "numpy.zeros", "cv2.fillPoly", "save_path.replace.replace", "cv2.imwrite", "genericpath.isdir", "os.mkdir", "numpy.max", "save_name.split"], "function", ["None"], ["def", "union_image_mask", "(", "image_path", ",", "mask_path", ",", "save_name", ",", "bboxes", ",", "color", "=", "(", "160", ",", "32", ",", "240", ")", ")", ":", "\n", "    ", "image", "=", "cv2", ".", "imread", "(", "image_path", ")", "\n", "mask_2d", "=", "cv2", ".", "imread", "(", "mask_path", ",", "0", ")", "\n", "chang", "=", "image", ".", "shape", "[", "1", "]", "\n", "kuan", "=", "image", ".", "shape", "[", "0", "]", "\n", "\n", "mask_2d", "=", "cv2", ".", "resize", "(", "mask_2d", ",", "(", "chang", ",", "kuan", ")", ")", "\n", "\n", "coef", "=", "255", "if", "np", ".", "max", "(", "image", ")", "<", "3", "else", "1", "\n", "image", "=", "(", "image", "*", "coef", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "contours", ",", "_", "=", "cv2", ".", "findContours", "(", "mask_2d", ",", "cv2", ".", "RETR_TREE", ",", "cv2", ".", "CHAIN_APPROX_SIMPLE", ")", "\n", "\n", "# print(image.shape)", "\n", "# cv2.drawContours(image, contours, -1, color, 40)", "\n", "zeros", "=", "np", ".", "zeros", "(", "(", "image", ".", "shape", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "mask", "=", "cv2", ".", "fillPoly", "(", "zeros", ",", "contours", ",", "color", ")", "\n", "image", "=", "0.3", "*", "mask", "+", "image", "\n", "# for box in bboxes:", "\n", "#     if not NaN in box:", "\n", "#         cv2.rectangle(image, (int(box[0]), int(box[1])), (int(box[2]), int(box[3])), (0, 255, 0), 1)", "\n", "save_path", "=", "save_name", "\n", "save_path", "=", "save_path", ".", "replace", "(", "save_name", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ",", "'/'", ")", "\n", "if", "not", "isdir", "(", "save_path", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "save_path", ")", "\n", "", "cv2", ".", "imwrite", "(", "save_name", ",", "image", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.preprocessing.inference.saliency_to_bbox": [[129, 146], ["skimage.morphology.binary_closing", "skimage.morphology.remove_small_objects", "skimage.morphology.remove_small_holes", "skimage.measure.label", "skimage.measure.regionprops", "max_bboxs.append"], "function", ["None"], ["def", "saliency_to_bbox", "(", "pred", ",", "tiny_ratio", "=", "0.02", ")", ":", "\n", "    ", "pred", "=", "morphology", ".", "binary_closing", "(", "pred", ")", "\n", "pred", "=", "morphology", ".", "remove_small_objects", "(", "pred", ",", "80", ")", "# filter isolated small areas smaller than 80 pixels", "\n", "pred", "=", "morphology", ".", "remove_small_holes", "(", "pred", ",", "80", ")", "# filter small holes", "\n", "\n", "cand", "=", "measure", ".", "label", "(", "pred", ")", "# mark connected domain", "\n", "w_c", ",", "h_c", "=", "pred", ".", "shape", "\n", "max_bboxs", "=", "[", "]", "\n", "# top_n = 1", "\n", "for", "region", "in", "regionprops", "(", "cand", ")", ":", "\n", "        ", "bbox", "=", "region", ".", "bbox", "\n", "area", "=", "(", "bbox", "[", "2", "]", "-", "bbox", "[", "0", "]", ")", "*", "(", "bbox", "[", "3", "]", "-", "bbox", "[", "1", "]", ")", "\n", "if", "area", "<", "100", ":", "\n", "            ", "continue", "\n", "", "max_bboxs", ".", "append", "(", "(", "bbox", "[", "1", "]", ",", "bbox", "[", "0", "]", ",", "bbox", "[", "3", "]", ",", "bbox", "[", "2", "]", ")", ")", "\n", "\n", "", "return", "max_bboxs", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.preprocessing.inference.inference": [[148, 211], ["model.eval", "print", "time.time", "dict", "tqdm.tqdm", "enumerate", "[].split", "frame[].to", "labels.append", "torch.no_grad", "model", "pred.squeeze().squeeze().cpu().numpy().astype.squeeze().squeeze().cpu().numpy().astype", "inference.saliency_to_bbox", "temp_box.append", "int", "max_bboxes.append", "zip", "enumerate", "frame[].to", "len", "numpy.save", "print", "zip", "os.path.join", "torchvision.transforms.functional.to_pil_image", "os.path.dirname", "TF.to_pil_image.save", "draw_mask.union_image_mask", "pred.squeeze().squeeze().cpu().numpy().astype.squeeze().squeeze().cpu().numpy", "[].split", "os.listdir", "genericpath.isdir", "os.mkdir", "os.path.join", "label_.detach().cpu", "pred_.detach().cpu", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "os.path.join", "os.path.join.replace().replace", "os.path.join", "os.path.dirname.replace", "os.path.dirname.replace", "pred.squeeze().squeeze().cpu().numpy().astype.squeeze().squeeze().cpu", "label_.detach", "pred_.detach", "os.path.join.replace", "pred.squeeze().squeeze().cpu().numpy().astype.squeeze().squeeze", "pred.squeeze().squeeze().cpu().numpy().astype.squeeze"], "function", ["home.repos.pwc.inspect_result.vision4robotics_udat.evaluation.f1_benchmark.F1Benchmark.eval", "home.repos.pwc.inspect_result.vision4robotics_udat.preprocessing.inference.saliency_to_bbox", "home.repos.pwc.inspect_result.vision4robotics_udat.preprocessing.draw_mask.union_image_mask"], ["", "def", "inference", "(", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "print", "(", "\"Begin inference on {} {}.\"", ".", "format", "(", "args", ".", "dataset", ",", "args", ".", "split", ")", ")", "\n", "running_mae", "=", "0.0", "\n", "running_smean", "=", "0.0", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "v", "=", "dict", "(", ")", "\n", "s", "=", "[", "]", "\n", "final", "=", "[", "]", "\n", "max_bboxes", "=", "[", "]", "# store predicted boxes of a sequence", "\n", "for", "data", "in", "tqdm", "(", "dataloader", ")", ":", "\n", "        ", "current_seq", "=", "data", "[", "0", "]", "[", "'image_id'", "]", "[", "0", "]", ".", "split", "(", "'/'", ")", "[", "0", "]", "\n", "\n", "images", "=", "[", "frame", "[", "'image'", "]", ".", "to", "(", "device", ")", "for", "frame", "in", "data", "]", "\n", "labels", "=", "[", "]", "\n", "for", "frame", "in", "data", ":", "\n", "            ", "labels", ".", "append", "(", "frame", "[", "'label'", "]", ".", "to", "(", "device", ")", ")", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "preds", "=", "model", "(", "images", ")", "\n", "\n", "# generate pseudo label", "\n", "", "temp_box", "=", "[", "]", "\n", "temp", "=", "0", "\n", "for", "pred", "in", "preds", ":", "\n", "            ", "pred", "[", "pred", "<", "0.1", "]", "=", "0", "\n", "pred", "[", "pred", ">=", "0.1", "]", "=", "1", "\n", "pred", "=", "pred", ".", "squeeze", "(", "0", ")", ".", "squeeze", "(", "0", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "int", ")", "\n", "bboxs", "=", "saliency_to_bbox", "(", "pred", ")", "\n", "if", "not", "bboxs", ":", "\n", "                ", "bboxs", "=", "[", "(", "NaN", ",", "NaN", ",", "NaN", ",", "NaN", ")", "]", "\n", "", "temp_box", ".", "append", "(", "bboxs", ")", "\n", "index", "=", "int", "(", "data", "[", "temp", "]", "[", "'image_id'", "]", "[", "0", "]", ".", "split", "(", "'/'", ")", "[", "1", "]", ")", "\n", "\n", "max_bboxes", ".", "append", "(", "bboxs", ")", "\n", "if", "index", "==", "len", "(", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "args", ".", "data", ",", "current_seq", ")", ")", ")", ":", "\n", "                ", "if", "not", "isdir", "(", "args", ".", "boxes_results", ")", ":", "os", ".", "mkdir", "(", "args", ".", "boxes_results", ")", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "args", ".", "boxes_results", "+", "current_seq", ")", ",", "max_bboxes", "[", ":", "index", "]", ")", "\n", "print", "(", "'saved'", ")", "\n", "max_bboxes", "=", "[", "]", "# reinitialize storage", "\n", "break", "\n", "", "temp", "+=", "1", "\n", "\n", "\n", "# # save predicted saliency maps", "\n", "", "if", "not", "args", ".", "vis", ":", "\n", "            ", "continue", "\n", "", "for", "i", ",", "(", "label_", ",", "pred_", ")", "in", "enumerate", "(", "zip", "(", "labels", ",", "preds", ")", ")", ":", "\n", "            ", "for", "j", ",", "(", "label", ",", "pred", ")", "in", "enumerate", "(", "zip", "(", "label_", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "pred_", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", ")", ":", "\n", "                ", "dataset", "=", "data", "[", "i", "]", "[", "'dataset'", "]", "[", "j", "]", "\n", "image_id", "=", "data", "[", "i", "]", "[", "'image_id'", "]", "[", "j", "]", "\n", "result_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "results_folder", ",", "\"{}/{}.png\"", ".", "format", "(", "dataset", ",", "image_id", ")", ")", "\n", "\n", "pred", "[", "pred", "<", "0.1", "]", "=", "0", "\n", "pred", "[", "pred", ">=", "0.1", "]", "=", "1", "\n", "result", "=", "TF", ".", "to_pil_image", "(", "pred", ")", "\n", "dirname", "=", "os", ".", "path", ".", "dirname", "(", "result_path", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "dirname", ")", ":", "\n", "                    ", "os", ".", "makedirs", "(", "dirname", ")", "\n", "", "result", ".", "save", "(", "result_path", ")", "\n", "# draw mask", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "dirname", ".", "replace", "(", "'results'", ",", "'mask'", ")", ")", ":", "\n", "                    ", "os", ".", "makedirs", "(", "dirname", ".", "replace", "(", "'results'", ",", "'mask'", ")", ")", "\n", "", "union_image_mask", "(", "os", ".", "path", ".", "join", "(", "args", ".", "data", ",", "\"{}.jpg\"", ".", "format", "(", "image_id", ")", ")", ",", "result_path", ",", "result_path", ".", "replace", "(", "'results'", ",", "'mask'", ")", ".", "replace", "(", "'png'", ",", "'jpg'", ")", ",", "temp_box", "[", "i", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.preprocessing.par_crop.printProgress": [[16, 35], ["formatStr.format", "int", "sys.stdout.flush", "round", "sys.stdout.write", "sys.stdout.write", "str", "float", "float"], "function", ["home.repos.pwc.inspect_result.vision4robotics_udat.utils.logger.LogFormatter.format"], ["def", "printProgress", "(", "iteration", ",", "total", ",", "prefix", "=", "''", ",", "suffix", "=", "''", ",", "decimals", "=", "1", ",", "barLength", "=", "100", ")", ":", "\n", "    ", "\"\"\"\n    Call in a loop to create terminal progress bar\n    @params:\n        iteration   - Required  : current iteration (Int)\n        total       - Required  : total iterations (Int)\n        prefix      - Optional  : prefix string (Str)\n        suffix      - Optional  : suffix string (Str)\n        decimals    - Optional  : positive number of decimals in percent complete (Int)\n        barLength   - Optional  : character length of bar (Int)\n    \"\"\"", "\n", "formatStr", "=", "\"{0:.\"", "+", "str", "(", "decimals", ")", "+", "\"f}\"", "\n", "percents", "=", "formatStr", ".", "format", "(", "100", "*", "(", "iteration", "/", "float", "(", "total", ")", ")", ")", "\n", "filledLength", "=", "int", "(", "round", "(", "barLength", "*", "iteration", "/", "float", "(", "total", ")", ")", ")", "\n", "bar", "=", "''", "*", "filledLength", "+", "'-'", "*", "(", "barLength", "-", "filledLength", ")", "\n", "sys", ".", "stdout", ".", "write", "(", "'\\r%s |%s| %s%s %s'", "%", "(", "prefix", ",", "bar", ",", "percents", ",", "'%'", ",", "suffix", ")", ")", ",", "\n", "if", "iteration", "==", "total", ":", "\n", "        ", "sys", ".", "stdout", ".", "write", "(", "'\\x1b[2K\\r'", ")", "\n", "", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.preprocessing.par_crop.crop_hwc": [[37, 46], ["numpy.array().astype", "cv2.warpAffine", "numpy.array"], "function", ["None"], ["", "def", "crop_hwc", "(", "image", ",", "bbox", ",", "out_sz", ",", "padding", "=", "(", "0", ",", "0", ",", "0", ")", ")", ":", "\n", "    ", "a", "=", "(", "out_sz", "-", "1", ")", "/", "(", "bbox", "[", "2", "]", "-", "bbox", "[", "0", "]", ")", "\n", "b", "=", "(", "out_sz", "-", "1", ")", "/", "(", "bbox", "[", "3", "]", "-", "bbox", "[", "1", "]", ")", "\n", "c", "=", "-", "a", "*", "bbox", "[", "0", "]", "\n", "d", "=", "-", "b", "*", "bbox", "[", "1", "]", "\n", "mapping", "=", "np", ".", "array", "(", "[", "[", "a", ",", "0", ",", "c", "]", ",", "\n", "[", "0", ",", "b", ",", "d", "]", "]", ")", ".", "astype", "(", "np", ".", "float", ")", "\n", "crop", "=", "cv2", ".", "warpAffine", "(", "image", ",", "mapping", ",", "(", "out_sz", ",", "out_sz", ")", ",", "borderMode", "=", "cv2", ".", "BORDER_CONSTANT", ",", "borderValue", "=", "padding", ")", "\n", "return", "crop", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.preprocessing.par_crop.pos_s_2_bbox": [[48, 50], ["None"], "function", ["None"], ["", "def", "pos_s_2_bbox", "(", "pos", ",", "s", ")", ":", "\n", "    ", "return", "[", "pos", "[", "0", "]", "-", "s", "/", "2", ",", "pos", "[", "1", "]", "-", "s", "/", "2", ",", "pos", "[", "0", "]", "+", "s", "/", "2", ",", "pos", "[", "1", "]", "+", "s", "/", "2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.preprocessing.par_crop.crop_like_SiamFC": [[52, 66], ["numpy.sqrt", "par_crop.crop_hwc", "par_crop.crop_hwc", "par_crop.pos_s_2_bbox", "par_crop.pos_s_2_bbox", "sum", "sum"], "function", ["home.repos.pwc.inspect_result.vision4robotics_udat.vid.par_crop.crop_hwc", "home.repos.pwc.inspect_result.vision4robotics_udat.vid.par_crop.crop_hwc", "home.repos.pwc.inspect_result.vision4robotics_udat.vid.par_crop.pos_s_2_bbox", "home.repos.pwc.inspect_result.vision4robotics_udat.vid.par_crop.pos_s_2_bbox"], ["", "def", "crop_like_SiamFC", "(", "image", ",", "bbox", ",", "context_amount", "=", "0.5", ",", "exemplar_size", "=", "127", ",", "instanc_size", "=", "255", ",", "padding", "=", "(", "0", ",", "0", ",", "0", ")", ")", ":", "\n", "    ", "target_pos", "=", "[", "(", "bbox", "[", "2", "]", "+", "bbox", "[", "0", "]", ")", "/", "2.", ",", "(", "bbox", "[", "3", "]", "+", "bbox", "[", "1", "]", ")", "/", "2.", "]", "\n", "target_size", "=", "[", "bbox", "[", "2", "]", "-", "bbox", "[", "0", "]", ",", "bbox", "[", "3", "]", "-", "bbox", "[", "1", "]", "]", "\n", "wc_z", "=", "target_size", "[", "1", "]", "+", "context_amount", "*", "sum", "(", "target_size", ")", "\n", "hc_z", "=", "target_size", "[", "0", "]", "+", "context_amount", "*", "sum", "(", "target_size", ")", "\n", "s_z", "=", "np", ".", "sqrt", "(", "wc_z", "*", "hc_z", ")", "\n", "scale_z", "=", "exemplar_size", "/", "s_z", "\n", "d_search", "=", "(", "instanc_size", "-", "exemplar_size", ")", "/", "2", "\n", "pad", "=", "d_search", "/", "scale_z", "\n", "s_x", "=", "s_z", "+", "2", "*", "pad", "\n", "\n", "z", "=", "crop_hwc", "(", "image", ",", "pos_s_2_bbox", "(", "target_pos", ",", "s_z", ")", ",", "exemplar_size", ",", "padding", ")", "\n", "x", "=", "crop_hwc", "(", "image", ",", "pos_s_2_bbox", "(", "target_pos", ",", "s_x", ")", ",", "instanc_size", ",", "padding", ")", "\n", "return", "z", ",", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.preprocessing.par_crop.crop_video": [[68, 91], ["os.path.join", "os.path.join", "os.path.join", "open", "open.readlines", "open.close", "enumerate", "os.path.isdir", "os.makedirs", "gt_line.strip().split", "cv2.imread", "numpy.mean", "par_crop.crop_like_SiamFC", "cv2.imwrite", "cv2.imwrite", "int", "int", "os.path.join", "os.path.join", "os.path.join", "gt_line.strip", "float", "float", "int", "int", "int", "int", "float", "float", "float", "float", "str().zfill", "int", "int", "int", "int", "str"], "function", ["home.repos.pwc.inspect_result.vision4robotics_udat.vid.par_crop.crop_like_SiamFC"], ["", "def", "crop_video", "(", "video", ",", "crop_path", ",", "instanc_size", ")", ":", "\n", "    ", "if", "video", "!=", "'list.txt'", ":", "\n", "        ", "video_crop_base_path", "=", "join", "(", "crop_path", ",", "video", ")", "\n", "if", "not", "isdir", "(", "video_crop_base_path", ")", ":", "makedirs", "(", "video_crop_base_path", ")", "\n", "gt_path", "=", "join", "(", "pseudo_label_path", ",", "video", "+", "'_gt.txt'", ")", "\n", "images_path", "=", "join", "(", "dataset_path", ",", "video", ")", "\n", "f", "=", "open", "(", "gt_path", ",", "'r'", ")", "\n", "groundtruth", "=", "f", ".", "readlines", "(", ")", "\n", "f", ".", "close", "(", ")", "\n", "idx_woOcc", "=", "0", "\n", "for", "idx", ",", "gt_line", "in", "enumerate", "(", "groundtruth", ")", ":", "\n", "            ", "if", "gt_line", "==", "'NaN,NaN,NaN,NaN\\n'", ":", "\n", "                ", "continue", "\n", "", "gt_image", "=", "gt_line", ".", "strip", "(", ")", ".", "split", "(", "','", ")", "\n", "bbox", "=", "[", "int", "(", "float", "(", "gt_image", "[", "0", "]", ")", ")", ",", "int", "(", "float", "(", "gt_image", "[", "1", "]", ")", ")", ",", "int", "(", "float", "(", "gt_image", "[", "0", "]", ")", ")", "+", "int", "(", "float", "(", "gt_image", "[", "2", "]", ")", ")", ",", "int", "(", "float", "(", "gt_image", "[", "1", "]", ")", ")", "+", "int", "(", "float", "(", "gt_image", "[", "3", "]", ")", ")", "]", "#xmin,ymin,xmax,ymax", "\n", "\n", "im", "=", "cv2", ".", "imread", "(", "join", "(", "images_path", ",", "str", "(", "idx", "+", "1", ")", ".", "zfill", "(", "6", ")", "+", "'.jpg'", ")", ")", "\n", "avg_chans", "=", "np", ".", "mean", "(", "im", ",", "axis", "=", "(", "0", ",", "1", ")", ")", "\n", "\n", "z", ",", "x", "=", "crop_like_SiamFC", "(", "im", ",", "bbox", ",", "instanc_size", "=", "instanc_size", ",", "padding", "=", "avg_chans", ")", "\n", "cv2", ".", "imwrite", "(", "join", "(", "video_crop_base_path", ",", "'{:06d}.{:02d}.z.jpg'", ".", "format", "(", "int", "(", "idx_woOcc", ")", ",", "int", "(", "0", ")", ")", ")", ",", "z", ")", "#idx", "\n", "cv2", ".", "imwrite", "(", "join", "(", "video_crop_base_path", ",", "'{:06d}.{:02d}.x.jpg'", ".", "format", "(", "int", "(", "idx_woOcc", ")", ",", "int", "(", "0", ")", ")", ")", ",", "x", ")", "#idx", "\n", "idx_woOcc", "=", "idx_woOcc", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.preprocessing.par_crop.main": [[92, 109], ["os.path.join", "os.listdir", "os.listdir.sort", "len", "os.path.isdir", "os.mkdir", "os.path.join", "os.path.isdir", "os.mkdir", "concurrent.futures.ProcessPoolExecutor", "enumerate", "executor.submit", "concurrent.futures.as_completed", "par_crop.printProgress"], "function", ["home.repos.pwc.inspect_result.vision4robotics_udat.vid.par_crop.printProgress"], ["", "", "", "def", "main", "(", "instanc_size", "=", "511", ",", "num_threads", "=", "24", ")", ":", "\n", "    ", "save_path", "=", "'/YOUR/PATH/NAT2021-train/'", "# where to save cropped imgs", "\n", "crop_path", "=", "'{}/crop_{:d}'", ".", "format", "(", "save_path", ",", "instanc_size", ")", "\n", "\n", "if", "not", "isdir", "(", "crop_path", ")", ":", "mkdir", "(", "crop_path", ")", "\n", "save_path", "=", "join", "(", "crop_path", ")", "\n", "videos", "=", "listdir", "(", "join", "(", "dataset_path", ")", ")", "\n", "videos", ".", "sort", "(", ")", "\n", "if", "not", "isdir", "(", "save_path", ")", ":", "mkdir", "(", "save_path", ")", "\n", "\n", "\n", "n_videos", "=", "len", "(", "videos", ")", "\n", "with", "futures", ".", "ProcessPoolExecutor", "(", "max_workers", "=", "num_threads", ")", "as", "executor", ":", "\n", "        ", "fs", "=", "[", "executor", ".", "submit", "(", "crop_video", ",", "video", ",", "save_path", ",", "instanc_size", ")", "for", "video", "in", "videos", "]", "\n", "for", "i", ",", "f", "in", "enumerate", "(", "futures", ".", "as_completed", "(", "fs", ")", ")", ":", "\n", "# Write progress to error so that it can be seen", "\n", "            ", "printProgress", "(", "i", ",", "n_videos", ",", "prefix", "=", "'train'", ",", "suffix", "=", "'Done '", ",", "barLength", "=", "40", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.preprocessing.lowlight_enhancement.lowlight": [[18, 46], ["PIL.Image.open", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "data_lowlight.cuda().unsqueeze.permute", "data_lowlight.cuda().unsqueeze.cuda().unsqueeze", "DCE_net", "image_path.replace.replace", "torchvision.utils.save_image", "numpy.asarray", "os.path.exists", "os.makedirs", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "data_lowlight.cuda().unsqueeze.cuda", "image_path.replace.replace", "image_path.replace.replace", "image.split", "image_path.replace.split"], "function", ["None"], ["def", "lowlight", "(", "DCE_net", ",", "image_path", ")", ":", "\n", "\n", "\t", "scale_factor", "=", "12", "\n", "data_lowlight", "=", "Image", ".", "open", "(", "image_path", ")", "\n", "\n", "\n", "\n", "data_lowlight", "=", "(", "np", ".", "asarray", "(", "data_lowlight", ")", "/", "255.0", ")", "\n", "\n", "\n", "data_lowlight", "=", "torch", ".", "from_numpy", "(", "data_lowlight", ")", ".", "float", "(", ")", "\n", "\n", "h", "=", "(", "data_lowlight", ".", "shape", "[", "0", "]", "//", "scale_factor", ")", "*", "scale_factor", "\n", "w", "=", "(", "data_lowlight", ".", "shape", "[", "1", "]", "//", "scale_factor", ")", "*", "scale_factor", "\n", "data_lowlight", "=", "data_lowlight", "[", "0", ":", "h", ",", "0", ":", "w", ",", ":", "]", "\n", "data_lowlight", "=", "data_lowlight", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "\n", "data_lowlight", "=", "data_lowlight", ".", "cuda", "(", ")", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "\n", "enhanced_image", ",", "params_maps", "=", "DCE_net", "(", "data_lowlight", ")", "\n", "\n", "image_path", "=", "image_path", ".", "replace", "(", "'train_clip'", ",", "'train_clip_enhanced'", ")", "\n", "\n", "result_path", "=", "image_path", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "image_path", ".", "replace", "(", "'/'", "+", "image", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", ",", "''", ")", ")", ":", "\n", "\t\t", "os", ".", "makedirs", "(", "image_path", ".", "replace", "(", "'/'", "+", "image_path", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", ",", "''", ")", ")", "\n", "# import pdb;pdb.set_trace()", "\n", "", "torchvision", ".", "utils", ".", "save_image", "(", "enhanced_image", ",", "result_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.utils.logger.LogFormatter.format": [[18, 43], ["logger.LogFormatter.__set_fmt", "logging.Formatter.format", "logger.LogFormatter.__set_fmt", "logging.Formatter.format", "logger.LogFormatter._color_date", "mcl"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.utils.logger.LogFormatter.format", "home.repos.pwc.inspect_result.vision4robotics_udat.utils.logger.LogFormatter.format", "home.repos.pwc.inspect_result.vision4robotics_udat.utils.logger.LogFormatter._color_date"], ["def", "format", "(", "self", ",", "record", ")", ":", "\n", "        ", "if", "record", ".", "levelno", "==", "logging", ".", "DEBUG", ":", "\n", "            ", "mcl", ",", "mtxt", "=", "self", ".", "_color_dbg", ",", "'DBG'", "\n", "", "elif", "record", ".", "levelno", "==", "logging", ".", "WARNING", ":", "\n", "            ", "mcl", ",", "mtxt", "=", "self", ".", "_color_warn", ",", "'WRN'", "\n", "", "elif", "record", ".", "levelno", "==", "logging", ".", "ERROR", ":", "\n", "            ", "mcl", ",", "mtxt", "=", "self", ".", "_color_err", ",", "'ERR'", "\n", "", "else", ":", "\n", "            ", "mcl", ",", "mtxt", "=", "self", ".", "_color_normal", ",", "''", "\n", "\n", "", "if", "mtxt", ":", "\n", "            ", "mtxt", "+=", "' '", "\n", "\n", "", "if", "self", ".", "log_fout", ":", "\n", "            ", "self", ".", "__set_fmt", "(", "self", ".", "date_full", "+", "mtxt", "+", "self", ".", "msg", ")", "\n", "formatted", "=", "super", "(", "LogFormatter", ",", "self", ")", ".", "format", "(", "record", ")", "\n", "# self.log_fout.write(formatted)", "\n", "# self.log_fout.write('\\n')", "\n", "# self.log_fout.flush()", "\n", "return", "formatted", "\n", "\n", "", "self", ".", "__set_fmt", "(", "self", ".", "_color_date", "(", "self", ".", "date", ")", "+", "mcl", "(", "mtxt", "+", "self", ".", "msg", ")", ")", "\n", "formatted", "=", "super", "(", "LogFormatter", ",", "self", ")", ".", "format", "(", "record", ")", "\n", "\n", "return", "formatted", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.utils.logger.LogFormatter._color_dbg": [[51, 54], ["None"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "_color_dbg", "(", "msg", ")", ":", "\n", "        ", "return", "'\\x1b[36m{}\\x1b[0m'", ".", "format", "(", "msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.utils.logger.LogFormatter._color_warn": [[55, 58], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_color_warn", "(", "msg", ")", ":", "\n", "        ", "return", "'\\x1b[1;31m{}\\x1b[0m'", ".", "format", "(", "msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.utils.logger.LogFormatter._color_err": [[59, 62], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_color_err", "(", "msg", ")", ":", "\n", "        ", "return", "'\\x1b[1;4;31m{}\\x1b[0m'", ".", "format", "(", "msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.utils.logger.LogFormatter._color_omitted": [[63, 66], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_color_omitted", "(", "msg", ")", ":", "\n", "        ", "return", "'\\x1b[35m{}\\x1b[0m'", ".", "format", "(", "msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.utils.logger.LogFormatter._color_normal": [[67, 70], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_color_normal", "(", "msg", ")", ":", "\n", "        ", "return", "msg", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.utils.logger.LogFormatter._color_date": [[71, 74], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_color_date", "(", "msg", ")", ":", "\n", "        ", "return", "'\\x1b[32m{}\\x1b[0m'", ".", "format", "(", "msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.utils.logger.get_logger": [[76, 95], ["logging.getLogger", "logging.getLogger.setLevel", "logging.StreamHandler", "logging.StreamHandler.setFormatter", "logging.StreamHandler.setLevel", "logging.getLogger.addHandler", "logging.FileHandler", "logging.FileHandler.setLevel", "logging.FileHandler.setFormatter", "logging.getLogger.addHandler", "formatter", "os.path.isdir", "os.makedirs"], "function", ["None"], ["", "", "def", "get_logger", "(", "log_dir", "=", "None", ",", "log_file", "=", "None", ",", "formatter", "=", "LogFormatter", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", ")", "\n", "logger", ".", "setLevel", "(", "_default_level", ")", "\n", "del", "logger", ".", "handlers", "[", ":", "]", "\n", "\n", "if", "log_dir", "and", "log_file", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "isdir", "(", "log_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "log_dir", ")", "\n", "", "LogFormatter", ".", "log_fout", "=", "True", "\n", "file_handler", "=", "logging", ".", "FileHandler", "(", "log_file", ",", "mode", "=", "'a'", ")", "\n", "file_handler", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "file_handler", ".", "setFormatter", "(", "formatter", ")", "\n", "logger", ".", "addHandler", "(", "file_handler", ")", "\n", "\n", "", "stream_handler", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "stream_handler", ".", "setFormatter", "(", "formatter", "(", "datefmt", "=", "'%d %H:%M:%S'", ")", ")", "\n", "stream_handler", ".", "setLevel", "(", "0", ")", "\n", "logger", ".", "addHandler", "(", "stream_handler", ")", "\n", "return", "logger", "", "", ""]], "home.repos.pwc.inspect_result.vision4robotics_udat.utils.metric.StructureMeasure": [[7, 44], ["numpy.mean", "ValueError", "ValueError", "ValueError", "numpy.mean", "numpy.amax", "numpy.amin", "numpy.mean", "metric.S_object", "metric.S_region"], "function", ["home.repos.pwc.inspect_result.vision4robotics_udat.utils.metric.S_object", "home.repos.pwc.inspect_result.vision4robotics_udat.utils.metric.S_region"], ["def", "StructureMeasure", "(", "prediction", ",", "GT", ")", ":", "\n", "    ", "\"\"\"\n        StructureMeasure computes the similarity between the foreground map and\n        ground truth(as proposed in \"Structure-measure: A new way to evaluate\n        foreground maps\" [Deng-Ping Fan et. al - ICCV 2017])\n        Usage:\n        Q = StructureMeasure(prediction,GT)\n        Input:\n        prediction - Binary/Non binary foreground map with values in the range\n                        [0 1]. Type: np.float32\n        GT - Binary ground truth. Type: np.bool\n        Output:\n        Q - The computed similarity score\n    \"\"\"", "\n", "# check input", "\n", "if", "prediction", ".", "dtype", "!=", "np", ".", "float32", ":", "\n", "        ", "raise", "ValueError", "(", "\"prediction should be of type: np.float32\"", ")", "\n", "", "if", "np", ".", "amax", "(", "prediction", ")", ">", "1", "or", "np", ".", "amin", "(", "prediction", ")", "<", "0", ":", "\n", "        ", "raise", "ValueError", "(", "\"prediction should be in the range of [0 1]\"", ")", "\n", "", "if", "GT", ".", "dtype", "!=", "np", ".", "bool", ":", "\n", "        ", "raise", "ValueError", "(", "\"prediction should be of type: np.bool\"", ")", "\n", "\n", "", "y", "=", "np", ".", "mean", "(", "GT", ")", "\n", "\n", "if", "y", "==", "0", ":", "# if the GT is completely black", "\n", "        ", "x", "=", "np", ".", "mean", "(", "prediction", ")", "\n", "Q", "=", "1.0", "-", "x", "\n", "", "elif", "y", "==", "1", ":", "# if the GT is completely white", "\n", "        ", "x", "=", "np", ".", "mean", "(", "prediction", ")", "\n", "Q", "=", "x", "\n", "", "else", ":", "\n", "        ", "alpha", "=", "0.5", "\n", "Q", "=", "alpha", "*", "S_object", "(", "prediction", ",", "GT", ")", "+", "(", "1", "-", "alpha", ")", "*", "S_region", "(", "prediction", ",", "GT", ")", "\n", "if", "Q", "<", "0", ":", "\n", "            ", "Q", "=", "0", "\n", "\n", "", "", "return", "Q", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.utils.metric.S_object": [[45, 75], ["prediction.copy", "metric.Object", "metric.Object", "numpy.mean"], "function", ["home.repos.pwc.inspect_result.vision4robotics_udat.utils.metric.Object", "home.repos.pwc.inspect_result.vision4robotics_udat.utils.metric.Object"], ["", "def", "S_object", "(", "prediction", ",", "GT", ")", ":", "\n", "    ", "\"\"\"\n        S_object Computes the object similarity between foreground maps and ground\n        truth(as proposed in \"Structure-measure:A new way to evaluate foreground\n        maps\" [Deng-Ping Fan et. al - ICCV 2017])\n        Usage:\n          Q = S_object(prediction,GT)\n        Input:\n          prediction - Binary/Non binary foreground map with values in the range\n                       [0 1]. Type: np.float32\n          GT - Binary ground truth. Type: np.bool\n        Output:\n          Q - The object similarity score\n    \"\"\"", "\n", "# compute the similarity of the foreground in the object level", "\n", "# Notice: inplace operation need deep copy", "\n", "prediction_fg", "=", "prediction", ".", "copy", "(", ")", "\n", "prediction_fg", "[", "~", "GT", "]", "=", "0", "\n", "O_FG", "=", "Object", "(", "prediction_fg", ",", "GT", ")", "\n", "\n", "# compute the similarity of the background", "\n", "prediction_bg", "=", "1.0", "-", "prediction", ";", "\n", "prediction_bg", "[", "GT", "]", "=", "0", "\n", "O_BG", "=", "Object", "(", "prediction_bg", ",", "~", "GT", ")", "\n", "\n", "# combine the foreground measure and background measure together", "\n", "u", "=", "np", ".", "mean", "(", "GT", ")", "\n", "Q", "=", "u", "*", "O_FG", "+", "(", "1", "-", "u", ")", "*", "O_BG", "\n", "\n", "return", "Q", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.utils.metric.Object": [[76, 84], ["numpy.mean", "numpy.std"], "function", ["None"], ["", "def", "Object", "(", "prediction", ",", "GT", ")", ":", "\n", "# compute the mean of the foreground or background in prediction", "\n", "    ", "x", "=", "np", ".", "mean", "(", "prediction", "[", "GT", "]", ")", "\n", "# compute the standard deviations of the foreground or background in prediction", "\n", "sigma_x", "=", "np", ".", "std", "(", "prediction", "[", "GT", "]", ")", "\n", "\n", "score", "=", "2.0", "*", "x", "/", "(", "x", "*", "x", "+", "1.0", "+", "sigma_x", "+", "eps", ")", "\n", "return", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.utils.metric.S_region": [[85, 113], ["metric.centroid", "metric.divideGT", "metric.Divideprediction", "metric.ssim", "metric.ssim", "metric.ssim", "metric.ssim"], "function", ["home.repos.pwc.inspect_result.vision4robotics_udat.utils.metric.centroid", "home.repos.pwc.inspect_result.vision4robotics_udat.utils.metric.divideGT", "home.repos.pwc.inspect_result.vision4robotics_udat.utils.metric.Divideprediction", "home.repos.pwc.inspect_result.vision4robotics_udat.pytorch_ssim.__init__.ssim", "home.repos.pwc.inspect_result.vision4robotics_udat.pytorch_ssim.__init__.ssim", "home.repos.pwc.inspect_result.vision4robotics_udat.pytorch_ssim.__init__.ssim", "home.repos.pwc.inspect_result.vision4robotics_udat.pytorch_ssim.__init__.ssim"], ["", "def", "S_region", "(", "prediction", ",", "GT", ")", ":", "\n", "    ", "\"\"\"\n        S_region computes the region similarity between the foreground map and\n        ground truth(as proposed in \"Structure-measure:A new way to evaluate\n        foreground maps\" [Deng-Ping Fan et. al - ICCV 2017])\n        Usage:\n          Q = S_region(prediction,GT)\n        Input:\n          prediction - Binary/Non binary foreground map with values in the range\n                       [0 1]. Type: np.float32\n          GT - Binary ground truth. Type: np.bool\n        Output:\n          Q - The region similarity score\n    \"\"\"", "\n", "# find the centroid of the GT", "\n", "X", ",", "Y", "=", "centroid", "(", "GT", ")", "\n", "# divide GT into 4 regions", "\n", "GT_1", ",", "GT_2", ",", "GT_3", ",", "GT_4", ",", "w1", ",", "w2", ",", "w3", ",", "w4", "=", "divideGT", "(", "GT", ",", "X", ",", "Y", ")", "\n", "# Divede prediction into 4 regions", "\n", "prediction_1", ",", "prediction_2", ",", "prediction_3", ",", "prediction_4", "=", "Divideprediction", "(", "prediction", ",", "X", ",", "Y", ")", "\n", "# Compute the ssim score for each regions", "\n", "Q1", "=", "ssim", "(", "prediction_1", ",", "GT_1", ")", "\n", "Q2", "=", "ssim", "(", "prediction_2", ",", "GT_2", ")", "\n", "Q3", "=", "ssim", "(", "prediction_3", ",", "GT_3", ")", "\n", "Q4", "=", "ssim", "(", "prediction_4", ",", "GT_4", ")", "\n", "#Sum the 4 scores", "\n", "Q", "=", "w1", "*", "Q1", "+", "w2", "*", "Q2", "+", "w3", "*", "Q3", "+", "w4", "*", "Q4", "\n", "return", "Q", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.utils.metric.centroid": [[114, 136], ["numpy.sum", "round", "round", "numpy.arange().astype", "[].T[].astype", "round", "round", "int", "int", "float", "float", "numpy.arange", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.arange"], "function", ["None"], ["", "def", "centroid", "(", "GT", ")", ":", "\n", "    ", "\"\"\"\n        Centroid Compute the centroid of the GT\n        Usage:\n          X,Y = Centroid(GT)\n        Input:\n          GT - Binary ground truth. Type: logical.\n        Output:\n          X,Y - The coordinates of centroid.\n    \"\"\"", "\n", "rows", ",", "cols", "=", "GT", ".", "shape", "\n", "\n", "total", "=", "np", ".", "sum", "(", "GT", ")", "\n", "if", "total", "==", "0", ":", "\n", "        ", "X", "=", "round", "(", "float", "(", "cols", ")", "/", "2", ")", "\n", "Y", "=", "round", "(", "float", "(", "rows", ")", "/", "2", ")", "\n", "", "else", ":", "\n", "        ", "i", "=", "np", ".", "arange", "(", "1", ",", "cols", "+", "1", ")", ".", "astype", "(", "np", ".", "float", ")", "\n", "j", "=", "(", "np", ".", "arange", "(", "1", ",", "rows", "+", "1", ")", "[", "np", ".", "newaxis", "]", ".", "T", ")", "[", ":", ",", "0", "]", ".", "astype", "(", "np", ".", "float", ")", "\n", "X", "=", "round", "(", "np", ".", "sum", "(", "np", ".", "sum", "(", "GT", ",", "axis", "=", "0", ")", "*", "i", ")", "/", "total", ")", "\n", "Y", "=", "round", "(", "np", ".", "sum", "(", "np", ".", "sum", "(", "GT", ",", "axis", "=", "1", ")", "*", "j", ")", "/", "total", ")", "\n", "", "return", "int", "(", "X", ")", ",", "int", "(", "Y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.utils.metric.divideGT": [[137, 160], ["float"], "function", ["None"], ["", "def", "divideGT", "(", "GT", ",", "X", ",", "Y", ")", ":", "\n", "    ", "\"\"\"\n        LT - left top;\n        RT - right top;\n        LB - left bottom;\n        RB - right bottom;\n    \"\"\"", "\n", "# width and height of the GT", "\n", "hei", ",", "wid", "=", "GT", ".", "shape", "\n", "area", "=", "float", "(", "wid", "*", "hei", ")", "\n", "\n", "# copy 4 regions", "\n", "LT", "=", "GT", "[", "0", ":", "Y", ",", "0", ":", "X", "]", "\n", "RT", "=", "GT", "[", "0", ":", "Y", ",", "X", ":", "wid", "]", "\n", "LB", "=", "GT", "[", "Y", ":", "hei", ",", "0", ":", "X", "]", "\n", "RB", "=", "GT", "[", "Y", ":", "hei", ",", "X", ":", "wid", "]", "\n", "\n", "# The different weight (each block proportional to the GT foreground region).", "\n", "w1", "=", "(", "X", "*", "Y", ")", "/", "area", "\n", "w2", "=", "(", "(", "wid", "-", "X", ")", "*", "Y", ")", "/", "area", "\n", "w3", "=", "(", "X", "*", "(", "hei", "-", "Y", ")", ")", "/", "area", "\n", "w4", "=", "1.0", "-", "w1", "-", "w2", "-", "w3", "\n", "return", "LT", ",", "RT", ",", "LB", ",", "RB", ",", "w1", ",", "w2", ",", "w3", ",", "w4", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.utils.metric.Divideprediction": [[161, 173], ["None"], "function", ["None"], ["", "def", "Divideprediction", "(", "prediction", ",", "X", ",", "Y", ")", ":", "\n", "    ", "\"\"\"\n        Divide the prediction into 4 regions according to the centroid of the GT\n    \"\"\"", "\n", "hei", ",", "wid", "=", "prediction", ".", "shape", "\n", "# copy 4 regions", "\n", "LT", "=", "prediction", "[", "0", ":", "Y", ",", "0", ":", "X", "]", "\n", "RT", "=", "prediction", "[", "0", ":", "Y", ",", "X", ":", "wid", "]", "\n", "LB", "=", "prediction", "[", "Y", ":", "hei", ",", "0", ":", "X", "]", "\n", "RB", "=", "prediction", "[", "Y", ":", "hei", ",", "X", ":", "wid", "]", "\n", "\n", "return", "LT", ",", "RT", ",", "LB", ",", "RB", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.utils.metric.ssim": [[174, 217], ["GT.astype", "float", "numpy.mean", "numpy.mean", "numpy.sum", "numpy.sum", "numpy.sum"], "function", ["None"], ["", "def", "ssim", "(", "prediction", ",", "GT", ")", ":", "\n", "    ", "\"\"\"\n        ssim computes the region similarity between foreground maps and ground\n        truth(as proposed in \"Structure-measure: A new way to evaluate foreground\n        maps\" [Deng-Ping Fan et. al - ICCV 2017])\n        Usage:\n          Q = ssim(prediction,GT)\n        Input:\n          prediction - Binary/Non binary foreground map with values in the range\n                       [0 1]. Type: np.float32\n          GT - Binary ground truth. Type: np.bool\n        Output:\n          Q - The region similarity score\n    \"\"\"", "\n", "dGT", "=", "GT", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "hei", ",", "wid", "=", "prediction", ".", "shape", "\n", "N", "=", "float", "(", "wid", "*", "hei", ")", "\n", "\n", "# Compute the mean of SM,GT", "\n", "x", "=", "np", ".", "mean", "(", "prediction", ")", "\n", "y", "=", "np", ".", "mean", "(", "dGT", ")", "\n", "\n", "# Compute the variance of SM,GT", "\n", "dx", "=", "prediction", "-", "x", "\n", "dy", "=", "dGT", "-", "y", "\n", "total", "=", "N", "-", "1", "+", "eps", "\n", "sigma_x2", "=", "np", ".", "sum", "(", "dx", "*", "dx", ")", "/", "total", "\n", "sigma_y2", "=", "np", ".", "sum", "(", "dy", "*", "dy", ")", "/", "total", "\n", "\n", "# Compute the covariance between SM and GT", "\n", "sigma_xy", "=", "np", ".", "sum", "(", "dx", "*", "dy", ")", "/", "total", "\n", "\n", "alpha", "=", "4", "*", "x", "*", "y", "*", "sigma_xy", "\n", "beta", "=", "(", "x", "*", "x", "+", "y", "*", "y", ")", "*", "(", "sigma_x2", "+", "sigma_y2", ")", "\n", "\n", "if", "alpha", "!=", "0", ":", "\n", "        ", "Q", "=", "alpha", "/", "(", "beta", "+", "eps", ")", "\n", "", "elif", "beta", "==", "0", ":", "\n", "        ", "Q", "=", "1.0", "\n", "", "else", ":", "\n", "        ", "Q", "=", "0", "\n", "", "return", "Q", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.utils.utils.clip_gradient": [[1, 6], ["param.grad.data.clamp_"], "function", ["None"], ["def", "clip_gradient", "(", "optimizer", ",", "grad_clip", ")", ":", "\n", "    ", "for", "group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "for", "param", "in", "group", "[", "'params'", "]", ":", "\n", "            ", "if", "param", ".", "grad", "is", "not", "None", ":", "\n", "                ", "param", ".", "grad", ".", "data", ".", "clamp_", "(", "-", "grad_clip", ",", "grad_clip", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.utils.utils.adjust_lr": [[8, 14], ["None"], "function", ["None"], ["", "", "", "", "def", "adjust_lr", "(", "optimizer", ",", "init_lr", ",", "epoch", ",", "decay_rate", "=", "0.1", ",", "decay_epoch", "=", "30", ")", ":", "\n", "    ", "decay", "=", "decay_rate", "**", "(", "epoch", "//", "decay_epoch", ")", "\n", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "decay", "*", "init_lr", "\n", "lr", "=", "param_group", "[", "'lr'", "]", "\n", "", "return", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.utils.utils.adjust_lr_finetune": [[16, 27], ["None"], "function", ["None"], ["", "def", "adjust_lr_finetune", "(", "optimizer", ",", "base_lr", ",", "finetune_lr", ",", "epoch", ",", "decay_rate", "=", "0.1", ",", "decay_epoch", "=", "30", ")", ":", "\n", "    ", "decay", "=", "decay_rate", "**", "(", "epoch", "//", "decay_epoch", ")", "\n", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "if", "param_group", "[", "\"name\"", "]", "==", "\"base_params\"", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "=", "decay", "*", "base_lr", "\n", "base_lr", "=", "param_group", "[", "'lr'", "]", "\n", "", "if", "param_group", "[", "\"name\"", "]", "==", "\"finetune_params\"", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "=", "decay", "*", "finetune_lr", "\n", "finetune_lr", "=", "param_group", "[", "'lr'", "]", "\n", "\n", "", "", "return", "base_lr", ",", "finetune_lr", "", "", ""]], "home.repos.pwc.inspect_result.vision4robotics_udat.utils.pyt_utils.load_model": [[16, 56], ["time.time", "isinstance", "time.time", "model.load_state_dict", "set", "set", "time.time", "logger.info", "torch.device", "torch.load", "torch.load.keys", "model.state_dict().keys", "len", "logger.warning", "len", "logger.warning", "torch.load.keys", "model.state_dict"], "function", ["None"], ["def", "load_model", "(", "model", ",", "model_file", ",", "is_restore", "=", "False", ")", ":", "\n", "    ", "t_start", "=", "time", ".", "time", "(", ")", "\n", "if", "isinstance", "(", "model_file", ",", "str", ")", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", "state_dict", "=", "torch", ".", "load", "(", "model_file", ",", "map_location", "=", "device", ")", "\n", "if", "'state_dict'", "in", "state_dict", ".", "keys", "(", ")", ":", "\n", "           ", "state_dict", "=", "state_dict", "[", "'state_dict'", "]", "\n", "", "", "else", ":", "\n", "        ", "state_dict", "=", "model_file", "\n", "", "t_ioend", "=", "time", ".", "time", "(", ")", "\n", "\n", "# if not is_restore:", "\n", "#     # extend the input channels of FGPLG from 3 to 7", "\n", "#     v2 = model.backbone.resnet.conv1.weight", "\n", "#     if v2.size(1) > 3:", "\n", "#         v = state_dict['backbone.resnet.conv1.weight']", "\n", "#         v = torch.cat((v,v2[:,3:,:,:]), dim=1)", "\n", "#         state_dict['backbone.resnet.conv1.weight'] = v", "\n", "\n", "model", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "False", ")", "\n", "ckpt_keys", "=", "set", "(", "state_dict", ".", "keys", "(", ")", ")", "\n", "own_keys", "=", "set", "(", "model", ".", "state_dict", "(", ")", ".", "keys", "(", ")", ")", "\n", "missing_keys", "=", "own_keys", "-", "ckpt_keys", "\n", "unexpected_keys", "=", "ckpt_keys", "-", "own_keys", "\n", "\n", "if", "len", "(", "missing_keys", ")", ">", "0", ":", "\n", "        ", "logger", ".", "warning", "(", "'Missing key(s) in state_dict: {}'", ".", "format", "(", "\n", "', '", ".", "join", "(", "'{}'", ".", "format", "(", "k", ")", "for", "k", "in", "missing_keys", ")", ")", ")", "\n", "\n", "", "if", "len", "(", "unexpected_keys", ")", ">", "0", ":", "\n", "        ", "logger", ".", "warning", "(", "'Unexpected key(s) in state_dict: {}'", ".", "format", "(", "\n", "', '", ".", "join", "(", "'{}'", ".", "format", "(", "k", ")", "for", "k", "in", "unexpected_keys", ")", ")", ")", "\n", "\n", "", "del", "state_dict", "\n", "t_end", "=", "time", ".", "time", "(", ")", "\n", "logger", ".", "info", "(", "\n", "\"Load model, Time usage:\\n\\tIO: {}, initialize parameters: {}\"", ".", "format", "(", "\n", "t_ioend", "-", "t_start", ",", "t_end", "-", "t_ioend", ")", ")", "\n", "\n", "return", "model", "", "", ""]], "home.repos.pwc.inspect_result.vision4robotics_udat.utils.statistics.overlap_ratio": [[77, 98], ["numpy.maximum", "numpy.minimum", "numpy.maximum", "numpy.minimum", "numpy.maximum", "numpy.maximum", "numpy.maximum", "numpy.minimum"], "function", ["None"], []], "home.repos.pwc.inspect_result.vision4robotics_udat.utils.statistics.success_overlap": [[99, 109], ["numpy.arange", "numpy.zeros", "statistics.overlap_ratio", "range", "len", "numpy.ones", "numpy.sum", "len", "len", "numpy.sum", "float"], "function", ["home.repos.pwc.inspect_result.vision4robotics_udat.utils.statistics.overlap_ratio"], []], "home.repos.pwc.inspect_result.vision4robotics_udat.utils.statistics.success_error": [[110, 120], ["numpy.zeros", "numpy.sqrt", "range", "len", "numpy.ones", "numpy.sum", "numpy.sum", "len", "len", "numpy.power", "numpy.sum", "float"], "function", ["None"], []], "home.repos.pwc.inspect_result.vision4robotics_udat.utils.model_load.check_keys": [[16, 37], ["set", "set", "logger.info", "pretrained_state_dict.keys", "model.state_dict().keys", "len", "logger.info", "logger.info", "len", "logger.info", "logger.info", "len", "len", "model.state_dict", "x.endswith", "len", "len"], "function", ["None"], ["def", "check_keys", "(", "model", ",", "pretrained_state_dict", ")", ":", "\n", "    ", "ckpt_keys", "=", "set", "(", "pretrained_state_dict", ".", "keys", "(", ")", ")", "\n", "model_keys", "=", "set", "(", "model", ".", "state_dict", "(", ")", ".", "keys", "(", ")", ")", "\n", "used_pretrained_keys", "=", "model_keys", "&", "ckpt_keys", "\n", "unused_pretrained_keys", "=", "ckpt_keys", "-", "model_keys", "\n", "missing_keys", "=", "model_keys", "-", "ckpt_keys", "\n", "# filter 'num_batches_tracked'", "\n", "missing_keys", "=", "[", "x", "for", "x", "in", "missing_keys", "\n", "if", "not", "x", ".", "endswith", "(", "'num_batches_tracked'", ")", "]", "\n", "if", "len", "(", "missing_keys", ")", ">", "0", ":", "\n", "        ", "logger", ".", "info", "(", "'[Warning] missing keys: {}'", ".", "format", "(", "missing_keys", ")", ")", "\n", "logger", ".", "info", "(", "'missing keys:{}'", ".", "format", "(", "len", "(", "missing_keys", ")", ")", ")", "\n", "", "if", "len", "(", "unused_pretrained_keys", ")", ">", "0", ":", "\n", "        ", "logger", ".", "info", "(", "'[Warning] unused_pretrained_keys: {}'", ".", "format", "(", "\n", "unused_pretrained_keys", ")", ")", "\n", "logger", ".", "info", "(", "'unused checkpoint keys:{}'", ".", "format", "(", "\n", "len", "(", "unused_pretrained_keys", ")", ")", ")", "\n", "", "logger", ".", "info", "(", "'used keys:{}'", ".", "format", "(", "len", "(", "used_pretrained_keys", ")", ")", ")", "\n", "assert", "len", "(", "used_pretrained_keys", ")", ">", "0", ",", "'load NONE from pretrained checkpoint'", "\n", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.utils.model_load.remove_prefix": [[39, 45], ["logger.info", "f", "x.startswith", "state_dict.items", "x.split"], "function", ["None"], ["", "def", "remove_prefix", "(", "state_dict", ",", "prefix", ")", ":", "\n", "    ", "''' Old style model is stored with all names of parameters\n    share common prefix 'module.' '''", "\n", "logger", ".", "info", "(", "'remove prefix \\'{}\\''", ".", "format", "(", "prefix", ")", ")", "\n", "f", "=", "lambda", "x", ":", "x", ".", "split", "(", "prefix", ",", "1", ")", "[", "-", "1", "]", "if", "x", ".", "startswith", "(", "prefix", ")", "else", "x", "\n", "return", "{", "f", "(", "key", ")", ":", "value", "for", "key", ",", "value", "in", "state_dict", ".", "items", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.utils.model_load.load_pretrain": [[47, 71], ["logger.info", "torch.cuda.current_device", "torch.load", "model.load_state_dict", "remove_prefix.keys", "model_load.remove_prefix", "model_load.remove_prefix", "model_load.check_keys", "logger.info", "remove_prefix.items", "model_load.check_keys", "storage.cuda"], "function", ["home.repos.pwc.inspect_result.vision4robotics_udat.utils.model_load.remove_prefix", "home.repos.pwc.inspect_result.vision4robotics_udat.utils.model_load.remove_prefix", "home.repos.pwc.inspect_result.vision4robotics_udat.utils.model_load.check_keys", "home.repos.pwc.inspect_result.vision4robotics_udat.utils.model_load.check_keys"], ["", "def", "load_pretrain", "(", "model", ",", "pretrained_path", ")", ":", "\n", "    ", "logger", ".", "info", "(", "'load pretrained model from {}'", ".", "format", "(", "pretrained_path", ")", ")", "\n", "device", "=", "torch", ".", "cuda", ".", "current_device", "(", ")", "\n", "pretrained_dict", "=", "torch", ".", "load", "(", "pretrained_path", ",", "\n", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ".", "cuda", "(", "device", ")", ")", "\n", "if", "\"state_dict\"", "in", "pretrained_dict", ".", "keys", "(", ")", ":", "\n", "        ", "pretrained_dict", "=", "remove_prefix", "(", "pretrained_dict", "[", "'state_dict'", "]", ",", "\n", "'module.'", ")", "\n", "", "else", ":", "\n", "        ", "pretrained_dict", "=", "remove_prefix", "(", "pretrained_dict", ",", "'module.'", ")", "\n", "\n", "", "try", ":", "\n", "        ", "check_keys", "(", "model", ",", "pretrained_dict", ")", "\n", "", "except", ":", "\n", "        ", "logger", ".", "info", "(", "'[Warning]: using pretrain as features.\\\n                Adding \"features.\" as prefix'", ")", "\n", "new_dict", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "pretrained_dict", ".", "items", "(", ")", ":", "\n", "            ", "k", "=", "'features.'", "+", "k", "\n", "new_dict", "[", "k", "]", "=", "v", "\n", "", "pretrained_dict", "=", "new_dict", "\n", "check_keys", "(", "model", ",", "pretrained_dict", ")", "\n", "", "model", ".", "load_state_dict", "(", "pretrained_dict", ",", "strict", "=", "False", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.utils.model_load.restore_from": [[73, 86], ["torch.cuda.current_device", "torch.load", "model_load.remove_prefix", "model_load.check_keys", "model.load_state_dict", "model_load.check_keys", "optimizer.load_state_dict", "storage.cuda"], "function", ["home.repos.pwc.inspect_result.vision4robotics_udat.utils.model_load.remove_prefix", "home.repos.pwc.inspect_result.vision4robotics_udat.utils.model_load.check_keys", "home.repos.pwc.inspect_result.vision4robotics_udat.utils.model_load.check_keys"], ["", "def", "restore_from", "(", "model", ",", "optimizer", ",", "ckpt_path", ")", ":", "\n", "    ", "device", "=", "torch", ".", "cuda", ".", "current_device", "(", ")", "\n", "ckpt", "=", "torch", ".", "load", "(", "ckpt_path", ",", "\n", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ".", "cuda", "(", "device", ")", ")", "\n", "epoch", "=", "ckpt", "[", "'epoch'", "]", "\n", "\n", "ckpt_model_dict", "=", "remove_prefix", "(", "ckpt", "[", "'state_dict'", "]", ",", "'module.'", ")", "\n", "check_keys", "(", "model", ",", "ckpt_model_dict", ")", "\n", "model", ".", "load_state_dict", "(", "ckpt_model_dict", ",", "strict", "=", "False", ")", "\n", "\n", "check_keys", "(", "optimizer", ",", "ckpt", "[", "'optimizer'", "]", ")", "\n", "optimizer", ".", "load_state_dict", "(", "ckpt", "[", "'optimizer'", "]", ")", "\n", "return", "model", ",", "optimizer", ",", "epoch", "\n", "", ""]], "home.repos.pwc.inspect_result.vision4robotics_udat.utils.average_meter.Meter.__init__": [[10, 14], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "val", ",", "avg", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "val", "=", "val", "\n", "self", ".", "avg", "=", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.utils.average_meter.Meter.__repr__": [[15, 18], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"{name}: {val:.6f} ({avg:.6f})\"", ".", "format", "(", "\n", "name", "=", "self", ".", "name", ",", "val", "=", "self", ".", "val", ",", "avg", "=", "self", ".", "avg", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.utils.average_meter.Meter.__format__": [[20, 22], ["average_meter.Meter.__repr__"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.models.GRL.GradientScalarLayer.__repr__"], ["", "def", "__format__", "(", "self", ",", "*", "tuples", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "__repr__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.utils.average_meter.AverageMeter.__init__": [[26, 29], ["average_meter.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.utils.average_meter.AverageMeter.reset"], ["def", "__init__", "(", "self", ",", "num", "=", "100", ")", ":", "\n", "        ", "self", ".", "num", "=", "num", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.utils.average_meter.AverageMeter.reset": [[30, 35], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "{", "}", "\n", "self", ".", "sum", "=", "{", "}", "\n", "self", ".", "count", "=", "{", "}", "\n", "self", ".", "history", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.utils.average_meter.AverageMeter.update": [[36, 66], ["average_meter.AverageMeter.val.update", "range", "float", "average_meter.AverageMeter.history[].append", "len", "range", "len"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.utils.average_meter.AverageMeter.update"], ["", "def", "update", "(", "self", ",", "batch", "=", "1", ",", "**", "kwargs", ")", ":", "\n", "        ", "val", "=", "{", "}", "\n", "for", "k", "in", "kwargs", ":", "\n", "            ", "val", "[", "k", "]", "=", "kwargs", "[", "k", "]", "/", "float", "(", "batch", ")", "\n", "", "self", ".", "val", ".", "update", "(", "val", ")", "\n", "for", "k", "in", "kwargs", ":", "\n", "            ", "if", "k", "not", "in", "self", ".", "sum", ":", "\n", "                ", "self", ".", "sum", "[", "k", "]", "=", "0", "\n", "self", ".", "count", "[", "k", "]", "=", "0", "\n", "self", ".", "history", "[", "k", "]", "=", "[", "]", "\n", "", "self", ".", "sum", "[", "k", "]", "+=", "kwargs", "[", "k", "]", "\n", "self", ".", "count", "[", "k", "]", "+=", "batch", "\n", "for", "_", "in", "range", "(", "batch", ")", ":", "\n", "                ", "self", ".", "history", "[", "k", "]", ".", "append", "(", "val", "[", "k", "]", ")", "\n", "\n", "", "if", "self", ".", "num", "<=", "0", ":", "\n", "# < 0, average all", "\n", "                ", "self", ".", "history", "[", "k", "]", "=", "[", "]", "\n", "\n", "# == 0: no average", "\n", "if", "self", ".", "num", "==", "0", ":", "\n", "                    ", "self", ".", "sum", "[", "k", "]", "=", "self", ".", "val", "[", "k", "]", "\n", "self", ".", "count", "[", "k", "]", "=", "1", "\n", "\n", "", "", "elif", "len", "(", "self", ".", "history", "[", "k", "]", ")", ">", "self", ".", "num", ":", "\n", "                ", "pop_num", "=", "len", "(", "self", ".", "history", "[", "k", "]", ")", "-", "self", ".", "num", "\n", "for", "_", "in", "range", "(", "pop_num", ")", ":", "\n", "                    ", "self", ".", "sum", "[", "k", "]", "-=", "self", ".", "history", "[", "k", "]", "[", "0", "]", "\n", "del", "self", ".", "history", "[", "k", "]", "[", "0", "]", "\n", "self", ".", "count", "[", "k", "]", "-=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.utils.average_meter.AverageMeter.__repr__": [[67, 72], ["average_meter.AverageMeter.format_str"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.utils.average_meter.AverageMeter.format_str"], ["", "", "", "", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "s", "=", "''", "\n", "for", "k", "in", "self", ".", "sum", ":", "\n", "            ", "s", "+=", "self", ".", "format_str", "(", "k", ")", "\n", "", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.utils.average_meter.AverageMeter.format_str": [[73, 78], ["float", "float"], "methods", ["None"], ["", "def", "format_str", "(", "self", ",", "attr", ")", ":", "\n", "        ", "return", "\"{name}: {val:.6f} ({avg:.6f}) \"", ".", "format", "(", "\n", "name", "=", "attr", ",", "\n", "val", "=", "float", "(", "self", ".", "val", "[", "attr", "]", ")", ",", "\n", "avg", "=", "float", "(", "self", ".", "sum", "[", "attr", "]", ")", "/", "self", ".", "count", "[", "attr", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.utils.average_meter.AverageMeter.__getattr__": [[79, 86], ["average_meter.Meter", "super().__getattr__", "print", "average_meter.Meter", "average_meter.AverageMeter.avg"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.utils.log_helper.Dummy.__getattr__", "home.repos.pwc.inspect_result.vision4robotics_udat.utils.average_meter.AverageMeter.avg"], ["", "def", "__getattr__", "(", "self", ",", "attr", ")", ":", "\n", "        ", "if", "attr", "in", "self", ".", "__dict__", ":", "\n", "            ", "return", "super", "(", "AverageMeter", ",", "self", ")", ".", "__getattr__", "(", "attr", ")", "\n", "", "if", "attr", "not", "in", "self", ".", "sum", ":", "\n", "            ", "print", "(", "\"invalid key '{}'\"", ".", "format", "(", "attr", ")", ")", "\n", "return", "Meter", "(", "attr", ",", "0", ",", "0", ")", "\n", "", "return", "Meter", "(", "attr", ",", "self", ".", "val", "[", "attr", "]", ",", "self", ".", "avg", "(", "attr", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.utils.average_meter.AverageMeter.avg": [[87, 89], ["float"], "methods", ["None"], ["", "def", "avg", "(", "self", ",", "attr", ")", ":", "\n", "        ", "return", "float", "(", "self", ".", "sum", "[", "attr", "]", ")", "/", "self", ".", "count", "[", "attr", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.utils.distributed.DistModule.__init__": [[32, 40], ["torch.Module.__init__", "distributed.get_world_size", "distributed.broadcast_params"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamban_tracker.SiamBANTracker.__init__", "home.repos.pwc.inspect_result.vision4robotics_udat.utils.distributed.get_world_size", "home.repos.pwc.inspect_result.vision4robotics_udat.utils.distributed.broadcast_params"], ["    ", "def", "__init__", "(", "self", ",", "module", ",", "bn_method", "=", "0", ")", ":", "\n", "        ", "super", "(", "DistModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "module", "=", "module", "\n", "self", ".", "bn_method", "=", "bn_method", "\n", "if", "get_world_size", "(", ")", ">", "1", ":", "\n", "            ", "broadcast_params", "(", "self", ".", "module", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "bn_method", "=", "0", "# single proccess", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.utils.distributed.DistModule.forward": [[41, 44], ["distributed.broadcast_buffers", "distributed.DistModule.module"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.utils.distributed.broadcast_buffers"], ["", "", "def", "forward", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "broadcast_buffers", "(", "self", ".", "module", ",", "self", ".", "bn_method", ")", "\n", "return", "self", ".", "module", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.utils.distributed.DistModule.train": [[45, 49], ["super().train", "distributed.DistModule.module.train"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.tools.train.train", "home.repos.pwc.inspect_result.vision4robotics_udat.tools.train.train"], ["", "def", "train", "(", "self", ",", "mode", "=", "True", ")", ":", "\n", "        ", "super", "(", "DistModule", ",", "self", ")", ".", "train", "(", "mode", ")", "\n", "self", ".", "module", ".", "train", "(", "mode", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.utils.distributed.average_reduce": [[21, 29], ["torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.all_reduce", "distributed.get_world_size", "distributed.get_world_size"], "function", ["home.repos.pwc.inspect_result.vision4robotics_udat.utils.distributed.get_world_size", "home.repos.pwc.inspect_result.vision4robotics_udat.utils.distributed.get_world_size"], ["def", "average_reduce", "(", "v", ")", ":", "\n", "    ", "if", "get_world_size", "(", ")", "==", "1", ":", "\n", "        ", "return", "v", "\n", "", "tensor", "=", "torch", ".", "cuda", ".", "FloatTensor", "(", "1", ")", "\n", "tensor", "[", "0", "]", "=", "v", "\n", "dist", ".", "all_reduce", "(", "tensor", ")", "\n", "v", "=", "tensor", "[", "0", "]", "/", "get_world_size", "(", ")", "\n", "return", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.utils.distributed.broadcast_params": [[51, 55], ["model.state_dict().values", "torch.broadcast", "model.state_dict"], "function", ["None"], ["", "", "def", "broadcast_params", "(", "model", ")", ":", "\n", "    ", "\"\"\" broadcast model parameters \"\"\"", "\n", "for", "p", "in", "model", ".", "state_dict", "(", ")", ".", "values", "(", ")", ":", "\n", "        ", "dist", ".", "broadcast", "(", "p", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.utils.distributed.broadcast_buffers": [[57, 72], ["distributed.get_world_size", "model._all_buffers", "torch.broadcast", "torch.all_reduce", "Exception"], "function", ["home.repos.pwc.inspect_result.vision4robotics_udat.utils.distributed.get_world_size"], ["", "", "def", "broadcast_buffers", "(", "model", ",", "method", "=", "0", ")", ":", "\n", "    ", "\"\"\" broadcast model buffers \"\"\"", "\n", "if", "method", "==", "0", ":", "\n", "        ", "return", "\n", "\n", "", "world_size", "=", "get_world_size", "(", ")", "\n", "\n", "for", "b", "in", "model", ".", "_all_buffers", "(", ")", ":", "\n", "        ", "if", "method", "==", "1", ":", "# broadcast from main proccess", "\n", "            ", "dist", ".", "broadcast", "(", "b", ",", "0", ")", "\n", "", "elif", "method", "==", "2", ":", "# average", "\n", "            ", "dist", ".", "all_reduce", "(", "b", ")", "\n", "b", "/=", "world_size", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "'Invalid buffer broadcast code {}'", ".", "format", "(", "method", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.utils.distributed._dist_init": [[77, 90], ["torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.init_process_group", "torch.get_world_size"], "function", ["home.repos.pwc.inspect_result.vision4robotics_udat.utils.distributed.get_world_size"], ["def", "_dist_init", "(", ")", ":", "\n", "    ", "'''\n    if guess right:\n        ntasks: world_size (process num)\n        proc_id: rank\n    '''", "\n", "# rank = int(os.environ['RANK'])", "\n", "rank", "=", "0", "\n", "num_gpus", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "rank", "%", "num_gpus", ")", "\n", "dist", ".", "init_process_group", "(", "backend", "=", "'nccl'", ")", "\n", "world_size", "=", "dist", ".", "get_world_size", "(", ")", "\n", "return", "rank", ",", "world_size", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.utils.distributed._get_local_ip": [[92, 100], ["socket.socket", "socket.socket.connect", "socket.socket.close", "socket.socket.getsockname"], "function", ["None"], ["", "def", "_get_local_ip", "(", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "s", "=", "socket", ".", "socket", "(", "socket", ".", "AF_INET", ",", "socket", ".", "SOCK_DGRAM", ")", "\n", "s", ".", "connect", "(", "(", "'8.8.8.8'", ",", "80", ")", ")", "\n", "ip", "=", "s", ".", "getsockname", "(", ")", "[", "0", "]", "\n", "", "finally", ":", "\n", "        ", "s", ".", "close", "(", ")", "\n", "", "return", "ip", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.utils.distributed.dist_init": [[102, 116], ["None"], "function", ["None"], ["", "def", "dist_init", "(", ")", ":", "\n", "    ", "global", "rank", ",", "world_size", ",", "inited", "\n", "# try:", "\n", "#     rank, world_size = _dist_init()", "\n", "# except RuntimeError as e:", "\n", "#     if 'public' in e.args[0]:", "\n", "#         logger.info(e)", "\n", "#         logger.info('Warning: use single process')", "\n", "#         rank, world_size = 0, 1", "\n", "#     else:", "\n", "#         raise RuntimeError(*e.args)", "\n", "rank", ",", "world_size", "=", "0", ",", "1", "\n", "inited", "=", "True", "\n", "return", "rank", ",", "world_size", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.utils.distributed.get_rank": [[118, 122], ["Exception"], "function", ["None"], ["", "def", "get_rank", "(", ")", ":", "\n", "    ", "if", "not", "inited", ":", "\n", "        ", "raise", "(", "Exception", "(", "'dist not inited'", ")", ")", "\n", "", "return", "rank", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.utils.distributed.get_world_size": [[124, 128], ["Exception"], "function", ["None"], ["", "def", "get_world_size", "(", ")", ":", "\n", "    ", "if", "not", "inited", ":", "\n", "        ", "raise", "(", "Exception", "(", "'dist not inited'", ")", ")", "\n", "", "return", "world_size", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.utils.distributed.reduce_gradients": [[130, 142], ["siamban.utils.log_helper.log_once", "distributed.get_world_size", "model.parameters", "torch.all_reduce", "distributed.get_world_size"], "function", ["home.repos.pwc.inspect_result.vision4robotics_udat.utils.log_helper.log_once", "home.repos.pwc.inspect_result.vision4robotics_udat.utils.distributed.get_world_size", "home.repos.pwc.inspect_result.vision4robotics_udat.utils.distributed.get_world_size"], ["", "def", "reduce_gradients", "(", "model", ",", "_type", "=", "'sum'", ")", ":", "\n", "    ", "types", "=", "[", "'sum'", ",", "'avg'", "]", "\n", "assert", "_type", "in", "types", ",", "'gradients method must be in \"{}\"'", ".", "format", "(", "types", ")", "\n", "log_once", "(", "\"gradients method is {}\"", ".", "format", "(", "_type", ")", ")", "\n", "if", "get_world_size", "(", ")", ">", "1", ":", "\n", "        ", "for", "param", "in", "model", ".", "parameters", "(", ")", ":", "\n", "            ", "if", "param", ".", "requires_grad", ":", "\n", "                ", "dist", ".", "all_reduce", "(", "param", ".", "grad", ".", "data", ")", "\n", "if", "_type", "==", "'avg'", ":", "\n", "                    ", "param", ".", "grad", ".", "data", "/=", "get_world_size", "(", ")", "\n", "", "", "", "", "else", ":", "\n", "        ", "return", "None", "\n", "", "", ""]], "home.repos.pwc.inspect_result.vision4robotics_udat.utils.xcorr.xcorr_slow": [[12, 26], ["range", "torch.cat", "torch.cat", "x.size", "px.view.view", "pk.view.view", "torch.conv2d", "torch.cat.append", "px.view.size", "px.view.size", "px.view.size", "px.view.size", "pk.view.size", "pk.view.size"], "function", ["None"], ["def", "xcorr_slow", "(", "x", ",", "kernel", ")", ":", "\n", "    ", "\"\"\"for loop to calculate cross correlation, slow version\n    \"\"\"", "\n", "batch", "=", "x", ".", "size", "(", ")", "[", "0", "]", "\n", "out", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "batch", ")", ":", "\n", "        ", "px", "=", "x", "[", "i", "]", "\n", "pk", "=", "kernel", "[", "i", "]", "\n", "px", "=", "px", ".", "view", "(", "1", ",", "px", ".", "size", "(", ")", "[", "0", "]", ",", "px", ".", "size", "(", ")", "[", "1", "]", ",", "px", ".", "size", "(", ")", "[", "2", "]", ")", "\n", "pk", "=", "pk", ".", "view", "(", "-", "1", ",", "px", ".", "size", "(", ")", "[", "1", "]", ",", "pk", ".", "size", "(", ")", "[", "1", "]", ",", "pk", ".", "size", "(", ")", "[", "2", "]", ")", "\n", "po", "=", "F", ".", "conv2d", "(", "px", ",", "pk", ")", "\n", "out", ".", "append", "(", "po", ")", "\n", "", "out", "=", "torch", ".", "cat", "(", "out", ",", "0", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.utils.xcorr.xcorr_fast": [[28, 37], ["kernel.view", "x.view", "torch.conv2d", "po.view.view", "kernel.size", "x.size", "kernel.size", "kernel.size", "x.size", "x.size", "po.view.size", "po.view.size"], "function", ["None"], ["", "def", "xcorr_fast", "(", "x", ",", "kernel", ")", ":", "\n", "    ", "\"\"\"group conv2d to calculate cross correlation, fast version\n    \"\"\"", "\n", "batch", "=", "kernel", ".", "size", "(", ")", "[", "0", "]", "\n", "pk", "=", "kernel", ".", "view", "(", "-", "1", ",", "x", ".", "size", "(", ")", "[", "1", "]", ",", "kernel", ".", "size", "(", ")", "[", "2", "]", ",", "kernel", ".", "size", "(", ")", "[", "3", "]", ")", "\n", "px", "=", "x", ".", "view", "(", "1", ",", "-", "1", ",", "x", ".", "size", "(", ")", "[", "2", "]", ",", "x", ".", "size", "(", ")", "[", "3", "]", ")", "\n", "po", "=", "F", ".", "conv2d", "(", "px", ",", "pk", ",", "groups", "=", "batch", ")", "\n", "po", "=", "po", ".", "view", "(", "batch", ",", "-", "1", ",", "po", ".", "size", "(", ")", "[", "2", "]", ",", "po", ".", "size", "(", ")", "[", "3", "]", ")", "\n", "return", "po", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.utils.xcorr.xcorr_depthwise": [[39, 49], ["kernel.view.size", "kernel.view.size", "x.view.view", "kernel.view.view", "torch.conv2d", "out.view.view", "x.view.size", "x.view.size", "kernel.view.size", "kernel.view.size", "out.view.size", "out.view.size"], "function", ["None"], ["", "def", "xcorr_depthwise", "(", "x", ",", "kernel", ")", ":", "\n", "    ", "\"\"\"depthwise cross correlation\n    \"\"\"", "\n", "batch", "=", "kernel", ".", "size", "(", "0", ")", "\n", "channel", "=", "kernel", ".", "size", "(", "1", ")", "\n", "x", "=", "x", ".", "view", "(", "1", ",", "batch", "*", "channel", ",", "x", ".", "size", "(", "2", ")", ",", "x", ".", "size", "(", "3", ")", ")", "\n", "kernel", "=", "kernel", ".", "view", "(", "batch", "*", "channel", ",", "1", ",", "kernel", ".", "size", "(", "2", ")", ",", "kernel", ".", "size", "(", "3", ")", ")", "\n", "out", "=", "F", ".", "conv2d", "(", "x", ",", "kernel", ",", "groups", "=", "batch", "*", "channel", ")", "\n", "out", "=", "out", ".", "view", "(", "batch", ",", "channel", ",", "out", ".", "size", "(", "2", ")", ",", "out", ".", "size", "(", "3", ")", ")", "\n", "return", "out", "\n", "", ""]], "home.repos.pwc.inspect_result.vision4robotics_udat.utils.log_helper.Filter.__init__": [[26, 28], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "flag", ")", ":", "\n", "        ", "self", ".", "flag", "=", "flag", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.utils.log_helper.Filter.filter": [[29, 31], ["None"], "methods", ["None"], ["", "def", "filter", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "flag", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.utils.log_helper.Dummy.__init__": [[34, 36], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "*", "arg", ",", "**", "kwargs", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.utils.log_helper.Dummy.__getattr__": [[37, 40], ["None"], "methods", ["None"], ["", "def", "__getattr__", "(", "self", ",", "arg", ")", ":", "\n", "        ", "def", "dummy", "(", "*", "args", ",", "**", "kwargs", ")", ":", "pass", "\n", "return", "dummy", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.utils.log_helper.LogOnce.__init__": [[133, 136], ["set", "log_helper.init_log"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.utils.log_helper.init_log"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "logged", "=", "set", "(", ")", "\n", "self", ".", "logger", "=", "init_log", "(", "'log_once'", ",", "format_func", "=", "get_format_custom", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.utils.log_helper.LogOnce.log": [[137, 146], ["log_helper.find_caller", "log_helper.LogOnce.logged.add", "log_helper.LogOnce.logger.info"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.utils.log_helper.find_caller"], ["", "def", "log", "(", "self", ",", "strings", ")", ":", "\n", "        ", "fn", ",", "lineno", ",", "caller", "=", "find_caller", "(", ")", "\n", "key", "=", "(", "fn", ",", "lineno", ",", "caller", ",", "strings", ")", "\n", "if", "key", "in", "self", ".", "logged", ":", "\n", "            ", "return", "\n", "", "self", ".", "logged", ".", "add", "(", "key", ")", "\n", "message", "=", "\"{filename:s}<{caller}>#{lineno:3d}] {strings}\"", ".", "format", "(", "\n", "filename", "=", "fn", ",", "lineno", "=", "lineno", ",", "strings", "=", "strings", ",", "caller", "=", "caller", ")", "\n", "self", ".", "logger", ".", "info", "(", "message", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.utils.log_helper.get_format": [[42, 53], ["logging.Formatter", "int", "logger.addFilter", "log_helper.Filter"], "function", ["None"], ["", "", "def", "get_format", "(", "logger", ",", "level", ")", ":", "\n", "    ", "if", "'RANK'", "in", "os", ".", "environ", ":", "\n", "        ", "rank", "=", "int", "(", "os", ".", "environ", "[", "'RANK'", "]", ")", "\n", "\n", "if", "level", "==", "logging", ".", "INFO", ":", "\n", "            ", "logger", ".", "addFilter", "(", "Filter", "(", "rank", "==", "0", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "rank", "=", "0", "\n", "", "format_str", "=", "'[%(asctime)s-rk{}-%(filename)s#%(lineno)3d] %(message)s'", ".", "format", "(", "rank", ")", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "format_str", ")", "\n", "return", "formatter", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.utils.log_helper.get_format_custom": [[55, 65], ["logging.Formatter", "int", "logger.addFilter", "log_helper.Filter"], "function", ["None"], ["", "def", "get_format_custom", "(", "logger", ",", "level", ")", ":", "\n", "    ", "if", "'RANK'", "in", "os", ".", "environ", ":", "\n", "        ", "rank", "=", "int", "(", "os", ".", "environ", "[", "'RANK'", "]", ")", "\n", "if", "level", "==", "logging", ".", "INFO", ":", "\n", "            ", "logger", ".", "addFilter", "(", "Filter", "(", "rank", "==", "0", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "rank", "=", "0", "\n", "", "format_str", "=", "'[%(asctime)s-rk{}-%(message)s'", ".", "format", "(", "rank", ")", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "format_str", ")", "\n", "return", "formatter", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.utils.log_helper.init_log": [[67, 79], ["logs.add", "logging.getLogger", "logging.getLogger.setLevel", "logging.StreamHandler", "logging.StreamHandler.setLevel", "format_func", "logging.StreamHandler.setFormatter", "logging.getLogger.addHandler"], "function", ["None"], ["", "def", "init_log", "(", "name", ",", "level", "=", "logging", ".", "INFO", ",", "format_func", "=", "get_format", ")", ":", "\n", "    ", "if", "(", "name", ",", "level", ")", "in", "logs", ":", "\n", "        ", "return", "\n", "", "logs", ".", "add", "(", "(", "name", ",", "level", ")", ")", "\n", "logger", "=", "logging", ".", "getLogger", "(", "name", ")", "\n", "logger", ".", "setLevel", "(", "level", ")", "\n", "ch", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "ch", ".", "setLevel", "(", "level", ")", "\n", "formatter", "=", "format_func", "(", "logger", ",", "level", ")", "\n", "ch", ".", "setFormatter", "(", "formatter", ")", "\n", "logger", ".", "addHandler", "(", "ch", ")", "\n", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.utils.log_helper.add_file_handler": [[81, 86], ["logging.getLogger", "logging.FileHandler", "logging.FileHandler.setFormatter", "logging.getLogger.addHandler", "log_helper.get_format"], "function", ["home.repos.pwc.inspect_result.vision4robotics_udat.utils.log_helper.get_format"], ["", "def", "add_file_handler", "(", "name", ",", "log_file", ",", "level", "=", "logging", ".", "INFO", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "name", ")", "\n", "fh", "=", "logging", ".", "FileHandler", "(", "log_file", ")", "\n", "fh", ".", "setFormatter", "(", "get_format", "(", "logger", ",", "level", ")", ")", "\n", "logger", ".", "addHandler", "(", "fh", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.utils.log_helper.print_speed": [[91, 106], ["logging.getLogger", "math.floor", "math.floor", "math.floor", "logging.getLogger.info"], "function", ["None"], ["def", "print_speed", "(", "i", ",", "i_time", ",", "n", ")", ":", "\n", "    ", "\"\"\"print_speed(index, index_time, total_iteration)\"\"\"", "\n", "logger", "=", "logging", ".", "getLogger", "(", "'global'", ")", "\n", "average_time", "=", "i_time", "\n", "remaining_time", "=", "(", "n", "-", "i", ")", "*", "average_time", "\n", "remaining_day", "=", "math", ".", "floor", "(", "remaining_time", "/", "86400", ")", "\n", "remaining_hour", "=", "math", ".", "floor", "(", "remaining_time", "/", "3600", "-", "\n", "remaining_day", "*", "24", ")", "\n", "remaining_min", "=", "math", ".", "floor", "(", "remaining_time", "/", "60", "-", "\n", "remaining_day", "*", "1440", "-", "\n", "remaining_hour", "*", "60", ")", "\n", "logger", ".", "info", "(", "'Progress: %d / %d [%d%%], Speed: %.3f s/iter, ETA %d:%02d:%02d (D:H:M)\\n'", "%", "\n", "(", "i", ",", "n", ",", "i", "/", "n", "*", "100", ",", "\n", "average_time", ",", "\n", "remaining_day", ",", "remaining_hour", ",", "remaining_min", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.utils.log_helper.find_caller": [[108, 130], ["log_helper.find_caller.current_frame"], "function", ["None"], ["", "def", "find_caller", "(", ")", ":", "\n", "    ", "def", "current_frame", "(", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "raise", "Exception", "\n", "", "except", ":", "\n", "            ", "return", "sys", ".", "exc_info", "(", ")", "[", "2", "]", ".", "tb_frame", ".", "f_back", "\n", "\n", "", "", "f", "=", "current_frame", "(", ")", "\n", "if", "f", "is", "not", "None", ":", "\n", "        ", "f", "=", "f", ".", "f_back", "\n", "", "rv", "=", "\"(unknown file)\"", ",", "0", ",", "\"(unknown function)\"", "\n", "while", "hasattr", "(", "f", ",", "\"f_code\"", ")", ":", "\n", "        ", "co", "=", "f", ".", "f_code", "\n", "filename", "=", "os", ".", "path", ".", "normcase", "(", "co", ".", "co_filename", ")", "\n", "rv", "=", "(", "co", ".", "co_filename", ",", "f", ".", "f_lineno", ",", "co", ".", "co_name", ")", "\n", "if", "filename", "==", "_srcfile", ":", "\n", "            ", "f", "=", "f", ".", "f_back", "\n", "continue", "\n", "", "break", "\n", "", "rv", "=", "list", "(", "rv", ")", "\n", "rv", "[", "0", "]", "=", "os", ".", "path", ".", "basename", "(", "rv", "[", "0", "]", ")", "\n", "return", "rv", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.utils.log_helper.log_once": [[151, 153], ["once_logger.log"], "function", ["home.repos.pwc.inspect_result.vision4robotics_udat.datasets.dataset.SubDataset.log"], ["def", "log_once", "(", "strings", ")", ":", "\n", "    ", "once_logger", ".", "log", "(", "strings", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.utils.log_helper.main": [[155, 168], ["enumerate", "str", "log_helper.init_log", "logging.getLogger", "print", "logging.getLogger.debug", "logging.getLogger.info", "logging.getLogger.warning", "logging.getLogger.error", "logging.getLogger.critical"], "function", ["home.repos.pwc.inspect_result.vision4robotics_udat.utils.log_helper.init_log"], ["", "def", "main", "(", ")", ":", "\n", "    ", "for", "i", ",", "lvl", "in", "enumerate", "(", "[", "logging", ".", "DEBUG", ",", "logging", ".", "INFO", ",", "\n", "logging", ".", "WARNING", ",", "logging", ".", "ERROR", ",", "\n", "logging", ".", "CRITICAL", "]", ")", ":", "\n", "        ", "log_name", "=", "str", "(", "lvl", ")", "\n", "init_log", "(", "log_name", ",", "lvl", ")", "\n", "logger", "=", "logging", ".", "getLogger", "(", "log_name", ")", "\n", "print", "(", "'****cur lvl:{}'", ".", "format", "(", "lvl", ")", ")", "\n", "logger", ".", "debug", "(", "'debug'", ")", "\n", "logger", ".", "info", "(", "'info'", ")", "\n", "logger", ".", "warning", "(", "'warning'", ")", "\n", "logger", ".", "error", "(", "'error'", ")", "\n", "logger", ".", "critical", "(", "'critiacal'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.utils.bbox.corner2center": [[19, 36], ["isinstance", "Center"], "function", ["None"], ["def", "corner2center", "(", "corner", ")", ":", "\n", "    ", "\"\"\" convert (x1, y1, x2, y2) to (cx, cy, w, h)\n    Args:\n        conrner: Corner or np.array (4*N)\n    Return:\n        Center or np.array (4 * N)\n    \"\"\"", "\n", "if", "isinstance", "(", "corner", ",", "Corner", ")", ":", "\n", "        ", "x1", ",", "y1", ",", "x2", ",", "y2", "=", "corner", "\n", "return", "Center", "(", "(", "x1", "+", "x2", ")", "*", "0.5", ",", "(", "y1", "+", "y2", ")", "*", "0.5", ",", "(", "x2", "-", "x1", ")", ",", "(", "y2", "-", "y1", ")", ")", "\n", "", "else", ":", "\n", "        ", "x1", ",", "y1", ",", "x2", ",", "y2", "=", "corner", "[", "0", "]", ",", "corner", "[", "1", "]", ",", "corner", "[", "2", "]", ",", "corner", "[", "3", "]", "\n", "x", "=", "(", "x1", "+", "x2", ")", "*", "0.5", "\n", "y", "=", "(", "y1", "+", "y2", ")", "*", "0.5", "\n", "w", "=", "x2", "-", "x1", "\n", "h", "=", "y2", "-", "y1", "\n", "return", "x", ",", "y", ",", "w", ",", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.utils.bbox.center2corner": [[38, 55], ["isinstance", "Corner"], "function", ["None"], ["", "", "def", "center2corner", "(", "center", ")", ":", "\n", "    ", "\"\"\" convert (cx, cy, w, h) to (x1, y1, x2, y2)\n    Args:\n        center: Center or np.array (4 * N)\n    Return:\n        center or np.array (4 * N)\n    \"\"\"", "\n", "if", "isinstance", "(", "center", ",", "Center", ")", ":", "\n", "        ", "x", ",", "y", ",", "w", ",", "h", "=", "center", "\n", "return", "Corner", "(", "x", "-", "w", "*", "0.5", ",", "y", "-", "h", "*", "0.5", ",", "x", "+", "w", "*", "0.5", ",", "y", "+", "h", "*", "0.5", ")", "\n", "", "else", ":", "\n", "        ", "x", ",", "y", ",", "w", ",", "h", "=", "center", "[", "0", "]", ",", "center", "[", "1", "]", ",", "center", "[", "2", "]", ",", "center", "[", "3", "]", "\n", "x1", "=", "x", "-", "w", "*", "0.5", "\n", "y1", "=", "y", "-", "h", "*", "0.5", "\n", "x2", "=", "x", "+", "w", "*", "0.5", "\n", "y2", "=", "y", "+", "h", "*", "0.5", "\n", "return", "x1", ",", "y1", ",", "x2", ",", "y2", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.utils.bbox.IoU": [[57, 82], ["numpy.maximum", "numpy.maximum", "numpy.minimum", "numpy.minimum", "numpy.maximum", "numpy.maximum"], "function", ["None"], ["", "", "def", "IoU", "(", "rect1", ",", "rect2", ")", ":", "\n", "    ", "\"\"\" caculate interection over union\n    Args:\n        rect1: (x1, y1, x2, y2)\n        rect2: (x1, y1, x2, y2)\n    Returns:\n        iou\n    \"\"\"", "\n", "# overlap", "\n", "x1", ",", "y1", ",", "x2", ",", "y2", "=", "rect1", "[", "0", "]", ",", "rect1", "[", "1", "]", ",", "rect1", "[", "2", "]", ",", "rect1", "[", "3", "]", "\n", "tx1", ",", "ty1", ",", "tx2", ",", "ty2", "=", "rect2", "[", "0", "]", ",", "rect2", "[", "1", "]", ",", "rect2", "[", "2", "]", ",", "rect2", "[", "3", "]", "\n", "\n", "xx1", "=", "np", ".", "maximum", "(", "tx1", ",", "x1", ")", "\n", "yy1", "=", "np", ".", "maximum", "(", "ty1", ",", "y1", ")", "\n", "xx2", "=", "np", ".", "minimum", "(", "tx2", ",", "x2", ")", "\n", "yy2", "=", "np", ".", "minimum", "(", "ty2", ",", "y2", ")", "\n", "\n", "ww", "=", "np", ".", "maximum", "(", "0", ",", "xx2", "-", "xx1", ")", "\n", "hh", "=", "np", ".", "maximum", "(", "0", ",", "yy2", "-", "yy1", ")", "\n", "\n", "area", "=", "(", "x2", "-", "x1", ")", "*", "(", "y2", "-", "y1", ")", "\n", "target_a", "=", "(", "tx2", "-", "tx1", ")", "*", "(", "ty2", "-", "ty1", ")", "\n", "inter", "=", "ww", "*", "hh", "\n", "iou", "=", "inter", "/", "(", "area", "+", "target_a", "-", "inter", ")", "\n", "return", "iou", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.utils.bbox.cxy_wh_2_rect": [[84, 88], ["numpy.array"], "function", ["None"], ["", "def", "cxy_wh_2_rect", "(", "pos", ",", "sz", ")", ":", "\n", "    ", "\"\"\" convert (cx, cy, w, h) to (x1, y1, w, h), 0-index\n    \"\"\"", "\n", "return", "np", ".", "array", "(", "[", "pos", "[", "0", "]", "-", "sz", "[", "0", "]", "/", "2", ",", "pos", "[", "1", "]", "-", "sz", "[", "1", "]", "/", "2", ",", "sz", "[", "0", "]", ",", "sz", "[", "1", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.utils.bbox.rect_2_cxy_wh": [[90, 95], ["numpy.array", "numpy.array"], "function", ["None"], ["", "def", "rect_2_cxy_wh", "(", "rect", ")", ":", "\n", "    ", "\"\"\" convert (x1, y1, w, h) to (cx, cy, w, h), 0-index\n    \"\"\"", "\n", "return", "np", ".", "array", "(", "[", "rect", "[", "0", "]", "+", "rect", "[", "2", "]", "/", "2", ",", "rect", "[", "1", "]", "+", "rect", "[", "3", "]", "/", "2", "]", ")", ",", "np", ".", "array", "(", "[", "rect", "[", "2", "]", ",", "rect", "[", "3", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.utils.bbox.cxy_wh_2_rect1": [[97, 101], ["numpy.array"], "function", ["None"], ["", "def", "cxy_wh_2_rect1", "(", "pos", ",", "sz", ")", ":", "\n", "    ", "\"\"\" convert (cx, cy, w, h) to (x1, y1, w, h), 1-index\n    \"\"\"", "\n", "return", "np", ".", "array", "(", "[", "pos", "[", "0", "]", "-", "sz", "[", "0", "]", "/", "2", "+", "1", ",", "pos", "[", "1", "]", "-", "sz", "[", "1", "]", "/", "2", "+", "1", ",", "sz", "[", "0", "]", ",", "sz", "[", "1", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.utils.bbox.rect1_2_cxy_wh": [[103, 108], ["numpy.array", "numpy.array"], "function", ["None"], ["", "def", "rect1_2_cxy_wh", "(", "rect", ")", ":", "\n", "    ", "\"\"\" convert (x1, y1, w, h) to (cx, cy, w, h), 1-index\n    \"\"\"", "\n", "return", "np", ".", "array", "(", "[", "rect", "[", "0", "]", "+", "rect", "[", "2", "]", "/", "2", "-", "1", ",", "rect", "[", "1", "]", "+", "rect", "[", "3", "]", "/", "2", "-", "1", "]", ")", ",", "np", ".", "array", "(", "[", "rect", "[", "2", "]", ",", "rect", "[", "3", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.utils.bbox.get_axis_aligned_bbox": [[110, 135], ["numpy.mean", "numpy.mean", "min", "max", "min", "max", "numpy.sqrt", "numpy.linalg.norm", "numpy.linalg.norm"], "function", ["None"], ["", "def", "get_axis_aligned_bbox", "(", "region", ")", ":", "\n", "    ", "\"\"\" convert region to (cx, cy, w, h) that represent by axis aligned box\n    \"\"\"", "\n", "nv", "=", "region", ".", "size", "\n", "if", "nv", "==", "8", ":", "\n", "        ", "cx", "=", "np", ".", "mean", "(", "region", "[", "0", ":", ":", "2", "]", ")", "\n", "cy", "=", "np", ".", "mean", "(", "region", "[", "1", ":", ":", "2", "]", ")", "\n", "x1", "=", "min", "(", "region", "[", "0", ":", ":", "2", "]", ")", "\n", "x2", "=", "max", "(", "region", "[", "0", ":", ":", "2", "]", ")", "\n", "y1", "=", "min", "(", "region", "[", "1", ":", ":", "2", "]", ")", "\n", "y2", "=", "max", "(", "region", "[", "1", ":", ":", "2", "]", ")", "\n", "A1", "=", "np", ".", "linalg", ".", "norm", "(", "region", "[", "0", ":", "2", "]", "-", "region", "[", "2", ":", "4", "]", ")", "*", "np", ".", "linalg", ".", "norm", "(", "region", "[", "2", ":", "4", "]", "-", "region", "[", "4", ":", "6", "]", ")", "\n", "A2", "=", "(", "x2", "-", "x1", ")", "*", "(", "y2", "-", "y1", ")", "\n", "s", "=", "np", ".", "sqrt", "(", "A1", "/", "A2", ")", "\n", "w", "=", "s", "*", "(", "x2", "-", "x1", ")", "+", "1", "\n", "h", "=", "s", "*", "(", "y2", "-", "y1", ")", "+", "1", "\n", "", "else", ":", "\n", "        ", "x", "=", "region", "[", "0", "]", "\n", "y", "=", "region", "[", "1", "]", "\n", "w", "=", "region", "[", "2", "]", "\n", "h", "=", "region", "[", "3", "]", "\n", "cx", "=", "x", "+", "w", "/", "2", "\n", "cy", "=", "y", "+", "h", "/", "2", "\n", "", "return", "cx", ",", "cy", ",", "w", ",", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.utils.bbox.get_min_max_bbox": [[138, 159], ["numpy.mean", "numpy.mean", "min", "max", "min", "max"], "function", ["None"], ["    ", "\"\"\" convert region to (cx, cy, w, h) that represent by mim-max box\n    \"\"\"", "\n", "nv", "=", "region", ".", "size", "\n", "if", "nv", "==", "8", ":", "\n", "        ", "cx", "=", "np", ".", "mean", "(", "region", "[", "0", ":", ":", "2", "]", ")", "\n", "cy", "=", "np", ".", "mean", "(", "region", "[", "1", ":", ":", "2", "]", ")", "\n", "x1", "=", "min", "(", "region", "[", "0", ":", ":", "2", "]", ")", "\n", "x2", "=", "max", "(", "region", "[", "0", ":", ":", "2", "]", ")", "\n", "y1", "=", "min", "(", "region", "[", "1", ":", ":", "2", "]", ")", "\n", "y2", "=", "max", "(", "region", "[", "1", ":", ":", "2", "]", ")", "\n", "w", "=", "x2", "-", "x1", "\n", "h", "=", "y2", "-", "y1", "\n", "", "else", ":", "\n", "        ", "x", "=", "region", "[", "0", "]", "\n", "y", "=", "region", "[", "1", "]", "\n", "w", "=", "region", "[", "2", "]", "\n", "h", "=", "region", "[", "3", "]", "\n", "cx", "=", "x", "+", "w", "/", "2", "\n", "cy", "=", "y", "+", "h", "/", "2", "\n", "", "return", "cx", ",", "cy", ",", "w", ",", "h", "\n", "", ""]], "home.repos.pwc.inspect_result.vision4robotics_udat.utils.misc._exec": [[16, 19], ["os.popen", "os.popen.read().strip", "os.popen.read"], "function", ["None"], ["\n", "\n", "def", "_exec", "(", "cmd", ")", ":", "\n", "    ", "f", "=", "os", ".", "popen", "(", "cmd", ",", "'r'", ",", "1", ")", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.utils.misc._bold": [[21, 23], ["None"], "function", ["None"], ["\n", "\n", "", "def", "_bold", "(", "s", ")", ":", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.utils.misc._color": [[25, 27], ["None"], "function", ["None"], ["\n", "\n", "", "def", "_color", "(", "s", ")", ":", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.utils.misc._describe": [[29, 49], ["model.named_parameters", "model.named_children", "lines.append", "lines.append", "misc._describe", "misc._color", "misc._color", "len"], "function", ["home.repos.pwc.inspect_result.vision4robotics_udat.utils.misc._describe", "home.repos.pwc.inspect_result.vision4robotics_udat.utils.misc._color", "home.repos.pwc.inspect_result.vision4robotics_udat.utils.misc._color"], ["    ", "return", "\"{}{}{}\"", ".", "format", "(", "Fore", ".", "RED", ",", "s", ",", "Style", ".", "RESET_ALL", ")", "\n", "\n", "\n", "", "def", "_describe", "(", "model", ",", "lines", "=", "None", ",", "spaces", "=", "0", ")", ":", "\n", "    ", "head", "=", "\" \"", "*", "spaces", "\n", "for", "name", ",", "p", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "        ", "if", "'.'", "in", "name", ":", "\n", "            ", "continue", "\n", "", "if", "p", ".", "requires_grad", ":", "\n", "            ", "name", "=", "_color", "(", "name", ")", "\n", "", "line", "=", "\"{head}- {name}\"", ".", "format", "(", "head", "=", "head", ",", "name", "=", "name", ")", "\n", "lines", ".", "append", "(", "line", ")", "\n", "\n", "", "for", "name", ",", "m", "in", "model", ".", "named_children", "(", ")", ":", "\n", "        ", "space_num", "=", "len", "(", "name", ")", "+", "spaces", "+", "1", "\n", "if", "m", ".", "training", ":", "\n", "            ", "name", "=", "_color", "(", "name", ")", "\n", "", "line", "=", "\"{head}.{name} ({type})\"", ".", "format", "(", "\n", "head", "=", "head", ",", "\n", "name", "=", "name", ",", "\n", "type", "=", "m", ".", "__class__", ".", "__name__", ")", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.utils.misc.commit": [[51, 58], ["os.path.abspath", "misc._exec", "misc._exec", "os.path.join", "os.path.dirname"], "function", ["home.repos.pwc.inspect_result.vision4robotics_udat.utils.misc._exec", "home.repos.pwc.inspect_result.vision4robotics_udat.utils.misc._exec"], ["_describe", "(", "m", ",", "lines", ",", "space_num", ")", "\n", "\n", "\n", "", "", "def", "commit", "(", ")", ":", "\n", "    ", "root", "=", "os", ".", "path", ".", "abspath", "(", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "__file__", ")", ",", "'../../'", ")", ")", "\n", "cmd", "=", "\"cd {}; git log | head -n1 | awk '{{print $2}}'\"", ".", "format", "(", "root", ")", "\n", "commit", "=", "_exec", "(", "cmd", ")", "\n", "cmd", "=", "\"cd {}; git log --oneline | head -n1\"", ".", "format", "(", "root", ")", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.utils.misc.describe": [[60, 68], ["misc._describe", "lines.append", "len"], "function", ["home.repos.pwc.inspect_result.vision4robotics_udat.utils.misc._describe"], ["return", "\"commit : {}\\n  log  : {}\"", ".", "format", "(", "commit", ",", "commit_log", ")", "\n", "\n", "\n", "", "def", "describe", "(", "net", ",", "name", "=", "None", ")", ":", "\n", "    ", "num", "=", "0", "\n", "lines", "=", "[", "]", "\n", "if", "name", "is", "not", "None", ":", "\n", "        ", "lines", ".", "append", "(", "name", ")", "\n", "num", "=", "len", "(", "name", ")", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.utils.misc.bbox_clip": [[73, 76], ["max", "min"], "function", ["None"], ["", "def", "bbox_clip", "(", "x", ",", "min_value", ",", "max_value", ")", ":", "\n", "    ", "new_x", "=", "max", "(", "min_value", ",", "min", "(", "x", ",", "max_value", ")", ")", "\n", "return", "new_x", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.utils.lr_scheduler.LRScheduler.__init__": [[17, 21], ["torch.optim.lr_scheduler._LRScheduler.__init__", "Exception"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamban_tracker.SiamBANTracker.__init__"], ["    ", "def", "__init__", "(", "self", ",", "optimizer", ",", "last_epoch", "=", "-", "1", ")", ":", "\n", "        ", "if", "'lr_spaces'", "not", "in", "self", ".", "__dict__", ":", "\n", "            ", "raise", "Exception", "(", "'lr_spaces must be set in \"LRSchduler\"'", ")", "\n", "", "super", "(", "LRScheduler", ",", "self", ")", ".", "__init__", "(", "optimizer", ",", "last_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.utils.lr_scheduler.LRScheduler.get_cur_lr": [[22, 24], ["None"], "methods", ["None"], ["", "def", "get_cur_lr", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "lr_spaces", "[", "self", ".", "last_epoch", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.utils.lr_scheduler.LRScheduler.get_lr": [[25, 29], ["None"], "methods", ["None"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "epoch", "=", "self", ".", "last_epoch", "\n", "return", "[", "self", ".", "lr_spaces", "[", "epoch", "]", "*", "pg", "[", "'initial_lr'", "]", "/", "self", ".", "start_lr", "\n", "for", "pg", "in", "self", ".", "optimizer", ".", "param_groups", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.utils.lr_scheduler.LRScheduler.__repr__": [[30, 33], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"({}) lr spaces: \\n{}\"", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ",", "\n", "self", ".", "lr_spaces", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.utils.lr_scheduler.LogScheduler.__init__": [[36, 46], ["numpy.logspace", "lr_scheduler.LRScheduler.__init__", "math.log10", "math.log10"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamban_tracker.SiamBANTracker.__init__"], ["    ", "def", "__init__", "(", "self", ",", "optimizer", ",", "start_lr", "=", "0.03", ",", "end_lr", "=", "5e-4", ",", "\n", "epochs", "=", "50", ",", "last_epoch", "=", "-", "1", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "start_lr", "=", "start_lr", "\n", "self", ".", "end_lr", "=", "end_lr", "\n", "self", ".", "epochs", "=", "epochs", "\n", "self", ".", "lr_spaces", "=", "np", ".", "logspace", "(", "math", ".", "log10", "(", "start_lr", ")", ",", "\n", "math", ".", "log10", "(", "end_lr", ")", ",", "\n", "epochs", ")", "\n", "\n", "super", "(", "LogScheduler", ",", "self", ")", ".", "__init__", "(", "optimizer", ",", "last_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.utils.lr_scheduler.StepScheduler.__init__": [[49, 62], ["lr_scheduler.LRScheduler.__init__", "math.pow", "numpy.arange"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamban_tracker.SiamBANTracker.__init__"], ["    ", "def", "__init__", "(", "self", ",", "optimizer", ",", "start_lr", "=", "0.01", ",", "end_lr", "=", "None", ",", "\n", "step", "=", "10", ",", "mult", "=", "0.1", ",", "epochs", "=", "50", ",", "last_epoch", "=", "-", "1", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "end_lr", "is", "not", "None", ":", "\n", "            ", "if", "start_lr", "is", "None", ":", "\n", "                ", "start_lr", "=", "end_lr", "/", "(", "mult", "**", "(", "epochs", "//", "step", ")", ")", "\n", "", "else", ":", "# for warm up policy", "\n", "                ", "mult", "=", "math", ".", "pow", "(", "end_lr", "/", "start_lr", ",", "1.", "/", "(", "epochs", "//", "step", ")", ")", "\n", "", "", "self", ".", "start_lr", "=", "start_lr", "\n", "self", ".", "lr_spaces", "=", "self", ".", "start_lr", "*", "(", "mult", "**", "(", "np", ".", "arange", "(", "epochs", ")", "//", "step", ")", ")", "\n", "self", ".", "mult", "=", "mult", "\n", "self", ".", "_step", "=", "step", "\n", "\n", "super", "(", "StepScheduler", ",", "self", ")", ".", "__init__", "(", "optimizer", ",", "last_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.utils.lr_scheduler.MultiStepScheduler.__init__": [[65, 79], ["lr_scheduler.MultiStepScheduler._build_lr", "lr_scheduler.LRScheduler.__init__", "math.pow", "len", "len"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.utils.lr_scheduler.CosStepScheduler._build_lr", "home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamban_tracker.SiamBANTracker.__init__"], ["    ", "def", "__init__", "(", "self", ",", "optimizer", ",", "start_lr", "=", "0.01", ",", "end_lr", "=", "None", ",", "\n", "steps", "=", "[", "10", ",", "20", ",", "30", ",", "40", "]", ",", "mult", "=", "0.5", ",", "epochs", "=", "50", ",", "\n", "last_epoch", "=", "-", "1", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "end_lr", "is", "not", "None", ":", "\n", "            ", "if", "start_lr", "is", "None", ":", "\n", "                ", "start_lr", "=", "end_lr", "/", "(", "mult", "**", "(", "len", "(", "steps", ")", ")", ")", "\n", "", "else", ":", "\n", "                ", "mult", "=", "math", ".", "pow", "(", "end_lr", "/", "start_lr", ",", "1.", "/", "len", "(", "steps", ")", ")", "\n", "", "", "self", ".", "start_lr", "=", "start_lr", "\n", "self", ".", "lr_spaces", "=", "self", ".", "_build_lr", "(", "start_lr", ",", "steps", ",", "mult", ",", "epochs", ")", "\n", "self", ".", "mult", "=", "mult", "\n", "self", ".", "steps", "=", "steps", "\n", "\n", "super", "(", "MultiStepScheduler", ",", "self", ")", ".", "__init__", "(", "optimizer", ",", "last_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.utils.lr_scheduler.MultiStepScheduler._build_lr": [[80, 88], ["range", "numpy.array"], "methods", ["None"], ["", "def", "_build_lr", "(", "self", ",", "start_lr", ",", "steps", ",", "mult", ",", "epochs", ")", ":", "\n", "        ", "lr", "=", "[", "0", "]", "*", "epochs", "\n", "lr", "[", "0", "]", "=", "start_lr", "\n", "for", "i", "in", "range", "(", "1", ",", "epochs", ")", ":", "\n", "            ", "lr", "[", "i", "]", "=", "lr", "[", "i", "-", "1", "]", "\n", "if", "i", "in", "steps", ":", "\n", "                ", "lr", "[", "i", "]", "*=", "mult", "\n", "", "", "return", "np", ".", "array", "(", "lr", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.utils.lr_scheduler.LinearStepScheduler.__init__": [[91, 97], ["numpy.linspace", "lr_scheduler.LRScheduler.__init__"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamban_tracker.SiamBANTracker.__init__"], ["    ", "def", "__init__", "(", "self", ",", "optimizer", ",", "start_lr", "=", "0.01", ",", "end_lr", "=", "0.005", ",", "\n", "epochs", "=", "50", ",", "last_epoch", "=", "-", "1", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "start_lr", "=", "start_lr", "\n", "self", ".", "end_lr", "=", "end_lr", "\n", "self", ".", "lr_spaces", "=", "np", ".", "linspace", "(", "start_lr", ",", "end_lr", ",", "epochs", ")", "\n", "super", "(", "LinearStepScheduler", ",", "self", ")", ".", "__init__", "(", "optimizer", ",", "last_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.utils.lr_scheduler.CosStepScheduler.__init__": [[100, 107], ["lr_scheduler.CosStepScheduler._build_lr", "lr_scheduler.LRScheduler.__init__"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.utils.lr_scheduler.CosStepScheduler._build_lr", "home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamban_tracker.SiamBANTracker.__init__"], ["    ", "def", "__init__", "(", "self", ",", "optimizer", ",", "start_lr", "=", "0.01", ",", "end_lr", "=", "0.005", ",", "\n", "epochs", "=", "50", ",", "last_epoch", "=", "-", "1", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "start_lr", "=", "start_lr", "\n", "self", ".", "end_lr", "=", "end_lr", "\n", "self", ".", "lr_spaces", "=", "self", ".", "_build_lr", "(", "start_lr", ",", "end_lr", ",", "epochs", ")", "\n", "\n", "super", "(", "CosStepScheduler", ",", "self", ")", ".", "__init__", "(", "optimizer", ",", "last_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.utils.lr_scheduler.CosStepScheduler._build_lr": [[108, 113], ["numpy.arange().astype", "lr.astype", "numpy.arange", "numpy.cos"], "methods", ["None"], ["", "def", "_build_lr", "(", "self", ",", "start_lr", ",", "end_lr", ",", "epochs", ")", ":", "\n", "        ", "index", "=", "np", ".", "arange", "(", "epochs", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "lr", "=", "end_lr", "+", "(", "start_lr", "-", "end_lr", ")", "*", "(", "1.", "+", "np", ".", "cos", "(", "index", "*", "np", ".", "pi", "/", "epochs", ")", ")", "*", "0.5", "\n", "return", "lr", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.utils.lr_scheduler.WarmUPScheduler.__init__": [[116, 123], ["numpy.concatenate", "lr_scheduler.LRScheduler.__init__"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamban_tracker.SiamBANTracker.__init__"], ["    ", "def", "__init__", "(", "self", ",", "optimizer", ",", "warmup", ",", "normal", ",", "epochs", "=", "50", ",", "last_epoch", "=", "-", "1", ")", ":", "\n", "        ", "warmup", "=", "warmup", ".", "lr_spaces", "# [::-1]", "\n", "normal", "=", "normal", ".", "lr_spaces", "\n", "self", ".", "lr_spaces", "=", "np", ".", "concatenate", "(", "[", "warmup", ",", "normal", "]", ")", "\n", "self", ".", "start_lr", "=", "normal", "[", "0", "]", "\n", "\n", "super", "(", "WarmUPScheduler", ",", "self", ")", ".", "__init__", "(", "optimizer", ",", "last_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.utils.lr_scheduler._build_lr_scheduler": [[133, 136], ["siamban.core.config.cfg.TRAIN.LR_WARMUP", "siamban.core.config.cfg.TRAIN.LR", "siamban.core.config.cfg.TRAIN.LR"], "function", ["None"], ["def", "_build_lr_scheduler", "(", "optimizer", ",", "config", ",", "epochs", "=", "50", ",", "last_epoch", "=", "-", "1", ")", ":", "\n", "    ", "return", "LRs", "[", "config", ".", "TYPE", "]", "(", "optimizer", ",", "last_epoch", "=", "last_epoch", ",", "\n", "epochs", "=", "epochs", ",", "**", "config", ".", "KWARGS", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.utils.lr_scheduler._build_warm_up_scheduler": [[138, 145], ["lr_scheduler._build_lr_scheduler", "lr_scheduler._build_lr_scheduler", "lr_scheduler.WarmUPScheduler"], "function", ["home.repos.pwc.inspect_result.vision4robotics_udat.utils.lr_scheduler._build_lr_scheduler", "home.repos.pwc.inspect_result.vision4robotics_udat.utils.lr_scheduler._build_lr_scheduler"], ["", "def", "_build_warm_up_scheduler", "(", "optimizer", ",", "epochs", "=", "50", ",", "last_epoch", "=", "-", "1", ")", ":", "\n", "    ", "warmup_epoch", "=", "cfg", ".", "TRAIN", ".", "LR_WARMUP", ".", "EPOCH", "\n", "sc1", "=", "_build_lr_scheduler", "(", "optimizer", ",", "cfg", ".", "TRAIN", ".", "LR_WARMUP", ",", "\n", "warmup_epoch", ",", "last_epoch", ")", "\n", "sc2", "=", "_build_lr_scheduler", "(", "optimizer", ",", "cfg", ".", "TRAIN", ".", "LR", ",", "\n", "epochs", "-", "warmup_epoch", ",", "last_epoch", ")", "\n", "return", "WarmUPScheduler", "(", "optimizer", ",", "sc1", ",", "sc2", ",", "epochs", ",", "last_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.utils.lr_scheduler.build_lr_scheduler": [[147, 153], ["lr_scheduler._build_warm_up_scheduler", "lr_scheduler._build_lr_scheduler"], "function", ["home.repos.pwc.inspect_result.vision4robotics_udat.utils.lr_scheduler._build_warm_up_scheduler", "home.repos.pwc.inspect_result.vision4robotics_udat.utils.lr_scheduler._build_lr_scheduler"], ["", "def", "build_lr_scheduler", "(", "optimizer", ",", "epochs", "=", "50", ",", "last_epoch", "=", "-", "1", ")", ":", "\n", "    ", "if", "cfg", ".", "TRAIN", ".", "LR_WARMUP", ".", "WARMUP", ":", "\n", "        ", "return", "_build_warm_up_scheduler", "(", "optimizer", ",", "epochs", ",", "last_epoch", ")", "\n", "", "else", ":", "\n", "        ", "return", "_build_lr_scheduler", "(", "optimizer", ",", "cfg", ".", "TRAIN", ".", "LR", ",", "\n", "epochs", ",", "last_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.utils.location_grid.compute_locations": [[2, 9], ["location_grid.compute_locations_per_level", "features.size"], "function", ["home.repos.pwc.inspect_result.vision4robotics_udat.utils.location_grid.compute_locations_per_level"], ["def", "compute_locations", "(", "features", ",", "stride", ")", ":", "\n", "    ", "h", ",", "w", "=", "features", ".", "size", "(", ")", "[", "-", "2", ":", "]", "\n", "locations_per_level", "=", "compute_locations_per_level", "(", "\n", "h", ",", "w", ",", "stride", ",", "\n", "features", ".", "device", "\n", ")", "\n", "return", "locations_per_level", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.utils.location_grid.compute_locations_per_level": [[11, 27], ["torch.arange", "torch.arange", "torch.meshgrid", "shift_x.reshape.reshape", "shift_y.reshape.reshape", "torch.stack"], "function", ["None"], ["", "def", "compute_locations_per_level", "(", "h", ",", "w", ",", "stride", ",", "device", ")", ":", "\n", "    ", "shifts_x", "=", "torch", ".", "arange", "(", "\n", "0", ",", "w", "*", "stride", ",", "step", "=", "stride", ",", "\n", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "device", "\n", ")", "\n", "shifts_y", "=", "torch", ".", "arange", "(", "\n", "0", ",", "h", "*", "stride", ",", "step", "=", "stride", ",", "\n", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "device", "\n", ")", "\n", "shift_y", ",", "shift_x", "=", "torch", ".", "meshgrid", "(", "(", "shifts_y", ",", "shifts_x", ")", ")", "\n", "shift_x", "=", "shift_x", ".", "reshape", "(", "-", "1", ")", "\n", "shift_y", "=", "shift_y", ".", "reshape", "(", "-", "1", ")", "\n", "# locations = torch.stack((shift_x, shift_y), dim=1) + stride + 3*stride  # (size_z-1)/2*size_z 28", "\n", "# locations = torch.stack((shift_x, shift_y), dim=1) + stride", "\n", "locations", "=", "torch", ".", "stack", "(", "(", "shift_x", ",", "shift_y", ")", ",", "dim", "=", "1", ")", "+", "32", "#alex:48 // 32", "\n", "return", "locations", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.utils.point.Point.__init__": [[13, 19], ["point.Point.generate_points"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamban_tracker.SiamBANTracker.generate_points"], ["def", "__init__", "(", "self", ",", "stride", ",", "size", ",", "image_center", ")", ":", "\n", "        ", "self", ".", "stride", "=", "stride", "\n", "self", ".", "size", "=", "size", "\n", "self", ".", "image_center", "=", "image_center", "\n", "\n", "self", ".", "points", "=", "self", ".", "generate_points", "(", "self", ".", "stride", ",", "self", ".", "size", ",", "self", ".", "image_center", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.utils.point.Point.generate_points": [[20, 28], ["numpy.meshgrid", "numpy.zeros", "x.astype", "y.astype", "numpy.arange", "numpy.arange"], "methods", ["None"], ["", "def", "generate_points", "(", "self", ",", "stride", ",", "size", ",", "im_c", ")", ":", "\n", "        ", "ori", "=", "im_c", "-", "size", "//", "2", "*", "stride", "\n", "x", ",", "y", "=", "np", ".", "meshgrid", "(", "[", "ori", "+", "stride", "*", "dx", "for", "dx", "in", "np", ".", "arange", "(", "0", ",", "size", ")", "]", ",", "\n", "[", "ori", "+", "stride", "*", "dy", "for", "dy", "in", "np", ".", "arange", "(", "0", ",", "size", ")", "]", ")", "\n", "points", "=", "np", ".", "zeros", "(", "(", "2", ",", "size", ",", "size", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "points", "[", "0", ",", ":", ",", ":", "]", ",", "points", "[", "1", ",", ":", ",", ":", "]", "=", "x", ".", "astype", "(", "np", ".", "float32", ")", ",", "y", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "return", "points", "\n", "", "", ""]], "home.repos.pwc.inspect_result.vision4robotics_udat.utils.statistics.calculate_failures": [[7, 19], ["len", "zip", "range", "len", "len"], "function", ["None"], ["    ", "'''Compute overlap ratio between two rects\n    Args\n        rect:2d array of N x [x,y,w,h]\n    Return:\n        iou\n    '''", "\n", "# if rect1.ndim==1:", "\n", "#     rect1 = rect1[np.newaxis, :]", "\n", "# if rect2.ndim==1:", "\n", "#     rect2 = rect2[np.newaxis, :]", "\n", "left", "=", "np", ".", "maximum", "(", "rect1", "[", ":", ",", "0", "]", ",", "rect2", "[", ":", ",", "0", "]", ")", "\n", "right", "=", "np", ".", "minimum", "(", "rect1", "[", ":", ",", "0", "]", "+", "rect1", "[", ":", ",", "2", "]", ",", "rect2", "[", ":", ",", "0", "]", "+", "rect2", "[", ":", ",", "2", "]", ")", "\n", "top", "=", "np", ".", "maximum", "(", "rect1", "[", ":", ",", "1", "]", ",", "rect2", "[", ":", ",", "1", "]", ")", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.utils.statistics.calculate_accuracy": [[20, 56], ["min", "region.vot_overlap_traj", "range", "len", "len", "len", "numpy.nanmean", "len", "range", "len", "len", "len"], "function", ["None"], ["bottom", "=", "np", ".", "minimum", "(", "rect1", "[", ":", ",", "1", "]", "+", "rect1", "[", ":", ",", "3", "]", ",", "rect2", "[", ":", ",", "1", "]", "+", "rect2", "[", ":", ",", "3", "]", ")", "\n", "\n", "intersect", "=", "np", ".", "maximum", "(", "0", ",", "right", "-", "left", ")", "*", "np", ".", "maximum", "(", "0", ",", "bottom", "-", "top", ")", "\n", "union", "=", "rect1", "[", ":", ",", "2", "]", "*", "rect1", "[", ":", ",", "3", "]", "+", "rect2", "[", ":", ",", "2", "]", "*", "rect2", "[", ":", ",", "3", "]", "-", "intersect", "\n", "iou", "=", "intersect", "/", "union", "\n", "iou", "=", "np", ".", "maximum", "(", "np", ".", "minimum", "(", "1", ",", "iou", ")", ",", "0", ")", "\n", "return", "iou", "\n", "\n", "", "def", "success_overlap", "(", "gt_bb", ",", "result_bb", ",", "n_frame", ")", ":", "\n", "    ", "thresholds_overlap", "=", "np", ".", "arange", "(", "0", ",", "1.05", ",", "0.05", ")", "\n", "success", "=", "np", ".", "zeros", "(", "len", "(", "thresholds_overlap", ")", ")", "\n", "iou", "=", "np", ".", "ones", "(", "len", "(", "gt_bb", ")", ")", "*", "(", "-", "1", ")", "\n", "# mask = np.sum(gt_bb > 0, axis=1) == 4 #TODO check all dataset", "\n", "mask", "=", "np", ".", "sum", "(", "gt_bb", "[", ":", ",", "2", ":", "]", ">", "0", ",", "axis", "=", "1", ")", "==", "2", "\n", "iou", "[", "mask", "]", "=", "overlap_ratio", "(", "gt_bb", "[", "mask", "]", ",", "result_bb", "[", "mask", "]", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "thresholds_overlap", ")", ")", ":", "\n", "        ", "success", "[", "i", "]", "=", "np", ".", "sum", "(", "iou", ">", "thresholds_overlap", "[", "i", "]", ")", "/", "float", "(", "n_frame", ")", "\n", "", "return", "success", "\n", "\n", "", "def", "success_error", "(", "gt_center", ",", "result_center", ",", "thresholds", ",", "n_frame", ")", ":", "\n", "# n_frame = len(gt_center)", "\n", "    ", "success", "=", "np", ".", "zeros", "(", "len", "(", "thresholds", ")", ")", "\n", "dist", "=", "np", ".", "ones", "(", "len", "(", "gt_center", ")", ")", "*", "(", "-", "1", ")", "\n", "mask", "=", "np", ".", "sum", "(", "gt_center", ">", "0", ",", "axis", "=", "1", ")", "==", "2", "\n", "dist", "[", "mask", "]", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "\n", "np", ".", "power", "(", "gt_center", "[", "mask", "]", "-", "result_center", "[", "mask", "]", ",", "2", ")", ",", "axis", "=", "1", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "thresholds", ")", ")", ":", "\n", "        ", "success", "[", "i", "]", "=", "np", ".", "sum", "(", "dist", "<=", "thresholds", "[", "i", "]", ")", "/", "float", "(", "n_frame", ")", "\n", "", "return", "success", "\n", "\n", "\n", "", ""]], "home.repos.pwc.inspect_result.vision4robotics_udat.utils.statistics.determine_thresholds": [[121, 134], ["numpy.sort", "numpy.floor", "numpy.floor().astype", "numpy.zeros", "len", "numpy.floor", "numpy.logical_not", "numpy.isnan", "numpy.linspace", "len"], "function", ["None"], []], "home.repos.pwc.inspect_result.vision4robotics_udat.utils.statistics.calculate_f1": [[135, 155], ["numpy.array", "numpy.array", "numpy.zeros", "numpy.zeros", "enumerate", "len", "len", "numpy.isnan", "numpy.isnan", "numpy.sum", "numpy.mean", "numpy.sum"], "function", ["None"], []], "home.repos.pwc.inspect_result.vision4robotics_udat.utils.statistics.calculate_expected_overlap": [[156, 170], ["numpy.zeros", "range", "numpy.logical_not", "numpy.any", "numpy.isnan", "numpy.sum", "numpy.sum", "numpy.sum"], "function", ["None"], []], "home.repos.pwc.inspect_result.vision4robotics_udat.utils.misc.determine_thresholds": [[6, 31], ["isinstance", "np.array.flatten", "np.array.sort", "numpy.ones", "numpy.floor", "numpy.linspace", "numpy.array", "len", "len", "len", "numpy.isnan"], "function", ["None"], ["from", "__future__", "import", "unicode_literals", "\n", "\n", "import", "os", "\n", "import", "numpy", "as", "np", "\n", "import", "torch", "\n", "\n", "from", "colorama", "import", "Fore", ",", "Style", "\n", "\n", "\n", "__all__", "=", "[", "'commit'", ",", "'describe'", "]", "\n", "\n", "\n", "def", "_exec", "(", "cmd", ")", ":", "\n", "    ", "f", "=", "os", ".", "popen", "(", "cmd", ",", "'r'", ",", "1", ")", "\n", "return", "f", ".", "read", "(", ")", ".", "strip", "(", ")", "\n", "\n", "\n", "", "def", "_bold", "(", "s", ")", ":", "\n", "    ", "return", "\"\\033[1m%s\\033[0m\"", "%", "s", "\n", "\n", "\n", "", "def", "_color", "(", "s", ")", ":", "\n", "# return f'{Fore.RED}{s}{Style.RESET_ALL}'", "\n", "    ", "return", "\"{}{}{}\"", ".", "format", "(", "Fore", ".", "RED", ",", "s", ",", "Style", ".", "RESET_ALL", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.pytorch_ssim.__init__.SSIM.__init__": [[40, 46], ["super().__init__", "__init__.create_window"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamban_tracker.SiamBANTracker.__init__", "home.repos.pwc.inspect_result.vision4robotics_udat.pytorch_ssim.__init__.create_window"], ["    ", "def", "__init__", "(", "self", ",", "window_size", "=", "11", ",", "size_average", "=", "True", ")", ":", "\n", "        ", "super", "(", "SSIM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "window_size", "=", "window_size", "\n", "self", ".", "size_average", "=", "size_average", "\n", "self", ".", "channel", "=", "1", "\n", "self", ".", "window", "=", "create_window", "(", "window_size", ",", "self", ".", "channel", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.pytorch_ssim.__init__.SSIM.forward": [[47, 64], ["img1.size", "__init__._ssim", "__init__.create_window", "window.cuda.cuda.type_as", "__init__.SSIM.window.data.type", "img1.data.type", "window.cuda.cuda.cuda", "img1.get_device"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.pytorch_ssim.__init__._ssim", "home.repos.pwc.inspect_result.vision4robotics_udat.pytorch_ssim.__init__.create_window"], ["", "def", "forward", "(", "self", ",", "img1", ",", "img2", ")", ":", "\n", "        ", "(", "_", ",", "channel", ",", "_", ",", "_", ")", "=", "img1", ".", "size", "(", ")", "\n", "\n", "if", "channel", "==", "self", ".", "channel", "and", "self", ".", "window", ".", "data", ".", "type", "(", ")", "==", "img1", ".", "data", ".", "type", "(", ")", ":", "\n", "            ", "window", "=", "self", ".", "window", "\n", "", "else", ":", "\n", "            ", "window", "=", "create_window", "(", "self", ".", "window_size", ",", "channel", ")", "\n", "\n", "if", "img1", ".", "is_cuda", ":", "\n", "                ", "window", "=", "window", ".", "cuda", "(", "img1", ".", "get_device", "(", ")", ")", "\n", "", "window", "=", "window", ".", "type_as", "(", "img1", ")", "\n", "\n", "self", ".", "window", "=", "window", "\n", "self", ".", "channel", "=", "channel", "\n", "\n", "\n", "", "return", "_ssim", "(", "img1", ",", "img2", ",", "window", ",", "self", ".", "window_size", ",", "channel", ",", "self", ".", "size_average", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.pytorch_ssim.__init__.LOGSSIM.__init__": [[90, 96], ["super().__init__", "__init__.create_window"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamban_tracker.SiamBANTracker.__init__", "home.repos.pwc.inspect_result.vision4robotics_udat.pytorch_ssim.__init__.create_window"], ["    ", "def", "__init__", "(", "self", ",", "window_size", "=", "11", ",", "size_average", "=", "True", ")", ":", "\n", "        ", "super", "(", "LOGSSIM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "window_size", "=", "window_size", "\n", "self", ".", "size_average", "=", "size_average", "\n", "self", ".", "channel", "=", "1", "\n", "self", ".", "window", "=", "create_window", "(", "window_size", ",", "self", ".", "channel", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.pytorch_ssim.__init__.LOGSSIM.forward": [[97, 114], ["img1.size", "__init__._logssim", "__init__.create_window", "window.cuda.cuda.type_as", "__init__.LOGSSIM.window.data.type", "img1.data.type", "window.cuda.cuda.cuda", "img1.get_device"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.pytorch_ssim.__init__._logssim", "home.repos.pwc.inspect_result.vision4robotics_udat.pytorch_ssim.__init__.create_window"], ["", "def", "forward", "(", "self", ",", "img1", ",", "img2", ")", ":", "\n", "        ", "(", "_", ",", "channel", ",", "_", ",", "_", ")", "=", "img1", ".", "size", "(", ")", "\n", "\n", "if", "channel", "==", "self", ".", "channel", "and", "self", ".", "window", ".", "data", ".", "type", "(", ")", "==", "img1", ".", "data", ".", "type", "(", ")", ":", "\n", "            ", "window", "=", "self", ".", "window", "\n", "", "else", ":", "\n", "            ", "window", "=", "create_window", "(", "self", ".", "window_size", ",", "channel", ")", "\n", "\n", "if", "img1", ".", "is_cuda", ":", "\n", "                ", "window", "=", "window", ".", "cuda", "(", "img1", ".", "get_device", "(", ")", ")", "\n", "", "window", "=", "window", ".", "type_as", "(", "img1", ")", "\n", "\n", "self", ".", "window", "=", "window", "\n", "self", ".", "channel", "=", "channel", "\n", "\n", "\n", "", "return", "_logssim", "(", "img1", ",", "img2", ",", "window", ",", "self", ".", "window_size", ",", "channel", ",", "self", ".", "size_average", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.pytorch_ssim.__init__.gaussian": [[7, 10], ["torch.Tensor", "torch.Tensor", "torch.Tensor.sum", "math.exp", "range", "float"], "function", ["None"], ["def", "gaussian", "(", "window_size", ",", "sigma", ")", ":", "\n", "    ", "gauss", "=", "torch", ".", "Tensor", "(", "[", "exp", "(", "-", "(", "x", "-", "window_size", "//", "2", ")", "**", "2", "/", "float", "(", "2", "*", "sigma", "**", "2", ")", ")", "for", "x", "in", "range", "(", "window_size", ")", "]", ")", "\n", "return", "gauss", "/", "gauss", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.pytorch_ssim.__init__.create_window": [[11, 16], ["gaussian().unsqueeze", "gaussian().unsqueeze.mm().float().unsqueeze().unsqueeze", "torch.autograd.Variable", "_1D_window.mm().float().unsqueeze().unsqueeze.expand().contiguous", "__init__.gaussian", "gaussian().unsqueeze.mm().float().unsqueeze", "_1D_window.mm().float().unsqueeze().unsqueeze.expand", "gaussian().unsqueeze.mm().float", "gaussian().unsqueeze.mm", "gaussian().unsqueeze.t"], "function", ["home.repos.pwc.inspect_result.vision4robotics_udat.pytorch_ssim.__init__.gaussian"], ["", "def", "create_window", "(", "window_size", ",", "channel", ")", ":", "\n", "    ", "_1D_window", "=", "gaussian", "(", "window_size", ",", "1.5", ")", ".", "unsqueeze", "(", "1", ")", "\n", "_2D_window", "=", "_1D_window", ".", "mm", "(", "_1D_window", ".", "t", "(", ")", ")", ".", "float", "(", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", "\n", "window", "=", "Variable", "(", "_2D_window", ".", "expand", "(", "channel", ",", "1", ",", "window_size", ",", "window_size", ")", ".", "contiguous", "(", ")", ")", "\n", "return", "window", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.pytorch_ssim.__init__._ssim": [[17, 38], ["torch.conv2d", "torch.conv2d", "F.conv2d.pow", "F.conv2d.pow", "torch.conv2d", "torch.conv2d", "torch.conv2d", "ssim_map.mean", "ssim_map.mean().mean().mean", "ssim_map.mean().mean", "ssim_map.mean"], "function", ["None"], ["", "def", "_ssim", "(", "img1", ",", "img2", ",", "window", ",", "window_size", ",", "channel", ",", "size_average", "=", "True", ")", ":", "\n", "    ", "mu1", "=", "F", ".", "conv2d", "(", "img1", ",", "window", ",", "padding", "=", "window_size", "//", "2", ",", "groups", "=", "channel", ")", "\n", "mu2", "=", "F", ".", "conv2d", "(", "img2", ",", "window", ",", "padding", "=", "window_size", "//", "2", ",", "groups", "=", "channel", ")", "\n", "\n", "mu1_sq", "=", "mu1", ".", "pow", "(", "2", ")", "\n", "mu2_sq", "=", "mu2", ".", "pow", "(", "2", ")", "\n", "mu1_mu2", "=", "mu1", "*", "mu2", "\n", "\n", "sigma1_sq", "=", "F", ".", "conv2d", "(", "img1", "*", "img1", ",", "window", ",", "padding", "=", "window_size", "//", "2", ",", "groups", "=", "channel", ")", "-", "mu1_sq", "\n", "sigma2_sq", "=", "F", ".", "conv2d", "(", "img2", "*", "img2", ",", "window", ",", "padding", "=", "window_size", "//", "2", ",", "groups", "=", "channel", ")", "-", "mu2_sq", "\n", "sigma12", "=", "F", ".", "conv2d", "(", "img1", "*", "img2", ",", "window", ",", "padding", "=", "window_size", "//", "2", ",", "groups", "=", "channel", ")", "-", "mu1_mu2", "\n", "\n", "C1", "=", "0.01", "**", "2", "\n", "C2", "=", "0.03", "**", "2", "\n", "\n", "ssim_map", "=", "(", "(", "2", "*", "mu1_mu2", "+", "C1", ")", "*", "(", "2", "*", "sigma12", "+", "C2", ")", ")", "/", "(", "(", "mu1_sq", "+", "mu2_sq", "+", "C1", ")", "*", "(", "sigma1_sq", "+", "sigma2_sq", "+", "C2", ")", ")", "\n", "\n", "if", "size_average", ":", "\n", "        ", "return", "ssim_map", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "        ", "return", "ssim_map", ".", "mean", "(", "1", ")", ".", "mean", "(", "1", ")", ".", "mean", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.pytorch_ssim.__init__._logssim": [[65, 88], ["torch.conv2d", "torch.conv2d", "F.conv2d.pow", "F.conv2d.pow", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.log", "torch.log", "ssim_map.mean", "ssim_map.mean().mean().mean", "torch.min", "torch.min", "torch.max", "torch.max", "torch.min", "torch.min", "ssim_map.mean().mean", "ssim_map.mean"], "function", ["home.repos.pwc.inspect_result.vision4robotics_udat.datasets.dataset.SubDataset.log", "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.dataset.SubDataset.log"], ["", "", "def", "_logssim", "(", "img1", ",", "img2", ",", "window", ",", "window_size", ",", "channel", ",", "size_average", "=", "True", ")", ":", "\n", "    ", "mu1", "=", "F", ".", "conv2d", "(", "img1", ",", "window", ",", "padding", "=", "window_size", "//", "2", ",", "groups", "=", "channel", ")", "\n", "mu2", "=", "F", ".", "conv2d", "(", "img2", ",", "window", ",", "padding", "=", "window_size", "//", "2", ",", "groups", "=", "channel", ")", "\n", "\n", "mu1_sq", "=", "mu1", ".", "pow", "(", "2", ")", "\n", "mu2_sq", "=", "mu2", ".", "pow", "(", "2", ")", "\n", "mu1_mu2", "=", "mu1", "*", "mu2", "\n", "\n", "sigma1_sq", "=", "F", ".", "conv2d", "(", "img1", "*", "img1", ",", "window", ",", "padding", "=", "window_size", "//", "2", ",", "groups", "=", "channel", ")", "-", "mu1_sq", "\n", "sigma2_sq", "=", "F", ".", "conv2d", "(", "img2", "*", "img2", ",", "window", ",", "padding", "=", "window_size", "//", "2", ",", "groups", "=", "channel", ")", "-", "mu2_sq", "\n", "sigma12", "=", "F", ".", "conv2d", "(", "img1", "*", "img2", ",", "window", ",", "padding", "=", "window_size", "//", "2", ",", "groups", "=", "channel", ")", "-", "mu1_mu2", "\n", "\n", "C1", "=", "0.01", "**", "2", "\n", "C2", "=", "0.03", "**", "2", "\n", "\n", "ssim_map", "=", "(", "(", "2", "*", "mu1_mu2", "+", "C1", ")", "*", "(", "2", "*", "sigma12", "+", "C2", ")", ")", "/", "(", "(", "mu1_sq", "+", "mu2_sq", "+", "C1", ")", "*", "(", "sigma1_sq", "+", "sigma2_sq", "+", "C2", ")", ")", "\n", "ssim_map", "=", "(", "ssim_map", "-", "torch", ".", "min", "(", "ssim_map", ")", ")", "/", "(", "torch", ".", "max", "(", "ssim_map", ")", "-", "torch", ".", "min", "(", "ssim_map", ")", ")", "\n", "ssim_map", "=", "-", "torch", ".", "log", "(", "ssim_map", "+", "1e-8", ")", "\n", "\n", "if", "size_average", ":", "\n", "        ", "return", "ssim_map", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "        ", "return", "ssim_map", ".", "mean", "(", "1", ")", ".", "mean", "(", "1", ")", ".", "mean", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.pytorch_ssim.__init__.ssim": [[116, 125], ["img1.size", "__init__.create_window", "window.cuda.type_as", "__init__._ssim", "window.cuda.cuda", "img1.get_device"], "function", ["home.repos.pwc.inspect_result.vision4robotics_udat.pytorch_ssim.__init__.create_window", "home.repos.pwc.inspect_result.vision4robotics_udat.pytorch_ssim.__init__._ssim"], ["", "", "def", "ssim", "(", "img1", ",", "img2", ",", "window_size", "=", "11", ",", "size_average", "=", "True", ")", ":", "\n", "    ", "(", "_", ",", "channel", ",", "_", ",", "_", ")", "=", "img1", ".", "size", "(", ")", "\n", "window", "=", "create_window", "(", "window_size", ",", "channel", ")", "\n", "\n", "if", "img1", ".", "is_cuda", ":", "\n", "        ", "window", "=", "window", ".", "cuda", "(", "img1", ".", "get_device", "(", ")", ")", "\n", "", "window", "=", "window", ".", "type_as", "(", "img1", ")", "\n", "\n", "return", "_ssim", "(", "img1", ",", "img2", ",", "window", ",", "window_size", ",", "channel", ",", "size_average", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.vision4robotics_udat.pytorch_iou.__init__.IOU.__init__": [[22, 25], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamban_tracker.SiamBANTracker.__init__"], ["mu2_sq", "=", "mu2", ".", "pow", "(", "2", ")", "\n", "mu1_mu2", "=", "mu1", "*", "mu2", "\n", "\n", "sigma1_sq", "=", "F", ".", "conv2d", "(", "img1", "*", "img1", ",", "window", ",", "padding", "=", "window_size", "//", "2", ",", "groups", "=", "channel", ")", "-", "mu1_sq", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.pytorch_iou.__init__.IOU.forward": [[26, 29], ["__init__._iou"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.pytorch_iou.__init__._iou"], ["sigma2_sq", "=", "F", ".", "conv2d", "(", "img2", "*", "img2", ",", "window", ",", "padding", "=", "window_size", "//", "2", ",", "groups", "=", "channel", ")", "-", "mu2_sq", "\n", "sigma12", "=", "F", ".", "conv2d", "(", "img1", "*", "img2", ",", "window", ",", "padding", "=", "window_size", "//", "2", ",", "groups", "=", "channel", ")", "-", "mu1_mu2", "\n", "\n", "C1", "=", "0.01", "**", "2", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.pytorch_iou.__init__._iou": [[6, 20], ["range", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "function", ["None"], ["\n", "def", "gaussian", "(", "window_size", ",", "sigma", ")", ":", "\n", "    ", "gauss", "=", "torch", ".", "Tensor", "(", "[", "exp", "(", "-", "(", "x", "-", "window_size", "//", "2", ")", "**", "2", "/", "float", "(", "2", "*", "sigma", "**", "2", ")", ")", "for", "x", "in", "range", "(", "window_size", ")", "]", ")", "\n", "return", "gauss", "/", "gauss", ".", "sum", "(", ")", "\n", "\n", "", "def", "create_window", "(", "window_size", ",", "channel", ")", ":", "\n", "    ", "_1D_window", "=", "gaussian", "(", "window_size", ",", "1.5", ")", ".", "unsqueeze", "(", "1", ")", "\n", "_2D_window", "=", "_1D_window", ".", "mm", "(", "_1D_window", ".", "t", "(", ")", ")", ".", "float", "(", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", "\n", "window", "=", "Variable", "(", "_2D_window", ".", "expand", "(", "channel", ",", "1", ",", "window_size", ",", "window_size", ")", ".", "contiguous", "(", ")", ")", "\n", "return", "window", "\n", "\n", "", "def", "_ssim", "(", "img1", ",", "img2", ",", "window", ",", "window_size", ",", "channel", ",", "size_average", "=", "True", ")", ":", "\n", "    ", "mu1", "=", "F", ".", "conv2d", "(", "img1", ",", "window", ",", "padding", "=", "window_size", "//", "2", ",", "groups", "=", "channel", ")", "\n", "mu2", "=", "F", ".", "conv2d", "(", "img2", ",", "window", ",", "padding", "=", "window_size", "//", "2", ",", "groups", "=", "channel", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.transforms.Video_train_Compose.__init__": [[27, 29], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "transforms", ")", ":", "\n", "        ", "self", ".", "transforms", "=", "transforms", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.transforms.Video_train_Compose.__call__": [[30, 34], ["t"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "i", ",", "j", ",", "h", ",", "w", ",", "flip_index", ",", "flag", ")", ":", "\n", "        ", "for", "t", "in", "self", ".", "transforms", ":", "\n", "            ", "img", ",", "i", ",", "j", ",", "h", ",", "w", ",", "flip_index", "=", "t", "(", "img", ",", "i", ",", "j", ",", "h", ",", "w", ",", "flip_index", ",", "flag", ")", "\n", "", "return", "img", ",", "i", ",", "j", ",", "h", ",", "w", ",", "flip_index", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.transforms.Video_train_Compose.__repr__": [[35, 42], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "format_string", "=", "self", ".", "__class__", ".", "__name__", "+", "'('", "\n", "for", "t", "in", "self", ".", "transforms", ":", "\n", "            ", "format_string", "+=", "'\\n'", "\n", "format_string", "+=", "'    {0}'", ".", "format", "(", "t", ")", "\n", "", "format_string", "+=", "'\\n)'", "\n", "return", "format_string", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.transforms.ColorJitter.__init__": [[78, 82], ["torchvision.transforms.ColorJitter.__init__"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamban_tracker.SiamBANTracker.__init__"], ["    ", "def", "__init__", "(", "self", ",", "image_mode", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "ColorJitter", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "transform", "=", "None", "\n", "self", ".", "image_mode", "=", "image_mode", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.transforms.ColorJitter.__call__": [[83, 89], ["torchvision.transforms.ColorJitter.transform", "torchvision.transforms.ColorJitter.get_params"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "if", "self", ".", "transform", "is", "None", "or", "self", ".", "image_mode", ":", "\n", "            ", "self", ".", "transform", "=", "self", ".", "get_params", "(", "self", ".", "brightness", ",", "self", ".", "contrast", ",", "\n", "self", ".", "saturation", ",", "self", ".", "hue", ")", "\n", "", "sample", "[", "'image'", "]", "=", "self", ".", "transform", "(", "sample", "[", "'image'", "]", ")", "\n", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.transforms.RandomResizedCrop.__init__": [[103, 109], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ",", "image_mode", ",", "scale", "=", "(", "0.7", ",", "1.0", ")", ",", "ratio", "=", "(", "3.", "/", "4.", ",", "4.", "/", "3.", ")", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "self", ".", "scale", "=", "scale", "\n", "self", ".", "ratio", "=", "ratio", "\n", "self", ".", "i", ",", "self", ".", "j", ",", "self", ".", "h", ",", "self", ".", "w", "=", "None", ",", "None", ",", "None", ",", "None", "\n", "self", ".", "image_mode", "=", "image_mode", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.transforms.RandomResizedCrop.__call__": [[110, 122], ["torchvision.transforms.functional.resized_crop", "torchvision.transforms.functional.resized_crop", "torchvision.transforms.RandomResizedCrop.get_params"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ",", "i", "=", "0", ",", "j", "=", "0", ",", "h", "=", "0", ",", "w", "=", "0", ",", "flip_index", "=", "None", ",", "flag", "=", "False", ")", ":", "\n", "        ", "image", ",", "label", "=", "sample", "[", "'image'", "]", ",", "sample", "[", "'label'", "]", "\n", "if", "not", "flag", ":", "\n", "            ", "if", "self", ".", "i", "is", "None", "or", "self", ".", "image_mode", ":", "\n", "                ", "self", ".", "i", ",", "self", ".", "j", ",", "self", ".", "h", ",", "self", ".", "w", "=", "transforms", ".", "RandomResizedCrop", ".", "get_params", "(", "image", ",", "self", ".", "scale", ",", "self", ".", "ratio", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "i", ",", "self", ".", "j", ",", "self", ".", "h", ",", "self", ".", "w", "=", "i", ",", "j", ",", "h", ",", "w", "\n", "", "image", "=", "F", ".", "resized_crop", "(", "image", ",", "self", ".", "i", ",", "self", ".", "j", ",", "self", ".", "h", ",", "self", ".", "w", ",", "self", ".", "size", ",", "Image", ".", "BILINEAR", ")", "\n", "label", "=", "F", ".", "resized_crop", "(", "label", ",", "self", ".", "i", ",", "self", ".", "j", ",", "self", ".", "h", ",", "self", ".", "w", ",", "self", ".", "size", ",", "Image", ".", "BILINEAR", ")", "\n", "i", ",", "j", ",", "h", ",", "w", "=", "self", ".", "i", ",", "self", ".", "j", ",", "self", ".", "h", ",", "self", ".", "w", "\n", "sample", "[", "'image'", "]", ",", "sample", "[", "'label'", "]", "=", "image", ",", "label", "\n", "return", "sample", ",", "i", ",", "j", ",", "h", ",", "w", ",", "flip_index", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.transforms.RandomFlip.__init__": [[127, 130], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "image_mode", ")", ":", "\n", "        ", "self", ".", "rand_flip_index", "=", "None", "\n", "self", ".", "image_mode", "=", "image_mode", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.transforms.RandomFlip.__call__": [[131, 151], ["torchvision.transforms.functional.hflip", "torchvision.transforms.functional.hflip", "random.randint", "torchvision.transforms.functional.vflip", "torchvision.transforms.functional.vflip", "torchvision.transforms.functional.vflip", "torchvision.transforms.functional.vflip", "torchvision.transforms.functional.hflip", "torchvision.transforms.functional.hflip"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ",", "i", ",", "j", ",", "h", ",", "w", ",", "flip_index", ",", "flag", ")", ":", "\n", "        ", "image", ",", "label", "=", "sample", "[", "'image'", "]", ",", "sample", "[", "'label'", "]", "\n", "if", "not", "flag", ":", "\n", "            ", "if", "self", ".", "rand_flip_index", "is", "None", "or", "self", ".", "image_mode", ":", "\n", "                ", "self", ".", "rand_flip_index", "=", "random", ".", "randint", "(", "-", "1", ",", "2", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "rand_flip_index", "=", "flip_index", "\n", "# 0: horizontal flip, 1: vertical flip, -1: horizontal and vertical flip", "\n", "", "if", "self", ".", "rand_flip_index", "==", "0", ":", "\n", "            ", "image", "=", "F", ".", "hflip", "(", "image", ")", "\n", "label", "=", "F", ".", "hflip", "(", "label", ")", "\n", "", "elif", "self", ".", "rand_flip_index", "==", "1", ":", "\n", "            ", "image", "=", "F", ".", "vflip", "(", "image", ")", "\n", "label", "=", "F", ".", "vflip", "(", "label", ")", "\n", "", "elif", "self", ".", "rand_flip_index", "==", "2", ":", "\n", "            ", "image", "=", "F", ".", "vflip", "(", "F", ".", "hflip", "(", "image", ")", ")", "\n", "label", "=", "F", ".", "vflip", "(", "F", ".", "hflip", "(", "label", ")", ")", "\n", "", "flip_index", "=", "self", ".", "rand_flip_index", "\n", "sample", "[", "'image'", "]", ",", "sample", "[", "'label'", "]", "=", "image", ",", "label", "\n", "return", "sample", ",", "i", ",", "j", ",", "h", ",", "w", ",", "flip_index", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.transforms.FixedResize.__init__": [[171, 173], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.transforms.FixedResize.__call__": [[174, 181], ["torchvision.transforms.functional.resize", "torchvision.transforms.functional.resize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ",", "i", ",", "j", ",", "h", ",", "w", ",", "flip_index", ",", "flag", ")", ":", "\n", "        ", "image", ",", "label", "=", "sample", "[", "'image'", "]", ",", "sample", "[", "'label'", "]", "\n", "image", "=", "F", ".", "resize", "(", "image", ",", "self", ".", "size", ",", "Image", ".", "BILINEAR", ")", "\n", "if", "label", "is", "not", "None", ":", "\n", "            ", "label", "=", "F", ".", "resize", "(", "label", ",", "self", ".", "size", ",", "Image", ".", "BILINEAR", ")", "\n", "", "sample", "[", "'image'", "]", ",", "sample", "[", "'label'", "]", "=", "image", ",", "label", "\n", "return", "sample", ",", "i", ",", "j", ",", "h", ",", "w", ",", "flip_index", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.transforms.RandomCrop.__init__": [[184, 190], ["isinstance", "int", "int"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ",", "padding", "=", "0", ")", ":", "\n", "        ", "if", "isinstance", "(", "size", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "self", ".", "size", "=", "(", "int", "(", "size", ")", ",", "int", "(", "size", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "size", "=", "size", "# h, w", "\n", "", "self", ".", "padding", "=", "padding", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.transforms.RandomCrop.__call__": [[191, 217], ["random.randint", "random.randint", "image.resize.resize.crop", "label.resize.resize.crop", "PIL.ImageOps.expand", "PIL.ImageOps.expand", "image.resize.resize.resize", "label.resize.resize.resize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "image", ",", "label", "=", "sample", "[", "'image'", "]", ",", "sample", "[", "'label'", "]", "\n", "\n", "if", "self", ".", "padding", ">", "0", ":", "\n", "            ", "image", "=", "ImageOps", ".", "expand", "(", "image", ",", "border", "=", "self", ".", "padding", ",", "fill", "=", "0", ")", "\n", "label", "=", "ImageOps", ".", "expand", "(", "label", ",", "border", "=", "self", ".", "padding", ",", "fill", "=", "0", ")", "\n", "\n", "", "assert", "label", ".", "size", "==", "label", ".", "size", "\n", "w", ",", "h", "=", "image", ".", "size", "\n", "th", ",", "tw", "=", "self", ".", "size", "\n", "if", "w", "==", "tw", "and", "h", "==", "th", ":", "\n", "            ", "return", "{", "'image'", ":", "image", ",", "\n", "'label'", ":", "label", "}", "\n", "", "if", "w", "<", "tw", "or", "h", "<", "th", ":", "\n", "            ", "image", "=", "image", ".", "resize", "(", "(", "tw", ",", "th", ")", ",", "Image", ".", "BILINEAR", ")", "\n", "label", "=", "label", ".", "resize", "(", "(", "tw", ",", "th", ")", ",", "Image", ".", "NEAREST", ")", "\n", "\n", "return", "{", "'image'", ":", "image", ",", "\n", "'label'", ":", "label", "}", "\n", "\n", "", "x1", "=", "random", ".", "randint", "(", "0", ",", "w", "-", "tw", ")", "\n", "y1", "=", "random", ".", "randint", "(", "0", ",", "h", "-", "th", ")", "\n", "image", "=", "image", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "tw", ",", "y1", "+", "th", ")", ")", "\n", "label", "=", "label", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "tw", ",", "y1", "+", "th", ")", ")", "\n", "sample", "[", "'image'", "]", ",", "sample", "[", "'label'", "]", "=", "image", ",", "label", "\n", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.transforms.RandomHorizontalFlip.__call__": [[220, 227], ["random.random", "image.transpose.transpose.transpose", "label.transpose.transpose.transpose"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.datasets.augmentation.Augmentation.random"], ["    ", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "image", ",", "label", "=", "sample", "[", "'image'", "]", ",", "sample", "[", "'label'", "]", "\n", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "            ", "image", "=", "image", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "label", "=", "label", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "", "sample", "[", "'image'", "]", ",", "sample", "[", "'label'", "]", "=", "image", ",", "label", "\n", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.transforms.Normalize.__init__": [[256, 259], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "mean", ",", "std", ")", ":", "\n", "        ", "self", ".", "mean", "=", "mean", "\n", "self", ".", "std", "=", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.transforms.Normalize.__call__": [[260, 265], ["torchvision.transforms.functional.normalize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ",", "i", ",", "j", ",", "h", ",", "w", ",", "flip_index", ",", "flag", ")", ":", "\n", "        ", "image", ",", "label", "=", "sample", "[", "'image'", "]", ",", "sample", "[", "'label'", "]", "\n", "image", "=", "F", ".", "normalize", "(", "image", ",", "self", ".", "mean", ",", "self", ".", "std", ")", "\n", "sample", "[", "'image'", "]", ",", "sample", "[", "'label'", "]", "=", "image", ",", "label", "\n", "return", "sample", ",", "i", ",", "j", ",", "h", ",", "w", ",", "flip_index", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.transforms.ToTensor.__call__": [[287, 299], ["torchvision.transforms.functional.to_tensor", "torch.from_numpy().unsqueeze().float", "torch.from_numpy().unsqueeze", "torch.from_numpy", "numpy.array"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "sample", ",", "i", ",", "j", ",", "h", ",", "w", ",", "flip_index", ",", "flag", ")", ":", "\n", "        ", "image", ",", "label", "=", "sample", "[", "'image'", "]", ",", "sample", "[", "'label'", "]", "\n", "\n", "# swap color axis because", "\n", "# numpy image: H x W x C", "\n", "# torch image: C X H X W", "\n", "# Image range from [0~255] to [0.0 ~ 1.0]", "\n", "image", "=", "F", ".", "to_tensor", "(", "image", ")", "\n", "if", "label", "is", "not", "None", ":", "\n", "            ", "label", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "label", ")", ")", ".", "unsqueeze", "(", "0", ")", ".", "float", "(", ")", "\n", "", "sample", "[", "'image'", "]", ",", "sample", "[", "'label'", "]", "=", "image", ",", "label", "\n", "return", "sample", ",", "i", ",", "j", ",", "h", ",", "w", ",", "flip_index", "\n", "", "", ""]], "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.transforms.get_transforms": [[44, 75], ["transforms.Video_train_Compose", "transforms.Video_train_Compose", "transforms.Video_train_Compose", "transforms.Video_train_Compose", "transforms.FixedResize", "transforms.ToTensor", "transforms.Normalize", "transforms.FixedResize", "transforms.ToTensor", "transforms.Normalize", "transforms.RandomResizedCrop", "transforms.RandomFlip", "transforms.ToTensor", "transforms.Normalize", "transforms.FixedResize", "transforms.ToTensor", "transforms.Normalize"], "function", ["None"], ["", "", "def", "get_transforms", "(", "image_mode", ",", "input_size", ",", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", ":", "\n", "    ", "data_transforms", "=", "{", "\n", "'train'", ":", "Video_train_Compose", "(", "[", "\n", "# ColorJitter(brightness=.3, contrast=.3, saturation=.3, hue=.3, image_mode=image_mode),", "\n", "RandomResizedCrop", "(", "input_size", ",", "image_mode", ")", ",", "\n", "RandomFlip", "(", "image_mode", ")", ",", "\n", "ToTensor", "(", ")", ",", "\n", "Normalize", "(", "mean", "=", "mean", ",", "\n", "std", "=", "std", ")", "\n", "]", ")", "if", "image_mode", "else", "Video_train_Compose", "(", "[", "\n", "FixedResize", "(", "size", "=", "input_size", ")", ",", "\n", "ToTensor", "(", ")", ",", "\n", "Normalize", "(", "mean", "=", "mean", ",", "\n", "std", "=", "std", ")", "\n", "]", ")", ",", "\n", "'val'", ":", "Video_train_Compose", "(", "[", "\n", "FixedResize", "(", "size", "=", "input_size", ")", ",", "\n", "ToTensor", "(", ")", ",", "\n", "Normalize", "(", "mean", "=", "mean", ",", "\n", "std", "=", "std", ")", "\n", "# ToTensor()", "\n", "]", ")", ",", "\n", "'test'", ":", "Video_train_Compose", "(", "[", "\n", "FixedResize", "(", "size", "=", "input_size", ")", ",", "\n", "ToTensor", "(", ")", ",", "\n", "Normalize", "(", "mean", "=", "mean", ",", "\n", "std", "=", "std", ")", "\n", "# ToTensor()", "\n", "]", ")", ",", "\n", "}", "\n", "return", "data_transforms", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.video_datasets.SaliencyDataset.__init__": [[43, 60], ["os.path.join", "os.path.join", "os.path.join", "os.path.join"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "name", ",", "image_ext", ",", "label_ext", ",", "image_dir", ",", "\n", "label_dir", ",", "root", ",", "split", ",", "training", ",", "transforms", ")", ":", "\n", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "root", "=", "os", ".", "path", ".", "join", "(", "root", ",", "name", ")", "\n", "if", "self", ".", "name", "==", "'NAT2021'", ":", "\n", "            ", "self", ".", "root", "=", "os", ".", "path", ".", "join", "(", "root", ")", "\n", "", "self", ".", "image_ext", "=", "image_ext", "\n", "self", ".", "label_ext", "=", "label_ext", "\n", "self", ".", "image_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ")", "\n", "self", ".", "label_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ")", "\n", "\n", "self", ".", "split", "=", "split", "\n", "# not labels in inference mode", "\n", "self", ".", "training", "=", "training", "\n", "self", ".", "transforms", "=", "transforms", "\n", "self", ".", "files", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.video_datasets.SaliencyDataset._get_frame": [[61, 88], ["PIL.Image.open().convert", "video_datasets.SaliencyDataset.transforms", "numpy.array().astype", "PIL.Image.fromarray", "PIL.Image.open", "PIL.Image.fromarray.max", "numpy.array", "PIL.Image.open().convert", "PIL.Image.open"], "methods", ["None"], ["", "def", "_get_frame", "(", "self", ",", "frame_info", ",", "i", ",", "j", ",", "h", ",", "w", ",", "flip_index", ",", "flag", "=", "False", ")", ":", "\n", "        ", "image_path", "=", "frame_info", "[", "'image_path'", "]", "\n", "image", "=", "Image", ".", "open", "(", "image_path", ")", ".", "convert", "(", "'RGB'", ")", "# RGB format", "\n", "image_size", "=", "image", ".", "size", "[", ":", "2", "]", "\n", "item", "=", "{", "'dataset'", ":", "self", ".", "name", ",", "\n", "'image_id'", ":", "frame_info", "[", "'image_id'", "]", ",", "\n", "'height'", ":", "image_size", "[", "0", "]", ",", "\n", "'width'", ":", "image_size", "[", "1", "]", "}", "\n", "\n", "if", "'label_path'", "in", "frame_info", ":", "\n", "            ", "label", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "frame_info", "[", "'label_path'", "]", ")", ".", "convert", "(", "'L'", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "# if label.max() > 1:", "\n", "#    label = (label >= 128).astype(np.uint8) # convert 255 to 1", "\n", "# else:", "\n", "#    label = (label >= 0.5).astype(np.uint8)", "\n", "if", "label", ".", "max", "(", ")", ">", "1", ":", "\n", "                ", "label", "=", "label", "/", "255.0", "\n", "", "label", "=", "Image", ".", "fromarray", "(", "label", ")", "\n", "", "else", ":", "\n", "            ", "label", "=", "None", "\n", "\n", "", "sample", "=", "{", "'image'", ":", "image", ",", "'label'", ":", "label", "}", "\n", "sample", ",", "i", ",", "j", ",", "h", ",", "w", ",", "flip_index", "=", "self", ".", "transforms", "(", "sample", ",", "i", "=", "i", ",", "j", "=", "j", ",", "h", "=", "h", ",", "w", "=", "w", ",", "flip_index", "=", "flip_index", ",", "flag", "=", "flag", ")", "\n", "item", "[", "'image'", "]", "=", "sample", "[", "'image'", "]", "\n", "if", "label", "is", "not", "None", ":", "\n", "            ", "item", "[", "'label'", "]", "=", "sample", "[", "'label'", "]", "\n", "", "return", "item", ",", "i", ",", "j", ",", "h", ",", "w", ",", "flip_index", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.video_datasets.SaliencyDataset._set_files": [[89, 91], ["NotImplementedError"], "methods", ["None"], ["", "def", "_set_files", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.video_datasets.SaliencyDataset.__len__": [[92, 94], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "files", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.video_datasets.ImageDataset.__init__": [[101, 105], ["video_datasets.SaliencyDataset.__init__", "video_datasets.ImageDataset._set_files"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamban_tracker.SiamBANTracker.__init__", "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.video_datasets.VideoClipDataset._set_files"], ["def", "__init__", "(", "self", ",", "split_dir", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "ImageDataset", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "split_dir", "=", "split_dir", "\n", "self", ".", "_set_files", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.video_datasets.ImageDataset._set_files": [[106, 125], ["os.path.join", "os.listdir", "os.path.join", "video_datasets.ImageDataset.files.append", "os.path.isfile", "FileNotFoundError", "os.path.join", "os.path.isfile", "FileNotFoundError"], "methods", ["None"], ["", "def", "_set_files", "(", "self", ")", ":", "\n", "# txt_fname = os.path.join(self.root, self.split_dir, self.split + \"_id.txt\")", "\n", "# with open(txt_fname, 'r') as f:", "\n", "#     images_id = f.read().split()", "\n", "        ", "txt_fname", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "split", ")", "\n", "images_id", "=", "os", ".", "listdir", "(", "txt_fname", ")", "\n", "for", "image_id", "in", "images_id", ":", "\n", "            ", "image_id", "=", "image_id", "[", ":", "-", "4", "]", "\n", "image_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "image_dir", ",", "image_id", "+", "self", ".", "image_ext", ")", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "image_path", ")", ":", "\n", "                ", "raise", "FileNotFoundError", "(", "image_path", ")", "\n", "", "frame_info", "=", "{", "'image_id'", ":", "image_id", ",", "\n", "'image_path'", ":", "image_path", "}", "\n", "if", "self", ".", "training", ":", "\n", "                ", "label_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "label_dir", ",", "image_id", "+", "self", ".", "label_ext", ")", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "label_path", ")", ":", "\n", "                    ", "raise", "FileNotFoundError", "(", "label_path", ")", "\n", "", "frame_info", "[", "'label_path'", "]", "=", "label_path", "\n", "", "self", ".", "files", ".", "append", "(", "frame_info", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.video_datasets.ImageDataset.__getitem__": [[126, 129], ["video_datasets.ImageDataset._get_frame"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.datasets.video_datasets.SaliencyDataset._get_frame"], ["", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "frame_info", "=", "self", ".", "files", "[", "index", "]", "\n", "return", "self", ".", "_get_frame", "(", "frame_info", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.video_datasets.VideoDataset.__init__": [[148, 158], ["video_datasets.SaliencyDataset.__init__", "ValueError"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamban_tracker.SiamBANTracker.__init__"], ["def", "__init__", "(", "self", ",", "video_split", ",", "default_label_interval", ",", "label_interval", ",", "frame_between_label_num", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "VideoDataset", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "self", ".", "video_split", "=", "video_split", "\n", "self", ".", "label_interval", "=", "label_interval", "\n", "self", ".", "frame_between_label_num", "=", "frame_between_label_num", "# the number of frame without label between two frames with label", "\n", "self", ".", "default_label_interval", "=", "default_label_interval", "# default labels interval of this dataset", "\n", "if", "self", ".", "frame_between_label_num", ">=", "self", ".", "label_interval", "*", "self", ".", "default_label_interval", ":", "\n", "            ", "raise", "ValueError", "(", "\"The number of frame without label {} should be smaller than {}*{}\"", ",", "\n", "self", ".", "frame_between_label_num", ",", "self", ".", "label_interval", ",", "self", ".", "default_label_interval", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.video_datasets.VideoDataset._get_frame_list": [[159, 177], ["os.path.join", "os.path.join", "sorted", "sorted", "glob.glob.glob", "FileNotFoundError", "[].replace", "glob.glob.glob", "[].replace", "frame_id_list.index", "os.path.join", "os.path.join", "f.split", "f.split"], "methods", ["None"], ["", "", "def", "_get_frame_list", "(", "self", ",", "video", ")", ":", "\n", "        ", "image_path_root", "=", "os", ".", "path", ".", "join", "(", "self", ".", "image_dir", ",", "video", ")", "# , 'Imgs2_1'", "\n", "label_path_root", "=", "os", ".", "path", ".", "join", "(", "self", ".", "label_dir", ",", "video", ")", "# , 'ground-truth'", "\n", "# the list of all frame", "\n", "frame_list", "=", "sorted", "(", "glob", "(", "os", ".", "path", ".", "join", "(", "image_path_root", ",", "\"*\"", "+", "self", ".", "image_ext", ")", ")", ")", "\n", "if", "not", "frame_list", ":", "\n", "            ", "raise", "FileNotFoundError", "(", "image_path_root", ")", "\n", "", "frame_id_list", "=", "[", "f", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", ".", "replace", "(", "self", ".", "image_ext", ",", "\"\"", ")", "for", "f", "in", "frame_list", "]", "\n", "# the list of frame with labels", "\n", "label_list", "=", "sorted", "(", "glob", "(", "os", ".", "path", ".", "join", "(", "label_path_root", ",", "\"*\"", "+", "self", ".", "label_ext", ")", ")", ")", "\n", "# if not label_list:", "\n", "#    raise FileNotFoundError(label_path_root)", "\n", "label_list", "=", "label_list", "[", ":", ":", "self", ".", "label_interval", "]", "if", "self", ".", "training", "else", "label_list", "\n", "label_id_list", "=", "[", "f", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", ".", "replace", "(", "self", ".", "label_ext", ",", "\"\"", ")", "for", "f", "in", "label_list", "]", "\n", "# the index of frames with label", "\n", "label_id_index", "=", "[", "frame_id_list", ".", "index", "(", "label_id", ")", "for", "label_id", "in", "label_id_list", "]", "\n", "\n", "return", "frame_id_list", ",", "label_id_index", ",", "image_path_root", ",", "label_path_root", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.video_datasets.VideoDataset._get_video_info": [[178, 192], ["video_datasets.VideoDataset._get_frame_list", "os.path.join", "video_info.append", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.datasets.video_datasets.VideoDataset._get_frame_list"], ["", "def", "_get_video_info", "(", "self", ",", "video", ")", ":", "\n", "        ", "frame_id_list", ",", "label_id_index", ",", "image_path_root", ",", "label_path_root", "=", "self", ".", "_get_frame_list", "(", "video", ")", "\n", "# set up video info", "\n", "video_info", "=", "[", "]", "\n", "for", "image_id", "in", "frame_id_list", ":", "\n", "            ", "image_path", "=", "os", ".", "path", ".", "join", "(", "image_path_root", ",", "image_id", "+", "self", ".", "image_ext", ")", "\n", "frame_info", "=", "{", "'image_id'", ":", "\"{}/{}\"", ".", "format", "(", "video", ",", "image_id", ")", ",", "\n", "'image_path'", ":", "image_path", "}", "\n", "video_info", ".", "append", "(", "frame_info", ")", "\n", "", "for", "index", "in", "label_id_index", ":", "\n", "            ", "image_id", "=", "frame_id_list", "[", "index", "]", "\n", "label_path", "=", "os", ".", "path", ".", "join", "(", "label_path_root", ",", "image_id", "+", "self", ".", "label_ext", ")", "\n", "video_info", "[", "index", "]", "[", "'label_path'", "]", "=", "label_path", "\n", "", "return", "video_info", ",", "label_id_index", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.video_datasets.VideoImageDataset.__init__": [[199, 202], ["video_datasets.VideoDataset.__init__", "video_datasets.VideoImageDataset._set_files"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamban_tracker.SiamBANTracker.__init__", "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.video_datasets.VideoClipDataset._set_files"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "VideoImageDataset", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "_set_files", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.video_datasets.VideoImageDataset._set_files": [[203, 211], ["list", "ValueError", "video_datasets.VideoImageDataset.video_split.keys", "video_datasets.VideoImageDataset._get_video_info"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.datasets.video_datasets.VideoDataset._get_video_info"], ["", "def", "_set_files", "(", "self", ")", ":", "\n", "        ", "self", ".", "files", "=", "[", "]", "\n", "if", "self", ".", "split", "in", "list", "(", "self", ".", "video_split", ".", "keys", "(", ")", ")", ":", "\n", "            ", "for", "video", "in", "self", ".", "video_split", "[", "self", ".", "split", "]", ":", "\n", "                ", "video_info", ",", "label_id_index", "=", "self", ".", "_get_video_info", "(", "video", ")", "\n", "self", ".", "files", "+=", "[", "video_info", "[", "i", "]", "for", "i", "in", "label_id_index", "]", "\n", "", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid split name: {}\"", ".", "format", "(", "self", ".", "split", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.video_datasets.VideoImageDataset.__getitem__": [[212, 215], ["video_datasets.VideoImageDataset._get_frame"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.datasets.video_datasets.SaliencyDataset._get_frame"], ["", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "frame_info", "=", "self", ".", "files", "[", "index", "]", "\n", "return", "self", ".", "_get_frame", "(", "frame_info", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.video_datasets.VideoImageDataset._reset_files": [[216, 221], ["video_datasets.VideoImageDataset.files.clear", "video_datasets.VideoImageDataset._set_files"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.datasets.video_datasets.VideoClipDataset._set_files"], ["", "def", "_reset_files", "(", "self", ",", "label_dir", ")", ":", "\n", "        ", "self", ".", "files", ".", "clear", "(", ")", "\n", "self", ".", "label_dir", "=", "label_dir", "\n", "self", ".", "label_interval", "=", "1", "\n", "self", ".", "_set_files", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.video_datasets.VideoClipDataset.__init__": [[245, 255], ["video_datasets.VideoDataset.__init__", "video_datasets.VideoClipDataset._set_files"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamban_tracker.SiamBANTracker.__init__", "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.video_datasets.VideoClipDataset._set_files"], ["def", "__init__", "(", "self", ",", "clip_len", ",", "random_reverse_clip", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "VideoClipDataset", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "self", ".", "random_reverse_clip", "=", "random_reverse_clip", "\n", "self", ".", "clip_len", "=", "clip_len", "if", "self", ".", "frame_between_label_num", "==", "0", "else", "self", ".", "frame_between_label_num", "+", "2", "\n", "\n", "self", ".", "clips", "=", "[", "]", "\n", "self", ".", "frame_wo_label_interval", "=", "(", "self", ".", "label_interval", "*", "self", ".", "default_label_interval", ")", "//", "(", "\n", "self", ".", "frame_between_label_num", "+", "1", ")", "\n", "self", ".", "_set_files", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.video_datasets.VideoClipDataset._get_clips": [[256, 276], ["indexes.append", "indexes.append", "range", "len", "clips.append", "len", "clips.append", "indexes.append", "len", "len", "len", "len"], "methods", ["None"], ["", "def", "_get_clips", "(", "self", ",", "video_index", ",", "label_id_index", ")", ":", "\n", "        ", "indexes", "=", "[", "]", "\n", "for", "index", "in", "label_id_index", "[", ":", "-", "1", "]", ":", "\n", "            ", "indexes", ".", "append", "(", "index", ")", "\n", "for", "j", "in", "range", "(", "self", ".", "frame_between_label_num", ")", ":", "\n", "                ", "indexes", ".", "append", "(", "index", "+", "self", ".", "frame_wo_label_interval", "*", "(", "j", "+", "1", ")", ")", "\n", "", "", "indexes", ".", "append", "(", "label_id_index", "[", "-", "1", "]", ")", "\n", "if", "len", "(", "indexes", ")", "<", "self", ".", "clip_len", ":", "\n", "            ", "indexes", "=", "indexes", "+", "[", "indexes", "[", "-", "1", "]", "]", "*", "(", "self", ".", "clip_len", "-", "len", "(", "indexes", ")", ")", "\n", "", "clips", "=", "[", "]", "\n", "clip_start_index", "=", "0", "\n", "while", "clip_start_index", "<=", "len", "(", "indexes", ")", "-", "self", ".", "clip_len", ":", "\n", "            ", "clips", ".", "append", "(", "{", "'video_index'", ":", "video_index", ",", "\n", "'clip_frame_index'", ":", "indexes", "[", "clip_start_index", ":", "clip_start_index", "+", "self", ".", "clip_len", "]", "}", ")", "\n", "clip_start_index", "+=", "self", ".", "clip_len", "-", "1", "if", "self", ".", "training", "else", "self", ".", "clip_len", "\n", "# last clip", "\n", "", "if", "clip_start_index", "<", "len", "(", "indexes", ")", ":", "\n", "            ", "clips", ".", "append", "(", "\n", "{", "'video_index'", ":", "video_index", ",", "'clip_frame_index'", ":", "indexes", "[", "len", "(", "indexes", ")", "-", "self", ".", "clip_len", ":", "len", "(", "indexes", ")", "]", "}", ")", "\n", "", "return", "clips", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.video_datasets.VideoClipDataset._reset_files": [[277, 285], ["video_datasets.VideoClipDataset.files.clear", "video_datasets.VideoClipDataset.clips.clear", "video_datasets.VideoClipDataset._set_files"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.datasets.video_datasets.VideoClipDataset._set_files"], ["", "def", "_reset_files", "(", "self", ",", "clip_len", ",", "label_dir", ")", ":", "\n", "        ", "self", ".", "files", ".", "clear", "(", ")", "\n", "self", ".", "clips", ".", "clear", "(", ")", "\n", "self", ".", "label_dir", "=", "label_dir", "\n", "self", ".", "label_interval", "=", "1", "\n", "self", ".", "clip_len", "=", "clip_len", "\n", "self", ".", "frame_between_label_num", "=", "0", "\n", "self", ".", "_set_files", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.video_datasets.VideoClipDataset._set_files": [[286, 296], ["list", "enumerate", "ValueError", "video_datasets.VideoClipDataset.video_split.keys", "video_datasets.VideoClipDataset._get_video_info", "video_datasets.VideoClipDataset.files.append", "video_datasets.VideoClipDataset._get_clips", "len"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.datasets.video_datasets.VideoDataset._get_video_info", "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.video_datasets.VideoClipDataset._get_clips"], ["", "def", "_set_files", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "split", "in", "list", "(", "self", ".", "video_split", ".", "keys", "(", ")", ")", ":", "\n", "            ", "for", "video_index", ",", "video", "in", "enumerate", "(", "self", ".", "video_split", "[", "self", ".", "split", "]", ")", ":", "\n", "                ", "video_info", ",", "label_id_index", "=", "self", ".", "_get_video_info", "(", "video", ")", "\n", "if", "not", "len", "(", "video_info", ")", ":", "\n", "                    ", "continue", "\n", "", "self", ".", "files", ".", "append", "(", "video_info", ")", "\n", "self", ".", "clips", "+=", "self", ".", "_get_clips", "(", "video_index", ",", "label_id_index", ")", "\n", "", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid split name: {}\"", ".", "format", "(", "self", ".", "split", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.video_datasets.VideoClipDataset.__getitem__": [[297, 312], ["enumerate", "random.randint", "clip.append", "video_datasets.VideoClipDataset._get_frame", "video_datasets.VideoClipDataset._get_frame"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.datasets.video_datasets.SaliencyDataset._get_frame", "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.video_datasets.SaliencyDataset._get_frame"], ["", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "clip", "=", "[", "]", "\n", "clip_frame_index", "=", "self", ".", "clips", "[", "index", "]", "[", "'clip_frame_index'", "]", "\n", "video_index", "=", "self", ".", "clips", "[", "index", "]", "[", "'video_index'", "]", "\n", "# random reverse video when training", "\n", "if", "self", ".", "random_reverse_clip", "and", "random", ".", "randint", "(", "0", ",", "1", ")", ":", "\n", "            ", "clip_frame_index", "=", "clip_frame_index", "[", ":", ":", "-", "1", "]", "\n", "", "for", "index", ",", "k", "in", "enumerate", "(", "clip_frame_index", ")", ":", "\n", "            ", "frame_info", "=", "self", ".", "files", "[", "video_index", "]", "[", "k", "]", "\n", "if", "index", "==", "0", ":", "\n", "                ", "item", ",", "i", ",", "j", ",", "h", ",", "w", ",", "flip_index", "=", "self", ".", "_get_frame", "(", "frame_info", ",", "i", "=", "0", ",", "j", "=", "0", ",", "h", "=", "0", ",", "w", "=", "0", ",", "flip_index", "=", "None", ",", "flag", "=", "False", ")", "\n", "", "else", ":", "\n", "                ", "item", ",", "i", ",", "j", ",", "h", ",", "w", ",", "flip_index", "=", "self", ".", "_get_frame", "(", "frame_info", ",", "i", "=", "i", ",", "j", "=", "j", ",", "h", "=", "h", ",", "w", "=", "w", ",", "flip_index", "=", "flip_index", ",", "flag", "=", "True", ")", "\n", "", "clip", ".", "append", "(", "item", ")", "\n", "", "return", "clip", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.video_datasets.VideoClipDataset.__len__": [[313, 315], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "clips", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.video_datasets.get_datasets": [[317, 361], ["yaml.load", "zip", "isinstance", "isinstance", "len", "len", "ValueError", "open", "dataset_list.append", "len", "torch.utils.data.ConcatDataset", "yaml.load.keys", "ValueError", "video_datasets.ImageDataset", "video_datasets.VideoClipDataset", "video_datasets.VideoImageDataset"], "function", ["None"], ["", "", "def", "get_datasets", "(", "name_list", ",", "split_list", ",", "config_path", ",", "root", ",", "training", ",", "transforms", ",", "\n", "read_clip", "=", "False", ",", "random_reverse_clip", "=", "False", ",", "label_interval", "=", "1", ",", "frame_between_label_num", "=", "0", ",", "clip_len", "=", "4", ")", ":", "\n", "    ", "\"\"\"\n        return type of data.ConcatDataset or single dataset data.Dataset\n    \"\"\"", "\n", "if", "not", "isinstance", "(", "name_list", ",", "list", ")", ":", "\n", "        ", "name_list", "=", "[", "name_list", "]", "\n", "", "if", "not", "isinstance", "(", "split_list", ",", "list", ")", ":", "\n", "        ", "split_list", "=", "[", "split_list", "]", "\n", "", "if", "len", "(", "name_list", ")", "!=", "len", "(", "split_list", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\"Dataset numbers must match split numbers\"", ")", "\n", "# read dataset config", "\n", "", "datasets_config", "=", "yaml", ".", "load", "(", "open", "(", "config_path", ")", ")", "\n", "# get datasets", "\n", "dataset_list", "=", "[", "]", "\n", "for", "name", ",", "split", "in", "zip", "(", "name_list", ",", "split_list", ")", ":", "\n", "        ", "if", "name", "not", "in", "datasets_config", ".", "keys", "(", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"Error dataset name {}\"", ".", "format", "(", "name", ")", ")", "\n", "\n", "", "dataset_config", "=", "datasets_config", "[", "name", "]", "\n", "dataset_config", "[", "'name'", "]", "=", "name", "\n", "dataset_config", "[", "'root'", "]", "=", "root", "\n", "dataset_config", "[", "'split'", "]", "=", "split", "\n", "dataset_config", "[", "'training'", "]", "=", "training", "\n", "dataset_config", "[", "'transforms'", "]", "=", "transforms", "\n", "\n", "if", "\"video_split\"", "in", "dataset_config", ":", "\n", "            ", "dataset_config", "[", "'label_interval'", "]", "=", "label_interval", "\n", "dataset_config", "[", "'frame_between_label_num'", "]", "=", "frame_between_label_num", "\n", "if", "read_clip", ":", "\n", "                ", "dataset", "=", "VideoClipDataset", "(", "clip_len", "=", "clip_len", ",", "\n", "random_reverse_clip", "=", "random_reverse_clip", ",", "\n", "**", "dataset_config", ")", "\n", "", "else", ":", "\n", "                ", "dataset", "=", "VideoImageDataset", "(", "**", "dataset_config", ")", "\n", "", "", "else", ":", "\n", "            ", "dataset", "=", "ImageDataset", "(", "**", "dataset_config", ")", "\n", "\n", "", "dataset_list", ".", "append", "(", "dataset", ")", "\n", "\n", "", "if", "len", "(", "dataset_list", ")", "==", "1", ":", "\n", "        ", "return", "dataset_list", "[", "0", "]", "\n", "", "else", ":", "\n", "        ", "return", "data", ".", "ConcatDataset", "(", "dataset_list", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.uavdark70.UAVVideo.__init__": [[79, 83], ["video.Video.__init__"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamban_tracker.SiamBANTracker.__init__"], ["def", "__init__", "(", "self", ",", "name", ",", "root", ",", "video_dir", ",", "init_rect", ",", "img_names", ",", "\n", "gt_rect", ",", "attr", ",", "load_img", "=", "False", ")", ":", "\n", "        ", "super", "(", "UAVVideo", ",", "self", ")", ".", "__init__", "(", "name", ",", "root", ",", "video_dir", ",", "\n", "init_rect", ",", "img_names", ",", "gt_rect", ",", "attr", ",", "load_img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.uavdark70.UAVDARK70Dataset.__init__": [[92, 122], ["dataset.Dataset.__init__", "uavdark70.ca", "tqdm.tqdm.tqdm", "uavdark70.UAVDARK70Dataset.videos.values", "set", "list", "uavdark70.UAVDARK70Dataset.videos.items", "ca.keys", "tqdm.tqdm.tqdm.set_postfix_str", "uavdark70.UAVVideo", "uavdark70.UAVDARK70Dataset.videos.keys", "uavdark70.UAVDARK70Dataset.attr[].append"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamban_tracker.SiamBANTracker.__init__", "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.UAVDark70.ca"], ["def", "__init__", "(", "self", ",", "name", ",", "dataset_root", ",", "load_img", "=", "False", ")", ":", "\n", "        ", "super", "(", "UAVDARK70Dataset", ",", "self", ")", ".", "__init__", "(", "name", ",", "dataset_root", ")", "\n", "dataset_root", "=", "dataset_root", "+", "'/UAVDark70'", "\n", "meta_data", "=", "ca", "(", "dataset_root", ")", "\n", "dataset_root", "=", "dataset_root", "+", "'/data_seq'", "\n", "# load videos", "\n", "pbar", "=", "tqdm", "(", "meta_data", ".", "keys", "(", ")", ",", "desc", "=", "'loading '", "+", "name", ",", "ncols", "=", "100", ")", "\n", "self", ".", "videos", "=", "{", "}", "\n", "for", "video", "in", "pbar", ":", "\n", "            ", "pbar", ".", "set_postfix_str", "(", "video", ")", "\n", "self", ".", "videos", "[", "video", "]", "=", "UAVVideo", "(", "video", ",", "\n", "dataset_root", ",", "\n", "meta_data", "[", "video", "]", "[", "'video_dir'", "]", ",", "\n", "meta_data", "[", "video", "]", "[", "'init_rect'", "]", ",", "\n", "meta_data", "[", "video", "]", "[", "'img_names'", "]", ",", "\n", "meta_data", "[", "video", "]", "[", "'gt_rect'", "]", ",", "\n", "meta_data", "[", "video", "]", "[", "'attr'", "]", ")", "\n", "\n", "# set attr", "\n", "", "attr", "=", "[", "]", "\n", "for", "x", "in", "self", ".", "videos", ".", "values", "(", ")", ":", "\n", "            ", "attr", "+=", "x", ".", "attr", "\n", "", "attr", "=", "set", "(", "attr", ")", "\n", "self", ".", "attr", "=", "{", "}", "\n", "self", ".", "attr", "[", "'ALL'", "]", "=", "list", "(", "self", ".", "videos", ".", "keys", "(", ")", ")", "\n", "for", "x", "in", "attr", ":", "\n", "            ", "self", ".", "attr", "[", "x", "]", "=", "[", "]", "\n", "", "for", "k", ",", "v", "in", "self", ".", "videos", ".", "items", "(", ")", ":", "\n", "            ", "for", "attr_", "in", "v", ".", "attr", ":", "\n", "                ", "self", ".", "attr", "[", "attr_", "]", ".", "append", "(", "k", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.uavdark70.ca": [[13, 67], ["os.listdir", "os.listdir.sort", "range", "range", "dict", "len", "b.append", "len", "open", "open.readlines", "os.listdir", "os.listdir.sort", "range", "open.close", "c.append", "zip", "str", "len", "file[].strip().split", "bbox.append", "len", "len", "print", "str", "int", "int", "int", "int", "file[].strip", "float", "float", "float", "float"], "function", ["None"], ["def", "ca", "(", "dataset_root", ")", ":", "\n", "\n", "    ", "path", "=", "dataset_root", "\n", "\n", "name_list", "=", "os", ".", "listdir", "(", "path", "+", "'/data_seq'", ")", "\n", "name_list", ".", "sort", "(", ")", "\n", "\n", "b", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "name_list", ")", ")", ":", "\n", "        ", "b", ".", "append", "(", "name_list", "[", "i", "]", ")", "\n", "", "c", "=", "[", "]", "\n", "\n", "for", "jj", "in", "range", "(", "len", "(", "name_list", ")", ")", ":", "\n", "        ", "imgs", "=", "path", "+", "'/data_seq/'", "+", "str", "(", "name_list", "[", "jj", "]", ")", "\n", "txt", "=", "path", "+", "'/anno/'", "+", "str", "(", "name_list", "[", "jj", "]", ")", "+", "'.txt'", "\n", "bbox", "=", "[", "]", "\n", "f", "=", "open", "(", "txt", ")", "\n", "file", "=", "f", ".", "readlines", "(", ")", "\n", "li", "=", "os", ".", "listdir", "(", "imgs", ")", "\n", "li", ".", "sort", "(", ")", "\n", "for", "ii", "in", "range", "(", "len", "(", "file", ")", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "li", "[", "ii", "]", "=", "name_list", "[", "jj", "]", "+", "'/'", "+", "li", "[", "ii", "]", "\n", "", "except", ":", "\n", "                ", "a", "=", "1", "\n", "\n", "", "line", "=", "file", "[", "ii", "]", ".", "strip", "(", "'\\n'", ")", ".", "split", "(", "','", ")", "\n", "\n", "try", ":", "\n", "                ", "line", "[", "0", "]", "=", "int", "(", "line", "[", "0", "]", ")", "\n", "", "except", ":", "\n", "                ", "line", "[", "0", "]", "=", "float", "(", "line", "[", "0", "]", ")", "\n", "", "try", ":", "\n", "                ", "line", "[", "1", "]", "=", "int", "(", "line", "[", "1", "]", ")", "\n", "", "except", ":", "\n", "                ", "line", "[", "1", "]", "=", "float", "(", "line", "[", "1", "]", ")", "\n", "", "try", ":", "\n", "                ", "line", "[", "2", "]", "=", "int", "(", "line", "[", "2", "]", ")", "\n", "", "except", ":", "\n", "                ", "line", "[", "2", "]", "=", "float", "(", "line", "[", "2", "]", ")", "\n", "", "try", ":", "\n", "                ", "line", "[", "3", "]", "=", "int", "(", "line", "[", "3", "]", ")", "\n", "", "except", ":", "\n", "                ", "line", "[", "3", "]", "=", "float", "(", "line", "[", "3", "]", ")", "\n", "", "bbox", ".", "append", "(", "line", ")", "\n", "\n", "", "if", "len", "(", "bbox", ")", "!=", "len", "(", "li", ")", ":", "\n", "            ", "print", "(", "jj", ")", "\n", "", "f", ".", "close", "(", ")", "\n", "c", ".", "append", "(", "{", "'attr'", ":", "[", "]", ",", "'gt_rect'", ":", "bbox", ",", "'img_names'", ":", "li", ",", "'init_rect'", ":", "bbox", "[", "0", "]", ",", "'video_dir'", ":", "name_list", "[", "jj", "]", "}", ")", "\n", "\n", "", "d", "=", "dict", "(", "zip", "(", "b", ",", "c", ")", ")", "\n", "\n", "return", "d", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.nat.UAVVideo.__init__": [[79, 83], ["video.Video.__init__"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamban_tracker.SiamBANTracker.__init__"], ["def", "__init__", "(", "self", ",", "name", ",", "root", ",", "video_dir", ",", "init_rect", ",", "img_names", ",", "\n", "gt_rect", ",", "attr", ",", "load_img", "=", "False", ")", ":", "\n", "        ", "super", "(", "UAVVideo", ",", "self", ")", ".", "__init__", "(", "name", ",", "root", ",", "video_dir", ",", "\n", "init_rect", ",", "img_names", ",", "gt_rect", ",", "attr", ",", "load_img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.nat.NATDataset.__init__": [[92, 122], ["dataset.Dataset.__init__", "nat.ca", "tqdm.tqdm.tqdm", "nat.NATDataset.videos.values", "set", "list", "nat.NATDataset.videos.items", "ca.keys", "tqdm.tqdm.tqdm.set_postfix_str", "nat.UAVVideo", "nat.NATDataset.videos.keys", "nat.NATDataset.attr[].append"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamban_tracker.SiamBANTracker.__init__", "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.UAVDark70.ca"], ["def", "__init__", "(", "self", ",", "name", ",", "dataset_root", ",", "load_img", "=", "False", ")", ":", "\n", "        ", "super", "(", "NATDataset", ",", "self", ")", ".", "__init__", "(", "name", ",", "dataset_root", ")", "\n", "dataset_root", "=", "dataset_root", "+", "'/NAT2021'", "\n", "meta_data", "=", "ca", "(", "dataset_root", ")", "\n", "dataset_root", "=", "dataset_root", "+", "'/data_seq'", "\n", "# load videos", "\n", "pbar", "=", "tqdm", "(", "meta_data", ".", "keys", "(", ")", ",", "desc", "=", "'loading '", "+", "name", ",", "ncols", "=", "100", ")", "\n", "self", ".", "videos", "=", "{", "}", "\n", "for", "video", "in", "pbar", ":", "\n", "            ", "pbar", ".", "set_postfix_str", "(", "video", ")", "\n", "self", ".", "videos", "[", "video", "]", "=", "UAVVideo", "(", "video", ",", "\n", "dataset_root", ",", "\n", "meta_data", "[", "video", "]", "[", "'video_dir'", "]", ",", "\n", "meta_data", "[", "video", "]", "[", "'init_rect'", "]", ",", "\n", "meta_data", "[", "video", "]", "[", "'img_names'", "]", ",", "\n", "meta_data", "[", "video", "]", "[", "'gt_rect'", "]", ",", "\n", "meta_data", "[", "video", "]", "[", "'attr'", "]", ")", "\n", "\n", "# set attr", "\n", "", "attr", "=", "[", "]", "\n", "for", "x", "in", "self", ".", "videos", ".", "values", "(", ")", ":", "\n", "            ", "attr", "+=", "x", ".", "attr", "\n", "", "attr", "=", "set", "(", "attr", ")", "\n", "self", ".", "attr", "=", "{", "}", "\n", "self", ".", "attr", "[", "'ALL'", "]", "=", "list", "(", "self", ".", "videos", ".", "keys", "(", ")", ")", "\n", "for", "x", "in", "attr", ":", "\n", "            ", "self", ".", "attr", "[", "x", "]", "=", "[", "]", "\n", "", "for", "k", ",", "v", "in", "self", ".", "videos", ".", "items", "(", ")", ":", "\n", "            ", "for", "attr_", "in", "v", ".", "attr", ":", "\n", "                ", "self", ".", "attr", "[", "attr_", "]", ".", "append", "(", "k", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.nat.ca": [[13, 67], ["os.listdir", "os.listdir.sort", "range", "range", "dict", "len", "b.append", "len", "open", "open.readlines", "os.listdir", "os.listdir.sort", "range", "open.close", "c.append", "zip", "str", "len", "file[].strip().split", "bbox.append", "len", "len", "print", "str", "int", "int", "int", "int", "file[].strip", "float", "float", "float", "float"], "function", ["None"], ["def", "ca", "(", "dataset_root", ")", ":", "\n", "\n", "    ", "path", "=", "dataset_root", "\n", "\n", "name_list", "=", "os", ".", "listdir", "(", "path", "+", "'/data_seq'", ")", "\n", "name_list", ".", "sort", "(", ")", "\n", "\n", "b", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "name_list", ")", ")", ":", "\n", "        ", "b", ".", "append", "(", "name_list", "[", "i", "]", ")", "\n", "", "c", "=", "[", "]", "\n", "\n", "for", "jj", "in", "range", "(", "len", "(", "name_list", ")", ")", ":", "\n", "        ", "imgs", "=", "path", "+", "'/data_seq/'", "+", "str", "(", "name_list", "[", "jj", "]", ")", "\n", "txt", "=", "path", "+", "'/anno/'", "+", "str", "(", "name_list", "[", "jj", "]", ")", "+", "'.txt'", "\n", "bbox", "=", "[", "]", "\n", "f", "=", "open", "(", "txt", ")", "\n", "file", "=", "f", ".", "readlines", "(", ")", "\n", "li", "=", "os", ".", "listdir", "(", "imgs", ")", "\n", "li", ".", "sort", "(", ")", "\n", "for", "ii", "in", "range", "(", "len", "(", "file", ")", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "li", "[", "ii", "]", "=", "name_list", "[", "jj", "]", "+", "'/'", "+", "li", "[", "ii", "]", "\n", "", "except", ":", "\n", "                ", "a", "=", "1", "\n", "\n", "", "line", "=", "file", "[", "ii", "]", ".", "strip", "(", "'\\n'", ")", ".", "split", "(", "','", ")", "\n", "\n", "try", ":", "\n", "                ", "line", "[", "0", "]", "=", "int", "(", "line", "[", "0", "]", ")", "\n", "", "except", ":", "\n", "                ", "line", "[", "0", "]", "=", "float", "(", "line", "[", "0", "]", ")", "\n", "", "try", ":", "\n", "                ", "line", "[", "1", "]", "=", "int", "(", "line", "[", "1", "]", ")", "\n", "", "except", ":", "\n", "                ", "line", "[", "1", "]", "=", "float", "(", "line", "[", "1", "]", ")", "\n", "", "try", ":", "\n", "                ", "line", "[", "2", "]", "=", "int", "(", "line", "[", "2", "]", ")", "\n", "", "except", ":", "\n", "                ", "line", "[", "2", "]", "=", "float", "(", "line", "[", "2", "]", ")", "\n", "", "try", ":", "\n", "                ", "line", "[", "3", "]", "=", "int", "(", "line", "[", "3", "]", ")", "\n", "", "except", ":", "\n", "                ", "line", "[", "3", "]", "=", "float", "(", "line", "[", "3", "]", ")", "\n", "", "bbox", ".", "append", "(", "line", ")", "\n", "\n", "", "if", "len", "(", "bbox", ")", "!=", "len", "(", "li", ")", ":", "\n", "            ", "print", "(", "jj", ")", "\n", "", "f", ".", "close", "(", ")", "\n", "c", ".", "append", "(", "{", "'attr'", ":", "[", "]", ",", "'gt_rect'", ":", "bbox", ",", "'img_names'", ":", "li", ",", "'init_rect'", ":", "bbox", "[", "0", "]", ",", "'video_dir'", ":", "name_list", "[", "jj", "]", "}", ")", "\n", "\n", "", "d", "=", "dict", "(", "zip", "(", "b", ",", "c", ")", ")", "\n", "\n", "return", "d", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.video.Video.__init__": [[10, 30], ["os.path.join", "cv2.imread", "cv2.imread"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "root", ",", "video_dir", ",", "init_rect", ",", "img_names", ",", "\n", "gt_rect", ",", "attr", ",", "load_img", "=", "False", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "video_dir", "=", "video_dir", "\n", "self", ".", "init_rect", "=", "init_rect", "\n", "self", ".", "gt_traj", "=", "gt_rect", "\n", "self", ".", "attr", "=", "attr", "\n", "self", ".", "pred_trajs", "=", "{", "}", "\n", "self", ".", "img_names", "=", "[", "os", ".", "path", ".", "join", "(", "root", ",", "x", ")", "for", "x", "in", "img_names", "]", "\n", "self", ".", "imgs", "=", "None", "\n", "\n", "if", "load_img", ":", "\n", "            ", "self", ".", "imgs", "=", "[", "cv2", ".", "imread", "(", "x", ")", "for", "x", "in", "self", ".", "img_names", "]", "\n", "self", ".", "width", "=", "self", ".", "imgs", "[", "0", "]", ".", "shape", "[", "1", "]", "\n", "self", ".", "height", "=", "self", ".", "imgs", "[", "0", "]", ".", "shape", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "img", "=", "cv2", ".", "imread", "(", "self", ".", "img_names", "[", "0", "]", ")", "\n", "assert", "img", "is", "not", "None", ",", "self", ".", "img_names", "[", "0", "]", "\n", "self", ".", "width", "=", "img", ".", "shape", "[", "1", "]", "\n", "self", ".", "height", "=", "img", ".", "shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.video.Video.load_tracker": [[31, 57], ["isinstance", "list", "os.path.join", "os.path.exists", "video.Video.pred_trajs.keys", "print", "x.split", "glob.glob.glob", "os.path.isdir", "open", "len", "len", "print", "list", "len", "len", "map", "f.readlines", "x.strip().split", "x.strip"], "methods", ["None"], ["", "", "def", "load_tracker", "(", "self", ",", "path", ",", "tracker_names", "=", "None", ",", "store", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            path(str): path to result\n            tracker_name(list): name of tracker\n        \"\"\"", "\n", "if", "not", "tracker_names", ":", "\n", "            ", "tracker_names", "=", "[", "x", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "for", "x", "in", "glob", "(", "path", ")", "\n", "if", "os", ".", "path", ".", "isdir", "(", "x", ")", "]", "\n", "", "if", "isinstance", "(", "tracker_names", ",", "str", ")", ":", "\n", "            ", "tracker_names", "=", "[", "tracker_names", "]", "\n", "", "for", "name", "in", "tracker_names", ":", "\n", "            ", "traj_file", "=", "os", ".", "path", ".", "join", "(", "path", ",", "name", ",", "self", ".", "name", "+", "'.txt'", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "traj_file", ")", ":", "\n", "                ", "try", ":", "\n", "                    ", "with", "open", "(", "traj_file", ",", "'r'", ")", "as", "f", ":", "\n", "                        ", "pred_traj", "=", "[", "list", "(", "map", "(", "float", ",", "x", ".", "strip", "(", ")", ".", "split", "(", "','", ")", ")", ")", "\n", "for", "x", "in", "f", ".", "readlines", "(", ")", "]", "\n", "", "", "except", ":", "\n", "                    ", "with", "open", "(", "traj_file", ",", "'r'", ")", "as", "f", ":", "\n", "                        ", "pred_traj", "=", "[", "list", "(", "map", "(", "float", ",", "x", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", ")", ")", "\n", "for", "x", "in", "f", ".", "readlines", "(", ")", "]", "\n", "", "", "if", "len", "(", "pred_traj", ")", "!=", "len", "(", "self", ".", "gt_traj", ")", ":", "\n", "                    ", "print", "(", "name", ",", "len", "(", "pred_traj", ")", ",", "len", "(", "self", ".", "gt_traj", ")", ",", "self", ".", "name", ")", "\n", "", "if", "store", ":", "\n", "                    ", "self", ".", "pred_trajs", "[", "name", "]", "=", "pred_traj", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.video.Video.load_img": [[58, 63], ["cv2.imread"], "methods", ["None"], ["                    ", "return", "pred_traj", "\n", "", "", "else", ":", "\n", "                ", "print", "(", "traj_file", ")", "\n", "", "", "self", ".", "tracker_names", "=", "list", "(", "self", ".", "pred_trajs", ".", "keys", "(", ")", ")", "\n", "\n", "", "def", "load_img", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.video.Video.free_img": [[64, 66], ["None"], "methods", ["None"], ["        ", "if", "self", ".", "imgs", "is", "None", ":", "\n", "            ", "self", ".", "imgs", "=", "[", "cv2", ".", "imread", "(", "x", ")", "for", "x", "in", "self", ".", "img_names", "]", "\n", "self", ".", "width", "=", "self", ".", "imgs", "[", "0", "]", ".", "shape", "[", "1", "]", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.video.Video.__len__": [[67, 69], ["len"], "methods", ["None"], ["self", ".", "height", "=", "self", ".", "imgs", "[", "0", "]", ".", "shape", "[", "0", "]", "\n", "\n", "", "", "def", "free_img", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.video.Video.__getitem__": [[70, 75], ["cv2.imread"], "methods", ["None"], ["        ", "self", ".", "imgs", "=", "None", "\n", "\n", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "img_names", ")", "\n", "\n", "", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.video.Video.__iter__": [[76, 82], ["range", "len", "cv2.imread"], "methods", ["None"], ["        ", "if", "self", ".", "imgs", "is", "None", ":", "\n", "            ", "return", "cv2", ".", "imread", "(", "self", ".", "img_names", "[", "idx", "]", ")", ",", "self", ".", "gt_traj", "[", "idx", "]", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "imgs", "[", "idx", "]", ",", "self", ".", "gt_traj", "[", "idx", "]", "\n", "\n", "", "", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "self", ".", "img_names", ")", ")", ":", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.video.Video.draw_box": [[83, 105], ["numpy.array().reshape", "tuple", "cv2.polylines", "len", "map", "cv2.putText", "len", "len", "numpy.array", "numpy.isnan", "list", "tuple", "cv2.rectangle", "map", "map", "cv2.putText"], "methods", ["None"], ["            ", "if", "self", ".", "imgs", "is", "not", "None", ":", "\n", "                ", "yield", "self", ".", "imgs", "[", "i", "]", ",", "self", ".", "gt_traj", "[", "i", "]", "\n", "", "else", ":", "\n", "                ", "yield", "cv2", ".", "imread", "(", "self", ".", "img_names", "[", "i", "]", ")", ",", "self", ".", "gt_traj", "[", "i", "]", "\n", "\n", "", "", "", "def", "draw_box", "(", "self", ",", "roi", ",", "img", ",", "linewidth", ",", "color", ",", "name", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n            roi: rectangle or polygon\n            img: numpy array img\n            linewith: line width of the bbox\n        \"\"\"", "\n", "if", "len", "(", "roi", ")", ">", "6", "and", "len", "(", "roi", ")", "%", "2", "==", "0", ":", "\n", "            ", "pts", "=", "np", ".", "array", "(", "roi", ",", "np", ".", "int32", ")", ".", "reshape", "(", "-", "1", ",", "1", ",", "2", ")", "\n", "color", "=", "tuple", "(", "map", "(", "int", ",", "color", ")", ")", "\n", "img", "=", "cv2", ".", "polylines", "(", "img", ",", "[", "pts", "]", ",", "True", ",", "color", ",", "linewidth", ")", "\n", "pt", "=", "(", "pts", "[", "0", ",", "0", ",", "0", "]", ",", "pts", "[", "0", ",", "0", ",", "1", "]", "-", "5", ")", "\n", "if", "name", ":", "\n", "                ", "img", "=", "cv2", ".", "putText", "(", "img", ",", "name", ",", "pt", ",", "cv2", ".", "FONT_HERSHEY_COMPLEX_SMALL", ",", "1", ",", "color", ",", "1", ")", "\n", "", "", "elif", "len", "(", "roi", ")", "==", "4", ":", "\n", "            ", "if", "not", "np", ".", "isnan", "(", "roi", "[", "0", "]", ")", ":", "\n", "                ", "roi", "=", "list", "(", "map", "(", "int", ",", "roi", ")", ")", "\n", "color", "=", "tuple", "(", "map", "(", "int", ",", "color", ")", ")", "\n", "img", "=", "cv2", ".", "rectangle", "(", "img", ",", "(", "roi", "[", "0", "]", ",", "roi", "[", "1", "]", ")", ",", "(", "roi", "[", "0", "]", "+", "roi", "[", "2", "]", ",", "roi", "[", "1", "]", "+", "roi", "[", "3", "]", ")", ",", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.video.Video.show": [[106, 141], ["cv2.namedWindow", "enumerate", "zip", "video.Video.copy", "video.Video.draw_box", "pred_trajs.items", "cv2.putText", "cv2.imshow", "cv2.waitKey", "video.append", "len", "len", "len", "cv2.cvtColor", "cv2.cvtColor", "video.Video.draw_box", "str", "video.Video.copy", "tuple", "numpy.random.randint"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.datasets.video.Video.draw_box", "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.video.Video.draw_box"], ["color", ",", "linewidth", ")", "\n", "if", "name", ":", "\n", "                    ", "img", "=", "cv2", ".", "putText", "(", "img", ",", "name", ",", "(", "roi", "[", "0", "]", ",", "roi", "[", "1", "]", "-", "5", ")", ",", "cv2", ".", "FONT_HERSHEY_COMPLEX_SMALL", ",", "1", ",", "color", ",", "1", ")", "\n", "", "", "", "return", "img", "\n", "\n", "", "def", "show", "(", "self", ",", "pred_trajs", "=", "{", "}", ",", "linewidth", "=", "2", ",", "show_name", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n            pred_trajs: dict of pred_traj, {'tracker_name': list of traj}\n                        pred_traj should contain polygon or rectangle(x, y, width, height)\n            linewith: line width of the bbox\n        \"\"\"", "\n", "assert", "self", ".", "imgs", "is", "not", "None", "\n", "video", "=", "[", "]", "\n", "cv2", ".", "namedWindow", "(", "self", ".", "name", ",", "cv2", ".", "WINDOW_NORMAL", ")", "\n", "colors", "=", "{", "}", "\n", "if", "len", "(", "pred_trajs", ")", "==", "0", "and", "len", "(", "self", ".", "pred_trajs", ")", ">", "0", ":", "\n", "            ", "pred_trajs", "=", "self", ".", "pred_trajs", "\n", "", "for", "i", ",", "(", "roi", ",", "img", ")", "in", "enumerate", "(", "zip", "(", "self", ".", "gt_traj", ",", "\n", "self", ".", "imgs", "[", "self", ".", "start_frame", ":", "self", ".", "end_frame", "+", "1", "]", ")", ")", ":", "\n", "            ", "img", "=", "img", ".", "copy", "(", ")", "\n", "if", "len", "(", "img", ".", "shape", ")", "==", "2", ":", "\n", "                ", "img", "=", "cv2", ".", "cvtColor", "(", "img", ",", "cv2", ".", "COLOR_GRAY2BGR", ")", "\n", "", "else", ":", "\n", "                ", "img", "=", "cv2", ".", "cvtColor", "(", "img", ",", "cv2", ".", "COLOR_RGB2BGR", ")", "\n", "", "img", "=", "self", ".", "draw_box", "(", "roi", ",", "img", ",", "linewidth", ",", "(", "0", ",", "255", ",", "0", ")", ",", "\n", "'gt'", "if", "show_name", "else", "None", ")", "\n", "for", "name", ",", "trajs", "in", "pred_trajs", ".", "items", "(", ")", ":", "\n", "                ", "if", "name", "not", "in", "colors", ":", "\n", "                    ", "color", "=", "tuple", "(", "np", ".", "random", ".", "randint", "(", "0", ",", "256", ",", "3", ")", ")", "\n", "colors", "[", "name", "]", "=", "color", "\n", "", "else", ":", "\n", "                    ", "color", "=", "colors", "[", "name", "]", "\n", "", "img", "=", "self", ".", "draw_box", "(", "trajs", "[", "0", "]", "[", "i", "]", ",", "img", ",", "linewidth", ",", "color", ",", "\n", "name", "if", "show_name", "else", "None", ")", "\n", "", "cv2", ".", "putText", "(", "img", ",", "str", "(", "i", "+", "self", ".", "start_frame", ")", ",", "(", "5", ",", "20", ")", ",", "\n", "cv2", ".", "FONT_HERSHEY_COMPLEX_SMALL", ",", "1", ",", "(", "255", ",", "255", ",", "0", ")", ",", "2", ")", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.dataset.Dataset.__init__": [[4, 8], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "dataset_root", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "dataset_root", "=", "dataset_root", "\n", "self", ".", "videos", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.dataset.Dataset.__getitem__": [[9, 14], ["isinstance", "isinstance", "sorted", "list", "dataset.Dataset.videos.keys"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "if", "isinstance", "(", "idx", ",", "str", ")", ":", "\n", "            ", "return", "self", ".", "videos", "[", "idx", "]", "\n", "", "elif", "isinstance", "(", "idx", ",", "int", ")", ":", "\n", "            ", "return", "self", ".", "videos", "[", "sorted", "(", "list", "(", "self", ".", "videos", ".", "keys", "(", ")", ")", ")", "[", "idx", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.dataset.Dataset.__len__": [[15, 17], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "videos", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.dataset.Dataset.__iter__": [[18, 22], ["sorted", "list", "dataset.Dataset.videos.keys"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "keys", "=", "sorted", "(", "list", "(", "self", ".", "videos", ".", "keys", "(", ")", ")", ")", "\n", "for", "key", "in", "keys", ":", "\n", "            ", "yield", "self", ".", "videos", "[", "key", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.dataset.Dataset.set_tracker": [[23, 31], ["None"], "methods", ["None"], ["", "", "def", "set_tracker", "(", "self", ",", "path", ",", "tracker_names", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            path: path to tracker results,\n            tracker_names: list of tracker name\n        \"\"\"", "\n", "self", ".", "tracker_path", "=", "path", "\n", "self", ".", "tracker_names", "=", "tracker_names", "\n", "# for video in tqdm(self.videos.values(), ", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.nat_l.UAVVideo.__init__": [[79, 83], ["video.Video.__init__"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamban_tracker.SiamBANTracker.__init__"], ["def", "__init__", "(", "self", ",", "name", ",", "root", ",", "video_dir", ",", "init_rect", ",", "img_names", ",", "\n", "gt_rect", ",", "attr", ",", "load_img", "=", "False", ")", ":", "\n", "        ", "super", "(", "UAVVideo", ",", "self", ")", ".", "__init__", "(", "name", ",", "root", ",", "video_dir", ",", "\n", "init_rect", ",", "img_names", ",", "gt_rect", ",", "attr", ",", "load_img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.nat_l.NAT_LDataset.__init__": [[92, 122], ["dataset.Dataset.__init__", "nat_l.ca", "tqdm.tqdm.tqdm", "nat_l.NAT_LDataset.videos.values", "set", "list", "nat_l.NAT_LDataset.videos.items", "ca.keys", "tqdm.tqdm.tqdm.set_postfix_str", "nat_l.UAVVideo", "nat_l.NAT_LDataset.videos.keys", "nat_l.NAT_LDataset.attr[].append"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamban_tracker.SiamBANTracker.__init__", "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.UAVDark70.ca"], ["def", "__init__", "(", "self", ",", "name", ",", "dataset_root", ",", "load_img", "=", "False", ")", ":", "\n", "        ", "super", "(", "NAT_LDataset", ",", "self", ")", ".", "__init__", "(", "name", ",", "dataset_root", ")", "\n", "dataset_root", "=", "dataset_root", "+", "'/NAT2021L'", "\n", "meta_data", "=", "ca", "(", "dataset_root", ")", "\n", "dataset_root", "=", "dataset_root", "+", "'/data_seq'", "\n", "# load videos", "\n", "pbar", "=", "tqdm", "(", "meta_data", ".", "keys", "(", ")", ",", "desc", "=", "'loading '", "+", "name", ",", "ncols", "=", "100", ")", "\n", "self", ".", "videos", "=", "{", "}", "\n", "for", "video", "in", "pbar", ":", "\n", "            ", "pbar", ".", "set_postfix_str", "(", "video", ")", "\n", "self", ".", "videos", "[", "video", "]", "=", "UAVVideo", "(", "video", ",", "\n", "dataset_root", ",", "\n", "meta_data", "[", "video", "]", "[", "'video_dir'", "]", ",", "\n", "meta_data", "[", "video", "]", "[", "'init_rect'", "]", ",", "\n", "meta_data", "[", "video", "]", "[", "'img_names'", "]", ",", "\n", "meta_data", "[", "video", "]", "[", "'gt_rect'", "]", ",", "\n", "meta_data", "[", "video", "]", "[", "'attr'", "]", ")", "\n", "\n", "# set attr", "\n", "", "attr", "=", "[", "]", "\n", "for", "x", "in", "self", ".", "videos", ".", "values", "(", ")", ":", "\n", "            ", "attr", "+=", "x", ".", "attr", "\n", "", "attr", "=", "set", "(", "attr", ")", "\n", "self", ".", "attr", "=", "{", "}", "\n", "self", ".", "attr", "[", "'ALL'", "]", "=", "list", "(", "self", ".", "videos", ".", "keys", "(", ")", ")", "\n", "for", "x", "in", "attr", ":", "\n", "            ", "self", ".", "attr", "[", "x", "]", "=", "[", "]", "\n", "", "for", "k", ",", "v", "in", "self", ".", "videos", ".", "items", "(", ")", ":", "\n", "            ", "for", "attr_", "in", "v", ".", "attr", ":", "\n", "                ", "self", ".", "attr", "[", "attr_", "]", ".", "append", "(", "k", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.nat_l.ca": [[13, 67], ["os.listdir", "os.listdir.sort", "range", "range", "dict", "len", "b.append", "len", "open", "open.readlines", "os.listdir", "os.listdir.sort", "range", "open.close", "c.append", "zip", "str", "len", "file[].strip().split", "bbox.append", "len", "len", "print", "str", "int", "int", "int", "int", "file[].strip", "float", "float", "float", "float"], "function", ["None"], ["def", "ca", "(", "dataset_root", ")", ":", "\n", "\n", "    ", "path", "=", "dataset_root", "\n", "\n", "name_list", "=", "os", ".", "listdir", "(", "path", "+", "'/data_seq'", ")", "\n", "name_list", ".", "sort", "(", ")", "\n", "\n", "b", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "name_list", ")", ")", ":", "\n", "        ", "b", ".", "append", "(", "name_list", "[", "i", "]", ")", "\n", "", "c", "=", "[", "]", "\n", "\n", "for", "jj", "in", "range", "(", "len", "(", "name_list", ")", ")", ":", "\n", "        ", "imgs", "=", "path", "+", "'/data_seq/'", "+", "str", "(", "name_list", "[", "jj", "]", ")", "\n", "txt", "=", "path", "+", "'/anno/'", "+", "str", "(", "name_list", "[", "jj", "]", ")", "+", "'.txt'", "\n", "bbox", "=", "[", "]", "\n", "f", "=", "open", "(", "txt", ")", "\n", "file", "=", "f", ".", "readlines", "(", ")", "\n", "li", "=", "os", ".", "listdir", "(", "imgs", ")", "\n", "li", ".", "sort", "(", ")", "\n", "for", "ii", "in", "range", "(", "len", "(", "file", ")", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "li", "[", "ii", "]", "=", "name_list", "[", "jj", "]", "+", "'/'", "+", "li", "[", "ii", "]", "\n", "", "except", ":", "\n", "                ", "a", "=", "1", "\n", "\n", "", "line", "=", "file", "[", "ii", "]", ".", "strip", "(", "'\\n'", ")", ".", "split", "(", "','", ")", "\n", "\n", "try", ":", "\n", "                ", "line", "[", "0", "]", "=", "int", "(", "line", "[", "0", "]", ")", "\n", "", "except", ":", "\n", "                ", "line", "[", "0", "]", "=", "float", "(", "line", "[", "0", "]", ")", "\n", "", "try", ":", "\n", "                ", "line", "[", "1", "]", "=", "int", "(", "line", "[", "1", "]", ")", "\n", "", "except", ":", "\n", "                ", "line", "[", "1", "]", "=", "float", "(", "line", "[", "1", "]", ")", "\n", "", "try", ":", "\n", "                ", "line", "[", "2", "]", "=", "int", "(", "line", "[", "2", "]", ")", "\n", "", "except", ":", "\n", "                ", "line", "[", "2", "]", "=", "float", "(", "line", "[", "2", "]", ")", "\n", "", "try", ":", "\n", "                ", "line", "[", "3", "]", "=", "int", "(", "line", "[", "3", "]", ")", "\n", "", "except", ":", "\n", "                ", "line", "[", "3", "]", "=", "float", "(", "line", "[", "3", "]", ")", "\n", "", "bbox", ".", "append", "(", "line", ")", "\n", "\n", "", "if", "len", "(", "bbox", ")", "!=", "len", "(", "li", ")", ":", "\n", "            ", "print", "(", "jj", ")", "\n", "", "f", ".", "close", "(", ")", "\n", "c", ".", "append", "(", "{", "'attr'", ":", "[", "]", ",", "'gt_rect'", ":", "bbox", ",", "'img_names'", ":", "li", ",", "'init_rect'", ":", "bbox", "[", "0", "]", ",", "'video_dir'", ":", "name_list", "[", "jj", "]", "}", ")", "\n", "\n", "", "d", "=", "dict", "(", "zip", "(", "b", ",", "c", ")", ")", "\n", "\n", "return", "d", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.uav.UAVVideo.__init__": [[21, 25], ["video.Video.__init__"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamban_tracker.SiamBANTracker.__init__"], ["def", "__init__", "(", "self", ",", "name", ",", "root", ",", "video_dir", ",", "init_rect", ",", "img_names", ",", "\n", "gt_rect", ",", "attr", ",", "load_img", "=", "False", ")", ":", "\n", "        ", "super", "(", "UAVVideo", ",", "self", ")", ".", "__init__", "(", "name", ",", "root", ",", "video_dir", ",", "\n", "init_rect", ",", "img_names", ",", "gt_rect", ",", "attr", ",", "load_img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.uav.UAVDataset.__init__": [[34, 65], ["dataset.Dataset.__init__", "tqdm.tqdm.tqdm", "uav.UAVDataset.videos.values", "set", "list", "uav.UAVDataset.videos.items", "open", "json.load", "json.load.keys", "tqdm.tqdm.tqdm.set_postfix_str", "uav.UAVVideo", "uav.UAVDataset.videos.keys", "os.path.join", "uav.UAVDataset.attr[].append"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamban_tracker.SiamBANTracker.__init__"], ["def", "__init__", "(", "self", ",", "name", ",", "dataset_root", ",", "load_img", "=", "False", ")", ":", "\n", "        ", "super", "(", "UAVDataset", ",", "self", ")", ".", "__init__", "(", "name", ",", "dataset_root", ")", "\n", "dataset_root", "=", "dataset_root", "+", "'/UAV123/data_seq/UAV123/'", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "dataset_root", ",", "'{}.json'", ".", "format", "(", "name", ")", ")", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "meta_data", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "# load videos", "\n", "", "pbar", "=", "tqdm", "(", "meta_data", ".", "keys", "(", ")", ",", "desc", "=", "'loading '", "+", "name", ",", "ncols", "=", "100", ")", "\n", "self", ".", "videos", "=", "{", "}", "\n", "for", "video", "in", "pbar", ":", "\n", "            ", "pbar", ".", "set_postfix_str", "(", "video", ")", "\n", "self", ".", "videos", "[", "video", "]", "=", "UAVVideo", "(", "video", ",", "\n", "dataset_root", ",", "\n", "meta_data", "[", "video", "]", "[", "'video_dir'", "]", ",", "\n", "meta_data", "[", "video", "]", "[", "'init_rect'", "]", ",", "\n", "meta_data", "[", "video", "]", "[", "'img_names'", "]", ",", "\n", "meta_data", "[", "video", "]", "[", "'gt_rect'", "]", ",", "\n", "meta_data", "[", "video", "]", "[", "'attr'", "]", ")", "\n", "\n", "# set attr", "\n", "", "attr", "=", "[", "]", "\n", "for", "x", "in", "self", ".", "videos", ".", "values", "(", ")", ":", "\n", "            ", "attr", "+=", "x", ".", "attr", "\n", "", "attr", "=", "set", "(", "attr", ")", "\n", "self", ".", "attr", "=", "{", "}", "\n", "self", ".", "attr", "[", "'ALL'", "]", "=", "list", "(", "self", ".", "videos", ".", "keys", "(", ")", ")", "\n", "for", "x", "in", "attr", ":", "\n", "            ", "self", ".", "attr", "[", "x", "]", "=", "[", "]", "\n", "", "for", "k", ",", "v", "in", "self", ".", "videos", ".", "items", "(", ")", ":", "\n", "            ", "for", "attr_", "in", "v", ".", "attr", ":", "\n", "                ", "self", ".", "attr", "[", "attr_", "]", ".", "append", "(", "k", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.__init__.DatasetFactory.create_dataset": [[6, 29], ["UAVDark70.UAVDark70Dataset", "uav.UAVDataset", "nat.NATDataset", "nat_l.NAT_LDataset", "Exception"], "methods", ["None"], ["\n", "def", "gaussian", "(", "window_size", ",", "sigma", ")", ":", "\n", "    ", "gauss", "=", "torch", ".", "Tensor", "(", "[", "exp", "(", "-", "(", "x", "-", "window_size", "//", "2", ")", "**", "2", "/", "float", "(", "2", "*", "sigma", "**", "2", ")", ")", "for", "x", "in", "range", "(", "window_size", ")", "]", ")", "\n", "return", "gauss", "/", "gauss", ".", "sum", "(", ")", "\n", "\n", "", "def", "create_window", "(", "window_size", ",", "channel", ")", ":", "\n", "    ", "_1D_window", "=", "gaussian", "(", "window_size", ",", "1.5", ")", ".", "unsqueeze", "(", "1", ")", "\n", "_2D_window", "=", "_1D_window", ".", "mm", "(", "_1D_window", ".", "t", "(", ")", ")", ".", "float", "(", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", "\n", "window", "=", "Variable", "(", "_2D_window", ".", "expand", "(", "channel", ",", "1", ",", "window_size", ",", "window_size", ")", ".", "contiguous", "(", ")", ")", "\n", "return", "window", "\n", "\n", "", "def", "_ssim", "(", "img1", ",", "img2", ",", "window", ",", "window_size", ",", "channel", ",", "size_average", "=", "True", ")", ":", "\n", "    ", "mu1", "=", "F", ".", "conv2d", "(", "img1", ",", "window", ",", "padding", "=", "window_size", "//", "2", ",", "groups", "=", "channel", ")", "\n", "mu2", "=", "F", ".", "conv2d", "(", "img2", ",", "window", ",", "padding", "=", "window_size", "//", "2", ",", "groups", "=", "channel", ")", "\n", "\n", "mu1_sq", "=", "mu1", ".", "pow", "(", "2", ")", "\n", "mu2_sq", "=", "mu2", ".", "pow", "(", "2", ")", "\n", "mu1_mu2", "=", "mu1", "*", "mu2", "\n", "\n", "sigma1_sq", "=", "F", ".", "conv2d", "(", "img1", "*", "img1", ",", "window", ",", "padding", "=", "window_size", "//", "2", ",", "groups", "=", "channel", ")", "-", "mu1_sq", "\n", "sigma2_sq", "=", "F", ".", "conv2d", "(", "img2", "*", "img2", ",", "window", ",", "padding", "=", "window_size", "//", "2", ",", "groups", "=", "channel", ")", "-", "mu2_sq", "\n", "sigma12", "=", "F", ".", "conv2d", "(", "img1", "*", "img2", ",", "window", ",", "padding", "=", "window_size", "//", "2", ",", "groups", "=", "channel", ")", "-", "mu1_mu2", "\n", "\n", "C1", "=", "0.01", "**", "2", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.dataset.SubDataset.__init__": [[31, 67], ["os.path.dirname", "os.path.join", "os.path.join", "logger.info", "list", "list", "len", "list", "logger.info", "dataset.SubDataset.shuffle", "os.path.realpath", "open", "json.load", "dataset.SubDataset._filter_zero", "dataset.SubDataset.keys", "dataset.SubDataset.keys", "dataset.SubDataset.keys", "list", "list.sort", "len", "logger.warning", "map", "len", "logger.warning", "filter", "list.keys", "x.isdigit"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.datasets.dataset.BANDataset.shuffle", "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.dataset.SubDataset._filter_zero", "home.repos.pwc.inspect_result.vision4robotics_udat.utils.log_helper.Filter.filter"], ["# for video in tqdm(self.videos.values(), ", "\n", "#         desc='loading tacker result', ncols=100):", "\n", "#     video.load_tracker(path, tracker_names)", "\n", "", "", ""]], "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.dataset.SubDataset._filter_zero": [[68, 93], ["meta_data.items", "tracks.items", "frames.items", "len", "len", "isinstance", "len"], "methods", ["None"], []], "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.dataset.SubDataset.log": [[94, 98], ["logger.info"], "methods", ["None"], []], "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.dataset.SubDataset.shuffle": [[99, 106], ["list", "range", "len", "numpy.random.shuffle"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.datasets.dataset.BANDataset.shuffle"], []], "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.dataset.SubDataset.get_image_anno": [[107, 113], ["os.path.join", "dataset.SubDataset.path_format.format"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.utils.logger.LogFormatter.format"], []], "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.dataset.SubDataset.get_positive_pair": [[114, 129], ["numpy.random.choice", "numpy.random.randint", "max", "numpy.random.choice", "list", "len", "min", "dataset.SubDataset.get_image_anno", "dataset.SubDataset.get_image_anno", "video.keys", "len"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.datasets.dataset.SubDataset.get_image_anno", "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.dataset.SubDataset.get_image_anno"], []], "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.dataset.SubDataset.get_random_target": [[130, 140], ["numpy.random.choice", "numpy.random.choice", "dataset.SubDataset.get_image_anno", "numpy.random.randint", "list", "video.keys"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.datasets.dataset.SubDataset.get_image_anno"], []], "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.dataset.SubDataset.__len__": [[141, 143], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.dataset.TrkDataset.__init__": [[147, 198], ["torch.utils.data.Dataset.__init__", "pysot.datasets.augmentation.Augmentation", "pysot.datasets.augmentation.Augmentation", "dataset.TrkDataset.shuffle", "getattr", "dataset.SubDataset", "dataset.SubDataset.log", "dataset.TrkDataset.all_dataset.append"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamban_tracker.SiamBANTracker.__init__", "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.dataset.BANDataset.shuffle", "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.dataset.SubDataset.log"], []], "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.dataset.TrkDataset.shuffle": [[199, 213], ["logger.info", "logger.info", "numpy.random.shuffle", "len"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.datasets.dataset.BANDataset.shuffle"], []], "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.dataset.TrkDataset._find_dataset": [[214, 218], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.dataset.TrkDataset._get_bbox": [[219, 236], ["numpy.sqrt", "pysot.utils.bbox.center2corner", "len", "pysot.utils.bbox.Center"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.utils.bbox.center2corner"], []], "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.dataset.TrkDataset.__len__": [[237, 239], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.dataset.TrkDataset.__getitem__": [[240, 286], ["dataset.TrkDataset._find_dataset", "cv2.imread", "cv2.imread", "dataset.TrkDataset._get_bbox", "dataset.TrkDataset._get_bbox", "dataset.TrkDataset.template_aug", "dataset.TrkDataset.search_aug", "numpy.zeros", "dataset.get_random_target.transpose().astype", "numpy.random.choice().get_random_target.transpose().astype", "dataset.get_random_target", "numpy.random.choice().get_random_target", "dataset.get_positive_pair", "print", "numpy.array", "numpy.random.random", "numpy.random.random", "dataset.get_random_target.transpose", "numpy.random.choice().get_random_target.transpose", "numpy.random.choice"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.datasets.dataset.BANDataset._find_dataset", "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.dataset.BANDataset._get_bbox", "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.dataset.BANDataset._get_bbox", "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.dataset.SubDataset.get_random_target", "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.dataset.SubDataset.get_random_target", "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.dataset.SubDataset.get_positive_pair", "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.augmentation.Augmentation.random", "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.augmentation.Augmentation.random"], []], "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.augmentation.Augmentation.__init__": [[16, 26], ["numpy.array"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "shift", ",", "scale", ",", "blur", ",", "flip", ",", "color", ")", ":", "\n", "        ", "self", ".", "shift", "=", "shift", "\n", "self", ".", "scale", "=", "scale", "\n", "self", ".", "blur", "=", "blur", "\n", "self", ".", "flip", "=", "flip", "\n", "self", ".", "color", "=", "color", "\n", "self", ".", "rgbVar", "=", "np", ".", "array", "(", "\n", "[", "[", "-", "0.55919361", ",", "0.98062831", ",", "-", "0.41940627", "]", ",", "\n", "[", "1.72091413", ",", "0.19879334", ",", "-", "1.82968581", "]", ",", "\n", "[", "4.64467907", ",", "4.73710203", ",", "4.88324118", "]", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.augmentation.Augmentation.random": [[27, 30], ["numpy.random.random"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.datasets.augmentation.Augmentation.random"], ["", "@", "staticmethod", "\n", "def", "random", "(", ")", ":", "\n", "        ", "return", "np", ".", "random", ".", "random", "(", ")", "*", "2", "-", "1.0", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.augmentation.Augmentation._crop_roi": [[31, 43], ["numpy.array().astype", "cv2.warpAffine", "float", "numpy.array"], "methods", ["None"], ["", "def", "_crop_roi", "(", "self", ",", "image", ",", "bbox", ",", "out_sz", ",", "padding", "=", "(", "0", ",", "0", ",", "0", ")", ")", ":", "\n", "        ", "bbox", "=", "[", "float", "(", "x", ")", "for", "x", "in", "bbox", "]", "\n", "a", "=", "(", "out_sz", "-", "1", ")", "/", "(", "bbox", "[", "2", "]", "-", "bbox", "[", "0", "]", ")", "\n", "b", "=", "(", "out_sz", "-", "1", ")", "/", "(", "bbox", "[", "3", "]", "-", "bbox", "[", "1", "]", ")", "\n", "c", "=", "-", "a", "*", "bbox", "[", "0", "]", "\n", "d", "=", "-", "b", "*", "bbox", "[", "1", "]", "\n", "mapping", "=", "np", ".", "array", "(", "[", "[", "a", ",", "0", ",", "c", "]", ",", "\n", "[", "0", ",", "b", ",", "d", "]", "]", ")", ".", "astype", "(", "np", ".", "float", ")", "\n", "crop", "=", "cv2", ".", "warpAffine", "(", "image", ",", "mapping", ",", "(", "out_sz", ",", "out_sz", ")", ",", "\n", "borderMode", "=", "cv2", ".", "BORDER_CONSTANT", ",", "\n", "borderValue", "=", "padding", ")", "\n", "return", "crop", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.augmentation.Augmentation._blur_aug": [[44, 57], ["augmentation.Augmentation._blur_aug.rand_kernel"], "methods", ["None"], ["", "def", "_blur_aug", "(", "self", ",", "image", ")", ":", "\n", "        ", "def", "rand_kernel", "(", ")", ":", "\n", "            ", "sizes", "=", "np", ".", "arange", "(", "5", ",", "46", ",", "2", ")", "\n", "size", "=", "np", ".", "random", ".", "choice", "(", "sizes", ")", "\n", "kernel", "=", "np", ".", "zeros", "(", "(", "size", ",", "size", ")", ")", "\n", "c", "=", "int", "(", "size", "/", "2", ")", "\n", "wx", "=", "np", ".", "random", ".", "random", "(", ")", "\n", "kernel", "[", ":", ",", "c", "]", "+=", "1.", "/", "size", "*", "wx", "\n", "kernel", "[", "c", ",", ":", "]", "+=", "1.", "/", "size", "*", "(", "1", "-", "wx", ")", "\n", "return", "kernel", "\n", "", "kernel", "=", "rand_kernel", "(", ")", "\n", "image", "=", "cv2", ".", "filter2D", "(", "image", ",", "-", "1", ",", "kernel", ")", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.augmentation.Augmentation._color_aug": [[58, 64], ["numpy.dot", "offset.reshape.reshape.reshape", "numpy.random.randn"], "methods", ["None"], ["", "def", "_color_aug", "(", "self", ",", "image", ")", ":", "\n", "        ", "offset", "=", "np", ".", "dot", "(", "self", ".", "rgbVar", ",", "np", ".", "random", ".", "randn", "(", "3", ",", "1", ")", ")", "\n", "offset", "=", "offset", "[", ":", ":", "-", "1", "]", "# bgr 2 rgb", "\n", "offset", "=", "offset", ".", "reshape", "(", "3", ")", "\n", "image", "=", "image", "-", "offset", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.augmentation.Augmentation._gray_aug": [[65, 69], ["cv2.cvtColor", "cv2.cvtColor"], "methods", ["None"], ["", "def", "_gray_aug", "(", "self", ",", "image", ")", ":", "\n", "        ", "grayed", "=", "cv2", ".", "cvtColor", "(", "image", ",", "cv2", ".", "COLOR_BGR2GRAY", ")", "\n", "image", "=", "cv2", ".", "cvtColor", "(", "grayed", ",", "cv2", ".", "COLOR_GRAY2BGR", ")", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.augmentation.Augmentation._shift_scale_aug": [[70, 109], ["siamban.utils.bbox.corner2center", "siamban.utils.bbox.center2corner", "siamban.utils.bbox.Corner", "augmentation.Augmentation._crop_roi", "min", "min", "siamban.utils.bbox.Center", "max", "max", "siamban.utils.bbox.Corner", "siamban.utils.bbox.Corner", "augmentation.Augmentation.random", "augmentation.Augmentation.random", "min", "min", "augmentation.Augmentation.random", "augmentation.Augmentation.random", "float", "float"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.utils.bbox.corner2center", "home.repos.pwc.inspect_result.vision4robotics_udat.utils.bbox.center2corner", "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.augmentation.Augmentation._crop_roi", "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.augmentation.Augmentation.random", "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.augmentation.Augmentation.random", "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.augmentation.Augmentation.random", "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.augmentation.Augmentation.random"], ["", "def", "_shift_scale_aug", "(", "self", ",", "image", ",", "bbox", ",", "crop_bbox", ",", "size", ")", ":", "\n", "        ", "im_h", ",", "im_w", "=", "image", ".", "shape", "[", ":", "2", "]", "\n", "\n", "# adjust crop bounding box", "\n", "crop_bbox_center", "=", "corner2center", "(", "crop_bbox", ")", "\n", "if", "self", ".", "scale", ":", "\n", "            ", "scale_x", "=", "(", "1.0", "+", "Augmentation", ".", "random", "(", ")", "*", "self", ".", "scale", ")", "\n", "scale_y", "=", "(", "1.0", "+", "Augmentation", ".", "random", "(", ")", "*", "self", ".", "scale", ")", "\n", "h", ",", "w", "=", "crop_bbox_center", ".", "h", ",", "crop_bbox_center", ".", "w", "\n", "scale_x", "=", "min", "(", "scale_x", ",", "float", "(", "im_w", ")", "/", "w", ")", "\n", "scale_y", "=", "min", "(", "scale_y", ",", "float", "(", "im_h", ")", "/", "h", ")", "\n", "crop_bbox_center", "=", "Center", "(", "crop_bbox_center", ".", "x", ",", "\n", "crop_bbox_center", ".", "y", ",", "\n", "crop_bbox_center", ".", "w", "*", "scale_x", ",", "\n", "crop_bbox_center", ".", "h", "*", "scale_y", ")", "\n", "\n", "", "crop_bbox", "=", "center2corner", "(", "crop_bbox_center", ")", "\n", "if", "self", ".", "shift", ":", "\n", "            ", "sx", "=", "Augmentation", ".", "random", "(", ")", "*", "self", ".", "shift", "\n", "sy", "=", "Augmentation", ".", "random", "(", ")", "*", "self", ".", "shift", "\n", "\n", "x1", ",", "y1", ",", "x2", ",", "y2", "=", "crop_bbox", "\n", "\n", "sx", "=", "max", "(", "-", "x1", ",", "min", "(", "im_w", "-", "1", "-", "x2", ",", "sx", ")", ")", "\n", "sy", "=", "max", "(", "-", "y1", ",", "min", "(", "im_h", "-", "1", "-", "y2", ",", "sy", ")", ")", "\n", "\n", "crop_bbox", "=", "Corner", "(", "x1", "+", "sx", ",", "y1", "+", "sy", ",", "x2", "+", "sx", ",", "y2", "+", "sy", ")", "\n", "\n", "# adjust target bounding box", "\n", "", "x1", ",", "y1", "=", "crop_bbox", ".", "x1", ",", "crop_bbox", ".", "y1", "\n", "bbox", "=", "Corner", "(", "bbox", ".", "x1", "-", "x1", ",", "bbox", ".", "y1", "-", "y1", ",", "\n", "bbox", ".", "x2", "-", "x1", ",", "bbox", ".", "y2", "-", "y1", ")", "\n", "\n", "if", "self", ".", "scale", ":", "\n", "            ", "bbox", "=", "Corner", "(", "bbox", ".", "x1", "/", "scale_x", ",", "bbox", ".", "y1", "/", "scale_y", ",", "\n", "bbox", ".", "x2", "/", "scale_x", ",", "bbox", ".", "y2", "/", "scale_y", ")", "\n", "\n", "", "image", "=", "self", ".", "_crop_roi", "(", "image", ",", "crop_bbox", ",", "size", ")", "\n", "return", "image", ",", "bbox", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.augmentation.Augmentation._flip_aug": [[110, 116], ["cv2.flip", "siamban.utils.bbox.Corner"], "methods", ["None"], ["", "def", "_flip_aug", "(", "self", ",", "image", ",", "bbox", ")", ":", "\n", "        ", "image", "=", "cv2", ".", "flip", "(", "image", ",", "1", ")", "\n", "width", "=", "image", ".", "shape", "[", "1", "]", "\n", "bbox", "=", "Corner", "(", "width", "-", "1", "-", "bbox", ".", "x2", ",", "bbox", ".", "y1", ",", "\n", "width", "-", "1", "-", "bbox", ".", "x1", ",", "bbox", ".", "y2", ")", "\n", "return", "image", ",", "bbox", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.augmentation.Augmentation.__call__": [[117, 140], ["siamban.utils.bbox.center2corner", "augmentation.Augmentation._shift_scale_aug", "siamban.utils.bbox.Center", "augmentation.Augmentation._gray_aug", "numpy.random.random", "augmentation.Augmentation._color_aug", "numpy.random.random", "augmentation.Augmentation._blur_aug", "augmentation.Augmentation._flip_aug", "numpy.random.random"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.utils.bbox.center2corner", "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.augmentation.Augmentation._shift_scale_aug", "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.augmentation.Augmentation._gray_aug", "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.augmentation.Augmentation.random", "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.augmentation.Augmentation._color_aug", "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.augmentation.Augmentation.random", "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.augmentation.Augmentation._blur_aug", "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.augmentation.Augmentation._flip_aug", "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.augmentation.Augmentation.random"], ["", "def", "__call__", "(", "self", ",", "image", ",", "bbox", ",", "size", ",", "gray", "=", "False", ")", ":", "\n", "        ", "shape", "=", "image", ".", "shape", "\n", "crop_bbox", "=", "center2corner", "(", "Center", "(", "shape", "[", "0", "]", "//", "2", ",", "shape", "[", "1", "]", "//", "2", ",", "\n", "size", "-", "1", ",", "size", "-", "1", ")", ")", "\n", "# gray augmentation", "\n", "if", "gray", ":", "\n", "            ", "image", "=", "self", ".", "_gray_aug", "(", "image", ")", "\n", "\n", "# shift scale augmentation", "\n", "", "image", ",", "bbox", "=", "self", ".", "_shift_scale_aug", "(", "image", ",", "bbox", ",", "crop_bbox", ",", "size", ")", "\n", "\n", "# color augmentation", "\n", "if", "self", ".", "color", ">", "np", ".", "random", ".", "random", "(", ")", ":", "\n", "            ", "image", "=", "self", ".", "_color_aug", "(", "image", ")", "\n", "\n", "# blur augmentation", "\n", "", "if", "self", ".", "blur", ">", "np", ".", "random", ".", "random", "(", ")", ":", "\n", "            ", "image", "=", "self", ".", "_blur_aug", "(", "image", ")", "\n", "\n", "# flip augmentation", "\n", "", "if", "self", ".", "flip", "and", "self", ".", "flip", ">", "np", ".", "random", ".", "random", "(", ")", ":", "\n", "            ", "image", ",", "bbox", "=", "self", ".", "_flip_aug", "(", "image", ",", "bbox", ")", "\n", "", "return", "image", ",", "bbox", "\n", "", "", ""]], "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.dataset.BANDataset.__init__": [[146, 203], ["torch.utils.data.Dataset.__init__", "siamban.datasets.point_target.PointTarget", "siamban.datasets.augmentation.Augmentation", "siamban.datasets.augmentation.Augmentation", "dataset.BANDataset.shuffle", "Exception", "getattr", "dataset.SubDataset", "dataset.SubDataset.log", "dataset.BANDataset.all_dataset.append"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamban_tracker.SiamBANTracker.__init__", "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.dataset.BANDataset.shuffle", "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.dataset.SubDataset.log"], []], "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.dataset.BANDataset.shuffle": [[204, 218], ["logger.info", "logger.info", "numpy.random.shuffle", "len"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.datasets.dataset.BANDataset.shuffle"], []], "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.dataset.BANDataset._find_dataset": [[219, 223], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.dataset.BANDataset._get_bbox": [[224, 241], ["numpy.sqrt", "siamban.utils.bbox.center2corner", "len", "siamban.utils.bbox.Center"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.utils.bbox.center2corner"], []], "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.dataset.BANDataset.__len__": [[242, 244], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.dataset.BANDataset.__getitem__": [[245, 288], ["dataset.BANDataset._find_dataset", "cv2.imread", "cv2.imread", "dataset.BANDataset._get_bbox", "dataset.BANDataset._get_bbox", "dataset.BANDataset.template_aug", "dataset.BANDataset.search_aug", "dataset.BANDataset.point_target", "dataset.get_random_target.transpose().astype", "numpy.random.choice().get_random_target.transpose().astype", "dataset.get_random_target", "numpy.random.choice().get_random_target", "dataset.get_positive_pair", "numpy.array", "numpy.random.random", "numpy.random.random", "dataset.get_random_target.transpose", "numpy.random.choice().get_random_target.transpose", "numpy.random.choice"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.datasets.dataset.BANDataset._find_dataset", "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.dataset.BANDataset._get_bbox", "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.dataset.BANDataset._get_bbox", "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.dataset.SubDataset.get_random_target", "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.dataset.SubDataset.get_random_target", "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.dataset.SubDataset.get_positive_pair", "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.augmentation.Augmentation.random", "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.augmentation.Augmentation.random"], []], "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.point_target.PointTarget.__init__": [[14, 16], ["siamban.utils.point.Point"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", ")", ":", "\n", "        ", "self", ".", "points", "=", "Point", "(", "cfg", ".", "POINT", ".", "STRIDE", ",", "cfg", ".", "TRAIN", ".", "OUTPUT_SIZE", ",", "cfg", ".", "TRAIN", ".", "SEARCH_SIZE", "//", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.point_target.PointTarget.__call__": [[17, 62], ["numpy.zeros", "siamban.utils.bbox.corner2center", "numpy.where", "numpy.where", "point_target.PointTarget.__call__.select"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.utils.bbox.corner2center"], ["", "def", "__call__", "(", "self", ",", "target", ",", "size", ",", "neg", "=", "False", ")", ":", "\n", "\n", "# -1 ignore 0 negative 1 positive", "\n", "        ", "cls", "=", "-", "1", "*", "np", ".", "ones", "(", "(", "size", ",", "size", ")", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "delta", "=", "np", ".", "zeros", "(", "(", "4", ",", "size", ",", "size", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "def", "select", "(", "position", ",", "keep_num", "=", "16", ")", ":", "\n", "            ", "num", "=", "position", "[", "0", "]", ".", "shape", "[", "0", "]", "\n", "if", "num", "<=", "keep_num", ":", "\n", "                ", "return", "position", ",", "num", "\n", "", "slt", "=", "np", ".", "arange", "(", "num", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "slt", ")", "\n", "slt", "=", "slt", "[", ":", "keep_num", "]", "\n", "return", "tuple", "(", "p", "[", "slt", "]", "for", "p", "in", "position", ")", ",", "keep_num", "\n", "\n", "", "tcx", ",", "tcy", ",", "tw", ",", "th", "=", "corner2center", "(", "target", ")", "\n", "points", "=", "self", ".", "points", ".", "points", "\n", "\n", "if", "neg", ":", "\n", "            ", "neg", "=", "np", ".", "where", "(", "np", ".", "square", "(", "tcx", "-", "points", "[", "0", "]", ")", "/", "np", ".", "square", "(", "tw", "/", "4", ")", "+", "\n", "np", ".", "square", "(", "tcy", "-", "points", "[", "1", "]", ")", "/", "np", ".", "square", "(", "th", "/", "4", ")", "<", "1", ")", "\n", "neg", ",", "neg_num", "=", "select", "(", "neg", ",", "cfg", ".", "TRAIN", ".", "NEG_NUM", ")", "\n", "cls", "[", "neg", "]", "=", "0", "\n", "\n", "return", "cls", ",", "delta", "\n", "\n", "", "delta", "[", "0", "]", "=", "points", "[", "0", "]", "-", "target", "[", "0", "]", "\n", "delta", "[", "1", "]", "=", "points", "[", "1", "]", "-", "target", "[", "1", "]", "\n", "delta", "[", "2", "]", "=", "target", "[", "2", "]", "-", "points", "[", "0", "]", "\n", "delta", "[", "3", "]", "=", "target", "[", "3", "]", "-", "points", "[", "1", "]", "\n", "\n", "# ellipse label", "\n", "pos", "=", "np", ".", "where", "(", "np", ".", "square", "(", "tcx", "-", "points", "[", "0", "]", ")", "/", "np", ".", "square", "(", "tw", "/", "4", ")", "+", "\n", "np", ".", "square", "(", "tcy", "-", "points", "[", "1", "]", ")", "/", "np", ".", "square", "(", "th", "/", "4", ")", "<", "1", ")", "\n", "neg", "=", "np", ".", "where", "(", "np", ".", "square", "(", "tcx", "-", "points", "[", "0", "]", ")", "/", "np", ".", "square", "(", "tw", "/", "2", ")", "+", "\n", "np", ".", "square", "(", "tcy", "-", "points", "[", "1", "]", ")", "/", "np", ".", "square", "(", "th", "/", "2", ")", ">", "1", ")", "\n", "\n", "# sampling", "\n", "pos", ",", "pos_num", "=", "select", "(", "pos", ",", "cfg", ".", "TRAIN", ".", "POS_NUM", ")", "\n", "neg", ",", "neg_num", "=", "select", "(", "neg", ",", "cfg", ".", "TRAIN", ".", "TOTAL_NUM", "-", "cfg", ".", "TRAIN", ".", "POS_NUM", ")", "\n", "\n", "cls", "[", "pos", "]", "=", "1", "\n", "cls", "[", "neg", "]", "=", "0", "\n", "\n", "return", "cls", ",", "delta", "\n", "", "", ""]], "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.UAVDark70.UAVVideo.__init__": [[79, 83], ["video.Video.__init__"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamban_tracker.SiamBANTracker.__init__"], ["def", "__init__", "(", "self", ",", "name", ",", "root", ",", "video_dir", ",", "init_rect", ",", "img_names", ",", "\n", "gt_rect", ",", "attr", ",", "load_img", "=", "False", ")", ":", "\n", "        ", "super", "(", "UAVVideo", ",", "self", ")", ".", "__init__", "(", "name", ",", "root", ",", "video_dir", ",", "\n", "init_rect", ",", "img_names", ",", "gt_rect", ",", "attr", ",", "load_img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.UAVDark70.UAVDark70Dataset.__init__": [[92, 123], ["dataset.Dataset.__init__", "UAVDark70.ca", "tqdm.tqdm.tqdm", "UAVDark70.UAVDark70Dataset.videos.values", "set", "list", "UAVDark70.UAVDark70Dataset.videos.items", "ca.keys", "tqdm.tqdm.tqdm.set_postfix_str", "UAVDark70.UAVVideo", "UAVDark70.UAVDark70Dataset.videos.keys", "UAVDark70.UAVDark70Dataset.attr[].append"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamban_tracker.SiamBANTracker.__init__", "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.UAVDark70.ca"], ["def", "__init__", "(", "self", ",", "name", ",", "dataset_root", ",", "load_img", "=", "False", ")", ":", "\n", "        ", "super", "(", "UAVDark70Dataset", ",", "self", ")", ".", "__init__", "(", "name", ",", "dataset_root", ")", "\n", "dataset_root", "=", "dataset_root", "+", "'/UAVDark70'", "\n", "meta_data", "=", "ca", "(", "dataset_root", ")", "\n", "dataset_root", "=", "dataset_root", "+", "'/data_seq'", "\n", "\n", "# load videos", "\n", "pbar", "=", "tqdm", "(", "meta_data", ".", "keys", "(", ")", ",", "desc", "=", "'loading '", "+", "name", ",", "ncols", "=", "100", ")", "\n", "self", ".", "videos", "=", "{", "}", "\n", "for", "video", "in", "pbar", ":", "\n", "            ", "pbar", ".", "set_postfix_str", "(", "video", ")", "\n", "self", ".", "videos", "[", "video", "]", "=", "UAVVideo", "(", "video", ",", "\n", "dataset_root", ",", "\n", "meta_data", "[", "video", "]", "[", "'video_dir'", "]", ",", "\n", "meta_data", "[", "video", "]", "[", "'init_rect'", "]", ",", "\n", "meta_data", "[", "video", "]", "[", "'img_names'", "]", ",", "\n", "meta_data", "[", "video", "]", "[", "'gt_rect'", "]", ",", "\n", "meta_data", "[", "video", "]", "[", "'attr'", "]", ")", "\n", "\n", "# set attr", "\n", "", "attr", "=", "[", "]", "\n", "for", "x", "in", "self", ".", "videos", ".", "values", "(", ")", ":", "\n", "            ", "attr", "+=", "x", ".", "attr", "\n", "", "attr", "=", "set", "(", "attr", ")", "\n", "self", ".", "attr", "=", "{", "}", "\n", "self", ".", "attr", "[", "'ALL'", "]", "=", "list", "(", "self", ".", "videos", ".", "keys", "(", ")", ")", "\n", "for", "x", "in", "attr", ":", "\n", "            ", "self", ".", "attr", "[", "x", "]", "=", "[", "]", "\n", "", "for", "k", ",", "v", "in", "self", ".", "videos", ".", "items", "(", ")", ":", "\n", "            ", "for", "attr_", "in", "v", ".", "attr", ":", "\n", "                ", "self", ".", "attr", "[", "attr_", "]", ".", "append", "(", "k", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.UAVDark70.ca": [[13, 67], ["os.listdir", "os.listdir.sort", "range", "range", "dict", "len", "b.append", "len", "open", "open.readlines", "os.listdir", "os.listdir.sort", "range", "open.close", "c.append", "zip", "str", "len", "file[].strip().split", "bbox.append", "len", "len", "print", "str", "int", "int", "int", "int", "file[].strip", "float", "float", "float", "float"], "function", ["None"], ["def", "ca", "(", "dataset_root", ")", ":", "\n", "\n", "    ", "path", "=", "dataset_root", "\n", "\n", "name_list", "=", "os", ".", "listdir", "(", "path", "+", "'/data_seq'", ")", "\n", "name_list", ".", "sort", "(", ")", "\n", "\n", "b", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "name_list", ")", ")", ":", "\n", "        ", "b", ".", "append", "(", "name_list", "[", "i", "]", ")", "\n", "", "c", "=", "[", "]", "\n", "\n", "for", "jj", "in", "range", "(", "len", "(", "name_list", ")", ")", ":", "\n", "        ", "imgs", "=", "path", "+", "'/data_seq/'", "+", "str", "(", "name_list", "[", "jj", "]", ")", "\n", "txt", "=", "path", "+", "'/anno/'", "+", "str", "(", "name_list", "[", "jj", "]", ")", "+", "'.txt'", "\n", "bbox", "=", "[", "]", "\n", "f", "=", "open", "(", "txt", ")", "# \u8fd4\u56de\u4e00\u4e2a\u6587\u4ef6\u5bf9\u8c61", "\n", "file", "=", "f", ".", "readlines", "(", ")", "\n", "li", "=", "os", ".", "listdir", "(", "imgs", ")", "\n", "li", ".", "sort", "(", ")", "\n", "for", "ii", "in", "range", "(", "len", "(", "file", ")", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "li", "[", "ii", "]", "=", "name_list", "[", "jj", "]", "+", "'/'", "+", "li", "[", "ii", "]", "\n", "", "except", ":", "\n", "                ", "a", "=", "1", "\n", "\n", "", "line", "=", "file", "[", "ii", "]", ".", "strip", "(", "'\\n'", ")", ".", "split", "(", "','", ")", "\n", "\n", "try", ":", "\n", "                ", "line", "[", "0", "]", "=", "int", "(", "line", "[", "0", "]", ")", "\n", "", "except", ":", "\n", "                ", "line", "[", "0", "]", "=", "float", "(", "line", "[", "0", "]", ")", "\n", "", "try", ":", "\n", "                ", "line", "[", "1", "]", "=", "int", "(", "line", "[", "1", "]", ")", "\n", "", "except", ":", "\n", "                ", "line", "[", "1", "]", "=", "float", "(", "line", "[", "1", "]", ")", "\n", "", "try", ":", "\n", "                ", "line", "[", "2", "]", "=", "int", "(", "line", "[", "2", "]", ")", "\n", "", "except", ":", "\n", "                ", "line", "[", "2", "]", "=", "float", "(", "line", "[", "2", "]", ")", "\n", "", "try", ":", "\n", "                ", "line", "[", "3", "]", "=", "int", "(", "line", "[", "3", "]", ")", "\n", "", "except", ":", "\n", "                ", "line", "[", "3", "]", "=", "float", "(", "line", "[", "3", "]", ")", "\n", "", "bbox", ".", "append", "(", "line", ")", "\n", "\n", "", "if", "len", "(", "bbox", ")", "!=", "len", "(", "li", ")", ":", "\n", "            ", "print", "(", "jj", ")", "\n", "", "f", ".", "close", "(", ")", "\n", "c", ".", "append", "(", "{", "'attr'", ":", "[", "]", ",", "'gt_rect'", ":", "bbox", ",", "'img_names'", ":", "li", ",", "'init_rect'", ":", "bbox", "[", "0", "]", ",", "'video_dir'", ":", "name_list", "[", "jj", "]", "}", ")", "\n", "\n", "", "d", "=", "dict", "(", "zip", "(", "b", ",", "c", ")", ")", "\n", "\n", "return", "d", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.modules.dynamic_context_filtering.BasicConv2d.__init__": [[8, 26], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamban_tracker.SiamBANTracker.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "in_planes", ",", "out_planes", ",", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "bias", "=", "False", ",", "\n", ")", ":", "\n", "        ", "super", "(", "BasicConv2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "basicconv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "\n", "out_planes", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "\n", "dilation", "=", "dilation", ",", "\n", "groups", "=", "groups", ",", "\n", "bias", "=", "bias", ",", "\n", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.modules.dynamic_context_filtering.BasicConv2d.forward": [[28, 30], ["dynamic_context_filtering.BasicConv2d.basicconv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "basicconv", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.modules.dynamic_context_filtering.AdaptiveConv.__init__": [[34, 49], ["torch.Module.__init__", "dynamic_context_filtering.AdaptiveConv.reset_parameters", "torch.Parameter", "torch.Parameter", "torch.Parameter", "dynamic_context_filtering.AdaptiveConv.register_parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamban_tracker.SiamBANTracker.__init__", "home.repos.pwc.inspect_result.vision4robotics_udat.neck.neck.Adjust_Transformer.reset_parameters"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "bias", "=", "True", ")", ":", "\n", "        ", "super", "(", "AdaptiveConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "kernel_size", "=", "(", "kernel_size", ",", "kernel_size", ")", "\n", "self", ".", "stride", "=", "(", "stride", ",", "stride", ")", "\n", "self", ".", "padding", "=", "(", "padding", ",", "padding", ")", "\n", "self", ".", "dilation", "=", "(", "dilation", ",", "dilation", ")", "\n", "self", ".", "groups", "=", "groups", "\n", "if", "bias", ":", "\n", "            ", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "out_channels", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "'bias'", ",", "None", ")", "\n", "", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.modules.dynamic_context_filtering.AdaptiveConv.reset_parameters": [[50, 57], ["math.sqrt", "dynamic_context_filtering.AdaptiveConv.bias.data.uniform_"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "n", "=", "self", ".", "in_channels", "\n", "for", "k", "in", "self", ".", "kernel_size", ":", "\n", "            ", "n", "*=", "k", "\n", "", "stdv", "=", "1.", "/", "math", ".", "sqrt", "(", "n", ")", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "self", ".", "bias", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.modules.dynamic_context_filtering.AdaptiveConv.forward": [[58, 76], ["feature_in.view.view.size", "feature_in.view.view.view", "torch.conv2d", "torch.conv2d", "torch.conv2d", "dynamic_out.view.view.view", "feature_in.view.view.size", "feature_in.view.view.size", "dynamic_out.view.view.size", "dynamic_out.view.view.size"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "feature_in", ",", "dynamic_weight", ")", ":", "\n", "# Get batch num", "\n", "        ", "batch_num", "=", "feature_in", ".", "size", "(", "0", ")", "\n", "\n", "# Reshape input tensor from size (N, C, H, W) to (1, N*C, H, W)", "\n", "feature_in", "=", "feature_in", ".", "view", "(", "1", ",", "-", "1", ",", "feature_in", ".", "size", "(", "2", ")", ",", "feature_in", ".", "size", "(", "3", ")", ")", "\n", "\n", "# Reshape dynamic_weight tensor from size (N, C*C, H, W) to (N*C, C, H, W)", "\n", "# dynamic_weight = dynamic_weight.view(-1, math.sqrt(dynamic_weight.size(1)),", "\n", "# dynamic_weight.size(2), dynamic_weight.size(3))", "\n", "\n", "# Do convolution", "\n", "dynamic_out", "=", "F", ".", "conv2d", "(", "feature_in", ",", "dynamic_weight", ",", "self", ".", "bias", ",", "self", ".", "stride", ",", "self", ".", "padding", ",", "self", ".", "dilation", ",", "self", ".", "groups", ")", "\n", "\n", "# Reshape dynamic_out tensor from (1, N*C, H, W) to (N, C, H, W)", "\n", "dynamic_out", "=", "dynamic_out", ".", "view", "(", "batch_num", ",", "-", "1", ",", "dynamic_out", ".", "size", "(", "2", ")", ",", "dynamic_out", ".", "size", "(", "3", ")", ")", "\n", "\n", "return", "dynamic_out", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.modules.dynamic_context_filtering.DCFMlayer.__init__": [[79, 100], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "dynamic_context_filtering.AdaptiveConv", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Softmax", "torch.Softmax", "torch.Softmax"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamban_tracker.SiamBANTracker.__init__"], ["    ", "def", "__init__", "(", "self", ",", "k1", ",", "d1", ",", "channel", ")", ":", "\n", "        ", "super", "(", "DCFMlayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "k1", "=", "k1", "\n", "\n", "self", ".", "channel", "=", "channel", "\n", "self", ".", "query_conv", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "channel", "*", "2", ",", "out_channels", "=", "channel", "//", "2", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", "\n", "self", ".", "key_conv", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "channel", ",", "out_channels", "=", "channel", "//", "2", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", "\n", "# self.key_future = nn.Conv2d(in_channels=in_dim, out_channels=in_dim // 4, kernel_size=1)", "\n", "self", ".", "value_conv", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "channel", ",", "out_channels", "=", "channel", "//", "2", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", "\n", "self", ".", "filter_conv", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "channel", "//", "2", ",", "out_channels", "=", "(", "channel", "//", "2", ")", "*", "(", "channel", "//", "2", ")", ",", "kernel_size", "=", "1", ",", "\n", "padding", "=", "0", ",", "bias", "=", "True", ")", "\n", "\n", "self", ".", "encode_conv_k1", "=", "nn", ".", "Conv2d", "(", "channel", ",", "channel", "//", "2", ",", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", "\n", "# self.encoder_conv_k1 = nn.Conv2d(channel, (channel//2)*(channel//2), 1, padding=0, bias=True)", "\n", "# # self.encoder_conv_ln = nn.LayerNorm([channel//2, k1, k1])", "\n", "self", ".", "acf_conv", "=", "AdaptiveConv", "(", "self", ".", "channel", "//", "2", ",", "self", ".", "channel", "//", "2", ",", "kernel_size", "=", "self", ".", "k1", ",", "padding", "=", "d1", ",", "dilation", "=", "d1", ")", "\n", "# # self.bn = nn.BatchNorm2d(channel//2)", "\n", "# self.encoder_conv_k0 = nn.Conv2d(channel*2, channel, 1, padding=0)", "\n", "# self.conv_fusion = nn.Conv2d(channel, channel, 1, padding=0)", "\n", "self", ".", "pool_k1", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "k1", ")", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.modules.dynamic_context_filtering.DCFMlayer.forward": [[101, 127], ["dynamic_context_filtering.DCFMlayer.query_conv().view", "dynamic_context_filtering.DCFMlayer.key_conv().view().permute", "dynamic_context_filtering.DCFMlayer.value_conv().view", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "dynamic_context_filtering.DCFMlayer.view", "dynamic_context_filtering.DCFMlayer.filter_conv", "dynamic_context_filtering.DCFMlayer.pool_k1", "g_k1.view.view.view", "dynamic_context_filtering.DCFMlayer.view", "dynamic_context_filtering.DCFMlayer.acf_conv", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "dynamic_context_filtering.DCFMlayer.query_conv", "dynamic_context_filtering.DCFMlayer.key_conv().view", "dynamic_context_filtering.DCFMlayer.value_conv", "dynamic_context_filtering.DCFMlayer.key_conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "feats_encoder", ",", "feats_encode", ")", ":", "\n", "# N, C, H, W = N, C, 56, 56", "\n", "        ", "N", ",", "C", ",", "H", ",", "W", "=", "feats_encode", ".", "shape", "\n", "# [N * C*2 * H * W]", "\n", "# query", "\n", "feats_query", "=", "self", ".", "query_conv", "(", "feats_encoder", ")", ".", "view", "(", "N", ",", "-", "1", ",", "H", "*", "W", ")", "\n", "# key", "\n", "feats_key", "=", "self", ".", "key_conv", "(", "feats_encode", ")", ".", "view", "(", "N", ",", "-", "1", ",", "H", "*", "W", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "# value", "\n", "feats_value", "=", "self", ".", "value_conv", "(", "feats_encode", ")", ".", "view", "(", "N", ",", "-", "1", ",", "H", "*", "W", ")", "\n", "# affinity", "\n", "affinity", "=", "torch", ".", "matmul", "(", "feats_query", ",", "feats_key", ")", "\n", "affinity", "=", "torch", ".", "softmax", "(", "affinity", ",", "-", "1", ")", "\n", "# out", "\n", "out", "=", "torch", ".", "matmul", "(", "affinity", ",", "feats_value", ")", "+", "feats_query", "\n", "out", "=", "out", ".", "view", "(", "N", ",", "-", "1", ",", "H", ",", "W", ")", "\n", "out", "=", "self", ".", "filter_conv", "(", "out", ")", "\n", "# [N * C*2 * K * K]", "\n", "g_k1", "=", "self", ".", "pool_k1", "(", "out", ")", "\n", "g_k1", "=", "g_k1", ".", "view", "(", "self", ".", "channel", "//", "2", ",", "self", ".", "channel", "//", "2", ",", "self", ".", "k1", ",", "self", ".", "k1", ")", "\n", "# f_k1 = self.encode_conv_k1(feats_encode)", "\n", "f_k1", "=", "feats_value", ".", "view", "(", "N", ",", "-", "1", ",", "H", ",", "W", ")", "\n", "\n", "dynamic_out", "=", "self", ".", "acf_conv", "(", "f_k1", ",", "g_k1", ")", "\n", "\n", "return", "dynamic_out", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.modules.dynamic_context_filtering.Alpha.__init__": [[131, 137], ["torch.Module.__init__", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamban_tracker.SiamBANTracker.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "num_experts", ",", "dropout_rate", ")", ":", "\n", "        ", "super", "(", "Alpha", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout_rate", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "in_channels", ",", "num_experts", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.modules.dynamic_context_filtering.Alpha.forward": [[138, 144], ["dynamic_context_filtering.Alpha.pool", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "dynamic_context_filtering.Alpha.fc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "pool", "(", "x", ")", "\n", "x", "=", "torch", ".", "flatten", "(", "x", ")", "\n", "# x = self.dropout(x)", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.modules.dynamic_context_filtering.DCFM.__init__": [[148, 160], ["torch.Module.__init__", "dynamic_context_filtering.DCFMlayer", "dynamic_context_filtering.DCFMlayer", "dynamic_context_filtering.DCFMlayer", "dynamic_context_filtering.Alpha", "dynamic_context_filtering.Alpha", "dynamic_context_filtering.Alpha", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamban_tracker.SiamBANTracker.__init__"], ["    ", "def", "__init__", "(", "self", ",", "channel", ",", "k1", ",", "k2", ",", "k3", ",", "d1", "=", "1", ",", "d2", "=", "3", ",", "d3", "=", "5", ")", ":", "\n", "        ", "super", "(", "DCFM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "ACFM1", "=", "DCFMlayer", "(", "k1", ",", "d1", ",", "channel", ")", "\n", "self", ".", "ACFM2", "=", "DCFMlayer", "(", "k2", ",", "d2", ",", "channel", ")", "\n", "self", ".", "ACFM3", "=", "DCFMlayer", "(", "k3", ",", "d3", ",", "channel", ")", "\n", "self", ".", "Alpha1", "=", "Alpha", "(", "channel", "//", "2", ",", "1", ",", "0.1", ")", "\n", "self", ".", "Alpha2", "=", "Alpha", "(", "channel", "//", "2", ",", "1", ",", "0.1", ")", "\n", "self", ".", "Alpha3", "=", "Alpha", "(", "channel", "//", "2", ",", "1", ",", "0.1", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "fire", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "channel", "//", "2", ",", "channel", ",", "3", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "channel", ")", "\n", "# nn.ReLU(inplace=True)", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.modules.dynamic_context_filtering.DCFM.forward": [[163, 187], ["dynamic_context_filtering.DCFM.ACFM1", "dynamic_context_filtering.DCFM.ACFM2", "dynamic_context_filtering.DCFM.ACFM3", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "dynamic_context_filtering.DCFM.Alpha1", "dynamic_context_filtering.DCFM.Alpha2", "dynamic_context_filtering.DCFM.Alpha3", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.relu.append", "dynamic_context_filtering.DCFM.fire"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "feats_encoder", ",", "feats_encode", ")", ":", "\n", "        ", "N", ",", "C", ",", "H", ",", "W", "=", "feats_encode", ".", "shape", "\n", "acf1", "=", "self", ".", "ACFM1", "(", "feats_encoder", ",", "feats_encode", ")", "\n", "acf2", "=", "self", ".", "ACFM2", "(", "feats_encoder", ",", "feats_encode", ")", "\n", "acf3", "=", "self", ".", "ACFM3", "(", "feats_encoder", ",", "feats_encode", ")", "\n", "\n", "out", "=", "[", "]", "\n", "acf1_list", "=", "torch", ".", "split", "(", "acf1", ",", "1", ",", "0", ")", "\n", "acf2_list", "=", "torch", ".", "split", "(", "acf2", ",", "1", ",", "0", ")", "\n", "acf3_list", "=", "torch", ".", "split", "(", "acf3", ",", "1", ",", "0", ")", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "            ", "alpha1", "=", "self", ".", "Alpha1", "(", "acf1_list", "[", "i", "]", ")", "\n", "alpha2", "=", "self", ".", "Alpha2", "(", "acf2_list", "[", "i", "]", ")", "\n", "alpha3", "=", "self", ".", "Alpha3", "(", "acf3_list", "[", "i", "]", ")", "\n", "alpha", "=", "torch", ".", "cat", "(", "[", "alpha1", ",", "alpha2", ",", "alpha3", "]", ",", "dim", "=", "0", ")", "\n", "# alpha = torch.sigmoid(alpha)", "\n", "alpha", "=", "torch", ".", "softmax", "(", "alpha", ",", "dim", "=", "0", ")", "\n", "f_mdk", "=", "alpha", "[", "0", "]", "*", "acf1_list", "[", "i", "]", "+", "alpha", "[", "1", "]", "*", "acf2_list", "[", "i", "]", "+", "alpha", "[", "2", "]", "*", "acf3_list", "[", "i", "]", "\n", "out", ".", "append", "(", "self", ".", "fire", "(", "f_mdk", ")", ")", "\n", "", "out", "=", "torch", ".", "cat", "(", "out", ",", "dim", "=", "0", ")", "\n", "# out = F.relu(feats_encode + out)", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.modules.FuseBlock.MakeFB.__init__": [[7, 17], ["torch.Module.__init__", "FuseBlock.MakeFB._make_fuse_layers", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamban_tracker.SiamBANTracker.__init__", "home.repos.pwc.inspect_result.vision4robotics_udat.modules.FuseBlock.MakeFB._make_fuse_layers"], ["    ", "def", "__init__", "(", "self", ",", "num_branches", ",", "num_blocks", ",", "num_channels", ",", "multi_scale_output", "=", "True", ")", ":", "\n", "        ", "super", "(", "MakeFB", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# self.BasicBlock = BasicBlock", "\n", "self", ".", "num_branches", "=", "num_branches", "\n", "self", ".", "num_blocks", "=", "num_blocks", "\n", "self", ".", "num_channels", "=", "num_channels", "\n", "self", ".", "multi_scale_output", "=", "multi_scale_output", "\n", "# self.branches = self._make_branches(BasicBlock, num_branches, num_blocks, num_channels)", "\n", "self", ".", "fuse_layers", "=", "self", ".", "_make_fuse_layers", "(", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.modules.FuseBlock.MakeFB._make_one_branch": [[18, 36], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "BasicBlock", "layers.append", "BasicBlock"], "methods", ["None"], ["", "def", "_make_one_branch", "(", "self", ",", "BasicBlock", ",", "branch_index", ",", "num_blocks", ",", "num_channels", ",", "stride", "=", "1", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "\n", "BasicBlock", "(", "\n", "self", ".", "num_channels", "[", "branch_index", "]", ",", "\n", "num_channels", "[", "branch_index", "]", ",", "\n", "stride", "\n", ")", "\n", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "num_blocks", "[", "branch_index", "]", ")", ":", "\n", "            ", "layers", ".", "append", "(", "\n", "BasicBlock", "(", "\n", "self", ".", "num_channels", "[", "branch_index", "]", ",", "\n", "num_channels", "[", "branch_index", "]", "\n", ")", "\n", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.modules.FuseBlock.MakeFB._make_branches": [[37, 46], ["range", "torch.ModuleList", "torch.ModuleList", "branches.append", "FuseBlock.MakeFB._make_one_branch"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.modules.FuseBlock.MakeFB._make_one_branch"], ["", "def", "_make_branches", "(", "self", ",", "BasicBlock", ",", "num_branches", ",", "num_blocks", ",", "num_channels", ")", ":", "\n", "        ", "branches", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "num_branches", ")", ":", "\n", "            ", "branches", ".", "append", "(", "\n", "self", ".", "_make_one_branch", "(", "BasicBlock", ",", "i", ",", "num_blocks", ",", "num_channels", ")", "\n", ")", "\n", "\n", "", "return", "nn", ".", "ModuleList", "(", "branches", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.modules.FuseBlock.MakeFB._make_fuse_layers": [[47, 153], ["range", "torch.ModuleList", "torch.ModuleList", "range", "fuse_layers.append", "torch.ModuleList", "torch.ModuleList", "fuse_layer.append", "torch.Sequential", "torch.Sequential", "fuse_layer.append", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Upsample", "torch.Upsample", "torch.Sequential", "torch.Sequential", "fuse_layer.append", "range", "fuse_layer.append", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Upsample", "torch.Upsample", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "conv3x3s.append", "torch.Sequential", "torch.Sequential", "conv3x3s.append", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "conv3x3s.append", "conv3x3s.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["None"], ["", "def", "_make_fuse_layers", "(", "self", ")", ":", "\n", "# if self.num_branches == 1:", "\n", "#     return None", "\n", "\n", "        ", "num_branches", "=", "self", ".", "num_branches", "\n", "num_inchannels", "=", "self", ".", "num_channels", "\n", "fuse_layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_branches", ")", ":", "\n", "            ", "fuse_layer", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "num_branches", ")", ":", "\n", "                ", "if", "j", ">", "i", "and", "j", "!=", "3", ":", "\n", "                    ", "fuse_layer", ".", "append", "(", "\n", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "num_inchannels", "[", "j", "]", ",", "\n", "128", ",", "\n", "1", ",", "1", ",", "0", ",", "bias", "=", "False", "\n", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "128", ")", ",", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", "**", "(", "j", "-", "i", ")", ",", "mode", "=", "'nearest'", ")", "\n", ")", "\n", ")", "\n", "\n", "", "elif", "j", ">", "i", "and", "j", "==", "3", ":", "\n", "                    ", "fuse_layer", ".", "append", "(", "\n", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "num_inchannels", "[", "j", "]", ",", "\n", "128", ",", "\n", "1", ",", "1", ",", "0", ",", "bias", "=", "False", "\n", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "128", ")", ",", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", "**", "(", "j", "-", "i", "-", "1", ")", ",", "mode", "=", "'nearest'", ")", "\n", ")", "\n", ")", "\n", "", "elif", "j", "==", "i", ":", "\n", "                    ", "fuse_layer", ".", "append", "(", "\n", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "num_inchannels", "[", "j", "]", ",", "\n", "128", ",", "\n", "1", ",", "1", ",", "0", ",", "bias", "=", "False", "\n", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "128", ")", ")", "\n", ")", "\n", "", "else", ":", "\n", "                    ", "conv3x3s", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "i", "-", "j", ")", ":", "\n", "                        ", "if", "k", "==", "i", "-", "j", "-", "1", "and", "i", "!=", "3", ":", "\n", "# num_outchannels_conv3x3 = num_inchannels[i]", "\n", "                            ", "num_outchannels_conv3x3", "=", "128", "\n", "conv3x3s", ".", "append", "(", "\n", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "num_inchannels", "[", "j", "]", ",", "\n", "num_outchannels_conv3x3", ",", "\n", "3", ",", "2", ",", "1", ",", "bias", "=", "False", "\n", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "num_outchannels_conv3x3", ")", "\n", ")", "\n", ")", "\n", "", "elif", "k", "==", "i", "-", "j", "-", "2", "and", "i", "==", "3", ":", "\n", "# num_outchannels_conv3x3 = num_inchannels[i]", "\n", "                            ", "num_outchannels_conv3x3", "=", "128", "\n", "conv3x3s", ".", "append", "(", "\n", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "num_inchannels", "[", "j", "]", ",", "\n", "num_outchannels_conv3x3", ",", "\n", "3", ",", "2", ",", "1", ",", "bias", "=", "False", "\n", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "num_outchannels_conv3x3", ")", "\n", ")", "\n", ")", "\n", "", "elif", "k", "==", "i", "-", "j", "-", "1", "and", "i", "==", "3", "and", "j", "!=", "2", ":", "\n", "                            ", "pass", "\n", "", "elif", "k", "==", "i", "-", "j", "-", "1", "and", "i", "==", "3", "and", "j", "==", "2", ":", "\n", "                            ", "num_outchannels_conv3x3", "=", "128", "\n", "conv3x3s", ".", "append", "(", "\n", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "num_inchannels", "[", "j", "]", ",", "\n", "num_outchannels_conv3x3", ",", "\n", "3", ",", "1", ",", "1", ",", "bias", "=", "False", "\n", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "num_outchannels_conv3x3", ")", "\n", ")", "\n", ")", "\n", "", "else", ":", "\n", "                            ", "num_outchannels_conv3x3", "=", "num_inchannels", "[", "j", "]", "\n", "# num_outchannels_conv3x3 = 96", "\n", "conv3x3s", ".", "append", "(", "\n", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "num_inchannels", "[", "j", "]", ",", "\n", "num_outchannels_conv3x3", ",", "\n", "3", ",", "2", ",", "1", ",", "bias", "=", "False", "\n", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "num_outchannels_conv3x3", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", "\n", ")", "\n", ")", "\n", "", "", "fuse_layer", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "conv3x3s", ")", ")", "\n", "", "", "fuse_layers", ".", "append", "(", "nn", ".", "ModuleList", "(", "fuse_layer", ")", ")", "\n", "\n", "", "return", "nn", ".", "ModuleList", "(", "fuse_layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.modules.FuseBlock.MakeFB.forward": [[154, 163], ["range", "len", "range", "x_fuse.append", "FuseBlock.MakeFB.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x_fuse", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "fuse_layers", ")", ")", ":", "\n", "# y = x[0] if i == 0 else self.fuse_layers[i][0](x[0])", "\n", "            ", "y", "=", "self", ".", "fuse_layers", "[", "i", "]", "[", "0", "]", "(", "x", "[", "0", "]", ")", "\n", "for", "j", "in", "range", "(", "1", ",", "self", ".", "num_branches", ")", ":", "\n", "                ", "y", "=", "y", "+", "self", ".", "fuse_layers", "[", "i", "]", "[", "j", "]", "(", "x", "[", "j", "]", ")", "\n", "", "x_fuse", ".", "append", "(", "self", ".", "relu", "(", "y", ")", ")", "\n", "", "return", "x_fuse", "\n", "", "", ""]], "home.repos.pwc.inspect_result.vision4robotics_udat.networks.resnet_dilation.BasicBlock.__init__": [[36, 45], ["torch.Module.__init__", "resnet_dilation.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "resnet_dilation.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamban_tracker.SiamBANTracker.__init__", "home.repos.pwc.inspect_result.vision4robotics_udat.backbone.resnet_atrous.conv3x3", "home.repos.pwc.inspect_result.vision4robotics_udat.backbone.resnet_atrous.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", ",", "dilation", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ",", "1", ",", "dilation", ",", "dilation", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.networks.resnet_dilation.BasicBlock.forward": [[46, 63], ["resnet_dilation.BasicBlock.conv1", "resnet_dilation.BasicBlock.bn1", "resnet_dilation.BasicBlock.relu", "resnet_dilation.BasicBlock.conv2", "resnet_dilation.BasicBlock.bn2", "resnet_dilation.BasicBlock.relu", "resnet_dilation.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.networks.resnet_dilation.Bottleneck.__init__": [[68, 80], ["torch.Module.__init__", "resnet_dilation.conv1x1", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnet_dilation.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnet_dilation.conv1x1", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamban_tracker.SiamBANTracker.__init__", "home.repos.pwc.inspect_result.vision4robotics_udat.networks.models.conv1x1", "home.repos.pwc.inspect_result.vision4robotics_udat.backbone.resnet_atrous.conv3x3", "home.repos.pwc.inspect_result.vision4robotics_udat.networks.models.conv1x1"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", ",", "dilation", ",", "downsample", "=", "None", ",", "expansion", "=", "4", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "expansion", "=", "expansion", "\n", "self", ".", "conv1", "=", "conv1x1", "(", "inplanes", ",", "planes", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ",", "stride", ",", "dilation", ",", "dilation", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "conv1x1", "(", "planes", ",", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.networks.resnet_dilation.Bottleneck.forward": [[81, 102], ["resnet_dilation.Bottleneck.conv1", "resnet_dilation.Bottleneck.bn1", "resnet_dilation.Bottleneck.relu", "resnet_dilation.Bottleneck.conv2", "resnet_dilation.Bottleneck.bn2", "resnet_dilation.Bottleneck.relu", "resnet_dilation.Bottleneck.conv3", "resnet_dilation.Bottleneck.bn3", "resnet_dilation.Bottleneck.relu", "resnet_dilation.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.networks.resnet_dilation.ResNet.__init__": [[106, 134], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "resnet_dilation.ResNet._make_layer", "resnet_dilation.ResNet._make_layer", "resnet_dilation.ResNet._make_layer", "resnet_dilation.ResNet._make_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "resnet_dilation.ResNet.modules", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamban_tracker.SiamBANTracker.__init__", "home.repos.pwc.inspect_result.vision4robotics_udat.backbone.resnet_atrous.ResNet._make_layer", "home.repos.pwc.inspect_result.vision4robotics_udat.backbone.resnet_atrous.ResNet._make_layer", "home.repos.pwc.inspect_result.vision4robotics_udat.backbone.resnet_atrous.ResNet._make_layer", "home.repos.pwc.inspect_result.vision4robotics_udat.backbone.resnet_atrous.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "output_stride", ",", "num_classes", "=", "1000", ",", "input_channels", "=", "3", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "output_stride", "==", "8", ":", "\n", "            ", "stride", "=", "[", "1", ",", "2", ",", "1", ",", "1", "]", "\n", "dilation", "=", "[", "1", ",", "1", ",", "2", ",", "2", "]", "\n", "", "elif", "output_stride", "==", "16", ":", "\n", "            ", "stride", "=", "[", "1", ",", "2", ",", "2", ",", "1", "]", "\n", "dilation", "=", "[", "1", ",", "1", ",", "1", ",", "2", "]", "\n", "\n", "", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "input_channels", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ",", "stride", "=", "stride", "[", "0", "]", ",", "dilation", "=", "dilation", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "stride", "[", "1", "]", ",", "dilation", "=", "dilation", "[", "1", "]", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "stride", "[", "2", "]", ",", "dilation", "=", "dilation", "[", "2", "]", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "stride", "[", "3", "]", ",", "dilation", "=", "dilation", "[", "3", "]", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.networks.resnet_dilation.ResNet._make_layer": [[135, 150], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "resnet_dilation.conv1x1", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.networks.models.conv1x1"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", ",", "dilation", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "stride", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "dilation", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "1", ",", "dilation", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.networks.resnet_dilation.ResNet.forward": [[151, 167], ["resnet_dilation.ResNet.conv1", "resnet_dilation.ResNet.bn1", "resnet_dilation.ResNet.relu", "resnet_dilation.ResNet.maxpool", "resnet_dilation.ResNet.layer1", "resnet_dilation.ResNet.layer2", "resnet_dilation.ResNet.layer3", "resnet_dilation.ResNet.layer4", "resnet_dilation.ResNet.avgpool", "resnet_dilation.ResNet.view", "resnet_dilation.ResNet.fc", "resnet_dilation.ResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.networks.resnet_dilation.conv3x3": [[22, 26], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "dilation", "=", "1", ",", "groups", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "groups", "=", "groups", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.networks.resnet_dilation.conv1x1": [[28, 31], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"1x1 convolution\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.networks.resnet_dilation.resnet18": [[169, 178], ["resnet_dilation.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "", "def", "resnet18", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-18 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet18'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.networks.resnet_dilation.resnet34": [[180, 189], ["resnet_dilation.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet34", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-34 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet34'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.networks.resnet_dilation.resnet50": [[191, 200], ["resnet_dilation.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet50", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-50 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet50'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.networks.resnet_dilation.resnet101": [[202, 211], ["resnet_dilation.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet101", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-101 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet101'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.networks.resnet_dilation.resnet152": [[213, 222], ["resnet_dilation.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet152", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-152 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet152'", "]", ")", ")", "\n", "", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.vision4robotics_udat.networks.models.ImageModel.__init__": [[22, 28], ["torch.Module.__init__", "libs.networks.DCFNet_bk.DCFNet_backbone"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamban_tracker.SiamBANTracker.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ",", "pretrained", "=", "False", ")", ":", "\n", "        ", "super", "(", "ImageModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "backbone", "=", "DCFNet_backbone", "(", "\n", "cfg", "=", "cfg", ",", "\n", "output_stride", "=", "32", ",", "\n", "pretrained", "=", "pretrained", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.networks.models.ImageModel.forward": [[30, 33], ["models.ImageModel.backbone"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "frame", ")", ":", "\n", "        ", "seg", "=", "self", ".", "backbone", "(", "frame", ")", "\n", "return", "seg", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.networks.models.ImageModel.freeze_bn": [[34, 38], ["models.ImageModel.backbone.named_modules", "isinstance", "m[].eval"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.evaluation.f1_benchmark.F1Benchmark.eval"], ["", "def", "freeze_bn", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "backbone", ".", "named_modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", "[", "1", "]", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", "[", "1", "]", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.networks.models.GateWeightGenerator.__init__": [[42, 48], ["torch.Module.__init__", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamban_tracker.SiamBANTracker.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "num_experts", ")", ":", "\n", "        ", "super", "(", "GateWeightGenerator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "# self.dropout = nn.Dropout(dropout_rate)", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "in_channels", ",", "num_experts", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.networks.models.GateWeightGenerator.forward": [[49, 55], ["models.GateWeightGenerator.pool", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "models.GateWeightGenerator.fc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "pool", "(", "x", ")", "\n", "x", "=", "torch", ".", "flatten", "(", "x", ")", "\n", "# x = self.dropout(x)", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.networks.models.DCFMRear.__init__": [[58, 74], ["torch.Module.__init__", "libs.modules.dynamic_context_filtering.DCFM", "libs.modules.dynamic_context_filtering.DCFM", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "models.GateWeightGenerator", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamban_tracker.SiamBANTracker.__init__"], ["    ", "def", "__init__", "(", "self", ",", "channel", "=", "128", ",", "add", "=", "True", ",", "k1", "=", "3", ",", "k2", "=", "3", ",", "k3", "=", "3", ",", "d1", "=", "1", ",", "d2", "=", "3", ",", "d3", "=", "5", ")", ":", "\n", "        ", "super", "(", "DCFMRear", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "MDK_front", "=", "DCFM", "(", "channel", "=", "channel", "//", "2", ",", "k1", "=", "k1", ",", "k2", "=", "k2", ",", "k3", "=", "k3", ",", "d1", "=", "d1", ",", "d2", "=", "d2", ",", "d3", "=", "d3", ")", "\n", "self", ".", "MDK_rear", "=", "DCFM", "(", "channel", "=", "channel", "//", "2", ",", "k1", "=", "k1", ",", "k2", "=", "k2", ",", "k3", "=", "k3", ",", "d1", "=", "d1", ",", "d2", "=", "d2", ",", "d3", "=", "d3", ")", "\n", "# self.bn = nn.BatchNorm2d(channel)", "\n", "self", ".", "add", "=", "add", "\n", "self", ".", "conva", "=", "nn", ".", "Conv2d", "(", "channel", ",", "channel", "//", "2", ",", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "convc", "=", "nn", ".", "Conv2d", "(", "channel", ",", "channel", "//", "2", ",", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "channel", "//", "2", ",", "channel", ",", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "channel", "//", "2", ",", "channel", ",", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "Alpha", "=", "GateWeightGenerator", "(", "channel", ",", "1", ")", "\n", "\n", "self", ".", "MDK_fire", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "channel", "*", "2", ",", "out_channels", "=", "channel", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "channel", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.networks.models.DCFMRear.forward": [[76, 90], ["models.DCFMRear.conva", "models.DCFMRear.MDK_front", "models.DCFMRear.conv1", "models.DCFMRear.convc", "models.DCFMRear.MDK_rear", "models.DCFMRear.conv2", "models.DCFMRear.MDK_fire", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "models.DCFMRear.Alpha"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "feats_encoder_front", ",", "feats_encode", ",", "feats_encoder_rear", ")", ":", "\n", "        ", "feats_encode1", "=", "self", ".", "conva", "(", "feats_encode", ")", "\n", "y_front", "=", "self", ".", "MDK_front", "(", "feats_encoder_front", ",", "feats_encode1", ")", "\n", "y_front", "=", "self", ".", "conv1", "(", "y_front", ")", "\n", "\n", "feats_encode2", "=", "self", ".", "convc", "(", "feats_encode", ")", "\n", "y_rear", "=", "self", ".", "MDK_rear", "(", "feats_encoder_rear", ",", "feats_encode2", ")", "\n", "y_rear", "=", "self", ".", "conv2", "(", "y_rear", ")", "\n", "\n", "dynamic_output", "=", "self", ".", "MDK_fire", "(", "torch", ".", "cat", "(", "(", "y_front", ",", "y_rear", ")", ",", "dim", "=", "1", ")", ")", "\n", "if", "self", ".", "add", ":", "\n", "            ", "alpha", "=", "self", ".", "Alpha", "(", "dynamic_output", ")", "\n", "dynamic_output", "=", "alpha", "*", "dynamic_output", "+", "(", "1", "-", "alpha", ")", "*", "feats_encode", "\n", "", "return", "dynamic_output", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.networks.models.VideoModel.__init__": [[94, 115], ["torch.Module.__init__", "libs.networks.DCFNet_bk.DCFNet_backbone", "models.DCFMRear", "models.DCFMRear", "models.DCFMRear", "models.DCFMRear", "models.VideoModel.state_dict", "models.VideoModel.state_dict", "models.VideoModel.video_init_layer", "models.VideoModel.video_init_layer"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamban_tracker.SiamBANTracker.__init__", "home.repos.pwc.inspect_result.vision4robotics_udat.networks.models.VideoModel.video_init_layer", "home.repos.pwc.inspect_result.vision4robotics_udat.networks.models.VideoModel.video_init_layer"], ["    ", "def", "__init__", "(", "self", ",", "output_stride", "=", "16", ",", "pretrained", "=", "True", ",", "cfg", "=", "None", ")", ":", "\n", "        ", "super", "(", "VideoModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "backbone", "=", "DCFNet_backbone", "(", "\n", "cfg", "=", "cfg", ",", "\n", "output_stride", "=", "output_stride", ",", "\n", "pretrained", "=", "pretrained", "\n", ")", "\n", "\n", "self", ".", "MDK_module_R3", "=", "DCFMRear", "(", "channel", "=", "128", ",", "k1", "=", "3", ",", "k2", "=", "3", ",", "k3", "=", "3", ",", "d1", "=", "1", ",", "d2", "=", "3", ",", "d3", "=", "5", ")", "\n", "self", ".", "MDK_module_R2", "=", "DCFMRear", "(", "channel", "=", "128", ",", "k1", "=", "3", ",", "k2", "=", "3", ",", "k3", "=", "3", ",", "d1", "=", "1", ",", "d2", "=", "3", ",", "d3", "=", "5", ")", "\n", "self", ".", "MDK_module_R1", "=", "DCFMRear", "(", "channel", "=", "128", ",", "k1", "=", "3", ",", "k2", "=", "3", ",", "k3", "=", "3", ",", "d1", "=", "1", ",", "d2", "=", "3", ",", "d3", "=", "5", ")", "\n", "self", ".", "MDK_module_R0", "=", "DCFMRear", "(", "channel", "=", "128", ",", "k1", "=", "3", ",", "k2", "=", "3", ",", "k3", "=", "3", ",", "d1", "=", "1", ",", "d2", "=", "3", ",", "d3", "=", "5", ")", "\n", "\n", "# self.freeze_bn()", "\n", "if", "pretrained", ":", "\n", "            ", "for", "key", "in", "self", ".", "state_dict", "(", ")", ":", "\n", "                ", "if", "'backbone'", "not", "in", "key", ":", "\n", "                    ", "self", ".", "video_init_layer", "(", "key", ")", "\n", "", "", "", "else", ":", "\n", "            ", "for", "key", "in", "self", ".", "state_dict", "(", ")", ":", "\n", "                ", "self", ".", "video_init_layer", "(", "key", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.networks.models.VideoModel.video_init_layer": [[116, 125], ["key.split", "[].ndimension", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "key.split", "models.VideoModel.state_dict", "models.VideoModel.state_dict", "models.VideoModel.state_dict", "models.VideoModel.state_dict"], "methods", ["None"], ["", "", "", "def", "video_init_layer", "(", "self", ",", "key", ")", ":", "\n", "        ", "if", "key", ".", "split", "(", "'.'", ")", "[", "-", "1", "]", "==", "'weight'", ":", "\n", "            ", "if", "'conv'", "in", "key", ":", "\n", "                ", "if", "self", ".", "state_dict", "(", ")", "[", "key", "]", ".", "ndimension", "(", ")", ">=", "2", ":", "\n", "                    ", "nn", ".", "init", ".", "kaiming_normal_", "(", "self", ".", "state_dict", "(", ")", "[", "key", "]", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "", "elif", "'bn'", "in", "key", ":", "\n", "                ", "self", ".", "state_dict", "(", ")", "[", "key", "]", "[", "...", "]", "=", "1", "\n", "", "", "elif", "key", ".", "split", "(", "'.'", ")", "[", "-", "1", "]", "==", "'bias'", ":", "\n", "            ", "self", ".", "state_dict", "(", ")", "[", "key", "]", "[", "...", "]", "=", "0.001", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.networks.models.VideoModel.freeze_bn": [[126, 130], ["models.VideoModel.backbone.named_modules", "isinstance", "m[].eval"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.evaluation.f1_benchmark.F1Benchmark.eval"], ["", "", "def", "freeze_bn", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "backbone", ".", "named_modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", "[", "1", "]", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", "[", "1", "]", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.networks.models.VideoModel.forward": [[131, 275], ["premask_block4.append", "premask_block3.append", "premask_block2.append", "premask_block1.append", "enumerate", "models.VideoModel.backbone.feat_conv", "models.VideoModel.backbone.stage4", "models.VideoModel.MDK_module_R0", "models.VideoModel.backbone.DenseDecoder.seg_conv", "models.VideoModel.MDK_module_R1", "models.VideoModel.backbone.DenseDecoder.seg_conv2", "models.VideoModel.MDK_module_R2", "models.VideoModel.backbone.DenseDecoder.seg_conv3", "models.VideoModel.MDK_module_R3", "models.VideoModel.backbone.DenseDecoder.segment", "preds.append", "range", "range", "range", "range", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "premask_block4.append", "premask_block3.append", "premask_block2.append", "premask_block1.append", "premask_block4.append", "premask_block3.append", "premask_block2.append", "premask_block1.append", "premask_block4.append", "premask_block3.append", "premask_block2.append", "premask_block1.append"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.networks.DCFNet_bk.DCFNet_backbone.feat_conv", "home.repos.pwc.inspect_result.vision4robotics_udat.networks.DCFNet_bk._DenseDecoder.seg_conv", "home.repos.pwc.inspect_result.vision4robotics_udat.networks.DCFNet_bk._DenseDecoder.seg_conv2", "home.repos.pwc.inspect_result.vision4robotics_udat.networks.DCFNet_bk._DenseDecoder.seg_conv3", "home.repos.pwc.inspect_result.vision4robotics_udat.networks.DCFNet_bk._DenseDecoder.segment"], ["", "", "", "def", "forward", "(", "self", ",", "clip", ")", ":", "\n", "\n", "        ", "clip_feats", "=", "[", "self", ".", "backbone", ".", "feat_conv", "(", "frame", ")", "for", "frame", "in", "clip", "]", "\n", "\n", "y_list", "=", "[", "self", ".", "backbone", ".", "stage4", "(", "clip_feats", "[", "p", "]", ")", "for", "p", "in", "range", "(", "4", ")", "]", "\n", "\n", "premask_block1", "=", "[", "]", "\n", "premask_block2", "=", "[", "]", "\n", "premask_block3", "=", "[", "]", "\n", "premask_block4", "=", "[", "]", "\n", "\n", "i", "=", "0", "\n", "while", "i", "<", "4", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "feats_encoder_front", "=", "y_list", "[", "0", "]", "[", "3", "]", "\n", "feats_input", "=", "y_list", "[", "0", "]", "[", "3", "]", "\n", "feats_encoder_rear", "=", "y_list", "[", "1", "]", "[", "3", "]", "\n", "\n", "", "elif", "i", "==", "1", ":", "\n", "                ", "feats_encoder_front", "=", "y_list", "[", "0", "]", "[", "3", "]", "\n", "feats_input", "=", "y_list", "[", "1", "]", "[", "3", "]", "\n", "feats_encoder_rear", "=", "y_list", "[", "2", "]", "[", "3", "]", "\n", "premask_block4", ".", "append", "(", "saliency_feat_res", ")", "\n", "\n", "", "elif", "i", "==", "2", ":", "\n", "                ", "feats_encoder_front", "=", "y_list", "[", "1", "]", "[", "3", "]", "\n", "feats_input", "=", "y_list", "[", "2", "]", "[", "3", "]", "\n", "feats_encoder_rear", "=", "y_list", "[", "3", "]", "[", "3", "]", "\n", "premask_block4", ".", "append", "(", "saliency_feat_res", ")", "\n", "\n", "", "elif", "i", "==", "3", ":", "\n", "                ", "feats_encoder_front", "=", "y_list", "[", "2", "]", "[", "3", "]", "\n", "feats_input", "=", "y_list", "[", "3", "]", "[", "3", "]", "\n", "feats_encoder_rear", "=", "y_list", "[", "3", "]", "[", "3", "]", "\n", "premask_block4", ".", "append", "(", "saliency_feat_res", ")", "\n", "\n", "", "saliency_feat_res", "=", "self", ".", "MDK_module_R0", "(", "feats_encoder_front", ",", "feats_input", ",", "feats_encoder_rear", ")", "\n", "i", "=", "i", "+", "1", "\n", "", "premask_block4", ".", "append", "(", "saliency_feat_res", ")", "\n", "\n", "feats_encode_block3", "=", "[", "self", ".", "backbone", ".", "DenseDecoder", ".", "seg_conv", "(", "y_list", "[", "k", "]", "[", "2", "]", ",", "premask_block4", "[", "k", "]", ")", "\n", "for", "k", "in", "range", "(", "4", ")", "]", "\n", "\n", "i", "=", "0", "\n", "while", "i", "<", "4", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "feats_encoder_front", "=", "feats_encode_block3", "[", "0", "]", "\n", "feats_input", "=", "feats_encode_block3", "[", "0", "]", "\n", "feats_encoder_rear", "=", "feats_encode_block3", "[", "1", "]", "\n", "\n", "", "elif", "i", "==", "1", ":", "\n", "                ", "feats_encoder_front", "=", "feats_encode_block3", "[", "0", "]", "\n", "feats_input", "=", "feats_encode_block3", "[", "1", "]", "\n", "feats_encoder_rear", "=", "feats_encode_block3", "[", "2", "]", "\n", "premask_block3", ".", "append", "(", "saliency_feat_res", ")", "\n", "\n", "", "elif", "i", "==", "2", ":", "\n", "                ", "feats_encoder_front", "=", "feats_encode_block3", "[", "1", "]", "\n", "feats_input", "=", "feats_encode_block3", "[", "2", "]", "\n", "feats_encoder_rear", "=", "feats_encode_block3", "[", "3", "]", "\n", "premask_block3", ".", "append", "(", "saliency_feat_res", ")", "\n", "\n", "", "elif", "i", "==", "3", ":", "\n", "                ", "feats_encoder_front", "=", "feats_encode_block3", "[", "2", "]", "\n", "feats_input", "=", "feats_encode_block3", "[", "3", "]", "\n", "feats_encoder_rear", "=", "feats_encode_block3", "[", "3", "]", "\n", "premask_block3", ".", "append", "(", "saliency_feat_res", ")", "\n", "\n", "", "saliency_feat_res", "=", "self", ".", "MDK_module_R1", "(", "feats_encoder_front", ",", "feats_input", ",", "feats_encoder_rear", ")", "\n", "i", "=", "i", "+", "1", "\n", "", "premask_block3", ".", "append", "(", "saliency_feat_res", ")", "\n", "\n", "feats_encode_block2", "=", "[", "self", ".", "backbone", ".", "DenseDecoder", ".", "seg_conv2", "(", "y_list", "[", "k", "]", "[", "1", "]", ",", "premask_block4", "[", "k", "]", ",", "premask_block3", "[", "k", "]", ")", "\n", "for", "k", "in", "range", "(", "4", ")", "]", "\n", "\n", "i", "=", "0", "\n", "while", "i", "<", "4", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "feats_encoder_front", "=", "feats_encode_block2", "[", "0", "]", "\n", "feats_input", "=", "feats_encode_block2", "[", "0", "]", "\n", "feats_encoder_rear", "=", "feats_encode_block2", "[", "1", "]", "\n", "\n", "", "elif", "i", "==", "1", ":", "\n", "                ", "feats_encoder_front", "=", "feats_encode_block2", "[", "0", "]", "\n", "feats_input", "=", "feats_encode_block2", "[", "1", "]", "\n", "feats_encoder_rear", "=", "feats_encode_block2", "[", "2", "]", "\n", "premask_block2", ".", "append", "(", "saliency_feat_res", ")", "\n", "\n", "", "elif", "i", "==", "2", ":", "\n", "                ", "feats_encoder_front", "=", "feats_encode_block2", "[", "1", "]", "\n", "feats_input", "=", "feats_encode_block2", "[", "2", "]", "\n", "feats_encoder_rear", "=", "feats_encode_block2", "[", "3", "]", "\n", "premask_block2", ".", "append", "(", "saliency_feat_res", ")", "\n", "\n", "", "elif", "i", "==", "3", ":", "\n", "                ", "feats_encoder_front", "=", "feats_encode_block2", "[", "2", "]", "\n", "feats_input", "=", "feats_encode_block2", "[", "3", "]", "\n", "feats_encoder_rear", "=", "feats_encode_block2", "[", "3", "]", "\n", "premask_block2", ".", "append", "(", "saliency_feat_res", ")", "\n", "\n", "", "saliency_feat_res", "=", "self", ".", "MDK_module_R2", "(", "feats_encoder_front", ",", "feats_input", ",", "feats_encoder_rear", ")", "\n", "i", "=", "i", "+", "1", "\n", "", "premask_block2", ".", "append", "(", "saliency_feat_res", ")", "\n", "\n", "feats_encode_block1s", "=", "[", "\n", "self", ".", "backbone", ".", "DenseDecoder", ".", "seg_conv3", "(", "y_list", "[", "k", "]", "[", "0", "]", ",", "premask_block4", "[", "k", "]", ",", "premask_block3", "[", "k", "]", ",", "premask_block2", "[", "k", "]", ")", "\n", "for", "k", "in", "range", "(", "4", ")", "]", "\n", "\n", "i", "=", "0", "\n", "while", "i", "<", "4", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "feats_encoder_front", "=", "feats_encode_block1s", "[", "0", "]", "[", "0", "]", "\n", "feats_input", "=", "feats_encode_block1s", "[", "0", "]", "[", "0", "]", "\n", "feats_encoder_rear", "=", "feats_encode_block1s", "[", "1", "]", "[", "0", "]", "\n", "\n", "", "elif", "i", "==", "1", ":", "\n", "                ", "feats_encoder_front", "=", "feats_encode_block1s", "[", "0", "]", "[", "0", "]", "\n", "feats_input", "=", "feats_encode_block1s", "[", "1", "]", "[", "0", "]", "\n", "feats_encoder_rear", "=", "feats_encode_block1s", "[", "2", "]", "[", "0", "]", "\n", "premask_block1", ".", "append", "(", "saliency_feat_res", ")", "\n", "\n", "", "elif", "i", "==", "2", ":", "\n", "                ", "feats_encoder_front", "=", "feats_encode_block1s", "[", "1", "]", "[", "0", "]", "\n", "feats_input", "=", "feats_encode_block1s", "[", "2", "]", "[", "0", "]", "\n", "feats_encoder_rear", "=", "feats_encode_block1s", "[", "3", "]", "[", "0", "]", "\n", "premask_block1", ".", "append", "(", "saliency_feat_res", ")", "\n", "\n", "", "elif", "i", "==", "3", ":", "\n", "                ", "feats_encoder_front", "=", "feats_encode_block1s", "[", "2", "]", "[", "0", "]", "\n", "feats_input", "=", "feats_encode_block1s", "[", "3", "]", "[", "0", "]", "\n", "feats_encoder_rear", "=", "feats_encode_block1s", "[", "3", "]", "[", "0", "]", "\n", "premask_block1", ".", "append", "(", "saliency_feat_res", ")", "\n", "\n", "", "saliency_feat_res", "=", "self", ".", "MDK_module_R3", "(", "feats_encoder_front", ",", "feats_input", ",", "feats_encoder_rear", ")", "\n", "i", "=", "i", "+", "1", "\n", "", "premask_block1", ".", "append", "(", "saliency_feat_res", ")", "\n", "\n", "preds", "=", "[", "]", "\n", "for", "i", ",", "frame", "in", "enumerate", "(", "clip", ")", ":", "\n", "            ", "seg", "=", "self", ".", "backbone", ".", "DenseDecoder", ".", "segment", "(", "premask_block1", "[", "i", "]", ",", "feats_encode_block1s", "[", "i", "]", "[", "1", "]", ",", "\n", "feats_encode_block1s", "[", "i", "]", "[", "2", "]", ",", "feats_encode_block1s", "[", "i", "]", "[", "3", "]", ",", "\n", "frame", ".", "shape", "[", "2", ":", "]", ")", "\n", "preds", ".", "append", "(", "torch", ".", "sigmoid", "(", "seg", ")", ")", "\n", "", "return", "preds", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.networks.models.conv3x3": [[10, 14], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "groups", "=", "1", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ",", "groups", "=", "groups", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.networks.models.conv1x1": [[16, 19], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"1x1 convolution\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.networks.DCFNet_bk._ConvBatchNormReLU.__init__": [[21, 50], ["torch.Sequential.__init__", "DCFNet_bk._ConvBatchNormReLU.add_module", "DCFNet_bk._ConvBatchNormReLU.add_module", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "DCFNet_bk._ConvBatchNormReLU.add_module", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamban_tracker.SiamBANTracker.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "stride", ",", "\n", "padding", ",", "\n", "dilation", ",", "\n", "relu", "=", "True", ",", "\n", ")", ":", "\n", "        ", "super", "(", "_ConvBatchNormReLU", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "add_module", "(", "\n", "\"conv\"", ",", "\n", "nn", ".", "Conv2d", "(", "\n", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "\n", "dilation", "=", "dilation", ",", "\n", "bias", "=", "False", ",", "\n", ")", ",", "\n", ")", "\n", "self", ".", "add_module", "(", "\n", "\"bn\"", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", ",", "\n", ")", "\n", "\n", "if", "relu", ":", "\n", "            ", "self", ".", "add_module", "(", "\"relu\"", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.networks.DCFNet_bk._ConvBatchNormReLU.forward": [[51, 53], ["super().forward"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.neck.trans.TransformerDecoderLayer.forward"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "super", "(", "_ConvBatchNormReLU", ",", "self", ")", ".", "forward", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.networks.DCFNet_bk.BasicConv2d.__init__": [[56, 63], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamban_tracker.SiamBANTracker.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "(", "0", ",", "0", ")", ",", "dilation", "=", "1", ")", ":", "\n", "        ", "super", "(", "BasicConv2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "\n", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.networks.DCFNet_bk.BasicConv2d.forward": [[64, 68], ["DCFNet_bk.BasicConv2d.conv", "DCFNet_bk.BasicConv2d.bn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.networks.DCFNet_bk._DenseDecoder.__init__": [[71, 94], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "DCFNet_bk._ConvBatchNormReLU", "DCFNet_bk._ConvBatchNormReLU", "DCFNet_bk._ConvBatchNormReLU", "DCFNet_bk._ConvBatchNormReLU", "DCFNet_bk._ConvBatchNormReLU", "DCFNet_bk._ConvBatchNormReLU", "DCFNet_bk._ConvBatchNormReLU", "DCFNet_bk._ConvBatchNormReLU", "DCFNet_bk._ConvBatchNormReLU", "DCFNet_bk._ConvBatchNormReLU", "DCFNet_bk._ConvBatchNormReLU", "collections.OrderedDict", "DCFNet_bk._ConvBatchNormReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamban_tracker.SiamBANTracker.__init__"], ["    ", "def", "__init__", "(", "self", ",", "reduce_channel", ",", "n_classes", ")", ":", "\n", "        ", "super", "(", "_DenseDecoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# Decoder", "\n", "self", ".", "decoder", "=", "nn", ".", "Sequential", "(", "\n", "OrderedDict", "(", "\n", "[", "\n", "(", "\"conv1\"", ",", "_ConvBatchNormReLU", "(", "128", ",", "256", ",", "3", ",", "1", ",", "1", ",", "1", ")", ")", ",", "# \u6362\u6210\u77ed\u8fde\u63a5\u6b8b\u5dee\u5757", "\n", "(", "\"conv2\"", ",", "nn", ".", "Conv2d", "(", "256", ",", "n_classes", ",", "kernel_size", "=", "1", ")", ")", ",", "\n", "]", "\n", ")", "\n", ")", "\n", "self", ".", "refine4_3", "=", "_ConvBatchNormReLU", "(", "reduce_channel", ",", "reduce_channel", ",", "3", ",", "1", ",", "1", ",", "1", ")", "\n", "self", ".", "refine4_2", "=", "_ConvBatchNormReLU", "(", "reduce_channel", ",", "reduce_channel", ",", "3", ",", "1", ",", "1", ",", "1", ")", "\n", "self", ".", "refine4_1", "=", "_ConvBatchNormReLU", "(", "reduce_channel", ",", "reduce_channel", ",", "3", ",", "1", ",", "1", ",", "1", ")", "\n", "self", ".", "refine3_2", "=", "_ConvBatchNormReLU", "(", "reduce_channel", ",", "reduce_channel", ",", "3", ",", "1", ",", "1", ",", "1", ")", "\n", "self", ".", "refine3_1", "=", "_ConvBatchNormReLU", "(", "reduce_channel", ",", "reduce_channel", ",", "3", ",", "1", ",", "1", ",", "1", ")", "\n", "self", ".", "refine2_1", "=", "_ConvBatchNormReLU", "(", "reduce_channel", ",", "reduce_channel", ",", "3", ",", "1", ",", "1", ",", "1", ")", "\n", "self", ".", "conv_cat_block4", "=", "_ConvBatchNormReLU", "(", "reduce_channel", ",", "reduce_channel", ",", "3", ",", "1", ",", "1", ",", "1", ")", "\n", "self", ".", "conv_cat_block3", "=", "_ConvBatchNormReLU", "(", "reduce_channel", ",", "reduce_channel", ",", "3", ",", "1", ",", "1", ",", "1", ")", "\n", "self", ".", "conv_cat_block2", "=", "_ConvBatchNormReLU", "(", "reduce_channel", ",", "reduce_channel", ",", "3", ",", "1", ",", "1", ",", "1", ")", "\n", "self", ".", "conv_cat_block1", "=", "_ConvBatchNormReLU", "(", "reduce_channel", ",", "reduce_channel", ",", "3", ",", "1", ",", "1", ",", "1", ")", "\n", "self", ".", "fuse_sal", "=", "_ConvBatchNormReLU", "(", "reduce_channel", "*", "4", ",", "128", ",", "3", ",", "1", ",", "1", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.networks.DCFNet_bk._DenseDecoder.seg_conv": [[95, 100], ["DCFNet_bk._DenseDecoder.refine4_3"], "methods", ["None"], ["", "def", "seg_conv", "(", "self", ",", "block3", ",", "block4", ")", ":", "\n", "\n", "        ", "bu1", "=", "block3", "+", "self", ".", "refine4_3", "(", "block4", ")", "\n", "# bu1 = F.interpolate(x, size=block2.shape[2:], mode=\"bilinear\", align_corners=False)", "\n", "return", "bu1", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.networks.DCFNet_bk._DenseDecoder.seg_conv2": [[101, 108], ["torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "DCFNet_bk._DenseDecoder.refine4_2", "DCFNet_bk._DenseDecoder.refine3_2"], "methods", ["None"], ["", "def", "seg_conv2", "(", "self", ",", "block2", ",", "block4", ",", "bu1", ")", ":", "\n", "\n", "        ", "block4", "=", "F", ".", "interpolate", "(", "block4", ",", "size", "=", "block2", ".", "shape", "[", "2", ":", "]", ",", "mode", "=", "\"bilinear\"", ",", "align_corners", "=", "True", ")", "\n", "bu1", "=", "F", ".", "interpolate", "(", "bu1", ",", "size", "=", "block2", ".", "shape", "[", "2", ":", "]", ",", "mode", "=", "\"bilinear\"", ",", "align_corners", "=", "True", ")", "\n", "bu2", "=", "block2", "+", "self", ".", "refine3_2", "(", "bu1", ")", "+", "self", ".", "refine4_2", "(", "block4", ")", "\n", "# bu2 = F.interpolate(x, size=block1.shape[2:], mode=\"bilinear\", align_corners=False)", "\n", "return", "bu2", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.networks.DCFNet_bk._DenseDecoder.seg_conv3": [[109, 119], ["torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "DCFNet_bk._DenseDecoder.refine4_1", "DCFNet_bk._DenseDecoder.refine3_1", "DCFNet_bk._DenseDecoder.refine2_1"], "methods", ["None"], ["", "def", "seg_conv3", "(", "self", ",", "block1", ",", "block4", ",", "bu1", ",", "bu2", ")", ":", "\n", "\n", "# bu1_2 = F.interpolate(bu1, size=block1.shape[2:], mode=\"bilinear\", align_corners=False)", "\n", "        ", "block4_1", "=", "F", ".", "interpolate", "(", "block4", ",", "size", "=", "block1", ".", "shape", "[", "2", ":", "]", ",", "mode", "=", "\"bilinear\"", ",", "align_corners", "=", "True", ")", "\n", "bu2_1", "=", "F", ".", "interpolate", "(", "bu2", ",", "size", "=", "block1", ".", "shape", "[", "2", ":", "]", ",", "mode", "=", "\"bilinear\"", ",", "align_corners", "=", "True", ")", "\n", "bu1_1", "=", "F", ".", "interpolate", "(", "bu1", ",", "size", "=", "block1", ".", "shape", "[", "2", ":", "]", ",", "mode", "=", "\"bilinear\"", ",", "align_corners", "=", "True", ")", "\n", "# x = torch.cat((block1, bu2), dim=1)", "\n", "\n", "bu3", "=", "block1", "+", "self", ".", "refine2_1", "(", "bu2_1", ")", "+", "self", ".", "refine3_1", "(", "bu1_1", ")", "+", "self", ".", "refine4_1", "(", "block4_1", ")", "\n", "return", "bu3", ",", "block4_1", ",", "bu2_1", ",", "bu1_1", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.networks.DCFNet_bk._DenseDecoder.segment": [[120, 128], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "DCFNet_bk._DenseDecoder.fuse_sal", "DCFNet_bk._DenseDecoder.decoder", "torch.interpolate", "torch.interpolate", "torch.interpolate", "DCFNet_bk._DenseDecoder.conv_cat_block1", "DCFNet_bk._DenseDecoder.conv_cat_block2", "DCFNet_bk._DenseDecoder.conv_cat_block3", "DCFNet_bk._DenseDecoder.conv_cat_block4"], "methods", ["None"], ["", "def", "segment", "(", "self", ",", "bu3", ",", "block4_1", ",", "bu2_1", ",", "bu1_1", ",", "shape", ")", ":", "\n", "        ", "agg", "=", "torch", ".", "cat", "(", "(", "self", ".", "conv_cat_block1", "(", "bu3", ")", ",", "self", ".", "conv_cat_block2", "(", "bu2_1", ")", ",", "self", ".", "conv_cat_block3", "(", "bu1_1", ")", ",", "\n", "self", ".", "conv_cat_block4", "(", "block4_1", ")", ")", ",", "dim", "=", "1", ")", "\n", "sal", "=", "self", ".", "fuse_sal", "(", "agg", ")", "\n", "sal", "=", "self", ".", "decoder", "(", "sal", ")", "\n", "sal", "=", "F", ".", "interpolate", "(", "sal", ",", "size", "=", "shape", ",", "mode", "=", "\"bilinear\"", ",", "align_corners", "=", "True", ")", "\n", "# sal= self.decoder(sal)", "\n", "return", "sal", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.networks.DCFNet_bk._DenseDecoder.forward": [[129, 136], ["DCFNet_bk._DenseDecoder.seg_conv", "DCFNet_bk._DenseDecoder.seg_conv2", "DCFNet_bk._DenseDecoder.seg_conv3", "DCFNet_bk._DenseDecoder.segment"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.networks.DCFNet_bk._DenseDecoder.seg_conv", "home.repos.pwc.inspect_result.vision4robotics_udat.networks.DCFNet_bk._DenseDecoder.seg_conv2", "home.repos.pwc.inspect_result.vision4robotics_udat.networks.DCFNet_bk._DenseDecoder.seg_conv3", "home.repos.pwc.inspect_result.vision4robotics_udat.networks.DCFNet_bk._DenseDecoder.segment"], ["", "def", "forward", "(", "self", ",", "block1", ",", "block2", ",", "block3", ",", "block4", ",", "x", ")", ":", "\n", "        ", "bu1", "=", "self", ".", "seg_conv", "(", "block3", ",", "block4", ")", "\n", "bu2", "=", "self", ".", "seg_conv2", "(", "block2", ",", "block4", ",", "bu1", ")", "\n", "bu3", ",", "block4_1", ",", "bu2_1", ",", "bu1_1", "=", "self", ".", "seg_conv3", "(", "block1", ",", "block4", ",", "bu1", ",", "bu2", ")", "\n", "seg", "=", "self", ".", "segment", "(", "bu3", ",", "block4_1", ",", "bu2_1", ",", "bu1_1", ",", "x", ".", "shape", "[", "2", ":", "]", ")", "\n", "# return seg, E_sup, E_att, bu1_res", "\n", "return", "seg", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.networks.DCFNet_bk._ASPPModule.__init__": [[141, 169], ["torch.Module.__init__", "torch.Module", "torch.Module", "torch.Module", "DCFNet_bk._ASPPModule.stages.add_module", "enumerate", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "DCFNet_bk._ConvBatchNormReLU", "zip", "DCFNet_bk._ASPPModule.stages.add_module", "collections.OrderedDict", "collections.OrderedDict", "DCFNet_bk._ConvBatchNormReLU", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "DCFNet_bk._ConvBatchNormReLU", "DCFNet_bk._ConvBatchNormReLU", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamban_tracker.SiamBANTracker.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "output_stride", ")", ":", "\n", "        ", "super", "(", "_ASPPModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "output_stride", "==", "8", ":", "\n", "            ", "pyramids", "=", "[", "12", ",", "24", ",", "36", "]", "\n", "", "elif", "output_stride", "==", "16", ":", "\n", "            ", "pyramids", "=", "[", "6", ",", "12", ",", "18", "]", "\n", "", "self", ".", "stages", "=", "nn", ".", "Module", "(", ")", "\n", "self", ".", "stages", ".", "add_module", "(", "\n", "\"c0\"", ",", "_ConvBatchNormReLU", "(", "in_channels", ",", "out_channels", ",", "1", ",", "1", ",", "0", ",", "1", ")", "\n", ")", "\n", "for", "i", ",", "(", "dilation", ",", "padding", ")", "in", "enumerate", "(", "zip", "(", "pyramids", ",", "pyramids", ")", ")", ":", "\n", "            ", "self", ".", "stages", ".", "add_module", "(", "\n", "\"c{}\"", ".", "format", "(", "i", "+", "1", ")", ",", "\n", "_ConvBatchNormReLU", "(", "in_channels", ",", "out_channels", ",", "3", ",", "1", ",", "padding", ",", "dilation", ")", ",", "\n", ")", "\n", "", "self", ".", "imagepool", "=", "nn", ".", "Sequential", "(", "\n", "OrderedDict", "(", "\n", "[", "\n", "(", "\"pool\"", ",", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", ")", ",", "\n", "(", "\"conv\"", ",", "_ConvBatchNormReLU", "(", "in_channels", ",", "out_channels", ",", "1", ",", "1", ",", "0", ",", "1", ")", ")", ",", "\n", "]", "\n", ")", "\n", ")", "\n", "self", ".", "fire", "=", "nn", ".", "Sequential", "(", "\n", "OrderedDict", "(", "\n", "[", "\n", "(", "\"conv\"", ",", "_ConvBatchNormReLU", "(", "out_channels", "*", "5", ",", "out_channels", ",", "3", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "(", "\"dropout\"", ",", "nn", ".", "Dropout2d", "(", "0.1", ")", ")", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.networks.DCFNet_bk._ASPPModule.forward": [[173, 181], ["DCFNet_bk._ASPPModule.imagepool", "DCFNet_bk._ASPPModule.stages.children", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "DCFNet_bk._ASPPModule.fire", "torch.interpolate", "torch.interpolate", "torch.interpolate", "stage"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "h", "=", "self", ".", "imagepool", "(", "x", ")", "\n", "h", "=", "[", "F", ".", "interpolate", "(", "h", ",", "size", "=", "x", ".", "shape", "[", "2", ":", "]", ",", "mode", "=", "\"bilinear\"", ",", "align_corners", "=", "False", ")", "]", "\n", "for", "stage", "in", "self", ".", "stages", ".", "children", "(", ")", ":", "\n", "            ", "h", "+=", "[", "stage", "(", "x", ")", "]", "\n", "", "h", "=", "torch", ".", "cat", "(", "h", ",", "dim", "=", "1", ")", "\n", "h", "=", "self", ".", "fire", "(", "h", ")", "\n", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.networks.DCFNet_bk.DCFNet_backbone.__init__": [[185, 201], ["torch.Module.__init__", "resnet_dilation.resnet101", "DCFNet_bk._ASPPModule", "DCFNet_bk._DenseDecoder", "DCFNet_bk.DCFNet_backbone._make_stage", "DCFNet_bk.DCFNet_backbone.state_dict", "DCFNet_bk.DCFNet_backbone.init_layer"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamban_tracker.SiamBANTracker.__init__", "home.repos.pwc.inspect_result.vision4robotics_udat.networks.resnet_dilation.resnet101", "home.repos.pwc.inspect_result.vision4robotics_udat.networks.DCFNet_bk.DCFNet_backbone._make_stage", "home.repos.pwc.inspect_result.vision4robotics_udat.networks.DCFNet_bk.DCFNet_backbone.init_layer"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ",", "output_stride", ",", "input_channels", "=", "3", ",", "pretrained", "=", "False", ")", ":", "\n", "        ", "super", "(", "DCFNet_backbone", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "os", "=", "output_stride", "\n", "self", ".", "resnet", "=", "resnet101", "(", "pretrained", "=", "pretrained", ",", "output_stride", "=", "output_stride", ",", "input_channels", "=", "input_channels", ")", "\n", "self", ".", "aspp", "=", "_ASPPModule", "(", "2048", ",", "256", ",", "output_stride", ")", "\n", "self", ".", "DenseDecoder", "=", "_DenseDecoder", "(", "reduce_channel", "=", "128", ",", "n_classes", "=", "1", ")", "\n", "\n", "# stage3----> stage4", "\n", "self", ".", "stage4_cfg", "=", "cfg", "[", "'stage4_cfg'", "]", "\n", "self", ".", "stage4", "=", "self", ".", "_make_stage", "(", "self", ".", "stage4_cfg", ")", "\n", "\n", "if", "pretrained", ":", "\n", "            ", "for", "key", "in", "self", ".", "state_dict", "(", ")", ":", "\n", "                ", "if", "'resnet'", "not", "in", "key", ":", "\n", "                    ", "self", ".", "init_layer", "(", "key", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.networks.DCFNet_bk.DCFNet_backbone.init_layer": [[202, 211], ["key.split", "[].ndimension", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "key.split", "DCFNet_bk.DCFNet_backbone.state_dict", "DCFNet_bk.DCFNet_backbone.state_dict", "DCFNet_bk.DCFNet_backbone.state_dict", "DCFNet_bk.DCFNet_backbone.state_dict"], "methods", ["None"], ["", "", "", "", "def", "init_layer", "(", "self", ",", "key", ")", ":", "\n", "        ", "if", "key", ".", "split", "(", "'.'", ")", "[", "-", "1", "]", "==", "'weight'", ":", "\n", "            ", "if", "'conv'", "in", "key", ":", "\n", "                ", "if", "self", ".", "state_dict", "(", ")", "[", "key", "]", ".", "ndimension", "(", ")", ">=", "2", ":", "\n", "                    ", "nn", ".", "init", ".", "kaiming_normal_", "(", "self", ".", "state_dict", "(", ")", "[", "key", "]", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "", "elif", "'bn'", "in", "key", ":", "\n", "                ", "self", ".", "state_dict", "(", ")", "[", "key", "]", "[", "...", "]", "=", "1", "\n", "", "", "elif", "key", ".", "split", "(", "'.'", ")", "[", "-", "1", "]", "==", "'bias'", ":", "\n", "            ", "self", ".", "state_dict", "(", ")", "[", "key", "]", "[", "...", "]", "=", "0.001", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.networks.DCFNet_bk.DCFNet_backbone.feat_conv": [[212, 232], ["DCFNet_bk.DCFNet_backbone.resnet.conv1", "DCFNet_bk.DCFNet_backbone.resnet.bn1", "DCFNet_bk.DCFNet_backbone.resnet.relu", "DCFNet_bk.DCFNet_backbone.resnet.maxpool", "DCFNet_bk.DCFNet_backbone.resnet.layer1", "x_list.append", "DCFNet_bk.DCFNet_backbone.resnet.layer2", "x_list.append", "DCFNet_bk.DCFNet_backbone.resnet.layer3", "x_list.append", "DCFNet_bk.DCFNet_backbone.resnet.layer4", "DCFNet_bk.DCFNet_backbone.aspp", "x_list.append"], "methods", ["None"], ["", "", "def", "feat_conv", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "x_list", "=", "[", "]", "\n", "block0", "=", "self", ".", "resnet", ".", "conv1", "(", "x", ")", "\n", "block0", "=", "self", ".", "resnet", ".", "bn1", "(", "block0", ")", "\n", "block0", "=", "self", ".", "resnet", ".", "relu", "(", "block0", ")", "\n", "block0", "=", "self", ".", "resnet", ".", "maxpool", "(", "block0", ")", "\n", "\n", "block1", "=", "self", ".", "resnet", ".", "layer1", "(", "block0", ")", "\n", "x_list", ".", "append", "(", "block1", ")", "\n", "block2", "=", "self", ".", "resnet", ".", "layer2", "(", "block1", ")", "\n", "x_list", ".", "append", "(", "block2", ")", "\n", "block3", "=", "self", ".", "resnet", ".", "layer3", "(", "block2", ")", "\n", "x_list", ".", "append", "(", "block3", ")", "\n", "block4", "=", "self", ".", "resnet", ".", "layer4", "(", "block3", ")", "\n", "# if self.os == 16:", "\n", "#     block4 = F.upsample(block4, scale_factor=2, mode='bilinear', align_corners=False)", "\n", "block4", "=", "self", ".", "aspp", "(", "block4", ")", "\n", "x_list", ".", "append", "(", "block4", ")", "\n", "return", "block1", ",", "block2", ",", "block3", ",", "block4", ",", "x_list", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.networks.DCFNet_bk.DCFNet_backbone._make_stage": [[233, 247], ["modules.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "libs.modules.FuseBlock.MakeFB"], "methods", ["None"], ["", "def", "_make_stage", "(", "self", ",", "layer_config", ",", "multi_scale_output", "=", "True", ")", ":", "\n", "        ", "num_branches", "=", "layer_config", "[", "'NUM_BRANCHES'", "]", "\n", "num_blocks", "=", "layer_config", "[", "'NUM_BLOCKS'", "]", "\n", "num_channels", "=", "layer_config", "[", "'NUM_CHANNELS'", "]", "\n", "modules", "=", "[", "]", "\n", "modules", ".", "append", "(", "\n", "MakeFB", "(", "\n", "num_branches", ",", "\n", "num_blocks", ",", "\n", "num_channels", ",", "\n", "multi_scale_output", "\n", ")", "\n", ")", "\n", "return", "nn", ".", "Sequential", "(", "*", "modules", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.networks.DCFNet_bk.DCFNet_backbone.forward": [[248, 256], ["DCFNet_bk.DCFNet_backbone.feat_conv", "DCFNet_bk.DCFNet_backbone.stage4", "DCFNet_bk.DCFNet_backbone.DenseDecoder", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.networks.DCFNet_bk.DCFNet_backbone.feat_conv"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "block1", ",", "block2", ",", "block3", ",", "block4", ",", "x_list", "=", "self", ".", "feat_conv", "(", "x", ")", "\n", "\n", "y_list", "=", "self", ".", "stage4", "(", "x_list", ")", "\n", "\n", "seg", "=", "self", ".", "DenseDecoder", "(", "y_list", "[", "0", "]", ",", "y_list", "[", "1", "]", ",", "y_list", "[", "2", "]", ",", "y_list", "[", "3", "]", ",", "x", ")", "\n", "\n", "return", "F", ".", "sigmoid", "(", "seg", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.vision4robotics_udat.networks.DCFNet_bk.conv3x3": [[14, 18], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.networks.loss.KLDLoss.__init__": [[12, 14], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamban_tracker.SiamBANTracker.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "KLDLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.networks.loss.KLDLoss.KLD": [[15, 21], ["torch.sum", "torch.sum", "torch.sum", "torch.log", "torch.div"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.datasets.dataset.SubDataset.log"], ["", "def", "KLD", "(", "self", ",", "inp", ",", "trg", ")", ":", "\n", "        ", "inp", "=", "inp", "/", "torch", ".", "sum", "(", "inp", ")", "# input", "\n", "trg", "=", "trg", "/", "torch", ".", "sum", "(", "trg", ")", "# target", "\n", "eps", "=", "sys", ".", "float_info", ".", "epsilon", "\n", "\n", "return", "torch", ".", "sum", "(", "trg", "*", "torch", ".", "log", "(", "eps", "+", "torch", ".", "div", "(", "trg", ",", "(", "inp", "+", "eps", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.networks.loss.KLDLoss.forward": [[22, 24], ["loss._pointwise_loss", "loss.KLDLoss.KLD"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.networks.loss._pointwise_loss", "home.repos.pwc.inspect_result.vision4robotics_udat.networks.loss.KLDLoss.KLD"], ["", "def", "forward", "(", "self", ",", "inp", ",", "trg", ")", ":", "\n", "        ", "return", "_pointwise_loss", "(", "lambda", "a", ",", "b", ":", "self", ".", "KLD", "(", "a", ",", "b", ")", ",", "inp", ",", "trg", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.vision4robotics_udat.networks.loss._pointwise_loss": [[5, 10], ["lambd", "torch.mean", "torch.sum"], "function", ["None"], ["def", "_pointwise_loss", "(", "lambd", ",", "input", ",", "target", ",", "size_average", "=", "True", ",", "reduce", "=", "True", ")", ":", "\n", "    ", "d", "=", "lambd", "(", "input", ",", "target", ")", "\n", "if", "not", "reduce", ":", "\n", "        ", "return", "d", "\n", "", "return", "torch", ".", "mean", "(", "d", ")", "if", "size_average", "else", "torch", ".", "sum", "(", "d", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.DCE.dce_model.CSDN_Tem.__init__": [[9, 26], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamban_tracker.SiamBANTracker.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_ch", ",", "out_ch", ")", ":", "\n", "        ", "super", "(", "CSDN_Tem", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "depth_conv", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", "=", "in_ch", ",", "\n", "out_channels", "=", "in_ch", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "groups", "=", "in_ch", "\n", ")", "\n", "self", ".", "point_conv", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", "=", "in_ch", ",", "\n", "out_channels", "=", "out_ch", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "groups", "=", "1", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.DCE.dce_model.CSDN_Tem.forward": [[28, 32], ["dce_model.CSDN_Tem.depth_conv", "dce_model.CSDN_Tem.point_conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "out", "=", "self", ".", "depth_conv", "(", "input", ")", "\n", "out", "=", "self", ".", "point_conv", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.DCE.dce_model.enhance_net_nopool.__init__": [[35, 51], ["torch.Module.__init__", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.UpsamplingBilinear2d", "torch.UpsamplingBilinear2d", "torch.UpsamplingBilinear2d", "dce_model.CSDN_Tem", "dce_model.CSDN_Tem", "dce_model.CSDN_Tem", "dce_model.CSDN_Tem", "dce_model.CSDN_Tem", "dce_model.CSDN_Tem", "dce_model.CSDN_Tem"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamban_tracker.SiamBANTracker.__init__"], ["\t", "def", "__init__", "(", "self", ",", "scale_factor", ")", ":", "\n", "\t\t", "super", "(", "enhance_net_nopool", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "scale_factor", "=", "scale_factor", "\n", "self", ".", "upsample", "=", "nn", ".", "UpsamplingBilinear2d", "(", "scale_factor", "=", "self", ".", "scale_factor", ")", "\n", "number_f", "=", "32", "\n", "\n", "#   zerodce DWC + p-shared", "\n", "self", ".", "e_conv1", "=", "CSDN_Tem", "(", "3", ",", "number_f", ")", "\n", "self", ".", "e_conv2", "=", "CSDN_Tem", "(", "number_f", ",", "number_f", ")", "\n", "self", ".", "e_conv3", "=", "CSDN_Tem", "(", "number_f", ",", "number_f", ")", "\n", "self", ".", "e_conv4", "=", "CSDN_Tem", "(", "number_f", ",", "number_f", ")", "\n", "self", ".", "e_conv5", "=", "CSDN_Tem", "(", "number_f", "*", "2", ",", "number_f", ")", "\n", "self", ".", "e_conv6", "=", "CSDN_Tem", "(", "number_f", "*", "2", ",", "number_f", ")", "\n", "self", ".", "e_conv7", "=", "CSDN_Tem", "(", "number_f", "*", "2", ",", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.DCE.dce_model.enhance_net_nopool.enhance": [[52, 64], ["torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow"], "methods", ["None"], ["", "def", "enhance", "(", "self", ",", "x", ",", "x_r", ")", ":", "\n", "\n", "\t\t", "x", "=", "x", "+", "x_r", "*", "(", "torch", ".", "pow", "(", "x", ",", "2", ")", "-", "x", ")", "\n", "x", "=", "x", "+", "x_r", "*", "(", "torch", ".", "pow", "(", "x", ",", "2", ")", "-", "x", ")", "\n", "x", "=", "x", "+", "x_r", "*", "(", "torch", ".", "pow", "(", "x", ",", "2", ")", "-", "x", ")", "\n", "enhance_image_1", "=", "x", "+", "x_r", "*", "(", "torch", ".", "pow", "(", "x", ",", "2", ")", "-", "x", ")", "\n", "x", "=", "enhance_image_1", "+", "x_r", "*", "(", "torch", ".", "pow", "(", "enhance_image_1", ",", "2", ")", "-", "enhance_image_1", ")", "\n", "x", "=", "x", "+", "x_r", "*", "(", "torch", ".", "pow", "(", "x", ",", "2", ")", "-", "x", ")", "\n", "x", "=", "x", "+", "x_r", "*", "(", "torch", ".", "pow", "(", "x", ",", "2", ")", "-", "x", ")", "\n", "enhance_image", "=", "x", "+", "x_r", "*", "(", "torch", ".", "pow", "(", "x", ",", "2", ")", "-", "x", ")", "\n", "\n", "return", "enhance_image", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.DCE.dce_model.enhance_net_nopool.forward": [[65, 84], ["dce_model.enhance_net_nopool.relu", "dce_model.enhance_net_nopool.relu", "dce_model.enhance_net_nopool.relu", "dce_model.enhance_net_nopool.relu", "dce_model.enhance_net_nopool.relu", "dce_model.enhance_net_nopool.relu", "torch.tanh", "torch.tanh", "torch.tanh", "dce_model.enhance_net_nopool.enhance", "torch.interpolate", "torch.interpolate", "torch.interpolate", "dce_model.enhance_net_nopool.e_conv1", "dce_model.enhance_net_nopool.e_conv2", "dce_model.enhance_net_nopool.e_conv3", "dce_model.enhance_net_nopool.e_conv4", "dce_model.enhance_net_nopool.e_conv5", "dce_model.enhance_net_nopool.e_conv6", "dce_model.enhance_net_nopool.e_conv7", "dce_model.enhance_net_nopool.upsample", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.DCE.dce_model.enhance_net_nopool.enhance"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "if", "self", ".", "scale_factor", "==", "1", ":", "\n", "\t\t\t", "x_down", "=", "x", "\n", "", "else", ":", "\n", "\t\t\t", "x_down", "=", "F", ".", "interpolate", "(", "x", ",", "scale_factor", "=", "1", "/", "self", ".", "scale_factor", ",", "mode", "=", "'bilinear'", ")", "\n", "\n", "", "x1", "=", "self", ".", "relu", "(", "self", ".", "e_conv1", "(", "x_down", ")", ")", "\n", "x2", "=", "self", ".", "relu", "(", "self", ".", "e_conv2", "(", "x1", ")", ")", "\n", "x3", "=", "self", ".", "relu", "(", "self", ".", "e_conv3", "(", "x2", ")", ")", "\n", "x4", "=", "self", ".", "relu", "(", "self", ".", "e_conv4", "(", "x3", ")", ")", "\n", "x5", "=", "self", ".", "relu", "(", "self", ".", "e_conv5", "(", "torch", ".", "cat", "(", "[", "x3", ",", "x4", "]", ",", "1", ")", ")", ")", "\n", "x6", "=", "self", ".", "relu", "(", "self", ".", "e_conv6", "(", "torch", ".", "cat", "(", "[", "x2", ",", "x5", "]", ",", "1", ")", ")", ")", "\n", "x_r", "=", "F", ".", "tanh", "(", "self", ".", "e_conv7", "(", "torch", ".", "cat", "(", "[", "x1", ",", "x6", "]", ",", "1", ")", ")", ")", "\n", "if", "self", ".", "scale_factor", "==", "1", ":", "\n", "\t\t\t", "x_r", "=", "x_r", "\n", "", "else", ":", "\n", "\t\t\t", "x_r", "=", "self", ".", "upsample", "(", "x_r", ")", "\n", "", "enhance_image", "=", "self", ".", "enhance", "(", "x", ",", "x_r", ")", "\n", "return", "enhance_image", ",", "x_r", "\n", "", "", ""]], "home.repos.pwc.inspect_result.vision4robotics_udat.got10k.gen_json.parse_and_sched": [[19, 52], ["print", "os.listdir", "json.dump", "json.dump", "os.path.join", "os.path.join", "open", "open.readlines", "open.close", "enumerate", "open", "open", "gt_line.strip().split", "int", "int", "int", "int", "gt_line.strip", "float", "float", "int", "int", "int", "int", "float", "float", "float", "float"], "function", ["None"], ["            ", "continue", "\n", "", "gt_path", "=", "join", "(", "pseudo_label_path", ",", "video", "+", "'_gt.txt'", ")", "\n", "f", "=", "open", "(", "gt_path", ",", "'r'", ")", "\n", "groundtruth", "=", "f", ".", "readlines", "(", ")", "\n", "f", ".", "close", "(", ")", "\n", "idx_woOcc", "=", "0", "\n", "for", "idx", ",", "gt_line", "in", "enumerate", "(", "groundtruth", ")", ":", "\n", "            ", "if", "gt_line", "==", "'NaN,NaN,NaN,NaN\\n'", ":", "\n", "                ", "continue", "\n", "", "gt_image", "=", "gt_line", ".", "strip", "(", ")", ".", "split", "(", "','", ")", "\n", "frame", "=", "'%06d'", "%", "(", "int", "(", "idx_woOcc", ")", ")", "# idx", "\n", "obj", "=", "'%02d'", "%", "(", "int", "(", "0", ")", ")", "\n", "bbox", "=", "[", "int", "(", "float", "(", "gt_image", "[", "0", "]", ")", ")", ",", "int", "(", "float", "(", "gt_image", "[", "1", "]", ")", ")", ",", "\n", "int", "(", "float", "(", "gt_image", "[", "0", "]", ")", ")", "+", "int", "(", "float", "(", "gt_image", "[", "2", "]", ")", ")", ",", "\n", "int", "(", "float", "(", "gt_image", "[", "1", "]", ")", ")", "+", "int", "(", "float", "(", "gt_image", "[", "3", "]", ")", ")", "]", "# xmin,ymin,xmax,ymax", "\n", "\n", "if", "video", "not", "in", "js", ":", "\n", "                ", "js", "[", "video", "]", "=", "{", "}", "\n", "", "if", "obj", "not", "in", "js", "[", "video", "]", ":", "\n", "                ", "js", "[", "video", "]", "[", "obj", "]", "=", "{", "}", "\n", "", "js", "[", "video", "]", "[", "obj", "]", "[", "frame", "]", "=", "bbox", "\n", "idx_woOcc", "=", "idx_woOcc", "+", "1", "\n", "\n", "", "", "json", ".", "dump", "(", "js", ",", "open", "(", "'/YOUR/PATH/NAT2021-train/train.json'", ",", "'w'", ")", ",", "indent", "=", "4", ",", "sort_keys", "=", "True", ")", "\n", "\n", "print", "(", "': All videos downloaded'", ")", "\n", "\n", "\n", "", "if", "__name__", "==", "'__main__'", ":", "\n", "    ", "parse_and_sched", "(", ")", "", "", ""]], "home.repos.pwc.inspect_result.vision4robotics_udat.got10k.par_crop.printProgress": [[19, 29], ["formatStr.format", "int", "sys.stdout.flush", "round", "sys.stdout.write", "sys.stdout.write", "str", "float", "float"], "function", ["home.repos.pwc.inspect_result.vision4robotics_udat.utils.logger.LogFormatter.format"], ["\n", "formatStr", "=", "\"{0:.\"", "+", "str", "(", "decimals", ")", "+", "\"f}\"", "\n", "percents", "=", "formatStr", ".", "format", "(", "100", "*", "(", "iteration", "/", "float", "(", "total", ")", ")", ")", "\n", "filledLength", "=", "int", "(", "round", "(", "barLength", "*", "iteration", "/", "float", "(", "total", ")", ")", ")", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.got10k.par_crop.crop_hwc": [[31, 40], ["numpy.array().astype", "cv2.warpAffine", "numpy.array"], "function", ["None"], ["sys", ".", "stdout", ".", "write", "(", "'\\r%s |%s| %s%s %s'", "%", "(", "prefix", ",", "bar", ",", "percents", ",", "'%'", ",", "suffix", ")", ")", ",", "\n", "if", "iteration", "==", "total", ":", "\n", "        ", "sys", ".", "stdout", ".", "write", "(", "'\\x1b[2K\\r'", ")", "\n", "", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n", "\n", "", "def", "crop_hwc", "(", "image", ",", "bbox", ",", "out_sz", ",", "padding", "=", "(", "0", ",", "0", ",", "0", ")", ")", ":", "\n", "    ", "a", "=", "(", "out_sz", "-", "1", ")", "/", "(", "bbox", "[", "2", "]", "-", "bbox", "[", "0", "]", ")", "\n", "b", "=", "(", "out_sz", "-", "1", ")", "/", "(", "bbox", "[", "3", "]", "-", "bbox", "[", "1", "]", ")", "\n", "c", "=", "-", "a", "*", "bbox", "[", "0", "]", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.got10k.par_crop.pos_s_2_bbox": [[42, 44], ["None"], "function", ["None"], ["mapping", "=", "np", ".", "array", "(", "[", "[", "a", ",", "0", ",", "c", "]", ",", "\n", "[", "0", ",", "b", ",", "d", "]", "]", ")", ".", "astype", "(", "np", ".", "float", ")", "\n", "crop", "=", "cv2", ".", "warpAffine", "(", "image", ",", "mapping", ",", "(", "out_sz", ",", "out_sz", ")", ",", "borderMode", "=", "cv2", ".", "BORDER_CONSTANT", ",", "borderValue", "=", "padding", ")", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.got10k.par_crop.crop_like_SiamFC": [[46, 60], ["numpy.sqrt", "par_crop.crop_hwc", "par_crop.crop_hwc", "par_crop.pos_s_2_bbox", "par_crop.pos_s_2_bbox", "sum", "sum"], "function", ["home.repos.pwc.inspect_result.vision4robotics_udat.vid.par_crop.crop_hwc", "home.repos.pwc.inspect_result.vision4robotics_udat.vid.par_crop.crop_hwc", "home.repos.pwc.inspect_result.vision4robotics_udat.vid.par_crop.pos_s_2_bbox", "home.repos.pwc.inspect_result.vision4robotics_udat.vid.par_crop.pos_s_2_bbox"], ["\n", "\n", "", "def", "pos_s_2_bbox", "(", "pos", ",", "s", ")", ":", "\n", "    ", "return", "[", "pos", "[", "0", "]", "-", "s", "/", "2", ",", "pos", "[", "1", "]", "-", "s", "/", "2", ",", "pos", "[", "0", "]", "+", "s", "/", "2", ",", "pos", "[", "1", "]", "+", "s", "/", "2", "]", "\n", "\n", "\n", "", "def", "crop_like_SiamFC", "(", "image", ",", "bbox", ",", "context_amount", "=", "0.5", ",", "exemplar_size", "=", "127", ",", "instanc_size", "=", "255", ",", "padding", "=", "(", "0", ",", "0", ",", "0", ")", ")", ":", "\n", "    ", "target_pos", "=", "[", "(", "bbox", "[", "2", "]", "+", "bbox", "[", "0", "]", ")", "/", "2.", ",", "(", "bbox", "[", "3", "]", "+", "bbox", "[", "1", "]", ")", "/", "2.", "]", "\n", "target_size", "=", "[", "bbox", "[", "2", "]", "-", "bbox", "[", "0", "]", ",", "bbox", "[", "3", "]", "-", "bbox", "[", "1", "]", "]", "\n", "wc_z", "=", "target_size", "[", "1", "]", "+", "context_amount", "*", "sum", "(", "target_size", ")", "\n", "hc_z", "=", "target_size", "[", "0", "]", "+", "context_amount", "*", "sum", "(", "target_size", ")", "\n", "s_z", "=", "np", ".", "sqrt", "(", "wc_z", "*", "hc_z", ")", "\n", "scale_z", "=", "exemplar_size", "/", "s_z", "\n", "d_search", "=", "(", "instanc_size", "-", "exemplar_size", ")", "/", "2", "\n", "pad", "=", "d_search", "/", "scale_z", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.got10k.par_crop.crop_video": [[62, 81], ["os.path.join", "os.path.join", "os.path.join", "open", "open.readlines", "open.close", "enumerate", "os.path.isdir", "os.makedirs", "gt_line.strip().split", "cv2.imread", "numpy.mean", "par_crop.crop_like_SiamFC", "cv2.imwrite", "cv2.imwrite", "int", "int", "os.path.join", "os.path.join", "os.path.join", "gt_line.strip", "float", "float", "int", "int", "int", "int", "float", "float", "float", "float", "str().zfill", "int", "int", "int", "int", "str"], "function", ["home.repos.pwc.inspect_result.vision4robotics_udat.vid.par_crop.crop_like_SiamFC"], ["\n", "z", "=", "crop_hwc", "(", "image", ",", "pos_s_2_bbox", "(", "target_pos", ",", "s_z", ")", ",", "exemplar_size", ",", "padding", ")", "\n", "x", "=", "crop_hwc", "(", "image", ",", "pos_s_2_bbox", "(", "target_pos", ",", "s_x", ")", ",", "instanc_size", ",", "padding", ")", "\n", "return", "z", ",", "x", "\n", "\n", "\n", "", "def", "crop_video", "(", "video", ",", "crop_path", ",", "instanc_size", ")", ":", "\n", "    ", "if", "video", "!=", "'list.txt'", ":", "\n", "        ", "video_crop_base_path", "=", "join", "(", "crop_path", ",", "video", ")", "\n", "if", "not", "isdir", "(", "video_crop_base_path", ")", ":", "makedirs", "(", "video_crop_base_path", ")", "\n", "gt_path", "=", "join", "(", "pseudo_label_path", ",", "video", "+", "'_gt.txt'", ")", "\n", "images_path", "=", "join", "(", "dataset_path", ",", "video", ")", "\n", "f", "=", "open", "(", "gt_path", ",", "'r'", ")", "\n", "groundtruth", "=", "f", ".", "readlines", "(", ")", "\n", "f", ".", "close", "(", ")", "\n", "idx_woOcc", "=", "0", "\n", "for", "idx", ",", "gt_line", "in", "enumerate", "(", "groundtruth", ")", ":", "\n", "            ", "if", "gt_line", "==", "'NaN,NaN,NaN,NaN\\n'", ":", "\n", "                ", "continue", "\n", "", "gt_image", "=", "gt_line", ".", "strip", "(", ")", ".", "split", "(", "','", ")", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.got10k.par_crop.main": [[83, 99], ["os.path.isdir", "os.mkdir", "os.path.join", "os.listdir", "len", "os.path.join", "os.path.isdir", "os.mkdir", "concurrent.futures.ProcessPoolExecutor", "enumerate", "executor.submit", "concurrent.futures.as_completed", "par_crop.printProgress"], "function", ["home.repos.pwc.inspect_result.vision4robotics_udat.vid.par_crop.printProgress"], ["\n", "im", "=", "cv2", ".", "imread", "(", "join", "(", "images_path", ",", "str", "(", "idx", "+", "1", ")", ".", "zfill", "(", "6", ")", "+", "'.jpg'", ")", ")", "\n", "avg_chans", "=", "np", ".", "mean", "(", "im", ",", "axis", "=", "(", "0", ",", "1", ")", ")", "\n", "\n", "z", ",", "x", "=", "crop_like_SiamFC", "(", "im", ",", "bbox", ",", "instanc_size", "=", "instanc_size", ",", "padding", "=", "avg_chans", ")", "\n", "cv2", ".", "imwrite", "(", "join", "(", "video_crop_base_path", ",", "'{:06d}.{:02d}.z.jpg'", ".", "format", "(", "int", "(", "idx_woOcc", ")", ",", "int", "(", "0", ")", ")", ")", ",", "z", ")", "#idx", "\n", "cv2", ".", "imwrite", "(", "join", "(", "video_crop_base_path", ",", "'{:06d}.{:02d}.x.jpg'", ".", "format", "(", "int", "(", "idx_woOcc", ")", ",", "int", "(", "0", ")", ")", ")", ",", "x", ")", "#idx", "\n", "idx_woOcc", "=", "idx_woOcc", "+", "1", "\n", "\n", "", "", "", "def", "main", "(", "instanc_size", "=", "511", ",", "num_threads", "=", "24", ")", ":", "\n", "    ", "save_path", "=", "'/YOUR/PATH/NAT2021-train/'", "# where to save cropped imgs", "\n", "crop_path", "=", "'{}/crop_{:d}'", ".", "format", "(", "save_path", ",", "instanc_size", ")", "\n", "\n", "if", "not", "isdir", "(", "crop_path", ")", ":", "mkdir", "(", "crop_path", ")", "\n", "save_path", "=", "join", "(", "crop_path", ")", "\n", "videos", "=", "listdir", "(", "join", "(", "dataset_path", ")", ")", "\n", "videos", ".", "sort", "(", ")", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.vid.gen_json.check_size": [[10, 16], ["numpy.sqrt", "float", "numpy.prod"], "function", ["None"], ["\n", "dataset_path", "=", "'/YOUR/PATH/NAT2021-train/train_clip/'", "\n", "pseudo_label_path", "=", "'pseudo_anno'", "# path to generated pseudo label", "\n", "def", "parse_and_sched", "(", "dl_dir", "=", "'.'", ")", ":", "\n", "    ", "js", "=", "{", "}", "\n", "\n", "videos", "=", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "dataset_path", ")", ")", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.vid.gen_json.check_borders": [[18, 24], ["None"], "function", ["None"], ["        ", "if", "video", "==", "'list.txt'", ":", "\n", "            ", "continue", "\n", "", "gt_path", "=", "join", "(", "pseudo_label_path", ",", "video", "+", "'_gt.txt'", ")", "\n", "f", "=", "open", "(", "gt_path", ",", "'r'", ")", "\n", "groundtruth", "=", "f", ".", "readlines", "(", ")", "\n", "f", ".", "close", "(", ")", "\n", "idx_woOcc", "=", "0", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.vid.par_crop.printProgress": [[17, 27], ["formatStr.format", "int", "sys.stdout.flush", "round", "sys.stdout.write", "sys.stdout.write", "str", "float", "float"], "function", ["home.repos.pwc.inspect_result.vision4robotics_udat.utils.logger.LogFormatter.format"], ["    ", "\"\"\"\n    Call in a loop to create terminal progress bar\n    @params:\n        iteration   - Required  : current iteration (Int)\n        total       - Required  : total iterations (Int)\n        prefix      - Optional  : prefix string (Str)\n        suffix      - Optional  : suffix string (Str)\n        decimals    - Optional  : positive number of decimals in percent complete (Int)\n        barLength   - Optional  : character length of bar (Int)\n    \"\"\"", "\n", "formatStr", "=", "\"{0:.\"", "+", "str", "(", "decimals", ")", "+", "\"f}\"", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.vid.par_crop.crop_hwc": [[29, 38], ["numpy.array().astype", "cv2.warpAffine", "numpy.array"], "function", ["None"], ["filledLength", "=", "int", "(", "round", "(", "barLength", "*", "iteration", "/", "float", "(", "total", ")", ")", ")", "\n", "bar", "=", "''", "*", "filledLength", "+", "'-'", "*", "(", "barLength", "-", "filledLength", ")", "\n", "sys", ".", "stdout", ".", "write", "(", "'\\r%s |%s| %s%s %s'", "%", "(", "prefix", ",", "bar", ",", "percents", ",", "'%'", ",", "suffix", ")", ")", ",", "\n", "if", "iteration", "==", "total", ":", "\n", "        ", "sys", ".", "stdout", ".", "write", "(", "'\\x1b[2K\\r'", ")", "\n", "", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n", "\n", "", "def", "crop_hwc", "(", "image", ",", "bbox", ",", "out_sz", ",", "padding", "=", "(", "0", ",", "0", ",", "0", ")", ")", ":", "\n", "    ", "a", "=", "(", "out_sz", "-", "1", ")", "/", "(", "bbox", "[", "2", "]", "-", "bbox", "[", "0", "]", ")", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.vid.par_crop.pos_s_2_bbox": [[40, 42], ["None"], "function", ["None"], ["c", "=", "-", "a", "*", "bbox", "[", "0", "]", "\n", "d", "=", "-", "b", "*", "bbox", "[", "1", "]", "\n", "mapping", "=", "np", ".", "array", "(", "[", "[", "a", ",", "0", ",", "c", "]", ",", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.vid.par_crop.crop_like_SiamFC": [[44, 58], ["numpy.sqrt", "par_crop.crop_hwc", "par_crop.crop_hwc", "par_crop.pos_s_2_bbox", "par_crop.pos_s_2_bbox", "sum", "sum"], "function", ["home.repos.pwc.inspect_result.vision4robotics_udat.vid.par_crop.crop_hwc", "home.repos.pwc.inspect_result.vision4robotics_udat.vid.par_crop.crop_hwc", "home.repos.pwc.inspect_result.vision4robotics_udat.vid.par_crop.pos_s_2_bbox", "home.repos.pwc.inspect_result.vision4robotics_udat.vid.par_crop.pos_s_2_bbox"], ["crop", "=", "cv2", ".", "warpAffine", "(", "image", ",", "mapping", ",", "(", "out_sz", ",", "out_sz", ")", ",", "borderMode", "=", "cv2", ".", "BORDER_CONSTANT", ",", "borderValue", "=", "padding", ")", "\n", "return", "crop", "\n", "\n", "\n", "", "def", "pos_s_2_bbox", "(", "pos", ",", "s", ")", ":", "\n", "    ", "return", "[", "pos", "[", "0", "]", "-", "s", "/", "2", ",", "pos", "[", "1", "]", "-", "s", "/", "2", ",", "pos", "[", "0", "]", "+", "s", "/", "2", ",", "pos", "[", "1", "]", "+", "s", "/", "2", "]", "\n", "\n", "\n", "", "def", "crop_like_SiamFC", "(", "image", ",", "bbox", ",", "context_amount", "=", "0.5", ",", "exemplar_size", "=", "127", ",", "instanc_size", "=", "255", ",", "padding", "=", "(", "0", ",", "0", ",", "0", ")", ")", ":", "\n", "    ", "target_pos", "=", "[", "(", "bbox", "[", "2", "]", "+", "bbox", "[", "0", "]", ")", "/", "2.", ",", "(", "bbox", "[", "3", "]", "+", "bbox", "[", "1", "]", ")", "/", "2.", "]", "\n", "target_size", "=", "[", "bbox", "[", "2", "]", "-", "bbox", "[", "0", "]", ",", "bbox", "[", "3", "]", "-", "bbox", "[", "1", "]", "]", "\n", "wc_z", "=", "target_size", "[", "1", "]", "+", "context_amount", "*", "sum", "(", "target_size", ")", "\n", "hc_z", "=", "target_size", "[", "0", "]", "+", "context_amount", "*", "sum", "(", "target_size", ")", "\n", "s_z", "=", "np", ".", "sqrt", "(", "wc_z", "*", "hc_z", ")", "\n", "scale_z", "=", "exemplar_size", "/", "s_z", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.vid.par_crop.crop_video": [[60, 87], ["os.path.join", "os.path.join", "sorted", "os.path.isdir", "os.makedirs", "glob.glob", "xml.parse", "ET.parse.findall", "cv2.imread", "numpy.mean", "os.path.join", "xml.replace().replace", "int", "object_iter.find", "par_crop.crop_like_SiamFC", "cv2.imwrite", "cv2.imwrite", "ET.parse.findall", "int", "int", "int", "int", "os.path.join", "os.path.join", "xml.replace", "object_iter.find", "object_iter.find.find", "object_iter.find.find", "object_iter.find.find", "object_iter.find.find", "int", "int"], "function", ["home.repos.pwc.inspect_result.vision4robotics_udat.vid.par_crop.crop_like_SiamFC"], ["pad", "=", "d_search", "/", "scale_z", "\n", "s_x", "=", "s_z", "+", "2", "*", "pad", "\n", "\n", "z", "=", "crop_hwc", "(", "image", ",", "pos_s_2_bbox", "(", "target_pos", ",", "s_z", ")", ",", "exemplar_size", ",", "padding", ")", "\n", "x", "=", "crop_hwc", "(", "image", ",", "pos_s_2_bbox", "(", "target_pos", ",", "s_x", ")", ",", "instanc_size", ",", "padding", ")", "\n", "return", "z", ",", "x", "\n", "\n", "\n", "", "def", "crop_video", "(", "video", ",", "crop_path", ",", "instanc_size", ")", ":", "\n", "    ", "if", "video", "!=", "'list.txt'", ":", "\n", "        ", "video_crop_base_path", "=", "join", "(", "crop_path", ",", "video", ")", "\n", "if", "not", "isdir", "(", "video_crop_base_path", ")", ":", "makedirs", "(", "video_crop_base_path", ")", "\n", "gt_path", "=", "join", "(", "pseudo_label_path", ",", "video", "+", "'_gt.txt'", ")", "\n", "images_path", "=", "join", "(", "dataset_path", ",", "video", ")", "\n", "f", "=", "open", "(", "gt_path", ",", "'r'", ")", "\n", "groundtruth", "=", "f", ".", "readlines", "(", ")", "\n", "f", ".", "close", "(", ")", "\n", "idx_woOcc", "=", "0", "\n", "for", "idx", ",", "gt_line", "in", "enumerate", "(", "groundtruth", ")", ":", "\n", "            ", "if", "gt_line", "==", "'NaN,NaN,NaN,NaN\\n'", ":", "\n", "                ", "continue", "\n", "", "gt_image", "=", "gt_line", ".", "strip", "(", ")", ".", "split", "(", "','", ")", "\n", "bbox", "=", "[", "int", "(", "float", "(", "gt_image", "[", "0", "]", ")", ")", ",", "int", "(", "float", "(", "gt_image", "[", "1", "]", ")", ")", ",", "int", "(", "float", "(", "gt_image", "[", "0", "]", ")", ")", "+", "int", "(", "float", "(", "gt_image", "[", "2", "]", ")", ")", ",", "int", "(", "float", "(", "gt_image", "[", "1", "]", ")", ")", "+", "int", "(", "float", "(", "gt_image", "[", "3", "]", ")", ")", "]", "#xmin,ymin,xmax,ymax", "\n", "\n", "im", "=", "cv2", ".", "imread", "(", "join", "(", "images_path", ",", "str", "(", "idx", "+", "1", ")", ".", "zfill", "(", "6", ")", "+", "'.jpg'", ")", ")", "\n", "avg_chans", "=", "np", ".", "mean", "(", "im", ",", "axis", "=", "(", "0", ",", "1", ")", ")", "\n", "\n", "z", ",", "x", "=", "crop_like_SiamFC", "(", "im", ",", "bbox", ",", "instanc_size", "=", "instanc_size", ",", "padding", "=", "avg_chans", ")", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.vid.par_crop.main": [[89, 102], ["os.path.isdir", "os.mkdir", "os.path.join", "sorted", "len", "os.listdir", "concurrent.futures.ProcessPoolExecutor", "enumerate", "executor.submit", "concurrent.futures.as_completed", "par_crop.printProgress"], "function", ["home.repos.pwc.inspect_result.vision4robotics_udat.vid.par_crop.printProgress"], ["cv2", ".", "imwrite", "(", "join", "(", "video_crop_base_path", ",", "'{:06d}.{:02d}.x.jpg'", ".", "format", "(", "int", "(", "idx_woOcc", ")", ",", "int", "(", "0", ")", ")", ")", ",", "x", ")", "#idx", "\n", "idx_woOcc", "=", "idx_woOcc", "+", "1", "\n", "\n", "", "", "", "def", "main", "(", "instanc_size", "=", "511", ",", "num_threads", "=", "24", ")", ":", "\n", "    ", "save_path", "=", "'/YOUR/PATH/NAT2021-train/'", "# where to save cropped imgs", "\n", "crop_path", "=", "'{}/crop_{:d}'", ".", "format", "(", "save_path", ",", "instanc_size", ")", "\n", "\n", "if", "not", "isdir", "(", "crop_path", ")", ":", "mkdir", "(", "crop_path", ")", "\n", "save_path", "=", "join", "(", "crop_path", ")", "\n", "videos", "=", "listdir", "(", "join", "(", "dataset_path", ")", ")", "\n", "videos", ".", "sort", "(", ")", "\n", "if", "not", "isdir", "(", "save_path", ")", ":", "mkdir", "(", "save_path", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.visualization.draw_success_precision.draw_success_precision": [[6, 115], ["matplotlib.subplots", "ax.grid", "ax.set_aspect", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.axis", "numpy.arange", "success_ret.keys", "enumerate", "ax.legend", "ax.autoscale", "matplotlib.axis", "ax.autoscale", "matplotlib.axis", "matplotlib.xticks", "matplotlib.yticks", "ax.set_aspect", "matplotlib.show", "matplotlib.title", "matplotlib.title", "numpy.mean", "sorted", "matplotlib.plot", "numpy.arange", "numpy.arange", "matplotlib.subplots", "ax.grid", "ax.set_aspect", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.axis", "numpy.arange", "precision_ret.keys", "enumerate", "ax.legend", "ax.autoscale", "matplotlib.axis", "ax.autoscale", "matplotlib.axis", "matplotlib.xticks", "matplotlib.yticks", "ax.set_aspect", "matplotlib.show", "matplotlib.subplots", "ax.grid", "matplotlib.xlabel", "matplotlib.ylabel", "precision_ret.keys", "enumerate", "ax.legend", "ax.autoscale", "matplotlib.axis", "ax.autoscale", "matplotlib.axis", "matplotlib.xticks", "matplotlib.yticks", "ax.set_aspect", "matplotlib.show", "success.items", "numpy.mean", "matplotlib.title", "matplotlib.title", "sorted", "matplotlib.plot", "numpy.arange", "numpy.arange", "matplotlib.title", "matplotlib.title", "numpy.arange", "sorted", "matplotlib.plot", "numpy.arange", "numpy.arange", "success_ret[].items", "success_ret[].items", "numpy.mean", "precision.items", "numpy.mean", "numpy.mean", "norm_precision.items", "numpy.mean", "precision_ret[].items", "precision_ret[].items", "norm_precision_ret[].items", "norm_precision_ret[].items"], "function", ["home.repos.pwc.inspect_result.vision4robotics_udat.datasets.video.Video.show", "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.video.Video.show", "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.video.Video.show"], ["def", "draw_success_precision", "(", "success_ret", ",", "name", ",", "videos", ",", "attr", ",", "precision_ret", "=", "None", ",", "\n", "norm_precision_ret", "=", "None", ",", "bold_name", "=", "None", ",", "axis", "=", "[", "0", ",", "1", "]", ")", ":", "\n", "# success plot", "\n", "    ", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", ")", "\n", "ax", ".", "grid", "(", "b", "=", "True", ")", "\n", "ax", ".", "set_aspect", "(", "1", ")", "\n", "plt", ".", "xlabel", "(", "'Overlap threshold'", ")", "\n", "plt", ".", "ylabel", "(", "'Success rate'", ")", "\n", "if", "attr", "==", "'ALL'", ":", "\n", "        ", "plt", ".", "title", "(", "r'\\textbf{Success plots of OPE on %s}'", "%", "(", "name", ")", ")", "\n", "", "else", ":", "\n", "        ", "plt", ".", "title", "(", "r'\\textbf{Success plots of OPE - %s}'", "%", "(", "attr", ")", ")", "\n", "", "plt", ".", "axis", "(", "[", "0", ",", "1", "]", "+", "axis", ")", "\n", "success", "=", "{", "}", "\n", "thresholds", "=", "np", ".", "arange", "(", "0", ",", "1.05", ",", "0.05", ")", "\n", "for", "tracker_name", "in", "success_ret", ".", "keys", "(", ")", ":", "\n", "        ", "value", "=", "[", "v", "for", "k", ",", "v", "in", "success_ret", "[", "tracker_name", "]", ".", "items", "(", ")", "if", "k", "in", "videos", "]", "\n", "success", "[", "tracker_name", "]", "=", "np", ".", "mean", "(", "value", ")", "\n", "", "for", "idx", ",", "(", "tracker_name", ",", "auc", ")", "in", "enumerate", "(", "sorted", "(", "success", ".", "items", "(", ")", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ",", "reverse", "=", "True", ")", ")", ":", "\n", "        ", "if", "tracker_name", "==", "bold_name", ":", "\n", "            ", "label", "=", "r\"\\textbf{[%.3f] %s}\"", "%", "(", "auc", ",", "tracker_name", ")", "\n", "", "else", ":", "\n", "            ", "label", "=", "\"[%.3f] \"", "%", "(", "auc", ")", "+", "tracker_name", "\n", "", "value", "=", "[", "v", "for", "k", ",", "v", "in", "success_ret", "[", "tracker_name", "]", ".", "items", "(", ")", "if", "k", "in", "videos", "]", "\n", "plt", ".", "plot", "(", "thresholds", ",", "np", ".", "mean", "(", "value", ",", "axis", "=", "0", ")", ",", "\n", "color", "=", "COLOR", "[", "idx", "]", ",", "linestyle", "=", "LINE_STYLE", "[", "idx", "]", ",", "label", "=", "label", ",", "linewidth", "=", "2", ")", "\n", "", "ax", ".", "legend", "(", "loc", "=", "'lower left'", ",", "labelspacing", "=", "0.2", ")", "\n", "ax", ".", "autoscale", "(", "enable", "=", "True", ",", "axis", "=", "'both'", ",", "tight", "=", "True", ")", "\n", "xmin", ",", "xmax", ",", "ymin", ",", "ymax", "=", "plt", ".", "axis", "(", ")", "\n", "ax", ".", "autoscale", "(", "enable", "=", "False", ")", "\n", "ymax", "+=", "0.03", "\n", "plt", ".", "axis", "(", "[", "xmin", ",", "xmax", ",", "ymin", ",", "ymax", "]", ")", "\n", "plt", ".", "xticks", "(", "np", ".", "arange", "(", "xmin", ",", "xmax", "+", "0.01", ",", "0.1", ")", ")", "\n", "plt", ".", "yticks", "(", "np", ".", "arange", "(", "ymin", ",", "ymax", ",", "0.1", ")", ")", "\n", "ax", ".", "set_aspect", "(", "(", "xmax", "-", "xmin", ")", "/", "(", "ymax", "-", "ymin", ")", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n", "if", "precision_ret", ":", "\n", "# norm precision plot", "\n", "        ", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", ")", "\n", "ax", ".", "grid", "(", "b", "=", "True", ")", "\n", "ax", ".", "set_aspect", "(", "50", ")", "\n", "plt", ".", "xlabel", "(", "'Location error threshold'", ")", "\n", "plt", ".", "ylabel", "(", "'Precision'", ")", "\n", "if", "attr", "==", "'ALL'", ":", "\n", "            ", "plt", ".", "title", "(", "r'\\textbf{Precision plots of OPE on %s}'", "%", "(", "name", ")", ")", "\n", "", "else", ":", "\n", "            ", "plt", ".", "title", "(", "r'\\textbf{Precision plots of OPE - %s}'", "%", "(", "attr", ")", ")", "\n", "", "plt", ".", "axis", "(", "[", "0", ",", "50", "]", "+", "axis", ")", "\n", "precision", "=", "{", "}", "\n", "thresholds", "=", "np", ".", "arange", "(", "0", ",", "51", ",", "1", ")", "\n", "for", "tracker_name", "in", "precision_ret", ".", "keys", "(", ")", ":", "\n", "            ", "value", "=", "[", "v", "for", "k", ",", "v", "in", "precision_ret", "[", "tracker_name", "]", ".", "items", "(", ")", "if", "k", "in", "videos", "]", "\n", "precision", "[", "tracker_name", "]", "=", "np", ".", "mean", "(", "value", ",", "axis", "=", "0", ")", "[", "20", "]", "\n", "", "for", "idx", ",", "(", "tracker_name", ",", "pre", ")", "in", "enumerate", "(", "sorted", "(", "precision", ".", "items", "(", ")", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ",", "reverse", "=", "True", ")", ")", ":", "\n", "            ", "if", "tracker_name", "==", "bold_name", ":", "\n", "                ", "label", "=", "r\"\\textbf{[%.3f] %s}\"", "%", "(", "pre", ",", "tracker_name", ")", "\n", "", "else", ":", "\n", "                ", "label", "=", "\"[%.3f] \"", "%", "(", "pre", ")", "+", "tracker_name", "\n", "", "value", "=", "[", "v", "for", "k", ",", "v", "in", "precision_ret", "[", "tracker_name", "]", ".", "items", "(", ")", "if", "k", "in", "videos", "]", "\n", "plt", ".", "plot", "(", "thresholds", ",", "np", ".", "mean", "(", "value", ",", "axis", "=", "0", ")", ",", "\n", "color", "=", "COLOR", "[", "idx", "]", ",", "linestyle", "=", "LINE_STYLE", "[", "idx", "]", ",", "label", "=", "label", ",", "linewidth", "=", "2", ")", "\n", "", "ax", ".", "legend", "(", "loc", "=", "'lower right'", ",", "labelspacing", "=", "0.2", ")", "\n", "ax", ".", "autoscale", "(", "enable", "=", "True", ",", "axis", "=", "'both'", ",", "tight", "=", "True", ")", "\n", "xmin", ",", "xmax", ",", "ymin", ",", "ymax", "=", "plt", ".", "axis", "(", ")", "\n", "ax", ".", "autoscale", "(", "enable", "=", "False", ")", "\n", "ymax", "+=", "0.03", "\n", "plt", ".", "axis", "(", "[", "xmin", ",", "xmax", ",", "ymin", ",", "ymax", "]", ")", "\n", "plt", ".", "xticks", "(", "np", ".", "arange", "(", "xmin", ",", "xmax", "+", "0.01", ",", "5", ")", ")", "\n", "plt", ".", "yticks", "(", "np", ".", "arange", "(", "ymin", ",", "ymax", ",", "0.1", ")", ")", "\n", "ax", ".", "set_aspect", "(", "(", "xmax", "-", "xmin", ")", "/", "(", "ymax", "-", "ymin", ")", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n", "# norm precision plot", "\n", "", "if", "norm_precision_ret", ":", "\n", "        ", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", ")", "\n", "ax", ".", "grid", "(", "b", "=", "True", ")", "\n", "plt", ".", "xlabel", "(", "'Location error threshold'", ")", "\n", "plt", ".", "ylabel", "(", "'Precision'", ")", "\n", "if", "attr", "==", "'ALL'", ":", "\n", "            ", "plt", ".", "title", "(", "r'\\textbf{Normalized Precision plots of OPE on %s}'", "%", "(", "name", ")", ")", "\n", "", "else", ":", "\n", "            ", "plt", ".", "title", "(", "r'\\textbf{Normalized Precision plots of OPE - %s}'", "%", "(", "attr", ")", ")", "\n", "", "norm_precision", "=", "{", "}", "\n", "thresholds", "=", "np", ".", "arange", "(", "0", ",", "51", ",", "1", ")", "/", "100", "\n", "for", "tracker_name", "in", "precision_ret", ".", "keys", "(", ")", ":", "\n", "            ", "value", "=", "[", "v", "for", "k", ",", "v", "in", "norm_precision_ret", "[", "tracker_name", "]", ".", "items", "(", ")", "if", "k", "in", "videos", "]", "\n", "norm_precision", "[", "tracker_name", "]", "=", "np", ".", "mean", "(", "value", ",", "axis", "=", "0", ")", "[", "20", "]", "\n", "", "for", "idx", ",", "(", "tracker_name", ",", "pre", ")", "in", "enumerate", "(", "sorted", "(", "norm_precision", ".", "items", "(", ")", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ",", "reverse", "=", "True", ")", ")", ":", "\n", "            ", "if", "tracker_name", "==", "bold_name", ":", "\n", "                ", "label", "=", "r\"\\textbf{[%.3f] %s}\"", "%", "(", "pre", ",", "tracker_name", ")", "\n", "", "else", ":", "\n", "                ", "label", "=", "\"[%.3f] \"", "%", "(", "pre", ")", "+", "tracker_name", "\n", "", "value", "=", "[", "v", "for", "k", ",", "v", "in", "norm_precision_ret", "[", "tracker_name", "]", ".", "items", "(", ")", "if", "k", "in", "videos", "]", "\n", "plt", ".", "plot", "(", "thresholds", ",", "np", ".", "mean", "(", "value", ",", "axis", "=", "0", ")", ",", "\n", "color", "=", "COLOR", "[", "idx", "]", ",", "linestyle", "=", "LINE_STYLE", "[", "idx", "]", ",", "label", "=", "label", ",", "linewidth", "=", "2", ")", "\n", "", "ax", ".", "legend", "(", "loc", "=", "'lower right'", ",", "labelspacing", "=", "0.2", ")", "\n", "ax", ".", "autoscale", "(", "enable", "=", "True", ",", "axis", "=", "'both'", ",", "tight", "=", "True", ")", "\n", "xmin", ",", "xmax", ",", "ymin", ",", "ymax", "=", "plt", ".", "axis", "(", ")", "\n", "ax", ".", "autoscale", "(", "enable", "=", "False", ")", "\n", "ymax", "+=", "0.03", "\n", "plt", ".", "axis", "(", "[", "xmin", ",", "xmax", ",", "ymin", ",", "ymax", "]", ")", "\n", "plt", ".", "xticks", "(", "np", ".", "arange", "(", "xmin", ",", "xmax", "+", "0.01", ",", "0.05", ")", ")", "\n", "plt", ".", "yticks", "(", "np", ".", "arange", "(", "ymin", ",", "ymax", ",", "0.1", ")", ")", "\n", "ax", ".", "set_aspect", "(", "(", "xmax", "-", "xmin", ")", "/", "(", "ymax", "-", "ymin", ")", ")", "\n", "plt", ".", "show", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.vision4robotics_udat.visualization.draw_eao.draw_eao": [[11, 46], ["matplotlib.figure", "plt.figure.add_subplot", "numpy.linspace", "enumerate", "numpy.array", "numpy.max", "numpy.min", "enumerate", "zip", "fig.add_subplot.set_thetagrids", "fig.add_subplot.spines[].set_visible", "fig.add_subplot.legend", "fig.add_subplot.grid", "fig.add_subplot.set_ylim", "fig.add_subplot.set_yticks", "matplotlib.show", "result.items", "list", "np.array.append", "np.array.append", "result.items", "list", "np.array.append", "numpy.array", "matplotlib.plot", "attr_value.append", "ret.values", "ret.values"], "function", ["home.repos.pwc.inspect_result.vision4robotics_udat.datasets.video.Video.show"], ["def", "draw_eao", "(", "result", ")", ":", "\n", "    ", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "ax", "=", "fig", ".", "add_subplot", "(", "111", ",", "projection", "=", "'polar'", ")", "\n", "angles", "=", "np", ".", "linspace", "(", "0", ",", "2", "*", "np", ".", "pi", ",", "8", ",", "endpoint", "=", "True", ")", "\n", "\n", "attr2value", "=", "[", "]", "\n", "for", "i", ",", "(", "tracker_name", ",", "ret", ")", "in", "enumerate", "(", "result", ".", "items", "(", ")", ")", ":", "\n", "        ", "value", "=", "list", "(", "ret", ".", "values", "(", ")", ")", "\n", "attr2value", ".", "append", "(", "value", ")", "\n", "value", ".", "append", "(", "value", "[", "0", "]", ")", "\n", "", "attr2value", "=", "np", ".", "array", "(", "attr2value", ")", "\n", "max_value", "=", "np", ".", "max", "(", "attr2value", ",", "axis", "=", "0", ")", "\n", "min_value", "=", "np", ".", "min", "(", "attr2value", ",", "axis", "=", "0", ")", "\n", "for", "i", ",", "(", "tracker_name", ",", "ret", ")", "in", "enumerate", "(", "result", ".", "items", "(", ")", ")", ":", "\n", "        ", "value", "=", "list", "(", "ret", ".", "values", "(", ")", ")", "\n", "value", ".", "append", "(", "value", "[", "0", "]", ")", "\n", "value", "=", "np", ".", "array", "(", "value", ")", "\n", "value", "*=", "(", "1", "/", "max_value", ")", "\n", "plt", ".", "plot", "(", "angles", ",", "value", ",", "linestyle", "=", "'-'", ",", "color", "=", "COLOR", "[", "i", "]", ",", "marker", "=", "MARKER_STYLE", "[", "i", "]", ",", "\n", "label", "=", "tracker_name", ",", "linewidth", "=", "1.5", ",", "markersize", "=", "6", ")", "\n", "\n", "", "attrs", "=", "[", "\"Overall\"", ",", "\"Camera motion\"", ",", "\n", "\"Illumination change\"", ",", "\"Motion Change\"", ",", "\n", "\"Size change\"", ",", "\"Occlusion\"", ",", "\n", "\"Unassigned\"", "]", "\n", "attr_value", "=", "[", "]", "\n", "for", "attr", ",", "maxv", ",", "minv", "in", "zip", "(", "attrs", ",", "max_value", ",", "min_value", ")", ":", "\n", "        ", "attr_value", ".", "append", "(", "attr", "+", "\"\\n({:.3f},{:.3f})\"", ".", "format", "(", "minv", ",", "maxv", ")", ")", "\n", "", "ax", ".", "set_thetagrids", "(", "angles", "[", ":", "-", "1", "]", "*", "180", "/", "np", ".", "pi", ",", "attr_value", ")", "\n", "ax", ".", "spines", "[", "'polar'", "]", ".", "set_visible", "(", "False", ")", "\n", "ax", ".", "legend", "(", "loc", "=", "'upper center'", ",", "bbox_to_anchor", "=", "(", "0.5", ",", "-", "0.07", ")", ",", "frameon", "=", "False", ",", "ncol", "=", "5", ")", "\n", "ax", ".", "grid", "(", "b", "=", "False", ")", "\n", "ax", ".", "set_ylim", "(", "0", ",", "1.18", ")", "\n", "ax", ".", "set_yticks", "(", "[", "]", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.visualization.draw_f1.draw_f1": [[10, 57], ["matplotlib.subplots", "numpy.arange", "ax.grid", "ax.set_aspect", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.axis", "matplotlib.title", "result.items", "enumerate", "ax.legend", "matplotlib.xticks", "matplotlib.yticks", "matplotlib.show", "numpy.arange", "ax.plot", "ax.plot", "numpy.mean", "numpy.mean", "numpy.argmax", "sorted", "ax.plot", "ax.plot", "numpy.arange", "numpy.arange", "list", "list", "best_f1.items", "ret[].values", "ret[].values"], "function", ["home.repos.pwc.inspect_result.vision4robotics_udat.datasets.video.Video.show"], ["def", "draw_f1", "(", "result", ",", "bold_name", "=", "None", ")", ":", "\n", "# drawing f1 contour", "\n", "    ", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", ")", "\n", "for", "f1", "in", "np", ".", "arange", "(", "0.1", ",", "1", ",", "0.1", ")", ":", "\n", "        ", "recall", "=", "np", ".", "arange", "(", "f1", ",", "1", "+", "0.01", ",", "0.01", ")", "\n", "precision", "=", "f1", "*", "recall", "/", "(", "2", "*", "recall", "-", "f1", ")", "\n", "ax", ".", "plot", "(", "recall", ",", "precision", ",", "color", "=", "[", "0", ",", "1", ",", "0", "]", ",", "linestyle", "=", "'-'", ",", "linewidth", "=", "0.5", ")", "\n", "ax", ".", "plot", "(", "precision", ",", "recall", ",", "color", "=", "[", "0", ",", "1", ",", "0", "]", ",", "linestyle", "=", "'-'", ",", "linewidth", "=", "0.5", ")", "\n", "", "ax", ".", "grid", "(", "b", "=", "True", ")", "\n", "ax", ".", "set_aspect", "(", "1", ")", "\n", "plt", ".", "xlabel", "(", "'Recall'", ")", "\n", "plt", ".", "ylabel", "(", "'Precision'", ")", "\n", "plt", ".", "axis", "(", "[", "0", ",", "1", ",", "0", ",", "1", "]", ")", "\n", "plt", ".", "title", "(", "r'\\textbf{VOT2018-LT Precision vs Recall}'", ")", "\n", "\n", "# draw result line", "\n", "all_precision", "=", "{", "}", "\n", "all_recall", "=", "{", "}", "\n", "best_f1", "=", "{", "}", "\n", "best_idx", "=", "{", "}", "\n", "for", "tracker_name", ",", "ret", "in", "result", ".", "items", "(", ")", ":", "\n", "        ", "precision", "=", "np", ".", "mean", "(", "list", "(", "ret", "[", "'precision'", "]", ".", "values", "(", ")", ")", ",", "axis", "=", "0", ")", "\n", "recall", "=", "np", ".", "mean", "(", "list", "(", "ret", "[", "'recall'", "]", ".", "values", "(", ")", ")", ",", "axis", "=", "0", ")", "\n", "f1", "=", "2", "*", "precision", "*", "recall", "/", "(", "precision", "+", "recall", ")", "\n", "max_idx", "=", "np", ".", "argmax", "(", "f1", ")", "\n", "all_precision", "[", "tracker_name", "]", "=", "precision", "\n", "all_recall", "[", "tracker_name", "]", "=", "recall", "\n", "best_f1", "[", "tracker_name", "]", "=", "f1", "[", "max_idx", "]", "\n", "best_idx", "[", "tracker_name", "]", "=", "max_idx", "\n", "\n", "", "for", "idx", ",", "(", "tracker_name", ",", "best_f1", ")", "in", "enumerate", "(", "sorted", "(", "best_f1", ".", "items", "(", ")", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ",", "reverse", "=", "True", ")", ")", ":", "\n", "        ", "if", "tracker_name", "==", "bold_name", ":", "\n", "            ", "label", "=", "r\"\\textbf{[%.3f] Ours}\"", "%", "(", "best_f1", ")", "\n", "", "else", ":", "\n", "            ", "label", "=", "\"[%.3f] \"", "%", "(", "best_f1", ")", "+", "tracker_name", "\n", "", "recall", "=", "all_recall", "[", "tracker_name", "]", "[", ":", "-", "1", "]", "\n", "precision", "=", "all_precision", "[", "tracker_name", "]", "[", ":", "-", "1", "]", "\n", "ax", ".", "plot", "(", "recall", ",", "precision", ",", "color", "=", "COLOR", "[", "idx", "]", ",", "linestyle", "=", "'-'", ",", "\n", "label", "=", "label", ")", "\n", "f1_idx", "=", "best_idx", "[", "tracker_name", "]", "\n", "ax", ".", "plot", "(", "recall", "[", "f1_idx", "]", ",", "precision", "[", "f1_idx", "]", ",", "color", "=", "[", "0", ",", "0", ",", "0", "]", ",", "marker", "=", "'o'", ",", "\n", "markerfacecolor", "=", "COLOR", "[", "idx", "]", ",", "markersize", "=", "5", ")", "\n", "", "ax", ".", "legend", "(", "loc", "=", "'lower right'", ",", "labelspacing", "=", "0.2", ")", "\n", "plt", ".", "xticks", "(", "np", ".", "arange", "(", "0", ",", "1", "+", "0.1", ",", "0.1", ")", ")", "\n", "plt", ".", "yticks", "(", "np", ".", "arange", "(", "0", ",", "1", "+", "0.1", ",", "0.1", ")", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.evaluation.ope_benchmark.OPEBenchmark.__init__": [[13, 15], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "dataset", ")", ":", "\n", "        ", "self", ".", "dataset", "=", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.evaluation.ope_benchmark.OPEBenchmark.convert_bb_to_center": [[16, 19], ["numpy.array"], "methods", ["None"], ["", "def", "convert_bb_to_center", "(", "self", ",", "bboxes", ")", ":", "\n", "        ", "return", "np", ".", "array", "(", "[", "(", "bboxes", "[", ":", ",", "0", "]", "+", "(", "bboxes", "[", ":", ",", "2", "]", "-", "1", ")", "/", "2", ")", ",", "\n", "(", "bboxes", "[", ":", ",", "1", "]", "+", "(", "bboxes", "[", ":", ",", "3", "]", "-", "1", ")", "/", "2", ")", "]", ")", ".", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.evaluation.ope_benchmark.OPEBenchmark.convert_bb_to_norm_center": [[20, 22], ["ope_benchmark.OPEBenchmark.convert_bb_to_center"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.evaluation.ope_benchmark.OPEBenchmark.convert_bb_to_center"], ["", "def", "convert_bb_to_norm_center", "(", "self", ",", "bboxes", ",", "gt_wh", ")", ":", "\n", "        ", "return", "self", ".", "convert_bb_to_center", "(", "bboxes", ")", "/", "(", "gt_wh", "+", "1e-16", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.evaluation.ope_benchmark.OPEBenchmark.eval_success": [[23, 53], ["isinstance", "numpy.array", "len", "hasattr", "utils.success_overlap", "video.load_tracker", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.utils.statistics.success_overlap", "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.video.Video.load_tracker"], ["", "def", "eval_success", "(", "self", ",", "eval_trackers", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Args: \n            eval_trackers: list of tracker name or single tracker name\n        Return:\n            res: dict of results\n        \"\"\"", "\n", "if", "eval_trackers", "is", "None", ":", "\n", "            ", "eval_trackers", "=", "self", ".", "dataset", ".", "tracker_names", "\n", "", "if", "isinstance", "(", "eval_trackers", ",", "str", ")", ":", "\n", "            ", "eval_trackers", "=", "[", "eval_trackers", "]", "\n", "\n", "", "success_ret", "=", "{", "}", "\n", "for", "tracker_name", "in", "eval_trackers", ":", "\n", "            ", "success_ret_", "=", "{", "}", "\n", "for", "video", "in", "self", ".", "dataset", ":", "\n", "                ", "gt_traj", "=", "np", ".", "array", "(", "video", ".", "gt_traj", ")", "\n", "if", "tracker_name", "not", "in", "video", ".", "pred_trajs", ":", "\n", "                    ", "tracker_traj", "=", "video", ".", "load_tracker", "(", "self", ".", "dataset", ".", "tracker_path", ",", "\n", "tracker_name", ",", "False", ")", "\n", "tracker_traj", "=", "np", ".", "array", "(", "tracker_traj", ")", "\n", "", "else", ":", "\n", "                    ", "tracker_traj", "=", "np", ".", "array", "(", "video", ".", "pred_trajs", "[", "tracker_name", "]", ")", "\n", "", "n_frame", "=", "len", "(", "gt_traj", ")", "\n", "if", "hasattr", "(", "video", ",", "'absent'", ")", ":", "\n", "                    ", "gt_traj", "=", "gt_traj", "[", "video", ".", "absent", "==", "1", "]", "\n", "tracker_traj", "=", "tracker_traj", "[", "video", ".", "absent", "==", "1", "]", "\n", "", "success_ret_", "[", "video", ".", "name", "]", "=", "success_overlap", "(", "gt_traj", ",", "tracker_traj", ",", "n_frame", ")", "\n", "", "success_ret", "[", "tracker_name", "]", "=", "success_ret_", "\n", "", "return", "success_ret", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.evaluation.ope_benchmark.OPEBenchmark.eval_precision": [[54, 88], ["isinstance", "numpy.array", "len", "hasattr", "ope_benchmark.OPEBenchmark.convert_bb_to_center", "ope_benchmark.OPEBenchmark.convert_bb_to_center", "numpy.arange", "utils.success_error", "video.load_tracker", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.evaluation.ope_benchmark.OPEBenchmark.convert_bb_to_center", "home.repos.pwc.inspect_result.vision4robotics_udat.evaluation.ope_benchmark.OPEBenchmark.convert_bb_to_center", "home.repos.pwc.inspect_result.vision4robotics_udat.utils.statistics.success_error", "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.video.Video.load_tracker"], ["", "def", "eval_precision", "(", "self", ",", "eval_trackers", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            eval_trackers: list of tracker name or single tracker name\n        Return:\n            res: dict of results\n        \"\"\"", "\n", "if", "eval_trackers", "is", "None", ":", "\n", "            ", "eval_trackers", "=", "self", ".", "dataset", ".", "tracker_names", "\n", "", "if", "isinstance", "(", "eval_trackers", ",", "str", ")", ":", "\n", "            ", "eval_trackers", "=", "[", "eval_trackers", "]", "\n", "\n", "", "precision_ret", "=", "{", "}", "\n", "for", "tracker_name", "in", "eval_trackers", ":", "\n", "            ", "precision_ret_", "=", "{", "}", "\n", "for", "video", "in", "self", ".", "dataset", ":", "\n", "                ", "gt_traj", "=", "np", ".", "array", "(", "video", ".", "gt_traj", ")", "\n", "if", "tracker_name", "not", "in", "video", ".", "pred_trajs", ":", "\n", "                    ", "tracker_traj", "=", "video", ".", "load_tracker", "(", "self", ".", "dataset", ".", "tracker_path", ",", "\n", "tracker_name", ",", "False", ")", "\n", "tracker_traj", "=", "np", ".", "array", "(", "tracker_traj", ")", "\n", "", "else", ":", "\n", "                    ", "tracker_traj", "=", "np", ".", "array", "(", "video", ".", "pred_trajs", "[", "tracker_name", "]", ")", "\n", "", "n_frame", "=", "len", "(", "gt_traj", ")", "\n", "if", "hasattr", "(", "video", ",", "'absent'", ")", ":", "\n", "                    ", "gt_traj", "=", "gt_traj", "[", "video", ".", "absent", "==", "1", "]", "\n", "tracker_traj", "=", "tracker_traj", "[", "video", ".", "absent", "==", "1", "]", "\n", "", "gt_center", "=", "self", ".", "convert_bb_to_center", "(", "gt_traj", ")", "\n", "tracker_center", "=", "self", ".", "convert_bb_to_center", "(", "tracker_traj", ")", "\n", "thresholds", "=", "np", ".", "arange", "(", "0", ",", "51", ",", "1", ")", "\n", "precision_ret_", "[", "video", ".", "name", "]", "=", "success_error", "(", "gt_center", ",", "tracker_center", ",", "\n", "thresholds", ",", "n_frame", ")", "\n", "", "precision_ret", "[", "tracker_name", "]", "=", "precision_ret_", "\n", "", "return", "precision_ret", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.evaluation.ope_benchmark.OPEBenchmark.eval_norm_precision": [[89, 123], ["isinstance", "numpy.array", "len", "hasattr", "ope_benchmark.OPEBenchmark.convert_bb_to_norm_center", "ope_benchmark.OPEBenchmark.convert_bb_to_norm_center", "utils.success_error", "video.load_tracker", "numpy.array", "numpy.array", "numpy.arange"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.evaluation.ope_benchmark.OPEBenchmark.convert_bb_to_norm_center", "home.repos.pwc.inspect_result.vision4robotics_udat.evaluation.ope_benchmark.OPEBenchmark.convert_bb_to_norm_center", "home.repos.pwc.inspect_result.vision4robotics_udat.utils.statistics.success_error", "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.video.Video.load_tracker"], ["", "def", "eval_norm_precision", "(", "self", ",", "eval_trackers", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            eval_trackers: list of tracker name or single tracker name\n        Return:\n            res: dict of results\n        \"\"\"", "\n", "if", "eval_trackers", "is", "None", ":", "\n", "            ", "eval_trackers", "=", "self", ".", "dataset", ".", "tracker_names", "\n", "", "if", "isinstance", "(", "eval_trackers", ",", "str", ")", ":", "\n", "            ", "eval_trackers", "=", "[", "eval_trackers", "]", "\n", "\n", "", "norm_precision_ret", "=", "{", "}", "\n", "for", "tracker_name", "in", "eval_trackers", ":", "\n", "            ", "norm_precision_ret_", "=", "{", "}", "\n", "for", "video", "in", "self", ".", "dataset", ":", "\n", "                ", "gt_traj", "=", "np", ".", "array", "(", "video", ".", "gt_traj", ")", "\n", "if", "tracker_name", "not", "in", "video", ".", "pred_trajs", ":", "\n", "                    ", "tracker_traj", "=", "video", ".", "load_tracker", "(", "self", ".", "dataset", ".", "tracker_path", ",", "\n", "tracker_name", ",", "False", ")", "\n", "tracker_traj", "=", "np", ".", "array", "(", "tracker_traj", ")", "\n", "", "else", ":", "\n", "                    ", "tracker_traj", "=", "np", ".", "array", "(", "video", ".", "pred_trajs", "[", "tracker_name", "]", ")", "\n", "", "n_frame", "=", "len", "(", "gt_traj", ")", "\n", "if", "hasattr", "(", "video", ",", "'absent'", ")", ":", "\n", "                    ", "gt_traj", "=", "gt_traj", "[", "video", ".", "absent", "==", "1", "]", "\n", "tracker_traj", "=", "tracker_traj", "[", "video", ".", "absent", "==", "1", "]", "\n", "", "gt_center_norm", "=", "self", ".", "convert_bb_to_norm_center", "(", "gt_traj", ",", "gt_traj", "[", ":", ",", "2", ":", "4", "]", ")", "\n", "tracker_center_norm", "=", "self", ".", "convert_bb_to_norm_center", "(", "tracker_traj", ",", "gt_traj", "[", ":", ",", "2", ":", "4", "]", ")", "\n", "thresholds", "=", "np", ".", "arange", "(", "0", ",", "51", ",", "1", ")", "/", "100", "\n", "norm_precision_ret_", "[", "video", ".", "name", "]", "=", "success_error", "(", "gt_center_norm", ",", "\n", "tracker_center_norm", ",", "thresholds", ",", "n_frame", ")", "\n", "", "norm_precision_ret", "[", "tracker_name", "]", "=", "norm_precision_ret_", "\n", "", "return", "norm_precision_ret", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.evaluation.ope_benchmark.OPEBenchmark.show_result": [[124, 196], ["success_ret.keys", "max", "print", "print", "print", "print", "numpy.mean", "sorted", "print", "print", "success_ret.keys", "print", "print", "print", "print", "print", "list", "print", "list", "tracker_auc.items", "max", "str", "len", "len", "formatter.format", "len", "len", "len", "success_ret[].keys", "success_ret.keys", "print", "success_ret[].values", "numpy.mean", "numpy.mean", "len", "len", "len", "numpy.mean", "numpy.mean", "len", "len", "str", "list", "list", "success_ret.keys", "precision_ret[].values", "norm_precision_ret[].values"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.utils.logger.LogFormatter.format"], ["", "def", "show_result", "(", "self", ",", "success_ret", ",", "precision_ret", "=", "None", ",", "\n", "norm_precision_ret", "=", "None", ",", "show_video_level", "=", "False", ",", "helight_threshold", "=", "0.6", ")", ":", "\n", "        ", "\"\"\"pretty print result\n        Args:\n            result: returned dict from function eval\n        \"\"\"", "\n", "# sort tracker", "\n", "tracker_auc", "=", "{", "}", "\n", "for", "tracker_name", "in", "success_ret", ".", "keys", "(", ")", ":", "\n", "            ", "auc", "=", "np", ".", "mean", "(", "list", "(", "success_ret", "[", "tracker_name", "]", ".", "values", "(", ")", ")", ")", "\n", "tracker_auc", "[", "tracker_name", "]", "=", "auc", "\n", "", "tracker_auc_", "=", "sorted", "(", "tracker_auc", ".", "items", "(", ")", ",", "\n", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ",", "\n", "reverse", "=", "True", ")", "[", ":", "20", "]", "\n", "tracker_names", "=", "[", "x", "[", "0", "]", "for", "x", "in", "tracker_auc_", "]", "\n", "\n", "\n", "tracker_name_len", "=", "max", "(", "(", "max", "(", "[", "len", "(", "x", ")", "for", "x", "in", "success_ret", ".", "keys", "(", ")", "]", ")", "+", "2", ")", ",", "12", ")", "\n", "header", "=", "(", "\"|{:^\"", "+", "str", "(", "tracker_name_len", ")", "+", "\"}|{:^9}|{:^16}|{:^11}|\"", ")", ".", "format", "(", "\n", "\"Tracker name\"", ",", "\"Success\"", ",", "\"Norm Precision\"", ",", "\"Precision\"", ")", "\n", "formatter", "=", "\"|{:^\"", "+", "str", "(", "tracker_name_len", ")", "+", "\"}|{:^9.3f}|{:^16.3f}|{:^11.3f}|\"", "\n", "print", "(", "'-'", "*", "len", "(", "header", ")", ")", "\n", "print", "(", "header", ")", "\n", "print", "(", "'-'", "*", "len", "(", "header", ")", ")", "\n", "for", "tracker_name", "in", "tracker_names", ":", "\n", "# success = np.mean(list(success_ret[tracker_name].values()))", "\n", "            ", "success", "=", "tracker_auc", "[", "tracker_name", "]", "\n", "if", "precision_ret", "is", "not", "None", ":", "\n", "                ", "precision", "=", "np", ".", "mean", "(", "list", "(", "precision_ret", "[", "tracker_name", "]", ".", "values", "(", ")", ")", ",", "axis", "=", "0", ")", "[", "20", "]", "\n", "", "else", ":", "\n", "                ", "precision", "=", "0", "\n", "", "if", "norm_precision_ret", "is", "not", "None", ":", "\n", "                ", "norm_precision", "=", "np", ".", "mean", "(", "list", "(", "norm_precision_ret", "[", "tracker_name", "]", ".", "values", "(", ")", ")", ",", "\n", "axis", "=", "0", ")", "[", "20", "]", "\n", "", "else", ":", "\n", "                ", "norm_precision", "=", "0", "\n", "", "print", "(", "formatter", ".", "format", "(", "tracker_name", ",", "success", ",", "norm_precision", ",", "precision", ")", ")", "\n", "", "print", "(", "'-'", "*", "len", "(", "header", ")", ")", "\n", "\n", "if", "show_video_level", "and", "len", "(", "success_ret", ")", "<", "10", "and", "precision_ret", "is", "not", "None", "and", "len", "(", "precision_ret", ")", "<", "10", ":", "\n", "            ", "print", "(", "\"\\n\\n\"", ")", "\n", "header1", "=", "\"|{:^21}|\"", ".", "format", "(", "\"Tracker name\"", ")", "\n", "header2", "=", "\"|{:^21}|\"", ".", "format", "(", "\"Video name\"", ")", "\n", "for", "tracker_name", "in", "success_ret", ".", "keys", "(", ")", ":", "\n", "# col_len = max(20, len(tracker_name))", "\n", "                ", "header1", "+=", "(", "\"{:^21}|\"", ")", ".", "format", "(", "tracker_name", ")", "\n", "header2", "+=", "\"{:^9}|{:^11}|\"", ".", "format", "(", "\"success\"", ",", "\"precision\"", ")", "\n", "", "print", "(", "'-'", "*", "len", "(", "header1", ")", ")", "\n", "print", "(", "header1", ")", "\n", "print", "(", "'-'", "*", "len", "(", "header1", ")", ")", "\n", "print", "(", "header2", ")", "\n", "print", "(", "'-'", "*", "len", "(", "header1", ")", ")", "\n", "videos", "=", "list", "(", "success_ret", "[", "tracker_name", "]", ".", "keys", "(", ")", ")", "\n", "for", "video", "in", "videos", ":", "\n", "                ", "row", "=", "\"|{:^21}|\"", ".", "format", "(", "video", ")", "\n", "for", "tracker_name", "in", "success_ret", ".", "keys", "(", ")", ":", "\n", "                    ", "success", "=", "np", ".", "mean", "(", "success_ret", "[", "tracker_name", "]", "[", "video", "]", ")", "\n", "precision", "=", "np", ".", "mean", "(", "precision_ret", "[", "tracker_name", "]", "[", "video", "]", ")", "\n", "success_str", "=", "\"{:^9.3f}\"", ".", "format", "(", "success", ")", "\n", "if", "success", "<", "helight_threshold", ":", "\n", "                        ", "row", "+=", "Fore", ".", "RED", "+", "success_str", "+", "Style", ".", "RESET_ALL", "+", "'|'", "\n", "", "else", ":", "\n", "                        ", "row", "+=", "success_str", "+", "'|'", "\n", "", "precision_str", "=", "\"{:^11.3f}\"", ".", "format", "(", "precision", ")", "\n", "if", "precision", "<", "helight_threshold", ":", "\n", "                        ", "row", "+=", "Fore", ".", "RED", "+", "precision_str", "+", "Style", ".", "RESET_ALL", "+", "'|'", "\n", "", "else", ":", "\n", "                        ", "row", "+=", "precision_str", "+", "'|'", "\n", "", "", "print", "(", "row", ")", "\n", "", "print", "(", "'-'", "*", "len", "(", "header1", ")", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.vision4robotics_udat.evaluation.ar_benchmark.AccuracyRobustnessBenchmark.__init__": [[18, 21], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "dataset", ",", "burnin", "=", "10", ")", ":", "\n", "        ", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "burnin", "=", "burnin", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.evaluation.ar_benchmark.AccuracyRobustnessBenchmark.eval": [[22, 41], ["isinstance", "ar_benchmark.AccuracyRobustnessBenchmark._calculate_accuracy_robustness"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.evaluation.ar_benchmark.AccuracyRobustnessBenchmark._calculate_accuracy_robustness"], ["", "def", "eval", "(", "self", ",", "eval_trackers", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            eval_tags: list of tag\n            eval_trackers: list of tracker name\n        Returns:\n            ret: dict of results\n        \"\"\"", "\n", "if", "eval_trackers", "is", "None", ":", "\n", "            ", "eval_trackers", "=", "self", ".", "dataset", ".", "tracker_names", "\n", "", "if", "isinstance", "(", "eval_trackers", ",", "str", ")", ":", "\n", "            ", "eval_trackers", "=", "[", "eval_trackers", "]", "\n", "\n", "", "result", "=", "{", "}", "\n", "for", "tracker_name", "in", "eval_trackers", ":", "\n", "            ", "accuracy", ",", "failures", "=", "self", ".", "_calculate_accuracy_robustness", "(", "tracker_name", ")", "\n", "result", "[", "tracker_name", "]", "=", "{", "'overlaps'", ":", "accuracy", ",", "\n", "'failures'", ":", "failures", "}", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.evaluation.ar_benchmark.AccuracyRobustnessBenchmark.show_result": [[42, 117], ["max", "print", "print", "print", "print", "header.format.format.format", "header.format.format.format", "len", "list", "list", "numpy.nanmean", "sum", "list", "numpy.mean", "print", "result.keys", "print", "print", "print", "print", "print", "list", "print", "max", "sorted", "result.keys", "itertools.chain", "ret[].values", "numpy.sum", "numpy.mean", "print", "print", "len", "[].keys", "result.keys", "print", "str", "str", "str", "str", "eao_result.items", "len", "formatter.format", "formatter.format", "len", "len", "len", "numpy.nanmean", "numpy.mean", "len", "len", "ret[].values", "ret[].values", "numpy.sum", "result.keys", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.utils.logger.LogFormatter.format", "home.repos.pwc.inspect_result.vision4robotics_udat.utils.logger.LogFormatter.format", "home.repos.pwc.inspect_result.vision4robotics_udat.utils.logger.LogFormatter.format", "home.repos.pwc.inspect_result.vision4robotics_udat.utils.logger.LogFormatter.format"], ["", "def", "show_result", "(", "self", ",", "result", ",", "eao_result", "=", "None", ",", "show_video_level", "=", "False", ",", "helight_threshold", "=", "0.5", ")", ":", "\n", "        ", "\"\"\"pretty print result\n        Args:\n            result: returned dict from function eval\n        \"\"\"", "\n", "tracker_name_len", "=", "max", "(", "(", "max", "(", "[", "len", "(", "x", ")", "for", "x", "in", "result", ".", "keys", "(", ")", "]", ")", "+", "2", ")", ",", "12", ")", "\n", "if", "eao_result", "is", "not", "None", ":", "\n", "            ", "header", "=", "\"|{:^\"", "+", "str", "(", "tracker_name_len", ")", "+", "\"}|{:^10}|{:^12}|{:^13}|{:^7}|\"", "\n", "header", "=", "header", ".", "format", "(", "'Tracker Name'", ",", "\n", "'Accuracy'", ",", "'Robustness'", ",", "'Lost Number'", ",", "'EAO'", ")", "\n", "formatter", "=", "\"|{:^\"", "+", "str", "(", "tracker_name_len", ")", "+", "\"}|{:^10.3f}|{:^12.3f}|{:^13.1f}|{:^7.3f}|\"", "\n", "", "else", ":", "\n", "            ", "header", "=", "\"|{:^\"", "+", "str", "(", "tracker_name_len", ")", "+", "\"}|{:^10}|{:^12}|{:^13}|\"", "\n", "header", "=", "header", ".", "format", "(", "'Tracker Name'", ",", "\n", "'Accuracy'", ",", "'Robustness'", ",", "'Lost Number'", ")", "\n", "formatter", "=", "\"|{:^\"", "+", "str", "(", "tracker_name_len", ")", "+", "\"}|{:^10.3f}|{:^12.3f}|{:^13.1f}|\"", "\n", "", "bar", "=", "'-'", "*", "len", "(", "header", ")", "\n", "print", "(", "bar", ")", "\n", "print", "(", "header", ")", "\n", "print", "(", "bar", ")", "\n", "if", "eao_result", "is", "not", "None", ":", "\n", "            ", "tracker_eao", "=", "sorted", "(", "eao_result", ".", "items", "(", ")", ",", "\n", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", "[", "'all'", "]", ",", "\n", "reverse", "=", "True", ")", "[", ":", "20", "]", "\n", "tracker_names", "=", "[", "x", "[", "0", "]", "for", "x", "in", "tracker_eao", "]", "\n", "", "else", ":", "\n", "            ", "tracker_names", "=", "list", "(", "result", ".", "keys", "(", ")", ")", "\n", "", "for", "tracker_name", "in", "tracker_names", ":", "\n", "# for tracker_name, ret in result.items():", "\n", "            ", "ret", "=", "result", "[", "tracker_name", "]", "\n", "overlaps", "=", "list", "(", "itertools", ".", "chain", "(", "*", "ret", "[", "'overlaps'", "]", ".", "values", "(", ")", ")", ")", "\n", "accuracy", "=", "np", ".", "nanmean", "(", "overlaps", ")", "\n", "length", "=", "sum", "(", "[", "len", "(", "x", ")", "for", "x", "in", "ret", "[", "'overlaps'", "]", ".", "values", "(", ")", "]", ")", "\n", "failures", "=", "list", "(", "ret", "[", "'failures'", "]", ".", "values", "(", ")", ")", "\n", "lost_number", "=", "np", ".", "mean", "(", "np", ".", "sum", "(", "failures", ",", "axis", "=", "0", ")", ")", "\n", "robustness", "=", "np", ".", "mean", "(", "np", ".", "sum", "(", "np", ".", "array", "(", "failures", ")", ",", "axis", "=", "0", ")", "/", "length", ")", "*", "100", "\n", "if", "eao_result", "is", "None", ":", "\n", "                ", "print", "(", "formatter", ".", "format", "(", "tracker_name", ",", "accuracy", ",", "robustness", ",", "lost_number", ")", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "formatter", ".", "format", "(", "tracker_name", ",", "accuracy", ",", "robustness", ",", "lost_number", ",", "eao_result", "[", "tracker_name", "]", "[", "'all'", "]", ")", ")", "\n", "", "", "print", "(", "bar", ")", "\n", "\n", "if", "show_video_level", "and", "len", "(", "result", ")", "<", "10", ":", "\n", "            ", "print", "(", "'\\n\\n'", ")", "\n", "header1", "=", "\"|{:^14}|\"", ".", "format", "(", "\"Tracker name\"", ")", "\n", "header2", "=", "\"|{:^14}|\"", ".", "format", "(", "\"Video name\"", ")", "\n", "for", "tracker_name", "in", "result", ".", "keys", "(", ")", ":", "\n", "                ", "header1", "+=", "(", "\"{:^17}|\"", ")", ".", "format", "(", "tracker_name", ")", "\n", "header2", "+=", "\"{:^8}|{:^8}|\"", ".", "format", "(", "\"Acc\"", ",", "\"LN\"", ")", "\n", "", "print", "(", "'-'", "*", "len", "(", "header1", ")", ")", "\n", "print", "(", "header1", ")", "\n", "print", "(", "'-'", "*", "len", "(", "header1", ")", ")", "\n", "print", "(", "header2", ")", "\n", "print", "(", "'-'", "*", "len", "(", "header1", ")", ")", "\n", "videos", "=", "list", "(", "result", "[", "tracker_name", "]", "[", "'overlaps'", "]", ".", "keys", "(", ")", ")", "\n", "for", "video", "in", "videos", ":", "\n", "                ", "row", "=", "\"|{:^14}|\"", ".", "format", "(", "video", ")", "\n", "for", "tracker_name", "in", "result", ".", "keys", "(", ")", ":", "\n", "                    ", "overlaps", "=", "result", "[", "tracker_name", "]", "[", "'overlaps'", "]", "[", "video", "]", "\n", "accuracy", "=", "np", ".", "nanmean", "(", "overlaps", ")", "\n", "failures", "=", "result", "[", "tracker_name", "]", "[", "'failures'", "]", "[", "video", "]", "\n", "lost_number", "=", "np", ".", "mean", "(", "failures", ")", "\n", "\n", "accuracy_str", "=", "\"{:^8.3f}\"", ".", "format", "(", "accuracy", ")", "\n", "if", "accuracy", "<", "helight_threshold", ":", "\n", "                        ", "row", "+=", "f'{Fore.RED}{accuracy_str}{Style.RESET_ALL}|'", "\n", "", "else", ":", "\n", "                        ", "row", "+=", "accuracy_str", "+", "'|'", "\n", "", "lost_num_str", "=", "\"{:^8.3f}\"", ".", "format", "(", "lost_number", ")", "\n", "if", "lost_number", ">", "0", ":", "\n", "                        ", "row", "+=", "f'{Fore.RED}{lost_num_str}{Style.RESET_ALL}|'", "\n", "", "else", ":", "\n", "                        ", "row", "+=", "lost_num_str", "+", "'|'", "\n", "", "", "print", "(", "row", ")", "\n", "", "print", "(", "'-'", "*", "len", "(", "header1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.evaluation.ar_benchmark.AccuracyRobustnessBenchmark._calculate_accuracy_robustness": [[118, 142], ["range", "len", "video.load_tracker", "overlaps_group.append", "num_failures_group.append", "warnings.catch_warnings", "warnings.simplefilter", "numpy.nanmean().tolist", "utils.calculate_failures", "utils.calculate_accuracy", "numpy.nanmean"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.datasets.video.Video.load_tracker", "home.repos.pwc.inspect_result.vision4robotics_udat.utils.statistics.calculate_failures", "home.repos.pwc.inspect_result.vision4robotics_udat.utils.statistics.calculate_accuracy"], ["", "", "def", "_calculate_accuracy_robustness", "(", "self", ",", "tracker_name", ")", ":", "\n", "        ", "overlaps", "=", "{", "}", "\n", "failures", "=", "{", "}", "\n", "all_length", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "dataset", ")", ")", ":", "\n", "            ", "video", "=", "self", ".", "dataset", "[", "i", "]", "\n", "gt_traj", "=", "video", ".", "gt_traj", "\n", "if", "tracker_name", "not", "in", "video", ".", "pred_trajs", ":", "\n", "                ", "tracker_trajs", "=", "video", ".", "load_tracker", "(", "self", ".", "dataset", ".", "tracker_path", ",", "tracker_name", ",", "False", ")", "\n", "", "else", ":", "\n", "                ", "tracker_trajs", "=", "video", ".", "pred_trajs", "[", "tracker_name", "]", "\n", "", "overlaps_group", "=", "[", "]", "\n", "num_failures_group", "=", "[", "]", "\n", "for", "tracker_traj", "in", "tracker_trajs", ":", "\n", "                ", "num_failures", "=", "calculate_failures", "(", "tracker_traj", ")", "[", "0", "]", "\n", "overlaps_", "=", "calculate_accuracy", "(", "tracker_traj", ",", "gt_traj", ",", "\n", "burnin", "=", "10", ",", "bound", "=", "(", "video", ".", "width", ",", "video", ".", "height", ")", ")", "[", "1", "]", "\n", "overlaps_group", ".", "append", "(", "overlaps_", ")", "\n", "num_failures_group", ".", "append", "(", "num_failures", ")", "\n", "", "with", "warnings", ".", "catch_warnings", "(", ")", ":", "\n", "                ", "warnings", ".", "simplefilter", "(", "\"ignore\"", ",", "category", "=", "RuntimeWarning", ")", "\n", "overlaps", "[", "video", ".", "name", "]", "=", "np", ".", "nanmean", "(", "overlaps_group", ",", "axis", "=", "0", ")", ".", "tolist", "(", ")", "\n", "failures", "[", "video", ".", "name", "]", "=", "num_failures_group", "\n", "", "", "return", "overlaps", ",", "failures", "\n", "", "", ""]], "home.repos.pwc.inspect_result.vision4robotics_udat.evaluation.eao_benchmark.EAOBenchmark.__init__": [[14, 31], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "dataset", ",", "skipping", "=", "5", ",", "tags", "=", "[", "'all'", "]", ")", ":", "\n", "        ", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "skipping", "=", "skipping", "\n", "self", ".", "tags", "=", "tags", "\n", "# NOTE we not use gmm to generate low, high, peak value", "\n", "if", "dataset", ".", "name", "==", "'VOT2019'", ":", "\n", "            ", "self", ".", "low", "=", "46", "\n", "self", ".", "high", "=", "291", "\n", "self", ".", "peak", "=", "128", "\n", "", "elif", "dataset", ".", "name", "==", "'VOT2018'", "or", "dataset", ".", "name", "==", "'VOT2017'", ":", "\n", "            ", "self", ".", "low", "=", "100", "\n", "self", ".", "high", "=", "356", "\n", "self", ".", "peak", "=", "160", "\n", "", "elif", "dataset", ".", "name", "==", "'VOT2016'", ":", "\n", "            ", "self", ".", "low", "=", "108", "\n", "self", ".", "high", "=", "371", "\n", "self", ".", "peak", "=", "168", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.evaluation.eao_benchmark.EAOBenchmark.eval": [[32, 50], ["isinstance", "eao_benchmark.EAOBenchmark._calculate_eao"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.evaluation.eao_benchmark.EAOBenchmark._calculate_eao"], ["", "", "def", "eval", "(", "self", ",", "eval_trackers", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            eval_tags: list of tag\n            eval_trackers: list of tracker name\n        Returns:\n            eao: dict of results\n        \"\"\"", "\n", "if", "eval_trackers", "is", "None", ":", "\n", "            ", "eval_trackers", "=", "self", ".", "dataset", ".", "tracker_names", "\n", "", "if", "isinstance", "(", "eval_trackers", ",", "str", ")", ":", "\n", "            ", "eval_trackers", "=", "[", "eval_trackers", "]", "\n", "\n", "", "ret", "=", "{", "}", "\n", "for", "tracker_name", "in", "eval_trackers", ":", "\n", "            ", "eao", "=", "self", ".", "_calculate_eao", "(", "tracker_name", ",", "self", ".", "tags", ")", "\n", "ret", "[", "tracker_name", "]", "=", "eao", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.evaluation.eao_benchmark.EAOBenchmark.show_result": [[51, 88], ["len", "max", "print", "print", "print", "print", "print", "print", "print", "print", "len", "sorted", "print", "len", "sorted", "print", "max", "result.items", "formatter.format", "result.items", "formatter.format", "len", "str", "result.keys"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.utils.logger.LogFormatter.format", "home.repos.pwc.inspect_result.vision4robotics_udat.utils.logger.LogFormatter.format"], ["", "def", "show_result", "(", "self", ",", "result", ",", "topk", "=", "10", ")", ":", "\n", "        ", "\"\"\"pretty print result\n        Args:\n            result: returned dict from function eval\n        \"\"\"", "\n", "if", "len", "(", "self", ".", "tags", ")", "==", "1", ":", "\n", "            ", "tracker_name_len", "=", "max", "(", "(", "max", "(", "[", "len", "(", "x", ")", "for", "x", "in", "result", ".", "keys", "(", ")", "]", ")", "+", "2", ")", ",", "12", ")", "\n", "header", "=", "(", "\"|{:^\"", "+", "str", "(", "tracker_name_len", ")", "+", "\"}|{:^10}|\"", ")", ".", "format", "(", "'Tracker Name'", ",", "'EAO'", ")", "\n", "bar", "=", "'-'", "*", "len", "(", "header", ")", "\n", "formatter", "=", "\"|{:^20}|{:^10.3f}|\"", "\n", "print", "(", "bar", ")", "\n", "print", "(", "header", ")", "\n", "print", "(", "bar", ")", "\n", "tracker_eao", "=", "sorted", "(", "result", ".", "items", "(", ")", ",", "\n", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", "[", "'all'", "]", ",", "\n", "reverse", "=", "True", ")", "[", ":", "topk", "]", "\n", "for", "tracker_name", ",", "eao", "in", "tracker_eao", ":", "\n", "# for tracker_name, ret in result.items():", "\n", "                ", "print", "(", "formatter", ".", "format", "(", "tracker_name", ",", "eao", ")", ")", "\n", "", "print", "(", "bar", ")", "\n", "", "else", ":", "\n", "            ", "header", "=", "\"|{:^20}|\"", ".", "format", "(", "'Tracker Name'", ")", "\n", "header", "+=", "\"{:^7}|{:^15}|{:^14}|{:^15}|{:^13}|{:^11}|{:^7}|\"", ".", "format", "(", "*", "self", ".", "tags", ")", "\n", "bar", "=", "'-'", "*", "len", "(", "header", ")", "\n", "formatter", "=", "\"{:^7.3f}|{:^15.3f}|{:^14.3f}|{:^15.3f}|{:^13.3f}|{:^11.3f}|{:^7.3f}|\"", "\n", "print", "(", "bar", ")", "\n", "print", "(", "header", ")", "\n", "print", "(", "bar", ")", "\n", "sorted_tacker", "=", "sorted", "(", "result", ".", "items", "(", ")", ",", "\n", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", "[", "'all'", "]", ",", "\n", "reverse", "=", "True", ")", "[", ":", "topk", "]", "\n", "sorted_tacker", "=", "[", "x", "[", "0", "]", "for", "x", "in", "sorted_tacker", "]", "\n", "for", "tracker_name", "in", "sorted_tacker", ":", "\n", "# for tracker_name, ret in result.items():", "\n", "                ", "print", "(", "\"|{:^20}|\"", ".", "format", "(", "tracker_name", ")", "+", "formatter", ".", "format", "(", "\n", "*", "[", "result", "[", "tracker_name", "]", "[", "x", "]", "for", "x", "in", "self", ".", "tags", "]", ")", ")", "\n", "", "print", "(", "bar", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.evaluation.eao_benchmark.EAOBenchmark._calculate_eao": [[89, 164], ["sum", "max", "len", "print", "zip", "utils.calculate_expected_overlap", "numpy.zeros", "numpy.logical_not", "video.load_tracker", "gt_traj_length.append", "video_names.append", "all_overlaps.append", "all_failures.append", "len", "len", "numpy.ones", "numpy.ones", "len", "numpy.isnan", "numpy.sum", "numpy.sum", "len", "utils.calculate_accuracy", "utils.calculate_failures", "len", "len", "points.insert", "range", "min", "eao_benchmark.EAOBenchmark.dataset[].select_tag", "len", "len", "sum", "numpy.array", "numpy.array", "eao_benchmark.EAOBenchmark.dataset[].select_tag", "eao_benchmark.EAOBenchmark.dataset[].select_tag", "len", "len", "numpy.isnan", "len", "sum", "len", "sum", "len"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.utils.statistics.calculate_expected_overlap", "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.video.Video.load_tracker", "home.repos.pwc.inspect_result.vision4robotics_udat.utils.statistics.calculate_accuracy", "home.repos.pwc.inspect_result.vision4robotics_udat.utils.statistics.calculate_failures"], ["", "", "def", "_calculate_eao", "(", "self", ",", "tracker_name", ",", "tags", ")", ":", "\n", "        ", "all_overlaps", "=", "[", "]", "\n", "all_failures", "=", "[", "]", "\n", "video_names", "=", "[", "]", "\n", "gt_traj_length", "=", "[", "]", "\n", "# for i in range(len(self.dataset)):", "\n", "for", "video", "in", "self", ".", "dataset", ":", "\n", "# video = self.dataset[i]", "\n", "            ", "gt_traj", "=", "video", ".", "gt_traj", "\n", "if", "tracker_name", "not", "in", "video", ".", "pred_trajs", ":", "\n", "                ", "tracker_trajs", "=", "video", ".", "load_tracker", "(", "self", ".", "dataset", ".", "tracker_path", ",", "tracker_name", ",", "False", ")", "\n", "", "else", ":", "\n", "                ", "tracker_trajs", "=", "video", ".", "pred_trajs", "[", "tracker_name", "]", "\n", "", "for", "tracker_traj", "in", "tracker_trajs", ":", "\n", "                ", "gt_traj_length", ".", "append", "(", "len", "(", "gt_traj", ")", ")", "\n", "video_names", ".", "append", "(", "video", ".", "name", ")", "\n", "overlaps", "=", "calculate_accuracy", "(", "tracker_traj", ",", "gt_traj", ",", "bound", "=", "(", "video", ".", "width", "-", "1", ",", "video", ".", "height", "-", "1", ")", ")", "[", "1", "]", "\n", "failures", "=", "calculate_failures", "(", "tracker_traj", ")", "[", "1", "]", "\n", "all_overlaps", ".", "append", "(", "overlaps", ")", "\n", "all_failures", ".", "append", "(", "failures", ")", "\n", "", "", "fragment_num", "=", "sum", "(", "[", "len", "(", "x", ")", "+", "1", "for", "x", "in", "all_failures", "]", ")", "\n", "max_len", "=", "max", "(", "[", "len", "(", "x", ")", "for", "x", "in", "all_overlaps", "]", ")", "\n", "if", "len", "(", "tracker_trajs", ")", "==", "0", ":", "\n", "            ", "print", "(", "'Warning: some seqs in {}.{} not found'", ".", "format", "(", "tracker_name", ",", "tags", ")", ")", "\n", "", "seq_weight", "=", "1", "/", "(", "len", "(", "tracker_trajs", ")", "+", "1e-10", ")", "# division by zero", "\n", "\n", "eao", "=", "{", "}", "\n", "for", "tag", "in", "tags", ":", "\n", "# prepare segments", "\n", "            ", "fweights", "=", "np", ".", "ones", "(", "(", "fragment_num", ")", ")", "*", "np", ".", "nan", "\n", "fragments", "=", "np", ".", "ones", "(", "(", "fragment_num", ",", "max_len", ")", ")", "*", "np", ".", "nan", "\n", "seg_counter", "=", "0", "\n", "for", "name", ",", "traj_len", ",", "failures", ",", "overlaps", "in", "zip", "(", "video_names", ",", "gt_traj_length", ",", "\n", "all_failures", ",", "all_overlaps", ")", ":", "\n", "                ", "if", "len", "(", "failures", ")", ">", "0", ":", "\n", "                    ", "points", "=", "[", "x", "+", "self", ".", "skipping", "for", "x", "in", "failures", "if", "\n", "x", "+", "self", ".", "skipping", "<=", "len", "(", "overlaps", ")", "]", "\n", "points", ".", "insert", "(", "0", ",", "0", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "points", ")", ")", ":", "\n", "                        ", "if", "i", "!=", "len", "(", "points", ")", "-", "1", ":", "\n", "                            ", "fragment", "=", "np", ".", "array", "(", "overlaps", "[", "points", "[", "i", "]", ":", "points", "[", "i", "+", "1", "]", "+", "1", "]", ")", "\n", "fragments", "[", "seg_counter", ",", ":", "]", "=", "0", "\n", "", "else", ":", "\n", "                            ", "fragment", "=", "np", ".", "array", "(", "overlaps", "[", "points", "[", "i", "]", ":", "]", ")", "\n", "", "fragment", "[", "np", ".", "isnan", "(", "fragment", ")", "]", "=", "0", "\n", "fragments", "[", "seg_counter", ",", ":", "len", "(", "fragment", ")", "]", "=", "fragment", "\n", "if", "i", "!=", "len", "(", "points", ")", "-", "1", ":", "\n", "# tag_value = self.dataset[name].tags[tag][points[i]:points[i+1]+1]", "\n", "                            ", "tag_value", "=", "self", ".", "dataset", "[", "name", "]", ".", "select_tag", "(", "tag", ",", "points", "[", "i", "]", ",", "points", "[", "i", "+", "1", "]", "+", "1", ")", "\n", "w", "=", "sum", "(", "tag_value", ")", "/", "(", "points", "[", "i", "+", "1", "]", "-", "points", "[", "i", "]", "+", "1", ")", "\n", "fweights", "[", "seg_counter", "]", "=", "seq_weight", "*", "w", "\n", "", "else", ":", "\n", "# tag_value = self.dataset[name].tags[tag][points[i]:len(overlaps)]", "\n", "                            ", "tag_value", "=", "self", ".", "dataset", "[", "name", "]", ".", "select_tag", "(", "tag", ",", "points", "[", "i", "]", ",", "len", "(", "overlaps", ")", ")", "\n", "w", "=", "sum", "(", "tag_value", ")", "/", "(", "traj_len", "-", "points", "[", "i", "]", "+", "1e-16", ")", "\n", "fweights", "[", "seg_counter", "]", "=", "seq_weight", "*", "w", "# (len(fragment) / (traj_len-points[i]))", "\n", "", "seg_counter", "+=", "1", "\n", "", "", "else", ":", "\n", "# no failure", "\n", "                    ", "max_idx", "=", "min", "(", "len", "(", "overlaps", ")", ",", "max_len", ")", "\n", "fragments", "[", "seg_counter", ",", ":", "max_idx", "]", "=", "overlaps", "[", ":", "max_idx", "]", "\n", "# tag_value = self.dataset[name].tags[tag][:max_idx]", "\n", "tag_value", "=", "self", ".", "dataset", "[", "name", "]", ".", "select_tag", "(", "tag", ",", "0", ",", "max_idx", ")", "\n", "w", "=", "sum", "(", "tag_value", ")", "/", "max_idx", "\n", "fweights", "[", "seg_counter", "]", "=", "seq_weight", "*", "w", "\n", "seg_counter", "+=", "1", "\n", "\n", "", "", "expected_overlaps", "=", "calculate_expected_overlap", "(", "fragments", ",", "fweights", ")", "\n", "# caculate eao", "\n", "weight", "=", "np", ".", "zeros", "(", "(", "len", "(", "expected_overlaps", ")", ")", ")", "\n", "weight", "[", "self", ".", "low", "-", "1", ":", "self", ".", "high", "-", "1", "+", "1", "]", "=", "1", "\n", "is_valid", "=", "np", ".", "logical_not", "(", "np", ".", "isnan", "(", "expected_overlaps", ")", ")", "\n", "eao_", "=", "np", ".", "sum", "(", "expected_overlaps", "[", "is_valid", "]", "*", "weight", "[", "is_valid", "]", ")", "/", "np", ".", "sum", "(", "weight", "[", "is_valid", "]", ")", "\n", "eao", "[", "tag", "]", "=", "eao_", "\n", "", "return", "eao", "\n", "", "", ""]], "home.repos.pwc.inspect_result.vision4robotics_udat.evaluation.f1_benchmark.F1Benchmark.__init__": [[11, 17], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            result_path:\n        \"\"\"", "\n", "self", ".", "dataset", "=", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.evaluation.f1_benchmark.F1Benchmark.eval": [[18, 39], ["isinstance", "f1_benchmark.F1Benchmark._cal_precision_reall"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.evaluation.f1_benchmark.F1Benchmark._cal_precision_reall"], ["", "def", "eval", "(", "self", ",", "eval_trackers", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            eval_tags: list of tag\n            eval_trackers: list of tracker name\n        Returns:\n            eao: dict of results\n        \"\"\"", "\n", "if", "eval_trackers", "is", "None", ":", "\n", "            ", "eval_trackers", "=", "self", ".", "dataset", ".", "tracker_names", "\n", "", "if", "isinstance", "(", "eval_trackers", ",", "str", ")", ":", "\n", "            ", "eval_trackers", "=", "[", "eval_trackers", "]", "\n", "\n", "", "ret", "=", "{", "}", "\n", "for", "tracker_name", "in", "eval_trackers", ":", "\n", "            ", "precision", ",", "recall", ",", "f1", "=", "self", ".", "_cal_precision_reall", "(", "tracker_name", ")", "\n", "ret", "[", "tracker_name", "]", "=", "{", "\"precision\"", ":", "precision", ",", "\n", "\"recall\"", ":", "recall", ",", "\n", "\"f1\"", ":", "f1", "\n", "}", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.evaluation.f1_benchmark.F1Benchmark._cal_precision_reall": [[40, 69], ["numpy.array", "range", "utils.determine_thresholds", "len", "sum", "utils.calculate_f1", "video.load_tracker", "utils.calculate_accuracy", "video.load_tracker", "len"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.utils.misc.determine_thresholds", "home.repos.pwc.inspect_result.vision4robotics_udat.utils.statistics.calculate_f1", "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.video.Video.load_tracker", "home.repos.pwc.inspect_result.vision4robotics_udat.utils.statistics.calculate_accuracy", "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.video.Video.load_tracker"], ["", "def", "_cal_precision_reall", "(", "self", ",", "tracker_name", ")", ":", "\n", "        ", "score", "=", "[", "]", "\n", "# for i in range(len(self.dataset)):", "\n", "#     video = self.dataset[i]", "\n", "for", "video", "in", "self", ".", "dataset", ":", "\n", "            ", "if", "tracker_name", "not", "in", "video", ".", "confidence", ":", "\n", "                ", "score", "+=", "video", ".", "load_tracker", "(", "self", ".", "dataset", ".", "tracker_path", ",", "tracker_name", ",", "False", ")", "[", "1", "]", "\n", "", "else", ":", "\n", "                ", "score", "+=", "video", ".", "confidence", "[", "tracker_name", "]", "\n", "", "", "score", "=", "np", ".", "array", "(", "score", ")", "\n", "thresholds", "=", "determine_thresholds", "(", "score", ")", "[", ":", ":", "-", "1", "]", "\n", "\n", "precision", "=", "{", "}", "\n", "recall", "=", "{", "}", "\n", "f1", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "dataset", ")", ")", ":", "\n", "            ", "video", "=", "self", ".", "dataset", "[", "i", "]", "\n", "gt_traj", "=", "video", ".", "gt_traj", "\n", "N", "=", "sum", "(", "[", "1", "for", "x", "in", "gt_traj", "if", "len", "(", "x", ")", ">", "1", "]", ")", "\n", "if", "tracker_name", "not", "in", "video", ".", "pred_trajs", ":", "\n", "                ", "tracker_traj", ",", "score", "=", "video", ".", "load_tracker", "(", "self", ".", "dataset", ".", "tracker_path", ",", "tracker_name", ",", "False", ")", "\n", "", "else", ":", "\n", "                ", "tracker_traj", "=", "video", ".", "pred_trajs", "[", "tracker_name", "]", "\n", "score", "=", "video", ".", "confidence", "[", "tracker_name", "]", "\n", "", "overlaps", "=", "calculate_accuracy", "(", "tracker_traj", ",", "gt_traj", ",", "bound", "=", "(", "video", ".", "width", ",", "video", ".", "height", ")", ")", "[", "1", "]", "\n", "f1", "[", "video", ".", "name", "]", ",", "precision", "[", "video", ".", "name", "]", ",", "recall", "[", "video", ".", "name", "]", "=", "calculate_f1", "(", "overlaps", ",", "score", ",", "(", "video", ".", "width", ",", "video", ".", "height", ")", ",", "thresholds", ",", "N", ")", "\n", "", "return", "precision", ",", "recall", ",", "f1", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.evaluation.f1_benchmark.F1Benchmark.show_result": [[70, 148], ["result.items", "max", "header.format.format.format", "print", "print", "print", "print", "numpy.mean", "numpy.mean", "numpy.argmax", "sorted", "len", "print", "print", "result.keys", "print", "print", "print", "print", "print", "list", "print", "list", "list", "sorted_tracker.items", "max", "str", "str", "formatter.format", "len", "[].keys", "result.keys", "print", "ret[].values", "ret[].values", "len", "len", "len", "numpy.argmax", "len", "len", "result.keys"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.utils.logger.LogFormatter.format", "home.repos.pwc.inspect_result.vision4robotics_udat.utils.logger.LogFormatter.format"], ["", "def", "show_result", "(", "self", ",", "result", ",", "show_video_level", "=", "False", ",", "helight_threshold", "=", "0.5", ")", ":", "\n", "        ", "\"\"\"pretty print result\n        Args:\n            result: returned dict from function eval\n        \"\"\"", "\n", "# sort tracker according to f1", "\n", "sorted_tracker", "=", "{", "}", "\n", "for", "tracker_name", ",", "ret", "in", "result", ".", "items", "(", ")", ":", "\n", "            ", "precision", "=", "np", ".", "mean", "(", "list", "(", "ret", "[", "'precision'", "]", ".", "values", "(", ")", ")", ",", "axis", "=", "0", ")", "\n", "recall", "=", "np", ".", "mean", "(", "list", "(", "ret", "[", "'recall'", "]", ".", "values", "(", ")", ")", ",", "axis", "=", "0", ")", "\n", "f1", "=", "2", "*", "precision", "*", "recall", "/", "(", "precision", "+", "recall", ")", "\n", "max_idx", "=", "np", ".", "argmax", "(", "f1", ")", "\n", "sorted_tracker", "[", "tracker_name", "]", "=", "(", "precision", "[", "max_idx", "]", ",", "recall", "[", "max_idx", "]", ",", "\n", "f1", "[", "max_idx", "]", ")", "\n", "", "sorted_tracker_", "=", "sorted", "(", "sorted_tracker", ".", "items", "(", ")", ",", "\n", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", "[", "2", "]", ",", "\n", "reverse", "=", "True", ")", "[", ":", "20", "]", "\n", "tracker_names", "=", "[", "x", "[", "0", "]", "for", "x", "in", "sorted_tracker_", "]", "\n", "\n", "tracker_name_len", "=", "max", "(", "(", "max", "(", "[", "len", "(", "x", ")", "for", "x", "in", "result", ".", "keys", "(", ")", "]", ")", "+", "2", ")", ",", "12", ")", "\n", "header", "=", "\"|{:^\"", "+", "str", "(", "tracker_name_len", ")", "+", "\"}|{:^11}|{:^8}|{:^7}|\"", "\n", "header", "=", "header", ".", "format", "(", "'Tracker Name'", ",", "\n", "'Precision'", ",", "'Recall'", ",", "'F1'", ")", "\n", "bar", "=", "'-'", "*", "len", "(", "header", ")", "\n", "formatter", "=", "\"|{:^\"", "+", "str", "(", "tracker_name_len", ")", "+", "\"}|{:^11.3f}|{:^8.3f}|{:^7.3f}|\"", "\n", "print", "(", "bar", ")", "\n", "print", "(", "header", ")", "\n", "print", "(", "bar", ")", "\n", "# for tracker_name, ret in result.items():", "\n", "#     precision = np.mean(list(ret['precision'].values()), axis=0)", "\n", "#     recall = np.mean(list(ret['recall'].values()), axis=0)", "\n", "#     f1 = 2 * precision * recall / (precision + recall)", "\n", "#     max_idx = np.argmax(f1)", "\n", "for", "tracker_name", "in", "tracker_names", ":", "\n", "            ", "precision", "=", "sorted_tracker", "[", "tracker_name", "]", "[", "0", "]", "\n", "recall", "=", "sorted_tracker", "[", "tracker_name", "]", "[", "1", "]", "\n", "f1", "=", "sorted_tracker", "[", "tracker_name", "]", "[", "2", "]", "\n", "print", "(", "formatter", ".", "format", "(", "tracker_name", ",", "precision", ",", "recall", ",", "f1", ")", ")", "\n", "", "print", "(", "bar", ")", "\n", "\n", "if", "show_video_level", "and", "len", "(", "result", ")", "<", "10", ":", "\n", "            ", "print", "(", "'\\n\\n'", ")", "\n", "header1", "=", "\"|{:^14}|\"", ".", "format", "(", "\"Tracker name\"", ")", "\n", "header2", "=", "\"|{:^14}|\"", ".", "format", "(", "\"Video name\"", ")", "\n", "for", "tracker_name", "in", "result", ".", "keys", "(", ")", ":", "\n", "# col_len = max(20, len(tracker_name))", "\n", "                ", "header1", "+=", "(", "\"{:^28}|\"", ")", ".", "format", "(", "tracker_name", ")", "\n", "header2", "+=", "\"{:^11}|{:^8}|{:^7}|\"", ".", "format", "(", "\"Precision\"", ",", "\"Recall\"", ",", "\"F1\"", ")", "\n", "", "print", "(", "'-'", "*", "len", "(", "header1", ")", ")", "\n", "print", "(", "header1", ")", "\n", "print", "(", "'-'", "*", "len", "(", "header1", ")", ")", "\n", "print", "(", "header2", ")", "\n", "print", "(", "'-'", "*", "len", "(", "header1", ")", ")", "\n", "videos", "=", "list", "(", "result", "[", "tracker_name", "]", "[", "'precision'", "]", ".", "keys", "(", ")", ")", "\n", "for", "video", "in", "videos", ":", "\n", "                ", "row", "=", "\"|{:^14}|\"", ".", "format", "(", "video", ")", "\n", "for", "tracker_name", "in", "result", ".", "keys", "(", ")", ":", "\n", "                    ", "precision", "=", "result", "[", "tracker_name", "]", "[", "'precision'", "]", "[", "video", "]", "\n", "recall", "=", "result", "[", "tracker_name", "]", "[", "'recall'", "]", "[", "video", "]", "\n", "f1", "=", "result", "[", "tracker_name", "]", "[", "'f1'", "]", "[", "video", "]", "\n", "max_idx", "=", "np", ".", "argmax", "(", "f1", ")", "\n", "precision_str", "=", "\"{:^11.3f}\"", ".", "format", "(", "precision", "[", "max_idx", "]", ")", "\n", "if", "precision", "[", "max_idx", "]", "<", "helight_threshold", ":", "\n", "                        ", "row", "+=", "f'{Fore.RED}{precision_str}{Style.RESET_ALL}|'", "\n", "", "else", ":", "\n", "                        ", "row", "+=", "precision_str", "+", "'|'", "\n", "", "recall_str", "=", "\"{:^8.3f}\"", ".", "format", "(", "recall", "[", "max_idx", "]", ")", "\n", "if", "recall", "[", "max_idx", "]", "<", "helight_threshold", ":", "\n", "                        ", "row", "+=", "f'{Fore.RED}{recall_str}{Style.RESET_ALL}|'", "\n", "", "else", ":", "\n", "                        ", "row", "+=", "recall_str", "+", "'|'", "\n", "", "f1_str", "=", "\"{:^7.3f}\"", ".", "format", "(", "f1", "[", "max_idx", "]", ")", "\n", "if", "f1", "[", "max_idx", "]", "<", "helight_threshold", ":", "\n", "                        ", "row", "+=", "f'{Fore.RED}{f1_str}{Style.RESET_ALL}|'", "\n", "", "else", ":", "\n", "                        ", "row", "+=", "f1_str", "+", "'|'", "\n", "", "", "print", "(", "row", ")", "\n", "", "print", "(", "'-'", "*", "len", "(", "header1", ")", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.vision4robotics_udat.models.trans_discriminator.DropPath.__init__": [[29, 32], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamban_tracker.SiamBANTracker.__init__"], ["def", "__init__", "(", "self", ",", "drop_prob", "=", "None", ")", ":", "\n", "        ", "super", "(", "DropPath", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "drop_prob", "=", "drop_prob", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.models.trans_discriminator.DropPath.forward": [[33, 35], ["trans_discriminator.drop_path"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.models.trans_discriminator.drop_path"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "drop_path", "(", "x", ",", "self", ".", "drop_prob", ",", "self", ".", "training", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.models.trans_discriminator.matmul.__init__": [[93, 95], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamban_tracker.SiamBANTracker.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.models.trans_discriminator.matmul.forward": [[96, 99], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x1", ",", "x2", ")", ":", "\n", "        ", "x", "=", "x1", "@", "x2", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.models.trans_discriminator.PixelNorm.__init__": [[106, 108], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamban_tracker.SiamBANTracker.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.models.trans_discriminator.PixelNorm.forward": [[109, 111], ["torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "input", "*", "torch", ".", "rsqrt", "(", "torch", ".", "mean", "(", "input", "**", "2", ",", "dim", "=", "2", ",", "keepdim", "=", "True", ")", "+", "1e-8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.models.trans_discriminator.CustomAct.__init__": [[124, 130], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamban_tracker.SiamBANTracker.__init__"], ["    ", "def", "__init__", "(", "self", ",", "act_layer", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "act_layer", "==", "\"gelu\"", ":", "\n", "            ", "self", ".", "act_layer", "=", "gelu", "\n", "", "elif", "act_layer", "==", "\"leakyrelu\"", ":", "\n", "            ", "self", ".", "act_layer", "=", "leakyrelu", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.models.trans_discriminator.CustomAct.forward": [[131, 133], ["trans_discriminator.CustomAct.act_layer"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "act_layer", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.models.trans_discriminator.Mlp.__init__": [[135, 143], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "trans_discriminator.CustomAct", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamban_tracker.SiamBANTracker.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "hidden_features", "=", "None", ",", "out_features", "=", "None", ",", "act_layer", "=", "gelu", ",", "drop", "=", "0.", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "out_features", "=", "out_features", "or", "in_features", "\n", "hidden_features", "=", "hidden_features", "or", "in_features", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "in_features", ",", "hidden_features", ")", "\n", "self", ".", "act", "=", "CustomAct", "(", "act_layer", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "hidden_features", ",", "out_features", ")", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "drop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.models.trans_discriminator.Mlp.forward": [[144, 151], ["trans_discriminator.Mlp.fc1", "trans_discriminator.Mlp.act", "trans_discriminator.Mlp.drop", "trans_discriminator.Mlp.fc2", "trans_discriminator.Mlp.drop"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "x", "=", "self", ".", "act", "(", "x", ")", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.models.trans_discriminator.Attention.__init__": [[154, 167], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "trans_discriminator.matmul", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamban_tracker.SiamBANTracker.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "num_heads", "=", "8", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "attn_drop", "=", "0.", ",", "proj_drop", "=", "0.", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "head_dim", "=", "dim", "//", "num_heads", "\n", "# NOTE scale factor was wrong in my original version, can set manually to be compat with prev weights", "\n", "self", ".", "scale", "=", "qk_scale", "or", "head_dim", "**", "-", "0.5", "\n", "\n", "self", ".", "qkv", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", "*", "3", ",", "bias", "=", "qkv_bias", ")", "\n", "self", ".", "attn_drop", "=", "nn", ".", "Dropout", "(", "attn_drop", ")", "\n", "self", ".", "proj", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", ")", "\n", "self", ".", "proj_drop", "=", "nn", ".", "Dropout", "(", "proj_drop", ")", "\n", "self", ".", "mat", "=", "matmul", "(", ")", "\n", "self", ".", "noise_strength_1", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "[", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.models.trans_discriminator.Attention.forward": [[168, 182], ["trans_discriminator.Attention.qkv().reshape().permute", "trans_discriminator.Attention.softmax", "trans_discriminator.Attention.attn_drop", "trans_discriminator.Attention.mat().transpose().reshape", "trans_discriminator.Attention.proj", "trans_discriminator.Attention.proj_drop", "trans_discriminator.Attention.mat", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "trans_discriminator.Attention.qkv().reshape", "k.transpose", "trans_discriminator.Attention.mat().transpose", "trans_discriminator.Attention.size", "trans_discriminator.Attention.size", "trans_discriminator.Attention.qkv", "trans_discriminator.Attention.mat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "B", ",", "N", ",", "C", "=", "x", ".", "shape", "\n", "x", "=", "x", "+", "torch", ".", "randn", "(", "[", "x", ".", "size", "(", "0", ")", ",", "x", ".", "size", "(", "1", ")", ",", "1", "]", ",", "device", "=", "x", ".", "device", ")", "*", "self", ".", "noise_strength_1", "\n", "qkv", "=", "self", ".", "qkv", "(", "x", ")", ".", "reshape", "(", "B", ",", "N", ",", "3", ",", "self", ".", "num_heads", ",", "C", "//", "self", ".", "num_heads", ")", ".", "permute", "(", "2", ",", "0", ",", "3", ",", "1", ",", "4", ")", "\n", "q", ",", "k", ",", "v", "=", "qkv", "[", "0", "]", ",", "qkv", "[", "1", "]", ",", "qkv", "[", "2", "]", "# make torchscript happy (cannot use tensor as tuple)", "\n", "\n", "attn", "=", "(", "self", ".", "mat", "(", "q", ",", "k", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ")", ")", "*", "self", ".", "scale", "\n", "attn", "=", "attn", ".", "softmax", "(", "dim", "=", "-", "1", ")", "\n", "attn", "=", "self", ".", "attn_drop", "(", "attn", ")", "\n", "\n", "x", "=", "self", ".", "mat", "(", "attn", ",", "v", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "reshape", "(", "B", ",", "N", ",", "C", ")", "\n", "x", "=", "self", ".", "proj", "(", "x", ")", "\n", "x", "=", "self", ".", "proj_drop", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.models.trans_discriminator.CustomNorm.__init__": [[184, 195], ["torch.Module.__init__", "torch.LayerNorm", "torch.LayerNorm", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.InstanceNorm1d", "torch.InstanceNorm1d", "trans_discriminator.PixelNorm"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamban_tracker.SiamBANTracker.__init__"], ["    ", "def", "__init__", "(", "self", ",", "norm_layer", ",", "dim", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "norm_type", "=", "norm_layer", "\n", "if", "norm_layer", "==", "\"ln\"", ":", "\n", "            ", "self", ".", "norm", "=", "nn", ".", "LayerNorm", "(", "dim", ")", "\n", "", "elif", "norm_layer", "==", "\"bn\"", ":", "\n", "            ", "self", ".", "norm", "=", "nn", ".", "BatchNorm1d", "(", "dim", ")", "\n", "", "elif", "norm_layer", "==", "\"in\"", ":", "\n", "            ", "self", ".", "norm", "=", "nn", ".", "InstanceNorm1d", "(", "dim", ")", "\n", "", "elif", "norm_layer", "==", "\"pn\"", ":", "\n", "            ", "self", ".", "norm", "=", "PixelNorm", "(", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.models.trans_discriminator.CustomNorm.forward": [[196, 204], ["trans_discriminator.CustomNorm.norm().permute", "trans_discriminator.CustomNorm.norm", "trans_discriminator.CustomNorm.norm", "trans_discriminator.CustomNorm.permute"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "norm_type", "==", "\"bn\"", "or", "self", ".", "norm_type", "==", "\"in\"", ":", "\n", "            ", "x", "=", "self", ".", "norm", "(", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "return", "x", "\n", "", "elif", "self", ".", "norm_type", "==", "\"none\"", ":", "\n", "            ", "return", "x", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "norm", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.models.trans_discriminator.DisBlock.__init__": [[212, 224], ["torch.Module.__init__", "trans_discriminator.CustomNorm", "trans_discriminator.Attention", "trans_discriminator.CustomNorm", "int", "trans_discriminator.Mlp", "trans_discriminator.DropPath", "torch.Identity", "torch.Identity", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamban_tracker.SiamBANTracker.__init__"], ["drop_path", "=", "0.", ",", "act_layer", "=", "leakyrelu", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "norm1", "=", "CustomNorm", "(", "norm_layer", ",", "dim", ")", "\n", "self", ".", "attn", "=", "Attention", "(", "\n", "dim", ",", "num_heads", "=", "num_heads", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "attn_drop", "=", "attn_drop", ",", "proj_drop", "=", "drop", ")", "\n", "# NOTE: drop path for stochastic depth, we shall see if this is better than dropout here", "\n", "self", ".", "drop_path", "=", "DropPath", "(", "drop_path", ")", "if", "drop_path", ">", "0.", "else", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "norm2", "=", "CustomNorm", "(", "norm_layer", ",", "dim", ")", "\n", "mlp_hidden_dim", "=", "int", "(", "dim", "*", "mlp_ratio", ")", "\n", "self", ".", "mlp", "=", "Mlp", "(", "in_features", "=", "dim", ",", "hidden_features", "=", "mlp_hidden_dim", ",", "act_layer", "=", "act_layer", ",", "drop", "=", "drop", ")", "\n", "self", ".", "gain", "=", "np", ".", "sqrt", "(", "0.5", ")", "if", "norm_layer", "==", "\"none\"", "else", "1", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.models.trans_discriminator.DisBlock.forward": [[225, 229], ["trans_discriminator.DisBlock.drop_path", "trans_discriminator.DisBlock.drop_path", "trans_discriminator.DisBlock.attn", "trans_discriminator.DisBlock.mlp", "trans_discriminator.DisBlock.norm1", "trans_discriminator.DisBlock.norm2"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.models.trans_discriminator.drop_path", "home.repos.pwc.inspect_result.vision4robotics_udat.models.trans_discriminator.drop_path"], ["        ", "x", "=", "x", "*", "self", ".", "gain", "+", "self", ".", "drop_path", "(", "self", ".", "attn", "(", "self", ".", "norm1", "(", "x", ")", ")", ")", "*", "self", ".", "gain", "\n", "x", "=", "x", "*", "self", ".", "gain", "+", "self", ".", "drop_path", "(", "self", ".", "mlp", "(", "self", ".", "norm2", "(", "x", ")", ")", ")", "*", "self", ".", "gain", "\n", "return", "x", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.models.trans_discriminator.TransformerDiscriminator.__init__": [[234, 281], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Dropout", "torch.Dropout", "torch.ModuleList", "torch.ModuleList", "trans_discriminator.CustomNorm", "trans_discriminator.trunc_normal_", "trans_discriminator.trunc_normal_", "trans_discriminator.TransformerDiscriminator.apply", "siamban.models.GRL.GradientScalarLayer", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "x.item", "torch.Linear", "torch.Linear", "torch.Identity", "torch.Identity", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "trans_discriminator.DisBlock", "range"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamban_tracker.SiamBANTracker.__init__", "home.repos.pwc.inspect_result.vision4robotics_udat.models.trans_discriminator.trunc_normal_", "home.repos.pwc.inspect_result.vision4robotics_udat.models.trans_discriminator.trunc_normal_"], ["num_heads", "=", "4", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "drop_rate", "=", "0.", ",", "attn_drop_rate", "=", "0.", ",", "\n", "drop_path_rate", "=", "0.", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "num_features", "=", "embed_dim", "=", "self", ".", "embed_dim", "=", "channels", "\n", "\n", "# depth = 7", "\n", "# self.args = args", "\n", "patch_size", "=", "4", "\n", "norm_layer", "=", "'ln'", "\n", "act_layer", "=", "'gelu'", "\n", "mlp_ratio", "=", "4", "\n", "# if hybrid_backbone is not None:", "\n", "#     self.patch_embed = HybridEmbed(", "\n", "#         hybrid_backbone, img_size=img_size, in_chans=in_chans, embed_dim=embed_dim)", "\n", "# else:", "\n", "self", ".", "patch_embed", "=", "nn", ".", "Conv2d", "(", "channels", ",", "embed_dim", ",", "kernel_size", "=", "patch_size", ",", "stride", "=", "patch_size", ",", "padding", "=", "0", ")", "\n", "num_patches", "=", "(", "img_size", "//", "patch_size", ")", "**", "2", "\n", "\n", "self", ".", "cls_token", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "1", ",", "embed_dim", ")", ")", "\n", "self", ".", "pos_embed", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "num_patches", "+", "1", ",", "embed_dim", ")", ")", "\n", "self", ".", "pos_drop", "=", "nn", ".", "Dropout", "(", "p", "=", "drop_rate", ")", "\n", "\n", "dpr", "=", "[", "x", ".", "item", "(", ")", "for", "x", "in", "torch", ".", "linspace", "(", "0", ",", "drop_path_rate", ",", "depth", ")", "]", "# stochastic depth decay rule", "\n", "self", ".", "blocks", "=", "nn", ".", "ModuleList", "(", "[", "\n", "DisBlock", "(", "\n", "dim", "=", "embed_dim", ",", "\n", "num_heads", "=", "num_heads", ",", "\n", "mlp_ratio", "=", "mlp_ratio", ",", "\n", "qkv_bias", "=", "qkv_bias", ",", "\n", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "\n", "attn_drop", "=", "attn_drop_rate", ",", "\n", "drop_path", "=", "dpr", "[", "i", "]", ",", "\n", "act_layer", "=", "act_layer", ",", "\n", "norm_layer", "=", "norm_layer", "\n", ")", "\n", "for", "i", "in", "range", "(", "depth", ")", "]", ")", "\n", "\n", "self", ".", "norm", "=", "CustomNorm", "(", "norm_layer", ",", "embed_dim", ")", "\n", "self", ".", "head", "=", "nn", ".", "Linear", "(", "embed_dim", ",", "num_classes", ")", "if", "num_classes", ">", "0", "else", "nn", ".", "Identity", "(", ")", "\n", "\n", "trunc_normal_", "(", "self", ".", "pos_embed", ",", "std", "=", ".02", ")", "\n", "trunc_normal_", "(", "self", ".", "cls_token", ",", "std", "=", ".02", ")", "\n", "self", ".", "apply", "(", "self", ".", "_init_weights", ")", "\n", "self", ".", "grl_img", "=", "GradientScalarLayer", "(", "-", "0.1", ")", "\n", "\n", "", "def", "_init_weights", "(", "self", ",", "m", ")", ":", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.models.trans_discriminator.TransformerDiscriminator._init_weights": [[282, 294], ["isinstance", "trans_discriminator.trunc_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.models.trans_discriminator.trunc_normal_"], ["        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "trunc_normal_", "(", "m", ".", "weight", ",", "std", "=", ".02", ")", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "#         elif isinstance(m, nn.Conv2d):", "\n", "#             trunc_normal_(m.weight, std=.02)", "\n", "#             if isinstance(m, nn.Conv2d) and m.bias is not None:", "\n", "#                 nn.init.constant_(m.bias, 0)", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "LayerNorm", ")", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1.0", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.models.trans_discriminator.TransformerDiscriminator.forward_features": [[296, 311], ["trans_discriminator.TransformerDiscriminator.patch_embed().flatten().permute", "trans_discriminator.TransformerDiscriminator.cls_token.expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "trans_discriminator.TransformerDiscriminator.pos_drop", "trans_discriminator.TransformerDiscriminator.norm", "blk", "trans_discriminator.TransformerDiscriminator.patch_embed().flatten", "trans_discriminator.TransformerDiscriminator.patch_embed"], "methods", ["None"], ["# if \"None\" not in self.args.diff_aug:", "\n", "#     x = DiffAugment(x, self.args.diff_aug, True)", "\n", "        ", "B", "=", "x", ".", "shape", "[", "0", "]", "\n", "x", "=", "self", ".", "patch_embed", "(", "x", ")", ".", "flatten", "(", "2", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "\n", "cls_tokens", "=", "self", ".", "cls_token", ".", "expand", "(", "B", ",", "-", "1", ",", "-", "1", ")", "# stole cls_tokens impl from Phil Wang, thanks", "\n", "x", "=", "torch", ".", "cat", "(", "(", "cls_tokens", ",", "x", ")", ",", "dim", "=", "1", ")", "\n", "x", "=", "x", "+", "self", ".", "pos_embed", "\n", "x", "=", "self", ".", "pos_drop", "(", "x", ")", "\n", "for", "blk", "in", "self", ".", "blocks", ":", "\n", "            ", "x", "=", "blk", "(", "x", ")", "\n", "\n", "", "x", "=", "self", ".", "norm", "(", "x", ")", "\n", "return", "x", "[", ":", ",", "0", "]", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.models.trans_discriminator.TransformerDiscriminator.forward": [[312, 317], ["trans_discriminator.TransformerDiscriminator.grl_img", "trans_discriminator.TransformerDiscriminator.forward_features", "trans_discriminator.TransformerDiscriminator.head"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.models.trans_discriminator.TransformerDiscriminator.forward_features"], ["        ", "x", "=", "self", ".", "grl_img", "(", "x", ")", "\n", "x", "=", "self", ".", "forward_features", "(", "x", ")", "\n", "x", "=", "self", ".", "head", "(", "x", ")", "\n", "return", "x", "\n", "\n", "", "", "if", "__name__", "==", "'__main__'", ":", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.models.trans_discriminator.drop_path": [[8, 24], ["random_tensor.floor_", "torch.rand", "torch.rand", "x.div"], "function", ["None"], ["def", "drop_path", "(", "x", ",", "drop_prob", ":", "float", "=", "0.", ",", "training", ":", "bool", "=", "False", ")", ":", "\n", "    ", "\"\"\"Drop paths (Stochastic Depth) per sample (when applied in main path of residual blocks).\n    This is the same as the DropConnect impl I created for EfficientNet, etc networks, however,\n    the original name is misleading as 'Drop Connect' is a different form of dropout in a separate paper...\n    See discussion: https://github.com/tensorflow/tpu/issues/494#issuecomment-532968956 ... I've opted for\n    changing the layer and argument names to 'drop path' rather than mix DropConnect as a layer name and use\n    'survival rate' as the argument.\n    \"\"\"", "\n", "if", "drop_prob", "==", "0.", "or", "not", "training", ":", "\n", "        ", "return", "x", "\n", "", "keep_prob", "=", "1", "-", "drop_prob", "\n", "shape", "=", "(", "x", ".", "shape", "[", "0", "]", ",", ")", "+", "(", "1", ",", ")", "*", "(", "x", ".", "ndim", "-", "1", ")", "# work with diff dim tensors, not just 2D ConvNets", "\n", "random_tensor", "=", "keep_prob", "+", "torch", ".", "rand", "(", "shape", ",", "dtype", "=", "x", ".", "dtype", ",", "device", "=", "x", ".", "device", ")", "\n", "random_tensor", ".", "floor_", "(", ")", "# binarize", "\n", "output", "=", "x", ".", "div", "(", "keep_prob", ")", "*", "random_tensor", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.models.trans_discriminator._no_grad_trunc_normal_": [[36, 70], ["warnings.warn", "torch.no_grad", "torch.no_grad", "trans_discriminator._no_grad_trunc_normal_.norm_cdf"], "function", ["None"], ["", "", "def", "_no_grad_trunc_normal_", "(", "tensor", ",", "mean", ",", "std", ",", "a", ",", "b", ")", ":", "\n", "# Cut & paste from PyTorch official master until it's in a few official releases - RW", "\n", "# Method based on https://people.sc.fsu.edu/~jburkardt/presentations/truncated_normal.pdf", "\n", "    ", "def", "norm_cdf", "(", "x", ")", ":", "\n", "# Computes standard normal cumulative distribution function", "\n", "        ", "return", "(", "1.", "+", "math", ".", "erf", "(", "x", "/", "math", ".", "sqrt", "(", "2.", ")", ")", ")", "/", "2.", "\n", "\n", "", "if", "(", "mean", "<", "a", "-", "2", "*", "std", ")", "or", "(", "mean", ">", "b", "+", "2", "*", "std", ")", ":", "\n", "        ", "warnings", ".", "warn", "(", "\"mean is more than 2 std from [a, b] in nn.init.trunc_normal_. \"", "\n", "\"The distribution of values may be incorrect.\"", ",", "\n", "stacklevel", "=", "2", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# Values are generated by using a truncated uniform distribution and", "\n", "# then using the inverse CDF for the normal distribution.", "\n", "# Get upper and lower cdf values", "\n", "        ", "l", "=", "norm_cdf", "(", "(", "a", "-", "mean", ")", "/", "std", ")", "\n", "u", "=", "norm_cdf", "(", "(", "b", "-", "mean", ")", "/", "std", ")", "\n", "\n", "# Uniformly fill tensor with values from [l, u], then translate to", "\n", "# [2l-1, 2u-1].", "\n", "tensor", ".", "uniform_", "(", "2", "*", "l", "-", "1", ",", "2", "*", "u", "-", "1", ")", "\n", "\n", "# Use inverse cdf transform for normal distribution to get truncated", "\n", "# standard normal", "\n", "tensor", ".", "erfinv_", "(", ")", "\n", "\n", "# Transform to proper mean, std", "\n", "tensor", ".", "mul_", "(", "std", "*", "math", ".", "sqrt", "(", "2.", ")", ")", "\n", "tensor", ".", "add_", "(", "mean", ")", "\n", "\n", "# Clamp to ensure it's in the proper range", "\n", "tensor", ".", "clamp_", "(", "min", "=", "a", ",", "max", "=", "b", ")", "\n", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.models.trans_discriminator.trunc_normal_": [[72, 91], ["trans_discriminator._no_grad_trunc_normal_"], "function", ["home.repos.pwc.inspect_result.vision4robotics_udat.models.trans_discriminator._no_grad_trunc_normal_"], ["", "", "def", "trunc_normal_", "(", "tensor", ",", "mean", "=", "0.", ",", "std", "=", "1.", ",", "a", "=", "-", "2.", ",", "b", "=", "2.", ")", ":", "\n", "# type: (Tensor, float, float, float, float) -> Tensor", "\n", "    ", "r\"\"\"Fills the input Tensor with values drawn from a truncated\n    normal distribution. The values are effectively drawn from the\n    normal distribution :math:`\\mathcal{N}(\\text{mean}, \\text{std}^2)`\n    with values outside :math:`[a, b]` redrawn until they are within\n    the bounds. The method used for generating the random values works\n    best when :math:`a \\leq \\text{mean} \\leq b`.\n    Args:\n        tensor: an n-dimensional `torch.Tensor`\n        mean: the mean of the normal distribution\n        std: the standard deviation of the normal distribution\n        a: the minimum cutoff value\n        b: the maximum cutoff value\n    Examples:\n        >>> w = torch.empty(3, 5)\n        >>> nn.init.trunc_normal_(w)\n    \"\"\"", "\n", "return", "_no_grad_trunc_normal_", "(", "tensor", ",", "mean", ",", "std", ",", "a", ",", "b", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.models.trans_discriminator.count_matmul": [[100, 104], ["torch.DoubleTensor", "torch.DoubleTensor", "x[].numel", "x[].size", "int"], "function", ["None"], ["", "", "def", "count_matmul", "(", "m", ",", "x", ",", "y", ")", ":", "\n", "    ", "num_mul", "=", "x", "[", "0", "]", ".", "numel", "(", ")", "*", "x", "[", "1", "]", ".", "size", "(", "-", "1", ")", "\n", "# m.total_ops += torch.DoubleTensor([int(num_mul)])", "\n", "m", ".", "total_ops", "+=", "torch", ".", "DoubleTensor", "(", "[", "int", "(", "0", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.models.trans_discriminator.gelu": [[112, 119], ["torch.erf", "torch.erf", "math.sqrt"], "function", ["None"], ["", "", "def", "gelu", "(", "x", ")", ":", "\n", "    ", "\"\"\" Original Implementation of the gelu activation function in Google Bert repo when initialy created.\n        For information: OpenAI GPT's gelu is slightly different (and gives slightly different results):\n        0.5 * x * (1 + torch.tanh(math.sqrt(2 / math.pi) * (x + 0.044715 * torch.pow(x, 3))))\n        Also see https://arxiv.org/abs/1606.08415\n    \"\"\"", "\n", "return", "x", "*", "0.5", "*", "(", "1.0", "+", "torch", ".", "erf", "(", "x", "/", "math", ".", "sqrt", "(", "2.0", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.models.trans_discriminator.leakyrelu": [[120, 122], ["torch.functional.leaky_relu_"], "function", ["None"], ["", "def", "leakyrelu", "(", "x", ")", ":", "\n", "    ", "return", "nn", ".", "functional", ".", "leaky_relu_", "(", "x", ",", "0.2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.models.trans_discriminator._downsample": [[206, 209], ["torch.AvgPool2d"], "function", ["None"], ["# Downsample (Mean Avg Pooling with 2x2 kernel)", "\n", "    ", "return", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ")", "(", "x", ")", "\n", "\n", "", "class", "DisBlock", "(", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.models.init_weight.init_weights": [[4, 13], ["model.modules", "isinstance", "torch.init.kaiming_normal_", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_"], "function", ["None"], ["def", "init_weights", "(", "model", ")", ":", "\n", "    ", "for", "m", "in", "model", ".", "modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "            ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ".", "data", ",", "\n", "mode", "=", "'fan_out'", ",", "\n", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "            ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.vision4robotics_udat.models.GRL._GradientScalarLayer.forward": [[5, 9], ["input.view_as"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "input", ",", "weight", ")", ":", "\n", "        ", "ctx", ".", "weight", "=", "weight", "\n", "return", "input", ".", "view_as", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.models.GRL._GradientScalarLayer.backward": [[10, 14], ["grad_output.clone"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "grad_input", "=", "grad_output", ".", "clone", "(", ")", "\n", "return", "ctx", ".", "weight", "*", "grad_input", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.models.GRL.GradientScalarLayer.__init__": [[19, 22], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamban_tracker.SiamBANTracker.__init__"], ["    ", "def", "__init__", "(", "self", ",", "weight", ")", ":", "\n", "        ", "super", "(", "GradientScalarLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "weight", "=", "weight", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.models.GRL.GradientScalarLayer.forward": [[23, 25], ["gradient_scalar"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "gradient_scalar", "(", "input", ",", "self", ".", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.models.GRL.GradientScalarLayer.__repr__": [[26, 31], ["str"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "tmpstr", "=", "self", ".", "__class__", ".", "__name__", "+", "\"(\"", "\n", "tmpstr", "+=", "\"weight=\"", "+", "str", "(", "self", ".", "weight", ")", "\n", "tmpstr", "+=", "\")\"", "\n", "return", "tmpstr", "", "", "", ""]], "home.repos.pwc.inspect_result.vision4robotics_udat.models.model_builder.ModelBuilder.__init__": [[19, 39], ["torch.Module.__init__", "siamban.models.backbone.get_backbone", "siamban.models.neck.get_neck", "siamban.models.neck.get_neck", "siamban.models.head.get_ban_head"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamban_tracker.SiamBANTracker.__init__", "home.repos.pwc.inspect_result.vision4robotics_udat.backbone.__init__.get_backbone", "home.repos.pwc.inspect_result.vision4robotics_udat.neck.__init__.get_neck", "home.repos.pwc.inspect_result.vision4robotics_udat.neck.__init__.get_neck", "home.repos.pwc.inspect_result.vision4robotics_udat.head.__init__.get_ban_head"], ["\n", "\n", "class", "ModelBuilder", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "ModelBuilder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# build backbone", "\n", "self", ".", "backbone", "=", "get_backbone", "(", "cfg", ".", "BACKBONE", ".", "TYPE", ",", "\n", "**", "cfg", ".", "BACKBONE", ".", "KWARGS", ")", ".", "cuda", "(", ")", "\n", "\n", "# build adjust layer", "\n", "if", "cfg", ".", "ADJUST", ".", "ADJUST", ":", "\n", "            ", "self", ".", "neck", "=", "get_neck", "(", "cfg", ".", "ADJUST", ".", "TYPE", ",", "\n", "**", "cfg", ".", "ADJUST", ".", "KWARGS", ")", "\n", "\n", "", "if", "cfg", ".", "ALIGN", ".", "ALIGN", ":", "\n", "            ", "self", ".", "align", "=", "get_neck", "(", "cfg", ".", "ALIGN", ".", "TYPE", ",", "\n", "**", "cfg", ".", "ALIGN", ".", "KWARGS", ")", "\n", "\n", "# build car head", "\n", "", "self", ".", "car_head", "=", "CARHead", "(", "cfg", ",", "256", ")", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.models.model_builder.ModelBuilder.template": [[40, 48], ["model_builder.ModelBuilder.backbone", "model_builder.ModelBuilder.neck", "model_builder.ModelBuilder.align", "range", "len"], "methods", ["None"], ["\n", "# build response map", "\n", "self", ".", "xcorr_depthwise", "=", "xcorr_depthwise", "\n", "\n", "# build loss", "\n", "self", ".", "loss_evaluator", "=", "make_siamcar_loss_evaluator", "(", "cfg", ")", "\n", "\n", "self", ".", "down", "=", "nn", ".", "ConvTranspose2d", "(", "256", "*", "3", ",", "256", ",", "1", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.models.model_builder.ModelBuilder.track": [[49, 60], ["model_builder.ModelBuilder.backbone", "model_builder.ModelBuilder.head", "model_builder.ModelBuilder.neck", "model_builder.ModelBuilder.align", "range", "len"], "methods", ["None"], ["", "def", "template", "(", "self", ",", "z", ")", ":", "\n", "        ", "zf", "=", "self", ".", "backbone", "(", "z", ")", "\n", "if", "cfg", ".", "ADJUST", ".", "ADJUST", ":", "\n", "            ", "zf", "=", "self", ".", "neck", "(", "zf", ")", "\n", "", "if", "cfg", ".", "ALIGN", ".", "ALIGN", ":", "\n", "            ", "zf", "=", "[", "self", ".", "align", "(", "zf", "[", "i", "]", ")", "for", "i", "in", "range", "(", "len", "(", "zf", ")", ")", "]", "\n", "", "self", ".", "zf", "=", "zf", "\n", "\n", "", "def", "track", "(", "self", ",", "x", ")", ":", "\n", "        ", "xf", "=", "self", ".", "backbone", "(", "x", ")", "\n", "if", "cfg", ".", "ADJUST", ".", "ADJUST", ":", "\n", "            ", "xf", "=", "self", ".", "neck", "(", "xf", ")", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.models.model_builder.ModelBuilder.log_softmax": [[63, 68], ["torch.log_softmax.permute().contiguous", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax.permute"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.models.model_builder.ModelBuilder.log_softmax", "home.repos.pwc.inspect_result.vision4robotics_udat.models.model_builder.ModelBuilder.log_softmax"], ["", "features", "=", "self", ".", "xcorr_depthwise", "(", "xf", "[", "0", "]", ",", "self", ".", "zf", "[", "0", "]", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "xf", ")", "-", "1", ")", ":", "\n", "            ", "features_new", "=", "self", ".", "xcorr_depthwise", "(", "xf", "[", "i", "+", "1", "]", ",", "self", ".", "zf", "[", "i", "+", "1", "]", ")", "\n", "features", "=", "torch", ".", "cat", "(", "[", "features", ",", "features_new", "]", ",", "1", ")", "\n", "", "features", "=", "self", ".", "down", "(", "features", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.models.model_builder.ModelBuilder.forward": [[69, 105], ["data[].cuda", "data[].cuda", "data[].cuda", "data[].cuda", "model_builder.ModelBuilder.backbone", "model_builder.ModelBuilder.backbone", "model_builder.ModelBuilder.head", "model_builder.ModelBuilder.log_softmax", "siamban.models.loss.select_cross_entropy_loss", "siamban.models.loss.select_iou_loss", "model_builder.ModelBuilder.neck", "model_builder.ModelBuilder.neck", "model_builder.ModelBuilder.align", "model_builder.ModelBuilder.align"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.models.model_builder.ModelBuilder.log_softmax", "home.repos.pwc.inspect_result.vision4robotics_udat.models.loss.select_cross_entropy_loss", "home.repos.pwc.inspect_result.vision4robotics_udat.models.loss.select_iou_loss"], ["cls", ",", "loc", ",", "cen", "=", "self", ".", "car_head", "(", "features", ")", "\n", "return", "{", "\n", "'cls'", ":", "cls", ",", "\n", "'loc'", ":", "loc", ",", "\n", "'cen'", ":", "cen", "\n", "}", "\n", "\n", "", "def", "log_softmax", "(", "self", ",", "cls", ")", ":", "\n", "        ", "b", ",", "a2", ",", "h", ",", "w", "=", "cls", ".", "size", "(", ")", "\n", "cls", "=", "cls", ".", "view", "(", "b", ",", "2", ",", "a2", "//", "2", ",", "h", ",", "w", ")", "\n", "cls", "=", "cls", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "4", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "cls", "=", "F", ".", "log_softmax", "(", "cls", ",", "dim", "=", "4", ")", "\n", "return", "cls", "\n", "\n", "", "def", "forward", "(", "self", ",", "data", ")", ":", "\n", "        ", "\"\"\" only used in training\n        \"\"\"", "\n", "template", "=", "data", "[", "'template'", "]", ".", "cuda", "(", ")", "\n", "search", "=", "data", "[", "'search'", "]", ".", "cuda", "(", ")", "\n", "label_cls", "=", "data", "[", "'label_cls'", "]", ".", "cuda", "(", ")", "\n", "label_loc", "=", "data", "[", "'bbox'", "]", ".", "cuda", "(", ")", "\n", "\n", "# get feature", "\n", "zf", "=", "self", ".", "backbone", "(", "template", ")", "\n", "xf", "=", "self", ".", "backbone", "(", "search", ")", "\n", "if", "cfg", ".", "ADJUST", ".", "ADJUST", ":", "\n", "            ", "zf", "=", "self", ".", "neck", "(", "zf", ")", "\n", "xf", "=", "self", ".", "neck", "(", "xf", ")", "\n", "", "if", "cfg", ".", "ALIGN", ".", "ALIGN", ":", "\n", "            ", "zf", "=", "[", "self", ".", "align", "(", "_zf", ")", "for", "_zf", "in", "zf", "]", "\n", "xf", "=", "[", "self", ".", "align", "(", "_xf", ")", "for", "_xf", "in", "xf", "]", "\n", "\n", "", "features", "=", "self", ".", "xcorr_depthwise", "(", "xf", "[", "0", "]", ",", "zf", "[", "0", "]", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "xf", ")", "-", "1", ")", ":", "\n", "            ", "features_new", "=", "self", ".", "xcorr_depthwise", "(", "xf", "[", "i", "+", "1", "]", ",", "zf", "[", "i", "+", "1", "]", ")", "\n", "features", "=", "torch", ".", "cat", "(", "[", "features", ",", "features_new", "]", ",", "1", ")", "\n", "", "features", "=", "self", ".", "down", "(", "features", ")", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.models.loss_car.IOULoss.forward": [[44, 75], ["torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.log", "torch.log", "torch.log", "torch.log", "losses.mean", "weight.sum", "weight.sum", "losses.numel"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.datasets.dataset.SubDataset.log", "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.dataset.SubDataset.log", "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.dataset.SubDataset.log", "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.dataset.SubDataset.log"], ["    ", "def", "forward", "(", "self", ",", "pred", ",", "target", ",", "weight", "=", "None", ")", ":", "\n", "        ", "pred_left", "=", "pred", "[", ":", ",", "0", "]", "\n", "pred_top", "=", "pred", "[", ":", ",", "1", "]", "\n", "pred_right", "=", "pred", "[", ":", ",", "2", "]", "\n", "pred_bottom", "=", "pred", "[", ":", ",", "3", "]", "\n", "\n", "target_left", "=", "target", "[", ":", ",", "0", "]", "\n", "target_top", "=", "target", "[", ":", ",", "1", "]", "\n", "target_right", "=", "target", "[", ":", ",", "2", "]", "\n", "target_bottom", "=", "target", "[", ":", ",", "3", "]", "\n", "\n", "target_aera", "=", "(", "target_left", "+", "target_right", ")", "*", "(", "target_top", "+", "target_bottom", ")", "\n", "pred_aera", "=", "(", "pred_left", "+", "pred_right", ")", "*", "(", "pred_top", "+", "pred_bottom", ")", "\n", "\n", "w_intersect", "=", "torch", ".", "min", "(", "pred_left", ",", "target_left", ")", "+", "torch", ".", "min", "(", "pred_right", ",", "target_right", ")", "\n", "h_intersect", "=", "torch", ".", "min", "(", "pred_bottom", ",", "target_bottom", ")", "+", "torch", ".", "min", "(", "pred_top", ",", "target_top", ")", "\n", "\n", "area_intersect", "=", "w_intersect", "*", "h_intersect", "\n", "area_union", "=", "target_aera", "+", "pred_aera", "-", "area_intersect", "\n", "\n", "losses", "=", "-", "torch", ".", "log", "(", "(", "area_intersect", "+", "1.0", ")", "/", "(", "area_union", "+", "1.0", ")", ")", "\n", "\n", "if", "weight", "is", "not", "None", "and", "weight", ".", "sum", "(", ")", ">", "0", ":", "\n", "            ", "return", "(", "losses", "*", "weight", ")", ".", "sum", "(", ")", "/", "weight", ".", "sum", "(", ")", "\n", "", "else", ":", "\n", "            ", "assert", "losses", ".", "numel", "(", ")", "!=", "0", "\n", "return", "losses", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.models.loss_car.SiamCARLossComputation.__init__": [[82, 86], ["loss_car.IOULoss", "torch.nn.BCEWithLogitsLoss", "torch.nn.BCEWithLogitsLoss"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "self", ".", "box_reg_loss_func", "=", "IOULoss", "(", ")", "\n", "self", ".", "centerness_loss_func", "=", "nn", ".", "BCEWithLogitsLoss", "(", ")", "\n", "self", ".", "cfg", "=", "cfg", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.models.loss_car.SiamCARLossComputation.prepare_targets": [[87, 94], ["loss_car.SiamCARLossComputation.compute_targets_for_locations"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.models.loss_car.SiamCARLossComputation.compute_targets_for_locations"], ["", "def", "prepare_targets", "(", "self", ",", "points", ",", "labels", ",", "gt_bbox", ")", ":", "\n", "\n", "        ", "labels", ",", "reg_targets", "=", "self", ".", "compute_targets_for_locations", "(", "\n", "points", ",", "labels", ",", "gt_bbox", "\n", ")", "\n", "\n", "return", "labels", ",", "reg_targets", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.models.loss_car.SiamCARLossComputation.compute_targets_for_locations": [[95, 117], ["labels.view.view.view", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "numpy.where", "[].float", "[].float", "[].float", "[].float", "labels.view.view.permute().contiguous", "torch.stack.permute().contiguous", "torch.stack.permute().contiguous", "is_in_boxes.cpu", "labels.view.view.permute", "torch.stack.permute", "torch.stack.permute"], "methods", ["None"], ["", "def", "compute_targets_for_locations", "(", "self", ",", "locations", ",", "labels", ",", "gt_bbox", ")", ":", "\n", "# reg_targets = []", "\n", "        ", "xs", ",", "ys", "=", "locations", "[", ":", ",", "0", "]", ",", "locations", "[", ":", ",", "1", "]", "\n", "\n", "bboxes", "=", "gt_bbox", "\n", "labels", "=", "labels", ".", "view", "(", "self", ".", "cfg", ".", "TRAIN", ".", "OUTPUT_SIZE", "**", "2", ",", "-", "1", ")", "\n", "\n", "l", "=", "xs", "[", ":", ",", "None", "]", "-", "bboxes", "[", ":", ",", "0", "]", "[", "None", "]", ".", "float", "(", ")", "\n", "t", "=", "ys", "[", ":", ",", "None", "]", "-", "bboxes", "[", ":", ",", "1", "]", "[", "None", "]", ".", "float", "(", ")", "\n", "r", "=", "bboxes", "[", ":", ",", "2", "]", "[", "None", "]", ".", "float", "(", ")", "-", "xs", "[", ":", ",", "None", "]", "\n", "b", "=", "bboxes", "[", ":", ",", "3", "]", "[", "None", "]", ".", "float", "(", ")", "-", "ys", "[", ":", ",", "None", "]", "\n", "reg_targets_per_im", "=", "torch", ".", "stack", "(", "[", "l", ",", "t", ",", "r", ",", "b", "]", ",", "dim", "=", "2", ")", "\n", "\n", "s1", "=", "reg_targets_per_im", "[", ":", ",", ":", ",", "0", "]", ">", "0.6", "*", "(", "(", "bboxes", "[", ":", ",", "2", "]", "-", "bboxes", "[", ":", ",", "0", "]", ")", "/", "2", ")", ".", "float", "(", ")", "\n", "s2", "=", "reg_targets_per_im", "[", ":", ",", ":", ",", "2", "]", ">", "0.6", "*", "(", "(", "bboxes", "[", ":", ",", "2", "]", "-", "bboxes", "[", ":", ",", "0", "]", ")", "/", "2", ")", ".", "float", "(", ")", "\n", "s3", "=", "reg_targets_per_im", "[", ":", ",", ":", ",", "1", "]", ">", "0.6", "*", "(", "(", "bboxes", "[", ":", ",", "3", "]", "-", "bboxes", "[", ":", ",", "1", "]", ")", "/", "2", ")", ".", "float", "(", ")", "\n", "s4", "=", "reg_targets_per_im", "[", ":", ",", ":", ",", "3", "]", ">", "0.6", "*", "(", "(", "bboxes", "[", ":", ",", "3", "]", "-", "bboxes", "[", ":", ",", "1", "]", ")", "/", "2", ")", ".", "float", "(", ")", "\n", "is_in_boxes", "=", "s1", "*", "s2", "*", "s3", "*", "s4", "\n", "pos", "=", "np", ".", "where", "(", "is_in_boxes", ".", "cpu", "(", ")", "==", "1", ")", "\n", "labels", "[", "pos", "]", "=", "1", "\n", "\n", "return", "labels", ".", "permute", "(", "1", ",", "0", ")", ".", "contiguous", "(", ")", ",", "reg_targets_per_im", ".", "permute", "(", "1", ",", "0", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.models.loss_car.SiamCARLossComputation.compute_centerness_targets": [[118, 124], ["torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "left_right.min", "left_right.max", "top_bottom.min", "top_bottom.max"], "methods", ["None"], ["", "def", "compute_centerness_targets", "(", "self", ",", "reg_targets", ")", ":", "\n", "        ", "left_right", "=", "reg_targets", "[", ":", ",", "[", "0", ",", "2", "]", "]", "\n", "top_bottom", "=", "reg_targets", "[", ":", ",", "[", "1", ",", "3", "]", "]", "\n", "centerness", "=", "(", "left_right", ".", "min", "(", "dim", "=", "-", "1", ")", "[", "0", "]", "/", "left_right", ".", "max", "(", "dim", "=", "-", "1", ")", "[", "0", "]", ")", "*", "(", "top_bottom", ".", "min", "(", "dim", "=", "-", "1", ")", "[", "0", "]", "/", "top_bottom", ".", "max", "(", "dim", "=", "-", "1", ")", "[", "0", "]", ")", "\n", "return", "torch", ".", "sqrt", "(", "centerness", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.models.loss_car.SiamCARLossComputation.__call__": [[125, 169], ["loss_car.SiamCARLossComputation.prepare_targets", "box_regression.permute().contiguous().view", "label_cls.view", "reg_targets.view", "centerness.view", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "loss_car.select_cross_entropy_loss", "torch.nonzero().squeeze.numel", "torch.nonzero().squeeze.numel", "loss_car.SiamCARLossComputation.compute_centerness_targets", "loss_car.SiamCARLossComputation.box_reg_loss_func", "loss_car.SiamCARLossComputation.centerness_loss_func", "box_regression.permute().contiguous().view.sum", "centerness.view.sum", "box_regression.permute().contiguous", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "box_regression.permute"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.models.loss_car.SiamCARLossComputation.prepare_targets", "home.repos.pwc.inspect_result.vision4robotics_udat.models.loss.select_cross_entropy_loss", "home.repos.pwc.inspect_result.vision4robotics_udat.models.loss_car.SiamCARLossComputation.compute_centerness_targets"], ["", "def", "__call__", "(", "self", ",", "locations", ",", "box_cls", ",", "box_regression", ",", "centerness", ",", "labels", ",", "reg_targets", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            locations (list[BoxList])\n            box_cls (list[Tensor])\n            box_regression (list[Tensor])\n            centerness (list[Tensor])\n            targets (list[BoxList])\n\n        Returns:\n            cls_loss (Tensor)\n            reg_loss (Tensor)\n            centerness_loss (Tensor)\n        \"\"\"", "\n", "\n", "label_cls", ",", "reg_targets", "=", "self", ".", "prepare_targets", "(", "locations", ",", "labels", ",", "reg_targets", ")", "\n", "box_regression_flatten", "=", "(", "box_regression", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "4", ")", ")", "\n", "labels_flatten", "=", "(", "label_cls", ".", "view", "(", "-", "1", ")", ")", "\n", "reg_targets_flatten", "=", "(", "reg_targets", ".", "view", "(", "-", "1", ",", "4", ")", ")", "\n", "centerness_flatten", "=", "(", "centerness", ".", "view", "(", "-", "1", ")", ")", "\n", "\n", "pos_inds", "=", "torch", ".", "nonzero", "(", "labels_flatten", ">", "0", ")", ".", "squeeze", "(", "1", ")", "\n", "\n", "box_regression_flatten", "=", "box_regression_flatten", "[", "pos_inds", "]", "\n", "reg_targets_flatten", "=", "reg_targets_flatten", "[", "pos_inds", "]", "\n", "centerness_flatten", "=", "centerness_flatten", "[", "pos_inds", "]", "\n", "cls_loss", "=", "select_cross_entropy_loss", "(", "box_cls", ",", "labels_flatten", ")", "\n", "\n", "if", "pos_inds", ".", "numel", "(", ")", ">", "0", ":", "\n", "            ", "centerness_targets", "=", "self", ".", "compute_centerness_targets", "(", "reg_targets_flatten", ")", "\n", "reg_loss", "=", "self", ".", "box_reg_loss_func", "(", "\n", "box_regression_flatten", ",", "\n", "reg_targets_flatten", ",", "\n", "centerness_targets", "\n", ")", "\n", "centerness_loss", "=", "self", ".", "centerness_loss_func", "(", "\n", "centerness_flatten", ",", "\n", "centerness_targets", "\n", ")", "\n", "", "else", ":", "\n", "            ", "reg_loss", "=", "box_regression_flatten", ".", "sum", "(", ")", "\n", "centerness_loss", "=", "centerness_flatten", ".", "sum", "(", ")", "\n", "\n", "", "return", "cls_loss", ",", "reg_loss", ",", "centerness_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.models.loss_car.get_cls_loss": [[15, 22], ["torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.nll_loss", "len", "select.size", "torch.Size", "torch.Size", "select.size"], "function", ["None"], ["def", "get_cls_loss", "(", "pred", ",", "label", ",", "select", ")", ":", "\n", "    ", "if", "len", "(", "select", ".", "size", "(", ")", ")", "==", "0", "or", "select", ".", "size", "(", ")", "==", "torch", ".", "Size", "(", "[", "0", "]", ")", ":", "\n", "        ", "return", "0", "\n", "", "pred", "=", "torch", ".", "index_select", "(", "pred", ",", "0", ",", "select", ")", "\n", "label", "=", "torch", ".", "index_select", "(", "label", ",", "0", ",", "select", ")", "\n", "return", "F", ".", "nll_loss", "(", "pred", ",", "label", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.models.loss_car.select_cross_entropy_loss": [[24, 32], ["pred.view.view", "label.view.view", "label.view.data.eq().nonzero().squeeze().cuda", "label.view.data.eq().nonzero().squeeze().cuda", "loss_car.get_cls_loss", "loss_car.get_cls_loss", "label.view.data.eq().nonzero().squeeze", "label.view.data.eq().nonzero().squeeze", "label.view.data.eq().nonzero", "label.view.data.eq().nonzero", "label.view.data.eq", "label.view.data.eq"], "function", ["home.repos.pwc.inspect_result.vision4robotics_udat.models.loss.get_cls_loss", "home.repos.pwc.inspect_result.vision4robotics_udat.models.loss.get_cls_loss"], ["", "def", "select_cross_entropy_loss", "(", "pred", ",", "label", ")", ":", "\n", "    ", "pred", "=", "pred", ".", "view", "(", "-", "1", ",", "2", ")", "\n", "label", "=", "label", ".", "view", "(", "-", "1", ")", "\n", "pos", "=", "label", ".", "data", ".", "eq", "(", "1", ")", ".", "nonzero", "(", "as_tuple", "=", "False", ")", ".", "squeeze", "(", ")", ".", "cuda", "(", ")", "\n", "neg", "=", "label", ".", "data", ".", "eq", "(", "0", ")", ".", "nonzero", "(", "as_tuple", "=", "False", ")", ".", "squeeze", "(", ")", ".", "cuda", "(", ")", "\n", "loss_pos", "=", "get_cls_loss", "(", "pred", ",", "label", ",", "pos", ")", "\n", "loss_neg", "=", "get_cls_loss", "(", "pred", ",", "label", ",", "neg", ")", "\n", "return", "loss_pos", "*", "0.5", "+", "loss_neg", "*", "0.5", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.models.loss_car.weight_l1_loss": [[34, 41], ["pred_loc.view.size", "pred_loc.view.view", "diff.sum().view.sum().view", "loss.sum().div", "diff.sum().view.sum", "loss.sum"], "function", ["None"], ["", "def", "weight_l1_loss", "(", "pred_loc", ",", "label_loc", ",", "loss_weight", ")", ":", "\n", "    ", "b", ",", "_", ",", "sh", ",", "sw", "=", "pred_loc", ".", "size", "(", ")", "\n", "pred_loc", "=", "pred_loc", ".", "view", "(", "b", ",", "4", ",", "-", "1", ",", "sh", ",", "sw", ")", "\n", "diff", "=", "(", "pred_loc", "-", "label_loc", ")", ".", "abs", "(", ")", "\n", "diff", "=", "diff", ".", "sum", "(", "dim", "=", "1", ")", ".", "view", "(", "b", ",", "-", "1", ",", "sh", ",", "sw", ")", "\n", "loss", "=", "diff", "*", "loss_weight", "\n", "return", "loss", ".", "sum", "(", ")", ".", "div", "(", "b", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.models.loss_car.make_siamcar_loss_evaluator": [[171, 174], ["loss_car.SiamCARLossComputation"], "function", ["None"], ["", "", "def", "make_siamcar_loss_evaluator", "(", "cfg", ")", ":", "\n", "    ", "loss_evaluator", "=", "SiamCARLossComputation", "(", "cfg", ")", "\n", "return", "loss_evaluator", "\n", "", ""]], "home.repos.pwc.inspect_result.vision4robotics_udat.models.loss.get_cls_loss": [[17, 24], ["torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.nll_loss", "len", "select.size", "torch.Size", "torch.Size", "torch.Size", "select.size"], "function", ["None"], ["trg", "=", "trg", "/", "torch", ".", "sum", "(", "trg", ")", "# target", "\n", "eps", "=", "sys", ".", "float_info", ".", "epsilon", "\n", "\n", "return", "torch", ".", "sum", "(", "trg", "*", "torch", ".", "log", "(", "eps", "+", "torch", ".", "div", "(", "trg", ",", "(", "inp", "+", "eps", ")", ")", ")", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "inp", ",", "trg", ")", ":", "\n", "        ", "return", "_pointwise_loss", "(", "lambda", "a", ",", "b", ":", "self", ".", "KLD", "(", "a", ",", "b", ")", ",", "inp", ",", "trg", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.vision4robotics_udat.models.loss.select_cross_entropy_loss": [[26, 34], ["pred.view.view", "label.view.view", "label.view.data.eq().nonzero().squeeze().cuda", "label.view.data.eq().nonzero().squeeze().cuda", "loss.get_cls_loss", "loss.get_cls_loss", "label.view.data.eq().nonzero().squeeze", "label.view.data.eq().nonzero().squeeze", "label.view.data.eq().nonzero", "label.view.data.eq().nonzero", "label.view.data.eq", "label.view.data.eq"], "function", ["home.repos.pwc.inspect_result.vision4robotics_udat.models.loss.get_cls_loss", "home.repos.pwc.inspect_result.vision4robotics_udat.models.loss.get_cls_loss"], []], "home.repos.pwc.inspect_result.vision4robotics_udat.models.loss.weight_l1_loss": [[36, 44], ["loss.sum().div", "diff.sum.sum", "loss.sum", "pred_loc.size"], "function", ["None"], []], "home.repos.pwc.inspect_result.vision4robotics_udat.models.loss.select_iou_loss": [[46, 57], ["label_cls.reshape.reshape", "label_cls.reshape.data.eq().nonzero().squeeze().cuda", "torch.index_select.permute().reshape", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select.permute().reshape", "torch.index_select", "torch.index_select", "torch.index_select", "siamban.models.iou_loss.linear_iou", "label_cls.reshape.data.eq().nonzero().squeeze", "torch.index_select.permute", "torch.index_select.permute", "label_cls.reshape.data.eq().nonzero", "label_cls.reshape.data.eq"], "function", ["None"], []], "home.repos.pwc.inspect_result.vision4robotics_udat.models.iou_loss.IOULoss.__init__": [[6, 9], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamban_tracker.SiamBANTracker.__init__"], ["    ", "def", "__init__", "(", "self", ",", "loc_loss_type", ")", ":", "\n", "        ", "super", "(", "IOULoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "loc_loss_type", "=", "loc_loss_type", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.models.iou_loss.IOULoss.forward": [[10, 48], ["torch.min", "torch.min", "torch.max", "torch.max", "torch.min", "torch.min", "torch.max", "torch.max", "losses.mean", "torch.log", "weight.sum", "weight.sum", "losses.numel"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.datasets.dataset.SubDataset.log"], ["", "def", "forward", "(", "self", ",", "pred", ",", "target", ",", "weight", "=", "None", ")", ":", "\n", "        ", "pred_left", "=", "pred", "[", ":", ",", "0", "]", "\n", "pred_top", "=", "pred", "[", ":", ",", "1", "]", "\n", "pred_right", "=", "pred", "[", ":", ",", "2", "]", "\n", "pred_bottom", "=", "pred", "[", ":", ",", "3", "]", "\n", "\n", "target_left", "=", "target", "[", ":", ",", "0", "]", "\n", "target_top", "=", "target", "[", ":", ",", "1", "]", "\n", "target_right", "=", "target", "[", ":", ",", "2", "]", "\n", "target_bottom", "=", "target", "[", ":", ",", "3", "]", "\n", "\n", "pred_area", "=", "(", "pred_left", "+", "pred_right", ")", "*", "(", "pred_top", "+", "pred_bottom", ")", "\n", "target_area", "=", "(", "target_left", "+", "target_right", ")", "*", "(", "target_top", "+", "target_bottom", ")", "\n", "\n", "w_intersect", "=", "torch", ".", "min", "(", "pred_left", ",", "target_left", ")", "+", "torch", ".", "min", "(", "pred_right", ",", "target_right", ")", "\n", "g_w_intersect", "=", "torch", ".", "max", "(", "pred_left", ",", "target_left", ")", "+", "torch", ".", "max", "(", "pred_right", ",", "target_right", ")", "\n", "h_intersect", "=", "torch", ".", "min", "(", "pred_bottom", ",", "target_bottom", ")", "+", "torch", ".", "min", "(", "pred_top", ",", "target_top", ")", "\n", "g_h_intersect", "=", "torch", ".", "max", "(", "pred_bottom", ",", "target_bottom", ")", "+", "torch", ".", "max", "(", "pred_top", ",", "target_top", ")", "\n", "ac_uion", "=", "g_w_intersect", "*", "g_h_intersect", "+", "1e-7", "\n", "area_intersect", "=", "w_intersect", "*", "h_intersect", "\n", "area_union", "=", "target_area", "+", "pred_area", "-", "area_intersect", "\n", "ious", "=", "(", "area_intersect", "+", "1.0", ")", "/", "(", "area_union", "+", "1.0", ")", "\n", "gious", "=", "ious", "-", "(", "ac_uion", "-", "area_union", ")", "/", "ac_uion", "\n", "\n", "if", "self", ".", "loc_loss_type", "==", "'iou'", ":", "\n", "            ", "losses", "=", "-", "torch", ".", "log", "(", "ious", ")", "\n", "", "elif", "self", ".", "loc_loss_type", "==", "'linear_iou'", ":", "\n", "            ", "losses", "=", "1", "-", "ious", "\n", "", "elif", "self", ".", "loc_loss_type", "==", "'giou'", ":", "\n", "            ", "losses", "=", "1", "-", "gious", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "if", "weight", "is", "not", "None", "and", "weight", ".", "sum", "(", ")", ">", "0", ":", "\n", "            ", "return", "(", "losses", "*", "weight", ")", ".", "sum", "(", ")", "/", "weight", ".", "sum", "(", ")", "\n", "", "else", ":", "\n", "            ", "assert", "losses", ".", "numel", "(", ")", "!=", "0", "\n", "return", "losses", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.head.car_head.CARHead.__init__": [[7, 70], ["super().__init__", "range", "car_head.CARHead.add_module", "car_head.CARHead.add_module", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.init.constant_", "cls_tower.append", "cls_tower.append", "cls_tower.append", "bbox_tower.append", "bbox_tower.append", "bbox_tower.append", "torch.nn.Sequential", "torch.nn.Sequential", "modules.modules", "math.log", "torch.nn.Conv2d", "torch.nn.GroupNorm", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.GroupNorm", "torch.nn.ReLU", "isinstance", "torch.nn.init.normal_", "torch.nn.init.constant_"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamban_tracker.SiamBANTracker.__init__", "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.dataset.SubDataset.log"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ",", "in_channels", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            in_channels (int): number of channels of the input feature\n        \"\"\"", "\n", "super", "(", "CARHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# TODO: Implement the sigmoid version first.", "\n", "num_classes", "=", "cfg", ".", "TRAIN", ".", "NUM_CLASSES", "\n", "\n", "cls_tower", "=", "[", "]", "\n", "bbox_tower", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "cfg", ".", "TRAIN", ".", "NUM_CONVS", ")", ":", "\n", "            ", "cls_tower", ".", "append", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "\n", "in_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", "\n", ")", "\n", ")", "\n", "cls_tower", ".", "append", "(", "nn", ".", "GroupNorm", "(", "32", ",", "in_channels", ")", ")", "\n", "cls_tower", ".", "append", "(", "nn", ".", "ReLU", "(", ")", ")", "\n", "bbox_tower", ".", "append", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "\n", "in_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", "\n", ")", "\n", ")", "\n", "bbox_tower", ".", "append", "(", "nn", ".", "GroupNorm", "(", "32", ",", "in_channels", ")", ")", "\n", "bbox_tower", ".", "append", "(", "nn", ".", "ReLU", "(", ")", ")", "\n", "\n", "", "self", ".", "add_module", "(", "'cls_tower'", ",", "nn", ".", "Sequential", "(", "*", "cls_tower", ")", ")", "\n", "self", ".", "add_module", "(", "'bbox_tower'", ",", "nn", ".", "Sequential", "(", "*", "bbox_tower", ")", ")", "\n", "self", ".", "cls_logits", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "num_classes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "1", "\n", ")", "\n", "self", ".", "bbox_pred", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "4", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "1", "\n", ")", "\n", "self", ".", "centerness", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "1", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "1", "\n", ")", "\n", "\n", "# initialization", "\n", "for", "modules", "in", "[", "self", ".", "cls_tower", ",", "self", ".", "bbox_tower", ",", "\n", "self", ".", "cls_logits", ",", "self", ".", "bbox_pred", ",", "\n", "self", ".", "centerness", "]", ":", "\n", "            ", "for", "l", "in", "modules", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "l", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                    ", "torch", ".", "nn", ".", "init", ".", "normal_", "(", "l", ".", "weight", ",", "std", "=", "0.01", ")", "\n", "torch", ".", "nn", ".", "init", ".", "constant_", "(", "l", ".", "bias", ",", "0", ")", "\n", "\n", "# initialize the bias for focal loss", "\n", "", "", "", "prior_prob", "=", "cfg", ".", "TRAIN", ".", "PRIOR_PROB", "\n", "bias_value", "=", "-", "math", ".", "log", "(", "(", "1", "-", "prior_prob", ")", "/", "prior_prob", ")", "\n", "torch", ".", "nn", ".", "init", ".", "constant_", "(", "self", ".", "cls_logits", ".", "bias", ",", "bias_value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.head.car_head.CARHead.forward": [[71, 78], ["car_head.CARHead.cls_tower", "car_head.CARHead.cls_logits", "car_head.CARHead.centerness", "torch.exp", "car_head.CARHead.bbox_pred", "car_head.CARHead.bbox_tower"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "cls_tower", "=", "self", ".", "cls_tower", "(", "x", ")", "\n", "logits", "=", "self", ".", "cls_logits", "(", "cls_tower", ")", "\n", "centerness", "=", "self", ".", "centerness", "(", "cls_tower", ")", "\n", "bbox_reg", "=", "torch", ".", "exp", "(", "self", ".", "bbox_pred", "(", "self", ".", "bbox_tower", "(", "x", ")", ")", ")", "\n", "\n", "return", "logits", ",", "bbox_reg", ",", "centerness", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.head.car_head.Scale.__init__": [[81, 84], ["torch.nn.Module.__init__", "torch.nn.Parameter", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamban_tracker.SiamBANTracker.__init__"], ["    ", "def", "__init__", "(", "self", ",", "init_value", "=", "1.0", ")", ":", "\n", "        ", "super", "(", "Scale", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "scale", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "[", "init_value", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.head.car_head.Scale.forward": [[85, 87], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "input", "*", "self", ".", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.head.__init__.get_ban_head": [[16, 18], ["None"], "function", ["None"], ["\n", "", "def", "_ssim", "(", "img1", ",", "img2", ",", "window", ",", "window_size", ",", "channel", ",", "size_average", "=", "True", ")", ":", "\n", "    ", "mu1", "=", "F", ".", "conv2d", "(", "img1", ",", "window", ",", "padding", "=", "window_size", "//", "2", ",", "groups", "=", "channel", ")", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.head.ban.BAN.__init__": [[13, 15], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamban_tracker.SiamBANTracker.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "BAN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.head.ban.BAN.forward": [[16, 18], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "z_f", ",", "x_f", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.head.ban.UPChannelBAN.__init__": [[20, 37], ["ban.BAN.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamban_tracker.SiamBANTracker.__init__"], ["    ", "def", "__init__", "(", "self", ",", "feature_in", "=", "256", ",", "cls_out_channels", "=", "2", ")", ":", "\n", "        ", "super", "(", "UPChannelBAN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "cls_output", "=", "cls_out_channels", "\n", "loc_output", "=", "4", "\n", "\n", "self", ".", "template_cls_conv", "=", "nn", ".", "Conv2d", "(", "feature_in", ",", "\n", "feature_in", "*", "cls_output", ",", "kernel_size", "=", "3", ")", "\n", "self", ".", "template_loc_conv", "=", "nn", ".", "Conv2d", "(", "feature_in", ",", "\n", "feature_in", "*", "loc_output", ",", "kernel_size", "=", "3", ")", "\n", "\n", "self", ".", "search_cls_conv", "=", "nn", ".", "Conv2d", "(", "feature_in", ",", "\n", "feature_in", ",", "kernel_size", "=", "3", ")", "\n", "self", ".", "search_loc_conv", "=", "nn", ".", "Conv2d", "(", "feature_in", ",", "\n", "feature_in", ",", "kernel_size", "=", "3", ")", "\n", "\n", "self", ".", "loc_adjust", "=", "nn", ".", "Conv2d", "(", "loc_output", ",", "loc_output", ",", "kernel_size", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.head.ban.UPChannelBAN.forward": [[39, 49], ["ban.UPChannelBAN.template_cls_conv", "ban.UPChannelBAN.template_loc_conv", "ban.UPChannelBAN.search_cls_conv", "ban.UPChannelBAN.search_loc_conv", "siamban.core.xcorr.xcorr_fast", "ban.UPChannelBAN.loc_adjust", "siamban.core.xcorr.xcorr_fast"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.core.xcorr.xcorr_fast", "home.repos.pwc.inspect_result.vision4robotics_udat.core.xcorr.xcorr_fast"], ["", "def", "forward", "(", "self", ",", "z_f", ",", "x_f", ")", ":", "\n", "        ", "cls_kernel", "=", "self", ".", "template_cls_conv", "(", "z_f", ")", "\n", "loc_kernel", "=", "self", ".", "template_loc_conv", "(", "z_f", ")", "\n", "\n", "cls_feature", "=", "self", ".", "search_cls_conv", "(", "x_f", ")", "\n", "loc_feature", "=", "self", ".", "search_loc_conv", "(", "x_f", ")", "\n", "\n", "cls", "=", "xcorr_fast", "(", "cls_feature", ",", "cls_kernel", ")", "\n", "loc", "=", "self", ".", "loc_adjust", "(", "xcorr_fast", "(", "loc_feature", ",", "loc_kernel", ")", ")", "\n", "return", "cls", ",", "loc", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.head.ban.DepthwiseXCorr.__init__": [[52, 69], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamban_tracker.SiamBANTracker.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "hidden", ",", "out_channels", ",", "kernel_size", "=", "3", ")", ":", "\n", "        ", "super", "(", "DepthwiseXCorr", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv_kernel", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "hidden", ",", "kernel_size", "=", "kernel_size", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "hidden", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "self", ".", "conv_search", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "hidden", ",", "kernel_size", "=", "kernel_size", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "hidden", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "self", ".", "head", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "hidden", ",", "hidden", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "hidden", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "hidden", ",", "out_channels", ",", "kernel_size", "=", "1", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.head.ban.DepthwiseXCorr.forward": [[72, 78], ["ban.DepthwiseXCorr.conv_kernel", "ban.DepthwiseXCorr.conv_search", "siamban.core.xcorr.xcorr_depthwise", "ban.DepthwiseXCorr.head"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.core.xcorr.xcorr_depthwise"], ["", "def", "forward", "(", "self", ",", "kernel", ",", "search", ")", ":", "\n", "        ", "kernel", "=", "self", ".", "conv_kernel", "(", "kernel", ")", "\n", "search", "=", "self", ".", "conv_search", "(", "search", ")", "\n", "feature", "=", "xcorr_depthwise", "(", "search", ",", "kernel", ")", "\n", "out", "=", "self", ".", "head", "(", "feature", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.head.ban.DepthwiseBAN.__init__": [[81, 85], ["ban.BAN.__init__", "ban.DepthwiseXCorr", "ban.DepthwiseXCorr"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamban_tracker.SiamBANTracker.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", "=", "256", ",", "out_channels", "=", "256", ",", "cls_out_channels", "=", "2", ",", "weighted", "=", "False", ")", ":", "\n", "        ", "super", "(", "DepthwiseBAN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cls", "=", "DepthwiseXCorr", "(", "in_channels", ",", "out_channels", ",", "cls_out_channels", ")", "\n", "self", ".", "loc", "=", "DepthwiseXCorr", "(", "in_channels", ",", "out_channels", ",", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.head.ban.DepthwiseBAN.forward": [[86, 90], ["ban.DepthwiseBAN.cls", "ban.DepthwiseBAN.loc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "z_f", ",", "x_f", ")", ":", "\n", "        ", "cls", "=", "self", ".", "cls", "(", "z_f", ",", "x_f", ")", "\n", "loc", "=", "self", ".", "loc", "(", "z_f", ",", "x_f", ")", "\n", "return", "cls", ",", "loc", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.head.ban.MultiBAN.__init__": [[93, 102], ["ban.BAN.__init__", "range", "torch.Parameter", "torch.Parameter", "torch.Parameter", "len", "ban.MultiBAN.add_module", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "ban.DepthwiseBAN", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "len", "str", "len", "len"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamban_tracker.SiamBANTracker.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "cls_out_channels", ",", "weighted", "=", "False", ")", ":", "\n", "        ", "super", "(", "MultiBAN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "weighted", "=", "weighted", "\n", "for", "i", "in", "range", "(", "len", "(", "in_channels", ")", ")", ":", "\n", "            ", "self", ".", "add_module", "(", "'box'", "+", "str", "(", "i", "+", "2", ")", ",", "DepthwiseBAN", "(", "in_channels", "[", "i", "]", ",", "in_channels", "[", "i", "]", ",", "cls_out_channels", ")", ")", "\n", "", "if", "self", ".", "weighted", ":", "\n", "            ", "self", ".", "cls_weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "len", "(", "in_channels", ")", ")", ")", "\n", "self", ".", "loc_weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "len", "(", "in_channels", ")", ")", ")", "\n", "", "self", ".", "loc_scale", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "len", "(", "in_channels", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.head.ban.MultiBAN.forward": [[103, 129], ["enumerate", "zip", "getattr", "getattr.", "cls.append", "loc.append", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "range", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "sum", "len", "len", "ban.MultiBAN.forward.weighted_avg"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "z_fs", ",", "x_fs", ")", ":", "\n", "        ", "cls", "=", "[", "]", "\n", "loc", "=", "[", "]", "\n", "for", "idx", ",", "(", "z_f", ",", "x_f", ")", "in", "enumerate", "(", "zip", "(", "z_fs", ",", "x_fs", ")", ",", "start", "=", "2", ")", ":", "\n", "            ", "box", "=", "getattr", "(", "self", ",", "'box'", "+", "str", "(", "idx", ")", ")", "\n", "c", ",", "l", "=", "box", "(", "z_f", ",", "x_f", ")", "\n", "cls", ".", "append", "(", "c", ")", "\n", "loc", ".", "append", "(", "torch", ".", "exp", "(", "l", "*", "self", ".", "loc_scale", "[", "idx", "-", "2", "]", ")", ")", "\n", "\n", "", "if", "self", ".", "weighted", ":", "\n", "            ", "cls_weight", "=", "F", ".", "softmax", "(", "self", ".", "cls_weight", ",", "0", ")", "\n", "loc_weight", "=", "F", ".", "softmax", "(", "self", ".", "loc_weight", ",", "0", ")", "\n", "\n", "", "def", "avg", "(", "lst", ")", ":", "\n", "            ", "return", "sum", "(", "lst", ")", "/", "len", "(", "lst", ")", "\n", "\n", "", "def", "weighted_avg", "(", "lst", ",", "weight", ")", ":", "\n", "            ", "s", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "weight", ")", ")", ":", "\n", "                ", "s", "+=", "lst", "[", "i", "]", "*", "weight", "[", "i", "]", "\n", "", "return", "s", "\n", "\n", "", "if", "self", ".", "weighted", ":", "\n", "            ", "return", "weighted_avg", "(", "cls", ",", "cls_weight", ")", ",", "weighted_avg", "(", "loc", ",", "loc_weight", ")", "\n", "", "else", ":", "\n", "            ", "return", "avg", "(", "cls", ")", ",", "avg", "(", "loc", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.vision4robotics_udat.backbone.resnet_atrous.BasicBlock.__init__": [[19, 42], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "resnet_atrous.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamban_tracker.SiamBANTracker.__init__", "home.repos.pwc.inspect_result.vision4robotics_udat.backbone.resnet_atrous.conv3x3"], ["# class BasicBlock(nn.Module):", "\n", "#     expansion = 1", "\n", "#", "\n", "#     def __init__(self, inplanes, planes, stride=1, downsample=None, groups=1, norm_layer=None, filter_size=1):", "\n", "#         super(BasicBlock, self).__init__()", "\n", "#         if norm_layer is None:", "\n", "#             norm_layer = nn.BatchNorm2d", "\n", "#         if groups != 1:", "\n", "#             raise ValueError('BasicBlock only supports groups=1')", "\n", "#         # Both self.conv1 and self.downsample layers downsample the input when stride != 1", "\n", "#         self.conv1 = conv3x3(inplanes, planes)", "\n", "#         self.bn1 = norm_layer(planes)", "\n", "#         self.relu = nn.ReLU(inplace=True)", "\n", "#         if(stride==1):", "\n", "#             self.conv2 = conv3x3(planes,planes)", "\n", "#         else:", "\n", "#             self.conv2 = nn.Sequential(Downsample(filt_size=filter_size, stride=stride, channels=planes),", "\n", "#                 conv3x3(planes, planes),)", "\n", "#         self.bn2 = norm_layer(planes)", "\n", "#         self.downsample = downsample", "\n", "#         self.stride = stride", "\n", "#", "\n", "#     def forward(self, x):", "\n", "#         identity = x", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.backbone.resnet_atrous.BasicBlock.forward": [[43, 60], ["resnet_atrous.BasicBlock.conv1", "resnet_atrous.BasicBlock.bn1", "resnet_atrous.BasicBlock.relu", "resnet_atrous.BasicBlock.conv2", "resnet_atrous.BasicBlock.bn2", "resnet_atrous.BasicBlock.relu", "resnet_atrous.BasicBlock.downsample"], "methods", ["None"], ["#", "\n", "#         out = self.conv1(x)", "\n", "#         out = self.bn1(out)", "\n", "#         out = self.relu(out)", "\n", "#", "\n", "#         out = self.conv2(out)", "\n", "#         out = self.bn2(out)", "\n", "#", "\n", "#         if self.downsample is not None:", "\n", "#             identity = self.downsample(x)", "\n", "#", "\n", "#         out += identity", "\n", "#         out = self.relu(out)", "\n", "#", "\n", "#         return out", "\n", "#", "\n", "#", "\n", "# class Bottleneck(nn.Module):", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.backbone.resnet_atrous.Bottleneck.__init__": [[65, 88], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamban_tracker.SiamBANTracker.__init__"], ["#         if norm_layer is None:", "\n", "#             norm_layer = nn.BatchNorm2d", "\n", "#         # Both self.conv2 and self.downsample layers downsample the input when stride != 1", "\n", "#         self.conv1 = conv1x1(inplanes, planes)", "\n", "#         self.bn1 = norm_layer(planes)", "\n", "#         self.conv2 = conv3x3(planes, planes, groups) # stride moved", "\n", "#         self.bn2 = norm_layer(planes)", "\n", "#         if(stride==1):", "\n", "#             self.conv3 = conv1x1(planes, planes * self.expansion)", "\n", "#         else:", "\n", "#             self.conv3 = nn.Sequential(Downsample(filt_size=filter_size, stride=stride, channels=planes),", "\n", "#                 conv1x1(planes, planes * self.expansion))", "\n", "#         self.bn3 = norm_layer(planes * self.expansion)", "\n", "#         self.relu = nn.ReLU(inplace=True)", "\n", "#         self.downsample = downsample", "\n", "#         self.stride = stride", "\n", "#", "\n", "#     def forward(self, x):", "\n", "#         identity = x", "\n", "#", "\n", "#         out = self.conv1(x)", "\n", "#         out = self.bn1(out)", "\n", "#         out = self.relu(out)", "\n", "#", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.backbone.resnet_atrous.Bottleneck.forward": [[89, 111], ["resnet_atrous.Bottleneck.conv1", "resnet_atrous.Bottleneck.bn1", "resnet_atrous.Bottleneck.relu", "resnet_atrous.Bottleneck.conv2", "resnet_atrous.Bottleneck.bn2", "resnet_atrous.Bottleneck.relu", "resnet_atrous.Bottleneck.conv3", "resnet_atrous.Bottleneck.bn3", "resnet_atrous.Bottleneck.relu", "resnet_atrous.Bottleneck.downsample"], "methods", ["None"], ["#         out = self.conv2(out)", "\n", "#         out = self.bn2(out)", "\n", "#         out = self.relu(out)", "\n", "#", "\n", "#         out = self.conv3(out)", "\n", "#         out = self.bn3(out)", "\n", "#", "\n", "#         if self.downsample is not None:", "\n", "#             identity = self.downsample(x)", "\n", "#", "\n", "#         out += identity", "\n", "#         out = self.relu(out)", "\n", "#", "\n", "#         return out", "\n", "#", "\n", "#", "\n", "# class ResNet(nn.Module):", "\n", "#", "\n", "#     def __init__(self, block, layers, num_classes=1000, zero_init_residual=False,", "\n", "#                  groups=1, width_per_group=64, norm_layer=None, filter_size=1, pool_only=True):", "\n", "#         super(ResNet, self).__init__()", "\n", "#         if norm_layer is None:", "\n", "#             norm_layer = nn.BatchNorm2d", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.backbone.resnet_atrous.ResNet.__init__": [[114, 151], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "resnet_atrous.ResNet._make_layer", "resnet_atrous.ResNet._make_layer", "resnet_atrous.ResNet.modules", "resnet_atrous.ResNet._make_layer", "resnet_atrous.ResNet._make_layer", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamban_tracker.SiamBANTracker.__init__", "home.repos.pwc.inspect_result.vision4robotics_udat.backbone.resnet_atrous.ResNet._make_layer", "home.repos.pwc.inspect_result.vision4robotics_udat.backbone.resnet_atrous.ResNet._make_layer", "home.repos.pwc.inspect_result.vision4robotics_udat.backbone.resnet_atrous.ResNet._make_layer", "home.repos.pwc.inspect_result.vision4robotics_udat.backbone.resnet_atrous.ResNet._make_layer"], ["#", "\n", "#         if(pool_only):", "\n", "#             self.conv1 = nn.Conv2d(3, planes[0], kernel_size=7, stride=2, padding=3, bias=False)", "\n", "#         else:", "\n", "#             self.conv1 = nn.Conv2d(3, planes[0], kernel_size=7, stride=1, padding=3, bias=False)", "\n", "#         self.bn1 = norm_layer(planes[0])", "\n", "#         self.relu = nn.ReLU(inplace=True)", "\n", "#", "\n", "#         if(pool_only):", "\n", "#             self.maxpool = nn.Sequential(*[nn.MaxPool2d(kernel_size=2, stride=1),", "\n", "#                 Downsample(filt_size=filter_size, stride=2, channels=planes[0])])", "\n", "#         else:", "\n", "#             self.maxpool = nn.Sequential(*[Downsample(filt_size=filter_size, stride=2, channels=planes[0]),", "\n", "#                 nn.MaxPool2d(kernel_size=2, stride=1),", "\n", "#                 Downsample(filt_size=filter_size, stride=2, channels=planes[0])])", "\n", "#", "\n", "#         self.layer1 = self._make_layer(block, planes[0], layers[0], groups=groups, norm_layer=norm_layer)", "\n", "#         self.layer2 = self._make_layer(block, planes[1], layers[1], stride=2, groups=groups, norm_layer=norm_layer, filter_size=filter_size)", "\n", "#         self.layer3 = self._make_layer(block, planes[2], layers[2], stride=2, groups=groups, norm_layer=norm_layer, filter_size=filter_size)", "\n", "#         self.layer4 = self._make_layer(block, planes[3], layers[3], stride=2, groups=groups, norm_layer=norm_layer, filter_size=filter_size)", "\n", "#         self.avgpool = nn.AdaptiveAvgPool2d((1, 1))", "\n", "#         self.fc = nn.Linear(planes[3] * block.expansion, num_classes)", "\n", "#", "\n", "#         for m in self.modules():", "\n", "#             if isinstance(m, nn.Conv2d):", "\n", "#                 if(m.in_channels!=m.out_channels or m.out_channels!=m.groups or m.bias is not None):", "\n", "#                     # don't want to reinitialize downsample layers, code assuming normal conv layers will not have these characteristics", "\n", "#                     nn.init.kaiming_normal_(m.weight, mode='fan_out', nonlinearity='relu')", "\n", "#                 else:", "\n", "#                     print('Not initializing')", "\n", "#             elif isinstance(m, (nn.BatchNorm2d, nn.GroupNorm)):", "\n", "#                 nn.init.constant_(m.weight, 1)", "\n", "#                 nn.init.constant_(m.bias, 0)", "\n", "#", "\n", "#         # Zero-initialize the last BN in each residual branch,", "\n", "#         # so that the residual branch starts with zeros, and each residual block behaves like an identity.", "\n", "#         # This improves the model by 0.2~0.3% according to https://arxiv.org/abs/1706.02677", "\n", "#         if zero_init_residual:", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.backbone.resnet_atrous.ResNet._make_layer": [[152, 184], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["None"], ["#             for m in self.modules():", "\n", "#                 if isinstance(m, Bottleneck):", "\n", "#                     nn.init.constant_(m.bn3.weight, 0)", "\n", "#                 elif isinstance(m, BasicBlock):", "\n", "#                     nn.init.constant_(m.bn2.weight, 0)", "\n", "#", "\n", "#     def _make_layer(self, block, planes, blocks, stride=1, groups=1, norm_layer=None, filter_size=1):", "\n", "#         if norm_layer is None:", "\n", "#             norm_layer = nn.BatchNorm2d", "\n", "#         downsample = None", "\n", "#         if stride != 1 or self.inplanes != planes * block.expansion:", "\n", "#             # downsample = nn.Sequential(", "\n", "#             #     conv1x1(self.inplanes, planes * block.expansion, stride, filter_size=filter_size),", "\n", "#             #     norm_layer(planes * block.expansion),", "\n", "#             # )", "\n", "#", "\n", "#             downsample = [Downsample(filt_size=filter_size, stride=stride, channels=self.inplanes),] if(stride !=1) else []", "\n", "#             downsample += [conv1x1(self.inplanes, planes * block.expansion, 1),", "\n", "#                 norm_layer(planes * block.expansion)]", "\n", "#             # print(downsample)", "\n", "#             downsample = nn.Sequential(*downsample)", "\n", "#", "\n", "#         layers = []", "\n", "#         layers.append(block(self.inplanes, planes, stride, downsample, groups, norm_layer, filter_size=filter_size))", "\n", "#         self.inplanes = planes * block.expansion", "\n", "#         for _ in range(1, blocks):", "\n", "#             layers.append(block(self.inplanes, planes, groups=groups, norm_layer=norm_layer, filter_size=filter_size))", "\n", "#", "\n", "#         return nn.Sequential(*layers)", "\n", "#", "\n", "#     def forward(self, x):", "\n", "#         x = self.conv1(x)", "\n", "#         x = self.bn1(x)", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.backbone.resnet_atrous.ResNet.forward": [[185, 201], ["resnet_atrous.ResNet.conv1", "resnet_atrous.ResNet.bn1", "resnet_atrous.ResNet.relu", "resnet_atrous.ResNet.maxpool", "resnet_atrous.ResNet.layer1", "resnet_atrous.ResNet.layer2", "resnet_atrous.ResNet.layer3", "resnet_atrous.ResNet.layer4", "len"], "methods", ["None"], ["#         x = self.relu(x)", "\n", "#         x = self.maxpool(x)", "\n", "#", "\n", "#         x = self.layer1(x)", "\n", "#         x = self.layer2(x)", "\n", "#         x = self.layer3(x)", "\n", "#         x = self.layer4(x)", "\n", "#", "\n", "#         x = self.avgpool(x)", "\n", "#         x = x.view(x.size(0), -1)", "\n", "#         x = self.fc(x)", "\n", "#", "\n", "#         return x", "\n", "\n", "\n", "def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "    ", "\"3x3 convolution with padding\"", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.backbone.resnet_atrous.conv3x3": [[10, 14], ["torch.Conv2d"], "function", ["None"], ["# def conv3x3(in_planes, out_planes, stride=1, groups=1):", "\n", "#     \"\"\"3x3 convolution with padding\"\"\"", "\n", "#     return nn.Conv2d(in_planes, out_planes, kernel_size=3, stride=stride,", "\n", "#                  padding=1, groups=groups, bias=False)", "\n", "#", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.backbone.resnet_atrous.resnet18": [[203, 209], ["resnet_atrous.ResNet"], "function", ["None"], ["padding", "=", "dilation", ",", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", "\n", "\n", "\n", "", "class", "BasicBlock", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "expansion", "=", "1", "\n", "\n", "def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.backbone.resnet_atrous.resnet34": [[211, 217], ["resnet_atrous.ResNet"], "function", ["None"], ["        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "padding", "=", "2", "-", "stride", "\n", "\n", "if", "dilation", ">", "1", ":", "\n", "            ", "padding", "=", "dilation", "\n", "\n", "", "dd", "=", "dilation", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.backbone.resnet_atrous.resnet50": [[219, 225], ["resnet_atrous.ResNet"], "function", ["None"], ["if", "downsample", "is", "not", "None", "and", "dilation", ">", "1", ":", "\n", "            ", "dd", "=", "dilation", "//", "2", "\n", "pad", "=", "dd", "\n", "\n", "", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "\n", "stride", "=", "stride", ",", "dilation", "=", "dd", ",", "bias", "=", "False", ",", "\n", "kernel_size", "=", "3", ",", "padding", "=", "pad", ")", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.backbone.mobile_v2.InvertedResidual.__init__": [[27, 51], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU6", "torch.ReLU6", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU6", "torch.ReLU6", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamban_tracker.SiamBANTracker.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inp", ",", "oup", ",", "stride", ",", "expand_ratio", ",", "dilation", "=", "1", ")", ":", "\n", "        ", "super", "(", "InvertedResidual", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "\n", "self", ".", "use_res_connect", "=", "self", ".", "stride", "==", "1", "and", "inp", "==", "oup", "\n", "\n", "padding", "=", "2", "-", "stride", "\n", "if", "dilation", ">", "1", ":", "\n", "            ", "padding", "=", "dilation", "\n", "\n", "", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "# pw", "\n", "nn", ".", "Conv2d", "(", "inp", ",", "inp", "*", "expand_ratio", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "inp", "*", "expand_ratio", ")", ",", "\n", "nn", ".", "ReLU6", "(", "inplace", "=", "True", ")", ",", "\n", "# dw", "\n", "nn", ".", "Conv2d", "(", "inp", "*", "expand_ratio", ",", "inp", "*", "expand_ratio", ",", "3", ",", "\n", "stride", ",", "padding", ",", "dilation", "=", "dilation", ",", "\n", "groups", "=", "inp", "*", "expand_ratio", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "inp", "*", "expand_ratio", ")", ",", "\n", "nn", ".", "ReLU6", "(", "inplace", "=", "True", ")", ",", "\n", "# pw-linear", "\n", "nn", ".", "Conv2d", "(", "inp", "*", "expand_ratio", ",", "oup", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "oup", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.backbone.mobile_v2.InvertedResidual.forward": [[53, 58], ["mobile_v2.InvertedResidual.conv", "mobile_v2.InvertedResidual.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "use_res_connect", ":", "\n", "            ", "return", "x", "+", "self", ".", "conv", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "conv", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.backbone.mobile_v2.MobileNetV2.__init__": [[61, 122], ["torch.Sequential.__init__", "int", "mobile_v2.MobileNetV2.add_module", "enumerate", "int", "int", "mobile_v2.conv_bn", "int", "range", "mobile_v2.MobileNetV2.add_module", "torch.Sequential", "torch.Sequential", "layers.append", "layers.append", "max", "mobile_v2.InvertedResidual", "mobile_v2.InvertedResidual"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamban_tracker.SiamBANTracker.__init__", "home.repos.pwc.inspect_result.vision4robotics_udat.backbone.mobile_v2.conv_bn"], ["    ", "def", "__init__", "(", "self", ",", "width_mult", "=", "1.0", ",", "used_layers", "=", "[", "3", ",", "5", ",", "7", "]", ")", ":", "\n", "        ", "super", "(", "MobileNetV2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "interverted_residual_setting", "=", "[", "\n", "# t, c, n, s", "\n", "[", "1", ",", "16", ",", "1", ",", "1", ",", "1", "]", ",", "\n", "[", "6", ",", "24", ",", "2", ",", "2", ",", "1", "]", ",", "\n", "[", "6", ",", "32", ",", "3", ",", "2", ",", "1", "]", ",", "\n", "[", "6", ",", "64", ",", "4", ",", "2", ",", "1", "]", ",", "\n", "[", "6", ",", "96", ",", "3", ",", "1", ",", "1", "]", ",", "\n", "[", "6", ",", "160", ",", "3", ",", "2", ",", "1", "]", ",", "\n", "[", "6", ",", "320", ",", "1", ",", "1", ",", "1", "]", ",", "\n", "]", "\n", "# 0,2,3,4,6", "\n", "\n", "self", ".", "interverted_residual_setting", "=", "[", "\n", "# t, c, n, s", "\n", "[", "1", ",", "16", ",", "1", ",", "1", ",", "1", "]", ",", "\n", "[", "6", ",", "24", ",", "2", ",", "2", ",", "1", "]", ",", "\n", "[", "6", ",", "32", ",", "3", ",", "2", ",", "1", "]", ",", "\n", "[", "6", ",", "64", ",", "4", ",", "1", ",", "2", "]", ",", "\n", "[", "6", ",", "96", ",", "3", ",", "1", ",", "2", "]", ",", "\n", "[", "6", ",", "160", ",", "3", ",", "1", ",", "4", "]", ",", "\n", "[", "6", ",", "320", ",", "1", ",", "1", ",", "4", "]", ",", "\n", "]", "\n", "\n", "self", ".", "channels", "=", "[", "24", ",", "32", ",", "96", ",", "320", "]", "\n", "self", ".", "channels", "=", "[", "int", "(", "c", "*", "width_mult", ")", "for", "c", "in", "self", ".", "channels", "]", "\n", "\n", "input_channel", "=", "int", "(", "32", "*", "width_mult", ")", "\n", "self", ".", "last_channel", "=", "int", "(", "1280", "*", "width_mult", ")", "if", "width_mult", ">", "1.0", "else", "1280", "\n", "\n", "self", ".", "add_module", "(", "'layer0'", ",", "conv_bn", "(", "3", ",", "input_channel", ",", "2", ",", "0", ")", ")", "\n", "\n", "last_dilation", "=", "1", "\n", "\n", "self", ".", "used_layers", "=", "used_layers", "\n", "\n", "for", "idx", ",", "(", "t", ",", "c", ",", "n", ",", "s", ",", "d", ")", "in", "enumerate", "(", "self", ".", "interverted_residual_setting", ",", "start", "=", "1", ")", ":", "\n", "            ", "output_channel", "=", "int", "(", "c", "*", "width_mult", ")", "\n", "\n", "layers", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "                ", "if", "i", "==", "0", ":", "\n", "                    ", "if", "d", "==", "last_dilation", ":", "\n", "                        ", "dd", "=", "d", "\n", "", "else", ":", "\n", "                        ", "dd", "=", "max", "(", "d", "//", "2", ",", "1", ")", "\n", "", "layers", ".", "append", "(", "InvertedResidual", "(", "input_channel", ",", "\n", "output_channel", ",", "s", ",", "t", ",", "dd", ")", ")", "\n", "", "else", ":", "\n", "                    ", "layers", ".", "append", "(", "InvertedResidual", "(", "input_channel", ",", "\n", "output_channel", ",", "1", ",", "t", ",", "d", ")", ")", "\n", "", "input_channel", "=", "output_channel", "\n", "\n", "", "last_dilation", "=", "d", "\n", "\n", "self", ".", "add_module", "(", "'layer%d'", "%", "(", "idx", ")", ",", "nn", ".", "Sequential", "(", "*", "layers", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.backbone.mobile_v2.MobileNetV2.forward": [[123, 132], ["range", "outputs.append", "getattr"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "outputs", "=", "[", "]", "\n", "for", "idx", "in", "range", "(", "8", ")", ":", "\n", "            ", "name", "=", "\"layer%d\"", "%", "idx", "\n", "x", "=", "getattr", "(", "self", ",", "name", ")", "(", "x", ")", "\n", "outputs", ".", "append", "(", "x", ")", "\n", "", "p0", ",", "p1", ",", "p2", ",", "p3", ",", "p4", "=", "[", "outputs", "[", "i", "]", "for", "i", "in", "[", "1", ",", "2", ",", "3", ",", "5", ",", "7", "]", "]", "\n", "out", "=", "[", "outputs", "[", "i", "]", "for", "i", "in", "self", ".", "used_layers", "]", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.backbone.mobile_v2.conv_bn": [[10, 15], ["torch.Sequential", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU6"], "function", ["None"], ["def", "conv_bn", "(", "inp", ",", "oup", ",", "stride", ",", "padding", "=", "1", ")", ":", "\n", "    ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "inp", ",", "oup", ",", "3", ",", "stride", ",", "padding", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "oup", ")", ",", "\n", "nn", ".", "ReLU6", "(", "inplace", "=", "True", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.backbone.mobile_v2.conv_1x1_bn": [[18, 23], ["torch.Sequential", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU6"], "function", ["None"], ["", "def", "conv_1x1_bn", "(", "inp", ",", "oup", ")", ":", "\n", "    ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "inp", ",", "oup", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "oup", ")", ",", "\n", "nn", ".", "ReLU6", "(", "inplace", "=", "True", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.backbone.mobile_v2.mobilenetv2": [[134, 137], ["mobile_v2.MobileNetV2"], "function", ["None"], ["", "", "def", "mobilenetv2", "(", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "MobileNetV2", "(", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.backbone.alexnet.AlexNetLegacy.__init__": [[12, 35], ["list", "torch.Module.__init__", "torch.Sequential", "map", "torch.Conv2d", "torch.BatchNorm2d", "torch.MaxPool2d", "torch.ReLU", "torch.Conv2d", "torch.BatchNorm2d", "torch.MaxPool2d", "torch.ReLU", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU", "torch.Conv2d", "torch.BatchNorm2d", "int"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamban_tracker.SiamBANTracker.__init__"], ["def", "__init__", "(", "self", ",", "width_mult", "=", "1", ")", ":", "\n", "        ", "configs", "=", "list", "(", "map", "(", "lambda", "x", ":", "3", "if", "x", "==", "3", "else", "\n", "int", "(", "x", "*", "width_mult", ")", ",", "AlexNet", ".", "configs", ")", ")", "\n", "super", "(", "AlexNetLegacy", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "configs", "[", "0", "]", ",", "configs", "[", "1", "]", ",", "kernel_size", "=", "11", ",", "stride", "=", "2", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "configs", "[", "1", "]", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "configs", "[", "1", "]", ",", "configs", "[", "2", "]", ",", "kernel_size", "=", "5", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "configs", "[", "2", "]", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "configs", "[", "2", "]", ",", "configs", "[", "3", "]", ",", "kernel_size", "=", "3", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "configs", "[", "3", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "configs", "[", "3", "]", ",", "configs", "[", "4", "]", ",", "kernel_size", "=", "3", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "configs", "[", "4", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "configs", "[", "4", "]", ",", "configs", "[", "5", "]", ",", "kernel_size", "=", "3", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "configs", "[", "5", "]", ")", ",", "\n", ")", "\n", "self", ".", "feature_size", "=", "configs", "[", "5", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.backbone.alexnet.AlexNetLegacy.forward": [[36, 39], ["alexnet.AlexNetLegacy.features"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.backbone.alexnet.AlexNet.__init__": [[44, 76], ["list", "torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "map", "torch.Conv2d", "torch.BatchNorm2d", "torch.MaxPool2d", "torch.ReLU", "torch.Conv2d", "torch.BatchNorm2d", "torch.MaxPool2d", "torch.ReLU", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU", "torch.Conv2d", "torch.BatchNorm2d", "int"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamban_tracker.SiamBANTracker.__init__"], ["def", "__init__", "(", "self", ",", "width_mult", "=", "1", ")", ":", "\n", "        ", "configs", "=", "list", "(", "map", "(", "lambda", "x", ":", "3", "if", "x", "==", "3", "else", "\n", "int", "(", "x", "*", "width_mult", ")", ",", "AlexNet", ".", "configs", ")", ")", "\n", "super", "(", "AlexNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layer1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "configs", "[", "0", "]", ",", "configs", "[", "1", "]", ",", "kernel_size", "=", "11", ",", "stride", "=", "2", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "configs", "[", "1", "]", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "self", ".", "layer2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "configs", "[", "1", "]", ",", "configs", "[", "2", "]", ",", "kernel_size", "=", "5", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "configs", "[", "2", "]", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "self", ".", "layer3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "configs", "[", "2", "]", ",", "configs", "[", "3", "]", ",", "kernel_size", "=", "3", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "configs", "[", "3", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "self", ".", "layer4", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "configs", "[", "3", "]", ",", "configs", "[", "4", "]", ",", "kernel_size", "=", "3", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "configs", "[", "4", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "\n", "self", ".", "layer5", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "configs", "[", "4", "]", ",", "configs", "[", "5", "]", ",", "kernel_size", "=", "3", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "configs", "[", "5", "]", ")", ",", "\n", ")", "\n", "self", ".", "feature_size", "=", "configs", "[", "5", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.backbone.alexnet.AlexNet.forward": [[77, 84], ["alexnet.AlexNet.layer1", "alexnet.AlexNet.layer2", "alexnet.AlexNet.layer3", "alexnet.AlexNet.layer4", "alexnet.AlexNet.layer5"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "x", "=", "self", ".", "layer5", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.backbone.alexnet.alexnetlegacy": [[86, 88], ["alexnet.AlexNetLegacy"], "function", ["None"], ["", "", "def", "alexnetlegacy", "(", "**", "kwargs", ")", ":", "\n", "    ", "return", "AlexNetLegacy", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.backbone.alexnet.alexnet": [[90, 92], ["alexnet.AlexNet"], "function", ["None"], ["", "def", "alexnet", "(", "**", "kwargs", ")", ":", "\n", "    ", "return", "AlexNet", "(", "**", "kwargs", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.vision4robotics_udat.backbone.__init__.get_backbone": [[22, 24], ["None"], "function", ["None"], ["mu2_sq", "=", "mu2", ".", "pow", "(", "2", ")", "\n", "mu1_mu2", "=", "mu1", "*", "mu2", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.neck.tran.Cattention.__init__": [[15, 27], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.AdaptiveAvgPool2d", "torch.nn.AdaptiveAvgPool2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamban_tracker.SiamBANTracker.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_dim", ")", ":", "\n", "        ", "super", "(", "Cattention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "chanel_in", "=", "in_dim", "\n", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "in_dim", "*", "2", ",", "in_dim", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ")", ",", "\n", ")", "\n", "self", ".", "avg_pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "linear1", "=", "nn", ".", "Conv2d", "(", "in_dim", ",", "in_dim", "//", "6", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "linear2", "=", "nn", ".", "Conv2d", "(", "in_dim", "//", "6", ",", "in_dim", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "gamma", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ")", ")", "\n", "self", ".", "activation", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ",", "y", ")", ":", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.neck.tran.Cattention.forward": [[27, 33], ["tran.Cattention.linear2", "tran.Cattention.dropout", "tran.Cattention.conv1", "tran.Cattention.activation", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "tran.Cattention.linear1", "tran.Cattention.avg_pool"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "ww", "=", "self", ".", "linear2", "(", "self", ".", "dropout", "(", "self", ".", "activation", "(", "self", ".", "linear1", "(", "self", ".", "avg_pool", "(", "y", ")", ")", ")", ")", ")", "\n", "weight", "=", "self", ".", "conv1", "(", "torch", ".", "cat", "(", "(", "x", ",", "y", ")", ",", "1", ")", ")", "*", "ww", "\n", "\n", "\n", "return", "x", "+", "self", ".", "gamma", "*", "weight", "*", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.neck.tran.Transformer.__init__": [[39, 62], ["torch.nn.Module.__init__", "tran.Transformer._reset_parameters", "tran.TransformerEncoderLayer", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "tran.TransformerEncoder", "tran.TransformerDecoderLayer", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "tran.TransformerDecoder"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamban_tracker.SiamBANTracker.__init__", "home.repos.pwc.inspect_result.vision4robotics_udat.neck.trans.Transformer._reset_parameters"], ["    ", "def", "__init__", "(", "self", ",", "d_model", ":", "int", "=", "512", ",", "nhead", ":", "int", "=", "8", ",", "num_encoder_layers", ":", "int", "=", "6", ",", "\n", "num_decoder_layers", ":", "int", "=", "6", ",", "dim_feedforward", ":", "int", "=", "2048", ",", "dropout", ":", "float", "=", "0.1", ",", "\n", "activation", ":", "str", "=", "\"relu\"", ",", "custom_encoder", ":", "Optional", "[", "Any", "]", "=", "None", ",", "custom_decoder", ":", "Optional", "[", "Any", "]", "=", "None", ")", "->", "None", ":", "\n", "        ", "super", "(", "Transformer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "custom_encoder", "is", "not", "None", ":", "\n", "            ", "self", ".", "encoder", "=", "custom_encoder", "\n", "", "else", ":", "\n", "            ", "encoder_layer", "=", "TransformerEncoderLayer", "(", "d_model", ",", "nhead", ",", "dim_feedforward", ",", "dropout", ",", "activation", ")", "\n", "encoder_norm", "=", "nn", ".", "LayerNorm", "(", "d_model", ")", "\n", "self", ".", "encoder", "=", "TransformerEncoder", "(", "encoder_layer", ",", "num_encoder_layers", ",", "encoder_norm", ")", "\n", "\n", "", "if", "custom_decoder", "is", "not", "None", ":", "\n", "            ", "self", ".", "decoder", "=", "custom_decoder", "\n", "", "else", ":", "\n", "            ", "decoder_layer", "=", "TransformerDecoderLayer", "(", "d_model", ",", "nhead", ",", "dim_feedforward", ",", "dropout", ",", "activation", ")", "\n", "decoder_norm", "=", "nn", ".", "LayerNorm", "(", "d_model", ")", "\n", "self", ".", "decoder", "=", "TransformerDecoder", "(", "decoder_layer", ",", "num_decoder_layers", ",", "decoder_norm", ")", "\n", "\n", "", "self", ".", "_reset_parameters", "(", ")", "\n", "\n", "self", ".", "d_model", "=", "d_model", "\n", "self", ".", "nhead", "=", "nhead", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.neck.tran.Transformer.forward": [[63, 78], ["tran.Transformer.encoder", "tran.Transformer.decoder", "src.size", "tgt.size", "RuntimeError", "RuntimeError", "src.size", "tgt.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "src", ":", "Tensor", ",", "srcc", ":", "Tensor", ",", "tgt", ":", "Tensor", ",", "src_mask", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "tgt_mask", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "\n", "memory_mask", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "src_key_padding_mask", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "\n", "tgt_key_padding_mask", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "memory_key_padding_mask", ":", "Optional", "[", "Tensor", "]", "=", "None", ")", "->", "Tensor", ":", "\n", "\n", "        ", "if", "src", ".", "size", "(", "1", ")", "!=", "tgt", ".", "size", "(", "1", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"the batch number of src and tgt must be equal\"", ")", "\n", "\n", "", "if", "src", ".", "size", "(", "2", ")", "!=", "self", ".", "d_model", "or", "tgt", ".", "size", "(", "2", ")", "!=", "self", ".", "d_model", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"the feature number of src and tgt must be equal to d_model\"", ")", "\n", "\n", "", "memory", "=", "self", ".", "encoder", "(", "src", ",", "srcc", ",", "mask", "=", "src_mask", ",", "src_key_padding_mask", "=", "src_key_padding_mask", ")", "\n", "output", "=", "self", ".", "decoder", "(", "tgt", ",", "memory", ",", "tgt_mask", "=", "tgt_mask", ",", "memory_mask", "=", "memory_mask", ",", "\n", "tgt_key_padding_mask", "=", "tgt_key_padding_mask", ",", "\n", "memory_key_padding_mask", "=", "memory_key_padding_mask", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.neck.tran.Transformer.generate_square_subsequent_mask": [[79, 86], ["mask.float().masked_fill().masked_fill.float().masked_fill().masked_fill.float().masked_fill().masked_fill", "float", "mask.float().masked_fill().masked_fill.float().masked_fill().masked_fill.float().masked_fill", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "float", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "mask.float().masked_fill().masked_fill.float().masked_fill().masked_fill.float"], "methods", ["None"], ["", "def", "generate_square_subsequent_mask", "(", "self", ",", "sz", ":", "int", ")", "->", "Tensor", ":", "\n", "        ", "r\"\"\"Generate a square mask for the sequence. The masked positions are filled with float('-inf').\n            Unmasked positions are filled with float(0.0).\n        \"\"\"", "\n", "mask", "=", "(", "torch", ".", "triu", "(", "torch", ".", "ones", "(", "sz", ",", "sz", ")", ")", "==", "1", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "mask", "=", "mask", ".", "float", "(", ")", ".", "masked_fill", "(", "mask", "==", "0", ",", "float", "(", "'-inf'", ")", ")", ".", "masked_fill", "(", "mask", "==", "1", ",", "float", "(", "0.0", ")", ")", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.neck.tran.Transformer._reset_parameters": [[87, 93], ["tran.Transformer.parameters", "p.dim", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_"], "methods", ["None"], ["", "def", "_reset_parameters", "(", "self", ")", ":", "\n", "        ", "r\"\"\"Initiate parameters in the transformer model.\"\"\"", "\n", "\n", "for", "p", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "if", "p", ".", "dim", "(", ")", ">", "1", ":", "\n", "                ", "xavier_uniform_", "(", "p", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.neck.tran.TransformerEncoder.__init__": [[111, 116], ["torch.nn.Module.__init__", "tran._get_clones"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamban_tracker.SiamBANTracker.__init__", "home.repos.pwc.inspect_result.vision4robotics_udat.neck.trans._get_clones"], ["def", "__init__", "(", "self", ",", "encoder_layer", ",", "num_layers", ",", "norm", "=", "None", ")", ":", "\n", "        ", "super", "(", "TransformerEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layers", "=", "_get_clones", "(", "encoder_layer", ",", "num_layers", ")", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "self", ".", "norm", "=", "norm", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.neck.tran.TransformerEncoder.forward": [[117, 137], ["mod", "tran.TransformerEncoder.norm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "src", ":", "Tensor", ",", "srcc", ":", "Tensor", ",", "mask", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "src_key_padding_mask", ":", "Optional", "[", "Tensor", "]", "=", "None", ")", "->", "Tensor", ":", "\n", "        ", "r\"\"\"Pass the input through the encoder layers in turn.\n\n        Args:\n            src: the sequence to the encoder (required).\n            mask: the mask for the src sequence (optional).\n            src_key_padding_mask: the mask for the src keys per batch (optional).\n\n        Shape:\n            see the docs in Transformer class.\n        \"\"\"", "\n", "output", "=", "src", "\n", "\n", "for", "mod", "in", "self", ".", "layers", ":", "\n", "            ", "output", "=", "mod", "(", "output", ",", "srcc", ",", "src_mask", "=", "mask", ",", "src_key_padding_mask", "=", "src_key_padding_mask", ")", "\n", "\n", "", "if", "self", ".", "norm", "is", "not", "None", ":", "\n", "            ", "output", "=", "self", ".", "norm", "(", "output", ")", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.neck.tran.TransformerDecoder.__init__": [[156, 161], ["torch.nn.Module.__init__", "tran._get_clones"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamban_tracker.SiamBANTracker.__init__", "home.repos.pwc.inspect_result.vision4robotics_udat.neck.trans._get_clones"], ["def", "__init__", "(", "self", ",", "decoder_layer", ",", "num_layers", ",", "norm", "=", "None", ")", ":", "\n", "        ", "super", "(", "TransformerDecoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layers", "=", "_get_clones", "(", "decoder_layer", ",", "num_layers", ")", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "self", ".", "norm", "=", "norm", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.neck.tran.TransformerDecoder.forward": [[162, 190], ["mod", "tran.TransformerDecoder.norm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "tgt", ":", "Tensor", ",", "memory", ":", "Tensor", ",", "tgt_mask", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "\n", "memory_mask", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "tgt_key_padding_mask", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "\n", "memory_key_padding_mask", ":", "Optional", "[", "Tensor", "]", "=", "None", ")", "->", "Tensor", ":", "\n", "        ", "r\"\"\"Pass the inputs (and mask) through the decoder layer in turn.\n\n        Args:\n            tgt: the sequence to the decoder (required).\n            memory: the sequence from the last layer of the encoder (required).\n            tgt_mask: the mask for the tgt sequence (optional).\n            memory_mask: the mask for the memory sequence (optional).\n            tgt_key_padding_mask: the mask for the tgt keys per batch (optional).\n            memory_key_padding_mask: the mask for the memory keys per batch (optional).\n\n        Shape:\n            see the docs in Transformer class.\n        \"\"\"", "\n", "output", "=", "tgt", "\n", "\n", "for", "mod", "in", "self", ".", "layers", ":", "\n", "            ", "output", "=", "mod", "(", "output", ",", "memory", ",", "tgt_mask", "=", "tgt_mask", ",", "\n", "memory_mask", "=", "memory_mask", ",", "\n", "tgt_key_padding_mask", "=", "tgt_key_padding_mask", ",", "\n", "memory_key_padding_mask", "=", "memory_key_padding_mask", ")", "\n", "\n", "", "if", "self", ".", "norm", "is", "not", "None", ":", "\n", "            ", "output", "=", "self", ".", "norm", "(", "output", ")", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.neck.tran.TransformerEncoderLayer.__init__": [[212, 231], ["torch.nn.Module.__init__", "torch.nn.MultiheadAttention", "torch.nn.MultiheadAttention", "tran.Cattention", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "tran._get_activation_fn"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamban_tracker.SiamBANTracker.__init__", "home.repos.pwc.inspect_result.vision4robotics_udat.neck.trans._get_activation_fn"], ["def", "__init__", "(", "self", ",", "d_model", ",", "nhead", ",", "dim_feedforward", "=", "2048", ",", "dropout", "=", "0.1", ",", "activation", "=", "\"relu\"", ")", ":", "\n", "        ", "super", "(", "TransformerEncoderLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "self_attn", "=", "MultiheadAttention", "(", "d_model", ",", "nhead", ",", "dropout", "=", "dropout", ")", "\n", "channel", "=", "256", "\n", "self", ".", "cross_attn", "=", "Cattention", "(", "channel", ")", "\n", "\n", "# Implementation of Feedforward model", "\n", "\n", "\n", "self", ".", "linear1", "=", "nn", ".", "Linear", "(", "d_model", ",", "dim_feedforward", ")", "\n", "self", ".", "dropout", "=", "Dropout", "(", "dropout", ")", "\n", "self", ".", "linear2", "=", "nn", ".", "Linear", "(", "dim_feedforward", ",", "d_model", ")", "\n", "self", ".", "norm0", "=", "nn", ".", "LayerNorm", "(", "d_model", ")", "\n", "self", ".", "norm1", "=", "nn", ".", "LayerNorm", "(", "d_model", ")", "\n", "self", ".", "norm2", "=", "nn", ".", "LayerNorm", "(", "d_model", ")", "\n", "self", ".", "dropout1", "=", "Dropout", "(", "dropout", ")", "\n", "self", ".", "dropout2", "=", "Dropout", "(", "dropout", ")", "\n", "\n", "self", ".", "activation", "=", "_get_activation_fn", "(", "activation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.neck.tran.TransformerEncoderLayer.__setstate__": [[232, 236], ["super().__setstate__"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.neck.trans.TransformerDecoderLayer.__setstate__"], ["", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "if", "'activation'", "not", "in", "state", ":", "\n", "            ", "state", "[", "'activation'", "]", "=", "F", ".", "relu", "\n", "", "super", "(", "TransformerEncoderLayer", ",", "self", ")", ".", "__setstate__", "(", "state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.neck.tran.TransformerEncoderLayer.forward": [[237, 253], ["tran.TransformerEncoderLayer.permute().size", "tran.TransformerEncoderLayer.norm0", "tran.TransformerEncoderLayer.norm1", "tran.TransformerEncoderLayer.cross_attn().view().permute", "tran.TransformerEncoderLayer.linear2", "tran.TransformerEncoderLayer.norm2", "tran.TransformerEncoderLayer.self_attn", "tran.TransformerEncoderLayer.dropout1", "tran.TransformerEncoderLayer.dropout", "tran.TransformerEncoderLayer.dropout2", "tran.TransformerEncoderLayer.permute", "tran.TransformerEncoderLayer.cross_attn().view", "tran.TransformerEncoderLayer.activation", "tran.TransformerEncoderLayer.linear1", "tran.TransformerEncoderLayer.cross_attn", "tran.TransformerEncoderLayer.view", "srcc.contiguous().view", "int", "int", "int", "int", "srcc.contiguous"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "src", ":", "Tensor", ",", "srcc", ":", "Tensor", ",", "src_mask", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "src_key_padding_mask", ":", "Optional", "[", "Tensor", "]", "=", "None", ")", "->", "Tensor", ":", "\n", "\n", "        ", "b", ",", "c", ",", "s", "=", "src", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "size", "(", ")", "\n", "input_feature", "=", "self", ".", "norm0", "(", "src", "+", "srcc", ")", "\n", "src2", "=", "self", ".", "self_attn", "(", "input_feature", ",", "input_feature", ",", "src", ",", "attn_mask", "=", "src_mask", ",", "\n", "key_padding_mask", "=", "src_key_padding_mask", ")", "[", "0", "]", "\n", "src", "=", "src", "+", "self", ".", "dropout1", "(", "src2", ")", "\n", "src", "=", "self", ".", "norm1", "(", "src", ")", "\n", "\n", "src", "=", "self", ".", "cross_attn", "(", "src", ".", "view", "(", "b", ",", "c", ",", "int", "(", "s", "**", "0.5", ")", ",", "int", "(", "s", "**", "0.5", ")", ")", ",", "srcc", ".", "contiguous", "(", ")", ".", "view", "(", "b", ",", "c", ",", "int", "(", "s", "**", "0.5", ")", ",", "int", "(", "s", "**", "0.5", ")", ")", ")", ".", "view", "(", "b", ",", "c", ",", "-", "1", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "\n", "\n", "src2", "=", "self", ".", "linear2", "(", "self", ".", "dropout", "(", "self", ".", "activation", "(", "self", ".", "linear1", "(", "src", ")", ")", ")", ")", "\n", "src", "=", "src", "+", "self", ".", "dropout2", "(", "src2", ")", "\n", "src", "=", "self", ".", "norm2", "(", "src", ")", "\n", "return", "src", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.neck.tran.TransformerDecoderLayer.__init__": [[277, 294], ["torch.nn.Module.__init__", "torch.nn.MultiheadAttention", "torch.nn.MultiheadAttention", "torch.nn.MultiheadAttention", "torch.nn.MultiheadAttention", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "tran._get_activation_fn"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamban_tracker.SiamBANTracker.__init__", "home.repos.pwc.inspect_result.vision4robotics_udat.neck.trans._get_activation_fn"], ["def", "__init__", "(", "self", ",", "d_model", ",", "nhead", ",", "dim_feedforward", "=", "2048", ",", "dropout", "=", "0.1", ",", "activation", "=", "\"relu\"", ")", ":", "\n", "        ", "super", "(", "TransformerDecoderLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "self_attn", "=", "MultiheadAttention", "(", "d_model", ",", "nhead", ",", "dropout", "=", "dropout", ")", "\n", "self", ".", "multihead_attn", "=", "MultiheadAttention", "(", "d_model", ",", "nhead", ",", "dropout", "=", "dropout", ")", "\n", "# Implementation of Feedforward model", "\n", "self", ".", "linear1", "=", "nn", ".", "Linear", "(", "d_model", ",", "dim_feedforward", ")", "\n", "self", ".", "dropout", "=", "Dropout", "(", "dropout", ")", "\n", "self", ".", "linear2", "=", "nn", ".", "Linear", "(", "dim_feedforward", ",", "d_model", ")", "\n", "\n", "self", ".", "norm1", "=", "nn", ".", "LayerNorm", "(", "d_model", ")", "\n", "self", ".", "norm2", "=", "nn", ".", "LayerNorm", "(", "d_model", ")", "\n", "self", ".", "norm3", "=", "nn", ".", "LayerNorm", "(", "d_model", ")", "\n", "self", ".", "dropout1", "=", "Dropout", "(", "dropout", ")", "\n", "self", ".", "dropout2", "=", "Dropout", "(", "dropout", ")", "\n", "self", ".", "dropout3", "=", "Dropout", "(", "dropout", ")", "\n", "\n", "self", ".", "activation", "=", "_get_activation_fn", "(", "activation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.neck.tran.TransformerDecoderLayer.__setstate__": [[295, 299], ["super().__setstate__"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.neck.trans.TransformerDecoderLayer.__setstate__"], ["", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "if", "'activation'", "not", "in", "state", ":", "\n", "            ", "state", "[", "'activation'", "]", "=", "F", ".", "relu", "\n", "", "super", "(", "TransformerDecoderLayer", ",", "self", ")", ".", "__setstate__", "(", "state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.neck.tran.TransformerDecoderLayer.forward": [[300, 327], ["tran.TransformerDecoderLayer.norm1", "tran.TransformerDecoderLayer.norm2", "tran.TransformerDecoderLayer.linear2", "tran.TransformerDecoderLayer.norm3", "tran.TransformerDecoderLayer.self_attn", "tran.TransformerDecoderLayer.dropout1", "tran.TransformerDecoderLayer.multihead_attn", "tran.TransformerDecoderLayer.dropout2", "tran.TransformerDecoderLayer.dropout", "tran.TransformerDecoderLayer.dropout3", "tran.TransformerDecoderLayer.activation", "tran.TransformerDecoderLayer.linear1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "tgt", ":", "Tensor", ",", "memory", ":", "Tensor", ",", "tgt_mask", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "memory_mask", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "\n", "tgt_key_padding_mask", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "memory_key_padding_mask", ":", "Optional", "[", "Tensor", "]", "=", "None", ")", "->", "Tensor", ":", "\n", "        ", "r\"\"\"Pass the inputs (and mask) through the decoder layer.\n\n        Args:\n            tgt: the sequence to the decoder layer (required).\n            memory: the sequence from the last layer of the encoder (required).\n            tgt_mask: the mask for the tgt sequence (optional).\n            memory_mask: the mask for the memory sequence (optional).\n            tgt_key_padding_mask: the mask for the tgt keys per batch (optional).\n            memory_key_padding_mask: the mask for the memory keys per batch (optional).\n\n        Shape:\n            see the docs in Transformer class.\n        \"\"\"", "\n", "tgt2", "=", "self", ".", "self_attn", "(", "tgt", ",", "tgt", ",", "tgt", ",", "attn_mask", "=", "tgt_mask", ",", "\n", "key_padding_mask", "=", "tgt_key_padding_mask", ")", "[", "0", "]", "\n", "tgt", "=", "tgt", "+", "self", ".", "dropout1", "(", "tgt2", ")", "\n", "tgt", "=", "self", ".", "norm1", "(", "tgt", ")", "\n", "tgt2", "=", "self", ".", "multihead_attn", "(", "tgt", ",", "memory", ",", "memory", ",", "attn_mask", "=", "memory_mask", ",", "\n", "key_padding_mask", "=", "memory_key_padding_mask", ")", "[", "0", "]", "\n", "tgt", "=", "tgt", "+", "self", ".", "dropout2", "(", "tgt2", ")", "\n", "tgt", "=", "self", ".", "norm2", "(", "tgt", ")", "\n", "tgt2", "=", "self", ".", "linear2", "(", "self", ".", "dropout", "(", "self", ".", "activation", "(", "self", ".", "linear1", "(", "tgt", ")", ")", ")", ")", "\n", "tgt", "=", "tgt", "+", "self", ".", "dropout3", "(", "tgt2", ")", "\n", "tgt", "=", "self", ".", "norm3", "(", "tgt", ")", "\n", "return", "tgt", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.neck.tran._get_clones": [[329, 331], ["torch.nn.ModuleList", "copy.deepcopy", "range"], "function", ["None"], ["", "", "def", "_get_clones", "(", "module", ",", "N", ")", ":", "\n", "    ", "return", "ModuleList", "(", "[", "copy", ".", "deepcopy", "(", "module", ")", "for", "i", "in", "range", "(", "N", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.neck.tran._get_activation_fn": [[333, 340], ["RuntimeError"], "function", ["None"], ["", "def", "_get_activation_fn", "(", "activation", ")", ":", "\n", "    ", "if", "activation", "==", "\"relu\"", ":", "\n", "        ", "return", "F", ".", "relu", "\n", "", "elif", "activation", "==", "\"gelu\"", ":", "\n", "        ", "return", "F", ".", "gelu", "\n", "\n", "", "raise", "RuntimeError", "(", "\"activation should be relu/gelu, not {}\"", ".", "format", "(", "activation", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.neck.neck.AdjustLayer.__init__": [[13, 18], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamban_tracker.SiamBANTracker.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ")", ":", "\n", "        ", "super", "(", "AdjustLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.neck.neck.AdjustLayer.forward": [[20, 27], ["neck.AdjustLayer.downsample", "neck.AdjustLayer.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "downsample", "(", "x", ")", "\n", "if", "x", ".", "size", "(", "3", ")", "<", "20", ":", "\n", "            ", "l", "=", "4", "\n", "r", "=", "l", "+", "7", "\n", "x", "=", "x", "[", ":", ",", ":", ",", "l", ":", "r", ",", "l", ":", "r", "]", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.neck.neck.AdjustAllLayer.__init__": [[30, 39], ["torch.Module.__init__", "len", "neck.AdjustLayer", "range", "neck.AdjustAllLayer.add_module", "neck.AdjustLayer", "str"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamban_tracker.SiamBANTracker.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ")", ":", "\n", "        ", "super", "(", "AdjustAllLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num", "=", "len", "(", "out_channels", ")", "\n", "if", "self", ".", "num", "==", "1", ":", "\n", "            ", "self", ".", "downsample", "=", "AdjustLayer", "(", "in_channels", "[", "0", "]", ",", "out_channels", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "            ", "for", "i", "in", "range", "(", "self", ".", "num", ")", ":", "\n", "                ", "self", ".", "add_module", "(", "'downsample'", "+", "str", "(", "i", "+", "2", ")", ",", "\n", "AdjustLayer", "(", "in_channels", "[", "i", "]", ",", "out_channels", "[", "i", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.neck.neck.AdjustAllLayer.forward": [[40, 49], ["neck.AdjustAllLayer.downsample", "range", "getattr", "out.append", "getattr.", "str"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "features", ")", ":", "\n", "        ", "if", "self", ".", "num", "==", "1", ":", "\n", "            ", "return", "self", ".", "downsample", "(", "features", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num", ")", ":", "\n", "                ", "adj_layer", "=", "getattr", "(", "self", ",", "'downsample'", "+", "str", "(", "i", "+", "2", ")", ")", "\n", "out", ".", "append", "(", "adj_layer", "(", "features", "[", "i", "]", ")", ".", "contiguous", "(", ")", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.neck.neck.Adjust_Transformer.__init__": [[52, 60], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "neck.Adjust_Transformer.reset_parameters", "siamban.models.neck.trans.Transformer"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamban_tracker.SiamBANTracker.__init__", "home.repos.pwc.inspect_result.vision4robotics_udat.neck.neck.Adjust_Transformer.reset_parameters"], ["        ", "super", "(", "Adjust_Transformer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "row_embed", "=", "nn", ".", "Embedding", "(", "50", ",", "channels", "//", "2", ")", "\n", "self", ".", "col_embed", "=", "nn", ".", "Embedding", "(", "50", ",", "channels", "//", "2", ")", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n", "self", ".", "transformer", "=", "Transformer", "(", "channels", ",", "nhead", "=", "8", ",", "num_encoder_layers", "=", "1", ",", "num_decoder_layers", "=", "0", ")", "\n", "\n", "", "def", "reset_parameters", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.neck.neck.Adjust_Transformer.reset_parameters": [[61, 64], ["torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_"], "methods", ["None"], ["        ", "nn", ".", "init", ".", "uniform_", "(", "self", ".", "row_embed", ".", "weight", ")", "\n", "nn", ".", "init", ".", "uniform_", "(", "self", ".", "col_embed", ".", "weight", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x_f", ")", ":", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.neck.neck.Adjust_Transformer.forward": [[65, 83], ["torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "neck.Adjust_Transformer.col_embed", "neck.Adjust_Transformer.row_embed", "torch.cat().permute().unsqueeze().repeat", "torch.cat().permute().unsqueeze().repeat", "torch.cat().permute().unsqueeze().repeat", "torch.cat().permute().unsqueeze().repeat", "x_f.permute().view.permute().view.size", "neck.Adjust_Transformer.transformer", "x_f.permute().view.permute().view.permute().view", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.cat().permute().unsqueeze", "torch.cat().permute().unsqueeze", "torch.cat().permute().unsqueeze", "torch.cat().permute().unsqueeze", "x_f.permute().view.permute().view.permute", "torch.cat().permute", "torch.cat().permute", "torch.cat().permute", "torch.cat().permute", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "neck.Adjust_Transformer.unsqueeze().repeat", "neck.Adjust_Transformer.unsqueeze().repeat", "neck.Adjust_Transformer.unsqueeze", "neck.Adjust_Transformer.unsqueeze"], "methods", ["None"], ["# adjust search features", "\n", "        ", "h", ",", "w", "=", "x_f", ".", "shape", "[", "-", "2", ":", "]", "\n", "i", "=", "torch", ".", "arange", "(", "w", ")", ".", "cuda", "(", ")", "\n", "j", "=", "torch", ".", "arange", "(", "h", ")", ".", "cuda", "(", ")", "\n", "x_emb", "=", "self", ".", "col_embed", "(", "i", ")", "\n", "y_emb", "=", "self", ".", "row_embed", "(", "j", ")", "\n", "pos", "=", "torch", ".", "cat", "(", "[", "\n", "x_emb", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "h", ",", "1", ",", "1", ")", ",", "\n", "y_emb", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "w", ",", "1", ")", ",", "\n", "]", ",", "dim", "=", "-", "1", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "x_f", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ",", "1", ")", "\n", "b", ",", "c", ",", "w", ",", "h", "=", "x_f", ".", "size", "(", ")", "\n", "x_f", "=", "self", ".", "transformer", "(", "(", "pos", "+", "x_f", ")", ".", "view", "(", "b", ",", "c", ",", "-", "1", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ",", "(", "pos", "+", "x_f", ")", ".", "view", "(", "b", ",", "c", ",", "-", "1", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ",", "(", "pos", "+", "x_f", ")", ".", "view", "(", "b", ",", "c", ",", "-", "1", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "x_f", "=", "x_f", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "view", "(", "b", ",", "c", ",", "w", ",", "h", ")", "\n", "\n", "return", "x_f", "\n", "\n", "# if __name__ == '__main__':", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.neck.__init__.get_neck": [[20, 22], ["None"], "function", ["None"], ["\n", "mu1_sq", "=", "mu1", ".", "pow", "(", "2", ")", "\n", "mu2_sq", "=", "mu2", ".", "pow", "(", "2", ")", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.neck.trans.Cattention.__init__": [[15, 27], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.AdaptiveAvgPool2d", "torch.nn.AdaptiveAvgPool2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamban_tracker.SiamBANTracker.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_dim", ")", ":", "\n", "        ", "super", "(", "Cattention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "chanel_in", "=", "in_dim", "\n", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "in_dim", "*", "2", ",", "in_dim", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ")", ",", "\n", ")", "\n", "self", ".", "avg_pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "linear1", "=", "nn", ".", "Conv2d", "(", "in_dim", ",", "in_dim", "//", "6", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "linear2", "=", "nn", ".", "Conv2d", "(", "in_dim", "//", "6", ",", "in_dim", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "gamma", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ")", ")", "\n", "self", ".", "activation", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ",", "y", ")", ":", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.neck.trans.Cattention.forward": [[27, 33], ["trans.Cattention.linear2", "trans.Cattention.dropout", "trans.Cattention.conv1", "trans.Cattention.activation", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "trans.Cattention.linear1", "trans.Cattention.avg_pool"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "ww", "=", "self", ".", "linear2", "(", "self", ".", "dropout", "(", "self", ".", "activation", "(", "self", ".", "linear1", "(", "self", ".", "avg_pool", "(", "y", ")", ")", ")", ")", ")", "\n", "weight", "=", "self", ".", "conv1", "(", "torch", ".", "cat", "(", "(", "x", ",", "y", ")", ",", "1", ")", ")", "*", "ww", "\n", "\n", "\n", "return", "x", "+", "self", ".", "gamma", "*", "weight", "*", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.neck.trans.Transformer.__init__": [[39, 62], ["torch.nn.Module.__init__", "trans.Transformer._reset_parameters", "trans.TransformerEncoderLayer", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "trans.TransformerEncoder", "trans.TransformerDecoderLayer", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "trans.TransformerDecoder"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamban_tracker.SiamBANTracker.__init__", "home.repos.pwc.inspect_result.vision4robotics_udat.neck.trans.Transformer._reset_parameters"], ["    ", "def", "__init__", "(", "self", ",", "d_model", ":", "int", "=", "512", ",", "nhead", ":", "int", "=", "8", ",", "num_encoder_layers", ":", "int", "=", "6", ",", "\n", "num_decoder_layers", ":", "int", "=", "6", ",", "dim_feedforward", ":", "int", "=", "2048", ",", "dropout", ":", "float", "=", "0.1", ",", "\n", "activation", ":", "str", "=", "\"relu\"", ",", "custom_encoder", ":", "Optional", "[", "Any", "]", "=", "None", ",", "custom_decoder", ":", "Optional", "[", "Any", "]", "=", "None", ")", "->", "None", ":", "\n", "        ", "super", "(", "Transformer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "custom_encoder", "is", "not", "None", ":", "\n", "            ", "self", ".", "encoder", "=", "custom_encoder", "\n", "", "else", ":", "\n", "            ", "encoder_layer", "=", "TransformerEncoderLayer", "(", "d_model", ",", "nhead", ",", "dim_feedforward", ",", "dropout", ",", "activation", ")", "\n", "encoder_norm", "=", "nn", ".", "LayerNorm", "(", "d_model", ")", "\n", "self", ".", "encoder", "=", "TransformerEncoder", "(", "encoder_layer", ",", "num_encoder_layers", ",", "encoder_norm", ")", "\n", "\n", "", "if", "custom_decoder", "is", "not", "None", ":", "\n", "            ", "self", ".", "decoder", "=", "custom_decoder", "\n", "", "else", ":", "\n", "            ", "decoder_layer", "=", "TransformerDecoderLayer", "(", "d_model", ",", "nhead", ",", "dim_feedforward", ",", "dropout", ",", "activation", ")", "\n", "decoder_norm", "=", "nn", ".", "LayerNorm", "(", "d_model", ")", "\n", "self", ".", "decoder", "=", "TransformerDecoder", "(", "decoder_layer", ",", "num_decoder_layers", ",", "decoder_norm", ")", "\n", "\n", "", "self", ".", "_reset_parameters", "(", ")", "\n", "\n", "self", ".", "d_model", "=", "d_model", "\n", "self", ".", "nhead", "=", "nhead", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.neck.trans.Transformer.forward": [[63, 78], ["trans.Transformer.encoder", "trans.Transformer.decoder", "src.size", "tgt.size", "RuntimeError", "RuntimeError", "src.size", "tgt.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "src", ":", "Tensor", ",", "srcc", ":", "Tensor", ",", "tgt", ":", "Tensor", ",", "src_mask", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "tgt_mask", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "\n", "memory_mask", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "src_key_padding_mask", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "\n", "tgt_key_padding_mask", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "memory_key_padding_mask", ":", "Optional", "[", "Tensor", "]", "=", "None", ")", "->", "Tensor", ":", "\n", "\n", "        ", "if", "src", ".", "size", "(", "1", ")", "!=", "tgt", ".", "size", "(", "1", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"the batch number of src and tgt must be equal\"", ")", "\n", "\n", "", "if", "src", ".", "size", "(", "2", ")", "!=", "self", ".", "d_model", "or", "tgt", ".", "size", "(", "2", ")", "!=", "self", ".", "d_model", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"the feature number of src and tgt must be equal to d_model\"", ")", "\n", "\n", "", "memory", "=", "self", ".", "encoder", "(", "src", ",", "srcc", ",", "mask", "=", "src_mask", ",", "src_key_padding_mask", "=", "src_key_padding_mask", ")", "\n", "output", "=", "self", ".", "decoder", "(", "tgt", ",", "memory", ",", "tgt_mask", "=", "tgt_mask", ",", "memory_mask", "=", "memory_mask", ",", "\n", "tgt_key_padding_mask", "=", "tgt_key_padding_mask", ",", "\n", "memory_key_padding_mask", "=", "memory_key_padding_mask", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.neck.trans.Transformer.generate_square_subsequent_mask": [[79, 86], ["mask.float().masked_fill().masked_fill.float().masked_fill().masked_fill.float().masked_fill().masked_fill", "float", "mask.float().masked_fill().masked_fill.float().masked_fill().masked_fill.float().masked_fill", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "float", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "mask.float().masked_fill().masked_fill.float().masked_fill().masked_fill.float"], "methods", ["None"], ["", "def", "generate_square_subsequent_mask", "(", "self", ",", "sz", ":", "int", ")", "->", "Tensor", ":", "\n", "        ", "r\"\"\"Generate a square mask for the sequence. The masked positions are filled with float('-inf').\n            Unmasked positions are filled with float(0.0).\n        \"\"\"", "\n", "mask", "=", "(", "torch", ".", "triu", "(", "torch", ".", "ones", "(", "sz", ",", "sz", ")", ")", "==", "1", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "mask", "=", "mask", ".", "float", "(", ")", ".", "masked_fill", "(", "mask", "==", "0", ",", "float", "(", "'-inf'", ")", ")", ".", "masked_fill", "(", "mask", "==", "1", ",", "float", "(", "0.0", ")", ")", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.neck.trans.Transformer._reset_parameters": [[87, 93], ["trans.Transformer.parameters", "p.dim", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_"], "methods", ["None"], ["", "def", "_reset_parameters", "(", "self", ")", ":", "\n", "        ", "r\"\"\"Initiate parameters in the transformer model.\"\"\"", "\n", "\n", "for", "p", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "if", "p", ".", "dim", "(", ")", ">", "1", ":", "\n", "                ", "xavier_uniform_", "(", "p", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.neck.trans.TransformerEncoder.__init__": [[111, 116], ["torch.nn.Module.__init__", "trans._get_clones"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamban_tracker.SiamBANTracker.__init__", "home.repos.pwc.inspect_result.vision4robotics_udat.neck.trans._get_clones"], ["def", "__init__", "(", "self", ",", "encoder_layer", ",", "num_layers", ",", "norm", "=", "None", ")", ":", "\n", "        ", "super", "(", "TransformerEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layers", "=", "_get_clones", "(", "encoder_layer", ",", "num_layers", ")", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "self", ".", "norm", "=", "norm", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.neck.trans.TransformerEncoder.forward": [[117, 137], ["mod", "trans.TransformerEncoder.norm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "src", ":", "Tensor", ",", "srcc", ":", "Tensor", ",", "mask", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "src_key_padding_mask", ":", "Optional", "[", "Tensor", "]", "=", "None", ")", "->", "Tensor", ":", "\n", "        ", "r\"\"\"Pass the input through the encoder layers in turn.\n\n        Args:\n            src: the sequence to the encoder (required).\n            mask: the mask for the src sequence (optional).\n            src_key_padding_mask: the mask for the src keys per batch (optional).\n\n        Shape:\n            see the docs in Transformer class.\n        \"\"\"", "\n", "output", "=", "src", "\n", "\n", "for", "mod", "in", "self", ".", "layers", ":", "\n", "            ", "output", "=", "mod", "(", "output", ",", "srcc", ",", "src_mask", "=", "mask", ",", "src_key_padding_mask", "=", "src_key_padding_mask", ")", "\n", "\n", "", "if", "self", ".", "norm", "is", "not", "None", ":", "\n", "            ", "output", "=", "self", ".", "norm", "(", "output", ")", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.neck.trans.TransformerDecoder.__init__": [[156, 161], ["torch.nn.Module.__init__", "trans._get_clones"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamban_tracker.SiamBANTracker.__init__", "home.repos.pwc.inspect_result.vision4robotics_udat.neck.trans._get_clones"], ["def", "__init__", "(", "self", ",", "decoder_layer", ",", "num_layers", ",", "norm", "=", "None", ")", ":", "\n", "        ", "super", "(", "TransformerDecoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layers", "=", "_get_clones", "(", "decoder_layer", ",", "num_layers", ")", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "self", ".", "norm", "=", "norm", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.neck.trans.TransformerDecoder.forward": [[162, 190], ["mod", "trans.TransformerDecoder.norm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "tgt", ":", "Tensor", ",", "memory", ":", "Tensor", ",", "tgt_mask", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "\n", "memory_mask", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "tgt_key_padding_mask", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "\n", "memory_key_padding_mask", ":", "Optional", "[", "Tensor", "]", "=", "None", ")", "->", "Tensor", ":", "\n", "        ", "r\"\"\"Pass the inputs (and mask) through the decoder layer in turn.\n\n        Args:\n            tgt: the sequence to the decoder (required).\n            memory: the sequence from the last layer of the encoder (required).\n            tgt_mask: the mask for the tgt sequence (optional).\n            memory_mask: the mask for the memory sequence (optional).\n            tgt_key_padding_mask: the mask for the tgt keys per batch (optional).\n            memory_key_padding_mask: the mask for the memory keys per batch (optional).\n\n        Shape:\n            see the docs in Transformer class.\n        \"\"\"", "\n", "output", "=", "tgt", "\n", "\n", "for", "mod", "in", "self", ".", "layers", ":", "\n", "            ", "output", "=", "mod", "(", "output", ",", "memory", ",", "tgt_mask", "=", "tgt_mask", ",", "\n", "memory_mask", "=", "memory_mask", ",", "\n", "tgt_key_padding_mask", "=", "tgt_key_padding_mask", ",", "\n", "memory_key_padding_mask", "=", "memory_key_padding_mask", ")", "\n", "\n", "", "if", "self", ".", "norm", "is", "not", "None", ":", "\n", "            ", "output", "=", "self", ".", "norm", "(", "output", ")", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.neck.trans.TransformerEncoderLayer.__init__": [[212, 231], ["torch.nn.Module.__init__", "torch.nn.MultiheadAttention", "torch.nn.MultiheadAttention", "trans.Cattention", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "trans._get_activation_fn"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamban_tracker.SiamBANTracker.__init__", "home.repos.pwc.inspect_result.vision4robotics_udat.neck.trans._get_activation_fn"], ["def", "__init__", "(", "self", ",", "d_model", ",", "nhead", ",", "dim_feedforward", "=", "2048", ",", "dropout", "=", "0.1", ",", "activation", "=", "\"relu\"", ")", ":", "\n", "        ", "super", "(", "TransformerEncoderLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "self_attn", "=", "MultiheadAttention", "(", "d_model", ",", "nhead", ",", "dropout", "=", "dropout", ")", "\n", "channel", "=", "256", "\n", "self", ".", "cross_attn", "=", "Cattention", "(", "channel", ")", "\n", "\n", "# Implementation of Feedforward model", "\n", "\n", "\n", "self", ".", "linear1", "=", "nn", ".", "Linear", "(", "d_model", ",", "dim_feedforward", ")", "\n", "self", ".", "dropout", "=", "Dropout", "(", "dropout", ")", "\n", "self", ".", "linear2", "=", "nn", ".", "Linear", "(", "dim_feedforward", ",", "d_model", ")", "\n", "self", ".", "norm0", "=", "nn", ".", "LayerNorm", "(", "d_model", ")", "\n", "self", ".", "norm1", "=", "nn", ".", "LayerNorm", "(", "d_model", ")", "\n", "self", ".", "norm2", "=", "nn", ".", "LayerNorm", "(", "d_model", ")", "\n", "self", ".", "dropout1", "=", "Dropout", "(", "dropout", ")", "\n", "self", ".", "dropout2", "=", "Dropout", "(", "dropout", ")", "\n", "\n", "self", ".", "activation", "=", "_get_activation_fn", "(", "activation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.neck.trans.TransformerEncoderLayer.__setstate__": [[232, 236], ["super().__setstate__"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.neck.trans.TransformerDecoderLayer.__setstate__"], ["", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "if", "'activation'", "not", "in", "state", ":", "\n", "            ", "state", "[", "'activation'", "]", "=", "F", ".", "relu", "\n", "", "super", "(", "TransformerEncoderLayer", ",", "self", ")", ".", "__setstate__", "(", "state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.neck.trans.TransformerEncoderLayer.forward": [[237, 253], ["trans.TransformerEncoderLayer.permute().size", "trans.TransformerEncoderLayer.norm0", "trans.TransformerEncoderLayer.norm1", "trans.TransformerEncoderLayer.cross_attn().view().permute", "trans.TransformerEncoderLayer.linear2", "trans.TransformerEncoderLayer.norm2", "trans.TransformerEncoderLayer.self_attn", "trans.TransformerEncoderLayer.dropout1", "trans.TransformerEncoderLayer.dropout", "trans.TransformerEncoderLayer.dropout2", "trans.TransformerEncoderLayer.permute", "trans.TransformerEncoderLayer.cross_attn().view", "trans.TransformerEncoderLayer.activation", "trans.TransformerEncoderLayer.linear1", "trans.TransformerEncoderLayer.cross_attn", "trans.TransformerEncoderLayer.view", "srcc.contiguous().view", "int", "int", "int", "int", "srcc.contiguous"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "src", ":", "Tensor", ",", "srcc", ":", "Tensor", ",", "src_mask", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "src_key_padding_mask", ":", "Optional", "[", "Tensor", "]", "=", "None", ")", "->", "Tensor", ":", "\n", "\n", "        ", "b", ",", "c", ",", "s", "=", "src", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "size", "(", ")", "\n", "input_feature", "=", "self", ".", "norm0", "(", "src", "+", "srcc", ")", "\n", "src2", "=", "self", ".", "self_attn", "(", "input_feature", ",", "input_feature", ",", "src", ",", "attn_mask", "=", "src_mask", ",", "\n", "key_padding_mask", "=", "src_key_padding_mask", ")", "[", "0", "]", "\n", "src", "=", "src", "+", "self", ".", "dropout1", "(", "src2", ")", "\n", "src", "=", "self", ".", "norm1", "(", "src", ")", "\n", "\n", "src", "=", "self", ".", "cross_attn", "(", "src", ".", "view", "(", "b", ",", "c", ",", "int", "(", "s", "**", "0.5", ")", ",", "int", "(", "s", "**", "0.5", ")", ")", ",", "srcc", ".", "contiguous", "(", ")", ".", "view", "(", "b", ",", "c", ",", "int", "(", "s", "**", "0.5", ")", ",", "int", "(", "s", "**", "0.5", ")", ")", ")", ".", "view", "(", "b", ",", "c", ",", "-", "1", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "\n", "\n", "src2", "=", "self", ".", "linear2", "(", "self", ".", "dropout", "(", "self", ".", "activation", "(", "self", ".", "linear1", "(", "src", ")", ")", ")", ")", "\n", "src", "=", "src", "+", "self", ".", "dropout2", "(", "src2", ")", "\n", "src", "=", "self", ".", "norm2", "(", "src", ")", "\n", "return", "src", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.neck.trans.TransformerDecoderLayer.__init__": [[277, 294], ["torch.nn.Module.__init__", "torch.nn.MultiheadAttention", "torch.nn.MultiheadAttention", "torch.nn.MultiheadAttention", "torch.nn.MultiheadAttention", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "trans._get_activation_fn"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamban_tracker.SiamBANTracker.__init__", "home.repos.pwc.inspect_result.vision4robotics_udat.neck.trans._get_activation_fn"], ["def", "__init__", "(", "self", ",", "d_model", ",", "nhead", ",", "dim_feedforward", "=", "2048", ",", "dropout", "=", "0.1", ",", "activation", "=", "\"relu\"", ")", ":", "\n", "        ", "super", "(", "TransformerDecoderLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "self_attn", "=", "MultiheadAttention", "(", "d_model", ",", "nhead", ",", "dropout", "=", "dropout", ")", "\n", "self", ".", "multihead_attn", "=", "MultiheadAttention", "(", "d_model", ",", "nhead", ",", "dropout", "=", "dropout", ")", "\n", "# Implementation of Feedforward model", "\n", "self", ".", "linear1", "=", "nn", ".", "Linear", "(", "d_model", ",", "dim_feedforward", ")", "\n", "self", ".", "dropout", "=", "Dropout", "(", "dropout", ")", "\n", "self", ".", "linear2", "=", "nn", ".", "Linear", "(", "dim_feedforward", ",", "d_model", ")", "\n", "\n", "self", ".", "norm1", "=", "nn", ".", "LayerNorm", "(", "d_model", ")", "\n", "self", ".", "norm2", "=", "nn", ".", "LayerNorm", "(", "d_model", ")", "\n", "self", ".", "norm3", "=", "nn", ".", "LayerNorm", "(", "d_model", ")", "\n", "self", ".", "dropout1", "=", "Dropout", "(", "dropout", ")", "\n", "self", ".", "dropout2", "=", "Dropout", "(", "dropout", ")", "\n", "self", ".", "dropout3", "=", "Dropout", "(", "dropout", ")", "\n", "\n", "self", ".", "activation", "=", "_get_activation_fn", "(", "activation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.neck.trans.TransformerDecoderLayer.__setstate__": [[295, 299], ["super().__setstate__"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.neck.trans.TransformerDecoderLayer.__setstate__"], ["", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "if", "'activation'", "not", "in", "state", ":", "\n", "            ", "state", "[", "'activation'", "]", "=", "F", ".", "relu", "\n", "", "super", "(", "TransformerDecoderLayer", ",", "self", ")", ".", "__setstate__", "(", "state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.neck.trans.TransformerDecoderLayer.forward": [[300, 327], ["trans.TransformerDecoderLayer.norm1", "trans.TransformerDecoderLayer.norm2", "trans.TransformerDecoderLayer.linear2", "trans.TransformerDecoderLayer.norm3", "trans.TransformerDecoderLayer.self_attn", "trans.TransformerDecoderLayer.dropout1", "trans.TransformerDecoderLayer.multihead_attn", "trans.TransformerDecoderLayer.dropout2", "trans.TransformerDecoderLayer.dropout", "trans.TransformerDecoderLayer.dropout3", "trans.TransformerDecoderLayer.activation", "trans.TransformerDecoderLayer.linear1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "tgt", ":", "Tensor", ",", "memory", ":", "Tensor", ",", "tgt_mask", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "memory_mask", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "\n", "tgt_key_padding_mask", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "memory_key_padding_mask", ":", "Optional", "[", "Tensor", "]", "=", "None", ")", "->", "Tensor", ":", "\n", "        ", "r\"\"\"Pass the inputs (and mask) through the decoder layer.\n\n        Args:\n            tgt: the sequence to the decoder layer (required).\n            memory: the sequence from the last layer of the encoder (required).\n            tgt_mask: the mask for the tgt sequence (optional).\n            memory_mask: the mask for the memory sequence (optional).\n            tgt_key_padding_mask: the mask for the tgt keys per batch (optional).\n            memory_key_padding_mask: the mask for the memory keys per batch (optional).\n\n        Shape:\n            see the docs in Transformer class.\n        \"\"\"", "\n", "tgt2", "=", "self", ".", "self_attn", "(", "tgt", ",", "tgt", ",", "tgt", ",", "attn_mask", "=", "tgt_mask", ",", "\n", "key_padding_mask", "=", "tgt_key_padding_mask", ")", "[", "0", "]", "\n", "tgt", "=", "tgt", "+", "self", ".", "dropout1", "(", "tgt2", ")", "\n", "tgt", "=", "self", ".", "norm1", "(", "tgt", ")", "\n", "tgt2", "=", "self", ".", "multihead_attn", "(", "tgt", ",", "memory", ",", "memory", ",", "attn_mask", "=", "memory_mask", ",", "\n", "key_padding_mask", "=", "memory_key_padding_mask", ")", "[", "0", "]", "\n", "tgt", "=", "tgt", "+", "self", ".", "dropout2", "(", "tgt2", ")", "\n", "tgt", "=", "self", ".", "norm2", "(", "tgt", ")", "\n", "tgt2", "=", "self", ".", "linear2", "(", "self", ".", "dropout", "(", "self", ".", "activation", "(", "self", ".", "linear1", "(", "tgt", ")", ")", ")", ")", "\n", "tgt", "=", "tgt", "+", "self", ".", "dropout3", "(", "tgt2", ")", "\n", "tgt", "=", "self", ".", "norm3", "(", "tgt", ")", "\n", "return", "tgt", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.neck.trans._get_clones": [[329, 331], ["torch.nn.ModuleList", "copy.deepcopy", "range"], "function", ["None"], ["", "", "def", "_get_clones", "(", "module", ",", "N", ")", ":", "\n", "    ", "return", "ModuleList", "(", "[", "copy", ".", "deepcopy", "(", "module", ")", "for", "i", "in", "range", "(", "N", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.neck.trans._get_activation_fn": [[333, 340], ["RuntimeError"], "function", ["None"], ["", "def", "_get_activation_fn", "(", "activation", ")", ":", "\n", "    ", "if", "activation", "==", "\"relu\"", ":", "\n", "        ", "return", "F", ".", "relu", "\n", "", "elif", "activation", "==", "\"gelu\"", ":", "\n", "        ", "return", "F", ".", "gelu", "\n", "\n", "", "raise", "RuntimeError", "(", "\"activation should be relu/gelu, not {}\"", ".", "format", "(", "activation", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.tracker.base_tracker.BaseTracker.init": [[18, 26], ["None"], "methods", ["None"], ["def", "init", "(", "self", ",", "img", ",", "bbox", ")", ":", "\n", "        ", "\"\"\"\n        args:\n            img(np.ndarray): BGR image\n            bbox(list): [x, y, width, height]\n                        x, y need to be 0-based\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.tracker.base_tracker.BaseTracker.track": [[27, 35], ["None"], "methods", ["None"], ["", "def", "track", "(", "self", ",", "img", ")", ":", "\n", "        ", "\"\"\"\n        args:\n            img(np.ndarray): BGR image\n        return:\n            bbox(list):[x, y, width, height]\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.tracker.base_tracker.SiameseTracker.get_subwindow": [[38, 96], ["isinstance", "numpy.floor", "numpy.floor", "int", "int", "int", "int", "any", "im_patch.cuda.cuda.transpose", "im_patch.cuda.cuda.astype", "torch.from_numpy", "max", "max", "max", "max", "numpy.zeros", "numpy.array_equal", "cv2.resize", "im_patch.cuda.cuda.cuda", "int", "int", "int", "int", "int", "int", "int", "int"], "methods", ["None"], ["    ", "def", "get_subwindow", "(", "self", ",", "im", ",", "pos", ",", "model_sz", ",", "original_sz", ",", "avg_chans", ")", ":", "\n", "        ", "\"\"\"\n        args:\n            im: bgr based image\n            pos: center position\n            model_sz: exemplar size\n            s_z: original size\n            avg_chans: channel average\n        \"\"\"", "\n", "if", "isinstance", "(", "pos", ",", "float", ")", ":", "\n", "            ", "pos", "=", "[", "pos", ",", "pos", "]", "\n", "", "sz", "=", "original_sz", "\n", "im_sz", "=", "im", ".", "shape", "\n", "c", "=", "(", "original_sz", "+", "1", ")", "/", "2", "\n", "# context_xmin = round(pos[0] - c) # py2 and py3 round", "\n", "context_xmin", "=", "np", ".", "floor", "(", "pos", "[", "0", "]", "-", "c", "+", "0.5", ")", "\n", "context_xmax", "=", "context_xmin", "+", "sz", "-", "1", "\n", "# context_ymin = round(pos[1] - c)", "\n", "context_ymin", "=", "np", ".", "floor", "(", "pos", "[", "1", "]", "-", "c", "+", "0.5", ")", "\n", "context_ymax", "=", "context_ymin", "+", "sz", "-", "1", "\n", "left_pad", "=", "int", "(", "max", "(", "0.", ",", "-", "context_xmin", ")", ")", "\n", "top_pad", "=", "int", "(", "max", "(", "0.", ",", "-", "context_ymin", ")", ")", "\n", "right_pad", "=", "int", "(", "max", "(", "0.", ",", "context_xmax", "-", "im_sz", "[", "1", "]", "+", "1", ")", ")", "\n", "bottom_pad", "=", "int", "(", "max", "(", "0.", ",", "context_ymax", "-", "im_sz", "[", "0", "]", "+", "1", ")", ")", "\n", "\n", "context_xmin", "=", "context_xmin", "+", "left_pad", "\n", "context_xmax", "=", "context_xmax", "+", "left_pad", "\n", "context_ymin", "=", "context_ymin", "+", "top_pad", "\n", "context_ymax", "=", "context_ymax", "+", "top_pad", "\n", "\n", "r", ",", "c", ",", "k", "=", "im", ".", "shape", "\n", "if", "any", "(", "[", "top_pad", ",", "bottom_pad", ",", "left_pad", ",", "right_pad", "]", ")", ":", "\n", "            ", "size", "=", "(", "r", "+", "top_pad", "+", "bottom_pad", ",", "c", "+", "left_pad", "+", "right_pad", ",", "k", ")", "\n", "te_im", "=", "np", ".", "zeros", "(", "size", ",", "np", ".", "uint8", ")", "\n", "te_im", "[", "top_pad", ":", "top_pad", "+", "r", ",", "left_pad", ":", "left_pad", "+", "c", ",", ":", "]", "=", "im", "\n", "if", "top_pad", ":", "\n", "                ", "te_im", "[", "0", ":", "top_pad", ",", "left_pad", ":", "left_pad", "+", "c", ",", ":", "]", "=", "avg_chans", "\n", "", "if", "bottom_pad", ":", "\n", "                ", "te_im", "[", "r", "+", "top_pad", ":", ",", "left_pad", ":", "left_pad", "+", "c", ",", ":", "]", "=", "avg_chans", "\n", "", "if", "left_pad", ":", "\n", "                ", "te_im", "[", ":", ",", "0", ":", "left_pad", ",", ":", "]", "=", "avg_chans", "\n", "", "if", "right_pad", ":", "\n", "                ", "te_im", "[", ":", ",", "c", "+", "left_pad", ":", ",", ":", "]", "=", "avg_chans", "\n", "", "im_patch", "=", "te_im", "[", "int", "(", "context_ymin", ")", ":", "int", "(", "context_ymax", "+", "1", ")", ",", "\n", "int", "(", "context_xmin", ")", ":", "int", "(", "context_xmax", "+", "1", ")", ",", ":", "]", "\n", "", "else", ":", "\n", "            ", "im_patch", "=", "im", "[", "int", "(", "context_ymin", ")", ":", "int", "(", "context_ymax", "+", "1", ")", ",", "\n", "int", "(", "context_xmin", ")", ":", "int", "(", "context_xmax", "+", "1", ")", ",", ":", "]", "\n", "\n", "", "if", "not", "np", ".", "array_equal", "(", "model_sz", ",", "original_sz", ")", ":", "\n", "            ", "im_patch", "=", "cv2", ".", "resize", "(", "im_patch", ",", "(", "model_sz", ",", "model_sz", ")", ")", "\n", "", "im_patch", "=", "im_patch", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "im_patch", "=", "im_patch", "[", "np", ".", "newaxis", ",", ":", ",", ":", ",", ":", "]", "\n", "im_patch", "=", "im_patch", ".", "astype", "(", "np", ".", "float32", ")", "\n", "im_patch", "=", "torch", ".", "from_numpy", "(", "im_patch", ")", "\n", "if", "cfg", ".", "CUDA", ":", "\n", "            ", "im_patch", "=", "im_patch", ".", "cuda", "(", ")", "\n", "", "return", "im_patch", "\n", "", "", ""]], "home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamcar_tracker.SiamCARTracker.__init__": [[18, 24], ["pysot.tracker.base_tracker.SiameseTracker.__init__", "numpy.hanning", "numpy.outer", "siamcar_tracker.SiamCARTracker.model.eval"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamban_tracker.SiamBANTracker.__init__", "home.repos.pwc.inspect_result.vision4robotics_udat.evaluation.f1_benchmark.F1Benchmark.eval"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "cfg", ")", ":", "\n", "        ", "super", "(", "SiamCARTracker", ",", "self", ")", ".", "__init__", "(", ")", "\n", "hanning", "=", "np", ".", "hanning", "(", "cfg", ".", "SCORE_SIZE", ")", "\n", "self", ".", "window", "=", "np", ".", "outer", "(", "hanning", ",", "hanning", ")", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamcar_tracker.SiamCARTracker._convert_cls": [[25, 28], ["torch.softmax().data[].cpu().numpy", "torch.softmax().data[].cpu", "torch.softmax"], "methods", ["None"], ["", "def", "_convert_cls", "(", "self", ",", "cls", ")", ":", "\n", "        ", "cls", "=", "F", ".", "softmax", "(", "cls", "[", ":", ",", ":", ",", ":", ",", ":", "]", ",", "dim", "=", "1", ")", ".", "data", "[", ":", ",", "1", ",", ":", ",", ":", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "return", "cls", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamcar_tracker.SiamCARTracker.init": [[29, 52], ["numpy.array", "numpy.array", "round", "numpy.mean", "siamcar_tracker.SiamCARTracker.get_subwindow", "siamcar_tracker.SiamCARTracker.model.template", "numpy.sqrt", "numpy.sum", "numpy.sum"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.tracker.base_tracker.SiameseTracker.get_subwindow", "home.repos.pwc.inspect_result.vision4robotics_udat.models.model_builder.ModelBuilder.template"], ["", "def", "init", "(", "self", ",", "img", ",", "bbox", ")", ":", "\n", "        ", "\"\"\"\n        args:\n            img(np.ndarray): BGR image\n            bbox: (x, y, w, h) bbox\n        \"\"\"", "\n", "self", ".", "center_pos", "=", "np", ".", "array", "(", "[", "bbox", "[", "0", "]", "+", "(", "bbox", "[", "2", "]", "-", "1", ")", "/", "2", ",", "\n", "bbox", "[", "1", "]", "+", "(", "bbox", "[", "3", "]", "-", "1", ")", "/", "2", "]", ")", "\n", "self", ".", "size", "=", "np", ".", "array", "(", "[", "bbox", "[", "2", "]", ",", "bbox", "[", "3", "]", "]", ")", "\n", "\n", "# calculate z crop size", "\n", "w_z", "=", "self", ".", "size", "[", "0", "]", "+", "cfg", ".", "TRACK", ".", "CONTEXT_AMOUNT", "*", "np", ".", "sum", "(", "self", ".", "size", ")", "\n", "h_z", "=", "self", ".", "size", "[", "1", "]", "+", "cfg", ".", "TRACK", ".", "CONTEXT_AMOUNT", "*", "np", ".", "sum", "(", "self", ".", "size", ")", "\n", "s_z", "=", "round", "(", "np", ".", "sqrt", "(", "w_z", "*", "h_z", ")", ")", "\n", "\n", "# calculate channle average", "\n", "self", ".", "channel_average", "=", "np", ".", "mean", "(", "img", ",", "axis", "=", "(", "0", ",", "1", ")", ")", "\n", "\n", "# get crop", "\n", "z_crop", "=", "self", ".", "get_subwindow", "(", "img", ",", "self", ".", "center_pos", ",", "\n", "cfg", ".", "TRACK", ".", "EXEMPLAR_SIZE", ",", "\n", "s_z", ",", "self", ".", "channel_average", ")", "\n", "self", ".", "model", ".", "template", "(", "z_crop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamcar_tracker.SiamCARTracker.change": [[53, 55], ["numpy.maximum"], "methods", ["None"], ["", "def", "change", "(", "self", ",", "r", ")", ":", "\n", "        ", "return", "np", ".", "maximum", "(", "r", ",", "1.", "/", "r", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamcar_tracker.SiamCARTracker.sz": [[56, 59], ["numpy.sqrt"], "methods", ["None"], ["", "def", "sz", "(", "self", ",", "w", ",", "h", ")", ":", "\n", "        ", "pad", "=", "(", "w", "+", "h", ")", "*", "0.5", "\n", "return", "np", ".", "sqrt", "(", "(", "w", "+", "pad", ")", "*", "(", "h", "+", "pad", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamcar_tracker.SiamCARTracker.cal_penalty": [[60, 67], ["siamcar_tracker.SiamCARTracker.change", "siamcar_tracker.SiamCARTracker.change", "numpy.exp", "siamcar_tracker.SiamCARTracker.sz", "siamcar_tracker.SiamCARTracker.sz"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamcar_tracker.SiamCARTracker.change", "home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamcar_tracker.SiamCARTracker.change", "home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamcar_tracker.SiamCARTracker.sz", "home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamcar_tracker.SiamCARTracker.sz"], ["", "def", "cal_penalty", "(", "self", ",", "lrtbs", ",", "penalty_lk", ")", ":", "\n", "        ", "bboxes_w", "=", "lrtbs", "[", "0", ",", ":", ",", ":", "]", "+", "lrtbs", "[", "2", ",", ":", ",", ":", "]", "\n", "bboxes_h", "=", "lrtbs", "[", "1", ",", ":", ",", ":", "]", "+", "lrtbs", "[", "3", ",", ":", ",", ":", "]", "\n", "s_c", "=", "self", ".", "change", "(", "self", ".", "sz", "(", "bboxes_w", ",", "bboxes_h", ")", "/", "self", ".", "sz", "(", "self", ".", "size", "[", "0", "]", "*", "self", ".", "scale_z", ",", "self", ".", "size", "[", "1", "]", "*", "self", ".", "scale_z", ")", ")", "\n", "r_c", "=", "self", ".", "change", "(", "(", "self", ".", "size", "[", "0", "]", "/", "self", ".", "size", "[", "1", "]", ")", "/", "(", "bboxes_w", "/", "bboxes_h", ")", ")", "\n", "penalty", "=", "np", ".", "exp", "(", "-", "(", "r_c", "*", "s_c", "-", "1", ")", "*", "penalty_lk", ")", "\n", "return", "penalty", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamcar_tracker.SiamCARTracker.accurate_location": [[68, 75], ["int", "numpy.array", "numpy.array"], "methods", ["None"], ["", "def", "accurate_location", "(", "self", ",", "max_r_up", ",", "max_c_up", ")", ":", "\n", "        ", "dist", "=", "int", "(", "(", "cfg", ".", "TRACK", ".", "INSTANCE_SIZE", "-", "(", "cfg", ".", "TRACK", ".", "SCORE_SIZE", "-", "1", ")", "*", "8", ")", "/", "2", ")", "\n", "max_r_up", "+=", "dist", "\n", "max_c_up", "+=", "dist", "\n", "p_cool_s", "=", "np", ".", "array", "(", "[", "max_r_up", ",", "max_c_up", "]", ")", "\n", "disp", "=", "p_cool_s", "-", "(", "np", ".", "array", "(", "[", "255", ",", "255", "]", ")", "-", "1.", ")", "/", "2.", "\n", "return", "disp", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamcar_tracker.SiamCARTracker.coarse_location": [[76, 95], ["numpy.unravel_index", "int", "int", "pysot.utils.misc.bbox_clip", "pysot.utils.misc.bbox_clip", "int", "int", "int", "int", "int", "int", "numpy.zeros_like", "hp_cls_up.argmax", "round", "round", "min", "min", "min", "min", "pysot.utils.misc.bbox_clip", "pysot.utils.misc.bbox_clip", "pysot.utils.misc.bbox_clip", "pysot.utils.misc.bbox_clip"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.utils.misc.bbox_clip", "home.repos.pwc.inspect_result.vision4robotics_udat.utils.misc.bbox_clip", "home.repos.pwc.inspect_result.vision4robotics_udat.utils.misc.bbox_clip", "home.repos.pwc.inspect_result.vision4robotics_udat.utils.misc.bbox_clip", "home.repos.pwc.inspect_result.vision4robotics_udat.utils.misc.bbox_clip", "home.repos.pwc.inspect_result.vision4robotics_udat.utils.misc.bbox_clip"], ["", "def", "coarse_location", "(", "self", ",", "hp_cls_up", ",", "score_up", ",", "scale_score", ",", "lrtbs", ")", ":", "\n", "        ", "upsize", "=", "(", "cfg", ".", "TRACK", ".", "SCORE_SIZE", "-", "1", ")", "*", "cfg", ".", "TRACK", ".", "STRIDE", "+", "1", "\n", "max_r_up_hp", ",", "max_c_up_hp", "=", "np", ".", "unravel_index", "(", "hp_cls_up", ".", "argmax", "(", ")", ",", "hp_cls_up", ".", "shape", ")", "\n", "max_r", "=", "int", "(", "round", "(", "max_r_up_hp", "/", "scale_score", ")", ")", "\n", "max_c", "=", "int", "(", "round", "(", "max_c_up_hp", "/", "scale_score", ")", ")", "\n", "max_r", "=", "bbox_clip", "(", "max_r", ",", "0", ",", "cfg", ".", "TRACK", ".", "SCORE_SIZE", ")", "\n", "max_c", "=", "bbox_clip", "(", "max_c", ",", "0", ",", "cfg", ".", "TRACK", ".", "SCORE_SIZE", ")", "\n", "bbox_region", "=", "lrtbs", "[", "max_r", ",", "max_c", ",", ":", "]", "\n", "min_bbox", "=", "int", "(", "cfg", ".", "TRACK", ".", "REGION_S", "*", "cfg", ".", "TRACK", ".", "EXEMPLAR_SIZE", ")", "\n", "max_bbox", "=", "int", "(", "cfg", ".", "TRACK", ".", "REGION_L", "*", "cfg", ".", "TRACK", ".", "EXEMPLAR_SIZE", ")", "\n", "l_region", "=", "int", "(", "min", "(", "max_r_up_hp", ",", "bbox_clip", "(", "bbox_region", "[", "0", "]", ",", "min_bbox", ",", "max_bbox", ")", ")", ")", "\n", "t_region", "=", "int", "(", "min", "(", "max_c_up_hp", ",", "bbox_clip", "(", "bbox_region", "[", "1", "]", ",", "min_bbox", ",", "max_bbox", ")", ")", ")", "\n", "\n", "r_region", "=", "int", "(", "min", "(", "upsize", "-", "max_r_up_hp", ",", "bbox_clip", "(", "bbox_region", "[", "2", "]", ",", "min_bbox", ",", "max_bbox", ")", ")", ")", "\n", "b_region", "=", "int", "(", "min", "(", "upsize", "-", "max_c_up_hp", ",", "bbox_clip", "(", "bbox_region", "[", "3", "]", ",", "min_bbox", ",", "max_bbox", ")", ")", ")", "\n", "mask", "=", "np", ".", "zeros_like", "(", "score_up", ")", "\n", "mask", "[", "max_r_up_hp", "-", "l_region", ":", "max_r_up_hp", "+", "r_region", "+", "1", ",", "max_c_up_hp", "-", "t_region", ":", "max_c_up_hp", "+", "b_region", "+", "1", "]", "=", "1", "\n", "score_up", "=", "score_up", "*", "mask", "\n", "return", "score_up", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamcar_tracker.SiamCARTracker.getCenter": [[96, 106], ["siamcar_tracker.SiamCARTracker.coarse_location", "numpy.unravel_index", "siamcar_tracker.SiamCARTracker.accurate_location", "siamcar_tracker.SiamCARTracker.argmax"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamcar_tracker.SiamCARTracker.coarse_location", "home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamcar_tracker.SiamCARTracker.accurate_location"], ["", "def", "getCenter", "(", "self", ",", "hp_cls_up", ",", "score_up", ",", "scale_score", ",", "lrtbs", ")", ":", "\n", "# corse location", "\n", "        ", "score_up", "=", "self", ".", "coarse_location", "(", "hp_cls_up", ",", "score_up", ",", "scale_score", ",", "lrtbs", ")", "\n", "# accurate location", "\n", "max_r_up", ",", "max_c_up", "=", "np", ".", "unravel_index", "(", "score_up", ".", "argmax", "(", ")", ",", "score_up", ".", "shape", ")", "\n", "disp", "=", "self", ".", "accurate_location", "(", "max_r_up", ",", "max_c_up", ")", "\n", "disp_ori", "=", "disp", "/", "self", ".", "scale_z", "\n", "new_cx", "=", "disp_ori", "[", "1", "]", "+", "self", ".", "center_pos", "[", "0", "]", "\n", "new_cy", "=", "disp_ori", "[", "0", "]", "+", "self", ".", "center_pos", "[", "1", "]", "\n", "return", "max_r_up", ",", "max_c_up", ",", "new_cx", ",", "new_cy", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamcar_tracker.SiamCARTracker.track": [[107, 175], ["numpy.sqrt", "siamcar_tracker.SiamCARTracker.get_subwindow", "siamcar_tracker.SiamCARTracker.model.track", "siamcar_tracker.SiamCARTracker._convert_cls().squeeze", "outputs[].data.cpu().numpy().squeeze", "outputs[].data.cpu().numpy().squeeze", "siamcar_tracker.SiamCARTracker.cal_penalty", "cv2.resize", "cv2.resize", "cv2.resize", "numpy.transpose", "cv2.resize", "siamcar_tracker.SiamCARTracker.getCenter", "siamcar_tracker.SiamCARTracker.change", "siamcar_tracker.SiamCARTracker.change", "numpy.exp", "pysot.utils.misc.bbox_clip", "pysot.utils.misc.bbox_clip", "pysot.utils.misc.bbox_clip", "pysot.utils.misc.bbox_clip", "numpy.array", "numpy.array", "round", "numpy.sum", "numpy.sum", "siamcar_tracker.SiamCARTracker._convert_cls", "outputs[].data.cpu().numpy", "outputs[].data.cpu().numpy", "siamcar_tracker.SiamCARTracker.sz", "siamcar_tracker.SiamCARTracker.sz", "outputs[].data.cpu", "outputs[].data.cpu"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.tracker.base_tracker.SiameseTracker.get_subwindow", "home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamban_tracker.SiamBANTracker.track", "home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamcar_tracker.SiamCARTracker.cal_penalty", "home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamcar_tracker.SiamCARTracker.getCenter", "home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamcar_tracker.SiamCARTracker.change", "home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamcar_tracker.SiamCARTracker.change", "home.repos.pwc.inspect_result.vision4robotics_udat.utils.misc.bbox_clip", "home.repos.pwc.inspect_result.vision4robotics_udat.utils.misc.bbox_clip", "home.repos.pwc.inspect_result.vision4robotics_udat.utils.misc.bbox_clip", "home.repos.pwc.inspect_result.vision4robotics_udat.utils.misc.bbox_clip", "home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamcar_tracker.SiamCARTracker._convert_cls", "home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamcar_tracker.SiamCARTracker.sz", "home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamcar_tracker.SiamCARTracker.sz"], ["", "def", "track", "(", "self", ",", "img", ",", "hp", ")", ":", "\n", "        ", "\"\"\"\n        args:\n            img(np.ndarray): BGR image\n        return:\n            bbox(list):[x, y, width, height]\n        \"\"\"", "\n", "w_z", "=", "self", ".", "size", "[", "0", "]", "+", "cfg", ".", "TRACK", ".", "CONTEXT_AMOUNT", "*", "np", ".", "sum", "(", "self", ".", "size", ")", "\n", "h_z", "=", "self", ".", "size", "[", "1", "]", "+", "cfg", ".", "TRACK", ".", "CONTEXT_AMOUNT", "*", "np", ".", "sum", "(", "self", ".", "size", ")", "\n", "s_z", "=", "np", ".", "sqrt", "(", "w_z", "*", "h_z", ")", "\n", "self", ".", "scale_z", "=", "cfg", ".", "TRACK", ".", "EXEMPLAR_SIZE", "/", "s_z", "\n", "s_x", "=", "s_z", "*", "(", "cfg", ".", "TRACK", ".", "INSTANCE_SIZE", "/", "cfg", ".", "TRACK", ".", "EXEMPLAR_SIZE", ")", "\n", "x_crop", "=", "self", ".", "get_subwindow", "(", "img", ",", "self", ".", "center_pos", ",", "\n", "cfg", ".", "TRACK", ".", "INSTANCE_SIZE", ",", "\n", "round", "(", "s_x", ")", ",", "self", ".", "channel_average", ")", "\n", "\n", "outputs", "=", "self", ".", "model", ".", "track", "(", "x_crop", ")", "\n", "cls", "=", "self", ".", "_convert_cls", "(", "outputs", "[", "'cls'", "]", ")", ".", "squeeze", "(", ")", "\n", "cen", "=", "outputs", "[", "'cen'", "]", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "squeeze", "(", ")", "\n", "lrtbs", "=", "outputs", "[", "'loc'", "]", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "squeeze", "(", ")", "\n", "\n", "upsize", "=", "(", "cfg", ".", "TRACK", ".", "SCORE_SIZE", "-", "1", ")", "*", "cfg", ".", "TRACK", ".", "STRIDE", "+", "1", "\n", "penalty", "=", "self", ".", "cal_penalty", "(", "lrtbs", ",", "hp", "[", "'penalty_k'", "]", ")", "\n", "p_cls", "=", "penalty", "*", "cls", "\n", "if", "cfg", ".", "TRACK", ".", "hanming", ":", "\n", "            ", "hp_cls", "=", "p_cls", "*", "(", "1", "-", "hp", "[", "'window_lr'", "]", ")", "+", "self", ".", "window", "*", "hp", "[", "'window_lr'", "]", "\n", "", "else", ":", "\n", "            ", "hp_cls", "=", "p_cls", "\n", "\n", "", "hp_cls_up", "=", "cv2", ".", "resize", "(", "hp_cls", ",", "(", "upsize", ",", "upsize", ")", ",", "interpolation", "=", "cv2", ".", "INTER_CUBIC", ")", "\n", "cls_up", "=", "cv2", ".", "resize", "(", "cls", ",", "(", "upsize", ",", "upsize", ")", ",", "interpolation", "=", "cv2", ".", "INTER_CUBIC", ")", "\n", "cen_up", "=", "cv2", ".", "resize", "(", "cen", ",", "(", "upsize", ",", "upsize", ")", ",", "interpolation", "=", "cv2", ".", "INTER_CUBIC", ")", "\n", "lrtbs", "=", "np", ".", "transpose", "(", "lrtbs", ",", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "lrtbs_up", "=", "cv2", ".", "resize", "(", "lrtbs", ",", "(", "upsize", ",", "upsize", ")", ",", "interpolation", "=", "cv2", ".", "INTER_CUBIC", ")", "\n", "\n", "scale_score", "=", "upsize", "/", "cfg", ".", "TRACK", ".", "SCORE_SIZE", "\n", "score_up", "=", "cls_up", "*", "cen_up", "\n", "\n", "# get center", "\n", "max_r_up", ",", "max_c_up", ",", "new_cx", ",", "new_cy", "=", "self", ".", "getCenter", "(", "hp_cls_up", ",", "score_up", ",", "scale_score", ",", "lrtbs", ")", "\n", "\n", "# get w h", "\n", "ave_w", "=", "(", "lrtbs_up", "[", "max_r_up", ",", "max_c_up", ",", "0", "]", "+", "lrtbs_up", "[", "max_r_up", ",", "max_c_up", ",", "2", "]", ")", "/", "self", ".", "scale_z", "\n", "ave_h", "=", "(", "lrtbs_up", "[", "max_r_up", ",", "max_c_up", ",", "1", "]", "+", "lrtbs_up", "[", "max_r_up", ",", "max_c_up", ",", "3", "]", ")", "/", "self", ".", "scale_z", "\n", "\n", "s_c", "=", "self", ".", "change", "(", "self", ".", "sz", "(", "ave_w", ",", "ave_h", ")", "/", "self", ".", "sz", "(", "self", ".", "size", "[", "0", "]", "*", "self", ".", "scale_z", ",", "self", ".", "size", "[", "1", "]", "*", "self", ".", "scale_z", ")", ")", "\n", "r_c", "=", "self", ".", "change", "(", "(", "self", ".", "size", "[", "0", "]", "/", "self", ".", "size", "[", "1", "]", ")", "/", "(", "ave_w", "/", "ave_h", ")", ")", "\n", "penalty", "=", "np", ".", "exp", "(", "-", "(", "r_c", "*", "s_c", "-", "1", ")", "*", "hp", "[", "'penalty_k'", "]", ")", "\n", "lr", "=", "penalty", "*", "cls_up", "[", "max_r_up", ",", "max_c_up", "]", "*", "hp", "[", "'lr'", "]", "\n", "new_width", "=", "lr", "*", "ave_w", "+", "(", "1", "-", "lr", ")", "*", "self", ".", "size", "[", "0", "]", "\n", "new_height", "=", "lr", "*", "ave_h", "+", "(", "1", "-", "lr", ")", "*", "self", ".", "size", "[", "1", "]", "\n", "\n", "# clip boundary", "\n", "cx", "=", "bbox_clip", "(", "new_cx", ",", "0", ",", "img", ".", "shape", "[", "1", "]", ")", "\n", "cy", "=", "bbox_clip", "(", "new_cy", ",", "0", ",", "img", ".", "shape", "[", "0", "]", ")", "\n", "width", "=", "bbox_clip", "(", "new_width", ",", "0", ",", "img", ".", "shape", "[", "1", "]", ")", "\n", "height", "=", "bbox_clip", "(", "new_height", ",", "0", ",", "img", ".", "shape", "[", "0", "]", ")", "\n", "\n", "# udpate state", "\n", "self", ".", "center_pos", "=", "np", ".", "array", "(", "[", "cx", ",", "cy", "]", ")", "\n", "self", ".", "size", "=", "np", ".", "array", "(", "[", "width", ",", "height", "]", ")", "\n", "bbox", "=", "[", "cx", "-", "width", "/", "2", ",", "\n", "cy", "-", "height", "/", "2", ",", "\n", "width", ",", "\n", "height", "]", "\n", "\n", "return", "{", "\n", "'bbox'", ":", "bbox", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.tracker.tracker_builder.build_tracker": [[14, 16], ["None"], "function", ["None"], ["def", "build_tracker", "(", "model", ",", "cfg", ")", ":", "\n", "    ", "return", "TRACKS", "[", "cfg", ".", "TRACK", ".", "TYPE", "]", "(", "model", ",", "cfg", ".", "TRACK", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamban_tracker.SiamBANTracker.__init__": [[14, 25], ["siamban.tracker.base_tracker.SiameseTracker.__init__", "numpy.hanning", "numpy.outer", "numpy.outer.flatten", "siamban_tracker.SiamBANTracker.generate_points", "siamban_tracker.SiamBANTracker.model.eval"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamban_tracker.SiamBANTracker.__init__", "home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamban_tracker.SiamBANTracker.generate_points", "home.repos.pwc.inspect_result.vision4robotics_udat.evaluation.f1_benchmark.F1Benchmark.eval"], ["    ", "def", "__init__", "(", "self", ",", "model", ")", ":", "\n", "        ", "super", "(", "SiamBANTracker", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "score_size", "=", "(", "cfg", ".", "TRACK", ".", "INSTANCE_SIZE", "-", "cfg", ".", "TRACK", ".", "EXEMPLAR_SIZE", ")", "//", "cfg", ".", "POINT", ".", "STRIDE", "+", "1", "+", "cfg", ".", "TRACK", ".", "BASE_SIZE", "\n", "hanning", "=", "np", ".", "hanning", "(", "self", ".", "score_size", ")", "\n", "window", "=", "np", ".", "outer", "(", "hanning", ",", "hanning", ")", "\n", "self", ".", "cls_out_channels", "=", "cfg", ".", "BAN", ".", "KWARGS", ".", "cls_out_channels", "\n", "self", ".", "window", "=", "window", ".", "flatten", "(", ")", "\n", "self", ".", "points", "=", "self", ".", "generate_points", "(", "cfg", ".", "POINT", ".", "STRIDE", ",", "self", ".", "score_size", ")", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamban_tracker.SiamBANTracker.generate_points": [[26, 34], ["numpy.meshgrid", "numpy.zeros", "x.astype().flatten", "y.astype().flatten", "numpy.arange", "numpy.arange", "x.astype", "y.astype"], "methods", ["None"], ["", "def", "generate_points", "(", "self", ",", "stride", ",", "size", ")", ":", "\n", "        ", "ori", "=", "-", "(", "size", "//", "2", ")", "*", "stride", "\n", "x", ",", "y", "=", "np", ".", "meshgrid", "(", "[", "ori", "+", "stride", "*", "dx", "for", "dx", "in", "np", ".", "arange", "(", "0", ",", "size", ")", "]", ",", "\n", "[", "ori", "+", "stride", "*", "dy", "for", "dy", "in", "np", ".", "arange", "(", "0", ",", "size", ")", "]", ")", "\n", "points", "=", "np", ".", "zeros", "(", "(", "size", "*", "size", ",", "2", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "points", "[", ":", ",", "0", "]", ",", "points", "[", ":", ",", "1", "]", "=", "x", ".", "astype", "(", "np", ".", "float32", ")", ".", "flatten", "(", ")", ",", "y", ".", "astype", "(", "np", ".", "float32", ")", ".", "flatten", "(", ")", "\n", "\n", "return", "points", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamban_tracker.SiamBANTracker._convert_bbox": [[35, 45], ["delta.detach().cpu().numpy.detach().cpu().numpy.permute().contiguous().view", "delta.detach().cpu().numpy.detach().cpu().numpy.detach().cpu().numpy", "siamban.utils.bbox.corner2center", "delta.detach().cpu().numpy.detach().cpu().numpy.permute().contiguous", "delta.detach().cpu().numpy.detach().cpu().numpy.detach().cpu", "delta.detach().cpu().numpy.detach().cpu().numpy.permute", "delta.detach().cpu().numpy.detach().cpu().numpy.detach"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.utils.bbox.corner2center"], ["", "def", "_convert_bbox", "(", "self", ",", "delta", ",", "point", ")", ":", "\n", "        ", "delta", "=", "delta", ".", "permute", "(", "1", ",", "2", ",", "3", ",", "0", ")", ".", "contiguous", "(", ")", ".", "view", "(", "4", ",", "-", "1", ")", "\n", "delta", "=", "delta", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "delta", "[", "0", ",", ":", "]", "=", "point", "[", ":", ",", "0", "]", "-", "delta", "[", "0", ",", ":", "]", "\n", "delta", "[", "1", ",", ":", "]", "=", "point", "[", ":", ",", "1", "]", "-", "delta", "[", "1", ",", ":", "]", "\n", "delta", "[", "2", ",", ":", "]", "=", "point", "[", ":", ",", "0", "]", "+", "delta", "[", "2", ",", ":", "]", "\n", "delta", "[", "3", ",", ":", "]", "=", "point", "[", ":", ",", "1", "]", "+", "delta", "[", "3", ",", ":", "]", "\n", "delta", "[", "0", ",", ":", "]", ",", "delta", "[", "1", ",", ":", "]", ",", "delta", "[", "2", ",", ":", "]", ",", "delta", "[", "3", ",", ":", "]", "=", "corner2center", "(", "delta", ")", "\n", "return", "delta", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamban_tracker.SiamBANTracker._convert_score": [[46, 54], ["[].cpu().numpy.permute().contiguous().view", "[].cpu().numpy.sigmoid().detach().cpu().numpy", "[].cpu().numpy.permute().contiguous().view().permute", "[].cpu().numpy", "[].cpu().numpy.permute().contiguous", "[].cpu().numpy.sigmoid().detach().cpu", "[].cpu().numpy.permute().contiguous().view", "[].cpu", "[].cpu().numpy.permute", "[].cpu().numpy.sigmoid().detach", "[].cpu().numpy.permute().contiguous", "[].cpu().numpy.softmax().detach", "[].cpu().numpy.sigmoid", "[].cpu().numpy.permute", "[].cpu().numpy.softmax"], "methods", ["None"], ["", "def", "_convert_score", "(", "self", ",", "score", ")", ":", "\n", "        ", "if", "self", ".", "cls_out_channels", "==", "1", ":", "\n", "            ", "score", "=", "score", ".", "permute", "(", "1", ",", "2", ",", "3", ",", "0", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "score", "=", "score", ".", "sigmoid", "(", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "            ", "score", "=", "score", ".", "permute", "(", "1", ",", "2", ",", "3", ",", "0", ")", ".", "contiguous", "(", ")", ".", "view", "(", "self", ".", "cls_out_channels", ",", "-", "1", ")", ".", "permute", "(", "1", ",", "0", ")", "\n", "score", "=", "score", ".", "softmax", "(", "1", ")", ".", "detach", "(", ")", "[", ":", ",", "1", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "return", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamban_tracker.SiamBANTracker._bbox_clip": [[55, 61], ["max", "max", "max", "max", "min", "min", "min", "min"], "methods", ["None"], ["", "def", "_bbox_clip", "(", "self", ",", "cx", ",", "cy", ",", "width", ",", "height", ",", "boundary", ")", ":", "\n", "        ", "cx", "=", "max", "(", "0", ",", "min", "(", "cx", ",", "boundary", "[", "1", "]", ")", ")", "\n", "cy", "=", "max", "(", "0", ",", "min", "(", "cy", ",", "boundary", "[", "0", "]", ")", ")", "\n", "width", "=", "max", "(", "10", ",", "min", "(", "width", ",", "boundary", "[", "1", "]", ")", ")", "\n", "height", "=", "max", "(", "10", ",", "min", "(", "height", ",", "boundary", "[", "0", "]", ")", ")", "\n", "return", "cx", ",", "cy", ",", "width", ",", "height", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamban_tracker.SiamBANTracker.init": [[62, 85], ["numpy.array", "numpy.array", "round", "numpy.mean", "siamban_tracker.SiamBANTracker.get_subwindow", "siamban_tracker.SiamBANTracker.model.template", "numpy.sqrt", "numpy.sum", "numpy.sum"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.tracker.base_tracker.SiameseTracker.get_subwindow", "home.repos.pwc.inspect_result.vision4robotics_udat.models.model_builder.ModelBuilder.template"], ["", "def", "init", "(", "self", ",", "img", ",", "bbox", ")", ":", "\n", "        ", "\"\"\"\n        args:\n            img(np.ndarray): BGR image\n            bbox: (x, y, w, h) bbox\n        \"\"\"", "\n", "self", ".", "center_pos", "=", "np", ".", "array", "(", "[", "bbox", "[", "0", "]", "+", "(", "bbox", "[", "2", "]", "-", "1", ")", "/", "2", ",", "\n", "bbox", "[", "1", "]", "+", "(", "bbox", "[", "3", "]", "-", "1", ")", "/", "2", "]", ")", "\n", "self", ".", "size", "=", "np", ".", "array", "(", "[", "bbox", "[", "2", "]", ",", "bbox", "[", "3", "]", "]", ")", "\n", "\n", "# calculate z crop size", "\n", "w_z", "=", "self", ".", "size", "[", "0", "]", "+", "cfg", ".", "TRACK", ".", "CONTEXT_AMOUNT", "*", "np", ".", "sum", "(", "self", ".", "size", ")", "\n", "h_z", "=", "self", ".", "size", "[", "1", "]", "+", "cfg", ".", "TRACK", ".", "CONTEXT_AMOUNT", "*", "np", ".", "sum", "(", "self", ".", "size", ")", "\n", "s_z", "=", "round", "(", "np", ".", "sqrt", "(", "w_z", "*", "h_z", ")", ")", "\n", "\n", "# calculate channle average", "\n", "self", ".", "channel_average", "=", "np", ".", "mean", "(", "img", ",", "axis", "=", "(", "0", ",", "1", ")", ")", "\n", "\n", "# get crop", "\n", "z_crop", "=", "self", ".", "get_subwindow", "(", "img", ",", "self", ".", "center_pos", ",", "\n", "cfg", ".", "TRACK", ".", "EXEMPLAR_SIZE", ",", "\n", "s_z", ",", "self", ".", "channel_average", ")", "\n", "self", ".", "model", ".", "template", "(", "z_crop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamban_tracker.SiamBANTracker.track": [[86, 154], ["numpy.sqrt", "siamban_tracker.SiamBANTracker.get_subwindow", "siamban_tracker.SiamBANTracker.model.track", "siamban_tracker.SiamBANTracker._convert_score", "siamban_tracker.SiamBANTracker._convert_bbox", "siamban_tracker.SiamBANTracker.track.change"], "methods", ["home.repos.pwc.inspect_result.vision4robotics_udat.tracker.base_tracker.SiameseTracker.get_subwindow", "home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamban_tracker.SiamBANTracker.track", "home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamban_tracker.SiamBANTracker._convert_score", "home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamban_tracker.SiamBANTracker._convert_bbox", "home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamcar_tracker.SiamCARTracker.change"], ["", "def", "track", "(", "self", ",", "img", ",", "hp", ")", ":", "\n", "        ", "\"\"\"\n        args:\n            img(np.ndarray): BGR image\n        return:\n            bbox(list):[x, y, width, height]\n        \"\"\"", "\n", "w_z", "=", "self", ".", "size", "[", "0", "]", "+", "cfg", ".", "TRACK", ".", "CONTEXT_AMOUNT", "*", "np", ".", "sum", "(", "self", ".", "size", ")", "\n", "h_z", "=", "self", ".", "size", "[", "1", "]", "+", "cfg", ".", "TRACK", ".", "CONTEXT_AMOUNT", "*", "np", ".", "sum", "(", "self", ".", "size", ")", "\n", "s_z", "=", "np", ".", "sqrt", "(", "w_z", "*", "h_z", ")", "\n", "scale_z", "=", "cfg", ".", "TRACK", ".", "EXEMPLAR_SIZE", "/", "s_z", "\n", "s_x", "=", "s_z", "*", "(", "cfg", ".", "TRACK", ".", "INSTANCE_SIZE", "/", "cfg", ".", "TRACK", ".", "EXEMPLAR_SIZE", ")", "\n", "x_crop", "=", "self", ".", "get_subwindow", "(", "img", ",", "self", ".", "center_pos", ",", "\n", "cfg", ".", "TRACK", ".", "INSTANCE_SIZE", ",", "\n", "round", "(", "s_x", ")", ",", "self", ".", "channel_average", ")", "\n", "\n", "outputs", "=", "self", ".", "model", ".", "track", "(", "x_crop", ")", "\n", "\n", "score", "=", "self", ".", "_convert_score", "(", "outputs", "[", "'cls'", "]", ")", "\n", "pred_bbox", "=", "self", ".", "_convert_bbox", "(", "outputs", "[", "'loc'", "]", ",", "self", ".", "points", ")", "\n", "\n", "def", "change", "(", "r", ")", ":", "\n", "            ", "return", "np", ".", "maximum", "(", "r", ",", "1.", "/", "r", ")", "\n", "\n", "", "def", "sz", "(", "w", ",", "h", ")", ":", "\n", "            ", "pad", "=", "(", "w", "+", "h", ")", "*", "0.5", "\n", "return", "np", ".", "sqrt", "(", "(", "w", "+", "pad", ")", "*", "(", "h", "+", "pad", ")", ")", "\n", "\n", "# scale penalty", "\n", "", "s_c", "=", "change", "(", "sz", "(", "pred_bbox", "[", "2", ",", ":", "]", ",", "pred_bbox", "[", "3", ",", ":", "]", ")", "/", "\n", "(", "sz", "(", "self", ".", "size", "[", "0", "]", "*", "scale_z", ",", "self", ".", "size", "[", "1", "]", "*", "scale_z", ")", ")", ")", "\n", "\n", "# aspect ratio penalty", "\n", "r_c", "=", "change", "(", "(", "self", ".", "size", "[", "0", "]", "/", "self", ".", "size", "[", "1", "]", ")", "/", "\n", "(", "pred_bbox", "[", "2", ",", ":", "]", "/", "pred_bbox", "[", "3", ",", ":", "]", ")", ")", "\n", "penalty", "=", "np", ".", "exp", "(", "-", "(", "r_c", "*", "s_c", "-", "1", ")", "*", "hp", "[", "'penalty_k'", "]", ")", "\n", "pscore", "=", "penalty", "*", "score", "\n", "\n", "# window penalty", "\n", "pscore", "=", "pscore", "*", "(", "1", "-", "hp", "[", "'window_lr'", "]", ")", "+", "self", ".", "window", "*", "hp", "[", "'window_lr'", "]", "\n", "best_idx", "=", "np", ".", "argmax", "(", "pscore", ")", "\n", "bbox", "=", "pred_bbox", "[", ":", ",", "best_idx", "]", "/", "scale_z", "\n", "lr", "=", "penalty", "[", "best_idx", "]", "*", "score", "[", "best_idx", "]", "*", "hp", "[", "'lr'", "]", "\n", "\n", "cx", "=", "bbox", "[", "0", "]", "+", "self", ".", "center_pos", "[", "0", "]", "\n", "cy", "=", "bbox", "[", "1", "]", "+", "self", ".", "center_pos", "[", "1", "]", "\n", "\n", "# smooth bbox", "\n", "width", "=", "self", ".", "size", "[", "0", "]", "*", "(", "1", "-", "lr", ")", "+", "bbox", "[", "2", "]", "*", "lr", "\n", "height", "=", "self", ".", "size", "[", "1", "]", "*", "(", "1", "-", "lr", ")", "+", "bbox", "[", "3", "]", "*", "lr", "\n", "\n", "# clip boundary", "\n", "cx", ",", "cy", ",", "width", ",", "height", "=", "self", ".", "_bbox_clip", "(", "cx", ",", "cy", ",", "width", ",", "\n", "height", ",", "img", ".", "shape", "[", ":", "2", "]", ")", "\n", "\n", "# udpate state", "\n", "self", ".", "center_pos", "=", "np", ".", "array", "(", "[", "cx", ",", "cy", "]", ")", "\n", "self", ".", "size", "=", "np", ".", "array", "(", "[", "width", ",", "height", "]", ")", "\n", "\n", "bbox", "=", "[", "cx", "-", "width", "/", "2", ",", "\n", "cy", "-", "height", "/", "2", ",", "\n", "width", ",", "\n", "height", "]", "\n", "best_score", "=", "score", "[", "best_idx", "]", "\n", "return", "{", "\n", "'bbox'", ":", "bbox", ",", "\n", "'best_score'", ":", "best_score", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.core.xcorr.xcorr_slow": [[12, 26], ["range", "torch.cat", "torch.cat", "x.size", "px.view.view", "pk.view.view", "torch.conv2d", "torch.cat.append", "px.view.size", "px.view.size", "pk.view.size", "pk.view.size"], "function", ["None"], ["def", "xcorr_slow", "(", "x", ",", "kernel", ")", ":", "\n", "    ", "\"\"\"for loop to calculate cross correlation, slow version\n    \"\"\"", "\n", "batch", "=", "x", ".", "size", "(", ")", "[", "0", "]", "\n", "out", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "batch", ")", ":", "\n", "        ", "px", "=", "x", "[", "i", "]", "\n", "pk", "=", "kernel", "[", "i", "]", "\n", "px", "=", "px", ".", "view", "(", "1", ",", "px", ".", "size", "(", ")", "[", "0", "]", ",", "px", ".", "size", "(", ")", "[", "1", "]", ",", "px", ".", "size", "(", ")", "[", "2", "]", ")", "\n", "pk", "=", "pk", ".", "view", "(", "-", "1", ",", "px", ".", "size", "(", ")", "[", "1", "]", ",", "pk", ".", "size", "(", ")", "[", "1", "]", ",", "pk", ".", "size", "(", ")", "[", "2", "]", ")", "\n", "po", "=", "F", ".", "conv2d", "(", "px", ",", "pk", ")", "\n", "out", ".", "append", "(", "po", ")", "\n", "", "out", "=", "torch", ".", "cat", "(", "out", ",", "0", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.core.xcorr.xcorr_fast": [[28, 37], ["kernel.view", "x.view", "torch.conv2d", "po.view.view", "kernel.size", "x.size", "kernel.size", "kernel.size", "x.size", "x.size", "po.view.size", "po.view.size"], "function", ["None"], ["", "def", "xcorr_fast", "(", "x", ",", "kernel", ")", ":", "\n", "    ", "\"\"\"group conv2d to calculate cross correlation, fast version\n    \"\"\"", "\n", "batch", "=", "kernel", ".", "size", "(", ")", "[", "0", "]", "\n", "pk", "=", "kernel", ".", "view", "(", "-", "1", ",", "x", ".", "size", "(", ")", "[", "1", "]", ",", "kernel", ".", "size", "(", ")", "[", "2", "]", ",", "kernel", ".", "size", "(", ")", "[", "3", "]", ")", "\n", "px", "=", "x", ".", "view", "(", "1", ",", "-", "1", ",", "x", ".", "size", "(", ")", "[", "2", "]", ",", "x", ".", "size", "(", ")", "[", "3", "]", ")", "\n", "po", "=", "F", ".", "conv2d", "(", "px", ",", "pk", ",", "groups", "=", "batch", ")", "\n", "po", "=", "po", ".", "view", "(", "batch", ",", "-", "1", ",", "po", ".", "size", "(", ")", "[", "2", "]", ",", "po", ".", "size", "(", ")", "[", "3", "]", ")", "\n", "return", "po", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.core.xcorr.xcorr_depthwise": [[39, 49], ["kernel.view.size", "kernel.view.size", "x.view.view", "kernel.view.view", "torch.conv2d", "out.view.view", "x.view.size", "x.view.size", "kernel.view.size", "kernel.view.size", "out.view.size", "out.view.size"], "function", ["None"], ["", "def", "xcorr_depthwise", "(", "x", ",", "kernel", ")", ":", "\n", "    ", "\"\"\"depthwise cross correlation\n    \"\"\"", "\n", "batch", "=", "kernel", ".", "size", "(", "0", ")", "\n", "channel", "=", "kernel", ".", "size", "(", "1", ")", "\n", "x", "=", "x", ".", "view", "(", "1", ",", "batch", "*", "channel", ",", "x", ".", "size", "(", "2", ")", ",", "x", ".", "size", "(", "3", ")", ")", "\n", "kernel", "=", "kernel", ".", "view", "(", "batch", "*", "channel", ",", "1", ",", "kernel", ".", "size", "(", "2", ")", ",", "kernel", ".", "size", "(", "3", ")", ")", "\n", "out", "=", "F", ".", "conv2d", "(", "x", ",", "kernel", ",", "groups", "=", "batch", "*", "channel", ")", "\n", "out", "=", "out", ".", "view", "(", "batch", ",", "channel", ",", "out", ".", "size", "(", "2", ")", ",", "out", ".", "size", "(", "3", ")", ")", "\n", "return", "out", "\n", "", ""]], "home.repos.pwc.inspect_result.vision4robotics_udat.tools.demo.get_frames": [[31, 60], ["cv2.VideoCapture", "range", "cv2.VideoCapture.read", "cv2.VideoCapture.read", "video_name.endswith", "video_name.endswith", "video_name.endswith", "cv2.VideoCapture", "glob.glob", "sorted", "cv2.VideoCapture.read", "os.path.join", "cv2.imread", "int", "[].split", "x.split"], "function", ["None"], ["        ", "cap", "=", "cv2", ".", "VideoCapture", "(", "0", ")", "\n", "\n", "# warmup", "\n", "for", "i", "in", "range", "(", "5", ")", ":", "\n", "            ", "cap", ".", "read", "(", ")", "\n", "", "while", "True", ":", "\n", "            ", "ret", ",", "frame", "=", "cap", ".", "read", "(", ")", "\n", "if", "ret", ":", "\n", "                ", "yield", "frame", "\n", "", "else", ":", "\n", "                ", "break", "\n", "", "", "", "elif", "video_name", ".", "endswith", "(", "'avi'", ")", "or", "video_name", ".", "endswith", "(", "'mp4'", ")", ":", "\n", "        ", "cap", "=", "cv2", ".", "VideoCapture", "(", "args", ".", "video_name", ")", "\n", "while", "True", ":", "\n", "            ", "ret", ",", "frame", "=", "cap", ".", "read", "(", ")", "\n", "if", "ret", ":", "\n", "                ", "yield", "frame", "\n", "", "else", ":", "\n", "                ", "break", "\n", "", "", "", "else", ":", "\n", "        ", "images", "=", "sorted", "(", "glob", "(", "os", ".", "path", ".", "join", "(", "video_name", ",", "'img'", ",", "'*.jp*'", ")", ")", ")", "\n", "for", "img", "in", "images", ":", "\n", "            ", "frame", "=", "cv2", ".", "imread", "(", "img", ")", "\n", "yield", "frame", "\n", "\n", "\n", "", "", "", "def", "main", "(", ")", ":", "\n", "# load config", "\n", "    ", "cfg", ".", "merge_from_file", "(", "args", ".", "config", ")", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.tools.demo.main": [[62, 134], ["siamban.core.config.cfg.merge_from_file", "torch.device", "siamban.models.model_builder.ModelBuilder", "siamban.utils.model_load.load_pretrain().cuda().eval", "siamban.tracker.tracker_builder.build_tracker", "cv2.namedWindow", "demo.get_frames", "torch.cuda.is_available", "cv2.VideoWriter.release", "siamban.utils.model_load.load_pretrain().cuda", "[].split", "siamban.tracker.tracker_builder.build_tracker.init", "siamban.tracker.tracker_builder.build_tracker.track", "cv2.imshow", "cv2.waitKey", "cv2.VideoWriter.write", "cv2.VideoWriter_fourcc", "cv2.VideoWriter", "cv2.selectROI", "numpy.array().astype", "cv2.polylines", "np.stack().transpose.astype", "numpy.stack().transpose", "cv2.addWeighted", "list", "cv2.rectangle", "siamban.utils.model_load.load_pretrain", "args.video_name.endswith", "args.video_name.endswith", "args.video_name.endswith", "cv2.VideoCapture", "int", "exit", "map", "args.video_name.split", "round", "numpy.array", "np.array().astype.reshape", "numpy.stack", "cv2.VideoCapture.get", "args.video_name.split"], "function", ["home.repos.pwc.inspect_result.vision4robotics_udat.evaluation.f1_benchmark.F1Benchmark.eval", "home.repos.pwc.inspect_result.vision4robotics_udat.tracker.tracker_builder.build_tracker", "home.repos.pwc.inspect_result.vision4robotics_udat.tools.demo.get_frames", "home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamban_tracker.SiamBANTracker.init", "home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamban_tracker.SiamBANTracker.track", "home.repos.pwc.inspect_result.vision4robotics_udat.utils.model_load.load_pretrain"], ["device", "=", "torch", ".", "device", "(", "'cuda'", "if", "cfg", ".", "CUDA", "else", "'cpu'", ")", "\n", "\n", "# create model", "\n", "model", "=", "ModelBuilder", "(", ")", "\n", "\n", "# load model", "\n", "model", "=", "load_pretrain", "(", "model", ",", "args", ".", "snapshot", ")", ".", "eval", "(", ")", ".", "to", "(", "device", ")", "\n", "\n", "# build tracker", "\n", "tracker", "=", "SiamCARTracker", "(", "model", ",", "cfg", ".", "TRACK", ")", "\n", "\n", "hp", "=", "{", "'lr'", ":", "0.39", ",", "'penalty_k'", ":", "0.04", ",", "'window_lr'", ":", "0.37", "}", "\n", "\n", "first_frame", "=", "True", "\n", "if", "args", ".", "video_name", ":", "\n", "        ", "video_name", "=", "args", ".", "video_name", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "        ", "video_name", "=", "'webcam'", "\n", "", "cv2", ".", "namedWindow", "(", "video_name", ",", "cv2", ".", "WND_PROP_FULLSCREEN", ")", "\n", "for", "frame", "in", "get_frames", "(", "args", ".", "video_name", ")", ":", "\n", "        ", "if", "first_frame", ":", "\n", "            ", "try", ":", "\n", "                ", "init_rect", "=", "cv2", ".", "selectROI", "(", "video_name", ",", "frame", ",", "False", ",", "False", ")", "\n", "", "except", ":", "\n", "                ", "exit", "(", ")", "\n", "", "tracker", ".", "init", "(", "frame", ",", "init_rect", ")", "\n", "first_frame", "=", "False", "\n", "", "else", ":", "\n", "            ", "outputs", "=", "tracker", ".", "track", "(", "frame", ",", "hp", ")", "\n", "bbox", "=", "list", "(", "map", "(", "int", ",", "outputs", "[", "'bbox'", "]", ")", ")", "\n", "cv2", ".", "rectangle", "(", "frame", ",", "(", "bbox", "[", "0", "]", ",", "bbox", "[", "1", "]", ")", ",", "\n", "(", "bbox", "[", "0", "]", "+", "bbox", "[", "2", "]", ",", "bbox", "[", "1", "]", "+", "bbox", "[", "3", "]", ")", ",", "\n", "(", "0", ",", "255", ",", "0", ")", ",", "3", ")", "\n", "cv2", ".", "imshow", "(", "video_name", ",", "frame", ")", "\n", "cv2", ".", "waitKey", "(", "40", ")", "\n", "\n", "\n", "", "", "", "if", "__name__", "==", "'__main__'", ":", "\n", "    ", "main", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.vision4robotics_udat.tools.eval.main": [[31, 94], ["os.path.join", "glob.glob", "min", "os.path.join", "len", "len", "toolkit.datasets.UAVDark70Dataset", "toolkit.datasets.NAT_LDataset.set_tracker", "toolkit.evaluation.OPEBenchmark", "toolkit.evaluation.OPEBenchmark.show_result", "x.split", "multiprocessing.Pool", "tqdm.tqdm", "multiprocessing.Pool", "tqdm.tqdm", "toolkit.datasets.NATDataset", "toolkit.datasets.NAT_LDataset.set_tracker", "toolkit.evaluation.OPEBenchmark", "toolkit.evaluation.OPEBenchmark.show_result", "pool.imap_unordered", "success_ret.update", "pool.imap_unordered", "precision_ret.update", "multiprocessing.Pool", "tqdm.tqdm", "multiprocessing.Pool", "tqdm.tqdm", "toolkit.datasets.NAT_LDataset", "toolkit.datasets.NAT_LDataset.set_tracker", "toolkit.evaluation.OPEBenchmark", "toolkit.evaluation.OPEBenchmark.show_result", "len", "len", "pool.imap_unordered", "success_ret.update", "pool.imap_unordered", "precision_ret.update", "multiprocessing.Pool", "tqdm.tqdm", "multiprocessing.Pool", "tqdm.tqdm", "len", "len", "pool.imap_unordered", "success_ret.update", "pool.imap_unordered", "precision_ret.update", "len", "len"], "function", ["home.repos.pwc.inspect_result.vision4robotics_udat.datasets.dataset.Dataset.set_tracker", "home.repos.pwc.inspect_result.vision4robotics_udat.evaluation.f1_benchmark.F1Benchmark.show_result", "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.dataset.Dataset.set_tracker", "home.repos.pwc.inspect_result.vision4robotics_udat.evaluation.f1_benchmark.F1Benchmark.show_result", "home.repos.pwc.inspect_result.vision4robotics_udat.utils.average_meter.AverageMeter.update", "home.repos.pwc.inspect_result.vision4robotics_udat.utils.average_meter.AverageMeter.update", "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.dataset.Dataset.set_tracker", "home.repos.pwc.inspect_result.vision4robotics_udat.evaluation.f1_benchmark.F1Benchmark.show_result", "home.repos.pwc.inspect_result.vision4robotics_udat.utils.average_meter.AverageMeter.update", "home.repos.pwc.inspect_result.vision4robotics_udat.utils.average_meter.AverageMeter.update", "home.repos.pwc.inspect_result.vision4robotics_udat.utils.average_meter.AverageMeter.update", "home.repos.pwc.inspect_result.vision4robotics_udat.utils.average_meter.AverageMeter.update"], ["parser", ".", "add_argument", "(", "'--show_video_level'", ",", "'-s'", ",", "dest", "=", "'show_video_level'", ",", "default", "=", "True", ",", "\n", "action", "=", "'store_true'", ")", "\n", "parser", ".", "set_defaults", "(", "show_video_level", "=", "False", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "\n", "def", "main", "(", ")", ":", "\n", "    ", "tracker_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "tracker_path", ",", "args", ".", "dataset", ")", "\n", "trackers", "=", "glob", "(", "os", ".", "path", ".", "join", "(", "args", ".", "tracker_path", ",", "\n", "args", ".", "dataset", ",", "\n", "args", ".", "tracker_prefix", "+", "'*'", ")", ")", "\n", "trackers", "=", "[", "x", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "for", "x", "in", "trackers", "]", "\n", "\n", "assert", "len", "(", "trackers", ")", ">", "0", "\n", "args", ".", "num", "=", "min", "(", "args", ".", "num", ",", "len", "(", "trackers", ")", ")", "\n", "\n", "# root = os.path.realpath(os.path.join(os.path.dirname(__file__),", "\n", "#                         '../testing_dataset'))", "\n", "root", "=", "'/YOUR/PATH/TO/dataset'", "\n", "# root = os.path.join(root, args.dataset)", "\n", "if", "'UAVDark70'", "in", "args", ".", "dataset", ":", "\n", "        ", "dataset", "=", "UAVDARK70Dataset", "(", "args", ".", "dataset", ",", "root", ")", "\n", "dataset", ".", "set_tracker", "(", "tracker_dir", ",", "trackers", ")", "\n", "benchmark", "=", "OPEBenchmark", "(", "dataset", ")", "\n", "success_ret", "=", "{", "}", "\n", "with", "Pool", "(", "processes", "=", "args", ".", "num", ")", "as", "pool", ":", "\n", "            ", "for", "ret", "in", "tqdm", "(", "pool", ".", "imap_unordered", "(", "benchmark", ".", "eval_success", ",", "\n", "trackers", ")", ",", "desc", "=", "'eval success'", ",", "total", "=", "len", "(", "trackers", ")", ",", "ncols", "=", "100", ")", ":", "\n", "                ", "success_ret", ".", "update", "(", "ret", ")", "\n", "", "", "precision_ret", "=", "{", "}", "\n", "with", "Pool", "(", "processes", "=", "args", ".", "num", ")", "as", "pool", ":", "\n", "            ", "for", "ret", "in", "tqdm", "(", "pool", ".", "imap_unordered", "(", "benchmark", ".", "eval_precision", ",", "\n", "trackers", ")", ",", "desc", "=", "'eval precision'", ",", "total", "=", "len", "(", "trackers", ")", ",", "ncols", "=", "100", ")", ":", "\n", "                ", "precision_ret", ".", "update", "(", "ret", ")", "\n", "", "", "benchmark", ".", "show_result", "(", "success_ret", ",", "precision_ret", ",", "\n", "show_video_level", "=", "args", ".", "show_video_level", ")", "\n", "", "elif", "'NAT'", "==", "args", ".", "dataset", ":", "\n", "        ", "dataset", "=", "NATDataset", "(", "args", ".", "dataset", ",", "root", ")", "\n", "dataset", ".", "set_tracker", "(", "tracker_dir", ",", "trackers", ")", "\n", "benchmark", "=", "OPEBenchmark", "(", "dataset", ")", "\n", "success_ret", "=", "{", "}", "\n", "with", "Pool", "(", "processes", "=", "args", ".", "num", ")", "as", "pool", ":", "\n", "            ", "for", "ret", "in", "tqdm", "(", "pool", ".", "imap_unordered", "(", "benchmark", ".", "eval_success", ",", "\n", "trackers", ")", ",", "desc", "=", "'eval success'", ",", "total", "=", "len", "(", "trackers", ")", ",", "ncols", "=", "100", ")", ":", "\n", "                ", "success_ret", ".", "update", "(", "ret", ")", "\n", "", "", "precision_ret", "=", "{", "}", "\n", "with", "Pool", "(", "processes", "=", "args", ".", "num", ")", "as", "pool", ":", "\n", "            ", "for", "ret", "in", "tqdm", "(", "pool", ".", "imap_unordered", "(", "benchmark", ".", "eval_precision", ",", "\n", "trackers", ")", ",", "desc", "=", "'eval precision'", ",", "total", "=", "len", "(", "trackers", ")", ",", "ncols", "=", "100", ")", ":", "\n", "                ", "precision_ret", ".", "update", "(", "ret", ")", "\n", "", "", "benchmark", ".", "show_result", "(", "success_ret", ",", "precision_ret", ",", "\n", "show_video_level", "=", "args", ".", "show_video_level", ")", "\n", "", "elif", "'NAT_L'", "in", "args", ".", "dataset", ":", "\n", "        ", "dataset", "=", "NAT_LDataset", "(", "args", ".", "dataset", ",", "root", ")", "\n", "dataset", ".", "set_tracker", "(", "tracker_dir", ",", "trackers", ")", "\n", "benchmark", "=", "OPEBenchmark", "(", "dataset", ")", "\n", "success_ret", "=", "{", "}", "\n", "with", "Pool", "(", "processes", "=", "args", ".", "num", ")", "as", "pool", ":", "\n", "            ", "for", "ret", "in", "tqdm", "(", "pool", ".", "imap_unordered", "(", "benchmark", ".", "eval_success", ",", "\n", "trackers", ")", ",", "desc", "=", "'eval success'", ",", "total", "=", "len", "(", "trackers", ")", ",", "ncols", "=", "100", ")", ":", "\n", "                ", "success_ret", ".", "update", "(", "ret", ")", "\n", "", "", "precision_ret", "=", "{", "}", "\n", "with", "Pool", "(", "processes", "=", "args", ".", "num", ")", "as", "pool", ":", "\n", "            ", "for", "ret", "in", "tqdm", "(", "pool", ".", "imap_unordered", "(", "benchmark", ".", "eval_precision", ",", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.tools.train.seed_torch": [[48, 56], ["random.seed", "str", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed"], "function", ["None"], ["help", "=", "'random seed'", ")", "\n", "parser", ".", "add_argument", "(", "'--local_rank'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "'compulsory for pytorch launcer'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "\n", "def", "seed_torch", "(", "seed", "=", "0", ")", ":", "\n", "    ", "random", ".", "seed", "(", "seed", ")", "\n", "os", ".", "environ", "[", "'PYTHONHASHSEED'", "]", "=", "str", "(", "seed", ")", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.tools.train.build_data_loader": [[58, 74], ["logger.info", "logger.info", "torch.utils.data.DataLoader", "siamban.datasets.dataset.BANDataset", "siamban.utils.distributed.get_world_size", "torch.utils.data.distributed.DistributedSampler"], "function", ["home.repos.pwc.inspect_result.vision4robotics_udat.utils.distributed.get_world_size"], ["torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "\n", "\n", "", "def", "build_data_loader", "(", "domain", ")", ":", "\n", "    ", "logger", ".", "info", "(", "\"build train dataset\"", ")", "\n", "# train_dataset", "\n", "train_dataset", "=", "TrkDataset", "(", "domain", ")", "\n", "logger", ".", "info", "(", "\"build dataset done\"", ")", "\n", "\n", "train_sampler", "=", "None", "\n", "if", "get_world_size", "(", ")", ">", "1", ":", "\n", "        ", "train_sampler", "=", "DistributedSampler", "(", "train_dataset", ")", "\n", "", "train_loader", "=", "DataLoader", "(", "train_dataset", ",", "\n", "batch_size", "=", "cfg", ".", "TRAIN", ".", "BATCH_SIZE", ",", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.tools.train.build_opt_lr": [[76, 113], ["model.backbone.parameters", "model.backbone.modules", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "siamban.utils.lr_scheduler.build_lr_scheduler", "siamban.utils.lr_scheduler.build_lr_scheduler.step", "isinstance", "m.eval", "getattr().parameters", "getattr().modules", "filter", "model.head.parameters", "isinstance", "model.backbone.parameters", "model.neck.parameters", "model.align.parameters", "getattr", "getattr", "m.train", "siamban.core.config.cfg.TRAIN.START_EPOCH"], "function", ["home.repos.pwc.inspect_result.vision4robotics_udat.utils.lr_scheduler.build_lr_scheduler", "home.repos.pwc.inspect_result.vision4robotics_udat.evaluation.f1_benchmark.F1Benchmark.eval", "home.repos.pwc.inspect_result.vision4robotics_udat.utils.log_helper.Filter.filter", "home.repos.pwc.inspect_result.vision4robotics_udat.tools.train.train"], ["pin_memory", "=", "True", ",", "\n", "sampler", "=", "train_sampler", ")", "\n", "return", "train_loader", "\n", "\n", "\n", "", "def", "build_opt_lr", "(", "model", ",", "current_epoch", "=", "0", ")", ":", "\n", "    ", "if", "current_epoch", ">=", "cfg", ".", "BACKBONE", ".", "TRAIN_EPOCH", ":", "\n", "        ", "for", "layer", "in", "cfg", ".", "BACKBONE", ".", "TRAIN_LAYERS", ":", "\n", "            ", "for", "param", "in", "getattr", "(", "model", ".", "backbone", ",", "layer", ")", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "True", "\n", "", "for", "m", "in", "getattr", "(", "model", ".", "backbone", ",", "layer", ")", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                    ", "m", ".", "train", "(", ")", "\n", "", "", "", "", "else", ":", "\n", "        ", "for", "param", "in", "model", ".", "backbone", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "False", "\n", "", "for", "m", "in", "model", ".", "backbone", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "eval", "(", ")", "\n", "\n", "", "", "", "trainable_params", "=", "[", "]", "\n", "trainable_params", "+=", "[", "{", "'params'", ":", "filter", "(", "lambda", "x", ":", "x", ".", "requires_grad", ",", "\n", "model", ".", "backbone", ".", "parameters", "(", ")", ")", ",", "\n", "'lr'", ":", "cfg", ".", "BACKBONE", ".", "LAYERS_LR", "*", "cfg", ".", "TRAIN", ".", "BASE_LR", "}", "]", "\n", "\n", "if", "cfg", ".", "ADJUST", ".", "ADJUST", ":", "\n", "        ", "trainable_params", "+=", "[", "{", "'params'", ":", "model", ".", "neck", ".", "parameters", "(", ")", ",", "\n", "'lr'", ":", "cfg", ".", "TRAIN", ".", "BASE_LR", "}", "]", "\n", "\n", "", "if", "cfg", ".", "ALIGN", ".", "ALIGN", ":", "\n", "        ", "trainable_params", "+=", "[", "{", "'params'", ":", "model", ".", "align", ".", "parameters", "(", ")", ",", "\n", "'lr'", ":", "cfg", ".", "TRAIN", ".", "BASE_LR_d", "}", "]", "\n", "\n", "", "trainable_params", "+=", "[", "{", "'params'", ":", "model", ".", "car_head", ".", "parameters", "(", ")", ",", "\n", "'lr'", ":", "cfg", ".", "TRAIN", ".", "BASE_LR", "}", "]", "\n", "\n", "trainable_params", "+=", "[", "{", "'params'", ":", "model", ".", "down", ".", "parameters", "(", ")", ",", "\n", "'lr'", ":", "cfg", ".", "TRAIN", ".", "BASE_LR", "}", "]", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.tools.train.log_grads": [[115, 150], ["train.log_grads.weights_grads"], "function", ["None"], ["momentum", "=", "cfg", ".", "TRAIN", ".", "MOMENTUM", ",", "\n", "weight_decay", "=", "cfg", ".", "TRAIN", ".", "WEIGHT_DECAY", ")", "\n", "\n", "lr_scheduler", "=", "build_lr_scheduler", "(", "optimizer", ",", "epochs", "=", "cfg", ".", "TRAIN", ".", "EPOCH", ")", "\n", "lr_scheduler", ".", "step", "(", "cfg", ".", "TRAIN", ".", "START_EPOCH", ")", "\n", "return", "optimizer", ",", "lr_scheduler", "\n", "\n", "\n", "", "def", "log_grads", "(", "model", ",", "tb_writer", ",", "tb_index", ")", ":", "\n", "    ", "def", "weights_grads", "(", "model", ")", ":", "\n", "        ", "grad", "=", "{", "}", "\n", "weights", "=", "{", "}", "\n", "for", "name", ",", "param", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "            ", "if", "param", ".", "grad", "is", "not", "None", ":", "\n", "                ", "grad", "[", "name", "]", "=", "param", ".", "grad", "\n", "weights", "[", "name", "]", "=", "param", ".", "data", "\n", "", "", "return", "grad", ",", "weights", "\n", "\n", "", "grad", ",", "weights", "=", "weights_grads", "(", "model", ")", "\n", "feature_norm", ",", "car_norm", "=", "0", ",", "0", "\n", "for", "k", ",", "g", "in", "grad", ".", "items", "(", ")", ":", "\n", "        ", "_norm", "=", "g", ".", "data", ".", "norm", "(", "2", ")", "\n", "weight", "=", "weights", "[", "k", "]", "\n", "w_norm", "=", "weight", ".", "norm", "(", "2", ")", "\n", "if", "'feature'", "in", "k", ":", "\n", "            ", "feature_norm", "+=", "_norm", "**", "2", "\n", "", "else", ":", "\n", "            ", "car_norm", "+=", "_norm", "**", "2", "\n", "\n", "", "tb_writer", ".", "add_scalar", "(", "'grad_all/'", "+", "k", ".", "replace", "(", "'.'", ",", "'/'", ")", ",", "\n", "_norm", ",", "tb_index", ")", "\n", "tb_writer", ".", "add_scalar", "(", "'weight_all/'", "+", "k", ".", "replace", "(", "'.'", ",", "'/'", ")", ",", "\n", "w_norm", ",", "tb_index", ")", "\n", "tb_writer", ".", "add_scalar", "(", "'w-g/'", "+", "k", ".", "replace", "(", "'.'", ",", "'/'", ")", ",", "\n", "w_norm", "/", "(", "1e-20", "+", "_norm", ")", ",", "tb_index", ")", "\n", "", "tot_norm", "=", "feature_norm", "+", "car_norm", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.tools.train.weightedMSE": [[150, 154], ["torch.mean", "torch.mean", "torch.mean", "label.cuda"], "function", ["None"], ["", "tot_norm", "=", "feature_norm", "+", "car_norm", "\n", "tot_norm", "=", "tot_norm", "**", "0.5", "\n", "feature_norm", "=", "feature_norm", "**", "0.5", "\n", "car_norm", "=", "car_norm", "**", "0.5", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.tools.train.lr_poly": [[154, 156], ["float"], "function", ["None"], ["\n", "tb_writer", ".", "add_scalar", "(", "'grad/tot'", ",", "tot_norm", ",", "tb_index", ")", "\n", "tb_writer", ".", "add_scalar", "(", "'grad/feature'", ",", "feature_norm", ",", "tb_index", ")", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.tools.train.adjust_learning_rate_D": [[157, 165], ["train.lr_poly", "siamban.core.config.cfg", "siamban.core.config.cfg.TRAIN.START_EPOCH", "siamban.core.config.cfg"], "function", ["home.repos.pwc.inspect_result.vision4robotics_udat.tools.train.lr_poly"], ["tb_writer", ".", "add_scalar", "(", "'grad/car'", ",", "car_norm", ",", "tb_index", ")", "\n", "\n", "", "def", "weightedMSE", "(", "D_out", ",", "label", ")", ":", "\n", "# D_label = torch.FloatTensor(D_out.data.size()).fill_(1).cuda() * label.unsqueeze(1).unsqueeze(2).unsqueeze(3).cuda()", "\n", "# D_label = torch.FloatTensor(D_out.data.size()).fill_(label).cuda()", "\n", "    ", "return", "torch", ".", "mean", "(", "(", "D_out", "-", "label", ".", "cuda", "(", ")", ")", ".", "abs", "(", ")", "**", "2", ")", "\n", "\n", "", "def", "lr_poly", "(", "base_lr", ",", "iter", ",", "max_iter", ",", "power", ")", ":", "\n", "    ", "return", "base_lr", "*", "(", "(", "1", "-", "float", "(", "iter", ")", "/", "max_iter", ")", "**", "(", "power", ")", ")", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.tools.train.train": [[166, 337], ["lr_scheduler.get_cur_lr", "train.adjust_learning_rate_D", "siamban.utils.distributed.get_rank", "siamban.utils.average_meter.AverageMeter", "siamban.utils.distributed.get_world_size", "logger.info", "time.time", "enumerate", "enumerate", "range", "os.makedirs", "siamban.utils.distributed.average_reduce", "Disc.parameters", "model", "torch.Upsample", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "train.train.is_valid_number"], "function", ["home.repos.pwc.inspect_result.vision4robotics_udat.utils.lr_scheduler.LRScheduler.get_cur_lr", "home.repos.pwc.inspect_result.vision4robotics_udat.tools.train.adjust_learning_rate_D", "home.repos.pwc.inspect_result.vision4robotics_udat.utils.distributed.get_rank", "home.repos.pwc.inspect_result.vision4robotics_udat.utils.distributed.get_world_size", "home.repos.pwc.inspect_result.vision4robotics_udat.utils.distributed.average_reduce"], ["\n", "", "def", "adjust_learning_rate_D", "(", "args", ",", "optimizer", ",", "i_iter", ")", ":", "\n", "    ", "lr", "=", "lr_poly", "(", "args", ".", "TRAIN", ".", "BASE_LR_d", ",", "i_iter", ",", "args", ".", "TRAIN", ".", "EPOCH", ",", "0.8", ")", "\n", "for", "k", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "k", "[", "'lr'", "]", "=", "lr", "\n", "# optimizer.param_groups[0]['lr'] = lr", "\n", "# if len(optimizer.param_groups) > 1:", "\n", "#     optimizer.param_groups[1]['lr'] = lr * 10", "\n", "", "return", "lr", "\n", "\n", "", "def", "train", "(", "source_loader", ",", "target_loader", ",", "model", ",", "optimizer", ",", "lr_scheduler", ",", "tb_writer", ",", "Disc", ",", "optimizer_D", ")", ":", "\n", "    ", "cur_lr", "=", "lr_scheduler", ".", "get_cur_lr", "(", ")", "\n", "cur_lr_d", "=", "adjust_learning_rate_D", "(", "cfg", ",", "optimizer_D", ",", "cfg", ".", "TRAIN", ".", "START_EPOCH", ")", "\n", "\n", "rank", "=", "get_rank", "(", ")", "\n", "\n", "average_meter", "=", "AverageMeter", "(", ")", "\n", "\n", "def", "is_valid_number", "(", "x", ")", ":", "\n", "        ", "return", "not", "(", "math", ".", "isnan", "(", "x", ")", "or", "math", ".", "isinf", "(", "x", ")", "or", "x", ">", "1e4", ")", "\n", "\n", "", "world_size", "=", "get_world_size", "(", ")", "\n", "num_per_epoch", "=", "len", "(", "source_loader", ".", "dataset", ")", "//", "cfg", ".", "TRAIN", ".", "EPOCH", "//", "(", "cfg", ".", "TRAIN", ".", "BATCH_SIZE", "*", "world_size", ")", "\n", "start_epoch", "=", "cfg", ".", "TRAIN", ".", "START_EPOCH", "\n", "epoch", "=", "start_epoch", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "cfg", ".", "TRAIN", ".", "SNAPSHOT_DIR", ")", "and", "get_rank", "(", ")", "==", "0", ":", "\n", "        ", "os", ".", "makedirs", "(", "cfg", ".", "TRAIN", ".", "SNAPSHOT_DIR", ")", "\n", "\n", "", "logger", ".", "info", "(", "\"model\\n{}\"", ".", "format", "(", "describe", "(", "model", ".", "module", ")", ")", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "source_label", "=", "0", "\n", "target_label", "=", "1", "\n", "target_data", "=", "enumerate", "(", "target_loader", ")", "\n", "source_data", "=", "enumerate", "(", "source_loader", ")", "\n", "for", "idx", "in", "range", "(", "cfg", ".", "TRAIN", ".", "EPOCH", "*", "num_per_epoch", ")", ":", "\n", "# for idx, data in enumerate(train_loader):", "\n", "        ", "data", "=", "target_data", ".", "__next__", "(", ")", "[", "1", "]", "\n", "if", "epoch", "!=", "idx", "//", "num_per_epoch", "+", "start_epoch", ":", "\n", "            ", "epoch", "=", "idx", "//", "num_per_epoch", "+", "start_epoch", "\n", "\n", "if", "get_rank", "(", ")", "==", "0", ":", "\n", "                ", "torch", ".", "save", "(", "\n", "{", "'epoch'", ":", "epoch", ",", "\n", "'state_dict'", ":", "model", ".", "module", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", "}", ",", "\n", "cfg", ".", "TRAIN", ".", "SNAPSHOT_DIR", "+", "'/checkpoint_e%d.pth'", "%", "(", "epoch", ")", ")", "\n", "\n", "torch", ".", "save", "(", "# save discriminator", "\n", "{", "'epoch'", ":", "epoch", ",", "\n", "'state_dict'", ":", "Disc", ".", "module", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "optimizer_D", ".", "state_dict", "(", ")", "}", ",", "\n", "cfg", ".", "TRAIN", ".", "SNAPSHOT_DIR", "+", "'/d_checkpoint_e%d.pth'", "%", "(", "epoch", ")", ")", "\n", "\n", "", "if", "epoch", "==", "cfg", ".", "TRAIN", ".", "EPOCH", ":", "\n", "                ", "return", "\n", "\n", "", "if", "cfg", ".", "BACKBONE", ".", "TRAIN_EPOCH", "==", "epoch", ":", "\n", "                ", "logger", ".", "info", "(", "'start training backbone.'", ")", "\n", "optimizer", ",", "lr_scheduler", "=", "build_opt_lr", "(", "model", ".", "module", ",", "epoch", ")", "\n", "logger", ".", "info", "(", "\"model\\n{}\"", ".", "format", "(", "describe", "(", "model", ".", "module", ")", ")", ")", "\n", "\n", "", "lr_scheduler", ".", "step", "(", "epoch", ")", "\n", "cur_lr", "=", "lr_scheduler", ".", "get_cur_lr", "(", ")", "\n", "cur_lr_d", "=", "adjust_learning_rate_D", "(", "cfg", ",", "optimizer_D", ",", "epoch", ")", "\n", "logger", ".", "info", "(", "'epoch: {}'", ".", "format", "(", "epoch", "+", "1", ")", ")", "\n", "\n", "", "tb_idx", "=", "idx", "\n", "if", "idx", "%", "num_per_epoch", "==", "0", "and", "idx", "!=", "0", ":", "\n", "            ", "for", "idx", ",", "pg", "in", "enumerate", "(", "optimizer", ".", "param_groups", ")", ":", "\n", "                ", "logger", ".", "info", "(", "'epoch {} lr {}'", ".", "format", "(", "epoch", "+", "1", ",", "pg", "[", "'lr'", "]", ")", ")", "\n", "if", "rank", "==", "0", ":", "\n", "                    ", "tb_writer", ".", "add_scalar", "(", "'lr/group{}'", ".", "format", "(", "idx", "+", "1", ")", ",", "\n", "pg", "[", "'lr'", "]", ",", "tb_idx", ")", "\n", "\n", "", "", "", "data_time", "=", "average_reduce", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "if", "rank", "==", "0", ":", "\n", "            ", "tb_writer", ".", "add_scalar", "(", "'time/data'", ",", "data_time", ",", "tb_idx", ")", "\n", "\n", "# train G", "\n", "", "for", "param", "in", "Disc", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "False", "\n", "", "outputs", ",", "zf", ",", "xf", "=", "model", "(", "data", ")", "\n", "# loss = outputs['total_loss'].mean()", "\n", "\n", "interp", "=", "nn", ".", "Upsample", "(", "size", "=", "(", "128", ",", "128", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "zf_up_t", "=", "[", "interp", "(", "_zf", ")", "for", "_zf", "in", "zf", "]", "\n", "xf_up_t", "=", "[", "interp", "(", "_xf", ")", "for", "_xf", "in", "xf", "]", "\n", "D_out_z", "=", "torch", ".", "stack", "(", "[", "Disc", "(", "F", ".", "softmax", "(", "_zf_up_t", ",", "dim", "=", "1", ")", ")", "for", "_zf_up_t", "in", "zf_up_t", "]", ")", ".", "sum", "(", "0", ")", "/", "3.", "\n", "D_out_x", "=", "torch", ".", "stack", "(", "[", "Disc", "(", "F", ".", "softmax", "(", "_xf_up_t", ",", "dim", "=", "1", ")", ")", "for", "_xf_up_t", "in", "xf_up_t", "]", ")", ".", "sum", "(", "0", ")", "/", "3.", "\n", "D_source_label", "=", "torch", ".", "FloatTensor", "(", "D_out_z", ".", "data", ".", "size", "(", ")", ")", ".", "fill_", "(", "source_label", ")", "\n", "loss_adv", "=", "0.1", "*", "(", "weightedMSE", "(", "D_out_z", ",", "D_source_label", ")", "+", "weightedMSE", "(", "D_out_x", ",", "D_source_label", ")", ")", "#  / cfg.TRAIN.BATCH_SIZE", "\n", "\n", "if", "is_valid_number", "(", "loss_adv", ".", "data", ".", "item", "(", ")", ")", ":", "\n", "            ", "optimizer", ".", "zero_grad", "(", ")", "\n", "optimizer_D", ".", "zero_grad", "(", ")", "\n", "loss_adv", ".", "backward", "(", ")", "\n", "\n", "\n", "", "data", "=", "source_data", ".", "__next__", "(", ")", "[", "1", "]", "\n", "\n", "outputs", ",", "zf", ",", "xf", "=", "model", "(", "data", ")", "\n", "interp", "=", "nn", ".", "Upsample", "(", "size", "=", "(", "128", ",", "128", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "zf_up_s", "=", "[", "interp", "(", "_zf", ")", "for", "_zf", "in", "zf", "]", "\n", "xf_up_s", "=", "[", "interp", "(", "_xf", ")", "for", "_xf", "in", "xf", "]", "\n", "loss_gt", "=", "outputs", "[", "'total_loss'", "]", ".", "mean", "(", ")", "\n", "\n", "if", "is_valid_number", "(", "loss_gt", ".", "data", ".", "item", "(", ")", ")", ":", "\n", "            ", "loss_gt", ".", "backward", "(", ")", "\n", "\n", "", "loss_train_adv", "=", "0", "\n", "# train D", "\n", "for", "param", "in", "Disc", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "True", "\n", "", "zf_up_t", "=", "[", "_zf_up_t", ".", "detach", "(", ")", "for", "_zf_up_t", "in", "zf_up_t", "]", "\n", "xf_up_t", "=", "[", "_xf_up_t", ".", "detach", "(", ")", "for", "_xf_up_t", "in", "xf_up_t", "]", "\n", "D_out_1", "=", "torch", ".", "stack", "(", "[", "Disc", "(", "F", ".", "softmax", "(", "_zf_up_t", ",", "dim", "=", "1", ")", ")", "for", "_zf_up_t", "in", "zf_up_t", "]", ")", ".", "sum", "(", "0", ")", "/", "3.", "\n", "D_out_2", "=", "torch", ".", "stack", "(", "[", "Disc", "(", "F", ".", "softmax", "(", "_xf_up_t", ",", "dim", "=", "1", ")", ")", "for", "_xf_up_t", "in", "xf_up_t", "]", ")", ".", "sum", "(", "0", ")", "/", "3.", "\n", "D_target_label", "=", "torch", ".", "FloatTensor", "(", "D_out_z", ".", "data", ".", "size", "(", ")", ")", ".", "fill_", "(", "target_label", ")", "\n", "loss_d", "=", "0.1", "*", "weightedMSE", "(", "D_out_1", ",", "D_target_label", ")", "+", "0.1", "*", "weightedMSE", "(", "D_out_2", ",", "D_target_label", ")", "\n", "\n", "if", "is_valid_number", "(", "loss_d", ".", "data", ".", "item", "(", ")", ")", ":", "\n", "            ", "loss_d", ".", "backward", "(", ")", "\n", "\n", "", "loss_train_adv", "+=", "loss_d", ".", "item", "(", ")", "\n", "\n", "zf_up_s", "=", "[", "_zf_up_s", ".", "detach", "(", ")", "for", "_zf_up_s", "in", "zf_up_s", "]", "\n", "xf_up_s", "=", "[", "_xf_up_s", ".", "detach", "(", ")", "for", "_xf_up_s", "in", "xf_up_s", "]", "\n", "D_out_1", "=", "torch", ".", "stack", "(", "[", "Disc", "(", "F", ".", "softmax", "(", "_zf_up_s", ",", "dim", "=", "1", ")", ")", "for", "_zf_up_s", "in", "zf_up_s", "]", ")", ".", "sum", "(", "0", ")", "/", "3.", "\n", "D_out_2", "=", "torch", ".", "stack", "(", "[", "Disc", "(", "F", ".", "softmax", "(", "_xf_up_s", ",", "dim", "=", "1", ")", ")", "for", "_xf_up_s", "in", "xf_up_s", "]", ")", ".", "sum", "(", "0", ")", "/", "3.", "\n", "D_source_label", "=", "torch", ".", "FloatTensor", "(", "D_out_z", ".", "data", ".", "size", "(", ")", ")", ".", "fill_", "(", "source_label", ")", "\n", "loss_d", "=", "0.1", "*", "weightedMSE", "(", "D_out_1", ",", "D_source_label", ")", "+", "0.1", "*", "weightedMSE", "(", "D_out_2", ",", "D_source_label", ")", "\n", "\n", "if", "is_valid_number", "(", "loss_d", ".", "data", ".", "item", "(", ")", ")", ":", "\n", "            ", "loss_d", ".", "backward", "(", ")", "\n", "\n", "\n", "", "loss_train_adv", "+=", "loss_d", ".", "item", "(", ")", "\n", "\n", "if", "is_valid_number", "(", "loss_gt", ".", "data", ".", "item", "(", ")", ")", ":", "\n", "            ", "reduce_gradients", "(", "model", ")", "\n", "reduce_gradients", "(", "Disc", ")", "\n", "if", "rank", "==", "0", "and", "cfg", ".", "TRAIN", ".", "LOG_GRADS", ":", "\n", "                ", "log_grads", "(", "model", ".", "module", ",", "tb_writer", ",", "tb_idx", ")", "\n", "\n", "# clip gradient", "\n", "", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "cfg", ".", "TRAIN", ".", "GRAD_CLIP", ")", "\n", "clip_grad_norm_", "(", "Disc", ".", "parameters", "(", ")", ",", "cfg", ".", "TRAIN", ".", "GRAD_CLIP", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "optimizer_D", ".", "step", "(", ")", "\n", "\n", "", "batch_time", "=", "time", ".", "time", "(", ")", "-", "end", "\n", "batch_info", "=", "{", "}", "\n", "batch_info", "[", "'batch_time'", "]", "=", "average_reduce", "(", "batch_time", ")", "\n", "batch_info", "[", "'data_time'", "]", "=", "average_reduce", "(", "data_time", ")", "\n", "batch_info", "[", "'loss_fool'", "]", "=", "average_reduce", "(", "loss_adv", ")", "\n", "batch_info", "[", "'loss_train_adv'", "]", "=", "average_reduce", "(", "loss_train_adv", ")", "\n", "\n", "for", "k", ",", "v", "in", "sorted", "(", "outputs", ".", "items", "(", ")", ")", ":", "\n", "            ", "batch_info", "[", "k", "]", "=", "average_reduce", "(", "v", ".", "mean", "(", ")", ".", "data", ".", "item", "(", ")", ")", "\n", "\n", "", "average_meter", ".", "update", "(", "**", "batch_info", ")", "\n", "\n", "if", "rank", "==", "0", ":", "\n", "            ", "for", "k", ",", "v", "in", "batch_info", ".", "items", "(", ")", ":", "\n", "                ", "tb_writer", ".", "add_scalar", "(", "k", ",", "v", ",", "tb_idx", ")", "\n", "\n", "", "if", "(", "idx", "+", "1", ")", "%", "cfg", ".", "TRAIN", ".", "PRINT_FREQ", "==", "0", ":", "\n", "                ", "info", "=", "\"Epoch: [{}][{}/{}] lr: {:.6f}\\n\"", ".", "format", "(", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.tools.train.main": [[339, 415], ["siamban.utils.distributed.dist_init", "logger.info", "siamban.core.config.cfg.merge_from_file", "siamban.models.model_builder.ModelBuilder().cuda().train", "torch.DataParallel", "train.build_data_loader", "train.build_data_loader", "train.build_opt_lr", "siamban.models.trans_discriminator.TransformerDiscriminator", "siamban.models.trans_discriminator.TransformerDiscriminator.train", "siamban.models.trans_discriminator.TransformerDiscriminator.cuda", "torch.DataParallel", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam.zero_grad", "siamban.utils.distributed.DistModule", "torch.DataParallel", "logger.info", "logger.info", "train.train", "siamban.utils.log_helper.init_log", "logger.info", "logger.info", "os.path.dirname", "os.path.join", "siamban.utils.model_load.load_pretrain", "torch.utils.tensorboard.SummaryWriter", "siamban.models.trans_discriminator.TransformerDiscriminator.parameters", "logger.info", "os.path.isfile", "siamban.utils.model_load.restore_from", "logger.info", "os.path.isfile", "siamban.utils.model_load.restore_from", "os.path.exists", "os.makedirs", "siamban.utils.log_helper.add_file_handler", "siamban.models.model_builder.ModelBuilder().cuda", "os.path.realpath", "siamban.utils.model_load.load_pretrain", "os.path.join", "siamban.utils.misc.commit", "json.dumps", "siamban.models.model_builder.ModelBuilder"], "function", ["home.repos.pwc.inspect_result.vision4robotics_udat.utils.distributed.dist_init", "home.repos.pwc.inspect_result.vision4robotics_udat.tools.train.train", "home.repos.pwc.inspect_result.vision4robotics_udat.tools.train.build_data_loader", "home.repos.pwc.inspect_result.vision4robotics_udat.tools.train.build_data_loader", "home.repos.pwc.inspect_result.vision4robotics_udat.tools.train.build_opt_lr", "home.repos.pwc.inspect_result.vision4robotics_udat.tools.train.train", "home.repos.pwc.inspect_result.vision4robotics_udat.tools.train.train", "home.repos.pwc.inspect_result.vision4robotics_udat.utils.log_helper.init_log", "home.repos.pwc.inspect_result.vision4robotics_udat.utils.model_load.load_pretrain", "home.repos.pwc.inspect_result.vision4robotics_udat.utils.model_load.restore_from", "home.repos.pwc.inspect_result.vision4robotics_udat.utils.model_load.restore_from", "home.repos.pwc.inspect_result.vision4robotics_udat.utils.log_helper.add_file_handler", "home.repos.pwc.inspect_result.vision4robotics_udat.utils.model_load.load_pretrain", "home.repos.pwc.inspect_result.vision4robotics_udat.utils.misc.commit"], ["num_per_epoch", ",", "cur_lr", ")", "\n", "for", "cc", ",", "(", "k", ",", "v", ")", "in", "enumerate", "(", "batch_info", ".", "items", "(", ")", ")", ":", "\n", "                    ", "if", "cc", "%", "2", "==", "0", ":", "\n", "                        ", "info", "+=", "(", "\"\\t{:s}\\t\"", ")", ".", "format", "(", "\n", "getattr", "(", "average_meter", ",", "k", ")", ")", "\n", "", "else", ":", "\n", "                        ", "info", "+=", "(", "\"{:s}\\n\"", ")", ".", "format", "(", "\n", "getattr", "(", "average_meter", ",", "k", ")", ")", "\n", "", "", "logger", ".", "info", "(", "info", ")", "\n", "print_speed", "(", "idx", "+", "1", "+", "start_epoch", "*", "num_per_epoch", ",", "\n", "average_meter", ".", "batch_time", ".", "avg", ",", "\n", "cfg", ".", "TRAIN", ".", "EPOCH", "*", "num_per_epoch", ")", "\n", "", "", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "\n", "", "", "def", "main", "(", ")", ":", "\n", "    ", "rank", ",", "world_size", "=", "dist_init", "(", ")", "\n", "# rank = 0", "\n", "logger", ".", "info", "(", "\"init done\"", ")", "\n", "\n", "# load cfg", "\n", "cfg", ".", "merge_from_file", "(", "args", ".", "cfg", ")", "\n", "if", "rank", "==", "0", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "cfg", ".", "TRAIN", ".", "LOG_DIR", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "cfg", ".", "TRAIN", ".", "LOG_DIR", ")", "\n", "", "init_log", "(", "'global'", ",", "logging", ".", "INFO", ")", "\n", "if", "cfg", ".", "TRAIN", ".", "LOG_DIR", ":", "\n", "            ", "add_file_handler", "(", "'global'", ",", "\n", "os", ".", "path", ".", "join", "(", "cfg", ".", "TRAIN", ".", "LOG_DIR", ",", "'logs.txt'", ")", ",", "\n", "logging", ".", "INFO", ")", "\n", "\n", "", "logger", ".", "info", "(", "\"Version Information: \\n{}\\n\"", ".", "format", "(", "commit", "(", ")", ")", ")", "\n", "logger", ".", "info", "(", "\"config \\n{}\"", ".", "format", "(", "json", ".", "dumps", "(", "cfg", ",", "indent", "=", "4", ")", ")", ")", "\n", "\n", "# create model", "\n", "", "model", "=", "ModelBuilder", "(", ")", ".", "train", "(", ")", "\n", "dist_model", "=", "nn", ".", "DataParallel", "(", "model", ")", ".", "cuda", "(", ")", "\n", "\n", "# load pretrained backbone weights", "\n", "if", "cfg", ".", "BACKBONE", ".", "PRETRAINED", ":", "\n", "        ", "cur_path", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "realpath", "(", "__file__", ")", ")", "\n", "backbone_path", "=", "os", ".", "path", ".", "join", "(", "cur_path", ",", "'../'", ",", "cfg", ".", "BACKBONE", ".", "PRETRAINED", ")", "\n", "print", "(", "backbone_path", ")", "\n", "load_pretrain", "(", "model", ".", "backbone", ",", "backbone_path", ")", "\n", "\n", "# create tensorboard writer", "\n", "", "if", "rank", "==", "0", "and", "cfg", ".", "TRAIN", ".", "LOG_DIR", ":", "\n", "        ", "tb_writer", "=", "SummaryWriter", "(", "cfg", ".", "TRAIN", ".", "LOG_DIR", ")", "\n", "", "else", ":", "\n", "        ", "tb_writer", "=", "None", "\n", "\n", "# build dataset loader", "\n", "", "target_loader", "=", "build_data_loader", "(", "'target'", ")", "\n", "source_loader", "=", "build_data_loader", "(", "'source'", ")", "\n", "\n", "# build optimizer and lr_scheduler", "\n", "optimizer", ",", "lr_scheduler", "=", "build_opt_lr", "(", "dist_model", ".", "module", ",", "\n", "cfg", ".", "TRAIN", ".", "START_EPOCH", ")", "\n", "\n", "model_Disc", "=", "TransformerDiscriminator", "(", "channels", "=", "256", ")", "# \u7279\u5f81\u7684\u901a\u9053\u6570", "\n", "model_Disc", ".", "train", "(", ")", "\n", "model_Disc", ".", "cuda", "(", ")", "\n", "dist_Disc", "=", "nn", ".", "DataParallel", "(", "model_Disc", ")", "\n", "optimizer_D", "=", "torch", ".", "optim", ".", "Adam", "(", "model_Disc", ".", "parameters", "(", ")", ",", "lr", "=", "cfg", ".", "TRAIN", ".", "BASE_LR_d", ",", "betas", "=", "(", "0.9", ",", "0.99", ")", ")", "# TODO \u5199\u5230cfg\u91cc", "\n", "optimizer_D", ".", "zero_grad", "(", ")", "\n", "\n", "# resume training", "\n", "if", "cfg", ".", "TRAIN", ".", "RESUME", ":", "\n", "        ", "logger", ".", "info", "(", "\"resume from {}\"", ".", "format", "(", "cfg", ".", "TRAIN", ".", "RESUME", ")", ")", "\n", "assert", "os", ".", "path", ".", "isfile", "(", "cfg", ".", "TRAIN", ".", "RESUME", ")", ",", "'{} is not a valid file.'", ".", "format", "(", "cfg", ".", "TRAIN", ".", "RESUME", ")", "\n", "model", ",", "optimizer", ",", "cfg", ".", "TRAIN", ".", "START_EPOCH", "=", "restore_from", "(", "model", ",", "optimizer", ",", "cfg", ".", "TRAIN", ".", "RESUME", ")", "\n", "# load pretrain", "\n", "", "elif", "cfg", ".", "TRAIN", ".", "PRETRAINED", ":", "\n", "        ", "load_pretrain", "(", "model", ",", "cfg", ".", "TRAIN", ".", "PRETRAINED", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vision4robotics_udat.tools.test.main": [[45, 230], ["siamban.core.config.cfg.merge_from_file", "getattr", "siamban.models.model_builder.ModelBuilder", "siamban.utils.model_load.load_pretrain().cuda().eval", "siamban.tracker.tracker_builder.build_tracker", "toolkit.datasets.DatasetFactory.create_dataset", "os.path.join", "str", "enumerate", "print", "enumerate", "siamban.utils.model_load.load_pretrain().cuda", "enumerate", "cv2.getTickFrequency", "os.path.join", "os.path.join", "print", "genericpath.isfile", "enumerate", "cv2.getTickFrequency", "print", "str", "cv2.getTickCount", "os.path.isdir", "os.makedirs", "open", "os.path.join", "print", "cv2.getTickCount", "track_times.append", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "siamban.utils.model_load.load_pretrain", "len", "siamban.utils.bbox.get_axis_aligned_bbox", "siamban.tracker.tracker_builder.build_tracker.init", "pred_bboxes.append", "cv2.getTickCount", "cv2.destroyAllWindows", "cv2.polylines", "list", "cv2.rectangle", "cv2.putText", "cv2.putText", "cv2.imshow", "cv2.waitKey", "isinstance", "siamban.utils.bbox.get_axis_aligned_bbox", "siamban.tracker.tracker_builder.build_tracker.init", "scores.append", "siamban.tracker.tracker_builder.build_tracker.track", "pred_bboxes.append", "scores.append", "cv2.getTickCount", "cv2.destroyAllWindows", "list", "list", "cv2.rectangle", "cv2.rectangle", "cv2.putText", "cv2.imshow", "cv2.waitKey", "os.path.isdir", "os.makedirs", "open", "open", "open", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "str", "numpy.array", "siamban.tracker.tracker_builder.build_tracker.track", "toolkit.utils.region.vot_overlap", "pred_bboxes.append", "map", "str", "str", "f.write", "f.write", "numpy.array", "pred_bboxes.append", "pred_bboxes.append", "cv2.getTickFrequency", "map", "map", "str", "f.write", "f.write", "os.path.isdir", "os.makedirs", "open", "open", "os.path.isdir", "os.makedirs", "open", "pred_bboxes.append", "pred_bboxes.append", "numpy.array().reshape", "cv2.getTickCount", "f.write", "f.write", "f.write", "f.write", "f.write", "str", "numpy.array", "toolkit.utils.region.vot_float2str", "str", "args.snapshot.split", "str", "str"], "function", ["home.repos.pwc.inspect_result.vision4robotics_udat.evaluation.f1_benchmark.F1Benchmark.eval", "home.repos.pwc.inspect_result.vision4robotics_udat.tracker.tracker_builder.build_tracker", "home.repos.pwc.inspect_result.vision4robotics_udat.datasets.__init__.DatasetFactory.create_dataset", "home.repos.pwc.inspect_result.vision4robotics_udat.utils.model_load.load_pretrain", "home.repos.pwc.inspect_result.vision4robotics_udat.utils.bbox.get_axis_aligned_bbox", "home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamban_tracker.SiamBANTracker.init", "home.repos.pwc.inspect_result.vision4robotics_udat.utils.bbox.get_axis_aligned_bbox", "home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamban_tracker.SiamBANTracker.init", "home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamban_tracker.SiamBANTracker.track", "home.repos.pwc.inspect_result.vision4robotics_udat.tracker.siamban_tracker.SiamBANTracker.track"], ["torch", ".", "set_num_threads", "(", "1", ")", "\n", "\n", "\n", "def", "main", "(", ")", ":", "\n", "# load config", "\n", "    ", "cfg", ".", "merge_from_file", "(", "args", ".", "config", ")", "\n", "\n", "params", "=", "getattr", "(", "cfg", ".", "HP_SEARCH", ",", "args", ".", "dataset", ")", "\n", "\n", "hp", "=", "{", "'lr'", ":", "params", "[", "0", "]", ",", "'penalty_k'", ":", "params", "[", "1", "]", ",", "'window_lr'", ":", "params", "[", "2", "]", "}", "\n", "\n", "cur_dir", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "realpath", "(", "__file__", ")", ")", "\n", "\n", "#dataset_root = os.path.join(cur_dir,'../testing_dataset', args.dataset)", "\n", "dataset_root", "=", "'/YOUR/PATH/TO/DATASET/ROOT'", "\n", "model", "=", "ModelBuilder", "(", ")", "\n", "\n", "# load model", "\n", "model", "=", "load_pretrain", "(", "model", ",", "args", ".", "snapshot", ")", ".", "cuda", "(", ")", ".", "eval", "(", ")", "\n", "\n", "# build tracker", "\n", "tracker", "=", "SiamCARTracker", "(", "model", ",", "cfg", ".", "TRACK", ")", "\n", "\n", "# create dataset", "\n", "dataset", "=", "DatasetFactory", ".", "create_dataset", "(", "name", "=", "args", ".", "dataset", ",", "\n", "dataset_root", "=", "dataset_root", ",", "\n", "load_img", "=", "False", ")", "\n", "\n", "model_name", "=", "'UDATCAR_A6000_'", "+", "str", "(", "args", ".", "snapshot", ".", "split", "(", "'/'", ")", "[", "-", "2", "]", ")", "+", "str", "(", "args", ".", "snapshot", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "[", ":", "-", "4", "]", ")", "+", "'_'", "+", "str", "(", "hp", "[", "'lr'", "]", ")", "+", "'_'", "+", "str", "(", "hp", "[", "'penalty_k'", "]", ")", "+", "'_'", "+", "str", "(", "hp", "[", "'window_lr'", "]", ")", "#  + '-random'", "\n", "model_path", "=", "os", ".", "path", ".", "join", "(", "'results'", ",", "args", ".", "dataset", ",", "model_name", ")", "\n", "# OPE tracking", "\n", "for", "v_idx", ",", "video", "in", "enumerate", "(", "dataset", ")", ":", "\n", "        ", "if", "isfile", "(", "os", ".", "getcwd", "(", ")", "+", "os", ".", "path", ".", "join", "(", "'/results'", ",", "args", ".", "dataset", ",", "model_name", ",", "'{}.txt'", ".", "format", "(", "video", ".", "name", ")", ")", ")", ":", "\n", "            ", "print", "(", "video", ".", "name", ")", "\n", "continue", "\n", "", "if", "args", ".", "video", "!=", "''", ":", "\n", "# test one special video", "\n", "            ", "if", "video", ".", "name", "!=", "args", ".", "video", ":", "\n", "                ", "continue", "\n", "", "", "toc", "=", "0", "\n", "pred_bboxes", "=", "[", "]", "\n", "track_times", "=", "[", "]", "\n", "for", "idx", ",", "(", "img", ",", "gt_bbox", ")", "in", "enumerate", "(", "video", ")", ":", "\n", "            ", "tic", "=", "cv2", ".", "getTickCount", "(", ")", "\n", "if", "idx", "==", "0", ":", "\n", "                ", "cx", ",", "cy", ",", "w", ",", "h", "=", "get_axis_aligned_bbox", "(", "np", ".", "array", "(", "gt_bbox", ")", ")", "\n", "gt_bbox_", "=", "[", "cx", "-", "(", "w", "-", "1", ")", "/", "2", ",", "cy", "-", "(", "h", "-", "1", ")", "/", "2", ",", "w", ",", "h", "]", "\n", "tracker", ".", "init", "(", "img", ",", "gt_bbox_", ")", "\n", "pred_bbox", "=", "gt_bbox_", "\n", "pred_bboxes", ".", "append", "(", "pred_bbox", ")", "\n", "", "else", ":", "\n", "                ", "outputs", "=", "tracker", ".", "track", "(", "img", ",", "hp", ")", "\n", "pred_bbox", "=", "outputs", "[", "'bbox'", "]", "\n", "pred_bboxes", ".", "append", "(", "pred_bbox", ")", "\n", "", "toc", "+=", "cv2", ".", "getTickCount", "(", ")", "-", "tic", "\n", "track_times", ".", "append", "(", "(", "cv2", ".", "getTickCount", "(", ")", "-", "tic", ")", "/", "cv2", ".", "getTickFrequency", "(", ")", ")", "\n", "if", "idx", "==", "0", ":", "\n", "                ", "cv2", ".", "destroyAllWindows", "(", ")", "\n", "", "if", "args", ".", "vis", "and", "idx", ">", "0", ":", "\n", "                ", "if", "not", "any", "(", "map", "(", "math", ".", "isnan", ",", "gt_bbox", ")", ")", ":", "\n", "                    ", "gt_bbox", "=", "list", "(", "map", "(", "int", ",", "gt_bbox", ")", ")", "\n", "pred_bbox", "=", "list", "(", "map", "(", "int", ",", "pred_bbox", ")", ")", "\n", "cv2", ".", "rectangle", "(", "img", ",", "(", "gt_bbox", "[", "0", "]", ",", "gt_bbox", "[", "1", "]", ")", ",", "\n", "(", "gt_bbox", "[", "0", "]", "+", "gt_bbox", "[", "2", "]", ",", "gt_bbox", "[", "1", "]", "+", "gt_bbox", "[", "3", "]", ")", ",", "(", "0", ",", "255", ",", "0", ")", ",", "3", ")", "\n", "cv2", ".", "rectangle", "(", "img", ",", "(", "pred_bbox", "[", "0", "]", ",", "pred_bbox", "[", "1", "]", ")", ",", "\n", "(", "pred_bbox", "[", "0", "]", "+", "pred_bbox", "[", "2", "]", ",", "pred_bbox", "[", "1", "]", "+", "pred_bbox", "[", "3", "]", ")", ",", "(", "0", ",", "255", ",", "255", ")", ",", "3", ")", "\n", "cv2", ".", "putText", "(", "img", ",", "str", "(", "idx", ")", ",", "(", "40", ",", "40", ")", ",", "cv2", ".", "FONT_HERSHEY_SIMPLEX", ",", "1", ",", "(", "0", ",", "255", ",", "255", ")", ",", "2", ")", "\n", "cv2", ".", "imshow", "(", "video", ".", "name", ",", "img", ")", "\n", "cv2", ".", "waitKey", "(", "1", ")", "\n", "", "", "", "toc", "/=", "cv2", ".", "getTickFrequency", "(", ")", "\n", "# save results", "\n", "model_path", "=", "os", ".", "path", ".", "join", "(", "'results'", ",", "args", ".", "dataset", ",", "model_name", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "model_path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "model_path", ")", "\n", "", "result_path", "=", "os", ".", "path", ".", "join", "(", "model_path", ",", "'{}.txt'", ".", "format", "(", "video", ".", "name", ")", ")", "\n", "with", "open", "(", "result_path", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "for", "x", "in", "pred_bboxes", ":", "\n", "                ", "f", ".", "write", "(", "','", ".", "join", "(", "[", "str", "(", "i", ")", "for", "i", "in", "x", "]", ")", "+", "'\\n'", ")", "\n", "", "", "print", "(", "'({:3d}) Video: {:12s} Time: {:5.1f}s Speed: {:3.1f}fps'", ".", "format", "(", "\n", "v_idx", "+", "1", ",", "video", ".", "name", ",", "toc", ",", "idx", "/", "toc", ")", ")", "\n", "", "os", ".", "chdir", "(", "model_path", ")", "\n", "save_file", "=", "'../%s'", "%", "dataset", "\n", "# shutil.make_archive(save_file, 'zip')", "\n", "print", "(", "'Records saved at'", ",", "save_file", "+", "'.zip'", ")", "\n", "\n", "\n", "", "if", "__name__", "==", "'__main__'", ":", "\n", "    ", "main", "(", ")", "\n", "", ""]]}