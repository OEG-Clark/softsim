{"home.repos.pwc.inspect_result.maygodwithu_TRMD.src.rerank.main_cli": [[8, 47], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "print", "data.read_datafiles", "data.read_run_dict", "train.run_model", "torch.cuda.device_count", "parser.parse_args.model_weights.split", "MODEL_MAP.keys", "MODEL_MAP.keys", "MODEL_MAP.keys", "argparse.FileType", "argparse.FileType", "argparse.FileType", "len", "model.load", "len", "model.load_duet"], "function", ["home.repos.pwc.inspect_result.maygodwithu_TRMD.src.data.read_datafiles", "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.data.read_run_dict", "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.train.run_model", "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.MultiBertRanker.load", "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.DistilBertRanker.load_duet"], ["def", "main_cli", "(", ")", ":", "\n", "    ", "MODEL_MAP", "=", "train", ".", "modeling", ".", "MODEL_MAP", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "'TRMD model re-ranking'", ")", "\n", "parser", ".", "add_argument", "(", "'--model'", ",", "choices", "=", "MODEL_MAP", ".", "keys", "(", ")", ",", "default", "=", "'vanilla_bert'", ")", "\n", "parser", ".", "add_argument", "(", "'--submodel1'", ",", "choices", "=", "MODEL_MAP", ".", "keys", "(", ")", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "'--submodel2'", ",", "choices", "=", "MODEL_MAP", ".", "keys", "(", ")", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "'--datafiles'", ",", "type", "=", "argparse", ".", "FileType", "(", "'rt'", ")", ",", "nargs", "=", "'+'", ")", "\n", "parser", ".", "add_argument", "(", "'--run'", ",", "type", "=", "argparse", ".", "FileType", "(", "'rt'", ")", ")", "\n", "parser", ".", "add_argument", "(", "'--model_weights'", ",", "type", "=", "str", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "'--out_path'", ",", "type", "=", "argparse", ".", "FileType", "(", "'wt'", ")", ")", "\n", "parser", ".", "add_argument", "(", "'--gpunum'", ",", "type", "=", "str", ",", "default", "=", "\"0\"", ",", "help", "=", "'gup number'", ")", "\n", "parser", ".", "add_argument", "(", "'--random_seed'", ",", "type", "=", "int", ",", "default", "=", "42", ",", "help", "=", "'random seed'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "#setRandomSeed(args.random_seed)", "\n", "\n", "os", ".", "environ", "[", "\"CUDA_DEVICE_ORDER\"", "]", "=", "\"PCI_BUS_ID\"", "\n", "os", ".", "environ", "[", "\"CUDA_VISIBLE_DEVICES\"", "]", "=", "args", ".", "gpunum", "\n", "\n", "print", "(", "\"GPU count=\"", ",", "torch", ".", "cuda", ".", "device_count", "(", ")", ")", "\n", "\n", "if", "(", "args", ".", "model", "==", "'distilbert'", ")", ":", "\n", "        ", "has_colbert", "=", "False", "\n", "if", "(", "\"colbert\"", "in", "args", ".", "submodel1", "or", "\"colbert\"", "in", "args", ".", "submodel2", ")", ":", "has_colbert", "=", "True", "\n", "model", "=", "MODEL_MAP", "[", "args", ".", "model", "]", "(", "args", ".", "submodel1", ",", "args", ".", "submodel2", ",", "late", "=", "True", ",", "colbert", "=", "has_colbert", ")", "# for late interaction", "\n", "", "else", ":", "\n", "        ", "model", "=", "MODEL_MAP", "[", "args", ".", "model", "]", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "", "dataset", "=", "data", ".", "read_datafiles", "(", "args", ".", "datafiles", ")", "\n", "run", "=", "data", ".", "read_run_dict", "(", "args", ".", "run", ")", "\n", "\n", "if", "(", "args", ".", "model_weights", "is", "not", "None", ")", ":", "\n", "        ", "wts", "=", "args", ".", "model_weights", ".", "split", "(", "','", ")", "\n", "if", "(", "len", "(", "wts", ")", "==", "1", ")", ":", "\n", "            ", "model", ".", "load", "(", "wts", "[", "0", "]", ")", "\n", "", "elif", "(", "len", "(", "wts", ")", "==", "2", ")", ":", "\n", "            ", "model", ".", "load_duet", "(", "wts", "[", "0", "]", ",", "wts", "[", "1", "]", ")", "\n", "\n", "", "", "train", ".", "run_model", "(", "model", ",", "dataset", ",", "run", ",", "args", ".", "out_path", ".", "name", ",", "desc", "=", "'rerank'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.BertRanker.__init__": [[9, 19], ["super().__init__", "transformers.BertTokenizer.from_pretrained", "transformers.BertModel.from_pretrained"], "methods", ["home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling_util.KNRMRbfKernel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "without_bert", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "BERT_MODEL", "=", "'bert-base-uncased'", "\n", "self", ".", "CHANNELS", "=", "12", "+", "1", "# from bert-base-uncased", "\n", "self", ".", "BERT_SIZE", "=", "768", "# from bert-base-uncased", "\n", "if", "(", "without_bert", ")", ":", "\n", "            ", "self", ".", "bert", "=", "None", "\n", "", "else", ":", "\n", "            ", "self", ".", "bert", "=", "BertModel", ".", "from_pretrained", "(", "self", ".", "BERT_MODEL", ",", "output_hidden_states", "=", "True", ")", "\n", "", "self", ".", "tokenizer", "=", "BertTokenizer", ".", "from_pretrained", "(", "self", ".", "BERT_MODEL", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.BertRanker.forward": [[20, 22], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "**", "inputs", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.BertRanker.save": [[23, 28], ["modeling.BertRanker.state_dict", "list", "torch.save", "torch.save", "torch.save", "torch.save"], "methods", ["home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.DistilBertRanker.save", "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.DistilBertRanker.save", "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.DistilBertRanker.save", "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.DistilBertRanker.save"], ["", "def", "save", "(", "self", ",", "path", ")", ":", "\n", "        ", "state", "=", "self", ".", "state_dict", "(", "keep_vars", "=", "True", ")", "\n", "for", "key", "in", "list", "(", "state", ")", ":", "\n", "            ", "state", "[", "key", "]", "=", "state", "[", "key", "]", ".", "data", "\n", "", "torch", ".", "save", "(", "state", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.BertRanker.load": [[29, 32], ["modeling.BertRanker.load_state_dict", "print", "torch.load", "torch.load", "torch.load", "torch.load"], "methods", ["home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.MultiBertRanker.load", "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.MultiBertRanker.load", "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.MultiBertRanker.load", "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.MultiBertRanker.load"], ["", "def", "load", "(", "self", ",", "path", ")", ":", "\n", "        ", "self", ".", "load_state_dict", "(", "torch", ".", "load", "(", "path", ")", ",", "strict", "=", "False", ")", "\n", "print", "(", "\"load model : \"", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.BertRanker.load_cuda": [[33, 36], ["modeling.BertRanker.load_state_dict", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.device", "torch.device", "torch.device", "torch.device"], "methods", ["home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.MultiBertRanker.load", "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.MultiBertRanker.load", "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.MultiBertRanker.load", "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.MultiBertRanker.load"], ["", "def", "load_cuda", "(", "self", ",", "path", ",", "device", ")", ":", "\n", "        ", "self", ".", "load_state_dict", "(", "torch", ".", "load", "(", "path", ",", "map_location", "=", "torch", ".", "device", "(", "device", ")", ")", ",", "strict", "=", "False", ")", "\n", "print", "(", "\"load model set device : \"", ",", "path", ",", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.BertRanker.freeze_bert": [[37, 40], ["modeling.BertRanker.bert.parameters"], "methods", ["None"], ["", "def", "freeze_bert", "(", "self", ")", ":", "\n", "        ", "for", "p", "in", "self", ".", "bert", ".", "parameters", "(", ")", ":", "\n", "            ", "p", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.BertRanker.get_params": [[41, 46], ["modeling.BertRanker.named_parameters", "k.startswith", "k.startswith"], "methods", ["None"], ["", "", "def", "get_params", "(", "self", ")", ":", "\n", "        ", "params", "=", "[", "(", "k", ",", "v", ")", "for", "k", ",", "v", "in", "self", ".", "named_parameters", "(", ")", "if", "v", ".", "requires_grad", "]", "\n", "non_bert_params", "=", "[", "v", "for", "k", ",", "v", "in", "params", "if", "not", "k", ".", "startswith", "(", "'bert'", ")", "]", "\n", "bert_params", "=", "[", "v", "for", "k", ",", "v", "in", "params", "if", "k", ".", "startswith", "(", "'bert'", ")", "]", "\n", "return", "non_bert_params", ",", "bert_params", "\n", "\n"]], "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.BertRanker.tokenize": [[47, 52], ["modeling.BertRanker.tokenizer.tokenize"], "methods", ["home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.MultiBertRanker.tokenize"], ["", "@", "memoize_method", "\n", "def", "tokenize", "(", "self", ",", "text", ")", ":", "\n", "        ", "toks", "=", "self", ".", "tokenizer", ".", "tokenize", "(", "text", ")", "\n", "toks", "=", "[", "self", ".", "tokenizer", ".", "vocab", "[", "t", "]", "for", "t", "in", "toks", "]", "\n", "return", "toks", "\n", "\n"]], "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.BertRanker.encode_bert": [[53, 98], ["modeling_util.subbatch", "modeling_util.subbatch", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "modeling.BertRanker.bert", "torch.cat.long", "torch.cat.long", "modeling_util.un_subbatch", "range", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "cls_results.append", "torch.stack().mean.append", "torch.stack().mean.append", "torch.stack", "torch.stack", "torch.stack", "torch.stack"], "methods", ["home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling_util.subbatch", "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling_util.subbatch", "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling_util.un_subbatch"], ["", "def", "encode_bert", "(", "self", ",", "query_tok", ",", "query_mask", ",", "doc_tok", ",", "doc_mask", ")", ":", "\n", "        ", "BATCH", ",", "QLEN", "=", "query_tok", ".", "shape", "\n", "DIFF", "=", "3", "# = [CLS] and 2x[SEP]", "\n", "maxlen", "=", "self", ".", "bert", ".", "config", ".", "max_position_embeddings", "\n", "\n", "MAX_DOC_TOK_LEN", "=", "maxlen", "-", "QLEN", "-", "DIFF", "\n", "\n", "doc_toks", ",", "sbcount", "=", "modeling_util", ".", "subbatch", "(", "doc_tok", ",", "MAX_DOC_TOK_LEN", ")", "\n", "doc_mask", ",", "_", "=", "modeling_util", ".", "subbatch", "(", "doc_mask", ",", "MAX_DOC_TOK_LEN", ")", "\n", "\n", "query_toks", "=", "torch", ".", "cat", "(", "[", "query_tok", "]", "*", "sbcount", ",", "dim", "=", "0", ")", "\n", "query_mask", "=", "torch", ".", "cat", "(", "[", "query_mask", "]", "*", "sbcount", ",", "dim", "=", "0", ")", "\n", "\n", "CLSS", "=", "torch", ".", "full_like", "(", "query_toks", "[", ":", ",", ":", "1", "]", ",", "self", ".", "tokenizer", ".", "vocab", "[", "'[CLS]'", "]", ")", "\n", "SEPS", "=", "torch", ".", "full_like", "(", "query_toks", "[", ":", ",", ":", "1", "]", ",", "self", ".", "tokenizer", ".", "vocab", "[", "'[SEP]'", "]", ")", "\n", "ONES", "=", "torch", ".", "ones_like", "(", "query_mask", "[", ":", ",", ":", "1", "]", ")", "\n", "NILS", "=", "torch", ".", "zeros_like", "(", "query_mask", "[", ":", ",", ":", "1", "]", ")", "\n", "\n", "# build BERT input sequences", "\n", "toks", "=", "torch", ".", "cat", "(", "[", "CLSS", ",", "query_toks", ",", "SEPS", ",", "doc_toks", ",", "SEPS", "]", ",", "dim", "=", "1", ")", "\n", "mask", "=", "torch", ".", "cat", "(", "[", "ONES", ",", "query_mask", ",", "ONES", ",", "doc_mask", ",", "ONES", "]", ",", "dim", "=", "1", ")", "\n", "segment_ids", "=", "torch", ".", "cat", "(", "[", "NILS", "]", "*", "(", "2", "+", "QLEN", ")", "+", "[", "ONES", "]", "*", "(", "1", "+", "doc_toks", ".", "shape", "[", "1", "]", ")", ",", "dim", "=", "1", ")", "\n", "toks", "[", "toks", "==", "-", "1", "]", "=", "0", "# remove padding (will be masked anyway)", "\n", "\n", "# execute BERT model", "\n", "#result = self.bert(toks, segment_ids.long(), mask)", "\n", "result_tuple", "=", "self", ".", "bert", "(", "toks", ",", "mask", ",", "segment_ids", ".", "long", "(", ")", ")", "\n", "result", "=", "result_tuple", "[", "2", "]", "## all hidden_states", "\n", "\n", "# extract relevant subsequences for query and doc", "\n", "query_results", "=", "[", "r", "[", ":", "BATCH", ",", "1", ":", "QLEN", "+", "1", "]", "for", "r", "in", "result", "]", "\n", "doc_results", "=", "[", "r", "[", ":", ",", "QLEN", "+", "2", ":", "-", "1", "]", "for", "r", "in", "result", "]", "\n", "doc_results", "=", "[", "modeling_util", ".", "un_subbatch", "(", "r", ",", "doc_tok", ",", "MAX_DOC_TOK_LEN", ")", "for", "r", "in", "doc_results", "]", "\n", "\n", "# build CLS representation", "\n", "cls_results", "=", "[", "]", "\n", "for", "layer", "in", "result", ":", "\n", "            ", "cls_output", "=", "layer", "[", ":", ",", "0", "]", "\n", "cls_result", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "cls_output", ".", "shape", "[", "0", "]", "//", "BATCH", ")", ":", "\n", "                ", "cls_result", ".", "append", "(", "cls_output", "[", "i", "*", "BATCH", ":", "(", "i", "+", "1", ")", "*", "BATCH", "]", ")", "\n", "", "cls_result", "=", "torch", ".", "stack", "(", "cls_result", ",", "dim", "=", "2", ")", ".", "mean", "(", "dim", "=", "2", ")", "\n", "cls_results", ".", "append", "(", "cls_result", ")", "\n", "\n", "", "return", "cls_results", ",", "query_results", ",", "doc_results", "\n", "\n"]], "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.BertRanker.encode_colbert": [[99, 148], ["torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.full().cuda", "torch.full().cuda", "torch.full().cuda", "torch.full().cuda", "torch.full().cuda", "torch.full().cuda", "torch.full().cuda", "torch.full().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "modeling.BertRanker.bert", "torch.cat.long", "torch.cat.long", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["None"], ["", "def", "encode_colbert", "(", "self", ",", "query_tok", ",", "query_mask", ",", "doc_tok", ",", "doc_mask", ",", "device", "=", "'cuda:0'", ")", ":", "\n", "# encode without subbatching", "\n", "        ", "BATCH", ",", "QLEN", "=", "query_tok", ".", "shape", "\n", "DIFF", "=", "5", "# = [CLS], 2x[SEP], [Q], [D]", "\n", "maxlen", "=", "self", ".", "bert", ".", "config", ".", "max_position_embeddings", "\n", "\n", "MAX_DOC_TOK_LEN", "=", "maxlen", "-", "QLEN", "-", "DIFF", "\n", "\n", "query_toks", "=", "query_tok", "\n", "# query_mask = query_mask", "\n", "doc_toks", "=", "doc_tok", "[", ":", ",", ":", "MAX_DOC_TOK_LEN", "]", "\n", "doc_mask", "=", "doc_mask", "[", ":", ",", ":", "MAX_DOC_TOK_LEN", "]", "\n", "\n", "CLSS", "=", "torch", ".", "full_like", "(", "query_toks", "[", ":", ",", ":", "1", "]", ",", "self", ".", "tokenizer", ".", "vocab", "[", "'[CLS]'", "]", ")", "\n", "SEPS", "=", "torch", ".", "full_like", "(", "query_toks", "[", ":", ",", ":", "1", "]", ",", "self", ".", "tokenizer", ".", "vocab", "[", "'[SEP]'", "]", ")", "\n", "ONES", "=", "torch", ".", "ones_like", "(", "query_mask", "[", ":", ",", ":", "1", "]", ")", "\n", "NILS", "=", "torch", ".", "zeros_like", "(", "query_mask", "[", ":", ",", ":", "1", "]", ")", "\n", "\n", "Q_tok", "=", "torch", ".", "full", "(", "\n", "size", "=", "(", "BATCH", ",", "1", ")", ",", "fill_value", "=", "1", ",", "dtype", "=", "torch", ".", "long", "\n", ")", ".", "cuda", "(", "device", ")", "# [unused0] = 1", "\n", "D_tok", "=", "torch", ".", "full", "(", "\n", "size", "=", "(", "BATCH", ",", "1", ")", ",", "fill_value", "=", "2", ",", "dtype", "=", "torch", ".", "long", "\n", ")", ".", "cuda", "(", "device", ")", "# [unused1] = 2", "\n", "\n", "# Query augmentation with [MASK] tokens ([MASK] = 103)", "\n", "query_toks", "[", "query_toks", "==", "-", "1", "]", "=", "torch", ".", "tensor", "(", "103", ")", ".", "cuda", "(", "device", ")", "\n", "query_mask", "=", "torch", ".", "ones_like", "(", "query_mask", ")", "\n", "\n", "# build BERT input sequences", "\n", "toks", "=", "torch", ".", "cat", "(", "[", "CLSS", ",", "Q_tok", ",", "query_toks", ",", "SEPS", ",", "D_tok", ",", "doc_toks", ",", "SEPS", "]", ",", "dim", "=", "1", ")", "\n", "mask", "=", "torch", ".", "cat", "(", "[", "ONES", ",", "ONES", ",", "query_mask", ",", "ONES", ",", "ONES", ",", "doc_mask", ",", "ONES", "]", ",", "dim", "=", "1", ")", "\n", "segment_ids", "=", "torch", ".", "cat", "(", "[", "NILS", "]", "*", "(", "3", "+", "QLEN", ")", "+", "[", "ONES", "]", "*", "(", "2", "+", "doc_toks", ".", "shape", "[", "1", "]", ")", ",", "dim", "=", "1", ")", "\n", "toks", "[", "toks", "==", "-", "1", "]", "=", "0", "# remove padding (will be masked anyway)", "\n", "\n", "# modifiy doc_mask", "\n", "doc_mask", "=", "torch", ".", "cat", "(", "[", "ONES", ",", "doc_mask", ",", "ONES", "]", ",", "dim", "=", "1", ")", "\n", "\n", "# execute BERT model", "\n", "result_tuple", "=", "self", ".", "bert", "(", "toks", ",", "mask", ",", "segment_ids", ".", "long", "(", ")", ")", "\n", "result", "=", "result_tuple", "[", "2", "]", "## all hidden_states", "\n", "\n", "# extract relevant subsequences for query and doc", "\n", "query_results", "=", "[", "r", "[", ":", ",", ":", "QLEN", "+", "3", "]", "for", "r", "in", "result", "]", "\n", "doc_results", "=", "[", "r", "[", ":", ",", "QLEN", "+", "3", ":", "]", "for", "r", "in", "result", "]", "\n", "\n", "cls_results", "=", "[", "r", "[", ":", ",", "0", "]", "for", "r", "in", "result", "]", "\n", "\n", "return", "cls_results", ",", "query_results", ",", "query_mask", ",", "doc_results", ",", "doc_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.TwoBertRanker.__init__": [[150, 160], ["super().__init__", "transformers.BertTokenizer.from_pretrained", "transformers.BertModel.from_pretrained"], "methods", ["home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling_util.KNRMRbfKernel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "without_bert", "=", "False", ",", "asym", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "BERT_MODEL", "=", "'bert-base-uncased'", "\n", "self", ".", "CHANNELS", "=", "12", "+", "1", "# from bert-base-uncased", "\n", "self", ".", "BERT_SIZE", "=", "768", "# from bert-base-uncased", "\n", "if", "(", "without_bert", ")", ":", "\n", "            ", "self", ".", "bert", "=", "None", "\n", "", "else", ":", "\n", "            ", "self", ".", "bert", "=", "BertModel", ".", "from_pretrained", "(", "self", ".", "BERT_MODEL", ",", "output_hidden_states", "=", "True", ")", "\n", "", "self", ".", "tokenizer", "=", "BertTokenizer", ".", "from_pretrained", "(", "self", ".", "BERT_MODEL", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.TwoBertRanker.forward": [[161, 163], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "**", "inputs", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.TwoBertRanker.save": [[164, 169], ["modeling.TwoBertRanker.state_dict", "list", "torch.save", "torch.save", "torch.save", "torch.save"], "methods", ["home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.DistilBertRanker.save", "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.DistilBertRanker.save", "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.DistilBertRanker.save", "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.DistilBertRanker.save"], ["", "def", "save", "(", "self", ",", "path", ")", ":", "\n", "        ", "state", "=", "self", ".", "state_dict", "(", "keep_vars", "=", "True", ")", "\n", "for", "key", "in", "list", "(", "state", ")", ":", "\n", "            ", "state", "[", "key", "]", "=", "state", "[", "key", "]", ".", "data", "\n", "", "torch", ".", "save", "(", "state", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.TwoBertRanker.load": [[170, 173], ["modeling.TwoBertRanker.load_state_dict", "print", "torch.load", "torch.load", "torch.load", "torch.load"], "methods", ["home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.MultiBertRanker.load", "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.MultiBertRanker.load", "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.MultiBertRanker.load", "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.MultiBertRanker.load"], ["", "def", "load", "(", "self", ",", "path", ")", ":", "\n", "        ", "self", ".", "load_state_dict", "(", "torch", ".", "load", "(", "path", ")", ",", "strict", "=", "False", ")", "\n", "print", "(", "\"load model : \"", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.TwoBertRanker.freeze_bert": [[174, 177], ["modeling.TwoBertRanker.bert.parameters"], "methods", ["None"], ["", "def", "freeze_bert", "(", "self", ")", ":", "\n", "        ", "for", "p", "in", "self", ".", "bert", ".", "parameters", "(", ")", ":", "\n", "            ", "p", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.TwoBertRanker.get_params": [[178, 183], ["modeling.TwoBertRanker.named_parameters", "k.startswith", "k.startswith"], "methods", ["None"], ["", "", "def", "get_params", "(", "self", ")", ":", "\n", "        ", "params", "=", "[", "(", "k", ",", "v", ")", "for", "k", ",", "v", "in", "self", ".", "named_parameters", "(", ")", "if", "v", ".", "requires_grad", "]", "\n", "non_bert_params", "=", "[", "v", "for", "k", ",", "v", "in", "params", "if", "not", "k", ".", "startswith", "(", "'bert'", ")", "]", "\n", "bert_params", "=", "[", "v", "for", "k", ",", "v", "in", "params", "if", "k", ".", "startswith", "(", "'bert'", ")", "]", "\n", "return", "non_bert_params", ",", "bert_params", "\n", "\n"]], "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.TwoBertRanker.tokenize": [[184, 189], ["modeling.TwoBertRanker.tokenizer.tokenize"], "methods", ["home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.MultiBertRanker.tokenize"], ["", "@", "memoize_method", "\n", "def", "tokenize", "(", "self", ",", "text", ")", ":", "\n", "        ", "toks", "=", "self", ".", "tokenizer", ".", "tokenize", "(", "text", ")", "\n", "toks", "=", "[", "self", ".", "tokenizer", ".", "vocab", "[", "t", "]", "for", "t", "in", "toks", "]", "\n", "return", "toks", "\n", "\n"]], "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.TwoBertRanker.encode_bert": [[190, 249], ["modeling_util.subbatch", "modeling_util.subbatch", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "modeling.TwoBertRanker.bert", "modeling.TwoBertRanker.bert", "torch.cat.long", "torch.cat.long", "torch.cat.long", "torch.cat.long", "modeling_util.un_subbatch", "range", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "q_cls_results.append", "range", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "d_cls_results.append", "torch.stack().mean.append", "torch.stack().mean.append", "torch.stack().mean.append", "torch.stack().mean.append", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack"], "methods", ["home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling_util.subbatch", "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling_util.subbatch", "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling_util.un_subbatch"], ["", "def", "encode_bert", "(", "self", ",", "query_tok", ",", "query_mask", ",", "doc_tok", ",", "doc_mask", ")", ":", "\n", "        ", "BATCH", ",", "QLEN", "=", "query_tok", ".", "shape", "\n", "DIFF", "=", "3", "# = [CLS] and 2x[SEP]", "\n", "maxlen", "=", "self", ".", "bert", ".", "config", ".", "max_position_embeddings", "\n", "MAX_DOC_TOK_LEN", "=", "maxlen", "-", "QLEN", "-", "DIFF", "\n", "\n", "doc_toks", ",", "sbcount", "=", "modeling_util", ".", "subbatch", "(", "doc_tok", ",", "MAX_DOC_TOK_LEN", ")", "\n", "doc_mask", ",", "_", "=", "modeling_util", ".", "subbatch", "(", "doc_mask", ",", "MAX_DOC_TOK_LEN", ")", "\n", "\n", "query_toks", "=", "torch", ".", "cat", "(", "[", "query_tok", "]", "*", "sbcount", ",", "dim", "=", "0", ")", "\n", "query_mask", "=", "torch", ".", "cat", "(", "[", "query_mask", "]", "*", "sbcount", ",", "dim", "=", "0", ")", "\n", "\n", "CLSS", "=", "torch", ".", "full_like", "(", "query_toks", "[", ":", ",", ":", "1", "]", ",", "self", ".", "tokenizer", ".", "vocab", "[", "'[CLS]'", "]", ")", "\n", "SEPS", "=", "torch", ".", "full_like", "(", "query_toks", "[", ":", ",", ":", "1", "]", ",", "self", ".", "tokenizer", ".", "vocab", "[", "'[SEP]'", "]", ")", "\n", "ONES", "=", "torch", ".", "ones_like", "(", "query_mask", "[", ":", ",", ":", "1", "]", ")", "\n", "NILS", "=", "torch", ".", "zeros_like", "(", "query_mask", "[", ":", ",", ":", "1", "]", ")", "\n", "\n", "# build BERT input sequences query & doc", "\n", "q_toks", "=", "torch", ".", "cat", "(", "[", "CLSS", ",", "query_toks", ",", "SEPS", "]", ",", "dim", "=", "1", ")", "\n", "q_mask", "=", "torch", ".", "cat", "(", "[", "ONES", ",", "query_mask", ",", "ONES", "]", ",", "dim", "=", "1", ")", "\n", "q_segid", "=", "torch", ".", "cat", "(", "[", "NILS", "]", "*", "(", "2", "+", "QLEN", ")", ",", "dim", "=", "1", ")", "\n", "q_toks", "[", "q_toks", "==", "-", "1", "]", "=", "0", "\n", "\n", "d_toks", "=", "torch", ".", "cat", "(", "[", "CLSS", ",", "doc_toks", ",", "SEPS", "]", ",", "dim", "=", "1", ")", "\n", "d_mask", "=", "torch", ".", "cat", "(", "[", "ONES", ",", "doc_mask", ",", "ONES", "]", ",", "dim", "=", "1", ")", "\n", "d_segid", "=", "torch", ".", "cat", "(", "[", "NILS", "]", "*", "(", "2", "+", "doc_toks", ".", "shape", "[", "1", "]", ")", ",", "dim", "=", "1", ")", "\n", "d_toks", "[", "d_toks", "==", "-", "1", "]", "=", "0", "\n", "\n", "# execute BERT model", "\n", "q_result_tuple", "=", "self", ".", "bert", "(", "q_toks", ",", "q_mask", ",", "q_segid", ".", "long", "(", ")", ")", "\n", "d_result_tuple", "=", "self", ".", "bert", "(", "d_toks", ",", "d_mask", ",", "d_segid", ".", "long", "(", ")", ")", "\n", "q_result", "=", "q_result_tuple", "[", "2", "]", "\n", "d_result", "=", "d_result_tuple", "[", "2", "]", "\n", "\n", "# extract relevant subsequences for query and doc", "\n", "query_results", "=", "[", "r", "[", ":", "BATCH", ",", "1", ":", "-", "1", "]", "for", "r", "in", "q_result", "]", "\n", "doc_results", "=", "[", "r", "[", ":", ",", "1", ":", "-", "1", "]", "for", "r", "in", "d_result", "]", "\n", "doc_results", "=", "[", "modeling_util", ".", "un_subbatch", "(", "r", ",", "doc_tok", ",", "MAX_DOC_TOK_LEN", ")", "for", "r", "in", "doc_results", "]", "\n", "\n", "# build CLS representation", "\n", "q_cls_results", "=", "[", "]", "\n", "for", "layer", "in", "q_result", ":", "\n", "            ", "cls_output", "=", "layer", "[", ":", ",", "0", "]", "\n", "cls_result", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "cls_output", ".", "shape", "[", "0", "]", "//", "BATCH", ")", ":", "\n", "                ", "cls_result", ".", "append", "(", "cls_output", "[", "i", "*", "BATCH", ":", "(", "i", "+", "1", ")", "*", "BATCH", "]", ")", "\n", "", "cls_result", "=", "torch", ".", "stack", "(", "cls_result", ",", "dim", "=", "2", ")", ".", "mean", "(", "dim", "=", "2", ")", "\n", "q_cls_results", ".", "append", "(", "cls_result", ")", "\n", "\n", "", "d_cls_results", "=", "[", "]", "\n", "for", "layer", "in", "d_result", ":", "\n", "            ", "cls_output", "=", "layer", "[", ":", ",", "0", "]", "\n", "cls_result", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "cls_output", ".", "shape", "[", "0", "]", "//", "BATCH", ")", ":", "\n", "                ", "cls_result", ".", "append", "(", "cls_output", "[", "i", "*", "BATCH", ":", "(", "i", "+", "1", ")", "*", "BATCH", "]", ")", "\n", "", "cls_result", "=", "torch", ".", "stack", "(", "cls_result", ",", "dim", "=", "2", ")", ".", "mean", "(", "dim", "=", "2", ")", "\n", "d_cls_results", ".", "append", "(", "cls_result", ")", "\n", "\n", "", "return", "q_cls_results", ",", "d_cls_results", ",", "query_results", ",", "doc_results", "\n", "\n"]], "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.TwoBertRanker.encode_colbert": [[250, 302], ["torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "modeling.TwoBertRanker.bert", "modeling.TwoBertRanker.bert", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.cat.long", "torch.cat.long", "torch.cat.long", "torch.cat.long", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["None"], ["", "def", "encode_colbert", "(", "self", ",", "query_tok", ",", "query_mask", ",", "doc_tok", ",", "doc_mask", ",", "device", "=", "'cuda:0'", ")", ":", "\n", "# encode without subbatching", "\n", "        ", "query_lengths", "=", "(", "query_mask", ">", "0", ")", ".", "sum", "(", "1", ")", "\n", "doc_lengths", "=", "(", "doc_mask", ">", "0", ")", ".", "sum", "(", "1", ")", "\n", "BATCH", ",", "QLEN", "=", "query_tok", ".", "shape", "\n", "# QLEN : 20", "\n", "# DIFF = 2  # = [CLS] and [SEP]", "\n", "maxlen", "=", "self", ".", "bert", ".", "config", ".", "max_position_embeddings", "\n", "# MAX_DOC_TOK_LEN = maxlen - DIFF  # doc maxlen: 510", "\n", "\n", "doc_toks", "=", "F", ".", "pad", "(", "doc_tok", "[", ":", ",", ":", "maxlen", "-", "2", "]", ",", "pad", "=", "(", "0", ",", "1", ",", "0", ",", "0", ")", ",", "value", "=", "-", "1", ")", "\n", "doc_mask", "=", "F", ".", "pad", "(", "doc_mask", "[", ":", ",", ":", "maxlen", "-", "2", "]", ",", "pad", "=", "(", "0", ",", "1", ",", "0", ",", "0", ")", ",", "value", "=", "0", ")", "\n", "query_toks", "=", "query_tok", "\n", "\n", "query_lengths", "=", "torch", ".", "where", "(", "query_lengths", ">", "19", ",", "torch", ".", "tensor", "(", "19", ")", ".", "cuda", "(", "device", ")", ",", "query_lengths", ")", "\n", "query_toks", "[", "torch", ".", "arange", "(", "BATCH", ")", ",", "query_lengths", "]", "=", "self", ".", "tokenizer", ".", "vocab", "[", "\"[SEP]\"", "]", "\n", "query_mask", "[", "torch", ".", "arange", "(", "BATCH", ")", ",", "query_lengths", "]", "=", "1", "\n", "doc_lengths", "=", "torch", ".", "where", "(", "doc_lengths", ">", "510", ",", "torch", ".", "tensor", "(", "510", ")", ".", "cuda", "(", "device", ")", ",", "doc_lengths", ")", "\n", "doc_toks", "[", "torch", ".", "arange", "(", "BATCH", ")", ",", "doc_lengths", "]", "=", "self", ".", "tokenizer", ".", "vocab", "[", "\"[SEP]\"", "]", "\n", "doc_mask", "[", "torch", ".", "arange", "(", "BATCH", ")", ",", "doc_lengths", "]", "=", "1", "\n", "\n", "CLSS", "=", "torch", ".", "full_like", "(", "query_toks", "[", ":", ",", ":", "1", "]", ",", "self", ".", "tokenizer", ".", "vocab", "[", "\"[CLS]\"", "]", ")", "\n", "SEPS", "=", "torch", ".", "full_like", "(", "query_toks", "[", ":", ",", ":", "1", "]", ",", "self", ".", "tokenizer", ".", "vocab", "[", "\"[SEP]\"", "]", ")", "\n", "ONES", "=", "torch", ".", "ones_like", "(", "query_mask", "[", ":", ",", ":", "1", "]", ")", "\n", "NILS", "=", "torch", ".", "zeros_like", "(", "query_mask", "[", ":", ",", ":", "1", "]", ")", "\n", "\n", "# build BERT input sequences query & doc", "\n", "q_toks", "=", "torch", ".", "cat", "(", "[", "CLSS", ",", "query_toks", "]", ",", "dim", "=", "1", ")", "\n", "q_mask", "=", "torch", ".", "cat", "(", "[", "ONES", ",", "query_mask", "]", ",", "dim", "=", "1", ")", "\n", "q_segid", "=", "torch", ".", "cat", "(", "[", "NILS", "]", "*", "(", "1", "+", "QLEN", ")", ",", "dim", "=", "1", ")", "\n", "# 2) Query augmentation with [MASK] tokens ([MASK] = 103)", "\n", "q_toks", "[", "q_toks", "==", "-", "1", "]", "=", "torch", ".", "tensor", "(", "103", ")", ".", "cuda", "(", "device", ")", "\n", "\n", "d_toks", "=", "torch", ".", "cat", "(", "[", "CLSS", ",", "doc_toks", "]", ",", "dim", "=", "1", ")", "\n", "d_mask", "=", "torch", ".", "cat", "(", "[", "ONES", ",", "doc_mask", "]", ",", "dim", "=", "1", ")", "\n", "d_segid", "=", "torch", ".", "cat", "(", "[", "NILS", "]", "*", "(", "1", "+", "doc_toks", ".", "shape", "[", "1", "]", ")", ",", "dim", "=", "1", ")", "\n", "d_toks", "[", "d_toks", "==", "-", "1", "]", "=", "0", "\n", "\n", "# execute BERT model", "\n", "q_result_tuple", "=", "self", ".", "bert", "(", "q_toks", ",", "q_mask", ",", "q_segid", ".", "long", "(", ")", ")", "\n", "d_result_tuple", "=", "self", ".", "bert", "(", "d_toks", ",", "d_mask", ",", "d_segid", ".", "long", "(", ")", ")", "\n", "q_result", "=", "q_result_tuple", "[", "2", "]", "\n", "d_result", "=", "d_result_tuple", "[", "2", "]", "\n", "\n", "# extract relevant subsequences for query and doc", "\n", "query_results", "=", "[", "r", "[", ":", ",", ":", "]", "for", "r", "in", "q_result", "]", "# missing representation for cls and sep?", "\n", "doc_results", "=", "[", "r", "[", ":", ",", ":", "]", "for", "r", "in", "d_result", "]", "\n", "\n", "q_cls_result", "=", "[", "r", "[", ":", ",", "0", "]", "for", "r", "in", "q_result", "]", "\n", "d_cls_result", "=", "[", "r", "[", ":", ",", "0", "]", "for", "r", "in", "d_result", "]", "\n", "\n", "return", "q_cls_result", ",", "d_cls_result", ",", "query_results", ",", "q_mask", ",", "doc_results", ",", "d_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.VanillaBertRanker.__init__": [[304, 308], ["modeling.BertRanker.__init__", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling_util.KNRMRbfKernel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "without_bert", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "without_bert", ")", "\n", "self", ".", "dropout", "=", "torch", ".", "nn", ".", "Dropout", "(", "0.1", ")", "\n", "self", ".", "cls", "=", "torch", ".", "nn", ".", "Linear", "(", "self", ".", "BERT_SIZE", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.VanillaBertRanker.forward": [[309, 315], ["modeling.VanillaBertRanker.encode_bert", "modeling.VanillaBertRanker.cls", "modeling.VanillaBertRanker.cls", "modeling.VanillaBertRanker.dropout", "modeling.VanillaBertRanker.dropout"], "methods", ["home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.TwoBertRanker.encode_bert"], ["", "def", "forward", "(", "self", ",", "query_tok", ",", "query_mask", ",", "doc_tok", ",", "doc_mask", ",", "value_return", "=", "False", ")", ":", "\n", "        ", "cls_reps", ",", "_", ",", "_", "=", "self", ".", "encode_bert", "(", "query_tok", ",", "query_mask", ",", "doc_tok", ",", "doc_mask", ")", "\n", "if", "(", "value_return", ")", ":", "\n", "            ", "return", "self", ".", "cls", "(", "self", ".", "dropout", "(", "cls_reps", "[", "-", "1", "]", ")", ")", ",", "cls_reps", ",", "None", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "cls", "(", "self", ".", "dropout", "(", "cls_reps", "[", "-", "1", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.VanillaBertRanker.forward_without_bert": [[316, 318], ["modeling.VanillaBertRanker.cls", "modeling.VanillaBertRanker.dropout"], "methods", ["None"], ["", "", "def", "forward_without_bert", "(", "self", ",", "cls_reps", ",", "q_reps", ",", "d_reps", ",", "query_tok", ",", "doc_tok", ")", ":", "\n", "        ", "return", "self", ".", "cls", "(", "self", ".", "dropout", "(", "cls_reps", "[", "-", "1", "]", ")", ")", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.TwinBertRanker.__init__": [[321, 325], ["modeling.TwoBertRanker.__init__", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling_util.KNRMRbfKernel.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dropout", "=", "torch", ".", "nn", ".", "Dropout", "(", "0.1", ")", "\n", "self", ".", "cls", "=", "torch", ".", "nn", ".", "Linear", "(", "self", ".", "BERT_SIZE", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.TwinBertRanker.forward": [[326, 333], ["modeling.TwinBertRanker.encode_bert", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.cosine_similarity", "torch.cosine_similarity"], "methods", ["home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.TwoBertRanker.encode_bert"], ["", "def", "forward", "(", "self", ",", "query_tok", ",", "query_mask", ",", "doc_tok", ",", "doc_mask", ")", ":", "\n", "        ", "q_cls_reps", ",", "d_cls_reps", ",", "_", ",", "_", "=", "self", ".", "encode_bert", "(", "query_tok", ",", "query_mask", ",", "doc_tok", ",", "doc_mask", ")", "\n", "q_cls_rep", "=", "F", ".", "normalize", "(", "q_cls_reps", "[", "-", "1", "]", ",", "p", "=", "2", ",", "dim", "=", "0", ")", "\n", "d_cls_rep", "=", "F", ".", "normalize", "(", "d_cls_reps", "[", "-", "1", "]", ",", "p", "=", "2", ",", "dim", "=", "0", ")", "\n", "score", "=", "F", ".", "cosine_similarity", "(", "q_cls_rep", ",", "d_cls_rep", ")", "\n", "#print(score)", "\n", "return", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.TwinBertResRanker.__init__": [[335, 342], ["modeling.TwoBertRanker.__init__", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.AdaptiveAvgPool2d", "torch.nn.AdaptiveAvgPool2d", "torch.nn.AdaptiveAvgPool2d", "torch.nn.AdaptiveAvgPool2d", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling_util.KNRMRbfKernel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "without_bert", "=", "False", ",", "qd", "=", "True", ",", "asym", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "without_bert", ",", "asym", ")", "\n", "self", ".", "qd", "=", "qd", "\n", "self", ".", "dropout", "=", "torch", ".", "nn", ".", "Dropout", "(", "0.1", ")", "\n", "self", ".", "wpool", "=", "torch", ".", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "self", ".", "BERT_SIZE", ")", ")", "\n", "self", ".", "res", "=", "torch", ".", "nn", ".", "Linear", "(", "self", ".", "BERT_SIZE", ",", "self", ".", "BERT_SIZE", ")", "\n", "self", ".", "cls", "=", "torch", ".", "nn", ".", "Linear", "(", "self", ".", "BERT_SIZE", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.TwinBertResRanker.forward": [[343, 366], ["modeling.TwinBertResRanker.encode_bert", "torch.max", "torch.max", "torch.max", "torch.max", "modeling.TwinBertResRanker.cls", "modeling.TwinBertResRanker.wpool().squeeze", "modeling.TwinBertResRanker.wpool().squeeze", "modeling.TwinBertResRanker.res", "modeling.TwinBertResRanker.wpool", "modeling.TwinBertResRanker.wpool"], "methods", ["home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.TwoBertRanker.encode_bert"], ["", "def", "forward", "(", "self", ",", "query_tok", ",", "query_mask", ",", "doc_tok", ",", "doc_mask", ",", "value_return", "=", "False", ")", ":", "\n", "        ", "q_cls_reps", ",", "d_cls_reps", ",", "q_reps", ",", "d_reps", "=", "self", ".", "encode_bert", "(", "query_tok", ",", "query_mask", ",", "doc_tok", ",", "doc_mask", ")", "\n", "\n", "if", "(", "self", ".", "qd", ")", ":", "\n", "            ", "x1", "=", "self", ".", "wpool", "(", "q_reps", "[", "-", "1", "]", ")", ".", "squeeze", "(", "dim", "=", "1", ")", "\n", "x2", "=", "self", ".", "wpool", "(", "d_reps", "[", "-", "1", "]", ")", ".", "squeeze", "(", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "x1", "=", "q_cls_reps", "[", "-", "1", "]", "\n", "x2", "=", "d_cls_reps", "[", "-", "1", "]", "\n", "\n", "", "x", "=", "torch", ".", "max", "(", "x1", ",", "x2", ")", "\n", "feature", "=", "self", ".", "res", "(", "x", ")", "+", "x", "\n", "score", "=", "self", ".", "cls", "(", "feature", ")", "\n", "\n", "simmat", "=", "feature", "## for distillation ( features from represenation)", "\n", "#simmat = torch.cat([q_reps[-1], d_reps[-1]], dim=1)\t## for distillation ( representation )", "\n", "if", "(", "value_return", ")", ":", "\n", "            ", "if", "(", "self", ".", "qd", ")", ":", "\n", "                ", "return", "score", ",", "None", ",", "simmat", "\n", "", "else", ":", "\n", "                ", "return", "score", ",", "simmat", ",", "None", "\n", "", "", "else", ":", "\n", "            ", "return", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.TwinBertResRanker.forward_without_bert": [[367, 378], ["modeling.TwinBertResRanker.wpool().squeeze", "modeling.TwinBertResRanker.wpool().squeeze", "torch.max", "torch.max", "torch.max", "torch.max", "modeling.TwinBertResRanker.cls", "modeling.TwinBertResRanker.res", "modeling.TwinBertResRanker.wpool", "modeling.TwinBertResRanker.wpool"], "methods", ["None"], ["", "", "def", "forward_without_bert", "(", "self", ",", "cls_reps", ",", "q_reps", ",", "d_reps", ",", "query_tok", ",", "doc_tok", ")", ":", "\n", "        ", "x1", "=", "self", ".", "wpool", "(", "q_reps", "[", "-", "1", "]", ")", ".", "squeeze", "(", "dim", "=", "1", ")", "\n", "x2", "=", "self", ".", "wpool", "(", "d_reps", "[", "-", "1", "]", ")", ".", "squeeze", "(", "dim", "=", "1", ")", "\n", "\n", "x", "=", "torch", ".", "max", "(", "x1", ",", "x2", ")", "\n", "feature", "=", "self", ".", "res", "(", "x", ")", "+", "x", "\n", "score", "=", "self", ".", "cls", "(", "feature", ")", "\n", "\n", "simmat", "=", "feature", "\n", "#simmat = torch.cat([q_reps[-1], d_reps[-1]], dim=1)\t## for distilation", "\n", "return", "score", ",", "simmat", "\n", "\n"]], "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.ColBertRanker.__init__": [[380, 387], ["modeling.TwoBertRanker.__init__", "modeling.ColBertRanker.tokenize", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling_util.KNRMRbfKernel.__init__", "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.MultiBertRanker.tokenize"], ["    ", "def", "__init__", "(", "self", ",", "without_bert", "=", "False", ",", "asym", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "without_bert", ",", "asym", ")", "\n", "self", ".", "dim", "=", "128", "# default: dim=128", "\n", "self", ".", "skiplist", "=", "self", ".", "tokenize", "(", "string", ".", "punctuation", ")", "\n", "\n", "self", ".", "clinear", "=", "torch", ".", "nn", ".", "Linear", "(", "\n", "self", ".", "BERT_SIZE", ",", "self", ".", "dim", ",", "bias", "=", "False", "\n", ")", "# both for queries, documents", "\n"]], "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.ColBertRanker.forward": [[389, 441], ["torch.full().cuda", "torch.full().cuda", "torch.full().cuda", "torch.full().cuda", "torch.full().cuda", "torch.full().cuda", "torch.full().cuda", "torch.full().cuda", "torch.full().cuda", "torch.full().cuda", "torch.full().cuda", "torch.full().cuda", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "modeling.ColBertRanker.encode_colbert", "modeling.ColBertRanker.clinear", "modeling.ColBertRanker.clinear", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.where", "torch.where", "torch.where", "torch.where", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "score.unsqueeze.unsqueeze.unsqueeze", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.where.unsqueeze", "torch.where.unsqueeze", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full().cuda.long", "torch.full().cuda.long", "torch.full().cuda.long", "torch.full().cuda.long", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.normalize.permute"], "methods", ["home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.TwoBertRanker.encode_colbert"], ["", "def", "forward", "(", "self", ",", "query_tok", ",", "query_mask", ",", "doc_tok", ",", "doc_mask", ",", "value_return", "=", "False", ")", ":", "\n", "# q length default: 32  -> 20", "\n", "# d length defualt: 180 -> 510", "\n", "\n", "# 1) Prepend [Q] token to query, [D] token to document", "\n", "        ", "q_length", "=", "query_tok", ".", "shape", "[", "1", "]", "\n", "d_length", "=", "doc_tok", ".", "shape", "[", "1", "]", "\n", "num_batch_samples", "=", "doc_tok", ".", "shape", "[", "0", "]", "\n", "\n", "Q_tok", "=", "torch", ".", "full", "(", "\n", "size", "=", "(", "num_batch_samples", ",", "1", ")", ",", "fill_value", "=", "1", ",", "dtype", "=", "torch", ".", "long", "\n", ")", ".", "cuda", "(", ")", "# [unused0] = 1", "\n", "D_tok", "=", "torch", ".", "full", "(", "\n", "size", "=", "(", "num_batch_samples", ",", "1", ")", ",", "fill_value", "=", "2", ",", "dtype", "=", "torch", ".", "long", "\n", ")", ".", "cuda", "(", ")", "# [unused1] = 2", "\n", "one_tok", "=", "torch", ".", "full", "(", "size", "=", "(", "num_batch_samples", ",", "1", ")", ",", "fill_value", "=", "1", ")", ".", "cuda", "(", ")", "\n", "\n", "query_tok", "=", "torch", ".", "cat", "(", "[", "Q_tok", ",", "query_tok", "[", ":", ",", ":", "q_length", "-", "1", "]", "]", ",", "dim", "=", "1", ")", "\n", "doc_tok", "=", "torch", ".", "cat", "(", "[", "D_tok", ",", "doc_tok", "[", ":", ",", ":", "d_length", "-", "1", "]", "]", ",", "dim", "=", "1", ")", "\n", "query_mask", "=", "torch", ".", "cat", "(", "[", "one_tok", ",", "query_mask", "[", ":", ",", ":", "q_length", "-", "1", "]", "]", ",", "dim", "=", "1", ")", "\n", "doc_mask", "=", "torch", ".", "cat", "(", "[", "one_tok", ",", "doc_mask", "[", ":", ",", ":", "d_length", "-", "1", "]", "]", ",", "dim", "=", "1", ")", "\n", "\n", "# 2) Query augmentation with [MASK] tokens ([MASK] = 103)", "\n", "q_cls_reps", ",", "d_cls_reps", ",", "q_reps", ",", "query_mask", ",", "d_reps", ",", "doc_mask", "=", "self", ".", "encode_colbert", "(", "\n", "query_tok", ",", "query_mask", ",", "doc_tok", ",", "doc_mask", "\n", ")", "# reps includes rep of [CLS], [SEP]", "\n", "col_q_reps", "=", "self", ".", "clinear", "(", "q_reps", "[", "-", "1", "]", ")", "\n", "col_d_reps", "=", "self", ".", "clinear", "(", "d_reps", "[", "-", "1", "]", ")", "\n", "\n", "# 3) skip punctuations in doc tokens", "\n", "cut_doc_tok", "=", "torch", ".", "cat", "(", "[", "one_tok", ".", "long", "(", ")", ",", "doc_tok", "[", ":", ",", ":", "510", "]", ",", "one_tok", ".", "long", "(", ")", "]", ",", "dim", "=", "1", ")", "\n", "mask", "=", "torch", ".", "ones_like", "(", "doc_mask", ",", "dtype", "=", "torch", ".", "float", ")", ".", "cuda", "(", ")", "\n", "mask", "=", "torch", ".", "where", "(", "\n", "(", "(", "cut_doc_tok", ">=", "999", ")", "&", "(", "cut_doc_tok", "<=", "1013", ")", ")", "\n", "|", "(", "(", "cut_doc_tok", ">=", "1024", ")", "&", "(", "cut_doc_tok", "<=", "1036", ")", ")", "\n", "|", "(", "(", "cut_doc_tok", ">=", "1063", ")", "&", "(", "cut_doc_tok", "<=", "1066", ")", ")", "\n", "|", "(", "cut_doc_tok", "==", "-", "1", ")", ",", "\n", "torch", ".", "tensor", "(", "0.0", ")", ".", "cuda", "(", ")", ",", "\n", "doc_mask", ",", "\n", ")", "\n", "col_d_reps", "=", "col_d_reps", "*", "mask", ".", "unsqueeze", "(", "2", ")", "\n", "q_rep", "=", "F", ".", "normalize", "(", "col_q_reps", ",", "p", "=", "2", ",", "dim", "=", "2", ")", "\n", "d_rep", "=", "F", ".", "normalize", "(", "col_d_reps", ",", "p", "=", "2", ",", "dim", "=", "2", ")", "\n", "score", "=", "(", "q_rep", "@", "d_rep", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ")", ".", "max", "(", "2", ")", ".", "values", ".", "sum", "(", "1", ")", "\n", "#simmat = (q_rep @ d_rep.permute(0, 2, 1))", "\n", "#score = simmat.max(2).values.sum(1)", "\n", "simmat", "=", "torch", ".", "cat", "(", "[", "q_rep", ",", "d_rep", "]", ",", "dim", "=", "1", ")", "## for distillation", "\n", "score", "=", "score", ".", "unsqueeze", "(", "1", ")", "\n", "if", "(", "value_return", ")", ":", "\n", "            ", "return", "score", ",", "None", ",", "simmat", "\n", "", "else", ":", "\n", "            ", "return", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.ColBertRanker.forward_without_bert": [[442, 447], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "score.unsqueeze.unsqueeze.unsqueeze", "d_reps.permute"], "methods", ["None"], ["", "", "def", "forward_without_bert", "(", "self", ",", "cls_reps", ",", "q_reps", ",", "d_reps", ",", "query_tok", ",", "doc_tok", ")", ":", "\n", "        ", "score", "=", "(", "q_reps", "@", "d_reps", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ")", ".", "max", "(", "2", ")", ".", "values", ".", "sum", "(", "1", ")", "\n", "simmat", "=", "torch", ".", "cat", "(", "[", "q_reps", ",", "d_reps", "]", ",", "dim", "=", "1", ")", "## for distillation", "\n", "score", "=", "score", ".", "unsqueeze", "(", "1", ")", "\n", "return", "score", ",", "simmat", "\n", "\n"]], "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.ColBertVRanker.__init__": [[449, 456], ["modeling.BertRanker.__init__", "modeling.ColBertVRanker.tokenize", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling_util.KNRMRbfKernel.__init__", "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.MultiBertRanker.tokenize"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dim", "=", "128", "# default: dim=128", "\n", "self", ".", "skiplist", "=", "self", ".", "tokenize", "(", "string", ".", "punctuation", ")", "\n", "\n", "self", ".", "clinear", "=", "torch", ".", "nn", ".", "Linear", "(", "\n", "self", ".", "BERT_SIZE", ",", "self", ".", "dim", ",", "bias", "=", "False", "\n", ")", "# both for queries, documents", "\n"]], "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.ColBertVRanker.forward": [[458, 488], ["torch.full().cuda", "torch.full().cuda", "torch.full().cuda", "torch.full().cuda", "modeling.ColBertVRanker.encode_colbert", "modeling.ColBertVRanker.clinear", "modeling.ColBertVRanker.clinear", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.where", "torch.where", "torch.where", "torch.where", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "score.unsqueeze.unsqueeze.unsqueeze", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.where.unsqueeze", "torch.where.unsqueeze", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full().cuda.long", "torch.full().cuda.long", "torch.full().cuda.long", "torch.full().cuda.long", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.normalize.permute"], "methods", ["home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.TwoBertRanker.encode_colbert"], ["", "def", "forward", "(", "self", ",", "query_tok", ",", "query_mask", ",", "doc_tok", ",", "doc_mask", ")", ":", "\n", "# q length default: 32  -> 20 (+ CLS, Q, SEP)", "\n", "# d length default: 180 -> 487 (+ D, SEP)", "\n", "\n", "        ", "num_batch_samples", "=", "doc_tok", ".", "shape", "[", "0", "]", "\n", "one_tok", "=", "torch", ".", "full", "(", "size", "=", "(", "num_batch_samples", ",", "1", ")", ",", "fill_value", "=", "1", ")", ".", "cuda", "(", ")", "\n", "\n", "cls_reps", ",", "q_reps", ",", "query_mask", ",", "d_reps", ",", "doc_mask", "=", "self", ".", "encode_colbert", "(", "\n", "query_tok", ",", "query_mask", ",", "doc_tok", ",", "doc_mask", "\n", ")", "# reps includes rep of [CLS], [SEP]", "\n", "col_q_reps", "=", "self", ".", "clinear", "(", "q_reps", "[", "-", "1", "]", ")", "\n", "col_d_reps", "=", "self", ".", "clinear", "(", "d_reps", "[", "-", "1", "]", ")", "\n", "\n", "# 3) skip punctuations in doc tokens", "\n", "cut_doc_tok", "=", "torch", ".", "cat", "(", "[", "one_tok", ".", "long", "(", ")", ",", "doc_tok", "[", ":", ",", ":", "487", "]", ",", "one_tok", ".", "long", "(", ")", "]", ",", "dim", "=", "1", ")", "\n", "mask", "=", "torch", ".", "ones_like", "(", "doc_mask", ",", "dtype", "=", "torch", ".", "float", ")", ".", "cuda", "(", ")", "\n", "mask", "=", "torch", ".", "where", "(", "\n", "(", "(", "cut_doc_tok", ">=", "999", ")", "&", "(", "cut_doc_tok", "<=", "1013", ")", ")", "\n", "|", "(", "(", "cut_doc_tok", ">=", "1024", ")", "&", "(", "cut_doc_tok", "<=", "1036", ")", ")", "\n", "|", "(", "(", "cut_doc_tok", ">=", "1063", ")", "&", "(", "cut_doc_tok", "<=", "1066", ")", ")", "\n", "|", "(", "cut_doc_tok", "==", "-", "1", ")", ",", "\n", "torch", ".", "tensor", "(", "0.0", ")", ".", "cuda", "(", ")", ",", "\n", "doc_mask", ",", "\n", ")", "\n", "col_d_reps", "=", "col_d_reps", "*", "mask", ".", "unsqueeze", "(", "2", ")", "\n", "q_rep", "=", "F", ".", "normalize", "(", "col_q_reps", ",", "p", "=", "2", ",", "dim", "=", "2", ")", "\n", "d_rep", "=", "F", ".", "normalize", "(", "col_d_reps", ",", "p", "=", "2", ",", "dim", "=", "2", ")", "\n", "score", "=", "(", "q_rep", "@", "d_rep", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ")", ".", "max", "(", "2", ")", ".", "values", ".", "sum", "(", "1", ")", "\n", "score", "=", "score", ".", "unsqueeze", "(", "1", ")", "\n", "return", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.MultiBertRanker.__init__": [[490, 494], ["super().__init__", "transformers.BertTokenizer.from_pretrained"], "methods", ["home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling_util.KNRMRbfKernel.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "BERT_MODEL", "=", "'bert-base-uncased'", "\n", "self", ".", "tokenizer", "=", "BertTokenizer", ".", "from_pretrained", "(", "self", ".", "BERT_MODEL", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.MultiBertRanker.forward": [[495, 497], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "**", "inputs", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.MultiBertRanker.save": [[498, 503], ["modeling.MultiBertRanker.state_dict", "list", "torch.save", "torch.save", "torch.save", "torch.save"], "methods", ["home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.DistilBertRanker.save", "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.DistilBertRanker.save", "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.DistilBertRanker.save", "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.DistilBertRanker.save"], ["", "def", "save", "(", "self", ",", "path", ")", ":", "\n", "        ", "state", "=", "self", ".", "state_dict", "(", "keep_vars", "=", "True", ")", "\n", "for", "key", "in", "list", "(", "state", ")", ":", "\n", "            ", "state", "[", "key", "]", "=", "state", "[", "key", "]", ".", "data", "\n", "", "torch", ".", "save", "(", "state", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.MultiBertRanker.load": [[504, 507], ["modeling.MultiBertRanker.load_state_dict", "print", "torch.load", "torch.load", "torch.load", "torch.load"], "methods", ["home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.MultiBertRanker.load", "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.MultiBertRanker.load", "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.MultiBertRanker.load", "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.MultiBertRanker.load"], ["", "def", "load", "(", "self", ",", "path", ")", ":", "\n", "        ", "self", ".", "load_state_dict", "(", "torch", ".", "load", "(", "path", ")", ",", "strict", "=", "False", ")", "\n", "print", "(", "\"load model : \"", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.MultiBertRanker.load_cuda": [[508, 511], ["modeling.MultiBertRanker.load_state_dict", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.device", "torch.device", "torch.device", "torch.device"], "methods", ["home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.MultiBertRanker.load", "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.MultiBertRanker.load", "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.MultiBertRanker.load", "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.MultiBertRanker.load"], ["", "def", "load_cuda", "(", "self", ",", "path", ",", "device", ")", ":", "\n", "        ", "self", ".", "load_state_dict", "(", "torch", ".", "load", "(", "path", ",", "map_location", "=", "torch", ".", "device", "(", "device", ")", ")", ",", "strict", "=", "False", ")", "\n", "print", "(", "\"load model set device : \"", ",", "path", ",", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.MultiBertRanker.get_params": [[512, 517], ["modeling.MultiBertRanker.named_parameters"], "methods", ["None"], ["", "def", "get_params", "(", "self", ")", ":", "\n", "        ", "params", "=", "[", "(", "k", ",", "v", ")", "for", "k", ",", "v", "in", "self", ".", "named_parameters", "(", ")", "if", "v", ".", "requires_grad", "]", "\n", "non_bert_params", "=", "[", "v", "for", "k", ",", "v", "in", "params", "if", "'.bert.'", "not", "in", "k", "]", "\n", "bert_params", "=", "[", "v", "for", "k", ",", "v", "in", "params", "if", "'.bert.'", "in", "k", "]", "\n", "return", "non_bert_params", ",", "bert_params", "\n", "\n"]], "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.MultiBertRanker.tokenize": [[518, 523], ["modeling.MultiBertRanker.tokenizer.tokenize"], "methods", ["home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.MultiBertRanker.tokenize"], ["", "@", "memoize_method", "\n", "def", "tokenize", "(", "self", ",", "text", ")", ":", "\n", "        ", "toks", "=", "self", ".", "tokenizer", ".", "tokenize", "(", "text", ")", "\n", "toks", "=", "[", "self", ".", "tokenizer", ".", "vocab", "[", "t", "]", "for", "t", "in", "toks", "]", "\n", "return", "toks", "\n", "\n"]], "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.DuetBertRanker.__init__": [[525, 529], ["modeling.MultiBertRanker.__init__", "sub_1.to", "sub_2.to"], "methods", ["home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling_util.KNRMRbfKernel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "sub_1", ",", "sub_2", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bert_1", "=", "sub_1", ".", "to", "(", "'cuda:0'", ")", "\n", "self", ".", "bert_2", "=", "sub_2", ".", "to", "(", "'cuda:0'", ")", "\n", "#2-gpu case", "\n"]], "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.DuetBertRanker.forward": [[533, 547], ["modeling.DuetBertRanker.bert_1", "modeling.DuetBertRanker.bert_2", "modeling.DuetBertRanker.bert_1", "modeling.DuetBertRanker.bert_2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "query_tok", ",", "query_mask", ",", "doc_tok", ",", "doc_mask", ",", "value_return", "=", "False", ")", ":", "\n", "        ", "if", "(", "value_return", ")", ":", "\n", "            ", "score_1", ",", "cls_1", ",", "simmat_1", "=", "self", ".", "bert_1", "(", "query_tok", ",", "query_mask", ",", "doc_tok", ",", "doc_mask", ",", "value_return", "=", "True", ")", "\n", "score_2", ",", "cls_2", ",", "simmat_2", "=", "self", ".", "bert_2", "(", "query_tok", ",", "query_mask", ",", "doc_tok", ",", "doc_mask", ",", "value_return", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "score_1", "=", "self", ".", "bert_1", "(", "query_tok", ",", "query_mask", ",", "doc_tok", ",", "doc_mask", ")", "\n", "score_2", "=", "self", ".", "bert_2", "(", "query_tok", ",", "query_mask", ",", "doc_tok", ",", "doc_mask", ")", "\n", "\n", "", "score", "=", "score_1", "+", "score_2", "\n", "\n", "if", "(", "value_return", ")", ":", "\n", "            ", "return", "score", ",", "score_1", ",", "score_2", ",", "cls_1", ",", "simmat_1", ",", "cls_2", ",", "simmat_2", "\n", "", "else", ":", "\n", "            ", "return", "score", ",", "score_1", ",", "score_2", "\n", "\n"]], "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.DuetBertRanker.freeze_bert": [[548, 552], ["print", "modeling.DuetBertRanker.bert_1.freeze_bert", "modeling.DuetBertRanker.bert_2.freeze_bert"], "methods", ["home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.DistilBertRanker.freeze_bert", "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.DistilBertRanker.freeze_bert"], ["", "", "def", "freeze_bert", "(", "self", ")", ":", "\n", "        ", "print", "(", "\"freezing bert\"", ")", "\n", "self", ".", "bert_1", ".", "freeze_bert", "(", ")", "\n", "self", ".", "bert_2", ".", "freeze_bert", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.DuetBertRanker.load_duet": [[553, 557], ["print", "modeling.DuetBertRanker.bert_1.load", "modeling.DuetBertRanker.bert_2.load"], "methods", ["home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.MultiBertRanker.load", "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.MultiBertRanker.load"], ["", "def", "load_duet", "(", "self", ",", "path1", ",", "path2", ")", ":", "\n", "        ", "print", "(", "\"load duet model\"", ")", "\n", "self", ".", "bert_1", ".", "load", "(", "path1", ")", "\n", "self", ".", "bert_2", ".", "load", "(", "path2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.BaseBertRanker.__init__": [[559, 561], ["modeling.BertRanker.__init__"], "methods", ["home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling_util.KNRMRbfKernel.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.BaseBertRanker.forward": [[562, 565], ["modeling.BaseBertRanker.encode_bert"], "methods", ["home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.TwoBertRanker.encode_bert"], ["", "def", "forward", "(", "self", ",", "query_tok", ",", "query_mask", ",", "doc_tok", ",", "doc_mask", ")", ":", "\n", "        ", "cls_reps", ",", "q_reps", ",", "d_reps", "=", "self", ".", "encode_bert", "(", "query_tok", ",", "query_mask", ",", "doc_tok", ",", "doc_mask", ")", "\n", "return", "cls_reps", ",", "q_reps", ",", "d_reps", "\n", "\n"]], "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.CBaseBertRanker.__init__": [[567, 575], ["modeling.BertRanker.__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling_util.KNRMRbfKernel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "device", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "device", "=", "device", "\n", "#self.device = 'cuda:0'", "\n", "self", ".", "dim", "=", "128", "# default: dim=128", "\n", "\n", "self", ".", "clinear", "=", "torch", ".", "nn", ".", "Linear", "(", "\n", "self", ".", "BERT_SIZE", ",", "self", ".", "dim", ",", "bias", "=", "False", "\n", ")", "# both for queries, documents", "\n"]], "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.CBaseBertRanker.forward": [[577, 609], ["torch.full().cuda", "torch.full().cuda", "torch.full().cuda", "torch.full().cuda", "modeling.CBaseBertRanker.encode_colbert", "modeling.CBaseBertRanker.clinear", "modeling.CBaseBertRanker.clinear", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.where", "torch.where", "torch.where", "torch.where", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.where.unsqueeze", "torch.where.unsqueeze", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full().cuda.long", "torch.full().cuda.long", "torch.full().cuda.long", "torch.full().cuda.long", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.TwoBertRanker.encode_colbert"], ["", "def", "forward", "(", "self", ",", "query_tok", ",", "query_mask", ",", "doc_tok", ",", "doc_mask", ")", ":", "\n", "# q length default: 32  -> 20 (+ CLS, Q, SEP)", "\n", "# d length default: 180 -> 487 (+ D, SEP)", "\n", "\n", "        ", "num_batch_samples", "=", "doc_tok", ".", "shape", "[", "0", "]", "\n", "one_tok", "=", "torch", ".", "full", "(", "size", "=", "(", "num_batch_samples", ",", "1", ")", ",", "fill_value", "=", "1", ")", ".", "cuda", "(", "self", ".", "device", ")", "\n", "\n", "cls_reps", ",", "q_reps", ",", "query_mask", ",", "d_reps", ",", "doc_mask", "=", "self", ".", "encode_colbert", "(", "\n", "query_tok", ",", "query_mask", ",", "doc_tok", ",", "doc_mask", ",", "device", "=", "self", ".", "device", "\n", ")", "# reps includes rep of [CLS], [SEP]", "\n", "col_q_reps", "=", "self", ".", "clinear", "(", "q_reps", "[", "-", "1", "]", ")", "\n", "col_d_reps", "=", "self", ".", "clinear", "(", "d_reps", "[", "-", "1", "]", ")", "\n", "\n", "# 3) skip punctuations in doc tokens", "\n", "cut_doc_tok", "=", "torch", ".", "cat", "(", "[", "one_tok", ".", "long", "(", ")", ",", "doc_tok", "[", ":", ",", ":", "487", "]", ",", "one_tok", ".", "long", "(", ")", "]", ",", "dim", "=", "1", ")", "\n", "mask", "=", "torch", ".", "ones_like", "(", "doc_mask", ",", "dtype", "=", "torch", ".", "float", ")", ".", "cuda", "(", "self", ".", "device", ")", "\n", "mask", "=", "torch", ".", "where", "(", "\n", "(", "(", "cut_doc_tok", ">=", "999", ")", "&", "(", "cut_doc_tok", "<=", "1013", ")", ")", "\n", "|", "(", "(", "cut_doc_tok", ">=", "1024", ")", "&", "(", "cut_doc_tok", "<=", "1036", ")", ")", "\n", "|", "(", "(", "cut_doc_tok", ">=", "1063", ")", "&", "(", "cut_doc_tok", "<=", "1066", ")", ")", "\n", "|", "(", "cut_doc_tok", "==", "-", "1", ")", ",", "\n", "torch", ".", "tensor", "(", "0.0", ")", ".", "cuda", "(", "self", ".", "device", ")", ",", "\n", "doc_mask", ",", "\n", ")", "\n", "col_d_reps", "=", "col_d_reps", "*", "mask", ".", "unsqueeze", "(", "2", ")", "\n", "q_rep", "=", "F", ".", "normalize", "(", "col_q_reps", ",", "p", "=", "2", ",", "dim", "=", "2", ")", "\n", "d_rep", "=", "F", ".", "normalize", "(", "col_d_reps", ",", "p", "=", "2", ",", "dim", "=", "2", ")", "\n", "#score = (q_rep @ d_rep.permute(0, 2, 1)).max(2).values.sum(1)", "\n", "#score = score.unsqueeze(1)", "\n", "#return score", "\n", "\n", "return", "cls_reps", ",", "q_rep", ",", "d_rep", "\n", "\n"]], "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.LBaseBertRanker.__init__": [[611, 615], ["modeling.TwoBertRanker.__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling_util.KNRMRbfKernel.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "res", "=", "torch", ".", "nn", ".", "Linear", "(", "self", ".", "BERT_SIZE", ",", "self", ".", "BERT_SIZE", ")", "\n", "self", ".", "cls", "=", "torch", ".", "nn", ".", "Linear", "(", "self", ".", "BERT_SIZE", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.LBaseBertRanker.forward": [[616, 626], ["modeling.LBaseBertRanker.encode_bert", "torch.max", "torch.max", "torch.max", "torch.max", "modeling.LBaseBertRanker.res"], "methods", ["home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.TwoBertRanker.encode_bert"], ["", "def", "forward", "(", "self", ",", "query_tok", ",", "query_mask", ",", "doc_tok", ",", "doc_mask", ")", ":", "\n", "        ", "q_cls_reps", ",", "d_cls_reps", ",", "q_reps", ",", "d_reps", "=", "self", ".", "encode_bert", "(", "query_tok", ",", "query_mask", ",", "doc_tok", ",", "doc_mask", ")", "\n", "\n", "x1", "=", "q_cls_reps", "[", "-", "1", "]", "\n", "x2", "=", "d_cls_reps", "[", "-", "1", "]", "\n", "\n", "x", "=", "torch", ".", "max", "(", "x1", ",", "x2", ")", "\n", "cls_rep", "=", "self", ".", "res", "(", "x", ")", "+", "x", "\n", "\n", "return", "[", "cls_rep", "]", ",", "q_reps", ",", "d_reps", "\n", "\n"]], "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.CLBaseBertRanker.__init__": [[628, 640], ["modeling.TwoBertRanker.__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling_util.KNRMRbfKernel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "device", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "device", "=", "device", "\n", "#self.device = 'cuda:0'", "\n", "self", ".", "dim", "=", "128", "# default: dim=128", "\n", "\n", "self", ".", "clinear", "=", "torch", ".", "nn", ".", "Linear", "(", "\n", "self", ".", "BERT_SIZE", ",", "self", ".", "dim", ",", "bias", "=", "False", "\n", ")", "# both for queries, documents", "\n", "\n", "self", ".", "res", "=", "torch", ".", "nn", ".", "Linear", "(", "self", ".", "BERT_SIZE", ",", "self", ".", "BERT_SIZE", ")", "\n", "self", ".", "cls", "=", "torch", ".", "nn", ".", "Linear", "(", "self", ".", "BERT_SIZE", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.CLBaseBertRanker.forward": [[641, 692], ["torch.full().cuda", "torch.full().cuda", "torch.full().cuda", "torch.full().cuda", "torch.full().cuda", "torch.full().cuda", "torch.full().cuda", "torch.full().cuda", "torch.full().cuda", "torch.full().cuda", "torch.full().cuda", "torch.full().cuda", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "modeling.CLBaseBertRanker.encode_colbert", "modeling.CLBaseBertRanker.clinear", "modeling.CLBaseBertRanker.clinear", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.where", "torch.where", "torch.where", "torch.where", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.max", "torch.max", "torch.max", "torch.max", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.where.unsqueeze", "torch.where.unsqueeze", "modeling.CLBaseBertRanker.res", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full().cuda.long", "torch.full().cuda.long", "torch.full().cuda.long", "torch.full().cuda.long", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.TwoBertRanker.encode_colbert"], ["", "def", "forward", "(", "self", ",", "query_tok", ",", "query_mask", ",", "doc_tok", ",", "doc_mask", ")", ":", "\n", "# q length default: 32  -> 20", "\n", "# d length defualt: 180 -> 510", "\n", "\n", "# 1) Prepend [Q] token to query, [D] token to document", "\n", "        ", "q_length", "=", "query_tok", ".", "shape", "[", "1", "]", "\n", "d_length", "=", "doc_tok", ".", "shape", "[", "1", "]", "\n", "num_batch_samples", "=", "doc_tok", ".", "shape", "[", "0", "]", "\n", "\n", "Q_tok", "=", "torch", ".", "full", "(", "\n", "size", "=", "(", "num_batch_samples", ",", "1", ")", ",", "fill_value", "=", "1", ",", "dtype", "=", "torch", ".", "long", "\n", ")", ".", "cuda", "(", "self", ".", "device", ")", "# [unused0] = 1", "\n", "D_tok", "=", "torch", ".", "full", "(", "\n", "size", "=", "(", "num_batch_samples", ",", "1", ")", ",", "fill_value", "=", "2", ",", "dtype", "=", "torch", ".", "long", "\n", ")", ".", "cuda", "(", "self", ".", "device", ")", "# [unused1] = 2", "\n", "one_tok", "=", "torch", ".", "full", "(", "size", "=", "(", "num_batch_samples", ",", "1", ")", ",", "fill_value", "=", "1", ")", ".", "cuda", "(", "self", ".", "device", ")", "\n", "\n", "query_tok", "=", "torch", ".", "cat", "(", "[", "Q_tok", ",", "query_tok", "[", ":", ",", ":", "q_length", "-", "1", "]", "]", ",", "dim", "=", "1", ")", "\n", "doc_tok", "=", "torch", ".", "cat", "(", "[", "D_tok", ",", "doc_tok", "[", ":", ",", ":", "d_length", "-", "1", "]", "]", ",", "dim", "=", "1", ")", "\n", "query_mask", "=", "torch", ".", "cat", "(", "[", "one_tok", ",", "query_mask", "[", ":", ",", ":", "q_length", "-", "1", "]", "]", ",", "dim", "=", "1", ")", "\n", "doc_mask", "=", "torch", ".", "cat", "(", "[", "one_tok", ",", "doc_mask", "[", ":", ",", ":", "d_length", "-", "1", "]", "]", ",", "dim", "=", "1", ")", "\n", "\n", "# 2) Query augmentation with [MASK] tokens ([MASK] = 103)", "\n", "q_cls_reps", ",", "d_cls_reps", ",", "q_reps", ",", "query_mask", ",", "d_reps", ",", "doc_mask", "=", "self", ".", "encode_colbert", "(", "\n", "query_tok", ",", "query_mask", ",", "doc_tok", ",", "doc_mask", ",", "device", "=", "self", ".", "device", "\n", ")", "# reps includes rep of [CLS], [SEP]", "\n", "col_q_reps", "=", "self", ".", "clinear", "(", "q_reps", "[", "-", "1", "]", ")", "\n", "col_d_reps", "=", "self", ".", "clinear", "(", "d_reps", "[", "-", "1", "]", ")", "\n", "\n", "# 3) skip punctuations in doc tokens", "\n", "cut_doc_tok", "=", "torch", ".", "cat", "(", "[", "one_tok", ".", "long", "(", ")", ",", "doc_tok", "[", ":", ",", ":", "510", "]", ",", "one_tok", ".", "long", "(", ")", "]", ",", "dim", "=", "1", ")", "\n", "mask", "=", "torch", ".", "ones_like", "(", "doc_mask", ",", "dtype", "=", "torch", ".", "float", ")", ".", "cuda", "(", "self", ".", "device", ")", "\n", "mask", "=", "torch", ".", "where", "(", "\n", "(", "(", "cut_doc_tok", ">=", "999", ")", "&", "(", "cut_doc_tok", "<=", "1013", ")", ")", "\n", "|", "(", "(", "cut_doc_tok", ">=", "1024", ")", "&", "(", "cut_doc_tok", "<=", "1036", ")", ")", "\n", "|", "(", "(", "cut_doc_tok", ">=", "1063", ")", "&", "(", "cut_doc_tok", "<=", "1066", ")", ")", "\n", "|", "(", "cut_doc_tok", "==", "-", "1", ")", ",", "\n", "torch", ".", "tensor", "(", "0.0", ")", ".", "cuda", "(", "self", ".", "device", ")", ",", "\n", "doc_mask", ",", "\n", ")", "\n", "col_d_reps", "=", "col_d_reps", "*", "mask", ".", "unsqueeze", "(", "2", ")", "\n", "q_rep", "=", "F", ".", "normalize", "(", "col_q_reps", ",", "p", "=", "2", ",", "dim", "=", "2", ")", "\n", "d_rep", "=", "F", ".", "normalize", "(", "col_d_reps", ",", "p", "=", "2", ",", "dim", "=", "2", ")", "\n", "\n", "x1", "=", "q_cls_reps", "[", "-", "1", "]", "\n", "x2", "=", "d_cls_reps", "[", "-", "1", "]", "\n", "\n", "x", "=", "torch", ".", "max", "(", "x1", ",", "x2", ")", "\n", "cls_rep", "=", "self", ".", "res", "(", "x", ")", "+", "x", "\n", "\n", "return", "[", "cls_rep", "]", ",", "q_rep", ",", "d_rep", "\n", "\n"]], "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.DistilBertRanker.__init__": [[704, 727], ["modeling.MultiBertRanker.__init__", "modeling.DuetBertRanker", "CLBaseBertRanker().to", "LBaseBertRanker().to", "CBaseBertRanker().to", "BaseBertRanker().to", "CLBaseBertRanker().to", "LBaseBertRanker().to", "CBaseBertRanker().to", "BaseBertRanker().to", "modeling.CLBaseBertRanker", "modeling.LBaseBertRanker", "modeling.CBaseBertRanker", "modeling.BaseBertRanker", "modeling.CLBaseBertRanker", "modeling.LBaseBertRanker", "modeling.CBaseBertRanker", "modeling.BaseBertRanker"], "methods", ["home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling_util.KNRMRbfKernel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "sub_1", ",", "sub_2", ",", "trainable", "=", "False", ",", "late", "=", "True", ",", "colbert", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "trainable", "=", "trainable", "\n", "self", ".", "late", "=", "late", "\n", "if", "(", "self", ".", "trainable", ")", ":", "\n", "            ", "if", "(", "late", ")", ":", "\n", "                ", "if", "(", "colbert", ")", ":", "self", ".", "base_bert", "=", "CLBaseBertRanker", "(", "'cuda:1'", ")", ".", "to", "(", "'cuda:1'", ")", "## colbert settin", "\n", "else", ":", "self", ".", "base_bert", "=", "LBaseBertRanker", "(", ")", ".", "to", "(", "'cuda:1'", ")", "\n", "", "else", ":", "\n", "                ", "if", "(", "colbert", ")", ":", "self", ".", "base_bert", "=", "CBaseBertRanker", "(", "'cuda:1'", ")", ".", "to", "(", "'cuda:1'", ")", "## colbert setting", "\n", "else", ":", "self", ".", "base_bert", "=", "BaseBertRanker", "(", ")", ".", "to", "(", "'cuda:1'", ")", "\n", "", "self", ".", "bert_1", "=", "MODEL_MAP", "[", "sub_1", "]", "(", "without_bert", "=", "True", ")", ".", "to", "(", "'cuda:1'", ")", "\n", "self", ".", "bert_2", "=", "MODEL_MAP", "[", "sub_2", "]", "(", "without_bert", "=", "True", ")", ".", "to", "(", "'cuda:1'", ")", "\n", "self", ".", "duetbert", "=", "DuetBertRanker", "(", "MODEL_MAP", "[", "sub_1", "]", "(", ")", ",", "MODEL_MAP", "[", "sub_2", "]", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "if", "(", "late", ")", ":", "\n", "                ", "if", "(", "colbert", ")", ":", "self", ".", "base_bert", "=", "CLBaseBertRanker", "(", "'cuda:0'", ")", ".", "to", "(", "'cuda:0'", ")", "\n", "else", ":", "self", ".", "base_bert", "=", "LBaseBertRanker", "(", ")", ".", "to", "(", "'cuda:0'", ")", "\n", "", "else", ":", "\n", "                ", "if", "(", "colbert", ")", ":", "self", ".", "base_bert", "=", "CBaseBertRanker", "(", "'cuda:0'", ")", ".", "to", "(", "'cuda:0'", ")", "## colbert setting", "\n", "else", ":", "self", ".", "base_bert", "=", "BaseBertRanker", "(", ")", ".", "to", "(", "'cuda:0'", ")", "\n", "", "self", ".", "bert_1", "=", "MODEL_MAP", "[", "sub_1", "]", "(", "without_bert", "=", "True", ")", ".", "to", "(", "'cuda:0'", ")", "\n", "self", ".", "bert_2", "=", "MODEL_MAP", "[", "sub_2", "]", "(", "without_bert", "=", "True", ")", ".", "to", "(", "'cuda:0'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.DistilBertRanker.compute_loss": [[728, 733], ["torch.mse_loss", "torch.mse_loss", "torch.mse_loss", "torch.mse_loss", "cls[].to", "simmat.to"], "methods", ["None"], ["", "", "def", "compute_loss", "(", "self", ",", "cls", ",", "cls_d", ",", "simmat", ",", "simmat_d", ")", ":", "\n", "        ", "loss", "=", "0.", "\n", "if", "(", "cls_d", "is", "not", "None", ")", ":", "loss", "+=", "F", ".", "mse_loss", "(", "cls", "[", "-", "1", "]", ".", "to", "(", "'cuda:0'", ")", ",", "cls_d", "[", "-", "1", "]", ")", "\n", "if", "(", "simmat_d", "is", "not", "None", ")", ":", "loss", "+=", "F", ".", "mse_loss", "(", "simmat", ".", "to", "(", "'cuda:0'", ")", ",", "simmat_d", ")", "## .. Warn", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.DistilBertRanker.train_forward": [[734, 754], ["modeling.DistilBertRanker.base_bert", "modeling.DistilBertRanker.bert_1.forward_without_bert", "modeling.DistilBertRanker.bert_2.forward_without_bert", "modeling.DistilBertRanker.duetbert", "modeling.DistilBertRanker.compute_loss", "modeling.DistilBertRanker.compute_loss", "query_tok.to", "query_mask.to", "doc_tok.to", "doc_mask.to", "query_tok.to", "doc_tok.to", "query_tok.to", "doc_tok.to", "score_1.to", "score_2.to"], "methods", ["home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.ColBertRanker.forward_without_bert", "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.ColBertRanker.forward_without_bert", "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.DistilBertRanker.compute_loss", "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.DistilBertRanker.compute_loss"], ["", "def", "train_forward", "(", "self", ",", "query_tok", ",", "query_mask", ",", "doc_tok", ",", "doc_mask", ")", ":", "\n", "        ", "cls_reps", ",", "q_reps", ",", "d_reps", "=", "self", ".", "base_bert", "(", "query_tok", ".", "to", "(", "'cuda:1'", ")", ",", "query_mask", ".", "to", "(", "'cuda:1'", ")", ",", "doc_tok", ".", "to", "(", "'cuda:1'", ")", ",", "doc_mask", ".", "to", "(", "'cuda:1'", ")", ")", "\n", "\n", "score_1", ",", "simmat_1", "=", "self", ".", "bert_1", ".", "forward_without_bert", "(", "cls_reps", ",", "q_reps", ",", "d_reps", ",", "query_tok", ".", "to", "(", "'cuda:1'", ")", ",", "doc_tok", ".", "to", "(", "'cuda:1'", ")", ")", "\n", "score_2", ",", "simmat_2", "=", "self", ".", "bert_2", ".", "forward_without_bert", "(", "cls_reps", ",", "q_reps", ",", "d_reps", ",", "query_tok", ".", "to", "(", "'cuda:1'", ")", ",", "doc_tok", ".", "to", "(", "'cuda:1'", ")", ")", "\n", "\n", "simmat_f", "=", "None", "\n", "if", "(", "simmat_1", "is", "not", "None", ")", ":", "simmat_f", "=", "simmat_1", "\n", "if", "(", "simmat_2", "is", "not", "None", ")", ":", "simmat_f", "=", "simmat_2", "\n", "\n", "score_d", ",", "score_d1", ",", "score_d2", ",", "cls_d1", ",", "simmat_d1", ",", "cls_d2", ",", "simmat_d2", "=", "self", ".", "duetbert", "(", "query_tok", ",", "query_mask", ",", "doc_tok", ",", "doc_mask", ",", "value_return", "=", "True", ")", "\n", "\n", "## loss", "\n", "loss_1", "=", "self", ".", "compute_loss", "(", "cls_reps", ",", "cls_d1", ",", "simmat_f", ",", "simmat_d1", ")", "\n", "loss_2", "=", "self", ".", "compute_loss", "(", "cls_reps", ",", "cls_d2", ",", "simmat_f", ",", "simmat_d2", ")", "\n", "\n", "##", "\n", "score", "=", "score_1", ".", "to", "(", "'cuda:0'", ")", "+", "score_2", ".", "to", "(", "'cuda:0'", ")", "\n", "\n", "return", "score", ",", "loss_1", ",", "loss_2", "\n", "\n"]], "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.DistilBertRanker.forward": [[755, 770], ["modeling.DistilBertRanker.base_bert", "modeling.DistilBertRanker.bert_1.forward_without_bert", "modeling.DistilBertRanker.bert_2.forward_without_bert", "score.to", "modeling.DistilBertRanker.base_bert", "modeling.DistilBertRanker.bert_1.forward_without_bert", "modeling.DistilBertRanker.bert_2.forward_without_bert", "query_tok.to", "query_mask.to", "doc_tok.to", "doc_mask.to", "query_tok.to", "doc_tok.to", "query_tok.to", "doc_tok.to"], "methods", ["home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.ColBertRanker.forward_without_bert", "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.ColBertRanker.forward_without_bert", "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.ColBertRanker.forward_without_bert", "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.ColBertRanker.forward_without_bert"], ["", "def", "forward", "(", "self", ",", "query_tok", ",", "query_mask", ",", "doc_tok", ",", "doc_mask", ")", ":", "\n", "        ", "if", "(", "self", ".", "trainable", ")", ":", "\n", "            ", "cls_reps", ",", "q_reps", ",", "d_reps", "=", "self", ".", "base_bert", "(", "query_tok", ".", "to", "(", "'cuda:1'", ")", ",", "query_mask", ".", "to", "(", "'cuda:1'", ")", ",", "doc_tok", ".", "to", "(", "'cuda:1'", ")", ",", "doc_mask", ".", "to", "(", "'cuda:1'", ")", ")", "\n", "score_1", ",", "simmat_1", "=", "self", ".", "bert_1", ".", "forward_without_bert", "(", "cls_reps", ",", "q_reps", ",", "d_reps", ",", "query_tok", ".", "to", "(", "'cuda:1'", ")", ",", "doc_tok", ".", "to", "(", "'cuda:1'", ")", ")", "\n", "score_2", ",", "simmat_2", "=", "self", ".", "bert_2", ".", "forward_without_bert", "(", "cls_reps", ",", "q_reps", ",", "d_reps", ",", "query_tok", ".", "to", "(", "'cuda:1'", ")", ",", "doc_tok", ".", "to", "(", "'cuda:1'", ")", ")", "\n", "\n", "score", "=", "score_1", "+", "score_2", "\n", "return", "score", ".", "to", "(", "'cuda:0'", ")", "\n", "", "else", ":", "\n", "            ", "cls_reps", ",", "q_reps", ",", "d_reps", "=", "self", ".", "base_bert", "(", "query_tok", ",", "query_mask", ",", "doc_tok", ",", "doc_mask", ")", "\n", "score_1", ",", "simmat_1", "=", "self", ".", "bert_1", ".", "forward_without_bert", "(", "cls_reps", ",", "q_reps", ",", "d_reps", ",", "query_tok", ",", "doc_tok", ")", "\n", "score_2", ",", "simmat_2", "=", "self", ".", "bert_2", ".", "forward_without_bert", "(", "cls_reps", ",", "q_reps", ",", "d_reps", ",", "query_tok", ",", "doc_tok", ")", "\n", "\n", "score", "=", "score_1", "+", "score_2", "\n", "return", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.DistilBertRanker.save": [[771, 779], ["modeling.DistilBertRanker.state_dict", "list", "torch.save", "torch.save", "torch.save", "torch.save", "key.startswith"], "methods", ["home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.DistilBertRanker.save", "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.DistilBertRanker.save", "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.DistilBertRanker.save", "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.DistilBertRanker.save"], ["", "", "def", "save", "(", "self", ",", "path", ")", ":", "\n", "        ", "state", "=", "self", ".", "state_dict", "(", "keep_vars", "=", "True", ")", "\n", "for", "key", "in", "list", "(", "state", ")", ":", "\n", "            ", "if", "key", ".", "startswith", "(", "'duetbert'", ")", ":", "\n", "                ", "del", "state", "[", "key", "]", "\n", "", "else", ":", "\n", "                ", "state", "[", "key", "]", "=", "state", "[", "key", "]", ".", "data", "\n", "", "", "torch", ".", "save", "(", "state", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.DistilBertRanker.get_params": [[780, 785], ["modeling.DistilBertRanker.named_parameters"], "methods", ["None"], ["", "def", "get_params", "(", "self", ")", ":", "\n", "        ", "params", "=", "[", "(", "k", ",", "v", ")", "for", "k", ",", "v", "in", "self", ".", "named_parameters", "(", ")", "if", "v", ".", "requires_grad", "and", "'duetbert'", "not", "in", "k", "]", "\n", "non_bert_params", "=", "[", "v", "for", "k", ",", "v", "in", "params", "if", "'.bert.'", "not", "in", "k", "]", "\n", "bert_params", "=", "[", "v", "for", "k", ",", "v", "in", "params", "if", "'.bert.'", "in", "k", "]", "\n", "return", "non_bert_params", ",", "bert_params", "\n", "\n"]], "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.DistilBertRanker.load_duet": [[786, 788], ["modeling.DistilBertRanker.duetbert.load_duet"], "methods", ["home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.DistilBertRanker.load_duet"], ["", "def", "load_duet", "(", "self", ",", "path1", ",", "path2", ")", ":", "\n", "        ", "self", ".", "duetbert", ".", "load_duet", "(", "path1", ",", "path2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.DistilBertRanker.freeze_bert": [[789, 793], ["print", "modeling.DistilBertRanker.duetbert.freeze_bert", "modeling.DistilBertRanker.duetbert.eval"], "methods", ["home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.DistilBertRanker.freeze_bert"], ["", "def", "freeze_bert", "(", "self", ")", ":", "\n", "        ", "print", "(", "\"freeze duet bert & eval mode\"", ")", "\n", "self", ".", "duetbert", ".", "freeze_bert", "(", ")", "\n", "self", ".", "duetbert", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.train.setRandomSeed": [[13, 17], ["torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "random.seed"], "function", ["None"], ["def", "setRandomSeed", "(", "SEED", ")", ":", "\n", "    ", "torch", ".", "manual_seed", "(", "SEED", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "SEED", ")", "\n", "random", ".", "seed", "(", "SEED", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.train.main": [[18, 67], ["os.path.join", "model.get_params", "torch.optim.Adam", "torch.optim.Adam", "open", "print", "range", "print", "type", "model.freeze_bert", "print", "model_name.startswith", "train.validate", "print", "print", "open.flush", "train.distil_train_iteration", "print", "print", "train.train_iteration", "print", "print", "print", "print", "model.save", "os.path.join"], "function", ["home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.DistilBertRanker.get_params", "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.DistilBertRanker.freeze_bert", "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.train.validate", "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.train.distil_train_iteration", "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.train.train_iteration", "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.DistilBertRanker.save"], ["", "def", "main", "(", "model", ",", "dataset", ",", "train_pairs", ",", "qrels", ",", "valid_run", ",", "qrelf", ",", "model_out_dir", ",", "max_epoch", ",", "warmup_epoch", ",", "freeze_bert", ")", ":", "\n", "    ", "LR", "=", "0.001", "\n", "BERT_LR", "=", "2e-5", "\n", "MAX_EPOCH", "=", "max_epoch", "\n", "_verbose", "=", "False", "\n", "_logf", "=", "os", ".", "path", ".", "join", "(", "model_out_dir", ",", "'train.log'", ")", "\n", "\n", "## freeze_bert", "\n", "model_name", "=", "type", "(", "model", ")", ".", "__name__", "\n", "if", "(", "freeze_bert", "==", "1", ")", ":", "\n", "        ", "model", ".", "freeze_bert", "(", ")", "\n", "\n", "## parameter update setting", "\n", "", "nonbert_params", ",", "bert_params", "=", "model", ".", "get_params", "(", ")", "\n", "optim_nonbert_params", "=", "{", "'params'", ":", "nonbert_params", "}", "\n", "optim_bert_params", "=", "{", "'params'", ":", "bert_params", ",", "'lr'", ":", "BERT_LR", "}", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "[", "optim_nonbert_params", ",", "optim_bert_params", "]", ",", "lr", "=", "LR", ")", "\n", "\n", "## training & validation", "\n", "logf", "=", "open", "(", "_logf", ",", "\"w\"", ")", "\n", "print", "(", "f'max_epoch={max_epoch}'", ",", "file", "=", "logf", ")", "\n", "if", "(", "warmup_epoch", ">", "0", ")", ":", "\n", "        ", "print", "(", "f'warmup_epoch={warmup_epoch}'", ",", "file", "=", "logf", ")", "\n", "", "epoch", "=", "0", "\n", "top_valid_score", "=", "None", "\n", "for", "epoch", "in", "range", "(", "MAX_EPOCH", ")", ":", "\n", "        ", "warmup", "=", "\"\"", "\n", "if", "(", "epoch", "<", "warmup_epoch", ")", ":", "warmup", "=", "\"warmup\"", "\n", "if", "(", "model_name", ".", "startswith", "(", "'Distil'", ")", ")", ":", "\n", "            ", "loss", ",", "vloss", ",", "closs", "=", "distil_train_iteration", "(", "model", ",", "optimizer", ",", "dataset", ",", "train_pairs", ",", "qrels", ",", "warmup_epoch", ",", "epoch", ")", "\n", "print", "(", "f'train epoch={epoch} loss={loss} vloss={vloss} closs={closs} {warmup}'", ")", "\n", "print", "(", "f'train epoch={epoch} loss={loss} vloss={vloss} closs={closs} {warmup}'", ",", "file", "=", "logf", ")", "\n", "", "else", ":", "\n", "            ", "loss", "=", "train_iteration", "(", "model", ",", "optimizer", ",", "dataset", ",", "train_pairs", ",", "qrels", ")", "\n", "print", "(", "f'train epoch={epoch} loss={loss}'", ")", "\n", "print", "(", "f'train epoch={epoch} loss={loss}'", ",", "file", "=", "logf", ")", "\n", "\n", "", "valid_score", "=", "validate", "(", "model", ",", "dataset", ",", "valid_run", ",", "qrelf", ",", "epoch", ",", "model_out_dir", ")", "\n", "print", "(", "f'validation epoch={epoch} score={valid_score}'", ")", "\n", "print", "(", "f'validation epoch={epoch} score={valid_score}'", ",", "file", "=", "logf", ")", "\n", "if", "(", "epoch", ">=", "warmup_epoch", "and", "(", "top_valid_score", "is", "None", "or", "valid_score", ">", "top_valid_score", ")", ")", ":", "\n", "            ", "top_valid_score", "=", "valid_score", "\n", "print", "(", "'new top validation score, saving weights'", ")", "\n", "print", "(", "f'newtopsaving epoch={epoch} score={top_valid_score}'", ",", "file", "=", "logf", ")", "\n", "model", ".", "save", "(", "os", ".", "path", ".", "join", "(", "model_out_dir", ",", "'weights.p'", ")", ")", "\n", "\n", "", "logf", ".", "flush", "(", ")", "\n", "\n", "", "print", "(", "f'topsaving score={top_valid_score}'", ",", "file", "=", "logf", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.train.train_iteration": [[68, 95], ["model.train", "tqdm.tqdm", "data.iter_train_pairs", "model", "scores.reshape.reshape", "torch.mean", "torch.mean", "torch.mean.backward", "torch.mean.item", "pbar.update", "len", "optimizer.step", "optimizer.zero_grad", "scores.reshape.softmax"], "function", ["home.repos.pwc.inspect_result.maygodwithu_TRMD.src.data.iter_train_pairs"], ["", "def", "train_iteration", "(", "model", ",", "optimizer", ",", "dataset", ",", "train_pairs", ",", "qrels", ")", ":", "\n", "    ", "BATCH_SIZE", "=", "16", "\n", "BATCHES_PER_EPOCH", "=", "64", "\n", "GRAD_ACC_SIZE", "=", "2", "\n", "total", "=", "0", "\n", "model", ".", "train", "(", ")", "\n", "total_loss", "=", "0.", "\n", "cq_sum", "=", "0.", "\n", "cd_sum", "=", "0.", "\n", "with", "tqdm", "(", "'training'", ",", "total", "=", "BATCH_SIZE", "*", "BATCHES_PER_EPOCH", ",", "ncols", "=", "80", ",", "desc", "=", "'train'", ",", "leave", "=", "False", ")", "as", "pbar", ":", "\n", "        ", "for", "record", "in", "data", ".", "iter_train_pairs", "(", "model", ",", "dataset", ",", "train_pairs", ",", "qrels", ",", "GRAD_ACC_SIZE", ")", ":", "\n", "            ", "scores", "=", "model", "(", "record", "[", "'query_tok'", "]", ",", "\n", "record", "[", "'query_mask'", "]", ",", "\n", "record", "[", "'doc_tok'", "]", ",", "\n", "record", "[", "'doc_mask'", "]", ")", "\n", "count", "=", "len", "(", "record", "[", "'query_id'", "]", ")", "//", "2", "\n", "scores", "=", "scores", ".", "reshape", "(", "count", ",", "2", ")", "\n", "loss", "=", "torch", ".", "mean", "(", "1.", "-", "scores", ".", "softmax", "(", "dim", "=", "1", ")", "[", ":", ",", "0", "]", ")", "# pariwse softmax", "\n", "loss", ".", "backward", "(", ")", "\n", "total_loss", "+=", "loss", ".", "item", "(", ")", "\n", "total", "+=", "count", "\n", "if", "total", "%", "BATCH_SIZE", "==", "0", ":", "\n", "                ", "optimizer", ".", "step", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "", "pbar", ".", "update", "(", "count", ")", "\n", "if", "total", ">=", "BATCH_SIZE", "*", "BATCHES_PER_EPOCH", ":", "\n", "                ", "return", "total_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.train.distil_train_iteration": [[96, 137], ["model.train", "tqdm.tqdm", "data.iter_train_pairs", "model.train_forward", "scores.reshape.reshape", "torch.mean", "torch.mean", "loss.backward", "loss.item", "cls_loss.item", "isinstance", "pbar.update", "len", "simmat_loss.item", "optimizer.step", "optimizer.zero_grad", "scores.reshape.softmax"], "function", ["home.repos.pwc.inspect_result.maygodwithu_TRMD.src.data.iter_train_pairs", "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.DistilBertRanker.train_forward"], ["", "", "", "", "def", "distil_train_iteration", "(", "model", ",", "optimizer", ",", "dataset", ",", "train_pairs", ",", "qrels", ",", "warmup_epoch", ",", "epoch", ")", ":", "\n", "    ", "BATCH_SIZE", "=", "16", "\n", "BATCHES_PER_EPOCH", "=", "64", "\n", "GRAD_ACC_SIZE", "=", "2", "\n", "total", "=", "0", "\n", "model", ".", "train", "(", ")", "\n", "total_loss", "=", "0.", "\n", "total_vloss", "=", "0.", "\n", "total_closs", "=", "0.", "\n", "cq_sum", "=", "0.", "\n", "cd_sum", "=", "0.", "\n", "with", "tqdm", "(", "'training'", ",", "total", "=", "BATCH_SIZE", "*", "BATCHES_PER_EPOCH", ",", "ncols", "=", "80", ",", "desc", "=", "'train'", ",", "leave", "=", "False", ")", "as", "pbar", ":", "\n", "        ", "for", "record", "in", "data", ".", "iter_train_pairs", "(", "model", ",", "dataset", ",", "train_pairs", ",", "qrels", ",", "GRAD_ACC_SIZE", ")", ":", "\n", "            ", "scores", ",", "cls_loss", ",", "simmat_loss", "=", "model", ".", "train_forward", "(", "record", "[", "'query_tok'", "]", ",", "\n", "record", "[", "'query_mask'", "]", ",", "\n", "record", "[", "'doc_tok'", "]", ",", "\n", "record", "[", "'doc_mask'", "]", ")", "\n", "count", "=", "len", "(", "record", "[", "'query_id'", "]", ")", "//", "2", "\n", "scores", "=", "scores", ".", "reshape", "(", "count", ",", "2", ")", "\n", "#print(cls_loss)", "\n", "#print(simmat_loss)", "\n", "#print(scores)", "\n", "\n", "## ", "\n", "score_loss", "=", "torch", ".", "mean", "(", "1.", "-", "scores", ".", "softmax", "(", "dim", "=", "1", ")", "[", ":", ",", "0", "]", ")", "# pariwse softmax", "\n", "\n", "loss", "=", "score_loss", "+", "cls_loss", "+", "simmat_loss", "\n", "#loss = score_loss  ## without distillation", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "total_loss", "+=", "loss", ".", "item", "(", ")", "\n", "total_vloss", "+=", "cls_loss", ".", "item", "(", ")", "\n", "if", "(", "isinstance", "(", "simmat_loss", ",", "torch", ".", "Tensor", ")", ")", ":", "total_closs", "+=", "simmat_loss", ".", "item", "(", ")", "\n", "total", "+=", "count", "\n", "if", "total", "%", "BATCH_SIZE", "==", "0", ":", "\n", "                ", "optimizer", ".", "step", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "", "pbar", ".", "update", "(", "count", ")", "\n", "if", "total", ">=", "BATCH_SIZE", "*", "BATCHES_PER_EPOCH", ":", "\n", "                ", "return", "total_loss", ",", "total_vloss", ",", "total_closs", "\n", "\n"]], "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.train.validate": [[138, 143], ["os.path.join", "train.run_model", "train.trec_eval"], "function", ["home.repos.pwc.inspect_result.maygodwithu_TRMD.src.train.run_model", "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.train.trec_eval"], ["", "", "", "", "def", "validate", "(", "model", ",", "dataset", ",", "run", ",", "qrelf", ",", "epoch", ",", "model_out_dir", ")", ":", "\n", "    ", "VALIDATION_METRIC", "=", "'P.20'", "\n", "runf", "=", "os", ".", "path", ".", "join", "(", "model_out_dir", ",", "f'{epoch}.run'", ")", "\n", "run_model", "(", "model", ",", "dataset", ",", "run", ",", "runf", ")", "\n", "return", "trec_eval", "(", "qrelf", ",", "runf", ",", "VALIDATION_METRIC", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.train.run_model": [[145, 164], ["type", "torch.no_grad", "torch.no_grad", "tqdm.tqdm", "model.eval", "data.iter_valid_records", "open", "model", "zip", "pbar.update", "list", "enumerate", "sum", "score.item", "len", "sorted", "runfile.write", "rerank_run.setdefault", "rerank_run[].items", "len", "run.values"], "function", ["home.repos.pwc.inspect_result.maygodwithu_TRMD.src.data.iter_valid_records"], ["", "def", "run_model", "(", "model", ",", "dataset", ",", "run", ",", "runf", ",", "desc", "=", "'valid'", ")", ":", "\n", "    ", "BATCH_SIZE", "=", "16", "\n", "rerank_run", "=", "{", "}", "\n", "model_name", "=", "type", "(", "model", ")", ".", "__name__", "\n", "with", "torch", ".", "no_grad", "(", ")", ",", "tqdm", "(", "total", "=", "sum", "(", "len", "(", "r", ")", "for", "r", "in", "run", ".", "values", "(", ")", ")", ",", "ncols", "=", "80", ",", "desc", "=", "desc", ",", "leave", "=", "False", ")", "as", "pbar", ":", "\n", "        ", "model", ".", "eval", "(", ")", "\n", "for", "records", "in", "data", ".", "iter_valid_records", "(", "model", ",", "dataset", ",", "run", ",", "BATCH_SIZE", ")", ":", "\n", "            ", "scores", "=", "model", "(", "records", "[", "'query_tok'", "]", ",", "\n", "records", "[", "'query_mask'", "]", ",", "\n", "records", "[", "'doc_tok'", "]", ",", "\n", "records", "[", "'doc_mask'", "]", ")", "\n", "for", "qid", ",", "did", ",", "score", "in", "zip", "(", "records", "[", "'query_id'", "]", ",", "records", "[", "'doc_id'", "]", ",", "scores", ")", ":", "\n", "                ", "rerank_run", ".", "setdefault", "(", "qid", ",", "{", "}", ")", "[", "did", "]", "=", "score", ".", "item", "(", ")", "\n", "", "pbar", ".", "update", "(", "len", "(", "records", "[", "'query_id'", "]", ")", ")", "\n", "", "", "with", "open", "(", "runf", ",", "'wt'", ")", "as", "runfile", ":", "\n", "        ", "for", "qid", "in", "rerank_run", ":", "\n", "            ", "scores", "=", "list", "(", "sorted", "(", "rerank_run", "[", "qid", "]", ".", "items", "(", ")", ",", "key", "=", "lambda", "x", ":", "(", "x", "[", "1", "]", ",", "x", "[", "0", "]", ")", ",", "reverse", "=", "True", ")", ")", "\n", "for", "i", ",", "(", "did", ",", "score", ")", "in", "enumerate", "(", "scores", ")", ":", "\n", "                ", "runfile", ".", "write", "(", "f'{qid} 0 {did} {i+1} {score} run\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.train.trec_eval": [[165, 170], ["subprocess.check_output().decode().rstrip", "output.replace().split.replace().split", "float", "len", "subprocess.check_output().decode", "output.replace().split.replace", "output[].split", "subprocess.check_output"], "function", ["None"], ["", "", "", "", "def", "trec_eval", "(", "qrelf", ",", "runf", ",", "metric", ")", ":", "\n", "    ", "output", "=", "subprocess", ".", "check_output", "(", "[", "trec_eval_f", ",", "'-m'", ",", "metric", ",", "qrelf", ",", "runf", "]", ")", ".", "decode", "(", ")", ".", "rstrip", "(", ")", "\n", "output", "=", "output", ".", "replace", "(", "'\\t'", ",", "' '", ")", ".", "split", "(", "'\\n'", ")", "\n", "assert", "len", "(", "output", ")", "==", "1", "\n", "return", "float", "(", "output", "[", "0", "]", ".", "split", "(", ")", "[", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.train.main_cli": [[171, 221], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "train.setRandomSeed", "print", "data.read_datafiles", "data.read_qrels_dict", "data.read_pairs_dict", "data.read_run_dict", "os.makedirs", "train.main", "torch.cuda.device_count", "torch.cuda.device_count", "parser.parse_args.initial_bert_weights.split", "MODEL_MAP.keys", "MODEL_MAP.keys", "MODEL_MAP.keys", "MODEL_MAP.keys", "MODEL_MAP.keys", "argparse.FileType", "argparse.FileType", "argparse.FileType", "argparse.FileType", "len", "model.load", "len", "model.load_duet"], "function", ["home.repos.pwc.inspect_result.maygodwithu_TRMD.src.train.setRandomSeed", "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.data.read_datafiles", "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.data.read_qrels_dict", "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.data.read_pairs_dict", "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.data.read_run_dict", "home.repos.pwc.inspect_result.maygodwithu_TRMD.bin.ms_marco_eval.main", "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.MultiBertRanker.load", "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.DistilBertRanker.load_duet"], ["", "def", "main_cli", "(", ")", ":", "\n", "    ", "MODEL_MAP", "=", "modeling", ".", "MODEL_MAP", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "'TRMD model training and validation'", ")", "\n", "parser", ".", "add_argument", "(", "'--model'", ",", "choices", "=", "MODEL_MAP", ".", "keys", "(", ")", ",", "default", "=", "'vbert'", ")", "\n", "parser", ".", "add_argument", "(", "'--submodel1'", ",", "choices", "=", "MODEL_MAP", ".", "keys", "(", ")", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "'--submodel2'", ",", "choices", "=", "MODEL_MAP", ".", "keys", "(", ")", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "'--submodel3'", ",", "choices", "=", "MODEL_MAP", ".", "keys", "(", ")", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "'--submodel4'", ",", "choices", "=", "MODEL_MAP", ".", "keys", "(", ")", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "'--datafiles'", ",", "type", "=", "argparse", ".", "FileType", "(", "'rt'", ")", ",", "nargs", "=", "'+'", ")", "\n", "parser", ".", "add_argument", "(", "'--qrels'", ",", "type", "=", "argparse", ".", "FileType", "(", "'rt'", ")", ")", "\n", "parser", ".", "add_argument", "(", "'--train_pairs'", ",", "type", "=", "argparse", ".", "FileType", "(", "'rt'", ")", ")", "\n", "parser", ".", "add_argument", "(", "'--valid_run'", ",", "type", "=", "argparse", ".", "FileType", "(", "'rt'", ")", ")", "\n", "parser", ".", "add_argument", "(", "'--initial_bert_weights'", ",", "type", "=", "str", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "'--model_out_dir'", ")", "\n", "parser", ".", "add_argument", "(", "'--max_epoch'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'max epoch'", ")", "\n", "parser", ".", "add_argument", "(", "'--warmup_epoch'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'warmup epoch'", ")", "\n", "parser", ".", "add_argument", "(", "'--gpunum'", ",", "type", "=", "str", ",", "default", "=", "\"0\"", ",", "help", "=", "'gpu number'", ")", "\n", "parser", ".", "add_argument", "(", "'--random_seed'", ",", "type", "=", "int", ",", "default", "=", "42", ",", "help", "=", "'ranodm seed number'", ")", "\n", "parser", ".", "add_argument", "(", "'--freeze_bert'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'freezing bert'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "setRandomSeed", "(", "args", ".", "random_seed", ")", "\n", "\n", "os", ".", "environ", "[", "\"CUDA_DEVICE_ORDER\"", "]", "=", "\"PCI_BUS_ID\"", "\n", "os", ".", "environ", "[", "\"CUDA_VISIBLE_DEVICES\"", "]", "=", "args", ".", "gpunum", "\n", "\n", "print", "(", "\"GPU count=\"", ",", "torch", ".", "cuda", ".", "device_count", "(", ")", ")", "\n", "\n", "if", "(", "args", ".", "model", "==", "'distilbert'", ")", ":", "\n", "        ", "has_colbert", "=", "False", "\n", "if", "(", "\"colbert\"", "in", "args", ".", "submodel1", "or", "\"colbert\"", "in", "args", ".", "submodel2", ")", ":", "has_colbert", "=", "True", "\n", "model", "=", "MODEL_MAP", "[", "args", ".", "model", "]", "(", "args", ".", "submodel1", ",", "args", ".", "submodel2", ",", "trainable", "=", "True", ",", "late", "=", "True", ",", "colbert", "=", "has_colbert", ")", "\n", "", "else", ":", "\n", "        ", "model", "=", "MODEL_MAP", "[", "args", ".", "model", "]", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "", "dataset", "=", "data", ".", "read_datafiles", "(", "args", ".", "datafiles", ")", "\n", "qrels", "=", "data", ".", "read_qrels_dict", "(", "args", ".", "qrels", ")", "\n", "train_pairs", "=", "data", ".", "read_pairs_dict", "(", "args", ".", "train_pairs", ")", "\n", "valid_run", "=", "data", ".", "read_run_dict", "(", "args", ".", "valid_run", ")", "\n", "\n", "## initial", "\n", "if", "(", "args", ".", "initial_bert_weights", "is", "not", "None", ")", ":", "\n", "        ", "wts", "=", "args", ".", "initial_bert_weights", ".", "split", "(", "','", ")", "\n", "if", "(", "len", "(", "wts", ")", "==", "1", ")", ":", "\n", "            ", "model", ".", "load", "(", "wts", "[", "0", "]", ")", "\n", "", "elif", "(", "len", "(", "wts", ")", "==", "2", ")", ":", "\n", "            ", "model", ".", "load_duet", "(", "wts", "[", "0", "]", ",", "wts", "[", "1", "]", ")", "\n", "\n", "", "", "os", ".", "makedirs", "(", "args", ".", "model_out_dir", ",", "exist_ok", "=", "True", ")", "\n", "main", "(", "model", ",", "dataset", ",", "train_pairs", ",", "qrels", ",", "valid_run", ",", "args", ".", "qrels", ".", "name", ",", "args", ".", "model_out_dir", ",", "args", ".", "max_epoch", ",", "args", ".", "warmup_epoch", ",", "args", ".", "freeze_bert", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.data.read_datafiles": [[6, 26], ["tqdm.tqdm", "line.rstrip().split", "len", "tqdm.tqdm.write", "line.rstrip", "line.rstrip"], "function", ["None"], ["def", "read_datafiles", "(", "files", ")", ":", "\n", "    ", "queries", "=", "{", "}", "\n", "docs", "=", "{", "}", "\n", "#    print(\"!!WARNING : query doubled augmented\")", "\n", "for", "file", "in", "files", ":", "\n", "        ", "for", "line", "in", "tqdm", "(", "file", ",", "desc", "=", "'loading datafile (by line)'", ",", "leave", "=", "False", ")", ":", "\n", "            ", "cols", "=", "line", ".", "rstrip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "if", "len", "(", "cols", ")", "!=", "3", ":", "\n", "                ", "tqdm", ".", "write", "(", "f'skipping line: `{line.rstrip()}`'", ")", "\n", "continue", "\n", "", "c_type", ",", "c_id", ",", "c_text", "=", "cols", "\n", "assert", "c_type", "in", "(", "'query'", ",", "'doc'", ")", "\n", "if", "c_type", "==", "'query'", ":", "\n", "                ", "queries", "[", "c_id", "]", "=", "c_text", "\n", "#queries[c_id] = c_text + ' ' + c_text ", "\n", "#queries[c_id] = c_text + ' [SEP] ' + c_text", "\n", "#queries[c_id] = c_text + ' ' + c_text + ' ' + c_text", "\n", "", "if", "c_type", "==", "'doc'", ":", "\n", "                ", "docs", "[", "c_id", "]", "=", "c_text", "\n", "", "", "", "return", "queries", ",", "docs", "\n", "\n"]], "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.data.read_qrels_dict": [[28, 34], ["tqdm.tqdm", "line.split", "int", "result.setdefault"], "function", ["None"], ["", "def", "read_qrels_dict", "(", "file", ")", ":", "\n", "    ", "result", "=", "{", "}", "\n", "for", "line", "in", "tqdm", "(", "file", ",", "desc", "=", "'loading qrels (by line)'", ",", "leave", "=", "False", ")", ":", "\n", "        ", "qid", ",", "_", ",", "docid", ",", "score", "=", "line", ".", "split", "(", ")", "\n", "result", ".", "setdefault", "(", "qid", ",", "{", "}", ")", "[", "docid", "]", "=", "int", "(", "score", ")", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.data.read_run_dict": [[36, 42], ["tqdm.tqdm", "line.split", "float", "result.setdefault"], "function", ["None"], ["", "def", "read_run_dict", "(", "file", ")", ":", "\n", "    ", "result", "=", "{", "}", "\n", "for", "line", "in", "tqdm", "(", "file", ",", "desc", "=", "'loading run (by line)'", ",", "leave", "=", "False", ")", ":", "\n", "        ", "qid", ",", "_", ",", "docid", ",", "rank", ",", "score", ",", "_", "=", "line", ".", "split", "(", ")", "\n", "result", ".", "setdefault", "(", "qid", ",", "{", "}", ")", "[", "docid", "]", "=", "float", "(", "score", ")", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.data.read_pairs_dict": [[44, 50], ["tqdm.tqdm", "line.split", "result.setdefault"], "function", ["None"], ["", "def", "read_pairs_dict", "(", "file", ")", ":", "\n", "    ", "result", "=", "{", "}", "\n", "for", "line", "in", "tqdm", "(", "file", ",", "desc", "=", "'loading pairs (by line)'", ",", "leave", "=", "False", ")", ":", "\n", "        ", "qid", ",", "docid", "=", "line", ".", "split", "(", ")", "\n", "result", ".", "setdefault", "(", "qid", ",", "{", "}", ")", "[", "docid", "]", "=", "1", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.data.iter_train_pairs": [[52, 62], ["data._iter_train_pairs", "batch[].append", "batch[].append", "batch[].append", "batch[].append", "len", "data._pack_n_ship"], "function", ["home.repos.pwc.inspect_result.maygodwithu_TRMD.src.data._iter_train_pairs", "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.data._pack_n_ship"], ["", "def", "iter_train_pairs", "(", "model", ",", "dataset", ",", "train_pairs", ",", "qrels", ",", "batch_size", ")", ":", "\n", "    ", "batch", "=", "{", "'query_id'", ":", "[", "]", ",", "'doc_id'", ":", "[", "]", ",", "'query_tok'", ":", "[", "]", ",", "'doc_tok'", ":", "[", "]", "}", "\n", "for", "qid", ",", "did", ",", "query_tok", ",", "doc_tok", "in", "_iter_train_pairs", "(", "model", ",", "dataset", ",", "train_pairs", ",", "qrels", ")", ":", "\n", "        ", "batch", "[", "'query_id'", "]", ".", "append", "(", "qid", ")", "\n", "batch", "[", "'doc_id'", "]", ".", "append", "(", "did", ")", "\n", "batch", "[", "'query_tok'", "]", ".", "append", "(", "query_tok", ")", "\n", "batch", "[", "'doc_tok'", "]", ".", "append", "(", "doc_tok", ")", "\n", "if", "len", "(", "batch", "[", "'query_id'", "]", ")", "//", "2", "==", "batch_size", ":", "\n", "            ", "yield", "_pack_n_ship", "(", "batch", ")", "\n", "batch", "=", "{", "'query_id'", ":", "[", "]", ",", "'doc_id'", ":", "[", "]", ",", "'query_tok'", ":", "[", "]", ",", "'doc_tok'", ":", "[", "]", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.data._iter_train_pairs": [[65, 92], ["list", "random.shuffle", "train_pairs.keys", "random.choice", "set", "set", "random.choice", "model.tokenize", "ds_docs.get", "ds_docs.get", "len", "len", "tqdm.tqdm.write", "tqdm.tqdm.write", "model.tokenize", "model.tokenize", "qrels.get().get", "qrels.get"], "function", ["home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.MultiBertRanker.tokenize", "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.MultiBertRanker.tokenize", "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.MultiBertRanker.tokenize"], ["", "", "", "def", "_iter_train_pairs", "(", "model", ",", "dataset", ",", "train_pairs", ",", "qrels", ")", ":", "\n", "    ", "ds_queries", ",", "ds_docs", "=", "dataset", "\n", "while", "True", ":", "\n", "        ", "qids", "=", "list", "(", "train_pairs", ".", "keys", "(", ")", ")", "\n", "random", ".", "shuffle", "(", "qids", ")", "\n", "for", "qid", "in", "qids", ":", "\n", "            ", "pos_ids", "=", "[", "did", "for", "did", "in", "train_pairs", "[", "qid", "]", "if", "qrels", ".", "get", "(", "qid", ",", "{", "}", ")", ".", "get", "(", "did", ",", "0", ")", ">", "0", "]", "\n", "if", "len", "(", "pos_ids", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "", "pos_id", "=", "random", ".", "choice", "(", "pos_ids", ")", "\n", "pos_ids_lookup", "=", "set", "(", "pos_ids", ")", "\n", "pos_ids", "=", "set", "(", "pos_ids", ")", "\n", "neg_ids", "=", "[", "did", "for", "did", "in", "train_pairs", "[", "qid", "]", "if", "did", "not", "in", "pos_ids_lookup", "]", "\n", "if", "len", "(", "neg_ids", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "", "neg_id", "=", "random", ".", "choice", "(", "neg_ids", ")", "\n", "query_tok", "=", "model", ".", "tokenize", "(", "ds_queries", "[", "qid", "]", ")", "\n", "pos_doc", "=", "ds_docs", ".", "get", "(", "pos_id", ")", "\n", "neg_doc", "=", "ds_docs", ".", "get", "(", "neg_id", ")", "\n", "if", "pos_doc", "is", "None", ":", "\n", "                ", "tqdm", ".", "write", "(", "f'missing doc {pos_id}! Skipping'", ")", "\n", "continue", "\n", "", "if", "neg_doc", "is", "None", ":", "\n", "                ", "tqdm", ".", "write", "(", "f'missing doc {neg_id}! Skipping'", ")", "\n", "continue", "\n", "", "yield", "qid", ",", "pos_id", ",", "query_tok", ",", "model", ".", "tokenize", "(", "pos_doc", ")", "\n", "yield", "qid", ",", "neg_id", ",", "query_tok", ",", "model", ".", "tokenize", "(", "neg_doc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.data.iter_valid_records": [[94, 107], ["data._iter_valid_records", "batch[].append", "batch[].append", "batch[].append", "batch[].append", "len", "len", "data._pack_n_ship", "data._pack_n_ship"], "function", ["home.repos.pwc.inspect_result.maygodwithu_TRMD.src.data._iter_valid_records", "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.data._pack_n_ship", "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.data._pack_n_ship"], ["", "", "", "def", "iter_valid_records", "(", "model", ",", "dataset", ",", "run", ",", "batch_size", ")", ":", "\n", "    ", "batch", "=", "{", "'query_id'", ":", "[", "]", ",", "'doc_id'", ":", "[", "]", ",", "'query_tok'", ":", "[", "]", ",", "'doc_tok'", ":", "[", "]", "}", "\n", "for", "qid", ",", "did", ",", "query_tok", ",", "doc_tok", "in", "_iter_valid_records", "(", "model", ",", "dataset", ",", "run", ")", ":", "\n", "        ", "batch", "[", "'query_id'", "]", ".", "append", "(", "qid", ")", "\n", "batch", "[", "'doc_id'", "]", ".", "append", "(", "did", ")", "\n", "batch", "[", "'query_tok'", "]", ".", "append", "(", "query_tok", ")", "\n", "batch", "[", "'doc_tok'", "]", ".", "append", "(", "doc_tok", ")", "\n", "if", "len", "(", "batch", "[", "'query_id'", "]", ")", "==", "batch_size", ":", "\n", "            ", "yield", "_pack_n_ship", "(", "batch", ")", "\n", "batch", "=", "{", "'query_id'", ":", "[", "]", ",", "'doc_id'", ":", "[", "]", ",", "'query_tok'", ":", "[", "]", ",", "'doc_tok'", ":", "[", "]", "}", "\n", "# final batch", "\n", "", "", "if", "len", "(", "batch", "[", "'query_id'", "]", ")", ">", "0", ":", "\n", "        ", "yield", "_pack_n_ship", "(", "batch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.data._iter_valid_records": [[109, 120], ["model.tokenize", "ds_docs.get", "model.tokenize", "tqdm.tqdm.write"], "function", ["home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.MultiBertRanker.tokenize", "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling.MultiBertRanker.tokenize"], ["", "", "def", "_iter_valid_records", "(", "model", ",", "dataset", ",", "run", ")", ":", "\n", "    ", "ds_queries", ",", "ds_docs", "=", "dataset", "\n", "for", "qid", "in", "run", ":", "\n", "        ", "query_tok", "=", "model", ".", "tokenize", "(", "ds_queries", "[", "qid", "]", ")", "\n", "for", "did", "in", "run", "[", "qid", "]", ":", "\n", "            ", "doc", "=", "ds_docs", ".", "get", "(", "did", ")", "\n", "if", "doc", "is", "None", ":", "\n", "                ", "tqdm", ".", "write", "(", "f'missing doc {did}! Skipping'", ")", "\n", "continue", "\n", "", "doc_tok", "=", "model", ".", "tokenize", "(", "doc", ")", "\n", "yield", "qid", ",", "did", ",", "query_tok", ",", "doc_tok", "\n", "\n"]], "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.data._pack_n_ship": [[122, 135], ["min", "max", "data._pad_crop", "data._pad_crop", "data._mask", "data._mask", "len"], "function", ["home.repos.pwc.inspect_result.maygodwithu_TRMD.src.data._pad_crop", "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.data._pad_crop", "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.data._mask", "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.data._mask"], ["", "", "", "def", "_pack_n_ship", "(", "batch", ")", ":", "\n", "    ", "QLEN", "=", "20", "\n", "MAX_DLEN", "=", "800", "\n", "#QLEN = 20", "\n", "#MAX_DLEN = 600", "\n", "DLEN", "=", "min", "(", "MAX_DLEN", ",", "max", "(", "len", "(", "b", ")", "for", "b", "in", "batch", "[", "'doc_tok'", "]", ")", ")", "\n", "return", "{", "\n", "'query_id'", ":", "batch", "[", "'query_id'", "]", ",", "\n", "'doc_id'", ":", "batch", "[", "'doc_id'", "]", ",", "\n", "'query_tok'", ":", "_pad_crop", "(", "batch", "[", "'query_tok'", "]", ",", "QLEN", ")", ",", "\n", "'doc_tok'", ":", "_pad_crop", "(", "batch", "[", "'doc_tok'", "]", ",", "DLEN", ")", ",", "\n", "'query_mask'", ":", "_mask", "(", "batch", "[", "'query_tok'", "]", ",", "QLEN", ")", ",", "\n", "'doc_mask'", ":", "_mask", "(", "batch", "[", "'doc_tok'", "]", ",", "DLEN", ")", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.data._pad_crop": [[138, 147], ["torch.tensor().long().cuda", "result.append", "len", "len", "torch.tensor().long", "torch.tensor", "len"], "function", ["None"], ["", "def", "_pad_crop", "(", "items", ",", "l", ")", ":", "\n", "    ", "result", "=", "[", "]", "\n", "for", "item", "in", "items", ":", "\n", "        ", "if", "len", "(", "item", ")", "<", "l", ":", "\n", "            ", "item", "=", "item", "+", "[", "-", "1", "]", "*", "(", "l", "-", "len", "(", "item", ")", ")", "\n", "", "if", "len", "(", "item", ")", ">", "l", ":", "\n", "            ", "item", "=", "item", "[", ":", "l", "]", "\n", "", "result", ".", "append", "(", "item", ")", "\n", "", "return", "torch", ".", "tensor", "(", "result", ")", ".", "long", "(", ")", ".", "cuda", "(", "'cuda:0'", ")", "\n", "#return torch.tensor(result).long().cuda()", "\n"]], "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.data._mask": [[151, 162], ["torch.tensor().float().to", "result.append", "len", "len", "torch.tensor().float", "torch.tensor", "len"], "function", ["None"], ["", "def", "_mask", "(", "items", ",", "l", ")", ":", "\n", "    ", "result", "=", "[", "]", "\n", "for", "item", "in", "items", ":", "\n", "# needs padding (masked)", "\n", "        ", "if", "len", "(", "item", ")", "<", "l", ":", "\n", "            ", "mask", "=", "[", "1.", "for", "_", "in", "item", "]", "+", "(", "[", "0.", "]", "*", "(", "l", "-", "len", "(", "item", ")", ")", ")", "\n", "# no padding (possible crop)", "\n", "", "if", "len", "(", "item", ")", ">=", "l", ":", "\n", "            ", "mask", "=", "[", "1.", "for", "_", "in", "item", "[", ":", "l", "]", "]", "\n", "", "result", ".", "append", "(", "mask", ")", "\n", "", "return", "torch", ".", "tensor", "(", "result", ")", ".", "float", "(", ")", ".", "to", "(", "'cuda:0'", ")", "\n", "#return torch.tensor(result).float().cuda()", "\n"]], "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling_util.PACRRConvMax2dModule.__init__": [[37, 49], ["super().__init__", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.ConstantPad2d"], "methods", ["home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling_util.KNRMRbfKernel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "shape", ",", "n_filters", ",", "k", ",", "channels", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "shape", "=", "shape", "\n", "if", "shape", "!=", "1", ":", "\n", "            ", "self", ".", "pad", "=", "torch", ".", "nn", ".", "ConstantPad2d", "(", "(", "0", ",", "shape", "-", "1", ",", "0", ",", "shape", "-", "1", ")", ",", "0", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "pad", "=", "None", "\n", "", "self", ".", "conv", "=", "torch", ".", "nn", ".", "Conv2d", "(", "channels", ",", "n_filters", ",", "shape", ")", "\n", "self", ".", "activation", "=", "torch", ".", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "k", "=", "k", "\n", "self", ".", "shape", "=", "shape", "\n", "self", ".", "channels", "=", "channels", "\n", "\n"]], "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling_util.PACRRConvMax2dModule.forward": [[50, 59], ["modeling_util.PACRRConvMax2dModule.activation", "modeling_util.PACRRConvMax2dModule.max", "top_filters.topk", "top_toks.reshape", "modeling_util.PACRRConvMax2dModule.pad", "modeling_util.PACRRConvMax2dModule.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "simmat", ")", ":", "\n", "        ", "BATCH", ",", "CHANNELS", ",", "QLEN", ",", "DLEN", "=", "simmat", ".", "shape", "\n", "if", "self", ".", "pad", ":", "\n", "            ", "simmat", "=", "self", ".", "pad", "(", "simmat", ")", "\n", "", "conv", "=", "self", ".", "activation", "(", "self", ".", "conv", "(", "simmat", ")", ")", "\n", "top_filters", ",", "_", "=", "conv", ".", "max", "(", "dim", "=", "1", ")", "\n", "top_toks", ",", "_", "=", "top_filters", ".", "topk", "(", "self", ".", "k", ",", "dim", "=", "2", ")", "\n", "result", "=", "top_toks", ".", "reshape", "(", "BATCH", ",", "QLEN", ",", "self", ".", "k", ")", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling_util.SimmatModule.__init__": [[63, 68], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling_util.KNRMRbfKernel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "padding", "=", "-", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "padding", "=", "padding", "\n", "self", ".", "_hamming_index_loaded", "=", "None", "\n", "self", ".", "_hamming_index", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling_util.SimmatModule.forward": [[69, 88], ["zip", "torch.stack", "b_emb.permute", "a_emb.bmm", "torch.zeros_like", "torch.where", "torch.where", "simmat.append", "a_emb.norm().reshape().expand", "b_emb.norm().reshape().expand", "query_tok.reshape().expand", "doc_tok.reshape().expand", "a_emb.norm().reshape", "b_emb.norm().reshape", "query_tok.reshape", "doc_tok.reshape", "a_emb.norm", "b_emb.norm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "query_embed", ",", "doc_embed", ",", "query_tok", ",", "doc_tok", ")", ":", "\n", "        ", "simmat", "=", "[", "]", "\n", "\n", "for", "a_emb", ",", "b_emb", "in", "zip", "(", "query_embed", ",", "doc_embed", ")", ":", "\n", "            ", "BAT", ",", "A", ",", "B", "=", "a_emb", ".", "shape", "[", "0", "]", ",", "a_emb", ".", "shape", "[", "1", "]", ",", "b_emb", ".", "shape", "[", "1", "]", "\n", "# embeddings -- cosine similarity matrix", "\n", "a_denom", "=", "a_emb", ".", "norm", "(", "p", "=", "2", ",", "dim", "=", "2", ")", ".", "reshape", "(", "BAT", ",", "A", ",", "1", ")", ".", "expand", "(", "BAT", ",", "A", ",", "B", ")", "+", "1e-9", "# avoid 0div", "\n", "b_denom", "=", "b_emb", ".", "norm", "(", "p", "=", "2", ",", "dim", "=", "2", ")", ".", "reshape", "(", "BAT", ",", "1", ",", "B", ")", ".", "expand", "(", "BAT", ",", "A", ",", "B", ")", "+", "1e-9", "# avoid 0div", "\n", "perm", "=", "b_emb", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "sim", "=", "a_emb", ".", "bmm", "(", "perm", ")", "\n", "sim", "=", "sim", "/", "(", "a_denom", "*", "b_denom", ")", "\n", "\n", "# nullify padding (indicated by -1 by default)", "\n", "nul", "=", "torch", ".", "zeros_like", "(", "sim", ")", "\n", "sim", "=", "torch", ".", "where", "(", "query_tok", ".", "reshape", "(", "BAT", ",", "A", ",", "1", ")", ".", "expand", "(", "BAT", ",", "A", ",", "B", ")", "==", "self", ".", "padding", ",", "nul", ",", "sim", ")", "\n", "sim", "=", "torch", ".", "where", "(", "doc_tok", ".", "reshape", "(", "BAT", ",", "1", ",", "B", ")", ".", "expand", "(", "BAT", ",", "A", ",", "B", ")", "==", "self", ".", "padding", ",", "nul", ",", "sim", ")", "\n", "\n", "simmat", ".", "append", "(", "sim", ")", "\n", "", "return", "torch", ".", "stack", "(", "simmat", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling_util.DRMMLogCountHistogram.__init__": [[91, 94], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling_util.KNRMRbfKernel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "bins", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bins", "=", "bins", "\n", "\n"]], "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling_util.DRMMLogCountHistogram.forward": [[95, 118], ["zip", "torch.stack", "histogram.to.to.to", "bins.cpu", "weights.cpu", "torch.stack", "histogram.to.to.append", "torch.stack.append", "torch.stack", "histogram.to.to.float", "torch.bincount", "zip"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "simmat", ",", "dtoks", ",", "qtoks", ")", ":", "\n", "# THIS IS SLOW ... Any way to make this faster? Maybe it's not worth doing on GPU?", "\n", "        ", "BATCH", ",", "CHANNELS", ",", "QLEN", ",", "DLEN", "=", "simmat", ".", "shape", "\n", "# +1e-5 to nudge scores of 1 to above threshold", "\n", "bins", "=", "(", "(", "simmat", "+", "1.000001", ")", "/", "2.", "*", "(", "self", ".", "bins", "-", "1", ")", ")", ".", "int", "(", ")", "\n", "# set weights of 0 for padding (in both query and doc dims)", "\n", "weights", "=", "(", "(", "dtoks", "!=", "-", "1", ")", ".", "reshape", "(", "BATCH", ",", "1", ",", "DLEN", ")", ".", "expand", "(", "BATCH", ",", "QLEN", ",", "DLEN", ")", "*", "(", "qtoks", "!=", "-", "1", ")", ".", "reshape", "(", "BATCH", ",", "QLEN", ",", "1", ")", ".", "expand", "(", "BATCH", ",", "QLEN", ",", "DLEN", ")", ")", ".", "float", "(", ")", "\n", "\n", "# no way to batch this... loses gradients here. https://discuss.pytorch.org/t/histogram-function-in-pytorch/5350", "\n", "bins", ",", "weights", "=", "bins", ".", "cpu", "(", ")", ",", "weights", ".", "cpu", "(", ")", "\n", "histogram", "=", "[", "]", "\n", "for", "superbins", ",", "w", "in", "zip", "(", "bins", ",", "weights", ")", ":", "\n", "            ", "result", "=", "[", "]", "\n", "for", "b", "in", "superbins", ":", "\n", "                ", "result", ".", "append", "(", "torch", ".", "stack", "(", "[", "torch", ".", "bincount", "(", "q", ",", "x", ",", "self", ".", "bins", ")", "for", "q", ",", "x", "in", "zip", "(", "b", ",", "w", ")", "]", ",", "dim", "=", "0", ")", ")", "\n", "", "result", "=", "torch", ".", "stack", "(", "result", ",", "dim", "=", "0", ")", "\n", "histogram", ".", "append", "(", "result", ")", "\n", "", "histogram", "=", "torch", ".", "stack", "(", "histogram", ",", "dim", "=", "0", ")", "\n", "\n", "# back to GPU", "\n", "histogram", "=", "histogram", ".", "to", "(", "simmat", ".", "device", ")", "\n", "return", "(", "histogram", ".", "float", "(", ")", "+", "1e-5", ")", ".", "log", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling_util.KNRMRbfKernelBank.__init__": [[121, 126], ["super().__init__", "torch.nn.ModuleList", "modeling_util.KNRMRbfKernel", "zip"], "methods", ["home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling_util.KNRMRbfKernel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "mus", "=", "None", ",", "sigmas", "=", "None", ",", "dim", "=", "1", ",", "requires_grad", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dim", "=", "dim", "\n", "kernels", "=", "[", "KNRMRbfKernel", "(", "m", ",", "s", ",", "requires_grad", "=", "requires_grad", ")", "for", "m", ",", "s", "in", "zip", "(", "mus", ",", "sigmas", ")", "]", "\n", "self", ".", "kernels", "=", "torch", ".", "nn", ".", "ModuleList", "(", "kernels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling_util.KNRMRbfKernelBank.count": [[127, 129], ["len"], "methods", ["None"], ["", "def", "count", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "kernels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling_util.KNRMRbfKernelBank.forward": [[130, 132], ["torch.stack", "k"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "data", ")", ":", "\n", "        ", "return", "torch", ".", "stack", "(", "[", "k", "(", "data", ")", "for", "k", "in", "self", ".", "kernels", "]", ",", "dim", "=", "self", ".", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling_util.KNRMRbfKernel.__init__": [[135, 139], ["super().__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling_util.KNRMRbfKernel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "initial_mu", ",", "initial_sigma", ",", "requires_grad", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "mu", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "tensor", "(", "initial_mu", ")", ",", "requires_grad", "=", "requires_grad", ")", "\n", "self", ".", "sigma", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "tensor", "(", "initial_sigma", ")", ",", "requires_grad", "=", "requires_grad", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling_util.KNRMRbfKernel.forward": [[140, 143], ["torch.exp"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "data", ")", ":", "\n", "        ", "adj", "=", "data", "-", "self", ".", "mu", "\n", "return", "torch", ".", "exp", "(", "-", "0.5", "*", "adj", "*", "adj", "/", "self", ".", "sigma", "/", "self", ".", "sigma", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling_util.subbatch": [[5, 19], ["math.ceil", "math.ceil", "range", "stack.append", "torch.cat", "torch.zeros_like", "torch.cat"], "function", ["None"], ["def", "subbatch", "(", "toks", ",", "maxlen", ")", ":", "\n", "    ", "_", ",", "DLEN", "=", "toks", ".", "shape", "[", ":", "2", "]", "\n", "SUBBATCH", "=", "math", ".", "ceil", "(", "DLEN", "/", "maxlen", ")", "\n", "S", "=", "math", ".", "ceil", "(", "DLEN", "/", "SUBBATCH", ")", "if", "SUBBATCH", ">", "0", "else", "0", "# minimize the size given the number of subbatch", "\n", "stack", "=", "[", "]", "\n", "if", "SUBBATCH", "==", "1", ":", "\n", "        ", "return", "toks", ",", "SUBBATCH", "\n", "", "else", ":", "\n", "        ", "for", "s", "in", "range", "(", "SUBBATCH", ")", ":", "\n", "            ", "stack", ".", "append", "(", "toks", "[", ":", ",", "s", "*", "S", ":", "(", "s", "+", "1", ")", "*", "S", "]", ")", "\n", "if", "stack", "[", "-", "1", "]", ".", "shape", "[", "1", "]", "!=", "S", ":", "\n", "                ", "nulls", "=", "torch", ".", "zeros_like", "(", "toks", "[", ":", ",", ":", "S", "-", "stack", "[", "-", "1", "]", ".", "shape", "[", "1", "]", "]", ")", "\n", "stack", "[", "-", "1", "]", "=", "torch", ".", "cat", "(", "[", "stack", "[", "-", "1", "]", ",", "nulls", "]", ",", "dim", "=", "1", ")", "\n", "", "", "return", "torch", ".", "cat", "(", "stack", ",", "dim", "=", "0", ")", ",", "SUBBATCH", "\n", "\n"]], "home.repos.pwc.inspect_result.maygodwithu_TRMD.src.modeling_util.un_subbatch": [[21, 33], ["math.ceil", "range", "torch.cat", "embed_stack.append"], "function", ["None"], ["", "", "def", "un_subbatch", "(", "embed", ",", "toks", ",", "maxlen", ")", ":", "\n", "    ", "BATCH", ",", "DLEN", "=", "toks", ".", "shape", "[", ":", "2", "]", "\n", "SUBBATCH", "=", "math", ".", "ceil", "(", "DLEN", "/", "maxlen", ")", "\n", "if", "SUBBATCH", "==", "1", ":", "\n", "        ", "return", "embed", "\n", "", "else", ":", "\n", "        ", "embed_stack", "=", "[", "]", "\n", "for", "b", "in", "range", "(", "SUBBATCH", ")", ":", "\n", "            ", "embed_stack", ".", "append", "(", "embed", "[", "b", "*", "BATCH", ":", "(", "b", "+", "1", ")", "*", "BATCH", "]", ")", "\n", "", "embed", "=", "torch", ".", "cat", "(", "embed_stack", ",", "dim", "=", "1", ")", "\n", "embed", "=", "embed", "[", ":", ",", ":", "DLEN", "]", "\n", "return", "embed", "\n", "\n"]], "home.repos.pwc.inspect_result.maygodwithu_TRMD.bin.ms_marco_eval.load_reference_from_stream": [[17, 37], ["l.strip().split.strip().split", "int", "qids_to_relevant_passageids[].append", "IOError", "l.strip().split.strip"], "function", ["None"], ["def", "load_reference_from_stream", "(", "f", ")", ":", "\n", "    ", "\"\"\"Load Reference reference relevant passages\n    Args:f (stream): stream to load.\n    Returns:qids_to_relevant_passageids (dict): dictionary mapping from query_id (int) to relevant passages (list of ints). \n    \"\"\"", "\n", "qids_to_relevant_passageids", "=", "{", "}", "\n", "for", "l", "in", "f", ":", "\n", "        ", "try", ":", "\n", "#l = l.strip().split('\\t')", "\n", "            ", "l", "=", "l", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "\n", "qid", "=", "int", "(", "l", "[", "0", "]", ")", "\n", "if", "qid", "in", "qids_to_relevant_passageids", ":", "\n", "                ", "pass", "\n", "", "else", ":", "\n", "                ", "qids_to_relevant_passageids", "[", "qid", "]", "=", "[", "]", "\n", "#qids_to_relevant_passageids[qid].append(int(l[2]))", "\n", "", "qids_to_relevant_passageids", "[", "qid", "]", ".", "append", "(", "l", "[", "2", "]", ")", "\n", "", "except", ":", "\n", "            ", "raise", "IOError", "(", "'\\\"%s\\\" is not valid format'", "%", "l", ")", "\n", "", "", "return", "qids_to_relevant_passageids", "\n", "\n"]], "home.repos.pwc.inspect_result.maygodwithu_TRMD.bin.ms_marco_eval.load_reference": [[38, 46], ["open", "ms_marco_eval.load_reference_from_stream"], "function", ["home.repos.pwc.inspect_result.maygodwithu_TRMD.bin.ms_marco_eval.load_reference_from_stream"], ["", "def", "load_reference", "(", "path_to_reference", ")", ":", "\n", "    ", "\"\"\"Load Reference reference relevant passages\n    Args:path_to_reference (str): path to a file to load.\n    Returns:qids_to_relevant_passageids (dict): dictionary mapping from query_id (int) to relevant passages (list of ints). \n    \"\"\"", "\n", "with", "open", "(", "path_to_reference", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "qids_to_relevant_passageids", "=", "load_reference_from_stream", "(", "f", ")", "\n", "", "return", "qids_to_relevant_passageids", "\n", "\n"]], "home.repos.pwc.inspect_result.maygodwithu_TRMD.bin.ms_marco_eval.load_candidate_from_stream": [[47, 70], ["l.strip().split.strip().split", "int", "int", "IOError", "l.strip().split.strip"], "function", ["None"], ["", "def", "load_candidate_from_stream", "(", "f", ")", ":", "\n", "    ", "\"\"\"Load candidate data from a stream.\n    Args:f (stream): stream to load.\n    Returns:qid_to_ranked_candidate_passages (dict): dictionary mapping from query_id (int) to a list of 1000 passage ids(int) ranked by relevance and importance\n    \"\"\"", "\n", "qid_to_ranked_candidate_passages", "=", "{", "}", "\n", "for", "l", "in", "f", ":", "\n", "        ", "try", ":", "\n", "#l = l.strip().split('\\t')", "\n", "            ", "l", "=", "l", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "\n", "qid", "=", "int", "(", "l", "[", "0", "]", ")", "\n", "pid", "=", "l", "[", "2", "]", "\n", "rank", "=", "int", "(", "l", "[", "3", "]", ")", "\n", "if", "qid", "in", "qid_to_ranked_candidate_passages", ":", "\n", "                ", "pass", "\n", "", "else", ":", "\n", "# By default, all PIDs in the list of 1000 are 0. Only override those that are given", "\n", "                ", "tmp", "=", "[", "0", "]", "*", "1000", "\n", "qid_to_ranked_candidate_passages", "[", "qid", "]", "=", "tmp", "\n", "", "qid_to_ranked_candidate_passages", "[", "qid", "]", "[", "rank", "-", "1", "]", "=", "pid", "\n", "", "except", ":", "\n", "            ", "raise", "IOError", "(", "'\\\"%s\\\" is not valid format'", "%", "l", ")", "\n", "", "", "return", "qid_to_ranked_candidate_passages", "\n", "\n"]], "home.repos.pwc.inspect_result.maygodwithu_TRMD.bin.ms_marco_eval.load_candidate": [[71, 80], ["open", "ms_marco_eval.load_candidate_from_stream"], "function", ["home.repos.pwc.inspect_result.maygodwithu_TRMD.bin.ms_marco_eval.load_candidate_from_stream"], ["", "def", "load_candidate", "(", "path_to_candidate", ")", ":", "\n", "    ", "\"\"\"Load candidate data from a file.\n    Args:path_to_candidate (str): path to file to load.\n    Returns:qid_to_ranked_candidate_passages (dict): dictionary mapping from query_id (int) to a list of 1000 passage ids(int) ranked by relevance and importance\n    \"\"\"", "\n", "\n", "with", "open", "(", "path_to_candidate", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "qid_to_ranked_candidate_passages", "=", "load_candidate_from_stream", "(", "f", ")", "\n", "", "return", "qid_to_ranked_candidate_passages", "\n", "\n"]], "home.repos.pwc.inspect_result.maygodwithu_TRMD.bin.ms_marco_eval.quality_checks_qids": [[81, 109], ["set", "set", "qids_to_ranked_candidate_passages.keys", "qids_to_relevant_passageids.keys", "set", "len", "collections.Counter().items", "set", "list", "collections.Counter"], "function", ["None"], ["", "def", "quality_checks_qids", "(", "qids_to_relevant_passageids", ",", "qids_to_ranked_candidate_passages", ")", ":", "\n", "    ", "\"\"\"Perform quality checks on the dictionaries\n\n    Args:\n    p_qids_to_relevant_passageids (dict): dictionary of query-passage mapping\n        Dict as read in with load_reference or load_reference_from_stream\n    p_qids_to_ranked_candidate_passages (dict): dictionary of query-passage candidates\n    Returns:\n        bool,str: Boolean whether allowed, message to be shown in case of a problem\n    \"\"\"", "\n", "message", "=", "''", "\n", "allowed", "=", "True", "\n", "\n", "# Create sets of the QIDs for the submitted and reference queries", "\n", "candidate_set", "=", "set", "(", "qids_to_ranked_candidate_passages", ".", "keys", "(", ")", ")", "\n", "ref_set", "=", "set", "(", "qids_to_relevant_passageids", ".", "keys", "(", ")", ")", "\n", "\n", "# Check that we do not have multiple passages per query", "\n", "for", "qid", "in", "qids_to_ranked_candidate_passages", ":", "\n", "# Remove all zeros from the candidates", "\n", "        ", "duplicate_pids", "=", "set", "(", "[", "item", "for", "item", ",", "count", "in", "Counter", "(", "qids_to_ranked_candidate_passages", "[", "qid", "]", ")", ".", "items", "(", ")", "if", "count", ">", "1", "]", ")", "\n", "\n", "if", "len", "(", "duplicate_pids", "-", "set", "(", "[", "0", "]", ")", ")", ">", "0", ":", "\n", "            ", "message", "=", "\"Cannot rank a passage multiple times for a single query. QID={qid}, PID={pid}\"", ".", "format", "(", "\n", "qid", "=", "qid", ",", "pid", "=", "list", "(", "duplicate_pids", ")", "[", "0", "]", ")", "\n", "allowed", "=", "False", "\n", "\n", "", "", "return", "allowed", ",", "message", "\n", "\n"]], "home.repos.pwc.inspect_result.maygodwithu_TRMD.bin.ms_marco_eval.compute_metrics": [[110, 141], ["len", "len", "IOError", "len", "ranking.append", "range", "ranking.pop", "ranking.append"], "function", ["None"], ["", "def", "compute_metrics", "(", "qids_to_relevant_passageids", ",", "qids_to_ranked_candidate_passages", ")", ":", "\n", "    ", "\"\"\"Compute MRR metric\n    Args:    \n    p_qids_to_relevant_passageids (dict): dictionary of query-passage mapping\n        Dict as read in with load_reference or load_reference_from_stream\n    p_qids_to_ranked_candidate_passages (dict): dictionary of query-passage candidates\n    Returns:\n        dict: dictionary of metrics {'MRR': <MRR Score>}\n    \"\"\"", "\n", "all_scores", "=", "{", "}", "\n", "MRR", "=", "0", "\n", "qids_with_relevant_passages", "=", "0", "\n", "ranking", "=", "[", "]", "\n", "for", "qid", "in", "qids_to_ranked_candidate_passages", ":", "\n", "        ", "if", "qid", "in", "qids_to_relevant_passageids", ":", "\n", "            ", "ranking", ".", "append", "(", "0", ")", "\n", "target_pid", "=", "qids_to_relevant_passageids", "[", "qid", "]", "\n", "candidate_pid", "=", "qids_to_ranked_candidate_passages", "[", "qid", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "MaxMRRRank", ")", ":", "\n", "                ", "if", "candidate_pid", "[", "i", "]", "in", "target_pid", ":", "\n", "                    ", "MRR", "+=", "1", "/", "(", "i", "+", "1", ")", "\n", "ranking", ".", "pop", "(", ")", "\n", "ranking", ".", "append", "(", "i", "+", "1", ")", "\n", "break", "\n", "", "", "", "", "if", "len", "(", "ranking", ")", "==", "0", ":", "\n", "        ", "raise", "IOError", "(", "\"No matching QIDs found. Are you sure you are scoring the evaluation set?\"", ")", "\n", "\n", "", "MRR", "=", "MRR", "/", "len", "(", "qids_to_relevant_passageids", ")", "\n", "all_scores", "[", "'MRR @10'", "]", "=", "MRR", "\n", "all_scores", "[", "'QueriesRanked'", "]", "=", "len", "(", "qids_to_ranked_candidate_passages", ")", "\n", "return", "all_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.maygodwithu_TRMD.bin.ms_marco_eval.compute_metrics_from_files": [[142, 166], ["ms_marco_eval.load_reference", "ms_marco_eval.load_candidate", "ms_marco_eval.compute_metrics", "ms_marco_eval.quality_checks_qids", "print"], "function", ["home.repos.pwc.inspect_result.maygodwithu_TRMD.bin.ms_marco_eval.load_reference", "home.repos.pwc.inspect_result.maygodwithu_TRMD.bin.ms_marco_eval.load_candidate", "home.repos.pwc.inspect_result.maygodwithu_TRMD.bin.ms_marco_eval.compute_metrics", "home.repos.pwc.inspect_result.maygodwithu_TRMD.bin.ms_marco_eval.quality_checks_qids"], ["", "def", "compute_metrics_from_files", "(", "path_to_reference", ",", "path_to_candidate", ",", "perform_checks", "=", "True", ")", ":", "\n", "    ", "\"\"\"Compute MRR metric\n    Args:    \n    p_path_to_reference_file (str): path to reference file.\n        Reference file should contain lines in the following format:\n            QUERYID\\tPASSAGEID\n            Where PASSAGEID is a relevant passage for a query. Note QUERYID can repeat on different lines with different PASSAGEIDs\n    p_path_to_candidate_file (str): path to candidate file.\n        Candidate file sould contain lines in the following format:\n            QUERYID\\tPASSAGEID1\\tRank\n            If a user wishes to use the TREC format please run the script with a -t flag at the end. If this flag is used the expected format is \n            QUERYID\\tITER\\tDOCNO\\tRANK\\tSIM\\tRUNID \n            Where the values are separated by tabs and ranked in order of relevance \n    Returns:\n        dict: dictionary of metrics {'MRR': <MRR Score>}\n    \"\"\"", "\n", "\n", "qids_to_relevant_passageids", "=", "load_reference", "(", "path_to_reference", ")", "\n", "qids_to_ranked_candidate_passages", "=", "load_candidate", "(", "path_to_candidate", ")", "\n", "if", "perform_checks", ":", "\n", "        ", "allowed", ",", "message", "=", "quality_checks_qids", "(", "qids_to_relevant_passageids", ",", "qids_to_ranked_candidate_passages", ")", "\n", "if", "message", "!=", "''", ":", "print", "(", "message", ")", "\n", "\n", "", "return", "compute_metrics", "(", "qids_to_relevant_passageids", ",", "qids_to_ranked_candidate_passages", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maygodwithu_TRMD.bin.ms_marco_eval.main": [[167, 178], ["ms_marco_eval.compute_metrics_from_files", "print", "sorted", "print", "print"], "function", ["home.repos.pwc.inspect_result.maygodwithu_TRMD.bin.ms_marco_eval.compute_metrics_from_files"], ["", "def", "main", "(", ")", ":", "\n", "    ", "\"\"\"Command line:\n    python msmarco_eval_ranking.py <path to reference> <path_to_candidate_file>\n    \"\"\"", "\n", "path_to_candidate", "=", "sys", ".", "argv", "[", "2", "]", "\n", "path_to_reference", "=", "sys", ".", "argv", "[", "1", "]", "\n", "metrics", "=", "compute_metrics_from_files", "(", "path_to_reference", ",", "path_to_candidate", ")", "\n", "print", "(", "'#####################'", ")", "\n", "for", "metric", "in", "sorted", "(", "metrics", ")", ":", "\n", "        ", "print", "(", "'{}: {}'", ".", "format", "(", "metric", ",", "metrics", "[", "metric", "]", ")", ")", "\n", "", "print", "(", "'#####################'", ")", "\n", "", "if", "__name__", "==", "'__main__'", ":", "\n"]]}