{"home.repos.pwc.inspect_result.rtqichen_torchdiffeq.examples.latent_ode.LatentODEfunc.__init__": [[110, 117], ["torch.Module.__init__", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.misc._PerturbFunc.__init__"], ["    ", "def", "__init__", "(", "self", ",", "latent_dim", "=", "4", ",", "nhidden", "=", "20", ")", ":", "\n", "        ", "super", "(", "LatentODEfunc", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "elu", "=", "nn", ".", "ELU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "latent_dim", ",", "nhidden", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "nhidden", ",", "nhidden", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "nhidden", ",", "latent_dim", ")", "\n", "self", ".", "nfe", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.examples.latent_ode.LatentODEfunc.forward": [[118, 126], ["latent_ode.LatentODEfunc.fc1", "latent_ode.LatentODEfunc.elu", "latent_ode.LatentODEfunc.fc2", "latent_ode.LatentODEfunc.elu", "latent_ode.LatentODEfunc.fc3"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "t", ",", "x", ")", ":", "\n", "        ", "self", ".", "nfe", "+=", "1", "\n", "out", "=", "self", ".", "fc1", "(", "x", ")", "\n", "out", "=", "self", ".", "elu", "(", "out", ")", "\n", "out", "=", "self", ".", "fc2", "(", "out", ")", "\n", "out", "=", "self", ".", "elu", "(", "out", ")", "\n", "out", "=", "self", ".", "fc3", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.examples.latent_ode.RecognitionRNN.__init__": [[130, 136], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.misc._PerturbFunc.__init__"], ["    ", "def", "__init__", "(", "self", ",", "latent_dim", "=", "4", ",", "obs_dim", "=", "2", ",", "nhidden", "=", "25", ",", "nbatch", "=", "1", ")", ":", "\n", "        ", "super", "(", "RecognitionRNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "nhidden", "=", "nhidden", "\n", "self", ".", "nbatch", "=", "nbatch", "\n", "self", ".", "i2h", "=", "nn", ".", "Linear", "(", "obs_dim", "+", "nhidden", ",", "nhidden", ")", "\n", "self", ".", "h2o", "=", "nn", ".", "Linear", "(", "nhidden", ",", "latent_dim", "*", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.examples.latent_ode.RecognitionRNN.forward": [[137, 142], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "latent_ode.RecognitionRNN.h2o", "latent_ode.RecognitionRNN.i2h"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "h", ")", ":", "\n", "        ", "combined", "=", "torch", ".", "cat", "(", "(", "x", ",", "h", ")", ",", "dim", "=", "1", ")", "\n", "h", "=", "torch", ".", "tanh", "(", "self", ".", "i2h", "(", "combined", ")", ")", "\n", "out", "=", "self", ".", "h2o", "(", "h", ")", "\n", "return", "out", ",", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.examples.latent_ode.RecognitionRNN.initHidden": [[143, 145], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["", "def", "initHidden", "(", "self", ")", ":", "\n", "        ", "return", "torch", ".", "zeros", "(", "self", ".", "nbatch", ",", "self", ".", "nhidden", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.examples.latent_ode.Decoder.__init__": [[149, 154], ["torch.Module.__init__", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.misc._PerturbFunc.__init__"], ["    ", "def", "__init__", "(", "self", ",", "latent_dim", "=", "4", ",", "obs_dim", "=", "2", ",", "nhidden", "=", "20", ")", ":", "\n", "        ", "super", "(", "Decoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "latent_dim", ",", "nhidden", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "nhidden", ",", "obs_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.examples.latent_ode.Decoder.forward": [[155, 160], ["latent_ode.Decoder.fc1", "latent_ode.Decoder.relu", "latent_ode.Decoder.fc2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "z", ")", ":", "\n", "        ", "out", "=", "self", ".", "fc1", "(", "z", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "fc2", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.examples.latent_ode.RunningAverageMeter.__init__": [[165, 168], ["latent_ode.RunningAverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.rtqichen_torchdiffeq.examples.ode_demo.RunningAverageMeter.reset"], ["def", "__init__", "(", "self", ",", "momentum", "=", "0.99", ")", ":", "\n", "        ", "self", ".", "momentum", "=", "momentum", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.examples.latent_ode.RunningAverageMeter.reset": [[169, 172], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "None", "\n", "self", ".", "avg", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.examples.latent_ode.RunningAverageMeter.update": [[173, 179], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ")", ":", "\n", "        ", "if", "self", ".", "val", "is", "None", ":", "\n", "            ", "self", ".", "avg", "=", "val", "\n", "", "else", ":", "\n", "            ", "self", ".", "avg", "=", "self", ".", "avg", "*", "self", ".", "momentum", "+", "val", "*", "(", "1", "-", "self", ".", "momentum", ")", "\n", "", "self", ".", "val", "=", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.examples.latent_ode.generate_spiral2d": [[31, 106], ["numpy.linspace", "numpy.stack", "numpy.stack", "range", "numpy.stack", "numpy.stack", "matplotlib.figure", "matplotlib.plot", "matplotlib.plot", "matplotlib.legend", "matplotlib.savefig", "print", "numpy.multinomial", "bool", "np.stack.append", "orig_traj[].copy", "np.stack.append", "numpy.sin", "numpy.sin", "numpy.argmax", "numpy.randn", "numpy.cos", "numpy.cos", "numpy.rand", "int"], "function", ["None"], ["", "def", "generate_spiral2d", "(", "nspiral", "=", "1000", ",", "\n", "ntotal", "=", "500", ",", "\n", "nsample", "=", "100", ",", "\n", "start", "=", "0.", ",", "\n", "stop", "=", "1", ",", "# approximately equal to 6pi", "\n", "noise_std", "=", ".1", ",", "\n", "a", "=", "0.", ",", "\n", "b", "=", "1.", ",", "\n", "savefig", "=", "True", ")", ":", "\n", "    ", "\"\"\"Parametric formula for 2d spiral is `r = a + b * theta`.\n\n    Args:\n      nspiral: number of spirals, i.e. batch dimension\n      ntotal: total number of datapoints per spiral\n      nsample: number of sampled datapoints for model fitting per spiral\n      start: spiral starting theta value\n      stop: spiral ending theta value\n      noise_std: observation noise standard deviation\n      a, b: parameters of the Archimedean spiral\n      savefig: plot the ground truth for sanity check\n\n    Returns: \n      Tuple where first element is true trajectory of size (nspiral, ntotal, 2),\n      second element is noisy observations of size (nspiral, nsample, 2),\n      third element is timestamps of size (ntotal,),\n      and fourth element is timestamps of size (nsample,)\n    \"\"\"", "\n", "\n", "# add 1 all timestamps to avoid division by 0", "\n", "orig_ts", "=", "np", ".", "linspace", "(", "start", ",", "stop", ",", "num", "=", "ntotal", ")", "\n", "samp_ts", "=", "orig_ts", "[", ":", "nsample", "]", "\n", "\n", "# generate clock-wise and counter clock-wise spirals in observation space", "\n", "# with two sets of time-invariant latent dynamics", "\n", "zs_cw", "=", "stop", "+", "1.", "-", "orig_ts", "\n", "rs_cw", "=", "a", "+", "b", "*", "50.", "/", "zs_cw", "\n", "xs", ",", "ys", "=", "rs_cw", "*", "np", ".", "cos", "(", "zs_cw", ")", "-", "5.", ",", "rs_cw", "*", "np", ".", "sin", "(", "zs_cw", ")", "\n", "orig_traj_cw", "=", "np", ".", "stack", "(", "(", "xs", ",", "ys", ")", ",", "axis", "=", "1", ")", "\n", "\n", "zs_cc", "=", "orig_ts", "\n", "rw_cc", "=", "a", "+", "b", "*", "zs_cc", "\n", "xs", ",", "ys", "=", "rw_cc", "*", "np", ".", "cos", "(", "zs_cc", ")", "+", "5.", ",", "rw_cc", "*", "np", ".", "sin", "(", "zs_cc", ")", "\n", "orig_traj_cc", "=", "np", ".", "stack", "(", "(", "xs", ",", "ys", ")", ",", "axis", "=", "1", ")", "\n", "\n", "if", "savefig", ":", "\n", "        ", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "plot", "(", "orig_traj_cw", "[", ":", ",", "0", "]", ",", "orig_traj_cw", "[", ":", ",", "1", "]", ",", "label", "=", "'clock'", ")", "\n", "plt", ".", "plot", "(", "orig_traj_cc", "[", ":", ",", "0", "]", ",", "orig_traj_cc", "[", ":", ",", "1", "]", ",", "label", "=", "'counter clock'", ")", "\n", "plt", ".", "legend", "(", ")", "\n", "plt", ".", "savefig", "(", "'./ground_truth.png'", ",", "dpi", "=", "500", ")", "\n", "print", "(", "'Saved ground truth spiral at {}'", ".", "format", "(", "'./ground_truth.png'", ")", ")", "\n", "\n", "# sample starting timestamps", "\n", "", "orig_trajs", "=", "[", "]", "\n", "samp_trajs", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "nspiral", ")", ":", "\n", "# don't sample t0 very near the start or the end", "\n", "        ", "t0_idx", "=", "npr", ".", "multinomial", "(", "\n", "1", ",", "[", "1.", "/", "(", "ntotal", "-", "2.", "*", "nsample", ")", "]", "*", "(", "ntotal", "-", "int", "(", "2", "*", "nsample", ")", ")", ")", "\n", "t0_idx", "=", "np", ".", "argmax", "(", "t0_idx", ")", "+", "nsample", "\n", "\n", "cc", "=", "bool", "(", "npr", ".", "rand", "(", ")", ">", ".5", ")", "# uniformly select rotation", "\n", "orig_traj", "=", "orig_traj_cc", "if", "cc", "else", "orig_traj_cw", "\n", "orig_trajs", ".", "append", "(", "orig_traj", ")", "\n", "\n", "samp_traj", "=", "orig_traj", "[", "t0_idx", ":", "t0_idx", "+", "nsample", ",", ":", "]", ".", "copy", "(", ")", "\n", "samp_traj", "+=", "npr", ".", "randn", "(", "*", "samp_traj", ".", "shape", ")", "*", "noise_std", "\n", "samp_trajs", ".", "append", "(", "samp_traj", ")", "\n", "\n", "# batching for sample trajectories is good for RNN; batching for original", "\n", "# trajectories only for ease of indexing", "\n", "", "orig_trajs", "=", "np", ".", "stack", "(", "orig_trajs", ",", "axis", "=", "0", ")", "\n", "samp_trajs", "=", "np", ".", "stack", "(", "samp_trajs", ",", "axis", "=", "0", ")", "\n", "\n", "return", "orig_trajs", ",", "samp_trajs", ",", "orig_ts", ",", "samp_ts", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.examples.latent_ode.log_normal_pdf": [[181, 185], ["torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.log", "torch.log", "torch.log", "torch.log", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.array"], "function", ["None"], ["", "", "def", "log_normal_pdf", "(", "x", ",", "mean", ",", "logvar", ")", ":", "\n", "    ", "const", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "[", "2.", "*", "np", ".", "pi", "]", ")", ")", ".", "float", "(", ")", ".", "to", "(", "x", ".", "device", ")", "\n", "const", "=", "torch", ".", "log", "(", "const", ")", "\n", "return", "-", ".5", "*", "(", "const", "+", "logvar", "+", "(", "x", "-", "mean", ")", "**", "2.", "/", "torch", ".", "exp", "(", "logvar", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.examples.latent_ode.normal_kl": [[187, 195], ["torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp"], "function", ["None"], ["", "def", "normal_kl", "(", "mu1", ",", "lv1", ",", "mu2", ",", "lv2", ")", ":", "\n", "    ", "v1", "=", "torch", ".", "exp", "(", "lv1", ")", "\n", "v2", "=", "torch", ".", "exp", "(", "lv2", ")", "\n", "lstd1", "=", "lv1", "/", "2.", "\n", "lstd2", "=", "lv2", "/", "2.", "\n", "\n", "kl", "=", "lstd2", "-", "lstd1", "+", "(", "(", "v1", "+", "(", "mu1", "-", "mu2", ")", "**", "2.", ")", "/", "(", "2.", "*", "v2", ")", ")", "-", ".5", "\n", "return", "kl", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.examples.odenet_mnist.ResBlock.__init__": [[51, 59], ["torch.Module.__init__", "odenet_mnist.norm", "torch.ReLU", "torch.ReLU", "odenet_mnist.conv3x3", "odenet_mnist.norm", "odenet_mnist.conv3x3"], "methods", ["home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.misc._PerturbFunc.__init__", "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.examples.odenet_mnist.norm", "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.examples.odenet_mnist.conv3x3", "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.examples.odenet_mnist.norm", "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.examples.odenet_mnist.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "ResBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "norm1", "=", "norm", "(", "inplanes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "norm2", "=", "norm", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.examples.odenet_mnist.ResBlock.forward": [[60, 74], ["odenet_mnist.ResBlock.relu", "odenet_mnist.ResBlock.conv1", "odenet_mnist.ResBlock.norm2", "odenet_mnist.ResBlock.relu", "odenet_mnist.ResBlock.conv2", "odenet_mnist.ResBlock.norm1", "odenet_mnist.ResBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "shortcut", "=", "x", "\n", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "norm1", "(", "x", ")", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "shortcut", "=", "self", ".", "downsample", "(", "out", ")", "\n", "\n", "", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "out", "=", "self", ".", "norm2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "\n", "return", "out", "+", "shortcut", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.examples.odenet_mnist.ConcatConv2d.__init__": [[78, 84], ["torch.Module.__init__", "module"], "methods", ["home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.misc._PerturbFunc.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim_in", ",", "dim_out", ",", "ksize", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "bias", "=", "True", ",", "transpose", "=", "False", ")", ":", "\n", "        ", "super", "(", "ConcatConv2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "module", "=", "nn", ".", "ConvTranspose2d", "if", "transpose", "else", "nn", ".", "Conv2d", "\n", "self", ".", "_layer", "=", "module", "(", "\n", "dim_in", "+", "1", ",", "dim_out", ",", "kernel_size", "=", "ksize", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "groups", "=", "groups", ",", "\n", "bias", "=", "bias", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.examples.odenet_mnist.ConcatConv2d.forward": [[86, 90], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "odenet_mnist.ConcatConv2d._layer", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "t", ",", "x", ")", ":", "\n", "        ", "tt", "=", "torch", ".", "ones_like", "(", "x", "[", ":", ",", ":", "1", ",", ":", ",", ":", "]", ")", "*", "t", "\n", "ttx", "=", "torch", ".", "cat", "(", "[", "tt", ",", "x", "]", ",", "1", ")", "\n", "return", "self", ".", "_layer", "(", "ttx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.examples.odenet_mnist.ODEfunc.__init__": [[94, 103], ["torch.Module.__init__", "odenet_mnist.norm", "torch.ReLU", "torch.ReLU", "odenet_mnist.ConcatConv2d", "odenet_mnist.norm", "odenet_mnist.ConcatConv2d", "odenet_mnist.norm"], "methods", ["home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.misc._PerturbFunc.__init__", "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.examples.odenet_mnist.norm", "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.examples.odenet_mnist.norm", "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.examples.odenet_mnist.norm"], ["    ", "def", "__init__", "(", "self", ",", "dim", ")", ":", "\n", "        ", "super", "(", "ODEfunc", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "norm1", "=", "norm", "(", "dim", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv1", "=", "ConcatConv2d", "(", "dim", ",", "dim", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "norm2", "=", "norm", "(", "dim", ")", "\n", "self", ".", "conv2", "=", "ConcatConv2d", "(", "dim", ",", "dim", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "norm3", "=", "norm", "(", "dim", ")", "\n", "self", ".", "nfe", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.examples.odenet_mnist.ODEfunc.forward": [[104, 114], ["odenet_mnist.ODEfunc.norm1", "odenet_mnist.ODEfunc.relu", "odenet_mnist.ODEfunc.conv1", "odenet_mnist.ODEfunc.norm2", "odenet_mnist.ODEfunc.relu", "odenet_mnist.ODEfunc.conv2", "odenet_mnist.ODEfunc.norm3"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "t", ",", "x", ")", ":", "\n", "        ", "self", ".", "nfe", "+=", "1", "\n", "out", "=", "self", ".", "norm1", "(", "x", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "conv1", "(", "t", ",", "out", ")", "\n", "out", "=", "self", ".", "norm2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "t", ",", "out", ")", "\n", "out", "=", "self", ".", "norm3", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.examples.odenet_mnist.ODEBlock.__init__": [[118, 122], ["torch.Module.__init__", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.misc._PerturbFunc.__init__"], ["    ", "def", "__init__", "(", "self", ",", "odefunc", ")", ":", "\n", "        ", "super", "(", "ODEBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "odefunc", "=", "odefunc", "\n", "self", ".", "integration_time", "=", "torch", ".", "tensor", "(", "[", "0", ",", "1", "]", ")", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.examples.odenet_mnist.ODEBlock.forward": [[123, 127], ["odenet_mnist.ODEBlock.integration_time.type_as", "odeint"], "methods", ["home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.odeint.odeint"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "self", ".", "integration_time", "=", "self", ".", "integration_time", ".", "type_as", "(", "x", ")", "\n", "out", "=", "odeint", "(", "self", ".", "odefunc", ",", "x", ",", "self", ".", "integration_time", ",", "rtol", "=", "args", ".", "tol", ",", "atol", "=", "args", ".", "tol", ")", "\n", "return", "out", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.examples.odenet_mnist.ODEBlock.nfe": [[132, 135], ["None"], "methods", ["None"], ["", "@", "nfe", ".", "setter", "\n", "def", "nfe", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "odefunc", ".", "nfe", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.examples.odenet_mnist.Flatten.__init__": [[139, 141], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.misc._PerturbFunc.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Flatten", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.examples.odenet_mnist.Flatten.forward": [[142, 145], ["torch.prod().item", "torch.prod().item", "torch.prod().item", "torch.prod().item", "x.view", "torch.prod", "torch.prod", "torch.prod", "torch.prod", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "shape", "=", "torch", ".", "prod", "(", "torch", ".", "tensor", "(", "x", ".", "shape", "[", "1", ":", "]", ")", ")", ".", "item", "(", ")", "\n", "return", "x", ".", "view", "(", "-", "1", ",", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.examples.odenet_mnist.RunningAverageMeter.__init__": [[150, 153], ["odenet_mnist.RunningAverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.rtqichen_torchdiffeq.examples.ode_demo.RunningAverageMeter.reset"], ["def", "__init__", "(", "self", ",", "momentum", "=", "0.99", ")", ":", "\n", "        ", "self", ".", "momentum", "=", "momentum", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.examples.odenet_mnist.RunningAverageMeter.reset": [[154, 157], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "None", "\n", "self", ".", "avg", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.examples.odenet_mnist.RunningAverageMeter.update": [[158, 164], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ")", ":", "\n", "        ", "if", "self", ".", "val", "is", "None", ":", "\n", "            ", "self", ".", "avg", "=", "val", "\n", "", "else", ":", "\n", "            ", "self", ".", "avg", "=", "self", ".", "avg", "*", "self", ".", "momentum", "+", "val", "*", "(", "1", "-", "self", ".", "momentum", ")", "\n", "", "self", ".", "val", "=", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.examples.odenet_mnist.conv3x3": [[34, 37], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.examples.odenet_mnist.conv1x1": [[39, 42], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"1x1 convolution\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.examples.odenet_mnist.norm": [[44, 46], ["torch.GroupNorm", "min"], "function", ["None"], ["", "def", "norm", "(", "dim", ")", ":", "\n", "    ", "return", "nn", ".", "GroupNorm", "(", "min", "(", "32", ",", "dim", ")", ",", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.examples.odenet_mnist.get_mnist_loaders": [[166, 197], ["torchvision.Compose", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torchvision.Compose", "torchvision.Compose", "torchvision.MNIST", "torchvision.MNIST", "torchvision.MNIST", "torchvision.ToTensor", "torchvision.RandomCrop", "torchvision.ToTensor", "torchvision.ToTensor"], "function", ["None"], ["", "", "def", "get_mnist_loaders", "(", "data_aug", "=", "False", ",", "batch_size", "=", "128", ",", "test_batch_size", "=", "1000", ",", "perc", "=", "1.0", ")", ":", "\n", "    ", "if", "data_aug", ":", "\n", "        ", "transform_train", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomCrop", "(", "28", ",", "padding", "=", "4", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "]", ")", "\n", "", "else", ":", "\n", "        ", "transform_train", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "]", ")", "\n", "\n", "", "transform_test", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "]", ")", "\n", "\n", "train_loader", "=", "DataLoader", "(", "\n", "datasets", ".", "MNIST", "(", "root", "=", "'.data/mnist'", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "transform_train", ")", ",", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "num_workers", "=", "2", ",", "drop_last", "=", "True", "\n", ")", "\n", "\n", "train_eval_loader", "=", "DataLoader", "(", "\n", "datasets", ".", "MNIST", "(", "root", "=", "'.data/mnist'", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "transform_test", ")", ",", "\n", "batch_size", "=", "test_batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "2", ",", "drop_last", "=", "True", "\n", ")", "\n", "\n", "test_loader", "=", "DataLoader", "(", "\n", "datasets", ".", "MNIST", "(", "root", "=", "'.data/mnist'", ",", "train", "=", "False", ",", "download", "=", "True", ",", "transform", "=", "transform_test", ")", ",", "\n", "batch_size", "=", "test_batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "2", ",", "drop_last", "=", "True", "\n", ")", "\n", "\n", "return", "train_loader", ",", "test_loader", ",", "train_eval_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.examples.odenet_mnist.inf_generator": [[199, 209], ["iterable.__iter__", "iterable.__iter__.__next__", "iterable.__iter__"], "function", ["None"], ["", "def", "inf_generator", "(", "iterable", ")", ":", "\n", "    ", "\"\"\"Allows training with DataLoaders in a single infinite loop:\n        for i, (x, y) in enumerate(inf_generator(train_loader)):\n    \"\"\"", "\n", "iterator", "=", "iterable", ".", "__iter__", "(", ")", "\n", "while", "True", ":", "\n", "        ", "try", ":", "\n", "            ", "yield", "iterator", ".", "__next__", "(", ")", "\n", "", "except", "StopIteration", ":", "\n", "            ", "iterator", "=", "iterable", ".", "__iter__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.examples.odenet_mnist.learning_rate_with_decay": [[211, 223], ["int", "numpy.argmax"], "function", ["None"], ["", "", "", "def", "learning_rate_with_decay", "(", "batch_size", ",", "batch_denom", ",", "batches_per_epoch", ",", "boundary_epochs", ",", "decay_rates", ")", ":", "\n", "    ", "initial_learning_rate", "=", "args", ".", "lr", "*", "batch_size", "/", "batch_denom", "\n", "\n", "boundaries", "=", "[", "int", "(", "batches_per_epoch", "*", "epoch", ")", "for", "epoch", "in", "boundary_epochs", "]", "\n", "vals", "=", "[", "initial_learning_rate", "*", "decay", "for", "decay", "in", "decay_rates", "]", "\n", "\n", "def", "learning_rate_fn", "(", "itr", ")", ":", "\n", "        ", "lt", "=", "[", "itr", "<", "b", "for", "b", "in", "boundaries", "]", "+", "[", "True", "]", "\n", "i", "=", "np", ".", "argmax", "(", "lt", ")", "\n", "return", "vals", "[", "i", "]", "\n", "\n", "", "return", "learning_rate_fn", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.examples.odenet_mnist.one_hot": [[225, 227], ["numpy.array", "numpy.arange"], "function", ["None"], ["", "def", "one_hot", "(", "x", ",", "K", ")", ":", "\n", "    ", "return", "np", ".", "array", "(", "x", "[", ":", ",", "None", "]", "==", "np", ".", "arange", "(", "K", ")", "[", "None", ",", ":", "]", ",", "dtype", "=", "int", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.examples.odenet_mnist.accuracy": [[229, 239], ["x.to.to", "odenet_mnist.one_hot", "numpy.argmax", "numpy.argmax", "numpy.sum", "len", "numpy.array", "model().cpu().detach().numpy", "one_hot.numpy", "model().cpu().detach", "model().cpu", "model"], "function", ["home.repos.pwc.inspect_result.rtqichen_torchdiffeq.examples.odenet_mnist.one_hot"], ["", "def", "accuracy", "(", "model", ",", "dataset_loader", ")", ":", "\n", "    ", "total_correct", "=", "0", "\n", "for", "x", ",", "y", "in", "dataset_loader", ":", "\n", "        ", "x", "=", "x", ".", "to", "(", "device", ")", "\n", "y", "=", "one_hot", "(", "np", ".", "array", "(", "y", ".", "numpy", "(", ")", ")", ",", "10", ")", "\n", "\n", "target_class", "=", "np", ".", "argmax", "(", "y", ",", "axis", "=", "1", ")", "\n", "predicted_class", "=", "np", ".", "argmax", "(", "model", "(", "x", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ",", "axis", "=", "1", ")", "\n", "total_correct", "+=", "np", ".", "sum", "(", "predicted_class", "==", "target_class", ")", "\n", "", "return", "total_correct", "/", "len", "(", "dataset_loader", ".", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.examples.odenet_mnist.count_parameters": [[241, 243], ["sum", "p.numel", "model.parameters"], "function", ["None"], ["", "def", "count_parameters", "(", "model", ")", ":", "\n", "    ", "return", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.examples.odenet_mnist.makedirs": [[245, 248], ["os.path.exists", "os.makedirs"], "function", ["home.repos.pwc.inspect_result.rtqichen_torchdiffeq.examples.ode_demo.makedirs"], ["", "def", "makedirs", "(", "dirname", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "dirname", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "dirname", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.examples.odenet_mnist.get_logger": [[250, 275], ["logging.getLogger", "logging.getLogger.setLevel", "logging.getLogger.info", "logging.FileHandler", "logging.FileHandler.setLevel", "logging.getLogger.addHandler", "logging.StreamHandler", "logging.StreamHandler.setLevel", "logging.getLogger.addHandler", "open", "logging.getLogger.info", "logging.getLogger.info", "f.read", "open", "logging.getLogger.info", "package_f.read"], "function", ["None"], ["", "", "def", "get_logger", "(", "logpath", ",", "filepath", ",", "package_files", "=", "[", "]", ",", "displaying", "=", "True", ",", "saving", "=", "True", ",", "debug", "=", "False", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", ")", "\n", "if", "debug", ":", "\n", "        ", "level", "=", "logging", ".", "DEBUG", "\n", "", "else", ":", "\n", "        ", "level", "=", "logging", ".", "INFO", "\n", "", "logger", ".", "setLevel", "(", "level", ")", "\n", "if", "saving", ":", "\n", "        ", "info_file_handler", "=", "logging", ".", "FileHandler", "(", "logpath", ",", "mode", "=", "\"a\"", ")", "\n", "info_file_handler", ".", "setLevel", "(", "level", ")", "\n", "logger", ".", "addHandler", "(", "info_file_handler", ")", "\n", "", "if", "displaying", ":", "\n", "        ", "console_handler", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "console_handler", ".", "setLevel", "(", "level", ")", "\n", "logger", ".", "addHandler", "(", "console_handler", ")", "\n", "", "logger", ".", "info", "(", "filepath", ")", "\n", "with", "open", "(", "filepath", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "logger", ".", "info", "(", "f", ".", "read", "(", ")", ")", "\n", "\n", "", "for", "f", "in", "package_files", ":", "\n", "        ", "logger", ".", "info", "(", "f", ")", "\n", "with", "open", "(", "f", ",", "\"r\"", ")", "as", "package_f", ":", "\n", "            ", "logger", ".", "info", "(", "package_f", ".", "read", "(", ")", ")", "\n", "\n", "", "", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.examples.cnf.CNF.__init__": [[38, 44], ["torch.Module.__init__", "cnf.HyperNetwork"], "methods", ["home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.misc._PerturbFunc.__init__"], ["def", "__init__", "(", "self", ",", "in_out_dim", ",", "hidden_dim", ",", "width", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_out_dim", "=", "in_out_dim", "\n", "self", ".", "hidden_dim", "=", "hidden_dim", "\n", "self", ".", "width", "=", "width", "\n", "self", ".", "hyper_net", "=", "HyperNetwork", "(", "in_out_dim", ",", "hidden_dim", ",", "width", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.examples.cnf.CNF.forward": [[45, 64], ["torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "z.requires_grad_", "cnf.CNF.hyper_net", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.matmul().mean", "torch.matmul().mean", "torch.matmul().mean", "torch.matmul().mean", "torch.matmul().mean", "torch.matmul().mean", "torch.matmul().mean", "torch.matmul().mean", "torch.matmul().mean", "trace_df_dz().view", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "cnf.trace_df_dz"], "methods", ["home.repos.pwc.inspect_result.rtqichen_torchdiffeq.examples.cnf.trace_df_dz"], ["", "def", "forward", "(", "self", ",", "t", ",", "states", ")", ":", "\n", "        ", "z", "=", "states", "[", "0", "]", "\n", "logp_z", "=", "states", "[", "1", "]", "\n", "\n", "batchsize", "=", "z", ".", "shape", "[", "0", "]", "\n", "\n", "with", "torch", ".", "set_grad_enabled", "(", "True", ")", ":", "\n", "            ", "z", ".", "requires_grad_", "(", "True", ")", "\n", "\n", "W", ",", "B", ",", "U", "=", "self", ".", "hyper_net", "(", "t", ")", "\n", "\n", "Z", "=", "torch", ".", "unsqueeze", "(", "z", ",", "0", ")", ".", "repeat", "(", "self", ".", "width", ",", "1", ",", "1", ")", "\n", "\n", "h", "=", "torch", ".", "tanh", "(", "torch", ".", "matmul", "(", "Z", ",", "W", ")", "+", "B", ")", "\n", "dz_dt", "=", "torch", ".", "matmul", "(", "h", ",", "U", ")", ".", "mean", "(", "0", ")", "\n", "\n", "dlogp_z_dt", "=", "-", "trace_df_dz", "(", "dz_dt", ",", "z", ")", ".", "view", "(", "batchsize", ",", "1", ")", "\n", "\n", "", "return", "(", "dz_dt", ",", "dlogp_z_dt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.examples.cnf.HyperNetwork.__init__": [[83, 96], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.misc._PerturbFunc.__init__"], ["def", "__init__", "(", "self", ",", "in_out_dim", ",", "hidden_dim", ",", "width", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "blocksize", "=", "width", "*", "in_out_dim", "\n", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "1", ",", "hidden_dim", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "hidden_dim", ",", "hidden_dim", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "hidden_dim", ",", "3", "*", "blocksize", "+", "width", ")", "\n", "\n", "self", ".", "in_out_dim", "=", "in_out_dim", "\n", "self", ".", "hidden_dim", "=", "hidden_dim", "\n", "self", ".", "width", "=", "width", "\n", "self", ".", "blocksize", "=", "blocksize", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.examples.cnf.HyperNetwork.forward": [[97, 115], ["t.reshape", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "cnf.HyperNetwork.fc3", "params.reshape.reshape.reshape", "params[].reshape", "params[].reshape", "params[].reshape", "params[].reshape", "cnf.HyperNetwork.fc1", "cnf.HyperNetwork.fc2", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "t", ")", ":", "\n", "# predict params", "\n", "        ", "params", "=", "t", ".", "reshape", "(", "1", ",", "1", ")", "\n", "params", "=", "torch", ".", "tanh", "(", "self", ".", "fc1", "(", "params", ")", ")", "\n", "params", "=", "torch", ".", "tanh", "(", "self", ".", "fc2", "(", "params", ")", ")", "\n", "params", "=", "self", ".", "fc3", "(", "params", ")", "\n", "\n", "# restructure", "\n", "params", "=", "params", ".", "reshape", "(", "-", "1", ")", "\n", "W", "=", "params", "[", ":", "self", ".", "blocksize", "]", ".", "reshape", "(", "self", ".", "width", ",", "self", ".", "in_out_dim", ",", "1", ")", "\n", "\n", "U", "=", "params", "[", "self", ".", "blocksize", ":", "2", "*", "self", ".", "blocksize", "]", ".", "reshape", "(", "self", ".", "width", ",", "1", ",", "self", ".", "in_out_dim", ")", "\n", "\n", "G", "=", "params", "[", "2", "*", "self", ".", "blocksize", ":", "3", "*", "self", ".", "blocksize", "]", ".", "reshape", "(", "self", ".", "width", ",", "1", ",", "self", ".", "in_out_dim", ")", "\n", "U", "=", "U", "*", "torch", ".", "sigmoid", "(", "G", ")", "\n", "\n", "B", "=", "params", "[", "3", "*", "self", ".", "blocksize", ":", "]", ".", "reshape", "(", "self", ".", "width", ",", "1", ",", "1", ")", "\n", "return", "[", "W", ",", "B", ",", "U", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.examples.cnf.RunningAverageMeter.__init__": [[120, 123], ["cnf.RunningAverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.rtqichen_torchdiffeq.examples.ode_demo.RunningAverageMeter.reset"], ["def", "__init__", "(", "self", ",", "momentum", "=", "0.99", ")", ":", "\n", "        ", "self", ".", "momentum", "=", "momentum", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.examples.cnf.RunningAverageMeter.reset": [[124, 127], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "None", "\n", "self", ".", "avg", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.examples.cnf.RunningAverageMeter.update": [[128, 134], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ")", ":", "\n", "        ", "if", "self", ".", "val", "is", "None", ":", "\n", "            ", "self", ".", "avg", "=", "val", "\n", "", "else", ":", "\n", "            ", "self", ".", "avg", "=", "self", ".", "avg", "*", "self", ".", "momentum", "+", "val", "*", "(", "1", "-", "self", ".", "momentum", ")", "\n", "", "self", ".", "val", "=", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.examples.cnf.trace_df_dz": [[66, 75], ["range", "sum_diag.contiguous", "[].contiguous", "[].contiguous", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "f[].sum"], "function", ["None"], ["", "", "def", "trace_df_dz", "(", "f", ",", "z", ")", ":", "\n", "    ", "\"\"\"Calculates the trace of the Jacobian df/dz.\n    Stolen from: https://github.com/rtqichen/ffjord/blob/master/lib/layers/odefunc.py#L13\n    \"\"\"", "\n", "sum_diag", "=", "0.", "\n", "for", "i", "in", "range", "(", "z", ".", "shape", "[", "1", "]", ")", ":", "\n", "        ", "sum_diag", "+=", "torch", ".", "autograd", ".", "grad", "(", "f", "[", ":", ",", "i", "]", ".", "sum", "(", ")", ",", "z", ",", "create_graph", "=", "True", ")", "[", "0", "]", ".", "contiguous", "(", ")", "[", ":", ",", "i", "]", ".", "contiguous", "(", ")", "\n", "\n", "", "return", "sum_diag", ".", "contiguous", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.examples.cnf.get_batch": [[136, 142], ["sklearn.datasets.make_circles", "torch.tensor().type().to", "torch.tensor().type().to", "torch.tensor().type().to", "torch.zeros().type().to", "torch.zeros().type().to", "torch.zeros().type().to", "torch.tensor().type", "torch.tensor().type", "torch.tensor().type", "torch.zeros().type", "torch.zeros().type", "torch.zeros().type", "torch.tensor", "torch.tensor", "torch.tensor", "torch.zeros", "torch.zeros", "torch.zeros"], "function", ["None"], ["", "", "def", "get_batch", "(", "num_samples", ")", ":", "\n", "    ", "points", ",", "_", "=", "make_circles", "(", "n_samples", "=", "num_samples", ",", "noise", "=", "0.06", ",", "factor", "=", "0.5", ")", "\n", "x", "=", "torch", ".", "tensor", "(", "points", ")", ".", "type", "(", "torch", ".", "float32", ")", ".", "to", "(", "device", ")", "\n", "logp_diff_t1", "=", "torch", ".", "zeros", "(", "num_samples", ",", "1", ")", ".", "type", "(", "torch", ".", "float32", ")", ".", "to", "(", "device", ")", "\n", "\n", "return", "(", "x", ",", "logp_diff_t1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.examples.bouncing_ball.BouncingBallExample.__init__": [[16, 25], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.log", "torch.log", "torch.log", "torch.log", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor"], "methods", ["home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.misc._PerturbFunc.__init__"], ["    ", "def", "__init__", "(", "self", ",", "radius", "=", "0.2", ",", "gravity", "=", "9.8", ",", "adjoint", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gravity", "=", "nn", ".", "Parameter", "(", "torch", ".", "as_tensor", "(", "[", "gravity", "]", ")", ")", "\n", "self", ".", "log_radius", "=", "nn", ".", "Parameter", "(", "torch", ".", "log", "(", "torch", ".", "as_tensor", "(", "[", "radius", "]", ")", ")", ")", "\n", "self", ".", "t0", "=", "nn", ".", "Parameter", "(", "torch", ".", "tensor", "(", "[", "0.0", "]", ")", ")", "\n", "self", ".", "init_pos", "=", "nn", ".", "Parameter", "(", "torch", ".", "tensor", "(", "[", "10.0", "]", ")", ")", "\n", "self", ".", "init_vel", "=", "nn", ".", "Parameter", "(", "torch", ".", "tensor", "(", "[", "0.0", "]", ")", ")", "\n", "self", ".", "absorption", "=", "nn", ".", "Parameter", "(", "torch", ".", "tensor", "(", "[", "0.2", "]", ")", ")", "\n", "self", ".", "odeint", "=", "odeint_adjoint", "if", "adjoint", "else", "odeint", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.examples.bouncing_ball.BouncingBallExample.forward": [[26, 31], ["torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "t", ",", "state", ")", ":", "\n", "        ", "pos", ",", "vel", ",", "log_radius", "=", "state", "\n", "dpos", "=", "vel", "\n", "dvel", "=", "-", "self", ".", "gravity", "\n", "return", "dpos", ",", "dvel", ",", "torch", ".", "zeros_like", "(", "log_radius", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.examples.bouncing_ball.BouncingBallExample.event_fn": [[32, 36], ["torch.exp", "torch.exp", "torch.exp", "torch.exp"], "methods", ["None"], ["", "def", "event_fn", "(", "self", ",", "t", ",", "state", ")", ":", "\n", "# positive if ball in mid-air, negative if ball within ground.", "\n", "        ", "pos", ",", "_", ",", "log_radius", "=", "state", "\n", "return", "pos", "-", "torch", ".", "exp", "(", "log_radius", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.examples.bouncing_ball.BouncingBallExample.get_initial_state": [[37, 40], ["None"], "methods", ["None"], ["", "def", "get_initial_state", "(", "self", ")", ":", "\n", "        ", "state", "=", "(", "self", ".", "init_pos", ",", "self", ".", "init_vel", ",", "self", ".", "log_radius", ")", "\n", "return", "self", ".", "t0", ",", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.examples.bouncing_ball.BouncingBallExample.state_update": [[41, 47], ["None"], "methods", ["None"], ["", "def", "state_update", "(", "self", ",", "state", ")", ":", "\n", "        ", "\"\"\" Updates state based on an event (collision).\"\"\"", "\n", "pos", ",", "vel", ",", "log_radius", "=", "state", "\n", "pos", "=", "pos", "+", "1e-7", "# need to add a small eps so as not to trigger the event function immediately.", "\n", "vel", "=", "-", "vel", "*", "(", "1", "-", "self", ".", "absorption", ")", "\n", "return", "(", "pos", ",", "vel", ",", "log_radius", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.examples.bouncing_ball.BouncingBallExample.get_collision_times": [[48, 62], ["bouncing_ball.BouncingBallExample.get_initial_state", "range", "torchdiffeq.odeint_event", "event_times.append", "bouncing_ball.BouncingBallExample.state_update", "tuple"], "methods", ["home.repos.pwc.inspect_result.rtqichen_torchdiffeq.examples.bouncing_ball.BouncingBallExample.get_initial_state", "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.odeint.odeint_event", "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.examples.bouncing_ball.BouncingBallExample.state_update"], ["", "def", "get_collision_times", "(", "self", ",", "nbounces", "=", "1", ")", ":", "\n", "\n", "        ", "event_times", "=", "[", "]", "\n", "\n", "t0", ",", "state", "=", "self", ".", "get_initial_state", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "nbounces", ")", ":", "\n", "            ", "event_t", ",", "solution", "=", "odeint_event", "(", "self", ",", "state", ",", "t0", ",", "event_fn", "=", "self", ".", "event_fn", ",", "reverse_time", "=", "False", ",", "atol", "=", "1e-8", ",", "rtol", "=", "1e-8", ",", "odeint_interface", "=", "self", ".", "odeint", ")", "\n", "event_times", ".", "append", "(", "event_t", ")", "\n", "\n", "state", "=", "self", ".", "state_update", "(", "tuple", "(", "s", "[", "-", "1", "]", "for", "s", "in", "solution", ")", ")", "\n", "t0", "=", "event_t", "\n", "\n", "", "return", "event_times", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.examples.bouncing_ball.BouncingBallExample.simulate": [[63, 84], ["bouncing_ball.BouncingBallExample.get_collision_times", "bouncing_ball.BouncingBallExample.get_initial_state", "t0.reshape", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torchdiffeq.odeint", "trajectory.append", "velocity.append", "times.append", "bouncing_ball.BouncingBallExample.state_update", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat().reshape", "torch.cat().reshape", "torch.cat().reshape", "torch.cat().reshape", "torch.cat().reshape", "torch.cat().reshape", "torch.cat().reshape", "torch.cat().reshape", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "tuple", "float", "float", "int", "t0.reshape", "event_t.reshape", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "float", "float"], "methods", ["home.repos.pwc.inspect_result.rtqichen_torchdiffeq.examples.bouncing_ball.BouncingBallExample.get_collision_times", "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.examples.bouncing_ball.BouncingBallExample.get_initial_state", "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.odeint.odeint", "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.examples.bouncing_ball.BouncingBallExample.state_update"], ["", "def", "simulate", "(", "self", ",", "nbounces", "=", "1", ")", ":", "\n", "        ", "event_times", "=", "self", ".", "get_collision_times", "(", "nbounces", ")", "\n", "\n", "# get dense path", "\n", "t0", ",", "state", "=", "self", ".", "get_initial_state", "(", ")", "\n", "trajectory", "=", "[", "state", "[", "0", "]", "[", "None", "]", "]", "\n", "velocity", "=", "[", "state", "[", "1", "]", "[", "None", "]", "]", "\n", "times", "=", "[", "t0", ".", "reshape", "(", "-", "1", ")", "]", "\n", "for", "event_t", "in", "event_times", ":", "\n", "            ", "tt", "=", "torch", ".", "linspace", "(", "float", "(", "t0", ")", ",", "float", "(", "event_t", ")", ",", "int", "(", "(", "float", "(", "event_t", ")", "-", "float", "(", "t0", ")", ")", "*", "50", ")", ")", "[", "1", ":", "-", "1", "]", "\n", "tt", "=", "torch", ".", "cat", "(", "[", "t0", ".", "reshape", "(", "-", "1", ")", ",", "tt", ",", "event_t", ".", "reshape", "(", "-", "1", ")", "]", ")", "\n", "solution", "=", "odeint", "(", "self", ",", "state", ",", "tt", ",", "atol", "=", "1e-8", ",", "rtol", "=", "1e-8", ")", "\n", "\n", "trajectory", ".", "append", "(", "solution", "[", "0", "]", ")", "\n", "velocity", ".", "append", "(", "solution", "[", "1", "]", ")", "\n", "times", ".", "append", "(", "tt", ")", "\n", "\n", "state", "=", "self", ".", "state_update", "(", "tuple", "(", "s", "[", "-", "1", "]", "for", "s", "in", "solution", ")", ")", "\n", "t0", "=", "event_t", "\n", "\n", "", "return", "torch", ".", "cat", "(", "times", ")", ",", "torch", ".", "cat", "(", "trajectory", ",", "dim", "=", "0", ")", ".", "reshape", "(", "-", "1", ")", ",", "torch", ".", "cat", "(", "velocity", ",", "dim", "=", "0", ")", ".", "reshape", "(", "-", "1", ")", ",", "event_times", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.examples.bouncing_ball.gradcheck": [[86, 133], ["bouncing_ball.BouncingBallExample", "event_t.backward", "BouncingBallExample.named_parameters", "variables.items", "variables.keys", "print", "bouncing_ball.BouncingBallExample.get_collision_times", "variables.keys", "Exception", "bouncing_ball.BouncingBallExample.get_collision_times", "bouncing_ball.BouncingBallExample.get_collision_times", "torch.norm", "torch.norm", "print", "analytical.item", "fd.item"], "function", ["home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.misc._StitchGradient.backward", "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.examples.bouncing_ball.BouncingBallExample.get_collision_times", "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.examples.bouncing_ball.BouncingBallExample.get_collision_times", "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.examples.bouncing_ball.BouncingBallExample.get_collision_times", "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.examples.odenet_mnist.norm", "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.examples.odenet_mnist.norm"], ["", "", "def", "gradcheck", "(", "nbounces", ")", ":", "\n", "\n", "    ", "system", "=", "BouncingBallExample", "(", ")", "\n", "\n", "variables", "=", "{", "\n", "\"init_pos\"", ":", "system", ".", "init_pos", ",", "\n", "\"init_vel\"", ":", "system", ".", "init_vel", ",", "\n", "\"t0\"", ":", "system", ".", "t0", ",", "\n", "\"gravity\"", ":", "system", ".", "gravity", ",", "\n", "\"log_radius\"", ":", "system", ".", "log_radius", ",", "\n", "}", "\n", "\n", "event_t", "=", "system", ".", "get_collision_times", "(", "nbounces", ")", "[", "-", "1", "]", "\n", "event_t", ".", "backward", "(", ")", "\n", "\n", "analytical_grads", "=", "{", "}", "\n", "for", "name", ",", "p", "in", "system", ".", "named_parameters", "(", ")", ":", "\n", "        ", "for", "var", "in", "variables", ".", "keys", "(", ")", ":", "\n", "            ", "if", "var", "in", "name", ":", "\n", "                ", "analytical_grads", "[", "var", "]", "=", "p", ".", "grad", "\n", "\n", "", "", "", "eps", "=", "1e-3", "\n", "\n", "fd_grads", "=", "{", "}", "\n", "\n", "for", "var", ",", "param", "in", "variables", ".", "items", "(", ")", ":", "\n", "        ", "orig", "=", "param", ".", "data", "\n", "param", ".", "data", "=", "orig", "-", "eps", "\n", "f_meps", "=", "system", ".", "get_collision_times", "(", "nbounces", ")", "[", "-", "1", "]", "\n", "param", ".", "data", "=", "orig", "+", "eps", "\n", "f_peps", "=", "system", ".", "get_collision_times", "(", "nbounces", ")", "[", "-", "1", "]", "\n", "param", ".", "data", "=", "orig", "\n", "fd", "=", "(", "f_peps", "-", "f_meps", ")", "/", "(", "2", "*", "eps", ")", "\n", "fd_grads", "[", "var", "]", "=", "fd", "\n", "\n", "", "success", "=", "True", "\n", "for", "var", "in", "variables", ".", "keys", "(", ")", ":", "\n", "        ", "analytical", "=", "analytical_grads", "[", "var", "]", "\n", "fd", "=", "fd_grads", "[", "var", "]", "\n", "if", "torch", ".", "norm", "(", "analytical", "-", "fd", ")", ">", "1e-4", ":", "\n", "            ", "success", "=", "False", "\n", "print", "(", "f\"Got analytical grad {analytical.item()} for {var} param but finite difference is {fd.item()}\"", ")", "\n", "\n", "", "", "if", "not", "success", ":", "\n", "        ", "raise", "Exception", "(", "\"Gradient check failed.\"", ")", "\n", "\n", "", "print", "(", "\"Gradient check passed.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.examples.ode_demo.Lambda.forward": [[36, 38], ["torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "t", ",", "y", ")", ":", "\n", "        ", "return", "torch", ".", "mm", "(", "y", "**", "3", ",", "true_A", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.examples.ode_demo.ODEFunc.__init__": [[113, 126], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "ode_demo.ODEFunc.net.modules", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Linear", "torch.Linear", "torch.Linear", "isinstance", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.misc._PerturbFunc.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "ODEFunc", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "net", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "2", ",", "50", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "50", ",", "2", ")", ",", "\n", ")", "\n", "\n", "for", "m", "in", "self", ".", "net", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "mean", "=", "0", ",", "std", "=", "0.1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "val", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.examples.ode_demo.ODEFunc.forward": [[127, 129], ["ode_demo.ODEFunc.net"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "t", ",", "y", ")", ":", "\n", "        ", "return", "self", ".", "net", "(", "y", "**", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.examples.ode_demo.RunningAverageMeter.__init__": [[134, 137], ["ode_demo.RunningAverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.rtqichen_torchdiffeq.examples.ode_demo.RunningAverageMeter.reset"], ["def", "__init__", "(", "self", ",", "momentum", "=", "0.99", ")", ":", "\n", "        ", "self", ".", "momentum", "=", "momentum", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.examples.ode_demo.RunningAverageMeter.reset": [[138, 141], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "None", "\n", "self", ".", "avg", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.examples.ode_demo.RunningAverageMeter.update": [[142, 148], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ")", ":", "\n", "        ", "if", "self", ".", "val", "is", "None", ":", "\n", "            ", "self", ".", "avg", "=", "val", "\n", "", "else", ":", "\n", "            ", "self", ".", "avg", "=", "self", ".", "avg", "*", "self", ".", "momentum", "+", "val", "*", "(", "1", "-", "self", ".", "momentum", ")", "\n", "", "self", ".", "val", "=", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.examples.ode_demo.get_batch": [[44, 50], ["torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.stack", "torch.stack", "torch.stack", "numpy.random.choice", "batch_y0.to", "batch_t.to", "torch.stack.to", "numpy.arange", "range"], "function", ["None"], ["", "def", "get_batch", "(", ")", ":", "\n", "    ", "s", "=", "torch", ".", "from_numpy", "(", "np", ".", "random", ".", "choice", "(", "np", ".", "arange", "(", "args", ".", "data_size", "-", "args", ".", "batch_time", ",", "dtype", "=", "np", ".", "int64", ")", ",", "args", ".", "batch_size", ",", "replace", "=", "False", ")", ")", "\n", "batch_y0", "=", "true_y", "[", "s", "]", "# (M, D)", "\n", "batch_t", "=", "t", "[", ":", "args", ".", "batch_time", "]", "# (T)", "\n", "batch_y", "=", "torch", ".", "stack", "(", "[", "true_y", "[", "s", "+", "i", "]", "for", "i", "in", "range", "(", "args", ".", "batch_time", ")", "]", ",", "dim", "=", "0", ")", "# (T, M, D)", "\n", "return", "batch_y0", ".", "to", "(", "device", ")", ",", "batch_t", ".", "to", "(", "device", ")", ",", "batch_y", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.examples.ode_demo.makedirs": [[52, 55], ["os.path.exists", "os.makedirs"], "function", ["home.repos.pwc.inspect_result.rtqichen_torchdiffeq.examples.ode_demo.makedirs"], ["", "def", "makedirs", "(", "dirname", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "dirname", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "dirname", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.examples.ode_demo.visualize": [[67, 109], ["ax_traj.cla", "ax_traj.set_title", "ax_traj.set_xlabel", "ax_traj.set_ylabel", "ax_traj.plot", "ax_traj.plot", "ax_traj.set_xlim", "ax_traj.set_ylim", "ax_traj.legend", "ax_phase.cla", "ax_phase.set_title", "ax_phase.set_xlabel", "ax_phase.set_ylabel", "ax_phase.plot", "ax_phase.plot", "ax_phase.set_xlim", "ax_phase.set_ylim", "ax_vecfield.cla", "ax_vecfield.set_title", "ax_vecfield.set_xlabel", "ax_vecfield.set_ylabel", "odefunc().cpu().detach().numpy", "numpy.sqrt().reshape", "dydt.reshape.reshape", "ax_vecfield.streamplot", "ax_vecfield.set_xlim", "ax_vecfield.set_ylim", "fig.tight_layout", "plt.savefig", "plt.draw", "plt.pause", "t.cpu().numpy", "t.cpu().numpy", "t.cpu().numpy", "t.cpu().numpy", "t.cpu().min", "t.cpu().max", "true_y.cpu().numpy", "true_y.cpu().numpy", "pred_y.cpu().numpy", "pred_y.cpu().numpy", "true_y.cpu().numpy", "true_y.cpu().numpy", "pred_y.cpu().numpy", "pred_y.cpu().numpy", "odefunc().cpu().detach", "numpy.sqrt", "t.cpu", "t.cpu", "t.cpu", "t.cpu", "t.cpu", "t.cpu", "true_y.cpu", "true_y.cpu", "pred_y.cpu", "pred_y.cpu", "true_y.cpu", "true_y.cpu", "pred_y.cpu", "pred_y.cpu", "odefunc().cpu", "odefunc", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor", "torch.Tensor", "torch.Tensor", "numpy.stack().reshape", "numpy.stack"], "function", ["None"], ["", "def", "visualize", "(", "true_y", ",", "pred_y", ",", "odefunc", ",", "itr", ")", ":", "\n", "\n", "    ", "if", "args", ".", "viz", ":", "\n", "\n", "        ", "ax_traj", ".", "cla", "(", ")", "\n", "ax_traj", ".", "set_title", "(", "'Trajectories'", ")", "\n", "ax_traj", ".", "set_xlabel", "(", "'t'", ")", "\n", "ax_traj", ".", "set_ylabel", "(", "'x,y'", ")", "\n", "ax_traj", ".", "plot", "(", "t", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "true_y", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", ":", ",", "0", ",", "0", "]", ",", "t", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "true_y", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", ":", ",", "0", ",", "1", "]", ",", "'g-'", ")", "\n", "ax_traj", ".", "plot", "(", "t", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "pred_y", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", ":", ",", "0", ",", "0", "]", ",", "'--'", ",", "t", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "pred_y", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", ":", ",", "0", ",", "1", "]", ",", "'b--'", ")", "\n", "ax_traj", ".", "set_xlim", "(", "t", ".", "cpu", "(", ")", ".", "min", "(", ")", ",", "t", ".", "cpu", "(", ")", ".", "max", "(", ")", ")", "\n", "ax_traj", ".", "set_ylim", "(", "-", "2", ",", "2", ")", "\n", "ax_traj", ".", "legend", "(", ")", "\n", "\n", "ax_phase", ".", "cla", "(", ")", "\n", "ax_phase", ".", "set_title", "(", "'Phase Portrait'", ")", "\n", "ax_phase", ".", "set_xlabel", "(", "'x'", ")", "\n", "ax_phase", ".", "set_ylabel", "(", "'y'", ")", "\n", "ax_phase", ".", "plot", "(", "true_y", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", ":", ",", "0", ",", "0", "]", ",", "true_y", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", ":", ",", "0", ",", "1", "]", ",", "'g-'", ")", "\n", "ax_phase", ".", "plot", "(", "pred_y", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", ":", ",", "0", ",", "0", "]", ",", "pred_y", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", ":", ",", "0", ",", "1", "]", ",", "'b--'", ")", "\n", "ax_phase", ".", "set_xlim", "(", "-", "2", ",", "2", ")", "\n", "ax_phase", ".", "set_ylim", "(", "-", "2", ",", "2", ")", "\n", "\n", "ax_vecfield", ".", "cla", "(", ")", "\n", "ax_vecfield", ".", "set_title", "(", "'Learned Vector Field'", ")", "\n", "ax_vecfield", ".", "set_xlabel", "(", "'x'", ")", "\n", "ax_vecfield", ".", "set_ylabel", "(", "'y'", ")", "\n", "\n", "y", ",", "x", "=", "np", ".", "mgrid", "[", "-", "2", ":", "2", ":", "21j", ",", "-", "2", ":", "2", ":", "21j", "]", "\n", "dydt", "=", "odefunc", "(", "0", ",", "torch", ".", "Tensor", "(", "np", ".", "stack", "(", "[", "x", ",", "y", "]", ",", "-", "1", ")", ".", "reshape", "(", "21", "*", "21", ",", "2", ")", ")", ".", "to", "(", "device", ")", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "mag", "=", "np", ".", "sqrt", "(", "dydt", "[", ":", ",", "0", "]", "**", "2", "+", "dydt", "[", ":", ",", "1", "]", "**", "2", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "dydt", "=", "(", "dydt", "/", "mag", ")", "\n", "dydt", "=", "dydt", ".", "reshape", "(", "21", ",", "21", ",", "2", ")", "\n", "\n", "ax_vecfield", ".", "streamplot", "(", "x", ",", "y", ",", "dydt", "[", ":", ",", ":", ",", "0", "]", ",", "dydt", "[", ":", ",", ":", ",", "1", "]", ",", "color", "=", "\"black\"", ")", "\n", "ax_vecfield", ".", "set_xlim", "(", "-", "2", ",", "2", ")", "\n", "ax_vecfield", ".", "set_ylim", "(", "-", "2", ",", "2", ")", "\n", "\n", "fig", ".", "tight_layout", "(", ")", "\n", "plt", ".", "savefig", "(", "'png/{:03d}'", ".", "format", "(", "itr", ")", ")", "\n", "plt", ".", "draw", "(", ")", "\n", "plt", ".", "pause", "(", "0.001", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.tests.norm_tests._NeuralF.__init__": [[22, 33], ["super().__init__", "norm_tests.random_seed_torch", "torch.nn.Sequential", "torch.nn.Linear", "torch.nn.Tanh", "torch.nn.Linear", "torch.nn.Tanh"], "methods", ["home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.misc._PerturbFunc.__init__", "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.tests.norm_tests.random_seed_torch"], ["    ", "def", "__init__", "(", "self", ",", "width", ",", "oscillate", ")", ":", "\n", "        ", "super", "(", "_NeuralF", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# Use the same set of random weights for every instance.", "\n", "with", "random_seed_torch", "(", "0", ")", ":", "\n", "            ", "self", ".", "linears", "=", "torch", ".", "nn", ".", "Sequential", "(", "torch", ".", "nn", ".", "Linear", "(", "2", ",", "width", ")", ",", "\n", "torch", ".", "nn", ".", "Tanh", "(", ")", ",", "\n", "torch", ".", "nn", ".", "Linear", "(", "width", ",", "2", ")", ",", "\n", "torch", ".", "nn", ".", "Tanh", "(", ")", ")", "\n", "", "self", ".", "nfe", "=", "0", "\n", "self", ".", "oscillate", "=", "oscillate", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.tests.norm_tests._NeuralF.forward": [[34, 40], ["norm_tests._NeuralF.linears", "t.mul().sin", "t.mul"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "t", ",", "x", ")", ":", "\n", "        ", "self", ".", "nfe", "+=", "1", "\n", "out", "=", "self", ".", "linears", "(", "x", ")", "\n", "if", "self", ".", "oscillate", ":", "\n", "            ", "out", "=", "out", "*", "t", ".", "mul", "(", "2", ")", ".", "sin", "(", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.tests.norm_tests.TestNorms.test_norm": [[43, 90], ["torch.tensor", "torch.tensor", "torchdiffeq.odeint", "norm_tests.TestNorms.assertTrue", "torchdiffeq.odeint", "norm_tests.TestNorms.assertTrue", "torchdiffeq.odeint", "norm_tests.TestNorms.assertTrue", "norm_tests.TestNorms.assertIsInstance", "norm_tests.TestNorms.assertEqual", "state.pow().mean().sqrt", "norm_tests.TestNorms.assertIsInstance", "norm_tests.TestNorms.assertEqual", "norm_tests.TestNorms.assertEqual", "state.pow().mean().sqrt", "torch.tensor", "norm_tests.TestNorms.assertIsInstance", "norm_tests.TestNorms.assertEqual", "norm_tests.TestNorms.assertEqual", "norm_tests.TestNorms.assertEqual", "state1.pow().mean().sqrt", "torch.tensor", "torch.tensor", "dict", "len", "dict", "len", "dict", "state.pow().mean", "state.pow().mean", "state1.pow().mean", "state.pow", "state.pow", "state1.pow"], "methods", ["home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.odeint.odeint", "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.odeint.odeint", "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.odeint.odeint"], ["    ", "def", "test_norm", "(", "self", ")", ":", "\n", "        ", "def", "f", "(", "t", ",", "x", ")", ":", "\n", "            ", "return", "x", "\n", "", "t", "=", "torch", ".", "tensor", "(", "[", "0.", ",", "1.", "]", ")", "\n", "\n", "# First test that tensor input appears in the norm.", "\n", "is_called", "=", "False", "\n", "\n", "def", "norm", "(", "state", ")", ":", "\n", "            ", "nonlocal", "is_called", "\n", "is_called", "=", "True", "\n", "self", ".", "assertIsInstance", "(", "state", ",", "torch", ".", "Tensor", ")", "\n", "self", ".", "assertEqual", "(", "state", ".", "shape", ",", "(", ")", ")", "\n", "return", "state", ".", "pow", "(", "2", ")", ".", "mean", "(", ")", ".", "sqrt", "(", ")", "\n", "", "x0", "=", "torch", ".", "tensor", "(", "1.", ")", "\n", "torchdiffeq", ".", "odeint", "(", "f", ",", "x0", ",", "t", ",", "options", "=", "dict", "(", "norm", "=", "norm", ")", ")", "\n", "self", ".", "assertTrue", "(", "is_called", ")", "\n", "\n", "# Now test that tupled input appears in the norm", "\n", "is_called", "=", "False", "\n", "\n", "def", "norm", "(", "state", ")", ":", "\n", "            ", "nonlocal", "is_called", "\n", "is_called", "=", "True", "\n", "self", ".", "assertIsInstance", "(", "state", ",", "tuple", ")", "\n", "self", ".", "assertEqual", "(", "len", "(", "state", ")", ",", "1", ")", "\n", "state", ",", "=", "state", "\n", "self", ".", "assertEqual", "(", "state", ".", "shape", ",", "(", ")", ")", "\n", "return", "state", ".", "pow", "(", "2", ")", ".", "mean", "(", ")", ".", "sqrt", "(", ")", "\n", "", "x0", "=", "(", "torch", ".", "tensor", "(", "1.", ")", ",", ")", "\n", "torchdiffeq", ".", "odeint", "(", "f", ",", "x0", ",", "t", ",", "options", "=", "dict", "(", "norm", "=", "norm", ")", ")", "\n", "self", ".", "assertTrue", "(", "is_called", ")", "\n", "\n", "is_called", "=", "False", "\n", "\n", "def", "norm", "(", "state", ")", ":", "\n", "            ", "nonlocal", "is_called", "\n", "is_called", "=", "True", "\n", "self", ".", "assertIsInstance", "(", "state", ",", "tuple", ")", "\n", "self", ".", "assertEqual", "(", "len", "(", "state", ")", ",", "2", ")", "\n", "state1", ",", "state2", "=", "state", "\n", "self", ".", "assertEqual", "(", "state1", ".", "shape", ",", "(", ")", ")", "\n", "self", ".", "assertEqual", "(", "state2", ".", "shape", ",", "(", "2", ",", "2", ")", ")", "\n", "return", "state1", ".", "pow", "(", "2", ")", ".", "mean", "(", ")", ".", "sqrt", "(", ")", "\n", "", "x0", "=", "(", "torch", ".", "tensor", "(", "1.", ")", ",", "torch", ".", "tensor", "(", "[", "[", "0.5", ",", "0.5", "]", ",", "[", "0.1", ",", "0.1", "]", "]", ")", ")", "\n", "torchdiffeq", ".", "odeint", "(", "f", ",", "x0", ",", "t", ",", "options", "=", "dict", "(", "norm", "=", "norm", ")", ")", "\n", "self", ".", "assertTrue", "(", "is_called", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.tests.norm_tests.TestNorms.test_adjoint_norm": [[91, 243], ["torch.tensor", "torch.tensor", "torchdiffeq.odeint_adjoint", "torchdiffeq.odeint_adjoint.sum().backward", "norm_tests.TestNorms.assertTrue", "torchdiffeq.odeint_adjoint", "xs[].sum().backward", "norm_tests.TestNorms.assertTrue", "torch.rand", "torch.rand", "norm_tests.TestNorms.assertIsInstance", "norm_tests.TestNorms.assertEqual", "norm_tests.TestNorms.assertEqual", "norm_tests.TestNorms.assertEqual", "norm_tests.TestNorms.assertEqual", "norm_tests.TestNorms.assertEqual", "max", "norm_tests.TestNorms.assertIsInstance", "norm_tests.TestNorms.assertEqual", "norm_tests.TestNorms.assertEqual", "norm_tests.TestNorms.assertEqual", "norm_tests.TestNorms.assertEqual", "norm_tests.TestNorms.assertEqual", "norm_tests.TestNorms.assertEqual", "norm_tests.TestNorms.assertEqual", "max", "torch.tensor", "torch.tensor", "norm_tests.TestNorms.test_adjoint_norm.adjoint_norm"], "methods", ["home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.adjoint.odeint_adjoint", "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.misc._StitchGradient.backward", "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.adjoint.odeint_adjoint", "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.misc._StitchGradient.backward"], ["", "def", "test_adjoint_norm", "(", "self", ")", ":", "\n", "        ", "def", "f", "(", "t", ",", "x", ")", ":", "\n", "            ", "return", "x", "\n", "", "t", "=", "torch", ".", "tensor", "(", "[", "0.", ",", "1.", "]", ")", "\n", "adjoint_params", "=", "(", "torch", ".", "rand", "(", "7", ",", "requires_grad", "=", "True", ")", ",", "torch", ".", "rand", "(", "(", ")", ",", "requires_grad", "=", "True", ")", ")", "\n", "\n", "def", "make_spy_on_adjoint_norm", "(", "adjoint_norm", ",", "actual_norm", ")", ":", "\n", "            ", "is_spy_called", "=", "[", "False", "]", "\n", "\n", "def", "spy_on_adjoint_norm", "(", "tensor", ")", ":", "\n", "                ", "nonlocal", "is_spy_called", "\n", "is_spy_called", "[", "0", "]", "=", "True", "\n", "norm_result", "=", "adjoint_norm", "(", "tensor", ")", "\n", "true_norm_result", "=", "actual_norm", "(", "tensor", ")", "\n", "self", ".", "assertIsInstance", "(", "norm_result", ",", "torch", ".", "Tensor", ")", "\n", "self", ".", "assertEqual", "(", "norm_result", ".", "shape", ",", "true_norm_result", ".", "shape", ")", "\n", "self", ".", "assertLess", "(", "(", "norm_result", "-", "true_norm_result", ")", ".", "abs", "(", ")", ".", "max", "(", ")", ",", "1e-6", ")", "\n", "return", "norm_result", "\n", "\n", "", "return", "spy_on_adjoint_norm", ",", "is_spy_called", "\n", "\n", "# Test the various auto-constructed adjoint norms with tensor (not tuple) state", "\n", "", "for", "shape", "in", "(", "(", ")", ",", "(", "1", ",", ")", ",", "(", "2", ",", "2", ")", ")", ":", "\n", "            ", "for", "use_adjoint_options", ",", "seminorm", "in", "(", "(", "False", ",", "False", ")", ",", "(", "True", ",", "False", ")", ",", "(", "True", ",", "True", ")", ")", ":", "\n", "                ", "with", "self", ".", "subTest", "(", "shape", "=", "shape", ",", "use_adjoint_options", "=", "use_adjoint_options", ",", "seminorm", "=", "seminorm", ")", ":", "\n", "                    ", "x0", "=", "torch", ".", "full", "(", "shape", ",", "1.", ")", "\n", "if", "use_adjoint_options", ":", "\n", "                        ", "if", "seminorm", ":", "\n", "# Test passing adjoint_options and wanting the seminorm", "\n", "                            ", "kwargs", "=", "dict", "(", "adjoint_options", "=", "dict", "(", "norm", "=", "'seminorm'", ")", ")", "\n", "", "else", ":", "\n", "# Test passing adjoint_options but not specify the adjoint norm", "\n", "                            ", "kwargs", "=", "dict", "(", "adjoint_options", "=", "{", "}", ")", "\n", "", "", "else", ":", "\n", "# Test not passing adjoint_options at all.", "\n", "                        ", "kwargs", "=", "{", "}", "\n", "", "xs", "=", "torchdiffeq", ".", "odeint_adjoint", "(", "f", ",", "x0", ",", "t", ",", "adjoint_params", "=", "adjoint_params", ",", "**", "kwargs", ")", "\n", "_adjoint_norm", "=", "xs", ".", "grad_fn", ".", "adjoint_options", "[", "'norm'", "]", "\n", "\n", "is_called", "=", "False", "\n", "\n", "def", "actual_norm", "(", "tensor_tuple", ")", ":", "\n", "                        ", "nonlocal", "is_called", "\n", "is_called", "=", "True", "\n", "self", ".", "assertIsInstance", "(", "tensor_tuple", ",", "tuple", ")", "\n", "t", ",", "y", ",", "adj_y", ",", "adj_param1", ",", "adj_param2", "=", "tensor_tuple", "\n", "self", ".", "assertEqual", "(", "t", ".", "shape", ",", "(", ")", ")", "\n", "self", ".", "assertEqual", "(", "y", ".", "shape", ",", "shape", ")", "\n", "self", ".", "assertEqual", "(", "adj_y", ".", "shape", ",", "shape", ")", "\n", "self", ".", "assertEqual", "(", "adj_param1", ".", "shape", ",", "(", "7", ",", ")", ")", "\n", "self", ".", "assertEqual", "(", "adj_param2", ".", "shape", ",", "(", "(", ")", ")", ")", "\n", "out", "=", "max", "(", "t", ".", "abs", "(", ")", ",", "y", ".", "pow", "(", "2", ")", ".", "mean", "(", ")", ".", "sqrt", "(", ")", ",", "adj_y", ".", "pow", "(", "2", ")", ".", "mean", "(", ")", ".", "sqrt", "(", ")", ")", "\n", "if", "not", "seminorm", ":", "\n", "                            ", "out", "=", "max", "(", "out", ",", "adj_param1", ".", "pow", "(", "2", ")", ".", "mean", "(", ")", ".", "sqrt", "(", ")", ",", "adj_param2", ".", "abs", "(", ")", ")", "\n", "", "return", "out", "\n", "\n", "", "xs", ".", "grad_fn", ".", "adjoint_options", "[", "'norm'", "]", ",", "is_spy_called", "=", "make_spy_on_adjoint_norm", "(", "_adjoint_norm", ",", "\n", "actual_norm", ")", "\n", "xs", ".", "sum", "(", ")", ".", "backward", "(", ")", "\n", "self", ".", "assertTrue", "(", "is_called", ")", "\n", "self", ".", "assertTrue", "(", "is_spy_called", "[", "0", "]", ")", "\n", "\n", "# Test the various auto-constructed adjoint norms with tuple (not tensor) state", "\n", "", "", "", "for", "use_adjoint_options", ",", "seminorm", "in", "(", "(", "False", ",", "False", ")", ",", "(", "True", ",", "False", ")", ",", "(", "True", ",", "True", ")", ")", ":", "\n", "            ", "with", "self", ".", "subTest", "(", "shape", "=", "shape", ",", "use_adjoint_options", "=", "use_adjoint_options", ",", "seminorm", "=", "seminorm", ")", ":", "\n", "                ", "x0", "=", "torch", ".", "tensor", "(", "1.", ")", ",", "torch", ".", "tensor", "(", "[", "[", "0.5", ",", "0.5", "]", ",", "[", "0.1", ",", "0.1", "]", "]", ")", "\n", "if", "use_adjoint_options", ":", "\n", "                    ", "if", "seminorm", ":", "\n", "# Test passing adjoint_options and wanting the seminorm", "\n", "                        ", "kwargs", "=", "dict", "(", "adjoint_options", "=", "dict", "(", "norm", "=", "'seminorm'", ")", ")", "\n", "", "else", ":", "\n", "# Test passing adjoint_options but not specify the adjoint norm", "\n", "                        ", "kwargs", "=", "dict", "(", "adjoint_options", "=", "{", "}", ")", "\n", "", "", "else", ":", "\n", "# Test not passing adjoint_options at all.", "\n", "                    ", "kwargs", "=", "{", "}", "\n", "", "xs", "=", "torchdiffeq", ".", "odeint_adjoint", "(", "f", ",", "x0", ",", "t", ",", "adjoint_params", "=", "adjoint_params", ",", "**", "kwargs", ")", "\n", "adjoint_options_dict", "=", "xs", "[", "0", "]", ".", "grad_fn", ".", "next_functions", "[", "0", "]", "[", "0", "]", ".", "next_functions", "[", "0", "]", "[", "0", "]", ".", "adjoint_options", "\n", "_adjoint_norm", "=", "adjoint_options_dict", "[", "'norm'", "]", "\n", "\n", "is_called", "=", "False", "\n", "\n", "def", "actual_norm", "(", "tensor_tuple", ")", ":", "\n", "                    ", "nonlocal", "is_called", "\n", "is_called", "=", "True", "\n", "self", ".", "assertIsInstance", "(", "tensor_tuple", ",", "tuple", ")", "\n", "t", ",", "y", ",", "adj_y", ",", "adj_param1", ",", "adj_param2", "=", "tensor_tuple", "\n", "self", ".", "assertEqual", "(", "t", ".", "shape", ",", "(", ")", ")", "\n", "self", ".", "assertEqual", "(", "y", ".", "shape", ",", "(", "5", ",", ")", ")", "\n", "self", ".", "assertEqual", "(", "adj_y", ".", "shape", ",", "(", "5", ",", ")", ")", "\n", "self", ".", "assertEqual", "(", "adj_param1", ".", "shape", ",", "(", "7", ",", ")", ")", "\n", "self", ".", "assertEqual", "(", "adj_param2", ".", "shape", ",", "(", ")", ")", "\n", "ya", "=", "y", "[", "0", "]", "\n", "yb", "=", "y", "[", "1", ":", "]", "\n", "adj_ya", "=", "adj_y", "[", "0", "]", "\n", "adj_yb", "=", "adj_y", "[", "1", ":", "4", "]", "\n", "out", "=", "max", "(", "t", ".", "abs", "(", ")", ",", "ya", ".", "abs", "(", ")", ",", "yb", ".", "pow", "(", "2", ")", ".", "mean", "(", ")", ".", "sqrt", "(", ")", ",", "adj_ya", ".", "abs", "(", ")", ",", "adj_yb", ".", "pow", "(", "2", ")", ".", "mean", "(", ")", ".", "sqrt", "(", ")", ")", "\n", "if", "not", "seminorm", ":", "\n", "                        ", "out", "=", "max", "(", "out", ",", "adj_param1", ".", "pow", "(", "2", ")", ".", "mean", "(", ")", ".", "sqrt", "(", ")", ",", "adj_param2", ".", "abs", "(", ")", ")", "\n", "", "return", "out", "\n", "\n", "", "spy_on_adjoint_norm", ",", "is_spy_called", "=", "make_spy_on_adjoint_norm", "(", "_adjoint_norm", ",", "actual_norm", ")", "\n", "adjoint_options_dict", "[", "'norm'", "]", "=", "spy_on_adjoint_norm", "\n", "xs", "[", "0", "]", ".", "sum", "(", ")", ".", "backward", "(", ")", "\n", "self", ".", "assertTrue", "(", "is_called", ")", "\n", "self", ".", "assertTrue", "(", "is_spy_called", "[", "0", "]", ")", "\n", "\n", "# Test user-passed adjoint norms with tensor (not tuple) state", "\n", "", "", "is_called", "=", "False", "\n", "\n", "def", "adjoint_norm", "(", "tensor_tuple", ")", ":", "\n", "            ", "nonlocal", "is_called", "\n", "is_called", "=", "True", "\n", "self", ".", "assertIsInstance", "(", "tensor_tuple", ",", "tuple", ")", "\n", "t", ",", "y", ",", "adj_y", ",", "adj_param1", ",", "adj_param2", "=", "tensor_tuple", "\n", "self", ".", "assertEqual", "(", "t", ".", "shape", ",", "(", ")", ")", "\n", "self", ".", "assertEqual", "(", "y", ".", "shape", ",", "(", ")", ")", "\n", "self", ".", "assertEqual", "(", "adj_y", ".", "shape", ",", "(", ")", ")", "\n", "self", ".", "assertEqual", "(", "adj_param1", ".", "shape", ",", "(", "7", ",", ")", ")", "\n", "self", ".", "assertEqual", "(", "adj_param2", ".", "shape", ",", "(", ")", ")", "\n", "return", "max", "(", "t", ".", "abs", "(", ")", ",", "y", ".", "pow", "(", "2", ")", ".", "mean", "(", ")", ".", "sqrt", "(", ")", ",", "adj_y", ".", "pow", "(", "2", ")", ".", "mean", "(", ")", ".", "sqrt", "(", ")", ",", "adj_param1", ".", "pow", "(", "2", ")", ".", "mean", "(", ")", ".", "sqrt", "(", ")", ",", "\n", "adj_param2", ".", "abs", "(", ")", ")", "\n", "\n", "", "x0", "=", "torch", ".", "tensor", "(", "1.", ")", "\n", "xs", "=", "torchdiffeq", ".", "odeint_adjoint", "(", "f", ",", "x0", ",", "t", ",", "adjoint_params", "=", "adjoint_params", ",", "\n", "adjoint_options", "=", "dict", "(", "norm", "=", "adjoint_norm", ")", ")", "\n", "xs", ".", "sum", "(", ")", ".", "backward", "(", ")", "\n", "self", ".", "assertTrue", "(", "is_called", ")", "\n", "\n", "# Test user-passed adjoint norms with tuple (not tensor) state", "\n", "is_called", "=", "False", "\n", "\n", "def", "adjoint_norm", "(", "tensor_tuple", ")", ":", "\n", "            ", "nonlocal", "is_called", "\n", "is_called", "=", "True", "\n", "self", ".", "assertIsInstance", "(", "tensor_tuple", ",", "tuple", ")", "\n", "t", ",", "ya", ",", "yb", ",", "adj_ya", ",", "adj_yb", ",", "adj_param1", ",", "adj_param2", "=", "tensor_tuple", "\n", "self", ".", "assertEqual", "(", "t", ".", "shape", ",", "(", ")", ")", "\n", "self", ".", "assertEqual", "(", "ya", ".", "shape", ",", "(", ")", ")", "\n", "self", ".", "assertEqual", "(", "yb", ".", "shape", ",", "(", "2", ",", "2", ")", ")", "\n", "self", ".", "assertEqual", "(", "adj_ya", ".", "shape", ",", "(", ")", ")", "\n", "self", ".", "assertEqual", "(", "adj_yb", ".", "shape", ",", "(", "2", ",", "2", ")", ")", "\n", "self", ".", "assertEqual", "(", "adj_param1", ".", "shape", ",", "(", "7", ",", ")", ")", "\n", "self", ".", "assertEqual", "(", "adj_param2", ".", "shape", ",", "(", ")", ")", "\n", "return", "max", "(", "t", ".", "abs", "(", ")", ",", "ya", ".", "abs", "(", ")", ",", "yb", ".", "pow", "(", "2", ")", ".", "mean", "(", ")", ".", "sqrt", "(", ")", ",", "adj_ya", ".", "abs", "(", ")", ",", "adj_yb", ".", "pow", "(", "2", ")", ".", "mean", "(", ")", ".", "sqrt", "(", ")", ",", "\n", "adj_param1", ".", "pow", "(", "2", ")", ".", "mean", "(", ")", ".", "sqrt", "(", ")", ",", "adj_param2", ".", "abs", "(", ")", ")", "\n", "\n", "", "x0", "=", "torch", ".", "tensor", "(", "1.", ")", ",", "torch", ".", "tensor", "(", "[", "[", "0.5", ",", "0.5", "]", ",", "[", "0.1", ",", "0.1", "]", "]", ")", "\n", "xs", "=", "torchdiffeq", ".", "odeint_adjoint", "(", "f", ",", "x0", ",", "t", ",", "adjoint_params", "=", "adjoint_params", ",", "\n", "adjoint_options", "=", "dict", "(", "norm", "=", "adjoint_norm", ")", ")", "\n", "xs", "[", "0", "]", ".", "sum", "(", ")", ".", "backward", "(", ")", "\n", "self", ".", "assertTrue", "(", "is_called", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.tests.norm_tests.TestNorms.test_large_norm": [[244, 271], ["tensor.abs().max", "tensor.abs().max", "tensor.abs", "tensor.abs", "norm_tests.TestNorms.subTest", "torch.tensor", "torch.tensor", "_NeuralF().to", "torchdiffeq.odeint", "_NeuralF().to", "torchdiffeq.odeint", "norm_tests.TestNorms.assertLessEqual", "torch.no_grad", "zip", "norm_tests._NeuralF", "dict", "norm_tests._NeuralF", "_NeuralF().to.parameters", "_NeuralF().to.parameters", "large_norm_param.copy_", "dict"], "methods", ["home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.odeint.odeint", "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.odeint.odeint"], ["", "def", "test_large_norm", "(", "self", ")", ":", "\n", "\n", "        ", "def", "norm", "(", "tensor", ")", ":", "\n", "            ", "return", "tensor", ".", "abs", "(", ")", ".", "max", "(", ")", "\n", "\n", "", "def", "large_norm", "(", "tensor", ")", ":", "\n", "            ", "return", "10", "*", "tensor", ".", "abs", "(", ")", ".", "max", "(", ")", "\n", "\n", "", "for", "dtype", "in", "DTYPES", ":", "\n", "            ", "for", "device", "in", "DEVICES", ":", "\n", "                ", "for", "method", "in", "ADAPTIVE_METHODS", ":", "\n", "                    ", "if", "dtype", "==", "torch", ".", "float32", "and", "method", "==", "'dopri8'", ":", "\n", "                        ", "continue", "\n", "\n", "", "with", "self", ".", "subTest", "(", "dtype", "=", "dtype", ",", "device", "=", "device", ",", "method", "=", "method", ")", ":", "\n", "                        ", "x0", "=", "torch", ".", "tensor", "(", "[", "1.0", ",", "2.0", "]", ",", "device", "=", "device", ",", "dtype", "=", "dtype", ")", "\n", "t", "=", "torch", ".", "tensor", "(", "[", "0.", ",", "1.0", "]", ",", "device", "=", "device", ",", "dtype", "=", "dtype", ")", "\n", "\n", "norm_f", "=", "_NeuralF", "(", "width", "=", "10", ",", "oscillate", "=", "True", ")", ".", "to", "(", "device", ",", "dtype", ")", "\n", "torchdiffeq", ".", "odeint", "(", "norm_f", ",", "x0", ",", "t", ",", "method", "=", "method", ",", "options", "=", "dict", "(", "norm", "=", "norm", ")", ")", "\n", "large_norm_f", "=", "_NeuralF", "(", "width", "=", "10", ",", "oscillate", "=", "True", ")", ".", "to", "(", "device", ",", "dtype", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                            ", "for", "norm_param", ",", "large_norm_param", "in", "zip", "(", "norm_f", ".", "parameters", "(", ")", ",", "large_norm_f", ".", "parameters", "(", ")", ")", ":", "\n", "                                ", "large_norm_param", ".", "copy_", "(", "norm_param", ")", "\n", "", "", "torchdiffeq", ".", "odeint", "(", "large_norm_f", ",", "x0", ",", "t", ",", "method", "=", "method", ",", "options", "=", "dict", "(", "norm", "=", "large_norm", ")", ")", "\n", "\n", "self", ".", "assertLessEqual", "(", "norm_f", ".", "nfe", ",", "large_norm_f", ".", "nfe", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.tests.norm_tests.TestNorms.test_seminorm": [[272, 301], ["norm_tests.TestNorms.subTest", "torch.tensor", "torch.tensor", "_NeuralF().to", "torchdiffeq.odeint_adjoint", "torchdiffeq.odeint_adjoint.sum().backward", "torchdiffeq.odeint_adjoint", "torchdiffeq.odeint_adjoint.sum().backward", "norm_tests.TestNorms.assertLessEqual", "norm_tests._NeuralF", "torchdiffeq.odeint_adjoint.sum", "dict", "torchdiffeq.odeint_adjoint.sum"], "methods", ["home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.adjoint.odeint_adjoint", "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.misc._StitchGradient.backward", "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.adjoint.odeint_adjoint", "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.misc._StitchGradient.backward"], ["", "", "", "", "", "def", "test_seminorm", "(", "self", ")", ":", "\n", "        ", "for", "dtype", "in", "DTYPES", ":", "\n", "            ", "for", "device", "in", "DEVICES", ":", "\n", "                ", "for", "method", "in", "ADAPTIVE_METHODS", ":", "\n", "\n", "                    ", "with", "self", ".", "subTest", "(", "dtype", "=", "dtype", ",", "device", "=", "device", ",", "method", "=", "method", ")", ":", "\n", "\n", "                        ", "if", "dtype", "==", "torch", ".", "float32", ":", "\n", "                            ", "tol", "=", "1e-6", "\n", "", "else", ":", "\n", "                            ", "tol", "=", "1e-8", "\n", "\n", "", "x0", "=", "torch", ".", "tensor", "(", "[", "1.0", ",", "2.0", "]", ",", "device", "=", "device", ",", "dtype", "=", "dtype", ")", "\n", "t", "=", "torch", ".", "tensor", "(", "[", "0.", ",", "1.0", "]", ",", "device", "=", "device", ",", "dtype", "=", "dtype", ")", "\n", "\n", "ode_f", "=", "_NeuralF", "(", "width", "=", "1024", ",", "oscillate", "=", "True", ")", ".", "to", "(", "device", ",", "dtype", ")", "\n", "\n", "out", "=", "torchdiffeq", ".", "odeint_adjoint", "(", "ode_f", ",", "x0", ",", "t", ",", "atol", "=", "tol", ",", "rtol", "=", "tol", ",", "method", "=", "method", ")", "\n", "ode_f", ".", "nfe", "=", "0", "\n", "out", ".", "sum", "(", ")", ".", "backward", "(", ")", "\n", "default_nfe", "=", "ode_f", ".", "nfe", "\n", "\n", "out", "=", "torchdiffeq", ".", "odeint_adjoint", "(", "ode_f", ",", "x0", ",", "t", ",", "atol", "=", "tol", ",", "rtol", "=", "tol", ",", "method", "=", "method", ",", "\n", "adjoint_options", "=", "dict", "(", "norm", "=", "'seminorm'", ")", ")", "\n", "ode_f", ".", "nfe", "=", "0", "\n", "out", ".", "sum", "(", ")", ".", "backward", "(", ")", "\n", "seminorm_nfe", "=", "ode_f", ".", "nfe", "\n", "\n", "self", ".", "assertLessEqual", "(", "seminorm_nfe", ",", "default_nfe", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.tests.norm_tests.random_seed_torch": [[10, 19], ["torch.get_rng_state", "torch.manual_seed", "torch.set_rng_state"], "function", ["None"], ["@", "contextlib", ".", "contextmanager", "\n", "def", "random_seed_torch", "(", "seed", ")", ":", "\n", "    ", "cpu_rng_state", "=", "torch", ".", "get_rng_state", "(", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "\n", "try", ":", "\n", "        ", "yield", "\n", "", "finally", ":", "\n", "        ", "torch", ".", "set_rng_state", "(", "cpu_rng_state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.tests.api_tests.TestCollectionState.test_forward": [[12, 27], ["problems.construct_problem", "f", "f", "api_tests.TestCollectionState.subTest", "torchdiffeq.odeint", "api_tests.TestCollectionState.assertLess", "api_tests.TestCollectionState.assertLess"], "methods", ["home.repos.pwc.inspect_result.rtqichen_torchdiffeq.tests.problems.construct_problem", "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.odeint.odeint"], ["    ", "def", "test_forward", "(", "self", ")", ":", "\n", "        ", "for", "dtype", "in", "DTYPES", ":", "\n", "            ", "eps", "=", "EPS", "[", "dtype", "]", "\n", "for", "device", "in", "DEVICES", ":", "\n", "                ", "f", ",", "y0", ",", "t_points", ",", "sol", "=", "construct_problem", "(", "dtype", "=", "dtype", ",", "device", "=", "device", ")", "\n", "tuple_f", "=", "lambda", "t", ",", "y", ":", "(", "f", "(", "t", ",", "y", "[", "0", "]", ")", ",", "f", "(", "t", ",", "y", "[", "1", "]", ")", ")", "\n", "tuple_y0", "=", "(", "y0", ",", "y0", ")", "\n", "for", "method", "in", "ADAPTIVE_METHODS", ":", "\n", "\n", "                    ", "with", "self", ".", "subTest", "(", "dtype", "=", "dtype", ",", "device", "=", "device", ",", "method", "=", "method", ")", ":", "\n", "                        ", "tuple_y", "=", "torchdiffeq", ".", "odeint", "(", "tuple_f", ",", "tuple_y0", ",", "t_points", ",", "method", "=", "method", ")", "\n", "max_error0", "=", "(", "sol", "-", "tuple_y", "[", "0", "]", ")", ".", "max", "(", ")", "\n", "max_error1", "=", "(", "sol", "-", "tuple_y", "[", "1", "]", ")", ".", "max", "(", ")", "\n", "self", ".", "assertLess", "(", "max_error0", ",", "eps", ")", "\n", "self", ".", "assertLess", "(", "max_error1", ",", "eps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.tests.api_tests.TestCollectionState.test_gradient": [[28, 40], ["problems.construct_problem", "f", "f", "api_tests.TestCollectionState.subTest", "range", "api_tests.TestCollectionState.assertTrue", "torch.autograd.gradcheck", "torchdiffeq.odeint"], "methods", ["home.repos.pwc.inspect_result.rtqichen_torchdiffeq.tests.problems.construct_problem", "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.examples.bouncing_ball.gradcheck", "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.odeint.odeint"], ["", "", "", "", "", "def", "test_gradient", "(", "self", ")", ":", "\n", "        ", "for", "device", "in", "DEVICES", ":", "\n", "            ", "f", ",", "y0", ",", "t_points", ",", "sol", "=", "construct_problem", "(", "device", "=", "device", ")", "\n", "tuple_f", "=", "lambda", "t", ",", "y", ":", "(", "f", "(", "t", ",", "y", "[", "0", "]", ")", ",", "f", "(", "t", ",", "y", "[", "1", "]", ")", ")", "\n", "for", "method", "in", "ADAPTIVE_METHODS", ":", "\n", "                ", "if", "method", "==", "\"scipy_solver\"", ":", "\n", "                    ", "continue", "\n", "\n", "", "with", "self", ".", "subTest", "(", "device", "=", "device", ",", "method", "=", "method", ")", ":", "\n", "                    ", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "                        ", "func", "=", "lambda", "y0", ",", "t_points", ":", "torchdiffeq", ".", "odeint", "(", "tuple_f", ",", "(", "y0", ",", "y0", ")", ",", "t_points", ",", "method", "=", "method", ")", "[", "i", "]", "\n", "self", ".", "assertTrue", "(", "torch", ".", "autograd", ".", "gradcheck", "(", "func", ",", "(", "y0", ",", "t_points", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.tests.problems.ConstantODE.__init__": [[9, 13], ["super().__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.misc._PerturbFunc.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "ConstantODE", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "a", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "tensor", "(", "0.2", ")", ")", "\n", "self", ".", "b", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "tensor", "(", "3.0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.tests.problems.ConstantODE.forward": [[14, 16], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "t", ",", "y", ")", ":", "\n", "        ", "return", "self", ".", "a", "+", "(", "y", "-", "(", "self", ".", "a", "*", "t", "+", "self", ".", "b", ")", ")", "**", "5", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.tests.problems.ConstantODE.y_exact": [[17, 19], ["None"], "methods", ["None"], ["", "def", "y_exact", "(", "self", ",", "t", ")", ":", "\n", "        ", "return", "self", ".", "a", "*", "t", "+", "self", ".", "b", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.tests.problems.SineODE.forward": [[22, 24], ["torch.sin"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "t", ",", "y", ")", ":", "\n", "        ", "return", "2", "*", "y", "/", "t", "+", "t", "**", "4", "*", "torch", ".", "sin", "(", "2", "*", "t", ")", "-", "t", "**", "2", "+", "4", "*", "t", "**", "3", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.tests.problems.SineODE.y_exact": [[25, 29], ["torch.cos", "torch.cos", "torch.sin"], "methods", ["None"], ["", "def", "y_exact", "(", "self", ",", "t", ")", ":", "\n", "        ", "return", "-", "0.5", "*", "t", "**", "4", "*", "torch", ".", "cos", "(", "2", "*", "t", ")", "+", "0.5", "*", "t", "**", "3", "*", "torch", ".", "sin", "(", "2", "*", "t", ")", "+", "0.25", "*", "t", "**", "2", "*", "torch", ".", "cos", "(", "\n", "2", "*", "t", "\n", ")", "-", "t", "**", "3", "+", "2", "*", "t", "**", "4", "+", "(", "math", ".", "pi", "-", "0.25", ")", "*", "t", "**", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.tests.problems.LinearODE.__init__": [[33, 41], ["super().__init__", "torch.manual_seed", "torch.nn.Parameter", "numpy.ones", "torch.randn", "U.transpose"], "methods", ["home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.misc._PerturbFunc.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", "=", "10", ")", ":", "\n", "        ", "super", "(", "LinearODE", ",", "self", ")", ".", "__init__", "(", ")", "\n", "torch", ".", "manual_seed", "(", "0", ")", "\n", "self", ".", "dim", "=", "dim", "\n", "U", "=", "torch", ".", "randn", "(", "dim", ",", "dim", ")", "*", "0.1", "\n", "A", "=", "2", "*", "U", "-", "(", "U", "+", "U", ".", "transpose", "(", "0", ",", "1", ")", ")", "\n", "self", ".", "A", "=", "torch", ".", "nn", ".", "Parameter", "(", "A", ")", "\n", "self", ".", "initial_val", "=", "np", ".", "ones", "(", "(", "dim", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.tests.problems.LinearODE.forward": [[42, 44], ["torch.mm().reshape", "torch.mm", "y.reshape"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "t", ",", "y", ")", ":", "\n", "        ", "return", "torch", ".", "mm", "(", "self", ".", "A", ",", "y", ".", "reshape", "(", "self", ".", "dim", ",", "1", ")", ")", ".", "reshape", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.tests.problems.LinearODE.y_exact": [[45, 52], ["t.detach().cpu().numpy", "problems.LinearODE.A.detach().cpu().numpy", "torch.stack().reshape().to", "ans.append", "t.detach().cpu", "problems.LinearODE.A.detach().cpu", "numpy.matmul", "torch.stack().reshape", "scipy.linalg.expm", "len", "t.detach", "problems.LinearODE.A.detach", "torch.stack", "torch.tensor"], "methods", ["None"], ["", "def", "y_exact", "(", "self", ",", "t", ")", ":", "\n", "        ", "t_numpy", "=", "t", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "A_np", "=", "self", ".", "A", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "ans", "=", "[", "]", "\n", "for", "t_i", "in", "t_numpy", ":", "\n", "            ", "ans", ".", "append", "(", "np", ".", "matmul", "(", "scipy", ".", "linalg", ".", "expm", "(", "A_np", "*", "t_i", ")", ",", "self", ".", "initial_val", ")", ")", "\n", "", "return", "torch", ".", "stack", "(", "[", "torch", ".", "tensor", "(", "ans_", ")", "for", "ans_", "in", "ans", "]", ")", ".", "reshape", "(", "len", "(", "t_numpy", ")", ",", "self", ".", "dim", ")", ".", "to", "(", "t", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.tests.problems.construct_problem": [[66, 83], ["torch.linspace", "f.y_exact", "torch.arange", "_flip().clone().detach", "_flip().clone().detach", "sol[].detach().requires_grad_", "x.dim", "slice", "x.size", "tuple", "_flip().clone", "_flip().clone", "sol[].detach", "problems.construct_problem._flip"], "function", ["home.repos.pwc.inspect_result.rtqichen_torchdiffeq.tests.problems.LinearODE.y_exact"], ["def", "construct_problem", "(", "device", ",", "npts", "=", "10", ",", "ode", "=", "'constant'", ",", "reverse", "=", "False", ",", "dtype", "=", "torch", ".", "float64", ")", ":", "\n", "\n", "    ", "f", "=", "PROBLEMS", "[", "ode", "]", "(", ")", ".", "to", "(", "dtype", "=", "dtype", ",", "device", "=", "device", ")", "\n", "\n", "t_points", "=", "torch", ".", "linspace", "(", "1", ",", "8", ",", "npts", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ",", "requires_grad", "=", "True", ")", "\n", "sol", "=", "f", ".", "y_exact", "(", "t_points", ")", "\n", "\n", "def", "_flip", "(", "x", ",", "dim", ")", ":", "\n", "        ", "indices", "=", "[", "slice", "(", "None", ")", "]", "*", "x", ".", "dim", "(", ")", "\n", "indices", "[", "dim", "]", "=", "torch", ".", "arange", "(", "x", ".", "size", "(", "dim", ")", "-", "1", ",", "-", "1", ",", "-", "1", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "device", ")", "\n", "return", "x", "[", "tuple", "(", "indices", ")", "]", "\n", "\n", "", "if", "reverse", ":", "\n", "        ", "t_points", "=", "_flip", "(", "t_points", ",", "0", ")", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "sol", "=", "_flip", "(", "sol", ",", "0", ")", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "\n", "", "return", "f", ",", "sol", "[", "0", "]", ".", "detach", "(", ")", ".", "requires_grad_", "(", "True", ")", ",", "t_points", ",", "sol", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.tests.event_tests.TestEventHandling.test_odeint": [[14, 48], ["event_tests.TestEventHandling.subTest", "problems.construct_problem", "torchdiffeq.odeint", "event_tests.TestEventHandling.assertLess", "event_tests.TestEventHandling.assertLess", "torch.sum", "event_tests.rel_error", "event_tests.rel_error"], "methods", ["home.repos.pwc.inspect_result.rtqichen_torchdiffeq.tests.problems.construct_problem", "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.odeint.odeint", "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.tests.odeint_tests.rel_error", "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.tests.odeint_tests.rel_error"], ["    ", "def", "test_odeint", "(", "self", ")", ":", "\n", "        ", "for", "reverse", "in", "(", "False", ",", "True", ")", ":", "\n", "            ", "for", "dtype", "in", "DTYPES", ":", "\n", "                ", "for", "device", "in", "DEVICES", ":", "\n", "                    ", "for", "method", "in", "METHODS", ":", "\n", "\n", "# TODO: remove after event handling gets enabled.", "\n", "                        ", "if", "method", "==", "'scipy_solver'", ":", "\n", "                            ", "continue", "\n", "\n", "", "for", "ode", "in", "(", "\"constant\"", ",", "\"sine\"", ")", ":", "\n", "                            ", "with", "self", ".", "subTest", "(", "reverse", "=", "reverse", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ",", "ode", "=", "ode", ",", "method", "=", "method", ")", ":", "\n", "                                ", "if", "method", "==", "\"explicit_adams\"", ":", "\n", "                                    ", "tol", "=", "7e-2", "\n", "", "elif", "method", "==", "\"euler\"", ":", "\n", "                                    ", "tol", "=", "5e-3", "\n", "", "else", ":", "\n", "                                    ", "tol", "=", "1e-4", "\n", "\n", "", "f", ",", "y0", ",", "t_points", ",", "sol", "=", "construct_problem", "(", "dtype", "=", "dtype", ",", "device", "=", "device", ",", "ode", "=", "ode", ",", "\n", "reverse", "=", "reverse", ")", "\n", "\n", "def", "event_fn", "(", "t", ",", "y", ")", ":", "\n", "                                    ", "return", "torch", ".", "sum", "(", "y", "-", "sol", "[", "2", "]", ")", "\n", "\n", "", "if", "method", "in", "FIXED_METHODS", ":", "\n", "                                    ", "options", "=", "{", "\"step_size\"", ":", "0.01", ",", "\"interp\"", ":", "\"cubic\"", "}", "\n", "", "else", ":", "\n", "                                    ", "options", "=", "{", "}", "\n", "\n", "", "t", ",", "y", "=", "torchdiffeq", ".", "odeint", "(", "f", ",", "y0", ",", "t_points", "[", "0", ":", "2", "]", ",", "event_fn", "=", "event_fn", ",", "method", "=", "method", ",", "options", "=", "options", ")", "\n", "y", "=", "y", "[", "-", "1", "]", "\n", "self", ".", "assertLess", "(", "rel_error", "(", "sol", "[", "2", "]", ",", "y", ")", ",", "tol", ")", "\n", "self", ".", "assertLess", "(", "rel_error", "(", "t_points", "[", "2", "]", ",", "t", ")", ",", "tol", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.tests.event_tests.TestEventHandling.test_adjoint": [[49, 63], ["problems.construct_problem", "torchdiffeq.odeint_adjoint", "event_tests.TestEventHandling.assertLess", "event_tests.TestEventHandling.assertLess", "t.backward", "y.sum().backward", "torch.sum", "event_tests.rel_error", "event_tests.rel_error", "y.sum"], "methods", ["home.repos.pwc.inspect_result.rtqichen_torchdiffeq.tests.problems.construct_problem", "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.adjoint.odeint_adjoint", "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.misc._StitchGradient.backward", "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.misc._StitchGradient.backward", "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.tests.odeint_tests.rel_error", "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.tests.odeint_tests.rel_error"], ["", "", "", "", "", "", "", "def", "test_adjoint", "(", "self", ")", ":", "\n", "        ", "f", ",", "y0", ",", "t_points", ",", "sol", "=", "construct_problem", "(", "device", "=", "\"cpu\"", ",", "ode", "=", "\"constant\"", ")", "\n", "\n", "def", "event_fn", "(", "t", ",", "y", ")", ":", "\n", "            ", "return", "torch", ".", "sum", "(", "y", "-", "sol", "[", "-", "1", "]", ")", "\n", "\n", "", "t", ",", "y", "=", "torchdiffeq", ".", "odeint_adjoint", "(", "f", ",", "y0", ",", "t_points", "[", "0", ":", "2", "]", ",", "event_fn", "=", "event_fn", ",", "method", "=", "\"dopri5\"", ")", "\n", "y", "=", "y", "[", "-", "1", "]", "\n", "self", ".", "assertLess", "(", "rel_error", "(", "sol", "[", "-", "1", "]", ",", "y", ")", ",", "1e-4", ")", "\n", "self", ".", "assertLess", "(", "rel_error", "(", "t_points", "[", "-", "1", "]", ",", "t", ")", ",", "1e-4", ")", "\n", "\n", "# Make sure adjoint mode backward code can still be run.", "\n", "t", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "y", ".", "sum", "(", ")", ".", "backward", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.tests.event_tests.rel_error": [[8, 10], ["None"], "function", ["None"], ["def", "rel_error", "(", "true", ",", "estimate", ")", ":", "\n", "    ", "return", "(", "(", "true", "-", "estimate", ")", "/", "true", ")", ".", "abs", "(", ")", ".", "max", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.tests.gradient_tests.TestGradient.test_odeint": [[13, 24], ["gradient_tests.TestGradient.subTest", "problems.construct_problem", "gradient_tests.TestGradient.assertTrue", "torchdiffeq.odeint", "torch.autograd.gradcheck"], "methods", ["home.repos.pwc.inspect_result.rtqichen_torchdiffeq.tests.problems.construct_problem", "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.odeint.odeint", "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.examples.bouncing_ball.gradcheck"], ["    ", "def", "test_odeint", "(", "self", ")", ":", "\n", "        ", "for", "device", "in", "DEVICES", ":", "\n", "            ", "for", "method", "in", "METHODS", ":", "\n", "\n", "                ", "if", "method", "==", "'scipy_solver'", ":", "\n", "                    ", "continue", "\n", "\n", "", "with", "self", ".", "subTest", "(", "device", "=", "device", ",", "method", "=", "method", ")", ":", "\n", "                    ", "f", ",", "y0", ",", "t_points", ",", "_", "=", "construct_problem", "(", "device", "=", "device", ")", "\n", "func", "=", "lambda", "y0", ",", "t_points", ":", "torchdiffeq", ".", "odeint", "(", "f", ",", "y0", ",", "t_points", ",", "method", "=", "method", ")", "\n", "self", ".", "assertTrue", "(", "torch", ".", "autograd", ".", "gradcheck", "(", "func", ",", "(", "y0", ",", "t_points", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.tests.gradient_tests.TestGradient.test_adjoint": [[25, 33], ["gradient_tests.TestGradient.subTest", "problems.construct_problem", "gradient_tests.TestGradient.assertTrue", "torchdiffeq.odeint_adjoint", "torch.autograd.gradcheck"], "methods", ["home.repos.pwc.inspect_result.rtqichen_torchdiffeq.tests.problems.construct_problem", "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.adjoint.odeint_adjoint", "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.examples.bouncing_ball.gradcheck"], ["", "", "", "", "def", "test_adjoint", "(", "self", ")", ":", "\n", "        ", "for", "device", "in", "DEVICES", ":", "\n", "            ", "for", "method", "in", "METHODS", ":", "\n", "\n", "                ", "with", "self", ".", "subTest", "(", "device", "=", "device", ",", "method", "=", "method", ")", ":", "\n", "                    ", "f", ",", "y0", ",", "t_points", ",", "_", "=", "construct_problem", "(", "device", "=", "device", ")", "\n", "func", "=", "lambda", "y0", ",", "t_points", ":", "torchdiffeq", ".", "odeint_adjoint", "(", "f", ",", "y0", ",", "t_points", ",", "method", "=", "method", ")", "\n", "self", ".", "assertTrue", "(", "torch", ".", "autograd", ".", "gradcheck", "(", "func", ",", "(", "y0", ",", "t_points", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.tests.gradient_tests.TestGradient.test_adjoint_against_odeint": [[34, 85], ["gradient_tests.TestGradient.subTest", "problems.construct_problem", "t_points.requires_grad_", "torchdiffeq.odeint", "torch.manual_seed", "torch.rand_like", "torchdiffeq.odeint_adjoint.backward", "y0.grad.clone", "f.parameters", "y0.grad.zero_", "f.parameters", "torchdiffeq.odeint_adjoint", "torchdiffeq.odeint_adjoint.backward", "f.parameters", "gradient_tests.TestGradient.assertLess", "zip", "t_points.grad.clone", "reg_params_grads.append", "t_points.grad.zero_", "param.grad.zero_", "adj_params_grads.append", "gradient_tests.max_abs", "gradient_tests.TestGradient.assertLess", "gradient_tests.TestGradient.assertLess", "param.grad.clone", "gradient_tests.max_abs", "gradient_tests.max_abs"], "methods", ["home.repos.pwc.inspect_result.rtqichen_torchdiffeq.tests.problems.construct_problem", "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.odeint.odeint", "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.misc._StitchGradient.backward", "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.adjoint.odeint_adjoint", "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.misc._StitchGradient.backward", "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.tests.gradient_tests.max_abs", "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.tests.gradient_tests.max_abs", "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.tests.gradient_tests.max_abs"], ["", "", "", "", "def", "test_adjoint_against_odeint", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Test against dopri5\n        \"\"\"", "\n", "for", "device", "in", "DEVICES", ":", "\n", "            ", "for", "ode", "in", "PROBLEMS", ":", "\n", "                ", "for", "t_grad", "in", "(", "True", ",", "False", ")", ":", "\n", "                    ", "if", "ode", "==", "'constant'", ":", "\n", "                        ", "eps", "=", "1e-12", "\n", "", "elif", "ode", "==", "'linear'", ":", "\n", "                        ", "eps", "=", "1e-5", "\n", "", "elif", "ode", "==", "'sine'", ":", "\n", "                        ", "eps", "=", "5e-3", "\n", "", "else", ":", "\n", "                        ", "raise", "RuntimeError", "\n", "\n", "", "with", "self", ".", "subTest", "(", "device", "=", "device", ",", "ode", "=", "ode", ",", "t_grad", "=", "t_grad", ")", ":", "\n", "                        ", "f", ",", "y0", ",", "t_points", ",", "_", "=", "construct_problem", "(", "device", "=", "device", ",", "ode", "=", "ode", ")", "\n", "t_points", ".", "requires_grad_", "(", "t_grad", ")", "\n", "\n", "ys", "=", "torchdiffeq", ".", "odeint", "(", "f", ",", "y0", ",", "t_points", ",", "rtol", "=", "1e-9", ",", "atol", "=", "1e-12", ")", "\n", "torch", ".", "manual_seed", "(", "0", ")", "\n", "gradys", "=", "torch", ".", "rand_like", "(", "ys", ")", "\n", "ys", ".", "backward", "(", "gradys", ")", "\n", "\n", "reg_y0_grad", "=", "y0", ".", "grad", ".", "clone", "(", ")", "\n", "reg_t_grad", "=", "t_points", ".", "grad", ".", "clone", "(", ")", "if", "t_grad", "else", "None", "\n", "reg_params_grads", "=", "[", "]", "\n", "for", "param", "in", "f", ".", "parameters", "(", ")", ":", "\n", "                            ", "reg_params_grads", ".", "append", "(", "param", ".", "grad", ".", "clone", "(", ")", ")", "\n", "\n", "", "y0", ".", "grad", ".", "zero_", "(", ")", "\n", "if", "t_grad", ":", "\n", "                            ", "t_points", ".", "grad", ".", "zero_", "(", ")", "\n", "", "for", "param", "in", "f", ".", "parameters", "(", ")", ":", "\n", "                            ", "param", ".", "grad", ".", "zero_", "(", ")", "\n", "\n", "", "ys", "=", "torchdiffeq", ".", "odeint_adjoint", "(", "f", ",", "y0", ",", "t_points", ",", "rtol", "=", "1e-9", ",", "atol", "=", "1e-12", ")", "\n", "ys", ".", "backward", "(", "gradys", ")", "\n", "\n", "adj_y0_grad", "=", "y0", ".", "grad", "\n", "adj_t_grad", "=", "t_points", ".", "grad", "if", "t_grad", "else", "None", "\n", "adj_params_grads", "=", "[", "]", "\n", "for", "param", "in", "f", ".", "parameters", "(", ")", ":", "\n", "                            ", "adj_params_grads", ".", "append", "(", "param", ".", "grad", ")", "\n", "\n", "", "self", ".", "assertLess", "(", "max_abs", "(", "reg_y0_grad", "-", "adj_y0_grad", ")", ",", "eps", ")", "\n", "if", "t_grad", ":", "\n", "                            ", "self", ".", "assertLess", "(", "max_abs", "(", "reg_t_grad", "-", "adj_t_grad", ")", ",", "eps", ")", "\n", "", "for", "reg_grad", ",", "adj_grad", "in", "zip", "(", "reg_params_grads", ",", "adj_params_grads", ")", ":", "\n", "                            ", "self", ".", "assertLess", "(", "max_abs", "(", "reg_grad", "-", "adj_grad", ")", ",", "eps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.tests.gradient_tests.TestCompareAdjointGradient.problem": [[89, 103], ["torch.tensor", "torch.linspace", "Odefunc().to", "unittest.TestCase.__init__", "torch.nn.Parameter", "torch.nn.Linear", "torch.mm", "Odefunc", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.misc._PerturbFunc.__init__"], ["    ", "def", "problem", "(", "self", ",", "device", ")", ":", "\n", "        ", "class", "Odefunc", "(", "torch", ".", "nn", ".", "Module", ")", ":", "\n", "            ", "def", "__init__", "(", "self", ")", ":", "\n", "                ", "super", "(", "Odefunc", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "A", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "tensor", "(", "[", "[", "-", "0.1", ",", "2.0", "]", ",", "[", "-", "2.0", ",", "-", "0.1", "]", "]", ")", ")", "\n", "self", ".", "unused_module", "=", "torch", ".", "nn", ".", "Linear", "(", "2", ",", "5", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "t", ",", "y", ")", ":", "\n", "                ", "return", "torch", ".", "mm", "(", "y", "**", "3", ",", "self", ".", "A", ")", "\n", "\n", "", "", "y0", "=", "torch", ".", "tensor", "(", "[", "[", "2.", ",", "0.", "]", "]", ",", "device", "=", "device", ",", "requires_grad", "=", "True", ")", "\n", "t_points", "=", "torch", ".", "linspace", "(", "0.", ",", "25.", ",", "10", ",", "device", "=", "device", ",", "requires_grad", "=", "True", ")", "\n", "func", "=", "Odefunc", "(", ")", ".", "to", "(", "device", ")", "\n", "return", "func", ",", "y0", ",", "t_points", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.tests.gradient_tests.TestCompareAdjointGradient.test_against_dopri5": [[104, 135], ["method_eps.items", "gradient_tests.TestCompareAdjointGradient.subTest", "gradient_tests.TestCompareAdjointGradient.problem", "t_points.requires_grad_", "torchdiffeq.odeint_adjoint", "torchdiffeq.odeint.backward", "gradient_tests.TestCompareAdjointGradient.assertEqual", "gradient_tests.TestCompareAdjointGradient.assertEqual", "gradient_tests.TestCompareAdjointGradient.problem", "torchdiffeq.odeint", "torchdiffeq.odeint.backward", "gradient_tests.TestCompareAdjointGradient.assertLess", "gradient_tests.TestCompareAdjointGradient.assertLess", "torch.rand_like", "gradient_tests.max_abs", "gradient_tests.max_abs", "gradient_tests.max_abs", "gradient_tests.TestCompareAdjointGradient.assertLess", "gradient_tests.max_abs", "gradient_tests.max_abs"], "methods", ["home.repos.pwc.inspect_result.rtqichen_torchdiffeq.tests.gradient_tests.TestCompareAdjointGradient.problem", "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.adjoint.odeint_adjoint", "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.misc._StitchGradient.backward", "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.tests.gradient_tests.TestCompareAdjointGradient.problem", "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.odeint.odeint", "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.misc._StitchGradient.backward", "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.tests.gradient_tests.max_abs", "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.tests.gradient_tests.max_abs", "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.tests.gradient_tests.max_abs", "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.tests.gradient_tests.max_abs", "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.tests.gradient_tests.max_abs"], ["", "def", "test_against_dopri5", "(", "self", ")", ":", "\n", "# TODO: add in adaptive adams if/when it's fixed.", "\n", "        ", "method_eps", "=", "{", "\n", "'dopri5'", ":", "(", "3e-4", ",", "1e-4", ",", "2e-3", ")", ",", "\n", "'scipy_solver'", ":", "(", "3e-4", ",", "1e-4", ",", "2e-3", ")", ",", "\n", "}", "\n", "for", "device", "in", "DEVICES", ":", "\n", "            ", "for", "method", ",", "eps", "in", "method_eps", ".", "items", "(", ")", ":", "\n", "                ", "for", "t_grad", "in", "(", "True", ",", "False", ")", ":", "\n", "                    ", "with", "self", ".", "subTest", "(", "device", "=", "device", ",", "method", "=", "method", ")", ":", "\n", "                        ", "func", ",", "y0", ",", "t_points", "=", "self", ".", "problem", "(", "device", "=", "device", ")", "\n", "t_points", ".", "requires_grad_", "(", "t_grad", ")", "\n", "\n", "ys", "=", "torchdiffeq", ".", "odeint_adjoint", "(", "func", ",", "y0", ",", "t_points", ",", "method", "=", "method", ")", "\n", "gradys", "=", "torch", ".", "rand_like", "(", "ys", ")", "*", "0.1", "\n", "ys", ".", "backward", "(", "gradys", ")", "\n", "\n", "adj_y0_grad", "=", "y0", ".", "grad", "\n", "adj_t_grad", "=", "t_points", ".", "grad", "if", "t_grad", "else", "None", "\n", "adj_A_grad", "=", "func", ".", "A", ".", "grad", "\n", "self", ".", "assertEqual", "(", "max_abs", "(", "func", ".", "unused_module", ".", "weight", ".", "grad", ")", ",", "0", ")", "\n", "self", ".", "assertEqual", "(", "max_abs", "(", "func", ".", "unused_module", ".", "bias", ".", "grad", ")", ",", "0", ")", "\n", "\n", "func", ",", "y0", ",", "t_points", "=", "self", ".", "problem", "(", "device", "=", "device", ")", "\n", "ys", "=", "torchdiffeq", ".", "odeint", "(", "func", ",", "y0", ",", "t_points", ",", "method", "=", "'dopri5'", ")", "\n", "ys", ".", "backward", "(", "gradys", ")", "\n", "\n", "self", ".", "assertLess", "(", "max_abs", "(", "y0", ".", "grad", "-", "adj_y0_grad", ")", ",", "eps", "[", "0", "]", ")", "\n", "if", "t_grad", ":", "\n", "                            ", "self", ".", "assertLess", "(", "max_abs", "(", "t_points", ".", "grad", "-", "adj_t_grad", ")", ",", "eps", "[", "1", "]", ")", "\n", "", "self", ".", "assertLess", "(", "max_abs", "(", "func", ".", "A", ".", "grad", "-", "adj_A_grad", ")", ",", "eps", "[", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.tests.gradient_tests.max_abs": [[8, 10], ["torch.max", "torch.abs"], "function", ["None"], ["def", "max_abs", "(", "tensor", ")", ":", "\n", "    ", "return", "torch", ".", "max", "(", "torch", ".", "abs", "(", "tensor", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.tests.odeint_tests.TestSolverError.test_odeint": [[16, 43], ["dict", "dict", "dict", "odeint_tests.TestSolverError.subTest", "problems.construct_problem", "torchdiffeq.odeint", "odeint_tests.TestSolverError.assertLess", "odeint_tests.rel_error"], "methods", ["home.repos.pwc.inspect_result.rtqichen_torchdiffeq.tests.problems.construct_problem", "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.odeint.odeint", "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.tests.odeint_tests.rel_error"], ["    ", "def", "test_odeint", "(", "self", ")", ":", "\n", "        ", "for", "reverse", "in", "(", "False", ",", "True", ")", ":", "\n", "            ", "for", "dtype", "in", "DTYPES", ":", "\n", "                ", "for", "device", "in", "DEVICES", ":", "\n", "                    ", "for", "method", "in", "METHODS", ":", "\n", "\n", "                        ", "kwargs", "=", "dict", "(", ")", "\n", "# Have to increase tolerance for dopri8.", "\n", "if", "method", "==", "'dopri8'", "and", "dtype", "==", "torch", ".", "float64", ":", "\n", "                            ", "kwargs", "=", "dict", "(", "rtol", "=", "1e-12", ",", "atol", "=", "1e-14", ")", "\n", "", "if", "method", "==", "'dopri8'", "and", "dtype", "==", "torch", ".", "float32", ":", "\n", "                            ", "kwargs", "=", "dict", "(", "rtol", "=", "1e-7", ",", "atol", "=", "1e-7", ")", "\n", "\n", "", "problems", "=", "PROBLEMS", "if", "method", "in", "ADAPTIVE_METHODS", "else", "(", "'constant'", ",", ")", "\n", "for", "ode", "in", "problems", ":", "\n", "                            ", "if", "method", "in", "[", "'adaptive_heun'", ",", "'bosh3'", "]", ":", "\n", "                                ", "eps", "=", "4e-3", "\n", "", "elif", "ode", "==", "'linear'", ":", "\n", "                                ", "eps", "=", "2e-3", "\n", "", "else", ":", "\n", "                                ", "eps", "=", "3e-4", "\n", "\n", "", "with", "self", ".", "subTest", "(", "reverse", "=", "reverse", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ",", "ode", "=", "ode", ",", "method", "=", "method", ")", ":", "\n", "                                ", "f", ",", "y0", ",", "t_points", ",", "sol", "=", "construct_problem", "(", "dtype", "=", "dtype", ",", "device", "=", "device", ",", "ode", "=", "ode", ",", "\n", "reverse", "=", "reverse", ")", "\n", "y", "=", "torchdiffeq", ".", "odeint", "(", "f", ",", "y0", ",", "t_points", ",", "method", "=", "method", ",", "**", "kwargs", ")", "\n", "self", ".", "assertLess", "(", "rel_error", "(", "sol", ",", "y", ")", ",", "eps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.tests.odeint_tests.TestSolverError.test_adjoint": [[44, 59], ["odeint_tests.TestSolverError.subTest", "problems.construct_problem", "torchdiffeq.odeint_adjoint", "odeint_tests.TestSolverError.assertLess", "odeint_tests.rel_error"], "methods", ["home.repos.pwc.inspect_result.rtqichen_torchdiffeq.tests.problems.construct_problem", "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.adjoint.odeint_adjoint", "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.tests.odeint_tests.rel_error"], ["", "", "", "", "", "", "", "def", "test_adjoint", "(", "self", ")", ":", "\n", "        ", "for", "reverse", "in", "(", "False", ",", "True", ")", ":", "\n", "            ", "for", "dtype", "in", "DTYPES", ":", "\n", "                ", "for", "device", "in", "DEVICES", ":", "\n", "                    ", "for", "ode", "in", "PROBLEMS", ":", "\n", "                        ", "if", "ode", "==", "'linear'", ":", "\n", "                            ", "eps", "=", "2e-3", "\n", "", "else", ":", "\n", "                            ", "eps", "=", "1e-4", "\n", "\n", "", "with", "self", ".", "subTest", "(", "reverse", "=", "reverse", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ",", "ode", "=", "ode", ")", ":", "\n", "                            ", "f", ",", "y0", ",", "t_points", ",", "sol", "=", "construct_problem", "(", "dtype", "=", "dtype", ",", "device", "=", "device", ",", "ode", "=", "ode", ",", "\n", "reverse", "=", "reverse", ")", "\n", "y", "=", "torchdiffeq", ".", "odeint_adjoint", "(", "f", ",", "y0", ",", "t_points", ")", "\n", "self", ".", "assertLess", "(", "rel_error", "(", "sol", ",", "y", ")", ",", "eps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.tests.odeint_tests.TestScipySolvers.test_odeint": [[63, 77], ["odeint_tests.TestScipySolvers.subTest", "problems.construct_problem", "torchdiffeq.odeint", "odeint_tests.TestScipySolvers.assertTrue", "odeint_tests.TestScipySolvers.assertLess", "odeint_tests.rel_error"], "methods", ["home.repos.pwc.inspect_result.rtqichen_torchdiffeq.tests.problems.construct_problem", "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.odeint.odeint", "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.tests.odeint_tests.rel_error"], ["    ", "def", "test_odeint", "(", "self", ")", ":", "\n", "        ", "for", "reverse", "in", "(", "False", ",", "True", ")", ":", "\n", "            ", "for", "dtype", "in", "DTYPES", ":", "\n", "                ", "for", "device", "in", "DEVICES", ":", "\n", "                    ", "for", "solver", "in", "[", "'RK45'", ",", "'RK23'", ",", "'DOP853'", ",", "'Radau'", ",", "'BDF'", ",", "'LSODA'", "]", ":", "\n", "                        ", "for", "ode", "in", "PROBLEMS", ":", "\n", "                            ", "eps", "=", "1e-3", "\n", "\n", "with", "self", ".", "subTest", "(", "reverse", "=", "reverse", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ",", "ode", "=", "ode", ",", "solver", "=", "solver", ")", ":", "\n", "                                ", "f", ",", "y0", ",", "t_points", ",", "sol", "=", "construct_problem", "(", "dtype", "=", "dtype", ",", "device", "=", "device", ",", "ode", "=", "ode", ",", "\n", "reverse", "=", "reverse", ")", "\n", "y", "=", "torchdiffeq", ".", "odeint", "(", "f", ",", "y0", ",", "t_points", ",", "method", "=", "'scipy_solver'", ",", "options", "=", "{", "\"solver\"", ":", "solver", "}", ")", "\n", "self", ".", "assertTrue", "(", "sol", ".", "shape", "==", "y", ".", "shape", ")", "\n", "self", ".", "assertLess", "(", "rel_error", "(", "sol", ",", "y", ")", ",", "eps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.tests.odeint_tests.TestNoIntegration.test_odeint": [[80, 92], ["odeint_tests.TestNoIntegration.subTest", "problems.construct_problem", "torchdiffeq.odeint", "odeint_tests.TestNoIntegration.assertLess"], "methods", ["home.repos.pwc.inspect_result.rtqichen_torchdiffeq.tests.problems.construct_problem", "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.odeint.odeint"], ["    ", "def", "test_odeint", "(", "self", ")", ":", "\n", "        ", "for", "reverse", "in", "(", "False", ",", "True", ")", ":", "\n", "            ", "for", "dtype", "in", "DTYPES", ":", "\n", "                ", "for", "device", "in", "DEVICES", ":", "\n", "                    ", "for", "method", "in", "METHODS", ":", "\n", "                        ", "for", "ode", "in", "PROBLEMS", ":", "\n", "\n", "                            ", "with", "self", ".", "subTest", "(", "reverse", "=", "reverse", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ",", "ode", "=", "ode", ",", "method", "=", "method", ")", ":", "\n", "                                ", "f", ",", "y0", ",", "t_points", ",", "sol", "=", "construct_problem", "(", "dtype", "=", "dtype", ",", "device", "=", "device", ",", "ode", "=", "ode", ",", "\n", "reverse", "=", "reverse", ")", "\n", "y", "=", "torchdiffeq", ".", "odeint", "(", "f", ",", "y0", ",", "t_points", "[", "0", ":", "1", "]", ",", "method", "=", "method", ")", "\n", "self", ".", "assertLess", "(", "(", "sol", "[", "0", "]", "-", "y", ")", ".", "abs", "(", ")", ".", "max", "(", ")", ",", "1e-12", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.tests.odeint_tests._JumpF.__init__": [[95, 97], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "nfe", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.tests.odeint_tests._JumpF.__call__": [[98, 104], ["None"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "t", ",", "x", ")", ":", "\n", "        ", "self", ".", "nfe", "+=", "1", "\n", "if", "t", "<", "0.5", ":", "\n", "            ", "return", "-", "0.5", "*", "x", "\n", "", "else", ":", "\n", "            ", "return", "x", "**", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.tests.odeint_tests.TestDiscontinuities.test_odeint_jump_t": [[107, 138], ["odeint_tests.TestDiscontinuities.subTest", "torch.tensor", "torch.tensor", "odeint_tests._JumpF", "odeint", "odeint_tests._JumpF", "dict", "odeint_tests.TestDiscontinuities.assertLess", "functools.partial", "warnings.catch_warnings", "odeint", "odeint_tests.TestDiscontinuities.assertLess", "torch.tensor", "warnings.catch_warnings", "odeint.sum().backward", "odeint.sum().backward", "odeint.sum", "odeint.sum"], "methods", ["home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.odeint.odeint", "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.odeint.odeint", "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.misc._StitchGradient.backward", "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.misc._StitchGradient.backward"], ["    ", "def", "test_odeint_jump_t", "(", "self", ")", ":", "\n", "        ", "for", "adjoint", "in", "(", "False", ",", "True", ")", ":", "\n", "            ", "for", "dtype", "in", "DTYPES", ":", "\n", "                ", "for", "device", "in", "DEVICES", ":", "\n", "                    ", "for", "method", "in", "ADAPTIVE_METHODS", ":", "\n", "\n", "                        ", "with", "self", ".", "subTest", "(", "adjoint", "=", "adjoint", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ",", "method", "=", "method", ")", ":", "\n", "\n", "                            ", "x0", "=", "torch", ".", "tensor", "(", "[", "1.0", ",", "2.0", "]", ",", "device", "=", "device", ",", "dtype", "=", "dtype", ",", "requires_grad", "=", "True", ")", "\n", "t", "=", "torch", ".", "tensor", "(", "[", "0.", ",", "1.0", "]", ",", "device", "=", "device", ")", "\n", "\n", "simple_f", "=", "_JumpF", "(", ")", "\n", "odeint", "=", "partial", "(", "torchdiffeq", ".", "odeint_adjoint", ",", "adjoint_params", "=", "(", ")", ")", "if", "adjoint", "else", "torchdiffeq", ".", "odeint", "\n", "simple_xs", "=", "odeint", "(", "simple_f", ",", "x0", ",", "t", ",", "atol", "=", "1e-6", ",", "method", "=", "method", ")", "\n", "\n", "better_f", "=", "_JumpF", "(", ")", "\n", "options", "=", "dict", "(", "jump_t", "=", "torch", ".", "tensor", "(", "[", "0.5", "]", ",", "device", "=", "device", ")", ")", "\n", "\n", "with", "warnings", ".", "catch_warnings", "(", ")", ":", "\n", "                                ", "better_xs", "=", "odeint", "(", "better_f", ",", "x0", ",", "t", ",", "rtol", "=", "1e-6", ",", "atol", "=", "1e-6", ",", "method", "=", "method", ",", "\n", "options", "=", "options", ")", "\n", "\n", "", "self", ".", "assertLess", "(", "better_f", ".", "nfe", ",", "simple_f", ".", "nfe", ")", "\n", "\n", "if", "adjoint", ":", "\n", "                                ", "simple_f", ".", "nfe", "=", "0", "\n", "better_f", ".", "nfe", "=", "0", "\n", "with", "warnings", ".", "catch_warnings", "(", ")", ":", "\n", "                                    ", "simple_xs", ".", "sum", "(", ")", ".", "backward", "(", ")", "\n", "better_xs", ".", "sum", "(", ")", ".", "backward", "(", ")", "\n", "", "self", ".", "assertLess", "(", "better_f", ".", "nfe", ",", "simple_f", ".", "nfe", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.tests.odeint_tests.TestDiscontinuities.test_odeint_perturb": [[140, 179], ["odeint_tests.TestDiscontinuities.subTest", "torch.tensor", "torch.tensor", "dict", "ts.append", "warnings.catch_warnings", "odeint", "odeint_tests.TestDiscontinuities.assertNotIn", "odeint_tests.TestDiscontinuities.assertNotIn", "odeint_tests.TestDiscontinuities.assertIn", "odeint_tests.TestDiscontinuities.assertIn", "ts.clear", "torch.tensor.item", "functools.partial", "warnings.catch_warnings", "odeint.sum().backward", "odeint_tests.TestDiscontinuities.assertNotIn", "odeint_tests.TestDiscontinuities.assertNotIn", "odeint_tests.TestDiscontinuities.assertIn", "odeint_tests.TestDiscontinuities.assertIn", "odeint.sum"], "methods", ["home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.odeint.odeint", "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.misc._StitchGradient.backward"], ["", "", "", "", "", "", "", "def", "test_odeint_perturb", "(", "self", ")", ":", "\n", "        ", "for", "adjoint", "in", "(", "False", ",", "True", ")", ":", "\n", "            ", "for", "dtype", "in", "DTYPES", ":", "\n", "                ", "for", "device", "in", "DEVICES", ":", "\n", "                    ", "for", "method", "in", "FIXED_METHODS", ":", "\n", "                        ", "for", "perturb", "in", "(", "True", ",", "False", ")", ":", "\n", "                            ", "with", "self", ".", "subTest", "(", "adjoint", "=", "adjoint", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ",", "method", "=", "method", ",", "\n", "perturb", "=", "perturb", ")", ":", "\n", "                                ", "x0", "=", "torch", ".", "tensor", "(", "[", "1.0", ",", "2.0", "]", ",", "device", "=", "device", ",", "dtype", "=", "dtype", ",", "requires_grad", "=", "True", ")", "\n", "t", "=", "torch", ".", "tensor", "(", "[", "0.", ",", "1.0", "]", ",", "device", "=", "device", ")", "\n", "ts", "=", "[", "]", "\n", "\n", "def", "f", "(", "t", ",", "x", ")", ":", "\n", "                                    ", "ts", ".", "append", "(", "t", ".", "item", "(", ")", ")", "\n", "return", "-", "x", "\n", "\n", "", "options", "=", "dict", "(", "step_size", "=", "0.5", ",", "perturb", "=", "perturb", ")", "\n", "\n", "with", "warnings", ".", "catch_warnings", "(", ")", ":", "\n", "                                    ", "odeint", "=", "partial", "(", "torchdiffeq", ".", "odeint_adjoint", ",", "adjoint_params", "=", "(", ")", ")", "if", "adjoint", "else", "torchdiffeq", ".", "odeint", "\n", "xs", "=", "odeint", "(", "f", ",", "x0", ",", "t", ",", "method", "=", "method", ",", "options", "=", "options", ")", "\n", "\n", "", "if", "perturb", ":", "\n", "                                    ", "self", ".", "assertNotIn", "(", "0.", ",", "ts", ")", "\n", "self", ".", "assertNotIn", "(", "0.5", ",", "ts", ")", "\n", "", "else", ":", "\n", "                                    ", "self", ".", "assertIn", "(", "0.", ",", "ts", ")", "\n", "self", ".", "assertIn", "(", "0.5", ",", "ts", ")", "\n", "\n", "", "if", "adjoint", ":", "\n", "                                    ", "ts", ".", "clear", "(", ")", "\n", "with", "warnings", ".", "catch_warnings", "(", ")", ":", "\n", "                                        ", "xs", ".", "sum", "(", ")", ".", "backward", "(", ")", "\n", "", "if", "perturb", ":", "\n", "                                        ", "self", ".", "assertNotIn", "(", "1.", ",", "ts", ")", "\n", "self", ".", "assertNotIn", "(", "0.5", ",", "ts", ")", "\n", "", "else", ":", "\n", "                                        ", "self", ".", "assertIn", "(", "1.", ",", "ts", ")", "\n", "self", ".", "assertIn", "(", "0.5", ",", "ts", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.tests.odeint_tests.TestGridConstructor.test_grid_constructor": [[182, 220], ["odeint_tests.TestGridConstructor.subTest", "torch.tensor", "torch.tensor", "odeint", "odeint_tests.TestGridConstructor.assertLess", "odeint_tests.TestGridConstructor.assertEqual", "x1.backward", "odeint_tests.TestGridConstructor.assertLess", "odeint_tests.TestGridConstructor.assertEqual", "odeint_tests.TestGridConstructor.assertEqual", "torch.linspace", "odeint_tests.TestGridConstructor.assertEqual", "odeint_tests.TestGridConstructor.assertEqual", "torch.linspace", "dict"], "methods", ["home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.odeint.odeint", "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.misc._StitchGradient.backward"], ["    ", "def", "test_grid_constructor", "(", "self", ")", ":", "\n", "        ", "def", "f", "(", "t", ",", "x", ")", ":", "\n", "            ", "return", "x", "\n", "\n", "", "for", "adjoint", "in", "(", "False", ",", "True", ")", ":", "\n", "            ", "with", "self", ".", "subTest", "(", "adjoint", "=", "adjoint", ")", ":", "\n", "                ", "x0", "=", "torch", ".", "tensor", "(", "1.", ",", "requires_grad", "=", "True", ")", "\n", "t", "=", "torch", ".", "tensor", "(", "[", "0.", ",", "1.", "]", ")", "\n", "\n", "first", "=", "True", "\n", "\n", "def", "grid_constructor", "(", "f", ",", "y0", ",", "t", ")", ":", "\n", "                    ", "nonlocal", "first", "\n", "self", ".", "assertEqual", "(", "t", ".", "shape", ",", "(", "2", ",", ")", ")", "\n", "if", "first", ":", "\n", "                        ", "first", "=", "False", "\n", "self", ".", "assertEqual", "(", "t", "[", "0", "]", ",", "0.", ")", "\n", "self", ".", "assertEqual", "(", "t", "[", "1", "]", ",", "1.", ")", "\n", "return", "torch", ".", "linspace", "(", "0", ",", "1", ",", "11", ")", "\n", "", "else", ":", "\n", "# adjoint pass", "\n", "                        ", "self", ".", "assertEqual", "(", "t", "[", "0", "]", ",", "1.", ")", "\n", "self", ".", "assertEqual", "(", "t", "[", "1", "]", ",", "0.", ")", "\n", "return", "torch", ".", "linspace", "(", "1", ",", "0", ",", "11", ")", "\n", "\n", "", "", "odeint", "=", "torchdiffeq", ".", "odeint_adjoint", "if", "adjoint", "else", "torchdiffeq", ".", "odeint", "\n", "kwargs", "=", "{", "\"adjoint_params\"", ":", "(", ")", "}", "if", "adjoint", "else", "{", "}", "\n", "xs", "=", "odeint", "(", "f", ",", "x0", ",", "t", ",", "method", "=", "'euler'", ",", "options", "=", "dict", "(", "grid_constructor", "=", "grid_constructor", ")", ",", "**", "kwargs", ")", "\n", "x1", "=", "xs", "[", "1", "]", "\n", "\n", "# 'true' wrt the use of the Euler scheme", "\n", "true_x1", "=", "x0", "*", "1.1", "**", "10", "\n", "self", ".", "assertLess", "(", "(", "x1", "-", "true_x1", ")", ".", "abs", "(", ")", ".", "max", "(", ")", ",", "1e-6", ")", "\n", "if", "adjoint", ":", "\n", "                    ", "x1", ".", "backward", "(", ")", "\n", "# 'true' wrt the use of the Euler scheme", "\n", "true_x0_grad", "=", "1.1", "**", "10", "\n", "self", ".", "assertLess", "(", "(", "x0", ".", "grad", "-", "true_x0_grad", ")", ".", "abs", "(", ")", ".", "max", "(", ")", ",", "1e-6", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.tests.odeint_tests.rel_error": [[11, 13], ["None"], "function", ["None"], ["def", "rel_error", "(", "true", ",", "estimate", ")", ":", "\n", "    ", "return", "(", "(", "true", "-", "estimate", ")", "/", "true", ")", ".", "abs", "(", ")", ".", "max", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.DETEST.detest.A1": [[8, 13], ["torch.exp", "torch.tensor", "torch.tensor"], "function", ["None"], ["def", "A1", "(", ")", ":", "\n", "    ", "diffeq", "=", "lambda", "t", ",", "y", ":", "-", "y", "\n", "init", "=", "lambda", ":", "(", "torch", ".", "tensor", "(", "0.", ")", ",", "torch", ".", "tensor", "(", "1.", ")", ")", "\n", "solution", "=", "lambda", "t", ":", "torch", ".", "exp", "(", "-", "t", ")", "\n", "return", "diffeq", ",", "init", ",", "solution", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.DETEST.detest.A2": [[15, 20], ["torch.tensor", "torch.tensor", "torch.sqrt"], "function", ["None"], ["", "def", "A2", "(", ")", ":", "\n", "    ", "diffeq", "=", "lambda", "t", ",", "y", ":", "-", "y", "**", "3", "/", "2", "\n", "init", "=", "lambda", ":", "(", "torch", ".", "tensor", "(", "0.", ")", ",", "torch", ".", "tensor", "(", "1.", ")", ")", "\n", "solution", "=", "lambda", "t", ":", "1", "/", "torch", ".", "sqrt", "(", "t", "+", "1", ")", "\n", "return", "diffeq", ",", "init", ",", "solution", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.DETEST.detest.A3": [[22, 27], ["torch.exp", "torch.cos", "torch.tensor", "torch.tensor", "torch.sin"], "function", ["None"], ["", "def", "A3", "(", ")", ":", "\n", "    ", "diffeq", "=", "lambda", "t", ",", "y", ":", "y", "*", "torch", ".", "cos", "(", "t", ")", "\n", "init", "=", "lambda", ":", "(", "torch", ".", "tensor", "(", "0.", ")", ",", "torch", ".", "tensor", "(", "1.", ")", ")", "\n", "solution", "=", "lambda", "t", ":", "torch", ".", "exp", "(", "torch", ".", "sin", "(", "t", ")", ")", "\n", "return", "diffeq", ",", "init", ",", "solution", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.DETEST.detest.A4": [[29, 34], ["torch.tensor", "torch.tensor", "torch.exp"], "function", ["None"], ["", "def", "A4", "(", ")", ":", "\n", "    ", "diffeq", "=", "lambda", "t", ",", "y", ":", "y", "/", "4", "*", "(", "1", "-", "y", "/", "20", ")", "\n", "init", "=", "lambda", ":", "(", "torch", ".", "tensor", "(", "0.", ")", ",", "torch", ".", "tensor", "(", "1.", ")", ")", "\n", "solution", "=", "lambda", "t", ":", "20", "/", "(", "1", "+", "19", "*", "torch", ".", "exp", "(", "-", "t", "/", "4", ")", ")", "\n", "return", "diffeq", ",", "init", ",", "solution", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.DETEST.detest.A5": [[36, 40], ["torch.tensor", "torch.tensor"], "function", ["None"], ["", "def", "A5", "(", ")", ":", "\n", "    ", "diffeq", "=", "lambda", "t", ",", "y", ":", "(", "y", "-", "t", ")", "/", "(", "y", "+", "t", ")", "\n", "init", "=", "lambda", ":", "(", "torch", ".", "tensor", "(", "0.", ")", ",", "torch", ".", "tensor", "(", "4.", ")", ")", "\n", "return", "diffeq", ",", "init", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.DETEST.detest.B1": [[45, 56], ["torch.stack", "torch.tensor", "torch.tensor"], "function", ["None"], ["", "def", "B1", "(", ")", ":", "\n", "\n", "    ", "def", "diffeq", "(", "t", ",", "y", ")", ":", "\n", "        ", "dy0", "=", "2", "*", "(", "y", "[", "0", "]", "-", "y", "[", "0", "]", "*", "y", "[", "1", "]", ")", "\n", "dy1", "=", "-", "(", "y", "[", "1", "]", "-", "y", "[", "0", "]", "*", "y", "[", "1", "]", ")", "\n", "return", "torch", ".", "stack", "(", "[", "dy0", ",", "dy1", "]", ")", "\n", "\n", "", "def", "init", "(", ")", ":", "\n", "        ", "return", "torch", ".", "tensor", "(", "0.", ")", ",", "torch", ".", "tensor", "(", "[", "1.", ",", "3.", "]", ")", "\n", "\n", "", "return", "diffeq", ",", "init", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.DETEST.detest.B2": [[58, 70], ["torch.tensor", "torch.mv", "torch.tensor", "torch.tensor"], "function", ["None"], ["", "def", "B2", "(", ")", ":", "\n", "\n", "    ", "A", "=", "torch", ".", "tensor", "(", "[", "[", "-", "1.", ",", "1.", ",", "0.", "]", ",", "[", "1.", ",", "-", "2.", ",", "1.", "]", ",", "[", "0.", ",", "1.", ",", "-", "1.", "]", "]", ")", "\n", "\n", "def", "diffeq", "(", "t", ",", "y", ")", ":", "\n", "        ", "dy", "=", "torch", ".", "mv", "(", "A", ",", "y", ")", "\n", "return", "dy", "\n", "\n", "", "def", "init", "(", ")", ":", "\n", "        ", "return", "torch", ".", "tensor", "(", "0.", ")", ",", "torch", ".", "tensor", "(", "[", "2.", ",", "0.", ",", "1.", "]", ")", "\n", "\n", "", "return", "diffeq", ",", "init", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.DETEST.detest.B3": [[72, 84], ["torch.stack", "torch.tensor", "torch.tensor"], "function", ["None"], ["", "def", "B3", "(", ")", ":", "\n", "\n", "    ", "def", "diffeq", "(", "t", ",", "y", ")", ":", "\n", "        ", "dy0", "=", "-", "y", "[", "0", "]", "\n", "dy1", "=", "y", "[", "0", "]", "-", "y", "[", "1", "]", "*", "y", "[", "1", "]", "\n", "dy2", "=", "y", "[", "1", "]", "*", "y", "[", "1", "]", "\n", "return", "torch", ".", "stack", "(", "[", "dy0", ",", "dy1", ",", "dy2", "]", ")", "\n", "\n", "", "def", "init", "(", ")", ":", "\n", "        ", "return", "torch", ".", "tensor", "(", "0.", ")", ",", "torch", ".", "tensor", "(", "[", "1.", ",", "0.", ",", "0.", "]", ")", "\n", "\n", "", "return", "diffeq", ",", "init", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.DETEST.detest.B4": [[86, 99], ["torch.sqrt", "torch.stack", "torch.tensor", "torch.tensor"], "function", ["None"], ["", "def", "B4", "(", ")", ":", "\n", "\n", "    ", "def", "diffeq", "(", "t", ",", "y", ")", ":", "\n", "        ", "a", "=", "torch", ".", "sqrt", "(", "y", "[", "0", "]", "*", "y", "[", "0", "]", "+", "y", "[", "1", "]", "*", "y", "[", "1", "]", ")", "\n", "dy0", "=", "-", "y", "[", "1", "]", "-", "y", "[", "0", "]", "*", "y", "[", "2", "]", "/", "a", "\n", "dy1", "=", "y", "[", "0", "]", "-", "y", "[", "1", "]", "*", "y", "[", "2", "]", "/", "a", "\n", "dy2", "=", "y", "[", "0", "]", "/", "a", "\n", "return", "torch", ".", "stack", "(", "[", "dy0", ",", "dy1", ",", "dy2", "]", ")", "\n", "\n", "", "def", "init", "(", ")", ":", "\n", "        ", "return", "torch", ".", "tensor", "(", "0.", ")", ",", "torch", ".", "tensor", "(", "[", "3.", ",", "0.", ",", "0.", "]", ")", "\n", "\n", "", "return", "diffeq", ",", "init", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.DETEST.detest.B5": [[101, 113], ["torch.stack", "torch.tensor", "torch.tensor"], "function", ["None"], ["", "def", "B5", "(", ")", ":", "\n", "\n", "    ", "def", "diffeq", "(", "t", ",", "y", ")", ":", "\n", "        ", "dy0", "=", "y", "[", "1", "]", "*", "y", "[", "2", "]", "\n", "dy1", "=", "-", "y", "[", "0", "]", "*", "y", "[", "2", "]", "\n", "dy2", "=", "-", "0.51", "*", "y", "[", "0", "]", "*", "y", "[", "1", "]", "\n", "return", "torch", ".", "stack", "(", "[", "dy0", ",", "dy1", ",", "dy2", "]", ")", "\n", "\n", "", "def", "init", "(", ")", ":", "\n", "        ", "return", "torch", ".", "tensor", "(", "0.", ")", ",", "torch", ".", "tensor", "(", "[", "0.", ",", "1.", ",", "1.", "]", ")", "\n", "\n", "", "return", "diffeq", ",", "init", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.DETEST.detest.C1": [[118, 133], ["torch.zeros", "torch.zeros.view", "torch.zeros.view", "torch.mv", "torch.zeros", "torch.tensor"], "function", ["None"], ["", "def", "C1", "(", ")", ":", "\n", "\n", "    ", "A", "=", "torch", ".", "zeros", "(", "10", ",", "10", ")", "\n", "A", ".", "view", "(", "-", "1", ")", "[", ":", "-", "1", ":", "11", "]", "=", "-", "1", "\n", "A", ".", "view", "(", "-", "1", ")", "[", "10", ":", ":", "11", "]", "=", "1", "\n", "\n", "def", "diffeq", "(", "t", ",", "y", ")", ":", "\n", "        ", "return", "torch", ".", "mv", "(", "A", ",", "y", ")", "\n", "\n", "", "def", "init", "(", ")", ":", "\n", "        ", "y0", "=", "torch", ".", "zeros", "(", "10", ")", "\n", "y0", "[", "0", "]", "=", "1", "\n", "return", "torch", ".", "tensor", "(", "0.", ")", ",", "y0", "\n", "\n", "", "return", "diffeq", ",", "init", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.DETEST.detest.C2": [[135, 150], ["torch.zeros", "torch.linspace", "torch.linspace", "torch.zeros.view", "torch.zeros.view", "torch.mv", "torch.zeros", "torch.tensor"], "function", ["None"], ["", "def", "C2", "(", ")", ":", "\n", "\n", "    ", "A", "=", "torch", ".", "zeros", "(", "10", ",", "10", ")", "\n", "A", ".", "view", "(", "-", "1", ")", "[", ":", "-", "1", ":", "11", "]", "=", "torch", ".", "linspace", "(", "-", "1", ",", "-", "9", ",", "9", ")", "\n", "A", ".", "view", "(", "-", "1", ")", "[", "10", ":", ":", "11", "]", "=", "torch", ".", "linspace", "(", "1", ",", "9", ",", "9", ")", "\n", "\n", "def", "diffeq", "(", "t", ",", "y", ")", ":", "\n", "        ", "return", "torch", ".", "mv", "(", "A", ",", "y", ")", "\n", "\n", "", "def", "init", "(", ")", ":", "\n", "        ", "y0", "=", "torch", ".", "zeros", "(", "10", ")", "\n", "y0", "[", "0", "]", "=", "1", "\n", "return", "torch", ".", "tensor", "(", "0.", ")", ",", "y0", "\n", "\n", "", "return", "diffeq", ",", "init", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.DETEST.detest.C3": [[152, 168], ["torch.zeros", "torch.zeros.view", "torch.zeros.view", "torch.zeros.view", "torch.mv", "torch.zeros", "torch.tensor"], "function", ["None"], ["", "def", "C3", "(", ")", ":", "\n", "    ", "n", "=", "10", "\n", "A", "=", "torch", ".", "zeros", "(", "n", ",", "n", ")", "\n", "A", ".", "view", "(", "-", "1", ")", "[", ":", ":", "n", "+", "1", "]", "=", "-", "2", "\n", "A", ".", "view", "(", "-", "1", ")", "[", "n", ":", ":", "n", "+", "1", "]", "=", "1", "\n", "A", ".", "view", "(", "-", "1", ")", "[", "1", ":", ":", "n", "+", "1", "]", "=", "1", "\n", "\n", "def", "diffeq", "(", "t", ",", "y", ")", ":", "\n", "        ", "return", "torch", ".", "mv", "(", "A", ",", "y", ")", "\n", "\n", "", "def", "init", "(", ")", ":", "\n", "        ", "y0", "=", "torch", ".", "zeros", "(", "n", ")", "\n", "y0", "[", "0", "]", "=", "1", "\n", "return", "torch", ".", "tensor", "(", "0.", ")", ",", "y0", "\n", "\n", "", "return", "diffeq", ",", "init", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.DETEST.detest.C4": [[170, 186], ["torch.zeros", "torch.zeros.view", "torch.zeros.view", "torch.zeros.view", "torch.mv", "torch.zeros", "torch.tensor"], "function", ["None"], ["", "def", "C4", "(", ")", ":", "\n", "    ", "n", "=", "51", "\n", "A", "=", "torch", ".", "zeros", "(", "n", ",", "n", ")", "\n", "A", ".", "view", "(", "-", "1", ")", "[", ":", ":", "n", "+", "1", "]", "=", "-", "2", "\n", "A", ".", "view", "(", "-", "1", ")", "[", "n", ":", ":", "n", "+", "1", "]", "=", "1", "\n", "A", ".", "view", "(", "-", "1", ")", "[", "1", ":", ":", "n", "+", "1", "]", "=", "1", "\n", "\n", "def", "diffeq", "(", "t", ",", "y", ")", ":", "\n", "        ", "return", "torch", ".", "mv", "(", "A", ",", "y", ")", "\n", "\n", "", "def", "init", "(", ")", ":", "\n", "        ", "y0", "=", "torch", ".", "zeros", "(", "n", ")", "\n", "y0", "[", "0", "]", "=", "1", "\n", "return", "torch", ".", "tensor", "(", "0.", ")", ",", "y0", "\n", "\n", "", "return", "diffeq", ",", "init", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.DETEST.detest.C5": [[188, 232], ["torch.tensor", "torch.tensor", "torch.tensor().view", "torch.sqrt().view", "torch.sqrt", "torch.stack", "torch.tensor().view().transpose", "torch.tensor().view().transpose", "torch.tensor", "torch.sum", "torch.tensor().view.view", "F.view", "F.sum", "torch.tensor", "torch.stack", "torch.sqrt", "torch.tensor().view", "torch.tensor().view", "torch.sum", "y.view", "torch.tensor", "torch.tensor"], "function", ["None"], ["", "def", "C5", "(", ")", ":", "\n", "\n", "    ", "k2", "=", "torch", ".", "tensor", "(", "2.95912208286", ")", "\n", "m0", "=", "torch", ".", "tensor", "(", "1.00000597682", ")", "\n", "m", "=", "torch", ".", "tensor", "(", "[", "\n", "0.000954786104043", ",", "\n", "0.000285583733151", ",", "\n", "0.0000437273164546", ",", "\n", "0.0000517759138449", ",", "\n", "0.00000277777777778", ",", "\n", "]", ")", ".", "view", "(", "1", ",", "5", ")", "\n", "\n", "def", "diffeq", "(", "t", ",", "y", ")", ":", "\n", "# y is 2 x 3 x 5", "\n", "# y[0] contains y, y[0] contains y'", "\n", "# second axis indexes space (x,y,z).", "\n", "# third axis indexes 5 bodies.", "\n", "\n", "        ", "dy", "=", "y", "[", "1", ",", ":", ",", ":", "]", "\n", "y", "=", "y", "[", "0", "]", "\n", "r", "=", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "y", "**", "2", ",", "0", ")", ")", ".", "view", "(", "1", ",", "5", ")", "\n", "d", "=", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "(", "y", "[", ":", ",", ":", ",", "None", "]", "-", "y", "[", ":", ",", "None", ",", ":", "]", ")", "**", "2", ",", "0", ")", ")", "\n", "F", "=", "m", ".", "view", "(", "1", ",", "1", ",", "5", ")", "*", "(", "(", "y", "[", ":", ",", "None", ",", ":", "]", "-", "y", "[", ":", ",", ":", ",", "None", "]", ")", "/", "(", "d", "*", "d", "*", "d", ")", ".", "view", "(", "1", ",", "5", ",", "5", ")", "+", "y", ".", "view", "(", "3", ",", "1", ",", "5", ")", "/", "\n", "(", "r", "*", "r", "*", "r", ")", ".", "view", "(", "1", ",", "1", ",", "5", ")", ")", "\n", "F", ".", "view", "(", "3", ",", "5", "*", "5", ")", "[", ":", ",", ":", ":", "6", "]", "=", "0", "\n", "ddy", "=", "k2", "*", "(", "-", "(", "m0", "+", "m", ")", "*", "y", "/", "(", "r", "*", "r", "*", "r", ")", ")", "+", "F", ".", "sum", "(", "2", ")", "\n", "return", "torch", ".", "stack", "(", "[", "dy", ",", "ddy", "]", ",", "0", ")", "\n", "\n", "", "def", "init", "(", ")", ":", "\n", "        ", "y0", "=", "torch", ".", "tensor", "(", "[", "\n", "3.42947415189", ",", "3.35386959711", ",", "1.35494901715", ",", "6.64145542550", ",", "5.97156957878", ",", "2.18231499728", ",", "11.2630437207", ",", "\n", "14.6952576794", ",", "6.27960525067", ",", "-", "30.1552268759", ",", "165699966404", ",", "1.43785752721", ",", "-", "21.1238353380", ",", "28.4465098142", ",", "\n", "15.388265967", "\n", "]", ")", ".", "view", "(", "5", ",", "3", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "\n", "dy0", "=", "torch", ".", "tensor", "(", "[", "\n", "-", ".557160570446", ",", ".505696783289", ",", ".230578543901", ",", "-", ".415570776342", ",", ".365682722812", ",", ".169143213293", ",", "-", ".325325669158", ",", "\n", ".189706021964", ",", ".0877265322780", ",", "-", ".0240476254170", ",", "-", ".287659532608", ",", "-", ".117219543175", ",", "-", ".176860753121", ",", "\n", "-", ".216393453025", ",", "-", ".0148647893090", "\n", "]", ")", ".", "view", "(", "5", ",", "3", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "\n", "return", "torch", ".", "tensor", "(", "0.", ")", ",", "torch", ".", "stack", "(", "[", "y0", ",", "dy0", "]", ",", "0", ")", "\n", "\n", "", "return", "diffeq", ",", "init", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.DETEST.detest._DTemplate": [[237, 251], ["torch.stack", "torch.tensor", "torch.tensor", "math.sqrt"], "function", ["None"], ["", "def", "_DTemplate", "(", "eps", ")", ":", "\n", "\n", "    ", "def", "diffeq", "(", "t", ",", "y", ")", ":", "\n", "        ", "r", "=", "(", "y", "[", "0", "]", "**", "2", "+", "y", "[", "1", "]", "**", "2", ")", "**", "(", "3", "/", "2", ")", "\n", "dy0", "=", "y", "[", "2", "]", "\n", "dy1", "=", "y", "[", "3", "]", "\n", "dy2", "=", "-", "y", "[", "0", "]", "/", "r", "\n", "dy3", "=", "-", "y", "[", "1", "]", "/", "r", "\n", "return", "torch", ".", "stack", "(", "[", "dy0", ",", "dy1", ",", "dy2", ",", "dy3", "]", ")", "\n", "\n", "", "def", "init", "(", ")", ":", "\n", "        ", "return", "torch", ".", "tensor", "(", "0.", ")", ",", "torch", ".", "tensor", "(", "[", "1", "-", "eps", ",", "0", ",", "0", ",", "math", ".", "sqrt", "(", "(", "1", "+", "eps", ")", "/", "(", "1", "-", "eps", ")", ")", "]", ")", "\n", "\n", "", "return", "diffeq", ",", "init", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.DETEST.detest.E1": [[263, 274], ["torch.stack", "torch.tensor", "torch.tensor"], "function", ["None"], ["def", "E1", "(", ")", ":", "\n", "\n", "    ", "def", "diffeq", "(", "t", ",", "y", ")", ":", "\n", "        ", "dy0", "=", "y", "[", "1", "]", "\n", "dy1", "=", "-", "(", "y", "[", "1", "]", "/", "(", "t", "+", "1", ")", "+", "(", "1", "-", "0.25", "/", "(", "t", "+", "1", ")", "**", "2", ")", "*", "y", "[", "0", "]", ")", "\n", "return", "torch", ".", "stack", "(", "[", "dy0", ",", "dy1", "]", ")", "\n", "\n", "", "def", "init", "(", ")", ":", "\n", "        ", "return", "torch", ".", "tensor", "(", "0.", ")", ",", "torch", ".", "tensor", "(", "[", ".671396707141803", ",", ".0954005144474744", "]", ")", "\n", "\n", "", "return", "diffeq", ",", "init", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.DETEST.detest.E2": [[276, 287], ["torch.stack", "torch.tensor", "torch.tensor"], "function", ["None"], ["", "def", "E2", "(", ")", ":", "\n", "\n", "    ", "def", "diffeq", "(", "t", ",", "y", ")", ":", "\n", "        ", "dy0", "=", "y", "[", "1", "]", "\n", "dy1", "=", "(", "1", "-", "y", "[", "0", "]", "**", "2", ")", "*", "y", "[", "1", "]", "-", "y", "[", "0", "]", "\n", "return", "torch", ".", "stack", "(", "[", "dy0", ",", "dy1", "]", ")", "\n", "\n", "", "def", "init", "(", ")", ":", "\n", "        ", "return", "torch", ".", "tensor", "(", "0.", ")", ",", "torch", ".", "tensor", "(", "[", "2.", ",", "0.", "]", ")", "\n", "\n", "", "return", "diffeq", ",", "init", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.DETEST.detest.E3": [[289, 300], ["torch.stack", "torch.tensor", "torch.tensor", "torch.sin"], "function", ["None"], ["", "def", "E3", "(", ")", ":", "\n", "\n", "    ", "def", "diffeq", "(", "t", ",", "y", ")", ":", "\n", "        ", "dy0", "=", "y", "[", "1", "]", "\n", "dy1", "=", "y", "[", "0", "]", "**", "3", "/", "6", "-", "y", "[", "0", "]", "+", "2", "*", "torch", ".", "sin", "(", "2.78535", "*", "t", ")", "\n", "return", "torch", ".", "stack", "(", "[", "dy0", ",", "dy1", "]", ")", "\n", "\n", "", "def", "init", "(", ")", ":", "\n", "        ", "return", "torch", ".", "tensor", "(", "0.", ")", ",", "torch", ".", "tensor", "(", "[", "0.", ",", "0.", "]", ")", "\n", "\n", "", "return", "diffeq", ",", "init", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.DETEST.detest.E4": [[302, 313], ["torch.stack", "torch.tensor", "torch.tensor"], "function", ["None"], ["", "def", "E4", "(", ")", ":", "\n", "\n", "    ", "def", "diffeq", "(", "t", ",", "y", ")", ":", "\n", "        ", "dy0", "=", "y", "[", "1", "]", "\n", "dy1", "=", ".32", "-", ".4", "*", "y", "[", "1", "]", "**", "2", "\n", "return", "torch", ".", "stack", "(", "[", "dy0", ",", "dy1", "]", ")", "\n", "\n", "", "def", "init", "(", ")", ":", "\n", "        ", "return", "torch", ".", "tensor", "(", "0.", ")", ",", "torch", ".", "tensor", "(", "[", "30.", ",", "0.", "]", ")", "\n", "\n", "", "return", "diffeq", ",", "init", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.DETEST.detest.E5": [[315, 326], ["torch.stack", "torch.sqrt", "torch.tensor", "torch.tensor"], "function", ["None"], ["", "def", "E5", "(", ")", ":", "\n", "\n", "    ", "def", "diffeq", "(", "t", ",", "y", ")", ":", "\n", "        ", "dy0", "=", "y", "[", "1", "]", "\n", "dy1", "=", "torch", ".", "sqrt", "(", "1", "+", "y", "[", "1", "]", "**", "2", ")", "/", "(", "25", "-", "t", ")", "\n", "return", "torch", ".", "stack", "(", "[", "dy0", ",", "dy1", "]", ")", "\n", "\n", "", "def", "init", "(", ")", ":", "\n", "        ", "return", "torch", ".", "tensor", "(", "0.", ")", ",", "torch", ".", "tensor", "(", "[", "0.", ",", "0.", "]", ")", "\n", "\n", "", "return", "diffeq", ",", "init", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.DETEST.detest._to_tensor": [[331, 335], ["torch.is_tensor", "torch.tensor"], "function", ["None"], ["", "def", "_to_tensor", "(", "x", ")", ":", "\n", "    ", "if", "not", "torch", ".", "is_tensor", "(", "x", ")", ":", "\n", "        ", "x", "=", "torch", ".", "tensor", "(", "x", ")", "\n", "", "return", "x", "\n", "", ""]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.DETEST.run.NFEDiffEq.__init__": [[13, 16], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "diffeq", ")", ":", "\n", "        ", "self", ".", "diffeq", "=", "diffeq", "\n", "self", ".", "nfe", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.DETEST.run.NFEDiffEq.__call__": [[17, 20], ["run.NFEDiffEq.diffeq"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "t", ",", "y", ")", ":", "\n", "        ", "self", ".", "nfe", "+=", "1", "\n", "return", "self", ".", "diffeq", "(", "t", ",", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.DETEST.run.main": [[22, 56], ["dict", "print", "print", "init", "run.NFEDiffEq", "time.time", "torchdiffeq.odeint", "torch.sqrt", "errs.append", "nfes.append", "times.append", "print", "numpy.sum", "numpy.sum", "scipy.stats.mstats.gmean", "getattr", "torch.stack", "time.time", "torch.mean", "torch.sqrt.item", "torchdiffeq.odeint", "torch.sqrt.item", "torch.stack", "torch.tensor", "torch.tensor"], "function", ["home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.odeint.odeint", "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.odeint.odeint"], ["", "", "def", "main", "(", ")", ":", "\n", "\n", "    ", "sol", "=", "dict", "(", ")", "\n", "for", "method", "in", "[", "'dopri5'", ",", "'adams'", "]", ":", "\n", "        ", "for", "tol", "in", "[", "1e-3", ",", "1e-6", ",", "1e-9", "]", ":", "\n", "            ", "print", "(", "'======= {} | tol={:e} ======='", ".", "format", "(", "method", ",", "tol", ")", ")", "\n", "nfes", "=", "[", "]", "\n", "times", "=", "[", "]", "\n", "errs", "=", "[", "]", "\n", "for", "c", "in", "[", "'A'", ",", "'B'", ",", "'C'", ",", "'D'", ",", "'E'", "]", ":", "\n", "                ", "for", "i", "in", "[", "'1'", ",", "'2'", ",", "'3'", ",", "'4'", ",", "'5'", "]", ":", "\n", "                    ", "diffeq", ",", "init", ",", "_", "=", "getattr", "(", "detest", ",", "c", "+", "i", ")", "(", ")", "\n", "t0", ",", "y0", "=", "init", "(", ")", "\n", "diffeq", "=", "NFEDiffEq", "(", "diffeq", ")", "\n", "\n", "if", "not", "c", "+", "i", "in", "sol", ":", "\n", "                        ", "sol", "[", "c", "+", "i", "]", "=", "odeint", "(", "\n", "diffeq", ",", "y0", ",", "torch", ".", "stack", "(", "[", "t0", ",", "torch", ".", "tensor", "(", "20.", ")", "]", ")", ",", "atol", "=", "1e-12", ",", "rtol", "=", "1e-12", ",", "method", "=", "'dopri5'", "\n", ")", "[", "1", "]", "\n", "diffeq", ".", "nfe", "=", "0", "\n", "\n", "", "start_time", "=", "time", ".", "time", "(", ")", "\n", "est", "=", "odeint", "(", "diffeq", ",", "y0", ",", "torch", ".", "stack", "(", "[", "t0", ",", "torch", ".", "tensor", "(", "20.", ")", "]", ")", ",", "atol", "=", "tol", ",", "rtol", "=", "tol", ",", "method", "=", "method", ")", "\n", "time_spent", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "\n", "error", "=", "torch", ".", "sqrt", "(", "torch", ".", "mean", "(", "(", "sol", "[", "c", "+", "i", "]", "-", "est", "[", "1", "]", ")", "**", "2", ")", ")", "\n", "\n", "errs", ".", "append", "(", "error", ".", "item", "(", ")", ")", "\n", "nfes", ".", "append", "(", "diffeq", ".", "nfe", ")", "\n", "times", ".", "append", "(", "time_spent", ")", "\n", "\n", "print", "(", "'{}: NFE {} | Time {} | Err {:e}'", ".", "format", "(", "c", "+", "i", ",", "diffeq", ".", "nfe", ",", "time_spent", ",", "error", ".", "item", "(", ")", ")", ")", "\n", "\n", "", "", "print", "(", "'Total NFE {} | Total Time {} | GeomAvg Error {:e}'", ".", "format", "(", "np", ".", "sum", "(", "nfes", ")", ",", "np", ".", "sum", "(", "times", ")", ",", "gmean", "(", "errs", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.interp._interp_fit": [[1, 23], ["None"], "function", ["None"], ["def", "_interp_fit", "(", "y0", ",", "y1", ",", "y_mid", ",", "f0", ",", "f1", ",", "dt", ")", ":", "\n", "    ", "\"\"\"Fit coefficients for 4th order polynomial interpolation.\n\n    Args:\n        y0: function value at the start of the interval.\n        y1: function value at the end of the interval.\n        y_mid: function value at the mid-point of the interval.\n        f0: derivative value at the start of the interval.\n        f1: derivative value at the end of the interval.\n        dt: width of the interval.\n\n    Returns:\n        List of coefficients `[a, b, c, d, e]` for interpolating with the polynomial\n        `p = a * x ** 4 + b * x ** 3 + c * x ** 2 + d * x + e` for values of `x`\n        between 0 (start of interval) and 1 (end of interval).\n    \"\"\"", "\n", "a", "=", "2", "*", "dt", "*", "(", "f1", "-", "f0", ")", "-", "8", "*", "(", "y1", "+", "y0", ")", "+", "16", "*", "y_mid", "\n", "b", "=", "dt", "*", "(", "5", "*", "f0", "-", "3", "*", "f1", ")", "+", "18", "*", "y0", "+", "14", "*", "y1", "-", "32", "*", "y_mid", "\n", "c", "=", "dt", "*", "(", "f1", "-", "4", "*", "f0", ")", "-", "11", "*", "y0", "-", "5", "*", "y1", "+", "16", "*", "y_mid", "\n", "d", "=", "dt", "*", "f0", "\n", "e", "=", "y0", "\n", "return", "[", "e", ",", "d", ",", "c", ",", "b", ",", "a", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.interp._interp_evaluate": [[25, 49], ["x.to.to"], "function", ["None"], ["", "def", "_interp_evaluate", "(", "coefficients", ",", "t0", ",", "t1", ",", "t", ")", ":", "\n", "    ", "\"\"\"Evaluate polynomial interpolation at the given time point.\n\n    Args:\n        coefficients: list of Tensor coefficients as created by `interp_fit`.\n        t0: scalar float64 Tensor giving the start of the interval.\n        t1: scalar float64 Tensor giving the end of the interval.\n        t: scalar float64 Tensor giving the desired interpolation point.\n\n    Returns:\n        Polynomial interpolation of the coefficients at time `t`.\n    \"\"\"", "\n", "\n", "assert", "(", "t0", "<=", "t", ")", "&", "(", "t", "<=", "t1", ")", ",", "'invalid interpolation, fails `t0 <= t <= t1`: {}, {}, {}'", ".", "format", "(", "t0", ",", "t", ",", "t1", ")", "\n", "x", "=", "(", "t", "-", "t0", ")", "/", "(", "t1", "-", "t0", ")", "\n", "x", "=", "x", ".", "to", "(", "coefficients", "[", "0", "]", ".", "dtype", ")", "\n", "\n", "total", "=", "coefficients", "[", "0", "]", "+", "x", "*", "coefficients", "[", "1", "]", "\n", "x_power", "=", "x", "\n", "for", "coefficient", "in", "coefficients", "[", "2", ":", "]", ":", "\n", "        ", "x_power", "=", "x_power", "*", "x", "\n", "total", "=", "total", "+", "x_power", "*", "coefficient", "\n", "\n", "", "return", "total", "\n", "", ""]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.rk_common._UncheckedAssign.forward": [[30, 35], ["None"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "scratch", ",", "value", ",", "index", ")", ":", "\n", "        ", "ctx", ".", "index", "=", "index", "\n", "scratch", ".", "data", "[", "index", "]", "=", "value", "# sneak past the version checker", "\n", "return", "scratch", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.rk_common._UncheckedAssign.backward": [[36, 39], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_scratch", ")", ":", "\n", "        ", "return", "grad_scratch", ",", "grad_scratch", "[", "ctx", ".", "index", "]", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.rk_common.RKAdaptiveStepsizeODESolver.__init__": [[122, 158], ["solvers.AdaptiveStepsizeEventODESolver.__init__", "torch.promote_types", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "_ButcherTableau", "rk_common.RKAdaptiveStepsizeODESolver.mid.to", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "rk_common.RKAdaptiveStepsizeODESolver.tableau.alpha.to", "rk_common.RKAdaptiveStepsizeODESolver.tableau.c_sol.to", "rk_common.RKAdaptiveStepsizeODESolver.tableau.c_error.to", "b.to"], "methods", ["home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.misc._PerturbFunc.__init__"], ["def", "__init__", "(", "self", ",", "func", ",", "y0", ",", "rtol", ",", "atol", ",", "\n", "first_step", "=", "None", ",", "\n", "step_t", "=", "None", ",", "\n", "jump_t", "=", "None", ",", "\n", "safety", "=", "0.9", ",", "\n", "ifactor", "=", "10.0", ",", "\n", "dfactor", "=", "0.2", ",", "\n", "max_num_steps", "=", "2", "**", "31", "-", "1", ",", "\n", "dtype", "=", "torch", ".", "float64", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "RKAdaptiveStepsizeODESolver", ",", "self", ")", ".", "__init__", "(", "dtype", "=", "dtype", ",", "y0", "=", "y0", ",", "**", "kwargs", ")", "\n", "\n", "# We use mixed precision. y has its original dtype (probably float32), whilst all 'time'-like objects use", "\n", "# `dtype` (defaulting to float64).", "\n", "dtype", "=", "torch", ".", "promote_types", "(", "dtype", ",", "y0", ".", "dtype", ")", "\n", "device", "=", "y0", ".", "device", "\n", "\n", "self", ".", "func", "=", "func", "\n", "self", ".", "rtol", "=", "torch", ".", "as_tensor", "(", "rtol", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ")", "\n", "self", ".", "atol", "=", "torch", ".", "as_tensor", "(", "atol", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ")", "\n", "self", ".", "first_step", "=", "None", "if", "first_step", "is", "None", "else", "torch", ".", "as_tensor", "(", "first_step", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ")", "\n", "self", ".", "safety", "=", "torch", ".", "as_tensor", "(", "safety", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ")", "\n", "self", ".", "ifactor", "=", "torch", ".", "as_tensor", "(", "ifactor", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ")", "\n", "self", ".", "dfactor", "=", "torch", ".", "as_tensor", "(", "dfactor", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ")", "\n", "self", ".", "max_num_steps", "=", "torch", ".", "as_tensor", "(", "max_num_steps", ",", "dtype", "=", "torch", ".", "int32", ",", "device", "=", "device", ")", "\n", "self", ".", "dtype", "=", "dtype", "\n", "\n", "self", ".", "step_t", "=", "None", "if", "step_t", "is", "None", "else", "torch", ".", "as_tensor", "(", "step_t", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ")", "\n", "self", ".", "jump_t", "=", "None", "if", "jump_t", "is", "None", "else", "torch", ".", "as_tensor", "(", "jump_t", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ")", "\n", "\n", "# Copy from class to instance to set device", "\n", "self", ".", "tableau", "=", "_ButcherTableau", "(", "alpha", "=", "self", ".", "tableau", ".", "alpha", ".", "to", "(", "device", "=", "device", ",", "dtype", "=", "y0", ".", "dtype", ")", ",", "\n", "beta", "=", "[", "b", ".", "to", "(", "device", "=", "device", ",", "dtype", "=", "y0", ".", "dtype", ")", "for", "b", "in", "self", ".", "tableau", ".", "beta", "]", ",", "\n", "c_sol", "=", "self", ".", "tableau", ".", "c_sol", ".", "to", "(", "device", "=", "device", ",", "dtype", "=", "y0", ".", "dtype", ")", ",", "\n", "c_error", "=", "self", ".", "tableau", ".", "c_error", ".", "to", "(", "device", "=", "device", ",", "dtype", "=", "y0", ".", "dtype", ")", ")", "\n", "self", ".", "mid", "=", "self", ".", "mid", ".", "to", "(", "device", "=", "device", ",", "dtype", "=", "y0", ".", "dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.rk_common.RKAdaptiveStepsizeODESolver._before_integrate": [[159, 188], ["rk_common.RKAdaptiveStepsizeODESolver.func", "_RungeKuttaState", "min", "min", "misc._select_initial_step", "torch.tensor", "rk_common._sort_tvals", "step_t.to.to.to", "torch.tensor", "rk_common._sort_tvals", "jump_t.to.to.to", "torch.cat().unique", "ValueError", "bisect.bisect", "bisect.bisect", "rk_common.RKAdaptiveStepsizeODESolver.step_t.tolist", "len", "rk_common.RKAdaptiveStepsizeODESolver.jump_t.tolist", "len", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.misc._select_initial_step", "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.rk_common._sort_tvals", "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.rk_common._sort_tvals"], ["", "def", "_before_integrate", "(", "self", ",", "t", ")", ":", "\n", "        ", "t0", "=", "t", "[", "0", "]", "\n", "f0", "=", "self", ".", "func", "(", "t", "[", "0", "]", ",", "self", ".", "y0", ")", "\n", "if", "self", ".", "first_step", "is", "None", ":", "\n", "            ", "first_step", "=", "_select_initial_step", "(", "self", ".", "func", ",", "t", "[", "0", "]", ",", "self", ".", "y0", ",", "self", ".", "order", "-", "1", ",", "self", ".", "rtol", ",", "self", ".", "atol", ",", "\n", "self", ".", "norm", ",", "f0", "=", "f0", ")", "\n", "", "else", ":", "\n", "            ", "first_step", "=", "self", ".", "first_step", "\n", "", "self", ".", "rk_state", "=", "_RungeKuttaState", "(", "self", ".", "y0", ",", "f0", ",", "t", "[", "0", "]", ",", "t", "[", "0", "]", ",", "first_step", ",", "[", "self", ".", "y0", "]", "*", "5", ")", "\n", "\n", "# Handle step_t and jump_t arguments.", "\n", "if", "self", ".", "step_t", "is", "None", ":", "\n", "            ", "step_t", "=", "torch", ".", "tensor", "(", "[", "]", ",", "dtype", "=", "self", ".", "dtype", ",", "device", "=", "self", ".", "y0", ".", "device", ")", "\n", "", "else", ":", "\n", "            ", "step_t", "=", "_sort_tvals", "(", "self", ".", "step_t", ",", "t0", ")", "\n", "step_t", "=", "step_t", ".", "to", "(", "self", ".", "dtype", ")", "\n", "", "if", "self", ".", "jump_t", "is", "None", ":", "\n", "            ", "jump_t", "=", "torch", ".", "tensor", "(", "[", "]", ",", "dtype", "=", "self", ".", "dtype", ",", "device", "=", "self", ".", "y0", ".", "device", ")", "\n", "", "else", ":", "\n", "            ", "jump_t", "=", "_sort_tvals", "(", "self", ".", "jump_t", ",", "t0", ")", "\n", "jump_t", "=", "jump_t", ".", "to", "(", "self", ".", "dtype", ")", "\n", "", "counts", "=", "torch", ".", "cat", "(", "[", "step_t", ",", "jump_t", "]", ")", ".", "unique", "(", "return_counts", "=", "True", ")", "[", "1", "]", "\n", "if", "(", "counts", ">", "1", ")", ".", "any", "(", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"`step_t` and `jump_t` must not have any repeated elements between them.\"", ")", "\n", "\n", "", "self", ".", "step_t", "=", "step_t", "\n", "self", ".", "jump_t", "=", "jump_t", "\n", "self", ".", "next_step_index", "=", "min", "(", "bisect", ".", "bisect", "(", "self", ".", "step_t", ".", "tolist", "(", ")", ",", "t", "[", "0", "]", ")", ",", "len", "(", "self", ".", "step_t", ")", "-", "1", ")", "\n", "self", ".", "next_jump_index", "=", "min", "(", "bisect", ".", "bisect", "(", "self", ".", "jump_t", ".", "tolist", "(", ")", ",", "t", "[", "0", "]", ")", ",", "len", "(", "self", ".", "jump_t", ")", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.rk_common.RKAdaptiveStepsizeODESolver._advance": [[189, 197], ["interp._interp_evaluate", "rk_common.RKAdaptiveStepsizeODESolver._adaptive_step"], "methods", ["home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.interp._interp_evaluate", "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.rk_common.RKAdaptiveStepsizeODESolver._adaptive_step"], ["", "def", "_advance", "(", "self", ",", "next_t", ")", ":", "\n", "        ", "\"\"\"Interpolate through the next time point, integrating as necessary.\"\"\"", "\n", "n_steps", "=", "0", "\n", "while", "next_t", ">", "self", ".", "rk_state", ".", "t1", ":", "\n", "            ", "assert", "n_steps", "<", "self", ".", "max_num_steps", ",", "'max_num_steps exceeded ({}>={})'", ".", "format", "(", "n_steps", ",", "self", ".", "max_num_steps", ")", "\n", "self", ".", "rk_state", "=", "self", ".", "_adaptive_step", "(", "self", ".", "rk_state", ")", "\n", "n_steps", "+=", "1", "\n", "", "return", "_interp_evaluate", "(", "self", ".", "rk_state", ".", "interp_coeff", ",", "self", ".", "rk_state", ".", "t0", ",", "self", ".", "rk_state", ".", "t1", ",", "next_t", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.rk_common.RKAdaptiveStepsizeODESolver._advance_until_event": [[198, 211], ["torch.sign", "event_handling.find_event", "event_fn", "event_fn", "torch.sign", "rk_common.RKAdaptiveStepsizeODESolver._adaptive_step", "interp._interp_evaluate", "event_fn"], "methods", ["home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.event_handling.find_event", "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.examples.bouncing_ball.BouncingBallExample.event_fn", "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.examples.bouncing_ball.BouncingBallExample.event_fn", "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.rk_common.RKAdaptiveStepsizeODESolver._adaptive_step", "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.interp._interp_evaluate", "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.examples.bouncing_ball.BouncingBallExample.event_fn"], ["", "def", "_advance_until_event", "(", "self", ",", "event_fn", ")", ":", "\n", "        ", "\"\"\"Returns t, state(t) such that event_fn(t, state(t)) == 0.\"\"\"", "\n", "if", "event_fn", "(", "self", ".", "rk_state", ".", "t1", ",", "self", ".", "rk_state", ".", "y1", ")", "==", "0", ":", "\n", "            ", "return", "(", "self", ".", "rk_state", ".", "t1", ",", "self", ".", "rk_state", ".", "y1", ")", "\n", "\n", "", "n_steps", "=", "0", "\n", "sign0", "=", "torch", ".", "sign", "(", "event_fn", "(", "self", ".", "rk_state", ".", "t1", ",", "self", ".", "rk_state", ".", "y1", ")", ")", "\n", "while", "sign0", "==", "torch", ".", "sign", "(", "event_fn", "(", "self", ".", "rk_state", ".", "t1", ",", "self", ".", "rk_state", ".", "y1", ")", ")", ":", "\n", "            ", "assert", "n_steps", "<", "self", ".", "max_num_steps", ",", "'max_num_steps exceeded ({}>={})'", ".", "format", "(", "n_steps", ",", "self", ".", "max_num_steps", ")", "\n", "self", ".", "rk_state", "=", "self", ".", "_adaptive_step", "(", "self", ".", "rk_state", ")", "\n", "n_steps", "+=", "1", "\n", "", "interp_fn", "=", "lambda", "t", ":", "_interp_evaluate", "(", "self", ".", "rk_state", ".", "interp_coeff", ",", "self", ".", "rk_state", ".", "t0", ",", "self", ".", "rk_state", ".", "t1", ",", "t", ")", "\n", "return", "find_event", "(", "interp_fn", ",", "sign0", ",", "self", ".", "rk_state", ".", "t0", ",", "self", ".", "rk_state", ".", "t1", ",", "event_fn", ",", "self", ".", "atol", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.rk_common.RKAdaptiveStepsizeODESolver._adaptive_step": [[212, 294], ["torch.isfinite().all", "len", "len", "rk_common._runge_kutta_step", "misc._compute_error_ratio", "misc._optimal_step_size", "_RungeKuttaState", "dt.item", "rk_common.RKAdaptiveStepsizeODESolver._interp_fit", "torch.isfinite", "rk_common.RKAdaptiveStepsizeODESolver.func", "len", "len"], "methods", ["home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.rk_common._runge_kutta_step", "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.misc._compute_error_ratio", "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.misc._optimal_step_size", "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.rk_common.RKAdaptiveStepsizeODESolver._interp_fit"], ["", "def", "_adaptive_step", "(", "self", ",", "rk_state", ")", ":", "\n", "        ", "\"\"\"Take an adaptive Runge-Kutta step to integrate the ODE.\"\"\"", "\n", "y0", ",", "f0", ",", "_", ",", "t0", ",", "dt", ",", "interp_coeff", "=", "rk_state", "\n", "t1", "=", "t0", "+", "dt", "\n", "# dtypes: self.y0.dtype (probably float32); self.dtype (probably float64)", "\n", "# used for state and timelike objects respectively.", "\n", "# Then:", "\n", "# y0.dtype == self.y0.dtype", "\n", "# f0.dtype == self.y0.dtype", "\n", "# t0.dtype == self.dtype", "\n", "# dt.dtype == self.dtype", "\n", "# for coeff in interp_coeff: coeff.dtype == self.y0.dtype", "\n", "\n", "########################################################", "\n", "#                      Assertions                      #", "\n", "########################################################", "\n", "assert", "t0", "+", "dt", ">", "t0", ",", "'underflow in dt {}'", ".", "format", "(", "dt", ".", "item", "(", ")", ")", "\n", "assert", "torch", ".", "isfinite", "(", "y0", ")", ".", "all", "(", ")", ",", "'non-finite values in state `y`: {}'", ".", "format", "(", "y0", ")", "\n", "\n", "########################################################", "\n", "#     Make step, respecting prescribed grid points     #", "\n", "########################################################", "\n", "\n", "on_step_t", "=", "False", "\n", "if", "len", "(", "self", ".", "step_t", ")", ":", "\n", "            ", "next_step_t", "=", "self", ".", "step_t", "[", "self", ".", "next_step_index", "]", "\n", "on_step_t", "=", "t0", "<", "next_step_t", "<", "t0", "+", "dt", "\n", "if", "on_step_t", ":", "\n", "                ", "t1", "=", "next_step_t", "\n", "dt", "=", "t1", "-", "t0", "\n", "\n", "", "", "on_jump_t", "=", "False", "\n", "if", "len", "(", "self", ".", "jump_t", ")", ":", "\n", "            ", "next_jump_t", "=", "self", ".", "jump_t", "[", "self", ".", "next_jump_index", "]", "\n", "on_jump_t", "=", "t0", "<", "next_jump_t", "<", "t0", "+", "dt", "\n", "if", "on_jump_t", ":", "\n", "                ", "on_step_t", "=", "False", "\n", "t1", "=", "next_jump_t", "\n", "dt", "=", "t1", "-", "t0", "\n", "\n", "# Must be arranged as doing all the step_t handling, then all the jump_t handling, in case we", "\n", "# trigger both. (i.e. interleaving them would be wrong.)", "\n", "\n", "", "", "y1", ",", "f1", ",", "y1_error", ",", "k", "=", "_runge_kutta_step", "(", "self", ".", "func", ",", "y0", ",", "f0", ",", "t0", ",", "dt", ",", "t1", ",", "tableau", "=", "self", ".", "tableau", ")", "\n", "# dtypes:", "\n", "# y1.dtype == self.y0.dtype", "\n", "# f1.dtype == self.y0.dtype", "\n", "# y1_error.dtype == self.dtype", "\n", "# k.dtype == self.y0.dtype", "\n", "\n", "########################################################", "\n", "#                     Error Ratio                      #", "\n", "########################################################", "\n", "error_ratio", "=", "_compute_error_ratio", "(", "y1_error", ",", "self", ".", "rtol", ",", "self", ".", "atol", ",", "y0", ",", "y1", ",", "self", ".", "norm", ")", "\n", "accept_step", "=", "error_ratio", "<=", "1", "\n", "# dtypes:", "\n", "# error_ratio.dtype == self.dtype", "\n", "\n", "########################################################", "\n", "#                   Update RK State                    #", "\n", "########################################################", "\n", "if", "accept_step", ":", "\n", "            ", "t_next", "=", "t1", "\n", "y_next", "=", "y1", "\n", "interp_coeff", "=", "self", ".", "_interp_fit", "(", "y0", ",", "y_next", ",", "k", ",", "dt", ")", "\n", "if", "on_step_t", ":", "\n", "                ", "if", "self", ".", "next_step_index", "!=", "len", "(", "self", ".", "step_t", ")", "-", "1", ":", "\n", "                    ", "self", ".", "next_step_index", "+=", "1", "\n", "", "", "if", "on_jump_t", ":", "\n", "                ", "if", "self", ".", "next_jump_index", "!=", "len", "(", "self", ".", "jump_t", ")", "-", "1", ":", "\n", "                    ", "self", ".", "next_jump_index", "+=", "1", "\n", "# We've just passed a discontinuity in f; we should update f to match the side of the discontinuity", "\n", "# we're now on.", "\n", "", "f1", "=", "self", ".", "func", "(", "t_next", ",", "y_next", ",", "perturb", "=", "Perturb", ".", "NEXT", ")", "\n", "", "f_next", "=", "f1", "\n", "", "else", ":", "\n", "            ", "t_next", "=", "t0", "\n", "y_next", "=", "y0", "\n", "f_next", "=", "f0", "\n", "", "dt_next", "=", "_optimal_step_size", "(", "dt", ",", "error_ratio", ",", "self", ".", "safety", ",", "self", ".", "ifactor", ",", "self", ".", "dfactor", ",", "self", ".", "order", ")", "\n", "rk_state", "=", "_RungeKuttaState", "(", "y_next", ",", "f_next", ",", "t0", ",", "t_next", ",", "dt_next", ",", "interp_coeff", ")", "\n", "return", "rk_state", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.rk_common.RKAdaptiveStepsizeODESolver._interp_fit": [[295, 302], ["dt.type_as.type_as.type_as", "interp._interp_fit", "torch.sum().view_as", "torch.sum"], "methods", ["home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.rk_common.RKAdaptiveStepsizeODESolver._interp_fit"], ["", "def", "_interp_fit", "(", "self", ",", "y0", ",", "y1", ",", "k", ",", "dt", ")", ":", "\n", "        ", "\"\"\"Fit an interpolating polynomial to the results of a Runge-Kutta step.\"\"\"", "\n", "dt", "=", "dt", ".", "type_as", "(", "y0", ")", "\n", "y_mid", "=", "y0", "+", "torch", ".", "sum", "(", "k", "*", "(", "dt", "*", "self", ".", "mid", ")", ",", "dim", "=", "-", "1", ")", ".", "view_as", "(", "y0", ")", "\n", "f0", "=", "k", "[", "...", ",", "0", "]", "\n", "f1", "=", "k", "[", "...", ",", "-", "1", "]", "\n", "return", "_interp_fit", "(", "y0", ",", "y1", ",", "y_mid", ",", "f0", ",", "f1", ",", "dt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.rk_common._runge_kutta_step": [[41, 87], ["t0.to.to", "dt.to.to", "t1.to.to", "torch.empty", "_UncheckedAssign.apply", "enumerate", "torch.sum", "zip", "func", "_UncheckedAssign.apply", "len", "torch.sum().view_as", "torch.sum().view_as", "torch.sum", "torch.sum"], "function", ["None"], ["", "", "def", "_runge_kutta_step", "(", "func", ",", "y0", ",", "f0", ",", "t0", ",", "dt", ",", "t1", ",", "tableau", ")", ":", "\n", "    ", "\"\"\"Take an arbitrary Runge-Kutta step and estimate error.\n    Args:\n        func: Function to evaluate like `func(t, y)` to compute the time derivative of `y`.\n        y0: Tensor initial value for the state.\n        f0: Tensor initial value for the derivative, computed from `func(t0, y0)`.\n        t0: float64 scalar Tensor giving the initial time.\n        dt: float64 scalar Tensor giving the size of the desired time step.\n        t1: float64 scalar Tensor giving the end time; equal to t0 + dt. This is used (rather than t0 + dt) to ensure\n            floating point accuracy when needed.\n        tableau: _ButcherTableau describing how to take the Runge-Kutta step.\n    Returns:\n        Tuple `(y1, f1, y1_error, k)` giving the estimated function value after\n        the Runge-Kutta step at `t1 = t0 + dt`, the derivative of the state at `t1`,\n        estimated error at `t1`, and a list of Runge-Kutta coefficients `k` used for\n        calculating these terms.\n    \"\"\"", "\n", "\n", "t0", "=", "t0", ".", "to", "(", "y0", ".", "dtype", ")", "\n", "dt", "=", "dt", ".", "to", "(", "y0", ".", "dtype", ")", "\n", "t1", "=", "t1", ".", "to", "(", "y0", ".", "dtype", ")", "\n", "\n", "# We use an unchecked assign to put data into k without incrementing its _version counter, so that the backward", "\n", "# doesn't throw an (overzealous) error about in-place correctness. We know that it's actually correct.", "\n", "k", "=", "torch", ".", "empty", "(", "*", "f0", ".", "shape", ",", "len", "(", "tableau", ".", "alpha", ")", "+", "1", ",", "dtype", "=", "y0", ".", "dtype", ",", "device", "=", "y0", ".", "device", ")", "\n", "k", "=", "_UncheckedAssign", ".", "apply", "(", "k", ",", "f0", ",", "(", "...", ",", "0", ")", ")", "\n", "for", "i", ",", "(", "alpha_i", ",", "beta_i", ")", "in", "enumerate", "(", "zip", "(", "tableau", ".", "alpha", ",", "tableau", ".", "beta", ")", ")", ":", "\n", "        ", "if", "alpha_i", "==", "1.", ":", "\n", "# Always step to perturbing just before the end time, in case of discontinuities.", "\n", "            ", "ti", "=", "t1", "\n", "perturb", "=", "Perturb", ".", "PREV", "\n", "", "else", ":", "\n", "            ", "ti", "=", "t0", "+", "alpha_i", "*", "dt", "\n", "perturb", "=", "Perturb", ".", "NONE", "\n", "", "yi", "=", "y0", "+", "torch", ".", "sum", "(", "k", "[", "...", ",", ":", "i", "+", "1", "]", "*", "(", "beta_i", "*", "dt", ")", ",", "dim", "=", "-", "1", ")", ".", "view_as", "(", "f0", ")", "\n", "f", "=", "func", "(", "ti", ",", "yi", ",", "perturb", "=", "perturb", ")", "\n", "k", "=", "_UncheckedAssign", ".", "apply", "(", "k", ",", "f", ",", "(", "...", ",", "i", "+", "1", ")", ")", "\n", "\n", "", "if", "not", "(", "tableau", ".", "c_sol", "[", "-", "1", "]", "==", "0", "and", "(", "tableau", ".", "c_sol", "[", ":", "-", "1", "]", "==", "tableau", ".", "beta", "[", "-", "1", "]", ")", ".", "all", "(", ")", ")", ":", "\n", "# This property (true for Dormand-Prince) lets us save a few FLOPs.", "\n", "        ", "yi", "=", "y0", "+", "torch", ".", "sum", "(", "k", "*", "(", "dt", "*", "tableau", ".", "c_sol", ")", ",", "dim", "=", "-", "1", ")", ".", "view_as", "(", "f0", ")", "\n", "\n", "", "y1", "=", "yi", "\n", "f1", "=", "k", "[", "...", ",", "-", "1", "]", "\n", "y1_error", "=", "torch", ".", "sum", "(", "k", "*", "(", "dt", "*", "tableau", ".", "c_error", ")", ",", "dim", "=", "-", "1", ")", "\n", "return", "y1", ",", "f1", ",", "y1_error", ",", "k", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.rk_common.rk4_step_func": [[95, 104], ["func", "func", "func", "func"], "function", ["None"], ["def", "rk4_step_func", "(", "func", ",", "t0", ",", "dt", ",", "t1", ",", "y0", ",", "f0", "=", "None", ",", "perturb", "=", "False", ")", ":", "\n", "    ", "k1", "=", "f0", "\n", "if", "k1", "is", "None", ":", "\n", "        ", "k1", "=", "func", "(", "t0", ",", "y0", ",", "perturb", "=", "Perturb", ".", "NEXT", "if", "perturb", "else", "Perturb", ".", "NONE", ")", "\n", "", "half_dt", "=", "dt", "*", "0.5", "\n", "k2", "=", "func", "(", "t0", "+", "half_dt", ",", "y0", "+", "half_dt", "*", "k1", ")", "\n", "k3", "=", "func", "(", "t0", "+", "half_dt", ",", "y0", "+", "half_dt", "*", "k2", ")", "\n", "k4", "=", "func", "(", "t1", ",", "y0", "+", "dt", "*", "k3", ",", "perturb", "=", "Perturb", ".", "PREV", "if", "perturb", "else", "Perturb", ".", "NONE", ")", "\n", "return", "(", "k1", "+", "2", "*", "(", "k2", "+", "k3", ")", "+", "k4", ")", "*", "dt", "*", "_one_sixth", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.rk_common.rk4_alt_step_func": [[106, 115], ["func", "func", "func", "func"], "function", ["None"], ["", "def", "rk4_alt_step_func", "(", "func", ",", "t0", ",", "dt", ",", "t1", ",", "y0", ",", "f0", "=", "None", ",", "perturb", "=", "False", ")", ":", "\n", "    ", "\"\"\"Smaller error with slightly more compute.\"\"\"", "\n", "k1", "=", "f0", "\n", "if", "k1", "is", "None", ":", "\n", "        ", "k1", "=", "func", "(", "t0", ",", "y0", ",", "perturb", "=", "Perturb", ".", "NEXT", "if", "perturb", "else", "Perturb", ".", "NONE", ")", "\n", "", "k2", "=", "func", "(", "t0", "+", "dt", "*", "_one_third", ",", "y0", "+", "dt", "*", "k1", "*", "_one_third", ")", "\n", "k3", "=", "func", "(", "t0", "+", "dt", "*", "_two_thirds", ",", "y0", "+", "dt", "*", "(", "k2", "-", "k1", "*", "_one_third", ")", ")", "\n", "k4", "=", "func", "(", "t1", ",", "y0", "+", "dt", "*", "(", "k1", "-", "k2", "+", "k3", ")", ",", "perturb", "=", "Perturb", ".", "PREV", "if", "perturb", "else", "Perturb", ".", "NONE", ")", "\n", "return", "(", "k1", "+", "3", "*", "(", "k2", "+", "k3", ")", "+", "k4", ")", "*", "dt", "*", "0.125", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.rk_common._sort_tvals": [[304, 308], ["torch.sort"], "function", ["None"], ["", "", "def", "_sort_tvals", "(", "tvals", ",", "t0", ")", ":", "\n", "# TODO: add warning if tvals come before t0?", "\n", "    ", "tvals", "=", "tvals", "[", "tvals", ">=", "t0", "]", "\n", "return", "torch", ".", "sort", "(", "tvals", ")", ".", "values", "\n", "", ""]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.fixed_adams.AdamsBashforthMoulton.__init__": [[167, 184], ["solvers.FixedGridODESolver.__init__", "torch.as_tensor", "torch.as_tensor", "int", "collections.deque", "warnings.warn", "x.to", "x.to"], "methods", ["home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.misc._PerturbFunc.__init__"], ["def", "__init__", "(", "self", ",", "func", ",", "y0", ",", "rtol", "=", "1e-3", ",", "atol", "=", "1e-4", ",", "implicit", "=", "True", ",", "max_iters", "=", "_MAX_ITERS", ",", "max_order", "=", "_MAX_ORDER", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "AdamsBashforthMoulton", ",", "self", ")", ".", "__init__", "(", "func", ",", "y0", ",", "rtol", "=", "rtol", ",", "atol", "=", "rtol", ",", "**", "kwargs", ")", "\n", "assert", "max_order", "<=", "_MAX_ORDER", ",", "\"max_order must be at most {}\"", ".", "format", "(", "_MAX_ORDER", ")", "\n", "if", "max_order", "<", "_MIN_ORDER", ":", "\n", "            ", "warnings", ".", "warn", "(", "\"max_order is below {}, so the solver reduces to `rk4`.\"", ".", "format", "(", "_MIN_ORDER", ")", ")", "\n", "\n", "", "self", ".", "rtol", "=", "torch", ".", "as_tensor", "(", "rtol", ",", "dtype", "=", "y0", ".", "dtype", ",", "device", "=", "y0", ".", "device", ")", "\n", "self", ".", "atol", "=", "torch", ".", "as_tensor", "(", "atol", ",", "dtype", "=", "y0", ".", "dtype", ",", "device", "=", "y0", ".", "device", ")", "\n", "self", ".", "implicit", "=", "implicit", "\n", "self", ".", "max_iters", "=", "max_iters", "\n", "self", ".", "max_order", "=", "int", "(", "max_order", ")", "\n", "self", ".", "prev_f", "=", "collections", ".", "deque", "(", "maxlen", "=", "self", ".", "max_order", "-", "1", ")", "\n", "self", ".", "prev_t", "=", "None", "\n", "\n", "self", ".", "bashforth", "=", "[", "x", ".", "to", "(", "y0", ".", "device", ")", "for", "x", "in", "_BASHFORTH_DIVISOR", "]", "\n", "self", ".", "moulton", "=", "[", "x", ".", "to", "(", "y0", ".", "device", ")", "for", "x", "in", "_MOULTON_DIVISOR", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.fixed_adams.AdamsBashforthMoulton._update_history": [[185, 189], ["fixed_adams.AdamsBashforthMoulton.prev_f.appendleft"], "methods", ["None"], ["", "def", "_update_history", "(", "self", ",", "t", ",", "f", ")", ":", "\n", "        ", "if", "self", ".", "prev_t", "is", "None", "or", "self", ".", "prev_t", "!=", "t", ":", "\n", "            ", "self", ".", "prev_f", ".", "appendleft", "(", "f", ")", "\n", "self", ".", "prev_t", "=", "t", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.fixed_adams.AdamsBashforthMoulton._has_converged": [[190, 194], ["misc._compute_error_ratio", "torch.abs"], "methods", ["home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.misc._compute_error_ratio"], ["", "", "def", "_has_converged", "(", "self", ",", "y0", ",", "y1", ")", ":", "\n", "        ", "\"\"\"Checks that each element is within the error tolerance.\"\"\"", "\n", "error_ratio", "=", "_compute_error_ratio", "(", "torch", ".", "abs", "(", "y0", "-", "y1", ")", ",", "self", ".", "rtol", ",", "self", ".", "atol", ",", "y0", ",", "y1", ",", "_linf_norm", ")", "\n", "return", "error_ratio", "<", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.fixed_adams.AdamsBashforthMoulton._step_func": [[195, 224], ["func", "fixed_adams.AdamsBashforthMoulton._update_history", "min", "len", "_dot_product().type_as", "rk_common.rk4_alt_step_func", "range", "fixed_adams.AdamsBashforthMoulton._update_history", "fixed_adams._dot_product", "_dot_product().type_as", "func", "fixed_adams.AdamsBashforthMoulton._has_converged", "warnings.warn", "fixed_adams.AdamsBashforthMoulton.prev_f.pop", "fixed_adams._dot_product"], "methods", ["home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.fixed_adams.AdamsBashforthMoulton._update_history", "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.rk_common.rk4_alt_step_func", "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.fixed_adams.AdamsBashforthMoulton._update_history", "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.fixed_adams._dot_product", "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.fixed_adams.AdamsBashforthMoulton._has_converged", "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.fixed_adams._dot_product"], ["", "def", "_step_func", "(", "self", ",", "func", ",", "t0", ",", "dt", ",", "t1", ",", "y0", ")", ":", "\n", "        ", "f0", "=", "func", "(", "t0", ",", "y0", ",", "perturb", "=", "Perturb", ".", "NEXT", "if", "self", ".", "perturb", "else", "Perturb", ".", "NONE", ")", "\n", "self", ".", "_update_history", "(", "t0", ",", "f0", ")", "\n", "order", "=", "min", "(", "len", "(", "self", ".", "prev_f", ")", ",", "self", ".", "max_order", "-", "1", ")", "\n", "if", "order", "<", "_MIN_ORDER", "-", "1", ":", "\n", "# Compute using RK4.", "\n", "            ", "return", "rk4_alt_step_func", "(", "func", ",", "t0", ",", "dt", ",", "t1", ",", "y0", ",", "f0", "=", "self", ".", "prev_f", "[", "0", "]", ",", "perturb", "=", "self", ".", "perturb", ")", ",", "f0", "\n", "", "else", ":", "\n", "# Adams-Bashforth predictor.", "\n", "            ", "bashforth_coeffs", "=", "self", ".", "bashforth", "[", "order", "]", "\n", "dy", "=", "_dot_product", "(", "dt", "*", "bashforth_coeffs", ",", "self", ".", "prev_f", ")", ".", "type_as", "(", "y0", ")", "# bashforth is float64 so cast back", "\n", "\n", "# Adams-Moulton corrector.", "\n", "if", "self", ".", "implicit", ":", "\n", "                ", "moulton_coeffs", "=", "self", ".", "moulton", "[", "order", "+", "1", "]", "\n", "delta", "=", "dt", "*", "_dot_product", "(", "moulton_coeffs", "[", "1", ":", "]", ",", "self", ".", "prev_f", ")", ".", "type_as", "(", "y0", ")", "# moulton is float64 so cast back", "\n", "converged", "=", "False", "\n", "for", "_", "in", "range", "(", "self", ".", "max_iters", ")", ":", "\n", "                    ", "dy_old", "=", "dy", "\n", "f", "=", "func", "(", "t1", ",", "y0", "+", "dy", ",", "perturb", "=", "Perturb", ".", "PREV", "if", "self", ".", "perturb", "else", "Perturb", ".", "NONE", ")", "\n", "dy", "=", "(", "dt", "*", "(", "moulton_coeffs", "[", "0", "]", ")", "*", "f", ")", ".", "type_as", "(", "y0", ")", "+", "delta", "# moulton is float64 so cast back", "\n", "converged", "=", "self", ".", "_has_converged", "(", "dy_old", ",", "dy", ")", "\n", "if", "converged", ":", "\n", "                        ", "break", "\n", "", "", "if", "not", "converged", ":", "\n", "                    ", "warnings", ".", "warn", "(", "'Functional iteration did not converge. Solution may be incorrect.'", ")", "\n", "self", ".", "prev_f", ".", "pop", "(", ")", "\n", "", "self", ".", "_update_history", "(", "t0", ",", "f", ")", "\n", "", "return", "dy", ",", "f0", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.fixed_adams.AdamsBashforth.__init__": [[227, 229], ["fixed_adams.AdamsBashforthMoulton.__init__"], "methods", ["home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.misc._PerturbFunc.__init__"], ["    ", "def", "__init__", "(", "self", ",", "func", ",", "y0", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "AdamsBashforth", ",", "self", ")", ".", "__init__", "(", "func", ",", "y0", ",", "implicit", "=", "False", ",", "**", "kwargs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.fixed_adams._dot_product": [[160, 162], ["sum", "zip"], "function", ["None"], ["def", "_dot_product", "(", "x", ",", "y", ")", ":", "\n", "    ", "return", "sum", "(", "xi", "*", "yi", "for", "xi", ",", "yi", "in", "zip", "(", "x", ",", "y", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.scipy_wrapper.ScipyWrapperODESolver.__init__": [[9, 24], ["unused_kwargs.pop", "unused_kwargs.pop", "unused_kwargs.pop", "misc._handle_unused_kwargs", "y0.detach().cpu().numpy().reshape", "scipy_wrapper.convert_func_to_numpy", "y0.detach().cpu().numpy", "y0.detach().cpu", "y0.detach"], "methods", ["home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.misc._handle_unused_kwargs", "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.scipy_wrapper.convert_func_to_numpy"], ["    ", "def", "__init__", "(", "self", ",", "func", ",", "y0", ",", "rtol", ",", "atol", ",", "solver", "=", "\"LSODA\"", ",", "**", "unused_kwargs", ")", ":", "\n", "        ", "unused_kwargs", ".", "pop", "(", "'norm'", ",", "None", ")", "\n", "unused_kwargs", ".", "pop", "(", "'grid_points'", ",", "None", ")", "\n", "unused_kwargs", ".", "pop", "(", "'eps'", ",", "None", ")", "\n", "_handle_unused_kwargs", "(", "self", ",", "unused_kwargs", ")", "\n", "del", "unused_kwargs", "\n", "\n", "self", ".", "dtype", "=", "y0", ".", "dtype", "\n", "self", ".", "device", "=", "y0", ".", "device", "\n", "self", ".", "shape", "=", "y0", ".", "shape", "\n", "self", ".", "y0", "=", "y0", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "reshape", "(", "-", "1", ")", "\n", "self", ".", "rtol", "=", "rtol", "\n", "self", ".", "atol", "=", "atol", "\n", "self", ".", "solver", "=", "solver", "\n", "self", ".", "func", "=", "convert_func_to_numpy", "(", "func", ",", "self", ".", "shape", ",", "self", ".", "device", ",", "self", ".", "dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.scipy_wrapper.ScipyWrapperODESolver.integrate": [[25, 41], ["t.detach().cpu().numpy.detach().cpu().numpy.detach().cpu().numpy", "scipy.integrate.solve_ivp", "torch.tensor().T.to", "sol.reshape.reshape.reshape", "t.detach().cpu().numpy.detach().cpu().numpy.numel", "[].to", "t.detach().cpu().numpy.detach().cpu().numpy.detach().cpu", "t.detach().cpu().numpy.detach().cpu().numpy.min", "t.detach().cpu().numpy.detach().cpu().numpy.max", "torch.tensor", "torch.tensor", "t.detach().cpu().numpy.detach().cpu().numpy.detach"], "methods", ["None"], ["", "def", "integrate", "(", "self", ",", "t", ")", ":", "\n", "        ", "if", "t", ".", "numel", "(", ")", "==", "1", ":", "\n", "            ", "return", "torch", ".", "tensor", "(", "self", ".", "y0", ")", "[", "None", "]", ".", "to", "(", "self", ".", "device", ",", "self", ".", "dtype", ")", "\n", "", "t", "=", "t", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "sol", "=", "solve_ivp", "(", "\n", "self", ".", "func", ",", "\n", "t_span", "=", "[", "t", ".", "min", "(", ")", ",", "t", ".", "max", "(", ")", "]", ",", "\n", "y0", "=", "self", ".", "y0", ",", "\n", "t_eval", "=", "t", ",", "\n", "method", "=", "self", ".", "solver", ",", "\n", "rtol", "=", "self", ".", "rtol", ",", "\n", "atol", "=", "self", ".", "atol", ",", "\n", ")", "\n", "sol", "=", "torch", ".", "tensor", "(", "sol", ".", "y", ")", ".", "T", ".", "to", "(", "self", ".", "device", ",", "self", ".", "dtype", ")", "\n", "sol", "=", "sol", ".", "reshape", "(", "-", "1", ",", "*", "self", ".", "shape", ")", "\n", "return", "sol", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.scipy_wrapper.convert_func_to_numpy": [[43, 53], ["torch.tensor().to", "torch.reshape", "func.detach().cpu().numpy().reshape", "torch.tensor().to", "torch.no_grad", "func", "torch.tensor", "func.detach().cpu().numpy", "torch.tensor", "func.detach().cpu", "func.detach"], "function", ["None"], ["", "", "def", "convert_func_to_numpy", "(", "func", ",", "shape", ",", "device", ",", "dtype", ")", ":", "\n", "\n", "    ", "def", "np_func", "(", "t", ",", "y", ")", ":", "\n", "        ", "t", "=", "torch", ".", "tensor", "(", "t", ")", ".", "to", "(", "device", ",", "dtype", ")", "\n", "y", "=", "torch", ".", "reshape", "(", "torch", ".", "tensor", "(", "y", ")", ".", "to", "(", "device", ",", "dtype", ")", ",", "shape", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "f", "=", "func", "(", "t", ",", "y", ")", "\n", "", "return", "f", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "reshape", "(", "-", "1", ")", "\n", "\n", "", "return", "np_func", "\n", "", ""]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.odeint.ImplicitFnGradientRerouting.forward": [[132, 139], ["ctx.save_for_backward", "event_t.detach", "state_t.detach"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "func", ",", "event_fn", ",", "event_t", ",", "state_t", ")", ":", "\n", "        ", "\"\"\" event_t is the solution to event_fn \"\"\"", "\n", "ctx", ".", "func", "=", "func", "\n", "ctx", ".", "event_fn", "=", "event_fn", "\n", "ctx", ".", "save_for_backward", "(", "event_t", ",", "state_t", ")", "\n", "return", "event_t", ".", "detach", "(", ")", ",", "state_t", ".", "detach", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.odeint.ImplicitFnGradientRerouting.backward": [[140, 165], ["event_t.detach().clone().requires_grad_.detach().clone().requires_grad_.detach().clone().requires_grad_", "state_t.detach().clone().requires_grad_.detach().clone().requires_grad_.detach().clone().requires_grad_", "func", "torch.enable_grad", "torch.autograd.functional.vjp", "torch.sum", "torch.sum", "event_t.detach().clone().requires_grad_.detach().clone().requires_grad_.detach().clone", "state_t.detach().clone().requires_grad_.detach().clone().requires_grad_.detach().clone", "event_t.detach().clone().requires_grad_.detach().clone().requires_grad_.detach", "state_t.detach().clone().requires_grad_.detach().clone().requires_grad_.detach"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_t", ",", "grad_state", ")", ":", "\n", "        ", "func", "=", "ctx", ".", "func", "\n", "event_fn", "=", "ctx", ".", "event_fn", "\n", "event_t", ",", "state_t", "=", "ctx", ".", "saved_tensors", "\n", "\n", "event_t", "=", "event_t", ".", "detach", "(", ")", ".", "clone", "(", ")", ".", "requires_grad_", "(", "True", ")", "\n", "state_t", "=", "state_t", ".", "detach", "(", ")", ".", "clone", "(", ")", ".", "requires_grad_", "(", "True", ")", "\n", "\n", "f_val", "=", "func", "(", "event_t", ",", "state_t", ")", "\n", "\n", "with", "torch", ".", "enable_grad", "(", ")", ":", "\n", "            ", "c", ",", "(", "par_dt", ",", "dstate", ")", "=", "vjp", "(", "event_fn", ",", "(", "event_t", ",", "state_t", ")", ")", "\n", "\n", "# Total derivative of event_fn wrt t evaluated at event_t.", "\n", "", "dcdt", "=", "par_dt", "+", "torch", ".", "sum", "(", "dstate", "*", "f_val", ")", "\n", "\n", "# Add the gradient from final state to final time value as if a regular odeint was called.", "\n", "grad_t", "=", "grad_t", "+", "torch", ".", "sum", "(", "grad_state", "*", "f_val", ")", "\n", "\n", "dstate", "=", "dstate", "*", "(", "-", "grad_t", "/", "(", "dcdt", "+", "1e-12", ")", ")", ".", "reshape_as", "(", "c", ")", "\n", "\n", "grad_state", "=", "grad_state", "+", "dstate", "\n", "\n", "return", "None", ",", "None", ",", "None", ",", "grad_state", "\n", "", "", ""]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.odeint.odeint": [[31, 91], ["misc._check_inputs", "solver.integrate", "solver.integrate_until_event", "event_t.to.to", "misc._flat_to_shape", "len"], "function", ["home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.misc._check_inputs", "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.solvers.FixedGridODESolver.integrate", "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.solvers.FixedGridODESolver.integrate_until_event", "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.misc._flat_to_shape"], ["def", "odeint", "(", "func", ",", "y0", ",", "t", ",", "*", ",", "rtol", "=", "1e-7", ",", "atol", "=", "1e-9", ",", "method", "=", "None", ",", "options", "=", "None", ",", "event_fn", "=", "None", ")", ":", "\n", "    ", "\"\"\"Integrate a system of ordinary differential equations.\n\n    Solves the initial value problem for a non-stiff system of first order ODEs:\n        ```\n        dy/dt = func(t, y), y(t[0]) = y0\n        ```\n    where y is a Tensor or tuple of Tensors of any shape.\n\n    Output dtypes and numerical precision are based on the dtypes of the inputs `y0`.\n\n    Args:\n        func: Function that maps a scalar Tensor `t` and a Tensor holding the state `y`\n            into a Tensor of state derivatives with respect to time. Optionally, `y`\n            can also be a tuple of Tensors.\n        y0: N-D Tensor giving starting value of `y` at time point `t[0]`. Optionally, `y0`\n            can also be a tuple of Tensors.\n        t: 1-D Tensor holding a sequence of time points for which to solve for\n            `y`, in either increasing or decreasing order. The first element of\n            this sequence is taken to be the initial time point.\n        rtol: optional float64 Tensor specifying an upper bound on relative error,\n            per element of `y`.\n        atol: optional float64 Tensor specifying an upper bound on absolute error,\n            per element of `y`.\n        method: optional string indicating the integration method to use.\n        options: optional dict of configuring options for the indicated integration\n            method. Can only be provided if a `method` is explicitly set.\n        event_fn: Function that maps the state `y` to a Tensor. The solve terminates when\n            event_fn evaluates to zero. If this is not None, all but the first elements of\n            `t` are ignored.\n\n    Returns:\n        y: Tensor, where the first dimension corresponds to different\n            time points. Contains the solved value of y for each desired time point in\n            `t`, with the initial value `y0` being the first element along the first\n            dimension.\n\n    Raises:\n        ValueError: if an invalid `method` is provided.\n    \"\"\"", "\n", "\n", "shapes", ",", "func", ",", "y0", ",", "t", ",", "rtol", ",", "atol", ",", "method", ",", "options", ",", "event_fn", ",", "t_is_reversed", "=", "_check_inputs", "(", "func", ",", "y0", ",", "t", ",", "rtol", ",", "atol", ",", "method", ",", "options", ",", "event_fn", ",", "SOLVERS", ")", "\n", "\n", "solver", "=", "SOLVERS", "[", "method", "]", "(", "func", "=", "func", ",", "y0", "=", "y0", ",", "rtol", "=", "rtol", ",", "atol", "=", "atol", ",", "**", "options", ")", "\n", "\n", "if", "event_fn", "is", "None", ":", "\n", "        ", "solution", "=", "solver", ".", "integrate", "(", "t", ")", "\n", "", "else", ":", "\n", "        ", "event_t", ",", "solution", "=", "solver", ".", "integrate_until_event", "(", "t", "[", "0", "]", ",", "event_fn", ")", "\n", "event_t", "=", "event_t", ".", "to", "(", "t", ")", "\n", "if", "t_is_reversed", ":", "\n", "            ", "event_t", "=", "-", "event_t", "\n", "\n", "", "", "if", "shapes", "is", "not", "None", ":", "\n", "        ", "solution", "=", "_flat_to_shape", "(", "solution", ",", "(", "len", "(", "t", ")", ",", ")", ",", "shapes", ")", "\n", "\n", "", "if", "event_fn", "is", "None", ":", "\n", "        ", "return", "solution", "\n", "", "else", ":", "\n", "        ", "return", "event_t", ",", "solution", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.odeint.odeint_event": [[93, 128], ["odeint_interface", "misc._check_inputs", "ImplicitFnGradientRerouting.apply", "torch.cat", "torch.cat", "torch.cat", "misc._flat_to_shape", "tuple", "torch.cat", "t0.reshape", "t0.reshape", "s[].reshape", "torch.cat", "t0.reshape().detach", "t0.reshape().detach", "zip", "t0.reshape", "t0.reshape"], "function", ["home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.misc._check_inputs", "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.misc._flat_to_shape"], ["", "", "def", "odeint_event", "(", "func", ",", "y0", ",", "t0", ",", "*", ",", "event_fn", ",", "reverse_time", "=", "False", ",", "odeint_interface", "=", "odeint", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Automatically links up the gradient from the event time.\"\"\"", "\n", "\n", "if", "reverse_time", ":", "\n", "        ", "t", "=", "torch", ".", "cat", "(", "[", "t0", ".", "reshape", "(", "-", "1", ")", ",", "t0", ".", "reshape", "(", "-", "1", ")", ".", "detach", "(", ")", "-", "1.0", "]", ")", "\n", "", "else", ":", "\n", "        ", "t", "=", "torch", ".", "cat", "(", "[", "t0", ".", "reshape", "(", "-", "1", ")", ",", "t0", ".", "reshape", "(", "-", "1", ")", ".", "detach", "(", ")", "+", "1.0", "]", ")", "\n", "\n", "", "event_t", ",", "solution", "=", "odeint_interface", "(", "func", ",", "y0", ",", "t", ",", "event_fn", "=", "event_fn", ",", "**", "kwargs", ")", "\n", "\n", "# Dummy values for rtol, atol, method, and options.", "\n", "shapes", ",", "_func", ",", "_", ",", "t", ",", "_", ",", "_", ",", "_", ",", "_", ",", "event_fn", ",", "_", "=", "_check_inputs", "(", "func", ",", "y0", ",", "t", ",", "0.0", ",", "0.0", ",", "None", ",", "None", ",", "event_fn", ",", "SOLVERS", ")", "\n", "\n", "if", "shapes", "is", "not", "None", ":", "\n", "        ", "state_t", "=", "torch", ".", "cat", "(", "[", "s", "[", "-", "1", "]", ".", "reshape", "(", "-", "1", ")", "for", "s", "in", "solution", "]", ")", "\n", "", "else", ":", "\n", "        ", "state_t", "=", "solution", "[", "-", "1", "]", "\n", "\n", "# Event_fn takes in negated time value if reverse_time is True.", "\n", "", "if", "reverse_time", ":", "\n", "        ", "event_t", "=", "-", "event_t", "\n", "\n", "", "event_t", ",", "state_t", "=", "ImplicitFnGradientRerouting", ".", "apply", "(", "_func", ",", "event_fn", ",", "event_t", ",", "state_t", ")", "\n", "\n", "# Return the user expected time value.", "\n", "if", "reverse_time", ":", "\n", "        ", "event_t", "=", "-", "event_t", "\n", "\n", "", "if", "shapes", "is", "not", "None", ":", "\n", "        ", "state_t", "=", "_flat_to_shape", "(", "state_t", ",", "(", ")", ",", "shapes", ")", "\n", "solution", "=", "tuple", "(", "torch", ".", "cat", "(", "[", "s", "[", ":", "-", "1", "]", ",", "s_t", "[", "None", "]", "]", ",", "dim", "=", "0", ")", "for", "s", ",", "s_t", "in", "zip", "(", "solution", ",", "state_t", ")", ")", "\n", "", "else", ":", "\n", "        ", "solution", "=", "torch", ".", "cat", "(", "[", "solution", "[", ":", "-", "1", "]", ",", "state_t", "[", "None", "]", "]", ",", "dim", "=", "0", ")", "\n", "\n", "", "return", "event_t", ",", "solution", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.adjoint.OdeintAdjointMethod.forward": [[11, 35], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "odeint.odeint.odeint", "ctx.save_for_backward", "ctx.save_for_backward"], "methods", ["home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.odeint.odeint"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "shapes", ",", "func", ",", "y0", ",", "t", ",", "rtol", ",", "atol", ",", "method", ",", "options", ",", "event_fn", ",", "adjoint_rtol", ",", "adjoint_atol", ",", "adjoint_method", ",", "\n", "adjoint_options", ",", "t_requires_grad", ",", "*", "adjoint_params", ")", ":", "\n", "\n", "        ", "ctx", ".", "shapes", "=", "shapes", "\n", "ctx", ".", "func", "=", "func", "\n", "ctx", ".", "adjoint_rtol", "=", "adjoint_rtol", "\n", "ctx", ".", "adjoint_atol", "=", "adjoint_atol", "\n", "ctx", ".", "adjoint_method", "=", "adjoint_method", "\n", "ctx", ".", "adjoint_options", "=", "adjoint_options", "\n", "ctx", ".", "t_requires_grad", "=", "t_requires_grad", "\n", "ctx", ".", "event_mode", "=", "event_fn", "is", "not", "None", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "ans", "=", "odeint", "(", "func", ",", "y0", ",", "t", ",", "rtol", "=", "rtol", ",", "atol", "=", "atol", ",", "method", "=", "method", ",", "options", "=", "options", ",", "event_fn", "=", "event_fn", ")", "\n", "\n", "if", "event_fn", "is", "None", ":", "\n", "                ", "y", "=", "ans", "\n", "ctx", ".", "save_for_backward", "(", "t", ",", "y", ",", "*", "adjoint_params", ")", "\n", "", "else", ":", "\n", "                ", "event_t", ",", "y", "=", "ans", "\n", "ctx", ".", "save_for_backward", "(", "t", ",", "y", ",", "event_t", ",", "*", "adjoint_params", ")", "\n", "\n", "", "", "return", "ans", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.adjoint.OdeintAdjointMethod.backward": [[36, 146], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "tuple", "odeint.odeint.odeint.extend", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "odeint.odeint.odeint", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "t.detach.requires_grad_.detach", "t_.requires_grad_.detach.requires_grad_", "y.detach().requires_grad_.detach().requires_grad_.detach().requires_grad_", "func", "torch.as_strided", "torch.as_strided", "torch.as_strided", "torch.as_strided", "torch.as_strided", "torch.as_strided", "torch.as_strided", "torch.as_strided", "tuple", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "len", "len", "func", "func.reshape().dot", "tuple", "t[].flip", "t[].reshape", "event_t.reshape", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "zip", "grad_y[].reshape", "time_vjps[].reshape", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "y.detach().requires_grad_.detach().requires_grad_.detach", "torch.as_strided", "torch.as_strided", "torch.as_strided", "torch.as_strided", "func.reshape"], "methods", ["home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.odeint.odeint"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "*", "grad_y", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "func", "=", "ctx", ".", "func", "\n", "adjoint_rtol", "=", "ctx", ".", "adjoint_rtol", "\n", "adjoint_atol", "=", "ctx", ".", "adjoint_atol", "\n", "adjoint_method", "=", "ctx", ".", "adjoint_method", "\n", "adjoint_options", "=", "ctx", ".", "adjoint_options", "\n", "t_requires_grad", "=", "ctx", ".", "t_requires_grad", "\n", "\n", "# Backprop as if integrating up to event time.", "\n", "# Does NOT backpropagate through the event time.", "\n", "event_mode", "=", "ctx", ".", "event_mode", "\n", "if", "event_mode", ":", "\n", "                ", "t", ",", "y", ",", "event_t", ",", "*", "adjoint_params", "=", "ctx", ".", "saved_tensors", "\n", "_t", "=", "t", "\n", "t", "=", "torch", ".", "cat", "(", "[", "t", "[", "0", "]", ".", "reshape", "(", "-", "1", ")", ",", "event_t", ".", "reshape", "(", "-", "1", ")", "]", ")", "\n", "grad_y", "=", "grad_y", "[", "1", "]", "\n", "", "else", ":", "\n", "                ", "t", ",", "y", ",", "*", "adjoint_params", "=", "ctx", ".", "saved_tensors", "\n", "grad_y", "=", "grad_y", "[", "0", "]", "\n", "\n", "", "adjoint_params", "=", "tuple", "(", "adjoint_params", ")", "\n", "\n", "##################################", "\n", "#      Set up initial state      #", "\n", "##################################", "\n", "\n", "# [-1] because y and grad_y are both of shape (len(t), *y0.shape)", "\n", "aug_state", "=", "[", "torch", ".", "zeros", "(", "(", ")", ",", "dtype", "=", "y", ".", "dtype", ",", "device", "=", "y", ".", "device", ")", ",", "y", "[", "-", "1", "]", ",", "grad_y", "[", "-", "1", "]", "]", "# vjp_t, y, vjp_y", "\n", "aug_state", ".", "extend", "(", "[", "torch", ".", "zeros_like", "(", "param", ")", "for", "param", "in", "adjoint_params", "]", ")", "# vjp_params", "\n", "\n", "##################################", "\n", "#    Set up backward ODE func    #", "\n", "##################################", "\n", "\n", "# TODO: use a nn.Module and call odeint_adjoint to implement higher order derivatives.", "\n", "def", "augmented_dynamics", "(", "t", ",", "y_aug", ")", ":", "\n", "# Dynamics of the original system augmented with", "\n", "# the adjoint wrt y, and an integrator wrt t and args.", "\n", "                ", "y", "=", "y_aug", "[", "1", "]", "\n", "adj_y", "=", "y_aug", "[", "2", "]", "\n", "# ignore gradients wrt time and parameters", "\n", "\n", "with", "torch", ".", "enable_grad", "(", ")", ":", "\n", "                    ", "t_", "=", "t", ".", "detach", "(", ")", "\n", "t", "=", "t_", ".", "requires_grad_", "(", "True", ")", "\n", "y", "=", "y", ".", "detach", "(", ")", ".", "requires_grad_", "(", "True", ")", "\n", "\n", "# If using an adaptive solver we don't want to waste time resolving dL/dt unless we need it (which", "\n", "# doesn't necessarily even exist if there is piecewise structure in time), so turning off gradients", "\n", "# wrt t here means we won't compute that if we don't need it.", "\n", "func_eval", "=", "func", "(", "t", "if", "t_requires_grad", "else", "t_", ",", "y", ")", "\n", "\n", "# Workaround for PyTorch bug #39784", "\n", "_t", "=", "torch", ".", "as_strided", "(", "t", ",", "(", ")", ",", "(", ")", ")", "# noqa", "\n", "_y", "=", "torch", ".", "as_strided", "(", "y", ",", "(", ")", ",", "(", ")", ")", "# noqa", "\n", "_params", "=", "tuple", "(", "torch", ".", "as_strided", "(", "param", ",", "(", ")", ",", "(", ")", ")", "for", "param", "in", "adjoint_params", ")", "# noqa", "\n", "\n", "vjp_t", ",", "vjp_y", ",", "*", "vjp_params", "=", "torch", ".", "autograd", ".", "grad", "(", "\n", "func_eval", ",", "(", "t", ",", "y", ")", "+", "adjoint_params", ",", "-", "adj_y", ",", "\n", "allow_unused", "=", "True", ",", "retain_graph", "=", "True", "\n", ")", "\n", "\n", "# autograd.grad returns None if no gradient, set to zero.", "\n", "", "vjp_t", "=", "torch", ".", "zeros_like", "(", "t", ")", "if", "vjp_t", "is", "None", "else", "vjp_t", "\n", "vjp_y", "=", "torch", ".", "zeros_like", "(", "y", ")", "if", "vjp_y", "is", "None", "else", "vjp_y", "\n", "vjp_params", "=", "[", "torch", ".", "zeros_like", "(", "param", ")", "if", "vjp_param", "is", "None", "else", "vjp_param", "\n", "for", "param", ",", "vjp_param", "in", "zip", "(", "adjoint_params", ",", "vjp_params", ")", "]", "\n", "\n", "return", "(", "vjp_t", ",", "func_eval", ",", "vjp_y", ",", "*", "vjp_params", ")", "\n", "\n", "##################################", "\n", "#       Solve adjoint ODE        #", "\n", "##################################", "\n", "\n", "", "if", "t_requires_grad", ":", "\n", "                ", "time_vjps", "=", "torch", ".", "empty", "(", "len", "(", "t", ")", ",", "dtype", "=", "t", ".", "dtype", ",", "device", "=", "t", ".", "device", ")", "\n", "", "else", ":", "\n", "                ", "time_vjps", "=", "None", "\n", "", "for", "i", "in", "range", "(", "len", "(", "t", ")", "-", "1", ",", "0", ",", "-", "1", ")", ":", "\n", "                ", "if", "t_requires_grad", ":", "\n", "# Compute the effect of moving the current time measurement point.", "\n", "# We don't compute this unless we need to, to save some computation.", "\n", "                    ", "func_eval", "=", "func", "(", "t", "[", "i", "]", ",", "y", "[", "i", "]", ")", "\n", "dLd_cur_t", "=", "func_eval", ".", "reshape", "(", "-", "1", ")", ".", "dot", "(", "grad_y", "[", "i", "]", ".", "reshape", "(", "-", "1", ")", ")", "\n", "aug_state", "[", "0", "]", "-=", "dLd_cur_t", "\n", "time_vjps", "[", "i", "]", "=", "dLd_cur_t", "\n", "\n", "# Run the augmented system backwards in time.", "\n", "", "aug_state", "=", "odeint", "(", "\n", "augmented_dynamics", ",", "tuple", "(", "aug_state", ")", ",", "\n", "t", "[", "i", "-", "1", ":", "i", "+", "1", "]", ".", "flip", "(", "0", ")", ",", "\n", "rtol", "=", "adjoint_rtol", ",", "atol", "=", "adjoint_atol", ",", "method", "=", "adjoint_method", ",", "options", "=", "adjoint_options", "\n", ")", "\n", "aug_state", "=", "[", "a", "[", "1", "]", "for", "a", "in", "aug_state", "]", "# extract just the t[i - 1] value", "\n", "aug_state", "[", "1", "]", "=", "y", "[", "i", "-", "1", "]", "# update to use our forward-pass estimate of the state", "\n", "aug_state", "[", "2", "]", "+=", "grad_y", "[", "i", "-", "1", "]", "# update any gradients wrt state at this time point", "\n", "\n", "", "if", "t_requires_grad", ":", "\n", "                ", "time_vjps", "[", "0", "]", "=", "aug_state", "[", "0", "]", "\n", "\n", "# Only compute gradient wrt initial time when in event handling mode.", "\n", "", "if", "event_mode", "and", "t_requires_grad", ":", "\n", "                ", "time_vjps", "=", "torch", ".", "cat", "(", "[", "time_vjps", "[", "0", "]", ".", "reshape", "(", "-", "1", ")", ",", "torch", ".", "zeros_like", "(", "_t", "[", "1", ":", "]", ")", "]", ")", "\n", "\n", "", "adj_y", "=", "aug_state", "[", "2", "]", "\n", "adj_params", "=", "aug_state", "[", "3", ":", "]", "\n", "\n", "", "return", "(", "None", ",", "None", ",", "adj_y", ",", "time_vjps", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "*", "adj_params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.adjoint.odeint_adjoint": [[148, 216], ["len", "tuple", "misc._check_inputs", "adjoint.handle_adjoint_norm_", "OdeintAdjointMethod.apply", "ValueError", "ValueError", "adjoint_options.copy.copy", "tuple", "tuple", "len", "event_t.to.to", "misc._flat_to_shape", "isinstance", "adjoint.find_parameters", "callable", "warnings.warn", "len", "options.items"], "function", ["home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.misc._check_inputs", "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.adjoint.handle_adjoint_norm_", "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.misc._flat_to_shape", "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.adjoint.find_parameters"], ["", "", "def", "odeint_adjoint", "(", "func", ",", "y0", ",", "t", ",", "*", ",", "rtol", "=", "1e-7", ",", "atol", "=", "1e-9", ",", "method", "=", "None", ",", "options", "=", "None", ",", "event_fn", "=", "None", ",", "\n", "adjoint_rtol", "=", "None", ",", "adjoint_atol", "=", "None", ",", "adjoint_method", "=", "None", ",", "adjoint_options", "=", "None", ",", "adjoint_params", "=", "None", ")", ":", "\n", "\n", "# We need this in order to access the variables inside this module,", "\n", "# since we have no other way of getting variables along the execution path.", "\n", "    ", "if", "adjoint_params", "is", "None", "and", "not", "isinstance", "(", "func", ",", "nn", ".", "Module", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'func must be an instance of nn.Module to specify the adjoint parameters; alternatively they '", "\n", "'can be specified explicitly via the `adjoint_params` argument. If there are no parameters '", "\n", "'then it is allowable to set `adjoint_params=()`.'", ")", "\n", "\n", "# Must come before _check_inputs as we don't want to use normalised input (in particular any changes to options)", "\n", "", "if", "adjoint_rtol", "is", "None", ":", "\n", "        ", "adjoint_rtol", "=", "rtol", "\n", "", "if", "adjoint_atol", "is", "None", ":", "\n", "        ", "adjoint_atol", "=", "atol", "\n", "", "if", "adjoint_method", "is", "None", ":", "\n", "        ", "adjoint_method", "=", "method", "\n", "\n", "", "if", "adjoint_method", "!=", "method", "and", "options", "is", "not", "None", "and", "adjoint_options", "is", "None", ":", "\n", "        ", "raise", "ValueError", "(", "\"If `adjoint_method != method` then we cannot infer `adjoint_options` from `options`. So as \"", "\n", "\"`options` has been passed then `adjoint_options` must be passed as well.\"", ")", "\n", "\n", "", "if", "adjoint_options", "is", "None", ":", "\n", "        ", "adjoint_options", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "options", ".", "items", "(", ")", "if", "k", "!=", "\"norm\"", "}", "if", "options", "is", "not", "None", "else", "{", "}", "\n", "", "else", ":", "\n", "# Avoid in-place modifying a user-specified dict.", "\n", "        ", "adjoint_options", "=", "adjoint_options", ".", "copy", "(", ")", "\n", "\n", "", "if", "adjoint_params", "is", "None", ":", "\n", "        ", "adjoint_params", "=", "tuple", "(", "find_parameters", "(", "func", ")", ")", "\n", "", "else", ":", "\n", "        ", "adjoint_params", "=", "tuple", "(", "adjoint_params", ")", "# in case adjoint_params is a generator.", "\n", "\n", "# Filter params that don't require gradients.", "\n", "", "oldlen_", "=", "len", "(", "adjoint_params", ")", "\n", "adjoint_params", "=", "tuple", "(", "p", "for", "p", "in", "adjoint_params", "if", "p", ".", "requires_grad", ")", "\n", "if", "len", "(", "adjoint_params", ")", "!=", "oldlen_", ":", "\n", "# Some params were excluded.", "\n", "# Issue a warning if a user-specified norm is specified.", "\n", "        ", "if", "'norm'", "in", "adjoint_options", "and", "callable", "(", "adjoint_options", "[", "'norm'", "]", ")", ":", "\n", "            ", "warnings", ".", "warn", "(", "\"An adjoint parameter was passed without requiring gradient. For efficiency this will be \"", "\n", "\"excluded from the adjoint pass, and will not appear as a tensor in the adjoint norm.\"", ")", "\n", "\n", "# Convert to flattened state.", "\n", "", "", "shapes", ",", "func", ",", "y0", ",", "t", ",", "rtol", ",", "atol", ",", "method", ",", "options", ",", "event_fn", ",", "decreasing_time", "=", "_check_inputs", "(", "func", ",", "y0", ",", "t", ",", "rtol", ",", "atol", ",", "method", ",", "options", ",", "event_fn", ",", "SOLVERS", ")", "\n", "\n", "# Handle the adjoint norm function.", "\n", "state_norm", "=", "options", "[", "\"norm\"", "]", "\n", "handle_adjoint_norm_", "(", "adjoint_options", ",", "shapes", ",", "state_norm", ")", "\n", "\n", "ans", "=", "OdeintAdjointMethod", ".", "apply", "(", "shapes", ",", "func", ",", "y0", ",", "t", ",", "rtol", ",", "atol", ",", "method", ",", "options", ",", "event_fn", ",", "adjoint_rtol", ",", "adjoint_atol", ",", "\n", "adjoint_method", ",", "adjoint_options", ",", "t", ".", "requires_grad", ",", "*", "adjoint_params", ")", "\n", "\n", "if", "event_fn", "is", "None", ":", "\n", "        ", "solution", "=", "ans", "\n", "", "else", ":", "\n", "        ", "event_t", ",", "solution", "=", "ans", "\n", "event_t", "=", "event_t", ".", "to", "(", "t", ")", "\n", "if", "decreasing_time", ":", "\n", "            ", "event_t", "=", "-", "event_t", "\n", "\n", "", "", "if", "shapes", "is", "not", "None", ":", "\n", "        ", "solution", "=", "_flat_to_shape", "(", "solution", ",", "(", "len", "(", "t", ")", ",", ")", ",", "shapes", ")", "\n", "\n", "", "if", "event_fn", "is", "None", ":", "\n", "        ", "return", "solution", "\n", "", "else", ":", "\n", "        ", "return", "event_t", ",", "solution", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.adjoint.find_parameters": [[218, 233], ["isinstance", "getattr", "module._named_members", "list", "module.parameters", "module.__dict__.items", "torch.is_tensor", "torch.is_tensor"], "function", ["None"], ["", "", "def", "find_parameters", "(", "module", ")", ":", "\n", "\n", "    ", "assert", "isinstance", "(", "module", ",", "nn", ".", "Module", ")", "\n", "\n", "# If called within DataParallel, parameters won't appear in module.parameters().", "\n", "if", "getattr", "(", "module", ",", "'_is_replica'", ",", "False", ")", ":", "\n", "\n", "        ", "def", "find_tensor_attributes", "(", "module", ")", ":", "\n", "            ", "tuples", "=", "[", "(", "k", ",", "v", ")", "for", "k", ",", "v", "in", "module", ".", "__dict__", ".", "items", "(", ")", "if", "torch", ".", "is_tensor", "(", "v", ")", "and", "v", ".", "requires_grad", "]", "\n", "return", "tuples", "\n", "\n", "", "gen", "=", "module", ".", "_named_members", "(", "get_members_fn", "=", "find_tensor_attributes", ")", "\n", "return", "[", "param", "for", "_", ",", "param", "in", "gen", "]", "\n", "", "else", ":", "\n", "        ", "return", "list", "(", "module", ".", "parameters", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.adjoint.handle_adjoint_norm_": [[235, 281], ["max", "t.abs", "state_norm", "state_norm", "misc._mixed_norm", "max", "t.abs", "state_norm", "state_norm", "misc._flat_to_shape", "misc._flat_to_shape", "adjoint_norm"], "function", ["home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.misc._mixed_norm", "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.misc._flat_to_shape", "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.misc._flat_to_shape"], ["", "", "def", "handle_adjoint_norm_", "(", "adjoint_options", ",", "shapes", ",", "state_norm", ")", ":", "\n", "    ", "\"\"\"In-place modifies the adjoint options to choose or wrap the norm function.\"\"\"", "\n", "\n", "# This is the default adjoint norm on the backward pass: a mixed norm over the tuple of inputs.", "\n", "def", "default_adjoint_norm", "(", "tensor_tuple", ")", ":", "\n", "        ", "t", ",", "y", ",", "adj_y", ",", "*", "adj_params", "=", "tensor_tuple", "\n", "# (If the state is actually a flattened tuple then this will be unpacked again in state_norm.)", "\n", "return", "max", "(", "t", ".", "abs", "(", ")", ",", "state_norm", "(", "y", ")", ",", "state_norm", "(", "adj_y", ")", ",", "_mixed_norm", "(", "adj_params", ")", ")", "\n", "\n", "", "if", "\"norm\"", "not", "in", "adjoint_options", ":", "\n", "# `adjoint_options` was not explicitly specified by the user. Use the default norm.", "\n", "        ", "adjoint_options", "[", "\"norm\"", "]", "=", "default_adjoint_norm", "\n", "", "else", ":", "\n", "# `adjoint_options` was explicitly specified by the user...", "\n", "        ", "try", ":", "\n", "            ", "adjoint_norm", "=", "adjoint_options", "[", "'norm'", "]", "\n", "", "except", "KeyError", ":", "\n", "# ...but they did not specify the norm argument. Back to plan A: use the default norm.", "\n", "            ", "adjoint_options", "[", "'norm'", "]", "=", "default_adjoint_norm", "\n", "", "else", ":", "\n", "# ...and they did specify the norm argument.", "\n", "            ", "if", "adjoint_norm", "==", "'seminorm'", ":", "\n", "# They told us they want to use seminorms. Slight modification to plan A: use the default norm,", "\n", "# but ignore the parameter state", "\n", "                ", "def", "adjoint_seminorm", "(", "tensor_tuple", ")", ":", "\n", "                    ", "t", ",", "y", ",", "adj_y", ",", "*", "adj_params", "=", "tensor_tuple", "\n", "# (If the state is actually a flattened tuple then this will be unpacked again in state_norm.)", "\n", "return", "max", "(", "t", ".", "abs", "(", ")", ",", "state_norm", "(", "y", ")", ",", "state_norm", "(", "adj_y", ")", ")", "\n", "", "adjoint_options", "[", "'norm'", "]", "=", "adjoint_seminorm", "\n", "", "else", ":", "\n", "# And they're using their own custom norm.", "\n", "                ", "if", "shapes", "is", "None", ":", "\n", "# The state on the forward pass was a tensor, not a tuple. We don't need to do anything, they're", "\n", "# already going to get given the full adjoint state as (t, y, adj_y, adj_params)", "\n", "                    ", "pass", "# this branch included for clarity", "\n", "", "else", ":", "\n", "# This is the bit that is tuple/tensor abstraction-breaking, because the odeint machinery", "\n", "# doesn't know about the tupled nature of the forward state. We need to tell the user's adjoint", "\n", "# norm about that ourselves.", "\n", "\n", "                    ", "def", "_adjoint_norm", "(", "tensor_tuple", ")", ":", "\n", "                        ", "t", ",", "y", ",", "adj_y", ",", "*", "adj_params", "=", "tensor_tuple", "\n", "y", "=", "_flat_to_shape", "(", "y", ",", "(", ")", ",", "shapes", ")", "\n", "adj_y", "=", "_flat_to_shape", "(", "adj_y", ",", "(", ")", ",", "shapes", ")", "\n", "return", "adjoint_norm", "(", "(", "t", ",", "*", "y", ",", "*", "adj_y", ",", "*", "adj_params", ")", ")", "\n", "", "adjoint_options", "[", "'norm'", "]", "=", "_adjoint_norm", "\n", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.fixed_grid.Euler._step_func": [[9, 12], ["func"], "methods", ["None"], ["def", "_step_func", "(", "self", ",", "func", ",", "t0", ",", "dt", ",", "t1", ",", "y0", ")", ":", "\n", "        ", "f0", "=", "func", "(", "t0", ",", "y0", ",", "perturb", "=", "Perturb", ".", "NEXT", "if", "self", ".", "perturb", "else", "Perturb", ".", "NONE", ")", "\n", "return", "dt", "*", "f0", ",", "f0", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.fixed_grid.Midpoint._step_func": [[17, 22], ["func", "func"], "methods", ["None"], ["def", "_step_func", "(", "self", ",", "func", ",", "t0", ",", "dt", ",", "t1", ",", "y0", ")", ":", "\n", "        ", "half_dt", "=", "0.5", "*", "dt", "\n", "f0", "=", "func", "(", "t0", ",", "y0", ",", "perturb", "=", "Perturb", ".", "NEXT", "if", "self", ".", "perturb", "else", "Perturb", ".", "NONE", ")", "\n", "y_mid", "=", "y0", "+", "f0", "*", "half_dt", "\n", "return", "dt", "*", "func", "(", "t0", "+", "half_dt", ",", "y_mid", ")", ",", "f0", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.fixed_grid.RK4._step_func": [[27, 30], ["func", "rk_common.rk4_alt_step_func"], "methods", ["home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.rk_common.rk4_alt_step_func"], ["def", "_step_func", "(", "self", ",", "func", ",", "t0", ",", "dt", ",", "t1", ",", "y0", ")", ":", "\n", "        ", "f0", "=", "func", "(", "t0", ",", "y0", ",", "perturb", "=", "Perturb", ".", "NEXT", "if", "self", ".", "perturb", "else", "Perturb", ".", "NONE", ")", "\n", "return", "rk4_alt_step_func", "(", "func", ",", "t0", ",", "dt", ",", "t1", ",", "y0", ",", "f0", "=", "f0", ",", "perturb", "=", "self", ".", "perturb", ")", ",", "f0", "\n", "", "", ""]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.event_handling.find_event": [[5, 21], ["torch.no_grad", "torch.ceil", "range", "interp_fn", "torch.ceil.long", "interp_fn", "torch.sign", "torch.where", "torch.where", "torch.log", "math.log", "event_fn"], "function", ["home.repos.pwc.inspect_result.rtqichen_torchdiffeq.examples.bouncing_ball.BouncingBallExample.event_fn"], ["def", "find_event", "(", "interp_fn", ",", "sign0", ",", "t0", ",", "t1", ",", "event_fn", ",", "tol", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\n", "# Num iterations for the secant method until tolerance is within target.", "\n", "        ", "nitrs", "=", "torch", ".", "ceil", "(", "torch", ".", "log", "(", "(", "t1", "-", "t0", ")", "/", "tol", ")", "/", "math", ".", "log", "(", "2.0", ")", ")", "\n", "\n", "for", "_", "in", "range", "(", "nitrs", ".", "long", "(", ")", ")", ":", "\n", "            ", "t_mid", "=", "(", "t1", "+", "t0", ")", "/", "2.0", "\n", "y_mid", "=", "interp_fn", "(", "t_mid", ")", "\n", "sign_mid", "=", "torch", ".", "sign", "(", "event_fn", "(", "t_mid", ",", "y_mid", ")", ")", "\n", "same_as_sign0", "=", "(", "sign0", "==", "sign_mid", ")", "\n", "t0", "=", "torch", ".", "where", "(", "same_as_sign0", ",", "t_mid", ",", "t0", ")", "\n", "t1", "=", "torch", ".", "where", "(", "same_as_sign0", ",", "t1", ",", "t_mid", ")", "\n", "", "event_t", "=", "(", "t0", "+", "t1", ")", "/", "2.0", "\n", "\n", "", "return", "event_t", ",", "interp_fn", "(", "event_t", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.event_handling.combine_event_functions": [[23, 36], ["torch.no_grad", "torch.sign", "event_fn", "torch.min", "event_fn"], "function", ["home.repos.pwc.inspect_result.rtqichen_torchdiffeq.examples.bouncing_ball.BouncingBallExample.event_fn", "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.examples.bouncing_ball.BouncingBallExample.event_fn"], ["", "def", "combine_event_functions", "(", "event_fn", ",", "t0", ",", "y0", ")", ":", "\n", "    ", "\"\"\"\n    We ensure all event functions are initially positive,\n    so then we can combine them by taking a min.\n    \"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "initial_signs", "=", "torch", ".", "sign", "(", "event_fn", "(", "t0", ",", "y0", ")", ")", "\n", "\n", "", "def", "combined_event_fn", "(", "t", ",", "y", ")", ":", "\n", "        ", "c", "=", "event_fn", "(", "t", ",", "y", ")", "\n", "return", "torch", ".", "min", "(", "c", "*", "initial_signs", ")", "\n", "\n", "", "return", "combined_event_fn", "\n", "", ""]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.solvers.AdaptiveStepsizeODESolver.__init__": [[8, 16], ["misc._handle_unused_kwargs"], "methods", ["home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.misc._handle_unused_kwargs"], ["    ", "def", "__init__", "(", "self", ",", "dtype", ",", "y0", ",", "norm", ",", "**", "unused_kwargs", ")", ":", "\n", "        ", "_handle_unused_kwargs", "(", "self", ",", "unused_kwargs", ")", "\n", "del", "unused_kwargs", "\n", "\n", "self", ".", "y0", "=", "y0", "\n", "self", ".", "dtype", "=", "dtype", "\n", "\n", "self", ".", "norm", "=", "norm", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.solvers.AdaptiveStepsizeODESolver._before_integrate": [[17, 19], ["None"], "methods", ["None"], ["", "def", "_before_integrate", "(", "self", ",", "t", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.solvers.AdaptiveStepsizeODESolver._advance": [[20, 23], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "_advance", "(", "self", ",", "next_t", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.solvers.AdaptiveStepsizeODESolver.integrate": [[24, 32], ["torch.empty", "t.to.to.to", "solvers.AdaptiveStepsizeODESolver._before_integrate", "range", "len", "len", "solvers.AdaptiveStepsizeODESolver._advance"], "methods", ["home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.solvers.AdaptiveStepsizeODESolver._before_integrate", "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.solvers.AdaptiveStepsizeODESolver._advance"], ["", "def", "integrate", "(", "self", ",", "t", ")", ":", "\n", "        ", "solution", "=", "torch", ".", "empty", "(", "len", "(", "t", ")", ",", "*", "self", ".", "y0", ".", "shape", ",", "dtype", "=", "self", ".", "y0", ".", "dtype", ",", "device", "=", "self", ".", "y0", ".", "device", ")", "\n", "solution", "[", "0", "]", "=", "self", ".", "y0", "\n", "t", "=", "t", ".", "to", "(", "self", ".", "dtype", ")", "\n", "self", ".", "_before_integrate", "(", "t", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "t", ")", ")", ":", "\n", "            ", "solution", "[", "i", "]", "=", "self", ".", "_advance", "(", "t", "[", "i", "]", ")", "\n", "", "return", "solution", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.solvers.AdaptiveStepsizeEventODESolver._advance_until_event": [[36, 39], ["None"], "methods", ["None"], ["    ", "@", "abc", ".", "abstractmethod", "\n", "def", "_advance_until_event", "(", "self", ",", "event_fn", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.solvers.AdaptiveStepsizeEventODESolver.integrate_until_event": [[40, 46], ["t0.to.to.to", "solvers.AdaptiveStepsizeEventODESolver._before_integrate", "solvers.AdaptiveStepsizeEventODESolver._advance_until_event", "torch.stack", "t0.to.to.reshape"], "methods", ["home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.solvers.AdaptiveStepsizeODESolver._before_integrate", "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.solvers.AdaptiveStepsizeEventODESolver._advance_until_event"], ["", "def", "integrate_until_event", "(", "self", ",", "t0", ",", "event_fn", ")", ":", "\n", "        ", "t0", "=", "t0", ".", "to", "(", "self", ".", "y0", ".", "device", ",", "self", ".", "dtype", ")", "\n", "self", ".", "_before_integrate", "(", "t0", ".", "reshape", "(", "-", "1", ")", ")", "\n", "event_time", ",", "y1", "=", "self", ".", "_advance_until_event", "(", "event_fn", ")", "\n", "solution", "=", "torch", ".", "stack", "(", "[", "self", ".", "y0", ",", "y1", "]", ",", "dim", "=", "0", ")", "\n", "return", "event_time", ",", "solution", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.solvers.FixedGridODESolver.__init__": [[51, 76], ["unused_kwargs.pop", "unused_kwargs.pop", "unused_kwargs.pop", "misc._handle_unused_kwargs", "solvers.FixedGridODESolver._grid_constructor_from_step_size", "ValueError"], "methods", ["home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.misc._handle_unused_kwargs", "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.solvers.FixedGridODESolver._grid_constructor_from_step_size"], ["def", "__init__", "(", "self", ",", "func", ",", "y0", ",", "step_size", "=", "None", ",", "grid_constructor", "=", "None", ",", "interp", "=", "\"linear\"", ",", "perturb", "=", "False", ",", "**", "unused_kwargs", ")", ":", "\n", "        ", "self", ".", "atol", "=", "unused_kwargs", ".", "pop", "(", "'atol'", ")", "\n", "unused_kwargs", ".", "pop", "(", "'rtol'", ",", "None", ")", "\n", "unused_kwargs", ".", "pop", "(", "'norm'", ",", "None", ")", "\n", "_handle_unused_kwargs", "(", "self", ",", "unused_kwargs", ")", "\n", "del", "unused_kwargs", "\n", "\n", "self", ".", "func", "=", "func", "\n", "self", ".", "y0", "=", "y0", "\n", "self", ".", "dtype", "=", "y0", ".", "dtype", "\n", "self", ".", "device", "=", "y0", ".", "device", "\n", "self", ".", "step_size", "=", "step_size", "\n", "self", ".", "interp", "=", "interp", "\n", "self", ".", "perturb", "=", "perturb", "\n", "\n", "if", "step_size", "is", "None", ":", "\n", "            ", "if", "grid_constructor", "is", "None", ":", "\n", "                ", "self", ".", "grid_constructor", "=", "lambda", "f", ",", "y0", ",", "t", ":", "t", "\n", "", "else", ":", "\n", "                ", "self", ".", "grid_constructor", "=", "grid_constructor", "\n", "", "", "else", ":", "\n", "            ", "if", "grid_constructor", "is", "None", ":", "\n", "                ", "self", ".", "grid_constructor", "=", "self", ".", "_grid_constructor_from_step_size", "(", "step_size", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\"step_size and grid_constructor are mutually exclusive arguments.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.solvers.FixedGridODESolver._grid_constructor_from_step_size": [[77, 89], ["torch.ceil().item", "torch.ceil", "torch.arange"], "methods", ["None"], ["", "", "", "@", "staticmethod", "\n", "def", "_grid_constructor_from_step_size", "(", "step_size", ")", ":", "\n", "        ", "def", "_grid_constructor", "(", "func", ",", "y0", ",", "t", ")", ":", "\n", "            ", "start_time", "=", "t", "[", "0", "]", "\n", "end_time", "=", "t", "[", "-", "1", "]", "\n", "\n", "niters", "=", "torch", ".", "ceil", "(", "(", "end_time", "-", "start_time", ")", "/", "step_size", "+", "1", ")", ".", "item", "(", ")", "\n", "t_infer", "=", "torch", ".", "arange", "(", "0", ",", "niters", ",", "dtype", "=", "t", ".", "dtype", ",", "device", "=", "t", ".", "device", ")", "*", "step_size", "+", "start_time", "\n", "t_infer", "[", "-", "1", "]", "=", "t", "[", "-", "1", "]", "\n", "\n", "return", "t_infer", "\n", "", "return", "_grid_constructor", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.solvers.FixedGridODESolver._step_func": [[90, 93], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "_step_func", "(", "self", ",", "func", ",", "t0", ",", "dt", ",", "t1", ",", "y0", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.solvers.FixedGridODESolver.integrate": [[94, 120], ["solvers.FixedGridODESolver.grid_constructor", "torch.empty", "zip", "len", "solvers.FixedGridODESolver._step_func", "len", "solvers.FixedGridODESolver._linear_interp", "solvers.FixedGridODESolver.func", "solvers.FixedGridODESolver._cubic_hermite_interp", "ValueError"], "methods", ["home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.solvers.FixedGridODESolver._step_func", "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.solvers.FixedGridODESolver._linear_interp", "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.solvers.FixedGridODESolver._cubic_hermite_interp"], ["", "def", "integrate", "(", "self", ",", "t", ")", ":", "\n", "        ", "time_grid", "=", "self", ".", "grid_constructor", "(", "self", ".", "func", ",", "self", ".", "y0", ",", "t", ")", "\n", "assert", "time_grid", "[", "0", "]", "==", "t", "[", "0", "]", "and", "time_grid", "[", "-", "1", "]", "==", "t", "[", "-", "1", "]", "\n", "\n", "solution", "=", "torch", ".", "empty", "(", "len", "(", "t", ")", ",", "*", "self", ".", "y0", ".", "shape", ",", "dtype", "=", "self", ".", "y0", ".", "dtype", ",", "device", "=", "self", ".", "y0", ".", "device", ")", "\n", "solution", "[", "0", "]", "=", "self", ".", "y0", "\n", "\n", "j", "=", "1", "\n", "y0", "=", "self", ".", "y0", "\n", "for", "t0", ",", "t1", "in", "zip", "(", "time_grid", "[", ":", "-", "1", "]", ",", "time_grid", "[", "1", ":", "]", ")", ":", "\n", "            ", "dt", "=", "t1", "-", "t0", "\n", "dy", ",", "f0", "=", "self", ".", "_step_func", "(", "self", ".", "func", ",", "t0", ",", "dt", ",", "t1", ",", "y0", ")", "\n", "y1", "=", "y0", "+", "dy", "\n", "\n", "while", "j", "<", "len", "(", "t", ")", "and", "t1", ">=", "t", "[", "j", "]", ":", "\n", "                ", "if", "self", ".", "interp", "==", "\"linear\"", ":", "\n", "                    ", "solution", "[", "j", "]", "=", "self", ".", "_linear_interp", "(", "t0", ",", "t1", ",", "y0", ",", "y1", ",", "t", "[", "j", "]", ")", "\n", "", "elif", "self", ".", "interp", "==", "\"cubic\"", ":", "\n", "                    ", "f1", "=", "self", ".", "func", "(", "t1", ",", "y1", ")", "\n", "solution", "[", "j", "]", "=", "self", ".", "_cubic_hermite_interp", "(", "t0", ",", "y0", ",", "f0", ",", "t1", ",", "y1", ",", "f1", ",", "t", "[", "j", "]", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "ValueError", "(", "f\"Unknown interpolation method {self.interp}\"", ")", "\n", "", "j", "+=", "1", "\n", "", "y0", "=", "y1", "\n", "\n", "", "return", "solution", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.solvers.FixedGridODESolver.integrate_until_event": [[121, 156], ["t0.type_as.type_as.type_as", "torch.sign", "torch.stack", "event_fn", "solvers.FixedGridODESolver._step_func", "torch.sign", "event_fn", "event_handling.find_event", "RuntimeError", "float", "solvers.FixedGridODESolver._linear_interp", "solvers.FixedGridODESolver.func", "ValueError", "solvers.FixedGridODESolver._cubic_hermite_interp"], "methods", ["home.repos.pwc.inspect_result.rtqichen_torchdiffeq.examples.bouncing_ball.BouncingBallExample.event_fn", "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.solvers.FixedGridODESolver._step_func", "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.examples.bouncing_ball.BouncingBallExample.event_fn", "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.event_handling.find_event", "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.solvers.FixedGridODESolver._linear_interp", "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.solvers.FixedGridODESolver._cubic_hermite_interp"], ["", "def", "integrate_until_event", "(", "self", ",", "t0", ",", "event_fn", ")", ":", "\n", "        ", "assert", "self", ".", "step_size", "is", "not", "None", ",", "\"Event handling for fixed step solvers currently requires `step_size` to be provided in options.\"", "\n", "\n", "t0", "=", "t0", ".", "type_as", "(", "self", ".", "y0", ")", "\n", "y0", "=", "self", ".", "y0", "\n", "dt", "=", "self", ".", "step_size", "\n", "\n", "sign0", "=", "torch", ".", "sign", "(", "event_fn", "(", "t0", ",", "y0", ")", ")", "\n", "max_itrs", "=", "20000", "\n", "itr", "=", "0", "\n", "while", "True", ":", "\n", "            ", "itr", "+=", "1", "\n", "t1", "=", "t0", "+", "dt", "\n", "dy", ",", "f0", "=", "self", ".", "_step_func", "(", "self", ".", "func", ",", "t0", ",", "dt", ",", "t1", ",", "y0", ")", "\n", "y1", "=", "y0", "+", "dy", "\n", "\n", "sign1", "=", "torch", ".", "sign", "(", "event_fn", "(", "t1", ",", "y1", ")", ")", "\n", "\n", "if", "sign0", "!=", "sign1", ":", "\n", "                ", "if", "self", ".", "interp", "==", "\"linear\"", ":", "\n", "                    ", "interp_fn", "=", "lambda", "t", ":", "self", ".", "_linear_interp", "(", "t0", ",", "t1", ",", "y0", ",", "y1", ",", "t", ")", "\n", "", "elif", "self", ".", "interp", "==", "\"cubic\"", ":", "\n", "                    ", "f1", "=", "self", ".", "func", "(", "t1", ",", "y1", ")", "\n", "interp_fn", "=", "lambda", "t", ":", "self", ".", "_cubic_hermite_interp", "(", "t0", ",", "y0", ",", "f0", ",", "t1", ",", "y1", ",", "f1", ",", "t", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "ValueError", "(", "f\"Unknown interpolation method {self.interp}\"", ")", "\n", "", "event_time", ",", "y1", "=", "find_event", "(", "interp_fn", ",", "sign0", ",", "t0", ",", "t1", ",", "event_fn", ",", "float", "(", "self", ".", "atol", ")", ")", "\n", "break", "\n", "", "else", ":", "\n", "                ", "t0", ",", "y0", "=", "t1", ",", "y1", "\n", "\n", "", "if", "itr", ">=", "max_itrs", ":", "\n", "                ", "raise", "RuntimeError", "(", "f\"Reached maximum number of iterations {max_itrs}.\"", ")", "\n", "", "", "solution", "=", "torch", ".", "stack", "(", "[", "self", ".", "y0", ",", "y1", "]", ",", "dim", "=", "0", ")", "\n", "return", "event_time", ",", "solution", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.solvers.FixedGridODESolver._cubic_hermite_interp": [[157, 165], ["None"], "methods", ["None"], ["", "def", "_cubic_hermite_interp", "(", "self", ",", "t0", ",", "y0", ",", "f0", ",", "t1", ",", "y1", ",", "f1", ",", "t", ")", ":", "\n", "        ", "h", "=", "(", "t", "-", "t0", ")", "/", "(", "t1", "-", "t0", ")", "\n", "h00", "=", "(", "1", "+", "2", "*", "h", ")", "*", "(", "1", "-", "h", ")", "*", "(", "1", "-", "h", ")", "\n", "h10", "=", "h", "*", "(", "1", "-", "h", ")", "*", "(", "1", "-", "h", ")", "\n", "h01", "=", "h", "*", "h", "*", "(", "3", "-", "2", "*", "h", ")", "\n", "h11", "=", "h", "*", "h", "*", "(", "h", "-", "1", ")", "\n", "dt", "=", "(", "t1", "-", "t0", ")", "\n", "return", "h00", "*", "y0", "+", "h10", "*", "dt", "*", "f0", "+", "h01", "*", "y1", "+", "h11", "*", "dt", "*", "f1", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.solvers.FixedGridODESolver._linear_interp": [[166, 173], ["None"], "methods", ["None"], ["", "def", "_linear_interp", "(", "self", ",", "t0", ",", "t1", ",", "y0", ",", "y1", ",", "t", ")", ":", "\n", "        ", "if", "t", "==", "t0", ":", "\n", "            ", "return", "y0", "\n", "", "if", "t", "==", "t1", ":", "\n", "            ", "return", "y1", "\n", "", "slope", "=", "(", "t", "-", "t0", ")", "/", "(", "t1", "-", "t0", ")", "\n", "return", "y0", "+", "slope", "*", "(", "y1", "-", "y0", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.misc._TupleFunc.__init__": [[132, 136], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.misc._PerturbFunc.__init__"], ["    ", "def", "__init__", "(", "self", ",", "base_func", ",", "shapes", ")", ":", "\n", "        ", "super", "(", "_TupleFunc", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "base_func", "=", "base_func", "\n", "self", ".", "shapes", "=", "shapes", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.misc._TupleFunc.forward": [[137, 140], ["misc._TupleFunc.base_func", "torch.cat", "misc._flat_to_shape", "f_.reshape"], "methods", ["home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.misc._flat_to_shape"], ["", "def", "forward", "(", "self", ",", "t", ",", "y", ")", ":", "\n", "        ", "f", "=", "self", ".", "base_func", "(", "t", ",", "_flat_to_shape", "(", "y", ",", "(", ")", ",", "self", ".", "shapes", ")", ")", "\n", "return", "torch", ".", "cat", "(", "[", "f_", ".", "reshape", "(", "-", "1", ")", "for", "f_", "in", "f", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.misc._TupleInputOnlyFunc.__init__": [[143, 147], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.misc._PerturbFunc.__init__"], ["    ", "def", "__init__", "(", "self", ",", "base_func", ",", "shapes", ")", ":", "\n", "        ", "super", "(", "_TupleInputOnlyFunc", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "base_func", "=", "base_func", "\n", "self", ".", "shapes", "=", "shapes", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.misc._TupleInputOnlyFunc.forward": [[148, 150], ["misc._TupleInputOnlyFunc.base_func", "misc._flat_to_shape"], "methods", ["home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.misc._flat_to_shape"], ["", "def", "forward", "(", "self", ",", "t", ",", "y", ")", ":", "\n", "        ", "return", "self", ".", "base_func", "(", "t", ",", "_flat_to_shape", "(", "y", ",", "(", ")", ",", "self", ".", "shapes", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.misc._ReverseFunc.__init__": [[153, 157], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.misc._PerturbFunc.__init__"], ["    ", "def", "__init__", "(", "self", ",", "base_func", ",", "mul", "=", "1.0", ")", ":", "\n", "        ", "super", "(", "_ReverseFunc", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "base_func", "=", "base_func", "\n", "self", ".", "mul", "=", "mul", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.misc._ReverseFunc.forward": [[158, 160], ["misc._ReverseFunc.base_func"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "t", ",", "y", ")", ":", "\n", "        ", "return", "self", ".", "mul", "*", "self", ".", "base_func", "(", "-", "t", ",", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.misc._PerturbFunc.__init__": [[170, 173], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.misc._PerturbFunc.__init__"], ["    ", "def", "__init__", "(", "self", ",", "base_func", ")", ":", "\n", "        ", "super", "(", "_PerturbFunc", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "base_func", "=", "base_func", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.misc._PerturbFunc.forward": [[174, 190], ["isinstance", "_nextafter.to", "misc._PerturbFunc.base_func", "misc._nextafter", "misc._nextafter"], "methods", ["home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.misc._nextafter", "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.misc._nextafter"], ["", "def", "forward", "(", "self", ",", "t", ",", "y", ",", "*", ",", "perturb", "=", "Perturb", ".", "NONE", ")", ":", "\n", "        ", "assert", "isinstance", "(", "perturb", ",", "Perturb", ")", ",", "\"perturb argument must be of type Perturb enum\"", "\n", "# This dtype change here might be buggy.", "\n", "# The exact time value should be determined inside the solver,", "\n", "# but this can slightly change it due to numerical differences during casting.", "\n", "t", "=", "t", ".", "to", "(", "y", ".", "dtype", ")", "\n", "if", "perturb", "is", "Perturb", ".", "NEXT", ":", "\n", "# Replace with next smallest representable value.", "\n", "            ", "t", "=", "_nextafter", "(", "t", ",", "t", "+", "1", ")", "\n", "", "elif", "perturb", "is", "Perturb", ".", "PREV", ":", "\n", "# Replace with prev largest representable value.", "\n", "            ", "t", "=", "_nextafter", "(", "t", ",", "t", "-", "1", ")", "\n", "", "else", ":", "\n", "# Do nothing.", "\n", "            ", "pass", "\n", "", "return", "self", ".", "base_func", "(", "t", ",", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.misc._StitchGradient.forward": [[307, 310], ["None"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "x1", ",", "out", ")", ":", "\n", "        ", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.misc._StitchGradient.backward": [[311, 314], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_out", ")", ":", "\n", "        ", "return", "grad_out", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.misc._handle_unused_kwargs": [[9, 12], ["len", "warnings.warn"], "function", ["None"], ["def", "_handle_unused_kwargs", "(", "solver", ",", "unused_kwargs", ")", ":", "\n", "    ", "if", "len", "(", "unused_kwargs", ")", ">", "0", ":", "\n", "        ", "warnings", ".", "warn", "(", "'{}: Unexpected arguments {}'", ".", "format", "(", "solver", ".", "__class__", ".", "__name__", ",", "unused_kwargs", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.misc._linf_norm": [[14, 16], ["tensor.max"], "function", ["None"], ["", "", "def", "_linf_norm", "(", "tensor", ")", ":", "\n", "    ", "return", "tensor", ".", "max", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.misc._rms_norm": [[18, 20], ["tensor.pow().mean().sqrt", "tensor.pow().mean", "tensor.pow"], "function", ["None"], ["", "def", "_rms_norm", "(", "tensor", ")", ":", "\n", "    ", "return", "tensor", ".", "pow", "(", "2", ")", ".", "mean", "(", ")", ".", "sqrt", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.misc._zero_norm": [[22, 24], ["None"], "function", ["None"], ["", "def", "_zero_norm", "(", "tensor", ")", ":", "\n", "    ", "return", "0.", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.misc._mixed_norm": [[26, 30], ["max", "len", "misc._rms_norm"], "function", ["home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.misc._rms_norm"], ["", "def", "_mixed_norm", "(", "tensor_tuple", ")", ":", "\n", "    ", "if", "len", "(", "tensor_tuple", ")", "==", "0", ":", "\n", "        ", "return", "0.", "\n", "", "return", "max", "(", "[", "_rms_norm", "(", "tensor", ")", "for", "tensor", "in", "tensor_tuple", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.misc._select_initial_step": [[32, 72], ["t0.to.to", "norm", "norm", "func", "torch.min().to", "func", "torch.tensor", "norm", "torch.max", "torch.abs", "torch.tensor", "torch.min", "max", "float"], "function", ["home.repos.pwc.inspect_result.rtqichen_torchdiffeq.examples.odenet_mnist.norm", "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.examples.odenet_mnist.norm", "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.examples.odenet_mnist.norm"], ["", "def", "_select_initial_step", "(", "func", ",", "t0", ",", "y0", ",", "order", ",", "rtol", ",", "atol", ",", "norm", ",", "f0", "=", "None", ")", ":", "\n", "    ", "\"\"\"Empirically select a good initial step.\n\n    The algorithm is described in [1]_.\n\n    References\n    ----------\n    .. [1] E. Hairer, S. P. Norsett G. Wanner, \"Solving Ordinary Differential\n           Equations I: Nonstiff Problems\", Sec. II.4, 2nd edition.\n    \"\"\"", "\n", "\n", "dtype", "=", "y0", ".", "dtype", "\n", "device", "=", "y0", ".", "device", "\n", "t_dtype", "=", "t0", ".", "dtype", "\n", "t0", "=", "t0", ".", "to", "(", "dtype", ")", "\n", "\n", "if", "f0", "is", "None", ":", "\n", "        ", "f0", "=", "func", "(", "t0", ",", "y0", ")", "\n", "\n", "", "scale", "=", "atol", "+", "torch", ".", "abs", "(", "y0", ")", "*", "rtol", "\n", "\n", "d0", "=", "norm", "(", "y0", "/", "scale", ")", "\n", "d1", "=", "norm", "(", "f0", "/", "scale", ")", "\n", "\n", "if", "d0", "<", "1e-5", "or", "d1", "<", "1e-5", ":", "\n", "        ", "h0", "=", "torch", ".", "tensor", "(", "1e-6", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ")", "\n", "", "else", ":", "\n", "        ", "h0", "=", "0.01", "*", "d0", "/", "d1", "\n", "\n", "", "y1", "=", "y0", "+", "h0", "*", "f0", "\n", "f1", "=", "func", "(", "t0", "+", "h0", ",", "y1", ")", "\n", "\n", "d2", "=", "norm", "(", "(", "f1", "-", "f0", ")", "/", "scale", ")", "/", "h0", "\n", "\n", "if", "d1", "<=", "1e-15", "and", "d2", "<=", "1e-15", ":", "\n", "        ", "h1", "=", "torch", ".", "max", "(", "torch", ".", "tensor", "(", "1e-6", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ")", ",", "h0", "*", "1e-3", ")", "\n", "", "else", ":", "\n", "        ", "h1", "=", "(", "0.01", "/", "max", "(", "d1", ",", "d2", ")", ")", "**", "(", "1.", "/", "float", "(", "order", "+", "1", ")", ")", "\n", "\n", "", "return", "torch", ".", "min", "(", "100", "*", "h0", ",", "h1", ")", ".", "to", "(", "t_dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.misc._compute_error_ratio": [[74, 77], ["norm", "torch.max", "y0.abs", "y1.abs"], "function", ["home.repos.pwc.inspect_result.rtqichen_torchdiffeq.examples.odenet_mnist.norm"], ["", "def", "_compute_error_ratio", "(", "error_estimate", ",", "rtol", ",", "atol", ",", "y0", ",", "y1", ",", "norm", ")", ":", "\n", "    ", "error_tol", "=", "atol", "+", "rtol", "*", "torch", ".", "max", "(", "y0", ".", "abs", "(", ")", ",", "y1", ".", "abs", "(", ")", ")", "\n", "return", "norm", "(", "error_estimate", "/", "error_tol", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.misc._optimal_step_size": [[79, 90], ["torch.no_grad", "error_ratio.type_as.type_as", "torch.tensor().reciprocal", "torch.min", "torch.ones", "torch.max", "torch.tensor"], "function", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_optimal_step_size", "(", "last_step", ",", "error_ratio", ",", "safety", ",", "ifactor", ",", "dfactor", ",", "order", ")", ":", "\n", "    ", "\"\"\"Calculate the optimal size for the next step.\"\"\"", "\n", "if", "error_ratio", "==", "0", ":", "\n", "        ", "return", "last_step", "*", "ifactor", "\n", "", "if", "error_ratio", "<", "1", ":", "\n", "        ", "dfactor", "=", "torch", ".", "ones", "(", "(", ")", ",", "dtype", "=", "last_step", ".", "dtype", ",", "device", "=", "last_step", ".", "device", ")", "\n", "", "error_ratio", "=", "error_ratio", ".", "type_as", "(", "last_step", ")", "\n", "exponent", "=", "torch", ".", "tensor", "(", "order", ",", "dtype", "=", "last_step", ".", "dtype", ",", "device", "=", "last_step", ".", "device", ")", ".", "reciprocal", "(", ")", "\n", "factor", "=", "torch", ".", "min", "(", "ifactor", ",", "torch", ".", "max", "(", "safety", "/", "error_ratio", "**", "exponent", ",", "dfactor", ")", ")", "\n", "return", "last_step", "*", "factor", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.misc._decreasing": [[92, 94], ["None"], "function", ["None"], ["", "def", "_decreasing", "(", "t", ")", ":", "\n", "    ", "return", "(", "t", "[", "1", ":", "]", "<", "t", "[", ":", "-", "1", "]", ")", ".", "all", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.misc._assert_one_dimensional": [[96, 98], ["t.ndimension"], "function", ["None"], ["", "def", "_assert_one_dimensional", "(", "name", ",", "t", ")", ":", "\n", "    ", "assert", "t", ".", "ndimension", "(", ")", "==", "1", ",", "\"{} must be one dimensional\"", ".", "format", "(", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.misc._assert_increasing": [[100, 102], ["None"], "function", ["None"], ["", "def", "_assert_increasing", "(", "name", ",", "t", ")", ":", "\n", "    ", "assert", "(", "t", "[", "1", ":", "]", ">", "t", "[", ":", "-", "1", "]", ")", ".", "all", "(", ")", ",", "'{} must be strictly increasing or decreasing'", ".", "format", "(", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.misc._assert_floating": [[104, 107], ["torch.is_floating_point", "TypeError", "t.type"], "function", ["None"], ["", "def", "_assert_floating", "(", "name", ",", "t", ")", ":", "\n", "    ", "if", "not", "torch", ".", "is_floating_point", "(", "t", ")", ":", "\n", "        ", "raise", "TypeError", "(", "'`{}` must be a floating point Tensor but is a {}'", ".", "format", "(", "name", ",", "t", ".", "type", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.misc._tuple_tol": [[109, 118], ["tuple", "torch.cat", "iter", "len", "len", "torch.as_tensor().expand", "shape.numel", "zip", "torch.as_tensor"], "function", ["None"], ["", "", "def", "_tuple_tol", "(", "name", ",", "tol", ",", "shapes", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "iter", "(", "tol", ")", "\n", "", "except", "TypeError", ":", "\n", "        ", "return", "tol", "\n", "", "tol", "=", "tuple", "(", "tol", ")", "\n", "assert", "len", "(", "tol", ")", "==", "len", "(", "shapes", ")", ",", "\"If using tupled {} it must have the same length as the tuple y0\"", ".", "format", "(", "name", ")", "\n", "tol", "=", "[", "torch", ".", "as_tensor", "(", "tol_", ")", ".", "expand", "(", "shape", ".", "numel", "(", ")", ")", "for", "tol_", ",", "shape", "in", "zip", "(", "tol", ",", "shapes", ")", "]", "\n", "return", "torch", ".", "cat", "(", "tol", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.misc._flat_to_shape": [[120, 129], ["tuple", "tensor_list.append", "shape.numel", "tensor[].view"], "function", ["None"], ["", "def", "_flat_to_shape", "(", "tensor", ",", "length", ",", "shapes", ")", ":", "\n", "    ", "tensor_list", "=", "[", "]", "\n", "total", "=", "0", "\n", "for", "shape", "in", "shapes", ":", "\n", "        ", "next_total", "=", "total", "+", "shape", ".", "numel", "(", ")", "\n", "# It's important that this be view((...)), not view(...). Else when length=(), shape=() it fails.", "\n", "tensor_list", ".", "append", "(", "tensor", "[", "...", ",", "total", ":", "next_total", "]", ".", "view", "(", "(", "*", "length", ",", "*", "shape", ")", ")", ")", "\n", "total", "=", "next_total", "\n", "", "return", "tuple", "(", "tensor_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.misc._check_inputs": [[192, 304], ["misc._assert_floating", "misc._check_timelike", "misc._assert_increasing", "torch.is_tensor", "torch.is_tensor", "misc._PerturbFunc", "event_handling.combine_event_functions", "isinstance", "isinstance", "misc._tuple_tol", "misc._tuple_tol", "torch.cat", "misc._TupleFunc", "options.copy.copy", "ValueError", "misc._ReverseFunc", "misc._flip_option", "misc._flip_option", "warnings.warn", "t.to.to", "len", "ValueError", "misc._TupleInputOnlyFunc", "misc._flat_to_shape", "norm", "len", "misc._ReverseFunc", "y0_.reshape", "_grid_constructor", "len", "SOLVERS.keys"], "function", ["home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.misc._assert_floating", "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.misc._check_timelike", "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.misc._assert_increasing", "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.event_handling.combine_event_functions", "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.misc._tuple_tol", "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.misc._tuple_tol", "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.misc._flip_option", "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.misc._flip_option", "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.misc._flat_to_shape", "home.repos.pwc.inspect_result.rtqichen_torchdiffeq.examples.odenet_mnist.norm"], ["", "", "def", "_check_inputs", "(", "func", ",", "y0", ",", "t", ",", "rtol", ",", "atol", ",", "method", ",", "options", ",", "event_fn", ",", "SOLVERS", ")", ":", "\n", "\n", "    ", "if", "event_fn", "is", "not", "None", ":", "\n", "        ", "if", "len", "(", "t", ")", "!=", "2", ":", "\n", "            ", "raise", "ValueError", "(", "f\"We require len(t) == 2 when in event handling mode, but got len(t)={len(t)}.\"", ")", "\n", "\n", "# Combine event functions if the output is multivariate.", "\n", "", "event_fn", "=", "combine_event_functions", "(", "event_fn", ",", "t", "[", "0", "]", ",", "y0", ")", "\n", "\n", "# Normalise to tensor (non-tupled) input", "\n", "", "shapes", "=", "None", "\n", "is_tuple", "=", "not", "isinstance", "(", "y0", ",", "torch", ".", "Tensor", ")", "\n", "if", "is_tuple", ":", "\n", "        ", "assert", "isinstance", "(", "y0", ",", "tuple", ")", ",", "'y0 must be either a torch.Tensor or a tuple'", "\n", "shapes", "=", "[", "y0_", ".", "shape", "for", "y0_", "in", "y0", "]", "\n", "rtol", "=", "_tuple_tol", "(", "'rtol'", ",", "rtol", ",", "shapes", ")", "\n", "atol", "=", "_tuple_tol", "(", "'atol'", ",", "atol", ",", "shapes", ")", "\n", "y0", "=", "torch", ".", "cat", "(", "[", "y0_", ".", "reshape", "(", "-", "1", ")", "for", "y0_", "in", "y0", "]", ")", "\n", "func", "=", "_TupleFunc", "(", "func", ",", "shapes", ")", "\n", "if", "event_fn", "is", "not", "None", ":", "\n", "            ", "event_fn", "=", "_TupleInputOnlyFunc", "(", "event_fn", ",", "shapes", ")", "\n", "", "", "_assert_floating", "(", "'y0'", ",", "y0", ")", "\n", "\n", "# Normalise method and options", "\n", "if", "options", "is", "None", ":", "\n", "        ", "options", "=", "{", "}", "\n", "", "else", ":", "\n", "        ", "options", "=", "options", ".", "copy", "(", ")", "\n", "", "if", "method", "is", "None", ":", "\n", "        ", "method", "=", "'dopri5'", "\n", "", "if", "method", "not", "in", "SOLVERS", ":", "\n", "        ", "raise", "ValueError", "(", "'Invalid method \"{}\". Must be one of {}'", ".", "format", "(", "method", ",", "\n", "'{\"'", "+", "'\", \"'", ".", "join", "(", "SOLVERS", ".", "keys", "(", ")", ")", "+", "'\"}.'", ")", ")", "\n", "\n", "", "if", "is_tuple", ":", "\n", "# We accept tupled input. This is an abstraction that is hidden from the rest of odeint (exception when", "\n", "# returning values), so here we need to maintain the abstraction by wrapping norm functions.", "\n", "\n", "        ", "if", "'norm'", "in", "options", ":", "\n", "# If the user passed a norm then get that...", "\n", "            ", "norm", "=", "options", "[", "'norm'", "]", "\n", "", "else", ":", "\n", "# ...otherwise we default to a mixed Linf/L2 norm over tupled input.", "\n", "            ", "norm", "=", "_mixed_norm", "\n", "\n", "# In either case, norm(...) is assumed to take a tuple of tensors as input. (As that's what the state looks", "\n", "# like from the point of view of the user.)", "\n", "# So here we take the tensor that the machinery of odeint has given us, and turn it in the tuple that the", "\n", "# norm function is expecting.", "\n", "", "def", "_norm", "(", "tensor", ")", ":", "\n", "            ", "y", "=", "_flat_to_shape", "(", "tensor", ",", "(", ")", ",", "shapes", ")", "\n", "return", "norm", "(", "y", ")", "\n", "", "options", "[", "'norm'", "]", "=", "_norm", "\n", "\n", "", "else", ":", "\n", "        ", "if", "'norm'", "in", "options", ":", "\n", "# No need to change the norm function.", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "# Else just use the default norm.", "\n", "# Technically we don't need to set that here (RKAdaptiveStepsizeODESolver has it as a default), but it", "\n", "# makes it easier to reason about, in the adjoint norm logic, if we know that options['norm'] is", "\n", "# definitely set to something.", "\n", "            ", "options", "[", "'norm'", "]", "=", "_rms_norm", "\n", "\n", "# Normalise time", "\n", "", "", "_check_timelike", "(", "'t'", ",", "t", ",", "True", ")", "\n", "t_is_reversed", "=", "False", "\n", "if", "len", "(", "t", ")", ">", "1", "and", "t", "[", "0", "]", ">", "t", "[", "1", "]", ":", "\n", "        ", "t_is_reversed", "=", "True", "\n", "\n", "", "if", "t_is_reversed", ":", "\n", "# Change the integration times to ascending order.", "\n", "# We do this by negating the time values and all associated arguments.", "\n", "        ", "t", "=", "-", "t", "\n", "\n", "# Ensure time values are un-negated when calling functions.", "\n", "func", "=", "_ReverseFunc", "(", "func", ",", "mul", "=", "-", "1.0", ")", "\n", "if", "event_fn", "is", "not", "None", ":", "\n", "            ", "event_fn", "=", "_ReverseFunc", "(", "event_fn", ")", "\n", "\n", "# For fixed step solvers.", "\n", "", "try", ":", "\n", "            ", "_grid_constructor", "=", "options", "[", "'grid_constructor'", "]", "\n", "", "except", "KeyError", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "options", "[", "'grid_constructor'", "]", "=", "lambda", "func", ",", "y0", ",", "t", ":", "-", "_grid_constructor", "(", "func", ",", "y0", ",", "-", "t", ")", "\n", "\n", "# For RK solvers.", "\n", "", "_flip_option", "(", "options", ",", "'step_t'", ")", "\n", "_flip_option", "(", "options", ",", "'jump_t'", ")", "\n", "\n", "# Can only do after having normalised time", "\n", "", "_assert_increasing", "(", "'t'", ",", "t", ")", "\n", "\n", "# Tol checking", "\n", "if", "torch", ".", "is_tensor", "(", "rtol", ")", ":", "\n", "        ", "assert", "not", "rtol", ".", "requires_grad", ",", "\"rtol cannot require gradient\"", "\n", "", "if", "torch", ".", "is_tensor", "(", "atol", ")", ":", "\n", "        ", "assert", "not", "atol", ".", "requires_grad", ",", "\"atol cannot require gradient\"", "\n", "\n", "# Backward compatibility: Allow t and y0 to be on different devices", "\n", "", "if", "t", ".", "device", "!=", "y0", ".", "device", ":", "\n", "        ", "warnings", ".", "warn", "(", "\"t is not on the same device as y0. Coercing to y0.device.\"", ")", "\n", "t", "=", "t", ".", "to", "(", "y0", ".", "device", ")", "\n", "# ~Backward compatibility", "\n", "\n", "# Add perturb argument to func.", "\n", "", "func", "=", "_PerturbFunc", "(", "func", ")", "\n", "\n", "return", "shapes", ",", "func", ",", "y0", ",", "t", ",", "rtol", ",", "atol", ",", "method", ",", "options", ",", "event_fn", ",", "t_is_reversed", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.misc._nextafter": [[316, 323], ["_StitchGradient.apply", "torch.no_grad", "hasattr", "torch.nextafter", "misc.np_nextafter"], "function", ["home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.misc.np_nextafter"], ["", "", "def", "_nextafter", "(", "x1", ",", "x2", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "if", "hasattr", "(", "torch", ",", "\"nextafter\"", ")", ":", "\n", "            ", "out", "=", "torch", ".", "nextafter", "(", "x1", ",", "x2", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "np_nextafter", "(", "x1", ",", "x2", ")", "\n", "", "", "return", "_StitchGradient", ".", "apply", "(", "x1", ",", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.misc.np_nextafter": [[325, 332], ["warnings.warn", "x1.detach().cpu().numpy", "x2.detach().cpu().numpy", "torch.tensor().to", "x1.detach().cpu", "x2.detach().cpu", "torch.tensor", "numpy.nextafter", "x1.detach", "x2.detach"], "function", ["None"], ["", "def", "np_nextafter", "(", "x1", ",", "x2", ")", ":", "\n", "    ", "warnings", ".", "warn", "(", "\"torch.nextafter is only available in PyTorch 1.7 or newer.\"", "\n", "\"Falling back to numpy.nextafter. Upgrade PyTorch to remove this warning.\"", ")", "\n", "x1_np", "=", "x1", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "x2_np", "=", "x2", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "out", "=", "torch", ".", "tensor", "(", "np", ".", "nextafter", "(", "x1_np", ",", "x2_np", ")", ")", ".", "to", "(", "x1", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.misc._check_timelike": [[334, 342], ["isinstance", "misc._assert_floating", "timelike.ndimension", "diff.all"], "function", ["home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.misc._assert_floating"], ["", "def", "_check_timelike", "(", "name", ",", "timelike", ",", "can_grad", ")", ":", "\n", "    ", "assert", "isinstance", "(", "timelike", ",", "torch", ".", "Tensor", ")", ",", "'{} must be a torch.Tensor'", ".", "format", "(", "name", ")", "\n", "_assert_floating", "(", "name", ",", "timelike", ")", "\n", "assert", "timelike", ".", "ndimension", "(", ")", "==", "1", ",", "\"{} must be one dimensional\"", ".", "format", "(", "name", ")", "\n", "if", "not", "can_grad", ":", "\n", "        ", "assert", "not", "timelike", ".", "requires_grad", ",", "\"{} cannot require gradient\"", ".", "format", "(", "name", ")", "\n", "", "diff", "=", "timelike", "[", "1", ":", "]", ">", "timelike", "[", ":", "-", "1", "]", "\n", "assert", "diff", ".", "all", "(", ")", "or", "(", "~", "diff", ")", ".", "all", "(", ")", ",", "'{} must be strictly increasing or decreasing'", ".", "format", "(", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rtqichen_torchdiffeq._impl.misc._flip_option": [[344, 352], ["isinstance"], "function", ["None"], ["", "def", "_flip_option", "(", "options", ",", "option_name", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "option_value", "=", "options", "[", "option_name", "]", "\n", "", "except", "KeyError", ":", "\n", "        ", "pass", "\n", "", "else", ":", "\n", "        ", "if", "isinstance", "(", "option_value", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "options", "[", "option_name", "]", "=", "-", "option_value", "\n", "# else: an error will be raised when the option is attempted to be used in Solver.__init__, but we defer raising", "\n"]]}