{"home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.options.parse_arguments": [[16, 40], ["easydict.EasyDict", "arg.startswith", "key_str.split", "yaml.safe_load", "arg[].split"], "function", ["None"], ["def", "parse_arguments", "(", "args", ")", ":", "\n", "    ", "\"\"\"\n    Parse arguments from command line.\n    Syntax: --key1.key2.key3=value --> value\n            --key1.key2.key3=      --> None\n            --key1.key2.key3       --> True\n            --key1.key2.key3!      --> False\n    \"\"\"", "\n", "opt_cmd", "=", "{", "}", "\n", "for", "arg", "in", "args", ":", "\n", "        ", "assert", "(", "arg", ".", "startswith", "(", "\"--\"", ")", ")", "\n", "if", "\"=\"", "not", "in", "arg", "[", "2", ":", "]", ":", "\n", "            ", "key_str", ",", "value", "=", "(", "arg", "[", "2", ":", "-", "1", "]", ",", "\"false\"", ")", "if", "arg", "[", "-", "1", "]", "==", "\"!\"", "else", "(", "arg", "[", "2", ":", "]", ",", "\"true\"", ")", "\n", "", "else", ":", "\n", "            ", "key_str", ",", "value", "=", "arg", "[", "2", ":", "]", ".", "split", "(", "\"=\"", ")", "\n", "", "keys_sub", "=", "key_str", ".", "split", "(", "\".\"", ")", "\n", "opt_sub", "=", "opt_cmd", "\n", "for", "k", "in", "keys_sub", "[", ":", "-", "1", "]", ":", "\n", "            ", "if", "k", "not", "in", "opt_sub", ":", "opt_sub", "[", "k", "]", "=", "{", "}", "\n", "opt_sub", "=", "opt_sub", "[", "k", "]", "\n", "", "assert", "keys_sub", "[", "-", "1", "]", "not", "in", "opt_sub", ",", "keys_sub", "[", "-", "1", "]", "\n", "opt_sub", "[", "keys_sub", "[", "-", "1", "]", "]", "=", "yaml", ".", "safe_load", "(", "value", ")", "\n", "", "opt_cmd", "=", "edict", "(", "opt_cmd", ")", "\n", "return", "opt_cmd", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.options.set": [[41, 53], ["util.log.info", "options.load_options", "options.override_options", "options.process_options", "util.log.options"], "function", ["home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util.Log.info", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.options.load_options", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.options.override_options", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.options.process_options", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util.Log.options"], ["", "def", "set", "(", "opt_cmd", "=", "{", "}", ")", ":", "\n", "    ", "log", ".", "info", "(", "\"setting configurations...\"", ")", "\n", "assert", "(", "\"model\"", "in", "opt_cmd", ")", "\n", "# load config from yaml file", "\n", "assert", "(", "\"yaml\"", "in", "opt_cmd", ")", "\n", "fname", "=", "\"options/{}.yaml\"", ".", "format", "(", "opt_cmd", ".", "yaml", ")", "\n", "opt_base", "=", "load_options", "(", "fname", ")", "\n", "# override with command line arguments", "\n", "opt", "=", "override_options", "(", "opt_base", ",", "opt_cmd", ",", "key_stack", "=", "[", "]", ",", "safe_check", "=", "True", ")", "\n", "process_options", "(", "opt", ")", "\n", "log", ".", "options", "(", "opt", ")", "\n", "return", "opt", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.options.load_options": [[54, 68], ["print", "open", "easydict.EasyDict", "easydict.EasyDict.pop", "yaml.safe_load", "type", "options.load_options", "options.override_options"], "function", ["home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.options.load_options", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.options.override_options"], ["", "def", "load_options", "(", "fname", ")", ":", "\n", "    ", "with", "open", "(", "fname", ")", "as", "file", ":", "\n", "        ", "opt", "=", "edict", "(", "yaml", ".", "safe_load", "(", "file", ")", ")", "\n", "", "if", "\"_parent_\"", "in", "opt", ":", "\n", "# load parent yaml file(s) as base options", "\n", "        ", "parent_fnames", "=", "opt", ".", "pop", "(", "\"_parent_\"", ")", "\n", "if", "type", "(", "parent_fnames", ")", "is", "str", ":", "\n", "            ", "parent_fnames", "=", "[", "parent_fnames", "]", "\n", "", "for", "parent_fname", "in", "parent_fnames", ":", "\n", "            ", "opt_parent", "=", "load_options", "(", "parent_fname", ")", "\n", "opt_parent", "=", "override_options", "(", "opt_parent", ",", "opt", ",", "key_stack", "=", "[", "]", ")", "\n", "opt", "=", "opt_parent", "\n", "", "", "print", "(", "\"loading {}...\"", ".", "format", "(", "fname", ")", ")", "\n", "return", "opt", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.options.override_options": [[69, 86], ["opt_over.items", "isinstance", "options.override_options", "opt.get", "dict", "input", "print", "exit"], "function", ["home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.options.override_options"], ["", "def", "override_options", "(", "opt", ",", "opt_over", ",", "key_stack", "=", "None", ",", "safe_check", "=", "False", ")", ":", "\n", "    ", "for", "key", ",", "value", "in", "opt_over", ".", "items", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "# parse child options (until leaf nodes are reached)", "\n", "            ", "opt", "[", "key", "]", "=", "override_options", "(", "opt", ".", "get", "(", "key", ",", "dict", "(", ")", ")", ",", "value", ",", "key_stack", "=", "key_stack", "+", "[", "key", "]", ",", "safe_check", "=", "safe_check", ")", "\n", "", "else", ":", "\n", "# ensure command line argument to override is also in yaml file", "\n", "            ", "if", "safe_check", "and", "key", "not", "in", "opt", ":", "\n", "                ", "add_new", "=", "None", "\n", "while", "add_new", "not", "in", "[", "\"y\"", ",", "\"n\"", "]", ":", "\n", "                    ", "key_str", "=", "\".\"", ".", "join", "(", "key_stack", "+", "[", "key", "]", ")", "\n", "add_new", "=", "input", "(", "\"\\\"{}\\\" not found in original opt, add? (y/n) \"", ".", "format", "(", "key_str", ")", ")", "\n", "", "if", "add_new", "==", "\"n\"", ":", "\n", "                    ", "print", "(", "\"safe exiting...\"", ")", "\n", "exit", "(", ")", "\n", "", "", "opt", "[", "key", "]", "=", "value", "\n", "", "", "return", "opt", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.options.process_options": [[87, 106], ["os.makedirs", "isinstance", "random.seed", "numpy.random.seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "str", "str", "random.choice", "torch.cuda.is_available", "range"], "function", ["None"], ["", "def", "process_options", "(", "opt", ")", ":", "\n", "# set seed", "\n", "    ", "if", "opt", ".", "seed", "is", "not", "None", ":", "\n", "        ", "random", ".", "seed", "(", "opt", ".", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "opt", ".", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "opt", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "opt", ".", "seed", ")", "\n", "if", "opt", ".", "seed", "!=", "0", ":", "\n", "            ", "opt", ".", "name", "=", "str", "(", "opt", ".", "name", ")", "+", "\"_seed{}\"", ".", "format", "(", "opt", ".", "seed", ")", "\n", "", "", "else", ":", "\n", "# create random string as run ID", "\n", "        ", "randkey", "=", "\"\"", ".", "join", "(", "random", ".", "choice", "(", "string", ".", "ascii_uppercase", ")", "for", "_", "in", "range", "(", "4", ")", ")", "\n", "opt", ".", "name", "=", "str", "(", "opt", ".", "name", ")", "+", "\"_{}\"", ".", "format", "(", "randkey", ")", "\n", "# other default options", "\n", "", "opt", ".", "output_path", "=", "\"{0}/{1}/{2}\"", ".", "format", "(", "opt", ".", "output_root", ",", "opt", ".", "group", ",", "opt", ".", "name", ")", "\n", "os", ".", "makedirs", "(", "opt", ".", "output_path", ",", "exist_ok", "=", "True", ")", "\n", "assert", "(", "isinstance", "(", "opt", ".", "gpu", ",", "int", ")", ")", "# disable multi-GPU support for now, single is enough", "\n", "opt", ".", "device", "=", "\"cpu\"", "if", "opt", ".", "cpu", "or", "not", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cuda:{}\"", ".", "format", "(", "opt", ".", "gpu", ")", "\n", "opt", ".", "H", ",", "opt", ".", "W", "=", "opt", ".", "data", ".", "image_size", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.options.save_options_file": [[107, 130], ["os.path.isfile", "print", "open", "yaml.safe_dump", "open", "yaml.safe_load", "print", "os.system", "os.system", "print", "util.to_dict", "open", "yaml.safe_dump", "input", "print", "exit", "util.to_dict"], "function", ["home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util.to_dict", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util.to_dict"], ["", "def", "save_options_file", "(", "opt", ")", ":", "\n", "    ", "opt_fname", "=", "\"{}/options.yaml\"", ".", "format", "(", "opt", ".", "output_path", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "opt_fname", ")", ":", "\n", "        ", "with", "open", "(", "opt_fname", ")", "as", "file", ":", "\n", "            ", "opt_old", "=", "yaml", ".", "safe_load", "(", "file", ")", "\n", "", "if", "opt", "!=", "opt_old", ":", "\n", "# prompt if options are not identical", "\n", "            ", "opt_new_fname", "=", "\"{}/options_temp.yaml\"", ".", "format", "(", "opt", ".", "output_path", ")", "\n", "with", "open", "(", "opt_new_fname", ",", "\"w\"", ")", "as", "file", ":", "\n", "                ", "yaml", ".", "safe_dump", "(", "util", ".", "to_dict", "(", "opt", ")", ",", "file", ",", "default_flow_style", "=", "False", ",", "indent", "=", "4", ")", "\n", "", "print", "(", "\"existing options file found (different from current one)...\"", ")", "\n", "os", ".", "system", "(", "\"diff {} {}\"", ".", "format", "(", "opt_fname", ",", "opt_new_fname", ")", ")", "\n", "os", ".", "system", "(", "\"rm {}\"", ".", "format", "(", "opt_new_fname", ")", ")", "\n", "override", "=", "None", "\n", "while", "override", "not", "in", "[", "\"y\"", ",", "\"n\"", "]", ":", "\n", "                ", "override", "=", "input", "(", "\"override? (y/n) \"", ")", "\n", "", "if", "override", "==", "\"n\"", ":", "\n", "                ", "print", "(", "\"safe exiting...\"", ")", "\n", "exit", "(", ")", "\n", "", "", "else", ":", "print", "(", "\"existing options file found (identical)\"", ")", "\n", "", "else", ":", "print", "(", "\"(creating new options file...)\"", ")", "\n", "with", "open", "(", "opt_fname", ",", "\"w\"", ")", "as", "file", ":", "\n", "        ", "yaml", ".", "safe_dump", "(", "util", ".", "to_dict", "(", "opt", ")", ",", "file", ",", "default_flow_style", "=", "False", ",", "indent", "=", "4", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.camera.Pose.__call__": [[17, 35], ["torch.tensor.float", "torch.tensor.float", "torch.tensor.float", "torch.tensor.float", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.eye().repeat", "torch.eye().repeat", "torch.eye().repeat", "torch.eye().repeat", "isinstance", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "isinstance", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "isinstance", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "isinstance", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "R", "=", "None", ",", "t", "=", "None", ")", ":", "\n", "# construct a camera pose from the given R and/or t", "\n", "        ", "assert", "(", "R", "is", "not", "None", "or", "t", "is", "not", "None", ")", "\n", "if", "R", "is", "None", ":", "\n", "            ", "if", "not", "isinstance", "(", "t", ",", "torch", ".", "Tensor", ")", ":", "t", "=", "torch", ".", "tensor", "(", "t", ")", "\n", "R", "=", "torch", ".", "eye", "(", "3", ",", "device", "=", "t", ".", "device", ")", ".", "repeat", "(", "*", "t", ".", "shape", "[", ":", "-", "1", "]", ",", "1", ",", "1", ")", "\n", "", "elif", "t", "is", "None", ":", "\n", "            ", "if", "not", "isinstance", "(", "R", ",", "torch", ".", "Tensor", ")", ":", "R", "=", "torch", ".", "tensor", "(", "R", ")", "\n", "t", "=", "torch", ".", "zeros", "(", "R", ".", "shape", "[", ":", "-", "1", "]", ",", "device", "=", "R", ".", "device", ")", "\n", "", "else", ":", "\n", "            ", "if", "not", "isinstance", "(", "R", ",", "torch", ".", "Tensor", ")", ":", "R", "=", "torch", ".", "tensor", "(", "R", ")", "\n", "if", "not", "isinstance", "(", "t", ",", "torch", ".", "Tensor", ")", ":", "t", "=", "torch", ".", "tensor", "(", "t", ")", "\n", "", "assert", "(", "R", ".", "shape", "[", ":", "-", "1", "]", "==", "t", ".", "shape", "and", "R", ".", "shape", "[", "-", "2", ":", "]", "==", "(", "3", ",", "3", ")", ")", "\n", "R", "=", "R", ".", "float", "(", ")", "\n", "t", "=", "t", ".", "float", "(", ")", "\n", "pose", "=", "torch", ".", "cat", "(", "[", "R", ",", "t", "[", "...", ",", "None", "]", "]", ",", "dim", "=", "-", "1", ")", "# [...,3,4]", "\n", "assert", "(", "pose", ".", "shape", "[", "-", "2", ":", "]", "==", "(", "3", ",", "4", ")", ")", "\n", "return", "pose", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.camera.Pose.invert": [[36, 43], ["camera.Pose.", "R.inverse", "R.transpose"], "methods", ["None"], ["", "def", "invert", "(", "self", ",", "pose", ",", "use_inverse", "=", "False", ")", ":", "\n", "# invert a camera pose", "\n", "        ", "R", ",", "t", "=", "pose", "[", "...", ",", ":", "3", "]", ",", "pose", "[", "...", ",", "3", ":", "]", "\n", "R_inv", "=", "R", ".", "inverse", "(", ")", "if", "use_inverse", "else", "R", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", "\n", "t_inv", "=", "(", "-", "R_inv", "@", "t", ")", "[", "...", ",", "0", "]", "\n", "pose_inv", "=", "self", "(", "R", "=", "R_inv", ",", "t", "=", "t_inv", ")", "\n", "return", "pose_inv", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.camera.Pose.compose": [[44, 51], ["camera.Pose.compose_pair"], "methods", ["home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.camera.Pose.compose_pair"], ["", "def", "compose", "(", "self", ",", "pose_list", ")", ":", "\n", "# compose a sequence of poses together", "\n", "# pose_new(x) = poseN o ... o pose2 o pose1(x)", "\n", "        ", "pose_new", "=", "pose_list", "[", "0", "]", "\n", "for", "pose", "in", "pose_list", "[", "1", ":", "]", ":", "\n", "            ", "pose_new", "=", "self", ".", "compose_pair", "(", "pose_new", ",", "pose", ")", "\n", "", "return", "pose_new", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.camera.Pose.compose_pair": [[52, 60], ["camera.Pose."], "methods", ["None"], ["", "def", "compose_pair", "(", "self", ",", "pose_a", ",", "pose_b", ")", ":", "\n", "# pose_new(x) = pose_b o pose_a(x)", "\n", "        ", "R_a", ",", "t_a", "=", "pose_a", "[", "...", ",", ":", "3", "]", ",", "pose_a", "[", "...", ",", "3", ":", "]", "\n", "R_b", ",", "t_b", "=", "pose_b", "[", "...", ",", ":", "3", "]", ",", "pose_b", "[", "...", ",", "3", ":", "]", "\n", "R_new", "=", "R_b", "@", "R_a", "\n", "t_new", "=", "(", "R_b", "@", "t_a", "+", "t_b", ")", "[", "...", ",", "0", "]", "\n", "pose_new", "=", "self", "(", "R", "=", "R_new", ",", "t", "=", "t_new", ")", "\n", "return", "pose_new", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.camera.Lie.so3_to_SO3": [[66, 74], ["camera.Lie.skew_symmetric", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "camera.Lie.taylor_A", "camera.Lie.taylor_B", "w.norm"], "methods", ["home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.camera.Lie.skew_symmetric", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.warp.Lie.taylor_A", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.warp.Lie.taylor_B"], ["def", "so3_to_SO3", "(", "self", ",", "w", ")", ":", "# [...,3]", "\n", "        ", "wx", "=", "self", ".", "skew_symmetric", "(", "w", ")", "\n", "theta", "=", "w", ".", "norm", "(", "dim", "=", "-", "1", ")", "[", "...", ",", "None", ",", "None", "]", "\n", "I", "=", "torch", ".", "eye", "(", "3", ",", "device", "=", "w", ".", "device", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "A", "=", "self", ".", "taylor_A", "(", "theta", ")", "\n", "B", "=", "self", ".", "taylor_B", "(", "theta", ")", "\n", "R", "=", "I", "+", "A", "*", "wx", "+", "B", "*", "wx", "@", "wx", "\n", "return", "R", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.camera.Lie.SO3_to_so3": [[75, 82], ["torch.stack", "torch.stack", "torch.stack", "torch.stack", "R.transpose", "camera.Lie.taylor_A"], "methods", ["home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.warp.Lie.taylor_A"], ["", "def", "SO3_to_so3", "(", "self", ",", "R", ",", "eps", "=", "1e-7", ")", ":", "# [...,3,3]", "\n", "        ", "trace", "=", "R", "[", "...", ",", "0", ",", "0", "]", "+", "R", "[", "...", ",", "1", ",", "1", "]", "+", "R", "[", "...", ",", "2", ",", "2", "]", "\n", "theta", "=", "(", "(", "trace", "-", "1", ")", "/", "2", ")", ".", "clamp", "(", "-", "1", "+", "eps", ",", "1", "-", "eps", ")", ".", "acos_", "(", ")", "[", "...", ",", "None", ",", "None", "]", "%", "np", ".", "pi", "# ln(R) will explode if theta==pi", "\n", "lnR", "=", "1", "/", "(", "2", "*", "self", ".", "taylor_A", "(", "theta", ")", "+", "1e-8", ")", "*", "(", "R", "-", "R", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ")", "# FIXME: wei-chiu finds it weird", "\n", "w0", ",", "w1", ",", "w2", "=", "lnR", "[", "...", ",", "2", ",", "1", "]", ",", "lnR", "[", "...", ",", "0", ",", "2", "]", ",", "lnR", "[", "...", ",", "1", ",", "0", "]", "\n", "w", "=", "torch", ".", "stack", "(", "[", "w0", ",", "w1", ",", "w2", "]", ",", "dim", "=", "-", "1", ")", "\n", "return", "w", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.camera.Lie.se3_to_SE3": [[83, 95], ["wu.split", "camera.Lie.skew_symmetric", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "camera.Lie.taylor_A", "camera.Lie.taylor_B", "camera.Lie.taylor_C", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "w.norm"], "methods", ["home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.camera.Lie.skew_symmetric", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.warp.Lie.taylor_A", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.warp.Lie.taylor_B", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.warp.Lie.taylor_C"], ["", "def", "se3_to_SE3", "(", "self", ",", "wu", ")", ":", "# [...,3]", "\n", "        ", "w", ",", "u", "=", "wu", ".", "split", "(", "[", "3", ",", "3", "]", ",", "dim", "=", "-", "1", ")", "\n", "wx", "=", "self", ".", "skew_symmetric", "(", "w", ")", "\n", "theta", "=", "w", ".", "norm", "(", "dim", "=", "-", "1", ")", "[", "...", ",", "None", ",", "None", "]", "\n", "I", "=", "torch", ".", "eye", "(", "3", ",", "device", "=", "w", ".", "device", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "A", "=", "self", ".", "taylor_A", "(", "theta", ")", "\n", "B", "=", "self", ".", "taylor_B", "(", "theta", ")", "\n", "C", "=", "self", ".", "taylor_C", "(", "theta", ")", "\n", "R", "=", "I", "+", "A", "*", "wx", "+", "B", "*", "wx", "@", "wx", "\n", "V", "=", "I", "+", "B", "*", "wx", "+", "C", "*", "wx", "@", "wx", "\n", "Rt", "=", "torch", ".", "cat", "(", "[", "R", ",", "(", "V", "@", "u", "[", "...", ",", "None", "]", ")", "]", ",", "dim", "=", "-", "1", ")", "\n", "return", "Rt", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.camera.Lie.SE3_to_se3": [[96, 108], ["Rt.split", "camera.Lie.SO3_to_so3", "camera.Lie.skew_symmetric", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "camera.Lie.taylor_A", "camera.Lie.taylor_B", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "camera.Lie.norm"], "methods", ["home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.camera.Lie.SO3_to_so3", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.camera.Lie.skew_symmetric", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.warp.Lie.taylor_A", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.warp.Lie.taylor_B"], ["", "def", "SE3_to_se3", "(", "self", ",", "Rt", ",", "eps", "=", "1e-8", ")", ":", "# [...,3,4]", "\n", "        ", "R", ",", "t", "=", "Rt", ".", "split", "(", "[", "3", ",", "1", "]", ",", "dim", "=", "-", "1", ")", "\n", "w", "=", "self", ".", "SO3_to_so3", "(", "R", ")", "\n", "wx", "=", "self", ".", "skew_symmetric", "(", "w", ")", "\n", "theta", "=", "w", ".", "norm", "(", "dim", "=", "-", "1", ")", "[", "...", ",", "None", ",", "None", "]", "\n", "I", "=", "torch", ".", "eye", "(", "3", ",", "device", "=", "w", ".", "device", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "A", "=", "self", ".", "taylor_A", "(", "theta", ")", "\n", "B", "=", "self", ".", "taylor_B", "(", "theta", ")", "\n", "invV", "=", "I", "-", "0.5", "*", "wx", "+", "(", "1", "-", "A", "/", "(", "2", "*", "B", ")", ")", "/", "(", "theta", "**", "2", "+", "eps", ")", "*", "wx", "@", "wx", "\n", "u", "=", "(", "invV", "@", "t", ")", "[", "...", ",", "0", "]", "\n", "wu", "=", "torch", ".", "cat", "(", "[", "w", ",", "u", "]", ",", "dim", "=", "-", "1", ")", "\n", "return", "wu", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.camera.Lie.skew_symmetric": [[109, 116], ["w.unbind", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack"], "methods", ["None"], ["", "def", "skew_symmetric", "(", "self", ",", "w", ")", ":", "\n", "        ", "w0", ",", "w1", ",", "w2", "=", "w", ".", "unbind", "(", "dim", "=", "-", "1", ")", "\n", "O", "=", "torch", ".", "zeros_like", "(", "w0", ")", "\n", "wx", "=", "torch", ".", "stack", "(", "[", "torch", ".", "stack", "(", "[", "O", ",", "-", "w2", ",", "w1", "]", ",", "dim", "=", "-", "1", ")", ",", "\n", "torch", ".", "stack", "(", "[", "w2", ",", "O", ",", "-", "w0", "]", ",", "dim", "=", "-", "1", ")", ",", "\n", "torch", ".", "stack", "(", "[", "-", "w1", ",", "w0", ",", "O", "]", ",", "dim", "=", "-", "1", ")", "]", ",", "dim", "=", "-", "2", ")", "\n", "return", "wx", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.camera.Lie.taylor_A": [[117, 125], ["torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "range"], "methods", ["None"], ["", "def", "taylor_A", "(", "self", ",", "x", ",", "nth", "=", "10", ")", ":", "\n", "# Taylor expansion of sin(x)/x", "\n", "        ", "ans", "=", "torch", ".", "zeros_like", "(", "x", ")", "\n", "denom", "=", "1.", "\n", "for", "i", "in", "range", "(", "nth", "+", "1", ")", ":", "\n", "            ", "if", "i", ">", "0", ":", "denom", "*=", "(", "2", "*", "i", ")", "*", "(", "2", "*", "i", "+", "1", ")", "\n", "ans", "=", "ans", "+", "(", "-", "1", ")", "**", "i", "*", "x", "**", "(", "2", "*", "i", ")", "/", "denom", "\n", "", "return", "ans", "\n", "", "def", "taylor_B", "(", "self", ",", "x", ",", "nth", "=", "10", ")", ":", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.camera.Lie.taylor_B": [[125, 133], ["torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "range"], "methods", ["None"], ["", "def", "taylor_B", "(", "self", ",", "x", ",", "nth", "=", "10", ")", ":", "\n", "# Taylor expansion of (1-cos(x))/x**2", "\n", "        ", "ans", "=", "torch", ".", "zeros_like", "(", "x", ")", "\n", "denom", "=", "1.", "\n", "for", "i", "in", "range", "(", "nth", "+", "1", ")", ":", "\n", "            ", "denom", "*=", "(", "2", "*", "i", "+", "1", ")", "*", "(", "2", "*", "i", "+", "2", ")", "\n", "ans", "=", "ans", "+", "(", "-", "1", ")", "**", "i", "*", "x", "**", "(", "2", "*", "i", ")", "/", "denom", "\n", "", "return", "ans", "\n", "", "def", "taylor_C", "(", "self", ",", "x", ",", "nth", "=", "10", ")", ":", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.camera.Lie.taylor_C": [[133, 141], ["torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "range"], "methods", ["None"], ["", "def", "taylor_C", "(", "self", ",", "x", ",", "nth", "=", "10", ")", ":", "\n", "# Taylor expansion of (x-sin(x))/x**3", "\n", "        ", "ans", "=", "torch", ".", "zeros_like", "(", "x", ")", "\n", "denom", "=", "1.", "\n", "for", "i", "in", "range", "(", "nth", "+", "1", ")", ":", "\n", "            ", "denom", "*=", "(", "2", "*", "i", "+", "2", ")", "*", "(", "2", "*", "i", "+", "3", ")", "\n", "ans", "=", "ans", "+", "(", "-", "1", ")", "**", "i", "*", "x", "**", "(", "2", "*", "i", ")", "/", "denom", "\n", "", "return", "ans", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.camera.Quaternion.q_to_R": [[144, 151], ["q.unbind", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack"], "methods", ["None"], ["    ", "def", "q_to_R", "(", "self", ",", "q", ")", ":", "\n", "# https://en.wikipedia.org/wiki/Rotation_matrix#Quaternion", "\n", "        ", "qa", ",", "qb", ",", "qc", ",", "qd", "=", "q", ".", "unbind", "(", "dim", "=", "-", "1", ")", "\n", "R", "=", "torch", ".", "stack", "(", "[", "torch", ".", "stack", "(", "[", "1", "-", "2", "*", "(", "qc", "**", "2", "+", "qd", "**", "2", ")", ",", "2", "*", "(", "qb", "*", "qc", "-", "qa", "*", "qd", ")", ",", "2", "*", "(", "qa", "*", "qc", "+", "qb", "*", "qd", ")", "]", ",", "dim", "=", "-", "1", ")", ",", "\n", "torch", ".", "stack", "(", "[", "2", "*", "(", "qb", "*", "qc", "+", "qa", "*", "qd", ")", ",", "1", "-", "2", "*", "(", "qb", "**", "2", "+", "qd", "**", "2", ")", ",", "2", "*", "(", "qc", "*", "qd", "-", "qa", "*", "qb", ")", "]", ",", "dim", "=", "-", "1", ")", ",", "\n", "torch", ".", "stack", "(", "[", "2", "*", "(", "qb", "*", "qd", "-", "qa", "*", "qc", ")", ",", "2", "*", "(", "qa", "*", "qb", "+", "qc", "*", "qd", ")", ",", "1", "-", "2", "*", "(", "qb", "**", "2", "+", "qc", "**", "2", ")", "]", ",", "dim", "=", "-", "1", ")", "]", ",", "dim", "=", "-", "2", ")", "\n", "return", "R", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.camera.Quaternion.R_to_q": [[152, 177], ["R.unbind", "row0.unbind", "row1.unbind", "row2.unbind", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "enumerate", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.linalg.eigh", "torch.linalg.eigh", "torch.linalg.eigh", "torch.linalg.eigh", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "eigval.argmax"], "methods", ["None"], ["", "def", "R_to_q", "(", "self", ",", "R", ",", "eps", "=", "1e-8", ")", ":", "# [B,3,3]", "\n", "# https://en.wikipedia.org/wiki/Rotation_matrix#Quaternion", "\n", "# FIXME: this function seems a bit problematic, need to double-check", "\n", "        ", "row0", ",", "row1", ",", "row2", "=", "R", ".", "unbind", "(", "dim", "=", "-", "2", ")", "\n", "R00", ",", "R01", ",", "R02", "=", "row0", ".", "unbind", "(", "dim", "=", "-", "1", ")", "\n", "R10", ",", "R11", ",", "R12", "=", "row1", ".", "unbind", "(", "dim", "=", "-", "1", ")", "\n", "R20", ",", "R21", ",", "R22", "=", "row2", ".", "unbind", "(", "dim", "=", "-", "1", ")", "\n", "t", "=", "R", "[", "...", ",", "0", ",", "0", "]", "+", "R", "[", "...", ",", "1", ",", "1", "]", "+", "R", "[", "...", ",", "2", ",", "2", "]", "\n", "r", "=", "(", "1", "+", "t", "+", "eps", ")", ".", "sqrt", "(", ")", "\n", "qa", "=", "0.5", "*", "r", "\n", "qb", "=", "(", "R21", "-", "R12", ")", ".", "sign", "(", ")", "*", "0.5", "*", "(", "1", "+", "R00", "-", "R11", "-", "R22", "+", "eps", ")", ".", "sqrt", "(", ")", "\n", "qc", "=", "(", "R02", "-", "R20", ")", ".", "sign", "(", ")", "*", "0.5", "*", "(", "1", "-", "R00", "+", "R11", "-", "R22", "+", "eps", ")", ".", "sqrt", "(", ")", "\n", "qd", "=", "(", "R10", "-", "R01", ")", ".", "sign", "(", ")", "*", "0.5", "*", "(", "1", "-", "R00", "-", "R11", "+", "R22", "+", "eps", ")", ".", "sqrt", "(", ")", "\n", "q", "=", "torch", ".", "stack", "(", "[", "qa", ",", "qb", ",", "qc", ",", "qd", "]", ",", "dim", "=", "-", "1", ")", "\n", "for", "i", ",", "qi", "in", "enumerate", "(", "q", ")", ":", "\n", "            ", "if", "torch", ".", "isnan", "(", "qi", ")", ".", "any", "(", ")", ":", "\n", "                ", "K", "=", "torch", ".", "stack", "(", "[", "torch", ".", "stack", "(", "[", "R00", "-", "R11", "-", "R22", ",", "R10", "+", "R01", ",", "R20", "+", "R02", ",", "R12", "-", "R21", "]", ",", "dim", "=", "-", "1", ")", ",", "\n", "torch", ".", "stack", "(", "[", "R10", "+", "R01", ",", "R11", "-", "R00", "-", "R22", ",", "R21", "+", "R12", ",", "R20", "-", "R02", "]", ",", "dim", "=", "-", "1", ")", ",", "\n", "torch", ".", "stack", "(", "[", "R20", "+", "R02", ",", "R21", "+", "R12", ",", "R22", "-", "R00", "-", "R11", ",", "R01", "-", "R10", "]", ",", "dim", "=", "-", "1", ")", ",", "\n", "torch", ".", "stack", "(", "[", "R12", "-", "R21", ",", "R20", "-", "R02", ",", "R01", "-", "R10", ",", "R00", "+", "R11", "+", "R22", "]", ",", "dim", "=", "-", "1", ")", "]", ",", "dim", "=", "-", "2", ")", "/", "3.0", "\n", "K", "=", "K", "[", "i", "]", "\n", "eigval", ",", "eigvec", "=", "torch", ".", "linalg", ".", "eigh", "(", "K", ")", "\n", "V", "=", "eigvec", "[", ":", ",", "eigval", ".", "argmax", "(", ")", "]", "\n", "q", "[", "i", "]", "=", "torch", ".", "stack", "(", "[", "V", "[", "3", "]", ",", "V", "[", "0", "]", ",", "V", "[", "1", "]", ",", "V", "[", "2", "]", "]", ")", "\n", "", "", "return", "q", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.camera.Quaternion.invert": [[178, 183], ["q.unbind", "q.norm", "torch.stack", "torch.stack", "torch.stack", "torch.stack"], "methods", ["None"], ["", "def", "invert", "(", "self", ",", "q", ")", ":", "\n", "        ", "qa", ",", "qb", ",", "qc", ",", "qd", "=", "q", ".", "unbind", "(", "dim", "=", "-", "1", ")", "\n", "norm", "=", "q", ".", "norm", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "q_inv", "=", "torch", ".", "stack", "(", "[", "qa", ",", "-", "qb", ",", "-", "qc", ",", "-", "qd", "]", ",", "dim", "=", "-", "1", ")", "/", "norm", "**", "2", "\n", "return", "q_inv", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.camera.Quaternion.product": [[184, 192], ["q1.unbind", "q2.unbind", "torch.stack", "torch.stack", "torch.stack", "torch.stack"], "methods", ["None"], ["", "def", "product", "(", "self", ",", "q1", ",", "q2", ")", ":", "# [B,4]", "\n", "        ", "q1a", ",", "q1b", ",", "q1c", ",", "q1d", "=", "q1", ".", "unbind", "(", "dim", "=", "-", "1", ")", "\n", "q2a", ",", "q2b", ",", "q2c", ",", "q2d", "=", "q2", ".", "unbind", "(", "dim", "=", "-", "1", ")", "\n", "hamil_prod", "=", "torch", ".", "stack", "(", "[", "q1a", "*", "q2a", "-", "q1b", "*", "q2b", "-", "q1c", "*", "q2c", "-", "q1d", "*", "q2d", ",", "\n", "q1a", "*", "q2b", "+", "q1b", "*", "q2a", "+", "q1c", "*", "q2d", "-", "q1d", "*", "q2c", ",", "\n", "q1a", "*", "q2c", "-", "q1b", "*", "q2d", "+", "q1c", "*", "q2a", "+", "q1d", "*", "q2b", ",", "\n", "q1a", "*", "q2d", "+", "q1b", "*", "q2c", "-", "q1c", "*", "q2b", "+", "q1d", "*", "q2a", "]", ",", "dim", "=", "-", "1", ")", "\n", "return", "hamil_prod", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.camera.to_hom": [[197, 201], ["torch.cat", "torch.cat", "torch.ones_like", "torch.ones_like"], "function", ["None"], ["def", "to_hom", "(", "X", ")", ":", "\n", "# get homogeneous coordinates of the input", "\n", "    ", "X_hom", "=", "torch", ".", "cat", "(", "[", "X", ",", "torch", ".", "ones_like", "(", "X", "[", "...", ",", ":", "1", "]", ")", "]", ",", "dim", "=", "-", "1", ")", "\n", "return", "X_hom", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.camera.world2cam": [[203, 206], ["camera.to_hom", "pose.transpose"], "function", ["home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.camera.to_hom"], ["", "def", "world2cam", "(", "X", ",", "pose", ")", ":", "# [B,N,3]", "\n", "    ", "X_hom", "=", "to_hom", "(", "X", ")", "\n", "return", "X_hom", "@", "pose", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", "\n", "", "def", "cam2img", "(", "X", ",", "cam_intr", ")", ":", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.camera.cam2img": [[206, 208], ["cam_intr.transpose"], "function", ["None"], ["", "def", "cam2img", "(", "X", ",", "cam_intr", ")", ":", "\n", "    ", "return", "X", "@", "cam_intr", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", "\n", "", "def", "img2cam", "(", "X", ",", "cam_intr", ")", ":", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.camera.img2cam": [[208, 210], ["cam_intr.inverse().transpose", "cam_intr.inverse"], "function", ["None"], ["", "def", "img2cam", "(", "X", ",", "cam_intr", ")", ":", "\n", "    ", "return", "X", "@", "cam_intr", ".", "inverse", "(", ")", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", "\n", "", "def", "cam2world", "(", "X", ",", "pose", ")", ":", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.camera.cam2world": [[210, 214], ["camera.to_hom", "camera.Pose.invert", "Pose().invert.transpose", "camera.Pose"], "function", ["home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.camera.to_hom", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.camera.Quaternion.invert"], ["", "def", "cam2world", "(", "X", ",", "pose", ")", ":", "\n", "    ", "X_hom", "=", "to_hom", "(", "X", ")", "\n", "pose_inv", "=", "Pose", "(", ")", ".", "invert", "(", "pose", ")", "\n", "return", "X_hom", "@", "pose_inv", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.camera.angle_to_rotation_matrix": [[215, 225], ["torch.zeros_like", "torch.zeros_like", "torch.ones_like", "torch.ones_like", "torch.stack", "torch.stack", "M.roll.roll", "dict", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "a.cos", "a.sin", "a.cos", "a.sin"], "function", ["None"], ["", "def", "angle_to_rotation_matrix", "(", "a", ",", "axis", ")", ":", "\n", "# get the rotation matrix from Euler angle around specific axis", "\n", "    ", "roll", "=", "dict", "(", "X", "=", "1", ",", "Y", "=", "2", ",", "Z", "=", "0", ")", "[", "axis", "]", "\n", "O", "=", "torch", ".", "zeros_like", "(", "a", ")", "\n", "I", "=", "torch", ".", "ones_like", "(", "a", ")", "\n", "M", "=", "torch", ".", "stack", "(", "[", "torch", ".", "stack", "(", "[", "a", ".", "cos", "(", ")", ",", "-", "a", ".", "sin", "(", ")", ",", "O", "]", ",", "dim", "=", "-", "1", ")", ",", "\n", "torch", ".", "stack", "(", "[", "a", ".", "sin", "(", ")", ",", "a", ".", "cos", "(", ")", ",", "O", "]", ",", "dim", "=", "-", "1", ")", ",", "\n", "torch", ".", "stack", "(", "[", "O", ",", "O", ",", "I", "]", ",", "dim", "=", "-", "1", ")", "]", ",", "dim", "=", "-", "2", ")", "\n", "M", "=", "M", ".", "roll", "(", "(", "roll", ",", "roll", ")", ",", "dims", "=", "(", "-", "2", ",", "-", "1", ")", ")", "\n", "return", "M", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.camera.get_center_and_ray": [[226, 245], ["len", "torch.stack().view.repeat", "camera.img2cam", "torch.zeros_like", "torch.zeros_like", "camera.cam2world", "camera.cam2world", "torch.no_grad", "torch.no_grad", "torch.arange().add_", "torch.arange().add_", "torch.arange().add_", "torch.arange().add_", "torch.meshgrid", "torch.meshgrid", "torch.stack().view", "torch.stack().view", "camera.to_hom", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.stack", "torch.stack"], "function", ["home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.camera.img2cam", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.camera.cam2world", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.camera.cam2world", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.camera.to_hom"], ["", "def", "get_center_and_ray", "(", "opt", ",", "pose", ",", "intr", "=", "None", ")", ":", "# [HW,2]", "\n", "# given the intrinsic/extrinsic matrices, get the camera center and ray directions]", "\n", "    ", "assert", "(", "opt", ".", "camera", ".", "model", "==", "\"perspective\"", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# compute image coordinate grid", "\n", "        ", "y_range", "=", "torch", ".", "arange", "(", "opt", ".", "H", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "opt", ".", "device", ")", ".", "add_", "(", "0.5", ")", "\n", "x_range", "=", "torch", ".", "arange", "(", "opt", ".", "W", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "opt", ".", "device", ")", ".", "add_", "(", "0.5", ")", "\n", "Y", ",", "X", "=", "torch", ".", "meshgrid", "(", "y_range", ",", "x_range", ")", "# [H,W]", "\n", "xy_grid", "=", "torch", ".", "stack", "(", "[", "X", ",", "Y", "]", ",", "dim", "=", "-", "1", ")", ".", "view", "(", "-", "1", ",", "2", ")", "# [HW,2]", "\n", "# compute center and ray", "\n", "", "batch_size", "=", "len", "(", "pose", ")", "\n", "xy_grid", "=", "xy_grid", ".", "repeat", "(", "batch_size", ",", "1", ",", "1", ")", "# [B,HW,2]", "\n", "grid_3D", "=", "img2cam", "(", "to_hom", "(", "xy_grid", ")", ",", "intr", ")", "# [B,HW,3]", "\n", "center_3D", "=", "torch", ".", "zeros_like", "(", "grid_3D", ")", "# [B,HW,3]", "\n", "# transform from camera to world coordinates", "\n", "grid_3D", "=", "cam2world", "(", "grid_3D", ",", "pose", ")", "# [B,HW,3]", "\n", "center_3D", "=", "cam2world", "(", "center_3D", ",", "pose", ")", "# [B,HW,3]", "\n", "ray", "=", "grid_3D", "-", "center_3D", "# [B,HW,3]", "\n", "return", "center_3D", ",", "ray", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.camera.get_3D_points_from_depth": [[246, 251], ["None"], "function", ["None"], ["", "def", "get_3D_points_from_depth", "(", "opt", ",", "center", ",", "ray", ",", "depth", ",", "multi_samples", "=", "False", ")", ":", "\n", "    ", "if", "multi_samples", ":", "center", ",", "ray", "=", "center", "[", ":", ",", ":", ",", "None", "]", ",", "ray", "[", ":", ",", ":", ",", "None", "]", "\n", "# x = c+dv", "\n", "points_3D", "=", "center", "+", "ray", "*", "depth", "# [B,HW,3]/[B,HW,N,3]/[N,3]", "\n", "return", "points_3D", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.camera.convert_NDC": [[252, 270], ["center.unbind", "ray.unbind", "torch.stack", "torch.stack", "torch.stack", "torch.stack"], "function", ["None"], ["", "def", "convert_NDC", "(", "opt", ",", "center", ",", "ray", ",", "intr", ",", "near", "=", "1", ")", ":", "\n", "# shift camera center (ray origins) to near plane (z=1)", "\n", "# (unlike conventional NDC, we assume the cameras are facing towards the +z direction)", "\n", "    ", "center", "=", "center", "+", "(", "near", "-", "center", "[", "...", ",", "2", ":", "]", ")", "/", "ray", "[", "...", ",", "2", ":", "]", "*", "ray", "\n", "# projection", "\n", "cx", ",", "cy", ",", "cz", "=", "center", ".", "unbind", "(", "dim", "=", "-", "1", ")", "# [B,HW]", "\n", "rx", ",", "ry", ",", "rz", "=", "ray", ".", "unbind", "(", "dim", "=", "-", "1", ")", "# [B,HW]", "\n", "scale_x", "=", "intr", "[", ":", ",", "0", ",", "0", "]", "/", "intr", "[", ":", ",", "0", ",", "2", "]", "# [B]", "\n", "scale_y", "=", "intr", "[", ":", ",", "1", ",", "1", "]", "/", "intr", "[", ":", ",", "1", ",", "2", "]", "# [B]", "\n", "cnx", "=", "scale_x", "[", ":", ",", "None", "]", "*", "(", "cx", "/", "cz", ")", "\n", "cny", "=", "scale_y", "[", ":", ",", "None", "]", "*", "(", "cy", "/", "cz", ")", "\n", "cnz", "=", "1", "-", "2", "*", "near", "/", "cz", "\n", "rnx", "=", "scale_x", "[", ":", ",", "None", "]", "*", "(", "rx", "/", "rz", "-", "cx", "/", "cz", ")", "\n", "rny", "=", "scale_y", "[", ":", ",", "None", "]", "*", "(", "ry", "/", "rz", "-", "cy", "/", "cz", ")", "\n", "rnz", "=", "2", "*", "near", "/", "cz", "\n", "center_ndc", "=", "torch", ".", "stack", "(", "[", "cnx", ",", "cny", ",", "cnz", "]", ",", "dim", "=", "-", "1", ")", "# [B,HW,3]", "\n", "ray_ndc", "=", "torch", ".", "stack", "(", "[", "rnx", ",", "rny", ",", "rnz", "]", ",", "dim", "=", "-", "1", ")", "# [B,HW,3]", "\n", "return", "center_ndc", ",", "ray_ndc", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.camera.rotation_distance": [[271, 277], ["R2.transpose"], "function", ["None"], ["", "def", "rotation_distance", "(", "R1", ",", "R2", ",", "eps", "=", "1e-7", ")", ":", "\n", "# http://www.boris-belousov.net/2016/12/01/quat-dist/", "\n", "    ", "R_diff", "=", "R1", "@", "R2", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", "\n", "trace", "=", "R_diff", "[", "...", ",", "0", ",", "0", "]", "+", "R_diff", "[", "...", ",", "1", ",", "1", "]", "+", "R_diff", "[", "...", ",", "2", ",", "2", "]", "\n", "angle", "=", "(", "(", "trace", "-", "1", ")", "/", "2", ")", ".", "clamp", "(", "-", "1", "+", "eps", ",", "1", "-", "eps", ")", ".", "acos_", "(", ")", "# numerical stability near -1/+1", "\n", "return", "angle", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.camera.procrustes_analysis": [[278, 296], ["X0.mean", "X1.mean", "easydict.EasyDict", "R.det", "V.t", "X0cs.t"], "function", ["None"], ["", "def", "procrustes_analysis", "(", "X0", ",", "X1", ")", ":", "# [N,3]", "\n", "# translation", "\n", "    ", "t0", "=", "X0", ".", "mean", "(", "dim", "=", "0", ",", "keepdim", "=", "True", ")", "\n", "t1", "=", "X1", ".", "mean", "(", "dim", "=", "0", ",", "keepdim", "=", "True", ")", "\n", "X0c", "=", "X0", "-", "t0", "\n", "X1c", "=", "X1", "-", "t1", "\n", "# scale", "\n", "s0", "=", "(", "X0c", "**", "2", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", ".", "mean", "(", ")", ".", "sqrt", "(", ")", "\n", "s1", "=", "(", "X1c", "**", "2", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", ".", "mean", "(", ")", ".", "sqrt", "(", ")", "\n", "X0cs", "=", "X0c", "/", "s0", "\n", "X1cs", "=", "X1c", "/", "s1", "\n", "# rotation (use double for SVD, float loses precision)", "\n", "U", ",", "S", ",", "V", "=", "(", "X0cs", ".", "t", "(", ")", "@", "X1cs", ")", ".", "double", "(", ")", ".", "svd", "(", "some", "=", "True", ")", "\n", "R", "=", "(", "U", "@", "V", ".", "t", "(", ")", ")", ".", "float", "(", ")", "\n", "if", "R", ".", "det", "(", ")", "<", "0", ":", "R", "[", "2", "]", "*=", "-", "1", "\n", "# align X1 to X0: X1to0 = (X1-t1)/s1@R.t()*s0+t0", "\n", "sim3", "=", "edict", "(", "t0", "=", "t0", "[", "0", "]", ",", "t1", "=", "t1", "[", "0", "]", ",", "s0", "=", "s0", ",", "s1", "=", "s1", ",", "R", "=", "R", ")", "\n", "return", "sim3", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.camera.get_novel_view_poses": [[297, 308], ["camera.angle_to_rotation_matrix", "camera.angle_to_rotation_matrix", "pose", "pose", "pose", "pose.compose", "pose.compose", "torch.arange", "torch.arange", "pose_anchor.cpu", "theta.sin", "theta.cos"], "function", ["home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.camera.angle_to_rotation_matrix", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.camera.angle_to_rotation_matrix", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.camera.Pose.compose", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.camera.Pose.compose"], ["", "def", "get_novel_view_poses", "(", "opt", ",", "pose_anchor", ",", "N", "=", "60", ",", "scale", "=", "1", ")", ":", "\n", "# create circular viewpoints (small oscillations)", "\n", "    ", "theta", "=", "torch", ".", "arange", "(", "N", ")", "/", "N", "*", "2", "*", "np", ".", "pi", "\n", "R_x", "=", "angle_to_rotation_matrix", "(", "(", "theta", ".", "sin", "(", ")", "*", "0.05", ")", ".", "asin", "(", ")", ",", "\"X\"", ")", "\n", "R_y", "=", "angle_to_rotation_matrix", "(", "(", "theta", ".", "cos", "(", ")", "*", "0.05", ")", ".", "asin", "(", ")", ",", "\"Y\"", ")", "\n", "pose_rot", "=", "pose", "(", "R", "=", "R_y", "@", "R_x", ")", "\n", "pose_shift", "=", "pose", "(", "t", "=", "[", "0", ",", "0", ",", "-", "4", "*", "scale", "]", ")", "\n", "pose_shift2", "=", "pose", "(", "t", "=", "[", "0", ",", "0", ",", "3.8", "*", "scale", "]", ")", "\n", "pose_oscil", "=", "pose", ".", "compose", "(", "[", "pose_shift", ",", "pose_rot", ",", "pose_shift2", "]", ")", "\n", "pose_novel", "=", "pose", ".", "compose", "(", "[", "pose_oscil", ",", "pose_anchor", ".", "cpu", "(", ")", "[", "None", "]", "]", ")", "\n", "return", "pose_novel", "\n", "", ""]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util_vis.tb_image": [[15, 26], ["torch.no_grad", "torch.no_grad", "util_vis.preprocess_vis_image", "torchvision.utils.make_grid", "torchvision.utils.make_grid", "tb.add_image", "torch.cat", "torch.cat", "torchvision.utils.make_grid", "torchvision.utils.make_grid"], "function", ["home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util_vis.preprocess_vis_image"], ["@", "torch", ".", "no_grad", "(", ")", "\n", "def", "tb_image", "(", "opt", ",", "tb", ",", "step", ",", "group", ",", "name", ",", "images", ",", "num_vis", "=", "None", ",", "from_range", "=", "(", "0", ",", "1", ")", ",", "cmap", "=", "\"gray\"", ")", ":", "\n", "    ", "images", "=", "preprocess_vis_image", "(", "opt", ",", "images", ",", "from_range", "=", "from_range", ",", "cmap", "=", "cmap", ")", "\n", "num_H", ",", "num_W", "=", "num_vis", "or", "opt", ".", "tb", ".", "num_images", "\n", "images", "=", "images", "[", ":", "num_H", "*", "num_W", "]", "\n", "image_grid", "=", "torchvision", ".", "utils", ".", "make_grid", "(", "images", "[", ":", ",", ":", "3", "]", ",", "nrow", "=", "num_W", ",", "pad_value", "=", "1.", ")", "\n", "if", "images", ".", "shape", "[", "1", "]", "==", "4", ":", "\n", "        ", "mask_grid", "=", "torchvision", ".", "utils", ".", "make_grid", "(", "images", "[", ":", ",", "3", ":", "]", ",", "nrow", "=", "num_W", ",", "pad_value", "=", "1.", ")", "[", ":", "1", "]", "\n", "image_grid", "=", "torch", ".", "cat", "(", "[", "image_grid", ",", "mask_grid", "]", ",", "dim", "=", "0", ")", "\n", "", "tag", "=", "\"{0}/{1}\"", ".", "format", "(", "group", ",", "name", ")", "\n", "tb", ".", "add_image", "(", "tag", ",", "image_grid", ",", "step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util_vis.preprocess_vis_image": [[27, 34], ["get_heatmap.clamp().cpu", "util_vis.get_heatmap", "get_heatmap.clamp", "images[].cpu"], "function", ["home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util_vis.get_heatmap"], ["", "def", "preprocess_vis_image", "(", "opt", ",", "images", ",", "from_range", "=", "(", "0", ",", "1", ")", ",", "cmap", "=", "\"gray\"", ")", ":", "\n", "    ", "min", ",", "max", "=", "from_range", "\n", "images", "=", "(", "images", "-", "min", ")", "/", "(", "max", "-", "min", ")", "\n", "images", "=", "images", ".", "clamp", "(", "min", "=", "0", ",", "max", "=", "1", ")", ".", "cpu", "(", ")", "\n", "if", "images", ".", "shape", "[", "1", "]", "==", "1", ":", "\n", "        ", "images", "=", "get_heatmap", "(", "opt", ",", "images", "[", ":", ",", "0", "]", ".", "cpu", "(", ")", ",", "cmap", "=", "cmap", ")", "\n", "", "return", "images", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util_vis.dump_images": [[35, 42], ["util_vis.preprocess_vis_image", "images.cpu().permute().numpy.cpu().permute().numpy", "zip", "imageio.imsave", "images.cpu().permute().numpy.cpu().permute", "images.cpu().permute().numpy.cpu"], "function", ["home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util_vis.preprocess_vis_image"], ["", "def", "dump_images", "(", "opt", ",", "idx", ",", "name", ",", "images", ",", "masks", "=", "None", ",", "from_range", "=", "(", "0", ",", "1", ")", ",", "cmap", "=", "\"gray\"", ")", ":", "\n", "    ", "images", "=", "preprocess_vis_image", "(", "opt", ",", "images", ",", "masks", "=", "masks", ",", "from_range", "=", "from_range", ",", "cmap", "=", "cmap", ")", "# [B,3,H,W]", "\n", "images", "=", "images", ".", "cpu", "(", ")", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "numpy", "(", ")", "# [B,H,W,3]", "\n", "for", "i", ",", "img", "in", "zip", "(", "idx", ",", "images", ")", ":", "\n", "        ", "fname", "=", "\"{}/dump/{}_{}.png\"", ".", "format", "(", "opt", ".", "output_path", ",", "i", ",", "name", ")", "\n", "img_uint8", "=", "(", "img", "*", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "imageio", ".", "imsave", "(", "fname", ",", "img_uint8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util_vis.get_heatmap": [[43, 47], ["torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "matplotlib.get_cmap", "gray.numpy", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy", "torch.from_numpy"], "function", ["None"], ["", "", "def", "get_heatmap", "(", "opt", ",", "gray", ",", "cmap", ")", ":", "# [N,H,W]", "\n", "    ", "color", "=", "plt", ".", "get_cmap", "(", "cmap", ")", "(", "gray", ".", "numpy", "(", ")", ")", "\n", "color", "=", "torch", ".", "from_numpy", "(", "color", "[", "...", ",", ":", "3", "]", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "float", "(", ")", "# [N,3,H,W]", "\n", "return", "color", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util_vis.color_border": [[48, 56], ["enumerate", "torch.stack", "torch.stack", "torch.stack.append", "torch.ones", "torch.ones"], "function", ["None"], ["", "def", "color_border", "(", "images", ",", "colors", ",", "width", "=", "3", ")", ":", "\n", "    ", "images_pad", "=", "[", "]", "\n", "for", "i", ",", "image", "in", "enumerate", "(", "images", ")", ":", "\n", "        ", "image_pad", "=", "torch", ".", "ones", "(", "3", ",", "image", ".", "shape", "[", "1", "]", "+", "width", "*", "2", ",", "image", ".", "shape", "[", "2", "]", "+", "width", "*", "2", ")", "*", "(", "colors", "[", "i", ",", ":", ",", "None", ",", "None", "]", "/", "255.0", ")", "\n", "image_pad", "[", ":", ",", "width", ":", "-", "width", ",", "width", ":", "-", "width", "]", "=", "image", "\n", "images_pad", ".", "append", "(", "image_pad", ")", "\n", "", "images_pad", "=", "torch", ".", "stack", "(", "images_pad", ",", "dim", "=", "0", ")", "\n", "return", "images_pad", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util_vis.vis_cameras": [[57, 139], ["torch.no_grad", "torch.no_grad", "zip", "vis._send", "pose.detach().cpu.detach().cpu", "util_vis.get_camera_mesh", "centers.append", "data.append", "util_vis.merge_meshes", "data.append", "util_vis.merge_wireframes", "data.append", "util_vis.merge_centers", "data.append", "dict", "dict", "dict", "dict", "dict", "len", "util_vis.merge_centers", "data.append", "pose.detach().cpu.detach", "dict", "dict", "dict", "dict", "dict", "dict", "float", "float", "float", "float", "float", "float", "int", "int", "int", "dict", "dict", "dict"], "function", ["home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util_vis.get_camera_mesh", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util_vis.merge_meshes", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util_vis.merge_wireframes", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util_vis.merge_centers", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util_vis.merge_centers"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "vis_cameras", "(", "opt", ",", "vis", ",", "step", ",", "poses", "=", "[", "]", ",", "colors", "=", "[", "\"blue\"", ",", "\"magenta\"", "]", ",", "plot_dist", "=", "True", ")", ":", "\n", "    ", "win_name", "=", "\"{}/{}\"", ".", "format", "(", "opt", ".", "group", ",", "opt", ".", "name", ")", "\n", "data", "=", "[", "]", "\n", "# set up plots", "\n", "centers", "=", "[", "]", "\n", "for", "pose", ",", "color", "in", "zip", "(", "poses", ",", "colors", ")", ":", "\n", "        ", "pose", "=", "pose", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "vertices", ",", "faces", ",", "wireframe", "=", "get_camera_mesh", "(", "pose", ",", "depth", "=", "opt", ".", "visdom", ".", "cam_depth", ")", "\n", "center", "=", "vertices", "[", ":", ",", "-", "1", "]", "\n", "centers", ".", "append", "(", "center", ")", "\n", "# camera centers", "\n", "data", ".", "append", "(", "dict", "(", "\n", "type", "=", "\"scatter3d\"", ",", "\n", "x", "=", "[", "float", "(", "n", ")", "for", "n", "in", "center", "[", ":", ",", "0", "]", "]", ",", "\n", "y", "=", "[", "float", "(", "n", ")", "for", "n", "in", "center", "[", ":", ",", "1", "]", "]", ",", "\n", "z", "=", "[", "float", "(", "n", ")", "for", "n", "in", "center", "[", ":", ",", "2", "]", "]", ",", "\n", "mode", "=", "\"markers\"", ",", "\n", "marker", "=", "dict", "(", "color", "=", "color", ",", "size", "=", "3", ")", ",", "\n", ")", ")", "\n", "# colored camera mesh", "\n", "vertices_merged", ",", "faces_merged", "=", "merge_meshes", "(", "vertices", ",", "faces", ")", "\n", "data", ".", "append", "(", "dict", "(", "\n", "type", "=", "\"mesh3d\"", ",", "\n", "x", "=", "[", "float", "(", "n", ")", "for", "n", "in", "vertices_merged", "[", ":", ",", "0", "]", "]", ",", "\n", "y", "=", "[", "float", "(", "n", ")", "for", "n", "in", "vertices_merged", "[", ":", ",", "1", "]", "]", ",", "\n", "z", "=", "[", "float", "(", "n", ")", "for", "n", "in", "vertices_merged", "[", ":", ",", "2", "]", "]", ",", "\n", "i", "=", "[", "int", "(", "n", ")", "for", "n", "in", "faces_merged", "[", ":", ",", "0", "]", "]", ",", "\n", "j", "=", "[", "int", "(", "n", ")", "for", "n", "in", "faces_merged", "[", ":", ",", "1", "]", "]", ",", "\n", "k", "=", "[", "int", "(", "n", ")", "for", "n", "in", "faces_merged", "[", ":", ",", "2", "]", "]", ",", "\n", "flatshading", "=", "True", ",", "\n", "color", "=", "color", ",", "\n", "opacity", "=", "0.05", ",", "\n", ")", ")", "\n", "# camera wireframe", "\n", "wireframe_merged", "=", "merge_wireframes", "(", "wireframe", ")", "\n", "data", ".", "append", "(", "dict", "(", "\n", "type", "=", "\"scatter3d\"", ",", "\n", "x", "=", "wireframe_merged", "[", "0", "]", ",", "\n", "y", "=", "wireframe_merged", "[", "1", "]", ",", "\n", "z", "=", "wireframe_merged", "[", "2", "]", ",", "\n", "mode", "=", "\"lines\"", ",", "\n", "line", "=", "dict", "(", "color", "=", "color", ",", ")", ",", "\n", "opacity", "=", "0.3", ",", "\n", ")", ")", "\n", "", "if", "plot_dist", ":", "\n", "# distance between two poses (camera centers)", "\n", "        ", "center_merged", "=", "merge_centers", "(", "centers", "[", ":", "2", "]", ")", "\n", "data", ".", "append", "(", "dict", "(", "\n", "type", "=", "\"scatter3d\"", ",", "\n", "x", "=", "center_merged", "[", "0", "]", ",", "\n", "y", "=", "center_merged", "[", "1", "]", ",", "\n", "z", "=", "center_merged", "[", "2", "]", ",", "\n", "mode", "=", "\"lines\"", ",", "\n", "line", "=", "dict", "(", "color", "=", "\"red\"", ",", "width", "=", "4", ",", ")", ",", "\n", ")", ")", "\n", "if", "len", "(", "centers", ")", "==", "4", ":", "\n", "            ", "center_merged", "=", "merge_centers", "(", "centers", "[", "2", ":", "4", "]", ")", "\n", "data", ".", "append", "(", "dict", "(", "\n", "type", "=", "\"scatter3d\"", ",", "\n", "x", "=", "center_merged", "[", "0", "]", ",", "\n", "y", "=", "center_merged", "[", "1", "]", ",", "\n", "z", "=", "center_merged", "[", "2", "]", ",", "\n", "mode", "=", "\"lines\"", ",", "\n", "line", "=", "dict", "(", "color", "=", "\"red\"", ",", "width", "=", "4", ",", ")", ",", "\n", ")", ")", "\n", "# send data to visdom", "\n", "", "", "vis", ".", "_send", "(", "dict", "(", "\n", "data", "=", "data", ",", "\n", "win", "=", "\"poses\"", ",", "\n", "eid", "=", "win_name", ",", "\n", "layout", "=", "dict", "(", "\n", "title", "=", "\"({})\"", ".", "format", "(", "step", ")", ",", "\n", "autosize", "=", "True", ",", "\n", "margin", "=", "dict", "(", "l", "=", "30", ",", "r", "=", "30", ",", "b", "=", "30", ",", "t", "=", "30", ",", ")", ",", "\n", "showlegend", "=", "False", ",", "\n", "yaxis", "=", "dict", "(", "\n", "scaleanchor", "=", "\"x\"", ",", "\n", "scaleratio", "=", "1", ",", "\n", ")", "\n", ")", ",", "\n", "opts", "=", "dict", "(", "title", "=", "\"{} poses ({})\"", ".", "format", "(", "win_name", ",", "step", ")", ",", ")", ",", "\n", ")", ")", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util_vis.get_camera_mesh": [[141, 156], ["torch.tensor", "torch.tensor", "camera.cam2world", "torch.tensor", "torch.tensor"], "function", ["home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.camera.cam2world"], ["", "def", "get_camera_mesh", "(", "pose", ",", "depth", "=", "1", ")", ":", "\n", "    ", "vertices", "=", "torch", ".", "tensor", "(", "[", "[", "-", "0.5", ",", "-", "0.5", ",", "1", "]", ",", "\n", "[", "0.5", ",", "-", "0.5", ",", "1", "]", ",", "\n", "[", "0.5", ",", "0.5", ",", "1", "]", ",", "\n", "[", "-", "0.5", ",", "0.5", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", "]", "]", ")", "*", "depth", "\n", "faces", "=", "torch", ".", "tensor", "(", "[", "[", "0", ",", "1", ",", "2", "]", ",", "\n", "[", "0", ",", "2", ",", "3", "]", ",", "\n", "[", "0", ",", "1", ",", "4", "]", ",", "\n", "[", "1", ",", "2", ",", "4", "]", ",", "\n", "[", "2", ",", "3", ",", "4", "]", ",", "\n", "[", "3", ",", "0", ",", "4", "]", "]", ")", "\n", "vertices", "=", "camera", ".", "cam2world", "(", "vertices", "[", "None", "]", ",", "pose", ")", "\n", "wireframe", "=", "vertices", "[", ":", ",", "[", "0", ",", "1", ",", "2", ",", "3", ",", "0", ",", "4", ",", "1", ",", "2", ",", "4", ",", "3", "]", "]", "\n", "return", "vertices", ",", "faces", ",", "wireframe", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util_vis.merge_wireframes": [[157, 164], ["float", "float", "float"], "function", ["None"], ["", "def", "merge_wireframes", "(", "wireframe", ")", ":", "\n", "    ", "wireframe_merged", "=", "[", "[", "]", ",", "[", "]", ",", "[", "]", "]", "\n", "for", "w", "in", "wireframe", ":", "\n", "        ", "wireframe_merged", "[", "0", "]", "+=", "[", "float", "(", "n", ")", "for", "n", "in", "w", "[", ":", ",", "0", "]", "]", "+", "[", "None", "]", "\n", "wireframe_merged", "[", "1", "]", "+=", "[", "float", "(", "n", ")", "for", "n", "in", "w", "[", ":", ",", "1", "]", "]", "+", "[", "None", "]", "\n", "wireframe_merged", "[", "2", "]", "+=", "[", "float", "(", "n", ")", "for", "n", "in", "w", "[", ":", ",", "2", "]", "]", "+", "[", "None", "]", "\n", "", "return", "wireframe_merged", "\n", "", "def", "merge_meshes", "(", "vertices", ",", "faces", ")", ":", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util_vis.merge_meshes": [[164, 169], ["torch.cat", "torch.cat", "vertices.view", "range"], "function", ["None"], ["", "def", "merge_meshes", "(", "vertices", ",", "faces", ")", ":", "\n", "    ", "mesh_N", ",", "vertex_N", "=", "vertices", ".", "shape", "[", ":", "2", "]", "\n", "faces_merged", "=", "torch", ".", "cat", "(", "[", "faces", "+", "i", "*", "vertex_N", "for", "i", "in", "range", "(", "mesh_N", ")", "]", ",", "dim", "=", "0", ")", "\n", "vertices_merged", "=", "vertices", ".", "view", "(", "-", "1", ",", "vertices", ".", "shape", "[", "-", "1", "]", ")", "\n", "return", "vertices_merged", ",", "faces_merged", "\n", "", "def", "merge_centers", "(", "centers", ")", ":", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util_vis.merge_centers": [[169, 176], ["zip", "float", "float", "float", "float", "float", "float"], "function", ["None"], ["", "def", "merge_centers", "(", "centers", ")", ":", "\n", "    ", "center_merged", "=", "[", "[", "]", ",", "[", "]", ",", "[", "]", "]", "\n", "for", "c1", ",", "c2", "in", "zip", "(", "*", "centers", ")", ":", "\n", "        ", "center_merged", "[", "0", "]", "+=", "[", "float", "(", "c1", "[", "0", "]", ")", ",", "float", "(", "c2", "[", "0", "]", ")", ",", "None", "]", "\n", "center_merged", "[", "1", "]", "+=", "[", "float", "(", "c1", "[", "1", "]", ")", ",", "float", "(", "c2", "[", "1", "]", ")", ",", "None", "]", "\n", "center_merged", "[", "2", "]", "+=", "[", "float", "(", "c1", "[", "2", "]", ")", ",", "float", "(", "c2", "[", "2", "]", ")", ",", "None", "]", "\n", "", "return", "center_merged", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util_vis.plot_save_poses": [[177, 212], ["util_vis.get_camera_mesh", "cam.numpy.numpy", "matplotlib.title", "fig.add_subplot", "fig.add_subplot", "util_vis.setup_3D_plot", "util_vis.setup_3D_plot", "fig.add_subplot.set_title", "fig.add_subplot.set_title", "matplotlib.subplots_adjust", "matplotlib.margins", "len", "matplotlib.get_cmap", "range", "matplotlib.savefig", "matplotlib.clf", "util_vis.get_camera_mesh", "cam_ref.numpy.numpy", "fig.add_subplot.plot", "fig.add_subplot.plot", "fig.add_subplot.scatter", "fig.add_subplot.scatter", "easydict.EasyDict", "easydict.EasyDict", "fig.add_subplot.plot", "fig.add_subplot.plot", "fig.add_subplot.scatter", "fig.add_subplot.scatter", "numpy.array", "plt.get_cmap.", "float"], "function", ["home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util_vis.get_camera_mesh", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util.Log.title", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util_vis.setup_3D_plot", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util_vis.setup_3D_plot", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util_vis.get_camera_mesh"], ["", "def", "plot_save_poses", "(", "opt", ",", "fig", ",", "pose", ",", "pose_ref", "=", "None", ",", "path", "=", "None", ",", "ep", "=", "None", ")", ":", "\n", "# get the camera meshes", "\n", "    ", "_", ",", "_", ",", "cam", "=", "get_camera_mesh", "(", "pose", ",", "depth", "=", "opt", ".", "visdom", ".", "cam_depth", ")", "\n", "cam", "=", "cam", ".", "numpy", "(", ")", "\n", "if", "pose_ref", "is", "not", "None", ":", "\n", "        ", "_", ",", "_", ",", "cam_ref", "=", "get_camera_mesh", "(", "pose_ref", ",", "depth", "=", "opt", ".", "visdom", ".", "cam_depth", ")", "\n", "cam_ref", "=", "cam_ref", ".", "numpy", "(", ")", "\n", "# set up plot window(s)", "\n", "", "plt", ".", "title", "(", "\"epoch {}\"", ".", "format", "(", "ep", ")", ")", "\n", "ax1", "=", "fig", ".", "add_subplot", "(", "121", ",", "projection", "=", "\"3d\"", ")", "\n", "ax2", "=", "fig", ".", "add_subplot", "(", "122", ",", "projection", "=", "\"3d\"", ")", "\n", "setup_3D_plot", "(", "ax1", ",", "elev", "=", "-", "90", ",", "azim", "=", "-", "90", ",", "lim", "=", "edict", "(", "x", "=", "(", "-", "1", ",", "1", ")", ",", "y", "=", "(", "-", "1", ",", "1", ")", ",", "z", "=", "(", "-", "1", ",", "1", ")", ")", ")", "\n", "setup_3D_plot", "(", "ax2", ",", "elev", "=", "0", ",", "azim", "=", "-", "90", ",", "lim", "=", "edict", "(", "x", "=", "(", "-", "1", ",", "1", ")", ",", "y", "=", "(", "-", "1", ",", "1", ")", ",", "z", "=", "(", "-", "1", ",", "1", ")", ")", ")", "\n", "ax1", ".", "set_title", "(", "\"forward-facing view\"", ",", "pad", "=", "0", ")", "\n", "ax2", ".", "set_title", "(", "\"top-down view\"", ",", "pad", "=", "0", ")", "\n", "plt", ".", "subplots_adjust", "(", "left", "=", "0", ",", "right", "=", "1", ",", "bottom", "=", "0", ",", "top", "=", "0.95", ",", "wspace", "=", "0", ",", "hspace", "=", "0", ")", "\n", "plt", ".", "margins", "(", "tight", "=", "True", ",", "x", "=", "0", ",", "y", "=", "0", ")", "\n", "# plot the cameras", "\n", "N", "=", "len", "(", "cam", ")", "\n", "color", "=", "plt", ".", "get_cmap", "(", "\"gist_rainbow\"", ")", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "        ", "if", "pose_ref", "is", "not", "None", ":", "\n", "            ", "ax1", ".", "plot", "(", "cam_ref", "[", "i", ",", ":", ",", "0", "]", ",", "cam_ref", "[", "i", ",", ":", ",", "1", "]", ",", "cam_ref", "[", "i", ",", ":", ",", "2", "]", ",", "color", "=", "(", "0.3", ",", "0.3", ",", "0.3", ")", ",", "linewidth", "=", "1", ")", "\n", "ax2", ".", "plot", "(", "cam_ref", "[", "i", ",", ":", ",", "0", "]", ",", "cam_ref", "[", "i", ",", ":", ",", "1", "]", ",", "cam_ref", "[", "i", ",", ":", ",", "2", "]", ",", "color", "=", "(", "0.3", ",", "0.3", ",", "0.3", ")", ",", "linewidth", "=", "1", ")", "\n", "ax1", ".", "scatter", "(", "cam_ref", "[", "i", ",", "5", ",", "0", "]", ",", "cam_ref", "[", "i", ",", "5", ",", "1", "]", ",", "cam_ref", "[", "i", ",", "5", ",", "2", "]", ",", "color", "=", "(", "0.3", ",", "0.3", ",", "0.3", ")", ",", "s", "=", "40", ")", "\n", "ax2", ".", "scatter", "(", "cam_ref", "[", "i", ",", "5", ",", "0", "]", ",", "cam_ref", "[", "i", ",", "5", ",", "1", "]", ",", "cam_ref", "[", "i", ",", "5", ",", "2", "]", ",", "color", "=", "(", "0.3", ",", "0.3", ",", "0.3", ")", ",", "s", "=", "40", ")", "\n", "", "c", "=", "np", ".", "array", "(", "color", "(", "float", "(", "i", ")", "/", "N", ")", ")", "*", "0.8", "\n", "ax1", ".", "plot", "(", "cam", "[", "i", ",", ":", ",", "0", "]", ",", "cam", "[", "i", ",", ":", ",", "1", "]", ",", "cam", "[", "i", ",", ":", ",", "2", "]", ",", "color", "=", "c", ")", "\n", "ax2", ".", "plot", "(", "cam", "[", "i", ",", ":", ",", "0", "]", ",", "cam", "[", "i", ",", ":", ",", "1", "]", ",", "cam", "[", "i", ",", ":", ",", "2", "]", ",", "color", "=", "c", ")", "\n", "ax1", ".", "scatter", "(", "cam", "[", "i", ",", "5", ",", "0", "]", ",", "cam", "[", "i", ",", "5", ",", "1", "]", ",", "cam", "[", "i", ",", "5", ",", "2", "]", ",", "color", "=", "c", ",", "s", "=", "40", ")", "\n", "ax2", ".", "scatter", "(", "cam", "[", "i", ",", "5", ",", "0", "]", ",", "cam", "[", "i", ",", "5", ",", "1", "]", ",", "cam", "[", "i", ",", "5", ",", "2", "]", ",", "color", "=", "c", ",", "s", "=", "40", ")", "\n", "", "png_fname", "=", "\"{}/{}.png\"", ".", "format", "(", "path", ",", "ep", ")", "\n", "plt", ".", "savefig", "(", "png_fname", ",", "dpi", "=", "75", ")", "\n", "# clean up", "\n", "plt", ".", "clf", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util_vis.plot_save_poses_blender": [[213, 249], ["util_vis.get_camera_mesh", "cam.numpy.numpy", "fig.add_subplot", "fig.add_subplot.set_title", "util_vis.setup_3D_plot", "matplotlib.subplots_adjust", "matplotlib.margins", "len", "fig.add_subplot.add_collection3d", "range", "fig.add_subplot.add_collection3d", "range", "range", "matplotlib.savefig", "matplotlib.clf", "util_vis.get_camera_mesh", "cam_ref.numpy.numpy", "mpl_toolkits.mplot3d.art3d.Poly3DCollection", "fig.add_subplot.plot", "fig.add_subplot.scatter", "matplotlib.savefig", "mpl_toolkits.mplot3d.art3d.Poly3DCollection", "fig.add_subplot.plot", "fig.add_subplot.scatter", "fig.add_subplot.plot", "easydict.EasyDict"], "function", ["home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util_vis.get_camera_mesh", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util_vis.setup_3D_plot", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util_vis.get_camera_mesh"], ["", "def", "plot_save_poses_blender", "(", "opt", ",", "fig", ",", "pose", ",", "pose_ref", "=", "None", ",", "path", "=", "None", ",", "ep", "=", "None", ")", ":", "\n", "# get the camera meshes", "\n", "    ", "_", ",", "_", ",", "cam", "=", "get_camera_mesh", "(", "pose", ",", "depth", "=", "opt", ".", "visdom", ".", "cam_depth", ")", "\n", "cam", "=", "cam", ".", "numpy", "(", ")", "\n", "if", "pose_ref", "is", "not", "None", ":", "\n", "        ", "_", ",", "_", ",", "cam_ref", "=", "get_camera_mesh", "(", "pose_ref", ",", "depth", "=", "opt", ".", "visdom", ".", "cam_depth", ")", "\n", "cam_ref", "=", "cam_ref", ".", "numpy", "(", ")", "\n", "# set up plot window(s)", "\n", "", "ax", "=", "fig", ".", "add_subplot", "(", "111", ",", "projection", "=", "\"3d\"", ")", "\n", "ax", ".", "set_title", "(", "\"epoch {}\"", ".", "format", "(", "ep", ")", ",", "pad", "=", "0", ")", "\n", "setup_3D_plot", "(", "ax", ",", "elev", "=", "45", ",", "azim", "=", "35", ",", "lim", "=", "edict", "(", "x", "=", "(", "-", "3", ",", "3", ")", ",", "y", "=", "(", "-", "3", ",", "3", ")", ",", "z", "=", "(", "-", "3", ",", "2.4", ")", ")", ")", "\n", "plt", ".", "subplots_adjust", "(", "left", "=", "0", ",", "right", "=", "1", ",", "bottom", "=", "0", ",", "top", "=", "0.95", ",", "wspace", "=", "0", ",", "hspace", "=", "0", ")", "\n", "plt", ".", "margins", "(", "tight", "=", "True", ",", "x", "=", "0", ",", "y", "=", "0", ")", "\n", "# plot the cameras", "\n", "N", "=", "len", "(", "cam", ")", "\n", "ref_color", "=", "(", "0.7", ",", "0.2", ",", "0.7", ")", "\n", "pred_color", "=", "(", "0", ",", "0.6", ",", "0.7", ")", "\n", "ax", ".", "add_collection3d", "(", "Poly3DCollection", "(", "[", "v", "[", ":", "4", "]", "for", "v", "in", "cam_ref", "]", ",", "alpha", "=", "0.2", ",", "facecolor", "=", "ref_color", ")", ")", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "        ", "ax", ".", "plot", "(", "cam_ref", "[", "i", ",", ":", ",", "0", "]", ",", "cam_ref", "[", "i", ",", ":", ",", "1", "]", ",", "cam_ref", "[", "i", ",", ":", ",", "2", "]", ",", "color", "=", "ref_color", ",", "linewidth", "=", "0.5", ")", "\n", "ax", ".", "scatter", "(", "cam_ref", "[", "i", ",", "5", ",", "0", "]", ",", "cam_ref", "[", "i", ",", "5", ",", "1", "]", ",", "cam_ref", "[", "i", ",", "5", ",", "2", "]", ",", "color", "=", "ref_color", ",", "s", "=", "20", ")", "\n", "", "if", "ep", "==", "0", ":", "\n", "        ", "png_fname", "=", "\"{}/GT.png\"", ".", "format", "(", "path", ")", "\n", "plt", ".", "savefig", "(", "png_fname", ",", "dpi", "=", "75", ")", "\n", "", "ax", ".", "add_collection3d", "(", "Poly3DCollection", "(", "[", "v", "[", ":", "4", "]", "for", "v", "in", "cam", "]", ",", "alpha", "=", "0.2", ",", "facecolor", "=", "pred_color", ")", ")", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "        ", "ax", ".", "plot", "(", "cam", "[", "i", ",", ":", ",", "0", "]", ",", "cam", "[", "i", ",", ":", ",", "1", "]", ",", "cam", "[", "i", ",", ":", ",", "2", "]", ",", "color", "=", "pred_color", ",", "linewidth", "=", "1", ")", "\n", "ax", ".", "scatter", "(", "cam", "[", "i", ",", "5", ",", "0", "]", ",", "cam", "[", "i", ",", "5", ",", "1", "]", ",", "cam", "[", "i", ",", "5", ",", "2", "]", ",", "color", "=", "pred_color", ",", "s", "=", "20", ")", "\n", "", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "        ", "ax", ".", "plot", "(", "[", "cam", "[", "i", ",", "5", ",", "0", "]", ",", "cam_ref", "[", "i", ",", "5", ",", "0", "]", "]", ",", "\n", "[", "cam", "[", "i", ",", "5", ",", "1", "]", ",", "cam_ref", "[", "i", ",", "5", ",", "1", "]", "]", ",", "\n", "[", "cam", "[", "i", ",", "5", ",", "2", "]", ",", "cam_ref", "[", "i", ",", "5", ",", "2", "]", "]", ",", "color", "=", "(", "1", ",", "0", ",", "0", ")", ",", "linewidth", "=", "3", ")", "\n", "", "png_fname", "=", "\"{}/{}.png\"", ".", "format", "(", "path", ",", "ep", ")", "\n", "plt", ".", "savefig", "(", "png_fname", ",", "dpi", "=", "75", ")", "\n", "# clean up", "\n", "plt", ".", "clf", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util_vis.setup_3D_plot": [[250, 267], ["ax.xaxis.set_pane_color", "ax.yaxis.set_pane_color", "ax.zaxis.set_pane_color", "ax.xaxis.set_tick_params", "ax.yaxis.set_tick_params", "ax.zaxis.set_tick_params", "ax.set_xlabel", "ax.set_ylabel", "ax.set_zlabel", "ax.set_xlim", "ax.set_ylim", "ax.set_zlim", "ax.view_init"], "function", ["None"], ["", "def", "setup_3D_plot", "(", "ax", ",", "elev", ",", "azim", ",", "lim", "=", "None", ")", ":", "\n", "    ", "ax", ".", "xaxis", ".", "set_pane_color", "(", "(", "1.0", ",", "1.0", ",", "1.0", ",", "0.0", ")", ")", "\n", "ax", ".", "yaxis", ".", "set_pane_color", "(", "(", "1.0", ",", "1.0", ",", "1.0", ",", "0.0", ")", ")", "\n", "ax", ".", "zaxis", ".", "set_pane_color", "(", "(", "1.0", ",", "1.0", ",", "1.0", ",", "0.0", ")", ")", "\n", "ax", ".", "xaxis", ".", "_axinfo", "[", "\"grid\"", "]", "[", "\"color\"", "]", "=", "(", "0.9", ",", "0.9", ",", "0.9", ",", "1", ")", "\n", "ax", ".", "yaxis", ".", "_axinfo", "[", "\"grid\"", "]", "[", "\"color\"", "]", "=", "(", "0.9", ",", "0.9", ",", "0.9", ",", "1", ")", "\n", "ax", ".", "zaxis", ".", "_axinfo", "[", "\"grid\"", "]", "[", "\"color\"", "]", "=", "(", "0.9", ",", "0.9", ",", "0.9", ",", "1", ")", "\n", "ax", ".", "xaxis", ".", "set_tick_params", "(", "labelsize", "=", "8", ")", "\n", "ax", ".", "yaxis", ".", "set_tick_params", "(", "labelsize", "=", "8", ")", "\n", "ax", ".", "zaxis", ".", "set_tick_params", "(", "labelsize", "=", "8", ")", "\n", "ax", ".", "set_xlabel", "(", "\"X\"", ",", "fontsize", "=", "16", ")", "\n", "ax", ".", "set_ylabel", "(", "\"Y\"", ",", "fontsize", "=", "16", ")", "\n", "ax", ".", "set_zlabel", "(", "\"Z\"", ",", "fontsize", "=", "16", ")", "\n", "ax", ".", "set_xlim", "(", "lim", ".", "x", "[", "0", "]", ",", "lim", ".", "x", "[", "1", "]", ")", "\n", "ax", ".", "set_ylim", "(", "lim", ".", "y", "[", "0", "]", ",", "lim", ".", "y", "[", "1", "]", ")", "\n", "ax", ".", "set_zlim", "(", "lim", ".", "z", "[", "0", "]", ",", "lim", ".", "z", "[", "1", "]", ")", "\n", "ax", ".", "view_init", "(", "elev", "=", "elev", ",", "azim", "=", "azim", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.evaluate.main": [[9, 32], ["util.log.process", "util.log.title", "options.parse_arguments", "options.set", "os.getpid", "torch.cuda.device", "importlib.import_module", "importlib.import_module.Model", "model.Model.load_dataset", "model.Model.build_networks", "model.Model.restore_checkpoint", "model.Model.generate_videos_synthesis", "model.Model.generate_videos_pose", "model.Model.evaluate_full"], "function", ["home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util.Log.process", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util.Log.title", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.options.parse_arguments", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.options.set", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.nerf.Model.load_dataset", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.barf.Model.build_networks", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.base.Model.restore_checkpoint", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.nerf.Model.generate_videos_synthesis", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.barf.Model.generate_videos_pose", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.nerf.Model.evaluate_full"], ["def", "main", "(", ")", ":", "\n", "\n", "    ", "log", ".", "process", "(", "os", ".", "getpid", "(", ")", ")", "\n", "log", ".", "title", "(", "\"[{}] (PyTorch code for evaluating NeRF/BARF)\"", ".", "format", "(", "sys", ".", "argv", "[", "0", "]", ")", ")", "\n", "\n", "opt_cmd", "=", "options", ".", "parse_arguments", "(", "sys", ".", "argv", "[", "1", ":", "]", ")", "\n", "opt", "=", "options", ".", "set", "(", "opt_cmd", "=", "opt_cmd", ")", "\n", "\n", "with", "torch", ".", "cuda", ".", "device", "(", "opt", ".", "device", ")", ":", "\n", "\n", "        ", "model", "=", "importlib", ".", "import_module", "(", "\"model.{}\"", ".", "format", "(", "opt", ".", "model", ")", ")", "\n", "m", "=", "model", ".", "Model", "(", "opt", ")", "\n", "\n", "m", ".", "load_dataset", "(", "opt", ",", "eval_split", "=", "\"test\"", ")", "\n", "m", ".", "build_networks", "(", "opt", ")", "\n", "\n", "if", "opt", ".", "model", "==", "\"barf\"", ":", "\n", "            ", "m", ".", "generate_videos_pose", "(", "opt", ")", "\n", "\n", "", "m", ".", "restore_checkpoint", "(", "opt", ")", "\n", "if", "opt", ".", "data", ".", "dataset", "in", "[", "\"blender\"", ",", "\"llff\"", "]", ":", "\n", "            ", "m", ".", "evaluate_full", "(", "opt", ")", "\n", "", "m", ".", "generate_videos_synthesis", "(", "opt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.train.main": [[9, 30], ["util.log.process", "util.log.title", "options.parse_arguments", "options.set", "options.save_options_file", "os.getpid", "torch.cuda.device", "importlib.import_module", "importlib.import_module.Model", "model.Model.load_dataset", "model.Model.build_networks", "model.Model.setup_optimizer", "model.Model.restore_checkpoint", "model.Model.setup_visualizer", "model.Model.train"], "function", ["home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util.Log.process", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util.Log.title", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.options.parse_arguments", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.options.set", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.options.save_options_file", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.nerf.Model.load_dataset", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.barf.Model.build_networks", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.nerf.Model.setup_optimizer", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.base.Model.restore_checkpoint", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.base.Model.setup_visualizer", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.nerf.Model.train"], ["def", "main", "(", ")", ":", "\n", "\n", "    ", "log", ".", "process", "(", "os", ".", "getpid", "(", ")", ")", "\n", "log", ".", "title", "(", "\"[{}] (PyTorch code for training NeRF/BARF)\"", ".", "format", "(", "sys", ".", "argv", "[", "0", "]", ")", ")", "\n", "\n", "opt_cmd", "=", "options", ".", "parse_arguments", "(", "sys", ".", "argv", "[", "1", ":", "]", ")", "\n", "opt", "=", "options", ".", "set", "(", "opt_cmd", "=", "opt_cmd", ")", "\n", "options", ".", "save_options_file", "(", "opt", ")", "\n", "\n", "with", "torch", ".", "cuda", ".", "device", "(", "opt", ".", "device", ")", ":", "\n", "\n", "        ", "model", "=", "importlib", ".", "import_module", "(", "\"model.{}\"", ".", "format", "(", "opt", ".", "model", ")", ")", "\n", "m", "=", "model", ".", "Model", "(", "opt", ")", "\n", "\n", "m", ".", "load_dataset", "(", "opt", ")", "\n", "m", ".", "build_networks", "(", "opt", ")", "\n", "m", ".", "setup_optimizer", "(", "opt", ")", "\n", "m", ".", "restore_checkpoint", "(", "opt", ")", "\n", "m", ".", "setup_visualizer", "(", "opt", ")", "\n", "\n", "m", ".", "train", "(", "opt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.warp.Lie.so2_to_SO2": [[68, 73], ["torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "theta.cos", "theta.sin", "theta.cos", "theta.sin"], "methods", ["None"], ["    ", "def", "so2_to_SO2", "(", "self", ",", "theta", ")", ":", "# [...,1]", "\n", "        ", "thetax", "=", "torch", ".", "stack", "(", "[", "torch", ".", "cat", "(", "[", "theta", ".", "cos", "(", ")", ",", "-", "theta", ".", "sin", "(", ")", "]", ",", "dim", "=", "-", "1", ")", ",", "\n", "torch", ".", "cat", "(", "[", "theta", ".", "sin", "(", ")", ",", "theta", ".", "cos", "(", ")", "]", ",", "dim", "=", "-", "1", ")", "]", ",", "dim", "=", "-", "2", ")", "\n", "R", "=", "thetax", "\n", "return", "R", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.warp.Lie.SO2_to_so2": [[74, 77], ["torch.atan2", "torch.atan2", "torch.atan2", "torch.atan2"], "methods", ["None"], ["", "def", "SO2_to_so2", "(", "self", ",", "R", ")", ":", "# [...,2,2]", "\n", "        ", "theta", "=", "torch", ".", "atan2", "(", "R", "[", "...", ",", "1", ",", "0", "]", ",", "R", "[", "...", ",", "0", ",", "0", "]", ")", "\n", "return", "theta", "[", "...", ",", "None", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.warp.Lie.so2_jacobian": [[78, 83], ["torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack.transpose", "torch.stack.transpose", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "theta.cos", "theta.sin", "theta.cos", "theta.sin"], "methods", ["None"], ["", "def", "so2_jacobian", "(", "self", ",", "X", ",", "theta", ")", ":", "# [...,N,2],[...,1]", "\n", "        ", "dR_dtheta", "=", "torch", ".", "stack", "(", "[", "torch", ".", "cat", "(", "[", "-", "theta", ".", "sin", "(", ")", ",", "-", "theta", ".", "cos", "(", ")", "]", ",", "dim", "=", "-", "1", ")", ",", "\n", "torch", ".", "cat", "(", "[", "theta", ".", "cos", "(", ")", ",", "-", "theta", ".", "sin", "(", ")", "]", ",", "dim", "=", "-", "1", ")", "]", ",", "dim", "=", "-", "2", ")", "# [...,2,2]", "\n", "J", "=", "X", "@", "dR_dtheta", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", "\n", "return", "J", "[", "...", ",", "None", "]", "# [...,N,2,1]", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.warp.Lie.se2_to_SE2": [[84, 93], ["delta.split", "warp.Lie.taylor_A", "warp.Lie.taylor_B", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "warp.Lie.so2_to_SO2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.warp.Lie.taylor_A", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.warp.Lie.taylor_B", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.warp.Lie.so2_to_SO2"], ["", "def", "se2_to_SE2", "(", "self", ",", "delta", ")", ":", "# [...,3]", "\n", "        ", "u", ",", "theta", "=", "delta", ".", "split", "(", "[", "2", ",", "1", "]", ",", "dim", "=", "-", "1", ")", "\n", "A", "=", "self", ".", "taylor_A", "(", "theta", ")", "\n", "B", "=", "self", ".", "taylor_B", "(", "theta", ")", "\n", "V", "=", "torch", ".", "stack", "(", "[", "torch", ".", "cat", "(", "[", "A", ",", "-", "B", "]", ",", "dim", "=", "-", "1", ")", ",", "\n", "torch", ".", "cat", "(", "[", "B", ",", "A", "]", ",", "dim", "=", "-", "1", ")", "]", ",", "dim", "=", "-", "2", ")", "\n", "R", "=", "self", ".", "so2_to_SO2", "(", "theta", ")", "\n", "Rt", "=", "torch", ".", "cat", "(", "[", "R", ",", "V", "@", "u", "[", "...", ",", "None", "]", "]", ",", "dim", "=", "-", "1", ")", "\n", "return", "Rt", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.warp.Lie.SE2_to_se2": [[94, 105], ["Rt.split", "warp.Lie.SO2_to_so2", "warp.Lie.taylor_A", "warp.Lie.taylor_B", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.warp.Lie.SO2_to_so2", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.warp.Lie.taylor_A", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.warp.Lie.taylor_B"], ["", "def", "SE2_to_se2", "(", "self", ",", "Rt", ",", "eps", "=", "1e-7", ")", ":", "# [...,2,3]", "\n", "        ", "R", ",", "t", "=", "Rt", ".", "split", "(", "[", "2", ",", "1", "]", ",", "dim", "=", "-", "1", ")", "\n", "theta", "=", "self", ".", "SO2_to_so2", "(", "R", ")", "\n", "A", "=", "self", ".", "taylor_A", "(", "theta", ")", "\n", "B", "=", "self", ".", "taylor_B", "(", "theta", ")", "\n", "denom", "=", "(", "A", "**", "2", "+", "B", "**", "2", "+", "eps", ")", "[", "...", ",", "None", "]", "\n", "invV", "=", "torch", ".", "stack", "(", "[", "torch", ".", "cat", "(", "[", "A", ",", "B", "]", ",", "dim", "=", "-", "1", ")", ",", "\n", "torch", ".", "cat", "(", "[", "-", "B", ",", "A", "]", ",", "dim", "=", "-", "1", ")", "]", ",", "dim", "=", "-", "2", ")", "/", "denom", "\n", "u", "=", "(", "invV", "@", "t", ")", "[", "...", ",", "0", "]", "\n", "delta", "=", "torch", ".", "cat", "(", "[", "u", ",", "theta", "]", ",", "dim", "=", "-", "1", ")", "\n", "return", "delta", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.warp.Lie.se2_jacobian": [[106, 123], ["delta.split", "warp.Lie.taylor_A", "warp.Lie.taylor_B", "warp.Lie.taylor_C", "warp.Lie.taylor_D", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "warp.Lie.so2_to_SO2", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "warp.Lie.so2_jacobian", "V[].repeat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len"], "methods", ["home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.warp.Lie.taylor_A", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.warp.Lie.taylor_B", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.warp.Lie.taylor_C", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.warp.Lie.taylor_D", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.warp.Lie.so2_to_SO2", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.warp.Lie.so2_jacobian"], ["", "def", "se2_jacobian", "(", "self", ",", "X", ",", "delta", ")", ":", "# [...,N,2],[...,3]", "\n", "        ", "u", ",", "theta", "=", "delta", ".", "split", "(", "[", "2", ",", "1", "]", ",", "dim", "=", "-", "1", ")", "\n", "A", "=", "self", ".", "taylor_A", "(", "theta", ")", "\n", "B", "=", "self", ".", "taylor_B", "(", "theta", ")", "\n", "C", "=", "self", ".", "taylor_C", "(", "theta", ")", "\n", "D", "=", "self", ".", "taylor_D", "(", "theta", ")", "\n", "V", "=", "torch", ".", "stack", "(", "[", "torch", ".", "cat", "(", "[", "A", ",", "-", "B", "]", ",", "dim", "=", "-", "1", ")", ",", "\n", "torch", ".", "cat", "(", "[", "B", ",", "A", "]", ",", "dim", "=", "-", "1", ")", "]", ",", "dim", "=", "-", "2", ")", "\n", "R", "=", "self", ".", "so2_to_SO2", "(", "theta", ")", "\n", "dV_dtheta", "=", "torch", ".", "stack", "(", "[", "torch", ".", "cat", "(", "[", "C", ",", "-", "D", "]", ",", "dim", "=", "-", "1", ")", ",", "\n", "torch", ".", "cat", "(", "[", "D", ",", "C", "]", ",", "dim", "=", "-", "1", ")", "]", ",", "dim", "=", "-", "2", ")", "# [...,2,2]", "\n", "dt_dtheta", "=", "dV_dtheta", "@", "u", "[", "...", ",", "None", "]", "# [...,2,1]", "\n", "J_so2", "=", "self", ".", "so2_jacobian", "(", "X", ",", "theta", ")", "# [...,N,2,1]", "\n", "dX_dtheta", "=", "J_so2", "+", "dt_dtheta", "[", "...", ",", "None", ",", ":", ",", ":", "]", "# [...,N,2,1]", "\n", "dX_du", "=", "V", "[", "...", ",", "None", ",", ":", ",", ":", "]", ".", "repeat", "(", "*", "[", "1", "]", "*", "(", "len", "(", "dX_dtheta", ".", "shape", ")", "-", "3", ")", ",", "dX_dtheta", ".", "shape", "[", "-", "3", "]", ",", "1", ",", "1", ")", "\n", "J", "=", "torch", ".", "cat", "(", "[", "dX_du", ",", "dX_dtheta", "]", ",", "dim", "=", "-", "1", ")", "\n", "return", "J", "# [...,N,2,3]", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.warp.Lie.sl3_to_SL3": [[124, 133], ["h.chunk", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack.matrix_exp", "torch.stack.matrix_exp", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "sl3_to_SL3", "(", "self", ",", "h", ")", ":", "\n", "# homography: directly expand matrix exponential", "\n", "# https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.61.6151&rep=rep1&type=pdf", "\n", "        ", "h1", ",", "h2", ",", "h3", ",", "h4", ",", "h5", ",", "h6", ",", "h7", ",", "h8", "=", "h", ".", "chunk", "(", "8", ",", "dim", "=", "-", "1", ")", "\n", "A", "=", "torch", ".", "stack", "(", "[", "torch", ".", "cat", "(", "[", "h5", ",", "h3", ",", "h1", "]", ",", "dim", "=", "-", "1", ")", ",", "\n", "torch", ".", "cat", "(", "[", "h4", ",", "-", "h5", "-", "h6", ",", "h2", "]", ",", "dim", "=", "-", "1", ")", ",", "\n", "torch", ".", "cat", "(", "[", "h7", ",", "h8", ",", "h6", "]", ",", "dim", "=", "-", "1", ")", "]", ",", "dim", "=", "-", "2", ")", "\n", "H", "=", "A", ".", "matrix_exp", "(", ")", "\n", "return", "H", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.warp.Lie.taylor_A": [[134, 142], ["torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "range"], "methods", ["None"], ["", "def", "taylor_A", "(", "self", ",", "x", ",", "nth", "=", "10", ")", ":", "\n", "# Taylor expansion of sin(x)/x", "\n", "        ", "ans", "=", "torch", ".", "zeros_like", "(", "x", ")", "\n", "denom", "=", "1.", "\n", "for", "i", "in", "range", "(", "nth", "+", "1", ")", ":", "\n", "            ", "if", "i", ">", "0", ":", "denom", "*=", "(", "2", "*", "i", ")", "*", "(", "2", "*", "i", "+", "1", ")", "\n", "ans", "=", "ans", "+", "(", "-", "1", ")", "**", "i", "*", "x", "**", "(", "2", "*", "i", ")", "/", "denom", "\n", "", "return", "ans", "\n", "", "def", "taylor_B", "(", "self", ",", "x", ",", "nth", "=", "10", ")", ":", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.warp.Lie.taylor_B": [[142, 150], ["torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "range"], "methods", ["None"], ["", "def", "taylor_B", "(", "self", ",", "x", ",", "nth", "=", "10", ")", ":", "\n", "# Taylor expansion of (1-cos(x))/x", "\n", "        ", "ans", "=", "torch", ".", "zeros_like", "(", "x", ")", "\n", "denom", "=", "1.", "\n", "for", "i", "in", "range", "(", "nth", "+", "1", ")", ":", "\n", "            ", "denom", "*=", "(", "2", "*", "i", "+", "1", ")", "*", "(", "2", "*", "i", "+", "2", ")", "\n", "ans", "=", "ans", "+", "(", "-", "1", ")", "**", "i", "*", "x", "**", "(", "2", "*", "i", "+", "1", ")", "/", "denom", "\n", "", "return", "ans", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.warp.Lie.taylor_C": [[151, 159], ["torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "range"], "methods", ["None"], ["", "def", "taylor_C", "(", "self", ",", "x", ",", "nth", "=", "10", ")", ":", "\n", "# Taylor expansion of (x*cos(x)-sin(x))/x**2", "\n", "        ", "ans", "=", "torch", ".", "zeros_like", "(", "x", ")", "\n", "denom", "=", "1.", "\n", "for", "i", "in", "range", "(", "nth", "+", "1", ")", ":", "\n", "            ", "denom", "*=", "(", "2", "*", "i", "+", "2", ")", "*", "(", "2", "*", "i", "+", "3", ")", "\n", "ans", "=", "ans", "+", "(", "-", "1", ")", "**", "(", "i", "+", "1", ")", "*", "x", "**", "(", "2", "*", "i", "+", "1", ")", "*", "(", "2", "*", "i", "+", "2", ")", "/", "denom", "\n", "", "return", "ans", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.warp.Lie.taylor_D": [[160, 168], ["torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "range"], "methods", ["None"], ["", "def", "taylor_D", "(", "self", ",", "x", ",", "nth", "=", "10", ")", ":", "\n", "# Taylor expansion of (x*sin(x)+cos(x)-1)/x**2", "\n", "        ", "ans", "=", "torch", ".", "zeros_like", "(", "x", ")", "\n", "denom", "=", "1.", "\n", "for", "i", "in", "range", "(", "nth", "+", "1", ")", ":", "\n", "            ", "denom", "*=", "(", "2", "*", "i", "+", "1", ")", "*", "(", "2", "*", "i", "+", "2", ")", "\n", "ans", "=", "ans", "+", "(", "-", "1", ")", "**", "i", "*", "x", "**", "(", "2", "*", "i", ")", "*", "(", "2", "*", "i", "+", "1", ")", "/", "denom", "\n", "", "return", "ans", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.warp.get_normalized_pixel_grid": [[10, 17], ["torch.meshgrid", "torch.meshgrid", "torch.stack().view", "torch.stack().view", "xy_grid.repeat.repeat", "max", "max", "torch.stack", "torch.stack", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "function", ["None"], ["def", "get_normalized_pixel_grid", "(", "opt", ")", ":", "\n", "    ", "y_range", "=", "(", "(", "torch", ".", "arange", "(", "opt", ".", "H", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "opt", ".", "device", ")", "+", "0.5", ")", "/", "opt", ".", "H", "*", "2", "-", "1", ")", "*", "(", "opt", ".", "H", "/", "max", "(", "opt", ".", "H", ",", "opt", ".", "W", ")", ")", "\n", "x_range", "=", "(", "(", "torch", ".", "arange", "(", "opt", ".", "W", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "opt", ".", "device", ")", "+", "0.5", ")", "/", "opt", ".", "W", "*", "2", "-", "1", ")", "*", "(", "opt", ".", "W", "/", "max", "(", "opt", ".", "H", ",", "opt", ".", "W", ")", ")", "\n", "Y", ",", "X", "=", "torch", ".", "meshgrid", "(", "y_range", ",", "x_range", ")", "# [H,W]", "\n", "xy_grid", "=", "torch", ".", "stack", "(", "[", "X", ",", "Y", "]", ",", "dim", "=", "-", "1", ")", ".", "view", "(", "-", "1", ",", "2", ")", "# [HW,2]", "\n", "xy_grid", "=", "xy_grid", ".", "repeat", "(", "opt", ".", "batch_size", ",", "1", ",", "1", ")", "# [B,HW,2]", "\n", "return", "xy_grid", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.warp.get_normalized_pixel_grid_crop": [[18, 27], ["torch.meshgrid", "torch.meshgrid", "torch.stack().view", "torch.stack().view", "xy_grid.repeat.repeat", "max", "max", "torch.stack", "torch.stack", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "function", ["None"], ["", "def", "get_normalized_pixel_grid_crop", "(", "opt", ")", ":", "\n", "    ", "y_crop", "=", "(", "opt", ".", "H", "//", "2", "-", "opt", ".", "H_crop", "//", "2", ",", "opt", ".", "H", "//", "2", "+", "opt", ".", "H_crop", "//", "2", ")", "\n", "x_crop", "=", "(", "opt", ".", "W", "//", "2", "-", "opt", ".", "W_crop", "//", "2", ",", "opt", ".", "W", "//", "2", "+", "opt", ".", "W_crop", "//", "2", ")", "\n", "y_range", "=", "(", "(", "torch", ".", "arange", "(", "*", "(", "y_crop", ")", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "opt", ".", "device", ")", "+", "0.5", ")", "/", "opt", ".", "H", "*", "2", "-", "1", ")", "*", "(", "opt", ".", "H", "/", "max", "(", "opt", ".", "H", ",", "opt", ".", "W", ")", ")", "\n", "x_range", "=", "(", "(", "torch", ".", "arange", "(", "*", "(", "x_crop", ")", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "opt", ".", "device", ")", "+", "0.5", ")", "/", "opt", ".", "W", "*", "2", "-", "1", ")", "*", "(", "opt", ".", "W", "/", "max", "(", "opt", ".", "H", ",", "opt", ".", "W", ")", ")", "\n", "Y", ",", "X", "=", "torch", ".", "meshgrid", "(", "y_range", ",", "x_range", ")", "# [H,W]", "\n", "xy_grid", "=", "torch", ".", "stack", "(", "[", "X", ",", "Y", "]", ",", "dim", "=", "-", "1", ")", ".", "view", "(", "-", "1", ",", "2", ")", "# [HW,2]", "\n", "xy_grid", "=", "xy_grid", ".", "repeat", "(", "opt", ".", "batch_size", ",", "1", ",", "1", ")", "# [B,HW,2]", "\n", "return", "xy_grid", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.warp.warp_grid": [[28, 49], ["lie.so2_to_SO2", "lie.sl3_to_SL3.transpose", "camera.to_hom", "lie.se2_to_SE2", "lie.sl3_to_SL3.transpose", "camera.to_hom", "lie.sl3_to_SL3", "lie.sl3_to_SL3.transpose"], "function", ["home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.warp.Lie.so2_to_SO2", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.camera.to_hom", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.warp.Lie.se2_to_SE2", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.camera.to_hom", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.warp.Lie.sl3_to_SL3"], ["", "def", "warp_grid", "(", "opt", ",", "xy_grid", ",", "warp", ")", ":", "\n", "    ", "if", "opt", ".", "warp", ".", "type", "==", "\"translation\"", ":", "\n", "        ", "assert", "(", "opt", ".", "warp", ".", "dof", "==", "2", ")", "\n", "warped_grid", "=", "xy_grid", "+", "warp", "[", "...", ",", "None", ",", ":", "]", "\n", "", "elif", "opt", ".", "warp", ".", "type", "==", "\"rotation\"", ":", "\n", "        ", "assert", "(", "opt", ".", "warp", ".", "dof", "==", "1", ")", "\n", "warp_matrix", "=", "lie", ".", "so2_to_SO2", "(", "warp", ")", "\n", "warped_grid", "=", "xy_grid", "@", "warp_matrix", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", "# [B,HW,2]", "\n", "", "elif", "opt", ".", "warp", ".", "type", "==", "\"rigid\"", ":", "\n", "        ", "assert", "(", "opt", ".", "warp", ".", "dof", "==", "3", ")", "\n", "xy_grid_hom", "=", "camera", ".", "to_hom", "(", "xy_grid", ")", "\n", "warp_matrix", "=", "lie", ".", "se2_to_SE2", "(", "warp", ")", "\n", "warped_grid", "=", "xy_grid_hom", "@", "warp_matrix", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", "# [B,HW,2]", "\n", "", "elif", "opt", ".", "warp", ".", "type", "==", "\"homography\"", ":", "\n", "        ", "assert", "(", "opt", ".", "warp", ".", "dof", "==", "8", ")", "\n", "xy_grid_hom", "=", "camera", ".", "to_hom", "(", "xy_grid", ")", "\n", "warp_matrix", "=", "lie", ".", "sl3_to_SL3", "(", "warp", ")", "\n", "warped_grid_hom", "=", "xy_grid_hom", "@", "warp_matrix", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", "\n", "warped_grid", "=", "warped_grid_hom", "[", "...", ",", ":", "2", "]", "/", "(", "warped_grid_hom", "[", "...", ",", "2", ":", "]", "+", "1e-8", ")", "# [B,HW,2]", "\n", "", "else", ":", "assert", "(", "False", ")", "\n", "return", "warped_grid", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.warp.warp_corners": [[50, 59], ["torch.tensor().repeat", "torch.tensor().repeat", "warp.warp_grid", "torch.tensor", "torch.tensor", "max", "max"], "function", ["home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.warp.warp_grid"], ["", "def", "warp_corners", "(", "opt", ",", "warp_param", ")", ":", "\n", "    ", "y_crop", "=", "(", "opt", ".", "H", "//", "2", "-", "opt", ".", "H_crop", "//", "2", ",", "opt", ".", "H", "//", "2", "+", "opt", ".", "H_crop", "//", "2", ")", "\n", "x_crop", "=", "(", "opt", ".", "W", "//", "2", "-", "opt", ".", "W_crop", "//", "2", ",", "opt", ".", "W", "//", "2", "+", "opt", ".", "W_crop", "//", "2", ")", "\n", "Y", "=", "[", "(", "(", "y", "+", "0.5", ")", "/", "opt", ".", "H", "*", "2", "-", "1", ")", "*", "(", "opt", ".", "H", "/", "max", "(", "opt", ".", "H", ",", "opt", ".", "W", ")", ")", "for", "y", "in", "y_crop", "]", "\n", "X", "=", "[", "(", "(", "x", "+", "0.5", ")", "/", "opt", ".", "W", "*", "2", "-", "1", ")", "*", "(", "opt", ".", "W", "/", "max", "(", "opt", ".", "H", ",", "opt", ".", "W", ")", ")", "for", "x", "in", "x_crop", "]", "\n", "corners", "=", "[", "(", "X", "[", "0", "]", ",", "Y", "[", "0", "]", ")", ",", "(", "X", "[", "0", "]", ",", "Y", "[", "1", "]", ")", ",", "(", "X", "[", "1", "]", ",", "Y", "[", "1", "]", ")", ",", "(", "X", "[", "1", "]", ",", "Y", "[", "0", "]", ")", "]", "\n", "corners", "=", "torch", ".", "tensor", "(", "corners", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "opt", ".", "device", ")", ".", "repeat", "(", "opt", ".", "batch_size", ",", "1", ",", "1", ")", "\n", "corners_warped", "=", "warp_grid", "(", "opt", ",", "corners", ",", "warp_param", ")", "\n", "return", "corners_warped", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.warp.check_corners_in_range": [[60, 65], ["warp.warp_corners", "max", "max"], "function", ["home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.warp.warp_corners"], ["", "def", "check_corners_in_range", "(", "opt", ",", "warp_param", ")", ":", "\n", "    ", "corners_all", "=", "warp_corners", "(", "opt", ",", "warp_param", ")", "\n", "X", "=", "(", "corners_all", "[", "...", ",", "0", "]", "/", "opt", ".", "W", "*", "max", "(", "opt", ".", "H", ",", "opt", ".", "W", ")", "+", "1", ")", "/", "2", "*", "opt", ".", "W", "-", "0.5", "\n", "Y", "=", "(", "corners_all", "[", "...", ",", "1", "]", "/", "opt", ".", "H", "*", "max", "(", "opt", ".", "H", ",", "opt", ".", "W", ")", "+", "1", ")", "/", "2", "*", "opt", ".", "H", "-", "0.5", "\n", "return", "(", "0", "<=", "X", ")", ".", "all", "(", ")", "and", "(", "X", "<", "opt", ".", "W", ")", ".", "all", "(", ")", "and", "(", "0", "<=", "Y", ")", ".", "all", "(", ")", "and", "(", "Y", "<", "opt", ".", "H", ")", ".", "all", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util.Log.__init__": [[56, 57], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "pass", "\n", "def", "process", "(", "self", ",", "pid", ")", ":", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util.Log.process": [[57, 59], ["print", "util.grey"], "methods", ["home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util.grey"], ["def", "process", "(", "self", ",", "pid", ")", ":", "\n", "        ", "print", "(", "grey", "(", "\"Process ID: {}\"", ".", "format", "(", "pid", ")", ",", "bold", "=", "True", ")", ")", "\n", "", "def", "title", "(", "self", ",", "message", ")", ":", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util.Log.title": [[59, 61], ["print", "util.yellow"], "methods", ["home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util.yellow"], ["", "def", "title", "(", "self", ",", "message", ")", ":", "\n", "        ", "print", "(", "yellow", "(", "message", ",", "bold", "=", "True", ",", "underline", "=", "True", ")", ")", "\n", "", "def", "info", "(", "self", ",", "message", ")", ":", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util.Log.info": [[61, 63], ["print", "util.magenta"], "methods", ["home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util.magenta"], ["", "def", "info", "(", "self", ",", "message", ")", ":", "\n", "        ", "print", "(", "magenta", "(", "message", ",", "bold", "=", "True", ")", ")", "\n", "", "def", "options", "(", "self", ",", "opt", ",", "level", "=", "0", ")", ":", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util.Log.options": [[63, 70], ["sorted", "opt.items", "isinstance", "print", "util.Log.options", "print", "util.yellow", "util.green", "util.green", "util.cyan", "util.cyan"], "methods", ["home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util.Log.options", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util.yellow", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util.green", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util.green", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util.cyan", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util.cyan"], ["", "def", "options", "(", "self", ",", "opt", ",", "level", "=", "0", ")", ":", "\n", "        ", "for", "key", ",", "value", "in", "sorted", "(", "opt", ".", "items", "(", ")", ")", ":", "\n", "            ", "if", "isinstance", "(", "value", ",", "(", "dict", ",", "edict", ")", ")", ":", "\n", "                ", "print", "(", "\"   \"", "*", "level", "+", "cyan", "(", "\"* \"", ")", "+", "green", "(", "key", ")", "+", "\":\"", ")", "\n", "self", ".", "options", "(", "value", ",", "level", "+", "1", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "\"   \"", "*", "level", "+", "cyan", "(", "\"* \"", ")", "+", "green", "(", "key", ")", "+", "\":\"", ",", "yellow", "(", "value", ")", ")", "\n", "", "", "", "def", "loss_train", "(", "self", ",", "opt", ",", "ep", ",", "lr", ",", "loss", ",", "timer", ")", ":", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util.Log.loss_train": [[70, 79], ["util.grey", "print", "util.cyan", "util.yellow", "util.red", "util.blue", "util.blue", "util.get_time", "util.get_time"], "methods", ["home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util.grey", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util.cyan", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util.yellow", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util.red", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util.blue", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util.blue", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util.get_time", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util.get_time"], ["", "", "", "def", "loss_train", "(", "self", ",", "opt", ",", "ep", ",", "lr", ",", "loss", ",", "timer", ")", ":", "\n", "        ", "if", "not", "opt", ".", "max_epoch", ":", "return", "\n", "message", "=", "grey", "(", "\"[train] \"", ",", "bold", "=", "True", ")", "\n", "message", "+=", "\"epoch {}/{}\"", ".", "format", "(", "cyan", "(", "ep", ",", "bold", "=", "True", ")", ",", "opt", ".", "max_epoch", ")", "\n", "message", "+=", "\", lr:{}\"", ".", "format", "(", "yellow", "(", "\"{:.2e}\"", ".", "format", "(", "lr", ")", ",", "bold", "=", "True", ")", ")", "\n", "message", "+=", "\", loss:{}\"", ".", "format", "(", "red", "(", "\"{:.3e}\"", ".", "format", "(", "loss", ")", ",", "bold", "=", "True", ")", ")", "\n", "message", "+=", "\", time:{}\"", ".", "format", "(", "blue", "(", "\"{0}-{1:02d}:{2:02d}:{3:02d}\"", ".", "format", "(", "*", "get_time", "(", "timer", ".", "elapsed", ")", ")", ",", "bold", "=", "True", ")", ")", "\n", "message", "+=", "\" (ETA:{})\"", ".", "format", "(", "blue", "(", "\"{0}-{1:02d}:{2:02d}:{3:02d}\"", ".", "format", "(", "*", "get_time", "(", "timer", ".", "arrival", ")", ")", ")", ")", "\n", "print", "(", "message", ")", "\n", "", "def", "loss_val", "(", "self", ",", "opt", ",", "loss", ")", ":", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util.Log.loss_val": [[79, 83], ["util.grey", "print", "util.red"], "methods", ["home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util.grey", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util.red"], ["", "def", "loss_val", "(", "self", ",", "opt", ",", "loss", ")", ":", "\n", "        ", "message", "=", "grey", "(", "\"[val] \"", ",", "bold", "=", "True", ")", "\n", "message", "+=", "\"loss:{}\"", ".", "format", "(", "red", "(", "\"{:.3e}\"", ".", "format", "(", "loss", ")", ",", "bold", "=", "True", ")", ")", "\n", "print", "(", "message", ")", "\n", "", "", "log", "=", "Log", "(", ")", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util.red": [[15, 16], ["termcolor.colored", "str", "kwargs.items"], "function", ["None"], ["def", "red", "(", "message", ",", "**", "kwargs", ")", ":", "return", "termcolor", ".", "colored", "(", "str", "(", "message", ")", ",", "color", "=", "\"red\"", ",", "attrs", "=", "[", "k", "for", "k", ",", "v", "in", "kwargs", ".", "items", "(", ")", "if", "v", "is", "True", "]", ")", "\n", "def", "green", "(", "message", ",", "**", "kwargs", ")", ":", "return", "termcolor", ".", "colored", "(", "str", "(", "message", ")", ",", "color", "=", "\"green\"", ",", "attrs", "=", "[", "k", "for", "k", ",", "v", "in", "kwargs", ".", "items", "(", ")", "if", "v", "is", "True", "]", ")", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util.green": [[16, 17], ["termcolor.colored", "str", "kwargs.items"], "function", ["None"], ["def", "green", "(", "message", ",", "**", "kwargs", ")", ":", "return", "termcolor", ".", "colored", "(", "str", "(", "message", ")", ",", "color", "=", "\"green\"", ",", "attrs", "=", "[", "k", "for", "k", ",", "v", "in", "kwargs", ".", "items", "(", ")", "if", "v", "is", "True", "]", ")", "\n", "def", "blue", "(", "message", ",", "**", "kwargs", ")", ":", "return", "termcolor", ".", "colored", "(", "str", "(", "message", ")", ",", "color", "=", "\"blue\"", ",", "attrs", "=", "[", "k", "for", "k", ",", "v", "in", "kwargs", ".", "items", "(", ")", "if", "v", "is", "True", "]", ")", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util.blue": [[17, 18], ["termcolor.colored", "str", "kwargs.items"], "function", ["None"], ["def", "blue", "(", "message", ",", "**", "kwargs", ")", ":", "return", "termcolor", ".", "colored", "(", "str", "(", "message", ")", ",", "color", "=", "\"blue\"", ",", "attrs", "=", "[", "k", "for", "k", ",", "v", "in", "kwargs", ".", "items", "(", ")", "if", "v", "is", "True", "]", ")", "\n", "def", "cyan", "(", "message", ",", "**", "kwargs", ")", ":", "return", "termcolor", ".", "colored", "(", "str", "(", "message", ")", ",", "color", "=", "\"cyan\"", ",", "attrs", "=", "[", "k", "for", "k", ",", "v", "in", "kwargs", ".", "items", "(", ")", "if", "v", "is", "True", "]", ")", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util.cyan": [[18, 19], ["termcolor.colored", "str", "kwargs.items"], "function", ["None"], ["def", "cyan", "(", "message", ",", "**", "kwargs", ")", ":", "return", "termcolor", ".", "colored", "(", "str", "(", "message", ")", ",", "color", "=", "\"cyan\"", ",", "attrs", "=", "[", "k", "for", "k", ",", "v", "in", "kwargs", ".", "items", "(", ")", "if", "v", "is", "True", "]", ")", "\n", "def", "yellow", "(", "message", ",", "**", "kwargs", ")", ":", "return", "termcolor", ".", "colored", "(", "str", "(", "message", ")", ",", "color", "=", "\"yellow\"", ",", "attrs", "=", "[", "k", "for", "k", ",", "v", "in", "kwargs", ".", "items", "(", ")", "if", "v", "is", "True", "]", ")", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util.yellow": [[19, 20], ["termcolor.colored", "str", "kwargs.items"], "function", ["None"], ["def", "yellow", "(", "message", ",", "**", "kwargs", ")", ":", "return", "termcolor", ".", "colored", "(", "str", "(", "message", ")", ",", "color", "=", "\"yellow\"", ",", "attrs", "=", "[", "k", "for", "k", ",", "v", "in", "kwargs", ".", "items", "(", ")", "if", "v", "is", "True", "]", ")", "\n", "def", "magenta", "(", "message", ",", "**", "kwargs", ")", ":", "return", "termcolor", ".", "colored", "(", "str", "(", "message", ")", ",", "color", "=", "\"magenta\"", ",", "attrs", "=", "[", "k", "for", "k", ",", "v", "in", "kwargs", ".", "items", "(", ")", "if", "v", "is", "True", "]", ")", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util.magenta": [[20, 21], ["termcolor.colored", "str", "kwargs.items"], "function", ["None"], ["def", "magenta", "(", "message", ",", "**", "kwargs", ")", ":", "return", "termcolor", ".", "colored", "(", "str", "(", "message", ")", ",", "color", "=", "\"magenta\"", ",", "attrs", "=", "[", "k", "for", "k", ",", "v", "in", "kwargs", ".", "items", "(", ")", "if", "v", "is", "True", "]", ")", "\n", "def", "grey", "(", "message", ",", "**", "kwargs", ")", ":", "return", "termcolor", ".", "colored", "(", "str", "(", "message", ")", ",", "color", "=", "\"grey\"", ",", "attrs", "=", "[", "k", "for", "k", ",", "v", "in", "kwargs", ".", "items", "(", ")", "if", "v", "is", "True", "]", ")", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util.grey": [[21, 22], ["termcolor.colored", "str", "kwargs.items"], "function", ["None"], ["def", "grey", "(", "message", ",", "**", "kwargs", ")", ":", "return", "termcolor", ".", "colored", "(", "str", "(", "message", ")", ",", "color", "=", "\"grey\"", ",", "attrs", "=", "[", "k", "for", "k", ",", "v", "in", "kwargs", ".", "items", "(", ")", "if", "v", "is", "True", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util.get_time": [[23, 29], ["int", "int", "int", "int"], "function", ["None"], ["def", "get_time", "(", "sec", ")", ":", "\n", "    ", "d", "=", "int", "(", "sec", "//", "(", "24", "*", "60", "*", "60", ")", ")", "\n", "h", "=", "int", "(", "sec", "//", "(", "60", "*", "60", ")", "%", "24", ")", "\n", "m", "=", "int", "(", "(", "sec", "//", "60", ")", "%", "60", ")", "\n", "s", "=", "int", "(", "sec", "%", "60", ")", "\n", "return", "d", ",", "h", ",", "m", ",", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util.add_datetime": [[30, 36], ["datetime.datetime.now().strftime", "print", "func", "util.grey", "datetime.datetime.now"], "function", ["home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util.grey"], ["", "def", "add_datetime", "(", "func", ")", ":", "\n", "    ", "def", "wrapper", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "datetime_str", "=", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%Y-%m-%d %H:%M:%S\"", ")", "\n", "print", "(", "grey", "(", "\"[{}] \"", ".", "format", "(", "datetime_str", ")", ",", "bold", "=", "True", ")", ",", "end", "=", "\"\"", ")", "\n", "return", "func", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "", "return", "wrapper", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util.add_functionname": [[37, 42], ["print", "func", "util.grey"], "function", ["home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util.grey"], ["", "def", "add_functionname", "(", "func", ")", ":", "\n", "    ", "def", "wrapper", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "print", "(", "grey", "(", "\"[{}] \"", ".", "format", "(", "func", ".", "__name__", ")", ",", "bold", "=", "True", ")", ")", "\n", "return", "func", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "", "return", "wrapper", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util.pre_post_actions": [[43, 52], ["func", "pre", "post"], "function", ["None"], ["", "def", "pre_post_actions", "(", "pre", "=", "None", ",", "post", "=", "None", ")", ":", "\n", "    ", "def", "func_decorator", "(", "func", ")", ":", "\n", "        ", "def", "wrapper", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "            ", "if", "pre", ":", "pre", "(", ")", "\n", "retval", "=", "func", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "if", "post", ":", "post", "(", ")", "\n", "return", "retval", "\n", "", "return", "wrapper", "\n", "", "return", "func_decorator", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util.update_timer": [[85, 93], ["time.time"], "function", ["None"], ["def", "update_timer", "(", "opt", ",", "timer", ",", "ep", ",", "it_per_ep", ")", ":", "\n", "    ", "if", "not", "opt", ".", "max_epoch", ":", "return", "\n", "momentum", "=", "0.99", "\n", "timer", ".", "elapsed", "=", "time", ".", "time", "(", ")", "-", "timer", ".", "start", "\n", "timer", ".", "it", "=", "timer", ".", "it_end", "-", "timer", ".", "it_start", "\n", "# compute speed with moving average", "\n", "timer", ".", "it_mean", "=", "timer", ".", "it_mean", "*", "momentum", "+", "timer", ".", "it", "*", "(", "1", "-", "momentum", ")", "if", "timer", ".", "it_mean", "is", "not", "None", "else", "timer", ".", "it", "\n", "timer", ".", "arrival", "=", "timer", ".", "it_mean", "*", "it_per_ep", "*", "(", "opt", ".", "max_epoch", "-", "ep", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util.move_to_device": [[95, 109], ["isinstance", "X.items", "isinstance", "util.move_to_device", "enumerate", "util.move_to_device", "isinstance", "hasattr", "X._asdict", "util.move_to_device", "isinstance", "type", "X.to"], "function", ["home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util.move_to_device", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util.move_to_device", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util.move_to_device"], ["", "def", "move_to_device", "(", "X", ",", "device", ")", ":", "\n", "    ", "if", "isinstance", "(", "X", ",", "dict", ")", ":", "\n", "        ", "for", "k", ",", "v", "in", "X", ".", "items", "(", ")", ":", "\n", "            ", "X", "[", "k", "]", "=", "move_to_device", "(", "v", ",", "device", ")", "\n", "", "", "elif", "isinstance", "(", "X", ",", "list", ")", ":", "\n", "        ", "for", "i", ",", "e", "in", "enumerate", "(", "X", ")", ":", "\n", "            ", "X", "[", "i", "]", "=", "move_to_device", "(", "e", ",", "device", ")", "\n", "", "", "elif", "isinstance", "(", "X", ",", "tuple", ")", "and", "hasattr", "(", "X", ",", "\"_fields\"", ")", ":", "# collections.namedtuple", "\n", "        ", "dd", "=", "X", ".", "_asdict", "(", ")", "\n", "dd", "=", "move_to_device", "(", "dd", ",", "device", ")", "\n", "return", "type", "(", "X", ")", "(", "**", "dd", ")", "\n", "", "elif", "isinstance", "(", "X", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "return", "X", ".", "to", "(", "device", "=", "device", ")", "\n", "", "return", "X", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util.to_dict": [[110, 116], ["dict_type", "dict_type.items", "isinstance", "util.to_dict"], "function", ["home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util.to_dict"], ["", "def", "to_dict", "(", "D", ",", "dict_type", "=", "dict", ")", ":", "\n", "    ", "D", "=", "dict_type", "(", "D", ")", "\n", "for", "k", ",", "v", "in", "D", ".", "items", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "v", ",", "dict", ")", ":", "\n", "            ", "D", "[", "k", "]", "=", "to_dict", "(", "v", ",", "dict_type", ")", "\n", "", "", "return", "D", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util.get_child_state_dict": [[117, 119], ["state_dict.items", "k.startswith", "k.split"], "function", ["None"], ["", "def", "get_child_state_dict", "(", "state_dict", ",", "key", ")", ":", "\n", "    ", "return", "{", "\".\"", ".", "join", "(", "k", ".", "split", "(", "\".\"", ")", "[", "1", ":", "]", ")", ":", "v", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", "if", "k", ".", "startswith", "(", "\"{}.\"", ".", "format", "(", "key", ")", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util.restore_checkpoint": [[120, 142], ["torch.load", "torch.load", "model.graph.named_children", "util.get_child_state_dict", "print", "print", "child.load_state_dict", "print", "getattr().load_state_dict", "key.split", "getattr"], "function", ["home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util.get_child_state_dict"], ["", "def", "restore_checkpoint", "(", "opt", ",", "model", ",", "load_name", "=", "None", ",", "resume", "=", "False", ")", ":", "\n", "    ", "assert", "(", "(", "load_name", "is", "None", ")", "==", "(", "resume", "is", "not", "False", ")", ")", "# resume can be True/False or epoch numbers", "\n", "if", "resume", ":", "\n", "        ", "load_name", "=", "\"{0}/model.ckpt\"", ".", "format", "(", "opt", ".", "output_path", ")", "if", "resume", "is", "True", "else", "\"{0}/model/{1}.ckpt\"", ".", "format", "(", "opt", ".", "output_path", ",", "resume", ")", "\n", "", "checkpoint", "=", "torch", ".", "load", "(", "load_name", ",", "map_location", "=", "opt", ".", "device", ")", "\n", "# load individual (possibly partial) children modules", "\n", "for", "name", ",", "child", "in", "model", ".", "graph", ".", "named_children", "(", ")", ":", "\n", "        ", "child_state_dict", "=", "get_child_state_dict", "(", "checkpoint", "[", "\"graph\"", "]", ",", "name", ")", "\n", "if", "child_state_dict", ":", "\n", "            ", "print", "(", "\"restoring {}...\"", ".", "format", "(", "name", ")", ")", "\n", "child", ".", "load_state_dict", "(", "child_state_dict", ")", "\n", "", "", "for", "key", "in", "model", ".", "__dict__", ":", "\n", "        ", "if", "key", ".", "split", "(", "\"_\"", ")", "[", "0", "]", "in", "[", "\"optim\"", ",", "\"sched\"", "]", "and", "key", "in", "checkpoint", "and", "resume", ":", "\n", "            ", "print", "(", "\"restoring {}...\"", ".", "format", "(", "key", ")", ")", "\n", "getattr", "(", "model", ",", "key", ")", ".", "load_state_dict", "(", "checkpoint", "[", "key", "]", ")", "\n", "", "", "if", "resume", ":", "\n", "        ", "ep", ",", "it", "=", "checkpoint", "[", "\"epoch\"", "]", ",", "checkpoint", "[", "\"iter\"", "]", "\n", "if", "resume", "is", "not", "True", ":", "assert", "(", "resume", "==", "(", "ep", "or", "it", ")", ")", "\n", "print", "(", "\"resuming from epoch {0} (iteration {1})\"", ".", "format", "(", "ep", ",", "it", ")", ")", "\n", "", "else", ":", "ep", ",", "it", "=", "None", ",", "None", "\n", "return", "ep", ",", "it", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util.save_checkpoint": [[143, 160], ["os.makedirs", "dict", "torch.save", "torch.save", "model.graph.state_dict", "shutil.copy", "dict.update", "model.graph.state_dict().items", "k.startswith", "key.split", "getattr().state_dict", "model.graph.state_dict", "getattr"], "function", ["None"], ["", "def", "save_checkpoint", "(", "opt", ",", "model", ",", "ep", ",", "it", ",", "latest", "=", "False", ",", "children", "=", "None", ")", ":", "\n", "    ", "os", ".", "makedirs", "(", "\"{0}/model\"", ".", "format", "(", "opt", ".", "output_path", ")", ",", "exist_ok", "=", "True", ")", "\n", "if", "children", "is", "not", "None", ":", "\n", "        ", "graph_state_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "model", ".", "graph", ".", "state_dict", "(", ")", ".", "items", "(", ")", "if", "k", ".", "startswith", "(", "children", ")", "}", "\n", "", "else", ":", "graph_state_dict", "=", "model", ".", "graph", ".", "state_dict", "(", ")", "\n", "checkpoint", "=", "dict", "(", "\n", "epoch", "=", "ep", ",", "\n", "iter", "=", "it", ",", "\n", "graph", "=", "graph_state_dict", ",", "\n", ")", "\n", "for", "key", "in", "model", ".", "__dict__", ":", "\n", "        ", "if", "key", ".", "split", "(", "\"_\"", ")", "[", "0", "]", "in", "[", "\"optim\"", ",", "\"sched\"", "]", ":", "\n", "            ", "checkpoint", ".", "update", "(", "{", "key", ":", "getattr", "(", "model", ",", "key", ")", ".", "state_dict", "(", ")", "}", ")", "\n", "", "", "torch", ".", "save", "(", "checkpoint", ",", "\"{0}/model.ckpt\"", ".", "format", "(", "opt", ".", "output_path", ")", ")", "\n", "if", "not", "latest", ":", "\n", "        ", "shutil", ".", "copy", "(", "\"{0}/model.ckpt\"", ".", "format", "(", "opt", ".", "output_path", ")", ",", "\n", "\"{0}/model/{1}.ckpt\"", ".", "format", "(", "opt", ".", "output_path", ",", "ep", "or", "it", ")", ")", "# if ep is None, track it instead", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util.check_socket_open": [[161, 171], ["socket.socket", "socket.socket.bind", "socket.socket.close"], "function", ["None"], ["", "", "def", "check_socket_open", "(", "hostname", ",", "port", ")", ":", "\n", "    ", "s", "=", "socket", ".", "socket", "(", "socket", ".", "AF_INET", ",", "socket", ".", "SOCK_STREAM", ")", "\n", "is_open", "=", "False", "\n", "try", ":", "\n", "        ", "s", ".", "bind", "(", "(", "hostname", ",", "port", ")", ")", "\n", "", "except", "socket", ".", "error", ":", "\n", "        ", "is_open", "=", "True", "\n", "", "finally", ":", "\n", "        ", "s", ".", "close", "(", ")", "\n", "", "return", "is_open", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util.get_layer_dims": [[172, 175], ["list", "zip"], "function", ["None"], ["", "def", "get_layer_dims", "(", "layers", ")", ":", "\n", "# return a list of tuples (k_in,k_out)", "\n", "    ", "return", "list", "(", "zip", "(", "layers", "[", ":", "-", "1", "]", ",", "layers", "[", "1", ":", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util.suppress": [[176, 185], ["open"], "function", ["None"], ["", "@", "contextlib", ".", "contextmanager", "\n", "def", "suppress", "(", "stdout", "=", "False", ",", "stderr", "=", "False", ")", ":", "\n", "    ", "with", "open", "(", "os", ".", "devnull", ",", "\"w\"", ")", "as", "devnull", ":", "\n", "        ", "if", "stdout", ":", "old_stdout", ",", "sys", ".", "stdout", "=", "sys", ".", "stdout", ",", "devnull", "\n", "if", "stderr", ":", "old_stderr", ",", "sys", ".", "stderr", "=", "sys", ".", "stderr", ",", "devnull", "\n", "try", ":", "yield", "\n", "finally", ":", "\n", "            ", "if", "stdout", ":", "sys", ".", "stdout", "=", "old_stdout", "\n", "if", "stderr", ":", "sys", ".", "stderr", "=", "old_stderr", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util.colorcode_to_number": [[186, 191], ["ord"], "function", ["None"], ["", "", "", "def", "colorcode_to_number", "(", "code", ")", ":", "\n", "    ", "ords", "=", "[", "ord", "(", "c", ")", "for", "c", "in", "code", "[", "1", ":", "]", "]", "\n", "ords", "=", "[", "n", "-", "48", "if", "n", "<", "58", "else", "n", "-", "87", "for", "n", "in", "ords", "]", "\n", "rgb", "=", "(", "ords", "[", "0", "]", "*", "16", "+", "ords", "[", "1", "]", ",", "ords", "[", "2", "]", "*", "16", "+", "ords", "[", "3", "]", ",", "ords", "[", "4", "]", "*", "16", "+", "ords", "[", "5", "]", ")", "\n", "return", "rgb", "\n", "", ""]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.planar.Model.__init__": [[22, 25], ["base.Model.__init__"], "methods", ["home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.data.blender.Dataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "opt", ")", "\n", "opt", ".", "H_crop", ",", "opt", ".", "W_crop", "=", "opt", ".", "data", ".", "patch_crop", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.planar.Model.load_dataset": [[26, 29], ["PIL.Image.open", "PIL.Image.open", "PIL.Image.open", "PIL.Image.open", "PIL.Image.open", "PIL.Image.open", "PIL.Image.open", "PIL.Image.open", "PIL.Image.open", "torchvision.to_tensor().to", "torchvision.to_tensor().to", "torchvision.to_tensor", "torchvision.to_tensor"], "methods", ["None"], ["", "def", "load_dataset", "(", "self", ",", "opt", ",", "eval_split", "=", "None", ")", ":", "\n", "        ", "image_raw", "=", "PIL", ".", "Image", ".", "open", "(", "opt", ".", "data", ".", "image_fname", ")", "\n", "self", ".", "image_raw", "=", "torchvision_F", ".", "to_tensor", "(", "image_raw", ")", ".", "to", "(", "opt", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.planar.Model.build_networks": [[30, 34], ["super().build_networks", "torch.nn.Embedding().to", "torch.nn.Embedding().to", "torch.nn.Embedding().to", "torch.nn.Embedding().to", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding"], "methods", ["home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.barf.Model.build_networks"], ["", "def", "build_networks", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", ")", ".", "build_networks", "(", "opt", ")", "\n", "self", ".", "graph", ".", "warp_param", "=", "torch", ".", "nn", ".", "Embedding", "(", "opt", ".", "batch_size", ",", "opt", ".", "warp", ".", "dof", ")", ".", "to", "(", "opt", ".", "device", ")", "\n", "torch", ".", "nn", ".", "init", ".", "zeros_", "(", "self", ".", "graph", ".", "warp_param", ".", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.planar.Model.setup_optimizer": [[35, 48], ["util.log.info", "getattr", "getattr.", "dict", "dict", "getattr", "getattr.", "planar.Model.graph.neural_image.parameters", "planar.Model.graph.warp_param.parameters", "opt.optim.sched.items"], "methods", ["home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util.Log.info"], ["", "def", "setup_optimizer", "(", "self", ",", "opt", ")", ":", "\n", "        ", "log", ".", "info", "(", "\"setting up optimizers...\"", ")", "\n", "optim_list", "=", "[", "\n", "dict", "(", "params", "=", "self", ".", "graph", ".", "neural_image", ".", "parameters", "(", ")", ",", "lr", "=", "opt", ".", "optim", ".", "lr", ")", ",", "\n", "dict", "(", "params", "=", "self", ".", "graph", ".", "warp_param", ".", "parameters", "(", ")", ",", "lr", "=", "opt", ".", "optim", ".", "lr_warp", ")", ",", "\n", "]", "\n", "optimizer", "=", "getattr", "(", "torch", ".", "optim", ",", "opt", ".", "optim", ".", "algo", ")", "\n", "self", ".", "optim", "=", "optimizer", "(", "optim_list", ")", "\n", "# set up scheduler", "\n", "if", "opt", ".", "optim", ".", "sched", ":", "\n", "            ", "scheduler", "=", "getattr", "(", "torch", ".", "optim", ".", "lr_scheduler", ",", "opt", ".", "optim", ".", "sched", ".", "type", ")", "\n", "kwargs", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "opt", ".", "optim", ".", "sched", ".", "items", "(", ")", "if", "k", "!=", "\"type\"", "}", "\n", "self", ".", "sched", "=", "scheduler", "(", "self", ".", "optim", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.planar.Model.setup_visualizer": [[49, 60], ["super().setup_visualizer", "list", "numpy.array().astype", "os.makedirs", "map", "len", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.base.Model.setup_visualizer"], ["", "", "def", "setup_visualizer", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", ")", ".", "setup_visualizer", "(", "opt", ")", "\n", "# set colors for visualization", "\n", "box_colors", "=", "[", "\"#ff0000\"", ",", "\"#40afff\"", ",", "\"#9314ff\"", ",", "\"#ffd700\"", ",", "\"#00ff00\"", "]", "\n", "box_colors", "=", "list", "(", "map", "(", "util", ".", "colorcode_to_number", ",", "box_colors", ")", ")", "\n", "self", ".", "box_colors", "=", "np", ".", "array", "(", "box_colors", ")", ".", "astype", "(", "int", ")", "\n", "assert", "(", "len", "(", "self", ".", "box_colors", ")", "==", "opt", ".", "batch_size", ")", "\n", "# create visualization directory", "\n", "self", ".", "vis_path", "=", "\"{}/vis\"", ".", "format", "(", "opt", ".", "output_path", ")", "\n", "os", ".", "makedirs", "(", "self", ".", "vis_path", ",", "exist_ok", "=", "True", ")", "\n", "self", ".", "video_fname", "=", "\"{}/vis.mp4\"", ".", "format", "(", "opt", ".", "output_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.planar.Model.train": [[61, 89], ["util.log.title", "easydict.EasyDict", "planar.Model.graph.train", "easydict.EasyDict", "planar.Model.generate_warp_perturbation", "util.move_to_device", "tqdm.trange", "planar.Model.graph.forward", "planar.Model.visualize", "os.system", "planar.Model.save_checkpoint", "util.log.title", "planar.Model.train_iteration", "planar.Model.tb.flush", "planar.Model.tb.close", "planar.Model.vis.close", "time.time", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util.Log.title", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.nerf.Model.train", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.planar.Model.generate_warp_perturbation", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util.move_to_device", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.nerf.NeRF.forward", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.nerf.Model.visualize", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.base.Model.save_checkpoint", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util.Log.title", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.barf.Model.train_iteration"], ["", "def", "train", "(", "self", ",", "opt", ")", ":", "\n", "# before training", "\n", "        ", "log", ".", "title", "(", "\"TRAINING START\"", ")", "\n", "self", ".", "timer", "=", "edict", "(", "start", "=", "time", ".", "time", "(", ")", ",", "it_mean", "=", "None", ")", "\n", "self", ".", "ep", "=", "self", ".", "it", "=", "self", ".", "vis_it", "=", "0", "\n", "self", ".", "graph", ".", "train", "(", ")", "\n", "var", "=", "edict", "(", "idx", "=", "torch", ".", "arange", "(", "opt", ".", "batch_size", ")", ")", "\n", "# pre-generate perturbations", "\n", "self", ".", "warp_pert", ",", "var", ".", "image_pert", "=", "self", ".", "generate_warp_perturbation", "(", "opt", ")", "\n", "# train", "\n", "var", "=", "util", ".", "move_to_device", "(", "var", ",", "opt", ".", "device", ")", "\n", "loader", "=", "tqdm", ".", "trange", "(", "opt", ".", "max_iter", ",", "desc", "=", "\"training\"", ",", "leave", "=", "False", ")", "\n", "# visualize initial state", "\n", "var", "=", "self", ".", "graph", ".", "forward", "(", "opt", ",", "var", ")", "\n", "self", ".", "visualize", "(", "opt", ",", "var", ",", "step", "=", "0", ")", "\n", "for", "it", "in", "loader", ":", "\n", "# train iteration", "\n", "            ", "loss", "=", "self", ".", "train_iteration", "(", "opt", ",", "var", ",", "loader", ")", "\n", "if", "opt", ".", "warp", ".", "fix_first", ":", "\n", "                ", "self", ".", "graph", ".", "warp_param", ".", "weight", ".", "data", "[", "0", "]", "=", "0", "\n", "# after training", "\n", "", "", "os", ".", "system", "(", "\"ffmpeg -y -framerate 30 -i {}/%d.png -pix_fmt yuv420p {}\"", ".", "format", "(", "self", ".", "vis_path", ",", "self", ".", "video_fname", ")", ")", "\n", "self", ".", "save_checkpoint", "(", "opt", ",", "ep", "=", "None", ",", "it", "=", "self", ".", "it", ")", "\n", "if", "opt", ".", "tb", ":", "\n", "            ", "self", ".", "tb", ".", "flush", "(", ")", "\n", "self", ".", "tb", ".", "close", "(", ")", "\n", "", "if", "opt", ".", "visdom", ":", "self", ".", "vis", ".", "close", "(", ")", "\n", "log", ".", "title", "(", "\"TRAINING DONE\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.planar.Model.train_iteration": [[90, 94], ["super().train_iteration", "planar.Model.graph.neural_image.progress.data.fill_"], "methods", ["home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.barf.Model.train_iteration"], ["", "def", "train_iteration", "(", "self", ",", "opt", ",", "var", ",", "loader", ")", ":", "\n", "        ", "loss", "=", "super", "(", ")", ".", "train_iteration", "(", "opt", ",", "var", ",", "loader", ")", "\n", "self", ".", "graph", ".", "neural_image", ".", "progress", ".", "data", ".", "fill_", "(", "self", ".", "it", "/", "opt", ".", "max_iter", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.planar.Model.generate_warp_perturbation": [[95, 121], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "warp.get_normalized_pixel_grid_crop", "warp.warp_grid", "torch.stack.view", "torch.stack.view", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "planar.Model.image_raw.repeat", "torch.grid_sample", "torch.grid_sample", "planar.Model.generate_warp_perturbation.create_random_perturbation"], "methods", ["home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.warp.get_normalized_pixel_grid_crop", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.warp.warp_grid"], ["", "def", "generate_warp_perturbation", "(", "self", ",", "opt", ")", ":", "\n", "# pre-generate perturbations (translational noise + homography noise)", "\n", "        ", "warp_pert_all", "=", "torch", ".", "zeros", "(", "opt", ".", "batch_size", ",", "opt", ".", "warp", ".", "dof", ",", "device", "=", "opt", ".", "device", ")", "\n", "trans_pert", "=", "[", "(", "0", ",", "0", ")", "]", "+", "[", "(", "x", ",", "y", ")", "for", "x", "in", "(", "-", "opt", ".", "warp", ".", "noise_t", ",", "opt", ".", "warp", ".", "noise_t", ")", "\n", "for", "y", "in", "(", "-", "opt", ".", "warp", ".", "noise_t", ",", "opt", ".", "warp", ".", "noise_t", ")", "]", "\n", "def", "create_random_perturbation", "(", ")", ":", "\n", "            ", "warp_pert", "=", "torch", ".", "randn", "(", "opt", ".", "warp", ".", "dof", ",", "device", "=", "opt", ".", "device", ")", "*", "opt", ".", "warp", ".", "noise_h", "\n", "warp_pert", "[", "0", "]", "+=", "trans_pert", "[", "i", "]", "[", "0", "]", "\n", "warp_pert", "[", "1", "]", "+=", "trans_pert", "[", "i", "]", "[", "1", "]", "\n", "return", "warp_pert", "\n", "", "for", "i", "in", "range", "(", "opt", ".", "batch_size", ")", ":", "\n", "            ", "warp_pert", "=", "create_random_perturbation", "(", ")", "\n", "while", "not", "warp", ".", "check_corners_in_range", "(", "opt", ",", "warp_pert", "[", "None", "]", ")", ":", "\n", "                ", "warp_pert", "=", "create_random_perturbation", "(", ")", "\n", "", "warp_pert_all", "[", "i", "]", "=", "warp_pert", "\n", "", "if", "opt", ".", "warp", ".", "fix_first", ":", "\n", "            ", "warp_pert_all", "[", "0", "]", "=", "0", "\n", "# create warped image patches", "\n", "", "xy_grid", "=", "warp", ".", "get_normalized_pixel_grid_crop", "(", "opt", ")", "# [B,HW,2]", "\n", "xy_grid_warped", "=", "warp", ".", "warp_grid", "(", "opt", ",", "xy_grid", ",", "warp_pert_all", ")", "\n", "xy_grid_warped", "=", "xy_grid_warped", ".", "view", "(", "[", "opt", ".", "batch_size", ",", "opt", ".", "H_crop", ",", "opt", ".", "W_crop", ",", "2", "]", ")", "\n", "xy_grid_warped", "=", "torch", ".", "stack", "(", "[", "xy_grid_warped", "[", "...", ",", "0", "]", "*", "max", "(", "opt", ".", "H", ",", "opt", ".", "W", ")", "/", "opt", ".", "W", ",", "\n", "xy_grid_warped", "[", "...", ",", "1", "]", "*", "max", "(", "opt", ".", "H", ",", "opt", ".", "W", ")", "/", "opt", ".", "H", "]", ",", "dim", "=", "-", "1", ")", "\n", "image_raw_batch", "=", "self", ".", "image_raw", ".", "repeat", "(", "opt", ".", "batch_size", ",", "1", ",", "1", ",", "1", ")", "\n", "image_pert_all", "=", "torch_F", ".", "grid_sample", "(", "image_raw_batch", ",", "xy_grid_warped", ",", "align_corners", "=", "False", ")", "\n", "return", "warp_pert_all", ",", "image_pert_all", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.planar.Model.visualize_patches": [[122, 135], ["torchvision.to_pil_image().convert", "torchvision.to_pil_image().convert", "PIL.Image.new", "PIL.Image.new", "PIL.Image.new", "PIL.Image.new", "PIL.Image.new", "PIL.Image.new", "PIL.Image.new", "PIL.Image.new", "PIL.Image.new", "PIL.ImageDraw.Draw", "PIL.ImageDraw.Draw", "PIL.ImageDraw.Draw", "PIL.ImageDraw.Draw", "PIL.ImageDraw.Draw", "PIL.ImageDraw.Draw", "PIL.ImageDraw.Draw", "PIL.ImageDraw.Draw", "PIL.ImageDraw.Draw", "warp.warp_corners", "enumerate", "torchvision.to_pil_image().convert.alpha_composite", "torchvision.to_tensor", "torchvision.to_tensor", "PIL.ImageDraw.Draw.line", "PIL.ImageDraw.Draw.line", "PIL.ImageDraw.Draw.line", "torchvision.to_pil_image().convert.convert", "torchvision.to_pil_image", "torchvision.to_pil_image", "tuple", "range", "tuple", "float", "max", "max"], "methods", ["home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.warp.warp_corners"], ["", "def", "visualize_patches", "(", "self", ",", "opt", ",", "warp_param", ")", ":", "\n", "        ", "image_pil", "=", "torchvision_F", ".", "to_pil_image", "(", "self", ".", "image_raw", ")", ".", "convert", "(", "\"RGBA\"", ")", "\n", "draw_pil", "=", "PIL", ".", "Image", ".", "new", "(", "\"RGBA\"", ",", "image_pil", ".", "size", ",", "(", "0", ",", "0", ",", "0", ",", "0", ")", ")", "\n", "draw", "=", "PIL", ".", "ImageDraw", ".", "Draw", "(", "draw_pil", ")", "\n", "corners_all", "=", "warp", ".", "warp_corners", "(", "opt", ",", "warp_param", ")", "\n", "corners_all", "[", "...", ",", "0", "]", "=", "(", "corners_all", "[", "...", ",", "0", "]", "/", "opt", ".", "W", "*", "max", "(", "opt", ".", "H", ",", "opt", ".", "W", ")", "+", "1", ")", "/", "2", "*", "opt", ".", "W", "-", "0.5", "\n", "corners_all", "[", "...", ",", "1", "]", "=", "(", "corners_all", "[", "...", ",", "1", "]", "/", "opt", ".", "H", "*", "max", "(", "opt", ".", "H", ",", "opt", ".", "W", ")", "+", "1", ")", "/", "2", "*", "opt", ".", "H", "-", "0.5", "\n", "for", "i", ",", "corners", "in", "enumerate", "(", "corners_all", ")", ":", "\n", "            ", "P", "=", "[", "tuple", "(", "float", "(", "n", ")", "for", "n", "in", "corners", "[", "j", "]", ")", "for", "j", "in", "range", "(", "4", ")", "]", "\n", "draw", ".", "line", "(", "[", "P", "[", "0", "]", ",", "P", "[", "1", "]", ",", "P", "[", "2", "]", ",", "P", "[", "3", "]", ",", "P", "[", "0", "]", "]", ",", "fill", "=", "tuple", "(", "self", ".", "box_colors", "[", "i", "]", ")", ",", "width", "=", "3", ")", "\n", "", "image_pil", ".", "alpha_composite", "(", "draw_pil", ")", "\n", "image_tensor", "=", "torchvision_F", ".", "to_tensor", "(", "image_pil", ".", "convert", "(", "\"RGB\"", ")", ")", "\n", "return", "image_tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.planar.Model.predict_entire_image": [[136, 142], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "planar.Model.graph.neural_image.forward", "planar.Model.view().detach().cpu().permute", "warp.get_normalized_pixel_grid", "planar.Model.view().detach().cpu", "planar.Model.view().detach", "planar.Model.view"], "methods", ["home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.nerf.NeRF.forward", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.warp.get_normalized_pixel_grid"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "predict_entire_image", "(", "self", ",", "opt", ")", ":", "\n", "        ", "xy_grid", "=", "warp", ".", "get_normalized_pixel_grid", "(", "opt", ")", "[", ":", "1", "]", "\n", "rgb", "=", "self", ".", "graph", ".", "neural_image", ".", "forward", "(", "opt", ",", "xy_grid", ")", "# [B,HW,3]", "\n", "image", "=", "rgb", ".", "view", "(", "opt", ".", "H", ",", "opt", ".", "W", ",", "3", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.planar.Model.log_scalars": [[143, 152], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "super().log_scalars", "planar.Model.tb.add_scalar", "planar.Model.tb.add_scalar", "loss.render.log10"], "methods", ["home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.nerf.Model.log_scalars"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "log_scalars", "(", "self", ",", "opt", ",", "var", ",", "loss", ",", "metric", "=", "None", ",", "step", "=", "0", ",", "split", "=", "\"train\"", ")", ":", "\n", "        ", "super", "(", ")", ".", "log_scalars", "(", "opt", ",", "var", ",", "loss", ",", "metric", "=", "metric", ",", "step", "=", "step", ",", "split", "=", "split", ")", "\n", "# compute PSNR", "\n", "psnr", "=", "-", "10", "*", "loss", ".", "render", ".", "log10", "(", ")", "\n", "self", ".", "tb", ".", "add_scalar", "(", "\"{0}/{1}\"", ".", "format", "(", "split", ",", "\"PSNR\"", ")", ",", "psnr", ",", "step", ")", "\n", "# warp error", "\n", "warp_error", "=", "(", "self", ".", "graph", ".", "warp_param", ".", "weight", "-", "self", ".", "warp_pert", ")", ".", "norm", "(", "dim", "=", "-", "1", ")", ".", "mean", "(", ")", "\n", "self", ".", "tb", ".", "add_scalar", "(", "\"{0}/{1}\"", ".", "format", "(", "split", ",", "\"warp error\"", ")", ",", "warp_error", ",", "step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.planar.Model.visualize": [[153, 170], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "planar.Model.visualize_patches", "planar.Model.visualize_patches", "planar.Model.predict_entire_image", "imageio.imsave", "util_vis.tb_image", "util_vis.tb_image", "util_vis.tb_image", "util_vis.tb_image", "util_vis.tb_image", "util_vis.color_border", "util_vis.color_border", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.planar.Model.visualize_patches", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.planar.Model.visualize_patches", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.planar.Model.predict_entire_image", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util_vis.tb_image", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util_vis.tb_image", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util_vis.tb_image", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util_vis.tb_image", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util_vis.tb_image", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util_vis.color_border", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util_vis.color_border"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "visualize", "(", "self", ",", "opt", ",", "var", ",", "step", "=", "0", ",", "split", "=", "\"train\"", ")", ":", "\n", "# dump frames for writing to video", "\n", "        ", "frame_GT", "=", "self", ".", "visualize_patches", "(", "opt", ",", "self", ".", "warp_pert", ")", "\n", "frame", "=", "self", ".", "visualize_patches", "(", "opt", ",", "self", ".", "graph", ".", "warp_param", ".", "weight", ")", "\n", "frame2", "=", "self", ".", "predict_entire_image", "(", "opt", ")", "\n", "frame_cat", "=", "(", "torch", ".", "cat", "(", "[", "frame", ",", "frame2", "]", ",", "dim", "=", "1", ")", "*", "255", ")", ".", "byte", "(", ")", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "numpy", "(", ")", "\n", "imageio", ".", "imsave", "(", "\"{}/{}.png\"", ".", "format", "(", "self", ".", "vis_path", ",", "self", ".", "vis_it", ")", ",", "frame_cat", ")", "\n", "self", ".", "vis_it", "+=", "1", "\n", "# visualize in Tensorboard", "\n", "if", "opt", ".", "tb", ":", "\n", "            ", "colors", "=", "self", ".", "box_colors", "\n", "util_vis", ".", "tb_image", "(", "opt", ",", "self", ".", "tb", ",", "step", ",", "split", ",", "\"image_pert\"", ",", "util_vis", ".", "color_border", "(", "var", ".", "image_pert", ",", "colors", ")", ")", "\n", "util_vis", ".", "tb_image", "(", "opt", ",", "self", ".", "tb", ",", "step", ",", "split", ",", "\"rgb_warped\"", ",", "util_vis", ".", "color_border", "(", "var", ".", "rgb_warped_map", ",", "colors", ")", ")", "\n", "util_vis", ".", "tb_image", "(", "opt", ",", "self", ".", "tb", ",", "self", ".", "it", "+", "1", ",", "\"train\"", ",", "\"image_boxes\"", ",", "frame", "[", "None", "]", ")", "\n", "util_vis", ".", "tb_image", "(", "opt", ",", "self", ".", "tb", ",", "self", ".", "it", "+", "1", ",", "\"train\"", ",", "\"image_boxes_GT\"", ",", "frame_GT", "[", "None", "]", ")", "\n", "util_vis", ".", "tb_image", "(", "opt", ",", "self", ".", "tb", ",", "self", ".", "it", "+", "1", ",", "\"train\"", ",", "\"image_entire\"", ",", "frame2", "[", "None", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.planar.Graph.__init__": [[175, 178], ["base.Graph.__init__", "planar.NeuralImageFunction"], "methods", ["home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.data.blender.Dataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "opt", ")", "\n", "self", ".", "neural_image", "=", "NeuralImageFunction", "(", "opt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.planar.Graph.forward": [[179, 186], ["warp.get_normalized_pixel_grid_crop", "warp.warp_grid", "planar.Graph.neural_image.forward", "var.rgb_warped.view().permute", "var.rgb_warped.view"], "methods", ["home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.warp.get_normalized_pixel_grid_crop", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.warp.warp_grid", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.nerf.NeRF.forward"], ["", "def", "forward", "(", "self", ",", "opt", ",", "var", ",", "mode", "=", "None", ")", ":", "\n", "        ", "xy_grid", "=", "warp", ".", "get_normalized_pixel_grid_crop", "(", "opt", ")", "\n", "xy_grid_warped", "=", "warp", ".", "warp_grid", "(", "opt", ",", "xy_grid", ",", "self", ".", "warp_param", ".", "weight", ")", "\n", "# render images", "\n", "var", ".", "rgb_warped", "=", "self", ".", "neural_image", ".", "forward", "(", "opt", ",", "xy_grid_warped", ")", "# [B,HW,3]", "\n", "var", ".", "rgb_warped_map", "=", "var", ".", "rgb_warped", ".", "view", "(", "opt", ".", "batch_size", ",", "opt", ".", "H_crop", ",", "opt", ".", "W_crop", ",", "3", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "# [B,3,H,W]", "\n", "return", "var", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.planar.Graph.compute_loss": [[187, 193], ["easydict.EasyDict", "var.image_pert.view().permute", "planar.Graph.MSE_loss", "var.image_pert.view"], "methods", ["home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.base.Graph.MSE_loss"], ["", "def", "compute_loss", "(", "self", ",", "opt", ",", "var", ",", "mode", "=", "None", ")", ":", "\n", "        ", "loss", "=", "edict", "(", ")", "\n", "if", "opt", ".", "loss_weight", ".", "render", "is", "not", "None", ":", "\n", "            ", "image_pert", "=", "var", ".", "image_pert", ".", "view", "(", "opt", ".", "batch_size", ",", "3", ",", "opt", ".", "H_crop", "*", "opt", ".", "W_crop", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "loss", ".", "render", "=", "self", ".", "MSE_loss", "(", "var", ".", "rgb_warped", ",", "image_pert", ")", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.planar.NeuralImageFunction.__init__": [[196, 200], ["super().__init__", "planar.NeuralImageFunction.define_network", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.data.blender.Dataset.__init__", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.nerf.NeRF.define_network"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "define_network", "(", "opt", ")", "\n", "self", ".", "progress", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "tensor", "(", "0.", ")", ")", "# use Parameter so it could be checkpointed", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.planar.NeuralImageFunction.define_network": [[201, 216], ["torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "util.get_layer_dims", "enumerate", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "planar.NeuralImageFunction.mlp.append", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util.get_layer_dims"], ["", "def", "define_network", "(", "self", ",", "opt", ")", ":", "\n", "        ", "input_2D_dim", "=", "2", "+", "4", "*", "opt", ".", "arch", ".", "posenc", ".", "L_2D", "if", "opt", ".", "arch", ".", "posenc", "else", "2", "\n", "# point-wise RGB prediction", "\n", "self", ".", "mlp", "=", "torch", ".", "nn", ".", "ModuleList", "(", ")", "\n", "L", "=", "util", ".", "get_layer_dims", "(", "opt", ".", "arch", ".", "layers", ")", "\n", "for", "li", ",", "(", "k_in", ",", "k_out", ")", "in", "enumerate", "(", "L", ")", ":", "\n", "            ", "if", "li", "==", "0", ":", "k_in", "=", "input_2D_dim", "\n", "if", "li", "in", "opt", ".", "arch", ".", "skip", ":", "k_in", "+=", "input_2D_dim", "\n", "linear", "=", "torch", ".", "nn", ".", "Linear", "(", "k_in", ",", "k_out", ")", "\n", "if", "opt", ".", "barf_c2f", "and", "li", "==", "0", ":", "\n", "# rescale first layer init (distribution was for pos.enc. but only xy is first used)", "\n", "                ", "scale", "=", "np", ".", "sqrt", "(", "input_2D_dim", "/", "2.", ")", "\n", "linear", ".", "weight", ".", "data", "*=", "scale", "\n", "linear", ".", "bias", ".", "data", "*=", "scale", "\n", "", "self", ".", "mlp", ".", "append", "(", "linear", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.planar.NeuralImageFunction.forward": [[217, 231], ["enumerate", "torch.relu.sigmoid_", "planar.NeuralImageFunction.positional_encoding", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "layer", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "len"], "methods", ["home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.nerf.NeRF.positional_encoding"], ["", "", "def", "forward", "(", "self", ",", "opt", ",", "coord_2D", ")", ":", "# [B,...,3]", "\n", "        ", "if", "opt", ".", "arch", ".", "posenc", ":", "\n", "            ", "points_enc", "=", "self", ".", "positional_encoding", "(", "opt", ",", "coord_2D", ",", "L", "=", "opt", ".", "arch", ".", "posenc", ".", "L_2D", ")", "\n", "points_enc", "=", "torch", ".", "cat", "(", "[", "coord_2D", ",", "points_enc", "]", ",", "dim", "=", "-", "1", ")", "# [B,...,6L+3]", "\n", "", "else", ":", "points_enc", "=", "coord_2D", "\n", "feat", "=", "points_enc", "\n", "# extract implicit features", "\n", "for", "li", ",", "layer", "in", "enumerate", "(", "self", ".", "mlp", ")", ":", "\n", "            ", "if", "li", "in", "opt", ".", "arch", ".", "skip", ":", "feat", "=", "torch", ".", "cat", "(", "[", "feat", ",", "points_enc", "]", ",", "dim", "=", "-", "1", ")", "\n", "feat", "=", "layer", "(", "feat", ")", "\n", "if", "li", "!=", "len", "(", "self", ".", "mlp", ")", "-", "1", ":", "\n", "                ", "feat", "=", "torch_F", ".", "relu", "(", "feat", ")", "\n", "", "", "rgb", "=", "feat", ".", "sigmoid_", "(", ")", "# [B,...,3]", "\n", "return", "rgb", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.planar.NeuralImageFunction.positional_encoding": [[232, 250], ["torch.stack", "torch.stack", "torch.stack", "torch.stack", "input_enc.view.view.view", "spectrum.sin", "spectrum.cos", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "input_enc.view.view.view"], "methods", ["None"], ["", "def", "positional_encoding", "(", "self", ",", "opt", ",", "input", ",", "L", ")", ":", "# [B,...,N]", "\n", "        ", "shape", "=", "input", ".", "shape", "\n", "freq", "=", "2", "**", "torch", ".", "arange", "(", "L", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "opt", ".", "device", ")", "*", "np", ".", "pi", "# [L]", "\n", "spectrum", "=", "input", "[", "...", ",", "None", "]", "*", "freq", "# [B,...,N,L]", "\n", "sin", ",", "cos", "=", "spectrum", ".", "sin", "(", ")", ",", "spectrum", ".", "cos", "(", ")", "# [B,...,N,L]", "\n", "input_enc", "=", "torch", ".", "stack", "(", "[", "sin", ",", "cos", "]", ",", "dim", "=", "-", "2", ")", "# [B,...,N,2,L]", "\n", "input_enc", "=", "input_enc", ".", "view", "(", "*", "shape", "[", ":", "-", "1", "]", ",", "-", "1", ")", "# [B,...,2NL]", "\n", "# coarse-to-fine: smoothly mask positional encoding for BARF", "\n", "if", "opt", ".", "barf_c2f", "is", "not", "None", ":", "\n", "# set weights for different frequency bands", "\n", "            ", "start", ",", "end", "=", "opt", ".", "barf_c2f", "\n", "alpha", "=", "(", "self", ".", "progress", ".", "data", "-", "start", ")", "/", "(", "end", "-", "start", ")", "*", "L", "\n", "k", "=", "torch", ".", "arange", "(", "L", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "opt", ".", "device", ")", "\n", "weight", "=", "(", "1", "-", "(", "alpha", "-", "k", ")", ".", "clamp_", "(", "min", "=", "0", ",", "max", "=", "1", ")", ".", "mul_", "(", "np", ".", "pi", ")", ".", "cos_", "(", ")", ")", "/", "2", "\n", "# apply weights", "\n", "shape", "=", "input_enc", ".", "shape", "\n", "input_enc", "=", "(", "input_enc", ".", "view", "(", "-", "1", ",", "L", ")", "*", "weight", ")", ".", "view", "(", "*", "shape", ")", "\n", "", "return", "input_enc", "\n", "", "", ""]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.base.Model.__init__": [[20, 23], ["super().__init__", "os.makedirs"], "methods", ["home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.data.blender.Dataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "os", ".", "makedirs", "(", "opt", ".", "output_path", ",", "exist_ok", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.base.Model.load_dataset": [[24, 33], ["importlib.import_module", "util.log.info", "importlib.import_module.Dataset", "base.Model.train_data.setup_loader", "util.log.info", "importlib.import_module.Dataset", "base.Model.test_data.setup_loader"], "methods", ["home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util.Log.info", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.data.base.Dataset.setup_loader", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util.Log.info", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.data.base.Dataset.setup_loader"], ["", "def", "load_dataset", "(", "self", ",", "opt", ",", "eval_split", "=", "\"val\"", ")", ":", "\n", "        ", "data", "=", "importlib", ".", "import_module", "(", "\"data.{}\"", ".", "format", "(", "opt", ".", "data", ".", "dataset", ")", ")", "\n", "log", ".", "info", "(", "\"loading training data...\"", ")", "\n", "self", ".", "train_data", "=", "data", ".", "Dataset", "(", "opt", ",", "split", "=", "\"train\"", ",", "subset", "=", "opt", ".", "data", ".", "train_sub", ")", "\n", "self", ".", "train_loader", "=", "self", ".", "train_data", ".", "setup_loader", "(", "opt", ",", "shuffle", "=", "True", ")", "\n", "log", ".", "info", "(", "\"loading test data...\"", ")", "\n", "if", "opt", ".", "data", ".", "val_on_test", ":", "eval_split", "=", "\"test\"", "\n", "self", ".", "test_data", "=", "data", ".", "Dataset", "(", "opt", ",", "split", "=", "eval_split", ",", "subset", "=", "opt", ".", "data", ".", "val_sub", ")", "\n", "self", ".", "test_loader", "=", "self", ".", "test_data", ".", "setup_loader", "(", "opt", ",", "shuffle", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.base.Model.build_networks": [[34, 38], ["importlib.import_module", "util.log.info", "importlib.import_module.Graph().to", "importlib.import_module.Graph"], "methods", ["home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util.Log.info"], ["", "def", "build_networks", "(", "self", ",", "opt", ")", ":", "\n", "        ", "graph", "=", "importlib", ".", "import_module", "(", "\"model.{}\"", ".", "format", "(", "opt", ".", "model", ")", ")", "\n", "log", ".", "info", "(", "\"building networks...\"", ")", "\n", "self", ".", "graph", "=", "graph", ".", "Graph", "(", "opt", ")", ".", "to", "(", "opt", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.base.Model.setup_optimizer": [[39, 48], ["util.log.info", "getattr", "getattr.", "getattr", "getattr.", "dict", "opt.optim.sched.items", "base.Model.graph.parameters"], "methods", ["home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util.Log.info"], ["", "def", "setup_optimizer", "(", "self", ",", "opt", ")", ":", "\n", "        ", "log", ".", "info", "(", "\"setting up optimizers...\"", ")", "\n", "optimizer", "=", "getattr", "(", "torch", ".", "optim", ",", "opt", ".", "optim", ".", "algo", ")", "\n", "self", ".", "optim", "=", "optimizer", "(", "[", "dict", "(", "params", "=", "self", ".", "graph", ".", "parameters", "(", ")", ",", "lr", "=", "opt", ".", "optim", ".", "lr", ")", "]", ")", "\n", "# set up scheduler", "\n", "if", "opt", ".", "optim", ".", "sched", ":", "\n", "            ", "scheduler", "=", "getattr", "(", "torch", ".", "optim", ".", "lr_scheduler", ",", "opt", ".", "optim", ".", "sched", ".", "type", ")", "\n", "kwargs", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "opt", ".", "optim", ".", "sched", ".", "items", "(", ")", "if", "k", "!=", "\"type\"", "}", "\n", "self", ".", "sched", "=", "scheduler", "(", "self", ".", "optim", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.base.Model.restore_checkpoint": [[49, 61], ["util.log.info", "util.restore_checkpoint", "util.log.info", "util.restore_checkpoint", "util.log.info"], "methods", ["home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util.Log.info", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.base.Model.restore_checkpoint", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util.Log.info", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.base.Model.restore_checkpoint", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util.Log.info"], ["", "", "def", "restore_checkpoint", "(", "self", ",", "opt", ")", ":", "\n", "        ", "epoch_start", ",", "iter_start", "=", "None", ",", "None", "\n", "if", "opt", ".", "resume", ":", "\n", "            ", "log", ".", "info", "(", "\"resuming from previous checkpoint...\"", ")", "\n", "epoch_start", ",", "iter_start", "=", "util", ".", "restore_checkpoint", "(", "opt", ",", "self", ",", "resume", "=", "opt", ".", "resume", ")", "\n", "", "elif", "opt", ".", "load", "is", "not", "None", ":", "\n", "            ", "log", ".", "info", "(", "\"loading weights from checkpoint {}...\"", ".", "format", "(", "opt", ".", "load", ")", ")", "\n", "epoch_start", ",", "iter_start", "=", "util", ".", "restore_checkpoint", "(", "opt", ",", "self", ",", "load_name", "=", "opt", ".", "load", ")", "\n", "", "else", ":", "\n", "            ", "log", ".", "info", "(", "\"initializing weights from scratch...\"", ")", "\n", "", "self", ".", "epoch_start", "=", "epoch_start", "or", "0", "\n", "self", ".", "iter_start", "=", "iter_start", "or", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.base.Model.setup_visualizer": [[62, 77], ["util.log.info", "torch.utils.tensorboard.SummaryWriter", "torch.utils.tensorboard.SummaryWriter", "torch.utils.tensorboard.SummaryWriter", "torch.utils.tensorboard.SummaryWriter", "torch.utils.tensorboard.SummaryWriter", "torch.utils.tensorboard.SummaryWriter", "torch.utils.tensorboard.SummaryWriter", "torch.utils.tensorboard.SummaryWriter", "torch.utils.tensorboard.SummaryWriter", "util.check_socket_open", "visdom.Visdom", "input", "util.check_socket_open"], "methods", ["home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util.Log.info", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util.check_socket_open", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util.check_socket_open"], ["", "def", "setup_visualizer", "(", "self", ",", "opt", ")", ":", "\n", "        ", "log", ".", "info", "(", "\"setting up visualizers...\"", ")", "\n", "if", "opt", ".", "tb", ":", "\n", "            ", "self", ".", "tb", "=", "torch", ".", "utils", ".", "tensorboard", ".", "SummaryWriter", "(", "log_dir", "=", "opt", ".", "output_path", ",", "flush_secs", "=", "10", ")", "\n", "", "if", "opt", ".", "visdom", ":", "\n", "# check if visdom server is runninng", "\n", "            ", "is_open", "=", "util", ".", "check_socket_open", "(", "opt", ".", "visdom", ".", "server", ",", "opt", ".", "visdom", ".", "port", ")", "\n", "retry", "=", "None", "\n", "while", "not", "is_open", ":", "\n", "                ", "retry", "=", "input", "(", "\"visdom port ({}) not open, retry? (y/n) \"", ".", "format", "(", "opt", ".", "visdom", ".", "port", ")", ")", "\n", "if", "retry", "not", "in", "[", "\"y\"", ",", "\"n\"", "]", ":", "continue", "\n", "if", "retry", "==", "\"y\"", ":", "\n", "                    ", "is_open", "=", "util", ".", "check_socket_open", "(", "opt", ".", "visdom", ".", "server", ",", "opt", ".", "visdom", ".", "port", ")", "\n", "", "else", ":", "break", "\n", "", "self", ".", "vis", "=", "visdom", ".", "Visdom", "(", "server", "=", "opt", ".", "visdom", ".", "server", ",", "port", "=", "opt", ".", "visdom", ".", "port", ",", "env", "=", "opt", ".", "group", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.base.Model.train": [[78, 93], ["util.log.title", "easydict.EasyDict", "range", "util.log.title", "base.Model.validate", "base.Model.train_epoch", "base.Model.tb.flush", "base.Model.tb.close", "base.Model.vis.close", "time.time"], "methods", ["home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util.Log.title", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util.Log.title", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.barf.Model.validate", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.base.Model.train_epoch"], ["", "", "def", "train", "(", "self", ",", "opt", ")", ":", "\n", "# before training", "\n", "        ", "log", ".", "title", "(", "\"TRAINING START\"", ")", "\n", "self", ".", "timer", "=", "edict", "(", "start", "=", "time", ".", "time", "(", ")", ",", "it_mean", "=", "None", ")", "\n", "self", ".", "it", "=", "self", ".", "iter_start", "\n", "# training", "\n", "if", "self", ".", "iter_start", "==", "0", ":", "self", ".", "validate", "(", "opt", ",", "ep", "=", "0", ")", "\n", "for", "self", ".", "ep", "in", "range", "(", "self", ".", "epoch_start", ",", "opt", ".", "max_epoch", ")", ":", "\n", "            ", "self", ".", "train_epoch", "(", "opt", ")", "\n", "# after training", "\n", "", "if", "opt", ".", "tb", ":", "\n", "            ", "self", ".", "tb", ".", "flush", "(", ")", "\n", "self", ".", "tb", ".", "close", "(", ")", "\n", "", "if", "opt", ".", "visdom", ":", "self", ".", "vis", ".", "close", "(", ")", "\n", "log", ".", "title", "(", "\"TRAINING DONE\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.base.Model.train_epoch": [[94, 110], ["base.Model.graph.train", "tqdm.tqdm", "util.log.loss_train", "easydict.EasyDict", "util.move_to_device", "base.Model.train_iteration", "base.Model.sched.step", "base.Model.validate", "base.Model.save_checkpoint", "base.Model.sched.get_last_lr"], "methods", ["home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.nerf.Model.train", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util.Log.loss_train", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util.move_to_device", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.barf.Model.train_iteration", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.barf.Model.validate", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.base.Model.save_checkpoint"], ["", "def", "train_epoch", "(", "self", ",", "opt", ")", ":", "\n", "# before train epoch", "\n", "        ", "self", ".", "graph", ".", "train", "(", ")", "\n", "# train epoch", "\n", "loader", "=", "tqdm", ".", "tqdm", "(", "self", ".", "train_loader", ",", "desc", "=", "\"training epoch {}\"", ".", "format", "(", "self", ".", "ep", "+", "1", ")", ",", "leave", "=", "False", ")", "\n", "for", "batch", "in", "loader", ":", "\n", "# train iteration", "\n", "            ", "var", "=", "edict", "(", "batch", ")", "\n", "var", "=", "util", ".", "move_to_device", "(", "var", ",", "opt", ".", "device", ")", "\n", "loss", "=", "self", ".", "train_iteration", "(", "opt", ",", "var", ",", "loader", ")", "\n", "# after train epoch", "\n", "", "lr", "=", "self", ".", "sched", ".", "get_last_lr", "(", ")", "[", "0", "]", "if", "opt", ".", "optim", ".", "sched", "else", "opt", ".", "optim", ".", "lr", "\n", "log", ".", "loss_train", "(", "opt", ",", "self", ".", "ep", "+", "1", ",", "lr", ",", "loss", ".", "all", ",", "self", ".", "timer", ")", "\n", "if", "opt", ".", "optim", ".", "sched", ":", "self", ".", "sched", ".", "step", "(", ")", "\n", "if", "(", "self", ".", "ep", "+", "1", ")", "%", "opt", ".", "freq", ".", "val", "==", "0", ":", "self", ".", "validate", "(", "opt", ",", "ep", "=", "self", ".", "ep", "+", "1", ")", "\n", "if", "(", "self", ".", "ep", "+", "1", ")", "%", "opt", ".", "freq", ".", "ckpt", "==", "0", ":", "self", ".", "save_checkpoint", "(", "opt", ",", "ep", "=", "self", ".", "ep", "+", "1", ",", "it", "=", "self", ".", "it", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.base.Model.train_iteration": [[111, 129], ["time.time", "base.Model.optim.zero_grad", "base.Model.graph.forward", "base.Model.graph.compute_loss", "base.Model.summarize_loss", "base.Model.all.backward", "base.Model.optim.step", "loader.set_postfix", "time.time", "util.update_timer", "base.Model.log_scalars", "base.Model.visualize", "len"], "methods", ["home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.nerf.NeRF.forward", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.nerf.Graph.compute_loss", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.base.Model.summarize_loss", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util.update_timer", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.nerf.Model.log_scalars", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.nerf.Model.visualize"], ["", "def", "train_iteration", "(", "self", ",", "opt", ",", "var", ",", "loader", ")", ":", "\n", "# before train iteration", "\n", "        ", "self", ".", "timer", ".", "it_start", "=", "time", ".", "time", "(", ")", "\n", "# train iteration", "\n", "self", ".", "optim", ".", "zero_grad", "(", ")", "\n", "var", "=", "self", ".", "graph", ".", "forward", "(", "opt", ",", "var", ",", "mode", "=", "\"train\"", ")", "\n", "loss", "=", "self", ".", "graph", ".", "compute_loss", "(", "opt", ",", "var", ",", "mode", "=", "\"train\"", ")", "\n", "loss", "=", "self", ".", "summarize_loss", "(", "opt", ",", "var", ",", "loss", ")", "\n", "loss", ".", "all", ".", "backward", "(", ")", "\n", "self", ".", "optim", ".", "step", "(", ")", "\n", "# after train iteration", "\n", "if", "(", "self", ".", "it", "+", "1", ")", "%", "opt", ".", "freq", ".", "scalar", "==", "0", ":", "self", ".", "log_scalars", "(", "opt", ",", "var", ",", "loss", ",", "step", "=", "self", ".", "it", "+", "1", ",", "split", "=", "\"train\"", ")", "\n", "if", "(", "self", ".", "it", "+", "1", ")", "%", "opt", ".", "freq", ".", "vis", "==", "0", ":", "self", ".", "visualize", "(", "opt", ",", "var", ",", "step", "=", "self", ".", "it", "+", "1", ",", "split", "=", "\"train\"", ")", "\n", "self", ".", "it", "+=", "1", "\n", "loader", ".", "set_postfix", "(", "it", "=", "self", ".", "it", ",", "loss", "=", "\"{:.3f}\"", ".", "format", "(", "loss", ".", "all", ")", ")", "\n", "self", ".", "timer", ".", "it_end", "=", "time", ".", "time", "(", ")", "\n", "util", ".", "update_timer", "(", "opt", ",", "self", ".", "timer", ",", "self", ".", "ep", ",", "len", "(", "loader", ")", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.base.Model.summarize_loss": [[130, 143], ["loss.update", "torch.isinf", "torch.isinf", "torch.isinf", "torch.isinf", "torch.isinf", "torch.isinf", "torch.isinf", "torch.isinf", "torch.isinf", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "float"], "methods", ["None"], ["", "def", "summarize_loss", "(", "self", ",", "opt", ",", "var", ",", "loss", ")", ":", "\n", "        ", "loss_all", "=", "0.", "\n", "assert", "(", "\"all\"", "not", "in", "loss", ")", "\n", "# weigh losses", "\n", "for", "key", "in", "loss", ":", "\n", "            ", "assert", "(", "key", "in", "opt", ".", "loss_weight", ")", "\n", "assert", "(", "loss", "[", "key", "]", ".", "shape", "==", "(", ")", ")", "\n", "if", "opt", ".", "loss_weight", "[", "key", "]", "is", "not", "None", ":", "\n", "                ", "assert", "not", "torch", ".", "isinf", "(", "loss", "[", "key", "]", ")", ",", "\"loss {} is Inf\"", ".", "format", "(", "key", ")", "\n", "assert", "not", "torch", ".", "isnan", "(", "loss", "[", "key", "]", ")", ",", "\"loss {} is NaN\"", ".", "format", "(", "key", ")", "\n", "loss_all", "+=", "10", "**", "float", "(", "opt", ".", "loss_weight", "[", "key", "]", ")", "*", "loss", "[", "key", "]", "\n", "", "", "loss", ".", "update", "(", "all", "=", "loss_all", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.base.Model.validate": [[144, 163], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "base.Model.graph.eval", "easydict.EasyDict", "tqdm.tqdm", "enumerate", "base.Model.log_scalars", "util.log.loss_val", "easydict.EasyDict", "util.move_to_device", "base.Model.graph.forward", "base.Model.graph.compute_loss", "base.Model.summarize_loss", "tqdm.tqdm.set_postfix", "len", "easydict.EasyDict.setdefault", "base.Model.visualize", "len"], "methods", ["home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.nerf.Model.log_scalars", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util.Log.loss_val", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util.move_to_device", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.nerf.NeRF.forward", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.nerf.Graph.compute_loss", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.base.Model.summarize_loss", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.nerf.Model.visualize"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "validate", "(", "self", ",", "opt", ",", "ep", "=", "None", ")", ":", "\n", "        ", "self", ".", "graph", ".", "eval", "(", ")", "\n", "loss_val", "=", "edict", "(", ")", "\n", "loader", "=", "tqdm", ".", "tqdm", "(", "self", ".", "test_loader", ",", "desc", "=", "\"validating\"", ",", "leave", "=", "False", ")", "\n", "for", "it", ",", "batch", "in", "enumerate", "(", "loader", ")", ":", "\n", "            ", "var", "=", "edict", "(", "batch", ")", "\n", "var", "=", "util", ".", "move_to_device", "(", "var", ",", "opt", ".", "device", ")", "\n", "var", "=", "self", ".", "graph", ".", "forward", "(", "opt", ",", "var", ",", "mode", "=", "\"val\"", ")", "\n", "loss", "=", "self", ".", "graph", ".", "compute_loss", "(", "opt", ",", "var", ",", "mode", "=", "\"val\"", ")", "\n", "loss", "=", "self", ".", "summarize_loss", "(", "opt", ",", "var", ",", "loss", ")", "\n", "for", "key", "in", "loss", ":", "\n", "                ", "loss_val", ".", "setdefault", "(", "key", ",", "0.", ")", "\n", "loss_val", "[", "key", "]", "+=", "loss", "[", "key", "]", "*", "len", "(", "var", ".", "idx", ")", "\n", "", "loader", ".", "set_postfix", "(", "loss", "=", "\"{:.3f}\"", ".", "format", "(", "loss", ".", "all", ")", ")", "\n", "if", "it", "==", "0", ":", "self", ".", "visualize", "(", "opt", ",", "var", ",", "step", "=", "ep", ",", "split", "=", "\"val\"", ")", "\n", "", "for", "key", "in", "loss_val", ":", "loss_val", "[", "key", "]", "/=", "len", "(", "self", ".", "test_data", ")", "\n", "self", ".", "log_scalars", "(", "opt", ",", "var", ",", "loss_val", ",", "step", "=", "ep", ",", "split", "=", "\"val\"", ")", "\n", "log", ".", "loss_val", "(", "opt", ",", "loss_val", ".", "all", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.base.Model.log_scalars": [[164, 173], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "loss.items", "metric.items", "base.Model.tb.add_scalar", "base.Model.tb.add_scalar"], "methods", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "log_scalars", "(", "self", ",", "opt", ",", "var", ",", "loss", ",", "metric", "=", "None", ",", "step", "=", "0", ",", "split", "=", "\"train\"", ")", ":", "\n", "        ", "for", "key", ",", "value", "in", "loss", ".", "items", "(", ")", ":", "\n", "            ", "if", "key", "==", "\"all\"", ":", "continue", "\n", "if", "opt", ".", "loss_weight", "[", "key", "]", "is", "not", "None", ":", "\n", "                ", "self", ".", "tb", ".", "add_scalar", "(", "\"{0}/loss_{1}\"", ".", "format", "(", "split", ",", "key", ")", ",", "value", ",", "step", ")", "\n", "", "", "if", "metric", "is", "not", "None", ":", "\n", "            ", "for", "key", ",", "value", "in", "metric", ".", "items", "(", ")", ":", "\n", "                ", "self", ".", "tb", ".", "add_scalar", "(", "\"{0}/{1}\"", ".", "format", "(", "split", ",", "key", ")", ",", "value", ",", "step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.base.Model.visualize": [[174, 177], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad"], "methods", ["None"], ["", "", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "visualize", "(", "self", ",", "opt", ",", "var", ",", "step", "=", "0", ",", "split", "=", "\"train\"", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.base.Model.save_checkpoint": [[178, 182], ["util.save_checkpoint", "util.log.info"], "methods", ["home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.base.Model.save_checkpoint", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util.Log.info"], ["", "def", "save_checkpoint", "(", "self", ",", "opt", ",", "ep", "=", "0", ",", "it", "=", "0", ",", "latest", "=", "False", ")", ":", "\n", "        ", "util", ".", "save_checkpoint", "(", "opt", ",", "self", ",", "ep", "=", "ep", ",", "it", "=", "it", ",", "latest", "=", "latest", ")", "\n", "if", "not", "latest", ":", "\n", "            ", "log", ".", "info", "(", "\"checkpoint saved: ({0}) {1}, epoch {2} (iteration {3})\"", ".", "format", "(", "opt", ".", "group", ",", "opt", ".", "name", ",", "ep", ",", "it", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.base.Graph.__init__": [[187, 189], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.data.blender.Dataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.base.Graph.forward": [[190, 193], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "opt", ",", "var", ",", "mode", "=", "None", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "return", "var", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.base.Graph.compute_loss": [[194, 198], ["easydict.EasyDict"], "methods", ["None"], ["", "def", "compute_loss", "(", "self", ",", "opt", ",", "var", ",", "mode", "=", "None", ")", ":", "\n", "        ", "loss", "=", "edict", "(", ")", "\n", "raise", "NotImplementedError", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.base.Graph.L1_loss": [[199, 202], ["loss.mean", "pred.contiguous"], "methods", ["None"], ["", "def", "L1_loss", "(", "self", ",", "pred", ",", "label", "=", "0", ")", ":", "\n", "        ", "loss", "=", "(", "pred", ".", "contiguous", "(", ")", "-", "label", ")", ".", "abs", "(", ")", "\n", "return", "loss", ".", "mean", "(", ")", "\n", "", "def", "MSE_loss", "(", "self", ",", "pred", ",", "label", "=", "0", ")", ":", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.base.Graph.MSE_loss": [[202, 205], ["loss.mean", "pred.contiguous"], "methods", ["None"], ["", "def", "MSE_loss", "(", "self", ",", "pred", ",", "label", "=", "0", ")", ":", "\n", "        ", "loss", "=", "(", "pred", ".", "contiguous", "(", ")", "-", "label", ")", "**", "2", "\n", "return", "loss", ".", "mean", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.barf.Model.__init__": [[21, 23], ["nerf.Model.__init__"], "methods", ["home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.data.blender.Dataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "opt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.barf.Model.build_networks": [[24, 32], ["super().build_networks", "torch.nn.Embedding().to", "torch.nn.Embedding().to", "torch.nn.Embedding().to", "torch.nn.Embedding().to", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "camera.lie.se3_to_SE3", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "len", "len"], "methods", ["home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.barf.Model.build_networks", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.camera.Lie.se3_to_SE3"], ["", "def", "build_networks", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", ")", ".", "build_networks", "(", "opt", ")", "\n", "if", "opt", ".", "camera", ".", "noise", ":", "\n", "# pre-generate synthetic pose perturbation", "\n", "            ", "se3_noise", "=", "torch", ".", "randn", "(", "len", "(", "self", ".", "train_data", ")", ",", "6", ",", "device", "=", "opt", ".", "device", ")", "*", "opt", ".", "camera", ".", "noise", "\n", "self", ".", "graph", ".", "pose_noise", "=", "camera", ".", "lie", ".", "se3_to_SE3", "(", "se3_noise", ")", "\n", "", "self", ".", "graph", ".", "se3_refine", "=", "torch", ".", "nn", ".", "Embedding", "(", "len", "(", "self", ".", "train_data", ")", ",", "6", ")", ".", "to", "(", "opt", ".", "device", ")", "\n", "torch", ".", "nn", ".", "init", ".", "zeros_", "(", "self", ".", "graph", ".", "se3_refine", ".", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.barf.Model.setup_optimizer": [[33, 45], ["super().setup_optimizer", "getattr", "getattr.", "getattr", "getattr.", "dict", "opt.optim.sched_pose.items", "barf.Model.graph.se3_refine.parameters"], "methods", ["home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.nerf.Model.setup_optimizer"], ["", "def", "setup_optimizer", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", ")", ".", "setup_optimizer", "(", "opt", ")", "\n", "optimizer", "=", "getattr", "(", "torch", ".", "optim", ",", "opt", ".", "optim", ".", "algo", ")", "\n", "self", ".", "optim_pose", "=", "optimizer", "(", "[", "dict", "(", "params", "=", "self", ".", "graph", ".", "se3_refine", ".", "parameters", "(", ")", ",", "lr", "=", "opt", ".", "optim", ".", "lr_pose", ")", "]", ")", "\n", "# set up scheduler", "\n", "if", "opt", ".", "optim", ".", "sched_pose", ":", "\n", "            ", "scheduler", "=", "getattr", "(", "torch", ".", "optim", ".", "lr_scheduler", ",", "opt", ".", "optim", ".", "sched_pose", ".", "type", ")", "\n", "if", "opt", ".", "optim", ".", "lr_pose_end", ":", "\n", "                ", "assert", "(", "opt", ".", "optim", ".", "sched_pose", ".", "type", "==", "\"ExponentialLR\"", ")", "\n", "opt", ".", "optim", ".", "sched_pose", ".", "gamma", "=", "(", "opt", ".", "optim", ".", "lr_pose_end", "/", "opt", ".", "optim", ".", "lr_pose", ")", "**", "(", "1.", "/", "opt", ".", "max_iter", ")", "\n", "", "kwargs", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "opt", ".", "optim", ".", "sched_pose", ".", "items", "(", ")", "if", "k", "!=", "\"type\"", "}", "\n", "self", ".", "sched_pose", "=", "scheduler", "(", "self", ".", "optim_pose", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.barf.Model.train_iteration": [[46, 61], ["barf.Model.optim_pose.zero_grad", "super().train_iteration", "barf.Model.optim_pose.step", "barf.Model.graph.nerf.progress.data.fill_", "min", "barf.Model.sched_pose.step", "barf.Model.graph.nerf_fine.progress.data.fill_"], "methods", ["home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.barf.Model.train_iteration"], ["", "", "def", "train_iteration", "(", "self", ",", "opt", ",", "var", ",", "loader", ")", ":", "\n", "        ", "self", ".", "optim_pose", ".", "zero_grad", "(", ")", "\n", "if", "opt", ".", "optim", ".", "warmup_pose", ":", "\n", "# simple linear warmup of pose learning rate", "\n", "            ", "self", ".", "optim_pose", ".", "param_groups", "[", "0", "]", "[", "\"lr_orig\"", "]", "=", "self", ".", "optim_pose", ".", "param_groups", "[", "0", "]", "[", "\"lr\"", "]", "# cache the original learning rate", "\n", "self", ".", "optim_pose", ".", "param_groups", "[", "0", "]", "[", "\"lr\"", "]", "*=", "min", "(", "1", ",", "self", ".", "it", "/", "opt", ".", "optim", ".", "warmup_pose", ")", "\n", "", "loss", "=", "super", "(", ")", ".", "train_iteration", "(", "opt", ",", "var", ",", "loader", ")", "\n", "self", ".", "optim_pose", ".", "step", "(", ")", "\n", "if", "opt", ".", "optim", ".", "warmup_pose", ":", "\n", "            ", "self", ".", "optim_pose", ".", "param_groups", "[", "0", "]", "[", "\"lr\"", "]", "=", "self", ".", "optim_pose", ".", "param_groups", "[", "0", "]", "[", "\"lr_orig\"", "]", "# reset learning rate", "\n", "", "if", "opt", ".", "optim", ".", "sched_pose", ":", "self", ".", "sched_pose", ".", "step", "(", ")", "\n", "self", ".", "graph", ".", "nerf", ".", "progress", ".", "data", ".", "fill_", "(", "self", ".", "it", "/", "opt", ".", "max_iter", ")", "\n", "if", "opt", ".", "nerf", ".", "fine_sampling", ":", "\n", "            ", "self", ".", "graph", ".", "nerf_fine", ".", "progress", ".", "data", ".", "fill_", "(", "self", ".", "it", "/", "opt", ".", "max_iter", ")", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.barf.Model.validate": [[62, 67], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "barf.Model.get_all_training_poses", "barf.Model.prealign_cameras", "super().validate"], "methods", ["home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.nerf.Model.get_all_training_poses", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.barf.Model.prealign_cameras", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.barf.Model.validate"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "validate", "(", "self", ",", "opt", ",", "ep", "=", "None", ")", ":", "\n", "        ", "pose", ",", "pose_GT", "=", "self", ".", "get_all_training_poses", "(", "opt", ")", "\n", "_", ",", "self", ".", "graph", ".", "sim3", "=", "self", ".", "prealign_cameras", "(", "opt", ",", "pose", ",", "pose_GT", ")", "\n", "super", "(", ")", ".", "validate", "(", "opt", ",", "ep", "=", "ep", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.barf.Model.log_scalars": [[68, 82], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "super().log_scalars", "barf.Model.tb.add_scalar", "barf.Model.get_all_training_poses", "barf.Model.prealign_cameras", "barf.Model.evaluate_camera_alignment", "barf.Model.tb.add_scalar", "barf.Model.tb.add_scalar", "barf.Model.R.mean", "barf.Model.t.mean"], "methods", ["home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.nerf.Model.log_scalars", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.nerf.Model.get_all_training_poses", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.barf.Model.prealign_cameras", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.barf.Model.evaluate_camera_alignment"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "log_scalars", "(", "self", ",", "opt", ",", "var", ",", "loss", ",", "metric", "=", "None", ",", "step", "=", "0", ",", "split", "=", "\"train\"", ")", ":", "\n", "        ", "super", "(", ")", ".", "log_scalars", "(", "opt", ",", "var", ",", "loss", ",", "metric", "=", "metric", ",", "step", "=", "step", ",", "split", "=", "split", ")", "\n", "if", "split", "==", "\"train\"", ":", "\n", "# log learning rate", "\n", "            ", "lr", "=", "self", ".", "optim_pose", ".", "param_groups", "[", "0", "]", "[", "\"lr\"", "]", "\n", "self", ".", "tb", ".", "add_scalar", "(", "\"{0}/{1}\"", ".", "format", "(", "split", ",", "\"lr_pose\"", ")", ",", "lr", ",", "step", ")", "\n", "# compute pose error", "\n", "", "if", "split", "==", "\"train\"", "and", "opt", ".", "data", ".", "dataset", "in", "[", "\"blender\"", ",", "\"llff\"", "]", ":", "\n", "            ", "pose", ",", "pose_GT", "=", "self", ".", "get_all_training_poses", "(", "opt", ")", "\n", "pose_aligned", ",", "_", "=", "self", ".", "prealign_cameras", "(", "opt", ",", "pose", ",", "pose_GT", ")", "\n", "error", "=", "self", ".", "evaluate_camera_alignment", "(", "opt", ",", "pose_aligned", ",", "pose_GT", ")", "\n", "self", ".", "tb", ".", "add_scalar", "(", "\"{0}/error_R\"", ".", "format", "(", "split", ")", ",", "error", ".", "R", ".", "mean", "(", ")", ",", "step", ")", "\n", "self", ".", "tb", ".", "add_scalar", "(", "\"{0}/error_t\"", ".", "format", "(", "split", ")", ",", "error", ".", "t", ".", "mean", "(", ")", ",", "step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.barf.Model.visualize": [[83, 90], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "super().visualize", "barf.Model.get_all_training_poses", "util_vis.vis_cameras"], "methods", ["home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.nerf.Model.visualize", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.nerf.Model.get_all_training_poses", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util_vis.vis_cameras"], ["", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "visualize", "(", "self", ",", "opt", ",", "var", ",", "step", "=", "0", ",", "split", "=", "\"train\"", ")", ":", "\n", "        ", "super", "(", ")", ".", "visualize", "(", "opt", ",", "var", ",", "step", "=", "step", ",", "split", "=", "split", ")", "\n", "if", "opt", ".", "visdom", ":", "\n", "            ", "if", "split", "==", "\"val\"", ":", "\n", "                ", "pose", ",", "pose_GT", "=", "self", ".", "get_all_training_poses", "(", "opt", ")", "\n", "util_vis", ".", "vis_cameras", "(", "opt", ",", "self", ".", "vis", ",", "step", "=", "step", ",", "poses", "=", "[", "pose", ",", "pose_GT", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.barf.Model.get_all_training_poses": [[91, 105], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "barf.Model.train_data.get_all_camera_poses().to", "camera.lie.se3_to_SE3", "camera.pose.compose", "barf.Model.train_data.get_all_camera_poses", "camera.pose.compose"], "methods", ["home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.camera.Lie.se3_to_SE3", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.camera.Pose.compose", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.data.blender.Dataset.get_all_camera_poses", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.camera.Pose.compose"], ["", "", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "get_all_training_poses", "(", "self", ",", "opt", ")", ":", "\n", "# get ground-truth (canonical) camera poses", "\n", "        ", "pose_GT", "=", "self", ".", "train_data", ".", "get_all_camera_poses", "(", "opt", ")", ".", "to", "(", "opt", ".", "device", ")", "\n", "# add synthetic pose perturbation to all training data", "\n", "if", "opt", ".", "data", ".", "dataset", "==", "\"blender\"", ":", "\n", "            ", "pose", "=", "pose_GT", "\n", "if", "opt", ".", "camera", ".", "noise", ":", "\n", "                ", "pose", "=", "camera", ".", "pose", ".", "compose", "(", "[", "self", ".", "graph", ".", "pose_noise", ",", "pose", "]", ")", "\n", "", "", "else", ":", "pose", "=", "self", ".", "graph", ".", "pose_eye", "\n", "# add learned pose correction to all training data", "\n", "pose_refine", "=", "camera", ".", "lie", ".", "se3_to_SE3", "(", "self", ".", "graph", ".", "se3_refine", ".", "weight", ")", "\n", "pose", "=", "camera", ".", "pose", ".", "compose", "(", "[", "pose_refine", ",", "pose", "]", ")", "\n", "return", "pose", ",", "pose_GT", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.barf.Model.prealign_cameras": [[106, 123], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "camera.pose", "camera.cam2world", "camera.cam2world", "camera.procrustes_analysis", "easydict.EasyDict.R.t", "print", "easydict.EasyDict", "easydict.EasyDict.R.t", "torch.eye", "torch.eye", "torch.eye", "torch.eye"], "methods", ["home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.camera.cam2world", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.camera.cam2world", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.camera.procrustes_analysis"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "prealign_cameras", "(", "self", ",", "opt", ",", "pose", ",", "pose_GT", ")", ":", "\n", "# compute 3D similarity transform via Procrustes analysis", "\n", "        ", "center", "=", "torch", ".", "zeros", "(", "1", ",", "1", ",", "3", ",", "device", "=", "opt", ".", "device", ")", "\n", "center_pred", "=", "camera", ".", "cam2world", "(", "center", ",", "pose", ")", "[", ":", ",", "0", "]", "# [N,3]", "\n", "center_GT", "=", "camera", ".", "cam2world", "(", "center", ",", "pose_GT", ")", "[", ":", ",", "0", "]", "# [N,3]", "\n", "try", ":", "\n", "            ", "sim3", "=", "camera", ".", "procrustes_analysis", "(", "center_GT", ",", "center_pred", ")", "\n", "", "except", ":", "\n", "            ", "print", "(", "\"warning: SVD did not converge...\"", ")", "\n", "sim3", "=", "edict", "(", "t0", "=", "0", ",", "t1", "=", "0", ",", "s0", "=", "1", ",", "s1", "=", "1", ",", "R", "=", "torch", ".", "eye", "(", "3", ",", "device", "=", "opt", ".", "device", ")", ")", "\n", "# align the camera poses", "\n", "", "center_aligned", "=", "(", "center_pred", "-", "sim3", ".", "t1", ")", "/", "sim3", ".", "s1", "@", "sim3", ".", "R", ".", "t", "(", ")", "*", "sim3", ".", "s0", "+", "sim3", ".", "t0", "\n", "R_aligned", "=", "pose", "[", "...", ",", ":", "3", "]", "@", "sim3", ".", "R", ".", "t", "(", ")", "\n", "t_aligned", "=", "(", "-", "R_aligned", "@", "center_aligned", "[", "...", ",", "None", "]", ")", "[", "...", ",", "0", "]", "\n", "pose_aligned", "=", "camera", ".", "pose", "(", "R", "=", "R_aligned", ",", "t", "=", "t_aligned", ")", "\n", "return", "pose_aligned", ",", "sim3", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.barf.Model.evaluate_camera_alignment": [[124, 133], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "pose_aligned.split", "pose_GT.split", "camera.rotation_distance", "[].norm", "easydict.EasyDict"], "methods", ["home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.camera.rotation_distance"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "evaluate_camera_alignment", "(", "self", ",", "opt", ",", "pose_aligned", ",", "pose_GT", ")", ":", "\n", "# measure errors in rotation and translation", "\n", "        ", "R_aligned", ",", "t_aligned", "=", "pose_aligned", ".", "split", "(", "[", "3", ",", "1", "]", ",", "dim", "=", "-", "1", ")", "\n", "R_GT", ",", "t_GT", "=", "pose_GT", ".", "split", "(", "[", "3", ",", "1", "]", ",", "dim", "=", "-", "1", ")", "\n", "R_error", "=", "camera", ".", "rotation_distance", "(", "R_aligned", ",", "R_GT", ")", "\n", "t_error", "=", "(", "t_aligned", "-", "t_GT", ")", "[", "...", ",", "0", "]", ".", "norm", "(", "dim", "=", "-", "1", ")", "\n", "error", "=", "edict", "(", "R", "=", "R_error", ",", "t", "=", "t_error", ")", "\n", "return", "error", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.barf.Model.evaluate_full": [[134, 152], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "barf.Model.graph.eval", "barf.Model.get_all_training_poses", "barf.Model.prealign_cameras", "barf.Model.evaluate_camera_alignment", "print", "print", "print", "print", "super().evaluate_full", "open", "enumerate", "numpy.rad2deg", "barf.Model.t.mean", "zip", "file.write", "barf.Model.R.mean().cpu", "err_R.item", "err_t.item", "barf.Model.R.mean"], "methods", ["home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.nerf.Model.get_all_training_poses", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.barf.Model.prealign_cameras", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.barf.Model.evaluate_camera_alignment", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.nerf.Model.evaluate_full"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "evaluate_full", "(", "self", ",", "opt", ")", ":", "\n", "        ", "self", ".", "graph", ".", "eval", "(", ")", "\n", "# evaluate rotation/translation", "\n", "pose", ",", "pose_GT", "=", "self", ".", "get_all_training_poses", "(", "opt", ")", "\n", "pose_aligned", ",", "self", ".", "graph", ".", "sim3", "=", "self", ".", "prealign_cameras", "(", "opt", ",", "pose", ",", "pose_GT", ")", "\n", "error", "=", "self", ".", "evaluate_camera_alignment", "(", "opt", ",", "pose_aligned", ",", "pose_GT", ")", "\n", "print", "(", "\"--------------------------\"", ")", "\n", "print", "(", "\"rot:   {:8.3f}\"", ".", "format", "(", "np", ".", "rad2deg", "(", "error", ".", "R", ".", "mean", "(", ")", ".", "cpu", "(", ")", ")", ")", ")", "\n", "print", "(", "\"trans: {:10.5f}\"", ".", "format", "(", "error", ".", "t", ".", "mean", "(", ")", ")", ")", "\n", "print", "(", "\"--------------------------\"", ")", "\n", "# dump numbers", "\n", "quant_fname", "=", "\"{}/quant_pose.txt\"", ".", "format", "(", "opt", ".", "output_path", ")", "\n", "with", "open", "(", "quant_fname", ",", "\"w\"", ")", "as", "file", ":", "\n", "            ", "for", "i", ",", "(", "err_R", ",", "err_t", ")", "in", "enumerate", "(", "zip", "(", "error", ".", "R", ",", "error", ".", "t", ")", ")", ":", "\n", "                ", "file", ".", "write", "(", "\"{} {} {}\\n\"", ".", "format", "(", "i", ",", "err_R", ".", "item", "(", ")", ",", "err_t", ".", "item", "(", ")", ")", ")", "\n", "# evaluate novel view synthesis", "\n", "", "", "super", "(", ")", ".", "evaluate_full", "(", "opt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.barf.Model.evaluate_test_time_photometric_optim": [[153, 170], ["torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "getattr", "getattr.", "tqdm.trange", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "getattr.zero_grad", "camera.lie.se3_to_SE3", "barf.Model.graph.forward", "barf.Model.graph.compute_loss", "barf.Model.summarize_loss", "barf.Model.all.backward", "getattr.step", "tqdm.trange.set_postfix", "dict"], "methods", ["home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.camera.Lie.se3_to_SE3", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.nerf.NeRF.forward", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.nerf.Graph.compute_loss", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.base.Model.summarize_loss"], ["", "@", "torch", ".", "enable_grad", "(", ")", "\n", "def", "evaluate_test_time_photometric_optim", "(", "self", ",", "opt", ",", "var", ")", ":", "\n", "# use another se3 Parameter to absorb the remaining pose errors", "\n", "        ", "var", ".", "se3_refine_test", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "6", ",", "device", "=", "opt", ".", "device", ")", ")", "\n", "optimizer", "=", "getattr", "(", "torch", ".", "optim", ",", "opt", ".", "optim", ".", "algo", ")", "\n", "optim_pose", "=", "optimizer", "(", "[", "dict", "(", "params", "=", "[", "var", ".", "se3_refine_test", "]", ",", "lr", "=", "opt", ".", "optim", ".", "lr_pose", ")", "]", ")", "\n", "iterator", "=", "tqdm", ".", "trange", "(", "opt", ".", "optim", ".", "test_iter", ",", "desc", "=", "\"test-time optim.\"", ",", "leave", "=", "False", ",", "position", "=", "1", ")", "\n", "for", "it", "in", "iterator", ":", "\n", "            ", "optim_pose", ".", "zero_grad", "(", ")", "\n", "var", ".", "pose_refine_test", "=", "camera", ".", "lie", ".", "se3_to_SE3", "(", "var", ".", "se3_refine_test", ")", "\n", "var", "=", "self", ".", "graph", ".", "forward", "(", "opt", ",", "var", ",", "mode", "=", "\"test-optim\"", ")", "\n", "loss", "=", "self", ".", "graph", ".", "compute_loss", "(", "opt", ",", "var", ",", "mode", "=", "\"test-optim\"", ")", "\n", "loss", "=", "self", ".", "summarize_loss", "(", "opt", ",", "var", ",", "loss", ")", "\n", "loss", ".", "all", ".", "backward", "(", ")", "\n", "optim_pose", ".", "step", "(", ")", "\n", "iterator", ".", "set_postfix", "(", "loss", "=", "\"{:.3f}\"", ".", "format", "(", "loss", ".", "all", ")", ")", "\n", "", "return", "var", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.barf.Model.generate_videos_pose": [[171, 205], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "barf.Model.graph.eval", "matplotlib.figure", "os.makedirs", "range", "matplotlib.close", "print", "os.system", "os.remove", "barf.Model.get_all_training_poses", "ep_list.append", "open", "barf.Model.prealign_cameras", "pose.detach().cpu.detach().cpu.detach().cpu", "util_vis.plot_save_poses", "file.write", "util.restore_checkpoint", "pose_aligned.detach().cpu", "pose_ref.detach().cpu", "dict", "pose.detach().cpu.detach().cpu.detach", "pose_aligned.detach", "pose_ref.detach"], "methods", ["home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.nerf.Model.get_all_training_poses", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.barf.Model.prealign_cameras", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util_vis.plot_save_poses", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.base.Model.restore_checkpoint"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "generate_videos_pose", "(", "self", ",", "opt", ")", ":", "\n", "        ", "self", ".", "graph", ".", "eval", "(", ")", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "10", ",", "10", ")", "if", "opt", ".", "data", ".", "dataset", "==", "\"blender\"", "else", "(", "16", ",", "8", ")", ")", "\n", "cam_path", "=", "\"{}/poses\"", ".", "format", "(", "opt", ".", "output_path", ")", "\n", "os", ".", "makedirs", "(", "cam_path", ",", "exist_ok", "=", "True", ")", "\n", "ep_list", "=", "[", "]", "\n", "for", "ep", "in", "range", "(", "0", ",", "opt", ".", "max_iter", "+", "1", ",", "opt", ".", "freq", ".", "ckpt", ")", ":", "\n", "# load checkpoint (0 is random init)", "\n", "            ", "if", "ep", "!=", "0", ":", "\n", "                ", "try", ":", "util", ".", "restore_checkpoint", "(", "opt", ",", "self", ",", "resume", "=", "ep", ")", "\n", "except", ":", "continue", "\n", "# get the camera poses", "\n", "", "pose", ",", "pose_ref", "=", "self", ".", "get_all_training_poses", "(", "opt", ")", "\n", "if", "opt", ".", "data", ".", "dataset", "in", "[", "\"blender\"", ",", "\"llff\"", "]", ":", "\n", "                ", "pose_aligned", ",", "_", "=", "self", ".", "prealign_cameras", "(", "opt", ",", "pose", ",", "pose_ref", ")", "\n", "pose_aligned", ",", "pose_ref", "=", "pose_aligned", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "pose_ref", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "dict", "(", "\n", "blender", "=", "util_vis", ".", "plot_save_poses_blender", ",", "\n", "llff", "=", "util_vis", ".", "plot_save_poses", ",", "\n", ")", "[", "opt", ".", "data", ".", "dataset", "]", "(", "opt", ",", "fig", ",", "pose_aligned", ",", "pose_ref", "=", "pose_ref", ",", "path", "=", "cam_path", ",", "ep", "=", "ep", ")", "\n", "", "else", ":", "\n", "                ", "pose", "=", "pose", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "util_vis", ".", "plot_save_poses", "(", "opt", ",", "fig", ",", "pose", ",", "pose_ref", "=", "None", ",", "path", "=", "cam_path", ",", "ep", "=", "ep", ")", "\n", "", "ep_list", ".", "append", "(", "ep", ")", "\n", "", "plt", ".", "close", "(", ")", "\n", "# write videos", "\n", "print", "(", "\"writing videos...\"", ")", "\n", "list_fname", "=", "\"{}/temp.list\"", ".", "format", "(", "cam_path", ")", "\n", "with", "open", "(", "list_fname", ",", "\"w\"", ")", "as", "file", ":", "\n", "            ", "for", "ep", "in", "ep_list", ":", "file", ".", "write", "(", "\"file {}.png\\n\"", ".", "format", "(", "ep", ")", ")", "\n", "", "cam_vid_fname", "=", "\"{}/poses.mp4\"", ".", "format", "(", "opt", ".", "output_path", ")", "\n", "os", ".", "system", "(", "\"ffmpeg -y -r 30 -f concat -i {0} -pix_fmt yuv420p {1} >/dev/null 2>&1\"", ".", "format", "(", "list_fname", ",", "cam_vid_fname", ")", ")", "\n", "os", ".", "remove", "(", "list_fname", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.barf.Graph.__init__": [[210, 216], ["nerf.Graph.__init__", "barf.NeRF", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "barf.NeRF", "torch.eye", "torch.eye", "torch.eye", "torch.eye"], "methods", ["home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.data.blender.Dataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "opt", ")", "\n", "self", ".", "nerf", "=", "NeRF", "(", "opt", ")", "\n", "if", "opt", ".", "nerf", ".", "fine_sampling", ":", "\n", "            ", "self", ".", "nerf_fine", "=", "NeRF", "(", "opt", ")", "\n", "", "self", ".", "pose_eye", "=", "torch", ".", "eye", "(", "3", ",", "4", ")", ".", "to", "(", "opt", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.barf.Graph.get_pose": [[217, 244], ["camera.lie.se3_to_SE3", "camera.pose.compose", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "camera.pose", "camera.pose.compose", "camera.cam2world", "camera.pose.compose"], "methods", ["home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.camera.Lie.se3_to_SE3", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.camera.Pose.compose", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.camera.Pose.compose", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.camera.cam2world", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.camera.Pose.compose"], ["", "def", "get_pose", "(", "self", ",", "opt", ",", "var", ",", "mode", "=", "None", ")", ":", "\n", "        ", "if", "mode", "==", "\"train\"", ":", "\n", "# add the pre-generated pose perturbations", "\n", "            ", "if", "opt", ".", "data", ".", "dataset", "==", "\"blender\"", ":", "\n", "                ", "if", "opt", ".", "camera", ".", "noise", ":", "\n", "                    ", "var", ".", "pose_noise", "=", "self", ".", "pose_noise", "[", "var", ".", "idx", "]", "\n", "pose", "=", "camera", ".", "pose", ".", "compose", "(", "[", "var", ".", "pose_noise", ",", "var", ".", "pose", "]", ")", "\n", "", "else", ":", "pose", "=", "var", ".", "pose", "\n", "", "else", ":", "pose", "=", "self", ".", "pose_eye", "\n", "# add learnable pose correction", "\n", "var", ".", "se3_refine", "=", "self", ".", "se3_refine", ".", "weight", "[", "var", ".", "idx", "]", "\n", "pose_refine", "=", "camera", ".", "lie", ".", "se3_to_SE3", "(", "var", ".", "se3_refine", ")", "\n", "pose", "=", "camera", ".", "pose", ".", "compose", "(", "[", "pose_refine", ",", "pose", "]", ")", "\n", "", "elif", "mode", "in", "[", "\"val\"", ",", "\"eval\"", ",", "\"test-optim\"", "]", ":", "\n", "# align test pose to refined coordinate system (up to sim3)", "\n", "            ", "sim3", "=", "self", ".", "sim3", "\n", "center", "=", "torch", ".", "zeros", "(", "1", ",", "1", ",", "3", ",", "device", "=", "opt", ".", "device", ")", "\n", "center", "=", "camera", ".", "cam2world", "(", "center", ",", "var", ".", "pose", ")", "[", ":", ",", "0", "]", "# [N,3]", "\n", "center_aligned", "=", "(", "center", "-", "sim3", ".", "t0", ")", "/", "sim3", ".", "s0", "@", "sim3", ".", "R", "*", "sim3", ".", "s1", "+", "sim3", ".", "t1", "\n", "R_aligned", "=", "var", ".", "pose", "[", "...", ",", ":", "3", "]", "@", "self", ".", "sim3", ".", "R", "\n", "t_aligned", "=", "(", "-", "R_aligned", "@", "center_aligned", "[", "...", ",", "None", "]", ")", "[", "...", ",", "0", "]", "\n", "pose", "=", "camera", ".", "pose", "(", "R", "=", "R_aligned", ",", "t", "=", "t_aligned", ")", "\n", "# additionally factorize the remaining pose imperfection", "\n", "if", "opt", ".", "optim", ".", "test_photo", "and", "mode", "!=", "\"val\"", ":", "\n", "                ", "pose", "=", "camera", ".", "pose", ".", "compose", "(", "[", "var", ".", "pose_refine_test", ",", "pose", "]", ")", "\n", "", "", "else", ":", "pose", "=", "var", ".", "pose", "\n", "return", "pose", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.barf.NeRF.__init__": [[247, 250], ["nerf.NeRF.__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.data.blender.Dataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "opt", ")", "\n", "self", ".", "progress", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "tensor", "(", "0.", ")", ")", "# use Parameter so it could be checkpointed", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.barf.NeRF.positional_encoding": [[251, 264], ["super().positional_encoding", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "super().positional_encoding.view"], "methods", ["home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.nerf.NeRF.positional_encoding"], ["", "def", "positional_encoding", "(", "self", ",", "opt", ",", "input", ",", "L", ")", ":", "# [B,...,N]", "\n", "        ", "input_enc", "=", "super", "(", ")", ".", "positional_encoding", "(", "opt", ",", "input", ",", "L", "=", "L", ")", "# [B,...,2NL]", "\n", "# coarse-to-fine: smoothly mask positional encoding for BARF", "\n", "if", "opt", ".", "barf_c2f", "is", "not", "None", ":", "\n", "# set weights for different frequency bands", "\n", "            ", "start", ",", "end", "=", "opt", ".", "barf_c2f", "\n", "alpha", "=", "(", "self", ".", "progress", ".", "data", "-", "start", ")", "/", "(", "end", "-", "start", ")", "*", "L", "\n", "k", "=", "torch", ".", "arange", "(", "L", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "opt", ".", "device", ")", "\n", "weight", "=", "(", "1", "-", "(", "alpha", "-", "k", ")", ".", "clamp_", "(", "min", "=", "0", ",", "max", "=", "1", ")", ".", "mul_", "(", "np", ".", "pi", ")", ".", "cos_", "(", ")", ")", "/", "2", "\n", "# apply weights", "\n", "shape", "=", "input_enc", ".", "shape", "\n", "input_enc", "=", "(", "input_enc", ".", "view", "(", "-", "1", ",", "L", ")", "*", "weight", ")", ".", "view", "(", "*", "shape", ")", "\n", "", "return", "input_enc", "\n", "", "", ""]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.nerf.Model.__init__": [[22, 25], ["base.Model.__init__", "lpips.LPIPS().to", "lpips.LPIPS"], "methods", ["home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.data.blender.Dataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "opt", ")", "\n", "self", ".", "lpips_loss", "=", "lpips", ".", "LPIPS", "(", "net", "=", "\"alex\"", ")", ".", "to", "(", "opt", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.nerf.Model.load_dataset": [[26, 31], ["super().load_dataset", "nerf.Model.train_data.prefetch_all_data", "easydict.EasyDict", "util.move_to_device"], "methods", ["home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.nerf.Model.load_dataset", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.data.blender.Dataset.prefetch_all_data", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util.move_to_device"], ["", "def", "load_dataset", "(", "self", ",", "opt", ",", "eval_split", "=", "\"val\"", ")", ":", "\n", "        ", "super", "(", ")", ".", "load_dataset", "(", "opt", ",", "eval_split", "=", "eval_split", ")", "\n", "# prefetch all training data", "\n", "self", ".", "train_data", ".", "prefetch_all_data", "(", "opt", ")", "\n", "self", ".", "train_data", ".", "all", "=", "edict", "(", "util", ".", "move_to_device", "(", "self", ".", "train_data", ".", "all", ",", "opt", ".", "device", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.nerf.Model.setup_optimizer": [[32, 46], ["util.log.info", "getattr", "getattr.", "nerf.Model.optim.add_param_group", "getattr", "getattr.", "dict", "dict", "opt.optim.sched.items", "nerf.Model.graph.nerf.parameters", "nerf.Model.graph.nerf_fine.parameters"], "methods", ["home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util.Log.info"], ["", "def", "setup_optimizer", "(", "self", ",", "opt", ")", ":", "\n", "        ", "log", ".", "info", "(", "\"setting up optimizers...\"", ")", "\n", "optimizer", "=", "getattr", "(", "torch", ".", "optim", ",", "opt", ".", "optim", ".", "algo", ")", "\n", "self", ".", "optim", "=", "optimizer", "(", "[", "dict", "(", "params", "=", "self", ".", "graph", ".", "nerf", ".", "parameters", "(", ")", ",", "lr", "=", "opt", ".", "optim", ".", "lr", ")", "]", ")", "\n", "if", "opt", ".", "nerf", ".", "fine_sampling", ":", "\n", "            ", "self", ".", "optim", ".", "add_param_group", "(", "dict", "(", "params", "=", "self", ".", "graph", ".", "nerf_fine", ".", "parameters", "(", ")", ",", "lr", "=", "opt", ".", "optim", ".", "lr", ")", ")", "\n", "# set up scheduler", "\n", "", "if", "opt", ".", "optim", ".", "sched", ":", "\n", "            ", "scheduler", "=", "getattr", "(", "torch", ".", "optim", ".", "lr_scheduler", ",", "opt", ".", "optim", ".", "sched", ".", "type", ")", "\n", "if", "opt", ".", "optim", ".", "lr_end", ":", "\n", "                ", "assert", "(", "opt", ".", "optim", ".", "sched", ".", "type", "==", "\"ExponentialLR\"", ")", "\n", "opt", ".", "optim", ".", "sched", ".", "gamma", "=", "(", "opt", ".", "optim", ".", "lr_end", "/", "opt", ".", "optim", ".", "lr", ")", "**", "(", "1.", "/", "opt", ".", "max_iter", ")", "\n", "", "kwargs", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "opt", ".", "optim", ".", "sched", ".", "items", "(", ")", "if", "k", "!=", "\"type\"", "}", "\n", "self", ".", "sched", "=", "scheduler", "(", "self", ".", "optim", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.nerf.Model.train": [[47, 70], ["util.log.title", "easydict.EasyDict", "nerf.Model.graph.train", "tqdm.trange", "util.log.title", "nerf.Model.validate", "nerf.Model.train_iteration", "nerf.Model.tb.flush", "nerf.Model.tb.close", "nerf.Model.vis.close", "time.time", "nerf.Model.sched.step", "nerf.Model.validate", "nerf.Model.save_checkpoint"], "methods", ["home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util.Log.title", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.nerf.Model.train", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util.Log.title", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.barf.Model.validate", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.barf.Model.train_iteration", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.barf.Model.validate", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.base.Model.save_checkpoint"], ["", "", "def", "train", "(", "self", ",", "opt", ")", ":", "\n", "# before training", "\n", "        ", "log", ".", "title", "(", "\"TRAINING START\"", ")", "\n", "self", ".", "timer", "=", "edict", "(", "start", "=", "time", ".", "time", "(", ")", ",", "it_mean", "=", "None", ")", "\n", "self", ".", "graph", ".", "train", "(", ")", "\n", "self", ".", "ep", "=", "0", "# dummy for timer", "\n", "# training", "\n", "if", "self", ".", "iter_start", "==", "0", ":", "self", ".", "validate", "(", "opt", ",", "0", ")", "\n", "loader", "=", "tqdm", ".", "trange", "(", "opt", ".", "max_iter", ",", "desc", "=", "\"training\"", ",", "leave", "=", "False", ")", "\n", "for", "self", ".", "it", "in", "loader", ":", "\n", "            ", "if", "self", ".", "it", "<", "self", ".", "iter_start", ":", "continue", "\n", "# set var to all available images", "\n", "var", "=", "self", ".", "train_data", ".", "all", "\n", "self", ".", "train_iteration", "(", "opt", ",", "var", ",", "loader", ")", "\n", "if", "opt", ".", "optim", ".", "sched", ":", "self", ".", "sched", ".", "step", "(", ")", "\n", "if", "self", ".", "it", "%", "opt", ".", "freq", ".", "val", "==", "0", ":", "self", ".", "validate", "(", "opt", ",", "self", ".", "it", ")", "\n", "if", "self", ".", "it", "%", "opt", ".", "freq", ".", "ckpt", "==", "0", ":", "self", ".", "save_checkpoint", "(", "opt", ",", "ep", "=", "None", ",", "it", "=", "self", ".", "it", ")", "\n", "# after training", "\n", "", "if", "opt", ".", "tb", ":", "\n", "            ", "self", ".", "tb", ".", "flush", "(", ")", "\n", "self", ".", "tb", ".", "close", "(", ")", "\n", "", "if", "opt", ".", "visdom", ":", "self", ".", "vis", ".", "close", "(", ")", "\n", "log", ".", "title", "(", "\"TRAINING DONE\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.nerf.Model.log_scalars": [[71, 87], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "super().log_scalars", "nerf.Model.tb.add_scalar", "nerf.Model.tb.add_scalar", "loss.render.log10", "nerf.Model.tb.add_scalar", "nerf.Model.tb.add_scalar", "loss.render_fine.log10"], "methods", ["home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.nerf.Model.log_scalars"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "log_scalars", "(", "self", ",", "opt", ",", "var", ",", "loss", ",", "metric", "=", "None", ",", "step", "=", "0", ",", "split", "=", "\"train\"", ")", ":", "\n", "        ", "super", "(", ")", ".", "log_scalars", "(", "opt", ",", "var", ",", "loss", ",", "metric", "=", "metric", ",", "step", "=", "step", ",", "split", "=", "split", ")", "\n", "# log learning rate", "\n", "if", "split", "==", "\"train\"", ":", "\n", "            ", "lr", "=", "self", ".", "optim", ".", "param_groups", "[", "0", "]", "[", "\"lr\"", "]", "\n", "self", ".", "tb", ".", "add_scalar", "(", "\"{0}/{1}\"", ".", "format", "(", "split", ",", "\"lr\"", ")", ",", "lr", ",", "step", ")", "\n", "if", "opt", ".", "nerf", ".", "fine_sampling", ":", "\n", "                ", "lr", "=", "self", ".", "optim", ".", "param_groups", "[", "1", "]", "[", "\"lr\"", "]", "\n", "self", ".", "tb", ".", "add_scalar", "(", "\"{0}/{1}\"", ".", "format", "(", "split", ",", "\"lr_fine\"", ")", ",", "lr", ",", "step", ")", "\n", "# compute PSNR", "\n", "", "", "psnr", "=", "-", "10", "*", "loss", ".", "render", ".", "log10", "(", ")", "\n", "self", ".", "tb", ".", "add_scalar", "(", "\"{0}/{1}\"", ".", "format", "(", "split", ",", "\"PSNR\"", ")", ",", "psnr", ",", "step", ")", "\n", "if", "opt", ".", "nerf", ".", "fine_sampling", ":", "\n", "            ", "psnr", "=", "-", "10", "*", "loss", ".", "render_fine", ".", "log10", "(", ")", "\n", "self", ".", "tb", ".", "add_scalar", "(", "\"{0}/{1}\"", ".", "format", "(", "split", ",", "\"PSNR_fine\"", ")", ",", "psnr", ",", "step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.nerf.Model.visualize": [[88, 104], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "util_vis.tb_image", "var.rgb.view().permute", "invdepth.view().permute", "util_vis.tb_image", "util_vis.tb_image", "var.rgb_fine.view().permute", "invdepth.view().permute", "util_vis.tb_image", "util_vis.tb_image", "var.rgb.view", "invdepth.view", "var.rgb_fine.view", "invdepth.view"], "methods", ["home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util_vis.tb_image", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util_vis.tb_image", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util_vis.tb_image", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util_vis.tb_image", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util_vis.tb_image"], ["", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "visualize", "(", "self", ",", "opt", ",", "var", ",", "step", "=", "0", ",", "split", "=", "\"train\"", ",", "eps", "=", "1e-10", ")", ":", "\n", "        ", "if", "opt", ".", "tb", ":", "\n", "            ", "util_vis", ".", "tb_image", "(", "opt", ",", "self", ".", "tb", ",", "step", ",", "split", ",", "\"image\"", ",", "var", ".", "image", ")", "\n", "if", "not", "opt", ".", "nerf", ".", "rand_rays", "or", "split", "!=", "\"train\"", ":", "\n", "                ", "invdepth", "=", "(", "1", "-", "var", ".", "depth", ")", "/", "var", ".", "opacity", "if", "opt", ".", "camera", ".", "ndc", "else", "1", "/", "(", "var", ".", "depth", "/", "var", ".", "opacity", "+", "eps", ")", "\n", "rgb_map", "=", "var", ".", "rgb", ".", "view", "(", "-", "1", ",", "opt", ".", "H", ",", "opt", ".", "W", ",", "3", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "# [B,3,H,W]", "\n", "invdepth_map", "=", "invdepth", ".", "view", "(", "-", "1", ",", "opt", ".", "H", ",", "opt", ".", "W", ",", "1", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "# [B,1,H,W]", "\n", "util_vis", ".", "tb_image", "(", "opt", ",", "self", ".", "tb", ",", "step", ",", "split", ",", "\"rgb\"", ",", "rgb_map", ")", "\n", "util_vis", ".", "tb_image", "(", "opt", ",", "self", ".", "tb", ",", "step", ",", "split", ",", "\"invdepth\"", ",", "invdepth_map", ")", "\n", "if", "opt", ".", "nerf", ".", "fine_sampling", ":", "\n", "                    ", "invdepth", "=", "(", "1", "-", "var", ".", "depth_fine", ")", "/", "var", ".", "opacity_fine", "if", "opt", ".", "camera", ".", "ndc", "else", "1", "/", "(", "var", ".", "depth_fine", "/", "var", ".", "opacity_fine", "+", "eps", ")", "\n", "rgb_map", "=", "var", ".", "rgb_fine", ".", "view", "(", "-", "1", ",", "opt", ".", "H", ",", "opt", ".", "W", ",", "3", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "# [B,3,H,W]", "\n", "invdepth_map", "=", "invdepth", ".", "view", "(", "-", "1", ",", "opt", ".", "H", ",", "opt", ".", "W", ",", "1", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "# [B,1,H,W]", "\n", "util_vis", ".", "tb_image", "(", "opt", ",", "self", ".", "tb", ",", "step", ",", "split", ",", "\"rgb_fine\"", ",", "rgb_map", ")", "\n", "util_vis", ".", "tb_image", "(", "opt", ",", "self", ".", "tb", ",", "step", ",", "split", ",", "\"invdepth_fine\"", ",", "invdepth_map", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.nerf.Model.get_all_training_poses": [[105, 110], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "nerf.Model.train_data.get_all_camera_poses().to", "nerf.Model.train_data.get_all_camera_poses"], "methods", ["home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.data.blender.Dataset.get_all_camera_poses"], ["", "", "", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "get_all_training_poses", "(", "self", ",", "opt", ")", ":", "\n", "# get ground-truth (canonical) camera poses", "\n", "        ", "pose_GT", "=", "self", ".", "train_data", ".", "get_all_camera_poses", "(", "opt", ")", ".", "to", "(", "opt", ".", "device", ")", "\n", "return", "None", ",", "pose_GT", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.nerf.Model.evaluate_full": [[111, 148], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "nerf.Model.graph.eval", "tqdm.tqdm", "os.makedirs", "enumerate", "print", "print", "print", "print", "print", "easydict.EasyDict", "util.move_to_device", "nerf.Model.graph.forward", "nerf.Model.rgb.view().permute", "invdepth.view().permute", "external.pohsun_ssim.pytorch_ssim.ssim().item", "nerf.Model.lpips_loss().item", "res.append", "torchvision.to_pil_image().save", "torchvision.to_pil_image().save", "torchvision.to_pil_image().save", "torchvision.to_pil_image().save", "torchvision.to_pil_image().save", "torchvision.to_pil_image().save", "open", "enumerate", "nerf.Model.evaluate_test_time_photometric_optim", "nerf.Model.graph.MSE_loss().log10().item", "easydict.EasyDict", "numpy.mean", "numpy.mean", "numpy.mean", "file.write", "nerf.Model.rgb.view", "invdepth.view", "external.pohsun_ssim.pytorch_ssim.ssim", "nerf.Model.lpips_loss", "torchvision.to_pil_image", "torchvision.to_pil_image", "torchvision.to_pil_image", "torchvision.to_pil_image", "torchvision.to_pil_image", "torchvision.to_pil_image", "nerf.Model.graph.MSE_loss().log10", "nerf.Model.rgb.view().permute.cpu", "nerf.Model.image.cpu", "invdepth.view().permute.cpu", "nerf.Model.graph.MSE_loss"], "methods", ["home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util.move_to_device", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.nerf.NeRF.forward", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.barf.Model.evaluate_test_time_photometric_optim", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.base.Graph.MSE_loss"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "evaluate_full", "(", "self", ",", "opt", ",", "eps", "=", "1e-10", ")", ":", "\n", "        ", "self", ".", "graph", ".", "eval", "(", ")", "\n", "loader", "=", "tqdm", ".", "tqdm", "(", "self", ".", "test_loader", ",", "desc", "=", "\"evaluating\"", ",", "leave", "=", "False", ")", "\n", "res", "=", "[", "]", "\n", "test_path", "=", "\"{}/test_view\"", ".", "format", "(", "opt", ".", "output_path", ")", "\n", "os", ".", "makedirs", "(", "test_path", ",", "exist_ok", "=", "True", ")", "\n", "for", "i", ",", "batch", "in", "enumerate", "(", "loader", ")", ":", "\n", "            ", "var", "=", "edict", "(", "batch", ")", "\n", "var", "=", "util", ".", "move_to_device", "(", "var", ",", "opt", ".", "device", ")", "\n", "if", "opt", ".", "model", "==", "\"barf\"", "and", "opt", ".", "optim", ".", "test_photo", ":", "\n", "# run test-time optimization to factorize imperfection in optimized poses from view synthesis evaluation", "\n", "                ", "var", "=", "self", ".", "evaluate_test_time_photometric_optim", "(", "opt", ",", "var", ")", "\n", "", "var", "=", "self", ".", "graph", ".", "forward", "(", "opt", ",", "var", ",", "mode", "=", "\"eval\"", ")", "\n", "# evaluate view synthesis", "\n", "invdepth", "=", "(", "1", "-", "var", ".", "depth", ")", "/", "var", ".", "opacity", "if", "opt", ".", "camera", ".", "ndc", "else", "1", "/", "(", "var", ".", "depth", "/", "var", ".", "opacity", "+", "eps", ")", "\n", "rgb_map", "=", "var", ".", "rgb", ".", "view", "(", "-", "1", ",", "opt", ".", "H", ",", "opt", ".", "W", ",", "3", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "# [B,3,H,W]", "\n", "invdepth_map", "=", "invdepth", ".", "view", "(", "-", "1", ",", "opt", ".", "H", ",", "opt", ".", "W", ",", "1", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "# [B,1,H,W]", "\n", "psnr", "=", "-", "10", "*", "self", ".", "graph", ".", "MSE_loss", "(", "rgb_map", ",", "var", ".", "image", ")", ".", "log10", "(", ")", ".", "item", "(", ")", "\n", "ssim", "=", "pytorch_ssim", ".", "ssim", "(", "rgb_map", ",", "var", ".", "image", ")", ".", "item", "(", ")", "\n", "lpips", "=", "self", ".", "lpips_loss", "(", "rgb_map", "*", "2", "-", "1", ",", "var", ".", "image", "*", "2", "-", "1", ")", ".", "item", "(", ")", "\n", "res", ".", "append", "(", "edict", "(", "psnr", "=", "psnr", ",", "ssim", "=", "ssim", ",", "lpips", "=", "lpips", ")", ")", "\n", "# dump novel views", "\n", "torchvision_F", ".", "to_pil_image", "(", "rgb_map", ".", "cpu", "(", ")", "[", "0", "]", ")", ".", "save", "(", "\"{}/rgb_{}.png\"", ".", "format", "(", "test_path", ",", "i", ")", ")", "\n", "torchvision_F", ".", "to_pil_image", "(", "var", ".", "image", ".", "cpu", "(", ")", "[", "0", "]", ")", ".", "save", "(", "\"{}/rgb_GT_{}.png\"", ".", "format", "(", "test_path", ",", "i", ")", ")", "\n", "torchvision_F", ".", "to_pil_image", "(", "invdepth_map", ".", "cpu", "(", ")", "[", "0", "]", ")", ".", "save", "(", "\"{}/depth_{}.png\"", ".", "format", "(", "test_path", ",", "i", ")", ")", "\n", "# show results in terminal", "\n", "", "print", "(", "\"--------------------------\"", ")", "\n", "print", "(", "\"PSNR:  {:8.2f}\"", ".", "format", "(", "np", ".", "mean", "(", "[", "r", ".", "psnr", "for", "r", "in", "res", "]", ")", ")", ")", "\n", "print", "(", "\"SSIM:  {:8.2f}\"", ".", "format", "(", "np", ".", "mean", "(", "[", "r", ".", "ssim", "for", "r", "in", "res", "]", ")", ")", ")", "\n", "print", "(", "\"LPIPS: {:8.2f}\"", ".", "format", "(", "np", ".", "mean", "(", "[", "r", ".", "lpips", "for", "r", "in", "res", "]", ")", ")", ")", "\n", "print", "(", "\"--------------------------\"", ")", "\n", "# dump numbers to file", "\n", "quant_fname", "=", "\"{}/quant.txt\"", ".", "format", "(", "opt", ".", "output_path", ")", "\n", "with", "open", "(", "quant_fname", ",", "\"w\"", ")", "as", "file", ":", "\n", "            ", "for", "i", ",", "r", "in", "enumerate", "(", "res", ")", ":", "\n", "                ", "file", ".", "write", "(", "\"{} {} {} {}\\n\"", ".", "format", "(", "i", ",", "r", ".", "psnr", ",", "r", ".", "ssim", ",", "r", ".", "lpips", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.nerf.Model.generate_videos_synthesis": [[149, 189], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "nerf.Model.graph.eval", "print", "os.system", "os.system", "nerf.Model.get_all_training_poses", "[].norm().argmin", "camera.get_novel_view_poses().to", "os.makedirs", "tqdm.tqdm", "easydict.EasyDict.intr[].to", "enumerate", "print", "os.system", "os.system", "nerf.Model.prealign_cameras", "ret.rgb.view().permute", "invdepth.view().permute", "torchvision.to_pil_image().save", "torchvision.to_pil_image().save", "torchvision.to_pil_image().save", "torchvision.to_pil_image().save", "[].norm", "camera.get_novel_view_poses", "nerf.Model.graph.render_by_slices", "nerf.Model.graph.render", "ret.rgb.view", "invdepth.view", "torchvision.to_pil_image", "torchvision.to_pil_image", "torchvision.to_pil_image", "torchvision.to_pil_image", "easydict.EasyDict", "next", "ret.rgb.view().permute.cpu", "invdepth.view().permute.cpu", "poses.mean", "iter"], "methods", ["home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.nerf.Model.get_all_training_poses", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.barf.Model.prealign_cameras", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.camera.get_novel_view_poses", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.nerf.Graph.render_by_slices", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.nerf.Graph.render"], ["", "", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "generate_videos_synthesis", "(", "self", ",", "opt", ",", "eps", "=", "1e-10", ")", ":", "\n", "        ", "self", ".", "graph", ".", "eval", "(", ")", "\n", "if", "opt", ".", "data", ".", "dataset", "==", "\"blender\"", ":", "\n", "            ", "test_path", "=", "\"{}/test_view\"", ".", "format", "(", "opt", ".", "output_path", ")", "\n", "# assume the test view synthesis are already generated", "\n", "print", "(", "\"writing videos...\"", ")", "\n", "rgb_vid_fname", "=", "\"{}/test_view_rgb.mp4\"", ".", "format", "(", "opt", ".", "output_path", ")", "\n", "depth_vid_fname", "=", "\"{}/test_view_depth.mp4\"", ".", "format", "(", "opt", ".", "output_path", ")", "\n", "os", ".", "system", "(", "\"ffmpeg -y -framerate 30 -i {0}/rgb_%d.png -pix_fmt yuv420p {1} >/dev/null 2>&1\"", ".", "format", "(", "test_path", ",", "rgb_vid_fname", ")", ")", "\n", "os", ".", "system", "(", "\"ffmpeg -y -framerate 30 -i {0}/depth_%d.png -pix_fmt yuv420p {1} >/dev/null 2>&1\"", ".", "format", "(", "test_path", ",", "depth_vid_fname", ")", ")", "\n", "", "else", ":", "\n", "            ", "pose_pred", ",", "pose_GT", "=", "self", ".", "get_all_training_poses", "(", "opt", ")", "\n", "poses", "=", "pose_pred", "if", "opt", ".", "model", "==", "\"barf\"", "else", "pose_GT", "\n", "if", "opt", ".", "model", "==", "\"barf\"", "and", "opt", ".", "data", ".", "dataset", "==", "\"llff\"", ":", "\n", "                ", "_", ",", "sim3", "=", "self", ".", "prealign_cameras", "(", "opt", ",", "pose_pred", ",", "pose_GT", ")", "\n", "scale", "=", "sim3", ".", "s1", "/", "sim3", ".", "s0", "\n", "", "else", ":", "scale", "=", "1", "\n", "# rotate novel views around the \"center\" camera of all poses", "\n", "idx_center", "=", "(", "poses", "-", "poses", ".", "mean", "(", "dim", "=", "0", ",", "keepdim", "=", "True", ")", ")", "[", "...", ",", "3", "]", ".", "norm", "(", "dim", "=", "-", "1", ")", ".", "argmin", "(", ")", "\n", "pose_novel", "=", "camera", ".", "get_novel_view_poses", "(", "opt", ",", "poses", "[", "idx_center", "]", ",", "N", "=", "60", ",", "scale", "=", "scale", ")", ".", "to", "(", "opt", ".", "device", ")", "\n", "# render the novel views", "\n", "novel_path", "=", "\"{}/novel_view\"", ".", "format", "(", "opt", ".", "output_path", ")", "\n", "os", ".", "makedirs", "(", "novel_path", ",", "exist_ok", "=", "True", ")", "\n", "pose_novel_tqdm", "=", "tqdm", ".", "tqdm", "(", "pose_novel", ",", "desc", "=", "\"rendering novel views\"", ",", "leave", "=", "False", ")", "\n", "intr", "=", "edict", "(", "next", "(", "iter", "(", "self", ".", "test_loader", ")", ")", ")", ".", "intr", "[", ":", "1", "]", ".", "to", "(", "opt", ".", "device", ")", "# grab intrinsics", "\n", "for", "i", ",", "pose", "in", "enumerate", "(", "pose_novel_tqdm", ")", ":", "\n", "                ", "ret", "=", "self", ".", "graph", ".", "render_by_slices", "(", "opt", ",", "pose", "[", "None", "]", ",", "intr", "=", "intr", ")", "if", "opt", ".", "nerf", ".", "rand_rays", "else", "self", ".", "graph", ".", "render", "(", "opt", ",", "pose", "[", "None", "]", ",", "intr", "=", "intr", ")", "\n", "invdepth", "=", "(", "1", "-", "ret", ".", "depth", ")", "/", "ret", ".", "opacity", "if", "opt", ".", "camera", ".", "ndc", "else", "1", "/", "(", "ret", ".", "depth", "/", "ret", ".", "opacity", "+", "eps", ")", "\n", "rgb_map", "=", "ret", ".", "rgb", ".", "view", "(", "-", "1", ",", "opt", ".", "H", ",", "opt", ".", "W", ",", "3", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "# [B,3,H,W]", "\n", "invdepth_map", "=", "invdepth", ".", "view", "(", "-", "1", ",", "opt", ".", "H", ",", "opt", ".", "W", ",", "1", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "# [B,1,H,W]", "\n", "torchvision_F", ".", "to_pil_image", "(", "rgb_map", ".", "cpu", "(", ")", "[", "0", "]", ")", ".", "save", "(", "\"{}/rgb_{}.png\"", ".", "format", "(", "novel_path", ",", "i", ")", ")", "\n", "torchvision_F", ".", "to_pil_image", "(", "invdepth_map", ".", "cpu", "(", ")", "[", "0", "]", ")", ".", "save", "(", "\"{}/depth_{}.png\"", ".", "format", "(", "novel_path", ",", "i", ")", ")", "\n", "# write videos", "\n", "", "print", "(", "\"writing videos...\"", ")", "\n", "rgb_vid_fname", "=", "\"{}/novel_view_rgb.mp4\"", ".", "format", "(", "opt", ".", "output_path", ")", "\n", "depth_vid_fname", "=", "\"{}/novel_view_depth.mp4\"", ".", "format", "(", "opt", ".", "output_path", ")", "\n", "os", ".", "system", "(", "\"ffmpeg -y -framerate 30 -i {0}/rgb_%d.png -pix_fmt yuv420p {1} >/dev/null 2>&1\"", ".", "format", "(", "novel_path", ",", "rgb_vid_fname", ")", ")", "\n", "os", ".", "system", "(", "\"ffmpeg -y -framerate 30 -i {0}/depth_%d.png -pix_fmt yuv420p {1} >/dev/null 2>&1\"", ".", "format", "(", "novel_path", ",", "depth_vid_fname", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.nerf.Graph.__init__": [[194, 199], ["base.Graph.__init__", "nerf.NeRF", "nerf.NeRF"], "methods", ["home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.data.blender.Dataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "opt", ")", "\n", "self", ".", "nerf", "=", "NeRF", "(", "opt", ")", "\n", "if", "opt", ".", "nerf", ".", "fine_sampling", ":", "\n", "            ", "self", ".", "nerf_fine", "=", "NeRF", "(", "opt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.nerf.Graph.forward": [[200, 214], ["len", "nerf.Graph.get_pose", "var.update", "nerf.Graph.render", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "nerf.Graph.render_by_slices", "nerf.Graph.render"], "methods", ["home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.nerf.Graph.get_pose", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.nerf.Graph.render", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.nerf.Graph.render_by_slices", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.nerf.Graph.render"], ["", "", "def", "forward", "(", "self", ",", "opt", ",", "var", ",", "mode", "=", "None", ")", ":", "\n", "        ", "batch_size", "=", "len", "(", "var", ".", "idx", ")", "\n", "pose", "=", "self", ".", "get_pose", "(", "opt", ",", "var", ",", "mode", "=", "mode", ")", "\n", "# render images", "\n", "if", "opt", ".", "nerf", ".", "rand_rays", "and", "mode", "in", "[", "\"train\"", ",", "\"test-optim\"", "]", ":", "\n", "# sample random rays for optimization", "\n", "            ", "var", ".", "ray_idx", "=", "torch", ".", "randperm", "(", "opt", ".", "H", "*", "opt", ".", "W", ",", "device", "=", "opt", ".", "device", ")", "[", ":", "opt", ".", "nerf", ".", "rand_rays", "//", "batch_size", "]", "\n", "ret", "=", "self", ".", "render", "(", "opt", ",", "pose", ",", "intr", "=", "var", ".", "intr", ",", "ray_idx", "=", "var", ".", "ray_idx", ",", "mode", "=", "mode", ")", "# [B,N,3],[B,N,1]", "\n", "", "else", ":", "\n", "# render full image (process in slices)", "\n", "            ", "ret", "=", "self", ".", "render_by_slices", "(", "opt", ",", "pose", ",", "intr", "=", "var", ".", "intr", ",", "mode", "=", "mode", ")", "if", "opt", ".", "nerf", ".", "rand_rays", "else", "self", ".", "render", "(", "opt", ",", "pose", ",", "intr", "=", "var", ".", "intr", ",", "mode", "=", "mode", ")", "# [B,HW,3],[B,HW,1]", "\n", "", "var", ".", "update", "(", "ret", ")", "\n", "return", "var", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.nerf.Graph.compute_loss": [[215, 228], ["easydict.EasyDict", "len", "var.image.view().permute", "nerf.Graph.MSE_loss", "nerf.Graph.MSE_loss", "var.image.view"], "methods", ["home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.base.Graph.MSE_loss", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.base.Graph.MSE_loss"], ["", "def", "compute_loss", "(", "self", ",", "opt", ",", "var", ",", "mode", "=", "None", ")", ":", "\n", "        ", "loss", "=", "edict", "(", ")", "\n", "batch_size", "=", "len", "(", "var", ".", "idx", ")", "\n", "image", "=", "var", ".", "image", ".", "view", "(", "batch_size", ",", "3", ",", "opt", ".", "H", "*", "opt", ".", "W", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "if", "opt", ".", "nerf", ".", "rand_rays", "and", "mode", "in", "[", "\"train\"", ",", "\"test-optim\"", "]", ":", "\n", "            ", "image", "=", "image", "[", ":", ",", "var", ".", "ray_idx", "]", "\n", "# compute image losses", "\n", "", "if", "opt", ".", "loss_weight", ".", "render", "is", "not", "None", ":", "\n", "            ", "loss", ".", "render", "=", "self", ".", "MSE_loss", "(", "var", ".", "rgb", ",", "image", ")", "\n", "", "if", "opt", ".", "loss_weight", ".", "render_fine", "is", "not", "None", ":", "\n", "            ", "assert", "(", "opt", ".", "nerf", ".", "fine_sampling", ")", "\n", "loss", ".", "render_fine", "=", "self", ".", "MSE_loss", "(", "var", ".", "rgb_fine", ",", "image", ")", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.nerf.Graph.get_pose": [[229, 231], ["None"], "methods", ["None"], ["", "def", "get_pose", "(", "self", ",", "opt", ",", "var", ",", "mode", "=", "None", ")", ":", "\n", "        ", "return", "var", ".", "pose", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.nerf.Graph.render": [[232, 259], ["len", "camera.get_center_and_ray", "ray.isnan().any", "nerf.Graph.sample_depth", "nerf.Graph.nerf.forward_samples", "nerf.Graph.nerf.composite", "easydict.EasyDict", "camera.get_center_and_ray", "camera.convert_NDC", "nerf.Graph.nerf_fine.forward_samples", "nerf.Graph.nerf_fine.composite", "easydict.EasyDict.update", "ray.isnan", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "nerf.Graph.sample_depth_from_pdf", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.sort", "torch.cat.sort"], "methods", ["home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.camera.get_center_and_ray", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.nerf.Graph.sample_depth", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.nerf.NeRF.forward_samples", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.nerf.NeRF.composite", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.camera.get_center_and_ray", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.camera.convert_NDC", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.nerf.NeRF.forward_samples", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.nerf.NeRF.composite", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.nerf.Graph.sample_depth_from_pdf"], ["", "def", "render", "(", "self", ",", "opt", ",", "pose", ",", "intr", "=", "None", ",", "ray_idx", "=", "None", ",", "mode", "=", "None", ")", ":", "\n", "        ", "batch_size", "=", "len", "(", "pose", ")", "\n", "center", ",", "ray", "=", "camera", ".", "get_center_and_ray", "(", "opt", ",", "pose", ",", "intr", "=", "intr", ")", "# [B,HW,3]", "\n", "while", "ray", ".", "isnan", "(", ")", ".", "any", "(", ")", ":", "# TODO: weird bug, ray becomes NaN arbitrarily if batch_size>1, not deterministic reproducible", "\n", "            ", "center", ",", "ray", "=", "camera", ".", "get_center_and_ray", "(", "opt", ",", "pose", ",", "intr", "=", "intr", ")", "# [B,HW,3]", "\n", "", "if", "ray_idx", "is", "not", "None", ":", "\n", "# consider only subset of rays", "\n", "            ", "center", ",", "ray", "=", "center", "[", ":", ",", "ray_idx", "]", ",", "ray", "[", ":", ",", "ray_idx", "]", "\n", "", "if", "opt", ".", "camera", ".", "ndc", ":", "\n", "# convert center/ray representations to NDC", "\n", "            ", "center", ",", "ray", "=", "camera", ".", "convert_NDC", "(", "opt", ",", "center", ",", "ray", ",", "intr", "=", "intr", ")", "\n", "# render with main MLP", "\n", "", "depth_samples", "=", "self", ".", "sample_depth", "(", "opt", ",", "batch_size", ",", "num_rays", "=", "ray", ".", "shape", "[", "1", "]", ")", "# [B,HW,N,1]", "\n", "rgb_samples", ",", "density_samples", "=", "self", ".", "nerf", ".", "forward_samples", "(", "opt", ",", "center", ",", "ray", ",", "depth_samples", ",", "mode", "=", "mode", ")", "\n", "rgb", ",", "depth", ",", "opacity", ",", "prob", "=", "self", ".", "nerf", ".", "composite", "(", "opt", ",", "ray", ",", "rgb_samples", ",", "density_samples", ",", "depth_samples", ")", "\n", "ret", "=", "edict", "(", "rgb", "=", "rgb", ",", "depth", "=", "depth", ",", "opacity", "=", "opacity", ")", "# [B,HW,K]", "\n", "# render with fine MLP from coarse MLP", "\n", "if", "opt", ".", "nerf", ".", "fine_sampling", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# resample depth acoording to coarse empirical distribution", "\n", "                ", "depth_samples_fine", "=", "self", ".", "sample_depth_from_pdf", "(", "opt", ",", "pdf", "=", "prob", "[", "...", ",", "0", "]", ")", "# [B,HW,Nf,1]", "\n", "depth_samples", "=", "torch", ".", "cat", "(", "[", "depth_samples", ",", "depth_samples_fine", "]", ",", "dim", "=", "2", ")", "# [B,HW,N+Nf,1]", "\n", "depth_samples", "=", "depth_samples", ".", "sort", "(", "dim", "=", "2", ")", ".", "values", "\n", "", "rgb_samples", ",", "density_samples", "=", "self", ".", "nerf_fine", ".", "forward_samples", "(", "opt", ",", "center", ",", "ray", ",", "depth_samples", ",", "mode", "=", "mode", ")", "\n", "rgb_fine", ",", "depth_fine", ",", "opacity_fine", ",", "_", "=", "self", ".", "nerf_fine", ".", "composite", "(", "opt", ",", "ray", ",", "rgb_samples", ",", "density_samples", ",", "depth_samples", ")", "\n", "ret", ".", "update", "(", "rgb_fine", "=", "rgb_fine", ",", "depth_fine", "=", "depth_fine", ",", "opacity_fine", "=", "opacity_fine", ")", "# [B,HW,K]", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.nerf.Graph.render_by_slices": [[260, 272], ["easydict.EasyDict", "range", "easydict.EasyDict.update", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "nerf.Graph.render", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "min", "ret_all[].append"], "methods", ["home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.nerf.Graph.render"], ["", "def", "render_by_slices", "(", "self", ",", "opt", ",", "pose", ",", "intr", "=", "None", ",", "mode", "=", "None", ")", ":", "\n", "        ", "ret_all", "=", "edict", "(", "rgb", "=", "[", "]", ",", "depth", "=", "[", "]", ",", "opacity", "=", "[", "]", ")", "\n", "if", "opt", ".", "nerf", ".", "fine_sampling", ":", "\n", "            ", "ret_all", ".", "update", "(", "rgb_fine", "=", "[", "]", ",", "depth_fine", "=", "[", "]", ",", "opacity_fine", "=", "[", "]", ")", "\n", "# render the image by slices for memory considerations", "\n", "", "for", "c", "in", "range", "(", "0", ",", "opt", ".", "H", "*", "opt", ".", "W", ",", "opt", ".", "nerf", ".", "rand_rays", ")", ":", "\n", "            ", "ray_idx", "=", "torch", ".", "arange", "(", "c", ",", "min", "(", "c", "+", "opt", ".", "nerf", ".", "rand_rays", ",", "opt", ".", "H", "*", "opt", ".", "W", ")", ",", "device", "=", "opt", ".", "device", ")", "\n", "ret", "=", "self", ".", "render", "(", "opt", ",", "pose", ",", "intr", "=", "intr", ",", "ray_idx", "=", "ray_idx", ",", "mode", "=", "mode", ")", "# [B,R,3],[B,R,1]", "\n", "for", "k", "in", "ret", ":", "ret_all", "[", "k", "]", ".", "append", "(", "ret", "[", "k", "]", ")", "\n", "# group all slices of images", "\n", "", "for", "k", "in", "ret_all", ":", "ret_all", "[", "k", "]", "=", "torch", ".", "cat", "(", "ret_all", "[", "k", "]", ",", "dim", "=", "1", ")", "\n", "return", "ret_all", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.nerf.Graph.sample_depth": [[273, 284], ["[].float", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "dict", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["None"], ["", "def", "sample_depth", "(", "self", ",", "opt", ",", "batch_size", ",", "num_rays", "=", "None", ")", ":", "\n", "        ", "depth_min", ",", "depth_max", "=", "opt", ".", "nerf", ".", "depth", ".", "range", "\n", "num_rays", "=", "num_rays", "or", "opt", ".", "H", "*", "opt", ".", "W", "\n", "rand_samples", "=", "torch", ".", "rand", "(", "batch_size", ",", "num_rays", ",", "opt", ".", "nerf", ".", "sample_intvs", ",", "1", ",", "device", "=", "opt", ".", "device", ")", "if", "opt", ".", "nerf", ".", "sample_stratified", "else", "0.5", "\n", "rand_samples", "+=", "torch", ".", "arange", "(", "opt", ".", "nerf", ".", "sample_intvs", ",", "device", "=", "opt", ".", "device", ")", "[", "None", ",", "None", ",", ":", ",", "None", "]", ".", "float", "(", ")", "# [B,HW,N,1]", "\n", "depth_samples", "=", "rand_samples", "/", "opt", ".", "nerf", ".", "sample_intvs", "*", "(", "depth_max", "-", "depth_min", ")", "+", "depth_min", "# [B,HW,N,1]", "\n", "depth_samples", "=", "dict", "(", "\n", "metric", "=", "depth_samples", ",", "\n", "inverse", "=", "1", "/", "(", "depth_samples", "+", "1e-8", ")", ",", "\n", ")", "[", "opt", ".", "nerf", ".", "depth", ".", "param", "]", "\n", "return", "depth_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.nerf.Graph.sample_depth_from_pdf": [[285, 305], ["pdf.cumsum", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.searchsorted", "torch.searchsorted", "torch.searchsorted", "torch.searchsorted", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "depth_bin.repeat.repeat.repeat", "depth_bin.repeat.repeat.gather", "depth_bin.repeat.repeat.gather", "torch.cat.gather", "torch.cat.gather", "torch.cat.gather", "torch.cat.gather", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.searchsorted.clamp", "torch.searchsorted.clamp", "torch.searchsorted.clamp", "torch.searchsorted.clamp"], "methods", ["None"], ["", "def", "sample_depth_from_pdf", "(", "self", ",", "opt", ",", "pdf", ")", ":", "\n", "        ", "depth_min", ",", "depth_max", "=", "opt", ".", "nerf", ".", "depth", ".", "range", "\n", "# get CDF from PDF (along last dimension)", "\n", "cdf", "=", "pdf", ".", "cumsum", "(", "dim", "=", "-", "1", ")", "# [B,HW,N]", "\n", "cdf", "=", "torch", ".", "cat", "(", "[", "torch", ".", "zeros_like", "(", "cdf", "[", "...", ",", ":", "1", "]", ")", ",", "cdf", "]", ",", "dim", "=", "-", "1", ")", "# [B,HW,N+1]", "\n", "# take uniform samples", "\n", "grid", "=", "torch", ".", "linspace", "(", "0", ",", "1", ",", "opt", ".", "nerf", ".", "sample_intvs_fine", "+", "1", ",", "device", "=", "opt", ".", "device", ")", "# [Nf+1]", "\n", "unif", "=", "0.5", "*", "(", "grid", "[", ":", "-", "1", "]", "+", "grid", "[", "1", ":", "]", ")", ".", "repeat", "(", "*", "cdf", ".", "shape", "[", ":", "-", "1", "]", ",", "1", ")", "# [B,HW,Nf]", "\n", "idx", "=", "torch", ".", "searchsorted", "(", "cdf", ",", "unif", ",", "right", "=", "True", ")", "# [B,HW,Nf] \\in {1...N}", "\n", "# inverse transform sampling from CDF", "\n", "depth_bin", "=", "torch", ".", "linspace", "(", "depth_min", ",", "depth_max", ",", "opt", ".", "nerf", ".", "sample_intvs", "+", "1", ",", "device", "=", "opt", ".", "device", ")", "# [N+1]", "\n", "depth_bin", "=", "depth_bin", ".", "repeat", "(", "*", "cdf", ".", "shape", "[", ":", "-", "1", "]", ",", "1", ")", "# [B,HW,N+1]", "\n", "depth_low", "=", "depth_bin", ".", "gather", "(", "dim", "=", "2", ",", "index", "=", "(", "idx", "-", "1", ")", ".", "clamp", "(", "min", "=", "0", ")", ")", "# [B,HW,Nf]", "\n", "depth_high", "=", "depth_bin", ".", "gather", "(", "dim", "=", "2", ",", "index", "=", "idx", ".", "clamp", "(", "max", "=", "opt", ".", "nerf", ".", "sample_intvs", ")", ")", "# [B,HW,Nf]", "\n", "cdf_low", "=", "cdf", ".", "gather", "(", "dim", "=", "2", ",", "index", "=", "(", "idx", "-", "1", ")", ".", "clamp", "(", "min", "=", "0", ")", ")", "# [B,HW,Nf]", "\n", "cdf_high", "=", "cdf", ".", "gather", "(", "dim", "=", "2", ",", "index", "=", "idx", ".", "clamp", "(", "max", "=", "opt", ".", "nerf", ".", "sample_intvs", ")", ")", "# [B,HW,Nf]", "\n", "# linear interpolation", "\n", "t", "=", "(", "unif", "-", "cdf_low", ")", "/", "(", "cdf_high", "-", "cdf_low", "+", "1e-8", ")", "# [B,HW,Nf]", "\n", "depth_samples", "=", "depth_low", "+", "t", "*", "(", "depth_high", "-", "depth_low", ")", "# [B,HW,Nf]", "\n", "return", "depth_samples", "[", "...", ",", "None", "]", "# [B,HW,Nf,1]", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.nerf.NeRF.__init__": [[308, 311], ["super().__init__", "nerf.NeRF.define_network"], "methods", ["home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.data.blender.Dataset.__init__", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.nerf.NeRF.define_network"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "define_network", "(", "opt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.nerf.NeRF.define_network": [[312, 337], ["torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "util.get_layer_dims", "enumerate", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "util.get_layer_dims", "enumerate", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "nerf.NeRF.mlp_feat.append", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "nerf.NeRF.mlp_rgb.append", "nerf.NeRF.tensorflow_init_weights", "nerf.NeRF.tensorflow_init_weights", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util.get_layer_dims", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.util.get_layer_dims", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.nerf.NeRF.tensorflow_init_weights", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.nerf.NeRF.tensorflow_init_weights"], ["", "def", "define_network", "(", "self", ",", "opt", ")", ":", "\n", "        ", "input_3D_dim", "=", "3", "+", "6", "*", "opt", ".", "arch", ".", "posenc", ".", "L_3D", "if", "opt", ".", "arch", ".", "posenc", "else", "3", "\n", "if", "opt", ".", "nerf", ".", "view_dep", ":", "\n", "            ", "input_view_dim", "=", "3", "+", "6", "*", "opt", ".", "arch", ".", "posenc", ".", "L_view", "if", "opt", ".", "arch", ".", "posenc", "else", "3", "\n", "# point-wise feature", "\n", "", "self", ".", "mlp_feat", "=", "torch", ".", "nn", ".", "ModuleList", "(", ")", "\n", "L", "=", "util", ".", "get_layer_dims", "(", "opt", ".", "arch", ".", "layers_feat", ")", "\n", "for", "li", ",", "(", "k_in", ",", "k_out", ")", "in", "enumerate", "(", "L", ")", ":", "\n", "            ", "if", "li", "==", "0", ":", "k_in", "=", "input_3D_dim", "\n", "if", "li", "in", "opt", ".", "arch", ".", "skip", ":", "k_in", "+=", "input_3D_dim", "\n", "if", "li", "==", "len", "(", "L", ")", "-", "1", ":", "k_out", "+=", "1", "\n", "linear", "=", "torch", ".", "nn", ".", "Linear", "(", "k_in", ",", "k_out", ")", "\n", "if", "opt", ".", "arch", ".", "tf_init", ":", "\n", "                ", "self", ".", "tensorflow_init_weights", "(", "opt", ",", "linear", ",", "out", "=", "\"first\"", "if", "li", "==", "len", "(", "L", ")", "-", "1", "else", "None", ")", "\n", "", "self", ".", "mlp_feat", ".", "append", "(", "linear", ")", "\n", "# RGB prediction", "\n", "", "self", ".", "mlp_rgb", "=", "torch", ".", "nn", ".", "ModuleList", "(", ")", "\n", "L", "=", "util", ".", "get_layer_dims", "(", "opt", ".", "arch", ".", "layers_rgb", ")", "\n", "feat_dim", "=", "opt", ".", "arch", ".", "layers_feat", "[", "-", "1", "]", "\n", "for", "li", ",", "(", "k_in", ",", "k_out", ")", "in", "enumerate", "(", "L", ")", ":", "\n", "            ", "if", "li", "==", "0", ":", "k_in", "=", "feat_dim", "+", "(", "input_view_dim", "if", "opt", ".", "nerf", ".", "view_dep", "else", "0", ")", "\n", "linear", "=", "torch", ".", "nn", ".", "Linear", "(", "k_in", ",", "k_out", ")", "\n", "if", "opt", ".", "arch", ".", "tf_init", ":", "\n", "                ", "self", ".", "tensorflow_init_weights", "(", "opt", ",", "linear", ",", "out", "=", "\"all\"", "if", "li", "==", "len", "(", "L", ")", "-", "1", "else", "None", ")", "\n", "", "self", ".", "mlp_rgb", ".", "append", "(", "linear", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.nerf.NeRF.tensorflow_init_weights": [[338, 349], ["torch.nn.init.calculate_gain", "torch.nn.init.calculate_gain", "torch.nn.init.calculate_gain", "torch.nn.init.calculate_gain", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_"], "methods", ["None"], ["", "", "def", "tensorflow_init_weights", "(", "self", ",", "opt", ",", "linear", ",", "out", "=", "None", ")", ":", "\n", "# use Xavier init instead of Kaiming init", "\n", "        ", "relu_gain", "=", "torch", ".", "nn", ".", "init", ".", "calculate_gain", "(", "\"relu\"", ")", "# sqrt(2)", "\n", "if", "out", "==", "\"all\"", ":", "\n", "            ", "torch", ".", "nn", ".", "init", ".", "xavier_uniform_", "(", "linear", ".", "weight", ")", "\n", "", "elif", "out", "==", "\"first\"", ":", "\n", "            ", "torch", ".", "nn", ".", "init", ".", "xavier_uniform_", "(", "linear", ".", "weight", "[", ":", "1", "]", ")", "\n", "torch", ".", "nn", ".", "init", ".", "xavier_uniform_", "(", "linear", ".", "weight", "[", "1", ":", "]", ",", "gain", "=", "relu_gain", ")", "\n", "", "else", ":", "\n", "            ", "torch", ".", "nn", ".", "init", ".", "xavier_uniform_", "(", "linear", ".", "weight", ",", "gain", "=", "relu_gain", ")", "\n", "", "torch", ".", "nn", ".", "init", ".", "zeros_", "(", "linear", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.nerf.NeRF.forward": [[350, 382], ["enumerate", "enumerate", "torch.relu.sigmoid_", "nerf.NeRF.positional_encoding", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "layer", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "layer", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "getattr", "getattr.", "nerf.NeRF.positional_encoding", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "len", "len", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like"], "methods", ["home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.nerf.NeRF.positional_encoding", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.nerf.NeRF.positional_encoding"], ["", "def", "forward", "(", "self", ",", "opt", ",", "points_3D", ",", "ray_unit", "=", "None", ",", "mode", "=", "None", ")", ":", "# [B,...,3]", "\n", "        ", "if", "opt", ".", "arch", ".", "posenc", ":", "\n", "            ", "points_enc", "=", "self", ".", "positional_encoding", "(", "opt", ",", "points_3D", ",", "L", "=", "opt", ".", "arch", ".", "posenc", ".", "L_3D", ")", "\n", "points_enc", "=", "torch", ".", "cat", "(", "[", "points_3D", ",", "points_enc", "]", ",", "dim", "=", "-", "1", ")", "# [B,...,6L+3]", "\n", "", "else", ":", "points_enc", "=", "points_3D", "\n", "feat", "=", "points_enc", "\n", "# extract coordinate-based features", "\n", "for", "li", ",", "layer", "in", "enumerate", "(", "self", ".", "mlp_feat", ")", ":", "\n", "            ", "if", "li", "in", "opt", ".", "arch", ".", "skip", ":", "feat", "=", "torch", ".", "cat", "(", "[", "feat", ",", "points_enc", "]", ",", "dim", "=", "-", "1", ")", "\n", "feat", "=", "layer", "(", "feat", ")", "\n", "if", "li", "==", "len", "(", "self", ".", "mlp_feat", ")", "-", "1", ":", "\n", "                ", "density", "=", "feat", "[", "...", ",", "0", "]", "\n", "if", "opt", ".", "nerf", ".", "density_noise_reg", "and", "mode", "==", "\"train\"", ":", "\n", "                    ", "density", "+=", "torch", ".", "randn_like", "(", "density", ")", "*", "opt", ".", "nerf", ".", "density_noise_reg", "\n", "", "density_activ", "=", "getattr", "(", "torch_F", ",", "opt", ".", "arch", ".", "density_activ", ")", "# relu_,abs_,sigmoid_,exp_....", "\n", "density", "=", "density_activ", "(", "density", ")", "\n", "feat", "=", "feat", "[", "...", ",", "1", ":", "]", "\n", "", "feat", "=", "torch_F", ".", "relu", "(", "feat", ")", "\n", "# predict RGB values", "\n", "", "if", "opt", ".", "nerf", ".", "view_dep", ":", "\n", "            ", "assert", "(", "ray_unit", "is", "not", "None", ")", "\n", "if", "opt", ".", "arch", ".", "posenc", ":", "\n", "                ", "ray_enc", "=", "self", ".", "positional_encoding", "(", "opt", ",", "ray_unit", ",", "L", "=", "opt", ".", "arch", ".", "posenc", ".", "L_view", ")", "\n", "ray_enc", "=", "torch", ".", "cat", "(", "[", "ray_unit", ",", "ray_enc", "]", ",", "dim", "=", "-", "1", ")", "# [B,...,6L+3]", "\n", "", "else", ":", "ray_enc", "=", "ray_unit", "\n", "feat", "=", "torch", ".", "cat", "(", "[", "feat", ",", "ray_enc", "]", ",", "dim", "=", "-", "1", ")", "\n", "", "for", "li", ",", "layer", "in", "enumerate", "(", "self", ".", "mlp_rgb", ")", ":", "\n", "            ", "feat", "=", "layer", "(", "feat", ")", "\n", "if", "li", "!=", "len", "(", "self", ".", "mlp_rgb", ")", "-", "1", ":", "\n", "                ", "feat", "=", "torch_F", ".", "relu", "(", "feat", ")", "\n", "", "", "rgb", "=", "feat", ".", "sigmoid_", "(", ")", "# [B,...,3]", "\n", "return", "rgb", ",", "density", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.nerf.NeRF.forward_samples": [[383, 391], ["camera.get_3D_points_from_depth", "nerf.NeRF.forward", "torch.normalize", "torch.normalize", "ray_unit[].expand_as"], "methods", ["home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.camera.get_3D_points_from_depth", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.nerf.NeRF.forward"], ["", "def", "forward_samples", "(", "self", ",", "opt", ",", "center", ",", "ray", ",", "depth_samples", ",", "mode", "=", "None", ")", ":", "\n", "        ", "points_3D_samples", "=", "camera", ".", "get_3D_points_from_depth", "(", "opt", ",", "center", ",", "ray", ",", "depth_samples", ",", "multi_samples", "=", "True", ")", "# [B,HW,N,3]", "\n", "if", "opt", ".", "nerf", ".", "view_dep", ":", "\n", "            ", "ray_unit", "=", "torch_F", ".", "normalize", "(", "ray", ",", "dim", "=", "-", "1", ")", "# [B,HW,3]", "\n", "ray_unit_samples", "=", "ray_unit", "[", "...", ",", "None", ",", ":", "]", ".", "expand_as", "(", "points_3D_samples", ")", "# [B,HW,N,3]", "\n", "", "else", ":", "ray_unit_samples", "=", "None", "\n", "rgb_samples", ",", "density_samples", "=", "self", ".", "forward", "(", "opt", ",", "points_3D_samples", ",", "ray_unit", "=", "ray_unit_samples", ",", "mode", "=", "mode", ")", "# [B,HW,N],[B,HW,N,3]", "\n", "return", "rgb_samples", ",", "density_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.nerf.NeRF.composite": [[392, 409], ["ray.norm", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "prob.sum", "torch.empty_like().fill_", "torch.empty_like().fill_", "torch.empty_like().fill_", "torch.empty_like().fill_", "torch.cat().cumsum", "torch.cat().cumsum", "torch.cat().cumsum", "torch.cat().cumsum", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like"], "methods", ["None"], ["", "def", "composite", "(", "self", ",", "opt", ",", "ray", ",", "rgb_samples", ",", "density_samples", ",", "depth_samples", ")", ":", "\n", "        ", "ray_length", "=", "ray", ".", "norm", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "# [B,HW,1]", "\n", "# volume rendering: compute probability (using quadrature)", "\n", "depth_intv_samples", "=", "depth_samples", "[", "...", ",", "1", ":", ",", "0", "]", "-", "depth_samples", "[", "...", ",", ":", "-", "1", ",", "0", "]", "# [B,HW,N-1]", "\n", "depth_intv_samples", "=", "torch", ".", "cat", "(", "[", "depth_intv_samples", ",", "torch", ".", "empty_like", "(", "depth_intv_samples", "[", "...", ",", ":", "1", "]", ")", ".", "fill_", "(", "1e10", ")", "]", ",", "dim", "=", "2", ")", "# [B,HW,N]", "\n", "dist_samples", "=", "depth_intv_samples", "*", "ray_length", "# [B,HW,N]", "\n", "sigma_delta", "=", "density_samples", "*", "dist_samples", "# [B,HW,N]", "\n", "alpha", "=", "1", "-", "(", "-", "sigma_delta", ")", ".", "exp_", "(", ")", "# [B,HW,N]", "\n", "T", "=", "(", "-", "torch", ".", "cat", "(", "[", "torch", ".", "zeros_like", "(", "sigma_delta", "[", "...", ",", ":", "1", "]", ")", ",", "sigma_delta", "[", "...", ",", ":", "-", "1", "]", "]", ",", "dim", "=", "2", ")", ".", "cumsum", "(", "dim", "=", "2", ")", ")", ".", "exp_", "(", ")", "# [B,HW,N]", "\n", "prob", "=", "(", "T", "*", "alpha", ")", "[", "...", ",", "None", "]", "# [B,HW,N,1]", "\n", "# integrate RGB and depth weighted by probability", "\n", "depth", "=", "(", "depth_samples", "*", "prob", ")", ".", "sum", "(", "dim", "=", "2", ")", "# [B,HW,1]", "\n", "rgb", "=", "(", "rgb_samples", "*", "prob", ")", ".", "sum", "(", "dim", "=", "2", ")", "# [B,HW,3]", "\n", "opacity", "=", "prob", ".", "sum", "(", "dim", "=", "2", ")", "# [B,HW,1]", "\n", "if", "opt", ".", "nerf", ".", "setbg_opaque", ":", "\n", "            ", "rgb", "=", "rgb", "+", "opt", ".", "data", ".", "bgcolor", "*", "(", "1", "-", "opacity", ")", "\n", "", "return", "rgb", ",", "depth", ",", "opacity", ",", "prob", "# [B,HW,K]", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.model.nerf.NeRF.positional_encoding": [[410, 418], ["torch.stack", "torch.stack", "torch.stack", "torch.stack", "input_enc.view.view.view", "spectrum.sin", "spectrum.cos", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["None"], ["", "def", "positional_encoding", "(", "self", ",", "opt", ",", "input", ",", "L", ")", ":", "# [B,...,N]", "\n", "        ", "shape", "=", "input", ".", "shape", "\n", "freq", "=", "2", "**", "torch", ".", "arange", "(", "L", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "opt", ".", "device", ")", "*", "np", ".", "pi", "# [L]", "\n", "spectrum", "=", "input", "[", "...", ",", "None", "]", "*", "freq", "# [B,...,N,L]", "\n", "sin", ",", "cos", "=", "spectrum", ".", "sin", "(", ")", ",", "spectrum", ".", "cos", "(", ")", "# [B,...,N,L]", "\n", "input_enc", "=", "torch", ".", "stack", "(", "[", "sin", ",", "cos", "]", ",", "dim", "=", "-", "2", ")", "# [B,...,N,2,L]", "\n", "input_enc", "=", "input_enc", ".", "view", "(", "*", "shape", "[", ":", "-", "1", "]", ",", "-", "1", ")", "# [B,...,2NL]", "\n", "return", "input_enc", "\n", "", "", ""]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.data.llff.Dataset.__init__": [[19, 36], ["base.Dataset.__init__", "sorted", "llff.Dataset.parse_cameras_and_bounds", "list", "int", "os.listdir", "zip", "llff.Dataset.preload_threading", "llff.Dataset.preload_threading", "len"], "methods", ["home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.data.blender.Dataset.__init__", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.data.llff.Dataset.parse_cameras_and_bounds", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.data.base.Dataset.preload_threading", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.data.base.Dataset.preload_threading"], ["    ", "def", "__init__", "(", "self", ",", "opt", ",", "split", "=", "\"train\"", ",", "subset", "=", "None", ")", ":", "\n", "        ", "self", ".", "raw_H", ",", "self", ".", "raw_W", "=", "3024", ",", "4032", "\n", "super", "(", ")", ".", "__init__", "(", "opt", ",", "split", ")", "\n", "self", ".", "root", "=", "opt", ".", "data", ".", "root", "or", "\"data/llff\"", "\n", "self", ".", "path", "=", "\"{}/{}\"", ".", "format", "(", "self", ".", "root", ",", "opt", ".", "data", ".", "scene", ")", "\n", "self", ".", "path_image", "=", "\"{}/images\"", ".", "format", "(", "self", ".", "path", ")", "\n", "image_fnames", "=", "sorted", "(", "os", ".", "listdir", "(", "self", ".", "path_image", ")", ")", "\n", "poses_raw", ",", "bounds", "=", "self", ".", "parse_cameras_and_bounds", "(", "opt", ")", "\n", "self", ".", "list", "=", "list", "(", "zip", "(", "image_fnames", ",", "poses_raw", ",", "bounds", ")", ")", "\n", "# manually split train/val subsets", "\n", "num_val_split", "=", "int", "(", "len", "(", "self", ")", "*", "opt", ".", "data", ".", "val_ratio", ")", "\n", "self", ".", "list", "=", "self", ".", "list", "[", ":", "-", "num_val_split", "]", "if", "split", "==", "\"train\"", "else", "self", ".", "list", "[", "-", "num_val_split", ":", "]", "\n", "if", "subset", ":", "self", ".", "list", "=", "self", ".", "list", "[", ":", "subset", "]", "\n", "# preload dataset", "\n", "if", "opt", ".", "data", ".", "preload", ":", "\n", "            ", "self", ".", "images", "=", "self", ".", "preload_threading", "(", "opt", ",", "self", ".", "get_image", ")", "\n", "self", ".", "cameras", "=", "self", ".", "preload_threading", "(", "opt", ",", "self", ".", "get_camera", ",", "data_str", "=", "\"cameras\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.data.llff.Dataset.prefetch_all_data": [[37, 41], ["torch.utils.data._utils.collate.default_collate", "torch.utils.data._utils.collate.default_collate", "torch.utils.data._utils.collate.default_collate", "torch.utils.data._utils.collate.default_collate"], "methods", ["None"], ["", "", "def", "prefetch_all_data", "(", "self", ",", "opt", ")", ":", "\n", "        ", "assert", "(", "not", "opt", ".", "data", ".", "augment", ")", "\n", "# pre-iterate through all samples and group together", "\n", "self", ".", "all", "=", "torch", ".", "utils", ".", "data", ".", "_utils", ".", "collate", ".", "default_collate", "(", "[", "s", "for", "s", "in", "self", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.data.llff.Dataset.parse_cameras_and_bounds": [[42, 59], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "data[].view", "llff.Dataset.center_camera_poses", "numpy.load", "bounds.min"], "methods", ["home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.data.llff.Dataset.center_camera_poses"], ["", "def", "parse_cameras_and_bounds", "(", "self", ",", "opt", ")", ":", "\n", "        ", "fname", "=", "\"{}/poses_bounds.npy\"", ".", "format", "(", "self", ".", "path", ")", "\n", "data", "=", "torch", ".", "tensor", "(", "np", ".", "load", "(", "fname", ")", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "# parse cameras (intrinsics and poses)", "\n", "cam_data", "=", "data", "[", ":", ",", ":", "-", "2", "]", ".", "view", "(", "[", "-", "1", ",", "3", ",", "5", "]", ")", "# [N,3,5]", "\n", "poses_raw", "=", "cam_data", "[", "...", ",", ":", "4", "]", "# [N,3,4]", "\n", "poses_raw", "[", "...", ",", "0", "]", ",", "poses_raw", "[", "...", ",", "1", "]", "=", "poses_raw", "[", "...", ",", "1", "]", ",", "-", "poses_raw", "[", "...", ",", "0", "]", "\n", "raw_H", ",", "raw_W", ",", "self", ".", "focal", "=", "cam_data", "[", "0", ",", ":", ",", "-", "1", "]", "\n", "assert", "(", "self", ".", "raw_H", "==", "raw_H", "and", "self", ".", "raw_W", "==", "raw_W", ")", "\n", "# parse depth bounds", "\n", "bounds", "=", "data", "[", ":", ",", "-", "2", ":", "]", "# [N,2]", "\n", "scale", "=", "1.", "/", "(", "bounds", ".", "min", "(", ")", "*", "0.75", ")", "# not sure how this was determined", "\n", "poses_raw", "[", "...", ",", "3", "]", "*=", "scale", "\n", "bounds", "*=", "scale", "\n", "# roughly center camera poses", "\n", "poses_raw", "=", "self", ".", "center_camera_poses", "(", "opt", ",", "poses_raw", ")", "\n", "return", "poses_raw", ",", "bounds", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.data.llff.Dataset.center_camera_poses": [[60, 70], ["poses[].mean", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize.cross", "camera.pose.compose", "poses[].mean", "poses[].mean", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "camera.pose.invert"], "methods", ["home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.camera.Pose.compose", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.camera.Quaternion.invert"], ["", "def", "center_camera_poses", "(", "self", ",", "opt", ",", "poses", ")", ":", "\n", "# compute average pose", "\n", "        ", "center", "=", "poses", "[", "...", ",", "3", "]", ".", "mean", "(", "dim", "=", "0", ")", "\n", "v1", "=", "torch_F", ".", "normalize", "(", "poses", "[", "...", ",", "1", "]", ".", "mean", "(", "dim", "=", "0", ")", ",", "dim", "=", "0", ")", "\n", "v2", "=", "torch_F", ".", "normalize", "(", "poses", "[", "...", ",", "2", "]", ".", "mean", "(", "dim", "=", "0", ")", ",", "dim", "=", "0", ")", "\n", "v0", "=", "v1", ".", "cross", "(", "v2", ")", "\n", "pose_avg", "=", "torch", ".", "stack", "(", "[", "v0", ",", "v1", ",", "v2", ",", "center", "]", ",", "dim", "=", "-", "1", ")", "[", "None", "]", "# [1,3,4]", "\n", "# apply inverse of averaged pose", "\n", "poses", "=", "camera", ".", "pose", ".", "compose", "(", "[", "poses", ",", "camera", ".", "pose", ".", "invert", "(", "pose_avg", ")", "]", ")", "\n", "return", "poses", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.data.llff.Dataset.get_all_camera_poses": [[71, 75], ["torch.stack", "torch.stack", "torch.stack", "torch.stack", "llff.Dataset.parse_raw_camera"], "methods", ["home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.data.blender.Dataset.parse_raw_camera"], ["", "def", "get_all_camera_poses", "(", "self", ",", "opt", ")", ":", "\n", "        ", "pose_raw_all", "=", "[", "tup", "[", "1", "]", "for", "tup", "in", "self", ".", "list", "]", "\n", "pose_all", "=", "torch", ".", "stack", "(", "[", "self", ".", "parse_raw_camera", "(", "opt", ",", "p", ")", "for", "p", "in", "pose_raw_all", "]", ",", "dim", "=", "0", ")", "\n", "return", "pose_all", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.data.llff.Dataset.__getitem__": [[76, 90], ["dict", "llff.Dataset.preprocess_image", "llff.Dataset.preprocess_camera", "dict.update", "llff.Dataset.generate_augmentation", "llff.Dataset.get_image", "llff.Dataset.get_camera"], "methods", ["home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.data.blender.Dataset.preprocess_image", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.data.base.Dataset.preprocess_camera", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.data.base.Dataset.generate_augmentation", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.data.blender.Dataset.get_image", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.data.blender.Dataset.get_camera"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "opt", "=", "self", ".", "opt", "\n", "sample", "=", "dict", "(", "idx", "=", "idx", ")", "\n", "aug", "=", "self", ".", "generate_augmentation", "(", "opt", ")", "if", "self", ".", "augment", "else", "None", "\n", "image", "=", "self", ".", "images", "[", "idx", "]", "if", "opt", ".", "data", ".", "preload", "else", "self", ".", "get_image", "(", "opt", ",", "idx", ")", "\n", "image", "=", "self", ".", "preprocess_image", "(", "opt", ",", "image", ",", "aug", "=", "aug", ")", "\n", "intr", ",", "pose", "=", "self", ".", "cameras", "[", "idx", "]", "if", "opt", ".", "data", ".", "preload", "else", "self", ".", "get_camera", "(", "opt", ",", "idx", ")", "\n", "intr", ",", "pose", "=", "self", ".", "preprocess_camera", "(", "opt", ",", "intr", ",", "pose", ",", "aug", "=", "aug", ")", "\n", "sample", ".", "update", "(", "\n", "image", "=", "image", ",", "\n", "intr", "=", "intr", ",", "\n", "pose", "=", "pose", ",", "\n", ")", "\n", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.data.llff.Dataset.get_image": [[91, 95], ["PIL.Image.fromarray", "imageio.imread"], "methods", ["None"], ["", "def", "get_image", "(", "self", ",", "opt", ",", "idx", ")", ":", "\n", "        ", "image_fname", "=", "\"{}/{}\"", ".", "format", "(", "self", ".", "path_image", ",", "self", ".", "list", "[", "idx", "]", "[", "0", "]", ")", "\n", "image", "=", "PIL", ".", "Image", ".", "fromarray", "(", "imageio", ".", "imread", "(", "image_fname", ")", ")", "# directly using PIL.Image.open() leads to weird corruption....", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.data.llff.Dataset.get_camera": [[96, 103], ["torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "llff.Dataset.parse_raw_camera", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.data.blender.Dataset.parse_raw_camera"], ["", "def", "get_camera", "(", "self", ",", "opt", ",", "idx", ")", ":", "\n", "        ", "intr", "=", "torch", ".", "tensor", "(", "[", "[", "self", ".", "focal", ",", "0", ",", "self", ".", "raw_W", "/", "2", "]", ",", "\n", "[", "0", ",", "self", ".", "focal", ",", "self", ".", "raw_H", "/", "2", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", "]", ")", ".", "float", "(", ")", "\n", "pose_raw", "=", "self", ".", "list", "[", "idx", "]", "[", "1", "]", "\n", "pose", "=", "self", ".", "parse_raw_camera", "(", "opt", ",", "pose_raw", ")", "\n", "return", "intr", ",", "pose", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.data.llff.Dataset.parse_raw_camera": [[104, 110], ["camera.pose", "camera.pose.compose", "camera.pose.invert", "camera.pose.compose", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.camera.Pose.compose", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.camera.Quaternion.invert", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.camera.Pose.compose"], ["", "def", "parse_raw_camera", "(", "self", ",", "opt", ",", "pose_raw", ")", ":", "\n", "        ", "pose_flip", "=", "camera", ".", "pose", "(", "R", "=", "torch", ".", "diag", "(", "torch", ".", "tensor", "(", "[", "1", ",", "-", "1", ",", "-", "1", "]", ")", ")", ")", "\n", "pose", "=", "camera", ".", "pose", ".", "compose", "(", "[", "pose_flip", ",", "pose_raw", "[", ":", "3", "]", "]", ")", "\n", "pose", "=", "camera", ".", "pose", ".", "invert", "(", "pose", ")", "\n", "pose", "=", "camera", ".", "pose", ".", "compose", "(", "[", "pose_flip", ",", "pose", "]", ")", "\n", "return", "pose", "\n", "", "", ""]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.data.base.Dataset.__init__": [[18, 30], ["super().__init__", "int", "int"], "methods", ["home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.data.blender.Dataset.__init__"], ["class", "Model", "(", ")", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "os", ".", "makedirs", "(", "opt", ".", "output_path", ",", "exist_ok", "=", "True", ")", "\n", "\n", "", "def", "load_dataset", "(", "self", ",", "opt", ",", "eval_split", "=", "\"val\"", ")", ":", "\n", "        ", "data", "=", "importlib", ".", "import_module", "(", "\"data.{}\"", ".", "format", "(", "opt", ".", "data", ".", "dataset", ")", ")", "\n", "log", ".", "info", "(", "\"loading training data...\"", ")", "\n", "self", ".", "train_data", "=", "data", ".", "Dataset", "(", "opt", ",", "split", "=", "\"train\"", ",", "subset", "=", "opt", ".", "data", ".", "train_sub", ")", "\n", "self", ".", "train_loader", "=", "self", ".", "train_data", ".", "setup_loader", "(", "opt", ",", "shuffle", "=", "True", ")", "\n", "log", ".", "info", "(", "\"loading test data...\"", ")", "\n", "if", "opt", ".", "data", ".", "val_on_test", ":", "eval_split", "=", "\"test\"", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.data.base.Dataset.setup_loader": [[31, 41], ["torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "print", "len"], "methods", ["None"], ["self", ".", "test_data", "=", "data", ".", "Dataset", "(", "opt", ",", "split", "=", "eval_split", ",", "subset", "=", "opt", ".", "data", ".", "val_sub", ")", "\n", "self", ".", "test_loader", "=", "self", ".", "test_data", ".", "setup_loader", "(", "opt", ",", "shuffle", "=", "False", ")", "\n", "\n", "", "def", "build_networks", "(", "self", ",", "opt", ")", ":", "\n", "        ", "graph", "=", "importlib", ".", "import_module", "(", "\"model.{}\"", ".", "format", "(", "opt", ".", "model", ")", ")", "\n", "log", ".", "info", "(", "\"building networks...\"", ")", "\n", "self", ".", "graph", "=", "graph", ".", "Graph", "(", "opt", ")", ".", "to", "(", "opt", ".", "device", ")", "\n", "\n", "", "def", "setup_optimizer", "(", "self", ",", "opt", ")", ":", "\n", "        ", "log", ".", "info", "(", "\"setting up optimizers...\"", ")", "\n", "optimizer", "=", "getattr", "(", "torch", ".", "optim", ",", "opt", ".", "optim", ".", "algo", ")", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.data.base.Dataset.get_list": [[42, 44], ["None"], "methods", ["None"], ["self", ".", "optim", "=", "optimizer", "(", "[", "dict", "(", "params", "=", "self", ".", "graph", ".", "parameters", "(", ")", ",", "lr", "=", "opt", ".", "optim", ".", "lr", ")", "]", ")", "\n", "# set up scheduler", "\n", "if", "opt", ".", "optim", ".", "sched", ":", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.data.base.Dataset.preload_worker": [[45, 52], ["q.get", "load_func", "q.task_done", "idx_tqdm.update"], "methods", ["None"], ["            ", "scheduler", "=", "getattr", "(", "torch", ".", "optim", ".", "lr_scheduler", ",", "opt", ".", "optim", ".", "sched", ".", "type", ")", "\n", "kwargs", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "opt", ".", "optim", ".", "sched", ".", "items", "(", ")", "if", "k", "!=", "\"type\"", "}", "\n", "self", ".", "sched", "=", "scheduler", "(", "self", ".", "optim", ",", "**", "kwargs", ")", "\n", "\n", "", "", "def", "restore_checkpoint", "(", "self", ",", "opt", ")", ":", "\n", "        ", "epoch_start", ",", "iter_start", "=", "None", ",", "None", "\n", "if", "opt", ".", "resume", ":", "\n", "            ", "log", ".", "info", "(", "\"resuming from previous checkpoint...\"", ")", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.data.base.Dataset.preload_threading": [[53, 67], ["queue.Queue", "tqdm.tqdm", "range", "threading.Lock", "range", "queue.Queue.join", "tqdm.tqdm.close", "all", "len", "range", "len", "queue.Queue.put", "threading.Thread", "threading.Thread.start", "map", "len", "len"], "methods", ["None"], ["epoch_start", ",", "iter_start", "=", "util", ".", "restore_checkpoint", "(", "opt", ",", "self", ",", "resume", "=", "opt", ".", "resume", ")", "\n", "", "elif", "opt", ".", "load", "is", "not", "None", ":", "\n", "            ", "log", ".", "info", "(", "\"loading weights from checkpoint {}...\"", ".", "format", "(", "opt", ".", "load", ")", ")", "\n", "epoch_start", ",", "iter_start", "=", "util", ".", "restore_checkpoint", "(", "opt", ",", "self", ",", "load_name", "=", "opt", ".", "load", ")", "\n", "", "else", ":", "\n", "            ", "log", ".", "info", "(", "\"initializing weights from scratch...\"", ")", "\n", "", "self", ".", "epoch_start", "=", "epoch_start", "or", "0", "\n", "self", ".", "iter_start", "=", "iter_start", "or", "0", "\n", "\n", "", "def", "setup_visualizer", "(", "self", ",", "opt", ")", ":", "\n", "        ", "log", ".", "info", "(", "\"setting up visualizers...\"", ")", "\n", "if", "opt", ".", "tb", ":", "\n", "            ", "self", ".", "tb", "=", "torch", ".", "utils", ".", "tensorboard", ".", "SummaryWriter", "(", "log_dir", "=", "opt", ".", "output_path", ",", "flush_secs", "=", "10", ")", "\n", "", "if", "opt", ".", "visdom", ":", "\n", "# check if visdom server is runninng", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.data.base.Dataset.__getitem__": [[68, 70], ["None"], "methods", ["None"], ["            ", "is_open", "=", "util", ".", "check_socket_open", "(", "opt", ".", "visdom", ".", "server", ",", "opt", ".", "visdom", ".", "port", ")", "\n", "retry", "=", "None", "\n", "while", "not", "is_open", ":", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.data.base.Dataset.get_image": [[71, 73], ["None"], "methods", ["None"], ["                ", "retry", "=", "input", "(", "\"visdom port ({}) not open, retry? (y/n) \"", ".", "format", "(", "opt", ".", "visdom", ".", "port", ")", ")", "\n", "if", "retry", "not", "in", "[", "\"y\"", ",", "\"n\"", "]", ":", "continue", "\n", "if", "retry", "==", "\"y\"", ":", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.data.base.Dataset.generate_augmentation": [[74, 91], ["torchvision.transforms.ColorJitter.get_params", "torchvision.transforms.ColorJitter.get_params", "torchvision.transforms.ColorJitter.get_params", "torchvision.transforms.ColorJitter.get_params", "easydict.EasyDict", "numpy.random.randn", "numpy.random.rand"], "methods", ["None"], ["                    ", "is_open", "=", "util", ".", "check_socket_open", "(", "opt", ".", "visdom", ".", "server", ",", "opt", ".", "visdom", ".", "port", ")", "\n", "", "else", ":", "break", "\n", "", "self", ".", "vis", "=", "visdom", ".", "Visdom", "(", "server", "=", "opt", ".", "visdom", ".", "server", ",", "port", "=", "opt", ".", "visdom", ".", "port", ",", "env", "=", "opt", ".", "group", ")", "\n", "\n", "", "", "def", "train", "(", "self", ",", "opt", ")", ":", "\n", "# before training", "\n", "        ", "log", ".", "title", "(", "\"TRAINING START\"", ")", "\n", "self", ".", "timer", "=", "edict", "(", "start", "=", "time", ".", "time", "(", ")", ",", "it_mean", "=", "None", ")", "\n", "self", ".", "it", "=", "self", ".", "iter_start", "\n", "# training", "\n", "if", "self", ".", "iter_start", "==", "0", ":", "self", ".", "validate", "(", "opt", ",", "ep", "=", "0", ")", "\n", "for", "self", ".", "ep", "in", "range", "(", "self", ".", "epoch_start", ",", "opt", ".", "max_epoch", ")", ":", "\n", "            ", "self", ".", "train_epoch", "(", "opt", ")", "\n", "# after training", "\n", "", "if", "opt", ".", "tb", ":", "\n", "            ", "self", ".", "tb", ".", "flush", "(", ")", "\n", "self", ".", "tb", ".", "close", "(", ")", "\n", "", "if", "opt", ".", "visdom", ":", "self", ".", "vis", ".", "close", "(", ")", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.data.base.Dataset.preprocess_image": [[92, 108], ["torchvision.to_tensor", "torchvision.to_tensor", "base.Dataset.apply_color_jitter", "image.resize.resize.rotate", "int", "int", "torchvision.center_crop", "torchvision.center_crop", "image.resize.resize.resize", "torchvision.hflip", "torchvision.hflip"], "methods", ["home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.data.base.Dataset.apply_color_jitter"], ["log", ".", "title", "(", "\"TRAINING DONE\"", ")", "\n", "\n", "", "def", "train_epoch", "(", "self", ",", "opt", ")", ":", "\n", "# before train epoch", "\n", "        ", "self", ".", "graph", ".", "train", "(", ")", "\n", "# train epoch", "\n", "loader", "=", "tqdm", ".", "tqdm", "(", "self", ".", "train_loader", ",", "desc", "=", "\"training epoch {}\"", ".", "format", "(", "self", ".", "ep", "+", "1", ")", ",", "leave", "=", "False", ")", "\n", "for", "batch", "in", "loader", ":", "\n", "# train iteration", "\n", "            ", "var", "=", "edict", "(", "batch", ")", "\n", "var", "=", "util", ".", "move_to_device", "(", "var", ",", "opt", ".", "device", ")", "\n", "loss", "=", "self", ".", "train_iteration", "(", "opt", ",", "var", ",", "loader", ")", "\n", "# after train epoch", "\n", "", "lr", "=", "self", ".", "sched", ".", "get_last_lr", "(", ")", "[", "0", "]", "if", "opt", ".", "optim", ".", "sched", "else", "opt", ".", "optim", ".", "lr", "\n", "log", ".", "loss_train", "(", "opt", ",", "self", ".", "ep", "+", "1", ",", "lr", ",", "loss", ".", "all", ",", "self", ".", "timer", ")", "\n", "if", "opt", ".", "optim", ".", "sched", ":", "self", ".", "sched", ".", "step", "(", ")", "\n", "if", "(", "self", ".", "ep", "+", "1", ")", "%", "opt", ".", "freq", ".", "val", "==", "0", ":", "self", ".", "validate", "(", "opt", ",", "ep", "=", "self", ".", "ep", "+", "1", ")", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.data.base.Dataset.preprocess_camera": [[109, 118], ["intr.clone", "pose.clone"], "methods", ["None"], ["if", "(", "self", ".", "ep", "+", "1", ")", "%", "opt", ".", "freq", ".", "ckpt", "==", "0", ":", "self", ".", "save_checkpoint", "(", "opt", ",", "ep", "=", "self", ".", "ep", "+", "1", ",", "it", "=", "self", ".", "it", ")", "\n", "\n", "", "def", "train_iteration", "(", "self", ",", "opt", ",", "var", ",", "loader", ")", ":", "\n", "# before train iteration", "\n", "        ", "self", ".", "timer", ".", "it_start", "=", "time", ".", "time", "(", ")", "\n", "# train iteration", "\n", "self", ".", "optim", ".", "zero_grad", "(", ")", "\n", "var", "=", "self", ".", "graph", ".", "forward", "(", "opt", ",", "var", ",", "mode", "=", "\"train\"", ")", "\n", "loss", "=", "self", ".", "graph", ".", "compute_loss", "(", "opt", ",", "var", ",", "mode", "=", "\"train\"", ")", "\n", "loss", "=", "self", ".", "summarize_loss", "(", "opt", ",", "var", ",", "loss", ")", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.data.base.Dataset.apply_color_jitter": [[119, 128], ["PIL.Image.merge.split", "PIL.Image.merge", "color_jitter", "color_jitter.split", "PIL.Image.merge"], "methods", ["None"], ["loss", ".", "all", ".", "backward", "(", ")", "\n", "self", ".", "optim", ".", "step", "(", ")", "\n", "# after train iteration", "\n", "if", "(", "self", ".", "it", "+", "1", ")", "%", "opt", ".", "freq", ".", "scalar", "==", "0", ":", "self", ".", "log_scalars", "(", "opt", ",", "var", ",", "loss", ",", "step", "=", "self", ".", "it", "+", "1", ",", "split", "=", "\"train\"", ")", "\n", "if", "(", "self", ".", "it", "+", "1", ")", "%", "opt", ".", "freq", ".", "vis", "==", "0", ":", "self", ".", "visualize", "(", "opt", ",", "var", ",", "step", "=", "self", ".", "it", "+", "1", ",", "split", "=", "\"train\"", ")", "\n", "self", ".", "it", "+=", "1", "\n", "loader", ".", "set_postfix", "(", "it", "=", "self", ".", "it", ",", "loss", "=", "\"{:.3f}\"", ".", "format", "(", "loss", ".", "all", ")", ")", "\n", "self", ".", "timer", ".", "it_end", "=", "time", ".", "time", "(", ")", "\n", "util", ".", "update_timer", "(", "opt", ",", "self", ".", "timer", ",", "self", ".", "ep", ",", "len", "(", "loader", ")", ")", "\n", "return", "loss", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.data.base.Dataset.__len__": [[129, 131], ["len"], "methods", ["None"], ["\n", "", "def", "summarize_loss", "(", "self", ",", "opt", ",", "var", ",", "loss", ")", ":", "\n", "        ", "loss_all", "=", "0.", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.data.iphone.Dataset.__init__": [[19, 34], ["base.Dataset.__init__", "sorted", "int", "os.listdir", "iphone.Dataset.preload_threading", "iphone.Dataset.preload_threading", "len", "int", "f.split"], "methods", ["home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.data.blender.Dataset.__init__", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.data.base.Dataset.preload_threading", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.data.base.Dataset.preload_threading"], ["    ", "def", "__init__", "(", "self", ",", "opt", ",", "split", "=", "\"train\"", ",", "subset", "=", "None", ")", ":", "\n", "        ", "self", ".", "raw_H", ",", "self", ".", "raw_W", "=", "1080", ",", "1920", "\n", "super", "(", ")", ".", "__init__", "(", "opt", ",", "split", ")", "\n", "self", ".", "root", "=", "opt", ".", "data", ".", "root", "or", "\"data/iphone\"", "\n", "self", ".", "path", "=", "\"{}/{}\"", ".", "format", "(", "self", ".", "root", ",", "opt", ".", "data", ".", "scene", ")", "\n", "self", ".", "path_image", "=", "\"{}/images\"", ".", "format", "(", "self", ".", "path", ")", "\n", "self", ".", "list", "=", "sorted", "(", "os", ".", "listdir", "(", "self", ".", "path_image", ")", ",", "key", "=", "lambda", "f", ":", "int", "(", "f", ".", "split", "(", "\".\"", ")", "[", "0", "]", ")", ")", "\n", "# manually split train/val subsets", "\n", "num_val_split", "=", "int", "(", "len", "(", "self", ")", "*", "opt", ".", "data", ".", "val_ratio", ")", "\n", "self", ".", "list", "=", "self", ".", "list", "[", ":", "-", "num_val_split", "]", "if", "split", "==", "\"train\"", "else", "self", ".", "list", "[", "-", "num_val_split", ":", "]", "\n", "if", "subset", ":", "self", ".", "list", "=", "self", ".", "list", "[", ":", "subset", "]", "\n", "# preload dataset", "\n", "if", "opt", ".", "data", ".", "preload", ":", "\n", "            ", "self", ".", "images", "=", "self", ".", "preload_threading", "(", "opt", ",", "self", ".", "get_image", ")", "\n", "self", ".", "cameras", "=", "self", ".", "preload_threading", "(", "opt", ",", "self", ".", "get_camera", ",", "data_str", "=", "\"cameras\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.data.iphone.Dataset.prefetch_all_data": [[35, 39], ["torch.utils.data._utils.collate.default_collate", "torch.utils.data._utils.collate.default_collate", "torch.utils.data._utils.collate.default_collate", "torch.utils.data._utils.collate.default_collate"], "methods", ["None"], ["", "", "def", "prefetch_all_data", "(", "self", ",", "opt", ")", ":", "\n", "        ", "assert", "(", "not", "opt", ".", "data", ".", "augment", ")", "\n", "# pre-iterate through all samples and group together", "\n", "self", ".", "all", "=", "torch", ".", "utils", ".", "data", ".", "_utils", ".", "collate", ".", "default_collate", "(", "[", "s", "for", "s", "in", "self", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.data.iphone.Dataset.get_all_camera_poses": [[40, 43], ["camera.pose", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "len"], "methods", ["None"], ["", "def", "get_all_camera_poses", "(", "self", ",", "opt", ")", ":", "\n", "# poses are unknown, so just return some dummy poses (identity transform)", "\n", "        ", "return", "camera", ".", "pose", "(", "t", "=", "torch", ".", "zeros", "(", "len", "(", "self", ")", ",", "3", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.data.iphone.Dataset.__getitem__": [[44, 58], ["dict", "iphone.Dataset.preprocess_image", "iphone.Dataset.preprocess_camera", "dict.update", "iphone.Dataset.generate_augmentation", "iphone.Dataset.get_image", "iphone.Dataset.get_camera"], "methods", ["home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.data.blender.Dataset.preprocess_image", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.data.base.Dataset.preprocess_camera", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.data.base.Dataset.generate_augmentation", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.data.blender.Dataset.get_image", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.data.blender.Dataset.get_camera"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "opt", "=", "self", ".", "opt", "\n", "sample", "=", "dict", "(", "idx", "=", "idx", ")", "\n", "aug", "=", "self", ".", "generate_augmentation", "(", "opt", ")", "if", "self", ".", "augment", "else", "None", "\n", "image", "=", "self", ".", "images", "[", "idx", "]", "if", "opt", ".", "data", ".", "preload", "else", "self", ".", "get_image", "(", "opt", ",", "idx", ")", "\n", "image", "=", "self", ".", "preprocess_image", "(", "opt", ",", "image", ",", "aug", "=", "aug", ")", "\n", "intr", ",", "pose", "=", "self", ".", "cameras", "[", "idx", "]", "if", "opt", ".", "data", ".", "preload", "else", "self", ".", "get_camera", "(", "opt", ",", "idx", ")", "\n", "intr", ",", "pose", "=", "self", ".", "preprocess_camera", "(", "opt", ",", "intr", ",", "pose", ",", "aug", "=", "aug", ")", "\n", "sample", ".", "update", "(", "\n", "image", "=", "image", ",", "\n", "intr", "=", "intr", ",", "\n", "pose", "=", "pose", ",", "\n", ")", "\n", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.data.iphone.Dataset.get_image": [[59, 63], ["PIL.Image.fromarray", "imageio.imread"], "methods", ["None"], ["", "def", "get_image", "(", "self", ",", "opt", ",", "idx", ")", ":", "\n", "        ", "image_fname", "=", "\"{}/{}\"", ".", "format", "(", "self", ".", "path_image", ",", "self", ".", "list", "[", "idx", "]", ")", "\n", "image", "=", "PIL", ".", "Image", ".", "fromarray", "(", "imageio", ".", "imread", "(", "image_fname", ")", ")", "# directly using PIL.Image.open() leads to weird corruption....", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.data.iphone.Dataset.get_camera": [[64, 71], ["torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "camera.pose", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["", "def", "get_camera", "(", "self", ",", "opt", ",", "idx", ")", ":", "\n", "        ", "self", ".", "focal", "=", "self", ".", "raw_W", "*", "4.2", "/", "(", "12.8", "/", "2.55", ")", "\n", "intr", "=", "torch", ".", "tensor", "(", "[", "[", "self", ".", "focal", ",", "0", ",", "self", ".", "raw_W", "/", "2", "]", ",", "\n", "[", "0", ",", "self", ".", "focal", ",", "self", ".", "raw_H", "/", "2", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", "]", ")", ".", "float", "(", ")", "\n", "pose", "=", "camera", ".", "pose", "(", "t", "=", "torch", ".", "zeros", "(", "3", ")", ")", "# dummy pose, won't be used", "\n", "return", "intr", ",", "pose", "\n", "", "", ""]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.data.blender.Dataset.__init__": [[19, 35], ["base.Dataset.__init__", "open", "json.load", "numpy.tan", "blender.Dataset.preload_threading", "blender.Dataset.preload_threading"], "methods", ["home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.data.blender.Dataset.__init__", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.data.base.Dataset.preload_threading", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.data.base.Dataset.preload_threading"], ["    ", "def", "__init__", "(", "self", ",", "opt", ",", "split", "=", "\"train\"", ",", "subset", "=", "None", ")", ":", "\n", "        ", "self", ".", "raw_H", ",", "self", ".", "raw_W", "=", "800", ",", "800", "\n", "super", "(", ")", ".", "__init__", "(", "opt", ",", "split", ")", "\n", "self", ".", "root", "=", "opt", ".", "data", ".", "root", "or", "\"data/blender\"", "\n", "self", ".", "path", "=", "\"{}/{}\"", ".", "format", "(", "self", ".", "root", ",", "opt", ".", "data", ".", "scene", ")", "\n", "# load/parse metadata", "\n", "meta_fname", "=", "\"{}/transforms_{}.json\"", ".", "format", "(", "self", ".", "path", ",", "split", ")", "\n", "with", "open", "(", "meta_fname", ")", "as", "file", ":", "\n", "            ", "self", ".", "meta", "=", "json", ".", "load", "(", "file", ")", "\n", "", "self", ".", "list", "=", "self", ".", "meta", "[", "\"frames\"", "]", "\n", "self", ".", "focal", "=", "0.5", "*", "self", ".", "raw_W", "/", "np", ".", "tan", "(", "0.5", "*", "self", ".", "meta", "[", "\"camera_angle_x\"", "]", ")", "\n", "if", "subset", ":", "self", ".", "list", "=", "self", ".", "list", "[", ":", "subset", "]", "\n", "# preload dataset", "\n", "if", "opt", ".", "data", ".", "preload", ":", "\n", "            ", "self", ".", "images", "=", "self", ".", "preload_threading", "(", "opt", ",", "self", ".", "get_image", ")", "\n", "self", ".", "cameras", "=", "self", ".", "preload_threading", "(", "opt", ",", "self", ".", "get_camera", ",", "data_str", "=", "\"cameras\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.data.blender.Dataset.prefetch_all_data": [[36, 40], ["torch.utils.data._utils.collate.default_collate", "torch.utils.data._utils.collate.default_collate", "torch.utils.data._utils.collate.default_collate", "torch.utils.data._utils.collate.default_collate"], "methods", ["None"], ["", "", "def", "prefetch_all_data", "(", "self", ",", "opt", ")", ":", "\n", "        ", "assert", "(", "not", "opt", ".", "data", ".", "augment", ")", "\n", "# pre-iterate through all samples and group together", "\n", "self", ".", "all", "=", "torch", ".", "utils", ".", "data", ".", "_utils", ".", "collate", ".", "default_collate", "(", "[", "s", "for", "s", "in", "self", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.data.blender.Dataset.get_all_camera_poses": [[41, 45], ["torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "blender.Dataset.parse_raw_camera"], "methods", ["home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.data.blender.Dataset.parse_raw_camera"], ["", "def", "get_all_camera_poses", "(", "self", ",", "opt", ")", ":", "\n", "        ", "pose_raw_all", "=", "[", "torch", ".", "tensor", "(", "f", "[", "\"transform_matrix\"", "]", ",", "dtype", "=", "torch", ".", "float32", ")", "for", "f", "in", "self", ".", "list", "]", "\n", "pose_canon_all", "=", "torch", ".", "stack", "(", "[", "self", ".", "parse_raw_camera", "(", "opt", ",", "p", ")", "for", "p", "in", "pose_raw_all", "]", ",", "dim", "=", "0", ")", "\n", "return", "pose_canon_all", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.data.blender.Dataset.__getitem__": [[46, 60], ["dict", "blender.Dataset.preprocess_image", "blender.Dataset.preprocess_camera", "dict.update", "blender.Dataset.generate_augmentation", "blender.Dataset.get_image", "blender.Dataset.get_camera"], "methods", ["home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.data.blender.Dataset.preprocess_image", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.data.base.Dataset.preprocess_camera", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.data.base.Dataset.generate_augmentation", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.data.blender.Dataset.get_image", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.data.blender.Dataset.get_camera"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "opt", "=", "self", ".", "opt", "\n", "sample", "=", "dict", "(", "idx", "=", "idx", ")", "\n", "aug", "=", "self", ".", "generate_augmentation", "(", "opt", ")", "if", "self", ".", "augment", "else", "None", "\n", "image", "=", "self", ".", "images", "[", "idx", "]", "if", "opt", ".", "data", ".", "preload", "else", "self", ".", "get_image", "(", "opt", ",", "idx", ")", "\n", "image", "=", "self", ".", "preprocess_image", "(", "opt", ",", "image", ",", "aug", "=", "aug", ")", "\n", "intr", ",", "pose", "=", "self", ".", "cameras", "[", "idx", "]", "if", "opt", ".", "data", ".", "preload", "else", "self", ".", "get_camera", "(", "opt", ",", "idx", ")", "\n", "intr", ",", "pose", "=", "self", ".", "preprocess_camera", "(", "opt", ",", "intr", ",", "pose", ",", "aug", "=", "aug", ")", "\n", "sample", ".", "update", "(", "\n", "image", "=", "image", ",", "\n", "intr", "=", "intr", ",", "\n", "pose", "=", "pose", ",", "\n", ")", "\n", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.data.blender.Dataset.get_image": [[61, 65], ["PIL.Image.fromarray", "imageio.imread"], "methods", ["None"], ["", "def", "get_image", "(", "self", ",", "opt", ",", "idx", ")", ":", "\n", "        ", "image_fname", "=", "\"{}/{}.png\"", ".", "format", "(", "self", ".", "path", ",", "self", ".", "list", "[", "idx", "]", "[", "\"file_path\"", "]", ")", "\n", "image", "=", "PIL", ".", "Image", ".", "fromarray", "(", "imageio", ".", "imread", "(", "image_fname", ")", ")", "# directly using PIL.Image.open() leads to weird corruption....", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.data.blender.Dataset.preprocess_image": [[66, 72], ["super().preprocess_image"], "methods", ["home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.data.blender.Dataset.preprocess_image"], ["", "def", "preprocess_image", "(", "self", ",", "opt", ",", "image", ",", "aug", "=", "None", ")", ":", "\n", "        ", "image", "=", "super", "(", ")", ".", "preprocess_image", "(", "opt", ",", "image", ",", "aug", "=", "aug", ")", "\n", "rgb", ",", "mask", "=", "image", "[", ":", "3", "]", ",", "image", "[", "3", ":", "]", "\n", "if", "opt", ".", "data", ".", "bgcolor", "is", "not", "None", ":", "\n", "            ", "rgb", "=", "rgb", "*", "mask", "+", "opt", ".", "data", ".", "bgcolor", "*", "(", "1", "-", "mask", ")", "\n", "", "return", "rgb", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.data.blender.Dataset.get_camera": [[73, 80], ["torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "blender.Dataset.parse_raw_camera", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.data.blender.Dataset.parse_raw_camera"], ["", "def", "get_camera", "(", "self", ",", "opt", ",", "idx", ")", ":", "\n", "        ", "intr", "=", "torch", ".", "tensor", "(", "[", "[", "self", ".", "focal", ",", "0", ",", "self", ".", "raw_W", "/", "2", "]", ",", "\n", "[", "0", ",", "self", ".", "focal", ",", "self", ".", "raw_H", "/", "2", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", "]", ")", ".", "float", "(", ")", "\n", "pose_raw", "=", "torch", ".", "tensor", "(", "self", ".", "list", "[", "idx", "]", "[", "\"transform_matrix\"", "]", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "pose", "=", "self", ".", "parse_raw_camera", "(", "opt", ",", "pose_raw", ")", "\n", "return", "intr", ",", "pose", "\n", "\n"]], "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.data.blender.Dataset.parse_raw_camera": [[81, 86], ["camera.pose", "camera.pose.compose", "camera.pose.invert", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.camera.Pose.compose", "home.repos.pwc.inspect_result.chenhsuanlin_bundle-adjusting-NeRF.None.camera.Quaternion.invert"], ["", "def", "parse_raw_camera", "(", "self", ",", "opt", ",", "pose_raw", ")", ":", "\n", "        ", "pose_flip", "=", "camera", ".", "pose", "(", "R", "=", "torch", ".", "diag", "(", "torch", ".", "tensor", "(", "[", "1", ",", "-", "1", ",", "-", "1", "]", ")", ")", ")", "\n", "pose", "=", "camera", ".", "pose", ".", "compose", "(", "[", "pose_flip", ",", "pose_raw", "[", ":", "3", "]", "]", ")", "\n", "pose", "=", "camera", ".", "pose", ".", "invert", "(", "pose", ")", "\n", "return", "pose", "\n", "", "", ""]]}