{"home.repos.pwc.inspect_result.xinmei9322_semicrowd.None.bayesscdc_crowd.get_global_params": [[29, 71], ["distributions.niw.standard_to_natural", "distributions.beta.standard_to_natural", "tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.stack", "tensorflow.get_variable", "tensorflow.stack", "tensorflow.get_variable", "tensorflow.stack", "tensorflow.get_variable", "tensorflow.constant", "tensorflow.zeros", "tensorflow.constant", "tensorflow.random_uniform", "tensorflow.eye", "tensorflow.ones", "bayesscdc_crowd.get_global_params.init_niw_param"], "function", ["home.repos.pwc.inspect_result.xinmei9322_semicrowd.distributions.beta.standard_to_natural", "home.repos.pwc.inspect_result.xinmei9322_semicrowd.distributions.beta.standard_to_natural"], ["def", "get_global_params", "(", "scope", ",", "d", ",", "K", ",", "W", ",", "alpha", ",", "niw_conc", ",", "tau", ",", "random_scale", "=", "None", ",", "\n", "trainable", "=", "True", ")", ":", "\n", "    ", "def", "init_niw_param", "(", ")", ":", "\n", "# nu: scalar, S: (d, d), m: (d,) kappa: scalar", "\n", "# TODO: nu different to orig code, different init of nu, S?", "\n", "        ", "nu", ",", "S", ",", "m", ",", "kappa", "=", "(", "tf", ".", "constant", "(", "d", "+", "niw_conc", ",", "dtype", "=", "tf", ".", "float32", ")", ",", "\n", "(", "d", "+", "niw_conc", ")", "*", "tf", ".", "eye", "(", "d", ")", ",", "\n", "tf", ".", "zeros", "(", "d", ")", ",", "\n", "tf", ".", "constant", "(", "niw_conc", ",", "dtype", "=", "tf", ".", "float32", ")", ")", "\n", "if", "random_scale", ":", "\n", "            ", "m", "=", "m", "+", "random_scale", "*", "tf", ".", "random_normal", "(", "m", ".", "shape", ")", "\n", "", "return", "niw", ".", "standard_to_natural", "(", "m", ",", "kappa", ",", "S", ",", "nu", ")", "\n", "\n", "", "def", "init_beta_param", "(", "tau_1", ",", "tau_2", ")", ":", "\n", "# TODO: add randomness for variational", "\n", "        ", "return", "beta", ".", "standard_to_natural", "(", "tau_1", ",", "tau_2", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "scope", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ")", ":", "\n", "        ", "if", "random_scale", ":", "\n", "            ", "dir_nat", "=", "tf", ".", "random_uniform", "(", "[", "K", "]", ",", "minval", "=", "0", ",", "maxval", "=", "alpha", "-", "1.", ")", "\n", "", "else", ":", "\n", "            ", "dir_nat", "=", "tf", ".", "ones", "(", "[", "K", "]", ")", "*", "(", "alpha", "-", "1.", ")", "\n", "# [K]", "\n", "", "dir_params", "=", "tf", ".", "get_variable", "(", "\n", "\"dir_params\"", ",", "dtype", "=", "tf", ".", "float32", ",", "initializer", "=", "dir_nat", ",", "\n", "trainable", "=", "trainable", ")", "\n", "# [K, d + d^2 + 2]", "\n", "niw_nat", "=", "tf", ".", "stack", "(", "[", "init_niw_param", "(", ")", "for", "_", "in", "range", "(", "K", ")", "]", ")", "\n", "niw_params", "=", "tf", ".", "get_variable", "(", "\n", "\"niw_params\"", ",", "dtype", "=", "tf", ".", "float32", ",", "initializer", "=", "niw_nat", ",", "\n", "trainable", "=", "trainable", ")", "\n", "# [W, 2]", "\n", "alpha_nat", "=", "tf", ".", "stack", "(", "[", "init_beta_param", "(", "tau", ",", "1", ")", "for", "_", "in", "range", "(", "W", ")", "]", ")", "\n", "alpha_params", "=", "tf", ".", "get_variable", "(", "\n", "\"alpha_params\"", ",", "dtype", "=", "tf", ".", "float32", ",", "initializer", "=", "alpha_nat", ",", "\n", "trainable", "=", "trainable", ")", "\n", "# [W, 2]", "\n", "beta_nat", "=", "tf", ".", "stack", "(", "[", "init_beta_param", "(", "tau", ",", "1", ")", "for", "_", "in", "range", "(", "W", ")", "]", ")", "\n", "beta_params", "=", "tf", ".", "get_variable", "(", "\n", "\"beta_params\"", ",", "dtype", "=", "tf", ".", "float32", ",", "initializer", "=", "beta_nat", ",", "\n", "trainable", "=", "trainable", ")", "\n", "", "return", "dir_params", ",", "niw_params", ",", "alpha_params", ",", "beta_params", "\n", "\n"]], "home.repos.pwc.inspect_result.xinmei9322_semicrowd.None.bayesscdc_crowd.global_expected_stats": [[73, 84], ["distributions.dirichlet.expected_stats", "distributions.niw.expected_stats", "distributions.beta.expected_stats", "distributions.beta.expected_stats"], "function", ["home.repos.pwc.inspect_result.xinmei9322_semicrowd.distributions.dirichlet.expected_stats", "home.repos.pwc.inspect_result.xinmei9322_semicrowd.distributions.dirichlet.expected_stats", "home.repos.pwc.inspect_result.xinmei9322_semicrowd.distributions.dirichlet.expected_stats", "home.repos.pwc.inspect_result.xinmei9322_semicrowd.distributions.dirichlet.expected_stats"], ["", "def", "global_expected_stats", "(", "global_params", ",", "d", ")", ":", "\n", "    ", "dir_params", ",", "niw_params", ",", "alpha_params", ",", "beta_params", "=", "global_params", "\n", "# [K]", "\n", "dir_stats", "=", "dirichlet", ".", "expected_stats", "(", "dir_params", ")", "\n", "# [K, d + d^2 + 2]", "\n", "niw_stats", "=", "niw", ".", "expected_stats", "(", "niw_params", ",", "d", ")", "\n", "# [W, 2]", "\n", "alpha_stats", "=", "beta", ".", "expected_stats", "(", "alpha_params", ")", "\n", "# [W, 2]", "\n", "beta_stats", "=", "beta", ".", "expected_stats", "(", "beta_params", ")", "\n", "return", "dir_stats", ",", "niw_stats", ",", "alpha_stats", ",", "beta_stats", "\n", "\n"]], "home.repos.pwc.inspect_result.xinmei9322_semicrowd.None.bayesscdc_crowd.encoder": [[86, 94], ["zhusuan.reuse", "tensorflow.layers.dense", "tensorflow.layers.dense", "tensorflow.layers.dense", "tensorflow.layers.dense", "tensorflow.to_float"], "function", ["None"], ["", "@", "zs", ".", "reuse", "(", "\"encoder\"", ")", "\n", "def", "encoder", "(", "o", ",", "d", ")", ":", "\n", "    ", "h", "=", "tf", ".", "layers", ".", "dense", "(", "tf", ".", "to_float", "(", "o", ")", ",", "500", ",", "activation", "=", "tf", ".", "nn", ".", "relu", ")", "\n", "h", "=", "tf", ".", "layers", ".", "dense", "(", "h", ",", "500", ",", "activation", "=", "tf", ".", "nn", ".", "relu", ")", "\n", "x_param_1", "=", "tf", ".", "layers", ".", "dense", "(", "h", ",", "d", ")", "\n", "x_sigma_inv", "=", "tf", ".", "layers", ".", "dense", "(", "h", ",", "d", ",", "activation", "=", "tf", ".", "nn", ".", "softplus", ")", "\n", "x_param_2", "=", "-", "0.5", "*", "x_sigma_inv", "\n", "return", "x_param_1", ",", "x_param_2", "\n", "\n"]], "home.repos.pwc.inspect_result.xinmei9322_semicrowd.None.bayesscdc_crowd.decoder": [[96, 103], ["zhusuan.reuse", "tensorflow.layers.dense", "tensorflow.layers.dense", "tensorflow.layers.dense", "zhusuan.distributions.Bernoulli", "tensorflow.sigmoid"], "function", ["None"], ["", "@", "zs", ".", "reuse", "(", "\"decoder\"", ")", "\n", "def", "decoder", "(", "x", ",", "o_dim", ")", ":", "\n", "    ", "h", "=", "tf", ".", "layers", ".", "dense", "(", "x", ",", "500", ",", "activation", "=", "tf", ".", "nn", ".", "relu", ")", "\n", "h", "=", "tf", ".", "layers", ".", "dense", "(", "h", ",", "500", ",", "activation", "=", "tf", ".", "nn", ".", "relu", ")", "\n", "o_logits", "=", "tf", ".", "layers", ".", "dense", "(", "h", ",", "o_dim", ")", "\n", "o_dist", "=", "zs", ".", "distributions", ".", "Bernoulli", "(", "o_logits", ",", "group_ndims", "=", "1", ")", "\n", "return", "o_dist", ",", "tf", ".", "sigmoid", "(", "o_logits", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xinmei9322_semicrowd.None.bayesscdc_crowd.x_mean_field": [[105, 115], ["tensorflow.matmul", "distributions.mvn.expected_stats"], "function", ["home.repos.pwc.inspect_result.xinmei9322_semicrowd.distributions.dirichlet.expected_stats"], ["", "def", "x_mean_field", "(", "niw_stats", ",", "z_stats", ",", "x_obs_param", ",", "d", ")", ":", "\n", "# niw_stats: [K, d + d^2 + 2], z_stats: [M, K]", "\n", "# x_prior_term: [M, d + d^2]", "\n", "    ", "x_prior_term", "=", "tf", ".", "matmul", "(", "z_stats", ",", "niw_stats", "[", ":", ",", ":", "-", "2", "]", ")", "\n", "# x_obs_param: [M, d + d^2]", "\n", "# x_nat_param: [M, d + d^2]", "\n", "x_nat_param", "=", "x_prior_term", "+", "x_obs_param", "\n", "# x_stats: [M, d + d^2]", "\n", "x_stats", "=", "mvn", ".", "expected_stats", "(", "x_nat_param", ",", "d", ")", "\n", "return", "x_nat_param", ",", "x_stats", "\n", "\n"]], "home.repos.pwc.inspect_result.xinmei9322_semicrowd.None.bayesscdc_crowd.z_mean_field": [[117, 137], ["tensorflow.concat", "distributions.catgorical.expected_stats", "tensorflow.shape", "tensorflow.matmul", "tensorflow.sparse_tensor_dense_matmul", "tensorflow.ones"], "function", ["home.repos.pwc.inspect_result.xinmei9322_semicrowd.distributions.dirichlet.expected_stats"], ["", "def", "z_mean_field", "(", "global_stats", ",", "x_stats", ",", "prev_z_stats", ",", "nb_weights", "=", "None", ")", ":", "\n", "# dir_stats: [K]", "\n", "    ", "dir_stats", ",", "niw_stats", ",", "alpha_stats", ",", "beta_stats", "=", "global_stats", "\n", "# x_stats: [M, d + d^2], niw_stats: [K, d + d^2 + 2]", "\n", "M", "=", "tf", ".", "shape", "(", "x_stats", ")", "[", "0", "]", "\n", "# x_stats_pad: [M, d + d^2 + 2]", "\n", "x_stats_pad", "=", "tf", ".", "concat", "(", "[", "x_stats", ",", "tf", ".", "ones", "(", "[", "M", ",", "2", "]", ")", "]", ",", "axis", "=", "-", "1", ")", "\n", "# z_nat_param: [M, K]", "\n", "z_nat_param", "=", "dir_stats", "+", "tf", ".", "matmul", "(", "x_stats_pad", ",", "niw_stats", ",", "\n", "transpose_b", "=", "True", ")", "\n", "if", "nb_weights", "is", "not", "None", ":", "\n", "# nb_weights: [M, M] (sparse), prev_z_stats: [M, K]", "\n", "# rel_term: [M, K]", "\n", "# TODO: verify if there is 1/2.", "\n", "        ", "rel_term", "=", "tf", ".", "sparse_tensor_dense_matmul", "(", "nb_weights", ",", "prev_z_stats", ")", "\n", "# z_nat_param: [M, K]", "\n", "z_nat_param", "+=", "rel_term", "\n", "# z_stats: [M, K]", "\n", "", "z_stats", "=", "catgorical", ".", "expected_stats", "(", "z_nat_param", ")", "\n", "return", "z_nat_param", ",", "z_stats", "\n", "\n"]], "home.repos.pwc.inspect_result.xinmei9322_semicrowd.None.bayesscdc_crowd.annotation_log_likelihood": [[139, 153], ["tensorflow.sparse_reduce_sum", "tensorflow.sparse_reduce_sum", "tensorflow.sparse_reduce_sum"], "function", ["None"], ["", "def", "annotation_log_likelihood", "(", "beta_stats", ",", "z_inner_stats", ",", "L", ",", "I", ",", "nb_weights", ")", ":", "\n", "# z_inner_stats: [M, M], nb_weights: [M, M] (sparse)", "\n", "# term_1: [M, M] (sparse)", "\n", "    ", "term_1", "=", "z_inner_stats", "*", "nb_weights", "\n", "# L: [M, M, W] (sparse), beta_stats: [W, 2]", "\n", "# term_2: [M, M, W] (sparse)", "\n", "term_2", "=", "L", "*", "(", "beta_stats", "[", ":", ",", "1", "]", "-", "beta_stats", "[", ":", ",", "0", "]", ")", "\n", "# I: [M, M, W] (sparse)", "\n", "# term_3: [M, M, W] (sparse)", "\n", "term_3", "=", "I", "*", "beta_stats", "[", ":", ",", "0", "]", "\n", "# ret: []", "\n", "return", "0.5", "*", "(", "tf", ".", "sparse_reduce_sum", "(", "term_1", ")", "+", "\n", "tf", ".", "sparse_reduce_sum", "(", "term_2", ")", "+", "\n", "tf", ".", "sparse_reduce_sum", "(", "term_3", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xinmei9322_semicrowd.None.bayesscdc_crowd.local_kl_z": [[155, 164], ["distributions.exp_family_kl", "tensorflow.reduce_logsumexp"], "function", ["home.repos.pwc.inspect_result.xinmei9322_semicrowd.distributions.util.exp_family_kl"], ["", "def", "local_kl_z", "(", "z_nat_param", ",", "dir_stats", ",", "z_stats", ")", ":", "\n", "# z_nat_param: [M, K]", "\n", "# dir_stats: [K]", "\n", "# z_stats: [M, K]", "\n", "    ", "z_nat_param", "=", "z_nat_param", "-", "tf", ".", "reduce_logsumexp", "(", "z_nat_param", ",", "axis", "=", "-", "1", ",", "\n", "keepdims", "=", "True", ")", "\n", "nat_param_diff", "=", "z_nat_param", "-", "dir_stats", "\n", "# ret: [M]", "\n", "return", "exp_family_kl", "(", "nat_param_diff", ",", "z_stats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xinmei9322_semicrowd.None.bayesscdc_crowd.local_kl_x": [[166, 180], ["tensorflow.matmul", "distributions.exp_family_kl", "distributions.mvn.log_partition", "tensorflow.reduce_sum"], "function", ["home.repos.pwc.inspect_result.xinmei9322_semicrowd.distributions.util.exp_family_kl", "home.repos.pwc.inspect_result.xinmei9322_semicrowd.distributions.dirichlet.log_partition"], ["", "def", "local_kl_x", "(", "x_nat_param", ",", "niw_stats", ",", "z_stats", ",", "x_stats", ",", "d", ")", ":", "\n", "# x_nat_param: [M, d + d^2]", "\n", "# niw_stats: [K, d + d^2 + 2]", "\n", "# z_stats: [M, K]", "\n", "# x_stats: [M, d + d^2]", "\n", "# x_prior_term: [M, d + d^2 + 2]", "\n", "    ", "x_prior_term", "=", "tf", ".", "matmul", "(", "z_stats", ",", "niw_stats", ")", "\n", "# nat_param_diff: [M, d + d^2]", "\n", "nat_param_diff", "=", "x_nat_param", "-", "x_prior_term", "[", ":", ",", ":", "-", "2", "]", "\n", "# log_partition_diff: [M]", "\n", "log_z_diff", "=", "mvn", ".", "log_partition", "(", "x_nat_param", ",", "d", ")", "+", "tf", ".", "reduce_sum", "(", "\n", "x_prior_term", "[", ":", ",", "-", "2", ":", "]", ",", "axis", "=", "-", "1", ")", "\n", "# ret: [M]", "\n", "return", "exp_family_kl", "(", "nat_param_diff", ",", "x_stats", ",", "log_z_diff", "=", "log_z_diff", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xinmei9322_semicrowd.None.bayesscdc_crowd.global_kl": [[182, 210], ["bayesscdc_crowd.global_kl._kl_helper"], "function", ["None"], ["", "def", "global_kl", "(", "prior_global_params", ",", "global_params", ",", "global_stats", ",", "d", ")", ":", "\n", "    ", "prior_dir_param", ",", "prior_niw_param", ",", "prior_alpha_param", ",", "prior_beta_param", "=", "prior_global_params", "\n", "\n", "def", "_kl_helper", "(", "log_partition", ",", "param", ",", "prior_param", ",", "stats", ")", ":", "\n", "        ", "nat_diff", "=", "param", "-", "prior_param", "\n", "log_z_diff", "=", "log_partition", "(", "param", ")", "-", "log_partition", "(", "prior_param", ")", "\n", "return", "exp_family_kl", "(", "nat_diff", ",", "stats", ",", "log_z_diff", "=", "log_z_diff", ")", "\n", "\n", "# dir_param: [K], niw_param: [K, d + d^2 + 2]", "\n", "# alpha_params: [W, 2], beta_params: [W, 2]", "\n", "", "dir_param", ",", "niw_param", ",", "alpha_param", ",", "beta_param", "=", "global_params", "\n", "# dir_stats: [K], niw_stats: [K, d + d^2 + 2]", "\n", "# alpha_stats: [W, 2], beta_stats: [W, 2]", "\n", "dir_stats", ",", "niw_stats", ",", "alpha_stats", ",", "beta_stats", "=", "global_stats", "\n", "# dir_kl: []", "\n", "dir_kl", "=", "_kl_helper", "(", "dirichlet", ".", "log_partition", ",", "dir_param", ",", "prior_dir_param", ",", "\n", "dir_stats", ")", "\n", "# niw_kl: [K]", "\n", "niw_kl", "=", "_kl_helper", "(", "lambda", "x", ":", "niw", ".", "log_partition", "(", "x", ",", "d", ")", ",", "niw_param", ",", "\n", "prior_niw_param", ",", "niw_stats", ")", "\n", "# alpha_kl, beta_kl: [W]", "\n", "alpha_kl", "=", "_kl_helper", "(", "beta", ".", "log_partition", ",", "alpha_param", ",", "prior_alpha_param", ",", "\n", "alpha_stats", ")", "\n", "beta_kl", "=", "_kl_helper", "(", "beta", ".", "log_partition", ",", "beta_param", ",", "prior_beta_param", ",", "\n", "beta_stats", ")", "\n", "return", "dir_kl", "+", "tf", ".", "reduce_sum", "(", "niw_kl", ",", "axis", "=", "0", ")", "+", "tf", ".", "reduce_sum", "(", "\n", "alpha_kl", ",", "axis", "=", "0", ")", "+", "tf", ".", "reduce_sum", "(", "beta_kl", ",", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xinmei9322_semicrowd.None.bayesscdc_crowd.elbo": [[212, 223], ["tensorflow.reduce_mean"], "function", ["None"], ["", "def", "elbo", "(", "log_po_term", ",", "local_kl_z", ",", "local_kl_x", ",", "global_kl", ",", "N", ",", "\n", "ann_ll", "=", "None", ",", "ann_subsample_factor", "=", "None", ")", ":", "\n", "# log_po_term: [M]", "\n", "# local_kl_z: [M], local_kl_x: [M]", "\n", "# global_kl: []", "\n", "    ", "obj", "=", "tf", ".", "reduce_mean", "(", "log_po_term", "-", "local_kl_z", "-", "local_kl_x", ")", "-", "global_kl", "/", "N", "\n", "# ann_ll: []", "\n", "if", "ann_ll", "is", "not", "None", ":", "\n", "        ", "obj", "+=", "ann_ll", "*", "ann_subsample_factor", "/", "N", "\n", "# ret: []", "\n", "", "return", "obj", "\n", "\n"]], "home.repos.pwc.inspect_result.xinmei9322_semicrowd.None.bayesscdc_crowd.variational_message_passing": [[225, 327], ["bayesscdc_crowd.global_expected_stats", "distributions.normalize", "bayesscdc_crowd.encoder", "tensorflow.reshape", "tensorflow.concat", "six.moves.range", "distributions.mvn.sample", "bayesscdc_crowd.decoder", "o_dist.log_prob", "bayesscdc_crowd.local_kl_x", "bayesscdc_crowd.local_kl_z", "bayesscdc_crowd.global_kl", "bayesscdc_crowd.elbo", "tensorflow.reduce_mean", "tensorflow.shape", "tensorflow.random_uniform", "tensorflow.matrix_diag", "tensorflow.sparse_add", "tensorflow.sparse_reduce_sum_sparse", "bayesscdc_crowd.x_mean_field", "bayesscdc_crowd.z_mean_field", "tensorflow.matmul", "bayesscdc_crowd.annotation_log_likelihood", "tensorflow.matmul", "tensorflow.to_float", "tensorflow.sparse_transpose", "tensorflow.sparse_transpose", "tensorflow.sparse_reduce_sum", "tensorflow.sparse_reduce_sum", "tensorflow.sparse_reduce_sum", "tensorflow.sparse_reduce_sum", "updates.extend", "tensorflow.concat", "tensorflow.sparse_add", "tensorflow.stack", "tensorflow.stack", "six.moves.range", "len", "tensorflow.ones", "tensorflow.ones", "tensorflow.shape"], "function", ["home.repos.pwc.inspect_result.xinmei9322_semicrowd.None.bayesscdc_unsup.global_expected_stats", "home.repos.pwc.inspect_result.xinmei9322_semicrowd.None.bayesscdc_unsup.encoder", "home.repos.pwc.inspect_result.xinmei9322_semicrowd.distributions.mvn.sample", "home.repos.pwc.inspect_result.xinmei9322_semicrowd.None.bayesscdc_unsup.decoder", "home.repos.pwc.inspect_result.xinmei9322_semicrowd.None.bayesscdc_unsup.local_kl_x", "home.repos.pwc.inspect_result.xinmei9322_semicrowd.None.bayesscdc_unsup.local_kl_z", "home.repos.pwc.inspect_result.xinmei9322_semicrowd.None.bayesscdc_unsup.global_kl", "home.repos.pwc.inspect_result.xinmei9322_semicrowd.None.bayesscdc_unsup.elbo", "home.repos.pwc.inspect_result.xinmei9322_semicrowd.None.bayesscdc_unsup.x_mean_field", "home.repos.pwc.inspect_result.xinmei9322_semicrowd.None.bayesscdc_unsup.z_mean_field", "home.repos.pwc.inspect_result.xinmei9322_semicrowd.None.bayesscdc_crowd.annotation_log_likelihood"], ["", "def", "variational_message_passing", "(", "\n", "prior_global_params", ",", "global_params", ",", "o", ",", "o_dim", ",", "d", ",", "K", ",", "N", ",", "\n", "L", "=", "None", ",", "I", "=", "None", ",", "n_ann", "=", "None", ",", "ann_batch_size", "=", "None", ",", "n_iters", "=", "100", ")", ":", "\n", "    ", "global_stats", "=", "global_expected_stats", "(", "global_params", ",", "d", ")", "\n", "dir_stats", ",", "niw_stats", ",", "alpha_stats", ",", "beta_stats", "=", "global_stats", "\n", "M", "=", "tf", ".", "shape", "(", "o", ")", "[", "0", "]", "\n", "\n", "# Initialize z_stats", "\n", "z_stats", "=", "normalize", "(", "tf", ".", "random_uniform", "(", "[", "M", ",", "K", "]", ",", "1e-8", ",", "maxval", "=", "1", ")", ")", "\n", "\n", "# Encode", "\n", "# h: [M, d], J: [M, d]", "\n", "h", ",", "J", "=", "encoder", "(", "o", ",", "d", ")", "\n", "# J: [M, d * d]", "\n", "J", "=", "tf", ".", "reshape", "(", "tf", ".", "matrix_diag", "(", "J", ")", ",", "[", "M", ",", "d", "*", "d", "]", ")", "\n", "# x_obs_param: [M, d + d * d]", "\n", "x_obs_param", "=", "tf", ".", "concat", "(", "[", "h", ",", "J", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n", "# Prepare relational info", "\n", "if", "L", "is", "not", "None", ":", "\n", "# I, L: [M, M, W] (sparse), alpha_stats: [W, 2]", "\n", "# nb_weights_per_worker: [M, M, W] (sparse)", "\n", "        ", "nb_weights_per_worker", "=", "tf", ".", "sparse_add", "(", "\n", "(", "alpha_stats", "[", ":", ",", "1", "]", "-", "beta_stats", "[", ":", ",", "0", "]", ")", "*", "I", ",", "\n", "(", "alpha_stats", "[", ":", ",", "0", "]", "-", "alpha_stats", "[", ":", ",", "1", "]", "+", "\n", "beta_stats", "[", ":", ",", "0", "]", "-", "beta_stats", "[", ":", ",", "1", "]", ")", "*", "L", ")", "\n", "# nb_weights: [M, M] (sparse)", "\n", "nb_weights", "=", "tf", ".", "sparse_reduce_sum_sparse", "(", "nb_weights_per_worker", ",", "axis", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "        ", "nb_weights", "=", "None", "\n", "\n", "# Message passing", "\n", "", "for", "t", "in", "range", "(", "n_iters", ")", ":", "\n", "        ", "x_nat_param", ",", "x_stats", "=", "x_mean_field", "(", "niw_stats", ",", "z_stats", ",", "x_obs_param", ",", "d", ")", "\n", "z_nat_param", ",", "z_stats", "=", "z_mean_field", "(", "global_stats", ",", "x_stats", ",", "z_stats", ",", "\n", "nb_weights", "=", "nb_weights", ")", "\n", "\n", "# Decode", "\n", "# x: [M, d]", "\n", "", "x", "=", "mvn", ".", "sample", "(", "x_nat_param", ",", "d", ")", "\n", "o_dist", ",", "_", "=", "decoder", "(", "x", ",", "o_dim", ")", "\n", "\n", "# Compute ELBO", "\n", "# log_po_term: [M]", "\n", "log_po_term", "=", "o_dist", ".", "log_prob", "(", "o", ")", "\n", "# log_p_ann_term: []", "\n", "if", "L", "is", "not", "None", ":", "\n", "# z_stats: [M, K], z_inner_stats: [M, M]", "\n", "        ", "z_inner_stats", "=", "tf", ".", "matmul", "(", "z_stats", ",", "z_stats", ",", "transpose_b", "=", "True", ")", "\n", "log_p_ann_term", "=", "annotation_log_likelihood", "(", "\n", "beta_stats", ",", "z_inner_stats", ",", "L", ",", "I", ",", "nb_weights", ")", "\n", "ann_subsample_factor", "=", "n_ann", "/", "ann_batch_size", "\n", "", "else", ":", "\n", "        ", "z_inner_stats", "=", "None", "\n", "log_p_ann_term", "=", "None", "\n", "ann_subsample_factor", "=", "1", "\n", "# log_kl_x_term: [M]", "\n", "", "local_kl_x_term", "=", "local_kl_x", "(", "x_nat_param", ",", "niw_stats", ",", "z_stats", ",", "x_stats", ",", "d", ")", "\n", "# log_kl_z_term: [M]", "\n", "local_kl_z_term", "=", "local_kl_z", "(", "z_nat_param", ",", "dir_stats", ",", "z_stats", ")", "\n", "# global_kl_term: []", "\n", "global_kl_term", "=", "global_kl", "(", "\n", "prior_global_params", ",", "global_params", ",", "global_stats", ",", "d", ")", "\n", "lower_bound", "=", "elbo", "(", "\n", "log_po_term", ",", "local_kl_z_term", ",", "local_kl_x_term", ",", "global_kl_term", ",", "N", ",", "\n", "ann_ll", "=", "log_p_ann_term", ",", "ann_subsample_factor", "=", "ann_subsample_factor", ")", "\n", "\n", "# Natural gradient for global variational parameters", "\n", "# z_stats: [M, K], x_stats: [M, d + d^2]", "\n", "# dir_updates: [K]", "\n", "dir_updates", "=", "tf", ".", "reduce_mean", "(", "z_stats", ",", "axis", "=", "0", ")", "\n", "# niw_updates: [K, d + d^2 + 2]", "\n", "niw_updates", "=", "tf", ".", "matmul", "(", "z_stats", ",", "tf", ".", "concat", "(", "[", "x_stats", ",", "tf", ".", "ones", "(", "[", "M", ",", "2", "]", ")", "]", ",", "-", "1", ")", ",", "\n", "transpose_a", "=", "True", ")", "/", "tf", ".", "to_float", "(", "M", ")", "\n", "updates", "=", "[", "dir_updates", ",", "niw_updates", "]", "\n", "\n", "if", "L", "is", "not", "None", ":", "\n", "# L_worker: [W, M, M] (sparse), false_L_worker: [W, M, M] (sparse)", "\n", "        ", "L_worker", "=", "tf", ".", "sparse_transpose", "(", "L", ",", "perm", "=", "[", "2", ",", "0", ",", "1", "]", ")", "\n", "false_L_worker", "=", "tf", ".", "sparse_transpose", "(", "\n", "tf", ".", "sparse_add", "(", "I", ",", "-", "tf", ".", "ones", "(", "tf", ".", "shape", "(", "L", ")", ")", "*", "L", ")", ",", "perm", "=", "[", "2", ",", "0", ",", "1", "]", ")", "\n", "# alpha_updates: [W, 2]", "\n", "alpha_updates_1", "=", "tf", ".", "sparse_reduce_sum", "(", "z_inner_stats", "*", "L_worker", ",", "\n", "axis", "=", "(", "-", "2", ",", "-", "1", ")", ")", "\n", "alpha_updates_2", "=", "tf", ".", "sparse_reduce_sum", "(", "z_inner_stats", "*", "false_L_worker", ",", "\n", "axis", "=", "(", "-", "2", ",", "-", "1", ")", ")", "\n", "alpha_updates", "=", "0.5", "*", "tf", ".", "stack", "(", "[", "alpha_updates_1", ",", "alpha_updates_2", "]", ",", "\n", "axis", "=", "-", "1", ")", "\n", "# beta_updates: [W, 2]", "\n", "# false_z_inner_stats: [M, M]", "\n", "false_z_inner_stats", "=", "1", "-", "z_inner_stats", "\n", "beta_updates_1", "=", "tf", ".", "sparse_reduce_sum", "(", "\n", "false_z_inner_stats", "*", "false_L_worker", ",", "axis", "=", "(", "-", "2", ",", "-", "1", ")", ")", "\n", "beta_updates_2", "=", "tf", ".", "sparse_reduce_sum", "(", "\n", "false_z_inner_stats", "*", "L_worker", ",", "axis", "=", "(", "-", "2", ",", "-", "1", ")", ")", "\n", "beta_updates", "=", "0.5", "*", "tf", ".", "stack", "(", "[", "beta_updates_1", ",", "beta_updates_2", "]", ",", "axis", "=", "-", "1", ")", "\n", "updates", ".", "extend", "(", "[", "alpha_updates", "/", "ann_subsample_factor", ",", "\n", "beta_updates", "/", "ann_subsample_factor", "]", ")", "\n", "\n", "", "nat_grads", "=", "[", "(", "prior_global_params", "[", "i", "]", "-", "global_params", "[", "i", "]", ")", "/", "N", "+", "updates", "[", "i", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "updates", ")", ")", "]", "\n", "return", "lower_bound", ",", "nat_grads", ",", "z_stats", ",", "niw_stats", ",", "dir_stats", "\n", "\n"]], "home.repos.pwc.inspect_result.xinmei9322_semicrowd.None.bayesscdc_crowd.load_annotations": [[329, 363], ["numpy.array", "numpy.random.RandomState", "generate_annotation.two_coin", "numpy.random.RandomState", "generate_annotation.mygenConstraints", "numpy.random.RandomState", "generate_annotation.genConstraints", "numpy.load", "print"], "function", ["home.repos.pwc.inspect_result.xinmei9322_semicrowd.None.generate_annotation.two_coin", "home.repos.pwc.inspect_result.xinmei9322_semicrowd.None.generate_annotation.mygenConstraints", "home.repos.pwc.inspect_result.xinmei9322_semicrowd.None.generate_annotation.genConstraints"], ["", "def", "load_annotations", "(", "t_train", ",", "W", ",", "method", "=", "\"two_coin\"", ")", ":", "\n", "    ", "num_workers", "=", "W", "\n", "num_annotated_points", "=", "5000", "\n", "num_pairs_each_worker", "=", "1000", "\n", "if", "method", "==", "'two_coin'", ":", "\n", "        ", "rng", "=", "np", ".", "random", ".", "RandomState", "(", "100", ")", "\n", "annotations", "=", "two_coin", "(", "rng", ",", "alpha", "=", "0.9", ",", "beta", "=", "0.9", ",", "num_worker", "=", "num_workers", ",", "\n", "labels", "=", "t_train", "[", ":", "num_annotated_points", "]", ",", "\n", "num_items_per_worker", "=", "num_pairs_each_worker", ",", "\n", "random_j_in_left", "=", "True", ",", "\n", "full_adjacent", "=", "False", ")", "\n", "", "elif", "method", "==", "'mygenConstraints'", ":", "\n", "        ", "rng", "=", "np", ".", "random", ".", "RandomState", "(", "100", ")", "\n", "annotations", "=", "mygenConstraints", "(", "rng", ",", "t_train", "[", ":", "num_annotated_points", "]", ",", "\n", "alpha", "=", "[", "0.9", "]", "*", "num_workers", ",", "\n", "beta", "=", "[", "0.9", "]", "*", "num_workers", ",", "\n", "num_ML", "=", "num_pairs_each_worker", "//", "2", ",", "\n", "num_CL", "=", "num_pairs_each_worker", "//", "2", ")", "\n", "", "elif", "method", "==", "'genConstraints'", ":", "\n", "        ", "rng", "=", "np", ".", "random", ".", "RandomState", "(", "100", ")", "\n", "annotations", "=", "genConstraints", "(", "rng", ",", "t_train", "[", ":", "num_annotated_points", "]", ",", "\n", "alpha", "=", "[", "0.9", "]", "*", "num_workers", ",", "\n", "beta", "=", "[", "0.9", "]", "*", "num_workers", ",", "\n", "num_ML", "=", "num_pairs_each_worker", "//", "2", ",", "\n", "num_CL", "=", "num_pairs_each_worker", "//", "2", ",", "\n", "flag_same", "=", "True", ")", "\n", "", "elif", "method", "==", "'real'", ":", "# load from real annotations for mnist", "\n", "        ", "path", "=", "'data/crowd_annotations_mnist.npy'", "\n", "annotations", "=", "np", ".", "load", "(", "path", ")", "\n", "print", "(", "'Annotation shape: {}'", ".", "format", "(", "annotations", ".", "shape", ")", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "annotations", "=", "np", ".", "array", "(", "annotations", ")", "\n", "return", "annotations", "\n", "\n"]], "home.repos.pwc.inspect_result.xinmei9322_semicrowd.None.bayesscdc_crowd.make_sparse_ann_batch": [[365, 391], ["sorted", "enumerate", "tensorflow.SparseTensorValue", "tensorflow.SparseTensorValue", "sorted.append", "sorted.append", "list", "indices.append", "indices.append", "values.append", "values.append", "len", "len", "numpy.ones_like", "set"], "function", ["None"], ["", "def", "make_sparse_ann_batch", "(", "ann_batch", ",", "W", ")", ":", "\n", "    ", "orig_indices", "=", "[", "]", "\n", "for", "i", ",", "j", ",", "w", ",", "l", "in", "ann_batch", ":", "\n", "        ", "orig_indices", ".", "append", "(", "i", ")", "\n", "orig_indices", ".", "append", "(", "j", ")", "\n", "", "orig_indices", "=", "sorted", "(", "list", "(", "set", "(", "orig_indices", ")", ")", ")", "\n", "\n", "batch_ind_to_orig", "=", "{", "}", "\n", "orig_to_batch_ind", "=", "{", "}", "\n", "for", "i", ",", "ind", "in", "enumerate", "(", "orig_indices", ")", ":", "\n", "        ", "orig_to_batch_ind", "[", "ind", "]", "=", "i", "\n", "batch_ind_to_orig", "[", "i", "]", "=", "ind", "\n", "\n", "", "indices", "=", "[", "]", "\n", "values", "=", "[", "]", "\n", "for", "i", ",", "j", ",", "w", ",", "l", "in", "ann_batch", ":", "\n", "        ", "indices", ".", "append", "(", "[", "orig_to_batch_ind", "[", "i", "]", ",", "orig_to_batch_ind", "[", "j", "]", ",", "w", "]", ")", "\n", "indices", ".", "append", "(", "[", "orig_to_batch_ind", "[", "j", "]", ",", "orig_to_batch_ind", "[", "i", "]", ",", "w", "]", ")", "\n", "values", ".", "append", "(", "l", ")", "\n", "values", ".", "append", "(", "l", ")", "\n", "", "shape", "=", "[", "len", "(", "orig_indices", ")", ",", "len", "(", "orig_indices", ")", ",", "W", "]", "\n", "sparse_ann_batch", "=", "tf", ".", "SparseTensorValue", "(", "indices", ",", "values", ",", "shape", ")", "\n", "sparse_ind_batch", "=", "tf", ".", "SparseTensorValue", "(", "\n", "indices", ",", "np", ".", "ones_like", "(", "values", ")", ",", "shape", ")", "\n", "return", "(", "orig_indices", ",", "orig_to_batch_ind", ",", "batch_ind_to_orig", ",", "\n", "sparse_ann_batch", ",", "sparse_ind_batch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xinmei9322_semicrowd.None.bayesscdc_crowd.main": [[393, 589], ["utils.setup_logger", "numpy.random.seed", "tensorflow.set_random_seed", "os.path.join", "utils.dataset.load_mnist_realval", "numpy.vstack", "numpy.hstack", "numpy.random.binomial", "bayesscdc_crowd.load_annotations", "len", "bayesscdc_crowd.get_global_params", "bayesscdc_crowd.get_global_params", "tensorflow.placeholder", "tensorflow.to_int32", "tensorflow.placeholder", "tensorflow.to_int32", "tensorflow.sparse_placeholder", "tensorflow.sparse_placeholder", "bayesscdc_crowd.variational_message_passing", "tensorflow.argmax", "bayesscdc_crowd.variational_message_passing", "tensorflow.train.MomentumOptimizer", "tf.train.MomentumOptimizer.compute_gradients", "global_nat_grads.extend", "list", "tf.train.MomentumOptimizer.apply_gradients", "distributions.mvn.sample", "bayesscdc_crowd.decoder", "tensorflow.reshape", "time.strftime", "set", "tensorflow.trainable_variables", "tensorflow.trainable_variables", "six.moves.zip", "tensorflow.exp", "tensorflow.reduce_max", "tensorflow.transpose", "numpy.hstack", "utils.cluster_acc", "sklearn.metrics.adjusted_mutual_info_score", "tensorflow.Session", "sess.run", "six.moves.range", "tensorflow.random_uniform", "tensorflow.random_uniform", "six.moves.zip", "tensorflow.exp", "tensorflow.global_variables_initializer", "numpy.random.permutation", "six.moves.range", "time.time", "bayesscdc_crowd.main._evaluate"], "function", ["home.repos.pwc.inspect_result.xinmei9322_semicrowd.utils.utils.setup_logger", "home.repos.pwc.inspect_result.xinmei9322_semicrowd.utils.dataset.load_mnist_realval", "home.repos.pwc.inspect_result.xinmei9322_semicrowd.None.bayesscdc_crowd.load_annotations", "home.repos.pwc.inspect_result.xinmei9322_semicrowd.None.bayesscdc_unsup.get_global_params", "home.repos.pwc.inspect_result.xinmei9322_semicrowd.None.bayesscdc_unsup.get_global_params", "home.repos.pwc.inspect_result.xinmei9322_semicrowd.None.bayesscdc_unsup.variational_message_passing", "home.repos.pwc.inspect_result.xinmei9322_semicrowd.None.bayesscdc_unsup.variational_message_passing", "home.repos.pwc.inspect_result.xinmei9322_semicrowd.distributions.mvn.sample", "home.repos.pwc.inspect_result.xinmei9322_semicrowd.None.bayesscdc_unsup.decoder", "home.repos.pwc.inspect_result.xinmei9322_semicrowd.utils.utils.cluster_acc"], ["", "def", "main", "(", ")", ":", "\n", "    ", "seed", "=", "FLAGS", ".", "seed", "\n", "result_path", "=", "\"results/mnist_crowd_{}_{}\"", ".", "format", "(", "time", ".", "strftime", "(", "\"%Y%m%d_%H%M%S\"", ")", ",", "seed", ")", "\n", "logger", "=", "setup_logger", "(", "'mnist'", ",", "__file__", ",", "result_path", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "tf", ".", "set_random_seed", "(", "seed", ")", "\n", "\n", "# Load MNIST", "\n", "data_path", "=", "os", ".", "path", ".", "join", "(", "'data'", ",", "'mnist.pkl.gz'", ")", "\n", "o_train", ",", "t_train", ",", "o_valid", ",", "t_valid", ",", "o_test", ",", "t_test", "=", "dataset", ".", "load_mnist_realval", "(", "data_path", ",", "one_hot", "=", "False", ")", "\n", "o_train", "=", "np", ".", "vstack", "(", "[", "o_train", ",", "o_valid", "]", ")", "\n", "t_train", "=", "np", ".", "hstack", "(", "[", "t_train", ",", "t_valid", "]", ")", "\n", "n_train", ",", "o_dim", "=", "o_train", ".", "shape", "\n", "# indices = np.random.permutation(n_train)", "\n", "# o_train = o_train[indices]", "\n", "# t_train = t_train[indices]", "\n", "o_test", "=", "np", ".", "random", ".", "binomial", "(", "1", ",", "o_test", ",", "size", "=", "o_test", ".", "shape", ")", "\n", "n_test", ",", "_", "=", "o_test", ".", "shape", "\n", "# n_class = np.max(t_test) + 1", "\n", "\n", "# Prior parameters", "\n", "d", "=", "8", "\n", "K", "=", "50", "\n", "W", "=", "20", "\n", "prior_alpha", "=", "1.05", "\n", "prior_niw_conc", "=", "0.5", "\n", "prior_tau", "=", "1.", "\n", "\n", "# Variational initialization", "\n", "alpha", "=", "2.", "\n", "niw_conc", "=", "1.", "\n", "random_scale", "=", "3.", "\n", "tau", "=", "10.", "\n", "\n", "# learning rate", "\n", "learning_rate", "=", "1e-3", "\n", "nat_grad_scale", "=", "1e4", "\n", "\n", "# Load annotations", "\n", "# [i, j, w, L]", "\n", "annotations", "=", "load_annotations", "(", "t_train", ",", "W", ",", "method", "=", "\"real\"", ")", "\n", "n_annotations", "=", "annotations", ".", "shape", "[", "0", "]", "\n", "W", "=", "len", "(", "set", "(", "annotations", "[", ":", ",", "2", "]", ")", ")", "\n", "# batch_size = 128", "\n", "# iters = o_train.shape[0] // batch_size", "\n", "# ann_batch_size = annotations.shape[0] // iters", "\n", "# print(ann_batch_size)", "\n", "# exit(0)", "\n", "\n", "# Define training parameters", "\n", "epochs", "=", "200", "\n", "batch_size", "=", "128", "\n", "iters", "=", "o_train", ".", "shape", "[", "0", "]", "//", "batch_size", "\n", "ann_batch_size", "=", "annotations", ".", "shape", "[", "0", "]", "//", "iters", "\n", "save_freq", "=", "1", "\n", "test_freq", "=", "10", "\n", "test_batch_size", "=", "400", "\n", "test_iters", "=", "o_test", ".", "shape", "[", "0", "]", "//", "test_batch_size", "\n", "\n", "prior_global_params", "=", "get_global_params", "(", "\n", "\"prior\"", ",", "d", ",", "K", ",", "W", ",", "prior_alpha", ",", "prior_niw_conc", ",", "prior_tau", ",", "\n", "trainable", "=", "False", ")", "\n", "global_params", "=", "get_global_params", "(", "\n", "\"variational\"", ",", "d", ",", "K", ",", "W", ",", "alpha", ",", "niw_conc", ",", "tau", ",", "\n", "random_scale", "=", "random_scale", ",", "trainable", "=", "True", ")", "\n", "\n", "# n_particles = tf.placeholder(tf.int32, shape=[], name='n_particles')", "\n", "o_input", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "None", ",", "o_dim", "]", ",", "name", "=", "'o'", ")", "\n", "o", "=", "tf", ".", "to_int32", "(", "tf", ".", "random_uniform", "(", "tf", ".", "shape", "(", "o_input", ")", ")", "<=", "o_input", ")", "\n", "\n", "ann_o_input", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "None", ",", "o_dim", "]", ",", "name", "=", "'ann_o'", ")", "\n", "ann_o", "=", "tf", ".", "to_int32", "(", "tf", ".", "random_uniform", "(", "tf", ".", "shape", "(", "ann_o_input", ")", ")", "<=", "ann_o_input", ")", "\n", "L_ph", "=", "tf", ".", "sparse_placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "None", ",", "None", ",", "W", "]", ")", "\n", "I_ph", "=", "tf", ".", "sparse_placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "None", ",", "None", ",", "W", "]", ")", "\n", "\n", "lower_bound", ",", "global_nat_grads", ",", "z_stats", ",", "niw_stats", ",", "dir_stats", "=", "variational_message_passing", "(", "\n", "prior_global_params", ",", "global_params", ",", "o", ",", "o_dim", ",", "d", ",", "K", ",", "n_train", ",", "\n", "n_iters", "=", "4", ")", "\n", "z_pred", "=", "tf", ".", "argmax", "(", "z_stats", ",", "axis", "=", "-", "1", ")", "\n", "\n", "ann_lower_bound", ",", "ann_nat_grads", ",", "_", ",", "_", ",", "_", "=", "variational_message_passing", "(", "\n", "prior_global_params", ",", "global_params", ",", "ann_o", ",", "o_dim", ",", "d", ",", "K", ",", "n_train", ",", "\n", "L_ph", ",", "I_ph", ",", "n_annotations", ",", "ann_batch_size", ",", "n_iters", "=", "4", ")", "\n", "# ann_lower_bound = tf.constant(0.)", "\n", "# ann_nat_grads = [tf.zeros_like(param) for param in global_params]", "\n", "\n", "optimizer", "=", "tf", ".", "train", ".", "MomentumOptimizer", "(", "learning_rate", "=", "learning_rate", ",", "\n", "momentum", "=", "0.9", ")", "\n", "net_vars", "=", "(", "tf", ".", "trainable_variables", "(", "scope", "=", "\"encoder\"", ")", "+", "\n", "tf", ".", "trainable_variables", "(", "scope", "=", "\"decoder\"", ")", ")", "\n", "net_grads_and_vars", "=", "optimizer", ".", "compute_gradients", "(", "\n", "-", "0.5", "*", "(", "lower_bound", "+", "ann_lower_bound", ")", ",", "var_list", "=", "net_vars", ")", "\n", "global_nat_grads", ".", "extend", "(", "[", "0", ",", "0", "]", ")", "\n", "nat_grads", "=", "[", "-", "nat_grad_scale", "*", "0.5", "*", "(", "g", "+", "ann_g", ")", "\n", "for", "g", ",", "ann_g", "in", "zip", "(", "global_nat_grads", ",", "ann_nat_grads", ")", "]", "\n", "global_grads_and_vars", "=", "list", "(", "zip", "(", "nat_grads", ",", "global_params", ")", ")", "\n", "infer_op", "=", "optimizer", ".", "apply_gradients", "(", "net_grads_and_vars", "+", "\n", "global_grads_and_vars", ")", "\n", "\n", "# Generation", "\n", "# niw_stats: [K, d + d^2 + 2]", "\n", "gen_mvn_params", "=", "niw_stats", "[", ":", ",", ":", "-", "2", "]", "\n", "# transparency: [K]", "\n", "transp", "=", "tf", ".", "exp", "(", "dir_stats", ")", "/", "tf", ".", "reduce_max", "(", "tf", ".", "exp", "(", "dir_stats", ")", ")", "\n", "# x_samples: [K, d, 10]", "\n", "x_samples", "=", "mvn", ".", "sample", "(", "gen_mvn_params", ",", "d", ",", "n_samples", "=", "10", ")", "\n", "# o_mean: [10, K, o_dim]", "\n", "_", ",", "o_mean", "=", "decoder", "(", "tf", ".", "transpose", "(", "x_samples", ",", "[", "2", ",", "0", ",", "1", "]", ")", ",", "o_dim", ")", "\n", "# o_gen: [10 * K, 28, 28, 1]", "\n", "o_gen", "=", "tf", ".", "reshape", "(", "o_mean", "*", "transp", "[", ":", ",", "None", "]", ",", "[", "-", "1", ",", "28", ",", "28", ",", "1", "]", ")", "\n", "\n", "def", "_evaluate", "(", "pred_batches", ",", "labels", ")", ":", "\n", "        ", "preds", "=", "np", ".", "hstack", "(", "pred_batches", ")", "\n", "truths", "=", "labels", "[", ":", "preds", ".", "size", "]", "\n", "acc", ",", "_", "=", "cluster_acc", "(", "preds", ",", "truths", ")", "\n", "nmi", "=", "adjusted_mutual_info_score", "(", "truths", ",", "labels_pred", "=", "preds", ")", "\n", "return", "acc", ",", "nmi", "\n", "\n", "", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n", "        ", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "1", ",", "epochs", "+", "1", ")", ":", "\n", "            ", "time_epoch", "=", "-", "time", ".", "time", "(", ")", "\n", "indices", "=", "np", ".", "random", ".", "permutation", "(", "n_train", ")", "\n", "# print(indices[:5])", "\n", "# exit(0)", "\n", "o_train_raw", "=", "o_train", "[", "indices", "]", "\n", "t_train_raw", "=", "t_train", "[", "indices", "]", "\n", "lbs", ",", "ann_lbs", "=", "[", "]", ",", "[", "]", "\n", "t_preds", ",", "ann_t_preds", "=", "[", "]", ",", "[", "]", "\n", "for", "t", "in", "range", "(", "iters", ")", ":", "\n", "# Without annotation", "\n", "                ", "o_batch", "=", "o_train_raw", "[", "t", "*", "batch_size", ":", "(", "t", "+", "1", ")", "*", "batch_size", "]", "\n", "\n", "# With annotation", "\n", "ann_indices", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "n_annotations", ",", "\n", "size", "=", "ann_batch_size", ")", "\n", "ann_batch", "=", "annotations", "[", "ann_indices", "]", "\n", "o_indices", ",", "orig_to_batch_ind", ",", "batch_to_orig_ind", ",", "sparse_ann_batch", ",", "sparse_ann_ind", "=", "make_sparse_ann_batch", "(", "\n", "ann_batch", ",", "W", ")", "\n", "ann_o_batch", "=", "o_train", "[", "o_indices", "]", "\n", "\n", "_", ",", "lb", ",", "t_pred", ",", "ann_lb", "=", "sess", ".", "run", "(", "\n", "[", "infer_op", ",", "lower_bound", ",", "z_pred", ",", "ann_lower_bound", "]", ",", "\n", "feed_dict", "=", "{", "o_input", ":", "o_batch", ",", "\n", "ann_o_input", ":", "ann_o_batch", ",", "\n", "L_ph", ":", "sparse_ann_batch", ",", "\n", "I_ph", ":", "sparse_ann_ind", "}", ")", "\n", "lbs", ".", "append", "(", "lb", ")", "\n", "t_preds", ".", "append", "(", "t_pred", ")", "\n", "# print(\"lb: {}\".format(lb))", "\n", "ann_lbs", ".", "append", "(", "ann_lb", ")", "\n", "\n", "", "time_epoch", "+=", "time", ".", "time", "(", ")", "\n", "train_acc", ",", "train_nmi", "=", "_evaluate", "(", "t_preds", ",", "t_train_raw", ")", "\n", "logger", ".", "info", "(", "\n", "'Epoch {} ({:.1f}s): Lower bound = {}, ann LB = {}, '", "\n", "'acc = {}, nmi = {}'", "\n", ".", "format", "(", "epoch", ",", "time_epoch", ",", "np", ".", "mean", "(", "lbs", ")", ",", "np", ".", "mean", "(", "ann_lbs", ")", ",", "\n", "train_acc", ",", "train_nmi", ")", ")", "\n", "\n", "if", "epoch", "%", "test_freq", "==", "0", ":", "\n", "                ", "time_test", "=", "-", "time", ".", "time", "(", ")", "\n", "test_lbs", "=", "[", "]", "\n", "test_t_preds", "=", "[", "]", "\n", "for", "t", "in", "range", "(", "test_iters", ")", ":", "\n", "                    ", "test_o_batch", "=", "o_test", "[", "t", "*", "test_batch_size", ":", "\n", "(", "t", "+", "1", ")", "*", "test_batch_size", "]", "\n", "test_lb", ",", "test_t_pred", "=", "sess", ".", "run", "(", "[", "lower_bound", ",", "z_pred", "]", ",", "\n", "feed_dict", "=", "{", "o", ":", "test_o_batch", "}", ")", "\n", "test_lbs", ".", "append", "(", "test_lb", ")", "\n", "test_t_preds", ".", "append", "(", "test_t_pred", ")", "\n", "\n", "", "time_test", "+=", "time", ".", "time", "(", ")", "\n", "test_acc", ",", "test_nmi", "=", "_evaluate", "(", "test_t_preds", ",", "t_test", ")", "\n", "logger", ".", "info", "(", "'>>> TEST ({:.1f}s)'", ".", "format", "(", "time_test", ")", ")", "\n", "logger", ".", "info", "(", "'>> Test lower bound = {}, acc = {}, nmi = {}'", "\n", ".", "format", "(", "np", ".", "mean", "(", "test_lbs", ")", ",", "test_acc", ",", "test_nmi", ")", ")", "\n", "\n", "if", "epoch", "==", "epochs", ":", "\n", "                    ", "with", "open", "(", "'results/mnist_bayesSCDC.txt'", ",", "\"a\"", ")", "as", "myfile", ":", "\n", "                        ", "myfile", ".", "write", "(", "\"seed: %d train_acc: %f train_nmi: %f \"", "\n", "\"test_acc: %f test_nmi: %f\"", "%", "(", "\n", "seed", ",", "train_acc", ",", "train_nmi", ",", "test_acc", ",", "test_nmi", ")", ")", "\n", "myfile", ".", "write", "(", "'\\n'", ")", "\n", "myfile", ".", "close", "(", ")", "\n", "\n", "", "", "", "if", "epoch", "%", "save_freq", "==", "0", ":", "\n", "                ", "logger", ".", "info", "(", "'Saving images...'", ")", "\n", "images", "=", "sess", ".", "run", "(", "o_gen", ")", "\n", "name", "=", "os", ".", "path", ".", "join", "(", "result_path", ",", "\n", "\"vae.epoch.{}.png\"", ".", "format", "(", "epoch", ")", ")", "\n", "save_image_collections", "(", "images", ",", "name", ",", "shape", "=", "(", "10", ",", "K", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xinmei9322_semicrowd.None.scdc.loglike_annotations": [[23, 52], ["tensorflow.log", "tensorflow.log", "tensorflow.nn.softmax", "tensorflow.nn.softmax", "tensorflow.reduce_sum", "tensorflow.gather", "tensorflow.gather", "tensorflow.gather", "tensorflow.gather", "tensorflow.reduce_mean", "tensorflow.sigmoid", "tensorflow.sigmoid", "tensorflow.to_float"], "function", ["None"], ["def", "loglike_annotations", "(", "qz_logits_i", ",", "qz_logits_j", ",", "theta_worker", ",", "anns", ",", "bs", "=", "100", ")", ":", "\n", "    ", "\"\"\"\n\n    :param qz_logits_i: qz_logits for annotated data i. (bs, num_cluster)\n    :param qz_logits_j: qz_logits for annotated data j. (bs, num_cluster)\n    :param theta_worker: prior parameters list for workers.\n    :param anns: (num_pairs_this_batch, 4)\n    :return: log p(L|Z) scalar\n    \"\"\"", "\n", "alpha_logits", ",", "beta_logits", "=", "theta_worker", "\n", "logalpha", "=", "tf", ".", "log", "(", "tf", ".", "sigmoid", "(", "alpha_logits", ")", ")", "\n", "logbeta", "=", "tf", ".", "log", "(", "tf", ".", "sigmoid", "(", "beta_logits", ")", ")", "\n", "log_1malpha_over_beta", "=", "-", "alpha_logits", "+", "logalpha", "-", "logbeta", "# (M, )", "\n", "log_1mbeta_over_beta", "=", "-", "beta_logits", "\n", "coeff_inner", "=", "alpha_logits", "+", "beta_logits", "\n", "\n", "i", ",", "j", ",", "m", ",", "labels", "=", "anns", "[", ":", ",", "0", "]", ",", "anns", "[", ":", ",", "1", "]", ",", "anns", "[", ":", ",", "2", "]", ",", "anns", "[", ":", ",", "3", "]", "\n", "phi_i", "=", "tf", ".", "nn", ".", "softmax", "(", "qz_logits_i", ")", "# (bs, num_cluster)", "\n", "phi_j", "=", "tf", ".", "nn", ".", "softmax", "(", "qz_logits_j", ")", "\n", "inner_phi_ij", "=", "tf", ".", "reduce_sum", "(", "phi_i", "*", "phi_j", ",", "axis", "=", "-", "1", ")", "# (bs,)", "\n", "coeff_inner_m", "=", "tf", ".", "gather", "(", "coeff_inner", ",", "m", ")", "\n", "logbeta_m", "=", "tf", ".", "gather", "(", "logbeta", ",", "m", ")", "\n", "log_1malpha_over_beta_m", "=", "tf", ".", "gather", "(", "log_1malpha_over_beta", ",", "m", ")", "\n", "log_1mbeta_over_beta_m", "=", "tf", ".", "gather", "(", "log_1mbeta_over_beta", ",", "m", ")", "\n", "log_l", "=", "tf", ".", "to_float", "(", "labels", ")", "*", "(", "inner_phi_ij", "*", "coeff_inner_m", "+", "\n", "log_1mbeta_over_beta_m", ")", "+", "inner_phi_ij", "*", "log_1malpha_over_beta_m", "+", "logbeta_m", "\n", "log_l", "=", "tf", ".", "reduce_mean", "(", "log_l", ",", "axis", "=", "0", ")", "\n", "return", "log_l", "\n", "\n"]], "home.repos.pwc.inspect_result.xinmei9322_semicrowd.None.scdc.init_worker": [[55, 62], ["tensorflow.variable_scope", "tensorflow.Variable", "tensorflow.Variable", "numpy.log", "numpy.log"], "function", ["None"], ["", "def", "init_worker", "(", "scope", ",", "num_worker", ",", "alpha", "=", "0.9", ",", "beta", "=", "0.9", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "scope", ")", ":", "\n", "        ", "alpha_logits", "=", "tf", ".", "Variable", "(", "[", "np", ".", "log", "(", "alpha", "/", "(", "1.", "-", "alpha", ")", ")", "]", "*", "num_worker", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "name", "=", "'alpha_logits'", ")", "\n", "beta_logits", "=", "tf", ".", "Variable", "(", "[", "np", ".", "log", "(", "beta", "/", "(", "1.", "-", "beta", ")", ")", "]", "*", "num_worker", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "name", "=", "'beta_logits'", ")", "\n", "return", "[", "alpha_logits", ",", "beta_logits", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.xinmei9322_semicrowd.None.scdc.vae": [[64, 80], ["zhusuan.reuse", "zhusuan.BayesianNet", "tensorflow.get_variable", "tensorflow.tile", "zhusuan.OnehotDiscrete", "tensorflow.contrib.layers.fully_connected", "tensorflow.contrib.layers.fully_connected", "zhusuan.Normal", "tensorflow.contrib.layers.fully_connected", "tensorflow.contrib.layers.fully_connected", "tensorflow.contrib.layers.fully_connected", "zhusuan.Bernoulli", "tensorflow.to_float", "tensorflow.to_float", "tensorflow.truncated_normal"], "function", ["None"], ["", "", "@", "zs", ".", "reuse", "(", "'model'", ")", "\n", "def", "vae", "(", "observed", ",", "n", ",", "n_x", ",", "n_h", ",", "n_z", ")", ":", "\n", "    ", "with", "zs", ".", "BayesianNet", "(", "observed", "=", "observed", ")", "as", "model", ":", "\n", "        ", "pi", "=", "tf", ".", "get_variable", "(", "name", "=", "'pi'", ",", "dtype", "=", "tf", ".", "float32", ",", "\n", "initializer", "=", "tf", ".", "truncated_normal", "(", "[", "1", ",", "n_z", "]", ",", "stddev", "=", "0.1", ")", ")", "\n", "zpi", "=", "tf", ".", "tile", "(", "pi", ",", "[", "n", ",", "1", "]", ")", "\n", "# zpi = tf.zeros([n, n_z])", "\n", "z", "=", "zs", ".", "OnehotDiscrete", "(", "'z'", ",", "zpi", ",", "group_ndims", "=", "0", ")", "\n", "h_mean", "=", "layers", ".", "fully_connected", "(", "tf", ".", "to_float", "(", "z", ")", ",", "n_h", ",", "activation_fn", "=", "None", ")", "\n", "h_logstd", "=", "layers", ".", "fully_connected", "(", "tf", ".", "to_float", "(", "z", ")", ",", "n_h", ",", "activation_fn", "=", "None", ")", "\n", "h", "=", "zs", ".", "Normal", "(", "'h'", ",", "h_mean", ",", "logstd", "=", "h_logstd", ",", "group_ndims", "=", "1", ")", "\n", "lx_h", "=", "layers", ".", "fully_connected", "(", "h", ",", "512", ")", "\n", "lx_h", "=", "layers", ".", "fully_connected", "(", "lx_h", ",", "512", ")", "\n", "x_logits", "=", "layers", ".", "fully_connected", "(", "lx_h", ",", "n_x", ",", "activation_fn", "=", "None", ")", "\n", "x", "=", "zs", ".", "Bernoulli", "(", "'x'", ",", "x_logits", ",", "group_ndims", "=", "1", ")", "\n", "", "return", "model", ",", "x_logits", ",", "pi", "\n", "\n"]], "home.repos.pwc.inspect_result.xinmei9322_semicrowd.None.scdc.q_net": [[82, 91], ["zhusuan.reuse", "zhusuan.BayesianNet", "tensorflow.contrib.layers.fully_connected", "tensorflow.contrib.layers.fully_connected", "tensorflow.contrib.layers.fully_connected", "tensorflow.contrib.layers.fully_connected", "zhusuan.Normal", "tensorflow.to_float"], "function", ["None"], ["", "@", "zs", ".", "reuse", "(", "'qh'", ")", "\n", "def", "q_net", "(", "x", ",", "n_h", ")", ":", "\n", "    ", "with", "zs", ".", "BayesianNet", "(", ")", "as", "qh", ":", "\n", "        ", "lz_x", "=", "layers", ".", "fully_connected", "(", "tf", ".", "to_float", "(", "x", ")", ",", "512", ")", "\n", "lz_x", "=", "layers", ".", "fully_connected", "(", "lz_x", ",", "512", ")", "\n", "h_mean", "=", "layers", ".", "fully_connected", "(", "lz_x", ",", "n_h", ",", "activation_fn", "=", "None", ")", "\n", "h_logstd", "=", "layers", ".", "fully_connected", "(", "lz_x", ",", "n_h", ",", "activation_fn", "=", "None", ")", "\n", "h", "=", "zs", ".", "Normal", "(", "'h'", ",", "h_mean", ",", "logstd", "=", "h_logstd", ",", "group_ndims", "=", "1", ")", "\n", "", "return", "qh", "\n", "\n"]], "home.repos.pwc.inspect_result.xinmei9322_semicrowd.None.scdc.qz_net": [[93, 100], ["zhusuan.reuse", "tensorflow.contrib.layers.fully_connected", "tensorflow.contrib.layers.fully_connected", "tensorflow.contrib.layers.fully_connected", "tensorflow.nn.softmax", "tensorflow.to_float"], "function", ["None"], ["", "@", "zs", ".", "reuse", "(", "'classifier'", ")", "\n", "def", "qz_net", "(", "x", ",", "n_z", ")", ":", "\n", "    ", "lz_x", "=", "layers", ".", "fully_connected", "(", "tf", ".", "to_float", "(", "x", ")", ",", "500", ")", "\n", "lz_x", "=", "layers", ".", "fully_connected", "(", "lz_x", ",", "500", ")", "\n", "z_logit", "=", "layers", ".", "fully_connected", "(", "lz_x", ",", "n_z", ",", "activation_fn", "=", "None", ")", "\n", "z", "=", "tf", ".", "nn", ".", "softmax", "(", "z_logit", ")", "\n", "return", "z_logit", ",", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.xinmei9322_semicrowd.None.scdc.qh_net": [[102, 111], ["zhusuan.reuse", "zhusuan.BayesianNet", "tensorflow.contrib.layers.fully_connected", "tensorflow.contrib.layers.fully_connected", "tensorflow.contrib.layers.fully_connected", "tensorflow.contrib.layers.fully_connected", "zhusuan.Normal", "tensorflow.to_float", "tensorflow.concat"], "function", ["None"], ["", "@", "zs", ".", "reuse", "(", "'variational'", ")", "\n", "def", "qh_net", "(", "x", ",", "z", ",", "n_h", ")", ":", "\n", "    ", "with", "zs", ".", "BayesianNet", "(", ")", "as", "variational", ":", "\n", "        ", "lh_x", "=", "layers", ".", "fully_connected", "(", "tf", ".", "to_float", "(", "tf", ".", "concat", "(", "[", "x", ",", "z", "]", ",", "axis", "=", "1", ")", ")", ",", "500", ")", "\n", "lh_x", "=", "layers", ".", "fully_connected", "(", "lh_x", ",", "500", ")", "\n", "h_mean", "=", "layers", ".", "fully_connected", "(", "lh_x", ",", "n_h", ",", "activation_fn", "=", "None", ")", "\n", "h_logstd", "=", "layers", ".", "fully_connected", "(", "lh_x", ",", "n_h", ",", "activation_fn", "=", "None", ")", "\n", "h", "=", "zs", ".", "Normal", "(", "'h'", ",", "h_mean", ",", "logstd", "=", "h_logstd", ",", "group_ndims", "=", "1", ")", "\n", "", "return", "variational", "\n", "\n"]], "home.repos.pwc.inspect_result.xinmei9322_semicrowd.None.bayesscdc_unsup.get_global_params": [[27, 55], ["distributions.niw.standard_to_natural", "tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.stack", "tensorflow.get_variable", "tensorflow.constant", "tensorflow.zeros", "tensorflow.constant", "tensorflow.random_uniform", "tensorflow.eye", "tensorflow.ones", "bayesscdc_unsup.get_global_params.init_niw_param"], "function", ["home.repos.pwc.inspect_result.xinmei9322_semicrowd.distributions.beta.standard_to_natural"], ["def", "get_global_params", "(", "scope", ",", "d", ",", "K", ",", "alpha", ",", "niw_conc", ",", "random_scale", "=", "None", ",", "\n", "trainable", "=", "True", ")", ":", "\n", "    ", "def", "init_niw_param", "(", ")", ":", "\n", "# nu: scalar, S: (d, d), m: (d,) kappa: scalar", "\n", "# TODO: nu different to orig code, different init of nu, S?", "\n", "        ", "nu", ",", "S", ",", "m", ",", "kappa", "=", "(", "tf", ".", "constant", "(", "d", "+", "niw_conc", ",", "dtype", "=", "tf", ".", "float32", ")", ",", "\n", "(", "d", "+", "niw_conc", ")", "*", "tf", ".", "eye", "(", "d", ")", ",", "\n", "tf", ".", "zeros", "(", "d", ")", ",", "\n", "tf", ".", "constant", "(", "niw_conc", ",", "dtype", "=", "tf", ".", "float32", ")", ")", "\n", "if", "random_scale", ":", "\n", "            ", "m", "=", "m", "+", "random_scale", "*", "tf", ".", "random_normal", "(", "m", ".", "shape", ")", "\n", "", "return", "niw", ".", "standard_to_natural", "(", "m", ",", "kappa", ",", "S", ",", "nu", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "scope", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ")", ":", "\n", "        ", "if", "random_scale", ":", "\n", "            ", "dir_nat", "=", "tf", ".", "random_uniform", "(", "[", "K", "]", ",", "minval", "=", "0", ",", "maxval", "=", "alpha", "-", "1.", ")", "\n", "", "else", ":", "\n", "            ", "dir_nat", "=", "tf", ".", "ones", "(", "[", "K", "]", ")", "*", "(", "alpha", "-", "1.", ")", "\n", "# [K]", "\n", "", "dir_params", "=", "tf", ".", "get_variable", "(", "\n", "\"dir_params\"", ",", "dtype", "=", "tf", ".", "float32", ",", "initializer", "=", "dir_nat", ",", "\n", "trainable", "=", "trainable", ")", "\n", "# [K, d + d^2 + 2]", "\n", "niw_nat", "=", "tf", ".", "stack", "(", "[", "init_niw_param", "(", ")", "for", "_", "in", "range", "(", "K", ")", "]", ")", "\n", "niw_params", "=", "tf", ".", "get_variable", "(", "\n", "\"niw_params\"", ",", "dtype", "=", "tf", ".", "float32", ",", "initializer", "=", "niw_nat", ",", "\n", "trainable", "=", "trainable", ")", "\n", "", "return", "dir_params", ",", "niw_params", "\n", "\n"]], "home.repos.pwc.inspect_result.xinmei9322_semicrowd.None.bayesscdc_unsup.global_expected_stats": [[57, 64], ["distributions.dirichlet.expected_stats", "distributions.niw.expected_stats"], "function", ["home.repos.pwc.inspect_result.xinmei9322_semicrowd.distributions.dirichlet.expected_stats", "home.repos.pwc.inspect_result.xinmei9322_semicrowd.distributions.dirichlet.expected_stats"], ["", "def", "global_expected_stats", "(", "global_params", ",", "d", ")", ":", "\n", "    ", "dir_params", ",", "niw_params", "=", "global_params", "\n", "# [K]", "\n", "dir_stats", "=", "dirichlet", ".", "expected_stats", "(", "dir_params", ")", "\n", "# [K, d + d^2 + 2]", "\n", "niw_stats", "=", "niw", ".", "expected_stats", "(", "niw_params", ",", "d", ")", "\n", "return", "dir_stats", ",", "niw_stats", "\n", "\n"]], "home.repos.pwc.inspect_result.xinmei9322_semicrowd.None.bayesscdc_unsup.encoder": [[66, 74], ["zhusuan.reuse", "tensorflow.layers.dense", "tensorflow.layers.dense", "tensorflow.layers.dense", "tensorflow.layers.dense", "tensorflow.to_float"], "function", ["None"], ["", "@", "zs", ".", "reuse", "(", "\"encoder\"", ")", "\n", "def", "encoder", "(", "o", ",", "d", ")", ":", "\n", "    ", "h", "=", "tf", ".", "layers", ".", "dense", "(", "tf", ".", "to_float", "(", "o", ")", ",", "500", ",", "activation", "=", "tf", ".", "nn", ".", "relu", ")", "\n", "h", "=", "tf", ".", "layers", ".", "dense", "(", "h", ",", "500", ",", "activation", "=", "tf", ".", "nn", ".", "relu", ")", "\n", "x_param_1", "=", "tf", ".", "layers", ".", "dense", "(", "h", ",", "d", ")", "\n", "x_sigma_inv", "=", "tf", ".", "layers", ".", "dense", "(", "h", ",", "d", ",", "activation", "=", "tf", ".", "nn", ".", "softplus", ")", "\n", "x_param_2", "=", "-", "0.5", "*", "x_sigma_inv", "\n", "return", "x_param_1", ",", "x_param_2", "\n", "\n"]], "home.repos.pwc.inspect_result.xinmei9322_semicrowd.None.bayesscdc_unsup.decoder": [[76, 83], ["zhusuan.reuse", "tensorflow.layers.dense", "tensorflow.layers.dense", "tensorflow.layers.dense", "zhusuan.distributions.Bernoulli", "tensorflow.sigmoid"], "function", ["None"], ["", "@", "zs", ".", "reuse", "(", "\"decoder\"", ")", "\n", "def", "decoder", "(", "x", ",", "o_dim", ")", ":", "\n", "    ", "h", "=", "tf", ".", "layers", ".", "dense", "(", "x", ",", "500", ",", "activation", "=", "tf", ".", "nn", ".", "relu", ")", "\n", "h", "=", "tf", ".", "layers", ".", "dense", "(", "h", ",", "500", ",", "activation", "=", "tf", ".", "nn", ".", "relu", ")", "\n", "o_logits", "=", "tf", ".", "layers", ".", "dense", "(", "h", ",", "o_dim", ")", "\n", "o_dist", "=", "zs", ".", "distributions", ".", "Bernoulli", "(", "o_logits", ",", "group_ndims", "=", "1", ")", "\n", "return", "o_dist", ",", "tf", ".", "sigmoid", "(", "o_logits", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xinmei9322_semicrowd.None.bayesscdc_unsup.x_mean_field": [[85, 95], ["tensorflow.matmul", "distributions.mvn.expected_stats"], "function", ["home.repos.pwc.inspect_result.xinmei9322_semicrowd.distributions.dirichlet.expected_stats"], ["", "def", "x_mean_field", "(", "niw_stats", ",", "z_stats", ",", "x_obs_param", ",", "d", ")", ":", "\n", "# niw_stats: [K, d + d^2 + 2], z_stats: [M, K]", "\n", "# x_prior_term: [M, d + d^2]", "\n", "    ", "x_prior_term", "=", "tf", ".", "matmul", "(", "z_stats", ",", "niw_stats", "[", ":", ",", ":", "-", "2", "]", ")", "\n", "# x_obs_param: [M, d + d^2]", "\n", "# x_nat_param: [M, d + d^2]", "\n", "x_nat_param", "=", "x_prior_term", "+", "x_obs_param", "\n", "# x_stats: [M, d + d^2]", "\n", "x_stats", "=", "mvn", ".", "expected_stats", "(", "x_nat_param", ",", "d", ")", "\n", "return", "x_nat_param", ",", "x_stats", "\n", "\n"]], "home.repos.pwc.inspect_result.xinmei9322_semicrowd.None.bayesscdc_unsup.z_mean_field": [[97, 110], ["tensorflow.concat", "distributions.catgorical.expected_stats", "tensorflow.shape", "tensorflow.matmul", "tensorflow.ones"], "function", ["home.repos.pwc.inspect_result.xinmei9322_semicrowd.distributions.dirichlet.expected_stats"], ["", "def", "z_mean_field", "(", "global_stats", ",", "x_stats", ")", ":", "\n", "# dir_stats: [K]", "\n", "    ", "dir_stats", ",", "niw_stats", "=", "global_stats", "\n", "# x_stats: [M, d + d^2], niw_stats: [K, d + d^2 + 2]", "\n", "M", "=", "tf", ".", "shape", "(", "x_stats", ")", "[", "0", "]", "\n", "# x_stats_pad: [M, d + d^2 + 2]", "\n", "x_stats_pad", "=", "tf", ".", "concat", "(", "[", "x_stats", ",", "tf", ".", "ones", "(", "[", "M", ",", "2", "]", ")", "]", ",", "axis", "=", "-", "1", ")", "\n", "# z_nat_param: [M, K]", "\n", "z_nat_param", "=", "dir_stats", "+", "tf", ".", "matmul", "(", "x_stats_pad", ",", "niw_stats", ",", "\n", "transpose_b", "=", "True", ")", "\n", "# z_stats: [M, K]", "\n", "z_stats", "=", "catgorical", ".", "expected_stats", "(", "z_nat_param", ")", "\n", "return", "z_nat_param", ",", "z_stats", "\n", "\n"]], "home.repos.pwc.inspect_result.xinmei9322_semicrowd.None.bayesscdc_unsup.local_kl_z": [[112, 121], ["distributions.exp_family_kl", "tensorflow.reduce_logsumexp"], "function", ["home.repos.pwc.inspect_result.xinmei9322_semicrowd.distributions.util.exp_family_kl"], ["", "def", "local_kl_z", "(", "z_nat_param", ",", "dir_stats", ",", "z_stats", ")", ":", "\n", "# z_nat_param: [M, K]", "\n", "# dir_stats: [K]", "\n", "# z_stats: [M, K]", "\n", "    ", "z_nat_param", "=", "z_nat_param", "-", "tf", ".", "reduce_logsumexp", "(", "z_nat_param", ",", "axis", "=", "-", "1", ",", "\n", "keepdims", "=", "True", ")", "\n", "nat_param_diff", "=", "z_nat_param", "-", "dir_stats", "\n", "# ret: [M]", "\n", "return", "exp_family_kl", "(", "nat_param_diff", ",", "z_stats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xinmei9322_semicrowd.None.bayesscdc_unsup.local_kl_x": [[123, 137], ["tensorflow.matmul", "distributions.exp_family_kl", "distributions.mvn.log_partition", "tensorflow.reduce_sum"], "function", ["home.repos.pwc.inspect_result.xinmei9322_semicrowd.distributions.util.exp_family_kl", "home.repos.pwc.inspect_result.xinmei9322_semicrowd.distributions.dirichlet.log_partition"], ["", "def", "local_kl_x", "(", "x_nat_param", ",", "niw_stats", ",", "z_stats", ",", "x_stats", ",", "d", ")", ":", "\n", "# x_nat_param: [M, d + d^2]", "\n", "# niw_stats: [K, d + d^2 + 2]", "\n", "# z_stats: [M, K]", "\n", "# x_stats: [M, d + d^2]", "\n", "# x_prior_term: [M, d + d^2 + 2]", "\n", "    ", "x_prior_term", "=", "tf", ".", "matmul", "(", "z_stats", ",", "niw_stats", ")", "\n", "# nat_param_diff: [M, d + d^2]", "\n", "nat_param_diff", "=", "x_nat_param", "-", "x_prior_term", "[", ":", ",", ":", "-", "2", "]", "\n", "# log_partition_diff: [M]", "\n", "log_z_diff", "=", "mvn", ".", "log_partition", "(", "x_nat_param", ",", "d", ")", "+", "tf", ".", "reduce_sum", "(", "\n", "x_prior_term", "[", ":", ",", "-", "2", ":", "]", ",", "axis", "=", "-", "1", ")", "\n", "# ret: [M]", "\n", "return", "exp_family_kl", "(", "nat_param_diff", ",", "x_stats", ",", "log_z_diff", "=", "log_z_diff", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xinmei9322_semicrowd.None.bayesscdc_unsup.global_kl": [[139, 158], ["bayesscdc_unsup.global_kl._kl_helper"], "function", ["None"], ["", "def", "global_kl", "(", "prior_global_params", ",", "global_params", ",", "global_stats", ",", "d", ")", ":", "\n", "    ", "prior_dir_param", ",", "prior_niw_param", "=", "prior_global_params", "\n", "\n", "def", "_kl_helper", "(", "log_partition", ",", "param", ",", "prior_param", ",", "stats", ")", ":", "\n", "        ", "nat_diff", "=", "param", "-", "prior_param", "\n", "log_z_diff", "=", "log_partition", "(", "param", ")", "-", "log_partition", "(", "prior_param", ")", "\n", "return", "exp_family_kl", "(", "nat_diff", ",", "stats", ",", "log_z_diff", "=", "log_z_diff", ")", "\n", "\n", "# dir_param: [K], niw_param: [K, d + d^2 + 2]", "\n", "", "dir_param", ",", "niw_param", "=", "global_params", "\n", "# dir_stats: [K], niw_stats: [K, d + d^2 + 2]", "\n", "dir_stats", ",", "niw_stats", "=", "global_stats", "\n", "# dir_kl: []", "\n", "dir_kl", "=", "_kl_helper", "(", "dirichlet", ".", "log_partition", ",", "dir_param", ",", "prior_dir_param", ",", "\n", "dir_stats", ")", "\n", "# niw_kl: [K]", "\n", "niw_kl", "=", "_kl_helper", "(", "lambda", "x", ":", "niw", ".", "log_partition", "(", "x", ",", "d", ")", ",", "niw_param", ",", "\n", "prior_niw_param", ",", "niw_stats", ")", "\n", "return", "dir_kl", "+", "tf", ".", "reduce_sum", "(", "niw_kl", ",", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xinmei9322_semicrowd.None.bayesscdc_unsup.elbo": [[160, 167], ["tensorflow.reduce_mean"], "function", ["None"], ["", "def", "elbo", "(", "log_po_term", ",", "local_kl_z", ",", "local_kl_x", ",", "global_kl", ",", "N", ")", ":", "\n", "# log_po_term: [M]", "\n", "# local_kl_z: [M], local_kl_x: [M]", "\n", "# global_kl: []", "\n", "    ", "obj", "=", "tf", ".", "reduce_mean", "(", "log_po_term", "-", "local_kl_z", "-", "local_kl_x", ")", "-", "global_kl", "/", "N", "\n", "# ret: []", "\n", "return", "obj", "\n", "\n"]], "home.repos.pwc.inspect_result.xinmei9322_semicrowd.None.bayesscdc_unsup.variational_message_passing": [[169, 209], ["bayesscdc_unsup.global_expected_stats", "distributions.normalize", "bayesscdc_unsup.encoder", "tensorflow.reshape", "tensorflow.concat", "six.moves.range", "distributions.mvn.sample", "bayesscdc_unsup.decoder", "o_dist.log_prob", "bayesscdc_unsup.local_kl_x", "bayesscdc_unsup.local_kl_z", "bayesscdc_unsup.global_kl", "bayesscdc_unsup.elbo", "tensorflow.reduce_mean", "tensorflow.shape", "tensorflow.random_uniform", "tensorflow.matrix_diag", "bayesscdc_unsup.x_mean_field", "bayesscdc_unsup.z_mean_field", "tensorflow.matmul", "tensorflow.to_float", "tensorflow.concat", "six.moves.range", "tensorflow.ones"], "function", ["home.repos.pwc.inspect_result.xinmei9322_semicrowd.None.bayesscdc_unsup.global_expected_stats", "home.repos.pwc.inspect_result.xinmei9322_semicrowd.None.bayesscdc_unsup.encoder", "home.repos.pwc.inspect_result.xinmei9322_semicrowd.distributions.mvn.sample", "home.repos.pwc.inspect_result.xinmei9322_semicrowd.None.bayesscdc_unsup.decoder", "home.repos.pwc.inspect_result.xinmei9322_semicrowd.None.bayesscdc_unsup.local_kl_x", "home.repos.pwc.inspect_result.xinmei9322_semicrowd.None.bayesscdc_unsup.local_kl_z", "home.repos.pwc.inspect_result.xinmei9322_semicrowd.None.bayesscdc_unsup.global_kl", "home.repos.pwc.inspect_result.xinmei9322_semicrowd.None.bayesscdc_unsup.elbo", "home.repos.pwc.inspect_result.xinmei9322_semicrowd.None.bayesscdc_unsup.x_mean_field", "home.repos.pwc.inspect_result.xinmei9322_semicrowd.None.bayesscdc_unsup.z_mean_field"], ["", "def", "variational_message_passing", "(", "prior_global_params", ",", "global_params", ",", "\n", "o", ",", "o_dim", ",", "d", ",", "K", ",", "N", ",", "n_iters", "=", "100", ")", ":", "\n", "    ", "global_stats", "=", "global_expected_stats", "(", "global_params", ",", "d", ")", "\n", "dir_stats", ",", "niw_stats", "=", "global_stats", "\n", "M", "=", "tf", ".", "shape", "(", "o", ")", "[", "0", "]", "\n", "z_stats", "=", "normalize", "(", "tf", ".", "random_uniform", "(", "[", "M", ",", "K", "]", ",", "1e-8", ",", "maxval", "=", "1", ")", ")", "\n", "# h: [M, d], J: [M, d]", "\n", "h", ",", "J", "=", "encoder", "(", "o", ",", "d", ")", "\n", "# J: [M, d * d]", "\n", "J", "=", "tf", ".", "reshape", "(", "tf", ".", "matrix_diag", "(", "J", ")", ",", "[", "M", ",", "d", "*", "d", "]", ")", "\n", "# x_obs_param: [M, d + d * d]", "\n", "x_obs_param", "=", "tf", ".", "concat", "(", "[", "h", ",", "J", "]", ",", "axis", "=", "-", "1", ")", "\n", "for", "t", "in", "range", "(", "n_iters", ")", ":", "\n", "        ", "x_nat_param", ",", "x_stats", "=", "x_mean_field", "(", "niw_stats", ",", "z_stats", ",", "x_obs_param", ",", "d", ")", "\n", "z_nat_param", ",", "z_stats", "=", "z_mean_field", "(", "global_stats", ",", "x_stats", ")", "\n", "# x: [M, d]", "\n", "", "x", "=", "mvn", ".", "sample", "(", "x_nat_param", ",", "d", ")", "\n", "o_dist", ",", "_", "=", "decoder", "(", "x", ",", "o_dim", ")", "\n", "# log_po_term: [M]", "\n", "log_po_term", "=", "o_dist", ".", "log_prob", "(", "o", ")", "\n", "# log_kl_x_term: [M]", "\n", "local_kl_x_term", "=", "local_kl_x", "(", "x_nat_param", ",", "niw_stats", ",", "z_stats", ",", "x_stats", ",", "d", ")", "\n", "# log_kl_z_term: [M]", "\n", "local_kl_z_term", "=", "local_kl_z", "(", "z_nat_param", ",", "dir_stats", ",", "z_stats", ")", "\n", "# global_kl_term: []", "\n", "global_kl_term", "=", "global_kl", "(", "\n", "prior_global_params", ",", "global_params", ",", "global_stats", ",", "d", ")", "\n", "lower_bound", "=", "elbo", "(", "log_po_term", ",", "local_kl_z_term", ",", "local_kl_x_term", ",", "\n", "global_kl_term", ",", "N", ")", "\n", "# Natural gradient for global variational parameters", "\n", "# z_stats: [M, K], x_stats: [M, d + d^2]", "\n", "# dir_updates: [K]", "\n", "dir_updates", "=", "tf", ".", "reduce_mean", "(", "z_stats", ",", "axis", "=", "0", ")", "\n", "# niw_updates: [K, d + d^2 + 2]", "\n", "niw_updates", "=", "tf", ".", "matmul", "(", "z_stats", ",", "tf", ".", "concat", "(", "[", "x_stats", ",", "tf", ".", "ones", "(", "[", "M", ",", "2", "]", ")", "]", ",", "-", "1", ")", ",", "\n", "transpose_a", "=", "True", ")", "/", "tf", ".", "to_float", "(", "M", ")", "\n", "updates", "=", "(", "dir_updates", ",", "niw_updates", ")", "\n", "nat_grads", "=", "[", "(", "prior_global_params", "[", "i", "]", "-", "global_params", "[", "i", "]", ")", "/", "N", "+", "updates", "[", "i", "]", "\n", "for", "i", "in", "range", "(", "2", ")", "]", "\n", "return", "lower_bound", ",", "nat_grads", ",", "z_stats", ",", "dir_stats", ",", "niw_stats", "\n", "\n"]], "home.repos.pwc.inspect_result.xinmei9322_semicrowd.None.bayesscdc_unsup.main": [[211, 354], ["utils.setup_logger", "numpy.random.seed", "tensorflow.set_random_seed", "os.path.join", "utils.dataset.load_mnist_realval", "numpy.vstack", "numpy.hstack", "numpy.random.binomial", "bayesscdc_unsup.get_global_params", "bayesscdc_unsup.get_global_params", "tensorflow.placeholder", "tensorflow.to_int32", "bayesscdc_unsup.variational_message_passing", "tensorflow.argmax", "tensorflow.train.MomentumOptimizer", "tf.train.MomentumOptimizer.compute_gradients", "list", "tf.train.MomentumOptimizer.apply_gradients", "distributions.mvn.sample", "bayesscdc_unsup.decoder", "tensorflow.reshape", "time.strftime", "tensorflow.trainable_variables", "tensorflow.trainable_variables", "six.moves.zip", "tensorflow.exp", "tensorflow.reduce_max", "tensorflow.transpose", "numpy.hstack", "utils.cluster_acc", "sklearn.metrics.adjusted_mutual_info_score", "tensorflow.Session", "sess.run", "six.moves.range", "tensorflow.random_uniform", "tensorflow.exp", "tensorflow.global_variables_initializer", "numpy.random.permutation", "six.moves.range", "time.time", "bayesscdc_unsup.main._evaluate"], "function", ["home.repos.pwc.inspect_result.xinmei9322_semicrowd.utils.utils.setup_logger", "home.repos.pwc.inspect_result.xinmei9322_semicrowd.utils.dataset.load_mnist_realval", "home.repos.pwc.inspect_result.xinmei9322_semicrowd.None.bayesscdc_unsup.get_global_params", "home.repos.pwc.inspect_result.xinmei9322_semicrowd.None.bayesscdc_unsup.get_global_params", "home.repos.pwc.inspect_result.xinmei9322_semicrowd.None.bayesscdc_unsup.variational_message_passing", "home.repos.pwc.inspect_result.xinmei9322_semicrowd.distributions.mvn.sample", "home.repos.pwc.inspect_result.xinmei9322_semicrowd.None.bayesscdc_unsup.decoder", "home.repos.pwc.inspect_result.xinmei9322_semicrowd.utils.utils.cluster_acc"], ["", "def", "main", "(", ")", ":", "\n", "    ", "seed", "=", "FLAGS", ".", "seed", "\n", "result_path", "=", "\"results/mnist_{}_{}\"", ".", "format", "(", "time", ".", "strftime", "(", "\"%Y%m%d_%H%M%S\"", ")", ",", "seed", ")", "\n", "logger", "=", "setup_logger", "(", "'mnist'", ",", "__file__", ",", "result_path", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "tf", ".", "set_random_seed", "(", "seed", ")", "\n", "\n", "# Load MNIST", "\n", "data_path", "=", "os", ".", "path", ".", "join", "(", "'data'", ",", "'mnist.pkl.gz'", ")", "\n", "o_train", ",", "t_train", ",", "o_valid", ",", "t_valid", ",", "o_test", ",", "t_test", "=", "dataset", ".", "load_mnist_realval", "(", "data_path", ",", "one_hot", "=", "False", ")", "\n", "o_train", "=", "np", ".", "vstack", "(", "[", "o_train", ",", "o_valid", "]", ")", "\n", "t_train", "=", "np", ".", "hstack", "(", "[", "t_train", ",", "t_valid", "]", ")", "\n", "o_test", "=", "np", ".", "random", ".", "binomial", "(", "1", ",", "o_test", ",", "size", "=", "o_test", ".", "shape", ")", "\n", "n_train", ",", "o_dim", "=", "o_train", ".", "shape", "\n", "n_test", ",", "_", "=", "o_test", ".", "shape", "\n", "# n_class = np.max(t_test) + 1", "\n", "\n", "# Prior parameters", "\n", "d", "=", "8", "\n", "K", "=", "50", "\n", "prior_alpha", "=", "1.05", "\n", "prior_niw_conc", "=", "0.5", "\n", "\n", "# Variational initialization", "\n", "alpha", "=", "2.", "\n", "niw_conc", "=", "1.", "\n", "random_scale", "=", "3.", "\n", "\n", "# learning rate", "\n", "learning_rate", "=", "1e-3", "\n", "nat_grad_scale", "=", "1e4", "\n", "\n", "prior_global_params", "=", "get_global_params", "(", "\"prior\"", ",", "d", ",", "K", ",", "prior_alpha", ",", "\n", "prior_niw_conc", ",", "trainable", "=", "False", ")", "\n", "global_params", "=", "get_global_params", "(", "\"variational\"", ",", "d", ",", "K", ",", "alpha", ",", "niw_conc", ",", "\n", "random_scale", "=", "random_scale", ",", "trainable", "=", "True", ")", "\n", "\n", "# n_particles = tf.placeholder(tf.int32, shape=[], name='n_particles')", "\n", "o_input", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "None", ",", "o_dim", "]", ",", "name", "=", "'o'", ")", "\n", "o", "=", "tf", ".", "to_int32", "(", "tf", ".", "random_uniform", "(", "tf", ".", "shape", "(", "o_input", ")", ")", "<=", "o_input", ")", "\n", "\n", "lower_bound", ",", "global_nat_grads", ",", "z_stats", ",", "dir_stats", ",", "niw_stats", "=", "variational_message_passing", "(", "prior_global_params", ",", "global_params", ",", "\n", "o", ",", "o_dim", ",", "d", ",", "K", ",", "n_train", ",", "n_iters", "=", "4", ")", "\n", "z_pred", "=", "tf", ".", "argmax", "(", "z_stats", ",", "axis", "=", "-", "1", ")", "\n", "\n", "optimizer", "=", "tf", ".", "train", ".", "MomentumOptimizer", "(", "learning_rate", "=", "learning_rate", ",", "\n", "momentum", "=", "0.9", ")", "\n", "net_vars", "=", "(", "tf", ".", "trainable_variables", "(", "scope", "=", "\"encoder\"", ")", "+", "\n", "tf", ".", "trainable_variables", "(", "scope", "=", "\"decoder\"", ")", ")", "\n", "net_grads_and_vars", "=", "optimizer", ".", "compute_gradients", "(", "\n", "-", "lower_bound", ",", "var_list", "=", "net_vars", ")", "\n", "global_nat_grads", "=", "[", "-", "nat_grad_scale", "*", "g", "for", "g", "in", "global_nat_grads", "]", "\n", "global_grads_and_vars", "=", "list", "(", "zip", "(", "global_nat_grads", ",", "global_params", ")", ")", "\n", "infer_op", "=", "optimizer", ".", "apply_gradients", "(", "net_grads_and_vars", "+", "\n", "global_grads_and_vars", ")", "\n", "\n", "# Generation", "\n", "# niw_stats: [K, d + d^2 + 2]", "\n", "gen_mvn_params", "=", "niw_stats", "[", ":", ",", ":", "-", "2", "]", "\n", "# transparency: [K]", "\n", "transp", "=", "tf", ".", "exp", "(", "dir_stats", ")", "/", "tf", ".", "reduce_max", "(", "tf", ".", "exp", "(", "dir_stats", ")", ")", "\n", "# x_samples: [K, d, 10]", "\n", "x_samples", "=", "mvn", ".", "sample", "(", "gen_mvn_params", ",", "d", ",", "n_samples", "=", "10", ")", "\n", "# o_mean: [10, K, o_dim]", "\n", "_", ",", "o_mean", "=", "decoder", "(", "tf", ".", "transpose", "(", "x_samples", ",", "[", "2", ",", "0", ",", "1", "]", ")", ",", "o_dim", ")", "\n", "# o_gen: [10 * K, 28, 28, 1]", "\n", "o_gen", "=", "tf", ".", "reshape", "(", "o_mean", "*", "transp", "[", ":", ",", "None", "]", ",", "[", "-", "1", ",", "28", ",", "28", ",", "1", "]", ")", "\n", "\n", "# Define training parameters", "\n", "epochs", "=", "200", "\n", "batch_size", "=", "128", "\n", "iters", "=", "o_train", ".", "shape", "[", "0", "]", "//", "batch_size", "\n", "save_freq", "=", "1", "\n", "test_freq", "=", "10", "\n", "test_batch_size", "=", "400", "\n", "test_iters", "=", "o_test", ".", "shape", "[", "0", "]", "//", "test_batch_size", "\n", "\n", "def", "_evaluate", "(", "pred_batches", ",", "labels", ")", ":", "\n", "        ", "preds", "=", "np", ".", "hstack", "(", "pred_batches", ")", "\n", "truths", "=", "labels", "[", ":", "preds", ".", "size", "]", "\n", "acc", ",", "_", "=", "cluster_acc", "(", "preds", ",", "truths", ")", "\n", "nmi", "=", "adjusted_mutual_info_score", "(", "truths", ",", "labels_pred", "=", "preds", ")", "\n", "return", "acc", ",", "nmi", "\n", "\n", "", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n", "        ", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "1", ",", "epochs", "+", "1", ")", ":", "\n", "            ", "time_epoch", "=", "-", "time", ".", "time", "(", ")", "\n", "indices", "=", "np", ".", "random", ".", "permutation", "(", "n_train", ")", "\n", "o_train", "=", "o_train", "[", "indices", "]", "\n", "t_train", "=", "t_train", "[", "indices", "]", "\n", "lbs", "=", "[", "]", "\n", "t_preds", "=", "[", "]", "\n", "for", "t", "in", "range", "(", "iters", ")", ":", "\n", "                ", "o_batch", "=", "o_train", "[", "t", "*", "batch_size", ":", "(", "t", "+", "1", ")", "*", "batch_size", "]", "\n", "_", ",", "lb", ",", "t_pred", "=", "sess", ".", "run", "(", "\n", "[", "infer_op", ",", "lower_bound", ",", "z_pred", "]", ",", "\n", "feed_dict", "=", "{", "o_input", ":", "o_batch", "}", ")", "\n", "# print(\"lb: {}\".format(lb))", "\n", "lbs", ".", "append", "(", "lb", ")", "\n", "t_preds", ".", "append", "(", "t_pred", ")", "\n", "\n", "", "time_epoch", "+=", "time", ".", "time", "(", ")", "\n", "train_acc", ",", "train_nmi", "=", "_evaluate", "(", "t_preds", ",", "t_train", ")", "\n", "logger", ".", "info", "(", "\n", "'Epoch {} ({:.1f}s): Lower bound = {}, acc = {}, nmi = {}'", "\n", ".", "format", "(", "epoch", ",", "time_epoch", ",", "np", ".", "mean", "(", "lbs", ")", ",", "train_acc", ",", "train_nmi", ")", ")", "\n", "\n", "if", "epoch", "%", "test_freq", "==", "0", ":", "\n", "                ", "time_test", "=", "-", "time", ".", "time", "(", ")", "\n", "test_lbs", "=", "[", "]", "\n", "test_t_preds", "=", "[", "]", "\n", "for", "t", "in", "range", "(", "test_iters", ")", ":", "\n", "                    ", "test_o_batch", "=", "o_test", "[", "t", "*", "test_batch_size", ":", "\n", "(", "t", "+", "1", ")", "*", "test_batch_size", "]", "\n", "test_lb", ",", "test_t_pred", "=", "sess", ".", "run", "(", "[", "lower_bound", ",", "z_pred", "]", ",", "\n", "feed_dict", "=", "{", "o", ":", "test_o_batch", "}", ")", "\n", "test_lbs", ".", "append", "(", "test_lb", ")", "\n", "test_t_preds", ".", "append", "(", "test_t_pred", ")", "\n", "\n", "", "time_test", "+=", "time", ".", "time", "(", ")", "\n", "test_acc", ",", "test_nmi", "=", "_evaluate", "(", "test_t_preds", ",", "t_test", ")", "\n", "logger", ".", "info", "(", "'>>> TEST ({:.1f}s)'", ".", "format", "(", "time_test", ")", ")", "\n", "logger", ".", "info", "(", "'>> Test lower bound = {}, acc = {}, nmi = {}'", "\n", ".", "format", "(", "np", ".", "mean", "(", "test_lbs", ")", ",", "test_acc", ",", "test_nmi", ")", ")", "\n", "\n", "if", "epoch", "==", "epochs", ":", "\n", "                    ", "with", "open", "(", "'results/mnist_bayesSCDC_unsup.txt'", ",", "\"a\"", ")", "as", "myfile", ":", "\n", "                        ", "myfile", ".", "write", "(", "\"seed: %d train_acc: %f train_nmi: %f \"", "\n", "\"test_acc: %f test_nmi: %f\"", "%", "(", "\n", "seed", ",", "train_acc", ",", "train_nmi", ",", "test_acc", ",", "test_nmi", ")", ")", "\n", "myfile", ".", "write", "(", "'\\n'", ")", "\n", "myfile", ".", "close", "(", ")", "\n", "\n", "", "", "", "if", "epoch", "%", "save_freq", "==", "0", ":", "\n", "                ", "logger", ".", "info", "(", "'Saving images...'", ")", "\n", "images", "=", "sess", ".", "run", "(", "o_gen", ")", "\n", "name", "=", "os", ".", "path", ".", "join", "(", "result_path", ",", "\n", "\"vae.epoch.{}.png\"", ".", "format", "(", "epoch", ")", ")", "\n", "save_image_collections", "(", "images", ",", "name", ",", "shape", "=", "(", "10", ",", "K", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xinmei9322_semicrowd.None.generate_annotation.group_by_class": [[24, 34], ["six.moves.range", "x_by_class.append", "t_by_class.append", "indices_by_class.append", "numpy.nonzero"], "function", ["None"], ["def", "group_by_class", "(", "x", ",", "t", ")", ":", "\n", "    ", "x_by_class", "=", "[", "]", "\n", "t_by_class", "=", "[", "]", "\n", "indices_by_class", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "        ", "indices", "=", "np", ".", "nonzero", "(", "t", "==", "i", ")", "[", "0", "]", "\n", "x_by_class", ".", "append", "(", "x", "[", "indices", "]", ")", "\n", "t_by_class", ".", "append", "(", "t", "[", "indices", "]", ")", "\n", "indices_by_class", ".", "append", "(", "indices", ")", "\n", "", "return", "x_by_class", ",", "t_by_class", ",", "indices_by_class", "\n", "\n"]], "home.repos.pwc.inspect_result.xinmei9322_semicrowd.None.generate_annotation.select_by_class": [[36, 52], ["six.moves.range", "numpy.vstack", "numpy.hstack", "numpy.hstack", "numpy.arange", "numpy.random.shuffle", "np.vstack.append", "np.hstack.append", "np.hstack.append"], "function", ["None"], ["", "def", "select_by_class", "(", "x_by_class", ",", "t_by_class", ",", "indices_by_class", ",", "n_l", ")", ":", "\n", "# rng = np.random.RandomState(seed=seed)", "\n", "    ", "x_labeled", "=", "[", "]", "\n", "t_labeled", "=", "[", "]", "\n", "indices_labeled", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "        ", "indices", "=", "np", ".", "arange", "(", "x_by_class", "[", "i", "]", ".", "shape", "[", "0", "]", ")", "\n", "# rng.shuffle(indices)", "\n", "np", ".", "random", ".", "shuffle", "(", "indices", ")", "\n", "x_labeled", ".", "append", "(", "x_by_class", "[", "i", "]", "[", "indices", "[", ":", "n_l", "]", "]", ")", "\n", "t_labeled", ".", "append", "(", "t_by_class", "[", "i", "]", "[", "indices", "[", ":", "n_l", "]", "]", ")", "\n", "indices_labeled", ".", "append", "(", "indices_by_class", "[", "i", "]", "[", "indices", "[", ":", "n_l", "]", "]", ")", "\n", "", "x_labeled", "=", "np", ".", "vstack", "(", "x_labeled", ")", "\n", "t_labeled", "=", "np", ".", "hstack", "(", "t_labeled", ")", "\n", "indices_labeled", "=", "np", ".", "hstack", "(", "indices_labeled", ")", "\n", "return", "x_labeled", ",", "t_labeled", ",", "indices_labeled", "\n", "\n"]], "home.repos.pwc.inspect_result.xinmei9322_semicrowd.None.generate_annotation.worker": [[54, 75], ["numpy.arange", "numpy.random.shuffle", "six.moves.range", "len", "int", "six.moves.range", "len", "six.moves.range", "numpy.random.randint", "len", "label_id.append", "len", "annotations.append", "annotations.append"], "function", ["None"], ["", "def", "worker", "(", "t", ",", "ind", ",", "corruption_percentage", ",", "num_classes", ",", "worker_id", ")", ":", "\n", "# annotations = np.zeros(int(0.5*len(t)*(len(t)-1)))", "\n", "# label_id = np.zeros(3, len(annotations))", "\n", "    ", "annotations", "=", "[", "]", "\n", "label_id", "=", "[", "]", "\n", "indices", "=", "np", ".", "arange", "(", "len", "(", "t", ")", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "indices", ")", "\n", "t", "=", "t", "[", "indices", "]", "\n", "ind", "=", "ind", "[", "indices", "]", "\n", "if", "corruption_percentage", ">", "0", ":", "\n", "        ", "corrupt_labels", "=", "int", "(", "len", "(", "t", ")", "*", "corruption_percentage", ")", "\n", "for", "i", "in", "range", "(", "corrupt_labels", ")", ":", "\n", "            ", "t", "[", "i", "]", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "num_classes", ")", "\n", "", "", "for", "i", "in", "range", "(", "len", "(", "t", ")", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "i", "+", "1", ",", "len", "(", "t", ")", ")", ":", "\n", "            ", "label_id", ".", "append", "(", "[", "ind", "[", "i", "]", ",", "ind", "[", "j", "]", ",", "worker_id", "]", ")", "\n", "if", "t", "[", "i", "]", "==", "t", "[", "j", "]", ":", "\n", "                ", "annotations", ".", "append", "(", "1", ")", "\n", "", "else", ":", "\n", "                ", "annotations", ".", "append", "(", "-", "1", ")", "\n", "", "", "", "return", "annotations", ",", "label_id", "\n", "\n"]], "home.repos.pwc.inspect_result.xinmei9322_semicrowd.None.generate_annotation.two_coin": [[77, 157], ["isinstance", "isinstance", "numpy.zeros", "numpy.arange", "six.moves.range", "numpy.hstack", "numpy.vstack", "numpy.hstack", "print", "len", "len", "numpy.arange", "rng.shuffle", "six.moves.range", "generate_annotation.two_coin.two_coin_each_worker"], "function", ["None"], ["", "def", "two_coin", "(", "rng", ",", "alpha", ",", "beta", ",", "num_worker", ",", "labels", ",", "num_items_per_worker", ",", "full_adjacent", "=", "False", ",", "random_j_in_left", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n\n    :param alpha: sensitivity, a list with length num_worker or a scalar in (0.5, 1].\n    :param beta:  specificity, a list with length num_worker or a scalar in (0.5, 1].\n    :param num_worker: int, a non-negative scalar, should be equal to len(alpha)\n        if alpha is a list\n    :param labels: The true labels of the samples.\n    :param num_items_per_worker: int. Same for all workers\n    :param full_adjacent: if True, generate n(n-1)/2 pairs\n    :param random_j_in_left: if True, choose j in the left from i+1 to the end.\n    :return:\n    \"\"\"", "\n", "if", "isinstance", "(", "alpha", ",", "list", ")", ":", "\n", "        ", "assert", "len", "(", "alpha", ")", "==", "num_worker", "\n", "", "if", "isinstance", "(", "beta", ",", "list", ")", ":", "\n", "        ", "assert", "len", "(", "beta", ")", "==", "num_worker", "\n", "", "anns", "=", "[", "]", "\n", "ids", "=", "[", "]", "\n", "mask_id", "=", "np", ".", "zeros", "(", "len", "(", "labels", ")", ")", "\n", "end_id", "=", "num_items_per_worker", "\n", "indices", "=", "np", ".", "arange", "(", "len", "(", "labels", ")", ")", "# indices of the whole dataset", "\n", "\n", "def", "two_coin_each_worker", "(", "t", ",", "ind", ",", "worker_id", ",", "alpha_worker", ",", "beta_worker", ")", ":", "\n", "        ", "annotations", "=", "[", "]", "\n", "label_id", "=", "[", "]", "\n", "indices_batch", "=", "np", ".", "arange", "(", "len", "(", "t", ")", ")", "\n", "rng", ".", "shuffle", "(", "indices_batch", ")", "\n", "t", "=", "t", "[", "indices_batch", "]", "\n", "ind", "=", "ind", "[", "indices_batch", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "t", ")", "-", "1", ")", ":", "\n", "            ", "if", "full_adjacent", ":", "\n", "                ", "set_j", "=", "range", "(", "i", "+", "1", ",", "len", "(", "t", ")", ")", "\n", "for", "j", "in", "set_j", ":", "\n", "                    ", "label_id", ".", "append", "(", "[", "ind", "[", "i", "]", ",", "ind", "[", "j", "]", ",", "worker_id", "]", ")", "\n", "if", "t", "[", "i", "]", "==", "t", "[", "j", "]", ":", "\n", "                        ", "label", "=", "1", "if", "rng", ".", "rand", "(", ")", "<", "alpha_worker", "else", "0", "\n", "annotations", ".", "append", "(", "label", ")", "\n", "", "else", ":", "\n", "                        ", "label", "=", "0", "if", "rng", ".", "rand", "(", ")", "<", "beta_worker", "else", "1", "\n", "annotations", ".", "append", "(", "label", ")", "\n", "", "", "", "else", ":", "\n", "                ", "if", "random_j_in_left", ":", "\n", "                    ", "j", "=", "rng", ".", "randint", "(", "i", "+", "1", ",", "len", "(", "t", ")", ",", "1", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "                    ", "j", "=", "rng", ".", "randint", "(", "0", ",", "len", "(", "t", ")", ",", "1", ")", "[", "0", "]", "\n", "while", "j", "==", "i", ":", "\n", "                        ", "j", "=", "rng", ".", "randint", "(", "0", ",", "len", "(", "t", ")", ",", "1", ")", "[", "0", "]", "\n", "", "", "if", "t", "[", "i", "]", "==", "t", "[", "j", "]", ":", "\n", "                    ", "label", "=", "1", "if", "rng", ".", "rand", "(", ")", "<", "alpha_worker", "else", "0", "\n", "annotations", ".", "append", "(", "label", ")", "\n", "", "else", ":", "\n", "                    ", "label", "=", "0", "if", "rng", ".", "rand", "(", ")", "<", "beta_worker", "else", "1", "\n", "annotations", ".", "append", "(", "label", ")", "\n", "", "label_id", ".", "append", "(", "[", "ind", "[", "i", "]", ",", "ind", "[", "j", "]", ",", "worker_id", "]", ")", "\n", "\n", "", "", "return", "annotations", ",", "label_id", "\n", "\n", "", "for", "j", "in", "range", "(", "num_worker", ")", ":", "\n", "        ", "indices_labeled", "=", "indices", "[", "end_id", "-", "num_items_per_worker", ":", "end_id", "]", "# indices of data labeled by worker j", "\n", "t_labeled", "=", "labels", "[", "end_id", "-", "num_items_per_worker", ":", "end_id", "]", "\n", "alpha_j", "=", "alpha", "[", "j", "]", "if", "isinstance", "(", "alpha", ",", "list", ")", "else", "alpha", "\n", "beta_j", "=", "beta", "[", "j", "]", "if", "isinstance", "(", "beta", ",", "list", ")", "else", "beta", "\n", "ann", ",", "id", "=", "two_coin_each_worker", "(", "t_labeled", ",", "indices_labeled", ",", "j", ",", "alpha_j", ",", "beta_j", ")", "\n", "anns", ".", "append", "(", "ann", ")", "\n", "ids", ".", "append", "(", "id", ")", "\n", "for", "ll", "in", "indices_labeled", ":", "\n", "            ", "mask_id", "[", "ll", "]", "+=", "1", "\n", "", "end_id", "+=", "num_items_per_worker", "\n", "if", "end_id", ">", "len", "(", "labels", ")", ":", "\n", "            ", "shuffle", "=", "rng", ".", "permutation", "(", "len", "(", "indices", ")", ")", "\n", "indices", "=", "indices", "[", "shuffle", "]", "\n", "labels", "=", "labels", "[", "shuffle", "]", "\n", "end_id", "=", "num_items_per_worker", "\n", "\n", "", "", "anns", "=", "np", ".", "hstack", "(", "anns", ")", "\n", "ids", "=", "np", ".", "vstack", "(", "ids", ")", "\n", "id_anns", "=", "np", ".", "hstack", "(", "(", "ids", ",", "anns", "[", ":", ",", "None", "]", ")", ")", "\n", "print", "(", "'The shape of annotations is'", ",", "id_anns", ".", "shape", ")", "\n", "return", "id_anns", "\n", "\n"]], "home.repos.pwc.inspect_result.xinmei9322_semicrowd.None.generate_annotation.mygenConstraints": [[159, 219], ["time.time", "len", "numpy.triu_indices", "len", "len", "numpy.zeros", "six.moves.range", "print", "len", "len", "numpy.array", "numpy.array", "prng.binomial", "prng.binomial", "numpy.hstack", "numpy.hstack", "numpy.vstack().astype", "len", "len", "prng.randint", "prng.binomial.reshape", "prng.binomial.reshape", "numpy.vstack", "time.time", "len", "np.array.append", "print", "numpy.ones", "numpy.ones", "len", "np.array.append"], "function", ["None"], ["", "def", "mygenConstraints", "(", "prng", ",", "label", ",", "alpha", ",", "beta", ",", "num_ML", ",", "num_CL", ")", ":", "\n", "    ", "\"\"\" This function generates pairwise constraints (ML/CL) using groud-truth\n    cluster label and noise parameters\n    Parameters\n    ----------\n    label: shape(n_sample, )\n        cluster label of all the samples\n    alpha: shape(n_expert, )\n        sensitivity parameters of experts\n    beta: shape(n_expert, )\n        specificity parameters of experts\n    num_ML: int\n    num_CL: int\n\n    Returns\n    -------\n    S: shape(n_con, 4)\n        The first column -> expert id\n        The second and third column -> (row, column) indices of two samples\n        The fourth column -> constraint values (1 for ML and 0 for CL)\n    \"\"\"", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "n_sample", "=", "len", "(", "label", ")", "\n", "# get indices of upper-triangle matrix", "\n", "[", "row", ",", "col", "]", "=", "np", ".", "triu_indices", "(", "n_sample", ",", "k", "=", "1", ")", "\n", "\n", "# generate noisy constraints for each expert", "\n", "assert", "len", "(", "alpha", ")", "==", "len", "(", "beta", ")", "\n", "n_expert", "=", "len", "(", "alpha", ")", "\n", "n_pairs", "=", "len", "(", "row", ")", "\n", "\n", "# initialize the constraint matrix", "\n", "S", "=", "np", ".", "zeros", "(", "(", "0", ",", "4", ")", ")", "\n", "\n", "# different experts provide constraints for different sets of sample pairs", "\n", "for", "m", "in", "range", "(", "n_expert", ")", ":", "\n", "        ", "ml_set", "=", "[", "]", "\n", "cl_set", "=", "[", "]", "\n", "while", "len", "(", "ml_set", ")", "<", "num_ML", "or", "len", "(", "cl_set", ")", "<", "num_CL", ":", "\n", "            ", "idx", "=", "prng", ".", "randint", "(", "0", ",", "n_pairs", ",", "1", ")", "[", "0", "]", "\n", "if", "label", "[", "row", "[", "idx", "]", "]", "==", "label", "[", "col", "[", "idx", "]", "]", ":", "\n", "                ", "if", "len", "(", "ml_set", ")", "<", "num_ML", ":", "\n", "                    ", "ml_set", ".", "append", "(", "[", "row", "[", "idx", "]", ",", "col", "[", "idx", "]", "]", ")", "\n", "", "", "elif", "label", "[", "row", "[", "idx", "]", "]", "!=", "label", "[", "col", "[", "idx", "]", "]", ":", "\n", "                ", "if", "len", "(", "cl_set", ")", "<", "num_CL", ":", "\n", "                    ", "cl_set", ".", "append", "(", "[", "row", "[", "idx", "]", ",", "col", "[", "idx", "]", "]", ")", "\n", "", "", "else", ":", "\n", "                ", "print", "(", "\"Invalid matrix entry values\"", ")", "\n", "", "", "ml_set", "=", "np", ".", "array", "(", "ml_set", ")", "\n", "cl_set", "=", "np", ".", "array", "(", "cl_set", ")", "\n", "\n", "val_ml", "=", "prng", ".", "binomial", "(", "1", ",", "alpha", "[", "m", "]", ",", "num_ML", ")", "\n", "val_cl", "=", "prng", ".", "binomial", "(", "1", ",", "1", "-", "beta", "[", "m", "]", ",", "num_CL", ")", "\n", "sm_ml", "=", "np", ".", "hstack", "(", "(", "ml_set", ",", "np", ".", "ones", "(", "(", "num_ML", ",", "1", ")", ")", "*", "m", ",", "\n", "val_ml", ".", "reshape", "(", "val_ml", ".", "size", ",", "1", ")", ")", ")", "\n", "sm_cl", "=", "np", ".", "hstack", "(", "(", "cl_set", ",", "np", ".", "ones", "(", "(", "num_CL", ",", "1", ")", ")", "*", "m", ",", "\n", "val_cl", ".", "reshape", "(", "val_cl", ".", "size", ",", "1", ")", ")", ")", "\n", "S", "=", "np", ".", "vstack", "(", "(", "S", ",", "sm_ml", ",", "sm_cl", ")", ")", ".", "astype", "(", "int", ")", "\n", "", "print", "(", "'Generating annotations time: {:.2f}s'", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", ")", "\n", "return", "S", "\n", "\n"]], "home.repos.pwc.inspect_result.xinmei9322_semicrowd.None.generate_annotation.genConstraints": [[221, 311], ["len", "numpy.tile", "numpy.triu_indices", "six.moves.range", "numpy.array", "numpy.array", "len", "numpy.zeros", "len", "len", "len", "np.random.RandomState.choice", "np.random.RandomState.choice", "six.moves.range", "six.moves.range", "np.array.append", "np.random.RandomState.binomial", "np.random.RandomState.binomial", "numpy.hstack", "numpy.hstack", "numpy.vstack().astype", "numpy.random.RandomState", "np.random.RandomState.choice", "np.random.RandomState.choice", "np.random.RandomState.binomial", "np.random.RandomState.binomial", "numpy.hstack", "numpy.hstack", "numpy.vstack().astype", "np.array.append", "print", "prng.binomial.reshape", "prng.binomial.reshape", "numpy.vstack", "prng.binomial.reshape", "prng.binomial.reshape", "numpy.vstack", "numpy.ones", "numpy.ones", "numpy.ones", "numpy.ones"], "function", ["None"], ["", "def", "genConstraints", "(", "prng", ",", "label", ",", "alpha", ",", "beta", ",", "num_ML", ",", "num_CL", ",", "start_expert", "=", "0", ",", "\n", "flag_same", "=", "False", ")", ":", "\n", "    ", "\"\"\" This function generates pairwise constraints (ML/CL) using groud-truth\n    cluster label and noise parameters\n    Parameters\n    ----------\n    label: shape(n_sample, )\n        cluster label of all the samples\n    alpha: shape(n_expert, )\n        sensitivity parameters of experts\n    beta: shape(n_expert, )\n        specificity parameters of experts\n    num_ML: int\n    num_CL: int\n    flag_same: True if different experts provide constraints for the same set\n    of sample pairs, False if different experts provide constraints for\n    different set of sample pairs\n\n    Returns\n    -------\n    S: shape(n_con, 4)\n        The first column -> expert id\n        The second and third column -> (row, column) indices of two samples\n        The fourth column -> constraint values (1 for ML and 0 for CL)\n    \"\"\"", "\n", "n_sample", "=", "len", "(", "label", ")", "\n", "tp", "=", "np", ".", "tile", "(", "label", ",", "(", "n_sample", ",", "1", ")", ")", "\n", "# label_mat = (tp == tp.T).astype(int)", "\n", "\n", "ML_set", "=", "[", "]", "\n", "CL_set", "=", "[", "]", "\n", "# get indices of upper-triangle matrix", "\n", "[", "row", ",", "col", "]", "=", "np", ".", "triu_indices", "(", "n_sample", ",", "k", "=", "1", ")", "\n", "# n_sample * (n_sample-1)/2", "\n", "for", "idx", "in", "range", "(", "len", "(", "row", ")", ")", ":", "\n", "        ", "if", "label", "[", "row", "[", "idx", "]", "]", "==", "label", "[", "col", "[", "idx", "]", "]", ":", "\n", "            ", "ML_set", ".", "append", "(", "[", "row", "[", "idx", "]", ",", "col", "[", "idx", "]", "]", ")", "\n", "", "elif", "label", "[", "row", "[", "idx", "]", "]", "!=", "label", "[", "col", "[", "idx", "]", "]", ":", "\n", "            ", "CL_set", ".", "append", "(", "[", "row", "[", "idx", "]", ",", "col", "[", "idx", "]", "]", ")", "\n", "# if label_mat[row[idx], col[idx]] == 1:", "\n", "#     ML_set.append([row[idx], col[idx]])", "\n", "# elif label_mat[row[idx], col[idx]] == 0:", "\n", "#     CL_set.append([row[idx], col[idx]])", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"Invalid matrix entry values\"", ")", "\n", "\n", "", "", "ML_set", "=", "np", ".", "array", "(", "ML_set", ")", "\n", "CL_set", "=", "np", ".", "array", "(", "CL_set", ")", "\n", "\n", "assert", "num_ML", "<", "ML_set", ".", "shape", "[", "0", "]", "\n", "assert", "num_CL", "<", "CL_set", ".", "shape", "[", "0", "]", "\n", "\n", "# generate noisy constraints for each expert", "\n", "assert", "len", "(", "alpha", ")", "==", "len", "(", "beta", ")", "\n", "n_expert", "=", "len", "(", "alpha", ")", "\n", "\n", "# initialize the constraint matrix", "\n", "S", "=", "np", ".", "zeros", "(", "(", "0", ",", "4", ")", ")", "\n", "\n", "# different experts provide constraint for the same set of sample pairs", "\n", "if", "flag_same", "==", "True", ":", "\n", "        ", "idx_ML", "=", "prng", ".", "choice", "(", "ML_set", ".", "shape", "[", "0", "]", ",", "num_ML", ",", "replace", "=", "False", ")", "\n", "idx_CL", "=", "prng", ".", "choice", "(", "CL_set", ".", "shape", "[", "0", "]", ",", "num_CL", ",", "replace", "=", "False", ")", "\n", "ML", "=", "ML_set", "[", "idx_ML", ",", ":", "]", "\n", "CL", "=", "CL_set", "[", "idx_CL", ",", ":", "]", "\n", "for", "m", "in", "range", "(", "n_expert", ")", ":", "\n", "            ", "val_ML", "=", "prng", ".", "binomial", "(", "1", ",", "alpha", "[", "m", "]", ",", "num_ML", ")", "\n", "val_CL", "=", "prng", ".", "binomial", "(", "1", ",", "1", "-", "beta", "[", "m", "]", ",", "num_CL", ")", "\n", "Sm_ML", "=", "np", ".", "hstack", "(", "(", "ML", ",", "np", ".", "ones", "(", "(", "num_ML", ",", "1", ")", ")", "*", "(", "m", "+", "start_expert", ")", ",", "\n", "val_ML", ".", "reshape", "(", "val_ML", ".", "size", ",", "1", ")", ")", ")", "\n", "Sm_CL", "=", "np", ".", "hstack", "(", "(", "CL", ",", "np", ".", "ones", "(", "(", "num_CL", ",", "1", ")", ")", "*", "(", "m", "+", "start_expert", ")", ",", "\n", "val_CL", ".", "reshape", "(", "val_CL", ".", "size", ",", "1", ")", ")", ")", "\n", "S", "=", "np", ".", "vstack", "(", "(", "S", ",", "Sm_ML", ",", "Sm_CL", ")", ")", ".", "astype", "(", "int", ")", "\n", "# different experts provide constraints for different sets of sample pairs", "\n", "", "", "else", ":", "\n", "        ", "for", "m", "in", "range", "(", "n_expert", ")", ":", "\n", "            ", "prng", "=", "np", ".", "random", ".", "RandomState", "(", "1000", "+", "m", ")", "\n", "idx_ML", "=", "prng", ".", "choice", "(", "ML_set", ".", "shape", "[", "0", "]", ",", "num_ML", ",", "replace", "=", "False", ")", "\n", "idx_CL", "=", "prng", ".", "choice", "(", "CL_set", ".", "shape", "[", "0", "]", ",", "num_CL", ",", "replace", "=", "False", ")", "\n", "ML", "=", "ML_set", "[", "idx_ML", ",", ":", "]", "\n", "CL", "=", "CL_set", "[", "idx_CL", ",", ":", "]", "\n", "val_ML", "=", "prng", ".", "binomial", "(", "1", ",", "alpha", "[", "m", "]", ",", "num_ML", ")", "\n", "val_CL", "=", "prng", ".", "binomial", "(", "1", ",", "1", "-", "beta", "[", "m", "]", ",", "num_CL", ")", "\n", "Sm_ML", "=", "np", ".", "hstack", "(", "(", "ML", ",", "np", ".", "ones", "(", "(", "num_ML", ",", "1", ")", ")", "*", "(", "m", "+", "start_expert", ")", ",", "\n", "val_ML", ".", "reshape", "(", "val_ML", ".", "size", ",", "1", ")", ")", ")", "\n", "Sm_CL", "=", "np", ".", "hstack", "(", "(", "CL", ",", "np", ".", "ones", "(", "(", "num_CL", ",", "1", ")", ")", "*", "(", "m", "+", "start_expert", ")", ",", "\n", "val_CL", ".", "reshape", "(", "val_CL", ".", "size", ",", "1", ")", ")", ")", "\n", "S", "=", "np", ".", "vstack", "(", "(", "S", ",", "Sm_ML", ",", "Sm_CL", ")", ")", ".", "astype", "(", "int", ")", "\n", "\n", "", "", "return", "S", "\n", "\n"]], "home.repos.pwc.inspect_result.xinmei9322_semicrowd.utils.dataset.standardize": [[19, 36], ["numpy.std", "numpy.mean", "numpy.squeeze", "numpy.squeeze"], "function", ["None"], ["def", "standardize", "(", "data_train", ",", "data_test", ")", ":", "\n", "    ", "\"\"\"\n    Standardize a dataset to have zero mean and unit standard deviation.\n\n    :param data_train: 2-D Numpy array. Training data.\n    :param data_test: 2-D Numpy array. Test data.\n\n    :return: (train_set, test_set, mean, std), The standardized dataset and\n        their mean and standard deviation before processing.\n    \"\"\"", "\n", "std", "=", "np", ".", "std", "(", "data_train", ",", "0", ",", "keepdims", "=", "True", ")", "\n", "std", "[", "std", "==", "0", "]", "=", "1", "\n", "mean", "=", "np", ".", "mean", "(", "data_train", ",", "0", ",", "keepdims", "=", "True", ")", "\n", "data_train_standardized", "=", "(", "data_train", "-", "mean", ")", "/", "std", "\n", "data_test_standardized", "=", "(", "data_test", "-", "mean", ")", "/", "std", "\n", "mean", ",", "std", "=", "np", ".", "squeeze", "(", "mean", ",", "0", ")", ",", "np", ".", "squeeze", "(", "std", ",", "0", ")", "\n", "return", "data_train_standardized", ",", "data_test_standardized", ",", "mean", ",", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.xinmei9322_semicrowd.utils.dataset.to_one_hot": [[38, 50], ["numpy.zeros", "numpy.arange"], "function", ["None"], ["", "def", "to_one_hot", "(", "x", ",", "depth", ")", ":", "\n", "    ", "\"\"\"\n    Get one-hot representation of a 1-D numpy array of integers.\n\n    :param x: 1-D Numpy array of type int.\n    :param depth: A int.\n\n    :return: 2-D Numpy array of type int.\n    \"\"\"", "\n", "ret", "=", "np", ".", "zeros", "(", "(", "x", ".", "shape", "[", "0", "]", ",", "depth", ")", ")", "\n", "ret", "[", "np", ".", "arange", "(", "x", ".", "shape", "[", "0", "]", ")", ",", "x", "]", "=", "1", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.xinmei9322_semicrowd.utils.dataset.download_dataset": [[52, 55], ["print", "six.moves.urllib.request.urlretrieve"], "function", ["None"], ["", "def", "download_dataset", "(", "url", ",", "path", ")", ":", "\n", "    ", "print", "(", "'Downloading data from %s'", "%", "url", ")", "\n", "urllib", ".", "request", ".", "urlretrieve", "(", "url", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xinmei9322_semicrowd.utils.dataset.load_mnist_realval": [[57, 95], ["gzip.open", "gzip.open.close", "os.path.isfile", "os.path.dirname", "dataset.download_dataset", "six.moves.cPickle.load", "six.moves.cPickle.load", "numpy.random.uniform().astype", "numpy.random.uniform().astype", "numpy.random.uniform().astype", "t_train.max", "t_transform", "t_transform", "t_transform", "os.path.exists", "os.makedirs", "dataset.to_one_hot", "os.path.dirname", "numpy.random.uniform", "numpy.random.uniform", "numpy.random.uniform"], "function", ["home.repos.pwc.inspect_result.xinmei9322_semicrowd.utils.utils.Tap.close", "home.repos.pwc.inspect_result.xinmei9322_semicrowd.utils.dataset.download_dataset", "home.repos.pwc.inspect_result.xinmei9322_semicrowd.utils.dataset.to_one_hot"], ["", "def", "load_mnist_realval", "(", "path", ",", "one_hot", "=", "True", ",", "dequantify", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Loads the real valued MNIST dataset.\n\n    :param path: Path to the dataset file.\n    :param one_hot: Whether to use one-hot representation for the labels.\n    :param dequantify:  Whether to add uniform noise to dequantify the data\n        following (Uria, 2013).\n\n    :return: The MNIST dataset.\n    \"\"\"", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "path", ")", ":", "\n", "        ", "data_dir", "=", "os", ".", "path", ".", "dirname", "(", "path", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "dirname", "(", "path", ")", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "data_dir", ")", "\n", "", "download_dataset", "(", "'http://www.iro.umontreal.ca/~lisa/deep/data/mnist'", "\n", "'/mnist.pkl.gz'", ",", "path", ")", "\n", "\n", "", "f", "=", "gzip", ".", "open", "(", "path", ",", "'rb'", ")", "\n", "if", "six", ".", "PY2", ":", "\n", "        ", "train_set", ",", "valid_set", ",", "test_set", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "else", ":", "\n", "        ", "train_set", ",", "valid_set", ",", "test_set", "=", "pickle", ".", "load", "(", "f", ",", "encoding", "=", "'latin1'", ")", "\n", "", "f", ".", "close", "(", ")", "\n", "x_train", ",", "t_train", "=", "train_set", "[", "0", "]", ",", "train_set", "[", "1", "]", "\n", "x_valid", ",", "t_valid", "=", "valid_set", "[", "0", "]", ",", "valid_set", "[", "1", "]", "\n", "x_test", ",", "t_test", "=", "test_set", "[", "0", "]", ",", "test_set", "[", "1", "]", "\n", "if", "dequantify", ":", "\n", "        ", "x_train", "+=", "np", ".", "random", ".", "uniform", "(", "0", ",", "1.", "/", "256", ",", "\n", "size", "=", "x_train", ".", "shape", ")", ".", "astype", "(", "'float32'", ")", "\n", "x_valid", "+=", "np", ".", "random", ".", "uniform", "(", "0", ",", "1.", "/", "256", ",", "\n", "size", "=", "x_valid", ".", "shape", ")", ".", "astype", "(", "'float32'", ")", "\n", "x_test", "+=", "np", ".", "random", ".", "uniform", "(", "0", ",", "1.", "/", "256", ",", "\n", "size", "=", "x_test", ".", "shape", ")", ".", "astype", "(", "'float32'", ")", "\n", "", "n_y", "=", "t_train", ".", "max", "(", ")", "+", "1", "\n", "t_transform", "=", "(", "lambda", "x", ":", "to_one_hot", "(", "x", ",", "n_y", ")", ")", "if", "one_hot", "else", "(", "lambda", "x", ":", "x", ")", "\n", "return", "x_train", ",", "t_transform", "(", "t_train", ")", ",", "x_valid", ",", "t_transform", "(", "t_valid", ")", ",", "x_test", ",", "t_transform", "(", "t_test", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xinmei9322_semicrowd.utils.dataset.load_binary_mnist_realval": [[97, 113], ["dataset.load_mnist_realval"], "function", ["home.repos.pwc.inspect_result.xinmei9322_semicrowd.utils.dataset.load_mnist_realval"], ["", "def", "load_binary_mnist_realval", "(", "path", ")", ":", "\n", "    ", "\"\"\"\n    Loads real valued MNIST dataset for binary classification (Treat 0 & 2-9\n    as 0).\n\n    :param path: Path to the dataset file.\n    :return: The binary labeled MNIST dataset.\n    \"\"\"", "\n", "x_train", ",", "t_train", ",", "x_valid", ",", "t_valid", ",", "x_test", ",", "t_test", "=", "load_mnist_realval", "(", "path", ",", "one_hot", "=", "False", ")", "\n", "\n", "t_train", "=", "(", "t_train", "==", "1", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "t_valid", "=", "(", "t_valid", "==", "1", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "t_test", "=", "(", "t_test", "==", "1", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "return", "x_train", ",", "t_train", ",", "x_valid", ",", "t_valid", ",", "x_test", ",", "t_test", "\n", "\n"]], "home.repos.pwc.inspect_result.xinmei9322_semicrowd.utils.dataset.load_mnist_semi_supervised": [[115, 151], ["numpy.random.RandomState", "dataset.load_mnist_realval", "numpy.vstack().astype", "numpy.hstack", "six.moves.range", "six.moves.range", "numpy.vstack", "numpy.hstack", "numpy.random.shuffle", "x_train_by_class.append", "t_train_by_class.append", "numpy.arange", "np.random.RandomState.shuffle", "np.vstack.append", "np.hstack.append", "t_transform", "t_transform", "numpy.vstack", "numpy.nonzero", "dataset.to_one_hot"], "function", ["home.repos.pwc.inspect_result.xinmei9322_semicrowd.utils.dataset.load_mnist_realval", "home.repos.pwc.inspect_result.xinmei9322_semicrowd.utils.dataset.to_one_hot"], ["", "def", "load_mnist_semi_supervised", "(", "path", ",", "one_hot", "=", "True", ",", "seed", "=", "123456", ")", ":", "\n", "    ", "\"\"\"\n    Select 10 labeled data for each class and use all the other training data\n    as unlabeled.\n\n    :param path: Path to the dataset file.\n    :param one_hot: Whether to use one-hot representation for the labels.\n    :param seed: Random seed for selecting labeled data.\n\n    :return: The MNIST dataset for semi-supervised learning.\n    \"\"\"", "\n", "rng", "=", "np", ".", "random", ".", "RandomState", "(", "seed", "=", "seed", ")", "\n", "x_train", ",", "t_train", ",", "x_valid", ",", "t_valid", ",", "x_test", ",", "t_test", "=", "load_mnist_realval", "(", "path", ",", "one_hot", "=", "False", ")", "\n", "x_train", "=", "np", ".", "vstack", "(", "[", "x_train", ",", "x_valid", "]", ")", ".", "astype", "(", "'float32'", ")", "\n", "t_train", "=", "np", ".", "hstack", "(", "[", "t_train", ",", "t_valid", "]", ")", "\n", "x_train_by_class", "=", "[", "]", "\n", "t_train_by_class", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "        ", "indices", "=", "np", ".", "nonzero", "(", "t_train", "==", "i", ")", "[", "0", "]", "\n", "x_train_by_class", ".", "append", "(", "x_train", "[", "indices", "]", ")", "\n", "t_train_by_class", ".", "append", "(", "t_train", "[", "indices", "]", ")", "\n", "", "x_labeled", "=", "[", "]", "\n", "t_labeled", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "        ", "indices", "=", "np", ".", "arange", "(", "x_train_by_class", "[", "i", "]", ".", "shape", "[", "0", "]", ")", "\n", "rng", ".", "shuffle", "(", "indices", ")", "\n", "x_labeled", ".", "append", "(", "x_train_by_class", "[", "i", "]", "[", "indices", "[", ":", "10", "]", "]", ")", "\n", "t_labeled", ".", "append", "(", "t_train_by_class", "[", "i", "]", "[", "indices", "[", ":", "10", "]", "]", ")", "\n", "", "x_labeled", "=", "np", ".", "vstack", "(", "x_labeled", ")", "\n", "t_labeled", "=", "np", ".", "hstack", "(", "t_labeled", ")", "\n", "x_unlabeled", "=", "x_train", "\n", "np", ".", "random", ".", "shuffle", "(", "x_unlabeled", ")", "\n", "t_transform", "=", "(", "lambda", "x", ":", "to_one_hot", "(", "x", ",", "10", ")", ")", "if", "one_hot", "else", "(", "lambda", "x", ":", "x", ")", "\n", "return", "x_labeled", ",", "t_transform", "(", "t_labeled", ")", ",", "x_unlabeled", ",", "x_test", ",", "t_transform", "(", "t_test", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xinmei9322_semicrowd.utils.dataset.load_cifar10": [[153, 214], ["os.path.dirname", "os.path.join", "six.moves.range", "numpy.vstack", "numpy.hstack", "os.path.join", "train_x.reshape().transpose.astype", "test_x.reshape().transpose.astype", "train_x.reshape().transpose.reshape().transpose", "test_x.reshape().transpose.reshape().transpose", "os.path.isfile", "os.path.dirname", "dataset.download_dataset", "os.path.isfile", "os.path.join", "open", "numpy.asarray", "numpy.random.uniform().astype", "numpy.random.uniform().astype", "t_transform", "t_transform", "os.path.exists", "os.makedirs", "os.path.join", "tarfile.open", "tar.extractall", "open", "train_x.reshape().transpose.append", "np.hstack.append", "six.moves.cPickle.load", "six.moves.cPickle.load", "train_x.reshape().transpose.reshape", "test_x.reshape().transpose.reshape", "dataset.to_one_hot", "os.path.dirname", "str", "six.moves.cPickle.load", "six.moves.cPickle.load", "numpy.random.uniform", "numpy.random.uniform"], "function", ["home.repos.pwc.inspect_result.xinmei9322_semicrowd.utils.dataset.download_dataset", "home.repos.pwc.inspect_result.xinmei9322_semicrowd.utils.dataset.to_one_hot"], ["", "def", "load_cifar10", "(", "path", ",", "normalize", "=", "True", ",", "dequantify", "=", "False", ",", "one_hot", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    Loads the cifar10 dataset.\n\n    :param path: Path to the dataset file.\n    :param normalize: Whether to normalize the x data to the range [0, 1].\n    :param dequantify: Whether to add uniform noise to dequantify the data\n        following (Uria, 2013).\n    :param one_hot: Whether to use one-hot representation for the labels.\n\n    :return: The cifar10 dataset.\n    \"\"\"", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "path", ")", ":", "\n", "        ", "data_dir", "=", "os", ".", "path", ".", "dirname", "(", "path", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "dirname", "(", "path", ")", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "data_dir", ")", "\n", "", "download_dataset", "(", "\n", "'http://www.cs.toronto.edu/~kriz/cifar-10-python.tar.gz'", ",", "path", ")", "\n", "\n", "", "data_dir", "=", "os", ".", "path", ".", "dirname", "(", "path", ")", "\n", "batch_dir", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'cifar-10-batches-py'", ")", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "os", ".", "path", ".", "join", "(", "batch_dir", ",", "'data_batch_5'", ")", ")", ":", "\n", "        ", "with", "tarfile", ".", "open", "(", "path", ")", "as", "tar", ":", "\n", "            ", "tar", ".", "extractall", "(", "data_dir", ")", "\n", "\n", "", "", "train_x", ",", "train_y", "=", "[", "]", ",", "[", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "6", ")", ":", "\n", "        ", "batch_file", "=", "os", ".", "path", ".", "join", "(", "batch_dir", ",", "'data_batch_'", "+", "str", "(", "i", ")", ")", "\n", "with", "open", "(", "batch_file", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "if", "six", ".", "PY2", ":", "\n", "                ", "data", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "else", ":", "\n", "                ", "data", "=", "pickle", ".", "load", "(", "f", ",", "encoding", "=", "'latin1'", ")", "\n", "", "train_x", ".", "append", "(", "data", "[", "'data'", "]", ")", "\n", "train_y", ".", "append", "(", "data", "[", "'labels'", "]", ")", "\n", "", "", "train_x", "=", "np", ".", "vstack", "(", "train_x", ")", "\n", "train_y", "=", "np", ".", "hstack", "(", "train_y", ")", "\n", "\n", "test_batch_file", "=", "os", ".", "path", ".", "join", "(", "batch_dir", ",", "'test_batch'", ")", "\n", "with", "open", "(", "test_batch_file", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "if", "six", ".", "PY2", ":", "\n", "            ", "data", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "else", ":", "\n", "            ", "data", "=", "pickle", ".", "load", "(", "f", ",", "encoding", "=", "'latin1'", ")", "\n", "", "test_x", "=", "data", "[", "'data'", "]", "\n", "test_y", "=", "np", ".", "asarray", "(", "data", "[", "'labels'", "]", ")", "\n", "\n", "", "train_x", "=", "train_x", ".", "astype", "(", "'float32'", ")", "\n", "test_x", "=", "test_x", ".", "astype", "(", "'float32'", ")", "\n", "if", "dequantify", ":", "\n", "        ", "train_x", "+=", "np", ".", "random", ".", "uniform", "(", "0", ",", "1", ",", "\n", "size", "=", "train_x", ".", "shape", ")", ".", "astype", "(", "'float32'", ")", "\n", "test_x", "+=", "np", ".", "random", ".", "uniform", "(", "0", ",", "1", ",", "size", "=", "test_x", ".", "shape", ")", ".", "astype", "(", "'float32'", ")", "\n", "", "if", "normalize", ":", "\n", "        ", "train_x", "=", "train_x", "/", "256", "\n", "test_x", "=", "test_x", "/", "256", "\n", "\n", "", "train_x", "=", "train_x", ".", "reshape", "(", "(", "50000", ",", "3", ",", "32", ",", "32", ")", ")", ".", "transpose", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "test_x", "=", "test_x", ".", "reshape", "(", "(", "10000", ",", "3", ",", "32", ",", "32", ")", ")", ".", "transpose", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "t_transform", "=", "(", "lambda", "x", ":", "to_one_hot", "(", "x", ",", "10", ")", ")", "if", "one_hot", "else", "(", "lambda", "x", ":", "x", ")", "\n", "return", "train_x", ",", "t_transform", "(", "train_y", ")", ",", "test_x", ",", "t_transform", "(", "test_y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xinmei9322_semicrowd.utils.dataset.load_cifar10_semi_supervised": [[216, 262], ["numpy.random.RandomState", "dataset.load_cifar10", "six.moves.range", "six.moves.range", "numpy.vstack", "numpy.hstack", "numpy.random.shuffle", "x_train_by_class.append", "t_train_by_class.append", "ind_train_by_class.append", "numpy.arange", "np.random.RandomState.shuffle", "np.vstack.append", "np.hstack.append", "ind_labeled.append", "numpy.nonzero", "dataset.to_one_hot", "t_transform", "t_transform", "t_transform", "t_transform"], "function", ["home.repos.pwc.inspect_result.xinmei9322_semicrowd.utils.dataset.load_cifar10", "home.repos.pwc.inspect_result.xinmei9322_semicrowd.utils.dataset.to_one_hot"], ["", "def", "load_cifar10_semi_supervised", "(", "path", ",", "normalize", "=", "True", ",", "dequantify", "=", "False", ",", "\n", "one_hot", "=", "True", ",", "seed", "=", "123456", ",", "return_indice", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Select 400 labeled data for each class and use all the other training data\n    as unlabeled.\n\n    :param path: Path to the dataset file.\n    :param normalize: Whether to normalize the x data to the range [0, 1].\n    :param dequantify: Whether to add uniform noise to dequantify the data\n        following (Uria, 2013).\n    :param one_hot: Whether to use one-hot representation for the labels.\n    :param seed: Random seed for selecting labeled data.\n\n    :return: The cifar10 dataset for semi-supervised learning.\n    \"\"\"", "\n", "rng", "=", "np", ".", "random", ".", "RandomState", "(", "seed", "=", "seed", ")", "\n", "x_train", ",", "t_train", ",", "x_test", ",", "t_test", "=", "load_cifar10", "(", "\n", "path", ",", "normalize", "=", "normalize", ",", "dequantify", "=", "dequantify", ",", "one_hot", "=", "False", ")", "\n", "x_train_by_class", "=", "[", "]", "\n", "t_train_by_class", "=", "[", "]", "\n", "ind_train_by_class", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "        ", "indices", "=", "np", ".", "nonzero", "(", "t_train", "==", "i", ")", "[", "0", "]", "\n", "x_train_by_class", ".", "append", "(", "x_train", "[", "indices", "]", ")", "\n", "t_train_by_class", ".", "append", "(", "t_train", "[", "indices", "]", ")", "\n", "ind_train_by_class", ".", "append", "(", "indices", ")", "\n", "", "x_labeled", "=", "[", "]", "\n", "t_labeled", "=", "[", "]", "\n", "ind_labeled", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "        ", "indices", "=", "np", ".", "arange", "(", "x_train_by_class", "[", "i", "]", ".", "shape", "[", "0", "]", ")", "\n", "rng", ".", "shuffle", "(", "indices", ")", "\n", "x_labeled", ".", "append", "(", "x_train_by_class", "[", "i", "]", "[", "indices", "[", ":", "400", "]", "]", ")", "\n", "t_labeled", ".", "append", "(", "t_train_by_class", "[", "i", "]", "[", "indices", "[", ":", "400", "]", "]", ")", "\n", "ind_labeled", ".", "append", "(", "ind_train_by_class", "[", "i", "]", "[", "indices", "[", ":", "400", "]", "]", ")", "\n", "", "x_labeled", "=", "np", ".", "vstack", "(", "x_labeled", ")", "\n", "t_labeled", "=", "np", ".", "hstack", "(", "t_labeled", ")", "\n", "x_unlabeled", "=", "x_train", "\n", "np", ".", "random", ".", "shuffle", "(", "x_unlabeled", ")", "\n", "t_transform", "=", "(", "lambda", "x", ":", "to_one_hot", "(", "x", ",", "10", ")", ")", "if", "one_hot", "else", "(", "lambda", "x", ":", "x", ")", "\n", "if", "return_indice", ":", "\n", "        ", "return", "x_labeled", ",", "t_transform", "(", "t_labeled", ")", ",", "x_unlabeled", ",", "x_test", ",", "t_transform", "(", "t_test", ")", ",", "ind_labeled", "\n", "", "else", ":", "\n", "        ", "return", "x_labeled", ",", "t_transform", "(", "t_labeled", ")", ",", "x_unlabeled", ",", "x_test", ",", "t_transform", "(", "t_test", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xinmei9322_semicrowd.utils.dataset.load_uci_german_credits": [[264, 282], ["numpy.loadtxt", "os.path.isfile", "os.path.dirname", "dataset.download_dataset", "os.path.exists", "os.makedirs", "os.path.dirname"], "function", ["home.repos.pwc.inspect_result.xinmei9322_semicrowd.utils.dataset.download_dataset"], ["", "", "def", "load_uci_german_credits", "(", "path", ",", "n_train", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "isfile", "(", "path", ")", ":", "\n", "        ", "data_dir", "=", "os", ".", "path", ".", "dirname", "(", "path", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "dirname", "(", "path", ")", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "data_dir", ")", "\n", "", "download_dataset", "(", "'https://archive.ics.uci.edu/ml/'", "\n", "'machine-learning-databases/statlog/'", "\n", "'german/german.data-numeric'", ",", "path", ")", "\n", "\n", "", "n_dims", "=", "24", "\n", "data", "=", "np", ".", "loadtxt", "(", "path", ")", "\n", "\n", "x_train", "=", "data", "[", ":", "n_train", ",", ":", "n_dims", "]", "\n", "y_train", "=", "data", "[", ":", "n_train", ",", "n_dims", "]", "-", "1", "\n", "x_test", "=", "data", "[", "n_train", ":", ",", ":", "n_dims", "]", "\n", "y_test", "=", "data", "[", "n_train", ":", ",", "n_dims", "]", "-", "1", "\n", "\n", "return", "x_train", ",", "y_train", ",", "x_test", ",", "y_test", "\n", "\n"]], "home.repos.pwc.inspect_result.xinmei9322_semicrowd.utils.dataset.load_uci_boston_housing": [[284, 308], ["numpy.loadtxt", "data.astype.astype", "numpy.random.choice", "int", "int", "os.path.isfile", "os.path.dirname", "dataset.download_dataset", "numpy.arange", "numpy.round", "numpy.round", "os.path.exists", "os.makedirs", "os.path.dirname"], "function", ["home.repos.pwc.inspect_result.xinmei9322_semicrowd.utils.dataset.download_dataset"], ["", "def", "load_uci_boston_housing", "(", "path", ",", "dtype", "=", "np", ".", "float32", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "isfile", "(", "path", ")", ":", "\n", "        ", "data_dir", "=", "os", ".", "path", ".", "dirname", "(", "path", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "dirname", "(", "path", ")", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "data_dir", ")", "\n", "", "download_dataset", "(", "'http://archive.ics.uci.edu/ml/'", "\n", "'machine-learning-databases/housing/housing.data'", ",", "\n", "path", ")", "\n", "\n", "", "data", "=", "np", ".", "loadtxt", "(", "path", ")", "\n", "data", "=", "data", ".", "astype", "(", "dtype", ")", "\n", "permutation", "=", "np", ".", "random", ".", "choice", "(", "np", ".", "arange", "(", "data", ".", "shape", "[", "0", "]", ")", ",", "\n", "data", ".", "shape", "[", "0", "]", ",", "replace", "=", "False", ")", "\n", "size_train", "=", "int", "(", "np", ".", "round", "(", "data", ".", "shape", "[", "0", "]", "*", "0.8", ")", ")", "\n", "size_test", "=", "int", "(", "np", ".", "round", "(", "data", ".", "shape", "[", "0", "]", "*", "0.9", ")", ")", "\n", "index_train", "=", "permutation", "[", "0", ":", "size_train", "]", "\n", "index_test", "=", "permutation", "[", "size_train", ":", "size_test", "]", "\n", "index_val", "=", "permutation", "[", "size_test", ":", "]", "\n", "\n", "x_train", ",", "y_train", "=", "data", "[", "index_train", ",", ":", "-", "1", "]", ",", "data", "[", "index_train", ",", "-", "1", "]", "\n", "x_val", ",", "y_val", "=", "data", "[", "index_val", ",", ":", "-", "1", "]", ",", "data", "[", "index_val", ",", "-", "1", "]", "\n", "x_test", ",", "y_test", "=", "data", "[", "index_test", ",", ":", "-", "1", "]", ",", "data", "[", "index_test", ",", "-", "1", "]", "\n", "\n", "return", "x_train", ",", "y_train", ",", "x_val", ",", "y_val", ",", "x_test", ",", "y_test", "\n", "\n"]], "home.repos.pwc.inspect_result.xinmei9322_semicrowd.utils.dataset.load_uci_bow": [[310, 357], ["os.path.dirname", "os.path.exists", "os.makedirs", "os.path.isfile", "dataset.download_dataset", "numpy.save", "os.remove", "numpy.load", "os.path.isfile", "dataset.download_dataset", "open", "os.path.dirname", "gzip.open", "int", "int", "int", "numpy.zeros", "six.moves.range", "v.strip", "f.readline", "f.readline", "f.readline", "f.readline().split", "int", "vf.readlines", "f.readline", "int", "int"], "function", ["home.repos.pwc.inspect_result.xinmei9322_semicrowd.utils.dataset.download_dataset", "home.repos.pwc.inspect_result.xinmei9322_semicrowd.utils.dataset.download_dataset"], ["", "def", "load_uci_bow", "(", "data_name", ",", "data_path", ")", ":", "\n", "    ", "\"\"\"\n    Loads the bag-of-words dataset from UCI machine learning repository.\n\n    :param data_name: Name of the dataset, e.g., nips, NYTimes.\n    :param data_path: Path to the dataset.\n\n    :return: A tuple of (X, vocab), where X is a D * V bag-of-words matrix,\n        whose each row is a document and its elements are count of each word.\n        vocab is a list of words in the vocabulary.\n    \"\"\"", "\n", "data_dir", "=", "os", ".", "path", ".", "dirname", "(", "data_path", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "dirname", "(", "data_path", ")", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "data_dir", ")", "\n", "\n", "", "uci_url", "=", "'https://archive.ics.uci.edu/ml/machine-learning-databases'", "'/bag-of-words/'", "\n", "vector_file", "=", "'{}.vector'", ".", "format", "(", "data_path", ")", "\n", "vocab_file", "=", "'{}.vocab'", ".", "format", "(", "data_path", ")", "\n", "numpy_file", "=", "'{}.npy'", ".", "format", "(", "data_path", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "numpy_file", ")", ":", "\n", "        ", "download_dataset", "(", "'{}docword.{}.txt.gz'", ".", "format", "(", "uci_url", ",", "data_name", ")", ",", "\n", "vector_file", ")", "\n", "with", "gzip", ".", "open", "(", "vector_file", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "D", "=", "int", "(", "f", ".", "readline", "(", ")", ")", "\n", "V", "=", "int", "(", "f", ".", "readline", "(", ")", ")", "\n", "T", "=", "int", "(", "f", ".", "readline", "(", ")", ")", "\n", "\n", "data", "=", "np", ".", "zeros", "(", "(", "D", ",", "V", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "i", "in", "range", "(", "T", ")", ":", "\n", "                ", "d", ",", "v", ",", "c", "=", "f", ".", "readline", "(", ")", ".", "split", "(", ")", "\n", "data", "[", "int", "(", "d", ")", "-", "1", ",", "int", "(", "v", ")", "-", "1", "]", "+=", "int", "(", "c", ")", "\n", "\n", "", "", "np", ".", "save", "(", "numpy_file", ",", "data", ")", "\n", "os", ".", "remove", "(", "vector_file", ")", "\n", "", "else", ":", "\n", "        ", "data", "=", "np", ".", "load", "(", "numpy_file", ")", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "isfile", "(", "vocab_file", ")", ":", "\n", "        ", "download_dataset", "(", "'{}vocab.{}.txt'", ".", "format", "(", "uci_url", ",", "data_name", ")", ",", "\n", "vocab_file", ")", "\n", "\n", "", "with", "open", "(", "vocab_file", ")", "as", "vf", ":", "\n", "        ", "vocab", "=", "[", "v", ".", "strip", "(", ")", "for", "v", "in", "vf", ".", "readlines", "(", ")", "]", "\n", "\n", "", "return", "data", ",", "vocab", "\n", "\n"]], "home.repos.pwc.inspect_result.xinmei9322_semicrowd.utils.dataset.load_uci_bow_sparse": [[359, 401], ["os.path.dirname", "os.path.exists", "os.makedirs", "os.path.isfile", "dataset.download_dataset", "gzip.open", "int", "int", "int", "six.moves.range", "os.path.isfile", "dataset.download_dataset", "open", "os.path.dirname", "f.readline", "f.readline", "f.readline", "f.readline().split", "data[].append", "v.strip", "six.moves.range", "vf.readlines", "f.readline", "int", "int", "int"], "function", ["home.repos.pwc.inspect_result.xinmei9322_semicrowd.utils.dataset.download_dataset", "home.repos.pwc.inspect_result.xinmei9322_semicrowd.utils.dataset.download_dataset"], ["", "def", "load_uci_bow_sparse", "(", "data_name", ",", "data_path", ")", ":", "\n", "    ", "\"\"\"\n    Loads the bag-of-words dataset from UCI machine learning repository.\n\n    :param data_name: Name of the dataset, e.g., nips, NYTimes.\n    :param data_path: Path to the dataset.\n\n    :return: A tuple of (X, vocab), where X is a D * V bag-of-words matrix,\n        whose each row is a document and its elements are count of each word.\n        vocab is a list of words in the vocabulary.\n    \"\"\"", "\n", "data_dir", "=", "os", ".", "path", ".", "dirname", "(", "data_path", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "dirname", "(", "data_path", ")", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "data_dir", ")", "\n", "\n", "", "uci_url", "=", "'https://archive.ics.uci.edu/ml/machine-learning-databases'", "'/bag-of-words/'", "\n", "vector_file", "=", "'{}.vector'", ".", "format", "(", "data_path", ")", "\n", "vocab_file", "=", "'{}.vocab'", ".", "format", "(", "data_path", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "vector_file", ")", ":", "\n", "        ", "download_dataset", "(", "'{}docword.{}.txt.gz'", ".", "format", "(", "uci_url", ",", "data_name", ")", ",", "\n", "vector_file", ")", "\n", "\n", "", "with", "gzip", ".", "open", "(", "vector_file", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "D", "=", "int", "(", "f", ".", "readline", "(", ")", ")", "\n", "V", "=", "int", "(", "f", ".", "readline", "(", ")", ")", "\n", "T", "=", "int", "(", "f", ".", "readline", "(", ")", ")", "\n", "data", "=", "[", "[", "]", "for", "_", "in", "range", "(", "D", ")", "]", "\n", "\n", "for", "i", "in", "range", "(", "T", ")", ":", "\n", "            ", "d", ",", "v", ",", "c", "=", "f", ".", "readline", "(", ")", ".", "split", "(", ")", "\n", "data", "[", "int", "(", "d", ")", "-", "1", "]", ".", "append", "(", "(", "int", "(", "v", ")", "-", "1", ",", "int", "(", "c", ")", ")", ")", "\n", "\n", "", "", "if", "not", "os", ".", "path", ".", "isfile", "(", "vocab_file", ")", ":", "\n", "        ", "download_dataset", "(", "'{}vocab.{}.txt'", ".", "format", "(", "uci_url", ",", "data_name", ")", ",", "\n", "vocab_file", ")", "\n", "\n", "", "with", "open", "(", "vocab_file", ")", "as", "vf", ":", "\n", "        ", "vocab", "=", "[", "v", ".", "strip", "(", ")", "for", "v", "in", "vf", ".", "readlines", "(", ")", "]", "\n", "\n", "", "return", "data", ",", "vocab", "\n", "\n"]], "home.repos.pwc.inspect_result.xinmei9322_semicrowd.utils.dataset.load_svhn": [[403, 446], ["os.path.join", "scipy.io.loadmat", "train_data[].flatten", "scipy.io.loadmat", "test_data[].flatten", "train_x.transpose.astype", "test_x.transpose.astype", "train_y.astype.astype", "test_y.astype.astype", "train_x.transpose.transpose", "test_x.transpose.transpose", "os.path.exists", "os.makedirs", "six.moves.urllib.request.urlretrieve", "six.moves.urllib.request.urlretrieve", "numpy.random.uniform().astype", "numpy.random.uniform().astype", "t_transform", "t_transform", "sys.stdout.write", "sys.stdout.flush", "os.path.join", "os.path.join", "dataset.to_one_hot", "numpy.random.uniform", "numpy.random.uniform", "float", "float"], "function", ["home.repos.pwc.inspect_result.xinmei9322_semicrowd.utils.utils.Tap.write", "home.repos.pwc.inspect_result.xinmei9322_semicrowd.utils.utils.Tap.flush", "home.repos.pwc.inspect_result.xinmei9322_semicrowd.utils.dataset.to_one_hot"], ["", "def", "load_svhn", "(", "path", ",", "normalize", "=", "True", ",", "dequantify", "=", "False", ",", "one_hot", "=", "True", ")", ":", "\n", "    ", "new_data_dir", "=", "os", ".", "path", ".", "join", "(", "path", ",", "'svhn'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "new_data_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "new_data_dir", ")", "\n", "\n", "def", "_progress", "(", "count", ",", "block_size", ",", "total_size", ")", ":", "\n", "            ", "sys", ".", "stdout", ".", "write", "(", "'\\r>> Downloading %.1f%%'", "%", "(", "\n", "float", "(", "count", "*", "block_size", ")", "/", "float", "(", "total_size", ")", "*", "100.0", ")", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n", "", "filepath", ",", "_", "=", "urllib", ".", "request", ".", "urlretrieve", "(", "\n", "'http://ufldl.stanford.edu/housenumbers/train_32x32.mat'", ",", "\n", "new_data_dir", "+", "'/train_32x32.mat'", ",", "_progress", ")", "\n", "filepath", ",", "_", "=", "urllib", ".", "request", ".", "urlretrieve", "(", "\n", "'http://ufldl.stanford.edu/housenumbers/test_32x32.mat'", ",", "\n", "new_data_dir", "+", "'/test_32x32.mat'", ",", "_progress", ")", "\n", "\n", "", "train_data", "=", "loadmat", "(", "os", ".", "path", ".", "join", "(", "path", ",", "'svhn'", ")", "+", "\n", "'/train_32x32.mat'", ")", "\n", "train_x", "=", "train_data", "[", "'X'", "]", "\n", "train_y", "=", "train_data", "[", "'y'", "]", ".", "flatten", "(", ")", "\n", "train_y", "[", "train_y", "==", "10", "]", "=", "0", "\n", "\n", "test_data", "=", "loadmat", "(", "os", ".", "path", ".", "join", "(", "path", ",", "'svhn'", ")", "+", "\n", "'/test_32x32.mat'", ")", "\n", "test_x", "=", "test_data", "[", "'X'", "]", "\n", "test_y", "=", "test_data", "[", "'y'", "]", ".", "flatten", "(", ")", "\n", "test_y", "[", "test_y", "==", "10", "]", "=", "0", "\n", "train_x", "=", "train_x", ".", "astype", "(", "'float32'", ")", "\n", "test_x", "=", "test_x", ".", "astype", "(", "'float32'", ")", "\n", "train_y", "=", "train_y", ".", "astype", "(", "'int32'", ")", "\n", "test_y", "=", "test_y", ".", "astype", "(", "'int32'", ")", "\n", "if", "dequantify", ":", "\n", "        ", "train_x", "+=", "np", ".", "random", ".", "uniform", "(", "0", ",", "1", ",", "\n", "size", "=", "train_x", ".", "shape", ")", ".", "astype", "(", "'float32'", ")", "\n", "test_x", "+=", "np", ".", "random", ".", "uniform", "(", "0", ",", "1", ",", "size", "=", "test_x", ".", "shape", ")", ".", "astype", "(", "'float32'", ")", "\n", "", "if", "normalize", ":", "\n", "        ", "train_x", "/=", "256", "\n", "test_x", "/=", "256", "\n", "", "train_x", "=", "train_x", ".", "transpose", "(", "(", "3", ",", "0", ",", "1", ",", "2", ")", ")", "# (73257, 32, 32, 3)", "\n", "test_x", "=", "test_x", ".", "transpose", "(", "(", "3", ",", "0", ",", "1", ",", "2", ")", ")", "# (26032, 32, 32, 3)", "\n", "t_transform", "=", "(", "lambda", "x", ":", "to_one_hot", "(", "x", ",", "10", ")", ")", "if", "one_hot", "else", "(", "lambda", "x", ":", "x", ")", "\n", "return", "train_x", ",", "t_transform", "(", "train_y", ")", ",", "test_x", ",", "t_transform", "(", "test_y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xinmei9322_semicrowd.utils.utils.AdamaxOptimizer.__init__": [[62, 73], ["tensorflow.python.training.optimizer.Optimizer.__init__"], "methods", ["home.repos.pwc.inspect_result.xinmei9322_semicrowd.utils.utils.Tap.__init__"], ["def", "__init__", "(", "self", ",", "learning_rate", "=", "0.001", ",", "beta1", "=", "0.9", ",", "beta2", "=", "0.999", ",", "\n", "use_locking", "=", "False", ",", "name", "=", "\"Adamax\"", ")", ":", "\n", "        ", "super", "(", "AdamaxOptimizer", ",", "self", ")", ".", "__init__", "(", "use_locking", ",", "name", ")", "\n", "self", ".", "_lr", "=", "learning_rate", "\n", "self", ".", "_beta1", "=", "beta1", "\n", "self", ".", "_beta2", "=", "beta2", "\n", "\n", "# Tensor versions of the constructor arguments, created in _prepare().", "\n", "self", ".", "_lr_t", "=", "None", "\n", "self", ".", "_beta1_t", "=", "None", "\n", "self", ".", "_beta2_t", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.xinmei9322_semicrowd.utils.utils.AdamaxOptimizer._prepare": [[74, 78], ["tensorflow.convert_to_tensor", "tensorflow.convert_to_tensor", "tensorflow.convert_to_tensor"], "methods", ["None"], ["", "def", "_prepare", "(", "self", ")", ":", "\n", "        ", "self", ".", "_lr_t", "=", "tf", ".", "convert_to_tensor", "(", "self", ".", "_lr", ",", "name", "=", "\"learning_rate\"", ")", "\n", "self", ".", "_beta1_t", "=", "tf", ".", "convert_to_tensor", "(", "self", ".", "_beta1", ",", "name", "=", "\"beta1\"", ")", "\n", "self", ".", "_beta2_t", "=", "tf", ".", "convert_to_tensor", "(", "self", ".", "_beta2", ",", "name", "=", "\"beta2\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xinmei9322_semicrowd.utils.utils.AdamaxOptimizer._create_slots": [[79, 84], ["utils.AdamaxOptimizer._zeros_slot", "utils.AdamaxOptimizer._zeros_slot"], "methods", ["None"], ["", "def", "_create_slots", "(", "self", ",", "var_list", ")", ":", "\n", "# Create slots for the first and second moments.", "\n", "        ", "for", "v", "in", "var_list", ":", "\n", "            ", "self", ".", "_zeros_slot", "(", "v", ",", "\"m\"", ",", "self", ".", "_name", ")", "\n", "self", ".", "_zeros_slot", "(", "v", ",", "\"v\"", ",", "self", ".", "_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xinmei9322_semicrowd.utils.utils.AdamaxOptimizer._apply_dense": [[85, 102], ["tensorflow.cast", "tensorflow.cast", "tensorflow.cast", "utils.AdamaxOptimizer.get_slot", "utils.AdamaxOptimizer.assign", "utils.AdamaxOptimizer.get_slot", "utils.AdamaxOptimizer.assign", "tensorflow.assign_sub", "tensorflow.group", "tensorflow.maximum", "tensorflow.abs"], "methods", ["None"], ["", "", "def", "_apply_dense", "(", "self", ",", "grad", ",", "var", ")", ":", "\n", "        ", "lr_t", "=", "tf", ".", "cast", "(", "self", ".", "_lr_t", ",", "var", ".", "dtype", ".", "base_dtype", ")", "\n", "beta1_t", "=", "tf", ".", "cast", "(", "self", ".", "_beta1_t", ",", "var", ".", "dtype", ".", "base_dtype", ")", "\n", "beta2_t", "=", "tf", ".", "cast", "(", "self", ".", "_beta2_t", ",", "var", ".", "dtype", ".", "base_dtype", ")", "\n", "if", "var", ".", "dtype", ".", "base_dtype", "==", "tf", ".", "float16", ":", "\n", "            ", "eps", "=", "1e-7", "# Can't use 1e-8 due to underflow", "\n", "", "else", ":", "\n", "            ", "eps", "=", "1e-8", "\n", "\n", "", "v", "=", "self", ".", "get_slot", "(", "var", ",", "\"v\"", ")", "\n", "v_t", "=", "v", ".", "assign", "(", "beta1_t", "*", "v", "+", "(", "1.", "-", "beta1_t", ")", "*", "grad", ")", "\n", "m", "=", "self", ".", "get_slot", "(", "var", ",", "\"m\"", ")", "\n", "m_t", "=", "m", ".", "assign", "(", "tf", ".", "maximum", "(", "beta2_t", "*", "m", "+", "eps", ",", "tf", ".", "abs", "(", "grad", ")", ")", ")", "\n", "g_t", "=", "v_t", "/", "m_t", "\n", "\n", "var_update", "=", "tf", ".", "assign_sub", "(", "var", ",", "lr_t", "*", "g_t", ")", "\n", "return", "tf", ".", "group", "(", "*", "[", "var_update", ",", "m_t", ",", "v_t", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xinmei9322_semicrowd.utils.utils.AdamaxOptimizer._apply_sparse": [[103, 105], ["NotImplementedError"], "methods", ["None"], ["", "def", "_apply_sparse", "(", "self", ",", "grad", ",", "var", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"Sparse gradient updates are not supported.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xinmei9322_semicrowd.utils.utils.Tap.__init__": [[353, 358], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "stream", ")", ":", "\n", "        ", "self", ".", "stream", "=", "stream", "\n", "self", ".", "buffer", "=", "''", "\n", "self", ".", "file", "=", "None", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.xinmei9322_semicrowd.utils.utils.Tap.write": [[359, 367], ["utils.Tap.stream.write", "utils.Tap.stream.flush", "utils.Tap.file.write", "utils.Tap.file.flush"], "methods", ["home.repos.pwc.inspect_result.xinmei9322_semicrowd.utils.utils.Tap.write", "home.repos.pwc.inspect_result.xinmei9322_semicrowd.utils.utils.Tap.flush", "home.repos.pwc.inspect_result.xinmei9322_semicrowd.utils.utils.Tap.write", "home.repos.pwc.inspect_result.xinmei9322_semicrowd.utils.utils.Tap.flush"], ["", "def", "write", "(", "self", ",", "s", ")", ":", "\n", "        ", "self", ".", "stream", ".", "write", "(", "s", ")", "\n", "self", ".", "stream", ".", "flush", "(", ")", "\n", "if", "self", ".", "file", "is", "not", "None", ":", "\n", "            ", "self", ".", "file", ".", "write", "(", "s", ")", "\n", "self", ".", "file", ".", "flush", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "buffer", "=", "self", ".", "buffer", "+", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.xinmei9322_semicrowd.utils.utils.Tap.set_file": [[368, 374], ["utils.Tap.file.write", "utils.Tap.file.flush"], "methods", ["home.repos.pwc.inspect_result.xinmei9322_semicrowd.utils.utils.Tap.write", "home.repos.pwc.inspect_result.xinmei9322_semicrowd.utils.utils.Tap.flush"], ["", "", "def", "set_file", "(", "self", ",", "f", ")", ":", "\n", "        ", "assert", "(", "self", ".", "file", "is", "None", ")", "\n", "self", ".", "file", "=", "f", "\n", "self", ".", "file", ".", "write", "(", "self", ".", "buffer", ")", "\n", "self", ".", "file", ".", "flush", "(", ")", "\n", "self", ".", "buffer", "=", "''", "\n", "\n"]], "home.repos.pwc.inspect_result.xinmei9322_semicrowd.utils.utils.Tap.flush": [[375, 379], ["utils.Tap.stream.flush", "utils.Tap.file.flush"], "methods", ["home.repos.pwc.inspect_result.xinmei9322_semicrowd.utils.utils.Tap.flush", "home.repos.pwc.inspect_result.xinmei9322_semicrowd.utils.utils.Tap.flush"], ["", "def", "flush", "(", "self", ")", ":", "\n", "        ", "self", ".", "stream", ".", "flush", "(", ")", "\n", "if", "self", ".", "file", "is", "not", "None", ":", "\n", "            ", "self", ".", "file", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xinmei9322_semicrowd.utils.utils.Tap.close": [[380, 385], ["utils.Tap.stream.close", "utils.Tap.file.close"], "methods", ["home.repos.pwc.inspect_result.xinmei9322_semicrowd.utils.utils.Tap.close", "home.repos.pwc.inspect_result.xinmei9322_semicrowd.utils.utils.Tap.close"], ["", "", "def", "close", "(", "self", ")", ":", "\n", "        ", "self", ".", "stream", ".", "close", "(", ")", "\n", "if", "self", ".", "file", "is", "not", "None", ":", "\n", "            ", "self", ".", "file", ".", "close", "(", ")", "\n", "self", ".", "file", "=", "None", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.xinmei9322_semicrowd.utils.utils.setup_logger": [[26, 42], ["logging.getLogger", "logging.getLogger.setLevel", "os.path.join", "logging.FileHandler", "logging.FileHandler.setLevel", "logging.StreamHandler", "logging.StreamHandler.setLevel", "logging.getLogger.addHandler", "logging.getLogger.addHandler", "logging.getLogger.info", "os.path.exists", "os.makedirs", "open", "logging.getLogger.info", "os.path.dirname", "os.path.dirname", "f.read"], "function", ["None"], ["def", "setup_logger", "(", "name", ",", "src", ",", "result_path", ",", "filename", "=", "\"log\"", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "name", ")", "\n", "logger", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "log_path", "=", "os", ".", "path", ".", "join", "(", "result_path", ",", "filename", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "dirname", "(", "log_path", ")", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "log_path", ")", ")", "\n", "", "info_file_handler", "=", "logging", ".", "FileHandler", "(", "log_path", ")", "\n", "info_file_handler", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "console_handler", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "console_handler", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "logger", ".", "addHandler", "(", "info_file_handler", ")", "\n", "logger", ".", "addHandler", "(", "console_handler", ")", "\n", "logger", ".", "info", "(", "src", ")", "\n", "with", "open", "(", "src", ")", "as", "f", ":", "\n", "        ", "logger", ".", "info", "(", "f", ".", "read", "(", ")", ")", "\n", "", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.xinmei9322_semicrowd.utils.utils.cluster_acc": [[44, 53], ["numpy.zeros", "six.moves.range", "linear_assignment", "max", "y_pred.max", "y.max", "np.zeros.max", "sum"], "function", ["None"], ["", "def", "cluster_acc", "(", "y_pred", ",", "y", ")", ":", "\n", "    ", "from", "sklearn", ".", "utils", ".", "linear_assignment_", "import", "linear_assignment", "\n", "assert", "y_pred", ".", "size", "==", "y", ".", "size", "\n", "D", "=", "max", "(", "y_pred", ".", "max", "(", ")", ",", "y", ".", "max", "(", ")", ")", "+", "1", "\n", "w", "=", "np", ".", "zeros", "(", "(", "D", ",", "D", ")", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "for", "i", "in", "range", "(", "y_pred", ".", "size", ")", ":", "\n", "        ", "w", "[", "y_pred", "[", "i", "]", ",", "y", "[", "i", "]", "]", "+=", "1", "\n", "", "ind", "=", "linear_assignment", "(", "w", ".", "max", "(", ")", "-", "w", ")", "\n", "return", "sum", "(", "[", "w", "[", "j", ",", "k", "]", "for", "j", ",", "k", "in", "ind", "]", ")", "*", "1.0", "/", "y_pred", ".", "size", ",", "w", "\n", "\n"]], "home.repos.pwc.inspect_result.xinmei9322_semicrowd.utils.utils.save_image_collections": [[107, 144], ["skimage.img_as_ubyte", "numpy.zeros", "six.moves.range", "ret.squeeze.squeeze", "skimage.io.imsave", "os.path.exists", "os.makedirs", "x.transpose.transpose", "six.moves.range", "print", "six.moves.range", "os.path.dirname", "os.path.dirname", "skimage.exposure.rescale_intensity"], "function", ["None"], ["", "", "def", "save_image_collections", "(", "x", ",", "filename", ",", "shape", "=", "(", "10", ",", "10", ")", ",", "scale_each", "=", "False", ",", "\n", "transpose", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    :param shape: tuple\n        The shape of final big images.\n    :param x: uint8 numpy array\n        Input image collections. (number_of_images, rows, columns, channels) or\n        (number_of_images, channels, rows, columns)\n    :param scale_each: bool\n        If true, rescale intensity for each image.\n    :param transpose: bool\n        If true, transpose x to (number_of_images, rows, columns, channels),\n        i.e., put channels behind.\n    :return: uint8 numpy array\n        The output image.\n    \"\"\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "dirname", "(", "filename", ")", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "filename", ")", ")", "\n", "", "n", "=", "x", ".", "shape", "[", "0", "]", "\n", "if", "transpose", ":", "\n", "        ", "x", "=", "x", ".", "transpose", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "", "if", "scale_each", "is", "True", ":", "\n", "        ", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "            ", "x", "[", "i", "]", "=", "rescale_intensity", "(", "x", "[", "i", "]", ",", "out_range", "=", "(", "0", ",", "1", ")", ")", "\n", "", "", "n_channels", "=", "x", ".", "shape", "[", "3", "]", "\n", "x", "=", "img_as_ubyte", "(", "x", ")", "\n", "r", ",", "c", "=", "shape", "\n", "if", "r", "*", "c", "<", "n", ":", "\n", "        ", "print", "(", "'Shape too small to contain all images'", ")", "\n", "", "h", ",", "w", "=", "x", ".", "shape", "[", "1", ":", "3", "]", "\n", "ret", "=", "np", ".", "zeros", "(", "(", "h", "*", "r", ",", "w", "*", "c", ",", "n_channels", ")", ",", "dtype", "=", "'uint8'", ")", "\n", "for", "i", "in", "range", "(", "r", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "c", ")", ":", "\n", "            ", "if", "i", "*", "c", "+", "j", "<", "n", ":", "\n", "                ", "ret", "[", "i", "*", "h", ":", "(", "i", "+", "1", ")", "*", "h", ",", "j", "*", "w", ":", "(", "j", "+", "1", ")", "*", "w", ",", ":", "]", "=", "x", "[", "i", "*", "c", "+", "j", "]", "\n", "", "", "", "ret", "=", "ret", ".", "squeeze", "(", ")", "\n", "io", ".", "imsave", "(", "filename", ",", "ret", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xinmei9322_semicrowd.utils.utils.save_contrast_image_collections": [[146, 207], ["skimage.img_as_ubyte", "skimage.img_as_ubyte", "numpy.zeros", "six.moves.range", "ret.squeeze.squeeze", "skimage.io.imsave", "os.path.exists", "os.makedirs", "x1.transpose.transpose", "x2.transpose.transpose", "six.moves.range", "print", "six.moves.range", "os.path.dirname", "os.path.dirname", "skimage.exposure.rescale_intensity", "skimage.exposure.rescale_intensity", "int", "int", "int", "int"], "function", ["None"], ["", "def", "save_contrast_image_collections", "(", "x1", ",", "x2", ",", "filename", ",", "shape", "=", "(", "10", ",", "10", ")", ",", "\n", "scale_each", "=", "False", ",", "transpose", "=", "False", ",", "\n", "along_col", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    :param x1: uint8 numpy array\n        Input image collections. (number_of_images, rows, columns, channels) or\n        (number_of_images, channels, rows, columns)\n    :param x2: uint8 numpy array\n        Input image collections. (number_of_images, rows, columns, channels) or\n        (number_of_images, channels, rows, columns)\n    :param shape: tuple\n        The shape of final big images.\n    :param scale_each: bool\n        If true, rescale intensity for each image.\n    :param transpose: bool\n        If true, transpose x to (number_of_images, rows, columns, channels),\n        i.e., put channels behind.\n    :param along_col: bool\n        If true, the contrastive images are placed one by one along the column.\n        If False, they are placed one by one along the row.\n    :return: uint8 numpy array\n        The output image.\n    \"\"\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "dirname", "(", "filename", ")", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "filename", ")", ")", "\n", "", "n", "=", "x1", ".", "shape", "[", "0", "]", "\n", "if", "transpose", ":", "\n", "        ", "x1", "=", "x1", ".", "transpose", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "x2", "=", "x2", ".", "transpose", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "", "if", "scale_each", "is", "True", ":", "\n", "        ", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "            ", "x1", "[", "i", "]", "=", "rescale_intensity", "(", "x1", "[", "i", "]", ",", "out_range", "=", "(", "0", ",", "1", ")", ")", "\n", "x2", "[", "i", "]", "=", "rescale_intensity", "(", "x2", "[", "i", "]", ",", "out_range", "=", "(", "0", ",", "1", ")", ")", "\n", "", "", "n_channels", "=", "x1", ".", "shape", "[", "3", "]", "\n", "x1", "=", "img_as_ubyte", "(", "x1", ")", "\n", "x2", "=", "img_as_ubyte", "(", "x2", ")", "\n", "r", ",", "c", "=", "shape", "\n", "if", "r", "*", "c", "<", "2", "*", "n", ":", "\n", "        ", "print", "(", "'Shape too small to contain all images'", ")", "\n", "", "h", ",", "w", "=", "x1", ".", "shape", "[", "1", ":", "3", "]", "\n", "ret", "=", "np", ".", "zeros", "(", "(", "h", "*", "r", ",", "w", "*", "c", ",", "n_channels", ")", ",", "dtype", "=", "'uint8'", ")", "\n", "for", "i", "in", "range", "(", "r", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "c", ")", ":", "\n", "            ", "if", "i", "*", "c", "+", "j", "<", "2", "*", "n", ":", "\n", "                ", "if", "along_col", ":", "\n", "                    ", "if", "j", "%", "2", "==", "0", ":", "\n", "                        ", "ret", "[", "i", "*", "h", ":", "(", "i", "+", "1", ")", "*", "h", ",", "j", "*", "w", ":", "(", "j", "+", "1", ")", "*", "w", ",", ":", "]", "=", "x1", "[", "\n", "int", "(", "i", "*", "c", "/", "2", "+", "j", "/", "2", ")", "]", "\n", "", "else", ":", "\n", "                        ", "ret", "[", "i", "*", "h", ":", "(", "i", "+", "1", ")", "*", "h", ",", "j", "*", "w", ":", "(", "j", "+", "1", ")", "*", "w", ",", ":", "]", "=", "x2", "[", "\n", "int", "(", "i", "*", "c", "/", "2", "+", "(", "j", "-", "1", ")", "/", "2", ")", "]", "\n", "", "", "else", ":", "\n", "                    ", "if", "i", "%", "2", "==", "0", ":", "\n", "                        ", "ret", "[", "i", "*", "h", ":", "(", "i", "+", "1", ")", "*", "h", ",", "j", "*", "w", ":", "(", "j", "+", "1", ")", "*", "w", ",", ":", "]", "=", "x1", "[", "\n", "int", "(", "j", "*", "r", "/", "2", "+", "i", "/", "2", ")", "]", "\n", "", "else", ":", "\n", "                        ", "ret", "[", "i", "*", "h", ":", "(", "i", "+", "1", ")", "*", "h", ",", "j", "*", "w", ":", "(", "j", "+", "1", ")", "*", "w", ",", ":", "]", "=", "x2", "[", "\n", "int", "(", "j", "*", "r", "/", "2", "+", "(", "i", "-", "1", ")", "/", "2", ")", "]", "\n", "\n", "", "", "", "", "", "ret", "=", "ret", ".", "squeeze", "(", ")", "\n", "io", ".", "imsave", "(", "filename", ",", "ret", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xinmei9322_semicrowd.utils.utils.name_variable_scope": [[209, 225], ["tensorflow.name_scope", "tensorflow.variable_scope", "tensorflow.name_scope"], "function", ["None"], ["", "@", "contextmanager", "\n", "def", "name_variable_scope", "(", "name_scope_name", ",", "var_scope_or_var_scope_name", ",", "\n", "*", "var_scope_args", ",", "**", "var_scope_kwargs", ")", ":", "\n", "    ", "\"\"\"A combination of name_scope and variable_scope with different names\n\n    The tf.variable_scope function creates both a name_scope and a variable_scope\n    with identical names. But the naming would often be clearer if the names\n    of operations didn't inherit the scope name of the (reused) variables.\n    So use this function to make shorter and more logical scope names in these cases.\n    \"\"\"", "\n", "with", "tf", ".", "name_scope", "(", "name_scope_name", ")", "as", "outer_name_scope", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "var_scope_or_var_scope_name", ",", "\n", "*", "var_scope_args", ",", "\n", "**", "var_scope_kwargs", ")", "as", "var_scope", ":", "\n", "            ", "with", "tf", ".", "name_scope", "(", "outer_name_scope", ")", "as", "inner_name_scope", ":", "\n", "                ", "yield", "inner_name_scope", ",", "var_scope", "\n", "\n"]], "home.repos.pwc.inspect_result.xinmei9322_semicrowd.utils.utils.ema_variable_scope": [[227, 253], ["tensorflow.name_scope", "tensorflow.train.ExponentialMovingAverage", "tf.train.ExponentialMovingAverage.apply", "tensorflow.add_to_collection", "tf.train.ExponentialMovingAverage.average", "utils.name_variable_scope", "original_trainable_vars.values", "tensorflow.get_collection"], "function", ["home.repos.pwc.inspect_result.xinmei9322_semicrowd.utils.utils.name_variable_scope"], ["", "", "", "", "@", "contextmanager", "\n", "def", "ema_variable_scope", "(", "name_scope_name", ",", "var_scope", ",", "decay", "=", "0.999", ")", ":", "\n", "    ", "\"\"\"Scope that replaces trainable variables with their exponential moving averages\n\n    We capture only trainable variables. There's no reason we couldn't support\n    other types of variables, but the assumed use case is for trainable variables.\n    \"\"\"", "\n", "with", "tf", ".", "name_scope", "(", "name_scope_name", "+", "\"/ema_variables\"", ")", ":", "\n", "        ", "original_trainable_vars", "=", "{", "\n", "tensor", ".", "op", ".", "name", ":", "tensor", "\n", "for", "tensor", "\n", "in", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "TRAINABLE_VARIABLES", ",", "scope", "=", "var_scope", ".", "name", ")", "\n", "}", "\n", "ema", "=", "tf", ".", "train", ".", "ExponentialMovingAverage", "(", "decay", ")", "\n", "update_op", "=", "ema", ".", "apply", "(", "original_trainable_vars", ".", "values", "(", ")", ")", "\n", "tf", ".", "add_to_collection", "(", "tf", ".", "GraphKeys", ".", "UPDATE_OPS", ",", "update_op", ")", "\n", "\n", "", "def", "use_ema_variables", "(", "getter", ",", "name", ",", "*", "_", ",", "**", "__", ")", ":", "\n", "#pylint: disable=unused-argument", "\n", "        ", "assert", "name", "in", "original_trainable_vars", ",", "\"Unknown variable {}.\"", ".", "format", "(", "name", ")", "\n", "return", "ema", ".", "average", "(", "original_trainable_vars", "[", "name", "]", ")", "\n", "\n", "", "with", "name_variable_scope", "(", "name_scope_name", ",", "\n", "var_scope", ",", "\n", "custom_getter", "=", "use_ema_variables", ")", "as", "(", "name_scope", ",", "var_scope", ")", ":", "\n", "        ", "yield", "name_scope", ",", "var_scope", "\n", "\n"]], "home.repos.pwc.inspect_result.xinmei9322_semicrowd.utils.utils.lrelu": [[255, 260], ["tensorflow.variable_scope", "abs"], "function", ["None"], ["", "", "def", "lrelu", "(", "input_tensor", ",", "leak", "=", "0.1", ",", "name", "=", "\"lrelu\"", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "        ", "f1", "=", "0.5", "*", "(", "1", "+", "leak", ")", "\n", "f2", "=", "0.5", "*", "(", "1", "-", "leak", ")", "\n", "return", "f1", "*", "input_tensor", "+", "f2", "*", "abs", "(", "input_tensor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xinmei9322_semicrowd.utils.utils.GaussianNoise": [[262, 273], ["tensorflow.name_scope", "tensorflow.cond", "tensorflow.random_normal", "tensorflow.shape"], "function", ["None"], ["", "", "@", "add_arg_scope", "\n", "def", "GaussianNoise", "(", "x", ",", "sigma", ",", "is_training", ",", "name", "=", "None", ")", ":", "\n", "    ", "with", "tf", ".", "name_scope", "(", "name", ",", "'gaussian_noise'", ",", "[", "x", ",", "sigma", ",", "is_training", "]", ")", "as", "scope", ":", "\n", "        ", "if", "sigma", "==", "0.", ":", "\n", "            ", "return", "x", "\n", "", "else", ":", "\n", "            ", "x", "=", "tf", ".", "cond", "(", "\n", "is_training", ",", "\n", "lambda", ":", "x", "+", "tf", ".", "random_normal", "(", "tf", ".", "shape", "(", "x", ")", ",", "mean", "=", "0.0", ",", "stddev", "=", "sigma", ")", ",", "\n", "lambda", ":", "x", ",", "name", "=", "scope", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.xinmei9322_semicrowd.utils.utils.max_out": [[275, 281], ["input_tensor.get_shape", "tensorflow.reshape", "tensorflow.reduce_max", "int", "int", "int"], "function", ["None"], ["", "", "", "def", "max_out", "(", "input_tensor", ",", "num_pieces", "=", "2", ")", ":", "\n", "    ", "shape", "=", "input_tensor", ".", "get_shape", "(", ")", "\n", "output", "=", "tf", ".", "reshape", "(", "input_tensor", ",", "[", "-", "1", ",", "int", "(", "shape", "[", "1", "]", ")", ",", "int", "(", "shape", "[", "2", "]", ")", ",", "\n", "int", "(", "shape", "[", "3", "]", ")", "//", "num_pieces", ",", "num_pieces", "]", ")", "\n", "output", "=", "tf", ".", "reduce_max", "(", "output", ",", "axis", "=", "-", "1", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.xinmei9322_semicrowd.utils.utils.conv_concat": [[283, 288], ["tensorflow.reshape", "tensorflow.shape", "tensorflow.concat", "tensorflow.ones"], "function", ["None"], ["", "def", "conv_concat", "(", "x", ",", "y", ",", "y_dim", "=", "10", ")", ":", "\n", "    ", "y", "=", "tf", ".", "reshape", "(", "y", ",", "[", "-", "1", ",", "1", ",", "1", ",", "y_dim", "]", ")", "\n", "x_shape", "=", "tf", ".", "shape", "(", "x", ")", "\n", "return", "tf", ".", "concat", "(", "[", "x", ",", "y", "*", "tf", ".", "ones", "(", "[", "x_shape", "[", "0", "]", ",", "x_shape", "[", "1", "]", ",", "x_shape", "[", "2", "]", ",", "\n", "y_dim", "]", ")", "]", ",", "axis", "=", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xinmei9322_semicrowd.utils.utils.export_run_details": [[290, 302], ["socket.gethostname().lower", "getpass.getuser", "open", "f.write", "f.write", "f.write", "f.write", "f.write", "f.write", "f.write", "socket.gethostname", "datetime.datetime.today", "os.getcwd"], "function", ["home.repos.pwc.inspect_result.xinmei9322_semicrowd.utils.utils.Tap.write", "home.repos.pwc.inspect_result.xinmei9322_semicrowd.utils.utils.Tap.write", "home.repos.pwc.inspect_result.xinmei9322_semicrowd.utils.utils.Tap.write", "home.repos.pwc.inspect_result.xinmei9322_semicrowd.utils.utils.Tap.write", "home.repos.pwc.inspect_result.xinmei9322_semicrowd.utils.utils.Tap.write", "home.repos.pwc.inspect_result.xinmei9322_semicrowd.utils.utils.Tap.write", "home.repos.pwc.inspect_result.xinmei9322_semicrowd.utils.utils.Tap.write"], ["", "def", "export_run_details", "(", "fname", ")", ":", "\n", "    ", "host", "=", "socket", ".", "gethostname", "(", ")", ".", "lower", "(", ")", "\n", "user", "=", "getpass", ".", "getuser", "(", ")", "\n", "with", "open", "(", "fname", ",", "'wt'", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "'%-16s%s\\n'", "%", "(", "'Host'", ",", "host", ")", ")", "\n", "f", ".", "write", "(", "'%-16s%s\\n'", "%", "(", "'User'", ",", "user", ")", ")", "\n", "f", ".", "write", "(", "'%-16s%s\\n'", "%", "(", "'Date'", ",", "datetime", ".", "datetime", ".", "today", "(", ")", ")", ")", "\n", "f", ".", "write", "(", "'%-16s%s\\n'", "%", "(", "\n", "'CUDA device'", ",", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", ")", ")", "\n", "f", ".", "write", "(", "'%-16s%s\\n'", "%", "(", "'Working dir'", ",", "os", ".", "getcwd", "(", ")", ")", ")", "\n", "f", ".", "write", "(", "'%-16s%s\\n'", "%", "(", "'Executable'", ",", "sys", ".", "argv", "[", "0", "]", ")", ")", "\n", "f", ".", "write", "(", "'%-16s%s\\n'", "%", "(", "'Arguments'", ",", "' '", ".", "join", "(", "sys", ".", "argv", "[", "1", ":", "]", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xinmei9322_semicrowd.utils.utils.export_config": [[304, 309], ["open", "sorted", "config.__dict__.iteritems", "k.startswith", "fout.write", "str"], "function", ["home.repos.pwc.inspect_result.xinmei9322_semicrowd.utils.utils.Tap.write"], ["", "", "def", "export_config", "(", "config", ",", "fname", ")", ":", "\n", "    ", "with", "open", "(", "fname", ",", "'wt'", ")", "as", "fout", ":", "\n", "        ", "for", "k", ",", "v", "in", "sorted", "(", "config", ".", "__dict__", ".", "iteritems", "(", ")", ")", ":", "\n", "            ", "if", "not", "k", ".", "startswith", "(", "'_'", ")", ":", "\n", "                ", "fout", ".", "write", "(", "\"%s = %s\\n\"", "%", "(", "k", ",", "str", "(", "v", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xinmei9322_semicrowd.utils.utils.export_sources": [[311, 319], ["os.makedirs", "glob.glob", "os.path.isdir", "shutil.copy2", "glob.glob", "os.path.join", "shutil.copy2"], "function", ["None"], ["", "", "", "", "def", "export_sources", "(", "target_dir", ")", ":", "\n", "    ", "os", ".", "makedirs", "(", "target_dir", ")", "\n", "for", "ext", "in", "(", "'py'", ",", "'pyproj'", ",", "'sln'", ")", ":", "\n", "        ", "for", "fn", "in", "glob", ".", "glob", "(", "'*.'", "+", "ext", ")", ":", "\n", "            ", "shutil", ".", "copy2", "(", "fn", ",", "target_dir", ")", "\n", "", "if", "os", ".", "path", ".", "isdir", "(", "'src'", ")", ":", "\n", "            ", "for", "fn", "in", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "'src'", ",", "'*.'", "+", "ext", ")", ")", ":", "\n", "                ", "shutil", ".", "copy2", "(", "fn", ",", "target_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xinmei9322_semicrowd.utils.utils.build_log_file": [[321, 336], ["os.path.basename", "os.path.join", "os.path.join", "shutil.copy", "os.path.join", "os.path.exists", "os.makedirs", "os.path.join", "os.path.splitext", "datetime.datetime.now", "os.path.splitext"], "function", ["None"], ["", "", "", "", "def", "build_log_file", "(", "filename", ")", ":", "\n", "    ", "\"\"\"\n    :param filename: Can be os.path.realpath(__file__)\n    :return:\n    \"\"\"", "\n", "filename_script", "=", "os", ".", "path", ".", "basename", "(", "filename", ")", "\n", "result_out", "=", "os", ".", "path", ".", "join", "(", "\"results\"", ",", "os", ".", "path", ".", "splitext", "(", "filename_script", ")", "[", "0", "]", ")", "\n", "this_time", "=", "\"{date:%Y-%m-%d_%H:%M:%S}\"", ".", "format", "(", "date", "=", "datetime", ".", "datetime", ".", "now", "(", ")", ")", "\n", "result_out", "=", "os", ".", "path", ".", "join", "(", "result_out", ",", "os", ".", "path", ".", "splitext", "(", "filename_script", ")", "[", "0", "]", "+", "this_time", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "result_out", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "result_out", ")", "\n", "", "shutil", ".", "copy", "(", "filename", ",", "os", ".", "path", ".", "join", "(", "result_out", ",", "filename_script", ")", ")", "\n", "logname", "=", "'logfile_'", "+", "this_time", "+", "'.log'", "\n", "logfile", "=", "os", ".", "path", ".", "join", "(", "result_out", ",", "logname", ")", "\n", "return", "result_out", ",", "this_time", ",", "logfile", "\n", "\n"]], "home.repos.pwc.inspect_result.xinmei9322_semicrowd.utils.utils.report_parameters": [[338, 345], ["print", "i.get_shape", "print", "int", "numpy.prod"], "function", ["None"], ["", "def", "report_parameters", "(", "params", ")", ":", "\n", "    ", "total_params", "=", "0", "\n", "for", "i", "in", "params", ":", "\n", "        ", "this_shape", "=", "i", ".", "get_shape", "(", ")", "\n", "print", "(", "i", ".", "name", ",", "this_shape", ")", "\n", "total_params", "+=", "int", "(", "np", ".", "prod", "(", "this_shape", ")", ")", "\n", "", "print", "(", "'Total params: {}'", ".", "format", "(", "total_params", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xinmei9322_semicrowd.distributions.niw.pack_struct4": [[14, 20], ["tensorflow.reshape", "tensorflow.concat", "tensorflow.concat", "tensorflow.shape"], "function", ["None"], ["def", "pack_struct4", "(", "b", ",", "A", ",", "c", ",", "d", ")", ":", "\n", "# A: b: [..., p], [..., p, p], c: [..., 1], d: [..., 1]", "\n", "# vec_A: [..., p * p]", "\n", "    ", "vec_A", "=", "tf", ".", "reshape", "(", "A", ",", "tf", ".", "concat", "(", "[", "tf", ".", "shape", "(", "A", ")", "[", ":", "-", "2", "]", ",", "[", "-", "1", "]", "]", ",", "0", ")", ")", "\n", "# ret: [..., p + p^2 + 2]", "\n", "return", "tf", ".", "concat", "(", "[", "b", ",", "vec_A", ",", "c", ",", "d", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xinmei9322_semicrowd.distributions.niw.unpack_struct4": [[22, 29], ["tensorflow.split", "tensorflow.reshape", "tensorflow.concat", "tensorflow.shape"], "function", ["None"], ["", "def", "unpack_struct4", "(", "struct", ",", "p", ")", ":", "\n", "# struct: [..., p + p^2 + 2]", "\n", "    ", "b", ",", "vec_A", ",", "c", ",", "d", "=", "tf", ".", "split", "(", "struct", ",", "[", "p", ",", "p", "*", "p", ",", "1", ",", "1", "]", ",", "axis", "=", "-", "1", ")", "\n", "# A: [..., p, p]", "\n", "A", "=", "tf", ".", "reshape", "(", "vec_A", ",", "tf", ".", "concat", "(", "[", "tf", ".", "shape", "(", "vec_A", ")", "[", ":", "-", "1", "]", ",", "[", "p", ",", "p", "]", "]", ",", "0", ")", ")", "\n", "# ret: b: [..., p], A: [..., p, p], c: [..., 1], d: [..., 1]", "\n", "return", "b", ",", "A", ",", "c", ",", "d", "\n", "\n"]], "home.repos.pwc.inspect_result.xinmei9322_semicrowd.distributions.niw.multi_digamma": [[31, 37], ["tensorflow.range", "tensorflow.reduce_sum", "tensorflow.digamma"], "function", ["None"], ["", "def", "multi_digamma", "(", "x", ",", "p", ")", ":", "\n", "# x: [..., 1]", "\n", "# gamma_seq: [p]", "\n", "    ", "gamma_seq", "=", "tf", ".", "range", "(", "p", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "# ret: [..., 1]", "\n", "return", "tf", ".", "reduce_sum", "(", "tf", ".", "digamma", "(", "x", "-", "gamma_seq", "/", "2", ")", ",", "axis", "=", "-", "1", ",", "keepdims", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xinmei9322_semicrowd.distributions.niw.log_multi_gamma": [[39, 46], ["tensorflow.range", "tensorflow.reduce_sum", "tensorflow.log", "tensorflow.lgamma"], "function", ["None"], ["", "def", "log_multi_gamma", "(", "x", ",", "p", ")", ":", "\n", "# x: [..., 1]", "\n", "# gamma_seq: [p]", "\n", "    ", "gamma_seq", "=", "tf", ".", "range", "(", "p", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "# ret: [...]", "\n", "return", "0.25", "*", "p", "*", "(", "p", "-", "1", ")", "*", "tf", ".", "log", "(", "np", ".", "pi", ")", "+", "tf", ".", "reduce_sum", "(", "\n", "tf", ".", "lgamma", "(", "x", "-", "gamma_seq", "/", "2", ")", ",", "axis", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xinmei9322_semicrowd.distributions.niw.standard_to_natural": [[48, 63], ["niw.pack_struct4", "util.outer", "tensorflow.to_float", "tensorflow.shape"], "function", ["home.repos.pwc.inspect_result.xinmei9322_semicrowd.distributions.niw.pack_struct4"], ["", "def", "standard_to_natural", "(", "m", ",", "kappa", ",", "S", ",", "nu", ")", ":", "\n", "# m: [..., p]", "\n", "# kappa: [...]", "\n", "# S: [..., p, p]", "\n", "# nu: [...]", "\n", "# kappa: [..., 1]", "\n", "    ", "kappa", "=", "kappa", "[", "...", ",", "None", "]", "\n", "# b: [..., p]", "\n", "b", "=", "kappa", "*", "m", "\n", "# ret: [..., p + p^2 + 2]", "\n", "return", "pack_struct4", "(", "\n", "kappa", "*", "m", ",", "\n", "S", "+", "outer", "(", "b", ",", "m", ")", ",", "\n", "kappa", ",", "\n", "nu", "[", "...", ",", "None", "]", "+", "tf", ".", "to_float", "(", "tf", ".", "shape", "(", "m", ")", "[", "-", "1", "]", ")", "+", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xinmei9322_semicrowd.distributions.niw.natural_to_standard": [[65, 76], ["niw.unpack_struct4", "util.outer"], "function", ["home.repos.pwc.inspect_result.xinmei9322_semicrowd.distributions.niw.unpack_struct4"], ["", "def", "natural_to_standard", "(", "nat_param", ",", "p", ")", ":", "\n", "    ", "b", ",", "A", ",", "c", ",", "d", "=", "unpack_struct4", "(", "nat_param", ",", "p", ")", "\n", "# kappa: [..., 1]", "\n", "kappa", "=", "c", "\n", "# nu: [..., 1]", "\n", "nu", "=", "d", "-", "p", "-", "2", "\n", "# m: [..., p]", "\n", "m", "=", "b", "/", "kappa", "\n", "# S: [..., p, p]", "\n", "S", "=", "A", "-", "outer", "(", "b", ",", "m", ")", "\n", "return", "m", ",", "kappa", ",", "S", ",", "nu", "\n", "\n"]], "home.repos.pwc.inspect_result.xinmei9322_semicrowd.distributions.niw.expected_stats": [[78, 99], ["niw.natural_to_standard", "util.symmetrize", "tensorflow.squeeze", "niw.pack_struct4", "tensorflow.matrix_inverse", "tensorflow.matmul", "tensorflow.reduce_sum", "niw.multi_digamma", "tensorflow.linalg.logdet", "tensorflow.log", "util.symmetrize"], "function", ["home.repos.pwc.inspect_result.xinmei9322_semicrowd.distributions.mvn.natural_to_standard", "home.repos.pwc.inspect_result.xinmei9322_semicrowd.distributions.niw.pack_struct4", "home.repos.pwc.inspect_result.xinmei9322_semicrowd.distributions.niw.multi_digamma"], ["", "def", "expected_stats", "(", "nat_param", ",", "p", ",", "eps", "=", "1e-5", ")", ":", "\n", "# nat_param: [..., p + p^2 + 2]", "\n", "# m: [..., p], kappa: [..., 1], S: [..., p, p], nu: [..., 1]", "\n", "    ", "m", ",", "kappa", ",", "S", ",", "nu", "=", "natural_to_standard", "(", "nat_param", ",", "p", ")", "\n", "\n", "# S_inv = symmetrize(tf.matrix_inverse(S + eps * tf.eye(p)))", "\n", "S_inv", "=", "symmetrize", "(", "tf", ".", "matrix_inverse", "(", "S", ")", ")", "\n", "# S_inv_m: [..., p]", "\n", "S_inv_m", "=", "tf", ".", "squeeze", "(", "tf", ".", "matmul", "(", "S_inv", ",", "m", "[", "...", ",", "None", "]", ")", ",", "-", "1", ")", "\n", "# stats_b: [..., p]", "\n", "stats_b", "=", "nu", "*", "S_inv_m", "\n", "# stats_A: [..., p, p]", "\n", "stats_A", "=", "-", "0.5", "*", "nu", "[", "...", ",", "None", "]", "*", "S_inv", "\n", "# stats_c: [..., 1]", "\n", "stats_c", "=", "-", "0.5", "*", "(", "p", "/", "kappa", "+", "\n", "tf", ".", "reduce_sum", "(", "stats_b", "*", "m", ",", "axis", "=", "-", "1", ",", "keepdims", "=", "True", ")", ")", "\n", "# stats_d: [..., 1]", "\n", "stats_d", "=", "0.5", "*", "(", "multi_digamma", "(", "0.5", "*", "nu", ",", "p", ")", "+", "p", "*", "tf", ".", "log", "(", "2.", ")", "-", "\n", "tf", ".", "linalg", ".", "logdet", "(", "symmetrize", "(", "S", ")", ")", "[", "...", ",", "None", "]", ")", "\n", "# ret: [..., p + p^2 + 2]", "\n", "return", "pack_struct4", "(", "stats_b", ",", "stats_A", ",", "stats_c", ",", "stats_d", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xinmei9322_semicrowd.distributions.niw.log_partition": [[101, 110], ["niw.natural_to_standard", "tensorflow.squeeze", "util.symmetrize", "niw.log_multi_gamma", "tensorflow.log", "tensorflow.squeeze", "tensorflow.linalg.logdet", "tensorflow.log"], "function", ["home.repos.pwc.inspect_result.xinmei9322_semicrowd.distributions.mvn.natural_to_standard", "home.repos.pwc.inspect_result.xinmei9322_semicrowd.distributions.niw.log_multi_gamma"], ["", "def", "log_partition", "(", "nat_param", ",", "p", ")", ":", "\n", "# m: [..., p], kappa: [..., 1], S: [..., p, p], nu: [..., 1]", "\n", "    ", "m", ",", "kappa", ",", "S", ",", "nu", "=", "natural_to_standard", "(", "nat_param", ",", "p", ")", "\n", "# kappa: [...]", "\n", "kappa", "=", "tf", ".", "squeeze", "(", "kappa", ",", "-", "1", ")", "\n", "S", "=", "symmetrize", "(", "S", ")", "\n", "# ret: [...]", "\n", "return", "0.5", "*", "tf", ".", "squeeze", "(", "nu", ",", "-", "1", ")", "*", "(", "p", "*", "tf", ".", "log", "(", "2.", ")", "-", "tf", ".", "linalg", ".", "logdet", "(", "S", ")", ")", "+", "log_multi_gamma", "(", "0.5", "*", "nu", ",", "p", ")", "-", "0.5", "*", "p", "*", "tf", ".", "log", "(", "kappa", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.xinmei9322_semicrowd.distributions.beta.expected_stats": [[11, 17], ["tensorflow.digamma", "tensorflow.digamma", "tensorflow.reduce_sum"], "function", ["None"], ["def", "expected_stats", "(", "nat_param", ")", ":", "\n", "# nat_param: [..., 2]", "\n", "    ", "tau", "=", "nat_param", "+", "1", "\n", "# ret: [..., 2]", "\n", "return", "tf", ".", "digamma", "(", "tau", ")", "-", "tf", ".", "digamma", "(", "\n", "tf", ".", "reduce_sum", "(", "tau", ",", "axis", "=", "-", "1", ",", "keepdims", "=", "True", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xinmei9322_semicrowd.distributions.beta.log_partition": [[19, 25], ["tensorflow.reduce_sum", "tensorflow.lgamma", "tensorflow.lgamma", "tensorflow.reduce_sum"], "function", ["None"], ["", "def", "log_partition", "(", "nat_param", ")", ":", "\n", "# nat_param: [..., 2]", "\n", "    ", "tau", "=", "nat_param", "+", "1", "\n", "# ret: [...]", "\n", "return", "tf", ".", "reduce_sum", "(", "tf", ".", "lgamma", "(", "tau", ")", ",", "axis", "=", "-", "1", ")", "-", "tf", ".", "lgamma", "(", "\n", "tf", ".", "reduce_sum", "(", "tau", ",", "axis", "=", "-", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xinmei9322_semicrowd.distributions.beta.standard_to_natural": [[27, 30], ["None"], "function", ["None"], ["", "def", "standard_to_natural", "(", "tau_1", ",", "tau_2", ")", ":", "\n", "# tau_1, tau_2: [...]", "\n", "    ", "return", "tau_1", "-", "1", ",", "tau_2", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.xinmei9322_semicrowd.distributions.beta.natural_to_standard": [[32, 35], ["None"], "function", ["None"], ["", "def", "natural_to_standard", "(", "nat_param", ")", ":", "\n", "# nat_param: [..., 2]", "\n", "    ", "return", "nat_param", "[", "...", ",", "0", "]", "+", "1", ",", "nat_param", "[", "...", ",", "1", "]", "+", "1", "\n", "", ""]], "home.repos.pwc.inspect_result.xinmei9322_semicrowd.distributions.catgorical.expected_stats": [[11, 15], ["tensorflow.nn.softmax"], "function", ["None"], ["def", "expected_stats", "(", "nat_param", ")", ":", "\n", "# nat_param: [..., K]", "\n", "# ret: [..., K]", "\n", "    ", "return", "tf", ".", "nn", ".", "softmax", "(", "nat_param", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.xinmei9322_semicrowd.distributions.util.exp_family_kl": [[16, 25], ["tensorflow.reduce_sum"], "function", ["None"], ["def", "exp_family_kl", "(", "nat_param_diff", ",", "stats", ",", "log_z_diff", "=", "None", ")", ":", "\n", "# nat_param_diff: [..., p]", "\n", "# stats: [..., p]", "\n", "# log_z_diff: [...]", "\n", "    ", "unnormalized_term", "=", "tf", ".", "reduce_sum", "(", "nat_param_diff", "*", "stats", ",", "axis", "=", "-", "1", ")", "\n", "if", "log_z_diff", "is", "None", ":", "\n", "        ", "return", "unnormalized_term", "\n", "", "else", ":", "\n", "        ", "return", "unnormalized_term", "-", "log_z_diff", "\n", "", "", ""]], "home.repos.pwc.inspect_result.xinmei9322_semicrowd.distributions.mvn.pack_struct2": [[13, 19], ["tensorflow.reshape", "tensorflow.concat", "tensorflow.concat", "tensorflow.shape"], "function", ["None"], ["def", "pack_struct2", "(", "h", ",", "J", ")", ":", "\n", "# h: [..., p], J: [..., p, p]", "\n", "# vec_J: [..., p * p]", "\n", "    ", "vec_J", "=", "tf", ".", "reshape", "(", "J", ",", "tf", ".", "concat", "(", "[", "tf", ".", "shape", "(", "J", ")", "[", ":", "-", "2", "]", ",", "[", "-", "1", "]", "]", ",", "0", ")", ")", "\n", "# ret: [..., p + p^2]", "\n", "return", "tf", ".", "concat", "(", "[", "h", ",", "vec_J", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xinmei9322_semicrowd.distributions.mvn.unpack_struct2": [[21, 28], ["tensorflow.split", "tensorflow.reshape", "tensorflow.concat", "tensorflow.shape"], "function", ["None"], ["", "def", "unpack_struct2", "(", "struct", ",", "p", ")", ":", "\n", "# struct: [..., p + p^2]", "\n", "# h: [..., p], vec_J: [..., p * p]", "\n", "    ", "h", ",", "vec_J", "=", "tf", ".", "split", "(", "struct", ",", "[", "p", ",", "p", "*", "p", "]", ",", "axis", "=", "-", "1", ")", "\n", "# J: [..., p, p]", "\n", "J", "=", "tf", ".", "reshape", "(", "vec_J", ",", "tf", ".", "concat", "(", "[", "tf", ".", "shape", "(", "vec_J", ")", "[", ":", "-", "1", "]", ",", "[", "p", ",", "p", "]", "]", ",", "0", ")", ")", "\n", "return", "h", ",", "J", "\n", "\n"]], "home.repos.pwc.inspect_result.xinmei9322_semicrowd.distributions.mvn.natural_to_standard": [[30, 43], ["mvn.unpack_struct2", "tensorflow.cholesky", "tensorflow.cholesky_solve"], "function", ["home.repos.pwc.inspect_result.xinmei9322_semicrowd.distributions.mvn.unpack_struct2"], ["", "def", "natural_to_standard", "(", "nat_param", ",", "p", ",", "eps", "=", "1e-5", ")", ":", "\n", "# nat_param: [..., p + p^2]", "\n", "# h: [..., p], # J: [..., p, p]", "\n", "    ", "h", ",", "J", "=", "unpack_struct2", "(", "nat_param", ",", "p", ")", "\n", "# sigma_inv: [..., p, p]", "\n", "sigma_inv", "=", "-", "2", "*", "J", "\n", "# sigma_inv += eps * tf.eye(p)", "\n", "# L: [..., p, p]", "\n", "# TODO: check whether matrix_solve or cholesky_solve.", "\n", "L", "=", "tf", ".", "cholesky", "(", "sigma_inv", ")", "\n", "# mu: [..., p, 1]", "\n", "mu", "=", "tf", ".", "cholesky_solve", "(", "L", ",", "h", "[", "...", ",", "None", "]", ")", "\n", "return", "sigma_inv", ",", "L", ",", "mu", "\n", "\n"]], "home.repos.pwc.inspect_result.xinmei9322_semicrowd.distributions.mvn.sample": [[45, 58], ["mvn.natural_to_standard", "tensorflow.concat", "tensorflow.matrix_solve", "tensorflow.random_normal", "tensorflow.squeeze", "tensorflow.shape"], "function", ["home.repos.pwc.inspect_result.xinmei9322_semicrowd.distributions.mvn.natural_to_standard"], ["", "def", "sample", "(", "nat_param", ",", "p", ",", "n_samples", "=", "None", ")", ":", "\n", "# nat_param: [..., p + p^2]", "\n", "    ", "sigma_inv", ",", "L", ",", "mu", "=", "natural_to_standard", "(", "nat_param", ",", "p", ")", "\n", "sample_dim", "=", "[", "1", "]", "if", "n_samples", "is", "None", "else", "[", "n_samples", "]", "\n", "sample_shape", "=", "tf", ".", "concat", "(", "[", "tf", ".", "shape", "(", "sigma_inv", ")", "[", ":", "-", "1", "]", ",", "sample_dim", "]", ",", "0", ")", "\n", "# sigma^1/2 noise: [..., p, n_samples]", "\n", "half_sigma_noise", "=", "tf", ".", "matrix_solve", "(", "L", ",", "tf", ".", "random_normal", "(", "sample_shape", ")", ",", "\n", "adjoint", "=", "True", ")", "\n", "# ret: [..., p, n_samples]", "\n", "ret", "=", "mu", "+", "half_sigma_noise", "\n", "if", "n_samples", "is", "None", ":", "\n", "        ", "ret", "=", "tf", ".", "squeeze", "(", "ret", ",", "axis", "=", "-", "1", ")", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.xinmei9322_semicrowd.distributions.mvn.expected_stats": [[60, 71], ["mvn.natural_to_standard", "tensorflow.squeeze", "tensorflow.matrix_inverse", "util.symmetrize", "mvn.pack_struct2", "util.outer"], "function", ["home.repos.pwc.inspect_result.xinmei9322_semicrowd.distributions.mvn.natural_to_standard", "home.repos.pwc.inspect_result.xinmei9322_semicrowd.distributions.mvn.pack_struct2"], ["", "def", "expected_stats", "(", "nat_param", ",", "p", ")", ":", "\n", "# nat_param: [..., p + p^2]", "\n", "    ", "sigma_inv", ",", "L", ",", "mu", "=", "natural_to_standard", "(", "nat_param", ",", "p", ")", "\n", "# mu: [..., p]", "\n", "mu", "=", "tf", ".", "squeeze", "(", "mu", ",", "-", "1", ")", "\n", "# sigma: [..., p, p]", "\n", "sigma", "=", "tf", ".", "matrix_inverse", "(", "sigma_inv", ")", "\n", "sigma", "=", "symmetrize", "(", "sigma", ")", "\n", "# stats2: [..., p, p]", "\n", "stats2", "=", "sigma", "+", "outer", "(", "mu", ",", "mu", ")", "\n", "return", "pack_struct2", "(", "mu", ",", "stats2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xinmei9322_semicrowd.distributions.mvn.log_partition": [[73, 83], ["mvn.natural_to_standard", "tensorflow.squeeze", "tensorflow.squeeze", "tensorflow.matmul", "tensorflow.reduce_sum", "tensorflow.linalg.logdet"], "function", ["home.repos.pwc.inspect_result.xinmei9322_semicrowd.distributions.mvn.natural_to_standard"], ["", "def", "log_partition", "(", "nat_param", ",", "p", ")", ":", "\n", "# nat_param: [..., p + p^2]", "\n", "    ", "sigma_inv", ",", "L", ",", "mu", "=", "natural_to_standard", "(", "nat_param", ",", "p", ")", "\n", "# sigma_inv_mu: [..., p]", "\n", "sigma_inv_mu", "=", "tf", ".", "squeeze", "(", "tf", ".", "matmul", "(", "sigma_inv", ",", "mu", ")", ",", "-", "1", ")", "\n", "# mu: [..., p]", "\n", "mu", "=", "tf", ".", "squeeze", "(", "mu", ",", "-", "1", ")", "\n", "# ret: [...]", "\n", "return", "0.5", "*", "(", "tf", ".", "reduce_sum", "(", "mu", "*", "sigma_inv_mu", ",", "axis", "=", "-", "1", ")", "-", "\n", "tf", ".", "linalg", ".", "logdet", "(", "sigma_inv", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.xinmei9322_semicrowd.distributions.dirichlet.expected_stats": [[11, 17], ["tensorflow.digamma", "tensorflow.digamma", "tensorflow.reduce_sum"], "function", ["None"], ["def", "expected_stats", "(", "nat_param", ")", ":", "\n", "# nat_param: [..., K]", "\n", "    ", "alpha", "=", "nat_param", "+", "1", "\n", "# ret: [..., K]", "\n", "return", "tf", ".", "digamma", "(", "alpha", ")", "-", "tf", ".", "digamma", "(", "\n", "tf", ".", "reduce_sum", "(", "alpha", ",", "-", "1", ",", "keepdims", "=", "True", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xinmei9322_semicrowd.distributions.dirichlet.log_partition": [[19, 25], ["tensorflow.reduce_sum", "tensorflow.lgamma", "tensorflow.lgamma", "tensorflow.reduce_sum"], "function", ["None"], ["", "def", "log_partition", "(", "nat_param", ")", ":", "\n", "# nat_param: [..., K]", "\n", "    ", "alpha", "=", "nat_param", "+", "1", "\n", "# ret: [...]", "\n", "return", "tf", ".", "reduce_sum", "(", "tf", ".", "lgamma", "(", "alpha", ")", ",", "axis", "=", "-", "1", ")", "-", "tf", ".", "lgamma", "(", "\n", "tf", ".", "reduce_sum", "(", "alpha", ",", "axis", "=", "-", "1", ")", ")", "\n", "", ""]]}