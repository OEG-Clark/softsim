{"home.repos.pwc.inspect_result.bdevl_SMO.None.genutils.EmptyShell.__init__": [[57, 62], ["kwargs.items"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "self", ".", "__dict__", "=", "kwargs", "\n", "for", "kwarg", ",", "value", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "__dict__", "[", "kwarg", "]", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.None.genutils.EmptyShell.__repr__": [[63, 69], ["genutils.EmptyShell.__dict__.items"], "methods", ["None"], ["", "", "def", "__repr__", "(", "self", ")", ":", "\n", "\n", "        ", "s", "=", "\"Container with the following members: \\n\"", "\n", "for", "key", ",", "value", "in", "self", ".", "__dict__", ".", "items", "(", ")", ":", "\n", "            ", "s", "+=", "\"{}  :  {} \\n\"", ".", "format", "(", "key", ",", "value", ")", "\n", "", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.None.genutils.ETA.__init__": [[72, 81], ["genutils.ETA.start"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.utils.time.StopWatch.start"], ["    ", "def", "__init__", "(", "self", ",", "N", ",", "delay", "=", "False", ")", ":", "\n", "\n", "        ", "self", ".", "_t_init", "=", "None", "\n", "self", ".", "_N", "=", "N", "\n", "self", ".", "_n", "=", "None", "\n", "self", ".", "_t", "=", "None", "\n", "\n", "if", "not", "delay", ":", "\n", "            ", "self", ".", "start", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.None.genutils.ETA.start": [[82, 84], ["time.time"], "methods", ["None"], ["", "", "def", "start", "(", "self", ")", ":", "\n", "        ", "self", ".", "_t_init", "=", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.None.genutils.ETA.__call__": [[85, 89], ["time.time"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "n", ")", ":", "\n", "\n", "        ", "self", ".", "_n", "=", "n", "\n", "self", ".", "_t", "=", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.None.genutils.ETA.__repr__": [[90, 93], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.None.genutils.Directory.__init__": [[117, 120], ["genutils.ensure_folder"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.None.genutils.ensure_folder"], ["    ", "def", "__init__", "(", "self", ",", "path", "=", "\"\"", ")", ":", "\n", "\n", "        ", "self", ".", "_path", "=", "ensure_folder", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.None.genutils.Directory.phd": [[121, 127], ["genutils.date_folder", "cls"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.None.genutils.date_folder"], ["", "@", "classmethod", "\n", "def", "phd", "(", "cls", ",", "path", ")", ":", "\n", "\n", "        ", "basefolder", "=", "date_folder", "(", "\"\"", ")", "\n", "path", "=", "basefolder", "+", "path", "\n", "return", "cls", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.None.genutils.Directory.savefig": [[128, 134], ["matplotlib.savefig", "matplotlib.savefig", "genutils.Directory."], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.SMO.plotting.savefig", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.plotting.savefig"], ["", "def", "savefig", "(", "self", ",", "subpath", ",", "*", "args", ",", "prevent_overwrite", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "if", "prevent_overwrite", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "plt", ".", "savefig", "(", "self", "(", "subpath", ")", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.None.genutils.Directory.__call__": [[135, 150], ["os.path.dirname", "os.makedirs", "len", "[].split", "path.split"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "subpath", ")", ":", "\n", "\n", "        ", "path", "=", "self", ".", "_path", "+", "subpath", "\n", "\n", "# if not a folder, reduce to folder", "\n", "folderpath", "=", "os", ".", "path", ".", "dirname", "(", "path", ")", "\n", "# and create, if it does not exist", "\n", "os", ".", "makedirs", "(", "folderpath", ",", "exist_ok", "=", "True", ")", "\n", "\n", "# if a directory (i.e. no filetype), append slash", "\n", "if", "len", "(", "path", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", ".", "split", "(", "\".\"", ")", ")", "==", "1", ":", "\n", "            ", "if", "path", "[", "-", "1", "]", "!=", "\"/\"", ":", "\n", "                ", "path", "+=", "\"/\"", "\n", "\n", "", "", "return", "path", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.None.genutils.Directory.__repr__": [[151, 153], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"Folder: \"", "+", "self", ".", "_path", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.None.genutils.CumulativeFloat.__init__": [[181, 185], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "_entity", "=", "None", "\n", "self", ".", "_counter", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.None.genutils.CumulativeFloat.reset": [[186, 190], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "_entity", "=", "None", "\n", "self", ".", "_counter", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.None.genutils.CumulativeFloat.__float__": [[191, 193], ["None"], "methods", ["None"], ["", "def", "__float__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_entity", "/", "self", ".", "_counter", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.None.genutils.CumulativeFloat.__add__": [[194, 208], ["isinstance"], "methods", ["None"], ["", "def", "__add__", "(", "self", ",", "other", ")", ":", "\n", "\n", "        ", "assert", "isinstance", "(", "\n", "other", ",", "float", "\n", ")", ",", "\"CumulativeFloat only works with floats (duh!).\"", "\n", "\n", "if", "self", ".", "_entity", "is", "None", ":", "\n", "            ", "self", ".", "_entity", "=", "other", "\n", "", "else", ":", "\n", "            ", "self", ".", "_entity", "+=", "other", "\n", "\n", "", "self", ".", "_counter", "+=", "1", "\n", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.None.genutils.CumulativeFloat.__repr__": [[209, 211], ["str"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "str", "(", "self", ".", "_entity", "/", "self", ".", "_counter", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.None.genutils.MatplotlibStyle.__init__": [[214, 227], ["genutils.MatplotlibStyle._setup"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField._setup"], ["    ", "def", "__init__", "(", "self", ",", "style", "=", "None", ")", ":", "\n", "\n", "# bloated object doing little; implemented as object for future proofing", "\n", "        ", "if", "style", "is", "None", ":", "\n", "            ", "style", "=", "\"seaborn\"", "\n", "\n", "", "assert", "(", "\n", "style", "in", "plt", ".", "style", ".", "available", "\n", ")", ",", "\"matplotlib style {} is not available\"", ".", "format", "(", "style", ")", "\n", "\n", "self", ".", "_style", "=", "style", "\n", "\n", "self", ".", "_setup", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.None.genutils.MatplotlibStyle._setup": [[228, 230], ["matplotlib.style.use", "matplotlib.style.use"], "methods", ["None"], ["", "def", "_setup", "(", "self", ")", ":", "\n", "        ", "plt", ".", "style", ".", "use", "(", "self", ".", "_style", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.None.genutils.GridPlot.__init__": [[268, 277], ["matplotlib.figure", "matplotlib.figure", "genutils.GridPlot.fig.add_gridspec", "list"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "nrows", ",", "ncols", ",", "figsize", "=", "None", ")", ":", "\n", "\n", "        ", "self", ".", "fig", "=", "plt", ".", "figure", "(", "constrained_layout", "=", "True", ",", "figsize", "=", "figsize", ")", "\n", "self", ".", "gs", "=", "self", ".", "fig", ".", "add_gridspec", "(", "nrows", ",", "ncols", ")", "\n", "self", ".", "_nrows", "=", "nrows", "\n", "self", ".", "_ncols", "=", "ncols", "\n", "\n", "# figure axes of subplots", "\n", "self", ".", "_figaxi", "=", "list", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.None.genutils.GridPlot.FromRowSpec": [[278, 301], ["numpy.lcm.reduce", "len", "cls", "enumerate", "int", "range", "cls.fig.add_subplot", "cls._figaxi.append"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.None.genutils.GridPlot.add_subplot", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.Log.append"], ["", "@", "classmethod", "\n", "def", "FromRowSpec", "(", "cls", ",", "rowspec", ",", "figsize", "=", "None", ")", ":", "\n", "\n", "        ", "ncols", "=", "np", ".", "lcm", ".", "reduce", "(", "rowspec", ")", "\n", "nrows", "=", "len", "(", "rowspec", ")", "\n", "\n", "for", "spec", "in", "rowspec", ":", "\n", "            ", "assert", "ncols", "%", "spec", "==", "0", "\n", "\n", "", "num_columns_per_row_and_plot", "=", "[", "int", "(", "ncols", "/", "num_plots", ")", "for", "num_plots", "in", "rowspec", "]", "\n", "\n", "gridplot", "=", "cls", "(", "nrows", ",", "ncols", ",", "figsize", "=", "figsize", ")", "\n", "for", "rownumber", ",", "spec", "in", "enumerate", "(", "rowspec", ")", ":", "\n", "            ", "for", "num_plot", "in", "range", "(", "spec", ")", ":", "\n", "                ", "num_columns", "=", "num_columns_per_row_and_plot", "[", "rownumber", "]", "\n", "ax", "=", "gridplot", ".", "fig", ".", "add_subplot", "(", "\n", "gridplot", ".", "gs", "[", "\n", "rownumber", ",", "num_plot", "*", "num_columns", ":", "(", "num_plot", "+", "1", ")", "*", "num_columns", "\n", "]", "\n", ")", "\n", "gridplot", ".", "_figaxi", ".", "append", "(", "ax", ")", "\n", "\n", "", "", "return", "gridplot", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.None.genutils.GridPlot.add_subplot": [[302, 306], ["genutils.GridPlot.fig.add_subplot", "genutils.GridPlot._figaxi.append"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.None.genutils.GridPlot.add_subplot", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.Log.append"], ["", "def", "add_subplot", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "fxa", "=", "self", ".", "fig", ".", "add_subplot", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "_figaxi", ".", "append", "(", "fxa", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.None.genutils.GridPlot.__getitem__": [[307, 312], ["matplotlib.axes", "matplotlib.axes"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "\n", "        ", "ax", "=", "self", ".", "_figaxi", "[", "item", "]", "\n", "plt", ".", "axes", "(", "ax", ")", "\n", "return", "ax", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.None.genutils.GridPlot.__str__": [[313, 315], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "\"A {} x {} grid plot\"", ".", "format", "(", "self", ".", "_nrows", ",", "self", ".", "_ncols", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.None.genutils.Study.__init__": [[325, 330], ["dict", "dict"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "name", "=", "None", ")", ":", "\n", "\n", "        ", "self", ".", "_name", "=", "name", "\n", "self", ".", "_ydata", "=", "dict", "(", ")", "\n", "self", ".", "_xdata", "=", "dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.None.genutils.Study._check_identifier": [[331, 336], ["list", "list"], "methods", ["None"], ["", "def", "_check_identifier", "(", "self", ",", "identifier", ")", ":", "\n", "\n", "        ", "if", "identifier", "not", "in", "self", ".", "_xdata", ":", "\n", "            ", "self", ".", "_xdata", "[", "identifier", "]", "=", "list", "(", ")", "\n", "self", ".", "_ydata", "[", "identifier", "]", "=", "list", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.None.genutils.Study.add": [[337, 343], ["genutils.Study._check_identifier", "genutils.Study._ydata[].append", "genutils.Study._xdata[].append"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.None.genutils.Study._check_identifier", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.Log.append", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.Log.append"], ["", "", "def", "add", "(", "self", ",", "identifier", ",", "yval", ",", "xval", "=", "None", ")", ":", "\n", "\n", "        ", "self", ".", "_check_identifier", "(", "identifier", ")", "\n", "self", ".", "_ydata", "[", "identifier", "]", ".", "append", "(", "yval", ")", "\n", "if", "xval", "is", "not", "None", ":", "\n", "            ", "self", ".", "_xdata", "[", "identifier", "]", ".", "append", "(", "xval", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.None.genutils.Study.__getitem__": [[344, 346], ["None"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "return", "self", ".", "_ydata", "[", "item", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.None.genutils.Study.x": [[347, 349], ["None"], "methods", ["None"], ["", "def", "x", "(", "self", ",", "identifier", ")", ":", "\n", "        ", "return", "self", ".", "_xdata", "[", "identifier", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.None.genutils.Study.y": [[350, 352], ["None"], "methods", ["None"], ["", "def", "y", "(", "self", ",", "identifier", ")", ":", "\n", "        ", "return", "self", ".", "_ydata", "[", "identifier", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.None.genutils.State.__init__": [[372, 374], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.None.genutils.StateVariable.__init__": [[377, 380], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "state", ")", ":", "\n", "\n", "        ", "self", ".", "_state", "=", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.None.genutils.StateVariable.set": [[381, 384], ["None"], "methods", ["None"], ["", "def", "set", "(", "self", ",", "value", ")", ":", "\n", "\n", "        ", "self", ".", "_state", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.None.genutils.ParameterInstance.__init__": [[387, 391], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "parameter", ",", "instance", ")", ":", "\n", "\n", "        ", "self", ".", "_parameter", "=", "parameter", "\n", "self", ".", "_instance", "=", "instance", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.None.genutils.Parameter.__init__": [[398, 410], ["isinstance", "RuntimeError"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "identifier", ",", "iterable", ",", "forgive", "=", "False", ")", ":", "\n", "\n", "        ", "assert", "isinstance", "(", "identifier", ",", "str", ")", "\n", "\n", "if", "identifier", "in", "Parameter", ".", "_paramlist", ":", "\n", "            ", "if", "forgive", ":", "\n", "                ", "return", "Parameter", ".", "_paramlist", "[", "identifier", "]", "\n", "", "else", ":", "\n", "                ", "raise", "RuntimeError", "(", "\"Parameter {} already exists\"", ".", "format", "(", "identifier", ")", ")", "\n", "\n", "", "", "self", ".", "identifier", "=", "identifier", "\n", "self", ".", "_iterable", "=", "iterable", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.None.genutils.Parameter.__iter__": [[411, 414], ["None"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "for", "element", "in", "self", ".", "_iterable", ":", "\n", "            ", "yield", "element", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.None.genutils.Parameter.__eq__": [[415, 424], ["isinstance", "isinstance", "RuntimeError", "type"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.fawkes.BoundaryConditions.NeumannSpecification.type"], ["", "", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "if", "isinstance", "(", "other", ",", "str", ")", ":", "\n", "            ", "return", "self", ".", "identifier", "==", "other", "\n", "", "elif", "isinstance", "(", "other", ",", "Parameter", ")", ":", "\n", "            ", "return", "self", ".", "identifier", "==", "other", ".", "identifier", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "\n", "\"Equality cannot be established for Parameter and object of type {}\"", ".", "format", "(", "\n", "type", "(", "other", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.None.genutils.Parameter.__mul__": [[427, 429], ["genutils.ParameterProduct"], "methods", ["None"], ["", "", "def", "__mul__", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "ParameterProduct", "(", "self", ",", "other", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.None.genutils.Parameter.__add__": [[430, 432], ["genutils.ParameterUnion"], "methods", ["None"], ["", "def", "__add__", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "ParameterUnion", "(", "self", ",", "other", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.None.genutils.Parameter.__repr__": [[433, 435], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "identifier", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.None.genutils.BinaryParameter.__init__": [[438, 440], ["genutils.Parameter.__init__"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.__init__"], ["    ", "def", "__init__", "(", "self", ",", "identifier", ",", "forgive", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "identifier", ",", "[", "False", ",", "True", "]", ",", "forgive", "=", "forgive", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.None.genutils.ConstantParameter.__init__": [[443, 445], ["object.__init__"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.__init__"], ["    ", "def", "__init__", "(", "self", ",", "identifier", ",", "value", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "identifier", ",", "[", "value", "]", ",", "forgive", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.None.genutils.ParameterUnion.__init__": [[448, 453], ["len", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "p1", ",", "p2", ",", "repeat", "=", "False", ",", "interleave", "=", "False", ")", ":", "\n", "\n", "# special case: ConstantParameter", "\n", "        ", "assert", "len", "(", "p1", ")", "==", "len", "(", "p2", ")", "\n", "self", ".", "_p1", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.None.genutils.ParameterProduct.__init__": [[456, 460], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "p1", ",", "p2", ")", ":", "\n", "\n", "        ", "self", ".", "_p1", "=", "p1", "\n", "self", ".", "_p2", "=", "p2", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.None.genutils.ParameterProduct.__iter__": [[461, 465], ["None"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "for", "p1", "in", "self", ".", "_p1", ":", "\n", "            ", "for", "p2", "in", "self", ".", "_p2", ":", "\n", "                ", "yield", "(", "p1", ",", "p2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.None.genutils.ParameterProduct.dictionary": [[466, 477], ["list", "dict", "list.append"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.Log.append"], ["", "", "", "def", "dictionary", "(", "self", ")", ":", "\n", "\n", "        ", "combinations", "=", "list", "(", ")", "\n", "for", "p1", "in", "self", ".", "_p1", ":", "\n", "            ", "for", "p2", "in", "self", ".", "_p2", ":", "\n", "                ", "params", "=", "dict", "(", ")", "\n", "params", "[", "self", ".", "_p1", ".", "identifier", "]", "=", "p1", "\n", "params", "[", "self", ".", "_p2", ".", "identifier", "]", "=", "p2", "\n", "combinations", ".", "append", "(", "params", ")", "\n", "\n", "", "", "return", "combinations", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.None.genutils.ParameterProduct.__repr__": [[478, 480], ["str", "str"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"(\"", "+", "str", "(", "self", ".", "_p1", ")", "+", "\" x \"", "+", "str", "(", "self", ".", "_p2", ")", "+", "\")\"", "\n", "", "", ""]], "home.repos.pwc.inspect_result.bdevl_SMO.None.genutils.backend": [[35, 42], ["socket.gethostname"], "function", ["None"], ["def", "backend", "(", ")", ":", "\n", "\n", "    ", "\"\"\"\n    Returns True if code is run on a machine (e.g. cluster, GPU workstation) for which we do not want e.g. tqdm outputs\n    \"\"\"", "\n", "\n", "return", "socket", ".", "gethostname", "(", ")", "!=", "_HOSTNAME_WORKSTATION_", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.None.genutils.cluster": [[44, 54], ["socket.gethostname"], "function", ["None"], ["", "def", "cluster", "(", ")", ":", "\n", "\n", "    ", "\"\"\"\n\n    Returns True if code is run on the cluster\n\n    \"\"\"", "\n", "\n", "hostname", "=", "socket", ".", "gethostname", "(", ")", "\n", "return", "\"node\"", "in", "hostname", "or", "\"master\"", "in", "hostname", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.None.genutils.printd": [[108, 112], ["print"], "function", ["None"], ["", "def", "printd", "(", "msg", ")", ":", "\n", "\n", "    ", "msg", "=", "\"DEBUG: \"", "+", "msg", "\n", "print", "(", "f\"{bcolors.WARNING}{msg}{bcolors.ENDC}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.None.genutils.date_folder": [[155, 167], ["genutils.get_date_string", "genutils.ensure_folder"], "function", ["home.repos.pwc.inspect_result.bdevl_SMO.None.genutils.get_date_string", "home.repos.pwc.inspect_result.bdevl_SMO.None.genutils.ensure_folder"], ["", "", "def", "date_folder", "(", "foldername", ":", "str", ",", "basefolder", "=", "None", ")", "->", "str", ":", "\n", "\n", "    ", "if", "basefolder", "is", "None", ":", "\n", "        ", "basefolder", "=", "\"/home/\"", "+", "_USER_", "+", "\"/phd/output/\"", "\n", "", "folder", "=", "get_date_string", "(", ")", "\n", "if", "foldername", ":", "\n", "        ", "fullpath", "=", "basefolder", "+", "folder", "+", "\"/\"", "+", "foldername", "+", "\"/\"", "\n", "", "else", ":", "\n", "        ", "fullpath", "=", "basefolder", "+", "folder", "+", "\"/\"", "\n", "\n", "", "fullpath", "=", "ensure_folder", "(", "fullpath", ")", "\n", "return", "fullpath", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.None.genutils.get_date_string": [[169, 178], ["datetime.date.today", "date.today.strftime"], "function", ["None"], ["", "def", "get_date_string", "(", "str", "=", "None", ")", ":", "\n", "\n", "    ", "today", "=", "date", ".", "today", "(", ")", "\n", "today_str", "=", "today", ".", "strftime", "(", "\"%Y-%m-%d\"", ")", "\n", "\n", "if", "str", "is", "not", "None", ":", "\n", "        ", "today_str", "+=", "\"-\"", "+", "str", "\n", "\n", "", "return", "today_str", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.None.genutils.pickle_save": [[232, 246], ["open", "pickle.dump"], "function", ["None"], ["", "", "def", "pickle_save", "(", "object", ",", "filename", ")", ":", "\n", "\n", "    ", "\"\"\"\n\n    Args:\n        object:     picke-able python object\n        filename:   string, e.g. ~/subfolder/data.pickle\n\n    Returns:\n\n    \"\"\"", "\n", "\n", "with", "open", "(", "filename", ",", "\"wb\"", ")", "as", "handle", ":", "\n", "        ", "pickle", ".", "dump", "(", "object", ",", "handle", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.None.genutils.pickle_load": [[248, 263], ["open", "pickle.load"], "function", ["home.repos.pwc.inspect_result.bdevl_SMO.lamp.modules.BaseModule.load"], ["", "", "def", "pickle_load", "(", "filename", ")", ":", "\n", "\n", "    ", "\"\"\"\n\n    Args:\n        filename: string, e.g. ~/subfolder/data.pickle\n\n    Returns:\n\n    \"\"\"", "\n", "\n", "with", "open", "(", "filename", ",", "\"rb\"", ")", "as", "handle", ":", "\n", "        ", "object", "=", "pickle", ".", "load", "(", "handle", ")", "\n", "\n", "", "return", "object", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.None.genutils.ensure_folder": [[317, 322], ["os.makedirs", "path.endswith"], "function", ["None"], ["", "", "def", "ensure_folder", "(", "path", ")", ":", "\n", "\n", "    ", "path", "=", "path", "if", "path", ".", "endswith", "(", "\"/\"", ")", "else", "path", "+", "\"/\"", "\n", "os", ".", "makedirs", "(", "path", ",", "exist_ok", "=", "True", ")", "\n", "return", "path", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.None.genutils.kde": [[354, 369], ["scipy.stats.gaussian_kde", "scipy.stats.gaussian_kde.", "matplotlib.plot"], "function", ["home.repos.pwc.inspect_result.bdevl_SMO.SMO.utils.Gaussian2D.plot"], ["", "", "def", "kde", "(", "x_data", ",", "x_plot", ",", "bw_method", "=", "None", ",", "weights", "=", "None", ",", "plot", "=", "False", ")", ":", "\n", "\n", "    ", "\"\"\"\n\n    Construct density estimate of x_data at x_plot points\n\n    \"\"\"", "\n", "\n", "kernel", "=", "gaussian_kde", "(", "x_data", ")", "\n", "pdf", "=", "kernel", "(", "x_plot", ")", "\n", "\n", "if", "plot", ":", "\n", "        ", "plt", ".", "plot", "(", "x_plot", ",", "pdf", ")", "\n", "\n", "", "return", "x_plot", ",", "pdf", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.parallel.communicator.Connector.__init__": [[9, 14], ["comm.Get_size", "comm.Get_rank"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "comm", "=", "MPI", ".", "COMM_WORLD", ")", ":", "\n", "\n", "        ", "self", ".", "comm", "=", "comm", "\n", "self", ".", "size", "=", "comm", ".", "Get_size", "(", ")", "\n", "self", ".", "rank", "=", "comm", ".", "Get_rank", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.parallel.communicator.Pool.__init__": [[17, 20], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "connector", ")", ":", "\n", "\n", "        ", "self", ".", "_connector", "=", "connector", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.parallel.communicator.Pool.submit": [[21, 23], ["None"], "methods", ["None"], ["", "def", "submit", "(", "self", ",", "f", ",", "args", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.parallel.communicator.GatherVerticalStack": [[25, 53], ["comm.Get_size", "comm.Get_rank", "A.flatten", "comm.Gather", "numpy.empty", "np.empty.reshape", "numpy.ascontiguousarray", "Exception", "np.empty.reshape"], "function", ["None"], ["", "", "def", "GatherVerticalStack", "(", "A", ",", "comm", ",", "target", "=", "0", ",", "ReturnOrder", "=", "\"f\"", ")", ":", "\n", "\n", "    ", "size", "=", "comm", ".", "Get_size", "(", ")", "\n", "rank", "=", "comm", ".", "Get_rank", "(", ")", "\n", "\n", "sendbuf", "=", "A", ".", "flatten", "(", "order", "=", "\"f\"", ")", "\n", "recvbuf", "=", "None", "\n", "\n", "if", "rank", "==", "target", ":", "\n", "        ", "recvbuf", "=", "np", ".", "empty", "(", "shape", "=", "A", ".", "size", "*", "size", ",", "dtype", "=", "A", ".", "dtype", ")", "\n", "\n", "", "comm", ".", "Gather", "(", "sendbuf", ",", "recvbuf", ",", "root", "=", "target", ")", "\n", "\n", "if", "rank", "==", "target", ":", "\n", "        ", "if", "ReturnOrder", "==", "\"f\"", ":", "# column-wise ordering", "\n", "            ", "return", "recvbuf", ".", "reshape", "(", "A", ".", "shape", "[", "0", "]", ",", "A", ".", "shape", "[", "1", "]", "*", "size", ",", "order", "=", "\"f\"", ")", "\n", "", "elif", "ReturnOrder", "==", "\"c\"", ":", "# row-wise ordering", "\n", "# clumsy, but...", "\n", "            ", "return", "np", ".", "ascontiguousarray", "(", "\n", "recvbuf", ".", "reshape", "(", "A", ".", "shape", "[", "0", "]", ",", "A", ".", "shape", "[", "1", "]", "*", "size", ",", "order", "=", "\"f\"", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "\n", "\"No recognized array-order; expect either c (rows) or f (columns)\"", "\n", ")", "\n", "", "", "else", ":", "\n", "# return None", "\n", "        ", "return", "recvbuf", "\n", "", "", ""]], "home.repos.pwc.inspect_result.bdevl_SMO.parallel.utils.DummyFuture.__init__": [[5, 13], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "catch_exceptions", ",", "f", ",", "args", ",", "kwargs", ")", ":", "\n", "\n", "        ", "self", ".", "_catch_exceptions", "=", "catch_exceptions", "\n", "self", ".", "_f", "=", "f", "\n", "self", ".", "_args", "=", "args", "\n", "self", ".", "_kwargs", "=", "kwargs", "\n", "self", ".", "_results", "=", "None", "\n", "self", ".", "_exception", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.parallel.utils.DummyFuture.compute": [[14, 24], ["utils.DummyFuture._f"], "methods", ["None"], ["", "def", "compute", "(", "self", ")", ":", "\n", "\n", "        ", "if", "self", ".", "_results", "is", "None", ":", "\n", "            ", "try", ":", "\n", "                ", "self", ".", "_results", "=", "self", ".", "_f", "(", "*", "self", ".", "_args", ",", "**", "self", ".", "_kwargs", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                ", "self", ".", "_exception", "=", "e", "\n", "\n", "", "", "if", "not", "self", ".", "_catch_exceptions", "and", "self", ".", "_exception", "is", "not", "None", ":", "\n", "            ", "raise", "self", ".", "_exception", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.parallel.utils.DummyFuture.result": [[25, 34], ["utils.DummyFuture.compute"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.parallel.utils.DummyFuture.compute"], ["", "", "def", "result", "(", "self", ")", ":", "\n", "\n", "        ", "if", "self", ".", "_results", "is", "None", "and", "self", ".", "_exception", "is", "None", ":", "\n", "            ", "self", ".", "compute", "(", ")", "\n", "\n", "", "if", "self", ".", "_exception", "is", "not", "None", ":", "\n", "            ", "raise", "self", ".", "_exception", "\n", "\n", "", "return", "self", ".", "_results", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.parallel.utils.DummyFuture.done": [[35, 37], ["None"], "methods", ["None"], ["", "def", "done", "(", "self", ")", ":", "\n", "        ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.parallel.utils.DummyProcessPool.__init__": [[40, 47], ["warnings.warn"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "MAXWORKERS", "=", "None", ",", "catch_exceptions", "=", "True", ")", ":", "\n", "\n", "        ", "if", "MAXWORKERS", "is", "not", "None", ":", "\n", "            ", "warnings", ".", "warn", "(", "\n", "\"MAXWORKERS argument supplied to Dummy Process Pool has no impact\"", "\n", ")", "\n", "", "self", ".", "_catch_exceptions", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.parallel.utils.DummyProcessPool.activate_exceptions": [[48, 50], ["None"], "methods", ["None"], ["", "def", "activate_exceptions", "(", "self", ")", ":", "\n", "        ", "self", ".", "_catch_exceptions", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.parallel.utils.DummyProcessPool.__enter__": [[51, 53], ["None"], "methods", ["None"], ["", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.parallel.utils.DummyProcessPool.__exit__": [[54, 56], ["None"], "methods", ["None"], ["", "def", "__exit__", "(", "self", ",", "exc_type", ",", "exc_val", ",", "exc_tb", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.parallel.utils.DummyProcessPool.submit": [[57, 60], ["utils.DummyFuture"], "methods", ["None"], ["", "def", "submit", "(", "self", ",", "f", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "return", "DummyFuture", "(", "self", ".", "_catch_exceptions", ",", "f", ",", "args", ",", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.parallel.utils.DummyProcessPool.shutdown": [[61, 63], ["None"], "methods", ["None"], ["", "def", "shutdown", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "pass", "\n", "", "", ""]], "home.repos.pwc.inspect_result.bdevl_SMO.utils.strings.ensure_file_extension": [[1, 20], ["path.split", "RuntimeError", "len", "ValueError", "len", "len", "len"], "function", ["None"], ["def", "ensure_file_extension", "(", "path", ",", "extension", ")", ":", "\n", "\n", "    ", "if", "extension", "[", "0", "]", "==", "\".\"", ":", "\n", "        ", "extension", "=", "extension", "[", "1", ":", "]", "\n", "\n", "", "split_path", "=", "path", ".", "split", "(", "\".\"", ")", "\n", "\n", "if", "not", "(", "len", "(", "split_path", ")", "==", "1", "or", "len", "(", "split_path", ")", "==", "2", ")", ":", "\n", "        ", "raise", "RuntimeError", "(", "\"Unexpected behaviour.\"", ")", "\n", "\n", "", "if", "len", "(", "split_path", ")", "==", "1", ":", "\n", "        ", "path", "=", "split_path", "[", "0", "]", "+", "\".\"", "+", "extension", "\n", "return", "path", "\n", "", "elif", "len", "(", "split_path", ")", ">", "1", "and", "split_path", "[", "-", "1", "]", "==", "extension", ":", "\n", "        ", "return", "path", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "'The path string {} already has an extension which does not match the required \"{}\"'", ".", "format", "(", "\n", "path", ",", "extension", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.utils.analysis.pca_variance": [[4, 23], ["numpy.linalg.svd", "numpy.sort", "numpy.argmax", "numpy.flip", "numpy.cumsum", "numpy.sum", "print"], "function", ["None"], ["def", "pca_variance", "(", "X", ",", "num_dims", "=", "None", ",", "flip", "=", "True", ",", "verbose", "=", "False", ",", "frac", "=", "0.99", ")", ":", "\n", "\n", "    ", "_", ",", "singvals", ",", "_", "=", "np", ".", "linalg", ".", "svd", "(", "X", ")", "\n", "singvals", "=", "np", ".", "sort", "(", "singvals", ")", "\n", "\n", "if", "flip", ":", "\n", "        ", "singvals", "=", "np", ".", "flip", "(", "singvals", ")", "\n", "\n", "", "fraction_variance_explained", "=", "np", ".", "cumsum", "(", "singvals", ")", "/", "np", ".", "sum", "(", "singvals", ")", "\n", "truncation", "=", "np", ".", "argmax", "(", "fraction_variance_explained", ">", "frac", ")", "\n", "\n", "if", "verbose", ":", "\n", "        ", "print", "(", "\n", "\"Retaining {} of {} components required for 99\\% variance\"", ".", "format", "(", "\n", "truncation", ",", "X", ".", "shape", "[", "1", "]", "\n", ")", "\n", ")", "\n", "\n", "", "return", "fraction_variance_explained", ",", "truncation", "\n", "", ""]], "home.repos.pwc.inspect_result.bdevl_SMO.utils.data.DataLoader.__init__": [[12, 54], ["dict", "dict", "dict", "list", "ValueError", "torch.device", "ValueError", "len", "ValueError", "len"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.device"], ["    ", "def", "__init__", "(", "self", ",", "X", ",", "X_DG", "=", "None", ",", "Y", "=", "None", ",", "BCE", "=", "None", ",", "F_ROM_BC", "=", "None", ",", "hash", "=", "None", ")", ":", "\n", "\n", "# enforce full precision", "\n", "        ", "if", "X", ".", "dtype", "!=", "torch", ".", "double", ":", "\n", "            ", "raise", "ValueError", "(", "\"Basic dataset has not been given double precision input\"", ")", "\n", "\n", "# check compliant sizes", "\n", "", "if", "BCE", "is", "not", "None", ":", "\n", "            ", "if", "len", "(", "BCE", ")", "!=", "X", ".", "shape", "[", "0", "]", ":", "\n", "                ", "raise", "ValueError", "(", "\n", "\"It is assumed that X and boundary condition assemble should have same size ({} vs {}\"", ".", "format", "(", "\n", "X", ".", "shape", ",", "len", "(", "BCE", ")", "\n", ")", "\n", ")", "\n", "\n", "", "", "if", "X_DG", "is", "not", "None", ":", "\n", "            ", "assert", "X", ".", "shape", "[", "0", "]", "==", "X_DG", ".", "shape", "[", "0", "]", "\n", "\n", "", "if", "Y", "is", "not", "None", ":", "\n", "            ", "assert", "Y", ".", "shape", "[", "0", "]", "==", "X", ".", "shape", "[", "0", "]", "\n", "\n", "", "if", "F_ROM_BC", "is", "not", "None", ":", "\n", "            ", "assert", "F_ROM_BC", ".", "shape", "[", "0", "]", "==", "X", ".", "shape", "[", "0", "]", "\n", "\n", "", "if", "X", ".", "device", "!=", "torch", ".", "device", "(", "\"cpu\"", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"Expect for the X tensor to reside on the GPU\"", ")", "\n", "\n", "", "self", ".", "_X", "=", "X", "\n", "self", ".", "_BCE", "=", "BCE", "\n", "self", ".", "_X_DG", "=", "X_DG", "\n", "self", ".", "_Y", "=", "Y", "\n", "self", ".", "_F_ROM_BC", "=", "F_ROM_BC", "\n", "\n", "self", ".", "_permutation", "=", "dict", "(", ")", "\n", "self", ".", "_assigned_chunks", "=", "dict", "(", ")", "\n", "self", ".", "_state_indicator", "=", "dict", "(", ")", "\n", "\n", "self", ".", "_dependent_datasets", "=", "list", "(", ")", "\n", "\n", "self", ".", "_hash", "=", "hash", "\n", "\n", "self", ".", "_lock_physics_assembly", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.utils.data.DataLoader.lock_physics_assembly": [[55, 57], ["None"], "methods", ["None"], ["", "def", "lock_physics_assembly", "(", "self", ")", ":", "\n", "        ", "self", ".", "_lock_physics_assembly", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.utils.data.DataLoader.hash": [[58, 63], ["torch.utils.data.DataLoader.hash"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.utils.data.DataLoader.hash"], ["", "@", "property", "\n", "def", "hash", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_hash", "is", "None", ":", "\n", "            ", "self", ".", "_hash", "=", "hash", "(", "self", ".", "_X", ")", "\n", "", "return", "self", ".", "_hash", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.utils.data.DataLoader.N": [[64, 67], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "N", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_X", ".", "shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.utils.data.DataLoader.register_dataset": [[68, 70], ["torch.utils.data.DataLoader._dependent_datasets.append"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.Log.append"], ["", "def", "register_dataset", "(", "self", ",", "dataset", ")", ":", "\n", "        ", "self", ".", "_dependent_datasets", ".", "append", "(", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.utils.data.DataLoader.__len__": [[71, 73], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_X", ".", "shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.utils.data.DataLoader.assemble_BCE": [[74, 81], ["physics.BoundaryConditions.BoundaryConditionEnsemble.FromFactory", "torch.utils.data.DataLoader._BCE.register_function_space", "torch.utils.data.DataLoader._BCE.register_function_space"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.WrapperModel.FromFactory"], ["", "def", "assemble_BCE", "(", "self", ",", "physics", ")", ":", "\n", "\n", "        ", "self", ".", "_BCE", "=", "BoundaryConditionEnsemble", ".", "FromFactory", "(", "\n", "physics", "[", "\"fom\"", "]", ".", "factory", ",", "self", ".", "N", "\n", ")", "\n", "self", ".", "_BCE", ".", "register_function_space", "(", "\"rom\"", ",", "physics", "[", "\"rom\"", "]", ".", "V", ")", "\n", "self", ".", "_BCE", ".", "register_function_space", "(", "\"fom\"", ",", "physics", "[", "\"fom\"", "]", ".", "V", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.utils.data.DataLoader.assemble": [[82, 135], ["torch.zeros", "utils.time.StopWatch", "torch.utils.data.DataLoader.assemble_DG", "range", "torch.tensor", "utils.time.StopWatch.stop", "print", "RuntimeError", "ValueError", "len", "len", "numpy.exp", "torch.tensor", "torch.utils.data.DataLoader._BCE.FULL_F_WITH_APPLIED_BC", "torch.utils.data.DataLoader._X.dim", "torch.utils.data.DataLoader._X.dim", "isinstance", "BCE.check_if_registered", "BCE.check_if_registered", "torch.utils.data.DataLoader.assemble_BCE", "torch.device", "torch.utils.data.DataLoader._X_DG[].detach().numpy().flatten", "physics[].solve", "torch.device", "utils.time.StopWatch.runtime_str", "torch.device", "torch.utils.data.DataLoader._X_DG[].detach().numpy", "torch.utils.data.DataLoader._X_DG[].detach"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.utils.data.DataLoader.assemble_DG", "home.repos.pwc.inspect_result.bdevl_SMO.utils.time.Timer.stop", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.Kernel.dim", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.Kernel.dim", "home.repos.pwc.inspect_result.bdevl_SMO.utils.data.DataLoader.assemble_BCE", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.device", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.device", "home.repos.pwc.inspect_result.bdevl_SMO.utils.time.StopWatch.runtime_str", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.device"], ["", "def", "assemble", "(", "self", ",", "physics", ",", "BCE", "=", "None", ")", ":", "\n", "\n", "        ", "if", "self", ".", "_lock_physics_assembly", ":", "\n", "            ", "raise", "RuntimeError", "(", "\n", "\"This dataloader has been locked and cannot assemble physics (avoid calling assembly on large unsupervised datasets\"", "\n", ")", "\n", "\n", "", "if", "self", ".", "_X", ".", "dim", "(", ")", "!=", "3", "and", "self", ".", "_X", ".", "dim", "(", ")", "!=", "2", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"File does not contain set of images or 1D objects; don't know how to handle this\"", "\n", ")", "\n", "\n", "", "if", "self", ".", "_BCE", "is", "None", ":", "\n", "            ", "if", "BCE", "is", "not", "None", ":", "\n", "                ", "assert", "isinstance", "(", "BCE", ",", "BoundaryConditionEnsemble", ")", "\n", "# we require function spaces to already have been registered", "\n", "assert", "BCE", ".", "check_if_registered", "(", "\"fom\"", ")", "\n", "assert", "BCE", ".", "check_if_registered", "(", "\"rom\"", ")", "\n", "self", ".", "_BCE", "=", "BCE", "\n", "", "else", ":", "\n", "                ", "self", ".", "assemble_BCE", "(", "physics", ")", "\n", "\n", "# always assemble on CPU, always assemble with double precision", "\n", "", "", "self", ".", "_Y", "=", "torch", ".", "zeros", "(", "\n", "len", "(", "self", ")", ",", "\n", "physics", "[", "\"fom\"", "]", ".", "dim_out", ",", "\n", "dtype", "=", "torch", ".", "double", ",", "\n", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", ",", "\n", ")", "\n", "\n", "stopper", "=", "StopWatch", "(", "start", "=", "True", ")", "\n", "\n", "self", ".", "assemble_DG", "(", "physics", ")", "\n", "\n", "for", "n", "in", "range", "(", "len", "(", "self", ")", ")", ":", "\n", "\n", "            ", "matprop", "=", "np", ".", "exp", "(", "self", ".", "_X_DG", "[", "n", ",", ":", "]", ".", "detach", "(", ")", ".", "numpy", "(", ")", ".", "flatten", "(", ")", ")", "\n", "# the identifier of the physics object is used to querry the boundary condition object", "\n", "self", ".", "_Y", "[", "n", ",", ":", "]", "=", "torch", ".", "tensor", "(", "\n", "physics", "[", "\"fom\"", "]", ".", "solve", "(", "x", "=", "matprop", ",", "bc", "=", "self", ".", "_BCE", "[", "n", "]", ")", ",", "\n", "dtype", "=", "torch", ".", "double", ",", "\n", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", ",", "\n", ")", "\n", "\n", "", "self", ".", "_F_ROM_BC", "=", "torch", ".", "tensor", "(", "\n", "self", ".", "_BCE", ".", "FULL_F_WITH_APPLIED_BC", "(", "\"rom\"", ")", ",", "\n", "dtype", "=", "torch", ".", "double", ",", "\n", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", ",", "\n", ")", "\n", "\n", "stopper", ".", "stop", "(", ")", "\n", "print", "(", "\n", "\"Assembly of {} data points took: {}\"", ".", "format", "(", "self", ".", "N", ",", "stopper", ".", "runtime_str", "(", ")", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.utils.data.DataLoader.assemble_DG": [[137, 168], ["torch.zeros", "fawkes.converter.DiscontinuousGalerkinPixelConverter", "fawkes.converter.DiscontinuousGalerkinPixelConverter._assemble", "torch.utils.data.BatchSampler", "Vc.mesh().geometric_dimension", "Vc.mesh().geometric_dimension", "len", "Vc.dim", "torch.utils.data.SequentialSampler", "fawkes.converter.DiscontinuousGalerkinPixelConverter.ImageToFunctionBatchedFast", "Vc.dim", "Vc.dim", "Vc.mesh().num_cells", "torch.device", "range", "Vc.mesh", "Vc.mesh", "numpy.prod", "len", "Vc.mesh", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.fawkes.converter.DiscontinuousGalerkinPixelConverter._assemble", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.Kernel.dim", "home.repos.pwc.inspect_result.bdevl_SMO.fawkes.converter.DiscontinuousGalerkinPixelConverter.ImageToFunctionBatchedFast", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.Kernel.dim", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.Kernel.dim", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.device", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.homogenization.PoissonHomogenizer.mesh", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.homogenization.PoissonHomogenizer.mesh", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.homogenization.PoissonHomogenizer.mesh"], ["", "def", "assemble_DG", "(", "self", ",", "physics", ")", ":", "\n", "\n", "        ", "Vc", "=", "physics", "[", "\"fom\"", "]", ".", "Vc", "\n", "\n", "if", "Vc", ".", "mesh", "(", ")", ".", "geometric_dimension", "(", ")", "==", "1", ":", "\n", "            ", "assert", "self", ".", "X", ".", "shape", "[", "1", "]", "==", "1", "\n", "assert", "(", "\n", "Vc", ".", "dim", "(", ")", "==", "self", ".", "X", ".", "shape", "[", "2", "]", "\n", ")", ",", "\"Data does not match function space / mesh resolution\"", "\n", "", "if", "Vc", ".", "mesh", "(", ")", ".", "geometric_dimension", "(", ")", "==", "2", ":", "\n", "            ", "assert", "(", "\n", "Vc", ".", "dim", "(", ")", "\n", "==", "2", "*", "np", ".", "prod", "(", "np", ".", "array", "(", "self", ".", "X", ".", "shape", ")", "[", "1", ":", "]", ")", "\n", "==", "Vc", ".", "mesh", "(", ")", ".", "num_cells", "(", ")", "\n", ")", ",", "\"Data does not match function space / mesh resolution\"", "\n", "\n", "", "self", ".", "_X_DG", "=", "torch", ".", "zeros", "(", "\n", "len", "(", "self", ")", ",", "Vc", ".", "dim", "(", ")", ",", "dtype", "=", "torch", ".", "double", ",", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", "\n", ")", "\n", "\n", "converter", "=", "DiscontinuousGalerkinPixelConverter", "(", "Vc", ")", "\n", "converter", ".", "_assemble", "(", ")", "\n", "\n", "# batched conversion of image to DG functions (use batching to avoid memory issues)", "\n", "for", "batch_ids", "in", "torch", ".", "utils", ".", "data", ".", "BatchSampler", "(", "\n", "torch", ".", "utils", ".", "data", ".", "SequentialSampler", "(", "range", "(", "len", "(", "self", ")", ")", ")", ",", "\n", "batch_size", "=", "128", ",", "\n", "drop_last", "=", "False", ",", "\n", ")", ":", "\n", "            ", "self", ".", "_X_DG", "[", "batch_ids", ",", ":", "]", "=", "converter", ".", "ImageToFunctionBatchedFast", "(", "\n", "self", ".", "_X", "[", "batch_ids", ",", ":", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.utils.data.DataLoader.X": [[170, 173], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "X", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_X", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.utils.data.DataLoader.X_DG": [[174, 179], ["RuntimeError"], "methods", ["None"], ["", "@", "property", "\n", "def", "X_DG", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_X_DG", "is", "None", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"Assembly has not yet been called on this dataset\"", ")", "\n", "", "return", "self", ".", "_X_DG", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.utils.data.DataLoader.Y": [[180, 185], ["RuntimeError"], "methods", ["None"], ["", "@", "property", "\n", "def", "Y", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_Y", "is", "None", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"Assembly has not yet been called on this dataset\"", ")", "\n", "", "return", "self", ".", "_Y", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.utils.data.DataLoader.F_ROM_BC": [[186, 191], ["RuntimeError"], "methods", ["None"], ["", "@", "property", "\n", "def", "F_ROM_BC", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_F_ROM_BC", "is", "None", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"Assembly has not yet been called on this dataset\"", ")", "\n", "", "return", "self", ".", "_F_ROM_BC", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.utils.data.DataLoader.BCE": [[192, 196], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "BCE", "(", "self", ")", ":", "\n", "# return boundary condition ensemble", "\n", "        ", "return", "self", ".", "_BCE", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.utils.data.DataLoader.reset_partition": [[197, 210], ["dict", "dict", "dict", "dataset.trigger_update"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.utils.data.DataSet.trigger_update"], ["", "def", "reset_partition", "(", "self", ",", "identifier", "=", "None", ")", ":", "\n", "\n", "        ", "if", "identifier", "is", "not", "None", ":", "\n", "            ", "del", "self", ".", "_permutation", "[", "identifier", "]", "\n", "del", "self", ".", "_assigned_chunks", "[", "identifier", "]", "\n", "del", "self", ".", "_state_indicator", "[", "identifier", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "_permutation", "=", "dict", "(", ")", "\n", "self", ".", "_assigned_chunks", "=", "dict", "(", ")", "\n", "self", ".", "_state_indicator", "=", "dict", "(", ")", "\n", "\n", "", "for", "dataset", "in", "self", ".", "_dependent_datasets", ":", "\n", "            ", "dataset", ".", "trigger_update", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.utils.data.DataLoader.construct_unsupervised_pytorch_dataloader": [[211, 227], ["lamp.data.CustomTensorDataset", "torch.utils.data.dataloader.DataLoader", "torch.utils.data.DataLoader.X[].to", "[].to", "torch.randperm"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.optimization.inference.LowRankVariationalInference.to", "home.repos.pwc.inspect_result.bdevl_SMO.optimization.inference.LowRankVariationalInference.to"], ["", "", "def", "construct_unsupervised_pytorch_dataloader", "(", "\n", "self", ",", "N_data", ",", "randomized_data", ",", "batch_size", ",", "randomized_batches", ",", "dtype", ",", "device", "\n", ")", ":", "\n", "\n", "# construct a pytorch dataloader based on self.X", "\n", "        ", "if", "not", "randomized_data", ":", "\n", "            ", "X", "=", "self", ".", "X", "[", "0", ":", "N_data", "]", ".", "to", "(", "dtype", "=", "dtype", ",", "device", "=", "device", ")", "\n", "", "else", ":", "\n", "            ", "X", "=", "self", ".", "X", "[", "torch", ".", "randperm", "(", "self", ".", "N", ")", "]", "[", "0", ":", "N_data", "]", ".", "to", "(", "dtype", "=", "dtype", ",", "device", "=", "device", ")", "\n", "\n", "", "torch_dataset", "=", "CustomTensorDataset", "(", "X", ")", "\n", "pt_dataloader", "=", "torch", ".", "utils", ".", "data", ".", "dataloader", ".", "DataLoader", "(", "\n", "torch_dataset", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "randomized_batches", "\n", ")", "\n", "\n", "return", "pt_dataloader", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.utils.data.DataLoader.ascending_partition": [[228, 236], ["torch.no_grad", "torch.arange", "torch.utils.data.DataLoader.randomized_partition"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.utils.data.DataLoader.randomized_partition"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "ascending_partition", "(", "self", ",", "chunks", ",", "identifier", "=", "\"default\"", ",", "ForceOverwrite", "=", "False", ")", ":", "\n", "        ", "permutation", "=", "torch", ".", "arange", "(", "self", ".", "N", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "return", "self", ".", "randomized_partition", "(", "\n", "chunks", ",", "\n", "identifier", "=", "identifier", ",", "\n", "ForceOverwrite", "=", "ForceOverwrite", ",", "\n", "permutation", "=", "permutation", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.utils.data.DataLoader.randomized_partition": [[238, 288], ["torch.no_grad", "sum", "dict", "chunks.items", "torch.utils.data.DataLoader._check_chunks", "RuntimeError", "ValueError", "chunks.values", "ValueError", "torch.randperm", "torch.utils.data.DataLoader._permutation.keys", "isinstance", "isinstance", "torch.arange", "torch.tensor", "Exception"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.utils.data.DataLoader._check_chunks", "home.repos.pwc.inspect_result.bdevl_SMO.lamp.metrics.MetricEnsemble.keys"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "randomized_partition", "(", "\n", "self", ",", "chunks", ",", "identifier", "=", "\"default\"", ",", "*", ",", "ForceOverwrite", "=", "False", ",", "permutation", "=", "None", "\n", ")", ":", "\n", "\n", "\n", "        ", "if", "identifier", "in", "self", ".", "_permutation", ".", "keys", "(", ")", "and", "not", "ForceOverwrite", ":", "\n", "            ", "raise", "RuntimeError", "(", "\n", "\"Cannot rewrite partition without setting ForceOverwrite to True\"", "\n", ")", "\n", "\n", "", "if", "not", "chunks", ":", "\n", "            ", "raise", "ValueError", "(", "\"Was supplied an empty dictionary\"", ")", "\n", "\n", "", "N_total", "=", "sum", "(", "chunks", ".", "values", "(", ")", ")", "\n", "\n", "if", "N_total", ">", "self", ".", "N", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Dataset cannot satisfy request; only has {} data points, but {} requested\"", ".", "format", "(", "\n", "self", ".", "N", ",", "N_total", "\n", ")", "\n", ")", "\n", "\n", "# define unique permutation", "\n", "", "if", "permutation", "is", "None", ":", "\n", "            ", "permutation", "=", "torch", ".", "randperm", "(", "self", ".", "N", ")", "\n", "", "elif", "isinstance", "(", "permutation", ",", "torch", ".", "Tensor", ")", "and", "permutation", ".", "dtype", "==", "torch", ".", "long", ":", "\n", "            ", "pass", "\n", "", "elif", "isinstance", "(", "permutation", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "permutation", "=", "torch", ".", "tensor", "(", "permutation", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "\n", "\"A permutation array was provided that was not recognized as any valid choice\"", "\n", ")", "\n", "", "self", ".", "_permutation", "[", "identifier", "]", "=", "permutation", "\n", "self", ".", "_assigned_chunks", "[", "identifier", "]", "=", "dict", "(", ")", "\n", "self", ".", "_state_indicator", "[", "identifier", "]", "=", "0", "\n", "\n", "# assign ranges to chunks", "\n", "ptr", "=", "self", ".", "_state_indicator", "[", "identifier", "]", "\n", "for", "chunk_label", ",", "chunk_size", "in", "chunks", ".", "items", "(", ")", ":", "\n", "# list of torch long type arrays (indeces)", "\n", "            ", "self", ".", "_assigned_chunks", "[", "identifier", "]", "[", "chunk_label", "]", "=", "[", "\n", "torch", ".", "arange", "(", "ptr", ",", "ptr", "+", "chunk_size", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "]", "\n", "ptr", "+=", "chunk_size", "\n", "\n", "# persistently remember state for growing partitions", "\n", "", "self", ".", "_state_indicator", "[", "identifier", "]", "=", "ptr", "\n", "self", ".", "_check_chunks", "(", "identifier", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.utils.data.DataLoader._check_chunks": [[289, 303], ["torch.cat", "torch.unique", "torch.all", "unique_ids.min", "unique_ids.max", "torch.cat", "torch.utils.data.DataLoader._assigned_chunks[].values"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.PhiState.min", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.PhiState.max"], ["", "def", "_check_chunks", "(", "self", ",", "identifier", ")", ":", "\n", "\n", "# list of lists", "\n", "        ", "ids", "=", "torch", ".", "cat", "(", "\n", "[", "\n", "torch", ".", "cat", "(", "subchunks", ")", "\n", "for", "subchunks", "in", "self", ".", "_assigned_chunks", "[", "identifier", "]", ".", "values", "(", ")", "\n", "]", "\n", ")", "\n", "unique_ids", ",", "counts", "=", "torch", ".", "unique", "(", "ids", ",", "sorted", "=", "True", ",", "return_counts", "=", "True", ")", "\n", "\n", "assert", "torch", ".", "all", "(", "counts", "==", "1", ")", "\n", "assert", "unique_ids", ".", "min", "(", ")", "==", "0", "\n", "assert", "unique_ids", ".", "max", "(", ")", "<", "self", ".", "N", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.utils.data.DataLoader.grow_partition": [[304, 355], ["torch.no_grad", "chunks_growth.keys", "sum", "chunks_growth.items", "torch.utils.data.DataLoader._check_chunks", "torch.utils.data.DataLoader._assigned_chunks.keys", "ValueError", "ValueError", "chunks_growth.items", "ValueError", "dataset.trigger_update", "torch.utils.data.DataLoader._assigned_chunks[].keys", "ValueError", "sum", "torch.arange", "ValueError", "chunks_growth.values", "a.numel"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.lamp.metrics.MetricEnsemble.keys", "home.repos.pwc.inspect_result.bdevl_SMO.utils.data.DataLoader._check_chunks", "home.repos.pwc.inspect_result.bdevl_SMO.lamp.metrics.MetricEnsemble.keys", "home.repos.pwc.inspect_result.bdevl_SMO.utils.data.DataSet.trigger_update", "home.repos.pwc.inspect_result.bdevl_SMO.lamp.metrics.MetricEnsemble.keys"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "grow_partition", "(", "\n", "self", ",", "chunks_growth", ",", "identifier", "=", "\"default\"", ",", "SpecifyIncremental", "=", "True", "\n", ")", ":", "\n", "\n", "# chunk_growth is a dictionary following the same idea as when originally creating a partition", "\n", "        ", "if", "identifier", "not", "in", "self", ".", "_assigned_chunks", ".", "keys", "(", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"The identifier {} is unknown\"", ".", "format", "(", "identifier", ")", ")", "\n", "\n", "", "for", "key", "in", "chunks_growth", ".", "keys", "(", ")", ":", "\n", "            ", "if", "key", "not", "in", "self", ".", "_assigned_chunks", "[", "identifier", "]", ".", "keys", "(", ")", ":", "\n", "                ", "raise", "ValueError", "(", "\"The chunk label {} is unknown\"", ".", "format", "(", "key", ")", ")", "\n", "\n", "", "", "if", "not", "chunks_growth", ":", "\n", "            ", "raise", "ValueError", "(", "\"Was supplied an empty dictionary\"", ")", "\n", "\n", "", "if", "not", "SpecifyIncremental", ":", "\n", "# convert", "\n", "            ", "for", "chunk_label", ",", "chunk_size", "in", "chunks_growth", ".", "items", "(", ")", ":", "\n", "# counts the number of datapoints already associated with a specific label", "\n", "                ", "N_used", "=", "sum", "(", "\n", "[", "a", ".", "numel", "(", ")", "for", "a", "in", "self", ".", "_assigned_chunks", "[", "identifier", "]", "[", "chunk_label", "]", "]", "\n", ")", "\n", "if", "N_used", ">=", "chunks_growth", "[", "chunk_label", "]", ":", "\n", "                    ", "raise", "ValueError", "(", "\n", "\"For non-incremental specification, the number of specified data-points needs to be larger than previously used\"", "\n", ")", "\n", "", "chunks_growth", "[", "chunk_label", "]", "-=", "N_used", "\n", "\n", "", "", "N_available", "=", "self", ".", "N", "-", "self", ".", "_state_indicator", "[", "identifier", "]", "\n", "N_requested", "=", "sum", "(", "[", "chunk_size", "for", "chunk_size", "in", "chunks_growth", ".", "values", "(", ")", "]", ")", "\n", "\n", "if", "N_requested", ">", "N_available", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Dataset cannot satisfy request; only has {} free data points left, but {} requested\"", ".", "format", "(", "\n", "N_available", ",", "N_requested", "\n", ")", "\n", ")", "\n", "\n", "", "ptr", "=", "self", ".", "_state_indicator", "[", "identifier", "]", "\n", "for", "chunk_label", ",", "chunk_size", "in", "chunks_growth", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "_assigned_chunks", "[", "identifier", "]", "[", "chunk_label", "]", "+=", "[", "\n", "torch", ".", "arange", "(", "ptr", ",", "ptr", "+", "chunk_size", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "]", "\n", "ptr", "+=", "chunk_size", "\n", "\n", "", "self", ".", "_state_indicator", "[", "identifier", "]", "=", "ptr", "\n", "self", ".", "_check_chunks", "(", "identifier", ")", "\n", "\n", "for", "dataset", "in", "self", ".", "_dependent_datasets", ":", "\n", "            ", "dataset", ".", "trigger_update", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.utils.data.DataLoader.construct_dataset_dictionary": [[356, 388], ["dict", "torch.utils.data.DataLoader._permutation.keys", "dict", "torch.utils.data.DataLoader._assigned_chunks[].keys", "RuntimeError", "dict", "torch.utils.data.DataLoader._assigned_chunks[].keys", "KeyError", "torch.utils.data.DataSet", "torch.utils.data.DataSet"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.lamp.metrics.MetricEnsemble.keys", "home.repos.pwc.inspect_result.bdevl_SMO.lamp.metrics.MetricEnsemble.keys", "home.repos.pwc.inspect_result.bdevl_SMO.lamp.metrics.MetricEnsemble.keys"], ["", "", "def", "construct_dataset_dictionary", "(", "self", ",", "*", ",", "identifier", "=", "None", ",", "dtype", ",", "device", ")", ":", "\n", "\n", "        ", "if", "identifier", "is", "None", ":", "\n", "            ", "if", "not", "self", ".", "_permutation", ":", "\n", "                ", "raise", "RuntimeError", "(", "\n", "\"The underlying partition has never been set, i.e. it is empty. Cannot construct datasets\"", "\n", ")", "\n", "\n", "", "datasets", "=", "dict", "(", ")", "\n", "for", "identifier", "in", "self", ".", "_permutation", ".", "keys", "(", ")", ":", "\n", "                ", "datasets", "[", "identifier", "]", "=", "dict", "(", ")", "\n", "for", "label", "in", "self", ".", "_assigned_chunks", "[", "identifier", "]", ".", "keys", "(", ")", ":", "\n", "                    ", "datasets", "[", "identifier", "]", "[", "label", "]", "=", "DataSet", "(", "\n", "self", ",", "\n", "label", "=", "label", ",", "\n", "identifier", "=", "identifier", ",", "\n", "dtype", "=", "dtype", ",", "\n", "device", "=", "device", ",", "\n", ")", "\n", "", "", "", "else", ":", "\n", "            ", "if", "not", "identifier", "in", "self", ".", "_permutation", ":", "\n", "                ", "raise", "KeyError", "(", "\n", "\"The underlying partition for identifer={} has never been set. Cannot construct dataset\"", "\n", ")", "\n", "\n", "", "datasets", "=", "dict", "(", ")", "\n", "for", "label", "in", "self", ".", "_assigned_chunks", "[", "identifier", "]", ".", "keys", "(", ")", ":", "\n", "                ", "datasets", "[", "label", "]", "=", "DataSet", "(", "\n", "self", ",", "label", "=", "label", ",", "identifier", "=", "identifier", ",", "dtype", "=", "dtype", ",", "device", "=", "device", "\n", ")", "\n", "\n", "", "", "return", "datasets", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.utils.data.DataLoader.save": [[389, 394], ["torch.save", "len", "ValueError", "path.split"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.Log.save"], ["", "def", "save", "(", "self", ",", "path", ")", ":", "\n", "\n", "        ", "if", "len", "(", "path", ".", "split", "(", "\".\"", ")", ")", "==", "1", ":", "\n", "            ", "raise", "ValueError", "(", "\"The path must contain a filepath extension\"", ")", "\n", "", "torch", ".", "save", "(", "{", "\"X\"", ":", "self", ".", "X", ",", "\"hash\"", ":", "self", ".", "hash", "}", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.utils.data.DataLoader.FromFile": [[395, 417], ["torch.load", "print", "cls", "RuntimeError", "len", "ValueError", "path.split", "torch.device"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.lamp.modules.BaseModule.load", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.device"], ["", "@", "classmethod", "\n", "def", "FromFile", "(", "cls", ",", "path", ",", "cutoff", "=", "None", ")", ":", "\n", "\n", "        ", "if", "cutoff", "is", "not", "None", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"Deprecated. Should not happen\"", ")", "\n", "\n", "", "if", "len", "(", "path", ".", "split", "(", "\".\"", ")", ")", "==", "1", ":", "\n", "            ", "raise", "ValueError", "(", "\"The path must contain a filepath extension\"", ")", "\n", "\n", "", "state", "=", "torch", ".", "load", "(", "path", ",", "map_location", "=", "torch", ".", "device", "(", "\"cpu\"", ")", ")", "\n", "\n", "X", "=", "state", "[", "\"X\"", "]", "\n", "hash", "=", "state", "[", "\"hash\"", "]", "\n", "\n", "if", "cutoff", "is", "not", "None", ":", "\n", "            ", "X", "=", "X", "[", "\n", ":", "cutoff", ",", "\n", "]", "\n", "\n", "", "print", "(", "\"Loading {} random field realization from file ... \"", ".", "format", "(", "X", ".", "shape", "[", "0", "]", ")", ")", "\n", "\n", "return", "cls", "(", "X", "=", "X", ",", "hash", "=", "hash", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.utils.data.DataLoader.FromSampler": [[418, 449], ["sampler.sample", "range", "cls", "torch.zeros", "sampler.sample", "torch.tensor", "len", "torch.zeros", "sample.reshape.reshape.reshape", "torch.device", "torch.device", "torch.device"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.GaussianMultivariateTargetDistribution.sample", "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.GaussianMultivariateTargetDistribution.sample", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.device", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.device", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.device"], ["", "@", "classmethod", "\n", "def", "FromSampler", "(", "cls", ",", "sampler", ",", "N", ")", ":", "\n", "\n", "        ", "sample", "=", "sampler", ".", "sample", "(", ")", "\n", "\n", "if", "sampler", ".", "gdim", "==", "1", ":", "\n", "            ", "assert", "sample", ".", "ndim", "==", "1", "\n", "py", "=", "1", "\n", "X", "=", "torch", ".", "zeros", "(", "\n", "N", ",", "py", ",", "len", "(", "sample", ")", ",", "dtype", "=", "torch", ".", "double", ",", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", "\n", ")", "\n", "", "elif", "sampler", ".", "gdim", "==", "2", ":", "\n", "            ", "assert", "sample", ".", "ndim", "==", "2", "\n", "sh", "=", "sample", ".", "shape", "\n", "py", "=", "sh", "[", "0", "]", "\n", "px", "=", "sh", "[", "1", "]", "\n", "X", "=", "torch", ".", "zeros", "(", "N", ",", "py", ",", "px", ",", "dtype", "=", "torch", ".", "double", ",", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "for", "n", "in", "range", "(", "N", ")", ":", "\n", "\n", "            ", "sample", "=", "sampler", ".", "sample", "(", ")", "\n", "\n", "if", "sample", ".", "ndim", "==", "1", ":", "\n", "                ", "sample", "=", "sample", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "", "X", "[", "n", ",", ":", "]", "=", "torch", ".", "tensor", "(", "\n", "sample", ",", "dtype", "=", "torch", ".", "double", ",", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", "\n", ")", "\n", "\n", "", "return", "cls", "(", "X", "=", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.utils.data.DataLoader.__repr__": [[450, 466], ["torch.utils.data.DataLoader._X.dim", "torch.utils.data.DataLoader._X.dm"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.Kernel.dim"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "\n", "        ", "if", "self", ".", "_X", ".", "dim", "(", ")", "==", "2", ":", "\n", "            ", "s", "=", "\"DataLoader with {} random field realizations ({}) [Assembled = {}]\"", ".", "format", "(", "\n", "self", ".", "_X", ".", "shape", "[", "0", "]", ",", "self", ".", "_X", ".", "shape", "[", "1", "]", ",", "self", ".", "_X_DG", "is", "not", "None", "\n", ")", "\n", "", "elif", "self", ".", "_X", ".", "dm", "(", ")", "==", "3", ":", "\n", "            ", "s", "=", "\"DataLoader with {} random field realizations ({},{}) [Assembled = {}]\"", ".", "format", "(", "\n", "self", ".", "_X", ".", "shape", "[", "0", "]", ",", "\n", "self", ".", "_X", ".", "shape", "[", "1", "]", ",", "\n", "self", ".", "_X", ".", "shape", "[", "2", "]", ",", "\n", "self", ".", "_X_DG", "is", "not", "None", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.utils.data.DataSet.__init__": [[469, 480], ["torch.utils.data.DataSet._dataloader.register_dataset", "dict"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.utils.data.DataLoader.register_dataset"], ["    ", "def", "__init__", "(", "self", ",", "dataloader", ",", "label", ",", "identifier", "=", "\"default\"", ",", "*", ",", "dtype", ",", "device", ")", ":", "\n", "\n", "        ", "self", ".", "_dataloader", "=", "dataloader", "\n", "self", ".", "identifier", "=", "identifier", "\n", "self", ".", "label", "=", "label", "\n", "self", ".", "_dataloader", ".", "register_dataset", "(", "self", ")", "\n", "self", ".", "_cached_indeces", "=", "None", "\n", "self", ".", "_cache", "=", "dict", "(", ")", "\n", "self", ".", "_dtype", "=", "dtype", "\n", "self", ".", "_device", "=", "device", "\n", "self", ".", "_N_target", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.utils.data.DataSet.indeces": [[481, 493], ["torch.cat", "[].tolist"], "methods", ["None"], ["", "@", "property", "\n", "def", "indeces", "(", "self", ")", ":", "\n", "\n", "        ", "if", "self", ".", "_cached_indeces", "is", "None", ":", "\n", "            ", "subset_lin", "=", "torch", ".", "cat", "(", "\n", "self", ".", "_dataloader", ".", "_assigned_chunks", "[", "self", ".", "identifier", "]", "[", "self", ".", "label", "]", "\n", ")", "\n", "self", ".", "_cached_indeces", "=", "self", ".", "_dataloader", ".", "_permutation", "[", "self", ".", "identifier", "]", "[", "\n", "subset_lin", "\n", "]", ".", "tolist", "(", ")", "\n", "\n", "", "return", "self", ".", "_cached_indeces", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.utils.data.DataSet.__len__": [[494, 500], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "\n", "        ", "if", "self", ".", "_N_target", "is", "None", ":", "\n", "            ", "return", "len", "(", "self", ".", "indeces", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "_N_target", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.utils.data.DataSet.scramble": [[501, 507], ["torch.arange", "torch.utils.data.DataSet.trigger_update"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.utils.data.DataSet.trigger_update"], ["", "", "def", "scramble", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "_dataloader", ".", "_permutation", "[", "self", ".", "identifier", "]", "=", "torch", ".", "arange", "(", "\n", "self", ".", "_dataloader", ".", "N", "\n", ")", "\n", "self", ".", "trigger_update", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.utils.data.DataSet.grow_in_size": [[508, 527], ["torch.utils.data.DataSet._dataloader.grow_partition", "torch.utils.data.DataSet.trigger_update", "len", "ValueError"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.utils.data.DataLoader.grow_partition", "home.repos.pwc.inspect_result.bdevl_SMO.utils.data.DataSet.trigger_update"], ["", "def", "grow_in_size", "(", "self", ",", "N", ",", "incremental", "=", "False", ")", ":", "\n", "\n", "        ", "if", "incremental", ":", "\n", "            ", "N_add", "=", "N", "\n", "", "else", ":", "\n", "            ", "if", "N", "<=", "len", "(", "self", ")", ":", "\n", "                ", "raise", "ValueError", "(", "\n", "\"can only increase size of dataset (currently N={}, requested N={})\"", ".", "format", "(", "\n", "self", ".", "N", ",", "N", "\n", ")", "\n", ")", "\n", "", "N_add", "=", "N", "-", "self", ".", "N", "\n", "\n", "", "chunks_growth", "=", "{", "self", ".", "label", ":", "N_add", "}", "\n", "self", ".", "_dataloader", ".", "grow_partition", "(", "\n", "chunks_growth", ",", "identifier", "=", "self", ".", "identifier", ",", "SpecifyIncremental", "=", "True", "\n", ")", "\n", "\n", "self", ".", "trigger_update", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.utils.data.DataSet.N": [[528, 531], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "N", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.utils.data.DataSet.restrict": [[532, 552], ["isinstance", "torch.utils.data.DataSet.trigger_update", "ValueError"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.utils.data.DataSet.trigger_update"], ["", "def", "restrict", "(", "self", ",", "N_target", ")", ":", "\n", "\n", "        ", "assert", "isinstance", "(", "N_target", ",", "int", ")", "\n", "\n", "if", "N_target", ">", "self", ".", "N_max", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"The maximum size of the dataset is currently {} - cannot restrict to size {}\"", ".", "format", "(", "\n", "self", ".", "N_max", ",", "N_target", "\n", ")", "\n", ")", "\n", "\n", "", "if", "N_target", "==", "self", ".", "_N_target", ":", "\n", "            ", "return", "\n", "\n", "", "if", "N_target", "==", "self", ".", "N_max", ":", "\n", "            ", "self", ".", "_N_target", "=", "None", "\n", "", "else", ":", "\n", "            ", "self", ".", "_N_target", "=", "N_target", "\n", "\n", "", "self", ".", "trigger_update", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.utils.data.DataSet.N_max": [[553, 556], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "N_max", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "indeces", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.utils.data.DataSet.trigger_update": [[557, 561], ["dict"], "methods", ["None"], ["", "def", "trigger_update", "(", "self", ")", ":", "\n", "#", "\n", "        ", "self", ".", "_cached_indeces", "=", "None", "\n", "self", ".", "_cache", "=", "dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.utils.data.DataSet.get": [[562, 594], ["ValueError", "torch.randperm", "getattr", "Q.to.to.to"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.optimization.inference.LowRankVariationalInference.to"], ["", "def", "get", "(", "self", ",", "idf", ",", "random_subset", "=", "None", ")", ":", "\n", "\n", "        ", "validkeys", "=", "{", "\"X\"", ",", "\"X_DG\"", ",", "\"Y\"", ",", "\"F_ROM_BC\"", ",", "\"BCE\"", "}", "\n", "\n", "if", "not", "idf", "in", "validkeys", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'You requested to access \"{}\" - valid keys are only : {}'", ".", "format", "(", "\n", "idf", ",", "validkeys", "\n", ")", "\n", ")", "\n", "\n", "", "if", "not", "idf", "in", "self", ".", "_cache", ":", "\n", "\n", "            ", "if", "self", ".", "N", ">", "0", ":", "\n", "                ", "Q", "=", "getattr", "(", "self", ".", "_dataloader", ",", "idf", ")", "[", "self", ".", "indeces", "]", "\n", "if", "idf", "in", "{", "\"X\"", ",", "\"Y\"", ",", "\"F_ROM_BC\"", "}", ":", "\n", "                    ", "Q", "=", "Q", ".", "to", "(", "dtype", "=", "self", ".", "_dtype", ",", "device", "=", "self", ".", "_device", ")", "\n", "\n", "", "if", "self", ".", "_N_target", "is", "not", "None", ":", "\n", "                    ", "Q", "=", "Q", "[", "0", ":", "self", ".", "_N_target", "]", "\n", "\n", "", "", "else", ":", "\n", "                ", "Q", "=", "None", "\n", "\n", "", "self", ".", "_cache", "[", "idf", "]", "=", "Q", "\n", "\n", "", "if", "random_subset", "is", "None", ":", "\n", "            ", "return", "self", ".", "_cache", "[", "idf", "]", "\n", "", "else", ":", "\n", "            ", "perm", "=", "torch", ".", "randperm", "(", "self", ".", "N", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "self", ".", "_device", ")", "\n", "return", "self", ".", "_cache", "[", "idf", "]", "[", "\n", "perm", "[", "0", ":", "random_subset", "]", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.utils.data.DataSet.__repr__": [[596, 601], ["None"], "methods", ["None"], ["", "", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "s", "=", "\"Virtual dataset with {} datapoints | {} | {}\"", ".", "format", "(", "\n", "self", ".", "N", ",", "self", ".", "label", ",", "self", ".", "identifier", "\n", ")", "\n", "return", "s", "\n", "", "", ""]], "home.repos.pwc.inspect_result.bdevl_SMO.utils.conversions.Convert_ScipySparse_PyTorchSparse": [[4, 19], ["A.tocoo.tocoo", "torch.tensor", "torch.tensor", "torch.tensor", "torch.cat", "torch.sparse_coo_tensor", "torch.tensor.unsqueeze", "torch.tensor.unsqueeze"], "function", ["None"], ["def", "Convert_ScipySparse_PyTorchSparse", "(", "A", ",", "dtype", ",", "device", "=", "None", ")", ":", "\n", "\n", "    ", "\"\"\"\n    Convert any scipy sparse matrix to PyTorch sparse matrix with specified dtype and (optionally) device\n    \"\"\"", "\n", "\n", "A", "=", "A", ".", "tocoo", "(", ")", "\n", "\n", "A_rows", "=", "torch", ".", "tensor", "(", "A", ".", "row", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "A_cols", "=", "torch", ".", "tensor", "(", "A", ".", "col", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "A_data", "=", "torch", ".", "tensor", "(", "A", ".", "data", ",", "dtype", "=", "dtype", ")", "\n", "\n", "indices", "=", "torch", ".", "cat", "(", "(", "A_rows", ".", "unsqueeze", "(", "0", ")", ",", "A_cols", ".", "unsqueeze", "(", "0", ")", ")", ",", "0", ")", "\n", "\n", "return", "torch", ".", "sparse_coo_tensor", "(", "indices", ",", "A_data", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.bdevl_SMO.utils.time.StopWatch.__init__": [[7, 14], ["time.StopWatch.start"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.utils.time.StopWatch.start"], ["    ", "def", "__init__", "(", "self", ",", "start", "=", "True", ")", ":", "\n", "\n", "        ", "self", ".", "_t1", "=", "None", "\n", "self", ".", "_t2", "=", "None", "\n", "\n", "if", "start", ":", "\n", "            ", "self", ".", "start", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.utils.time.StopWatch.start": [[15, 17], ["time.time"], "methods", ["None"], ["", "", "def", "start", "(", "self", ")", ":", "\n", "        ", "self", ".", "_t1", "=", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.utils.time.StopWatch.stop": [[18, 20], ["time.time"], "methods", ["None"], ["", "def", "stop", "(", "self", ")", ":", "\n", "        ", "self", ".", "_t2", "=", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.utils.time.StopWatch.runtime": [[21, 23], ["None"], "methods", ["None"], ["", "def", "runtime", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_t2", "-", "self", ".", "_t1", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.utils.time.StopWatch.runtime_str": [[24, 26], ["str", "datetime.datetime.timedelta", "time.StopWatch.runtime"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.Log.runtime"], ["", "def", "runtime_str", "(", "self", ")", ":", "\n", "        ", "return", "str", "(", "timedelta", "(", "seconds", "=", "self", ".", "runtime", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.utils.time.Timer.__init__": [[29, 40], ["datetime.datetime.datetime.now", "time.time", "dict"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "NumSteps", ")", ":", "\n", "\n", "        ", "self", ".", "_start", "=", "datetime", ".", "now", "(", ")", "\n", "self", ".", "_t1", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "_NumSteps", "=", "NumSteps", "\n", "\n", "self", ".", "_stop_stime", "=", "None", "\n", "\n", "self", ".", "_threads", "=", "dict", "(", ")", "\n", "self", ".", "_thread_start_time", "=", "None", "\n", "self", ".", "_active_thread", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.utils.time.Timer.__call__": [[41, 51], ["time.time"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "thread", ")", ":", "\n", "\n", "# init, if necessary", "\n", "        ", "if", "thread", "not", "in", "self", ".", "_threads", ":", "\n", "            ", "self", ".", "_threads", "[", "thread", "]", "=", "0", "\n", "\n", "", "self", ".", "_active_thread", "=", "thread", "\n", "self", ".", "_thread_start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.utils.time.Timer._rrt": [[52, 63], ["time.time"], "methods", ["None"], ["", "def", "_rrt", "(", "self", ",", "step", ")", ":", "\n", "\n", "        ", "if", "step", "==", "0", ":", "\n", "# dirty fix", "\n", "            ", "step", "=", "0.0001", "\n", "\n", "", "fraction", "=", "step", "/", "self", ".", "_NumSteps", "\n", "curr_runtime", "=", "time", ".", "time", "(", ")", "-", "self", ".", "_t1", "\n", "projected_runtime", "=", "(", "1", "/", "fraction", ")", "*", "curr_runtime", "\n", "remaining_runtime", "=", "projected_runtime", "-", "curr_runtime", "\n", "return", "remaining_runtime", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.utils.time.Timer.stop": [[64, 67], ["datetime.datetime.datetime.now"], "methods", ["None"], ["", "def", "stop", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "_stop_time", "=", "datetime", ".", "now", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.utils.time.Timer.RRT": [[68, 79], ["datetime.datetime.timedelta", "print", "time.Timer._rrt"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.utils.time.Timer._rrt"], ["", "def", "RRT", "(", "self", ",", "step", ",", "verbose", "=", "False", ")", ":", "\n", "\n", "        ", "td", "=", "timedelta", "(", "seconds", "=", "self", ".", "_rrt", "(", "step", ")", ")", "\n", "runtime", "=", "\"{:d} Days, {:02d}h:{:02d}m:{:02d}s\"", ".", "format", "(", "\n", "td", ".", "days", ",", "td", ".", "seconds", "//", "3600", ",", "(", "td", ".", "seconds", "//", "60", ")", "%", "60", ",", "td", ".", "seconds", "%", "60", "\n", ")", "\n", "\n", "if", "verbose", ":", "\n", "            ", "print", "(", "\"Estimated Remaining runtime: \"", "+", "runtime", ")", "\n", "\n", "", "return", "runtime", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.utils.time.Timer.ETA": [[80, 84], ["eta.strftime", "datetime.datetime.timedelta", "datetime.datetime.datetime.now", "time.Timer._rrt"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.utils.time.Timer._rrt"], ["", "def", "ETA", "(", "self", ",", "step", ")", ":", "\n", "\n", "        ", "eta", "=", "timedelta", "(", "seconds", "=", "self", ".", "_rrt", "(", "step", ")", ")", "+", "datetime", ".", "now", "(", ")", "\n", "return", "eta", ".", "strftime", "(", "\"ETA: %d.%m.%Y, %H:%M:%S\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.utils.time.Timer.__enter__": [[85, 87], ["time.Timer."], "methods", ["None"], ["", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "self", "(", "\"default\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.utils.time.Timer.__exit__": [[88, 92], ["print", "time.time"], "methods", ["None"], ["", "def", "__exit__", "(", "self", ",", "exc_type", ",", "exc_val", ",", "exc_tb", ")", ":", "\n", "        ", "print", "(", "\"Exiting timer\"", ")", "\n", "self", ".", "_threads", "[", "self", ".", "_active_thread", "]", "+=", "time", ".", "time", "(", ")", "-", "self", ".", "_thread_start_time", "\n", "self", ".", "_active_thread", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.utils.time.Timer._construct_table": [[93, 103], ["prettytable.PrettyTable", "prettytable.PrettyTable.add_row", "time.Timer._threads.items", "prettytable.PrettyTable.add_row", "datetime.datetime.datetime.now"], "methods", ["None"], ["", "def", "_construct_table", "(", "self", ",", "OrderByExecutionTime", "=", "True", ")", ":", "\n", "\n", "        ", "T", "=", "PrettyTable", "(", ")", "\n", "T", ".", "field_names", "=", "[", "\"Job\"", ",", "\"Runtime\"", ",", "\"Fraction\"", "]", "\n", "T", ".", "add_row", "(", "[", "\"Overall\"", ",", "datetime", ".", "now", "(", ")", ",", "1", "]", ")", "\n", "\n", "for", "thread", ",", "runtime", "in", "self", ".", "_threads", ".", "items", "(", ")", ":", "\n", "            ", "T", ".", "add_row", "(", "[", "thread", ",", "runtime", ",", "runtime", "/", "10", "]", ")", "\n", "\n", "", "return", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.utils.time.Timer.__str__": [[104, 107], ["time.Timer._construct_table().get_string", "time.Timer._construct_table"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.utils.time.Timer._construct_table"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "\n", "        ", "return", "self", ".", "_construct_table", "(", ")", ".", "get_string", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.bdevl_SMO.utils.database.PoolTracker.__init__": [[12, 16], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "futures", ")", ":", "\n", "\n", "        ", "self", ".", "_futures", "=", "futures", "\n", "self", ".", "_done", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.utils.database.PoolTracker.wait": [[17, 45], ["time.time", "len", "sum", "print", "print", "time.sleep", "future.done", "time.time"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.parallel.utils.DummyFuture.done"], ["", "def", "wait", "(", "self", ",", "verbose", "=", "True", ",", "T_SLEEP_INTERVAL", "=", "5", ")", ":", "\n", "\n", "        ", "t_start", "=", "time", ".", "time", "(", ")", "\n", "finished_computation", "=", "False", "\n", "num_futures", "=", "len", "(", "self", ".", "_futures", ")", "\n", "\n", "while", "not", "finished_computation", ":", "\n", "            ", "N_finished", "=", "sum", "(", "[", "future", ".", "done", "(", ")", "for", "future", "in", "self", ".", "_futures", "]", ")", "\n", "if", "verbose", ":", "\n", "\n", "                ", "if", "N_finished", "==", "0", ":", "\n", "                    ", "T_remaining", "=", "\"(unknown)\"", "\n", "", "else", ":", "\n", "                    ", "T", "=", "time", ".", "time", "(", ")", "-", "t_start", "\n", "avg_time_per_future", "=", "T", "/", "N_finished", "\n", "T_remaining", "=", "(", "num_futures", "-", "N_finished", ")", "*", "avg_time_per_future", "\n", "\n", "", "print", "(", "\n", "\"{} / {} futures have finished | Remaining time: {} seconds\"", ".", "format", "(", "\n", "N_finished", ",", "num_futures", ",", "T_remaining", "\n", ")", "\n", ")", "\n", "\n", "", "if", "N_finished", "==", "num_futures", ":", "\n", "                ", "print", "(", "\"All futures have finished!\"", ")", "\n", "finished_computation", "=", "True", "\n", "", "else", ":", "\n", "                ", "time", ".", "sleep", "(", "T_SLEEP_INTERVAL", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.utils.database.ParallelStudyPoolBoy.__init__": [[53, 64], ["len"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "futures", ",", "future_keys", ",", "ps", ")", ":", "\n", "\n", "        ", "self", ".", "_futures", "=", "futures", "\n", "self", ".", "_future_keys", "=", "future_keys", "\n", "self", ".", "_ps", "=", "ps", "\n", "self", ".", "_N_total", "=", "len", "(", "self", ".", "_futures", ")", "\n", "self", ".", "_N_failed", "=", "0", "\n", "self", ".", "_N_finished", "=", "0", "\n", "self", ".", "_N_remaining", "=", "self", ".", "_N_total", "\n", "self", ".", "_delta_finished", "=", "False", "\n", "self", ".", "_t_start", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.utils.database.ParallelStudyPoolBoy.ps": [[65, 68], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "ps", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_ps", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.utils.database.ParallelStudyPoolBoy.__bool__": [[69, 71], ["None"], "methods", ["None"], ["", "def", "__bool__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_N_remaining", ">", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.utils.database.ParallelStudyPoolBoy._sleep": [[72, 74], ["time.sleep"], "methods", ["None"], ["", "def", "_sleep", "(", "self", ",", "mtime", ")", ":", "\n", "        ", "time", ".", "sleep", "(", "mtime", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.utils.database.ParallelStudyPoolBoy.wait_for_results": [[75, 105], ["time.time", "database.ParallelStudyPoolBoy.check", "database.ParallelStudyPoolBoy._ps.save", "print", "database.ParallelStudyPoolBoy._sleep", "time.time"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.SMO.factories.CaseFactory.check", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.Log.save", "home.repos.pwc.inspect_result.bdevl_SMO.utils.database.ParallelStudyPoolBoy._sleep"], ["", "def", "wait_for_results", "(", "\n", "self", ",", "T_SLEEP_INTERVAL", ",", "path", "=", "None", ",", "verbose", "=", "True", ",", "intermediate_save", "=", "True", "\n", ")", ":", "\n", "\n", "        ", "self", ".", "_t_start", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "path", "is", "None", ":", "\n", "            ", "path", "=", "\"results_temporary\"", "\n", "\n", "", "while", "self", ":", "\n", "\n", "            ", "self", ".", "check", "(", "path", ",", "intermediate_save", ")", "\n", "\n", "if", "intermediate_save", "and", "self", ".", "_delta_finished", ":", "\n", "# save intermediate results if new jobs have finished", "\n", "                ", "self", ".", "_ps", ".", "save", "(", "path", ")", "\n", "self", ".", "_delta_finished", "=", "False", "\n", "\n", "", "if", "verbose", ":", "\n", "                ", "print", "(", "\n", "\">>>>>> {} / {} futures have finished ({} failed) [runtime = {}s] <<<<\"", ".", "format", "(", "\n", "self", ".", "_N_finished", ",", "\n", "self", ".", "_N_total", ",", "\n", "self", ".", "_N_failed", ",", "\n", "time", ".", "time", "(", ")", "-", "self", ".", "_t_start", ",", "\n", ")", "\n", ")", "\n", "\n", "", "if", "self", ".", "_N_remaining", ">", "0", ":", "\n", "                ", "self", ".", "_sleep", "(", "T_SLEEP_INTERVAL", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.utils.database.ParallelStudyPoolBoy.check": [[106, 162], ["list", "list", "list", "range", "len", "future.done", "len", "len", "len", "sorted", "isinstance", "list.append", "list.append", "list.append", "future.compute", "future.result", "database.ParallelStudyPoolBoy._ps.put_dictionary_with_key", "isinstance", "print", "database.ParallelStudyPoolBoy._ps.save", "print", "database.ParallelStudyPoolBoy._ps.notify_about_error_from_key", "time.time"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.parallel.utils.DummyFuture.done", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.Log.append", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.Log.append", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.Log.append", "home.repos.pwc.inspect_result.bdevl_SMO.parallel.utils.DummyFuture.compute", "home.repos.pwc.inspect_result.bdevl_SMO.parallel.utils.DummyFuture.result", "home.repos.pwc.inspect_result.bdevl_SMO.utils.database.ParameterStudy.put_dictionary_with_key", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.Log.save", "home.repos.pwc.inspect_result.bdevl_SMO.utils.database.ParameterStudy.notify_about_error_from_key"], ["", "", "", "def", "check", "(", "self", ",", "path", ",", "intermediate_save", ")", ":", "\n", "\n", "# iterate over all futures and check for results", "\n", "        ", "futures_to_remove", "=", "list", "(", ")", "\n", "future_keys_to_remove", "=", "list", "(", ")", "\n", "future_indeces_to_remove", "=", "list", "(", ")", "\n", "\n", "for", "ii", "in", "range", "(", "len", "(", "self", ".", "_futures", ")", ")", ":", "\n", "\n", "            ", "future", "=", "self", ".", "_futures", "[", "ii", "]", "\n", "future_key", "=", "self", ".", "_future_keys", "[", "ii", "]", "\n", "\n", "if", "future", ".", "done", "(", ")", ":", "\n", "\n", "# dummy futures will always be 'done' [Workaround]", "\n", "                ", "if", "isinstance", "(", "future", ",", "DummyFuture", ")", ":", "\n", "                    ", "future", ".", "compute", "(", ")", "\n", "\n", "", "self", ".", "_delta_finished", "=", "True", "\n", "self", ".", "_N_finished", "+=", "1", "\n", "self", ".", "_N_remaining", "-=", "1", "\n", "try", ":", "\n", "                    ", "res", "=", "future", ".", "result", "(", ")", "\n", "self", ".", "_ps", ".", "put_dictionary_with_key", "(", "res", ",", "future_key", ",", "accumulate", "=", "True", ")", "\n", "", "except", "Exception", "as", "exc", ":", "\n", "                    ", "print", "(", "\">>>ERRROR<<< Failure occured for a job: {}\"", ".", "format", "(", "exc", ")", ")", "\n", "self", ".", "_N_failed", "+=", "1", "\n", "self", ".", "_ps", ".", "notify_about_error_from_key", "(", "future_key", ",", "exc", ")", "\n", "\n", "# mark corresponding entries for removal", "\n", "", "futures_to_remove", ".", "append", "(", "future", ")", "\n", "future_keys_to_remove", ".", "append", "(", "future_key", ")", "\n", "future_indeces_to_remove", ".", "append", "(", "ii", ")", "\n", "\n", "if", "isinstance", "(", "future", ",", "DummyFuture", ")", "and", "intermediate_save", ":", "\n", "                    ", "print", "(", "\n", "\"SEQUENTIAL: >>>>>> {} / {} futures have finished ({} failed) [runtime = {}s] <<<<\"", ".", "format", "(", "\n", "self", ".", "_N_finished", ",", "\n", "self", ".", "_N_total", ",", "\n", "self", ".", "_N_failed", ",", "\n", "time", ".", "time", "(", ")", "-", "self", ".", "_t_start", ",", "\n", ")", "\n", ")", "\n", "self", ".", "_ps", ".", "save", "(", "path", ")", "\n", "self", ".", "_delta_finished", "=", "False", "\n", "\n", "", "", "", "assert", "(", "\n", "len", "(", "futures_to_remove", ")", "\n", "==", "len", "(", "future_keys_to_remove", ")", "\n", "==", "len", "(", "future_indeces_to_remove", ")", "\n", ")", "\n", "if", "futures_to_remove", ":", "\n", "\n", "            ", "for", "kk", "in", "sorted", "(", "future_indeces_to_remove", ",", "reverse", "=", "True", ")", ":", "\n", "                ", "del", "self", ".", "_futures", "[", "kk", "]", "\n", "del", "self", ".", "_future_keys", "[", "kk", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.utils.database.ParameterStudy.__init__": [[165, 177], ["dict", "list", "list", "dict", "dict", "dict", "str", "uuid.uuid4"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "_parameters", "=", "dict", "(", ")", "\n", "# ensure correct ordering for python < 3.7 by dealing with this manually", "\n", "self", ".", "_parameters_ordered", "=", "list", "(", ")", "\n", "self", ".", "_cases", "=", "list", "(", ")", "\n", "self", ".", "_data", "=", "dict", "(", ")", "\n", "\n", "self", ".", "_errors", "=", "dict", "(", ")", "\n", "\n", "self", ".", "info", "=", "dict", "(", ")", "\n", "self", ".", "_id", "=", "str", "(", "uuid", ".", "uuid4", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.utils.database.ParameterStudy.parameters": [[178, 181], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "parameters", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_parameters", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.utils.database.ParameterStudy.FromTemplate": [[182, 190], ["cls", "copy.copy", "copy.copy"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "FromTemplate", "(", "cls", ",", "ps", ")", ":", "\n", "\n", "# create empty parameter study with identical parameters as ps", "\n", "        ", "mps", "=", "cls", "(", ")", "\n", "mps", ".", "_parameters", "=", "copy", ".", "copy", "(", "ps", ".", "_parameters", ")", "\n", "mps", ".", "_parameters_ordered", "=", "copy", ".", "copy", "(", "ps", ".", "_parameters_ordered", ")", "\n", "return", "mps", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.utils.database.ParameterStudy.FromParameterStudies": [[191, 200], ["database.ParameterStudy.FromTemplate", "database.ParameterStudy.FromTemplate"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.utils.database.ParameterStudy.FromTemplate", "home.repos.pwc.inspect_result.bdevl_SMO.utils.database.ParameterStudy.FromTemplate"], ["", "@", "classmethod", "\n", "def", "FromParameterStudies", "(", "cls", ",", "studies", ",", "accumulate", "=", "True", ")", ":", "\n", "\n", "        ", "mstudy", "=", "ParameterStudy", ".", "FromTemplate", "(", "studies", "[", "0", "]", ")", "\n", "\n", "for", "study", "in", "studies", ":", "\n", "            ", "mstudy", ".", "merge", "(", "study", ",", "accumulate", "=", "accumulate", ")", "\n", "\n", "", "return", "mstudy", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.utils.database.ParameterStudy.summarize_errors": [[201, 208], ["sum", "print", "database.ParameterStudy._errors.items", "print", "len", "database.ParameterStudy._errors.values", "tuple"], "methods", ["None"], ["", "def", "summarize_errors", "(", "self", ")", ":", "\n", "\n", "        ", "num_errors", "=", "sum", "(", "[", "len", "(", "errs", ")", "for", "errs", "in", "self", ".", "_errors", ".", "values", "(", ")", "]", ")", "\n", "print", "(", "\">>> {} errors occured during computation <<< \"", ".", "format", "(", "num_errors", ")", ")", "\n", "\n", "for", "key", ",", "error", "in", "self", ".", "_errors", ".", "items", "(", ")", ":", "\n", "            ", "print", "(", "\"Key:  {} || {}\"", ".", "format", "(", "tuple", "(", "key", ")", ",", "error", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.utils.database.ParameterStudy.register_parameter": [[209, 226], ["database.ParameterStudy._parameters_ordered.append", "TypeError", "inspect.isclass", "isinstance", "RuntimeError"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.Log.append"], ["", "", "def", "register_parameter", "(", "self", ",", "param", ",", "type", ",", "finalize", "=", "False", ")", ":", "\n", "\n", "        ", "if", "not", "(", "inspect", ".", "isclass", "(", "type", ")", "or", "isinstance", "(", "type", ",", "list", ")", ")", ":", "\n", "            ", "raise", "TypeError", "(", "\n", "\"A parameter needs to be specified either as a certain class (e.g. int), a list of admissible values\"", "\n", ")", "\n", "\n", "", "if", "param", "in", "self", ".", "_parameters", ":", "\n", "            ", "if", "type", "!=", "self", ".", "_parameters", "[", "param", "]", ":", "\n", "                ", "raise", "RuntimeError", "(", "\n", "\"Trying to register parameter {}={}, but already have registered as type {}\"", ".", "format", "(", "\n", "param", ",", "type", ",", "self", ".", "_parameters", "[", "param", "]", "\n", ")", "\n", ")", "\n", "\n", "", "", "self", ".", "_parameters", "[", "param", "]", "=", "type", "\n", "self", ".", "_parameters_ordered", ".", "append", "(", "param", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.utils.database.ParameterStudy.notify_about_error_from_key": [[227, 232], ["database.ParameterStudy._errors[].append", "list"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.Log.append"], ["", "def", "notify_about_error_from_key", "(", "self", ",", "gkey", ",", "exception", ")", ":", "\n", "\n", "        ", "if", "gkey", "not", "in", "self", ".", "_errors", ":", "\n", "            ", "self", ".", "_errors", "[", "gkey", "]", "=", "list", "(", ")", "\n", "", "self", ".", "_errors", "[", "gkey", "]", ".", "append", "(", "exception", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.utils.database.ParameterStudy.merge": [[233, 260], ["database.ParameterStudy._parameters.items", "foreign_dict.items", "database.ParameterStudy._cases.append", "isinstance", "isinstance", "RuntimeError"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.Log.append"], ["", "def", "merge", "(", "self", ",", "ps", ",", "accumulate", "=", "True", ")", ":", "\n", "\n", "        ", "assert", "self", ".", "num_parameters", "==", "ps", ".", "num_parameters", "\n", "for", "key", ",", "value", "in", "self", ".", "_parameters", ".", "items", "(", ")", ":", "\n", "            ", "assert", "key", "in", "ps", ".", "_parameters", "\n", "assert", "value", "==", "ps", ".", "_parameters", "[", "key", "]", "\n", "\n", "", "for", "case", "in", "ps", ".", "_cases", ":", "\n", "            ", "if", "case", "in", "self", ".", "_cases", ":", "\n", "                ", "foreign_dict", "=", "ps", ".", "_data", "[", "case", "]", "\n", "my_dict", "=", "self", ".", "_data", "[", "case", "]", "\n", "\n", "for", "key", ",", "val", "in", "foreign_dict", ".", "items", "(", ")", ":", "\n", "                    ", "if", "key", "not", "in", "my_dict", ":", "\n", "                        ", "my_dict", "[", "key", "]", "=", "val", "\n", "", "else", ":", "\n", "                        ", "if", "accumulate", ":", "\n", "                            ", "assert", "isinstance", "(", "my_dict", "[", "key", "]", ",", "list", ")", "\n", "assert", "isinstance", "(", "foreign_dict", "[", "key", "]", ",", "list", ")", "\n", "my_dict", "[", "key", "]", "=", "my_dict", "[", "key", "]", "+", "val", "\n", "", "else", ":", "\n", "                            ", "raise", "RuntimeError", "(", "\n", "\"Cannot merge dictionaries, because there are multiple values for the same entry (and accumulate is not set to True)\"", "\n", ")", "\n", "", "", "", "", "else", ":", "\n", "                ", "self", ".", "_data", "[", "case", "]", "=", "ps", ".", "_data", "[", "case", "]", "\n", "self", ".", "_cases", ".", "append", "(", "case", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.utils.database.ParameterStudy._check_if_complete": [[261, 263], ["None"], "methods", ["None"], ["", "", "", "def", "_check_if_complete", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.utils.database.ParameterStudy.slice": [[264, 309], ["kwargs.items", "list", "list", "len", "ValueError", "database.ParameterStudy._check_parameter", "enumerate", "zip", "len", "list.append", "list.append", "ValueError", "sorted", "f", "zip"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.utils.database.ParameterStudy._check_parameter", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.Log.append", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.Log.append"], ["", "def", "slice", "(", "self", ",", "f", "=", "None", ",", "ckey", "=", "None", ",", "sort", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "dofs", "=", "self", ".", "num_parameters", "-", "len", "(", "kwargs", ")", "\n", "if", "not", "dofs", "in", "[", "1", "]", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"To create a slice, we need to specify (N-1) of all parameter values\"", "\n", ")", "\n", "\n", "", "for", "arg", ",", "kval", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "_check_parameter", "(", "arg", ",", "kval", ")", "\n", "\n", "", "matched_cases", "=", "list", "(", ")", "\n", "free_params_values", "=", "list", "(", ")", "\n", "for", "case", "in", "self", ".", "_cases", ":", "\n", "            ", "num_matches", "=", "0", "\n", "for", "index", ",", "pvalue", "in", "enumerate", "(", "case", ")", ":", "\n", "                ", "lkey", "=", "self", ".", "_parameters_ordered", "[", "index", "]", "\n", "if", "lkey", "in", "kwargs", "and", "kwargs", "[", "lkey", "]", "==", "pvalue", ":", "\n", "                    ", "num_matches", "+=", "1", "\n", "", "else", ":", "\n", "                    ", "free_param_type", "=", "self", ".", "_parameters_ordered", "[", "index", "]", "\n", "free_param_value", "=", "pvalue", "\n", "assert", "dofs", "==", "1", "\n", "", "", "if", "num_matches", "==", "len", "(", "kwargs", ")", ":", "\n", "                ", "matched_cases", ".", "append", "(", "case", ")", "\n", "free_params_values", ".", "append", "(", "free_param_value", ")", "\n", "#", "\n", "", "", "matched_data", "=", "[", "self", ".", "_data", "[", "case", "]", "for", "case", "in", "matched_cases", "]", "\n", "\n", "if", "sort", ":", "\n", "            ", "matched_data", ",", "free_params_values", "=", "zip", "(", "\n", "*", "sorted", "(", "zip", "(", "matched_data", ",", "free_params_values", ")", ",", "key", "=", "lambda", "pair", ":", "pair", "[", "1", "]", ")", "\n", ")", "\n", "\n", "", "if", "ckey", "is", "not", "None", ":", "\n", "            ", "if", "f", "is", "not", "None", ":", "\n", "                ", "raise", "ValueError", "(", "'Can either provide \"ckey\" or function, not both'", ")", "\n", "", "matched_data", "=", "[", "data", "[", "ckey", "]", "for", "data", "in", "matched_data", "]", "\n", "\n", "return", "free_params_values", ",", "matched_data", "\n", "\n", "", "if", "f", "is", "not", "None", ":", "\n", "            ", "return", "free_params_values", ",", "[", "f", "(", "mdict", ")", "for", "mdict", "in", "matched_data", "]", "\n", "\n", "", "return", "free_params_values", ",", "matched_data", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.utils.database.ParameterStudy.num_parameters": [[310, 313], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_parameters", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_parameters", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.utils.database.ParameterStudy.finalize_parameters": [[314, 316], ["None"], "methods", ["None"], ["", "def", "finalize_parameters", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.utils.database.ParameterStudy.get_global_key": [[317, 319], ["database.ParameterStudy._get_global_key"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.utils.database.ResultsDatabase._get_global_key"], ["", "def", "get_global_key", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "_get_global_key", "(", "StringRepresentation", "=", "False", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.utils.database.ParameterStudy._get_global_key": [[320, 350], ["kwargs.items", "database.ParameterStudy._check_parameter", "KeyError", "list", "tuple", "enumerate", "len", "len", "tuple.append", "len"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.utils.database.ParameterStudy._check_parameter", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.Log.append"], ["", "def", "_get_global_key", "(", "self", ",", "StringRepresentation", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "\n", "# assert that every specified parameter has been registered", "\n", "        ", "for", "arg", ",", "kval", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "_check_parameter", "(", "arg", ",", "kval", ")", "\n", "\n", "# assert that key is unique", "\n", "", "if", "not", "len", "(", "kwargs", ")", "==", "len", "(", "self", ".", "_parameters", ")", ":", "\n", "            ", "raise", "KeyError", "(", "\n", "\"The specified key ({}) does not contain all registered parameters\"", ".", "format", "(", "\n", "kwargs", "\n", ")", "\n", ")", "\n", "\n", "", "if", "not", "StringRepresentation", ":", "\n", "            ", "gkey", "=", "list", "(", ")", "\n", "# by iterating over self._parameters_ordered, also for < Python 3.7", "\n", "for", "key", "in", "self", ".", "_parameters_ordered", ":", "\n", "                ", "gkey", ".", "append", "(", "kwargs", "[", "key", "]", ")", "\n", "# turn into tuple (hashable object for data dict)", "\n", "", "gkey", "=", "tuple", "(", "gkey", ")", "\n", "", "else", ":", "\n", "            ", "gkey", "=", "\"\"", "\n", "# by iterating over self._parameters, it is always in the same order", "\n", "for", "i", ",", "key", "in", "enumerate", "(", "self", ".", "_parameters_ordered", ")", ":", "\n", "                ", "gkey", "+=", "\"{}_{}\"", ".", "format", "(", "key", ",", "kwargs", "[", "key", "]", ")", "\n", "if", "not", "i", "==", "len", "(", "kwargs", ")", "-", "1", ":", "\n", "                    ", "gkey", "+=", "\"_\"", "\n", "\n", "", "", "", "return", "gkey", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.utils.database.ParameterStudy._check_parameter": [[351, 379], ["isinstance", "KeyError", "inspect.isclass", "KeyError", "Exception", "tuple", "isinstance", "KeyError", "database.ParameterStudy._parameters.keys"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.lamp.metrics.MetricEnsemble.keys"], ["", "def", "_check_parameter", "(", "self", ",", "param", ",", "value", ")", ":", "\n", "\n", "        ", "if", "not", "param", "in", "self", ".", "_parameters", ":", "\n", "            ", "raise", "KeyError", "(", "\n", "\"Parameter {} has not been registered. We only accept {}\"", ".", "format", "(", "\n", "param", ",", "tuple", "(", "self", ".", "_parameters", ".", "keys", "(", ")", ")", "\n", ")", "\n", ")", "\n", "\n", "", "type", "=", "self", ".", "_parameters", "[", "param", "]", "\n", "if", "isinstance", "(", "type", ",", "list", ")", ":", "\n", "            ", "if", "not", "value", "in", "type", ":", "\n", "                ", "raise", "KeyError", "(", "\n", "\"The parameter {}={} does not comply with the specified type of the parameter ({})\"", ".", "format", "(", "\n", "param", ",", "value", ",", "type", "\n", ")", "\n", ")", "\n", "", "", "elif", "inspect", ".", "isclass", "(", "type", ")", ":", "\n", "            ", "if", "not", "isinstance", "(", "value", ",", "type", ")", ":", "\n", "                ", "raise", "KeyError", "(", "\n", "\"The parameter {}={} does not comply with the specified type of the parameter ({})\"", ".", "format", "(", "\n", "param", ",", "value", ",", "type", "\n", ")", "\n", ")", "\n", "", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "\n", "\"Seems like the programmer screwed up. Parameter {} of type {} should never have been able to be registered\"", ".", "format", "(", "\n", "param", ",", "type", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.utils.database.ParameterStudy.put_dictionary_with_key": [[382, 386], ["mdict.items", "database.ParameterStudy.put_with_key"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.utils.database.ParameterStudy.put_with_key"], ["", "", "def", "put_dictionary_with_key", "(", "self", ",", "mdict", ",", "gkey", ",", "accumulate", "=", "False", ")", ":", "\n", "\n", "        ", "for", "key", ",", "value", "in", "mdict", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "put_with_key", "(", "key", ",", "value", ",", "gkey", ",", "accumulate", "=", "accumulate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.utils.database.ParameterStudy.put_dictionary": [[387, 391], ["mdict.items", "database.ParameterStudy.put"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.utils.database.ResultsDatabase.put"], ["", "", "def", "put_dictionary", "(", "self", ",", "mdict", ",", "accumulate", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "for", "key", ",", "value", "in", "mdict", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "put", "(", "key", ",", "value", ",", "accumulate", "=", "accumulate", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.utils.database.ParameterStudy.put_with_key": [[392, 407], ["dict", "database.ParameterStudy._cases.append", "[].append"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.Log.append", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.Log.append"], ["", "", "def", "put_with_key", "(", "self", ",", "name", ",", "value", ",", "gkey", ",", "accumulate", "=", "False", ")", ":", "\n", "\n", "        ", "if", "gkey", "not", "in", "self", ".", "_data", ":", "\n", "            ", "self", ".", "_data", "[", "gkey", "]", "=", "dict", "(", ")", "\n", "\n", "", "if", "gkey", "not", "in", "self", ".", "_cases", ":", "\n", "            ", "self", ".", "_cases", ".", "append", "(", "gkey", ")", "\n", "\n", "", "if", "accumulate", ":", "\n", "            ", "if", "name", "in", "self", ".", "_data", "[", "gkey", "]", ":", "\n", "                ", "self", ".", "_data", "[", "gkey", "]", "[", "name", "]", ".", "append", "(", "value", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "_data", "[", "gkey", "]", "[", "name", "]", "=", "[", "value", "]", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "_data", "[", "gkey", "]", "[", "name", "]", "=", "[", "value", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.utils.database.ParameterStudy.put": [[408, 417], ["database.ParameterStudy._get_global_key", "database.ParameterStudy.put_with_key", "isinstance", "ValueError"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.utils.database.ResultsDatabase._get_global_key", "home.repos.pwc.inspect_result.bdevl_SMO.utils.database.ParameterStudy.put_with_key"], ["", "", "def", "put", "(", "self", ",", "name", ",", "value", ",", "accumulate", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "if", "not", "isinstance", "(", "name", ",", "str", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'Anything to be put into the database needs a string description. E.g. \"RelativeError\"'", "\n", ")", "\n", "\n", "", "gkey", "=", "self", ".", "_get_global_key", "(", "**", "kwargs", ")", "\n", "self", ".", "put_with_key", "(", "name", ",", "value", ",", "gkey", ",", "accumulate", "=", "accumulate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.utils.database.ParameterStudy.get": [[418, 443], ["database.ParameterStudy._get_global_key", "isinstance", "KeyError", "KeyError", "KeyError", "len"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.utils.database.ResultsDatabase._get_global_key"], ["", "def", "get", "(", "self", ",", "name", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "if", "not", "isinstance", "(", "name", ",", "str", ")", ":", "\n", "            ", "raise", "KeyError", "(", "\n", "\"Quantity to be retrieved from database must be specified by a string\"", "\n", ")", "\n", "\n", "", "gkey", "=", "self", ".", "_get_global_key", "(", "**", "kwargs", ")", "\n", "\n", "if", "gkey", "not", "in", "self", ".", "_data", ":", "\n", "            ", "raise", "KeyError", "(", "\"{} does not contain a data record\"", ".", "format", "(", "gkey", ")", ")", "\n", "\n", "", "if", "name", "not", "in", "self", ".", "_data", "[", "gkey", "]", ":", "\n", "            ", "raise", "KeyError", "(", "\n", "\"{} has not been recorded for parameter combination {}\"", ".", "format", "(", "\n", "name", ",", "gkey", "\n", ")", "\n", ")", "\n", "\n", "", "r", "=", "self", ".", "_data", "[", "gkey", "]", "[", "name", "]", "\n", "\n", "if", "len", "(", "r", ")", "==", "1", ":", "\n", "            ", "r", "=", "r", "[", "0", "]", "\n", "\n", "", "return", "r", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.utils.database.ParameterStudy.save": [[444, 448], ["open", "open.write", "open.close", "pickle.dumps"], "methods", ["None"], ["", "def", "save", "(", "self", ",", "path", ")", ":", "\n", "        ", "file", "=", "open", "(", "path", "+", "\".pickle\"", ",", "\"wb\"", ")", "\n", "file", ".", "write", "(", "pickle", ".", "dumps", "(", "self", ".", "__dict__", ")", ")", "\n", "file", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.utils.database.ParameterStudy.load": [[449, 454], ["open", "open.read", "open.close", "pickle.loads"], "methods", ["None"], ["", "def", "load", "(", "self", ",", "path", ")", ":", "\n", "        ", "file", "=", "open", "(", "path", "+", "\".pickle\"", ",", "\"rb\"", ")", "\n", "dataPickle", "=", "file", ".", "read", "(", ")", "\n", "file", ".", "close", "(", ")", "\n", "self", ".", "__dict__", "=", "pickle", ".", "loads", "(", "dataPickle", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.utils.database.ParameterStudy.FromFile": [[455, 460], ["cls", "cls.load"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.lamp.modules.BaseModule.load"], ["", "@", "classmethod", "\n", "def", "FromFile", "(", "cls", ",", "path", ")", ":", "\n", "        ", "database", "=", "cls", "(", ")", "\n", "database", ".", "load", "(", "path", ")", "\n", "return", "database", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.utils.database.ParameterStudy.__repr__": [[461, 469], ["database.ParameterStudy._parameters.items"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "\n", "        ", "s", "=", "\"------------------------------ \\n\"", "\n", "s", "+=", "\"Registered parameters: \\n\"", "\n", "for", "item", ",", "values", "in", "self", ".", "_parameters", ".", "items", "(", ")", ":", "\n", "            ", "s", "+=", "\"{} ----- {} \\n\"", ".", "format", "(", "item", ",", "values", ")", "\n", "", "s", "+=", "\"------------------------------ \\n\"", "\n", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.utils.database.ResultsDatabase.__init__": [[472, 477], ["dict", "dict"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "max_values", "=", "2", ")", ":", "\n", "\n", "        ", "self", ".", "_dicts", "=", "dict", "(", ")", "\n", "self", ".", "_max_values", "=", "max_values", "\n", "self", ".", "_parameters", "=", "dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.utils.database.ResultsDatabase._get_global_key": [[478, 486], ["enumerate", "kwargs.items", "len"], "methods", ["None"], ["", "def", "_get_global_key", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "gkey", "=", "\"\"", "\n", "for", "i", ",", "(", "key", ",", "value", ")", "in", "enumerate", "(", "kwargs", ".", "items", "(", ")", ")", ":", "\n", "            ", "gkey", "+=", "\"{}_{}\"", ".", "format", "(", "key", ",", "value", ")", "\n", "if", "not", "i", "==", "len", "(", "kwargs", ")", "-", "1", ":", "\n", "                ", "gkey", "+=", "\"_\"", "\n", "", "", "return", "gkey", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.utils.database.ResultsDatabase.num_registered_parameters": [[487, 490], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_registered_parameters", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_parameters", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.utils.database.ResultsDatabase._getdict": [[491, 508], ["database.ResultsDatabase._get_global_key", "dict", "kwargs.items", "KeyError", "list", "database.ResultsDatabase._parameters[].append"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.utils.database.ResultsDatabase._get_global_key", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.Log.append"], ["", "def", "_getdict", "(", "self", ",", "retrieve", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "gkey", "=", "self", ".", "_get_global_key", "(", "**", "kwargs", ")", "\n", "\n", "if", "gkey", "not", "in", "self", ".", "_dicts", "and", "not", "retrieve", ":", "\n", "            ", "self", ".", "_dicts", "[", "gkey", "]", "=", "dict", "(", ")", "\n", "\n", "for", "key", ",", "value", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "                ", "if", "key", "not", "in", "self", ".", "_parameters", ":", "\n", "                    ", "self", ".", "_parameters", "[", "key", "]", "=", "list", "(", ")", "\n", "", "if", "value", "not", "in", "self", ".", "_parameters", "[", "key", "]", ":", "\n", "                    ", "self", ".", "_parameters", "[", "key", "]", ".", "append", "(", "value", ")", "\n", "\n", "", "", "", "elif", "gkey", "not", "in", "self", ".", "_dicts", "and", "retrieve", ":", "\n", "            ", "raise", "KeyError", "(", "\"Entry not found in ResultsDatabase\"", ")", "\n", "\n", "", "return", "self", ".", "_dicts", "[", "gkey", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.utils.database.ResultsDatabase.check_exists": [[509, 511], ["database.ResultsDatabase._get_global_key"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.utils.database.ResultsDatabase._get_global_key"], ["", "def", "check_exists", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "_get_global_key", "(", "**", "kwargs", ")", "in", "self", ".", "_dicts", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.utils.database.ResultsDatabase.mark_complete": [[512, 515], ["database.ResultsDatabase._getdict"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.utils.database.ResultsDatabase._getdict"], ["", "def", "mark_complete", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "d", "=", "self", ".", "_getdict", "(", "retrieve", "=", "True", ",", "**", "kwargs", ")", "\n", "d", "[", "\"_is_completed_\"", "]", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.utils.database.ResultsDatabase.check_complete": [[516, 523], ["database.ResultsDatabase._getdict"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.utils.database.ResultsDatabase._getdict"], ["", "def", "check_complete", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "d", "=", "self", ".", "_getdict", "(", "retrieve", "=", "True", ",", "**", "kwargs", ")", "\n", "\n", "if", "\"is_completed_\"", "in", "d", "and", "d", "[", "\"_is_completed_\"", "]", ":", "\n", "            ", "return", "True", "\n", "", "else", ":", "\n", "            ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.utils.database.ResultsDatabase.Storinator": [[524, 529], ["database.ResultsDatabase.put"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.utils.database.ResultsDatabase.put"], ["", "", "def", "Storinator", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "def", "f", "(", "key", ",", "value", ")", ":", "\n", "            ", "self", ".", "put", "(", "key", ",", "value", ",", "**", "kwargs", ")", "\n", "\n", "", "return", "f", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.utils.database.ResultsDatabase.put": [[530, 533], ["database.ResultsDatabase._getdict"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.utils.database.ResultsDatabase._getdict"], ["", "def", "put", "(", "self", ",", "key", ",", "value", ",", "**", "kwargs", ")", ":", "\n", "        ", "d", "=", "self", ".", "_getdict", "(", "**", "kwargs", ")", "\n", "d", "[", "key", "]", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.utils.database.ResultsDatabase.accumulate": [[534, 554], ["kwargs.items", "list", "kwargs.items", "len", "list.append", "database.ResultsDatabase.Storinator.f"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.Log.append"], ["", "def", "accumulate", "(", "self", ",", "mkey", ",", "f", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "for", "key", ",", "value", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "            ", "assert", "key", "in", "self", ".", "_parameters", "\n", "assert", "value", "in", "self", ".", "_parameters", "[", "key", "]", "\n", "\n", "", "results", "=", "list", "(", ")", "\n", "for", "skey", "in", "self", ".", "_dicts", ":", "\n", "            ", "counter", "=", "0", "\n", "for", "key_", ",", "value_", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "                ", "lkey", "=", "\"{}_{}\"", ".", "format", "(", "key_", ",", "value_", ")", "\n", "if", "lkey", "in", "skey", ":", "\n", "                    ", "counter", "+=", "1", "\n", "", "", "if", "counter", "==", "len", "(", "kwargs", ")", ":", "\n", "                ", "results", ".", "append", "(", "self", ".", "_dicts", "[", "skey", "]", "[", "mkey", "]", ")", "\n", "\n", "", "", "if", "f", "is", "not", "None", ":", "\n", "            ", "results", "=", "[", "f", "(", "m", ")", "for", "m", "in", "results", "]", "\n", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.utils.database.ResultsDatabase.get": [[555, 558], ["database.ResultsDatabase._getdict"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.utils.database.ResultsDatabase._getdict"], ["", "def", "get", "(", "self", ",", "key", ",", "**", "kwargs", ")", ":", "\n", "        ", "d", "=", "self", ".", "_getdict", "(", "retrieve", "=", "True", ",", "**", "kwargs", ")", "\n", "return", "d", "[", "key", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.utils.database.ResultsDatabase.save": [[559, 563], ["open", "open.write", "open.close", "pickle.dumps"], "methods", ["None"], ["", "def", "save", "(", "self", ",", "path", ")", ":", "\n", "        ", "file", "=", "open", "(", "path", "+", "\".pickle\"", ",", "\"wb\"", ")", "\n", "file", ".", "write", "(", "pickle", ".", "dumps", "(", "self", ".", "__dict__", ")", ")", "\n", "file", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.utils.database.ResultsDatabase.load": [[564, 569], ["open", "open.read", "open.close", "pickle.loads"], "methods", ["None"], ["", "def", "load", "(", "self", ",", "path", ")", ":", "\n", "        ", "file", "=", "open", "(", "path", "+", "\".pickle\"", ",", "\"rb\"", ")", "\n", "dataPickle", "=", "file", ".", "read", "(", ")", "\n", "file", ".", "close", "(", ")", "\n", "self", ".", "__dict__", "=", "pickle", ".", "loads", "(", "dataPickle", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.utils.database.ResultsDatabase.FromFile": [[570, 574], ["cls", "cls.load"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.lamp.modules.BaseModule.load"], ["", "@", "classmethod", "\n", "def", "FromFile", "(", "cls", ",", "path", ")", ":", "\n", "        ", "database", "=", "cls", "(", ")", "\n", "return", "database", ".", "load", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.utils.database.ResultsDatabase.__repr__": [[575, 583], ["database.ResultsDatabase._parameters.items"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "\n", "        ", "s", "=", "\"------------------------------ \\n\"", "\n", "s", "+=", "\"Registered parameters: \\n\"", "\n", "for", "item", ",", "values", "in", "self", ".", "_parameters", ".", "items", "(", ")", ":", "\n", "            ", "s", "+=", "\"{} ----- {} \\n\"", ".", "format", "(", "item", ",", "values", ")", "\n", "", "s", "+=", "\"------------------------------ \\n\"", "\n", "return", "s", "\n", "", "", ""]], "home.repos.pwc.inspect_result.bdevl_SMO.lamp.variational.VariationalApproximation.__init__": [[7, 15], ["lamp.modules.BaseModule.__init__"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "N", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "_dim", "=", "dim", "\n", "self", ".", "_N", "=", "N", "\n", "\n", "self", ".", "_data_hash", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.lamp.variational.VariationalApproximation._create_pt_distribution": [[16, 19], ["None"], "methods", ["None"], ["", "def", "_create_pt_distribution", "(", "self", ")", ":", "\n", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.lamp.variational.VariationalApproximation._create_pt_distribution_indexed": [[20, 23], ["None"], "methods", ["None"], ["", "def", "_create_pt_distribution_indexed", "(", "self", ",", "indeces", ")", ":", "\n", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.lamp.variational.VariationalApproximation.LogEvaluate": [[24, 32], ["variational.VariationalApproximation.log_prob", "variational.VariationalApproximation._create_pt_distribution", "variational.VariationalApproximation._create_pt_distribution_indexed"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.lamp.variational.LowRankMultivariateNormal._create_pt_distribution", "home.repos.pwc.inspect_result.bdevl_SMO.lamp.variational.LowRankMultivariateNormal._create_pt_distribution_indexed"], ["", "def", "LogEvaluate", "(", "self", ",", "X", ",", "indeces", "=", "None", ")", ":", "\n", "\n", "        ", "if", "indeces", "is", "None", ":", "\n", "            ", "q", "=", "self", ".", "_create_pt_distribution", "(", ")", "\n", "", "else", ":", "\n", "            ", "q", "=", "self", ".", "_create_pt_distribution_indexed", "(", "indeces", ")", "\n", "\n", "", "return", "q", ".", "log_prob", "(", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.lamp.variational.VariationalApproximation.register_data": [[33, 43], ["hash", "RuntimeError"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.utils.data.DataLoader.hash"], ["", "def", "register_data", "(", "self", ",", "X", "=", "None", ")", ":", "\n", "\n", "        ", "if", "X", "is", "None", ":", "\n", "            ", "return", "\n", "\n", "", "if", "self", ".", "_data_hash", "is", "None", ":", "\n", "            ", "self", ".", "_data_hash", "=", "hash", "(", "X", ")", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "\n", "\"Trying to register data to VariationalApproximation for which a datahash already exists\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.lamp.variational.VariationalApproximation.check_data": [[45, 58], ["RuntimeError", "hash", "RuntimeError"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.utils.data.DataLoader.hash"], ["", "", "def", "check_data", "(", "self", ",", "X", ",", "throw_exception", "=", "False", ")", ":", "\n", "\n", "        ", "if", "self", ".", "_data_hash", "is", "None", ":", "\n", "            ", "raise", "RuntimeError", "(", "\n", "\"No data has been registered for the VariationalApproximation\"", "\n", ")", "\n", "\n", "", "r", "=", "self", ".", "_data_hash", "==", "hash", "(", "X", ")", "\n", "\n", "if", "throw_exception", "and", "not", "r", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"The data hash does not match the tensor X\"", ")", "\n", "\n", "", "return", "r", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.lamp.variational.VariationalApproximation.N": [[59, 62], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "N", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_N", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.lamp.variational.VariationalApproximation.dim": [[63, 66], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "dim", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.lamp.variational.VariationalApproximation.sample": [[67, 70], ["variational.VariationalApproximation.rsample"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.rsample"], ["", "def", "sample", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "return", "self", ".", "rsample", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.lamp.variational.VariationalApproximation.rsample": [[71, 75], ["variational.VariationalApproximation._create_pt_distribution", "variational.VariationalApproximation.rsample"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.lamp.variational.LowRankMultivariateNormal._create_pt_distribution", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.rsample"], ["", "def", "rsample", "(", "self", ",", "num_samples", "=", "1", ")", ":", "\n", "\n", "        ", "q", "=", "self", ".", "_create_pt_distribution", "(", ")", "\n", "return", "q", ".", "rsample", "(", "num_samples", "=", "num_samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.lamp.variational.VariationalApproximation.sample_batch_component": [[76, 86], ["variational.VariationalApproximation.rsample", "variational.VariationalApproximation._create_pt_distribution_indexed", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.rsample", "home.repos.pwc.inspect_result.bdevl_SMO.lamp.variational.LowRankMultivariateNormal._create_pt_distribution_indexed"], ["", "def", "sample_batch_component", "(", "self", ",", "index", ",", "num_samples", ")", ":", "\n", "\n", "        ", "try", ":", "\n", "            ", "q", "=", "self", ".", "_create_pt_distribution_indexed", "(", "index", ")", "\n", "", "except", "NotImplementedError", "as", "e", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\n", "\"sample_batch_component() needs to implemented in child-class, because _create_pt_distribution_indexed() is not available.\"", "\n", ")", "\n", "\n", "", "return", "q", ".", "rsample", "(", "num_samples", "=", "num_samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.lamp.variational.VariationalApproximation._register_data": [[87, 89], ["None"], "methods", ["None"], ["", "def", "_register_data", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.lamp.variational.VariationalApproximation.entropy": [[90, 92], ["None"], "methods", ["None"], ["", "def", "entropy", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.lamp.variational.BaseMultivariateNormal.__init__": [[95, 97], ["variational.VariationalApproximation.__init__"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.lamp.variational.BaseMultivariateNormal.mean": [[98, 101], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "mean", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.lamp.variational.BaseMultivariateNormal.logsigma": [[102, 105], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "logsigma", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.lamp.variational.BaseMultivariateNormal.KLD": [[106, 108], ["None"], "methods", ["None"], ["", "def", "KLD", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.lamp.variational.DiagonalMultivariateNormal.__init__": [[111, 117], ["variational.VariationalApproximation.__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "N", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dim", "=", "dim", ",", "N", "=", "N", ")", "\n", "\n", "self", ".", "_logsigma", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "N", ",", "dim", ",", "requires_grad", "=", "True", ")", ")", "\n", "self", ".", "_mean", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "N", ",", "dim", ",", "requires_grad", "=", "True", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.lamp.variational.DiagonalMultivariateNormal.mean": [[118, 121], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "mean", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_mean", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.lamp.variational.DiagonalMultivariateNormal.logsigma": [[122, 125], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "logsigma", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_logsigma", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.lamp.variational.DiagonalMultivariateNormal._create_pt_distribution": [[126, 130], ["torch.distributions.Normal", "torch.distributions.Normal", "torch.distributions.Normal", "torch.distributions.Normal", "torch.exp", "torch.exp", "torch.exp", "torch.exp"], "methods", ["None"], ["", "def", "_create_pt_distribution", "(", "self", ")", ":", "\n", "\n", "        ", "return", "torch", ".", "distributions", ".", "Normal", "(", "\n", "loc", "=", "self", ".", "_mean", ",", "scale", "=", "torch", ".", "exp", "(", "self", ".", "_logsigma", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.lamp.variational.DiagonalMultivariateNormal._create_pt_distribution_indexed": [[132, 136], ["torch.distributions.Normal", "torch.distributions.Normal", "torch.distributions.Normal", "torch.distributions.Normal", "torch.exp", "torch.exp", "torch.exp", "torch.exp"], "methods", ["None"], ["", "def", "_create_pt_distribution_indexed", "(", "self", ",", "index", ")", ":", "\n", "\n", "        ", "return", "torch", ".", "distributions", ".", "Normal", "(", "\n", "loc", "=", "self", ".", "_mean", "[", "index", "]", ",", "scale", "=", "torch", ".", "exp", "(", "self", ".", "_logsigma", "[", "index", "]", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.lamp.variational.DiagonalMultivariateNormal.rsample": [[138, 146], ["variational.DiagonalMultivariateNormal._create_pt_distribution", "variational.DiagonalMultivariateNormal.rsample", "variational.DiagonalMultivariateNormal.rsample"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.lamp.variational.LowRankMultivariateNormal._create_pt_distribution", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.rsample", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.rsample"], ["", "def", "rsample", "(", "self", ",", "num_samples", "=", "1", ")", ":", "\n", "\n", "        ", "q", "=", "self", ".", "_create_pt_distribution", "(", ")", "\n", "\n", "if", "num_samples", "==", "1", ":", "\n", "            ", "return", "q", ".", "rsample", "(", ")", "\n", "", "else", ":", "\n", "            ", "return", "q", ".", "rsample", "(", "(", "num_samples", ",", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.lamp.variational.LowRankMultivariateNormal.__init__": [[149, 166], ["variational.VariationalApproximation.__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "N", ",", "M", ",", "sfactor", "=", "1", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dim", "=", "dim", ",", "N", "=", "N", ")", "\n", "\n", "batch_shape", "=", "N", "\n", "\n", "self", ".", "_loc", "=", "torch", ".", "nn", ".", "Parameter", "(", "\n", "torch", ".", "zeros", "(", "(", "batch_shape", ",", "dim", ")", ",", "requires_grad", "=", "True", ")", "\n", ")", "\n", "self", ".", "_cov_factor", "=", "torch", ".", "nn", ".", "Parameter", "(", "\n", "sfactor", "*", "torch", ".", "randn", "(", "(", "batch_shape", ",", "dim", ",", "M", ")", ",", "requires_grad", "=", "True", ")", "\n", ")", "\n", "self", ".", "_cov_log_diag", "=", "torch", ".", "nn", ".", "Parameter", "(", "\n", "torch", ".", "zeros", "(", "(", "batch_shape", ",", "dim", ")", ",", "requires_grad", "=", "True", ")", "\n", ")", "\n", "\n", "self", ".", "_M", "=", "M", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.lamp.variational.LowRankMultivariateNormal.loc": [[171, 179], ["isinstance"], "methods", ["None"], ["", "@", "loc", ".", "setter", "\n", "def", "loc", "(", "self", ",", "value", ")", ":", "\n", "\n", "        ", "assert", "isinstance", "(", "value", ",", "torch", ".", "Tensor", ")", "\n", "assert", "value", ".", "shape", "==", "self", ".", "_loc", ".", "shape", "\n", "assert", "value", ".", "dtype", "==", "self", ".", "_loc", ".", "dtype", "\n", "assert", "value", ".", "device", "==", "self", ".", "_locl", ".", "device", "\n", "self", ".", "_loc", ".", "data", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.lamp.variational.LowRankMultivariateNormal.M": [[180, 183], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "M", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_M", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.lamp.variational.LowRankMultivariateNormal._create_pt_distribution": [[184, 190], ["torch.distributions.LowRankMultivariateNormal", "torch.distributions.LowRankMultivariateNormal", "torch.distributions.LowRankMultivariateNormal", "torch.distributions.LowRankMultivariateNormal", "torch.exp", "torch.exp", "torch.exp", "torch.exp"], "methods", ["None"], ["", "def", "_create_pt_distribution", "(", "self", ")", ":", "\n", "\n", "        ", "return", "torch", ".", "distributions", ".", "LowRankMultivariateNormal", "(", "\n", "loc", "=", "self", ".", "_loc", ",", "\n", "cov_factor", "=", "self", ".", "_cov_factor", ",", "\n", "cov_diag", "=", "torch", ".", "exp", "(", "self", ".", "_cov_log_diag", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.lamp.variational.LowRankMultivariateNormal._create_pt_distribution_indexed": [[192, 198], ["torch.distributions.LowRankMultivariateNormal", "torch.distributions.LowRankMultivariateNormal", "torch.distributions.LowRankMultivariateNormal", "torch.distributions.LowRankMultivariateNormal", "torch.exp", "torch.exp", "torch.exp", "torch.exp"], "methods", ["None"], ["", "def", "_create_pt_distribution_indexed", "(", "self", ",", "indeces", ":", "torch", ".", "Tensor", ")", ":", "\n", "\n", "        ", "return", "torch", ".", "distributions", ".", "LowRankMultivariateNormal", "(", "\n", "loc", "=", "self", ".", "_loc", "[", "indeces", "]", ",", "\n", "cov_factor", "=", "self", ".", "_cov_factor", "[", "indeces", "]", ",", "\n", "cov_diag", "=", "torch", ".", "exp", "(", "self", ".", "_cov_log_diag", "[", "indeces", "]", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.lamp.variational.LowRankMultivariateNormal.rsample": [[200, 208], ["variational.LowRankMultivariateNormal.rsample", "variational.LowRankMultivariateNormal._create_pt_distribution", "variational.LowRankMultivariateNormal._create_pt_distribution_indexed"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.rsample", "home.repos.pwc.inspect_result.bdevl_SMO.lamp.variational.LowRankMultivariateNormal._create_pt_distribution", "home.repos.pwc.inspect_result.bdevl_SMO.lamp.variational.LowRankMultivariateNormal._create_pt_distribution_indexed"], ["", "def", "rsample", "(", "self", ",", "num_samples", "=", "1", ",", "indeces", "=", "None", ")", ":", "\n", "\n", "        ", "if", "indeces", "is", "None", ":", "\n", "            ", "q", "=", "self", ".", "_create_pt_distribution", "(", ")", "\n", "", "else", ":", "\n", "            ", "q", "=", "self", ".", "_create_pt_distribution_indexed", "(", "indeces", ")", "\n", "\n", "", "return", "q", ".", "rsample", "(", "(", "num_samples", ",", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.bdevl_SMO.lamp.optimization.LearningScheduleWrapper.__init__": [[6, 14], ["dict", "dict", "dict"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "create_scheduler", ",", "disable", "=", "False", ")", ":", "\n", "\n", "        ", "self", ".", "_schedulers", "=", "dict", "(", ")", "\n", "self", ".", "_optimizers", "=", "dict", "(", ")", "\n", "self", ".", "_disable", "=", "disable", "\n", "self", ".", "_counter", "=", "dict", "(", ")", "\n", "\n", "self", ".", "_create_scheduler", "=", "create_scheduler", "#", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.lamp.optimization.LearningScheduleWrapper.lock": [[15, 17], ["None"], "methods", ["None"], ["", "def", "lock", "(", "self", ")", ":", "\n", "        ", "self", ".", "_disable", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.lamp.optimization.LearningScheduleWrapper.unlock": [[18, 20], ["None"], "methods", ["None"], ["", "def", "unlock", "(", "self", ")", ":", "\n", "        ", "self", ".", "_disable", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.lamp.optimization.LearningScheduleWrapper.stepLR": [[21, 29], ["cls", "torch.optim.lr_scheduler.StepLR"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "stepLR", "(", "cls", ",", "step_size", ",", "factor", "=", "0.1", ")", ":", "\n", "        ", "def", "f", "(", "optimizer", ")", ":", "\n", "            ", "return", "torch", ".", "optim", ".", "lr_scheduler", ".", "StepLR", "(", "\n", "optimizer", ",", "step_size", "=", "step_size", ",", "gamma", "=", "factor", ",", "last_epoch", "=", "-", "1", "\n", ")", "\n", "\n", "", "return", "cls", "(", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.lamp.optimization.LearningScheduleWrapper.ReduceLROnPlateau": [[30, 49], ["cls", "torch.optim.lr_scheduler.ReduceLROnPlateau"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.lamp.optimization.LearningScheduleWrapper.ReduceLROnPlateau"], ["", "@", "classmethod", "\n", "def", "ReduceLROnPlateau", "(", "\n", "cls", ",", "patience", ",", "threshold", "=", "1e-3", ",", "factor", "=", "0.1", ",", "min_lr", "=", "1e-3", ",", "verbose", "=", "True", ",", "mode", "=", "\"max\"", "\n", ")", ":", "\n", "\n", "        ", "assert", "factor", "<", "1", "\n", "\n", "def", "f", "(", "optimizer", ")", ":", "\n", "            ", "return", "torch", ".", "optim", ".", "lr_scheduler", ".", "ReduceLROnPlateau", "(", "\n", "optimizer", "=", "optimizer", ",", "\n", "mode", "=", "mode", ",", "\n", "patience", "=", "patience", ",", "\n", "threshold", "=", "threshold", ",", "\n", "factor", "=", "factor", ",", "\n", "min_lr", "=", "min_lr", ",", "\n", "verbose", "=", "verbose", ",", "\n", ")", "\n", "\n", "", "return", "cls", "(", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.lamp.optimization.LearningScheduleWrapper.MultiStepLR": [[50, 61], ["cls", "torch.optim.lr_scheduler.MultiStepLR"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.lamp.optimization.LearningScheduleWrapper.MultiStepLR"], ["", "@", "classmethod", "\n", "def", "MultiStepLR", "(", "cls", ",", "milestones", ",", "factor", ",", "last_epoch", "=", "-", "1", ")", ":", "\n", "\n", "        ", "assert", "factor", "<", "1", "\n", "\n", "def", "f", "(", "optimizer", ")", ":", "\n", "            ", "return", "torch", ".", "optim", ".", "lr_scheduler", ".", "MultiStepLR", "(", "\n", "optimizer", ",", "milestones", "=", "milestones", ",", "gamma", "=", "factor", ",", "last_epoch", "=", "last_epoch", "\n", ")", "\n", "\n", "", "return", "cls", "(", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.lamp.optimization.LearningScheduleWrapper.Dummy": [[62, 70], ["cls", "cls.lock"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.lamp.optimization.LearningScheduleWrapper.lock"], ["", "@", "classmethod", "\n", "def", "Dummy", "(", "cls", ")", ":", "\n", "        ", "def", "f", "(", "optimizer", ")", ":", "\n", "            ", "return", "None", "\n", "\n", "", "wrapper", "=", "cls", "(", "f", ")", "\n", "wrapper", ".", "lock", "(", ")", "\n", "return", "wrapper", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.lamp.optimization.LearningScheduleWrapper.set_learning_rate_manually": [[71, 75], ["None"], "methods", ["None"], ["", "def", "set_learning_rate_manually", "(", "self", ",", "id", ",", "lr", ")", ":", "\n", "\n", "        ", "for", "param_group", "in", "self", ".", "_optimizers", "[", "id", "]", ".", "param_groups", ":", "\n", "            ", "param_group", "[", "\"lr\"", "]", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.lamp.optimization.LearningScheduleWrapper.register_optimizer": [[76, 81], ["optimization.LearningScheduleWrapper._create_scheduler"], "methods", ["None"], ["", "", "def", "register_optimizer", "(", "self", ",", "optimizer", ",", "id", "=", "\"default\"", ")", ":", "\n", "\n", "        ", "self", ".", "_schedulers", "[", "id", "]", "=", "self", ".", "_create_scheduler", "(", "optimizer", ")", "\n", "self", ".", "_optimizers", "[", "id", "]", "=", "optimizer", "\n", "self", ".", "_counter", "[", "id", "]", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.lamp.optimization.LearningScheduleWrapper.step": [[82, 109], ["isinstance", "ValueError", "numpy.mod", "optimization.LearningScheduleWrapper._schedulers[].step", "optimization.LearningScheduleWrapper._schedulers[].step", "ValueError"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.AbstractObjective.step", "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.AbstractObjective.step"], ["", "def", "step", "(", "self", ",", "id", "=", "\"default\"", ",", "N", "=", "None", ",", "N_max", "=", "None", ",", "interval", "=", "1", ",", "metric", "=", "None", ")", ":", "\n", "\n", "        ", "if", "interval", "is", "None", ":", "\n", "# legacy fix", "\n", "            ", "interval", "=", "1", "\n", "\n", "", "if", "id", "not", "in", "self", ".", "_optimizers", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'LearningScheduleWrapper does not have \"{}\" optimizer registered'", ".", "format", "(", "\n", "id", "\n", ")", "\n", ")", "\n", "\n", "", "self", ".", "_counter", "[", "id", "]", "+=", "1", "\n", "\n", "if", "self", ".", "_disable", ":", "\n", "            ", "return", "\n", "\n", "", "if", "np", ".", "mod", "(", "self", ".", "_counter", "[", "id", "]", ",", "interval", ")", "!=", "0", ":", "\n", "            ", "return", "\n", "\n", "", "if", "isinstance", "(", "self", ".", "_schedulers", "[", "id", "]", ",", "torch", ".", "optim", ".", "lr_scheduler", ".", "ReduceLROnPlateau", ")", ":", "\n", "            ", "if", "metric", "is", "None", ":", "\n", "                ", "raise", "ValueError", "(", "\"ReduceLROnPlateau requires metric\"", ")", "\n", "", "self", ".", "_schedulers", "[", "id", "]", ".", "step", "(", "metric", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_schedulers", "[", "id", "]", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.lamp.optimization.utiliy_convert_milestones": [[111, 135], ["enumerate", "zip", "print", "range", "len", "len"], "function", ["None"], ["", "", "", "def", "utiliy_convert_milestones", "(", "init_lr", ",", "milestones", ",", "factor", ",", "verbose", "=", "True", ")", ":", "\n", "\n", "    ", "learning_rates", "=", "[", "init_lr", "]", "+", "[", "\n", "init_lr", "*", "(", "factor", "**", "n", ")", "for", "n", "in", "range", "(", "len", "(", "milestones", ")", ")", "\n", "]", "\n", "milestones", "=", "[", "0", "]", "+", "milestones", "\n", "\n", "string", "=", "\" ============================== \\n\"", "\n", "for", "n", ",", "(", "milestone", ",", "lr", ")", "in", "enumerate", "(", "zip", "(", "milestones", ",", "learning_rates", ")", ")", ":", "\n", "\n", "        ", "if", "n", "<", "len", "(", "milestones", ")", "-", "1", ":", "\n", "            ", "upper", "=", "milestones", "[", "n", "+", "1", "]", "\n", "", "else", ":", "\n", "            ", "upper", "=", "\"inf\"", "\n", "\n", "", "string", "+=", "\"For epoch {0} - {1} ------ lr: {2:.4f} \\n\"", ".", "format", "(", "\n", "milestone", ",", "upper", ",", "lr", "\n", ")", "\n", "", "string", "+=", "\" ============================== \\n\"", "\n", "\n", "if", "verbose", ":", "\n", "        ", "print", "(", "string", ")", "\n", "\n", "", "return", "learning_rates", ",", "string", "\n", "", ""]], "home.repos.pwc.inspect_result.bdevl_SMO.lamp.modules.BaseModule.__init__": [[6, 9], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.lamp.modules.BaseModule.num_trainable_parameters": [[10, 17], ["sum", "parameter.numel", "modules.BaseModule.parameters"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.utils.database.ParameterStudy.parameters"], ["", "@", "property", "\n", "def", "num_trainable_parameters", "(", "self", ")", ":", "\n", "        ", "return", "sum", "(", "\n", "(", "\n", "parameter", ".", "numel", "(", ")", "\n", "for", "parameter", "in", "self", ".", "parameters", "(", ")", "\n", "if", "parameter", ".", "requires_grad", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.lamp.modules.BaseModule.num_parameters": [[20, 23], ["sum", "parameter.numel", "modules.BaseModule.parameters"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.utils.database.ParameterStudy.parameters"], ["", "@", "property", "\n", "def", "num_parameters", "(", "self", ")", ":", "\n", "        ", "return", "sum", "(", "(", "parameter", ".", "numel", "(", ")", "for", "parameter", "in", "self", ".", "parameters", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.lamp.modules.BaseModule.gradient_norm": [[24, 32], ["torch.mean", "torch.cat", "torch.norm", "modules.BaseModule.parameters"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.lamp.variational.DiagonalMultivariateNormal.mean", "home.repos.pwc.inspect_result.bdevl_SMO.utils.database.ParameterStudy.parameters"], ["", "def", "gradient_norm", "(", "self", ")", ":", "\n", "\n", "        ", "return", "torch", ".", "mean", "(", "\n", "torch", ".", "cat", "(", "\n", "[", "\n", "torch", ".", "norm", "(", "param", ".", "grad", ")", "\n", "for", "param", "in", "self", ".", "parameters", "(", ")", "\n", "if", "param", ".", "grad", "is", "not", "None", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.lamp.modules.BaseModule.gather": [[36, 50], ["modules.BaseModule.BaseModule.modules", "modules.BaseModule.BaseModule.children", "hasattr", "getattr"], "methods", ["None"], ["", "def", "gather", "(", "self", ",", "identifier", ",", "recursive", "=", "True", ")", ":", "\n", "\n", "        ", "if", "recursive", ":", "\n", "            ", "modules", "=", "self", ".", "modules", "(", ")", "\n", "", "else", ":", "\n", "            ", "modules", "=", "self", ".", "children", "(", ")", "\n", "\n", "", "q", "=", "0", "\n", "\n", "for", "module", "in", "modules", ":", "\n", "            ", "if", "hasattr", "(", "module", ",", "identifier", ")", ":", "\n", "                ", "q", "+=", "getattr", "(", "module", ",", "identifier", ")", "(", ")", "\n", "\n", "", "", "return", "q", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.lamp.modules.BaseModule.Eval": [[51, 54], ["modules.EvalWrapper"], "methods", ["None"], ["", "def", "Eval", "(", "self", ")", ":", "\n", "\n", "        ", "return", "EvalWrapper", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.lamp.modules.BaseModule.freeze": [[55, 59], ["modules.BaseModule.parameters"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.utils.database.ParameterStudy.parameters"], ["", "def", "freeze", "(", "self", ")", ":", "\n", "\n", "        ", "for", "param", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.lamp.modules.BaseModule.unfreeze": [[60, 64], ["modules.BaseModule.parameters"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.utils.database.ParameterStudy.parameters"], ["", "", "def", "unfreeze", "(", "self", ")", ":", "\n", "\n", "        ", "for", "param", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.lamp.modules.BaseModule.load": [[65, 69], ["modules.BaseModule.load_state_dict", "modules.BaseModule.train", "torch.load"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.SMO.discriminative.DiscriminativeTrainer.train", "home.repos.pwc.inspect_result.bdevl_SMO.lamp.modules.BaseModule.load"], ["", "", "def", "load", "(", "self", ",", "path", ")", ":", "\n", "\n", "        ", "self", ".", "load_state_dict", "(", "torch", ".", "load", "(", "path", ")", ")", "\n", "self", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.lamp.modules.BaseModule.save": [[70, 74], ["modules.BaseModule.state", "torch.save"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.WrapperModel.state", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.Log.save"], ["", "def", "save", "(", "self", ",", "path", ")", ":", "\n", "\n", "        ", "state", "=", "self", ".", "state", "(", ")", "\n", "torch", ".", "save", "(", "state", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.lamp.modules.BaseModule.copy_values_from": [[75, 82], ["modules.BaseModule.load_state_dict", "module.state_dict", "RuntimeError"], "methods", ["None"], ["", "def", "copy_values_from", "(", "self", ",", "module", ")", ":", "\n", "\n", "        ", "r", "=", "self", ".", "load_state_dict", "(", "module", ".", "state_dict", "(", ")", ")", "\n", "\n", "if", "r", ".", "missing_keys", "or", "r", ".", "unexpected_keys", ":", "\n", "            ", "raise", "RuntimeError", "(", "\n", "\"Copying values from one module to another did not behave as expected\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.lamp.modules.BaseModule.state": [[84, 86], ["modules.BaseModule.state_dict"], "methods", ["None"], ["", "", "def", "state", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "state_dict", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.lamp.modules.BaseModule._to": [[87, 111], ["modules.BaseModule.to", "kwargs.pop", "kwargs.pop", "lamp.utils.get_default_device", "lamp.utils.get_default_dtype", "lamp.utils.get_dtype", "lamp.utils.get_device"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.optimization.inference.LowRankVariationalInference.to", "home.repos.pwc.inspect_result.bdevl_SMO.lamp.utils.get_default_device", "home.repos.pwc.inspect_result.bdevl_SMO.lamp.utils.get_default_dtype", "home.repos.pwc.inspect_result.bdevl_SMO.lamp.utils.get_dtype", "home.repos.pwc.inspect_result.bdevl_SMO.lamp.utils.get_device"], ["", "def", "_to", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "try", ":", "\n", "            ", "dtype", "=", "kwargs", ".", "pop", "(", "\"dtype\"", ")", "\n", "\n", "if", "dtype", "is", "not", "None", ":", "\n", "                ", "dtype", "=", "get_dtype", "(", "dtype", ")", "\n", "\n", "", "", "except", "KeyError", ":", "\n", "            ", "dtype", "=", "None", "\n", "\n", "", "try", ":", "\n", "            ", "device", "=", "kwargs", ".", "pop", "(", "\"device\"", ")", "\n", "if", "device", "is", "not", "None", ":", "\n", "                ", "device", "=", "get_device", "(", "device", ")", "\n", "", "", "except", "KeyError", ":", "\n", "            ", "device", "=", "None", "\n", "\n", "", "if", "device", "is", "None", ":", "\n", "            ", "device", "=", "get_default_device", "(", ")", "\n", "", "if", "dtype", "is", "None", ":", "\n", "            ", "dtype", "=", "get_default_dtype", "(", ")", "\n", "\n", "", "self", ".", "to", "(", "dtype", "=", "dtype", ",", "device", "=", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.lamp.modules.EvalWrapper.__init__": [[114, 117], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "module", ")", ":", "\n", "        ", "self", ".", "_module", "=", "module", "\n", "self", ".", "_train_orig_state", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.lamp.modules.EvalWrapper.__enter__": [[118, 121], ["modules.EvalWrapper._module.eval"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.Kernel.eval"], ["", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "self", ".", "_train_orig_state", "=", "self", ".", "_module", ".", "training", "\n", "self", ".", "_module", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.lamp.modules.EvalWrapper.__exit__": [[122, 125], ["modules.EvalWrapper._module.train"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.SMO.discriminative.DiscriminativeTrainer.train"], ["", "def", "__exit__", "(", "self", ",", "exception_type", ",", "exception_value", ",", "traceback", ")", ":", "\n", "        ", "if", "self", ".", "_train_orig_state", ":", "\n", "            ", "self", ".", "_module", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.lamp.modules.Flattening.__init__": [[128, 130], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.lamp.modules.Flattening.forward": [[131, 133], ["X.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "X", ")", ":", "\n", "        ", "return", "X", ".", "view", "(", "X", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.bdevl_SMO.lamp.metrics.DeterministicMetric.__init__": [[5, 8], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "name", ")", ":", "\n", "\n", "        ", "self", ".", "_name", "=", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.lamp.metrics.DeterministicMetric.eval": [[9, 16], ["torch.no_grad", "X_pred.view.view.view", "X_target.view.view.view", "metrics.DeterministicMetric._eval().item", "metrics.DeterministicMetric._eval"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.lamp.metrics.CoefficientOfDetermination._eval"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "eval", "(", "self", ",", "X_pred", ",", "X_target", ")", ":", "\n", "\n", "        ", "X_pred", "=", "X_pred", ".", "view", "(", "X_pred", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "X_target", "=", "X_target", ".", "view", "(", "X_target", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "assert", "X_pred", ".", "shape", "==", "X_target", ".", "shape", "\n", "return", "self", ".", "_eval", "(", "X_pred", ",", "X_target", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.lamp.metrics.DeterministicMetric.__call__": [[17, 19], ["metrics.DeterministicMetric.eval"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.Kernel.eval"], ["", "def", "__call__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "eval", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.lamp.metrics.DeterministicMetric._eval": [[20, 22], ["None"], "methods", ["None"], ["", "def", "_eval", "(", "self", ",", "X_pred", ",", "X_target", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.lamp.metrics.DeterministicMetric.__repr__": [[23, 25], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_name", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.lamp.metrics.MetricEnsemble.__init__": [[28, 34], ["isinstance"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "metrics", ")", ":", "\n", "\n", "        ", "for", "metric", "in", "metrics", ":", "\n", "            ", "assert", "isinstance", "(", "metric", ",", "DeterministicMetric", ")", "\n", "\n", "", "self", ".", "_metrics", "=", "metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.lamp.metrics.MetricEnsemble.keys": [[35, 37], ["str"], "methods", ["None"], ["", "def", "keys", "(", "self", ")", ":", "\n", "        ", "return", "[", "str", "(", "metric", ")", "for", "metric", "in", "self", ".", "_metrics", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.lamp.metrics.MetricEnsemble.eval": [[38, 46], ["dict", "metric.eval", "str"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.Kernel.eval"], ["", "def", "eval", "(", "self", ",", "X_pred", ",", "X_target", ")", ":", "\n", "\n", "        ", "results", "=", "dict", "(", ")", "\n", "\n", "for", "metric", "in", "self", ".", "_metrics", ":", "\n", "            ", "results", "[", "str", "(", "metric", ")", "]", "=", "metric", ".", "eval", "(", "X_pred", ",", "X_target", ")", "\n", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.lamp.metrics.MSE.__init__": [[49, 52], ["metrics.DeterministicMetric.__init__"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\"Mean Squared Error\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.lamp.metrics.MSE._eval": [[53, 56], ["torch.mean"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.lamp.variational.DiagonalMultivariateNormal.mean"], ["", "def", "_eval", "(", "self", ",", "X_pred", ",", "X_target", ")", ":", "\n", "\n", "        ", "return", "torch", ".", "mean", "(", "(", "X_pred", "-", "X_target", ")", "**", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.lamp.metrics.CoefficientOfDetermination.__init__": [[59, 63], ["metrics.DeterministicMetric.__init__"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.__init__"], ["    ", "def", "__init__", "(", "self", ",", "global_average", "=", "True", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\"Coefficient of Determination\"", ")", "\n", "self", ".", "_global_average", "=", "global_average", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.lamp.metrics.CoefficientOfDetermination._eval": [[64, 79], ["torch.sum", "torch.sum", "torch.sum", "torch.sum", "y.mean", "y.mean"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.lamp.variational.DiagonalMultivariateNormal.mean", "home.repos.pwc.inspect_result.bdevl_SMO.lamp.variational.DiagonalMultivariateNormal.mean"], ["", "def", "_eval", "(", "self", ",", "X_pred", ",", "X_target", ")", ":", "\n", "\n", "        ", "y_pred", "=", "X_pred", "\n", "y", "=", "X_target", "\n", "\n", "if", "self", ".", "_global_average", ":", "\n", "# this is the implementation from torch.ignite", "\n", "            ", "e", "=", "torch", ".", "sum", "(", "(", "y", "-", "y_pred", ")", "**", "2", ")", "/", "torch", ".", "sum", "(", "(", "y", "-", "y", ".", "mean", "(", ")", ")", "**", "2", ")", "\n", "return", "1", "-", "e", "\n", "\n", "", "else", ":", "\n", "# component-wise mean", "\n", "            ", "assert", "y_pred", ".", "shape", "[", "0", "]", ">", "0", "\n", "e", "=", "torch", ".", "sum", "(", "(", "y", "-", "y_pred", ")", "**", "2", ",", "0", ")", "/", "torch", ".", "sum", "(", "(", "y", "-", "y", ".", "mean", "(", "0", ")", ")", "**", "2", ",", "0", ")", "\n", "return", "(", "1", "-", "e", ")", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.lamp.metrics.IndividualR2": [[81, 86], ["e.tolist", "torch.sum", "torch.sum", "y.mean"], "function", ["home.repos.pwc.inspect_result.bdevl_SMO.lamp.variational.DiagonalMultivariateNormal.mean"], ["", "", "", "def", "IndividualR2", "(", "Y_pred", ":", "torch", ".", "Tensor", ",", "Y_target", ":", "torch", ".", "Tensor", ")", "->", "list", ":", "\n", "\n", "    ", "y", "=", "Y_target", "\n", "e", "=", "torch", ".", "sum", "(", "(", "y", "-", "Y_pred", ")", "**", "2", ",", "0", ")", "/", "torch", ".", "sum", "(", "(", "y", "-", "y", ".", "mean", "(", "0", ")", ")", "**", "2", ",", "0", ")", "\n", "return", "e", ".", "tolist", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.bdevl_SMO.lamp.data.BatchedOverSampler.__init__": [[18, 24], ["torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["None"], ["# check compliant sizes", "\n", "", "if", "BCE", "is", "not", "None", ":", "\n", "            ", "if", "len", "(", "BCE", ")", "!=", "X", ".", "shape", "[", "0", "]", ":", "\n", "                ", "raise", "ValueError", "(", "\n", "\"It is assumed that X and boundary condition assemble should have same size ({} vs {}\"", ".", "format", "(", "\n", "X", ".", "shape", ",", "len", "(", "BCE", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.lamp.data.BatchedOverSampler.__len__": [[25, 27], ["None"], "methods", ["None"], [")", "\n", "\n", "", "", "if", "X_DG", "is", "not", "None", ":", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.lamp.data.BatchedOverSampler.__iter__": [[28, 32], ["range", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial"], "methods", ["None"], ["            ", "assert", "X", ".", "shape", "[", "0", "]", "==", "X_DG", ".", "shape", "[", "0", "]", "\n", "\n", "", "if", "Y", "is", "not", "None", ":", "\n", "            ", "assert", "Y", ".", "shape", "[", "0", "]", "==", "X", ".", "shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.lamp.data.CustomTensorDataset.__init__": [[36, 46], ["torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["None"], ["", "if", "X", ".", "device", "!=", "torch", ".", "device", "(", "\"cpu\"", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"Expect for the X tensor to reside on the GPU\"", ")", "\n", "\n", "", "self", ".", "_X", "=", "X", "\n", "self", ".", "_BCE", "=", "BCE", "\n", "self", ".", "_X_DG", "=", "X_DG", "\n", "self", ".", "_Y", "=", "Y", "\n", "self", ".", "_F_ROM_BC", "=", "F_ROM_BC", "\n", "\n", "self", ".", "_permutation", "=", "dict", "(", ")", "\n", "self", ".", "_assigned_chunks", "=", "dict", "(", ")", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.lamp.data.CustomTensorDataset.__getitem__": [[47, 55], ["tuple", "len"], "methods", ["None"], ["self", ".", "_state_indicator", "=", "dict", "(", ")", "\n", "\n", "self", ".", "_dependent_datasets", "=", "list", "(", ")", "\n", "\n", "self", ".", "_hash", "=", "hash", "\n", "\n", "self", ".", "_lock_physics_assembly", "=", "False", "\n", "\n", "", "def", "lock_physics_assembly", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.lamp.data.CustomTensorDataset.__len__": [[56, 58], ["data.CustomTensorDataset.tensors[].size"], "methods", ["None"], ["        ", "self", ".", "_lock_physics_assembly", "=", "True", "\n", "\n", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.lamp.data.CreateTorchDataloader": [[6, 15], ["enumerate", "data.CustomTensorDataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "isinstance", "torch.Tensor", "torch.Tensor"], "function", ["None"], ["from", "lamp", ".", "data", "import", "CustomTensorDataset", "\n", "from", "physics", ".", "BoundaryConditions", "import", "BoundaryConditionEnsemble", "\n", "from", "fawkes", ".", "converter", "import", "DiscontinuousGalerkinPixelConverter", "\n", "\n", "\n", "class", "DataLoader", "(", "object", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "X", ",", "X_DG", "=", "None", ",", "Y", "=", "None", ",", "BCE", "=", "None", ",", "F_ROM_BC", "=", "None", ",", "hash", "=", "None", ")", ":", "\n", "\n", "# enforce full precision", "\n", "        ", "if", "X", ".", "dtype", "!=", "torch", ".", "double", ":", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.lamp.utils.CaptureOutput.__init__": [[68, 72], ["dict", "dict"], "methods", ["None"], []], "home.repos.pwc.inspect_result.bdevl_SMO.lamp.utils.CaptureOutput.register_layer": [[73, 77], ["utils.CaptureOutput._register_hook"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.lamp.utils.CaptureOutput._register_hook"], []], "home.repos.pwc.inspect_result.bdevl_SMO.lamp.utils.CaptureOutput.__getitem__": [[78, 80], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.bdevl_SMO.lamp.utils.CaptureOutput.__call__": [[81, 87], ["len", "Exception", "list", "utils.CaptureOutput._output.keys"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.lamp.metrics.MetricEnsemble.keys"], []], "home.repos.pwc.inspect_result.bdevl_SMO.lamp.utils.CaptureOutput._register_hook": [[89, 94], ["utils.CaptureOutput._layer[].register_forward_hook", "output.detach"], "methods", ["None"], []], "home.repos.pwc.inspect_result.bdevl_SMO.lamp.utils.CaptureOutput.__repr__": [[95, 102], ["utils.CaptureOutput._output.keys"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.lamp.metrics.MetricEnsemble.keys"], []], "home.repos.pwc.inspect_result.bdevl_SMO.lamp.utils.ParameterGroup.__init__": [[105, 109], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.bdevl_SMO.lamp.utils.ParameterGroup.label": [[110, 113], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.bdevl_SMO.lamp.utils.ParameterGroup.params": [[114, 117], ["itertools.chain"], "methods", ["None"], []], "home.repos.pwc.inspect_result.bdevl_SMO.lamp.utils.ParameterGroup.__call__": [[118, 120], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.bdevl_SMO.lamp.utils.ParameterGroup.add_parameters": [[121, 129], ["utils.ParameterGroup._args.append", "ValueError"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.Log.append"], []], "home.repos.pwc.inspect_result.bdevl_SMO.lamp.utils.ParameterGroup.__repr__": [[130, 132], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.bdevl_SMO.lamp.utils.conv2d_calculate_output_size": [[8, 35], ["isinstance", "isinstance", "int", "int", "utils.conv2d_calculate_output_size", "isinstance", "utils.conv2d_calculate_output_size", "len", "conv.pop"], "function", ["home.repos.pwc.inspect_result.bdevl_SMO.lamp.utils.conv2d_calculate_output_size", "home.repos.pwc.inspect_result.bdevl_SMO.lamp.utils.conv2d_calculate_output_size"], ["self", ".", "_f", "=", "f", "\n", "self", ".", "_args", "=", "args", "\n", "self", ".", "_kwargs", "=", "kwargs", "\n", "self", ".", "_results", "=", "None", "\n", "self", ".", "_exception", "=", "None", "\n", "\n", "", "def", "compute", "(", "self", ")", ":", "\n", "\n", "        ", "if", "self", ".", "_results", "is", "None", ":", "\n", "            ", "try", ":", "\n", "                ", "self", ".", "_results", "=", "self", ".", "_f", "(", "*", "self", ".", "_args", ",", "**", "self", ".", "_kwargs", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                ", "self", ".", "_exception", "=", "e", "\n", "\n", "", "", "if", "not", "self", ".", "_catch_exceptions", "and", "self", ".", "_exception", "is", "not", "None", ":", "\n", "            ", "raise", "self", ".", "_exception", "\n", "\n", "", "", "def", "result", "(", "self", ")", ":", "\n", "\n", "        ", "if", "self", ".", "_results", "is", "None", "and", "self", ".", "_exception", "is", "None", ":", "\n", "            ", "self", ".", "compute", "(", ")", "\n", "\n", "", "if", "self", ".", "_exception", "is", "not", "None", ":", "\n", "            ", "raise", "self", ".", "_exception", "\n", "\n", "", "return", "self", ".", "_results", "\n", "\n", "", "def", "done", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.lamp.utils.fetch_device": [[37, 45], ["torch.cuda.is_available", "torch.device", "torch.device"], "function", ["home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.device", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.device"], ["\n", "\n", "", "", "class", "DummyProcessPool", "(", "object", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "MAXWORKERS", "=", "None", ",", "catch_exceptions", "=", "True", ")", ":", "\n", "\n", "        ", "if", "MAXWORKERS", "is", "not", "None", ":", "\n", "            ", "warnings", ".", "warn", "(", "\n", "\"MAXWORKERS argument supplied to Dummy Process Pool has no impact\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.lamp.utils.batch_execution": [[47, 64], ["torch.no_grad", "torch.cat", "tuple", "ValueError", "fcall", "torch.split"], "function", ["None"], ["\n", "", "def", "activate_exceptions", "(", "self", ")", ":", "\n", "        ", "self", ".", "_catch_exceptions", "=", "False", "\n", "\n", "", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "return", "self", "\n", "\n", "", "def", "__exit__", "(", "self", ",", "exc_type", ",", "exc_val", ",", "exc_tb", ")", ":", "\n", "        ", "pass", "\n", "\n", "", "def", "submit", "(", "self", ",", "f", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "return", "DummyFuture", "(", "self", ".", "_catch_exceptions", ",", "f", ",", "args", ",", "kwargs", ")", "\n", "\n", "", "def", "shutdown", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "pass", "\n", "", "", ""]], "home.repos.pwc.inspect_result.bdevl_SMO.lamp.utils.combined_parameters": [[134, 137], ["itertools.chain"], "function", ["None"], []], "home.repos.pwc.inspect_result.bdevl_SMO.lamp.utils.bimv": [[139, 143], ["torch.matmul().squeeze", "A.dim", "x.dim", "torch.matmul", "A.unsqueeze", "x.unsqueeze"], "function", ["home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.Kernel.dim", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.Kernel.dim"], []], "home.repos.pwc.inspect_result.bdevl_SMO.lamp.utils.coefficient_of_determination": [[145, 163], ["y_pred.view.dim", "y_pred.view.view", "y.view.view", "torch.sum", "torch.sum", "e.item", "torch.sum", "torch.sum", "y.view.mean", "y.view.mean"], "function", ["home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.Kernel.dim", "home.repos.pwc.inspect_result.bdevl_SMO.lamp.variational.DiagonalMultivariateNormal.mean", "home.repos.pwc.inspect_result.bdevl_SMO.lamp.variational.DiagonalMultivariateNormal.mean"], []], "home.repos.pwc.inspect_result.bdevl_SMO.lamp.utils.get_default_dtype": [[165, 167], ["None"], "function", ["None"], []], "home.repos.pwc.inspect_result.bdevl_SMO.lamp.utils.get_default_device": [[169, 171], ["torch.device"], "function", ["home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.device"], []], "home.repos.pwc.inspect_result.bdevl_SMO.lamp.utils.sparse_matrix_batched_vector_multiplication": [[173, 179], ["vector_batch.transpose().reshape", "matrix.mm().transpose().reshape", "vector_batch.transpose", "matrix.mm().transpose", "matrix.mm"], "function", ["None"], []], "home.repos.pwc.inspect_result.bdevl_SMO.lamp.utils.architecture_from_linear_decay": [[181, 191], ["list", "numpy.linspace().astype", "numpy.linspace"], "function", ["None"], []], "home.repos.pwc.inspect_result.bdevl_SMO.lamp.utils.get_device": [[193, 204], ["isinstance", "device.lower", "torch.device", "device.lower", "torch.device", "ValueError"], "function", ["home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.device", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.device"], []], "home.repos.pwc.inspect_result.bdevl_SMO.lamp.utils.get_dtype": [[206, 221], ["isinstance", "isinstance", "ValueError", "dtype.lower", "dtype.lower", "ValueError"], "function", ["None"], []], "home.repos.pwc.inspect_result.bdevl_SMO.lamp.utils.get_activation_function": [[223, 247], ["isinstance", "ValueError", "inspect.isfunction", "isinstance", "isinstance", "ValueError", "activ.lower", "ValueError", "torch.nn.ReLU"], "function", ["None"], []], "home.repos.pwc.inspect_result.bdevl_SMO.lamp.utils.DiagonalGaussianLogLikelihood": [[250, 267], ["logvars.mul().exp_", "reduce", "logvars.mul"], "function", ["None"], []], "home.repos.pwc.inspect_result.bdevl_SMO.lamp.utils.reparametrize": [[269, 273], ["torch.exp", "torch.randn_like"], "function", ["None"], []], "home.repos.pwc.inspect_result.bdevl_SMO.lamp.utils.relative_error": [[275, 277], ["torch.norm", "torch.norm"], "function", ["None"], []], "home.repos.pwc.inspect_result.bdevl_SMO.lamp.utils.relative_error_batched": [[279, 284], ["torch.mean().item", "torch.mean", "torch.sqrt", "torch.sqrt", "torch.sum", "torch.sum"], "function", ["home.repos.pwc.inspect_result.bdevl_SMO.lamp.variational.DiagonalMultivariateNormal.mean"], []], "home.repos.pwc.inspect_result.bdevl_SMO.lamp.utils.UnitGaussianKullbackLeiblerDivergence": [[288, 294], ["torch.sum", "logvars.exp", "mean.pow"], "function", ["None"], []], "home.repos.pwc.inspect_result.bdevl_SMO.lamp.utils.annotate_dataset_with_indices": [[296, 311], ["type", "cls.__getitem__"], "function", ["home.repos.pwc.inspect_result.bdevl_SMO.fawkes.BoundaryConditions.NeumannSpecification.type", "home.repos.pwc.inspect_result.bdevl_SMO.optimization.inference.Inference.__getitem__"], []], "home.repos.pwc.inspect_result.bdevl_SMO.fawkes.converter.DiscontinuousGalerkinPixelConverter.__init__": [[7, 24], ["V.mesh"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.microstructure.homogenization.PoissonHomogenizer.mesh"], ["    ", "def", "__init__", "(", "self", ",", "V", ")", ":", "\n", "\n", "        ", "self", ".", "V", "=", "V", "\n", "self", ".", "mesh", "=", "V", ".", "mesh", "(", ")", "\n", "\n", "self", ".", "_X", "=", "None", "\n", "self", ".", "_Y", "=", "None", "\n", "\n", "self", ".", "_dx", "=", "None", "\n", "self", ".", "_dy", "=", "None", "\n", "\n", "self", ".", "_Nx", "=", "None", "\n", "self", ".", "_Ny", "=", "None", "\n", "\n", "#", "\n", "self", ".", "Interpolator", "=", "None", "\n", "self", ".", "ReverseInterpolator", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.fawkes.converter.DiscontinuousGalerkinPixelConverter.px": [[25, 32], ["converter.DiscontinuousGalerkinPixelConverter._assemble"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.fawkes.converter.DiscontinuousGalerkinPixelConverter._assemble"], ["", "@", "property", "\n", "def", "px", "(", "self", ")", ":", "\n", "\n", "        ", "if", "self", ".", "_Nx", "is", "None", ":", "\n", "            ", "self", ".", "_assemble", "(", ")", "\n", "\n", "", "return", "self", ".", "_Nx", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.fawkes.converter.DiscontinuousGalerkinPixelConverter.py": [[33, 40], ["converter.DiscontinuousGalerkinPixelConverter._assemble"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.fawkes.converter.DiscontinuousGalerkinPixelConverter._assemble"], ["", "@", "property", "\n", "def", "py", "(", "self", ")", ":", "\n", "\n", "        ", "if", "self", ".", "_Ny", "is", "None", ":", "\n", "            ", "self", ".", "_assemble", "(", ")", "\n", "\n", "", "return", "self", ".", "_Ny", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.fawkes.converter.DiscontinuousGalerkinPixelConverter.assemble": [[41, 43], ["converter.DiscontinuousGalerkinPixelConverter._assemble"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.fawkes.converter.DiscontinuousGalerkinPixelConverter._assemble"], ["", "def", "assemble", "(", "self", ")", ":", "\n", "        ", "self", ".", "_assemble", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.fawkes.converter.DiscontinuousGalerkinPixelConverter._assemble": [[44, 52], ["converter.DiscontinuousGalerkinPixelConverter.mesh.geometric_dimension", "converter.DiscontinuousGalerkinPixelConverter._assemble_1D", "converter.DiscontinuousGalerkinPixelConverter.mesh.geometric_dimension", "converter.DiscontinuousGalerkinPixelConverter._assemble_2D", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.fawkes.converter.DiscontinuousGalerkinPixelConverter._assemble_1D", "home.repos.pwc.inspect_result.bdevl_SMO.fawkes.converter.DiscontinuousGalerkinPixelConverter._assemble_2D"], ["", "def", "_assemble", "(", "self", ")", ":", "\n", "\n", "        ", "if", "self", ".", "mesh", ".", "geometric_dimension", "(", ")", "==", "1", ":", "\n", "            ", "self", ".", "_assemble_1D", "(", ")", "\n", "", "elif", "self", ".", "mesh", ".", "geometric_dimension", "(", ")", "==", "2", ":", "\n", "            ", "self", ".", "_assemble_2D", "(", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Cannot do 3D\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.fawkes.converter.DiscontinuousGalerkinPixelConverter._assemble_1D": [[53, 92], ["numpy.sort", "numpy.diff", "numpy.all", "converter.DiscontinuousGalerkinPixelConverter.V.dofmap", "numpy.zeros", "numpy.zeros", "enumerate", "numpy.zeros", "range", "torch.tensor", "torch.tensor", "converter.DiscontinuousGalerkinPixelConverter.mesh.coordinates().flatten", "converter.DiscontinuousGalerkinPixelConverter.V.dim", "converter.DiscontinuousGalerkinPixelConverter.V.dim", "fenics.cells", "cell.midpoint().x", "int", "converter.DiscontinuousGalerkinPixelConverter.V.dim", "len", "numpy.sort.max", "numpy.sort.min", "numpy.abs", "converter.DiscontinuousGalerkinPixelConverter.cell_dofs", "numpy.where", "converter.DiscontinuousGalerkinPixelConverter.mesh.coordinates", "cell.midpoint"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.Kernel.dim", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.Kernel.dim", "home.repos.pwc.inspect_result.bdevl_SMO.None.genutils.Study.x", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.Kernel.dim", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.PhiState.max", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.PhiState.min"], ["", "", "def", "_assemble_1D", "(", "self", ")", ":", "\n", "\n", "        ", "nodes", "=", "np", ".", "sort", "(", "self", ".", "mesh", ".", "coordinates", "(", ")", ".", "flatten", "(", ")", ")", "\n", "\n", "assert", "(", "\n", "nodes", ".", "max", "(", ")", "==", "1", "and", "nodes", ".", "min", "(", ")", "==", "0", "\n", ")", ",", "\"Implementation assumes unit inverall mesh [0,1]\"", "\n", "\n", "diff", "=", "np", ".", "diff", "(", "nodes", ")", "\n", "self", ".", "_dx", "=", "diff", "[", "0", "]", "\n", "assert", "np", ".", "all", "(", "np", ".", "abs", "(", "diff", "-", "self", ".", "_dx", ")", "<", "1e-12", ")", ",", "\"Mesh is not uniform\"", "\n", "\n", "dofmap", "=", "self", ".", "V", ".", "dofmap", "(", ")", "\n", "\n", "x_centers", "=", "np", ".", "zeros", "(", "self", ".", "V", ".", "dim", "(", ")", ")", "\n", "\n", "Interpolator", "=", "np", ".", "zeros", "(", "self", ".", "V", ".", "dim", "(", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "df", ".", "cells", "(", "self", ".", "mesh", ")", ")", ":", "\n", "\n", "            ", "x", "=", "cell", ".", "midpoint", "(", ")", ".", "x", "(", ")", "\n", "x_centers", "[", "i", "]", "=", "x", "\n", "\n", "pixel_id", "=", "int", "(", "x", "//", "self", ".", "_dx", ")", "\n", "\n", "assert", "(", "\n", "dofmap", ".", "cell_dofs", "(", "i", ")", "==", "i", "\n", ")", ",", "\"permutation of dg0 function space has to be taken into consideration\"", "\n", "\n", "Interpolator", "[", "pixel_id", "]", "=", "i", "\n", "\n", "", "InterpolatorReverse", "=", "np", ".", "zeros", "(", "self", ".", "V", ".", "dim", "(", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n", "for", "n", "in", "range", "(", "len", "(", "InterpolatorReverse", ")", ")", ":", "\n", "            ", "loc", "=", "np", ".", "where", "(", "Interpolator", "==", "n", ")", "[", "0", "]", "\n", "InterpolatorReverse", "[", "n", "]", "=", "loc", "\n", "\n", "", "self", ".", "_DofToPixelPermutator", "=", "torch", ".", "tensor", "(", "Interpolator", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "self", ".", "_PixelToDofPermutator", "=", "torch", ".", "tensor", "(", "InterpolatorReverse", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.fawkes.converter.DiscontinuousGalerkinPixelConverter._assemble_2D": [[93, 155], ["numpy.array", "enumerate", "len", "len", "numpy.sort", "coordinates[].reshape", "coordinates[].reshape", "numpy.diff", "numpy.all", "numpy.diff", "numpy.all", "numpy.zeros", "converter.DiscontinuousGalerkinPixelConverter.V.dofmap", "enumerate", "numpy.zeros", "enumerate", "numpy.where", "torch.tensor", "converter.DiscontinuousGalerkinPixelConverter.ReverseInterpolator.nonzero", "torch.tensor", "numpy.zeros", "fenics.vertices", "vertex.x", "vertex.x", "numpy.unique", "numpy.unique", "converter.DiscontinuousGalerkinPixelConverter.mesh.num_vertices", "numpy.flipud", "numpy.flipud", "fenics.cells", "cell.midpoint().x", "cell.midpoint().y", "int", "int", "converter.DiscontinuousGalerkinPixelConverter.mesh.num_vertices", "numpy.abs", "numpy.abs", "converter.DiscontinuousGalerkinPixelConverter.V.dim", "converter.DiscontinuousGalerkinPixelConverter.cell_dofs", "converter.DiscontinuousGalerkinPixelConverter.V.dim", "numpy.where", "cell.midpoint", "cell.midpoint"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.None.genutils.Study.x", "home.repos.pwc.inspect_result.bdevl_SMO.None.genutils.Study.x", "home.repos.pwc.inspect_result.bdevl_SMO.None.genutils.Study.x", "home.repos.pwc.inspect_result.bdevl_SMO.None.genutils.Study.y", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.Kernel.dim", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.Kernel.dim"], ["", "def", "_assemble_2D", "(", "self", ")", ":", "\n", "\n", "        ", "coordinates", "=", "np", ".", "array", "(", "\n", "np", ".", "zeros", "(", "self", ".", "mesh", ".", "num_vertices", "(", ")", ")", ",", "dtype", "=", "[", "(", "\"x\"", ",", "float", ")", ",", "(", "\"y\"", ",", "float", ")", "]", "\n", ")", "\n", "for", "i", ",", "vertex", "in", "enumerate", "(", "df", ".", "vertices", "(", "self", ".", "mesh", ")", ")", ":", "\n", "            ", "coordinates", "[", "\"x\"", "]", "[", "i", "]", "=", "vertex", ".", "x", "(", "0", ")", "\n", "coordinates", "[", "\"y\"", "]", "[", "i", "]", "=", "vertex", ".", "x", "(", "1", ")", "\n", "\n", "", "self", ".", "_Ny", "=", "len", "(", "np", ".", "unique", "(", "coordinates", "[", "\"y\"", "]", ")", ")", "\n", "self", ".", "_Nx", "=", "len", "(", "np", ".", "unique", "(", "coordinates", "[", "\"x\"", "]", ")", ")", "\n", "assert", "self", ".", "_Ny", "*", "self", ".", "_Nx", "==", "self", ".", "mesh", ".", "num_vertices", "(", ")", "\n", "assert", "self", ".", "_Ny", "==", "self", ".", "_Nx", "\n", "\n", "coordinates", "=", "np", ".", "sort", "(", "coordinates", ",", "order", "=", "[", "\"y\"", ",", "\"x\"", "]", ")", "\n", "\n", "X", "=", "coordinates", "[", "\"x\"", "]", ".", "reshape", "(", "self", ".", "_Ny", ",", "self", ".", "_Nx", ")", "\n", "Y", "=", "coordinates", "[", "\"y\"", "]", ".", "reshape", "(", "self", ".", "_Ny", ",", "self", ".", "_Nx", ")", "\n", "\n", "T", "=", "np", ".", "diff", "(", "X", ",", "axis", "=", "1", ")", "\n", "self", ".", "_dx", "=", "T", "[", "0", ",", "0", "]", "\n", "assert", "np", ".", "all", "(", "np", ".", "abs", "(", "T", "-", "self", ".", "_dx", ")", "<", "1e-12", ")", "\n", "T", "=", "np", ".", "diff", "(", "Y", ",", "axis", "=", "0", ")", "\n", "self", ".", "_dy", "=", "T", "[", "0", ",", "0", "]", "\n", "assert", "np", ".", "all", "(", "np", ".", "abs", "(", "T", "-", "self", ".", "_dy", ")", "<", "1e-12", ")", "\n", "\n", "self", ".", "_X", "=", "np", ".", "flipud", "(", "X", ")", "+", "0.5", "*", "self", ".", "_dx", "\n", "self", ".", "_Y", "=", "np", ".", "flipud", "(", "Y", ")", "+", "0.5", "*", "self", ".", "_dy", "\n", "\n", "Interpolator", "=", "np", ".", "zeros", "(", "(", "(", "self", ".", "_Ny", "-", "1", ")", "*", "(", "self", ".", "_Nx", "-", "1", ")", ",", "self", ".", "V", ".", "dim", "(", ")", ")", ")", "\n", "dofmap", "=", "self", ".", "V", ".", "dofmap", "(", ")", "\n", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "df", ".", "cells", "(", "self", ".", "mesh", ")", ")", ":", "\n", "\n", "            ", "x", "=", "cell", ".", "midpoint", "(", ")", ".", "x", "(", ")", "\n", "y", "=", "cell", ".", "midpoint", "(", ")", ".", "y", "(", ")", "\n", "\n", "assert", "dofmap", ".", "cell_dofs", "(", "i", ")", "==", "i", "\n", "\n", "cx", "=", "int", "(", "x", "//", "self", ".", "_dx", ")", "\n", "cy", "=", "int", "(", "y", "//", "self", ".", "_dy", ")", "\n", "\n", "cy", "=", "(", "self", ".", "_Ny", "-", "2", ")", "-", "cy", "\n", "pixel_id", "=", "cy", "*", "(", "self", ".", "_Ny", "-", "1", ")", "+", "cx", "\n", "\n", "Interpolator", "[", "pixel_id", ",", "i", "]", "=", "0.5", "\n", "\n", "", "ReverseInterpolator", "=", "np", ".", "zeros", "(", "(", "self", ".", "V", ".", "dim", "(", ")", ",", "(", "self", ".", "_Ny", "-", "1", ")", "*", "(", "self", ".", "_Nx", "-", "1", ")", ")", ")", "\n", "for", "i", ",", "row", "in", "enumerate", "(", "Interpolator", ")", ":", "\n", "            ", "ind", "=", "np", ".", "where", "(", "row", ")", "[", "0", "]", "\n", "ReverseInterpolator", "[", "ind", "[", "0", "]", ",", "i", "]", "=", "1", "\n", "ReverseInterpolator", "[", "ind", "[", "1", "]", ",", "i", "]", "=", "1", "\n", "\n", "", "self", ".", "Interpolator", "=", "Interpolator", "\n", "self", ".", "ReverseInterpolator", "=", "ReverseInterpolator", "\n", "\n", "#", "\n", "a", ",", "b", "=", "np", ".", "where", "(", "self", ".", "Interpolator", "!=", "0", ")", "\n", "self", ".", "_DofToPixelPermutator", "=", "torch", ".", "tensor", "(", "b", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "\n", "a", ",", "b", "=", "self", ".", "ReverseInterpolator", ".", "nonzero", "(", ")", "\n", "self", ".", "_PixelToDofPermutator", "=", "torch", ".", "tensor", "(", "b", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.fawkes.converter.DiscontinuousGalerkinPixelConverter.FunctionToImage": [[156, 162], ["y.reshape.reshape.reshape"], "methods", ["None"], ["", "def", "FunctionToImage", "(", "self", ",", "x", ",", "reshape", "=", "False", ")", ":", "\n", "\n", "        ", "y", "=", "self", ".", "Interpolator", "@", "x", "\n", "if", "reshape", ":", "\n", "            ", "y", "=", "y", ".", "reshape", "(", "(", "self", ".", "_Ny", "-", "1", ",", "self", ".", "_Nx", "-", "1", ")", ")", "\n", "", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.fawkes.converter.DiscontinuousGalerkinPixelConverter.FunctionToImageBatchedFast": [[163, 175], ["Images_flattened.view", "X.view.view.dim", "X.view.view.view"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.Kernel.dim"], ["", "def", "FunctionToImageBatchedFast", "(", "self", ",", "X", ")", ":", "\n", "\n", "        ", "if", "X", ".", "dim", "(", ")", "==", "1", ":", "\n", "# deal with batch_size 1", "\n", "            ", "X", "=", "X", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "\n", "", "batch_size", "=", "X", ".", "shape", "[", "0", "]", "\n", "X_perm", "=", "X", "[", ":", ",", "self", ".", "_DofToPixelPermutator", "]", "\n", "Images_flattened", "=", "0.5", "*", "(", "X_perm", "[", ":", ",", "0", ":", ":", "2", "]", "+", "X_perm", "[", ":", ",", "1", ":", ":", "2", "]", ")", "\n", "Images", "=", "Images_flattened", ".", "view", "(", "batch_size", ",", "self", ".", "py", ",", "self", ".", "px", ")", "\n", "\n", "return", "Images", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.fawkes.converter.DiscontinuousGalerkinPixelConverter.ImageToFunctionBatchedFast": [[176, 182], ["Images.view"], "methods", ["None"], ["", "def", "ImageToFunctionBatchedFast", "(", "self", ",", "Images", ")", ":", "\n", "\n", "        ", "batch_size", "=", "Images", ".", "shape", "[", "0", "]", "\n", "flattened_Images", "=", "Images", ".", "view", "(", "batch_size", ",", "-", "1", ")", "\n", "X", "=", "flattened_Images", "[", ":", ",", "self", ".", "_PixelToDofPermutator", "]", "\n", "return", "X", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.fawkes.converter.DiscontinuousGalerkinPixelConverter.ImageToFunction": [[183, 189], ["y.flatten.flatten.flatten"], "methods", ["None"], ["", "def", "ImageToFunction", "(", "self", ",", "y", ")", ":", "\n", "\n", "        ", "if", "y", ".", "ndim", "==", "2", ":", "\n", "            ", "y", "=", "y", ".", "flatten", "(", "order", "=", "\"C\"", ")", "# default order: C", "\n", "\n", "", "return", "self", ".", "ReverseInterpolator", "@", "y", "\n", "", "", ""]], "home.repos.pwc.inspect_result.bdevl_SMO.fawkes.BoundaryConditions.BoundaryEncodingEnsemble.__init__": [[7, 9], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "boundary_encodings", ")", ":", "\n", "        ", "self", ".", "_boundary_encodings", "=", "boundary_encodings", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.fawkes.BoundaryConditions.BoundaryEncodingEnsemble.__getitem__": [[10, 12], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "return", "self", ".", "_boundary_encodings", "[", "item", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.fawkes.BoundaryConditions.BoundaryEncodingEnsemble.__iter__": [[13, 15], ["None"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "yield", "from", "self", ".", "_boundary_encodings", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.fawkes.BoundaryConditions.BoundaryEncoding.__init__": [[18, 25], ["isinstance", "isinstance"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "dirichlet_encoding", ",", "neumann_encoding", ")", ":", "\n", "\n", "        ", "assert", "isinstance", "(", "dirichlet_encoding", ",", "DirichletBoundaryEncoding", ")", "\n", "assert", "isinstance", "(", "neumann_encoding", ",", "NeumannBoundaryEncoding", ")", "\n", "\n", "self", ".", "dirichlet_encoding", "=", "dirichlet_encoding", "\n", "self", ".", "neumann_encoding", "=", "neumann_encoding", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.fawkes.BoundaryConditions.BoundaryEncoding.reconstruct": [[26, 28], ["None"], "methods", ["None"], ["", "def", "reconstruct", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.fawkes.BoundaryConditions.DirichletBoundaryEncoding.__init__": [[31, 39], ["dict", "isinstance"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "type", ",", "data", "=", "None", ")", ":", "\n", "        ", "self", ".", "type", "=", "type", "\n", "\n", "if", "data", "is", "None", ":", "\n", "            ", "self", ".", "_data", "=", "dict", "(", ")", "\n", "", "else", ":", "\n", "            ", "assert", "isinstance", "(", "data", ",", "dict", ")", "\n", "self", ".", "_data", "=", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.fawkes.BoundaryConditions.DirichletBoundaryEncoding.data": [[40, 43], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "data", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_data", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.fawkes.BoundaryConditions.DirichletBoundaryEncoding.__getitem__": [[44, 50], ["KeyError"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "return", "self", ".", "_data", "[", "item", "]", "\n", "", "except", "KeyError", ":", "\n", "            ", "raise", "KeyError", "(", "\n", "\"DirichletBoundaryEncoding could not retrieve '{}'\"", ".", "format", "(", "item", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.fawkes.BoundaryConditions.DirichletBoundaryEncoding.__setitem__": [[52, 54], ["None"], "methods", ["None"], ["", "", "def", "__setitem__", "(", "self", ",", "key", ",", "value", ")", ":", "\n", "        ", "self", ".", "_data", "[", "key", "]", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.fawkes.BoundaryConditions.DirichletBoundaryEncoding.reconstruct": [[55, 58], ["factory.reconstruct_dirichlet"], "methods", ["None"], ["", "def", "reconstruct", "(", "self", ",", "factory", ")", ":", "\n", "# returns Dirichlet Boundary encoding", "\n", "        ", "return", "factory", ".", "reconstruct_dirichlet", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.fawkes.BoundaryConditions.NeumannBoundaryEncoding.__init__": [[61, 69], ["dict", "isinstance"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "type", ",", "data", "=", "None", ")", ":", "\n", "        ", "self", ".", "type", "=", "type", "\n", "\n", "if", "data", "is", "None", ":", "\n", "            ", "self", ".", "_data", "=", "dict", "(", ")", "\n", "", "else", ":", "\n", "            ", "assert", "isinstance", "(", "data", ",", "dict", ")", "\n", "self", ".", "_data", "=", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.fawkes.BoundaryConditions.NeumannBoundaryEncoding.data": [[70, 73], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "data", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_data", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.fawkes.BoundaryConditions.NeumannBoundaryEncoding.__getitem__": [[74, 80], ["KeyError"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "return", "self", ".", "_data", "[", "item", "]", "\n", "", "except", "KeyError", ":", "\n", "            ", "raise", "KeyError", "(", "\n", "\"NeumannBoundaryEncoding could not retrieve '{}'\"", ".", "format", "(", "item", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.fawkes.BoundaryConditions.NeumannBoundaryEncoding.__setitem__": [[82, 84], ["None"], "methods", ["None"], ["", "", "def", "__setitem__", "(", "self", ",", "key", ",", "value", ")", ":", "\n", "        ", "self", ".", "_data", "[", "key", "]", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.fawkes.BoundaryConditions.NeumannBoundaryEncoding.reconstruct": [[85, 88], ["factory.reconstruct_neumann"], "methods", ["None"], ["", "def", "reconstruct", "(", "self", ",", "factory", ")", ":", "\n", "\n", "        ", "return", "factory", ".", "reconstruct_neumann", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.fawkes.BoundaryConditions.DirichletSpecification.__init__": [[91, 97], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "expression", ",", "domain", ",", "component", "=", "None", ",", "pointwise", "=", "False", ")", ":", "\n", "\n", "        ", "self", ".", "expression", "=", "expression", "\n", "self", ".", "domain", "=", "domain", "\n", "self", ".", "component", "=", "component", "\n", "self", ".", "pointwise", "=", "pointwise", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.fawkes.BoundaryConditions.DirichletSpecification.is_homogeneous": [[98, 100], ["None"], "methods", ["None"], ["", "def", "is_homogeneous", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.fawkes.BoundaryConditions.DirichletSpecification.mark_facetfct_with_value": [[101, 105], ["BoundaryConditions.DirichletSpecification.domain.mark", "isinstance"], "methods", ["None"], ["", "def", "mark_facetfct_with_value", "(", "self", ",", "facetfct", ",", "value", ")", ":", "\n", "\n", "        ", "assert", "value", ">=", "0", "and", "isinstance", "(", "value", ",", "int", ")", "\n", "self", ".", "domain", ".", "mark", "(", "facetfct", ",", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.fawkes.BoundaryConditions.DirichletBoundaryCondition.__init__": [[108, 138], ["isinstance", "isinstance", "isinstance", "isinstance", "isinstance", "BoundaryConditions.DirichletBoundaryEncoding", "TypeError", "isinstance", "TypeError"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "bcs", ",", "encoding", "=", "None", ",", "encoding_type", "=", "None", ",", "encoding_data", "=", "None", ")", ":", "\n", "\n", "        ", "if", "isinstance", "(", "bcs", ",", "list", ")", ":", "\n", "            ", "for", "bc", "in", "bcs", ":", "\n", "                ", "if", "not", "isinstance", "(", "bc", ",", "DirichletSpecification", ")", ":", "\n", "                    ", "raise", "TypeError", "(", "\n", "\"DirichletBoundaryCondition expects (list of) Dirichlet Specifications\"", "\n", ")", "\n", "", "", "", "elif", "isinstance", "(", "bcs", ",", "DirichletSpecification", ")", ":", "\n", "            ", "bcs", "=", "[", "bcs", "]", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "\n", "\"DirichletBoundaryCondition expects (list of) Dirichlet Specifications\"", "\n", ")", "\n", "\n", "", "self", ".", "_bcs", "=", "bcs", "# list of DirichletSpecifications", "\n", "\n", "if", "encoding", "is", "not", "None", ":", "\n", "            ", "assert", "encoding_type", "is", "None", "\n", "assert", "encoding_data", "is", "None", "\n", "\n", "", "if", "encoding", "is", "not", "None", ":", "\n", "            ", "assert", "isinstance", "(", "encoding", ",", "DirichletBoundaryEncoding", ")", "\n", "self", ".", "_encoding", "=", "encoding", "\n", "\n", "", "if", "encoding_data", "is", "not", "None", "or", "encoding_type", "is", "not", "None", ":", "\n", "            ", "assert", "encoding_data", "is", "not", "None", "and", "encoding_type", "is", "not", "None", "\n", "assert", "isinstance", "(", "encoding_type", ",", "str", ")", "\n", "assert", "isinstance", "(", "encoding_data", ",", "dict", ")", "\n", "self", ".", "_encoding", "=", "DirichletBoundaryEncoding", "(", "encoding_type", ",", "encoding_data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.fawkes.BoundaryConditions.DirichletBoundaryCondition.__getitem__": [[139, 141], ["None"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "ind", ")", ":", "\n", "        ", "return", "self", ".", "_bcs", "[", "ind", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.fawkes.BoundaryConditions.DirichletBoundaryCondition.encode": [[142, 148], ["NotImplementedError"], "methods", ["None"], ["", "def", "encode", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_encoding", "is", "None", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\n", "\"No encodings of the DirichletBoundaryCondition have been set in the factory. Cannot encode.\"", "\n", ")", "\n", "", "return", "self", ".", "_encoding", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.fawkes.BoundaryConditions.DirichletBoundaryCondition.extract": [[149, 169], ["BoundaryConditions.DirichletBoundaryCondition.transfer", "numpy.array", "numpy.array", "numpy.unique", "set", "numpy.array", "V.dofmap().dofs", "list", "bc.get_boundary_values().keys", "bc.get_boundary_values().values", "V.dofmap", "set", "bc.get_boundary_values", "bc.get_boundary_values"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.fawkes.BoundaryConditions.DirichletBoundaryCondition.transfer", "home.repos.pwc.inspect_result.bdevl_SMO.None.genutils.StateVariable.set", "home.repos.pwc.inspect_result.bdevl_SMO.lamp.metrics.MetricEnsemble.keys", "home.repos.pwc.inspect_result.bdevl_SMO.None.genutils.StateVariable.set"], ["", "def", "extract", "(", "self", ",", "V", ",", "ReturnFreeDofs", "=", "False", ")", ":", "\n", "\n", "        ", "fbcs", "=", "self", ".", "transfer", "(", "V", ")", "\n", "dofs", "=", "np", ".", "array", "(", "\n", "[", "dof", "for", "bc", "in", "fbcs", "for", "dof", "in", "bc", ".", "get_boundary_values", "(", ")", ".", "keys", "(", ")", "]", ",", "dtype", "=", "int", "\n", ")", "\n", "vals", "=", "np", ".", "array", "(", "\n", "[", "val", "for", "bc", "in", "fbcs", "for", "val", "in", "bc", ".", "get_boundary_values", "(", ")", ".", "values", "(", ")", "]", ",", "\n", "dtype", "=", "float", ",", "\n", ")", "\n", "\n", "dofs", ",", "index", "=", "np", ".", "unique", "(", "dofs", ",", "return_index", "=", "True", ")", "\n", "values", "=", "vals", "[", "index", "]", "\n", "\n", "if", "ReturnFreeDofs", ":", "\n", "            ", "all_dofs", "=", "set", "(", "V", ".", "dofmap", "(", ")", ".", "dofs", "(", ")", ")", "\n", "free_dofs", "=", "np", ".", "array", "(", "list", "(", "all_dofs", "-", "set", "(", "dofs", ")", ")", ",", "dtype", "=", "np", ".", "int", ")", "\n", "return", "dofs", ",", "values", ",", "free_dofs", "\n", "\n", "", "return", "dofs", ",", "values", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.fawkes.BoundaryConditions.DirichletBoundaryCondition.is_homogeneous": [[170, 174], ["BoundaryConditions.DirichletBoundaryCondition.extract", "any"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.AggregateConvergencePlotter.extract"], ["", "def", "is_homogeneous", "(", "self", ",", "V", ")", ":", "\n", "\n", "        ", "dofs", ",", "values", "=", "self", ".", "extract", "(", "V", ")", "\n", "return", "not", "any", "(", "values", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.fawkes.BoundaryConditions.DirichletBoundaryCondition.transfer": [[175, 203], ["list", "list.append", "list.append", "list.append", "list.append", "dolfin.DirichletBC", "dolfin.DirichletBC", "dolfin.DirichletBC", "dolfin.DirichletBC", "V.sub", "V.sub"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.Log.append", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.Log.append", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.Log.append", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.Log.append"], ["", "def", "transfer", "(", "self", ",", "V", ")", ":", "\n", "\n", "        ", "fenics_bcs", "=", "list", "(", ")", "\n", "\n", "for", "bc", "in", "self", ".", "_bcs", ":", "\n", "            ", "if", "bc", ".", "component", "is", "not", "None", ":", "\n", "                ", "if", "not", "bc", ".", "pointwise", ":", "\n", "                    ", "fenics_bcs", ".", "append", "(", "\n", "DirichletBC", "(", "V", ".", "sub", "(", "bc", ".", "component", ")", ",", "bc", ".", "expression", ",", "bc", ".", "domain", ")", "\n", ")", "\n", "", "else", ":", "\n", "                    ", "fenics_bcs", ".", "append", "(", "\n", "DirichletBC", "(", "\n", "V", ".", "sub", "(", "bc", ".", "component", ")", ",", "\n", "bc", ".", "expression", ",", "\n", "bc", ".", "domain", ",", "\n", "method", "=", "\"pointwise\"", ",", "\n", ")", "\n", ")", "\n", "", "", "else", ":", "\n", "                ", "if", "not", "bc", ".", "pointwise", ":", "\n", "                    ", "fenics_bcs", ".", "append", "(", "DirichletBC", "(", "V", ",", "bc", ".", "expression", ",", "bc", ".", "domain", ")", ")", "\n", "", "else", ":", "\n", "                    ", "fenics_bcs", ".", "append", "(", "\n", "DirichletBC", "(", "V", ",", "bc", ".", "expression", ",", "bc", ".", "domain", ",", "method", "=", "\"pointwise\"", ")", "\n", ")", "\n", "\n", "", "", "", "return", "fenics_bcs", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.fawkes.BoundaryConditions.DirichletBoundaryCondition.mark_facets": [[204, 212], ["dolfin.MeshFunction", "dolfin.MeshFunction.set_all", "bc.domain.mark", "mesh.topology().dim", "mesh.topology"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.Kernel.dim"], ["", "def", "mark_facets", "(", "self", ",", "mesh", ")", ":", "\n", "\n", "        ", "facetfct", "=", "df", ".", "MeshFunction", "(", "\"size_t\"", ",", "mesh", ",", "mesh", ".", "topology", "(", ")", ".", "dim", "(", ")", "-", "1", ")", "\n", "facetfct", ".", "set_all", "(", "0", ")", "\n", "for", "bc", "in", "self", ".", "_bcs", ":", "\n", "            ", "bc", ".", "domain", ".", "mark", "(", "facetfct", ",", "1", ")", "\n", "\n", "", "return", "facetfct", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.fawkes.BoundaryConditions.DirichletBoundaryCondition.mark_facetfct_with_value": [[213, 218], ["isinstance", "bc.domain.mark"], "methods", ["None"], ["", "def", "mark_facetfct_with_value", "(", "self", ",", "facetfct", ",", "value", ")", ":", "\n", "\n", "        ", "assert", "value", ">=", "0", "and", "isinstance", "(", "value", ",", "int", ")", "\n", "for", "bc", "in", "self", ".", "_bcs", ":", "\n", "            ", "bc", ".", "domain", ".", "mark", "(", "facetfct", ",", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.fawkes.BoundaryConditions.DirichletBoundaryCondition.apply": [[219, 221], ["None"], "methods", ["None"], ["", "", "def", "apply", "(", "self", ",", "X", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.fawkes.BoundaryConditions.NeumannSpecification.__init__": [[224, 232], ["ValueError"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "type", ",", "expression", ",", "subdomain", "=", "None", ")", ":", "\n", "\n", "        ", "if", "type", "not", "in", "[", "\"ds\"", ",", "\"dx\"", "]", ":", "\n", "            ", "raise", "ValueError", "(", "'Type must either be \"ds\" or \"dx'", ")", "\n", "\n", "", "self", ".", "_type", "=", "type", "# e.g. ds", "\n", "self", ".", "_subdomain", "=", "subdomain", "\n", "self", ".", "_expression", "=", "expression", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.fawkes.BoundaryConditions.NeumannSpecification.type": [[233, 236], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "type", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_type", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.fawkes.BoundaryConditions.NeumannSpecification.subdomain": [[237, 240], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "subdomain", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_subdomain", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.fawkes.BoundaryConditions.NeumannSpecification.expression": [[241, 244], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "expression", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_expression", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.fawkes.BoundaryConditions.NeumannSpecification.mark_facetfct_with_value": [[245, 253], ["isinstance", "BoundaryConditions.NeumannSpecification.subdomain.mark", "RuntimeError"], "methods", ["None"], ["", "def", "mark_facetfct_with_value", "(", "self", ",", "facetfct", ",", "value", ")", ":", "\n", "\n", "        ", "assert", "value", ">=", "0", "and", "isinstance", "(", "value", ",", "int", ")", "\n", "if", "self", ".", "_type", "==", "\"ds\"", ":", "\n", "            ", "self", ".", "subdomain", ".", "mark", "(", "facetfct", ",", "value", ")", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "\n", "\"cannot mark facetfcts for dx type Neumann Specification\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.fawkes.BoundaryConditions.NeumannBoundaryCondition.__init__": [[257, 276], ["isinstance", "isinstance", "isinstance", "BoundaryConditions.NeumannBoundaryEncoding"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "NeumannSpecifications", ",", "\n", "encoding", "=", "None", ",", "\n", "encoding_type", "=", "None", ",", "\n", "encoding_data", "=", "None", ",", "\n", ")", ":", "\n", "\n", "        ", "self", ".", "_neumman_specifications", "=", "NeumannSpecifications", "\n", "\n", "if", "encoding", "is", "not", "None", ":", "\n", "            ", "assert", "isinstance", "(", "encoding", ",", "NeumannBoundaryEncoding", ")", "\n", "self", ".", "_encoding", "=", "encoding", "\n", "\n", "", "if", "encoding_data", "is", "not", "None", "or", "encoding_type", "is", "not", "None", ":", "\n", "            ", "assert", "encoding_data", "is", "not", "None", "and", "encoding_type", "is", "not", "None", "\n", "assert", "isinstance", "(", "encoding_type", ",", "str", ")", "\n", "assert", "isinstance", "(", "encoding_data", ",", "dict", ")", "\n", "self", ".", "_encoding", "=", "NeumannBoundaryEncoding", "(", "encoding_type", ",", "encoding_data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.fawkes.BoundaryConditions.NeumannBoundaryCondition.encode": [[277, 283], ["NotImplementedError"], "methods", ["None"], ["", "", "def", "encode", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_encoding", "is", "None", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\n", "\"No encodings of the NeumannBoundaryCondition have been set in the factory. Cannot encode.\"", "\n", ")", "\n", "", "return", "self", ".", "_encoding", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.fawkes.BoundaryConditions.NeumannBoundaryCondition.__getitem__": [[284, 286], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "ind", ")", ":", "\n", "        ", "return", "self", ".", "_neumman_specifications", "[", "ind", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.fawkes.BoundaryConditions.NeumannBoundaryCondition.compile_form": [[287, 326], ["V.mesh", "dolfin.TestFunction", "dict", "dolfin.MeshFunction", "dolfin.MeshFunction", "meshfct[].set_all", "meshfct[].set_all", "dict", "V.mesh.topology().dim", "dolfin.Measure", "V.mesh.topology().dim", "ns.subdomain.mark", "V.mesh.topology", "V.mesh.topology"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.microstructure.homogenization.PoissonHomogenizer.mesh", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.Kernel.dim", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.Kernel.dim"], ["", "def", "compile_form", "(", "self", ",", "V", ")", ":", "\n", "\n", "        ", "mesh", "=", "V", ".", "mesh", "(", ")", "\n", "v", "=", "df", ".", "TestFunction", "(", "V", ")", "\n", "form", "=", "None", "\n", "\n", "meshfct", "=", "dict", "(", ")", "\n", "meshfct", "[", "\"ds\"", "]", "=", "df", ".", "MeshFunction", "(", "\"size_t\"", ",", "mesh", ",", "mesh", ".", "topology", "(", ")", ".", "dim", "(", ")", "-", "1", ",", "0", ")", "\n", "meshfct", "[", "\"dx\"", "]", "=", "df", ".", "MeshFunction", "(", "\"size_t\"", ",", "mesh", ",", "mesh", ".", "topology", "(", ")", ".", "dim", "(", ")", ",", "0", ")", "\n", "meshfct", "[", "\"ds\"", "]", ".", "set_all", "(", "0", ")", "\n", "meshfct", "[", "\"dx\"", "]", ".", "set_all", "(", "0", ")", "\n", "\n", "ID", "=", "dict", "(", ")", "\n", "ID", "[", "\"ds\"", "]", "=", "1", "\n", "ID", "[", "\"dx\"", "]", "=", "1", "\n", "\n", "for", "ns", "in", "self", ".", "_neumman_specifications", ":", "\n", "\n", "            ", "if", "ns", ".", "subdomain", "is", "None", ":", "\n", "# entire domain, no restrictions", "\n", "                ", "ID_", "=", "0", "\n", "", "else", ":", "\n", "                ", "ID_", "=", "ID", "[", "ns", ".", "type", "]", "\n", "ns", ".", "subdomain", ".", "mark", "(", "meshfct", "[", "ns", ".", "type", "]", ",", "ID_", ")", "\n", "ID", "[", "ns", ".", "type", "]", "+=", "1", "\n", "assert", "ID_", "!=", "ID", "[", "ns", ".", "type", "]", "\n", "\n", "", "measure", "=", "df", ".", "Measure", "(", "\n", "ns", ".", "type", ",", "domain", "=", "mesh", ",", "subdomain_data", "=", "meshfct", "[", "ns", ".", "type", "]", ",", "subdomain_id", "=", "ID_", "\n", ")", "\n", "\n", "form_", "=", "ns", ".", "expression", "*", "v", "*", "measure", "\n", "\n", "if", "form", "is", "None", ":", "\n", "                ", "form", "=", "form_", "\n", "", "else", ":", "\n", "                ", "form", "=", "form", "+", "form_", "\n", "\n", "", "", "return", "form", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.fawkes.BoundaryConditions.NeumannBoundaryCondition.assemble_flux": [[327, 330], ["dolfin.assemble().get_local", "dolfin.assemble", "BoundaryConditions.NeumannBoundaryCondition.compile_form"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.fawkes.converter.DiscontinuousGalerkinPixelConverter.assemble", "home.repos.pwc.inspect_result.bdevl_SMO.fawkes.BoundaryConditions.NeumannBoundaryCondition.compile_form"], ["", "def", "assemble_flux", "(", "self", ",", "V", ")", ":", "\n", "\n", "        ", "return", "df", ".", "assemble", "(", "self", ".", "compile_form", "(", "V", ")", ")", ".", "get_local", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.fawkes.BoundaryConditions.NeumannBoundaryCondition.mark_facetfct_with_value": [[331, 336], ["isinstance", "nsp.domain.mark"], "methods", ["None"], ["", "def", "mark_facetfct_with_value", "(", "self", ",", "facetfct", ",", "value", ")", ":", "\n", "\n", "        ", "assert", "value", ">=", "0", "and", "isinstance", "(", "value", ",", "int", ")", "\n", "for", "nsp", "in", "self", ".", "self", ".", "_neumman_specifications", ":", "\n", "            ", "nsp", ".", "domain", ".", "mark", "(", "facetfct", ",", "value", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.bdevl_SMO.fawkes.Probe.Probe.__init__": [[17, 27], ["Exception"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "f", ",", "points", ",", "shape", "=", "None", ",", "f_global", "=", "None", ")", ":", "\n", "\n", "        ", "if", "not", "points", ".", "flags", "[", "\"C_CONTIGUOUS\"", "]", ":", "\n", "            ", "raise", "Exception", "(", "\"Require C-contiguous array\"", ")", "\n", "\n", "", "self", ".", "_H", "=", "None", "\n", "self", ".", "_points", "=", "points", "\n", "self", ".", "_f", "=", "f", "\n", "self", ".", "_f_global", "=", "f_global", "\n", "self", ".", "_shape", "=", "shape", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.fawkes.Probe.Probe.dim": [[28, 31], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "dim", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "numpoints", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.fawkes.Probe.Probe.numpoints": [[32, 35], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "numpoints", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_points", ".", "shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.fawkes.Probe.Probe.spacedim": [[36, 43], ["Probe.Probe._f_global.function_space().mesh().topology().dim", "Probe.Probe._f.function_space().mesh().topology().dim", "Probe.Probe._f_global.function_space().mesh().topology", "Probe.Probe._f.function_space().mesh().topology", "Probe.Probe._f_global.function_space().mesh", "Probe.Probe._f.function_space().mesh", "Probe.Probe._f_global.function_space", "Probe.Probe._f.function_space"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.Kernel.dim", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.Kernel.dim", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.homogenization.PoissonHomogenizer.mesh", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.homogenization.PoissonHomogenizer.mesh"], ["", "@", "property", "\n", "def", "spacedim", "(", "self", ")", ":", "\n", "\n", "        ", "if", "self", ".", "_f_global", ":", "\n", "            ", "return", "self", ".", "_f_global", ".", "function_space", "(", ")", ".", "mesh", "(", ")", ".", "topology", "(", ")", ".", "dim", "(", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "_f", ".", "function_space", "(", ")", ".", "mesh", "(", ")", ".", "topology", "(", ")", ".", "dim", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.fawkes.Probe.Probe.FromLine": [[44, 53], ["numpy.column_stack", "cls", "Exception"], "methods", ["None"], ["", "", "@", "classmethod", "\n", "def", "FromLine", "(", "cls", ",", "f", ",", "x", ",", "y", "=", "None", ",", "z", "=", "None", ",", "*", ",", "f_global", "=", "None", ")", ":", "\n", "\n", "        ", "p", "=", "np", ".", "column_stack", "(", "[", "c", "for", "c", "in", "[", "x", ",", "y", ",", "z", "]", "if", "c", "is", "not", "None", "]", ")", "\n", "\n", "if", "not", "p", ".", "flags", "[", "\"C_CONTIGUOUS\"", "]", ":", "\n", "            ", "raise", "Exception", "(", "\"Require C-contiguous array\"", ")", "\n", "\n", "", "return", "cls", "(", "f", ",", "p", ",", "f_global", "=", "f_global", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.fawkes.Probe.Probe.FromNodes": [[54, 66], ["f.function_space().mesh.coordinates().copy", "cls", "f.function_space().mesh", "Exception", "f.function_space().mesh.coordinates", "f.function_space"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.microstructure.homogenization.PoissonHomogenizer.mesh"], ["", "@", "classmethod", "\n", "def", "FromNodes", "(", "cls", ",", "f", ",", "*", ",", "f_global", "=", "None", ",", "mesh", "=", "None", ")", ":", "\n", "\n", "        ", "if", "mesh", "is", "None", ":", "\n", "            ", "mesh", "=", "f", ".", "function_space", "(", ")", ".", "mesh", "(", ")", "\n", "\n", "", "p", "=", "mesh", ".", "coordinates", "(", ")", ".", "copy", "(", ")", "\n", "\n", "if", "not", "p", ".", "flags", "[", "\"C_CONTIGUOUS\"", "]", ":", "\n", "            ", "raise", "Exception", "(", "\"Require C-contiguous array\"", ")", "\n", "\n", "", "return", "cls", "(", "f", ",", "p", ",", "f_global", "=", "f_global", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.fawkes.Probe.Probe.Grid_2D": [[67, 82], ["numpy.reshape", "numpy.reshape", "numpy.hstack", "cls", "numpy.meshgrid", "Exception"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "Grid_2D", "(", "cls", ",", "f", ",", "x", ",", "y", ",", "*", ",", "f_global", "=", "None", ")", ":", "\n", "\n", "        ", "if", "x", ".", "ndim", "==", "1", "and", "y", ".", "ndim", "==", "1", ":", "\n", "            ", "x", ",", "y", "=", "meshgrid", "(", "x", ",", "y", ")", "\n", "\n", "", "if", "not", "x", ".", "shape", "==", "y", ".", "shape", ":", "\n", "            ", "raise", "Exception", "(", "\"Grid faulty\"", ")", "\n", "\n", "", "x_flat", "=", "reshape", "(", "x", ",", "(", "x", ".", "size", ",", "1", ")", ")", "\n", "y_flat", "=", "reshape", "(", "y", ",", "(", "y", ".", "size", ",", "1", ")", ")", "\n", "\n", "p", "=", "hstack", "(", "(", "x_flat", ",", "y_flat", ")", ")", "\n", "\n", "return", "cls", "(", "f", ",", "p", ",", "shape", "=", "x", ".", "shape", ",", "f_global", "=", "f_global", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.fawkes.Probe.Probe.EvaluateBatch": [[83, 111], ["numpy.zeros", "enumerate", "numpy.mean", "numpy.var", "Probe.Probe.Assemble", "scipy.stats.mstats.mquantiles", "Probe.Probe._f.vector().get_local", "Probe.Probe._f_global.vector().get_local", "Probe.Probe._H.dot", "Probe.Probe.Evaluate", "Probe.Probe._f.vector", "Probe.Probe._f_global.vector"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.lamp.variational.DiagonalMultivariateNormal.mean", "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.TargetObjective.var", "home.repos.pwc.inspect_result.bdevl_SMO.fawkes.Probe.Probe.Assemble", "home.repos.pwc.inspect_result.bdevl_SMO.fawkes.Probe.Probe.Evaluate"], ["", "def", "EvaluateBatch", "(", "self", ",", "X", ",", "mask", "=", "None", ",", "Confidence", "=", "None", ")", ":", "\n", "\n", "        ", "if", "self", ".", "_H", "is", "None", ":", "\n", "            ", "self", ".", "Assemble", "(", ")", "\n", "\n", "", "Y", "=", "np", ".", "zeros", "(", "(", "self", ".", "numpoints", ",", "X", ".", "shape", "[", "1", "]", ")", ")", "\n", "\n", "if", "mask", "is", "not", "None", ":", "\n", "            ", "if", "self", ".", "_f_global", "is", "None", ":", "\n", "                ", "Full_x", "=", "self", ".", "_f", ".", "vector", "(", ")", ".", "get_local", "(", ")", "\n", "", "else", ":", "\n", "                ", "Full_x", "=", "self", ".", "_f_global", ".", "vector", "(", ")", ".", "get_local", "(", ")", "\n", "\n", "", "", "for", "i", ",", "column", "in", "enumerate", "(", "X", ".", "T", ")", ":", "\n", "            ", "if", "mask", "is", "not", "None", ":", "\n", "                ", "Full_x", "[", "mask", "]", "=", "column", "\n", "Y", "[", ":", ",", "i", "]", "=", "self", ".", "_H", ".", "dot", "(", "Full_x", ")", "\n", "", "else", ":", "\n", "                ", "Y", "[", ":", ",", "i", "]", "=", "self", ".", "Evaluate", "(", "x", "=", "column", ")", "\n", "\n", "", "", "meanY", "=", "np", ".", "mean", "(", "Y", ",", "1", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "varY", "=", "np", ".", "var", "(", "Y", ",", "1", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "\n", "if", "Confidence", "is", "not", "None", ":", "\n", "            ", "conf", "=", "scipy", ".", "stats", ".", "mstats", ".", "mquantiles", "(", "Y", ",", "prob", "=", "Confidence", ",", "axis", "=", "1", ")", "\n", "return", "meanY", ",", "varY", ",", "conf", "\n", "", "else", ":", "\n", "            ", "return", "meanY", ",", "varY", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.fawkes.Probe.Probe.Assemble": [[112, 124], ["fawkes.utils.AssembleBasisFunctionMatrix", "fawkes.utils.AssembleBasisFunctionMatrix", "Probe.Probe._f.function_space", "Probe.Probe._f.function_space", "Probe.Probe._f_global.function_space"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.fawkes.utils.AssembleBasisFunctionMatrix", "home.repos.pwc.inspect_result.bdevl_SMO.fawkes.utils.AssembleBasisFunctionMatrix"], ["", "", "def", "Assemble", "(", "self", ")", ":", "\n", "\n", "        ", "if", "self", ".", "_f_global", "is", "None", ":", "\n", "            ", "self", ".", "_H", "=", "AssembleBasisFunctionMatrix", "(", "\n", "self", ".", "_f", ".", "function_space", "(", ")", ",", "self", ".", "_points", ",", "ReturnType", "=", "\"scipy\"", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_H", "=", "AssembleBasisFunctionMatrix", "(", "\n", "self", ".", "_f", ".", "function_space", "(", ")", ",", "\n", "self", ".", "_points", ",", "\n", "ReturnType", "=", "\"scipy\"", ",", "\n", "Global_V", "=", "self", ".", "_f_global", ".", "function_space", "(", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.fawkes.Probe.Probe.Evaluate": [[126, 168], ["Probe.Probe._H.dot", "Exception", "Probe.Probe.Assemble", "Exception", "numpy.reshape", "Probe.Probe._f.vector().get_local", "Probe.Probe._f_global.vector().get_local", "Probe.Probe._f.vector", "Probe.Probe._f_global.vector"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.fawkes.Probe.Probe.Assemble"], ["", "", "def", "Evaluate", "(", "\n", "self", ",", "\n", "format", "=", "\"LIST\"", ",", "\n", "x", "=", "None", ",", "\n", "VectorComponent", "=", "None", ",", "\n", "TensorComponent", "=", "None", ",", "\n", "TensorSymmetry", "=", "True", ",", "\n", "mask", "=", "None", ",", "\n", ")", ":", "\n", "\n", "        ", "if", "self", ".", "spacedim", "!=", "2", ":", "\n", "            ", "raise", "Exception", "(", "\"Assuming dim=2\"", ")", "\n", "\n", "", "if", "self", ".", "_H", "is", "None", ":", "\n", "            ", "self", ".", "Assemble", "(", ")", "\n", "\n", "", "if", "x", "is", "None", ":", "\n", "            ", "if", "self", ".", "_f_global", "is", "None", ":", "\n", "                ", "x", "=", "self", ".", "_f", ".", "vector", "(", ")", ".", "get_local", "(", ")", "\n", "", "else", ":", "\n", "                ", "x", "=", "self", ".", "_f_global", ".", "vector", "(", ")", ".", "get_local", "(", ")", "\n", "\n", "", "", "if", "mask", "is", "not", "None", ":", "\n", "            ", "x", "=", "x", "[", "mask", "]", "\n", "\n", "", "y", "=", "self", ".", "_H", ".", "dot", "(", "x", ")", "\n", "\n", "if", "VectorComponent", "is", "not", "None", "and", "TensorComponent", "is", "not", "None", ":", "\n", "            ", "raise", "Exception", "(", "\"Either Tensor or Vector.\"", ")", "\n", "\n", "", "if", "VectorComponent", "is", "not", "None", ":", "\n", "            ", "y", "=", "y", "[", "VectorComponent", ":", ":", "self", ".", "spacedim", "]", "\n", "", "elif", "TensorComponent", "is", "not", "None", ":", "\n", "            ", "if", "TensorSymmetry", ":", "\n", "                ", "y", "=", "y", "[", "TensorComponent", ":", ":", "3", "]", "\n", "", "else", ":", "\n", "                ", "y", "=", "y", "[", "TensorComponent", ":", ":", "4", "]", "\n", "\n", "", "", "if", "self", ".", "_shape", "is", "not", "None", "and", "format", "==", "\"GRID\"", ":", "\n", "            ", "return", "reshape", "(", "y", ",", "self", ".", "_shape", ")", "\n", "\n", "", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.fawkes.Probe.Probe.EvaluateReference": [[169, 184], ["numpy.zeros", "enumerate", "Probe.Probe._f", "enumerate", "dolfin.Point", "enumerate", "Probe.Probe._f", "dolfin.Point", "Probe.Probe._f", "dolfin.Point"], "methods", ["None"], ["", "def", "EvaluateReference", "(", "self", ",", "VectorComponent", "=", "None", ",", "TensorComponent", "=", "None", ")", ":", "\n", "\n", "        ", "y", "=", "zeros", "(", "self", ".", "_points", ".", "shape", "[", "0", "]", ")", "\n", "\n", "if", "VectorComponent", "is", "None", "and", "TensorComponent", "is", "None", ":", "\n", "            ", "for", "i", ",", "row", "in", "enumerate", "(", "self", ".", "_points", ")", ":", "\n", "                ", "y", "[", "i", "]", "=", "self", ".", "_f", "(", "Point", "(", "row", ")", ")", "\n", "", "", "elif", "VectorComponent", "is", "not", "None", ":", "\n", "            ", "for", "i", ",", "row", "in", "enumerate", "(", "self", ".", "_points", ")", ":", "\n", "                ", "y", "[", "i", "]", "=", "self", ".", "_f", "(", "Point", "(", "row", ")", ")", "[", "VectorComponent", "]", "\n", "", "", "elif", "TensorComponent", "is", "not", "None", ":", "\n", "            ", "for", "i", ",", "row", "in", "enumerate", "(", "self", ".", "_points", ")", ":", "\n", "                ", "y", "[", "i", "]", "=", "self", ".", "_f", "(", "Point", "(", "row", ")", ")", "[", "TensorComponent", "]", "\n", "\n", "", "", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.fawkes.Probe.Probe.BasisFunctionMatrix": [[185, 188], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "BasisFunctionMatrix", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_H", "\n", "", "", ""]], "home.repos.pwc.inspect_result.bdevl_SMO.fawkes.utils.ExtractDirichletValues": [[9, 26], ["numpy.array", "numpy.array", "numpy.unique", "isinstance", "bc.get_boundary_values().keys", "bc.get_boundary_values().values", "bc.get_boundary_values", "bc.get_boundary_values"], "function", ["home.repos.pwc.inspect_result.bdevl_SMO.lamp.metrics.MetricEnsemble.keys"], ["self", ".", "_args", "=", "args", "\n", "self", ".", "_kwargs", "=", "kwargs", "\n", "self", ".", "_results", "=", "None", "\n", "self", ".", "_exception", "=", "None", "\n", "\n", "", "def", "compute", "(", "self", ")", ":", "\n", "\n", "        ", "if", "self", ".", "_results", "is", "None", ":", "\n", "            ", "try", ":", "\n", "                ", "self", ".", "_results", "=", "self", ".", "_f", "(", "*", "self", ".", "_args", ",", "**", "self", ".", "_kwargs", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                ", "self", ".", "_exception", "=", "e", "\n", "\n", "", "", "if", "not", "self", ".", "_catch_exceptions", "and", "self", ".", "_exception", "is", "not", "None", ":", "\n", "            ", "raise", "self", ".", "_exception", "\n", "\n", "", "", "def", "result", "(", "self", ")", ":", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.fawkes.utils.ConvertFenicsBackendToScipyCSRSparse": [[28, 32], ["fenics.as_backend_type().mat", "scipy.sparse.csr_matrix", "fenics.as_backend_type", "df.as_backend_type().mat.getValuesCSR"], "function", ["None"], ["            ", "self", ".", "compute", "(", ")", "\n", "\n", "", "if", "self", ".", "_exception", "is", "not", "None", ":", "\n", "            ", "raise", "self", ".", "_exception", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.fawkes.utils.ConvertFenicsBackendToScipyCOOSparse": [[34, 37], ["ConvertFenicsBackendToScipyCSRSparse().tocoo", "utils.ConvertFenicsBackendToScipyCSRSparse"], "function", ["home.repos.pwc.inspect_result.bdevl_SMO.fawkes.utils.ConvertFenicsBackendToScipyCSRSparse"], ["\n", "", "def", "done", "(", "self", ")", ":", "\n", "        ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.fawkes.utils.ConstructDiscontinuousGalerkinScalarFunctionSpaceMapping": [[39, 61], ["V.mesh", "numpy.zeros", "V.dofmap", "TypeError", "fenics.Cell", "V.dim", "cell.index", "V.dofmap.cell_dofs", "V.ufl_element().family", "V.ufl_element().degree", "V.num_sub_spaces", "range", "V.mesh.num_cells", "V.ufl_element", "V.ufl_element"], "function", ["home.repos.pwc.inspect_result.bdevl_SMO.microstructure.homogenization.PoissonHomogenizer.mesh", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.Kernel.dim"], ["", "", "class", "DummyProcessPool", "(", "object", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "MAXWORKERS", "=", "None", ",", "catch_exceptions", "=", "True", ")", ":", "\n", "\n", "        ", "if", "MAXWORKERS", "is", "not", "None", ":", "\n", "            ", "warnings", ".", "warn", "(", "\n", "\"MAXWORKERS argument supplied to Dummy Process Pool has no impact\"", "\n", ")", "\n", "", "self", ".", "_catch_exceptions", "=", "True", "\n", "\n", "", "def", "activate_exceptions", "(", "self", ")", ":", "\n", "        ", "self", ".", "_catch_exceptions", "=", "False", "\n", "\n", "", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "return", "self", "\n", "\n", "", "def", "__exit__", "(", "self", ",", "exc_type", ",", "exc_val", ",", "exc_tb", ")", ":", "\n", "        ", "pass", "\n", "\n", "", "def", "submit", "(", "self", ",", "f", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "return", "DummyFuture", "(", "self", ".", "_catch_exceptions", ",", "f", ",", "args", ",", "kwargs", ")", "\n", "\n", "", "def", "shutdown", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.fawkes.utils.AssembleDGOverlap": [[63, 73], ["AssembleMeshOverlapMatrix().toarray", "range", "list", "Vc.dim", "numpy.argwhere().flatten", "utils.AssembleMeshOverlapMatrix", "range", "Vc.dim", "numpy.argwhere", "W[].flatten"], "function", ["home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.Kernel.dim", "home.repos.pwc.inspect_result.bdevl_SMO.fawkes.utils.AssembleMeshOverlapMatrix", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.Kernel.dim"], ["", "", ""]], "home.repos.pwc.inspect_result.bdevl_SMO.fawkes.utils.AssembleMeshOverlapMatrix": [[75, 126], ["Vc.mesh", "Vf.mesh", "warnings.warn", "Vc.mesh.bounding_box_tree", "numpy.zeros", "numpy.zeros", "numpy.zeros", "Vc.dofmap", "Vf.dofmap", "fenics.cells", "fenics.cells", "numpy.zeros", "range", "scipy.sparse.csr_matrix", "TypeError", "Vc.mesh.num_cells", "Vf.mesh.num_cells", "ValueError", "Vf.mesh.num_cells", "Vf.mesh.num_cells", "Vc.mesh.num_cells", "cell.volume", "meshc.bounding_box_tree.compute_first_entity_collision", "Vc.dofmap.cell_dofs", "Vf.dofmap.cell_dofs", "warnings.warn", "Vc.dim", "Vc.dim", "Vc.mesh.num_cells", "Vf.dim", "Vf.mesh.num_cells", "cell.midpoint", "cell.index", "cell.volume", "Vc.dim", "Vf.dim", "Exception", "Vc.dim", "Vf.dim", "numpy.where", "cell.index"], "function", ["home.repos.pwc.inspect_result.bdevl_SMO.microstructure.homogenization.PoissonHomogenizer.mesh", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.homogenization.PoissonHomogenizer.mesh", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.Kernel.dim", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.Kernel.dim", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.Kernel.dim", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.Kernel.dim", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.Kernel.dim", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.Kernel.dim", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.Kernel.dim"], []], "home.repos.pwc.inspect_result.bdevl_SMO.fawkes.utils.AssembleBasisFunctionMatrix": [[128, 219], ["V.num_sub_spaces", "V.mesh", "V.element", "V.element.space_dimension", "len", "PETSc.Mat().createAIJ.setUp", "PETSc.Mat().createAIJ.assemblyBegin", "V.dofmap", "V.mesh.bounding_box_tree", "enumerate", "PETSc.Mat().createAIJ.assemblyEnd", "V.dim", "Global_V.dim", "petsc4py.PETSc.Mat().createAIJ", "V.split", "petsc4py.PETSc.Mat().createAIJ", "mesh.bounding_box_tree.compute_first_entity_collision", "fenics.Cell", "df.Cell.get_vertex_coordinates", "numpy.array", "df.Cell.orientation", "V.element.evaluate_basis_all", "PETSc.Mat().createAIJ.getValuesCSR", "scipy.sparse.csr_matrix", "fenics.Point", "V.mesh.num_cells", "Exception", "V.dofmap.cell_dofs", "enumerate", "V.dofmap.cell_dofs", "PETSc.Mat().createAIJ.setValues", "ReturnType.lower", "PETSc.Mat().createAIJ.getValuesCSR", "petsc4py.PETSc.Mat", "petsc4py.PETSc.Mat", "numpy.arange", "PETSc.Mat().createAIJ.setValues", "fenics.PETScMatrix", "Exception"], "function", ["home.repos.pwc.inspect_result.bdevl_SMO.microstructure.homogenization.PoissonHomogenizer.mesh", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.Kernel.dim", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.Kernel.dim"], []], "home.repos.pwc.inspect_result.bdevl_SMO.fawkes.Expressions.ScalarExpressionFromFunction.__init__": [[6, 10], ["dolfin.UserExpression.__init__"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.__init__"], ["    ", "def", "__init__", "(", "self", ",", "f", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "self", ".", "_f", "=", "f", "\n", "super", "(", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.fawkes.Expressions.ScalarExpressionFromFunction.eval": [[11, 15], ["Expressions.ScalarExpressionFromFunction._f"], "methods", ["None"], ["", "def", "eval", "(", "self", ",", "values", ",", "x", ")", ":", "\n", "\n", "        ", "f_val", "=", "self", ".", "_f", "(", "x", ")", "\n", "values", "[", "0", "]", "=", "f_val", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.fawkes.Expressions.ScalarExpressionFromFunction.value_shape": [[16, 18], ["None"], "methods", ["None"], ["", "def", "value_shape", "(", "self", ")", ":", "\n", "        ", "return", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.fawkes.Expressions.CustomSubdomain.__init__": [[21, 24], ["Expressions.ScalarExpressionFromFunction"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "f", ")", ":", "\n", "\n", "        ", "self", ".", "_expr", "=", "ScalarExpressionFromFunction", "(", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.fawkes.Expressions.CustomSubdomain.inside": [[25, 27], ["Expressions.CustomSubdomain._expr"], "methods", ["None"], ["", "def", "inside", "(", "self", ",", "x", ",", "boundary", ")", ":", "\n", "        ", "return", "self", ".", "_expr", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.fawkes.Expressions.RadialBasisFunction.__init__": [[30, 34], ["dolfin.UserExpression.__init__"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.__init__"], ["    ", "def", "__init__", "(", "self", ",", "r0", ",", "l", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "r0", "=", "r0", "\n", "self", ".", "l", "=", "l", "\n", "super", "(", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.fawkes.Expressions.RadialBasisFunction.eval_cell": [[35, 37], ["None"], "methods", ["None"], ["", "def", "eval_cell", "(", "self", ",", "values", ",", "x", ",", "ufc_cell", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.fawkes.Expressions.RadialBasisFunction.eval": [[38, 42], ["math.exp"], "methods", ["None"], ["", "def", "eval", "(", "self", ",", "values", ",", "x", ")", ":", "\n", "\n", "        ", "T", "=", "(", "x", "[", "0", "]", "-", "self", ".", "r0", "[", "0", "]", ")", "**", "2", "+", "(", "x", "[", "1", "]", "-", "self", ".", "r0", "[", "1", "]", ")", "**", "2", "\n", "values", "[", "0", "]", "=", "math", ".", "exp", "(", "(", "-", "T", "/", "self", ".", "l", "**", "2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.fawkes.Expressions.RadialBasisFunction.value_shape": [[43, 45], ["None"], "methods", ["None"], ["", "def", "value_shape", "(", "self", ")", ":", "\n", "        ", "return", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.fawkes.Expressions.FastRadialBasisFunction": [[47, 60], ["dolfin.Constant", "dolfin.Constant", "dolfin.Expression"], "function", ["None"], ["", "", "def", "FastRadialBasisFunction", "(", "element", ")", ":", "\n", "\n", "    ", "r0", "=", "df", ".", "Constant", "(", "(", "0.5", ",", "0.5", ")", ")", "\n", "l", "=", "df", ".", "Constant", "(", "0.15", ")", "\n", "return", "(", "\n", "df", ".", "Expression", "(", "\n", "\" exp(-(pow((x[0] - r0[0]),2) + pow((x[1] - r0[1]),2))/ pow(l,2))\"", ",", "\n", "r0", "=", "r0", ",", "\n", "l", "=", "l", ",", "\n", "element", "=", "element", ",", "\n", ")", ",", "\n", "r0", ",", "\n", "l", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.plotting.HmgWrappedSampler.__init__": [[68, 75], ["factory.rf", "factory.hmg", "factory.htransform"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.AbstractObjective.rf", "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.WrapperModel.hmg", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.factories.Multiphysics32.htransform"], ["    ", "def", "__init__", "(", "self", ",", "factory", ")", ":", "\n", "\n", "        ", "self", ".", "_factory", "=", "factory", "\n", "self", ".", "_rf", ",", "_", "=", "factory", ".", "rf", "(", ")", "\n", "self", ".", "_hmg", "=", "factory", ".", "hmg", "(", ")", "\n", "self", ".", "_cutoff", "=", "factory", ".", "cutoff", "\n", "self", ".", "_htransform", "=", "factory", ".", "htransform", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.plotting.HmgWrappedSampler.set_phi": [[76, 78], ["plotting.HmgWrappedSampler._rf.set_phi"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.set_phi"], ["", "def", "set_phi", "(", "self", ",", "phi", ")", ":", "\n", "        ", "self", ".", "_rf", ".", "set_phi", "(", "phi", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.plotting.HmgWrappedSampler.sample": [[79, 98], ["torch.no_grad", "plotting.HmgWrappedSampler._rf.rsample_batch", "plotting.HmgWrappedSampler._hmg.homogenize_img", "torch.tensor", "plotting.HmgWrappedSampler._htransform", "torch.tensor.detach().cpu().numpy", "torch.tensor.detach().cpu", "torch.tensor.detach"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.rsample_batch", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.homogenization.LinearHomogenizer.homogenize_img"], ["", "def", "sample", "(", "self", ",", "N", ",", "return_Xg", "=", "False", ")", ":", "\n", "\n", "        ", "assert", "N", ">", "1", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "Xg", "=", "self", ".", "_rf", ".", "rsample_batch", "(", "N", ")", "\n", "kappas", "=", "self", ".", "_hmg", ".", "homogenize_img", "(", "self", ".", "_htransform", "(", "Xg", ")", ",", "AcknowledgeRaw", "=", "True", ")", "\n", "kappas", "=", "torch", ".", "tensor", "(", "\n", "[", "[", "kappa", "[", "t", "]", "for", "t", "in", "self", ".", "_factory", ".", "target", "]", "for", "kappa", "in", "kappas", "]", ",", "\n", "dtype", "=", "Xg", ".", "dtype", ",", "\n", "device", "=", "Xg", ".", "device", ",", "\n", ")", "\n", "\n", "X_phases", "=", "(", "Xg", ">", "self", ".", "_cutoff", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "np", ".", "float", ")", "\n", "\n", "", "if", "not", "return_Xg", ":", "\n", "            ", "return", "X_phases", ",", "kappas", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "            ", "return", "Xg", ",", "kappas", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.plotting.JointDensityPlot.__init__": [[386, 395], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "phi", ")", ":", "\n", "\n", "        ", "self", ".", "_dim", "=", "None", "\n", "self", ".", "phi", "=", "phi", "\n", "\n", "self", ".", "cmap", "=", "plt", ".", "cm", ".", "magma", "\n", "\n", "self", ".", "wmodel", "=", "None", "\n", "self", ".", "hmg", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.plotting.JointDensityPlot.__call__": [[396, 398], ["None"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.plotting.JointDensityPlot.FromPhi": [[399, 416], ["isinstance", "cls", "numpy.stack", "isinstance"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "FromPhi", "(", "cls", ",", "phi", ":", "Union", "[", "list", ",", "np", ".", "ndarray", "]", ",", "wmodel", "=", "None", ",", "hmg", "=", "None", ")", ":", "\n", "\n", "        ", "if", "isinstance", "(", "phi", ",", "list", ")", ":", "\n", "            ", "phi", "=", "np", ".", "stack", "(", "phi", ",", "0", ")", "\n", "\n", "", "assert", "(", "\n", "isinstance", "(", "phi", ",", "np", ".", "ndarray", ")", "\n", "and", "phi", ".", "ndim", "==", "2", "\n", "and", "phi", ".", "shape", "[", "1", "]", "==", "wmodel", ".", "rf", ".", "kernel", ".", "pdim", "\n", ")", "\n", "\n", "plotter", "=", "cls", "(", ")", "\n", "plotter", ".", "hmg", "=", "hmg", "\n", "plotter", ".", "wmodel", "=", "wmodel", "\n", "\n", "return", "plotter", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.plotting.JointDensityPlot.video": [[417, 484], ["trajectory.min", "trajectory.max", "genutils.MatplotlibVideo", "tqdm.tqdm.tqdm", "genutils.MatplotlibVideo.save", "trajectory.precompute_model", "enumerate", "matplotlib.figure", "matplotlib.figure", "plotting.JointDensityPlot.plot", "matplotlib.savefig", "matplotlib.savefig", "genutils.MatplotlibVideo.add_frame", "trajectory.precompute_ref", "title_generator", "objective_representation.mark_2d", "dict"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.PhiState.min", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.PhiState.max", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.Log.save", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.PhiTrajectory.precompute_model", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.utils.Gaussian2D.plot", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.plotting.savefig", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.plotting.savefig", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.PhiTrajectory.precompute_ref", "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.GaussianMultivariateTargetDistribution.mark_2d"], ["", "def", "video", "(", "\n", "self", ",", "\n", "trajectory", ",", "\n", "N_samples", "=", "64", ",", "\n", "nbins", ":", "int", "=", "50", ",", "\n", "fps", ":", "int", "=", "5", ",", "\n", "path", ":", "str", "=", "None", ",", "\n", "mode", ":", "Literal", "[", "\"model\"", ",", "\"reference\"", "]", "=", "None", ",", "\n", "dpi", "=", "150", ",", "\n", "objective_representation", "=", "None", ",", "\n", "kwargs_or", "=", "None", ",", "\n", "xlabel", "=", "None", ",", "\n", "ylabel", "=", "None", ",", "\n", "title_generator", "=", "None", ",", "\n", "output_video", "=", "True", ",", "\n", "delete_images", "=", "False", ",", "\n", ")", ":", "\n", "\n", "# assert path is not None", "\n", "        ", "assert", "mode", "is", "not", "None", "and", "mode", "in", "[", "\"model\"", ",", "\"reference\"", "]", "\n", "\n", "assert", "path", "is", "not", "None", "\n", "\n", "if", "mode", "==", "\"model\"", ":", "\n", "            ", "trajectory", ".", "precompute_model", "(", "N_samples", ")", "\n", "", "elif", "mode", "==", "\"reference\"", ":", "\n", "            ", "trajectory", ".", "precompute_ref", "(", "N_samples", ")", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "\n", "\n", "", "kappa_min", "=", "trajectory", ".", "min", "(", "mode", ")", "\n", "kappa_max", "=", "trajectory", ".", "max", "(", "mode", ")", "\n", "\n", "video", "=", "MatplotlibVideo", "(", "path", ",", "framerate", "=", "fps", ")", "\n", "\n", "for", "n", ",", "PhiState", "in", "tqdm", "(", "enumerate", "(", "trajectory", ")", ")", ":", "\n", "\n", "            ", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "\n", "title", "=", "title_generator", "(", "n", ")", "if", "title_generator", "is", "not", "None", "else", "None", "\n", "self", ".", "plot", "(", "\n", "PhiState", ",", "\n", "N_samples", ",", "\n", "nbins", "=", "nbins", ",", "\n", "kmin", "=", "kappa_min", ",", "\n", "kmax", "=", "kappa_max", ",", "\n", "mode", "=", "mode", ",", "\n", "xlabel", "=", "xlabel", ",", "\n", "ylabel", "=", "ylabel", ",", "\n", "title", "=", "title", ",", "\n", ")", "\n", "\n", "if", "objective_representation", "is", "not", "None", ":", "\n", "                ", "kwargs_or", "=", "dict", "(", ")", "if", "not", "kwargs_or", "else", "kwargs_or", "\n", "objective_representation", ".", "mark_2d", "(", "**", "kwargs_or", ")", "\n", "\n", "", "plt", ".", "savefig", "(", "\n", "path", "+", "\"P_{}.png\"", ".", "format", "(", "n", ")", ",", "\n", "dpi", "=", "dpi", ",", "\n", "bbox_inches", "=", "\"tight\"", ",", "\n", "transparent", "=", "True", ",", "\n", "pad_inches", "=", "0.08", ",", "\n", ")", "\n", "\n", "video", ".", "add_frame", "(", "fig", ",", "close_fig", "=", "True", ")", "\n", "\n", "", "video", ".", "save", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.plotting.JointDensityPlot.plot": [[485, 524], ["plotting.JointDensityPlot._density_2d", "matplotlib.pcolormesh", "matplotlib.pcolormesh", "phi_state.demand_kappas_ref", "Z.reshape", "matplotlib.colorbar", "matplotlib.colorbar", "matplotlib.title", "matplotlib.title", "matplotlib.xlabel", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.ylabel", "phi_state.demand_kappas_model"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.SMO.plotting.JointDensityPlot._density_2d", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.PhiState.demand_kappas_ref", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.PhiState.demand_kappas_model"], ["", "def", "plot", "(", "\n", "self", ",", "\n", "phi_state", ",", "\n", "N_samples", ",", "\n", "nbins", "=", "100", ",", "\n", "title", "=", "None", ",", "\n", "xlabel", "=", "None", ",", "\n", "ylabel", "=", "None", ",", "\n", "colorbar", "=", "True", ",", "\n", "kmin", "=", "None", ",", "\n", "kmax", "=", "None", ",", "\n", "mode", "=", "None", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "\n", "        ", "assert", "mode", "in", "[", "\"reference\"", ",", "\"model\"", "]", "\n", "\n", "if", "mode", "==", "\"reference\"", ":", "\n", "            ", "kappas", "=", "phi_state", ".", "demand_kappas_ref", "(", "N_samples", ")", "\n", "", "elif", "mode", "==", "\"model\"", ":", "\n", "            ", "kappas", "=", "phi_state", ".", "demand_kappas_model", "(", "N_samples", ")", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "\n", "\n", "", "X", ",", "Y", ",", "Z", "=", "self", ".", "_density_2d", "(", "kappas", ",", "nbins", "=", "nbins", ",", "kmin", "=", "kmin", ",", "kmax", "=", "kmax", ")", "\n", "h1", "=", "plt", ".", "pcolormesh", "(", "\n", "X", ",", "Y", ",", "Z", ".", "reshape", "(", "X", ".", "shape", ")", ",", "shading", "=", "\"auto\"", ",", "cmap", "=", "self", ".", "cmap", ",", "**", "kwargs", "\n", ")", "\n", "if", "colorbar", ":", "\n", "            ", "plt", ".", "colorbar", "(", "h1", ")", "\n", "\n", "", "if", "title", "is", "not", "None", ":", "\n", "            ", "plt", ".", "title", "(", "title", ")", "\n", "\n", "", "if", "xlabel", "is", "not", "None", ":", "\n", "            ", "plt", ".", "xlabel", "(", "xlabel", ")", "\n", "\n", "", "if", "ylabel", "is", "not", "None", ":", "\n", "            ", "plt", ".", "ylabel", "(", "ylabel", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.plotting.JointDensityPlot._establish_global_bounds": [[526, 542], ["isinstance", "numpy.stack.reshape", "numpy.stack", "isinstance", "numpy.stack", "isinstance", "numpy.stack.min", "numpy.stack.max"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.PhiState.min", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.PhiState.max"], ["", "", "@", "classmethod", "\n", "def", "_establish_global_bounds", "(", "self", ",", "kappas", ")", "->", "np", ".", "ndarray", ":", "\n", "\n", "        ", "assert", "(", "\n", "isinstance", "(", "kappas", ",", "list", ")", "\n", "or", "isinstance", "(", "kappas", ",", "np", ".", "ndarray", ")", "\n", "and", "kappas", ".", "ndim", "==", "3", "\n", ")", "\n", "\n", "if", "isinstance", "(", "kappas", ",", "list", ")", ":", "\n", "            ", "kappas", "=", "np", ".", "stack", "(", "kappas", ",", "0", ")", "\n", "\n", "", "kappas", "=", "kappas", ".", "reshape", "(", "-", "1", ",", "kappas", ".", "shape", "[", "2", "]", ")", "\n", "kappas_bounds", "=", "np", ".", "stack", "(", "(", "kappas", ".", "min", "(", "0", ")", ",", "kappas", ".", "max", "(", "0", ")", ")", ",", "axis", "=", "1", ")", "\n", "\n", "return", "kappas_bounds", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.plotting.JointDensityPlot._density_2d": [[543, 568], ["scipy.stats.kde.gaussian_kde", "scipy.stats.kde.gaussian_kde.", "isinstance", "numpy.vstack", "numpy.stack().reshape().min", "numpy.stack().reshape().max", "xi.flatten", "yi.flatten", "numpy.stack().reshape", "numpy.stack().reshape", "numpy.stack", "numpy.stack"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.PhiState.min", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.PhiState.max"], ["", "@", "classmethod", "\n", "def", "_density_2d", "(", "cls", ",", "kappas", ":", "np", ".", "ndarray", ",", "nbins", "=", "100", ",", "offset", "=", "1", ",", "kmin", "=", "None", ",", "kmax", "=", "None", ")", ":", "\n", "\n", "        ", "assert", "(", "\n", "isinstance", "(", "kappas", ",", "np", ".", "ndarray", ")", "and", "kappas", ".", "ndim", "==", "2", "and", "kappas", ".", "shape", "[", "1", "]", "==", "2", "\n", ")", ",", "\"density estimate failed\"", "\n", "\n", "kmin", "=", "(", "\n", "np", ".", "stack", "(", "kappas", ")", ".", "reshape", "(", "-", "1", ",", "kappas", ".", "shape", "[", "1", "]", ")", ".", "min", "(", "0", ")", "-", "offset", "\n", "if", "kmin", "is", "None", "\n", "else", "kmin", "\n", ")", "\n", "kmax", "=", "(", "\n", "np", ".", "stack", "(", "kappas", ")", ".", "reshape", "(", "-", "1", ",", "kappas", ".", "shape", "[", "1", "]", ")", ".", "max", "(", "0", ")", "+", "offset", "\n", "if", "kmax", "is", "None", "\n", "else", "kmax", "\n", ")", "\n", "\n", "kde_", "=", "kde", ".", "gaussian_kde", "(", "[", "kappas", "[", ":", ",", "0", "]", ",", "kappas", "[", ":", ",", "1", "]", "]", ")", "\n", "xi", ",", "yi", "=", "np", ".", "mgrid", "[", "\n", "kmin", "[", "0", "]", ":", "kmax", "[", "0", "]", ":", "nbins", "*", "1j", ",", "kmin", "[", "1", "]", ":", "kmax", "[", "1", "]", ":", "nbins", "*", "1j", "\n", "]", "\n", "zi", "=", "kde_", "(", "np", ".", "vstack", "(", "[", "xi", ".", "flatten", "(", ")", ",", "yi", ".", "flatten", "(", ")", "]", ")", ")", "\n", "\n", "return", "xi", ",", "yi", ",", "zi", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.plotting.savefig_tikz": [[26, 41], ["tikzplotlib.save", "matplotlib.savefig", "genutils.ensure_folder", "genutils.ensure_folder", "matplotlib.close"], "function", ["home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.Log.save", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.plotting.savefig", "home.repos.pwc.inspect_result.bdevl_SMO.None.genutils.ensure_folder", "home.repos.pwc.inspect_result.bdevl_SMO.None.genutils.ensure_folder"], ["def", "savefig_tikz", "(", "fig", ",", "plotdir", ",", "name", ",", "uuid", "=", "None", ",", "close_fig", "=", "True", ")", ":", "\n", "\n", "    ", "if", "uuid", "is", "not", "None", ":", "\n", "        ", "ensure_folder", "(", "plotdir", "+", "uuid", ")", "\n", "savename", "=", "plotdir", "+", "uuid", "+", "\"/\"", "+", "name", "\n", "", "else", ":", "\n", "        ", "plotdir", "=", "ensure_folder", "(", "plotdir", ")", "\n", "savename", "=", "plotdir", "+", "name", "\n", "\n", "", "tikzplotlib", ".", "save", "(", "savename", "+", "\".tex\"", ",", "axis_height", "=", "\"\\\\figH\"", ",", "axis_width", "=", "\"\\\\figW\"", ")", "\n", "\n", "plt", ".", "savefig", "(", "savename", "+", "\".png\"", ",", "dpi", "=", "150", ")", "\n", "\n", "if", "close_fig", ":", "\n", "        ", "plt", ".", "close", "(", "fig", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.plotting.savefig": [[43, 65], ["genutils.ensure_folder", "matplotlib.savefig", "matplotlib.savefig", "matplotlib.close"], "function", ["home.repos.pwc.inspect_result.bdevl_SMO.None.genutils.ensure_folder", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.plotting.savefig", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.plotting.savefig"], ["", "", "def", "savefig", "(", "fig", ",", "plotdir", ",", "name", ",", "uuid", ",", "close_fig", ")", ":", "\n", "\n", "    ", "ensure_folder", "(", "plotdir", "+", "uuid", ")", "\n", "\n", "plt", ".", "savefig", "(", "\n", "plotdir", "+", "uuid", "+", "\"/\"", "+", "name", "+", "\".png\"", ",", "\n", "dpi", "=", "300", ",", "\n", "bbox_inches", "=", "\"tight\"", ",", "\n", "transparent", "=", "True", ",", "\n", "pad_inches", "=", "0.08", ",", "\n", ")", "\n", "\n", "plt", ".", "savefig", "(", "\n", "plotdir", "+", "uuid", "+", "\"/\"", "+", "name", "+", "\".pdf\"", ",", "\n", "dpi", "=", "300", ",", "\n", "bbox_inches", "=", "\"tight\"", ",", "\n", "transparent", "=", "True", ",", "\n", "pad_inches", "=", "0.08", ",", "\n", ")", "\n", "\n", "if", "close_fig", ":", "\n", "        ", "plt", ".", "close", "(", "fig", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.plotting.compare_microstructures_splitvf": [[100, 202], ["matplotlib.subplots", "plotting.HmgWrappedSampler", "plotting.HmgWrappedSampler.set_phi", "plotting.HmgWrappedSampler.sample", "plotting.HmgWrappedSampler", "plotting.HmgWrappedSampler.set_phi", "plotting.HmgWrappedSampler.sample", "range", "plotting.HmgWrappedSampler.set_phi", "plotting.HmgWrappedSampler.set_phi", "plotting.HmgWrappedSampler.sample", "plotting.HmgWrappedSampler.sample", "range", "zip", "int", "int", "matplotlib.sca", "plotting.imshow_grayscale", "matplotlib.gca().set_xticks", "matplotlib.gca().set_yticks", "matplotlib.xlabel", "int", "int", "matplotlib.sca", "plotting.imshow_grayscale", "matplotlib.gca().set_xticks", "matplotlib.gca().set_yticks", "matplotlib.xlabel", "str", "ax.set_ylabel", "plotting.grayscale_colorbar", "matplotlib.title", "X_init_A[].squeeze", "kappas_init_A[].item", "kappas_init_A[].item", "X_init_B[].squeeze", "kappas_init_B[].item", "kappas_init_B[].item", "X_conv_A[].squeeze", "kappas_conv_A[].item", "kappas_conv_A[].item", "X_conv_B[].squeeze", "kappas_conv_B[].item", "kappas_conv_B[].item", "matplotlib.title", "int", "matplotlib.gca", "matplotlib.gca", "int", "matplotlib.gca", "matplotlib.gca"], "function", ["home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.set_phi", "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.GaussianMultivariateTargetDistribution.sample", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.set_phi", "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.GaussianMultivariateTargetDistribution.sample", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.set_phi", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.set_phi", "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.GaussianMultivariateTargetDistribution.sample", "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.GaussianMultivariateTargetDistribution.sample", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.plotting.imshow_grayscale", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.plotting.imshow_grayscale", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.plotting.grayscale_colorbar"], ["", "", "", "def", "compare_microstructures_splitvf", "(", "\n", "factories", ",", "\n", "phi_init", ",", "\n", "phi_conv", ",", "\n", "N_examples", "=", "4", ",", "\n", "figsize", "=", "(", "9.5", ",", "4.5", ")", ",", "\n", "colorbar", "=", "False", ",", "\n", "final_iteration", "=", "None", ",", "\n", "cmap", "=", "None", ",", "\n", "labels", "=", "None", ",", "\n", "fontsize_xlabel", "=", "None", ",", "\n", ")", ":", "\n", "\n", "    ", "fig", ",", "axi", "=", "plt", ".", "subplots", "(", "2", ",", "N_examples", ",", "figsize", "=", "figsize", ")", "\n", "\n", "assert", "N_examples", "in", "[", "4", ",", "6", "]", "\n", "\n", "sampler_A", "=", "HmgWrappedSampler", "(", "factories", "[", "0", "]", ")", "\n", "sampler_A", ".", "set_phi", "(", "phi_init", "[", "0", "]", ")", "\n", "X_init_A", ",", "kappas_init_A", "=", "sampler_A", ".", "sample", "(", "int", "(", "N_examples", "/", "2", ")", ")", "\n", "\n", "sampler_B", "=", "HmgWrappedSampler", "(", "factories", "[", "1", "]", ")", "\n", "sampler_B", ".", "set_phi", "(", "phi_init", "[", "1", "]", ")", "\n", "X_init_B", ",", "kappas_init_B", "=", "sampler_B", ".", "sample", "(", "int", "(", "N_examples", "/", "2", ")", ")", "\n", "\n", "for", "n", "in", "range", "(", "N_examples", ")", ":", "\n", "\n", "        ", "plt", ".", "sca", "(", "axi", "[", "0", ",", "n", "]", ")", "\n", "\n", "if", "N_examples", "==", "6", "and", "n", "==", "1", ":", "\n", "            ", "plt", ".", "title", "(", "r\"(a) volume fraction : 0.5\"", ")", "\n", "", "elif", "N_examples", "==", "6", "and", "n", "==", "4", ":", "\n", "            ", "plt", ".", "title", "(", "r\"(b) volume fraction : 0.3\"", ")", "\n", "\n", "", "if", "n", "<=", "(", "int", "(", "N_examples", "/", "2", ")", "-", "1", ")", ":", "\n", "            ", "x", "=", "X_init_A", "[", "n", "]", ".", "squeeze", "(", ")", "\n", "kappa1", "=", "kappas_init_A", "[", "n", ",", "0", "]", ".", "item", "(", ")", "\n", "kappa2", "=", "kappas_init_A", "[", "n", ",", "1", "]", ".", "item", "(", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "X_init_B", "[", "n", "%", "2", "]", ".", "squeeze", "(", ")", "\n", "kappa1", "=", "kappas_init_B", "[", "n", "%", "2", ",", "0", "]", ".", "item", "(", ")", "\n", "kappa2", "=", "kappas_init_B", "[", "n", "%", "2", ",", "1", "]", ".", "item", "(", ")", "\n", "\n", "", "imshow_grayscale", "(", "x", ",", "cmap", "=", "cmap", ")", "\n", "plt", ".", "gca", "(", ")", ".", "set_xticks", "(", "[", "]", ",", "[", "]", ")", "\n", "plt", ".", "gca", "(", ")", ".", "set_yticks", "(", "[", "]", ",", "[", "]", ")", "\n", "xlabel", "=", "(", "\n", "r\"$\\kappa_1 = {:.1f}$\"", ".", "format", "(", "kappa1", ")", "\n", "+", "\"\"", "\n", "+", "\" $\\kappa_2 = {:.1f}$\"", ".", "format", "(", "kappa2", ")", "\n", ")", "\n", "plt", ".", "xlabel", "(", "xlabel", ",", "fontsize", "=", "fontsize_xlabel", ")", "\n", "\n", "", "sampler_A", ".", "set_phi", "(", "phi_conv", "[", "0", "]", ")", "\n", "sampler_B", ".", "set_phi", "(", "phi_conv", "[", "1", "]", ")", "\n", "\n", "X_conv_A", ",", "kappas_conv_A", "=", "sampler_A", ".", "sample", "(", "int", "(", "N_examples", "/", "2", ")", ")", "\n", "X_conv_B", ",", "kappas_conv_B", "=", "sampler_B", ".", "sample", "(", "int", "(", "N_examples", "/", "2", ")", ")", "\n", "\n", "for", "n", "in", "range", "(", "N_examples", ")", ":", "\n", "        ", "plt", ".", "sca", "(", "axi", "[", "1", ",", "n", "]", ")", "\n", "\n", "if", "n", "<=", "(", "int", "(", "N_examples", "/", "2", ")", "-", "1", ")", ":", "\n", "            ", "x", "=", "X_conv_A", "[", "n", "]", ".", "squeeze", "(", ")", "\n", "kappa1", "=", "kappas_conv_A", "[", "n", ",", "0", "]", ".", "item", "(", ")", "\n", "kappa2", "=", "kappas_conv_A", "[", "n", ",", "1", "]", ".", "item", "(", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "X_conv_B", "[", "n", "%", "2", "]", ".", "squeeze", "(", ")", "\n", "kappa1", "=", "kappas_conv_B", "[", "n", "%", "2", ",", "0", "]", ".", "item", "(", ")", "\n", "kappa2", "=", "kappas_conv_B", "[", "n", "%", "2", ",", "1", "]", ".", "item", "(", ")", "\n", "\n", "", "img", "=", "imshow_grayscale", "(", "x", ",", "cmap", "=", "cmap", ")", "\n", "plt", ".", "gca", "(", ")", ".", "set_xticks", "(", "[", "]", ",", "[", "]", ")", "\n", "plt", ".", "gca", "(", ")", ".", "set_yticks", "(", "[", "]", ",", "[", "]", ")", "\n", "xlabel", "=", "(", "\n", "r\"$\\kappa_1 = {:.1f}$\"", ".", "format", "(", "kappa1", ")", "\n", "+", "\"\"", "\n", "+", "\" $\\kappa_2 = {:.1f}$\"", ".", "format", "(", "kappa2", ")", "\n", ")", "\n", "plt", ".", "xlabel", "(", "xlabel", ",", "fontsize", "=", "fontsize_xlabel", ")", "\n", "\n", "# https://stackoverflow.com/questions/25812255/row-and-column-headers-in-matplotlibs-subplots", "\n", "", "if", "final_iteration", "is", "None", ":", "\n", "# generic designator", "\n", "        ", "final_iteration", "=", "\"L\"", "\n", "", "else", ":", "\n", "        ", "final_iteration", "=", "str", "(", "final_iteration", ")", "\n", "\n", "", "rows", "=", "[", "\n", "r\"$p ( \\bm{x} | \\varphi^{(0)} )$\"", ",", "\n", "r\"$p ( \\bm{{x}} | \\varphi^*_{{\\mathcal{{M}},\\mathcal{{D}}^{{({})}}}} )$\"", ".", "format", "(", "\n", "final_iteration", "\n", ")", ",", "\n", "]", "\n", "\n", "for", "ax", ",", "row", "in", "zip", "(", "axi", "[", ":", ",", "0", "]", ",", "rows", ")", ":", "\n", "        ", "ax", ".", "set_ylabel", "(", "row", ",", "rotation", "=", "90", ",", "size", "=", "\"large\"", ",", "labelpad", "=", "10", ")", "# size='large'", "\n", "\n", "", "if", "colorbar", ":", "\n", "        ", "grayscale_colorbar", "(", "img", ",", "fig", ",", "adjust", "=", "True", ",", "labels", "=", "labels", ")", "\n", "\n", "", "return", "fig", ",", "axi", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.plotting.compare_microstructures_modified": [[204, 269], ["matplotlib.subplots", "plotting.HmgWrappedSampler", "plotting.HmgWrappedSampler.set_phi", "plotting.HmgWrappedSampler.sample", "range", "plotting.HmgWrappedSampler.set_phi", "plotting.HmgWrappedSampler.sample", "range", "zip", "matplotlib.sca", "X_init[].squeeze", "kappas_init[].item", "kappas_init[].item", "plotting.imshow_grayscale", "matplotlib.gca().set_xticks", "matplotlib.gca().set_yticks", "matplotlib.xlabel", "matplotlib.sca", "X_conv[].squeeze", "kappas_conv[].item", "kappas_conv[].item", "plotting.imshow_grayscale", "matplotlib.gca().set_xticks", "matplotlib.gca().set_yticks", "matplotlib.xlabel", "str", "ax.set_ylabel", "plotting.grayscale_colorbar", "matplotlib.gca", "matplotlib.gca", "matplotlib.gca", "matplotlib.gca"], "function", ["home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.set_phi", "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.GaussianMultivariateTargetDistribution.sample", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.set_phi", "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.GaussianMultivariateTargetDistribution.sample", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.plotting.imshow_grayscale", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.plotting.imshow_grayscale", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.plotting.grayscale_colorbar"], ["", "def", "compare_microstructures_modified", "(", "\n", "factory", ",", "\n", "phi_init", ",", "\n", "phi_conv", ",", "\n", "N_examples", "=", "4", ",", "\n", "figsize", "=", "(", "9.5", ",", "4.5", ")", ",", "\n", "colorbar", "=", "False", ",", "\n", "final_iteration", "=", "None", ",", "\n", "multiphysics", "=", "False", ",", "\n", "cmap", "=", "None", ",", "\n", "labels", "=", "None", ",", "\n", ")", ":", "\n", "\n", "    ", "fig", ",", "axi", "=", "plt", ".", "subplots", "(", "2", ",", "N_examples", ",", "figsize", "=", "(", "9", ",", "4.5", ")", ")", "\n", "\n", "sampler", "=", "HmgWrappedSampler", "(", "factory", ")", "\n", "sampler", ".", "set_phi", "(", "phi_init", ")", "\n", "X_init", ",", "kappas_init", "=", "sampler", ".", "sample", "(", "N_examples", ")", "\n", "\n", "for", "n", "in", "range", "(", "N_examples", ")", ":", "\n", "\n", "        ", "plt", ".", "sca", "(", "axi", "[", "0", ",", "n", "]", ")", "\n", "x", "=", "X_init", "[", "n", "]", ".", "squeeze", "(", ")", "\n", "kappa1", "=", "kappas_init", "[", "n", ",", "0", "]", ".", "item", "(", ")", "\n", "kappa2", "=", "kappas_init", "[", "n", ",", "1", "]", ".", "item", "(", ")", "\n", "imshow_grayscale", "(", "x", ",", "cmap", "=", "cmap", ")", "\n", "plt", ".", "gca", "(", ")", ".", "set_xticks", "(", "[", "]", ",", "[", "]", ")", "\n", "plt", ".", "gca", "(", ")", ".", "set_yticks", "(", "[", "]", ",", "[", "]", ")", "\n", "plt", ".", "xlabel", "(", "r\"$\\kappa_1 = {:.2f}, \\kappa_2 = {:.2f}$\"", ".", "format", "(", "kappa1", ",", "kappa2", ")", ")", "\n", "\n", "", "sampler", ".", "set_phi", "(", "phi_conv", ")", "\n", "X_conv", ",", "kappas_conv", "=", "sampler", ".", "sample", "(", "N_examples", ")", "\n", "\n", "for", "n", "in", "range", "(", "N_examples", ")", ":", "\n", "\n", "        ", "plt", ".", "sca", "(", "axi", "[", "1", ",", "n", "]", ")", "\n", "x", "=", "X_conv", "[", "n", "]", ".", "squeeze", "(", ")", "\n", "kappa1", "=", "kappas_conv", "[", "n", ",", "0", "]", ".", "item", "(", ")", "\n", "kappa2", "=", "kappas_conv", "[", "n", ",", "1", "]", ".", "item", "(", ")", "\n", "img", "=", "imshow_grayscale", "(", "x", ",", "cmap", "=", "cmap", ")", "\n", "plt", ".", "gca", "(", ")", ".", "set_xticks", "(", "[", "]", ",", "[", "]", ")", "\n", "plt", ".", "gca", "(", ")", ".", "set_yticks", "(", "[", "]", ",", "[", "]", ")", "\n", "plt", ".", "xlabel", "(", "r\"$\\kappa_1 = {:.2f}, \\kappa_2 = {:.2f}$\"", ".", "format", "(", "kappa1", ",", "kappa2", ")", ")", "\n", "\n", "# https://stackoverflow.com/questions/25812255/row-and-column-headers-in-matplotlibs-subplots", "\n", "", "if", "final_iteration", "is", "None", ":", "\n", "# generic designator", "\n", "        ", "final_iteration", "=", "\"L\"", "\n", "", "else", ":", "\n", "        ", "final_iteration", "=", "str", "(", "final_iteration", ")", "\n", "\n", "", "rows", "=", "[", "\n", "r\"$p \\left( \\bm{x} \\middle| \\varphi^{(0)} \\right)$\"", ",", "\n", "r\"$p \\left( \\bm{{x}} \\middle| \\varphi^*_{{\\mathcal{{M}},\\mathcal{{D}}^{{({})}}}} \\right)$\"", ".", "format", "(", "\n", "final_iteration", "\n", ")", ",", "\n", "]", "\n", "\n", "for", "ax", ",", "row", "in", "zip", "(", "axi", "[", ":", ",", "0", "]", ",", "rows", ")", ":", "\n", "        ", "ax", ".", "set_ylabel", "(", "row", ",", "rotation", "=", "90", ",", "size", "=", "\"large\"", ",", "labelpad", "=", "10", ")", "# size='large'", "\n", "\n", "", "if", "colorbar", ":", "\n", "        ", "grayscale_colorbar", "(", "img", ",", "fig", ",", "adjust", "=", "True", ",", "labels", "=", "labels", ")", "\n", "\n", "", "return", "fig", ",", "axi", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.plotting.compare_microstructures": [[271, 326], ["matplotlib.subplots", "factory.rf", "rf_plot.set_phi", "range", "rf_plot.set_phi", "range", "zip", "matplotlib.sca", "rf_plot.rsample().detach().cpu().numpy().squeeze", "plotting.imshow_grayscale", "matplotlib.gca().set_xticks", "matplotlib.gca().set_yticks", "matplotlib.sca", "rf_plot.rsample().detach().cpu().numpy().squeeze", "plotting.imshow_grayscale", "matplotlib.gca().set_xticks", "matplotlib.gca().set_yticks", "str", "ax.set_ylabel", "plotting.grayscale_colorbar", "rf_plot.rsample().detach().cpu().numpy", "matplotlib.gca", "matplotlib.gca", "rf_plot.rsample().detach().cpu().numpy", "matplotlib.gca", "matplotlib.gca", "rf_plot.rsample().detach().cpu", "rf_plot.rsample().detach().cpu", "rf_plot.rsample().detach", "rf_plot.rsample().detach", "rf_plot.rsample", "rf_plot.rsample"], "function", ["home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.AbstractObjective.rf", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.set_phi", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.set_phi", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.plotting.imshow_grayscale", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.plotting.imshow_grayscale", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.plotting.grayscale_colorbar", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.rsample", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.rsample"], ["", "def", "compare_microstructures", "(", "\n", "factory", ",", "\n", "phi_init", ",", "\n", "phi_conv", ",", "\n", "N_examples", "=", "4", ",", "\n", "figsize", "=", "(", "9.5", ",", "4.5", ")", ",", "\n", "colorbar", "=", "False", ",", "\n", "final_iteration", "=", "None", ",", "\n", ")", ":", "\n", "\n", "    ", "fig", ",", "axi", "=", "plt", ".", "subplots", "(", "2", ",", "N_examples", ",", "figsize", "=", "(", "9", ",", "4.5", ")", ")", "\n", "\n", "rf_plot", ",", "_", "=", "factory", ".", "rf", "(", ")", "\n", "rf_plot", ".", "set_phi", "(", "phi_init", ")", "\n", "\n", "for", "n", "in", "range", "(", "N_examples", ")", ":", "\n", "\n", "        ", "plt", ".", "sca", "(", "axi", "[", "0", ",", "n", "]", ")", "\n", "x", "=", "rf_plot", ".", "rsample", "(", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "squeeze", "(", ")", "\n", "imshow_grayscale", "(", "x", ">", "factory", ".", "cutoff", ")", "\n", "plt", ".", "gca", "(", ")", ".", "set_xticks", "(", "[", "]", ",", "[", "]", ")", "\n", "plt", ".", "gca", "(", ")", ".", "set_yticks", "(", "[", "]", ",", "[", "]", ")", "\n", "\n", "", "rf_plot", ".", "set_phi", "(", "phi_conv", ")", "\n", "\n", "for", "n", "in", "range", "(", "N_examples", ")", ":", "\n", "        ", "plt", ".", "sca", "(", "axi", "[", "1", ",", "n", "]", ")", "\n", "\n", "x", "=", "rf_plot", ".", "rsample", "(", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "squeeze", "(", ")", "\n", "img", "=", "imshow_grayscale", "(", "x", ">", "factory", ".", "cutoff", ")", "\n", "plt", ".", "gca", "(", ")", ".", "set_xticks", "(", "[", "]", ",", "[", "]", ")", "\n", "plt", ".", "gca", "(", ")", ".", "set_yticks", "(", "[", "]", ",", "[", "]", ")", "\n", "\n", "# https://stackoverflow.com/questions/25812255/row-and-column-headers-in-matplotlibs-subplots", "\n", "\n", "", "if", "final_iteration", "is", "None", ":", "\n", "# generic designator", "\n", "        ", "final_iteration", "=", "\"L\"", "\n", "", "else", ":", "\n", "        ", "final_iteration", "=", "str", "(", "final_iteration", ")", "\n", "\n", "", "rows", "=", "[", "\n", "r\"$p \\left( \\bm{x} \\middle| \\varphi^{(0)} \\right)$\"", ",", "\n", "r\"$p \\left( \\bm{{x}} \\middle| \\varphi^*_{{\\mathcal{{M}},\\mathcal{{D}}^{{({})}}}} \\right)$\"", ".", "format", "(", "\n", "final_iteration", "\n", ")", ",", "\n", "]", "\n", "\n", "for", "ax", ",", "row", "in", "zip", "(", "axi", "[", ":", ",", "0", "]", ",", "rows", ")", ":", "\n", "        ", "ax", ".", "set_ylabel", "(", "row", ",", "rotation", "=", "90", ",", "size", "=", "\"large\"", ",", "labelpad", "=", "10", ")", "# size='large'", "\n", "\n", "", "if", "colorbar", ":", "\n", "        ", "grayscale_colorbar", "(", "img", ",", "fig", ",", "adjust", "=", "True", ")", "\n", "\n", "", "return", "fig", ",", "axi", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.plotting.binary_colormap": [[328, 331], ["matplotlib.colors.ListedColormap"], "function", ["None"], ["", "def", "binary_colormap", "(", ")", ":", "\n", "\n", "    ", "return", "colors", ".", "ListedColormap", "(", "[", "\"#1a1a1a\"", ",", "\"#e6e6e6\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.plotting.imshow_grayscale": [[333, 343], ["x.squeeze.squeeze", "matplotlib.imshow", "isinstance", "plotting.binary_colormap"], "function", ["home.repos.pwc.inspect_result.bdevl_SMO.SMO.plotting.binary_colormap"], ["", "def", "imshow_grayscale", "(", "x", ",", "cmap", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "\n", "    ", "x", "=", "x", ".", "squeeze", "(", ")", "\n", "assert", "isinstance", "(", "x", ",", "np", ".", "ndarray", ")", "and", "x", ".", "ndim", "==", "2", "\n", "\n", "cmap", "=", "binary_colormap", "(", ")", "if", "cmap", "is", "None", "else", "cmap", "\n", "\n", "img", "=", "plt", ".", "imshow", "(", "x", ",", "cmap", "=", "cmap", ",", "**", "kwargs", ")", "\n", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.plotting.grayscale_colorbar": [[345, 383], ["plotting.binary_colormap", "matplotlib.colors.BoundaryNorm", "plt.colorbar.set_label", "fig.subplots_adjust", "fig.add_axes", "matplotlib.colorbar", "matplotlib.colorbar", "plt.colorbar.ax.set_yticklabels"], "function", ["home.repos.pwc.inspect_result.bdevl_SMO.SMO.plotting.binary_colormap"], ["", "def", "grayscale_colorbar", "(", "\n", "img", ",", "fig", "=", "None", ",", "adjust", "=", "False", ",", "labels", "=", "None", ",", "cbar_title", "=", "r\"\\textbf{phases}\"", "\n", ")", ":", "\n", "\n", "    ", "cmap", "=", "binary_colormap", "(", ")", "\n", "bounds", "=", "[", "0", "-", "0.50", ",", "0.5", ",", "1", "+", "0.50", "]", "\n", "norm", "=", "colors", ".", "BoundaryNorm", "(", "bounds", ",", "cmap", ".", "N", ")", "\n", "\n", "if", "adjust", ":", "\n", "        ", "assert", "fig", "is", "not", "None", "\n", "fig", ".", "subplots_adjust", "(", "right", "=", "0.85", ")", "\n", "cbar_ax", "=", "fig", ".", "add_axes", "(", "[", "0.88", ",", "0.15", ",", "0.017", ",", "0.70", "]", ")", "\n", "cbar", "=", "plt", ".", "colorbar", "(", "\n", "img", ",", "\n", "cax", "=", "cbar_ax", ",", "\n", "cmap", "=", "cmap", ",", "\n", "norm", "=", "norm", ",", "\n", "boundaries", "=", "bounds", ",", "\n", "ticks", "=", "[", "0", "-", "0.10", ",", "1", "+", "0.10", "]", ",", "\n", "spacing", "=", "\"proportional\"", ",", "\n", ")", "\n", "\n", "", "else", ":", "\n", "        ", "cbar", "=", "plt", ".", "colorbar", "(", "\n", "img", ",", "\n", "cmap", "=", "cmap", ",", "\n", "norm", "=", "norm", ",", "\n", "boundaries", "=", "bounds", ",", "\n", "ticks", "=", "[", "0", ",", "1", "]", ",", "\n", "spacing", "=", "\"proportional\"", ",", "\n", ")", "\n", "\n", "", "cbar", ".", "set_label", "(", "cbar_title", ",", "rotation", "=", "90", ",", "labelpad", "=", "-", "35", ")", "\n", "\n", "if", "labels", "is", "not", "None", ":", "\n", "        ", "cbar", ".", "ax", ".", "set_yticklabels", "(", "labels", ")", "\n", "\n", "", "return", "cbar", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.plotting.PlotDensities2DUtil": [[570, 695], ["isinstance", "all", "len", "list", "range", "isinstance", "isinstance", "numpy.stack().reshape().min", "numpy.stack().reshape().max", "scipy.stats.kde.gaussian_kde", "kde.gaussian_kde.", "list.append", "NotImplementedError", "isinstance", "isinstance", "numpy.ones", "numpy.ones", "mode.lower", "matplotlib.subplots", "numpy.vstack", "matplotlib.sca", "matplotlib.contourf", "matplotlib.contour", "tuple", "tuple", "matplotlib.Rectangle", "matplotlib.gca().add_patch", "isinstance", "numpy.stack().reshape", "numpy.stack().reshape", "len", "len", "mode.lower", "matplotlib.subplots", "kde_.reshape", "kde_.reshape", "isinstance", "bounds.mean", "numpy.array", "fig.colorbar", "mode.lower", "fig.subplots_adjust", "fig.add_axes", "fig.colorbar", "xi.flatten", "yi.flatten", "matplotlib.gca", "mode.lower", "numpy.stack", "numpy.stack"], "function", ["home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.PhiState.min", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.PhiState.max", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.Log.append", "home.repos.pwc.inspect_result.bdevl_SMO.lamp.variational.DiagonalMultivariateNormal.mean"], ["", "", "def", "PlotDensities2DUtil", "(", "\n", "kappa_samples", ":", "list", ",", "\n", "nbins", "=", "300", ",", "\n", "mode", "=", "\"horizontal\"", ",", "\n", "kmin_offset", "=", "None", ",", "\n", "kmax_offset", "=", "None", ",", "\n", "bounds", "=", "None", ",", "\n", "colorbar", "=", "True", ",", "\n", "kmax_global", "=", "None", ",", "\n", "kmin_global", "=", "None", ",", "\n", "vmin", "=", "None", ",", "\n", "vmax", "=", "None", ",", "\n", "figsize", "=", "None", ",", "\n", "cmap", "=", "plt", ".", "cm", ".", "magma", ",", "\n", "filled", "=", "True", ",", "\n", ")", ":", "\n", "\n", "    ", "assert", "isinstance", "(", "kappa_samples", ",", "list", ")", "\n", "assert", "all", "(", "\n", "(", "isinstance", "(", "kappa", ",", "np", ".", "ndarray", ")", "and", "kappa", ".", "ndim", "==", "2", "and", "kappa", ".", "shape", "[", "1", "]", "==", "2", ")", "\n", "for", "kappa", "in", "kappa_samples", "\n", ")", "\n", "assert", "isinstance", "(", "nbins", ",", "int", ")", "and", "nbins", ">", "1", "\n", "assert", "mode", "in", "[", "\"horizontal\"", ",", "\"vertical\"", "]", "or", "mode", "is", "None", "\n", "\n", "# number of 'snapshots'", "\n", "N_plots", "=", "len", "(", "kappa_samples", ")", "\n", "assert", "isinstance", "(", "N_plots", ",", "int", ")", "and", "N_plots", ">=", "0", "\n", "\n", "# establish bounds", "\n", "kmin", "=", "np", ".", "stack", "(", "kappa_samples", ")", ".", "reshape", "(", "-", "1", ",", "2", ")", ".", "min", "(", "0", ")", "-", "1", "\n", "kmax", "=", "np", ".", "stack", "(", "kappa_samples", ")", ".", "reshape", "(", "-", "1", ",", "2", ")", ".", "max", "(", "0", ")", "+", "1", "\n", "\n", "# allow for offset", "\n", "if", "kmin_offset", "is", "not", "None", ":", "\n", "        ", "assert", "isinstance", "(", "kmin_offset", ",", "np", ".", "ndarray", ")", "and", "len", "(", "kmin_offset", ")", "==", "2", "\n", "kmin", "=", "kmin", "-", "kmin_offset", "\n", "", "if", "kmax_offset", "is", "not", "None", ":", "\n", "        ", "assert", "isinstance", "(", "kmax_offset", ",", "np", ".", "ndarray", ")", "and", "len", "(", "kmax_offset", ")", "==", "2", "\n", "kmin", "=", "kmin", "+", "kmax_offset", "\n", "\n", "", "if", "kmin_global", "is", "not", "None", ":", "\n", "        ", "kmin", "=", "np", ".", "ones", "(", "2", ")", "*", "kmin_global", "\n", "\n", "", "if", "kmax_global", "is", "not", "None", ":", "\n", "        ", "kmax", "=", "np", ".", "ones", "(", "2", ")", "*", "kmax_global", "\n", "\n", "", "if", "mode", "is", "None", ":", "\n", "        ", "assert", "N_plots", "==", "1", "\n", "fig", ",", "axi", "=", "None", ",", "None", "\n", "", "elif", "mode", ".", "lower", "(", ")", "==", "\"horizontal\"", ":", "\n", "\n", "        ", "figsize", "=", "figsize", "=", "(", "4.65", "*", "N_plots", ",", "4", ")", "if", "figsize", "is", "None", "else", "figsize", "\n", "fig", ",", "axi", "=", "plt", ".", "subplots", "(", "1", ",", "N_plots", ",", "figsize", "=", "figsize", ")", "\n", "\n", "", "elif", "mode", ".", "lower", "(", ")", "==", "\"vertical\"", ":", "\n", "\n", "        ", "figsize", "=", "(", "5.8", ",", "5.0", "*", "N_plots", ")", "if", "figsize", "is", "None", "else", "figsize", "\n", "fig", ",", "axi", "=", "plt", ".", "subplots", "(", "N_plots", ",", "1", ",", "figsize", "=", "figsize", ")", "\n", "\n", "", "h", "=", "list", "(", ")", "\n", "for", "n", "in", "range", "(", "N_plots", ")", ":", "\n", "\n", "        ", "if", "N_plots", ">", "1", ":", "\n", "            ", "ax", "=", "axi", "[", "n", "]", "\n", "", "else", ":", "\n", "            ", "ax", "=", "axi", "\n", "\n", "", "x", "=", "kappa_samples", "[", "n", "]", "[", ":", ",", "0", "]", "\n", "y", "=", "kappa_samples", "[", "n", "]", "[", ":", ",", "1", "]", "\n", "\n", "kde_", "=", "kde", ".", "gaussian_kde", "(", "[", "x", ",", "y", "]", ")", "\n", "xi", ",", "yi", "=", "np", ".", "mgrid", "[", "\n", "kmin", "[", "0", "]", ":", "kmax", "[", "0", "]", ":", "nbins", "*", "1j", ",", "kmin", "[", "1", "]", ":", "kmax", "[", "1", "]", ":", "nbins", "*", "1j", "\n", "]", "\n", "zi", "=", "kde_", "(", "np", ".", "vstack", "(", "[", "xi", ".", "flatten", "(", ")", ",", "yi", ".", "flatten", "(", ")", "]", ")", ")", "\n", "\n", "if", "mode", "is", "not", "None", ":", "\n", "            ", "plt", ".", "sca", "(", "ax", ")", "\n", "", "if", "filled", ":", "\n", "            ", "h1", "=", "plt", ".", "contourf", "(", "\n", "xi", ",", "yi", ",", "zi", ".", "reshape", "(", "xi", ".", "shape", ")", ",", "cmap", "=", "cmap", ",", "vmin", "=", "vmin", ",", "vmax", "=", "vmax", "\n", ")", "\n", "", "else", ":", "\n", "            ", "h1", "=", "plt", ".", "contour", "(", "\n", "xi", ",", "yi", ",", "zi", ".", "reshape", "(", "xi", ".", "shape", ")", ",", "cmap", "=", "cmap", ",", "vmin", "=", "vmin", ",", "vmax", "=", "vmax", "\n", ")", "\n", "", "h", ".", "append", "(", "h1", ")", "\n", "\n", "if", "bounds", "is", "not", "None", ":", "\n", "\n", "            ", "assert", "isinstance", "(", "bounds", ",", "np", ".", "ndarray", ")", "and", "bounds", ".", "shape", "==", "(", "2", ",", "2", ")", "\n", "midpoint", "=", "tuple", "(", "bounds", ".", "mean", "(", "1", ")", ")", "\n", "extensions", "=", "bounds", "[", ":", ",", "1", "]", "-", "bounds", "[", ":", ",", "0", "]", "\n", "xy", "=", "np", ".", "array", "(", "midpoint", ")", "-", "0.5", "*", "extensions", "\n", "xy", "=", "tuple", "(", "xy", ")", "# lower left corner, anchor point", "\n", "rect", "=", "patches", ".", "Rectangle", "(", "\n", "xy", ",", "\n", "extensions", "[", "0", "]", ",", "\n", "extensions", "[", "1", "]", ",", "\n", "linewidth", "=", "1.5", ",", "\n", "edgecolor", "=", "\"g\"", ",", "\n", "facecolor", "=", "\"none\"", ",", "\n", ")", "\n", "plt", ".", "gca", "(", ")", ".", "add_patch", "(", "rect", ")", "\n", "\n", "", "if", "colorbar", ":", "\n", "            ", "if", "mode", "is", "not", "None", "and", "mode", ".", "lower", "(", ")", "==", "\"vertical\"", ":", "\n", "\n", "                ", "fig", ".", "colorbar", "(", "h1", ")", "\n", "\n", "", "", "", "if", "colorbar", ":", "\n", "\n", "        ", "if", "mode", "is", "None", ":", "\n", "            ", "pass", "\n", "\n", "", "elif", "mode", ".", "lower", "(", ")", "==", "\"horizontal\"", ":", "\n", "            ", "fig", ".", "subplots_adjust", "(", "right", "=", "0.8", ")", "\n", "cbar_ax", "=", "fig", ".", "add_axes", "(", "[", "0.85", ",", "0.15", ",", "0.05", ",", "0.7", "]", ")", "\n", "fig", ".", "colorbar", "(", "h1", ",", "cax", "=", "cbar_ax", ")", "\n", "\n", "", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"Currently can only do horizontal mode plot\"", ")", "\n", "\n", "", "return", "fig", ",", "axi", ",", "h", "\n", "", ""]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.doe.DesignOfExperiment.__init__": [[5, 9], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "N", ")", ":", "\n", "\n", "        ", "self", ".", "_dim", "=", "dim", "\n", "self", ".", "_N", "=", "N", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.doe.DesignOfExperiment.dim": [[10, 13], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "dim", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.doe.DesignOfExperiment.N": [[14, 22], ["RuntimeError"], "methods", ["None"], ["", "@", "property", "\n", "def", "N", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_N", "is", "None", ":", "\n", "            ", "raise", "RuntimeError", "(", "\n", "\"Size of Design of Experiment not yet know (not fully initialized\"", "\n", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "_N", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.doe.DesignOfExperiment.deterministic": [[23, 26], ["isinstance"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "deterministic", "(", "self", ")", ":", "\n", "        ", "return", "isinstance", "(", "self", ",", "DeterministicDesignOfExperiment", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.doe.DesignOfExperiment.__len__": [[27, 29], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_N", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.doe.DesignOfExperiment.__iter__": [[30, 32], ["None"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.doe.DesignOfExperiment.__next__": [[33, 35], ["None"], "methods", ["None"], ["", "def", "__next__", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.doe.StochasticDesignOfExperiment.__init__": [[38, 40], ["doe.DesignOfExperiment.__init__"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "N", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dim", ",", "N", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.doe.StochasticDesignOfExperiment.__iter__": [[41, 45], ["range", "doe.StochasticDesignOfExperiment.sample"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.GaussianMultivariateTargetDistribution.sample"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "\n", "        ", "for", "n", "in", "range", "(", "self", ".", "_N", ")", ":", "\n", "            ", "yield", "self", ".", "sample", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.doe.StochasticDesignOfExperiment.sample": [[46, 48], ["None"], "methods", ["None"], ["", "", "def", "sample", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.doe.UniformStochasticDesignOfExperiment.__init__": [[51, 64], ["doe.StochasticDesignOfExperiment.__init__", "len", "len", "isinstance", "numpy.array", "isinstance", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "vmin", ",", "vmax", ",", "N", ",", "method", "=", "\"lin\"", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dim", ",", "N", ")", "\n", "\n", "assert", "len", "(", "vmin", ")", "==", "len", "(", "vmax", ")", "==", "dim", "\n", "if", "not", "isinstance", "(", "vmin", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "vmin", "=", "np", ".", "array", "(", "vmin", ")", "\n", "", "if", "not", "isinstance", "(", "vmax", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "vmax", "=", "np", ".", "array", "(", "vmax", ")", "\n", "", "self", ".", "_method", "=", "method", "\n", "\n", "self", ".", "_vmin", "=", "vmin", "\n", "self", ".", "_vmax", "=", "vmax", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.doe.UniformStochasticDesignOfExperiment.Isotropic": [[65, 68], ["cls"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "Isotropic", "(", "cls", ",", "dim", ",", "vmin", ",", "vmax", ",", "N", ",", "method", "=", "\"lin\"", ")", ":", "\n", "        ", "return", "cls", "(", "dim", ",", "dim", "*", "[", "vmin", "]", ",", "dim", "*", "[", "vmax", "]", ",", "N", ",", "method", "=", "method", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.doe.UniformStochasticDesignOfExperiment.sample": [[69, 79], ["numpy.random.uniform", "numpy.random.uniform", "numpy.log10", "numpy.log10"], "methods", ["None"], ["", "def", "sample", "(", "self", ")", ":", "\n", "\n", "        ", "if", "self", ".", "_method", "==", "\"lin\"", ":", "\n", "            ", "return", "np", ".", "random", ".", "uniform", "(", "self", ".", "_vmin", ",", "self", ".", "_vmax", ",", "self", ".", "_dim", ")", "\n", "", "elif", "self", ".", "_method", "==", "\"log\"", ":", "\n", "            ", "return", "10", "**", "np", ".", "random", ".", "uniform", "(", "\n", "np", ".", "log10", "(", "self", ".", "_vmin", ")", ",", "np", ".", "log10", "(", "self", ".", "_vmax", ")", ",", "self", ".", "_dim", "\n", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.doe.GaussianDesignOfExperiment.__init__": [[82, 85], ["doe.StochasticDesignOfExperiment.__init__"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "N", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dim", ",", "N", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.doe.GaussianDesignOfExperiment.sample": [[86, 89], ["numpy.random.normal"], "methods", ["None"], ["", "def", "sample", "(", "self", ")", ":", "\n", "\n", "        ", "return", "np", ".", "random", ".", "normal", "(", "0", ",", "1", ",", "self", ".", "_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.doe.DeterministicDesignOfExperiment.__init__": [[92, 94], ["doe.DesignOfExperiment.__init__"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.doe.DeterministicDesignOfExperiment.__getitem__": [[95, 97], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.doe.SingularPoint.__init__": [[100, 112], ["doe.DeterministicDesignOfExperiment.__init__", "isinstance", "len", "numpy.array", "isinstance", "ValueError", "range", "type"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.__init__", "home.repos.pwc.inspect_result.bdevl_SMO.fawkes.BoundaryConditions.NeumannSpecification.type"], ["    ", "def", "__init__", "(", "self", ",", "phi", ",", "*", ",", "N", "=", "1", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "len", "(", "phi", ")", ",", "N", ")", "\n", "if", "isinstance", "(", "phi", ",", "list", ")", ":", "\n", "            ", "phi", "=", "np", ".", "array", "(", "phi", ")", "\n", "\n", "", "if", "not", "isinstance", "(", "phi", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Phi needs to be either list or numpy array, not {}\"", ".", "format", "(", "type", "(", "phi", ")", ")", "\n", ")", "\n", "\n", "", "self", ".", "_phi", "=", "[", "phi", "for", "n", "in", "range", "(", "N", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.doe.SingularPoint.__iter__": [[113, 117], ["None"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "\n", "        ", "for", "phi_", "in", "self", ".", "_phi", ":", "\n", "            ", "yield", "phi_", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.doe.SingularPoint.__getitem__": [[118, 120], ["None"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "return", "self", ".", "_phi", "[", "item", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.AggregateConvergencePlotter.__init__": [[28, 53], ["dict", "dict", "dict", "dict", "dict", "analysis.AggregateConvergencePlotter._setup", "genutils.ensure_folder"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField._setup", "home.repos.pwc.inspect_result.bdevl_SMO.None.genutils.ensure_folder"], []], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.AggregateConvergencePlotter._setup": [[54, 71], ["analysis.AggregateConvergencePlotter.extract"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.AggregateConvergencePlotter.extract"], []], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.AggregateConvergencePlotter._extract_qoi": [[72, 91], ["all", "numpy.array", "numpy.argmax", "numpy.mean", "warnings.warn", "numpy.bincount", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.lamp.variational.DiagonalMultivariateNormal.mean"], []], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.AggregateConvergencePlotter.plot": [[92, 137], ["dict", "enumerate", "matplotlib.figure", "analysis.AggregateConvergencePlotter._extract_qoi", "reduce", "matplotlib.plot", "matplotlib.grid", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.title", "matplotlib.legend", "isinstance", "numpy.array", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.AggregateConvergencePlotter._extract_qoi", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.utils.Gaussian2D.plot"], []], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.AggregateConvergencePlotter.extract": [[138, 189], ["analysis.Log.N_cases", "list", "list", "list", "list", "enumerate", "RuntimeError", "analysis.Log.LoadAllCases", "analysis.AggregateConvergencePlotter.extract.logs"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.Log.N_cases", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.Log.LoadAllCases"], []], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.PhiTrajectory.__init__": [[192, 201], ["isinstance", "all", "list", "isinstance"], "methods", ["None"], []], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.PhiTrajectory.FromNumpyArray": [[202, 235], ["isinstance", "cls", "isinstance", "cls", "cls", "analysis.PhiState", "len", "len", "range", "analysis.PhiState", "analysis.PhiState", "range", "range"], "methods", ["None"], []], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.PhiTrajectory.precompute_model": [[236, 242], ["tqdm.tqdm.tqdm", "state.demand_kappas_model"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.PhiState.demand_kappas_model"], []], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.PhiTrajectory.precompute_ref": [[243, 249], ["tqdm.tqdm.tqdm", "state.demand_kappas_ref"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.PhiState.demand_kappas_ref"], []], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.PhiTrajectory.__getitem__": [[250, 252], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.PhiTrajectory.__len__": [[253, 255], ["len"], "methods", ["None"], []], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.PhiTrajectory.sdf": [[256, 273], ["copy.deepcopy", "list", "enumerate", "wmodel.rf.set_phi", "wmodel.rf.get_phi", "matplotlib.figure", "wmodel.rf.set_phi", "wmodel.rf.kernel.PlotFrequencyDomain", "list.append"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.set_phi", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.get_phi", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.set_phi", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.Kernel.PlotFrequencyDomain", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.Log.append"], []], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.PhiTrajectory.min": [[274, 288], ["enumerate", "state.min", "numpy.minimum"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.PhiState.min"], []], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.PhiTrajectory.max": [[289, 303], ["enumerate", "state.max", "numpy.maximum"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.PhiState.max"], []], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.PhiTrajectory.append": [[304, 307], ["isinstance", "analysis.PhiTrajectory._states.append"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.Log.append"], []], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.PhiState.__init__": [[310, 318], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.PhiState.wmodel": [[319, 328], ["RuntimeError"], "methods", ["None"], []], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.PhiState.prune": [[329, 331], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.PhiState.phi": [[332, 335], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.PhiState.plot": [[336, 344], ["copy.deepcopy", "analysis.PhiState._wmodel.rf.set_phi", "analysis.PhiState._wmodel.rf.kernel.PlotFrequencyDomain", "analysis.PhiState._wmodel.rf.set_phi", "analysis.PhiState._wmodel.rf.get_phi"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.set_phi", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.Kernel.PlotFrequencyDomain", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.set_phi", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.get_phi"], []], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.PhiState.min": [[345, 348], ["analysis.PhiState._bound"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.PhiState._bound"], []], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.PhiState.max": [[349, 352], ["analysis.PhiState._bound"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.PhiState._bound"], []], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.PhiState._bound": [[353, 363], ["minmax", "minmax"], "methods", ["None"], []], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.PhiState.demand_kappas_ref": [[364, 387], ["analysis.PhiState.wmodel.sample_reference_distribution().detach().cpu().numpy", "numpy.concatenate", "analysis.PhiState.wmodel.sample_reference_distribution().detach().cpu().numpy", "analysis.PhiState.wmodel.sample_reference_distribution().detach().cpu", "analysis.PhiState.wmodel.sample_reference_distribution().detach().cpu", "analysis.PhiState.wmodel.sample_reference_distribution().detach", "analysis.PhiState.wmodel.sample_reference_distribution().detach", "analysis.PhiState.wmodel.sample_reference_distribution", "analysis.PhiState.wmodel.sample_reference_distribution"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.WrapperModel.sample_reference_distribution", "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.WrapperModel.sample_reference_distribution"], []], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.PhiState.demand_kappas_model": [[388, 413], ["analysis.PhiState.wmodel.sample_predicted_distribution().detach().cpu().numpy", "numpy.concatenate", "analysis.PhiState.wmodel.sample_predicted_distribution().detach().cpu().numpy", "analysis.PhiState.wmodel.sample_predicted_distribution().detach().cpu", "analysis.PhiState.wmodel.sample_predicted_distribution().detach().cpu", "analysis.PhiState.wmodel.sample_predicted_distribution().detach", "analysis.PhiState.wmodel.sample_predicted_distribution().detach", "analysis.PhiState.wmodel.sample_predicted_distribution", "analysis.PhiState.wmodel.sample_predicted_distribution"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.WrapperModel.sample_predicted_distribution", "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.WrapperModel.sample_predicted_distribution"], []], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.PhiState.kappas_ref": [[418, 426], ["isinstance", "isinstance", "type"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.fawkes.BoundaryConditions.NeumannSpecification.type"], []], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.PhiState.kappas_model": [[431, 439], ["isinstance", "isinstance", "type"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.fawkes.BoundaryConditions.NeumannSpecification.type"], []], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.Log.__init__": [[442, 456], ["list", "dict", "time.time", "str", "uuid.uuid4"], "methods", ["None"], []], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.Log.uuid": [[457, 460], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.Log.touch": [[461, 468], ["genutils.cluster", "pathlib.Path().touch", "pathlib.Path", "os.getcwd"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.None.genutils.cluster", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.Log.touch"], []], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.Log._get_runtime": [[469, 475], ["time.strftime", "RuntimeError", "time.gmtime"], "methods", ["None"], []], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.Log.runtime": [[476, 479], ["analysis.Log._get_runtime"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.Log._get_runtime"], []], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.Log.finalize": [[480, 483], ["time.time"], "methods", ["None"], []], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.Log.identifier": [[484, 487], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.Log.descriptor": [[488, 491], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.Log.states": [[492, 495], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.Log.__getitem__": [[496, 498], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.Log.MatchCases": [[499, 512], ["list", "os.listdir", "isinstance", "isinstance", "file.startswith", "list.append"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.Log.append"], []], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.Log.LoadAllCases": [[513, 526], ["cls.MatchCases", "list", "range", "len", "cls.FromFile", "list.append"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.Log.MatchCases", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.Log.FromFile", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.Log.append"], []], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.Log.N_cases": [[527, 532], ["cls.MatchCases", "len"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.Log.MatchCases"], []], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.Log.LoadCaseNumber": [[533, 541], ["cls.MatchCases", "cls.FromFile", "len", "len"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.Log.MatchCases", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.Log.FromFile"], []], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.Log.LoadUUID": [[542, 564], ["isinstance", "os.listdir", "cls.FromFile", "uuid.UUID", "ValueError", "str", "ValueError"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.Log.FromFile"], []], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.Log.LoadAllCasesIterator": [[565, 577], ["cls.MatchCases", "range", "len", "cls.FromFile", "filter", "cls.FromFile"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.Log.MatchCases", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.Log.FromFile", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.Log.FromFile"], []], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.Log.FromFile": [[578, 584], ["genutils.pickle_load"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.None.genutils.pickle_load"], []], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.Log.add_state": [[585, 590], ["analysis.State", "analysis.Log.append"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.Log.append"], []], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.Log.append": [[591, 595], ["analysis.Log._states.append"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.Log.append"], []], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.Log.save": [[596, 606], ["genutils.ensure_folder", "genutils.pickle_save", "analysis.Log.finalize"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.None.genutils.ensure_folder", "home.repos.pwc.inspect_result.bdevl_SMO.None.genutils.pickle_save", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.Log.finalize"], []], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.State.__init__": [[609, 616], ["dict", "isinstance"], "methods", ["None"], []], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.State.N_training": [[617, 620], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.State.__getitem__": [[621, 623], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.State.__setitem__": [[624, 626], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.State.inform": [[627, 637], ["copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "wmodel.state", "copy.deepcopy"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.WrapperModel.state"], []], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.factories.CaseFactory.__init__": [[46, 59], ["isinstance", "genutils.ensure_folder"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.None.genutils.ensure_folder"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "folder", ")", ":", "\n", "\n", "        ", "assert", "isinstance", "(", "args", ",", "dict", ")", "\n", "self", ".", "_args", "=", "args", "\n", "\n", "if", "\"volumefraction\"", "not", "in", "self", ".", "_args", ":", "\n", "            ", "self", ".", "_args", "[", "\"volumefraction\"", "]", "=", "0.5", "\n", "\n", "", "self", ".", "_pdim", "=", "None", "\n", "\n", "self", ".", "_folder_base", "=", "ensure_folder", "(", "folder", ")", "\n", "\n", "self", ".", "_cutoff", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.factories.CaseFactory.pdim": [[60, 70], ["factories.CaseFactory.rf", "isinstance"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.AbstractObjective.rf"], ["", "@", "property", "\n", "def", "pdim", "(", "self", ")", ":", "\n", "\n", "        ", "if", "self", ".", "_pdim", "is", "None", ":", "\n", "            ", "rf_", ",", "_", "=", "self", ".", "rf", "(", ")", "\n", "self", ".", "_pdim", "=", "rf_", ".", "kernel", ".", "pdim", "\n", "assert", "isinstance", "(", "self", ".", "_pdim", ",", "int", ")", "\n", "assert", "self", ".", "_pdim", ">", "0", "\n", "\n", "", "return", "self", ".", "_pdim", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.factories.CaseFactory._folder": [[71, 75], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "_folder", "(", "self", ")", ":", "\n", "\n", "        ", "return", "self", ".", "_folder_base", "+", "\"cr{}/\"", ".", "format", "(", "self", ".", "cr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.factories.CaseFactory.nx": [[76, 80], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "nx", "(", "self", ")", ":", "\n", "        ", "assert", "\"nx\"", "in", "self", ".", "_args", ",", "\"nx has not been set in self._args dict\"", "\n", "return", "self", ".", "_args", "[", "\"nx\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.factories.CaseFactory._target_sel": [[81, 84], ["DeprecationWarning"], "methods", ["None"], ["", "@", "property", "\n", "def", "_target_sel", "(", "self", ")", ":", "\n", "        ", "raise", "DeprecationWarning", "(", "\"user target, instead of _target_sel\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.factories.CaseFactory.target": [[85, 89], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "target", "(", "self", ")", ":", "\n", "        ", "assert", "\"target\"", "in", "self", ".", "_args", ",", "\"target is not defined in self._args dict\"", "\n", "return", "self", ".", "_args", "[", "\"target\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.factories.CaseFactory._N_training": [[90, 93], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "_N_training", "(", "self", ")", ":", "\n", "        ", "raise", "DeprecationWarning", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.factories.CaseFactory._N_validation": [[94, 97], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "_N_validation", "(", "self", ")", ":", "\n", "        ", "raise", "DeprecationWarning", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.factories.CaseFactory.check": [[98, 101], ["factories.CaseFactory._check_hmg"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.SMO.factories.CaseFactory._check_hmg"], ["", "def", "check", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "_check_hmg", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.factories.CaseFactory._check_hmg": [[102, 111], ["factories.CaseFactory.hmg"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.WrapperModel.hmg"], ["", "def", "_check_hmg", "(", "self", ")", ":", "\n", "\n", "        ", "hmg", "=", "self", ".", "hmg", "(", ")", "\n", "admissible", "=", "hmg", ".", "admissible", "\n", "for", "sel", "in", "self", ".", "target", ":", "\n", "            ", "assert", "(", "\n", "sel", "in", "admissible", "\n", ")", ",", "\"A check revealed that the homogenized property ({}) cannot be computed by {}. Valid properties are: {}\"", ".", "format", "(", "\n", "sel", ",", "hmg", ".", "__class__", ".", "__name__", ",", "admissible", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.factories.CaseFactory.load_model": [[113, 122], ["model.load"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.lamp.modules.BaseModule.load"], ["", "", "def", "load_model", "(", "self", ",", "model", ")", ":", "\n", "\n", "        ", "try", ":", "\n", "            ", "path", "=", "self", ".", "_folder", "+", "\"model/trained.pt\"", "\n", "model", ".", "load", "(", "path", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "            ", "raise", "e", "\n", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.factories.CaseFactory.save_model": [[123, 128], ["os.makedirs", "model.save"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.Log.save"], ["", "def", "save_model", "(", "self", ",", "model", ")", ":", "\n", "\n", "        ", "os", ".", "makedirs", "(", "self", ".", "_folder", "+", "\"model\"", ",", "exist_ok", "=", "True", ")", "\n", "path", "=", "self", ".", "_folder", "+", "\"model/trained.pt\"", "\n", "model", ".", "save", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.factories.CaseFactory.Nw": [[129, 132], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "Nw", "(", "self", ")", ":", "\n", "        ", "raise", "DeprecationWarning", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.factories.CaseFactory.w_max": [[133, 136], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "w_max", "(", "self", ")", ":", "\n", "        ", "raise", "DeprecationWarning", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.factories.CaseFactory.phase_high": [[137, 142], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "phase_high", "(", "self", ")", ":", "\n", "\n", "        ", "assert", "\"cr\"", "in", "self", ".", "_args", ",", "\"Contrast ratio has not been set\"", "\n", "return", "self", ".", "_args", "[", "\"cr\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.factories.CaseFactory.phase_low": [[143, 147], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "phase_low", "(", "self", ")", ":", "\n", "\n", "        ", "return", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.factories.CaseFactory.cutoff": [[148, 164], ["isinstance", "scipy.stats.norm.ppf"], "methods", ["None"], ["", "@", "property", "\n", "def", "cutoff", "(", "self", ")", ":", "\n", "\n", "        ", "if", "self", ".", "_cutoff", "is", "None", ":", "\n", "            ", "assert", "(", "\n", "\"volumefraction\"", "in", "self", ".", "_args", "\n", "and", "isinstance", "(", "self", ".", "_args", "[", "\"volumefraction\"", "]", ",", "(", "float", ")", ")", "\n", "and", "0.1", "<=", "self", ".", "_args", "[", "\"volumefraction\"", "]", "<=", "0.9", "\n", ")", "\n", "cutoff", "=", "-", "normal_scipy", ".", "ppf", "(", "self", ".", "_args", "[", "\"volumefraction\"", "]", ")", "\n", "assert", "-", "1.3", "<=", "cutoff", "<=", "1.3", "\n", "if", "self", ".", "_args", "[", "\"volumefraction\"", "]", "==", "0.5", ":", "\n", "                ", "assert", "cutoff", "==", "0", "\n", "", "self", ".", "_cutoff", "=", "cutoff", "\n", "\n", "", "return", "self", ".", "_cutoff", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.factories.CaseFactory.cuda_available": [[165, 168], ["torch.cuda.is_available"], "methods", ["None"], ["", "@", "property", "\n", "def", "cuda_available", "(", "self", ")", ":", "\n", "        ", "return", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.factories.CaseFactory.name": [[169, 172], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.factories.CaseFactory.device": [[173, 176], ["torch.device", "torch.device"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.device", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.device"], ["", "@", "property", "\n", "def", "device", "(", "self", ")", ":", "\n", "        ", "return", "torch", ".", "device", "(", "\"cuda:0\"", ")", "if", "self", ".", "cuda_available", "else", "torch", ".", "device", "(", "\"cpu\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.factories.CaseFactory.dtype": [[177, 180], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "dtype", "(", "self", ")", ":", "\n", "        ", "return", "torch", ".", "float32", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.factories.CaseFactory.cr": [[181, 184], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "cr", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_args", "[", "\"cr\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.factories.CaseFactory.get_datafactory": [[185, 188], ["factories.DataFactory"], "methods", ["None"], ["", "def", "get_datafactory", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "return", "DataFactory", "(", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "_args", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.factories.CaseFactory._convert_kappa_to_tensor": [[189, 200], ["all", "torch.stack", "kappa.keys", "kappa[].dim"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.lamp.metrics.MetricEnsemble.keys", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.Kernel.dim"], ["", "def", "_convert_kappa_to_tensor", "(", "self", ",", "kappa", ":", "dict", ")", "->", "torch", ".", "Tensor", ":", "\n", "\n", "        ", "for", "sel", "in", "self", ".", "target", ":", "\n", "            ", "assert", "(", "\n", "sel", "in", "kappa", "\n", ")", ",", "\"The desired homogenized property ({}) has not been computed. Valid keys: {}\"", ".", "format", "(", "\n", "sel", ",", "kappa", ".", "keys", "(", ")", "\n", ")", "\n", "\n", "", "assert", "all", "(", "[", "kappa", "[", "sel", "]", ".", "dim", "(", ")", "==", "1", "for", "sel", "in", "self", ".", "target", "]", ")", "\n", "return", "torch", ".", "stack", "(", "[", "kappa", "[", "sel", "]", "for", "sel", "in", "self", ".", "target", "]", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.factories.CaseFactory.FromIdentifier": [[201, 219], ["factory_class", "globals", "KeyError"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "FromIdentifier", "(", "\n", "cls", ",", "identifier", ":", "str", ",", "*", "args", ",", "return_class_not_instance", "=", "False", ",", "**", "kwargs", "\n", ")", ":", "\n", "\n", "        ", "classname", "=", "identifier", "\n", "try", ":", "\n", "            ", "factory_class", "=", "globals", "(", ")", "[", "classname", "]", "\n", "", "except", "KeyError", ":", "\n", "            ", "raise", "KeyError", "(", "\n", "'The factory with identifier \"{}\" is not defined.'", ".", "format", "(", "identifier", ")", "\n", ")", "\n", "\n", "", "if", "return_class_not_instance", ":", "\n", "            ", "return", "factory_class", "\n", "\n", "", "factory", "=", "factory_class", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "return", "factory", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.factories.CaseFactory.objfct_ref": [[220, 223], ["DeprecationWarning"], "methods", ["None"], ["", "def", "objfct_ref", "(", "self", ",", "interval", ",", "return_info", "=", "False", ")", ":", "\n", "\n", "        ", "raise", "DeprecationWarning", "(", "\"Implementation has to be updated.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.factories.CaseFactory.plot_marginal_distribution_of_phi": [[224, 237], ["factories.CaseFactory.kappa_from_phi().detach().cpu().numpy", "SMO.utils.plotdensity2d", "factories.CaseFactory.kappa_from_phi().detach().cpu", "factories.CaseFactory.kappa_from_phi().detach", "factories.CaseFactory.kappa_from_phi"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.SMO.utils.plotdensity2d", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.factories.CaseFactory.kappa_from_phi"], ["", "def", "plot_marginal_distribution_of_phi", "(", "\n", "self", ",", "phi", ":", "np", ".", "ndarray", ",", "N", ":", "int", ",", "nbins", ":", "int", "=", "50", "\n", ")", ":", "\n", "\n", "        ", "kappa", "=", "self", ".", "kappa_from_phi", "(", "phi", ",", "N", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "assert", "kappa", ".", "shape", "[", "1", "]", "==", "2", ",", "\"assumes 2D\"", "\n", "\n", "k1", "=", "kappa", "[", ":", ",", "0", "]", "\n", "k2", "=", "kappa", "[", ":", ",", "1", "]", "\n", "\n", "plotdensity2d", "(", "kappa", "[", ":", ",", "0", "]", ",", "kappa", "[", ":", ",", "1", "]", ",", "nbins", "=", "nbins", ")", "\n", "\n", "return", "k1", ",", "k2", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.factories.CaseFactory.kappa_from_phi": [[238, 266], ["torch.no_grad", "SMO.doe.SingularPoint", "factories.CaseFactory.get_datafactory", "factories.CaseFactory.", "[].keys", "dict", "range", "factories.CaseFactory._convert_kappa_to_tensor", "torch.zeros", "len", "enumerate", "factories.CaseFactory.dtransform", "torch.stack", "factories.CaseFactory.", "len", "range", "len"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.SMO.factories.CaseFactory.get_datafactory", "home.repos.pwc.inspect_result.bdevl_SMO.lamp.metrics.MetricEnsemble.keys", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.factories.CaseFactory._convert_kappa_to_tensor", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.factories.CaseFactory.dtransform"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "kappa_from_phi", "(", "self", ",", "phi", ",", "N", ",", "return_X_cnn", "=", "False", ")", "->", "torch", ".", "Tensor", ":", "\n", "\n", "        ", "doe", "=", "SingularPoint", "(", "phi", ",", "N", "=", "N", ")", "\n", "datafct_gnr", "=", "self", ".", "get_datafactory", "(", "num_samples_per_phi", "=", "1", ",", "DOE", "=", "doe", ")", "\n", "\n", "RES", "=", "datafct_gnr", "(", "retain_X_g", "=", "return_X_cnn", ")", "\n", "kappa_keys", "=", "RES", "[", "\"kappa\"", "]", "[", "0", "]", "[", "0", "]", ".", "keys", "(", ")", "\n", "kappa", "=", "dict", "(", ")", "\n", "for", "kappa_key", "in", "kappa_keys", ":", "\n", "            ", "kappa", "[", "kappa_key", "]", "=", "torch", ".", "zeros", "(", "len", "(", "doe", ")", ")", "\n", "\n", "", "for", "n", "in", "range", "(", "len", "(", "doe", ")", ")", ":", "\n", "\n", "            ", "for", "j", ",", "mkey", "in", "enumerate", "(", "kappa_keys", ")", ":", "\n", "                ", "kappa", "[", "mkey", "]", "[", "n", "]", "=", "RES", "[", "\"kappa\"", "]", "[", "n", "]", "[", "0", "]", "[", "mkey", "]", "\n", "\n", "", "", "kappa", "=", "self", ".", "_convert_kappa_to_tensor", "(", "kappa", ")", "\n", "\n", "if", "not", "return_X_cnn", ":", "\n", "            ", "return", "kappa", "\n", "", "else", ":", "\n", "            ", "dtransform", "=", "self", ".", "dtransform", "(", ")", "\n", "X_g", "=", "torch", ".", "stack", "(", "[", "RES", "[", "\"X_g\"", "]", "[", "n", "]", "[", "0", "]", "for", "n", "in", "range", "(", "len", "(", "RES", "[", "\"X_g\"", "]", ")", ")", "]", ")", "\n", "assert", "X_g", ".", "ndim", "==", "3", "\n", "assert", "X_g", ".", "shape", "[", "0", "]", "==", "kappa", ".", "shape", "[", "0", "]", "\n", "X_cnn", "=", "dtransform", "(", "X_g", ")", "\n", "return", "kappa", ",", "X_cnn", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.factories.CaseFactory.N_training_available": [[267, 271], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "N_training_available", "(", "self", ")", ":", "\n", "\n", "        ", "return", "self", ".", "_args", "[", "\"N_training\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.factories.CaseFactory.data": [[272, 372], ["factories.CaseFactory._convert_kappa_to_tensor", "factories.CaseFactory._convert_kappa_to_tensor", "dict", "dict", "print", "torch.load", "torch.load", "torch.randperm", "factories.CaseFactory.doe", "factories.CaseFactory.get_datafactory", "factories.CaseFactory.get_datafactory", "factories.CaseFactory.training_data", "factories.CaseFactory.training_data", "os.makedirs", "torch.save", "torch.save", "torch.randperm", "isinstance", "len"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.SMO.factories.CaseFactory._convert_kappa_to_tensor", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.factories.CaseFactory._convert_kappa_to_tensor", "home.repos.pwc.inspect_result.bdevl_SMO.lamp.modules.BaseModule.load", "home.repos.pwc.inspect_result.bdevl_SMO.lamp.modules.BaseModule.load", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.factories.Multiphysics32.doe", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.factories.CaseFactory.get_datafactory", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.factories.CaseFactory.get_datafactory", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.factories.DataFactory.training_data", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.factories.DataFactory.training_data", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.Log.save", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.Log.save"], ["", "def", "data", "(", "\n", "self", ",", "\n", "N_training", "=", "None", ",", "\n", "N_validation", "=", "None", ",", "\n", "ForceRecompute", "=", "False", ",", "\n", "mpi_threads", "=", "None", ",", "\n", "shared_memory_parallelization", "=", "False", ",", "\n", "permute_returned_data", "=", "True", ",", "\n", "permutation_tr", "=", "None", ",", "\n", ")", ":", "\n", "\n", "        ", "try", ":", "\n", "            ", "if", "ForceRecompute", ":", "\n", "                ", "raise", "Exception", "\n", "\n", "", "print", "(", "\n", "\"Attempting to load data from ... : {}\"", ".", "format", "(", "self", ".", "_folder", "+", "\"data/\"", ")", "\n", ")", "\n", "\n", "data_train", "=", "torch", ".", "load", "(", "self", ".", "_folder", "+", "\"data/train.pt\"", ")", "\n", "data_val", "=", "torch", ".", "load", "(", "self", ".", "_folder", "+", "\"data/val.pt\"", ")", "\n", "", "except", ":", "\n", "\n", "            ", "doe_training", ",", "doe_validation", "=", "self", ".", "doe", "(", ")", "\n", "datafct_gnr_tr", "=", "self", ".", "get_datafactory", "(", "\n", "num_samples_per_phi", "=", "1", ",", "DOE", "=", "doe_training", "\n", ")", "\n", "datafct_gnr_val", "=", "self", ".", "get_datafactory", "(", "\n", "num_samples_per_phi", "=", "1", ",", "DOE", "=", "doe_validation", "\n", ")", "\n", "\n", "data_train", "=", "datafct_gnr_tr", ".", "training_data", "(", "\n", "mpi_num_workers", "=", "mpi_threads", ",", "\n", "shared_memory_parallelization", "=", "shared_memory_parallelization", ",", "\n", ")", "\n", "data_val", "=", "datafct_gnr_val", ".", "training_data", "(", "\n", "mpi_num_workers", "=", "mpi_threads", ",", "shared_memory_parallelization", "=", "False", "\n", ")", "\n", "os", ".", "makedirs", "(", "self", ".", "_folder", "+", "\"data\"", ",", "exist_ok", "=", "True", ")", "\n", "torch", ".", "save", "(", "data_train", ",", "self", ".", "_folder", "+", "\"data/train.pt\"", ")", "\n", "torch", ".", "save", "(", "data_val", ",", "self", ".", "_folder", "+", "\"data/val.pt\"", ")", "\n", "\n", "", "kappa_tr", ",", "X_g_tr", ",", "X_b_tr", ",", "phi_tr", "=", "data_train", "\n", "kappa_vl", ",", "X_g_vl", ",", "X_b_vl", ",", "phi_vl", "=", "data_val", "\n", "\n", "kappa_tr", "=", "self", ".", "_convert_kappa_to_tensor", "(", "kappa_tr", ")", "\n", "kappa_vl", "=", "self", ".", "_convert_kappa_to_tensor", "(", "kappa_vl", ")", "\n", "\n", "if", "permute_returned_data", ":", "\n", "\n", "            ", "if", "permutation_tr", "is", "not", "None", ":", "\n", "                ", "assert", "(", "\n", "isinstance", "(", "permutation_tr", ",", "torch", ".", "Tensor", ")", "\n", "and", "permutation_tr", ".", "ndim", "==", "1", "\n", "and", "len", "(", "permutation_tr", ")", "==", "kappa_tr", ".", "shape", "[", "0", "]", "\n", ")", ",", "\"Permutation tensor passed to data() not proper.\"", "\n", "indperm_tr", "=", "permutation_tr", "\n", "", "else", ":", "\n", "                ", "indperm_tr", "=", "torch", ".", "randperm", "(", "kappa_tr", ".", "shape", "[", "0", "]", ")", "\n", "\n", "", "indperm_vl", "=", "torch", ".", "randperm", "(", "kappa_vl", ".", "shape", "[", "0", "]", ")", "\n", "\n", "kappa_tr", "=", "kappa_tr", "[", "indperm_tr", "]", "\n", "kappa_vl", "=", "kappa_vl", "[", "indperm_vl", "]", "\n", "\n", "X_g_tr", "=", "X_g_tr", "[", "indperm_tr", "]", "\n", "X_b_tr", "=", "X_b_tr", "[", "indperm_tr", "]", "\n", "phi_tr", "=", "phi_tr", "[", "indperm_tr", "]", "\n", "\n", "X_g_vl", "=", "X_g_vl", "[", "indperm_vl", "]", "\n", "X_b_vl", "=", "X_b_vl", "[", "indperm_vl", "]", "\n", "phi_vl", "=", "phi_vl", "[", "indperm_vl", "]", "\n", "\n", "", "if", "N_training", "is", "not", "None", ":", "\n", "            ", "assert", "N_training", "<=", "kappa_tr", ".", "shape", "[", "0", "]", "\n", "kappa_tr", "=", "kappa_tr", "[", "0", ":", "N_training", "]", "\n", "X_g_tr", "=", "X_g_tr", "[", "0", ":", "N_training", "]", "\n", "X_b_tr", "=", "X_b_tr", "[", "0", ":", "N_training", "]", "\n", "phi_tr", "=", "phi_tr", "[", "0", ":", "N_training", "]", "\n", "\n", "", "if", "N_validation", "is", "not", "None", ":", "\n", "            ", "assert", "N_validation", "<=", "kappa_vl", ".", "shape", "[", "0", "]", "\n", "kappa_vl", "=", "kappa_vl", "[", "0", ":", "N_validation", "]", "\n", "X_g_vl", "=", "X_g_vl", "[", "0", ":", "N_validation", "]", "\n", "X_b_vl", "=", "X_b_vl", "[", "0", ":", "N_validation", "]", "\n", "phi_vl", "=", "phi_vl", "[", "0", ":", "N_validation", "]", "\n", "\n", "", "data_tr", "=", "dict", "(", ")", "\n", "data_tr", "[", "\"kappa\"", "]", "=", "kappa_tr", "\n", "data_tr", "[", "\"X_g\"", "]", "=", "X_g_tr", "\n", "data_tr", "[", "\"X_b\"", "]", "=", "X_b_tr", "\n", "data_tr", "[", "\"phi\"", "]", "=", "phi_tr", "\n", "\n", "data_val", "=", "dict", "(", ")", "\n", "data_val", "[", "\"kappa\"", "]", "=", "kappa_vl", "\n", "data_val", "[", "\"X_g\"", "]", "=", "X_g_vl", "\n", "data_val", "[", "\"X_b\"", "]", "=", "X_b_vl", "\n", "data_val", "[", "\"phi\"", "]", "=", "phi_vl", "\n", "\n", "return", "data_tr", ",", "data_val", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.factories.CaseFactory.interpolator": [[373, 433], ["hasattr", "factories.CaseFactory.reference_kappas", "list", "range", "factories.CaseFactory.doe_reference", "numpy.array", "scipy.interpolate.LinearNDInterpolator", "len", "numpy.array.append", "numpy.vstack", "isinstance", "isinstance", "len", "range", "scipy.interpolate.LinearNDInterpolator.", "isinstance", "isinstance", "objective.assess", "numpy.array", "type", "len", "val.item.item.item", "isinstance", "isinstance", "isinstance", "len", "numpy.isnan", "len"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.SMO.factories.Multiphysics32.doe_reference", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.Log.append", "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.AbstractObjective.assess", "home.repos.pwc.inspect_result.bdevl_SMO.fawkes.BoundaryConditions.NeumannSpecification.type"], ["", "def", "interpolator", "(", "self", ",", "objective", ",", "rfp_min", "=", "None", ",", "rfp_max", "=", "None", ")", ":", "\n", "\n", "        ", "assert", "hasattr", "(", "\n", "objective", ",", "\"assess\"", "\n", ")", ",", "'objective needs to provide \"assess\" interface'", "\n", "\n", "phi_ref", ",", "kappas", "=", "self", ".", "reference_kappas", "(", ")", "\n", "assert", "kappas", ".", "shape", "[", "2", "]", "==", "2", "and", "kappas", ".", "ndim", "==", "3", "\n", "\n", "objfct_ref", "=", "list", "(", ")", "\n", "\n", "for", "n", "in", "range", "(", "len", "(", "phi_ref", ")", ")", ":", "\n", "            ", "objfct_ref", ".", "append", "(", "objective", ".", "assess", "(", "kappas", "[", "n", "]", ")", ")", "\n", "\n", "", "doe", "=", "self", ".", "doe_reference", "(", ")", "\n", "objfct_ref", "=", "np", ".", "array", "(", "objfct_ref", ")", "\n", "\n", "interpolator", "=", "LinearNDInterpolator", "(", "np", ".", "vstack", "(", "[", "m", "for", "m", "in", "doe", "]", ")", ",", "objfct_ref", ")", "\n", "\n", "def", "my_interpolator", "(", "phival", ":", "Union", "[", "np", ".", "ndarray", ",", "List", "[", "float", "]", "]", ")", "->", "float", ":", "\n", "\n", "            ", "if", "isinstance", "(", "phival", ",", "list", ")", ":", "\n", "                ", "phival", "=", "np", ".", "array", "(", "phival", ")", "\n", "", "assert", "isinstance", "(", "\n", "phival", ",", "np", ".", "ndarray", "\n", ")", ",", "\"type of phi is not np.ndarray, but {}\"", ".", "format", "(", "type", "(", "phival", ")", ")", "\n", "assert", "phival", ".", "ndim", "==", "1", ",", "\"Shape of phi is {} (needs to be 1D)\"", ".", "format", "(", "\n", "phival", ".", "shape", "\n", ")", "\n", "assert", "len", "(", "phival", ")", "\n", "\n", "hd", "=", "1e-6", "\n", "for", "ind", "in", "range", "(", "len", "(", "phival", ")", ")", ":", "\n", "                ", "if", "rfp_min", "is", "not", "None", ":", "\n", "                    ", "assert", "isinstance", "(", "rfp_min", ",", "np", ".", "ndarray", ")", "\n", "if", "phival", "[", "ind", "]", "<=", "rfp_min", "[", "ind", "]", ":", "\n", "                        ", "phival", "[", "ind", "]", "=", "rfp_min", "[", "ind", "]", "+", "hd", "\n", "", "", "if", "rfp_max", "is", "not", "None", ":", "\n", "                    ", "assert", "isinstance", "(", "rfp_max", ",", "np", ".", "ndarray", ")", "\n", "if", "phival", "[", "ind", "]", ">=", "rfp_max", "[", "ind", "]", ":", "\n", "                        ", "phival", "[", "ind", "]", "=", "rfp_max", "[", "ind", "]", "-", "hd", "\n", "\n", "", "", "", "val", "=", "interpolator", "(", "phival", ")", "\n", "\n", "if", "isinstance", "(", "val", ",", "np", ".", "ndarray", ")", ":", "\n", "                ", "assert", "len", "(", "val", ")", "==", "1", "and", "val", ".", "ndim", "==", "1", "\n", "val", "=", "val", ".", "item", "(", ")", "\n", "\n", "", "if", "isinstance", "(", "val", ",", "list", ")", ":", "\n", "                ", "assert", "len", "(", "val", ")", "==", "1", "\n", "val", "=", "val", "[", "0", "]", "\n", "\n", "", "assert", "isinstance", "(", "val", ",", "float", ")", "and", "not", "np", ".", "isnan", "(", "\n", "val", "\n", ")", ",", "\"Interpolator decided to return a non-float (or NaN) value : val = {}\"", ".", "format", "(", "\n", "val", "\n", ")", "\n", "return", "val", "\n", "\n", "", "return", "my_interpolator", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.factories.CaseFactory.reference_microstructures": [[434, 478], ["factories.CaseFactory.doe_reference", "torch.load", "factories.CaseFactory.dtransform", "factories.CaseFactory.rf", "list", "os.makedirs", "torch.save", "rf.to.to.to", "numpy.prod", "tqdm.tqdm.tqdm", "torch.no_grad", "enumerate", "len", "rf.to.to.set_phi", "rf.to.to.rsample_batch", "rf.to.rsample_batch.unsqueeze_", "list.append", "torch.device", "factories.CaseFactory.to", "factories.CaseFactory.", "torch.device"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.SMO.factories.Multiphysics32.doe_reference", "home.repos.pwc.inspect_result.bdevl_SMO.lamp.modules.BaseModule.load", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.factories.CaseFactory.dtransform", "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.AbstractObjective.rf", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.Log.save", "home.repos.pwc.inspect_result.bdevl_SMO.optimization.inference.LowRankVariationalInference.to", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.set_phi", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.rsample_batch", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.Log.append", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.device", "home.repos.pwc.inspect_result.bdevl_SMO.optimization.inference.LowRankVariationalInference.to", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.device"], ["", "def", "reference_microstructures", "(", "\n", "self", ",", "N_samples", "=", "2048", ",", "ForceRecompute", "=", "False", ",", "ShowProgress", "=", "False", ",", "return_doe", "=", "False", "\n", ")", ":", "\n", "\n", "        ", "doe", "=", "self", ".", "doe_reference", "(", ")", "\n", "\n", "try", ":", "\n", "            ", "if", "ForceRecompute", ":", "\n", "                ", "raise", "Exception", "\n", "", "data_doe_samples", "=", "torch", ".", "load", "(", "self", ".", "_folder", "+", "\"reference/rf_samples.pt\"", ")", "\n", "", "except", ":", "\n", "\n", "            ", "transformer", "=", "self", ".", "dtransform", "(", ")", "\n", "rf", ",", "_", "=", "self", ".", "rf", "(", ")", "\n", "\n", "if", "self", ".", "cuda_available", ":", "\n", "                ", "rf", "=", "rf", ".", "to", "(", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", ")", ")", "\n", "\n", "", "X_global", "=", "list", "(", ")", "\n", "\n", "numele", "=", "len", "(", "doe", ")", "*", "N_samples", "*", "np", ".", "prod", "(", "rf", ".", "ns", ")", "\n", "storage_in_mb", "=", "(", "numele", "*", "4", ")", "/", "(", "1024", "**", "2", ")", "\n", "\n", "if", "ShowProgress", ":", "\n", "                ", "doe_iterator", "=", "tqdm", "(", "doe", ")", "\n", "", "else", ":", "\n", "                ", "doe_iterator", "=", "doe", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "for", "i", ",", "phi", "in", "enumerate", "(", "doe_iterator", ")", ":", "\n", "\n", "                    ", "rf", ".", "set_phi", "(", "phi", ")", "\n", "X_g", "=", "rf", ".", "rsample_batch", "(", "batch_size", "=", "N_samples", ")", "\n", "X_g", ".", "unsqueeze_", "(", "1", ")", "\n", "X_global", ".", "append", "(", "transformer", "(", "X_g", ")", ".", "to", "(", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", ")", ")", "\n", "\n", "", "", "os", ".", "makedirs", "(", "self", ".", "_folder", "+", "\"reference\"", ",", "exist_ok", "=", "True", ")", "\n", "torch", ".", "save", "(", "X_global", ",", "self", ".", "_folder", "+", "\"reference/rf_samples.pt\"", ")", "\n", "data_doe_samples", "=", "X_global", "\n", "\n", "", "if", "return_doe", ":", "\n", "            ", "return", "data_doe_samples", ",", "doe", "\n", "", "else", ":", "\n", "            ", "return", "data_doe_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.factories.CaseFactory.dtransform": [[479, 492], ["SMO.utils.BinarizeDataTransform", "SMO.utils.HyperbolicDataTransform"], "methods", ["None"], ["", "", "def", "dtransform", "(", "self", ")", ":", "\n", "\n", "        ", "if", "self", ".", "_args", "[", "\"binarize\"", "]", ":", "\n", "            ", "return", "BinarizeDataTransform", "(", "\n", "self", ".", "_args", "[", "\"nx\"", "]", ",", "\n", "cutoff", "=", "self", ".", "cutoff", ",", "\n", "phase_low", "=", "-", "1", ",", "\n", "phase_high", "=", "1", ",", "\n", "image_channel", "=", "True", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "return", "HyperbolicDataTransform", "(", "\n", "nx", "=", "self", ".", "_args", "[", "\"nx\"", "]", ",", "eps", "=", "self", ".", "_args", "[", "\"eps\"", "]", ",", "cutoff", "=", "self", ".", "cutoff", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.factories.CaseFactory.htransform": [[494, 502], ["SMO.utils.BinarizeDataTransform"], "methods", ["None"], ["", "", "def", "htransform", "(", "self", ")", ":", "\n", "\n", "        ", "return", "BinarizeDataTransform", "(", "\n", "self", ".", "_args", "[", "\"nx\"", "]", ",", "\n", "cutoff", "=", "self", ".", "cutoff", ",", "\n", "phase_low", "=", "self", ".", "phase_low", ",", "\n", "phase_high", "=", "self", ".", "phase_high", ",", "\n", "image_channel", "=", "False", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.factories.CaseFactory.rf": [[504, 506], ["None"], "methods", ["None"], ["", "def", "rf", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.factories.CaseFactory.hmg": [[507, 510], ["factories.CaseFactory._hmg"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.SMO.factories.Multiphysics32._hmg"], ["", "def", "hmg", "(", "self", ",", "constrain_to_target", "=", "False", ")", ":", "\n", "\n", "        ", "return", "self", ".", "_hmg", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.factories.CaseFactory._hmg": [[511, 513], ["None"], "methods", ["None"], ["", "def", "_hmg", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.factories.CaseFactory.discriminative": [[514, 516], ["None"], "methods", ["None"], ["", "def", "discriminative", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.factories.ChannelizedFlow32.__init__": [[519, 544], ["factories.CaseFactory.__init__", "SMO.utils.substitute_defaults"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.__init__", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.utils.substitute_defaults"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "path", "=", "\"hdata/ChannelizedFlow32/\"", ",", "called_by_subclass", "=", "False", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "args", ",", "path", ")", "\n", "\n", "if", "called_by_subclass", ":", "\n", "            ", "return", "\n", "\n", "", "default_values", "=", "{", "\n", "\"nx\"", ":", "32", ",", "\n", "\"cr\"", ":", "50", ",", "\n", "\"N_training\"", ":", "4096", ",", "\n", "\"N_validation\"", ":", "1024", ",", "\n", "\"binarize\"", ":", "False", ",", "\n", "\"eps\"", ":", "25", ",", "\n", "\"target\"", ":", "[", "\"xx\"", ",", "\"yy\"", "]", ",", "\n", "\"N_g\"", ":", "4", ",", "\n", "\"sigma_w\"", ":", "10", ",", "\n", "\"N_w\"", ":", "25", ",", "\n", "\"w_max\"", ":", "65.0", ",", "\n", "}", "\n", "\n", "substitute_defaults", "(", "default_values", ",", "self", ".", "_args", ")", "\n", "\n", "self", ".", "_N_reference_phi_points", "=", "50", "\n", "assert", "self", ".", "_args", "[", "\"nx\"", "]", "==", "32", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.factories.ChannelizedFlow32.phi_target": [[545, 555], ["numpy.ones", "numpy.argmax"], "methods", ["None"], ["", "def", "phi_target", "(", "self", ",", "return_index", "=", "False", ")", ":", "\n", "\n", "        ", "phi_target", "=", "-", "5", "*", "np", ".", "ones", "(", "self", ".", "pdim", ")", "\n", "phi_target", "[", "-", "self", ".", "_args", "[", "\"N_g\"", "]", "]", "=", "5", "\n", "\n", "if", "return_index", ":", "\n", "            ", "ind", "=", "np", ".", "argmax", "(", "phi_target", ")", "\n", "return", "phi_target", ",", "ind", "\n", "\n", "", "return", "phi_target", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.factories.ChannelizedFlow32._hmg": [[556, 559], ["SMO.microstructure.homogenization.PoissonHomogenizer.FromImageResolution"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.microstructure.homogenization.LinearHomogenizer.FromImageResolution"], ["", "def", "_hmg", "(", "self", ")", ":", "\n", "\n", "        ", "return", "PoissonHomogenizer", ".", "FromImageResolution", "(", "self", ".", "_args", "[", "\"nx\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.factories.ChannelizedFlow32.doe": [[560, 575], ["SMO.doe.GaussianDesignOfExperiment", "SMO.doe.GaussianDesignOfExperiment", "type.lower", "type.lower"], "methods", ["None"], ["", "def", "doe", "(", "self", ",", "type", "=", "None", ")", ":", "\n", "\n", "        ", "doe_training", "=", "GaussianDesignOfExperiment", "(", "\n", "dim", "=", "self", ".", "pdim", ",", "N", "=", "self", ".", "_args", "[", "\"N_training\"", "]", "\n", ")", "\n", "doe_validation", "=", "GaussianDesignOfExperiment", "(", "\n", "dim", "=", "self", ".", "pdim", ",", "N", "=", "self", ".", "_args", "[", "\"N_validation\"", "]", "\n", ")", "\n", "\n", "if", "type", "is", "None", ":", "\n", "            ", "return", "doe_training", ",", "doe_validation", "\n", "", "elif", "type", ".", "lower", "(", ")", "==", "\"training\"", ":", "\n", "            ", "return", "doe_training", "\n", "", "elif", "type", ".", "lower", "(", ")", "==", "\"validation\"", ":", "\n", "            ", "return", "doe_validation", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.factories.ChannelizedFlow32.doe_reference": [[576, 579], ["SMO.doe.GaussianDesignOfExperiment"], "methods", ["None"], ["", "", "def", "doe_reference", "(", "self", ")", ":", "\n", "\n", "        ", "return", "GaussianDesignOfExperiment", "(", "dim", "=", "self", ".", "pdim", ",", "N", "=", "self", ".", "_N_reference_phi_points", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.factories.ChannelizedFlow32.rf": [[580, 605], ["SMO.microstructure.randomfields.GaussianGridKernel", "kernel.to.to.to", "SMO.microstructure.randomfields.DifferentiableGaussianRandomField", "rf.to.to.to", "SMO.microstructure.randomfields.UnboundedRandomFieldParameters", "torch.device"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.optimization.inference.LowRankVariationalInference.to", "home.repos.pwc.inspect_result.bdevl_SMO.optimization.inference.LowRankVariationalInference.to", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.device"], ["", "def", "rf", "(", "self", ",", "force_cpu", "=", "True", ")", ":", "\n", "\n", "        ", "nx", "=", "self", ".", "_args", "[", "\"nx\"", "]", "\n", "\n", "if", "force_cpu", ":", "\n", "            ", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", "\n", "", "else", ":", "\n", "            ", "device", "=", "self", ".", "device", "\n", "\n", "", "kernel", "=", "GaussianGridKernel", "(", "\n", "2", ",", "\n", "self", ".", "_args", "[", "\"w_max\"", "]", ",", "\n", "self", ".", "_args", "[", "\"N_w\"", "]", ",", "\n", "self", ".", "_args", "[", "\"N_g\"", "]", ",", "\n", "sigma_w", "=", "self", ".", "_args", "[", "\"sigma_w\"", "]", ",", "\n", "init_uniform", "=", "False", ",", "\n", ")", "\n", "kernel", "=", "kernel", ".", "to", "(", "dtype", "=", "self", ".", "dtype", ",", "device", "=", "device", ")", "\n", "rf", "=", "DifferentiableGaussianRandomField", "(", "\n", "nx", ",", "kernel", ",", "2", ",", "dtype", "=", "self", ".", "dtype", ",", "device", "=", "device", "\n", ")", "\n", "rf", "=", "rf", ".", "to", "(", "dtype", "=", "self", ".", "dtype", ",", "device", "=", "device", ")", "\n", "rfp", "=", "UnboundedRandomFieldParameters", "(", "kernel", ")", "\n", "\n", "return", "rf", ",", "rfp", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.factories.ChannelizedFlow32.discriminative": [[606, 624], ["SMO.discriminative.DiscriminativeCNN", "SMO.discriminative.DiscriminativeCNN.eval", "SMO.discriminative.DiscriminativeCNN.load", "len"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.Kernel.eval", "home.repos.pwc.inspect_result.bdevl_SMO.lamp.modules.BaseModule.load"], ["", "def", "discriminative", "(", "self", ",", "trained", "=", "False", ")", ":", "\n", "\n", "        ", "surrogate", "=", "DiscriminativeCNN", "(", "\n", "nx", "=", "32", ",", "\n", "filters", "=", "[", "4", ",", "8", ",", "16", "]", ",", "\n", "dim_out", "=", "len", "(", "self", ".", "target", ")", ",", "\n", "dropout", "=", "0.05", ",", "\n", "num_additional_full_layers", "=", "1", ",", "\n", "make_deterministic", "=", "False", ",", "\n", "gate", "=", "False", ",", "\n", ")", "\n", "\n", "if", "trained", ":", "\n", "            ", "surrogate", ".", "load", "(", "self", ".", "_folder", "+", "\"/surrogate/trained.pt\"", ")", "\n", "\n", "", "surrogate", ".", "eval", "(", ")", "\n", "\n", "return", "surrogate", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.factories.ChannelizedFlow32.objective": [[625, 628], ["None"], "methods", ["None"], ["", "def", "objective", "(", "self", ",", "wmodel", ",", "inference", ",", "dtype", ",", "device", ",", "type", "=", "\"KLD\"", ")", ":", "\n", "\n", "        ", "raise", "DeprecationWarning", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.factories.ChannelizedFlow32.default_settings": [[629, 681], ["dict", "dict", "dict"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "default_settings", "(", "cls", ",", "DEBUG", "=", "False", ")", ":", "\n", "\n", "        ", "if", "DEBUG", ":", "\n", "            ", "N_data_acquisitions", "=", "1", "\n", "M_steps", "=", "2", "\n", "N_em_max", "=", "5", "\n", "N_epochs", "=", "20", "\n", "N_obj_fct", "=", "64", "\n", "N_batches", "=", "10", "\n", "", "else", ":", "\n", "            ", "N_data_acquisitions", "=", "6", "\n", "M_steps", "=", "2", "\n", "N_em_max", "=", "350", "\n", "N_epochs", "=", "3000", "\n", "N_obj_fct", "=", "512", "\n", "N_batches", "=", "20000", "\n", "\n", "", "fargs", "=", "dict", "(", ")", "\n", "\n", "cargs", "=", "dict", "(", ")", "\n", "cargs", "[", "\"N_monte_carlo_elbo\"", "]", "=", "256", "\n", "cargs", "[", "\"N_em_max_steps\"", "]", "=", "N_em_max", "\n", "cargs", "[", "\"N_objective_fct_monte_carlo\"", "]", "=", "N_obj_fct", "\n", "cargs", "[", "\"patience\"", "]", "=", "15", "\n", "\n", "cargs", "[", "\"N_training_init\"", "]", "=", "512", "\n", "cargs", "[", "\"N_add\"", "]", "=", "512", "\n", "cargs", "[", "\"N_candidates\"", "]", "=", "4096", "\n", "cargs", "[", "\"N_data_acquisitions\"", "]", "=", "N_data_acquisitions", "\n", "cargs", "[", "\"N_training_baseline\"", "]", "=", "[", "512", ",", "2048", ",", "4096", "]", "\n", "cargs", "[", "\"N_validation\"", "]", "=", "256", "\n", "\n", "cargs", "[", "\"cooldown\"", "]", "=", "100", "# 15", "\n", "cargs", "[", "\"active_strategy\"", "]", "=", "\"kldlogscore\"", "\n", "cargs", "[", "\"M_steps\"", "]", "=", "M_steps", "\n", "\n", "cargs", "[", "\"VI_SGD_iterations\"", "]", "=", "85", "\n", "cargs", "[", "\"VI_lowrank_dim\"", "]", "=", "40", "\n", "cargs", "[", "\"VI_SGD_monte_carlo\"", "]", "=", "10", "\n", "cargs", "[", "\"VI_em_samples\"", "]", "=", "128", "+", "64", "\n", "\n", "targs", "=", "dict", "(", ")", "\n", "targs", "[", "\"N_epochs\"", "]", "=", "None", "\n", "targs", "[", "\"N_batches\"", "]", "=", "N_batches", "\n", "targs", "[", "\"batch_size\"", "]", "=", "128", "\n", "targs", "[", "\"lr\"", "]", "=", "1e-3", "\n", "targs", "[", "\"weight_decay\"", "]", "=", "1e-5", "\n", "targs", "[", "\"verbose\"", "]", "=", "True", "\n", "targs", "[", "\"reset_model\"", "]", "=", "True", "\n", "\n", "return", "fargs", ",", "cargs", ",", "targs", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.factories.ChannelizedFlow64.__init__": [[684, 705], ["factories.ChannelizedFlow32.__init__", "SMO.utils.substitute_defaults"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.__init__", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.utils.substitute_defaults"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "path", "=", "\"hdata/ChannelizedFlow64/\"", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "args", ",", "path", ",", "called_by_subclass", "=", "True", ")", "\n", "\n", "default_values", "=", "{", "\n", "\"nx\"", ":", "64", ",", "\n", "\"cr\"", ":", "50", ",", "\n", "\"N_training\"", ":", "4", "*", "4096", ",", "\n", "\"N_validation\"", ":", "1024", ",", "\n", "\"binarize\"", ":", "False", ",", "\n", "\"eps\"", ":", "25", ",", "\n", "\"target\"", ":", "[", "\"xx\"", ",", "\"yy\"", "]", ",", "\n", "\"N_g\"", ":", "10", ",", "\n", "\"sigma_w\"", ":", "12", ",", "\n", "\"N_w\"", ":", "35", ",", "\n", "\"w_max\"", ":", "65.0", ",", "\n", "\"lr_m_step\"", ":", "0.25", ",", "\n", "\"volumefraction\"", ":", "0.50", ",", "\n", "}", "\n", "\n", "substitute_defaults", "(", "default_values", ",", "self", ".", "_args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.factories.ChannelizedFlow64.objective": [[706, 767], ["isinstance", "type.lower", "numpy.array", "SMO.optimization.inference.LowRankVariationalInference", "SMO.optimization.objectives.IntervalObjective.FromBounds", "type.lower", "numpy.array", "numpy.array", "SMO.utils.Gaussian2D", "SMO.utils.Gaussian2D.sample", "torch.tensor", "SMO.optimization.inference.LowRankVariationalInference", "SMO.optimization.objectives.KullbackLeiblerObjective", "SMO.optimization.objectives.GaussianMultivariateTargetDistribution", "torch.tensor().view.view", "torch.tensor().view", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.IntervalObjective.FromBounds", "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.GaussianMultivariateTargetDistribution.sample"], ["", "def", "objective", "(", "\n", "self", ",", "wmodel", ",", "cargs", ":", "dict", ",", "dtype", ",", "device", ",", "type", "=", "\"KLD\"", ",", "only_mean", "=", "False", "\n", ")", ":", "\n", "\n", "        ", "assert", "isinstance", "(", "cargs", ",", "dict", ")", "\n", "\n", "if", "type", ".", "lower", "(", ")", "==", "\"bound\"", ":", "\n", "            ", "bounds", "=", "np", ".", "array", "(", "[", "[", "21.0", ",", "25.0", "]", ",", "[", "2.5", ",", "3.5", "]", "]", ")", "\n", "inference", "=", "LowRankVariationalInference", "(", "\n", "cargs", "[", "\"VI_SGD_iterations\"", "]", ",", "\n", "cargs", "[", "\"VI_lowrank_dim\"", "]", ",", "\n", "cargs", "[", "\"VI_SGD_monte_carlo\"", "]", ",", "\n", "N_samples_em", "=", "cargs", "[", "\"VI_em_samples\"", "]", ",", "\n", ")", "\n", "objective", "=", "IntervalObjective", ".", "FromBounds", "(", "\n", "wmodel", ",", "inference", ",", "bounds", ",", "dtype", "=", "dtype", ",", "device", "=", "device", "\n", ")", "\n", "\n", "", "elif", "type", ".", "lower", "(", ")", "==", "\"kld\"", ":", "\n", "\n", "            ", "N_samples", "=", "20", "\n", "mean", "=", "np", ".", "array", "(", "[", "20.5", ",", "3.5", "]", ")", "\n", "cov", "=", "np", ".", "array", "(", "[", "[", "0.60", ",", "-", "0.03", "]", ",", "[", "-", "0.03", ",", "0.01", "]", "]", ")", "\n", "\n", "q", "=", "Gaussian2D", "(", "mean", ",", "cov", ")", "\n", "kappas", "=", "q", ".", "sample", "(", "N_samples", ")", "\n", "kappas_t", "=", "torch", ".", "tensor", "(", "kappas", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ")", "\n", "\n", "if", "N_samples", "==", "1", "and", "not", "only_mean", ":", "\n", "                ", "kappas_t", "=", "kappas_t", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "\n", "", "if", "only_mean", ":", "\n", "                ", "kappas_t", "=", "torch", ".", "tensor", "(", "mean", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ")", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "N_samples", "=", "1", "\n", "\n", "", "N_updates", "=", "None", "\n", "\n", "inference", "=", "LowRankVariationalInference", "(", "\n", "cargs", "[", "\"VI_SGD_iterations\"", "]", ",", "\n", "cargs", "[", "\"VI_lowrank_dim\"", "]", ",", "\n", "cargs", "[", "\"VI_SGD_monte_carlo\"", "]", ",", "\n", "batch_size", "=", "N_samples", ",", "\n", "N_samples_em", "=", "cargs", "[", "\"VI_em_samples\"", "]", ",", "\n", ")", "\n", "\n", "objective", "=", "KullbackLeiblerObjective", "(", "\n", "wmodel", ",", "\n", "kappas_t", ",", "\n", "inference", ",", "\n", "N_updates", ",", "\n", "lr", "=", "self", ".", "_args", "[", "\"lr_m_step\"", "]", ",", "\n", "lr_vi", "=", "1e-3", ",", "\n", "device", "=", "device", ",", "\n", "dtype", "=", "dtype", ",", "\n", ")", "\n", "\n", "objective", ".", "representation", "=", "GaussianMultivariateTargetDistribution", "(", "\n", "mean", "=", "mean", ",", "cov", "=", "cov", "\n", ")", "\n", "\n", "", "return", "objective", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.factories.ChannelizedFlow64.discriminative": [[768, 786], ["SMO.discriminative.DiscriminativeCNN", "SMO.discriminative.DiscriminativeCNN.eval", "SMO.discriminative.DiscriminativeCNN.load", "len"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.Kernel.eval", "home.repos.pwc.inspect_result.bdevl_SMO.lamp.modules.BaseModule.load"], ["", "def", "discriminative", "(", "self", ",", "trained", "=", "False", ")", ":", "\n", "\n", "        ", "surrogate", "=", "DiscriminativeCNN", "(", "\n", "nx", "=", "64", ",", "\n", "filters", "=", "[", "4", ",", "8", ",", "12", ",", "16", "]", ",", "\n", "dim_out", "=", "len", "(", "self", ".", "target", ")", ",", "\n", "dropout", "=", "0.05", ",", "\n", "num_additional_full_layers", "=", "1", ",", "\n", "make_deterministic", "=", "False", ",", "\n", "gate", "=", "False", ",", "\n", ")", "\n", "\n", "if", "trained", ":", "\n", "            ", "surrogate", ".", "load", "(", "self", ".", "_folder", "+", "\"/surrogate/trained.pt\"", ")", "\n", "\n", "", "surrogate", ".", "eval", "(", ")", "\n", "\n", "return", "surrogate", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.factories.ChannelizedFlow64.default_settings": [[787, 842], ["dict", "dict", "dict"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "default_settings", "(", "cls", ",", "DEBUG", "=", "False", ")", ":", "\n", "\n", "        ", "if", "DEBUG", ":", "\n", "            ", "N_data_acquisitions", "=", "1", "\n", "M_steps", "=", "2", "\n", "N_em_max", "=", "5", "\n", "N_epochs", "=", "20", "\n", "N_obj_fct", "=", "64", "\n", "N_batches", "=", "10", "\n", "", "else", ":", "\n", "            ", "N_data_acquisitions", "=", "6", "\n", "M_steps", "=", "1", "#", "\n", "N_em_max", "=", "300", "\n", "N_obj_fct", "=", "64", "\n", "N_batches", "=", "20000", "\n", "\n", "", "fargs", "=", "dict", "(", ")", "\n", "cargs", "=", "dict", "(", ")", "\n", "cargs", "[", "\"N_monte_carlo_elbo\"", "]", "=", "32", "\n", "cargs", "[", "\"N_em_max_steps\"", "]", "=", "N_em_max", "\n", "cargs", "[", "\"N_objective_fct_monte_carlo\"", "]", "=", "N_obj_fct", "\n", "cargs", "[", "\"patience\"", "]", "=", "20", "# 10", "\n", "\n", "cargs", "[", "\"N_training_init\"", "]", "=", "4096", "\n", "cargs", "[", "\"N_add\"", "]", "=", "1024", "\n", "cargs", "[", "\"N_candidates\"", "]", "=", "4096", "\n", "cargs", "[", "\"N_data_acquisitions\"", "]", "=", "N_data_acquisitions", "\n", "cargs", "[", "\"N_training_baseline\"", "]", "=", "[", "10240", "]", "\n", "cargs", "[", "\"N_validation\"", "]", "=", "256", "\n", "\n", "if", "DEBUG", ":", "\n", "            ", "cargs", "[", "\"N_add\"", "]", "=", "128", "\n", "cargs", "[", "\"N_candidates\"", "]", "=", "256", "\n", "cargs", "[", "\"N_validation\"", "]", "=", "128", "\n", "\n", "", "cargs", "[", "\"cooldown\"", "]", "=", "125", "\n", "cargs", "[", "\"active_strategy\"", "]", "=", "\"kldlogscore\"", "\n", "cargs", "[", "\"M_steps\"", "]", "=", "M_steps", "\n", "\n", "cargs", "[", "\"VI_SGD_iterations\"", "]", "=", "45", "\n", "cargs", "[", "\"VI_lowrank_dim\"", "]", "=", "50", "\n", "cargs", "[", "\"VI_SGD_monte_carlo\"", "]", "=", "1", "\n", "cargs", "[", "\"VI_em_samples\"", "]", "=", "1", "\n", "\n", "targs", "=", "dict", "(", ")", "\n", "targs", "[", "\"N_epochs\"", "]", "=", "None", "\n", "targs", "[", "\"N_batches\"", "]", "=", "N_batches", "\n", "targs", "[", "\"batch_size\"", "]", "=", "128", "\n", "targs", "[", "\"lr\"", "]", "=", "1e-3", "\n", "targs", "[", "\"weight_decay\"", "]", "=", "1e-5", "\n", "targs", "[", "\"verbose\"", "]", "=", "True", "\n", "targs", "[", "\"reset_model\"", "]", "=", "True", "\n", "\n", "return", "fargs", ",", "cargs", ",", "targs", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.factories.ChannelizedFlow64VF03.__init__": [[845, 859], ["factories.ChannelizedFlow64.__init__"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "path", "=", "\"hdata/ChannelizedFlow64VF03/\"", ")", ":", "\n", "\n", "        ", "if", "\"volumefraction\"", "in", "args", ":", "\n", "            ", "vf", "=", "args", "[", "\"volumefraction\"", "]", "\n", "", "else", ":", "\n", "            ", "vf", "=", "0.30", "\n", "args", "[", "\"volumefraction\"", "]", "=", "0.30", "\n", "\n", "", "super", "(", ")", ".", "__init__", "(", "args", ",", "path", ")", "\n", "\n", "if", "not", "\"mobj\"", "in", "args", ":", "\n", "            ", "args", "[", "\"mobj\"", "]", "=", "True", "\n", "\n", "", "assert", "0", "<=", "vf", "<=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.factories.ChannelizedFlow64VF03.objective": [[860, 899], ["isinstance", "SMO.utils.Gaussian2D", "SMO.utils.Gaussian2D.sample", "torch.tensor", "SMO.optimization.inference.LowRankVariationalInference", "SMO.optimization.objectives.KullbackLeiblerObjective", "SMO.optimization.objectives.GaussianMultivariateTargetDistribution", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.GaussianMultivariateTargetDistribution.sample"], ["", "def", "objective", "(", "self", ",", "wmodel", ",", "cargs", ":", "dict", ",", "dtype", ",", "device", ")", ":", "\n", "\n", "        ", "assert", "isinstance", "(", "cargs", ",", "dict", ")", "\n", "\n", "if", "self", ".", "_args", "[", "\"mobj\"", "]", ":", "\n", "            ", "mean", "=", "np", ".", "array", "(", "[", "7.80", ",", "1.95", "]", ")", "\n", "cov", "=", "1", "*", "np", ".", "array", "(", "[", "[", "1.0", ",", "0", "]", ",", "[", "0", ",", "0.005", "]", "]", ")", "\n", "", "else", ":", "\n", "            ", "mean", "=", "np", ".", "array", "(", "[", "20.5", ",", "3.5", "]", ")", "\n", "cov", "=", "np", ".", "array", "(", "[", "[", "0.60", ",", "-", "0.03", "]", ",", "[", "-", "0.03", ",", "0.01", "]", "]", ")", "\n", "\n", "", "N_samples", "=", "20", "\n", "q", "=", "Gaussian2D", "(", "mean", ",", "cov", ")", "\n", "kappas", "=", "q", ".", "sample", "(", "N_samples", ")", "\n", "kappas_t", "=", "torch", ".", "tensor", "(", "kappas", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ")", "\n", "\n", "N_updates", "=", "None", "\n", "inference", "=", "LowRankVariationalInference", "(", "\n", "cargs", "[", "\"VI_SGD_iterations\"", "]", ",", "\n", "cargs", "[", "\"VI_lowrank_dim\"", "]", ",", "\n", "cargs", "[", "\"VI_SGD_monte_carlo\"", "]", ",", "\n", "batch_size", "=", "N_samples", ",", "\n", "N_samples_em", "=", "cargs", "[", "\"VI_em_samples\"", "]", ",", "\n", ")", "\n", "objective", "=", "KullbackLeiblerObjective", "(", "\n", "wmodel", ",", "\n", "kappas_t", ",", "\n", "inference", ",", "\n", "N_updates", ",", "\n", "lr", "=", "self", ".", "_args", "[", "\"lr_m_step\"", "]", ",", "\n", "lr_vi", "=", "1e-3", ",", "\n", "device", "=", "device", ",", "\n", "dtype", "=", "dtype", ",", "\n", ")", "\n", "objective", ".", "representation", "=", "GaussianMultivariateTargetDistribution", "(", "\n", "mean", "=", "mean", ",", "cov", "=", "cov", "\n", ")", "\n", "\n", "return", "objective", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.factories.Multiphysics32.__init__": [[902, 928], ["factories.CaseFactory.__init__", "SMO.utils.substitute_defaults"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.__init__", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.utils.substitute_defaults"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "path", "=", "\"hdata/Multiphysics32/\"", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "args", ",", "path", ")", "\n", "\n", "default_values", "=", "{", "\n", "\"nx\"", ":", "32", ",", "\n", "\"cr\"", ":", "50", ",", "\n", "\"N_training\"", ":", "2", "*", "4096", ",", "\n", "\"N_validation\"", ":", "1024", ",", "\n", "\"binarize\"", ":", "False", ",", "\n", "\"eps\"", ":", "25", ",", "\n", "\"target\"", ":", "[", "\"xx\"", ",", "\"E_avg\"", "]", ",", "\n", "\"N_w\"", ":", "20", ",", "\n", "\"w_max\"", ":", "35.0", ",", "\n", "\"N_g\"", ":", "8", ",", "\n", "\"sigma_w\"", ":", "0.08", "*", "35.0", ",", "\n", "\"phase_1_thermal\"", ":", "50.0", ",", "\n", "\"phase_0_thermal\"", ":", "1.0", ",", "\n", "\"phase_1_structure\"", ":", "1.0", ",", "\n", "\"phase_0_structure\"", ":", "50.0", ",", "\n", "\"nu_default\"", ":", "0.3", ",", "\n", "\"lr_m_step\"", ":", "0.25", ",", "\n", "}", "\n", "\n", "substitute_defaults", "(", "default_values", ",", "self", ".", "_args", ")", "\n", "self", ".", "_N_reference_phi_points", "=", "256", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.factories.Multiphysics32.phase_high": [[929, 932], ["RuntimeError"], "methods", ["None"], ["", "def", "phase_high", "(", "self", ")", ":", "\n", "        ", "raise", "RuntimeError", "(", "\n", "\"Multiphysics-prediction should not call phase_high (htransform -> custom homogenizer settings\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.factories.Multiphysics32.phase_low": [[934, 937], ["RuntimeError"], "methods", ["None"], ["", "def", "phase_low", "(", "self", ")", ":", "\n", "        ", "raise", "RuntimeError", "(", "\n", "\"Multiphysics-prediction should not call phase_low (htransform -> custom homogenizer settings\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.factories.Multiphysics32.phi_target": [[939, 949], ["numpy.ones", "numpy.argmax"], "methods", ["None"], ["", "def", "phi_target", "(", "self", ",", "return_index", "=", "False", ")", ":", "\n", "\n", "        ", "phi_target", "=", "-", "5", "*", "np", ".", "ones", "(", "self", ".", "pdim", ")", "\n", "phi_target", "[", "-", "1", "]", "=", "5", "\n", "\n", "if", "return_index", ":", "\n", "            ", "ind", "=", "np", ".", "argmax", "(", "phi_target", ")", "\n", "return", "phi_target", ",", "ind", "\n", "\n", "", "return", "phi_target", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.factories.Multiphysics32.htransform": [[950, 958], ["SMO.utils.BinarizeDataTransform"], "methods", ["None"], ["", "def", "htransform", "(", "self", ")", ":", "\n", "\n", "        ", "return", "BinarizeDataTransform", "(", "\n", "self", ".", "_args", "[", "\"nx\"", "]", ",", "\n", "cutoff", "=", "self", ".", "cutoff", ",", "\n", "phase_low", "=", "0.0", ",", "\n", "phase_high", "=", "1.0", ",", "\n", "image_channel", "=", "False", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.factories.Multiphysics32._hmg": [[960, 974], ["SMO.microstructure.homogenization.PoissonHomogenizer.FromImageResolution", "SMO.microstructure.homogenization.PeriodicHomogenizer.FromImageResolution", "SMO.microstructure.homogenization.CombinedHomogenizer", "dict", "dict"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.microstructure.homogenization.LinearHomogenizer.FromImageResolution", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.homogenization.LinearHomogenizer.FromImageResolution"], ["", "def", "_hmg", "(", "self", ")", ":", "\n", "\n", "        ", "hmg1", "=", "PoissonHomogenizer", ".", "FromImageResolution", "(", "self", ".", "_args", "[", "\"nx\"", "]", ")", "\n", "hmg2", "=", "PeriodicHomogenizer", ".", "FromImageResolution", "(", "self", ".", "_args", "[", "\"nx\"", "]", ")", "\n", "hmg2", ".", "_nu_default_value", "=", "self", ".", "_args", "[", "\"nu_default\"", "]", "\n", "properties", "=", "[", "dict", "(", ")", ",", "dict", "(", ")", "]", "\n", "\n", "properties", "[", "0", "]", "[", "\"high\"", "]", "=", "self", ".", "_args", "[", "\"phase_1_thermal\"", "]", "\n", "properties", "[", "0", "]", "[", "\"low\"", "]", "=", "self", ".", "_args", "[", "\"phase_0_thermal\"", "]", "\n", "properties", "[", "1", "]", "[", "\"high\"", "]", "=", "self", ".", "_args", "[", "\"phase_1_structure\"", "]", "\n", "properties", "[", "1", "]", "[", "\"low\"", "]", "=", "self", ".", "_args", "[", "\"phase_0_structure\"", "]", "\n", "\n", "hmg", "=", "CombinedHomogenizer", "(", "[", "hmg1", ",", "hmg2", "]", ",", "properties", "=", "properties", ")", "\n", "return", "hmg", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.factories.Multiphysics32.doe": [[975, 990], ["SMO.doe.GaussianDesignOfExperiment", "SMO.doe.GaussianDesignOfExperiment", "type.lower", "type.lower"], "methods", ["None"], ["", "def", "doe", "(", "self", ",", "type", "=", "None", ")", ":", "\n", "\n", "        ", "doe_training", "=", "GaussianDesignOfExperiment", "(", "\n", "dim", "=", "self", ".", "pdim", ",", "N", "=", "self", ".", "_args", "[", "\"N_training\"", "]", "\n", ")", "\n", "doe_validation", "=", "GaussianDesignOfExperiment", "(", "\n", "dim", "=", "self", ".", "pdim", ",", "N", "=", "self", ".", "_args", "[", "\"N_validation\"", "]", "\n", ")", "\n", "\n", "if", "type", "is", "None", ":", "\n", "            ", "return", "doe_training", ",", "doe_validation", "\n", "", "elif", "type", ".", "lower", "(", ")", "==", "\"training\"", ":", "\n", "            ", "return", "doe_training", "\n", "", "elif", "type", ".", "lower", "(", ")", "==", "\"validation\"", ":", "\n", "            ", "return", "doe_validation", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.factories.Multiphysics32.doe_reference": [[991, 994], ["SMO.doe.GaussianDesignOfExperiment"], "methods", ["None"], ["", "", "def", "doe_reference", "(", "self", ")", ":", "\n", "\n", "        ", "return", "GaussianDesignOfExperiment", "(", "dim", "=", "self", ".", "pdim", ",", "N", "=", "self", ".", "_N_reference_phi_points", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.factories.Multiphysics32.rf": [[995, 1020], ["SMO.microstructure.randomfields.GaussianGridKernel", "kernel.to.to.to", "SMO.microstructure.randomfields.DifferentiableGaussianRandomField", "rf.to.to.to", "SMO.microstructure.randomfields.SoftmaxRandomFieldParameters", "torch.device"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.optimization.inference.LowRankVariationalInference.to", "home.repos.pwc.inspect_result.bdevl_SMO.optimization.inference.LowRankVariationalInference.to", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.device"], ["", "def", "rf", "(", "self", ",", "force_cpu", "=", "True", ")", ":", "\n", "\n", "        ", "nx", "=", "self", ".", "_args", "[", "\"nx\"", "]", "\n", "\n", "if", "force_cpu", ":", "\n", "            ", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", "\n", "", "else", ":", "\n", "            ", "device", "=", "self", ".", "device", "\n", "\n", "", "kernel", "=", "GaussianGridKernel", "(", "\n", "2", ",", "\n", "self", ".", "_args", "[", "\"w_max\"", "]", ",", "\n", "self", ".", "_args", "[", "\"N_w\"", "]", ",", "\n", "self", ".", "_args", "[", "\"N_g\"", "]", ",", "\n", "sigma_w", "=", "self", ".", "_args", "[", "\"sigma_w\"", "]", ",", "\n", "init_uniform", "=", "False", ",", "\n", ")", "\n", "kernel", "=", "kernel", ".", "to", "(", "dtype", "=", "self", ".", "dtype", ",", "device", "=", "device", ")", "\n", "rf", "=", "DifferentiableGaussianRandomField", "(", "\n", "nx", ",", "kernel", ",", "2", ",", "dtype", "=", "self", ".", "dtype", ",", "device", "=", "device", "\n", ")", "\n", "rf", "=", "rf", ".", "to", "(", "dtype", "=", "self", ".", "dtype", ",", "device", "=", "device", ")", "\n", "rfp", "=", "SoftmaxRandomFieldParameters", "(", "kernel", ")", "\n", "\n", "return", "rf", ",", "rfp", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.factories.Multiphysics32.discriminative": [[1021, 1039], ["SMO.discriminative.DiscriminativeCNN", "SMO.discriminative.DiscriminativeCNN.eval", "SMO.discriminative.DiscriminativeCNN.load", "len"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.Kernel.eval", "home.repos.pwc.inspect_result.bdevl_SMO.lamp.modules.BaseModule.load"], ["", "def", "discriminative", "(", "self", ",", "trained", "=", "False", ")", ":", "\n", "\n", "        ", "surrogate", "=", "DiscriminativeCNN", "(", "\n", "nx", "=", "32", ",", "\n", "filters", "=", "[", "4", ",", "8", ",", "16", "]", ",", "\n", "dim_out", "=", "len", "(", "self", ".", "target", ")", ",", "\n", "dropout", "=", "0.05", ",", "\n", "num_additional_full_layers", "=", "1", ",", "\n", "make_deterministic", "=", "False", ",", "\n", "gate", "=", "False", ",", "\n", ")", "\n", "\n", "if", "trained", ":", "\n", "            ", "surrogate", ".", "load", "(", "self", ".", "_folder", "+", "\"/surrogate/trained.pt\"", ")", "\n", "\n", "", "surrogate", ".", "eval", "(", ")", "\n", "\n", "return", "surrogate", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.factories.Multiphysics32.default_settings": [[1040, 1088], ["dict", "dict", "dict"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "default_settings", "(", "cls", ",", "DEBUG", "=", "False", ")", ":", "\n", "\n", "        ", "if", "DEBUG", ":", "\n", "            ", "N_data_acquisitions", "=", "1", "\n", "M_steps", "=", "2", "\n", "N_em_max", "=", "5", "\n", "N_obj_fct", "=", "64", "\n", "", "else", ":", "\n", "            ", "N_data_acquisitions", "=", "8", "\n", "M_steps", "=", "5", "\n", "N_em_max", "=", "350", "\n", "N_obj_fct", "=", "512", "\n", "\n", "", "fargs", "=", "dict", "(", ")", "\n", "\n", "cargs", "=", "dict", "(", ")", "\n", "cargs", "[", "\"N_monte_carlo_elbo\"", "]", "=", "256", "\n", "cargs", "[", "\"N_em_max_steps\"", "]", "=", "N_em_max", "\n", "cargs", "[", "\"N_objective_fct_monte_carlo\"", "]", "=", "N_obj_fct", "\n", "cargs", "[", "\"patience\"", "]", "=", "15", "\n", "\n", "cargs", "[", "\"N_training_init\"", "]", "=", "768", "\n", "cargs", "[", "\"N_add\"", "]", "=", "512", "\n", "cargs", "[", "\"N_candidates\"", "]", "=", "4096", "\n", "cargs", "[", "\"N_data_acquisitions\"", "]", "=", "N_data_acquisitions", "\n", "cargs", "[", "\"N_training_baseline\"", "]", "=", "None", "\n", "cargs", "[", "\"N_validation\"", "]", "=", "256", "\n", "\n", "cargs", "[", "\"cooldown\"", "]", "=", "100", "\n", "cargs", "[", "\"active_strategy\"", "]", "=", "\"objfctvar\"", "\n", "cargs", "[", "\"M_steps\"", "]", "=", "M_steps", "\n", "\n", "cargs", "[", "\"VI_SGD_iterations\"", "]", "=", "85", "\n", "cargs", "[", "\"VI_lowrank_dim\"", "]", "=", "40", "\n", "cargs", "[", "\"VI_SGD_monte_carlo\"", "]", "=", "10", "\n", "cargs", "[", "\"VI_em_samples\"", "]", "=", "128", "+", "64", "\n", "\n", "targs", "=", "dict", "(", ")", "\n", "targs", "[", "\"N_epochs\"", "]", "=", "None", "\n", "targs", "[", "\"N_batches\"", "]", "=", "20000", "\n", "targs", "[", "\"batch_size\"", "]", "=", "128", "\n", "targs", "[", "\"lr\"", "]", "=", "1e-3", "\n", "targs", "[", "\"weight_decay\"", "]", "=", "1e-5", "\n", "targs", "[", "\"verbose\"", "]", "=", "True", "\n", "targs", "[", "\"reset_model\"", "]", "=", "True", "\n", "\n", "return", "fargs", ",", "cargs", ",", "targs", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.factories.Multiphysics32.objective": [[1089, 1111], ["isinstance", "SMO.optimization.inference.LowRankVariationalInference", "numpy.array", "SMO.optimization.objectives.IntervalObjective.FromBounds"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.IntervalObjective.FromBounds"], ["", "def", "objective", "(", "self", ",", "wmodel", ",", "cargs", ",", "dtype", ",", "device", ",", "type", "=", "None", ")", ":", "\n", "\n", "        ", "assert", "isinstance", "(", "cargs", ",", "dict", ")", "\n", "\n", "inference", "=", "LowRankVariationalInference", "(", "\n", "cargs", "[", "\"VI_SGD_iterations\"", "]", ",", "\n", "cargs", "[", "\"VI_lowrank_dim\"", "]", ",", "\n", "cargs", "[", "\"VI_SGD_monte_carlo\"", "]", ",", "\n", "N_samples_em", "=", "cargs", "[", "\"VI_em_samples\"", "]", ",", "\n", ")", "\n", "\n", "bounds", "=", "np", ".", "array", "(", "[", "[", "9.5", ",", "12.5", "]", ",", "[", "7", ",", "10.5", "]", "]", ")", "\n", "\n", "objective", "=", "IntervalObjective", ".", "FromBounds", "(", "\n", "wmodel", ",", "\n", "inference", ",", "\n", "bounds", ",", "\n", "lr", "=", "self", ".", "_args", "[", "\"lr_m_step\"", "]", ",", "\n", "dtype", "=", "dtype", ",", "\n", "device", "=", "device", ",", "\n", ")", "\n", "return", "objective", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.factories.Multiphysics64.__init__": [[1114, 1126], ["factories.Multiphysics32.__init__"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "\n", "        ", "if", "\"nx\"", "not", "in", "args", ":", "\n", "            ", "args", "[", "\"nx\"", "]", "=", "64", "\n", "\n", "", "args", "[", "\"N_training\"", "]", "=", "4", "*", "4096", "\n", "args", "[", "\"N_g\"", "]", "=", "10", "\n", "args", "[", "\"N_w\"", "]", "=", "35", "\n", "args", "[", "\"w_max\"", "]", "=", "65.0", "\n", "args", "[", "\"sigma_w\"", "]", "=", "12", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "args", ",", "\"hdata/Multiphysics64/\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.factories.Multiphysics64.discriminative": [[1127, 1145], ["SMO.discriminative.DiscriminativeCNN", "SMO.discriminative.DiscriminativeCNN.eval", "SMO.discriminative.DiscriminativeCNN.load", "len"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.Kernel.eval", "home.repos.pwc.inspect_result.bdevl_SMO.lamp.modules.BaseModule.load"], ["", "def", "discriminative", "(", "self", ",", "trained", "=", "False", ")", ":", "\n", "\n", "        ", "surrogate", "=", "DiscriminativeCNN", "(", "\n", "nx", "=", "64", ",", "\n", "filters", "=", "[", "4", ",", "8", ",", "12", ",", "16", "]", ",", "\n", "dim_out", "=", "len", "(", "self", ".", "target", ")", ",", "\n", "dropout", "=", "0.05", ",", "\n", "num_additional_full_layers", "=", "1", ",", "\n", "make_deterministic", "=", "False", ",", "\n", "gate", "=", "False", ",", "\n", ")", "\n", "\n", "if", "trained", ":", "\n", "            ", "surrogate", ".", "load", "(", "self", ".", "_folder", "+", "\"/surrogate/trained.pt\"", ")", "\n", "\n", "", "surrogate", ".", "eval", "(", ")", "\n", "\n", "return", "surrogate", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.factories.Multiphysics64.default_settings": [[1146, 1196], ["dict", "dict", "dict"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "default_settings", "(", "cls", ",", "DEBUG", "=", "False", ")", ":", "\n", "\n", "        ", "if", "DEBUG", ":", "\n", "            ", "N_data_acquisitions", "=", "1", "\n", "M_steps", "=", "2", "\n", "N_em_max", "=", "5", "\n", "N_obj_fct", "=", "64", "\n", "N_batches", "=", "20", "\n", "", "else", ":", "\n", "            ", "N_data_acquisitions", "=", "4", "\n", "M_steps", "=", "5", "#", "\n", "N_em_max", "=", "350", "\n", "N_batches", "=", "15000", "\n", "N_obj_fct", "=", "512", "\n", "\n", "", "fargs", "=", "dict", "(", ")", "\n", "\n", "cargs", "=", "dict", "(", ")", "\n", "cargs", "[", "\"N_monte_carlo_elbo\"", "]", "=", "256", "\n", "cargs", "[", "\"N_em_max_steps\"", "]", "=", "N_em_max", "\n", "cargs", "[", "\"N_objective_fct_monte_carlo\"", "]", "=", "N_obj_fct", "\n", "cargs", "[", "\"patience\"", "]", "=", "15", "# 10", "\n", "\n", "cargs", "[", "\"N_training_init\"", "]", "=", "2048", "\n", "cargs", "[", "\"N_add\"", "]", "=", "1024", "\n", "cargs", "[", "\"N_candidates\"", "]", "=", "4096", "\n", "cargs", "[", "\"N_data_acquisitions\"", "]", "=", "N_data_acquisitions", "\n", "cargs", "[", "\"N_training_baseline\"", "]", "=", "None", "\n", "cargs", "[", "\"N_validation\"", "]", "=", "256", "\n", "\n", "cargs", "[", "\"cooldown\"", "]", "=", "100", "\n", "cargs", "[", "\"active_strategy\"", "]", "=", "\"objfctvar\"", "\n", "cargs", "[", "\"M_steps\"", "]", "=", "M_steps", "\n", "\n", "cargs", "[", "\"VI_SGD_iterations\"", "]", "=", "85", "\n", "cargs", "[", "\"VI_lowrank_dim\"", "]", "=", "50", "\n", "cargs", "[", "\"VI_SGD_monte_carlo\"", "]", "=", "10", "\n", "cargs", "[", "\"VI_em_samples\"", "]", "=", "128", "+", "64", "\n", "\n", "targs", "=", "dict", "(", ")", "\n", "targs", "[", "\"N_epochs\"", "]", "=", "None", "\n", "targs", "[", "\"N_batches\"", "]", "=", "N_batches", "\n", "targs", "[", "\"batch_size\"", "]", "=", "128", "\n", "targs", "[", "\"lr\"", "]", "=", "1e-3", "\n", "targs", "[", "\"weight_decay\"", "]", "=", "1e-5", "\n", "targs", "[", "\"verbose\"", "]", "=", "True", "\n", "targs", "[", "\"reset_model\"", "]", "=", "True", "\n", "\n", "return", "fargs", ",", "cargs", ",", "targs", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.factories.Multiphysics64.objective": [[1197, 1219], ["isinstance", "SMO.optimization.inference.LowRankVariationalInference", "numpy.array", "SMO.optimization.objectives.IntervalObjective.FromBounds"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.IntervalObjective.FromBounds"], ["", "def", "objective", "(", "self", ",", "wmodel", ",", "cargs", ",", "dtype", ",", "device", ",", "type", "=", "None", ")", ":", "\n", "\n", "        ", "assert", "isinstance", "(", "cargs", ",", "dict", ")", "\n", "\n", "inference", "=", "LowRankVariationalInference", "(", "\n", "cargs", "[", "\"VI_SGD_iterations\"", "]", ",", "\n", "cargs", "[", "\"VI_lowrank_dim\"", "]", ",", "\n", "cargs", "[", "\"VI_SGD_monte_carlo\"", "]", ",", "\n", "N_samples_em", "=", "cargs", "[", "\"VI_em_samples\"", "]", ",", "\n", ")", "\n", "\n", "bounds", "=", "np", ".", "array", "(", "[", "[", "8.5", ",", "11", "]", ",", "[", "6.75", ",", "9", "]", "]", ")", "\n", "\n", "objective", "=", "IntervalObjective", ".", "FromBounds", "(", "\n", "wmodel", ",", "\n", "inference", ",", "\n", "bounds", ",", "\n", "lr", "=", "self", ".", "_args", "[", "\"lr_m_step\"", "]", ",", "\n", "dtype", "=", "dtype", ",", "\n", "device", "=", "device", ",", "\n", ")", "\n", "return", "objective", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.factories.DataFactory.__init__": [[1222, 1228], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "case_idf", ",", "case_args", ",", "num_samples_per_phi", ",", "DOE", ")", ":", "\n", "\n", "        ", "self", ".", "_DOE", "=", "DOE", "\n", "self", ".", "_case_idf", "=", "case_idf", "\n", "self", ".", "_case_args", "=", "case_args", "\n", "self", ".", "_num_samples_per_phi", "=", "num_samples_per_phi", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.factories.DataFactory.__call__": [[1229, 1305], ["dict", "list", "list", "enumerate", "utils.database.PoolTracker", "utils.database.PoolTracker.wait", "parallel.utils.DummyProcessPool.shutdown", "genutils.backend", "tqdm.tqdm.tqdm", "NotImplementedError", "list", "list", "list", "min", "mpi4py.futures.MPIPoolExecutor", "list.append", "enumerate", "isinstance", "len", "concurrent.futures.ProcessPoolExecutor", "parallel.utils.DummyProcessPool", "parallel.utils.DummyProcessPool.submit", "print", "future.result", "future.result.keys", "print", "print", "print", "print", "len", "isinstance", "results[].append", "len"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.utils.database.PoolTracker.wait", "home.repos.pwc.inspect_result.bdevl_SMO.parallel.utils.DummyProcessPool.shutdown", "home.repos.pwc.inspect_result.bdevl_SMO.None.genutils.backend", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.PhiState.min", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.Log.append", "home.repos.pwc.inspect_result.bdevl_SMO.parallel.utils.DummyProcessPool.submit", "home.repos.pwc.inspect_result.bdevl_SMO.parallel.utils.DummyFuture.result", "home.repos.pwc.inspect_result.bdevl_SMO.lamp.metrics.MetricEnsemble.keys", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.Log.append"], ["", "def", "__call__", "(", "\n", "self", ",", "\n", "retain_X_g", "=", "False", ",", "\n", "retain_X_b", "=", "False", ",", "\n", "retain_phi", "=", "False", ",", "\n", "mpi_num_workers", "=", "None", ",", "\n", "shared_memory_parallelization", "=", "False", ",", "\n", "calculate_features", "=", "False", ",", "\n", "feature_dict", "=", "None", ",", "\n", ")", ":", "\n", "\n", "        ", "if", "calculate_features", "or", "feature_dict", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\n", "\"Pre-computation of features has not yet been implemented\"", "\n", ")", "\n", "\n", "", "results", "=", "dict", "(", ")", "\n", "\n", "results", "[", "\"kappa\"", "]", "=", "list", "(", ")", "\n", "\n", "if", "retain_X_g", ":", "\n", "            ", "results", "[", "\"X_g\"", "]", "=", "list", "(", ")", "\n", "", "if", "retain_X_b", ":", "\n", "            ", "results", "[", "\"X_b\"", "]", "=", "list", "(", ")", "\n", "", "if", "retain_phi", ":", "\n", "            ", "results", "[", "\"phi\"", "]", "=", "list", "(", ")", "\n", "\n", "", "if", "mpi_num_workers", ":", "\n", "            ", "assert", "isinstance", "(", "mpi_num_workers", ",", "int", ")", "and", "mpi_num_workers", ">=", "1", "\n", "num_workers_used", "=", "min", "(", "mpi_num_workers", ",", "len", "(", "self", ".", "_DOE", ")", ")", "\n", "pool", "=", "MPIPoolExecutor", "(", "max_workers", "=", "num_workers_used", ")", "\n", "", "elif", "shared_memory_parallelization", ":", "\n", "# shared memory parallel", "\n", "            ", "pool", "=", "ProcessPoolExecutor", "(", "8", ")", "\n", "", "else", ":", "\n", "            ", "pool", "=", "DummyProcessPool", "(", ")", "\n", "\n", "", "futures", "=", "list", "(", ")", "\n", "for", "n", ",", "phi", "in", "enumerate", "(", "self", ".", "_DOE", ")", ":", "\n", "            ", "futures", ".", "append", "(", "\n", "pool", ".", "submit", "(", "\n", "exec", ",", "\n", "self", ".", "_case_idf", ",", "\n", "self", ".", "_case_args", ",", "\n", "phi", ",", "\n", "self", ".", "_num_samples_per_phi", ",", "\n", "retain_X_b", ",", "\n", "retain_X_g", ",", "\n", "retain_phi", ",", "\n", ")", "\n", ")", "\n", "\n", "", "tracker", "=", "PoolTracker", "(", "futures", ")", "\n", "T_SLEEP_INTERVAL", "=", "10", "if", "not", "mpi_num_workers", "else", "30", "\n", "tracker", ".", "wait", "(", "verbose", "=", "True", ",", "T_SLEEP_INTERVAL", "=", "T_SLEEP_INTERVAL", ")", "\n", "pool", ".", "shutdown", "(", "wait", "=", "True", ")", "\n", "is_backend", "=", "backend", "(", ")", "\n", "for", "n", ",", "future", "in", "tqdm", "(", "enumerate", "(", "futures", ")", ",", "disable", "=", "is_backend", ")", ":", "\n", "\n", "            ", "if", "is_backend", ":", "\n", "                ", "print", "(", "\"Future {} / {}\"", ".", "format", "(", "n", ",", "len", "(", "futures", ")", ")", ")", "\n", "\n", "", "try", ":", "\n", "                ", "res_", "=", "future", ".", "result", "(", ")", "\n", "if", "not", "(", "isinstance", "(", "res_", ",", "str", ")", "and", "res_", "==", "\"PURGE\"", ")", ":", "\n", "                    ", "for", "key", "in", "res_", ".", "keys", "(", ")", ":", "\n", "                        ", "results", "[", "key", "]", ".", "append", "(", "res_", "[", "key", "]", ")", "\n", "\n", "", "", "", "except", "Exception", "as", "err", ":", "\n", "\n", "                ", "print", "(", "\"++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\"", ")", "\n", "print", "(", "\"Encoundered error in future {} / {}\"", ".", "format", "(", "n", ",", "len", "(", "futures", ")", ")", ")", "\n", "print", "(", "err", ")", "\n", "print", "(", "\"++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\"", ")", "\n", "\n", "", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.factories.DataFactory.training_data": [[1306, 1338], ["factories.DataFactory.", "[].keys", "dict", "torch.zeros", "torch.zeros", "torch.zeros", "range", "torch.zeros", "len", "len", "len", "enumerate", "torch.tensor", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.lamp.metrics.MetricEnsemble.keys"], ["", "def", "training_data", "(", "self", ",", "mpi_num_workers", "=", "None", ",", "shared_memory_parallelization", "=", "False", ")", ":", "\n", "\n", "        ", "RES", "=", "self", "(", "\n", "retain_X_g", "=", "True", ",", "\n", "retain_X_b", "=", "True", ",", "\n", "retain_phi", "=", "True", ",", "\n", "mpi_num_workers", "=", "mpi_num_workers", ",", "\n", "shared_memory_parallelization", "=", "shared_memory_parallelization", ",", "\n", ")", "\n", "\n", "assert", "(", "\n", "self", ".", "_num_samples_per_phi", "==", "1", "\n", ")", ",", "\"the following code assumes only one data point per phi has been generated\"", "\n", "kappa_keys", "=", "RES", "[", "\"kappa\"", "]", "[", "0", "]", "[", "0", "]", ".", "keys", "(", ")", "\n", "kappa", "=", "dict", "(", ")", "\n", "for", "kappa_key", "in", "kappa_keys", ":", "\n", "            ", "kappa", "[", "kappa_key", "]", "=", "torch", ".", "zeros", "(", "len", "(", "self", ".", "_DOE", ")", ")", "\n", "\n", "", "X_g", "=", "torch", ".", "zeros", "(", "(", "len", "(", "self", ".", "_DOE", ")", ",", ")", "+", "RES", "[", "\"X_g\"", "]", "[", "0", "]", "[", "0", "]", ".", "shape", ")", "\n", "X_b", "=", "torch", ".", "zeros", "(", "(", "len", "(", "self", ".", "_DOE", ")", ",", ")", "+", "RES", "[", "\"X_b\"", "]", "[", "0", "]", "[", "0", "]", ".", "shape", ")", "\n", "phi", "=", "torch", ".", "zeros", "(", "len", "(", "self", ".", "_DOE", ")", ",", "len", "(", "RES", "[", "\"phi\"", "]", "[", "0", "]", "[", "0", "]", ")", ")", "\n", "\n", "for", "n", "in", "range", "(", "len", "(", "self", ".", "_DOE", ")", ")", ":", "\n", "\n", "            ", "for", "j", ",", "mkey", "in", "enumerate", "(", "kappa_keys", ")", ":", "\n", "                ", "kappa", "[", "mkey", "]", "[", "n", "]", "=", "RES", "[", "\"kappa\"", "]", "[", "n", "]", "[", "0", "]", "[", "mkey", "]", "\n", "\n", "", "X_g", "[", "n", ",", ":", ",", ":", "]", "=", "RES", "[", "\"X_g\"", "]", "[", "n", "]", "[", "0", "]", "\n", "X_b", "[", "n", ",", ":", ",", ":", "]", "=", "RES", "[", "\"X_b\"", "]", "[", "n", "]", "[", "0", "]", "\n", "phi", "[", "n", ",", ":", "]", "=", "torch", ".", "tensor", "(", "RES", "[", "\"phi\"", "]", "[", "n", "]", "[", "0", "]", ")", "\n", "\n", "", "return", "kappa", ",", "X_g", ",", "X_b", ",", "phi", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.factories.exec": [[1340, 1382], ["factories.CaseFactory.FromIdentifier", "CaseFactory.FromIdentifier.rf", "CaseFactory.FromIdentifier.hmg", "CaseFactory.FromIdentifier.htransform", "rf.set_phi", "dict", "list", "list", "list", "list", "torch.no_grad", "range", "rf.rsample", "factory.htransform.", "factory.hmg.homogenize_img", "results[].append", "results[].append", "results[].append", "results[].append"], "function", ["home.repos.pwc.inspect_result.bdevl_SMO.SMO.factories.CaseFactory.FromIdentifier", "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.AbstractObjective.rf", "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.WrapperModel.hmg", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.factories.Multiphysics32.htransform", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.set_phi", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.rsample", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.homogenization.LinearHomogenizer.homogenize_img", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.Log.append", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.Log.append", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.Log.append", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.Log.append"], ["", "", "def", "exec", "(", "\n", "case_idf", ",", "case_args", ",", "phi", ",", "num_samples_per_phi", ",", "retain_X_b", ",", "retain_X_g", ",", "retain_phi", "\n", ")", ":", "\n", "\n", "    ", "factory", "=", "CaseFactory", ".", "FromIdentifier", "(", "case_idf", ",", "case_args", ")", "\n", "\n", "rf", ",", "_", "=", "factory", ".", "rf", "(", ")", "\n", "hmg", "=", "factory", ".", "hmg", "(", ")", "\n", "htransform", "=", "factory", ".", "htransform", "(", ")", "\n", "\n", "rf", ".", "set_phi", "(", "phi", ")", "\n", "\n", "results", "=", "dict", "(", ")", "\n", "results", "[", "\"kappa\"", "]", "=", "list", "(", ")", "\n", "\n", "if", "retain_X_g", ":", "\n", "        ", "results", "[", "\"X_g\"", "]", "=", "list", "(", ")", "\n", "", "if", "retain_X_b", ":", "\n", "        ", "results", "[", "\"X_b\"", "]", "=", "list", "(", ")", "\n", "", "if", "retain_phi", ":", "\n", "        ", "results", "[", "\"phi\"", "]", "=", "list", "(", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\n", "        ", "for", "n", "in", "range", "(", "num_samples_per_phi", ")", ":", "\n", "\n", "            ", "X_g", "=", "rf", ".", "rsample", "(", ")", "\n", "X_b", "=", "htransform", "(", "X_g", ")", "\n", "assert", "X_b", ".", "shape", "==", "X_g", ".", "shape", "\n", "\n", "kappa", "=", "hmg", ".", "homogenize_img", "(", "X_b", ",", "AcknowledgeRaw", "=", "True", ")", "\n", "\n", "results", "[", "\"kappa\"", "]", ".", "append", "(", "kappa", ")", "\n", "\n", "if", "retain_X_g", ":", "\n", "                ", "results", "[", "\"X_g\"", "]", ".", "append", "(", "X_g", ")", "\n", "", "if", "retain_X_b", ":", "\n", "                ", "results", "[", "\"X_b\"", "]", ".", "append", "(", "X_b", ")", "\n", "", "if", "retain_phi", ":", "\n", "                ", "results", "[", "\"phi\"", "]", ".", "append", "(", "phi", ")", "\n", "\n", "", "", "", "return", "results", "\n", "", ""]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.discriminative.DiscriminativeModel.__init__": [[11, 13], ["lamp.modules.BaseModule.__init__"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.discriminative.HomoscedasticLinear.__init__": [[16, 21], ["lamp.modules.BaseModule.__init__", "torch.nn.Linear", "torch.nn.Parameter", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim_in", ",", "dim_out", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_lin", "=", "torch", ".", "nn", ".", "Linear", "(", "dim_in", ",", "dim_out", ")", "\n", "self", ".", "_logsigma", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "dim_out", ")", ")", "\n", "self", ".", "_dim_out", "=", "(", "dim_out", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.discriminative.HomoscedasticLinear.forward": [[22, 28], ["discriminative.HomoscedasticLinear._lin", "discriminative.HomoscedasticLinear._logsigma.expand"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "batch_dim", "=", "x", ".", "shape", "[", "0", "]", "\n", "a", "=", "self", ".", "_lin", "(", "x", ")", "\n", "b", "=", "self", ".", "_logsigma", ".", "expand", "(", "(", "batch_dim", ",", ")", "+", "self", ".", "_dim_out", ")", "\n", "\n", "return", "a", ",", "b", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.discriminative.ForkedLinear.__init__": [[31, 35], ["lamp.modules.BaseModule.__init__", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim_in", ",", "dim_out", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_lina", "=", "torch", ".", "nn", ".", "Linear", "(", "dim_in", ",", "dim_out", ")", "\n", "self", ".", "_linb", "=", "torch", ".", "nn", ".", "Linear", "(", "dim_in", ",", "dim_out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.discriminative.ForkedLinear.forward": [[36, 41], ["discriminative.ForkedLinear._lina", "discriminative.ForkedLinear._linb"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "a", "=", "self", ".", "_lina", "(", "x", ")", "\n", "b", "=", "self", ".", "_linb", "(", "x", ")", "\n", "\n", "return", "a", ",", "b", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.discriminative.DiscriminativeCNN.__init__": [[44, 102], ["discriminative.DiscriminativeModel.__init__", "set().issubset", "options.update", "options.items", "discriminative.DiscriminativeCNN.construct", "set", "warnings.warn"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.__init__", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.discriminative.DiscriminativeCNN.construct", "home.repos.pwc.inspect_result.bdevl_SMO.None.genutils.StateVariable.set"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "options", "=", "{", "\n", "\"nx\"", ":", "None", ",", "\n", "\"filters\"", ":", "None", ",", "\n", "\"dropout\"", ":", "None", ",", "\n", "\"dim_out\"", ":", "None", ",", "\n", "\"homoscedastic\"", ":", "False", ",", "\n", "\"num_additional_full_layers\"", ":", "0", ",", "\n", "\"kernel_size\"", ":", "3", ",", "\n", "\"make_deterministic\"", ":", "False", ",", "\n", "\"use_phi_dim\"", ":", "False", ",", "\n", "\"pooling_type\"", ":", "\"avg\"", ",", "\n", "\"dim_hidden\"", ":", "30", ",", "\n", "\"gate\"", ":", "False", ",", "\n", "\"padding\"", ":", "1", ",", "\n", "\"cnn_bias\"", ":", "True", ",", "\n", "\"activation\"", ":", "\"leakyrelu\"", ",", "\n", "}", "\n", "\n", "assert", "set", "(", "kwargs", ")", ".", "issubset", "(", "\n", "options", "\n", ")", ",", "\"Provided keywarg argument does not match template options\"", "\n", "options", ".", "update", "(", "kwargs", ")", "\n", "_valid", "=", "True", "\n", "for", "key", ",", "value", "in", "options", ".", "items", "(", ")", ":", "\n", "            ", "if", "value", "is", "None", ":", "\n", "                ", "warnings", ".", "warn", "(", "\n", "\"The required key : {} for discriminative CNN was not supplied in the **kwargs.\"", ".", "format", "(", "\n", "kwargs", "\n", ")", "\n", ")", "\n", "_valid", "=", "False", "\n", "", "", "assert", "_valid", ",", "\"Constructor failed.\"", "\n", "assert", "options", "[", "\"nx\"", "]", "in", "[", "\n", "32", ",", "\n", "64", ",", "\n", "128", ",", "\n", "]", ",", "\"The spatial resolution is neither 32, 64 nor 128.\"", "\n", "assert", "options", "[", "\"pooling_type\"", "]", "in", "[", "\n", "\"avg\"", ",", "\n", "\"max\"", ",", "\n", "]", ",", "\"The pooling type must either be 'avg' or 'max' (provided: {})\"", ".", "format", "(", "\n", "options", "[", "\"pooling_type\"", "]", "\n", ")", "\n", "assert", "options", "[", "\"activation\"", "]", "in", "[", "\n", "\"leakyrelu\"", ",", "\n", "\"relu\"", ",", "\n", "]", ",", "\"The activation function {} cannot be created\"", ".", "format", "(", "options", "[", "\"activation\"", "]", ")", "\n", "\n", "self", ".", "_options", "=", "options", "\n", "self", ".", "_cnn_dim", "=", "None", "\n", "self", ".", "L", "=", "None", "\n", "self", ".", "L2", "=", "None", "\n", "\n", "self", ".", "construct", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.discriminative.DiscriminativeCNN.Reconstruct": [[103, 117], ["cls", "cls.load_state_dict", "cls.train", "cls.eval"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.SMO.discriminative.DiscriminativeTrainer.train", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.Kernel.eval"], ["", "@", "classmethod", "\n", "def", "Reconstruct", "(", "cls", ",", "options", ":", "dict", ",", "state_dict", ":", "OrderedDict", ",", "*", ",", "training", "=", "None", ")", ":", "\n", "\n", "        ", "assert", "training", "is", "not", "None", "\n", "\n", "discriminative", "=", "cls", "(", "options", ")", "\n", "discriminative", ".", "load_state_dict", "(", "state_dict", ")", "\n", "\n", "if", "training", ":", "\n", "            ", "discriminative", ".", "train", "(", ")", "\n", "", "else", ":", "\n", "            ", "discriminative", ".", "eval", "(", ")", "\n", "\n", "", "return", "discriminative", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.discriminative.DiscriminativeCNN.construct": [[118, 198], ["torch.nn.Sequential", "torch.nn.Sequential", "enumerate", "torch.nn.Sequential.add_module", "int", "range", "torch.nn.Sequential.add_module", "torch.nn.Sequential.add_module", "lamp.modules.Flattening", "torch.nn.Sequential.add_module", "isinstance", "torch.nn.Sequential.add_module", "torch.nn.Sequential.add_module", "torch.nn.Sequential.add_module", "torch.nn.LeakyReLU", "torch.nn.Conv2d", "discriminative.DiscriminativeCNN.construct.activation"], "methods", ["None"], ["", "def", "construct", "(", "self", ")", ":", "\n", "\n", "        ", "L", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "L2", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "filters", "=", "self", ".", "_options", "[", "\"filters\"", "]", "\n", "channels", "=", "[", "1", "]", "+", "self", ".", "_options", "[", "\"filters\"", "]", "[", ":", "-", "1", "]", "\n", "kernel_size", "=", "self", ".", "_options", "[", "\"kernel_size\"", "]", "\n", "padding", "=", "self", ".", "_options", "[", "\"padding\"", "]", "\n", "cnn_bias", "=", "self", ".", "_options", "[", "\"cnn_bias\"", "]", "\n", "pooling_type", "=", "self", ".", "_options", "[", "\"pooling_type\"", "]", "\n", "dropout", "=", "self", ".", "_options", "[", "\"dropout\"", "]", "\n", "nx", "=", "self", ".", "_options", "[", "\"nx\"", "]", "\n", "use_phi_dim", "=", "self", ".", "_options", "[", "\"use_phi_dim\"", "]", "\n", "num_additional_full_layers", "=", "self", ".", "_options", "[", "\"num_additional_full_layers\"", "]", "\n", "dim_hidden", "=", "self", ".", "_options", "[", "\"dim_hidden\"", "]", "\n", "\n", "def", "activation", "(", ")", ":", "\n", "            ", "if", "self", ".", "_options", "[", "\"activation\"", "]", "==", "\"leakyrelu\"", ":", "\n", "                ", "return", "torch", ".", "nn", ".", "LeakyReLU", "(", ")", "\n", "", "elif", "self", ".", "_options", "[", "\"activation\"", "]", "==", "\"relu\"", ":", "\n", "                ", "return", "torch", ".", "nn", ".", "ReLU", "(", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\n", "\"The activation function {} cannot be constructed.\"", ".", "format", "(", "\n", "self", ".", "_options", "[", "\"activation\"", "]", "\n", ")", "\n", ")", "\n", "\n", "", "", "for", "n", ",", "filter_size", "in", "enumerate", "(", "filters", ")", ":", "\n", "            ", "L", ".", "add_module", "(", "\n", "\"cnn{}\"", ".", "format", "(", "n", ")", ",", "\n", "torch", ".", "nn", ".", "Conv2d", "(", "\n", "channels", "[", "n", "]", ",", "\n", "filter_size", ",", "\n", "kernel_size", "=", "(", "kernel_size", ",", "kernel_size", ")", ",", "\n", "padding", "=", "padding", ",", "\n", "bias", "=", "cnn_bias", ",", "\n", "groups", "=", "1", ",", "\n", ")", ",", "\n", ")", "\n", "L", ".", "add_module", "(", "\"relu{}\"", ".", "format", "(", "n", ")", ",", "activation", "(", ")", ")", "\n", "\n", "if", "pooling_type", "==", "\"max\"", ":", "\n", "                ", "L", ".", "add_module", "(", "\"maxpool{}\"", ".", "format", "(", "n", ")", ",", "torch", ".", "nn", ".", "MaxPool2d", "(", "2", ",", "2", ")", ")", "\n", "", "elif", "pooling_type", "==", "\"avg\"", ":", "\n", "                ", "L", ".", "add_module", "(", "\"avgpool{}\"", ".", "format", "(", "n", ")", ",", "torch", ".", "nn", ".", "AvgPool2d", "(", "2", ",", "2", ")", ")", "\n", "", "else", ":", "\n", "                ", "ValueError", "(", "\"Pooling type {} unknown\"", ".", "format", "(", "pooling_type", ")", ")", "\n", "\n", "", "", "L", ".", "add_module", "(", "\"Flatten\"", ",", "Flattening", "(", ")", ")", "\n", "\n", "if", "dropout", ":", "\n", "            ", "assert", "isinstance", "(", "dropout", ",", "float", ")", "and", "0", "<", "dropout", "<", "1", "\n", "L", ".", "add_module", "(", "\"dropout\"", ",", "torch", ".", "nn", ".", "Dropout", "(", "dropout", ")", ")", "\n", "\n", "", "dim", "=", "int", "(", "filters", "[", "-", "1", "]", "*", "(", "nx", "/", "2", "**", "len", "(", "filters", ")", ")", "**", "2", ")", "\n", "self", ".", "_cnn_dim", "=", "dim", "\n", "\n", "if", "use_phi_dim", ":", "\n", "            ", "assert", "isinstance", "(", "use_phi_dim", ",", "int", ")", "\n", "dim", "+=", "use_phi_dim", "\n", "\n", "", "for", "n", "in", "range", "(", "num_additional_full_layers", ")", ":", "\n", "            ", "L2", ".", "add_module", "(", "\"flinear{}\"", ".", "format", "(", "n", ")", ",", "torch", ".", "nn", ".", "Linear", "(", "dim", ",", "dim_hidden", ")", ")", "\n", "dim", "=", "dim_hidden", "\n", "if", "self", ".", "_options", "[", "\"gate\"", "]", ":", "\n", "                ", "L2", ".", "add_module", "(", "\"batchnorm\"", ",", "torch", ".", "nn", ".", "BatchNorm1d", "(", "dim", ")", ")", "\n", "", "L2", ".", "add_module", "(", "\"frelu{}\"", ".", "format", "(", "n", ")", ",", "activation", "(", ")", ")", "\n", "\n", "", "if", "self", ".", "_options", "[", "\"homoscedastic\"", "]", "and", "not", "self", ".", "_options", "[", "\"make_deterministic\"", "]", ":", "\n", "            ", "L2", ".", "add_module", "(", "\"linear\"", ",", "HomoscedasticLinear", "(", "dim", ",", "self", ".", "_options", "[", "\"dim_out\"", "]", ")", ")", "\n", "", "elif", "self", ".", "_options", "[", "\"make_deterministic\"", "]", ":", "\n", "            ", "L2", ".", "add_module", "(", "\n", "\"linear\"", ",", "torch", ".", "nn", ".", "Linear", "(", "dim", ",", "self", ".", "_options", "[", "\"dim_out\"", "]", ",", "bias", "=", "True", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "L2", ".", "add_module", "(", "\"linear\"", ",", "ForkedLinear", "(", "dim", ",", "self", ".", "_options", "[", "\"dim_out\"", "]", ")", ")", "\n", "\n", "", "self", ".", "_L", "=", "L", "\n", "self", ".", "_L2", "=", "L2", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.discriminative.DiscriminativeCNN.options": [[199, 202], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "options", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_options", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.discriminative.DiscriminativeCNN._deterministic": [[203, 207], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "_deterministic", "(", "self", ")", ":", "\n", "        ", "assert", "\"make_deterministic\"", "in", "self", ".", "_options", "\n", "return", "self", ".", "_options", "[", "\"make_deterministic\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.discriminative.DiscriminativeCNN.use_phi": [[208, 211], ["bool"], "methods", ["None"], ["", "@", "property", "\n", "def", "use_phi", "(", "self", ")", ":", "\n", "        ", "return", "bool", "(", "self", ".", "_options", "[", "\"use_phi_dim\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.discriminative.DiscriminativeCNN.reset_parameters": [[212, 225], ["L.reset_parameters", "L.reset_parameters"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.SMO.discriminative.DiscriminativeCNN.reset_parameters", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.discriminative.DiscriminativeCNN.reset_parameters"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "\n", "        ", "for", "L", "in", "self", ".", "_L", ":", "\n", "            ", "try", ":", "\n", "                ", "L", ".", "reset_parameters", "(", ")", "\n", "", "except", ":", "\n", "                ", "pass", "\n", "\n", "", "", "for", "L", "in", "self", ".", "_L2", ":", "\n", "            ", "try", ":", "\n", "                ", "L", ".", "reset_parameters", "(", ")", "\n", "", "except", ":", "\n", "                ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.discriminative.DiscriminativeCNN.num_parameters_cnn": [[226, 237], ["list", "sum", "list.append", "discriminative.DiscriminativeCNN._L.named_children", "sum", "parameter.numel", "module.parameters"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.Log.append", "home.repos.pwc.inspect_result.bdevl_SMO.utils.database.ParameterStudy.parameters"], ["", "", "", "@", "property", "\n", "def", "num_parameters_cnn", "(", "self", ")", ":", "\n", "\n", "        ", "cnn_modules", "=", "[", "l", "[", "1", "]", "for", "l", "in", "self", ".", "_L", ".", "named_children", "(", ")", "if", "\"cnn\"", "in", "l", "[", "0", "]", "]", "\n", "num_params", "=", "list", "(", ")", "\n", "for", "module", "in", "cnn_modules", ":", "\n", "            ", "num_params", ".", "append", "(", "\n", "sum", "(", "[", "parameter", ".", "numel", "(", ")", "for", "parameter", "in", "module", ".", "parameters", "(", ")", "]", ")", "\n", ")", "\n", "\n", "", "return", "sum", "(", "num_params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.discriminative.DiscriminativeCNN.dtype": [[238, 241], ["list", "discriminative.DiscriminativeCNN.parameters"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.utils.database.ParameterStudy.parameters"], ["", "@", "property", "\n", "def", "dtype", "(", "self", ")", ":", "\n", "        ", "return", "list", "(", "self", ".", "parameters", "(", ")", ")", "[", "0", "]", "[", "0", "]", ".", "dtype", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.discriminative.DiscriminativeCNN.device": [[242, 245], ["list", "discriminative.DiscriminativeCNN.parameters"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.utils.database.ParameterStudy.parameters"], ["", "@", "property", "\n", "def", "device", "(", "self", ")", ":", "\n", "        ", "return", "list", "(", "self", ".", "parameters", "(", ")", ")", "[", "0", "]", "[", "0", "]", ".", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.discriminative.DiscriminativeCNN.forward": [[246, 252], ["discriminative.DiscriminativeCNN._L2", "discriminative.DiscriminativeCNN._L2", "discriminative.DiscriminativeCNN._L", "torch.cat", "discriminative.DiscriminativeCNN._L"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inp", ",", "phi", "=", "None", ")", ":", "\n", "\n", "        ", "if", "phi", "is", "None", ":", "\n", "            ", "return", "self", ".", "_L2", "(", "self", ".", "_L", "(", "inp", ")", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "_L2", "(", "torch", ".", "cat", "(", "(", "self", ".", "_L", "(", "inp", ")", ",", "phi", ")", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.discriminative.DiscriminativeCNN.propagate": [[253, 260], ["discriminative.DiscriminativeCNN.", "lamp.utils.reparametrize"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.lamp.utils.reparametrize"], ["", "", "def", "propagate", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "assert", "(", "\n", "not", "self", ".", "_deterministic", "\n", ")", ",", "\"cannot propagate samples for a deterministic discriminative model\"", "\n", "mu", ",", "logsigma", "=", "self", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "return", "reparametrize", "(", "mu", ",", "logsigma", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.discriminative.DiscriminativeTrainer.__init__": [[263, 297], ["discriminative.DiscriminativeTrainer._create_dataloader", "torch.optim.Adam", "dict", "list", "list", "list", "model.parameters"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.SMO.discriminative.DiscriminativeTrainer._create_dataloader", "home.repos.pwc.inspect_result.bdevl_SMO.utils.database.ParameterStudy.parameters"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "model", ",", "\n", "data", ",", "\n", "batch_size", "=", "256", ",", "\n", "lr", "=", "1e-3", ",", "\n", "weight_decay", "=", "1e-3", ",", "\n", "make_deterministic", "=", "False", ",", "\n", "shuffle", "=", "False", ",", "\n", ")", ":", "\n", "\n", "        ", "self", ".", "model", "=", "model", "\n", "self", ".", "data", "=", "data", "\n", "\n", "assert", "self", ".", "data", "[", "\"Y\"", "]", ".", "ndim", ">", "1", "\n", "assert", "self", ".", "data", "[", "\"Y_val\"", "]", ".", "ndim", ">", "1", "\n", "\n", "if", "\"phi\"", "in", "self", ".", "data", ":", "\n", "            ", "assert", "self", ".", "data", "[", "\"phi\"", "]", ".", "ndim", ">", "1", "\n", "\n", "", "if", "model", ".", "use_phi", ":", "\n", "            ", "assert", "\"phi\"", "in", "self", ".", "data", "\n", "\n", "", "self", ".", "_shuffle", "=", "shuffle", "\n", "self", ".", "_dataloader", "=", "self", ".", "_create_dataloader", "(", "model", ",", "batch_size", ")", "\n", "self", ".", "_optim", "=", "torch", ".", "optim", ".", "Adam", "(", "\n", "model", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ",", "weight_decay", "=", "weight_decay", "\n", ")", "\n", "self", ".", "_make_deterministic", "=", "make_deterministic", "\n", "\n", "self", ".", "monitor", "=", "dict", "(", ")", "\n", "self", ".", "monitor", "[", "\"r2_val\"", "]", "=", "list", "(", ")", "\n", "self", ".", "monitor", "[", "\"ls_val\"", "]", "=", "list", "(", ")", "\n", "self", ".", "monitor", "[", "\"J\"", "]", "=", "list", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.discriminative.DiscriminativeTrainer._create_dataloader": [[298, 308], ["torch.utils.data.DataLoader", "torch.utils.data.TensorDataset", "torch.utils.data.TensorDataset"], "methods", ["None"], ["", "def", "_create_dataloader", "(", "self", ",", "model", ",", "batch_size", ")", ":", "\n", "\n", "        ", "if", "model", ".", "use_phi", ":", "\n", "            ", "dataset", "=", "TensorDataset", "(", "self", ".", "data", "[", "\"X\"", "]", ",", "self", ".", "data", "[", "\"Y\"", "]", ",", "self", ".", "data", "[", "\"phi\"", "]", ")", "\n", "", "else", ":", "\n", "            ", "dataset", "=", "TensorDataset", "(", "self", ".", "data", "[", "\"X\"", "]", ",", "self", ".", "data", "[", "\"Y\"", "]", ")", "\n", "\n", "", "dataloader", "=", "DataLoader", "(", "dataset", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "self", ".", "_shuffle", ")", "\n", "\n", "return", "dataloader", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.discriminative.DiscriminativeTrainer.FromHomogenizationData": [[309, 343], ["dict", "data_tr[].to", "data_val[].to", "cls", "torch.no_grad", "data_tr[].to", "data_val[].to", "dtransform().to", "data_tr[].to", "dtransform().to", "data_val[].to", "dtransform", "dtransform"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.optimization.inference.LowRankVariationalInference.to", "home.repos.pwc.inspect_result.bdevl_SMO.optimization.inference.LowRankVariationalInference.to", "home.repos.pwc.inspect_result.bdevl_SMO.optimization.inference.LowRankVariationalInference.to", "home.repos.pwc.inspect_result.bdevl_SMO.optimization.inference.LowRankVariationalInference.to", "home.repos.pwc.inspect_result.bdevl_SMO.optimization.inference.LowRankVariationalInference.to", "home.repos.pwc.inspect_result.bdevl_SMO.optimization.inference.LowRankVariationalInference.to", "home.repos.pwc.inspect_result.bdevl_SMO.optimization.inference.LowRankVariationalInference.to", "home.repos.pwc.inspect_result.bdevl_SMO.optimization.inference.LowRankVariationalInference.to", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.factories.CaseFactory.dtransform", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.factories.CaseFactory.dtransform"], ["", "@", "classmethod", "\n", "def", "FromHomogenizationData", "(", "\n", "cls", ",", "model", ",", "data_tr", ",", "data_val", ",", "dtype", ",", "device", ",", "dtransform", "=", "None", ",", "**", "kwargs", "\n", ")", ":", "\n", "\n", "        ", "data", "=", "dict", "(", ")", "\n", "\n", "if", "\"use_binary\"", "in", "kwargs", ":", "\n", "            ", "raise", "DeprecationWarning", "\n", "\n", "", "assert", "dtransform", "is", "not", "None", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "if", "\"X_cnn\"", "not", "in", "data_tr", ":", "\n", "                ", "data", "[", "\"X\"", "]", "=", "dtransform", "(", "data_tr", "[", "\"X_g\"", "]", ")", ".", "to", "(", "dtype", "=", "dtype", ",", "device", "=", "device", ")", "\n", "", "else", ":", "\n", "                ", "data", "[", "\"X\"", "]", "=", "data_tr", "[", "\"X_cnn\"", "]", ".", "to", "(", "dtype", "=", "dtype", ",", "device", "=", "device", ")", "\n", "\n", "", "if", "\"X_cnn\"", "not", "in", "data_val", ":", "\n", "                ", "data", "[", "\"X_val\"", "]", "=", "dtransform", "(", "data_val", "[", "\"X_g\"", "]", ")", ".", "to", "(", "\n", "dtype", "=", "dtype", ",", "device", "=", "device", "\n", ")", "\n", "", "else", ":", "\n", "                ", "data", "[", "\"X_val\"", "]", "=", "data_val", "[", "\"X_cnn\"", "]", ".", "to", "(", "dtype", "=", "dtype", ",", "device", "=", "device", ")", "\n", "\n", "", "", "data", "[", "\"Y\"", "]", "=", "data_tr", "[", "\"kappa\"", "]", ".", "to", "(", "dtype", "=", "dtype", ",", "device", "=", "device", ")", "\n", "data", "[", "\"Y_val\"", "]", "=", "data_val", "[", "\"kappa\"", "]", ".", "to", "(", "dtype", "=", "dtype", ",", "device", "=", "device", ")", "\n", "\n", "if", "\"phi\"", "in", "data_tr", ":", "\n", "            ", "data", "[", "\"phi\"", "]", "=", "data_tr", "[", "\"phi\"", "]", ".", "to", "(", "dtype", "=", "dtype", ",", "device", "=", "device", ")", "\n", "", "if", "\"phi\"", "in", "data_val", ":", "\n", "            ", "data", "[", "\"phi_val\"", "]", "=", "data_val", "[", "\"phi\"", "]", ".", "to", "(", "dtype", "=", "dtype", ",", "device", "=", "device", ")", "\n", "\n", "", "return", "cls", "(", "model", ",", "data", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.discriminative.DiscriminativeTrainer.assess": [[344, 373], ["lamp.metrics.CoefficientOfDetermination", "torch.var().item", "torch.mean().item", "ValueError", "RuntimeError", "torch.no_grad", "discriminative.DiscriminativeTrainer.model", "torch.no_grad", "lamp.metrics.CoefficientOfDetermination.", "lamp.utils.DiagonalGaussianLogLikelihood().item", "torch.abs", "torch.exp", "torch.var", "torch.mean", "lamp.utils.DiagonalGaussianLogLikelihood", "torch.exp", "torch.exp"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.optimization.active.DataHandler.model", "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.TargetObjective.var", "home.repos.pwc.inspect_result.bdevl_SMO.lamp.variational.DiagonalMultivariateNormal.mean", "home.repos.pwc.inspect_result.bdevl_SMO.lamp.utils.DiagonalGaussianLogLikelihood"], ["", "def", "assess", "(", "self", ",", "X", ",", "Y", ",", "*", ",", "AcknowledgeTransformed", "=", "False", ")", ":", "\n", "\n", "        ", "if", "not", "AcknowledgeTransformed", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"The X inputs must already have been transformed (according to dtransform()\"", "\n", ")", "\n", "\n", "", "if", "self", ".", "model", ".", "training", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"The model is not in eval mode\"", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "Y_mean", ",", "Y_logsigma", "=", "self", ".", "model", "(", "X", ")", "\n", "\n", "", "cod", "=", "CoefficientOfDetermination", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "R2", "=", "cod", "(", "Y_mean", ",", "Y", ")", "\n", "logscore", "=", "DiagonalGaussianLogLikelihood", "(", "\n", "target", "=", "Y", ",", "mean", "=", "Y_mean", ",", "logvars", "=", "2", "*", "Y_logsigma", ",", "reduce", "=", "torch", ".", "mean", "\n", ")", ".", "item", "(", ")", "\n", "\n", "", "var_global", "=", "torch", ".", "var", "(", "Y", ")", ".", "item", "(", ")", "\n", "var_explained", "=", "torch", ".", "mean", "(", "torch", ".", "exp", "(", "2", "*", "Y_logsigma", ")", ")", ".", "item", "(", ")", "\n", "\n", "normalized", "=", "(", "\n", "(", "(", "Y_mean", "-", "Y", ")", "/", "torch", ".", "exp", "(", "Y_logsigma", ")", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "flatten", "(", ")", "\n", ")", "\n", "num_stddevs", "=", "torch", ".", "abs", "(", "(", "Y_mean", "-", "Y", ")", ")", "/", "torch", ".", "exp", "(", "Y_logsigma", ")", "\n", "\n", "return", "R2", ",", "logscore", ",", "var_global", ",", "var_explained", ",", "num_stddevs", ",", "normalized", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.discriminative.DiscriminativeTrainer.r2_separate": [[374, 384], ["torch.no_grad", "discriminative.DiscriminativeTrainer.model", "lamp.metrics.IndividualR2"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.optimization.active.DataHandler.model", "home.repos.pwc.inspect_result.bdevl_SMO.lamp.metrics.IndividualR2"], ["", "def", "r2_separate", "(", "self", ")", ":", "\n", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "if", "self", ".", "model", ".", "use_phi", "or", "self", ".", "_make_deterministic", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "\n", "", "Y_mean", ",", "Y_logsigma", "=", "self", ".", "model", "(", "self", ".", "data", "[", "\"X_val\"", "]", ")", "\n", "r2", "=", "IndividualR2", "(", "Y_mean", ",", "self", ".", "data", "[", "\"Y_val\"", "]", ")", "\n", "\n", "", "return", "r2", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.discriminative.DiscriminativeTrainer._validation": [[385, 424], ["lamp.metrics.CoefficientOfDetermination", "discriminative.DiscriminativeTrainer.model.train", "discriminative.DiscriminativeTrainer.model.eval", "torch.no_grad", "lamp.metrics.CoefficientOfDetermination.", "discriminative.DiscriminativeTrainer.monitor[].append", "lamp.metrics.CoefficientOfDetermination.", "discriminative.DiscriminativeTrainer.monitor[].append", "lamp.utils.DiagonalGaussianLogLikelihood().item", "discriminative.DiscriminativeTrainer.monitor[].append", "discriminative.DiscriminativeTrainer.model", "discriminative.DiscriminativeTrainer.model", "discriminative.DiscriminativeTrainer.model", "discriminative.DiscriminativeTrainer.model", "lamp.utils.DiagonalGaussianLogLikelihood"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.SMO.discriminative.DiscriminativeTrainer.train", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.Kernel.eval", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.Log.append", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.Log.append", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.Log.append", "home.repos.pwc.inspect_result.bdevl_SMO.optimization.active.DataHandler.model", "home.repos.pwc.inspect_result.bdevl_SMO.optimization.active.DataHandler.model", "home.repos.pwc.inspect_result.bdevl_SMO.optimization.active.DataHandler.model", "home.repos.pwc.inspect_result.bdevl_SMO.optimization.active.DataHandler.model", "home.repos.pwc.inspect_result.bdevl_SMO.lamp.utils.DiagonalGaussianLogLikelihood"], ["", "def", "_validation", "(", "self", ",", "eval_mode", "=", "True", ")", ":", "\n", "\n", "        ", "if", "eval_mode", ":", "\n", "            ", "self", ".", "model", ".", "eval", "(", ")", "\n", "", "cod", "=", "CoefficientOfDetermination", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\n", "            ", "if", "self", ".", "_make_deterministic", ":", "\n", "                ", "if", "self", ".", "model", ".", "use_phi", ":", "\n", "                    ", "Y_mean", "=", "self", ".", "model", "(", "self", ".", "data", "[", "\"X_val\"", "]", ",", "self", ".", "data", "[", "\"phi_val\"", "]", ")", "\n", "", "else", ":", "\n", "                    ", "Y_mean", "=", "self", ".", "model", "(", "self", ".", "data", "[", "\"X_val\"", "]", ")", "\n", "", "r2", "=", "cod", "(", "Y_mean", ",", "self", ".", "data", "[", "\"Y_val\"", "]", ")", "\n", "self", ".", "monitor", "[", "\"r2_val\"", "]", ".", "append", "(", "r2", ")", "\n", "ls_val", "=", "0", "\n", "", "else", ":", "\n", "\n", "                ", "if", "self", ".", "model", ".", "use_phi", ":", "\n", "                    ", "Y_mean", ",", "Y_logsigma", "=", "self", ".", "model", "(", "\n", "self", ".", "data", "[", "\"X_val\"", "]", ",", "self", ".", "data", "[", "\"phi_val\"", "]", "\n", ")", "\n", "", "else", ":", "\n", "                    ", "Y_mean", ",", "Y_logsigma", "=", "self", ".", "model", "(", "self", ".", "data", "[", "\"X_val\"", "]", ")", "\n", "\n", "", "r2", "=", "cod", "(", "Y_mean", ",", "self", ".", "data", "[", "\"Y_val\"", "]", ")", "\n", "self", ".", "monitor", "[", "\"r2_val\"", "]", ".", "append", "(", "r2", ")", "\n", "\n", "ls_val", "=", "DiagonalGaussianLogLikelihood", "(", "\n", "target", "=", "self", ".", "data", "[", "\"Y_val\"", "]", ",", "\n", "mean", "=", "Y_mean", ",", "\n", "logvars", "=", "2", "*", "Y_logsigma", ",", "\n", "reduce", "=", "torch", ".", "mean", ",", "\n", ")", ".", "item", "(", ")", "\n", "self", ".", "monitor", "[", "\"ls_val\"", "]", ".", "append", "(", "ls_val", ")", "\n", "\n", "", "", "self", ".", "model", ".", "train", "(", ")", "\n", "\n", "return", "r2", ",", "ls_val", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.discriminative.DiscriminativeTrainer.standard_deviation_val": [[425, 434], ["discriminative.DiscriminativeTrainer.model.eval", "torch.no_grad", "discriminative.DiscriminativeTrainer.model", "torch.abs", "torch.exp"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.Kernel.eval", "home.repos.pwc.inspect_result.bdevl_SMO.optimization.active.DataHandler.model"], ["", "def", "standard_deviation_val", "(", "self", ")", ":", "\n", "\n", "#", "\n", "        ", "self", ".", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "Y_mean", ",", "Y_logsigma", "=", "self", ".", "model", "(", "self", ".", "data", "[", "\"X_val\"", "]", ")", "\n", "D", "=", "torch", ".", "abs", "(", "Y_mean", "-", "self", ".", "data", "[", "\"Y_val\"", "]", ")", "/", "torch", ".", "exp", "(", "Y_logsigma", ")", "\n", "\n", "", "return", "D", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.discriminative.DiscriminativeTrainer.train": [[435, 493], ["discriminative.DiscriminativeTrainer.model.train", "range", "torch.nn.MSELoss", "discriminative.DiscriminativeTrainer.monitor[].append", "discriminative.DiscriminativeTrainer._optim.zero_grad", "torch.nn.MSELoss.backward", "discriminative.DiscriminativeTrainer._optim.step", "torch.nn.MSELoss.item", "discriminative.DiscriminativeTrainer._validation", "discriminative.DiscriminativeTrainer._validation", "print", "torch.nn.MSELoss.", "discriminative.DiscriminativeTrainer.model", "discriminative.DiscriminativeTrainer.model", "discriminative.DiscriminativeTrainer.model", "discriminative.DiscriminativeTrainer.model", "lamp.utils.DiagonalGaussianLogLikelihood", "X_.detach", "X_.detach", "X_.detach", "X_.detach", "Y_.flatten().detach", "discriminative.DiscriminativeTrainer.flatten", "phi_.detach", "phi_.detach", "Y_logsigma.flatten", "Y_.flatten"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.SMO.discriminative.DiscriminativeTrainer.train", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.Log.append", "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.AbstractObjective.step", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.discriminative.DiscriminativeTrainer._validation", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.discriminative.DiscriminativeTrainer._validation", "home.repos.pwc.inspect_result.bdevl_SMO.optimization.active.DataHandler.model", "home.repos.pwc.inspect_result.bdevl_SMO.optimization.active.DataHandler.model", "home.repos.pwc.inspect_result.bdevl_SMO.optimization.active.DataHandler.model", "home.repos.pwc.inspect_result.bdevl_SMO.optimization.active.DataHandler.model", "home.repos.pwc.inspect_result.bdevl_SMO.lamp.utils.DiagonalGaussianLogLikelihood"], ["", "def", "train", "(", "self", ",", "num_epochs", ",", "verbose", "=", "True", ",", "output_interval", "=", "1", ")", ":", "\n", "\n", "        ", "self", ".", "model", ".", "train", "(", ")", "\n", "\n", "if", "self", ".", "_make_deterministic", ":", "\n", "            ", "lossfct", "=", "torch", ".", "nn", ".", "MSELoss", "(", ")", "\n", "\n", "", "for", "epoch", "in", "range", "(", "num_epochs", ")", ":", "\n", "\n", "            ", "J_loc", "=", "0", "\n", "N_loc", "=", "0", "\n", "\n", "for", "data", "in", "self", ".", "_dataloader", ":", "\n", "\n", "                ", "if", "self", ".", "model", ".", "use_phi", ":", "\n", "                    ", "X_", ",", "Y_", ",", "phi_", "=", "data", "\n", "", "else", ":", "\n", "                    ", "X_", ",", "Y_", "=", "data", "\n", "\n", "", "self", ".", "_optim", ".", "zero_grad", "(", ")", "\n", "\n", "if", "self", ".", "_make_deterministic", ":", "\n", "                    ", "if", "self", ".", "model", ".", "use_phi", ":", "\n", "                        ", "Y_mean", "=", "self", ".", "model", "(", "X_", ".", "detach", "(", ")", ",", "phi", "=", "phi_", ".", "detach", "(", ")", ")", "\n", "", "else", ":", "\n", "                        ", "Y_mean", "=", "self", ".", "model", "(", "X_", ".", "detach", "(", ")", ")", "\n", "\n", "", "J", "=", "lossfct", "(", "Y_mean", ",", "Y_", ")", "\n", "", "else", ":", "\n", "                    ", "if", "self", ".", "model", ".", "use_phi", ":", "\n", "                        ", "Y_mean", ",", "Y_logsigma", "=", "self", ".", "model", "(", "X_", ".", "detach", "(", ")", ",", "phi", "=", "phi_", ".", "detach", "(", ")", ")", "\n", "", "else", ":", "\n", "                        ", "Y_mean", ",", "Y_logsigma", "=", "self", ".", "model", "(", "X_", ".", "detach", "(", ")", ")", "\n", "\n", "", "J", "=", "-", "DiagonalGaussianLogLikelihood", "(", "\n", "Y_", ".", "flatten", "(", ")", ".", "detach", "(", ")", ",", "\n", "Y_mean", ".", "flatten", "(", ")", ",", "\n", "2", "*", "Y_logsigma", ".", "flatten", "(", ")", ",", "\n", "reduce", "=", "torch", ".", "mean", ",", "\n", ")", "\n", "\n", "", "J", ".", "backward", "(", ")", "\n", "self", ".", "_optim", ".", "step", "(", ")", "\n", "\n", "J_loc", "+=", "J", ".", "item", "(", ")", "\n", "N_loc", "+=", "1", "\n", "\n", "", "self", ".", "monitor", "[", "\"J\"", "]", ".", "append", "(", "J_loc", "/", "N_loc", ")", "\n", "\n", "if", "not", "self", ".", "_make_deterministic", ":", "\n", "                ", "r2_val", ",", "ls_val", "=", "self", ".", "_validation", "(", ")", "\n", "", "else", ":", "\n", "                ", "r2_val", ",", "ls_val", "=", "self", ".", "_validation", "(", ")", "\n", "\n", "", "if", "verbose", "and", "(", "(", "(", "epoch", "+", "1", ")", "%", "output_interval", "==", "0", ")", "or", "epoch", "==", "0", ")", ":", "\n", "                ", "print", "(", "\n", "\"Epoch {} / {}   ---Avg. Loss: {:.3f} | Val. R2: {:.3f} | Val. LS: {:.3f}\"", ".", "format", "(", "\n", "epoch", "+", "1", ",", "num_epochs", ",", "self", ".", "monitor", "[", "\"J\"", "]", "[", "-", "1", "]", ",", "r2_val", ",", "ls_val", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.utils.DataTransformation.__init__": [[54, 60], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.__init__"], ["", "def", "__exit__", "(", "self", ",", "exc_type", ",", "exc_val", ",", "exc_tb", ")", ":", "\n", "        ", "pass", "\n", "\n", "", "def", "submit", "(", "self", ",", "f", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "return", "DummyFuture", "(", "self", ".", "_catch_exceptions", ",", "f", ",", "args", ",", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.utils.DataTransformation.differentiable": [[61, 64], ["None"], "methods", ["None"], ["", "def", "shutdown", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "pass", "\n", "", "", ""]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.utils.DataTransformation._reshape": [[65, 71], ["x.view"], "methods", ["None"], []], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.utils.DataTransformation.forward": [[72, 74], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.utils.IdentityDataTransform.__init__": [[77, 79], ["utils.DataTransformation.__init__"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.__init__"], []], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.utils.IdentityDataTransform.forward": [[80, 82], ["utils.IdentityDataTransform._reshape"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.SMO.utils.DataTransformation._reshape"], []], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.utils.ExponentialDataTransform.__init__": [[85, 87], ["utils.DataTransformation.__init__"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.__init__"], []], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.utils.ExponentialDataTransform.forward": [[88, 91], ["utils.ExponentialDataTransform._reshape", "torch.exp"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.SMO.utils.DataTransformation._reshape"], []], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.utils.ExponentialDataTransform.__repr__": [[92, 94], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.utils.BinarizeDataTransform.__init__": [[97, 103], ["utils.DataTransformation.__init__"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.__init__"], []], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.utils.BinarizeDataTransform.forward": [[104, 109], ["torch.full_like", "utils.BinarizeDataTransform._reshape"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.SMO.utils.DataTransformation._reshape"], []], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.utils.BinarizeDataTransform.__repr__": [[110, 114], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.utils.HyperbolicDataTransform.__init__": [[118, 125], ["utils.DataTransformation.__init__", "torch.nn.Tanh"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.__init__"], []], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.utils.HyperbolicDataTransform.forward": [[126, 135], ["utils.HyperbolicDataTransform._reshape", "utils.HyperbolicDataTransform._tanh"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.SMO.utils.DataTransformation._reshape"], []], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.utils.HyperbolicDataTransform.__str__": [[136, 144], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.utils.SigmoidDataTransform.__init__": [[147, 153], ["super.__init__", "torch.nn.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.__init__"], []], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.utils.SigmoidDataTransform.forward": [[154, 157], ["utils.SigmoidDataTransform._reshape", "utils.SigmoidDataTransform._sigmoid"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.SMO.utils.DataTransformation._reshape"], []], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.utils.SigmoidDataTransform.__str__": [[158, 160], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.utils.Gaussian2D.__init__": [[177, 181], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.utils.Gaussian2D.plot": [[182, 197], ["numpy.sqrt", "numpy.linspace", "numpy.linspace", "numpy.meshgrid", "scipy.stats.multivariate_normal.pdf", "matplotlib.pyplot.contour", "matplotlib.pyplot.clabel", "matplotlib.pyplot.gca", "numpy.diag", "numpy.dstack"], "methods", ["None"], []], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.utils.Gaussian2D.sample": [[198, 200], ["scipy.stats.multivariate_normal.rvs"], "methods", ["None"], []], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.utils.softmax": [[9, 15], ["torch.nn.Softmax", "torch.tensor", "torch.nn.Softmax", "torch.tensor"], "function", ["None"], ["self", ".", "_args", "=", "args", "\n", "self", ".", "_kwargs", "=", "kwargs", "\n", "self", ".", "_results", "=", "None", "\n", "self", ".", "_exception", "=", "None", "\n", "\n", "", "def", "compute", "(", "self", ")", ":", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.utils.DiscriminativeModelObjectiveFunction": [[17, 51], ["list", "numpy.argmax", "dict", "factory.doe_reference_samples", "factory.doe_reference_samples", "torch.no_grad", "numpy.array", "numpy.array().reshape", "model.propagate", "list.append", "sample.to", "interval.fraction_within", "numpy.array"], "function", ["home.repos.pwc.inspect_result.bdevl_SMO.SMO.discriminative.DiscriminativeCNN.propagate", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.Log.append", "home.repos.pwc.inspect_result.bdevl_SMO.optimization.inference.LowRankVariationalInference.to", "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.TemperedIntervalManager.fraction_within"], ["            ", "try", ":", "\n", "                ", "self", ".", "_results", "=", "self", ".", "_f", "(", "*", "self", ".", "_args", ",", "**", "self", ".", "_kwargs", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                ", "self", ".", "_exception", "=", "e", "\n", "\n", "", "", "if", "not", "self", ".", "_catch_exceptions", "and", "self", ".", "_exception", "is", "not", "None", ":", "\n", "            ", "raise", "self", ".", "_exception", "\n", "\n", "", "", "def", "result", "(", "self", ")", ":", "\n", "\n", "        ", "if", "self", ".", "_results", "is", "None", "and", "self", ".", "_exception", "is", "None", ":", "\n", "            ", "self", ".", "compute", "(", ")", "\n", "\n", "", "if", "self", ".", "_exception", "is", "not", "None", ":", "\n", "            ", "raise", "self", ".", "_exception", "\n", "\n", "", "return", "self", ".", "_results", "\n", "\n", "", "def", "done", "(", "self", ")", ":", "\n", "        ", "return", "True", "\n", "\n", "\n", "", "", "class", "DummyProcessPool", "(", "object", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "MAXWORKERS", "=", "None", ",", "catch_exceptions", "=", "True", ")", ":", "\n", "\n", "        ", "if", "MAXWORKERS", "is", "not", "None", ":", "\n", "            ", "warnings", ".", "warn", "(", "\n", "\"MAXWORKERS argument supplied to Dummy Process Pool has no impact\"", "\n", ")", "\n", "", "self", ".", "_catch_exceptions", "=", "True", "\n", "\n", "", "def", "activate_exceptions", "(", "self", ")", ":", "\n", "        ", "self", ".", "_catch_exceptions", "=", "False", "\n", "\n", "", "def", "__enter__", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.utils.binarize": [[162, 174], ["torch.full_like", "numpy.log", "numpy.log"], "function", ["None"], []], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.utils.plotdensity2d": [[202, 214], ["scipy.stats.kde.gaussian_kde", "kde.gaussian_kde.", "matplotlib.pyplot.pcolormesh", "matplotlib.pyplot.colorbar", "k1.min", "k2.min", "k1.max", "k2.max", "numpy.vstack", "kde_.reshape", "xi.flatten", "yi.flatten"], "function", ["home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.PhiState.min", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.PhiState.min", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.PhiState.max", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.PhiState.max"], []], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.utils.cuda_available": [[216, 218], ["torch.cuda.is_available"], "function", ["None"], []], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.utils.data_to_be_used": [[220, 225], ["range"], "function", ["None"], []], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.utils.substitute_defaults": [[228, 233], ["default_values.items", "copy.deepcopy"], "function", ["None"], []], "home.repos.pwc.inspect_result.bdevl_SMO.SMO.generate_data.main": [[8, 24], ["SMO.factories.CaseFactory.FromIdentifier", "print", "time.time", "time.time", "print", "print", "print", "dict", "CaseFactory.FromIdentifier.data"], "function", ["home.repos.pwc.inspect_result.bdevl_SMO.SMO.factories.CaseFactory.FromIdentifier", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.factories.CaseFactory.data"], ["def", "main", "(", "name", ",", "reference", "=", "False", ")", ":", "\n", "\n", "    ", "factory", "=", "CaseFactory", ".", "FromIdentifier", "(", "name", ",", "dict", "(", ")", ")", "\n", "print", "(", "\"Starting data generation ... \"", ")", "\n", "t1", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "reference", ":", "\n", "        ", "raise", "DeprecationWarning", "\n", "", "else", ":", "\n", "        ", "factory", ".", "data", "(", "ForceRecompute", "=", "True", ")", "\n", "\n", "", "t2", "=", "time", ".", "time", "(", ")", "\n", "\n", "print", "(", "\"========================================\"", ")", "\n", "print", "(", "\"TOTAL RUNTIME: {} SECONDS\"", ".", "format", "(", "t2", "-", "t1", ")", ")", "\n", "print", "(", "\"========================================\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.em.ExpectationMaximization.__init__": [[8, 19], ["list", "list", "list"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "objective", ",", "active_learner", "=", "None", ")", ":", "\n", "\n", "        ", "if", "active_learner", "is", "not", "None", ":", "\n", "            ", "raise", "DeprecationWarning", "\n", "\n", "", "self", ".", "_objective", "=", "objective", "\n", "self", ".", "_logdicts", "=", "list", "(", ")", "\n", "self", ".", "_counter", "=", "0", "\n", "\n", "self", ".", "_elbos", "=", "list", "(", ")", "\n", "self", ".", "_ovals", "=", "list", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.em.ExpectationMaximization.objective": [[20, 23], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "objective", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_objective", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.em.ExpectationMaximization.phi_trajectory": [[24, 28], ["numpy.array", "range", "len"], "methods", ["None"], ["", "@", "property", "\n", "def", "phi_trajectory", "(", "self", ")", "->", "np", ".", "ndarray", ":", "\n", "\n", "        ", "return", "np", ".", "array", "(", "[", "self", ".", "_logdicts", "[", "n", "]", "[", "\"phi\"", "]", "for", "n", "in", "range", "(", "len", "(", "self", ".", "_logdicts", ")", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.em.ExpectationMaximization.rf": [[29, 32], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "rf", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_objective", ".", "rf", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.em.ExpectationMaximization._log": [[33, 38], ["numpy.asarray", "em.ExpectationMaximization._logdicts.append", "em.ExpectationMaximization.rf.kernel.get_phi", "dict"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.Log.append", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.get_phi"], ["", "def", "_log", "(", "self", ",", "init", "=", "False", ")", ":", "\n", "\n", "        ", "phi", "=", "np", ".", "asarray", "(", "self", ".", "rf", ".", "kernel", ".", "get_phi", "(", ")", ")", "\n", "self", ".", "_logdicts", ".", "append", "(", "dict", "(", ")", ")", "\n", "self", ".", "_logdicts", "[", "-", "1", "]", "[", "\"phi\"", "]", "=", "phi", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.em.ExpectationMaximization.run_active_learning": [[39, 95], ["list", "list", "em.ExpectationMaximization._run", "ActiveLearner._homogenize", "em.ExpectationMaximization._objective.assess", "list.append", "list.append", "em.ExpectationMaximization._ovals.append", "ActiveLearner", "em.ExpectationMaximization._objective.wmodel.autotrain", "torch.randn", "em.ExpectationMaximization._objective.rf.get_phi", "callback", "log.add_state", "log.add_state.inform", "kappas.detach().cpu", "v.cpu", "kappas.detach", "em.ExpectationMaximization._objective._inference._q.state_dict().items", "em.ExpectationMaximization._objective._inference._q.state_dict"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.optimization.em.ExpectationMaximization._run", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.homogenization.LinearHomogenizer._homogenize", "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.AbstractObjective.assess", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.Log.append", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.Log.append", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.Log.append", "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.WrapperModel.autotrain", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.get_phi", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.Log.add_state", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.State.inform"], ["", "def", "run_active_learning", "(", "\n", "self", ",", "\n", "ConvergenceCriteria", ",", "\n", "ActiveLearner", ",", "\n", "N_elbo_estimate", "=", "256", ",", "\n", "N_objective_estimate", "=", "256", ",", "\n", "callback", "=", "None", ",", "\n", "log", "=", "None", ",", "\n", "M_steps", "=", "1", ",", "\n", ")", ":", "\n", "\n", "# note: assumes trained model (initally)", "\n", "        ", "phis", "=", "list", "(", ")", "\n", "objective_fct", "=", "list", "(", ")", "\n", "\n", "counter", "=", "0", "\n", "while", "ActiveLearner", ":", "\n", "\n", "            ", "counter", "+=", "1", "\n", "\n", "if", "counter", ">", "1", ":", "\n", "                ", "ActiveLearner", "(", ")", "\n", "self", ".", "_objective", ".", "wmodel", ".", "autotrain", "(", ")", "\n", "\n", "", "self", ".", "_run", "(", "\n", "ConvergenceCriteria", ",", "N_elbo_estimate", "=", "N_elbo_estimate", ",", "M_steps", "=", "M_steps", "\n", ")", "\n", "\n", "# not essential, just monitoring. awkward approach, but gets the job done.", "\n", "_", ",", "X_cnn", ",", "kappas", "=", "ActiveLearner", ".", "_homogenize", "(", "\n", "torch", ".", "randn", "(", "\n", "N_objective_estimate", ",", "\n", "self", ".", "rf", ".", "kernel", ".", "dim_phase_angles", ",", "\n", "dtype", "=", "self", ".", "_objective", ".", "dtype", ",", "\n", "device", "=", "self", ".", "_objective", ".", "device", ",", "\n", ")", "\n", ")", "\n", "Oval", "=", "self", ".", "_objective", ".", "assess", "(", "kappas", ")", "\n", "objective_fct", ".", "append", "(", "Oval", ")", "\n", "phis", ".", "append", "(", "self", ".", "_objective", ".", "rf", ".", "get_phi", "(", ")", ")", "\n", "self", ".", "_ovals", ".", "append", "(", "Oval", ")", "\n", "\n", "if", "callback", "is", "not", "None", ":", "\n", "                ", "callback", "(", "counter", ")", "\n", "\n", "", "if", "log", "is", "not", "None", ":", "\n", "                ", "state", "=", "log", ".", "add_state", "(", "N_training", "=", "ActiveLearner", ".", "N_data", ")", "\n", "state", ".", "inform", "(", "self", ",", "active", "=", "ActiveLearner", ")", "\n", "state", ".", "_kappa_samples_ref", "=", "kappas", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "state", "[", "\"VI_params\"", "]", "=", "{", "\n", "k", ":", "v", ".", "cpu", "(", ")", "\n", "for", "k", ",", "v", "in", "self", ".", "_objective", ".", "_inference", ".", "_q", ".", "state_dict", "(", ")", ".", "items", "(", ")", "\n", "}", "\n", "state", "[", "\"objective\"", "]", "=", "Oval", "\n", "\n", "", "", "return", "self", ".", "_elbos", ",", "objective_fct", ",", "phis", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.em.ExpectationMaximization.run": [[96, 100], ["em.ExpectationMaximization._run"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.optimization.em.ExpectationMaximization._run"], ["", "def", "run", "(", "self", ",", "ConvergenceCriteria", ",", "N_elbo_estimate", "=", "256", ",", "M_steps", "=", "1", ",", "callback", "=", "None", ")", ":", "\n", "\n", "        ", "return", "self", ".", "_run", "(", "\n", "ConvergenceCriteria", ",", "N_elbo_estimate", ",", "M_steps", "=", "M_steps", ",", "callback", "=", "callback", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.em.ExpectationMaximization._run": [[102, 138], ["em.ExpectationMaximization._objective.init", "time.time", "list", "em.ExpectationMaximization._elbos.append", "em.ExpectationMaximization._log", "em.ExpectationMaximization._objective.E", "em.ExpectationMaximization._objective.M", "em.ExpectationMaximization._objective.step", "em.ExpectationMaximization._log", "em.ExpectationMaximization._objective._inference.elbo_precise", "list.append", "ConvergenceCriteria.step", "callback"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.TemperedIntervalManager.init", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.Log.append", "home.repos.pwc.inspect_result.bdevl_SMO.optimization.inference.LowRankVariationalInference._log", "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.AbstractObjective.E", "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.AbstractObjective.M", "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.AbstractObjective.step", "home.repos.pwc.inspect_result.bdevl_SMO.optimization.inference.LowRankVariationalInference._log", "home.repos.pwc.inspect_result.bdevl_SMO.optimization.inference.LowRankVariationalInference.elbo_precise", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.Log.append", "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.AbstractObjective.step"], ["", "def", "_run", "(", "self", ",", "ConvergenceCriteria", ",", "N_elbo_estimate", "=", "256", ",", "M_steps", "=", "1", ",", "callback", "=", "None", ")", ":", "\n", "\n", "        ", "self", ".", "_objective", ".", "init", "(", ")", "\n", "if", "self", ".", "_counter", "==", "0", ":", "\n", "            ", "self", ".", "_log", "(", "init", "=", "True", ")", "\n", "\n", "", "t_init", "=", "time", ".", "time", "(", ")", "\n", "\n", "abort", "=", "False", "\n", "n", "=", "0", "\n", "l_elbos", "=", "list", "(", ")", "\n", "\n", "while", "not", "abort", ":", "\n", "\n", "            ", "n", "+=", "1", "\n", "\n", "self", ".", "_objective", ".", "E", "(", ")", "\n", "\n", "J", "=", "self", ".", "_objective", ".", "M", "(", "M_steps", "=", "M_steps", ")", "\n", "\n", "self", ".", "_objective", ".", "step", "(", ")", "\n", "\n", "self", ".", "_log", "(", ")", "\n", "\n", "self", ".", "_counter", "+=", "1", "\n", "\n", "elbo", "=", "self", ".", "_objective", ".", "_inference", ".", "elbo_precise", "(", "N_elbo_estimate", ")", "\n", "l_elbos", ".", "append", "(", "elbo", ")", "\n", "abort", "=", "ConvergenceCriteria", ".", "step", "(", "elbo", ")", "\n", "\n", "if", "callback", "is", "not", "None", ":", "\n", "                ", "callback", "(", "n", ")", "\n", "\n", "", "", "self", ".", "_elbos", ".", "append", "(", "l_elbos", ")", "\n", "\n", "return", "self", ".", "_elbos", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.em.IterationsConvergenceCriteria.__init__": [[141, 144], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "N", ")", ":", "\n", "        ", "self", ".", "_N", "=", "N", "\n", "self", ".", "_counter", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.em.IterationsConvergenceCriteria.reset": [[145, 147], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "_counter", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.em.IterationsConvergenceCriteria.__bool__": [[148, 150], ["None"], "methods", ["None"], ["", "def", "__bool__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_counter", "<", "self", ".", "_N", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.em.IterationsConvergenceCriteria.step": [[151, 157], ["em.IterationsConvergenceCriteria.reset"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.optimization.em.AdaptiveConvergenceCriteria.reset"], ["", "def", "step", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "_counter", "+=", "1", "\n", "abort", "=", "self", ".", "_counter", ">", "self", ".", "_N", "\n", "if", "abort", ":", "\n", "            ", "self", ".", "reset", "(", ")", "\n", "", "return", "abort", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.em.AdaptiveConvergenceCriteria.__init__": [[162, 205], ["em.AdaptiveConvergenceCriteria._init_is_better", "list", "em.AdaptiveConvergenceCriteria.reset", "isinstance", "isinstance", "print"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.optimization.em.AdaptiveConvergenceCriteria._init_is_better", "home.repos.pwc.inspect_result.bdevl_SMO.optimization.em.AdaptiveConvergenceCriteria.reset"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "patience", "=", "10", ",", "\n", "threshold", "=", "1e-3", ",", "\n", "threshold_mode", "=", "\"rel\"", ",", "\n", "cooldown", "=", "None", ",", "\n", "mode", "=", "\"max\"", ",", "\n", "num_max_steps", "=", "None", ",", "\n", "throw_error_if_max_steps_exceeded", "=", "False", ",", "\n", "verbose", "=", "False", ",", "\n", ")", ":", "\n", "\n", "        ", "assert", "threshold_mode", "in", "[", "\"rel\"", ",", "\"abs\"", "]", "\n", "assert", "isinstance", "(", "threshold", ",", "float", ")", "and", "threshold", ">", "0", "\n", "assert", "isinstance", "(", "patience", ",", "int", ")", "and", "patience", ">", "0", "\n", "\n", "if", "verbose", ":", "\n", "            ", "print", "(", "\"Initalized with patience: {}\"", ".", "format", "(", "patience", ")", ")", "\n", "\n", "", "self", ".", "patience", "=", "patience", "\n", "self", ".", "best", "=", "None", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "threshold", "=", "threshold", "\n", "self", ".", "threshold_mode", "=", "threshold_mode", "\n", "self", ".", "last_epoch", "=", "0", "\n", "self", ".", "local_last_epoch", "=", "None", "\n", "self", ".", "num_bad_epochs", "=", "None", "\n", "self", ".", "cooldown", "=", "cooldown", "\n", "self", ".", "cooldown_counter", "=", "None", "\n", "self", ".", "verbose", "=", "verbose", "\n", "self", ".", "_very_verbose", "=", "False", "\n", "\n", "self", ".", "_init_is_better", "(", "\n", "mode", "=", "mode", ",", "threshold", "=", "threshold", ",", "threshold_mode", "=", "threshold_mode", "\n", ")", "\n", "\n", "self", ".", "_num_max_steps", "=", "num_max_steps", "\n", "self", ".", "_throw_error_if_max_steps_exceed", "=", "throw_error_if_max_steps_exceeded", "\n", "\n", "self", ".", "_metric_memory", "=", "list", "(", ")", "\n", "self", ".", "reset", "(", ")", "\n", "\n", "self", ".", "_abort_state", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.em.AdaptiveConvergenceCriteria.__bool__": [[206, 209], ["None"], "methods", ["None"], ["", "def", "__bool__", "(", "self", ")", ":", "\n", "\n", "        ", "return", "not", "self", ".", "_abort_state", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.em.AdaptiveConvergenceCriteria.reset": [[210, 217], ["em.AdaptiveConvergenceCriteria._metric_memory.append", "list"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.Log.append"], ["", "def", "reset", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "best", "=", "self", ".", "mode_worse", "\n", "self", ".", "num_bad_epochs", "=", "0", "\n", "self", ".", "cooldown_counter", "=", "self", ".", "cooldown", "\n", "self", ".", "local_last_epoch", "=", "0", "\n", "self", ".", "_metric_memory", ".", "append", "(", "list", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.em.AdaptiveConvergenceCriteria.step": [[218, 278], ["float", "em.AdaptiveConvergenceCriteria._metric_memory[].append", "em.AdaptiveConvergenceCriteria.is_better", "em.AdaptiveConvergenceCriteria.reset", "print", "print", "print", "print", "print", "RuntimeError"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.Log.append", "home.repos.pwc.inspect_result.bdevl_SMO.optimization.em.AdaptiveConvergenceCriteria.is_better", "home.repos.pwc.inspect_result.bdevl_SMO.optimization.em.AdaptiveConvergenceCriteria.reset"], ["", "def", "step", "(", "self", ",", "metric", ",", "prevent_reset", "=", "False", ")", ":", "\n", "\n", "        ", "current", "=", "float", "(", "metric", ")", "\n", "epoch", "=", "self", ".", "last_epoch", "+", "1", "\n", "self", ".", "last_epoch", "+=", "1", "\n", "self", ".", "local_last_epoch", "+=", "1", "\n", "self", ".", "_metric_memory", "[", "-", "1", "]", ".", "append", "(", "current", ")", "\n", "\n", "if", "self", ".", "is_better", "(", "current", ",", "self", ".", "best", ")", ":", "\n", "            ", "self", ".", "best", "=", "current", "\n", "self", ".", "num_bad_epochs", "=", "0", "\n", "\n", "if", "self", ".", "_very_verbose", ":", "\n", "                ", "print", "(", "\"Improvement achieved beyond threshold.\"", ")", "\n", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "num_bad_epochs", "+=", "1", "\n", "\n", "if", "self", ".", "_very_verbose", ":", "\n", "                ", "print", "(", "\"No improvement --- bad epochs: {}\"", ".", "format", "(", "self", ".", "num_bad_epochs", ")", ")", "\n", "\n", "", "", "if", "self", ".", "in_cooldown", ":", "\n", "            ", "if", "self", ".", "_very_verbose", ":", "\n", "                ", "print", "(", "\"Still in cooldown. Resetting\"", ")", "\n", "", "self", ".", "num_bad_epochs", "=", "0", "\n", "self", ".", "cooldown_counter", "-=", "1", "\n", "\n", "", "if", "self", ".", "num_bad_epochs", ">", "self", ".", "patience", ":", "\n", "            ", "abort", "=", "True", "\n", "if", "self", ".", "verbose", ":", "\n", "                ", "print", "(", "\n", "\"Adaptive convergence criteria has conerged after {} iterations\"", ".", "format", "(", "\n", "self", ".", "local_last_epoch", "\n", ")", "\n", ")", "\n", "", "", "else", ":", "\n", "            ", "abort", "=", "False", "\n", "\n", "", "if", "self", ".", "local_last_epoch", ">=", "self", ".", "_num_max_steps", "and", "not", "abort", ":", "\n", "            ", "abort", "=", "True", "\n", "if", "self", ".", "verbose", ":", "\n", "                ", "print", "(", "\n", "\"Adaptive convergence criteria has exceeded maximum number of iterations ({})\"", ".", "format", "(", "\n", "self", ".", "_num_max_steps", "\n", ")", "\n", ")", "\n", "", "if", "self", ".", "_throw_error_if_max_steps_exceed", ":", "\n", "                ", "raise", "RuntimeError", "(", "\n", "\"No convergence could be achieved after the predetermined maximum number of steps ({})\"", ".", "format", "(", "\n", "epochs", "\n", ")", "\n", ")", "\n", "\n", "", "", "if", "abort", ":", "\n", "            ", "self", ".", "reset", "(", ")", "\n", "self", ".", "_abort_state", "=", "True", "\n", "", "else", ":", "\n", "            ", "self", ".", "_abort_state", "=", "False", "\n", "\n", "", "return", "abort", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.em.AdaptiveConvergenceCriteria.in_cooldown": [[279, 286], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "in_cooldown", "(", "self", ")", ":", "\n", "\n", "        ", "if", "self", ".", "cooldown", "is", "None", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "self", ".", "cooldown_counter", ">", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.em.AdaptiveConvergenceCriteria.is_better": [[287, 302], ["None"], "methods", ["None"], ["", "def", "is_better", "(", "self", ",", "a", ",", "best", ")", ":", "\n", "\n", "        ", "if", "self", ".", "mode", "==", "\"min\"", "and", "self", ".", "threshold_mode", "==", "\"rel\"", ":", "\n", "            ", "rel_epsilon", "=", "1.0", "-", "self", ".", "threshold", "\n", "return", "a", "<", "best", "*", "rel_epsilon", "\n", "\n", "", "elif", "self", ".", "mode", "==", "\"min\"", "and", "self", ".", "threshold_mode", "==", "\"abs\"", ":", "\n", "            ", "return", "a", "<", "best", "-", "self", ".", "threshold", "\n", "\n", "", "elif", "self", ".", "mode", "==", "\"max\"", "and", "self", ".", "threshold_mode", "==", "\"rel\"", ":", "\n", "            ", "rel_epsilon", "=", "self", ".", "threshold", "+", "1.0", "\n", "return", "a", ">", "best", "*", "rel_epsilon", "\n", "\n", "", "else", ":", "# mode == 'max' and epsilon_mode == 'abs':", "\n", "            ", "return", "a", ">", "best", "+", "self", ".", "threshold", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.em.AdaptiveConvergenceCriteria._init_is_better": [[303, 320], ["float", "ValueError", "ValueError"], "methods", ["None"], ["", "", "def", "_init_is_better", "(", "self", ",", "mode", ",", "threshold", ",", "threshold_mode", ")", ":", "\n", "\n", "        ", "if", "mode", "not", "in", "{", "\"min\"", ",", "\"max\"", "}", ":", "\n", "            ", "raise", "ValueError", "(", "\"mode \"", "+", "mode", "+", "\" is unknown!\"", ")", "\n", "", "if", "threshold_mode", "not", "in", "{", "\"rel\"", ",", "\"abs\"", "}", ":", "\n", "            ", "raise", "ValueError", "(", "\"threshold mode \"", "+", "threshold_mode", "+", "\" is unknown!\"", ")", "\n", "\n", "", "inf", "=", "float", "(", "\"inf\"", ")", "\n", "\n", "if", "mode", "==", "\"min\"", ":", "\n", "            ", "self", ".", "mode_worse", "=", "inf", "\n", "", "else", ":", "# mode == 'max':", "\n", "            ", "self", ".", "mode_worse", "=", "-", "inf", "\n", "\n", "", "self", ".", "mode", "=", "mode", "\n", "self", ".", "threshold", "=", "threshold", "\n", "self", ".", "threshold_mode", "=", "threshold_mode", "\n", "", "", ""]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.inference.Inference.__init__": [[7, 16], ["list", "torch.device"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.device"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "_logpot", "=", "None", "\n", "self", ".", "_dim", "=", "None", "\n", "\n", "self", ".", "_counter", "=", "0", "\n", "self", ".", "_ilog", "=", "list", "(", ")", "\n", "\n", "self", ".", "_device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", "\n", "self", ".", "_dtype", "=", "torch", ".", "float32", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.inference.Inference.dtype": [[17, 20], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "dtype", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_dtype", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.inference.Inference.device": [[21, 24], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "device", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_device", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.inference.Inference.execute": [[25, 31], ["inference.Inference._ilog.append", "inference.Inference._execute", "dict"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.Log.append", "home.repos.pwc.inspect_result.bdevl_SMO.optimization.inference.LowRankVariationalInference._execute"], ["", "def", "execute", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "self", ".", "_counter", "+=", "1", "\n", "self", ".", "_ilog", ".", "append", "(", "dict", "(", ")", ")", "\n", "\n", "return", "self", ".", "_execute", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.inference.Inference.to": [[32, 34], ["None"], "methods", ["None"], ["", "def", "to", "(", "self", ",", "dtype", "=", "None", ",", "device", "=", "None", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.inference.Inference.__getitem__": [[35, 37], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "return", "self", ".", "_ilog", "[", "item", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.inference.Inference.init": [[38, 43], ["inference.Inference._init"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.KullbackLeiblerObjective._init"], ["", "def", "init", "(", "self", ",", "logpot", ",", "dim", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "self", ".", "_logpot", "=", "logpot", "\n", "self", ".", "_dim", "=", "dim", "\n", "self", ".", "_init", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.inference.Inference.init_target": [[44, 48], ["inference.Inference._init"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.KullbackLeiblerObjective._init"], ["", "def", "init_target", "(", "self", ",", "target", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "_logpot", "=", "target", ".", "LogEvaluate", "\n", "self", ".", "_dim", "=", "target", ".", "dim", "\n", "self", ".", "_init", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.inference.Inference._init": [[49, 51], ["None"], "methods", ["None"], ["", "def", "_init", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.inference.Inference._execute": [[52, 54], ["None"], "methods", ["None"], ["", "def", "_execute", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.inference.Inference._log": [[55, 57], ["None"], "methods", ["None"], ["", "def", "_log", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.inference.LowRankVariationalInference.__init__": [[60, 82], ["inference.Inference.__init__"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "N_iterations", ",", "\n", "M_lowrank", ",", "\n", "N_samples", "=", "1", ",", "\n", "lr", "=", "1e-3", ",", "\n", "batch_size", "=", "None", ",", "\n", "N_samples_em", "=", "64", ",", "\n", "sub_sampling_size", "=", "None", ",", "\n", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_N_iterations", "=", "N_iterations", "\n", "self", ".", "_M_lowrank", "=", "M_lowrank", "\n", "self", ".", "_N_samples", "=", "N_samples", "\n", "self", ".", "_N_samples_em", "=", "N_samples_em", "\n", "self", ".", "_batch_size", "=", "batch_size", "\n", "self", ".", "_sub_sampling_size", "=", "sub_sampling_size", "\n", "self", ".", "_lr", "=", "lr", "\n", "self", ".", "_q", "=", "None", "\n", "self", ".", "_optim", "=", "None", "\n", "self", ".", "_elbo_dedicated", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.inference.LowRankVariationalInference.elbo": [[83, 96], ["[].mean", "len", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.lamp.variational.DiagonalMultivariateNormal.mean"], ["", "def", "elbo", "(", "self", ",", "N_avg", "=", "1", ")", ":", "\n", "\n", "        ", "if", "self", ".", "_elbo_dedicated", "is", "not", "None", ":", "\n", "            ", "return", "self", ".", "_elbo_dedicated", "\n", "\n", "", "if", "\"elbo\"", "not", "in", "self", ".", "_ilog", "[", "-", "1", "]", ":", "\n", "            ", "raise", "RuntimeError", "\n", "\n", "", "if", "N_avg", "==", "1", ":", "\n", "            ", "return", "self", ".", "_ilog", "[", "-", "1", "]", "[", "\"elbo\"", "]", "[", "-", "1", "]", "\n", "", "else", ":", "\n", "            ", "assert", "len", "(", "self", ".", "_ilog", "[", "-", "1", "]", "[", "\"elbo\"", "]", ")", ">", "N_avg", "\n", "return", "np", ".", "array", "(", "self", ".", "_ilog", "[", "-", "1", "]", "[", "\"elbo\"", "]", ")", "[", "-", "N_avg", ":", "]", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.inference.LowRankVariationalInference.elbo_precise": [[97, 119], ["torch.no_grad", "inference.LowRankVariationalInference._q.rsample", "x.squeeze.squeeze.squeeze", "elbo.item", "elbo.item", "inference.LowRankVariationalInference._logpot", "torch.sum", "inference.LowRankVariationalInference._logpot", "torch.sum", "inference.LowRankVariationalInference._q.LogEvaluate", "inference.LowRankVariationalInference._q.LogEvaluate"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.rsample", "home.repos.pwc.inspect_result.bdevl_SMO.lamp.variational.VariationalApproximation.LogEvaluate", "home.repos.pwc.inspect_result.bdevl_SMO.lamp.variational.VariationalApproximation.LogEvaluate"], ["", "", "def", "elbo_precise", "(", "self", ",", "N", ")", ":", "\n", "\n", "        ", "assert", "N", ">", "1", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\n", "            ", "x", "=", "self", ".", "_q", ".", "rsample", "(", "N", ")", "\n", "\n", "if", "self", ".", "_batch_size", "is", "None", ":", "\n", "\n", "                ", "x", "=", "x", ".", "squeeze", "(", "1", ")", "\n", "assert", "x", ".", "shape", "[", "0", "]", "==", "N", "\n", "assert", "x", ".", "ndim", "==", "2", "\n", "elbo", "=", "self", ".", "_logpot", "(", "x", ")", "-", "torch", ".", "sum", "(", "self", ".", "_q", ".", "LogEvaluate", "(", "x", ")", ")", "\n", "elbo", "=", "elbo", "/", "N", "\n", "return", "elbo", ".", "item", "(", ")", "\n", "\n", "", "else", ":", "\n", "\n", "                ", "elbo", "=", "self", ".", "_logpot", "(", "x", ")", "-", "torch", ".", "sum", "(", "self", ".", "_q", ".", "LogEvaluate", "(", "x", ")", ")", "\n", "elbo", "=", "elbo", "/", "(", "x", ".", "shape", "[", "0", "]", "*", "x", ".", "shape", "[", "1", "]", ")", "\n", "return", "elbo", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.inference.LowRankVariationalInference.to": [[120, 134], ["inference.LowRankVariationalInference._q.to", "isinstance", "isinstance"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.optimization.inference.LowRankVariationalInference.to"], ["", "", "", "def", "to", "(", "self", ",", "dtype", "=", "None", ",", "device", "=", "None", ")", ":", "\n", "\n", "        ", "assert", "isinstance", "(", "dtype", ",", "torch", ".", "dtype", ")", "or", "dtype", "is", "None", "\n", "assert", "isinstance", "(", "device", ",", "torch", ".", "device", ")", "or", "device", "is", "None", "\n", "\n", "if", "dtype", "is", "not", "None", ":", "\n", "            ", "self", ".", "_dtype", "=", "dtype", "\n", "\n", "", "if", "device", "is", "not", "None", ":", "\n", "            ", "self", ".", "_device", "=", "device", "\n", "\n", "", "self", ".", "_q", ".", "to", "(", "dtype", "=", "dtype", ",", "device", "=", "device", ")", "\n", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.inference.LowRankVariationalInference._init": [[135, 143], ["lamp.variational.LowRankMultivariateNormal().to", "torch.optim.Adam", "inference.LowRankVariationalInference._q.parameters", "lamp.variational.LowRankMultivariateNormal"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.optimization.inference.LowRankVariationalInference.to", "home.repos.pwc.inspect_result.bdevl_SMO.utils.database.ParameterStudy.parameters"], ["", "def", "_init", "(", "self", ")", ":", "\n", "\n", "        ", "batch_size_dim", "=", "1", "if", "self", ".", "_batch_size", "is", "None", "else", "self", ".", "_batch_size", "\n", "self", ".", "_q", "=", "LowRankMultivariateNormal", "(", "\n", "self", ".", "_dim", ",", "batch_size_dim", ",", "self", ".", "_M_lowrank", ",", "sfactor", "=", "0.1", "\n", ")", ".", "to", "(", "dtype", "=", "self", ".", "dtype", ",", "device", "=", "self", ".", "device", ")", "\n", "\n", "self", ".", "_optim", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "_q", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "_lr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.inference.LowRankVariationalInference._log": [[144, 147], ["None"], "methods", ["None"], ["", "def", "_log", "(", "self", ",", "elbo_hist", ")", ":", "\n", "\n", "        ", "self", ".", "_ilog", "[", "-", "1", "]", "[", "\"elbo\"", "]", "=", "elbo_hist", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.inference.LowRankVariationalInference.create_samples": [[148, 168], ["torch.no_grad", "inference.LowRankVariationalInference._q.rsample", "inference.LowRankVariationalInference.detach", "inference.LowRankVariationalInference.squeeze_"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.rsample"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "create_samples", "(", "self", ",", "N_samples", "=", "None", ",", "indeces", "=", "None", ")", ":", "\n", "\n", "        ", "if", "N_samples", "is", "None", ":", "\n", "            ", "N_samples", "=", "self", ".", "_N_samples_em", "\n", "\n", "", "X", "=", "self", ".", "_q", ".", "rsample", "(", "N_samples", ",", "indeces", "=", "indeces", ")", "\n", "\n", "assert", "X", ".", "shape", "[", "0", "]", "==", "N_samples", "\n", "assert", "X", ".", "shape", "[", "2", "]", "==", "self", ".", "_dim", "\n", "\n", "if", "self", ".", "_batch_size", "is", "None", ":", "\n", "            ", "assert", "X", ".", "shape", "[", "1", "]", "==", "1", "\n", "", "else", ":", "\n", "            ", "assert", "X", ".", "shape", "[", "1", "]", "==", "self", ".", "_batch_size", "\n", "\n", "", "if", "self", ".", "_batch_size", "is", "None", ":", "\n", "            ", "X", ".", "squeeze_", "(", "1", ")", "\n", "\n", "", "return", "X", ".", "detach", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.inference.LowRankVariationalInference._execute": [[169, 200], ["list", "range", "inference.LowRankVariationalInference._log", "inference.LowRankVariationalInference.create_samples", "inference.LowRankVariationalInference._optim.zero_grad", "J.backward", "inference.LowRankVariationalInference._optim.step", "list.append", "inference.LowRankVariationalInference._q.rsample", "x.squeeze.squeeze.squeeze", "inference.LowRankVariationalInference._logpot", "torch.sum", "J.item", "inference.LowRankVariationalInference._q.LogEvaluate"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.optimization.inference.LowRankVariationalInference._log", "home.repos.pwc.inspect_result.bdevl_SMO.optimization.inference.LowRankVariationalInference.create_samples", "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.AbstractObjective.step", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.Log.append", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.rsample", "home.repos.pwc.inspect_result.bdevl_SMO.lamp.variational.VariationalApproximation.LogEvaluate"], ["", "def", "_execute", "(", "self", ")", ":", "\n", "\n", "        ", "elbo_hist", "=", "list", "(", ")", "\n", "\n", "for", "n", "in", "range", "(", "self", ".", "_N_iterations", ")", ":", "\n", "\n", "            ", "if", "self", ".", "_sub_sampling_size", "is", "not", "None", ":", "\n", "\n", "                ", "raise", "DeprecationWarning", "\n", "\n", "", "else", ":", "\n", "\n", "                ", "x", "=", "self", ".", "_q", ".", "rsample", "(", "self", ".", "_N_samples", ")", "\n", "assert", "x", ".", "ndim", "==", "3", "\n", "\n", "N_normalize", "=", "x", ".", "shape", "[", "0", "]", "*", "x", ".", "shape", "[", "1", "]", "\n", "if", "self", ".", "_batch_size", "is", "None", ":", "\n", "                    ", "x", "=", "x", ".", "squeeze", "(", "1", ")", "\n", "\n", "", "elbo", "=", "self", ".", "_logpot", "(", "x", ")", "-", "torch", ".", "sum", "(", "self", ".", "_q", ".", "LogEvaluate", "(", "x", ")", ")", "\n", "\n", "", "elbo", "=", "elbo", "/", "N_normalize", "\n", "J", "=", "-", "elbo", "\n", "self", ".", "_optim", ".", "zero_grad", "(", "True", ")", "\n", "J", ".", "backward", "(", ")", "\n", "self", ".", "_optim", ".", "step", "(", ")", "\n", "elbo_hist", ".", "append", "(", "-", "J", ".", "item", "(", ")", ")", "\n", "\n", "", "self", ".", "_log", "(", "elbo_hist", ")", "\n", "\n", "return", "self", ".", "create_samples", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.active.ActiveLearner.__init__": [[68, 103], ["isinstance", "isinstance", "factory.hmg", "factory.htransform", "factory.dtransform", "list", "list"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.WrapperModel.hmg", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.factories.Multiphysics32.htransform", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.factories.CaseFactory.dtransform"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "model", ",", "\n", "objective", ",", "\n", "factory", ",", "\n", "datahandler", ",", "\n", "iterations", "=", "None", ",", "\n", "N_add", "=", "None", ",", "\n", "N_candidates", "=", "None", ",", "\n", "strategy", "=", "\"objfctvar\"", ",", "\n", ")", ":", "\n", "\n", "        ", "assert", "strategy", "in", "[", "\"objfctvar\"", ",", "\"var\"", ",", "\"random\"", ",", "\"kldlogscore\"", "]", "\n", "self", ".", "_strategy", "=", "strategy", "\n", "\n", "assert", "isinstance", "(", "datahandler", ",", "DataHandler", ")", "\n", "assert", "isinstance", "(", "iterations", ",", "int", ")", "\n", "\n", "self", ".", "_model", "=", "model", "\n", "self", ".", "_objective", "=", "objective", "\n", "self", ".", "_datahandler", "=", "datahandler", "\n", "self", ".", "_factory", "=", "factory", "\n", "\n", "self", ".", "N_add", "=", "N_add", "\n", "self", ".", "N_candidates", "=", "N_candidates", "\n", "\n", "self", ".", "_hmg", "=", "factory", ".", "hmg", "(", "constrain_to_target", "=", "True", ")", "\n", "self", ".", "_htransform", "=", "factory", ".", "htransform", "(", ")", "\n", "self", ".", "_dtransform", "=", "factory", ".", "dtransform", "(", ")", "\n", "\n", "self", ".", "_criteria", "=", "list", "(", ")", "\n", "self", ".", "_dfactor", "=", "list", "(", ")", "\n", "\n", "self", ".", "_iterations", "=", "iterations", "\n", "self", ".", "_iteration_counter", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.active.ActiveLearner.N_data": [[104, 107], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "N_data", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_datahandler", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.active.ActiveLearner.dfactor": [[108, 111], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "dfactor", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_dfactor", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.active.ActiveLearner.__bool__": [[112, 114], ["None"], "methods", ["None"], ["", "def", "__bool__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_iteration_counter", "<", "self", ".", "_iterations", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.active.ActiveLearner._employ_strategy": [[115, 163], ["torch.no_grad", "hasattr", "active.ActiveLearner._objective.var", "torch.sort", "isort[].tolist", "torch.sum().item", "torch.sum().item", "torch.sum", "torch.sum", "hasattr", "active.ActiveLearner._model.pipeline", "active.logscore_acquisition_fct_kld", "torch.sort", "isort[].tolist", "torch.sqrt().item", "len", "torch.sqrt", "logscore_acquisition_fct_kld.var", "logscore_acquisition_fct_kld.mean"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.TargetObjective.var", "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.WrapperModel.pipeline", "home.repos.pwc.inspect_result.bdevl_SMO.optimization.active.logscore_acquisition_fct_kld", "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.TargetObjective.var", "home.repos.pwc.inspect_result.bdevl_SMO.lamp.variational.DiagonalMultivariateNormal.mean"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_employ_strategy", "(", "self", ",", "Pt", ",", "N_add", ",", "N_candidates", ")", ":", "\n", "\n", "        ", "if", "self", ".", "_strategy", "==", "\"objfctvar\"", ":", "\n", "\n", "            ", "assert", "hasattr", "(", "\n", "self", ".", "_objective", ",", "\"var\"", "\n", ")", ",", "\"the supplied objective instance is not able to calculate variances via var()\"", "\n", "vars", "=", "self", ".", "_objective", ".", "var", "(", "Pt", ")", "\n", "sorted", ",", "isort", "=", "torch", ".", "sort", "(", "vars", ",", "descending", "=", "True", ")", "\n", "index", "=", "isort", "[", "0", ":", "N_add", "]", ".", "tolist", "(", ")", "\n", "\n", "total_var", "=", "torch", ".", "sum", "(", "vars", ")", ".", "item", "(", ")", "\n", "partial_var", "=", "torch", ".", "sum", "(", "sorted", "[", "0", ":", "N_add", "]", ")", ".", "item", "(", ")", "\n", "disproportionality_factor", "=", "(", "partial_var", "/", "total_var", ")", "/", "(", "\n", "N_add", "/", "N_candidates", "\n", ")", "\n", "\n", "", "elif", "self", ".", "_strategy", "==", "\"var\"", ":", "\n", "\n", "            ", "raise", "DeprecationWarning", "\n", "\n", "", "elif", "self", ".", "_strategy", "==", "\"random\"", ":", "\n", "\n", "            ", "raise", "DeprecationWarning", "\n", "\n", "", "elif", "self", ".", "_strategy", "==", "\"kldlogscore\"", ":", "\n", "\n", "            ", "assert", "hasattr", "(", "\n", "self", ".", "_objective", ",", "\"kappas_target\"", "\n", ")", ",", "\"the supplied objective instance does not specify samples from a target distribution (KLD)\"", "\n", "\n", "mean", ",", "logsigma", "=", "self", ".", "_model", ".", "pipeline", "(", "Pt", ",", "mode", "=", "\"transformed_phaseangles\"", ")", "\n", "loglkl", "=", "logscore_acquisition_fct_kld", "(", "\n", "self", ".", "_objective", ".", "kappas_target", ",", "mean", ",", "logsigma", "\n", ")", "\n", "assert", "loglkl", ".", "ndim", "==", "1", "and", "len", "(", "loglkl", ")", "==", "Pt", ".", "shape", "[", "0", "]", "\n", "\n", "sorted", ",", "isort", "=", "torch", ".", "sort", "(", "loglkl", ",", "descending", "=", "True", ")", "\n", "index", "=", "isort", "[", "0", ":", "N_add", "]", ".", "tolist", "(", ")", "\n", "disproportionality_factor", "=", "torch", ".", "sqrt", "(", "\n", "loglkl", ".", "var", "(", ")", "/", "(", "loglkl", ".", "mean", "(", ")", "**", "2", "+", "1e-6", ")", "\n", ")", ".", "item", "(", ")", "\n", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "return", "index", ",", "disproportionality_factor", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.active.ActiveLearner.__call__": [[164, 190], ["torch.no_grad", "active.ActiveLearner._employ_strategy", "active.ActiveLearner._dfactor.append", "active.ActiveLearner._homogenize", "active.ActiveLearner._datahandler.add_data", "active.ActiveLearner._model.rf.sample_transformed_phase_angles"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.optimization.active.ActiveLearner._employ_strategy", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.Log.append", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.homogenization.LinearHomogenizer._homogenize", "home.repos.pwc.inspect_result.bdevl_SMO.optimization.active.DataHandler.add_data", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.sample_transformed_phase_angles"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "__call__", "(", "\n", "self", ",", "N_add", "=", "None", ",", "N_candidates", "=", "None", ",", "*", ",", "enable_random_monkey", "=", "False", ",", "Pt", "=", "None", "\n", ")", ":", "\n", "\n", "        ", "N_candidates", "=", "self", ".", "N_candidates", "if", "N_candidates", "is", "None", "else", "N_candidates", "\n", "N_add", "=", "self", ".", "N_add", "if", "N_add", "is", "None", "else", "N_add", "\n", "assert", "N_candidates", "is", "not", "None", "and", "N_add", "is", "not", "None", "\n", "assert", "N_add", "<", "N_candidates", ",", "\"we require N_add < N_candidates\"", "\n", "\n", "if", "Pt", "is", "None", ":", "\n", "            ", "Pt", "=", "self", ".", "_model", ".", "rf", ".", "sample_transformed_phase_angles", "(", "N_candidates", ")", "\n", "", "else", ":", "\n", "            ", "assert", "N_candidates", "==", "Pt", ".", "shape", "[", "0", "]", "\n", "\n", "", "index", ",", "disproportionality_factor", "=", "self", ".", "_employ_strategy", "(", "\n", "Pt", ",", "N_add", ",", "N_candidates", "\n", ")", "\n", "\n", "self", ".", "_dfactor", ".", "append", "(", "disproportionality_factor", ")", "\n", "\n", "X_g", ",", "X_cnn", ",", "kappa", "=", "self", ".", "_homogenize", "(", "Pt", "[", "index", "]", ")", "\n", "\n", "self", ".", "_datahandler", ".", "add_data", "(", "X_cnn", "=", "X_cnn", ",", "X_g", "=", "X_g", ",", "kappa", "=", "kappa", ")", "\n", "\n", "self", ".", "_iteration_counter", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.active.ActiveLearner._homogenize": [[191, 210], ["torch.no_grad", "active.ActiveLearner._model.rf.rsample_transform", "active.ActiveLearner._htransform", "active.ActiveLearner._dtransform", "active.ActiveLearner._hmg.homogenize_img", "torch.tensor", "isinstance", "len"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.rsample_transform", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.homogenization.LinearHomogenizer.homogenize_img"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_homogenize", "(", "self", ",", "Pt", ":", "torch", ".", "Tensor", ")", ":", "\n", "\n", "        ", "assert", "Pt", ".", "ndim", "==", "2", "\n", "\n", "Xg", "=", "self", ".", "_model", ".", "rf", ".", "rsample_transform", "(", "Pt", ")", "\n", "Xh", "=", "self", ".", "_htransform", "(", "Xg", ")", "\n", "Xcnn", "=", "self", ".", "_dtransform", "(", "Xg", ")", "\n", "\n", "kappas", "=", "self", ".", "_hmg", ".", "homogenize_img", "(", "Xh", ",", "AcknowledgeRaw", "=", "True", ")", "\n", "assert", "isinstance", "(", "kappas", ",", "list", ")", "and", "len", "(", "kappas", ")", ">", "1", "\n", "\n", "kappas", "=", "torch", ".", "tensor", "(", "\n", "[", "[", "kappa", "[", "t", "]", "for", "t", "in", "self", ".", "_factory", ".", "target", "]", "for", "kappa", "in", "kappas", "]", ",", "\n", "dtype", "=", "Pt", ".", "dtype", ",", "\n", "device", "=", "Pt", ".", "device", ",", "\n", ")", "\n", "\n", "return", "Xg", ",", "Xcnn", ",", "kappas", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.active.DataHandler.__init__": [[213, 232], ["isinstance", "isinstance", "isinstance", "active.DataHandler._check", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.optimization.active.DataHandler._check"], ["    ", "def", "__init__", "(", "self", ",", "data", ",", "model", ",", "*", ",", "dtype", "=", "None", ",", "device", "=", "None", ")", ":", "\n", "\n", "        ", "assert", "isinstance", "(", "data", ",", "dict", ")", "\n", "assert", "isinstance", "(", "dtype", ",", "torch", ".", "dtype", ")", "\n", "assert", "isinstance", "(", "device", ",", "torch", ".", "device", ")", "\n", "\n", "self", ".", "_data", "=", "data", "\n", "self", ".", "_wmodel", "=", "model", "\n", "self", ".", "_dtype", "=", "dtype", "\n", "self", ".", "_device", "=", "device", "\n", "\n", "self", ".", "_N", "=", "self", ".", "_check", "(", "data", ",", "enforce_device", "=", "True", ",", "enforce_dtype", "=", "True", ")", "\n", "# currently not used", "\n", "self", ".", "_metadata", "=", "torch", ".", "zeros", "(", "self", ".", "_N", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "device", ")", "\n", "\n", "self", ".", "_info", "=", "[", "self", ".", "_N", "]", "\n", "self", ".", "_phi", "=", "[", "None", "]", "\n", "\n", "self", ".", "_dataloader", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.active.DataHandler.N_acquisitions": [[233, 237], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "N_acquisitions", "(", "self", ")", ":", "\n", "\n", "        ", "return", "len", "(", "self", ".", "_info", ")", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.active.DataHandler.export": [[238, 262], ["enumerate", "dict", "active.DataHandler._data.keys", "range", "active.DataHandler.inspect_samples().to", "data.clone().detach.clone().detach.clone().detach", "active.DataHandler.inspect_samples", "torch.device", "data.clone().detach.clone().detach.clone"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.lamp.metrics.MetricEnsemble.keys", "home.repos.pwc.inspect_result.bdevl_SMO.optimization.inference.LowRankVariationalInference.to", "home.repos.pwc.inspect_result.bdevl_SMO.optimization.active.DataHandler.inspect_samples", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.device"], ["", "def", "export", "(", "self", ",", "device", "=", "\"cpu\"", ",", "entries", "=", "None", ",", "clone", "=", "True", ")", "->", "list", ":", "\n", "\n", "        ", "assert", "device", "in", "[", "\"cpu\"", ",", "\"cuda:0\"", "]", "\n", "\n", "if", "entries", "is", "None", ":", "\n", "            ", "entries", "=", "[", "\"X_g\"", ",", "\"kappa\"", "]", "\n", "\n", "", "for", "entry", "in", "entries", ":", "\n", "            ", "assert", "(", "\n", "entry", "in", "self", ".", "_data", ".", "keys", "(", ")", "\n", ")", ",", "\"cannot export {} because do not have data\"", ".", "format", "(", "entries", ")", "\n", "\n", "", "N", "=", "self", ".", "N_acquisitions", "+", "1", "\n", "\n", "datalist", "=", "[", "dict", "(", ")", "for", "n", "in", "range", "(", "N", ")", "]", "\n", "\n", "for", "n", ",", "dataitem", "in", "enumerate", "(", "datalist", ")", ":", "\n", "            ", "for", "key", "in", "entries", ":", "\n", "                ", "data", "=", "self", ".", "inspect_samples", "(", "n", ",", "type", "=", "key", ")", ".", "to", "(", "device", "=", "torch", ".", "device", "(", "device", ")", ")", "\n", "if", "clone", ":", "\n", "                    ", "data", "=", "data", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "", "dataitem", "[", "key", "]", "=", "data", "\n", "\n", "", "", "return", "datalist", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.active.DataHandler.inspect_samples": [[263, 277], ["numpy.array", "numpy.sum", "numpy.sum", "len", "len"], "methods", ["None"], ["", "def", "inspect_samples", "(", "self", ",", "step", ",", "type", "=", "\"X_cnn\"", ")", ":", "\n", "\n", "        ", "if", "step", "==", "-", "1", ":", "\n", "            ", "step", "=", "len", "(", "self", ".", "_info", ")", "-", "1", "\n", "\n", "", "assert", "step", "<", "len", "(", "self", ".", "_info", ")", "\n", "\n", "info_", "=", "np", ".", "array", "(", "self", ".", "_info", ")", "\n", "lower", "=", "np", ".", "sum", "(", "info_", "[", "0", ":", "step", "]", ")", "\n", "upper", "=", "np", ".", "sum", "(", "info_", "[", "0", ":", "step", "+", "1", "]", ")", "\n", "S", "=", "self", ".", "_data", "[", "type", "]", "[", "lower", ":", "upper", "]", "\n", "assert", "S", ".", "shape", "[", "0", "]", "==", "self", ".", "_info", "[", "step", "]", "\n", "\n", "return", "S", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.active.DataHandler.model": [[278, 281], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "model", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_wmodel", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.active.DataHandler.datadict": [[282, 291], ["dict", "data_val[].to", "data_val[].to"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.optimization.inference.LowRankVariationalInference.to", "home.repos.pwc.inspect_result.bdevl_SMO.optimization.inference.LowRankVariationalInference.to"], ["", "def", "datadict", "(", "self", ",", "data_val", ":", "dict", ")", ":", "\n", "\n", "        ", "data", "=", "dict", "(", ")", "\n", "data", "[", "\"X\"", "]", "=", "self", ".", "_data", "[", "\"X_cnn\"", "]", "\n", "data", "[", "\"Y\"", "]", "=", "self", ".", "_data", "[", "\"kappa\"", "]", "\n", "data", "[", "\"X_val\"", "]", "=", "data_val", "[", "\"X_cnn\"", "]", ".", "to", "(", "dtype", "=", "self", ".", "_dtype", ",", "device", "=", "self", ".", "_device", ")", "\n", "data", "[", "\"Y_val\"", "]", "=", "data_val", "[", "\"kappa\"", "]", ".", "to", "(", "dtype", "=", "self", ".", "_dtype", ",", "device", "=", "self", ".", "_device", ")", "\n", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.active.DataHandler.dataloader": [[292, 307], ["isinstance", "all", "lamp.data.CustomTensorDataset", "torch.utils.data.DataLoader", "isinstance", "isinstance"], "methods", ["None"], ["", "def", "dataloader", "(", "\n", "self", ",", "keys", ":", "List", "[", "str", "]", ",", "bs", ":", "int", ",", "shuffle", "=", "True", ",", "enforce_divisible", "=", "False", "\n", ")", ":", "\n", "\n", "        ", "assert", "isinstance", "(", "keys", ",", "list", ")", "\n", "assert", "all", "(", "isinstance", "(", "key", ",", "str", ")", "for", "key", "in", "keys", ")", "\n", "assert", "isinstance", "(", "bs", ",", "int", ")", "and", "bs", ">", "0", "\n", "assert", "(", "\n", "not", "enforce_divisible", "or", "self", ".", "_N", "%", "bs", "==", "0", "\n", ")", ",", "\"the batch size {} does not evenly partition {} data points\"", ".", "format", "(", "\n", "bs", ",", "self", ".", "_N", "\n", ")", "\n", "\n", "dataset", "=", "CustomTensorDataset", "(", "*", "(", "self", ".", "_data", "[", "key", "]", "for", "key", "in", "keys", ")", ")", "\n", "return", "DataLoader", "(", "dataset", "=", "dataset", ",", "batch_size", "=", "bs", ",", "shuffle", "=", "shuffle", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.active.DataHandler.__len__": [[308, 310], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_N", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.active.DataHandler._check": [[311, 333], ["data.values", "isinstance", "type"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.fawkes.BoundaryConditions.NeumannSpecification.type"], ["", "def", "_check", "(", "self", ",", "data", ",", "enforce_device", "=", "True", ",", "enforce_dtype", "=", "True", ")", ":", "\n", "\n", "# check that the data to be added is valid", "\n", "        ", "N", "=", "None", "\n", "for", "item", "in", "data", ".", "values", "(", ")", ":", "\n", "            ", "assert", "isinstance", "(", "\n", "item", ",", "torch", ".", "Tensor", "\n", ")", ",", "\"trying to add data entry which is of type {} (requires torch.Tensor)\"", ".", "format", "(", "\n", "type", "(", "item", ")", "\n", ")", "\n", "if", "N", "is", "None", ":", "\n", "                ", "N", "=", "item", ".", "shape", "[", "0", "]", "\n", "", "else", ":", "\n", "                ", "assert", "item", ".", "shape", "[", "0", "]", "==", "N", "\n", "", "assert", "(", "\n", "item", ".", "dtype", "==", "self", ".", "_dtype", "or", "not", "enforce_dtype", "\n", ")", ",", "\"The data supplied to DataHandler does not match set dtype\"", "\n", "assert", "(", "\n", "item", ".", "device", "==", "self", ".", "_device", "or", "not", "enforce_device", "\n", ")", ",", "\"The data supplied to DataHandler does not match set device\"", "\n", "\n", "", "return", "N", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.active.DataHandler._update": [[334, 337], ["None"], "methods", ["None"], ["", "def", "_update", "(", "self", ")", ":", "\n", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.active.DataHandler.add_data": [[338, 359], ["active.DataHandler._check", "kwargs.keys", "active.DataHandler._info.append", "active.DataHandler._phi.append", "active.DataHandler._update", "set", "set", "torch.cat", "active.DataHandler._wmodel.rf.get_phi", "kwargs.keys", "active.DataHandler._data.keys", "kwargs[].to"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.optimization.active.DataHandler._check", "home.repos.pwc.inspect_result.bdevl_SMO.lamp.metrics.MetricEnsemble.keys", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.Log.append", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.Log.append", "home.repos.pwc.inspect_result.bdevl_SMO.optimization.active.DataHandler._update", "home.repos.pwc.inspect_result.bdevl_SMO.None.genutils.StateVariable.set", "home.repos.pwc.inspect_result.bdevl_SMO.None.genutils.StateVariable.set", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.get_phi", "home.repos.pwc.inspect_result.bdevl_SMO.lamp.metrics.MetricEnsemble.keys", "home.repos.pwc.inspect_result.bdevl_SMO.lamp.metrics.MetricEnsemble.keys", "home.repos.pwc.inspect_result.bdevl_SMO.optimization.inference.LowRankVariationalInference.to"], ["", "def", "add_data", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "N_add", "=", "self", ".", "_check", "(", "kwargs", ")", "\n", "\n", "assert", "set", "(", "kwargs", ".", "keys", "(", ")", ")", "==", "set", "(", "self", ".", "_data", ".", "keys", "(", ")", ")", "\n", "\n", "for", "kwarg", "in", "kwargs", ".", "keys", "(", ")", ":", "\n", "            ", "self", ".", "_data", "[", "kwarg", "]", "=", "torch", ".", "cat", "(", "\n", "(", "\n", "self", ".", "_data", "[", "kwarg", "]", ",", "\n", "kwargs", "[", "kwarg", "]", ".", "to", "(", "dtype", "=", "self", ".", "_dtype", ",", "device", "=", "self", ".", "_device", ")", ",", "\n", ")", ",", "\n", "0", ",", "\n", ")", "\n", "\n", "", "self", ".", "_N", "+=", "N_add", "\n", "\n", "self", ".", "_info", ".", "append", "(", "N_add", ")", "\n", "self", ".", "_phi", ".", "append", "(", "self", ".", "_wmodel", ".", "rf", ".", "get_phi", "(", ")", ")", "\n", "\n", "self", ".", "_update", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.active.setup_active_learner": [[8, 47], ["dict", "data_tr[].to", "data_tr[].to().to", "data_tr[].to", "active.DataHandler", "active.ActiveLearner", "data_tr[].to"], "function", ["home.repos.pwc.inspect_result.bdevl_SMO.optimization.inference.LowRankVariationalInference.to", "home.repos.pwc.inspect_result.bdevl_SMO.optimization.inference.LowRankVariationalInference.to", "home.repos.pwc.inspect_result.bdevl_SMO.optimization.inference.LowRankVariationalInference.to", "home.repos.pwc.inspect_result.bdevl_SMO.optimization.inference.LowRankVariationalInference.to"], ["def", "setup_active_learner", "(", "\n", "factory", ",", "\n", "data_tr", ",", "\n", "data_val", ",", "\n", "wmodel", ",", "\n", "objective", ",", "\n", "N_outer", ",", "\n", "N_add", ",", "\n", "N_candidates", ",", "\n", "learning_strategy", "=", "\"objvar\"", ",", "\n", ")", ":", "\n", "\n", "# utility function", "\n", "    ", "dtype", "=", "objective", ".", "dtype", "\n", "device", "=", "objective", ".", "device", "\n", "\n", "data_dict", "=", "dict", "(", ")", "\n", "data_dict", "[", "\"X_cnn\"", "]", "=", "data_tr", "[", "\"X_cnn\"", "]", ".", "to", "(", "dtype", "=", "dtype", ",", "device", "=", "device", ")", "\n", "data_dict", "[", "\"X_g\"", "]", "=", "(", "\n", "data_tr", "[", "\"X_g\"", "]", ".", "to", "(", "dtype", "=", "dtype", ",", "device", "=", "device", ")", ".", "to", "(", "dtype", "=", "dtype", ",", "device", "=", "device", ")", "\n", ")", "\n", "data_dict", "[", "\"kappa\"", "]", "=", "data_tr", "[", "\"kappa\"", "]", ".", "to", "(", "dtype", "=", "dtype", ",", "device", "=", "device", ")", "\n", "\n", "dhandler", "=", "DataHandler", "(", "data_dict", ",", "wmodel", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ")", "\n", "active", "=", "ActiveLearner", "(", "\n", "wmodel", ",", "\n", "objective", ",", "\n", "factory", ",", "\n", "dhandler", ",", "\n", "iterations", "=", "N_outer", ",", "\n", "strategy", "=", "learning_strategy", ",", "\n", ")", "\n", "wmodel", ".", "datahandler", "=", "dhandler", "\n", "\n", "active", ".", "N_add", "=", "N_add", "\n", "active", ".", "N_candidates", "=", "N_candidates", "\n", "wmodel", ".", "datahandler", "=", "dhandler", "\n", "\n", "return", "active", ",", "dhandler", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.active.logscore_acquisition_fct_kld": [[49, 65], ["torch.distributions.Normal", "torch.distributions.Independent", "torch.distributions.Independent.log_prob().mean", "isinstance", "isinstance", "isinstance", "torch.exp", "torch.distributions.Independent.log_prob", "kappas_s.unsqueeze"], "function", ["home.repos.pwc.inspect_result.bdevl_SMO.lamp.variational.DiagonalMultivariateNormal.mean"], ["", "def", "logscore_acquisition_fct_kld", "(", "\n", "kappas_s", ":", "torch", ".", "Tensor", ",", "mean", ":", "torch", ".", "Tensor", ",", "logsigma", ":", "torch", ".", "Tensor", "\n", ")", ":", "\n", "\n", "    ", "assert", "(", "\n", "isinstance", "(", "kappas_s", ",", "torch", ".", "Tensor", ")", "\n", "and", "isinstance", "(", "mean", ",", "torch", ".", "Tensor", ")", "\n", "and", "isinstance", "(", "logsigma", ",", "torch", ".", "Tensor", ")", "\n", ")", "\n", "assert", "kappas_s", ".", "ndim", "==", "mean", ".", "ndim", "==", "logsigma", ".", "ndim", "\n", "assert", "kappas_s", ".", "shape", "[", "1", "]", "==", "mean", ".", "shape", "[", "1", "]", "==", "logsigma", ".", "shape", "[", "1", "]", "\n", "\n", "q", "=", "torch", ".", "distributions", ".", "Normal", "(", "mean", ",", "torch", ".", "exp", "(", "logsigma", ")", ")", "\n", "qi", "=", "torch", ".", "distributions", ".", "Independent", "(", "q", ",", "1", ")", "\n", "\n", "return", "qi", ".", "log_prob", "(", "kappas_s", ".", "unsqueeze", "(", "1", ")", ")", ".", "mean", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.WrapperModel.__init__": [[25, 50], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "surrogate", ",", "\n", "rf", ",", "\n", "rfp", ",", "\n", "dtransform", ",", "\n", "kappa_target", "=", "None", ",", "\n", "target", "=", "None", ",", "\n", "hmg", "=", "None", ",", "\n", "htransform", "=", "None", ",", "\n", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "_discriminative", "=", "surrogate", "\n", "self", ".", "_rf", "=", "rf", "\n", "self", ".", "_rfp", "=", "rfp", "\n", "self", ".", "_dtransform", "=", "dtransform", "\n", "self", ".", "_kappa_target", "=", "kappa_target", "\n", "self", ".", "_target", "=", "target", "\n", "self", ".", "_datahandler", "=", "None", "\n", "self", ".", "_autotrain_args", "=", "None", "\n", "self", ".", "_r2_achieved", "=", "None", "\n", "self", ".", "_hmg", "=", "hmg", "\n", "self", ".", "_htransform", "=", "htransform", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.WrapperModel.FromFactory": [[51, 81], ["factory.discriminative.to", "factory.rf", "rf.to.to.to", "factory.dtransform", "factory.hmg", "factory.htransform", "cls", "factory.discriminative"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.optimization.inference.LowRankVariationalInference.to", "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.AbstractObjective.rf", "home.repos.pwc.inspect_result.bdevl_SMO.optimization.inference.LowRankVariationalInference.to", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.factories.CaseFactory.dtransform", "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.WrapperModel.hmg", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.factories.Multiphysics32.htransform", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.factories.Multiphysics64.discriminative"], ["", "@", "classmethod", "\n", "def", "FromFactory", "(", "cls", ",", "factory", ",", "surrogate", "=", "None", ",", "*", ",", "dtype", "=", "None", ",", "device", "=", "None", ")", ":", "\n", "\n", "# conveniency function", "\n", "        ", "assert", "dtype", "is", "not", "None", "and", "device", "is", "not", "None", "\n", "\n", "if", "surrogate", "is", "None", ":", "\n", "            ", "surrogate", "=", "factory", ".", "discriminative", "(", ")", "\n", "\n", "", "surrogate", "=", "surrogate", ".", "to", "(", "dtype", "=", "dtype", ",", "device", "=", "device", ")", "\n", "\n", "rf", ",", "rfp", "=", "factory", ".", "rf", "(", ")", "\n", "rf", "=", "rf", ".", "to", "(", "dtype", "=", "dtype", ",", "device", "=", "device", ")", "\n", "\n", "dtransform", "=", "factory", ".", "dtransform", "(", ")", "\n", "\n", "target", "=", "factory", ".", "target", "\n", "\n", "hmg", "=", "factory", ".", "hmg", "(", ")", "\n", "\n", "htransform", "=", "factory", ".", "htransform", "(", ")", "\n", "\n", "return", "cls", "(", "\n", "surrogate", ",", "\n", "rf", ",", "\n", "rfp", ",", "\n", "dtransform", ",", "\n", "target", "=", "target", ",", "\n", "hmg", "=", "hmg", ",", "\n", "htransform", "=", "htransform", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.WrapperModel.hmg": [[83, 86], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "hmg", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_hmg", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.WrapperModel.state": [[87, 89], ["objectives.WrapperModel._discriminative.state_dict"], "methods", ["None"], ["", "def", "state", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_discriminative", ".", "state_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.WrapperModel.datahandler": [[94, 102], ["isinstance"], "methods", ["None"], ["", "@", "datahandler", ".", "setter", "\n", "def", "datahandler", "(", "self", ",", "val", ")", ":", "\n", "\n", "        ", "assert", "isinstance", "(", "val", ",", "DataHandler", ")", "\n", "assert", "(", "\n", "val", ".", "model", "==", "self", "\n", ")", ",", "\"The model set for the datahandler is not equal to self.\"", "\n", "self", ".", "_datahandler", "=", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.WrapperModel.autotrain_failsafe": [[103, 117], ["range", "objectives.WrapperModel.autotrain", "numpy.any", "RuntimeError", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.WrapperModel.autotrain"], ["", "def", "autotrain_failsafe", "(", "self", ",", "*", "args", ",", "threshold", "=", "0.0", ",", "attempts", "=", "2", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "assert", "kwargs", "[", "\"reset_model\"", "]", ",", "\"assumes that surrogate is reset every time\"", "\n", "\n", "for", "n", "in", "range", "(", "attempts", ")", ":", "\n", "\n", "            ", "self", ".", "autotrain", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "success", "=", "not", "np", ".", "any", "(", "np", ".", "array", "(", "self", ".", "_r2_achieved", ")", "<", "threshold", ")", "\n", "\n", "if", "success", "and", "n", "<", "attempts", ":", "\n", "                ", "break", "\n", "\n", "", "if", "not", "success", "and", "n", "==", "attempts", "-", "1", ":", "\n", "                ", "raise", "RuntimeError", "(", "\"Training failure\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.WrapperModel.autotrain": [[118, 124], ["objectives.WrapperModel.train_model"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.WrapperModel.train_model"], ["", "", "", "def", "autotrain", "(", "self", ",", "args", ":", "dict", "=", "None", ")", ":", "\n", "\n", "        ", "if", "args", "is", "not", "None", ":", "\n", "            ", "self", ".", "_autotrain_args", "=", "args", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "train_model", "(", "**", "self", ".", "_autotrain_args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.WrapperModel.train_model": [[125, 171], ["objectives.WrapperModel.train", "SMO.discriminative.DiscriminativeTrainer", "SMO.discriminative.DiscriminativeTrainer.train", "SMO.discriminative.DiscriminativeTrainer.r2_separate", "int", "math.ceil", "objectives.WrapperModel._discriminative.load_state_dict", "objectives.WrapperModel._datahandler.datadict", "objectives.WrapperModel.eval", "copy.deepcopy", "len"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.SMO.discriminative.DiscriminativeTrainer.train", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.discriminative.DiscriminativeTrainer.train", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.discriminative.DiscriminativeTrainer.r2_separate", "home.repos.pwc.inspect_result.bdevl_SMO.optimization.active.DataHandler.datadict", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.Kernel.eval"], ["", "", "def", "train_model", "(", "\n", "self", ",", "\n", "N_epochs", ",", "\n", "init_dict", ",", "\n", "data_val", ",", "\n", "batch_size", ",", "\n", "lr", ",", "\n", "weight_decay", "=", "1e-6", ",", "\n", "verbose", "=", "True", ",", "\n", "reset_model", "=", "True", ",", "\n", "N_batches", "=", "None", ",", "\n", ")", ":", "\n", "\n", "        ", "assert", "(", "\n", "self", ".", "_datahandler", "is", "not", "None", "\n", ")", ",", "\"in order to execute training, the model wrapper requires a datahandler\"", "\n", "\n", "if", "N_epochs", "is", "None", ":", "\n", "            ", "assert", "N_epochs", "is", "None", ",", "\"cannot specify both N_epochs and N_batches\"", "\n", "num_batches_per_epoch", "=", "int", "(", "len", "(", "self", ".", "_datahandler", ")", "/", "batch_size", ")", "\n", "N_epochs", "=", "ceil", "(", "N_batches", "/", "num_batches_per_epoch", ")", "\n", "\n", "", "training_state", "=", "self", ".", "training", "\n", "self", ".", "train", "(", ")", "\n", "assert", "self", ".", "_discriminative", ".", "training", "\n", "\n", "if", "reset_model", ":", "\n", "            ", "self", ".", "_discriminative", ".", "load_state_dict", "(", "deepcopy", "(", "init_dict", ")", ")", "\n", "", "trainer", "=", "DiscriminativeTrainer", "(", "\n", "self", ".", "_discriminative", ",", "\n", "self", ".", "_datahandler", ".", "datadict", "(", "data_val", ")", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "lr", "=", "lr", ",", "\n", "weight_decay", "=", "weight_decay", ",", "\n", "make_deterministic", "=", "False", ",", "\n", "shuffle", "=", "True", ",", "\n", ")", "\n", "trainer", ".", "train", "(", "N_epochs", ",", "verbose", "=", "verbose", ",", "output_interval", "=", "50", ")", "\n", "\n", "self", ".", "_r2_achieved", "=", "trainer", ".", "r2_separate", "(", ")", "\n", "\n", "if", "not", "training_state", ":", "\n", "            ", "self", ".", "eval", "(", ")", "\n", "assert", "not", "self", ".", "_discriminative", ".", "training", "\n", "\n", "", "return", "trainer", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.WrapperModel.rf": [[172, 175], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "rf", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_rf", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.WrapperModel.rfp": [[176, 179], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "rfp", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_rfp", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.WrapperModel.target": [[180, 185], ["RuntimeError"], "methods", ["None"], ["", "@", "property", "\n", "def", "target", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_target", "is", "None", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"The target property has not been set for the model\"", ")", "\n", "", "return", "self", ".", "_target", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.WrapperModel.kappa_target": [[190, 194], ["isinstance"], "methods", ["None"], ["", "@", "kappa_target", ".", "setter", "\n", "def", "kappa_target", "(", "self", ",", "val", ")", ":", "\n", "        ", "assert", "isinstance", "(", "val", ",", "torch", ".", "Tensor", ")", "\n", "self", ".", "_kappa_target", "=", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.WrapperModel.differentiable": [[195, 198], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "differentiable", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_dtransform", ".", "differentiable", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.WrapperModel.ensure_differentiable": [[199, 202], ["None"], "methods", ["None"], ["", "def", "ensure_differentiable", "(", "self", ")", ":", "\n", "\n", "        ", "assert", "self", ".", "differentiable", ",", "\"The model is not differentiable.\"", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.WrapperModel.forward": [[203, 206], ["objectives.WrapperModel._discriminative"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "X_cnn", ":", "torch", ".", "Tensor", ")", ":", "\n", "\n", "        ", "return", "self", ".", "_discriminative", "(", "X_cnn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.WrapperModel.pipeline": [[207, 220], ["mode.lower.lower.lower", "objectives.WrapperModel._pipeline", "ValueError"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.WrapperModel._pipeline"], ["", "def", "pipeline", "(", "self", ",", "X", ":", "torch", ".", "Tensor", ",", "*", ",", "mode", ":", "str", "=", "None", ")", ":", "\n", "\n", "        ", "mode", "=", "mode", ".", "lower", "(", ")", "\n", "assert", "mode", "is", "not", "None", "\n", "\n", "if", "mode", "==", "\"transformed_phaseangles\"", ":", "\n", "            ", "assert", "(", "\n", "X", ".", "shape", "[", "1", "]", "==", "self", ".", "_rf", ".", "kernel", ".", "phase_angle_dim", "\n", ")", ",", "\"The phase angle tensor does not match (in the dimension of the phase angles)\"", "\n", "return", "self", ".", "_pipeline", "(", "X", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"The mode {} is not available to evaluate the model\"", ".", "format", "(", "mode", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.WrapperModel._pipeline": [[222, 233], ["objectives.WrapperModel.rf.rsample_transform", "objectives.WrapperModel._dtransform", "objectives.WrapperModel._discriminative", "X_g.unsqueeze.unsqueeze.dim", "X_g.unsqueeze.unsqueeze.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.rsample_transform", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.Kernel.dim"], ["", "", "def", "_pipeline", "(", "self", ",", "P", ")", ":", "\n", "\n", "        ", "X_g", "=", "self", ".", "rf", ".", "rsample_transform", "(", "P", ")", "\n", "\n", "if", "X_g", ".", "dim", "(", ")", "<", "4", ":", "\n", "            ", "X_g", "=", "X_g", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "", "X", "=", "self", ".", "_dtransform", "(", "X_g", ")", "\n", "\n", "mu", ",", "logsigma", "=", "self", ".", "_discriminative", "(", "X", ")", "\n", "return", "mu", ",", "logsigma", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.WrapperModel.pipeline_Xg": [[234, 243], ["objectives.WrapperModel._dtransform", "objectives.WrapperModel._discriminative", "X_g.unsqueeze.unsqueeze.dim", "X_g.unsqueeze.unsqueeze.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.Kernel.dim"], ["", "def", "pipeline_Xg", "(", "self", ",", "X_g", ")", ":", "\n", "\n", "        ", "if", "X_g", ".", "dim", "(", ")", "<", "4", ":", "\n", "            ", "X_g", "=", "X_g", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "", "X", "=", "self", ".", "_dtransform", "(", "X_g", ")", "\n", "\n", "mu", ",", "logsigma", "=", "self", ".", "_discriminative", "(", "X", ")", "\n", "return", "mu", ",", "logsigma", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.WrapperModel.LogLikelihood": [[244, 251], ["objectives.WrapperModel._pipeline", "lamp.utils.DiagonalGaussianLogLikelihood"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.WrapperModel._pipeline", "home.repos.pwc.inspect_result.bdevl_SMO.lamp.utils.DiagonalGaussianLogLikelihood"], ["", "def", "LogLikelihood", "(", "self", ",", "P", ",", "kappa", "=", "None", ",", "reduce", "=", "torch", ".", "sum", ")", ":", "\n", "\n", "        ", "kappa", "=", "self", ".", "_kappa_target", "if", "kappa", "is", "None", "else", "kappa", "\n", "\n", "mu", ",", "logsigma", "=", "self", ".", "_pipeline", "(", "P", ")", "\n", "\n", "return", "DiagonalGaussianLogLikelihood", "(", "kappa", ",", "mu", ",", "2", "*", "logsigma", ",", "reduce", "=", "reduce", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.WrapperModel.sample_reference_distribution": [[252, 295], ["torch.no_grad", "objectives.WrapperModel.rf.rsample_batch", "objectives.WrapperModel._htransform", "objectives.WrapperModel._hmg.homogenize_img", "torch.tensor", "isinstance", "isinstance", "copy.deepcopy", "objectives.WrapperModel._rf.set_phi", "isinstance", "objectives.WrapperModel._rf.set_phi", "objectives.WrapperModel._dtransform", "objectives.WrapperModel._rf.get_phi", "len"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.rsample_batch", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.homogenization.LinearHomogenizer.homogenize_img", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.set_phi", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.set_phi", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.get_phi"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "sample_reference_distribution", "(", "\n", "self", ",", "N", ":", "int", "=", "64", ",", "*", ",", "phi", "=", "None", ",", "q", "=", "None", ",", "return_X_cnn", "=", "False", "\n", ")", ":", "\n", "\n", "        ", "assert", "isinstance", "(", "N", ",", "int", ")", "and", "N", ">", "1", "\n", "assert", "phi", "is", "None", "or", "isinstance", "(", "phi", ",", "(", "list", ",", "np", ".", "ndarray", ")", ")", "\n", "\n", "if", "q", "is", "not", "None", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "assert", "(", "\n", "self", ".", "_hmg", "is", "not", "None", "\n", "and", "self", ".", "_htransform", "is", "not", "None", "\n", "and", "self", ".", "_target", "is", "not", "None", "\n", ")", ",", "\"either _hmg /_htransform / _target have not been set for WrapperModel\"", "\n", "\n", "if", "phi", "is", "not", "None", ":", "\n", "            ", "phi_orig", "=", "deepcopy", "(", "self", ".", "_rf", ".", "get_phi", "(", ")", ")", "\n", "self", ".", "_rf", ".", "set_phi", "(", "phi", ")", "\n", "\n", "", "Xg", "=", "self", ".", "rf", ".", "rsample_batch", "(", "N", ")", "\n", "Xh", "=", "self", ".", "_htransform", "(", "Xg", ")", "\n", "\n", "# list of dicts", "\n", "kappas", "=", "self", ".", "_hmg", ".", "homogenize_img", "(", "Xh", ",", "AcknowledgeRaw", "=", "True", ")", "\n", "assert", "isinstance", "(", "kappas", ",", "list", ")", "and", "len", "(", "kappas", ")", ">", "1", "\n", "\n", "# convert to torch.tensor", "\n", "kappas", "=", "torch", ".", "tensor", "(", "\n", "[", "[", "kappa", "[", "t", "]", "for", "t", "in", "self", ".", "target", "]", "for", "kappa", "in", "kappas", "]", ",", "\n", "dtype", "=", "Xg", ".", "dtype", ",", "\n", "device", "=", "Xg", ".", "device", ",", "\n", ")", "\n", "\n", "if", "phi", "is", "not", "None", ":", "\n", "            ", "self", ".", "_rf", ".", "set_phi", "(", "phi_orig", ")", "\n", "\n", "", "if", "return_X_cnn", ":", "\n", "            ", "Xcnn", "=", "self", ".", "_dtransform", "(", "Xg", ")", "\n", "return", "Xcnn", ",", "kappas", "\n", "", "else", ":", "\n", "            ", "return", "kappas", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.WrapperModel.sample_predicted_distribution": [[296, 327], ["torch.no_grad", "objectives.WrapperModel.pipeline_Xg", "lamp.utils.reparametrize", "isinstance", "isinstance", "copy.deepcopy", "objectives.WrapperModel._rf.set_phi", "q.rsample", "objectives.WrapperModel._rf.rsample_transform", "objectives.WrapperModel._rf.rsample_batch", "objectives.WrapperModel._rf.set_phi", "objectives.WrapperModel._rf.get_phi", "Pt.squeeze.squeeze.squeeze"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.WrapperModel.pipeline_Xg", "home.repos.pwc.inspect_result.bdevl_SMO.lamp.utils.reparametrize", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.set_phi", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.rsample", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.rsample_transform", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.rsample_batch", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.set_phi", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.get_phi"], ["", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "sample_predicted_distribution", "(", "\n", "self", ",", "N", ":", "int", "=", "1024", ",", "*", ",", "phi", "=", "None", ",", "q", "=", "None", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "\n", "        ", "assert", "isinstance", "(", "N", ",", "int", ")", "and", "N", ">", "1", "\n", "assert", "phi", "is", "None", "or", "isinstance", "(", "phi", ",", "(", "list", ",", "np", ".", "ndarray", ")", ")", "\n", "\n", "if", "phi", "is", "not", "None", ":", "\n", "            ", "phi_orig", "=", "deepcopy", "(", "self", ".", "_rf", ".", "get_phi", "(", ")", ")", "\n", "self", ".", "_rf", ".", "set_phi", "(", "phi", ")", "\n", "\n", "", "if", "q", "is", "not", "None", ":", "\n", "            ", "Pt", "=", "q", ".", "rsample", "(", "N", ")", "\n", "assert", "Pt", ".", "ndim", "==", "2", "or", "Pt", ".", "shape", "[", "1", "]", "==", "1", ",", "\"not implemented\"", "\n", "\n", "if", "Pt", ".", "shape", "[", "1", "]", "==", "1", ":", "\n", "                ", "Pt", "=", "Pt", ".", "squeeze", "(", "1", ")", "\n", "\n", "", "assert", "Pt", ".", "ndim", "==", "2", "\n", "X_g", "=", "self", ".", "_rf", ".", "rsample_transform", "(", "Pt", ")", "\n", "", "else", ":", "\n", "            ", "X_g", "=", "self", ".", "_rf", ".", "rsample_batch", "(", "N", ")", "\n", "", "kappa_mean", ",", "kappa_logsigma", "=", "self", ".", "pipeline_Xg", "(", "X_g", ")", "\n", "kappa_samples", "=", "reparametrize", "(", "kappa_mean", ",", "kappa_logsigma", ")", "\n", "assert", "kappa_samples", ".", "ndim", "==", "2", "and", "kappa_samples", ".", "shape", "[", "0", "]", "==", "N", "\n", "\n", "if", "phi", "is", "not", "None", ":", "\n", "            ", "self", ".", "_rf", ".", "set_phi", "(", "phi_orig", ")", "\n", "\n", "", "return", "kappa_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.WrapperModel.plot_joint_distribution_2d": [[328, 371], ["torch.no_grad", "objectives.WrapperModel.sample_predicted_distribution().cpu().detach().numpy", "scipy.stats.kde.gaussian_kde", "scipy.stats.kde.gaussian_kde.", "matplotlib.pcolormesh", "matplotlib.pcolormesh", "matplotlib.colorbar", "matplotlib.colorbar", "isinstance", "numpy.vstack", "kde.gaussian_kde.reshape", "objectives.WrapperModel.sample_predicted_distribution().cpu().detach", "numpy.stack().reshape().min", "numpy.stack().reshape().max", "xi.flatten", "yi.flatten", "objectives.WrapperModel.sample_predicted_distribution().cpu", "numpy.stack().reshape", "numpy.stack().reshape", "objectives.WrapperModel.sample_predicted_distribution", "numpy.stack", "numpy.stack"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.PhiState.min", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.PhiState.max", "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.WrapperModel.sample_predicted_distribution"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "plot_joint_distribution_2d", "(", "\n", "self", ",", "\n", "N", ",", "\n", "int", "=", "1024", ",", "\n", "*", ",", "\n", "nbins", "=", "40", ",", "\n", "offset", "=", "1", ",", "\n", "kmin", "=", "None", ",", "\n", "kmax", "=", "None", ",", "\n", "q", "=", "None", ",", "\n", "phi", "=", "None", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "\n", "        ", "kappa_samples", "=", "(", "\n", "self", ".", "sample_predicted_distribution", "(", "N", ",", "q", "=", "q", ",", "phi", "=", "phi", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", ")", "\n", "\n", "# establish bounds", "\n", "kappas", "=", "kappa_samples", "\n", "assert", "(", "\n", "isinstance", "(", "kappas", ",", "np", ".", "ndarray", ")", "and", "kappas", ".", "ndim", "==", "2", "and", "kappas", ".", "shape", "[", "1", "]", "==", "2", "\n", ")", ",", "\"density estimate failed\"", "\n", "kmin", "=", "(", "\n", "np", ".", "stack", "(", "kappas", ")", ".", "reshape", "(", "-", "1", ",", "kappas", ".", "shape", "[", "1", "]", ")", ".", "min", "(", "0", ")", "-", "offset", "\n", "if", "kmin", "is", "None", "\n", "else", "kmin", "\n", ")", "\n", "kmax", "=", "(", "\n", "np", ".", "stack", "(", "kappas", ")", ".", "reshape", "(", "-", "1", ",", "kappas", ".", "shape", "[", "1", "]", ")", ".", "max", "(", "0", ")", "+", "offset", "\n", "if", "kmax", "is", "None", "\n", "else", "kmax", "\n", ")", "\n", "\n", "# density estimate", "\n", "kde_", "=", "kde", ".", "gaussian_kde", "(", "[", "kappas", "[", ":", ",", "0", "]", ",", "kappas", "[", ":", ",", "1", "]", "]", ")", "\n", "xi", ",", "yi", "=", "np", ".", "mgrid", "[", "\n", "kmin", "[", "0", "]", ":", "kmax", "[", "0", "]", ":", "nbins", "*", "1j", ",", "kmin", "[", "1", "]", ":", "kmax", "[", "1", "]", ":", "nbins", "*", "1j", "\n", "]", "\n", "zi", "=", "kde_", "(", "np", ".", "vstack", "(", "[", "xi", ".", "flatten", "(", ")", ",", "yi", ".", "flatten", "(", ")", "]", ")", ")", "\n", "h1", "=", "plt", ".", "pcolormesh", "(", "xi", ",", "yi", ",", "zi", ".", "reshape", "(", "xi", ".", "shape", ")", ",", "shading", "=", "\"auto\"", ",", "cmap", "=", "\"magma\"", ")", "\n", "plt", ".", "colorbar", "(", "h1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.WrapperModel.plot_marginal_distribution": [[372, 403], ["matplotlib.subplots", "matplotlib.subplots", "range", "objectives.WrapperModel.sample_reference_distribution().cpu().detach().numpy", "objectives.WrapperModel.sample_predicted_distribution().cpu().detach().numpy", "matplotlib.hist", "matplotlib.hist", "matplotlib.grid", "matplotlib.grid", "matplotlib.title", "matplotlib.title", "matplotlib.sca", "matplotlib.sca", "objectives.WrapperModel.sample_reference_distribution().cpu().detach", "objectives.WrapperModel.sample_predicted_distribution().cpu().detach", "objectives.WrapperModel.sample_reference_distribution().cpu", "objectives.WrapperModel.sample_predicted_distribution().cpu", "objectives.WrapperModel.sample_reference_distribution", "objectives.WrapperModel.sample_predicted_distribution"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.WrapperModel.sample_reference_distribution", "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.WrapperModel.sample_predicted_distribution"], ["", "def", "plot_marginal_distribution", "(", "\n", "self", ",", "N", ":", "int", "=", "1024", ",", "*", ",", "q", "=", "None", ",", "phi", "=", "None", ",", "use_reference", "=", "False", "\n", ")", ":", "\n", "\n", "        ", "if", "use_reference", ":", "\n", "            ", "kappa_samples", "=", "(", "\n", "self", ".", "sample_reference_distribution", "(", "N", ",", "q", "=", "q", ",", "phi", "=", "phi", ")", "\n", ".", "cpu", "(", ")", "\n", ".", "detach", "(", ")", "\n", ".", "numpy", "(", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "kappa_samples", "=", "(", "\n", "self", ".", "sample_predicted_distribution", "(", "N", ",", "q", "=", "q", ",", "phi", "=", "phi", ")", "\n", ".", "cpu", "(", ")", "\n", ".", "detach", "(", ")", "\n", ".", "numpy", "(", ")", "\n", ")", "\n", "\n", "# quick and dirty way to look at results", "\n", "", "dim_kappa", "=", "kappa_samples", ".", "shape", "[", "1", "]", "\n", "fig", ",", "axi", "=", "plt", ".", "subplots", "(", "1", ",", "dim_kappa", ",", "figsize", "=", "(", "4", "+", "dim_kappa", ",", "4", ")", ")", "\n", "\n", "for", "dk", "in", "range", "(", "dim_kappa", ")", ":", "\n", "            ", "if", "dim_kappa", ">", "1", ":", "\n", "                ", "plt", ".", "sca", "(", "axi", "[", "dk", "]", ")", "\n", "", "plt", ".", "hist", "(", "kappa_samples", "[", ":", ",", "dk", "]", ",", "density", "=", "True", ",", "alpha", "=", "0.65", ")", "\n", "plt", ".", "grid", "(", "True", ")", "\n", "plt", ".", "title", "(", "r\"$\\kappa_{}$\"", ".", "format", "(", "dk", "+", "1", ")", ")", "\n", "\n", "", "return", "fig", ",", "axi", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.IntervalHelper.__init__": [[406, 408], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.AbstractObjective.__init__": [[411, 434], ["isinstance", "isinstance", "isinstance", "model.ensure_differentiable", "torch.optim.Adam", "dict"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.WrapperModel.ensure_differentiable"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "dtype", ",", "device", ",", "lr", "=", "0.25", ")", ":", "\n", "\n", "        ", "assert", "isinstance", "(", "model", ",", "WrapperModel", ")", "\n", "assert", "isinstance", "(", "\n", "dtype", ",", "torch", ".", "dtype", "\n", ")", ",", "\"Need to provide valid dtype to objective\"", "\n", "assert", "isinstance", "(", "\n", "device", ",", "torch", ".", "device", "\n", ")", ",", "\"Need to provide valid device to objective\"", "\n", "\n", "model", ".", "ensure_differentiable", "(", ")", "\n", "self", ".", "_model", "=", "model", "\n", "\n", "self", ".", "_optim", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "_params", ",", "lr", "=", "lr", ")", "\n", "\n", "self", ".", "_cache", "=", "dict", "(", ")", "\n", "self", ".", "_cache", "[", "\"initialized\"", "]", "=", "False", "\n", "self", ".", "_cache", "[", "\"counter\"", "]", "=", "0", "\n", "\n", "self", ".", "_dtype", "=", "dtype", "\n", "self", ".", "_device", "=", "device", "\n", "\n", "self", ".", "_lr", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.AbstractObjective.tempering_completed": [[435, 439], ["NotImplementedError"], "methods", ["None"], ["", "@", "property", "\n", "def", "tempering_completed", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\n", "'method \"tempering_completed\" needs to be implemented by child class'", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.AbstractObjective.wmodel": [[441, 445], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "wmodel", "(", "self", ")", ":", "\n", "# wrapper model", "\n", "        ", "return", "self", ".", "_model", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.AbstractObjective.lr": [[450, 456], ["isinstance"], "methods", ["None"], ["", "@", "lr", ".", "setter", "\n", "def", "lr", "(", "self", ",", "val", ")", ":", "\n", "        ", "assert", "val", ">", "0", "and", "isinstance", "(", "val", ",", "float", ")", "\n", "for", "param_group", "in", "self", ".", "_optim", ".", "param_groups", ":", "\n", "            ", "param_group", "[", "\"lr\"", "]", "=", "val", "\n", "", "self", ".", "_lr", "=", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.AbstractObjective.dtype": [[457, 460], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "dtype", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_dtype", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.AbstractObjective.device": [[461, 464], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "device", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_device", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.AbstractObjective.rf": [[465, 468], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "rf", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_model", ".", "rf", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.AbstractObjective.rfp": [[469, 472], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "rfp", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_model", ".", "rfp", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.AbstractObjective._params": [[473, 476], ["objectives.AbstractObjective.rf.kernel.parameters"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.utils.database.ParameterStudy.parameters"], ["", "@", "property", "\n", "def", "_params", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "rf", ".", "kernel", ".", "parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.AbstractObjective.__call__": [[477, 479], ["None"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.AbstractObjective.assess": [[480, 487], ["torch.no_grad", "objectives.AbstractObjective._assess", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.KullbackLeiblerObjective._assess"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "assess", "(", "self", ",", "kappa", ":", "torch", ".", "Tensor", "=", "None", ",", "N", "=", "None", ",", "source", "=", "\"rf\"", ")", "->", "float", ":", "\n", "\n", "        ", "if", "kappa", "is", "None", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"need to call homogenizer\"", ")", "\n", "\n", "", "return", "self", ".", "_assess", "(", "kappa", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.AbstractObjective.assess_model_belief": [[488, 496], ["torch.no_grad", "isinstance"], "methods", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "assess_model_belief", "(", "self", ",", "N", ",", "source", "=", "\"rf\"", ")", ":", "\n", "\n", "        ", "assert", "(", "\n", "isinstance", "(", "N", ",", "int", ")", "and", "N", ">", "1", "\n", ")", ",", "\"Need to specify a valid number of microstructure samples to assess\"", "\n", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.AbstractObjective._assess": [[497, 500], ["None"], "methods", ["None"], ["", "def", "_assess", "(", "self", ",", "kappa", ":", "torch", ".", "Tensor", ")", "->", "float", ":", "\n", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.AbstractObjective.estimate_reference": [[501, 504], ["None"], "methods", ["None"], ["", "def", "estimate_reference", "(", "self", ",", "hmg_fct", ":", "Callable", ",", "N_monte_carlo", ":", "int", ")", "->", "float", ":", "\n", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.AbstractObjective._LogPrior": [[505, 513], ["torch.sum", "torch.sum"], "methods", ["None"], ["", "def", "_LogPrior", "(", "\n", "self", ",", "Pt", ":", "torch", ".", "Tensor", ",", "return_separate_batch_values", "=", "False", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "\n", "        ", "if", "return_separate_batch_values", ":", "\n", "            ", "return", "-", "0.5", "*", "torch", ".", "sum", "(", "Pt", "**", "2", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "return", "-", "0.5", "*", "torch", ".", "sum", "(", "Pt", "**", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.AbstractObjective.init": [[514, 519], ["objectives.AbstractObjective._init"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.KullbackLeiblerObjective._init"], ["", "", "def", "init", "(", "self", ",", "enforce", "=", "False", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "if", "not", "self", ".", "_cache", "[", "\"initialized\"", "]", "or", "enforce", ":", "\n", "            ", "self", ".", "_init", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "_cache", "[", "\"initialized\"", "]", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.AbstractObjective._init": [[520, 522], ["NotImplementedError"], "methods", ["None"], ["", "", "def", "_init", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"Absctract method not yet implemented.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.AbstractObjective.step": [[523, 527], ["objectives.AbstractObjective._step"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.KullbackLeiblerObjective._step"], ["", "def", "step", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "self", ".", "_cache", "[", "\"counter\"", "]", "+=", "1", "\n", "self", ".", "_step", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.AbstractObjective._step": [[528, 530], ["NotImplementedError"], "methods", ["None"], ["", "def", "_step", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"Absctract method not yet implemented.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.AbstractObjective.E": [[531, 537], ["objectives.AbstractObjective._E"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.KullbackLeiblerObjective._E"], ["", "def", "E", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "assert", "(", "\n", "not", "self", ".", "_model", ".", "training", "\n", ")", ",", "\"Trying to execute the E-step with model in training() mode\"", "\n", "return", "self", ".", "_E", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.AbstractObjective._E": [[538, 540], ["NotImplementedError"], "methods", ["None"], ["", "def", "_E", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"Absctract method not yet implemented.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.AbstractObjective.M": [[541, 561], ["kwargs.pop", "range", "kwargs.pop", "objectives.AbstractObjective._optim.zero_grad", "objectives.AbstractObjective._M", "objectives.AbstractObjective._optim.step", "objectives.AbstractObjective.rfp.clamp", "objectives.AbstractObjective._E_sample"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.KullbackLeiblerObjective._M", "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.AbstractObjective.step", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.IntervalRandomFieldParameters.clamp", "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.KullbackLeiblerObjective._E_sample"], ["", "def", "M", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "M_steps", "=", "kwargs", ".", "pop", "(", "\"M_steps\"", ",", "1", ")", "\n", "\n", "for", "n", "in", "range", "(", "M_steps", ")", ":", "\n", "            ", "assert", "(", "\n", "not", "self", ".", "_model", ".", "training", "\n", ")", ",", "\"Trying to execute the M-step with model in training() mode\"", "\n", "self", ".", "_optim", ".", "zero_grad", "(", "set_to_none", "=", "True", ")", "\n", "if", "n", ">", "0", ":", "\n", "\n", "                ", "self", ".", "_E_sample", "(", ")", "\n", "\n", "", "self", ".", "_M", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "_optim", ".", "step", "(", ")", "\n", "self", ".", "rfp", ".", "clamp", "(", ")", "\n", "\n", "", "if", "kwargs", ".", "pop", "(", "\"return_grad\"", ",", "False", ")", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.AbstractObjective._M": [[562, 564], ["NotImplementedError"], "methods", ["None"], ["", "", "def", "_M", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"Abstract method not yet implemented\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.AbstractObjective.cleanup": [[565, 568], ["objectives.AbstractObjective._optim.zero_grad"], "methods", ["None"], ["", "def", "cleanup", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "_optim", ".", "zero_grad", "(", "set_to_none", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.LessThanDomainObjective.__init__": [[571, 608], ["objectives.AbstractObjective.__init__", "len", "objectives.LessThanDomainObjective._inference.init", "objectives.LessThanDomainObjective._inference.to", "list", "list", "objectives.LessThanDomainObjective._J"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.__init__", "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.TemperedIntervalManager.init", "home.repos.pwc.inspect_result.bdevl_SMO.optimization.inference.LowRankVariationalInference.to", "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.FunctionalObjective._J"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "model", ",", "\n", "inference", ",", "\n", "less_than_functional", ",", "\n", "N_init_samples", "=", "512", ",", "\n", "target_fraction", "=", "0.75", ",", "\n", "*", ",", "\n", "dtype", "=", "None", ",", "\n", "device", "=", "None", "\n", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "model", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ")", "\n", "\n", "self", ".", "_inference", "=", "inference", "\n", "self", ".", "_ltf", "=", "less_than_functional", "\n", "self", ".", "_thrs", "=", "None", "\n", "\n", "self", ".", "_dim_kappa", "=", "len", "(", "self", ".", "_model", ".", "target", ")", "\n", "\n", "self", ".", "_E_samples", "=", "None", "\n", "dim", "=", "model", ".", "rf", ".", "kernel", ".", "phase_angle_dim", "+", "self", ".", "_dim_kappa", "\n", "\n", "def", "logpot", "(", "Z", ")", ":", "\n", "\n", "            ", "kappa", "=", "Z", "[", ":", ",", "0", ":", "self", ".", "_dim_kappa", "]", "\n", "Pt", "=", "Z", "[", ":", ",", "self", ".", "_dim_kappa", ":", "]", "\n", "\n", "return", "self", ".", "_J", "(", "Pt", ",", "kappa", ")", "\n", "\n", "", "self", ".", "_inference", ".", "init", "(", "logpot", "=", "logpot", ",", "dim", "=", "dim", ")", "\n", "self", ".", "_inference", ".", "to", "(", "dtype", "=", "self", ".", "_dtype", ",", "device", "=", "self", ".", "_device", ")", "\n", "self", ".", "_N_init_samples", "=", "N_init_samples", "\n", "self", ".", "_target_fraction", "=", "0.25", "\n", "\n", "self", ".", "_compliance", "=", "list", "(", ")", "\n", "self", ".", "_elbo_comp", "=", "list", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.LessThanDomainObjective.__call__": [[609, 611], ["None"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.LessThanDomainObjective._init": [[612, 631], ["torch.no_grad", "objectives.LessThanDomainObjective._model.rf.rsample_batch", "objectives.LessThanDomainObjective._model.pipeline_Xg", "lamp.utils.reparametrize", "objectives.LessThanDomainObjective._ltf", "torch.quantile", "print"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.rsample_batch", "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.WrapperModel.pipeline_Xg", "home.repos.pwc.inspect_result.bdevl_SMO.lamp.utils.reparametrize"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_init", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "X_g", "=", "self", ".", "_model", ".", "rf", ".", "rsample_batch", "(", "self", ".", "_N_init_samples", ")", "\n", "kappa_mean", ",", "kappa_logsigma", "=", "self", ".", "_model", ".", "pipeline_Xg", "(", "X_g", ")", "\n", "kappa_samples", "=", "reparametrize", "(", "kappa_mean", ",", "kappa_logsigma", ")", "\n", "\n", "c", "=", "self", ".", "_ltf", "(", "kappa_samples", ")", "\n", "c_t", "=", "torch", ".", "quantile", "(", "c", ",", "self", ".", "_target_fraction", ")", "\n", "\n", "if", "c_t", "<=", "0", ":", "\n", "            ", "print", "(", "\n", "\"Init thrs to zero. No tempering will be done | c_t = {:.2f}.\"", ".", "format", "(", "\n", "c_t", "\n", ")", "\n", ")", "\n", "c_t", "=", "0", "\n", "\n", "", "self", ".", "_thrs", "=", "c_t", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.LessThanDomainObjective._step": [[632, 635], ["objectives.LessThanDomainObjective._temper"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.IntervalObjective._temper"], ["", "def", "_step", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "self", ".", "_temper", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.LessThanDomainObjective._temper": [[636, 675], ["torch.no_grad", "objectives.LessThanDomainObjective._model.pipeline", "lamp.utils.reparametrize", "objectives.LessThanDomainObjective._ltf", "torch.quantile", "RuntimeError", "print", "warnings.warn"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.WrapperModel.pipeline", "home.repos.pwc.inspect_result.bdevl_SMO.lamp.utils.reparametrize"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_temper", "(", "self", ",", "verbose", "=", "False", ")", ":", "\n", "\n", "        ", "if", "self", ".", "_E_samples", "is", "None", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"Trying to do a ESS tempering step without prior E-step\"", ")", "\n", "\n", "", "theta_hat_samples", "=", "self", ".", "_E_samples", "\n", "\n", "assert", "(", "\n", "0", "<", "self", ".", "_target_fraction", "<", "1", "\n", ")", ",", "\"The desired target fraction needs to be in [0,1]\"", "\n", "\n", "if", "self", ".", "_thrs", "==", "0", ":", "\n", "            ", "return", "\n", "\n", "", "thrs_last", "=", "self", ".", "_thrs", "\n", "\n", "kappa_mu", ",", "kappa_logsigma", "=", "self", ".", "_model", ".", "pipeline", "(", "\n", "theta_hat_samples", ",", "mode", "=", "\"transformed_phaseangles\"", "\n", ")", "\n", "kappa_samples", "=", "reparametrize", "(", "kappa_mu", ",", "kappa_logsigma", ")", "\n", "c", "=", "self", ".", "_ltf", "(", "kappa_samples", ")", "\n", "\n", "thrs", "=", "torch", ".", "quantile", "(", "kappa_samples", ",", "self", ".", "_target_fraction", ")", "\n", "\n", "if", "thrs", "<=", "0", ":", "\n", "            ", "print", "(", "\"Tempering has concluded. Setting thrs equal to 0.\"", ")", "\n", "self", ".", "_thrs", "=", "0", "\n", "return", "\n", "\n", "", "if", "thrs", ">", "thrs_last", ":", "\n", "            ", "warnings", ".", "warn", "(", "\n", "\"Tempering tried to shift domain backwards (c_t : {:.2f} -> {:.2f})\"", ".", "format", "(", "\n", "thrs_last", ",", "thrs", "\n", ")", "\n", ")", "\n", "return", "\n", "\n", "", "self", ".", "_thrs", "=", "thrs", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.LessThanDomainObjective._J": [[676, 703], ["objectives.LessThanDomainObjective._model.pipeline", "lamp.utils.DiagonalGaussianLogLikelihood", "objectives.LessThanDomainObjective._LogPrior", "torch.log", "objectives.LessThanDomainObjective._ltf", "sfc.float().clamp", "objectives.LessThanDomainObjective._compliance.append", "objectives.LessThanDomainObjective._elbo_comp.append", "print", "print", "print", "print", "torch.log.sum", "sfc.float().mean", "torch.log.sum().item", "sfc.float", "lamp.utils.DiagonalGaussianLogLikelihood.item", "objectives.LessThanDomainObjective.item", "torch.log.sum().item", "sfc.float", "torch.log.sum", "torch.log.sum"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.WrapperModel.pipeline", "home.repos.pwc.inspect_result.bdevl_SMO.lamp.utils.DiagonalGaussianLogLikelihood", "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.AbstractObjective._LogPrior", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.IntervalRandomFieldParameters.clamp", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.Log.append", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.Log.append", "home.repos.pwc.inspect_result.bdevl_SMO.lamp.variational.DiagonalMultivariateNormal.mean"], ["", "def", "_J", "(", "self", ",", "Pt", ":", "torch", ".", "Tensor", ",", "kappa", ":", "torch", ".", "Tensor", ",", "track", "=", "False", ")", ":", "\n", "\n", "        ", "kappa_mu", ",", "kappa_logsigma", "=", "self", ".", "_model", ".", "pipeline", "(", "\n", "Pt", ",", "mode", "=", "\"transformed_phaseangles\"", "\n", ")", "\n", "\n", "logp", "=", "DiagonalGaussianLogLikelihood", "(", "\n", "kappa", ",", "kappa_mu", ",", "2", "*", "kappa_logsigma", ",", "reduce", "=", "torch", ".", "sum", "\n", ")", "\n", "assert", "logp", ".", "ndim", "==", "0", "\n", "log_prior", "=", "self", ".", "_LogPrior", "(", "Pt", ")", "\n", "assert", "log_prior", ".", "ndim", "==", "0", "\n", "eps", "=", "0.000001", "\n", "sfc", "=", "self", ".", "_ltf", "(", "kappa", ")", "<", "self", ".", "_thrs", "\n", "ltf_", "=", "torch", ".", "log", "(", "(", "sfc", ")", ".", "float", "(", ")", ".", "clamp", "(", "eps", ")", ")", "\n", "\n", "if", "track", ":", "\n", "            ", "self", ".", "_compliance", ".", "append", "(", "sfc", ".", "float", "(", ")", ".", "mean", "(", ")", ")", "\n", "self", ".", "_elbo_comp", ".", "append", "(", "ltf_", ".", "sum", "(", ")", ".", "item", "(", ")", ")", "\n", "print", "(", "\"=> Compliance: {:.2f}\"", ".", "format", "(", "self", ".", "_compliance", "[", "-", "1", "]", ")", ")", "\n", "\n", "", "if", "track", ":", "\n", "            ", "print", "(", "\"logp: {:.2f}\"", ".", "format", "(", "logp", ".", "item", "(", ")", ")", ")", "\n", "print", "(", "\"log_prior: {:.2f}\"", ".", "format", "(", "log_prior", ".", "item", "(", ")", ")", ")", "\n", "print", "(", "\"ltf: {:.2f}\"", ".", "format", "(", "ltf_", ".", "sum", "(", ")", ".", "item", "(", ")", ")", ")", "\n", "\n", "", "return", "logp", "+", "log_prior", "+", "ltf_", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.LessThanDomainObjective._E": [[704, 706], ["objectives.LessThanDomainObjective._inference.execute"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.optimization.inference.Inference.execute"], ["", "def", "_E", "(", "self", ")", ":", "\n", "        ", "self", ".", "_E_samples", "=", "self", ".", "_inference", ".", "execute", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.LessThanDomainObjective._M": [[707, 717], ["objectives.LessThanDomainObjective._E_samples.detach", "J.backward", "J.item", "objectives.LessThanDomainObjective._J"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.FunctionalObjective._J"], ["", "def", "_M", "(", "self", ")", "->", "float", ":", "\n", "\n", "        ", "Z", "=", "self", ".", "_E_samples", ".", "detach", "(", ")", "\n", "kappa", "=", "Z", "[", ":", ",", "0", ":", "self", ".", "_dim_kappa", "]", "# functional", "\n", "Pt", "=", "Z", "[", ":", ",", "self", ".", "_dim_kappa", ":", "]", "# phase angles", "\n", "bs", "=", "Z", ".", "shape", "[", "0", "]", "\n", "assert", "Pt", ".", "ndim", "==", "2", "\n", "J", "=", "-", "self", ".", "_J", "(", "Pt", ",", "kappa", ",", "track", "=", "True", ")", "/", "bs", "\n", "J", ".", "backward", "(", ")", "\n", "return", "-", "J", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.IntervalRepresentation.__init__": [[720, 723], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "bounds", ":", "np", ".", "ndarray", ")", ":", "\n", "\n", "        ", "self", ".", "_bounds", "=", "bounds", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.IntervalRepresentation.mark_1d": [[724, 726], ["None"], "methods", ["None"], ["", "def", "mark_1d", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.IntervalRepresentation.mark_2d": [[727, 748], ["tuple", "tuple", "matplotlib.Rectangle", "matplotlib.Rectangle", "ax.add_patch", "isinstance", "objectives.IntervalRepresentation._bounds.mean", "numpy.array", "matplotlib.gca", "matplotlib.gca"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.lamp.variational.DiagonalMultivariateNormal.mean"], ["", "def", "mark_2d", "(", "self", ",", "color", "=", "\"g\"", ",", "linewidth", "=", "1.5", ",", "ax", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "assert", "isinstance", "(", "self", ".", "_bounds", ",", "np", ".", "ndarray", ")", "and", "self", ".", "_bounds", ".", "shape", "==", "(", "\n", "2", ",", "\n", "2", ",", "\n", ")", ",", "\"assumes 2D\"", "\n", "midpoint", "=", "tuple", "(", "self", ".", "_bounds", ".", "mean", "(", "1", ")", ")", "\n", "extensions", "=", "self", ".", "_bounds", "[", ":", ",", "1", "]", "-", "self", ".", "_bounds", "[", ":", ",", "0", "]", "\n", "xy", "=", "np", ".", "array", "(", "midpoint", ")", "-", "0.5", "*", "extensions", "\n", "xy", "=", "tuple", "(", "xy", ")", "# lower left corner, anchor point", "\n", "rect", "=", "patches", ".", "Rectangle", "(", "\n", "xy", ",", "\n", "extensions", "[", "0", "]", ",", "\n", "extensions", "[", "1", "]", ",", "\n", "linewidth", "=", "linewidth", ",", "\n", "edgecolor", "=", "color", ",", "\n", "facecolor", "=", "\"none\"", ",", "\n", "**", "kwargs", "\n", ")", "\n", "ax", "=", "ax", "if", "ax", "is", "not", "None", "else", "plt", ".", "gca", "(", ")", "\n", "ax", ".", "add_patch", "(", "rect", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.IntervalObjective.__init__": [[751, 784], ["objectives.AbstractObjective.__init__", "isinstance", "objectives.IntervalObjective.set_inference", "objectives.IntervalRepresentation", "interval.bounds.copy"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.__init__", "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.IntervalObjective.set_inference"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "model", ",", "\n", "inference", ",", "\n", "interval", ",", "\n", "tempering", "=", "\"ess\"", ",", "\n", "N_init_samples", "=", "512", ",", "\n", "ess_reduction", "=", "0.80", ",", "\n", "init_symmetric", "=", "False", ",", "\n", "lr", "=", "0.25", ",", "\n", "*", ",", "\n", "dtype", "=", "None", ",", "\n", "device", "=", "None", "\n", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "model", ",", "lr", "=", "lr", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ")", "\n", "assert", "isinstance", "(", "interval", ",", "TemperedIntervalManager", ")", "\n", "\n", "self", ".", "_interval", "=", "interval", "\n", "assert", "tempering", "in", "[", "\n", "\"ess\"", "\n", "]", ",", "\"Currently only using the ESS for tempering is supported.\"", "\n", "self", ".", "_tempering", "=", "tempering", "\n", "\n", "self", ".", "_inference", "=", "None", "\n", "self", ".", "set_inference", "(", "inference", ")", "\n", "self", ".", "_E_samples", "=", "None", "\n", "\n", "self", ".", "_N_init_samples", "=", "N_init_samples", "\n", "self", ".", "_init_symmetric", "=", "init_symmetric", "\n", "self", ".", "_ess_reduction", "=", "ess_reduction", "\n", "\n", "self", ".", "representation", "=", "IntervalRepresentation", "(", "interval", ".", "bounds", ".", "copy", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.IntervalObjective.tempering_completed": [[785, 789], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "tempering_completed", "(", "self", ")", ":", "\n", "\n", "        ", "return", "self", ".", "_interval", ".", "alpha", "==", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.IntervalObjective.set_inference": [[790, 798], ["objectives.IntervalObjective._inference.init", "objectives.IntervalObjective._inference.to", "objectives.IntervalObjective._LogPrior", "objectives.IntervalObjective.LogLikelihood"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.TemperedIntervalManager.init", "home.repos.pwc.inspect_result.bdevl_SMO.optimization.inference.LowRankVariationalInference.to", "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.AbstractObjective._LogPrior", "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.IntervalObjective.LogLikelihood"], ["", "def", "set_inference", "(", "self", ",", "inference", ")", ":", "\n", "\n", "        ", "self", ".", "_inference", "=", "inference", "\n", "self", ".", "_inference", ".", "init", "(", "\n", "logpot", "=", "lambda", "Pt", ":", "self", ".", "_LogPrior", "(", "Pt", ")", "+", "self", ".", "LogLikelihood", "(", "Pt", ")", ",", "\n", "dim", "=", "self", ".", "_model", ".", "rf", ".", "kernel", ".", "phase_angle_dim", ",", "\n", ")", "\n", "self", ".", "_inference", ".", "to", "(", "dtype", "=", "self", ".", "_dtype", ",", "device", "=", "self", ".", "_device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.IntervalObjective.FromBounds": [[799, 804], ["objectives.TemperedIntervalManager", "cls"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "FromBounds", "(", "cls", ",", "model", ",", "inference", ",", "bounds", ":", "np", ".", "ndarray", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "interval", "=", "TemperedIntervalManager", "(", "bounds", ")", "\n", "return", "cls", "(", "model", ",", "inference", ",", "interval", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.IntervalObjective._init": [[805, 816], ["torch.no_grad", "objectives.IntervalObjective._model.rf.rsample_batch", "objectives.IntervalObjective._model.pipeline_Xg", "lamp.utils.reparametrize", "objectives.IntervalObjective._interval.init_symmetric", "objectives.IntervalObjective._interval.init"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.rsample_batch", "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.WrapperModel.pipeline_Xg", "home.repos.pwc.inspect_result.bdevl_SMO.lamp.utils.reparametrize", "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.TemperedIntervalManager.init"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_init", "(", "self", ")", ":", "\n", "\n", "        ", "X_g", "=", "self", ".", "_model", ".", "rf", ".", "rsample_batch", "(", "self", ".", "_N_init_samples", ")", "\n", "kappa_mean", ",", "kappa_logsigma", "=", "self", ".", "_model", ".", "pipeline_Xg", "(", "X_g", ")", "\n", "kappa_samples", "=", "reparametrize", "(", "kappa_mean", ",", "kappa_logsigma", ")", "\n", "\n", "if", "self", ".", "_init_symmetric", ":", "\n", "            ", "self", ".", "_interval", ".", "init_symmetric", "(", "kappa_samples", ",", "quantile", "=", "0.05", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_interval", ".", "init", "(", "kappa_samples", ",", "quantile", "=", "0.05", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.IntervalObjective.__call__": [[817, 836], ["objectives.IntervalObjective._model.pipeline", "torch.distributions.Normal", "objectives.IntervalObjective._interval.lower_bounds", "objectives.IntervalObjective._interval.upper_bounds", "torch.clamp", "torch.exp", "torch.distributions.Normal.cdf", "torch.distributions.Normal.cdf", "torch.prod"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.WrapperModel.pipeline", "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.TemperedIntervalManager.lower_bounds", "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.TemperedIntervalManager.upper_bounds", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.IntervalRandomFieldParameters.clamp"], ["", "", "def", "__call__", "(", "self", ",", "Pt", ":", "torch", ".", "Tensor", ",", "return_individual_probabilities", "=", "False", ")", ":", "\n", "\n", "# X is size(batch_size, py, px) and involves e.g. the soft-threshholded dtransform(X_g)", "\n", "        ", "kappa_mean", ",", "kappa_logsigma", "=", "self", ".", "_model", ".", "pipeline", "(", "\n", "Pt", ",", "mode", "=", "\"transformed_phaseangles\"", "\n", ")", "\n", "\n", "q", "=", "torch", ".", "distributions", ".", "Normal", "(", "kappa_mean", ",", "torch", ".", "exp", "(", "kappa_logsigma", ")", ")", "\n", "\n", "lower", "=", "self", ".", "_interval", ".", "lower_bounds", "(", "dtype", "=", "Pt", ".", "dtype", ",", "device", "=", "Pt", ".", "device", ")", "\n", "upper", "=", "self", ".", "_interval", ".", "upper_bounds", "(", "dtype", "=", "Pt", ".", "dtype", ",", "device", "=", "Pt", ".", "device", ")", "\n", "\n", "diff", "=", "q", ".", "cdf", "(", "upper", ")", "-", "q", ".", "cdf", "(", "lower", ")", "\n", "diff", "=", "torch", ".", "clamp", "(", "diff", ",", "min", "=", "1e-5", ")", "\n", "\n", "if", "return_individual_probabilities", ":", "\n", "            ", "return", "diff", "\n", "", "else", ":", "\n", "            ", "return", "torch", ".", "prod", "(", "diff", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.IntervalObjective.LogLikelihood": [[838, 848], ["objectives.IntervalObjective.", "torch.sum", "torch.sum", "torch.log", "torch.log"], "methods", ["None"], ["", "", "def", "LogLikelihood", "(", "self", ",", "Pt", ",", "return_separate_batch_values", "=", "False", ")", "->", "torch", ".", "Tensor", ":", "\n", "\n", "        ", "diff", "=", "self", "(", "Pt", ",", "return_individual_probabilities", "=", "True", ")", "\n", "\n", "if", "return_separate_batch_values", ":", "\n", "            ", "LogLkl", "=", "torch", ".", "sum", "(", "torch", ".", "log", "(", "diff", ")", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "LogLkl", "=", "torch", ".", "sum", "(", "torch", ".", "log", "(", "diff", ")", ")", "\n", "\n", "", "return", "LogLkl", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.IntervalObjective._step": [[849, 852], ["objectives.IntervalObjective._temper"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.IntervalObjective._temper"], ["", "def", "_step", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "self", ".", "_temper", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.IntervalObjective._assess": [[853, 861], ["objectives.IntervalObjective._interval.fraction_within", "isinstance"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.TemperedIntervalManager.fraction_within"], ["", "def", "_assess", "(", "self", ",", "kappa", ":", "torch", ".", "Tensor", ",", "active_interval", "=", "False", ")", ":", "\n", "\n", "        ", "J", "=", "self", ".", "_interval", ".", "fraction_within", "(", "\n", "kappa", ",", "active_interval", ",", "return_individual", "=", "False", "\n", ")", "\n", "assert", "isinstance", "(", "J", ",", "float", ")", "and", "0", "<=", "J", "<=", "1", "\n", "\n", "return", "J", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.IntervalObjective.var": [[862, 874], ["torch.no_grad", "objectives.IntervalObjective.", "torch.prod"], "methods", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "var", "(", "self", ",", "Pt", ":", "torch", ".", "Tensor", ",", "N_monte_carlo", "=", "None", ")", "->", "torch", ".", "Tensor", ":", "\n", "\n", "        ", "if", "N_monte_carlo", "is", "not", "None", ":", "\n", "            ", "pass", "\n", "\n", "", "probs", "=", "self", "(", "Pt", ",", "return_individual_probabilities", "=", "True", ")", "\n", "\n", "q", "=", "torch", ".", "prod", "(", "probs", ",", "1", ")", "\n", "vars", "=", "q", "*", "(", "1", "-", "q", ")", "\n", "\n", "return", "vars", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.IntervalObjective._temper": [[875, 974], ["torch.no_grad", "objectives.IntervalObjective._temper.ess_fct"], "methods", ["None"], ["", "def", "_temper", "(", "self", ",", "verbose", "=", "False", ")", ":", "\n", "\n", "        ", "if", "self", ".", "_E_samples", "is", "None", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"Trying to do a ESS tempering step without prior E-step\"", ")", "\n", "\n", "", "theta_hat_samples", "=", "self", ".", "_E_samples", "\n", "ess_reduction", "=", "self", ".", "_ess_reduction", "\n", "\n", "assert", "0", "<", "ess_reduction", "<", "1", "\n", "\n", "if", "self", ".", "_interval", ".", "alpha", "==", "1", ":", "\n", "            ", "return", "\n", "\n", "", "alpha_last", "=", "self", ".", "_interval", ".", "alpha", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\n", "            ", "kappa_mu", ",", "kappa_logsigma", "=", "self", ".", "_model", ".", "pipeline", "(", "\n", "theta_hat_samples", ",", "mode", "=", "\"transformed_phaseangles\"", "\n", ")", "\n", "log_prior", "=", "self", ".", "_LogPrior", "(", "\n", "theta_hat_samples", ",", "return_separate_batch_values", "=", "True", "\n", ")", "\n", "log_posterior", "=", "self", ".", "LogLikelihood", "(", "\n", "theta_hat_samples", ",", "return_separate_batch_values", "=", "True", "\n", ")", "\n", "logp", "=", "log_prior", "+", "log_posterior", "\n", "q", "=", "Normal", "(", "kappa_mu", ",", "torch", ".", "exp", "(", "kappa_logsigma", ")", ")", "\n", "\n", "kappa_samples_q", "=", "q", ".", "sample", "(", ")", "\n", "\n", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "ess_fct", "(", "alpha", ":", "float", ",", "safeguard", "=", "False", ")", "->", "float", ":", "\n", "\n", "            ", "lower", "=", "self", ".", "_interval", ".", "lower_bounds", "(", "\n", "dtype", "=", "kappa_mu", ".", "dtype", ",", "device", "=", "kappa_mu", ".", "device", ",", "alpha", "=", "alpha", "\n", ")", "\n", "upper", "=", "self", ".", "_interval", ".", "upper_bounds", "(", "\n", "dtype", "=", "kappa_mu", ".", "dtype", ",", "device", "=", "kappa_mu", ".", "device", ",", "alpha", "=", "alpha", "\n", ")", "\n", "diff", "=", "q", ".", "cdf", "(", "upper", ")", "-", "q", ".", "cdf", "(", "lower", ")", "\n", "diff", "=", "torch", ".", "clamp", "(", "diff", ",", "min", "=", "1e-5", ")", "\n", "\n", "limitcase", "=", "torch", ".", "all", "(", "diff", "<", "4.99", "*", "1e-5", ")", ".", "item", "(", ")", "\n", "if", "safeguard", "and", "limitcase", ":", "\n", "                ", "return", "0", "\n", "", "elif", "not", "safeguard", "and", "limitcase", ":", "\n", "                ", "return", "0", "\n", "\n", "", "LogLkl", "=", "torch", ".", "sum", "(", "torch", ".", "log", "(", "diff", ")", ",", "1", ")", "\n", "logp_new", "=", "log_prior", "+", "LogLkl", "\n", "logw", "=", "logp_new", "-", "logp", "\n", "\n", "# TODO: evaluate pytorch tensor (on GPU)", "\n", "return", "ESS", "(", "logw", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "", "def", "bisect_fct", "(", "alpha", ")", ":", "\n", "\n", "            ", "if", "np", ".", "abs", "(", "alpha_last", "-", "alpha", ")", "<", "1e-8", ":", "\n", "                ", "return", "1", "-", "ess_reduction", "\n", "", "return", "ess_fct", "(", "alpha", ")", "-", "ess_reduction", "\n", "\n", "", "ess_final", "=", "ess_fct", "(", "1", ",", "safeguard", "=", "True", ")", "\n", "\n", "if", "ess_final", ">", "ess_reduction", ":", "\n", "            ", "pass", "\n", "\n", "", "if", "ess_final", ">", "ess_reduction", ":", "\n", "            ", "print", "(", "\"Final tempering step, achieved alpha=1.\"", ")", "\n", "alpha_new", "=", "1", "\n", "ess_achieved", "=", "ess_final", "\n", "iterations", "=", "0", "\n", "", "else", ":", "\n", "            ", "m1", "=", "bisect_fct", "(", "alpha_last", ")", "\n", "m2", "=", "bisect_fct", "(", "1", ")", "\n", "assert", "np", ".", "sign", "(", "m1", ")", "!=", "np", ".", "sign", "(", "m2", ")", ",", "\"bisection function does not have a root\"", "\n", "\n", "rtol", "=", "0.015", "\n", "alpha_new", ",", "root_result", "=", "bisect", "(", "\n", "bisect_fct", ",", "alpha_last", ",", "1", ",", "rtol", "=", "rtol", ",", "full_output", "=", "True", "\n", ")", "\n", "iterations", "=", "root_result", ".", "iterations", "\n", "converged", "=", "root_result", ".", "converged", "\n", "ess_achieved", "=", "ess_fct", "(", "alpha_new", ")", "\n", "\n", "if", "not", "converged", ":", "\n", "                ", "raise", "RuntimeError", "(", "\n", "\"Bisection algorithm for updating interval did not converge\"", "\n", ")", "\n", "\n", "", "", "if", "verbose", ":", "\n", "            ", "print", "(", "\n", "\"Updating alpha : {:.2f} --> {:.2f}   [ess = {:.2f}, {} iterations]\"", ".", "format", "(", "\n", "alpha_last", ",", "alpha_new", ",", "ess_achieved", ",", "iterations", "\n", ")", "\n", ")", "\n", "\n", "", "self", ".", "_interval", ".", "temper", "(", "alpha_new", ")", "\n", "self", ".", "_interval", ".", "register", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.IntervalObjective._E": [[975, 978], ["objectives.IntervalObjective._inference.execute"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.optimization.inference.Inference.execute"], ["", "def", "_E", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "_E_samples", "=", "self", ".", "_inference", ".", "execute", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.IntervalObjective._E_sample": [[979, 982], ["objectives.IntervalObjective._inference.create_samples"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.optimization.inference.LowRankVariationalInference.create_samples"], ["", "def", "_E_sample", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "_E_samples", "=", "self", ".", "_inference", ".", "create_samples", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.IntervalObjective._M": [[983, 995], ["objectives.IntervalObjective._E_samples.detach", "objectives.IntervalObjective.LogLikelihood", "J.backward", "J.item"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.IntervalObjective.LogLikelihood"], ["", "def", "_M", "(", "self", ")", "->", "float", ":", "\n", "\n", "        ", "P", "=", "self", ".", "_E_samples", ".", "detach", "(", ")", "\n", "bs", "=", "P", ".", "shape", "[", "0", "]", "\n", "assert", "P", ".", "ndim", "==", "2", "\n", "\n", "log_likelihood", "=", "self", ".", "LogLikelihood", "(", "P", ")", "\n", "\n", "J", "=", "-", "(", "log_likelihood", ")", "/", "bs", "\n", "J", ".", "backward", "(", ")", "\n", "\n", "return", "-", "J", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.FunctionalObjective.__init__": [[998, 1034], ["objectives.AbstractObjective.__init__", "len", "objectives.FunctionalObjective._inference.init", "objectives.FunctionalObjective._inference.to", "objectives.FunctionalObjective._J"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.__init__", "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.TemperedIntervalManager.init", "home.repos.pwc.inspect_result.bdevl_SMO.optimization.inference.LowRankVariationalInference.to", "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.FunctionalObjective._J"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "model", ",", "\n", "inference", ",", "\n", "log_functional", ":", "Callable", ",", "\n", "treat_functional_as_latent", "=", "False", ",", "\n", "*", ",", "\n", "dtype", "=", "None", ",", "\n", "device", "=", "None", "\n", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "model", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ")", "\n", "self", ".", "_inference", "=", "inference", "\n", "self", ".", "_log_functional", "=", "log_functional", "\n", "\n", "self", ".", "_dim_kappa", "=", "len", "(", "self", ".", "_model", ".", "target", ")", "\n", "\n", "if", "treat_functional_as_latent", ":", "\n", "\n", "            ", "dim", "=", "model", ".", "rf", ".", "kernel", ".", "phase_angle_dim", "+", "self", ".", "_dim_kappa", "\n", "\n", "def", "logpot", "(", "Z", ")", ":", "\n", "\n", "                ", "kappa", "=", "Z", "[", ":", ",", "0", ":", "self", ".", "_dim_kappa", "]", "\n", "Pt", "=", "Z", "[", ":", ",", "self", ".", "_dim_kappa", ":", "]", "\n", "return", "self", ".", "_J", "(", "Pt", ",", "kappa", ")", "\n", "\n", "", "self", ".", "_inference", ".", "init", "(", "logpot", "=", "logpot", ",", "dim", "=", "dim", ")", "\n", "self", ".", "_inference", ".", "to", "(", "dtype", "=", "self", ".", "_dtype", ",", "device", "=", "self", ".", "_device", ")", "\n", "\n", "", "else", ":", "\n", "            ", "raise", "DeprecationWarning", "\n", "\n", "", "self", ".", "_treat_functional_as_latent", "=", "treat_functional_as_latent", "\n", "\n", "self", ".", "_E_samples", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.FunctionalObjective.sample_phase_angles": [[1035, 1041], ["torch.no_grad", "objectives.FunctionalObjective._inference._q.sample().squeeze", "objectives.FunctionalObjective._inference._q.sample"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.GaussianMultivariateTargetDistribution.sample"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "sample_phase_angles", "(", "self", ",", "N", ")", ":", "\n", "\n", "        ", "R", "=", "self", ".", "_inference", ".", "_q", ".", "sample", "(", "N", ")", ".", "squeeze", "(", ")", "\n", "assert", "R", ".", "ndim", "==", "2", "\n", "return", "R", "[", ":", ",", "self", ".", "_dim_kappa", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.FunctionalObjective.__call__": [[1042, 1044], ["None"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.FunctionalObjective._init": [[1045, 1047], ["None"], "methods", ["None"], ["", "def", "_init", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.FunctionalObjective._step": [[1048, 1050], ["None"], "methods", ["None"], ["", "def", "_step", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.FunctionalObjective._J": [[1051, 1067], ["objectives.FunctionalObjective._model.pipeline", "lamp.utils.DiagonalGaussianLogLikelihood", "objectives.FunctionalObjective._LogPrior", "objectives.FunctionalObjective._log_functional", "objectives.FunctionalObjective.sum"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.WrapperModel.pipeline", "home.repos.pwc.inspect_result.bdevl_SMO.lamp.utils.DiagonalGaussianLogLikelihood", "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.AbstractObjective._LogPrior"], ["", "def", "_J", "(", "self", ",", "Pt", ":", "torch", ".", "Tensor", ",", "kappa", ":", "torch", ".", "Tensor", ")", ":", "\n", "\n", "        ", "kappa_mu", ",", "kappa_logsigma", "=", "self", ".", "_model", ".", "pipeline", "(", "\n", "Pt", ",", "mode", "=", "\"transformed_phaseangles\"", "\n", ")", "\n", "\n", "logp", "=", "DiagonalGaussianLogLikelihood", "(", "\n", "kappa", ",", "kappa_mu", ",", "2", "*", "kappa_logsigma", ",", "reduce", "=", "torch", ".", "sum", "\n", ")", "\n", "assert", "logp", ".", "ndim", "==", "0", "\n", "log_prior", "=", "self", ".", "_LogPrior", "(", "Pt", ")", "\n", "assert", "log_prior", ".", "ndim", "==", "0", "\n", "log_func", "=", "self", ".", "_log_functional", "(", "kappa", ")", "\n", "assert", "log_func", ".", "ndim", "==", "1", "\n", "\n", "return", "logp", "+", "log_prior", "+", "log_func", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.FunctionalObjective._E": [[1068, 1071], ["objectives.FunctionalObjective._inference.execute"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.optimization.inference.Inference.execute"], ["", "def", "_E", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "_E_samples", "=", "self", ".", "_inference", ".", "execute", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.FunctionalObjective._M": [[1072, 1086], ["objectives.FunctionalObjective._E_samples.detach", "J.backward", "objectives.FunctionalObjective._J", "J.item"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.FunctionalObjective._J"], ["", "def", "_M", "(", "self", ")", "->", "float", ":", "\n", "\n", "        ", "Z", "=", "self", ".", "_E_samples", ".", "detach", "(", ")", "\n", "kappa", "=", "Z", "[", ":", ",", "0", ":", "self", ".", "_dim_kappa", "]", "\n", "Pt", "=", "Z", "[", ":", ",", "self", ".", "_dim_kappa", ":", "]", "\n", "bs", "=", "Z", ".", "shape", "[", "0", "]", "\n", "assert", "Pt", ".", "ndim", "==", "2", "\n", "\n", "# implementation minimizes the negative ELBO", "\n", "J", "=", "-", "self", ".", "_J", "(", "Pt", ",", "kappa", ")", "\n", "\n", "J", ".", "backward", "(", ")", "\n", "\n", "return", "-", "J", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.TargetObjective.__init__": [[1089, 1134], ["isinstance", "LogTargetFunctional", "objectives.FunctionalObjective.__init__", "len", "len", "isinstance", "torch.tensor", "isinstance", "target.view", "torch.sum", "torch.sum"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "model", ",", "inference", ",", "kappa_desired", ",", "*", ",", "alpha", "=", "1", ",", "dtype", "=", "None", ",", "device", "=", "None", "\n", ")", ":", "\n", "\n", "        ", "assert", "len", "(", "model", ".", "target", ")", "==", "len", "(", "kappa_desired", ")", "\n", "\n", "class", "LogTargetFunctional", "(", "object", ")", ":", "\n", "            ", "def", "__init__", "(", "self", ",", "target", ":", "torch", ".", "Tensor", ",", "alpha", ")", ":", "\n", "                ", "assert", "isinstance", "(", "target", ",", "torch", ".", "Tensor", ")", "\n", "assert", "target", ".", "ndim", "==", "1", "\n", "self", ".", "_target", "=", "target", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "assert", "alpha", ">", "0", "\n", "self", ".", "alpha", "=", "alpha", "\n", "\n", "", "def", "__call__", "(", "self", ",", "kappa", ",", "vars_eval", "=", "False", ",", "alpha", "=", "None", ")", ":", "\n", "\n", "                ", "if", "alpha", "is", "None", ":", "\n", "                    ", "alpha", "=", "self", ".", "alpha", "\n", "\n", "", "if", "not", "vars_eval", ":", "\n", "                    ", "assert", "kappa", ".", "ndim", "==", "2", "\n", "return", "-", "alpha", "*", "torch", ".", "sum", "(", "(", "kappa", "-", "self", ".", "_target", ")", "**", "2", ",", "1", ")", "\n", "", "else", ":", "\n", "                    ", "assert", "kappa", ".", "ndim", "==", "3", "\n", "return", "-", "alpha", "*", "torch", ".", "sum", "(", "(", "kappa", "-", "self", ".", "_target", ")", "**", "2", ",", "2", ")", "\n", "\n", "", "", "", "assert", "isinstance", "(", "\n", "kappa_desired", ",", "(", "torch", ".", "Tensor", ",", "np", ".", "ndarray", ",", "list", ")", "\n", ")", ",", "\"kappa_desired must be array like quantity\"", "\n", "if", "not", "isinstance", "(", "kappa_desired", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "kappa_desired", "=", "torch", ".", "tensor", "(", "kappa_desired", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ")", "\n", "", "else", ":", "\n", "            ", "assert", "kappa_desired", ".", "dtype", "==", "dtype", "\n", "assert", "kappa_desired", ".", "device", "==", "device", "\n", "\n", "", "log_functional", "=", "LogTargetFunctional", "(", "kappa_desired", ",", "alpha", ")", "\n", "super", "(", ")", ".", "__init__", "(", "\n", "model", ",", "\n", "inference", ",", "\n", "log_functional", ",", "\n", "dtype", "=", "dtype", ",", "\n", "device", "=", "device", ",", "\n", "treat_functional_as_latent", "=", "True", ",", "\n", ")", "\n", "self", ".", "_kappa_desired", "=", "kappa_desired", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.TargetObjective.var": [[1135, 1152], ["torch.no_grad", "objectives.TargetObjective._model.pipeline", "torch.distributions.Normal().sample", "objectives.TargetObjective._log_functional", "torch.var", "torch.distributions.Normal", "len"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.WrapperModel.pipeline", "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.GaussianMultivariateTargetDistribution.sample", "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.TargetObjective.var"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "var", "(", "self", ",", "Pt", ":", "torch", ".", "Tensor", ",", "N_monte_carlo", "=", "512", ")", ":", "\n", "\n", "        ", "kappa_mean", ",", "kappa_logsigma", "=", "self", ".", "_model", ".", "pipeline", "(", "\n", "Pt", ",", "mode", "=", "\"transformed_phaseangles\"", "\n", ")", "\n", "\n", "S", "=", "torch", ".", "distributions", ".", "Normal", "(", "kappa_mean", ",", "kappa_logsigma", ")", ".", "sample", "(", "\n", "(", "N_monte_carlo", ",", ")", "\n", ")", "\n", "assert", "S", ".", "ndim", "==", "3", "and", "S", ".", "shape", "[", "0", "]", "==", "N_monte_carlo", "\n", "\n", "J", "=", "self", ".", "_log_functional", "(", "S", ",", "vars_eval", "=", "True", ")", "\n", "V", "=", "torch", ".", "var", "(", "J", ",", "dim", "=", "0", ")", "\n", "assert", "V", ".", "ndim", "==", "1", "and", "len", "(", "V", ")", "==", "Pt", ".", "shape", "[", "0", "]", "\n", "\n", "return", "V", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.TargetObjective._assess": [[1153, 1157], ["torch.exp().mean().item", "torch.exp().mean", "torch.exp", "objectives.TargetObjective._log_functional"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.lamp.variational.DiagonalMultivariateNormal.mean"], ["", "def", "_assess", "(", "self", ",", "kappa", ":", "torch", ".", "Tensor", ")", ":", "\n", "\n", "# ugly fix", "\n", "        ", "return", "torch", ".", "exp", "(", "self", ".", "_log_functional", "(", "kappa", ",", "alpha", "=", "1", ")", ")", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.TargetObjective.set_alpha": [[1158, 1162], ["None"], "methods", ["None"], ["", "def", "set_alpha", "(", "self", ",", "val", ")", ":", "\n", "\n", "# quick fix", "\n", "        ", "self", ".", "_log_functional", ".", "alpha", "=", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.TargetObjective.get_alpha": [[1163, 1167], ["None"], "methods", ["None"], ["", "def", "get_alpha", "(", "self", ")", ":", "\n", "\n", "# quick fix", "\n", "        ", "return", "self", ".", "_log_functional", ".", "alpha", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.TargetDistribution.__init__": [[1170, 1173], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "_samples", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.TargetDistribution.mark_1d": [[1174, 1177], ["None"], "methods", ["None"], ["", "def", "mark_1d", "(", "self", ")", ":", "\n", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.TargetDistribution.mark_2d": [[1178, 1181], ["None"], "methods", ["None"], ["", "def", "mark_2d", "(", "self", ")", ":", "\n", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.SampleRepresentationTargetDistribution.__init__": [[1184, 1188], ["objectives.TargetDistribution.__init__"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.__init__"], ["    ", "def", "__init__", "(", "self", ",", "samples", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_samples", "=", "samples", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.SampleRepresentationTargetDistribution.mark_1d": [[1189, 1192], ["None"], "methods", ["None"], ["", "def", "mark_1d", "(", "self", ")", ":", "\n", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.SampleRepresentationTargetDistribution.mark_2d": [[1193, 1196], ["None"], "methods", ["None"], ["", "def", "mark_2d", "(", "self", ")", ":", "\n", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.GaussianMultivariateTargetDistribution.__init__": [[1199, 1211], ["objectives.TargetDistribution.__init__", "isinstance", "isinstance", "numpy.all", "numpy.linalg.norm", "len", "len", "numpy.linalg.eigvals"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.__init__"], ["    ", "def", "__init__", "(", "self", ",", "mean", ":", "np", ".", "ndarray", ",", "cov", ":", "np", ".", "ndarray", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "assert", "isinstance", "(", "mean", ",", "np", ".", "ndarray", ")", "and", "mean", ".", "ndim", "==", "1", "\n", "assert", "isinstance", "(", "cov", ",", "np", ".", "ndarray", ")", "and", "cov", ".", "shape", "==", "(", "len", "(", "mean", ")", ",", "len", "(", "mean", ")", ")", "\n", "assert", "(", "\n", "np", ".", "all", "(", "np", ".", "linalg", ".", "eigvals", "(", "cov", ")", ">", "0", ")", "and", "np", ".", "linalg", ".", "norm", "(", "cov", "-", "cov", ".", "T", ")", "<", "1e-12", "\n", ")", ",", "\"Coviarance is not SPD\"", "\n", "\n", "self", ".", "_mean", "=", "mean", "\n", "self", ".", "_cov", "=", "cov", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.GaussianMultivariateTargetDistribution.sample": [[1291, 1293], ["scipy.stats.multivariate_normal.rvs"], "methods", ["None"], ["", "", "def", "sample", "(", "self", ",", "N", ")", ":", "\n", "        ", "return", "multivariate_normal", ".", "rvs", "(", "mean", "=", "self", ".", "_mean", ",", "cov", "=", "self", ".", "_cov", ",", "size", "=", "N", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.GaussianMultivariateTargetDistribution.mark_1d": [[1215, 1243], ["numpy.sqrt", "numpy.linspace", "scipy.stats.norm.pdf", "matplotlib.plot", "matplotlib.plot", "isinstance", "len", "len"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.SMO.utils.Gaussian2D.plot", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.utils.Gaussian2D.plot"], ["", "def", "mark_1d", "(", "\n", "self", ",", "\n", "dim", ":", "int", "=", "None", ",", "\n", "res", "=", "20", ",", "\n", "numstd", "=", "3", ",", "\n", "xlim", ":", "tuple", "=", "None", ",", "\n", "color", "=", "\"g\"", ",", "\n", "width", "=", "0.5", ",", "\n", ")", ":", "\n", "\n", "        ", "if", "dim", "is", "None", ":", "\n", "            ", "assert", "len", "(", "self", ".", "_mean", ")", "==", "1", "\n", "mean", "=", "self", ".", "_mean", "\n", "cov", "=", "self", ".", "_cov", "\n", "", "else", ":", "\n", "            ", "assert", "isinstance", "(", "dim", ",", "int", ")", "\n", "assert", "0", "<=", "dim", "<=", "len", "(", "self", ".", "_mean", ")", "\n", "mean", "=", "self", ".", "_mean", "[", "dim", "]", "\n", "var", "=", "self", ".", "_cov", "[", "dim", ",", "dim", "]", "\n", "\n", "", "stddev", "=", "np", ".", "sqrt", "(", "var", ")", "\n", "\n", "xlim", "=", "(", "\n", "(", "mean", "-", "numstd", "*", "stddev", ",", "mean", "+", "numstd", "*", "stddev", ")", "if", "xlim", "is", "None", "else", "xlim", "\n", ")", "\n", "x", "=", "np", ".", "linspace", "(", "xlim", "[", "0", "]", ",", "xlim", "[", "1", "]", ",", "res", ")", "\n", "y", "=", "singlevariate_normal", ".", "pdf", "(", "x", ",", "loc", "=", "mean", ",", "scale", "=", "stddev", ")", "\n", "plt", ".", "plot", "(", "x", ",", "y", ",", "\"-\"", ",", "color", "=", "color", ",", "linewidth", "=", "width", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.GaussianMultivariateTargetDistribution.mark_2d": [[1244, 1290], ["numpy.sqrt", "numpy.linspace", "numpy.linspace", "numpy.meshgrid", "scipy.stats.multivariate_normal.pdf", "matplotlib.contour", "matplotlib.contour", "numpy.diag", "numpy.dstack", "matplotlib.clabel", "matplotlib.clabel", "len", "isinstance", "isinstance", "min", "max", "len"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.PhiState.min", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.PhiState.max"], ["", "def", "mark_2d", "(", "\n", "self", ",", "\n", "dims", ":", "tuple", "=", "None", ",", "\n", "res", "=", "20", ",", "\n", "numstd", "=", "3", ",", "\n", "xlim", ":", "tuple", "=", "None", ",", "\n", "ylim", ":", "tuple", "=", "None", ",", "\n", "color", "=", "\"g\"", ",", "\n", "width", "=", "0.5", ",", "\n", "N_contours", "=", "3", ",", "\n", "c_label_fontsize", "=", "None", ",", "\n", "label", "=", "None", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "\n", "        ", "if", "dims", "is", "None", ":", "\n", "            ", "assert", "(", "\n", "len", "(", "self", ".", "_mean", ")", "==", "2", "\n", ")", ",", "\"need to specify targeted dimensions if target distribution is not 2D\"", "\n", "mean", "=", "self", ".", "_mean", "\n", "cov", "=", "self", ".", "_cov", "\n", "", "else", ":", "\n", "            ", "assert", "isinstance", "(", "dims", ",", "list", ")", "or", "isinstance", "(", "dims", ",", "tuple", ")", "\n", "assert", "min", "(", "dims", ")", ">", "0", "and", "max", "(", "dims", ")", "<=", "len", "(", "self", ".", "_mean", ")", "\n", "mean", "=", "self", ".", "_mean", "[", "dims", "]", "\n", "cov", "=", "self", ".", "_cov", "[", "dims", "]", "[", ":", ",", "dims", "]", "\n", "\n", "", "stddev", "=", "np", ".", "sqrt", "(", "np", ".", "diag", "(", "cov", ")", ")", "\n", "xlim", "=", "(", "\n", "(", "mean", "[", "0", "]", "-", "numstd", "*", "stddev", "[", "0", "]", ",", "mean", "[", "0", "]", "+", "numstd", "*", "stddev", "[", "0", "]", ")", "\n", "if", "xlim", "is", "None", "\n", "else", "xlim", "\n", ")", "\n", "ylim", "=", "(", "\n", "(", "mean", "[", "1", "]", "-", "numstd", "*", "stddev", "[", "1", "]", ",", "mean", "[", "1", "]", "+", "numstd", "*", "stddev", "[", "1", "]", ")", "\n", "if", "ylim", "is", "None", "\n", "else", "ylim", "\n", ")", "\n", "x", "=", "np", ".", "linspace", "(", "xlim", "[", "0", "]", ",", "xlim", "[", "1", "]", ",", "res", ")", "\n", "y", "=", "np", ".", "linspace", "(", "ylim", "[", "0", "]", ",", "ylim", "[", "1", "]", ",", "res", ")", "\n", "X", ",", "Y", "=", "np", ".", "meshgrid", "(", "x", ",", "y", ")", "\n", "\n", "Z", "=", "multivariate_normal", ".", "pdf", "(", "np", ".", "dstack", "(", "(", "X", ",", "Y", ")", ")", ",", "mean", "=", "mean", ",", "cov", "=", "cov", ")", "\n", "contours", "=", "plt", ".", "contour", "(", "X", ",", "Y", ",", "Z", ",", "N_contours", ",", "colors", "=", "color", ",", "label", "=", "label", ",", "**", "kwargs", ")", "\n", "if", "c_label_fontsize", ":", "\n", "            ", "plt", ".", "clabel", "(", "contours", ",", "inline", "=", "True", ",", "fontsize", "=", "c_label_fontsize", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.KullbackLeiblerLogPotential.__init__": [[1298, 1308], ["super().__init__", "isinstance", "objectives.KullbackLeiblerLogPotential.register_buffer"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.__init__"], ["    ", "def", "__init__", "(", "self", ",", "kappas", ":", "torch", ".", "Tensor", ",", "wmodel", ":", "WrapperModel", ",", "objective", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "assert", "isinstance", "(", "kappas", ",", "torch", ".", "Tensor", ")", "\n", "assert", "kappas", ".", "ndim", "==", "2", "\n", "\n", "self", ".", "register_buffer", "(", "\"_kappas\"", ",", "kappas", ")", "\n", "self", ".", "_wmodel", "=", "wmodel", "\n", "self", ".", "_kld_objective", "=", "objective", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.KullbackLeiblerLogPotential.collapse": [[1309, 1324], ["Pt.view", "kappas.unsqueeze().repeat().view", "kappas.unsqueeze().repeat", "kappas.unsqueeze"], "methods", ["None"], ["", "def", "collapse", "(", "self", ",", "Pt", ",", "kappas", "=", "None", ")", ":", "\n", "\n", "        ", "N_samples", "=", "Pt", ".", "shape", "[", "0", "]", "\n", "assert", "Pt", ".", "ndim", "==", "3", "\n", "\n", "Pt_", "=", "Pt", ".", "view", "(", "-", "1", ",", "Pt", ".", "shape", "[", "2", "]", ")", "\n", "\n", "if", "kappas", "is", "None", ":", "\n", "            ", "return", "Pt_", "\n", "\n", "", "assert", "kappas", ".", "ndim", "==", "2", "\n", "assert", "kappas", ".", "shape", "[", "0", "]", "==", "Pt", ".", "shape", "[", "1", "]", "\n", "kappa_t_", "=", "kappas", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "N_samples", ",", "1", ",", "1", ")", ".", "view", "(", "-", "1", ",", "kappas", ".", "shape", "[", "1", "]", ")", "\n", "\n", "return", "Pt_", ",", "kappa_t_", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.KullbackLeiblerLogPotential.forward": [[1325, 1355], ["objectives.KullbackLeiblerLogPotential.collapse", "objectives.KullbackLeiblerLogPotential._wmodel.LogLikelihood", "torch.sum", "print", "print", "print", "print", "logprior.item", "objectives.KullbackLeiblerLogPotential.item"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.KullbackLeiblerLogPotential.collapse", "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.IntervalObjective.LogLikelihood"], ["", "def", "forward", "(", "self", ",", "Pt", ":", "torch", ".", "Tensor", ",", "indeces", ":", "torch", ".", "Tensor", "=", "None", ",", "verbose", "=", "False", ")", ":", "\n", "\n", "        ", "assert", "(", "\n", "Pt", ".", "ndim", "==", "3", "\n", ")", ",", "\"needs to be comprised of (N_samples, batch_dim, dim(phase_angles))\"", "\n", "K", "=", "Pt", ".", "shape", "[", "0", "]", "*", "Pt", ".", "shape", "[", "1", "]", "\n", "\n", "if", "indeces", "is", "None", ":", "\n", "            ", "kappas", "=", "self", ".", "_kappas", "\n", "", "else", ":", "\n", "            ", "kappas", "=", "self", ".", "_kappas", "[", "indeces", "]", "\n", "\n", "", "Pt", ",", "kappas", "=", "self", ".", "collapse", "(", "Pt", ",", "kappas", ")", "\n", "\n", "assert", "Pt", ".", "ndim", "==", "kappas", ".", "ndim", "==", "2", "\n", "assert", "Pt", ".", "shape", "[", "0", "]", "==", "kappas", ".", "shape", "[", "0", "]", "\n", "\n", "loglkl", "=", "self", ".", "_wmodel", ".", "LogLikelihood", "(", "Pt", ",", "kappa", "=", "kappas", ",", "reduce", "=", "torch", ".", "sum", ")", "\n", "logprior", "=", "-", "0.5", "*", "torch", ".", "sum", "(", "Pt", "**", "2", ")", "\n", "\n", "if", "verbose", ":", "\n", "            ", "print", "(", "\"=========\"", ")", "\n", "print", "(", "\"Logprior: {:.3f}\"", ".", "format", "(", "logprior", ".", "item", "(", ")", "/", "Pt", ".", "shape", "[", "0", "]", ")", ")", "\n", "print", "(", "\"Loglikelihood: {:.3f}\"", ".", "format", "(", "loglkl", ".", "item", "(", ")", "/", "Pt", ".", "shape", "[", "0", "]", ")", ")", "\n", "print", "(", "\"==========\"", ")", "\n", "\n", "", "J", "=", "loglkl", "+", "logprior", "\n", "\n", "# not normalized", "\n", "return", "loglkl", "+", "logprior", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.KullbackLeiblerLogPotential._forward_single": [[1356, 1358], ["None"], "methods", ["None"], ["", "def", "_forward_single", "(", "self", ",", "Pt", ",", "indences", ",", "kappa", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.KullbackLeiblerObjective.__init__": [[1361, 1418], ["objectives.AbstractObjective.__init__", "isinstance", "kappas_t.clone().to", "KullbackLeiblerLogPotential().to", "objectives.KullbackLeiblerObjective._inference.init", "objectives.KullbackLeiblerObjective._inference.to", "objectives.KullbackLeiblerObjective._inference.create_samples", "dict", "kappas_t.clone", "objectives.KullbackLeiblerLogPotential", "kappas_t.clone().to", "kappas_t.clone"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.__init__", "home.repos.pwc.inspect_result.bdevl_SMO.optimization.inference.LowRankVariationalInference.to", "home.repos.pwc.inspect_result.bdevl_SMO.optimization.inference.LowRankVariationalInference.to", "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.TemperedIntervalManager.init", "home.repos.pwc.inspect_result.bdevl_SMO.optimization.inference.LowRankVariationalInference.to", "home.repos.pwc.inspect_result.bdevl_SMO.optimization.inference.LowRankVariationalInference.create_samples", "home.repos.pwc.inspect_result.bdevl_SMO.optimization.inference.LowRankVariationalInference.to"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "model", ",", "\n", "kappas_t", ":", "torch", ".", "Tensor", ",", "\n", "inference", ",", "\n", "N_updates", ":", "int", ",", "\n", "disseperate", "=", "True", ",", "\n", "sampling_strategy", "=", "\"random\"", ",", "\n", "lr", "=", "0.25", ",", "\n", "lr_vi", "=", "0.001", ",", "\n", "*", ",", "\n", "device", "=", "None", ",", "\n", "dtype", "=", "None", ",", "\n", "tempering", "=", "True", "\n", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "model", "=", "model", ",", "lr", "=", "lr", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ")", "\n", "\n", "self", ".", "_tempering", "=", "tempering", "\n", "self", ".", "_alpha", "=", "None", "\n", "\n", "assert", "isinstance", "(", "kappas_t", ",", "torch", ".", "Tensor", ")", "\n", "self", ".", "_kappas_t", "=", "kappas_t", ".", "clone", "(", ")", ".", "to", "(", "dtype", "=", "self", ".", "dtype", ",", "device", "=", "self", ".", "device", ")", "\n", "self", ".", "_S", "=", "self", ".", "_kappas_t", ".", "shape", "[", "0", "]", "\n", "\n", "self", ".", "_disseperate", "=", "disseperate", "\n", "\n", "if", "not", "disseperate", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "logpot", "=", "KullbackLeiblerLogPotential", "(", "\n", "kappas_t", ".", "clone", "(", ")", ".", "to", "(", "dtype", "=", "dtype", ",", "device", "=", "device", ")", ",", "model", ",", "self", "\n", ")", ".", "to", "(", "dtype", "=", "dtype", ",", "device", "=", "device", ")", "\n", "self", ".", "_logpot", "=", "logpot", "\n", "\n", "assert", "sampling_strategy", "==", "\"random\"", ",", "\"currently can only do random sampling\"", "\n", "\n", "self", ".", "_inference", "=", "inference", "\n", "self", ".", "_inference", ".", "init", "(", "logpot", ",", "self", ".", "rf", ".", "kernel", ".", "phase_angle_dim", ")", "\n", "self", ".", "_inference", "=", "self", ".", "_inference", ".", "to", "(", "dtype", "=", "dtype", ",", "device", "=", "device", ")", "\n", "\n", "self", ".", "_q_samples", "=", "self", ".", "_inference", ".", "create_samples", "(", ")", "\n", "\n", "self", ".", "_N_updates", "=", "N_updates", "\n", "assert", "sampling_strategy", "in", "[", "\n", "\"random\"", ",", "\n", "\"cyclic\"", ",", "\n", "\"none\"", ",", "\n", "]", ",", "\"sampling strategy {} is not supported\"", ".", "format", "(", "sampling_strategy", ")", "\n", "\n", "self", ".", "_sampling_strategy", "=", "sampling_strategy", "\n", "\n", "self", ".", "_initialized", "=", "False", "\n", "\n", "self", ".", "representation", "=", "None", "\n", "\n", "self", ".", "_cache_tempering", "=", "dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.KullbackLeiblerObjective.kappas_target": [[1419, 1422], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "kappas_target", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_kappas_t", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.KullbackLeiblerObjective.FromPhi": [[1423, 1457], ["isinstance", "isinstance", "factory.rf", "rf.set_phi", "factory.hmg", "factory.kappa_from_phi", "cls", "isinstance", "isinstance", "isinstance", "isinstance", "phi0.tolist.tolist.tolist"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.AbstractObjective.rf", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.set_phi", "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.WrapperModel.hmg", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.factories.CaseFactory.kappa_from_phi"], ["", "@", "classmethod", "\n", "def", "FromPhi", "(", "\n", "cls", ",", "\n", "factory", ",", "\n", "phi0", ":", "torch", ".", "Tensor", ",", "\n", "N_target", ":", "int", ",", "\n", "N_updates", ":", "int", ",", "\n", "model", ",", "\n", "inference", ",", "\n", "*", "args", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "\n", "        ", "assert", "isinstance", "(", "factory", ",", "SMO", ".", "factories", ".", "CaseFactory", ")", "\n", "assert", "(", "\n", "isinstance", "(", "phi0", ",", "list", ")", "\n", "or", "isinstance", "(", "phi0", ",", "np", ".", "ndarray", ")", "\n", "or", "isinstance", "(", "phi0", ",", "torch", ".", "Tensor", ")", "\n", ")", "\n", "assert", "(", "\n", "N_updates", "is", "None", "\n", ")", ",", "\"The N_updates parameter currently is unused, because we always update everything at once\"", "\n", "assert", "isinstance", "(", "N_target", ",", "int", ")", "and", "N_target", ">", "0", "\n", "\n", "if", "isinstance", "(", "phi0", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "assert", "phi0", ".", "ndim", "==", "1", "\n", "phi0", "=", "phi0", ".", "tolist", "(", ")", "\n", "\n", "", "rf", ",", "_", "=", "factory", ".", "rf", "(", ")", "\n", "rf", ".", "set_phi", "(", "phi0", ")", "\n", "hmg", "=", "factory", ".", "hmg", "(", ")", "\n", "kappas_t", "=", "factory", ".", "kappa_from_phi", "(", "phi0", ",", "N", "=", "N_target", ")", "\n", "\n", "return", "cls", "(", "model", ",", "kappas_t", ",", "inference", ",", "N_updates", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.KullbackLeiblerObjective._E_sample": [[1458, 1461], ["objectives.KullbackLeiblerObjective._inference.create_samples"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.optimization.inference.LowRankVariationalInference.create_samples"], ["", "def", "_E_sample", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "_q_samples", "=", "self", ".", "_inference", ".", "create_samples", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.KullbackLeiblerObjective.__call__": [[1462, 1464], ["None"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.KullbackLeiblerObjective._assess": [[1465, 1467], ["None"], "methods", ["None"], ["", "def", "_assess", "(", "self", ",", "kappa", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.KullbackLeiblerObjective._init": [[1468, 1479], ["torch.no_grad", "objectives.KullbackLeiblerObjective._model.rf.rsample_batch", "objectives.KullbackLeiblerObjective._model.pipeline_Xg", "lamp.utils.reparametrize", "lamp.utils.reparametrize.detach", "lamp.utils.reparametrize.clone"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.rsample_batch", "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.WrapperModel.pipeline_Xg", "home.repos.pwc.inspect_result.bdevl_SMO.lamp.utils.reparametrize"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_init", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "if", "self", ".", "_tempering", ":", "\n", "\n", "            ", "X_g", "=", "self", ".", "_model", ".", "rf", ".", "rsample_batch", "(", "self", ".", "_S", ")", "\n", "kappa_mean", ",", "kappa_logsigma", "=", "self", ".", "_model", ".", "pipeline_Xg", "(", "X_g", ")", "\n", "kappa_samples", "=", "reparametrize", "(", "kappa_mean", ",", "kappa_logsigma", ")", "\n", "self", ".", "_kappas_i", "=", "kappa_samples", ".", "detach", "(", ")", "\n", "self", ".", "_logpot", ".", "_kappas", ".", "data", "=", "kappa_samples", ".", "clone", "(", ")", "\n", "self", ".", "_alpha", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.KullbackLeiblerObjective._step": [[1480, 1573], ["torch.no_grad", "objectives.KullbackLeiblerObjective._q_samples.detach", "objectives.KullbackLeiblerObjective._logpot.collapse", "objectives.KullbackLeiblerObjective._model.pipeline", "objectives.KullbackLeiblerObjective._step.bisect_fct"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.KullbackLeiblerLogPotential.collapse", "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.WrapperModel.pipeline"], ["", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_step", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "if", "self", ".", "_tempering", "and", "self", ".", "_alpha", "!=", "1", ":", "\n", "\n", "            ", "target_stddevs", "=", "5", "\n", "\n", "Pt", "=", "self", ".", "_q_samples", ".", "detach", "(", ")", "\n", "assert", "(", "\n", "Pt", ".", "ndim", "==", "3", "and", "Pt", ".", "shape", "[", "0", "]", "==", "1", "\n", ")", ",", "\"not implemented for any other cases\"", "\n", "\n", "Pt_collapsed", "=", "self", ".", "_logpot", ".", "collapse", "(", "Pt", ")", "\n", "kappa_mean", ",", "kappa_logsigma", "=", "self", ".", "_model", ".", "pipeline", "(", "\n", "Pt_collapsed", ",", "mode", "=", "\"transformed_phaseangles\"", "\n", ")", "\n", "\n", "def", "tempered_samples", "(", "alpha_", ")", ":", "\n", "                ", "return", "(", "1", "-", "alpha_", ")", "*", "self", ".", "_kappas_i", "+", "alpha_", "*", "self", ".", "_kappas_t", "\n", "\n", "", "def", "stddevs", "(", "alpha_", ")", ":", "\n", "\n", "                ", "kappa_samples_active", "=", "tempered_samples", "(", "alpha_", ")", "\n", "stddevs", "=", "torch", ".", "abs", "(", "\n", "(", "kappa_samples_active", "-", "kappa_mean", ")", "/", "torch", ".", "exp", "(", "kappa_logsigma", ")", "\n", ")", "\n", "avg_stddevs", "=", "torch", ".", "mean", "(", "stddevs", ")", "\n", "return", "avg_stddevs", ".", "item", "(", ")", "\n", "\n", "", "def", "bisect_fct", "(", "alpha_", ")", ":", "\n", "\n", "                ", "return", "stddevs", "(", "alpha_", ")", "-", "target_stddevs", "\n", "\n", "", "if", "stddevs", "(", "1", ")", "<", "target_stddevs", "+", "0.5", ":", "\n", "\n", "                ", "self", ".", "_alpha", "=", "1", "\n", "self", ".", "_logpot", ".", "_kappas", ".", "data", "=", "tempered_samples", "(", "1", ")", "\n", "return", "\n", "\n", "", "if", "stddevs", "(", "self", ".", "_alpha", ")", ">=", "(", "target_stddevs", "-", "0.15", ")", ":", "\n", "                ", "return", "\n", "\n", "", "m1", "=", "bisect_fct", "(", "self", ".", "_alpha", ")", "\n", "m2", "=", "bisect_fct", "(", "1", ")", "\n", "\n", "if", "not", "(", "np", ".", "sign", "(", "m1", ")", "!=", "np", ".", "sign", "(", "m2", ")", ")", ":", "\n", "\n", "                ", "warnings", ".", "warn", "(", "\n", "\"Failed to find root (m1={:.2f}, m2={:.2f})\"", ".", "format", "(", "m1", ",", "m2", ")", "\n", ")", "\n", "print", "(", "\"--------------- Failed to find root ------------\"", ")", "\n", "print", "(", "\n", "\"A: {:.2f}   | B : {:.2f}\"", ".", "format", "(", "stddevs", "(", "self", ".", "_alpha", ")", ",", "stddevs", "(", "1", ")", ")", "\n", ")", "\n", "\n", "if", "\"failed_rootfindings\"", "not", "in", "self", ".", "_cache_tempering", ":", "\n", "                    ", "self", ".", "_cache_tempering", "[", "\"failed_rootfindings\"", "]", "=", "1", "\n", "", "else", ":", "\n", "                    ", "self", ".", "_cache_tempering", "[", "\"failed_rootfindings\"", "]", "+=", "1", "\n", "\n", "if", "self", ".", "_cache_tempering", "[", "\"failed_rootfindings\"", "]", ">", "10", ":", "\n", "                        ", "print", "(", "\n", "\"Setting alpha to 1 and abandoning tempering after 10 failed attempts to find a root.\"", "\n", ")", "\n", "self", ".", "_alpha", "=", "1", "\n", "self", ".", "_logpot", ".", "_kappas", ".", "data", "=", "tempered_samples", "(", "1", ")", "\n", "return", "\n", "\n", "", "", "", "else", ":", "\n", "\n", "                ", "if", "\"failed_rootfindings\"", "in", "self", ".", "_cache_tempering", ":", "\n", "                    ", "self", ".", "_cache_tempering", "[", "\"failed_rootfindings\"", "]", "=", "0", "\n", "\n", "", "alpha_new", ",", "root_result", "=", "bisect", "(", "\n", "bisect_fct", ",", "self", ".", "_alpha", ",", "1", ",", "rtol", "=", "0.05", ",", "full_output", "=", "True", "\n", ")", "\n", "iterations", "=", "root_result", ".", "iterations", "\n", "converged", "=", "root_result", ".", "converged", "\n", "stddevs_achieved", "=", "stddevs", "(", "alpha_new", ")", "\n", "\n", "print", "(", "\n", "\"Setting alpha: {:.2f} ---> {:.2f}\"", ".", "format", "(", "self", ".", "_alpha", ",", "alpha_new", ")", "\n", ")", "\n", "stddevs_old", "=", "stddevs", "(", "self", ".", "_alpha", ")", "\n", "print", "(", "\n", "\"stddevs: {:.2f} ---> {:.2f}\"", ".", "format", "(", "stddevs_old", ",", "stddevs_achieved", ")", "\n", ")", "\n", "\n", "if", "not", "converged", ":", "\n", "                    ", "raise", "Exception", "(", "\"Tempering for KLD objective failed.\"", ")", "\n", "\n", "", "self", ".", "_alpha", "=", "alpha_new", "\n", "self", ".", "_logpot", ".", "_kappas", ".", "data", "=", "tempered_samples", "(", "alpha_new", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.KullbackLeiblerObjective._E": [[1574, 1582], ["objectives.KullbackLeiblerObjective._inference.execute"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.optimization.inference.Inference.execute"], ["", "", "", "def", "_E", "(", "self", ",", "verbose", "=", "False", ")", ":", "\n", "\n", "        ", "if", "self", ".", "_disseperate", ":", "\n", "\n", "            ", "self", ".", "_q_samples", "=", "self", ".", "_inference", ".", "execute", "(", ")", "\n", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.KullbackLeiblerObjective._M": [[1583, 1593], ["objectives.KullbackLeiblerObjective._q_samples.detach", "J.backward", "objectives.KullbackLeiblerObjective._logpot", "J.item"], "methods", ["None"], ["", "", "def", "_M", "(", "self", ",", "verbose", "=", "False", ")", "->", "float", ":", "\n", "\n", "        ", "Pt", "=", "self", ".", "_q_samples", ".", "detach", "(", ")", "\n", "\n", "elbo", "=", "self", ".", "_logpot", "(", "Pt", ",", "verbose", "=", "True", ")", "/", "(", "Pt", ".", "shape", "[", "0", "]", "*", "Pt", ".", "shape", "[", "1", "]", ")", "\n", "\n", "J", "=", "-", "elbo", "\n", "J", ".", "backward", "(", ")", "\n", "\n", "return", "-", "J", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.KullbackLeiblerObjective.__repr__": [[1594, 1601], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "\n", "        ", "s", "=", "\"OBJECTIVE : Kullback Leibler Divergence \\n\"", "\n", "s", "+=", "\"dim(kappa) = {} || N_instances = {} || Subset\"", ".", "format", "(", "\n", "self", ".", "_kappas_t", ".", "shape", "[", "1", "]", ",", "self", ".", "_kappas_t", ".", "shape", "[", "0", "]", "\n", ")", "\n", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.TemperedIntervalManager.__init__": [[1606, 1622], ["numpy.all", "list", "numpy.all", "isinstance"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "intervals", ")", ":", "\n", "\n", "        ", "assert", "(", "\n", "isinstance", "(", "intervals", ",", "np", ".", "ndarray", ")", "and", "intervals", ".", "shape", "[", "1", "]", "==", "2", "\n", ")", ",", "\"interval needs to be (Mx2) np.ndarray\"", "\n", "assert", "np", ".", "all", "(", "\n", "intervals", "[", ":", ",", "0", "]", "<", "intervals", "[", ":", ",", "1", "]", "\n", ")", ",", "\"left columns needs to contain lower bound, right column upper bound\"", "\n", "\n", "self", ".", "_t_interval", "=", "intervals", "\n", "self", ".", "_i_interval", "=", "None", "\n", "self", ".", "_alpha", "=", "0", "\n", "\n", "self", ".", "_alpha_hist", "=", "list", "(", ")", "\n", "\n", "assert", "np", ".", "all", "(", "self", ".", "_t_interval", "[", ":", ",", "0", "]", "<", "self", ".", "_t_interval", "[", ":", ",", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.TemperedIntervalManager.bounds": [[1623, 1626], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "bounds", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_t_interval", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.TemperedIntervalManager.alpha": [[1627, 1630], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "alpha", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_alpha", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.TemperedIntervalManager.dim": [[1631, 1634], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "dim", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_t_interval", ".", "shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.TemperedIntervalManager.register": [[1635, 1637], ["objectives.TemperedIntervalManager._alpha_hist.append"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.Log.append"], ["", "def", "register", "(", "self", ")", ":", "\n", "        ", "self", ".", "_alpha_hist", ".", "append", "(", "self", ".", "_alpha", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.TemperedIntervalManager.active_bound": [[1638, 1647], ["None"], "methods", ["None"], ["", "def", "active_bound", "(", "self", ",", "alpha", "=", "None", ")", ":", "\n", "\n", "        ", "if", "alpha", "is", "None", ":", "\n", "            ", "alpha", "=", "self", ".", "_alpha", "\n", "\n", "", "if", "alpha", "==", "1", ":", "\n", "            ", "return", "self", ".", "_t_interval", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "_i_interval", "+", "alpha", "*", "(", "self", ".", "_t_interval", "-", "self", ".", "_i_interval", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.TemperedIntervalManager.temper": [[1648, 1651], ["None"], "methods", ["None"], ["", "", "def", "temper", "(", "self", ",", "alpha", ")", ":", "\n", "        ", "assert", "0", "<=", "alpha", "<=", "1", "\n", "self", ".", "_alpha", "=", "alpha", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.TemperedIntervalManager.linear_step_temper": [[1652, 1655], ["float"], "methods", ["None"], ["", "def", "linear_step_temper", "(", "self", ",", "step", ",", "max_steps", ")", ":", "\n", "\n", "        ", "self", ".", "_alpha", "=", "float", "(", "step", ")", "/", "max_steps", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.TemperedIntervalManager.init": [[1656, 1676], ["torch.quantile().detach().cpu().numpy", "mquantiles.T.copy.T.copy.T.copy", "numpy.minimum", "numpy.maximum", "numpy.column_stack", "numpy.column_stack.copy", "torch.quantile().detach().cpu", "torch.quantile().detach", "torch.quantile", "torch.tensor"], "methods", ["None"], ["", "def", "init", "(", "self", ",", "samples", ",", "quantile", "=", "0.05", ")", ":", "\n", "\n", "        ", "mquantiles", "=", "(", "\n", "torch", ".", "quantile", "(", "\n", "samples", ",", "\n", "q", "=", "torch", ".", "tensor", "(", "\n", "[", "quantile", ",", "1", "-", "quantile", "]", ",", "dtype", "=", "samples", ".", "dtype", ",", "device", "=", "samples", ".", "device", "\n", ")", ",", "\n", "dim", "=", "0", ",", "\n", ")", "\n", ".", "detach", "(", ")", "\n", ".", "cpu", "(", ")", "\n", ".", "numpy", "(", ")", "\n", ")", "\n", "assert", "mquantiles", ".", "shape", "[", "1", "]", "==", "self", ".", "dim", "and", "mquantiles", ".", "shape", "[", "0", "]", "==", "2", "\n", "mquantiles", "=", "mquantiles", ".", "T", ".", "copy", "(", ")", "\n", "i_interval_lower", "=", "np", ".", "minimum", "(", "mquantiles", "[", ":", ",", "0", "]", ",", "self", ".", "_t_interval", "[", ":", ",", "0", "]", ")", "\n", "i_interval_upper", "=", "np", ".", "maximum", "(", "mquantiles", "[", ":", ",", "1", "]", ",", "self", ".", "_t_interval", "[", ":", ",", "1", "]", ")", "\n", "i_interval", "=", "np", ".", "column_stack", "(", "(", "i_interval_lower", ",", "i_interval_upper", ")", ")", "\n", "self", ".", "_i_interval", "=", "i_interval", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.TemperedIntervalManager._a_interval": [[1677, 1680], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "_a_interval", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_i_interval", "+", "self", ".", "_alpha", "*", "(", "self", ".", "_t_interval", "-", "self", ".", "_i_interval", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.TemperedIntervalManager.lower_bounds": [[1681, 1685], ["objectives.TemperedIntervalManager.active_bound", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.TemperedIntervalManager.active_bound"], ["", "def", "lower_bounds", "(", "self", ",", "dtype", ",", "device", ",", "alpha", "=", "None", ")", ":", "\n", "\n", "        ", "active_interval", "=", "self", ".", "active_bound", "(", "alpha", ")", "\n", "return", "torch", ".", "tensor", "(", "active_interval", "[", ":", ",", "0", "]", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.TemperedIntervalManager.upper_bounds": [[1686, 1690], ["objectives.TemperedIntervalManager.active_bound", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.TemperedIntervalManager.active_bound"], ["", "def", "upper_bounds", "(", "self", ",", "dtype", ",", "device", ",", "alpha", "=", "None", ")", ":", "\n", "\n", "        ", "active_interval", "=", "self", ".", "active_bound", "(", "alpha", ")", "\n", "return", "torch", ".", "tensor", "(", "active_interval", "[", ":", ",", "1", "]", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.TemperedIntervalManager.fraction_within_np": [[1691, 1712], ["isinstance", "torch.tensor", "objectives.TemperedIntervalManager.fraction_within", "numpy.zeros", "enumerate", "objectives.TemperedIntervalManager.fraction_within_np._exc"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.TemperedIntervalManager.fraction_within"], ["", "def", "fraction_within_np", "(", "self", ",", "kappa", ",", "active_interval", "=", "True", ",", "dtype", "=", "None", ",", "device", "=", "None", ")", ":", "\n", "\n", "        ", "assert", "isinstance", "(", "kappa", ",", "np", ".", "ndarray", ")", "\n", "kappa", "=", "torch", ".", "tensor", "(", "kappa", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ")", "\n", "\n", "def", "_exc", "(", "kappa_", ")", ":", "\n", "            ", "return", "self", ".", "fraction_within", "(", "\n", "kappa_", ",", "active_interval", ",", "return_individual", "=", "False", "\n", ")", "\n", "\n", "", "if", "kappa", ".", "ndim", "==", "3", ":", "\n", "            ", "results", "=", "np", ".", "zeros", "(", "kappa", ".", "shape", "[", "0", "]", ")", "\n", "for", "n", ",", "kappa_", "in", "enumerate", "(", "kappa", ")", ":", "\n", "                ", "results", "[", "n", "]", "=", "_exc", "(", "kappa_", ")", "\n", "", "return", "results", "\n", "", "elif", "kappa", ".", "ndim", "==", "2", ":", "\n", "            ", "return", "_exc", "(", "kappa", ")", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "\n", "\"Shape of kappa array ({}) does not meet requirements\"", ".", "format", "(", "\n", "kappa", ".", "shape", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.TemperedIntervalManager.fraction_within": [[1715, 1731], ["torch.tensor", "torch.sum", "R_single.item", "torch.all", "R_single.item", "torch.sum", "torch.all"], "methods", ["None"], ["", "", "def", "fraction_within", "(", "self", ",", "kappa", ",", "active_interval", "=", "True", ",", "return_individual", "=", "True", ")", ":", "\n", "\n", "        ", "assert", "kappa", ".", "ndim", "==", "2", "\n", "assert", "kappa", ".", "shape", "[", "1", "]", "==", "self", ".", "dim", "\n", "\n", "interval", "=", "self", ".", "_a_interval", "if", "active_interval", "else", "self", ".", "_t_interval", "\n", "interval", "=", "torch", ".", "tensor", "(", "interval", ",", "dtype", "=", "kappa", ".", "dtype", ",", "device", "=", "kappa", ".", "device", ")", "\n", "\n", "R", "=", "(", "kappa", ">=", "interval", "[", ":", ",", "0", "]", ")", "&", "(", "kappa", "<=", "interval", "[", ":", ",", "1", "]", ")", "\n", "R_joint", "=", "(", "torch", ".", "sum", "(", "torch", ".", "all", "(", "R", ",", "1", ")", ")", "/", "kappa", ".", "shape", "[", "0", "]", ")", ".", "item", "(", ")", "\n", "R_single", "=", "torch", ".", "sum", "(", "torch", ".", "all", "(", "R", ",", "1", ")", ",", "0", ")", "/", "kappa", ".", "shape", "[", "0", "]", "\n", "\n", "if", "return_individual", ":", "\n", "            ", "return", "R_single", ".", "item", "(", ")", ",", "R_joint", "\n", "", "else", ":", "\n", "            ", "return", "R_single", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.TemperedIntervalManager.__repr__": [[1732, 1747], ["range"], "methods", ["None"], ["", "", "def", "__repr__", "(", "self", ")", ":", "\n", "\n", "        ", "if", "self", ".", "_i_interval", "is", "None", ":", "\n", "            ", "return", "\"Uninitialized Interval Manager\"", "\n", "\n", "", "s", "=", "\"Target | Active (alpha={:.2f}) \\n\"", ".", "format", "(", "self", ".", "_alpha", ")", "\n", "for", "n", "in", "range", "(", "self", ".", "dim", ")", ":", "\n", "            ", "s", "+=", "\"[{:.2f} , {:.2f}] || [{:.2f} , {:.2f}] \\n\"", ".", "format", "(", "\n", "self", ".", "_t_interval", "[", "n", ",", "0", "]", ",", "\n", "self", ".", "_t_interval", "[", "n", ",", "1", "]", ",", "\n", "self", ".", "_a_interval", "[", "n", ",", "0", "]", ",", "\n", "self", ".", "_a_interval", "[", "n", ",", "1", "]", ",", "\n", ")", "\n", "\n", "", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.ESS": [[1749, 1767], ["len", "isinstance", "numpy.log", "numpy.max", "numpy.sum", "numpy.sum", "numpy.exp", "numpy.exp", "numpy.max"], "function", ["home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.PhiState.max", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.PhiState.max"], ["", "", "def", "ESS", "(", "logw", ":", "np", ".", "ndarray", ")", "->", "float", ":", "\n", "\n", "    ", "assert", "(", "\n", "isinstance", "(", "logw", ",", "np", ".", "ndarray", ")", "and", "logw", ".", "ndim", "==", "1", "\n", ")", ",", "\"logw needs to be one-dimensional numpy array\"", "\n", "\n", "logw", "=", "logw", "-", "(", "np", ".", "log", "(", "np", ".", "sum", "(", "np", ".", "exp", "(", "logw", "-", "np", ".", "max", "(", "logw", ")", ")", ")", ")", "+", "np", ".", "max", "(", "logw", ")", ")", "\n", "\n", "n_samples", "=", "len", "(", "logw", ")", "\n", "ess", "=", "(", "1", "/", "n_samples", ")", "*", "(", "1", "/", "np", ".", "sum", "(", "np", ".", "exp", "(", "2", "*", "logw", ")", ")", ")", "\n", "\n", "# dirty way to deal with edge case", "\n", "if", "ess", ">", "1", "and", "ess", "<", "1.00001", ":", "\n", "        ", "ess", "=", "1", "\n", "\n", "", "assert", "0", "<=", "ess", "<=", "1", ",", "\"Effective Sample Size outside of admissible bounds\"", "\n", "\n", "return", "ess", "\n", "", ""]], "home.repos.pwc.inspect_result.bdevl_SMO.run.study.create_surrgate": [[18, 20], ["factory.discriminative"], "function", ["home.repos.pwc.inspect_result.bdevl_SMO.SMO.factories.Multiphysics64.discriminative"], ["def", "create_surrgate", "(", "factory", ")", ":", "\n", "    ", "return", "factory", ".", "discriminative", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.run.study.setup": [[22, 98], ["time.time", "SMO.factories.CaseFactory.FromIdentifier", "CaseFactory.FromIdentifier.rf", "rf.set_phi", "CaseFactory.FromIdentifier.dtransform", "CaseFactory.FromIdentifier.data", "study.create_surrgate", "SMO.optimization.objectives.WrapperModel().to", "WrapperModel().to.eval", "copy.deepcopy", "copy.deepcopy", "WrapperModel().to.autotrain", "SMO.optimization.active.setup_active_learner", "SMO.optimization.em.ExpectationMaximization", "copy.deepcopy", "torch.no_grad", "factory.dtransform.", "factory.dtransform.", "CaseFactory.FromIdentifier.objective", "objective_fct", "WrapperModel().to.autotrain", "SMO.optimization.objectives.WrapperModel", "CaseFactory.FromIdentifier.hmg", "CaseFactory.FromIdentifier.htransform"], "function", ["home.repos.pwc.inspect_result.bdevl_SMO.SMO.factories.CaseFactory.FromIdentifier", "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.AbstractObjective.rf", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.set_phi", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.factories.CaseFactory.dtransform", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.factories.CaseFactory.data", "home.repos.pwc.inspect_result.bdevl_SMO.run.study.create_surrgate", "home.repos.pwc.inspect_result.bdevl_SMO.optimization.inference.LowRankVariationalInference.to", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.Kernel.eval", "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.WrapperModel.autotrain", "home.repos.pwc.inspect_result.bdevl_SMO.optimization.active.setup_active_learner", "home.repos.pwc.inspect_result.bdevl_SMO.optimization.em.ExpectationMaximization.objective", "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.WrapperModel.autotrain", "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.WrapperModel.hmg", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.factories.Multiphysics32.htransform"], ["", "def", "setup", "(", "\n", "identifier", ",", "n_data", ",", "fargs", ",", "cargs", ",", "targs", ",", "init", ",", "train", "=", "True", ",", "objective_fct", "=", "None", "\n", ")", ":", "\n", "\n", "    ", "T1", "=", "time", ".", "time", "(", ")", "\n", "\n", "factory", "=", "CaseFactory", ".", "FromIdentifier", "(", "identifier", ",", "fargs", ")", "\n", "rf", ",", "rfp", "=", "factory", ".", "rf", "(", ")", "\n", "rf", ".", "set_phi", "(", "deepcopy", "(", "init", "[", "\"phi\"", "]", ")", ")", "\n", "dtype", "=", "factory", ".", "dtype", "\n", "device", "=", "factory", ".", "device", "\n", "dtransform", "=", "factory", ".", "dtransform", "(", ")", "\n", "\n", "data_tr", ",", "data_val", "=", "factory", ".", "data", "(", "\n", "N_training", "=", "n_data", ",", "\n", "N_validation", "=", "cargs", "[", "\"N_validation\"", "]", ",", "\n", "permute_returned_data", "=", "True", ",", "\n", "permutation_tr", "=", "init", "[", "\"permutation_tr\"", "]", ",", "\n", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "data_tr", "[", "\"X_cnn\"", "]", "=", "dtransform", "(", "data_tr", "[", "\"X_g\"", "]", ")", "\n", "data_val", "[", "\"X_cnn\"", "]", "=", "dtransform", "(", "data_val", "[", "\"X_g\"", "]", ")", "\n", "\n", "", "surrogate", "=", "create_surrgate", "(", "factory", ")", "\n", "wmodel", "=", "WrapperModel", "(", "\n", "surrogate", ",", "\n", "rf", ",", "\n", "rfp", ",", "\n", "dtransform", ",", "\n", "target", "=", "factory", ".", "target", ",", "\n", "hmg", "=", "factory", ".", "hmg", "(", ")", ",", "\n", "htransform", "=", "factory", ".", "htransform", "(", ")", ",", "\n", ")", ".", "to", "(", "dtype", "=", "dtype", ",", "device", "=", "device", ")", "\n", "wmodel", ".", "eval", "(", ")", "\n", "\n", "training_params", "=", "deepcopy", "(", "targs", ")", "\n", "training_params", "[", "\"init_dict\"", "]", "=", "deepcopy", "(", "init", "[", "\"surrogate_params\"", "]", ")", "\n", "training_params", "[", "\"data_val\"", "]", "=", "data_val", "\n", "wmodel", ".", "autotrain", "(", "training_params", ")", "\n", "\n", "if", "objective_fct", "is", "None", ":", "\n", "        ", "objective", "=", "factory", ".", "objective", "(", "wmodel", ",", "cargs", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ")", "\n", "", "else", ":", "\n", "        ", "objective", "=", "objective_fct", "(", "wmodel", ",", "cargs", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ")", "\n", "\n", "", "active", ",", "dhandler", "=", "setup_active_learner", "(", "\n", "factory", ",", "\n", "data_tr", ",", "\n", "data_val", ",", "\n", "wmodel", ",", "\n", "objective", ",", "\n", "cargs", "[", "\"N_data_acquisitions\"", "]", ",", "\n", "cargs", "[", "\"N_add\"", "]", ",", "\n", "cargs", "[", "\"N_candidates\"", "]", ",", "\n", "learning_strategy", "=", "cargs", "[", "\"active_strategy\"", "]", ",", "\n", ")", "\n", "em", "=", "ExpectationMaximization", "(", "objective", ")", "\n", "\n", "if", "train", ":", "\n", "        ", "trainer", "=", "wmodel", ".", "autotrain", "(", ")", "\n", "", "else", ":", "\n", "        ", "trainer", "=", "None", "\n", "\n", "", "return", "(", "\n", "factory", ",", "\n", "rf", ",", "\n", "em", ",", "\n", "wmodel", ",", "\n", "trainer", ",", "\n", "objective", ",", "\n", "active", ",", "\n", "dhandler", ",", "\n", "T1", ",", "\n", "dtype", ",", "\n", "device", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.run.study.study_active": [[101, 146], ["print", "SMO.analysis.Log", "SMO.utils.data_to_be_used", "copy.deepcopy", "copy.deepcopy", "study.setup", "time.time", "SMO.optimization.em.AdaptiveConvergenceCriteria", "em.run_active_learning", "time.time", "dhandler.export", "SMO.analysis.Log.touch", "SMO.analysis.Log.save"], "function", ["home.repos.pwc.inspect_result.bdevl_SMO.SMO.utils.data_to_be_used", "home.repos.pwc.inspect_result.bdevl_SMO.run.study.setup", "home.repos.pwc.inspect_result.bdevl_SMO.optimization.em.ExpectationMaximization.run_active_learning", "home.repos.pwc.inspect_result.bdevl_SMO.optimization.active.DataHandler.export", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.Log.touch", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.Log.save"], ["", "def", "study_active", "(", "identifier", ",", "folder", ",", "iteration", ",", "fargs", ",", "cargs", ",", "targs", ",", "init", ",", "descriptor", ")", ":", "\n", "\n", "    ", "print", "(", "\"======================= ACTIVE LEARNING =============================\"", ")", "\n", "\n", "log", "=", "Log", "(", "identifier", ",", "descriptor", ")", "\n", "log", ".", "data", "[", "\"N_training_sequence\"", "]", "=", "data_to_be_used", "(", "cargs", ")", "\n", "log", ".", "data", "[", "\"shared_uuid\"", "]", "=", "deepcopy", "(", "init", "[", "\"shared_uuid\"", "]", ")", "\n", "log", ".", "data", "[", "\"phi0\"", "]", "=", "deepcopy", "(", "init", "[", "\"phi\"", "]", ")", "\n", "\n", "(", "\n", "factory", ",", "\n", "rf", ",", "\n", "em", ",", "\n", "wmodel", ",", "\n", "trainer", ",", "\n", "objective", ",", "\n", "active", ",", "\n", "dhandler", ",", "\n", "T1", ",", "\n", "dtype", ",", "\n", "device", ",", "\n", ")", "=", "setup", "(", "identifier", ",", "cargs", "[", "\"N_training_init\"", "]", ",", "fargs", ",", "cargs", ",", "targs", ",", "init", ")", "\n", "\n", "t1", "=", "time", ".", "time", "(", ")", "\n", "ConvergenceCriteria", "=", "AdaptiveConvergenceCriteria", "(", "\n", "patience", "=", "cargs", "[", "\"patience\"", "]", ",", "\n", "num_max_steps", "=", "cargs", "[", "\"N_em_max_steps\"", "]", ",", "\n", "cooldown", "=", "cargs", "[", "\"cooldown\"", "]", ",", "\n", "verbose", "=", "True", ",", "\n", ")", "\n", "elbos", "=", "em", ".", "run_active_learning", "(", "\n", "ConvergenceCriteria", ",", "\n", "active", ",", "\n", "N_elbo_estimate", "=", "cargs", "[", "\"N_monte_carlo_elbo\"", "]", ",", "\n", "N_objective_estimate", "=", "cargs", "[", "\"N_objective_fct_monte_carlo\"", "]", ",", "\n", "callback", "=", "None", ",", "\n", "log", "=", "log", ",", "\n", "M_steps", "=", "cargs", "[", "\"M_steps\"", "]", ",", "\n", ")", "\n", "t2", "=", "time", ".", "time", "(", ")", "\n", "\n", "log", ".", "data", "[", "\"trainingdata\"", "]", "=", "dhandler", ".", "export", "(", "clone", "=", "True", ")", "\n", "log", ".", "data", "[", "\"dargs\"", "]", "=", "wmodel", ".", "_discriminative", ".", "options", "\n", "log", ".", "touch", "(", ")", "\n", "log", ".", "save", "(", "folder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.run.study.study_baseline": [[148, 219], ["print", "SMO.analysis.Log", "copy.deepcopy", "copy.deepcopy", "print", "SMO.analysis.Log.touch", "SMO.analysis.Log.save", "SMO.analysis.Log.add_state", "study.setup", "SMO.optimization.em.AdaptiveConvergenceCriteria", "em.run", "active._homogenize", "objective.assess", "time.time", "log.add_state.inform", "kappa_sample_base.detach().cpu", "max", "torch.randn", "range", "kappa_sample_base.detach"], "function", ["home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.Log.touch", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.Log.save", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.Log.add_state", "home.repos.pwc.inspect_result.bdevl_SMO.run.study.setup", "home.repos.pwc.inspect_result.bdevl_SMO.optimization.em.ExpectationMaximization.run", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.homogenization.LinearHomogenizer._homogenize", "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.AbstractObjective.assess", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.State.inform", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.PhiState.max"], ["", "def", "study_baseline", "(", "\n", "identifier", ",", "folder", ",", "iteration", ",", "fargs", ",", "cargs", ",", "targs", ",", "init", ",", "descriptor", "\n", ")", ":", "\n", "\n", "    ", "print", "(", "\"======================= BASELINE =============================\"", ")", "\n", "\n", "if", "\"N_training_baseline\"", "in", "cargs", "and", "cargs", "[", "\"N_training_baseline\"", "]", ":", "\n", "        ", "N_training", "=", "cargs", "[", "\"N_training_baseline\"", "]", "\n", "", "else", ":", "\n", "        ", "N_training", "=", "[", "\n", "cargs", "[", "\"N_training_init\"", "]", "+", "n", "*", "cargs", "[", "\"N_add\"", "]", "\n", "for", "n", "in", "range", "(", "cargs", "[", "\"N_data_acquisitions\"", "]", "+", "1", ")", "\n", "]", "\n", "\n", "", "log", "=", "Log", "(", "identifier", ",", "descriptor", ")", "\n", "log", ".", "data", "[", "\"N_training_sequence\"", "]", "=", "N_training", "\n", "log", ".", "data", "[", "\"shared_uuid\"", "]", "=", "deepcopy", "(", "init", "[", "\"shared_uuid\"", "]", ")", "\n", "log", ".", "data", "[", "\"phi0\"", "]", "=", "deepcopy", "(", "init", "[", "\"phi\"", "]", ")", "\n", "\n", "print", "(", "\"Data sequence used: {}\"", ".", "format", "(", "N_training", ")", ")", "\n", "\n", "for", "n_data", "in", "N_training", ":", "\n", "\n", "        ", "state", "=", "log", ".", "add_state", "(", "n_data", ")", "\n", "(", "\n", "factory", ",", "\n", "rf", ",", "\n", "em", ",", "\n", "wmodel", ",", "\n", "trainer", ",", "\n", "objective", ",", "\n", "active", ",", "\n", "dhandler", ",", "\n", "T1", ",", "\n", "dtype", ",", "\n", "device", ",", "\n", ")", "=", "setup", "(", "identifier", ",", "n_data", ",", "fargs", ",", "cargs", ",", "targs", ",", "init", ")", "\n", "assert", "(", "\n", "max", "(", "N_training", ")", "<=", "factory", ".", "N_training_available", "\n", ")", ",", "\"The precomputed data cannot satisfy the request\"", "\n", "\n", "ConvergenceCriteria", "=", "AdaptiveConvergenceCriteria", "(", "\n", "patience", "=", "cargs", "[", "\"patience\"", "]", ",", "\n", "num_max_steps", "=", "cargs", "[", "\"N_em_max_steps\"", "]", ",", "\n", "cooldown", "=", "cargs", "[", "\"cooldown\"", "]", ",", "\n", "verbose", "=", "True", ",", "\n", ")", "\n", "elbos", "=", "em", ".", "run", "(", "\n", "ConvergenceCriteria", ",", "\n", "N_elbo_estimate", "=", "cargs", "[", "\"N_monte_carlo_elbo\"", "]", ",", "\n", "M_steps", "=", "cargs", "[", "\"M_steps\"", "]", ",", "\n", ")", "\n", "_", ",", "_", ",", "kappa_sample_base", "=", "active", ".", "_homogenize", "(", "\n", "torch", ".", "randn", "(", "\n", "cargs", "[", "\"N_objective_fct_monte_carlo\"", "]", ",", "\n", "rf", ".", "kernel", ".", "dim_phase_angles", ",", "\n", "dtype", "=", "dtype", ",", "\n", "device", "=", "device", ",", "\n", ")", "\n", ")", "\n", "oval_base", "=", "objective", ".", "assess", "(", "kappa_sample_base", ")", "\n", "\n", "T2", "=", "time", ".", "time", "(", ")", "\n", "\n", "state", ".", "inform", "(", "em", ",", "active", "=", "None", ")", "\n", "state", "[", "\"objective\"", "]", "=", "oval_base", "\n", "state", ".", "_kappa_samples_ref", "=", "kappa_sample_base", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "\n", "", "log", ".", "data", "[", "\"dargs\"", "]", "=", "wmodel", ".", "_discriminative", ".", "options", "\n", "log", ".", "touch", "(", ")", "\n", "log", ".", "save", "(", "folder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.run.study.make_init": [[221, 234], ["isinstance", "dict", "numpy.random.normal", "copy.deepcopy", "torch.randperm().to", "str", "factory.discriminative().state", "uuid.uuid4", "torch.randperm", "factory.discriminative"], "function", ["home.repos.pwc.inspect_result.bdevl_SMO.optimization.inference.LowRankVariationalInference.to", "home.repos.pwc.inspect_result.bdevl_SMO.optimization.objectives.WrapperModel.state", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.factories.Multiphysics64.discriminative"], ["", "def", "make_init", "(", "factory", ",", "device", ",", "dtype", "=", "None", ")", ":", "\n", "\n", "    ", "assert", "isinstance", "(", "device", ",", "torch", ".", "device", ")", "\n", "\n", "init", "=", "dict", "(", ")", "\n", "init", "[", "\"phi\"", "]", "=", "np", ".", "random", ".", "normal", "(", "0", ",", "1", ",", "factory", ".", "pdim", ")", "\n", "init", "[", "\"surrogate_params\"", "]", "=", "deepcopy", "(", "factory", ".", "discriminative", "(", ")", ".", "state", "(", ")", ")", "#", "\n", "init", "[", "\"permutation_tr\"", "]", "=", "torch", ".", "randperm", "(", "factory", ".", "N_training_available", ")", ".", "to", "(", "\n", "device", "=", "device", "\n", ")", "\n", "init", "[", "\"shared_uuid\"", "]", "=", "str", "(", "uuid", ".", "uuid4", "(", ")", ")", "\n", "\n", "return", "init", "\n", "", ""]], "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.fawkes.UnitMeshHelper.__init__": [[5, 49], ["mesh.geometric_dimension", "fenics.FunctionSpace", "fenics.FunctionSpace", "fenics.TensorFunctionSpace"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "mesh", ",", "V", "=", "None", ",", "Vc", "=", "None", ",", "pDegree", "=", "None", ",", "isotropic", "=", "None", ")", ":", "\n", "\n", "        ", "assert", "mesh", ".", "geometric_dimension", "(", ")", "in", "[", "\n", "1", ",", "\n", "2", ",", "\n", "]", ",", "\"Can only deal with 1-D or 2-D meshes\"", "\n", "self", ".", "_mesh", "=", "mesh", "\n", "\n", "if", "V", "is", "None", ":", "\n", "            ", "assert", "pDegree", "is", "not", "None", "and", "pDegree", "in", "[", "\n", "1", ",", "\n", "2", ",", "\n", "3", ",", "\n", "4", ",", "\n", "5", ",", "\n", "6", ",", "\n", "7", ",", "\n", "8", ",", "\n", "9", ",", "\n", "10", ",", "\n", "]", ",", "\"polynomial degree does not comply\"", "\n", "self", ".", "_V", "=", "df", ".", "FunctionSpace", "(", "mesh", ",", "\"CG\"", ",", "pDegree", ")", "\n", "", "else", ":", "\n", "            ", "assert", "pDegree", "is", "None", ",", "\"cannot specify pDegree if V has been passed\"", "\n", "self", ".", "_V", "=", "V", "\n", "\n", "", "if", "Vc", "is", "None", ":", "\n", "            ", "assert", "(", "\n", "isotropic", "is", "not", "None", "\n", ")", ",", "\"If Vc is not given, need to specify whether isotropic or not\"", "\n", "if", "isotropic", ":", "\n", "                ", "self", ".", "_Vc", "=", "df", ".", "FunctionSpace", "(", "mesh", ",", "\"DG\"", ",", "0", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "_Vc", "=", "df", ".", "TensorFunctionSpace", "(", "mesh", ",", "\"DG\"", ",", "0", ",", "symmetry", "=", "True", ")", "\n", "", "", "else", ":", "\n", "            ", "assert", "(", "\n", "isotropic", "is", "None", "\n", ")", ",", "\"cannot specify isotropic or anisotropic behaviour if Vc is passed explicitly\"", "\n", "self", ".", "_Vc", "=", "Vc", "\n", "\n", "", "self", ".", "boundaries", "=", "None", "\n", "self", ".", "dx", "=", "None", "\n", "self", ".", "ds", "=", "None", "\n", "self", ".", "_has_been_setup", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.fawkes.UnitMeshHelper.__call__": [[50, 65], ["fawkes.UnitMeshHelper._mesh.mpi_comm", "fawkes.UnitMeshHelper._mesh.geometric_dimension", "fawkes.UnitMeshHelper._setup_1D", "fawkes.UnitMeshHelper._mesh.geometric_dimension", "fawkes.UnitMeshHelper._setup_2D"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.microstructure.fawkes.UnitMeshHelper._setup_1D", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.fawkes.UnitMeshHelper._setup_2D"], ["", "def", "__call__", "(", "self", ",", "comm", "=", "None", ")", ":", "\n", "\n", "        ", "assert", "not", "self", ".", "_has_been_setup", ",", "\"Cannot call the UnitMeshHelper a second time.\"", "\n", "\n", "if", "comm", "is", "None", ":", "\n", "            ", "comm", "=", "self", ".", "_mesh", ".", "mpi_comm", "(", ")", "\n", "\n", "", "if", "self", ".", "_mesh", ".", "geometric_dimension", "(", ")", "==", "1", ":", "\n", "            ", "return", "self", ".", "_setup_1D", "(", "comm", ")", "\n", "", "elif", "self", ".", "_mesh", ".", "geometric_dimension", "(", ")", "==", "2", ":", "\n", "            ", "return", "self", ".", "_setup_2D", "(", "comm", ")", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "\n", "\n", "", "self", ".", "_has_been_setup", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.fawkes.UnitMeshHelper._setup_2D": [[66, 102], ["dict", "fenics.CompiledSubDomain", "fenics.CompiledSubDomain", "fenics.CompiledSubDomain", "fenics.CompiledSubDomain", "fenics.MeshFunction", "fenics.MeshFunction.set_all", "fenics.MeshFunction", "boundaries[].mark", "boundaries[].mark", "boundaries[].mark", "boundaries[].mark", "fenics.Measure", "fenics.Measure", "fawkes.UnitMeshHelper._mesh.topology().dim", "fawkes.UnitMeshHelper._mesh.topology().dim", "fawkes.UnitMeshHelper._mesh.topology", "fawkes.UnitMeshHelper._mesh.topology"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.Kernel.dim", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.Kernel.dim"], ["", "def", "_setup_2D", "(", "self", ",", "comm", ")", ":", "\n", "\n", "        ", "boundaries", "=", "dict", "(", ")", "\n", "boundaries", "[", "\"left\"", "]", "=", "df", ".", "CompiledSubDomain", "(", "\n", "\"near(x[0], 0.0) && on_boundary\"", ",", "mpi_comm", "=", "comm", "\n", ")", "\n", "boundaries", "[", "\"bottom\"", "]", "=", "df", ".", "CompiledSubDomain", "(", "\n", "\"near(x[1], 0.0) && on_boundary\"", ",", "mpi_comm", "=", "comm", "\n", ")", "\n", "boundaries", "[", "\"top\"", "]", "=", "df", ".", "CompiledSubDomain", "(", "\n", "\"near(x[1], 1.0) && on_boundary\"", ",", "mpi_comm", "=", "comm", "\n", ")", "\n", "boundaries", "[", "\"right\"", "]", "=", "df", ".", "CompiledSubDomain", "(", "\n", "\"near(x[0], 1.0) && on_boundary\"", ",", "mpi_comm", "=", "comm", "\n", ")", "\n", "\n", "boundarymarkers", "=", "df", ".", "MeshFunction", "(", "\n", "\"size_t\"", ",", "self", ".", "_mesh", ",", "self", ".", "_mesh", ".", "topology", "(", ")", ".", "dim", "(", ")", "-", "1", ",", "0", "\n", ")", "\n", "boundarymarkers", ".", "set_all", "(", "0", ")", "\n", "domainmarkers", "=", "df", ".", "MeshFunction", "(", "\n", "\"size_t\"", ",", "self", ".", "_mesh", ",", "self", ".", "_mesh", ".", "topology", "(", ")", ".", "dim", "(", ")", ",", "0", "\n", ")", "\n", "\n", "boundaries", "[", "\"left\"", "]", ".", "mark", "(", "boundarymarkers", ",", "1", ")", "\n", "boundaries", "[", "\"bottom\"", "]", ".", "mark", "(", "boundarymarkers", ",", "2", ")", "\n", "boundaries", "[", "\"right\"", "]", ".", "mark", "(", "boundarymarkers", ",", "3", ")", "\n", "boundaries", "[", "\"top\"", "]", ".", "mark", "(", "boundarymarkers", ",", "4", ")", "\n", "\n", "ds", "=", "df", ".", "Measure", "(", "\"ds\"", ",", "domain", "=", "self", ".", "_mesh", ",", "subdomain_data", "=", "boundarymarkers", ")", "\n", "dx", "=", "df", ".", "Measure", "(", "\"dx\"", ",", "domain", "=", "self", ".", "_mesh", ",", "subdomain_data", "=", "domainmarkers", ")", "\n", "\n", "self", ".", "dx", "=", "dx", "\n", "self", ".", "ds", "=", "ds", "\n", "\n", "return", "boundaries", ",", "boundarymarkers", ",", "domainmarkers", ",", "dx", ",", "ds", ",", "self", ".", "_V", ",", "self", ".", "_Vc", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.fawkes.UnitMeshHelper._setup_1D": [[103, 128], ["dict", "fenics.CompiledSubDomain", "fenics.CompiledSubDomain", "fenics.MeshFunction", "fenics.MeshFunction.set_all", "fenics.MeshFunction", "boundaries[].mark", "boundaries[].mark", "fenics.Measure", "fenics.Measure", "fawkes.UnitMeshHelper._mesh.topology().dim", "fawkes.UnitMeshHelper._mesh.topology().dim", "fawkes.UnitMeshHelper._mesh.topology", "fawkes.UnitMeshHelper._mesh.topology"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.Kernel.dim", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.Kernel.dim"], ["", "def", "_setup_1D", "(", "self", ",", "comm", ")", ":", "\n", "\n", "        ", "boundaries", "=", "dict", "(", ")", "\n", "boundaries", "[", "\"left\"", "]", "=", "df", ".", "CompiledSubDomain", "(", "\n", "\"near(x[0], 0.0) && on_boundary\"", ",", "mpi_comm", "=", "comm", "\n", ")", "\n", "boundaries", "[", "\"right\"", "]", "=", "df", ".", "CompiledSubDomain", "(", "\n", "\"near(x[0], 1.0) && on_boundary\"", ",", "mpi_comm", "=", "comm", "\n", ")", "\n", "\n", "boundarymarkers", "=", "df", ".", "MeshFunction", "(", "\n", "\"size_t\"", ",", "self", ".", "_mesh", ",", "self", ".", "_mesh", ".", "topology", "(", ")", ".", "dim", "(", ")", "-", "1", ",", "0", "\n", ")", "\n", "boundarymarkers", ".", "set_all", "(", "0", ")", "\n", "domainmarkers", "=", "df", ".", "MeshFunction", "(", "\n", "\"size_t\"", ",", "self", ".", "_mesh", ",", "self", ".", "_mesh", ".", "topology", "(", ")", ".", "dim", "(", ")", ",", "0", "\n", ")", "\n", "\n", "boundaries", "[", "\"left\"", "]", ".", "mark", "(", "boundarymarkers", ",", "1", ")", "\n", "boundaries", "[", "\"right\"", "]", ".", "mark", "(", "boundarymarkers", ",", "2", ")", "\n", "\n", "ds", "=", "df", ".", "Measure", "(", "\"ds\"", ",", "domain", "=", "self", ".", "_mesh", ",", "subdomain_data", "=", "boundarymarkers", ")", "\n", "dx", "=", "df", ".", "Measure", "(", "\"dx\"", ",", "domain", "=", "self", ".", "_mesh", ",", "subdomain_data", "=", "domainmarkers", ")", "\n", "\n", "return", "boundaries", ",", "boundarymarkers", ",", "domainmarkers", ",", "dx", ",", "ds", ",", "self", ".", "_V", ",", "self", ".", "_Vc", "\n", "", "", ""]], "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.homogenization.PoissonHomogenizer.__init__": [[39, 75], ["SMO.microstructure.fawkes.UnitMeshHelper", "SMO.microstructure.fawkes.UnitMeshHelper.", "set", "tuple", "Vc.mesh", "dolfin.Function", "homogenization.PoissonHomogenizer._setup", "Vc.mesh().geometric_dimension", "Vc.dolfin_element().signature", "Vc.mesh", "isinstance", "isinstance", "set().issubset", "Vc.mesh", "Vc.dolfin_element", "set"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.None.genutils.StateVariable.set", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.homogenization.PoissonHomogenizer.mesh", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField._setup", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.homogenization.PoissonHomogenizer.mesh", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.homogenization.PoissonHomogenizer.mesh", "home.repos.pwc.inspect_result.bdevl_SMO.None.genutils.StateVariable.set"], ["    ", "def", "__init__", "(", "\n", "self", ",", "Vc", ",", "V", "=", "None", ",", "htype", "=", "(", "\"xx\"", ",", "\"xy\"", ",", "\"yy\"", ")", ",", "pDegree", "=", "2", ",", "integration_type", "=", "\"volume\"", "\n", ")", ":", "\n", "\n", "        ", "assert", "integration_type", "in", "[", "\"boundary\"", ",", "\"volume\"", "]", "\n", "assert", "pDegree", "in", "[", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", "]", "\n", "assert", "(", "\n", "Vc", ".", "mesh", "(", ")", ".", "geometric_dimension", "(", ")", "==", "2", "\n", ")", ",", "\"PoissonHomogenizer currently can only deal with 2D meshes\"", "\n", "assert", "(", "\n", "Vc", ".", "dolfin_element", "(", ")", ".", "signature", "(", ")", "\n", "==", "\"FiniteElement('Discontinuous Lagrange', triangle, 0)\"", "\n", ")", "\n", "\n", "helper", "=", "UnitMeshHelper", "(", "Vc", ".", "mesh", "(", ")", ",", "Vc", "=", "Vc", ",", "V", "=", "V", ",", "pDegree", "=", "pDegree", ")", "\n", "boundaries", ",", "boundarymarkers", ",", "domainmarkers", ",", "dx", ",", "ds", ",", "V", ",", "Vc", "=", "helper", "(", ")", "\n", "\n", "admissible", "=", "set", "(", "(", "\"xx\"", ",", "\"xy\"", ",", "\"yy\"", ")", ")", "\n", "self", ".", "_admissible", "=", "tuple", "(", "admissible", ")", "\n", "assert", "isinstance", "(", "htype", ",", "str", ")", "or", "isinstance", "(", "htype", ",", "tuple", ")", "\n", "assert", "htype", "in", "admissible", "or", "set", "(", "htype", ")", ".", "issubset", "(", "admissible", ")", "\n", "self", ".", "_htype", "=", "htype", "\n", "\n", "self", ".", "_V", "=", "V", "\n", "self", ".", "_Vc", "=", "Vc", "\n", "self", ".", "_mesh", "=", "Vc", ".", "mesh", "(", ")", "\n", "self", ".", "_dx", "=", "dx", "\n", "self", ".", "_ds", "=", "ds", "\n", "self", ".", "_alpha", "=", "df", ".", "Function", "(", "self", ".", "_Vc", ")", "\n", "self", ".", "_boundaries", "=", "boundaries", "\n", "self", ".", "_a", "=", "None", "\n", "self", ".", "_L", "=", "None", "\n", "self", ".", "_pDegree", "=", "pDegree", "\n", "self", ".", "_integration_type", "=", "integration_type", "\n", "self", ".", "_pixelconverter", "=", "None", "\n", "self", ".", "_setup", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.homogenization.PoissonHomogenizer.admissible": [[76, 79], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "admissible", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_admissible", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.homogenization.PoissonHomogenizer.FromImageResolution": [[80, 90], ["dolfin.UnitSquareMesh", "dolfin.FunctionSpace", "cls", "fawkes.converter.DiscontinuousGalerkinPixelConverter", "fawkes.converter.DiscontinuousGalerkinPixelConverter.assemble"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.fawkes.converter.DiscontinuousGalerkinPixelConverter.assemble"], ["", "@", "classmethod", "\n", "def", "FromImageResolution", "(", "cls", ",", "N", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "mesh", "=", "df", ".", "UnitSquareMesh", "(", "df", ".", "MPI", ".", "comm_self", ",", "N", ",", "N", ")", "\n", "Vc", "=", "df", ".", "FunctionSpace", "(", "mesh", ",", "\"DG\"", ",", "0", ")", "\n", "hmg", "=", "cls", "(", "Vc", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "converter", "=", "DiscontinuousGalerkinPixelConverter", "(", "Vc", ")", "\n", "converter", ".", "assemble", "(", ")", "\n", "hmg", ".", "_pixelconverter", "=", "converter", "\n", "return", "hmg", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.homogenization.PoissonHomogenizer._setup": [[91, 97], ["dolfin.TrialFunction", "dolfin.TestFunction", "dolfin.inner", "dolfin.grad", "dolfin.Constant", "dolfin.grad"], "methods", ["None"], ["", "def", "_setup", "(", "self", ")", ":", "\n", "\n", "        ", "u", "=", "df", ".", "TrialFunction", "(", "self", ".", "_V", ")", "\n", "v", "=", "df", ".", "TestFunction", "(", "self", ".", "_V", ")", "\n", "self", ".", "_a", "=", "df", ".", "inner", "(", "self", ".", "_alpha", "*", "df", ".", "grad", "(", "u", ")", ",", "df", ".", "grad", "(", "v", ")", ")", "*", "self", ".", "_dx", "\n", "self", ".", "_L", "=", "df", ".", "Constant", "(", "0.0", ")", "*", "v", "*", "self", ".", "_dx", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.homogenization.PoissonHomogenizer.mesh": [[98, 101], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "mesh", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_mesh", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.homogenization.PoissonHomogenizer.gdim": [[102, 105], ["homogenization.PoissonHomogenizer._mesh.geometric_dimension"], "methods", ["None"], ["", "@", "property", "\n", "def", "gdim", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_mesh", ".", "geometric_dimension", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.homogenization.PoissonHomogenizer._set_x": [[106, 111], ["numpy.all", "homogenization.PoissonHomogenizer._alpha.vector", "len", "homogenization.PoissonHomogenizer._Vc.dim"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.Kernel.dim"], ["", "def", "_set_x", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "assert", "x", ".", "ndim", "==", "1", "and", "len", "(", "x", ")", "==", "self", ".", "_Vc", ".", "dim", "(", ")", "\n", "assert", "np", ".", "all", "(", "x", ">", "0", ")", "\n", "self", ".", "_alpha", ".", "vector", "(", ")", "[", ":", "]", "=", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.homogenization.PoissonHomogenizer.FromPhysics": [[112, 115], ["cls"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "FromPhysics", "(", "cls", ",", "physics", ")", ":", "\n", "        ", "return", "cls", "(", "physics", ".", "Vc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.homogenization.PoissonHomogenizer.homogenize_img": [[116, 137], ["homogenization.PoissonHomogenizer._homogenize", "RuntimeError", "homogenization.PoissonHomogenizer.dim", "homogenization.PoissonHomogenizer.unsqueeze_", "isinstance", "isinstance", "torch.tensor", "torch.no_grad", "homogenization.PoissonHomogenizer._pixelconverter.ImageToFunctionBatchedFast", "homogenization.PoissonHomogenizer.squeeze_", "homogenization.PoissonHomogenizer.detach().cpu().numpy", "homogenization.PoissonHomogenizer.dim", "homogenization.PoissonHomogenizer.dim", "homogenization.PoissonHomogenizer.detach().cpu", "homogenization.PoissonHomogenizer.detach"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.microstructure.homogenization.LinearHomogenizer._homogenize", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.Kernel.dim", "home.repos.pwc.inspect_result.bdevl_SMO.fawkes.converter.DiscontinuousGalerkinPixelConverter.ImageToFunctionBatchedFast", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.Kernel.dim", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.Kernel.dim"], ["", "def", "homogenize_img", "(", "self", ",", "X", ",", "*", ",", "AcknowledgeRaw", "=", "False", ")", "->", "Union", "[", "dict", ",", "List", "[", "dict", "]", "]", ":", "\n", "\n", "        ", "if", "self", ".", "_pixelconverter", "is", "None", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"Pixel converter has not been set\"", ")", "\n", "\n", "", "if", "X", ".", "dim", "(", ")", "<", "3", ":", "\n", "            ", "X", ".", "unsqueeze_", "(", "0", ")", "\n", "\n", "", "if", "not", "isinstance", "(", "X", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "assert", "isinstance", "(", "X", ",", "np", ".", "ndarray", ")", "\n", "X", "=", "torch", ".", "tensor", "(", "X", ")", "\n", "", "assert", "(", "X", ".", "dim", "(", ")", "==", "3", "and", "X", ".", "shape", "[", "1", "]", "==", "X", ".", "shape", "[", "2", "]", ")", "or", "(", "\n", "X", ".", "dim", "(", ")", "==", "2", "and", "X", ".", "shape", "[", "0", "]", "==", "X", ".", "shape", "[", "1", "]", "\n", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "X", "=", "self", ".", "_pixelconverter", ".", "ImageToFunctionBatchedFast", "(", "X", ")", "\n", "\n", "", "if", "X", ".", "shape", "[", "0", "]", "==", "1", ":", "\n", "            ", "X", ".", "squeeze_", "(", ")", "\n", "\n", "", "return", "self", ".", "_homogenize", "(", "X", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "AcknowledgeRaw", "=", "AcknowledgeRaw", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.homogenization.PoissonHomogenizer.__call__": [[138, 141], ["homogenization.PoissonHomogenizer._homogenize"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.microstructure.homogenization.LinearHomogenizer._homogenize"], ["", "def", "__call__", "(", "self", ",", "X_raw", ",", "*", ",", "AcknowledgeRaw", "=", "False", ")", ":", "\n", "\n", "        ", "return", "self", ".", "_homogenize", "(", "X_raw", ",", "AcknowledgeRaw", "=", "AcknowledgeRaw", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.homogenization.PoissonHomogenizer._homogenize": [[142, 158], ["isinstance", "RuntimeError", "homogenization.PoissonHomogenizer._solve_load_cases", "list", "list.append", "homogenization.PoissonHomogenizer._Vc.dim", "homogenization.PoissonHomogenizer._solve_load_cases"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.microstructure.homogenization.PoissonHomogenizer._solve_load_cases", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.Log.append", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.Kernel.dim", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.homogenization.PoissonHomogenizer._solve_load_cases"], ["", "def", "_homogenize", "(", "self", ",", "X_raw", ",", "*", ",", "AcknowledgeRaw", "=", "False", ")", "->", "Union", "[", "dict", ",", "List", "[", "dict", "]", "]", ":", "\n", "\n", "        ", "if", "not", "AcknowledgeRaw", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"Please acknowledge that you are passing raw X values\"", ")", "\n", "\n", "", "assert", "isinstance", "(", "X_raw", ",", "np", ".", "ndarray", ")", "\n", "if", "X_raw", ".", "ndim", "==", "1", ":", "\n", "            ", "return", "self", ".", "_solve_load_cases", "(", "X_raw", ")", "\n", "", "else", ":", "\n", "            ", "assert", "X_raw", ".", "shape", "[", "1", "]", "==", "self", ".", "_Vc", ".", "dim", "(", ")", "and", "X_raw", ".", "shape", "[", "0", "]", ">", "1", "\n", "kappas", "=", "list", "(", ")", "\n", "for", "x_raw", "in", "X_raw", ":", "\n", "# consider changing to yield statement", "\n", "                ", "kappas", ".", "append", "(", "self", ".", "_solve_load_cases", "(", "x_raw", ")", ")", "\n", "\n", "", "", "return", "kappas", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.homogenization.PoissonHomogenizer._solve_load_cases": [[159, 198], ["homogenization.PoissonHomogenizer._set_x", "dict", "homogenization.PoissonHomogenizer._mesh.mpi_comm", "dolfin.Expression", "dolfin.CompiledSubDomain", "dolfin.DirichletBC", "dolfin.Function", "dolfin.solve", "dolfin.assemble", "dolfin.assemble", "dolfin.Expression", "dolfin.CompiledSubDomain", "dolfin.DirichletBC", "dolfin.Function", "dolfin.solve", "dolfin.assemble", "RuntimeError", "dolfin.grad", "dolfin.grad"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.microstructure.homogenization.PoissonHomogenizer._set_x", "home.repos.pwc.inspect_result.bdevl_SMO.fawkes.converter.DiscontinuousGalerkinPixelConverter.assemble", "home.repos.pwc.inspect_result.bdevl_SMO.fawkes.converter.DiscontinuousGalerkinPixelConverter.assemble", "home.repos.pwc.inspect_result.bdevl_SMO.fawkes.converter.DiscontinuousGalerkinPixelConverter.assemble"], ["", "def", "_solve_load_cases", "(", "self", ",", "x", ":", "np", ".", "ndarray", ")", "->", "dict", ":", "\n", "\n", "        ", "self", ".", "_set_x", "(", "x", ")", "\n", "kappa", "=", "dict", "(", ")", "\n", "\n", "if", "self", ".", "_integration_type", "==", "\"volume\"", ":", "\n", "\n", "            ", "comm", "=", "self", ".", "_mesh", ".", "mpi_comm", "(", ")", "\n", "\n", "u_boundary", "=", "df", ".", "Expression", "(", "\"x[0]\"", ",", "degree", "=", "1", ",", "mpi_comm", "=", "comm", ")", "\n", "on_boundary", "=", "df", ".", "CompiledSubDomain", "(", "\"on_boundary\"", ",", "mpi_comm", "=", "comm", ")", "\n", "bc", "=", "df", ".", "DirichletBC", "(", "self", ".", "_V", ",", "u_boundary", ",", "on_boundary", ")", "\n", "u0", "=", "df", ".", "Function", "(", "self", ".", "_V", ")", "\n", "df", ".", "solve", "(", "self", ".", "_a", "==", "self", ".", "_L", ",", "u0", ",", "bc", ")", "\n", "\n", "q1", "=", "self", ".", "_alpha", "*", "df", ".", "grad", "(", "u0", ")", "\n", "\n", "form1", "=", "q1", "[", "0", "]", "*", "df", ".", "dx", "\n", "form2", "=", "q1", "[", "1", "]", "*", "df", ".", "dx", "\n", "\n", "kappa", "[", "\"xx\"", "]", "=", "df", ".", "assemble", "(", "form1", ")", "\n", "kappa", "[", "\"xy\"", "]", "=", "df", ".", "assemble", "(", "form2", ")", "\n", "\n", "u_boundary", "=", "df", ".", "Expression", "(", "\"x[1]\"", ",", "degree", "=", "1", ",", "mpi_comm", "=", "comm", ")", "\n", "on_boundary", "=", "df", ".", "CompiledSubDomain", "(", "\"on_boundary\"", ",", "mpi_comm", "=", "comm", ")", "\n", "bc", "=", "df", ".", "DirichletBC", "(", "self", ".", "_V", ",", "u_boundary", ",", "on_boundary", ")", "\n", "u0", "=", "df", ".", "Function", "(", "self", ".", "_V", ")", "\n", "df", ".", "solve", "(", "self", ".", "_a", "==", "self", ".", "_L", ",", "u0", ",", "bc", ")", "\n", "\n", "q1", "=", "self", ".", "_alpha", "*", "df", ".", "grad", "(", "u0", ")", "\n", "form3", "=", "q1", "[", "1", "]", "*", "df", ".", "dx", "\n", "kappa", "[", "\"yy\"", "]", "=", "df", ".", "assemble", "(", "form3", ")", "\n", "\n", "return", "kappa", "\n", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "\n", "'Integration type \"{}\" unknown or deprecated.'", ".", "format", "(", "\n", "self", ".", "_integration_type", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.homogenization.CombinedHomogenizer.__init__": [[203, 220], ["isinstance", "all", "len", "len", "len", "hasattr", "isinstance"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "homogenizers", ",", "properties", ":", "Union", "[", "None", ",", "List", "[", "dict", "]", "]", "=", "None", ")", ":", "\n", "\n", "        ", "assert", "isinstance", "(", "homogenizers", ",", "list", ")", "\n", "assert", "len", "(", "homogenizers", ")", "==", "2", ",", "\"we currently only support two homogenizers\"", "\n", "self", ".", "_homogenizers", "=", "homogenizers", "\n", "\n", "if", "properties", "is", "not", "None", ":", "\n", "            ", "assert", "len", "(", "properties", ")", "==", "len", "(", "homogenizers", ")", "\n", "for", "property", "in", "properties", ":", "\n", "                ", "assert", "(", "\n", "isinstance", "(", "property", ",", "dict", ")", "\n", "and", "\"high\"", "in", "property", "\n", "and", "\"low\"", "in", "property", "\n", ")", "\n", "", "", "self", ".", "_properties", "=", "properties", "\n", "\n", "assert", "all", "(", "[", "hasattr", "(", "homogenizer", ",", "\"admissible\"", ")", "for", "homogenizer", "in", "homogenizers", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.homogenization.CombinedHomogenizer.admissible": [[221, 233], ["set", "tuple", "set", "R.union.union.union", "R.union.union.intersection"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.None.genutils.StateVariable.set", "home.repos.pwc.inspect_result.bdevl_SMO.None.genutils.StateVariable.set"], ["", "@", "property", "\n", "def", "admissible", "(", "self", ")", "->", "tuple", ":", "\n", "\n", "        ", "R", "=", "set", "(", ")", "\n", "for", "homogenizer", "in", "self", ".", "_homogenizers", ":", "\n", "            ", "r", "=", "set", "(", "homogenizer", ".", "admissible", ")", "\n", "assert", "not", "R", ".", "intersection", "(", "\n", "r", "\n", ")", ",", "\"there is a overlap in the admissible type of base homogenizers. we do not want this (for now)\"", "\n", "R", "=", "R", ".", "union", "(", "r", ")", "\n", "\n", "", "return", "tuple", "(", "R", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.homogenization.CombinedHomogenizer.homogenize_img": [[234, 269], ["list", "enumerate", "isinstance", "torch.all", "list.append", "torch.zeros_like", "list.append", "len", "len", "X.unique", "torch.tensor", "hom.homogenize_img", "hom.homogenize_img", "range", "len"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.Log.append", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.Log.append", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.homogenization.LinearHomogenizer.homogenize_img", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.homogenization.LinearHomogenizer.homogenize_img"], ["", "def", "homogenize_img", "(", "\n", "self", ",", "X", ":", "torch", ".", "Tensor", ",", "*", ",", "AcknowledgeRaw", "=", "False", "\n", ")", "->", "Union", "[", "dict", ",", "List", "[", "dict", "]", "]", ":", "\n", "\n", "        ", "results", "=", "list", "(", ")", "\n", "\n", "if", "self", ".", "_properties", "is", "not", "None", ":", "\n", "# inputs have to be a 1/0 mask of phases", "\n", "            ", "assert", "torch", ".", "all", "(", "\n", "X", ".", "unique", "(", "sorted", "=", "True", ")", "\n", "==", "torch", ".", "tensor", "(", "[", "0.0", ",", "1.0", "]", ",", "dtype", "=", "X", ".", "dtype", ",", "device", "=", "X", ".", "device", ")", "\n", ")", ",", "\"the homogenizer needs to be provided with a 1/0 mask of high / low phase properties\"", "\n", "\n", "", "for", "i", ",", "hom", "in", "enumerate", "(", "self", ".", "_homogenizers", ")", ":", "\n", "# returns either a dictionary, or list of dictionaries", "\n", "            ", "if", "self", ".", "_properties", "is", "None", ":", "\n", "                ", "results", ".", "append", "(", "hom", ".", "homogenize_img", "(", "X", ",", "AcknowledgeRaw", "=", "AcknowledgeRaw", ")", ")", "\n", "", "else", ":", "\n", "# deal with different properties for each homogenizer", "\n", "                ", "Xp", "=", "torch", ".", "zeros_like", "(", "X", ")", "\n", "Xp", "[", "X", "==", "1.0", "]", "=", "self", ".", "_properties", "[", "i", "]", "[", "\"high\"", "]", "\n", "Xp", "[", "X", "==", "0.0", "]", "=", "self", ".", "_properties", "[", "i", "]", "[", "\"low\"", "]", "\n", "results", ".", "append", "(", "hom", ".", "homogenize_img", "(", "Xp", ",", "AcknowledgeRaw", "=", "AcknowledgeRaw", ")", ")", "\n", "\n", "", "", "if", "isinstance", "(", "results", "[", "0", "]", ",", "dict", ")", ":", "\n", "            ", "assert", "(", "\n", "len", "(", "results", ")", "==", "2", "\n", ")", ",", "\"current implementation only supports two underlying homogenizers\"", "\n", "return", "{", "**", "results", "[", "0", "]", ",", "**", "results", "[", "1", "]", "}", "\n", "", "else", ":", "\n", "            ", "assert", "(", "\n", "len", "(", "results", ")", "==", "2", "\n", ")", ",", "\"current implementation only supports two underlying homogenizers\"", "\n", "# return list of fused dictionaries", "\n", "return", "[", "{", "**", "results", "[", "0", "]", "[", "n", "]", ",", "**", "results", "[", "1", "]", "[", "n", "]", "}", "for", "n", "in", "range", "(", "len", "(", "results", "[", "0", "]", ")", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.homogenization.LinearHomogenizer.__init__": [[279, 312], ["set", "tuple", "dolfin.FunctionSpace", "dolfin.Function", "dolfin.Function", "numpy.zeros", "dolfin.assemble", "dolfin.assemble", "isinstance", "isinstance", "set().issubset", "dolfin.Constant", "dolfin.Measure", "dolfin.Constant", "dolfin.Measure", "range", "range", "set"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.None.genutils.StateVariable.set", "home.repos.pwc.inspect_result.bdevl_SMO.fawkes.converter.DiscontinuousGalerkinPixelConverter.assemble", "home.repos.pwc.inspect_result.bdevl_SMO.fawkes.converter.DiscontinuousGalerkinPixelConverter.assemble", "home.repos.pwc.inspect_result.bdevl_SMO.None.genutils.StateVariable.set"], ["    ", "def", "__init__", "(", "self", ",", "mesh", ",", "htype", "=", "None", ",", "pDegree", "=", "1", ",", "integration_type", "=", "\"volume\"", ")", ":", "\n", "\n", "        ", "self", ".", "_mesh", "=", "mesh", "\n", "self", ".", "_pDegree", "=", "pDegree", "\n", "self", ".", "_integration_type", "=", "integration_type", "\n", "\n", "admissible", "=", "set", "(", "\n", "[", "\"C{}{}\"", ".", "format", "(", "i", ",", "j", ")", "for", "i", "in", "range", "(", "3", ")", "for", "j", "in", "range", "(", "3", ")", "]", "\n", "+", "[", "\"mu\"", ",", "\"lambda\"", ",", "\"E\"", ",", "\"nu\"", ",", "\"E_avg\"", "]", "\n", ")", "\n", "self", ".", "_admissible", "=", "tuple", "(", "admissible", ")", "\n", "if", "htype", "is", "None", ":", "\n", "            ", "htype", "=", "self", ".", "_admissible", "\n", "", "else", ":", "\n", "            ", "assert", "isinstance", "(", "htype", ",", "str", ")", "or", "isinstance", "(", "htype", ",", "tuple", ")", "\n", "assert", "htype", "in", "admissible", "or", "set", "(", "htype", ")", ".", "issubset", "(", "admissible", ")", "\n", "\n", "", "self", ".", "_htype", "=", "htype", "\n", "self", ".", "_Vc", "=", "df", ".", "FunctionSpace", "(", "mesh", ",", "\"DG\"", ",", "0", ")", "\n", "self", ".", "_mu", "=", "df", ".", "Function", "(", "self", ".", "_Vc", ")", "\n", "self", ".", "_lambda", "=", "df", ".", "Function", "(", "self", ".", "_Vc", ")", "\n", "self", ".", "_u_sol", "=", "None", "\n", "self", ".", "_C_hom", "=", "np", ".", "zeros", "(", "(", "3", ",", "3", ")", ")", "\n", "self", ".", "_mu_hom", "=", "None", "\n", "self", ".", "_lamda_hom", "=", "None", "\n", "self", ".", "_E_hom", "=", "None", "\n", "self", ".", "_nu_hom", "=", "None", "\n", "self", ".", "_E_avg", "=", "None", "\n", "self", ".", "_volume", "=", "df", ".", "assemble", "(", "df", ".", "Constant", "(", "1", ")", "*", "df", ".", "Measure", "(", "\"dx\"", ",", "domain", "=", "self", ".", "_mesh", ")", ")", "\n", "self", ".", "_area", "=", "df", ".", "assemble", "(", "df", ".", "Constant", "(", "1", ")", "*", "df", ".", "Measure", "(", "\"ds\"", ",", "domain", "=", "self", ".", "_mesh", ")", ")", "\n", "self", ".", "_load_case", "=", "None", "\n", "self", ".", "_pixelconverter", "=", "None", "\n", "self", ".", "_nu_default_value", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.homogenization.LinearHomogenizer.admissible": [[313, 316], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "admissible", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_admissible", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.homogenization.LinearHomogenizer.FromImageResolution": [[317, 326], ["dolfin.UnitSquareMesh", "cls", "fawkes.converter.DiscontinuousGalerkinPixelConverter", "fawkes.converter.DiscontinuousGalerkinPixelConverter.assemble"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.fawkes.converter.DiscontinuousGalerkinPixelConverter.assemble"], ["", "@", "classmethod", "\n", "def", "FromImageResolution", "(", "cls", ",", "nx", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "mesh", "=", "df", ".", "UnitSquareMesh", "(", "df", ".", "MPI", ".", "comm_self", ",", "nx", ",", "nx", ")", "\n", "hmg", "=", "cls", "(", "mesh", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "converter", "=", "DiscontinuousGalerkinPixelConverter", "(", "hmg", ".", "_Vc", ")", "\n", "converter", ".", "assemble", "(", ")", "\n", "hmg", ".", "_pixelconverter", "=", "converter", "\n", "return", "hmg", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.homogenization.LinearHomogenizer.Vc": [[327, 330], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "Vc", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_Vc", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.homogenization.LinearHomogenizer.C_hom": [[331, 334], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "C_hom", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_C_hom", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.homogenization.LinearHomogenizer.gdim": [[335, 339], ["homogenization.LinearHomogenizer._mesh.geometric_dimension"], "methods", ["None"], ["", "@", "property", "\n", "def", "gdim", "(", "self", ")", ":", "\n", "\n", "        ", "return", "self", ".", "_mesh", ".", "geometric_dimension", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.homogenization.LinearHomogenizer.set_parameters": [[340, 369], ["isinstance", "homogenization.ConvertToLameParameters", "homogenization.LinearHomogenizer._set_fct_from_object", "homogenization.LinearHomogenizer._set_fct_from_object", "E.min", "E.max", "numpy.zeros", "numpy.abs", "numpy.abs"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.microstructure.homogenization.ConvertToLameParameters", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.homogenization.LinearHomogenizer._set_fct_from_object", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.homogenization.LinearHomogenizer._set_fct_from_object", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.PhiState.min", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.PhiState.max"], ["", "def", "set_parameters", "(", "self", ",", "E", ",", "nu", "=", "None", ",", "high_phase", "=", "None", ",", "low_phase", "=", "None", ")", ":", "\n", "\n", "        ", "if", "nu", "is", "None", ":", "\n", "            ", "assert", "(", "\n", "self", ".", "_nu_default_value", "is", "not", "None", "\n", ")", ",", "\"There is no default value set for nu (and only E has been passed)\"", "\n", "\n", "", "if", "isinstance", "(", "E", ",", "float", ")", ":", "\n", "            ", "Et", "=", "E", "\n", "", "else", ":", "\n", "            ", "assert", "high_phase", "is", "not", "None", "and", "low_phase", "is", "not", "None", "\n", "\n", "e_min", "=", "E", ".", "min", "(", ")", "\n", "e_max", "=", "E", ".", "max", "(", ")", "\n", "\n", "if", "e_min", "!=", "e_max", ":", "\n", "                ", "assert", "e_min", "==", "0", "and", "e_max", "==", "1", "\n", "", "else", ":", "\n", "                ", "assert", "e_min", "==", "0", "or", "e_min", "==", "1", "\n", "\n", "", "T1", "=", "np", ".", "abs", "(", "E", "-", "1", ")", "<", "1e-12", "\n", "T2", "=", "np", ".", "abs", "(", "E", ")", "<", "1e-12", "\n", "Et", "=", "np", ".", "zeros", "(", "E", ".", "shape", ")", "\n", "Et", "[", "T1", "]", "=", "high_phase", "\n", "Et", "[", "T2", "]", "=", "low_phase", "\n", "\n", "", "mu", ",", "lmbda", "=", "ConvertToLameParameters", "(", "Et", ",", "nu", ")", "\n", "self", ".", "_set_fct_from_object", "(", "self", ".", "_mu", ",", "mu", ")", "\n", "self", ".", "_set_fct_from_object", "(", "self", ".", "_lambda", ",", "lmbda", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.homogenization.LinearHomogenizer.set_young_modulus_from_vector": [[370, 379], ["isinstance", "homogenization.ConvertToLameParameters", "homogenization.LinearHomogenizer._set_fct_from_object", "homogenization.LinearHomogenizer._set_fct_from_object"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.microstructure.homogenization.ConvertToLameParameters", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.homogenization.LinearHomogenizer._set_fct_from_object", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.homogenization.LinearHomogenizer._set_fct_from_object"], ["", "def", "set_young_modulus_from_vector", "(", "self", ",", "E", ")", ":", "\n", "\n", "        ", "assert", "(", "\n", "self", ".", "_nu_default_value", "is", "not", "None", "\n", ")", ",", "\"There is no default value set for nu (and only E has been passed)\"", "\n", "assert", "isinstance", "(", "E", ",", "np", ".", "ndarray", ")", "\n", "mu", ",", "lmbda", "=", "ConvertToLameParameters", "(", "E", ",", "self", ".", "_nu_default_value", ")", "\n", "self", ".", "_set_fct_from_object", "(", "self", ".", "_mu", ",", "mu", ")", "\n", "self", ".", "_set_fct_from_object", "(", "self", ".", "_lambda", ",", "lmbda", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.homogenization.LinearHomogenizer._set_fct_from_object": [[380, 396], ["isinstance", "fct.vector", "isinstance", "obj.copy", "len", "fct.function_space().dim", "fct.vector", "isinstance", "TypeError", "int", "fct.function_space", "fct.function_space().dim", "fct.function_space"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.Kernel.dim", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.Kernel.dim"], ["", "def", "_set_fct_from_object", "(", "self", ",", "fct", ",", "obj", ")", ":", "\n", "\n", "        ", "if", "isinstance", "(", "obj", ",", "float", ")", ":", "\n", "            ", "fct", ".", "vector", "(", ")", "[", ":", "]", "=", "obj", "\n", "", "elif", "isinstance", "(", "obj", ",", "np", ".", "ndarray", ")", "and", "obj", ".", "ndim", "==", "1", ":", "\n", "            ", "assert", "(", "\n", "len", "(", "obj", ")", "==", "fct", ".", "function_space", "(", ")", ".", "dim", "(", ")", "\n", ")", ",", "\"vector does not match function space dimension\"", "\n", "fct", ".", "vector", "(", ")", "[", ":", "]", "=", "obj", ".", "copy", "(", ")", "\n", "", "elif", "isinstance", "(", "obj", ",", "np", ".", "ndarray", ")", "and", "obj", ".", "ndim", "==", "2", ":", "\n", "            ", "assert", "obj", ".", "size", "==", "int", "(", "\n", "0.5", "*", "fct", ".", "function_space", "(", ")", ".", "dim", "(", ")", "\n", ")", ",", "\"2D image and DG function space do not match\"", "\n", "raise", "NotImplementedError", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "\"unknown type for data object to be set to function space\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.homogenization.LinearHomogenizer._loadcase_macro_strain": [[397, 404], ["numpy.zeros", "dolfin.Constant"], "methods", ["None"], ["", "", "def", "_loadcase_macro_strain", "(", "self", ",", "n", ")", ":", "\n", "\n", "        ", "assert", "0", "<=", "n", "<=", "2", ",", "\"there are only 3 elementary load cases, n=0,1,2\"", "\n", "ev", "=", "np", ".", "zeros", "(", "3", ")", "\n", "ev", "[", "n", "]", "=", "1", "\n", "Epsilon_", "=", "(", "(", "ev", "[", "0", "]", ",", "0.5", "*", "ev", "[", "2", "]", ")", ",", "(", "0.5", "*", "ev", "[", "2", "]", ",", "ev", "[", "1", "]", ")", ")", "\n", "return", "df", ".", "Constant", "(", "Epsilon_", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.homogenization.LinearHomogenizer._sigma_homogenized": [[405, 417], ["numpy.array", "dolfin.as_vector", "dolfin.assemble", "dolfin.assemble", "dolfin.assemble", "homogenization.LinearHomogenizer._sigma", "homogenization.LinearHomogenizer._sigma", "homogenization.LinearHomogenizer._sigma"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.fawkes.converter.DiscontinuousGalerkinPixelConverter.assemble", "home.repos.pwc.inspect_result.bdevl_SMO.fawkes.converter.DiscontinuousGalerkinPixelConverter.assemble", "home.repos.pwc.inspect_result.bdevl_SMO.fawkes.converter.DiscontinuousGalerkinPixelConverter.assemble"], ["", "def", "_sigma_homogenized", "(", "self", ",", "boundary", "=", "False", ")", ":", "\n", "        ", "def", "my_cross", "(", "v", ",", "w", ")", ":", "\n", "            ", "return", "df", ".", "as_vector", "(", "(", "v", "[", "1", "]", "*", "w", "[", "2", "]", "-", "v", "[", "2", "]", "*", "w", "[", "1", "]", ",", "v", "[", "2", "]", "*", "w", "[", "0", "]", "-", "v", "[", "0", "]", "*", "w", "[", "2", "]", ")", ")", "\n", "\n", "", "if", "boundary", ":", "\n", "            ", "raise", "DeprecationWarning", "\n", "", "else", ":", "\n", "            ", "sigma_xx", "=", "df", ".", "assemble", "(", "self", ".", "_sigma", "(", "self", ".", "_u_sol", ")", "[", "0", ",", "0", "]", "*", "df", ".", "dx", ")", "\n", "sigma_yy", "=", "df", ".", "assemble", "(", "self", ".", "_sigma", "(", "self", ".", "_u_sol", ")", "[", "1", ",", "1", "]", "*", "df", ".", "dx", ")", "\n", "sigma_xy", "=", "df", ".", "assemble", "(", "self", ".", "_sigma", "(", "self", ".", "_u_sol", ")", "[", "1", ",", "0", "]", "*", "df", ".", "dx", ")", "\n", "\n", "", "return", "np", ".", "array", "(", "[", "sigma_xx", ",", "sigma_yy", ",", "sigma_xy", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.homogenization.LinearHomogenizer.__call__": [[418, 420], ["homogenization.LinearHomogenizer.homogenize"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.microstructure.homogenization.LinearHomogenizer.homogenize"], ["", "def", "__call__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "homogenize", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.homogenization.LinearHomogenizer._homogenize": [[421, 446], ["range", "homogenization.LinearHomogenizer.solve_load_case", "homogenization.LinearHomogenizer._sigma_homogenized", "print", "homogenization.LinearHomogenizer.plot"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.microstructure.homogenization.LinearHomogenizer.solve_load_case", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.homogenization.PeriodicHomogenizer._sigma_homogenized", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.utils.Gaussian2D.plot"], ["", "def", "_homogenize", "(", "self", ",", "verbose", "=", "False", ",", "plot", "=", "False", ",", "boundary", "=", "False", ")", ":", "\n", "\n", "        ", "for", "n", "in", "range", "(", "3", ")", ":", "\n", "\n", "            ", "self", ".", "solve_load_case", "(", "n", ")", "\n", "self", ".", "_C_hom", "[", "n", ",", ":", "]", "=", "self", ".", "_sigma_homogenized", "(", "boundary", "=", "boundary", ")", "\n", "\n", "if", "plot", ":", "\n", "                ", "self", ".", "plot", "(", ")", "\n", "\n", "", "", "self", ".", "_mu_hom", "=", "self", ".", "_C_hom", "[", "2", ",", "2", "]", "\n", "self", ".", "_lamda_hom", "=", "self", ".", "_C_hom", "[", "0", ",", "1", "]", "\n", "\n", "self", ".", "_E_hom", "=", "(", "\n", "self", ".", "_mu_hom", "\n", "*", "(", "3", "*", "self", ".", "_lamda_hom", "+", "2", "*", "self", ".", "_mu_hom", ")", "\n", "/", "(", "self", ".", "_lamda_hom", "+", "self", ".", "_mu_hom", ")", "\n", ")", "\n", "\n", "self", ".", "_nu_hom", "=", "self", ".", "_lamda_hom", "/", "(", "self", ".", "_lamda_hom", "+", "self", ".", "_mu_hom", ")", "/", "2", "\n", "\n", "self", ".", "_E_avg", "=", "0.5", "*", "(", "self", ".", "_C_hom", "[", "0", ",", "0", "]", "+", "self", ".", "_C_hom", "[", "1", ",", "1", "]", ")", "\n", "\n", "if", "verbose", ":", "\n", "            ", "print", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.homogenization.LinearHomogenizer._collect_results_in_dict": [[447, 466], ["dict", "range", "range", "set", "set", "dict.keys"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.None.genutils.StateVariable.set", "home.repos.pwc.inspect_result.bdevl_SMO.None.genutils.StateVariable.set", "home.repos.pwc.inspect_result.bdevl_SMO.lamp.metrics.MetricEnsemble.keys"], ["", "", "def", "_collect_results_in_dict", "(", "self", ")", ":", "\n", "\n", "        ", "r", "=", "dict", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "3", ")", ":", "\n", "                ", "r", "[", "\"C{}{}\"", ".", "format", "(", "i", ",", "j", ")", "]", "=", "self", ".", "_C_hom", "[", "i", ",", "j", "]", "\n", "\n", "", "", "r", "[", "\"mu\"", "]", "=", "self", ".", "_mu_hom", "\n", "r", "[", "\"lambda\"", "]", "=", "self", ".", "_lamda_hom", "\n", "r", "[", "\"E\"", "]", "=", "self", ".", "_E_hom", "\n", "r", "[", "\"nu\"", "]", "=", "self", ".", "_nu_hom", "\n", "r", "[", "\"E_avg\"", "]", "=", "self", ".", "_E_avg", "\n", "\n", "assert", "set", "(", "r", ".", "keys", "(", ")", ")", "==", "set", "(", "\n", "self", ".", "admissible", "\n", ")", ",", "\"returned homogenized properties does not match the admissible set.\"", "\n", "\n", "return", "r", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.homogenization.LinearHomogenizer.homogenize": [[467, 500], ["isinstance", "RuntimeError", "homogenization.LinearHomogenizer.set_young_modulus_from_vector", "homogenization.LinearHomogenizer._homogenize", "homogenization.LinearHomogenizer._collect_results_in_dict", "list", "ValueError", "homogenization.LinearHomogenizer.set_young_modulus_from_vector", "homogenization.LinearHomogenizer._homogenize", "homogenization.LinearHomogenizer._collect_results_in_dict", "list.append", "homogenization.LinearHomogenizer._Vc.dim"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.microstructure.homogenization.LinearHomogenizer.set_young_modulus_from_vector", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.homogenization.LinearHomogenizer._homogenize", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.homogenization.LinearHomogenizer._collect_results_in_dict", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.homogenization.LinearHomogenizer.set_young_modulus_from_vector", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.homogenization.LinearHomogenizer._homogenize", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.homogenization.LinearHomogenizer._collect_results_in_dict", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.Log.append", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.Kernel.dim"], ["", "def", "homogenize", "(", "self", ",", "X", ",", "*", ",", "AcknowledgeRaw", "=", "False", ")", ":", "\n", "\n", "        ", "if", "not", "AcknowledgeRaw", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"Acknowledge that you are passing raw X values\"", ")", "\n", "\n", "", "if", "self", ".", "_integration_type", "==", "\"boundary\"", ":", "\n", "            ", "boundary", "=", "True", "\n", "", "elif", "self", ".", "_integration_type", "==", "\"volume\"", ":", "\n", "            ", "boundary", "=", "False", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'Integration type {} not recognized (either \"boundary\" or \"volume\"'", ".", "format", "(", "\n", "integration_type", "\n", ")", "\n", ")", "\n", "\n", "", "assert", "isinstance", "(", "X", ",", "np", ".", "ndarray", ")", "\n", "if", "X", ".", "ndim", "==", "1", ":", "\n", "\n", "            ", "self", ".", "set_young_modulus_from_vector", "(", "X", ")", "\n", "self", ".", "_homogenize", "(", "verbose", "=", "False", ",", "plot", "=", "False", ",", "boundary", "=", "boundary", ")", "\n", "kappa", "=", "self", ".", "_collect_results_in_dict", "(", ")", "\n", "return", "kappa", "\n", "", "else", ":", "\n", "            ", "assert", "X", ".", "shape", "[", "1", "]", "==", "self", ".", "_Vc", ".", "dim", "(", ")", "and", "X", ".", "shape", "[", "0", "]", ">", "1", "\n", "kappas", "=", "list", "(", ")", "\n", "for", "x_raw", "in", "X", ":", "\n", "                ", "self", ".", "set_young_modulus_from_vector", "(", "x_raw", ")", "\n", "self", ".", "_homogenize", "(", "verbose", "=", "False", ",", "plot", "=", "False", ",", "boundary", "=", "boundary", ")", "\n", "kappa_", "=", "self", ".", "_collect_results_in_dict", "(", ")", "\n", "kappas", ".", "append", "(", "kappa_", ")", "\n", "\n", "", "return", "kappas", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.homogenization.LinearHomogenizer.homogenize_img": [[501, 525], ["isinstance", "homogenization.LinearHomogenizer.homogenize", "RuntimeError", "homogenization.LinearHomogenizer.dim", "homogenization.LinearHomogenizer.unsqueeze_", "isinstance", "isinstance", "torch.tensor", "torch.no_grad", "homogenization.LinearHomogenizer._pixelconverter.ImageToFunctionBatchedFast", "homogenization.LinearHomogenizer.squeeze_", "homogenization.LinearHomogenizer.detach().cpu().numpy", "homogenization.LinearHomogenizer.dim", "homogenization.LinearHomogenizer.dim", "homogenization.LinearHomogenizer.detach().cpu", "homogenization.LinearHomogenizer.detach"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.microstructure.homogenization.LinearHomogenizer.homogenize", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.Kernel.dim", "home.repos.pwc.inspect_result.bdevl_SMO.fawkes.converter.DiscontinuousGalerkinPixelConverter.ImageToFunctionBatchedFast", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.Kernel.dim", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.Kernel.dim"], ["", "", "def", "homogenize_img", "(", "self", ",", "X", ",", "*", ",", "AcknowledgeRaw", "=", "False", ")", "->", "Union", "[", "dict", ",", "List", "[", "dict", "]", "]", ":", "\n", "\n", "        ", "if", "self", ".", "_pixelconverter", "is", "None", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"Pixel converter has not been set\"", ")", "\n", "\n", "", "assert", "isinstance", "(", "X", ",", "torch", ".", "Tensor", ")", ",", "\"homogenize_img expects a torch tensor\"", "\n", "\n", "if", "X", ".", "dim", "(", ")", "<", "3", ":", "\n", "            ", "X", ".", "unsqueeze_", "(", "0", ")", "\n", "\n", "", "if", "not", "isinstance", "(", "X", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "assert", "isinstance", "(", "X", ",", "np", ".", "ndarray", ")", "\n", "X", "=", "torch", ".", "tensor", "(", "X", ")", "\n", "\n", "", "assert", "(", "X", ".", "dim", "(", ")", "==", "3", "and", "X", ".", "shape", "[", "1", "]", "==", "X", ".", "shape", "[", "2", "]", ")", "or", "(", "\n", "X", ".", "dim", "(", ")", "==", "2", "and", "X", ".", "shape", "[", "0", "]", "==", "X", ".", "shape", "[", "1", "]", "\n", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "X", "=", "self", ".", "_pixelconverter", ".", "ImageToFunctionBatchedFast", "(", "X", ")", "\n", "\n", "", "if", "X", ".", "shape", "[", "0", "]", "==", "1", ":", "\n", "            ", "X", ".", "squeeze_", "(", ")", "\n", "\n", "", "return", "self", ".", "homogenize", "(", "X", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "AcknowledgeRaw", "=", "AcknowledgeRaw", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.homogenization.LinearHomogenizer.solve_load_case": [[526, 533], ["homogenization.LinearHomogenizer._loadcase_macro_strain", "homogenization.LinearHomogenizer._solve"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.microstructure.homogenization.LinearHomogenizer._loadcase_macro_strain", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.homogenization.PeriodicHomogenizer._solve"], ["", "def", "solve_load_case", "(", "self", ",", "n", ")", ":", "\n", "\n", "        ", "loadcases", "=", "[", "\"Exx\"", ",", "\"Eyy\"", ",", "\"Exy\"", "]", "\n", "self", ".", "_load_case", "=", "loadcases", "[", "n", "]", "\n", "Epsilon", "=", "self", ".", "_loadcase_macro_strain", "(", "n", ")", "\n", "\n", "self", ".", "_solve", "(", "Epsilon", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.homogenization.LinearHomogenizer.__repr__": [[534, 566], ["numpy.array_str"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "\n", "        ", "if", "self", ".", "_E_hom", "is", "not", "None", ":", "\n", "\n", "            ", "s", "=", "\" =========================================== \\n\"", "\n", "s", "+=", "\"Effective Poissons ratio: {} \\n\"", ".", "format", "(", "self", ".", "_nu_hom", ")", "\n", "\n", "if", "self", ".", "_E_hom", "<", "1e3", ":", "\n", "                ", "unit", "=", "\"Pa\"", "\n", "E_hom", "=", "self", ".", "_E_hom", "\n", "", "elif", "self", ".", "_E_hom", "<", "1e6", ":", "\n", "                ", "unit", "=", "\"KPa\"", "\n", "E_hom", "=", "self", ".", "_E_hom", "/", "1e3", "\n", "", "elif", "self", ".", "_E_hom", "<", "1e9", ":", "\n", "                ", "unit", "=", "\"MPa\"", "\n", "E_hom", "=", "self", ".", "_E_hom", "/", "1e6", "\n", "", "else", ":", "\n", "                ", "unit", "=", "\"GPa\"", "\n", "E_hom", "=", "self", ".", "_E_hom", "/", "1e9", "\n", "\n", "", "s", "+=", "\"Effective Bulk modulus: {:.4f} {} \\n\"", ".", "format", "(", "E_hom", ",", "unit", ")", "\n", "s", "+=", "\"Tangential moduli: \\n\"", "\n", "s", "+=", "np", ".", "array_str", "(", "self", ".", "_C_hom", ",", "precision", "=", "2", ")", "\n", "\n", "s", "+=", "\" \\n\"", "\n", "s", "+=", "\" =========================================== \\n\"", "\n", "\n", "", "else", ":", "\n", "\n", "            ", "s", "=", "\"Homogenizer (has not yet been called)\"", "\n", "\n", "", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.homogenization.PeriodicHomogenizer.__init__": [[569, 600], ["homogenization.LinearHomogenizer.__init__", "numpy.array", "dolfin.VectorElement", "dolfin.VectorElement", "dolfin.FunctionSpace", "dolfin.FunctionSpace", "dolfin.TestFunctions", "dolfin.TrialFunctions", "dolfin.Function", "dolfin.Constant", "homogenization.PeriodicHomogenizer._mesh.ufl_cell", "homogenization.PeriodicHomogenizer._mesh.ufl_cell", "dolfin.MixedElement", "dolfin.inner", "dolfin.lhs", "dolfin.rhs", "homogenization.PeriodicBoundary", "homogenization.PeriodicHomogenizer._sigma_fluctations", "homogenization.PeriodicHomogenizer._epsilon", "dolfin.dot", "dolfin.dot"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.__init__", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.homogenization.PeriodicHomogenizer._sigma_fluctations", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.homogenization.PeriodicHomogenizer._epsilon"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "a", "=", "1", "\n", "b", "=", "1", "\n", "c", "=", "0", "\n", "\n", "vertices", "=", "np", ".", "array", "(", "[", "[", "0", ",", "0.0", "]", ",", "[", "a", ",", "0.0", "]", ",", "[", "a", "+", "c", ",", "b", "]", ",", "[", "c", ",", "b", "]", "]", ")", "\n", "\n", "self", ".", "_Ve", "=", "df", ".", "VectorElement", "(", "\"CG\"", ",", "self", ".", "_mesh", ".", "ufl_cell", "(", ")", ",", "self", ".", "_pDegree", ")", "\n", "self", ".", "_Re", "=", "df", ".", "VectorElement", "(", "\"R\"", ",", "self", ".", "_mesh", ".", "ufl_cell", "(", ")", ",", "0", ")", "\n", "self", ".", "_W", "=", "df", ".", "FunctionSpace", "(", "\n", "self", ".", "_mesh", ",", "\n", "df", ".", "MixedElement", "(", "[", "self", ".", "_Ve", ",", "self", ".", "_Re", "]", ")", ",", "\n", "constrained_domain", "=", "PeriodicBoundary", "(", "vertices", ",", "tolerance", "=", "1e-10", ")", ",", "\n", ")", "\n", "self", ".", "_V", "=", "df", ".", "FunctionSpace", "(", "self", ".", "_mesh", ",", "self", ".", "_Ve", ")", "\n", "self", ".", "_v_", ",", "self", ".", "_lamb_", "=", "df", ".", "TestFunctions", "(", "self", ".", "_W", ")", "\n", "self", ".", "_dv", ",", "self", ".", "_dlamb", "=", "df", ".", "TrialFunctions", "(", "self", ".", "_W", ")", "\n", "self", ".", "_w", "=", "df", ".", "Function", "(", "self", ".", "_W", ")", "\n", "self", ".", "_Epsilon", "=", "df", ".", "Constant", "(", "(", "(", "0", ",", "0", ")", ",", "(", "0", ",", "0", ")", ")", ")", "\n", "self", ".", "_F", "=", "(", "\n", "df", ".", "inner", "(", "self", ".", "_sigma_fluctations", "(", "self", ".", "_dv", ")", ",", "self", ".", "_epsilon", "(", "self", ".", "_v_", ")", ")", "*", "df", ".", "dx", "\n", ")", "\n", "self", ".", "_a", ",", "self", ".", "_L", "=", "df", ".", "lhs", "(", "self", ".", "_F", ")", ",", "df", ".", "rhs", "(", "self", ".", "_F", ")", "\n", "self", ".", "_a", "+=", "(", "\n", "df", ".", "dot", "(", "self", ".", "_lamb_", ",", "self", ".", "_dv", ")", "*", "df", ".", "dx", "\n", "+", "df", ".", "dot", "(", "self", ".", "_dlamb", ",", "self", ".", "_v_", ")", "*", "df", ".", "dx", "\n", ")", "\n", "self", ".", "_v_sol", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.homogenization.PeriodicHomogenizer._epsilon": [[601, 603], ["dolfin.sym", "dolfin.grad"], "methods", ["None"], ["", "def", "_epsilon", "(", "self", ",", "u", ")", ":", "\n", "        ", "return", "df", ".", "sym", "(", "df", ".", "grad", "(", "u", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.homogenization.PeriodicHomogenizer._sigma_fluctations": [[604, 609], ["dolfin.Identity", "dolfin.tr", "homogenization.PeriodicHomogenizer._epsilon", "homogenization.PeriodicHomogenizer._epsilon"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.microstructure.homogenization.PeriodicHomogenizer._epsilon", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.homogenization.PeriodicHomogenizer._epsilon"], ["", "def", "_sigma_fluctations", "(", "self", ",", "v", ")", ":", "\n", "\n", "        ", "return", "self", ".", "_lambda", "*", "df", ".", "tr", "(", "self", ".", "_epsilon", "(", "v", ")", "+", "self", ".", "_Epsilon", ")", "*", "df", ".", "Identity", "(", "\n", "self", ".", "gdim", "\n", ")", "+", "2", "*", "self", ".", "_mu", "*", "(", "self", ".", "_epsilon", "(", "v", ")", "+", "self", ".", "_Epsilon", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.homogenization.PeriodicHomogenizer._sigma_homogenized": [[610, 627], ["numpy.array", "dolfin.assemble", "dolfin.assemble", "dolfin.assemble", "homogenization.PeriodicHomogenizer._sigma_fluctations", "homogenization.PeriodicHomogenizer._sigma_fluctations", "homogenization.PeriodicHomogenizer._sigma_fluctations"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.fawkes.converter.DiscontinuousGalerkinPixelConverter.assemble", "home.repos.pwc.inspect_result.bdevl_SMO.fawkes.converter.DiscontinuousGalerkinPixelConverter.assemble", "home.repos.pwc.inspect_result.bdevl_SMO.fawkes.converter.DiscontinuousGalerkinPixelConverter.assemble", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.homogenization.PeriodicHomogenizer._sigma_fluctations", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.homogenization.PeriodicHomogenizer._sigma_fluctations", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.homogenization.PeriodicHomogenizer._sigma_fluctations"], ["", "def", "_sigma_homogenized", "(", "self", ",", "boundary", "=", "True", ")", ":", "\n", "\n", "        ", "if", "boundary", ":", "\n", "            ", "raise", "DeprecationWarning", "\n", "", "else", ":", "\n", "\n", "            ", "sigma_xx", "=", "(", "1", "/", "self", ".", "_volume", ")", "*", "df", ".", "assemble", "(", "\n", "self", ".", "_sigma_fluctations", "(", "self", ".", "_v_sol", ")", "[", "0", ",", "0", "]", "*", "df", ".", "dx", "\n", ")", "\n", "sigma_yy", "=", "(", "1", "/", "self", ".", "_volume", ")", "*", "df", ".", "assemble", "(", "\n", "self", ".", "_sigma_fluctations", "(", "self", ".", "_v_sol", ")", "[", "1", ",", "1", "]", "*", "df", ".", "dx", "\n", ")", "\n", "sigma_xy", "=", "(", "1", "/", "self", ".", "_volume", ")", "*", "df", ".", "assemble", "(", "\n", "self", ".", "_sigma_fluctations", "(", "self", ".", "_v_sol", ")", "[", "1", ",", "0", "]", "*", "df", ".", "dx", "\n", ")", "\n", "\n", "", "return", "np", ".", "array", "(", "[", "sigma_xx", ",", "sigma_yy", ",", "sigma_xy", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.homogenization.PeriodicHomogenizer._solve": [[628, 643], ["homogenization.PeriodicHomogenizer._Epsilon.assign", "dolfin.solve", "dolfin.split", "dolfin.SpatialCoordinate", "dolfin.dot"], "methods", ["None"], ["", "def", "_solve", "(", "self", ",", "Epsilon", ")", ":", "\n", "\n", "        ", "self", ".", "_Epsilon", ".", "assign", "(", "Epsilon", ")", "\n", "\n", "df", ".", "solve", "(", "\n", "self", ".", "_a", "==", "self", ".", "_L", ",", "\n", "self", ".", "_w", ",", "\n", "[", "]", ",", "\n", "solver_parameters", "=", "{", "\"linear_solver\"", ":", "\"petsc\"", "}", ",", "\n", ")", "\n", "\n", "(", "self", ".", "_v_sol", ",", "lamb", ")", "=", "df", ".", "split", "(", "self", ".", "_w", ")", "\n", "\n", "y", "=", "df", ".", "SpatialCoordinate", "(", "self", ".", "_mesh", ")", "\n", "self", ".", "_u_sol", "=", "0.5", "*", "(", "self", ".", "_v_sol", "+", "df", ".", "dot", "(", "self", ".", "_Epsilon", ",", "y", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.homogenization.PeriodicBoundary.__init__": [[646, 658], ["dolfin.SubDomain.__init__", "numpy.linalg.norm", "numpy.linalg.norm"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.__init__"], ["    ", "def", "__init__", "(", "self", ",", "vertices", ",", "tolerance", "=", "df", ".", "DOLFIN_EPS", ")", ":", "\n", "\n", "# NOTE: External code taken over / adopted from: https://comet-fenics.readthedocs.io/en/latest/demo/periodic_homog_elas/periodic_homog_elas.html", "\n", "\n", "        ", "df", ".", "SubDomain", ".", "__init__", "(", "self", ",", "tolerance", ")", "\n", "\n", "self", ".", "tol", "=", "tolerance", "\n", "self", ".", "vv", "=", "vertices", "\n", "self", ".", "a1", "=", "self", ".", "vv", "[", "1", ",", ":", "]", "-", "self", ".", "vv", "[", "0", ",", ":", "]", "\n", "self", ".", "a2", "=", "self", ".", "vv", "[", "3", ",", ":", "]", "-", "self", ".", "vv", "[", "0", ",", ":", "]", "\n", "assert", "np", ".", "linalg", ".", "norm", "(", "self", ".", "vv", "[", "2", ",", ":", "]", "-", "self", ".", "vv", "[", "3", ",", ":", "]", "-", "self", ".", "a1", ")", "<=", "self", ".", "tol", "\n", "assert", "np", ".", "linalg", ".", "norm", "(", "self", ".", "vv", "[", "2", ",", ":", "]", "-", "self", ".", "vv", "[", "1", ",", ":", "]", "-", "self", ".", "a2", ")", "<=", "self", ".", "tol", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.homogenization.PeriodicBoundary.inside": [[659, 683], ["bool", "dolfin.near", "dolfin.near", "dolfin.near", "dolfin.near", "dolfin.near", "dolfin.near"], "methods", ["None"], ["", "def", "inside", "(", "self", ",", "x", ",", "on_boundary", ")", ":", "\n", "\n", "        ", "return", "bool", "(", "\n", "(", "\n", "df", ".", "near", "(", "\n", "x", "[", "0", "]", ",", "self", ".", "vv", "[", "0", ",", "0", "]", "+", "x", "[", "1", "]", "*", "self", ".", "a2", "[", "0", "]", "/", "self", ".", "vv", "[", "3", ",", "1", "]", ",", "self", ".", "tol", "\n", ")", "\n", "or", "df", ".", "near", "(", "\n", "x", "[", "1", "]", ",", "self", ".", "vv", "[", "0", ",", "1", "]", "+", "x", "[", "0", "]", "*", "self", ".", "a1", "[", "1", "]", "/", "self", ".", "vv", "[", "1", ",", "0", "]", ",", "self", ".", "tol", "\n", ")", "\n", ")", "\n", "and", "(", "\n", "not", "(", "\n", "(", "\n", "df", ".", "near", "(", "x", "[", "0", "]", ",", "self", ".", "vv", "[", "1", ",", "0", "]", ",", "self", ".", "tol", ")", "\n", "and", "df", ".", "near", "(", "x", "[", "1", "]", ",", "self", ".", "vv", "[", "1", ",", "1", "]", ",", "self", ".", "tol", ")", "\n", ")", "\n", "or", "(", "\n", "df", ".", "near", "(", "x", "[", "0", "]", ",", "self", ".", "vv", "[", "3", ",", "0", "]", ",", "self", ".", "tol", ")", "\n", "and", "df", ".", "near", "(", "x", "[", "1", "]", ",", "self", ".", "vv", "[", "3", ",", "1", "]", ",", "self", ".", "tol", ")", "\n", ")", "\n", ")", "\n", ")", "\n", "and", "on_boundary", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.homogenization.PeriodicBoundary.map": [[685, 698], ["dolfin.near", "dolfin.near", "dolfin.near"], "methods", ["None"], ["", "def", "map", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "\n", "        ", "if", "df", ".", "near", "(", "x", "[", "0", "]", ",", "self", ".", "vv", "[", "2", ",", "0", "]", ",", "self", ".", "tol", ")", "and", "df", ".", "near", "(", "\n", "x", "[", "1", "]", ",", "self", ".", "vv", "[", "2", ",", "1", "]", ",", "self", ".", "tol", "\n", ")", ":", "\n", "            ", "y", "[", "0", "]", "=", "x", "[", "0", "]", "-", "(", "self", ".", "a1", "[", "0", "]", "+", "self", ".", "a2", "[", "0", "]", ")", "\n", "y", "[", "1", "]", "=", "x", "[", "1", "]", "-", "(", "self", ".", "a1", "[", "1", "]", "+", "self", ".", "a2", "[", "1", "]", ")", "\n", "", "elif", "df", ".", "near", "(", "x", "[", "0", "]", ",", "self", ".", "vv", "[", "1", ",", "0", "]", "+", "x", "[", "1", "]", "*", "self", ".", "a2", "[", "0", "]", "/", "self", ".", "vv", "[", "2", ",", "1", "]", ",", "self", ".", "tol", ")", ":", "\n", "            ", "y", "[", "0", "]", "=", "x", "[", "0", "]", "-", "self", ".", "a1", "[", "0", "]", "\n", "y", "[", "1", "]", "=", "x", "[", "1", "]", "-", "self", ".", "a1", "[", "1", "]", "\n", "", "else", ":", "\n", "            ", "y", "[", "0", "]", "=", "x", "[", "0", "]", "-", "self", ".", "a2", "[", "0", "]", "\n", "y", "[", "1", "]", "=", "x", "[", "1", "]", "-", "self", ".", "a2", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.homogenization.optimize_loadcases": [[13, 36], ["isinstance", "all", "isinstance", "set().union", "set", "list", "isinstance", "max", "list.append", "loadcases.index", "set", "len"], "function", ["home.repos.pwc.inspect_result.bdevl_SMO.None.genutils.StateVariable.set", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.PhiState.max", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.Log.append", "home.repos.pwc.inspect_result.bdevl_SMO.None.genutils.StateVariable.set"], ["def", "optimize_loadcases", "(", "loadcases", ":", "list", ",", "target", ":", "List", "[", "set", "]", ",", "greedy", ":", "bool", "=", "True", ")", "->", "list", ":", "\n", "\n", "# solve set cover problem", "\n", "    ", "assert", "isinstance", "(", "loadcases", ",", "list", ")", "\n", "assert", "all", "(", "[", "isinstance", "(", "loadcase", ",", "set", ")", "for", "loadcase", "in", "loadcases", "]", ")", "\n", "assert", "isinstance", "(", "target", ",", "set", ")", "\n", "\n", "assert", "(", "\n", "set", "(", ")", ".", "union", "(", "*", "loadcases", ")", "==", "target", "\n", ")", ",", "\"Loadcases are not able to satisfy desired targets\"", "\n", "\n", "if", "greedy", ":", "\n", "        ", "covered", "=", "set", "(", ")", "\n", "covering", "=", "list", "(", ")", "\n", "while", "covered", "!=", "target", ":", "\n", "            ", "loadcase", "=", "max", "(", "loadcases", ",", "key", "=", "lambda", "s", ":", "len", "(", "s", "-", "covered", ")", ")", "\n", "covering", ".", "append", "(", "loadcase", ")", "\n", "covered", "|=", "loadcase", "\n", "\n", "", "return", "[", "loadcases", ".", "index", "(", "covering_", ")", "for", "covering_", "in", "covering", "]", "\n", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.homogenization.ConvertToLameParameters": [[271, 276], ["None"], "function", ["None"], ["", "", "", "def", "ConvertToLameParameters", "(", "E", ",", "nu", ")", ":", "\n", "\n", "    ", "mu", "=", "0.5", "*", "(", "1", "/", "(", "1", "+", "nu", ")", ")", "*", "E", "\n", "lmbda", "=", "(", "nu", "/", "(", "1", "-", "2", "*", "nu", ")", ")", "*", "(", "1", "/", "(", "1", "+", "nu", ")", ")", "*", "E", "\n", "return", "mu", ",", "lmbda", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.homogenization.macro_strain": [[700, 706], ["numpy.zeros", "numpy.array"], "function", ["None"], ["", "", "", "def", "macro_strain", "(", "i", ")", ":", "\n", "\n", "    ", "Eps_Voigt", "=", "np", ".", "zeros", "(", "(", "3", ",", ")", ")", "\n", "Eps_Voigt", "[", "i", "]", "=", "1", "\n", "return", "np", ".", "array", "(", "\n", "[", "[", "Eps_Voigt", "[", "0", "]", ",", "Eps_Voigt", "[", "2", "]", "/", "2.0", "]", ",", "[", "Eps_Voigt", "[", "2", "]", "/", "2.0", ",", "Eps_Voigt", "[", "1", "]", "]", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.homogenization.stress2Voigt": [[709, 712], ["dolfin.as_vector"], "function", ["None"], ["", "def", "stress2Voigt", "(", "s", ")", ":", "\n", "\n", "    ", "return", "df", ".", "as_vector", "(", "[", "s", "[", "0", ",", "0", "]", ",", "s", "[", "1", ",", "1", "]", ",", "s", "[", "0", ",", "1", "]", "]", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.RandomFieldParameters.__init__": [[10, 13], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "kernel", ")", ":", "\n", "\n", "        ", "self", ".", "_kernel", "=", "kernel", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.RandomFieldParameters.dim": [[14, 17], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "dim", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_kernel", ".", "pdim", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.RandomFieldParameters.clamp": [[18, 20], ["None"], "methods", ["None"], ["", "def", "clamp", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.RandomFieldParameters.__repr__": [[21, 24], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"Random Field Parameters | process parameters | dim = {}\"", ".", "format", "(", "\n", "self", ".", "dim", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.UnboundedRandomFieldParameters.__init__": [[28, 31], ["randomfields.RandomFieldParameters.__init__"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.__init__"], ["    ", "def", "__init__", "(", "self", ",", "kernel", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "kernel", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.UnboundedRandomFieldParameters.clamp": [[32, 34], ["None"], "methods", ["None"], ["", "def", "clamp", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.SoftmaxRandomFieldParameters.__init__": [[37, 41], ["randomfields.RandomFieldParameters.__init__"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.__init__"], ["    ", "def", "__init__", "(", "self", ",", "kernel", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "kernel", ")", "\n", "self", ".", "_max_discrepancy", "=", "10", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.SoftmaxRandomFieldParameters.clamp": [[42, 50], ["params.data.max().item", "params.data.min().item", "params.data.max", "params.data.min"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.PhiState.max", "home.repos.pwc.inspect_result.bdevl_SMO.SMO.analysis.PhiState.min"], ["", "def", "clamp", "(", "self", ")", ":", "\n", "\n", "        ", "params", "=", "self", ".", "_kernel", ".", "phi", "\n", "diff", "=", "params", ".", "data", ".", "max", "(", ")", ".", "item", "(", ")", "-", "params", ".", "data", ".", "min", "(", ")", ".", "item", "(", ")", "\n", "\n", "if", "diff", ">", "self", ".", "_max_discrepancy", ":", "\n", "            ", "f", "=", "diff", "/", "self", ".", "_max_discrepancy", "\n", "params", ".", "data", "=", "params", ".", "data", "/", "f", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.IntervalRandomFieldParameters.__init__": [[53, 63], ["randomfields.RandomFieldParameters.__init__", "isinstance"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.__init__"], ["    ", "def", "__init__", "(", "self", ",", "kernel", ",", "bounds", "=", "None", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "kernel", ")", "\n", "\n", "self", ".", "_kernel", "=", "kernel", "\n", "assert", "isinstance", "(", "bounds", ",", "np", ".", "ndarray", ")", "\n", "assert", "bounds", ".", "shape", "[", "0", "]", "==", "self", ".", "dim", "\n", "assert", "bounds", ".", "shape", "[", "1", "]", "==", "2", "\n", "\n", "self", ".", "_bounds", "=", "bounds", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.IntervalRandomFieldParameters.clamp": [[64, 84], ["hasattr", "randomfields.IntervalRandomFieldParameters._kernel.inverse_transform", "randomfields.IntervalRandomFieldParameters._kernel.inverse_transform", "params.data.clone", "torch.where", "torch.where", "torch.tensor", "torch.tensor"], "methods", ["None"], ["", "def", "clamp", "(", "self", ")", ":", "\n", "\n", "        ", "params", "=", "self", ".", "_kernel", ".", "phi", "\n", "\n", "assert", "hasattr", "(", "\n", "self", ".", "_kernel", ",", "\"inverse_transform\"", "\n", ")", ",", "\"The chosen kernel is not compatible with the random field parameter constraint.\"", "\n", "\n", "upperbound", "=", "self", ".", "_kernel", ".", "inverse_transform", "(", "\n", "torch", ".", "tensor", "(", "self", ".", "_bounds", "[", ":", ",", "1", "]", ",", "dtype", "=", "params", ".", "dtype", ",", "device", "=", "params", ".", "device", ")", "\n", ")", "\n", "lowerbound", "=", "self", ".", "_kernel", ".", "inverse_transform", "(", "\n", "torch", ".", "tensor", "(", "self", ".", "_bounds", "[", ":", ",", "0", "]", ",", "dtype", "=", "params", ".", "dtype", ",", "device", "=", "params", ".", "device", ")", "\n", ")", "\n", "\n", "data", "=", "params", ".", "data", ".", "clone", "(", ")", "\n", "data", "=", "torch", ".", "where", "(", "params", "<", "lowerbound", ",", "lowerbound", ",", "data", ")", "\n", "data", "=", "torch", ".", "where", "(", "params", ">", "upperbound", ",", "upperbound", ",", "data", ")", "\n", "\n", "params", ".", "data", "=", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.PhaseAngleNormalTransform.__init__": [[87, 97], ["super().__init__", "randomfields.PhaseAngleNormalTransform.register_buffer", "randomfields.PhaseAngleNormalTransform.register_buffer", "torch.tensor", "torch.tensor", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dtype", ",", "device", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_dtype", "=", "dtype", "\n", "self", ".", "_device", "=", "device", "\n", "self", ".", "register_buffer", "(", "\n", "\"_2pi\"", ",", "torch", ".", "tensor", "(", "2", "*", "np", ".", "pi", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ")", "\n", ")", "\n", "self", ".", "register_buffer", "(", "\n", "\"_sqrt2\"", ",", "torch", ".", "tensor", "(", "np", ".", "sqrt", "(", "2", ")", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.PhaseAngleNormalTransform.forward": [[99, 103], ["torch.erf"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "Z", ")", ":", "\n", "\n", "# with Z ~ N(0,1) a vector (will be of dim 2*Nw**2)", "\n", "        ", "return", "0.5", "*", "(", "1", "+", "torch", ".", "erf", "(", "Z", "/", "self", ".", "_sqrt2", ")", ")", "*", "self", ".", "_2pi", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.Kernel.__init__": [[106, 118], ["super().__init__", "dict", "dict", "randomfields.Kernel._setup"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.__init__", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField._setup"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "pdim", ",", "w_max", ",", "N", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "_dim", "=", "dim", "\n", "self", ".", "_phi", "=", "None", "\n", "self", ".", "_pdim", "=", "pdim", "\n", "self", ".", "_N", "=", "dict", "(", ")", "\n", "self", ".", "_w_max", "=", "dict", "(", ")", "\n", "self", ".", "_WX", "=", "None", "\n", "\n", "self", ".", "_setup", "(", "N", ",", "w_max", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.Kernel.phi": [[124, 129], ["isinstance", "len"], "methods", ["None"], ["", "@", "phi", ".", "setter", "\n", "def", "phi", "(", "self", ",", "val", ")", ":", "\n", "        ", "assert", "isinstance", "(", "val", ",", "torch", ".", "Tensor", ")", "\n", "assert", "len", "(", "val", ")", "==", "self", ".", "pdim", "\n", "self", ".", "_phi", ".", "data", "=", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.Kernel.__add__": [[131, 133], ["AggregateKernel", "KernelAddition"], "methods", ["None"], ["", "def", "__add__", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "AggregateKernel", "(", "self", ",", "other", ",", "KernelAddition", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.Kernel.__sub__": [[134, 136], ["AggregateKernel", "KernelSubtraction"], "methods", ["None"], ["", "def", "__sub__", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "AggregateKernel", "(", "self", ",", "other", ",", "KernelSubtraction", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.Kernel.__mul__": [[137, 139], ["AggregateKernel", "KernelMultiplication"], "methods", ["None"], ["", "def", "__mul__", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "AggregateKernel", "(", "self", ",", "other", ",", "KernelMultiplication", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.Kernel.dtype": [[140, 143], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "dtype", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_phi", ".", "dtype", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.Kernel.device": [[144, 147], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "device", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_phi", ".", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.Kernel.pdim": [[148, 151], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "pdim", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_pdim", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.Kernel.dim": [[152, 155], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "dim", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.Kernel.phase_angle_dim": [[156, 159], ["numpy.prod", "numpy.array", "list", "randomfields.Kernel._N.values"], "methods", ["None"], ["", "@", "property", "\n", "def", "phase_angle_dim", "(", "self", ")", ":", "\n", "        ", "return", "2", "*", "np", ".", "prod", "(", "np", ".", "array", "(", "list", "(", "self", ".", "_N", ".", "values", "(", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.Kernel.dim_phase_angles": [[160, 164], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "dim_phase_angles", "(", "self", ")", ":", "\n", "# lazy fix instead of refactoring", "\n", "        ", "return", "self", ".", "phase_angle_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.Kernel.dw": [[165, 168], ["None"], "methods", ["None"], ["", "def", "dw", "(", "self", ",", "dir", ")", ":", "\n", "\n", "        ", "return", "self", ".", "_w_max", "[", "dir", "]", "/", "self", ".", "_N", "[", "dir", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.Kernel._setup": [[169, 190], ["isinstance", "isinstance", "isinstance", "isinstance", "RuntimeError"], "methods", ["None"], ["", "def", "_setup", "(", "self", ",", "N", ",", "w_max", ")", ":", "\n", "\n", "# prepare for batched execution of the kernel at the pre-specified grid", "\n", "        ", "if", "self", ".", "_dim", "==", "1", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "elif", "self", ".", "_dim", "==", "2", ":", "\n", "            ", "if", "isinstance", "(", "N", ",", "list", ")", ":", "\n", "                ", "self", ".", "_N", "[", "\"x\"", "]", "=", "N", "[", "0", "]", "\n", "self", ".", "_N", "[", "\"y\"", "]", "=", "N", "[", "1", "]", "\n", "", "elif", "isinstance", "(", "N", ",", "int", ")", ":", "\n", "                ", "self", ".", "_N", "[", "\"x\"", "]", "=", "N", "\n", "self", ".", "_N", "[", "\"y\"", "]", "=", "N", "\n", "", "else", ":", "\n", "                ", "raise", "RuntimeError", "(", "\n", "\"Expects resolution information of frequency domain to be either given by list or integer\"", "\n", ")", "\n", "\n", "", "if", "isinstance", "(", "w_max", ",", "float", ")", ":", "\n", "                ", "self", ".", "_w_max", "[", "\"x\"", "]", "=", "self", ".", "_w_max", "[", "\"y\"", "]", "=", "w_max", "\n", "", "elif", "isinstance", "(", "w_max", ",", "list", ")", ":", "\n", "                ", "self", ".", "_w_max", "[", "\"x\"", "]", ",", "self", ".", "_w_max", "[", "\"y\"", "]", "=", "w_max", "[", "0", "]", ",", "w_max", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.Kernel.SDF": [[191, 194], ["None"], "methods", ["None"], ["", "", "", "def", "SDF", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.Kernel.PlotFrequencyDomain": [[195, 225], ["torch.linspace", "torch.linspace", "randomfields.Kernel.SDF", "torch.meshgrid", "matplotlib.contourf", "matplotlib.title", "matplotlib.xlabel", "matplotlib.ylabel", "W2.detach().cpu().numpy", "W1.detach().cpu().numpy", "matplotlib.colorbar", "randomfields.Kernel.detach().cpu().numpy", "W2.detach().cpu", "W1.detach().cpu", "randomfields.Kernel.detach().cpu", "W2.detach", "W1.detach", "randomfields.Kernel.detach"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.GaussianGridKernel.SDF"], ["", "def", "PlotFrequencyDomain", "(", "self", ",", "cmap", "=", "\"magma\"", ",", "add_title", "=", "\"\"", ",", "colorbar", "=", "False", ")", ":", "\n", "\n", "        ", "if", "self", ".", "_dim", "==", "1", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "elif", "self", ".", "_dim", "==", "2", ":", "\n", "\n", "            ", "w1", "=", "torch", ".", "linspace", "(", "\n", "0", ",", "self", ".", "_w_max", "[", "\"x\"", "]", ",", "self", ".", "_N", "[", "\"x\"", "]", ",", "dtype", "=", "self", ".", "dtype", ",", "device", "=", "self", ".", "device", "\n", ")", "\n", "w2", "=", "torch", ".", "linspace", "(", "\n", "0", ",", "self", ".", "_w_max", "[", "\"y\"", "]", ",", "self", ".", "_N", "[", "\"y\"", "]", ",", "dtype", "=", "self", ".", "dtype", ",", "device", "=", "self", ".", "device", "\n", ")", "\n", "Z", "=", "self", ".", "SDF", "(", "w1", ",", "w2", ")", "\n", "W2", ",", "W1", "=", "torch", ".", "meshgrid", "(", "w2", ",", "w1", ")", "\n", "h", "=", "plt", ".", "contourf", "(", "\n", "W2", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "W1", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "Z", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "T", ",", "\n", "cmap", "=", "\"magma\"", ",", "\n", ")", "\n", "if", "colorbar", ":", "\n", "                ", "plt", ".", "colorbar", "(", "h", ")", "\n", "", "plt", ".", "title", "(", "\"Spectral Density Function \"", "+", "add_title", ")", "\n", "plt", ".", "xlabel", "(", "r\"Frequency $w_x$\"", ")", "\n", "plt", ".", "ylabel", "(", "r\"Frequency $w_y$\"", ")", "\n", "\n", "return", "W1", ",", "W2", ",", "Z", "\n", "\n", "", "elif", "self", ".", "_dim", "==", "3", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.Kernel.eval": [[226, 228], ["None"], "methods", ["None"], ["", "", "def", "eval", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.GaussianGridKernel.__init__": [[231, 256], ["randomfields.Kernel.__init__", "torch.nn.Parameter", "torch.nn.Softmax", "randomfields.GaussianGridKernel.register_buffer", "torch.randn", "torch.zeros", "torch.stack().view", "torch.stack", "torch.meshgrid", "torch.linspace", "torch.linspace"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "w_max", ",", "N", ",", "N_g", ",", "sigma_w", ",", "init_uniform", "=", "False", ")", ":", "\n", "\n", "        ", "pdim", "=", "N_g", "**", "dim", "\n", "assert", "dim", "==", "2", ",", "\"currently only support the 2D case\"", "\n", "super", "(", ")", ".", "__init__", "(", "dim", ",", "pdim", ",", "w_max", ",", "N", ")", "\n", "\n", "assert", "sigma_w", ">", "0", "\n", "self", ".", "_N_g", "=", "N_g", "\n", "self", ".", "_sigma_w", "=", "sigma_w", "\n", "\n", "self", ".", "_phi", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "pdim", ")", ")", "\n", "\n", "if", "init_uniform", ":", "\n", "            ", "self", ".", "_phi", ".", "data", "=", "torch", ".", "zeros", "(", "pdim", ")", "\n", "\n", "", "self", ".", "_softmax", "=", "torch", ".", "nn", ".", "Softmax", "(", "0", ")", "\n", "\n", "self", ".", "register_buffer", "(", "\n", "\"_loc\"", ",", "\n", "torch", ".", "stack", "(", "\n", "torch", ".", "meshgrid", "(", "\n", "torch", ".", "linspace", "(", "0", ",", "w_max", ",", "N_g", ")", ",", "torch", ".", "linspace", "(", "0", ",", "w_max", ",", "N_g", ")", "\n", ")", ",", "\n", "2", ",", "\n", ")", ".", "view", "(", "1", ",", "N_g", ",", "N_g", ",", "1", ",", "1", ",", "dim", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.GaussianGridKernel._transform": [[258, 260], ["randomfields.GaussianGridKernel._softmax"], "methods", ["None"], ["", "def", "_transform", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_softmax", "(", "self", ".", "_phi", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.GaussianGridKernel.set_phi": [[261, 273], ["isinstance", "isinstance", "type", "torch.tensor.copy", "isinstance", "torch.tensor", "isinstance", "isinstance"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.fawkes.BoundaryConditions.NeumannSpecification.type"], ["", "def", "set_phi", "(", "self", ",", "phi", ":", "Union", "[", "torch", ".", "Tensor", ",", "list", ",", "np", ".", "ndarray", "]", ")", ":", "\n", "\n", "        ", "assert", "isinstance", "(", "phi", ",", "list", ")", "or", "(", "\n", "(", "isinstance", "(", "phi", ",", "torch", ".", "Tensor", ")", "or", "isinstance", "(", "phi", ",", "np", ".", "ndarray", ")", ")", "\n", "and", "phi", ".", "ndim", "==", "1", "\n", ")", ",", "\"Invalid phi type, {}\"", ".", "format", "(", "type", "(", "phi", ")", ")", "\n", "if", "isinstance", "(", "phi", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "phi", "=", "phi", ".", "copy", "(", ")", "\n", "", "if", "not", "isinstance", "(", "phi", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "phi", "=", "torch", ".", "tensor", "(", "phi", ",", "dtype", "=", "self", ".", "phi", ".", "dtype", ",", "device", "=", "self", ".", "phi", ".", "device", ")", "\n", "\n", "", "self", ".", "phi", "=", "phi", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.GaussianGridKernel.get_phi": [[274, 278], ["randomfields.GaussianGridKernel.phi.tolist().copy", "randomfields.GaussianGridKernel.phi.tolist"], "methods", ["None"], ["", "def", "get_phi", "(", "self", ")", "->", "list", ":", "\n", "\n", "        ", "assert", "self", ".", "_phi", ".", "ndim", "==", "1", "\n", "return", "self", ".", "phi", ".", "tolist", "(", ")", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.GaussianGridKernel.SDF": [[279, 292], ["len", "torch.distributions.Normal", "torch.distributions.Independent", "torch.stack().view", "torch.exp", "torch.sum().squeeze", "torch.distributions.Independent.log_prob", "randomfields.GaussianGridKernel._transform().view", "torch.stack", "torch.sum", "torch.meshgrid", "randomfields.GaussianGridKernel._transform"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.GaussianGridKernel._transform"], ["", "def", "SDF", "(", "self", ",", "w1", ",", "w2", ")", ":", "\n", "\n", "        ", "N_g", "=", "self", ".", "_N_g", "\n", "N_w", "=", "len", "(", "w1", ")", "\n", "bs", "=", "1", "\n", "q_", "=", "torch", ".", "distributions", ".", "Normal", "(", "self", ".", "_loc", ",", "scale", "=", "self", ".", "_sigma_w", ")", "\n", "q", "=", "torch", ".", "distributions", ".", "Independent", "(", "q_", ",", "1", ")", "\n", "v", "=", "torch", ".", "stack", "(", "torch", ".", "meshgrid", "(", "w1", ",", "w1", ")", ",", "2", ")", ".", "view", "(", "1", ",", "1", ",", "1", ",", "N_w", ",", "N_w", ",", "2", ")", "\n", "R", "=", "torch", ".", "exp", "(", "q", ".", "log_prob", "(", "v", ")", ")", "\n", "R", "=", "R", "*", "self", ".", "_transform", "(", ")", ".", "view", "(", "bs", ",", "N_g", ",", "N_g", ",", "1", ",", "1", ")", "\n", "R", "=", "torch", ".", "sum", "(", "R", ",", "dim", "=", "(", "1", ",", "2", ")", ")", ".", "squeeze", "(", ")", "\n", "\n", "return", "R", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.__init__": [[295, 341], ["super().__init__", "randomfields.PhaseAngleNormalTransform", "randomfields.DifferentiableGaussianRandomField._setup", "randomfields.DifferentiableGaussianRandomField.register_buffer", "randomfields.DifferentiableGaussianRandomField.register_buffer", "warnings.warn", "isinstance", "torch.tensor", "torch.tensor", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.__init__", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField._setup"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "ns", ",", "\n", "kernel", ",", "\n", "dim", ",", "\n", "w_max", "=", "None", ",", "\n", "Nw", "=", "None", ",", "\n", "dtype", "=", "None", ",", "\n", "device", "=", "None", ",", "\n", "precomputation", "=", "True", ",", "\n", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "assert", "device", "is", "not", "None", "and", "dtype", "is", "not", "None", "\n", "if", "w_max", "is", "not", "None", "or", "Nw", "is", "not", "None", ":", "\n", "            ", "warnings", ".", "warn", "(", "\n", "\"Passing any information about the discretization in the phase space to DifferentiableGaussianRandomField is deprecated\"", "\n", ")", "\n", "\n", "", "self", ".", "_kernel", "=", "kernel", "\n", "\n", "assert", "dim", "==", "2", ",", "\"can only deal with spatial dimension 2\"", "\n", "self", ".", "_dim", "=", "dim", "\n", "self", ".", "_domain", "=", "None", "\n", "self", ".", "_grid", "=", "None", "\n", "self", ".", "_dim_param", "=", "None", "\n", "\n", "assert", "ns", ">", "1", "and", "isinstance", "(", "\n", "ns", ",", "int", "\n", ")", ",", "\"spatial resolution must be positive integer larger than one.\"", "\n", "self", ".", "_ns1", "=", "ns", "\n", "self", ".", "_ns2", "=", "ns", "\n", "assert", "self", ".", "_ns1", "==", "self", ".", "_ns2", ",", "\"implementation assumes ns1=ns2.\"", "\n", "\n", "# cached basis, if precomputation is set to true", "\n", "self", ".", "_precumptation", "=", "precomputation", "\n", "\n", "self", ".", "_pant", "=", "PhaseAngleNormalTransform", "(", "dtype", "=", "dtype", ",", "device", "=", "device", ")", "\n", "\n", "self", ".", "_setup", "(", ")", "\n", "\n", "self", ".", "register_buffer", "(", "\n", "\"_sqrt2\"", ",", "torch", ".", "tensor", "(", "[", "np", ".", "sqrt", "(", "2", ")", "]", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ")", "\n", ")", "\n", "self", ".", "register_buffer", "(", "\"_pi\"", ",", "torch", ".", "tensor", "(", "[", "np", ".", "pi", "]", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField._Nw": [[342, 347], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "_Nw", "(", "self", ")", ":", "\n", "\n", "        ", "assert", "self", ".", "_kernel", ".", "_N", "[", "\"x\"", "]", "==", "self", ".", "_kernel", ".", "_N", "[", "\"y\"", "]", "\n", "return", "self", ".", "_kernel", ".", "_N", "[", "\"x\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField._w_max": [[348, 353], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "_w_max", "(", "self", ")", ":", "\n", "\n", "        ", "assert", "self", ".", "_kernel", ".", "_w_max", "[", "\"x\"", "]", "==", "self", ".", "_kernel", ".", "_w_max", "[", "\"y\"", "]", "\n", "return", "self", ".", "_kernel", ".", "_w_max", "[", "\"x\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.ns": [[354, 357], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "ns", "(", "self", ")", ":", "\n", "        ", "return", "(", "self", ".", "_ns2", ",", "self", ".", "_ns1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.kernel": [[358, 361], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "kernel", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_kernel", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.dtype": [[362, 365], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "dtype", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_kernel", ".", "dtype", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.device": [[366, 369], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "device", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_kernel", ".", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.set_phi": [[370, 372], ["randomfields.DifferentiableGaussianRandomField._kernel.set_phi"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.set_phi"], ["", "def", "set_phi", "(", "self", ",", "phi", ")", ":", "\n", "        ", "self", ".", "_kernel", ".", "set_phi", "(", "phi", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.get_phi": [[373, 375], ["randomfields.DifferentiableGaussianRandomField._kernel.get_phi"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.get_phi"], ["", "def", "get_phi", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_kernel", ".", "get_phi", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField._setup": [[376, 408], ["randomfields.DifferentiableGaussianRandomField.register_buffer", "randomfields.DifferentiableGaussianRandomField.register_buffer", "randomfields.DifferentiableGaussianRandomField.register_buffer", "randomfields.DifferentiableGaussianRandomField.register_buffer", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "randomfields.DifferentiableGaussianRandomField._basis", "randomfields.DifferentiableGaussianRandomField.register_buffer", "randomfields.DifferentiableGaussianRandomField.register_buffer", "randomfields.DifferentiableGaussianRandomField.register_buffer", "randomfields.DifferentiableGaussianRandomField._kernel.dw", "randomfields.DifferentiableGaussianRandomField._kernel.dw", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField._basis", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.Kernel.dw", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.Kernel.dw"], ["", "def", "_setup", "(", "self", ")", ":", "\n", "\n", "        ", "if", "self", ".", "_dim", "==", "1", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "elif", "self", ".", "_dim", "==", "2", ":", "\n", "\n", "            ", "self", ".", "register_buffer", "(", "\"_vs1\"", ",", "torch", ".", "linspace", "(", "0", ",", "1", ",", "self", ".", "_ns1", ")", ")", "\n", "self", ".", "register_buffer", "(", "\"_vs2\"", ",", "torch", ".", "linspace", "(", "0", ",", "1", ",", "self", ".", "_ns2", ")", ")", "\n", "\n", "self", ".", "register_buffer", "(", "\"_vw1\"", ",", "torch", ".", "linspace", "(", "0", ",", "self", ".", "_w_max", ",", "self", ".", "_Nw", ")", ")", "\n", "self", ".", "register_buffer", "(", "\"_vw2\"", ",", "torch", ".", "linspace", "(", "0", ",", "self", ".", "_w_max", ",", "self", ".", "_Nw", ")", ")", "\n", "\n", "if", "self", ".", "_precumptation", ":", "\n", "\n", "                ", "B1", ",", "B2", "=", "self", ".", "_basis", "(", "ApplyCos", "=", "False", ")", "\n", "self", ".", "register_buffer", "(", "\"_B1\"", ",", "B1", ")", "\n", "self", ".", "register_buffer", "(", "\"_B2\"", ",", "B2", ")", "\n", "\n", "dwf", "=", "self", ".", "_kernel", ".", "dw", "(", "\"x\"", ")", "*", "self", ".", "_kernel", ".", "dw", "(", "\"y\"", ")", "\n", "mask", "=", "2", "*", "torch", ".", "ones", "(", "self", ".", "_Nw", ",", "self", ".", "_Nw", ")", "\n", "mask", "[", "-", "1", ",", "0", "]", "=", "0.25", "\n", "mask", "[", "-", "1", ",", "1", ":", "]", "=", "1", "\n", "mask", "[", "0", ":", "-", "1", ",", "0", "]", "=", "1", "\n", "mask", "=", "mask", "*", "dwf", "\n", "self", ".", "register_buffer", "(", "\"_mask\"", ",", "mask", ")", "\n", "\n", "", "else", ":", "\n", "                ", "self", ".", "_B1", "=", "None", "\n", "self", ".", "_B2", "=", "None", "\n", "\n", "", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.rsample_transform": [[409, 414], ["randomfields.DifferentiableGaussianRandomField._pant", "randomfields.DifferentiableGaussianRandomField.rsample"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.rsample"], ["", "", "def", "rsample_transform", "(", "self", ",", "theta_hat", ")", ":", "\n", "\n", "        ", "theta", "=", "self", ".", "_pant", "(", "theta_hat", ")", "\n", "assert", "theta", ".", "shape", "==", "theta_hat", ".", "shape", "\n", "return", "self", ".", "rsample", "(", "theta", "=", "theta", ",", "acknowledge_untransformed_phase_angles", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.rsample": [[415, 437], ["RuntimeError", "torch.zeros", "range", "randomfields.DifferentiableGaussianRandomField._rsample", "randomfields.DifferentiableGaussianRandomField._rsample"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField._rsample", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField._rsample"], ["", "def", "rsample", "(", "self", ",", "theta", "=", "None", ",", "*", ",", "acknowledge_untransformed_phase_angles", "=", "False", ")", ":", "\n", "\n", "        ", "if", "not", "acknowledge_untransformed_phase_angles", "and", "theta", "is", "not", "None", ":", "\n", "            ", "raise", "RuntimeError", "(", "\n", "\"check whether the instance calling this is doing so correctly (U[0,2\\pi])\"", "\n", ")", "\n", "\n", "", "if", "theta", "is", "not", "None", "and", "theta", ".", "ndim", ">", "1", ":", "\n", "\n", "            ", "assert", "theta", ".", "ndim", "==", "2", ",", "\"needs to be batch_dim x phase_angle_dim\"", "\n", "bs", "=", "theta", ".", "shape", "[", "0", "]", "\n", "X", "=", "torch", ".", "zeros", "(", "\n", "bs", ",", "self", ".", "_ns2", ",", "self", ".", "_ns1", ",", "dtype", "=", "self", ".", "dtype", ",", "device", "=", "self", ".", "device", "\n", ")", "\n", "\n", "for", "n", "in", "range", "(", "bs", ")", ":", "\n", "                ", "theta_", "=", "theta", "[", "n", "]", "\n", "X", "[", "n", ",", ":", ",", ":", "]", "=", "self", ".", "_rsample", "(", "theta_", ")", "\n", "\n", "", "return", "X", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "_rsample", "(", "theta", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField._rsample": [[438, 478], ["torch.sqrt", "torch.sqrt", "S.sum().sum().squeeze", "isinstance", "torch.split", "Pv[].view", "Pv[].view", "len", "randomfields.DifferentiableGaussianRandomField._kernel.SDF", "randomfields.DifferentiableGaussianRandomField._kernel.SDF", "S.sum().sum", "torch.rand().view", "torch.rand().view", "torch.cos", "torch.cos", "S.sum", "torch.rand", "torch.rand"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.GaussianGridKernel.SDF", "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.GaussianGridKernel.SDF"], ["", "", "def", "_rsample", "(", "self", ",", "theta", ":", "torch", ".", "Tensor", "=", "None", ")", ":", "\n", "\n", "        ", "if", "not", "self", ".", "_precumptation", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "if", "theta", "is", "not", "None", ":", "\n", "            ", "assert", "isinstance", "(", "theta", ",", "torch", ".", "Tensor", ")", "\n", "assert", "(", "\n", "theta", ".", "ndim", "==", "1", "\n", ")", ",", "\"the internal _rsample function expects a one-dimensional tensor (transformed phase angles)\"", "\n", "assert", "len", "(", "theta", ")", "==", "self", ".", "_kernel", ".", "dim_phase_angles", "\n", "\n", "", "A1", "=", "torch", ".", "sqrt", "(", "self", ".", "_mask", "*", "self", ".", "_kernel", ".", "SDF", "(", "self", ".", "_vw1", ",", "self", ".", "_vw2", ")", ")", "\n", "A2", "=", "torch", ".", "sqrt", "(", "self", ".", "_mask", "*", "self", ".", "_kernel", ".", "SDF", "(", "self", ".", "_vw1", ",", "-", "self", ".", "_vw2", ")", ")", "\n", "\n", "if", "theta", "is", "None", ":", "\n", "            ", "P1", "=", "(", "\n", "torch", ".", "rand", "(", "self", ".", "_Nw", ",", "self", ".", "_Nw", ",", "dtype", "=", "A1", ".", "dtype", ",", "device", "=", "A1", ".", "device", ")", ".", "view", "(", "\n", "1", ",", "1", ",", "1", ",", "self", ".", "_Nw", ",", "self", ".", "_Nw", "\n", ")", "\n", "*", "2", "\n", "*", "self", ".", "_pi", "\n", ")", "\n", "P2", "=", "(", "\n", "torch", ".", "rand", "(", "self", ".", "_Nw", ",", "self", ".", "_Nw", ",", "dtype", "=", "A1", ".", "dtype", ",", "device", "=", "A1", ".", "device", ")", ".", "view", "(", "\n", "1", ",", "1", ",", "1", ",", "self", ".", "_Nw", ",", "self", ".", "_Nw", "\n", ")", "\n", "*", "2", "\n", "*", "self", ".", "_pi", "\n", ")", "\n", "", "else", ":", "\n", "            ", "Pv", "=", "torch", ".", "split", "(", "theta", ",", "self", ".", "_Nw", "**", "2", ")", "\n", "P1", "=", "Pv", "[", "0", "]", ".", "view", "(", "self", ".", "_Nw", ",", "self", ".", "_Nw", ")", "\n", "P2", "=", "Pv", "[", "1", "]", ".", "view", "(", "self", ".", "_Nw", ",", "self", ".", "_Nw", ")", "\n", "\n", "", "S", "=", "self", ".", "_sqrt2", "*", "(", "\n", "A1", "*", "torch", ".", "cos", "(", "self", ".", "_B1", "+", "P1", ")", "+", "A2", "*", "torch", ".", "cos", "(", "self", ".", "_B2", "+", "P2", ")", "\n", ")", "\n", "\n", "return", "S", ".", "sum", "(", "4", ")", ".", "sum", "(", "3", ")", ".", "squeeze", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.rsample_batch": [[479, 490], ["torch.zeros", "range", "randomfields.DifferentiableGaussianRandomField.rsample"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.rsample"], ["", "def", "rsample_batch", "(", "self", ",", "batch_size", ")", ":", "\n", "\n", "# just loop due to memory constraints", "\n", "        ", "X", "=", "torch", ".", "zeros", "(", "\n", "batch_size", ",", "self", ".", "_ns2", ",", "self", ".", "_ns1", ",", "dtype", "=", "self", ".", "dtype", ",", "device", "=", "self", ".", "device", "\n", ")", "\n", "\n", "for", "n", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "X", "[", "n", ",", ":", ",", ":", "]", "=", "self", ".", "rsample", "(", ")", "\n", "\n", "", "return", "X", "\n", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField._basis": [[491, 514], ["NotImplementedError", "torch.cos", "torch.cos", "randomfields.DifferentiableGaussianRandomField._vs1.view", "randomfields.DifferentiableGaussianRandomField._vw1.view", "randomfields.DifferentiableGaussianRandomField._vs2.view", "randomfields.DifferentiableGaussianRandomField._vw2.view", "randomfields.DifferentiableGaussianRandomField._vs1.view", "randomfields.DifferentiableGaussianRandomField._vw1.view", "randomfields.DifferentiableGaussianRandomField._vs2.view", "randomfields.DifferentiableGaussianRandomField._vw2.view"], "methods", ["None"], ["", "def", "_basis", "(", "self", ",", "ApplyCos", "=", "False", ")", ":", "\n", "\n", "        ", "if", "self", ".", "_dim", "==", "1", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "elif", "self", ".", "_dim", "==", "2", ":", "\n", "\n", "            ", "B1", "=", "self", ".", "_vs1", ".", "view", "(", "1", ",", "1", ",", "-", "1", ",", "1", ",", "1", ")", "*", "self", ".", "_vw1", ".", "view", "(", "\n", "1", ",", "1", ",", "1", ",", "1", ",", "-", "1", "\n", ")", "+", "self", ".", "_vs2", ".", "view", "(", "1", ",", "-", "1", ",", "1", ",", "1", ",", "1", ")", "*", "self", ".", "_vw2", ".", "view", "(", "1", ",", "1", ",", "1", ",", "-", "1", ",", "1", ")", "\n", "B2", "=", "self", ".", "_vs1", ".", "view", "(", "1", ",", "1", ",", "-", "1", ",", "1", ",", "1", ")", "*", "self", ".", "_vw1", ".", "view", "(", "\n", "1", ",", "1", ",", "1", ",", "1", ",", "-", "1", "\n", ")", "-", "self", ".", "_vs2", ".", "view", "(", "1", ",", "-", "1", ",", "1", ",", "1", ",", "1", ")", "*", "self", ".", "_vw2", ".", "view", "(", "1", ",", "1", ",", "1", ",", "-", "1", ",", "1", ")", "\n", "\n", "if", "ApplyCos", ":", "\n", "\n", "                ", "B1", "=", "torch", ".", "cos", "(", "B1", ")", "\n", "B2", "=", "torch", ".", "cos", "(", "B2", ")", "\n", "\n", "", "return", "B1", ",", "B2", "\n", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\n", "\"can only deal with random field in (spatial) dimension 2\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.illustrate_basis": [[516, 524], ["randomfields.DifferentiableGaussianRandomField._basis", "numpy.unravel_index", "B1[].squeeze().detach().cpu().numpy", "B2[].squeeze().detach().cpu().numpy", "B1[].squeeze().detach().cpu", "B2[].squeeze().detach().cpu", "B1[].squeeze().detach", "B2[].squeeze().detach", "B1[].squeeze", "B2[].squeeze"], "methods", ["home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField._basis"], ["", "", "def", "illustrate_basis", "(", "self", ",", "basis_fct_index", ":", "int", ")", ":", "\n", "\n", "        ", "B1", ",", "B2", "=", "self", ".", "_basis", "(", ")", "\n", "\n", "ind", "=", "np", ".", "unravel_index", "(", "basis_fct_index", ",", "(", "B1", ".", "shape", "[", "3", "]", ",", "B1", ".", "shape", "[", "4", "]", ")", ")", "\n", "return", "(", "\n", "B1", "[", ":", ",", ":", ",", ":", ",", "ind", "[", "0", "]", ",", "ind", "[", "1", "]", "]", ".", "squeeze", "(", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "B2", "[", ":", ",", ":", ",", ":", ",", "ind", "[", "0", "]", ",", "ind", "[", "1", "]", "]", ".", "squeeze", "(", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.bdevl_SMO.microstructure.randomfields.DifferentiableGaussianRandomField.sample_transformed_phase_angles": [[526, 530], ["torch.randn"], "methods", ["None"], ["", "def", "sample_transformed_phase_angles", "(", "self", ",", "N", ":", "int", ")", "->", "torch", ".", "Tensor", ":", "\n", "\n", "        ", "return", "torch", ".", "randn", "(", "\n", "N", ",", "self", ".", "kernel", ".", "dim_phase_angles", ",", "dtype", "=", "self", ".", "dtype", ",", "device", "=", "self", ".", "device", "\n", ")", "\n"]]}