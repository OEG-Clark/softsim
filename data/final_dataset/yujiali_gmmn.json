{"home.repos.pwc.inspect_result.yujiali_gmmn.None.generate_sample_figures.get_mnist_input_space_model": [[28, 32], ["core.StochasticGenerativeNet", "gen.StochasticGenerativeNet.load_model_from_file"], "function", ["None"], ["def", "get_mnist_input_space_model", "(", ")", ":", "\n", "    ", "net", "=", "gen", ".", "StochasticGenerativeNet", "(", ")", "\n", "net", ".", "load_model_from_file", "(", "BEST_MNIST_INPUT_SPACE_MODEL", ")", "\n", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.yujiali_gmmn.None.generate_sample_figures.get_mnist_code_space_model": [[33, 40], ["pynn.AutoEncoder", "nn.AutoEncoder.load_model_from_file", "core.StochasticGenerativeNetWithAutoencoder", "gen.StochasticGenerativeNetWithAutoencoder.load_model_from_file"], "function", ["None"], ["", "def", "get_mnist_code_space_model", "(", ")", ":", "\n", "    ", "ae", "=", "nn", ".", "AutoEncoder", "(", ")", "\n", "ae", ".", "load_model_from_file", "(", "BEST_MNIST_AUTOENCODER", ")", "\n", "net", "=", "gen", ".", "StochasticGenerativeNetWithAutoencoder", "(", ")", "\n", "net", ".", "load_model_from_file", "(", "BEST_MNIST_CODE_SPACE_MODEL", ")", "\n", "net", ".", "autoencoder", "=", "ae", "\n", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.yujiali_gmmn.None.generate_sample_figures.get_tfd_input_space_model": [[41, 45], ["core.StochasticGenerativeNet", "gen.StochasticGenerativeNet.load_model_from_file"], "function", ["None"], ["", "def", "get_tfd_input_space_model", "(", ")", ":", "\n", "    ", "net", "=", "gen", ".", "StochasticGenerativeNet", "(", ")", "\n", "net", ".", "load_model_from_file", "(", "BEST_TFD_INPUT_SPACE_MODEL", ")", "\n", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.yujiali_gmmn.None.generate_sample_figures.get_tfd_code_space_model": [[46, 53], ["pynn.AutoEncoder", "nn.AutoEncoder.load_model_from_file", "core.StochasticGenerativeNetWithAutoencoder", "gen.StochasticGenerativeNetWithAutoencoder.load_model_from_file"], "function", ["None"], ["", "def", "get_tfd_code_space_model", "(", ")", ":", "\n", "    ", "ae", "=", "nn", ".", "AutoEncoder", "(", ")", "\n", "ae", ".", "load_model_from_file", "(", "BEST_TFD_AUTOENCODER", ")", "\n", "net", "=", "gen", ".", "StochasticGenerativeNetWithAutoencoder", "(", ")", "\n", "net", ".", "load_model_from_file", "(", "BEST_TFD_CODE_SPACE_MODEL", ")", "\n", "net", ".", "autoencoder", "=", "ae", "\n", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.yujiali_gmmn.None.generate_sample_figures.get_model": [[54, 65], ["generate_sample_figures.get_mnist_input_space_model", "generate_sample_figures.get_mnist_code_space_model", "generate_sample_figures.get_tfd_input_space_model", "generate_sample_figures.get_tfd_code_space_model"], "function", ["home.repos.pwc.inspect_result.yujiali_gmmn.None.generate_sample_figures.get_mnist_input_space_model", "home.repos.pwc.inspect_result.yujiali_gmmn.None.generate_sample_figures.get_mnist_code_space_model", "home.repos.pwc.inspect_result.yujiali_gmmn.None.generate_sample_figures.get_tfd_input_space_model", "home.repos.pwc.inspect_result.yujiali_gmmn.None.generate_sample_figures.get_tfd_code_space_model"], ["", "def", "get_model", "(", "dataset", "=", "'mnist'", ",", "mode", "=", "'input_space'", ")", ":", "\n", "    ", "if", "dataset", "==", "'mnist'", ":", "\n", "        ", "if", "mode", "==", "'input_space'", ":", "\n", "            ", "return", "get_mnist_input_space_model", "(", ")", "\n", "", "elif", "mode", "==", "'code_space'", ":", "\n", "            ", "return", "get_mnist_code_space_model", "(", ")", "\n", "", "", "elif", "dataset", "==", "'tfd'", ":", "\n", "        ", "if", "mode", "==", "'input_space'", ":", "\n", "            ", "return", "get_tfd_input_space_model", "(", ")", "\n", "", "elif", "mode", "==", "'code_space'", ":", "\n", "            ", "return", "get_tfd_code_space_model", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yujiali_gmmn.None.generate_sample_figures.generate_samples": [[66, 74], ["generate_sample_figures.get_model", "matplotlib.figure", "vistools.bwpatchview", "matplotlib.savefig", "get_model.generate_samples().asarray", "os.path.exists", "os.makedirs", "get_model.generate_samples"], "function", ["home.repos.pwc.inspect_result.yujiali_gmmn.None.generate_sample_figures.get_model", "home.repos.pwc.inspect_result.yujiali_gmmn.None.vistools.bwpatchview", "home.repos.pwc.inspect_result.yujiali_gmmn.None.generate_sample_figures.generate_samples"], ["", "", "", "def", "generate_samples", "(", "dataset", "=", "'mnist'", ",", "mode", "=", "'input_space'", ")", ":", "\n", "    ", "imsz", "=", "[", "28", ",", "28", "]", "if", "dataset", "==", "'mnist'", "else", "[", "48", ",", "48", "]", "\n", "net", "=", "get_model", "(", "dataset", "=", "dataset", ",", "mode", "=", "mode", ")", "\n", "plt", ".", "figure", "(", ")", "\n", "vt", ".", "bwpatchview", "(", "net", ".", "generate_samples", "(", "n_samples", "=", "30", ")", ".", "asarray", "(", ")", ",", "imsz", ",", "5", ",", "gridintensity", "=", "1", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "'figs'", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "'figs'", ")", "\n", "", "plt", ".", "savefig", "(", "'figs/samples_%s_%s.pdf'", "%", "(", "dataset", ",", "mode", ")", ",", "bbox_inches", "=", "'tight'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yujiali_gmmn.None.generate_sample_figures.generate_all_samples": [[75, 78], ["generate_sample_figures.generate_samples", "generate_sample_figures.generate_samples"], "function", ["home.repos.pwc.inspect_result.yujiali_gmmn.None.generate_sample_figures.generate_samples", "home.repos.pwc.inspect_result.yujiali_gmmn.None.generate_sample_figures.generate_samples"], ["", "def", "generate_all_samples", "(", ")", ":", "\n", "    ", "generate_samples", "(", "dataset", "=", "'mnist'", ",", "mode", "=", "'input_space'", ")", "\n", "generate_samples", "(", "dataset", "=", "'mnist'", ",", "mode", "=", "'code_space'", ")", "\n", "#generate_samples(dataset='tfd', mode='input_space')", "\n"]], "home.repos.pwc.inspect_result.yujiali_gmmn.None.generate_sample_figures.load_train_data": [[81, 89], ["dataio.load_data", "dataio.load_proper_fold", "train_data.reshape.reshape", "numpy.prod"], "function", ["home.repos.pwc.inspect_result.yujiali_gmmn.dataio.mnist.load_data", "home.repos.pwc.inspect_result.yujiali_gmmn.dataio.tfd.load_proper_fold"], ["", "def", "load_train_data", "(", "dataset", "=", "'mnist'", ")", ":", "\n", "    ", "if", "dataset", "==", "'mnist'", ":", "\n", "        ", "train_data", ",", "_", ",", "_", "=", "mnistio", ".", "load_data", "(", ")", "\n", "", "elif", "dataset", "==", "'tfd'", ":", "\n", "        ", "train_data", ",", "_", ",", "_", "=", "tfd", ".", "load_proper_fold", "(", "0", ",", "'unlabeled'", ",", "scale", "=", "True", ")", "\n", "train_data", "=", "train_data", ".", "reshape", "(", "train_data", ".", "shape", "[", "0", "]", ",", "np", ".", "prod", "(", "train_data", ".", "shape", "[", "1", ":", "]", ")", ")", "\n", "\n", "", "return", "train_data", "\n", "\n"]], "home.repos.pwc.inspect_result.yujiali_gmmn.None.generate_sample_figures.get_nearest_neighbor": [[90, 99], ["generate_sample_figures.get_model", "generate_sample_figures.load_train_data", "visualize.nn_search", "os.path.exists", "os.makedirs", "get_model.generate_samples"], "function", ["home.repos.pwc.inspect_result.yujiali_gmmn.None.generate_sample_figures.get_model", "home.repos.pwc.inspect_result.yujiali_gmmn.None.generate_sample_figures.load_train_data", "home.repos.pwc.inspect_result.yujiali_gmmn.None.generate_sample_figures.generate_samples"], ["", "def", "get_nearest_neighbor", "(", "dataset", "=", "'mnist'", ",", "mode", "=", "'input_space'", ")", ":", "\n", "    ", "imsz", "=", "[", "28", ",", "28", "]", "if", "dataset", "==", "'mnist'", "else", "[", "48", ",", "48", "]", "\n", "net", "=", "get_model", "(", "dataset", "=", "dataset", ",", "mode", "=", "mode", ")", "\n", "train_data", "=", "load_train_data", "(", "dataset", "=", "dataset", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "'figs'", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "'figs'", ")", "\n", "", "vis", ".", "nn_search", "(", "net", ".", "generate_samples", "(", "n_samples", "=", "12", ")", ",", "train_data", ",", "top_k", "=", "1", ",", "imsz", "=", "imsz", ",", "\n", "orientation", "=", "'horizontal'", ",", "output_file", "=", "'figs/nn_%s_%s.pdf'", "%", "(", "dataset", ",", "mode", ")", ",", "pad", "=", "0.1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yujiali_gmmn.None.generate_sample_figures.get_all_nearest_neighbors": [[100, 103], ["generate_sample_figures.get_nearest_neighbor", "generate_sample_figures.get_nearest_neighbor"], "function", ["home.repos.pwc.inspect_result.yujiali_gmmn.None.generate_sample_figures.get_nearest_neighbor", "home.repos.pwc.inspect_result.yujiali_gmmn.None.generate_sample_figures.get_nearest_neighbor"], ["", "def", "get_all_nearest_neighbors", "(", ")", ":", "\n", "    ", "get_nearest_neighbor", "(", "dataset", "=", "'mnist'", ",", "mode", "=", "'input_space'", ")", "\n", "get_nearest_neighbor", "(", "dataset", "=", "'mnist'", ",", "mode", "=", "'code_space'", ")", "\n", "#get_nearest_neighbor(dataset='tfd', mode='input_space')", "\n"]], "home.repos.pwc.inspect_result.yujiali_gmmn.None.generate_sample_figures.get_morphing_figure": [[106, 116], ["generate_sample_figures.get_model", "matplotlib.figure", "gnumpy.seed_rand", "visualize.generation_on_a_line", "matplotlib.savefig", "os.path.exists", "os.makedirs", "get_model.sample_hiddens"], "function", ["home.repos.pwc.inspect_result.yujiali_gmmn.None.generate_sample_figures.get_model"], ["", "def", "get_morphing_figure", "(", "dataset", "=", "'mnist'", ",", "mode", "=", "'input_space'", ")", ":", "\n", "    ", "imsz", "=", "[", "28", ",", "28", "]", "if", "dataset", "==", "'mnist'", "else", "[", "48", ",", "48", "]", "\n", "net", "=", "get_model", "(", "dataset", "=", "dataset", ",", "mode", "=", "mode", ")", "\n", "plt", ".", "figure", "(", ")", "\n", "gnp", ".", "seed_rand", "(", "8", ")", "\n", "vis", ".", "generation_on_a_line", "(", "net", ",", "n_points", "=", "24", ",", "imsz", "=", "imsz", ",", "nrows", "=", "10", ",", "h_seeds", "=", "net", ".", "sample_hiddens", "(", "5", ")", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "'figs'", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "'figs'", ")", "\n", "", "plt", ".", "savefig", "(", "'figs/morphing_%s_%s.pdf'", "%", "(", "dataset", ",", "mode", ")", ",", "bbox_inches", "=", "'tight'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yujiali_gmmn.None.generate_sample_figures.get_all_morphing_figures": [[117, 119], ["generate_sample_figures.get_morphing_figure"], "function", ["home.repos.pwc.inspect_result.yujiali_gmmn.None.generate_sample_figures.get_morphing_figure"], ["", "def", "get_all_morphing_figures", "(", ")", ":", "\n", "    ", "get_morphing_figure", "(", "dataset", "=", "'mnist'", ",", "mode", "=", "'code_space'", ")", "\n", "#get_morphing_figure(dataset='tfd', mode='code_space')", "\n"]], "home.repos.pwc.inspect_result.yujiali_gmmn.None.vistools.bwpatchview": [[9, 55], ["range", "matplotlib.show", "numpy.ones", "range", "ax.imshow", "ax.axis", "matplotlib.imshow", "matplotlib.axis", "data[].reshape", "data[].reshape"], "function", ["None"], ["def", "bwpatchview", "(", "data", ",", "imsz", ",", "nrows", ",", "gridwidth", "=", "1", ",", "gridintensity", "=", "0", ",", "rowmajor", "=", "True", ",", "ax", "=", "None", ")", ":", "\n", "    ", "\"\"\"Display a list of images in grid view.\n\n    data: N*D matrix, each row is an image\n    imsz: 2-D tuple, size of the images\n    nrows: number of rows to arrange the images in a plot\n    gridwidth: number of pixels to use for the grid\n    gridintensity: the intensity value for the grid\n    rowmajor: are the images stored in a row-major order or coloumn-major order\n    ax: if provided, the image will be shown on the given axis.\n\n    The images are orgainzed in rows from left to right.\n    \"\"\"", "\n", "\n", "N", ",", "D", "=", "data", ".", "shape", "\n", "sx", ",", "sy", "=", "imsz", "\n", "\n", "ncols", "=", "N", "//", "nrows", "\n", "if", "N", "%", "nrows", ":", "\n", "        ", "ncols", "+=", "1", "\n", "\n", "", "img", "=", "np", ".", "ones", "(", "(", "sx", "*", "nrows", "+", "gridwidth", "*", "(", "nrows", "+", "1", ")", ",", "\n", "sy", "*", "ncols", "+", "gridwidth", "*", "(", "ncols", "+", "1", ")", ")", ")", "*", "gridintensity", "\n", "\n", "for", "ix", "in", "range", "(", "0", ",", "nrows", ")", ":", "\n", "        ", "for", "iy", "in", "range", "(", "0", ",", "ncols", ")", ":", "\n", "            ", "idx", "=", "ix", "*", "ncols", "+", "iy", "\n", "if", "idx", ">=", "N", ":", "\n", "                ", "break", "\n", "", "xstart", "=", "gridwidth", "+", "ix", "*", "(", "sx", "+", "gridwidth", ")", "\n", "xend", "=", "xstart", "+", "sx", "\n", "ystart", "=", "gridwidth", "+", "iy", "*", "(", "sy", "+", "gridwidth", ")", "\n", "yend", "=", "ystart", "+", "sy", "\n", "\n", "if", "rowmajor", ":", "\n", "                ", "img", "[", "xstart", ":", "xend", ",", "ystart", ":", "yend", "]", "=", "data", "[", "idx", "]", ".", "reshape", "(", "imsz", ")", "\n", "", "else", ":", "\n", "                ", "img", "[", "xstart", ":", "xend", ",", "ystart", ":", "yend", "]", "=", "data", "[", "idx", "]", ".", "reshape", "(", "(", "imsz", "[", "1", "]", ",", "imsz", "[", "0", "]", ")", ")", ".", "T", "\n", "\n", "", "", "", "if", "ax", "!=", "None", ":", "\n", "        ", "ax", ".", "imshow", "(", "img", ",", "cmap", "=", "'gray'", ",", "interpolation", "=", "'nearest'", ")", "\n", "ax", ".", "axis", "(", "'off'", ")", "\n", "", "else", ":", "\n", "        ", "plt", ".", "imshow", "(", "img", ",", "cmap", "=", "'gray'", ",", "interpolation", "=", "'nearest'", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yujiali_gmmn.None.vistools.cpatchview": [[56, 110], ["range", "matplotlib.show", "numpy.ones", "range", "ax.axis", "matplotlib.axis", "ax.imshow", "ax.imshow", "matplotlib.imshow", "matplotlib.imshow", "data[].reshape().transpose", "data[].reshape().transpose", "data[].reshape", "data[].reshape", "img.min", "img.min", "img.max", "img.min", "img.max", "img.min"], "function", ["None"], ["", "def", "cpatchview", "(", "data", ",", "imsz", ",", "nrows", ",", "gridwidth", "=", "1", ",", "gridintensity", "=", "0", ",", "rowmajor", "=", "True", ",", "ax", "=", "None", ",", "normalize", "=", "False", ")", ":", "\n", "    ", "\"\"\"Display a list of color images in grid view.\n\n    data: N*(3*D) matrix, each row is a color image\n    imsz: 2-D tuple, size of the images, should have prod(imsz)=D\n    nrows: number of rows to arrange the images in a plot\n    gridwidth: number of pixels to use for the grid\n    gridintensity: the intensity value for the grid\n    rowmajor: specify whether the images are stored in row-major order or \n        column-major order\n    ax: if provided, the image will be shown on the given axis.\n    normalize: if set and data is real valued, data is normalized to within [0,1]\n    \n    The images are organized in rows from left to right.\n    \"\"\"", "\n", "N", ",", "D", "=", "data", ".", "shape", "\n", "D", "=", "D", "/", "3", "\n", "sx", ",", "sy", "=", "imsz", "\n", "\n", "ncols", "=", "N", "/", "nrows", "\n", "if", "N", "%", "nrows", ":", "\n", "        ", "ncols", "+=", "1", "\n", "\n", "", "img", "=", "np", ".", "ones", "(", "(", "sx", "*", "nrows", "+", "gridwidth", "*", "(", "nrows", "+", "1", ")", ",", "\n", "sy", "*", "ncols", "+", "gridwidth", "*", "(", "ncols", "+", "1", ")", ",", "3", ")", ",", "dtype", "=", "data", ".", "dtype", ")", "*", "gridintensity", "\n", "\n", "for", "ix", "in", "range", "(", "0", ",", "nrows", ")", ":", "\n", "        ", "for", "iy", "in", "range", "(", "0", ",", "ncols", ")", ":", "\n", "            ", "idx", "=", "ix", "*", "ncols", "+", "iy", "\n", "if", "idx", ">=", "N", ":", "\n", "                ", "break", "\n", "", "xstart", "=", "gridwidth", "+", "ix", "*", "(", "sx", "+", "gridwidth", ")", "\n", "xend", "=", "xstart", "+", "sx", "\n", "ystart", "=", "gridwidth", "+", "iy", "*", "(", "sy", "+", "gridwidth", ")", "\n", "yend", "=", "ystart", "+", "sy", "\n", "\n", "if", "rowmajor", ":", "\n", "                ", "img", "[", "xstart", ":", "xend", ",", "ystart", ":", "yend", ",", ":", "]", "=", "data", "[", "idx", "]", ".", "reshape", "(", "(", "3", ",", "sx", ",", "sy", ")", ")", ".", "transpose", "(", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "", "else", ":", "\n", "                ", "img", "[", "xstart", ":", "xend", ",", "ystart", ":", "yend", "]", "=", "data", "[", "idx", "]", ".", "reshape", "(", "(", "3", ",", "sy", ",", "sx", ")", ")", ".", "transpose", "(", "(", "2", ",", "1", ",", "0", ")", ")", "\n", "\n", "", "", "", "if", "ax", "!=", "None", ":", "\n", "        ", "if", "normalize", ":", "\n", "            ", "ax", ".", "imshow", "(", "(", "img", "-", "img", ".", "min", "(", ")", ")", "/", "(", "img", ".", "max", "(", ")", "-", "img", ".", "min", "(", ")", "+", "1e-20", ")", ",", "interpolation", "=", "'nearest'", ")", "\n", "", "else", ":", "\n", "            ", "ax", ".", "imshow", "(", "img", ",", "interpolation", "=", "'nearest'", ")", "\n", "", "ax", ".", "axis", "(", "'off'", ")", "\n", "", "else", ":", "\n", "        ", "if", "normalize", ":", "\n", "            ", "plt", ".", "imshow", "(", "(", "img", "-", "img", ".", "min", "(", ")", ")", "/", "(", "img", ".", "max", "(", ")", "-", "img", ".", "min", "(", ")", "+", "1e-20", ")", ",", "interpolation", "=", "'nearest'", ")", "\n", "", "else", ":", "\n", "            ", "plt", ".", "imshow", "(", "img", ",", "interpolation", "=", "'nearest'", ")", "\n", "", "plt", ".", "axis", "(", "'off'", ")", "\n", "", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yujiali_gmmn.None.vistools.listpatchview": [[111, 164], ["len", "range", "ax.axis", "matplotlib.show", "range", "ax.imshow", "ax.imshow", "len", "numpy.ones", "numpy.ones"], "function", ["None"], ["", "def", "listpatchview", "(", "data", ",", "nrows", ",", "gridwidth", "=", "1", ",", "gridintensity", "=", "0", ",", "ax", "=", "None", ")", ":", "\n", "    ", "\"\"\"Display a list of images in grid view.\n\n    data: a list of images of the same size, can be either color or gray\n        images, but should be consistent.\n    nrows: number of rows to arrange the images in a plot\n    gridwidth: number of pixels to use for the grid\n    gridintensity: the intensity value for the grid\n    ax: if provided, the image will be shown on the given axis\n    \n    The images are organized in rows from left to right.\n    \"\"\"", "\n", "N", "=", "len", "(", "data", ")", "\n", "sx", ",", "sy", "=", "data", "[", "0", "]", ".", "shape", "[", ":", "2", "]", "\n", "D", "=", "sx", "*", "sy", "\n", "\n", "ncols", "=", "N", "/", "nrows", "\n", "if", "N", "%", "nrows", ":", "\n", "        ", "ncols", "+=", "1", "\n", "\n", "", "if", "len", "(", "data", "[", "0", "]", ".", "shape", ")", "<", "3", "or", "data", "[", "0", "]", ".", "shape", "[", "2", "]", "==", "1", ":", "\n", "        ", "n_color", "=", "1", "\n", "img", "=", "np", ".", "ones", "(", "(", "sx", "*", "nrows", "+", "gridwidth", "*", "(", "nrows", "+", "1", ")", ",", "\n", "sy", "*", "ncols", "+", "gridwidth", "*", "(", "ncols", "+", "1", ")", ")", ",", "dtype", "=", "data", "[", "0", "]", ".", "dtype", ")", "*", "gridintensity", "\n", "", "else", ":", "\n", "        ", "n_color", "=", "3", "\n", "assert", "(", "data", "[", "0", "]", ".", "shape", "[", "2", "]", "==", "n_color", ")", "\n", "img", "=", "np", ".", "ones", "(", "(", "sx", "*", "nrows", "+", "gridwidth", "*", "(", "nrows", "+", "1", ")", ",", "\n", "sy", "*", "ncols", "+", "gridwidth", "*", "(", "ncols", "+", "1", ")", ",", "n_color", ")", ",", "dtype", "=", "data", "[", "0", "]", ".", "dtype", ")", "*", "gridintensity", "\n", "\n", "", "for", "ix", "in", "range", "(", "0", ",", "nrows", ")", ":", "\n", "        ", "for", "iy", "in", "range", "(", "0", ",", "ncols", ")", ":", "\n", "            ", "idx", "=", "ix", "*", "ncols", "+", "iy", "\n", "if", "idx", ">=", "N", ":", "\n", "                ", "break", "\n", "", "xstart", "=", "gridwidth", "+", "ix", "*", "(", "sx", "+", "gridwidth", ")", "\n", "xend", "=", "xstart", "+", "sx", "\n", "ystart", "=", "gridwidth", "+", "iy", "*", "(", "sy", "+", "gridwidth", ")", "\n", "yend", "=", "ystart", "+", "sy", "\n", "\n", "if", "n_color", "==", "3", ":", "\n", "                ", "img", "[", "xstart", ":", "xend", ",", "ystart", ":", "yend", ",", ":", "]", "=", "data", "[", "idx", "]", "\n", "", "else", ":", "\n", "                ", "img", "[", "xstart", ":", "xend", ",", "ystart", ":", "yend", "]", "=", "data", "[", "idx", "]", "\n", "\n", "", "", "", "if", "ax", "==", "None", ":", "\n", "        ", "ax", "=", "plt", "\n", "", "if", "n_color", "==", "3", ":", "\n", "        ", "ax", ".", "imshow", "(", "img", ",", "interpolation", "=", "'nearest'", ")", "\n", "", "else", ":", "\n", "        ", "ax", ".", "imshow", "(", "img", ",", "cmap", "=", "'gray'", ",", "interpolation", "=", "'nearest'", ")", "\n", "", "ax", ".", "axis", "(", "'off'", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yujiali_gmmn.None.vistools.plot2dgaussian": [[165, 189], ["numpy.linalg.eig", "numpy.sqrt().reshape", "numpy.zeros", "range", "matplotlib.show", "ax.plot", "ax.plot", "numpy.sqrt", "numpy.array", "numpy.cos", "numpy.sin"], "function", ["None"], ["", "def", "plot2dgaussian", "(", "mu", ",", "sigma", ",", "npoints", "=", "100", ",", "linespec", "=", "None", ",", "linewidth", "=", "1", ",", "ax", "=", "None", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Plot a 2D Gaussian distribution. Showing on the plot are the mean of \n    the Gaussian and an ellipse corresponding to 1 standard deviation (not\n    strictly speaking standard deviation, but similar).\n    \"\"\"", "\n", "eig", ",", "Q", "=", "np", ".", "linalg", ".", "eig", "(", "sigma", ")", "\n", "scale", "=", "np", ".", "sqrt", "(", "eig", ")", ".", "reshape", "(", "1", ",", "2", ")", "\n", "\n", "x", "=", "np", ".", "zeros", "(", "(", "npoints", "+", "1", ",", "2", ")", ")", "\n", "\n", "for", "n", "in", "range", "(", "npoints", ")", ":", "\n", "        ", "angle", "=", "2", "*", "np", ".", "pi", "*", "n", "/", "npoints", "\n", "x", "[", "n", ",", ":", "]", "=", "mu", "+", "(", "scale", "*", "np", ".", "array", "(", "[", "[", "np", ".", "cos", "(", "angle", ")", ",", "np", ".", "sin", "(", "angle", ")", "]", "]", ")", ")", ".", "dot", "(", "Q", ".", "T", ")", "\n", "\n", "", "x", "[", "npoints", ",", ":", "]", "=", "x", "[", "0", ",", ":", "]", "\n", "\n", "if", "ax", "==", "None", ":", "\n", "        ", "ax", "=", "plt", "\n", "\n", "", "if", "linespec", ":", "\n", "        ", "ax", ".", "plot", "(", "x", "[", ":", ",", "0", "]", ",", "x", "[", ":", ",", "1", "]", ",", "linespec", ",", "linewidth", "=", "linewidth", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "        ", "ax", ".", "plot", "(", "x", "[", ":", ",", "0", "]", ",", "x", "[", ":", ",", "1", "]", ",", "linewidth", "=", "linewidth", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yujiali_gmmn.None.vistools.intarray_to_rgb": [[190, 207], ["numpy.zeros", "isinstance", "isinstance", "range"], "function", ["None"], ["", "def", "intarray_to_rgb", "(", "x", ",", "cmap", ")", ":", "\n", "    ", "\"\"\"\n    x: MxN is an array of int indices into the cmap\n    cmap: int->(r,g,b) mapping\n\n    Return converted y of shape MxNx3\n    \"\"\"", "\n", "y", "=", "np", ".", "zeros", "(", "(", "x", ".", "shape", "[", "0", "]", ",", "x", ".", "shape", "[", "1", "]", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "if", "isinstance", "(", "cmap", ",", "dict", ")", ":", "\n", "        ", "for", "c", "in", "cmap", ":", "\n", "            ", "y", "[", "x", "==", "c", "]", "=", "cmap", "[", "c", "]", "\n", "", "", "elif", "isinstance", "(", "cmap", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "cmap", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "y", "[", "x", "==", "i", "]", "=", "cmap", "[", "i", "]", "\n", "\n", "", "", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.yujiali_gmmn.None.vistools.pil_png_cmap_to_dict": [[208, 223], ["numpy.array().reshape", "range", "numpy.array", "len"], "function", ["None"], ["", "def", "pil_png_cmap_to_dict", "(", "pil_palette", ")", ":", "\n", "    ", "\"\"\"\n    // cmap is a color map from PIL after loading a color png file. Format: list\n    // of (rgb, idx) tuples. rgb is an integer representation of the RGB value.\n\n    pil_palette is a list of palette values. Should be 3xC where C is the \n    number of colors.\n\n    Return a dict of (idx -> (r,g,b)).\n    \"\"\"", "\n", "cm", "=", "{", "}", "\n", "p", "=", "np", ".", "array", "(", "pil_palette", ",", "dtype", "=", "np", ".", "uint8", ")", ".", "reshape", "(", "len", "(", "pil_palette", ")", "/", "3", ",", "3", ")", "\n", "for", "i", "in", "range", "(", "p", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "cm", "[", "i", "]", "=", "p", "[", "i", "]", "\n", "", "return", "cm", "\n", "\n"]], "home.repos.pwc.inspect_result.yujiali_gmmn.dataio.mnist.load_raw_data": [[20, 28], ["open", "cPickle.load"], "function", ["None"], ["def", "load_raw_data", "(", ")", ":", "\n", "    ", "\"\"\"\n    Return the original train/test split.\n    \"\"\"", "\n", "with", "open", "(", "_DATA_FILE_PATH", ")", "as", "f", ":", "\n", "        ", "d", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "return", "d", "[", "'train_data'", "]", ",", "d", "[", "'test_data'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yujiali_gmmn.dataio.mnist.load_data": [[29, 53], ["numpy.random.get_state", "numpy.random.seed", "numpy.random.permutation", "numpy.random.set_state", "open", "cPickle.load"], "function", ["None"], ["", "def", "load_data", "(", ")", ":", "\n", "    ", "\"\"\"\n    Split part of training data to be used as validation data.\n    \"\"\"", "\n", "with", "open", "(", "_DATA_FILE_PATH", ")", "as", "f", ":", "\n", "        ", "d", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "x_train", "=", "d", "[", "'train_data'", "]", "\n", "x_test", "=", "d", "[", "'test_data'", "]", "\n", "\n", "# keep current state of random number generator", "\n", "rand_state", "=", "np", ".", "random", ".", "get_state", "(", ")", "\n", "\n", "np", ".", "random", ".", "seed", "(", "0", ")", "\n", "idx", "=", "np", ".", "random", ".", "permutation", "(", "x_train", ".", "shape", "[", "0", "]", ")", "\n", "\n", "n_val", "=", "5000", "\n", "x_val", "=", "x_train", "[", "idx", "[", ":", "n_val", "]", "]", "\n", "x_train", "=", "x_train", "[", "idx", "[", "n_val", ":", "]", "]", "\n", "\n", "# restore the state of random number generator", "\n", "np", ".", "random", ".", "set_state", "(", "rand_state", ")", "\n", "\n", "return", "x_train", ",", "x_val", ",", "x_test", "\n", "\n"]], "home.repos.pwc.inspect_result.yujiali_gmmn.dataio.mnist.load_labeled_data": [[54, 80], ["numpy.random.get_state", "numpy.random.seed", "numpy.random.permutation", "numpy.random.set_state", "open", "cPickle.load"], "function", ["None"], ["", "def", "load_labeled_data", "(", "n_val", "=", "5000", ")", ":", "\n", "    ", "\"\"\"\n    Load both the data and the labels.\n    \"\"\"", "\n", "with", "open", "(", "_DATA_FILE_PATH", ")", "as", "f", ":", "\n", "        ", "d", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "x_train", "=", "d", "[", "'train_data'", "]", "\n", "t_train", "=", "d", "[", "'train_label'", "]", "\n", "\n", "x_test", "=", "d", "[", "'test_data'", "]", "\n", "t_test", "=", "d", "[", "'test_label'", "]", "\n", "\n", "rand_state", "=", "np", ".", "random", ".", "get_state", "(", ")", "\n", "\n", "np", ".", "random", ".", "seed", "(", "0", ")", "\n", "idx", "=", "np", ".", "random", ".", "permutation", "(", "x_train", ".", "shape", "[", "0", "]", ")", "\n", "\n", "x_val", "=", "x_train", "[", "idx", "[", ":", "n_val", "]", "]", "\n", "t_val", "=", "t_train", "[", "idx", "[", ":", "n_val", "]", "]", "\n", "x_train", "=", "x_train", "[", "idx", "[", "n_val", ":", "]", "]", "\n", "t_train", "=", "t_train", "[", "idx", "[", "n_val", ":", "]", "]", "\n", "\n", "np", ".", "random", ".", "set_state", "(", "rand_state", ")", "\n", "\n", "return", "x_train", ",", "t_train", ",", "x_val", ",", "t_val", ",", "x_test", ",", "t_test", "\n", "\n"]], "home.repos.pwc.inspect_result.yujiali_gmmn.dataio.tfd.TFD.__init__": [[26, 32], ["tfd._load_raw_data", "numpy.array().cumsum", "range", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.yujiali_gmmn.dataio.tfd._load_raw_data"], ["    ", "def", "__init__", "(", "self", ",", "image_size", "=", "48", ")", ":", "\n", "        ", "self", ".", "images", ",", "self", ".", "folds", ",", "self", ".", "labs_id", ",", "self", ".", "labs_ex", "=", "_load_raw_data", "(", "image_size", ")", "\n", "\n", "self", ".", "_val_sizes", "=", "[", "(", "self", ".", "folds", "[", ":", ",", "fold", "]", "==", "2", ")", ".", "sum", "(", ")", "for", "fold", "in", "range", "(", "5", ")", "]", "\n", "self", ".", "_val_idx_start", "=", "np", ".", "array", "(", "[", "0", "]", "+", "self", ".", "_val_sizes", ")", ".", "cumsum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yujiali_gmmn.dataio.tfd.TFD.get_fold": [[33, 61], ["tfd.TFD.images[].astype"], "methods", ["None"], ["", "def", "get_fold", "(", "self", ",", "fold", ",", "set_name", ",", "center", "=", "False", ",", "scale", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        0 <= fold < 5\n        set_name should be one of {train, val, test, unlabeled}\n\n        Return images, labs_id, and labs_ex.\n\n        There are two labels available: identity and expression.  For \n        unsupervised learning tasks these labels are not useful though.  The\n        quality of these labels are also not very high.\n        \"\"\"", "\n", "set_map", "=", "{", "'unlabeled'", ":", "0", ",", "'train'", ":", "1", ",", "'val'", ":", "2", ",", "'test'", ":", "3", "}", "\n", "set_id", "=", "set_map", "[", "set_name", "]", "\n", "data_mask", "=", "(", "self", ".", "folds", "[", ":", ",", "fold", "]", "==", "set_id", ")", "\n", "\n", "images", "=", "self", ".", "images", "[", "data_mask", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "labs_id", "=", "self", ".", "labs_id", "[", "data_mask", "]", "\n", "labs_ex", "=", "self", ".", "labs_ex", "[", "data_mask", "]", "\n", "\n", "if", "center", "and", "scale", ":", "\n", "            ", "images", "-=", "127.5", "\n", "images", "/=", "127.5", "\n", "", "elif", "center", ":", "\n", "            ", "images", "-=", "127.5", "\n", "", "elif", "scale", ":", "\n", "            ", "images", "/=", "255.0", "\n", "\n", "", "return", "images", ",", "labs_id", ",", "labs_ex", "\n", "\n"]], "home.repos.pwc.inspect_result.yujiali_gmmn.dataio.tfd.TFD.get_proper_fold": [[62, 95], ["tfd.TFD.images[].astype", "tfd.get_fixed_rand_permutation", "numpy.zeros", "numpy.arange"], "methods", ["home.repos.pwc.inspect_result.yujiali_gmmn.dataio.tfd.get_fixed_rand_permutation"], ["", "def", "get_proper_fold", "(", "self", ",", "fold", ",", "set_name", ",", "center", "=", "False", ",", "scale", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Same as get_fold, except that the validation sets across folds will be\n        disjoint from test sets and training sets - so validation is proper.\n        \"\"\"", "\n", "set_map", "=", "{", "'unlabeled'", ":", "0", ",", "'train'", ":", "1", ",", "'val'", ":", "2", ",", "'test'", ":", "3", "}", "\n", "set_id", "=", "set_map", "[", "set_name", "]", "\n", "\n", "if", "set_id", "==", "0", "or", "set_id", "==", "2", ":", "\n", "            ", "data_mask", "=", "(", "self", ".", "folds", "[", ":", ",", "fold", "]", "==", "0", ")", "\n", "unlabeled_idx", "=", "np", ".", "arange", "(", "self", ".", "folds", ".", "shape", "[", "0", "]", ")", "[", "data_mask", "]", "\n", "idx", "=", "get_fixed_rand_permutation", "(", "unlabeled_idx", ".", "size", ")", "\n", "data_mask", "=", "np", ".", "zeros", "(", "data_mask", ".", "size", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "if", "set_id", "==", "2", ":", "\n", "                ", "data_mask", "[", "idx", "[", "self", ".", "_val_idx_start", "[", "fold", "]", ":", "self", ".", "_val_idx_start", "[", "fold", "+", "1", "]", "]", "]", "=", "True", "\n", "", "else", ":", "\n", "                ", "data_mask", "[", "idx", "[", "self", ".", "_val_idx_start", "[", "-", "1", "]", ":", "]", "]", "=", "True", "\n", "", "", "else", ":", "\n", "            ", "data_mask", "=", "(", "self", ".", "folds", "[", ":", ",", "fold", "]", "==", "set_id", ")", "\n", "\n", "", "images", "=", "self", ".", "images", "[", "data_mask", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "labs_id", "=", "self", ".", "labs_id", "[", "data_mask", "]", "\n", "labs_ex", "=", "self", ".", "labs_ex", "[", "data_mask", "]", "\n", "\n", "if", "center", "and", "scale", ":", "\n", "            ", "images", "-=", "127.5", "\n", "images", "/=", "127.5", "\n", "", "elif", "center", ":", "\n", "            ", "images", "-=", "127.5", "\n", "", "elif", "scale", ":", "\n", "            ", "images", "/=", "255.0", "\n", "\n", "", "return", "images", ",", "labs_id", ",", "labs_ex", "\n", "\n"]], "home.repos.pwc.inspect_result.yujiali_gmmn.dataio.tfd._load_raw_data": [[13, 16], ["scipy.loadmat", "d[].squeeze", "d[].squeeze"], "function", ["None"], ["def", "_load_raw_data", "(", "image_size", "=", "48", ")", ":", "\n", "    ", "d", "=", "sio", ".", "loadmat", "(", "_TFD_DATA_PATH_FORMAT", "%", "(", "image_size", ",", "image_size", ")", ")", "\n", "return", "d", "[", "'images'", "]", ",", "d", "[", "'folds'", "]", ",", "d", "[", "'labs_id'", "]", ".", "squeeze", "(", ")", ",", "d", "[", "'labs_ex'", "]", ".", "squeeze", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yujiali_gmmn.dataio.tfd.get_fixed_rand_permutation": [[17, 24], ["numpy.random.get_state", "numpy.random.seed", "numpy.random.permutation", "numpy.random.set_state"], "function", ["None"], ["", "def", "get_fixed_rand_permutation", "(", "size", ",", "seed", "=", "1", ")", ":", "\n", "    ", "rand_state", "=", "np", ".", "random", ".", "get_state", "(", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "idx", "=", "np", ".", "random", ".", "permutation", "(", "size", ")", "\n", "np", ".", "random", ".", "set_state", "(", "rand_state", ")", "\n", "\n", "return", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.yujiali_gmmn.dataio.tfd.load_fold": [[100, 108], ["_tfd[].get_fold", "Exception", "tfd.TFD"], "function", ["home.repos.pwc.inspect_result.yujiali_gmmn.dataio.tfd.TFD.get_fold"], ["def", "load_fold", "(", "fold", ",", "set_name", ",", "center", "=", "False", ",", "scale", "=", "False", ",", "image_size", "=", "48", ")", ":", "\n", "    ", "if", "image_size", "!=", "48", "and", "image_size", "!=", "96", ":", "\n", "        ", "raise", "Exception", "(", "'image_size has to be either 48 or 96!'", ")", "\n", "\n", "", "if", "_tfd", "[", "image_size", "]", "is", "None", ":", "\n", "        ", "_tfd", "[", "image_size", "]", "=", "TFD", "(", "image_size", ")", "# load data the first time we use it", "\n", "\n", "", "return", "_tfd", "[", "image_size", "]", ".", "get_fold", "(", "fold", ",", "set_name", ",", "center", ",", "scale", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yujiali_gmmn.dataio.tfd.load_proper_fold": [[109, 117], ["_tfd[].get_proper_fold", "Exception", "tfd.TFD"], "function", ["home.repos.pwc.inspect_result.yujiali_gmmn.dataio.tfd.TFD.get_proper_fold"], ["", "def", "load_proper_fold", "(", "fold", ",", "set_name", ",", "center", "=", "False", ",", "scale", "=", "False", ",", "image_size", "=", "48", ")", ":", "\n", "    ", "if", "image_size", "!=", "48", "and", "image_size", "!=", "96", ":", "\n", "        ", "raise", "Exception", "(", "'image_size has to be either 48 or 96!'", ")", "\n", "\n", "", "if", "_tfd", "[", "image_size", "]", "is", "None", ":", "\n", "        ", "_tfd", "[", "image_size", "]", "=", "TFD", "(", "image_size", ")", "# load data the first time we use it", "\n", "\n", "", "return", "_tfd", "[", "image_size", "]", ".", "get_proper_fold", "(", "fold", ",", "set_name", ",", "center", ",", "scale", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yujiali_gmmn.core.kernels.Kernel.__init__": [[22, 24], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.yujiali_gmmn.core.kernels.Kernel.compute_kernel_matrix": [[25, 32], ["kernels.Kernel.compute_kernel_transformation"], "methods", ["home.repos.pwc.inspect_result.yujiali_gmmn.core.kernels.CosineKernel.compute_kernel_transformation"], ["", "def", "compute_kernel_matrix", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        x: n_examples * n_dims input data matrix\n\n        Return: n_examples * n_examples kernel matrix\n        \"\"\"", "\n", "return", "self", ".", "compute_kernel_transformation", "(", "x", ",", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yujiali_gmmn.core.kernels.Kernel.compute_kernel_transformation": [[33, 43], ["NotImplementedError"], "methods", ["None"], ["", "def", "compute_kernel_transformation", "(", "self", ",", "x_base", ",", "x_new", ")", ":", "\n", "        ", "\"\"\"\n        x_base: n_examples_1 * n_dims data matrix\n        x_new: n_examples_2 * n_dims data matrix\n\n        For each example in x_new, compute its kernel distance with each of the\n        examples in x_base, return a n_examples_2 * n_examples_1 matrix as the\n        transformed representation of x_new.\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yujiali_gmmn.core.kernels.Kernel.get_name": [[44, 46], ["NotImplementedError"], "methods", ["None"], ["", "def", "get_name", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yujiali_gmmn.core.kernels.GaussianKernel.__init__": [[48, 50], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "sigma", ")", ":", "\n", "        ", "self", ".", "sigma", "=", "sigma", "\n", "\n"]], "home.repos.pwc.inspect_result.yujiali_gmmn.core.kernels.GaussianKernel.compute_kernel_matrix": [[51, 57], ["x.dot", "kernels.safe_diag", "gnumpy.exp", "isinstance", "gnumpy.garray"], "methods", ["home.repos.pwc.inspect_result.yujiali_gmmn.core.kernels.safe_diag"], ["", "def", "compute_kernel_matrix", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", "if", "isinstance", "(", "x", ",", "gnp", ".", "garray", ")", "else", "gnp", ".", "garray", "(", "x", ")", "\n", "xx", "=", "x", ".", "dot", "(", "x", ".", "T", ")", "\n", "x_diag", "=", "safe_diag", "(", "xx", ")", "\n", "\n", "return", "gnp", ".", "exp", "(", "-", "1.0", "/", "(", "2", "*", "self", ".", "sigma", "**", "2", ")", "*", "(", "-", "2", "*", "xx", "+", "x_diag", "+", "x_diag", "[", ":", ",", "gnp", ".", "newaxis", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yujiali_gmmn.core.kernels.GaussianKernel.compute_kernel_transformation": [[58, 66], ["x_new.dot", "gnumpy.exp", "isinstance", "gnumpy.garray", "isinstance", "gnumpy.garray"], "methods", ["None"], ["", "def", "compute_kernel_transformation", "(", "self", ",", "x_base", ",", "x_new", ")", ":", "\n", "        ", "x_base", "=", "x_base", "if", "isinstance", "(", "x_base", ",", "gnp", ".", "garray", ")", "else", "gnp", ".", "garray", "(", "x_base", ")", "\n", "x_new", "=", "x_new", "if", "isinstance", "(", "x_new", ",", "gnp", ".", "garray", ")", "else", "gnp", ".", "garray", "(", "x_new", ")", "\n", "\n", "xx", "=", "x_new", ".", "dot", "(", "x_base", ".", "T", ")", "\n", "xx_base", "=", "(", "x_base", "**", "2", ")", ".", "sum", "(", "axis", "=", "1", ")", "\n", "xx_new", "=", "(", "x_new", "**", "2", ")", ".", "sum", "(", "axis", "=", "1", ")", "\n", "return", "gnp", ".", "exp", "(", "-", "1.0", "/", "(", "2", "*", "self", ".", "sigma", "**", "2", ")", "*", "(", "-", "2", "*", "xx", "+", "xx_base", "+", "xx_new", "[", ":", ",", "gnp", ".", "newaxis", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yujiali_gmmn.core.kernels.GaussianKernel.get_name": [[67, 69], ["None"], "methods", ["None"], ["", "def", "get_name", "(", "self", ")", ":", "\n", "        ", "return", "'gaussian_kernel'", "\n", "\n"]], "home.repos.pwc.inspect_result.yujiali_gmmn.core.kernels.EuclideanKernel.__init__": [[71, 73], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.yujiali_gmmn.core.kernels.EuclideanKernel.compute_kernel_matrix": [[74, 80], ["x.dot", "kernels.safe_diag", "isinstance", "gnumpy.garray"], "methods", ["home.repos.pwc.inspect_result.yujiali_gmmn.core.kernels.safe_diag"], ["", "def", "compute_kernel_matrix", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", "if", "isinstance", "(", "x", ",", "gnp", ".", "garray", ")", "else", "gnp", ".", "garray", "(", "x", ")", "\n", "xx", "=", "x", ".", "dot", "(", "x", ".", "T", ")", "\n", "x_diag", "=", "safe_diag", "(", "xx", ")", "\n", "\n", "return", "(", "-", "2", "*", "xx", "+", "x_diag", "+", "x_diag", "[", ":", ",", "gnp", ".", "newaxis", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yujiali_gmmn.core.kernels.EuclideanKernel.compute_kernel_transformation": [[81, 90], ["x_new.dot", "isinstance", "gnumpy.garray", "isinstance", "gnumpy.garray"], "methods", ["None"], ["", "def", "compute_kernel_transformation", "(", "self", ",", "x_base", ",", "x_new", ")", ":", "\n", "        ", "x_base", "=", "x_base", "if", "isinstance", "(", "x_base", ",", "gnp", ".", "garray", ")", "else", "gnp", ".", "garray", "(", "x_base", ")", "\n", "x_new", "=", "x_new", "if", "isinstance", "(", "x_new", ",", "gnp", ".", "garray", ")", "else", "gnp", ".", "garray", "(", "x_new", ")", "\n", "\n", "xx", "=", "x_new", ".", "dot", "(", "x_base", ".", "T", ")", "\n", "xx_base", "=", "(", "x_base", "**", "2", ")", ".", "sum", "(", "axis", "=", "1", ")", "\n", "xx_new", "=", "(", "x_new", "**", "2", ")", ".", "sum", "(", "axis", "=", "1", ")", "\n", "\n", "return", "(", "-", "2", "*", "xx", "+", "xx_base", "+", "xx_new", "[", ":", ",", "gnp", ".", "newaxis", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yujiali_gmmn.core.kernels.CPUGaussianKernel.__init__": [[92, 94], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "sigma", ")", ":", "\n", "        ", "self", ".", "sigma", "=", "sigma", "\n", "\n"]], "home.repos.pwc.inspect_result.yujiali_gmmn.core.kernels.CPUGaussianKernel.compute_kernel_matrix": [[95, 97], ["None"], "methods", ["None"], ["", "def", "compute_kernel_matrix", "(", "self", ",", "x", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.yujiali_gmmn.core.kernels.LinearKernel.compute_kernel_matrix": [[99, 102], ["x.dot", "isinstance", "gnumpy.garray"], "methods", ["None"], ["    ", "def", "compute_kernel_matrix", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", "if", "isinstance", "(", "x", ",", "gnp", ".", "garray", ")", "else", "gnp", ".", "garray", "(", "x", ")", "\n", "return", "x", ".", "dot", "(", "x", ".", "T", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yujiali_gmmn.core.kernels.LinearKernel.compute_kernel_transformation": [[103, 108], ["x_new.dot", "isinstance", "gnumpy.garray", "isinstance", "gnumpy.garray"], "methods", ["None"], ["", "def", "compute_kernel_transformation", "(", "self", ",", "x_base", ",", "x_new", ")", ":", "\n", "        ", "x_base", "=", "x_base", "if", "isinstance", "(", "x_base", ",", "gnp", ".", "garray", ")", "else", "gnp", ".", "garray", "(", "x_base", ")", "\n", "x_new", "=", "x_new", "if", "isinstance", "(", "x_new", ",", "gnp", ".", "garray", ")", "else", "gnp", ".", "garray", "(", "x_new", ")", "\n", "\n", "return", "x_new", ".", "dot", "(", "x_base", ".", "T", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yujiali_gmmn.core.kernels.LinearKernel.get_name": [[109, 111], ["None"], "methods", ["None"], ["", "def", "get_name", "(", "self", ")", ":", "\n", "        ", "return", "'linear_kernel'", "\n", "\n"]], "home.repos.pwc.inspect_result.yujiali_gmmn.core.kernels.CosineKernel.compute_kernel_matrix": [[113, 119], ["gnumpy.sqrt", "isinstance", "gnumpy.garray", "x.dot"], "methods", ["None"], ["    ", "def", "compute_kernel_matrix", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", "if", "isinstance", "(", "x", ",", "gnp", ".", "garray", ")", "else", "gnp", ".", "garray", "(", "x", ")", "\n", "x_norm", "=", "gnp", ".", "sqrt", "(", "(", "x", "**", "2", ")", ".", "sum", "(", "axis", "=", "1", ")", ")", "\n", "x_norm", "=", "x_norm", "[", ":", ",", "gnp", ".", "newaxis", "]", "+", "x_norm", "[", "gnp", ".", "newaxis", ",", ":", "]", "+", "1e-20", "\n", "\n", "return", "x", ".", "dot", "(", "x", ".", "T", ")", "/", "x_norm", "\n", "\n"]], "home.repos.pwc.inspect_result.yujiali_gmmn.core.kernels.CosineKernel.compute_kernel_transformation": [[120, 128], ["isinstance", "gnumpy.garray", "isinstance", "gnumpy.garray", "x_new.dot"], "methods", ["None"], ["", "def", "compute_kernel_transformation", "(", "self", ",", "x_base", ",", "x_new", ")", ":", "\n", "        ", "x_base", "=", "x_base", "if", "isinstance", "(", "x_base", ",", "gnp", ".", "garray", ")", "else", "gnp", ".", "garray", "(", "x_base", ")", "\n", "x_new", "=", "x_new", "if", "isinstance", "(", "x_new", ",", "gnp", ".", "garray", ")", "else", "gnp", ".", "garray", "(", "x_new", ")", "\n", "\n", "base_norm", "=", "(", "x_base", "**", "2", ")", ".", "sum", "(", "axis", "=", "1", ")", "\n", "new_norm", "=", "(", "x_new", "**", "2", ")", ".", "sum", "(", "axis", "=", "1", ")", "\n", "\n", "return", "x_new", ".", "dot", "(", "x_base", ".", "T", ")", "/", "(", "base_norm", "+", "new_norm", "[", ":", ",", "gnp", ".", "newaxis", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yujiali_gmmn.core.kernels.safe_diag": [[10, 20], ["isinstance", "isinstance", "Exception", "x.diagonal", "gnumpy.garray", "x.diag", "x.asarray().diagonal", "x.asarray"], "function", ["None"], ["def", "safe_diag", "(", "x", ")", ":", "\n", "    ", "if", "isinstance", "(", "x", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "return", "x", ".", "diagonal", "(", ")", "\n", "", "if", "isinstance", "(", "x", ",", "gnp", ".", "garray", ")", ":", "\n", "        ", "if", "x", ".", "shape", "[", "0", "]", ">", "4000", ":", "\n", "            ", "return", "gnp", ".", "garray", "(", "x", ".", "asarray", "(", ")", ".", "diagonal", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "return", "x", ".", "diag", "(", ")", "\n", "\n", "", "", "raise", "Exception", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yujiali_gmmn.core.util.to_garray": [[10, 12], ["isinstance", "gnumpy.garray"], "function", ["None"], ["def", "to_garray", "(", "x", ")", ":", "\n", "    ", "return", "x", "if", "isinstance", "(", "x", ",", "gnp", ".", "garray", ")", "else", "gnp", ".", "garray", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yujiali_gmmn.core.util.to_nparray": [[13, 15], ["isinstance", "x.asarray"], "function", ["None"], ["", "def", "to_nparray", "(", "x", ")", ":", "\n", "    ", "return", "x", "if", "isinstance", "(", "x", ",", "np", ".", "ndarray", ")", "else", "x", ".", "asarray", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yujiali_gmmn.core.util.to_one_of_K": [[16, 26], ["numpy.zeros", "gnumpy.garray", "len", "t.ravel.ravel", "t.ravel.max", "numpy.arange"], "function", ["None"], ["", "def", "to_one_of_K", "(", "t", ",", "K", "=", "None", ")", ":", "\n", "    ", "n_cases", "=", "t", ".", "size", "\n", "if", "K", "is", "None", ":", "\n", "        ", "K", "=", "t", ".", "max", "(", ")", "+", "1", "\n", "", "if", "len", "(", "t", ".", "shape", ")", ">", "0", ":", "\n", "        ", "t", "=", "t", ".", "ravel", "(", ")", "\n", "\n", "", "t_mat", "=", "np", ".", "zeros", "(", "(", "n_cases", ",", "K", ")", ")", "\n", "t_mat", "[", "np", ".", "arange", "(", "n_cases", ")", ",", "t", "]", "=", "1", "\n", "return", "gnp", ".", "garray", "(", "t_mat", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yujiali_gmmn.core.util.to_plus_minus_of_K": [[27, 41], ["gnumpy.garray", "len", "t.ravel.ravel", "numpy.ones", "t.ravel.max", "numpy.arange"], "function", ["None"], ["", "def", "to_plus_minus_of_K", "(", "t", ",", "K", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Convert the 1-D label vector into a matrix where the t[i]th element on the\n    ith row is 1 and all others on that row is -1.\n    \"\"\"", "\n", "n_cases", "=", "t", ".", "size", "\n", "if", "K", "is", "None", ":", "\n", "        ", "K", "=", "t", ".", "max", "(", ")", "+", "1", "\n", "", "if", "len", "(", "t", ".", "shape", ")", ">", "0", ":", "\n", "        ", "t", "=", "t", ".", "ravel", "(", ")", "\n", "\n", "", "t_mat", "=", "-", "np", ".", "ones", "(", "(", "n_cases", ",", "K", ")", ")", "\n", "t_mat", "[", "np", ".", "arange", "(", "n_cases", ")", ",", "t", "]", "=", "1", "\n", "return", "gnp", ".", "garray", "(", "t_mat", ")", "\n", "\n"]]}