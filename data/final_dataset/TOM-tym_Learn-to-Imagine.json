{"home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.inclearn.logger.LOG.__init__": [[15, 24], ["logging.StreamHandler", "logging.Formatter", "logging.StreamHandler.setFormatter", "logging.getLogger", "logger.LOG.LOGGER.addHandler", "logger.LOG.LOGGER.setLevel"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "handler", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "self", ".", "formatter", "=", "logging", ".", "Formatter", "(", "\n", "'[%(asctime)s] %(filename)-8s :: %(message)s'", ",", "\n", "datefmt", "=", "'%m-%d %H:%M:%S'", ")", "\n", "handler", ".", "setFormatter", "(", "self", ".", "formatter", ")", "\n", "self", ".", "LOGGER", "=", "logging", ".", "getLogger", "(", "'global'", ")", "\n", "self", ".", "LOGGER", ".", "addHandler", "(", "handler", ")", "\n", "self", ".", "LOGGER", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.inclearn.logger.LOG.add_file_headler": [[25, 30], ["os.path.join", "logging.FileHandler", "logging.FileHandler.setFormatter", "logger.LOG.LOGGER.addHandler", "logger.time_string"], "methods", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.inclearn.utils.time_string"], ["", "def", "add_file_headler", "(", "self", ",", "save_path", ")", ":", "\n", "        ", "save_path", "=", "os", ".", "path", ".", "join", "(", "save_path", ",", "f'log_{time_string()}.log'", ")", "\n", "fhandler", "=", "logging", ".", "FileHandler", "(", "save_path", ",", "mode", "=", "'w'", ")", "\n", "fhandler", ".", "setFormatter", "(", "self", ".", "formatter", ")", "\n", "self", ".", "LOGGER", ".", "addHandler", "(", "fhandler", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.inclearn.logger.LOG.print_baisic_info": [[31, 34], ["logger.LOG.LOGGER.info", "logger.LOG.LOGGER.info", "sys.version.replace"], "methods", ["None"], ["", "def", "print_baisic_info", "(", "self", ")", ":", "\n", "        ", "self", ".", "LOGGER", ".", "info", "(", "\"python version : {}\"", ".", "format", "(", "sys", ".", "version", ".", "replace", "(", "'\\n'", ",", "' '", ")", ")", ")", "\n", "self", ".", "LOGGER", ".", "info", "(", "\"torch  version : {}\"", ".", "format", "(", "torch", ".", "__version__", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.inclearn.logger.time_string": [[8, 12], ["time.strftime", "time.localtime", "time.time"], "function", ["None"], ["def", "time_string", "(", ")", ":", "\n", "    ", "ISOTIMEFORMAT", "=", "'%Y-%m-%d %X'", "\n", "string", "=", "'[{}]'", ".", "format", "(", "time", ".", "strftime", "(", "ISOTIMEFORMAT", ",", "time", ".", "localtime", "(", "time", ".", "time", "(", ")", ")", ")", ")", "\n", "return", "string", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.inclearn.parser.get_parser": [[4, 99], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument"], "function", ["None"], ["def", "get_parser", "(", ")", ":", "\n", "# yapf: disable", "\n", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\"IncLearner\"", ",", "\n", "description", "=", "\"Incremental Learning trainer.\"", ")", "\n", "\n", "# Model related:", "\n", "parser", ".", "add_argument", "(", "\"-m\"", ",", "\"--model\"", ",", "default", "=", "\"icarl\"", ",", "type", "=", "str", ",", "\n", "help", "=", "\"Incremental learner to train.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-c\"", ",", "\"--convnet\"", ",", "default", "=", "\"rebuffi\"", ",", "type", "=", "str", ",", "\n", "help", "=", "\"Backbone convnet.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--dropout\"", ",", "default", "=", "0.", ",", "type", "=", "float", ",", "\n", "help", "=", "\"Dropout value.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-he\"", ",", "\"--herding\"", ",", "default", "=", "None", ",", "type", "=", "str", ",", "\n", "help", "=", "\"Method to gather previous tasks' examples.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-memory\"", ",", "\"--memory-size\"", ",", "default", "=", "2000", ",", "type", "=", "int", ",", "\n", "help", "=", "\"Max number of storable examplars.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-temp\"", ",", "\"--temperature\"", ",", "default", "=", "1", ",", "type", "=", "int", ",", "\n", "help", "=", "\"Temperature used to soften the predictions.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-fixed-memory\"", ",", "\"--fixed-memory\"", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Instead of shrinking the memory, it's already at minimum.\"", ")", "\n", "\n", "# Data related:", "\n", "parser", ".", "add_argument", "(", "\"-d\"", ",", "\"--dataset\"", ",", "default", "=", "\"cifar100\"", ",", "type", "=", "str", ",", "\n", "help", "=", "\"Dataset to test on.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-inc\"", ",", "\"--increment\"", ",", "default", "=", "10", ",", "type", "=", "int", ",", "\n", "help", "=", "\"Number of class to add per task.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-b\"", ",", "\"--batch-size\"", ",", "default", "=", "128", ",", "type", "=", "int", ",", "\n", "help", "=", "\"Batch size.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-w\"", ",", "\"--workers\"", ",", "default", "=", "0", ",", "type", "=", "int", ",", "\n", "help", "=", "\"Number of workers preprocessing the data.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-t\"", ",", "\"--threads\"", ",", "default", "=", "1", ",", "type", "=", "int", ",", "\n", "help", "=", "\"Number of threads allocated for PyTorch.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-v\"", ",", "\"--validation\"", ",", "default", "=", "0.", ",", "type", "=", "float", ",", "\n", "help", "=", "\"Validation split (0. <= x < 1.).\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-random\"", ",", "\"--random-classes\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "False", ",", "\n", "help", "=", "\"Randomize classes order of increment\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-order\"", ",", "\"--order\"", ",", "\n", "help", "=", "\"List of classes ordering, to be given in options.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-max-task\"", ",", "\"--max-task\"", ",", "default", "=", "None", ",", "type", "=", "int", ",", "\n", "help", "=", "\"Cap the number of tasks.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-onehot\"", ",", "\"--onehot\"", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Return data in onehot format.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-initial-increment\"", ",", "\"--initial-increment\"", ",", "default", "=", "None", ",", "type", "=", "int", ",", "\n", "help", "=", "\"Initial increment, may be bigger.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-sampler\"", ",", "\"--sampler\"", ",", "\n", "help", "=", "\"Elements sampler.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--data-path\"", ",", "default", "=", "\"/data/douillard/\"", ",", "type", "=", "str", ")", "\n", "\n", "# Training related:", "\n", "parser", ".", "add_argument", "(", "\"-lr\"", ",", "\"--lr\"", ",", "default", "=", "2.", ",", "type", "=", "float", ",", "\n", "help", "=", "\"Learning rate.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-wd\"", ",", "\"--weight-decay\"", ",", "default", "=", "0.00005", ",", "type", "=", "float", ",", "\n", "help", "=", "\"Weight decay.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-sc\"", ",", "\"--scheduling\"", ",", "default", "=", "[", "49", ",", "63", "]", ",", "nargs", "=", "\"*\"", ",", "type", "=", "int", ",", "\n", "help", "=", "\"Epoch step where to reduce the learning rate.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-lr-decay\"", ",", "\"--lr-decay\"", ",", "default", "=", "1", "/", "5", ",", "type", "=", "float", ",", "\n", "help", "=", "\"LR multiplied by it.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-opt\"", ",", "\"--optimizer\"", ",", "default", "=", "\"sgd\"", ",", "type", "=", "str", ",", "\n", "help", "=", "\"Optimizer to use.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-e\"", ",", "\"--epochs\"", ",", "default", "=", "70", ",", "type", "=", "int", ",", "\n", "help", "=", "\"Number of epochs per task.\"", ")", "\n", "\n", "# Misc:", "\n", "parser", ".", "add_argument", "(", "\"--debug\"", ",", "default", "=", "False", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"debug mode\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--device\"", ",", "default", "=", "[", "0", "]", ",", "type", "=", "int", ",", "nargs", "=", "\"+\"", ",", "\n", "help", "=", "\"GPU index to use, for cpu use -1.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--label\"", ",", "type", "=", "str", ",", "\n", "help", "=", "\"Experience name, if used a log will be created.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--autolabel\"", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Auto create label based on options files.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-seed\"", ",", "\"--seed\"", ",", "default", "=", "[", "1", "]", ",", "type", "=", "int", ",", "nargs", "=", "\"+\"", ",", "\n", "help", "=", "\"Random seed.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-seed-range\"", ",", "\"--seed-range\"", ",", "type", "=", "int", ",", "nargs", "=", "2", ",", "\n", "help", "=", "\"Seed range going from first number to second (both included).\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-options\"", ",", "\"--options\"", ",", "nargs", "=", "\"+\"", ",", "\n", "help", "=", "\"A list of options files.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-save\"", ",", "\"--save-model\"", ",", "choices", "=", "[", "\"never\"", ",", "\"last\"", ",", "\"task\"", ",", "\"first\"", "]", ",", "\n", "default", "=", "\"never\"", ",", "\n", "help", "=", "\"Save the network, either the `last` one or\"", "\n", "\" each `task`'s ones.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--dump-predictions\"", ",", "default", "=", "False", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Dump the predictions and their ground-truth on disk.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-log\"", ",", "\"--logging\"", ",", "choices", "=", "[", "\"critical\"", ",", "\"warning\"", ",", "\"info\"", ",", "\"debug\"", "]", ",", "\n", "default", "=", "\"info\"", ",", "help", "=", "\"Logging level\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-resume\"", ",", "\"--resume\"", ",", "default", "=", "None", ",", "\n", "help", "=", "\"Resume from previously saved model, \"", "\n", "\"must be in the format `*_task_[0-9]+\\.pth`.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--resume-first\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "\"--recompute-meta\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "\"--no-benchmark\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "\"--detect-anomaly\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "False", ")", "\n", "\n", "return", "parser", "\n", "", ""]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.inclearn.train.train": [[23, 90], ["inclearn.utils.LOGGER.LOGGER.setLevel", "train._set_up_options", "copy.deepcopy", "copy.deepcopy", "inclearn.lib.utils.get_date", "inclearn.lib.results_utils.get_save_folder", "inclearn.utils.LOGGER.add_file_headler", "copy.deepcopy", "enumerate", "inclearn.utils.LOGGER.LOGGER.info", "inclearn.utils.LOGGER.LOGGER.info", "inclearn.utils.LOGGER.LOGGER.info", "inclearn.utils.LOGGER.LOGGER.info", "inclearn.utils.LOGGER.LOGGER.info", "inclearn.utils.LOGGER.LOGGER.info", "args[].upper", "inclearn.utils.LOGGER.LOGGER.info", "IOError", "ValueError", "all", "all", "inclearn.utils.LOGGER.LOGGER.warning", "time.time", "train._train", "avg_inc_accs.append", "last_accs.append", "forgettings.append", "inclearn.utils.LOGGER.LOGGER.info", "os.system", "os.path.exists", "isinstance", "len", "len", "train._aggregate_results", "train._aggregate_results", "train._aggregate_results", "isinstance", "isinstance", "range", "len", "int", "round", "round", "round", "len", "time.time"], "function", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.inclearn.train._set_up_options", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.utils.get_date", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.results_utils.get_save_folder", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.inclearn.utils.LOG.add_file_headler", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.inclearn.train._train", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.inclearn.train._aggregate_results", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.inclearn.train._aggregate_results", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.inclearn.train._aggregate_results"], ["import", "pprint", "\n", "\n", "\n", "def", "train", "(", "args", ")", ":", "\n", "# logger_lib.set_logging_level(args[\"logging\"])", "\n", "    ", "logger", ".", "LOGGER", ".", "setLevel", "(", "args", "[", "\"logging\"", "]", ".", "upper", "(", ")", ")", "\n", "autolabel", "=", "_set_up_options", "(", "args", ")", "\n", "if", "args", "[", "\"autolabel\"", "]", ":", "\n", "        ", "args", "[", "\"label\"", "]", "=", "autolabel", "\n", "\n", "", "if", "args", "[", "\"label\"", "]", ":", "\n", "        ", "logger", ".", "LOGGER", ".", "info", "(", "\"Label: {}\"", ".", "format", "(", "args", "[", "\"label\"", "]", ")", ")", "\n", "try", ":", "\n", "            ", "os", ".", "system", "(", "\"echo '\\ek{}\\e\\\\'\"", ".", "format", "(", "args", "[", "\"label\"", "]", ")", ")", "\n", "", "except", ":", "\n", "            ", "pass", "\n", "", "", "if", "args", "[", "\"resume\"", "]", "and", "not", "os", ".", "path", ".", "exists", "(", "args", "[", "\"resume\"", "]", ")", ":", "\n", "        ", "raise", "IOError", "(", "f\"Saved model {args['resume']} doesn't exist.\"", ")", "\n", "\n", "", "if", "args", "[", "\"save_model\"", "]", "!=", "\"never\"", "and", "args", "[", "\"label\"", "]", "is", "None", ":", "\n", "        ", "raise", "ValueError", "(", "f\"Saving model every {args['save_model']} but no label was specified.\"", ")", "\n", "\n", "", "seed_list", "=", "copy", ".", "deepcopy", "(", "args", "[", "\"seed\"", "]", ")", "\n", "device", "=", "copy", ".", "deepcopy", "(", "args", "[", "\"device\"", "]", ")", "\n", "\n", "start_date", "=", "utils", ".", "get_date", "(", ")", "\n", "results_folder", "=", "results_utils", ".", "get_save_folder", "(", "args", "[", "\"model\"", "]", ",", "start_date", ",", "args", "[", "\"label\"", "]", ")", "\n", "logger", ".", "add_file_headler", "(", "results_folder", ")", "\n", "\n", "orders", "=", "copy", ".", "deepcopy", "(", "args", "[", "\"order\"", "]", ")", "\n", "del", "args", "[", "\"order\"", "]", "\n", "if", "orders", "is", "not", "None", ":", "\n", "        ", "assert", "isinstance", "(", "orders", ",", "list", ")", "and", "len", "(", "orders", ")", "\n", "assert", "all", "(", "isinstance", "(", "o", ",", "list", ")", "for", "o", "in", "orders", ")", "\n", "assert", "all", "(", "[", "isinstance", "(", "c", ",", "int", ")", "for", "o", "in", "orders", "for", "c", "in", "o", "]", ")", "\n", "", "else", ":", "\n", "        ", "orders", "=", "[", "None", "for", "_", "in", "range", "(", "len", "(", "seed_list", ")", ")", "]", "\n", "\n", "", "avg_inc_accs", ",", "last_accs", ",", "forgettings", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "i", ",", "seed", "in", "enumerate", "(", "seed_list", ")", ":", "\n", "        ", "logger", ".", "LOGGER", ".", "warning", "(", "\"Launching run {}/{}\"", ".", "format", "(", "i", "+", "1", ",", "len", "(", "seed_list", ")", ")", ")", "\n", "args", "[", "\"seed\"", "]", "=", "seed", "\n", "args", "[", "\"device\"", "]", "=", "device", "\n", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "for", "avg_inc_acc", ",", "last_acc", ",", "forgetting", "in", "_train", "(", "args", ",", "start_date", ",", "orders", "[", "i", "]", ",", "i", ")", ":", "\n", "            ", "yield", "avg_inc_acc", ",", "last_acc", ",", "forgetting", ",", "False", "\n", "\n", "", "avg_inc_accs", ".", "append", "(", "avg_inc_acc", ")", "\n", "last_accs", ".", "append", "(", "last_acc", ")", "\n", "forgettings", ".", "append", "(", "forgetting", ")", "\n", "\n", "logger", ".", "LOGGER", ".", "info", "(", "\"Training finished in {}s.\"", ".", "format", "(", "int", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", ")", ")", "\n", "yield", "avg_inc_acc", ",", "last_acc", ",", "forgetting", ",", "True", "\n", "\n", "", "logger", ".", "LOGGER", ".", "info", "(", "\"Label was: {}\"", ".", "format", "(", "args", "[", "\"label\"", "]", ")", ")", "\n", "\n", "logger", ".", "LOGGER", ".", "info", "(", "\n", "\"Results done on {} seeds: avg: {}, last: {}, forgetting: {}\"", ".", "format", "(", "\n", "len", "(", "seed_list", ")", ",", "_aggregate_results", "(", "avg_inc_accs", ")", ",", "_aggregate_results", "(", "last_accs", ")", ",", "\n", "_aggregate_results", "(", "forgettings", ")", "\n", ")", "\n", ")", "\n", "logger", ".", "LOGGER", ".", "info", "(", "\"Individual results avg: {}\"", ".", "format", "(", "[", "round", "(", "100", "*", "acc", ",", "2", ")", "for", "acc", "in", "avg_inc_accs", "]", ")", ")", "\n", "logger", ".", "LOGGER", ".", "info", "(", "\"Individual results last: {}\"", ".", "format", "(", "[", "round", "(", "100", "*", "acc", ",", "2", ")", "for", "acc", "in", "last_accs", "]", ")", ")", "\n", "logger", ".", "LOGGER", ".", "info", "(", "\n", "\"Individual results forget: {}\"", ".", "format", "(", "[", "round", "(", "100", "*", "acc", ",", "2", ")", "for", "acc", "in", "forgettings", "]", ")", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.inclearn.train._train": [[92, 203], ["train._set_global_parameters", "train._set_data_model", "train._set_results", "inclearn.lib.metrics.MetricLogger", "args.get", "print", "range", "inclearn.utils.LOGGER.LOGGER.info", "args.get", "inc_dataset.new_task", "model.set_task_info", "model.eval", "model.before_task", "train._train_task", "model.eval", "train._after_task", "inclearn.utils.LOGGER.LOGGER.info", "model.eval_task", "metrics.MetricLogger.log_task", "inclearn.utils.LOGGER.LOGGER.info", "inclearn.utils.LOGGER.LOGGER.info", "inclearn.utils.LOGGER.LOGGER.info", "inclearn.utils.LOGGER.LOGGER.info", "inclearn.utils.LOGGER.LOGGER.info", "inclearn.utils.LOGGER.LOGGER.info", "args.get", "results[].append", "model.get_memory", "model.get_val_memory", "inclearn.lib.results_utils.save_results", "os.makedirs", "inclearn.utils.LOGGER.LOGGER.info", "inclearn.utils.LOGGER.LOGGER.info", "inclearn.utils.LOGGER.LOGGER.info", "inclearn.utils.LOGGER.LOGGER.info", "inclearn.utils.LOGGER.LOGGER.info", "args.get", "os.path.join", "open", "pickle.dump", "os.path.join", "str().rjust", "len", "str", "str"], "function", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.inclearn.train._set_global_parameters", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.inclearn.train._set_data_model", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.inclearn.train._set_results", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.get", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.get", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.data.incdataset.IncrementalDataset.new_task", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.base.IncrementalLearner.set_task_info", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.base.IncrementalLearner.eval", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.base.IncrementalLearner.before_task", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.Imagine.Imagine._train_task", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.base.IncrementalLearner.eval", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.Imagine.Imagine._after_task", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.base.IncrementalLearner.eval_task", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.metrics.MetricLogger.log_task", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.get", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.icarl.ICarl.get_memory", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.base.IncrementalLearner.get_val_memory", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.results_utils.save_results", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.get"], ["\n", "logger", ".", "LOGGER", ".", "info", "(", "f\"Command was {' '.join(sys.argv)}\"", ")", "\n", "\n", "\n", "", "def", "_train", "(", "args", ",", "start_date", ",", "class_order", ",", "run_id", ")", ":", "\n", "    ", "_set_global_parameters", "(", "args", ")", "\n", "inc_dataset", ",", "model", "=", "_set_data_model", "(", "args", ",", "class_order", ")", "\n", "results", ",", "results_folder", "=", "_set_results", "(", "args", ",", "start_date", ")", "\n", "\n", "memory", ",", "memory_val", ",", "pseudo_memory", "=", "None", ",", "None", ",", "None", "\n", "metric_logger", "=", "metrics", ".", "MetricLogger", "(", "\n", "inc_dataset", ".", "n_tasks", ",", "inc_dataset", ".", "n_classes", ",", "inc_dataset", ".", "increments", "\n", ")", "\n", "use_unlabeled", "=", "args", ".", "get", "(", "\"use_unlabeled\"", ",", "False", ")", "\n", "pseudo_same_class", "=", "model", ".", "_generator_config", ".", "get", "(", "\"use_same_classes\"", ",", "False", ")", "\n", "print", "(", "f'use_unlabeled:{use_unlabeled}'", ")", "\n", "for", "task_id", "in", "range", "(", "inc_dataset", ".", "n_tasks", ")", ":", "\n", "        ", "pseudo_memory_n_samples", "=", "args", ".", "get", "(", "\"pseudo_memory_n_samples\"", ",", "2", ")", "\n", "task_info", ",", "train_loader", ",", "val_loader", ",", "test_loader", ",", "aux_loader", ",", "pseudo_memory_loader", ",", "pure_new_data", "=", "inc_dataset", ".", "new_task", "(", "memory", ",", "pseudo_memory", ",", "memory_val", ",", "pseudo_memory_n_samples", "=", "pseudo_memory_n_samples", ",", "\n", "pseudo_same_class", "=", "pseudo_same_class", ")", "\n", "if", "task_info", "[", "\"task\"", "]", "==", "args", "[", "\"max_task\"", "]", ":", "\n", "            ", "break", "\n", "", "model", ".", "set_task_info", "(", "task_info", ")", "\n", "\n", "# ---------------", "\n", "# 1. Prepare Task", "\n", "# ---------------", "\n", "model", ".", "eval", "(", ")", "\n", "model", ".", "before_task", "(", "train_loader", ",", "val_loader", "if", "val_loader", "else", "test_loader", ")", "\n", "\n", "# -------------", "\n", "# 2. Train Task", "\n", "# -------------", "\n", "pseudo_memory", ",", "resume_from_chkpt", "=", "_train_task", "(", "args", ",", "model", ",", "train_loader", ",", "aux_loader", ",", "pseudo_memory", ",", "\n", "pseudo_memory_loader", ",", "pure_new_data", ",", "inc_dataset", ",", "val_loader", ",", "\n", "test_loader", ",", "run_id", ",", "task_id", ",", "task_info", ",", "results_folder", ")", "\n", "\n", "# ----------------", "\n", "# 3. Conclude Task", "\n", "# ----------------", "\n", "model", ".", "eval", "(", ")", "\n", "_after_task", "(", "args", ",", "model", ",", "inc_dataset", ",", "run_id", ",", "task_id", ",", "results_folder", ")", "\n", "\n", "# ------------", "\n", "# 4. Eval Task", "\n", "# ------------", "\n", "logger", ".", "LOGGER", ".", "info", "(", "\"Eval on {}->{}.\"", ".", "format", "(", "0", ",", "task_info", "[", "\"max_class\"", "]", ")", ")", "\n", "if", "resume_from_chkpt", ":", "\n", "            ", "logger", ".", "LOGGER", ".", "info", "(", "f'Skipping eval on task {task_id}, because of loading from checkpoints.'", ")", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "args", "[", "'resume'", "]", ",", "\"predictions_{}\"", ".", "format", "(", "run_id", ")", ",", "\n", "str", "(", "task_id", ")", ".", "rjust", "(", "len", "(", "str", "(", "30", ")", ")", ",", "\"0\"", ")", "+", "\".pkl\"", ")", "\n", "try", ":", "\n", "                ", "with", "open", "(", "path", ",", "'rb'", ")", "as", "f", ":", "\n", "                    ", "ypreds", ",", "ytrue", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "                ", "logger", ".", "LOGGER", ".", "warning", "(", "f'Error when loading predictions, {e}, re-calculate it.'", ")", "\n", "ypreds", ",", "ytrue", "=", "model", ".", "eval_task", "(", "test_loader", ")", "\n", "", "", "else", ":", "\n", "            ", "ypreds", ",", "ytrue", "=", "model", ".", "eval_task", "(", "test_loader", ")", "\n", "if", "args", "[", "\"dump_predictions\"", "]", "and", "args", "[", "\"label\"", "]", ":", "\n", "                ", "os", ".", "makedirs", "(", "\n", "os", ".", "path", ".", "join", "(", "results_folder", ",", "\"predictions_{}\"", ".", "format", "(", "run_id", ")", ")", ",", "exist_ok", "=", "True", "\n", ")", "\n", "with", "open", "(", "\n", "os", ".", "path", ".", "join", "(", "\n", "results_folder", ",", "\"predictions_{}\"", ".", "format", "(", "run_id", ")", ",", "\n", "str", "(", "task_id", ")", ".", "rjust", "(", "len", "(", "str", "(", "30", ")", ")", ",", "\"0\"", ")", "+", "\".pkl\"", "\n", ")", ",", "\"wb+\"", "\n", ")", "as", "f", ":", "\n", "                    ", "pickle", ".", "dump", "(", "(", "ypreds", ",", "ytrue", ")", ",", "f", ")", "\n", "", "", "", "metric_logger", ".", "log_task", "(", "\n", "ypreds", ",", "ytrue", ",", "task_size", "=", "task_info", "[", "\"increment\"", "]", ",", "zeroshot", "=", "args", ".", "get", "(", "\"all_test_classes\"", ")", "\n", ")", "\n", "\n", "if", "args", "[", "\"dump_predictions\"", "]", "and", "args", "[", "\"label\"", "]", ":", "\n", "            ", "os", ".", "makedirs", "(", "\n", "os", ".", "path", ".", "join", "(", "results_folder", ",", "\"predictions_{}\"", ".", "format", "(", "run_id", ")", ")", ",", "exist_ok", "=", "True", "\n", ")", "\n", "with", "open", "(", "\n", "os", ".", "path", ".", "join", "(", "\n", "results_folder", ",", "\"predictions_{}\"", ".", "format", "(", "run_id", ")", ",", "\n", "str", "(", "task_id", ")", ".", "rjust", "(", "len", "(", "str", "(", "30", ")", ")", ",", "\"0\"", ")", "+", "\".pkl\"", "\n", ")", ",", "\"wb+\"", "\n", ")", "as", "f", ":", "\n", "                ", "pickle", ".", "dump", "(", "(", "ypreds", ",", "ytrue", ")", ",", "f", ")", "\n", "\n", "", "", "if", "args", "[", "\"label\"", "]", ":", "\n", "            ", "logger", ".", "LOGGER", ".", "info", "(", "args", "[", "\"label\"", "]", ")", "\n", "", "logger", ".", "LOGGER", ".", "info", "(", "\"Avg inc acc: {}.\"", ".", "format", "(", "metric_logger", ".", "last_results", "[", "\"incremental_accuracy\"", "]", ")", ")", "\n", "logger", ".", "LOGGER", ".", "info", "(", "\"Current acc: {}.\"", ".", "format", "(", "metric_logger", ".", "last_results", "[", "\"accuracy\"", "]", ")", ")", "\n", "logger", ".", "LOGGER", ".", "info", "(", "\n", "\"Avg inc acc top5: {}.\"", ".", "format", "(", "metric_logger", ".", "last_results", "[", "\"incremental_accuracy_top5\"", "]", ")", "\n", ")", "\n", "logger", ".", "LOGGER", ".", "info", "(", "\"Current acc top5: {}.\"", ".", "format", "(", "metric_logger", ".", "last_results", "[", "\"accuracy_top5\"", "]", ")", ")", "\n", "logger", ".", "LOGGER", ".", "info", "(", "\"Forgetting: {}.\"", ".", "format", "(", "metric_logger", ".", "last_results", "[", "\"forgetting\"", "]", ")", ")", "\n", "logger", ".", "LOGGER", ".", "info", "(", "\"Cord metric: {:.2f}.\"", ".", "format", "(", "metric_logger", ".", "last_results", "[", "\"cord\"", "]", ")", ")", "\n", "if", "task_id", ">", "0", ":", "\n", "            ", "logger", ".", "LOGGER", ".", "info", "(", "\n", "\"Old accuracy: {:.2f}, mean: {:.2f}.\"", ".", "format", "(", "\n", "metric_logger", ".", "last_results", "[", "\"old_accuracy\"", "]", ",", "\n", "metric_logger", ".", "last_results", "[", "\"avg_old_accuracy\"", "]", "\n", ")", "\n", ")", "\n", "logger", ".", "LOGGER", ".", "info", "(", "\n", "\"New accuracy: {:.2f}, mean: {:.2f}.\"", ".", "format", "(", "\n", "metric_logger", ".", "last_results", "[", "\"new_accuracy\"", "]", ",", "\n", "metric_logger", ".", "last_results", "[", "\"avg_new_accuracy\"", "]", "\n", ")", "\n", ")", "\n", "", "if", "args", ".", "get", "(", "\"all_test_classes\"", ")", ":", "\n", "            ", "logger", ".", "LOGGER", ".", "info", "(", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.inclearn.train.get_pseudo_memory": [[205, 239], ["os.path.join", "os.path.join", "os.path.exists", "torch.load", "inclearn.utils.LOGGER.LOGGER.info", "model.get_pseudo_memory", "inclearn.utils.LOGGER.LOGGER.info", "inclearn.utils.LOGGER.LOGGER.info", "torch.unique", "numpy.concatenate", "torch.cat().cpu", "os.path.exists", "os.path.exists", "torch.cat", "len"], "function", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.icarl.ICarl.get_pseudo_memory"], [")", "\n", "logger", ".", "LOGGER", ".", "info", "(", "\n", "\"unSeen classes: {:.2f}.\"", ".", "format", "(", "\n", "metric_logger", ".", "last_results", "[", "\"unseen_classes_accuracy\"", "]", "\n", ")", "\n", ")", "\n", "\n", "", "results", "[", "\"results\"", "]", ".", "append", "(", "metric_logger", ".", "last_results", ")", "\n", "\n", "avg_inc_acc", "=", "results", "[", "\"results\"", "]", "[", "-", "1", "]", "[", "\"incremental_accuracy\"", "]", "\n", "last_acc", "=", "results", "[", "\"results\"", "]", "[", "-", "1", "]", "[", "\"accuracy\"", "]", "[", "\"total\"", "]", "\n", "forgetting", "=", "results", "[", "\"results\"", "]", "[", "-", "1", "]", "[", "\"forgetting\"", "]", "\n", "yield", "avg_inc_acc", ",", "last_acc", ",", "forgetting", "\n", "\n", "memory", "=", "model", ".", "get_memory", "(", ")", "\n", "memory_val", "=", "model", ".", "get_val_memory", "(", ")", "\n", "", "logger", ".", "LOGGER", ".", "info", "(", "\n", "\"Average Incremental Accuracy: {}.\"", ".", "format", "(", "results", "[", "\"results\"", "]", "[", "-", "1", "]", "[", "\"incremental_accuracy\"", "]", ")", "\n", ")", "\n", "if", "args", "[", "\"label\"", "]", "is", "not", "None", ":", "\n", "        ", "results_utils", ".", "save_results", "(", "\n", "results", ",", "args", "[", "\"label\"", "]", ",", "args", "[", "\"model\"", "]", ",", "start_date", ",", "run_id", ",", "args", "[", "\"seed\"", "]", "\n", ")", "\n", "\n", "", "del", "model", "\n", "del", "inc_dataset", "\n", "\n", "\n", "", "def", "get_pseudo_memory", "(", "aux_loader", ",", "model", ",", "pseudo_memory", ",", "load_folder", ",", "save_folder", ",", "run_id", ",", "task_id", ",", "re_mine", "=", "False", ",", "\n", "n_classes_samples", "=", "100", ")", ":", "\n", "    ", "unlabeled_data_save_path", "=", "os", ".", "path", ".", "join", "(", "save_folder", ",", "f'pseudo_memory_{task_id}_task_{run_id}.pth'", ")", "\n", "unlabeled_data_load_path", "=", "None", "\n", "if", "load_folder", "is", "not", "None", ":", "\n", "        ", "unlabeled_data_load_path", "=", "os", ".", "path", ".", "join", "(", "load_folder", ",", "f'pseudo_memory_{task_id}_task_{run_id}.pth'", ")", "\n", "", "if", "unlabeled_data_load_path", "is", "not", "None", "and", "os", ".", "path", ".", "exists", "(", "unlabeled_data_load_path", ")", ":", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.inclearn.train._train_task": [[246, 338], ["config.get", "config.get", "config.get", "config.get", "config.get.get", "config.get", "config.get", "config.get", "os.path.isdir", "model.load_parameters", "inclearn.utils.LOGGER.LOGGER.info", "train.get_pseudo_memory", "generator_config.get.get", "torch.unique", "inc_dataset.get_pseudo_memory_loader", "model.fine_tune", "os.path.isfile", "os.path.exists", "model.load_parameters", "inclearn.utils.LOGGER.LOGGER.info", "inclearn.utils.LOGGER.LOGGER.info", "model.train", "inclearn.utils.LOGGER.LOGGER.info", "model.train_task", "generator_config.get.get", "generator_config.get.get", "model.after_task_intensive", "model.get_memory", "inclearn.lib.data.samplers.AuxSampler", "inc_dataset.get_loader", "min", "inclearn.lib.data.samplers.NPairSampler", "inc_dataset.get_loader", "config.get.get", "config.get.get", "config.get.get", "range", "len", "int", "int", "int", "inclearn.lib.network.FeatureGenerator().to", "generator_config.get.get", "model.create_generator_optimizer", "os.path.join", "os.path.exists", "config.get", "model.train_task", "len", "numpy.zeros", "numpy.unique", "numpy.zeros", "FeatureGenerator().to.parameters", "train.load_generator_params", "os.path.join", "train.save_generator_params", "int", "len", "inclearn.lib.network.FeatureGenerator", "os.path.isdir", "os.makedirs"], "function", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.get", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.get", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.get", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.get", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.get", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.get", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.get", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.get", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.base.IncrementalLearner.load_parameters", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.icarl.ICarl.get_pseudo_memory", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.get", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.data.incdataset.IncrementalDataset.get_pseudo_memory_loader", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.Imagine.Imagine.fine_tune", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.base.IncrementalLearner.load_parameters", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.base.IncrementalLearner.train", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.base.IncrementalLearner.train_task", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.get", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.get", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.base.IncrementalLearner.after_task_intensive", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.icarl.ICarl.get_memory", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.data.incdataset.IncrementalDataset.get_loader", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.data.incdataset.IncrementalDataset.get_loader", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.get", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.get", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.get", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.get", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.icarl.ICarl.create_generator_optimizer", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.get", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.base.IncrementalLearner.train_task", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.inclearn.train.load_generator_params", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.inclearn.train.save_generator_params"], ["", "else", ":", "\n", "            ", "existing_pseudo_mem_cls", "=", "None", "\n", "\n", "", "new_pseudo_memory", "=", "model", ".", "get_pseudo_memory", "(", "aux_loader", ",", "existing_cls", "=", "existing_pseudo_mem_cls", ",", "\n", "n_classes_samples", "=", "n_classes_samples", ")", "\n", "\n", "if", "existing_pseudo_mem_cls", "is", "not", "None", "and", "not", "re_mine", ":", "\n", "            ", "new_data", "=", "np", ".", "concatenate", "(", "(", "pseudo_memory", "[", "0", "]", ",", "new_pseudo_memory", "[", "0", "]", ")", ",", "axis", "=", "0", ")", "\n", "new_label", "=", "torch", ".", "cat", "(", "(", "pseudo_memory", "[", "1", "]", ",", "new_pseudo_memory", "[", "1", "]", ")", ",", "dim", "=", "0", ")", ".", "cpu", "(", ")", "\n", "pseudo_memory", "=", "(", "new_data", ",", "new_label", ")", "\n", "", "else", ":", "\n", "            ", "pseudo_memory", "=", "new_pseudo_memory", "\n", "new_data", "=", "new_pseudo_memory", "[", "0", "]", "\n", "new_label", "=", "new_pseudo_memory", "[", "1", "]", "\n", "\n", "", "logger", ".", "LOGGER", ".", "info", "(", "f'Now unlabeled data: {len(pseudo_memory[0])}'", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "unlabeled_data_save_path", ")", ":", "\n", "        ", "torch", ".", "save", "(", "pseudo_memory", ",", "unlabeled_data_save_path", ")", "\n", "logger", ".", "LOGGER", ".", "info", "(", "f'Saved pseudo memory to {unlabeled_data_save_path}.'", ")", "\n", "", "return", "pseudo_memory", ",", "new_data", ",", "new_label", "\n", "\n", "\n", "# ------------------------", "\n", "# Lifelong Learning phases", "\n", "# ------------------------", "\n", "\n", "\n", "", "def", "_train_task", "(", "config", ",", "model", ",", "train_loader", ",", "aux_loader", ",", "pseudo_memory", ",", "pseudo_memory_loader", ",", "pure_new_data", ",", "\n", "inc_dataset", ",", "val_loader", ",", "test_loader", ",", "run_id", ",", "task_id", ",", "task_info", ",", "results_folder", ")", ":", "\n", "    ", "retrain", "=", "False", "\n", "# pre-check the existence of checkpoints for current task_id", "\n", "checkpoints_existence", "=", "False", "\n", "resume_from_chkpt", "=", "True", "\n", "if", "config", "[", "\"resume\"", "]", "is", "not", "None", ":", "\n", "        ", "path", "=", "os", ".", "path", ".", "join", "(", "config", "[", "\"resume\"", "]", ",", "f\"net_{run_id}_task_{task_id}.pth\"", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "            ", "checkpoints_existence", "=", "True", "\n", "\n", "", "", "if", "config", "[", "\"resume\"", "]", "is", "not", "None", "and", "checkpoints_existence", "and", "not", "(", "config", "[", "\"resume_first\"", "]", "and", "task_id", ">", "0", ")", ":", "\n", "        ", "res", "=", "model", ".", "load_parameters", "(", "config", "[", "\"resume\"", "]", ",", "run_id", ",", "device", "=", "config", "[", "'device'", "]", "[", "0", "]", ")", "\n", "model", ".", "load_metadata", "(", "config", "[", "'resume'", "]", ",", "run_id", ")", "\n", "logger", ".", "LOGGER", ".", "info", "(", "\n", "\"Skipping training phase {} because reloading pretrained model.\"", ".", "format", "(", "task_id", ")", "\n", ")", "\n", "retrain", "=", "not", "res", "\n", "", "elif", "config", "[", "\"resume\"", "]", "is", "not", "None", "and", "os", ".", "path", ".", "isfile", "(", "config", "[", "\"resume\"", "]", ")", "and", "os", ".", "path", ".", "exists", "(", "config", "[", "\"resume\"", "]", ")", "and", "task_id", "==", "0", ":", "\n", "# In case we resume from a single model file, it's assumed to be from the first task.", "\n", "# model.network = config[\"resume\"]", "\n", "        ", "res", "=", "model", ".", "load_parameters", "(", "config", "[", "\"resume\"", "]", ",", "run_id", ",", "device", "=", "config", "[", "'device'", "]", "[", "0", "]", ")", "\n", "model", ".", "load_metadata", "(", "config", "[", "'resume'", "]", ",", "run_id", ")", "\n", "logger", ".", "LOGGER", ".", "info", "(", "\n", "\"Skipping initial training phase {} because reloading pretrained model.\"", ".", "\n", "format", "(", "task_id", ")", "\n", ")", "\n", "", "else", ":", "\n", "        ", "logger", ".", "LOGGER", ".", "info", "(", "\"Train on {}->{}.\"", ".", "format", "(", "task_info", "[", "\"min_class\"", "]", ",", "task_info", "[", "\"max_class\"", "]", ")", ")", "\n", "model", ".", "train", "(", ")", "\n", "model", ".", "train_task", "(", "train_loader", ",", "pseudo_memory_loader", ",", "val_loader", "if", "val_loader", "else", "test_loader", ",", "\n", "freeze_layers", "=", "task_id", "!=", "0", ")", "\n", "\n", "", "if", "config", "[", "\"label\"", "]", "and", "(", "\n", "config", "[", "\"save_model\"", "]", "==", "\"task\"", "or", "\n", "(", "config", "[", "\"save_model\"", "]", "==", "\"last\"", "and", "task_id", "==", "inc_dataset", ".", "n_tasks", "-", "1", ")", "or", "\n", "(", "config", "[", "\"save_model\"", "]", "==", "\"first\"", "and", "task_id", "==", "0", ")", "\n", ")", ":", "\n", "        ", "model", ".", "save_parameters", "(", "results_folder", ",", "run_id", ")", "\n", "# model.save_metadata(results_folder, run_id)", "\n", "# model.network.convnet.init_fake_BN()", "\n", "", "finetuning_config", "=", "config", ".", "get", "(", "\"finetuning_config\"", ")", "\n", "\n", "use_unlabeled", "=", "config", ".", "get", "(", "'use_unlabeled'", ",", "False", ")", "\n", "generator_config", "=", "config", ".", "get", "(", "\"generator_config\"", ",", "{", "}", ")", "\n", "pseudo_same_class", "=", "generator_config", ".", "get", "(", "\"use_same_classes\"", ",", "False", ")", "\n", "train_generator_config", "=", "generator_config", ".", "get", "(", "\"train_config\"", ",", "{", "}", ")", "\n", "batch_size", "=", "config", ".", "get", "(", "\"labeled_batch_size\"", ",", "128", ")", "\n", "re_mined", "=", "config", ".", "get", "(", "\"pseudo_re_mined\"", ",", "False", ")", "\n", "n_classes_samples", "=", "config", ".", "get", "(", "\"pseudo_mem_n_classes_samples\"", ",", "100", ")", "\n", "if", "task_id", "<", "task_info", "[", "\"max_task\"", "]", "-", "1", "and", "use_unlabeled", ":", "\n", "        ", "p", "=", "get_pseudo_memory", "(", "aux_loader", ",", "model", ",", "pseudo_memory", ",", "config", "[", "\"resume\"", "]", ",", "results_folder", ",", "run_id", ",", "task_id", ",", "\n", "re_mine", "=", "re_mined", ",", "n_classes_samples", "=", "n_classes_samples", ")", "\n", "pseudo_memory", "=", "p", "[", "0", "]", "\n", "new_pseudo_memory", "=", "(", "p", "[", "1", "]", ",", "p", "[", "2", "]", ")", "\n", "\n", "pseudo_memory_n_samples", "=", "train_generator_config", ".", "get", "(", "'train_generator_unlabel_n_samples'", ",", "2", ")", "\n", "current_pseudo_class", "=", "torch", ".", "unique", "(", "new_pseudo_memory", "[", "1", "]", ")", "\n", "\n", "# train the feature generator", "\n", "if", "generator_config", ":", "\n", "            ", "n_class_mem", "=", "train_generator_config", ".", "get", "(", "\"train_generator_memory_n_samples\"", ",", "12", ")", "\n", "n_class_new", "=", "train_generator_config", ".", "get", "(", "\"train_generator_new_n_samples\"", ",", "12", ")", "\n", "if", "not", "config", "[", "\"resume\"", "]", "or", "(", "task_id", ">", "0", "and", "config", "[", "\"resume_first\"", "]", ")", "or", "(", "\n", "config", "[", "'resume'", "]", "and", "model", ".", "get_memory", "(", ")", "[", "0", "]", "is", "None", ")", ":", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.inclearn.train.save_generator_params": [[340, 345], ["range", "os.path.join", "torch.save", "inclearn.utils.LOGGER.LOGGER.info", "model.class_encoders[].state_dict"], "function", ["None"], ["", "current_memory", "=", "model", ".", "get_memory", "(", ")", "\n", "\n", "input_dim", "=", "generator_config", ".", "get", "(", "\"input_dim\"", ",", "64", ")", "\n", "latent_dim", "=", "generator_config", ".", "get", "(", "\"latent_dim\"", ",", "64", ")", "\n", "num_blocks", "=", "generator_config", ".", "get", "(", "\"n_blocks\"", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.inclearn.train.load_generator_params": [[347, 365], ["range", "os.path.join", "os.path.join", "model.class_encoders[].load_state_dict", "inclearn.utils.LOGGER.LOGGER.info", "torch.load", "torch.load", "inclearn.utils.LOGGER.LOGGER.warning", "inclearn.utils.LOGGER.LOGGER.warning"], "function", ["None"], ["                ", "cls_encoder", "=", "FeatureGenerator", "(", "input_dim", ",", "latent_dim", "=", "latent_dim", ",", "num_blocks", "=", "num_blocks", ")", ".", "to", "(", "model", ".", "device", ")", "\n", "lr", "=", "generator_config", ".", "get", "(", "\"lr\"", ",", "0.1", ")", "\n", "model", ".", "create_generator_optimizer", "(", "cls", ",", "cls_encoder", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ",", "task_id", "=", "task_id", ")", "\n", "model", ".", "class_encoders", "[", "cls", "]", "=", "cls_encoder", "\n", "", "res", "=", "False", "\n", "if", "task_id", "==", "0", "and", "config", "[", "\"resume\"", "]", "is", "not", "None", ":", "\n", "                ", "generator_path", "=", "os", ".", "path", ".", "join", "(", "config", "[", "\"resume\"", "]", ",", "'generators'", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "generator_path", ")", ":", "\n", "                    ", "res", "=", "load_generator_params", "(", "model", ",", "config", ",", "generator_path", ",", "run_id", ",", "task_info", "[", "'min_class'", "]", ",", "\n", "task_info", "[", "'max_class'", "]", ")", "\n", "", "", "use_generators", "=", "not", "config", ".", "get", "(", "'softmax_ce_not_unlabeled'", ",", "False", ")", "\n", "if", "config", "[", "'resume'", "]", ":", "\n", "                ", "next_stage_pth_exists", "=", "os", ".", "path", ".", "exists", "(", "\n", "os", ".", "path", ".", "join", "(", "config", "[", "'resume'", "]", ",", "f\"net_{run_id}_task_{model._task + 1}.pth\"", ")", ")", "\n", "", "else", ":", "\n", "                ", "next_stage_pth_exists", "=", "None", "\n", "", "if", "not", "next_stage_pth_exists", "and", "(", "not", "res", "and", "task_id", "<", "task_info", "[", "\"max_task\"", "]", "-", "1", "and", "use_generators", ")", ":", "\n", "                ", "nb_class", "=", "min", "(", "len", "(", "np", ".", "unique", "(", "pure_new_data", "[", "1", "]", ")", ")", ",", "int", "(", "batch_size", "/", "n_class_new", ")", ")", "\n", "train_sampler", "=", "NPairSampler", "(", "y", "=", "pure_new_data", "[", "1", "]", ",", "n_classes", "=", "nb_class", ",", "n_samples", "=", "n_class_new", ")", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.inclearn.train._after_task": [[367, 383], ["model.after_task", "os.path.isdir", "model.load_metadata", "model.after_task_intensive", "model.save_parameters", "model.save_metadata"], "function", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.base.IncrementalLearner.after_task", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.icarl.ICarl.load_metadata", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.base.IncrementalLearner.after_task_intensive", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.base.IncrementalLearner.save_parameters", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.icarl.ICarl.save_metadata"], ["mode", "=", "\"train\"", ",", "sampler", "=", "train_sampler", ",", "sampler_init", "=", "False", ")", "\n", "\n", "mem_sampler", "=", "AuxSampler", "(", "current_memory", "[", "1", "]", ",", "batch_size", "=", "n_class_mem", "*", "int", "(", "task_info", "[", "'increment'", "]", ")", ",", "\n", "n_sample", "=", "n_class_mem", ",", "farther_dataset_batch_size", "=", "train_loader", ".", "batch_size", ",", "\n", "farther_dataset_idx", "=", "None", ",", "\n", "farther_dataset_targets", "=", "None", ",", "\n", "farther_dataset_mem_flag", "=", "None", ",", "\n", "same_class", "=", "True", ",", "\n", "farther_is_mem", "=", "False", ",", "\n", "father_classes_per_batch", "=", "train_sampler", ".", "classes_per_batch", ")", "\n", "\n", "memory_loader_PK", "=", "inc_dataset", ".", "get_loader", "(", "*", "current_memory", ",", "\n", "memory_flags", "=", "np", ".", "zeros", "(", "current_memory", "[", "0", "]", ".", "shape", ")", ",", "\n", "mode", "=", "\"train\"", ",", "sampler", "=", "mem_sampler", ",", "sampler_init", "=", "False", ")", "\n", "tmp_pseudo_memory_loader", "=", "inc_dataset", ".", "get_pseudo_memory_loader", "(", "pseudo_memory", ",", "pseudo_memory_n_samples", ",", "\n", "batch_size", "=", "pseudo_memory_n_samples", "*", "len", "(", "\n", "current_pseudo_class", ")", ",", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.inclearn.train._set_results": [[390, 402], ["inclearn.lib.results_utils.get_template_results", "inclearn.lib.results_utils.get_save_folder", "inclearn.utils.LOGGER.LOGGER.info"], "function", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.results_utils.get_template_results", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.results_utils.get_save_folder"], ["father_classes_per_batch", "=", "train_sampler", ".", "classes_per_batch", ")", "\n", "\n", "train_generator_data", "=", "{", "\n", "'labeled_loader'", ":", "train_loader_PK", ",", "\n", "'memory_loader'", ":", "memory_loader_PK", ",", "\n", "}", "\n", "model", ".", "train_task", "(", "train_loader", ",", "tmp_pseudo_memory_loader", ",", "val_loader", "if", "val_loader", "else", "test_loader", ",", "\n", "train_generator_data", "=", "train_generator_data", ",", "train_generator_config", "=", "train_generator_config", ")", "\n", "\n", "# fine-tune", "\n", "", "", "", "if", "finetuning_config", "and", "task_id", ">", "0", ":", "\n", "        ", "model", ".", "fine_tune", "(", "pseudo_memory_loader", ",", "val_loader", ")", "\n", "", "return", "pseudo_memory", ",", "resume_from_chkpt", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.inclearn.train._set_data_model": [[404, 412], ["inclearn.lib.factory.get_data", "inclearn.lib.factory.get_model"], "function", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.factory.get_data", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.factory.get_model"], ["\n", "", "def", "save_generator_params", "(", "model", ",", "results_folder", ",", "run_id", ",", "min_class", ",", "max_class", ")", ":", "\n", "    ", "for", "cls", "in", "range", "(", "min_class", ",", "max_class", ")", ":", "\n", "        ", "e_save_path", "=", "os", ".", "path", ".", "join", "(", "results_folder", ",", "f'generator_encoders_run{run_id}_class{cls}.pth'", ")", "\n", "torch", ".", "save", "(", "{", "'state_dict'", ":", "model", ".", "class_encoders", "[", "cls", "]", ".", "state_dict", "(", ")", "}", ",", "e_save_path", ")", "\n", "logger", ".", "LOGGER", ".", "info", "(", "f'Saved generator encoder for class {cls} to file {e_save_path}.'", ")", "\n", "\n", "", "d_save_path", "=", "os", ".", "path", ".", "join", "(", "results_folder", ",", "f'generator_decoders_run{run_id}.pth'", ")", "\n", "torch", ".", "save", "(", "{", "'state_dict'", ":", "model", ".", "universal_decoder", ".", "state_dict", "(", ")", "}", ",", "d_save_path", ")", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.inclearn.train._set_global_parameters": [[414, 417], ["train._set_seed", "inclearn.lib.factory.set_device"], "function", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.inclearn.train._set_seed", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.factory.set_device"], ["\n", "\n", "", "def", "load_generator_params", "(", "model", ",", "config", ",", "results_folder", ",", "run_id", ",", "min_class", ",", "max_class", ")", ":", "\n", "    ", "for", "cls", "in", "range", "(", "min_class", ",", "max_class", ")", ":", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.inclearn.train._set_seed": [[419, 434], ["inclearn.utils.LOGGER.LOGGER.info", "random.seed", "numpy.random.seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.set_num_threads", "inclearn.utils.LOGGER.LOGGER.warning", "inclearn.utils.LOGGER.LOGGER.warning", "inclearn.utils.LOGGER.LOGGER.info", "torch.autograd.set_detect_anomaly"], "function", ["None"], ["try", ":", "\n", "            ", "state_dict_saved", "=", "torch", ".", "load", "(", "e_save_path", ",", "map_location", "=", "config", "[", "'device'", "]", "[", "0", "]", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "            ", "logger", ".", "LOGGER", ".", "warning", "(", "f'Loading file `{e_save_path}` failed. Try to train it again.'", ")", "\n", "return", "False", "\n", "", "model", ".", "class_encoders", "[", "cls", "]", ".", "load_state_dict", "(", "state_dict_saved", "[", "'state_dict'", "]", ")", "\n", "logger", ".", "LOGGER", ".", "info", "(", "f'Loaded generator encoder for class {cls} from file {e_save_path}.'", ")", "\n", "\n", "", "d_save_path", "=", "os", ".", "path", ".", "join", "(", "results_folder", ",", "f'generator_decoders_run{run_id}.pth'", ")", "\n", "try", ":", "\n", "        ", "state_dict_saved", "=", "torch", ".", "load", "(", "d_save_path", ",", "map_location", "=", "config", "[", "'device'", "]", "[", "0", "]", ")", "\n", "", "except", ":", "\n", "        ", "logger", ".", "LOGGER", ".", "warning", "(", "f'Loading file `{d_save_path}` failed. Try to train it again.'", ")", "\n", "return", "False", "\n", "", "model", ".", "universal_decoder", ".", "load_state_dict", "(", "state_dict_saved", "[", "'state_dict'", "]", ")", "\n", "logger", ".", "LOGGER", ".", "info", "(", "f'Loaded universal decoder from file {d_save_path}.'", ")", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.inclearn.train._set_up_options": [[436, 449], ["args.update", "autolabel.append", "os.path.exists", "IOError", "train._parse_options", "os.path.splitext", "os.path.basename"], "function", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.update", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.inclearn.train._parse_options"], ["\n", "\n", "", "def", "_after_task", "(", "config", ",", "model", ",", "inc_dataset", ",", "run_id", ",", "task_id", ",", "results_folder", ")", ":", "\n", "    ", "regenerate", "=", "False", "\n", "if", "config", "[", "\"resume\"", "]", "and", "os", ".", "path", ".", "isdir", "(", "config", "[", "\"resume\"", "]", ")", "and", "not", "config", "[", "\"recompute_meta\"", "]", "and", "(", "config", "[", "\"resume_first\"", "]", "and", "task_id", "==", "0", ")", ":", "\n", "        ", "loaded", "=", "model", ".", "load_metadata", "(", "config", "[", "\"resume\"", "]", ",", "run_id", ")", "\n", "regenerate", "=", "not", "loaded", "\n", "", "else", ":", "\n", "        ", "model", ".", "after_task_intensive", "(", "inc_dataset", ")", "\n", "", "if", "regenerate", ":", "\n", "        ", "logger", ".", "LOGGER", ".", "warning", "(", "f'loaded meta file failed! Regenerating..'", ")", "\n", "model", ".", "after_task_intensive", "(", "inc_dataset", ",", "train_generator", "=", "True", ")", "\n", "", "model", ".", "after_task", "(", "inc_dataset", ")", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.inclearn.train._parse_options": [[451, 459], ["open", "path.endswith", "path.endswith", "yaml.load", "path.endswith", "Exception", "json.load"], "function", ["None"], ["if", "config", "[", "\"label\"", "]", "and", "(", "\n", "config", "[", "\"save_model\"", "]", "==", "\"task\"", "or", "\n", "(", "config", "[", "\"save_model\"", "]", "==", "\"last\"", "and", "task_id", "==", "inc_dataset", ".", "n_tasks", "-", "1", ")", "or", "\n", "(", "config", "[", "\"save_model\"", "]", "==", "\"first\"", "and", "task_id", "==", "0", ")", "\n", ")", ":", "\n", "        ", "model", ".", "save_parameters", "(", "results_folder", ",", "run_id", ")", "\n", "model", ".", "save_metadata", "(", "results_folder", ",", "run_id", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.inclearn.train._aggregate_results": [[466, 471], ["str", "round", "len", "str", "statistics.mean", "round", "statistics.stdev"], "function", ["None"], ["    ", "if", "config", "[", "\"label\"", "]", ":", "\n", "        ", "results_folder", "=", "results_utils", ".", "get_save_folder", "(", "config", "[", "\"model\"", "]", ",", "start_date", ",", "config", "[", "\"label\"", "]", ")", "\n", "", "else", ":", "\n", "        ", "results_folder", "=", "None", "\n", "\n", "", "if", "config", "[", "\"save_model\"", "]", ":", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.inclearn.loggers.LOG.__init__": [[15, 24], ["logging.StreamHandler", "logging.Formatter", "logging.StreamHandler.setFormatter", "logging.getLogger", "loggers.LOG.LOGGER.addHandler", "loggers.LOG.LOGGER.setLevel"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "handler", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "self", ".", "formatter", "=", "logging", ".", "Formatter", "(", "\n", "'[%(asctime)s] %(filename)-8s :: %(message)s'", ",", "\n", "datefmt", "=", "'%m-%d %H:%M:%S'", ")", "\n", "handler", ".", "setFormatter", "(", "self", ".", "formatter", ")", "\n", "self", ".", "LOGGER", "=", "logging", ".", "getLogger", "(", "'global'", ")", "\n", "self", ".", "LOGGER", ".", "addHandler", "(", "handler", ")", "\n", "self", ".", "LOGGER", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.inclearn.loggers.LOG.add_file_headler": [[25, 30], ["os.path.join", "logging.FileHandler", "logging.FileHandler.setFormatter", "loggers.LOG.LOGGER.addHandler", "loggers.time_string"], "methods", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.inclearn.utils.time_string"], ["", "def", "add_file_headler", "(", "self", ",", "save_path", ")", ":", "\n", "        ", "save_path", "=", "os", ".", "path", ".", "join", "(", "save_path", ",", "f'log_{time_string()}.log'", ")", "\n", "fhandler", "=", "logging", ".", "FileHandler", "(", "save_path", ",", "mode", "=", "'w'", ")", "\n", "fhandler", ".", "setFormatter", "(", "self", ".", "formatter", ")", "\n", "self", ".", "LOGGER", ".", "addHandler", "(", "fhandler", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.inclearn.loggers.LOG.print_baisic_info": [[31, 34], ["loggers.LOG.LOGGER.info", "loggers.LOG.LOGGER.info", "sys.version.replace"], "methods", ["None"], ["", "def", "print_baisic_info", "(", "self", ")", ":", "\n", "        ", "self", ".", "LOGGER", ".", "info", "(", "\"python version : {}\"", ".", "format", "(", "sys", ".", "version", ".", "replace", "(", "'\\n'", ",", "' '", ")", ")", ")", "\n", "self", ".", "LOGGER", ".", "info", "(", "\"torch  version : {}\"", ".", "format", "(", "torch", ".", "__version__", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.inclearn.loggers.time_string": [[8, 12], ["time.strftime", "time.localtime", "time.time"], "function", ["None"], ["def", "time_string", "(", ")", ":", "\n", "    ", "ISOTIMEFORMAT", "=", "'%Y-%m-%d %X'", "\n", "string", "=", "'[{}]'", ".", "format", "(", "time", ".", "strftime", "(", "ISOTIMEFORMAT", ",", "time", ".", "localtime", "(", "time", ".", "time", "(", ")", ")", ")", ")", "\n", "return", "string", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.inclearn.__main__.main": [[9, 19], ["inclearn.parser.get_parser().parse_args", "vars", "inclearn.train.train", "list", "print", "inclearn.parser.get_parser", "range"], "function", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.base.IncrementalLearner.train", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.inclearn.parser.get_parser"], ["def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parser", ".", "get_parser", "(", ")", ".", "parse_args", "(", ")", "\n", "args", "=", "vars", "(", "args", ")", "# Converting argparse Namespace to a dict.", "\n", "\n", "if", "args", "[", "\"seed_range\"", "]", "is", "not", "None", ":", "\n", "        ", "args", "[", "\"seed\"", "]", "=", "list", "(", "range", "(", "args", "[", "\"seed_range\"", "]", "[", "0", "]", ",", "args", "[", "\"seed_range\"", "]", "[", "1", "]", "+", "1", ")", ")", "\n", "print", "(", "\"Seed range\"", ",", "args", "[", "\"seed\"", "]", ")", "\n", "\n", "", "for", "_", "in", "train", "(", "args", ")", ":", "# `train` is a generator in order to be used with hyperfind.", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.inclearn.utils.LOG.__init__": [[15, 24], ["logging.StreamHandler", "logging.Formatter", "logging.StreamHandler.setFormatter", "logging.getLogger", "utils.LOG.LOGGER.addHandler", "utils.LOG.LOGGER.setLevel"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "handler", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "self", ".", "formatter", "=", "logging", ".", "Formatter", "(", "\n", "'[%(asctime)s] %(filename)-8s :: %(message)s'", ",", "\n", "datefmt", "=", "'%m-%d %H:%M:%S'", ")", "\n", "handler", ".", "setFormatter", "(", "self", ".", "formatter", ")", "\n", "self", ".", "LOGGER", "=", "logging", ".", "getLogger", "(", "'global'", ")", "\n", "self", ".", "LOGGER", ".", "addHandler", "(", "handler", ")", "\n", "self", ".", "LOGGER", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.inclearn.utils.LOG.add_file_headler": [[25, 30], ["os.path.join", "logging.FileHandler", "logging.FileHandler.setFormatter", "utils.LOG.LOGGER.addHandler", "utils.time_string"], "methods", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.inclearn.utils.time_string"], ["", "def", "add_file_headler", "(", "self", ",", "save_path", ")", ":", "\n", "        ", "save_path", "=", "os", ".", "path", ".", "join", "(", "save_path", ",", "f'log_{time_string()}.log'", ")", "\n", "fhandler", "=", "logging", ".", "FileHandler", "(", "save_path", ",", "mode", "=", "'w'", ")", "\n", "fhandler", ".", "setFormatter", "(", "self", ".", "formatter", ")", "\n", "self", ".", "LOGGER", ".", "addHandler", "(", "fhandler", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.inclearn.utils.LOG.print_baisic_info": [[31, 34], ["utils.LOG.LOGGER.info", "utils.LOG.LOGGER.info", "sys.version.replace"], "methods", ["None"], ["", "def", "print_baisic_info", "(", "self", ")", ":", "\n", "        ", "self", ".", "LOGGER", ".", "info", "(", "\"python version : {}\"", ".", "format", "(", "sys", ".", "version", ".", "replace", "(", "'\\n'", ",", "' '", ")", ")", ")", "\n", "self", ".", "LOGGER", ".", "info", "(", "\"torch  version : {}\"", ".", "format", "(", "torch", ".", "__version__", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.inclearn.utils.time_string": [[8, 12], ["time.strftime", "time.localtime", "time.time"], "function", ["None"], ["def", "time_string", "(", ")", ":", "\n", "    ", "ISOTIMEFORMAT", "=", "'%Y-%m-%d %X'", "\n", "string", "=", "'[{}]'", ".", "format", "(", "time", ".", "strftime", "(", "ISOTIMEFORMAT", ",", "time", ".", "localtime", "(", "time", ".", "time", "(", ")", ")", ")", ")", "\n", "return", "string", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.schedulers.GradualWarmupScheduler.__init__": [[20, 28], ["torch.optim.lr_scheduler._LRScheduler.__init__", "ValueError"], "methods", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.tools.conv_mtl.Conv2dMtl.__init__"], ["def", "__init__", "(", "self", ",", "optimizer", ",", "multiplier", ",", "total_epoch", ",", "after_scheduler", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "multiplier", "=", "multiplier", "\n", "if", "self", ".", "multiplier", "<=", "1.", ":", "\n", "            ", "raise", "ValueError", "(", "'multiplier should be greater than 1.'", ")", "\n", "", "self", ".", "total_epoch", "=", "total_epoch", "\n", "self", ".", "after_scheduler", "=", "after_scheduler", "\n", "self", ".", "finished", "=", "False", "\n", "super", "(", ")", ".", "__init__", "(", "optimizer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.schedulers.GradualWarmupScheduler.get_lr": [[29, 44], ["schedulers.GradualWarmupScheduler.after_scheduler.get_lr", "print"], "methods", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.schedulers.CosineWithRestarts.get_lr"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "last_epoch", ">", "self", ".", "total_epoch", ":", "\n", "            ", "if", "self", ".", "after_scheduler", ":", "\n", "                ", "if", "not", "self", ".", "finished", ":", "\n", "                    ", "self", ".", "after_scheduler", ".", "base_lrs", "=", "[", "\n", "base_lr", "*", "self", ".", "multiplier", "for", "base_lr", "in", "self", ".", "base_lrs", "\n", "]", "\n", "self", ".", "finished", "=", "True", "\n", "print", "(", "\"End of WarmUp.\"", ")", "\n", "", "return", "self", ".", "after_scheduler", ".", "get_lr", "(", ")", "\n", "", "return", "[", "base_lr", "*", "self", ".", "multiplier", "for", "base_lr", "in", "self", ".", "base_lrs", "]", "\n", "\n", "", "return", "[", "\n", "base_lr", "*", "(", "(", "self", ".", "multiplier", "-", "1.", ")", "*", "self", ".", "last_epoch", "/", "self", ".", "total_epoch", "+", "1.", ")", "\n", "for", "base_lr", "in", "self", ".", "base_lrs", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.schedulers.GradualWarmupScheduler.step_ReduceLROnPlateau": [[46, 63], ["zip", "schedulers.GradualWarmupScheduler.after_scheduler.step", "schedulers.GradualWarmupScheduler.after_scheduler.step"], "methods", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.schedulers.GradualWarmupScheduler.step", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.schedulers.GradualWarmupScheduler.step"], ["", "def", "step_ReduceLROnPlateau", "(", "self", ",", "metrics", ",", "epoch", "=", "None", ")", ":", "\n", "        ", "if", "epoch", "is", "None", ":", "\n", "            ", "epoch", "=", "self", ".", "last_epoch", "+", "1", "\n", "", "self", ".", "last_epoch", "=", "epoch", "if", "epoch", "!=", "0", "else", "1", "\n", "# ReduceLROnPlateau is called at the end of epoch, whereas others are called at beginning", "\n", "if", "self", ".", "last_epoch", "<=", "self", ".", "total_epoch", ":", "\n", "            ", "warmup_lr", "=", "[", "\n", "base_lr", "*", "(", "(", "self", ".", "multiplier", "-", "1.", ")", "*", "self", ".", "last_epoch", "/", "self", ".", "total_epoch", "+", "1.", ")", "\n", "for", "base_lr", "in", "self", ".", "base_lrs", "\n", "]", "\n", "for", "param_group", ",", "lr", "in", "zip", "(", "self", ".", "optimizer", ".", "param_groups", ",", "warmup_lr", ")", ":", "\n", "                ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "", "", "else", ":", "\n", "            ", "if", "epoch", "is", "None", ":", "\n", "                ", "self", ".", "after_scheduler", ".", "step", "(", "metrics", ",", "None", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "after_scheduler", ".", "step", "(", "metrics", ",", "epoch", "-", "self", ".", "total_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.schedulers.GradualWarmupScheduler.step": [[64, 75], ["type", "schedulers.GradualWarmupScheduler.step_ReduceLROnPlateau", "super().step", "schedulers.GradualWarmupScheduler.after_scheduler.step", "schedulers.GradualWarmupScheduler.after_scheduler.step"], "methods", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.schedulers.GradualWarmupScheduler.step_ReduceLROnPlateau", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.schedulers.GradualWarmupScheduler.step", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.schedulers.GradualWarmupScheduler.step", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.schedulers.GradualWarmupScheduler.step"], ["", "", "", "def", "step", "(", "self", ",", "epoch", "=", "None", ",", "metrics", "=", "None", ")", ":", "\n", "        ", "if", "type", "(", "self", ".", "after_scheduler", ")", "!=", "ReduceLROnPlateau", ":", "\n", "            ", "if", "self", ".", "finished", "and", "self", ".", "after_scheduler", ":", "\n", "                ", "if", "epoch", "is", "None", ":", "\n", "                    ", "self", ".", "after_scheduler", ".", "step", "(", "None", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "after_scheduler", ".", "step", "(", "epoch", "-", "self", ".", "total_epoch", ")", "\n", "", "", "else", ":", "\n", "                ", "return", "super", "(", "GradualWarmupScheduler", ",", "self", ")", ".", "step", "(", "epoch", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "step_ReduceLROnPlateau", "(", "metrics", ",", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.schedulers.CosineWithRestarts.__init__": [[103, 122], ["torch.optim.lr_scheduler._LRScheduler.__init__", "warnings.warning"], "methods", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.tools.conv_mtl.Conv2dMtl.__init__"], ["def", "__init__", "(", "\n", "self", ",", "optimizer", ",", "t_max", ":", "int", ",", "eta_min", ":", "float", "=", "0.", ",", "last_epoch", ":", "int", "=", "-", "1", ",", "factor", ":", "float", "=", "1.", "\n", ")", "->", "None", ":", "\n", "        ", "assert", "t_max", ">", "0", "\n", "assert", "eta_min", ">=", "0", "\n", "if", "t_max", "==", "1", "and", "factor", "==", "1", ":", "\n", "            ", "warnings", ".", "warning", "(", "\n", "\"Cosine annealing scheduler will have no effect on the learning \"", "\n", "\"rate since T_max = 1 and factor = 1.\"", "\n", ")", "\n", "", "self", ".", "t_max", "=", "t_max", "\n", "self", ".", "eta_min", "=", "eta_min", "\n", "self", ".", "factor", "=", "factor", "\n", "self", ".", "_last_restart", ":", "int", "=", "0", "\n", "self", ".", "_cycle_counter", ":", "int", "=", "0", "\n", "self", ".", "_cycle_factor", ":", "float", "=", "1.", "\n", "self", ".", "_updated_cycle_len", ":", "int", "=", "t_max", "\n", "self", ".", "_initialized", ":", "bool", "=", "False", "\n", "super", "(", "CosineWithRestarts", ",", "self", ")", ".", "__init__", "(", "optimizer", ",", "last_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.schedulers.CosineWithRestarts.get_lr": [[123, 153], ["int", "numpy.cos"], "methods", ["None"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get updated learning rate.\"\"\"", "\n", "# HACK: We need to check if this is the first time ``self.get_lr()`` was called,", "\n", "# since ``torch.optim.lr_scheduler._LRScheduler`` will call ``self.get_lr()``", "\n", "# when first initialized, but the learning rate should remain unchanged", "\n", "# for the first epoch.", "\n", "if", "not", "self", ".", "_initialized", ":", "\n", "            ", "self", ".", "_initialized", "=", "True", "\n", "return", "self", ".", "base_lrs", "\n", "\n", "", "step", "=", "self", ".", "last_epoch", "+", "1", "\n", "self", ".", "_cycle_counter", "=", "step", "-", "self", ".", "_last_restart", "\n", "\n", "lrs", "=", "[", "\n", "self", ".", "eta_min", "+", "(", "(", "lr", "-", "self", ".", "eta_min", ")", "/", "2", ")", "*", "(", "\n", "np", ".", "cos", "(", "\n", "np", ".", "pi", "*", "\n", "(", "self", ".", "_cycle_counter", "%", "self", ".", "_updated_cycle_len", ")", "/", "self", ".", "_updated_cycle_len", "\n", ")", "+", "1", "\n", ")", "for", "lr", "in", "self", ".", "base_lrs", "\n", "]", "\n", "\n", "if", "self", ".", "_cycle_counter", "%", "self", ".", "_updated_cycle_len", "==", "0", ":", "\n", "# Adjust the cycle length.", "\n", "            ", "self", ".", "_cycle_factor", "*=", "self", ".", "factor", "\n", "self", ".", "_cycle_counter", "=", "0", "\n", "self", ".", "_updated_cycle_len", "=", "int", "(", "self", ".", "_cycle_factor", "*", "self", ".", "t_max", ")", "\n", "self", ".", "_last_restart", "=", "step", "\n", "\n", "", "return", "lrs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.distance.squared_euclidian_distance": [[5, 7], ["torch.cdist"], "function", ["None"], ["def", "squared_euclidian_distance", "(", "a", ",", "b", ")", ":", "\n", "    ", "return", "torch", ".", "cdist", "(", "a", ",", "b", ")", "**", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.distance.cosine_similarity": [[9, 11], ["torch.mm", "torch.nn.functional.normalize", "torch.nn.functional.normalize"], "function", ["None"], ["", "def", "cosine_similarity", "(", "a", ",", "b", ")", ":", "\n", "    ", "return", "torch", ".", "mm", "(", "F", ".", "normalize", "(", "a", ",", "p", "=", "2", ",", "dim", "=", "-", "1", ")", ",", "F", ".", "normalize", "(", "b", ",", "p", "=", "2", ",", "dim", "=", "-", "1", ")", ".", "T", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.distance.stable_cosine_distance": [[13, 42], ["torch.cat", "torch.clamp", "torch.le", "torch.mul", "torch.mul", "torch.add", "torch.sqrt", "torch.eye", "torch.cat.pow().sum().expand", "torch.t().pow().sum().expand", "torch.mm", "torch.cat.size", "torch.cat.size", "torch.t", "torch.sqrt.size", "torch.cat.pow().sum", "torch.t().pow().sum", "torch.le.float", "torch.cat.pow", "torch.t().pow", "torch.t"], "function", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.add"], ["", "def", "stable_cosine_distance", "(", "a", ",", "b", ",", "squared", "=", "True", ")", ":", "\n", "    ", "\"\"\"Computes the pairwise 'EUCLIDEAN' distance matrix with numerical stability.\"\"\"", "\n", "mat", "=", "torch", ".", "cat", "(", "[", "a", ",", "b", "]", ")", "\n", "\n", "pairwise_distances_squared", "=", "torch", ".", "add", "(", "\n", "mat", ".", "pow", "(", "2", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "expand", "(", "mat", ".", "size", "(", "0", ")", ",", "-", "1", ")", ",", "\n", "torch", ".", "t", "(", "mat", ")", ".", "pow", "(", "2", ")", ".", "sum", "(", "dim", "=", "0", ",", "keepdim", "=", "True", ")", ".", "expand", "(", "mat", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", ")", "-", "2", "*", "(", "torch", ".", "mm", "(", "mat", ",", "torch", ".", "t", "(", "mat", ")", ")", ")", "\n", "\n", "# Deal with numerical inaccuracies. Set small negatives to zero.", "\n", "pairwise_distances_squared", "=", "torch", ".", "clamp", "(", "pairwise_distances_squared", ",", "min", "=", "0.0", ")", "\n", "\n", "# Get the mask where the zero distances are at.", "\n", "error_mask", "=", "torch", ".", "le", "(", "pairwise_distances_squared", ",", "0.0", ")", "\n", "\n", "# Optionally take the sqrt.", "\n", "if", "squared", ":", "\n", "        ", "pairwise_distances", "=", "pairwise_distances_squared", "\n", "", "else", ":", "\n", "        ", "pairwise_distances", "=", "torch", ".", "sqrt", "(", "pairwise_distances_squared", "+", "error_mask", ".", "float", "(", ")", "*", "1e-16", ")", "\n", "\n", "# Undo conditionally adding 1e-16.", "\n", "", "pairwise_distances", "=", "torch", ".", "mul", "(", "pairwise_distances", ",", "(", "error_mask", "==", "False", ")", ".", "float", "(", ")", ")", "\n", "\n", "# Explicitly set diagonals to zero.", "\n", "mask_offdiagonals", "=", "1", "-", "torch", ".", "eye", "(", "*", "pairwise_distances", ".", "size", "(", ")", ",", "device", "=", "pairwise_distances", ".", "device", ")", "\n", "pairwise_distances", "=", "torch", ".", "mul", "(", "pairwise_distances", ",", "mask_offdiagonals", ")", "\n", "\n", "return", "pairwise_distances", "[", ":", "a", ".", "shape", "[", "0", "]", ",", "a", ".", "shape", "[", "0", "]", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.metrics.MetricLogger.__init__": [[9, 18], ["collections.defaultdict", "numpy.ones"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "nb_tasks", ",", "nb_classes", ",", "increments", ")", ":", "\n", "        ", "self", ".", "metrics", "=", "collections", ".", "defaultdict", "(", "list", ")", "\n", "\n", "self", ".", "nb_tasks", "=", "nb_tasks", "\n", "self", ".", "nb_classes", "=", "nb_classes", "\n", "self", ".", "increments", "=", "increments", "\n", "\n", "self", ".", "_accuracy_matrix", "=", "np", ".", "ones", "(", "(", "nb_classes", ",", "nb_tasks", ")", ",", "dtype", "=", "\"float16\"", ")", "*", "-", "1", "\n", "self", ".", "_task_counter", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.metrics.MetricLogger.log_task": [[19, 58], ["metrics.MetricLogger.metrics[].append", "metrics.MetricLogger.metrics[].append", "metrics.MetricLogger.metrics[].append", "metrics.MetricLogger.metrics[].append", "metrics.MetricLogger.metrics[].append", "metrics.MetricLogger.metrics[].append", "metrics.MetricLogger._update_accuracy_matrix", "metrics.MetricLogger.metrics[].append", "metrics.accuracy_per_task", "metrics.accuracy_per_task", "metrics.accuracy_per_task", "metrics.incremental_accuracy", "metrics.incremental_accuracy", "metrics.forgetting", "metrics.cord_metric", "metrics.MetricLogger.metrics[].append", "metrics.MetricLogger.metrics[].append", "metrics.MetricLogger.metrics[].append", "metrics.MetricLogger.metrics[].append", "numpy.where", "metrics.accuracy", "numpy.where", "metrics.accuracy", "metrics.old_accuracy", "metrics.new_accuracy", "sum", "sum"], "methods", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.metrics.MetricLogger._update_accuracy_matrix", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.metrics.accuracy_per_task", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.metrics.accuracy_per_task", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.metrics.accuracy_per_task", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.metrics.incremental_accuracy", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.metrics.incremental_accuracy", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.metrics.forgetting", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.metrics.cord_metric", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.metrics.accuracy", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.metrics.accuracy", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.metrics.old_accuracy", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.metrics.new_accuracy"], ["", "def", "log_task", "(", "self", ",", "ypreds", ",", "ytrue", ",", "task_size", ",", "zeroshot", "=", "False", ")", ":", "\n", "        ", "self", ".", "metrics", "[", "\"accuracy\"", "]", ".", "append", "(", "\n", "accuracy_per_task", "(", "ypreds", ",", "ytrue", ",", "task_size", "=", "10", ",", "topk", "=", "1", ")", "\n", ")", "# FIXME various task size", "\n", "self", ".", "metrics", "[", "\"accuracy_top5\"", "]", ".", "append", "(", "\n", "accuracy_per_task", "(", "ypreds", ",", "ytrue", ",", "task_size", "=", "None", ",", "topk", "=", "5", ")", "\n", ")", "\n", "self", ".", "metrics", "[", "\"accuracy_per_class\"", "]", ".", "append", "(", "\n", "accuracy_per_task", "(", "ypreds", ",", "ytrue", ",", "task_size", "=", "1", ",", "topk", "=", "1", ")", "\n", ")", "\n", "self", ".", "metrics", "[", "\"incremental_accuracy\"", "]", ".", "append", "(", "incremental_accuracy", "(", "self", ".", "metrics", "[", "\"accuracy\"", "]", ")", ")", "\n", "self", ".", "metrics", "[", "\"incremental_accuracy_top5\"", "]", ".", "append", "(", "\n", "incremental_accuracy", "(", "self", ".", "metrics", "[", "\"accuracy_top5\"", "]", ")", "\n", ")", "\n", "self", ".", "metrics", "[", "\"forgetting\"", "]", ".", "append", "(", "forgetting", "(", "self", ".", "metrics", "[", "\"accuracy\"", "]", ")", ")", "\n", "\n", "self", ".", "_update_accuracy_matrix", "(", "self", ".", "metrics", "[", "\"accuracy_per_class\"", "]", "[", "-", "1", "]", ")", "\n", "self", ".", "metrics", "[", "\"cord\"", "]", ".", "append", "(", "cord_metric", "(", "self", ".", "_accuracy_matrix", ")", ")", "\n", "#self.metrics[\"cord_old\"].append(cord_metric(self._accuracy_matrix, only=\"old\"))", "\n", "#self.metrics[\"cord_new\"].append(cord_metric(self._accuracy_matrix, only=\"new\"))", "\n", "\n", "if", "zeroshot", ":", "\n", "            ", "seen_classes_indexes", "=", "np", ".", "where", "(", "ytrue", "<", "sum", "(", "self", ".", "increments", "[", ":", "self", ".", "_task_counter", "+", "1", "]", ")", "\n", ")", "[", "0", "]", "\n", "self", ".", "metrics", "[", "\"seen_classes_accuracy\"", "]", ".", "append", "(", "\n", "accuracy", "(", "ypreds", "[", "seen_classes_indexes", "]", ",", "ytrue", "[", "seen_classes_indexes", "]", ")", "\n", ")", "\n", "unseen_classes_indexes", "=", "np", ".", "where", "(", "\n", "ytrue", ">=", "sum", "(", "self", ".", "increments", "[", ":", "self", ".", "_task_counter", "+", "1", "]", ")", "\n", ")", "[", "0", "]", "\n", "self", ".", "metrics", "[", "\"unseen_classes_accuracy\"", "]", ".", "append", "(", "\n", "accuracy", "(", "ypreds", "[", "unseen_classes_indexes", "]", ",", "ytrue", "[", "unseen_classes_indexes", "]", ")", "\n", ")", "\n", "\n", "", "if", "self", ".", "_task_counter", ">", "0", ":", "\n", "            ", "self", ".", "metrics", "[", "\"old_accuracy\"", "]", ".", "append", "(", "old_accuracy", "(", "ypreds", ",", "ytrue", ",", "task_size", ")", ")", "\n", "self", ".", "metrics", "[", "\"new_accuracy\"", "]", ".", "append", "(", "new_accuracy", "(", "ypreds", ",", "ytrue", ",", "task_size", ")", ")", "\n", "\n", "", "self", ".", "_task_counter", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.metrics.MetricLogger.last_results": [[59, 90], ["results.update", "results.update", "len", "numpy.mean", "numpy.mean"], "methods", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.update", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.update"], ["", "@", "property", "\n", "def", "last_results", "(", "self", ")", ":", "\n", "        ", "results", "=", "{", "\n", "\"task_id\"", ":", "len", "(", "self", ".", "metrics", "[", "\"accuracy\"", "]", ")", "-", "1", ",", "\n", "\"accuracy\"", ":", "self", ".", "metrics", "[", "\"accuracy\"", "]", "[", "-", "1", "]", ",", "\n", "\"incremental_accuracy\"", ":", "self", ".", "metrics", "[", "\"incremental_accuracy\"", "]", "[", "-", "1", "]", ",", "\n", "\"accuracy_top5\"", ":", "self", ".", "metrics", "[", "\"accuracy_top5\"", "]", "[", "-", "1", "]", ",", "\n", "\"incremental_accuracy_top5\"", ":", "self", ".", "metrics", "[", "\"incremental_accuracy_top5\"", "]", "[", "-", "1", "]", ",", "\n", "\"forgetting\"", ":", "self", ".", "metrics", "[", "\"forgetting\"", "]", "[", "-", "1", "]", ",", "\n", "\"accuracy_per_class\"", ":", "self", ".", "metrics", "[", "\"accuracy_per_class\"", "]", "[", "-", "1", "]", ",", "\n", "\"cord\"", ":", "self", ".", "metrics", "[", "\"cord\"", "]", "[", "-", "1", "]", "\n", "}", "\n", "\n", "if", "\"old_accuracy\"", "in", "self", ".", "metrics", ":", "\n", "            ", "results", ".", "update", "(", "\n", "{", "\n", "\"old_accuracy\"", ":", "self", ".", "metrics", "[", "\"old_accuracy\"", "]", "[", "-", "1", "]", ",", "\n", "\"new_accuracy\"", ":", "self", ".", "metrics", "[", "\"new_accuracy\"", "]", "[", "-", "1", "]", ",", "\n", "\"avg_old_accuracy\"", ":", "np", ".", "mean", "(", "self", ".", "metrics", "[", "\"old_accuracy\"", "]", ")", ",", "\n", "\"avg_new_accuracy\"", ":", "np", ".", "mean", "(", "self", ".", "metrics", "[", "\"new_accuracy\"", "]", ")", ",", "\n", "}", "\n", ")", "\n", "", "if", "\"seen_classes_accuracy\"", "in", "self", ".", "metrics", ":", "\n", "            ", "results", ".", "update", "(", "\n", "{", "\n", "\"seen_classes_accuracy\"", ":", "self", ".", "metrics", "[", "\"seen_classes_accuracy\"", "]", "[", "-", "1", "]", ",", "\n", "\"unseen_classes_accuracy\"", ":", "self", ".", "metrics", "[", "\"unseen_classes_accuracy\"", "]", "[", "-", "1", "]", ",", "\n", "}", "\n", ")", "\n", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.metrics.MetricLogger._update_accuracy_matrix": [[91, 97], ["new_accuracy_per_class.items", "int", "k.split"], "methods", ["None"], ["", "def", "_update_accuracy_matrix", "(", "self", ",", "new_accuracy_per_class", ")", ":", "\n", "        ", "for", "k", ",", "v", "in", "new_accuracy_per_class", ".", "items", "(", ")", ":", "\n", "            ", "if", "k", "==", "\"total\"", ":", "\n", "                ", "continue", "\n", "", "class_id", "=", "int", "(", "k", ".", "split", "(", "\"-\"", ")", "[", "0", "]", ")", "\n", "self", ".", "_accuracy_matrix", "[", "class_id", ",", "self", ".", "_task_counter", "]", "=", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.metrics.cord_metric": [[99, 114], ["range", "numpy.mean().item", "accuracies.append", "numpy.where", "len", "numpy.mean", "numpy.mean"], "function", ["None"], ["", "", "", "def", "cord_metric", "(", "accuracy_matrix", ",", "only", "=", "None", ")", ":", "\n", "    ", "accuracies", "=", "[", "]", "\n", "\n", "for", "class_id", "in", "range", "(", "accuracy_matrix", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "filled_indexes", "=", "np", ".", "where", "(", "accuracy_matrix", "[", "class_id", "]", ">", "-", "1.", ")", "[", "0", "]", "\n", "\n", "if", "only", "==", "\"old\"", ":", "\n", "            ", "filled_indexes", "[", "1", ":", "]", "\n", "", "elif", "only", "==", "\"new\"", ":", "\n", "            ", "filled_indexes", "[", ":", "1", "]", "\n", "\n", "", "if", "len", "(", "filled_indexes", ")", "==", "0", ":", "\n", "            ", "continue", "\n", "", "accuracies", ".", "append", "(", "np", ".", "mean", "(", "accuracy_matrix", "[", "class_id", ",", "filled_indexes", "]", ")", ")", "\n", "", "return", "np", ".", "mean", "(", "accuracies", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.metrics.accuracy_per_task": [[116, 142], ["metrics.accuracy", "range", "metrics.accuracy", "numpy.max", "numpy.max", "numpy.where", "str().rjust", "str().rjust", "numpy.logical_and", "str", "str"], "function", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.metrics.accuracy", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.metrics.accuracy"], ["", "def", "accuracy_per_task", "(", "ypreds", ",", "ytrue", ",", "task_size", "=", "10", ",", "topk", "=", "1", ")", ":", "\n", "    ", "\"\"\"Computes accuracy for the whole test & per task.\n\n    :param ypred: The predictions array.\n    :param ytrue: The ground-truth array.\n    :param task_size: The size of the task.\n    :return: A dictionnary.\n    \"\"\"", "\n", "all_acc", "=", "{", "}", "\n", "\n", "all_acc", "[", "\"total\"", "]", "=", "accuracy", "(", "ypreds", ",", "ytrue", ",", "topk", "=", "topk", ")", "\n", "\n", "if", "task_size", "is", "not", "None", ":", "\n", "        ", "for", "class_id", "in", "range", "(", "0", ",", "np", ".", "max", "(", "ytrue", ")", "+", "task_size", ",", "task_size", ")", ":", "\n", "            ", "if", "class_id", ">", "np", ".", "max", "(", "ytrue", ")", ":", "\n", "                ", "break", "\n", "\n", "", "idxes", "=", "np", ".", "where", "(", "np", ".", "logical_and", "(", "ytrue", ">=", "class_id", ",", "ytrue", "<", "class_id", "+", "task_size", ")", ")", "[", "0", "]", "\n", "\n", "label", "=", "\"{}-{}\"", ".", "format", "(", "\n", "str", "(", "class_id", ")", ".", "rjust", "(", "2", ",", "\"0\"", ")", ",", "\n", "str", "(", "class_id", "+", "task_size", "-", "1", ")", ".", "rjust", "(", "2", ",", "\"0\"", ")", "\n", ")", "\n", "all_acc", "[", "label", "]", "=", "accuracy", "(", "ypreds", "[", "idxes", "]", ",", "ytrue", "[", "idxes", "]", ",", "topk", "=", "topk", ")", "\n", "\n", "", "", "return", "all_acc", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.metrics.old_accuracy": [[144, 155], ["metrics.accuracy", "numpy.where"], "function", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.metrics.accuracy"], ["", "def", "old_accuracy", "(", "ypreds", ",", "ytrue", ",", "task_size", ")", ":", "\n", "    ", "\"\"\"Computes accuracy for the whole test & per task.\n\n    :param ypred: The predictions array.\n    :param ytrue: The ground-truth array.\n    :param task_size: The size of the task.\n    :return: A dictionnary.\n    \"\"\"", "\n", "nb_classes", "=", "ypreds", ".", "shape", "[", "1", "]", "\n", "old_class_indexes", "=", "np", ".", "where", "(", "ytrue", "<", "nb_classes", "-", "task_size", ")", "[", "0", "]", "\n", "return", "accuracy", "(", "ypreds", "[", "old_class_indexes", "]", ",", "ytrue", "[", "old_class_indexes", "]", ",", "topk", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.metrics.new_accuracy": [[157, 168], ["metrics.accuracy", "numpy.where"], "function", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.metrics.accuracy"], ["", "def", "new_accuracy", "(", "ypreds", ",", "ytrue", ",", "task_size", ")", ":", "\n", "    ", "\"\"\"Computes accuracy for the whole test & per task.\n\n    :param ypred: The predictions array.\n    :param ytrue: The ground-truth array.\n    :param task_size: The size of the task.\n    :return: A dictionnary.\n    \"\"\"", "\n", "nb_classes", "=", "ypreds", ".", "shape", "[", "1", "]", "\n", "new_class_indexes", "=", "np", ".", "where", "(", "ytrue", ">=", "nb_classes", "-", "task_size", ")", "[", "0", "]", "\n", "return", "accuracy", "(", "ypreds", "[", "new_class_indexes", "]", ",", "ytrue", "[", "new_class_indexes", "]", ",", "topk", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.metrics.accuracy": [[170, 186], ["len", "min", "output.topk", "pred.t.t", "pred.t.eq", "correct[].reshape().float().sum().item", "round", "torch.tensor", "torch.tensor", "numpy.unique", "targets.view().expand_as", "correct[].reshape().float().sum", "targets.view", "correct[].reshape().float", "correct[].reshape"], "function", ["None"], ["", "def", "accuracy", "(", "output", ",", "targets", ",", "topk", "=", "1", ")", ":", "\n", "    ", "\"\"\"Computes the precision@k for the specified values of k\"\"\"", "\n", "output", ",", "targets", "=", "torch", ".", "tensor", "(", "output", ")", ",", "torch", ".", "tensor", "(", "targets", ")", "\n", "\n", "batch_size", "=", "targets", ".", "shape", "[", "0", "]", "\n", "if", "batch_size", "==", "0", ":", "\n", "        ", "return", "0.", "\n", "", "nb_classes", "=", "len", "(", "np", ".", "unique", "(", "targets", ")", ")", "\n", "topk", "=", "min", "(", "topk", ",", "nb_classes", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "topk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "targets", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "correct_k", "=", "correct", "[", ":", "topk", "]", ".", "reshape", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ")", ".", "item", "(", ")", "\n", "return", "round", "(", "correct_k", "/", "batch_size", ",", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.metrics.incremental_accuracy": [[188, 197], ["sum", "len"], "function", ["None"], ["", "def", "incremental_accuracy", "(", "accuracies", ")", ":", "\n", "    ", "\"\"\"Computes the average incremental accuracy as described in iCaRL.\n\n    It is the average of the current task accuracy (tested on 0-X) with the\n    previous task accuracy.\n\n    :param acc_dict: A list TODO\n    \"\"\"", "\n", "return", "sum", "(", "task_acc", "[", "\"total\"", "]", "for", "task_acc", "in", "accuracies", ")", "/", "len", "(", "accuracies", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.metrics.forgetting": [[199, 220], ["last_accuracies.keys", "len", "len", "max"], "function", ["None"], ["", "def", "forgetting", "(", "accuracies", ")", ":", "\n", "    ", "if", "len", "(", "accuracies", ")", "==", "1", ":", "\n", "        ", "return", "0.", "\n", "\n", "", "last_accuracies", "=", "accuracies", "[", "-", "1", "]", "\n", "usable_tasks", "=", "last_accuracies", ".", "keys", "(", ")", "\n", "\n", "forgetting", "=", "0.", "\n", "for", "task", "in", "usable_tasks", ":", "\n", "        ", "if", "task", "==", "\"total\"", ":", "\n", "            ", "continue", "\n", "\n", "", "max_task", "=", "0.", "\n", "\n", "for", "task_accuracies", "in", "accuracies", "[", ":", "-", "1", "]", ":", "\n", "            ", "if", "task", "in", "task_accuracies", ":", "\n", "                ", "max_task", "=", "max", "(", "max_task", ",", "task_accuracies", "[", "task", "]", ")", "\n", "\n", "", "", "forgetting", "+=", "max_task", "-", "last_accuracies", "[", "task", "]", "\n", "\n", "", "return", "forgetting", "/", "len", "(", "usable_tasks", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.metrics.forward_transfer": [[222, 235], ["len", "range"], "function", ["None"], ["", "def", "forward_transfer", "(", "accuracies", ")", ":", "\n", "    ", "\"\"\"Measures the influence that learning a task has on the performance of future tasks.\n\n    References:\n        * Don't forget, there is more than forgetting: new metrics for Continual Learning\n          Diaz et al.\n          NeurIPS Workshop 2018\n    \"\"\"", "\n", "nb_tasks", "=", "len", "(", "accuracies", ")", "\n", "\n", "fwt", "=", "0", "\n", "for", "i", "in", "range", "(", "nb_tasks", ")", ":", "\n", "        ", "pass", "\n", "", "", ""]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.vizualization.grad_cam": [[4, 19], ["pdb.set_trace", "torch.autograd.grad", "len", "range"], "function", ["None"], ["def", "grad_cam", "(", "spatial_features", ",", "selected_logits", ")", ":", "\n", "    ", "batch_size", "=", "spatial_features", ".", "shape", "[", "0", "]", "\n", "assert", "batch_size", "==", "len", "(", "selected_logits", ")", "\n", "\n", "formated_logits", "=", "[", "selected_logits", "[", "i", "]", "for", "i", "in", "range", "(", "batch_size", ")", "]", "\n", "\n", "import", "pdb", "\n", "pdb", ".", "set_trace", "(", ")", "\n", "grads", "=", "torch", ".", "autograd", ".", "grad", "(", "\n", "formated_logits", ",", "spatial_features", ",", "retain_graph", "=", "True", ",", "create_graph", "=", "True", "\n", ")", "\n", "\n", "assert", "grads", ".", "shape", "==", "spatial_features", ".", "shape", "\n", "\n", "return", "grads", "\n", "", ""]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.logger.set_logging_level": [[4, 18], ["logging_level.lower.lower", "logging.basicConfig"], "function", ["None"], ["import", "os", "\n", "import", "time", "\n", "\n", "\n", "def", "time_string", "(", ")", ":", "\n", "    ", "ISOTIMEFORMAT", "=", "'%Y-%m-%d %X'", "\n", "string", "=", "'[{}]'", ".", "format", "(", "time", ".", "strftime", "(", "ISOTIMEFORMAT", ",", "time", ".", "localtime", "(", "time", ".", "time", "(", ")", ")", ")", ")", "\n", "return", "string", "\n", "\n", "\n", "", "class", "LOG", ":", "\n", "    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "handler", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "self", ".", "formatter", "=", "logging", ".", "Formatter", "(", "\n", "'[%(asctime)s] %(filename)-8s :: %(message)s'", ",", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.pooling.WeldonPool2d.__init__": [[8, 17], ["torch.Module.__init__", "print", "pooling.WeldonPool2d._define_function"], "methods", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.tools.conv_mtl.Conv2dMtl.__init__", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.pooling.WeldonPool2d._define_function"], ["    ", "def", "__init__", "(", "self", ",", "kmax", "=", "1", ",", "kmin", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "WeldonPool2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "kmax", "=", "kmax", "\n", "self", ".", "kmin", "=", "kmin", "\n", "if", "self", ".", "kmin", "is", "None", ":", "\n", "            ", "self", ".", "kmin", "=", "self", ".", "kmax", "\n", "\n", "", "print", "(", "\"Using Weldon Pooling with kmax={}, kmin={}.\"", ".", "format", "(", "self", ".", "kmax", ",", "self", ".", "kmin", ")", ")", "\n", "self", ".", "_pool_func", "=", "self", ".", "_define_function", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.pooling.WeldonPool2d.forward": [[18, 20], ["pooling.WeldonPool2d._pool_func"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "_pool_func", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.pooling.WeldonPool2d._define_function": [[21, 100], ["input.size", "input.size", "input.size", "input.size", "WeldonPool2dFunction.get_number_of_instances", "WeldonPool2dFunction.get_number_of_instances", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "indices.narrow", "sorted.narrow().sum().div_", "ctx.save_for_backward", "sorted.narrow().sum().div_.view", "input.size", "input.size", "input.size", "input.size", "WeldonPool2dFunction.get_number_of_instances", "WeldonPool2dFunction.get_number_of_instances", "grad_output.view().expand", "grad_output.new().resize_().fill_().scatter_().div_", "grad_output.new().resize_().fill_().scatter_().div_.view", "input.new", "input.new().long", "input.view", "indices.narrow", "sorted.narrow().sum().div_.add_().div_", "grad_output.view().expand", "grad_output.new().resize_().fill_().scatter_().div_", "grad_output.new().resize_().fill_().scatter_().div_.add_().div_", "round", "sorted.narrow().sum", "grad_output.view", "grad_output.new().resize_().fill_().scatter_", "int", "int", "input.new", "sorted.narrow().sum().div_.add_", "grad_output.view", "grad_output.new().resize_().fill_().scatter_", "grad_output.new().resize_().fill_().scatter_().div_.add_", "sorted.narrow", "sorted.narrow().sum().div_", "grad_output.new().resize_().fill_", "grad_output.new().resize_().fill_", "sorted.narrow().sum", "grad_output.new().resize_", "grad_output.new().resize_", "sorted.narrow", "grad_output.new", "grad_output.new"], "methods", ["None"], ["", "def", "_define_function", "(", "self", ")", ":", "\n", "        ", "class", "WeldonPool2dFunction", "(", "Function", ")", ":", "\n", "            ", "@", "staticmethod", "\n", "def", "get_number_of_instances", "(", "k", ",", "n", ")", ":", "\n", "                ", "if", "k", "<=", "0", ":", "\n", "                    ", "return", "0", "\n", "", "elif", "k", "<", "1", ":", "\n", "                    ", "return", "round", "(", "k", "*", "n", ")", "\n", "", "elif", "k", ">", "n", ":", "\n", "                    ", "return", "int", "(", "n", ")", "\n", "", "else", ":", "\n", "                    ", "return", "int", "(", "k", ")", "\n", "\n", "", "", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "input", ")", ":", "\n", "# get batch information", "\n", "                ", "batch_size", "=", "input", ".", "size", "(", "0", ")", "\n", "num_channels", "=", "input", ".", "size", "(", "1", ")", "\n", "h", "=", "input", ".", "size", "(", "2", ")", "\n", "w", "=", "input", ".", "size", "(", "3", ")", "\n", "\n", "# get number of regions", "\n", "n", "=", "h", "*", "w", "\n", "\n", "# get the number of max and min instances", "\n", "kmax", "=", "WeldonPool2dFunction", ".", "get_number_of_instances", "(", "self", ".", "kmax", ",", "n", ")", "\n", "kmin", "=", "WeldonPool2dFunction", ".", "get_number_of_instances", "(", "self", ".", "kmin", ",", "n", ")", "\n", "\n", "# sort scores", "\n", "sorted", ",", "indices", "=", "input", ".", "new", "(", ")", ",", "input", ".", "new", "(", ")", ".", "long", "(", ")", "\n", "torch", ".", "sort", "(", "input", ".", "view", "(", "batch_size", ",", "num_channels", ",", "n", ")", ",", "dim", "=", "2", ",", "descending", "=", "True", ",", "out", "=", "(", "sorted", ",", "indices", ")", ")", "\n", "\n", "# compute scores for max instances", "\n", "indices_max", "=", "indices", ".", "narrow", "(", "2", ",", "0", ",", "kmax", ")", "\n", "output", "=", "sorted", ".", "narrow", "(", "2", ",", "0", ",", "kmax", ")", ".", "sum", "(", "2", ")", ".", "div_", "(", "kmax", ")", "\n", "\n", "if", "kmin", ">", "0", ":", "\n", "# compute scores for min instances", "\n", "                    ", "indices_min", "=", "indices", ".", "narrow", "(", "2", ",", "n", "-", "kmin", ",", "kmin", ")", "\n", "output", ".", "add_", "(", "sorted", ".", "narrow", "(", "2", ",", "n", "-", "kmin", ",", "kmin", ")", ".", "sum", "(", "2", ")", ".", "div_", "(", "kmin", ")", ")", ".", "div_", "(", "2", ")", "\n", "\n", "# save input for backward", "\n", "", "ctx", ".", "save_for_backward", "(", "indices_max", ",", "indices_min", ",", "input", ")", "\n", "\n", "# return output with right size", "\n", "return", "output", ".", "view", "(", "batch_size", ",", "num_channels", ")", "\n", "\n", "", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "\n", "# get the input", "\n", "                ", "indices_max", ",", "indices_min", ",", "input", ",", "=", "ctx", ".", "saved_tensors", "\n", "\n", "# get batch information", "\n", "batch_size", "=", "input", ".", "size", "(", "0", ")", "\n", "num_channels", "=", "input", ".", "size", "(", "1", ")", "\n", "h", "=", "input", ".", "size", "(", "2", ")", "\n", "w", "=", "input", ".", "size", "(", "3", ")", "\n", "\n", "# get number of regions", "\n", "n", "=", "h", "*", "w", "\n", "\n", "# get the number of max and min instances", "\n", "kmax", "=", "WeldonPool2dFunction", ".", "get_number_of_instances", "(", "self", ".", "kmax", ",", "n", ")", "\n", "kmin", "=", "WeldonPool2dFunction", ".", "get_number_of_instances", "(", "self", ".", "kmin", ",", "n", ")", "\n", "\n", "# compute gradient for max instances", "\n", "grad_output_max", "=", "grad_output", ".", "view", "(", "batch_size", ",", "num_channels", ",", "1", ")", ".", "expand", "(", "batch_size", ",", "num_channels", ",", "kmax", ")", "\n", "grad_input", "=", "grad_output", ".", "new", "(", ")", ".", "resize_", "(", "batch_size", ",", "num_channels", ",", "n", ")", ".", "fill_", "(", "0", ")", ".", "scatter_", "(", "2", ",", "indices_max", ",", "grad_output_max", ")", ".", "div_", "(", "kmax", ")", "\n", "\n", "if", "kmin", ">", "0", ":", "\n", "# compute gradient for min instances", "\n", "                    ", "grad_output_min", "=", "grad_output", ".", "view", "(", "batch_size", ",", "num_channels", ",", "1", ")", ".", "expand", "(", "batch_size", ",", "num_channels", ",", "kmin", ")", "\n", "grad_input_min", "=", "grad_output", ".", "new", "(", ")", ".", "resize_", "(", "batch_size", ",", "num_channels", ",", "n", ")", ".", "fill_", "(", "0", ")", ".", "scatter_", "(", "2", ",", "indices_min", ",", "grad_output_min", ")", ".", "div_", "(", "kmin", ")", "\n", "grad_input", ".", "add_", "(", "grad_input_min", ")", ".", "div_", "(", "2", ")", "\n", "\n", "", "return", "grad_input", ".", "view", "(", "batch_size", ",", "num_channels", ",", "h", ",", "w", ")", "\n", "\n", "", "", "return", "WeldonPool2dFunction", ".", "apply", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.pooling.WeldonPool2d.__repr__": [[101, 104], ["str", "str"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "' (kmax='", "+", "str", "(", "self", ".", "kmax", "\n", ")", "+", "', kmin='", "+", "str", "(", "self", ".", "kmin", ")", "+", "')'", "\n", "", "", ""]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.factory.get_optimizer": [[11, 22], ["torch.optim.Adam", "torch.optim.AdamW", "torch.optim.SGD", "torch.optim.SGD"], "function", ["None"], ["def", "get_optimizer", "(", "params", ",", "optimizer", ",", "lr", ",", "weight_decay", "=", "0.0", ")", ":", "\n", "    ", "if", "optimizer", "==", "\"adam\"", ":", "\n", "        ", "return", "optim", ".", "Adam", "(", "params", ",", "lr", "=", "lr", ",", "weight_decay", "=", "weight_decay", ")", "\n", "", "elif", "optimizer", "==", "\"adamw\"", ":", "\n", "        ", "return", "optim", ".", "AdamW", "(", "params", ",", "lr", "=", "lr", ",", "weight_decay", "=", "weight_decay", ")", "\n", "", "elif", "optimizer", "==", "\"sgd\"", ":", "\n", "        ", "return", "optim", ".", "SGD", "(", "params", ",", "lr", "=", "lr", ",", "weight_decay", "=", "weight_decay", ",", "momentum", "=", "0.9", ")", "\n", "", "elif", "optimizer", "==", "\"sgd_nesterov\"", ":", "\n", "        ", "return", "optim", ".", "SGD", "(", "params", ",", "lr", "=", "lr", ",", "weight_decay", "=", "weight_decay", ",", "momentum", "=", "0.9", ",", "nesterov", "=", "True", ")", "\n", "\n", "", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.factory.get_convnet": [[24, 28], ["NotImplementedError", "inclearn.convnet.my_resnet.resnet_rebuffi"], "function", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.convnet.my_resnet.resnet_rebuffi"], ["", "def", "get_convnet", "(", "convnet_type", ",", "**", "kwargs", ")", ":", "\n", "    ", "if", "convnet_type", "==", "\"rebuffi\"", ":", "\n", "        ", "return", "my_resnet", ".", "resnet_rebuffi", "(", "**", "kwargs", ")", "\n", "", "elif", "convnet_type", "==", "'resnet18'", ":", "\n", "        ", "return", "resnet", ".", "resnet18", "(", "**", "kwargs", ")", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.factory.get_model": [[30, 43], ["args[].lower", "NotImplementedError", "list", "dict_models.keys"], "function", ["None"], ["\n", "\n", "", "def", "get_model", "(", "args", ")", ":", "\n", "    ", "dict_models", "=", "{", "\n", "\"imagine\"", ":", "models", ".", "Imagine", ",", "\n", "}", "\n", "\n", "model", "=", "args", "[", "\"model\"", "]", ".", "lower", "(", ")", "\n", "\n", "if", "model", "not", "in", "dict_models", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\n", "\"Unknown model {}, must be among {}.\"", ".", "format", "(", "args", "[", "\"model\"", "]", ",", "list", "(", "dict_models", ".", "keys", "(", ")", ")", ")", "\n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.factory.get_data": [[45, 64], ["inclearn.lib.data.IncrementalDataset", "factory.get_sampler", "args.get", "args.get", "args.get", "args.get"], "function", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.factory.get_sampler", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.get", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.get", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.get", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.get"], ["\n", "\n", "", "def", "get_data", "(", "args", ",", "class_order", "=", "None", ")", ":", "\n", "    ", "return", "data", ".", "IncrementalDataset", "(", "\n", "dataset_name", "=", "args", "[", "\"dataset\"", "]", ",", "\n", "random_order", "=", "args", "[", "\"random_classes\"", "]", ",", "\n", "shuffle", "=", "True", ",", "\n", "batch_size", "=", "args", "[", "\"batch_size\"", "]", ",", "\n", "workers", "=", "args", "[", "\"workers\"", "]", ",", "\n", "validation_split", "=", "args", "[", "\"validation\"", "]", ",", "\n", "onehot", "=", "args", "[", "\"onehot\"", "]", ",", "\n", "increment", "=", "args", "[", "\"increment\"", "]", ",", "\n", "initial_increment", "=", "args", "[", "\"initial_increment\"", "]", ",", "\n", "sampler", "=", "get_sampler", "(", "args", ")", ",", "\n", "sampler_config", "=", "args", ".", "get", "(", "\"sampler_config\"", ",", "{", "}", ")", ",", "\n", "data_path", "=", "args", "[", "\"data_path\"", "]", ",", "\n", "class_order", "=", "class_order", ",", "\n", "seed", "=", "args", "[", "\"seed\"", "]", ",", "\n", "dataset_transforms", "=", "args", ".", "get", "(", "\"dataset_transforms\"", ",", "{", "}", ")", ",", "\n", "all_test_classes", "=", "args", ".", "get", "(", "\"all_test_classes\"", ",", "False", ")", ",", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.factory.set_device": [[67, 79], ["devices.append", "torch.device", "torch.device"], "function", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.Imagine.Imagine.device", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.Imagine.Imagine.device"], [")", "\n", "\n", "\n", "", "def", "set_device", "(", "args", ")", ":", "\n", "    ", "devices", "=", "[", "]", "\n", "\n", "for", "device_type", "in", "args", "[", "\"device\"", "]", ":", "\n", "        ", "if", "device_type", "==", "-", "1", ":", "\n", "            ", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", "\n", "", "else", ":", "\n", "            ", "device", "=", "torch", ".", "device", "(", "\"cuda:{}\"", ".", "format", "(", "device_type", ")", ")", "\n", "\n", "", "devices", ".", "append", "(", "device", ")", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.factory.get_sampler": [[81, 95], ["args[].lower().strip", "ValueError", "args[].lower"], "function", ["None"], ["", "args", "[", "\"device\"", "]", "=", "devices", "\n", "\n", "\n", "", "def", "get_sampler", "(", "args", ")", ":", "\n", "    ", "if", "args", "[", "\"sampler\"", "]", "is", "None", ":", "\n", "        ", "return", "None", "\n", "\n", "", "sampler_type", "=", "args", "[", "\"sampler\"", "]", ".", "lower", "(", ")", ".", "strip", "(", ")", "\n", "\n", "if", "sampler_type", "==", "\"npair\"", ":", "\n", "        ", "return", "data", ".", "NPairSampler", "\n", "", "elif", "sampler_type", "==", "\"triplet\"", ":", "\n", "        ", "return", "data", ".", "TripletSampler", "\n", "", "elif", "sampler_type", "==", "\"tripletsemihard\"", ":", "\n", "        ", "return", "data", ".", "TripletCKSampler", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.factory.get_lr_scheduler": [[97, 146], ["isinstance", "torch.optim.lr_scheduler.MultiStepLR", "warnings.warn", "isinstance", "torch.optim.lr_scheduler.ExponentialLR", "warmup_config.get", "print", "inclearn.lib.schedulers.GradualWarmupScheduler", "warnings.warn", "torch.optim.lr_scheduler.ReduceLROnPlateau", "scheduling_config.get", "torch.optim.lr_scheduler.CosineAnnealingLR", "inclearn.lib.schedulers.CosineWithRestarts", "torch.optim.lr_scheduler.CosineAnnealingWarmRestarts", "ValueError", "scheduling_config.get", "scheduling_config.get", "scheduling_config.get"], "function", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.get", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.get", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.get", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.get", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.get"], ["", "raise", "ValueError", "(", "\"Unknown sampler {}.\"", ".", "format", "(", "sampler_type", ")", ")", "\n", "\n", "\n", "", "def", "get_lr_scheduler", "(", "\n", "scheduling_config", ",", "optimizer", ",", "nb_epochs", ",", "lr_decay", "=", "0.1", ",", "warmup_config", "=", "None", ",", "task", "=", "0", "\n", ")", ":", "\n", "    ", "if", "scheduling_config", "is", "None", ":", "\n", "        ", "return", "None", "\n", "", "elif", "isinstance", "(", "scheduling_config", ",", "str", ")", ":", "\n", "        ", "warnings", ".", "warn", "(", "\"Use a dict not a string for scheduling config!\"", ",", "DeprecationWarning", ")", "\n", "scheduling_config", "=", "{", "\"type\"", ":", "scheduling_config", "}", "\n", "", "elif", "isinstance", "(", "scheduling_config", ",", "list", ")", ":", "\n", "        ", "warnings", ".", "warn", "(", "\"Use a dict not a list for scheduling config!\"", ",", "DeprecationWarning", ")", "\n", "scheduling_config", "=", "{", "\"type\"", ":", "\"step\"", ",", "\"epochs\"", ":", "scheduling_config", "}", "\n", "\n", "", "if", "scheduling_config", "[", "\"type\"", "]", "==", "\"step\"", ":", "\n", "        ", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "MultiStepLR", "(", "\n", "optimizer", ",", "\n", "scheduling_config", "[", "\"epochs\"", "]", ",", "\n", "gamma", "=", "scheduling_config", ".", "get", "(", "\"gamma\"", ")", "or", "lr_decay", "\n", ")", "\n", "", "elif", "scheduling_config", "[", "\"type\"", "]", "==", "\"exponential\"", ":", "\n", "        ", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "ExponentialLR", "(", "optimizer", ",", "scheduling_config", "[", "\"gamma\"", "]", ")", "\n", "", "elif", "scheduling_config", "[", "\"type\"", "]", "==", "\"plateau\"", ":", "\n", "        ", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "ReduceLROnPlateau", "(", "\n", "optimizer", ",", "factor", "=", "scheduling_config", "[", "\"gamma\"", "]", "\n", ")", "\n", "", "elif", "scheduling_config", "[", "\"type\"", "]", "==", "\"cosine\"", ":", "\n", "        ", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "CosineAnnealingLR", "(", "optimizer", ",", "nb_epochs", ")", "\n", "", "elif", "scheduling_config", "[", "\"type\"", "]", "==", "\"cosine_with_restart\"", ":", "\n", "        ", "scheduler", "=", "schedulers", ".", "CosineWithRestarts", "(", "\n", "optimizer", ",", "\n", "t_max", "=", "scheduling_config", ".", "get", "(", "\"cycle_len\"", ",", "nb_epochs", ")", ",", "\n", "factor", "=", "scheduling_config", ".", "get", "(", "\"factor\"", ",", "1.", ")", "\n", ")", "\n", "", "elif", "scheduling_config", "[", "\"type\"", "]", "==", "\"cosine_annealing_with_restart\"", ":", "\n", "        ", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "CosineAnnealingWarmRestarts", "(", "\n", "optimizer", ",", "T_0", "=", "1", ",", "T_mult", "=", "2", ",", "eta_min", "=", "scheduling_config", ".", "get", "(", "\"min_lr\"", ")", "\n", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Unknown LR scheduling type {}.\"", ".", "format", "(", "scheduling_config", "[", "\"type\"", "]", ")", ")", "\n", "\n", "", "if", "warmup_config", ":", "\n", "        ", "if", "warmup_config", ".", "get", "(", "\"only_first_step\"", ",", "True", ")", "and", "task", "!=", "0", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"Using WarmUp\"", ")", "\n", "scheduler", "=", "schedulers", ".", "GradualWarmupScheduler", "(", "\n", "optimizer", "=", "optimizer", ",", "after_scheduler", "=", "scheduler", ",", "**", "warmup_config", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.results_utils.get_template_results": [[10, 12], ["None"], "function", ["None"], ["def", "get_template_results", "(", "args", ")", ":", "\n", "    ", "return", "{", "\"config\"", ":", "args", ",", "\"results\"", ":", "[", "]", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.results_utils.get_save_folder": [[14, 26], ["math.ceil", "os.path.join", "os.path.exists", "os.makedirs", "int"], "function", ["None"], ["", "def", "get_save_folder", "(", "model", ",", "date", ",", "label", ")", ":", "\n", "    ", "year_month", ",", "day", "=", "date", "[", ":", "6", "]", ",", "date", "[", "6", ":", "]", "\n", "week_number", "=", "math", ".", "ceil", "(", "int", "(", "day", ")", "/", "7", ")", "\n", "\n", "folder_path", "=", "os", ".", "path", ".", "join", "(", "\n", "\"results\"", ",", "\"dev\"", ",", "model", ",", "year_month", ",", "\"week_{}\"", ".", "format", "(", "week_number", ")", ",", "\n", "\"{}_{}\"", ".", "format", "(", "date", ",", "label", ")", "\n", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "folder_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "folder_path", ")", "\n", "\n", "", "return", "folder_path", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.results_utils.save_results": [[28, 40], ["results_utils.get_save_folder", "open", "os.path.join", "json.dump", "print"], "function", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.results_utils.get_save_folder"], ["", "def", "save_results", "(", "results", ",", "label", ",", "model", ",", "date", ",", "run_id", ",", "seed", ")", ":", "\n", "    ", "del", "results", "[", "\"config\"", "]", "[", "\"device\"", "]", "\n", "\n", "folder_path", "=", "get_save_folder", "(", "model", ",", "date", ",", "label", ")", "\n", "\n", "file_path", "=", "\"run_{}_.json\"", ".", "format", "(", "seed", ")", "\n", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "folder_path", ",", "file_path", ")", ",", "\"w+\"", ")", "as", "f", ":", "\n", "        ", "try", ":", "\n", "            ", "json", ".", "dump", "(", "results", ",", "f", ",", "indent", "=", "2", ")", "\n", "", "except", "Exception", ":", "\n", "            ", "print", "(", "\"Failed to dump exps on json file.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.results_utils.extract": [[42, 93], ["isinstance", "open", "json.load", "score_plot.append", "score_tab.append", "score_plot.append", "range", "score_tab.append", "score_plot.append", "score_plot.append", "len", "accs.append", "score_plot.append", "statistics.mean", "task.get", "score_plot.append", "ValueError", "task.get", "task.get", "task.get"], "function", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.get", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.get", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.get", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.get"], ["", "", "", "def", "extract", "(", "paths", ",", "metric", "=", "\"avg_inc\"", ",", "nb_classes", "=", "None", ")", ":", "\n", "    ", "\"\"\"Extract accuracy logged in the various log files.\n\n    :param paths: A path or a list of paths to a json file.\n    :param avg_inc: Boolean specifying whether to use the accuracy or the average\n                    incremental accuracy as defined in iCaRL.\n    :return: A list of runs. Each runs is a list of (average incremental) accuracies.\n    \"\"\"", "\n", "if", "not", "isinstance", "(", "paths", ",", "list", ")", ":", "\n", "        ", "paths", "=", "[", "paths", "]", "\n", "\n", "", "score_plot", ",", "score_tab", "=", "[", "]", ",", "[", "]", "\n", "for", "path", "in", "paths", ":", "\n", "        ", "with", "open", "(", "path", ")", "as", "f", ":", "\n", "            ", "data", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "if", "metric", "in", "(", "\"avg_inc\"", ",", "\"accuracy\"", ")", ":", "\n", "            ", "score_plot", ".", "append", "(", "[", "100", "*", "task", "[", "\"accuracy\"", "]", "[", "\"total\"", "]", "for", "task", "in", "data", "[", "\"results\"", "]", "]", ")", "\n", "", "elif", "metric", "==", "\"accuracy_top5\"", ":", "\n", "            ", "score_plot", ".", "append", "(", "[", "100", "*", "task", "[", "\"accuracy_top5\"", "]", "[", "\"total\"", "]", "for", "task", "in", "data", "[", "\"results\"", "]", "]", ")", "\n", "", "elif", "metric", "==", "\"old_accuracy\"", ":", "\n", "            ", "score_plot", ".", "append", "(", "[", "100", "*", "task", ".", "get", "(", "\"old_accuracy\"", ",", "0.", ")", "for", "task", "in", "data", "[", "\"results\"", "]", "]", ")", "\n", "", "elif", "metric", "==", "\"new_accuracy\"", ":", "\n", "            ", "score_plot", ".", "append", "(", "[", "100", "*", "task", ".", "get", "(", "\"new_accuracy\"", ",", "0.", ")", "for", "task", "in", "data", "[", "\"results\"", "]", "]", ")", "\n", "", "elif", "metric", "==", "\"unseen\"", ":", "\n", "            ", "score_plot", ".", "append", "(", "\n", "[", "100", "*", "task", ".", "get", "(", "\"unseen_classes_accuracy\"", ",", "0.", ")", "for", "task", "in", "data", "[", "\"results\"", "]", "]", "\n", ")", "\n", "", "elif", "metric", "==", "\"seen\"", ":", "\n", "            ", "score_plot", ".", "append", "(", "\n", "[", "100", "*", "task", ".", "get", "(", "\"seen_classes_accuracy\"", ",", "0.", ")", "for", "task", "in", "data", "[", "\"results\"", "]", "]", "\n", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"bouh\"", ")", "\n", "\n", "", "if", "metric", "in", "(", "\"avg_inc\"", ",", "\"accuracy\"", ",", "\"accuracy_top5\"", ",", "\"old_accuracy\"", ",", "\"new_accuracy\"", ")", ":", "\n", "            ", "score_tab", ".", "append", "(", "score_plot", "[", "-", "1", "]", ")", "\n", "", "elif", "metric", "==", "\"avg_cls\"", ":", "\n", "            ", "accs", "=", "[", "]", "\n", "for", "class_id", "in", "range", "(", "nb_classes", ")", ":", "\n", "                ", "class_accuracies", "=", "[", "\n", "100", "*", "task", "[", "\"accuracy_per_class\"", "]", "[", "\"{:02d}-{:02d}\"", ".", "format", "(", "class_id", ",", "class_id", ")", "]", "\n", "for", "task", "in", "data", "[", "\"results\"", "]", "\n", "if", "\"{:02d}-{:02d}\"", ".", "format", "(", "class_id", ",", "class_id", ")", "in", "task", "[", "\"accuracy_per_class\"", "]", "\n", "]", "\n", "if", "len", "(", "class_accuracies", ")", ">", "0", ":", "\n", "                    ", "accs", ".", "append", "(", "statistics", ".", "mean", "(", "class_accuracies", ")", ")", "\n", "\n", "", "", "score_tab", ".", "append", "(", "accs", ")", "\n", "\n", "", "", "return", "score_plot", ",", "score_tab", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.results_utils.compute_avg_inc_acc": [[95, 106], ["sum", "len"], "function", ["None"], ["", "def", "compute_avg_inc_acc", "(", "results", ")", ":", "\n", "    ", "\"\"\"Computes the average incremental accuracy as defined in iCaRL.\n\n    The average incremental accuracies at task X are the average of accuracies\n    at task 0, 1, ..., and X.\n\n    :param accs: A list of dict for per-class accuracy at each step.\n    :return: A float.\n    \"\"\"", "\n", "tasks_accuracy", "=", "[", "r", "[", "\"total\"", "]", "for", "r", "in", "results", "]", "\n", "return", "sum", "(", "tasks_accuracy", ")", "/", "len", "(", "tasks_accuracy", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.results_utils.aggregate": [[108, 129], ["len", "range", "len", "math.sqrt", "means.append", "stds.append", "sum", "range", "sum", "math.pow"], "function", ["None"], ["", "def", "aggregate", "(", "runs_accs", ")", ":", "\n", "    ", "\"\"\"Aggregate results of several runs into means & standard deviations.\n\n    :param runs_accs: A list of runs. Each runs is a list of (average\n                      incremental) accuracies.\n    :return: A list of means, and a list of standard deviations.\n    \"\"\"", "\n", "means", "=", "[", "]", "\n", "stds", "=", "[", "]", "\n", "\n", "n_runs", "=", "len", "(", "runs_accs", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "runs_accs", "[", "0", "]", ")", ")", ":", "\n", "        ", "ith_value", "=", "[", "runs_accs", "[", "j", "]", "[", "i", "]", "for", "j", "in", "range", "(", "n_runs", ")", "]", "\n", "\n", "mean", "=", "sum", "(", "ith_value", ")", "/", "n_runs", "\n", "std", "=", "math", ".", "sqrt", "(", "sum", "(", "math", ".", "pow", "(", "mean", "-", "i", ",", "2", ")", "for", "i", "in", "ith_value", ")", "/", "n_runs", ")", "\n", "\n", "means", ".", "append", "(", "mean", ")", "\n", "stds", ".", "append", "(", "std", ")", "\n", "\n", "", "return", "means", ",", "stds", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.results_utils.compute_unique_score": [[131, 159], ["int", "sum", "len", "len", "math.sqrt", "str", "means.append", "means.append", "str", "round", "sum", "len", "round", "sum", "len", "sum", "len", "math.pow"], "function", ["None"], ["", "def", "compute_unique_score", "(", "runs_accs", ",", "skip_first", "=", "False", ",", "first_n_steps", "=", "None", ")", ":", "\n", "    ", "\"\"\"Computes the average of the (average incremental) accuracies to get a\n    unique score.\n\n    :param runs_accs: A list of runs. Each runs is a list of (average\n                      incremental) accuracies.\n    :param skip_first: Whether to skip the first task accuracy as advised in\n                       End-to-End Incremental Accuracy.\n    :return: A unique score being the average of the (average incremental)\n             accuracies, and a standard deviation.\n    \"\"\"", "\n", "start", "=", "int", "(", "skip_first", ")", "\n", "\n", "means", "=", "[", "]", "\n", "for", "run", "in", "runs_accs", ":", "\n", "        ", "if", "first_n_steps", ":", "\n", "            ", "means", ".", "append", "(", "sum", "(", "run", "[", "start", ":", "first_n_steps", "]", ")", "/", "len", "(", "run", "[", "start", ":", "first_n_steps", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "means", ".", "append", "(", "sum", "(", "run", "[", "start", ":", "]", ")", "/", "len", "(", "run", "[", "start", ":", "]", ")", ")", "\n", "\n", "", "", "mean_of_mean", "=", "sum", "(", "means", ")", "/", "len", "(", "means", ")", "\n", "if", "len", "(", "runs_accs", ")", "==", "1", ":", "# One run, probably a paper, don't compute std:", "\n", "        ", "std", "=", "\"\"", "\n", "", "else", ":", "\n", "        ", "std", "=", "math", ".", "sqrt", "(", "sum", "(", "math", ".", "pow", "(", "mean_of_mean", "-", "i", ",", "2", ")", "for", "i", "in", "means", ")", "/", "len", "(", "means", ")", ")", "\n", "std", "=", "\" \u00b1 \"", "+", "str", "(", "round", "(", "std", ",", "2", ")", ")", "\n", "\n", "", "return", "str", "(", "round", "(", "mean_of_mean", ",", "2", ")", ")", ",", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.results_utils.get_max_label_length": [[161, 163], ["max", "len", "r.get"], "function", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.get"], ["", "def", "get_max_label_length", "(", "results", ")", ":", "\n", "    ", "return", "max", "(", "len", "(", "r", ".", "get", "(", "\"label\"", ",", "r", "[", "\"path\"", "]", ")", ")", "for", "r", "in", "results", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.results_utils.plot": [[165, 262], ["matplotlib.figure", "list", "matplotlib.legend", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.title", "range", "matplotlib.yticks", "matplotlib.xticks", "matplotlib.show", "range", "result.get", "result.get", "result.get", "result.get", "result.get", "results_utils.aggregate", "results_utils.compute_unique_score", "matplotlib.axhline", "list", "list", "os.makedirs", "matplotlib.savefig", "results_utils.extract", "matplotlib.errorbar", "results_utils.extract", "matplotlib.plot", "results_utils.extract", "matplotlib.plot", "range", "range", "os.path.dirname", "glob.glob.rstrip().split", "glob.glob", "os.path.isdir", "round", "print", "print", "print", "print", "glob.glob", "plt.errorbar.lines[].get_color", "plt.errorbar.lines[].get_color", "glob.glob.rstrip", "os.path.join"], "function", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.get", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.get", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.get", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.get", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.get", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.results_utils.aggregate", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.results_utils.compute_unique_score", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.basenet.BasicNet.extract", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.basenet.BasicNet.extract", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.results_utils.plot", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.basenet.BasicNet.extract", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.results_utils.plot"], ["", "def", "plot", "(", "\n", "results", ",", "\n", "increment", ",", "\n", "total", ",", "\n", "initial_increment", "=", "None", ",", "\n", "x_ticks", "=", "None", ",", "\n", "title", "=", "\"\"", ",", "\n", "path_to_save", "=", "None", ",", "\n", "max_acc", "=", "100", ",", "\n", "min_acc", "=", "0", ",", "\n", "first_n_steps", "=", "None", ",", "\n", "figsize", "=", "(", "10", ",", "5", ")", ",", "\n", "metric", "=", "\"avg_inc\"", ",", "\n", "zeroshot", "=", "False", ",", "\n", "ylabel", "=", "\"Accuracy over seen classes\"", "\n", ")", ":", "\n", "    ", "\"\"\"Plotting utilities to visualize several experiments.\n\n    :param results: A list of dict composed of a \"path\", a \"label\", an optional\n                    \"average incremental\", an optional \"skip_first\".\n    :param increment: The increment of classes per task.\n    :param total: The total number of classes.\n    :param initial_increment: Increment initial, default to 0.\n    :param title: Plot title.\n    :param path_to_save: Optional path where to save the image.\n    \"\"\"", "\n", "plt", ".", "figure", "(", "figsize", "=", "figsize", ")", "\n", "\n", "initial_increment", "=", "initial_increment", "or", "increment", "\n", "x", "=", "list", "(", "range", "(", "initial_increment", ",", "total", "+", "1", ",", "increment", ")", ")", "\n", "\n", "for", "result", "in", "results", ":", "\n", "        ", "path", "=", "result", ".", "get", "(", "\"path\"", ",", "\"\"", ")", "\n", "label", "=", "result", ".", "get", "(", "\"label\"", ",", "path", ".", "rstrip", "(", "\"/\"", ")", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", ")", "\n", "skip_first", "=", "result", ".", "get", "(", "\"skip_first\"", ",", "False", ")", "\n", "kwargs", "=", "result", ".", "get", "(", "\"kwargs\"", ",", "{", "}", ")", "\n", "\n", "if", "result", ".", "get", "(", "\"hidden\"", ",", "False", ")", ":", "\n", "            ", "continue", "\n", "\n", "", "if", "path", ":", "\n", "            ", "if", "\"*\"", "in", "path", ":", "\n", "                ", "path", "=", "glob", ".", "glob", "(", "path", ")", "\n", "", "elif", "os", ".", "path", ".", "isdir", "(", "path", ")", ":", "\n", "                ", "path", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "path", ",", "\"*.json\"", ")", ")", "\n", "\n", "", "score_plot", ",", "score_tab", "=", "extract", "(", "path", ",", "metric", "=", "metric", ",", "nb_classes", "=", "total", ")", "\n", "", "else", ":", "\n", "            ", "score_plot", "=", "result", "[", "\"runs_accs\"", "]", "\n", "score_tab", "=", "score_plot", "\n", "\n", "", "means", ",", "stds", "=", "aggregate", "(", "score_plot", ")", "\n", "\n", "if", "first_n_steps", "is", "not", "None", ":", "\n", "            ", "x", ",", "means", ",", "stds", "=", "x", "[", ":", "first_n_steps", "]", ",", "means", "[", ":", "first_n_steps", "]", ",", "stds", "[", ":", "first_n_steps", "]", "\n", "\n", "", "unique_score", ",", "unique_std", "=", "compute_unique_score", "(", "\n", "score_tab", ",", "skip_first", "=", "skip_first", ",", "first_n_steps", "=", "first_n_steps", "\n", ")", "\n", "\n", "label", "=", "\"{label} ({avg})\"", ".", "format", "(", "\n", "label", "=", "label", ",", "avg", "=", "unique_score", "+", "unique_std", ",", "last", "=", "round", "(", "means", "[", "-", "1", "]", ",", "2", ")", "\n", ")", "\n", "\n", "try", ":", "\n", "            ", "bar", "=", "plt", ".", "errorbar", "(", "x", ",", "means", ",", "stds", ",", "label", "=", "label", ",", "marker", "=", "\"o\"", ",", "markersize", "=", "3", ",", "**", "kwargs", ")", "\n", "", "except", "Exception", ":", "\n", "            ", "print", "(", "x", ")", "\n", "print", "(", "means", ")", "\n", "print", "(", "stds", ")", "\n", "print", "(", "label", ")", "\n", "raise", "\n", "\n", "", "if", "zeroshot", ":", "\n", "            ", "unseen_accs", ",", "_", "=", "extract", "(", "path", ",", "\"unseen\"", ",", "nb_classes", "=", "total", ")", "\n", "plt", ".", "plot", "(", "\n", "x", "[", ":", "-", "1", "]", ",", "unseen_accs", "[", "0", "]", "[", ":", "-", "1", "]", ",", "linestyle", "=", "'dashed'", ",", "color", "=", "bar", ".", "lines", "[", "0", "]", ".", "get_color", "(", ")", "\n", ")", "\n", "seen_accs", ",", "_", "=", "extract", "(", "path", ",", "\"seen\"", ",", "nb_classes", "=", "total", ")", "\n", "plt", ".", "plot", "(", "x", ",", "seen_accs", "[", "0", "]", ",", "linestyle", "=", "'dotted'", ",", "color", "=", "bar", ".", "lines", "[", "0", "]", ".", "get_color", "(", ")", ")", "\n", "\n", "", "", "plt", ".", "legend", "(", "loc", "=", "\"upper right\"", ")", "\n", "plt", ".", "xlabel", "(", "\"Number of classes\"", ")", "\n", "plt", ".", "ylabel", "(", "ylabel", ")", "\n", "plt", ".", "title", "(", "title", ")", "\n", "\n", "for", "y", "in", "range", "(", "min_acc", ",", "max_acc", "+", "1", ",", "10", ")", ":", "\n", "        ", "plt", ".", "axhline", "(", "y", "=", "y", ",", "color", "=", "'black'", ",", "linestyle", "=", "'dashed'", ",", "linewidth", "=", "1", ",", "alpha", "=", "0.2", ")", "\n", "", "plt", ".", "yticks", "(", "list", "(", "range", "(", "min_acc", ",", "max_acc", "+", "1", ",", "10", ")", ")", ")", "\n", "\n", "x_ticks", "=", "x_ticks", "or", "increment", "\n", "plt", ".", "xticks", "(", "list", "(", "range", "(", "initial_increment", ",", "total", "+", "1", ",", "x_ticks", ")", ")", ")", "\n", "\n", "if", "path_to_save", ":", "\n", "        ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "path_to_save", ")", ",", "exist_ok", "=", "True", ")", "\n", "plt", ".", "savefig", "(", "path_to_save", ")", "\n", "", "plt", ".", "show", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.herding.closest_to_mean": [[9, 14], ["numpy.mean", "_l2_distance().argsort", "numpy.linalg.norm", "herding._l2_distance"], "function", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.herding._l2_distance"], ["def", "closest_to_mean", "(", "features", ",", "nb_examplars", ")", ":", "\n", "    ", "features", "=", "features", "/", "(", "np", ".", "linalg", ".", "norm", "(", "features", ",", "axis", "=", "0", ")", "+", "1e-8", ")", "\n", "class_mean", "=", "np", ".", "mean", "(", "features", ",", "axis", "=", "0", ")", "\n", "\n", "return", "_l2_distance", "(", "features", ",", "class_mean", ")", ".", "argsort", "(", ")", "[", ":", "nb_examplars", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.herding.icarl_selection": [[16, 40], ["numpy.mean", "numpy.zeros", "numpy.dot", "numpy.argmax", "np.zeros.argsort", "numpy.linalg.norm", "numpy.sum", "min", "numpy.where"], "function", ["None"], ["", "def", "icarl_selection", "(", "features", ",", "nb_examplars", ")", ":", "\n", "    ", "D", "=", "features", ".", "T", "\n", "D", "=", "D", "/", "(", "np", ".", "linalg", ".", "norm", "(", "D", ",", "axis", "=", "0", ")", "+", "1e-8", ")", "\n", "mu", "=", "np", ".", "mean", "(", "D", ",", "axis", "=", "1", ")", "\n", "herding_matrix", "=", "np", ".", "zeros", "(", "(", "features", ".", "shape", "[", "0", "]", ",", ")", ")", "\n", "\n", "w_t", "=", "mu", "\n", "iter_herding", ",", "iter_herding_eff", "=", "0", ",", "0", "\n", "\n", "while", "not", "(", "\n", "np", ".", "sum", "(", "herding_matrix", "!=", "0", ")", "==", "min", "(", "nb_examplars", ",", "features", ".", "shape", "[", "0", "]", ")", "\n", ")", "and", "iter_herding_eff", "<", "1000", ":", "\n", "        ", "tmp_t", "=", "np", ".", "dot", "(", "w_t", ",", "D", ")", "\n", "ind_max", "=", "np", ".", "argmax", "(", "tmp_t", ")", "\n", "iter_herding_eff", "+=", "1", "\n", "if", "herding_matrix", "[", "ind_max", "]", "==", "0", ":", "\n", "            ", "herding_matrix", "[", "ind_max", "]", "=", "1", "+", "iter_herding", "\n", "iter_herding", "+=", "1", "\n", "\n", "", "w_t", "=", "w_t", "+", "mu", "-", "D", "[", ":", ",", "ind_max", "]", "\n", "\n", "", "herding_matrix", "[", "np", ".", "where", "(", "herding_matrix", "==", "0", ")", "[", "0", "]", "]", "=", "10000", "\n", "\n", "return", "herding_matrix", ".", "argsort", "(", ")", "[", ":", "nb_examplars", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.herding.random": [[42, 44], ["numpy.random.permutation", "len"], "function", ["None"], ["", "def", "random", "(", "features", ",", "nb_examplars", ")", ":", "\n", "    ", "return", "np", ".", "random", ".", "permutation", "(", "len", "(", "features", ")", ")", "[", ":", "nb_examplars", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.herding.kmeans": [[46, 64], ["sklearn.cluster.KMeans", "sklearn.cluster.KMeans.fit_predict", "range", "numpy.concatenate", "numpy.random.choice", "indexes.append", "numpy.where"], "function", ["None"], ["", "def", "kmeans", "(", "features", ",", "nb_examplars", ",", "k", "=", "5", ")", ":", "\n", "    ", "\"\"\"Samples examplars for memory according to KMeans.\n\n    :param features: The image features of a single class.\n    :param nb_examplars: Number of images to keep.\n    :param k: Number of clusters for KMeans algo, defaults to 5\n    :return: A numpy array of indexes.\n    \"\"\"", "\n", "model", "=", "KMeans", "(", "n_clusters", "=", "k", ")", "\n", "cluster_assignements", "=", "model", ".", "fit_predict", "(", "features", ")", "\n", "\n", "nb_per_clusters", "=", "nb_examplars", "//", "k", "\n", "indexes", "=", "[", "]", "\n", "for", "c", "in", "range", "(", "k", ")", ":", "\n", "        ", "c_indexes", "=", "np", ".", "random", ".", "choice", "(", "np", ".", "where", "(", "cluster_assignements", "==", "c", ")", "[", "0", "]", ",", "size", "=", "nb_per_clusters", ")", "\n", "indexes", ".", "append", "(", "c_indexes", ")", "\n", "\n", "", "return", "np", ".", "concatenate", "(", "indexes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.herding.confusion": [[66, 83], ["ranks.argsort", "numpy.where", "ypreds.argsort", "numpy.arange", "len"], "function", ["None"], ["", "def", "confusion", "(", "ypreds", ",", "ytrue", ",", "nb_examplars", ",", "class_id", "=", "None", ",", "minimize_confusion", "=", "True", ")", ":", "\n", "    ", "\"\"\"Samples examplars for memory according to the predictions.\n\n    :param ypreds: All the predictions (shape [b, c]).\n    :param ytrue: The true label.\n    :param nb_examplars: Number of images to keep.\n    :param minimize_confusion: Samples easiest examples or hardest.\n    \"\"\"", "\n", "indexes", "=", "np", ".", "where", "(", "ytrue", "==", "class_id", ")", "[", "0", "]", "\n", "ypreds", ",", "ytrue", "=", "ypreds", "[", "indexes", "]", ",", "ytrue", "[", "indexes", "]", "\n", "\n", "ranks", "=", "ypreds", ".", "argsort", "(", "axis", "=", "1", ")", "[", ":", ",", ":", ":", "-", "1", "]", "[", "np", ".", "arange", "(", "len", "(", "ypreds", ")", ")", ",", "ytrue", "]", "\n", "\n", "indexes", "=", "ranks", ".", "argsort", "(", ")", "\n", "if", "minimize_confusion", ":", "\n", "        ", "return", "indexes", "[", ":", "nb_examplars", "]", "\n", "", "return", "indexes", "[", "-", "nb_examplars", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.herding.minimize_confusion": [[85, 125], ["inc_dataset.get_custom_loader", "inclearn.lib.utils.extract_features", "numpy.mean", "sklearn.cluster.KMeans", "sklearn.cluster.KMeans.fit", "range", "numpy.concatenate", "herding._l2_distance", "herding._split_memory_per_class", "herding._l2_distance", "indexes.append", "inc_dataset.get_custom_loader", "inclearn.lib.utils.extract_features", "numpy.mean", "herding._l2_distance", "_l2_distance.argsort", "numpy.random.permutation", "int", "_l2_distance.argsort"], "function", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.data.incdataset.IncrementalDataset.get_custom_loader", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.utils.extract_features", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.herding._l2_distance", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.herding._split_memory_per_class", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.herding._l2_distance", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.data.incdataset.IncrementalDataset.get_custom_loader", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.utils.extract_features", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.herding._l2_distance"], ["", "def", "minimize_confusion", "(", "inc_dataset", ",", "network", ",", "memory", ",", "class_index", ",", "nb_examplars", ")", ":", "\n", "    ", "_", ",", "new_loader", "=", "inc_dataset", ".", "get_custom_loader", "(", "class_index", ",", "mode", "=", "\"test\"", ")", "\n", "new_features", ",", "_", "=", "utils", ".", "extract_features", "(", "network", ",", "new_loader", ")", "\n", "new_mean", "=", "np", ".", "mean", "(", "new_features", ",", "axis", "=", "0", ")", "\n", "\n", "from", "sklearn", ".", "cluster", "import", "KMeans", "\n", "\n", "n_clusters", "=", "4", "\n", "model", "=", "KMeans", "(", "n_clusters", "=", "n_clusters", ")", "\n", "model", ".", "fit", "(", "new_features", ")", "\n", "\n", "indexes", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "n_clusters", ")", ":", "\n", "        ", "cluster", "=", "model", ".", "cluster_centers_", "[", "i", "]", "\n", "distances", "=", "_l2_distance", "(", "cluster", ",", "new_features", ")", "\n", "\n", "indexes", ".", "append", "(", "distances", ".", "argsort", "(", ")", "[", ":", "nb_examplars", "//", "n_clusters", "]", ")", "\n", "\n", "", "return", "np", ".", "concatenate", "(", "indexes", ")", "\n", "\n", "if", "memory", "is", "None", ":", "\n", "# First task", "\n", "#return icarl_selection(new_features, nb_examplars)", "\n", "        ", "return", "np", ".", "random", ".", "permutation", "(", "new_features", ".", "shape", "[", "0", "]", ")", "[", ":", "nb_examplars", "]", "\n", "\n", "", "distances", "=", "_l2_distance", "(", "new_mean", ",", "new_features", ")", "\n", "\n", "data_memory", ",", "targets_memory", "=", "memory", "\n", "for", "indexes", "in", "_split_memory_per_class", "(", "targets_memory", ")", ":", "\n", "        ", "_", ",", "old_loader", "=", "inc_dataset", ".", "get_custom_loader", "(", "\n", "[", "]", ",", "memory", "=", "(", "data_memory", "[", "indexes", "]", ",", "targets_memory", "[", "indexes", "]", ")", ",", "mode", "=", "\"test\"", "\n", ")", "\n", "\n", "old_features", ",", "_", "=", "utils", ".", "extract_features", "(", "network", ",", "old_loader", ")", "\n", "old_mean", "=", "np", ".", "mean", "(", "old_features", ",", "axis", "=", "0", ")", "\n", "\n", "# The larger the distance to old mean", "\n", "distances", "-=", "_l2_distance", "(", "old_mean", ",", "new_features", ")", "\n", "\n", "", "return", "distances", ".", "argsort", "(", ")", "[", ":", "int", "(", "nb_examplars", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.herding.var_ratio": [[127, 142], ["numpy.concatenate", "np.concatenate.argsort", "ValueError", "input_dict[].to", "np.concatenate.append", "torch.no_grad", "network"], "function", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.base.IncrementalLearner.network"], ["", "def", "var_ratio", "(", "memory_per_class", ",", "network", ",", "loader", ",", "select", "=", "\"max\"", ",", "type", "=", "None", ")", ":", "\n", "    ", "var_ratios", "=", "[", "]", "\n", "for", "input_dict", "in", "loader", ":", "\n", "        ", "inputs", "=", "input_dict", "[", "\"inputs\"", "]", ".", "to", "(", "network", ".", "device", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "outputs", "=", "network", "(", "inputs", ")", "\n", "", "var_ratios", ".", "append", "(", "outputs", "[", "\"var_ratio\"", "]", ")", "\n", "", "var_ratios", "=", "np", ".", "concatenate", "(", "var_ratios", ")", "\n", "\n", "indexes", "=", "var_ratios", ".", "argsort", "(", ")", "\n", "if", "select", "==", "\"max\"", ":", "\n", "        ", "return", "indexes", "[", "-", "memory_per_class", ":", "]", "\n", "", "elif", "select", "==", "\"min\"", ":", "\n", "        ", "return", "indexes", "[", ":", "memory_per_class", "]", "\n", "", "raise", "ValueError", "(", "\"Only possible value for <select> are [max, min], not {}.\"", ".", "format", "(", "select", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.herding.mcbn": [[144, 174], ["network.convnet.sampling_mode", "network.convnet.normal_mode", "numpy.concatenate", "herding._var_ratio", "_var_ratio.argsort", "ValueError", "hasattr", "ValueError", "input_dict[].to", "range", "numpy.stack", "np.concatenate.append", "np.concatenate.transpose", "len", "torch.no_grad", "network", "np.stack.append", "torch.nn.functional.softmax().cpu().numpy", "torch.nn.functional.softmax().cpu", "torch.nn.functional.softmax"], "function", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.herding._var_ratio", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.base.IncrementalLearner.network"], ["", "def", "mcbn", "(", "memory_per_class", ",", "network", ",", "loader", ",", "select", "=", "\"max\"", ",", "nb_samples", "=", "100", ",", "type", "=", "None", ")", ":", "\n", "    ", "if", "not", "hasattr", "(", "network", ".", "convnet", ",", "\"sampling_mode\"", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\"Network must be MCBN-compatible.\"", ")", "\n", "", "network", ".", "convnet", ".", "sampling_mode", "(", ")", "\n", "\n", "all_probs", "=", "[", "]", "\n", "for", "input_dict", "in", "loader", ":", "\n", "        ", "inputs", "=", "input_dict", "[", "\"inputs\"", "]", ".", "to", "(", "network", ".", "device", ")", "\n", "\n", "probs", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "nb_samples", ")", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "outputs", "=", "network", "(", "inputs", ")", "\n", "logits", "=", "outputs", "[", "\"logits\"", "]", "\n", "probs", ".", "append", "(", "F", ".", "softmax", "(", "logits", ",", "dim", "=", "-", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "", "", "probs", "=", "np", ".", "stack", "(", "probs", ")", "\n", "all_probs", ".", "append", "(", "probs", ")", "\n", "", "network", ".", "convnet", ".", "normal_mode", "(", ")", "\n", "\n", "all_probs", "=", "np", ".", "concatenate", "(", "all_probs", ",", "axis", "=", "1", ")", "\n", "var_ratios", "=", "_var_ratio", "(", "all_probs", ".", "transpose", "(", "1", ",", "0", ",", "2", ")", ")", "\n", "\n", "indexes", "=", "var_ratios", ".", "argsort", "(", ")", "\n", "assert", "len", "(", "indexes", ")", "==", "all_probs", ".", "shape", "[", "1", "]", "\n", "if", "select", "==", "\"max\"", ":", "\n", "        ", "return", "indexes", "[", "-", "memory_per_class", ":", "]", "\n", "", "elif", "select", "==", "\"min\"", ":", "\n", "        ", "return", "indexes", "[", ":", "memory_per_class", "]", "\n", "", "raise", "ValueError", "(", "\"Only possible value for <select> are [max, min], not {}.\"", ".", "format", "(", "select", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.herding._var_ratio": [[181, 192], ["sampled_probs.max", "numpy.array", "np.array.max", "numpy.histogram", "range"], "function", ["None"], ["", "def", "_var_ratio", "(", "sampled_probs", ")", ":", "\n", "    ", "predicted_class", "=", "sampled_probs", ".", "max", "(", "axis", "=", "2", ")", "\n", "\n", "hist", "=", "np", ".", "array", "(", "\n", "[", "\n", "np", ".", "histogram", "(", "predicted_class", "[", "i", ",", ":", "]", ",", "range", "=", "(", "0", ",", "10", ")", ")", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "predicted_class", ".", "shape", "[", "0", "]", ")", "\n", "]", "\n", ")", "\n", "\n", "return", "1.", "-", "hist", ".", "max", "(", "axis", "=", "1", ")", "/", "sampled_probs", ".", "shape", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.herding._l2_distance": [[194, 196], ["numpy.power().sum", "numpy.power"], "function", ["None"], ["", "def", "_l2_distance", "(", "x", ",", "y", ")", ":", "\n", "    ", "return", "np", ".", "power", "(", "x", "-", "y", ",", "2", ")", ".", "sum", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.herding._split_memory_per_class": [[198, 203], ["max", "range", "numpy.where"], "function", ["None"], ["", "def", "_split_memory_per_class", "(", "targets", ")", ":", "\n", "    ", "max_class", "=", "max", "(", "targets", ")", "\n", "\n", "for", "class_index", "in", "range", "(", "max_class", ")", ":", "\n", "        ", "yield", "np", ".", "where", "(", "targets", "==", "class_index", ")", "[", "0", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.utils.to_onehot": [[18, 22], ["torch.zeros().to", "torch.zeros().to", "torch.zeros().to.scatter_", "torch.zeros", "torch.zeros", "targets.long().view", "targets.long"], "function", ["None"], ["'[%(asctime)s] %(filename)-8s :: %(message)s'", ",", "\n", "datefmt", "=", "'%m-%d %H:%M:%S'", ")", "\n", "handler", ".", "setFormatter", "(", "self", ".", "formatter", ")", "\n", "self", ".", "LOGGER", "=", "logging", ".", "getLogger", "(", "'global'", ")", "\n", "self", ".", "LOGGER", ".", "addHandler", "(", "handler", ")", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.utils.check_loss": [[24, 26], ["bool", "bool", "torch.isnan().item", "torch.isnan().item", "torch.isnan", "torch.isnan"], "function", ["None"], ["\n", "", "def", "add_file_headler", "(", "self", ",", "save_path", ")", ":", "\n", "        ", "save_path", "=", "os", ".", "path", ".", "join", "(", "save_path", ",", "f'log_{time_string()}.log'", ")", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.utils.compute_accuracy": [[28, 43], ["round", "range", "numpy.max", "round", "len", "numpy.where", "str().rjust", "str().rjust", "numpy.logical_and", "len", "str", "str"], "function", ["None"], ["fhandler", ".", "setFormatter", "(", "self", ".", "formatter", ")", "\n", "self", ".", "LOGGER", ".", "addHandler", "(", "fhandler", ")", "\n", "\n", "", "def", "print_baisic_info", "(", "self", ")", ":", "\n", "        ", "self", ".", "LOGGER", ".", "info", "(", "\"python version : {}\"", ".", "format", "(", "sys", ".", "version", ".", "replace", "(", "'\\n'", ",", "' '", ")", ")", ")", "\n", "self", ".", "LOGGER", ".", "info", "(", "\"torch  version : {}\"", ".", "format", "(", "torch", ".", "__version__", ")", ")", "\n", "\n", "\n", "", "", "LOGGER", "=", "LOG", "(", ")", "\n", "\n", "if", "__name__", "==", "'__main__'", ":", "\n", "    ", "log", "=", "LOG", "(", ")", "\n", "log", ".", "add_file_headler", "(", "'/home/yuming/reid_multi_net/src/reid_multi_net/debug'", ")", "\n", "log", ".", "LOGGER", ".", "info", "(", "'info message'", ")", "\n", "log", ".", "LOGGER", ".", "warning", "(", "'warning message'", ")", "\n", "log", ".", "LOGGER", ".", "error", "(", "'error message'", ")", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.utils.get_date": [[45, 47], ["datetime.datetime.now().strftime", "datetime.datetime.now"], "function", ["None"], ["", ""]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.utils.extract_features": [[49, 67], ["model.eval", "model.train", "_targets.numpy.numpy", "model.extract().detach().cpu().numpy", "features.append", "targets.append", "numpy.concatenate", "numpy.concatenate", "model.extract().detach().cpu", "model.extract().detach", "model.extract", "inputs.to"], "function", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.base.IncrementalLearner.eval", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.base.IncrementalLearner.train", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.basenet.BasicNet.extract"], []], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.utils.compute_centroids": [[69, 80], ["utils.extract_features", "numpy.unique", "centroids_features.append", "centroids_targets.append", "numpy.concatenate", "numpy.array", "numpy.where", "numpy.mean"], "function", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.utils.extract_features"], []], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.utils.classify": [[82, 98], ["model", "outputs[].argmax().detach().cpu().numpy", "predictions.append", "targets.append", "numpy.concatenate", "numpy.concatenate", "inputs.to", "isinstance", "outputs[].argmax().detach().cpu", "outputs[].argmax().detach", "outputs[].argmax"], "function", ["None"], []], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.utils.plot_tsne": [[100, 120], ["sklearn.manifold.TSNE", "manifold.TSNE.fit_transform", "matplotlib.scatter", "os.path.dirname", "matplotlib.savefig", "os.path.exists", "os.makedirs", "min", "max", "matplotlib.cm.get_cmap"], "function", ["None"], []], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.utils.add_new_weights": [[122, 176], ["isinstance", "warnings.warn", "inclearn.utils.LOGGER.LOGGER.info", "network.add_imprinted_classes", "list", "inclearn.utils.LOGGER.LOGGER.info", "range", "network.add_custom_weights", "range", "inc_dataset.get_custom_loader", "utils.extract_features", "numpy.mean", "numpy.stack", "network.add_classes", "weight_generation.get", "mean_embeddings.append", "numpy.std", "mean_embeddings.extend", "features.cpu().numpy.cpu().numpy", "targets.cpu().numpy.cpu().numpy", "range", "torch.tensor().float", "torch.tensor().float", "network.add_custom_weights", "ValueError", "numpy.linalg.norm", "torch.tensor().float.append", "numpy.random.normal", "features.cpu().numpy.cpu", "targets.cpu().numpy.cpu", "numpy.where", "len", "Exception", "numpy.mean", "torch.tensor", "torch.tensor", "weight_generation.get", "range", "numpy.stack", "weight_generation.get"], "function", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.classifiers.CosineM2KDClassifier.add_imprinted_classes", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.classifiers.CosineClassifier.add_custom_weights", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.data.incdataset.IncrementalDataset.get_custom_loader", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.utils.extract_features", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.classifiers.CosineClassifier.add_classes", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.get", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.classifiers.CosineClassifier.add_custom_weights", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.get", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.get"], []], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.utils.apply_kmeans": [[178, 202], ["inclearn.utils.LOGGER.LOGGER.info", "numpy.unique", "sklearn.cluster.KMeans", "sklearn.cluster.KMeans.fit", "new_features.append", "new_targets.append", "numpy.concatenate", "numpy.concatenate", "len", "numpy.where", "numpy.ones", "numpy.linalg.norm().reshape", "numpy.linalg.norm"], "function", ["None"], []], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.utils.apply_knn": [[204, 231], ["inclearn.utils.LOGGER.LOGGER.info", "sklearn.neighbors.KNeighborsClassifier", "sklearn.neighbors.KNeighborsClassifier.fit", "sklearn.neighbors.KNeighborsClassifier.predict", "numpy.linalg.norm().reshape", "numpy.linalg.norm().reshape", "numpy.linalg.norm", "numpy.linalg.norm"], "function", ["None"], []], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.utils.select_class_samples": [[233, 236], ["numpy.where"], "function", ["None"], []], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.utils.matrix_infinity_norm": [[238, 244], ["torch.abs", "torch.abs", "torch.abs.sum", "torch.max", "torch.max"], "function", ["None"], []], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.postprocessors.ConstantScalar.__init__": [[7, 12], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.tools.conv_mtl.Conv2dMtl.__init__"], ["    ", "def", "__init__", "(", "self", ",", "constant", "=", "1.", ",", "bias", "=", "0.", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "factor", "=", "constant", "\n", "self", ".", "bias", "=", "bias", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.postprocessors.ConstantScalar.on_task_end": [[13, 15], ["None"], "methods", ["None"], ["", "def", "on_task_end", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.postprocessors.ConstantScalar.on_epoch_end": [[16, 18], ["None"], "methods", ["None"], ["", "def", "on_epoch_end", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.postprocessors.ConstantScalar.forward": [[19, 24], ["hasattr"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "hasattr", "(", "self", ",", "\"bias\"", ")", ":", "\n", "            ", "return", "self", ".", "factor", "*", "x", "+", "self", ".", "bias", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "factor", "*", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.postprocessors.FactorScalar.__init__": [[28, 32], ["torch.nn.Module.__init__", "torch.nn.Parameter", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.tools.conv_mtl.Conv2dMtl.__init__"], ["    ", "def", "__init__", "(", "self", ",", "initial_value", "=", "1.", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "factor", "=", "nn", ".", "Parameter", "(", "torch", ".", "tensor", "(", "initial_value", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.postprocessors.FactorScalar.on_task_end": [[33, 35], ["None"], "methods", ["None"], ["", "def", "on_task_end", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.postprocessors.FactorScalar.on_epoch_end": [[36, 38], ["None"], "methods", ["None"], ["", "def", "on_epoch_end", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.postprocessors.FactorScalar.forward": [[39, 41], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "return", "self", ".", "factor", "*", "inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.postprocessors.FactorScalar.__mul__": [[42, 44], ["postprocessors.FactorScalar.forward"], "methods", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.convnet.my_resnet.CifarResNet.forward"], ["", "def", "__mul__", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "self", ".", "forward", "(", "other", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.postprocessors.FactorScalar.__rmul__": [[45, 47], ["postprocessors.FactorScalar.forward"], "methods", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.convnet.my_resnet.CifarResNet.forward"], ["", "def", "__rmul__", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "self", ".", "forward", "(", "other", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.postprocessors.InvertedFactorScalar.__init__": [[51, 55], ["torch.nn.Module.__init__", "torch.nn.Parameter", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.tools.conv_mtl.Conv2dMtl.__init__"], ["    ", "def", "__init__", "(", "self", ",", "initial_value", "=", "1.", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "_factor", "=", "nn", ".", "Parameter", "(", "torch", ".", "tensor", "(", "initial_value", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.postprocessors.InvertedFactorScalar.factor": [[56, 59], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "factor", "(", "self", ")", ":", "\n", "        ", "return", "1", "/", "(", "self", ".", "_factor", "+", "1e-7", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.postprocessors.InvertedFactorScalar.on_task_end": [[60, 62], ["None"], "methods", ["None"], ["", "def", "on_task_end", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.postprocessors.InvertedFactorScalar.on_epoch_end": [[63, 65], ["None"], "methods", ["None"], ["", "def", "on_epoch_end", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.postprocessors.InvertedFactorScalar.forward": [[66, 68], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "return", "self", ".", "factor", "*", "inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.postprocessors.InvertedFactorScalar.__mul__": [[69, 71], ["postprocessors.InvertedFactorScalar.forward"], "methods", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.convnet.my_resnet.CifarResNet.forward"], ["", "def", "__mul__", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "self", ".", "forward", "(", "other", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.postprocessors.InvertedFactorScalar.__rmul__": [[72, 74], ["postprocessors.InvertedFactorScalar.forward"], "methods", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.convnet.my_resnet.CifarResNet.forward"], ["", "def", "__rmul__", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "self", ".", "forward", "(", "other", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.postprocessors.HeatedUpScalar.__init__": [[78, 93], ["torch.nn.Module.__init__", "print", "max", "min"], "methods", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.tools.conv_mtl.Conv2dMtl.__init__"], ["    ", "def", "__init__", "(", "self", ",", "first_value", ",", "last_value", ",", "nb_steps", ",", "scope", "=", "\"task\"", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "scope", "=", "scope", "\n", "self", ".", "first_value", "=", "first_value", "\n", "self", ".", "step", "=", "(", "max", "(", "first_value", ",", "last_value", ")", "-", "min", "(", "first_value", ",", "last_value", ")", ")", "/", "(", "nb_steps", "-", "1", ")", "\n", "\n", "if", "first_value", ">", "last_value", ":", "\n", "            ", "self", ".", "_factor", "=", "-", "1", "\n", "", "else", ":", "\n", "            ", "self", ".", "_factor", "=", "1", "\n", "\n", "", "self", ".", "_increment", "=", "0", "\n", "\n", "print", "(", "\"Heated-up factor is {} with {} scope.\"", ".", "format", "(", "self", ".", "factor", ",", "self", ".", "scope", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.postprocessors.HeatedUpScalar.on_task_end": [[94, 98], ["print"], "methods", ["None"], ["", "def", "on_task_end", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "scope", "==", "\"task\"", ":", "\n", "            ", "self", ".", "_increment", "+=", "1", "\n", "", "print", "(", "\"Heated-up factor is {}.\"", ".", "format", "(", "self", ".", "factor", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.postprocessors.HeatedUpScalar.on_epoch_end": [[99, 102], ["None"], "methods", ["None"], ["", "def", "on_epoch_end", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "scope", "==", "\"epoch\"", ":", "\n", "            ", "self", ".", "_increment", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.postprocessors.HeatedUpScalar.factor": [[103, 106], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "factor", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "first_value", "+", "(", "self", ".", "_factor", "*", "self", ".", "_increment", "*", "self", ".", "step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.postprocessors.HeatedUpScalar.forward": [[107, 109], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "return", "self", ".", "factor", "*", "inputs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.FeatureGenerator.FeatureGenerator.__init__": [[8, 25], ["torch.Module.__init__", "FeatureGenerator.FeatureGenerator._make_layer", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "FeatureGenerator.FeatureGenerator.modules", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_"], "methods", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.tools.conv_mtl.Conv2dMtl.__init__", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.convnet.my_resnet.CifarResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "input_channels", ",", "fusion_num", "=", "2", ",", "latent_dim", "=", "64", ",", "num_blocks", "=", "2", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fusion_num", "=", "fusion_num", "\n", "self", ".", "input_channels", "=", "input_channels", "\n", "self", ".", "_downsampling_type", "=", "'stride'", "\n", "self", ".", "last_relu", "=", "False", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "self", ".", "fusion_num", "*", "input_channels", ",", "latent_dim", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "stage2", "=", "self", ".", "_make_layer", "(", "ResidualBlock", ",", "latent_dim", ",", "increase_dim", "=", "False", ",", "\n", "n", "=", "num_blocks", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "latent_dim", ",", "input_channels", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.FeatureGenerator.FeatureGenerator.forward": [[26, 36], ["range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "FeatureGenerator.FeatureGenerator.stage2", "FeatureGenerator.FeatureGenerator.conv3", "len", "range", "len", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.stack.append", "torch.stack.append", "torch.stack.append"], "methods", ["None"], ["                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "\"fan_out\"", ",", "nonlinearity", "=", "\"relu\"", ")", "\n", "\n", "", "", "", "def", "forward", "(", "self", ",", "labeled_features", ",", "unlabeled_features", ")", ":", "\n", "\n", "        ", "mixed_feat", "=", "[", "]", "\n", "\n", "for", "idx_l", "in", "range", "(", "len", "(", "labeled_features", ")", ")", ":", "\n", "            ", "for", "idx_u", "in", "range", "(", "len", "(", "unlabeled_features", ")", ")", ":", "\n", "                ", "l_mix_u", "=", "torch", ".", "cat", "(", "(", "labeled_features", "[", "idx_l", "]", ",", "unlabeled_features", "[", "idx_u", "]", ")", ",", "dim", "=", "0", ")", "\n", "mixed_feat", ".", "append", "(", "l_mix_u", ")", "\n", "", "", "mixed_feat", "=", "torch", ".", "stack", "(", "mixed_feat", ")", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.FeatureGenerator.FeatureGenerator.freeze": [[37, 48], ["FeatureGenerator.FeatureGenerator.parameters", "isinstance"], "methods", ["None"], ["mixed_feat", "=", "self", ".", "conv1", "(", "mixed_feat", ")", "\n", "_", ",", "out", "=", "self", ".", "stage2", "(", "mixed_feat", ")", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "return", "out", "\n", "\n", "", "def", "freeze", "(", "self", ",", "trainable", "=", "False", ",", "model", "=", "\"all\"", ")", ":", "\n", "        ", "if", "model", "==", "\"all\"", ":", "\n", "            ", "model", "=", "self", "\n", "", "else", ":", "\n", "            ", "assert", "False", ",", "model", "\n", "\n", "", "if", "not", "isinstance", "(", "model", ",", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.FeatureGenerator.FeatureGenerator._make_layer": [[49, 67], ["range", "inclearn.convnet.my_resnet.Stage", "layers.append", "layers.append", "Block", "Block"], "methods", ["None"], ["            ", "return", "self", "\n", "\n", "", "for", "param", "in", "model", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "trainable", "\n", "\n", "", "", "def", "_make_layer", "(", "self", ",", "Block", ",", "planes", ",", "increase_dim", "=", "False", ",", "n", "=", "None", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "\n", "if", "increase_dim", ":", "\n", "            ", "layers", ".", "append", "(", "\n", "Block", "(", "\n", "planes", ",", "\n", "increase_dim", "=", "True", ",", "\n", "last_relu", "=", "False", ",", "\n", "downsampling", "=", "self", ".", "_downsampling_type", "\n", ")", "\n", ")", "\n", "planes", "=", "2", "*", "planes", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.basenet.BasicNet.__init__": [[17, 94], ["torch.nn.Module.__init__", "inclearn.utils.LOGGER.LOGGER.info", "inclearn.lib.factory.get_convnet", "basenet.BasicNet.to", "postprocessor_kwargs.get", "postprocessors.FactorScalar", "ValueError", "classifiers.Classifier", "print", "torch.nn.Linear", "inclearn.utils.LOGGER.LOGGER.info", "basenet.BasicNet.set_gradcam_hook", "inclearn.utils.LOGGER.LOGGER.info", "inclearn.utils.LOGGER.LOGGER.info", "postprocessor_kwargs.get", "postprocessors.InvertedFactorScalar", "classifiers.CosineClassifier", "postprocessor_kwargs.get", "postprocessors.HeatedUpScalar", "classifiers.MCCosineClassifier", "ValueError", "postprocessor_kwargs.get", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.tools.conv_mtl.Conv2dMtl.__init__", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.factory.get_convnet", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.get", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.basenet.BasicNet.set_gradcam_hook", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.get", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.get", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.get"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "convnet_type", ",", "\n", "convnet_kwargs", "=", "{", "}", ",", "\n", "classifier_kwargs", "=", "{", "}", ",", "\n", "postprocessor_kwargs", "=", "{", "}", ",", "\n", "wordembeddings_kwargs", "=", "{", "}", ",", "\n", "init", "=", "\"kaiming\"", ",", "\n", "device", "=", "None", ",", "\n", "return_features", "=", "False", ",", "\n", "extract_no_act", "=", "False", ",", "\n", "classifier_no_act", "=", "False", ",", "\n", "attention_hook", "=", "False", ",", "\n", "rotations_predictor", "=", "False", ",", "\n", "gradcam_hook", "=", "False", "\n", ")", ":", "\n", "        ", "super", "(", "BasicNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "postprocessor_kwargs", ".", "get", "(", "\"type\"", ")", "==", "\"learned_scaling\"", ":", "\n", "            ", "self", ".", "post_processor", "=", "FactorScalar", "(", "**", "postprocessor_kwargs", ")", "\n", "", "elif", "postprocessor_kwargs", ".", "get", "(", "\"type\"", ")", "==", "\"inverted_learned_scaling\"", ":", "\n", "            ", "self", ".", "post_processor", "=", "InvertedFactorScalar", "(", "**", "postprocessor_kwargs", ")", "\n", "", "elif", "postprocessor_kwargs", ".", "get", "(", "\"type\"", ")", "==", "\"heatedup\"", ":", "\n", "            ", "self", ".", "post_processor", "=", "HeatedUpScalar", "(", "**", "postprocessor_kwargs", ")", "\n", "", "elif", "postprocessor_kwargs", ".", "get", "(", "\"type\"", ")", "is", "None", ":", "\n", "            ", "self", ".", "post_processor", "=", "None", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\n", "\"Unknown postprocessor {}.\"", ".", "format", "(", "postprocessor_kwargs", "[", "\"type\"", "]", ")", "\n", ")", "\n", "", "logger", ".", "LOGGER", ".", "info", "(", "\"Post processor is: {}\"", ".", "format", "(", "self", ".", "post_processor", ")", ")", "\n", "\n", "self", ".", "convnet", "=", "factory", ".", "get_convnet", "(", "convnet_type", ",", "**", "convnet_kwargs", ")", "\n", "\n", "if", "\"type\"", "not", "in", "classifier_kwargs", ":", "\n", "            ", "raise", "ValueError", "(", "\"Specify a classifier!\"", ",", "classifier_kwargs", ")", "\n", "", "if", "classifier_kwargs", "[", "\"type\"", "]", "==", "\"fc\"", ":", "\n", "            ", "self", ".", "classifier", "=", "Classifier", "(", "self", ".", "convnet", ".", "out_dim", ",", "device", "=", "device", ",", "**", "classifier_kwargs", ")", "\n", "", "elif", "classifier_kwargs", "[", "\"type\"", "]", "==", "\"cosine\"", ":", "\n", "            ", "self", ".", "classifier", "=", "CosineClassifier", "(", "\n", "self", ".", "convnet", ".", "out_dim", ",", "device", "=", "device", ",", "**", "classifier_kwargs", "\n", ")", "\n", "", "elif", "classifier_kwargs", "[", "\"type\"", "]", "==", "\"mcdropout_cosine\"", ":", "\n", "            ", "self", ".", "classifier", "=", "MCCosineClassifier", "(", "\n", "self", ".", "convnet", ".", "out_dim", ",", "device", "=", "device", ",", "**", "classifier_kwargs", "\n", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Unknown classifier type {}.\"", ".", "format", "(", "classifier_kwargs", "[", "\"type\"", "]", ")", ")", "\n", "\n", "", "if", "rotations_predictor", ":", "\n", "            ", "print", "(", "\"Using a rotations predictor.\"", ")", "\n", "self", ".", "rotations_predictor", "=", "nn", ".", "Linear", "(", "self", ".", "convnet", ".", "out_dim", ",", "4", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "rotations_predictor", "=", "None", "\n", "\n", "\n", "", "self", ".", "return_features", "=", "return_features", "\n", "self", ".", "extract_no_act", "=", "extract_no_act", "\n", "self", ".", "classifier_no_act", "=", "classifier_no_act", "\n", "self", ".", "attention_hook", "=", "attention_hook", "\n", "self", ".", "gradcam_hook", "=", "gradcam_hook", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "use_frozen_net", "=", "True", "\n", "\n", "self", ".", "domain_classifier", "=", "None", "\n", "\n", "if", "self", ".", "gradcam_hook", ":", "\n", "            ", "self", ".", "_hooks", "=", "[", "None", ",", "None", "]", "\n", "logger", ".", "LOGGER", ".", "info", "(", "\"Setting gradcam hook for gradients + activations of last conv.\"", ")", "\n", "self", ".", "set_gradcam_hook", "(", ")", "\n", "", "if", "self", ".", "extract_no_act", ":", "\n", "            ", "logger", ".", "LOGGER", ".", "info", "(", "\"Features will be extracted without the last ReLU.\"", ")", "\n", "", "if", "self", ".", "classifier_no_act", ":", "\n", "            ", "logger", ".", "LOGGER", ".", "info", "(", "\"No ReLU will be applied on features before feeding the classifier.\"", ")", "\n", "\n", "", "self", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "", "def", "on_task_end", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.basenet.BasicNet.on_task_end": [[95, 100], ["isinstance", "isinstance", "basenet.BasicNet.classifier.on_task_end", "basenet.BasicNet.post_processor.on_task_end"], "methods", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.classifiers.CosineClassifier.on_task_end", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.classifiers.CosineClassifier.on_task_end"], ["        ", "if", "isinstance", "(", "self", ".", "classifier", ",", "nn", ".", "Module", ")", ":", "\n", "            ", "self", ".", "classifier", ".", "on_task_end", "(", ")", "\n", "", "if", "isinstance", "(", "self", ".", "post_processor", ",", "nn", ".", "Module", ")", ":", "\n", "            ", "self", ".", "post_processor", ".", "on_task_end", "(", ")", "\n", "\n", "", "", "def", "on_epoch_end", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.basenet.BasicNet.on_epoch_end": [[101, 106], ["isinstance", "isinstance", "basenet.BasicNet.classifier.on_epoch_end", "basenet.BasicNet.post_processor.on_epoch_end"], "methods", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.classifiers.CosineClassifier.on_epoch_end", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.classifiers.CosineClassifier.on_epoch_end"], ["        ", "if", "isinstance", "(", "self", ".", "classifier", ",", "nn", ".", "Module", ")", ":", "\n", "            ", "self", ".", "classifier", ".", "on_epoch_end", "(", ")", "\n", "", "if", "isinstance", "(", "self", ".", "post_processor", ",", "nn", ".", "Module", ")", ":", "\n", "            ", "self", ".", "post_processor", ".", "on_epoch_end", "(", ")", "\n", "\n", "", "", "def", "forward", "(", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.basenet.BasicNet.forward": [[107, 152], ["basenet.BasicNet.convnet", "hasattr", "isinstance", "basenet.BasicNet.word_embeddings", "hasattr", "features_processing.fit_transform", "basenet.BasicNet.rotations_predictor", "basenet.BasicNet.update", "hasattr", "len", "basenet.BasicNet.classifier", "basenet.BasicNet.classifier", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.update"], ["self", ",", "x", ",", "rotation", "=", "False", ",", "index", "=", "None", ",", "features_processing", "=", "None", ",", "additional_features", "=", "None", ",", "*", "args", ",", "**", "kwargs", "\n", ")", ":", "\n", "        ", "if", "hasattr", "(", "self", ",", "\n", "\"word_embeddings\"", ")", "and", "self", ".", "word_embeddings", "is", "not", "None", "and", "isinstance", "(", "x", ",", "list", ")", ":", "\n", "            ", "words", "=", "x", "[", "1", "]", "\n", "x", "=", "x", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "words", "=", "None", "\n", "\n", "", "outputs", "=", "self", ".", "convnet", "(", "x", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "if", "words", "is", "not", "None", ":", "# ugly to change", "\n", "            ", "outputs", "[", "\"word_embeddings\"", "]", "=", "self", ".", "word_embeddings", "(", "words", ")", "\n", "\n", "", "if", "hasattr", "(", "self", ",", "\"classifier_no_act\"", ")", "and", "self", ".", "classifier_no_act", ":", "\n", "            ", "selected_features", "=", "outputs", "[", "\"raw_features\"", "]", "\n", "", "else", ":", "\n", "            ", "selected_features", "=", "outputs", "[", "\"features\"", "]", "\n", "\n", "", "if", "features_processing", "is", "not", "None", ":", "\n", "            ", "selected_features", "=", "features_processing", ".", "fit_transform", "(", "selected_features", ")", "\n", "\n", "", "if", "rotation", ":", "\n", "            ", "outputs", "[", "\"rotations\"", "]", "=", "self", ".", "rotations_predictor", "(", "outputs", "[", "\"features\"", "]", ")", "\n", "nb_inputs", "=", "len", "(", "x", ")", "//", "4", "\n", "# for k in outputs.keys():", "\n", "#    if k != \"rotations\":", "\n", "#        if isinstance(outputs[k], list):", "\n", "#            outputs[k] = [elt[:32] for elt in outputs[k]]", "\n", "#        else:", "\n", "#            outputs[k] = outputs[k][:32]", "\n", "", "else", ":", "\n", "            ", "if", "additional_features", "is", "not", "None", ":", "\n", "                ", "clf_outputs", "=", "self", ".", "classifier", "(", "\n", "torch", ".", "cat", "(", "(", "selected_features", ",", "additional_features", ")", ",", "0", ")", "\n", ")", "\n", "", "else", ":", "\n", "                ", "clf_outputs", "=", "self", ".", "classifier", "(", "selected_features", ")", "\n", "", "outputs", ".", "update", "(", "clf_outputs", ")", "\n", "\n", "", "if", "hasattr", "(", "self", ",", "\"gradcam_hook\"", ")", "and", "self", ".", "gradcam_hook", ":", "\n", "            ", "outputs", "[", "\"gradcam_gradients\"", "]", "=", "self", ".", "_gradcam_gradients", "\n", "outputs", "[", "\"gradcam_activations\"", "]", "=", "self", ".", "_gradcam_activations", "\n", "\n", "", "return", "outputs", "\n", "\n", "", "def", "post_process", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.basenet.BasicNet.post_process": [[153, 157], ["basenet.BasicNet.post_processor"], "methods", ["None"], ["        ", "if", "self", ".", "post_processor", "is", "None", ":", "\n", "            ", "return", "x", "\n", "", "return", "self", ".", "post_processor", "(", "x", ")", "\n", "\n", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.basenet.BasicNet.features_dim": [[158, 161], ["None"], "methods", ["None"], ["def", "features_dim", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "convnet", ".", "out_dim", "\n", "\n", "", "def", "add_classes", "(", "self", ",", "n_classes", ")", ":", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.basenet.BasicNet.add_classes": [[162, 164], ["basenet.BasicNet.classifier.add_classes"], "methods", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.classifiers.CosineClassifier.add_classes"], ["        ", "self", ".", "classifier", ".", "add_classes", "(", "n_classes", ")", "\n", "\n", "", "def", "add_imprinted_classes", "(", "self", ",", "class_indexes", ",", "inc_dataset", ",", "**", "kwargs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.basenet.BasicNet.add_imprinted_classes": [[165, 168], ["hasattr", "basenet.BasicNet.classifier.add_imprinted_classes"], "methods", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.classifiers.CosineM2KDClassifier.add_imprinted_classes"], ["        ", "if", "hasattr", "(", "self", ".", "classifier", ",", "\"add_imprinted_classes\"", ")", ":", "\n", "            ", "self", ".", "classifier", ".", "add_imprinted_classes", "(", "class_indexes", ",", "inc_dataset", ",", "self", ",", "**", "kwargs", ")", "\n", "\n", "", "", "def", "add_custom_weights", "(", "self", ",", "weights", ",", "**", "kwargs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.basenet.BasicNet.add_custom_weights": [[169, 171], ["basenet.BasicNet.classifier.add_custom_weights"], "methods", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.classifiers.CosineClassifier.add_custom_weights"], ["        ", "self", ".", "classifier", ".", "add_custom_weights", "(", "weights", ",", "**", "kwargs", ")", "\n", "\n", "", "def", "extract", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.basenet.BasicNet.extract": [[172, 177], ["basenet.BasicNet.convnet"], "methods", ["None"], ["        ", "outputs", "=", "self", ".", "convnet", "(", "x", ")", "\n", "if", "self", ".", "extract_no_act", ":", "\n", "            ", "return", "outputs", "[", "\"raw_features\"", "]", "\n", "", "return", "outputs", "[", "\"features\"", "]", "\n", "\n", "", "def", "predict_rotations", "(", "self", ",", "inputs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.basenet.BasicNet.predict_rotations": [[178, 182], ["basenet.BasicNet.rotations_predictor", "ValueError", "basenet.BasicNet.convnet"], "methods", ["None"], ["        ", "if", "self", ".", "rotations_predictor", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Enable the rotations predictor.\"", ")", "\n", "", "return", "self", ".", "rotations_predictor", "(", "self", ".", "convnet", "(", "inputs", ")", "[", "\"features\"", "]", ")", "\n", "\n", "", "def", "freeze", "(", "self", ",", "trainable", "=", "False", ",", "model", "=", "\"all\"", ")", ":", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.basenet.BasicNet.freeze": [[183, 209], ["basenet.BasicNet.parameters", "isinstance", "hasattr", "basenet.BasicNet.convnet.last_conv.parameters", "basenet.BasicNet.eval", "basenet.BasicNet.train", "basenet.BasicNet.convnet.freeze", "basenet.BasicNet.split"], "methods", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.base.IncrementalLearner.eval", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.base.IncrementalLearner.train", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.convnet.my_resnet.CifarResNet.freeze"], ["        ", "if", "model", "==", "\"all\"", ":", "\n", "            ", "model", "=", "self", "\n", "", "elif", "model", "==", "\"convnet\"", ":", "\n", "            ", "model", "=", "self", ".", "convnet", "\n", "", "elif", "model", "==", "\"classifier\"", ":", "\n", "            ", "model", "=", "self", ".", "classifier", "\n", "", "elif", "'convnet.'", "in", "model", ":", "\n", "            ", "self", ".", "convnet", ".", "freeze", "(", "trainable", "=", "trainable", ",", "model", "=", "model", ".", "split", "(", "'.'", ")", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "assert", "False", ",", "model", "\n", "\n", "", "if", "not", "isinstance", "(", "model", ",", "nn", ".", "Module", ")", ":", "\n", "            ", "return", "self", "\n", "", "for", "param", "in", "model", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "trainable", "\n", "", "if", "hasattr", "(", "self", ",", "\"gradcam_hook\"", ")", "and", "self", ".", "gradcam_hook", "and", "model", "==", "\"convnet\"", ":", "\n", "            ", "for", "param", "in", "self", ".", "convnet", ".", "last_conv", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "True", "\n", "\n", "", "", "if", "not", "trainable", ":", "\n", "            ", "model", ".", "eval", "(", ")", "\n", "", "else", ":", "\n", "            ", "model", ".", "train", "(", ")", "\n", "\n", "", "return", "self", "\n", "\n", "", "def", "fix_bn", "(", "self", ",", "model", "=", "'convnet'", ",", "fix", "=", "True", ")", ":", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.basenet.BasicNet.fix_bn": [[209, 224], ["net.modules", "isinstance", "hasattr", "hasattr", "module.weight.requires_grad_", "module.bias.requires_grad_", "module.eval", "module.train"], "methods", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.base.IncrementalLearner.eval", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.base.IncrementalLearner.train"], ["", "def", "fix_bn", "(", "self", ",", "model", "=", "'convnet'", ",", "fix", "=", "True", ")", ":", "\n", "        ", "if", "model", "==", "'convnet'", ":", "\n", "            ", "net", "=", "self", ".", "convnet", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "for", "module", "in", "net", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "module", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "if", "hasattr", "(", "module", ",", "'weight'", ")", ":", "\n", "                    ", "module", ".", "weight", ".", "requires_grad_", "(", "not", "fix", ")", "\n", "", "if", "hasattr", "(", "module", ",", "'bias'", ")", ":", "\n", "                    ", "module", ".", "bias", ".", "requires_grad_", "(", "not", "fix", ")", "\n", "", "if", "fix", ":", "\n", "                    ", "module", ".", "eval", "(", ")", "\n", "", "else", ":", "\n", "                    ", "module", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.basenet.BasicNet.get_group_parameters": [[210, 230], ["isinstance", "hasattr", "hasattr", "hasattr", "basenet.BasicNet.convnet.parameters", "basenet.BasicNet.post_processor.parameters", "basenet.BasicNet.rotations_predictor.parameters", "basenet.BasicNet.convnet.last_block.parameters", "hasattr", "isinstance", "basenet.BasicNet.domain_classifier.parameters"], "methods", ["None"], ["        ", "if", "model", "==", "'convnet'", ":", "\n", "            ", "net", "=", "self", ".", "convnet", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "for", "module", "in", "net", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "module", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "if", "hasattr", "(", "module", ",", "'weight'", ")", ":", "\n", "                    ", "module", ".", "weight", ".", "requires_grad_", "(", "not", "fix", ")", "\n", "", "if", "hasattr", "(", "module", ",", "'bias'", ")", ":", "\n", "                    ", "module", ".", "bias", ".", "requires_grad_", "(", "not", "fix", ")", "\n", "", "if", "fix", ":", "\n", "                    ", "module", ".", "eval", "(", ")", "\n", "", "else", ":", "\n", "                    ", "module", ".", "train", "(", ")", "\n", "\n", "", "", "", "", "def", "get_group_parameters", "(", "self", ")", ":", "\n", "        ", "groups", "=", "{", "\"convnet\"", ":", "self", ".", "convnet", ".", "parameters", "(", ")", "}", "\n", "\n", "if", "isinstance", "(", "self", ".", "post_processor", ",", "FactorScalar", ")", ":", "\n", "            ", "groups", "[", "\"postprocessing\"", "]", "=", "self", ".", "post_processor", ".", "parameters", "(", ")", "\n", "", "if", "hasattr", "(", "self", ".", "classifier", ",", "\"new_weights\"", ")", ":", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.basenet.BasicNet.copy": [[231, 233], ["copy.deepcopy"], "methods", ["None"], ["            ", "groups", "[", "\"new_weights\"", "]", "=", "self", ".", "classifier", ".", "new_weights", "\n", "", "if", "hasattr", "(", "self", ".", "classifier", ",", "\"old_weights\"", ")", ":", "\n", "            ", "groups", "[", "\"old_weights\"", "]", "=", "self", ".", "classifier", ".", "old_weights", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.basenet.BasicNet.n_classes": [[234, 237], ["None"], "methods", ["None"], ["", "if", "self", ".", "rotations_predictor", ":", "\n", "            ", "groups", "[", "\"rotnet\"", "]", "=", "self", ".", "rotations_predictor", ".", "parameters", "(", ")", "\n", "", "if", "hasattr", "(", "self", ".", "convnet", ",", "\"last_block\"", ")", ":", "\n", "            ", "groups", "[", "\"last_block\"", "]", "=", "self", ".", "convnet", ".", "last_block", ".", "parameters", "(", ")", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.basenet.BasicNet.unset_gradcam_hook": [[238, 244], ["basenet.BasicNet._hooks[].remove", "basenet.BasicNet._hooks[].remove"], "methods", ["None"], ["", "if", "hasattr", "(", "self", ".", "classifier", ",", "\"_negative_weights\"", "\n", ")", "and", "isinstance", "(", "self", ".", "classifier", ".", "_negative_weights", ",", "nn", ".", "Parameter", ")", ":", "\n", "            ", "groups", "[", "\"neg_weights\"", "]", "=", "self", ".", "classifier", ".", "_negative_weights", "\n", "", "if", "self", ".", "domain_classifier", "is", "not", "None", ":", "\n", "            ", "groups", "[", "\"domain_clf\"", "]", "=", "self", ".", "domain_classifier", ".", "parameters", "(", ")", "\n", "\n", "", "return", "groups", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.basenet.BasicNet.set_gradcam_hook": [[245, 258], ["basenet.BasicNet.convnet.last_conv.register_backward_hook", "basenet.BasicNet.convnet.last_conv.register_forward_hook"], "methods", ["None"], ["\n", "", "def", "copy", "(", "self", ")", ":", "\n", "        ", "return", "copy", ".", "deepcopy", "(", "self", ")", "\n", "\n", "", "@", "property", "\n", "def", "n_classes", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "classifier", ".", "n_classes", "\n", "\n", "", "def", "unset_gradcam_hook", "(", "self", ")", ":", "\n", "        ", "self", ".", "_hooks", "[", "0", "]", ".", "remove", "(", ")", "\n", "self", ".", "_hooks", "[", "1", "]", ".", "remove", "(", ")", "\n", "self", ".", "_hooks", "[", "0", "]", "=", "None", "\n", "self", ".", "_hooks", "[", "1", "]", "=", "None", "\n", "self", ".", "_gradcam_gradients", ",", "self", ".", "_gradcam_activations", "=", "[", "None", "]", ",", "[", "None", "]", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.basenet.BasicNet.create_domain_classifier": [[259, 262], ["classifiers.DomainClassifier"], "methods", ["None"], ["\n", "", "def", "set_gradcam_hook", "(", "self", ")", ":", "\n", "        ", "self", ".", "_gradcam_gradients", ",", "self", ".", "_gradcam_activations", "=", "[", "None", "]", ",", "[", "None", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.basenet.BasicNet.del_domain_classifier": [[263, 265], ["None"], "methods", ["None"], ["def", "backward_hook", "(", "module", ",", "grad_input", ",", "grad_output", ")", ":", "\n", "            ", "self", ".", "_gradcam_gradients", "[", "0", "]", "=", "grad_output", "[", "0", "]", "\n", "return", "None", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.classifiers.Classifier.__init__": [[20, 49], ["torch.nn.Module.__init__", "torch.nn.ParameterList", "torch.nn.ParameterList"], "methods", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.tools.conv_mtl.Conv2dMtl.__init__"], ["\n", "def", "__init__", "(", "\n", "self", ",", "\n", "features_dim", ",", "\n", "device", ",", "\n", "*", ",", "\n", "use_bias", "=", "False", ",", "\n", "normalize", "=", "False", ",", "\n", "init", "=", "\"kaiming\"", ",", "\n", "train_negative_weights", "=", "False", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "features_dim", "=", "features_dim", "\n", "self", ".", "use_bias", "=", "use_bias", "\n", "self", ".", "init_method", "=", "init", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "normalize", "=", "normalize", "\n", "self", ".", "_weights", "=", "nn", ".", "ParameterList", "(", "[", "]", ")", "\n", "self", ".", "_bias", "=", "nn", ".", "ParameterList", "(", "[", "]", ")", "if", "self", ".", "use_bias", "else", "None", "\n", "\n", "self", ".", "train_negative_weights", "=", "train_negative_weights", "\n", "self", ".", "_negative_weights", "=", "None", "\n", "self", ".", "use_neg_weights", "=", "True", "\n", "self", ".", "eval_negative_weights", "=", "False", "\n", "\n", "self", ".", "proxy_per_class", "=", "1", "\n", "\n", "self", ".", "n_classes", "=", "0", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.classifiers.Classifier.on_task_end": [[50, 52], ["None"], "methods", ["None"], ["\n", "", "def", "on_task_end", "(", "self", ")", ":", "\n", "        ", "pass", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.classifiers.Classifier.on_epoch_end": [[53, 55], ["None"], "methods", ["None"], ["\n", "", "def", "on_epoch_end", "(", "self", ")", ":", "\n", "        ", "pass", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.classifiers.Classifier.weights": [[56, 59], ["torch.cat"], "methods", ["None"], ["\n", "", "@", "property", "\n", "def", "weights", "(", "self", ")", ":", "\n", "        ", "return", "torch", ".", "cat", "(", "[", "w", "for", "w", "in", "self", ".", "_weights", "]", ")", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.classifiers.Classifier.new_weights": [[60, 63], ["None"], "methods", ["None"], ["\n", "", "@", "property", "\n", "def", "new_weights", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_weights", "[", "-", "1", "]", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.classifiers.Classifier.old_weights": [[64, 69], ["len"], "methods", ["None"], ["\n", "", "@", "property", "\n", "def", "old_weights", "(", "self", ")", ":", "\n", "        ", "if", "len", "(", "self", ".", "_weights", ")", ">", "1", ":", "\n", "            ", "return", "self", ".", "_weights", "[", ":", "-", "1", "]", "\n", "", "return", "None", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.classifiers.Classifier.bias": [[70, 75], ["torch.cat"], "methods", ["None"], ["\n", "", "@", "property", "\n", "def", "bias", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_bias", "is", "not", "None", ":", "\n", "            ", "return", "torch", ".", "cat", "(", "[", "b", "for", "b", "in", "self", ".", "_bias", "]", ")", "\n", "", "return", "None", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.classifiers.Classifier.new_bias": [[76, 79], ["None"], "methods", ["None"], ["\n", "", "@", "property", "\n", "def", "new_bias", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_bias", "[", "-", "1", "]", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.classifiers.Classifier.old_bias": [[80, 85], ["len"], "methods", ["None"], ["\n", "", "@", "property", "\n", "def", "old_bias", "(", "self", ")", ":", "\n", "        ", "if", "len", "(", "self", ".", "_bias", ")", ">", "1", ":", "\n", "            ", "return", "self", ".", "_bias", "[", ":", "-", "1", "]", "\n", "", "return", "None", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.classifiers.Classifier.forward": [[86, 101], ["torch.nn.functional.linear", "len", "Exception", "torch.cat", "torch.nn.functional.normalize"], "methods", ["None"], ["\n", "", "def", "forward", "(", "self", ",", "features", ")", ":", "\n", "        ", "if", "len", "(", "self", ".", "_weights", ")", "==", "0", ":", "\n", "            ", "raise", "Exception", "(", "\"Add some classes before training.\"", ")", "\n", "\n", "", "weights", "=", "self", ".", "weights", "\n", "if", "self", ".", "_negative_weights", "is", "not", "None", "and", "(", "\n", "self", ".", "training", "is", "True", "or", "self", ".", "eval_negative_weights", "\n", ")", "and", "self", ".", "use_neg_weights", ":", "\n", "            ", "weights", "=", "torch", ".", "cat", "(", "(", "weights", ",", "self", ".", "_negative_weights", ")", ",", "0", ")", "\n", "\n", "", "if", "self", ".", "normalize", ":", "\n", "            ", "features", "=", "F", ".", "normalize", "(", "features", ",", "dim", "=", "1", ",", "p", "=", "2", ")", "\n", "\n", "", "logits", "=", "F", ".", "linear", "(", "features", ",", "weights", ",", "bias", "=", "self", ".", "bias", ")", "\n", "return", "{", "\"logits\"", ":", "logits", "}", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.classifiers.Classifier.add_classes": [[102, 111], ["classifiers.Classifier._weights.append", "classifiers.Classifier._init", "classifiers.Classifier.to", "torch.nn.Parameter", "classifiers.Classifier._bias.append", "classifiers.Classifier._init", "torch.randn", "torch.nn.Parameter", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.classifiers.Classifier._init", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.classifiers.Classifier._init"], ["\n", "", "def", "add_classes", "(", "self", ",", "n_classes", ")", ":", "\n", "        ", "self", ".", "_weights", ".", "append", "(", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "n_classes", ",", "self", ".", "features_dim", ")", ")", ")", "\n", "self", ".", "_init", "(", "self", ".", "init_method", ",", "self", ".", "new_weights", ")", "\n", "\n", "if", "self", ".", "use_bias", ":", "\n", "            ", "self", ".", "_bias", ".", "append", "(", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "n_classes", ")", ")", ")", "\n", "self", ".", "_init", "(", "0.", ",", "self", ".", "new_bias", ")", "\n", "\n", "", "self", ".", "to", "(", "self", ".", "device", ")", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.classifiers.Classifier.reset_weights": [[112, 114], ["classifiers.Classifier._init"], "methods", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.classifiers.Classifier._init"], ["\n", "", "def", "reset_weights", "(", "self", ")", ":", "\n", "        ", "self", ".", "_init", "(", "self", ".", "init_method", ",", "self", ".", "weights", ")", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.classifiers.Classifier._init": [[115, 123], ["isinstance", "isinstance", "torch.nn.init.constant_", "torch.nn.init.kaiming_normal_", "NotImplementedError"], "methods", ["None"], ["\n", "", "@", "staticmethod", "\n", "def", "_init", "(", "init_method", ",", "parameters", ")", ":", "\n", "        ", "if", "isinstance", "(", "init_method", ",", "float", ")", "or", "isinstance", "(", "init_method", ",", "int", ")", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "parameters", ",", "init_method", ")", "\n", "", "elif", "init_method", "==", "\"kaiming\"", ":", "\n", "            ", "nn", ".", "init", ".", "kaiming_normal_", "(", "parameters", ",", "nonlinearity", "=", "\"linear\"", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Unknown initialization method: {}.\"", ".", "format", "(", "init_method", ")", ")", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.classifiers.Classifier.align_weights": [[124, 138], ["torch.no_grad", "torch.cat", "torch.mean", "torch.mean", "torch.nn.Parameter", "torch.cat.norm", "classifiers.Classifier.new_weights.norm"], "methods", ["None"], ["\n", "", "", "def", "align_weights", "(", "self", ")", ":", "\n", "        ", "\"\"\"Align new weights based on old weights norm.\n\n        # Reference:\n            * Maintaining Discrimination and Fairness in Class Incremental Learning\n              Zhao et al. 2019\n        \"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "old_weights", "=", "torch", ".", "cat", "(", "[", "w", "for", "w", "in", "self", ".", "old_weights", "]", ")", "\n", "\n", "old_norm", "=", "torch", ".", "mean", "(", "old_weights", ".", "norm", "(", "dim", "=", "1", ")", ")", "\n", "new_norm", "=", "torch", ".", "mean", "(", "self", ".", "new_weights", ".", "norm", "(", "dim", "=", "1", ")", ")", "\n", "\n", "self", ".", "_weights", "[", "-", "1", "]", "=", "nn", ".", "Parameter", "(", "(", "old_norm", "/", "new_norm", ")", "*", "self", ".", "_weights", "[", "-", "1", "]", ")", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.classifiers.Classifier.align_features": [[139, 145], ["classifiers.Classifier.weights.data.norm().mean", "features.data.norm().mean", "classifiers.Classifier.weights.data.norm", "features.data.norm"], "methods", ["None"], ["\n", "", "", "def", "align_features", "(", "self", ",", "features", ")", ":", "\n", "        ", "avg_weights_norm", "=", "self", ".", "weights", ".", "data", ".", "norm", "(", "dim", "=", "1", ")", ".", "mean", "(", ")", "\n", "avg_features_norm", "=", "features", ".", "data", ".", "norm", "(", "dim", "=", "1", ")", ".", "mean", "(", ")", "\n", "\n", "features", ".", "data", "=", "features", ".", "data", "*", "(", "avg_weights_norm", "/", "avg_features_norm", ")", "\n", "return", "features", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.classifiers.Classifier.add_custom_weights": [[146, 162], ["isinstance", "classifiers.Classifier._weights.append", "classifiers.Classifier.to", "torch.nn.Parameter", "classifiers.Classifier.weights.data.norm().mean", "classifiers.Classifier.weights.data.norm().mean", "weights.data.norm().mean", "NotImplementedError", "classifiers.Classifier.weights.data.norm", "classifiers.Classifier.weights.data.norm", "weights.data.norm"], "methods", ["None"], ["\n", "", "def", "add_custom_weights", "(", "self", ",", "weights", ",", "ponderate", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "isinstance", "(", "ponderate", ",", "str", ")", ":", "\n", "            ", "if", "ponderate", "==", "\"weights_imprinting\"", ":", "\n", "                ", "avg_weights_norm", "=", "self", ".", "weights", ".", "data", ".", "norm", "(", "dim", "=", "1", ")", ".", "mean", "(", ")", "\n", "weights", "=", "weights", "*", "avg_weights_norm", "\n", "", "elif", "ponderate", "==", "\"align_weights\"", ":", "\n", "                ", "avg_weights_norm", "=", "self", ".", "weights", ".", "data", ".", "norm", "(", "dim", "=", "1", ")", ".", "mean", "(", ")", "\n", "avg_new_weights_norm", "=", "weights", ".", "data", ".", "norm", "(", "dim", "=", "1", ")", ".", "mean", "(", ")", "\n", "\n", "ratio", "=", "avg_weights_norm", "/", "avg_new_weights_norm", "\n", "weights", "=", "weights", "*", "ratio", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "(", "f\"Unknown ponderation type {ponderate}.\"", ")", "\n", "\n", "", "", "self", ".", "_weights", ".", "append", "(", "nn", ".", "Parameter", "(", "weights", ")", ")", "\n", "self", ".", "to", "(", "self", ".", "device", ")", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.classifiers.Classifier.set_negative_weights": [[163, 195], ["inclearn.utils.LOGGER.LOGGER.info", "isinstance", "torch.nn.Parameter", "classifiers.Classifier.weights.data.norm().mean", "classifiers.Classifier.weights.data.norm().mean", "negative_weights.data.norm().mean", "classifiers.Classifier.weights.data.norm", "classifiers.Classifier.weights.data.norm().mean", "negative_weights.data.norm().mean", "NotImplementedError", "classifiers.Classifier.weights.data.norm", "negative_weights.data.norm", "classifiers.Classifier.weights.data.norm", "negative_weights.data.norm"], "methods", ["None"], ["\n", "", "def", "set_negative_weights", "(", "self", ",", "negative_weights", ",", "ponderate", "=", "False", ")", ":", "\n", "        ", "\"\"\"Add weights that are used like the usual weights, but aren't actually\n        parameters.\n\n        :param negative_weights: Tensor of shape (n_classes * nb_proxy, features_dim)\n        :param ponderate: Reponderate the negative weights by the existing weights norm, as done by\n                          \"Weights Imprinting\".\n        \"\"\"", "\n", "logger", ".", "LOGGER", ".", "info", "(", "\"Add negative weights.\"", ")", "\n", "if", "isinstance", "(", "ponderate", ",", "str", ")", ":", "\n", "            ", "if", "ponderate", "==", "\"weights_imprinting\"", ":", "\n", "                ", "avg_weights_norm", "=", "self", ".", "weights", ".", "data", ".", "norm", "(", "dim", "=", "1", ")", ".", "mean", "(", ")", "\n", "negative_weights", "=", "negative_weights", "*", "avg_weights_norm", "\n", "", "elif", "ponderate", "==", "\"align_weights\"", ":", "\n", "                ", "avg_weights_norm", "=", "self", ".", "weights", ".", "data", ".", "norm", "(", "dim", "=", "1", ")", ".", "mean", "(", ")", "\n", "avg_negative_weights_norm", "=", "negative_weights", ".", "data", ".", "norm", "(", "dim", "=", "1", ")", ".", "mean", "(", ")", "\n", "\n", "ratio", "=", "avg_weights_norm", "/", "avg_negative_weights_norm", "\n", "negative_weights", "=", "negative_weights", "*", "ratio", "\n", "", "elif", "ponderate", "==", "\"inv_align_weights\"", ":", "\n", "                ", "avg_weights_norm", "=", "self", ".", "weights", ".", "data", ".", "norm", "(", "dim", "=", "1", ")", ".", "mean", "(", ")", "\n", "avg_negative_weights_norm", "=", "negative_weights", ".", "data", ".", "norm", "(", "dim", "=", "1", ")", ".", "mean", "(", ")", "\n", "\n", "ratio", "=", "avg_negative_weights_norm", "/", "avg_weights_norm", "\n", "negative_weights", "=", "negative_weights", "*", "ratio", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "(", "f\"Unknown ponderation type {ponderate}.\"", ")", "\n", "\n", "", "", "if", "self", ".", "train_negative_weights", ":", "\n", "            ", "self", ".", "_negative_weights", "=", "nn", ".", "Parameter", "(", "negative_weights", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_negative_weights", "=", "negative_weights", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.classifiers.CosineClassifier.__init__": [[200, 255], ["torch.nn.Module.__init__", "torch.nn.ParameterList", "isinstance", "isinstance", "inclearn.utils.LOGGER.LOGGER.warning", "postprocessors.FactorScalar", "inclearn.utils.LOGGER.LOGGER.info", "torch.nn.Sequential", "torch.nn.ReLU", "torch.nn.BatchNorm1d", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.tools.conv_mtl.Conv2dMtl.__init__"], ["\n", "def", "__init__", "(", "\n", "self", ",", "\n", "features_dim", ",", "\n", "device", ",", "\n", "*", ",", "\n", "proxy_per_class", "=", "1", ",", "\n", "distance", "=", "\"cosine\"", ",", "\n", "merging", "=", "\"softmax\"", ",", "\n", "scaling", "=", "1", ",", "\n", "gamma", "=", "1.", ",", "\n", "use_bias", "=", "False", ",", "\n", "type", "=", "None", ",", "\n", "pre_fc", "=", "None", ",", "\n", "negative_weights_bias", "=", "None", ",", "\n", "train_negative_weights", "=", "False", ",", "\n", "eval_negative_weights", "=", "False", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "n_classes", "=", "0", "\n", "self", ".", "_weights", "=", "nn", ".", "ParameterList", "(", "[", "]", ")", "\n", "self", ".", "bias", "=", "None", "\n", "self", ".", "features_dim", "=", "features_dim", "\n", "self", ".", "proxy_per_class", "=", "proxy_per_class", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "distance", "=", "distance", "\n", "self", ".", "merging", "=", "merging", "\n", "self", ".", "gamma", "=", "gamma", "\n", "\n", "self", ".", "negative_weights_bias", "=", "negative_weights_bias", "\n", "self", ".", "train_negative_weights", "=", "train_negative_weights", "\n", "self", ".", "eval_negative_weights", "=", "eval_negative_weights", "\n", "\n", "self", ".", "_negative_weights", "=", "None", "\n", "self", ".", "use_neg_weights", "=", "True", "\n", "\n", "if", "isinstance", "(", "scaling", ",", "int", ")", "or", "isinstance", "(", "scaling", ",", "float", ")", ":", "\n", "            ", "self", ".", "scaling", "=", "scaling", "\n", "", "else", ":", "\n", "            ", "logger", ".", "LOGGER", ".", "warning", "(", "\"Using inner learned scaling\"", ")", "\n", "self", ".", "scaling", "=", "FactorScalar", "(", "1.", ")", "\n", "\n", "", "if", "proxy_per_class", ">", "1", ":", "\n", "            ", "logger", ".", "LOGGER", ".", "info", "(", "\"Using {} proxies per class.\"", ".", "format", "(", "proxy_per_class", ")", ")", "\n", "\n", "", "if", "pre_fc", "is", "not", "None", ":", "\n", "            ", "self", ".", "pre_fc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "nn", ".", "BatchNorm1d", "(", "self", ".", "features_dim", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "features_dim", ",", "pre_fc", ")", "\n", ")", "\n", "self", ".", "features_dim", "=", "pre_fc", "\n", "", "else", ":", "\n", "            ", "self", ".", "pre_fc", "=", "None", "\n", "\n", "", "self", ".", "_task_idx", "=", "0", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.classifiers.CosineClassifier.on_task_end": [[256, 260], ["isinstance", "classifiers.CosineClassifier.scaling.on_task_end"], "methods", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.classifiers.CosineClassifier.on_task_end"], ["\n", "", "def", "on_task_end", "(", "self", ")", ":", "\n", "        ", "self", ".", "_task_idx", "+=", "1", "\n", "if", "isinstance", "(", "self", ".", "scaling", ",", "nn", ".", "Module", ")", ":", "\n", "            ", "self", ".", "scaling", ".", "on_task_end", "(", ")", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.classifiers.CosineClassifier.on_epoch_end": [[261, 264], ["isinstance", "classifiers.CosineClassifier.scaling.on_epoch_end"], "methods", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.classifiers.CosineClassifier.on_epoch_end"], ["\n", "", "", "def", "on_epoch_end", "(", "self", ")", ":", "\n", "        ", "if", "isinstance", "(", "self", ".", "scaling", ",", "nn", ".", "Module", ")", ":", "\n", "            ", "self", ".", "scaling", ".", "on_epoch_end", "(", ")", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.classifiers.CosineClassifier.forward": [[265, 339], ["hasattr", "classifiers.CosineClassifier.pre_fc", "torch.cat", "distance.cosine_similarity", "classifiers.CosineClassifier._reduce_proxies", "distance.stable_cosine_distance", "isinstance", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.clamp", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "distance.stable_cosine_distance", "distance.stable_cosine_distance", "isinstance", "torch.min", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "NotImplementedError", "similarities[].min", "torch.cat", "isinstance", "torch.min", "torch.nn.functional.relu", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "distance.stable_cosine_distance", "torch.cat", "isinstance", "classifiers.CosineClassifier.negative_weights_bias.startswith", "int", "min", "similarities[].scatter_", "NotImplementedError", "torch.nn.functional.relu", "min_simi.repeat", "similarities[].max", "classifiers.CosineClassifier.negative_weights_bias.replace", "max_simi.repeat"], "methods", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.distance.cosine_similarity", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.classifiers.CosineClassifier._reduce_proxies", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.distance.stable_cosine_distance", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.distance.stable_cosine_distance", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.distance.stable_cosine_distance", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.distance.stable_cosine_distance"], ["\n", "", "", "def", "forward", "(", "self", ",", "features", ")", ":", "\n", "        ", "if", "hasattr", "(", "self", ",", "\"pre_fc\"", ")", "and", "self", ".", "pre_fc", "is", "not", "None", ":", "\n", "            ", "features", "=", "self", ".", "pre_fc", "(", "features", ")", "\n", "\n", "", "weights", "=", "self", ".", "weights", "\n", "if", "self", ".", "_negative_weights", "is", "not", "None", "and", "(", "\n", "self", ".", "training", "is", "True", "or", "self", ".", "eval_negative_weights", "\n", ")", "and", "self", ".", "use_neg_weights", ":", "\n", "            ", "weights", "=", "torch", ".", "cat", "(", "(", "weights", ",", "self", ".", "_negative_weights", ")", ",", "0", ")", "\n", "\n", "", "if", "self", ".", "distance", "==", "\"cosine\"", ":", "\n", "            ", "raw_similarities", "=", "distance_lib", ".", "cosine_similarity", "(", "features", ",", "weights", ")", "\n", "", "elif", "self", ".", "distance", "==", "\"stable_cosine_distance\"", ":", "\n", "            ", "features", "=", "self", ".", "scaling", "*", "F", ".", "normalize", "(", "features", ",", "p", "=", "2", ",", "dim", "=", "-", "1", ")", "\n", "weights", "=", "self", ".", "scaling", "*", "F", ".", "normalize", "(", "weights", ",", "p", "=", "2", ",", "dim", "=", "-", "1", ")", "\n", "\n", "raw_similarities", "=", "distance_lib", ".", "stable_cosine_distance", "(", "features", ",", "weights", ")", "\n", "", "elif", "self", ".", "distance", "==", "\"neg_stable_cosine_distance\"", ":", "\n", "            ", "features", "=", "self", ".", "scaling", "*", "F", ".", "normalize", "(", "features", ",", "p", "=", "2", ",", "dim", "=", "-", "1", ")", "\n", "weights", "=", "self", ".", "scaling", "*", "F", ".", "normalize", "(", "weights", ",", "p", "=", "2", ",", "dim", "=", "-", "1", ")", "\n", "\n", "raw_similarities", "=", "-", "distance_lib", ".", "stable_cosine_distance", "(", "features", ",", "weights", ")", "\n", "", "elif", "self", ".", "distance", "==", "\"prelu_stable_cosine_distance\"", ":", "\n", "            ", "features", "=", "self", ".", "scaling", "*", "F", ".", "normalize", "(", "F", ".", "relu", "(", "features", ")", ",", "p", "=", "2", ",", "dim", "=", "-", "1", ")", "\n", "weights", "=", "self", ".", "scaling", "*", "F", ".", "normalize", "(", "weights", ",", "p", "=", "2", ",", "dim", "=", "-", "1", ")", "\n", "\n", "raw_similarities", "=", "distance_lib", ".", "stable_cosine_distance", "(", "features", ",", "weights", ")", "\n", "", "elif", "self", ".", "distance", "==", "\"prelu_neg_stable_cosine_distance\"", ":", "\n", "            ", "features", "=", "self", ".", "scaling", "*", "F", ".", "normalize", "(", "F", ".", "relu", "(", "features", ")", ",", "p", "=", "2", ",", "dim", "=", "-", "1", ")", "\n", "weights", "=", "self", ".", "scaling", "*", "F", ".", "normalize", "(", "weights", ",", "p", "=", "2", ",", "dim", "=", "-", "1", ")", "\n", "\n", "raw_similarities", "=", "-", "distance_lib", ".", "stable_cosine_distance", "(", "features", ",", "weights", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Unknown distance function {}.\"", ".", "format", "(", "self", ".", "distance", ")", ")", "\n", "\n", "", "if", "self", ".", "proxy_per_class", ">", "1", ":", "\n", "            ", "similarities", "=", "self", ".", "_reduce_proxies", "(", "raw_similarities", ")", "\n", "", "else", ":", "\n", "            ", "similarities", "=", "raw_similarities", "\n", "\n", "if", "self", ".", "_negative_weights", "is", "not", "None", "and", "self", ".", "negative_weights_bias", "is", "not", "None", "and", "self", ".", "training", "is", "True", ":", "\n", "                ", "qt", "=", "self", ".", "_negative_weights", ".", "shape", "[", "0", "]", "\n", "if", "isinstance", "(", "self", ".", "negative_weights_bias", ",", "float", ")", ":", "\n", "                    ", "similarities", "[", "...", ",", "-", "qt", ":", "]", "=", "torch", ".", "clamp", "(", "\n", "similarities", "[", "...", ",", "-", "qt", ":", "]", "-", "self", ".", "negative_weights_bias", ",", "min", "=", "0", "\n", ")", "\n", "", "elif", "isinstance", "(", "\n", "self", ".", "negative_weights_bias", ",", "str", "\n", ")", "and", "self", ".", "negative_weights_bias", "==", "\"min\"", ":", "\n", "                    ", "min_simi", "=", "similarities", "[", "...", ",", ":", "-", "qt", "]", ".", "min", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "similarities", "=", "torch", ".", "min", "(", "\n", "similarities", ",", "\n", "torch", ".", "cat", "(", "(", "similarities", "[", "...", ",", ":", "-", "qt", "]", ",", "min_simi", ".", "repeat", "(", "1", ",", "qt", ")", ")", ",", "dim", "=", "1", ")", "\n", ")", "\n", "", "elif", "isinstance", "(", "\n", "self", ".", "negative_weights_bias", ",", "str", "\n", ")", "and", "self", ".", "negative_weights_bias", "==", "\"max\"", ":", "\n", "                    ", "max_simi", "=", "similarities", "[", "...", ",", ":", "-", "qt", "]", ".", "max", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", "-", "1e-6", "\n", "similarities", "=", "torch", ".", "min", "(", "\n", "similarities", ",", "\n", "torch", ".", "cat", "(", "(", "similarities", "[", "...", ",", ":", "-", "qt", "]", ",", "max_simi", ".", "repeat", "(", "1", ",", "qt", ")", ")", ",", "dim", "=", "1", ")", "\n", ")", "\n", "", "elif", "isinstance", "(", "self", ".", "negative_weights_bias", ",", "\n", "str", ")", "and", "self", ".", "negative_weights_bias", ".", "startswith", "(", "\"top_\"", ")", ":", "\n", "                    ", "topk", "=", "int", "(", "self", ".", "negative_weights_bias", ".", "replace", "(", "\"top_\"", ",", "\"\"", ")", ")", "\n", "botk", "=", "min", "(", "qt", "-", "topk", ",", "qt", ")", "\n", "\n", "indexes", "=", "(", "-", "similarities", "[", "...", ",", "-", "qt", ":", "]", ")", ".", "topk", "(", "botk", ",", "dim", "=", "1", ")", "[", "1", "]", "\n", "similarities", "[", "...", ",", "-", "qt", ":", "]", ".", "scatter_", "(", "1", ",", "indexes", ",", "0.", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "NotImplementedError", "(", "f\"Unknown {self.negative_weights_bias}.\"", ")", "\n", "\n", "", "", "", "return", "{", "\"logits\"", ":", "similarities", ",", "\"raw_logits\"", ":", "raw_similarities", "}", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.classifiers.CosineClassifier._reduce_proxies": [[340, 359], ["int.is_integer", "int", "similarities.view().mean", "similarities.view", "torch.nn.functional.softmax", "similarities.view", "similarities.view().max", "ValueError", "similarities.view().min", "similarities.view", "similarities.view"], "methods", ["None"], ["\n", "", "def", "_reduce_proxies", "(", "self", ",", "similarities", ")", ":", "\n", "# shape (batch_size, n_classes * proxy_per_class)", "\n", "        ", "n_classes", "=", "similarities", ".", "shape", "[", "1", "]", "/", "self", ".", "proxy_per_class", "\n", "assert", "n_classes", ".", "is_integer", "(", ")", ",", "(", "similarities", ".", "shape", "[", "1", "]", ",", "self", ".", "proxy_per_class", ")", "\n", "n_classes", "=", "int", "(", "n_classes", ")", "\n", "bs", "=", "similarities", ".", "shape", "[", "0", "]", "\n", "\n", "if", "self", ".", "merging", "==", "\"mean\"", ":", "\n", "            ", "return", "similarities", ".", "view", "(", "bs", ",", "n_classes", ",", "self", ".", "proxy_per_class", ")", ".", "mean", "(", "-", "1", ")", "\n", "", "elif", "self", ".", "merging", "==", "\"softmax\"", ":", "\n", "            ", "simi_per_class", "=", "similarities", ".", "view", "(", "bs", ",", "n_classes", ",", "self", ".", "proxy_per_class", ")", "\n", "attentions", "=", "F", ".", "softmax", "(", "self", ".", "gamma", "*", "simi_per_class", ",", "dim", "=", "-", "1", ")", "# shouldn't be -gamma?", "\n", "return", "(", "simi_per_class", "*", "attentions", ")", ".", "sum", "(", "-", "1", ")", "\n", "", "elif", "self", ".", "merging", "==", "\"max\"", ":", "\n", "            ", "return", "similarities", ".", "view", "(", "bs", ",", "n_classes", ",", "self", ".", "proxy_per_class", ")", ".", "max", "(", "-", "1", ")", "[", "0", "]", "\n", "", "elif", "self", ".", "merging", "==", "\"min\"", ":", "\n", "            ", "return", "similarities", ".", "view", "(", "bs", ",", "n_classes", ",", "self", ".", "proxy_per_class", ")", ".", "min", "(", "-", "1", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Unknown merging for multiple centers: {}.\"", ".", "format", "(", "self", ".", "merging", ")", ")", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.classifiers.CosineClassifier.align_features": [[364, 370], ["classifiers.CosineClassifier.weights.data.norm().mean", "features.data.norm().mean", "classifiers.CosineClassifier.weights.data.norm", "features.data.norm"], "methods", ["None"], ["\n", "", "", "def", "align_features", "(", "self", ",", "features", ")", ":", "\n", "        ", "avg_weights_norm", "=", "self", ".", "weights", ".", "data", ".", "norm", "(", "dim", "=", "1", ")", ".", "mean", "(", ")", "\n", "avg_features_norm", "=", "features", ".", "data", ".", "norm", "(", "dim", "=", "1", ")", ".", "mean", "(", ")", "\n", "\n", "features", ".", "data", "=", "features", ".", "data", "*", "(", "avg_weights_norm", "/", "avg_features_norm", ")", "\n", "return", "features", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.classifiers.CosineClassifier.add_custom_weights": [[371, 387], ["isinstance", "classifiers.CosineClassifier._weights.append", "classifiers.CosineClassifier.to", "torch.nn.Parameter", "classifiers.CosineClassifier.weights.data.norm().mean", "classifiers.CosineClassifier.weights.data.norm().mean", "weights.data.norm().mean", "NotImplementedError", "classifiers.CosineClassifier.weights.data.norm", "classifiers.CosineClassifier.weights.data.norm", "weights.data.norm"], "methods", ["None"], ["\n", "", "def", "add_custom_weights", "(", "self", ",", "weights", ",", "ponderate", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "isinstance", "(", "ponderate", ",", "str", ")", ":", "\n", "            ", "if", "ponderate", "==", "\"weights_imprinting\"", ":", "\n", "                ", "avg_weights_norm", "=", "self", ".", "weights", ".", "data", ".", "norm", "(", "dim", "=", "1", ")", ".", "mean", "(", ")", "\n", "weights", "=", "weights", "*", "avg_weights_norm", "\n", "", "elif", "ponderate", "==", "\"align_weights\"", ":", "\n", "                ", "avg_weights_norm", "=", "self", ".", "weights", ".", "data", ".", "norm", "(", "dim", "=", "1", ")", ".", "mean", "(", ")", "\n", "avg_new_weights_norm", "=", "weights", ".", "data", ".", "norm", "(", "dim", "=", "1", ")", ".", "mean", "(", ")", "\n", "\n", "ratio", "=", "avg_weights_norm", "/", "avg_new_weights_norm", "\n", "weights", "=", "weights", "*", "ratio", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "(", "f\"Unknown ponderation type {ponderate}.\"", ")", "\n", "\n", "", "", "self", ".", "_weights", ".", "append", "(", "nn", ".", "Parameter", "(", "weights", ")", ")", "\n", "self", ".", "to", "(", "self", ".", "device", ")", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.classifiers.CosineClassifier.align_weights": [[388, 405], ["len", "torch.no_grad", "torch.cat", "torch.mean", "torch.mean", "torch.nn.Parameter", "torch.cat.norm", "classifiers.CosineClassifier.new_weights.norm"], "methods", ["None"], ["\n", "", "def", "align_weights", "(", "self", ")", ":", "\n", "        ", "\"\"\"Align new weights based on old weights norm.\n\n        # Reference:\n            * Maintaining Discrimination and Fairness in Class Incremental Learning\n              Zhao et al. 2019\n        \"\"\"", "\n", "if", "len", "(", "self", ".", "_weights", ")", "==", "1", ":", "\n", "            ", "return", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "old_weights", "=", "torch", ".", "cat", "(", "[", "w", "for", "w", "in", "self", ".", "old_weights", "]", ")", "\n", "\n", "old_norm", "=", "torch", ".", "mean", "(", "old_weights", ".", "norm", "(", "dim", "=", "1", ")", ")", "\n", "new_norm", "=", "torch", ".", "mean", "(", "self", ".", "new_weights", ".", "norm", "(", "dim", "=", "1", ")", ")", "\n", "\n", "self", ".", "_weights", "[", "-", "1", "]", "=", "nn", ".", "Parameter", "(", "(", "old_norm", "/", "new_norm", ")", "*", "self", ".", "_weights", "[", "-", "1", "]", ")", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.classifiers.CosineClassifier.align_weights_i_to_j": [[406, 414], ["torch.no_grad", "torch.mean", "torch.mean", "torch.nn.Parameter", "base_weights.norm", "classifiers.CosineClassifier.weights[].norm"], "methods", ["None"], ["\n", "", "", "def", "align_weights_i_to_j", "(", "self", ",", "indexes_i", ",", "indexes_j", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "base_weights", "=", "self", ".", "weights", "[", "indexes_i", "]", "\n", "\n", "old_norm", "=", "torch", ".", "mean", "(", "base_weights", ".", "norm", "(", "dim", "=", "1", ")", ")", "\n", "new_norm", "=", "torch", ".", "mean", "(", "self", ".", "weights", "[", "indexes_j", "]", ".", "norm", "(", "dim", "=", "1", ")", ")", "\n", "\n", "self", ".", "weights", "[", "indexes_j", "]", "=", "nn", ".", "Parameter", "(", "(", "old_norm", "/", "new_norm", ")", "*", "self", ".", "weights", "[", "indexes_j", "]", ")", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.classifiers.CosineClassifier.align_inv_weights": [[415, 429], ["torch.no_grad", "torch.cat", "torch.mean", "torch.mean", "torch.nn.Parameter", "torch.cat.norm", "classifiers.CosineClassifier.new_weights.norm"], "methods", ["None"], ["\n", "", "", "def", "align_inv_weights", "(", "self", ")", ":", "\n", "        ", "\"\"\"Align new weights based on old weights norm.\n\n        # Reference:\n            * Maintaining Discrimination and Fairness in Class Incremental Learning\n              Zhao et al. 2019\n        \"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "old_weights", "=", "torch", ".", "cat", "(", "[", "w", "for", "w", "in", "self", ".", "old_weights", "]", ")", "\n", "\n", "old_norm", "=", "torch", ".", "mean", "(", "old_weights", ".", "norm", "(", "dim", "=", "1", ")", ")", "\n", "new_norm", "=", "torch", ".", "mean", "(", "self", ".", "new_weights", ".", "norm", "(", "dim", "=", "1", ")", ")", "\n", "\n", "self", ".", "_weights", "[", "-", "1", "]", "=", "nn", ".", "Parameter", "(", "(", "new_norm", "/", "old_norm", ")", "*", "self", ".", "_weights", "[", "-", "1", "]", ")", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.classifiers.CosineClassifier.weights": [[430, 433], ["torch.cat"], "methods", ["None"], ["\n", "", "", "@", "property", "\n", "def", "weights", "(", "self", ")", ":", "\n", "        ", "return", "torch", ".", "cat", "(", "[", "clf", "for", "clf", "in", "self", ".", "_weights", "]", ")", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.classifiers.CosineClassifier.new_weights": [[434, 437], ["None"], "methods", ["None"], ["\n", "", "@", "property", "\n", "def", "new_weights", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_weights", "[", "-", "1", "]", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.classifiers.CosineClassifier.old_weights": [[438, 443], ["len"], "methods", ["None"], ["\n", "", "@", "property", "\n", "def", "old_weights", "(", "self", ")", ":", "\n", "        ", "if", "len", "(", "self", ".", "_weights", ")", ">", "1", ":", "\n", "            ", "return", "self", ".", "_weights", "[", ":", "-", "1", "]", "\n", "", "return", "None", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.classifiers.CosineClassifier.add_classes": [[444, 453], ["torch.nn.Parameter", "torch.nn.init.kaiming_normal_", "classifiers.CosineClassifier._weights.append", "classifiers.CosineClassifier.to", "torch.zeros"], "methods", ["None"], ["\n", "", "def", "add_classes", "(", "self", ",", "n_classes", ")", ":", "\n", "        ", "new_weights", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "self", ".", "proxy_per_class", "*", "n_classes", ",", "self", ".", "features_dim", ")", ")", "\n", "nn", ".", "init", ".", "kaiming_normal_", "(", "new_weights", ",", "nonlinearity", "=", "\"linear\"", ")", "\n", "\n", "self", ".", "_weights", ".", "append", "(", "new_weights", ")", "\n", "\n", "self", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "n_classes", "+=", "n_classes", "\n", "return", "self", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.classifiers.CosineClassifier.add_imprinted_classes": [[454, 498], ["classifiers.CosineClassifier.weights.data.norm", "torch.mean().cpu", "torch.stack", "classifiers.CosineClassifier._weights.append", "classifiers.CosineClassifier.to", "len", "inclearn.utils.LOGGER.LOGGER.info", "inc_dataset.get_custom_loader", "utils.extract_features", "torch.nn.functional.normalize", "torch.mean", "torch.nn.functional.normalize", "torch.nn.Parameter", "torch.mean", "torch.from_numpy", "torch.stack.append", "torch.std", "range", "torch.stack.append", "sklearn.cluster.KMeans", "sklearn.cluster.KMeans.fit", "ValueError", "torch.nn.functional.normalize.numpy", "torch.stack.append", "torch.normal", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.data.incdataset.IncrementalDataset.get_custom_loader", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.utils.extract_features"], ["\n", "", "def", "add_imprinted_classes", "(", "\n", "self", ",", "class_indexes", ",", "inc_dataset", ",", "network", ",", "multi_class_diff", "=", "\"normal\"", ",", "type", "=", "None", "\n", ")", ":", "\n", "        ", "if", "self", ".", "proxy_per_class", ">", "1", ":", "\n", "            ", "logger", ".", "LOGGER", ".", "info", "(", "\"Multi class diff {}.\"", ".", "format", "(", "multi_class_diff", ")", ")", "\n", "\n", "", "weights_norm", "=", "self", ".", "weights", ".", "data", ".", "norm", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "avg_weights_norm", "=", "torch", ".", "mean", "(", "weights_norm", ",", "dim", "=", "0", ")", ".", "cpu", "(", ")", "\n", "\n", "new_weights", "=", "[", "]", "\n", "for", "class_index", "in", "class_indexes", ":", "\n", "            ", "_", ",", "loader", "=", "inc_dataset", ".", "get_custom_loader", "(", "[", "class_index", "]", ")", "\n", "features", ",", "_", "=", "utils", ".", "extract_features", "(", "network", ",", "loader", ")", "\n", "\n", "features_normalized", "=", "F", ".", "normalize", "(", "torch", ".", "from_numpy", "(", "features", ")", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "class_embeddings", "=", "torch", ".", "mean", "(", "features_normalized", ",", "dim", "=", "0", ")", "\n", "class_embeddings", "=", "F", ".", "normalize", "(", "class_embeddings", ",", "dim", "=", "0", ",", "p", "=", "2", ")", "\n", "\n", "if", "self", ".", "proxy_per_class", "==", "1", ":", "\n", "                ", "new_weights", ".", "append", "(", "class_embeddings", "*", "avg_weights_norm", ")", "\n", "", "else", ":", "\n", "                ", "if", "multi_class_diff", "==", "\"normal\"", ":", "\n", "                    ", "std", "=", "torch", ".", "std", "(", "features_normalized", ",", "dim", "=", "0", ")", "\n", "for", "_", "in", "range", "(", "self", ".", "proxy_per_class", ")", ":", "\n", "                        ", "new_weights", ".", "append", "(", "torch", ".", "normal", "(", "class_embeddings", ",", "std", ")", "*", "avg_weights_norm", ")", "\n", "", "", "elif", "multi_class_diff", "==", "\"kmeans\"", ":", "\n", "                    ", "clusterizer", "=", "KMeans", "(", "n_clusters", "=", "self", ".", "proxy_per_class", ")", "\n", "clusterizer", ".", "fit", "(", "features_normalized", ".", "numpy", "(", ")", ")", "\n", "\n", "for", "center", "in", "clusterizer", ".", "cluster_centers_", ":", "\n", "                        ", "new_weights", ".", "append", "(", "torch", ".", "tensor", "(", "center", ")", "*", "avg_weights_norm", ")", "\n", "", "", "else", ":", "\n", "                    ", "raise", "ValueError", "(", "\n", "\"Unknown multi class differentiation for imprinted weights: {}.\"", ".", "\n", "format", "(", "multi_class_diff", ")", "\n", ")", "\n", "\n", "", "", "", "new_weights", "=", "torch", ".", "stack", "(", "new_weights", ")", "\n", "self", ".", "_weights", ".", "append", "(", "nn", ".", "Parameter", "(", "new_weights", ")", ")", "\n", "\n", "self", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "n_classes", "+=", "len", "(", "class_indexes", ")", "\n", "\n", "return", "self", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.classifiers.CosineClassifier.set_negative_weights": [[499, 531], ["inclearn.utils.LOGGER.LOGGER.info", "isinstance", "torch.nn.Parameter", "classifiers.CosineClassifier.weights.data.norm().mean", "classifiers.CosineClassifier.weights.data.norm().mean", "negative_weights.data.norm().mean", "classifiers.CosineClassifier.weights.data.norm", "classifiers.CosineClassifier.weights.data.norm().mean", "negative_weights.data.norm().mean", "NotImplementedError", "classifiers.CosineClassifier.weights.data.norm", "negative_weights.data.norm", "classifiers.CosineClassifier.weights.data.norm", "negative_weights.data.norm"], "methods", ["None"], ["\n", "", "def", "set_negative_weights", "(", "self", ",", "negative_weights", ",", "ponderate", "=", "False", ")", ":", "\n", "        ", "\"\"\"Add weights that are used like the usual weights, but aren't actually\n        parameters.\n\n        :param negative_weights: Tensor of shape (n_classes * nb_proxy, features_dim)\n        :param ponderate: Reponderate the negative weights by the existing weights norm, as done by\n                          \"Weights Imprinting\".\n        \"\"\"", "\n", "logger", ".", "LOGGER", ".", "info", "(", "\"Add negative weights.\"", ")", "\n", "if", "isinstance", "(", "ponderate", ",", "str", ")", ":", "\n", "            ", "if", "ponderate", "==", "\"weights_imprinting\"", ":", "\n", "                ", "avg_weights_norm", "=", "self", ".", "weights", ".", "data", ".", "norm", "(", "dim", "=", "1", ")", ".", "mean", "(", ")", "\n", "negative_weights", "=", "negative_weights", "*", "avg_weights_norm", "\n", "", "elif", "ponderate", "==", "\"align_weights\"", ":", "\n", "                ", "avg_weights_norm", "=", "self", ".", "weights", ".", "data", ".", "norm", "(", "dim", "=", "1", ")", ".", "mean", "(", ")", "\n", "avg_negative_weights_norm", "=", "negative_weights", ".", "data", ".", "norm", "(", "dim", "=", "1", ")", ".", "mean", "(", ")", "\n", "\n", "ratio", "=", "avg_weights_norm", "/", "avg_negative_weights_norm", "\n", "negative_weights", "=", "negative_weights", "*", "ratio", "\n", "", "elif", "ponderate", "==", "\"inv_align_weights\"", ":", "\n", "                ", "avg_weights_norm", "=", "self", ".", "weights", ".", "data", ".", "norm", "(", "dim", "=", "1", ")", ".", "mean", "(", ")", "\n", "avg_negative_weights_norm", "=", "negative_weights", ".", "data", ".", "norm", "(", "dim", "=", "1", ")", ".", "mean", "(", ")", "\n", "\n", "ratio", "=", "avg_negative_weights_norm", "/", "avg_weights_norm", "\n", "negative_weights", "=", "negative_weights", "*", "ratio", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "(", "f\"Unknown ponderation type {ponderate}.\"", ")", "\n", "\n", "", "", "if", "self", ".", "train_negative_weights", ":", "\n", "            ", "self", ".", "_negative_weights", "=", "nn", ".", "Parameter", "(", "negative_weights", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_negative_weights", "=", "negative_weights", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.classifiers.MCCosineClassifier.__init__": [[536, 541], ["classifiers.CosineClassifier.__init__"], "methods", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.tools.conv_mtl.Conv2dMtl.__init__"], ["\n", "def", "__init__", "(", "self", ",", "*", "args", ",", "dropout", "=", "0.2", ",", "nb_samples", "=", "10", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "_dropout", "=", "dropout", "\n", "self", ".", "nb_samples", "=", "nb_samples", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.classifiers.MCCosineClassifier.forward": [[542, 555], ["torch.zeros().to().float", "range", "classifiers.CosineClassifier.forward", "torch.zeros().to().float.mean", "classifiers.MCCosineClassifier.var_ratio", "torch.nn.functional.dropout", "torch.zeros().to", "classifiers.CosineClassifier.forward", "torch.nn.functional.dropout", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.convnet.my_resnet.CifarResNet.forward", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.classifiers.MCCosineClassifier.var_ratio", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.convnet.my_resnet.CifarResNet.forward"], ["\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "training", ":", "\n", "            ", "return", "super", "(", ")", ".", "forward", "(", "F", ".", "dropout", "(", "x", ",", "p", "=", "self", ".", "_dropout", ")", ")", "\n", "\n", "", "sampled_similarities", "=", "torch", ".", "zeros", "(", "x", ".", "shape", "[", "0", "]", ",", "self", ".", "nb_samples", ",", "\n", "self", ".", "n_classes", ")", ".", "to", "(", "x", ".", "device", ")", ".", "float", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "nb_samples", ")", ":", "\n", "            ", "similarities", "=", "super", "(", ")", ".", "forward", "(", "F", ".", "dropout", "(", "x", ",", "p", "=", "self", ".", "_dropout", ")", ")", "[", "\"logits\"", "]", "\n", "sampled_similarities", "[", ":", ",", "i", "]", "=", "similarities", "\n", "\n", "", "return", "{", "\n", "\"logits\"", ":", "sampled_similarities", ".", "mean", "(", "dim", "=", "1", ")", ",", "\n", "\"var_ratio\"", ":", "self", ".", "var_ratio", "(", "sampled_similarities", ")", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.classifiers.MCCosineClassifier.var_ratio": [[557, 568], ["[].cpu().numpy", "numpy.array", "[].cpu", "numpy.array.max", "numpy.histogram", "range", "sampled_similarities.max"], "methods", ["None"], ["\n", "", "def", "var_ratio", "(", "self", ",", "sampled_similarities", ")", ":", "\n", "        ", "predicted_class", "=", "sampled_similarities", ".", "max", "(", "dim", "=", "2", ")", "[", "1", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "hist", "=", "np", ".", "array", "(", "\n", "[", "\n", "np", ".", "histogram", "(", "predicted_class", "[", "i", ",", ":", "]", ",", "range", "=", "(", "0", ",", "10", ")", ")", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "predicted_class", ".", "shape", "[", "0", "]", ")", "\n", "]", "\n", ")", "\n", "\n", "return", "1.", "-", "hist", ".", "max", "(", "axis", "=", "1", ")", "/", "self", ".", "nb_samples", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.classifiers.CosineM2KDClassifier.__init__": [[572, 577], ["classifiers.CosineClassifier.__init__", "torch.nn.ParameterList"], "methods", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.tools.conv_mtl.Conv2dMtl.__init__"], ["\n", "    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "_auxilliary_weights", "=", "nn", ".", "ParameterList", "(", "[", "]", ")", "\n", "self", ".", "auxilliary_features_dim", "=", "64", "*", "8", "*", "8", "# Hard coded penultimate residual block", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.classifiers.CosineM2KDClassifier.add_imprinted_classes": [[579, 582], ["classifiers.CosineClassifier.add_imprinted_classes", "classifiers.CosineM2KDClassifier.add_classes_to_auxilliary", "len"], "methods", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.classifiers.CosineM2KDClassifier.add_imprinted_classes", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.classifiers.CosineM2KDClassifier.add_classes_to_auxilliary"], ["\n", "", "def", "add_imprinted_classes", "(", "self", ",", "class_indexes", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "add_imprinted_classes", "(", "class_indexes", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "add_classes_to_auxilliary", "(", "len", "(", "class_indexes", ")", ")", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.classifiers.CosineM2KDClassifier.add_classes_to_auxilliary": [[583, 591], ["torch.nn.Parameter", "torch.nn.init.kaiming_normal_", "classifiers.CosineM2KDClassifier._auxilliary_weights.append", "classifiers.CosineM2KDClassifier.to", "torch.zeros"], "methods", ["None"], ["\n", "", "def", "add_classes_to_auxilliary", "(", "self", ",", "n_classes", ")", ":", "\n", "        ", "new_weights", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "n_classes", ",", "self", ".", "auxilliary_features_dim", ")", ")", "\n", "nn", ".", "init", ".", "kaiming_normal_", "(", "new_weights", ",", "nonlinearity", "=", "\"linear\"", ")", "\n", "\n", "self", ".", "_auxilliary_weights", ".", "append", "(", "new_weights", ")", "\n", "\n", "self", ".", "to", "(", "self", ".", "device", ")", "\n", "return", "self", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.classifiers.CosineM2KDClassifier.auxilliary_weights": [[592, 595], ["torch.cat"], "methods", ["None"], ["\n", "", "@", "property", "\n", "def", "auxilliary_weights", "(", "self", ")", ":", "\n", "        ", "return", "torch", ".", "cat", "(", "[", "clf", "for", "clf", "in", "self", ".", "_weights", "]", ")", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.classifiers.CosineM2KDClassifier.new_weights": [[596, 599], ["torch.cat"], "methods", ["None"], ["\n", "", "@", "property", "\n", "def", "new_weights", "(", "self", ")", ":", "\n", "        ", "return", "torch", ".", "cat", "(", "[", "self", ".", "_weights", "[", "-", "1", "]", ",", "self", ".", "_auxilliary_weights", "[", "-", "1", "]", "]", ")", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.classifiers.CosineM2KDClassifier.old_weights": [[600, 605], ["len", "torch.cat"], "methods", ["None"], ["\n", "", "@", "property", "\n", "def", "old_weights", "(", "self", ")", ":", "\n", "        ", "if", "len", "(", "self", ".", "_weights", ")", ">", "1", ":", "\n", "            ", "return", "torch", ".", "cat", "(", "[", "self", ".", "_weights", "[", ":", "-", "1", "]", ",", "self", ".", "_auxilliary_weights", "[", ":", "-", "1", "]", "]", ")", "\n", "", "return", "None", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.classifiers.DomainClassifier.__init__": [[609, 619], ["torch.nn.Module.__init__", "torch.nn.Linear", "classifiers.DomainClassifier.to"], "methods", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.tools.conv_mtl.Conv2dMtl.__init__"], ["\n", "    ", "def", "__init__", "(", "self", ",", "features_dim", ",", "device", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "features_dim", "=", "features_dim", "\n", "self", ".", "device", "=", "device", "\n", "\n", "self", ".", "gradreverse", "=", "GradReverse", ".", "apply", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "features_dim", ",", "1", ")", "\n", "\n", "self", ".", "to", "(", "device", ")", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.classifiers.DomainClassifier.forward": [[620, 622], ["classifiers.DomainClassifier.linear", "classifiers.DomainClassifier.gradreverse"], "methods", ["None"], ["\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "linear", "(", "self", ".", "gradreverse", "(", "x", ")", ")", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.classifiers.GradReverse.forward": [[626, 629], ["x.view_as"], "methods", ["None"], ["\n", "    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "x", ")", ":", "\n", "        ", "return", "x", ".", "view_as", "(", "x", ")", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.classifiers.GradReverse.backward": [[630, 633], ["grad_output.neg"], "methods", ["None"], ["\n", "", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "return", "grad_output", ".", "neg", "(", ")", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.classifiers.BinaryCosineClassifier.__init__": [[637, 641], ["torch.nn.Module.__init__", "torch.nn.Parameter", "torch.nn.init.kaiming_normal_", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.tools.conv_mtl.Conv2dMtl.__init__"], ["\n", "    ", "def", "__init__", "(", "self", ",", "features_dim", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "1", ",", "features_dim", ")", ")", "\n", "nn", ".", "init", ".", "kaiming_normal_", "(", "self", ".", "weight", ",", "nonlinearity", "=", "\"linear\"", ")", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.classifiers.BinaryCosineClassifier.forward": [[642, 647], ["torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.mm"], "methods", ["None"], ["\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "F", ".", "normalize", "(", "x", ",", "dim", "=", "1", ",", "p", "=", "2", ")", "\n", "w", "=", "F", ".", "normalize", "(", "self", ".", "weight", ",", "dim", "=", "1", ",", "p", "=", "2", ")", "\n", "\n", "return", "{", "\"logits\"", ":", "torch", ".", "mm", "(", "x", ",", "w", ".", "T", ")", "}", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.__init__": [[8, 15], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "device", ",", "momentum", "=", "0.5", ")", ":", "\n", "        ", "self", ".", "features", "=", "None", "\n", "self", ".", "targets", "=", "None", "\n", "\n", "self", ".", "momentum", "=", "momentum", "\n", "\n", "self", ".", "device", "=", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.add": [[16, 23], ["torch.cat", "torch.cat", "features.to", "targets.to"], "methods", ["None"], ["", "def", "add", "(", "self", ",", "features", ",", "targets", ")", ":", "\n", "        ", "if", "self", ".", "features", "is", "None", ":", "\n", "            ", "self", ".", "features", "=", "features", "\n", "self", ".", "targets", "=", "targets", "\n", "", "else", ":", "\n", "            ", "self", ".", "features", "=", "torch", ".", "cat", "(", "(", "self", ".", "features", ",", "features", ".", "to", "(", "self", ".", "device", ")", ")", ",", "dim", "=", "0", ")", "\n", "self", ".", "targets", "=", "torch", ".", "cat", "(", "(", "self", ".", "targets", ",", "targets", ".", "to", "(", "self", ".", "device", ")", ")", ",", "dim", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.get": [[24, 26], ["None"], "methods", ["None"], ["", "", "def", "get", "(", "self", ",", "indexes", ")", ":", "\n", "        ", "return", "self", ".", "features", "[", "indexes", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.get_neg": [[27, 34], ["torch.ones().bool", "min", "torch.multinomial", "torch.ones", "torch.ones", "len", "len", "len"], "methods", ["None"], ["", "def", "get_neg", "(", "self", ",", "indexes", ",", "n", "=", "10", ")", ":", "\n", "        ", "neg_indexes", "=", "torch", ".", "ones", "(", "len", "(", "self", ".", "features", ")", ")", ".", "bool", "(", ")", "\n", "neg_indexes", "[", "indexes", "]", "=", "False", "\n", "nb", "=", "min", "(", "n", ",", "len", "(", "self", ".", "features", ")", "-", "len", "(", "indexes", ")", ")", "\n", "rnd_indexes", "=", "torch", ".", "multinomial", "(", "torch", ".", "ones", "(", "nb", ")", ",", "nb", ")", "\n", "\n", "return", "self", ".", "features", "[", "neg_indexes", "]", "[", "rnd_indexes", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.update": [[35, 38], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "features", ",", "indexes", ")", ":", "\n", "        ", "self", ".", "features", "[", "indexes", "]", "=", "self", ".", "momentum", "*", "self", ".", "features", "[", "indexes", "]", "+", "(", "1", "-", "self", ".", "momentum", "*", "features", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.data.samplers.MemoryOverSampler.__init__": [[10, 13], ["samplers.MemoryOverSampler._oversample"], "methods", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.data.samplers.MemoryOverSampler._oversample"], ["\n", "    ", "def", "__init__", "(", "self", ",", "y", ",", "memory_flags", ",", "batch_size", "=", "128", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "indexes", "=", "self", ".", "_oversample", "(", "y", ",", "memory_flags", ")", "\n", "self", ".", "batch_size", "=", "batch_size", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.data.samplers.MemoryOverSampler.__len__": [[14, 16], ["len"], "methods", ["None"], ["\n", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "indexes", ")", "//", "self", ".", "batch_size", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.data.samplers.MemoryOverSampler.__iter__": [[17, 25], ["numpy.random.shuffle", "range", "len", "samplers.MemoryOverSampler.indexes[].tolist"], "methods", ["None"], ["\n", "", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "np", ".", "random", ".", "shuffle", "(", "self", ".", "indexes", ")", "\n", "\n", "for", "batch_index", "in", "range", "(", "len", "(", "self", ")", ")", ":", "\n", "            ", "low_index", "=", "batch_index", "*", "self", ".", "batch_size", "\n", "high_index", "=", "(", "batch_index", "+", "1", ")", "*", "self", ".", "batch_size", "\n", "\n", "yield", "self", ".", "indexes", "[", "low_index", ":", "high_index", "]", ".", "tolist", "(", ")", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.data.samplers.MemoryOverSampler._oversample": [[26, 44], ["samplers.MemoryOverSampler._mean_quantity", "samplers.MemoryOverSampler._mean_quantity", "numpy.unique", "numpy.concatenate", "numpy.where", "numpy.where", "numpy.concatenate.append", "numpy.where", "numpy.repeat", "numpy.where"], "methods", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.data.samplers.MemoryOverSampler._mean_quantity", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.data.samplers.MemoryOverSampler._mean_quantity"], ["\n", "", "", "def", "_oversample", "(", "self", ",", "y", ",", "memory_flags", ")", ":", "\n", "        ", "old_indexes", "=", "np", ".", "where", "(", "memory_flags", "==", "1.", ")", "[", "0", "]", "\n", "new_indexes", "=", "np", ".", "where", "(", "memory_flags", "==", "0.", ")", "[", "0", "]", "\n", "\n", "old", ",", "new", "=", "y", "[", "old_indexes", "]", ",", "y", "[", "new_indexes", "]", "\n", "\n", "old_qt", "=", "self", ".", "_mean_quantity", "(", "old", ")", "\n", "new_qt", "=", "self", ".", "_mean_quantity", "(", "new", ")", "\n", "\n", "assert", "new_qt", ">", "old_qt", ",", "(", "new_qt", ",", "old_qt", ")", "\n", "factor", "=", "new_qt", "/", "old_qt", "\n", "\n", "indexes", "=", "[", "np", ".", "where", "(", "memory_flags", "==", "0", ")", "[", "0", "]", "]", "\n", "for", "class_id", "in", "np", ".", "unique", "(", "y", ")", ":", "\n", "            ", "indexes", ".", "append", "(", "np", ".", "repeat", "(", "np", ".", "where", "(", "old", "==", "class_id", ")", "[", "0", "]", ",", "factor", ")", ")", "\n", "\n", "", "indexes", "=", "np", ".", "concatenate", "(", "indexes", ")", "\n", "return", "indexes", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.data.samplers.MemoryOverSampler._mean_quantity": [[45, 48], ["numpy.mean", "numpy.bincount"], "methods", ["None"], ["\n", "", "@", "staticmethod", "\n", "def", "_mean_quantity", "(", "y", ")", ":", "\n", "        ", "return", "np", ".", "mean", "(", "np", ".", "bincount", "(", "y", ")", ")", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.data.samplers.MultiSampler.__init__": [[54, 58], ["None"], "methods", ["None"], ["\n", "def", "__init__", "(", "self", ",", "nb_samples", ",", "batch_size", ",", "factor", "=", "1", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "nb_samples", "=", "nb_samples", "\n", "self", ".", "factor", "=", "factor", "\n", "self", ".", "batch_size", "=", "batch_size", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.data.samplers.MultiSampler.__len__": [[59, 61], ["len"], "methods", ["None"], ["\n", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "y", ")", "/", "self", ".", "batch_size", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.data.samplers.MultiSampler.__iter__": [[62, 64], ["None"], "methods", ["None"], ["\n", "", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "pass", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.data.samplers.TripletCKSampler.__init__": [[78, 88], ["numpy.unique", "len", "numpy.unique", "numpy.where"], "methods", ["None"], ["\n", "def", "__init__", "(", "self", ",", "y", ",", "nb_per_class", "=", "4", ",", "nb_classes", "=", "20", ")", ":", "\n", "        ", "assert", "len", "(", "np", ".", "unique", "(", "y", ")", ")", ">=", "nb_classes", "\n", "\n", "self", ".", "y", "=", "y", "\n", "self", ".", "nb_per_class", "=", "nb_per_class", "\n", "self", ".", "nb_classes", "=", "nb_classes", "\n", "\n", "self", ".", "_classes", "=", "np", ".", "unique", "(", "y", ")", "\n", "self", ".", "_class_to_indexes", "=", "{", "\n", "class_idx", ":", "np", ".", "where", "(", "y", "==", "class_idx", ")", "[", "0", "]", "for", "class_idx", "in", "self", ".", "_classes", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.data.samplers.TripletCKSampler.__len__": [[90, 92], ["len"], "methods", ["None"], ["\n", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "y", ")", "//", "(", "self", ".", "nb_per_class", "*", "self", ".", "nb_classes", ")", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.data.samplers.TripletCKSampler.__iter__": [[93, 108], ["range", "len", "numpy.random.choice", "numpy.random.choice", "indexes.extend", "numpy.random.choice.tolist", "bool", "len"], "methods", ["None"], ["\n", "", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "for", "_", "in", "range", "(", "len", "(", "self", ")", ")", ":", "\n", "            ", "indexes", "=", "[", "]", "\n", "\n", "classes", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "_classes", ",", "size", "=", "self", ".", "nb_classes", ",", "replace", "=", "False", ")", "\n", "for", "class_id", "in", "classes", ":", "\n", "                ", "class_indexes", "=", "np", ".", "random", ".", "choice", "(", "\n", "self", ".", "_class_to_indexes", "[", "class_id", "]", ",", "\n", "size", "=", "self", ".", "nb_per_class", ",", "\n", "replace", "=", "bool", "(", "len", "(", "self", ".", "_class_to_indexes", "[", "class_id", "]", ")", "<", "self", ".", "nb_per_class", ")", "\n", ")", "\n", "\n", "indexes", ".", "extend", "(", "class_indexes", ".", "tolist", "(", ")", ")", "\n", "\n", "", "yield", "indexes", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.data.samplers.TripletSampler.__init__": [[120, 130], ["print", "set", "numpy.arange", "numpy.unique().tolist", "len", "numpy.where", "numpy.unique"], "methods", ["None"], ["\n", "def", "__init__", "(", "self", ",", "y", ",", "batch_size", "=", "128", ")", ":", "\n", "        ", "self", ".", "y", "=", "y", "\n", "self", ".", "batch_size", "=", "(", "batch_size", "//", "3", ")", "\n", "print", "(", "\"Triplet Sampler has a batch size of {}.\"", ".", "format", "(", "3", "*", "self", ".", "batch_size", ")", ")", "\n", "\n", "self", ".", "_classes", "=", "set", "(", "np", ".", "unique", "(", "y", ")", ".", "tolist", "(", ")", ")", "\n", "self", ".", "_class_to_indexes", "=", "{", "\n", "class_idx", ":", "np", ".", "where", "(", "y", "==", "class_idx", ")", "[", "0", "]", "for", "class_idx", "in", "self", ".", "_classes", "\n", "}", "\n", "self", ".", "_indexes", "=", "np", ".", "arange", "(", "len", "(", "y", ")", ")", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.data.samplers.TripletSampler.__len__": [[131, 133], ["len"], "methods", ["None"], ["\n", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "y", ")", "//", "self", ".", "batch_size", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.data.samplers.TripletSampler.__iter__": [[134, 156], ["samplers.TripletSampler._random_permut", "range", "len", "range", "numpy.random.choice", "numpy.random.choice", "indexes.append", "indexes.append", "indexes.append", "numpy.random.choice", "list", "set"], "methods", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.data.samplers.TripletSampler._random_permut"], ["\n", "", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "self", ".", "_random_permut", "(", ")", "\n", "\n", "for", "batch_index", "in", "range", "(", "len", "(", "self", ")", ")", ":", "\n", "            ", "indexes", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "batch_size", ")", ":", "\n", "                ", "anchor_index", "=", "self", ".", "_indexes", "[", "batch_index", "*", "i", "]", "\n", "anchor_class", "=", "self", ".", "y", "[", "batch_index", "*", "i", "]", "\n", "\n", "pos_index", "=", "anchor_index", "\n", "while", "pos_index", "==", "anchor_index", ":", "\n", "                    ", "pos_index", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "_class_to_indexes", "[", "anchor_class", "]", ")", "\n", "\n", "", "neg_class", "=", "np", ".", "random", ".", "choice", "(", "list", "(", "self", ".", "_classes", "-", "set", "(", "[", "anchor_class", "]", ")", ")", ")", "\n", "neg_index", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "_class_to_indexes", "[", "neg_class", "]", ")", "\n", "\n", "indexes", ".", "append", "(", "anchor_index", ")", "\n", "indexes", ".", "append", "(", "pos_index", ")", "\n", "indexes", ".", "append", "(", "neg_index", ")", "\n", "\n", "", "yield", "indexes", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.data.samplers.TripletSampler._random_permut": [[157, 161], ["numpy.random.permutation", "len"], "methods", ["None"], ["\n", "", "", "def", "_random_permut", "(", "self", ")", ":", "\n", "        ", "shuffled_indexes", "=", "np", ".", "random", ".", "permutation", "(", "len", "(", "self", ".", "y", ")", ")", "\n", "self", ".", "y", "=", "self", ".", "y", "[", "shuffled_indexes", "]", "\n", "self", ".", "_indexes", "=", "self", ".", "_indexes", "[", "shuffled_indexes", "]", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.data.samplers.NPairSampler.__init__": [[165, 180], ["numpy.sort", "numpy.unique", "numpy.bincount", "numpy.bincount().sum", "numpy.where", "numpy.bincount"], "methods", ["None"], ["\n", "    ", "def", "__init__", "(", "self", ",", "y", ",", "n_classes", "=", "10", ",", "n_samples", "=", "2", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "y", "=", "y", "\n", "self", ".", "n_classes", "=", "n_classes", "\n", "self", ".", "n_samples", "=", "n_samples", "\n", "\n", "self", ".", "_classes", "=", "np", ".", "sort", "(", "np", ".", "unique", "(", "y", ")", ")", "\n", "self", ".", "_distribution", "=", "np", ".", "bincount", "(", "y", ")", "/", "np", ".", "bincount", "(", "y", ")", ".", "sum", "(", ")", "\n", "self", ".", "_distribution", "=", "self", ".", "_distribution", "[", "self", ".", "_distribution", ">", "0", "]", "\n", "self", ".", "_batch_size", "=", "self", ".", "n_samples", "*", "self", ".", "n_classes", "\n", "\n", "self", ".", "_class_to_indexes", "=", "{", "\n", "class_index", ":", "np", ".", "where", "(", "y", "==", "class_index", ")", "[", "0", "]", "for", "class_index", "in", "self", ".", "_classes", "\n", "}", "\n", "\n", "self", ".", "_class_counter", "=", "{", "class_index", ":", "0", "for", "class_index", "in", "self", ".", "_classes", "}", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.data.samplers.NPairSampler.re_generate": [[195, 207], ["samplers.NPairSampler._class_to_indexes.values", "numpy.random.shuffle", "len", "numpy.random.choice", "samplers.NPairSampler.classes_per_batch.append"], "methods", ["None"], ["", "", "def", "re_generate", "(", "self", ")", ":", "\n", "        ", "self", ".", "classes_per_batch", "=", "[", "]", "\n", "for", "indexes", "in", "self", ".", "_class_to_indexes", ".", "values", "(", ")", ":", "\n", "            ", "np", ".", "random", ".", "shuffle", "(", "indexes", ")", "\n", "", "count", "=", "0", "\n", "\n", "while", "count", "+", "self", ".", "_batch_size", "<", "len", "(", "self", ".", "y", ")", ":", "\n", "            ", "classes", "=", "np", ".", "random", ".", "choice", "(", "\n", "self", ".", "_classes", ",", "self", ".", "n_classes", ",", "replace", "=", "False", ",", "p", "=", "self", ".", "_distribution", "\n", ")", "\n", "self", ".", "classes_per_batch", ".", "append", "(", "classes", ")", "\n", "count", "+=", "self", ".", "n_classes", "*", "self", ".", "n_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.data.samplers.NPairSampler.__iter__": [[181, 210], ["samplers.NPairSampler._class_to_indexes.values", "numpy.random.shuffle", "len", "numpy.random.choice", "batch_indexes.extend", "len", "numpy.random.shuffle"], "methods", ["None"], ["\n", "self", ".", "classes_per_batch", "=", "[", "]", "\n", "self", ".", "first", "=", "True", "\n", "for", "indexes", "in", "self", ".", "_class_to_indexes", ".", "values", "(", ")", ":", "\n", "            ", "np", ".", "random", ".", "shuffle", "(", "indexes", ")", "\n", "\n", "", "count", "=", "0", "\n", "while", "count", "+", "self", ".", "_batch_size", "<", "len", "(", "self", ".", "y", ")", ":", "\n", "            ", "classes", "=", "np", ".", "random", ".", "choice", "(", "\n", "self", ".", "_classes", ",", "self", ".", "n_classes", ",", "replace", "=", "False", ",", "p", "=", "self", ".", "_distribution", "\n", ")", "\n", "self", ".", "classes_per_batch", ".", "append", "(", "classes", ")", "\n", "count", "+=", "self", ".", "n_classes", "*", "self", ".", "n_samples", "\n", "\n", "", "", "def", "re_generate", "(", "self", ")", ":", "\n", "        ", "self", ".", "classes_per_batch", "=", "[", "]", "\n", "for", "indexes", "in", "self", ".", "_class_to_indexes", ".", "values", "(", ")", ":", "\n", "            ", "np", ".", "random", ".", "shuffle", "(", "indexes", ")", "\n", "", "count", "=", "0", "\n", "\n", "while", "count", "+", "self", ".", "_batch_size", "<", "len", "(", "self", ".", "y", ")", ":", "\n", "            ", "classes", "=", "np", ".", "random", ".", "choice", "(", "\n", "self", ".", "_classes", ",", "self", ".", "n_classes", ",", "replace", "=", "False", ",", "p", "=", "self", ".", "_distribution", "\n", ")", "\n", "self", ".", "classes_per_batch", ".", "append", "(", "classes", ")", "\n", "count", "+=", "self", ".", "n_classes", "*", "self", ".", "n_samples", "\n", "\n", "", "", "def", "__iter__", "(", "self", ")", ":", "\n", "\n", "        ", "if", "self", ".", "first", ":", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.data.samplers.NPairSampler.__len__": [[211, 213], ["len"], "methods", ["None"], ["            ", "self", ".", "first", "=", "False", "\n", "", "else", ":", "\n", "            ", "self", ".", "re_generate", "(", ")", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.data.samplers.AuxSampler.__init__": [[216, 222], ["numpy.asarray", "numpy.unique"], "methods", ["None"], ["            ", "if", "not", "count", "+", "self", ".", "_batch_size", "<", "len", "(", "self", ".", "y", ")", ":", "\n", "                ", "break", "\n", "", "batch_indexes", "=", "[", "]", "\n", "\n", "for", "class_index", "in", "classes", ":", "\n", "                ", "class_counter", "=", "self", ".", "_class_counter", "[", "class_index", "]", "\n", "class_indexes", "=", "self", ".", "_class_to_indexes", "[", "class_index", "]", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.data.samplers.AuxSampler.re_generate": [[291, 320], ["range", "numpy.unique", "unique_class_per_batch.append", "len", "torch.tensor", "torch.randperm", "torch.tensor", "torch.randperm", "samplers.AuxSampler.unique_class_per_batch.append", "list", "list", "set", "set", "set", "set", "all_p_classes.tolist", "numpy.unique.tolist", "all_p_classes.tolist", "numpy.unique.tolist"], "methods", ["None"], ["", "", "", "", "def", "re_generate", "(", "self", ",", "farther_dataset_idx", ",", "father_classes_per_batch", "=", "None", ")", ":", "\n", "        ", "all_p_classes", "=", "self", ".", "current_unique_classes", "\n", "unique_class_per_batch", "=", "[", "]", "\n", "if", "father_classes_per_batch", "is", "None", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "farther_dataset_idx", ")", "//", "self", ".", "farther_dataset_batch_size", ")", ":", "\n", "                ", "current_idx", "=", "farther_dataset_idx", "[", "i", "*", "self", ".", "farther_dataset_batch_size", ":", "(", "i", "+", "1", ")", "*", "self", ".", "farther_dataset_batch_size", "]", "\n", "current_targets", "=", "self", ".", "farther_dataset_targets", "[", "current_idx", "]", "\n", "current_mem_flags", "=", "self", ".", "farther_dataset_mem_flag", "[", "current_idx", "]", "\n", "target_mode", "=", "1", "if", "self", ".", "farther_is_mem", "else", "0", "\n", "current_classes", "=", "np", ".", "unique", "(", "current_targets", "[", "current_mem_flags", "==", "target_mode", "]", ")", "\n", "if", "not", "self", ".", "same_class", ":", "\n", "                    ", "valid_classes", "=", "torch", ".", "tensor", "(", "list", "(", "set", "(", "all_p_classes", ".", "tolist", "(", ")", ")", "-", "set", "(", "current_classes", ".", "tolist", "(", ")", ")", ")", ")", "\n", "iidx", "=", "torch", ".", "randperm", "(", "valid_classes", ".", "shape", "[", "0", "]", ")", "\n", "valid_classes", "=", "valid_classes", "[", "iidx", "[", ":", "current_classes", ".", "shape", "[", "0", "]", "]", "]", "\n", "", "else", ":", "\n", "                    ", "valid_classes", "=", "current_classes", "\n", "", "unique_class_per_batch", ".", "append", "(", "valid_classes", ")", "\n", "\n", "", "self", ".", "unique_class_per_batch", "=", "unique_class_per_batch", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "same_class", ":", "\n", "                ", "self", ".", "unique_class_per_batch", "=", "father_classes_per_batch", "\n", "", "else", ":", "\n", "                ", "self", ".", "unique_class_per_batch", "=", "[", "]", "\n", "for", "current_classes", "in", "father_classes_per_batch", ":", "\n", "                    ", "valid_classes", "=", "torch", ".", "tensor", "(", "list", "(", "set", "(", "all_p_classes", ".", "tolist", "(", ")", ")", "-", "set", "(", "current_classes", ".", "tolist", "(", ")", ")", ")", ")", "\n", "iidx", "=", "torch", ".", "randperm", "(", "valid_classes", ".", "shape", "[", "0", "]", ")", "\n", "valid_classes", "=", "valid_classes", "[", "iidx", "[", ":", "current_classes", ".", "shape", "[", "0", "]", "]", "]", "\n", "self", ".", "unique_class_per_batch", ".", "append", "(", "valid_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.data.samplers.AuxSampler.current_unique_classes": [[223, 226], ["torch.from_numpy", "numpy.unique"], "methods", ["None"], ["\n", "class_batch_indexes", "=", "class_indexes", "[", "class_counter", ":", "class_counter", "+", "self", ".", "n_samples", "]", "\n", "batch_indexes", ".", "extend", "(", "class_batch_indexes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.data.samplers.AuxSampler.return_n_classes": [[230, 233], ["int"], "methods", ["None"], ["self", ".", "_class_to_indexes", "[", "class_index", "]", "\n", ")", ":", "\n", "                    ", "np", ".", "random", ".", "shuffle", "(", "self", ".", "_class_to_indexes", "[", "class_index", "]", ")", "\n", "self", ".", "_class_counter", "[", "class_index", "]", "=", "0", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.data.samplers.AuxSampler.__len__": [[234, 236], ["len"], "methods", ["None"], ["\n", "", "", "yield", "batch_indexes", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.data.samplers.AuxSampler.__iter__": [[237, 257], ["numpy.random.choice", "len", "numpy.random.choice", "numpy.random.choice().tolist.extend", "len", "numpy.random.choice().tolist", "min", "numpy.where", "len", "numpy.random.choice().tolist", "len", "numpy.random.choice", "numpy.random.choice", "numpy.arange", "len", "len"], "methods", ["None"], ["count", "+=", "self", ".", "n_classes", "*", "self", ".", "n_samples", "\n", "\n", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "y", ")", "//", "self", ".", "_batch_size", "\n", "\n", "\n", "", "", "class", "AuxSampler", "(", "BatchSampler", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "y", ",", "batch_size", ",", "n_sample", ",", "farther_dataset_batch_size", ",", "farther_dataset_idx", ",", "\n", "farther_dataset_targets", ",", "\n", "farther_dataset_mem_flag", ",", "same_class", "=", "False", ",", "farther_is_mem", "=", "False", ",", "\n", "father_classes_per_batch", "=", "None", ")", ":", "\n", "        ", "self", ".", "_batch_size", "=", "batch_size", "\n", "self", ".", "_farther_dataset_batch_size", "=", "farther_dataset_batch_size", "\n", "self", ".", "y", "=", "np", ".", "asarray", "(", "y", ")", "\n", "self", ".", "unique_cls", "=", "np", ".", "unique", "(", "self", ".", "y", ")", "\n", "self", ".", "n_samples", "=", "n_sample", "\n", "self", ".", "same_class", "=", "same_class", "\n", "self", ".", "current_classes", "=", "[", "]", "\n", "self", ".", "farther_dataset_idx", "=", "farther_dataset_idx", "\n", "self", ".", "farther_dataset_batch_size", "=", "farther_dataset_batch_size", "\n", "self", ".", "farther_dataset_targets", "=", "farther_dataset_targets", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.data.samplers.MyRandomSampler.__init__": [[364, 386], ["len", "isinstance", "ValueError", "ValueError", "ValueError", "torch.randint().tolist", "torch.randperm().tolist", "isinstance", "torch.randint", "torch.randperm"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "data_source", ",", "replacement", "=", "False", ",", "num_samples", "=", "None", ")", ":", "\n", "        ", "self", ".", "data_source", "=", "data_source", "\n", "self", ".", "replacement", "=", "replacement", "\n", "self", ".", "_num_samples", "=", "num_samples", "\n", "self", ".", "first", "=", "True", "\n", "\n", "if", "not", "isinstance", "(", "self", ".", "replacement", ",", "bool", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"replacement should be a boolean value, but got \"", "\n", "\"replacement={}\"", ".", "format", "(", "self", ".", "replacement", ")", ")", "\n", "\n", "", "if", "self", ".", "_num_samples", "is", "not", "None", "and", "not", "replacement", ":", "\n", "            ", "raise", "ValueError", "(", "\"With replacement=False, num_samples should not be specified, \"", "\n", "\"since a random permute will be performed.\"", ")", "\n", "\n", "", "if", "not", "isinstance", "(", "self", ".", "num_samples", ",", "int", ")", "or", "self", ".", "num_samples", "<=", "0", ":", "\n", "            ", "raise", "ValueError", "(", "\"num_samples should be a positive integer \"", "\n", "\"value, but got num_samples={}\"", ".", "format", "(", "self", ".", "num_samples", ")", ")", "\n", "", "n", "=", "len", "(", "self", ".", "data_source", ")", "\n", "if", "self", ".", "replacement", ":", "\n", "            ", "self", ".", "_iter_list", "=", "torch", ".", "randint", "(", "high", "=", "n", ",", "size", "=", "(", "self", ".", "num_samples", ",", ")", ",", "dtype", "=", "torch", ".", "int64", ")", ".", "tolist", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_iter_list", "=", "torch", ".", "randperm", "(", "n", ")", ".", "tolist", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.data.samplers.MyRandomSampler.re_generate": [[387, 393], ["len", "torch.randint().tolist", "torch.randperm().tolist", "torch.randint", "torch.randperm"], "methods", ["None"], ["", "", "def", "re_generate", "(", "self", ")", ":", "\n", "        ", "n", "=", "len", "(", "self", ".", "data_source", ")", "\n", "if", "self", ".", "replacement", ":", "\n", "            ", "self", ".", "_iter_list", "=", "torch", ".", "randint", "(", "high", "=", "n", ",", "size", "=", "(", "self", ".", "num_samples", ",", ")", ",", "dtype", "=", "torch", ".", "int64", ")", ".", "tolist", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_iter_list", "=", "torch", ".", "randperm", "(", "n", ")", ".", "tolist", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.data.samplers.MyRandomSampler.iter_list": [[394, 397], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "iter_list", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_iter_list", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.data.samplers.MyRandomSampler.num_samples": [[398, 404], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_samples", "(", "self", ")", ":", "\n", "# dataset size might change at runtime", "\n", "        ", "if", "self", ".", "_num_samples", "is", "None", ":", "\n", "            ", "return", "len", "(", "self", ".", "data_source", ")", "\n", "", "return", "self", ".", "_num_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.data.samplers.MyRandomSampler.__iter__": [[405, 412], ["iter", "samplers.MyRandomSampler.re_generate", "iter"], "methods", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.data.samplers.MyRandomSampler.re_generate"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "first", ":", "\n", "            ", "self", ".", "first", "=", "False", "\n", "return", "iter", "(", "self", ".", "_iter_list", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "re_generate", "(", ")", "\n", "return", "iter", "(", "self", ".", "_iter_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.data.samplers.MyRandomSampler.__len__": [[413, 415], ["None"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_samples", "\n", "", "", ""]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.data.weights.get_class_weights": [[4, 17], ["np.log.min", "numpy.clip", "numpy.unique", "numpy.log"], "function", ["None"], ["def", "get_class_weights", "(", "dataset", ",", "log", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "targets", "=", "dataset", ".", "y", "\n", "\n", "class_sample_count", "=", "np", ".", "unique", "(", "targets", ",", "return_counts", "=", "True", ")", "[", "1", "]", "\n", "weights", "=", "1.", "/", "class_sample_count", "\n", "\n", "min_w", "=", "weights", ".", "min", "(", ")", "\n", "weights", "=", "weights", "/", "min_w", "\n", "\n", "if", "log", ":", "\n", "        ", "weights", "=", "np", ".", "log", "(", "weights", ")", "\n", "\n", "", "return", "np", ".", "clip", "(", "weights", ",", "a_min", "=", "1.", ",", "a_max", "=", "None", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.data.incdataset.IncrementalDataset.__init__": [[39, 93], ["incdataset._get_datasets", "incdataset.IncrementalDataset._setup_data", "dataset.set_custom_transforms", "print"], "methods", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.data.incdataset._get_datasets", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.data.incdataset.IncrementalDataset._setup_data", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.data.datasets.LAD.set_custom_transforms"], ["\n", "\n", "def", "__init__", "(", "\n", "self", ",", "\n", "dataset_name", ",", "\n", "random_order", "=", "False", ",", "\n", "shuffle", "=", "True", ",", "\n", "workers", "=", "10", ",", "\n", "batch_size", "=", "128", ",", "\n", "seed", "=", "1", ",", "\n", "increment", "=", "10", ",", "\n", "validation_split", "=", "0.", ",", "\n", "onehot", "=", "False", ",", "\n", "initial_increment", "=", "None", ",", "\n", "sampler", "=", "None", ",", "\n", "sampler_config", "=", "None", ",", "\n", "data_path", "=", "\"data\"", ",", "\n", "class_order", "=", "None", ",", "\n", "dataset_transforms", "=", "None", ",", "\n", "all_test_classes", "=", "False", ",", "\n", "metadata_path", "=", "None", ",", "\n", "extra_dataset_name", "=", "'imagenet_32'", "\n", ")", ":", "\n", "        ", "datasets", "=", "_get_datasets", "(", "dataset_name", ")", "\n", "if", "metadata_path", ":", "\n", "            ", "print", "(", "\"Adding metadata path {}\"", ".", "format", "(", "metadata_path", ")", ")", "\n", "datasets", "[", "0", "]", ".", "metadata_path", "=", "metadata_path", "\n", "\n", "", "self", ".", "_setup_data", "(", "\n", "datasets", ",", "\n", "random_order", "=", "random_order", ",", "\n", "class_order", "=", "class_order", ",", "\n", "seed", "=", "seed", ",", "\n", "increment", "=", "increment", ",", "\n", "validation_split", "=", "validation_split", ",", "\n", "initial_increment", "=", "initial_increment", ",", "\n", "data_path", "=", "data_path", ",", "\n", "extra_dataset", "=", "extra_dataset_name", ",", "\n", ")", "\n", "\n", "dataset", "=", "datasets", "[", "0", "]", "(", ")", "\n", "dataset", ".", "set_custom_transforms", "(", "dataset_transforms", ")", "\n", "self", ".", "train_transforms", "=", "dataset", ".", "train_transforms", "# FIXME handle multiple datasets", "\n", "self", ".", "test_transforms", "=", "dataset", ".", "test_transforms", "\n", "self", ".", "common_transforms", "=", "dataset", ".", "common_transforms", "\n", "\n", "self", ".", "open_image", "=", "datasets", "[", "0", "]", ".", "open_image", "\n", "\n", "self", ".", "_current_task", "=", "0", "\n", "\n", "self", ".", "_seed", "=", "seed", "\n", "self", ".", "_batch_size", "=", "batch_size", "\n", "self", ".", "_workers", "=", "workers", "\n", "self", ".", "_shuffle", "=", "shuffle", "\n", "self", ".", "_onehot", "=", "onehot", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.data.incdataset.IncrementalDataset.n_tasks": [[94, 97], ["len"], "methods", ["None"], ["self", ".", "_sampler", "=", "sampler", "\n", "self", ".", "_sampler_config", "=", "sampler_config", "\n", "self", ".", "_all_test_classes", "=", "all_test_classes", "\n", "self", ".", "extra_dataset_name", "=", "extra_dataset_name", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.data.incdataset.IncrementalDataset.n_classes": [[98, 101], ["sum"], "methods", ["None"], ["\n", "", "@", "property", "\n", "def", "n_tasks", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "increments", ")", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.data.incdataset.IncrementalDataset.new_task": [[102, 186], ["inclearn.utils.LOGGER.LOGGER.info", "sum", "sum", "incdataset.IncrementalDataset._select", "len", "incdataset.IncrementalDataset._select", "incdataset.IncrementalDataset.get_loader", "incdataset.IncrementalDataset.get_loader", "torch.utils.data.DataLoader", "len", "Exception", "numpy.unique", "inclearn.utils.LOGGER.LOGGER.info", "incdataset.IncrementalDataset._select", "incdataset.IncrementalDataset.new_task.to_onehot"], "methods", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.data.incdataset.IncrementalDataset._select", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.data.incdataset.IncrementalDataset._select", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.data.incdataset.IncrementalDataset.get_loader", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.data.incdataset.IncrementalDataset.get_loader", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.data.incdataset.IncrementalDataset._select", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.utils.to_onehot"], ["\n", "", "@", "property", "\n", "def", "n_classes", "(", "self", ")", ":", "\n", "        ", "return", "sum", "(", "self", ".", "increments", ")", "\n", "\n", "", "def", "new_task", "(", "self", ",", "memory", "=", "None", ",", "pseudo_memory", "=", "None", ",", "memory_val", "=", "None", ",", "pseudo_memory_usage", "=", "'mixed'", ",", "\n", "pseudo_memory_n_samples", "=", "2", ",", "pseudo_same_class", "=", "False", ")", ":", "\n", "        ", "assert", "pseudo_memory_usage", "in", "(", "'pure'", ",", "'mixed'", ",", "'enhanced'", ")", "\n", "logger", ".", "LOGGER", ".", "info", "(", "f'Pseudo memory n_samples is {pseudo_memory_n_samples}.'", ")", "\n", "pseudo_memory_loader", "=", "None", "\n", "\n", "if", "self", ".", "_current_task", ">=", "len", "(", "self", ".", "increments", ")", ":", "\n", "            ", "raise", "Exception", "(", "\"No more tasks.\"", ")", "\n", "\n", "", "min_class", "=", "sum", "(", "self", ".", "increments", "[", ":", "self", ".", "_current_task", "]", ")", "\n", "max_class", "=", "sum", "(", "self", ".", "increments", "[", ":", "self", ".", "_current_task", "+", "1", "]", ")", "\n", "\n", "x_train", ",", "y_train", "=", "self", ".", "_select", "(", "\n", "self", ".", "data_train", ",", "self", ".", "targets_train", ",", "low_range", "=", "min_class", ",", "high_range", "=", "max_class", "\n", ")", "\n", "pure_new_data", "=", "(", "x_train", ",", "y_train", ")", "\n", "nb_new_classes", "=", "len", "(", "np", ".", "unique", "(", "y_train", ")", ")", "\n", "x_val", ",", "y_val", "=", "self", ".", "_select", "(", "\n", "self", ".", "data_val", ",", "self", ".", "targets_val", ",", "low_range", "=", "min_class", ",", "high_range", "=", "max_class", "\n", ")", "\n", "if", "self", ".", "_all_test_classes", "is", "True", ":", "\n", "            ", "logger", ".", "LOGGER", ".", "info", "(", "\"Testing on all classes!\"", ")", "\n", "x_test", ",", "y_test", "=", "self", ".", "_select", "(", "\n", "self", ".", "data_test", ",", "self", ".", "targets_test", ",", "high_range", "=", "sum", "(", "self", ".", "increments", ")", "\n", ")", "\n", "", "elif", "self", ".", "_all_test_classes", "is", "not", "None", "or", "self", ".", "_all_test_classes", "is", "not", "False", ":", "\n", "            ", "max_class", "=", "sum", "(", "self", ".", "increments", "[", ":", "self", ".", "_current_task", "+", "1", "+", "self", ".", "_all_test_classes", "]", ")", "\n", "logger", ".", "LOGGER", ".", "info", "(", "\n", "f\"Testing on {self._all_test_classes} unseen tasks (max class = {max_class}).\"", "\n", ")", "\n", "x_test", ",", "y_test", "=", "self", ".", "_select", "(", "self", ".", "data_test", ",", "self", ".", "targets_test", ",", "high_range", "=", "max_class", ")", "\n", "", "else", ":", "\n", "            ", "x_test", ",", "y_test", "=", "self", ".", "_select", "(", "self", ".", "data_test", ",", "self", ".", "targets_test", ",", "high_range", "=", "max_class", ")", "\n", "\n", "", "if", "self", ".", "_onehot", ":", "\n", "            ", "def", "to_onehot", "(", "x", ")", ":", "\n", "                ", "n", "=", "np", ".", "max", "(", "x", ")", "+", "1", "\n", "return", "np", ".", "eye", "(", "n", ")", "[", "x", "]", "\n", "\n", "", "y_train", "=", "to_onehot", "(", "y_train", ")", "\n", "\n", "", "if", "memory", "is", "not", "None", ":", "\n", "            ", "logger", ".", "LOGGER", ".", "info", "(", "\"Set memory of size: {}.\"", ".", "format", "(", "memory", "[", "0", "]", ".", "shape", "[", "0", "]", ")", ")", "\n", "x_train", ",", "y_train", ",", "train_memory_flags", "=", "self", ".", "_add_memory", "(", "x_train", ",", "y_train", ",", "*", "memory", ")", "\n", "", "else", ":", "\n", "            ", "train_memory_flags", "=", "np", ".", "zeros", "(", "(", "x_train", ".", "shape", "[", "0", "]", ",", ")", ")", "\n", "\n", "", "if", "memory_val", "is", "not", "None", ":", "\n", "            ", "logger", ".", "LOGGER", ".", "info", "(", "\"Set validation memory of size: {}.\"", ".", "format", "(", "memory_val", "[", "0", "]", ".", "shape", "[", "0", "]", ")", ")", "\n", "x_val", ",", "y_val", ",", "val_memory_flags", "=", "self", ".", "_add_memory", "(", "x_val", ",", "y_val", ",", "*", "memory_val", ")", "\n", "", "else", ":", "\n", "            ", "val_memory_flags", "=", "np", ".", "zeros", "(", "(", "x_val", ".", "shape", "[", "0", "]", ",", ")", ")", "\n", "\n", "", "train_loader", "=", "self", ".", "get_loader", "(", "x_train", ",", "y_train", ",", "train_memory_flags", ",", "mode", "=", "\"train\"", ")", "\n", "val_loader", "=", "self", ".", "get_loader", "(", "x_val", ",", "y_val", ",", "val_memory_flags", ",", "\n", "mode", "=", "\"train\"", ")", "if", "len", "(", "x_val", ")", ">", "0", "else", "None", "\n", "test_loader", "=", "self", ".", "get_loader", "(", "x_test", ",", "y_test", ",", "np", ".", "zeros", "(", "(", "x_test", ".", "shape", "[", "0", "]", ",", ")", ")", ",", "mode", "=", "\"test\"", ")", "\n", "if", "self", ".", "extra_dataset_name", "==", "'imagenet_32'", ":", "\n", "            ", "aux_loader", "=", "DataLoader", "(", "self", ".", "aux_data", ",", "batch_size", "=", "self", ".", "_batch_size", ",", "num_workers", "=", "self", ".", "_workers", ",", "\n", "shuffle", "=", "False", ",", "\n", "drop_last", "=", "False", ")", "\n", "", "elif", "self", ".", "extra_dataset_name", "==", "'imagenet900'", ":", "\n", "            ", "aux_loader", "=", "self", ".", "get_loader", "(", "np", ".", "asarray", "(", "self", ".", "aux_data", ".", "data", ")", ",", "np", ".", "asarray", "(", "self", ".", "aux_data", ".", "targets", ")", ",", "\n", "np", ".", "zeros", "(", "(", "np", ".", "array", "(", "self", ".", "aux_data", ".", "targets", ")", ".", "shape", "[", "0", "]", ")", ")", ",", "mode", "=", "\"test\"", ",", "\n", "open_image", "=", "True", ",", "batch_size_expect", "=", "128", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NameError", "\n", "\n", "", "if", "pseudo_memory", "is", "not", "None", ":", "\n", "            ", "if", "pseudo_memory_usage", "==", "'pure'", ":", "\n", "                ", "logger", ".", "LOGGER", ".", "info", "(", "\n", "\"Added pseudo memory of size: {} to the training set.\"", ".", "format", "(", "pseudo_memory", "[", "0", "]", ".", "shape", "[", "0", "]", ")", ")", "\n", "x_train", ",", "y_train", ",", "train_memory_flags", "=", "self", ".", "_add_memory", "(", "x_train", ",", "y_train", ",", "*", "pseudo_memory", ",", "\n", "unlabeled", "=", "False", ")", "\n", "", "elif", "pseudo_memory_usage", "==", "'mixed'", ":", "\n", "# get sampler", "\n", "                ", "pseudo_memory_loader", "=", "self", ".", "get_pseudo_memory_loader", "(", "pseudo_memory", ",", "pseudo_memory_n_samples", ",", "\n", "batch_size", "=", "self", ".", "_batch_size", ",", "\n", "farther_dataset_batch_size", "=", "self", ".", "_batch_size", ",", "\n", "farther_dataset_idx", "=", "train_loader", ".", "sampler", ".", "iter_list", ",", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.data.incdataset.IncrementalDataset.get_pseudo_memory_loader": [[187, 192], ["inclearn.lib.data.samplers.AuxSampler", "incdataset.IncrementalDataset.get_loader", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.data.incdataset.IncrementalDataset.get_loader"], ["farther_dataset_targets", "=", "y_train", ",", "\n", "farther_dataset_mem_flag", "=", "train_memory_flags", ",", "\n", "same_class", "=", "pseudo_same_class", ",", "\n", "farther_is_mem", "=", "True", ")", "\n", "", "", "task_info", "=", "{", "\n", "\"min_class\"", ":", "min_class", ",", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.data.incdataset.IncrementalDataset._add_memory": [[193, 212], ["numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.zeros", "numpy.zeros", "numpy.ones", "numpy.ones"], "methods", ["None"], ["\"max_class\"", ":", "max_class", ",", "\n", "\"total_n_classes\"", ":", "sum", "(", "self", ".", "increments", ")", ",", "\n", "\"increment\"", ":", "nb_new_classes", ",", "# self.increments[self._current_task],", "\n", "\"task\"", ":", "self", ".", "_current_task", ",", "\n", "\"max_task\"", ":", "len", "(", "self", ".", "increments", ")", ",", "\n", "\"n_train_data\"", ":", "x_train", ".", "shape", "[", "0", "]", ",", "\n", "\"n_test_data\"", ":", "x_test", ".", "shape", "[", "0", "]", "\n", "}", "\n", "\n", "self", ".", "_current_task", "+=", "1", "\n", "\n", "return", "task_info", ",", "train_loader", ",", "val_loader", ",", "test_loader", ",", "aux_loader", ",", "pseudo_memory_loader", ",", "pure_new_data", "\n", "\n", "", "def", "get_pseudo_memory_loader", "(", "self", ",", "pseudo_memory", ",", "pseudo_memory_n_samples", ",", "batch_size", ",", "farther_dataset_batch_size", ",", "\n", "farther_dataset_idx", ",", "farther_dataset_targets", ",", "farther_dataset_mem_flag", ",", "same_class", ",", "\n", "farther_is_mem", ",", "father_classes_per_batch", "=", "None", ")", ":", "\n", "        ", "aux_sampler", "=", "AuxSampler", "(", "pseudo_memory", "[", "1", "]", ",", "batch_size", "=", "batch_size", ",", "n_sample", "=", "pseudo_memory_n_samples", ",", "\n", "farther_dataset_batch_size", "=", "farther_dataset_batch_size", ",", "\n", "farther_dataset_idx", "=", "farther_dataset_idx", ",", "\n", "farther_dataset_targets", "=", "farther_dataset_targets", ",", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.data.incdataset.IncrementalDataset.get_custom_loader": [[213, 261], ["isinstance", "incdataset.IncrementalDataset._select", "numpy.concatenate.append", "numpy.concatenate.append", "len", "numpy.concatenate", "numpy.concatenate", "numpy.zeros", "incdataset.IncrementalDataset.get_loader", "isinstance", "len", "incdataset.IncrementalDataset._add_memory", "numpy.ones", "ValueError", "isinstance"], "methods", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.data.incdataset.IncrementalDataset._select", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.data.incdataset.IncrementalDataset.get_loader", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.data.incdataset.IncrementalDataset._add_memory"], ["farther_dataset_mem_flag", "=", "farther_dataset_mem_flag", ",", "same_class", "=", "same_class", ",", "\n", "farther_is_mem", "=", "farther_is_mem", ",", "\n", "father_classes_per_batch", "=", "father_classes_per_batch", "\n", ")", "\n", "pseudo_memory_loader", "=", "self", ".", "get_loader", "(", "*", "pseudo_memory", ",", "memory_flags", "=", "np", ".", "zeros", "(", "pseudo_memory", "[", "0", "]", ".", "shape", ")", ",", "\n", "sampler", "=", "aux_sampler", ",", "sampler_init", "=", "False", ")", "\n", "return", "pseudo_memory_loader", "\n", "\n", "", "def", "_add_memory", "(", "self", ",", "x", ",", "y", ",", "data_memory", ",", "targets_memory", ",", "previous_memory_flags", "=", "None", ",", "unlabeled", "=", "False", ")", ":", "\n", "        ", "if", "self", ".", "_onehot", ":", "# Need to add dummy zeros to match the number of targets:", "\n", "            ", "targets_memory", "=", "np", ".", "concatenate", "(", "\n", "(", "\n", "targets_memory", ",", "\n", "np", ".", "zeros", "(", "(", "targets_memory", ".", "shape", "[", "0", "]", ",", "self", ".", "increments", "[", "self", ".", "_current_task", "]", ")", ")", "\n", ")", ",", "\n", "axis", "=", "1", "\n", ")", "\n", "", "flag", "=", "1", "if", "not", "unlabeled", "else", "2", "\n", "if", "previous_memory_flags", "is", "None", ":", "\n", "            ", "memory_flags", "=", "np", ".", "concatenate", "(", "(", "np", ".", "zeros", "(", "(", "x", ".", "shape", "[", "0", "]", ",", ")", ")", ",", "flag", "*", "np", ".", "ones", "(", "(", "data_memory", ".", "shape", "[", "0", "]", ",", ")", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "memory_flags", "=", "np", ".", "concatenate", "(", "(", "previous_memory_flags", ",", "flag", "*", "np", ".", "ones", "(", "(", "data_memory", ".", "shape", "[", "0", "]", ",", ")", ")", ")", ")", "\n", "\n", "", "x", "=", "np", ".", "concatenate", "(", "(", "x", ",", "data_memory", ")", ")", "\n", "y", "=", "np", ".", "concatenate", "(", "(", "y", ",", "targets_memory", ")", ")", "\n", "\n", "return", "x", ",", "y", ",", "memory_flags", "\n", "\n", "", "def", "get_custom_loader", "(", "\n", "self", ",", "class_indexes", ",", "memory", "=", "None", ",", "mode", "=", "\"test\"", ",", "data_source", "=", "\"train\"", ",", "sampler", "=", "None", "\n", ")", ":", "\n", "        ", "\"\"\"Returns a custom loader.\n\n        :param class_indexes: A list of class indexes that we want.\n        :param mode: Various mode for the transformations applied on it.\n        :param data_source: Whether to fetch from the train, val, or test set.\n        :return: The raw data and a loader.\n        \"\"\"", "\n", "if", "not", "isinstance", "(", "class_indexes", ",", "list", ")", ":", "# TODO: deprecated, should always give a list", "\n", "            ", "class_indexes", "=", "[", "class_indexes", "]", "\n", "\n", "", "if", "data_source", "==", "\"train\"", ":", "\n", "            ", "x", ",", "y", "=", "self", ".", "data_train", ",", "self", ".", "targets_train", "\n", "", "elif", "data_source", "==", "\"val\"", ":", "\n", "            ", "x", ",", "y", "=", "self", ".", "data_val", ",", "self", ".", "targets_val", "\n", "", "elif", "data_source", "==", "\"test\"", ":", "\n", "            ", "x", ",", "y", "=", "self", ".", "data_test", ",", "self", ".", "targets_test", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Unknown data source <{}>.\"", ".", "format", "(", "data_source", ")", ")", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.data.incdataset.IncrementalDataset.get_memory_loader": [[263, 266], ["incdataset.IncrementalDataset.get_loader", "numpy.ones"], "methods", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.data.incdataset.IncrementalDataset.get_loader"], ["", "data", ",", "targets", "=", "[", "]", ",", "[", "]", "\n", "for", "class_index", "in", "class_indexes", ":", "\n", "            ", "class_data", ",", "class_targets", "=", "self", ".", "_select", "(", "\n", "x", ",", "y", ",", "low_range", "=", "class_index", ",", "high_range", "=", "class_index", "+", "1", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.data.incdataset.IncrementalDataset._select": [[268, 271], ["numpy.where", "numpy.logical_and"], "methods", ["None"], ["data", ".", "append", "(", "class_data", ")", "\n", "targets", ".", "append", "(", "class_targets", ")", "\n", "\n", "", "if", "len", "(", "data", ")", "==", "0", ":", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.data.incdataset.IncrementalDataset.get_loader": [[272, 308], ["torch.utils.data.DataLoader", "torchvision.transforms.Compose", "inclearn.utils.LOGGER.LOGGER.info", "sampler.", "incdataset.DummyDataset", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "NotImplementedError", "torchvision.transforms.RandomHorizontalFlip"], "methods", ["None"], ["            ", "assert", "memory", "is", "not", "None", "\n", "", "else", ":", "\n", "            ", "data", "=", "np", ".", "concatenate", "(", "data", ")", "\n", "targets", "=", "np", ".", "concatenate", "(", "targets", ")", "\n", "\n", "", "if", "(", "not", "isinstance", "(", "memory", ",", "tuple", ")", "and", "\n", "memory", "is", "not", "None", ")", "or", "(", "isinstance", "(", "memory", ",", "tuple", ")", "and", "memory", "[", "0", "]", "is", "not", "None", ")", ":", "\n", "            ", "if", "len", "(", "data", ")", ">", "0", ":", "\n", "                ", "data", ",", "targets", ",", "memory_flags", "=", "self", ".", "_add_memory", "(", "data", ",", "targets", ",", "*", "memory", ")", "\n", "", "else", ":", "\n", "                ", "data", ",", "targets", "=", "memory", "\n", "memory_flags", "=", "np", ".", "ones", "(", "(", "data", ".", "shape", "[", "0", "]", ",", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "memory_flags", "=", "np", ".", "zeros", "(", "(", "data", ".", "shape", "[", "0", "]", ",", ")", ")", "\n", "\n", "", "return", "data", ",", "self", ".", "get_loader", "(", "\n", "data", ",", "targets", ",", "memory_flags", ",", "shuffle", "=", "False", ",", "mode", "=", "mode", ",", "sampler", "=", "sampler", "\n", ")", "\n", "\n", "", "def", "get_memory_loader", "(", "self", ",", "data", ",", "targets", ")", ":", "\n", "        ", "return", "self", ".", "get_loader", "(", "\n", "data", ",", "targets", ",", "np", ".", "ones", "(", "(", "data", ".", "shape", "[", "0", "]", ",", ")", ")", ",", "shuffle", "=", "True", ",", "mode", "=", "\"train\"", "\n", ")", "\n", "\n", "", "def", "_select", "(", "self", ",", "x", ",", "y", ",", "low_range", "=", "0", ",", "high_range", "=", "0", ")", ":", "\n", "        ", "idxes", "=", "np", ".", "where", "(", "np", ".", "logical_and", "(", "y", ">=", "low_range", ",", "y", "<", "high_range", ")", ")", "[", "0", "]", "\n", "return", "x", "[", "idxes", "]", ",", "y", "[", "idxes", "]", "\n", "\n", "", "def", "get_loader", "(", "self", ",", "x", ",", "y", ",", "memory_flags", ",", "shuffle", "=", "True", ",", "mode", "=", "\"train\"", ",", "sampler", "=", "None", ",", "sampler_init", "=", "True", ",", "\n", "open_image", "=", "False", ",", "batch_size_expect", "=", "None", ",", "multi_processing", "=", "True", ")", ":", "\n", "        ", "if", "mode", "==", "\"train\"", ":", "\n", "            ", "trsf", "=", "transforms", ".", "Compose", "(", "[", "*", "self", ".", "train_transforms", ",", "*", "self", ".", "common_transforms", "]", ")", "\n", "", "elif", "mode", "==", "\"test\"", ":", "\n", "            ", "trsf", "=", "transforms", ".", "Compose", "(", "[", "*", "self", ".", "test_transforms", ",", "*", "self", ".", "common_transforms", "]", ")", "\n", "", "elif", "mode", "==", "\"flip\"", ":", "\n", "            ", "trsf", "=", "transforms", ".", "Compose", "(", "\n", "[", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.data.incdataset.IncrementalDataset._setup_data": [[310, 406], ["numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "datasets.get_imagenet_32_datasets", "dataset().base_dataset", "dataset().base_dataset", "incdataset.IncrementalDataset._split_per_class", "list", "inclearn.utils.LOGGER.LOGGER.info", "incdataset.IncrementalDataset.class_order.append", "incdataset.IncrementalDataset._map_new_class_index", "incdataset.IncrementalDataset._map_new_class_index", "incdataset.IncrementalDataset._map_new_class_index", "len", "incdataset.IncrementalDataset.data_train.append", "incdataset.IncrementalDataset.targets_train.append", "incdataset.IncrementalDataset.data_val.append", "incdataset.IncrementalDataset.targets_val.append", "incdataset.IncrementalDataset.data_test.append", "incdataset.IncrementalDataset.targets_test.append", "os.path.join", "numpy.array", "numpy.array", "range", "random.seed", "random.shuffle", "len", "incdataset.IncrementalDataset.increments.append", "dataset", "dataset", "len", "len", "numpy.unique", "len", "len", "nb_steps.is_integer", "inclearn.utils.LOGGER.LOGGER.warning", "incdataset.IncrementalDataset.increments.append", "nb_steps.is_integer", "inclearn.utils.LOGGER.LOGGER.warning", "incdataset.IncrementalDataset.increments.extend", "incdataset.IncrementalDataset.increments.append", "incdataset.IncrementalDataset.increments.extend", "int", "len", "len", "int", "range", "range", "int", "int", "range", "range", "int", "int"], "methods", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.data.datasets.get_imagenet_32_datasets", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.data.datasets.LAD.base_dataset", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.data.datasets.LAD.base_dataset", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.data.incdataset.IncrementalDataset._split_per_class", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.data.incdataset.IncrementalDataset._map_new_class_index", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.data.incdataset.IncrementalDataset._map_new_class_index", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.data.incdataset.IncrementalDataset._map_new_class_index"], ["*", "self", ".", "common_transforms", "\n", "]", "\n", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Unknown mode {}.\"", ".", "format", "(", "mode", ")", ")", "\n", "\n", "", "sampler", "=", "sampler", "or", "self", ".", "_sampler", "\n", "num_workers", "=", "self", ".", "_workers", "\n", "if", "sampler", "is", "not", "None", "and", "mode", "==", "\"train\"", "and", "sampler_init", ":", "\n", "            ", "logger", ".", "LOGGER", ".", "info", "(", "\"Using sampler {}\"", ".", "format", "(", "sampler", ")", ")", "\n", "sampler", "=", "sampler", "(", "y", ",", "memory_flags", ",", "batch_size", "=", "self", ".", "_batch_size", ",", "**", "self", ".", "_sampler_config", ")", "\n", "batch_size", "=", "1", "\n", "return", "DataLoader", "(", "\n", "DummyDataset", "(", "x", ",", "y", ",", "memory_flags", ",", "trsf", ",", "open_image", "=", "self", ".", "open_image", ")", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", "batch_sampler", "=", "sampler", ",", "\n", ")", "\n", "", "elif", "sampler", "is", "not", "None", "and", "mode", "==", "\"train\"", ":", "\n", "            ", "sampler", "=", "sampler", "\n", "batch_size", "=", "1", "\n", "return", "DataLoader", "(", "\n", "DummyDataset", "(", "x", ",", "y", ",", "memory_flags", ",", "trsf", ",", "open_image", "=", "self", ".", "open_image", ")", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", "batch_sampler", "=", "sampler", "\n", ")", "\n", "", "elif", "sampler", "is", "not", "None", "and", "mode", "==", "\"test\"", "and", "not", "sampler_init", ":", "\n", "            ", "sampler", "=", "sampler", "\n", "batch_size", "=", "1", "\n", "return", "DataLoader", "(", "\n", "DummyDataset", "(", "x", ",", "y", ",", "memory_flags", ",", "trsf", ",", "open_image", "=", "self", ".", "open_image", ")", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", "batch_sampler", "=", "sampler", "\n", ")", "\n", "", "elif", "mode", "==", "'test'", "or", "mode", "==", "'flip'", ":", "\n", "            ", "if", "batch_size_expect", "is", "not", "None", ":", "\n", "                ", "batch_size", "=", "batch_size_expect", "\n", "num_workers", "=", "8", "\n", "", "else", ":", "\n", "                ", "batch_size", "=", "self", ".", "_batch_size", "\n", "num_workers", "=", "4", "\n", "", "return", "DataLoader", "(", "\n", "DummyDataset", "(", "x", ",", "y", ",", "memory_flags", ",", "trsf", ",", "open_image", "=", "self", ".", "open_image", ")", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", ")", "\n", "", "else", ":", "# 'mode' == train, shuffle = True, sample = None", "\n", "# we replace custom sampler here", "\n", "            ", "sampler", "=", "MyRandomSampler", "(", "data_source", "=", "y", ")", "\n", "batch_size", "=", "self", ".", "_batch_size", "\n", "return", "DataLoader", "(", "\n", "DummyDataset", "(", "x", ",", "y", ",", "memory_flags", ",", "trsf", ",", "open_image", "=", "self", ".", "open_image", ")", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", "sampler", "=", "sampler", ",", "\n", "drop_last", "=", "True", "\n", ")", "\n", "\n", "", "", "def", "_setup_data", "(", "\n", "self", ",", "\n", "datasets", ",", "\n", "random_order", "=", "False", ",", "\n", "class_order", "=", "None", ",", "\n", "seed", "=", "1", ",", "\n", "increment", "=", "10", ",", "\n", "validation_split", "=", "0.", ",", "\n", "initial_increment", "=", "None", ",", "\n", "data_path", "=", "\"data\"", ",", "\n", "extra_dataset", "=", "'imagenet_32'", "\n", ")", ":", "\n", "# FIXME: handles online loading of images", "\n", "        ", "self", ".", "data_train", ",", "self", ".", "targets_train", "=", "[", "]", ",", "[", "]", "\n", "self", ".", "data_test", ",", "self", ".", "targets_test", "=", "[", "]", ",", "[", "]", "\n", "self", ".", "data_val", ",", "self", ".", "targets_val", "=", "[", "]", ",", "[", "]", "\n", "self", ".", "increments", "=", "[", "]", "\n", "self", ".", "class_order", "=", "[", "]", "\n", "\n", "current_class_idx", "=", "0", "# When using multiple datasets", "\n", "for", "dataset", "in", "datasets", ":", "\n", "            ", "train_dataset", "=", "dataset", "(", ")", ".", "base_dataset", "(", "data_path", ",", "train", "=", "True", ",", "download", "=", "True", ")", "\n", "test_dataset", "=", "dataset", "(", ")", ".", "base_dataset", "(", "data_path", ",", "train", "=", "False", ",", "download", "=", "True", ")", "\n", "\n", "x_train", ",", "y_train", "=", "train_dataset", ".", "data", ",", "np", ".", "array", "(", "train_dataset", ".", "targets", ")", "\n", "x_val", ",", "y_val", ",", "x_train", ",", "y_train", "=", "self", ".", "_split_per_class", "(", "\n", "x_train", ",", "y_train", ",", "validation_split", "\n", ")", "\n", "x_test", ",", "y_test", "=", "test_dataset", ".", "data", ",", "np", ".", "array", "(", "test_dataset", ".", "targets", ")", "\n", "\n", "order", "=", "list", "(", "range", "(", "len", "(", "np", ".", "unique", "(", "y_train", ")", ")", ")", ")", "\n", "if", "random_order", ":", "\n", "                ", "random", ".", "seed", "(", "seed", ")", "# Ensure that following order is determined by seed:", "\n", "random", ".", "shuffle", "(", "order", ")", "\n", "", "elif", "class_order", ":", "\n", "                ", "order", "=", "class_order", "\n", "", "elif", "dataset", ".", "class_order", "is", "not", "None", ":", "\n", "                ", "order", "=", "dataset", ".", "class_order", "\n", "", "elif", "train_dataset", ".", "class_order", "is", "not", "None", ":", "\n", "                ", "order", "=", "train_dataset", ".", "class_order", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.data.incdataset.IncrementalDataset._map_new_class_index": [[407, 411], ["numpy.array", "list", "map", "order.index"], "methods", ["None"], ["\n", "", "logger", ".", "LOGGER", ".", "info", "(", "\"Dataset {}: class ordering: {}.\"", ".", "format", "(", "dataset", ".", "__name__", ",", "order", ")", ")", "\n", "\n", "self", ".", "class_order", ".", "append", "(", "order", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.data.incdataset.IncrementalDataset._split_per_class": [[412, 440], ["numpy.random.permutation", "numpy.unique", "int", "x_val.append", "y_val.append", "x_train.append", "y_train.append", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.where"], "methods", ["None"], ["y_train", "=", "self", ".", "_map_new_class_index", "(", "y_train", ",", "order", ")", "\n", "y_val", "=", "self", ".", "_map_new_class_index", "(", "y_val", ",", "order", ")", "\n", "y_test", "=", "self", ".", "_map_new_class_index", "(", "y_test", ",", "order", ")", "\n", "\n", "y_train", "+=", "current_class_idx", "\n", "y_val", "+=", "current_class_idx", "\n", "y_test", "+=", "current_class_idx", "\n", "\n", "current_class_idx", "+=", "len", "(", "order", ")", "\n", "if", "len", "(", "datasets", ")", ">", "1", ":", "\n", "                ", "self", ".", "increments", ".", "append", "(", "len", "(", "order", ")", ")", "\n", "", "elif", "initial_increment", "is", "None", ":", "\n", "                ", "nb_steps", "=", "len", "(", "order", ")", "/", "increment", "\n", "remainder", "=", "len", "(", "order", ")", "-", "int", "(", "nb_steps", ")", "*", "increment", "\n", "\n", "if", "not", "nb_steps", ".", "is_integer", "(", ")", ":", "\n", "                    ", "logger", ".", "LOGGER", ".", "warning", "(", "\n", "f\"THe last step will have sligthly less sample ({remainder} vs {increment}).\"", "\n", ")", "\n", "self", ".", "increments", "=", "[", "increment", "for", "_", "in", "range", "(", "int", "(", "nb_steps", ")", ")", "]", "\n", "self", ".", "increments", ".", "append", "(", "remainder", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "increments", "=", "[", "increment", "for", "_", "in", "range", "(", "int", "(", "nb_steps", ")", ")", "]", "\n", "", "", "else", ":", "\n", "                ", "self", ".", "increments", "=", "[", "initial_increment", "]", "\n", "\n", "nb_steps", "=", "(", "len", "(", "order", ")", "-", "initial_increment", ")", "/", "increment", "\n", "remainder", "=", "(", "len", "(", "order", ")", "-", "initial_increment", ")", "-", "int", "(", "nb_steps", ")", "*", "increment", "\n", "if", "not", "nb_steps", ".", "is_integer", "(", ")", ":", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.data.incdataset.DummyDataset.__init__": [[444, 451], ["None"], "methods", ["None"], ["self", ".", "increments", ".", "extend", "(", "[", "increment", "for", "_", "in", "range", "(", "int", "(", "nb_steps", ")", ")", "]", ")", "\n", "self", ".", "increments", ".", "append", "(", "remainder", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "increments", ".", "extend", "(", "[", "increment", "for", "_", "in", "range", "(", "int", "(", "nb_steps", ")", ")", "]", ")", "\n", "\n", "", "", "self", ".", "data_train", ".", "append", "(", "x_train", ")", "\n", "self", ".", "targets_train", ".", "append", "(", "y_train", ")", "\n", "self", ".", "data_val", ".", "append", "(", "x_val", ")", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.data.incdataset.DummyDataset.__len__": [[452, 454], ["None"], "methods", ["None"], ["self", ".", "targets_val", ".", "append", "(", "y_val", ")", "\n", "self", ".", "data_test", ".", "append", "(", "x_test", ")", "\n", "self", ".", "targets_test", ".", "append", "(", "y_test", ")", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.data.incdataset.DummyDataset.__getitem__": [[455, 466], ["incdataset.DummyDataset.trsf", "PIL.Image.open().convert", "PIL.Image.fromarray", "x.astype", "PIL.Image.open"], "methods", ["None"], ["\n", "", "self", ".", "data_train", "=", "np", ".", "concatenate", "(", "self", ".", "data_train", ")", "\n", "self", ".", "targets_train", "=", "np", ".", "concatenate", "(", "self", ".", "targets_train", ")", "\n", "self", ".", "data_val", "=", "np", ".", "concatenate", "(", "self", ".", "data_val", ")", "\n", "self", ".", "targets_val", "=", "np", ".", "concatenate", "(", "self", ".", "targets_val", ")", "\n", "self", ".", "data_test", "=", "np", ".", "concatenate", "(", "self", ".", "data_test", ")", "\n", "self", ".", "targets_test", "=", "np", ".", "concatenate", "(", "self", ".", "targets_test", ")", "\n", "\n", "if", "extra_dataset", "==", "'imagenet_32'", ":", "\n", "            ", "self", ".", "aux_data", "=", "get_imagenet_32_datasets", "(", "'imagenet_32'", ",", "os", ".", "path", ".", "join", "(", "data_path", ",", "'imagenet_32'", ")", ")", "\n", "", "elif", "extra_dataset", "==", "'imagenet900'", ":", "\n", "            ", "ds", "=", "_get_datasets", "(", "'imagenet900'", ")", "[", "0", "]", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.data.incdataset._get_datasets": [[468, 470], ["incdataset._get_dataset", "dataset_names.split"], "function", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.data.incdataset._get_dataset"], ["\n", "", "", "@", "staticmethod", "\n", "def", "_map_new_class_index", "(", "y", ",", "order", ")", ":", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.data.incdataset._get_dataset": [[472, 497], ["dataset_name.lower().strip.lower().strip", "dataset_name.lower().strip.lower", "NotImplementedError"], "function", ["None"], ["return", "np", ".", "array", "(", "list", "(", "map", "(", "lambda", "x", ":", "order", ".", "index", "(", "x", ")", ",", "y", ")", ")", ")", "\n", "\n", "", "@", "staticmethod", "\n", "def", "_split_per_class", "(", "x", ",", "y", ",", "validation_split", "=", "0.", ")", ":", "\n", "        ", "\"\"\"Splits train data for a subset of validation data.\n\n        Split is done so that each class has a much data.\n        \"\"\"", "\n", "shuffled_indexes", "=", "np", ".", "random", ".", "permutation", "(", "x", ".", "shape", "[", "0", "]", ")", "\n", "x", "=", "x", "[", "shuffled_indexes", "]", "\n", "y", "=", "y", "[", "shuffled_indexes", "]", "\n", "\n", "x_val", ",", "y_val", "=", "[", "]", ",", "[", "]", "\n", "x_train", ",", "y_train", "=", "[", "]", ",", "[", "]", "\n", "\n", "for", "class_id", "in", "np", ".", "unique", "(", "y", ")", ":", "\n", "            ", "class_indexes", "=", "np", ".", "where", "(", "y", "==", "class_id", ")", "[", "0", "]", "\n", "nb_val_elts", "=", "int", "(", "class_indexes", ".", "shape", "[", "0", "]", "*", "validation_split", ")", "\n", "\n", "val_indexes", "=", "class_indexes", "[", ":", "nb_val_elts", "]", "\n", "train_indexes", "=", "class_indexes", "[", "nb_val_elts", ":", "]", "\n", "\n", "x_val", ".", "append", "(", "x", "[", "val_indexes", "]", ")", "\n", "y_val", ".", "append", "(", "y", "[", "val_indexes", "]", ")", "\n", "x_train", ".", "append", "(", "x", "[", "train_indexes", "]", ")", "\n", "y_train", ".", "append", "(", "y", "[", "train_indexes", "]", ")", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.data.datasets.DataHandler.set_custom_transforms": [[24, 27], ["NotImplementedError"], "methods", ["None"], ["def", "set_custom_transforms", "(", "self", ",", "transforms", ")", ":", "\n", "        ", "if", "transforms", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Not implemented for modified transforms.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.data.datasets.iCIFAR10.set_custom_transforms": [[41, 45], ["torchvision.transforms.get", "inclearn.utils.LOGGER.LOGGER.info", "torchvision.datasets.iCIFAR10.train_transforms.pop"], "methods", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.get"], ["def", "set_custom_transforms", "(", "self", ",", "transforms", ")", ":", "\n", "        ", "if", "not", "transforms", ".", "get", "(", "\"color_jitter\"", ")", ":", "\n", "            ", "logger", ".", "LOGGER", ".", "info", "(", "\"Not using color jitter.\"", ")", "\n", "self", ".", "train_transforms", ".", "pop", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.data.datasets.iPermutedMNIST._preprocess_initial_data": [[70, 79], ["data.reshape.reshape.reshape", "numpy.random.permutation", "data.reshape.reshape.reshape"], "methods", ["None"], ["    ", "def", "_preprocess_initial_data", "(", "self", ",", "data", ")", ":", "\n", "        ", "b", ",", "w", ",", "h", ",", "c", "=", "data", ".", "shape", "\n", "data", "=", "data", ".", "reshape", "(", "b", ",", "-", "1", ",", "c", ")", "\n", "\n", "permutation", "=", "np", ".", "random", ".", "permutation", "(", "w", "*", "h", ")", "\n", "\n", "data", "=", "data", "[", ":", ",", "permutation", ",", ":", "]", "\n", "\n", "return", "data", ".", "reshape", "(", "b", ",", "w", ",", "h", ",", "c", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.data.datasets.ImageNet100.set_custom_transforms": [[101, 105], ["torchvision.transforms.get", "inclearn.utils.LOGGER.LOGGER.info", "torchvision.datasets.ImageNet100.train_transforms.pop"], "methods", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.get"], ["def", "set_custom_transforms", "(", "self", ",", "transforms", ")", ":", "\n", "        ", "if", "not", "transforms", ".", "get", "(", "\"color_jitter\"", ")", ":", "\n", "            ", "logger", ".", "LOGGER", ".", "info", "(", "\"Not using color jitter.\"", ")", "\n", "self", ".", "train_transforms", ".", "pop", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.data.datasets.ImageNet100.base_dataset": [[106, 132], ["print", "os.path.join", "numpy.array", "warnings.warn", "open", "line.strip().split", "torchvision.datasets.ImageNet100.data.append", "torchvision.datasets.ImageNet100.targets.append", "os.path.join", "int", "line.strip"], "methods", ["None"], ["", "", "def", "base_dataset", "(", "self", ",", "data_path", ",", "train", "=", "True", ",", "download", "=", "False", ")", ":", "\n", "        ", "if", "download", ":", "\n", "            ", "warnings", ".", "warn", "(", "\n", "\"ImageNet incremental dataset cannot download itself,\"", "\n", "\" please see the instructions in the README.\"", "\n", ")", "\n", "\n", "", "split", "=", "\"train\"", "if", "train", "else", "\"val\"", "\n", "\n", "print", "(", "\"Loading metadata of ImageNet_{} ({} split).\"", ".", "format", "(", "self", ".", "imagenet_size", ",", "split", ")", ")", "\n", "metadata_path", "=", "os", ".", "path", ".", "join", "(", "\n", "data_path", "if", "self", ".", "metadata_path", "is", "None", "else", "self", ".", "metadata_path", ",", "\n", "\"{}_{}{}.txt\"", ".", "format", "(", "split", ",", "self", ".", "imagenet_size", ",", "self", ".", "suffix", ")", "\n", ")", "\n", "\n", "self", ".", "data", ",", "self", ".", "targets", "=", "[", "]", ",", "[", "]", "\n", "with", "open", "(", "metadata_path", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ":", "\n", "                ", "path", ",", "target", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "\" \"", ")", "\n", "\n", "self", ".", "data", ".", "append", "(", "os", ".", "path", ".", "join", "(", "data_path", ",", "path", ")", ")", "\n", "self", ".", "targets", ".", "append", "(", "int", "(", "target", ")", ")", "\n", "\n", "", "", "self", ".", "data", "=", "np", ".", "array", "(", "self", ".", "data", ")", "\n", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.data.datasets.TinyImageNet200.set_custom_transforms": [[158, 166], ["transforms_dict.get", "transforms_dict.get", "inclearn.utils.LOGGER.LOGGER.info", "torchvision.datasets.TinyImageNet200.train_transforms.pop", "inclearn.utils.LOGGER.LOGGER.info", "torchvision.transforms.RandomCrop", "transforms_dict.get", "transforms_dict.get"], "methods", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.get", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.get", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.get", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.get"], ["open_image", "=", "True", "\n", "\n", "class_order", "=", "list", "(", "range", "(", "200", ")", ")", "\n", "\n", "def", "set_custom_transforms", "(", "self", ",", "transforms_dict", ")", ":", "\n", "        ", "if", "not", "transforms_dict", ".", "get", "(", "\"color_jitter\"", ")", ":", "\n", "            ", "logger", ".", "LOGGER", ".", "info", "(", "\"Not using color jitter.\"", ")", "\n", "self", ".", "train_transforms", ".", "pop", "(", "-", "1", ")", "\n", "", "if", "transforms_dict", ".", "get", "(", "\"crop\"", ")", ":", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.data.datasets.TinyImageNet200.base_dataset": [[168, 175], ["torchvision.datasets.TinyImageNet200._train_dataset", "torchvision.datasets.TinyImageNet200._val_dataset"], "methods", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.data.datasets.TinyImageNet200._train_dataset", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.data.datasets.TinyImageNet200._val_dataset"], ["self", ".", "train_transforms", "[", "0", "]", "=", "transforms", ".", "RandomCrop", "(", "\n", "64", ",", "padding", "=", "transforms_dict", ".", "get", "(", "\"crop\"", ")", "\n", ")", "\n", "\n", "", "", "def", "base_dataset", "(", "self", ",", "data_path", ",", "train", "=", "True", ",", "download", "=", "False", ")", ":", "\n", "        ", "if", "train", ":", "\n", "            ", "self", ".", "_train_dataset", "(", "data_path", ")", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.data.datasets.TinyImageNet200._train_dataset": [[176, 188], ["os.path.join", "enumerate", "numpy.array", "os.listdir", "glob.glob", "torchvision.datasets.TinyImageNet200.data.extend", "torchvision.datasets.TinyImageNet200.targets.extend", "os.path.join", "range", "len"], "methods", ["None"], ["            ", "self", ".", "_val_dataset", "(", "data_path", ")", "\n", "\n", "", "return", "self", "\n", "\n", "", "def", "_train_dataset", "(", "self", ",", "data_path", ")", ":", "\n", "        ", "self", ".", "data", ",", "self", ".", "targets", "=", "[", "]", ",", "[", "]", "\n", "\n", "train_dir", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "\"train\"", ")", "\n", "for", "class_id", ",", "class_name", "in", "enumerate", "(", "os", ".", "listdir", "(", "train_dir", ")", ")", ":", "\n", "            ", "paths", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "train_dir", ",", "class_name", ",", "\"images\"", ",", "\"*.JPEG\"", ")", ")", "\n", "targets", "=", "[", "class_id", "for", "_", "in", "range", "(", "len", "(", "paths", ")", ")", "]", "\n", "\n", "self", ".", "data", ".", "extend", "(", "paths", ")", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.data.datasets.TinyImageNet200._val_dataset": [[189, 209], ["numpy.array", "open", "enumerate", "torchvision.datasets.TinyImageNet200.classes2id.items", "os.path.join", "line.split", "torchvision.datasets.TinyImageNet200.data.append", "torchvision.datasets.TinyImageNet200.targets.append", "os.listdir", "os.path.join", "os.path.join"], "methods", ["None"], ["self", ".", "targets", ".", "extend", "(", "targets", ")", "\n", "\n", "", "self", ".", "data", "=", "np", ".", "array", "(", "self", ".", "data", ")", "\n", "\n", "", "def", "_val_dataset", "(", "self", ",", "data_path", ")", ":", "\n", "        ", "self", ".", "data", ",", "self", ".", "targets", "=", "[", "]", ",", "[", "]", "\n", "\n", "self", ".", "classes2id", "=", "{", "\n", "class_name", ":", "class_id", "\n", "for", "class_id", ",", "class_name", "in", "enumerate", "(", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "data_path", ",", "\"train\"", ")", ")", ")", "\n", "}", "\n", "self", ".", "id2classes", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "self", ".", "classes2id", ".", "items", "(", ")", "}", "\n", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "data_path", ",", "\"val\"", ",", "\"val_annotations.txt\"", ")", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ":", "\n", "                ", "split_line", "=", "line", ".", "split", "(", "\"\\t\"", ")", "\n", "\n", "path", ",", "class_label", "=", "split_line", "[", "0", "]", ",", "split_line", "[", "1", "]", "\n", "class_id", "=", "self", ".", "classes2id", "[", "class_label", "]", "\n", "\n", "self", ".", "data", ".", "append", "(", "os", ".", "path", ".", "join", "(", "data_path", ",", "\"val\"", ",", "\"images\"", ",", "path", ")", ")", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.data.datasets.AwA2._create_class_mapping": [[231, 251], ["open", "enumerate", "open", "enumerate", "open", "enumerate", "len", "len", "os.path.join", "f.readlines", "os.path.join", "f.readlines", "torchvision.datasets.AwA2.class_order.append", "os.path.join", "f.readlines", "torchvision.datasets.AwA2.class_order.append", "set", "label_to_id.items", "len", "line.strip().split", "line.strip", "line.strip", "line.strip"], "methods", ["None"], ["open_image", "=", "True", "\n", "\n", "class_order", "=", "None", "\n", "\n", "def", "_create_class_mapping", "(", "self", ",", "path", ")", ":", "\n", "        ", "label_to_id", "=", "{", "}", "\n", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "path", ",", "\"classes.txt\"", ")", ",", "\"r\"", ")", "as", "f", ":", "\n", "            ", "for", "i", ",", "line", "in", "enumerate", "(", "f", ".", "readlines", "(", ")", ")", ":", "\n", "                ", "label_to_id", "[", "line", ".", "strip", "(", ")", ".", "split", "(", "\"\\t\"", ")", "[", "1", "]", "]", "=", "i", "\n", "\n", "", "", "self", ".", "class_order", "=", "[", "]", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "path", ",", "\"trainclasses.txt\"", ")", ",", "\"r\"", ")", "as", "f", ":", "\n", "            ", "for", "i", ",", "line", "in", "enumerate", "(", "f", ".", "readlines", "(", ")", ")", ":", "\n", "                ", "self", ".", "class_order", ".", "append", "(", "label_to_id", "[", "line", ".", "strip", "(", ")", "]", ")", "\n", "\n", "", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "path", ",", "\"testclasses.txt\"", ")", ",", "\"r\"", ")", "as", "f", ":", "\n", "            ", "for", "j", ",", "line", "in", "enumerate", "(", "f", ".", "readlines", "(", ")", ",", "start", "=", "len", "(", "self", ".", "class_order", ")", ")", ":", "\n", "                ", "self", ".", "class_order", ".", "append", "(", "label_to_id", "[", "line", ".", "strip", "(", ")", "]", ")", "\n", "", "", "assert", "len", "(", "set", "(", "self", ".", "class_order", ")", ")", "==", "len", "(", "self", ".", "class_order", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.data.datasets.AwA2.set_custom_transforms": [[252, 254], ["None"], "methods", ["None"], ["id_to_label", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "label_to_id", ".", "items", "(", ")", "}", "\n", "\n", "return", "label_to_id", ",", "id_to_label", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.data.datasets.AwA2.base_dataset": [[255, 294], ["os.path.join", "torchvision.datasets.AwA2._create_class_mapping", "collections.defaultdict", "os.listdir", "collections.defaultdict.items", "numpy.concatenate", "numpy.array", "os.path.exists", "os.makedirs", "os.path.join", "glob.iglob", "numpy.random.RandomState", "numpy.random.RandomState.permutation", "paths.append", "targets.extend", "os.path.join", "data[].append", "len", "math.floor", "math.ceil", "numpy.array", "len", "len", "range", "len"], "methods", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.data.datasets.LAD._create_class_mapping"], ["\n", "", "def", "set_custom_transforms", "(", "self", ",", "transforms_dict", ")", ":", "\n", "        ", "pass", "\n", "\n", "", "def", "base_dataset", "(", "self", ",", "data_path", ",", "train", "=", "True", ",", "download", "=", "False", ")", ":", "\n", "        ", "directory", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "\"awa2\"", ",", "\"Animals_with_Attributes2\"", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "directory", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "directory", ",", "exist_ok", "=", "True", ")", "\n", "pass", "\n", "\n", "", "label_to_id", ",", "id_to_label", "=", "self", ".", "_create_class_mapping", "(", "directory", ")", "\n", "\n", "data", "=", "collections", ".", "defaultdict", "(", "list", ")", "\n", "for", "class_directory", "in", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "directory", ",", "\"JPEGImages\"", ")", ")", ":", "\n", "            ", "class_id", "=", "label_to_id", "[", "class_directory", "]", "\n", "\n", "for", "image_path", "in", "glob", ".", "iglob", "(", "\n", "os", ".", "path", ".", "join", "(", "directory", ",", "\"JPEGImages\"", ",", "class_directory", ",", "\"*jpg\"", ")", "\n", ")", ":", "\n", "                ", "data", "[", "class_id", "]", ".", "append", "(", "image_path", ")", "\n", "\n", "", "", "paths", "=", "[", "]", "\n", "targets", "=", "[", "]", "\n", "for", "class_id", ",", "class_paths", "in", "data", ".", "items", "(", ")", ":", "\n", "            ", "rnd_state", "=", "np", ".", "random", ".", "RandomState", "(", "seed", "=", "1", ")", "\n", "indexes", "=", "rnd_state", ".", "permutation", "(", "len", "(", "class_paths", ")", ")", "\n", "\n", "if", "train", ":", "\n", "                ", "subset", "=", "math", ".", "floor", "(", "len", "(", "indexes", ")", "*", "(", "1", "-", "self", ".", "test_split", ")", ")", "\n", "indexes", "=", "indexes", "[", ":", "subset", "]", "\n", "", "else", ":", "\n", "                ", "subset", "=", "math", ".", "ceil", "(", "len", "(", "indexes", ")", "*", "self", ".", "test_split", ")", "\n", "indexes", "=", "indexes", "[", "subset", ":", "]", "\n", "\n", "", "paths", ".", "append", "(", "np", ".", "array", "(", "class_paths", ")", "[", "indexes", "]", ")", "\n", "targets", ".", "extend", "(", "[", "class_id", "for", "_", "in", "range", "(", "len", "(", "indexes", ")", ")", "]", ")", "\n", "\n", "", "self", ".", "data", "=", "np", ".", "concatenate", "(", "paths", ")", "\n", "self", ".", "targets", "=", "np", ".", "array", "(", "targets", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.data.datasets.CUB200._create_class_mapping": [[332, 343], ["open", "enumerate", "os.path.join", "f.readlines", "torchvision.datasets.CUB200.class_order.append", "label_to_id.items", "line.strip().split", "line.strip"], "methods", ["None"], ["93", ",", "69", ",", "96", ",", "90", ",", "103", ",", "126", ",", "160", ",", "48", ",", "168", ",", "147", ",", "112", ",", "86", ",", "162", ",", "135", ",", "187", ",", "\n", "83", ",", "25", ",", "3", ",", "131", ",", "167", "# unseen classes", "\n", "]", "# yapf: disable", "\n", "\n", "def", "_create_class_mapping", "(", "self", ",", "path", ")", ":", "\n", "        ", "label_to_id", "=", "{", "}", "\n", "\n", "self", ".", "class_order", "=", "[", "]", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "path", ",", "\"classes.txt\"", ")", ",", "\"r\"", ")", "as", "f", ":", "\n", "            ", "for", "i", ",", "line", "in", "enumerate", "(", "f", ".", "readlines", "(", ")", ")", ":", "\n", "                ", "label_to_id", "[", "line", ".", "strip", "(", ")", ".", "split", "(", "\" \"", ")", "[", "1", "]", "]", "=", "i", "\n", "self", ".", "class_order", ".", "append", "(", "i", ")", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.data.datasets.CUB200.set_custom_transforms": [[344, 346], ["None"], "methods", ["None"], ["\n", "", "", "id_to_label", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "label_to_id", ".", "items", "(", ")", "}", "\n", "return", "label_to_id", ",", "id_to_label", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.data.datasets.CUB200.base_dataset": [[347, 384], ["os.path.join", "torchvision.datasets.CUB200._create_class_mapping", "set", "collections.defaultdict", "sorted", "torchvision.datasets.CUB200._convert", "os.path.exists", "os.makedirs", "open", "os.listdir", "sorted", "os.path.join", "line.split", "os.path.join", "os.listdir", "os.path.join", "int", "set.add", "os.path.join", "os.path.join.endswith", "data[].append", "int"], "methods", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.data.datasets.LAD._create_class_mapping", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.data.datasets.CUB200._convert", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.add"], ["\n", "", "def", "set_custom_transforms", "(", "self", ",", "transforms_dict", ")", ":", "\n", "        ", "pass", "\n", "\n", "", "def", "base_dataset", "(", "self", ",", "data_path", ",", "train", "=", "True", ",", "download", "=", "False", ")", ":", "\n", "        ", "directory", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "\"CUB_200_2011\"", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "directory", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "directory", ",", "exist_ok", "=", "True", ")", "\n", "pass", "\n", "\n", "", "label_to_id", ",", "id_to_label", "=", "self", ".", "_create_class_mapping", "(", "directory", ")", "\n", "\n", "train_set", "=", "set", "(", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "directory", ",", "\"train_test_split.txt\"", ")", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ":", "\n", "                ", "line_id", ",", "set_id", "=", "line", ".", "split", "(", "\" \"", ")", "\n", "if", "int", "(", "set_id", ")", "==", "1", ":", "\n", "                    ", "train_set", ".", "add", "(", "int", "(", "line_id", ")", ")", "\n", "\n", "", "", "", "c", "=", "1", "\n", "data", "=", "collections", ".", "defaultdict", "(", "list", ")", "\n", "for", "class_directory", "in", "sorted", "(", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "directory", ",", "\"images\"", ")", ")", ")", ":", "\n", "            ", "class_id", "=", "label_to_id", "[", "class_directory", "]", "\n", "\n", "for", "image_path", "in", "sorted", "(", "\n", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "directory", ",", "\"images\"", ",", "class_directory", ")", ")", "\n", ")", ":", "\n", "                ", "if", "not", "image_path", ".", "endswith", "(", "\"jpg\"", ")", ":", "\n", "                    ", "continue", "\n", "\n", "", "image_path", "=", "os", ".", "path", ".", "join", "(", "directory", ",", "\"images\"", ",", "class_directory", ",", "image_path", ")", "\n", "\n", "if", "(", "c", "in", "train_set", "and", "train", ")", "or", "(", "c", "not", "in", "train_set", "and", "not", "train", ")", ":", "\n", "                    ", "data", "[", "class_id", "]", ".", "append", "(", "image_path", ")", "\n", "", "c", "+=", "1", "\n", "\n", "", "", "self", ".", "data", ",", "self", ".", "targets", "=", "self", ".", "_convert", "(", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.data.datasets.CUB200._convert": [[385, 394], ["torch.items", "paths.extend", "targets.extend", "numpy.array", "numpy.array", "range", "len"], "methods", ["None"], ["self", ".", "label_to_id", ",", "self", ".", "id_to_label", "=", "label_to_id", ",", "id_to_label", "\n", "\n", "return", "self", "\n", "\n", "", "@", "staticmethod", "\n", "def", "_convert", "(", "data", ")", ":", "\n", "        ", "paths", "=", "[", "]", "\n", "targets", "=", "[", "]", "\n", "for", "class_id", ",", "class_paths", "in", "data", ".", "items", "(", ")", ":", "\n", "            ", "paths", ".", "extend", "(", "class_paths", ")", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.data.datasets.APY._create_class_mapping": [[423, 432], ["open", "enumerate", "os.path.join", "f.readlines", "label_to_id.items", "line.strip"], "methods", ["None"], ["20", ",", "21", ",", "22", ",", "23", ",", "24", ",", "25", ",", "26", ",", "27", ",", "\n", "28", ",", "29", ",", "30", ",", "31", "# unseen classes from yahoo", "\n", "]", "# yapf: disable", "\n", "\n", "def", "_create_class_mapping", "(", "self", ",", "path", ")", ":", "\n", "        ", "label_to_id", "=", "{", "}", "\n", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "path", ",", "\"class_names.txt\"", ")", ",", "\"r\"", ")", "as", "f", ":", "\n", "            ", "for", "i", ",", "line", "in", "enumerate", "(", "f", ".", "readlines", "(", ")", ")", ":", "\n", "                ", "label_to_id", "[", "line", ".", "strip", "(", ")", "]", "=", "i", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.data.datasets.APY.set_custom_transforms": [[433, 435], ["None"], "methods", ["None"], ["\n", "", "", "id_to_label", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "label_to_id", ".", "items", "(", ")", "}", "\n", "return", "label_to_id", ",", "id_to_label", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.data.datasets.APY.base_dataset": [[436, 477], ["os.path.join", "torchvision.datasets.APY._create_class_mapping", "numpy.array", "numpy.array", "numpy.unique", "numpy.concatenate", "numpy.concatenate", "print", "open", "numpy.random.RandomState", "int", "min", "numpy.random.RandomState.choice", "torchvision.datasets.APY.data.append", "torchvision.datasets.APY.targets.append", "os.path.join", "line.split", "numpy.array.append", "numpy.array.append", "numpy.where", "os.path.join", "len", "len", "len", "len", "t.strip"], "methods", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.data.datasets.LAD._create_class_mapping"], ["\n", "", "def", "set_custom_transforms", "(", "self", ",", "transforms_dict", ")", ":", "\n", "        ", "pass", "\n", "\n", "", "def", "base_dataset", "(", "self", ",", "data_path", ",", "train", "=", "True", ",", "download", "=", "False", ")", ":", "\n", "        ", "directory", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "\"APY\"", ")", "\n", "\n", "label_to_id", ",", "id_to_label", "=", "self", ".", "_create_class_mapping", "(", "directory", ")", "\n", "\n", "paths", ",", "targets", "=", "[", "]", ",", "[", "]", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "directory", ",", "\"data.txt\"", ")", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ":", "\n", "                ", "p", ",", "t", "=", "line", ".", "split", "(", "\",\"", ")", "\n", "paths", ".", "append", "(", "os", ".", "path", ".", "join", "(", "data_path", ",", "p", ")", ")", "\n", "targets", ".", "append", "(", "label_to_id", "[", "t", ".", "strip", "(", ")", "]", ")", "\n", "\n", "", "", "paths", "=", "np", ".", "array", "(", "paths", ")", "\n", "targets", "=", "np", ".", "array", "(", "targets", ")", "\n", "\n", "self", ".", "data", ",", "self", ".", "targets", "=", "[", "]", ",", "[", "]", "\n", "for", "class_id", "in", "np", ".", "unique", "(", "targets", ")", ":", "\n", "            ", "rnd_state", "=", "np", ".", "random", ".", "RandomState", "(", "seed", "=", "1", ")", "\n", "\n", "indexes", "=", "np", ".", "where", "(", "class_id", "==", "targets", ")", "[", "0", "]", "\n", "\n", "test_amount", "=", "int", "(", "len", "(", "indexes", ")", "*", "self", ".", "test_split", ")", "\n", "test_amount", "=", "min", "(", "test_amount", ",", "self", ".", "test_max_cap", ")", "\n", "\n", "if", "train", ":", "\n", "                ", "amount", "=", "len", "(", "indexes", ")", "-", "test_amount", "\n", "", "else", ":", "\n", "                ", "amount", "=", "test_amount", "\n", "\n", "", "indexes", "=", "rnd_state", ".", "choice", "(", "indexes", ",", "size", "=", "amount", ",", "replace", "=", "False", ")", "\n", "\n", "self", ".", "data", ".", "append", "(", "paths", "[", "indexes", "]", ")", "\n", "self", ".", "targets", ".", "append", "(", "targets", "[", "indexes", "]", ")", "\n", "\n", "", "self", ".", "data", "=", "np", ".", "concatenate", "(", "self", ".", "data", ")", "\n", "self", ".", "targets", "=", "np", ".", "concatenate", "(", "self", ".", "targets", ")", "\n", "\n", "self", ".", "label_to_id", ",", "self", ".", "id_to_label", "=", "label_to_id", ",", "id_to_label", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.data.datasets.LAD._create_class_mapping": [[494, 507], ["open", "enumerate", "os.path.join", "torchvision.datasets.LAD.class_order.append", "label_to_id.items", "line.strip().split", "line.strip"], "methods", ["None"], ["]", "\n", "\n", "open_image", "=", "True", "\n", "\n", "def", "_create_class_mapping", "(", "self", ",", "path", ")", ":", "\n", "        ", "label_to_id", "=", "{", "}", "\n", "\n", "label_to_id", "=", "{", "}", "\n", "self", ".", "class_order", "=", "[", "]", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "path", ",", "\"label_list.txt\"", ")", ")", "as", "f", ":", "\n", "            ", "for", "i", ",", "line", "in", "enumerate", "(", "f", ")", ":", "\n", "                ", "c", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "\", \"", ")", "[", "1", "]", "\n", "label_to_id", "[", "c", "]", "=", "i", "\n", "self", ".", "class_order", ".", "append", "(", "i", ")", "# Classes are already in the right order.", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.data.datasets.LAD.set_custom_transforms": [[508, 510], ["None"], "methods", ["None"], ["\n", "", "", "id_to_label", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "label_to_id", ".", "items", "(", ")", "}", "\n", "return", "label_to_id", ",", "id_to_label", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.data.datasets.LAD.base_dataset": [[511, 555], ["os.path.join", "torchvision.datasets.LAD._create_class_mapping", "os.path.join", "os.listdir", "numpy.array", "numpy.array", "numpy.unique", "numpy.concatenate", "numpy.concatenate", "print", "os.path.join", "glob.iglob", "numpy.random.RandomState", "numpy.random.RandomState.choice", "torchvision.datasets.LAD.data.append", "torchvision.datasets.LAD.targets.append", "os.path.join", "numpy.array.append", "numpy.array.append", "numpy.where", "int", "int", "os.path.join.split", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.data.datasets.LAD._create_class_mapping"], ["\n", "", "def", "set_custom_transforms", "(", "self", ",", "transforms_dict", ")", ":", "\n", "        ", "pass", "\n", "\n", "", "def", "base_dataset", "(", "self", ",", "data_path", ",", "train", "=", "True", ",", "download", "=", "False", ")", ":", "\n", "        ", "directory", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "\"LAD\"", ")", "\n", "\n", "label_to_id", ",", "id_to_label", "=", "self", ".", "_create_class_mapping", "(", "directory", ")", "\n", "\n", "paths", "=", "[", "]", "\n", "targets", "=", "[", "]", "\n", "\n", "base_path", "=", "os", ".", "path", ".", "join", "(", "directory", ",", "\"images/\"", ")", "\n", "for", "class_folder", "in", "os", ".", "listdir", "(", "base_path", ")", ":", "\n", "            ", "class_name", "=", "\"_\"", ".", "join", "(", "class_folder", ".", "split", "(", "\"_\"", ")", "[", "1", ":", "]", ")", "\n", "class_id", "=", "label_to_id", "[", "class_name", "]", "\n", "class_folder", "=", "os", ".", "path", ".", "join", "(", "base_path", ",", "class_folder", ")", "\n", "\n", "for", "image_path", "in", "glob", ".", "iglob", "(", "os", ".", "path", ".", "join", "(", "class_folder", ",", "\"*jpg\"", ")", ")", ":", "\n", "                ", "paths", ".", "append", "(", "image_path", ")", "\n", "targets", ".", "append", "(", "class_id", ")", "\n", "\n", "", "", "paths", "=", "np", ".", "array", "(", "paths", ")", "\n", "targets", "=", "np", ".", "array", "(", "targets", ")", "\n", "\n", "self", ".", "data", ",", "self", ".", "targets", "=", "[", "]", ",", "[", "]", "\n", "for", "class_id", "in", "np", ".", "unique", "(", "targets", ")", ":", "\n", "            ", "rnd_state", "=", "np", ".", "random", ".", "RandomState", "(", "seed", "=", "1", ")", "\n", "\n", "indexes", "=", "np", ".", "where", "(", "class_id", "==", "targets", ")", "[", "0", "]", "\n", "\n", "if", "train", ":", "\n", "                ", "amount", "=", "int", "(", "len", "(", "indexes", ")", "*", "(", "1", "-", "self", ".", "test_split", ")", ")", "\n", "", "else", ":", "\n", "                ", "amount", "=", "int", "(", "len", "(", "indexes", ")", "*", "self", ".", "test_split", ")", "\n", "\n", "", "indexes", "=", "rnd_state", ".", "choice", "(", "indexes", ",", "size", "=", "amount", ",", "replace", "=", "False", ")", "\n", "\n", "self", ".", "data", ".", "append", "(", "paths", "[", "indexes", "]", ")", "\n", "self", ".", "targets", ".", "append", "(", "targets", "[", "indexes", "]", ")", "\n", "\n", "", "self", ".", "data", "=", "np", ".", "concatenate", "(", "self", ".", "data", ")", "\n", "self", ".", "targets", "=", "np", ".", "concatenate", "(", "self", ".", "targets", ")", "\n", "\n", "self", ".", "label_to_id", ",", "self", ".", "id_to_label", "=", "label_to_id", ",", "id_to_label", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.data.datasets.AuxDataset.__init__": [[558, 562], ["None"], "methods", ["None"], ["return", "self", "\n", "\n", "\n", "", "", "class", "AuxDataset", "(", "data", ".", "Dataset", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "img_data", ",", "transform", ")", ":", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.data.datasets.AuxDataset.__getitem__": [[563, 568], ["PIL.Image.fromarray", "torchvision.datasets.AuxDataset.transform"], "methods", ["None"], ["        ", "self", ".", "x", "=", "img_data", "[", "'x'", "]", "\n", "self", ".", "y", "=", "img_data", "[", "'y'", "]", "\n", "self", ".", "transform", "=", "transform", "\n", "\n", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "x", "=", "Image", ".", "fromarray", "(", "self", ".", "x", "[", "index", "]", ")", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.data.datasets.AuxDataset.__len__": [[569, 571], ["None"], "methods", ["None"], ["x", "=", "self", ".", "transform", "(", "x", ")", "\n", "out", "=", "{", "'inputs'", ":", "x", ",", "'tragets'", ":", "self", ".", "y", "[", "index", "]", "}", "\n", "return", "out", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.data.datasets.get_imagenet_32_datasets": [[573, 602], ["range", "np.vstack.append", "enumerate", "numpy.vstack", "numpy.concatenate", "torchvision.transforms.Compose", "datasets.AuxDataset", "np.vstack.append", "np.concatenate.append", "open", "pickle.load", "numpy.array", "pickle.load.reshape().transpose", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "open", "pickle.load", "os.path.join", "os.path.join", "numpy.array", "pickle.load.reshape"], "function", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "x", ".", "shape", "[", "0", "]", "\n", "\n", "\n", "", "", "def", "get_imagenet_32_datasets", "(", "dataset", ",", "path", ")", ":", "\n", "    ", "assert", "'imagenet_32'", "in", "dataset", "\n", "import", "pickle", "\n", "# load data", "\n", "x_trn", ",", "y_trn", "=", "[", "]", ",", "[", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "11", ")", ":", "\n", "        ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "path", ",", "'train_data_batch_{}'", ".", "format", "(", "i", ")", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "d", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "x_trn", ".", "append", "(", "d", "[", "'data'", "]", ")", "\n", "y_trn", ".", "append", "(", "np", ".", "array", "(", "d", "[", "'labels'", "]", ")", "-", "1", ")", "# labels from 0 to 999", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "path", ",", "'val_data'", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "d", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "x_trn", ".", "append", "(", "d", "[", "'data'", "]", ")", "\n", "y_tst", "=", "np", ".", "array", "(", "d", "[", "'labels'", "]", ")", "-", "1", "# labels from 0 to 999", "\n", "# reshape data", "\n", "for", "i", ",", "d", "in", "enumerate", "(", "x_trn", ",", "0", ")", ":", "\n", "        ", "x_trn", "[", "i", "]", "=", "d", ".", "reshape", "(", "d", ".", "shape", "[", "0", "]", ",", "3", ",", "32", ",", "32", ")", ".", "transpose", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "", "x_tst", "=", "x_trn", "[", "-", "1", "]", "\n", "x_trn", "=", "np", ".", "vstack", "(", "x_trn", "[", ":", "-", "1", "]", ")", "\n", "y_trn", "=", "np", ".", "concatenate", "(", "y_trn", ")", "\n", "trn_data", "=", "{", "'x'", ":", "x_trn", ",", "'y'", ":", "y_trn", "}", "\n", "tst_data", "=", "{", "'x'", ":", "x_tst", ",", "'y'", ":", "y_tst", "}", "\n", "\n", "common_transforms", "=", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.4914", ",", "0.4822", ",", "0.4465", ")", ",", "(", "0.2023", ",", "0.1994", ",", "0.2010", ")", ")", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.data.samplers.AuxSampler.point_current_classes": [[227, 229], ["None"], "methods", ["None"], ["self", ".", "_class_counter", "[", "class_index", "]", "+=", "self", ".", "n_samples", "\n", "\n", "if", "self", ".", "_class_counter", "[", "class_index", "]", "+", "self", ".", "n_samples", ">", "len", "(", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.losses.RKD.RKdAngle.forward": [[20, 35], ["torch.normalize", "torch.normalize", "torch.normalize", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.smooth_l1_loss", "torch.smooth_l1_loss", "torch.smooth_l1_loss", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.normalize", "torch.normalize", "torch.normalize", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "student.unsqueeze", "student.unsqueeze", "teacher.unsqueeze", "teacher.unsqueeze", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.normalize.transpose", "torch.normalize.transpose"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "student", ",", "teacher", ")", ":", "\n", "# N x C", "\n", "# N x N x C", "\n", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "td", "=", "(", "teacher", ".", "unsqueeze", "(", "0", ")", "-", "teacher", ".", "unsqueeze", "(", "1", ")", ")", "\n", "norm_td", "=", "F", ".", "normalize", "(", "td", ",", "p", "=", "2", ",", "dim", "=", "2", ")", "\n", "t_angle", "=", "torch", ".", "bmm", "(", "norm_td", ",", "norm_td", ".", "transpose", "(", "1", ",", "2", ")", ")", ".", "view", "(", "-", "1", ")", "\n", "\n", "", "sd", "=", "(", "student", ".", "unsqueeze", "(", "0", ")", "-", "student", ".", "unsqueeze", "(", "1", ")", ")", "\n", "norm_sd", "=", "F", ".", "normalize", "(", "sd", ",", "p", "=", "2", ",", "dim", "=", "2", ")", "\n", "s_angle", "=", "torch", ".", "bmm", "(", "norm_sd", ",", "norm_sd", ".", "transpose", "(", "1", ",", "2", ")", ")", ".", "view", "(", "-", "1", ")", "\n", "\n", "loss", "=", "F", ".", "smooth_l1_loss", "(", "s_angle", ",", "t_angle", ",", "reduction", "=", "'elementwise_mean'", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.losses.RKD.RkdDistance.forward": [[38, 50], ["RKD.pdist", "d[].mean", "torch.smooth_l1_loss", "torch.smooth_l1_loss", "torch.smooth_l1_loss", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "RKD.pdist", "t_d[].mean"], "methods", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.losses.RKD.pdist", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.losses.RKD.pdist"], ["    ", "def", "forward", "(", "self", ",", "student", ",", "teacher", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "t_d", "=", "pdist", "(", "teacher", ",", "squared", "=", "False", ")", "\n", "mean_td", "=", "t_d", "[", "t_d", ">", "0", "]", ".", "mean", "(", ")", "\n", "t_d", "=", "t_d", "/", "mean_td", "\n", "\n", "", "d", "=", "pdist", "(", "student", ",", "squared", "=", "False", ")", "\n", "mean_d", "=", "d", "[", "d", ">", "0", "]", ".", "mean", "(", ")", "\n", "d", "=", "d", "/", "mean_d", "\n", "\n", "loss", "=", "F", ".", "smooth_l1_loss", "(", "d", ",", "t_d", ",", "reduction", "=", "'elementwise_mean'", ")", "\n", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.losses.RKD.pdist": [[6, 17], ["e.pow().sum", "res.sqrt.clone", "e.t", "res.sqrt.sqrt", "e.pow", "range", "range", "e.pow().sum.unsqueeze", "e.pow().sum.unsqueeze", "len", "len"], "function", ["None"], ["def", "pdist", "(", "e", ",", "squared", "=", "False", ",", "eps", "=", "1e-12", ")", ":", "\n", "    ", "e_square", "=", "e", ".", "pow", "(", "2", ")", ".", "sum", "(", "dim", "=", "1", ")", "\n", "prod", "=", "e", "@", "e", ".", "t", "(", ")", "\n", "res", "=", "(", "e_square", ".", "unsqueeze", "(", "1", ")", "+", "e_square", ".", "unsqueeze", "(", "0", ")", "-", "2", "*", "prod", ")", ".", "clamp", "(", "min", "=", "eps", ")", "\n", "\n", "if", "not", "squared", ":", "\n", "        ", "res", "=", "res", ".", "sqrt", "(", ")", "\n", "\n", "", "res", "=", "res", ".", "clone", "(", ")", "\n", "res", "[", "range", "(", "len", "(", "e", ")", ")", ",", "range", "(", "len", "(", "e", ")", ")", "]", "=", "0", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.losses.distillation.mer_loss": [[11, 27], ["torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.mean", "torch.log"], "function", ["None"], ["def", "mer_loss", "(", "new_logits", ",", "old_logits", ")", ":", "\n", "    ", "\"\"\"Distillation loss that is less important if the new model is unconfident.\n\n    Reference:\n        * Kim et al.\n          Incremental Learning with Maximum Entropy Regularization: Rethinking\n          Forgetting and Intransigence.\n\n    :param new_logits: Logits from the new (student) model.\n    :param old_logits: Logits from the old (teacher) model.\n    :return: A float scalar loss.\n    \"\"\"", "\n", "new_probs", "=", "F", ".", "softmax", "(", "new_logits", ",", "dim", "=", "-", "1", ")", "\n", "old_probs", "=", "F", ".", "softmax", "(", "old_logits", ",", "dim", "=", "-", "1", ")", "\n", "\n", "return", "torch", ".", "mean", "(", "(", "(", "new_probs", "-", "old_probs", ")", "*", "torch", ".", "log", "(", "new_probs", ")", ")", ".", "sum", "(", "-", "1", ")", ",", "dim", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.losses.distillation.pod": [[29, 98], ["torch.tensor().to", "enumerate", "len", "len", "zip", "torch.pow", "torch.pow", "torch.mean", "len", "torch.tensor", "torch.cat.sum().view", "torch.cat.sum().view", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.frobenius_norm", "len", "torch.cat.sum().view", "torch.cat.sum().view", "torch.cat.sum", "torch.cat.sum", "torch.cat.sum().view", "torch.cat.sum().view", "torch.cat.sum", "torch.cat.sum", "torch.cat.sum", "torch.cat.sum", "torch.nn.functional.adaptive_avg_pool2d", "torch.nn.functional.adaptive_avg_pool2d", "torch.cat.sum().view", "torch.cat.sum().view", "torch.cat.sum().view", "torch.cat.sum().view", "torch.cat", "torch.cat", "ValueError", "torch.cat.sum", "torch.cat.sum", "torch.cat.sum", "torch.cat.sum"], "function", ["None"], ["", "def", "pod", "(", "\n", "list_attentions_a", ",", "\n", "list_attentions_b", ",", "\n", "collapse_channels", "=", "\"spatial\"", ",", "\n", "normalize", "=", "True", ",", "\n", "memory_flags", "=", "None", ",", "\n", "only_old", "=", "False", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "    ", "\"\"\"Pooled Output Distillation.\n\n    Reference:\n        * Douillard et al.\n          Small Task Incremental Learning.\n          arXiv 2020.\n\n    :param list_attentions_a: A list of attention maps, each of shape (b, n, w, h).\n    :param list_attentions_b: A list of attention maps, each of shape (b, n, w, h).\n    :param collapse_channels: How to pool the channels.\n    :param memory_flags: Integer flags denoting exemplars.\n    :param only_old: Only apply loss to exemplars.\n    :return: A float scalar loss.\n    \"\"\"", "\n", "assert", "len", "(", "list_attentions_a", ")", "==", "len", "(", "list_attentions_b", ")", "\n", "\n", "loss", "=", "torch", ".", "tensor", "(", "0.", ")", ".", "to", "(", "list_attentions_a", "[", "0", "]", ".", "device", ")", "\n", "for", "i", ",", "(", "a", ",", "b", ")", "in", "enumerate", "(", "zip", "(", "list_attentions_a", ",", "list_attentions_b", ")", ")", ":", "\n", "# shape of (b, n, w, h)", "\n", "        ", "assert", "a", ".", "shape", "==", "b", ".", "shape", ",", "(", "a", ".", "shape", ",", "b", ".", "shape", ")", "\n", "\n", "if", "only_old", ":", "\n", "            ", "a", "=", "a", "[", "memory_flags", "==", "0", "]", "\n", "b", "=", "b", "[", "memory_flags", "==", "0", "]", "\n", "if", "len", "(", "a", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "\n", "", "", "a", "=", "torch", ".", "pow", "(", "a", ",", "2", ")", "\n", "b", "=", "torch", ".", "pow", "(", "b", ",", "2", ")", "\n", "\n", "if", "collapse_channels", "==", "\"channels\"", ":", "\n", "            ", "a", "=", "a", ".", "sum", "(", "dim", "=", "1", ")", ".", "view", "(", "a", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "# shape of (b, w * h)", "\n", "b", "=", "b", ".", "sum", "(", "dim", "=", "1", ")", ".", "view", "(", "b", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "", "elif", "collapse_channels", "==", "\"width\"", ":", "\n", "            ", "a", "=", "a", ".", "sum", "(", "dim", "=", "2", ")", ".", "view", "(", "a", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "# shape of (b, c * h)", "\n", "b", "=", "b", ".", "sum", "(", "dim", "=", "2", ")", ".", "view", "(", "b", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "", "elif", "collapse_channels", "==", "\"height\"", ":", "\n", "            ", "a", "=", "a", ".", "sum", "(", "dim", "=", "3", ")", ".", "view", "(", "a", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "# shape of (b, c * w)", "\n", "b", "=", "b", ".", "sum", "(", "dim", "=", "3", ")", ".", "view", "(", "b", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "", "elif", "collapse_channels", "==", "\"gap\"", ":", "\n", "            ", "a", "=", "F", ".", "adaptive_avg_pool2d", "(", "a", ",", "(", "1", ",", "1", ")", ")", "[", "...", ",", "0", ",", "0", "]", "\n", "b", "=", "F", ".", "adaptive_avg_pool2d", "(", "b", ",", "(", "1", ",", "1", ")", ")", "[", "...", ",", "0", ",", "0", "]", "\n", "", "elif", "collapse_channels", "==", "\"spatial\"", ":", "\n", "            ", "a_h", "=", "a", ".", "sum", "(", "dim", "=", "3", ")", ".", "view", "(", "a", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "b_h", "=", "b", ".", "sum", "(", "dim", "=", "3", ")", ".", "view", "(", "b", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "a_w", "=", "a", ".", "sum", "(", "dim", "=", "2", ")", ".", "view", "(", "a", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "b_w", "=", "b", ".", "sum", "(", "dim", "=", "2", ")", ".", "view", "(", "b", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "a", "=", "torch", ".", "cat", "(", "[", "a_h", ",", "a_w", "]", ",", "dim", "=", "-", "1", ")", "\n", "b", "=", "torch", ".", "cat", "(", "[", "b_h", ",", "b_w", "]", ",", "dim", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Unknown method to collapse: {}\"", ".", "format", "(", "collapse_channels", ")", ")", "\n", "\n", "", "if", "normalize", ":", "\n", "            ", "a", "=", "F", ".", "normalize", "(", "a", ",", "dim", "=", "1", ",", "p", "=", "2", ")", "\n", "b", "=", "F", ".", "normalize", "(", "b", ",", "dim", "=", "1", ",", "p", "=", "2", ")", "\n", "\n", "", "layer_loss", "=", "torch", ".", "mean", "(", "torch", ".", "frobenius_norm", "(", "a", "-", "b", ",", "dim", "=", "-", "1", ")", ")", "\n", "loss", "+=", "layer_loss", "\n", "\n", "", "return", "loss", "/", "len", "(", "list_attentions_a", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.losses.distillation.pod_v2": [[100, 143], ["torch.tensor().to", "enumerate", "len", "len", "zip", "distillation.compute_collapsed_features", "torch.mean", "len", "torch.tensor", "torch.frobenius_norm", "len"], "function", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.losses.distillation.compute_collapsed_features"], ["", "def", "pod_v2", "(", "\n", "list_attentions_a", ",", "\n", "list_attentions_b", ",", "\n", "collapse_channels", "=", "\"spatial\"", ",", "\n", "normalize", "=", "True", ",", "\n", "mixed_memory_flags", "=", "None", ",", "\n", "old_memory_flags", "=", "None", ",", "\n", "only_old", "=", "True", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "    ", "\"\"\"Pooled Output Distillation.\n\n    Reference:\n        * Douillard et al.\n          Small Task Incremental Learning.\n          arXiv 2020.\n\n    :param list_attentions_a: A list of attention maps, each of shape (b, n, w, h).\n    :param list_attentions_b: A list of attention maps, each of shape (b, n, w, h).\n    :param collapse_channels: How to pool the channels.\n    :param memory_flags: Integer flags denoting exemplars.\n    :param only_old: Only apply loss to exemplars.\n    :return: A float scalar loss.\n    \"\"\"", "\n", "assert", "len", "(", "list_attentions_a", ")", "==", "len", "(", "list_attentions_b", ")", "\n", "\n", "loss", "=", "torch", ".", "tensor", "(", "0.", ")", ".", "to", "(", "list_attentions_a", "[", "0", "]", ".", "device", ")", "\n", "for", "i", ",", "(", "a", ",", "b", ")", "in", "enumerate", "(", "zip", "(", "list_attentions_a", ",", "list_attentions_b", ")", ")", ":", "\n", "# shape of (b, n, w, h)", "\n", "# assert a.shape == b.shape, (a.shape, b.shape)", "\n", "\n", "        ", "if", "only_old", ":", "\n", "            ", "a", "=", "a", "[", "mixed_memory_flags", "==", "1", "]", "\n", "b", "=", "b", "[", "old_memory_flags", "==", "1", "]", "\n", "if", "len", "(", "a", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "\n", "", "", "a", ",", "b", "=", "compute_collapsed_features", "(", "a", ",", "b", ",", "collapse_channels", ",", "normalize", ")", "\n", "\n", "layer_loss", "=", "torch", ".", "mean", "(", "torch", ".", "frobenius_norm", "(", "a", "-", "b", ",", "dim", "=", "-", "1", ")", ")", "\n", "loss", "+=", "layer_loss", "\n", "\n", "", "return", "loss", "/", "len", "(", "list_attentions_a", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.losses.distillation.pod_consis_v3": [[145, 190], ["torch.tensor().to", "enumerate", "len", "len", "zip", "distillation.compute_collapsed_features", "inclearn.lib.losses.pairwise_cos_distance", "inclearn.lib.losses.pairwise_cos_distance", "torch.nn.functional.smooth_l1_loss", "len", "torch.tensor", "len"], "function", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.losses.distillation.compute_collapsed_features", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.losses.base.pairwise_cos_distance", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.losses.base.pairwise_cos_distance"], ["", "def", "pod_consis_v3", "(", "\n", "list_attentions_a", ",", "\n", "list_attentions_b", ",", "\n", "collapse_channels", "=", "\"spatial\"", ",", "\n", "normalize", "=", "True", ",", "\n", "mixed_memory_flags", "=", "None", ",", "\n", "old_memory_flags", "=", "None", ",", "\n", "only_old", "=", "True", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "    ", "\"\"\"Pooled Output Distillation.\n\n    Reference:\n        * Douillard et al.\n          Small Task Incremental Learning.\n          arXiv 2020.\n\n    :param list_attentions_a: A list of attention maps, each of shape (b, n, w, h).\n    :param list_attentions_b: A list of attention maps, each of shape (b, n, w, h).\n    :param collapse_channels: How to pool the channels.\n    :param memory_flags: Integer flags denoting exemplars.\n    :param only_old: Only apply loss to exemplars.\n    :return: A float scalar loss.\n    \"\"\"", "\n", "assert", "len", "(", "list_attentions_a", ")", "==", "len", "(", "list_attentions_b", ")", "\n", "\n", "loss", "=", "torch", ".", "tensor", "(", "0.", ")", ".", "to", "(", "list_attentions_a", "[", "0", "]", ".", "device", ")", "\n", "for", "i", ",", "(", "a", ",", "b", ")", "in", "enumerate", "(", "zip", "(", "list_attentions_a", ",", "list_attentions_b", ")", ")", ":", "\n", "# shape of (b, n, w, h)", "\n", "# assert a.shape == b.shape, (a.shape, b.shape)", "\n", "\n", "        ", "if", "only_old", ":", "\n", "            ", "a", "=", "a", "[", "mixed_memory_flags", "==", "1", "]", "\n", "b", "=", "b", "[", "old_memory_flags", "==", "1", "]", "\n", "if", "len", "(", "a", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "\n", "", "", "a", ",", "b", "=", "compute_collapsed_features", "(", "a", ",", "b", ",", "collapse_channels", ",", "normalize", ")", "\n", "\n", "a_m", "=", "pairwise_cos_distance", "(", "a", ",", "a", ")", "\n", "b_m", "=", "pairwise_cos_distance", "(", "b", ",", "b", ")", "\n", "layer_loss", "=", "F", ".", "smooth_l1_loss", "(", "a_m", ",", "b_m", ")", "\n", "loss", "+=", "layer_loss", "\n", "\n", "", "return", "loss", "/", "len", "(", "list_attentions_a", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.losses.distillation.pod_consis_v4": [[192, 249], ["torch.tensor().to", "torch.unique", "len", "len", "torch.cat", "torch.cat", "distillation.compute_collapsed_features", "inclearn.lib.losses.pairwise_cos_distance", "inclearn.lib.losses.pairwise_cos_distance", "torch.nn.functional.l1_loss", "len", "torch.tensor", "len", "cls.item", "cls.item", "torch.unique"], "function", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.losses.distillation.compute_collapsed_features", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.losses.base.pairwise_cos_distance", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.losses.base.pairwise_cos_distance"], ["", "def", "pod_consis_v4", "(", "\n", "list_attentions_a", ",", "\n", "list_attentions_b", ",", "\n", "targets", ",", "\n", "u_targets", ",", "\n", "collapse_channels", "=", "\"spatial\"", ",", "\n", "normalize", "=", "True", ",", "\n", "mixed_memory_flags", "=", "None", ",", "\n", "old_memory_flags", "=", "None", ",", "\n", "only_old", "=", "True", ",", "\n", "split_class", "=", "True", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "    ", "\"\"\"Pooled Output Distillation.\n\n    Reference:\n        * Douillard et al.\n          Small Task Incremental Learning.\n          arXiv 2020.\n\n    :param list_attentions_a: A list of attention maps, each of shape (b, n, w, h).\n    :param list_attentions_b: A list of attention maps, each of shape (b, n, w, h).\n    :param collapse_channels: How to pool the channels.\n    :param memory_flags: Integer flags denoting exemplars.\n    :param only_old: Only apply loss to exemplars.\n    :return: A float scalar loss.\n    \"\"\"", "\n", "assert", "len", "(", "list_attentions_a", ")", "==", "len", "(", "list_attentions_b", ")", "==", "2", "# [labeled, unlabeled],[labeled_old, unlabeled_old]", "\n", "\n", "loss", "=", "torch", ".", "tensor", "(", "0.", ")", ".", "to", "(", "list_attentions_a", "[", "0", "]", ".", "device", ")", "\n", "labeled_new", ",", "unlabeled_new", "=", "list_attentions_a", "[", "0", "]", ",", "list_attentions_a", "[", "1", "]", "\n", "labeled_old", ",", "unlabeled_old", "=", "list_attentions_b", "[", "0", "]", ",", "list_attentions_b", "[", "1", "]", "\n", "\n", "if", "only_old", ":", "\n", "        ", "labeled_new", "=", "labeled_new", "[", "mixed_memory_flags", "==", "1", "]", "\n", "labeled_old", "=", "labeled_old", "[", "old_memory_flags", "==", "1", "]", "\n", "targets", "=", "targets", "[", "mixed_memory_flags", "==", "1", "]", "\n", "if", "len", "(", "labeled_new", ")", "==", "0", ":", "\n", "            ", "return", "loss", "\n", "", "", "for", "cls", "in", "torch", ".", "unique", "(", "targets", ")", ":", "\n", "        ", "l_mask", "=", "targets", "==", "cls", ".", "item", "(", ")", "\n", "u_mask", "=", "u_targets", "==", "cls", ".", "item", "(", ")", "\n", "cls_labeled_new", "=", "labeled_new", "[", "l_mask", "]", "\n", "cls_labeled_old", "=", "labeled_old", "[", "l_mask", "]", "\n", "cls_unlabeled_new", "=", "unlabeled_new", "[", "u_mask", "]", "\n", "cls_unlabeled_old", "=", "unlabeled_old", "[", "u_mask", "]", "\n", "cls_new", "=", "torch", ".", "cat", "(", "(", "cls_labeled_new", ",", "cls_unlabeled_new", ")", ",", "dim", "=", "0", ")", "\n", "cls_old", "=", "torch", ".", "cat", "(", "(", "cls_labeled_old", ",", "cls_unlabeled_old", ")", ",", "dim", "=", "0", ")", "\n", "a", ",", "b", "=", "compute_collapsed_features", "(", "cls_new", ",", "cls_old", ",", "collapse_channels", ",", "normalize", ")", "\n", "a_m", "=", "pairwise_cos_distance", "(", "a", ",", "a", ")", "\n", "b_m", "=", "pairwise_cos_distance", "(", "b", ",", "b", ")", "\n", "a_m", "=", "a_m", "[", "a_m", ">", "0", "]", "\n", "b_m", "=", "b_m", "[", "b_m", ">", "0", "]", "\n", "layer_loss", "=", "F", ".", "l1_loss", "(", "a_m", ",", "b_m", ")", "\n", "loss", "+=", "layer_loss", "\n", "\n", "", "return", "loss", "/", "len", "(", "torch", ".", "unique", "(", "targets", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.losses.distillation.compute_collapsed_features": [[7, 12], ["distillation.compute_collapsed_features_single", "distillation.compute_collapsed_features_single"], "function", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.losses.distillation.compute_collapsed_features_single", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.losses.distillation.compute_collapsed_features_single"], ["from", "inclearn", ".", "lib", "import", "vizualization", "\n", "from", "inclearn", ".", "lib", ".", "losses", "import", "pairwise_cos_distance", "\n", "\n", "\n", "def", "mer_loss", "(", "new_logits", ",", "old_logits", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.losses.distillation.compute_collapsed_features_single": [[13, 32], ["torch.pow", "torch.cat.sum().view", "torch.nn.functional.normalize", "torch.cat.sum().view", "torch.cat.sum", "torch.cat.sum().view", "torch.cat.sum", "torch.cat.sum", "torch.nn.functional.adaptive_avg_pool2d", "torch.cat.sum().view", "torch.cat.sum().view", "torch.cat", "ValueError", "torch.cat.sum", "torch.cat.sum"], "function", ["None"], ["\n", "new_probs", "=", "F", ".", "softmax", "(", "new_logits", ",", "dim", "=", "-", "1", ")", "\n", "old_probs", "=", "F", ".", "softmax", "(", "old_logits", ",", "dim", "=", "-", "1", ")", "\n", "\n", "return", "torch", ".", "mean", "(", "(", "(", "new_probs", "-", "old_probs", ")", "*", "torch", ".", "log", "(", "new_probs", ")", ")", ".", "sum", "(", "-", "1", ")", ",", "dim", "=", "0", ")", "\n", "\n", "\n", "", "def", "pod", "(", "\n", "list_attentions_a", ",", "\n", "list_attentions_b", ",", "\n", "collapse_channels", "=", "\"spatial\"", ",", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.losses.distillation.spatial_pyramid_pooling": [[276, 326], ["torch.tensor().to", "enumerate", "zip", "torch.pow", "torch.pow", "enumerate", "torch.tensor", "F.max_pool2d.view", "F.max_pool2d.view", "torch.frobenius_norm().mean", "ValueError", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.max_pool2d", "torch.nn.functional.max_pool2d", "ValueError", "torch.frobenius_norm"], "function", ["None"], ["", "def", "spatial_pyramid_pooling", "(", "\n", "list_attentions_a", ",", "\n", "list_attentions_b", ",", "\n", "levels", "=", "[", "1", ",", "2", "]", ",", "\n", "pool_type", "=", "\"avg\"", ",", "\n", "weight_by_level", "=", "True", ",", "\n", "normalize", "=", "True", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "    ", "loss", "=", "torch", ".", "tensor", "(", "0.", ")", ".", "to", "(", "list_attentions_a", "[", "0", "]", ".", "device", ")", "\n", "\n", "for", "i", ",", "(", "a", ",", "b", ")", "in", "enumerate", "(", "zip", "(", "list_attentions_a", ",", "list_attentions_b", ")", ")", ":", "\n", "# shape of (b, n, w, h)", "\n", "        ", "assert", "a", ".", "shape", "==", "b", ".", "shape", "\n", "\n", "a", "=", "torch", ".", "pow", "(", "a", ",", "2", ")", "\n", "b", "=", "torch", ".", "pow", "(", "b", ",", "2", ")", "\n", "\n", "for", "j", ",", "level", "in", "enumerate", "(", "levels", ")", ":", "\n", "            ", "if", "level", ">", "a", ".", "shape", "[", "2", "]", ":", "\n", "                ", "raise", "ValueError", "(", "\n", "\"Level {} is too big for spatial dim ({}, {}).\"", ".", "format", "(", "\n", "level", ",", "a", ".", "shape", "[", "2", "]", ",", "a", ".", "shape", "[", "3", "]", "\n", ")", "\n", ")", "\n", "", "kernel_size", "=", "level", "//", "level", "\n", "\n", "if", "pool_type", "==", "\"avg\"", ":", "\n", "                ", "a_pooled", "=", "F", ".", "avg_pool2d", "(", "a", ",", "(", "kernel_size", ",", "kernel_size", ")", ")", "\n", "b_pooled", "=", "F", ".", "avg_pool2d", "(", "b", ",", "(", "kernel_size", ",", "kernel_size", ")", ")", "\n", "", "elif", "pool_type", "==", "\"max\"", ":", "\n", "                ", "a_pooled", "=", "F", ".", "max_pool2d", "(", "a", ",", "(", "kernel_size", ",", "kernel_size", ")", ")", "\n", "b_pooled", "=", "F", ".", "max_pool2d", "(", "b", ",", "(", "kernel_size", ",", "kernel_size", ")", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\"Invalid pool type {}.\"", ".", "format", "(", "pool_type", ")", ")", "\n", "\n", "", "a_features", "=", "a_pooled", ".", "view", "(", "a", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "b_features", "=", "b_pooled", ".", "view", "(", "b", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "\n", "if", "normalize", ":", "\n", "                ", "a_features", "=", "F", ".", "normalize", "(", "a_features", ",", "dim", "=", "-", "1", ")", "\n", "b_features", "=", "F", ".", "normalize", "(", "b_features", ",", "dim", "=", "-", "1", ")", "\n", "\n", "", "level_loss", "=", "torch", ".", "frobenius_norm", "(", "a_features", "-", "b_features", ",", "dim", "=", "-", "1", ")", ".", "mean", "(", "0", ")", "\n", "if", "weight_by_level", ":", "# Give less importance for smaller cells.", "\n", "                ", "level_loss", "*=", "1", "/", "2", "**", "j", "\n", "\n", "", "loss", "+=", "level_loss", "\n", "\n", "", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.losses.distillation.relative_teacher_distances": [[328, 356], ["torch.pdist", "torch.pdist", "torch.mean", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.abs", "ValueError"], "function", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.losses.RKD.pdist", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.losses.RKD.pdist"], ["", "def", "relative_teacher_distances", "(", "features_a", ",", "features_b", ",", "normalize", "=", "False", ",", "distance", "=", "\"l2\"", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Distillation loss between the teacher and the student comparing distances\n    instead of embeddings.\n\n    Reference:\n        * Lu Yu et al.\n          Learning Metrics from Teachers: Compact Networks for Image Embedding.\n          CVPR 2019.\n\n    :param features_a: ConvNet features of a model.\n    :param features_b: ConvNet features of a model.\n    :return: A float scalar loss.\n    \"\"\"", "\n", "if", "normalize", ":", "\n", "        ", "features_a", "=", "F", ".", "normalize", "(", "features_a", ",", "dim", "=", "-", "1", ",", "p", "=", "2", ")", "\n", "features_b", "=", "F", ".", "normalize", "(", "features_b", ",", "dim", "=", "-", "1", ",", "p", "=", "2", ")", "\n", "\n", "", "if", "distance", "==", "\"l2\"", ":", "\n", "        ", "p", "=", "2", "\n", "", "elif", "distance", "==", "\"l1\"", ":", "\n", "        ", "p", "=", "1", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Invalid distance for relative teacher {}.\"", ".", "format", "(", "distance", ")", ")", "\n", "\n", "", "pairwise_distances_a", "=", "torch", ".", "pdist", "(", "features_a", ",", "p", "=", "p", ")", "\n", "pairwise_distances_b", "=", "torch", ".", "pdist", "(", "features_b", ",", "p", "=", "p", ")", "\n", "\n", "return", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "pairwise_distances_a", "-", "pairwise_distances_b", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.losses.distillation.perceptual_features_reconstruction": [[358, 375], ["enumerate", "zip", "F.normalize.view", "F.normalize.view", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.mean", "len", "torch.nn.functional.pairwise_distance"], "function", ["None"], ["", "def", "perceptual_features_reconstruction", "(", "list_attentions_a", ",", "list_attentions_b", ",", "factor", "=", "1.", ")", ":", "\n", "    ", "loss", "=", "0.", "\n", "\n", "for", "i", ",", "(", "a", ",", "b", ")", "in", "enumerate", "(", "zip", "(", "list_attentions_a", ",", "list_attentions_b", ")", ")", ":", "\n", "        ", "bs", ",", "c", ",", "w", ",", "h", "=", "a", ".", "shape", "\n", "\n", "# a of shape (b, c, w, h) to (b, c * w * h)", "\n", "a", "=", "a", ".", "view", "(", "bs", ",", "-", "1", ")", "\n", "b", "=", "b", ".", "view", "(", "bs", ",", "-", "1", ")", "\n", "\n", "a", "=", "F", ".", "normalize", "(", "a", ",", "p", "=", "2", ",", "dim", "=", "-", "1", ")", "\n", "b", "=", "F", ".", "normalize", "(", "b", ",", "p", "=", "2", ",", "dim", "=", "-", "1", ")", "\n", "\n", "layer_loss", "=", "(", "F", ".", "pairwise_distance", "(", "a", ",", "b", ",", "p", "=", "2", ")", "**", "2", ")", "/", "(", "c", "*", "w", "*", "h", ")", "\n", "loss", "+=", "torch", ".", "mean", "(", "layer_loss", ")", "\n", "\n", "", "return", "factor", "*", "(", "loss", "/", "len", "(", "list_attentions_a", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.losses.distillation.perceptual_style_reconstruction": [[377, 393], ["enumerate", "zip", "a.view.view", "b.view.view", "layer_loss.mean", "torch.bmm", "torch.bmm", "torch.frobenius_norm", "len", "a.view.transpose", "b.view.transpose"], "function", ["None"], ["", "def", "perceptual_style_reconstruction", "(", "list_attentions_a", ",", "list_attentions_b", ",", "factor", "=", "1.", ")", ":", "\n", "    ", "loss", "=", "0.", "\n", "\n", "for", "i", ",", "(", "a", ",", "b", ")", "in", "enumerate", "(", "zip", "(", "list_attentions_a", ",", "list_attentions_b", ")", ")", ":", "\n", "        ", "bs", ",", "c", ",", "w", ",", "h", "=", "a", ".", "shape", "\n", "\n", "a", "=", "a", ".", "view", "(", "bs", ",", "c", ",", "w", "*", "h", ")", "\n", "b", "=", "b", ".", "view", "(", "bs", ",", "c", ",", "w", "*", "h", ")", "\n", "\n", "gram_a", "=", "torch", ".", "bmm", "(", "a", ",", "a", ".", "transpose", "(", "2", ",", "1", ")", ")", "/", "(", "c", "*", "w", "*", "h", ")", "\n", "gram_b", "=", "torch", ".", "bmm", "(", "b", ",", "b", ".", "transpose", "(", "2", ",", "1", ")", ")", "/", "(", "c", "*", "w", "*", "h", ")", "\n", "\n", "layer_loss", "=", "torch", ".", "frobenius_norm", "(", "gram_a", "-", "gram_b", ",", "dim", "=", "(", "1", ",", "2", ")", ")", "**", "2", "\n", "loss", "+=", "layer_loss", ".", "mean", "(", ")", "\n", "\n", "", "return", "factor", "*", "(", "loss", "/", "len", "(", "list_attentions_a", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.losses.distillation.gradcam_distillation": [[395, 423], ["distillation._compute_gradcam_attention", "distillation._compute_gradcam_attention", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.abs().sum", "len", "len", "_compute_gradcam_attention.view", "_compute_gradcam_attention.view", "torch.mean", "torch.abs"], "function", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.losses.distillation._compute_gradcam_attention", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.losses.distillation._compute_gradcam_attention"], ["", "def", "gradcam_distillation", "(", "gradients_a", ",", "gradients_b", ",", "activations_a", ",", "activations_b", ",", "factor", "=", "1", ")", ":", "\n", "    ", "\"\"\"Distillation loss between gradcam-generated attentions of two models.\n\n    References:\n        * Dhar et al.\n          Learning without Memorizing\n          CVPR 2019\n\n    :param base_logits: [description]\n    :param list_attentions_a: [description]\n    :param list_attentions_b: [description]\n    :param factor: [description], defaults to 1\n    :return: [description]\n    \"\"\"", "\n", "attentions_a", "=", "_compute_gradcam_attention", "(", "gradients_a", ",", "activations_a", ")", "\n", "attentions_b", "=", "_compute_gradcam_attention", "(", "gradients_b", ",", "activations_b", ")", "\n", "\n", "assert", "len", "(", "attentions_a", ".", "shape", ")", "==", "len", "(", "attentions_b", ".", "shape", ")", "==", "4", "\n", "assert", "attentions_a", ".", "shape", "==", "attentions_b", ".", "shape", "\n", "\n", "batch_size", "=", "attentions_a", ".", "shape", "[", "0", "]", "\n", "\n", "flat_attention_a", "=", "F", ".", "normalize", "(", "attentions_a", ".", "view", "(", "batch_size", ",", "-", "1", ")", ",", "p", "=", "2", ",", "dim", "=", "-", "1", ")", "\n", "flat_attention_b", "=", "F", ".", "normalize", "(", "attentions_b", ".", "view", "(", "batch_size", ",", "-", "1", ")", ",", "p", "=", "2", ",", "dim", "=", "-", "1", ")", "\n", "\n", "distances", "=", "torch", ".", "abs", "(", "flat_attention_a", "-", "flat_attention_b", ")", ".", "sum", "(", "-", "1", ")", "\n", "\n", "return", "factor", "*", "torch", ".", "mean", "(", "distances", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.losses.distillation._compute_gradcam_attention": [[425, 428], ["torch.nn.functional.adaptive_avg_pool2d", "torch.nn.functional.relu"], "function", ["None"], ["", "def", "_compute_gradcam_attention", "(", "gradients", ",", "activations", ")", ":", "\n", "    ", "alpha", "=", "F", ".", "adaptive_avg_pool2d", "(", "gradients", ",", "(", "1", ",", "1", ")", ")", "\n", "return", "F", ".", "relu", "(", "alpha", "*", "activations", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.losses.distillation.mmd": [[430, 460], ["F.normalize.view", "F.normalize.view", "torch.sqrt", "len", "torch.mean", "distillation._get_mmd_factor", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.pairwise_distance", "torch.pairwise_distance", "torch.pairwise_distance", "torch.exp().sum().squeeze", "torch.exp().sum().squeeze", "torch.exp().sum().squeeze", "torch.sum", "torch.pow", "torch.sum", "torch.pairwise_distance", "torch.exp().sum", "torch.exp().sum", "torch.exp().sum", "torch.sum", "torch.exp", "torch.exp", "torch.exp"], "function", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.losses.distillation._get_mmd_factor"], ["", "def", "mmd", "(", "x", ",", "y", ",", "sigmas", "=", "[", "1", ",", "5", ",", "10", "]", ",", "normalize", "=", "False", ")", ":", "\n", "    ", "\"\"\"Maximum Mean Discrepancy with several Gaussian kernels.\"\"\"", "\n", "# Flatten:", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "y", "=", "y", ".", "view", "(", "y", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "\n", "if", "len", "(", "sigmas", ")", "==", "0", ":", "\n", "        ", "mean_dist", "=", "torch", ".", "mean", "(", "torch", ".", "pow", "(", "torch", ".", "pairwise_distance", "(", "x", ",", "y", ",", "p", "=", "2", ")", ",", "2", ")", ")", "\n", "factors", "=", "(", "-", "1", "/", "(", "2", "*", "mean_dist", ")", ")", ".", "view", "(", "1", ",", "1", ",", "1", ")", "\n", "", "else", ":", "\n", "        ", "factors", "=", "_get_mmd_factor", "(", "sigmas", ",", "x", ".", "device", ")", "\n", "\n", "", "if", "normalize", ":", "\n", "        ", "x", "=", "F", ".", "normalize", "(", "x", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "y", "=", "F", ".", "normalize", "(", "y", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "\n", "", "xx", "=", "torch", ".", "pairwise_distance", "(", "x", ",", "x", ",", "p", "=", "2", ")", "**", "2", "\n", "yy", "=", "torch", ".", "pairwise_distance", "(", "y", ",", "y", ",", "p", "=", "2", ")", "**", "2", "\n", "xy", "=", "torch", ".", "pairwise_distance", "(", "x", ",", "y", ",", "p", "=", "2", ")", "**", "2", "\n", "\n", "k_xx", ",", "k_yy", ",", "k_xy", "=", "0", ",", "0", ",", "0", "\n", "\n", "div", "=", "1", "/", "(", "x", ".", "shape", "[", "1", "]", "**", "2", ")", "\n", "\n", "k_xx", "=", "div", "*", "torch", ".", "exp", "(", "factors", "*", "xx", ")", ".", "sum", "(", "0", ")", ".", "squeeze", "(", ")", "\n", "k_yy", "=", "div", "*", "torch", ".", "exp", "(", "factors", "*", "yy", ")", ".", "sum", "(", "0", ")", ".", "squeeze", "(", ")", "\n", "k_xy", "=", "div", "*", "torch", ".", "exp", "(", "factors", "*", "xy", ")", ".", "sum", "(", "0", ")", ".", "squeeze", "(", ")", "\n", "\n", "mmd_sq", "=", "torch", ".", "sum", "(", "k_xx", ")", "-", "2", "*", "torch", ".", "sum", "(", "k_xy", ")", "+", "torch", ".", "sum", "(", "k_yy", ")", "\n", "return", "torch", ".", "sqrt", "(", "mmd_sq", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.losses.distillation._get_mmd_factor": [[462, 467], ["functools.lru_cache", "[].to().float", "[].to", "torch.tensor"], "function", ["None"], ["", "@", "functools", ".", "lru_cache", "(", "maxsize", "=", "1", ",", "typed", "=", "False", ")", "\n", "def", "_get_mmd_factor", "(", "sigmas", ",", "device", ")", ":", "\n", "    ", "sigmas", "=", "torch", ".", "tensor", "(", "sigmas", ")", "[", ":", ",", "None", ",", "None", "]", ".", "to", "(", "device", ")", ".", "float", "(", ")", "\n", "sigmas", "=", "-", "1", "/", "(", "2", "*", "sigmas", ")", "\n", "return", "sigmas", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.losses.distillation.similarity_per_class": [[469, 528], ["targets[].to", "torch.unique", "memory_flags.bool", "torch.mm", "torch.clamp", "len", "ValueError", "sub_goal_features.mean.mean", "torch.nn.functional.normalize", "torch.mm", "torch.clamp", "len", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize"], "function", ["None"], ["", "def", "similarity_per_class", "(", "\n", "features", ",", "\n", "targets", ",", "\n", "goal_features", ",", "\n", "goal_targets", ",", "\n", "epoch", ",", "\n", "epochs", ",", "\n", "memory_flags", ",", "\n", "old_centroids_features", "=", "None", ",", "\n", "old_centroids_targets", "=", "None", ",", "\n", "factor", "=", "1.", ",", "\n", "scheduled", "=", "False", ",", "\n", "apply_centroids", "=", "True", ",", "\n", "initial_centroids", "=", "False", "\n", ")", ":", "\n", "    ", "loss", "=", "0.", "\n", "counter", "=", "0", "\n", "\n", "# We only keep new classes, no classes stored in memory", "\n", "indexes", "=", "~", "memory_flags", ".", "bool", "(", ")", "\n", "features", "=", "features", "[", "indexes", "]", "\n", "targets", "=", "targets", "[", "indexes", "]", ".", "to", "(", "features", ".", "device", ")", "\n", "\n", "for", "target", "in", "torch", ".", "unique", "(", "targets", ")", ":", "\n", "        ", "sub_features", "=", "features", "[", "targets", "==", "target", "]", "\n", "\n", "sub_goal_features", "=", "goal_features", "[", "goal_targets", "==", "target", "]", "\n", "if", "apply_centroids", ":", "\n", "            ", "sub_goal_features", "=", "sub_goal_features", ".", "mean", "(", "dim", "=", "0", ",", "keepdims", "=", "True", ")", "\n", "\n", "# We want the new real features to be similar to their old alter-ego ghosts:", "\n", "", "similarities", "=", "torch", ".", "mm", "(", "\n", "F", ".", "normalize", "(", "sub_features", ",", "dim", "=", "1", ",", "p", "=", "2", ")", ",", "\n", "F", ".", "normalize", "(", "sub_goal_features", ",", "dim", "=", "1", ",", "p", "=", "2", ")", ".", "T", "\n", ")", "\n", "loss", "+=", "torch", ".", "clamp", "(", "(", "1", "-", "similarities", ")", ".", "sum", "(", ")", ",", "min", "=", "0.", ")", "\n", "counter", "+=", "len", "(", "sub_features", ")", "\n", "\n", "if", "initial_centroids", ":", "\n", "# But we also want that the new real features stay close to what the", "\n", "# trained ConvNet though was best as first initialization:", "\n", "            ", "sub_centroids", "=", "old_centroids_features", "[", "old_centroids_targets", "==", "target", "]", "\n", "similarities", "=", "torch", ".", "mm", "(", "\n", "F", ".", "normalize", "(", "sub_features", ",", "dim", "=", "1", ",", "p", "=", "2", ")", ",", "F", ".", "normalize", "(", "sub_centroids", ".", "T", ",", "dim", "=", "1", ",", "p", "=", "2", ")", "\n", ")", "\n", "loss", "+=", "torch", ".", "clamp", "(", "(", "1", "-", "similarities", ")", ".", "sum", "(", ")", ",", "min", "=", "0.", ")", "\n", "counter", "+=", "len", "(", "sub_features", ")", "\n", "\n", "", "", "if", "counter", "==", "0", ":", "\n", "        ", "return", "0.", "\n", "", "loss", "=", "factor", "*", "(", "loss", "/", "counter", ")", "\n", "\n", "if", "scheduled", ":", "\n", "        ", "loss", "=", "(", "1", "-", "epoch", "/", "epochs", ")", "*", "loss", "\n", "\n", "", "if", "loss", "<", "0.", ":", "\n", "        ", "raise", "ValueError", "(", "f\"Negative loss value for PLC! (epoch={epoch}, epochs={epochs})\"", ")", "\n", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.losses.distillation.semantic_drift_compensation": [[530, 563], ["len", "len", "torch.no_grad", "torch.zeros().float().to", "torch.unique", "torch.pow", "torch.exp", "torch.zeros().float", "old_features_class.mean", "torch.norm", "tmp.sum", "torch.exp.sum", "torch.zeros"], "function", ["None"], ["", "def", "semantic_drift_compensation", "(", "old_features", ",", "new_features", ",", "targets", ",", "sigma", "=", "0.2", ")", ":", "\n", "    ", "\"\"\"Returns SDC drift.\n\n    # References:\n        * Semantic Drift Compensation for Class-Incremental Learning\n          Lu Yu et al.\n          CVPR 2020\n    \"\"\"", "\n", "assert", "len", "(", "old_features", ")", "==", "len", "(", "new_features", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "delta", "=", "new_features", "-", "old_features", "\n", "\n", "denominator", "=", "1", "/", "(", "2", "*", "sigma", "**", "2", ")", "\n", "\n", "drift", "=", "torch", ".", "zeros", "(", "new_features", ".", "shape", "[", "1", "]", ")", ".", "float", "(", ")", ".", "to", "(", "new_features", ".", "device", ")", "\n", "summed_w", "=", "0.", "\n", "for", "target", "in", "torch", ".", "unique", "(", "targets", ")", ":", "\n", "            ", "indexes", "=", "target", "==", "targets", "\n", "old_features_class", "=", "old_features", "[", "indexes", "]", "\n", "\n", "# Computing w, aka a weighting measuring how much an example", "\n", "# is representative based on its distance to the class mean.", "\n", "numerator", "=", "old_features_class", "-", "old_features_class", ".", "mean", "(", "dim", "=", "0", ")", "\n", "numerator", "=", "torch", ".", "pow", "(", "torch", ".", "norm", "(", "numerator", ",", "dim", "=", "1", ")", ",", "2", ")", "\n", "w", "=", "torch", ".", "exp", "(", "-", "numerator", "/", "denominator", ")", "\n", "\n", "tmp", "=", "(", "w", "[", "...", ",", "None", "]", "*", "delta", "[", "indexes", "]", ")", "\n", "drift", "=", "drift", "+", "tmp", ".", "sum", "(", "dim", "=", "0", ")", "\n", "summed_w", "=", "summed_w", "+", "w", ".", "sum", "(", ")", "\n", "", "drift", "=", "drift", "/", "summed_w", "\n", "\n", "", "return", "drift", "\n", "", ""]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.losses.base.SoftCrossEntropy.__init__": [[157, 160], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.tools.conv_mtl.Conv2dMtl.__init__"], ["", "class", "SoftCrossEntropy", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "reduction", "=", "'average'", ")", ":", "\n", "        ", "super", "(", "SoftCrossEntropy", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "reduction", "=", "reduction", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.losses.base.SoftCrossEntropy.forward": [[161, 169], ["torch.nn.functional.log_softmax", "torch.sum", "torch.sum", "torch.mul", "torch.mul"], "methods", ["None"], ["\n", "", "def", "forward", "(", "self", ",", "inputs", ",", "target", ")", ":", "\n", "        ", "log_likelihood", "=", "-", "F", ".", "log_softmax", "(", "inputs", ",", "dim", "=", "1", ")", "\n", "batch", "=", "inputs", ".", "shape", "[", "0", "]", "\n", "if", "self", ".", "reduction", "==", "'average'", ":", "\n", "            ", "loss", "=", "torch", ".", "sum", "(", "torch", ".", "mul", "(", "log_likelihood", ",", "target", ")", ")", "/", "batch", "\n", "", "else", ":", "\n", "            ", "loss", "=", "torch", ".", "sum", "(", "torch", ".", "mul", "(", "log_likelihood", ",", "target", ")", ")", "\n", "", "return", "loss", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.losses.base.binarize_and_smooth_labels": [[7, 15], ["torch.FloatTensor.cpu().numpy", "sklearn.preprocessing.label_binarize", "torch.FloatTensor", "torch.FloatTensor.cpu", "range"], "function", ["None"], ["def", "binarize_and_smooth_labels", "(", "T", ",", "nb_classes", ",", "smoothing_const", "=", "0.1", ")", ":", "\n", "    ", "import", "sklearn", ".", "preprocessing", "\n", "T", "=", "T", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "T", "=", "sklearn", ".", "preprocessing", ".", "label_binarize", "(", "T", ",", "classes", "=", "range", "(", "0", ",", "nb_classes", ")", ")", "\n", "T", "=", "T", "*", "(", "1", "-", "smoothing_const", ")", "\n", "T", "[", "T", "==", "0", "]", "=", "smoothing_const", "/", "(", "nb_classes", "-", "1", ")", "\n", "T", "=", "torch", ".", "FloatTensor", "(", "T", ")", "\n", "return", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.losses.base.cross_entropy_teacher_confidence": [[17, 41], ["memory_indexes.byte.byte", "torch.nn.functional.cross_entropy", "right_old_confidence.le", "torch.mean", "torch.cat", "torch.arange"], "function", ["None"], ["", "def", "cross_entropy_teacher_confidence", "(", "similarities", ",", "targets", ",", "old_confidence", ",", "memory_indexes", ")", ":", "\n", "    ", "memory_indexes", "=", "memory_indexes", ".", "byte", "(", ")", "\n", "\n", "per_sample_losses", "=", "F", ".", "cross_entropy", "(", "similarities", ",", "targets", ",", "reduction", "=", "\"none\"", ")", "\n", "\n", "memory_losses", "=", "per_sample_losses", "[", "memory_indexes", "]", "\n", "new_losses", "=", "per_sample_losses", "[", "~", "memory_indexes", "]", "\n", "\n", "memory_old_confidence", "=", "old_confidence", "[", "memory_indexes", "]", "\n", "memory_targets", "=", "targets", "[", "memory_indexes", "]", "\n", "\n", "right_old_confidence", "=", "memory_old_confidence", "[", "torch", ".", "arange", "(", "memory_old_confidence", ".", "shape", "[", "0", "]", ")", ",", "\n", "memory_targets", "]", "\n", "hard_indexes", "=", "right_old_confidence", ".", "le", "(", "0.5", ")", "\n", "\n", "factors", "=", "2", "*", "(", "1", "+", "(", "1", "-", "right_old_confidence", "[", "hard_indexes", "]", ")", ")", "\n", "\n", "loss", "=", "torch", ".", "mean", "(", "\n", "torch", ".", "cat", "(", "\n", "(", "new_losses", ",", "memory_losses", "[", "~", "hard_indexes", "]", ",", "memory_losses", "[", "hard_indexes", "]", "*", "factors", ")", "\n", ")", "\n", ")", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.losses.base.nca": [[43, 103], ["torch.zeros_like", "torch.nn.functional.cross_entropy", "torch.zeros_like", "torch.mean", "[].view", "torch.log", "torch.clamp", "torch.arange", "torch.exp().sum", "torch.arange", "torch.arange", "torch.arange", "similarities.max", "len", "len", "torch.exp"], "function", ["None"], ["", "def", "nca", "(", "\n", "similarities", ",", "\n", "targets", ",", "\n", "class_weights", "=", "None", ",", "\n", "focal_gamma", "=", "None", ",", "\n", "scale", "=", "1", ",", "\n", "margin", "=", "0.", ",", "\n", "exclude_pos_denominator", "=", "True", ",", "\n", "hinge_proxynca", "=", "False", ",", "\n", "memory_flags", "=", "None", ",", "\n", "mixed", "=", "True", ",", "\n", "reduction", "=", "'mean'", "\n", ")", ":", "\n", "    ", "\"\"\"Compute AMS cross-entropy loss.\n\n    Reference:\n        * Goldberger et al.\n          Neighbourhood components analysis.\n          NeuriPS 2005.\n        * Feng Wang et al.\n          Additive Margin Softmax for Face Verification.\n          Signal Processing Letters 2018.\n\n    :param similarities: Result of cosine similarities between weights and features.\n    :param targets: Sparse targets.\n    :param scale: Multiplicative factor, can be learned.\n    :param margin: Margin applied on the \"right\" (numerator) similarities.\n    :param memory_flags: Flags indicating memory samples, although it could indicate\n                         anything else.\n    :return: A float scalar loss.\n    \"\"\"", "\n", "if", "memory_flags", "is", "not", "None", "and", "not", "mixed", ":", "\n", "        ", "mask", "=", "memory_flags", "==", "2", "\n", "similarities", "=", "similarities", "[", "~", "mask", "]", "\n", "targets", "=", "targets", "[", "~", "mask", "]", "\n", "", "margins", "=", "torch", ".", "zeros_like", "(", "similarities", ")", "\n", "margins", "[", "torch", ".", "arange", "(", "margins", ".", "shape", "[", "0", "]", ")", ",", "targets", "]", "=", "margin", "\n", "similarities", "=", "scale", "*", "(", "similarities", "-", "margin", ")", "\n", "\n", "if", "exclude_pos_denominator", ":", "# NCA-specific", "\n", "        ", "similarities", "=", "similarities", "-", "similarities", ".", "max", "(", "1", ")", "[", "0", "]", ".", "view", "(", "-", "1", ",", "1", ")", "# Stability", "\n", "\n", "disable_pos", "=", "torch", ".", "zeros_like", "(", "similarities", ")", "\n", "disable_pos", "[", "torch", ".", "arange", "(", "len", "(", "similarities", ")", ")", ",", "\n", "targets", "]", "=", "similarities", "[", "torch", ".", "arange", "(", "len", "(", "similarities", ")", ")", ",", "targets", "]", "\n", "\n", "numerator", "=", "similarities", "[", "torch", ".", "arange", "(", "similarities", ".", "shape", "[", "0", "]", ")", ",", "targets", "]", "\n", "denominator", "=", "similarities", "-", "disable_pos", "\n", "\n", "losses", "=", "numerator", "-", "torch", ".", "log", "(", "torch", ".", "exp", "(", "denominator", ")", ".", "sum", "(", "-", "1", ")", ")", "\n", "if", "class_weights", "is", "not", "None", ":", "\n", "            ", "losses", "=", "class_weights", "[", "targets", "]", "*", "losses", "\n", "\n", "", "losses", "=", "-", "losses", "\n", "if", "hinge_proxynca", ":", "\n", "            ", "losses", "=", "torch", ".", "clamp", "(", "losses", ",", "min", "=", "0.", ")", "\n", "\n", "", "loss", "=", "torch", ".", "mean", "(", "losses", ")", "\n", "return", "loss", "\n", "\n", "", "return", "F", ".", "cross_entropy", "(", "similarities", ",", "targets", ",", "weight", "=", "class_weights", ",", "reduction", "=", "reduction", ")", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.losses.base.embeddings_similarity": [[105, 109], ["torch.nn.functional.cosine_embedding_loss", "torch.ones().to", "torch.ones"], "function", ["None"], ["\n", "", "def", "embeddings_similarity", "(", "features_a", ",", "features_b", ")", ":", "\n", "    ", "return", "F", ".", "cosine_embedding_loss", "(", "\n", "features_a", ",", "features_b", ",", "\n", "torch", ".", "ones", "(", "features_a", ".", "shape", "[", "0", "]", ")", ".", "to", "(", "features_a", ".", "device", ")", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.losses.base.pairwise_cos_distance": [[112, 121], ["torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.norm", "torch.pow"], "function", ["None"], ["\n", "", "def", "pairwise_cos_distance", "(", "features_a", ":", "torch", ".", "Tensor", ",", "features_b", ":", "torch", ".", "Tensor", ")", ":", "\n", "# normalize two features", "\n", "    ", "n_features_a", "=", "F", ".", "normalize", "(", "features_a", ",", "dim", "=", "1", ")", "\n", "n_features_b", "=", "F", ".", "normalize", "(", "features_b", ",", "dim", "=", "1", ")", "\n", "# calculate Euclidean distance", "\n", "euc_dist", "=", "torch", ".", "norm", "(", "n_features_a", "[", ":", ",", "None", "]", "-", "n_features_b", ",", "p", "=", "2", ",", "dim", "=", "2", ")", "\n", "# calculate cosine distance ( 1- cos(a,b) )", "\n", "cos_dist", "=", "0.5", "*", "(", "torch", ".", "pow", "(", "euc_dist", ",", "2", ")", ")", "\n", "return", "cos_dist", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.losses.base.ucir_ranking": [[123, 154], ["torch.zeros().to", "gt_index.scatter().ge.scatter().ge", "logits.masked_select", "targets.lt", "torch.nonzero().size", "torch.tensor().float", "logits[].topk", "gt_scores[].view().repeat", "torch.zeros", "gt_index.scatter().ge.scatter", "torch.nonzero", "gt_scores[].view().repeat.size", "max_novel_scores.size", "gt_scores[].view().repeat.size", "torch.nn.MarginRankingLoss", "gt_scores[].view().repeat.view", "max_novel_scores.view", "torch.ones().to", "torch.tensor", "logits.size", "targets.view", "gt_scores[].view", "torch.ones"], "function", ["None"], ["\n", "", "def", "ucir_ranking", "(", "logits", ",", "targets", ",", "n_classes", ",", "task_size", ",", "nb_negatives", "=", "2", ",", "margin", "=", "0.2", ")", ":", "\n", "    ", "\"\"\"Hinge loss from UCIR.\n\n    Taken from: https://github.com/hshustc/CVPR19_Incremental_Learning\n\n    # References:\n        * Learning a Unified Classifier Incrementally via Rebalancing\n          Hou et al.\n          CVPR 2019\n    \"\"\"", "\n", "gt_index", "=", "torch", ".", "zeros", "(", "logits", ".", "size", "(", ")", ")", ".", "to", "(", "logits", ".", "device", ")", "\n", "gt_index", "=", "gt_index", ".", "scatter", "(", "1", ",", "targets", ".", "view", "(", "-", "1", ",", "1", ")", ",", "1", ")", ".", "ge", "(", "0.5", ")", "\n", "gt_scores", "=", "logits", ".", "masked_select", "(", "gt_index", ")", "\n", "# get top-K scores on novel classes", "\n", "num_old_classes", "=", "logits", ".", "shape", "[", "1", "]", "-", "task_size", "\n", "max_novel_scores", "=", "logits", "[", ":", ",", "num_old_classes", ":", "]", ".", "topk", "(", "nb_negatives", ",", "dim", "=", "1", ")", "[", "0", "]", "\n", "# the index of hard samples, i.e., samples of old classes", "\n", "hard_index", "=", "targets", ".", "lt", "(", "num_old_classes", ")", "\n", "hard_num", "=", "torch", ".", "nonzero", "(", "hard_index", ")", ".", "size", "(", "0", ")", "\n", "\n", "if", "hard_num", ">", "0", ":", "\n", "        ", "gt_scores", "=", "gt_scores", "[", "hard_index", "]", ".", "view", "(", "-", "1", ",", "1", ")", ".", "repeat", "(", "1", ",", "nb_negatives", ")", "\n", "max_novel_scores", "=", "max_novel_scores", "[", "hard_index", "]", "\n", "assert", "(", "gt_scores", ".", "size", "(", ")", "==", "max_novel_scores", ".", "size", "(", ")", ")", "\n", "assert", "(", "gt_scores", ".", "size", "(", "0", ")", "==", "hard_num", ")", "\n", "loss", "=", "nn", ".", "MarginRankingLoss", "(", "margin", "=", "margin", ")", "(", "gt_scores", ".", "view", "(", "-", "1", ",", "1", ")", ",", "max_novel_scores", ".", "view", "(", "-", "1", ",", "1", ")", ",", "\n", "torch", ".", "ones", "(", "hard_num", "*", "nb_negatives", ")", ".", "to", "(", "logits", ".", "device", ")", ")", "\n", "return", "loss", "\n", "\n", "", "return", "torch", ".", "tensor", "(", "0", ")", ".", "float", "(", ")", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.losses.SoftEntropy.SoftEntropy.__init__": [[4, 7], ["torch.Module.__init__", "torch.LogSoftmax().cuda", "torch.LogSoftmax().cuda", "torch.LogSoftmax", "torch.LogSoftmax"], "methods", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.tools.conv_mtl.Conv2dMtl.__init__"], ["\t", "def", "__init__", "(", "self", ")", ":", "\n", "\t\t", "super", "(", "SoftEntropy", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "logsoftmax", "=", "nn", ".", "LogSoftmax", "(", "dim", "=", "1", ")", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.losses.SoftEntropy.SoftEntropy.forward": [[8, 12], ["SoftEntropy.SoftEntropy.logsoftmax", "torch.softmax().detach", "torch.softmax().detach", "torch.softmax", "torch.softmax"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "targets", ")", ":", "\n", "\t\t", "log_probs", "=", "self", ".", "logsoftmax", "(", "inputs", ")", "\n", "loss", "=", "(", "-", "F", ".", "softmax", "(", "targets", ",", "dim", "=", "1", ")", ".", "detach", "(", ")", "*", "log_probs", ")", ".", "mean", "(", "0", ")", ".", "sum", "(", ")", "\n", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.losses.metrics.triplet_loss": [[8, 91], ["metrics._pairwise_distance", "torch.nn.functional.normalize", "torch.cat", "torch.cat", "metrics._select_all_triplets", "metrics._aggreg_triplet_losses", "metrics._get_per_violated_margin", "metrics._get_triplet_mask", "metrics._select_hardest_triplets", "metrics._aggreg_triplet_losses", "ValueError", "metrics._select_all_triplets", "metrics._aggreg_triplet_losses", "metrics._select_hardest_triplets", "metrics._aggreg_triplet_losses", "ValueError", "memory_flags.eq", "memory_flags.eq", "metrics._get_triplet_mask"], "function", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.losses.metrics._pairwise_distance", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.losses.metrics._select_all_triplets", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.losses.metrics._aggreg_triplet_losses", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.losses.metrics._get_per_violated_margin", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.losses.metrics._get_triplet_mask", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.losses.metrics._select_hardest_triplets", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.losses.metrics._aggreg_triplet_losses", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.losses.metrics._select_all_triplets", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.losses.metrics._aggreg_triplet_losses", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.losses.metrics._select_hardest_triplets", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.losses.metrics._aggreg_triplet_losses", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.losses.metrics._get_triplet_mask"], ["\n", "    ", "def", "__init__", "(", "self", ",", "nb_tasks", ",", "nb_classes", ",", "increments", ")", ":", "\n", "        ", "self", ".", "metrics", "=", "collections", ".", "defaultdict", "(", "list", ")", "\n", "\n", "self", ".", "nb_tasks", "=", "nb_tasks", "\n", "self", ".", "nb_classes", "=", "nb_classes", "\n", "self", ".", "increments", "=", "increments", "\n", "\n", "self", ".", "_accuracy_matrix", "=", "np", ".", "ones", "(", "(", "nb_classes", ",", "nb_tasks", ")", ",", "dtype", "=", "\"float16\"", ")", "*", "-", "1", "\n", "self", ".", "_task_counter", "=", "0", "\n", "\n", "", "def", "log_task", "(", "self", ",", "ypreds", ",", "ytrue", ",", "task_size", ",", "zeroshot", "=", "False", ")", ":", "\n", "        ", "self", ".", "metrics", "[", "\"accuracy\"", "]", ".", "append", "(", "\n", "accuracy_per_task", "(", "ypreds", ",", "ytrue", ",", "task_size", "=", "10", ",", "topk", "=", "1", ")", "\n", ")", "# FIXME various task size", "\n", "self", ".", "metrics", "[", "\"accuracy_top5\"", "]", ".", "append", "(", "\n", "accuracy_per_task", "(", "ypreds", ",", "ytrue", ",", "task_size", "=", "None", ",", "topk", "=", "5", ")", "\n", ")", "\n", "self", ".", "metrics", "[", "\"accuracy_per_class\"", "]", ".", "append", "(", "\n", "accuracy_per_task", "(", "ypreds", ",", "ytrue", ",", "task_size", "=", "1", ",", "topk", "=", "1", ")", "\n", ")", "\n", "self", ".", "metrics", "[", "\"incremental_accuracy\"", "]", ".", "append", "(", "incremental_accuracy", "(", "self", ".", "metrics", "[", "\"accuracy\"", "]", ")", ")", "\n", "self", ".", "metrics", "[", "\"incremental_accuracy_top5\"", "]", ".", "append", "(", "\n", "incremental_accuracy", "(", "self", ".", "metrics", "[", "\"accuracy_top5\"", "]", ")", "\n", ")", "\n", "self", ".", "metrics", "[", "\"forgetting\"", "]", ".", "append", "(", "forgetting", "(", "self", ".", "metrics", "[", "\"accuracy\"", "]", ")", ")", "\n", "\n", "self", ".", "_update_accuracy_matrix", "(", "self", ".", "metrics", "[", "\"accuracy_per_class\"", "]", "[", "-", "1", "]", ")", "\n", "self", ".", "metrics", "[", "\"cord\"", "]", ".", "append", "(", "cord_metric", "(", "self", ".", "_accuracy_matrix", ")", ")", "\n", "#self.metrics[\"cord_old\"].append(cord_metric(self._accuracy_matrix, only=\"old\"))", "\n", "#self.metrics[\"cord_new\"].append(cord_metric(self._accuracy_matrix, only=\"new\"))", "\n", "\n", "if", "zeroshot", ":", "\n", "            ", "seen_classes_indexes", "=", "np", ".", "where", "(", "ytrue", "<", "sum", "(", "self", ".", "increments", "[", ":", "self", ".", "_task_counter", "+", "1", "]", ")", "\n", ")", "[", "0", "]", "\n", "self", ".", "metrics", "[", "\"seen_classes_accuracy\"", "]", ".", "append", "(", "\n", "accuracy", "(", "ypreds", "[", "seen_classes_indexes", "]", ",", "ytrue", "[", "seen_classes_indexes", "]", ")", "\n", ")", "\n", "unseen_classes_indexes", "=", "np", ".", "where", "(", "\n", "ytrue", ">=", "sum", "(", "self", ".", "increments", "[", ":", "self", ".", "_task_counter", "+", "1", "]", ")", "\n", ")", "[", "0", "]", "\n", "self", ".", "metrics", "[", "\"unseen_classes_accuracy\"", "]", ".", "append", "(", "\n", "accuracy", "(", "ypreds", "[", "unseen_classes_indexes", "]", ",", "ytrue", "[", "unseen_classes_indexes", "]", ")", "\n", ")", "\n", "\n", "", "if", "self", ".", "_task_counter", ">", "0", ":", "\n", "            ", "self", ".", "metrics", "[", "\"old_accuracy\"", "]", ".", "append", "(", "old_accuracy", "(", "ypreds", ",", "ytrue", ",", "task_size", ")", ")", "\n", "self", ".", "metrics", "[", "\"new_accuracy\"", "]", ".", "append", "(", "new_accuracy", "(", "ypreds", ",", "ytrue", ",", "task_size", ")", ")", "\n", "\n", "", "self", ".", "_task_counter", "+=", "1", "\n", "\n", "", "@", "property", "\n", "def", "last_results", "(", "self", ")", ":", "\n", "        ", "results", "=", "{", "\n", "\"task_id\"", ":", "len", "(", "self", ".", "metrics", "[", "\"accuracy\"", "]", ")", "-", "1", ",", "\n", "\"accuracy\"", ":", "self", ".", "metrics", "[", "\"accuracy\"", "]", "[", "-", "1", "]", ",", "\n", "\"incremental_accuracy\"", ":", "self", ".", "metrics", "[", "\"incremental_accuracy\"", "]", "[", "-", "1", "]", ",", "\n", "\"accuracy_top5\"", ":", "self", ".", "metrics", "[", "\"accuracy_top5\"", "]", "[", "-", "1", "]", ",", "\n", "\"incremental_accuracy_top5\"", ":", "self", ".", "metrics", "[", "\"incremental_accuracy_top5\"", "]", "[", "-", "1", "]", ",", "\n", "\"forgetting\"", ":", "self", ".", "metrics", "[", "\"forgetting\"", "]", "[", "-", "1", "]", ",", "\n", "\"accuracy_per_class\"", ":", "self", ".", "metrics", "[", "\"accuracy_per_class\"", "]", "[", "-", "1", "]", ",", "\n", "\"cord\"", ":", "self", ".", "metrics", "[", "\"cord\"", "]", "[", "-", "1", "]", "\n", "}", "\n", "\n", "if", "\"old_accuracy\"", "in", "self", ".", "metrics", ":", "\n", "            ", "results", ".", "update", "(", "\n", "{", "\n", "\"old_accuracy\"", ":", "self", ".", "metrics", "[", "\"old_accuracy\"", "]", "[", "-", "1", "]", ",", "\n", "\"new_accuracy\"", ":", "self", ".", "metrics", "[", "\"new_accuracy\"", "]", "[", "-", "1", "]", ",", "\n", "\"avg_old_accuracy\"", ":", "np", ".", "mean", "(", "self", ".", "metrics", "[", "\"old_accuracy\"", "]", ")", ",", "\n", "\"avg_new_accuracy\"", ":", "np", ".", "mean", "(", "self", ".", "metrics", "[", "\"new_accuracy\"", "]", ")", ",", "\n", "}", "\n", ")", "\n", "", "if", "\"seen_classes_accuracy\"", "in", "self", ".", "metrics", ":", "\n", "            ", "results", ".", "update", "(", "\n", "{", "\n", "\"seen_classes_accuracy\"", ":", "self", ".", "metrics", "[", "\"seen_classes_accuracy\"", "]", "[", "-", "1", "]", ",", "\n", "\"unseen_classes_accuracy\"", ":", "self", ".", "metrics", "[", "\"unseen_classes_accuracy\"", "]", "[", "-", "1", "]", ",", "\n", "}", "\n", ")", "\n", "\n", "", "return", "results", "\n", "\n", "", "def", "_update_accuracy_matrix", "(", "self", ",", "new_accuracy_per_class", ")", ":", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.losses.metrics._select_all_triplets": [[100, 126], ["distance_matrix.unsqueeze", "distance_matrix.unsqueeze", "valid_triplets.clamp", "torch.log", "torch.exp"], "function", ["None"], ["    ", "accuracies", "=", "[", "]", "\n", "\n", "for", "class_id", "in", "range", "(", "accuracy_matrix", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "filled_indexes", "=", "np", ".", "where", "(", "accuracy_matrix", "[", "class_id", "]", ">", "-", "1.", ")", "[", "0", "]", "\n", "\n", "if", "only", "==", "\"old\"", ":", "\n", "            ", "filled_indexes", "[", "1", ":", "]", "\n", "", "elif", "only", "==", "\"new\"", ":", "\n", "            ", "filled_indexes", "[", ":", "1", "]", "\n", "\n", "", "if", "len", "(", "filled_indexes", ")", "==", "0", ":", "\n", "            ", "continue", "\n", "", "accuracies", ".", "append", "(", "np", ".", "mean", "(", "accuracy_matrix", "[", "class_id", ",", "filled_indexes", "]", ")", ")", "\n", "", "return", "np", ".", "mean", "(", "accuracies", ")", ".", "item", "(", ")", "\n", "\n", "\n", "", "def", "accuracy_per_task", "(", "ypreds", ",", "ytrue", ",", "task_size", "=", "10", ",", "topk", "=", "1", ")", ":", "\n", "    ", "\"\"\"Computes accuracy for the whole test & per task.\n\n    :param ypred: The predictions array.\n    :param ytrue: The ground-truth array.\n    :param task_size: The size of the task.\n    :return: A dictionnary.\n    \"\"\"", "\n", "all_acc", "=", "{", "}", "\n", "\n", "all_acc", "[", "\"total\"", "]", "=", "accuracy", "(", "ypreds", ",", "ytrue", ",", "topk", "=", "topk", ")", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.losses.metrics._select_hardest_triplets": [[128, 159], ["_get_anchor_positive_triplet_mask().float", "_get_anchor_negative_triplet_mask().float", "torch.clamp", "anchor_positive_dist.max", "distance_matrix.max", "anchor_negative_dist.min", "metrics._get_anchor_positive_triplet_mask", "metrics._get_anchor_negative_triplet_mask"], "function", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.losses.metrics._get_anchor_positive_triplet_mask", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.losses.metrics._get_anchor_negative_triplet_mask"], ["if", "task_size", "is", "not", "None", ":", "\n", "        ", "for", "class_id", "in", "range", "(", "0", ",", "np", ".", "max", "(", "ytrue", ")", "+", "task_size", ",", "task_size", ")", ":", "\n", "            ", "if", "class_id", ">", "np", ".", "max", "(", "ytrue", ")", ":", "\n", "                ", "break", "\n", "\n", "", "idxes", "=", "np", ".", "where", "(", "np", ".", "logical_and", "(", "ytrue", ">=", "class_id", ",", "ytrue", "<", "class_id", "+", "task_size", ")", ")", "[", "0", "]", "\n", "\n", "label", "=", "\"{}-{}\"", ".", "format", "(", "\n", "str", "(", "class_id", ")", ".", "rjust", "(", "2", ",", "\"0\"", ")", ",", "\n", "str", "(", "class_id", "+", "task_size", "-", "1", ")", ".", "rjust", "(", "2", ",", "\"0\"", ")", "\n", ")", "\n", "all_acc", "[", "label", "]", "=", "accuracy", "(", "ypreds", "[", "idxes", "]", ",", "ytrue", "[", "idxes", "]", ",", "topk", "=", "topk", ")", "\n", "\n", "", "", "return", "all_acc", "\n", "\n", "\n", "", "def", "old_accuracy", "(", "ypreds", ",", "ytrue", ",", "task_size", ")", ":", "\n", "    ", "\"\"\"Computes accuracy for the whole test & per task.\n\n    :param ypred: The predictions array.\n    :param ytrue: The ground-truth array.\n    :param task_size: The size of the task.\n    :return: A dictionnary.\n    \"\"\"", "\n", "nb_classes", "=", "ypreds", ".", "shape", "[", "1", "]", "\n", "old_class_indexes", "=", "np", ".", "where", "(", "ytrue", "<", "nb_classes", "-", "task_size", ")", "[", "0", "]", "\n", "return", "accuracy", "(", "ypreds", "[", "old_class_indexes", "]", ",", "ytrue", "[", "old_class_indexes", "]", ",", "topk", "=", "1", ")", "\n", "\n", "\n", "", "def", "new_accuracy", "(", "ypreds", ",", "ytrue", ",", "task_size", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.losses.metrics._get_triplet_mask": [[166, 189], ["indexes_not_equal.unsqueeze", "indexes_not_equal.unsqueeze", "indexes_not_equal.unsqueeze", "labels_equal.unsqueeze", "labels_equal.unsqueeze", "torch.eye().bool().to", "targets.unsqueeze", "targets.unsqueeze", "torch.eye().bool", "torch.eye", "len"], "function", ["None"], ["new_class_indexes", "=", "np", ".", "where", "(", "ytrue", ">=", "nb_classes", "-", "task_size", ")", "[", "0", "]", "\n", "return", "accuracy", "(", "ypreds", "[", "new_class_indexes", "]", ",", "ytrue", "[", "new_class_indexes", "]", ",", "topk", "=", "1", ")", "\n", "\n", "\n", "", "def", "accuracy", "(", "output", ",", "targets", ",", "topk", "=", "1", ")", ":", "\n", "    ", "\"\"\"Computes the precision@k for the specified values of k\"\"\"", "\n", "output", ",", "targets", "=", "torch", ".", "tensor", "(", "output", ")", ",", "torch", ".", "tensor", "(", "targets", ")", "\n", "\n", "batch_size", "=", "targets", ".", "shape", "[", "0", "]", "\n", "if", "batch_size", "==", "0", ":", "\n", "        ", "return", "0.", "\n", "", "nb_classes", "=", "len", "(", "np", ".", "unique", "(", "targets", ")", ")", "\n", "topk", "=", "min", "(", "topk", ",", "nb_classes", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "topk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "targets", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "correct_k", "=", "correct", "[", ":", "topk", "]", ".", "reshape", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ")", ".", "item", "(", ")", "\n", "return", "round", "(", "correct_k", "/", "batch_size", ",", "3", ")", "\n", "\n", "\n", "", "def", "incremental_accuracy", "(", "accuracies", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.losses.metrics._get_anchor_positive_triplet_mask": [[191, 207], ["torch.eye().bool().to", "targets.unsqueeze", "targets.unsqueeze", "torch.eye().bool", "torch.eye", "len"], "function", ["None"], ["\n", "return", "sum", "(", "task_acc", "[", "\"total\"", "]", "for", "task_acc", "in", "accuracies", ")", "/", "len", "(", "accuracies", ")", "\n", "\n", "\n", "", "def", "forgetting", "(", "accuracies", ")", ":", "\n", "    ", "if", "len", "(", "accuracies", ")", "==", "1", ":", "\n", "        ", "return", "0.", "\n", "\n", "", "last_accuracies", "=", "accuracies", "[", "-", "1", "]", "\n", "usable_tasks", "=", "last_accuracies", ".", "keys", "(", ")", "\n", "\n", "forgetting", "=", "0.", "\n", "for", "task", "in", "usable_tasks", ":", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.losses.metrics._get_anchor_negative_triplet_mask": [[209, 222], ["targets.unsqueeze", "targets.unsqueeze"], "function", ["None"], ["            ", "continue", "\n", "\n", "", "max_task", "=", "0.", "\n", "\n", "for", "task_accuracies", "in", "accuracies", "[", ":", "-", "1", "]", ":", "\n", "            ", "if", "task", "in", "task_accuracies", ":", "\n", "                ", "max_task", "=", "max", "(", "max_task", ",", "task_accuracies", "[", "task", "]", ")", "\n", "\n", "", "", "forgetting", "+=", "max_task", "-", "last_accuracies", "[", "task", "]", "\n", "\n", "", "return", "forgetting", "/", "len", "(", "usable_tasks", ")", "\n", "\n", "\n", "", "def", "forward_transfer", "(", "accuracies", ")", ":", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.losses.metrics._get_per_violated_margin": [[229, 234], ["len", "len", "int"], "function", ["None"], ["\n", "nb_tasks", "=", "len", "(", "accuracies", ")", "\n", "\n", "fwt", "=", "0", "\n", "for", "i", "in", "range", "(", "nb_tasks", ")", ":", "\n", "        ", "pass", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.losses.metrics._aggreg_triplet_losses": [[236, 246], ["ValueError", "triplet_losses.mean", "triplet_losses.max", "len", "triplet_losses.sum"], "function", ["None"], []], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.losses.metrics._triplet": [[248, 259], ["torch.clamp", "ValueError", "torch.mean", "torch.sum", "torch.sum", "max", "len"], "function", ["None"], []], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.losses.metrics._triplet_facenet_sampling": [[261, 312], ["_dense_distance", "targets.cpu().numpy.cpu().numpy", "set", "targets.cpu().numpy.tolist", "[].tolist", "[].tolist", "list", "torch.tensor", "torch.tensor", "anchor_indexes.extend", "positive_indexes.extend", "negative_indexes.extend", "torch.tensor", "torch.tensor", "torch.tensor", "targets.cpu().numpy.cpu", "itertools.combinations", "len", "range", "numpy.random.choice().tolist", "torch.tensor.tolist", "torch.tensor.tolist", "len", "len", "len", "len", "len", "numpy.where", "numpy.where", "np.random.choice().tolist.append", "_positives.tolist.append", "_anchors.tolist.append", "numpy.random.choice", "torch.tensor().repeat_interleave", "torch.tensor().repeat", "len", "torch.tensor", "torch.tensor", "[].min"], "function", ["None"], []], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.losses.metrics._triplet_random_sampling": [[314, 335], ["targets.cpu().numpy.cpu().numpy", "torch.tensor", "torch.tensor", "torch.tensor", "numpy.random.choice", "numpy.random.choice", "torch.tensor.append", "torch.tensor.append", "torch.tensor.append", "len", "len", "len", "targets.cpu().numpy.cpu", "numpy.where", "numpy.where", "len"], "function", ["None"], []], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.losses.metrics._pairwise_distance": [[337, 364], ["torch.clamp", "torch.le", "torch.mul", "torch.mul", "torch.add", "torch.sqrt", "torch.eye", "a.pow().sum().expand", "torch.t().pow().sum().expand", "torch.mm", "a.size", "a.size", "torch.t", "torch.sqrt.size", "a.pow().sum", "torch.t().pow().sum", "torch.le.float", "a.pow", "torch.t().pow", "torch.t"], "function", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.add"], []], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.losses.metrics._pair_distance": [[366, 377], ["ValueError", "torch.nn.functional.pairwise_distance", "torch.pow", "torch.nn.functional.pairwise_distance", "torch.nn.functional.pairwise_distance", "torch.cosine_similarity"], "function", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.distance.cosine_similarity"], []], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.losses.vat.VATLoss.__init__": [[27, 37], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.tools.conv_mtl.Conv2dMtl.__init__"], ["    ", "def", "__init__", "(", "self", ",", "xi", "=", "10.0", ",", "eps", "=", "1.0", ",", "ip", "=", "1", ")", ":", "\n", "        ", "\"\"\"VAT loss\n        :param xi: hyperparameter of VAT (default: 10.0)\n        :param eps: hyperparameter of VAT (default: 1.0)\n        :param ip: iteration times of computing adv noise (default: 1)\n        \"\"\"", "\n", "super", "(", "VATLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "xi", "=", "xi", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "ip", "=", "ip", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.losses.vat.VATLoss.forward": [[38, 66], ["torch.rand().sub().to", "torch.rand().sub().to", "torch.rand().sub().to", "torch.rand().sub().to", "torch.rand().sub().to", "torch.rand().sub().to", "torch.rand().sub().to", "torch.rand().sub().to", "torch.rand().sub().to", "vat._l2_normalize", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model", "torch.softmax", "torch.softmax", "torch.softmax", "vat._disable_tracking_bn_stats", "range", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.kl_div", "torch.kl_div", "torch.kl_div", "torch.rand().sub", "torch.rand().sub", "torch.rand().sub", "torch.rand().sub", "torch.rand().sub", "torch.rand().sub", "torch.rand().sub", "torch.rand().sub", "torch.rand().sub", "_l2_normalize.requires_grad_", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.kl_div", "torch.kl_div", "torch.kl_div", "torch.kl_div.backward", "vat._l2_normalize", "model.zero_grad", "model", "model", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand"], "methods", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.losses.vat._l2_normalize", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.losses.vat._disable_tracking_bn_stats", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.classifiers.GradReverse.backward", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.losses.vat._l2_normalize"], ["", "def", "forward", "(", "self", ",", "model", ",", "x", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "outputs", "=", "model", "(", "x", ")", "\n", "logits", "=", "outputs", "[", "'logits'", "]", "\n", "pred", "=", "F", ".", "softmax", "(", "logits", ",", "dim", "=", "1", ")", "\n", "\n", "# prepare random unit tensor", "\n", "", "d", "=", "torch", ".", "rand", "(", "x", ".", "shape", ")", ".", "sub", "(", "0.5", ")", ".", "to", "(", "x", ".", "device", ")", "\n", "d", "=", "_l2_normalize", "(", "d", ")", "\n", "\n", "with", "_disable_tracking_bn_stats", "(", "model", ")", ":", "\n", "# calc adversarial direction", "\n", "            ", "for", "_", "in", "range", "(", "self", ".", "ip", ")", ":", "\n", "                ", "d", ".", "requires_grad_", "(", ")", "\n", "pred_hat", "=", "model", "(", "x", "+", "self", ".", "xi", "*", "d", ")", "[", "'logits'", "]", "\n", "logp_hat", "=", "F", ".", "log_softmax", "(", "pred_hat", ",", "dim", "=", "1", ")", "\n", "adv_distance", "=", "F", ".", "kl_div", "(", "logp_hat", ",", "pred", ",", "reduction", "=", "'batchmean'", ")", "\n", "adv_distance", ".", "backward", "(", ")", "\n", "d", "=", "_l2_normalize", "(", "d", ".", "grad", ")", "\n", "model", ".", "zero_grad", "(", ")", "\n", "\n", "# calc LDS", "\n", "", "r_adv", "=", "d", "*", "self", ".", "eps", "\n", "pred_hat", "=", "model", "(", "x", "+", "r_adv", ")", "[", "'logits'", "]", "\n", "logp_hat", "=", "F", ".", "log_softmax", "(", "pred_hat", ",", "dim", "=", "1", ")", "\n", "lds", "=", "F", ".", "kl_div", "(", "logp_hat", ",", "pred", ",", "reduction", "=", "'batchmean'", ")", "\n", "\n", "", "return", "lds", "\n", "", "", ""]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.losses.vat._disable_tracking_bn_stats": [[7, 17], ["model.apply", "model.apply", "hasattr"], "function", ["None"], ["@", "contextlib", ".", "contextmanager", "\n", "def", "_disable_tracking_bn_stats", "(", "model", ")", ":", "\n", "\n", "    ", "def", "switch_attr", "(", "m", ")", ":", "\n", "        ", "if", "hasattr", "(", "m", ",", "'track_running_stats'", ")", ":", "\n", "            ", "m", ".", "track_running_stats", "^=", "True", "\n", "\n", "", "", "model", ".", "apply", "(", "switch_attr", ")", "\n", "yield", "\n", "model", ".", "apply", "(", "switch_attr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.losses.vat._l2_normalize": [[19, 23], ["d.view", "torch.norm", "torch.norm", "torch.norm", "range", "d.dim"], "function", ["None"], ["", "def", "_l2_normalize", "(", "d", ")", ":", "\n", "    ", "d_reshaped", "=", "d", ".", "view", "(", "d", ".", "shape", "[", "0", "]", ",", "-", "1", ",", "*", "(", "1", "for", "_", "in", "range", "(", "d", ".", "dim", "(", ")", "-", "2", ")", ")", ")", "\n", "d", "/=", "torch", ".", "norm", "(", "d_reshaped", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "+", "1e-8", "\n", "return", "d", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.losses.unsupervised.unsupervised_rotations": [[5, 44], ["range", "torch.cat", "torch.cat().long().to", "network", "len", "torch.tensor", "torch.zeros", "torch.cat.append", "torch.cat().long().to.append", "torch.nn.functional.cross_entropy", "len", "selected_inputs.rot90", "torch.cat().long", "len", "ValueError", "torch.ones", "memory_flags.eq", "len", "torch.cat", "memory_flags.eq"], "function", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.base.IncrementalLearner.network"], ["def", "unsupervised_rotations", "(", "inputs", ",", "memory_flags", ",", "network", ",", "apply_on", "=", "\"all\"", ",", "factor", "=", "1.0", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Rotates inputs by 90\u00b0 four times, and predict the angles.\n\n    References:\n        * Spyros Gidaris, Praveer Singh, Nikos Komodakis\n          Unsupervised Representation Learning by Predicting Image Rotations\n          ICLR 2018\n\n    :param inputs: Inputs images.\n    :param memory_flags: Flags signaling if the inputs are from the memory.\n    :param network: Network used to predict rotations.\n    :param config: A dict of configuration for this loss.\n    :return: A float scalar loss.\n    \"\"\"", "\n", "if", "apply_on", "==", "\"all\"", ":", "\n", "        ", "selected_inputs", "=", "inputs", "\n", "", "elif", "apply_on", "==", "\"old\"", ":", "\n", "        ", "selected_inputs", "=", "inputs", "[", "memory_flags", ".", "eq", "(", "1.", ")", "]", "\n", "", "elif", "apply_on", "==", "\"new\"", ":", "\n", "        ", "selected_inputs", "=", "inputs", "[", "memory_flags", ".", "eq", "(", "0.", ")", "]", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Invalid apply for rotation prediction: {}.\"", ".", "format", "(", "apply_on", ")", ")", "\n", "\n", "", "if", "len", "(", "selected_inputs", ")", "==", "0", ":", "\n", "        ", "return", "torch", ".", "tensor", "(", "0.", ")", "\n", "\n", "", "rotated_inputs", "=", "[", "selected_inputs", "]", "\n", "angles", "=", "[", "torch", ".", "zeros", "(", "len", "(", "selected_inputs", ")", ")", "]", "\n", "\n", "for", "ang", "in", "range", "(", "1", ",", "4", ")", ":", "\n", "        ", "rotated_inputs", ".", "append", "(", "selected_inputs", ".", "rot90", "(", "ang", ",", "(", "2", ",", "3", ")", ")", ")", "\n", "angles", ".", "append", "(", "torch", ".", "ones", "(", "len", "(", "selected_inputs", ")", ")", "*", "ang", ")", "\n", "\n", "", "rotated_inputs", "=", "torch", ".", "cat", "(", "rotated_inputs", ")", "\n", "angles", "=", "torch", ".", "cat", "(", "angles", ")", ".", "long", "(", ")", ".", "to", "(", "inputs", ".", "device", ")", "\n", "outputs", "=", "network", "(", "rotated_inputs", ",", "rotation", "=", "True", ",", "index", "=", "len", "(", "inputs", ")", ")", "\n", "loss", "=", "factor", "*", "F", ".", "cross_entropy", "(", "outputs", "[", "\"rotations\"", "]", ",", "angles", ")", "\n", "\n", "return", "loss", ",", "outputs", "\n", "", ""]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.losses.regularizations.weights_orthogonality": [[10, 24], ["torch.nn.functional.normalize", "torch.mm", "torch.mean", "F.normalize.t", "torch.nn.functional.relu", "torch.eye"], "function", ["None"], ["def", "weights_orthogonality", "(", "weights", ",", "margin", "=", "0.", ")", ":", "\n", "    ", "\"\"\"Regularization forcing the weights to be disimilar.\n\n    :param weights: Learned parameters of shape (n_classes, n_features).\n    :param margin: Margin to force even more the orthogonality.\n    :return: A float scalar loss.\n    \"\"\"", "\n", "normalized_weights", "=", "F", ".", "normalize", "(", "weights", ",", "dim", "=", "1", ",", "p", "=", "2", ")", "\n", "similarities", "=", "torch", ".", "mm", "(", "normalized_weights", ",", "normalized_weights", ".", "t", "(", ")", ")", "\n", "\n", "# We are ignoring the diagonal made of identity similarities:", "\n", "similarities", "=", "similarities", "[", "torch", ".", "eye", "(", "similarities", ".", "shape", "[", "0", "]", ")", "==", "0", "]", "\n", "\n", "return", "torch", ".", "mean", "(", "F", ".", "relu", "(", "similarities", "+", "margin", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.losses.regularizations.ortho_reg": [[26, 47], ["torch.nn.functional.normalize", "torch.mm", "F.normalize.t", "config.get", "config.get", "torch.log().sum", "torch.eye", "torch.log", "torch.exp"], "function", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.get", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.get"], ["", "def", "ortho_reg", "(", "weights", ",", "config", ")", ":", "\n", "    ", "\"\"\"Regularization forcing the weights to be orthogonal without removing negative\n    correlation.\n\n    Reference:\n        * Regularizing CNNs with Locally Constrained Decorrelations\n          Pau et al.\n          ICLR 2017\n\n    :param weights: Learned parameters of shape (n_classes, n_features).\n    :return: A float scalar loss.\n    \"\"\"", "\n", "normalized_weights", "=", "F", ".", "normalize", "(", "weights", ",", "dim", "=", "1", ",", "p", "=", "2", ")", "\n", "similarities", "=", "torch", ".", "mm", "(", "normalized_weights", ",", "normalized_weights", ".", "t", "(", ")", ")", "\n", "\n", "# We are ignoring the diagonal made of identity similarities:", "\n", "similarities", "=", "similarities", "[", "torch", ".", "eye", "(", "similarities", ".", "shape", "[", "0", "]", ")", "==", "0", "]", "\n", "\n", "x", "=", "config", ".", "get", "(", "\"lambda\"", ",", "10.", ")", "*", "(", "similarities", "-", "1.", ")", "\n", "\n", "return", "config", ".", "get", "(", "\"factor\"", ",", "1.", ")", "*", "torch", ".", "log", "(", "1", "+", "torch", ".", "exp", "(", "x", ")", ")", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.losses.regularizations.global_orthogonal_regularization": [[49, 103], ["targets.cpu().numpy.cpu().numpy", "set", "torch.LongTensor", "torch.LongTensor", "torch.mean", "torch.mean", "torch.nn.functional.normalize", "len", "torch.tensor", "numpy.random.choice", "numpy.random.choice", "torch.LongTensor.append", "torch.LongTensor.append", "len", "len", "len", "torch.nn.functional.cosine_similarity", "torch.sum", "torch.pow", "torch.pow", "torch.clamp", "targets.cpu().numpy.cpu", "torch.mul", "numpy.where", "numpy.where"], "function", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.distance.cosine_similarity"], ["", "def", "global_orthogonal_regularization", "(", "\n", "features", ",", "targets", ",", "factor", "=", "1.", ",", "normalize", "=", "False", ",", "cosine", "=", "False", "\n", ")", ":", "\n", "    ", "\"\"\"Global Orthogonal Regularization (GOR) forces features of different\n    classes to be orthogonal.\n\n    # Reference:\n        * Learning Spread-out Local Feature Descriptors.\n          Zhang et al.\n          ICCV 2016.\n\n    :param features: A flattened extracted features.\n    :param targets: Sparse targets.\n    :return: A float scalar loss.\n    \"\"\"", "\n", "if", "normalize", ":", "\n", "        ", "features", "=", "F", ".", "normalize", "(", "features", ",", "dim", "=", "1", ",", "p", "=", "2", ")", "\n", "\n", "", "positive_indexes", ",", "negative_indexes", "=", "[", "]", ",", "[", "]", "\n", "targets", "=", "targets", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "unique_targets", "=", "set", "(", "targets", ")", "\n", "if", "len", "(", "unique_targets", ")", "==", "1", ":", "\n", "        ", "return", "torch", ".", "tensor", "(", "0.", ")", "\n", "\n", "", "for", "target", "in", "unique_targets", ":", "\n", "        ", "positive_index", "=", "np", ".", "random", ".", "choice", "(", "np", ".", "where", "(", "targets", "==", "target", ")", "[", "0", "]", ",", "1", ")", "\n", "negative_index", "=", "np", ".", "random", ".", "choice", "(", "np", ".", "where", "(", "targets", "!=", "target", ")", "[", "0", "]", ",", "1", ")", "\n", "\n", "positive_indexes", ".", "append", "(", "positive_index", ")", "\n", "negative_indexes", ".", "append", "(", "negative_index", ")", "\n", "\n", "", "assert", "len", "(", "positive_indexes", ")", "==", "len", "(", "negative_indexes", ")", "\n", "\n", "if", "len", "(", "positive_indexes", ")", "==", "0", ":", "\n", "        ", "return", "0.", "\n", "\n", "", "positive_indexes", "=", "torch", ".", "LongTensor", "(", "positive_indexes", ")", "\n", "negative_indexes", "=", "torch", ".", "LongTensor", "(", "negative_indexes", ")", "\n", "\n", "positive_features", "=", "features", "[", "positive_indexes", "]", "\n", "negative_features", "=", "features", "[", "negative_indexes", "]", "\n", "\n", "if", "cosine", ":", "\n", "        ", "similarities", "=", "F", ".", "cosine_similarity", "(", "positive_features", ",", "negative_features", ")", "\n", "", "else", ":", "\n", "        ", "similarities", "=", "torch", ".", "sum", "(", "torch", ".", "mul", "(", "positive_features", ",", "negative_features", ")", ",", "1", ")", "\n", "", "features_dim", "=", "features", ".", "shape", "[", "1", "]", "\n", "\n", "first_moment", "=", "torch", ".", "mean", "(", "similarities", ")", "\n", "second_moment", "=", "torch", ".", "mean", "(", "torch", ".", "pow", "(", "similarities", ",", "2", ")", ")", "\n", "\n", "loss", "=", "torch", ".", "pow", "(", "first_moment", ",", "2", ")", "+", "torch", ".", "clamp", "(", "second_moment", "-", "1.", "/", "features_dim", ",", "min", "=", "0.", ")", "\n", "\n", "return", "factor", "*", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.losses.regularizations.double_soft_orthoreg": [[105, 130], ["torch.mm", "torch.frobenius_norm", "torch.mm", "torch.frobenius_norm", "weights.t", "weights.t", "torch.pow", "torch.pow", "torch.eye().to", "torch.eye().to", "torch.eye", "torch.eye"], "function", ["None"], ["", "def", "double_soft_orthoreg", "(", "weights", ",", "config", ")", ":", "\n", "    ", "\"\"\"Extention of the Soft Ortogonality reg, forces the Gram matrix of the\n    weight matrix to be close to identity.\n\n    Also called DSO.\n\n    References:\n        * Can We Gain More from Orthogonality Regularizations in Training Deep CNNs?\n          Bansal et al.\n          NeurIPS 2018\n\n    :param weights: Learned parameters of shape (n_classes, n_features).\n    :return: A float scalar loss.\n    \"\"\"", "\n", "wTw", "=", "torch", ".", "mm", "(", "weights", ".", "t", "(", ")", ",", "weights", ")", "\n", "so_1", "=", "torch", ".", "frobenius_norm", "(", "wTw", "-", "torch", ".", "eye", "(", "wTw", ".", "shape", "[", "0", "]", ")", ".", "to", "(", "weights", ".", "device", ")", ")", "\n", "\n", "wwT", "=", "torch", ".", "mm", "(", "weights", ",", "weights", ".", "t", "(", ")", ")", "\n", "so_2", "=", "torch", ".", "frobenius_norm", "(", "wwT", "-", "torch", ".", "eye", "(", "wwT", ".", "shape", "[", "0", "]", ")", ".", "to", "(", "weights", ".", "device", ")", ")", "\n", "\n", "if", "config", "[", "\"squared\"", "]", ":", "\n", "        ", "so_1", "=", "torch", ".", "pow", "(", "so_1", ",", "2", ")", "\n", "so_2", "=", "torch", ".", "pow", "(", "so_2", ",", "2", ")", "\n", "\n", "", "return", "config", "[", "\"factor\"", "]", "*", "(", "so_1", "+", "so_2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.losses.regularizations.mutual_coherence_regularization": [[132, 152], ["torch.mm", "inclearn.lib.utils.matrix_infinity_norm", "weights.t", "torch.eye().to", "torch.eye"], "function", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.utils.matrix_infinity_norm"], ["", "def", "mutual_coherence_regularization", "(", "weights", ",", "config", ")", ":", "\n", "    ", "\"\"\"Forces weights orthogonality by reducing the highest correlation between\n    the weights.\n\n    Also called MC.\n\n    References:\n        * Compressed sensing\n          David L Donoho.\n          Transactions on information theory 2016\n\n    :param weights: Learned parameters of shape (n_classes, n_features).\n    :return: A float scalar loss.\n    \"\"\"", "\n", "wTw", "=", "torch", ".", "mm", "(", "weights", ".", "t", "(", ")", ",", "weights", ")", "\n", "x", "=", "wTw", "-", "torch", ".", "eye", "(", "wTw", ".", "shape", "[", "0", "]", ")", ".", "to", "(", "weights", ".", "device", ")", "\n", "\n", "loss", "=", "utils", ".", "matrix_infinity_norm", "(", "x", ")", "\n", "\n", "return", "config", "[", "\"factor\"", "]", "*", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.losses.regularizations.spectral_restricted_isometry_property_regularization": [[154, 175], ["torch.mm", "torch.svd", "weights.t", "torch.eye().to", "torch.eye"], "function", ["None"], ["", "def", "spectral_restricted_isometry_property_regularization", "(", "weights", ",", "config", ")", ":", "\n", "    ", "\"\"\"Requires that every set of columns of the weights, with cardinality no\n    larger than k, shall behave like an orthogonal system.\n\n    Also called SRIP.\n\n    References:\n        * Can We Gain More from Orthogonality Regularizations in Training Deep CNNs?\n          Bansal et al.\n          NeurIPS 2018\n\n    :param weights: Learned parameters of shape (n_classes, n_features).\n    :return: A float scalar loss.\n    \"\"\"", "\n", "wTw", "=", "torch", ".", "mm", "(", "weights", ".", "t", "(", ")", ",", "weights", ")", "\n", "x", "=", "wTw", "-", "torch", ".", "eye", "(", "wTw", ".", "shape", "[", "0", "]", ")", ".", "to", "(", "weights", ".", "device", ")", "\n", "\n", "_", ",", "s", ",", "_", "=", "torch", ".", "svd", "(", "x", ")", "\n", "\n", "loss", "=", "s", "[", "0", "]", "\n", "return", "config", "[", "\"factor\"", "]", "*", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.losses.regularizations.softriple_regularizer": [[177, 194], ["torch.nn.functional.normalize", "F.normalize.view", "numpy.triu_indices", "torch.bmm", "torch.abs", "torch.sqrt", "torch.tensor", "torch.tensor", "weights.view.transpose", "torch.sqrt.sum"], "function", ["None"], ["", "def", "softriple_regularizer", "(", "weights", ",", "config", ")", ":", "\n", "    ", "weights", "=", "F", ".", "normalize", "(", "weights", ")", "\n", "\n", "K", "=", "config", "[", "\"K\"", "]", "\n", "C", "=", "weights", ".", "shape", "[", "0", "]", "//", "K", "\n", "\n", "centers_per_class", "=", "weights", ".", "view", "(", "C", ",", "K", ",", "-", "1", ")", "\n", "\n", "triu_indexes", "=", "np", ".", "triu_indices", "(", "K", ",", "1", ")", "\n", "indexes_0", ",", "indexes_1", "=", "torch", ".", "tensor", "(", "triu_indexes", "[", "0", "]", ")", ",", "torch", ".", "tensor", "(", "triu_indexes", "[", "1", "]", ")", "\n", "\n", "similarities", "=", "torch", ".", "bmm", "(", "centers_per_class", ",", "centers_per_class", ".", "transpose", "(", "2", ",", "1", ")", ")", "\n", "x", "=", "torch", ".", "abs", "(", "2", "-", "2", "*", "similarities", "[", "...", ",", "indexes_0", ",", "indexes_1", "]", ")", "\n", "x", "=", "torch", ".", "sqrt", "(", "x", "+", "1e-10", ")", "\n", "loss", "=", "x", ".", "sum", "(", ")", "/", "(", "C", "*", "K", "*", "(", "K", "-", "1", ")", ")", "\n", "\n", "return", "config", "[", "\"factor\"", "]", "*", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.losses.regularizations.double_margin_constrastive_regularization": [[196, 321], ["regularizations._dmr_weights_distance", "isinstance", "ValueError", "torch.nn.functional.normalize", "regularizations._dmr_intra_mask", "regularizations._index_mask", "regularizations._dmr_aggreg", "isinstance", "torch.tensor().to", "torch.clamp", "torch.clamp", "regularizations._dmr_inter_oldvsnew_mask", "torch.clamp", "regularizations._dmr_aggreg", "_dmr_weights_distance().to", "regularizations._dmr_inter_mask", "regularizations._dmr_inter_mask", "regularizations._dmr_inter_mask", "regularizations._index_mask", "torch.clamp", "regularizations._index_mask", "regularizations._index_mask", "torch.cat", "torch.cat", "regularizations._dmr_inter_mask", "regularizations._index_mask", "torch.mean", "torch.mean", "torch.tensor", "len", "len", "len", "torch.pow", "torch.pow", "torch.clamp", "torch.abs", "regularizations._dmr_aggreg", "regularizations._dmr_weights_distance", "torch.tensor().repeat().to", "torch.pow", "torch.max", "torch.tensor().repeat", "len", "torch.tensor"], "function", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.losses.regularizations._dmr_weights_distance", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.losses.regularizations._dmr_intra_mask", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.losses.regularizations._index_mask", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.losses.regularizations._dmr_aggreg", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.losses.regularizations._dmr_inter_oldvsnew_mask", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.losses.regularizations._dmr_aggreg", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.losses.regularizations._dmr_inter_mask", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.losses.regularizations._dmr_inter_mask", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.losses.regularizations._dmr_inter_mask", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.losses.regularizations._index_mask", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.losses.regularizations._index_mask", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.losses.regularizations._index_mask", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.losses.regularizations._dmr_inter_mask", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.losses.regularizations._index_mask", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.losses.regularizations._dmr_aggreg", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.losses.regularizations._dmr_weights_distance"], ["", "def", "double_margin_constrastive_regularization", "(", "\n", "weights", ",", "\n", "current_index", ",", "\n", "K", "=", "None", ",", "\n", "intra_margin", "=", "0.2", ",", "\n", "inter_margin", "=", "0.8", ",", "\n", "regroup_intra", "=", "False", ",", "\n", "inter_old_vs_new", "=", "False", ",", "\n", "normalize", "=", "True", ",", "\n", "intra_aggreg", "=", "\"mean\"", ",", "\n", "inter_aggreg", "=", "\"mean\"", ",", "\n", "square", "=", "True", ",", "\n", "old_weights", "=", "None", ",", "\n", "adaptative_margin", "=", "False", ",", "\n", "adaptative_margin_max", "=", "2.0", ",", "\n", "adaptative_margin_min", "=", "0.5", ",", "\n", "factor", "=", "1.", "\n", ")", ":", "\n", "    ", "\"\"\"To be used with multiple centers per class. Enforce that weights of different\n    classes are further than a given margin intra_margin and weights of same class\n    are close but still further than a margin inter_margin.\n\n    intra_margin must be > than inter_margin.\n\n    Note that distance range is:\n        * [0, 2]    if squared\n        * [0, 1.41] otherwise\n    Therefore while the intra_margin should be kept low, the inter_dist if set\n    higher than the upper bound will force perfect orthogonality.\n\n    :param weights: Learned parameters of shape (n_classes * n_clusters, n_features).\n    :param current_index: The current weight index, i.e. if we have learned N classes, the index\n                          will be N.\n    :param K: Number of clusters per class.\n    :param intra_margin: Margin between clusters of same class.\n    :param inter_margin: Margin between clusters of different classes.\n    :param inter_old_vs_new: Apply the inter distance only between old & new.\n    :param factor: A multiplicative factor applied to the loss.\n    :return: A float scalar loss.\n    \"\"\"", "\n", "if", "intra_margin", "is", "None", "and", "inter_margin", "is", "None", ":", "\n", "        ", "raise", "ValueError", "(", "\"At least one margin must be enabled.\"", ")", "\n", "\n", "", "if", "normalize", ":", "\n", "        ", "weights", "=", "F", ".", "normalize", "(", "weights", ")", "\n", "\n", "", "C", "=", "weights", ".", "shape", "[", "0", "]", "//", "K", "\n", "dist", "=", "_dmr_weights_distance", "(", "weights", ",", "square", "=", "square", ")", "\n", "\n", "loss", "=", "0.", "\n", "\n", "if", "intra_margin", "is", "not", "None", "and", "K", ">", "1", ":", "\n", "        ", "intra_mask", "=", "_dmr_intra_mask", "(", "dist", ".", "shape", "[", "0", "]", ",", "C", ",", "K", ",", "weights", ".", "device", ")", "\n", "intra_dist", "=", "_index_mask", "(", "dist", ",", "intra_mask", ")", "\n", "\n", "if", "regroup_intra", ":", "\n", "            ", "intra_losses", "=", "torch", ".", "clamp", "(", "intra_dist", "-", "intra_margin", ",", "min", "=", "0.", ")", "\n", "", "else", ":", "\n", "            ", "intra_losses", "=", "torch", ".", "clamp", "(", "intra_margin", "-", "intra_dist", ",", "min", "=", "0.", ")", "\n", "\n", "", "intra_loss", "=", "_dmr_aggreg", "(", "intra_losses", ",", "aggreg_mode", "=", "intra_aggreg", ")", "\n", "loss", "+=", "intra_loss", "\n", "\n", "", "if", "inter_margin", "is", "not", "None", "and", "not", "(", "inter_old_vs_new", "and", "current_index", "==", "0", ")", ":", "\n", "        ", "if", "inter_old_vs_new", ":", "\n", "            ", "inter_mask", "=", "_dmr_inter_oldvsnew_mask", "(", "dist", ".", "shape", "[", "0", "]", ",", "current_index", ",", "weights", ".", "device", ")", "\n", "inter_dist", "=", "dist", "[", "inter_mask", "]", "\n", "", "elif", "adaptative_margin", "and", "old_weights", "is", "not", "None", ":", "\n", "            ", "old_dist", "=", "_dmr_weights_distance", "(", "old_weights", ",", "square", "=", "square", ")", ".", "to", "(", "weights", ".", "device", ")", "\n", "nb_old_classes", "=", "old_weights", ".", "shape", "[", "0", "]", "//", "K", "\n", "\n", "inter_mask_old", "=", "_dmr_inter_mask", "(", "old_dist", ".", "shape", "[", "0", "]", ",", "nb_old_classes", ",", "K", ",", "weights", ".", "device", ")", "\n", "inter_mask_oldnew", "=", "_dmr_inter_mask", "(", "dist", ".", "shape", "[", "0", "]", ",", "C", ",", "K", ",", "weights", ".", "device", ")", "\n", "inter_mask_oldnew", "[", "nb_old_classes", "*", "K", ":", "]", "=", "False", "\n", "inter_mask_oldnew", "[", "...", ",", "nb_old_classes", "*", "K", ":", "]", "=", "False", "\n", "\n", "inter_mask_new", "=", "_dmr_inter_mask", "(", "dist", ".", "shape", "[", "0", "]", ",", "C", ",", "K", ",", "weights", ".", "device", ")", "\n", "inter_mask_new", "[", ":", "nb_old_classes", "*", "K", ",", ":", "nb_old_classes", "*", "K", "]", "=", "False", "\n", "\n", "old_inter_dist", "=", "_index_mask", "(", "old_dist", ",", "inter_mask_old", ")", "\n", "d", "=", "torch", ".", "clamp", "(", "old_inter_dist", ",", "min", "=", "0.", ")", "\n", "adaptative_margins", "=", "(", "\n", "(", "adaptative_margin_max", "-", "adaptative_margin_min", ")", "/", "torch", ".", "max", "(", "d", ")", "\n", ")", "*", "d", "+", "adaptative_margin_min", "\n", "\n", "oldnew_inter_dist", "=", "_index_mask", "(", "dist", ",", "inter_mask_oldnew", ")", "\n", "\n", "new_inter_dist", "=", "_index_mask", "(", "dist", ",", "inter_mask_new", ")", "\n", "\n", "inter_dist", "=", "torch", ".", "cat", "(", "(", "oldnew_inter_dist", ",", "new_inter_dist", ")", ")", "\n", "inter_margin", "=", "torch", ".", "cat", "(", "\n", "(", "\n", "adaptative_margins", ",", "torch", ".", "tensor", "(", "inter_margin", ")", ".", "repeat", "(", "len", "(", "new_inter_dist", ")", "\n", ")", ".", "to", "(", "weights", ".", "device", ")", "\n", ")", "\n", ")", "\n", "assert", "len", "(", "oldnew_inter_dist", ")", "==", "len", "(", "old_inter_dist", ")", "==", "len", "(", "adaptative_margins", ")", "\n", "", "else", ":", "\n", "            ", "inter_mask", "=", "_dmr_inter_mask", "(", "dist", ".", "shape", "[", "0", "]", ",", "C", ",", "K", ",", "weights", ".", "device", ")", "\n", "inter_dist", "=", "_index_mask", "(", "dist", ",", "inter_mask", ")", "\n", "\n", "", "if", "isinstance", "(", "inter_margin", ",", "float", ")", ":", "\n", "            ", "inter_losses", "=", "torch", ".", "clamp", "(", "inter_margin", "-", "inter_dist", ",", "min", "=", "0.", ")", "\n", "inter_loss", "=", "_dmr_aggreg", "(", "inter_losses", ",", "aggreg_mode", "=", "inter_aggreg", ")", "\n", "loss", "+=", "inter_loss", "\n", "", "elif", "inter_margin", "==", "\"gor\"", ":", "\n", "            ", "simi", "=", "-", "0.5", "*", "(", "inter_dist", "-", "2", ")", "\n", "first_moment", "=", "torch", ".", "mean", "(", "simi", ")", "\n", "second_moment", "=", "torch", ".", "mean", "(", "torch", ".", "pow", "(", "simi", ",", "2", ")", ")", "\n", "inter_loss", "=", "torch", ".", "pow", "(", "first_moment", ",", "\n", "2", ")", "+", "torch", ".", "clamp", "(", "second_moment", "-", "1.", "/", "weights", ".", "shape", "[", "-", "1", "]", ",", "min", "=", "0.", ")", "\n", "loss", "+=", "inter_loss", "\n", "", "elif", "inter_margin", "==", "\"simi\"", ":", "\n", "            ", "if", "square", ":", "\n", "                ", "inter_dist", "=", "torch", ".", "pow", "(", "inter_dist", ",", "2", ")", "\n", "", "simi", "=", "torch", ".", "abs", "(", "-", "0.5", "*", "(", "inter_dist", "-", "2", ")", ")", "\n", "inter_loss", "=", "_dmr_aggreg", "(", "simi", ",", "aggreg_mode", "=", "\"adamine\"", ")", "\n", "loss", "+=", "inter_loss", "\n", "", "else", ":", "\n", "            ", "assert", "False", ",", "inter_margin", "\n", "\n", "", "", "if", "isinstance", "(", "loss", ",", "float", ")", ":", "\n", "        ", "loss", "=", "torch", ".", "tensor", "(", "0.", ")", ".", "to", "(", "weights", ".", "device", ")", "\n", "\n", "", "return", "factor", "*", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.losses.regularizations._index_mask": [[323, 325], ["torch.masked_select"], "function", ["None"], ["", "def", "_index_mask", "(", "tensor", ",", "mask", ")", ":", "\n", "    ", "return", "torch", ".", "masked_select", "(", "tensor", ",", "mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.losses.regularizations._dmr_inter_mask": [[327, 337], ["functools.lru_cache", "torch.tensor", "range", "inter_mask.to", "torch.ones().bool", "numpy.tril_indices", "torch.ones"], "function", ["None"], ["", "@", "functools", ".", "lru_cache", "(", "maxsize", "=", "64", ",", "typed", "=", "False", ")", "\n", "def", "_dmr_inter_mask", "(", "size", ",", "nb_classes", ",", "nb_clusters", ",", "device", ")", ":", "\n", "    ", "inter_mask", "=", "~", "torch", ".", "ones", "(", "size", ",", "size", ")", ".", "bool", "(", ")", "\n", "lower_tri", "=", "torch", ".", "tensor", "(", "np", ".", "tril_indices", "(", "size", ",", "k", "=", "0", ")", ")", "\n", "\n", "for", "c", "in", "range", "(", "nb_classes", ")", ":", "\n", "        ", "inter_mask", "[", "c", "*", "nb_clusters", ":", "(", "c", "+", "1", ")", "*", "nb_clusters", ",", "(", "c", "+", "1", ")", "*", "nb_clusters", ":", "]", "=", "True", "\n", "", "inter_mask", "[", "lower_tri", "[", "0", "]", ",", "lower_tri", "[", "1", "]", "]", "=", "False", "\n", "\n", "return", "inter_mask", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.losses.regularizations._dmr_inter_oldvsnew_mask": [[339, 348], ["functools.lru_cache", "torch.tensor", "inter_mask.to", "torch.ones().bool", "numpy.tril_indices", "torch.ones"], "function", ["None"], ["", "@", "functools", ".", "lru_cache", "(", "maxsize", "=", "64", ",", "typed", "=", "False", ")", "\n", "def", "_dmr_inter_oldvsnew_mask", "(", "size", ",", "current_index", ",", "device", ")", ":", "\n", "    ", "inter_mask", "=", "~", "torch", ".", "ones", "(", "size", ",", "size", ")", ".", "bool", "(", ")", "\n", "lower_tri", "=", "torch", ".", "tensor", "(", "np", ".", "tril_indices", "(", "size", ",", "k", "=", "0", ")", ")", "\n", "\n", "inter_mask", "[", ":", "current_index", ",", "current_index", ":", "]", "=", "True", "\n", "inter_mask", "[", "lower_tri", "[", "0", "]", ",", "lower_tri", "[", "1", "]", "]", "=", "False", "\n", "\n", "return", "inter_mask", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.losses.regularizations._dmr_intra_mask": [[350, 360], ["functools.lru_cache", "torch.tensor", "range", "intra_mask.to", "torch.ones().bool", "numpy.tril_indices", "torch.ones"], "function", ["None"], ["", "@", "functools", ".", "lru_cache", "(", "maxsize", "=", "64", ",", "typed", "=", "False", ")", "\n", "def", "_dmr_intra_mask", "(", "size", ",", "nb_classes", ",", "nb_clusters", ",", "device", ")", ":", "\n", "    ", "intra_mask", "=", "~", "torch", ".", "ones", "(", "size", ",", "size", ")", ".", "bool", "(", ")", "\n", "lower_tri", "=", "torch", ".", "tensor", "(", "np", ".", "tril_indices", "(", "size", ",", "k", "=", "0", ")", ")", "\n", "\n", "for", "c", "in", "range", "(", "nb_classes", ")", ":", "\n", "        ", "intra_mask", "[", "c", "*", "nb_clusters", ":", "(", "c", "+", "1", ")", "*", "nb_clusters", ",", ":", "(", "c", "+", "1", ")", "*", "nb_clusters", "]", "=", "True", "\n", "", "intra_mask", "[", "lower_tri", "[", "0", "]", ",", "lower_tri", "[", "1", "]", "]", "=", "False", "\n", "\n", "return", "intra_mask", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.losses.regularizations._dmr_weights_distance": [[362, 370], ["torch.abs", "torch.sqrt", "torch.mm", "weights.t", "torch.abs"], "function", ["None"], ["", "def", "_dmr_weights_distance", "(", "weights", ",", "square", "=", "True", ")", ":", "\n", "    ", "dist", "=", "2", "-", "2", "*", "torch", ".", "mm", "(", "weights", ",", "weights", ".", "t", "(", ")", ")", "\n", "dist", "=", "torch", ".", "abs", "(", "dist", ")", "# Absolute is to handle small negatives due to numerical instability", "\n", "\n", "if", "not", "square", ":", "\n", "        ", "dist", "=", "torch", ".", "sqrt", "(", "torch", ".", "abs", "(", "dist", ")", "+", "1e-10", ")", "\n", "\n", "", "return", "dist", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.losses.regularizations._dmr_aggreg": [[372, 381], ["NotImplementedError", "torch.mean", "torch.max", "regularizations._adamine"], "function", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.losses.regularizations._adamine"], ["", "def", "_dmr_aggreg", "(", "losses", ",", "aggreg_mode", "=", "\"mean\"", ")", ":", "\n", "    ", "if", "aggreg_mode", "==", "\"mean\"", ":", "\n", "        ", "return", "torch", ".", "mean", "(", "losses", ")", "\n", "", "elif", "aggreg_mode", "==", "\"max\"", ":", "\n", "        ", "return", "torch", ".", "max", "(", "losses", ")", "\n", "", "elif", "aggreg_mode", "==", "\"adamine\"", ":", "\n", "        ", "return", "_adamine", "(", "losses", ")", "\n", "\n", "", "raise", "NotImplementedError", "(", "\"Unknown aggreg mode {}.\"", ".", "format", "(", "aggreg_mode", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.losses.regularizations._adamine": [[383, 386], ["max", "len", "losses.sum", "torch.nonzero"], "function", ["None"], ["", "def", "_adamine", "(", "losses", ")", ":", "\n", "    ", "nb_not_neg", "=", "max", "(", "len", "(", "torch", ".", "nonzero", "(", "losses", ")", ")", ",", "1.0", ")", "\n", "return", "losses", ".", "sum", "(", ")", "/", "nb_not_neg", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.losses.regularizations.double_margin_constrastive_regularization_features": [[388, 404], ["targets.cpu().numpy", "enumerate", "range", "len", "len", "targets.cpu", "numpy.where", "numpy.where", "numpy.random.choice", "pos_tuple.append", "numpy.random.choice", "neg_tuple.append"], "function", ["None"], ["", "def", "double_margin_constrastive_regularization_features", "(", "\n", "features", ",", "targets", ",", "intra_margin", "=", "0.2", ",", "inter_margin", "=", "0.8", "\n", ")", ":", "\n", "    ", "pos_tuples", ",", "neg_tuples", "=", "[", "]", ",", "[", "]", "\n", "\n", "np_targets", "=", "targets", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "for", "i", ",", "t", "in", "enumerate", "(", "range", "(", "np_targets", ")", ")", ":", "\n", "        ", "indexes_similar", "=", "np", ".", "where", "(", "targets", "==", "t", ")", "[", "0", "]", "\n", "indexes_disimilar", "=", "np", ".", "where", "(", "targets", "!=", "t", ")", "[", "0", "]", "\n", "\n", "if", "len", "(", "indexes_similar", ")", ":", "\n", "            ", "pos", "=", "np", ".", "random", ".", "choice", "(", "indexes_similar", ")", "\n", "pos_tuple", ".", "append", "(", "(", "i", ",", "pos", ")", ")", "\n", "", "if", "len", "(", "indexes_disimilar", ")", ":", "\n", "            ", "neg", "=", "np", ".", "random", ".", "choice", "(", "indexes_disimilar", ")", "\n", "neg_tuple", ".", "append", "(", "(", "i", ",", "neg", ")", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.base.IncrementalLearner.__init__": [[24, 27], ["None"], "methods", ["None"], ["\n", "memory_old_confidence", "=", "old_confidence", "[", "memory_indexes", "]", "\n", "memory_targets", "=", "targets", "[", "memory_indexes", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.base.IncrementalLearner.set_task_info": [[28, 35], ["None"], "methods", ["None"], ["right_old_confidence", "=", "memory_old_confidence", "[", "torch", ".", "arange", "(", "memory_old_confidence", ".", "shape", "[", "0", "]", ")", ",", "\n", "memory_targets", "]", "\n", "hard_indexes", "=", "right_old_confidence", ".", "le", "(", "0.5", ")", "\n", "\n", "factors", "=", "2", "*", "(", "1", "+", "(", "1", "-", "right_old_confidence", "[", "hard_indexes", "]", ")", ")", "\n", "\n", "loss", "=", "torch", ".", "mean", "(", "\n", "torch", ".", "cat", "(", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.base.IncrementalLearner.before_task": [[36, 40], ["inclearn.utils.LOGGER.LOGGER.info", "base.IncrementalLearner.eval", "base.IncrementalLearner._before_task"], "methods", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.base.IncrementalLearner.eval", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.Imagine.Imagine._before_task"], ["(", "new_losses", ",", "memory_losses", "[", "~", "hard_indexes", "]", ",", "memory_losses", "[", "hard_indexes", "]", "*", "factors", ")", "\n", ")", "\n", ")", "\n", "\n", "return", "loss", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.base.IncrementalLearner.train_task": [[41, 50], ["inclearn.utils.LOGGER.LOGGER.info", "base.IncrementalLearner._train_task", "base.IncrementalLearner.train", "base.IncrementalLearner.eval"], "methods", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.Imagine.Imagine._train_task", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.base.IncrementalLearner.train", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.base.IncrementalLearner.eval"], ["\n", "\n", "", "def", "nca", "(", "\n", "similarities", ",", "\n", "targets", ",", "\n", "class_weights", "=", "None", ",", "\n", "focal_gamma", "=", "None", ",", "\n", "scale", "=", "1", ",", "\n", "margin", "=", "0.", ",", "\n", "exclude_pos_denominator", "=", "True", ",", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.base.IncrementalLearner.after_task_intensive": [[51, 55], ["inclearn.utils.LOGGER.LOGGER.info", "base.IncrementalLearner.eval", "base.IncrementalLearner._after_task_intensive"], "methods", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.base.IncrementalLearner.eval", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.Imagine.Imagine._after_task_intensive"], ["hinge_proxynca", "=", "False", ",", "\n", "memory_flags", "=", "None", ",", "\n", "mixed", "=", "True", ",", "\n", "reduction", "=", "'mean'", "\n", ")", ":", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.base.IncrementalLearner.after_task": [[56, 60], ["inclearn.utils.LOGGER.LOGGER.info", "base.IncrementalLearner.eval", "base.IncrementalLearner._after_task"], "methods", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.base.IncrementalLearner.eval", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.Imagine.Imagine._after_task"], ["    "]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.base.IncrementalLearner.eval_task": [[61, 65], ["inclearn.utils.LOGGER.LOGGER.info", "base.IncrementalLearner.eval", "base.IncrementalLearner._eval_task"], "methods", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.base.IncrementalLearner.eval", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.Imagine.Imagine._eval_task"], []], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.base.IncrementalLearner.get_memory": [[66, 68], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.base.IncrementalLearner.get_val_memory": [[69, 71], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.base.IncrementalLearner._before_task": [[72, 74], ["None"], "methods", ["None"], ["\n", "if", "memory_flags", "is", "not", "None", "and", "not", "mixed", ":", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.base.IncrementalLearner._train_task": [[75, 78], ["None"], "methods", ["None"], ["        ", "mask", "=", "memory_flags", "==", "2", "\n", "similarities", "=", "similarities", "[", "~", "mask", "]", "\n", "targets", "=", "targets", "[", "~", "mask", "]", "\n", "", "margins", "=", "torch", ".", "zeros_like", "(", "similarities", ")", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.base.IncrementalLearner._after_task_intensive": [[79, 81], ["None"], "methods", ["None"], ["margins", "[", "torch", ".", "arange", "(", "margins", ".", "shape", "[", "0", "]", ")", ",", "targets", "]", "=", "margin", "\n", "similarities", "=", "scale", "*", "(", "similarities", "-", "margin", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.base.IncrementalLearner._after_task": [[82, 84], ["None"], "methods", ["None"], ["if", "exclude_pos_denominator", ":", "# NCA-specific", "\n", "        ", "similarities", "=", "similarities", "-", "similarities", ".", "max", "(", "1", ")", "[", "0", "]", ".", "view", "(", "-", "1", ",", "1", ")", "# Stability", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.base.IncrementalLearner._eval_task": [[85, 87], ["None"], "methods", ["None"], ["disable_pos", "=", "torch", ".", "zeros_like", "(", "similarities", ")", "\n", "disable_pos", "[", "torch", ".", "arange", "(", "len", "(", "similarities", ")", ")", ",", "\n", "targets", "]", "=", "similarities", "[", "torch", ".", "arange", "(", "len", "(", "similarities", ")", ")", ",", "targets", "]", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.base.IncrementalLearner.save_metadata": [[88, 90], ["None"], "methods", ["None"], ["\n", "numerator", "=", "similarities", "[", "torch", ".", "arange", "(", "similarities", ".", "shape", "[", "0", "]", ")", ",", "targets", "]", "\n", "denominator", "=", "similarities", "-", "disable_pos", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.base.IncrementalLearner.load_metadata": [[91, 93], ["None"], "methods", ["None"], ["\n", "losses", "=", "numerator", "-", "torch", ".", "log", "(", "torch", ".", "exp", "(", "denominator", ")", ".", "sum", "(", "-", "1", ")", ")", "\n", "if", "class_weights", "is", "not", "None", ":", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.base.IncrementalLearner._new_task_index": [[94, 97], ["None"], "methods", ["None"], ["            ", "losses", "=", "class_weights", "[", "targets", "]", "*", "losses", "\n", "\n", "", "losses", "=", "-", "losses", "\n", "if", "hinge_proxynca", ":", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.base.IncrementalLearner.inc_dataset": [[102, 105], ["None"], "methods", ["None"], ["\n", "", "return", "F", ".", "cross_entropy", "(", "similarities", ",", "targets", ",", "weight", "=", "class_weights", ",", "reduction", "=", "reduction", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.base.IncrementalLearner.network": [[106, 109], ["None"], "methods", ["None"], ["", "def", "embeddings_similarity", "(", "features_a", ",", "features_b", ")", ":", "\n", "    ", "return", "F", ".", "cosine_embedding_loss", "(", "\n", "features_a", ",", "features_b", ",", "\n", "torch", ".", "ones", "(", "features_a", ".", "shape", "[", "0", "]", ")", ".", "to", "(", "features_a", ".", "device", ")", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.base.IncrementalLearner.save_parameters": [[110, 114], ["os.path.join", "inclearn.utils.LOGGER.LOGGER.info", "torch.save", "base.IncrementalLearner.network.state_dict"], "methods", ["None"], [")", "\n", "\n", "\n", "", "def", "pairwise_cos_distance", "(", "features_a", ":", "torch", ".", "Tensor", ",", "features_b", ":", "torch", ".", "Tensor", ")", ":", "\n", "# normalize two features", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.base.IncrementalLearner.load_parameters": [[115, 127], ["os.path.join", "inclearn.utils.LOGGER.LOGGER.info", "os.path.exists", "inclearn.utils.LOGGER.LOGGER.warning", "base.IncrementalLearner.network.load_state_dict", "torch.load", "inclearn.utils.LOGGER.LOGGER.warning", "torch.load"], "methods", ["None"], ["    ", "n_features_a", "=", "F", ".", "normalize", "(", "features_a", ",", "dim", "=", "1", ")", "\n", "n_features_b", "=", "F", ".", "normalize", "(", "features_b", ",", "dim", "=", "1", ")", "\n", "# calculate Euclidean distance", "\n", "euc_dist", "=", "torch", ".", "norm", "(", "n_features_a", "[", ":", ",", "None", "]", "-", "n_features_b", ",", "p", "=", "2", ",", "dim", "=", "2", ")", "\n", "# calculate cosine distance ( 1- cos(a,b) )", "\n", "cos_dist", "=", "0.5", "*", "(", "torch", ".", "pow", "(", "euc_dist", ",", "2", ")", ")", "\n", "return", "cos_dist", "\n", "\n", "\n", "", "def", "ucir_ranking", "(", "logits", ",", "targets", ",", "n_classes", ",", "task_size", ",", "nb_negatives", "=", "2", ",", "margin", "=", "0.2", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.base.IncrementalLearner.eval": [[128, 130], ["base.IncrementalLearner._network.eval"], "methods", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.base.IncrementalLearner.eval"], []], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.base.IncrementalLearner.train": [[131, 133], ["base.IncrementalLearner._network.train"], "methods", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.base.IncrementalLearner.train"], ["\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.icarl.ICarl.__init__": [[33, 106], ["inclearn.models.base.IncrementalLearner.__init__", "args.get", "args.get", "args.get", "args.get", "args.get", "args.get", "args.get", "inclearn.lib.network.BasicNet", "collections.defaultdict", "args.get", "icarl.ICarl._generator_config.get", "icarl.ICarl._train_generator_config.get", "icarl.ICarl._train_generator_config.get", "icarl.ICarl._train_generator_config.get", "icarl.ICarl._train_generator_config.get", "icarl.ICarl._generator_config.get", "args.get", "icarl.ICarl._generator_config.get", "args.get", "args.get", "bool"], "methods", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.tools.conv_mtl.Conv2dMtl.__init__", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.get", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.get", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.get", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.get", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.get", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.get", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.get", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.get", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.get", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.get", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.get", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.get", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.get", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.get", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.get", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.get", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.get", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.get"], ["        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "_disable_progressbar", "=", "args", ".", "get", "(", "\"no_progressbar\"", ",", "False", ")", "\n", "\n", "self", ".", "_device", "=", "args", "[", "\"device\"", "]", "[", "0", "]", "\n", "self", ".", "_multiple_devices", "=", "args", "[", "\"device\"", "]", "\n", "\n", "self", ".", "_opt_name", "=", "args", "[", "\"optimizer\"", "]", "\n", "self", ".", "_lr", "=", "args", "[", "\"lr\"", "]", "\n", "self", ".", "_weight_decay", "=", "args", "[", "\"weight_decay\"", "]", "\n", "self", ".", "_n_epochs", "=", "args", "[", "\"epochs\"", "]", "\n", "\n", "self", ".", "_scheduling", "=", "args", "[", "\"scheduling\"", "]", "\n", "self", ".", "_lr_decay", "=", "args", "[", "\"lr_decay\"", "]", "\n", "\n", "self", ".", "_warmup_config", "=", "args", ".", "get", "(", "\"warmup\"", ",", "{", "}", ")", "\n", "if", "self", ".", "_warmup_config", "and", "self", ".", "_warmup_config", "[", "\"total_epoch\"", "]", ">", "0", ":", "\n", "            ", "self", ".", "_lr", "/=", "self", ".", "_warmup_config", "[", "\"multiplier\"", "]", "\n", "\n", "", "self", ".", "_eval_every_x_epochs", "=", "args", ".", "get", "(", "\"eval_every_x_epochs\"", ")", "\n", "self", ".", "_early_stopping", "=", "args", ".", "get", "(", "\"early_stopping\"", ",", "{", "}", ")", "\n", "\n", "self", ".", "_memory_size", "=", "args", "[", "\"memory_size\"", "]", "\n", "self", ".", "_fixed_memory", "=", "args", "[", "\"fixed_memory\"", "]", "\n", "self", ".", "_n_classes", "=", "0", "\n", "self", ".", "_herding_selection", "=", "args", ".", "get", "(", "\"herding_selection\"", ",", "{", "\"type\"", ":", "\"icarl\"", "}", ")", "\n", "self", ".", "_last_results", "=", "None", "\n", "self", ".", "_validation_percent", "=", "args", "[", "\"validation\"", "]", "\n", "\n", "self", ".", "_rotations_config", "=", "args", ".", "get", "(", "\"rotations_config\"", ",", "{", "}", ")", "\n", "self", ".", "_random_noise_config", "=", "args", ".", "get", "(", "\"random_noise_config\"", ",", "{", "}", ")", "\n", "\n", "self", ".", "_network", "=", "network", ".", "BasicNet", "(", "\n", "args", "[", "\"convnet\"", "]", ",", "\n", "convnet_kwargs", "=", "args", ".", "get", "(", "\"convnet_config\"", ",", "{", "}", ")", ",", "\n", "classifier_kwargs", "=", "args", ".", "get", "(", "\"classifier_config\"", ",", "{", "\n", "\"type\"", ":", "\"fc\"", ",", "\n", "\"use_bias\"", ":", "True", "\n", "}", ")", ",", "\n", "device", "=", "self", ".", "_device", ",", "\n", "extract_no_act", "=", "True", ",", "\n", "classifier_no_act", "=", "False", ",", "\n", "rotations_predictor", "=", "bool", "(", "self", ".", "_rotations_config", ")", "\n", ")", "\n", "\n", "self", ".", "_examplars", "=", "{", "}", "\n", "self", ".", "_means", "=", "None", "\n", "self", ".", "_herding_indexes", "=", "{", "}", "\n", "self", ".", "_data_memory", ",", "self", ".", "_targets_memory", "=", "None", ",", "None", "\n", "\n", "self", ".", "_old_model", "=", "None", "\n", "\n", "self", ".", "_clf_loss", "=", "F", ".", "binary_cross_entropy_with_logits", "\n", "self", ".", "_distil_loss", "=", "F", ".", "binary_cross_entropy_with_logits", "\n", "\n", "self", ".", "_epoch_metrics", "=", "collections", ".", "defaultdict", "(", "list", ")", "\n", "\n", "self", ".", "_class_means", "=", "None", "\n", "self", ".", "_generator_config", "=", "args", ".", "get", "(", "\"generator_config\"", ",", "{", "}", ")", "\n", "self", ".", "_train_generator_config", "=", "self", ".", "_generator_config", ".", "get", "(", "\"train_config\"", ",", "{", "}", ")", "\n", "self", ".", "_train_generator_label_batchsize", "=", "self", ".", "_train_generator_config", ".", "get", "(", "\"train_generator_label_batchsize\"", ",", "128", ")", "\n", "self", ".", "_generator_scheduling", "=", "self", ".", "_generator_config", ".", "get", "(", "'scheduling'", ")", "\n", "self", ".", "_generator_lr_decay", "=", "self", ".", "_generator_config", ".", "get", "(", "'lr_decay'", ")", "\n", "self", ".", "_generator_pod_spatial_config", "=", "self", ".", "_generator_config", ".", "get", "(", "\"generator_pod_spatial_config\"", ",", "{", "}", ")", "\n", "self", ".", "_generator_optimizer", "=", "{", "}", "\n", "self", ".", "_generator_scheduler", "=", "{", "}", "\n", "\n", "self", ".", "_generator_pretrain_config", "=", "self", ".", "_generator_config", ".", "get", "(", "\"pretrain_config\"", ",", "{", "'epoch'", ":", "40", ",", "\n", "'scheduling'", ":", "{", "'type'", ":", "'step'", ",", "\n", "'epochs'", ":", "[", "20", ",", "\n", "30", ",", "\n", "35", "]", "}", "}", ")", "\n", "self", ".", "_n_epochs_pretrain_generator", "=", "self", ".", "_generator_pretrain_config", ".", "get", "(", "\"epoch\"", ",", "40", ")", "\n", "self", ".", "_pretrain_generator_scheduling", "=", "self", ".", "_generator_pretrain_config", ".", "get", "(", "'scheduling'", ")", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.icarl.ICarl.save_metadata": [[108, 116], ["os.path.join", "inclearn.utils.LOGGER.LOGGER.info", "open", "pickle.dump"], "methods", ["None"], ["self", ".", "_n_epochs_generator", "=", "self", ".", "_generator_config", ".", "get", "(", "\"epoch\"", ",", "40", ")", "\n", "self", ".", "_generator_cos_margin", "=", "self", ".", "_generator_config", ".", "get", "(", "\"cos_margin\"", ",", "0.8", ")", "\n", "self", ".", "_use_same_class", "=", "args", ".", "get", "(", "\"use_same_classes\"", ",", "True", ")", "\n", "self", ".", "_generator_use_same_class", "=", "self", ".", "_generator_config", ".", "get", "(", "\"use_same_classes\"", ",", "True", ")", "\n", "self", ".", "_use_unlabeled", "=", "args", ".", "get", "(", "\"use_unlabeled\"", ",", "False", ")", "\n", "if", "self", ".", "_generator_config", ":", "\n", "            ", "latent_dim", "=", "self", ".", "_generator_config", ".", "get", "(", "\"latent_dim\"", ",", "64", ")", "\n", "output_dim", "=", "self", ".", "_generator_config", ".", "get", "(", "\"output_dim\"", ",", "64", ")", "\n", "self", ".", "class_encoders", "=", "{", "}", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.icarl.ICarl.load_metadata": [[118, 127], ["os.path.join", "inclearn.utils.LOGGER.LOGGER.info", "os.path.exists", "open", "pickle.load"], "methods", ["None"], ["\n", "", "self", ".", "_diff_cls_mapping", "=", "{", "}", "\n", "\n", "", "def", "save_metadata", "(", "self", ",", "directory", ",", "run_id", ")", ":", "\n", "        ", "path", "=", "os", ".", "path", ".", "join", "(", "directory", ",", "f\"meta_{run_id}_task_{self._task}.pkl\"", ")", "\n", "\n", "logger", ".", "LOGGER", ".", "info", "(", "\"Saving metadata at {}.\"", ".", "format", "(", "path", ")", ")", "\n", "with", "open", "(", "path", ",", "\"wb+\"", ")", "as", "f", ":", "\n", "            ", "pickle", ".", "dump", "(", "\n", "[", "self", ".", "_data_memory", ",", "self", ".", "_targets_memory", ",", "self", ".", "_herding_indexes", ",", "self", ".", "_class_means", "]", ",", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.icarl.ICarl.epoch_metrics": [[129, 132], ["dict"], "methods", ["None"], [")", "\n", "\n", "", "", "def", "load_metadata", "(", "self", ",", "directory", ",", "run_id", ")", ":", "\n", "        ", "path", "=", "os", ".", "path", ".", "join", "(", "directory", ",", "f\"meta_{run_id}_task_{self._task}.pkl\"", ")", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.icarl.ICarl._before_task": [[137, 163], ["icarl.ICarl._network.add_classes", "inclearn.utils.LOGGER.LOGGER.info", "inclearn.lib.factory.get_optimizer", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "icarl.ICarl._network.parameters", "icarl.ICarl._warmup_config.get", "inclearn.utils.LOGGER.LOGGER.info", "inclearn.lib.schedulers.GradualWarmupScheduler"], "methods", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.classifiers.CosineClassifier.add_classes", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.factory.get_optimizer", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.get"], ["with", "open", "(", "path", ",", "\"rb\"", ")", "as", "f", ":", "\n", "            ", "self", ".", "_data_memory", ",", "self", ".", "_targets_memory", ",", "self", ".", "_herding_indexes", ",", "self", ".", "_class_means", "=", "pickle", ".", "load", "(", "\n", "f", "\n", ")", "\n", "\n", "", "", "@", "property", "\n", "def", "epoch_metrics", "(", "self", ")", ":", "\n", "        ", "return", "dict", "(", "self", ".", "_epoch_metrics", ")", "\n", "\n", "# ----------", "\n", "# Public API", "\n", "# ----------", "\n", "\n", "", "def", "_before_task", "(", "self", ",", "train_loader", ",", "val_loader", ",", "taskid", ")", ":", "\n", "        ", "self", ".", "_n_classes", "+=", "self", ".", "_task_size", "\n", "self", ".", "_network", ".", "add_classes", "(", "self", ".", "_task_size", ")", "\n", "logger", ".", "LOGGER", ".", "info", "(", "\"Now {} examplars per class.\"", ".", "format", "(", "self", ".", "_memory_per_class", ")", ")", "\n", "\n", "self", ".", "_optimizer", "=", "factory", ".", "get_optimizer", "(", "\n", "self", ".", "_network", ".", "parameters", "(", ")", ",", "self", ".", "_opt_name", ",", "self", ".", "_lr", ",", "self", ".", "_weight_decay", "\n", ")", "\n", "base_scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "MultiStepLR", "(", "\n", "self", ".", "_optimizer", ",", "self", ".", "_scheduling", ",", "gamma", "=", "self", ".", "_lr_decay", "\n", ")", "\n", "self", ".", "_generator_scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "MultiStepLR", "(", "\n", "self", ".", "_generator_optimizer", ",", "self", ".", "_scheduling", ",", "gamma", "=", "self", ".", "_lr_decay", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.icarl.ICarl._train_task": [[164, 170], ["inclearn.utils.LOGGER.LOGGER.debug", "icarl.ICarl._training_step", "len"], "methods", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.icarl.ICarl._training_step"], ["if", "self", ".", "_warmup_config", ":", "\n", "            ", "if", "self", ".", "_warmup_config", ".", "get", "(", "\"only_first_step\"", ",", "True", ")", "and", "self", ".", "_task", "!=", "0", ":", "\n", "                ", "pass", "\n", "", "else", ":", "\n", "                ", "logger", ".", "LOGGER", ".", "info", "(", "\"Using WarmUp\"", ")", "\n", "self", ".", "_scheduler", "=", "schedulers", ".", "GradualWarmupScheduler", "(", "\n", "optimizer", "=", "self", ".", "_optimizer", ",", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.icarl.ICarl._training_step": [[171, 284], ["range", "len", "inclearn.utils.LOGGER.LOGGER.info", "torch.nn.DataParallel", "collections.defaultdict", "tqdm.tqdm.tqdm", "enumerate", "inclearn.utils.LOGGER.LOGGER.info", "hasattr", "torch.nn.DataParallel.convnet.normal_mode", "hasattr", "inclearn.utils.LOGGER.LOGGER.info", "torch.nn.DataParallel.convnet.clear_records", "torch.nn.DataParallel.convnet.record_mode", "icarl.ICarl._optimizer.zero_grad", "icarl.ICarl._forward_loss", "icarl.ICarl._print_metrics", "icarl.ICarl._scheduler.step", "icarl.ICarl._generator_scheduler.step", "icarl.ICarl._network.eval", "icarl.ICarl.build_examplars", "icarl.ICarl._eval_task", "inclearn.utils.LOGGER.LOGGER.info", "icarl.ICarl._network.train", "len", "len", "len", "torch.tensor", "iter", "next", "icarl._clean_list", "icarl._clean_list", "icarl.ICarl._generator_optimizer.zero_grad", "torch.nn.DataParallel.apply", "round", "inclearn.utils.LOGGER.LOGGER.warning", "torch.unique", "torch.unique", "list", "pseudo_memory_loader.batch_sampler.point_current_classes", "pseudo_memory_loader.batch_sampler.point_current_classes", "memory_loader.batch_sampler.point_current_classes", "iter", "next", "bool", "icarl.ICarl.backward", "icarl.ICarl._generator_optimizer.step", "icarl.ICarl.backward", "icarl.ICarl._optimizer.step", "len", "len", "set", "set", "all_p_classes.tolist", "torch.unique.tolist"], "methods", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.icarl.ICarl._forward_loss", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.icarl.ICarl._print_metrics", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.schedulers.GradualWarmupScheduler.step", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.schedulers.GradualWarmupScheduler.step", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.base.IncrementalLearner.eval", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.icarl.ICarl.build_examplars", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.Imagine.Imagine._eval_task", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.base.IncrementalLearner.train", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.icarl._clean_list", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.icarl._clean_list", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.data.samplers.AuxSampler.point_current_classes", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.data.samplers.AuxSampler.point_current_classes", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.data.samplers.AuxSampler.point_current_classes", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.classifiers.GradReverse.backward", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.schedulers.GradualWarmupScheduler.step", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.classifiers.GradReverse.backward", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.schedulers.GradualWarmupScheduler.step"], ["after_scheduler", "=", "base_scheduler", ",", "\n", "**", "self", ".", "_warmup_config", "\n", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "_scheduler", "=", "base_scheduler", "\n", "\n", "", "", "def", "_train_task", "(", "self", ",", "train_loader", ",", "pseudo_memory_loader", ",", "val_loader", ",", "\n", "train_generator_config", "=", "None", ",", "train_generator_data", "=", "None", ",", "freeze_layers", "=", "False", ")", ":", "\n", "        ", "logger", ".", "LOGGER", ".", "debug", "(", "\"nb {}.\"", ".", "format", "(", "len", "(", "train_loader", ".", "dataset", ")", ")", ")", "\n", "task_id", "=", "self", ".", "task_info", "[", "'task'", "]", "\n", "if", "task_id", "==", "0", ":", "\n", "            ", "n_epochs", "=", "self", ".", "_n_epochs_pretrain_generator", "if", "train_generator_config", "else", "self", ".", "_n_epochs", "\n", "", "else", ":", "\n", "            ", "n_epochs", "=", "self", ".", "_n_epochs_generator", "if", "train_generator_config", "else", "self", ".", "_n_epochs", "\n", "\n", "", "self", ".", "_training_step", "(", "train_loader", ",", "pseudo_memory_loader", ",", "val_loader", ",", "0", ",", "n_epochs", ",", "\n", "train_generator_config", ",", "train_generator_data", "=", "train_generator_data", ")", "\n", "\n", "", "def", "_training_step", "(", "self", ",", "train_loader", ",", "pseudo_memory_loader", ",", "val_loader", ",", "initial_epoch", ",", "nb_epochs", ",", "fine_tune", "=", "False", ",", "\n", "record_bn", "=", "True", ",", "train_generator_config", "=", "None", ",", "train_generator_data", "=", "None", ")", ":", "\n", "        ", "best_epoch", ",", "best_acc", "=", "-", "1", ",", "-", "1.", "\n", "wait", "=", "0", "\n", "\n", "grad", ",", "act", "=", "None", ",", "None", "\n", "if", "len", "(", "self", ".", "_multiple_devices", ")", ">", "1", ":", "\n", "            ", "logger", ".", "LOGGER", ".", "info", "(", "\"Duplicating model on {} gpus.\"", ".", "format", "(", "len", "(", "self", ".", "_multiple_devices", ")", ")", ")", "\n", "training_network", "=", "nn", ".", "DataParallel", "(", "self", ".", "_network", ",", "self", ".", "_multiple_devices", ")", "\n", "", "else", ":", "\n", "            ", "training_network", "=", "self", ".", "_network", "\n", "", "for", "epoch", "in", "range", "(", "initial_epoch", ",", "nb_epochs", ")", ":", "\n", "            ", "self", ".", "_metrics", "=", "collections", ".", "defaultdict", "(", "float", ")", "\n", "\n", "self", ".", "_epoch_percent", "=", "epoch", "/", "(", "nb_epochs", "-", "initial_epoch", ")", "\n", "\n", "if", "epoch", "==", "nb_epochs", "-", "1", "and", "record_bn", "and", "len", "(", "self", ".", "_multiple_devices", ")", "==", "1", "and", "hasattr", "(", "training_network", ".", "convnet", ",", "\"record_mode\"", ")", ":", "\n", "                ", "logger", ".", "LOGGER", ".", "info", "(", "\"Recording BN means & vars for MCBN...\"", ")", "\n", "training_network", ".", "convnet", ".", "clear_records", "(", ")", "\n", "training_network", ".", "convnet", ".", "record_mode", "(", ")", "\n", "", "if", "train_generator_config", "is", "not", "None", ":", "\n", "                ", "train_loader", "=", "train_generator_data", "[", "'labeled_loader'", "]", "\n", "", "prog_bar", "=", "tqdm", "(", "\n", "train_loader", ",", "\n", "disable", "=", "self", ".", "_disable_progressbar", ",", "\n", "ascii", "=", "True", ",", "\n", "bar_format", "=", "\"{desc}: {percentage:3.0f}% | {n_fmt}/{total_fmt} | {rate_fmt}{postfix}\"", "\n", ")", "\n", "if", "self", ".", "_use_unlabeled", "and", "self", ".", "_task", ">", "0", ":", "\n", "                ", "unlabeled_aux_iter", "=", "iter", "(", "pseudo_memory_loader", ")", "\n", "", "if", "train_generator_config", "is", "not", "None", ":", "\n", "                ", "memory_loader", "=", "train_generator_data", "[", "'memory_loader'", "]", "# type:torch.utils.DataLoader", "\n", "memory_iter", "=", "iter", "(", "memory_loader", ")", "\n", "", "for", "i", ",", "input_dict", "in", "enumerate", "(", "prog_bar", ",", "start", "=", "1", ")", ":", "\n", "                ", "if", "i", "==", "1", ":", "\n", "                    ", "if", "epoch", ">", "initial_epoch", "and", "self", ".", "_use_unlabeled", "and", "self", ".", "_task", ">", "0", "or", "train_generator_config", ":", "\n", "                        ", "if", "train_generator_config", "is", "not", "None", ":", "\n", "                            ", "pseudo_memory_loader", ".", "batch_sampler", ".", "re_generate", "(", "farther_dataset_idx", "=", "None", ",", "\n", "father_classes_per_batch", "=", "train_loader", ".", "batch_sampler", ".", "classes_per_batch", ")", "\n", "memory_loader", ".", "batch_sampler", ".", "re_generate", "(", "farther_dataset_idx", "=", "None", ",", "\n", "father_classes_per_batch", "=", "train_loader", ".", "batch_sampler", ".", "classes_per_batch", ")", "\n", "", "else", ":", "\n", "                            ", "pseudo_memory_loader", ".", "batch_sampler", ".", "re_generate", "(", "train_loader", ".", "sampler", ".", "iter_list", ")", "\n", "", "if", "self", ".", "_task", ">", "0", "or", "train_generator_config", ":", "\n", "                            ", "unlabeled_aux_iter", "=", "iter", "(", "pseudo_memory_loader", ")", "\n", "", "if", "train_generator_config", "is", "not", "None", ":", "\n", "                            ", "memory_iter", "=", "iter", "(", "memory_loader", ")", "\n", "\n", "", "", "", "inputs", ",", "targets", "=", "input_dict", "[", "\"inputs\"", "]", ",", "input_dict", "[", "\"targets\"", "]", "\n", "memory_flags", "=", "input_dict", "[", "\"memory_flags\"", "]", "\n", "memory_dict", "=", "None", "\n", "\n", "if", "self", ".", "_use_unlabeled", "and", "self", ".", "_task", ">", "0", "or", "train_generator_config", ":", "\n", "                    ", "unlabeled_aux_data_dict", "=", "next", "(", "unlabeled_aux_iter", ")", "\n", "", "else", ":", "\n", "                    ", "unlabeled_aux_data_dict", "=", "None", "\n", "", "if", "train_generator_config", "is", "not", "None", ":", "\n", "                    ", "memory_dict", "=", "next", "(", "memory_iter", ")", "\n", "\n", "", "self", ".", "_optimizer", ".", "zero_grad", "(", ")", "\n", "if", "train_generator_config", ":", "\n", "                    ", "for", "e", "in", "self", ".", "_generator_optimizer", ":", "\n", "                        ", "self", ".", "_generator_optimizer", "[", "e", "]", ".", "zero_grad", "(", ")", "\n", "", "", "loss", "=", "self", ".", "_forward_loss", "(", "training_network", ",", "inputs", ",", "targets", ",", "memory_flags", ",", "unlabeled_aux_data_dict", ",", "\n", "memory_data", "=", "memory_dict", ",", "fine_tune", "=", "fine_tune", ",", "\n", "train_generator_config", "=", "train_generator_config", ",", "\n", "use_generator", "=", "bool", "(", "self", ".", "_generator_config", ")", ")", "\n", "if", "train_generator_config", "is", "not", "None", ":", "\n", "                    ", "loss", ".", "backward", "(", ")", "\n", "for", "cls", "in", "torch", ".", "unique", "(", "targets", ")", ":", "\n", "                        ", "self", ".", "_generator_optimizer", "[", "cls", ".", "item", "(", ")", "]", ".", "step", "(", ")", "\n", "# self._optimizer.step()", "\n", "", "", "else", ":", "\n", "                    ", "loss", ".", "backward", "(", ")", "\n", "self", ".", "_optimizer", ".", "step", "(", ")", "\n", "\n", "", "self", ".", "_print_metrics", "(", "prog_bar", ",", "epoch", ",", "nb_epochs", ",", "i", ")", "\n", "\n", "", "if", "self", ".", "_scheduler", "and", "train_generator_config", "is", "None", ":", "\n", "                ", "self", ".", "_scheduler", ".", "step", "(", "epoch", ")", "\n", "", "if", "train_generator_config", "is", "not", "None", ":", "\n", "                ", "for", "e", "in", "self", ".", "_generator_scheduler", ":", "\n", "                    ", "self", ".", "_generator_scheduler", "[", "e", "]", ".", "step", "(", "epoch", ")", "\n", "\n", "", "", "", "if", "len", "(", "self", ".", "_multiple_devices", ")", "==", "1", "and", "hasattr", "(", "training_network", ".", "convnet", ",", "\"record_mode\"", ")", ":", "\n", "            ", "training_network", ".", "convnet", ".", "normal_mode", "(", ")", "\n", "\n", "", "", "def", "_print_metrics", "(", "self", ",", "prog_bar", ",", "epoch", ",", "nb_epochs", ",", "nb_batches", ")", ":", "\n", "        ", "pretty_metrics", "=", "\", \"", ".", "join", "(", "\n", "\"{}: {}\"", ".", "format", "(", "metric_name", ",", "round", "(", "metric_value", "/", "nb_batches", ",", "3", ")", ")", "\n", "for", "metric_name", ",", "metric_value", "in", "self", ".", "_metrics", ".", "items", "(", ")", "\n", ")", "\n", "\n", "prog_bar", ".", "set_description", "(", "\n", "\"T{}/{}, E{}/{} => {}\"", ".", "format", "(", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.icarl.ICarl._print_metrics": [[285, 294], ["prog_bar.set_description", "round", "icarl.ICarl._metrics.items"], "methods", ["None"], ["self", ".", "_task", "+", "1", ",", "self", ".", "_n_tasks", ",", "epoch", "+", "1", ",", "nb_epochs", ",", "pretty_metrics", "\n", ")", "\n", ")", "\n", "\n", "", "def", "mix_features_generator", "(", "self", ",", "inputs", ",", "memory_flags", ",", "outputs", ",", "mem_out", ",", "targets", ",", "mem_targets", ",", "training_network", ",", "\n", "unlabeled_img", ",", "unlabeled_output", ",", "unlabeled_pseudo_label", ",", "train_generator", "=", "False", ")", ":", "\n", "        ", "labeled_data_mask", "=", "memory_flags", "==", "0", "\n", "origin_raw_features", "=", "outputs", "[", "'raw_features'", "]", "\n", "origin_features", "=", "outputs", "[", "'features'", "]", "\n", "origin_logits", "=", "outputs", "[", "'logits'", "]", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.icarl.ICarl.mix_features_generator": [[297, 385], ["unlabeled_img.to.to.to", "training_network", "torch.stack", "torch.tensor().to", "torch.tensor().to", "torch.tensor", "torch.tensor().to", "torch.tensor().to", "torch.unique", "torch.cat", "torch.cat", "torch.stack", "cls.item.item.item", "cls_encoders", "cls_encoders", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "training_network", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.stack", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "numpy.random.choice().item", "memory_flags.long", "len", "len", "torch.tensor().repeat().to", "torch.tensor().repeat().to", "numpy.random.choice", "torch.ones", "torch.unique().cpu().numpy", "torch.tensor().repeat", "torch.tensor().repeat", "len", "len", "torch.unique().cpu", "torch.tensor", "torch.tensor", "torch.unique"], "methods", ["None"], ["if", "not", "train_generator", ":", "\n", "            ", "memory_targets", "=", "targets", "[", "~", "labeled_data_mask", "]", "\n", "if", "(", "~", "labeled_data_mask", ")", ".", "sum", "(", ")", ":", "\n", "                ", "memory_feat_out_stage1", "=", "torch", ".", "stack", "(", "[", "i", "for", "i", "in", "outputs", "[", "'attention'", "]", "[", "2", "]", "[", "~", "labeled_data_mask", "]", "]", ")", "\n", "", "else", ":", "\n", "                ", "memory_feat_out_stage1", "=", "[", "]", "\n", "", "", "else", ":", "# when training generator, we have memory data and labeled data inputted separately.", "\n", "            ", "memory_targets", "=", "mem_targets", "\n", "memory_feat_out_stage1", "=", "torch", ".", "stack", "(", "[", "i", "for", "i", "in", "mem_out", "[", "'attention'", "]", "[", "2", "]", "]", ")", "\n", "\n", "", "unlabeled_feat_out_stage1", "=", "torch", ".", "stack", "(", "[", "i", "for", "i", "in", "unlabeled_output", "[", "'attention'", "]", "[", "2", "]", "]", ",", "dim", "=", "0", ")", "\n", "mixed_feature_map", "=", "torch", ".", "tensor", "(", "[", "]", ")", ".", "to", "(", "self", ".", "_device", ")", "\n", "mixed_targets", "=", "torch", ".", "tensor", "(", "[", "]", ",", "dtype", "=", "torch", ".", "long", ")", ".", "to", "(", "self", ".", "_device", ")", "\n", "mixed_mem_flag", "=", "torch", ".", "tensor", "(", "[", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "cycle_features", "=", "torch", ".", "tensor", "(", "[", "]", ")", ".", "to", "(", "self", ".", "_device", ")", "\n", "cycle_targets", "=", "torch", ".", "tensor", "(", "[", "]", ",", "dtype", "=", "torch", ".", "long", ")", ".", "to", "(", "self", ".", "_device", ")", "\n", "labeled_features_to_be_mixed", "=", "memory_feat_out_stage1", "\n", "labeled_targets_to_be_mixed", "=", "memory_targets", "\n", "for", "cls", "in", "torch", ".", "unique", "(", "labeled_targets_to_be_mixed", ")", ":", "\n", "            ", "cls", "=", "cls", ".", "item", "(", ")", "\n", "cls_mask", "=", "labeled_targets_to_be_mixed", "==", "cls", "\n", "if", "not", "self", ".", "_generator_use_same_class", "or", "not", "self", ".", "_use_same_class", ":", "\n", "                ", "u_cls", "=", "np", ".", "random", ".", "choice", "(", "torch", ".", "unique", "(", "unlabeled_pseudo_label", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "1", ")", ".", "item", "(", ")", "\n", "self", ".", "_diff_cls_mapping", "[", "cls", "]", "=", "u_cls", "\n", "", "else", ":", "\n", "                ", "u_cls", "=", "cls", "\n", "", "cls_u_mask", "=", "unlabeled_pseudo_label", "==", "u_cls", "\n", "cls_label_features", "=", "labeled_features_to_be_mixed", "[", "cls_mask", "]", "\n", "cls_unlabeled_features", "=", "unlabeled_feat_out_stage1", "[", "cls_u_mask", "]", "\n", "\n", "# mix features", "\n", "if", "not", "len", "(", "cls_label_features", ")", "or", "not", "len", "(", "cls_unlabeled_features", ")", ":", "\n", "                ", "continue", "\n", "", "cls_encoders", "=", "self", ".", "class_encoders", "[", "cls", "]", "\n", "mixed_features", "=", "cls_encoders", "(", "cls_label_features", ",", "cls_unlabeled_features", ")", "\n", "cls_cycle_features", "=", "cls_encoders", "(", "mixed_features", ",", "cls_label_features", ")", "\n", "cycle_features", "=", "torch", ".", "cat", "(", "(", "cycle_features", ",", "cls_cycle_features", ")", ",", "dim", "=", "0", ")", "\n", "# mix other things", "\n", "mixed_feature_map", "=", "torch", ".", "cat", "(", "(", "mixed_feature_map", ",", "mixed_features", ")", ",", "dim", "=", "0", ")", "\n", "mixed_targets", "=", "torch", ".", "cat", "(", "(", "mixed_targets", ",", "torch", ".", "tensor", "(", "[", "cls", "]", ")", ".", "repeat", "(", "\n", "cls_label_features", ".", "shape", "[", "0", "]", "*", "cls_unlabeled_features", ".", "shape", "[", "0", "]", ")", ".", "to", "(", "self", ".", "_device", ")", ")", ",", "dim", "=", "0", ")", "\n", "mixed_mem_flag", "=", "torch", ".", "cat", "(", "(", "mixed_mem_flag", ",", "\n", "2", "*", "torch", ".", "ones", "(", "len", "(", "cls_unlabeled_features", ")", "*", "len", "(", "cls_label_features", ")", ",", "\n", "dtype", "=", "torch", ".", "long", ")", ")", ",", "dim", "=", "0", ")", "\n", "cycle_targets", "=", "torch", ".", "cat", "(", "\n", "(", "cycle_targets", ",", "torch", ".", "tensor", "(", "[", "cls", "]", ")", ".", "repeat", "(", "cls_cycle_features", ".", "shape", "[", "0", "]", ")", ".", "to", "(", "self", ".", "_device", ")", ")", ",", "dim", "=", "0", ")", "\n", "# pass through the extended feature map", "\n", "", "if", "not", "len", "(", "mixed_feature_map", ")", ":", "\n", "            ", "return", "inputs", ",", "memory_flags", ",", "outputs", ",", "targets", "\n", "", "else", ":", "\n", "            ", "mixed_mem_outputs", "=", "training_network", "(", "mixed_feature_map", ",", "pre_pass", "=", "True", ",", "if_mixed", "=", "True", ")", "\n", "#", "\n", "", "new_output", "=", "{", "\n", "'cycle_feature_map'", ":", "cycle_features", ",", "\n", "'cycle_targets'", ":", "cycle_targets", ",", "\n", "'origin_raw_features'", ":", "outputs", "[", "'raw_features'", "]", ",", "\n", "'origin_mem_flags'", ":", "memory_flags", ",", "\n", "'origin_targets'", ":", "targets", ",", "\n", "'unlabeled_imgs'", ":", "unlabeled_img", ",", "\n", "'unlabeled_pseudo_label'", ":", "unlabeled_pseudo_label", ",", "\n", "'origin_unlabeled_output'", ":", "unlabeled_output", ",", "\n", "'raw_features'", ":", "torch", ".", "cat", "(", "(", "origin_raw_features", ",", "mixed_mem_outputs", "[", "'raw_features'", "]", ")", ",", "dim", "=", "0", ")", ",", "\n", "'features'", ":", "torch", ".", "cat", "(", "(", "origin_features", ",", "mixed_mem_outputs", "[", "'features'", "]", ")", ",", "dim", "=", "0", ")", ",", "\n", "'attention'", ":", "outputs", "[", "'attention'", "]", ",", "\n", "'generator_outputs'", ":", "mixed_feature_map", ",", "\n", "'origin_logits'", ":", "origin_logits", ",", "\n", "'logits'", ":", "torch", ".", "cat", "(", "(", "origin_logits", ",", "mixed_mem_outputs", "[", "'logits'", "]", ")", ",", "dim", "=", "0", ")", ",", "\n", "'raw_logits'", ":", "torch", ".", "cat", "(", "(", "origin_outputs_raw_logits", ",", "mixed_mem_outputs", "[", "'raw_logits'", "]", ")", ",", "dim", "=", "0", ")", ",", "\n", "'stage2_feature_map'", ":", "origin_stage2_feature_map", ",", "\n", "}", "\n", "#", "\n", "# new_inputs = torch.cat((labeled_output_attention[2], extend_mem_feature_map), dim=0)", "\n", "new_inputs", "=", "inputs", "\n", "new_targets", "=", "torch", ".", "cat", "(", "(", "targets", ",", "mixed_targets", ")", ",", "dim", "=", "0", ")", "\n", "mixed_mem_flag", "=", "torch", ".", "cat", "(", "(", "memory_flags", ".", "long", "(", ")", ",", "mixed_mem_flag", ")", ",", "dim", "=", "0", ")", "\n", "# new_inputs = inputs", "\n", "return", "new_inputs", ",", "mixed_mem_flag", ",", "new_output", ",", "new_targets", "\n", "\n", "", "def", "_forward_loss", "(", "self", ",", "training_network", ",", "inputs", ",", "targets", ",", "memory_flags", ",", "unlabeled_data", ",", "memory_data", "=", "None", ",", "\n", "fine_tune", "=", "False", ",", "train_generator_config", "=", "None", ",", "use_generator", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "inputs", ",", "targets", "=", "inputs", ".", "to", "(", "self", ".", "_device", ")", ",", "targets", ".", "to", "(", "self", ".", "_device", ")", "\n", "if", "train_generator_config", "and", "memory_data", "is", "not", "None", ":", "\n", "            ", "mem_inputs", ",", "mem_targets", "=", "memory_data", "[", "'inputs'", "]", ".", "to", "(", "self", ".", "_device", ")", ",", "memory_data", "[", "'targets'", "]", ".", "to", "(", "self", ".", "_device", ")", "\n", "mem_out", "=", "training_network", "(", "mem_inputs", ")", "\n", "", "else", ":", "\n", "            ", "mem_out", ",", "mem_targets", "=", "None", ",", "None", "\n", "", "outputs", "=", "training_network", "(", "inputs", ")", "\n", "if", "(", "(", "unlabeled_data", "is", "not", "None", "and", "(", "0", "<", "memory_flags", ".", "sum", "(", ")", ")", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.icarl.ICarl._forward_loss": [[386, 429], ["training_network", "inclearn.lib.utils.to_onehot().to", "icarl.ICarl._compute_loss", "icarl.ICarl.item", "inputs.to", "targets.to", "training_network", "icarl.ICarl.mix_features_generator", "inclearn.lib.utils.check_loss", "ValueError", "memory_data[].to", "memory_data[].to", "inclearn.lib.utils.to_onehot", "memory_flags.sum"], "methods", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.Imagine.Imagine._compute_loss", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.icarl.ICarl.mix_features_generator", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.utils.check_loss", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.utils.to_onehot"], ["and", "not", "fine_tune", ")", "or", "train_generator_config", "is", "not", "None", ")", "and", "use_generator", ":", "\n", "            ", "unlabeled_img", ",", "unlabeled_pseudo_label", "=", "unlabeled_data", "[", "'inputs'", "]", ",", "unlabeled_data", "[", "'targets'", "]", "\n", "unlabeled_img", "=", "unlabeled_img", ".", "to", "(", "self", ".", "_device", ")", "\n", "unlabeled_output", "=", "training_network", "(", "unlabeled_img", ")", "\n", "new_inputs", ",", "new_memory_flag", ",", "new_output", ",", "new_targets", "=", "self", ".", "mix_features_generator", "(", "inputs", ",", "memory_flags", ",", "\n", "outputs", ",", "mem_out", ",", "\n", "targets", ",", "mem_targets", ",", "\n", "training_network", ",", "\n", "unlabeled_img", ",", "\n", "unlabeled_output", ",", "\n", "unlabeled_pseudo_label", ",", "\n", "train_generator_config", ")", "\n", "pre_pass", "=", "True", "\n", "", "else", ":", "\n", "            ", "new_output", "=", "outputs", "\n", "new_targets", "=", "targets", "\n", "new_memory_flag", "=", "memory_flags", "\n", "new_inputs", "=", "inputs", "\n", "pre_pass", "=", "False", "\n", "unlabeled_output", "=", "None", "\n", "\n", "", "onehot_targets", "=", "utils", ".", "to_onehot", "(", "targets", ",", "self", ".", "_n_classes", ")", ".", "to", "(", "self", ".", "_device", ")", "\n", "\n", "loss", "=", "self", ".", "_compute_loss", "(", "new_inputs", ",", "new_output", ",", "new_targets", ",", "onehot_targets", ",", "new_memory_flag", ",", "\n", "unlabeled_new_outputs", "=", "unlabeled_output", ",", "pre_pass", "=", "pre_pass", ",", "fine_tune", "=", "fine_tune", ",", "\n", "train_generator_config", "=", "train_generator_config", ")", "\n", "\n", "if", "not", "utils", ".", "check_loss", "(", "loss", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"A loss is NaN: {}\"", ".", "format", "(", "self", ".", "_metrics", ")", ")", "\n", "\n", "", "self", ".", "_metrics", "[", "\"loss\"", "]", "+=", "loss", ".", "item", "(", ")", "\n", "\n", "return", "loss", "\n", "\n", "", "def", "_after_task_intensive", "(", "self", ",", "inc_dataset", ")", ":", "\n", "        ", "if", "self", ".", "_herding_selection", "[", "\"type\"", "]", "==", "\"confusion\"", ":", "\n", "            ", "self", ".", "_compute_confusion_matrix", "(", ")", "\n", "\n", "", "self", ".", "_data_memory", ",", "self", ".", "_targets_memory", ",", "self", ".", "_herding_indexes", ",", "self", ".", "_class_means", "=", "self", ".", "build_examplars", "(", "\n", "inc_dataset", ",", "self", ".", "_herding_indexes", "\n", ")", "\n", "print", "(", "'-'", "*", "100", ")", "\n", "print", "(", "f'herding_index:{len(self._herding_indexes)}'", ")", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.icarl.ICarl._after_task_intensive": [[430, 436], ["icarl.ICarl.build_examplars", "icarl.ICarl._compute_confusion_matrix"], "methods", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.icarl.ICarl.build_examplars", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.icarl.ICarl._compute_confusion_matrix"], ["\n", "", "def", "_after_task", "(", "self", ",", "inc_dataset", ")", ":", "\n", "        ", "self", ".", "_old_model", "=", "self", ".", "_network", ".", "copy", "(", ")", ".", "freeze", "(", ")", ".", "to", "(", "self", ".", "_device", ")", "\n", "self", ".", "_network", ".", "on_task_end", "(", ")", "\n", "# self.plot_tsne()", "\n", "\n", "", "def", "_compute_confusion_matrix", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.icarl.ICarl._after_task": [[438, 441], ["icarl.ICarl._network.copy().freeze().to", "icarl.ICarl._network.on_task_end", "icarl.ICarl._network.copy().freeze", "icarl.ICarl._network.copy"], "methods", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.classifiers.CosineClassifier.on_task_end", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.convnet.my_resnet.CifarResNet.freeze", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.basenet.BasicNet.copy"], ["_", ",", "loader", "=", "self", ".", "inc_dataset", ".", "get_custom_loader", "(", "\n", "list", "(", "range", "(", "self", ".", "_n_classes", "-", "self", ".", "_task_size", ",", "self", ".", "_n_classes", ")", ")", ",", "\n", "memory", "=", "self", ".", "get_val_memory", "(", ")", "if", "use_validation", "else", "self", ".", "get_memory", "(", ")", ",", "\n", "mode", "=", "\"test\"", ",", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.icarl.ICarl._compute_confusion_matrix": [[443, 453], ["icarl.ICarl.inc_dataset.get_custom_loader", "icarl.ICarl._eval_task", "list", "range", "icarl.ICarl.get_val_memory", "icarl.ICarl.get_memory"], "methods", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.data.incdataset.IncrementalDataset.get_custom_loader", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.Imagine.Imagine._eval_task", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.base.IncrementalLearner.get_val_memory", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.icarl.ICarl.get_memory"], [")", "\n", "ypreds", ",", "ytrue", "=", "self", ".", "_eval_task", "(", "loader", ")", "\n", "self", ".", "_last_results", "=", "(", "ypreds", ",", "ytrue", ")", "\n", "\n", "", "def", "plot_tsne", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "folder_result", ":", "\n", "            ", "loader", "=", "self", ".", "inc_dataset", ".", "get_custom_loader", "(", "[", "]", ",", "memory", "=", "self", ".", "get_memory", "(", ")", ")", "[", "1", "]", "\n", "embeddings", ",", "targets", "=", "utils", ".", "extract_features", "(", "self", ".", "_network", ",", "loader", ")", "\n", "utils", ".", "plot_tsne", "(", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "folder_result", ",", "\"tsne_{}\"", ".", "format", "(", "self", ".", "_task", ")", ")", ",", "embeddings", ",", "targets", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.icarl.ICarl.plot_tsne": [[454, 460], ["inclearn.lib.utils.extract_features", "inclearn.lib.utils.plot_tsne", "icarl.ICarl.inc_dataset.get_custom_loader", "os.path.join", "icarl.ICarl.get_memory"], "methods", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.utils.extract_features", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.icarl.ICarl.plot_tsne", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.data.incdataset.IncrementalDataset.get_custom_loader", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.icarl.ICarl.get_memory"], ["\n", "", "", "def", "_eval_task", "(", "self", ",", "data_loader", ")", ":", "\n", "        ", "ypreds", ",", "ytrue", "=", "self", ".", "compute_accuracy", "(", "self", ".", "_network", ",", "data_loader", ",", "self", ".", "_class_means", ")", "\n", "\n", "return", "ypreds", ",", "ytrue", "\n", "\n", "# -----------", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.icarl.ICarl._eval_task": [[462, 466], ["icarl.ICarl.compute_accuracy"], "methods", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.icarl.ICarl.compute_accuracy"], ["# -----------", "\n", "\n", "", "def", "_compute_loss", "(", "self", ",", "inputs", ",", "outputs", ",", "targets", ",", "onehot_targets", ",", "memory_flags", ",", "unlabeled_new_outputs", "=", "None", ",", "\n", "pre_pass", "=", "False", ",", "fine_tune", "=", "False", ",", "train_generator_config", "=", "None", ")", ":", "\n", "        ", "logits", "=", "outputs", "[", "\"logits\"", "]", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.icarl.ICarl._compute_loss": [[471, 494], ["torch.nn.functional.binary_cross_entropy_with_logits", "onehot_targets.clone", "torch.nn.functional.binary_cross_entropy_with_logits", "inclearn.lib.losses.unsupervised_rotations", "inclearn.lib.losses.unsupervised_rotations.item", "torch.no_grad", "torch.sigmoid", "icarl.ICarl._old_model"], "methods", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.losses.unsupervised.unsupervised_rotations"], ["            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "old_targets", "=", "torch", ".", "sigmoid", "(", "self", ".", "_old_model", "(", "inputs", ")", "[", "\"logits\"", "]", ")", "\n", "\n", "", "new_targets", "=", "onehot_targets", ".", "clone", "(", ")", "\n", "new_targets", "[", "...", ",", ":", "-", "self", ".", "_task_size", "]", "=", "old_targets", "\n", "\n", "loss", "=", "F", ".", "binary_cross_entropy_with_logits", "(", "logits", ",", "new_targets", ")", "\n", "\n", "", "if", "self", ".", "_rotations_config", ":", "\n", "            ", "rotations_loss", "=", "losses", ".", "unsupervised_rotations", "(", "\n", "inputs", ",", "memory_flags", ",", "self", ".", "_network", ",", "self", ".", "_rotations_config", "\n", ")", "\n", "loss", "+=", "rotations_loss", "\n", "self", ".", "_metrics", "[", "\"rot\"", "]", "+=", "rotations_loss", ".", "item", "(", ")", "\n", "\n", "", "return", "loss", "\n", "\n", "", "@", "property", "\n", "def", "_memory_per_class", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the number of examplars per class.\"\"\"", "\n", "if", "self", ".", "_fixed_memory", ":", "\n", "            ", "return", "self", ".", "_memory_size", "//", "self", ".", "_total_n_classes", "\n", "", "return", "self", ".", "_memory_size", "//", "self", ".", "_n_classes", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.icarl.ICarl._memory_per_class": [[495, 501], ["None"], "methods", ["None"], ["# -----------------", "\n", "# Memory management", "\n", "# -----------------", "\n", "\n", "", "def", "build_examplars", "(", "\n", "self", ",", "inc_dataset", ",", "herding_indexes", ",", "memory_per_class", "=", "None", ",", "data_source", "=", "\"train\"", "\n", ")", ":", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.icarl.ICarl.build_examplars": [[506, 585], ["inclearn.utils.LOGGER.LOGGER.info", "copy.deepcopy", "numpy.zeros", "range", "numpy.concatenate", "numpy.concatenate", "inc_dataset.get_custom_loader", "inclearn.lib.utils.extract_features", "inclearn.lib.utils.extract_features", "icarl.ICarl.compute_examplar_mean", "numpy.concatenate.append", "numpy.concatenate.append", "copy.deepcopy.append", "inc_dataset.get_custom_loader", "inclearn.lib.herding.icarl_selection", "pdb.set_trace", "inclearn.lib.herding.closest_to_mean", "inclearn.lib.herding.random", "numpy.arange", "inclearn.lib.herding.kmeans", "inclearn.lib.herding.confusion", "inclearn.lib.herding.var_ratio", "inclearn.lib.herding.mcbn", "ValueError"], "methods", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.data.incdataset.IncrementalDataset.get_custom_loader", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.utils.extract_features", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.utils.extract_features", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.icarl.ICarl.compute_examplar_mean", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.data.incdataset.IncrementalDataset.get_custom_loader", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.herding.icarl_selection", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.herding.closest_to_mean", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.herding.random", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.herding.kmeans", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.herding.confusion", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.classifiers.MCCosineClassifier.var_ratio", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.herding.mcbn"], ["data_memory", ",", "targets_memory", "=", "[", "]", ",", "[", "]", "\n", "class_means", "=", "np", ".", "zeros", "(", "(", "self", ".", "_n_classes", ",", "self", ".", "_network", ".", "features_dim", ")", ")", "\n", "\n", "for", "class_idx", "in", "tqdm", "(", "range", "(", "self", ".", "_n_classes", ")", ")", ":", "\n", "# We extract the features, both normal and flipped:", "\n", "            ", "inputs", ",", "loader", "=", "inc_dataset", ".", "get_custom_loader", "(", "\n", "class_idx", ",", "mode", "=", "\"test\"", ",", "data_source", "=", "data_source", "\n", ")", "\n", "features", ",", "targets", "=", "utils", ".", "extract_features", "(", "self", ".", "_network", ",", "loader", ")", "\n", "features_flipped", ",", "_", "=", "utils", ".", "extract_features", "(", "\n", "self", ".", "_network", ",", "\n", "inc_dataset", ".", "get_custom_loader", "(", "class_idx", ",", "mode", "=", "\"flip\"", ",", "data_source", "=", "data_source", ")", "[", "1", "]", "\n", ")", "\n", "\n", "if", "class_idx", ">=", "self", ".", "_n_classes", "-", "self", ".", "_task_size", ":", "\n", "# New class, selecting the examplars:", "\n", "                ", "if", "self", ".", "_herding_selection", "[", "\"type\"", "]", "==", "\"icarl\"", ":", "\n", "                    ", "selected_indexes", "=", "herding", ".", "icarl_selection", "(", "features", ",", "memory_per_class", ")", "\n", "", "elif", "self", ".", "_herding_selection", "[", "\"type\"", "]", "==", "\"closest\"", ":", "\n", "                    ", "selected_indexes", "=", "herding", ".", "closest_to_mean", "(", "features", ",", "memory_per_class", ")", "\n", "", "elif", "self", ".", "_herding_selection", "[", "\"type\"", "]", "==", "\"random\"", ":", "\n", "                    ", "selected_indexes", "=", "herding", ".", "random", "(", "features", ",", "memory_per_class", ")", "\n", "", "elif", "self", ".", "_herding_selection", "[", "\"type\"", "]", "==", "\"first\"", ":", "\n", "                    ", "selected_indexes", "=", "np", ".", "arange", "(", "memory_per_class", ")", "\n", "", "elif", "self", ".", "_herding_selection", "[", "\"type\"", "]", "==", "\"kmeans\"", ":", "\n", "                    ", "selected_indexes", "=", "herding", ".", "kmeans", "(", "\n", "features", ",", "memory_per_class", ",", "k", "=", "self", ".", "_herding_selection", "[", "\"k\"", "]", "\n", ")", "\n", "", "elif", "self", ".", "_herding_selection", "[", "\"type\"", "]", "==", "\"confusion\"", ":", "\n", "                    ", "selected_indexes", "=", "herding", ".", "confusion", "(", "\n", "*", "self", ".", "_last_results", ",", "\n", "memory_per_class", ",", "\n", "class_id", "=", "class_idx", ",", "\n", "minimize_confusion", "=", "self", ".", "_herding_selection", "[", "\"minimize_confusion\"", "]", "\n", ")", "\n", "", "elif", "self", ".", "_herding_selection", "[", "\"type\"", "]", "==", "\"var_ratio\"", ":", "\n", "                    ", "selected_indexes", "=", "herding", ".", "var_ratio", "(", "\n", "memory_per_class", ",", "self", ".", "_network", ",", "loader", ",", "**", "self", ".", "_herding_selection", "\n", ")", "\n", "", "elif", "self", ".", "_herding_selection", "[", "\"type\"", "]", "==", "\"mcbn\"", ":", "\n", "                    ", "selected_indexes", "=", "herding", ".", "mcbn", "(", "\n", "memory_per_class", ",", "self", ".", "_network", ",", "loader", ",", "**", "self", ".", "_herding_selection", "\n", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "ValueError", "(", "\n", "\"Unknown herding selection {}.\"", ".", "format", "(", "self", ".", "_herding_selection", ")", "\n", ")", "\n", "\n", "", "herding_indexes", "[", "class_idx", "]", "=", "selected_indexes", "\n", "\n", "# Reducing examplars:", "\n", "", "try", ":", "\n", "                ", "selected_indexes", "=", "herding_indexes", "[", "class_idx", "]", "[", ":", "memory_per_class", "]", "\n", "herding_indexes", "[", "class_idx", "]", "=", "selected_indexes", "\n", "", "except", ":", "\n", "                ", "import", "pdb", "\n", "pdb", ".", "set_trace", "(", ")", "\n", "\n", "# Re-computing the examplar mean (which may have changed due to the training):", "\n", "", "try", ":", "\n", "                ", "examplar_mean", "=", "self", ".", "compute_examplar_mean", "(", "\n", "features", ",", "features_flipped", ",", "selected_indexes", ",", "memory_per_class", "\n", ")", "\n", "", "except", ":", "\n", "                ", "import", "pdb", "\n", "pdb", ".", "set_trace", "(", ")", "\n", "\n", "", "data_memory", ".", "append", "(", "inputs", "[", "selected_indexes", "]", ")", "\n", "targets_memory", ".", "append", "(", "targets", "[", "selected_indexes", "]", ")", "\n", "\n", "class_means", "[", "class_idx", ",", ":", "]", "=", "examplar_mean", "\n", "\n", "", "data_memory", "=", "np", ".", "concatenate", "(", "data_memory", ")", "\n", "targets_memory", "=", "np", ".", "concatenate", "(", "targets_memory", ")", "\n", "\n", "return", "data_memory", ",", "targets_memory", ",", "herding_indexes", ",", "class_means", "\n", "\n", "", "def", "get_memory", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_data_memory", ",", "self", ".", "_targets_memory", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.icarl.ICarl.get_memory": [[586, 588], ["None"], "methods", ["None"], ["", "def", "get_pseudo_memory", "(", "self", ",", "aux_loader", ",", "threshold", "=", "10000", ",", "classes_balance", "=", "True", ",", "n_classes_samples", "=", "100", ",", "\n", "existing_cls", "=", "None", ")", ":", "\n", "# data-mining from \"Seed the Views: Hierarchical Semantic Alignment for Contrastive Representation Learning\"", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.icarl.ICarl.get_pseudo_memory": [[589, 661], ["tqdm.tqdm.tqdm", "icarl.ICarl._args.get", "icarl.ICarl._network.eval", "icarl.ICarl._network.train", "torch.empty().to.cpu", "torch.log2().unsqueeze", "torch.no_grad", "enumerate", "torch.empty().to.unsqueeze().bmm().squeeze", "selected_index.sum", "all_pred[].max", "torch.tensor", "numpy.array", "torch.unique", "inclearn.utils.LOGGER.LOGGER.info", "inclearn.utils.LOGGER.LOGGER.info", "inputs[].to", "icarl.ICarl._network", "torch.nn.functional.softmax", "torch.log2", "numpy.array", "torch.tensor", "list", "min", "torch.sort", "torch.cat", "len", "torch.empty().to", "torch.empty().to.unsqueeze().bmm", "numpy.expand_dims", "len", "numpy.concatenate", "len", "set", "set", "len", "torch.empty", "torch.empty().to.unsqueeze", "list.tolist", "torch.unique().tolist", "torch.unique"], "methods", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.get", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.base.IncrementalLearner.eval", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.base.IncrementalLearner.train"], ["# see: https://arxiv.org/abs/2012.02733", "\n", "\n", "# 1) \"Using the fine-tuned model to infer on all unlabeled samples, and obtaining a confidence distribution for", "\n", "# each image.\"", "\n", "        ", "pbar", "=", "tqdm", "(", "aux_loader", ")", "\n", "all_pred", "=", "None", "\n", "global_scale", "=", "self", ".", "_args", ".", "get", "(", "\"softmax_ce_scale\"", ",", "1", ")", "\n", "# all_input = torch.tensor([])", "\n", "self", ".", "_network", ".", "eval", "(", ")", "\n", "last", "=", "0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "idx", ",", "inputs", "in", "enumerate", "(", "pbar", ")", ":", "\n", "                ", "image", "=", "inputs", "[", "'inputs'", "]", ".", "to", "(", "self", ".", "_device", ")", "\n", "# labels = inputs['labels']", "\n", "output", "=", "self", ".", "_network", "(", "image", ")", "\n", "logits", "=", "output", "[", "'logits'", "]", "*", "global_scale", "\n", "# To get `distribution`, we apply softmax calculation here.", "\n", "distribution", "=", "F", ".", "softmax", "(", "logits", ",", "dim", "=", "1", ")", "\n", "if", "all_pred", "is", "None", ":", "\n", "                    ", "target_size", "=", "[", "len", "(", "aux_loader", ".", "dataset", ")", ",", "distribution", ".", "shape", "[", "1", "]", "]", "\n", "all_pred", "=", "torch", ".", "empty", "(", "*", "target_size", ")", ".", "to", "(", "self", ".", "_device", ")", "\n", "# all_pred = torch.cat((all_pred, distribution), dim=0)", "\n", "", "all_pred", "[", "last", ":", "last", "+", "distribution", ".", "shape", "[", "0", "]", ",", ":", "]", "=", "distribution", "\n", "last", "+=", "distribution", ".", "shape", "[", "0", "]", "\n", "# all_input = torch.cat((all_input, image.cpu()), dim=0)", "\n", "", "", "self", ".", "_network", ".", "train", "(", ")", "\n", "# 2) \"The information entropy is calculated to measure the confidence degree of each image, and we filter those", "\n", "# samples with entropy higher than a threshold.\"", "\n", "all_pred", "=", "all_pred", ".", "cpu", "(", ")", "\n", "log_pred", "=", "torch", ".", "log2", "(", "all_pred", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "information_entropy", "=", "-", "all_pred", ".", "unsqueeze", "(", "1", ")", ".", "bmm", "(", "log_pred", ")", ".", "squeeze", "(", ")", "\n", "selected_index", "=", "information_entropy", "<", "threshold", "\n", "if", "not", "selected_index", ".", "sum", "(", ")", ":", "\n", "            ", "del", "all_pred", "\n", "return", "np", ".", "array", "(", "[", "]", ")", ",", "torch", ".", "tensor", "(", "[", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "", "target_pseudo_memory", "=", "all_pred", "[", "selected_index", "]", ".", "max", "(", "1", ")", "[", "1", "]", "\n", "data_pseudo_memory", "=", "aux_loader", ".", "dataset", ".", "x", "[", "selected_index", "]", "\n", "if", "classes_balance", ":", "\n", "            ", "valid_target", "=", "torch", ".", "tensor", "(", "[", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "valid_data", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "candidates_cls", "=", "torch", ".", "unique", "(", "target_pseudo_memory", ")", "\n", "class_num", "=", "{", "}", "\n", "if", "existing_cls", "is", "not", "None", ":", "\n", "                ", "candidates_cls", "=", "list", "(", "set", "(", "candidates_cls", ".", "tolist", "(", ")", ")", "-", "set", "(", "torch", ".", "unique", "(", "existing_cls", ")", ".", "tolist", "(", ")", ")", ")", "\n", "", "for", "cls", "in", "candidates_cls", ":", "\n", "                ", "cls_mask", "=", "target_pseudo_memory", "==", "cls", "\n", "cls_target", "=", "target_pseudo_memory", "[", "cls_mask", "]", "\n", "cls_data", "=", "data_pseudo_memory", "[", "cls_mask", "]", "\n", "cls_n_classes_samples", "=", "min", "(", "cls_target", ".", "shape", "[", "0", "]", ",", "n_classes_samples", ")", "\n", "cls_InfoEntropy", "=", "information_entropy", "[", "selected_index", "]", "[", "cls_mask", "]", "\n", "_", ",", "sorted_idx", "=", "torch", ".", "sort", "(", "cls_InfoEntropy", ")", "\n", "valid_target", "=", "torch", ".", "cat", "(", "(", "valid_target", ",", "cls_target", "[", "sorted_idx", "[", ":", "cls_n_classes_samples", "]", "]", ")", ",", "dim", "=", "0", ")", "\n", "cls_valid_data", "=", "cls_data", "[", "sorted_idx", "[", ":", "cls_n_classes_samples", "]", "]", "\n", "\n", "if", "cls_n_classes_samples", "==", "1", ":", "# fixme: dummy dimensions", "\n", "                    ", "cls_valid_data", "=", "np", ".", "expand_dims", "(", "cls_valid_data", ",", "axis", "=", "0", ")", "\n", "\n", "", "if", "not", "len", "(", "valid_data", ")", ":", "\n", "                    ", "valid_data", "=", "cls_valid_data", "\n", "", "else", ":", "\n", "                    ", "valid_data", "=", "np", ".", "concatenate", "(", "(", "valid_data", ",", "cls_valid_data", ")", ")", "\n", "", "class_num", "[", "cls", "]", "=", "len", "(", "cls_valid_data", ")", "\n", "", "logger", ".", "LOGGER", ".", "info", "(", "f'mined unlabeled data: {class_num}'", ")", "\n", "del", "all_pred", "\n", "return", "valid_data", ",", "valid_target", "\n", "", "else", ":", "\n", "            ", "logger", ".", "LOGGER", ".", "info", "(", "f'mined unlabeled data: {len(data_pseudo_memory)}'", ")", "\n", "del", "all_pred", "\n", "return", "data_pseudo_memory", ",", "target_pseudo_memory", "\n", "\n", "", "", "@", "staticmethod", "\n", "def", "compute_examplar_mean", "(", "feat_norm", ",", "feat_flip", ",", "indexes", ",", "nb_max", ")", ":", "\n", "        ", "D", "=", "feat_norm", ".", "T", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.icarl.ICarl.compute_examplar_mean": [[662, 677], ["numpy.linalg.norm", "numpy.linalg.norm", "numpy.linalg.norm", "numpy.mean", "numpy.mean"], "methods", ["None"], ["D", "=", "D", "/", "(", "np", ".", "linalg", ".", "norm", "(", "D", ",", "axis", "=", "0", ")", "+", "EPSILON", ")", "\n", "\n", "D2", "=", "feat_flip", ".", "T", "\n", "D2", "=", "D2", "/", "(", "np", ".", "linalg", ".", "norm", "(", "D2", ",", "axis", "=", "0", ")", "+", "EPSILON", ")", "\n", "\n", "selected_d", "=", "D", "[", "...", ",", "indexes", "]", "\n", "selected_d2", "=", "D2", "[", "...", ",", "indexes", "]", "\n", "\n", "mean", "=", "(", "np", ".", "mean", "(", "selected_d", ",", "axis", "=", "1", ")", "+", "np", ".", "mean", "(", "selected_d2", ",", "axis", "=", "1", ")", ")", "/", "2", "\n", "mean", "/=", "(", "np", ".", "linalg", ".", "norm", "(", "mean", ")", "+", "EPSILON", ")", "\n", "\n", "return", "mean", "\n", "\n", "", "@", "staticmethod", "\n", "def", "compute_accuracy", "(", "model", ",", "loader", ",", "class_means", ")", ":", "\n", "        ", "features", ",", "targets_", "=", "utils", ".", "extract_features", "(", "model", ",", "loader", ")", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.icarl.ICarl.compute_accuracy": [[678, 689], ["inclearn.lib.utils.extract_features", "scipy.spatial.distance.cdist", "numpy.linalg.norm"], "methods", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.utils.extract_features"], ["\n", "features", "=", "(", "features", ".", "T", "/", "(", "np", ".", "linalg", ".", "norm", "(", "features", ".", "T", ",", "axis", "=", "0", ")", "+", "EPSILON", ")", ")", ".", "T", "\n", "\n", "# Compute score for iCaRL", "\n", "sqd", "=", "cdist", "(", "class_means", ",", "features", ",", "'sqeuclidean'", ")", "\n", "score_icarl", "=", "(", "-", "sqd", ")", ".", "T", "\n", "\n", "return", "score_icarl", ",", "targets_", "\n", "\n", "", "def", "create_generator_optimizer", "(", "self", ",", "cls", ",", "params", ",", "lr", ",", "task_id", ")", ":", "\n", "        ", "self", ".", "_generator_optimizer", "[", "cls", "]", "=", "factory", ".", "get_optimizer", "(", "params", ",", "self", ".", "_opt_name", ",", "lr", ",", "self", ".", "_weight_decay", ")", "\n", "scheduling", "=", "self", ".", "_generator_scheduling", "if", "task_id", ">", "0", "else", "self", ".", "_pretrain_generator_scheduling", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.icarl.ICarl.create_generator_optimizer": [[690, 703], ["inclearn.lib.factory.get_optimizer", "inclearn.lib.factory.get_lr_scheduler", "icarl.ICarl.add_params_to_generator_optimizer"], "methods", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.factory.get_optimizer", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.factory.get_lr_scheduler", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.icarl.ICarl.add_params_to_generator_optimizer"], ["logger", ".", "LOGGER", ".", "info", "(", "f'generator_scheduling:{scheduling}'", ")", "\n", "self", ".", "_generator_scheduler", "[", "cls", "]", "=", "factory", ".", "get_lr_scheduler", "(", "\n", "scheduling", ",", "\n", "self", ".", "_generator_optimizer", "[", "cls", "]", ",", "\n", "nb_epochs", "=", "self", ".", "_n_epochs_generator", ",", "\n", "lr_decay", "=", "self", ".", "_generator_lr_decay", ",", "\n", "task", "=", "self", ".", "_task", "\n", ")", "\n", "\n", "", "def", "add_params_to_generator_optimizer", "(", "self", ",", "params", ",", "lr", ")", ":", "\n", "        ", "self", ".", "_generator_optimizer", ".", "add_param_group", "(", "{", "'params'", ":", "params", ",", "'lr'", ":", "lr", "}", ")", "\n", "\n", "", "@", "property", "\n", "def", "return_network_params_stage4", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.icarl.ICarl.add_params_to_generator_optimizer": [[704, 706], ["icarl.ICarl._generator_optimizer.add_param_group"], "methods", ["None"], ["        ", "return", "self", ".", "_network", ".", "convnet", ".", "stage_4", ".", "parameters", "(", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.icarl.ICarl.return_network_params_stage4": [[707, 710], ["icarl.ICarl._network.convnet.stage_4.parameters"], "methods", ["None"], ["", "", "def", "_clean_list", "(", "l", ")", ":", "\n", "    ", "for", "i", "in", "range", "(", "len", "(", "l", ")", ")", ":", "\n", "        ", "l", "[", "i", "]", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.icarl._clean_list": [[712, 715], ["range", "len"], "function", ["None"], ["", "", "def", "tensor_inv", "(", "a", ":", "torch", ".", "Tensor", ",", "maximum", ":", "int", ")", ":", "\n", "    ", "all_possible_idx", "=", "torch", ".", "arange", "(", "0", ",", "maximum", ")", "\n", "res", "=", "torch", ".", "tensor", "(", "list", "(", "set", "(", "all_possible_idx", ".", "tolist", "(", ")", ")", "-", "set", "(", "a", ".", "tolist", "(", ")", ")", ")", ")", "\n", "return", "res", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.icarl.tensor_inv": [[717, 721], ["torch.arange", "torch.tensor", "list", "set", "set", "torch.arange.tolist", "a.tolist"], "function", ["None"], []], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.Imagine.Imagine.__init__": [[26, 123], ["args.get", "args.get", "args.get", "args.get", "args.get", "args.get", "args.get", "args.get", "args.get", "args.get", "args.get", "args.get", "args.get", "args.get", "args.get", "inclearn.lib.network.BasicNet", "args.get", "args.get", "args.get", "args.get", "Imagine.Imagine._generator_config.get", "Imagine.Imagine._train_generator_config.get", "Imagine.Imagine._train_generator_config.get", "Imagine.Imagine._train_generator_config.get", "Imagine.Imagine._train_generator_config.get", "Imagine.Imagine._generator_config.get", "args.get", "Imagine.Imagine._generator_config.get", "args.get", "inclearn.lib.losses.SoftCrossEntropy", "args.get", "args.get", "args.get"], "methods", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.get", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.get", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.get", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.get", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.get", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.get", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.get", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.get", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.get", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.get", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.get", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.get", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.get", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.get", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.get", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.get", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.get", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.get", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.get", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.get", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.get", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.get", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.get", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.get", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.get", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.get", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.get", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.get", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.get", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.get", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.get"], ["\n", "\n", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "frozen_model", "=", "None", "\n", "self", ".", "_disable_progressbar", "=", "args", ".", "get", "(", "\"no_progressbar\"", ",", "False", ")", "\n", "\n", "self", ".", "_device", "=", "args", "[", "\"device\"", "]", "[", "0", "]", "\n", "self", ".", "_multiple_devices", "=", "args", "[", "\"device\"", "]", "\n", "\n", "# Optimization:", "\n", "self", ".", "_batch_size", "=", "args", "[", "\"batch_size\"", "]", "\n", "self", ".", "_opt_name", "=", "args", "[", "\"optimizer\"", "]", "\n", "self", ".", "_lr", "=", "args", "[", "\"lr\"", "]", "\n", "self", ".", "_weight_decay", "=", "args", "[", "\"weight_decay\"", "]", "\n", "self", ".", "_n_epochs", "=", "args", "[", "\"epochs\"", "]", "\n", "self", ".", "_scheduling", "=", "args", "[", "\"scheduling\"", "]", "\n", "self", ".", "_lr_decay", "=", "args", "[", "\"lr_decay\"", "]", "\n", "\n", "# Rehearsal Learning:", "\n", "self", ".", "_memory_size", "=", "args", "[", "\"memory_size\"", "]", "\n", "self", ".", "_fixed_memory", "=", "args", ".", "get", "(", "\"fixed_memory\"", ",", "True", ")", "\n", "self", ".", "_herding_selection", "=", "args", ".", "get", "(", "\"herding_selection\"", ",", "{", "\"type\"", ":", "\"icarl\"", "}", ")", "\n", "self", ".", "_n_classes", "=", "0", "\n", "self", ".", "_last_results", "=", "None", "\n", "self", ".", "_validation_percent", "=", "args", ".", "get", "(", "\"validation\"", ")", "\n", "\n", "self", ".", "_feature_distill_config", "=", "args", ".", "get", "(", "\"distill_feat\"", ",", "{", "}", ")", "\n", "\n", "self", ".", "_nca_config", "=", "args", ".", "get", "(", "\"nca\"", ",", "{", "}", ")", "\n", "self", ".", "_softmax_ce", "=", "args", ".", "get", "(", "\"softmax_ce\"", ",", "False", ")", "\n", "\n", "self", ".", "_groupwise_factors", "=", "args", ".", "get", "(", "\"groupwise_factors\"", ",", "{", "}", ")", "\n", "self", ".", "_groupwise_factors_bis", "=", "args", ".", "get", "(", "\"groupwise_factors_bis\"", ",", "{", "}", ")", "\n", "\n", "self", ".", "_class_weights_config", "=", "args", ".", "get", "(", "\"class_weights_config\"", ",", "{", "}", ")", "\n", "\n", "self", ".", "_evaluation_type", "=", "args", ".", "get", "(", "\"eval_type\"", ",", "\"icarl\"", ")", "\n", "self", ".", "_evaluation_config", "=", "args", ".", "get", "(", "\"evaluation_config\"", ",", "{", "}", ")", "\n", "\n", "classifier_kwargs", "=", "args", ".", "get", "(", "\"classifier_config\"", ",", "{", "}", ")", "\n", "self", ".", "_class_means", "=", "None", "\n", "self", ".", "_network", "=", "network", ".", "BasicNet", "(", "\n", "args", "[", "\"convnet\"", "]", ",", "\n", "convnet_kwargs", "=", "args", ".", "get", "(", "\"convnet_config\"", ",", "{", "}", ")", ",", "\n", "classifier_kwargs", "=", "classifier_kwargs", ",", "\n", "postprocessor_kwargs", "=", "args", ".", "get", "(", "\"postprocessor_config\"", ",", "{", "}", ")", ",", "\n", "device", "=", "self", ".", "_device", ",", "\n", "return_features", "=", "True", ",", "\n", "extract_no_act", "=", "True", ",", "\n", "classifier_no_act", "=", "args", ".", "get", "(", "\"classifier_no_act\"", ",", "True", ")", ",", "\n", "attention_hook", "=", "True", ",", "\n", ")", "\n", "\n", "self", ".", "_examplars", "=", "{", "}", "\n", "self", ".", "_means", "=", "None", "\n", "\n", "self", ".", "_old_model", "=", "None", "\n", "\n", "self", ".", "_finetuning_config", "=", "args", ".", "get", "(", "\"finetuning_config\"", ")", "\n", "\n", "self", ".", "_herding_indexes", "=", "{", "}", "\n", "\n", "self", ".", "_weight_generation", "=", "args", ".", "get", "(", "\"weight_generation\"", ")", "\n", "\n", "self", ".", "_post_processing_type", "=", "None", "\n", "self", ".", "_data_memory", ",", "self", ".", "_targets_memory", "=", "None", ",", "None", "\n", "\n", "self", ".", "_args", "=", "args", "\n", "self", ".", "_args", "[", "\"_logs\"", "]", "=", "{", "}", "\n", "\n", "self", ".", "pretrain_config", "=", "args", ".", "get", "(", "\"pretrain\"", ",", "{", "}", ")", "\n", "self", ".", "_pretrain_scheduling", "=", "self", ".", "pretrain_config", "[", "\"scheduling\"", "]", "\n", "self", ".", "_pretrain_batch_size", "=", "self", ".", "pretrain_config", "[", "\"batch_size\"", "]", "\n", "self", ".", "_pretrain_opt_name", "=", "self", ".", "pretrain_config", "[", "\"optimizer\"", "]", "\n", "self", ".", "_pretrain_lr", "=", "self", ".", "pretrain_config", "[", "\"lr\"", "]", "\n", "self", ".", "_pretrain_weight_decay", "=", "self", ".", "pretrain_config", "[", "\"weight_decay\"", "]", "\n", "self", ".", "_pretrain_n_epochs", "=", "self", ".", "pretrain_config", "[", "\"epochs\"", "]", "\n", "self", ".", "_pretrain_lr_decay", "=", "self", ".", "pretrain_config", "[", "\"lr_decay\"", "]", "\n", "self", ".", "_generator_config", "=", "args", ".", "get", "(", "\"generator_config\"", ",", "{", "}", ")", "\n", "\n", "self", ".", "_generator_pretrain_config", "=", "self", ".", "_generator_config", ".", "get", "(", "\"pretrain_config\"", ",", "{", "}", ")", "\n", "self", ".", "_n_epochs_pretrain_generator", "=", "self", ".", "_generator_pretrain_config", ".", "get", "(", "\"epoch\"", ",", "40", ")", "\n", "self", ".", "_pretrain_generator_scheduling", "=", "self", ".", "_generator_pretrain_config", ".", "get", "(", "'scheduling'", ")", "\n", "\n", "self", ".", "_train_generator_config", "=", "self", ".", "_generator_config", ".", "get", "(", "\"train_config\"", ",", "{", "}", ")", "\n", "self", ".", "_train_generator_label_batchsize", "=", "self", ".", "_train_generator_config", ".", "get", "(", "\"train_generator_label_batchsize\"", ",", "128", ")", "\n", "self", ".", "_generator_scheduling", "=", "self", ".", "_generator_config", ".", "get", "(", "'scheduling'", ")", "\n", "self", ".", "_generator_lr_decay", "=", "self", ".", "_generator_config", ".", "get", "(", "'lr_decay'", ")", "\n", "self", ".", "_generator_pod_spatial_config", "=", "self", ".", "_generator_config", ".", "get", "(", "\"generator_pod_spatial_config\"", ",", "{", "}", ")", "\n", "self", ".", "_generator_optimizer", "=", "{", "}", "\n", "self", ".", "_generator_scheduler", "=", "{", "}", "\n", "self", ".", "_n_epochs_generator", "=", "self", ".", "_generator_config", ".", "get", "(", "\"epoch\"", ",", "40", ")", "\n", "self", ".", "_generator_cos_margin", "=", "self", ".", "_generator_config", ".", "get", "(", "\"cos_margin\"", ",", "0.8", ")", "\n", "self", ".", "_use_same_class", "=", "args", ".", "get", "(", "\"use_same_classes\"", ",", "True", ")", "\n", "self", ".", "_generator_use_same_class", "=", "self", ".", "_generator_config", ".", "get", "(", "\"use_same_classes\"", ",", "True", ")", "\n", "self", ".", "_lr_layers", "=", "args", ".", "get", "(", "\"lr_layers\"", ",", "{", "}", ")", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.Imagine.Imagine.set_freeze_by_names": [[124, 126], ["Imagine.Imagine._network.convnet.set_freeze_by_names"], "methods", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.convnet.my_resnet.CifarResNet.set_freeze_by_names"], ["if", "self", ".", "_generator_config", ":", "\n", "            ", "latent_dim", "=", "self", ".", "_generator_config", ".", "get", "(", "\"latent_dim\"", ",", "64", ")", "\n", "output_dim", "=", "self", ".", "_generator_config", ".", "get", "(", "\"output_dim\"", ",", "64", ")", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.Imagine.Imagine.device": [[127, 130], ["None"], "methods", ["None"], ["self", ".", "class_encoders", "=", "{", "}", "\n", "self", ".", "training_encoders", "=", "{", "}", "\n", "self", ".", "universal_decoder", "=", "network", ".", "FeatureGenerator", "(", "2", "*", "latent_dim", ",", "output_dim", ")", ".", "to", "(", "self", ".", "_device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.Imagine.Imagine._memory_per_class": [[131, 137], ["None"], "methods", ["None"], ["", "self", ".", "soft_cross_entropy", "=", "losses", ".", "SoftCrossEntropy", "(", "reduction", "=", "'sum'", ")", "\n", "self", ".", "_diff_cls_mapping", "=", "{", "}", "\n", "self", ".", "soft_entropy", "=", "SoftEntropy", "(", ")", "\n", "self", ".", "rkd_dist", "=", "RkdDistance", "(", ")", "\n", "self", ".", "_use_unlabeled", "=", "args", ".", "get", "(", "\"use_unlabeled\"", ",", "False", ")", "\n", "\n", "", "def", "set_freeze_by_names", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.Imagine.Imagine._train_task": [[138, 170], ["Imagine.Imagine._network.parameters", "inclearn.utils.LOGGER.LOGGER.debug", "Imagine.Imagine._training_step", "Imagine.Imagine._network.freeze", "Imagine.Imagine._network.freeze", "p.register_hook", "len", "Imagine.Imagine.class_encoders[].freeze", "Imagine.Imagine.class_encoders[].train", "Imagine.Imagine.class_encoders[].freeze", "Imagine.Imagine.class_encoders[].eval", "torch.clamp"], "methods", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.icarl.ICarl._training_step", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.convnet.my_resnet.CifarResNet.freeze", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.convnet.my_resnet.CifarResNet.freeze", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.convnet.my_resnet.CifarResNet.freeze", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.base.IncrementalLearner.train", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.convnet.my_resnet.CifarResNet.freeze", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.base.IncrementalLearner.eval"], ["        ", "self", ".", "_network", ".", "convnet", ".", "set_freeze_by_names", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "", "@", "property", "\n", "def", "device", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_device", "\n", "\n", "", "@", "property", "\n", "def", "_memory_per_class", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the number of examplars per class.\"\"\"", "\n", "if", "self", ".", "_fixed_memory", ":", "\n", "            ", "return", "self", ".", "_memory_size", "//", "self", ".", "_total_n_classes", "\n", "", "return", "self", ".", "_memory_size", "//", "self", ".", "_n_classes", "\n", "\n", "", "def", "_train_task", "(", "self", ",", "train_loader", ",", "pseudo_memory_loader", ",", "val_loader", ",", "train_generator_config", "=", "None", ",", "\n", "train_generator_data", "=", "None", ",", "freeze_layers", "=", "False", ")", ":", "\n", "        ", "for", "p", "in", "self", ".", "_network", ".", "parameters", "(", ")", ":", "\n", "            ", "if", "p", ".", "requires_grad", ":", "\n", "                ", "p", ".", "register_hook", "(", "lambda", "grad", ":", "torch", ".", "clamp", "(", "grad", ",", "-", "5.", ",", "5.", ")", ")", "\n", "\n", "", "", "logger", ".", "LOGGER", ".", "debug", "(", "\"nb {}.\"", ".", "format", "(", "len", "(", "train_loader", ".", "dataset", ")", ")", ")", "\n", "\n", "if", "train_generator_config", "is", "not", "None", ":", "\n", "            ", "if", "self", ".", "_task", "==", "0", ":", "\n", "                ", "training_epochs", "=", "self", ".", "_n_epochs_pretrain_generator", "\n", "", "else", ":", "\n", "                ", "training_epochs", "=", "self", ".", "_n_epochs_generator", "\n", "", "", "elif", "self", ".", "_task", "==", "0", ":", "\n", "            ", "training_epochs", "=", "self", ".", "_pretrain_n_epochs", "\n", "", "else", ":", "\n", "            ", "training_epochs", "=", "self", ".", "_n_epochs", "\n", "\n", "", "if", "train_generator_config", "is", "not", "None", ":", "\n", "            ", "self", ".", "_network", ".", "freeze", "(", ")", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.Imagine.Imagine.fine_tune": [[171, 222], ["Imagine.Imagine._network.train", "inclearn.utils.LOGGER.LOGGER.info", "inclearn.lib.factory.get_optimizer", "Imagine.Imagine._training_step", "inclearn.utils.LOGGER.LOGGER.info", "Imagine.Imagine.build_examplars", "Imagine.Imagine.inc_dataset.get_memory_loader", "Imagine.Imagine._network.parameters", "Imagine.Imagine.class_encoders[].freeze", "Imagine.Imagine.class_encoders[].eval", "Imagine.Imagine.inc_dataset.get_custom_loader", "Imagine.Imagine._network.convnet.parameters", "Imagine.Imagine.get_memory", "list", "Imagine.Imagine._network.classifier.parameters", "range", "Imagine.Imagine.get_memory", "NotImplementedError", "Imagine.Imagine._network.classifier.parameters", "Imagine.Imagine._network.post_processor.parameters"], "methods", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.base.IncrementalLearner.train", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.factory.get_optimizer", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.icarl.ICarl._training_step", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.icarl.ICarl.build_examplars", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.data.incdataset.IncrementalDataset.get_memory_loader", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.convnet.my_resnet.CifarResNet.freeze", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.base.IncrementalLearner.eval", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.data.incdataset.IncrementalDataset.get_custom_loader", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.icarl.ICarl.get_memory", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.icarl.ICarl.get_memory"], ["for", "e", "in", "self", ".", "class_encoders", ":", "\n", "                ", "self", ".", "class_encoders", "[", "e", "]", ".", "freeze", "(", "trainable", "=", "True", ")", "\n", "self", ".", "class_encoders", "[", "e", "]", ".", "train", "(", ")", "\n", "", "self", ".", "universal_decoder", ".", "train", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_network", ".", "freeze", "(", "trainable", "=", "True", ")", "\n", "if", "self", ".", "_generator_config", ":", "\n", "                ", "for", "e", "in", "self", ".", "class_encoders", ":", "\n", "                    ", "self", ".", "class_encoders", "[", "e", "]", ".", "freeze", "(", ")", "\n", "self", ".", "class_encoders", "[", "e", "]", ".", "eval", "(", ")", "\n", "", "self", ".", "universal_decoder", ".", "freeze", "(", ")", "\n", "self", ".", "universal_decoder", ".", "eval", "(", ")", "\n", "\n", "", "", "self", ".", "_training_step", "(", "train_loader", ",", "pseudo_memory_loader", ",", "val_loader", ",", "0", ",", "training_epochs", ",", "record_bn", "=", "True", ",", "\n", "train_generator_config", "=", "train_generator_config", ",", "train_generator_data", "=", "train_generator_data", ")", "\n", "\n", "self", ".", "_post_processing_type", "=", "None", "\n", "\n", "# if self._finetuning_config and self._task != 0:", "\n", "#     self.fine_tune(pseudo_memory_loader, pseudo_memory_valid_map_idx, val_loader)", "\n", "\n", "", "def", "fine_tune", "(", "self", ",", "pseudo_memory_loader", ",", "pseudo_memory_valid_map_idx", ",", "val_loader", ")", ":", "\n", "        ", "self", ".", "_network", ".", "train", "(", ")", "\n", "# self._network.freeze(trainable=True)", "\n", "if", "self", ".", "_generator_config", ":", "\n", "            ", "for", "e", "in", "self", ".", "class_encoders", ":", "\n", "                ", "self", ".", "class_encoders", "[", "e", "]", ".", "freeze", "(", ")", "\n", "self", ".", "class_encoders", "[", "e", "]", ".", "eval", "(", ")", "\n", "", "self", ".", "universal_decoder", ".", "freeze", "(", ")", "\n", "self", ".", "universal_decoder", ".", "eval", "(", ")", "\n", "", "logger", ".", "LOGGER", ".", "info", "(", "\"Fine-tuning\"", ")", "\n", "if", "self", ".", "_finetuning_config", "[", "\"scaling\"", "]", ":", "\n", "            ", "logger", ".", "LOGGER", ".", "info", "(", "\n", "\"Custom fine-tuning scaling of {}.\"", ".", "format", "(", "self", ".", "_finetuning_config", "[", "\"scaling\"", "]", ")", "\n", ")", "\n", "self", ".", "_post_processing_type", "=", "self", ".", "_finetuning_config", "[", "\"scaling\"", "]", "\n", "", "if", "self", ".", "_finetuning_config", "[", "\"sampling\"", "]", "==", "\"undersampling\"", ":", "\n", "            ", "self", ".", "_data_memory", ",", "self", ".", "_targets_memory", ",", "_", ",", "_", "=", "self", ".", "build_examplars", "(", "\n", "self", ".", "inc_dataset", ",", "self", ".", "_herding_indexes", "\n", ")", "\n", "loader", "=", "self", ".", "inc_dataset", ".", "get_memory_loader", "(", "*", "self", ".", "get_memory", "(", ")", ")", "\n", "", "elif", "self", ".", "_finetuning_config", "[", "\"sampling\"", "]", "==", "\"oversampling\"", ":", "\n", "            ", "_", ",", "loader", "=", "self", ".", "inc_dataset", ".", "get_custom_loader", "(", "\n", "list", "(", "range", "(", "self", ".", "_n_classes", "-", "self", ".", "_task_size", ",", "self", ".", "_n_classes", ")", ")", ",", "\n", "memory", "=", "self", ".", "get_memory", "(", ")", ",", "\n", "mode", "=", "\"train\"", ",", "\n", "sampler", "=", "samplers", ".", "MemoryOverSampler", "\n", ")", "\n", "", "if", "self", ".", "_finetuning_config", "[", "\"tuning\"", "]", "==", "\"all\"", ":", "\n", "            ", "parameters", "=", "self", ".", "_network", ".", "parameters", "(", ")", "\n", "", "elif", "self", ".", "_finetuning_config", "[", "\"tuning\"", "]", "==", "\"convnet\"", ":", "\n", "            ", "parameters", "=", "self", ".", "_network", ".", "convnet", ".", "parameters", "(", ")", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.Imagine.Imagine.weight_decay": [[223, 236], ["isinstance", "TypeError", "isinstance", "type", "max", "min"], "methods", ["None"], ["", "elif", "self", ".", "_finetuning_config", "[", "\"tuning\"", "]", "==", "\"classifier\"", ":", "\n", "            ", "parameters", "=", "self", ".", "_network", ".", "classifier", ".", "parameters", "(", ")", "\n", "", "elif", "self", ".", "_finetuning_config", "[", "\"tuning\"", "]", "==", "\"classifier_scale\"", ":", "\n", "            ", "parameters", "=", "[", "\n", "{", "\n", "\"params\"", ":", "self", ".", "_network", ".", "classifier", ".", "parameters", "(", ")", ",", "\n", "\"lr\"", ":", "self", ".", "_finetuning_config", "[", "\"lr\"", "]", "\n", "}", ",", "{", "\n", "\"params\"", ":", "self", ".", "_network", ".", "post_processor", ".", "parameters", "(", ")", ",", "\n", "\"lr\"", ":", "self", ".", "_finetuning_config", "[", "\"lr\"", "]", "\n", "}", "\n", "]", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.Imagine.Imagine._after_task": [[239, 241], ["super()._after_task"], "methods", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.Imagine.Imagine._after_task"], ["", "self", ".", "_optimizer", "=", "factory", ".", "get_optimizer", "(", "\n", "parameters", ",", "self", ".", "_opt_name", ",", "self", ".", "_finetuning_config", "[", "\"lr\"", "]", ",", "self", ".", "weight_decay", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.Imagine.Imagine._eval_task": [[242, 266], ["super()._eval_task", "numpy.concatenate", "numpy.concatenate", "ValueError", "numpy.concatenate.append", "input_dict[].to", "[].detach", "torch.nn.functional.softmax", "numpy.concatenate.append", "input_dict[].numpy", "torch.nn.functional.softmax.cpu().numpy", "Imagine.Imagine._network", "torch.nn.functional.softmax.cpu"], "methods", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.Imagine.Imagine._eval_task"], ["self", ".", "_scheduler", "=", "None", "\n", "self", ".", "_training_step", "(", "loader", ",", "pseudo_memory_loader", ",", "val_loader", ",", "self", ".", "_n_epochs", ",", "\n", "self", ".", "_n_epochs", "+", "self", ".", "_finetuning_config", "[", "\"epochs\"", "]", ",", "fine_tune", "=", "True", ",", "record_bn", "=", "False", ",", "\n", ")", "\n", "\n", "", "@", "property", "\n", "def", "weight_decay", "(", "self", ")", ":", "\n", "        ", "if", "isinstance", "(", "self", ".", "_weight_decay", ",", "float", ")", ":", "\n", "            ", "return", "self", ".", "_weight_decay", "\n", "", "elif", "isinstance", "(", "self", ".", "_weight_decay", ",", "dict", ")", ":", "\n", "            ", "start", ",", "end", "=", "self", ".", "_weight_decay", "[", "\"start\"", "]", ",", "self", ".", "_weight_decay", "[", "\"end\"", "]", "\n", "step", "=", "(", "max", "(", "start", ",", "end", ")", "-", "min", "(", "start", ",", "end", ")", ")", "/", "(", "self", ".", "_n_tasks", "-", "1", ")", "\n", "factor", "=", "-", "1", "if", "start", ">", "end", "else", "1", "\n", "\n", "return", "start", "+", "factor", "*", "self", ".", "_task", "*", "step", "\n", "", "raise", "TypeError", "(", "\n", "\"Invalid type {} for weight decay: {}.\"", ".", "format", "(", "\n", "type", "(", "self", ".", "_weight_decay", ")", ",", "self", ".", "_weight_decay", "\n", ")", "\n", ")", "\n", "\n", "", "def", "_after_task", "(", "self", ",", "inc_dataset", ")", ":", "\n", "            ", "super", "(", ")", ".", "_after_task", "(", "inc_dataset", ")", "\n", "\n", "", "def", "_eval_task", "(", "self", ",", "test_loader", ")", ":", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.Imagine.Imagine._gen_weights": [[267, 272], ["inclearn.lib.utils.add_new_weights"], "methods", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.utils.add_new_weights"], ["        ", "if", "self", ".", "_evaluation_type", "in", "(", "\"icarl\"", ",", "\"nme\"", ")", ":", "\n", "            ", "return", "super", "(", ")", ".", "_eval_task", "(", "test_loader", ")", "\n", "", "elif", "self", ".", "_evaluation_type", "in", "(", "\"softmax\"", ",", "\"cnn\"", ")", ":", "\n", "            ", "ypred", "=", "[", "]", "\n", "ytrue", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.Imagine.Imagine._before_task": [[274, 338], ["Imagine.Imagine._gen_weights", "inclearn.utils.LOGGER.LOGGER.info", "isinstance", "Imagine.Imagine._network.get_group_parameters().items", "Imagine.Imagine._lr_layers.get", "set", "Imagine.Imagine.items", "set", "set.difference", "list", "params.append", "params.append", "inclearn.lib.factory.get_optimizer", "inclearn.lib.factory.get_lr_scheduler", "inclearn.lib.factory.get_optimizer", "inclearn.lib.factory.get_lr_scheduler", "torch.tensor().to", "inclearn.utils.LOGGER.LOGGER.info", "groupwise_factor.get", "params.append", "print", "getattr", "getattr.parameters", "params.append", "set.update", "Imagine.Imagine._network.convnet.parameters", "Imagine.Imagine._network.get_group_parameters", "set", "Imagine.Imagine._network.convnet.parameters", "torch.tensor", "layer_name.split", "getattr.parameters", "inclearn.lib.data.get_class_weights"], "methods", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.Imagine.Imagine._gen_weights", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.get", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.factory.get_optimizer", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.factory.get_lr_scheduler", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.factory.get_optimizer", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.lib.factory.get_lr_scheduler", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.get", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.update", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.basenet.BasicNet.get_group_parameters", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.data.weights.get_class_weights"], ["                ", "ytrue", ".", "append", "(", "input_dict", "[", "\"targets\"", "]", ".", "numpy", "(", ")", ")", "\n", "\n", "inputs", "=", "input_dict", "[", "\"inputs\"", "]", ".", "to", "(", "self", ".", "_device", ")", "\n", "logits", "=", "self", ".", "_network", "(", "inputs", ")", "[", "\"logits\"", "]", ".", "detach", "(", ")", "\n", "\n", "preds", "=", "F", ".", "softmax", "(", "logits", ",", "dim", "=", "-", "1", ")", "\n", "ypred", ".", "append", "(", "preds", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "", "ypred", "=", "np", ".", "concatenate", "(", "ypred", ")", "\n", "ytrue", "=", "np", ".", "concatenate", "(", "ytrue", ")", "\n", "\n", "self", ".", "_last_results", "=", "(", "ypred", ",", "ytrue", ")", "\n", "\n", "return", "ypred", ",", "ytrue", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "self", ".", "_evaluation_type", ")", "\n", "\n", "", "", "def", "_gen_weights", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_weight_generation", ":", "\n", "            ", "utils", ".", "add_new_weights", "(", "\n", "self", ".", "_network", ",", "self", ".", "_weight_generation", "if", "self", ".", "_task", "!=", "0", "else", "\"basic\"", ",", "\n", "self", ".", "_n_classes", ",", "self", ".", "_task_size", ",", "self", ".", "inc_dataset", "\n", ")", "\n", "\n", "", "", "def", "_before_task", "(", "self", ",", "train_loader", ",", "val_loader", ",", "taskid", ")", ":", "\n", "        ", "self", ".", "_gen_weights", "(", ")", "\n", "self", ".", "_n_classes", "+=", "self", ".", "_task_size", "\n", "logger", ".", "LOGGER", ".", "info", "(", "\"Now {} examplars per class.\"", ".", "format", "(", "self", ".", "_memory_per_class", ")", ")", "\n", "# classifier", "\n", "params", "=", "[", "]", "\n", "if", "self", ".", "_groupwise_factors", "and", "isinstance", "(", "self", ".", "_groupwise_factors", ",", "dict", ")", ":", "\n", "            ", "if", "self", ".", "_groupwise_factors_bis", "and", "self", ".", "_task", ">", "0", ":", "\n", "                ", "logger", ".", "LOGGER", ".", "info", "(", "\"Using second set of groupwise lr.\"", ")", "\n", "groupwise_factor", "=", "self", ".", "_groupwise_factors_bis", "\n", "", "else", ":", "\n", "                ", "groupwise_factor", "=", "self", ".", "_groupwise_factors", "\n", "\n", "", "for", "group_name", ",", "group_params", "in", "self", ".", "_network", ".", "get_group_parameters", "(", ")", ".", "items", "(", ")", ":", "\n", "                ", "if", "group_params", "is", "None", "or", "group_name", "==", "\"last_block\"", "or", "'convnet'", "in", "group_name", ":", "\n", "                    ", "continue", "\n", "", "factor", "=", "groupwise_factor", ".", "get", "(", "group_name", ",", "1.0", ")", "\n", "if", "factor", "==", "0.", ":", "\n", "                    ", "continue", "\n", "# valid_param = filter(lambda p: p.requires_grad, group_params)", "\n", "", "params", ".", "append", "(", "{", "\"params\"", ":", "group_params", ",", "\"lr\"", ":", "self", ".", "_lr", "*", "factor", "}", ")", "\n", "print", "(", "f\"Group: {group_name}, lr: {self._lr * factor}.\"", ")", "\n", "# backbone lr", "\n", "", "", "if", "self", ".", "_lr_layers", "and", "taskid", "!=", "0", ":", "\n", "            ", "lr_layers", "=", "self", ".", "_lr_layers", ".", "get", "(", "\"layers_lr\"", ",", "{", "'convnet.conv1'", ":", "0.01", ",", "\n", "'convnet.bn1'", ":", "0.01", ",", "\n", "'convnet.stage1'", ":", "0.01", "}", ")", "\n", "desired_params_set", "=", "set", "(", ")", "\n", "for", "layer_name", ",", "lr", "in", "lr_layers", ".", "items", "(", ")", ":", "\n", "                ", "layer", "=", "getattr", "(", "self", ".", "_network", ".", "convnet", ",", "layer_name", ".", "split", "(", "'convnet.'", ")", "[", "-", "1", "]", ")", "\n", "current_params", "=", "layer", ".", "parameters", "(", ")", "\n", "params", ".", "append", "(", "{", "'params'", ":", "current_params", ",", "'lr'", ":", "lr", "}", ")", "\n", "desired_params_set", ".", "update", "(", "set", "(", "layer", ".", "parameters", "(", ")", ")", ")", "\n", "", "all_params_set", "=", "set", "(", "self", ".", "_network", ".", "convnet", ".", "parameters", "(", ")", ")", "\n", "other_params_set", "=", "all_params_set", ".", "difference", "(", "desired_params_set", ")", "\n", "other_params", "=", "list", "(", "other_params_set", ")", "\n", "params", ".", "append", "(", "{", "'params'", ":", "other_params", ",", "'lr'", ":", "self", ".", "_lr", "}", ")", "\n", "", "else", ":", "\n", "            ", "params", ".", "append", "(", "{", "'params'", ":", "self", ".", "_network", ".", "convnet", ".", "parameters", "(", ")", "}", ")", "\n", "", "if", "taskid", "==", "0", ":", "# pretrain", "\n", "            ", "self", ".", "_optimizer", "=", "factory", ".", "get_optimizer", "(", "params", ",", "self", ".", "_pretrain_opt_name", ",", "self", ".", "_pretrain_lr", ",", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.Imagine.Imagine._compute_loss": [[339, 486], ["Imagine.Imagine._feature_distill_config.get", "torch.nn.functional.cross_entropy", "torch.stack", "Imagine.Imagine._compute_train_generator_loss", "torch.nn.functional.cross_entropy.item", "Imagine.Imagine.item", "train_generator_config.get", "outputs.keys", "outputs.keys", "Imagine.Imagine._network.post_process", "Imagine.Imagine._args.get", "Imagine.Imagine._args.get", "Imagine.Imagine._args.get", "Imagine.Imagine._args.get", "Imagine.Imagine._args.get", "Imagine.Imagine._args.get", "torch.nn.functional.cross_entropy.item", "torch.no_grad", "Imagine.Imagine._old_model", "len", "len", "Imagine.Imagine._network", "outputs[].to", "torch.nn.functional.cross_entropy", "torch.nn.functional.cross_entropy.item", "Imagine.Imagine._feature_distill_config.get", "Imagine.Imagine._feature_distill_config.get", "torch.tensor().to.item", "Imagine.Imagine.keys", "Imagine.Imagine._old_model", "torch.nn.functional.cross_entropy", "new_ce.item", "torch.nn.functional.cross_entropy", "old_ce.item", "torch.nn.functional.cross_entropy", "Imagine.Imagine._network.post_process", "Imagine.Imagine._feature_distill_config.get", "len", "len", "len", "math.sqrt", "mem_mask.sum", "torch.tensor().to", "inclearn.lib.losses.embeddings_similarity", "len", "len", "inclearn.lib.losses.embeddings_similarity", "inclearn.lib.losses.embeddings_similarity", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.get", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.Imagine.Imagine._compute_train_generator_loss", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.get", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.basenet.BasicNet.post_process", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.get", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.get", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.get", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.get", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.get", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.get", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.get", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.get", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.basenet.BasicNet.post_process", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.get", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.losses.base.embeddings_similarity", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.losses.base.embeddings_similarity", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.losses.base.embeddings_similarity"], ["self", ".", "_pretrain_weight_decay", ")", "\n", "self", ".", "_scheduler", "=", "factory", ".", "get_lr_scheduler", "(", "\n", "self", ".", "_pretrain_scheduling", ",", "\n", "self", ".", "_optimizer", ",", "\n", "nb_epochs", "=", "self", ".", "_pretrain_n_epochs", ",", "\n", "lr_decay", "=", "self", ".", "_pretrain_lr_decay", ",", "\n", "task", "=", "self", ".", "_task", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_optimizer", "=", "factory", ".", "get_optimizer", "(", "params", ",", "self", ".", "_opt_name", ",", "self", ".", "_lr", ",", "self", ".", "weight_decay", ")", "\n", "self", ".", "_scheduler", "=", "factory", ".", "get_lr_scheduler", "(", "\n", "self", ".", "_scheduling", ",", "\n", "self", ".", "_optimizer", ",", "\n", "nb_epochs", "=", "self", ".", "_n_epochs", ",", "\n", "lr_decay", "=", "self", ".", "_lr_decay", ",", "\n", "task", "=", "self", ".", "_task", "\n", ")", "\n", "", "if", "self", ".", "_class_weights_config", ":", "\n", "            ", "self", ".", "_class_weights", "=", "torch", ".", "tensor", "(", "\n", "data", ".", "get_class_weights", "(", "train_loader", ".", "dataset", ",", "**", "self", ".", "_class_weights_config", ")", "\n", ")", ".", "to", "(", "self", ".", "_device", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_class_weights", "=", "None", "\n", "\n", "", "", "def", "_compute_loss", "(", "self", ",", "inputs", ",", "outputs", ",", "targets", ",", "onehot_targets", ",", "memory_flags", ",", "unlabeled_new_outputs", "=", "None", ",", "\n", "pre_pass", "=", "False", ",", "fine_tune", "=", "False", ",", "train_generator_config", "=", "None", ")", ":", "\n", "        ", "loss", "=", "0", "\n", "if", "train_generator_config", "is", "not", "None", ":", "\n", "            ", "mixed_mask", "=", "memory_flags", "==", "2", "\n", "new_mask", "=", "memory_flags", "==", "0", "\n", "mixed_targets", "=", "targets", "[", "mixed_mask", "]", "\n", "mixed_logits", "=", "outputs", "[", "'logits'", "]", "[", "mixed_mask", "]", "\n", "loss_ce", "=", "F", ".", "cross_entropy", "(", "mixed_logits", ",", "mixed_targets", ")", "\n", "\n", "labeled_feature_map", "=", "torch", ".", "stack", "(", "[", "i", "for", "i", "in", "outputs", "[", "'attention'", "]", "[", "2", "]", "]", ")", "\n", "labeled_targets", "=", "targets", "[", "new_mask", "]", "\n", "mixed_feature_map", "=", "outputs", "[", "'generator_outputs'", "]", "\n", "unlabeled_feature_map", "=", "outputs", "[", "'origin_unlabeled_output'", "]", "[", "'attention'", "]", "[", "2", "]", "\n", "unlabeled_targets", "=", "outputs", "[", "'unlabeled_pseudo_label'", "]", "\n", "loss_contra", "=", "self", ".", "_compute_train_generator_loss", "(", "mixed_feature_map", "=", "mixed_feature_map", ",", "\n", "mixed_target", "=", "mixed_targets", ",", "\n", "unlabeled_feature_map", "=", "unlabeled_feature_map", ",", "\n", "unlabeled_target", "=", "unlabeled_targets", ",", "\n", "labeled_feature_map", "=", "labeled_feature_map", ",", "\n", "labeled_target", "=", "labeled_targets", ",", "\n", "cycle_feature_map", "=", "outputs", "[", "'cycle_feature_map'", "]", ",", "\n", "cycle_target", "=", "outputs", "[", "'cycle_targets'", "]", ",", "\n", "**", "train_generator_config", ")", "\n", "self", ".", "_metrics", "[", "'cce'", "]", "+=", "loss_ce", ".", "item", "(", ")", "\n", "self", ".", "_metrics", "[", "'contrastive'", "]", "+=", "loss_contra", ".", "item", "(", ")", "\n", "use_ce", "=", "train_generator_config", ".", "get", "(", "'use_ce'", ",", "False", ")", "\n", "if", "use_ce", ":", "\n", "                ", "loss", "=", "loss_ce", "+", "loss_contra", "\n", "", "else", ":", "\n", "                ", "loss", "=", "loss_contra", "\n", "\n", "", "return", "loss", "\n", "", "features", ",", "logits", ",", "atts", "=", "outputs", "[", "\"raw_features\"", "]", ",", "outputs", "[", "\"logits\"", "]", ",", "outputs", "[", "\"attention\"", "]", "\n", "if", "'origin_raw_features'", "in", "outputs", ".", "keys", "(", ")", ":", "\n", "            ", "ori_features", "=", "outputs", "[", "'origin_raw_features'", "]", "\n", "", "else", ":", "\n", "            ", "ori_features", "=", "features", "\n", "", "if", "'origin_mem_flags'", "in", "outputs", ".", "keys", "(", ")", ":", "\n", "            ", "ori_mem_flags", "=", "outputs", "[", "'origin_mem_flags'", "]", "\n", "", "else", ":", "\n", "            ", "ori_mem_flags", "=", "memory_flags", "\n", "\n", "", "if", "self", ".", "_post_processing_type", "is", "None", ":", "\n", "            ", "scaled_logits", "=", "self", ".", "_network", ".", "post_process", "(", "logits", ")", "\n", "", "else", ":", "\n", "            ", "scaled_logits", "=", "logits", "*", "self", ".", "_post_processing_type", "\n", "", "ori_unlabeled_old_feat", "=", "None", "\n", "dist_unlabeled", "=", "self", ".", "_feature_distill_config", ".", "get", "(", "'dist_unlabeled'", ",", "False", ")", "\n", "\n", "if", "self", ".", "_old_model", "is", "not", "None", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "old_outputs", "=", "self", ".", "_old_model", "(", "inputs", ",", "pre_pass", "=", "False", ")", "\n", "old_features", "=", "old_outputs", "[", "\"raw_features\"", "]", "\n", "if", "'origin_raw_features'", "in", "old_outputs", ".", "keys", "(", ")", ":", "\n", "                    ", "old_ori_features", "=", "old_outputs", "[", "'origin_raw_features'", "]", "\n", "", "else", ":", "\n", "                    ", "old_ori_features", "=", "old_features", "\n", "", "if", "dist_unlabeled", "and", "'unlabeled_imgs'", "in", "outputs", ":", "\n", "                    ", "ori_unlabeled_old_output", "=", "self", ".", "_old_model", "(", "outputs", "[", "'unlabeled_imgs'", "]", ")", "\n", "ori_unlabeled_old_feat", "=", "ori_unlabeled_old_output", "[", "'raw_features'", "]", "\n", "\n", "", "", "", "if", "self", ".", "_softmax_ce", "or", "self", ".", "_nca_config", ":", "\n", "            ", "if", "self", ".", "_nca_config", ":", "\n", "                ", "nca_config", "=", "copy", ".", "deepcopy", "(", "self", ".", "_nca_config", ")", "\n", "if", "self", ".", "_network", ".", "post_processor", ":", "\n", "                    ", "nca_config", "[", "\"scale\"", "]", "=", "self", ".", "_network", ".", "post_processor", ".", "factor", "\n", "", "criterion", "=", "lambda", "l", ",", "t", ",", "reduction", "=", "'mean'", ":", "losses", ".", "nca", "(", "l", ",", "t", ",", "memory_flags", "=", "None", ",", "class_weights", "=", "None", ",", "\n", "**", "nca_config", ",", "\n", "reduction", "=", "reduction", ")", "\n", "suffix", "=", "'_nca'", "\n", "\n", "", "else", ":", "\n", "                ", "criterion", "=", "lambda", "l", ",", "t", ",", "reduction", "=", "'mean'", ":", "F", ".", "cross_entropy", "(", "l", ",", "t", ",", "reduction", "=", "reduction", ")", "\n", "suffix", "=", "'_cce'", "\n", "", "only_new", "=", "self", ".", "_args", ".", "get", "(", "\"softmax_ce_only_new\"", ",", "False", ")", "\n", "not_unlabeled", "=", "self", ".", "_args", ".", "get", "(", "\"softmax_ce_not_unlabeled\"", ",", "False", ")", "\n", "split", "=", "self", ".", "_args", ".", "get", "(", "\"softmax_ce_split\"", ",", "False", ")", "\n", "global_scale", "=", "self", ".", "_args", ".", "get", "(", "\"softmax_ce_scale\"", ",", "1", ")", "\n", "ce_weight", "=", "self", ".", "_args", ".", "get", "(", "\"softmax_weight\"", ",", "1", ")", "\n", "uce_weight", "=", "self", ".", "_args", ".", "get", "(", "\"softmax_weight_unlabeled\"", ",", "1", ")", "\n", "use_unlabeled_ce", "=", "self", ".", "_args", ".", "get", "(", "\"use_unlabeled_ce\"", ",", "False", ")", "\n", "mixed_soft_label", "=", "self", ".", "_args", ".", "get", "(", "\"use_mixed_soft_label\"", ",", "False", ")", "\n", "u_soft_loss", "=", "self", ".", "_args", ".", "get", "(", "\"unlabeled_soft_ce\"", ",", "False", ")", "\n", "split_mix", "=", "self", ".", "_args", ".", "get", "(", "\"split_mix\"", ",", "True", ")", "\n", "mixed_weight", "=", "self", ".", "_args", ".", "get", "(", "\"mixed_weight\"", ",", "1", ")", "\n", "\n", "if", "only_new", "and", "not", "fine_tune", ":", "\n", "                ", "new_mask", "=", "memory_flags", "==", "0", "\n", "scaled_logits", "=", "scaled_logits", "[", "new_mask", "]", "\n", "targets", "=", "targets", "[", "new_mask", "]", "\n", "", "elif", "not", "fine_tune", "and", "not_unlabeled", ":", "\n", "                ", "u_mask", "=", "memory_flags", "==", "2", "\n", "scaled_logits", "=", "scaled_logits", "[", "~", "u_mask", "]", "\n", "targets", "=", "targets", "[", "~", "u_mask", "]", "\n", "", "if", "split", ":", "\n", "                ", "new_mask", "=", "memory_flags", "==", "0", "\n", "new_logits", "=", "scaled_logits", "[", "new_mask", "]", "\n", "new_targets", "=", "targets", "[", "new_mask", "]", "\n", "old_logits", "=", "scaled_logits", "[", "~", "new_mask", "]", "\n", "old_targets", "=", "targets", "[", "~", "new_mask", "]", "\n", "# old_factor = old_ce_weight * math.sqrt(self._n_classes / self._task_size)", "\n", "new_ce", ",", "old_ce", "=", "0", ",", "0", "\n", "if", "len", "(", "new_logits", ")", ":", "\n", "                    ", "new_ce", "+=", "criterion", "(", "new_logits", "*", "global_scale", ",", "new_targets", ",", "reduction", "=", "'sum'", ")", "\n", "self", ".", "_metrics", "[", "\"cce_new\"", "+", "suffix", "]", "+=", "new_ce", ".", "item", "(", ")", "\n", "", "if", "len", "(", "old_logits", ")", ":", "\n", "                    ", "old_ce", "+=", "criterion", "(", "old_logits", "*", "global_scale", ",", "old_targets", ",", "reduction", "=", "'sum'", ")", "\n", "self", ".", "_metrics", "[", "\"cce_old\"", "+", "suffix", "]", "+=", "old_ce", ".", "item", "(", ")", "\n", "", "loss_ce", "=", "(", "new_ce", "+", "old_ce", ")", "/", "len", "(", "targets", ")", "*", "ce_weight", "\n", "", "elif", "mixed_soft_label", ":", "\n", "                ", "mixed_mask", "=", "memory_flags", "==", "2", "\n", "others_logits", "=", "scaled_logits", "[", "~", "mixed_mask", "]", "\n", "others_targets", "=", "targets", "[", "~", "mixed_mask", "]", "\n", "others_ce", "=", "criterion", "(", "others_logits", "*", "global_scale", ",", "others_targets", ",", "reduction", "=", "'sum'", ")", "\n", "\n", "mixed_logits", "=", "scaled_logits", "[", "mixed_mask", "]", "\n", "mixed_targets", "=", "targets", "[", "mixed_mask", "]", "\n", "soft_targets", "=", "[", "]", "\n", "for", "idx", ",", "tar", "in", "enumerate", "(", "mixed_targets", ")", ":", "\n", "                    ", "labeled_logits", "=", "others_logits", "[", "others_targets", "==", "tar", "]", "\n", "if", "len", "(", "labeled_logits", ")", ">", "1", ":", "\n", "                        ", "soft_targets_cls", "=", "labeled_logits", ".", "mean", "(", "dim", "=", "0", ")", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.Imagine.Imagine._compute_train_generator_loss": [[487, 616], ["torch.unique", "torch.zeros().to", "int", "inclearn.lib.losses.distillation.compute_collapsed_features_single", "inclearn.lib.losses.distillation.compute_collapsed_features_single", "Imagine.compute_gram_matrix", "inclearn.lib.losses.distillation.compute_collapsed_features_single", "inclearn.lib.losses.distillation.compute_collapsed_features_single", "inclearn.lib.losses.distillation.compute_collapsed_features_single", "inclearn.lib.losses.distillation.compute_collapsed_features_single", "Imagine.compute_gram_matrix", "compute_gram_matrix.mean", "cls_labeled_feat_map.expand().reshape", "cls_mixed_feat_map.expand().transpose().reshape", "inclearn.lib.losses.distillation.compute_collapsed_features_single", "inclearn.lib.losses.distillation.compute_collapsed_features_single", "Imagine.compute_gram_matrix", "Imagine.compute_gram_matrix", "torch.zeros", "int", "compute_gram_matrix.expand().reshape", "torch.frobenius_norm().mean", "len", "torch.frobenius_norm().mean", "len", "torch.frobenius_norm().mean", "len", "torch.frobenius_norm().mean", "len", "torch.frobenius_norm().mean", "len", "positive.item", "gram_loss.item", "cycle_sp_loss.item", "len", "len", "cls.item", "torch.from_numpy", "torch.from_numpy", "cls_labeled_feat_map.expand", "cls_mixed_feat_map.expand().transpose", "torch.from_numpy", "torch.from_numpy", "positive_c.item", "cycle_channel_loss.item", "gram_loss_style.item", "numpy.random.choice", "numpy.random.choice", "torch.from_numpy", "len", "len", "compute_gram_matrix.expand", "torch.frobenius_norm", "torch.frobenius_norm", "torch.frobenius_norm", "numpy.random.choice", "numpy.random.choice", "torch.frobenius_norm", "torch.frobenius_norm", "torch.frobenius_norm().mean", "len", "cls.item", "numpy.arange", "numpy.arange", "numpy.random.choice", "cls_mixed_feat_map.expand", "numpy.arange", "numpy.arange", "len", "len", "len", "len", "numpy.arange", "len", "len", "len", "len", "torch.frobenius_norm", "len", "len"], "methods", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.losses.distillation.compute_collapsed_features_single", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.losses.distillation.compute_collapsed_features_single", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.Imagine.compute_gram_matrix", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.losses.distillation.compute_collapsed_features_single", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.losses.distillation.compute_collapsed_features_single", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.losses.distillation.compute_collapsed_features_single", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.losses.distillation.compute_collapsed_features_single", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.Imagine.compute_gram_matrix", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.losses.distillation.compute_collapsed_features_single", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.losses.distillation.compute_collapsed_features_single", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.Imagine.compute_gram_matrix", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.Imagine.compute_gram_matrix"], ["                        ", "soft_targets_cls", "=", "labeled_logits", "\n", "", "soft_targets", ".", "append", "(", "soft_targets_cls", ".", "detach", "(", ")", ".", "squeeze", "(", ")", ")", "\n", "", "if", "not", "len", "(", "soft_targets", ")", ":", "\n", "                    ", "mixed_ce", "=", "torch", ".", "tensor", "(", "1", ")", "\n", "", "else", ":", "\n", "                    ", "soft_targets", "=", "F", ".", "softmax", "(", "torch", ".", "stack", "(", "soft_targets", ")", ",", "dim", "=", "1", ")", "\n", "mixed_ce", "=", "self", ".", "soft_cross_entropy", "(", "mixed_logits", "*", "global_scale", ",", "soft_targets", ")", "\n", "\n", "", "loss_ce", "=", "(", "others_ce", "+", "mixed_ce", ")", "/", "len", "(", "targets", ")", "*", "ce_weight", "\n", "", "elif", "split_mix", "and", "self", ".", "_use_unlabeled", "and", "self", ".", "_task", ">", "0", ":", "\n", "                ", "mixed_mask", "=", "memory_flags", "==", "2", "\n", "others_logits", "=", "scaled_logits", "[", "~", "mixed_mask", "]", "\n", "others_targets", "=", "targets", "[", "~", "mixed_mask", "]", "\n", "others_ce", "=", "criterion", "(", "others_logits", "*", "global_scale", ",", "others_targets", ",", "reduction", "=", "'sum'", ")", "\n", "\n", "mixed_logits", "=", "scaled_logits", "[", "mixed_mask", "]", "\n", "mixed_targets", "=", "targets", "[", "mixed_mask", "]", "\n", "if", "len", "(", "mixed_logits", ")", ":", "\n", "                    ", "mixed_ce", "=", "criterion", "(", "mixed_logits", "*", "global_scale", ",", "mixed_targets", ",", "reduction", "=", "'sum'", ")", "*", "mixed_weight", "\n", "", "else", ":", "\n", "                    ", "mixed_ce", "=", "0", "\n", "\n", "", "loss_ce", "=", "(", "others_ce", "+", "mixed_ce", ")", "/", "len", "(", "targets", ")", "*", "ce_weight", "\n", "if", "len", "(", "mixed_logits", ")", ":", "\n", "                    ", "self", ".", "_metrics", "[", "\"mixed_ce\"", "+", "suffix", "]", "+=", "(", "mixed_ce", "/", "len", "(", "mixed_logits", ")", ")", ".", "item", "(", ")", "\n", "", "if", "len", "(", "others_logits", ")", ":", "\n", "                    ", "self", ".", "_metrics", "[", "\"other_ce\"", "+", "suffix", "]", "+=", "(", "others_ce", "/", "len", "(", "others_logits", ")", ")", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "", "", "else", ":", "\n", "                ", "loss_ce", "=", "criterion", "(", "scaled_logits", "*", "global_scale", ",", "targets", ")", "*", "ce_weight", "\n", "\n", "", "self", ".", "_metrics", "[", "\"cce\"", "+", "suffix", "]", "+=", "loss_ce", ".", "item", "(", ")", "\n", "if", "use_unlabeled_ce", "and", "'unlabeled_imgs'", "in", "outputs", ":", "\n", "                ", "if", "u_soft_loss", ":", "\n", "                    ", "u_logits", "=", "unlabeled_new_outputs", "[", "'logits'", "]", "\n", "if", "self", ".", "_post_processing_type", "is", "None", ":", "\n", "                        ", "scaled_u_logits", "=", "self", ".", "_network", ".", "post_process", "(", "u_logits", ")", "\n", "", "else", ":", "\n", "                        ", "scaled_u_logits", "=", "logits", "*", "self", ".", "_post_processing_type", "\n", "# get soft label", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                        ", "unlabeled_img", "=", "outputs", "[", "'unlabeled_imgs'", "]", "\n", "u_targets", "=", "self", ".", "_old_model", "(", "unlabeled_img", ")", "[", "'logits'", "]", "\n", "u_targets", "=", "torch", ".", "cat", "(", "(", "u_targets", ",", "-", "100", "*", "torch", ".", "ones", "(", "u_targets", ".", "shape", "[", "0", "]", ",", "\n", "scaled_u_logits", ".", "shape", "[", "1", "]", "-", "u_targets", ".", "shape", "[", "\n", "1", "]", ")", ".", "to", "(", "self", ".", "_device", ")", ")", ",", "dim", "=", "1", ")", "\n", "", "u_loss", "=", "self", ".", "soft_entropy", "(", "scaled_u_logits", ",", "u_targets", ")", "*", "uce_weight", "\n", "self", ".", "_metrics", "[", "\"u_loss\"", "]", "+=", "u_loss", ".", "item", "(", ")", "\n", "loss", "+=", "(", "loss_ce", "*", "len", "(", "targets", ")", "+", "u_loss", "*", "len", "(", "u_targets", ")", ")", "/", "(", "len", "(", "targets", ")", "+", "len", "(", "u_targets", ")", ")", "\n", "", "else", ":", "\n", "                    ", "unlabeled_new_outputs", "=", "self", ".", "_network", "(", "outputs", "[", "'unlabeled_imgs'", "]", ")", "\n", "u_targets", "=", "outputs", "[", "'unlabeled_pseudo_label'", "]", ".", "to", "(", "self", ".", "_device", ")", "\n", "u_logits", "=", "unlabeled_new_outputs", "[", "'logits'", "]", "\n", "if", "self", ".", "_post_processing_type", "is", "None", ":", "\n", "                        ", "scaled_u_logits", "=", "self", ".", "_network", ".", "post_process", "(", "u_logits", ")", "\n", "", "else", ":", "\n", "                        ", "scaled_u_logits", "=", "logits", "*", "self", ".", "_post_processing_type", "\n", "", "u_loss", "=", "criterion", "(", "scaled_u_logits", ",", "u_targets", ")", "*", "uce_weight", "\n", "self", ".", "_metrics", "[", "\"u_loss\"", "]", "+=", "u_loss", ".", "item", "(", ")", "\n", "loss", "+=", "(", "loss_ce", "*", "len", "(", "targets", ")", "+", "u_loss", "*", "len", "(", "u_targets", ")", ")", "/", "(", "len", "(", "targets", ")", "+", "len", "(", "u_targets", ")", ")", "\n", "", "", "else", ":", "\n", "                ", "loss", "+=", "loss_ce", "\n", "\n", "# --------------------", "\n", "# Distillation losses:", "\n", "# --------------------", "\n", "\n", "", "", "if", "self", ".", "_old_model", "is", "not", "None", ":", "\n", "            ", "if", "self", ".", "_feature_distill_config", ":", "\n", "                ", "if", "self", ".", "_feature_distill_config", ".", "get", "(", "\"scheduled_factor\"", ",", "False", ")", ":", "\n", "                    ", "factor", "=", "self", ".", "_feature_distill_config", "[", "\"scheduled_factor\"", "]", "*", "math", ".", "sqrt", "(", "\n", "self", ".", "_n_classes", "/", "self", ".", "_task_size", "\n", ")", "\n", "", "else", ":", "\n", "                    ", "factor", "=", "self", ".", "_feature_distill_config", ".", "get", "(", "\"factor\"", ",", "1.", ")", "\n", "", "only_old", "=", "self", ".", "_feature_distill_config", ".", "get", "(", "\"only_old\"", ",", "False", ")", "\n", "if", "only_old", ":", "\n", "                    ", "mem_mask", "=", "ori_mem_flags", "==", "1", "\n", "old_ori_features", "=", "old_ori_features", "[", "mem_mask", "]", "\n", "ori_features", "=", "ori_features", "[", "mem_mask", "]", "\n", "if", "mem_mask", ".", "sum", "(", ")", "==", "0", ":", "\n", "                        ", "feat_distill_loss", "=", "torch", ".", "tensor", "(", "0", ")", ".", "to", "(", "self", ".", "_device", ")", "\n", "", "else", ":", "\n", "                        ", "feat_distill_loss", "=", "factor", "*", "losses", ".", "embeddings_similarity", "(", "old_ori_features", ",", "ori_features", ")", "\n", "", "", "else", ":", "\n", "                    ", "feat_distill_loss", "=", "factor", "*", "losses", ".", "embeddings_similarity", "(", "old_ori_features", ",", "ori_features", ")", "\n", "\n", "", "if", "dist_unlabeled", ":", "\n", "                    ", "if", "ori_unlabeled_old_feat", "is", "None", ":", "\n", "# logger.LOGGER.warning('No unlabeled data! Ignore..')", "\n", "                        ", "pass", "\n", "", "else", ":", "\n", "                        ", "ori_unlabeled_output", "=", "outputs", "[", "'origin_unlabeled_output'", "]", "[", "'raw_features'", "]", "\n", "feat_distill_loss", "+=", "factor", "*", "losses", ".", "embeddings_similarity", "(", "ori_unlabeled_old_feat", ",", "\n", "ori_unlabeled_output", ")", "\n", "\n", "", "", "loss", "+=", "feat_distill_loss", "\n", "self", ".", "_metrics", "[", "\"feat_distill\"", "]", "+=", "feat_distill_loss", ".", "item", "(", ")", "\n", "\n", "", "", "return", "loss", "\n", "\n", "", "def", "_compute_train_generator_loss", "(", "self", ",", "mixed_feature_map", ",", "mixed_target", ",", "unlabeled_feature_map", ",", "unlabeled_target", ",", "\n", "labeled_feature_map", ",", "labeled_target", ",", "cycle_feature_map", ",", "cycle_target", ",", "\n", "use_contrastive", "=", "True", ",", "collapsed_type", "=", "'spatial'", ",", "use_channels", "=", "True", ",", "normalize", "=", "True", ",", "\n", "use_style", "=", "True", ",", "style_mean", "=", "False", ",", "style_weight", "=", "1", ",", "use_unlabeled_feature_map", "=", "True", ",", "\n", "only_softmax", "=", "False", ",", "diff_cls", "=", "None", ",", "use_cycle", "=", "True", ",", "cycle_use_channel", "=", "True", ",", "\n", "cycle_use_style", "=", "True", ",", "cycle_weight_global", "=", "0.5", ",", "**", "kwargs", ")", ":", "\n", "        ", "mixed_cls", "=", "torch", ".", "unique", "(", "mixed_target", ")", "\n", "loss", "=", "torch", ".", "zeros", "(", "1", ")", ".", "to", "(", "self", ".", "_device", ")", "\n", "smooth_type", "=", "'normalize'", "if", "not", "only_softmax", "else", "'softmax'", "\n", "for", "cls", "in", "mixed_cls", ":", "\n", "            ", "labeled_mask", "=", "labeled_target", "==", "cls", "\n", "mixed_mask", "=", "mixed_target", "==", "cls", "\n", "cycle_mask", "=", "cycle_target", "==", "cls", "\n", "cls_mixed_feat_map", "=", "mixed_feature_map", "[", "mixed_mask", "]", "\n", "cls_labeled_feat_map", "=", "labeled_feature_map", "[", "labeled_mask", "]", "\n", "if", "not", "len", "(", "cls_labeled_feat_map", ")", ":", "\n", "                ", "logger", ".", "LOGGER", ".", "warning", "(", "f'no cls_labeled_feat_map, ignore!'", ")", "\n", "continue", "\n", "", "cls_cycle_feat_map", "=", "cycle_feature_map", "[", "cycle_mask", "]", "\n", "num", "=", "int", "(", "len", "(", "cls_cycle_feat_map", ")", "/", "len", "(", "cls_labeled_feat_map", ")", ")", "\n", "\n", "collapsed_mixed_feat", "=", "compute_collapsed_features_single", "(", "cls_mixed_feat_map", ",", "'spatial'", ",", "normalize", ")", "\n", "collapsed_cycle_feat", "=", "compute_collapsed_features_single", "(", "cls_cycle_feat_map", ",", "'spatial'", ",", "normalize", ")", "\n", "mixed_feat_gram", "=", "compute_gram_matrix", "(", "cls_mixed_feat_map", ",", "smooth_type", ")", "\n", "collapsed_mixed_feat_c", "=", "compute_collapsed_features_single", "(", "cls_mixed_feat_map", ",", "'channels'", ",", "normalize", ")", "\n", "collapsed_cycle_feat_c", "=", "compute_collapsed_features_single", "(", "cls_cycle_feat_map", ",", "'channels'", ",", "normalize", ")", "\n", "\n", "collapsed_labeled_feat", "=", "compute_collapsed_features_single", "(", "cls_labeled_feat_map", ",", "'spatial'", ",", "normalize", ")", "\n", "collapsed_labeled_feat_c", "=", "compute_collapsed_features_single", "(", "cls_labeled_feat_map", ",", "'channels'", ",", "normalize", ")", "\n", "if", "use_unlabeled_feature_map", ":", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.Imagine.Imagine._after_task_intensive": [[617, 630], ["inclearn.utils.LOGGER.LOGGER.info", "super()._after_task_intensive", "inclearn.utils.LOGGER.LOGGER.info", "super()._after_task_intensive", "inclearn.utils.LOGGER.LOGGER.info", "super()._after_task_intensive", "inclearn.utils.LOGGER.LOGGER.info"], "methods", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.Imagine.Imagine._after_task_intensive", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.Imagine.Imagine._after_task_intensive", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.Imagine.Imagine._after_task_intensive"], ["                ", "if", "not", "self", ".", "_generator_use_same_class", ":", "\n", "                    ", "u_cls", "=", "self", ".", "_diff_cls_mapping", "[", "cls", ".", "item", "(", ")", "]", "\n", "", "else", ":", "\n", "                    ", "u_cls", "=", "cls", ".", "item", "(", ")", "\n", "", "style_ref", "=", "unlabeled_feature_map", "[", "unlabeled_target", "==", "u_cls", "]", "\n", "", "else", ":", "\n", "                ", "style_ref", "=", "cls_labeled_feat_map", "\n", "", "mixed_labeled_gram", "=", "compute_gram_matrix", "(", "style_ref", ",", "smooth_type", ")", "\n", "\n", "selected_labeled_feat", "=", "collapsed_labeled_feat", "[", "\n", "torch", ".", "from_numpy", "(", "\n", "np", ".", "random", ".", "choice", "(", "\n", "np", ".", "arange", "(", "0", ",", "len", "(", "collapsed_labeled_feat", ")", ")", ",", "\n", "size", "=", "len", "(", "collapsed_mixed_feat", ")", ",", "replace", "=", "True", ")", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.Imagine.compute_gram_matrix": [[632, 648], ["feature_maps.size", "F.softmax.transpose", "torch.bmm", "torch.nn.functional.normalize", "feature_maps.view", "torch.nn.functional.softmax", "feature_maps.view"], "function", ["None"], ["]", "\n", "\n", "# target_mean = selected_labeled_feat.mean(dim=0)", "\n", "selected_labeled_feat_c", "=", "collapsed_labeled_feat_c", "[", "\n", "torch", ".", "from_numpy", "(", "\n", "np", ".", "random", ".", "choice", "(", "\n", "np", ".", "arange", "(", "0", ",", "len", "(", "collapsed_labeled_feat_c", ")", ")", ",", "\n", "size", "=", "len", "(", "collapsed_mixed_feat", ")", ",", "replace", "=", "True", ")", "\n", ")", "\n", "]", "\n", "\n", "gram_mean", "=", "mixed_labeled_gram", ".", "mean", "(", "dim", "=", "0", ")", "\n", "if", "not", "use_unlabeled_feature_map", ":", "\n", "                ", "selected_labeled_gram", "=", "mixed_labeled_gram", "[", "\n", "torch", ".", "from_numpy", "(", "\n", "np", ".", "random", ".", "choice", "(", "\n", "np", ".", "arange", "(", "0", ",", "len", "(", "mixed_labeled_gram", ")", ")", ",", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.convnet.resnet.BasicBlock.__init__": [[32, 44], ["torch.Module.__init__", "resnet.conv3x3", "BN", "torch.ReLU", "torch.ReLU", "resnet.conv3x3", "BN"], "methods", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.tools.conv_mtl.Conv2dMtl.__init__", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.convnet.resnet.conv3x3", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.convnet.resnet.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "last_relu", "=", "True", ",", "alternative_BN", "=", "False", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "BN", "=", "AlternativeBN", "if", "alternative_BN", "else", "nn", ".", "BatchNorm2d", "\n", "self", ".", "alternative_BN", "=", "alternative_BN", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "BN", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "BN", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "last_relu", "=", "last_relu", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.convnet.resnet.BasicBlock.forward": [[45, 76], ["resnet.BasicBlock.conv1", "resnet.BasicBlock.relu", "resnet.BasicBlock.conv2", "resnet.BasicBlock.bn1", "resnet.BasicBlock.bn1", "resnet.BasicBlock.bn2", "resnet.BasicBlock.bn2", "resnet.BasicBlock.relu", "resnet.BasicBlock.downsample", "resnet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "if_mixed", "=", "False", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "\n", "if", "self", ".", "alternative_BN", ":", "\n", "            ", "out", "=", "self", ".", "bn1", "(", "out", ",", "if_mixed", "=", "if_mixed", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "\n", "", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "\n", "if", "self", ".", "alternative_BN", ":", "\n", "            ", "out", "=", "self", ".", "bn2", "(", "out", ",", "if_mixed", "=", "if_mixed", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "if", "self", ".", "alternative_BN", ":", "\n", "                ", "identity", "=", "self", ".", "downsample", "(", "x", ",", "if_mixed", "=", "if_mixed", ")", "\n", "", "else", ":", "\n", "                ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "", "out", "+=", "identity", "\n", "\n", "if", "self", ".", "last_relu", ":", "\n", "            ", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.convnet.resnet.Bottleneck.__init__": [[81, 93], ["torch.Module.__init__", "resnet.conv1x1", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnet.conv1x1", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.tools.conv_mtl.Conv2dMtl.__init__", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.convnet.resnet.conv1x1", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.convnet.resnet.conv3x3", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.convnet.resnet.conv1x1"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "last_relu", "=", "True", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv1x1", "(", "inplanes", ",", "planes", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "conv1x1", "(", "planes", ",", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "last_relu", "=", "last_relu", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.convnet.resnet.Bottleneck.forward": [[94, 117], ["resnet.Bottleneck.conv1", "resnet.Bottleneck.bn1", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv2", "resnet.Bottleneck.bn2", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv3", "resnet.Bottleneck.bn3", "resnet.Bottleneck.downsample", "resnet.Bottleneck.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "\n", "if", "self", ".", "last_relu", ":", "\n", "            ", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.convnet.resnet.ResNet.__init__": [[121, 171], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "print", "resnet.ResNet.modules", "isinstance", "resnet.ResNet.modules", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "isinstance", "m.bn2.modules", "isinstance", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.tools.conv_mtl.Conv2dMtl.__init__", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.convnet.my_resnet.CifarResNet._make_layer", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.convnet.my_resnet.CifarResNet._make_layer", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.convnet.my_resnet.CifarResNet._make_layer", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.convnet.my_resnet.CifarResNet._make_layer"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "block", ",", "\n", "layers", ",", "\n", "zero_init_residual", "=", "True", ",", "\n", "nf", "=", "64", ",", "\n", "last_relu", "=", "True", ",", "\n", "initial_kernel", "=", "3", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "last_relu", "=", "last_relu", "\n", "self", ".", "inplanes", "=", "nf", "\n", "# self.conv1 = nn.Conv2d(3, nf, kernel_size=7, stride=2, padding=3, bias=False)", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "nf", ",", "kernel_size", "=", "initial_kernel", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "nf", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "# self.maxpool = nn.MaxPool2d(kernel_size=3, stride=2, padding=1)", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "stage_1", "=", "self", ".", "_make_layer", "(", "block", ",", "1", "*", "nf", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "stage_2", "=", "self", ".", "_make_layer", "(", "block", ",", "2", "*", "nf", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "stage_3", "=", "self", ".", "_make_layer", "(", "block", ",", "4", "*", "nf", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "stage_4", "=", "self", ".", "_make_layer", "(", "block", ",", "8", "*", "nf", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ",", "last", "=", "True", ",", "alternative_BN", "=", "True", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "\n", "self", ".", "out_dim", "=", "8", "*", "nf", "*", "block", ".", "expansion", "\n", "print", "(", "\"Features dimension is {}.\"", ".", "format", "(", "self", ".", "out_dim", ")", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "# Zero-initialize the last BN in each residual branch,", "\n", "# so that the residual branch starts with zeros, and each residual block behaves like an identity.", "\n", "# This improves the model by 0.2~0.3% according to https://arxiv.org/abs/1706.02677", "\n", "", "", "if", "zero_init_residual", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "Bottleneck", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn3", ".", "weight", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "BasicBlock", ")", ":", "\n", "                    ", "if", "isinstance", "(", "m", ".", "bn2", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                        ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn2", ".", "weight", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ".", "bn2", ",", "nn", ".", "Module", ")", ":", "\n", "                        ", "for", "mm", "in", "m", ".", "bn2", ".", "modules", "(", ")", ":", "\n", "                            ", "if", "isinstance", "(", "mm", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                                ", "nn", ".", "init", ".", "constant_", "(", "mm", ".", "weight", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.convnet.resnet.ResNet._make_layer": [[172, 189], ["layers.append", "range", "resnet.MySequential", "resnet.MyDownSampleBlock", "block", "layers.append", "layers.append", "block", "block"], "methods", ["None"], ["", "", "", "", "", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "last", "=", "False", ",", "alternative_BN", "=", "False", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "MyDownSampleBlock", "(", "inplanes", "=", "self", ".", "inplanes", ",", "planes", "=", "planes", ",", "expansion", "=", "block", ".", "expansion", ",", "\n", "stride", "=", "stride", ",", "alternative_BN", "=", "alternative_BN", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "alternative_BN", "=", "alternative_BN", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "if", "i", "==", "blocks", "-", "1", "or", "last", ":", "\n", "                ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "last_relu", "=", "False", ",", "alternative_BN", "=", "alternative_BN", ")", ")", "\n", "", "else", ":", "\n", "                ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "last_relu", "=", "self", ".", "last_relu", ",", "alternative_BN", "=", "alternative_BN", ")", ")", "\n", "\n", "", "", "return", "MySequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.convnet.resnet.ResNet.last_block": [[190, 193], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "last_block", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "stage_4", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.convnet.resnet.ResNet.last_conv": [[194, 197], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "last_conv", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "stage_4", "[", "-", "1", "]", ".", "conv2", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.convnet.resnet.ResNet.forward": [[198, 221], ["resnet.ResNet.stage_4", "resnet.ResNet.end_features", "resnet.ResNet.end_features", "resnet.ResNet.conv1", "resnet.ResNet.bn1", "resnet.ResNet.relu", "resnet.ResNet.maxpool", "resnet.ResNet.stage_1", "resnet.ResNet.stage_2", "resnet.ResNet.stage_3", "resnet.ResNet.end_relu", "torch.nn.functional.relu", "torch.nn.functional.relu", "resnet.ResNet.end_relu", "resnet.ResNet.end_relu"], "methods", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.convnet.my_resnet.CifarResNet.end_features", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.convnet.my_resnet.CifarResNet.end_features", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.convnet.resnet.ResNet.end_relu", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.convnet.resnet.ResNet.end_relu", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.convnet.resnet.ResNet.end_relu"], ["", "def", "forward", "(", "self", ",", "x", ",", "pre_pass", "=", "False", ",", "if_mixed", "=", "False", ")", ":", "\n", "        ", "if", "not", "pre_pass", ":", "\n", "            ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "x_1", "=", "self", ".", "stage_1", "(", "x", ")", "\n", "x_2", "=", "self", ".", "stage_2", "(", "self", ".", "end_relu", "(", "x_1", ")", ")", "\n", "x_3", "=", "self", ".", "stage_3", "(", "self", ".", "end_relu", "(", "x_2", ")", ")", "\n", "", "else", ":", "\n", "            ", "x_1", "=", "x", "\n", "x_2", "=", "x", "\n", "x_3", "=", "x", "\n", "", "x_4", "=", "self", ".", "stage_4", "(", "self", ".", "end_relu", "(", "x_3", ")", ",", "if_mixed", "=", "if_mixed", ")", "\n", "\n", "raw_features", "=", "self", ".", "end_features", "(", "x_4", ")", "\n", "features", "=", "self", ".", "end_features", "(", "F", ".", "relu", "(", "x_4", ",", "inplace", "=", "False", ")", ")", "\n", "\n", "return", "{", "\n", "\"raw_features\"", ":", "raw_features", ",", "\n", "\"features\"", ":", "features", ",", "\n", "\"attention\"", ":", "[", "x_1", ",", "x_2", ",", "x_3", ",", "x_4", "]", ",", "\n", "'stage2_feature_map'", ":", "x_3", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.convnet.resnet.ResNet.end_features": [[223, 227], ["resnet.ResNet.avgpool", "x.view.view.view", "x.view.view.size"], "methods", ["None"], ["", "def", "end_features", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.convnet.resnet.ResNet.end_relu": [[228, 232], ["hasattr", "torch.nn.functional.relu", "torch.nn.functional.relu"], "methods", ["None"], ["", "def", "end_relu", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "hasattr", "(", "self", ",", "\"last_relu\"", ")", "and", "self", ".", "last_relu", ":", "\n", "            ", "return", "F", ".", "relu", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.convnet.resnet.ResNet.freeze": [[233, 259], ["resnet.ResNet.parameters", "isinstance", "resnet.ResNet.eval", "resnet.ResNet.train"], "methods", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.base.IncrementalLearner.eval", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.base.IncrementalLearner.train"], ["", "def", "freeze", "(", "self", ",", "trainable", "=", "False", ",", "model", "=", "\"all\"", ")", ":", "\n", "        ", "if", "model", "==", "\"all\"", ":", "\n", "            ", "model", "=", "self", "\n", "", "elif", "model", "==", "\"stage4\"", ":", "\n", "            ", "model", "=", "self", ".", "stage_4", "\n", "", "elif", "model", "==", "\"stage1\"", ":", "\n", "            ", "model", "=", "self", ".", "stage_1", "\n", "", "elif", "model", "==", "\"stage2\"", ":", "\n", "            ", "model", "=", "self", ".", "stage_2", "\n", "", "elif", "model", "==", "\"stage3\"", ":", "\n", "            ", "model", "=", "self", ".", "stage_3", "\n", "", "elif", "model", "==", "\"conv1\"", ":", "\n", "            ", "model", "=", "self", ".", "conv1", "\n", "", "elif", "model", "==", "\"bn1\"", ":", "\n", "            ", "model", "=", "self", ".", "bn1", "\n", "", "else", ":", "\n", "            ", "assert", "False", ",", "model", "\n", "", "if", "not", "isinstance", "(", "model", ",", "nn", ".", "Module", ")", ":", "\n", "            ", "return", "self", "\n", "", "for", "param", "in", "model", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "trainable", "\n", "", "if", "not", "trainable", ":", "\n", "            ", "model", ".", "eval", "(", ")", "\n", "", "else", ":", "\n", "            ", "model", ".", "train", "(", ")", "\n", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.convnet.resnet.ResNet.init_fake_BN": [[260, 265], ["stage4.modules", "isinstance", "i.bn2.load_state_dict", "i.bn1.state_dict"], "methods", ["None"], ["", "def", "init_fake_BN", "(", "self", ")", ":", "\n", "        ", "stage4", "=", "self", ".", "stage_4", "\n", "for", "i", "in", "stage4", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "i", ",", "AlternativeBN", ")", ":", "\n", "                ", "i", ".", "bn2", ".", "load_state_dict", "(", "i", ".", "bn1", ".", "state_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.convnet.resnet.AlternativeBN.__init__": [[267, 271], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.tools.conv_mtl.Conv2dMtl.__init__"], ["    ", "def", "__init__", "(", "self", ",", "bn_config", ")", ":", "\n", "        ", "super", "(", "AlternativeBN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "bn_config", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "bn_config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.convnet.resnet.AlternativeBN.forward": [[272, 274], ["resnet.AlternativeBN.bn2", "resnet.AlternativeBN.bn1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "if_mixed", "=", "False", ")", ":", "\n", "        ", "return", "self", ".", "bn2", "(", "x", ")", "if", "if_mixed", "else", "self", ".", "bn1", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.convnet.resnet.MySequential.__init__": [[277, 281], ["torch.Sequential.__init__", "enumerate", "resnet.MySequential.add_module", "str"], "methods", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.tools.conv_mtl.Conv2dMtl.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "super", "(", "MySequential", ",", "self", ")", ".", "__init__", "(", ")", "\n", "for", "idx", ",", "module", "in", "enumerate", "(", "args", ")", ":", "\n", "            ", "self", ".", "add_module", "(", "str", "(", "idx", ")", ",", "module", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.convnet.resnet.MySequential.forward": [[282, 286], ["resnet.MySequential._modules.values", "module"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input", ",", "**", "args", ")", ":", "\n", "        ", "for", "module", "in", "self", ".", "_modules", ".", "values", "(", ")", ":", "\n", "            ", "input", "=", "module", "(", "input", ",", "**", "args", ")", "\n", "", "return", "input", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.convnet.resnet.MyDownSampleBlock.__init__": [[289, 295], ["torch.Module.__init__", "resnet.conv1x1", "BN"], "methods", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.tools.conv_mtl.Conv2dMtl.__init__", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.convnet.resnet.conv1x1"], ["    ", "def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "expansion", ",", "stride", ",", "alternative_BN", "=", "False", ")", ":", "\n", "        ", "super", "(", "MyDownSampleBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "BN", "=", "AlternativeBN", "if", "alternative_BN", "else", "nn", ".", "BatchNorm2d", "\n", "self", ".", "alternative_BN", "=", "alternative_BN", "\n", "self", ".", "conv1x1", "=", "conv1x1", "(", "inplanes", ",", "planes", "*", "expansion", ",", "stride", ")", "\n", "self", ".", "bn", "=", "BN", "(", "planes", "*", "expansion", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.convnet.resnet.MyDownSampleBlock.forward": [[296, 303], ["resnet.MyDownSampleBlock.conv1x1", "resnet.MyDownSampleBlock.bn", "resnet.MyDownSampleBlock.bn"], "methods", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.convnet.resnet.conv1x1"], ["", "def", "forward", "(", "self", ",", "x", ",", "if_mixed", "=", "False", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1x1", "(", "x", ")", "\n", "if", "self", ".", "alternative_BN", ":", "\n", "            ", "x", "=", "self", ".", "bn", "(", "x", ",", "if_mixed", "=", "if_mixed", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.convnet.resnet.conv3x3": [[19, 22], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.convnet.resnet.conv1x1": [[24, 27], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"1x1 convolution\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.convnet.resnet.resnet18": [[305, 319], ["resnet.ResNet", "print", "torch.load_url", "ResNet.load_state_dict"], "function", ["None"], ["", "", "def", "resnet18", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-18 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "print", "(", "\"Loading pretrained network\"", ")", "\n", "state_dict", "=", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet18'", "]", ")", "\n", "del", "state_dict", "[", "\"fc.weight\"", "]", "\n", "del", "state_dict", "[", "\"fc.bias\"", "]", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.convnet.resnet.resnet32": [[321, 324], ["resnet.ResNet"], "function", ["None"], ["", "def", "resnet32", "(", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "5", ",", "4", ",", "3", ",", "2", "]", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.convnet.resnet.resnet34": [[326, 336], ["resnet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet34", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-34 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet34'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.convnet.resnet.resnet50": [[338, 348], ["resnet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet50", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-50 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet50'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.convnet.resnet.resnet101": [[350, 365], ["resnet.ResNet", "print", "torch.load_url", "ResNet.load_state_dict"], "function", ["None"], ["", "def", "resnet101", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-101 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "print", "(", "\"Loading pretrained network\"", ")", "\n", "state_dict", "=", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet101'", "]", ")", "\n", "del", "state_dict", "[", "\"fc.weight\"", "]", "\n", "del", "state_dict", "[", "\"fc.bias\"", "]", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "# model.load_state_dict(model_zoo.load_url(model_urls['resnet101']))", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.convnet.resnet.resnet152": [[367, 377], ["resnet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet152", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-152 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet152'", "]", ")", ")", "\n", "", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.convnet.my_resnet.DownsampleStride.__init__": [[18, 21], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.tools.conv_mtl.Conv2dMtl.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n", "=", "2", ")", ":", "\n", "        ", "super", "(", "DownsampleStride", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_n", "=", "n", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.convnet.my_resnet.DownsampleStride.forward": [[22, 24], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "[", "...", ",", ":", ":", "2", ",", ":", ":", "2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.convnet.my_resnet.DownsampleConv.__init__": [[28, 34], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.tools.conv_mtl.Conv2dMtl.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "stride", "=", "2", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.convnet.my_resnet.DownsampleConv.forward": [[36, 38], ["my_resnet.DownsampleConv.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "conv", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.convnet.my_resnet.ResidualBlock.__init__": [[43, 72], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "my_resnet.DownsampleStride", "my_resnet.DownsampleConv"], "methods", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.tools.conv_mtl.Conv2dMtl.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "increase_dim", "=", "False", ",", "last_relu", "=", "False", ",", "downsampling", "=", "\"stride\"", ")", ":", "\n", "        ", "super", "(", "ResidualBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "increase_dim", "=", "increase_dim", "\n", "\n", "if", "increase_dim", ":", "\n", "            ", "first_stride", "=", "2", "\n", "planes", "=", "inplanes", "*", "2", "\n", "", "else", ":", "\n", "            ", "first_stride", "=", "1", "\n", "planes", "=", "inplanes", "\n", "\n", "", "self", ".", "conv_a", "=", "nn", ".", "Conv2d", "(", "\n", "inplanes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "first_stride", ",", "padding", "=", "1", ",", "bias", "=", "False", "\n", ")", "\n", "self", ".", "bn_a", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "self", ".", "conv_b", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn_b", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "if", "increase_dim", ":", "\n", "            ", "if", "downsampling", "==", "\"stride\"", ":", "\n", "                ", "self", ".", "downsampler", "=", "DownsampleStride", "(", ")", "\n", "self", ".", "_need_pad", "=", "True", "\n", "", "else", ":", "\n", "                ", "self", ".", "downsampler", "=", "DownsampleConv", "(", "inplanes", ",", "planes", ")", "\n", "self", ".", "_need_pad", "=", "False", "\n", "\n", "", "", "self", ".", "last_relu", "=", "last_relu", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.convnet.my_resnet.ResidualBlock.pad": [[73, 76], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "x.mul"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "pad", "(", "x", ")", ":", "\n", "        ", "return", "torch", ".", "cat", "(", "(", "x", ",", "x", ".", "mul", "(", "0", ")", ")", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.convnet.my_resnet.ResidualBlock.forward": [[77, 96], ["my_resnet.ResidualBlock.conv_a", "my_resnet.ResidualBlock.bn_a", "torch.relu", "torch.relu", "torch.relu", "my_resnet.ResidualBlock.conv_b", "my_resnet.ResidualBlock.bn_b", "my_resnet.ResidualBlock.downsampler", "torch.relu", "torch.relu", "torch.relu", "my_resnet.ResidualBlock.pad"], "methods", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.convnet.my_resnet.ResidualBlock.pad"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y", "=", "self", ".", "conv_a", "(", "x", ")", "\n", "y", "=", "self", ".", "bn_a", "(", "y", ")", "\n", "y", "=", "F", ".", "relu", "(", "y", ",", "inplace", "=", "True", ")", "\n", "\n", "y", "=", "self", ".", "conv_b", "(", "y", ")", "\n", "y", "=", "self", ".", "bn_b", "(", "y", ")", "\n", "\n", "if", "self", ".", "increase_dim", ":", "\n", "            ", "x", "=", "self", ".", "downsampler", "(", "x", ")", "\n", "if", "self", ".", "_need_pad", ":", "\n", "                ", "x", "=", "self", ".", "pad", "(", "x", ")", "\n", "\n", "", "", "y", "=", "x", "+", "y", "\n", "\n", "if", "self", ".", "last_relu", ":", "\n", "            ", "y", "=", "F", ".", "relu", "(", "y", ",", "inplace", "=", "True", ")", "\n", "\n", "", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.convnet.my_resnet.PreActResidualBlock.__init__": [[101, 125], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "my_resnet.DownsampleStride", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "x.mul"], "methods", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.tools.conv_mtl.Conv2dMtl.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "increase_dim", "=", "False", ",", "last_relu", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "increase_dim", "=", "increase_dim", "\n", "\n", "if", "increase_dim", ":", "\n", "            ", "first_stride", "=", "2", "\n", "planes", "=", "inplanes", "*", "2", "\n", "", "else", ":", "\n", "            ", "first_stride", "=", "1", "\n", "planes", "=", "inplanes", "\n", "\n", "", "self", ".", "bn_a", "=", "nn", ".", "BatchNorm2d", "(", "inplanes", ")", "\n", "self", ".", "conv_a", "=", "nn", ".", "Conv2d", "(", "\n", "inplanes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "first_stride", ",", "padding", "=", "1", ",", "bias", "=", "False", "\n", ")", "\n", "\n", "self", ".", "bn_b", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv_b", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n", "if", "increase_dim", ":", "\n", "            ", "self", ".", "downsample", "=", "DownsampleStride", "(", ")", "\n", "self", ".", "pad", "=", "lambda", "x", ":", "torch", ".", "cat", "(", "(", "x", ",", "x", ".", "mul", "(", "0", ")", ")", ",", "1", ")", "\n", "", "self", ".", "last_relu", "=", "last_relu", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.convnet.my_resnet.PreActResidualBlock.forward": [[126, 145], ["my_resnet.PreActResidualBlock.bn_a", "torch.relu", "torch.relu", "torch.relu", "my_resnet.PreActResidualBlock.conv_a", "my_resnet.PreActResidualBlock.bn_b", "torch.relu", "torch.relu", "torch.relu", "my_resnet.PreActResidualBlock.conv_b", "my_resnet.PreActResidualBlock.downsample", "my_resnet.PreActResidualBlock.pad", "torch.relu", "torch.relu", "torch.relu"], "methods", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.convnet.my_resnet.ResidualBlock.pad"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y", "=", "self", ".", "bn_a", "(", "x", ")", "\n", "y", "=", "F", ".", "relu", "(", "y", ",", "inplace", "=", "True", ")", "\n", "y", "=", "self", ".", "conv_a", "(", "x", ")", "\n", "\n", "y", "=", "self", ".", "bn_b", "(", "y", ")", "\n", "y", "=", "F", ".", "relu", "(", "y", ",", "inplace", "=", "True", ")", "\n", "y", "=", "self", ".", "conv_b", "(", "y", ")", "\n", "\n", "if", "self", ".", "increase_dim", ":", "\n", "            ", "x", "=", "self", ".", "downsample", "(", "x", ")", "\n", "x", "=", "self", ".", "pad", "(", "x", ")", "\n", "\n", "", "y", "=", "x", "+", "y", "\n", "\n", "if", "self", ".", "last_relu", ":", "\n", "            ", "y", "=", "F", ".", "relu", "(", "y", ",", "inplace", "=", "True", ")", "\n", "\n", "", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.convnet.my_resnet.Stage.__init__": [[149, 154], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList"], "methods", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.tools.conv_mtl.Conv2dMtl.__init__"], ["    ", "def", "__init__", "(", "self", ",", "blocks", ",", "block_relu", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "blocks", "=", "nn", ".", "ModuleList", "(", "blocks", ")", "\n", "self", ".", "block_relu", "=", "block_relu", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.convnet.my_resnet.Stage.forward": [[155, 166], ["b", "intermediary_features.append", "torch.relu", "torch.relu", "torch.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "intermediary_features", "=", "[", "]", "\n", "\n", "for", "b", "in", "self", ".", "blocks", ":", "\n", "            ", "x", "=", "b", "(", "x", ")", "\n", "intermediary_features", ".", "append", "(", "x", ")", "\n", "\n", "if", "self", ".", "block_relu", ":", "\n", "                ", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "\n", "", "", "return", "intermediary_features", ",", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.convnet.my_resnet.CifarResNet.__init__": [[174, 257], ["inclearn.utils.LOGGER.LOGGER.info", "torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "my_resnet.CifarResNet._make_layer", "my_resnet.CifarResNet._make_layer", "my_resnet.CifarResNet._make_layer", "Block", "my_resnet.CifarResNet.modules", "ValueError", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "ValueError", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "isinstance", "isinstance", "my_resnet.CifarResNet.modules", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "isinstance", "torch.Sequential", "torch.Sequential", "torch.Sequential", "int", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sequential", "torch.Sequential", "torch.Sequential", "int", "ValueError", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "int", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "int"], "methods", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.tools.conv_mtl.Conv2dMtl.__init__", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.convnet.my_resnet.CifarResNet._make_layer", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.convnet.my_resnet.CifarResNet._make_layer", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.convnet.my_resnet.CifarResNet._make_layer"], ["def", "__init__", "(", "\n", "self", ",", "\n", "n", "=", "5", ",", "\n", "nf", "=", "16", ",", "\n", "channels", "=", "3", ",", "\n", "preact", "=", "False", ",", "\n", "zero_residual", "=", "True", ",", "\n", "pooling_config", "=", "{", "\"type\"", ":", "\"avg\"", "}", ",", "\n", "downsampling", "=", "\"stride\"", ",", "\n", "final_layer", "=", "False", ",", "\n", "all_attentions", "=", "False", ",", "\n", "last_relu", "=", "False", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "\"\"\" Constructor\n        Args:\n          depth: number of layers.\n          num_classes: number of classes\n          base_width: base width\n        \"\"\"", "\n", "if", "kwargs", ":", "\n", "            ", "raise", "ValueError", "(", "\"Unused kwargs: {}.\"", ".", "format", "(", "kwargs", ")", ")", "\n", "\n", "", "self", ".", "all_attentions", "=", "all_attentions", "\n", "logger", ".", "LOGGER", ".", "info", "(", "\"Downsampling type {}\"", ".", "format", "(", "downsampling", ")", ")", "\n", "self", ".", "_downsampling_type", "=", "downsampling", "\n", "self", ".", "last_relu", "=", "last_relu", "\n", "\n", "Block", "=", "ResidualBlock", "if", "not", "preact", "else", "PreActResidualBlock", "\n", "\n", "super", "(", "CifarResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv_1_3x3", "=", "nn", ".", "Conv2d", "(", "channels", ",", "nf", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn_1", "=", "nn", ".", "BatchNorm2d", "(", "nf", ")", "\n", "\n", "self", ".", "stage_1", "=", "self", ".", "_make_layer", "(", "Block", ",", "nf", ",", "increase_dim", "=", "False", ",", "n", "=", "n", ")", "\n", "self", ".", "stage_2", "=", "self", ".", "_make_layer", "(", "Block", ",", "nf", ",", "increase_dim", "=", "True", ",", "n", "=", "n", "-", "1", ")", "\n", "self", ".", "stage_3", "=", "self", ".", "_make_layer", "(", "Block", ",", "2", "*", "nf", ",", "increase_dim", "=", "True", ",", "n", "=", "n", "-", "2", ")", "\n", "self", ".", "stage_4", "=", "Block", "(", "\n", "4", "*", "nf", ",", "increase_dim", "=", "False", ",", "last_relu", "=", "False", ",", "downsampling", "=", "self", ".", "_downsampling_type", "\n", ")", "\n", "\n", "if", "pooling_config", "[", "\"type\"", "]", "==", "\"avg\"", ":", "\n", "            ", "self", ".", "pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Unknown pooling type {}.\"", ".", "format", "(", "pooling_config", "[", "\"type\"", "]", ")", ")", "\n", "\n", "", "self", ".", "out_dim", "=", "4", "*", "nf", "\n", "if", "final_layer", "in", "(", "True", ",", "\"conv\"", ")", ":", "\n", "            ", "self", ".", "final_layer", "=", "nn", ".", "Conv2d", "(", "self", ".", "out_dim", ",", "self", ".", "out_dim", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "", "elif", "isinstance", "(", "final_layer", ",", "dict", ")", ":", "\n", "            ", "if", "final_layer", "[", "\"type\"", "]", "==", "\"one_layer\"", ":", "\n", "                ", "self", ".", "final_layer", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "BatchNorm1d", "(", "self", ".", "out_dim", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "out_dim", ",", "int", "(", "self", ".", "out_dim", "*", "final_layer", "[", "\"reduction_factor\"", "]", ")", ")", "\n", ")", "\n", "self", ".", "out_dim", "=", "int", "(", "self", ".", "out_dim", "*", "final_layer", "[", "\"reduction_factor\"", "]", ")", "\n", "", "elif", "final_layer", "[", "\"type\"", "]", "==", "\"two_layers\"", ":", "\n", "                ", "self", ".", "final_layer", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "BatchNorm1d", "(", "self", ".", "out_dim", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "out_dim", ",", "self", ".", "out_dim", ")", ",", "nn", ".", "BatchNorm1d", "(", "self", ".", "out_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "out_dim", ",", "int", "(", "self", ".", "out_dim", "*", "final_layer", "[", "\"reduction_factor\"", "]", ")", ")", "\n", ")", "\n", "self", ".", "out_dim", "=", "int", "(", "self", ".", "out_dim", "*", "final_layer", "[", "\"reduction_factor\"", "]", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\"Unknown final layer type {}.\"", ".", "format", "(", "final_layer", "[", "\"type\"", "]", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "final_layer", "=", "None", "\n", "\n", "", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "\"fan_out\"", ",", "nonlinearity", "=", "\"relu\"", ")", "\n", "\n", "", "", "if", "zero_residual", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "ResidualBlock", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn_b", ".", "weight", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.convnet.my_resnet.CifarResNet._make_layer": [[258, 276], ["range", "my_resnet.Stage", "layers.append", "layers.append", "Block", "Block"], "methods", ["None"], ["", "", "", "", "def", "_make_layer", "(", "self", ",", "Block", ",", "planes", ",", "increase_dim", "=", "False", ",", "n", "=", "None", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "\n", "if", "increase_dim", ":", "\n", "            ", "layers", ".", "append", "(", "\n", "Block", "(", "\n", "planes", ",", "\n", "increase_dim", "=", "True", ",", "\n", "last_relu", "=", "False", ",", "\n", "downsampling", "=", "self", ".", "_downsampling_type", "\n", ")", "\n", ")", "\n", "planes", "=", "2", "*", "planes", "\n", "\n", "", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "            ", "layers", ".", "append", "(", "Block", "(", "planes", ",", "last_relu", "=", "False", ",", "downsampling", "=", "self", ".", "_downsampling_type", ")", ")", "\n", "\n", "", "return", "Stage", "(", "layers", ",", "block_relu", "=", "self", ".", "last_relu", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.convnet.my_resnet.CifarResNet.last_conv": [[277, 280], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "last_conv", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "stage_4", ".", "conv_b", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.convnet.my_resnet.CifarResNet.set_freeze_by_names": [[281, 289], ["my_resnet.CifarResNet.named_children", "isinstance", "child.parameters"], "methods", ["None"], ["", "def", "set_freeze_by_names", "(", "self", ",", "layer_names", ",", "freeze", "=", "True", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "layer_names", ",", "Iterable", ")", ":", "\n", "            ", "layer_names", "=", "[", "layer_names", "]", "\n", "", "for", "name", ",", "child", "in", "self", ".", "named_children", "(", ")", ":", "\n", "            ", "if", "name", "not", "in", "layer_names", ":", "\n", "                ", "continue", "\n", "", "for", "param", "in", "child", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "not", "freeze", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.convnet.my_resnet.CifarResNet.forward": [[290, 315], ["my_resnet.CifarResNet.stage_4", "my_resnet.CifarResNet.end_features", "my_resnet.CifarResNet.end_features", "my_resnet.CifarResNet.conv_1_3x3", "torch.relu", "torch.relu", "torch.relu", "my_resnet.CifarResNet.stage_1", "my_resnet.CifarResNet.stage_2", "my_resnet.CifarResNet.stage_3", "torch.relu", "torch.relu", "torch.relu", "my_resnet.CifarResNet.bn_1"], "methods", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.convnet.my_resnet.CifarResNet.end_features", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.convnet.my_resnet.CifarResNet.end_features"], ["", "", "", "def", "forward", "(", "self", ",", "x", ",", "pre_pass", "=", "False", ")", ":", "\n", "        ", "if", "not", "pre_pass", ":", "\n", "            ", "x", "=", "self", ".", "conv_1_3x3", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn_1", "(", "x", ")", ",", "inplace", "=", "True", ")", "\n", "feats_s1", ",", "x", "=", "self", ".", "stage_1", "(", "x", ")", "\n", "feats_s2", ",", "x", "=", "self", ".", "stage_2", "(", "x", ")", "\n", "feats_s3", ",", "x", "=", "self", ".", "stage_3", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "feats_s1", "=", "[", "x", "]", "\n", "feats_s2", "=", "[", "x", "]", "\n", "feats_s3", "=", "[", "x", "]", "\n", "# feats_s2, x = self.stage_2(x)", "\n", "# feats_s3, x = self.stage_3(x)", "\n", "", "x", "=", "self", ".", "stage_4", "(", "x", ")", "\n", "\n", "raw_features", "=", "self", ".", "end_features", "(", "x", ")", "\n", "features", "=", "self", ".", "end_features", "(", "F", ".", "relu", "(", "x", ",", "inplace", "=", "False", ")", ")", "\n", "\n", "if", "self", ".", "all_attentions", ":", "\n", "            ", "attentions", "=", "[", "*", "feats_s1", ",", "*", "feats_s2", ",", "*", "feats_s3", ",", "x", "]", "\n", "", "else", ":", "\n", "            ", "attentions", "=", "[", "feats_s1", "[", "-", "1", "]", ",", "feats_s2", "[", "-", "1", "]", ",", "feats_s3", "[", "-", "1", "]", ",", "x", "]", "\n", "\n", "", "return", "{", "\"raw_features\"", ":", "raw_features", ",", "\"features\"", ":", "features", ",", "\"attention\"", ":", "attentions", ",", "\n", "'stage2_feature_map'", ":", "feats_s3", "[", "-", "1", "]", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.convnet.my_resnet.CifarResNet.end_features": [[316, 324], ["my_resnet.CifarResNet.pool", "my_resnet.CifarResNet.view", "my_resnet.CifarResNet.size", "my_resnet.CifarResNet.final_layer"], "methods", ["None"], ["", "def", "end_features", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "pool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "if", "self", ".", "final_layer", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "final_layer", "(", "x", ")", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.convnet.my_resnet.CifarResNet.freeze": [[325, 351], ["my_resnet.CifarResNet.parameters", "isinstance", "my_resnet.CifarResNet.eval", "my_resnet.CifarResNet.train"], "methods", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.base.IncrementalLearner.eval", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.models.base.IncrementalLearner.train"], ["", "def", "freeze", "(", "self", ",", "trainable", "=", "False", ",", "model", "=", "\"all\"", ")", ":", "\n", "        ", "if", "model", "==", "\"all\"", ":", "\n", "            ", "model", "=", "self", "\n", "", "elif", "model", "==", "\"stage4\"", ":", "\n", "            ", "model", "=", "self", ".", "stage_4", "\n", "", "elif", "model", "==", "\"stage1\"", ":", "\n", "            ", "model", "=", "self", ".", "stage_1", "\n", "", "elif", "model", "==", "\"stage2\"", ":", "\n", "            ", "model", "=", "self", ".", "stage_2", "\n", "", "elif", "model", "==", "\"stage3\"", ":", "\n", "            ", "model", "=", "self", ".", "stage_3", "\n", "", "elif", "model", "==", "\"conv1\"", ":", "\n", "            ", "model", "=", "self", ".", "conv_1_3x3", "\n", "", "elif", "model", "==", "\"bn1\"", ":", "\n", "            ", "model", "=", "self", ".", "bn_1", "\n", "", "else", ":", "\n", "            ", "assert", "False", ",", "model", "\n", "", "if", "not", "isinstance", "(", "model", ",", "nn", ".", "Module", ")", ":", "\n", "            ", "return", "self", "\n", "", "for", "param", "in", "model", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "trainable", "\n", "", "if", "not", "trainable", ":", "\n", "            ", "model", ".", "eval", "(", ")", "\n", "", "else", ":", "\n", "            ", "model", ".", "train", "(", ")", "\n", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.convnet.my_resnet.resnet_rebuffi": [[352, 354], ["my_resnet.CifarResNet"], "function", ["None"], ["", "", "def", "resnet_rebuffi", "(", "n", "=", "5", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "CifarResNet", "(", "n", "=", "n", ",", "**", "kwargs", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.tools.conv_mtl.Conv2dMtl.__init__": [[36, 49], ["torch.nn.Conv2d.__init__", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "conv_mtl.Conv2dMtl.reset_mtl_parameters", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.tools.conv_mtl.Conv2dMtl.__init__", "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.tools.conv_mtl.Conv2dMtl.reset_mtl_parameters"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "out_channels", "=", "self", ".", "weight", ".", "shape", "[", "0", "]", "\n", "in_channels", "=", "self", ".", "weight", ".", "shape", "[", "1", "]", "\n", "\n", "self", ".", "mtl_weight", "=", "Parameter", "(", "torch", ".", "ones", "(", "out_channels", ",", "in_channels", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "mtl_bias", "=", "Parameter", "(", "torch", ".", "zeros", "(", "out_channels", ")", ")", "\n", "\n", "self", ".", "_apply_mtl", "=", "False", "\n", "self", ".", "_apply_mtl_bias", "=", "False", "\n", "self", ".", "_apply_bias_on_weights", "=", "False", "\n", "self", ".", "reset_mtl_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.tools.conv_mtl.Conv2dMtl.conv2d_forward": [[50, 66], ["torch.conv2d", "torch.conv2d", "conv_mtl.Conv2dMtl.weight.mul", "conv_mtl.Conv2dMtl.mtl_weight.expand", "weight.add.add.add", "conv_mtl.Conv2dMtl.mtl_bias[].expand"], "methods", ["home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.network.memory.MemoryBank.add"], ["", "def", "conv2d_forward", "(", "self", ",", "input", ",", "weight", ")", ":", "\n", "        ", "if", "self", ".", "apply_mtl", ":", "\n", "            ", "weight", "=", "self", ".", "weight", ".", "mul", "(", "self", ".", "mtl_weight", ".", "expand", "(", "self", ".", "weight", ".", "shape", ")", ")", "\n", "if", "self", ".", "apply_bias_on_weights", ":", "\n", "                ", "weight", "=", "weight", ".", "add", "(", "self", ".", "mtl_bias", "[", "...", ",", "None", ",", "None", ",", "None", "]", ".", "expand", "(", "self", ".", "weight", ".", "shape", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "weight", "=", "self", ".", "weight", "\n", "\n", "", "if", "self", ".", "bias", "and", "self", ".", "apply_mtl", "and", "not", "self", ".", "apply_bias_on_weights", ":", "\n", "            ", "bias", "=", "self", ".", "bias", "+", "self", ".", "mtl_bias", "\n", "", "elif", "self", ".", "apply_mtl_bias", "and", "not", "self", ".", "apply_bias_on_weights", ":", "\n", "            ", "bias", "=", "self", ".", "mtl_bias", "\n", "", "else", ":", "\n", "            ", "bias", "=", "self", ".", "bias", "\n", "\n", "", "return", "F", ".", "conv2d", "(", "input", ",", "weight", ",", "bias", ",", "self", ".", "stride", ",", "self", ".", "padding", ",", "self", ".", "dilation", ",", "self", ".", "groups", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.tools.conv_mtl.Conv2dMtl.reset_mtl_parameters": [[67, 71], ["conv_mtl.Conv2dMtl.mtl_weight.data.uniform_", "conv_mtl.Conv2dMtl.mtl_bias.data.uniform_"], "methods", ["None"], ["", "def", "reset_mtl_parameters", "(", "self", ")", ":", "\n", "        ", "self", ".", "mtl_weight", ".", "data", ".", "uniform_", "(", "1", ",", "1", ")", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "self", ".", "mtl_bias", ".", "data", ".", "uniform_", "(", "0", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.tools.conv_mtl.Conv2dMtl.reset_parameters": [[72, 80], ["conv_mtl.Conv2dMtl.weight.data.uniform_", "math.sqrt", "conv_mtl.Conv2dMtl.bias.data.uniform_"], "methods", ["None"], ["", "", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "n", "=", "self", ".", "in_channels", "\n", "for", "k", "in", "self", ".", "kernel_size", ":", "\n", "            ", "n", "*=", "k", "\n", "", "stdv", "=", "1.", "/", "math", ".", "sqrt", "(", "n", ")", "\n", "self", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "self", ".", "bias", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.tools.conv_mtl.Conv2dMtl.apply_mtl": [[89, 93], ["isinstance"], "methods", ["None"], ["", "@", "apply_mtl", ".", "setter", "\n", "def", "apply_mtl", "(", "self", ",", "b", ")", ":", "\n", "        ", "assert", "isinstance", "(", "b", ",", "bool", ")", ",", "b", "\n", "self", ".", "_apply_mtl", "=", "b", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.tools.conv_mtl.Conv2dMtl.apply_mtl_bias": [[94, 98], ["isinstance"], "methods", ["None"], ["", "@", "apply_mtl_bias", ".", "setter", "\n", "def", "apply_mtl_bias", "(", "self", ",", "b", ")", ":", "\n", "        ", "assert", "isinstance", "(", "b", ",", "bool", ")", ",", "b", "\n", "self", ".", "_apply_mtl_bias", "=", "b", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.tools.conv_mtl.Conv2dMtl.apply_bias_on_weights": [[103, 107], ["isinstance"], "methods", ["None"], ["", "@", "apply_bias_on_weights", ".", "setter", "\n", "def", "apply_bias_on_weights", "(", "self", ",", "b", ")", ":", "\n", "        ", "assert", "isinstance", "(", "b", ",", "bool", ")", ",", "b", "\n", "self", ".", "_apply_bias_on_weights", "=", "b", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.tools.conv_mtl.Conv2dMtl.freeze_convnet": [[108, 112], ["None"], "methods", ["None"], ["", "def", "freeze_convnet", "(", "self", ",", "freeze", ")", ":", "\n", "        ", "self", ".", "weight", ".", "requires_grad", "=", "not", "freeze", "\n", "if", "self", ".", "bias", ":", "\n", "            ", "self", ".", "bias", ".", "requires_grad", "=", "not", "freeze", "\n", "\n"]], "home.repos.pwc.inspect_result.TOM-tym_Learn-to-Imagine.tools.conv_mtl.Conv2dMtl.fuse_mtl_weights": [[113, 122], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "conv_mtl.Conv2dMtl.mtl_weight.expand", "conv_mtl.Conv2dMtl.weight.mul_", "conv_mtl.Conv2dMtl.weight.add_", "conv_mtl.Conv2dMtl.mtl_bias[].expand", "conv_mtl.Conv2dMtl.bias.add_"], "methods", ["None"], ["", "", "def", "fuse_mtl_weights", "(", "self", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "new_mtl_weight", "=", "self", ".", "mtl_weight", ".", "expand", "(", "self", ".", "weight", ".", "shape", ")", "\n", "self", ".", "weight", ".", "mul_", "(", "new_mtl_weight", ")", "\n", "\n", "if", "self", ".", "apply_bias_on_weights", ":", "\n", "                ", "self", ".", "weight", ".", "add_", "(", "self", ".", "mtl_bias", "[", "...", ",", "None", ",", "None", ",", "None", "]", ".", "expand", "(", "self", ".", "weight", ".", "shape", ")", ")", "\n", "", "elif", "self", ".", "bias", ":", "\n", "                ", "self", ".", "bias", ".", "add_", "(", "self", ".", "mtl_bias", ")", "\n", "", "", "", "", ""]]}