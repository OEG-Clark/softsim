{"home.repos.pwc.inspect_result.zwxu064_RANP.None.train_stereo.check_neuron_ratio": [[17, 30], ["model.named_modules", "isinstance", "isinstance"], "function", ["None"], ["def", "check_neuron_ratio", "(", "model", ")", ":", "\n", "  ", "num_layer_2D", ",", "num_layer_3D", "=", "0", ",", "0", "\n", "num_neuron_2D", ",", "num_neuron_3D", "=", "0", ",", "0", "\n", "for", "key", ",", "layer", "in", "model", ".", "named_modules", "(", ")", ":", "\n", "    ", "if", "isinstance", "(", "layer", ",", "(", "nn", ".", "Linear", ",", "nn", ".", "Conv2d", ",", "nn", ".", "ConvTranspose2d", ")", ")", ":", "\n", "      ", "num_layer_2D", "+=", "1", "\n", "num_neuron_2D", "+=", "layer", ".", "out_channels", "\n", "\n", "", "if", "isinstance", "(", "layer", ",", "(", "nn", ".", "Conv3d", ",", "nn", ".", "ConvTranspose3d", ")", ")", ":", "\n", "      ", "num_layer_3D", "+=", "1", "\n", "num_neuron_3D", "+=", "layer", ".", "out_channels", "\n", "\n", "", "", "return", "num_layer_2D", ",", "num_layer_3D", ",", "num_neuron_2D", ",", "num_neuron_3D", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.None.train_stereo.cal_acc": [[32, 115], ["torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "disp_est.size", "range", "range", "dataset.find", "len", "len", "disp_gt.unsqueeze.unsqueeze", "mask.unsqueeze.unsqueeze", "diff.unsqueeze.unsqueeze", "disp_est.size", "range", "range", "disp_est.cpu", "disp_gt.unsqueeze.cpu", "len", "len", "range", "mask[].double().sum", "epe.data.cpu().numpy().item", "accuracies[].update", "print", "valid_area[].double().sum", "mask[].double().sum", "acc.data.cpu().numpy().item", "accuracies[].update", "print", "matplotlib.figure", "matplotlib.imshow", "matplotlib.axis", "matplotlib.savefig", "matplotlib.close", "matplotlib.figure", "matplotlib.imshow", "matplotlib.axis", "matplotlib.savefig", "matplotlib.close", "mask[].double", "epe.data.cpu().numpy", "valid_area[].double", "mask[].double", "acc.data.cpu().numpy", "disp_est[].squeeze().cpu().numpy", "mask[].squeeze().cpu().numpy", "disp_gt[].squeeze().cpu().numpy", "mask[].squeeze().cpu().numpy", "epe.data.cpu", "acc.data.cpu", "disp_est[].squeeze().cpu", "mask[].squeeze().cpu", "disp_gt[].squeeze().cpu", "mask[].squeeze().cpu", "disp_est[].squeeze", "mask[].squeeze", "disp_gt[].squeeze", "mask[].squeeze"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.AverageMeter.update", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.AverageMeter.update"], ["", "def", "cal_acc", "(", "disp_est", ",", "disp_gt", ",", "accuracies", ",", "max_disp", "=", "192", ",", "mask", "=", "None", ",", "dataset", "=", "None", ",", "batch_idx", "=", "-", "1", ",", "names", "=", "None", ")", ":", "\n", "  ", "if", "dataset", ".", "find", "(", "'KITTI'", ")", ">", "-", "1", ":", "\n", "    ", "if", "mask", "is", "None", ":", "\n", "      ", "mask", "=", "(", "disp_gt", ">", "0", ")", ".", "float", "(", ")", "\n", "", "else", ":", "\n", "      ", "mask", "=", "(", "(", "disp_gt", ">", "0", ")", "&", "(", "mask", "==", "1", ")", ")", ".", "float", "(", ")", "\n", "", "", "else", ":", "\n", "    ", "if", "mask", "is", "None", ":", "\n", "      ", "mask", "=", "(", "(", "disp_gt", ">=", "0", ")", "&", "(", "disp_gt", "<", "max_disp", ")", ")", ".", "float", "(", ")", "\n", "", "else", ":", "\n", "      ", "mask", "=", "(", "(", "disp_gt", ">=", "0", ")", "&", "(", "disp_gt", "<", "max_disp", ")", "&", "(", "mask", "==", "1", ")", ")", ".", "float", "(", ")", "\n", "\n", "", "", "threshold_vector", "=", "[", "1.", ",", "2.", ",", "3.", ",", "5.", "]", "\n", "diff", "=", "torch", ".", "abs", "(", "disp_est", ".", "cpu", "(", ")", "-", "disp_gt", ".", "cpu", "(", ")", ")", "\n", "\n", "if", "dataset", "in", "[", "'KITTI2015'", ",", "'KITTI-single'", "]", ":", "\n", "    ", "per_threshold", "=", "0.05", "\n", "", "else", ":", "\n", "    ", "per_threshold", "=", "1.0", "\n", "\n", "", "assert", "(", "len", "(", "threshold_vector", ")", "+", "1", "==", "len", "(", "accuracies", ")", ")", "\n", "current_accuracies", "=", "[", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", "]", "\n", "disp_est_size", "=", "disp_est", ".", "size", "(", ")", "\n", "batch", "=", "disp_est_size", "[", "0", "]", "\n", "\n", "if", "len", "(", "disp_est_size", ")", "==", "3", ":", "\n", "    ", "disp_gt", "=", "disp_gt", ".", "unsqueeze", "(", "1", ")", "\n", "mask", "=", "mask", ".", "unsqueeze", "(", "1", ")", "\n", "diff", "=", "diff", ".", "unsqueeze", "(", "1", ")", "\n", "disp_num", "=", "1", "\n", "", "else", ":", "\n", "    ", "disp_num", "=", "disp_est", ".", "size", "(", "1", ")", "\n", "\n", "# ==== Accuracies", "\n", "", "for", "i", "in", "range", "(", "len", "(", "accuracies", ")", "-", "1", ")", ":", "\n", "    ", "valid_area", "=", "(", "(", "diff", "<=", "threshold_vector", "[", "i", "]", ")", "&", "(", "diff", "<=", "(", "per_threshold", "*", "disp_gt", ")", ")", ")", ".", "float", "(", ")", "*", "mask", "\n", "\n", "# 20190927 one image by one image for average", "\n", "for", "batch_ind", "in", "range", "(", "batch", ")", ":", "\n", "      ", "for", "disp_ind", "in", "range", "(", "disp_num", ")", ":", "# left and/or right", "\n", "        ", "valid_area_sum", "=", "valid_area", "[", "batch_ind", ",", "disp_ind", "]", ".", "double", "(", ")", ".", "sum", "(", ")", "\n", "mask_area_sum", "=", "mask", "[", "batch_ind", ",", "disp_ind", "]", ".", "double", "(", ")", ".", "sum", "(", ")", "\n", "if", "mask_area_sum", "==", "0", ":", "continue", "# Exclude special cases", "\n", "acc", "=", "valid_area_sum", "/", "mask_area_sum", "\n", "current_accuracies", "[", "i", "]", "=", "acc", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "item", "(", ")", "\n", "accuracies", "[", "i", "]", ".", "update", "(", "current_accuracies", "[", "i", "]", ")", "\n", "\n", "# ==== EPE", "\n", "", "", "", "for", "batch_ind", "in", "range", "(", "batch", ")", ":", "\n", "    ", "tmp_epe", "=", "0", "\n", "for", "disp_ind", "in", "range", "(", "disp_num", ")", ":", "# left and/or right", "\n", "      ", "diff_area_sum", "=", "(", "diff", "[", "batch_ind", ",", "disp_ind", "]", "*", "mask", "[", "batch_ind", ",", "disp_ind", "]", ")", ".", "double", "(", ")", ".", "sum", "(", ")", "\n", "mask_area_sum", "=", "mask", "[", "batch_ind", ",", "disp_ind", "]", ".", "double", "(", ")", ".", "sum", "(", ")", "\n", "if", "mask_area_sum", "==", "0", ":", "continue", "# Exclude special cases", "\n", "epe", "=", "diff_area_sum", "/", "mask_area_sum", "\n", "current_accuracies", "[", "4", "]", "=", "epe", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "item", "(", ")", "\n", "tmp_epe", "+=", "current_accuracies", "[", "4", "]", "\n", "accuracies", "[", "4", "]", ".", "update", "(", "current_accuracies", "[", "4", "]", ")", "\n", "\n", "", "if", "False", ":", "\n", "      ", "print", "(", "batch_idx", ",", "batch_ind", ",", "tmp_epe", ")", "\n", "if", "(", "batch_idx", "==", "1", "and", "batch_ind", "==", "0", ")", "or", "(", "batch_idx", "==", "2", "and", "batch_ind", "==", "1", ")", "or", "(", "batch_idx", "==", "8", "and", "batch_ind", "==", "1", ")", "or", "(", "batch_idx", "==", "12", "and", "batch_ind", "==", "0", ")", "or", "(", "batch_idx", "==", "14", "and", "batch_ind", "==", "0", ")", "or", "(", "batch_idx", "==", "15", "and", "batch_ind", "==", "1", ")", ":", "\n", "        ", "print", "(", "names", "[", "batch_ind", "]", ")", "\n", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "imshow", "(", "(", "disp_est", "[", "batch_ind", "]", ".", "squeeze", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "*", "mask", "[", "batch_ind", "]", ".", "squeeze", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "plt", ".", "savefig", "(", "'viz_figures/sceneflow/batch{}_id{}_pred.jpg'", ".", "format", "(", "batch_idx", ",", "batch_ind", ")", ",", "format", "=", "'jpg'", ",", "\n", "bbox_inches", "=", "'tight'", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "imshow", "(", "(", "disp_gt", "[", "batch_ind", "]", ".", "squeeze", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "*", "mask", "[", "batch_ind", "]", ".", "squeeze", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "plt", ".", "savefig", "(", "'viz_figures/sceneflow/batch{}_id{}_gt.jpg'", ".", "format", "(", "batch_idx", ",", "batch_ind", ")", ",", "format", "=", "'jpg'", ",", "\n", "bbox_inches", "=", "'tight'", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n", "", "", "", "return", "accuracies", ",", "current_accuracies", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.None.train_stereo.get_model_state_dict": [[117, 124], ["hasattr", "model.module.state_dict", "model.state_dict"], "function", ["None"], ["", "def", "get_model_state_dict", "(", "model", ")", ":", "\n", "  ", "if", "hasattr", "(", "model", ",", "'module'", ")", ":", "\n", "    ", "model_state_dict", "=", "model", ".", "module", ".", "state_dict", "(", ")", "\n", "", "else", ":", "\n", "    ", "model_state_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "\n", "", "return", "model_state_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.None.train_stereo.load_optimizer_state_dict": [[126, 138], ["optimizer.load_state_dict", "optimizer.state.values", "state.items", "isinstance", "v.cuda", "v.cpu"], "function", ["None"], ["", "def", "load_optimizer_state_dict", "(", "checkpoint", ",", "optimizer", ",", "enable_cuda", "=", "True", ")", ":", "\n", "  ", "optimizer", ".", "load_state_dict", "(", "checkpoint", ")", "\n", "\n", "for", "state", "in", "optimizer", ".", "state", ".", "values", "(", ")", ":", "\n", "    ", "for", "k", ",", "v", "in", "state", ".", "items", "(", ")", ":", "\n", "      ", "if", "isinstance", "(", "v", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "if", "enable_cuda", ":", "\n", "          ", "state", "[", "k", "]", "=", "v", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "          ", "state", "[", "k", "]", "=", "v", ".", "cpu", "(", ")", "\n", "\n", "", "", "", "", "return", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.None.train_stereo.train": [[140, 165], ["model.train", "Variable", "Variable", "Variable", "mask.detach_", "optimizer.zero_grad", "model", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "loss.backward", "optimizer.step", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "F.smooth_l1_loss", "Variable.cuda", "Variable.cuda", "Variable.cuda", "F.smooth_l1_loss", "F.smooth_l1_loss"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.data.train"], ["", "def", "train", "(", "imgL", ",", "imgR", ",", "disp_L", ",", "model", ",", "optimizer", ")", ":", "\n", "  ", "model", ".", "train", "(", ")", "\n", "imgL", "=", "Variable", "(", "torch", ".", "FloatTensor", "(", "imgL", ")", ")", "\n", "imgR", "=", "Variable", "(", "torch", ".", "FloatTensor", "(", "imgR", ")", ")", "\n", "disp_L", "=", "Variable", "(", "torch", ".", "FloatTensor", "(", "disp_L", ")", ")", "\n", "\n", "if", "args", ".", "cuda", ":", "\n", "    ", "imgL", ",", "imgR", ",", "disp_true", "=", "imgL", ".", "cuda", "(", ")", ",", "imgR", ".", "cuda", "(", ")", ",", "disp_L", ".", "cuda", "(", ")", "\n", "\n", "", "mask", "=", "disp_true", "<", "args", ".", "maxdisp", "\n", "mask", ".", "detach_", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "output1", ",", "output2", ",", "output3", "=", "model", "(", "imgL", ",", "imgR", ")", "\n", "output1", "=", "torch", ".", "squeeze", "(", "output1", ",", "1", ")", "\n", "output2", "=", "torch", ".", "squeeze", "(", "output2", ",", "1", ")", "\n", "output3", "=", "torch", ".", "squeeze", "(", "output3", ",", "1", ")", "\n", "loss", "=", "0.5", "*", "F", ".", "smooth_l1_loss", "(", "output1", "[", "mask", "]", ",", "disp_true", "[", "mask", "]", ",", "reduction", "=", "'mean'", ")", "+", "0.7", "*", "F", ".", "smooth_l1_loss", "(", "output2", "[", "mask", "]", ",", "disp_true", "[", "mask", "]", ",", "reduction", "=", "'mean'", ")", "+", "F", ".", "smooth_l1_loss", "(", "output3", "[", "mask", "]", ",", "disp_true", "[", "mask", "]", ",", "reduction", "=", "'mean'", ")", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.None.train_stereo.test": [[167, 188], ["model.eval", "Variable", "Variable", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "len", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "Variable.cuda", "Variable.cuda", "output3.data.cpu", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs"], "function", ["None"], ["", "def", "test", "(", "imgL", ",", "imgR", ",", "disp_true", ",", "model", ")", ":", "\n", "  ", "model", ".", "eval", "(", ")", "\n", "imgL", "=", "Variable", "(", "torch", ".", "FloatTensor", "(", "imgL", ")", ")", "\n", "imgR", "=", "Variable", "(", "torch", ".", "FloatTensor", "(", "imgR", ")", ")", "\n", "\n", "if", "args", ".", "cuda", ":", "\n", "    ", "imgL", ",", "imgR", "=", "imgL", ".", "cuda", "(", ")", ",", "imgR", ".", "cuda", "(", ")", "\n", "\n", "", "mask", "=", "disp_true", "<", "192", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "    ", "output3", ",", "_", "=", "model", "(", "imgL", ",", "imgR", ")", "\n", "\n", "", "output", "=", "torch", ".", "squeeze", "(", "output3", ".", "data", ".", "cpu", "(", ")", ",", "1", ")", "[", ":", ",", "4", ":", ",", ":", "]", "\n", "\n", "if", "len", "(", "disp_true", "[", "mask", "]", ")", "==", "0", ":", "\n", "    ", "loss", "=", "0", "\n", "", "else", ":", "\n", "    ", "loss", "=", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "output", "[", "mask", "]", "-", "disp_true", "[", "mask", "]", ")", ")", "# end-point-error", "\n", "\n", "", "return", "loss", ",", "output3", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.None.train_stereo.validate": [[190, 202], ["len", "enumerate", "aux.utils.AverageMeter", "aux.utils.AverageMeter", "aux.utils.AverageMeter", "aux.utils.AverageMeter", "aux.utils.AverageMeter", "train_stereo.test", "test_loss.item", "train_stereo.cal_acc", "print"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.PSM.main.test", "home.repos.pwc.inspect_result.zwxu064_RANP.None.train_stereo.cal_acc"], ["", "def", "validate", "(", "TestImgLoader", ",", "model", ")", ":", "\n", "  ", "test_len", "=", "len", "(", "TestImgLoader", ")", "\n", "total_test_loss", "=", "0", "\n", "valid_acc", "=", "[", "AverageMeter", "(", ")", ",", "AverageMeter", "(", ")", ",", "AverageMeter", "(", ")", ",", "AverageMeter", "(", ")", ",", "AverageMeter", "(", ")", "]", "\n", "\n", "for", "batch_idx", ",", "(", "imgL", ",", "imgR", ",", "disp_L", ",", "names", ")", "in", "enumerate", "(", "TestImgLoader", ")", ":", "\n", "    ", "test_loss", ",", "output3", "=", "test", "(", "imgL", ",", "imgR", ",", "disp_L", ",", "model", ")", "\n", "total_test_loss", "+=", "test_loss", ".", "item", "(", ")", "\n", "valid_acc", ",", "_", "=", "cal_acc", "(", "output3", "[", ":", ",", "4", ":", "]", ",", "disp_L", ",", "valid_acc", ",", "dataset", "=", "args", ".", "dataset", ",", "batch_idx", "=", "batch_idx", ",", "names", "=", "names", ")", "\n", "print", "(", "'Iter %d/%d test loss = %.3f'", "%", "(", "batch_idx", ",", "test_len", ",", "test_loss", ")", ")", "\n", "\n", "", "return", "valid_acc", ",", "total_test_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.None.train_stereo.adjust_learning_rate": [[204, 210], ["print"], "function", ["None"], ["", "def", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ")", ":", "\n", "  ", "lr", "=", "0.001", "\n", "print", "(", "lr", ")", "\n", "\n", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "    ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.None.train_stereo.main": [[212, 400], ["third_party.PSM.dataloader.listflowfile.dataloader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "stackhourglass", "aux.utils.weight_init", "torch.Adam", "copy.deepcopy", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "third_party.thop.thop.profile.profile", "print", "print", "print", "third_party.PSM.dataloader.SecenFlowLoader.myImageFloder", "third_party.PSM.dataloader.SecenFlowLoader.myImageFloder", "nn.DataParallel.parameters", "copy.deepcopy.cuda", "pruning.pytorch_snip.prune.pruning", "train_stereo.check_neuron_ratio", "print", "os.path.isfile", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "nn.DataParallel.load_state_dict", "train_stereo.load_optimizer_state_dict", "len", "range", "print", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "pruning.pytorch_snip.prune.do_statistics_model", "pruning_related.refine_model_PSM", "pruning_related.refine_model_PSM.cpu", "aux.utils.weight_init", "nn.DataParallel.cuda", "pruning.pytorch_snip.prune.do_statistics_model", "print", "copy.deepcopy", "third_party.thop.thop.profile.profile", "print", "torch.Adam", "sum", "torch.DataParallel", "nn.DataParallel.cuda", "int", "print", "time.time", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "enumerate", "print", "os.path.join", "train_stereo.get_model_state_dict", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "os.path.isdir", "glob.glob.sort", "os.path.exists", "pruning.pytorch_snip.prune.dump_neuron_per_layer", "copy.deepcopy.cuda", "nn.DataParallel.parameters", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "time.time", "train_stereo.train", "print", "train.item", "time.time", "os.path.exists", "os.makedirs", "train_stereo.validate", "print", "glob.glob", "os.path.isfile", "print", "os.path.exists", "int", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "nn.DataParallel.load_state_dict", "train_stereo.validate", "print", "copy.deepcopy", "copy.deepcopy", "p.data.nelement", "[].split", "optim.Adam.state_dict", "nn.DataParallel.cuda", "nn.DataParallel.parameters", "str", "len", "int", "[].split", "len", "len", "len", "args.loadmodel.split", "time.time", "[].split", "model_path.split", "x.split"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.dataloader.listflowfile.dataloader", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.weight_init", "home.repos.pwc.inspect_result.zwxu064_RANP.thop.profile.profile", "home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.prune.pruning", "home.repos.pwc.inspect_result.zwxu064_RANP.None.train_stereo.check_neuron_ratio", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.data.load", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.data.load", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.data.load", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.data.load", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.data.load", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.data.load", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.load_optimizer_state_dict", "home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.prune.do_statistics_model", "home.repos.pwc.inspect_result.zwxu064_RANP.None.pruning_related.refine_model_PSM", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.weight_init", "home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.prune.do_statistics_model", "home.repos.pwc.inspect_result.zwxu064_RANP.thop.profile.profile", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.get_model_state_dict", "home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.prune.dump_neuron_per_layer", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.data.train", "home.repos.pwc.inspect_result.zwxu064_RANP.unet.trainer.UNet3DTrainer.validate", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.data.load", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.data.load", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.data.load", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.data.load", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.data.load", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.data.load", "home.repos.pwc.inspect_result.zwxu064_RANP.unet.trainer.UNet3DTrainer.validate"], ["", "", "def", "main", "(", "args", ")", ":", "\n", "# Dataloader", "\n", "  ", "all_left_img", ",", "all_right_img", ",", "all_left_disp", ",", "test_left_img", ",", "test_right_img", ",", "test_left_disp", "=", "lt", ".", "dataloader", "(", "args", ".", "datapath", ")", "\n", "\n", "# batch_size=12", "\n", "TrainImgLoader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "DA", ".", "myImageFloder", "(", "all_left_img", ",", "all_right_img", ",", "all_left_disp", ",", "True", ")", ",", "\n", "batch_size", "=", "12", ",", "shuffle", "=", "True", ",", "num_workers", "=", "args", ".", "batch", "*", "2", ",", "drop_last", "=", "False", ")", "\n", "\n", "# batch_size=8", "\n", "TestImgLoader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "DA", ".", "myImageFloder", "(", "test_left_img", ",", "test_right_img", ",", "test_left_disp", ",", "False", ")", ",", "\n", "batch_size", "=", "4", ",", "shuffle", "=", "False", ",", "num_workers", "=", "8", ",", "drop_last", "=", "False", ")", "\n", "\n", "# Model", "\n", "model", "=", "stackhourglass", "(", "args", ".", "maxdisp", ")", "\n", "weight_init", "(", "model", ",", "mode", "=", "args", ".", "weight_init", ")", "\n", "\n", "# Optimizer", "\n", "optimizer", "=", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "betas", "=", "(", "0.9", ",", "0.999", ")", ")", "\n", "\n", "# =========================================================", "\n", "# Calculate Profile of Full Model", "\n", "model_full", "=", "copy", ".", "deepcopy", "(", "model", ")", "\n", "profile_input_L", "=", "torch", ".", "randn", "(", "3", ",", "3", ",", "256", ",", "512", ")", ".", "cuda", "(", ")", "\n", "profile_input_R", "=", "torch", ".", "randn", "(", "3", ",", "3", ",", "256", ",", "512", ")", ".", "cuda", "(", ")", "\n", "\n", "flops_full", ",", "params_full", ",", "memory_full", ",", "resource_list", "=", "profile", "(", "model_full", ".", "cuda", "(", ")", ",", "\n", "inputs", "=", "(", "profile_input_L", ",", "profile_input_R", ")", ",", "\n", "verbose", "=", "False", ",", "\n", "resource_list_type", "=", "args", ".", "resource_list_type", ",", "\n", "mode", "=", "args", ".", "statistic_mode", ")", "\n", "\n", "del", "model_full", "\n", "print", "(", "'Full model, flops: {:.4f}G, params: {:.4f}MB, memory: {:.4f}MB'", ".", "format", "(", "flops_full", "/", "1e9", ",", "params_full", "*", "4", "/", "(", "1024", "**", "2", ")", ",", "memory_full", "*", "4", "/", "(", "1024", "**", "2", ")", ")", ")", "\n", "\n", "# Prune including kernels and hidden layers", "\n", "if", "args", ".", "enable_neuron_prune", "or", "args", ".", "enable_hidden_layer_prune", "or", "args", ".", "enable_param_prune", ":", "\n", "    ", "args", ".", "spatial_size", "=", "args", ".", "prune_spatial_size", "\n", "args", ".", "dim", "=", "args", ".", "prune_spatial_size", "\n", "grad_mode", "=", "'raw'", "if", "args", ".", "enable_raw_grad", "else", "'abs'", "\n", "\n", "if", "args", ".", "weight_init", "==", "'xn'", ":", "\n", "      ", "file_path", "=", "'data/stereo/stereo_kernel_hidden_prune_grad_{}.npy'", ".", "format", "(", "grad_mode", ")", "\n", "", "else", ":", "\n", "      ", "file_path", "=", "'data/stereo/stereo_kernel_hidden_prune_grad_init{}_{}.npy'", ".", "format", "(", "args", ".", "weight_init", ",", "grad_mode", ")", "\n", "\n", "", "assert", "(", "args", ".", "batch", "==", "1", "if", "(", "not", "os", ".", "path", ".", "exists", "(", "file_path", ")", ")", "else", "True", ")", "\n", "\n", "outputs", "=", "pruning", "(", "file_path", ",", "model", ",", "TrainImgLoader", ",", "None", ",", "args", ",", "\n", "enable_3dunet", "=", "False", ",", "enable_hidden_sum", "=", "False", ",", "\n", "width", "=", "None", ",", "resource_list", "=", "resource_list", ",", "network_name", "=", "'psm'", ")", "\n", "assert", "outputs", "[", "0", "]", "==", "0", "\n", "\n", "# neuron_mask_clean, hidden_mask = outputs[1], outputs[2]", "\n", "valid_neuron_list_clean", ",", "hidden_mask", "=", "outputs", "[", "1", "]", ",", "outputs", "[", "2", "]", "\n", "\n", "if", "args", ".", "enable_neuron_prune", "or", "args", ".", "enable_param_prune", ":", "\n", "      ", "n_params_org", ",", "n_neurons_org", "=", "do_statistics_model", "(", "model", ")", "\n", "new_model", "=", "refine_model_PSM", "(", "model", ",", "valid_neuron_list_clean", ")", "\n", "\n", "if", "False", ":", "# enable_dump_neuron_per_layer:", "\n", "        ", "dump_neuron_per_layer", "(", "copy", ".", "deepcopy", "(", "model", ")", ",", "copy", ".", "deepcopy", "(", "new_model", ")", ")", "\n", "\n", "", "del", "model", "\n", "model", "=", "new_model", ".", "cpu", "(", ")", "\n", "weight_init", "(", "model", ",", "mode", "=", "args", ".", "weight_init", ")", "\n", "model", "=", "model", ".", "cuda", "(", ")", "\n", "n_params_refined", ",", "n_neurons_refined", "=", "do_statistics_model", "(", "model", ")", "\n", "print", "(", "'Statistics, org, params: {}, neurons: {}; refined, '", "'params: {} ({:.4f}%), neurons: {} ({:.4f}%)'", ".", "format", "(", "n_params_org", ",", "\n", "n_neurons_org", ",", "\n", "n_params_refined", ",", "\n", "n_params_refined", "*", "100", "/", "n_params_org", ",", "\n", "n_neurons_refined", ",", "\n", "n_neurons_refined", "*", "100", "/", "n_neurons_org", ")", ")", "\n", "\n", "# Calculate Flops, Params, Memory of New Model", "\n", "model_flops", "=", "copy", ".", "deepcopy", "(", "model", ")", "\n", "\n", "# display_model_structure(model_flops)", "\n", "\n", "flops", ",", "params", ",", "memory", ",", "_", "=", "profile", "(", "model_flops", ".", "cuda", "(", ")", ",", "\n", "inputs", "=", "(", "profile_input_L", ",", "profile_input_R", ")", ",", "\n", "verbose", "=", "False", ",", "\n", "resource_list_type", "=", "args", ".", "resource_list_type", ",", "\n", "mode", "=", "args", ".", "statistic_mode", ")", "\n", "print", "(", "'New model, flops: {:.4f}G, params: {:.4f}MB, memory: {:.4f}MB'", ".", "format", "(", "flops", "/", "1e9", ",", "params", "*", "4", "/", "(", "1024", "**", "2", ")", ",", "memory", "*", "4", "/", "(", "1024", "**", "2", ")", ")", ")", "\n", "del", "model_flops", ",", "profile_input_L", ",", "profile_input_R", "\n", "\n", "# For new model", "\n", "optimizer", "=", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "betas", "=", "(", "0.9", ",", "0.999", ")", ")", "\n", "# =========================================================", "\n", "\n", "# print(model)", "\n", "", "", "if", "False", ":", "\n", "    ", "num_layer_2D", ",", "num_layer_3D", ",", "num_neuron_2D", ",", "num_neuron_3D", "=", "check_neuron_ratio", "(", "model", ")", "\n", "print", "(", "'Num layer 2D/3D:'", ",", "num_layer_2D", ",", "num_layer_3D", ",", "\n", "', num neuron 2D/3D:'", ",", "num_neuron_2D", ",", "num_neuron_3D", ")", "\n", "\n", "", "print", "(", "args", ")", "\n", "print", "(", "'Number of model parameters: {}'", ".", "format", "(", "sum", "(", "[", "p", ".", "data", ".", "nelement", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "]", ")", ")", ")", "\n", "\n", "# Resume", "\n", "if", "args", ".", "loadmodel", "is", "not", "None", "and", "os", ".", "path", ".", "isfile", "(", "args", ".", "loadmodel", ")", ":", "\n", "    ", "state_dict", "=", "torch", ".", "load", "(", "args", ".", "loadmodel", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", "[", "'model'", "]", ")", "\n", "optimizer", "=", "load_optimizer_state_dict", "(", "state_dict", "[", "'optimizer'", "]", ",", "optimizer", ",", "enable_cuda", "=", "args", ".", "cuda", ")", "\n", "\n", "", "if", "args", ".", "enable_train", ":", "\n", "    ", "if", "args", ".", "cuda", ":", "\n", "      ", "model", "=", "nn", ".", "DataParallel", "(", "model", ")", "\n", "model", ".", "cuda", "(", ")", "\n", "\n", "# Train", "\n", "", "train_duration", "=", "0", "\n", "epoch_start", "=", "int", "(", "args", ".", "loadmodel", ".", "split", "(", "'.'", ")", "[", "-", "2", "]", ".", "split", "(", "'_'", ")", "[", "-", "1", "]", ")", "if", "(", "args", ".", "loadmodel", "is", "not", "None", ")", "else", "0", "\n", "train_len", "=", "len", "(", "TrainImgLoader", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "epoch_start", "+", "1", ",", "args", ".", "epochs", "+", "1", ")", ":", "\n", "      ", "print", "(", "'This is %d-th epoch'", "%", "(", "epoch", ")", ")", "\n", "start_full_time", "=", "time", ".", "time", "(", ")", "\n", "torch", ".", "manual_seed", "(", "epoch", ")", "\n", "\n", "if", "args", ".", "cuda", ":", "\n", "        ", "torch", ".", "cuda", ".", "manual_seed", "(", "epoch", ")", "\n", "\n", "", "total_train_loss", "=", "0", "\n", "# adjust_learning_rate(optimizer, epoch)", "\n", "\n", "for", "batch_idx", ",", "(", "imgL_crop", ",", "imgR_crop", ",", "disp_crop_L", ",", "_", ")", "in", "enumerate", "(", "TrainImgLoader", ")", ":", "\n", "        ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "loss", "=", "train", "(", "imgL_crop", ",", "imgR_crop", ",", "disp_crop_L", ",", "model", ",", "optimizer", ")", "\n", "print", "(", "'Iter %d/%d training loss = %.3f , time = %.2f'", "%", "(", "batch_idx", ",", "train_len", ",", "loss", ",", "time", ".", "time", "(", ")", "-", "start_time", ")", ")", "\n", "total_train_loss", "+=", "loss", ".", "item", "(", ")", "\n", "\n", "", "train_duration", "+=", "time", ".", "time", "(", ")", "-", "start_full_time", "\n", "print", "(", "'Epoch %d total training loss = %.3f'", "%", "(", "epoch", ",", "total_train_loss", "/", "len", "(", "TrainImgLoader", ")", ")", ")", "\n", "\n", "# SAVE", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "savemodel", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "savemodel", ")", "\n", "\n", "", "savefilename", "=", "os", ".", "path", ".", "join", "(", "args", ".", "savemodel", ",", "'checkpoint_'", "+", "str", "(", "epoch", ")", "+", "'.tar'", ")", "\n", "model_state_dict", "=", "get_model_state_dict", "(", "model", ")", "\n", "torch", ".", "save", "(", "{", "'epoch'", ":", "epoch", ",", "\n", "'model'", ":", "model_state_dict", ",", "\n", "'train_loss'", ":", "total_train_loss", "/", "len", "(", "TrainImgLoader", ")", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", "}", ",", "savefilename", ")", "\n", "\n", "# Valid", "\n", "if", "epoch", ">=", "args", ".", "valid_min_epoch", ":", "\n", "        ", "valid_acc", ",", "total_test_loss", "=", "validate", "(", "TestImgLoader", ",", "model", ")", "\n", "print", "(", "'Epoch: {}, acc1: {:.4f}, acc2: {:.4f}, acc3: {:.4f}, acc5: {:.4f}, epe: {:.4f}; test loss: {:.4f}'", ".", "format", "(", "epoch", ",", "valid_acc", "[", "0", "]", ".", "avg", ",", "valid_acc", "[", "1", "]", ".", "avg", ",", "valid_acc", "[", "2", "]", ".", "avg", ",", "valid_acc", "[", "3", "]", ".", "avg", ",", "\n", "valid_acc", "[", "4", "]", ".", "avg", ",", "total_test_loss", "/", "len", "(", "TestImgLoader", ")", ")", ")", "\n", "\n", "", "", "print", "(", "'Full training time = %.2f HR'", "%", "(", "train_duration", "/", "3600", ")", ")", "\n", "", "elif", "args", ".", "enable_test", ":", "\n", "    ", "if", "os", ".", "path", ".", "isdir", "(", "args", ".", "loadmodel", ")", ":", "\n", "      ", "model_paths", "=", "glob", ".", "glob", "(", "'{}/checkpoint_*.tar'", ".", "format", "(", "args", ".", "loadmodel", ")", ")", "\n", "", "elif", "os", ".", "path", ".", "isfile", "(", "args", ".", "loadmodel", ")", ":", "\n", "      ", "model_paths", "=", "[", "args", ".", "loadmodel", "]", "\n", "", "else", ":", "\n", "      ", "model_paths", "=", "[", "]", "\n", "\n", "", "model_paths", ".", "sort", "(", "key", "=", "lambda", "x", ":", "int", "(", "x", ".", "split", "(", "'_'", ")", "[", "-", "1", "]", ".", "split", "(", "'.tar'", ")", "[", "0", "]", ")", ")", "\n", "# print(model_paths)", "\n", "\n", "for", "model_path", "in", "model_paths", ":", "\n", "      ", "print", "(", "model_path", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "model_path", ")", "\n", "current_epoch", "=", "int", "(", "model_path", ".", "split", "(", "'_'", ")", "[", "-", "1", "]", ".", "split", "(", "'.tar'", ")", "[", "0", "]", ")", "\n", "if", "current_epoch", "<=", "10", ":", "continue", "\n", "state_dict", "=", "torch", ".", "load", "(", "model_path", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", "[", "'model'", "]", ")", "\n", "model", ".", "cuda", "(", ")", "if", "args", ".", "cuda", "else", "None", "\n", "valid_acc", ",", "total_test_loss", "=", "validate", "(", "TestImgLoader", ",", "model", ")", "\n", "print", "(", "'Epoch: {}, acc1: {:.4f}, acc2: {:.4f}, acc3: {:.4f}, acc5: {:.4f}, epe: {:.4f}; test loss: {:.4f}'", ".", "format", "(", "current_epoch", ",", "valid_acc", "[", "0", "]", ".", "avg", ",", "valid_acc", "[", "1", "]", ".", "avg", ",", "valid_acc", "[", "2", "]", ".", "avg", ",", "valid_acc", "[", "3", "]", ".", "avg", ",", "\n", "valid_acc", "[", "4", "]", ".", "avg", ",", "total_test_loss", "/", "len", "(", "TestImgLoader", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.None.pruning_related.refine_model": [[6, 89], ["copy.deepcopy", "copy.deepcopy.named_modules", "len", "isinstance", "isinstance", "isinstance", "weight_mask.size", "layer.weight.size", "layer.weight.size", "weight_mask.size", "layer.weight.size", "torch.Parameter", "torch.Parameter", "layer.running_mean.new_zeros", "layer.running_mean.new_ones", "torch.Parameter", "bias_mask.size", "layer.bias.size", "layer.weight.new_zeros", "torch.Parameter", "layer.weight.new_zeros", "torch.Parameter", "layer.weight.new_zeros", "torch.Parameter", "layer.bias.new_zeros", "layer.bias.new_zeros", "layer.bias.new_zeros", "idx_of_concat.is_integer", "int", "weight_mask.view().sum", "weight_mask.view", "weight_mask_concat.view().sum", "weight_mask_concat.view", "weight_mask_concat.size"], "function", ["None"], ["def", "refine_model", "(", "model", ",", "neuron_mask_clean", ",", "enable_3dunet", "=", "False", ",", "width", "=", "2", ",", "network_name", "=", "'3dunet'", ")", ":", "\n", "  ", "refined_model", "=", "copy", ".", "deepcopy", "(", "model", ")", "\n", "layer_idx", "=", "0", "\n", "former_conv_valid_neurons", "=", "0", "\n", "\n", "n_layers", "=", "len", "(", "neuron_mask_clean", ")", "//", "2", "\n", "# 1:last layer, 2:first two layers, 4:2*2, double_conv, encoders+decoders", "\n", "number_of_encoders", "=", "(", "n_layers", "-", "1", "-", "width", ")", "//", "(", "2", "*", "width", ")", "\n", "last_layer_last_encoder", "=", "number_of_encoders", "*", "width", "+", "width", "-", "1", "\n", "\n", "for", "key", ",", "layer", "in", "refined_model", ".", "named_modules", "(", ")", ":", "\n", "    ", "if", "isinstance", "(", "layer", ",", "(", "nn", ".", "Linear", ",", "nn", ".", "Conv2d", ",", "nn", ".", "Conv3d", ",", "\n", "nn", ".", "ConvTranspose2d", ",", "nn", ".", "ConvTranspose3d", ")", ")", ":", "\n", "      ", "weight_mask", "=", "neuron_mask_clean", "[", "2", "*", "layer_idx", "]", "\n", "bias_mask", "=", "neuron_mask_clean", "[", "2", "*", "layer_idx", "+", "1", "]", "\n", "\n", "assert", "weight_mask", ".", "size", "(", ")", "==", "layer", ".", "weight", ".", "size", "(", ")", "\n", "assert", "bias_mask", ".", "size", "(", ")", "==", "layer", ".", "bias", ".", "size", "(", ")", "if", "(", "bias_mask", "is", "not", "None", ")", "else", "True", "\n", "\n", "neuron_no", ",", "c_in", ",", "h", ",", "w", ",", "d", "=", "weight_mask", ".", "size", "(", ")", "\n", "valid_neuron_no", "=", "(", "weight_mask", ".", "view", "(", "neuron_no", ",", "-", "1", ")", ".", "sum", "(", "1", ")", ">", "0", ")", ".", "sum", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "item", "(", ")", "\n", "\n", "# Redefine weight and bias if neurons are pruned", "\n", "if", "(", "valid_neuron_no", "!=", "neuron_no", ")", "or", "(", "former_conv_valid_neurons", "!=", "c_in", ")", ":", "\n", "        ", "if", "enable_3dunet", "or", "(", "network_name", "==", "'3dunet'", ")", ":", "\n", "          ", "if", "True", ":", "\n", "            ", "idx_of_concat", "=", "(", "(", "layer_idx", "-", "1", ")", "-", "last_layer_last_encoder", ")", "/", "width", "\n", "if", "idx_of_concat", ".", "is_integer", "(", ")", "and", "(", "idx_of_concat", ">=", "0", ")", "and", "(", "(", "layer_idx", "-", "1", ")", "<", "n_layers", "-", "1", "-", "width", ")", ":", "\n", "              ", "concat_layer_idx", "=", "(", "layer_idx", "-", "1", ")", "-", "width", "-", "idx_of_concat", "*", "2", "*", "width", "\n", "concat_layer_idx", "=", "int", "(", "concat_layer_idx", ")", "\n", "weight_mask_concat", "=", "neuron_mask_clean", "[", "concat_layer_idx", "*", "2", "]", "\n", "", "else", ":", "\n", "              ", "weight_mask_concat", "=", "None", "\n", "", "", "else", ":", "\n", "            ", "if", "layer_idx", "==", "8", ":", "\n", "              ", "weight_mask_concat", "=", "neuron_mask_clean", "[", "5", "*", "2", "]", "\n", "", "elif", "layer_idx", "==", "10", ":", "\n", "              ", "weight_mask_concat", "=", "neuron_mask_clean", "[", "3", "*", "2", "]", "\n", "", "elif", "layer_idx", "==", "12", ":", "\n", "              ", "weight_mask_concat", "=", "neuron_mask_clean", "[", "1", "*", "2", "]", "\n", "", "else", ":", "\n", "              ", "weight_mask_concat", "=", "None", "\n", "\n", "", "", "if", "weight_mask_concat", "is", "not", "None", ":", "\n", "            ", "valid_neuron_no_concat", "=", "(", "weight_mask_concat", ".", "view", "(", "weight_mask_concat", ".", "size", "(", "0", ")", ",", "-", "1", ")", ".", "sum", "(", "1", ")", ">", "0", ")", ".", "sum", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "item", "(", ")", "\n", "in_c_refined", "=", "former_conv_valid_neurons", "+", "valid_neuron_no_concat", "\n", "", "else", ":", "\n", "            ", "in_c_refined", "=", "c_in", "if", "(", "former_conv_valid_neurons", "==", "0", ")", "else", "former_conv_valid_neurons", "\n", "", "", "else", ":", "\n", "          ", "in_c_refined", "=", "c_in", "if", "(", "former_conv_valid_neurons", "==", "0", ")", "else", "former_conv_valid_neurons", "\n", "\n", "", "layer", ".", "weight", "=", "nn", ".", "Parameter", "(", "layer", ".", "weight", ".", "new_zeros", "(", "valid_neuron_no", ",", "in_c_refined", ",", "h", ",", "w", ",", "d", ")", ",", "requires_grad", "=", "True", ")", "\n", "layer", ".", "out_channels", "=", "valid_neuron_no", "\n", "layer", ".", "in_channels", "=", "in_c_refined", "\n", "\n", "if", "layer", ".", "bias", "is", "not", "None", ":", "\n", "          ", "layer", ".", "bias", "=", "nn", ".", "Parameter", "(", "layer", ".", "bias", ".", "new_zeros", "(", "valid_neuron_no", ")", ",", "requires_grad", "=", "True", ")", "\n", "\n", "", "", "former_conv_valid_neurons", "=", "valid_neuron_no", "\n", "layer_idx", "+=", "1", "\n", "\n", "# Change corresponding batch norm when necessary", "\n", "", "if", "isinstance", "(", "layer", ",", "(", "nn", ".", "BatchNorm1d", ",", "nn", ".", "BatchNorm2d", ",", "nn", ".", "BatchNorm3d", ")", ")", ":", "\n", "      ", "n_neurons", "=", "layer", ".", "weight", ".", "size", "(", "0", ")", "\n", "if", "(", "former_conv_valid_neurons", ">", "0", ")", "and", "(", "n_neurons", "!=", "former_conv_valid_neurons", ")", ":", "\n", "        ", "layer", ".", "weight", "=", "nn", ".", "Parameter", "(", "layer", ".", "weight", ".", "new_zeros", "(", "former_conv_valid_neurons", ")", ",", "requires_grad", "=", "True", ")", "\n", "layer", ".", "num_features", "=", "former_conv_valid_neurons", "\n", "layer", ".", "running_mean", "=", "layer", ".", "running_mean", ".", "new_zeros", "(", "former_conv_valid_neurons", ")", "\n", "layer", ".", "running_var", "=", "layer", ".", "running_mean", ".", "new_ones", "(", "former_conv_valid_neurons", ")", "\n", "\n", "if", "layer", ".", "bias", "is", "not", "None", ":", "\n", "          ", "layer", ".", "bias", "=", "nn", ".", "Parameter", "(", "layer", ".", "bias", ".", "new_zeros", "(", "former_conv_valid_neurons", ")", ",", "requires_grad", "=", "True", ")", "\n", "\n", "", "", "", "if", "isinstance", "(", "layer", ",", "(", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "      ", "n_neurons", "=", "layer", ".", "weight", ".", "size", "(", "0", ")", "\n", "if", "(", "former_conv_valid_neurons", ">", "0", ")", "and", "(", "n_neurons", "!=", "former_conv_valid_neurons", ")", ":", "\n", "        ", "layer", ".", "weight", "=", "nn", ".", "Parameter", "(", "layer", ".", "weight", ".", "new_zeros", "(", "former_conv_valid_neurons", ")", ",", "requires_grad", "=", "True", ")", "\n", "layer", ".", "num_channels", "=", "former_conv_valid_neurons", "\n", "\n", "if", "layer", ".", "bias", "is", "not", "None", ":", "\n", "          ", "layer", ".", "bias", "=", "nn", ".", "Parameter", "(", "layer", ".", "bias", ".", "new_zeros", "(", "former_conv_valid_neurons", ")", ",", "requires_grad", "=", "True", ")", "\n", "\n", "", "", "", "", "return", "refined_model", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.None.pruning_related.refine_model_classification": [[92, 208], ["copy.deepcopy", "range", "copy.deepcopy.named_modules", "len", "int", "valid_neuron_list.append", "isinstance", "isinstance", "isinstance", "len", "layer.weight.size", "layer.weight.size", "weight_mask.size", "layer.weight.size", "weight_mask.size", "weight_mask.size", "hasattr", "torch.Parameter", "layer.running_mean.new_zeros", "layer.running_mean.new_ones", "torch.Parameter", "bias_mask.size", "layer.bias.size", "weight_mask.size", "hasattr", "pruning_related.refine_model_classification.searching_connections"], "function", ["None"], ["", "def", "refine_model_classification", "(", "model", ",", "neuron_mask_clean", ",", "network_name", ",", "network_connection_dict", "=", "None", ",", "\n", "enable_raw_grad", "=", "False", ")", ":", "\n", "  ", "refined_model", "=", "copy", ".", "deepcopy", "(", "model", ")", "\n", "layer_idx", "=", "0", "\n", "former_conv_valid_neurons", "=", "0", "\n", "n_layers", "=", "len", "(", "neuron_mask_clean", ")", "//", "2", "\n", "valid_neuron_list", "=", "[", "]", "\n", "\n", "# Valid neuron number in every layer", "\n", "for", "idx", "in", "range", "(", "n_layers", ")", ":", "\n", "    ", "current_layer", "=", "neuron_mask_clean", "[", "2", "*", "idx", "]", "\n", "valid_neuron", "=", "int", "(", "(", "current_layer", ".", "view", "(", "current_layer", ".", "size", "(", "0", ")", ",", "-", "1", ")", ".", "sum", "(", "1", ")", ">", "0", ")", ".", "sum", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "item", "(", ")", ")", "\n", "valid_neuron_list", ".", "append", "(", "valid_neuron", ")", "\n", "\n", "", "for", "key", ",", "layer", "in", "refined_model", ".", "named_modules", "(", ")", ":", "\n", "    ", "if", "isinstance", "(", "layer", ",", "(", "nn", ".", "Linear", ",", "nn", ".", "Conv2d", ",", "nn", ".", "Conv3d", ",", "\n", "nn", ".", "ConvTranspose2d", ",", "nn", ".", "ConvTranspose3d", ")", ")", ":", "\n", "      ", "weight_mask", "=", "neuron_mask_clean", "[", "2", "*", "layer_idx", "]", "\n", "bias_mask", "=", "neuron_mask_clean", "[", "2", "*", "layer_idx", "+", "1", "]", "\n", "valid_neuron_no", "=", "valid_neuron_list", "[", "layer_idx", "]", "\n", "\n", "assert", "weight_mask", ".", "size", "(", ")", "==", "layer", ".", "weight", ".", "size", "(", ")", "\n", "assert", "bias_mask", ".", "size", "(", ")", "==", "layer", ".", "bias", ".", "size", "(", ")", "if", "(", "bias_mask", "is", "not", "None", ")", "else", "True", "\n", "\n", "weight_len", "=", "len", "(", "weight_mask", ".", "size", "(", ")", ")", "\n", "if", "weight_len", "==", "5", ":", "\n", "        ", "neuron_no", ",", "c_in", ",", "h", ",", "w", ",", "d", "=", "weight_mask", ".", "size", "(", ")", "\n", "", "elif", "weight_len", "==", "2", ":", "\n", "        ", "neuron_no", ",", "c_in", "=", "weight_mask", ".", "size", "(", ")", "\n", "\n", "# Redefine weight and bias if neurons are pruned", "\n", "# Debug : the last one is a patch since conv layer having groups many has valid_neuron_no == neuron_no if all retained", "\n", "", "if", "(", "valid_neuron_no", "!=", "neuron_no", ")", "or", "(", "former_conv_valid_neurons", "!=", "c_in", ")", "or", "hasattr", "(", "layer", ",", "'groups'", ")", ":", "\n", "        ", "in_c_refined", "=", "c_in", "if", "(", "layer_idx", "==", "0", ")", "else", "valid_neuron_list", "[", "layer_idx", "-", "1", "]", "\n", "\n", "if", "hasattr", "(", "layer", ",", "'groups'", ")", "and", "(", "layer", ".", "groups", ">", "1", ")", ":", "\n", "# Just a patch for mobilenetv2 MNMG, too low acc. so increase valid_neuron_no to increase", "\n", "          ", "if", "enable_raw_grad", ":", "\n", "            ", "valid_neuron_no_tmp", "=", "int", "(", "in_c_refined", "*", "(", "np", ".", "ceil", "(", "valid_neuron_no", "/", "in_c_refined", ")", ")", ")", "\n", "# In case that FLOPs is larger than the full one by using just ceil", "\n", "if", "valid_neuron_no_tmp", ">", "layer", ".", "out_channels", ":", "\n", "              ", "valid_neuron_no_tmp", "=", "int", "(", "in_c_refined", "*", "(", "np", ".", "floor", "(", "valid_neuron_no", "/", "in_c_refined", ")", ")", ")", "\n", "", "valid_neuron_no", "=", "valid_neuron_no_tmp", "\n", "", "else", ":", "\n", "# Debug, note that it makes valid_neuron_no useless but only depends on factor * groups, leading to many 1s and low acc.", "\n", "# Note that out_channels = org_factor * groups", "\n", "            ", "org_factor", "=", "layer", ".", "out_channels", "//", "layer", ".", "in_channels", "# Zhiwei : When having groups, in_c and o_c must be dividable by groups", "\n", "valid_neuron_no", "=", "int", "(", "org_factor", "*", "in_c_refined", ")", "\n", "\n", "", "layer", ".", "groups", "=", "in_c_refined", "\n", "\n", "if", "weight_len", "==", "5", ":", "\n", "            ", "layer", ".", "weight", "=", "nn", ".", "Parameter", "(", "layer", ".", "weight", ".", "new_zeros", "(", "valid_neuron_no", ",", "1", ",", "h", ",", "w", ",", "d", ")", ",", "requires_grad", "=", "True", ")", "\n", "", "elif", "weight_len", "==", "2", ":", "\n", "            ", "layer", ".", "weight", "=", "nn", ".", "Parameter", "(", "layer", ".", "weight", ".", "new_zeros", "(", "valid_neuron_no", ",", "1", ")", ",", "requires_grad", "=", "True", ")", "\n", "layer", ".", "in_features", "=", "in_c_refined", "\n", "layer", ".", "out_features", "=", "valid_neuron_no", "\n", "", "", "else", ":", "\n", "# Check if concate or sum with other layers, such as residual type", "\n", "# This is sum type:", "\n", "# connected_layer_idx_list = searching_connections(layer_idx, network_connection_dict)", "\n", "          ", "connected_layer_idx_list", "=", "[", "layer_idx", "]", "\n", "\n", "def", "searching_connections", "(", "layer_idx", ",", "network_connection_dict", ",", "connected_layer_idx_list", ")", ":", "\n", "            ", "for", "connected_layer_idx", "in", "network_connection_dict", "[", "str", "(", "layer_idx", ")", "]", "[", "'connection_layer'", "]", ":", "\n", "              ", "connected_layer_idx_list", ".", "append", "(", "connected_layer_idx", ")", "\n", "if", "connected_layer_idx", ">", "layer_idx", ":", "\n", "                ", "connected_layer_idx_list", "=", "searching_connections", "(", "connected_layer_idx", ",", "\n", "network_connection_dict", ",", "\n", "connected_layer_idx_list", ")", "\n", "", "", "return", "connected_layer_idx_list", "\n", "\n", "", "connected_layer_idx_list", "=", "searching_connections", "(", "layer_idx", ",", "network_connection_dict", ",", "connected_layer_idx_list", ")", "\n", "connected_layer_idx_list", "=", "np", ".", "unique", "(", "connected_layer_idx_list", ")", "\n", "valid_neuron_no", "=", "int", "(", "np", ".", "max", "(", "[", "valid_neuron_list", "[", "v", "]", "for", "v", "in", "connected_layer_idx_list", "]", ")", ")", "\n", "\n", "if", "weight_len", "==", "5", ":", "\n", "            ", "layer", ".", "weight", "=", "nn", ".", "Parameter", "(", "layer", ".", "weight", ".", "new_zeros", "(", "valid_neuron_no", ",", "in_c_refined", ",", "h", ",", "w", ",", "d", ")", ",", "requires_grad", "=", "True", ")", "\n", "", "elif", "weight_len", "==", "2", ":", "\n", "            ", "layer", ".", "weight", "=", "nn", ".", "Parameter", "(", "layer", ".", "weight", ".", "new_zeros", "(", "valid_neuron_no", ",", "in_c_refined", ")", ",", "requires_grad", "=", "True", ")", "\n", "layer", ".", "in_features", "=", "in_c_refined", "\n", "layer", ".", "out_features", "=", "valid_neuron_no", "\n", "\n", "", "", "valid_neuron_list", "[", "layer_idx", "]", "=", "valid_neuron_no", "\n", "layer", ".", "in_channels", "=", "in_c_refined", "\n", "layer", ".", "out_channels", "=", "valid_neuron_no", "\n", "\n", "if", "layer", ".", "bias", "is", "not", "None", ":", "\n", "          ", "layer", ".", "bias", "=", "nn", ".", "Parameter", "(", "layer", ".", "bias", ".", "new_zeros", "(", "valid_neuron_no", ")", ",", "requires_grad", "=", "True", ")", "\n", "\n", "", "", "former_conv_valid_neurons", "=", "valid_neuron_no", "\n", "layer_idx", "+=", "1", "\n", "\n", "# Change corresponding batch norm when necessary", "\n", "", "if", "isinstance", "(", "layer", ",", "(", "nn", ".", "BatchNorm1d", ",", "nn", ".", "BatchNorm2d", ",", "nn", ".", "BatchNorm3d", ")", ")", ":", "\n", "      ", "n_neurons", "=", "layer", ".", "weight", ".", "size", "(", "0", ")", "\n", "if", "(", "former_conv_valid_neurons", ">", "0", ")", "and", "(", "n_neurons", "!=", "former_conv_valid_neurons", ")", ":", "\n", "        ", "layer", ".", "weight", "=", "nn", ".", "Parameter", "(", "layer", ".", "weight", ".", "new_zeros", "(", "former_conv_valid_neurons", ")", ",", "requires_grad", "=", "True", ")", "\n", "layer", ".", "num_features", "=", "former_conv_valid_neurons", "\n", "layer", ".", "running_mean", "=", "layer", ".", "running_mean", ".", "new_zeros", "(", "former_conv_valid_neurons", ")", "\n", "layer", ".", "running_var", "=", "layer", ".", "running_mean", ".", "new_ones", "(", "former_conv_valid_neurons", ")", "\n", "\n", "if", "layer", ".", "bias", "is", "not", "None", ":", "\n", "          ", "layer", ".", "bias", "=", "nn", ".", "Parameter", "(", "layer", ".", "bias", ".", "new_zeros", "(", "former_conv_valid_neurons", ")", ",", "requires_grad", "=", "True", ")", "\n", "\n", "", "", "", "if", "isinstance", "(", "layer", ",", "(", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "      ", "n_neurons", "=", "layer", ".", "weight", ".", "size", "(", "0", ")", "\n", "if", "(", "former_conv_valid_neurons", ">", "0", ")", "and", "(", "n_neurons", "!=", "former_conv_valid_neurons", ")", ":", "\n", "        ", "layer", ".", "weight", "=", "nn", ".", "Parameter", "(", "layer", ".", "weight", ".", "new_zeros", "(", "former_conv_valid_neurons", ")", ",", "requires_grad", "=", "True", ")", "\n", "layer", ".", "num_channels", "=", "former_conv_valid_neurons", "\n", "\n", "if", "layer", ".", "bias", "is", "not", "None", ":", "\n", "          ", "layer", ".", "bias", "=", "nn", ".", "Parameter", "(", "layer", ".", "bias", ".", "new_zeros", "(", "former_conv_valid_neurons", ")", ",", "requires_grad", "=", "True", ")", "\n", "\n", "", "", "", "", "return", "refined_model", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.None.pruning_related.refine_model_I3D": [[210, 299], ["copy.deepcopy", "range", "copy.deepcopy.named_modules", "zip", "len", "current_layer.size", "out_c_loc.float().sum", "in_c_loc.float().sum", "valid_neuron_list.append", "valid_neuron_loc_list.append", "isinstance", "copy.deepcopy.named_modules", "model.named_modules", "isinstance", "isinstance", "current_layer.view().sum", "current_layer.transpose().contiguous().view().sum", "len", "full_layer.weight[].detach", "[].transpose", "layer.weight.data.copy_", "torch.Parameter", "layer.running_mean.new_zeros", "layer.running_mean.new_ones", "layer.weight.data.copy_", "layer.running_mean.data.copy_", "layer.running_var.data.copy_", "out_c_loc.float", "in_c_loc.float", "int", "int", "int", "weight_mask.size", "layer.weight.size", "layer.weight.size", "torch.Parameter", "torch.Parameter", "layer.bias.data.copy_", "layer.weight.new_zeros", "full_layer.weight[].detach", "full_layer.running_mean[].detach", "full_layer.running_var[].detach", "torch.Parameter", "layer.bias.data.copy_", "current_layer.view", "current_layer.transpose().contiguous().view", "out_c_loc.float().sum.cpu().numpy().item", "in_c_loc.float().sum.cpu().numpy().item", "bias_mask.size", "layer.bias.size", "layer.weight.new_zeros", "torch.Parameter", "layer.bias.new_zeros", "full_layer.bias[].detach", "layer.bias.new_zeros", "full_layer.bias[].detach", "current_layer.size", "current_layer.size", "layer.weight.new_zeros", "[].transpose.transpose", "current_layer.transpose().contiguous", "out_c_loc.float().sum.cpu().numpy", "in_c_loc.float().sum.cpu().numpy", "current_layer.transpose", "out_c_loc.float().sum.cpu", "in_c_loc.float().sum.cpu"], "function", ["None"], ["", "def", "refine_model_I3D", "(", "model", ",", "neuron_mask_clean", ")", ":", "\n", "  ", "refined_model", "=", "copy", ".", "deepcopy", "(", "model", ")", "\n", "n_layers", "=", "len", "(", "neuron_mask_clean", ")", "//", "2", "\n", "valid_neuron_list", "=", "[", "]", "\n", "valid_neuron_loc_list", "=", "[", "]", "\n", "\n", "for", "idx", "in", "range", "(", "n_layers", ")", ":", "\n", "    ", "current_layer", "=", "neuron_mask_clean", "[", "2", "*", "idx", "]", "\n", "kernel_size", "=", "current_layer", ".", "size", "(", "2", ")", "\n", "\n", "out_c_loc", "=", "(", "current_layer", ".", "view", "(", "current_layer", ".", "size", "(", "0", ")", ",", "-", "1", ")", ".", "sum", "(", "1", ")", "!=", "0", ")", "\n", "in_c_loc", "=", "(", "current_layer", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", ".", "view", "(", "current_layer", ".", "size", "(", "1", ")", ",", "-", "1", ")", ".", "sum", "(", "1", ")", "!=", "0", ")", "\n", "out_c", "=", "out_c_loc", ".", "float", "(", ")", ".", "sum", "(", ")", "\n", "in_c", "=", "in_c_loc", ".", "float", "(", ")", ".", "sum", "(", ")", "\n", "valid_neuron_list", ".", "append", "(", "[", "int", "(", "out_c", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "item", "(", ")", ")", ",", "\n", "int", "(", "in_c", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "item", "(", ")", ")", ",", "\n", "int", "(", "kernel_size", ")", "]", ")", "\n", "valid_neuron_loc_list", ".", "append", "(", "{", "'out_c_loc'", ":", "out_c_loc", ",", "\n", "'in_c_loc'", ":", "in_c_loc", "}", ")", "\n", "\n", "# Check", "\n", "", "layer_idx", "=", "0", "\n", "for", "key", ",", "layer", "in", "refined_model", ".", "named_modules", "(", ")", ":", "\n", "    ", "if", "isinstance", "(", "layer", ",", "(", "nn", ".", "Linear", ",", "nn", ".", "Conv2d", ",", "nn", ".", "Conv3d", ",", "\n", "nn", ".", "ConvTranspose2d", ",", "nn", ".", "ConvTranspose3d", ")", ")", ":", "\n", "      ", "weight_mask", "=", "neuron_mask_clean", "[", "2", "*", "layer_idx", "]", "\n", "bias_mask", "=", "neuron_mask_clean", "[", "2", "*", "layer_idx", "+", "1", "]", "\n", "\n", "assert", "weight_mask", ".", "size", "(", ")", "==", "layer", ".", "weight", ".", "size", "(", ")", "\n", "assert", "bias_mask", ".", "size", "(", ")", "==", "layer", ".", "bias", ".", "size", "(", ")", "if", "(", "bias_mask", "is", "not", "None", ")", "else", "True", "\n", "layer_idx", "+=", "1", "\n", "\n", "", "", "layer_idx", "=", "0", "\n", "for", "(", "key", ",", "layer", ")", ",", "(", "full_key", ",", "full_layer", ")", "in", "zip", "(", "refined_model", ".", "named_modules", "(", ")", ",", "\n", "model", ".", "named_modules", "(", ")", ")", ":", "\n", "    ", "if", "isinstance", "(", "layer", ",", "(", "nn", ".", "Linear", ",", "nn", ".", "Conv2d", ",", "nn", ".", "Conv3d", ",", "\n", "nn", ".", "ConvTranspose2d", ",", "nn", ".", "ConvTranspose3d", ")", ")", ":", "\n", "      ", "weight_len", "=", "len", "(", "layer", ".", "weight", ".", "size", "(", ")", ")", "\n", "out_c", ",", "in_c", ",", "ksz", "=", "valid_neuron_list", "[", "layer_idx", "]", "\n", "\n", "if", "weight_len", "==", "5", ":", "\n", "        ", "layer", ".", "weight", "=", "nn", ".", "Parameter", "(", "\n", "layer", ".", "weight", ".", "new_zeros", "(", "out_c", ",", "in_c", ",", "ksz", ",", "ksz", ",", "ksz", ")", ",", "\n", "requires_grad", "=", "True", ")", "\n", "", "elif", "weight_len", "==", "2", ":", "\n", "        ", "layer", ".", "weight", "=", "nn", ".", "Parameter", "(", "\n", "layer", ".", "weight", ".", "new_zeros", "(", "out_c", ",", "in_c", ")", ",", "\n", "requires_grad", "=", "True", ")", "\n", "layer", ".", "in_features", "=", "in_c", "\n", "layer", ".", "out_features", "=", "out_c", "\n", "\n", "", "layer", ".", "in_channels", "=", "in_c", "\n", "layer", ".", "out_channels", "=", "out_c", "\n", "\n", "# ====", "\n", "out_c_loc", "=", "valid_neuron_loc_list", "[", "layer_idx", "]", "[", "'out_c_loc'", "]", "\n", "in_c_loc", "=", "valid_neuron_loc_list", "[", "layer_idx", "]", "[", "'in_c_loc'", "]", "\n", "weight_v", "=", "full_layer", ".", "weight", "[", "out_c_loc", "]", ".", "detach", "(", ")", "\n", "weight_v", "=", "weight_v", ".", "transpose", "(", "0", ",", "1", ")", "[", "in_c_loc", "]", ".", "transpose", "(", "0", ",", "1", ")", "\n", "layer", ".", "weight", ".", "data", ".", "copy_", "(", "weight_v", ")", "\n", "\n", "if", "layer", ".", "bias", "is", "not", "None", ":", "\n", "        ", "layer", ".", "bias", "=", "nn", ".", "Parameter", "(", "layer", ".", "bias", ".", "new_zeros", "(", "out_c", ")", ",", "requires_grad", "=", "True", ")", "\n", "\n", "# ====", "\n", "layer", ".", "bias", ".", "data", ".", "copy_", "(", "full_layer", ".", "bias", "[", "out_c_loc", "]", ".", "detach", "(", ")", ")", "\n", "\n", "", "layer_idx", "+=", "1", "\n", "\n", "", "if", "isinstance", "(", "layer", ",", "(", "nn", ".", "BatchNorm1d", ",", "nn", ".", "BatchNorm2d", ",", "nn", ".", "BatchNorm3d", ")", ")", ":", "\n", "      ", "out_c", "=", "valid_neuron_list", "[", "layer_idx", "-", "1", "]", "[", "0", "]", "\n", "out_c_loc", "=", "valid_neuron_loc_list", "[", "layer_idx", "-", "1", "]", "[", "'out_c_loc'", "]", "\n", "layer", ".", "weight", "=", "nn", ".", "Parameter", "(", "layer", ".", "weight", ".", "new_zeros", "(", "out_c", ")", ",", "requires_grad", "=", "True", ")", "\n", "layer", ".", "num_features", "=", "out_c", "\n", "layer", ".", "running_mean", "=", "layer", ".", "running_mean", ".", "new_zeros", "(", "out_c", ")", "\n", "layer", ".", "running_var", "=", "layer", ".", "running_mean", ".", "new_ones", "(", "out_c", ")", "\n", "\n", "# ====", "\n", "layer", ".", "weight", ".", "data", ".", "copy_", "(", "full_layer", ".", "weight", "[", "out_c_loc", "]", ".", "detach", "(", ")", ")", "\n", "layer", ".", "running_mean", ".", "data", ".", "copy_", "(", "full_layer", ".", "running_mean", "[", "out_c_loc", "]", ".", "detach", "(", ")", ")", "\n", "layer", ".", "running_var", ".", "data", ".", "copy_", "(", "full_layer", ".", "running_var", "[", "out_c_loc", "]", ".", "detach", "(", ")", ")", "\n", "\n", "if", "layer", ".", "bias", "is", "not", "None", ":", "\n", "        ", "layer", ".", "bias", "=", "nn", ".", "Parameter", "(", "layer", ".", "bias", ".", "new_zeros", "(", "out_c", ")", ",", "requires_grad", "=", "True", ")", "\n", "\n", "# ====", "\n", "layer", ".", "bias", ".", "data", ".", "copy_", "(", "full_layer", ".", "bias", "[", "out_c_loc", "]", ".", "detach", "(", ")", ")", "\n", "\n", "", "", "", "return", "refined_model", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.None.pruning_related.refine_model_PSM": [[301, 351], ["copy.deepcopy", "copy.deepcopy.named_modules", "isinstance", "isinstance", "isinstance", "torch.Parameter", "layer.running_mean.new_zeros", "layer.running_mean.new_ones", "torch.Parameter", "torch.Parameter", "layer.weight.new_zeros", "torch.Parameter", "layer.weight.new_zeros", "torch.Parameter", "layer.bias.new_zeros", "layer.bias.new_zeros", "layer.weight.new_zeros", "torch.Parameter", "layer.weight.new_zeros"], "function", ["None"], ["", "def", "refine_model_PSM", "(", "model", ",", "valid_neuron_list", ")", ":", "\n", "  ", "refined_model", "=", "copy", ".", "deepcopy", "(", "model", ")", "\n", "\n", "# ===========================================", "\n", "layer_idx", "=", "0", "\n", "for", "key", ",", "layer", "in", "refined_model", ".", "named_modules", "(", ")", ":", "\n", "    ", "if", "isinstance", "(", "layer", ",", "(", "nn", ".", "Linear", ",", "nn", ".", "Conv2d", ",", "nn", ".", "Conv3d", ",", "\n", "nn", ".", "ConvTranspose2d", ",", "nn", ".", "ConvTranspose3d", ")", ")", ":", "\n", "      ", "if", "isinstance", "(", "layer", ",", "(", "nn", ".", "ConvTranspose2d", ",", "nn", ".", "ConvTranspose3d", ")", ")", ":", "\n", "        ", "in_c", ",", "out_c", ",", "ksz", ",", "klen", "=", "valid_neuron_list", "[", "layer_idx", "]", "# This should be paied attention", "\n", "", "else", ":", "\n", "        ", "out_c", ",", "in_c", ",", "ksz", ",", "klen", "=", "valid_neuron_list", "[", "layer_idx", "]", "# This is normal", "\n", "\n", "", "if", "klen", "==", "5", ":", "\n", "        ", "layer", ".", "weight", "=", "nn", ".", "Parameter", "(", "\n", "layer", ".", "weight", ".", "new_zeros", "(", "out_c", ",", "in_c", ",", "ksz", ",", "ksz", ",", "ksz", ")", ",", "\n", "requires_grad", "=", "True", ")", "\n", "", "elif", "klen", "==", "4", ":", "\n", "          ", "layer", ".", "weight", "=", "nn", ".", "Parameter", "(", "\n", "layer", ".", "weight", ".", "new_zeros", "(", "out_c", ",", "in_c", ",", "ksz", ",", "ksz", ")", ",", "\n", "requires_grad", "=", "True", ")", "\n", "", "elif", "klen", "==", "2", ":", "\n", "        ", "layer", ".", "weight", "=", "nn", ".", "Parameter", "(", "\n", "layer", ".", "weight", ".", "new_zeros", "(", "out_c", ",", "in_c", ")", ",", "\n", "requires_grad", "=", "True", ")", "\n", "layer", ".", "in_features", "=", "in_c", "\n", "layer", ".", "out_features", "=", "out_c", "\n", "\n", "", "layer", ".", "in_channels", "=", "in_c", "\n", "layer", ".", "out_channels", "=", "out_c", "\n", "\n", "if", "layer", ".", "bias", "is", "not", "None", ":", "\n", "        ", "layer", ".", "bias", "=", "nn", ".", "Parameter", "(", "layer", ".", "bias", ".", "new_zeros", "(", "out_c", ")", ",", "\n", "requires_grad", "=", "True", ")", "\n", "\n", "", "layer_idx", "+=", "1", "\n", "\n", "", "if", "isinstance", "(", "layer", ",", "(", "nn", ".", "BatchNorm1d", ",", "nn", ".", "BatchNorm2d", ",", "nn", ".", "BatchNorm3d", ")", ")", ":", "\n", "      ", "out_c", "=", "valid_neuron_list", "[", "layer_idx", "-", "1", "]", "[", "0", "]", "\n", "layer", ".", "weight", "=", "nn", ".", "Parameter", "(", "layer", ".", "weight", ".", "new_zeros", "(", "out_c", ")", ",", "\n", "requires_grad", "=", "True", ")", "\n", "layer", ".", "num_features", "=", "out_c", "\n", "layer", ".", "running_mean", "=", "layer", ".", "running_mean", ".", "new_zeros", "(", "out_c", ")", "\n", "layer", ".", "running_var", "=", "layer", ".", "running_mean", ".", "new_ones", "(", "out_c", ")", "\n", "\n", "if", "layer", ".", "bias", "is", "not", "None", ":", "\n", "        ", "layer", ".", "bias", "=", "nn", ".", "Parameter", "(", "layer", ".", "bias", ".", "new_zeros", "(", "out_c", ")", ",", "\n", "requires_grad", "=", "True", ")", "\n", "\n", "", "", "", "return", "refined_model", "", "", ""]], "home.repos.pwc.inspect_result.zwxu064_RANP.None.train_shapenet.train": [[19, 75], ["model.train", "aux.utils.AverageMeter", "len", "time.time", "enumerate", "aux.fully_convolutional.iou", "print", "aux.utils.write_to_tensorboard", "input.size", "optimizer.zero_grad", "time.time", "model", "prediction.reshape.reshape", "gt.reshape.reshape", "criterion", "aux.fully_convolutional.store_voxel", "criterion.backward", "optimizer.step", "aux.utils.AverageMeter.update", "print", "aux.utils.write_to_tensorboard", "print", "time.time", "math.exp", "time.time", "criterion.item", "input.cuda", "gt.reshape.cuda"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.data.train", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.fully_convolutional.iou", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.write_to_tensorboard", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.fully_convolutional.store_voxel", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.AverageMeter.update", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.write_to_tensorboard"], ["def", "train", "(", "model", ",", "dataset", ",", "optimizer", ",", "writer", ",", "args", ")", ":", "\n", "  ", "model", ".", "train", "(", ")", "\n", "status", "=", "{", "}", "\n", "train_loss", "=", "AverageMeter", "(", ")", "\n", "duration", ",", "counts", "=", "0", ",", "0", "\n", "dataset_len", "=", "len", "(", "dataset", ")", "\n", "\n", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "    ", "param_group", "[", "'lr'", "]", "=", "args", ".", "lr", "*", "math", ".", "exp", "(", "(", "1", "-", "args", ".", "current_epoch", ")", "*", "args", ".", "lr_decay", ")", "\n", "\n", "", "time_start", "=", "time", ".", "time", "(", ")", "\n", "current_iter", "=", "args", ".", "current_epoch", "*", "dataset_len", "\n", "\n", "for", "idx", ",", "data", "in", "enumerate", "(", "dataset", ")", ":", "\n", "    ", "input", ",", "gt", "=", "data", "[", "'x'", "]", ",", "data", "[", "'y'", "]", "\n", "actual_batch", "=", "input", ".", "size", "(", "0", ")", "\n", "\n", "if", "args", ".", "enable_cuda", ":", "\n", "      ", "input", ",", "gt", "=", "input", ".", "cuda", "(", ")", ",", "gt", ".", "cuda", "(", ")", "\n", "\n", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "duration_start", "=", "time", ".", "time", "(", ")", "\n", "prediction", "=", "model", "(", "input", ")", "\n", "duration_per", "=", "time", ".", "time", "(", ")", "-", "duration_start", "\n", "\n", "if", "args", ".", "enable_ssc_unet", ":", "\n", "      ", "if", "idx", "<", "100", ":", "\n", "        ", "counts", "+=", "1", "\n", "duration", "+=", "duration_per", "\n", "", "else", ":", "\n", "        ", "break", "\n", "\n", "", "", "prediction", "=", "prediction", ".", "reshape", "(", "actual_batch", ",", "args", ".", "n_class", ",", "-", "1", ")", "\n", "gt", "=", "gt", ".", "reshape", "(", "actual_batch", ",", "-", "1", ")", "\n", "loss", "=", "criterion", "(", "prediction", ",", "gt", ")", "\n", "store_voxel", "(", "status", ",", "data", ",", "prediction", ",", "gt", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "train_loss", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "actual_batch", ")", "\n", "print", "(", "'Epoch: {}, batch: {}/{}, train loss: {:.4f}'", ".", "format", "(", "args", ".", "current_epoch", ",", "idx", ",", "dataset_len", ",", "train_loss", ".", "avg", ")", ")", "\n", "\n", "current_iter", "+=", "1", "\n", "train_iter_result", "=", "{", "'mode'", ":", "'train'", ",", "'batch_iter'", ":", "current_iter", ",", "'train_loss_iter'", ":", "train_loss", ".", "avg", "}", "\n", "write_to_tensorboard", "(", "'scalar'", ",", "writer", ",", "train_iter_result", ")", "\n", "\n", "", "if", "args", ".", "enable_ssc_unet", ":", "\n", "    ", "print", "(", "'=====> Avg time: {}s over {} loops.'", ".", "format", "(", "duration", "/", "counts", ",", "counts", ")", ")", "\n", "\n", "", "duration", "=", "time", ".", "time", "(", ")", "-", "time_start", "\n", "iou_value", "=", "iou", "(", "status", ",", "class_first", "=", "True", ")", "\n", "print", "(", "'Epoch: {}, train loss: {:.4f}, IoU: {:.4f}, time: {:.4f}s'", ".", "format", "(", "args", ".", "current_epoch", ",", "train_loss", ".", "avg", ",", "iou_value", "[", "'iou'", "]", ",", "duration", ")", ")", "\n", "train_result", "=", "{", "'mode'", ":", "'train'", ",", "'epoch'", ":", "args", ".", "current_epoch", ",", "'train_loss'", ":", "train_loss", ".", "avg", "}", "\n", "write_to_tensorboard", "(", "'scalar'", ",", "writer", ",", "train_result", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.None.train_shapenet.valid": [[77, 108], ["model.eval", "aux.utils.AverageMeter", "time.time", "len", "enumerate", "aux.fully_convolutional.iou", "print", "aux.utils.write_to_tensorboard", "input.size", "model", "prediction.reshape.reshape", "gt.reshape.reshape", "criterion", "aux.utils.AverageMeter.update", "aux.fully_convolutional.store_voxel", "print", "time.time", "criterion.item", "input.cuda", "gt.reshape.cuda"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.fully_convolutional.iou", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.write_to_tensorboard", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.AverageMeter.update", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.fully_convolutional.store_voxel"], ["", "def", "valid", "(", "model", ",", "dataset", ",", "writer", ",", "args", ")", ":", "\n", "  ", "model", ".", "eval", "(", ")", "\n", "status", "=", "{", "}", "\n", "valid_loss", "=", "AverageMeter", "(", ")", "\n", "time_start", "=", "time", ".", "time", "(", ")", "\n", "dataset_len", "=", "len", "(", "dataset", ")", "\n", "\n", "for", "idx", ",", "data", "in", "enumerate", "(", "dataset", ")", ":", "\n", "    ", "input", ",", "gt", "=", "data", "[", "'x'", "]", ",", "data", "[", "'y'", "]", "\n", "actual_batch", "=", "input", ".", "size", "(", "0", ")", "\n", "\n", "if", "args", ".", "enable_cuda", ":", "\n", "      ", "input", ",", "gt", "=", "input", ".", "cuda", "(", ")", ",", "gt", ".", "cuda", "(", ")", "\n", "\n", "", "prediction", "=", "model", "(", "input", ")", "\n", "prediction", "=", "prediction", ".", "reshape", "(", "actual_batch", ",", "args", ".", "n_class", ",", "-", "1", ")", "\n", "gt", "=", "gt", ".", "reshape", "(", "actual_batch", ",", "-", "1", ")", "\n", "loss", "=", "criterion", "(", "prediction", ",", "gt", ")", "\n", "valid_loss", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "actual_batch", ")", "\n", "store_voxel", "(", "status", ",", "data", ",", "prediction", ",", "gt", ")", "\n", "print", "(", "'Epoch: {}, batch: {}/{}, valid loss: {:.4f}'", ".", "format", "(", "args", ".", "current_epoch", ",", "idx", ",", "dataset_len", ",", "valid_loss", ".", "avg", ")", ")", "\n", "\n", "", "duration", "=", "time", ".", "time", "(", ")", "-", "time_start", "\n", "iou_value", "=", "iou", "(", "status", ",", "class_first", "=", "True", ")", "\n", "print", "(", "'Epoch: {}, valid loss: {:.4f}, IoU: {:.4f}, time: {:.4f}s'", ".", "format", "(", "args", ".", "current_epoch", ",", "valid_loss", ".", "avg", ",", "iou_value", "[", "'iou'", "]", ",", "duration", ")", ")", "\n", "valid_result", "=", "{", "'mode'", ":", "'valid'", ",", "'epoch'", ":", "args", ".", "current_epoch", ",", "'valid_loss'", ":", "valid_loss", ".", "avg", ",", "\n", "'mean_iou'", ":", "iou_value", "[", "'iou'", "]", "}", "\n", "write_to_tensorboard", "(", "'scalar'", ",", "writer", ",", "valid_result", ")", "\n", "\n", "return", "iou_value", "[", "'iou'", "]", ",", "valid_loss", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.None.train_shapenet.test": [[110, 148], ["model.eval", "enumerate", "time.time", "model", "[].argmax().detach().cpu().numpy", "numpy.reshape", "print", "file_path.split", "name.split", "input[].detach().cpu().numpy", "time.time", "aux.viz_voxel.viz_voxel", "aux.viz_voxel.viz_voxel", "aux.viz_voxel.viz_voxel", "aux.viz_voxel.viz_voxel", "aux.viz_voxel.viz_voxel", "aux.viz_voxel.viz_voxel", "input.cuda", "gt.cuda", "[].argmax().detach().cpu", "input[].detach().cpu", "gt.squeeze().cpu().numpy", "gt.squeeze().cpu().numpy", "[].argmax().detach", "input[].detach", "gt.squeeze().cpu", "gt.squeeze().cpu", "[].argmax", "gt.squeeze", "gt.squeeze"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.viz_voxel.viz_voxel", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.viz_voxel.viz_voxel", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.viz_voxel.viz_voxel", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.viz_voxel.viz_voxel", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.viz_voxel.viz_voxel", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.viz_voxel.viz_voxel"], ["", "def", "test", "(", "model", ",", "dataset", ",", "args", ")", ":", "\n", "  ", "model", ".", "eval", "(", ")", "\n", "\n", "for", "idx", ",", "data", "in", "enumerate", "(", "dataset", ")", ":", "\n", "    ", "time_start", "=", "time", ".", "time", "(", ")", "\n", "input", ",", "gt", "=", "data", "[", "'x'", "]", ",", "data", "[", "'y'", "]", "\n", "file_path", "=", "data", "[", "'file_path'", "]", "[", "0", "]", "\n", "class_offset", "=", "data", "[", "'class_offset'", "]", "[", "0", "]", "\n", "num_class", "=", "data", "[", "'num_class'", "]", "[", "0", "]", "\n", "name", "=", "file_path", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "name", "=", "name", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "\n", "if", "args", ".", "enable_cuda", ":", "\n", "      ", "input", ",", "gt", "=", "input", ".", "cuda", "(", ")", ",", "gt", ".", "cuda", "(", ")", "\n", "\n", "", "prediction", "=", "model", "(", "input", ")", "\n", "mask", "=", "(", "input", "[", "0", ",", "0", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "==", "1", ")", "\n", "voxel", "=", "prediction", "[", "0", "]", "[", "class_offset", ":", "class_offset", "+", "num_class", "]", ".", "argmax", "(", "0", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "voxel", "=", "np", ".", "reshape", "(", "voxel", ",", "(", "args", ".", "spatial_size", ",", "args", ".", "spatial_size", ",", "args", ".", "spatial_size", ")", ")", "\n", "duration", "=", "time", ".", "time", "(", ")", "-", "time_start", "\n", "print", "(", "'Test, batch: {}, time: {:.4f}s'", ".", "format", "(", "idx", ",", "duration", ")", ")", "\n", "enable_save", "=", "False", "\n", "close_time", "=", "1", "\n", "\n", "if", "args", ".", "enable_viz", ":", "\n", "      ", "if", "idx", "!=", "1", ":", "continue", "\n", "viz_voxel", "(", "voxel", "=", "voxel", ",", "mask", "=", "mask", ",", "enable_close_time", "=", "close_time", ",", "data_root", "=", "'viz_figures'", ",", "enable_save", "=", "enable_save", ",", "\n", "title", "=", "'input_{}_left'", ".", "format", "(", "name", ")", ",", "elevation", "=", "30", ",", "azimuth", "=", "-", "45", ",", "fixed_color", "=", "'white'", ")", "\n", "viz_voxel", "(", "voxel", "=", "voxel", ",", "mask", "=", "mask", ",", "enable_close_time", "=", "close_time", ",", "data_root", "=", "'viz_figures'", ",", "enable_save", "=", "enable_save", ",", "\n", "title", "=", "'input_{}_right'", ".", "format", "(", "name", ")", ",", "elevation", "=", "30", ",", "azimuth", "=", "45", ",", "fixed_color", "=", "'white'", ")", "\n", "viz_voxel", "(", "voxel", "=", "voxel", ",", "mask", "=", "mask", ",", "enable_close_time", "=", "close_time", ",", "data_root", "=", "'viz_figures'", ",", "enable_save", "=", "enable_save", ",", "\n", "title", "=", "'prediction_{}_left'", ".", "format", "(", "name", ")", ",", "elevation", "=", "30", ",", "azimuth", "=", "-", "45", ")", "\n", "viz_voxel", "(", "voxel", "=", "voxel", ",", "mask", "=", "mask", ",", "enable_close_time", "=", "close_time", ",", "data_root", "=", "'viz_figures'", ",", "enable_save", "=", "enable_save", ",", "\n", "title", "=", "'prediction_{}_right'", ".", "format", "(", "name", ")", ",", "elevation", "=", "30", ",", "azimuth", "=", "45", ")", "\n", "viz_voxel", "(", "voxel", "=", "gt", ".", "squeeze", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "mask", "=", "mask", ",", "data_root", "=", "'viz_figures'", ",", "enable_save", "=", "enable_save", ",", "\n", "enable_close_time", "=", "close_time", ",", "title", "=", "'GT_{}_left'", ".", "format", "(", "name", ")", ",", "elevation", "=", "30", ",", "azimuth", "=", "-", "45", ")", "\n", "viz_voxel", "(", "voxel", "=", "gt", ".", "squeeze", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "mask", "=", "mask", ",", "data_root", "=", "'viz_figures'", ",", "enable_save", "=", "enable_save", ",", "\n", "enable_close_time", "=", "0", ",", "title", "=", "'GT_{}_right'", ".", "format", "(", "name", ")", ",", "elevation", "=", "30", ",", "azimuth", "=", "45", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.None.configs.set_config": [[5, 229], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.set_defaults", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.set_defaults", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.set_defaults", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.set_defaults", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.set_defaults", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.set_defaults", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.set_defaults", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "parser.parse_args.model.lower", "parser.parse_args.dataset.lower", "parser.parse_args.dataset.find", "os.path.join", "os.path.join", "os.path.exists", "parser.parse_args.dataset.find", "os.makedirs", "os.makedirs", "os.path.exists", "os.path.exists"], "function", ["None"], ["def", "set_config", "(", ")", ":", "\n", "  ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'configures of project'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch'", ",", "type", "=", "int", ",", "default", "=", "None", ",", "help", "=", "'batch size in training'", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "default", "=", "'shapenet'", ",", "type", "=", "str", ".", "lower", ",", "choices", "=", "{", "'shapenet'", ",", "'brats'", ",", "'ucf101'", ",", "'sceneflow'", "}", ")", "\n", "parser", ".", "add_argument", "(", "'--data_dir'", ",", "type", "=", "str", ",", "default", "=", "'dataset'", ",", "help", "=", "'data directory'", ")", "\n", "parser", ".", "add_argument", "(", "'--spatial_size'", ",", "type", "=", "int", ",", "default", "=", "None", ",", "help", "=", "'spatial size'", ")", "\n", "parser", ".", "add_argument", "(", "'--valid_spatial_size'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "help", "=", "'valid spatial size'", ")", "\n", "parser", ".", "add_argument", "(", "'--scale'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'scale'", ")", "\n", "parser", ".", "add_argument", "(", "'--epoch'", ",", "type", "=", "int", ",", "default", "=", "None", ",", "help", "=", "'epoch'", ")", "\n", "parser", ".", "add_argument", "(", "'--resume_epoch'", ",", "type", "=", "int", ",", "default", "=", "-", "1", ",", "help", "=", "'resume train epoch'", ")", "\n", "parser", ".", "add_argument", "(", "'--test_epoch'", ",", "type", "=", "int", ",", "default", "=", "-", "1", ",", "help", "=", "'resume test epoch'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "None", ",", "help", "=", "'lr'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_decay'", ",", "type", "=", "float", ",", "default", "=", "None", ",", "help", "=", "'lr decay'", ")", "\n", "parser", ".", "add_argument", "(", "'--w_decay'", ",", "type", "=", "float", ",", "default", "=", "1e-4", ",", "help", "=", "'weight decay'", ")", "\n", "parser", ".", "add_argument", "(", "'--momentum'", ",", "type", "=", "float", ",", "default", "=", "0.9", ",", "help", "=", "'momentum'", ")", "\n", "parser", ".", "add_argument", "(", "'--checkpoint_dir'", ",", "type", "=", "str", ",", "default", "=", "'checkpoints'", ",", "help", "=", "'checkpoint directory'", ")", "\n", "parser", ".", "add_argument", "(", "'--optimizer'", ",", "type", "=", "str", ",", "default", "=", "'sgd'", ",", "help", "=", "'optimizer'", ")", "\n", "parser", ".", "add_argument", "(", "'--enable_train'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "help", "=", "'enable train'", ")", "\n", "parser", ".", "add_argument", "(", "'--enable_test'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "help", "=", "'enable test'", ")", "\n", "parser", ".", "add_argument", "(", "'--enable_cuda'", ",", "action", "=", "'store_true'", ",", "default", "=", "True", ",", "help", "=", "'enable cuda'", ")", "\n", "parser", ".", "add_argument", "(", "'--enable_bias'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "help", "=", "'enable bias'", ")", "\n", "parser", ".", "add_argument", "(", "'--weight_init'", ",", "type", "=", "str", ",", "default", "=", "'xn'", ",", "help", "=", "'weight initialization'", ",", "choices", "=", "[", "'xn'", ",", "'ort'", "]", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--neuron_sparsity'", ",", "type", "=", "float", ",", "default", "=", "None", ",", "help", "=", "'neuron sparsity'", ")", "\n", "parser", ".", "add_argument", "(", "'--hidden_layer_sparsity'", ",", "type", "=", "float", ",", "default", "=", "0", ",", "help", "=", "'hidden layer sparsity'", ")", "\n", "parser", ".", "add_argument", "(", "'--param_sparsity'", ",", "type", "=", "float", ",", "default", "=", "0", ",", "help", "=", "'SNIP param pruning'", ")", "\n", "parser", ".", "add_argument", "(", "'--layer_sparsity_list'", ",", "type", "=", "float", ",", "default", "=", "0", ",", "help", "=", "'layer wise neuron pruning'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--acc_mode'", ",", "type", "=", "str", ",", "default", "=", "'sum'", ",", "help", "=", "'mode of mask grads, mean, max, sum'", ")", "\n", "parser", ".", "add_argument", "(", "'--prune_spatial_size'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "help", "=", "'prune spatial size'", ")", "\n", "parser", ".", "add_argument", "(", "'--number_of_fmaps'", ",", "type", "=", "int", ",", "default", "=", "4", ",", "help", "=", "'depth of network'", ")", "\n", "parser", ".", "add_argument", "(", "'--disable_deepmodel_pooling'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'disable max pooling for deep model (number of fmaps more than 4), needs least spatial size'", ")", "\n", "parser", ".", "add_argument", "(", "'--width'", ",", "type", "=", "int", ",", "default", "=", "2", ",", "help", "=", "'number of layers in an encoder/decoder'", ")", "\n", "parser", ".", "add_argument", "(", "'--res_type'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "help", "=", "'None, layer, or block'", ")", "\n", "parser", ".", "add_argument", "(", "'--local_rank'", ",", "type", "=", "int", ",", "help", "=", "'local rank for GPUs'", ")", "\n", "parser", ".", "add_argument", "(", "'--enable_hard_padding'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "help", "=", "'hard padding for sz > 96'", ")", "\n", "parser", ".", "add_argument", "(", "'--enable_raw_grad'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "help", "=", "'enable raw gradient values for neuron importance'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--random_method'", ",", "type", "=", "int", ",", "default", "=", "None", ",", "choices", "=", "[", "0", ",", "1", ",", "None", "]", ",", "help", "=", "'random method 0 or 1'", ")", "\n", "parser", ".", "add_argument", "(", "'--random_sparsity'", ",", "type", "=", "float", ",", "default", "=", "0", ",", "help", "=", "'random sparsity neuron pruning'", ")", "\n", "parser", ".", "add_argument", "(", "'--random_sparsity_seed'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'random sparsity seed for neuron pruning'", ")", "\n", "parser", ".", "add_argument", "(", "'--enable_layer_neuron_display'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "help", "=", "'display layer neuron'", ")", "\n", "parser", ".", "add_argument", "(", "'--resource_list_type'", ",", "type", "=", "str", ",", "default", "=", "'grad_flops'", ",", "\n", "choices", "=", "[", "'vanilla'", ",", "'grad'", ",", "'param'", ",", "'flops'", ",", "'memory'", ",", "'grad_param'", ",", "'grad_flops'", ",", "'grad_memory'", "]", ",", "\n", "help", "=", "'use resource list for layer balance'", ")", "\n", "parser", ".", "add_argument", "(", "'--resource_list_lambda'", ",", "type", "=", "float", ",", "default", "=", "None", ",", "help", "=", "'control the importance of resource list weights'", ")", "\n", "parser", ".", "add_argument", "(", "'--valid_min_epoch'", ",", "type", "=", "int", ",", "default", "=", "80", ",", "help", "=", "'min epoch to do validation to save time'", ")", "\n", "parser", ".", "add_argument", "(", "'--load_transfer_model_path'", ",", "type", "=", "str", ",", "default", "=", "''", ",", "help", "=", "'load model from BraTS'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_transfer_model_path'", ",", "type", "=", "str", ",", "default", "=", "''", ",", "help", "=", "'save model for BraTS'", ")", "\n", "parser", ".", "add_argument", "(", "'--enable_ssc_unet'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--enable_viz'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "help", "=", "'visualization'", ")", "\n", "parser", ".", "add_argument", "(", "'--test_target_class'", ",", "default", "=", "-", "1", ",", "type", "=", "int", ",", "help", "=", "'To display a special one'", ")", "\n", "\n", "# For BraTS", "\n", "parser", ".", "add_argument", "(", "'--years'", ",", "nargs", "=", "'+'", ",", "type", "=", "int", ",", "default", "=", "2018", ",", "help", "=", "'BraTS year'", ")", "\n", "parser", ".", "add_argument", "(", "'--alpha'", ",", "type", "=", "float", ",", "default", "=", "0.01", ",", "\n", "help", "=", "'weight for cross entropy, others for dice'", ")", "\n", "parser", ".", "add_argument", "(", "'--ignore_index'", ",", "type", "=", "int", ",", "default", "=", "255", ",", "\n", "help", "=", "'ignore index of ground truth'", ")", "\n", "\n", "# For UCF101", "\n", "parser", ".", "add_argument", "(", "'--lr_steps'", ",", "default", "=", "None", ",", "type", "=", "float", ",", "nargs", "=", "\"+\"", ",", "metavar", "=", "'LRSteps'", ")", "\n", "parser", ".", "add_argument", "(", "'--video_path'", ",", "default", "=", "'video_kinetics_jpg'", ",", "type", "=", "str", ",", "help", "=", "'Directory path of Videos'", ")", "\n", "parser", ".", "add_argument", "(", "'--annotation_path'", ",", "default", "=", "'kinetics.json'", ",", "type", "=", "str", ",", "help", "=", "'Annotation file path'", ")", "\n", "parser", ".", "add_argument", "(", "'--checkpoifnt_dir'", ",", "default", "=", "'checkpoints'", ",", "type", "=", "str", ",", "help", "=", "'Result directory path'", ")", "\n", "parser", ".", "add_argument", "(", "'--store_name'", ",", "default", "=", "'model'", ",", "type", "=", "str", ",", "help", "=", "'Name to store checkpoints'", ")", "\n", "parser", ".", "add_argument", "(", "'--modality'", ",", "default", "=", "'RGB'", ",", "type", "=", "str", ",", "help", "=", "'Modality of input data. RGB, Flow or RGBFlow'", ")", "\n", "parser", ".", "add_argument", "(", "'--n_finetune_classes'", ",", "default", "=", "400", ",", "type", "=", "int", ",", "\n", "help", "=", "'Number of classes for fine-tuning. n_classes is set to the number when pretraining.'", ")", "\n", "parser", ".", "add_argument", "(", "'--sample_size'", ",", "default", "=", "None", ",", "type", "=", "int", ",", "help", "=", "'Height and width of inputs'", ")", "\n", "parser", ".", "add_argument", "(", "'--downsample'", ",", "default", "=", "1", ",", "type", "=", "int", ",", "help", "=", "'Downsampling. Selecting 1 frame out of N'", ")", "\n", "parser", ".", "add_argument", "(", "'--initial_scale'", ",", "default", "=", "1.0", ",", "type", "=", "float", ",", "help", "=", "'Initial scale for multiscale cropping'", ")", "\n", "parser", ".", "add_argument", "(", "'--n_scales'", ",", "default", "=", "5", ",", "type", "=", "int", ",", "help", "=", "'Number of scales for multiscale cropping'", ")", "\n", "parser", ".", "add_argument", "(", "'--scale_step'", ",", "default", "=", "0.84089641525", ",", "type", "=", "float", ",", "help", "=", "'Scale step for multiscale cropping'", ")", "\n", "parser", ".", "add_argument", "(", "'--train_crop'", ",", "default", "=", "'corner'", ",", "type", "=", "str", ",", "\n", "help", "=", "'Spatial cropping method in training. random is uniform. corner is selection from 4 corners and 1 center.  (random | corner | center)'", ")", "\n", "parser", ".", "add_argument", "(", "'--dampening'", ",", "default", "=", "0.9", ",", "type", "=", "float", ",", "help", "=", "'dampening of SGD'", ")", "\n", "parser", ".", "add_argument", "(", "'--weight_decay'", ",", "default", "=", "1e-3", ",", "type", "=", "float", ",", "help", "=", "'Weight Decay'", ")", "\n", "parser", ".", "add_argument", "(", "'--mean_dataset'", ",", "default", "=", "'activitynet'", ",", "type", "=", "str", ",", "\n", "help", "=", "'dataset for mean values of mean subtraction (activitynet | kinetics)'", ")", "\n", "parser", ".", "add_argument", "(", "'--no_mean_norm'", ",", "action", "=", "'store_true'", ",", "help", "=", "'If true, inputs are not normalized by mean.'", ")", "\n", "parser", ".", "set_defaults", "(", "no_mean_norm", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--std_norm'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "help", "=", "'If true, inputs are normalized by standard deviation.'", ")", "\n", "parser", ".", "add_argument", "(", "'--nesterov'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "help", "=", "'Nesterov momentum'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_patience'", ",", "default", "=", "10", ",", "type", "=", "int", ",", "\n", "help", "=", "'Patience of LR scheduler. See documentation of ReduceLROnPlateau.'", ")", "\n", "parser", ".", "add_argument", "(", "'--begin_epoch'", ",", "default", "=", "1", ",", "type", "=", "int", ",", "\n", "help", "=", "'Training begins at this epoch. Previous trained model indicated by resume_path is loaded.'", ")", "\n", "parser", ".", "add_argument", "(", "'--n_val_samples'", ",", "default", "=", "3", ",", "type", "=", "int", ",", "help", "=", "'Number of validation samples for each activity'", ")", "\n", "parser", ".", "add_argument", "(", "'--pretrain_path'", ",", "default", "=", "''", ",", "type", "=", "str", ",", "help", "=", "'Pretrained model (.pth)'", ")", "\n", "parser", ".", "add_argument", "(", "'--ft_portion'", ",", "default", "=", "'complete'", ",", "type", "=", "str", ",", "\n", "help", "=", "'The portion of the model to apply fine tuning, either complete or last_layer'", ")", "\n", "parser", ".", "add_argument", "(", "'--no_train'", ",", "action", "=", "'store_true'", ",", "help", "=", "'If true, training is not performed.'", ")", "\n", "parser", ".", "set_defaults", "(", "no_train", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--no_val'", ",", "action", "=", "'store_true'", ",", "help", "=", "'If true, validation is not performed.'", ")", "\n", "parser", ".", "set_defaults", "(", "no_val", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--test'", ",", "action", "=", "'store_true'", ",", "help", "=", "'If true, test is performed.'", ")", "\n", "parser", ".", "set_defaults", "(", "test", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--test_subset'", ",", "default", "=", "'val'", ",", "type", "=", "str", ",", "help", "=", "'Used subset in test (val | test)'", ")", "\n", "parser", ".", "add_argument", "(", "'--scale_in_test'", ",", "default", "=", "1.0", ",", "type", "=", "float", ",", "help", "=", "'Spatial scale in test'", ")", "\n", "parser", ".", "add_argument", "(", "'--crop_position_in_test'", ",", "default", "=", "'c'", ",", "type", "=", "str", ",", "\n", "help", "=", "'Cropping method (c | tl | tr | bl | br) in test'", ")", "\n", "parser", ".", "add_argument", "(", "'--no_softmax_in_test'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'If true, output for each clip is not normalized using softmax.'", ")", "\n", "parser", ".", "set_defaults", "(", "no_softmax_in_test", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--no_cuda'", ",", "action", "=", "'store_true'", ",", "help", "=", "'If true, cuda is not used.'", ")", "\n", "parser", ".", "set_defaults", "(", "no_cuda", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--n_threads'", ",", "default", "=", "16", ",", "type", "=", "int", ",", "help", "=", "'Number of threads for multi-thread loading'", ")", "\n", "parser", ".", "add_argument", "(", "'--checkpoint'", ",", "default", "=", "10", ",", "type", "=", "int", ",", "help", "=", "'Trained model is saved at every this epochs.'", ")", "\n", "parser", ".", "add_argument", "(", "'--no_hflip'", ",", "action", "=", "'store_true'", ",", "help", "=", "'If true holizontal flipping is not performed.'", ")", "\n", "parser", ".", "set_defaults", "(", "no_hflip", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--norm_value'", ",", "default", "=", "1", ",", "type", "=", "int", ",", "\n", "help", "=", "'If 1, range of inputs is [0-255]. If 255, range of inputs is [0-1].'", ")", "\n", "parser", ".", "add_argument", "(", "'--model'", ",", "default", "=", "'resnet'", ",", "type", "=", "str", ",", "choices", "=", "{", "'mobilenetv2'", ",", "'i3d'", "}", ",", "\n", "help", "=", "'(resnet | preresnet | wideresnet | resnext | densenet | '", ")", "\n", "parser", ".", "add_argument", "(", "'--version'", ",", "default", "=", "1.1", ",", "type", "=", "float", ",", "help", "=", "'Version of the model'", ")", "\n", "parser", ".", "add_argument", "(", "'--model_depth'", ",", "default", "=", "18", ",", "type", "=", "int", ",", "help", "=", "'Depth of resnet (10 | 18 | 34 | 50 | 101)'", ")", "\n", "parser", ".", "add_argument", "(", "'--resnet_shortcut'", ",", "default", "=", "'B'", ",", "type", "=", "str", ",", "help", "=", "'Shortcut type of resnet (A | B)'", ")", "\n", "parser", ".", "add_argument", "(", "'--wide_resnet_k'", ",", "default", "=", "2", ",", "type", "=", "int", ",", "help", "=", "'Wide resnet k'", ")", "\n", "parser", ".", "add_argument", "(", "'--resnext_cardinality'", ",", "default", "=", "32", ",", "type", "=", "int", ",", "help", "=", "'ResNeXt cardinality'", ")", "\n", "parser", ".", "add_argument", "(", "'--groups'", ",", "default", "=", "3", ",", "type", "=", "int", ",", "help", "=", "'The number of groups at group convolutions at conv layers'", ")", "\n", "parser", ".", "add_argument", "(", "'--width_mult'", ",", "default", "=", "1.0", ",", "type", "=", "float", ",", "\n", "help", "=", "'The applied width multiplier to scale number of filters'", ")", "\n", "parser", ".", "add_argument", "(", "'--manual_seed'", ",", "default", "=", "1", ",", "type", "=", "int", ",", "help", "=", "'Manually set random seed'", ")", "\n", "parser", ".", "add_argument", "(", "'--resume_path'", ",", "default", "=", "''", ",", "type", "=", "str", ",", "help", "=", "'Save data (.pth) of previous training'", ")", "\n", "parser", ".", "add_argument", "(", "'--sample_duration'", ",", "default", "=", "None", ",", "type", "=", "int", ",", "help", "=", "'Temporal duration of inputs'", ")", "\n", "\n", "# Stereo", "\n", "parser", ".", "add_argument", "(", "'--maxdisp'", ",", "type", "=", "int", ",", "default", "=", "192", ",", "help", "=", "'maxium disparity'", ")", "\n", "parser", ".", "add_argument", "(", "'--datapath'", ",", "default", "=", "'dataset/'", ",", "help", "=", "'datapath'", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "help", "=", "'number of epochs to train'", ")", "\n", "parser", ".", "add_argument", "(", "'--loadmodel'", ",", "default", "=", "None", ",", "help", "=", "'load model'", ")", "\n", "parser", ".", "add_argument", "(", "'--savemodel'", ",", "default", "=", "'./'", ",", "help", "=", "'save model'", ")", "\n", "parser", ".", "add_argument", "(", "'--no-cuda'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "help", "=", "'enables CUDA training'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "metavar", "=", "'S'", ",", "help", "=", "'random seed (default: 1)'", ")", "\n", "parser", ".", "add_argument", "(", "'--PSM_mode'", ",", "type", "=", "str", ",", "default", "=", "'min'", ",", "help", "=", "'random seed (default: 1)'", ")", "\n", "parser", ".", "add_argument", "(", "'--statistic_mode'", ",", "type", "=", "str", ",", "default", "=", "'all'", ",", "choices", "=", "{", "'2d'", ",", "'3d'", ",", "'all'", "}", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "#", "\n", "args", ".", "enable_deepmodel_pooling", "=", "not", "args", ".", "disable_deepmodel_pooling", "\n", "args", ".", "model", "=", "'psm'", "if", "args", ".", "dataset", "==", "'sceneflow'", "else", "args", ".", "model", "\n", "args", ".", "model", "=", "args", ".", "model", ".", "lower", "(", ")", "\n", "args", ".", "dataset", "=", "args", ".", "dataset", ".", "lower", "(", ")", "\n", "args", ".", "statistic_mode", "=", "'all'", "if", "(", "args", ".", "model", "!=", "'psm'", ")", "else", "args", ".", "statistic_mode", "\n", "\n", "if", "args", ".", "dataset", ".", "find", "(", "'shapenet'", ")", ">", "-", "1", ":", "\n", "    ", "args", ".", "lr", "=", "0.1", "if", "args", ".", "lr", "is", "None", "else", "args", ".", "lr", "\n", "args", ".", "epoch", "=", "200", "if", "args", ".", "epoch", "is", "None", "else", "args", ".", "epoch", "\n", "", "elif", "args", ".", "dataset", ".", "find", "(", "'brats'", ")", ">", "-", "1", ":", "\n", "    ", "args", ".", "lr", "=", "0.001", "if", "args", ".", "lr", "is", "None", "else", "args", ".", "lr", "\n", "args", ".", "epoch", "=", "200", "if", "args", ".", "epoch", "is", "None", "else", "args", ".", "epoch", "\n", "\n", "", "if", "args", ".", "dataset", "!=", "'sceneflow'", ":", "# sceneflow path is from external result_path", "\n", "    ", "args", ".", "checkpoint_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "checkpoint_dir", ",", "\n", "'{}_{}'", ".", "format", "(", "args", ".", "dataset", ",", "args", ".", "model", ")", ")", "\n", "os", ".", "makedirs", "(", "args", ".", "checkpoint_dir", ")", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "checkpoint_dir", ")", "else", "None", "\n", "\n", "", "args", ".", "device", "=", "'cuda'", "if", "args", ".", "enable_cuda", "else", "'cpu'", "\n", "\n", "# Auto config", "\n", "num_classes", "=", "{", "'shapenet'", ":", "50", ",", "'brats'", ":", "5", ",", "'ucf101'", ":", "101", ",", "'sceneflow'", ":", "192", "}", "\n", "batch", "=", "{", "'shapenet'", ":", "4", ",", "'brats'", ":", "1", ",", "'ucf101'", ":", "8", ",", "'sceneflow'", ":", "12", "}", "\n", "spatial_size", "=", "{", "'shapenet'", ":", "64", ",", "'brats'", ":", "128", ",", "'ucf101'", ":", "None", ",", "'sceneflow'", ":", "None", "}", "\n", "lr", "=", "{", "'shapenet'", ":", "0.1", ",", "'brats'", ":", "0.001", ",", "'ucf101'", ":", "0.1", ",", "'sceneflow'", ":", "0.001", "}", "\n", "epoch", "=", "{", "'shapenet'", ":", "200", ",", "'brats'", ":", "200", ",", "'ucf101'", ":", "250", ",", "'sceneflow'", ":", "15", "}", "\n", "lr_decay", "=", "{", "'shapenet'", ":", "0.04", ",", "'brats'", ":", "0.04", ",", "'ucf101'", ":", "0", ",", "'sceneflow'", ":", "None", "}", "\n", "lr_steps", "=", "{", "'mobilenetv2'", ":", "[", "40", ",", "55", ",", "65", ",", "70", ",", "200", ",", "250", "]", ",", "\n", "'i3d'", ":", "[", "50", ",", "100", ",", "150", ",", "200", "]", "}", "\n", "resource_list_lambda", "=", "{", "'shapenet'", ":", "11", ",", "'brats'", ":", "15", ",", "'ucf101'", ":", "80", ",", "'sceneflow'", ":", "0", "}", "\n", "neuron_sparsity", "=", "{", "'shapenet'", ":", "0.7824", ",", "'brats'", ":", "0.7817", ",", "'sceneflow'", ":", "0", "}", "\n", "neuron_sparsity_ucf101", "=", "{", "'mobilenetv2'", ":", "0.3315", ",", "'i3d'", ":", "0.2532", "}", "\n", "sample_size_ucf101", "=", "{", "'mobilenetv2'", ":", "112", ",", "'i3d'", ":", "224", "}", "\n", "sample_duration", "=", "{", "'shapenet'", ":", "0", ",", "'brats'", ":", "0", ",", "'ucf101'", ":", "16", ",", "'sceneflow'", ":", "None", "}", "\n", "scale", "=", "{", "'shapenet'", ":", "10", ",", "'brats'", ":", "1", ",", "'ucf101'", ":", "16", ",", "'sceneflow'", ":", "None", "}", "\n", "\n", "args", ".", "n_class", "=", "num_classes", "[", "args", ".", "dataset", "]", "\n", "args", ".", "batch", "=", "batch", "[", "args", ".", "dataset", "]", "if", "args", ".", "batch", "is", "None", "else", "args", ".", "batch", "\n", "args", ".", "spatial_size", "=", "spatial_size", "[", "args", ".", "dataset", "]", "if", "args", ".", "spatial_size", "is", "None", "else", "args", ".", "spatial_size", "\n", "args", ".", "lr", "=", "lr", "[", "args", ".", "dataset", "]", "if", "args", ".", "lr", "is", "None", "else", "args", ".", "lr", "\n", "args", ".", "epoch", "=", "epoch", "[", "args", ".", "dataset", "]", "if", "args", ".", "epoch", "is", "None", "else", "args", ".", "epoch", "\n", "args", ".", "lr_decay", "=", "lr_decay", "[", "args", ".", "dataset", "]", "if", "args", ".", "lr_decay", "is", "None", "else", "args", ".", "lr_decay", "\n", "args", ".", "sample_duration", "=", "sample_duration", "[", "args", ".", "dataset", "]", "if", "args", ".", "sample_duration", "is", "None", "else", "args", ".", "sample_duration", "\n", "args", ".", "scale", "=", "scale", "[", "args", ".", "dataset", "]", "if", "args", ".", "scale", "is", "None", "else", "args", ".", "scale", "\n", "args", ".", "resource_list_lambda", "=", "resource_list_lambda", "[", "args", ".", "dataset", "]", "if", "args", ".", "resource_list_lambda", "is", "None", "else", "args", ".", "resource_list_lambda", "\n", "\n", "if", "args", ".", "dataset", "==", "'ucf101'", ":", "\n", "    ", "args", ".", "lr_steps", "=", "lr_steps", "[", "args", ".", "model", "]", "if", "args", ".", "lr_steps", "is", "None", "else", "args", ".", "lr_steps", "\n", "args", ".", "sample_size", "=", "sample_size_ucf101", "[", "args", ".", "model", "]", "if", "args", ".", "sample_size", "is", "None", "else", "args", ".", "sample_size", "\n", "\n", "", "if", "args", ".", "neuron_sparsity", "is", "None", ":", "\n", "    ", "if", "args", ".", "dataset", "==", "'ucf101'", ":", "\n", "      ", "args", ".", "neuron_sparsity", "=", "neuron_sparsity_ucf101", "[", "args", ".", "model", "]", "\n", "", "else", ":", "\n", "      ", "args", ".", "neuron_sparsity", "=", "neuron_sparsity", "[", "args", ".", "dataset", "]", "\n", "\n", "", "", "args", ".", "dim", "=", "args", ".", "spatial_size", "\n", "assert", "not", "(", "args", ".", "enable_train", "and", "args", ".", "enable_test", ")", "\n", "\n", "if", "args", ".", "dataset", "in", "{", "'shapenet'", ",", "'brats'", "}", ":", "\n", "    ", "assert", "args", ".", "spatial_size", ">=", "2", "**", "args", ".", "number_of_fmaps", "\n", "assert", "args", ".", "prune_spatial_size", ">=", "2", "**", "args", ".", "number_of_fmaps", "\n", "\n", "", "args", ".", "enable_neuron_prune", "=", "(", "args", ".", "neuron_sparsity", ">", "0", ")", "or", "(", "args", ".", "layer_sparsity_list", ">", "0", ")", "or", "(", "args", ".", "random_sparsity", ">", "0", ")", "\n", "args", ".", "enable_hidden_layer_prune", "=", "(", "args", ".", "hidden_layer_sparsity", ">", "0", ")", "\n", "args", ".", "enable_param_prune", "=", "(", "args", ".", "param_sparsity", ">", "0", ")", "\n", "assert", "(", "not", "args", ".", "enable_raw_grad", ")", "if", "args", ".", "enable_param_prune", "else", "True", "\n", "args", ".", "result_path", "=", "args", ".", "checkpoint_dir", "\n", "\n", "if", "args", ".", "neuron_sparsity", ">", "0", ":", "\n", "    ", "args", ".", "result_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "checkpoint_dir", ",", "\n", "'bz{}_prune{}_spa{:.2f}_lambda{}'", ".", "format", "(", "args", ".", "batch", ",", "\n", "args", ".", "resource_list_type", ",", "\n", "args", ".", "neuron_sparsity", ",", "\n", "args", ".", "resource_list_lambda", ")", ")", "\n", "os", ".", "makedirs", "(", "args", ".", "result_path", ")", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "result_path", ")", "else", "None", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "pretrain_path", ")", ":", "\n", "    ", "args", ".", "pretrain_path", "=", "''", "\n", "\n", "", "return", "args", "\n", "", ""]], "home.repos.pwc.inspect_result.zwxu064_RANP.None.train_brats.calculate_accuracy": [[23, 33], ["common_part.double().sum", "valid_area_est.double().sum", "valid_area_tar.double().sum", "common_part.double", "valid_area_est.double", "valid_area_tar.double", "common_part.byte", "common_part.byte"], "function", ["None"], ["def", "calculate_accuracy", "(", "estimation", ",", "target", ",", "eps", "=", "1e-8", ")", ":", "\n", "  ", "valid_area_est", "=", "(", "estimation", ">", "0", ")", ".", "float", "(", ")", "\n", "valid_area_tar", "=", "(", "target", ">", "0", ")", ".", "float", "(", ")", "\n", "\n", "common_part", "=", "valid_area_est", "*", "valid_area_tar", "\n", "intersection", "=", "(", "estimation", "[", "common_part", ".", "byte", "(", ")", "]", "==", "target", "[", "common_part", ".", "byte", "(", ")", "]", ")", ".", "double", "(", ")", ".", "sum", "(", ")", "\n", "union", "=", "valid_area_est", ".", "double", "(", ")", ".", "sum", "(", ")", "+", "valid_area_tar", ".", "double", "(", ")", ".", "sum", "(", ")", "-", "common_part", ".", "double", "(", ")", ".", "sum", "(", ")", "\n", "iou", "=", "intersection", "/", "(", "union", "+", "eps", ")", "\n", "\n", "return", "iou", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.None.train_brats.adjust_learning_rate": [[35, 39], ["None"], "function", ["None"], ["", "def", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ")", ":", "\n", "  ", "if", "epoch", "+", "1", "in", "{", "150", ",", "250", "}", ":", "\n", "    ", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "      ", "param_group", "[", "'lr'", "]", "*=", "0.1", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.None.train_brats.train": [[41, 111], ["model.train", "aux.utils.AverageMeter", "aux.utils.AverageMeter", "aux.utils.AverageMeter", "train_brats.adjust_learning_rate", "time.time", "enumerate", "print", "aux.utils.write_to_tensorboard", "len", "isinstance", "input.size", "valid_area.reshape", "optimizer.zero_grad", "model", "prediction.reshape.reshape", "gt.reshape.reshape", "criterion.backward", "optimizer.step", "prediction.reshape.argmax", "train_brats.calculate_accuracy", "range", "aux.utils.AverageMeter.update", "aux.utils.AverageMeter.update", "print", "aux.utils.write_to_tensorboard", "time.time", "criterion", "criterion", "pred_one.argmax.argmax", "third_party.miccai.metrics.dice", "aux.utils.AverageMeter.update", "criterion.item", "input.cuda", "gt.reshape.cuda", "pred_one[].cpu().numpy", "gt_one[].cpu().numpy", "numpy.array", "pred_one[].cpu", "gt_one[].cpu"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.data.train", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.adjust_learning_rate", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.write_to_tensorboard", "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_NvNet.utils.calculate_accuracy", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.AverageMeter.update", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.AverageMeter.update", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.write_to_tensorboard", "home.repos.pwc.inspect_result.zwxu064_RANP.miccai.metrics.dice", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.AverageMeter.update"], ["", "", "", "def", "train", "(", "model", ",", "dataset", ",", "optimizer", ",", "writer", ",", "args", ")", ":", "\n", "  ", "model", ".", "train", "(", ")", "\n", "train_loss", "=", "AverageMeter", "(", ")", "\n", "train_acc", "=", "AverageMeter", "(", ")", "\n", "scores", "=", "AverageMeter", "(", ")", "\n", "adjust_learning_rate", "(", "optimizer", ",", "args", ".", "current_epoch", ")", "\n", "time_start", "=", "time", ".", "time", "(", ")", "\n", "current_iter", "=", "args", ".", "current_epoch", "*", "len", "(", "dataset", ")", "\n", "\n", "for", "idx", ",", "data", "in", "enumerate", "(", "dataset", ")", ":", "\n", "    ", "if", "isinstance", "(", "data", ",", "dict", ")", ":", "\n", "      ", "input", ",", "gt", "=", "data", "[", "'x'", "]", ",", "data", "[", "'y'", "]", "\n", "", "else", ":", "\n", "      ", "input", ",", "gt", "=", "data", "[", "0", "]", ",", "data", "[", "1", "]", "\n", "\n", "", "actual_batch", "=", "input", ".", "size", "(", "0", ")", "\n", "\n", "if", "args", ".", "enable_cuda", ":", "\n", "      ", "input", ",", "gt", "=", "input", ".", "cuda", "(", ")", ",", "gt", ".", "cuda", "(", ")", "\n", "\n", "# For padding area, gt will be fed by 0 but not ignored in criterion", "\n", "", "valid_area", "=", "(", "gt", "!=", "args", ".", "ignore_index", ")", "\n", "valid_area_flatten", "=", "valid_area", ".", "reshape", "(", "actual_batch", ",", "-", "1", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "prediction", "=", "model", "(", "input", ")", "# prediction-score:(batch,5,128,128,128)", "\n", "prediction", "=", "prediction", ".", "reshape", "(", "actual_batch", ",", "args", ".", "n_class", ",", "-", "1", ")", "\n", "gt", "=", "gt", ".", "reshape", "(", "actual_batch", ",", "-", "1", ")", "\n", "\n", "if", "args", ".", "alpha", "is", "None", ":", "\n", "      ", "loss", "=", "criterion", "(", "prediction", ",", "gt", ",", "ignore_index", "=", "args", ".", "ignore_index", ")", "\n", "", "else", ":", "\n", "      ", "loss", "=", "criterion", "(", "prediction", ",", "gt", ",", "args", ".", "alpha", ",", "ignore_index", "=", "args", ".", "ignore_index", ")", "\n", "\n", "", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "seg_estimated", "=", "prediction", ".", "argmax", "(", "1", ")", "\n", "accuracies", "=", "calculate_accuracy", "(", "seg_estimated", "[", "valid_area_flatten", "]", ",", "gt", "[", "valid_area_flatten", "]", ")", "\n", "\n", "# New metrics", "\n", "for", "b_idx", "in", "range", "(", "actual_batch", ")", ":", "\n", "      ", "pred_one", "=", "prediction", "[", "b_idx", "]", "\n", "gt_one", "=", "gt", "[", "b_idx", "]", "\n", "pred_one", "=", "pred_one", ".", "argmax", "(", "0", ")", "\n", "score_one", "=", "dice", "(", "pred_one", "[", "valid_area_flatten", "[", "b_idx", "]", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "gt_one", "[", "valid_area_flatten", "[", "b_idx", "]", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "scores", ".", "update", "(", "np", ".", "array", "(", "score_one", ")", ")", "\n", "\n", "", "train_loss", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "actual_batch", ")", "\n", "train_acc", ".", "update", "(", "accuracies", ",", "actual_batch", ")", "\n", "print", "(", "'Epoch: {}, batch: {}, train loss: {:.4f}, train acc: {:.4f}; '", "'whole: {:.4f}, core: {:.4f}, enhance: {:.4f}.'", ".", "format", "(", "args", ".", "current_epoch", ",", "idx", ",", "train_loss", ".", "avg", ",", "train_acc", ".", "avg", ",", "\n", "scores", ".", "avg", "[", "0", "]", ",", "scores", ".", "avg", "[", "1", "]", ",", "scores", ".", "avg", "[", "2", "]", ")", ")", "\n", "\n", "current_iter", "+=", "1", "\n", "train_iter_result", "=", "{", "'mode'", ":", "'train'", ",", "'batch_iter'", ":", "current_iter", ",", "'train_loss_iter'", ":", "train_loss", ".", "avg", "}", "\n", "write_to_tensorboard", "(", "'scalar'", ",", "writer", ",", "train_iter_result", ")", "\n", "\n", "", "duration", "=", "time", ".", "time", "(", ")", "-", "time_start", "\n", "print", "(", "'Epoch: {}, train loss: {:.4f}, train acc: {:.4f}; '", "'whole: {:.4f}, core: {:.4f}, enhance: {:.4f}; time: {:.4f}s'", ".", "format", "(", "args", ".", "current_epoch", ",", "train_loss", ".", "avg", ",", "train_acc", ".", "avg", ",", "\n", "scores", ".", "avg", "[", "0", "]", ",", "scores", ".", "avg", "[", "1", "]", ",", "scores", ".", "avg", "[", "2", "]", ",", "duration", ")", ")", "\n", "\n", "train_result", "=", "{", "'mode'", ":", "'train'", ",", "'epoch'", ":", "args", ".", "current_epoch", ",", "\n", "'train_loss'", ":", "train_loss", ".", "avg", ",", "'train_acc'", ":", "train_acc", ".", "avg", ",", "\n", "'train_whole'", ":", "scores", ".", "avg", "[", "0", "]", ",", "'train_core'", ":", "scores", ".", "avg", "[", "1", "]", ",", "\n", "'train_enhance'", ":", "scores", ".", "avg", "[", "2", "]", "}", "\n", "write_to_tensorboard", "(", "'scalar'", ",", "writer", ",", "train_result", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.None.train_brats.valid": [[113, 174], ["model.eval", "aux.utils.AverageMeter", "aux.utils.AverageMeter", "aux.utils.AverageMeter", "time.time", "enumerate", "aux.utils.write_to_tensorboard", "print", "isinstance", "input.size", "valid_area.reshape", "model", "prediction.reshape.reshape", "gt.reshape.reshape", "train_brats.calculate_accuracy", "range", "aux.utils.AverageMeter.update", "aux.utils.AverageMeter.update", "print", "time.time", "criterion", "criterion", "pred_one.argmax.argmax", "third_party.miccai.metrics.dice", "aux.utils.AverageMeter.update", "criterion.item", "input.cuda", "gt.reshape.cuda", "pred_one[].cpu().numpy", "gt_one[].cpu().numpy", "numpy.array", "torch.Softmax", "pred_one[].cpu", "gt_one[].cpu"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.write_to_tensorboard", "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_NvNet.utils.calculate_accuracy", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.AverageMeter.update", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.AverageMeter.update", "home.repos.pwc.inspect_result.zwxu064_RANP.miccai.metrics.dice", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.AverageMeter.update"], ["", "def", "valid", "(", "model", ",", "dataset", ",", "writer", ",", "names", ",", "args", ")", ":", "\n", "  ", "model", ".", "eval", "(", ")", "\n", "valid_loss", "=", "AverageMeter", "(", ")", "\n", "valid_acc", "=", "AverageMeter", "(", ")", "\n", "scores", "=", "AverageMeter", "(", ")", "\n", "time_start", "=", "time", ".", "time", "(", ")", "\n", "\n", "for", "idx", ",", "data", "in", "enumerate", "(", "dataset", ")", ":", "\n", "    ", "if", "isinstance", "(", "data", ",", "dict", ")", ":", "\n", "      ", "input", ",", "gt", "=", "data", "[", "'x'", "]", ",", "data", "[", "'y'", "]", "\n", "", "else", ":", "\n", "      ", "input", ",", "gt", "=", "data", "[", "0", "]", ",", "data", "[", "1", "]", "\n", "\n", "", "actual_batch", "=", "input", ".", "size", "(", "0", ")", "\n", "\n", "if", "args", ".", "enable_cuda", ":", "\n", "      ", "input", ",", "gt", "=", "input", ".", "cuda", "(", ")", ",", "gt", ".", "cuda", "(", ")", "\n", "\n", "", "valid_area", "=", "(", "gt", "!=", "args", ".", "ignore_index", ")", "\n", "valid_area_flatten", "=", "valid_area", ".", "reshape", "(", "actual_batch", ",", "-", "1", ")", "\n", "\n", "prediction", "=", "model", "(", "input", ")", "\n", "prediction", "=", "prediction", ".", "reshape", "(", "actual_batch", ",", "args", ".", "n_class", ",", "-", "1", ")", "\n", "gt", "=", "gt", ".", "reshape", "(", "actual_batch", ",", "-", "1", ")", "\n", "\n", "if", "args", ".", "alpha", "is", "None", ":", "\n", "      ", "loss", "=", "criterion", "(", "prediction", ",", "gt", ",", "ignore_index", "=", "args", ".", "ignore_index", ")", "\n", "", "else", ":", "\n", "      ", "loss", "=", "criterion", "(", "prediction", ",", "gt", ",", "args", ".", "alpha", ",", "ignore_index", "=", "args", ".", "ignore_index", ")", "\n", "\n", "", "seg_estimated", "=", "nn", ".", "Softmax", "(", "dim", "=", "1", ")", "(", "prediction", ")", ".", "argmax", "(", "1", ")", "\n", "accuracies", "=", "calculate_accuracy", "(", "seg_estimated", "[", "valid_area_flatten", "]", ",", "gt", "[", "valid_area_flatten", "]", ")", "\n", "\n", "# New metrics", "\n", "for", "b_idx", "in", "range", "(", "actual_batch", ")", ":", "\n", "      ", "pred_one", "=", "prediction", "[", "b_idx", "]", "\n", "gt_one", "=", "gt", "[", "b_idx", "]", "\n", "pred_one", "=", "pred_one", ".", "argmax", "(", "0", ")", "\n", "score_one", "=", "dice", "(", "pred_one", "[", "valid_area_flatten", "[", "b_idx", "]", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "gt_one", "[", "valid_area_flatten", "[", "b_idx", "]", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "scores", ".", "update", "(", "np", ".", "array", "(", "score_one", ")", ")", "\n", "\n", "", "valid_acc", ".", "update", "(", "accuracies", ",", "actual_batch", ")", "\n", "valid_loss", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "actual_batch", ")", "\n", "print", "(", "'Epoch: {}, batch: {}, valid loss: {:.4f}, valid acc: {:.4f}; '", "'whole: {:.4f}, core: {:.4f}, enhance: {:.4f}, name: {}.'", ".", "format", "(", "args", ".", "current_epoch", ",", "idx", ",", "valid_loss", ".", "avg", ",", "valid_acc", ".", "avg", ",", "\n", "scores", ".", "avg", "[", "0", "]", ",", "scores", ".", "avg", "[", "1", "]", ",", "scores", ".", "avg", "[", "2", "]", ",", "names", "[", "idx", "]", ")", ")", "\n", "\n", "", "duration", "=", "time", ".", "time", "(", ")", "-", "time_start", "\n", "valid_result", "=", "{", "'mode'", ":", "'valid'", ",", "'epoch'", ":", "args", ".", "current_epoch", ",", "\n", "'valid_loss'", ":", "valid_loss", ".", "avg", ",", "'valid_acc'", ":", "valid_acc", ".", "avg", ",", "\n", "'valid_whole'", ":", "scores", ".", "avg", "[", "0", "]", ",", "'valid_core'", ":", "scores", ".", "avg", "[", "1", "]", ",", "\n", "'valid_enhance'", ":", "scores", ".", "avg", "[", "2", "]", "}", "\n", "write_to_tensorboard", "(", "'scalar'", ",", "writer", ",", "valid_result", ")", "\n", "\n", "print", "(", "'Epoch: {}, valid loss: {:.4f}, valid acc: {:.4f}; '", "\n", "'whole: {:.4f}, core: {:.4f}, enhance: {:.4f}; time: {:.4f}s'", ".", "format", "(", "args", ".", "current_epoch", ",", "valid_loss", ".", "avg", ",", "valid_acc", ".", "avg", ",", "\n", "scores", ".", "avg", "[", "0", "]", ",", "scores", ".", "avg", "[", "1", "]", ",", "scores", ".", "avg", "[", "2", "]", ",", "duration", ")", ")", "\n", "\n", "return", "valid_acc", ".", "avg", ",", "valid_loss", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.None.train_brats.test": [[176, 208], ["model.eval", "enumerate", "isinstance", "model", "numpy.transpose", "numpy.transpose", "numpy.transpose", "print", "third_party.miccai.Dataloader.dataloader.multi_slice_viewer", "matplotlib.show", "int", "inputs[].cpu().numpy", "gt[].cpu().numpy", "numpy.argmax", "input", "range", "np.transpose.cuda", "np.transpose.cuda", "prediction[].cpu().numpy", "matplotlib.figure", "matplotlib.imshow", "matplotlib.axis", "matplotlib.savefig", "matplotlib.close", "inputs[].cpu", "gt[].cpu", "prediction[].cpu"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.Dataloader.dataloader.multi_slice_viewer"], ["", "def", "test", "(", "model", ",", "dataset", ",", "args", ")", ":", "\n", "  ", "model", ".", "eval", "(", ")", "\n", "\n", "for", "idx", ",", "data", "in", "enumerate", "(", "dataset", ")", ":", "\n", "    ", "if", "isinstance", "(", "data", ",", "dict", ")", ":", "\n", "      ", "inputs", ",", "gt", "=", "data", "[", "'x'", "]", ",", "data", "[", "'y'", "]", "\n", "", "else", ":", "\n", "      ", "inputs", ",", "gt", "=", "data", "[", "0", "]", ",", "data", "[", "1", "]", "\n", "\n", "", "if", "args", ".", "enable_cuda", ":", "\n", "      ", "inputs", ",", "gt", "=", "inputs", ".", "cuda", "(", ")", ",", "gt", ".", "cuda", "(", ")", "\n", "\n", "", "prediction", "=", "model", "(", "inputs", ")", "\n", "name", "=", "data", "[", "2", "]", "[", "0", "]", "\n", "inputs", "=", "np", ".", "transpose", "(", "inputs", "[", "0", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "(", "0", ",", "3", ",", "2", ",", "1", ")", ")", "\n", "gt", "=", "np", ".", "transpose", "(", "gt", "[", "0", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "(", "2", ",", "1", ",", "0", ")", ")", "\n", "prediction", "=", "np", ".", "transpose", "(", "np", ".", "argmax", "(", "prediction", "[", "0", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "0", ")", ",", "(", "2", ",", "1", ",", "0", ")", ")", "\n", "viz_data", "=", "[", "inputs", "[", "0", "]", ",", "inputs", "[", "1", "]", ",", "inputs", "[", "2", "]", ",", "inputs", "[", "3", "]", ",", "gt", ",", "prediction", "]", "\n", "viz_disp", "=", "[", "'t1'", ",", "'t1ce'", ",", "'t2'", ",", "'flair'", ",", "'gt'", ",", "'pred'", "]", "\n", "\n", "print", "(", "name", ")", "\n", "multi_slice_viewer", "(", "'manual'", ",", "viz_data", ",", "viz_disp", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n", "index", "=", "int", "(", "input", "(", "'please input a number:\\n'", ")", ")", "\n", "if", "index", ">=", "0", ":", "\n", "      ", "for", "k", "in", "range", "(", "6", ")", ":", "\n", "        ", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "imshow", "(", "viz_data", "[", "k", "]", "[", "index", "]", ")", "\n", "plt", ".", "axis", "(", "False", ")", "\n", "plt", ".", "savefig", "(", "'viz_figures/brats/{}_{}_index{}.eps'", ".", "format", "(", "name", ",", "viz_disp", "[", "k", "]", ",", "index", ")", ",", "format", "=", "'eps'", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.snip.SNIP": [[10, 92], ["copy.deepcopy", "net.to.to", "net.to.modules", "enumerate", "isinstance", "isinstance", "isinstance", "inputs.to.to", "targets.to.to", "net.to.zero_grad", "net.to.forward", "torch.nll_loss", "F.nll_loss.backward", "net.to.modules", "prune.update_grads_average", "isinstance", "isinstance", "torch.Parameter", "types.MethodType", "types.MethodType", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.init.xavier_normal_", "torch.Parameter", "torch.init.zeros_", "torch.init.uniform_", "torch.init.constant_", "isinstance", "isinstance", "grads_abs.append", "torch.init.xavier_uniform_", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.abs", "torch.abs", "torch.abs", "grads_abs.append", "grads_abs.append", "torch.init.kaiming_normal_", "torch.abs", "torch.abs", "torch.abs", "torch.init.kaiming_uniform_", "torch.init.orthogonal_"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.StereoLoss.forward", "home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.prune.update_grads_average"], ["def", "SNIP", "(", "net", ",", "train_dataloader", ",", "args", ")", ":", "\n", "# Let's create a fresh copy of the network so that we're not worried about", "\n", "# affecting the actual training-phase", "\n", "    ", "net", "=", "copy", ".", "deepcopy", "(", "net", ")", "\n", "net", "=", "net", ".", "to", "(", "args", ".", "device", ")", "\n", "\n", "# Monkey-patch the Linear and Conv2d layer to learn the multiplicative mask", "\n", "# instead of the weights", "\n", "# Zhiwei instead of using random one batch, using the whole dataset to get average grads of mask", "\n", "for", "layer", "in", "net", ".", "modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "layer", ",", "nn", ".", "Conv2d", ")", "or", "isinstance", "(", "layer", ",", "nn", ".", "Linear", ")", ":", "\n", "# This is for reproducing, will affect pruning as well as training", "\n", "# torch.manual_seed(0)", "\n", "# torch.cuda.manual_seed(0)", "\n", "# torch.cuda.manual_seed_all(0)", "\n", "\n", "            ", "layer", ".", "weight_mask", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones_like", "(", "layer", ".", "weight", ")", ")", "\n", "\n", "if", "args", ".", "weight_init", "==", "'xn'", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_normal_", "(", "layer", ".", "weight", ")", "\n", "", "elif", "args", ".", "weight_init", "==", "'xu'", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_uniform_", "(", "layer", ".", "weight", ")", "\n", "", "elif", "args", ".", "weight_init", "==", "'kn'", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "layer", ".", "weight", ")", "\n", "", "elif", "args", ".", "weight_init", "==", "'ku'", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_uniform_", "(", "layer", ".", "weight", ")", "\n", "", "elif", "args", ".", "weight", "==", "'orthogonal'", ":", "\n", "                ", "nn", ".", "init", ".", "orthogonal_", "(", "layer", ".", "weight", ")", "\n", "", "else", ":", "\n", "                ", "assert", "False", "\n", "\n", "", "layer", ".", "weight", ".", "requires_grad", "=", "False", "\n", "\n", "if", "layer", ".", "bias", "is", "not", "None", ":", "\n", "                ", "layer", ".", "bias_mask", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones_like", "(", "layer", ".", "bias", ")", ")", "\n", "nn", ".", "init", ".", "zeros_", "(", "layer", ".", "bias", ")", "\n", "layer", ".", "bias", ".", "requires_grad", "=", "False", "\n", "\n", "# Bug this is important for reproducing", "\n", "", "", "if", "isinstance", "(", "layer", ",", "(", "nn", ".", "BatchNorm1d", ",", "nn", ".", "BatchNorm2d", ",", "nn", ".", "BatchNorm3d", ")", ")", ":", "\n", "            ", "if", "layer", ".", "weight", "is", "not", "None", ":", "\n", "# not good, this will make channel prune remove whole layers", "\n", "# nn.init.constant_(layer.weight, 1)", "\n", "                ", "nn", ".", "init", ".", "uniform_", "(", "layer", ".", "weight", ")", "\n", "\n", "", "if", "layer", ".", "bias", "is", "not", "None", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "layer", ".", "bias", ",", "0", ")", "\n", "\n", "# Override the forward methods:", "\n", "", "", "if", "isinstance", "(", "layer", ",", "nn", ".", "Conv2d", ")", ":", "\n", "            ", "layer", ".", "forward", "=", "types", ".", "MethodType", "(", "snip_forward_conv2d", ",", "layer", ")", "\n", "\n", "", "if", "isinstance", "(", "layer", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "layer", ".", "forward", "=", "types", ".", "MethodType", "(", "snip_forward_linear", ",", "layer", ")", "\n", "\n", "# Grab a single batch from the training dataset", "\n", "", "", "grads_abs_average", "=", "[", "]", "\n", "for", "idx", ",", "data", "in", "enumerate", "(", "train_dataloader", ")", ":", "\n", "        ", "inputs", ",", "targets", "=", "data", "\n", "inputs", "=", "inputs", ".", "to", "(", "args", ".", "device", ")", "\n", "targets", "=", "targets", ".", "to", "(", "args", ".", "device", ")", "\n", "\n", "# Compute gradients (but don't apply them)", "\n", "net", ".", "zero_grad", "(", ")", "\n", "outputs", "=", "net", ".", "forward", "(", "inputs", ")", "\n", "loss", "=", "F", ".", "nll_loss", "(", "outputs", ",", "targets", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "\n", "grads_abs", "=", "[", "]", "\n", "for", "layer", "in", "net", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "layer", ",", "nn", ".", "Conv2d", ")", "or", "isinstance", "(", "layer", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "grads_abs", ".", "append", "(", "torch", ".", "abs", "(", "layer", ".", "weight_mask", ".", "grad", ")", ")", "\n", "\n", "if", "layer", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "grads_abs", ".", "append", "(", "torch", ".", "abs", "(", "layer", ".", "bias_mask", ".", "grad", ")", ")", "\n", "", "else", ":", "\n", "                    ", "grads_abs", ".", "append", "(", "None", ")", "\n", "\n", "", "", "", "grads_abs_average", "=", "update_grads_average", "(", "grads_abs_average", ",", "grads_abs", ",", "idx", ")", "\n", "\n", "", "return", "grads_abs_average", "\n", "", ""]], "home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.flops_old.reparam_network": [[14, 35], ["copy.deepcopy", "copy.deepcopy", "filter", "enumerate", "copy.deepcopy.modules", "layer.weight.new_ones", "isinstance", "isinstance", "isinstance", "isinstance"], "function", ["None"], ["def", "reparam_network", "(", "net", ",", "mask", ")", ":", "\n", "  ", "net", "=", "copy", ".", "deepcopy", "(", "net", ")", "\n", "mask", "=", "copy", ".", "deepcopy", "(", "mask", ")", "\n", "prunable_layers", "=", "filter", "(", "lambda", "layer", ":", "isinstance", "(", "layer", ",", "nn", ".", "Conv2d", ")", "\n", "or", "isinstance", "(", "layer", ",", "nn", ".", "Linear", ")", "\n", "or", "isinstance", "(", "layer", ",", "nn", ".", "Conv3d", ")", "\n", "or", "isinstance", "(", "layer", ",", "nn", ".", "ConvTranspose3d", ")", ",", "\n", "net", ".", "modules", "(", ")", ")", "\n", "\n", "for", "idx", ",", "layer", "in", "enumerate", "(", "prunable_layers", ")", ":", "\n", "    ", "weight_mask", "=", "mask", "[", "2", "*", "idx", "]", "\n", "bias_mask", "=", "mask", "[", "2", "*", "idx", "+", "1", "]", "\n", "weight_mask", "=", "layer", ".", "weight", ".", "new_ones", "(", "layer", ".", "weight", ".", "shape", ")", "if", "(", "weight_mask", "is", "None", ")", "else", "weight_mask", "\n", "assert", "(", "layer", ".", "weight", ".", "shape", "==", "weight_mask", ".", "shape", ")", "\n", "layer", ".", "weight_mask", "=", "weight_mask", "# create new variable \"weight_mask\" if it does not have it", "\n", "\n", "if", "bias_mask", "is", "not", "None", ":", "\n", "      ", "assert", "layer", ".", "bias", ".", "shape", "==", "bias_mask", ".", "shape", "\n", "layer", ".", "bias_mask", "=", "bias_mask", "# create new variable \"bias_mask\" if it does not have it", "\n", "\n", "", "", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.flops_old.cal_flops": [[37, 48], ["copy.deepcopy", "copy.deepcopy", "flops_old.reparam_network", "thop.profile.profile", "isinstance"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.flops_old.reparam_network", "home.repos.pwc.inspect_result.zwxu064_RANP.thop.profile.profile"], ["", "def", "cal_flops", "(", "net", ",", "mask", ",", "input", ",", "enable_gflops", "=", "True", ",", "comment", "=", "''", ")", ":", "\n", "  ", "net", "=", "copy", ".", "deepcopy", "(", "net", ")", "\n", "mask", "=", "copy", ".", "deepcopy", "(", "mask", ")", "\n", "input", "=", "[", "input", "]", "if", "(", "not", "isinstance", "(", "input", ",", "list", ")", ")", "else", "input", "\n", "net", "=", "reparam_network", "(", "net", ",", "mask", ")", "\n", "flops", ",", "params", "=", "profile", "(", "net", ",", "input", ",", "verbose", "=", "False", ")", "\n", "\n", "if", "enable_gflops", ":", "\n", "    ", "flops", "/=", "10", "**", "9", "\n", "\n", "", "return", "flops", ",", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.prune_utils.convert_dim_conv2fully": [[5, 34], ["copy.deepcopy", "range", "len", "len", "current_layer.size", "next_layer.size", "next_layer.size", "next_layer.view", "next_layer.size"], "function", ["None"], ["def", "convert_dim_conv2fully", "(", "grads", ")", ":", "\n", "  ", "grads", "=", "copy", ".", "deepcopy", "(", "grads", ")", "# grads is a reference, changing its size in function will change it externally", "\n", "\n", "n_layers", "=", "len", "(", "grads", ")", "//", "2", "\n", "\n", "for", "idx", "in", "range", "(", "n_layers", "-", "1", ")", ":", "\n", "    ", "weight_idx", "=", "2", "*", "idx", "\n", "next_weight_idx", "=", "2", "*", "(", "idx", "+", "1", ")", "\n", "current_layer", "=", "grads", "[", "weight_idx", "]", "\n", "next_layer", "=", "grads", "[", "next_weight_idx", "]", "\n", "out_c_current", "=", "current_layer", ".", "size", "(", ")", "[", "0", "]", "\n", "next_layer_size_len", "=", "len", "(", "next_layer", ".", "size", "(", ")", ")", "\n", "\n", "if", "next_layer_size_len", "==", "4", ":", "\n", "      ", "out_c_next", ",", "in_c_next", ",", "h_next", ",", "w_next", "=", "next_layer", ".", "size", "(", ")", "\n", "", "elif", "next_layer_size_len", "==", "2", ":", "\n", "      ", "out_c_next", ",", "in_c_next", "=", "next_layer", ".", "size", "(", ")", "\n", "h_next", ",", "w_next", "=", "1", ",", "1", "\n", "", "else", ":", "\n", "      ", "assert", "False", "\n", "\n", "# This usually happens from a convoluational layer to a fully-connected layer", "\n", "# because for some network, the output of a convolutional layer will be flatten, then to a fully-connected layer,", "\n", "# such as lenet5 and lenet5_caffe", "\n", "", "if", "out_c_current", "!=", "in_c_next", ":", "\n", "      ", "assert", "(", "h_next", "==", "1", ")", "and", "(", "w_next", "==", "1", ")", "\n", "grads", "[", "next_weight_idx", "]", "=", "next_layer", ".", "view", "(", "out_c_next", ",", "out_c_current", ",", "(", "in_c_next", "//", "out_c_current", ")", "*", "h_next", ",", "w_next", ")", "\n", "\n", "", "", "return", "grads", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.prune_utils.resume_dim_conv2fully": [[36, 51], ["copy.deepcopy", "range", "len", "len", "len", "mask_current.size", "grad_current.size", "mask_current.view", "mask_current.flatten().size", "grad_current.flatten().size", "grad_current.size", "mask_current.flatten", "grad_current.flatten"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.unet.losses.flatten", "home.repos.pwc.inspect_result.zwxu064_RANP.unet.losses.flatten"], ["", "def", "resume_dim_conv2fully", "(", "mask", ",", "grads", ")", ":", "\n", "  ", "mask", "=", "copy", ".", "deepcopy", "(", "mask", ")", "# grads is a reference, changing its size in function will change it externally", "\n", "\n", "assert", "len", "(", "mask", ")", "==", "len", "(", "grads", ")", "\n", "n_layers", "=", "len", "(", "grads", ")", "//", "2", "\n", "\n", "for", "idx", "in", "range", "(", "n_layers", ")", ":", "\n", "    ", "weight_idx", "=", "2", "*", "idx", "\n", "mask_current", "=", "mask", "[", "weight_idx", "]", "\n", "grad_current", "=", "grads", "[", "weight_idx", "]", "\n", "if", "mask_current", ".", "size", "(", ")", "!=", "grad_current", ".", "size", "(", ")", ":", "\n", "      ", "assert", "mask_current", ".", "flatten", "(", ")", ".", "size", "(", ")", "==", "grad_current", ".", "flatten", "(", ")", ".", "size", "(", ")", "\n", "mask", "[", "weight_idx", "]", "=", "mask_current", ".", "view", "(", "grad_current", ".", "size", "(", ")", ")", "\n", "\n", "", "", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.prune_utils.check_same": [[53, 71], ["isinstance", "len", "range", "len", "len", "torch.equal", "torch.equal"], "function", ["None"], ["", "def", "check_same", "(", "input_a", ",", "input_b", ")", ":", "\n", "  ", "if", "(", "input_a", "is", "None", ")", "or", "(", "input_b", "is", "None", ")", ":", "\n", "    ", "return", "False", "\n", "\n", "", "is_same", "=", "True", "\n", "\n", "if", "isinstance", "(", "input_a", ",", "list", ")", ":", "\n", "    ", "assert", "len", "(", "input_a", ")", "==", "len", "(", "input_b", ")", "\n", "num", "=", "len", "(", "input_a", ")", "\n", "\n", "for", "idx", "in", "range", "(", "num", ")", ":", "\n", "      ", "if", "not", "torch", ".", "equal", "(", "input_a", "[", "idx", "]", ",", "input_b", "[", "idx", "]", ")", ":", "\n", "        ", "is_same", "=", "False", "\n", "break", "\n", "", "", "", "else", ":", "\n", "    ", "is_same", "=", "False", "if", "(", "not", "torch", ".", "equal", "(", "input_a", ",", "input_b", ")", ")", "else", "True", "\n", "\n", "", "return", "is_same", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.prune_utils.cal_channel_prune_grad": [[73, 125], ["range", "torch.cat", "torch.topk", "range", "len", "grads[].size", "channel_accum_grad_list.append", "torch.cat.size", "int", "torch.cat.max", "grads[].view().sum", "channel_accum_grad_list[].flatten", "torch.cat.sum", "range", "grads[].view", "grads[].view().repeat", "grads[].view", "grads[].view.sum", "grads[].view().mean", "grads[].view", "grads[].view.max", "grads[].view.size", "grads[].view", "grads[].view", "grads[].view"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.unet.losses.flatten", "home.repos.pwc.inspect_result.zwxu064_RANP.models.deepmedic.repeat"], ["", "def", "cal_channel_prune_grad", "(", "grads", ",", "channel_sparsity", ",", "mode", "=", "'max'", ",", "norm", "=", "'max'", ")", ":", "\n", "  ", "n_layers", "=", "len", "(", "grads", ")", "//", "2", "\n", "channel_accum_grad_list", "=", "[", "]", "\n", "\n", "for", "idx", "in", "range", "(", "n_layers", ")", ":", "\n", "    ", "weight_idx", ",", "bias_idx", "=", "2", "*", "idx", ",", "2", "*", "idx", "+", "1", "\n", "grad_size", "=", "grads", "[", "weight_idx", "]", ".", "size", "(", ")", "\n", "out_c", ",", "in_c", "=", "grad_size", "[", "0", "]", ",", "grad_size", "[", "1", "]", "\n", "\n", "# Bug: how to define the importance of a channel:", "\n", "# 'sum' not good, fully-connected layers would be removed dramatically as its kernel size is just one, would have 0-retained layer", "\n", "# 'mean', not good, convolutional layers would be removed dramatically as its kernel size is much larger than fully-connected layers", "\n", "#                   (whose kernel size is 1), the importance of a channel will be decreased by average.", "\n", "# 'max', good, highest grad decides how important this channel is", "\n", "if", "mode", "==", "'sum'", ":", "\n", "      ", "channel_accum", "=", "grads", "[", "weight_idx", "]", ".", "view", "(", "out_c", ",", "in_c", ",", "-", "1", ")", ".", "sum", "(", "2", ")", "\n", "channel_accum", "=", "channel_accum", "+", "grads", "[", "bias_idx", "]", ".", "view", "(", "out_c", ",", "1", ")", ".", "repeat", "(", "1", ",", "in_c", ")", "if", "(", "grads", "[", "bias_idx", "]", "is", "not", "None", ")", "else", "channel_accum", "\n", "", "elif", "mode", "==", "'mean'", ":", "\n", "      ", "if", "grads", "[", "bias_idx", "]", "is", "not", "None", ":", "\n", "        ", "grads_a_layer", "=", "grads", "[", "weight_idx", "]", ".", "view", "(", "out_c", ",", "in_c", ",", "-", "1", ")", "\n", "n_elements", "=", "grads_a_layer", ".", "size", "(", ")", "[", "-", "1", "]", "\n", "channel_accum", "=", "grads_a_layer", ".", "sum", "(", "2", ")", "\n", "channel_accum", "=", "(", "channel_accum", "+", "grads", "[", "bias_idx", "]", ".", "view", "(", "out_c", ",", "1", ")", ")", "/", "(", "n_elements", "+", "1", ")", "\n", "", "else", ":", "\n", "        ", "channel_accum", "=", "grads", "[", "weight_idx", "]", ".", "view", "(", "out_c", ",", "in_c", ",", "-", "1", ")", ".", "mean", "(", "2", ")", "\n", "", "", "elif", "mode", "==", "'max'", ":", "\n", "      ", "grads_a_layer", "=", "grads", "[", "weight_idx", "]", ".", "view", "(", "out_c", ",", "in_c", ",", "-", "1", ")", "\n", "channel_accum", ",", "_", "=", "grads_a_layer", ".", "max", "(", "2", ")", "\n", "", "else", ":", "\n", "      ", "assert", "False", "\n", "\n", "", "channel_accum_grad_list", ".", "append", "(", "channel_accum", ")", "\n", "\n", "# Calculate threshold", "\n", "", "channel_amu_grad_flatten", "=", "torch", ".", "cat", "(", "[", "channel_accum_grad_list", "[", "idx", "]", ".", "flatten", "(", ")", "for", "idx", "in", "range", "(", "n_layers", ")", "]", ",", "dim", "=", "0", ")", "\n", "n_channels", "=", "channel_amu_grad_flatten", ".", "size", "(", ")", "[", "0", "]", "\n", "threshold", ",", "_", "=", "torch", ".", "topk", "(", "channel_amu_grad_flatten", ",", "int", "(", "n_channels", "*", "(", "1", "-", "channel_sparsity", ")", ")", ",", "sorted", "=", "True", ")", "\n", "threshold", "=", "threshold", "[", "-", "1", "]", "\n", "\n", "if", "norm", "==", "'max'", ":", "\n", "    ", "norm_factor", "=", "channel_amu_grad_flatten", ".", "max", "(", ")", "\n", "", "elif", "norm", "==", "'sum'", ":", "\n", "    ", "norm_factor", "=", "channel_amu_grad_flatten", ".", "sum", "(", ")", "\n", "", "else", ":", "\n", "    ", "norm_factor", "=", "1", "\n", "\n", "", "for", "idx", "in", "range", "(", "n_layers", ")", ":", "\n", "    ", "channel_accum_grad_list", "[", "idx", "]", "/=", "norm_factor", "\n", "\n", "", "threshold", "/=", "norm_factor", "\n", "\n", "return", "channel_accum_grad_list", ",", "threshold", "", "", ""]], "home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.mp_prune.find_equal_area": [[9, 12], ["None"], "function", ["None"], ["def", "find_equal_area", "(", "binary_cost", ")", ":", "\n", "  ", "equal_area", "=", "binary_cost", "[", ":", ",", ":", ",", "0", "]", "==", "binary_cost", "[", ":", ",", ":", ",", "1", "]", "\n", "return", "equal_area", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.mp_prune.message_passing_prune": [[14, 95], ["print", "copy.deepcopy", "prune_utils.convert_dim_conv2fully", "prune_utils.cal_channel_prune_grad", "range", "range", "range", "range", "range", "range", "prune_utils.resume_dim_conv2fully", "len", "accum_grads[].size", "accum_grads[].new_zeros", "unary.append", "accum_grads[].size", "message_forward.append", "message_backward.append", "front_layer_cost.argmin", "front_layer_neuron_label.size", "range", "unary[].size", "next_layer_cost.argmin", "range", "len", "cost.argmin", "mask[].size", "accum_grads[].new_zeros", "accum_grads[].new_zeros", "prune_utils.resume_dim_conv2fully.append", "prune_utils.resume_dim_conv2fully.append", "len", "cost.argmin.float", "cost.argmin.view().repeat().float", "mp_prune.find_equal_area", "mp_prune.find_equal_area", "grads[].new_full", "mp_prune.find_equal_area", "grads[].size", "cost.argmin.view().repeat", "cost.argmin.sum", "cost.argmin.view"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.prune_utils.convert_dim_conv2fully", "home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.prune_utils.cal_channel_prune_grad", "home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.prune_utils.resume_dim_conv2fully", "home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.mp_prune.find_equal_area", "home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.mp_prune.find_equal_area", "home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.mp_prune.find_equal_area", "home.repos.pwc.inspect_result.zwxu064_RANP.models.deepmedic.repeat"], ["", "def", "message_passing_prune", "(", "grads", ",", "channel_sparsity", ",", "penalty", ",", "accu_mode", "=", "'max'", ",", "norm", "=", "'max'", ")", ":", "\n", "  ", "print", "(", "'='", "*", "20", ",", "'message passing prune'", ",", "'='", "*", "20", ")", "\n", "n_layers", "=", "len", "(", "grads", ")", "//", "2", "\n", "grads_org", "=", "copy", ".", "deepcopy", "(", "grads", ")", "\n", "grads", "=", "convert_dim_conv2fully", "(", "grads", ")", "\n", "accum_grads", ",", "threshold", "=", "cal_channel_prune_grad", "(", "grads", ",", "channel_sparsity", ",", "mode", "=", "accu_mode", ",", "norm", "=", "norm", ")", "\n", "\n", "# Set unary", "\n", "unary", "=", "[", "]", "\n", "for", "idx", "in", "range", "(", "n_layers", ")", ":", "\n", "    ", "cout", ",", "cin", "=", "accum_grads", "[", "idx", "]", ".", "size", "(", ")", "\n", "unary_a_layer", "=", "accum_grads", "[", "idx", "]", ".", "new_zeros", "(", "cout", ",", "cin", ",", "2", ")", "\n", "unary_a_layer", "[", ":", ",", ":", ",", "1", "]", "=", "-", "(", "accum_grads", "[", "idx", "]", "-", "threshold", ")", "\n", "unary", ".", "append", "(", "unary_a_layer", ")", "\n", "\n", "# Initialize message", "\n", "", "message_forward", ",", "message_backward", "=", "[", "]", ",", "[", "]", "\n", "for", "idx", "in", "range", "(", "n_layers", ")", ":", "\n", "    ", "cout", ",", "cin", "=", "accum_grads", "[", "idx", "]", ".", "size", "(", ")", "\n", "message_forward", ".", "append", "(", "accum_grads", "[", "idx", "]", ".", "new_zeros", "(", "cout", ",", "cin", ",", "2", ")", ")", "\n", "message_backward", ".", "append", "(", "accum_grads", "[", "idx", "]", ".", "new_zeros", "(", "cout", ",", "cin", ",", "2", ")", ")", "\n", "\n", "# Forward pass", "\n", "", "for", "idx", "in", "range", "(", "1", ",", "n_layers", ",", "1", ")", ":", "\n", "    ", "weight_idx", "=", "idx", "\n", "front_weight_idx", "=", "idx", "-", "1", "\n", "front_layer_cost", "=", "unary", "[", "front_weight_idx", "]", "+", "message_forward", "[", "front_weight_idx", "]", "\n", "front_layer_channel_label", "=", "front_layer_cost", ".", "argmin", "(", "dim", "=", "2", ")", "\n", "front_layer_channel_label", "[", "find_equal_area", "(", "front_layer_cost", ")", "]", "=", "1", "\n", "front_layer_neuron_label", "=", "1", "-", "(", "1", "-", "front_layer_channel_label", ")", ".", "prod", "(", "dim", "=", "1", ")", "\n", "front_layer_num_neuron", "=", "front_layer_neuron_label", ".", "size", "(", "0", ")", "\n", "\n", "for", "n_idx", "in", "range", "(", "front_layer_num_neuron", ")", ":", "\n", "      ", "message_forward", "[", "weight_idx", "]", "[", ":", ",", "n_idx", ",", "0", "]", "=", "0", "\n", "message_forward", "[", "weight_idx", "]", "[", ":", ",", "n_idx", ",", "1", "]", "=", "penalty", "*", "(", "1", "-", "front_layer_neuron_label", "[", "n_idx", "]", ")", "\n", "\n", "# Backward pass", "\n", "", "", "for", "idx", "in", "range", "(", "n_layers", "-", "2", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "    ", "weight_idx", "=", "idx", "\n", "next_weight_idx", "=", "idx", "+", "1", "\n", "next_layer_cost", "=", "unary", "[", "next_weight_idx", "]", "+", "message_backward", "[", "next_weight_idx", "]", "\n", "current_layer_num_neuron", "=", "unary", "[", "weight_idx", "]", ".", "size", "(", "0", ")", "\n", "next_layer_status", "=", "next_layer_cost", ".", "argmin", "(", "dim", "=", "2", ")", "\n", "next_layer_status", "[", "find_equal_area", "(", "next_layer_cost", ")", "]", "=", "1", "\n", "next_layer_channel_cross_label", "=", "1", "-", "(", "1", "-", "next_layer_status", ")", ".", "prod", "(", "dim", "=", "0", ")", "\n", "\n", "for", "n_idx", "in", "range", "(", "current_layer_num_neuron", ")", ":", "\n", "      ", "message_backward", "[", "weight_idx", "]", "[", "n_idx", ",", ":", ",", "0", "]", "=", "0", "\n", "message_backward", "[", "weight_idx", "]", "[", "n_idx", ",", ":", ",", "1", "]", "=", "penalty", "*", "(", "1", "-", "next_layer_channel_cross_label", "[", "n_idx", "]", ")", "\n", "\n", "# Final", "\n", "", "", "mask", "=", "[", "]", "\n", "for", "idx", "in", "range", "(", "len", "(", "grads", ")", ")", ":", "\n", "    ", "if", "grads", "[", "idx", "]", "is", "not", "None", ":", "\n", "      ", "mask", ".", "append", "(", "grads", "[", "idx", "]", ".", "new_full", "(", "grads", "[", "idx", "]", ".", "size", "(", ")", ",", "-", "1", ")", ")", "\n", "", "else", ":", "\n", "      ", "mask", ".", "append", "(", "None", ")", "\n", "\n", "", "", "for", "idx", "in", "range", "(", "n_layers", ")", ":", "\n", "    ", "weight_idx", ",", "bias_idx", "=", "2", "*", "idx", ",", "2", "*", "idx", "+", "1", "\n", "cost", "=", "unary", "[", "idx", "]", "+", "message_forward", "[", "idx", "]", "+", "message_backward", "[", "idx", "]", "\n", "channel_label", "=", "cost", ".", "argmin", "(", "dim", "=", "2", ")", "\n", "\n", "# Bug, if costs over label 0 and 1 are equal, we retain this channel", "\n", "# the same as when grad >= threshold (note ==), we retain the channel,", "\n", "# also see the notation above find_equal_area()", "\n", "channel_label", "[", "find_equal_area", "(", "cost", ")", "]", "=", "1", "\n", "\n", "mask_size", "=", "mask", "[", "weight_idx", "]", ".", "size", "(", ")", "\n", "if", "len", "(", "mask_size", ")", "==", "2", ":", "\n", "      ", "mask", "[", "weight_idx", "]", "=", "channel_label", ".", "float", "(", ")", "\n", "", "else", ":", "\n", "      ", "cout", ",", "cin", ",", "h", ",", "w", "=", "mask_size", "\n", "mask", "[", "weight_idx", "]", "=", "channel_label", ".", "view", "(", "cout", ",", "cin", ",", "1", ",", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "h", ",", "w", ")", ".", "float", "(", ")", "\n", "\n", "", "if", "mask", "[", "bias_idx", "]", "is", "not", "None", ":", "\n", "      ", "mask", "[", "bias_idx", "]", "=", "(", "channel_label", ".", "sum", "(", "dim", "=", "1", ")", ">", "0", ")", ".", "float", "(", ")", "\n", "\n", "", "", "mask", "=", "resume_dim_conv2fully", "(", "mask", ",", "grads_org", ")", "\n", "\n", "return", "mask", "", "", ""]], "home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.network.LeNet_300_100.__init__": [[8, 13], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.StereoLoss.__init__"], ["  ", "def", "__init__", "(", "self", ",", "enable_bias", "=", "True", ")", ":", "# original code is true", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "784", ",", "300", ",", "bias", "=", "enable_bias", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "300", ",", "100", ",", "bias", "=", "enable_bias", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "100", ",", "10", ",", "bias", "=", "enable_bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.network.LeNet_300_100.forward": [[14, 19], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.log_softmax", "torch.log_softmax", "network.LeNet_300_100.fc1", "network.LeNet_300_100.fc2", "network.LeNet_300_100.fc3", "torch.relu.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "x", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "x", ".", "view", "(", "-", "1", ",", "784", ")", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "fc2", "(", "x", ")", ")", "\n", "\n", "return", "F", ".", "log_softmax", "(", "self", ".", "fc3", "(", "x", ")", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.network.LeNet_5.__init__": [[22, 29], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.StereoLoss.__init__"], ["  ", "def", "__init__", "(", "self", ",", "enable_bias", "=", "True", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "1", ",", "6", ",", "5", ",", "padding", "=", "2", ",", "bias", "=", "enable_bias", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "6", ",", "16", ",", "5", ",", "bias", "=", "enable_bias", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "16", "*", "5", "*", "5", ",", "120", ",", "bias", "=", "enable_bias", ")", "\n", "self", ".", "fc4", "=", "nn", ".", "Linear", "(", "120", ",", "84", ",", "bias", "=", "enable_bias", ")", "\n", "self", ".", "fc5", "=", "nn", ".", "Linear", "(", "84", ",", "10", ",", "bias", "=", "enable_bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.network.LeNet_5.forward": [[30, 41], ["torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.log_softmax", "torch.log_softmax", "network.LeNet_5.conv1", "network.LeNet_5.conv2", "network.LeNet_5.fc3", "network.LeNet_5.fc4", "network.LeNet_5.fc5", "torch.log_softmax.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "x", "=", "F", ".", "relu", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "2", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv2", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "2", ")", "\n", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "fc3", "(", "x", ".", "view", "(", "-", "1", ",", "16", "*", "5", "*", "5", ")", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "fc4", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "log_softmax", "(", "self", ".", "fc5", "(", "x", ")", ",", "dim", "=", "1", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.network.LeNet_5_Caffe.__init__": [[49, 55], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.StereoLoss.__init__"], ["def", "__init__", "(", "self", ",", "enable_bias", "=", "True", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "1", ",", "20", ",", "5", ",", "padding", "=", "0", ",", "bias", "=", "enable_bias", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "20", ",", "50", ",", "5", ",", "bias", "=", "enable_bias", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "50", "*", "4", "*", "4", ",", "500", ",", "bias", "=", "enable_bias", ")", "\n", "self", ".", "fc4", "=", "nn", ".", "Linear", "(", "500", ",", "10", ",", "bias", "=", "enable_bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.network.LeNet_5_Caffe.forward": [[56, 66], ["torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.relu", "torch.relu", "torch.log_softmax", "torch.log_softmax", "network.LeNet_5_Caffe.conv1", "network.LeNet_5_Caffe.conv2", "network.LeNet_5_Caffe.fc3", "network.LeNet_5_Caffe.fc4", "torch.log_softmax.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "x", "=", "F", ".", "relu", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "2", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv2", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "2", ")", "\n", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "fc3", "(", "x", ".", "view", "(", "-", "1", ",", "50", "*", "4", "*", "4", ")", ")", ")", "\n", "x", "=", "F", ".", "log_softmax", "(", "self", ".", "fc4", "(", "x", ")", ",", "dim", "=", "1", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.network.VGG.__init__": [[87, 117], ["torch.Module.__init__", "network.VGG.make_layers", "network.VGG.make_layers", "network.VGG.make_layers", "network.VGG.make_layers", "network.VGG.make_layers", "network.VGG.make_layers", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Linear", "torch.Linear", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.StereoLoss.__init__", "home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.network.VGG.make_layers", "home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.network.VGG.make_layers", "home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.network.VGG.make_layers", "home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.network.VGG.make_layers", "home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.network.VGG.make_layers", "home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.network.VGG.make_layers"], ["def", "__init__", "(", "self", ",", "config", ",", "num_classes", "=", "10", ",", "enable_bias", "=", "True", ",", "enable_dump_features", "=", "False", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "enable_dump_features", "=", "enable_dump_features", "\n", "\n", "if", "enable_dump_features", ":", "\n", "      ", "self", ".", "features_block1", "=", "self", ".", "make_layers", "(", "[", "64", ",", "64", ",", "'M'", "]", ",", "in_channels", "=", "3", ",", "batch_norm", "=", "True", ",", "enable_bias", "=", "enable_bias", ")", "\n", "self", ".", "features_block2", "=", "self", ".", "make_layers", "(", "[", "128", ",", "128", ",", "'M'", "]", ",", "in_channels", "=", "64", ",", "batch_norm", "=", "True", ",", "enable_bias", "=", "enable_bias", ")", "\n", "self", ".", "features_block3", "=", "self", ".", "make_layers", "(", "[", "256", ",", "256", ",", "[", "256", "]", ",", "'M'", "]", ",", "in_channels", "=", "128", ",", "batch_norm", "=", "True", ",", "enable_bias", "=", "enable_bias", ")", "\n", "self", ".", "features_block4", "=", "self", ".", "make_layers", "(", "[", "512", ",", "512", ",", "[", "512", "]", ",", "'M'", "]", ",", "in_channels", "=", "256", ",", "batch_norm", "=", "True", ",", "enable_bias", "=", "enable_bias", ")", "\n", "self", ".", "features_block5", "=", "self", ".", "make_layers", "(", "[", "512", ",", "512", ",", "[", "512", "]", ",", "'M'", "]", ",", "in_channels", "=", "512", ",", "batch_norm", "=", "True", ",", "enable_bias", "=", "enable_bias", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "features", "=", "self", ".", "make_layers", "(", "VGG_CONFIGS", "[", "config", "]", ",", "batch_norm", "=", "True", ",", "enable_bias", "=", "enable_bias", ")", "\n", "\n", "", "if", "config", "in", "{", "'C'", ",", "'D'", "}", ":", "\n", "      ", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "512", ",", "512", ",", "bias", "=", "enable_bias", ")", ",", "# 512 * 7 * 7 in the original VGG", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "512", ")", ",", "# instead of dropout", "\n", "nn", ".", "Linear", "(", "512", ",", "512", ",", "bias", "=", "enable_bias", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "512", ")", ",", "# instead of dropout", "\n", "nn", ".", "Linear", "(", "512", ",", "num_classes", ",", "bias", "=", "enable_bias", ")", ")", "\n", "", "elif", "config", "==", "'like'", ":", "\n", "      ", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "512", ",", "512", ",", "bias", "=", "enable_bias", ")", ",", "# 512 * 7 * 7 in the original VGG", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "512", ")", ",", "# instead of dropout", "\n", "nn", ".", "Linear", "(", "512", ",", "num_classes", ",", "bias", "=", "enable_bias", ")", ")", "\n", "", "else", ":", "\n", "      ", "assert", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.network.VGG.make_layers": [[118, 139], ["enumerate", "torch.Sequential", "torch.Sequential", "isinstance", "torch.Conv2d", "torch.Conv2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "make_layers", "(", "config", ",", "batch_norm", "=", "False", ",", "enable_bias", "=", "True", ",", "in_channels", "=", "3", ")", ":", "# TODO: BN yes or no?", "\n", "    ", "layers", "=", "[", "]", "\n", "for", "idx", ",", "v", "in", "enumerate", "(", "config", ")", ":", "\n", "      ", "if", "v", "==", "'M'", ":", "\n", "        ", "layers", "+=", "[", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "]", "\n", "", "else", ":", "\n", "        ", "if", "isinstance", "(", "v", ",", "list", ")", ":", "\n", "          ", "v", ",", "kernel_size", ",", "padding", "=", "v", "[", "0", "]", ",", "1", ",", "0", "\n", "", "else", ":", "\n", "          ", "kernel_size", ",", "padding", "=", "3", ",", "1", "\n", "\n", "", "conv2d", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "v", ",", "kernel_size", "=", "kernel_size", ",", "padding", "=", "padding", ",", "bias", "=", "enable_bias", ")", "\n", "if", "batch_norm", ":", "\n", "          ", "layers", "+=", "[", "conv2d", ",", "\n", "nn", ".", "BatchNorm2d", "(", "v", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", "\n", "", "else", ":", "\n", "          ", "layers", "+=", "[", "conv2d", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", "\n", "", "in_channels", "=", "v", "\n", "", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.network.VGG.forward": [[140, 164], ["network.VGG.view", "network.VGG.classifier", "torch.log_softmax", "torch.log_softmax", "network.VGG.features_block1", "network.VGG.features_block2", "network.VGG.features_block3", "network.VGG.features_block4", "network.VGG.features_block5", "network.VGG.features", "network.VGG.size", "scipy.savemat", "input.detach().squeeze().permute().cpu().numpy", "gt.detach().squeeze().cpu().numpy", "network.VGG.detach().squeeze().permute().cpu().numpy", "network.VGG.detach().squeeze().permute().cpu().numpy", "network.VGG.detach().squeeze().permute().cpu().numpy", "network.VGG.detach().squeeze().permute().cpu().numpy", "network.VGG.detach().squeeze().cpu().numpy", "input.detach().squeeze().permute().cpu", "gt.detach().squeeze().cpu", "network.VGG.detach().squeeze().permute().cpu", "network.VGG.detach().squeeze().permute().cpu", "network.VGG.detach().squeeze().permute().cpu", "network.VGG.detach().squeeze().permute().cpu", "network.VGG.detach().squeeze().cpu", "input.detach().squeeze().permute", "gt.detach().squeeze", "network.VGG.detach().squeeze().permute", "network.VGG.detach().squeeze().permute", "network.VGG.detach().squeeze().permute", "network.VGG.detach().squeeze().permute", "network.VGG.detach().squeeze", "input.detach().squeeze", "gt.detach", "network.VGG.detach().squeeze", "network.VGG.detach().squeeze", "network.VGG.detach().squeeze", "network.VGG.detach().squeeze", "network.VGG.detach", "input.detach", "network.VGG.detach", "network.VGG.detach", "network.VGG.detach", "network.VGG.detach"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "epoch_id", "=", "None", ",", "batch_id", "=", "None", ",", "gt", "=", "None", ")", ":", "\n", "    ", "if", "self", ".", "enable_dump_features", ":", "\n", "      ", "feat_block1", "=", "self", ".", "features_block1", "(", "input", ")", "\n", "feat_block2", "=", "self", ".", "features_block2", "(", "feat_block1", ")", "\n", "feat_block3", "=", "self", ".", "features_block3", "(", "feat_block2", ")", "\n", "feat_block4", "=", "self", ".", "features_block4", "(", "feat_block3", ")", "\n", "x", "=", "self", ".", "features_block5", "(", "feat_block4", ")", "\n", "\n", "if", "(", "epoch_id", "is", "not", "None", ")", "and", "(", "batch_id", "is", "not", "None", ")", ":", "\n", "        ", "scio", ".", "savemat", "(", "'../checkpoints/inter_features_epoch{}_batch{}.mat'", ".", "format", "(", "epoch_id", ",", "batch_id", ")", ",", "\n", "{", "'img'", ":", "input", ".", "detach", "(", ")", ".", "squeeze", "(", ")", ".", "permute", "(", "2", ",", "3", ",", "1", ",", "0", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "'gt'", ":", "gt", ".", "detach", "(", ")", ".", "squeeze", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "'b1'", ":", "feat_block1", ".", "detach", "(", ")", ".", "squeeze", "(", ")", ".", "permute", "(", "2", ",", "3", ",", "1", ",", "0", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "'b2'", ":", "feat_block2", ".", "detach", "(", ")", ".", "squeeze", "(", ")", ".", "permute", "(", "2", ",", "3", ",", "1", ",", "0", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "'b3'", ":", "feat_block3", ".", "detach", "(", ")", ".", "squeeze", "(", ")", ".", "permute", "(", "2", ",", "3", ",", "1", ",", "0", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "'b4'", ":", "feat_block4", ".", "detach", "(", ")", ".", "squeeze", "(", ")", ".", "permute", "(", "2", ",", "3", ",", "1", ",", "0", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "'b5'", ":", "x", ".", "detach", "(", ")", ".", "squeeze", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "}", ")", "\n", "", "", "else", ":", "\n", "      ", "x", "=", "self", ".", "features", "(", "input", ")", "\n", "\n", "", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n", "x", "=", "F", ".", "log_softmax", "(", "x", ",", "dim", "=", "1", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.network.AlexNet.__init__": [[168, 202], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.StereoLoss.__init__"], ["  ", "def", "__init__", "(", "self", ",", "k", "=", "4", ",", "num_classes", "=", "10", ",", "enable_bias", "=", "True", ")", ":", "\n", "    ", "super", "(", "AlexNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv_base", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "96", ",", "kernel_size", "=", "11", ",", "stride", "=", "2", ",", "padding", "=", "5", ",", "bias", "=", "enable_bias", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "96", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "\n", "nn", ".", "Conv2d", "(", "96", ",", "256", ",", "kernel_size", "=", "5", ",", "stride", "=", "2", ",", "padding", "=", "2", ",", "bias", "=", "enable_bias", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "256", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "\n", "nn", ".", "Conv2d", "(", "256", ",", "384", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "enable_bias", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "384", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "\n", "nn", ".", "Conv2d", "(", "384", ",", "384", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "enable_bias", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "384", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "\n", "nn", ".", "Conv2d", "(", "384", ",", "256", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "enable_bias", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "256", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "self", ".", "fc_base", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "256", ",", "1024", "*", "k", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "1024", "*", "k", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "\n", "nn", ".", "Linear", "(", "1024", "*", "k", ",", "1024", "*", "k", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "1024", "*", "k", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "\n", "nn", ".", "Linear", "(", "1024", "*", "k", ",", "num_classes", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.network.AlexNet.forward": [[203, 209], ["network.AlexNet.conv_base", "torch.log_softmax.view", "network.AlexNet.fc_base", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "x", "=", "self", ".", "conv_base", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc_base", "(", "x", ")", "\n", "x", "=", "F", ".", "log_softmax", "(", "x", ",", "dim", "=", "1", ")", "\n", "return", "x", "", "", "", ""]], "home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.train.parse_arguments": [[26, 76], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "isinstance"], "function", ["None"], ["def", "parse_arguments", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "# Data options", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "type", "=", "str", ",", "default", "=", "'mnist'", ",", "help", "=", "'dataset to use'", ")", "\n", "# Model options", "\n", "parser", ".", "add_argument", "(", "'--network'", ",", "type", "=", "str", ",", "default", "=", "'lenet5'", ",", "help", "=", "'network architecture to use'", ")", "\n", "parser", ".", "add_argument", "(", "'--param_sparsity'", ",", "type", "=", "float", ",", "default", "=", "0.9", ",", "help", "=", "'level of param sparsity to achieve'", ")", "\n", "parser", ".", "add_argument", "(", "'--neuron_sparsity'", ",", "type", "=", "float", ",", "default", "=", "0.9", ",", "help", "=", "'level of neuron sparsity to achieve'", ")", "\n", "parser", ".", "add_argument", "(", "'--channel_sparsity'", ",", "type", "=", "float", ",", "default", "=", "0.9", ",", "help", "=", "'level of channel sparsity to achieve'", ")", "\n", "# Train options", "\n", "parser", ".", "add_argument", "(", "'--batch'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'number of examples per mini-batch'", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "type", "=", "int", ",", "default", "=", "250", ",", "help", "=", "'number of training epochs'", ")", "\n", "parser", ".", "add_argument", "(", "'--optimizer'", ",", "type", "=", "str", ",", "default", "=", "'momentum'", ",", "help", "=", "'optimizer of choice'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_decay_ratio'", ",", "type", "=", "float", ",", "default", "=", "0.1", ",", "help", "=", "'learning rate decay ratio'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_decay_step'", ",", "type", "=", "int", ",", "default", "=", "25e3", ",", "help", "=", "'learning rate decay step'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "1e-1", ",", "help", "=", "'initial learning rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--weight_decay'", ",", "type", "=", "float", ",", "default", "=", "5e-4", ",", "help", "=", "'weight decay ratio'", ")", "\n", "parser", ".", "add_argument", "(", "'--log_interval'", ",", "type", "=", "int", ",", "default", "=", "20", ",", "help", "=", "'log saving frequency'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed_list'", ",", "nargs", "=", "'+'", ",", "default", "=", "0", ",", "help", "=", "'seeds'", ")", "\n", "parser", ".", "add_argument", "(", "'--relative_dir'", ",", "type", "=", "str", ",", "default", "=", "'.'", ",", "help", "=", "'relative directory'", ")", "\n", "parser", ".", "add_argument", "(", "'--weight_init'", ",", "type", "=", "str", ",", "default", "=", "'xn'", ",", "help", "=", "'xn, xu, kn, ku, orthogonal'", ")", "\n", "parser", ".", "add_argument", "(", "'--checkpoint_dir'", ",", "type", "=", "str", ",", "default", "=", "'checkpoint'", ",", "help", "=", "'save model dir'", ")", "\n", "parser", ".", "add_argument", "(", "'--resume_epoch'", ",", "type", "=", "int", ",", "default", "=", "'0'", ",", "help", "=", "'resume model'", ")", "\n", "# Operations", "\n", "parser", ".", "add_argument", "(", "'--enable_flops'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "help", "=", "'enable flops'", ")", "\n", "parser", ".", "add_argument", "(", "'--enable_bias'", ",", "action", "=", "'store_true'", ",", "default", "=", "True", ",", "help", "=", "'enable bias'", ")", "\n", "parser", ".", "add_argument", "(", "'--enable_dump'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "help", "=", "'dump for MatLab'", ")", "\n", "parser", ".", "add_argument", "(", "'--enable_param_prune'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "help", "=", "'prune params'", ")", "\n", "parser", ".", "add_argument", "(", "'--enable_neuron_prune'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "help", "=", "'prune neurons'", ")", "\n", "parser", ".", "add_argument", "(", "'--enable_channel_prune'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "help", "=", "'prune channels'", ")", "\n", "parser", ".", "add_argument", "(", "'--enable_dump_features'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "help", "=", "'dump features'", ")", "\n", "# For channel prune options", "\n", "parser", ".", "add_argument", "(", "'--acc_mode'", ",", "type", "=", "str", ",", "default", "=", "'mean'", ",", "help", "=", "'accumulation for importance of a channel'", ")", "\n", "parser", ".", "add_argument", "(", "'--norm'", ",", "type", "=", "str", ",", "default", "=", "'max'", ",", "help", "=", "'normalization over grads'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "args", ".", "device", "=", "device", "\n", "args", ".", "enable_cuda", "=", "device", "==", "'cuda'", "\n", "args", ".", "n_class", "=", "10", "\n", "\n", "if", "isinstance", "(", "args", ".", "seed_list", ",", "numbers", ".", "Number", ")", ":", "\n", "      ", "args", ".", "seed_list", "=", "[", "args", ".", "seed_list", "]", "\n", "\n", "", "if", "args", ".", "enable_neuron_prune", ":", "\n", "      ", "args", ".", "log_dir_comment", "=", "'neuron_prune'", "\n", "", "elif", "args", ".", "enable_channel_prune", ":", "\n", "      ", "args", ".", "log_dir_comment", "=", "'channel_prune'", "\n", "", "else", ":", "\n", "      ", "args", ".", "log_dir_comment", "=", "'param_prune'", "\n", "\n", "", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.train.mnist_experiment": [[78, 95], ["args.network.lower", "network.LeNet_5_Caffe.to", "dataloader.get_mnist_dataloaders", "network.LeNet_300_100", "network.LeNet_5", "network.LeNet_5_Caffe"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.dataloader.get_mnist_dataloaders"], ["", "def", "mnist_experiment", "(", "args", ")", ":", "\n", "  ", "network_name", "=", "args", ".", "network", ".", "lower", "(", ")", "\n", "if", "network_name", "==", "'lenet300'", ":", "\n", "    ", "net", "=", "LeNet_300_100", "(", "enable_bias", "=", "args", ".", "enable_bias", ")", "\n", "", "elif", "network_name", "==", "'lenet5'", ":", "\n", "    ", "net", "=", "LeNet_5", "(", "enable_bias", "=", "args", ".", "enable_bias", ")", "\n", "", "elif", "network_name", "==", "'lenet5_caffe'", ":", "\n", "    ", "net", "=", "LeNet_5_Caffe", "(", "enable_bias", "=", "args", ".", "enable_bias", ")", "\n", "", "else", ":", "\n", "    ", "assert", "False", "\n", "\n", "", "net", "=", "net", ".", "to", "(", "args", ".", "device", ")", "\n", "train_batch_size", "=", "val_batch_size", "=", "args", ".", "batch", "\n", "train_loader", ",", "val_loader", "=", "get_mnist_dataloaders", "(", "train_batch_size", ",", "val_batch_size", ",", "\n", "args", ",", "enable_train_shuffle", "=", "True", ")", "\n", "\n", "return", "net", ",", "train_loader", ",", "val_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.train.cifar10_experiment": [[97, 119], ["args.network.lower", "network.VGG.to", "dataloader.get_cifar10_dataloaders", "network.AlexNet", "network.AlexNet", "network.VGG", "network.VGG", "network.VGG"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.dataloader.get_cifar10_dataloaders"], ["", "def", "cifar10_experiment", "(", "args", ")", ":", "\n", "  ", "network_name", "=", "args", ".", "network", ".", "lower", "(", ")", "\n", "if", "network_name", "==", "'alexnet_v1'", ":", "\n", "    ", "net", "=", "AlexNet", "(", "k", "=", "1", ",", "enable_bias", "=", "args", ".", "enable_bias", ")", "\n", "", "elif", "network_name", "==", "'alexnet_v2'", ":", "\n", "    ", "net", "=", "AlexNet", "(", "k", "=", "2", ",", "enable_bias", "=", "args", ".", "enable_bias", ")", "\n", "", "elif", "network_name", "==", "'vgg_c'", ":", "\n", "    ", "net", "=", "VGG", "(", "'C'", ",", "enable_bias", "=", "args", ".", "enable_bias", ",", "enable_dump_features", "=", "args", ".", "enable_dump_features", ")", "\n", "", "elif", "network_name", "==", "'vgg_d'", ":", "\n", "    ", "net", "=", "VGG", "(", "'D'", ",", "enable_bias", "=", "args", ".", "enable_bias", ")", "\n", "", "elif", "network_name", "==", "'vgg_like'", ":", "\n", "    ", "net", "=", "VGG", "(", "'like'", ",", "enable_bias", "=", "args", ".", "enable_bias", ")", "\n", "", "else", ":", "\n", "    ", "assert", "False", "\n", "\n", "", "net", "=", "net", ".", "to", "(", "args", ".", "device", ")", "\n", "train_batch_size", "=", "val_batch_size", "=", "args", ".", "batch", "\n", "train_loader", ",", "val_loader", "=", "get_cifar10_dataloaders", "(", "train_batch_size", ",", "val_batch_size", ",", "args", ",", "\n", "enable_train_shuffle", "=", "True", ",", "\n", "enable_train_trans", "=", "True", ")", "\n", "\n", "return", "net", ",", "train_loader", ",", "val_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.train.train": [[121, 291], ["tensorboardX.SummaryWriter", "torch.SGD", "torch.lr_scheduler.StepLR", "os.path.join", "os.path.join", "os.path.exists", "os.path.exists", "prune.apply_prune_mask", "ignite.engine.create_supervised_trainer", "ignite.engine.create_supervised_evaluator", "ignite.contrib.handlers.ProgressBar", "ignite.contrib.handlers.ProgressBar.attach", "ignite.engine.create_supervised_trainer.on", "ignite.engine.create_supervised_trainer.on", "ignite.handlers.ModelCheckpoint", "ignite.engine.create_supervised_trainer.add_event_handler", "tensorboardX.SummaryWriter.close", "print", "train.mnist_experiment", "dataloader.get_mnist_dataloaders", "net.parameters", "torch.load", "torch.load", "net.load_state_dict", "torch.load", "torch.load", "optim.SGD.load_state_dict", "prune.pruning", "snip.SNIP", "print", "prune.param_prune", "optim.lr_scheduler.StepLR.step", "ignite.engine.create_supervised_evaluator.run", "tensorboardX.SummaryWriter.add_scalar", "tensorboardX.SummaryWriter.add_scalar", "ignite.engine.create_supervised_trainer.run", "net.train", "enumerate", "train.cifar10_experiment", "dataloader.get_cifar10_dataloaders", "print", "print", "torch.stack().sum", "torch.stack().sum", "next", "flop_input.to.to", "cal_flops", "prune.param_prune", "prune.remove_redundant", "prune.do_statistics", "prune.neuron_prune", "prune.remove_redundant", "prune.do_statistics", "prune.channel_prune", "prune.remove_redundant", "prune.do_statistics", "message_passing_prune", "prune.do_statistics", "print", "range", "prune.dump_grad_mask", "ignite.metrics.Accuracy", "ignite.metrics.Loss", "tensorboardX.SummaryWriter.add_scalar", "time.strftime", "iter", "cal_flops", "cal_flops", "print", "cal_flops", "cal_flops", "print", "cal_flops", "cal_flops", "print", "len", "len", "net", "torch.stack", "torch.stack", "prune_utils.check_same", "torch.equal", "torch.equal", "print", "data[].cuda", "len", "mp_mask[].size", "mp_mask[].flatten().sum", "prune_mask_clean[].flatten().sum", "grad.abs().sum", "mp_mask[].flatten", "prune_mask_clean[].flatten", "grad.abs"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.prune.apply_prune_mask", "home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.train.mnist_experiment", "home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.dataloader.get_mnist_dataloaders", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.data.load", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.data.load", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.data.load", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.data.load", "home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.prune.pruning", "home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.snip.SNIP", "home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.prune.param_prune", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.data.train", "home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.train.cifar10_experiment", "home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.dataloader.get_cifar10_dataloaders", "home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.flops_old.cal_flops", "home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.prune.param_prune", "home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.prune.remove_redundant", "home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.prune.do_statistics", "home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.prune.neuron_prune", "home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.prune.remove_redundant", "home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.prune.do_statistics", "home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.prune.channel_prune", "home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.prune.remove_redundant", "home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.prune.do_statistics", "home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.mp_prune.message_passing_prune", "home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.prune.do_statistics", "home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.prune.dump_grad_mask", "home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.flops_old.cal_flops", "home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.flops_old.cal_flops", "home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.flops_old.cal_flops", "home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.flops_old.cal_flops", "home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.flops_old.cal_flops", "home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.flops_old.cal_flops", "home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.prune_utils.check_same", "home.repos.pwc.inspect_result.zwxu064_RANP.unet.losses.flatten", "home.repos.pwc.inspect_result.zwxu064_RANP.unet.losses.flatten"], ["", "def", "train", "(", "args", ")", ":", "\n", "    ", "writer", "=", "SummaryWriter", "(", "log_dir", "=", "'{}/runs/{}/{}_{}_seed{}_winit{}'", ".", "format", "(", "args", ".", "relative_dir", ",", "args", ".", "log_dir_comment", ",", "args", ".", "network", ",", "\n", "time", ".", "strftime", "(", "\"%Y%m%d_%H%M%S\"", ")", ",", "args", ".", "seed", ",", "args", ".", "weight_init", ")", ")", "\n", "\n", "if", "args", ".", "dataset", "==", "'mnist'", ":", "\n", "      ", "net", ",", "train_loader", ",", "val_loader", "=", "mnist_experiment", "(", "args", ")", "\n", "train_loader_prune", ",", "_", "=", "get_mnist_dataloaders", "(", "args", ".", "batch", ",", "args", ".", "batch", ",", "\n", "args", ",", "enable_train_shuffle", "=", "False", ")", "\n", "", "elif", "args", ".", "dataset", "==", "'cifar10'", ":", "\n", "      ", "net", ",", "train_loader", ",", "val_loader", "=", "cifar10_experiment", "(", "args", ")", "\n", "train_loader_prune", ",", "_", "=", "get_cifar10_dataloaders", "(", "args", ".", "batch", ",", "args", ".", "batch", ",", "\n", "args", ",", "enable_train_shuffle", "=", "False", ",", "\n", "enable_train_trans", "=", "False", ")", "\n", "", "else", ":", "\n", "      ", "assert", "False", "\n", "\n", "", "enable_nesterov", "=", "True", "if", "(", "args", ".", "optimizer", "==", "'nesterov'", ")", "else", "False", "\n", "\n", "optimizer", "=", "optim", ".", "SGD", "(", "net", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "momentum", "=", "0.9", ",", "weight_decay", "=", "args", ".", "weight_decay", ",", "nesterov", "=", "enable_nesterov", ")", "\n", "lr_scheduler", "=", "optim", ".", "lr_scheduler", ".", "StepLR", "(", "optimizer", ",", "args", ".", "lr_decay_step", ",", "gamma", "=", "args", ".", "lr_decay_ratio", ")", "# Zhiwei paper 0.1", "\n", "\n", "# Resume", "\n", "resume_model_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "checkpoint_dir", ",", "'{}_model_{}.pth'", ".", "format", "(", "args", ".", "network", ",", "args", ".", "resume_epoch", ")", ")", "\n", "resume_opt_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "checkpoint_dir", ",", "'{}_optimizer_{}.pth'", ".", "format", "(", "args", ".", "network", ",", "args", ".", "resume_epoch", ")", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "resume_model_path", ")", ":", "\n", "      ", "checkpoint", "=", "torch", ".", "load", "(", "resume_model_path", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", "\n", "net", ".", "load_state_dict", "(", "checkpoint", ")", "\n", "", "else", ":", "\n", "      ", "if", "args", ".", "resume_epoch", ">", "0", ":", "\n", "        ", "print", "(", "'{} not exist'", ".", "format", "(", "resume_model_path", ")", ")", "\n", "\n", "", "", "if", "os", ".", "path", ".", "exists", "(", "resume_opt_path", ")", ":", "\n", "      ", "checkpoint", "=", "torch", ".", "load", "(", "resume_opt_path", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", ")", "\n", "", "else", ":", "\n", "      ", "if", "args", ".", "resume_epoch", ">", "0", ":", "\n", "        ", "print", "(", "'{} not exist'", ".", "format", "(", "resume_opt_path", ")", ")", "\n", "\n", "# Pre-training pruning using SKIP", "\n", "", "", "if", "True", ":", "\n", "      ", "criterion", "=", "F", ".", "nll_loss", "\n", "prune_mask_clean", ",", "_", "=", "pruning", "(", "None", ",", "net", ",", "train_loader_prune", ",", "criterion", ",", "args", ",", "\n", "enable_kernel_mask", "=", "True", ",", "enable_hidden_mask", "=", "False", ",", "\n", "enable_3dunet", "=", "False", ",", "enable_hidden_sum", "=", "False", ")", "\n", "", "else", ":", "\n", "      ", "grads", "=", "SNIP", "(", "net", ",", "train_loader_prune", ",", "args", ")", "\n", "\n", "print", "(", "'Check grads value for seeds'", ",", "torch", ".", "stack", "(", "[", "grad", ".", "abs", "(", ")", ".", "sum", "(", ")", "for", "grad", "in", "grads", "]", ")", ".", "sum", "(", ")", ")", "\n", "\n", "# Removing redundant and calculate gflops", "\n", "all_one_mask", "=", "param_prune", "(", "grads", ",", "param_sparsity", "=", "0", ")", "\n", "\n", "if", "args", ".", "enable_flops", ":", "\n", "        ", "flop_input", ",", "flop_target", "=", "next", "(", "iter", "(", "train_loader_prune", ")", ")", "\n", "flop_input", "=", "flop_input", ".", "to", "(", "args", ".", "device", ")", "\n", "flops_no_prune", ",", "params_no_prune", "=", "cal_flops", "(", "net", ",", "all_one_mask", ",", "flop_input", ",", "comment", "=", "'(no prune)'", ")", "\n", "\n", "# Case 1: Parameter prune, has redundant retains", "\n", "", "if", "args", ".", "enable_param_prune", ":", "\n", "        ", "prune_mask", "=", "param_prune", "(", "grads", ",", "param_sparsity", "=", "args", ".", "param_sparsity", ")", "\n", "prune_mask_clean", "=", "remove_redundant", "(", "prune_mask", ",", "prune_mode", "=", "'param'", ")", "\n", "do_statistics", "(", "prune_mask", ",", "prune_mask_clean", ")", "\n", "\n", "# Flop of param prune before and after removing redundant params", "\n", "if", "args", ".", "enable_flops", ":", "\n", "          ", "flops_param_prune", ",", "params_param_prune", "=", "cal_flops", "(", "net", ",", "prune_mask", ",", "flop_input", ")", "\n", "flops_param_prune_clean", ",", "params_param_prune_clean", "=", "cal_flops", "(", "net", ",", "prune_mask_clean", ",", "flop_input", ")", "\n", "print", "(", "\"GFlops, param prune, original:{:.4f} (param:{:.0f}), pruned:{:.4f} ({:.4f}%, param:{:.0f}), \"", "\n", "\"clean:{:.4f} ({:.4f}%, param:{:.0f}).\\n\"", ".", "format", "(", "flops_no_prune", ",", "params_no_prune", ",", "\n", "flops_param_prune", ",", "flops_param_prune", "*", "100", "/", "flops_no_prune", ",", "params_param_prune", ",", "\n", "flops_param_prune_clean", ",", "flops_param_prune_clean", "*", "100", "/", "flops_no_prune", ",", "params_param_prune_clean", ")", ")", "\n", "\n", "# Case 2: neuron prune, not good, a whole layer will be removed", "\n", "", "", "if", "args", ".", "enable_neuron_prune", ":", "\n", "        ", "prune_mask", "=", "neuron_prune", "(", "grads", ",", "neuron_sparsity", "=", "args", ".", "neuron_sparsity", ",", "acc_mode", "=", "args", ".", "acc_mode", ")", "\n", "prune_mask_clean", "=", "remove_redundant", "(", "prune_mask", ",", "prune_mode", "=", "'neuron'", ")", "\n", "do_statistics", "(", "prune_mask", ",", "prune_mask_clean", ")", "\n", "\n", "if", "args", ".", "enable_flops", ":", "\n", "# Flop of neuron prune before and after removing redundant params", "\n", "          ", "flops_neuron_prune", ",", "params_neuron_prune", "=", "cal_flops", "(", "net", ",", "prune_mask", ",", "flop_input", ")", "\n", "flops_neuron_prune_clean", ",", "params_neuron_prune_clean", "=", "cal_flops", "(", "net", ",", "prune_mask_clean", ",", "flop_input", ")", "\n", "print", "(", "\"GFlops, neuron prune, original:{:.4f} (param:{:.0f}), pruned:{:.4f} ({:.4f}%, param:{:.0f}),\"", "\n", "\"clean:{:.4f} ({:.4f}%, param:{:.0f}).\\n\"", ".", "format", "(", "flops_no_prune", ",", "params_no_prune", ",", "\n", "flops_neuron_prune", ",", "flops_neuron_prune", "*", "100", "/", "flops_no_prune", ",", "params_neuron_prune", ",", "\n", "flops_neuron_prune_clean", ",", "flops_neuron_prune_clean", "*", "100", "/", "flops_no_prune", ",", "params_neuron_prune_clean", ")", ")", "\n", "\n", "# Case 3: good, but pay attention to acc_mode='max'", "\n", "", "", "if", "args", ".", "enable_channel_prune", ":", "\n", "        ", "prune_mask", "=", "channel_prune", "(", "grads", ",", "channel_sparsity", "=", "args", ".", "channel_sparsity", ",", "\n", "acc_mode", "=", "args", ".", "acc_mode", ",", "norm", "=", "args", ".", "norm", ")", "\n", "prune_mask_clean", "=", "remove_redundant", "(", "prune_mask", ",", "prune_mode", "=", "'channel'", ")", "\n", "do_statistics", "(", "prune_mask", ",", "prune_mask_clean", ")", "\n", "\n", "if", "args", ".", "enable_flops", ":", "\n", "# Flop of channel prune before and after removing redundant params", "\n", "          ", "flops_channel_prune", ",", "params_channel_prune", "=", "cal_flops", "(", "net", ",", "prune_mask", ",", "flop_input", ")", "\n", "flops_channel_prune_clean", ",", "params_channel_prune_clean", "=", "cal_flops", "(", "net", ",", "prune_mask_clean", ",", "flop_input", ")", "\n", "print", "(", "\"GFlops, channel prune, original:{:.4f} (param:{:.0f}), pruned:{:.4f} ({:.4f}%, param:{:.0f}),\"", "\n", "\"clean:{:.4f} ({:.4f}%, param:{:.0f}).\\n\"", ".", "format", "(", "flops_no_prune", ",", "params_no_prune", ",", "\n", "flops_channel_prune", ",", "flops_channel_prune", "*", "100", "/", "flops_no_prune", ",", "params_channel_prune", ",", "\n", "flops_channel_prune_clean", ",", "flops_channel_prune_clean", "*", "100", "/", "flops_no_prune", ",", "params_channel_prune_clean", ")", ")", "\n", "\n", "", "", "if", "args", ".", "enable_channel_prune", ":", "\n", "# Case 4: message passing prune + remove directly", "\n", "        ", "mp_mask", "=", "message_passing_prune", "(", "grads", ",", "channel_sparsity", "=", "args", ".", "channel_sparsity", ",", "\n", "penalty", "=", "10", ",", "acc_mode", "=", "args", ".", "acc_mode", ",", "norm", "=", "args", ".", "norm", ")", "\n", "do_statistics", "(", "prune_mask", ",", "mp_mask", ")", "\n", "print", "(", "'=> MP and channel prune clean cmp: {}'", ".", "format", "(", "check_same", "(", "mp_mask", ",", "prune_mask_clean", ")", ")", ")", "\n", "for", "jj", "in", "range", "(", "len", "(", "mp_mask", ")", ")", ":", "\n", "          ", "if", "not", "torch", ".", "equal", "(", "mp_mask", "[", "jj", "]", ",", "prune_mask_clean", "[", "jj", "]", ")", ":", "\n", "            ", "print", "(", "'AW'", ",", "len", "(", "mp_mask", ")", ",", "mp_mask", "[", "jj", "]", ".", "size", "(", ")", ",", "jj", ",", "mp_mask", "[", "jj", "]", ".", "flatten", "(", ")", ".", "sum", "(", ")", ",", "prune_mask_clean", "[", "jj", "]", ".", "flatten", "(", ")", ".", "sum", "(", ")", ")", "\n", "\n", "# Dump and train", "\n", "", "", "", "dump_grad_mask", "(", "grads", ",", "prune_mask", ",", "args", ")", "if", "args", ".", "enable_dump", "else", "None", "\n", "\n", "", "apply_prune_mask", "(", "net", ",", "prune_mask_clean", ")", "\n", "\n", "trainer", "=", "create_supervised_trainer", "(", "net", ",", "optimizer", ",", "F", ".", "nll_loss", ",", "args", ".", "device", ")", "\n", "evaluator", "=", "create_supervised_evaluator", "(", "net", ",", "{", "'accuracy'", ":", "Accuracy", "(", ")", ",", "'nll'", ":", "Loss", "(", "F", ".", "nll_loss", ")", "}", ",", "args", ".", "device", ")", "\n", "\n", "pbar", "=", "ProgressBar", "(", ")", "\n", "pbar", ".", "attach", "(", "trainer", ")", "\n", "\n", "@", "trainer", ".", "on", "(", "Events", ".", "ITERATION_COMPLETED", ")", "\n", "def", "log_training_loss", "(", "engine", ")", ":", "\n", "        ", "lr_scheduler", ".", "step", "(", ")", "\n", "iter_in_epoch", "=", "(", "engine", ".", "state", ".", "iteration", "-", "1", ")", "%", "len", "(", "train_loader", ")", "+", "1", "\n", "if", "engine", ".", "state", ".", "iteration", "%", "args", ".", "log_interval", "==", "0", ":", "\n", "# pbar.log_message(\"Epoch[{}] Iteration[{}/{}] Loss: {:.2f}\"", "\n", "#       \"\".format(engine.state.epoch, iter_in_epoch, len(train_loader), engine.state.output))", "\n", "            ", "writer", ".", "add_scalar", "(", "\"training/loss\"", ",", "engine", ".", "state", ".", "output", ",", "engine", ".", "state", ".", "iteration", ")", "\n", "\n", "", "", "@", "trainer", ".", "on", "(", "Events", ".", "EPOCH_COMPLETED", ")", "\n", "def", "log_epoch", "(", "engine", ")", ":", "\n", "        ", "evaluator", ".", "run", "(", "val_loader", ")", "\n", "\n", "metrics", "=", "evaluator", ".", "state", ".", "metrics", "\n", "avg_accuracy", "=", "metrics", "[", "'accuracy'", "]", "\n", "avg_nll", "=", "metrics", "[", "'nll'", "]", "\n", "\n", "# pbar.log_message(\"Validation Results - Epoch: {}  Avg accuracy: {:.2f} Avg loss: {:.2f}\"", "\n", "#       .format(engine.state.epoch, avg_accuracy, avg_nll))", "\n", "\n", "writer", ".", "add_scalar", "(", "\"validation/loss\"", ",", "avg_nll", ",", "engine", ".", "state", ".", "iteration", ")", "\n", "writer", ".", "add_scalar", "(", "\"validation/accuracy\"", ",", "avg_accuracy", ",", "engine", ".", "state", ".", "iteration", ")", "\n", "\n", "# Save models", "\n", "", "handler", "=", "ModelCheckpoint", "(", "args", ".", "checkpoint_dir", ",", "args", ".", "network", ",", "save_interval", "=", "args", ".", "epochs", ",", "n_saved", "=", "1", ",", "create_dir", "=", "True", ",", "require_empty", "=", "False", ")", "\n", "trainer", ".", "add_event_handler", "(", "Events", ".", "EPOCH_COMPLETED", ",", "handler", ",", "{", "'model'", ":", "net", ",", "'optimizer'", ":", "optimizer", "}", ")", "\n", "\n", "if", "args", ".", "resume_epoch", "<", "args", ".", "epochs", ":", "\n", "      ", "trainer", ".", "run", "(", "train_loader", ",", "args", ".", "epochs", ")", "\n", "", "else", ":", "\n", "      ", "net", ".", "train", "(", ")", "\n", "for", "idx", ",", "data", "in", "enumerate", "(", "train_loader_prune", ")", ":", "\n", "        ", "if", "idx", "==", "0", ":", "\n", "          ", "net", "(", "data", "[", "0", "]", ".", "cuda", "(", ")", ",", "epoch_id", "=", "args", ".", "epochs", ",", "batch_id", "=", "idx", "+", "1", ",", "gt", "=", "data", "[", "1", "]", ")", "\n", "\n", "# Let's look at the final weights", "\n", "# for name, param in net.named_parameters():", "\n", "#     if name.endswith('weight'):", "\n", "#         writer.add_histogram(name, param)", "\n", "\n", "", "", "", "writer", ".", "close", "(", ")", "\n", "print", "(", "'Finish training!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.video_classification.remove_redundant_3dmobilenet": [[10, 70], ["copy.deepcopy", "range", "range", "len", "current_layer_mask.size", "next_layer_mask.size", "range", "front_layer_mask.size", "current_layer_mask.size", "range", "current_layer_mask[].sum", "next_layer_mask[].sum", "current_layer_mask[].sum", "front_layer_mask[].sum", "next_layer_mask.view().sum", "next_layer_mask.view", "next_layer_mask.size"], "function", ["None"], ["def", "remove_redundant_3dmobilenet", "(", "keep_masks", ")", ":", "\n", "  ", "if", "keep_masks", "is", "None", ":", "\n", "    ", "return", "\n", "\n", "", "keep_masks", "=", "copy", ".", "deepcopy", "(", "keep_masks", ")", "\n", "# print('=' * 20, 'remove redundant retains', '=' * 20)", "\n", "n_layers", "=", "len", "(", "keep_masks", ")", "//", "2", "\n", "\n", "# Forward", "\n", "for", "l", "in", "range", "(", "n_layers", "-", "1", ")", ":", "\n", "    ", "weight_idx", ",", "bias_idx", "=", "2", "*", "l", ",", "2", "*", "l", "+", "1", "\n", "next_weight_idx", ",", "next_bias_idx", "=", "2", "*", "(", "l", "+", "1", ")", ",", "2", "*", "(", "l", "+", "1", ")", "+", "1", "\n", "\n", "current_layer_mask", "=", "keep_masks", "[", "weight_idx", "]", "\n", "next_layer_mask", "=", "keep_masks", "[", "next_weight_idx", "]", "\n", "next_layer_bias_mask", "=", "keep_masks", "[", "next_bias_idx", "]", "\n", "current_layer_out_c", "=", "current_layer_mask", ".", "size", "(", "0", ")", "\n", "following_in_c", "=", "next_layer_mask", ".", "size", "(", "1", ")", "\n", "\n", "if", "following_in_c", "==", "1", ":", "# TODO : it is better to use groups>1, special case for conv group > 1", "\n", "      ", "continue", "\n", "", "else", ":", "\n", "      ", "assert", "current_layer_out_c", "==", "following_in_c", "\n", "\n", "", "for", "idx_neuron", "in", "range", "(", "current_layer_out_c", ")", ":", "\n", "# All conv3d except the last one have no bias", "\n", "      ", "if", "(", "current_layer_mask", "[", "idx_neuron", ",", ":", "]", ".", "sum", "(", ")", "==", "0", ")", "and", "(", "next_layer_mask", "[", ":", ",", "idx_neuron", "]", ".", "sum", "(", ")", "!=", "0", ")", ":", "\n", "        ", "invalid_area", "=", "next_layer_mask", "[", ":", ",", "idx_neuron", "]", "==", "1", "\n", "next_layer_mask", "[", ":", ",", "idx_neuron", "]", "[", "invalid_area", "]", "=", "0", "\n", "\n", "if", "next_layer_bias_mask", "is", "not", "None", ":", "\n", "          ", "invalid_area", "=", "next_layer_mask", ".", "view", "(", "next_layer_mask", ".", "size", "(", "0", ")", ",", "-", "1", ")", ".", "sum", "(", "1", ")", "==", "0", "\n", "next_layer_bias_mask", "[", "invalid_area", "]", "=", "0", "\n", "\n", "# Backward", "\n", "", "", "", "", "for", "l", "in", "range", "(", "n_layers", "-", "1", ",", "0", ",", "-", "1", ")", ":", "\n", "    ", "weight_idx", ",", "bias_idx", "=", "2", "*", "l", ",", "2", "*", "l", "+", "1", "\n", "front_weight_idx", ",", "front_bias_idx", "=", "2", "*", "(", "l", "-", "1", ")", ",", "2", "*", "(", "l", "-", "1", ")", "+", "1", "\n", "current_layer_mask", "=", "keep_masks", "[", "weight_idx", "]", "\n", "front_layer_mask", "=", "keep_masks", "[", "front_weight_idx", "]", "\n", "front_layer_bias_mask", "=", "keep_masks", "[", "front_bias_idx", "]", "\n", "front_layer_out_c", "=", "front_layer_mask", ".", "size", "(", "0", ")", "\n", "current_layer_in_c", "=", "current_layer_mask", ".", "size", "(", "1", ")", "\n", "\n", "if", "current_layer_in_c", "==", "1", ":", "# TODO : same above that use groups>1", "\n", "      ", "continue", "\n", "", "else", ":", "\n", "      ", "assert", "current_layer_in_c", "==", "front_layer_out_c", "\n", "\n", "", "for", "idx_neuron", "in", "range", "(", "current_layer_in_c", ")", ":", "\n", "      ", "if", "(", "current_layer_mask", "[", ":", ",", "idx_neuron", "]", ".", "sum", "(", ")", "==", "0", ")", "and", "(", "front_layer_mask", "[", "idx_neuron", ",", ":", "]", ".", "sum", "(", ")", "!=", "0", ")", ":", "\n", "        ", "invalid_area", "=", "front_layer_mask", "[", "idx_neuron", ",", ":", "]", "==", "1", "\n", "front_layer_mask", "[", "idx_neuron", ",", ":", "]", "[", "invalid_area", "]", "=", "0", "\n", "\n", "if", "front_layer_bias_mask", "is", "not", "None", ":", "\n", "          ", "front_layer_bias_mask", "[", "idx_neuron", "]", "=", "0", "\n", "\n", "", "", "", "", "return", "keep_masks", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.video_classification.create_network_connection_dict": [[72, 102], ["json_network_connection.replace", "os.path.exists", "enumerate", "open", "json.load", "model.named_modules", "isinstance", "open", "json.dump", "list", "str", "hasattr"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.data.load"], ["", "def", "create_network_connection_dict", "(", "model", ",", "json_network_connection", "=", "None", ")", ":", "\n", "  ", "json_path", "=", "json_network_connection", "\n", "if", "json_path", "is", "not", "None", ":", "\n", "    ", "json_path_modified", "=", "json_network_connection", ".", "replace", "(", "'.json'", ",", "'_modified.json'", ")", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "json_path_modified", ")", ":", "\n", "      ", "with", "open", "(", "json_path_modified", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "network_connection_dict", "=", "json", ".", "load", "(", "f", ")", "\n", "", "", "else", ":", "# Build an empty form", "\n", "      ", "network_connection_dict", "=", "{", "}", "\n", "\n", "layer_count", "=", "0", "\n", "for", "idx", ",", "(", "key", ",", "layer", ")", "in", "enumerate", "(", "model", ".", "named_modules", "(", ")", ")", ":", "\n", "        ", "if", "isinstance", "(", "layer", ",", "(", "nn", ".", "Linear", ",", "nn", ".", "Conv2d", ",", "nn", ".", "Conv3d", ",", "\n", "nn", ".", "ConvTranspose2d", ",", "nn", ".", "ConvTranspose3d", ")", ")", ":", "\n", "          ", "network_connection_dict", "[", "str", "(", "layer_count", ")", "]", "=", "{", "\n", "'key'", ":", "key", ",", "\n", "'shape'", ":", "list", "(", "layer", ".", "weight", ".", "shape", ")", ",", "\n", "'groups'", ":", "layer", ".", "groups", "if", "hasattr", "(", "layer", ",", "'groups'", ")", "else", "[", "]", ",", "\n", "'connection_layer'", ":", "[", "]", ",", "\n", "'bias'", ":", "1", "if", "(", "layer", ".", "bias", "is", "not", "None", ")", "else", "0", ",", "\n", "}", "\n", "layer_count", "+=", "1", "\n", "\n", "", "", "with", "open", "(", "json_path", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "network_connection_dict", ",", "f", ")", "\n", "", "", "", "else", ":", "\n", "    ", "network_connection_dict", "=", "None", "\n", "\n", "", "return", "network_connection_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.video_classification.remove_redundant_I3D": [[104, 224], ["copy.deepcopy", "range", "len", "current_layer_mask.size", "next_layer_mask.size", "current_layer_mask.view.float", "assign_list.append", "assign_list.append", "assign_list.append", "assign_list.append", "merge_list.append", "merge_list.append", "merge_list.append", "merge_list.append", "torch.cat", "torch.cat", "torch.cat", "former_merge_out_c_list.float.float", "len", "current_layer_mask.view", "next_layer_mask.view().sum", "former_merge_out_c_list.float.float", "former_merge_out_c_list.view.float", "former_merge_out_c_list.float.append", "range", "len", "current_layer_mask.view", "current_layer_mask.view", "current_layer_mask.view().sum", "len", "former_merge_out_c_list.float.view", "ii.view().sum", "len", "current_layer_mask.view.sum", "next_layer_mask.view", "len", "former_merge_out_c_list.float.view", "former_merge_out_c_list.float.view", "ii.view().sum", "current_layer_mask.view", "former_merge_out_c_list.view.sum", "ii.view", "ii.view", "ii.size"], "function", ["None"], ["", "def", "remove_redundant_I3D", "(", "keep_masks", ",", "encoder_layer_index", "=", "None", ")", ":", "\n", "# Neuron pruning just on forward passing to set in_channels", "\n", "# For channel and weight pruning, need to do forward and backward passing", "\n", "  ", "if", "keep_masks", "is", "None", ":", "\n", "    ", "return", "\n", "\n", "", "keep_masks", "=", "copy", ".", "deepcopy", "(", "keep_masks", ")", "\n", "n_layers", "=", "len", "(", "keep_masks", ")", "//", "2", "\n", "\n", "if", "encoder_layer_index", "is", "None", ":", "\n", "    ", "assert", "n_layers", "==", "58", "\n", "encoder_layer_index", "=", "[", "3", ",", "9", ",", "15", ",", "21", ",", "27", ",", "33", ",", "39", ",", "45", ",", "51", "]", "\n", "\n", "", "skip_list", "=", "[", "v", "for", "v", "in", "encoder_layer_index", "]", "\n", "skip_list", "+=", "[", "v", "+", "2", "for", "v", "in", "encoder_layer_index", "]", "\n", "skip_list", "+=", "[", "v", "+", "4", "for", "v", "in", "encoder_layer_index", "]", "\n", "skip_list", "+=", "[", "v", "+", "5", "for", "v", "in", "encoder_layer_index", "]", "\n", "former_merge_out_c_list", "=", "[", "]", "\n", "\n", "# Forward", "\n", "for", "l", "in", "range", "(", "n_layers", "-", "1", ")", ":", "\n", "    ", "weight_idx", ",", "bias_idx", "=", "2", "*", "l", ",", "2", "*", "l", "+", "1", "\n", "next_weight_idx", ",", "next_bias_idx", "=", "2", "*", "(", "l", "+", "1", ")", ",", "2", "*", "(", "l", "+", "1", ")", "+", "1", "\n", "\n", "current_layer_mask", "=", "keep_masks", "[", "weight_idx", "]", "\n", "next_layer_mask", "=", "keep_masks", "[", "next_weight_idx", "]", "\n", "current_layer_out_c", "=", "current_layer_mask", ".", "size", "(", "0", ")", "\n", "next_layer_in_c", "=", "next_layer_mask", ".", "size", "(", "1", ")", "\n", "\n", "if", "(", "l", "+", "1", ")", "not", "in", "encoder_layer_index", ":", "# regular", "\n", "      ", "if", "(", "l", "in", "skip_list", ")", "and", "(", "l", "!=", "56", ")", ":", "\n", "        ", "continue", "\n", "", "elif", "l", "==", "56", ":", "\n", "        ", "for", "neuron_idx", "in", "range", "(", "len", "(", "former_merge_out_c_list", ")", ")", ":", "\n", "          ", "if", "former_merge_out_c_list", "[", "neuron_idx", "]", "==", "0", ":", "\n", "            ", "keep_masks", "[", "2", "*", "(", "l", "+", "1", ")", "]", "[", ":", ",", "neuron_idx", "]", "=", "0", "# last layer", "\n", "\n", "", "", "continue", "\n", "\n", "", "assert", "current_layer_out_c", "==", "next_layer_in_c", "\n", "\n", "if", "len", "(", "next_layer_mask", ".", "shape", ")", "==", "4", ":", "\n", "        ", "current_layer_mask_trans", "=", "current_layer_mask", ".", "view", "(", "current_layer_out_c", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "", "elif", "len", "(", "next_layer_mask", ".", "shape", ")", "==", "5", ":", "\n", "        ", "current_layer_mask_trans", "=", "current_layer_mask", ".", "view", "(", "current_layer_out_c", ",", "-", "1", ",", "1", ",", "1", ",", "1", ")", "\n", "", "else", ":", "\n", "        ", "current_layer_mask_trans", "=", "current_layer_mask", ".", "view", "(", "current_layer_out_c", ",", "-", "1", ")", "\n", "\n", "", "current_layer_mask_trans", "=", "(", "current_layer_mask_trans", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", "!=", "0", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "\n", "# Only for nonzero neurons, since some neurons are previously marked 0 in pruning but not here", "\n", "# This also makes sparse mask dense for param pruning by SNIP", "\n", "next_layer_mask_nonzero", "=", "(", "next_layer_mask", ".", "view", "(", "next_layer_mask", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ".", "sum", "(", "1", ")", "!=", "0", ")", "\n", "next_layer_mask", "[", "next_layer_mask_nonzero", "]", "=", "current_layer_mask_trans", ".", "float", "(", ")", "# make it dense", "\n", "\n", "# This is used in non-SNIP in the paper, but it should be the same as above", "\n", "# This is okay for neuron pruning", "\n", "# for neuron_idx in range(current_layer_out_c):", "\n", "#   if current_layer_mask[neuron_idx].sum() == 0:  # forward passing", "\n", "#     next_layer_mask[:, neuron_idx] = 0", "\n", "\n", "# addtion: backward passing, good for one layer but I3D has 6 layer as a module, too complex, do not waste time", "\n", "# if next_layer_mask[:, neuron_idx].sum() == 0:", "\n", "#   current_layer_mask[neuron_idx] = 0", "\n", "", "else", ":", "# in a 6-layer encoder", "\n", "      ", "if", "l", "==", "2", ":", "\n", "        ", "former_merge_out_c_list", "=", "(", "current_layer_mask", ".", "view", "(", "current_layer_out_c", ",", "-", "1", ")", ".", "sum", "(", "1", ")", "!=", "0", ")", "\n", "former_merge_out_c_list", "=", "former_merge_out_c_list", ".", "float", "(", ")", "\n", "\n", "", "next_layer_0", "=", "keep_masks", "[", "2", "*", "(", "l", "+", "1", ")", "]", "\n", "next_layer_1", "=", "keep_masks", "[", "2", "*", "(", "l", "+", "2", ")", "]", "\n", "next_layer_2", "=", "keep_masks", "[", "2", "*", "(", "l", "+", "3", ")", "]", "\n", "next_layer_3", "=", "keep_masks", "[", "2", "*", "(", "l", "+", "4", ")", "]", "\n", "next_layer_4", "=", "keep_masks", "[", "2", "*", "(", "l", "+", "5", ")", "]", "\n", "next_layer_5", "=", "keep_masks", "[", "2", "*", "(", "l", "+", "6", ")", "]", "\n", "\n", "assign_list", ",", "merge_list", "=", "[", "]", ",", "[", "]", "\n", "assign_list", ".", "append", "(", "next_layer_0", ")", "\n", "assign_list", ".", "append", "(", "next_layer_1", ")", "\n", "assign_list", ".", "append", "(", "next_layer_3", ")", "\n", "assign_list", ".", "append", "(", "next_layer_5", ")", "\n", "\n", "merge_list", ".", "append", "(", "next_layer_0", ")", "\n", "merge_list", ".", "append", "(", "next_layer_2", ")", "\n", "merge_list", ".", "append", "(", "next_layer_4", ")", "\n", "merge_list", ".", "append", "(", "next_layer_5", ")", "\n", "\n", "for", "ii", "in", "assign_list", ":", "\n", "        ", "tmp", "=", "former_merge_out_c_list", ".", "shape", "[", "0", "]", "\n", "\n", "if", "len", "(", "ii", ".", "shape", ")", "==", "4", ":", "\n", "          ", "former_merge_trans", "=", "former_merge_out_c_list", ".", "view", "(", "tmp", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "", "elif", "len", "(", "ii", ".", "shape", ")", "==", "5", ":", "\n", "          ", "former_merge_trans", "=", "former_merge_out_c_list", ".", "view", "(", "tmp", ",", "-", "1", ",", "1", ",", "1", ",", "1", ")", "\n", "", "else", ":", "\n", "          ", "former_merge_trans", "=", "former_merge_out_c_list", ".", "view", "(", "tmp", ",", "-", "1", ")", "\n", "\n", "", "former_merge_trans", "=", "(", "former_merge_trans", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", "!=", "0", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "\n", "# Only for nonzero neurons, since some neurons are previously marked 0 in pruning but not here", "\n", "# This also makes sparse mask dense for param pruning by SNIP", "\n", "ii_nonzero", "=", "(", "ii", ".", "view", "(", "ii", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ".", "sum", "(", "1", ")", "!=", "0", ")", "\n", "ii", "[", "ii_nonzero", "]", "=", "former_merge_trans", ".", "float", "(", ")", "# make it dense", "\n", "\n", "# This is used in non-SNIP in the paper, but it should be the same as above", "\n", "# for neuron_idx in range(len(former_merge_out_c_list)):", "\n", "#   if former_merge_out_c_list[neuron_idx] == 0:", "\n", "#     next_layer_0[:, neuron_idx] = 0", "\n", "#     next_layer_1[:, neuron_idx] = 0", "\n", "#     next_layer_3[:, neuron_idx] = 0", "\n", "#     next_layer_5[:, neuron_idx] = 0", "\n", "\n", "", "former_merge_out_c_list", "=", "[", "]", "\n", "for", "ii", "in", "merge_list", ":", "\n", "        ", "former_merge_out_c_list", ".", "append", "(", "ii", ".", "view", "(", "ii", ".", "size", "(", "0", ")", ",", "-", "1", ")", ".", "sum", "(", "1", ")", "!=", "0", ")", "\n", "\n", "", "former_merge_out_c_list", "=", "torch", ".", "cat", "(", "former_merge_out_c_list", ",", "dim", "=", "0", ")", "\n", "former_merge_out_c_list", "=", "former_merge_out_c_list", ".", "float", "(", ")", "\n", "\n", "", "", "return", "keep_masks", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.video_classification.remove_redundant_PSM": [[228, 346], ["copy.deepcopy", "range", "plus_list.append", "plus_list.append", "plus_list.append", "range", "concat_list.append", "range", "plus_list.append", "plus_list.append", "plus_list.append", "plus_list.append", "range", "plus_list.append", "plus_list.append", "plus_list.append", "plus_list.append", "plus_list.append", "range", "broadcast_list.append", "broadcast_list.append", "broadcast_list.append", "range", "range", "len", "current_layer.transpose().contiguous.size", "current_layer.transpose().contiguous.size", "len", "valid_neuron_list.append", "len", "len", "max", "min", "len", "max", "min", "len", "len", "current_layer.transpose().contiguous.transpose().contiguous", "current_layer.transpose().contiguous.size", "out_c.cpu().numpy().item.cpu().numpy().item", "current_layer.transpose().contiguous.size", "max", "min", "int", "int", "int", "int", "int", "sum", "current_layer.transpose().contiguous.transpose", "out_c.cpu().numpy().item.cpu().numpy", "range", "range", "out_c.cpu().numpy().item.cpu", "current_layer.transpose().contiguous.view().sum", "current_layer.transpose().contiguous.view", "current_layer.transpose().contiguous.size"], "function", ["None"], ["", "def", "remove_redundant_PSM", "(", "keep_masks", ",", "mode", "=", "'max'", ")", ":", "\n", "  ", "if", "keep_masks", "is", "None", ":", "\n", "    ", "return", "\n", "\n", "", "keep_masks", "=", "copy", ".", "deepcopy", "(", "keep_masks", ")", "\n", "n_layers", "=", "len", "(", "keep_masks", ")", "//", "2", "\n", "\n", "# ===========================================", "\n", "# Valid neuron number in every layer", "\n", "valid_neuron_list", "=", "[", "]", "\n", "fix_list", "=", "[", "72", ",", "80", ",", "88", "]", "# the last 3 hourglasses for 3 losses", "\n", "deconv_list", "=", "[", "69", ",", "70", ",", "77", ",", "78", ",", "85", ",", "86", "]", "# !!! Need to swap in_c and out_c of deconv", "\n", "for", "idx", "in", "range", "(", "n_layers", ")", ":", "\n", "    ", "current_layer", "=", "keep_masks", "[", "2", "*", "idx", "]", "\n", "\n", "if", "idx", "in", "deconv_list", ":", "# !!! Deconv should be paid attention", "\n", "      ", "current_layer", "=", "current_layer", ".", "transpose", "(", "1", ",", "0", ")", ".", "contiguous", "(", ")", "\n", "\n", "", "if", "idx", "in", "fix_list", ":", "\n", "      ", "out_c", "=", "current_layer", ".", "size", "(", "0", ")", "\n", "", "else", ":", "\n", "      ", "out_c", "=", "(", "current_layer", ".", "view", "(", "current_layer", ".", "size", "(", "0", ")", ",", "-", "1", ")", ".", "sum", "(", "1", ")", "!=", "0", ")", ".", "float", "(", ")", ".", "sum", "(", ")", "\n", "out_c", "=", "out_c", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "item", "(", ")", "\n", "\n", "", "in_c", "=", "current_layer", ".", "size", "(", "1", ")", "\n", "ksz", "=", "current_layer", ".", "size", "(", "2", ")", "\n", "klen", "=", "len", "(", "current_layer", ".", "size", "(", ")", ")", "\n", "valid_neuron_list", ".", "append", "(", "[", "int", "(", "out_c", ")", ",", "int", "(", "in_c", ")", ",", "int", "(", "ksz", ")", ",", "int", "(", "klen", ")", "]", ")", "\n", "\n", "# ===========================================", "\n", "# Feature extraction plus ResNet type", "\n", "", "plus_list", "=", "[", "]", "\n", "plus_list", ".", "append", "(", "[", "[", "2", ",", "4", ",", "6", ",", "8", "]", ",", "[", "]", "]", ")", "# [[source_layers], [dst_layers]]", "\n", "plus_list", ".", "append", "(", "[", "[", "10", "]", "+", "[", "*", "range", "(", "11", ",", "41", "+", "1", ",", "2", ")", "]", ",", "[", "]", "]", ")", "# ResNet type", "\n", "plus_list", ".", "append", "(", "[", "[", "43", "]", "+", "[", "*", "range", "(", "44", ",", "54", "+", "1", ",", "2", ")", "]", ",", "[", "]", "]", ")", "# ResNet type", "\n", "for", "i", "in", "range", "(", "len", "(", "plus_list", ")", ")", ":", "\n", "    ", "src_list", "=", "plus_list", "[", "i", "]", "[", "0", "]", "\n", "dst_list", "=", "plus_list", "[", "i", "]", "[", "1", "]", "\n", "valid_neuron_plus", "=", "[", "valid_neuron_list", "[", "j", "]", "[", "0", "]", "for", "j", "in", "src_list", "]", "\n", "valid_neuron_plus_final", "=", "max", "(", "valid_neuron_plus", ")", "if", "mode", "==", "'max'", "else", "min", "(", "valid_neuron_plus", ")", "\n", "for", "j", "in", "src_list", ":", "\n", "      ", "valid_neuron_list", "[", "j", "]", "[", "0", "]", "=", "valid_neuron_plus_final", "\n", "", "for", "j", "in", "dst_list", ":", "\n", "      ", "valid_neuron_list", "[", "j", "]", "[", "1", "]", "=", "valid_neuron_plus_final", "\n", "\n", "# ===========================================", "\n", "# Feature extraction concat", "\n", "", "", "concat_list", "=", "[", "]", "\n", "concat_list", ".", "append", "(", "[", "[", "41", ",", "54", ",", "55", ",", "56", ",", "57", ",", "58", "]", ",", "[", "59", "]", "]", ")", "# multiscale type", "\n", "for", "i", "in", "range", "(", "len", "(", "concat_list", ")", ")", ":", "\n", "    ", "src_list", "=", "concat_list", "[", "i", "]", "[", "0", "]", "\n", "dst_list", "=", "concat_list", "[", "i", "]", "[", "1", "]", "\n", "valid_neuron_concat", "=", "[", "valid_neuron_list", "[", "j", "]", "[", "0", "]", "for", "j", "in", "src_list", "]", "\n", "for", "j", "in", "dst_list", ":", "\n", "      ", "valid_neuron_list", "[", "j", "]", "[", "1", "]", "=", "int", "(", "sum", "(", "valid_neuron_concat", ")", ")", "\n", "\n", "# ===========================================", "\n", "# 3D conv plus 1", "\n", "", "", "plus_list", "=", "[", "]", "\n", "plus_list", ".", "append", "(", "[", "[", "62", ",", "64", "]", ",", "[", "65", "]", "]", ")", "# for the addition of every two layers", "\n", "plus_list", ".", "append", "(", "[", "[", "64", ",", "70", "]", ",", "[", "71", ",", "73", "]", "]", ")", "\n", "plus_list", ".", "append", "(", "[", "[", "64", ",", "78", "]", ",", "[", "79", ",", "81", "]", "]", ")", "\n", "plus_list", ".", "append", "(", "[", "[", "64", ",", "86", "]", ",", "[", "87", "]", "]", ")", "\n", "valid_neuron_plus", "=", "[", "valid_neuron_list", "[", "j", "]", "[", "0", "]", "for", "j", "in", "[", "62", ",", "64", ",", "70", ",", "78", ",", "86", "]", "]", "\n", "valid_neuron_plus_final", "=", "max", "(", "valid_neuron_plus", ")", "if", "mode", "==", "'max'", "else", "min", "(", "valid_neuron_plus", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "plus_list", ")", ")", ":", "\n", "    ", "src_list", "=", "plus_list", "[", "i", "]", "[", "0", "]", "\n", "dst_list", "=", "plus_list", "[", "i", "]", "[", "1", "]", "\n", "for", "j", "in", "src_list", ":", "\n", "      ", "valid_neuron_list", "[", "j", "]", "[", "0", "]", "=", "valid_neuron_plus_final", "\n", "", "for", "j", "in", "dst_list", ":", "\n", "      ", "valid_neuron_list", "[", "j", "]", "[", "1", "]", "=", "valid_neuron_plus_final", "\n", "\n", "# ===========================================", "\n", "# 3D conv plus 2", "\n", "", "", "plus_list", "=", "[", "]", "\n", "plus_list", ".", "append", "(", "[", "[", "66", ",", "69", "]", ",", "[", "70", "]", "]", ")", "\n", "plus_list", ".", "append", "(", "[", "[", "66", ",", "69", ",", "74", "]", ",", "[", "75", "]", "]", ")", "\n", "plus_list", ".", "append", "(", "[", "[", "66", ",", "77", "]", ",", "[", "78", "]", "]", ")", "\n", "plus_list", ".", "append", "(", "[", "[", "66", ",", "77", ",", "82", "]", ",", "[", "83", "]", "]", ")", "\n", "plus_list", ".", "append", "(", "[", "[", "66", ",", "85", "]", ",", "[", "86", "]", "]", ")", "\n", "valid_neuron_plus", "=", "[", "valid_neuron_list", "[", "j", "]", "[", "0", "]", "for", "j", "in", "[", "66", ",", "69", ",", "74", ",", "77", ",", "82", ",", "85", "]", "]", "\n", "valid_neuron_plus_final", "=", "max", "(", "valid_neuron_plus", ")", "if", "mode", "==", "'max'", "else", "min", "(", "valid_neuron_plus", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "plus_list", ")", ")", ":", "\n", "    ", "src_list", "=", "plus_list", "[", "i", "]", "[", "0", "]", "\n", "dst_list", "=", "plus_list", "[", "i", "]", "[", "1", "]", "\n", "for", "j", "in", "src_list", ":", "\n", "      ", "valid_neuron_list", "[", "j", "]", "[", "0", "]", "=", "valid_neuron_plus_final", "\n", "", "for", "j", "in", "dst_list", ":", "\n", "      ", "valid_neuron_list", "[", "j", "]", "[", "1", "]", "=", "valid_neuron_plus_final", "\n", "\n", "# ===========================================", "\n", "# Boardcast, multiscale in_c, 54 to [55, 56, 57, 58], set in_channels", "\n", "", "", "broadcast_list", "=", "[", "]", "\n", "broadcast_list", ".", "append", "(", "[", "54", ",", "[", "55", ",", "56", ",", "57", ",", "58", "]", "]", ")", "\n", "broadcast_list", ".", "append", "(", "[", "8", ",", "[", "9", ",", "11", "]", "]", ")", "\n", "broadcast_list", ".", "append", "(", "[", "41", ",", "[", "42", ",", "44", "]", "]", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "broadcast_list", ")", ")", ":", "\n", "    ", "src_layer", "=", "broadcast_list", "[", "i", "]", "[", "0", "]", "\n", "dst_list", "=", "broadcast_list", "[", "i", "]", "[", "1", "]", "\n", "for", "j", "in", "dst_list", ":", "\n", "      ", "valid_neuron_list", "[", "j", "]", "[", "1", "]", "=", "valid_neuron_list", "[", "src_layer", "]", "[", "0", "]", "\n", "\n", "# ===========================================", "\n", "# Fix these since they are assigned values above", "\n", "", "", "in_c_fix_list", "=", "[", "11", ",", "44", ",", "59", ",", "71", ",", "73", ",", "79", ",", "81", ",", "87", ",", "70", ",", "75", ",", "78", ",", "83", ",", "86", ",", "55", ",", "56", ",", "57", ",", "58", "]", "\n", "for", "l", "in", "range", "(", "n_layers", "-", "1", ")", ":", "\n", "    ", "next_layer", "=", "l", "+", "1", "\n", "current_layer_out_c", "=", "valid_neuron_list", "[", "l", "]", "[", "0", "]", "\n", "\n", "if", "next_layer", "not", "in", "in_c_fix_list", ":", "\n", "      ", "valid_neuron_list", "[", "next_layer", "]", "[", "1", "]", "=", "current_layer_out_c", "\n", "\n", "# ===========================================", "\n", "# Cost volume of left-right image features", "\n", "", "", "valid_neuron_list", "[", "61", "]", "[", "1", "]", "=", "2", "*", "valid_neuron_list", "[", "60", "]", "[", "0", "]", "\n", "\n", "return", "valid_neuron_list", "\n", "", ""]], "home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.prune.do_statistics_model": [[16, 28], ["model.named_modules", "isinstance", "layer.weight.data.flatten().size", "layer.weight.data.size", "layer.bias.data.size", "layer.weight.data.flatten"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.unet.losses.flatten"], ["def", "do_statistics_model", "(", "model", ")", ":", "\n", "  ", "n_params", ",", "n_neurons", "=", "0", ",", "0", "\n", "for", "key", ",", "layer", "in", "model", ".", "named_modules", "(", ")", ":", "\n", "    ", "if", "isinstance", "(", "layer", ",", "(", "nn", ".", "Linear", ",", "nn", ".", "Conv2d", ",", "nn", ".", "Conv3d", ",", "\n", "nn", ".", "ConvTranspose2d", ",", "nn", ".", "ConvTranspose3d", ")", ")", ":", "\n", "      ", "n_params", "+=", "layer", ".", "weight", ".", "data", ".", "flatten", "(", ")", ".", "size", "(", "0", ")", "\n", "n_neurons", "+=", "layer", ".", "weight", ".", "data", ".", "size", "(", "0", ")", "\n", "\n", "if", "layer", ".", "bias", "is", "not", "None", ":", "\n", "        ", "n_params", "+=", "layer", ".", "bias", ".", "data", ".", "size", "(", "0", ")", "\n", "\n", "", "", "", "return", "n_params", ",", "n_neurons", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.prune.dump_neuron_per_layer": [[30, 46], ["full_model.named_modules", "refined_model.named_modules", "scipy.savemat", "isinstance", "isinstance", "full_neuron_layer.append", "refined_neuron_layer.append", "layer.weight.data.size", "layer.weight.data.size"], "function", ["None"], ["", "def", "dump_neuron_per_layer", "(", "full_model", ",", "refined_model", ")", ":", "\n", "  ", "full_neuron_layer", ",", "refined_neuron_layer", "=", "[", "]", ",", "[", "]", "\n", "\n", "for", "key", ",", "layer", "in", "full_model", ".", "named_modules", "(", ")", ":", "\n", "    ", "if", "isinstance", "(", "layer", ",", "(", "nn", ".", "Linear", ",", "nn", ".", "Conv2d", ",", "nn", ".", "Conv3d", ",", "\n", "nn", ".", "ConvTranspose2d", ",", "nn", ".", "ConvTranspose3d", ")", ")", ":", "\n", "      ", "full_neuron_layer", ".", "append", "(", "layer", ".", "weight", ".", "data", ".", "size", "(", "0", ")", ")", "\n", "\n", "", "", "for", "key", ",", "layer", "in", "refined_model", ".", "named_modules", "(", ")", ":", "\n", "    ", "if", "isinstance", "(", "layer", ",", "(", "nn", ".", "Linear", ",", "nn", ".", "Conv2d", ",", "nn", ".", "Conv3d", ",", "\n", "nn", ".", "ConvTranspose2d", ",", "nn", ".", "ConvTranspose3d", ")", ")", ":", "\n", "      ", "refined_neuron_layer", ".", "append", "(", "layer", ".", "weight", ".", "data", ".", "size", "(", "0", ")", ")", "\n", "\n", "", "", "scio", ".", "savemat", "(", "'dump/neuron_per_layer_list.mat'", ",", "\n", "{", "'full_model'", ":", "full_neuron_layer", ",", "\n", "'refined_model'", ":", "refined_neuron_layer", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.prune.update_grads_average": [[48, 61], ["len", "len", "range", "len"], "function", ["None"], ["", "def", "update_grads_average", "(", "grads_abs_average", ",", "grads_abs", ",", "batch_idx", ")", ":", "\n", "  ", "if", "len", "(", "grads_abs_average", ")", "==", "0", ":", "\n", "    ", "assert", "batch_idx", "==", "0", "\n", "grads_abs_average", "=", "grads_abs", "\n", "", "else", ":", "\n", "    ", "num", "=", "len", "(", "grads_abs_average", ")", "\n", "assert", "len", "(", "grads_abs", ")", "==", "num", "\n", "assert", "batch_idx", ">=", "1", "\n", "for", "idx", "in", "range", "(", "num", ")", ":", "\n", "      ", "if", "grads_abs", "[", "idx", "]", "is", "not", "None", ":", "\n", "        ", "grads_abs_average", "[", "idx", "]", "=", "(", "grads_abs_average", "[", "idx", "]", "*", "batch_idx", "+", "grads_abs", "[", "idx", "]", ")", "/", "(", "batch_idx", "+", "1", ")", "\n", "\n", "", "", "", "return", "grads_abs_average", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.prune.snip_forward_linear": [[63, 79], ["hasattr", "hasattr", "torch.linear", "hasattr"], "function", ["None"], ["", "def", "snip_forward_linear", "(", "self", ",", "x", ")", ":", "\n", "  ", "bias", "=", "self", ".", "bias", "\n", "weight", "=", "self", ".", "weight", "\n", "\n", "if", "hasattr", "(", "self", ",", "'bias_mask'", ")", ":", "\n", "    ", "bias", "=", "self", ".", "bias", "*", "self", ".", "bias_mask", "\n", "\n", "", "if", "hasattr", "(", "self", ",", "'weight_mask'", ")", ":", "\n", "    ", "weight", "=", "self", ".", "weight", "*", "self", ".", "weight_mask", "\n", "\n", "", "output", "=", "F", ".", "linear", "(", "x", ",", "weight", ",", "bias", ")", "\n", "\n", "if", "hasattr", "(", "self", ",", "'hidden_mask'", ")", ":", "\n", "    ", "output", "=", "output", "*", "self", ".", "hidden_mask", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.prune.snip_forward_conv2d": [[81, 97], ["hasattr", "hasattr", "torch.conv2d", "hasattr"], "function", ["None"], ["", "def", "snip_forward_conv2d", "(", "self", ",", "x", ")", ":", "\n", "  ", "bias", "=", "self", ".", "bias", "\n", "weight", "=", "self", ".", "weight", "\n", "\n", "if", "hasattr", "(", "self", ",", "'bias_mask'", ")", ":", "\n", "    ", "bias", "=", "self", ".", "bias", "*", "self", ".", "bias_mask", "\n", "\n", "", "if", "hasattr", "(", "self", ",", "'weight_mask'", ")", ":", "\n", "    ", "weight", "=", "self", ".", "weight", "*", "self", ".", "weight_mask", "\n", "\n", "", "output", "=", "F", ".", "conv2d", "(", "x", ",", "weight", ",", "bias", ",", "self", ".", "stride", ",", "self", ".", "padding", ",", "self", ".", "dilation", ",", "self", ".", "groups", ")", "\n", "\n", "if", "hasattr", "(", "self", ",", "'hidden_mask'", ")", ":", "\n", "    ", "output", "=", "output", "*", "self", ".", "hidden_mask", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.prune.snip_forward_conv3d": [[99, 115], ["hasattr", "hasattr", "torch.conv3d", "hasattr"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.unet.buildingblocks.conv3d"], ["", "def", "snip_forward_conv3d", "(", "self", ",", "x", ")", ":", "\n", "  ", "bias", "=", "self", ".", "bias", "\n", "weight", "=", "self", ".", "weight", "\n", "\n", "if", "hasattr", "(", "self", ",", "'bias_mask'", ")", ":", "\n", "    ", "bias", "=", "self", ".", "bias", "*", "self", ".", "bias_mask", "\n", "\n", "", "if", "hasattr", "(", "self", ",", "'weight_mask'", ")", ":", "\n", "    ", "weight", "=", "self", ".", "weight", "*", "self", ".", "weight_mask", "\n", "\n", "", "output", "=", "F", ".", "conv3d", "(", "x", ",", "weight", ",", "bias", ",", "self", ".", "stride", ",", "self", ".", "padding", ",", "self", ".", "dilation", ",", "self", ".", "groups", ")", "\n", "\n", "if", "hasattr", "(", "self", ",", "'hidden_mask'", ")", ":", "\n", "    ", "output", "=", "output", "*", "self", ".", "hidden_mask", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.prune.snip_forward_conv3dtranspose": [[117, 137], ["hasattr", "hasattr", "torch.conv_transpose3d", "hasattr"], "function", ["None"], ["", "def", "snip_forward_conv3dtranspose", "(", "self", ",", "x", ")", ":", "\n", "  ", "bias", "=", "self", ".", "bias", "\n", "weight", "=", "self", ".", "weight", "\n", "\n", "if", "hasattr", "(", "self", ",", "'bias_mask'", ")", ":", "\n", "    ", "bias", "=", "self", ".", "bias", "*", "self", ".", "bias_mask", "\n", "\n", "", "if", "hasattr", "(", "self", ",", "'weight_mask'", ")", ":", "\n", "    ", "weight", "=", "self", ".", "weight", "*", "self", ".", "weight_mask", "\n", "\n", "", "output", "=", "F", ".", "conv_transpose3d", "(", "x", ",", "weight", ",", "bias", ",", "\n", "self", ".", "stride", ",", "self", ".", "padding", ",", "\n", "output_padding", "=", "self", ".", "output_padding", ",", "\n", "dilation", "=", "self", ".", "dilation", ",", "\n", "groups", "=", "self", ".", "groups", ")", "\n", "\n", "if", "hasattr", "(", "self", ",", "'hidden_mask'", ")", ":", "\n", "    ", "output", "=", "output", "*", "self", ".", "hidden_mask", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.prune.add_mask_for_hidden_hook": [[139, 145], ["output.size", "torch.Parameter", "torch.ones", "torch.ones", "torch.ones"], "function", ["None"], ["", "def", "add_mask_for_hidden_hook", "(", "self", ",", "input", ",", "output", ")", ":", "\n", "  ", "batch", ",", "c", ",", "h", ",", "w", ",", "d", "=", "output", ".", "size", "(", ")", "\n", "self", ".", "hidden_mask", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "(", "c", ",", "h", ",", "w", ",", "d", ")", ",", "\n", "dtype", "=", "output", ".", "dtype", ",", "\n", "device", "=", "output", ".", "device", ",", "\n", "requires_grad", "=", "True", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.prune.add_mask_for_grad": [[147, 216], ["net.cpu.cpu", "net.cpu.modules", "net.cpu.cuda", "isinstance", "isinstance", "isinstance", "isinstance", "isinstance", "isinstance", "types.MethodType", "types.MethodType", "types.MethodType", "types.MethodType", "torch.Parameter", "layer.register_forward_hook", "torch.init.zeros_", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.init.xavier_normal_", "torch.Parameter", "torch.init.uniform_", "torch.init.constant_", "torch.init.xavier_uniform_", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.init.kaiming_normal_", "torch.init.kaiming_uniform_", "torch.init.orthogonal_", "torch.init.constant_"], "function", ["None"], ["", "def", "add_mask_for_grad", "(", "net", ",", "args", ",", "enable_kernel_mask", "=", "True", ",", "enable_hidden_mask", "=", "False", ")", ":", "\n", "# Monkey-patch the Linear and Conv2d layer to learn the multiplicative mask", "\n", "# instead of the weights", "\n", "# Zhiwei instead of using random one batch, using the whole dataset to get average grads of mask", "\n", "  ", "net", "=", "net", ".", "cpu", "(", ")", "\n", "\n", "for", "layer", "in", "net", ".", "modules", "(", ")", ":", "\n", "    ", "if", "isinstance", "(", "layer", ",", "(", "nn", ".", "Linear", ",", "nn", ".", "Conv2d", ",", "nn", ".", "Conv3d", ",", "nn", ".", "ConvTranspose3d", ")", ")", ":", "\n", "# This is for reproducing, will affect pruning as well as training", "\n", "# torch.manual_seed(0)", "\n", "# torch.cuda.manual_seed(0)", "\n", "# torch.cuda.manual_seed_all(0)", "\n", "\n", "      ", "if", "enable_kernel_mask", ":", "\n", "        ", "layer", ".", "weight_mask", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones_like", "(", "layer", ".", "weight", ")", ")", "\n", "\n", "# New function Zhiwei", "\n", "", "if", "enable_hidden_mask", ":", "\n", "        ", "layer", ".", "hidden_mask_hook", "=", "layer", ".", "register_forward_hook", "(", "add_mask_for_hidden_hook", ")", "\n", "\n", "", "if", "False", ":", "# this avoids pretrained model loading", "\n", "        ", "if", "args", ".", "weight_init", "==", "'xn'", ":", "\n", "          ", "nn", ".", "init", ".", "xavier_normal_", "(", "layer", ".", "weight", ")", "\n", "", "elif", "args", ".", "weight_init", "==", "'xu'", ":", "\n", "          ", "nn", ".", "init", ".", "xavier_uniform_", "(", "layer", ".", "weight", ")", "\n", "", "elif", "args", ".", "weight_init", "==", "'kn'", ":", "\n", "          ", "nn", ".", "init", ".", "kaiming_normal_", "(", "layer", ".", "weight", ")", "\n", "", "elif", "args", ".", "weight_init", "==", "'ku'", ":", "\n", "          ", "nn", ".", "init", ".", "kaiming_uniform_", "(", "layer", ".", "weight", ")", "\n", "", "elif", "args", ".", "weight_init", "in", "[", "'orthogonal'", ",", "'ort'", "]", ":", "\n", "          ", "nn", ".", "init", ".", "orthogonal_", "(", "layer", ".", "weight", ")", "\n", "", "elif", "args", ".", "weight_init", "in", "[", "'one'", ",", "'fixed'", "]", ":", "\n", "          ", "nn", ".", "init", ".", "constant_", "(", "layer", ".", "weight", ",", "1", ")", "\n", "", "else", ":", "\n", "          ", "assert", "False", "\n", "\n", "", "", "layer", ".", "weight", ".", "requires_grad", "=", "False", "# Cuz it is fixed by initialization", "\n", "\n", "if", "layer", ".", "bias", "is", "not", "None", ":", "\n", "        ", "if", "enable_kernel_mask", ":", "\n", "          ", "layer", ".", "bias_mask", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones_like", "(", "layer", ".", "bias", ")", ")", "\n", "", "nn", ".", "init", ".", "zeros_", "(", "layer", ".", "bias", ")", "\n", "layer", ".", "bias", ".", "requires_grad", "=", "False", "\n", "\n", "# Bug this is important for reproducing", "\n", "", "", "if", "isinstance", "(", "layer", ",", "(", "nn", ".", "BatchNorm1d", ",", "nn", ".", "BatchNorm2d", ",", "nn", ".", "BatchNorm3d", ")", ")", ":", "\n", "      ", "if", "False", ":", "# this avoids pretrained model loading", "\n", "        ", "if", "layer", ".", "weight", "is", "not", "None", ":", "\n", "# not good, this will make channel prune remove whole layers", "\n", "# nn.init.constant_(layer.weight, 1)", "\n", "          ", "nn", ".", "init", ".", "uniform_", "(", "layer", ".", "weight", ")", "\n", "\n", "", "if", "layer", ".", "bias", "is", "not", "None", ":", "\n", "          ", "nn", ".", "init", ".", "constant_", "(", "layer", ".", "bias", ",", "0", ")", "\n", "\n", "# Override the forward methods:", "\n", "", "", "", "if", "isinstance", "(", "layer", ",", "nn", ".", "Linear", ")", ":", "\n", "      ", "layer", ".", "forward", "=", "types", ".", "MethodType", "(", "snip_forward_linear", ",", "layer", ")", "\n", "\n", "", "if", "isinstance", "(", "layer", ",", "nn", ".", "Conv2d", ")", ":", "\n", "      ", "layer", ".", "forward", "=", "types", ".", "MethodType", "(", "snip_forward_conv2d", ",", "layer", ")", "\n", "\n", "", "if", "isinstance", "(", "layer", ",", "nn", ".", "Conv3d", ")", ":", "\n", "      ", "layer", ".", "forward", "=", "types", ".", "MethodType", "(", "snip_forward_conv3d", ",", "layer", ")", "\n", "\n", "", "if", "isinstance", "(", "layer", ",", "nn", ".", "ConvTranspose3d", ")", ":", "\n", "      ", "layer", ".", "forward", "=", "types", ".", "MethodType", "(", "snip_forward_conv3dtranspose", ",", "layer", ")", "\n", "\n", "", "", "return", "net", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.prune.get_mask_grad": [[218, 244], ["net.modules", "isinstance", "kernel_mask_grads_abs.append", "kernel_mask_grads_abs.append", "kernel_mask_grads_abs.append", "hidden_mask_grads_abs.append", "hidden_mask_grads_abs.append", "torch.abs", "torch.abs", "torch.abs", "kernel_mask_grads_abs.append", "kernel_mask_grads_abs.append", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs"], "function", ["None"], ["", "def", "get_mask_grad", "(", "net", ",", "enable_kernel_mask", "=", "True", ",", "enable_hidden_mask", "=", "False", ",", "enable_raw_grad", "=", "False", ")", ":", "\n", "  ", "kernel_mask_grads_abs", ",", "hidden_mask_grads_abs", "=", "[", "]", ",", "[", "]", "\n", "\n", "for", "layer", "in", "net", ".", "modules", "(", ")", ":", "\n", "    ", "if", "isinstance", "(", "layer", ",", "(", "nn", ".", "Linear", ",", "nn", ".", "Conv2d", ",", "nn", ".", "Conv3d", ",", "nn", ".", "ConvTranspose3d", ")", ")", ":", "\n", "      ", "if", "enable_kernel_mask", ":", "\n", "        ", "if", "enable_raw_grad", ":", "\n", "          ", "kernel_mask_grads_abs", ".", "append", "(", "layer", ".", "weight_mask", ".", "grad", ")", "\n", "", "else", ":", "\n", "          ", "kernel_mask_grads_abs", ".", "append", "(", "torch", ".", "abs", "(", "layer", ".", "weight_mask", ".", "grad", ")", ")", "\n", "\n", "", "if", "layer", ".", "bias", "is", "not", "None", ":", "\n", "          ", "if", "enable_raw_grad", ":", "\n", "            ", "kernel_mask_grads_abs", ".", "append", "(", "layer", ".", "bias_mask", ".", "grad", ")", "\n", "", "else", ":", "\n", "            ", "kernel_mask_grads_abs", ".", "append", "(", "torch", ".", "abs", "(", "layer", ".", "bias_mask", ".", "grad", ")", ")", "\n", "", "", "else", ":", "\n", "          ", "kernel_mask_grads_abs", ".", "append", "(", "None", ")", "\n", "\n", "", "", "if", "enable_hidden_mask", ":", "\n", "        ", "if", "enable_raw_grad", ":", "\n", "          ", "hidden_mask_grads_abs", ".", "append", "(", "layer", ".", "hidden_mask", ".", "grad", ")", "\n", "", "else", ":", "\n", "          ", "hidden_mask_grads_abs", ".", "append", "(", "torch", ".", "abs", "(", "layer", ".", "hidden_mask", ".", "grad", ")", ")", "\n", "\n", "", "", "", "", "return", "kernel_mask_grads_abs", ",", "hidden_mask_grads_abs", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.prune.apply_forward_hidden_mask_hook": [[247, 253], ["prune..hidden_mask.to"], "function", ["None"], ["", "def", "apply_forward_hidden_mask_hook", "(", "self", ",", "input", ",", "output", ")", ":", "\n", "# output.data[self.hidden_mask.unsqueeze(0) == 0.] = 0", "\n", "  ", "if", "output", ".", "data", ".", "device", "!=", "self", ".", "hidden_mask", ".", "device", ":", "\n", "    ", "self", ".", "hidden_mask", "=", "self", ".", "hidden_mask", ".", "to", "(", "output", ".", "data", ".", "device", ")", "\n", "\n", "", "output", ".", "data", "=", "output", ".", "data", "*", "self", ".", "hidden_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.prune.apply_backward_hidden_mask_hook": [[255, 257], ["None"], "function", ["None"], ["", "def", "apply_backward_hidden_mask_hook", "(", "self", ",", "grad_in", ",", "grad_out", ")", ":", "\n", "  ", "grad_out", "[", "0", "]", ".", "data", "=", "grad_out", "[", "0", "]", ".", "data", "*", "self", ".", "hidden_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.prune.remove_hooks": [[259, 263], ["net.modules", "hasattr", "layer.hidden_mask_hook.remove"], "function", ["None"], ["", "def", "remove_hooks", "(", "net", ")", ":", "\n", "  ", "for", "layer", "in", "net", ".", "modules", "(", ")", ":", "\n", "    ", "if", "hasattr", "(", "layer", ",", "'hidden_mask'", ")", ":", "\n", "      ", "layer", ".", "hidden_mask_hook", ".", "remove", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.prune.apply_hidden_mask": [[265, 284], ["filter", "enumerate", "net.modules", "zip", "isinstance", "hasattr", "hasattr", "layer.register_forward_hook", "hasattr", "layer.register_backward_hook", "layer.hidden_mask.unsqueeze"], "function", ["None"], ["", "", "", "def", "apply_hidden_mask", "(", "net", ",", "hidden_masks", ",", "enable_hidden_sum", "=", "False", ")", ":", "\n", "  ", "prunable_layers", "=", "filter", "(", "lambda", "layer", ":", "isinstance", "(", "layer", ",", "(", "nn", ".", "Linear", ",", "\n", "nn", ".", "Conv2d", ",", "\n", "nn", ".", "Conv3d", ",", "\n", "nn", ".", "ConvTranspose3d", ")", ")", ",", "\n", "net", ".", "modules", "(", ")", ")", "\n", "\n", "for", "idx", ",", "(", "layer", ",", "hidden_mask", ")", "in", "enumerate", "(", "zip", "(", "prunable_layers", ",", "hidden_masks", ")", ")", ":", "\n", "    ", "if", "not", "hasattr", "(", "layer", ",", "'hidden_mask'", ")", ":", "\n", "      ", "layer", ".", "hidden_mask", "=", "hidden_mask", "\n", "\n", "if", "enable_hidden_sum", ":", "\n", "        ", "layer", ".", "hidden_mask", "=", "layer", ".", "hidden_mask", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "", "", "if", "not", "hasattr", "(", "layer", ",", "'hidden_mask_forward_hook'", ")", ":", "\n", "      ", "layer", ".", "hidden_mask_forward_hook", "=", "layer", ".", "register_forward_hook", "(", "apply_forward_hidden_mask_hook", ")", "\n", "\n", "", "if", "not", "hasattr", "(", "layer", ",", "'hidden_mask_backward_hook'", ")", ":", "\n", "      ", "layer", ".", "hidden_mask_backward_hook", "=", "layer", ".", "register_backward_hook", "(", "apply_backward_hidden_mask_hook", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.prune.apply_prune_mask": [[286, 320], ["filter", "enumerate", "net.modules", "layer.weight.register_hook", "isinstance", "prune.apply_prune_mask.hook_factory"], "function", ["None"], ["", "", "", "def", "apply_prune_mask", "(", "net", ",", "keep_masks", ")", ":", "\n", "  ", "prunable_layers", "=", "filter", "(", "lambda", "layer", ":", "isinstance", "(", "layer", ",", "(", "nn", ".", "Conv2d", ",", "\n", "nn", ".", "Linear", ",", "\n", "nn", ".", "Conv3d", ",", "\n", "nn", ".", "ConvTranspose3d", ")", ")", ",", "\n", "net", ".", "modules", "(", ")", ")", "\n", "\n", "for", "idx", ",", "layer", "in", "enumerate", "(", "prunable_layers", ")", ":", "\n", "    ", "weight_mask", ",", "bias_mask", "=", "keep_masks", "[", "2", "*", "idx", "]", ",", "keep_masks", "[", "2", "*", "idx", "+", "1", "]", "\n", "assert", "(", "layer", ".", "weight", ".", "shape", "==", "weight_mask", ".", "shape", ")", "\n", "\n", "def", "hook_factory", "(", "mask", ")", ":", "\n", "      ", "\"\"\"\n      The hook function can't be defined directly here because of Python's\n      late binding which would result in all hooks getting the very last\n      mask! Getting it through another function forces early binding.\n      \"\"\"", "\n", "\n", "def", "hook", "(", "grads", ")", ":", "\n", "          ", "return", "grads", "*", "mask", "\n", "\n", "", "return", "hook", "\n", "\n", "# mask[i] == 0 --> Prune parameter", "\n", "# mask[i] == 1 --> Keep parameter", "\n", "# Step 1: Set the masked weights/bias to zero", "\n", "# Step 2: Make sure their gradients remain zero", "\n", "", "layer", ".", "weight", ".", "data", "[", "weight_mask", "==", "0.", "]", "=", "0.", "\n", "layer", ".", "weight", ".", "register_hook", "(", "hook_factory", "(", "weight_mask", ")", ")", "\n", "\n", "if", "bias_mask", "is", "not", "None", ":", "\n", "      ", "assert", "(", "layer", ".", "bias", ".", "shape", "==", "bias_mask", ".", "shape", ")", "\n", "layer", ".", "bias", ".", "data", "[", "bias_mask", "==", "0.", "]", "=", "0.", "\n", "layer", ".", "bias", ".", "register_hook", "(", "hook_factory", "(", "bias_mask", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.prune.apply_prune_mask_3dunet": [[323, 357], ["filter", "enumerate", "net.modules", "layer.weight.register_hook", "isinstance", "prune.apply_prune_mask.hook_factory"], "function", ["None"], ["", "", "", "def", "apply_prune_mask_3dunet", "(", "net", ",", "keep_masks", ")", ":", "\n", "  ", "prunable_layers", "=", "filter", "(", "lambda", "layer", ":", "isinstance", "(", "layer", ",", "(", "nn", ".", "Conv2d", ",", "\n", "nn", ".", "Linear", ",", "\n", "nn", ".", "Conv3d", ",", "\n", "nn", ".", "ConvTranspose3d", ")", ")", ",", "\n", "net", ".", "modules", "(", ")", ")", "\n", "\n", "for", "idx", ",", "(", "layer", ")", "in", "enumerate", "(", "prunable_layers", ")", ":", "\n", "    ", "weight_mask", ",", "bias_mask", "=", "keep_masks", "[", "2", "*", "idx", "]", ",", "keep_masks", "[", "2", "*", "idx", "+", "1", "]", "\n", "assert", "(", "layer", ".", "weight", ".", "shape", "==", "weight_mask", ".", "shape", ")", "\n", "\n", "def", "hook_factory", "(", "mask", ")", ":", "\n", "      ", "\"\"\"\n      The hook function can't be defined directly here because of Python's\n      late binding which would result in all hooks getting the very last\n      mask! Getting it through another function forces early binding.\n      \"\"\"", "\n", "\n", "def", "hook", "(", "grads", ")", ":", "\n", "          ", "return", "grads", "*", "mask", "\n", "\n", "", "return", "hook", "\n", "\n", "# mask[i] == 0 --> Prune parameter", "\n", "# mask[i] == 1 --> Keep parameter", "\n", "# Step 1: Set the masked weights/bias to zero", "\n", "# Step 2: Make sure their gradients remain zero", "\n", "", "layer", ".", "weight", ".", "data", "[", "weight_mask", "==", "0.", "]", "=", "0.", "\n", "layer", ".", "weight", ".", "register_hook", "(", "hook_factory", "(", "weight_mask", ")", ")", "\n", "\n", "if", "bias_mask", "is", "not", "None", ":", "\n", "      ", "assert", "(", "layer", ".", "bias", ".", "shape", "==", "bias_mask", ".", "shape", ")", "\n", "layer", ".", "bias", ".", "data", "[", "bias_mask", "==", "0.", "]", "=", "0.", "\n", "layer", ".", "bias", ".", "register_hook", "(", "hook_factory", "(", "bias_mask", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.prune.do_statistics": [[359, 424], ["range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "retain_mask[].new_zeros", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "len", "len", "len", "retain_layer.sum", "clean_layer.sum", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "print", "print", "print", "print", "print", "print", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "print", "retain_layer.size", "clean_layer.size", "retain_mask[].sum", "clean_mask[].sum", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.cat.int().cpu().numpy", "torch.cat.int().cpu().numpy", "torch.cat.int().cpu().numpy", "torch.cat.int().cpu().numpy", "invalid_by_retained.cpu().numpy", "valid_by_total.cpu().numpy", "print", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "enumerate", "torch.flatten", "torch.flatten", "torch.flatten", "enumerate", "torch.flatten", "torch.flatten", "torch.flatten", "enumerate", "torch.sum.float", "torch.sum.float", "torch.cat.int().cpu", "torch.cat.int().cpu", "torch.cat.int().cpu", "torch.cat.int().cpu", "invalid_by_retained.cpu", "valid_by_total.cpu", "n_invalids.int", "n_retains.int", "n_all.int", "torch.sum.float", "torch.sum.float", "float", "float", "float", "float", "float", "float", "mask.view", "mask.view().sum", "mask.view().sum", "mask.view().sum", "torch.cat.int", "torch.cat.int", "torch.cat.int", "torch.cat.int", "mask.size", "mask.view", "mask.view", "mask.view", "mask.size", "mask.size", "mask.size"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.unet.losses.flatten", "home.repos.pwc.inspect_result.zwxu064_RANP.unet.losses.flatten", "home.repos.pwc.inspect_result.zwxu064_RANP.unet.losses.flatten", "home.repos.pwc.inspect_result.zwxu064_RANP.unet.losses.flatten", "home.repos.pwc.inspect_result.zwxu064_RANP.unet.losses.flatten", "home.repos.pwc.inspect_result.zwxu064_RANP.unet.losses.flatten", "home.repos.pwc.inspect_result.zwxu064_RANP.unet.losses.flatten", "home.repos.pwc.inspect_result.zwxu064_RANP.unet.losses.flatten", "home.repos.pwc.inspect_result.zwxu064_RANP.unet.losses.flatten", "home.repos.pwc.inspect_result.zwxu064_RANP.unet.losses.flatten", "home.repos.pwc.inspect_result.zwxu064_RANP.unet.losses.flatten", "home.repos.pwc.inspect_result.zwxu064_RANP.unet.losses.flatten"], ["", "", "", "def", "do_statistics", "(", "retain_mask", ",", "clean_mask", ")", ":", "\n", "  ", "assert", "len", "(", "retain_mask", ")", "==", "len", "(", "clean_mask", ")", "\n", "n_layers", "=", "len", "(", "retain_mask", ")", "//", "2", "\n", "valid_per_layer", ",", "invalid_per_layer", ",", "retain_per_layer", ",", "all_per_layer", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "n_invalids", ",", "n_retains", ",", "n_all", "=", "0", ",", "0", ",", "0", "\n", "\n", "for", "idx", "in", "range", "(", "n_layers", ")", ":", "\n", "    ", "weight_idx", ",", "bias_idx", "=", "2", "*", "idx", ",", "2", "*", "idx", "+", "1", "\n", "retain_layer", ",", "clean_layer", "=", "retain_mask", "[", "weight_idx", "]", ",", "clean_mask", "[", "weight_idx", "]", "\n", "assert", "retain_layer", ".", "size", "(", ")", "==", "clean_layer", ".", "size", "(", ")", "\n", "retain_sum", "=", "retain_layer", ".", "sum", "(", ")", "\n", "valid_sum", "=", "clean_layer", ".", "sum", "(", ")", "\n", "all_sum", "=", "(", "retain_layer", ">=", "0", ")", ".", "float", "(", ")", ".", "sum", "(", ")", "\n", "\n", "if", "retain_mask", "[", "bias_idx", "]", "is", "not", "None", ":", "\n", "      ", "retain_sum", "+=", "retain_mask", "[", "bias_idx", "]", ".", "sum", "(", ")", "\n", "valid_sum", "+=", "clean_mask", "[", "bias_idx", "]", ".", "sum", "(", ")", "\n", "all_sum", "+=", "(", "retain_mask", "[", "bias_idx", "]", ">=", "0", ")", ".", "float", "(", ")", ".", "sum", "(", ")", "\n", "\n", "", "invalid_sum", "=", "retain_sum", "-", "valid_sum", "\n", "n_invalids", "+=", "invalid_sum", "\n", "n_retains", "+=", "retain_sum", "\n", "n_all", "+=", "all_sum", "\n", "\n", "retain_per_layer", ".", "append", "(", "torch", ".", "tensor", "(", "[", "retain_sum", "]", ")", ")", "\n", "valid_per_layer", ".", "append", "(", "torch", ".", "tensor", "(", "[", "valid_sum", "]", ")", ")", "\n", "invalid_per_layer", ".", "append", "(", "torch", ".", "tensor", "(", "[", "invalid_sum", "]", ")", ")", "\n", "all_per_layer", ".", "append", "(", "torch", ".", "tensor", "(", "[", "all_sum", "]", ")", ")", "\n", "\n", "", "retain_per_layer", "=", "torch", ".", "cat", "(", "retain_per_layer", ",", "dim", "=", "0", ")", "\n", "valid_per_layer", "=", "torch", ".", "cat", "(", "valid_per_layer", ",", "dim", "=", "0", ")", "\n", "invalid_per_layer", "=", "torch", ".", "cat", "(", "invalid_per_layer", ",", "dim", "=", "0", ")", "\n", "all_per_layer", "=", "torch", ".", "cat", "(", "all_per_layer", ",", "dim", "=", "0", ")", "\n", "invalid_by_retained", "=", "invalid_per_layer", "/", "retain_per_layer", "\n", "valid_by_total", "=", "valid_per_layer", "/", "all_per_layer", "\n", "\n", "if", "False", ":", "# enable manuually, otherwise a mess", "\n", "    ", "print", "(", "'valid in layer: {}'", ".", "format", "(", "valid_per_layer", ".", "int", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ")", "\n", "print", "(", "'invalid in layer: {}'", ".", "format", "(", "invalid_per_layer", ".", "int", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ")", "\n", "print", "(", "'retain in layer: {}'", ".", "format", "(", "retain_per_layer", ".", "int", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ")", "\n", "print", "(", "'total in layer: {}'", ".", "format", "(", "all_per_layer", ".", "int", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ")", "\n", "print", "(", "'invalid/retain in layer: {}'", ".", "format", "(", "invalid_by_retained", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ")", "\n", "print", "(", "'valid/total in layer: {}'", ".", "format", "(", "valid_by_total", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ")", "\n", "\n", "if", "enable_verbose", ":", "\n", "      ", "if", "(", "n_retains", ">", "0", ")", "and", "(", "n_all", ">", "0", ")", ":", "\n", "        ", "print", "(", "'invalid: {}, retain: {}, all: {}\\ninvalid/retain: {:.4f}, retain/all: {:.4f}, valid/all: {:.4f}'", ".", "format", "(", "n_invalids", ".", "int", "(", ")", ",", "n_retains", ".", "int", "(", ")", ",", "n_all", ".", "int", "(", ")", ",", "\n", "float", "(", "n_invalids", ")", "/", "float", "(", "n_retains", ")", ",", "\n", "float", "(", "n_retains", ")", "/", "float", "(", "n_all", ")", ",", "\n", "float", "(", "n_retains", "-", "n_invalids", ")", "/", "float", "(", "n_all", ")", ")", ")", "\n", "\n", "", "", "", "zero_fill", "=", "retain_mask", "[", "0", "]", ".", "new_zeros", "(", "1", ",", "dtype", "=", "torch", ".", "uint8", ")", "\n", "n_params", "=", "torch", ".", "sum", "(", "torch", ".", "cat", "(", "[", "torch", ".", "flatten", "(", "mask", ".", "view", "(", "mask", ".", "size", "(", "0", ")", ",", "-", "1", ")", ">=", "0", ")", "if", "(", "mask", "is", "not", "None", ")", "else", "zero_fill", "for", "mask", "in", "retain_mask", "]", ")", ")", "\n", "n_neuron_total", "=", "torch", ".", "sum", "(", "torch", ".", "cat", "(", "[", "torch", ".", "flatten", "(", "mask", ".", "view", "(", "mask", ".", "size", "(", "0", ")", ",", "-", "1", ")", ".", "sum", "(", "1", ")", ">=", "0", ")", "if", "(", "idx", "%", "2", "==", "0", ")", "else", "zero_fill", "for", "idx", ",", "mask", "in", "enumerate", "(", "retain_mask", ")", "]", ")", ")", "\n", "n_neuron_retained", "=", "torch", ".", "sum", "(", "torch", ".", "cat", "(", "[", "torch", ".", "flatten", "(", "mask", ".", "view", "(", "mask", ".", "size", "(", "0", ")", ",", "-", "1", ")", ".", "sum", "(", "1", ")", ">", "0", ")", "if", "(", "idx", "%", "2", "==", "0", ")", "else", "zero_fill", "for", "idx", ",", "mask", "in", "enumerate", "(", "retain_mask", ")", "]", ")", ")", "\n", "n_neuron_clean", "=", "torch", ".", "sum", "(", "torch", ".", "cat", "(", "[", "torch", ".", "flatten", "(", "mask", ".", "view", "(", "mask", ".", "size", "(", "0", ")", ",", "-", "1", ")", ".", "sum", "(", "1", ")", ">", "0", ")", "if", "(", "idx", "%", "2", "==", "0", ")", "else", "zero_fill", "for", "idx", ",", "mask", "in", "enumerate", "(", "clean_mask", ")", "]", ")", ")", "\n", "\n", "if", "enable_verbose", ":", "\n", "    ", "print", "(", "'Num params: {:d}; neuron total: {:d}, after pruning: {:d} ({:.4f}%), after cleaning: {:d} ({:.4f}%)'", ".", "format", "(", "n_params", ",", "n_neuron_total", ",", "\n", "n_neuron_retained", ",", "n_neuron_retained", ".", "float", "(", ")", "*", "100", "/", "n_neuron_total", ".", "float", "(", ")", ",", "\n", "n_neuron_clean", ",", "n_neuron_clean", ".", "float", "(", ")", "*", "100", "/", "n_neuron_total", ".", "float", "(", ")", ")", ")", "\n", "\n", "", "return", "invalid_per_layer", ",", "retain_per_layer", ",", "all_per_layer", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.prune.remove_redundant_3dunet": [[426, 571], ["copy.deepcopy", "range", "range", "print", "len", "current_layer_mask.size", "next_layer_mask.size", "range", "range", "range", "front_layer_mask.size", "current_layer_mask.size", "print", "concatenate_layer_mask.size", "print", "concatenate_layer_mask.size", "idx_of_concat.is_integer", "int", "concatenate_layer_mask.size", "concatenate_layer_mask[].sum", "next_layer_mask[].sum", "current_layer_mask[].sum", "next_layer_mask[].sum", "idx_of_concat.is_integer", "int", "concatenate_layer_mask.size", "current_layer_mask.size", "next_layer_mask.size", "next_layer_mask.view().sum", "front_layer_mask.size", "current_layer_mask.size", "current_layer_mask[].sum", "concatenate_layer_mask[].sum", "current_layer_mask[].sum", "front_layer_mask[].sum", "next_layer_mask.view", "next_layer_mask.size"], "function", ["None"], ["", "def", "remove_redundant_3dunet", "(", "keep_masks", ",", "width", "=", "2", ")", ":", "# only support neuron pruning", "\n", "  ", "if", "keep_masks", "is", "None", ":", "\n", "    ", "return", "\n", "\n", "", "keep_masks", "=", "copy", ".", "deepcopy", "(", "keep_masks", ")", "\n", "\n", "if", "enable_verbose", ":", "\n", "    ", "print", "(", "'='", "*", "20", ",", "'remove redundant retains'", ",", "'='", "*", "20", ")", "\n", "\n", "", "n_layers", "=", "len", "(", "keep_masks", ")", "//", "2", "\n", "# assert n_layers == 15", "\n", "\n", "# 1:last layer, 2:first two layers, 4:2*2, double_conv, encoders+decoders", "\n", "number_of_encoders", "=", "(", "n_layers", "-", "1", "-", "width", ")", "//", "(", "2", "*", "width", ")", "\n", "last_layer_last_encoder", "=", "number_of_encoders", "*", "width", "+", "width", "-", "1", "\n", "\n", "# Forward", "\n", "for", "l", "in", "range", "(", "n_layers", "-", "1", ")", ":", "\n", "    ", "weight_idx", ",", "bias_idx", "=", "2", "*", "l", ",", "2", "*", "l", "+", "1", "\n", "next_weight_idx", ",", "next_bias_idx", "=", "2", "*", "(", "l", "+", "1", ")", ",", "2", "*", "(", "l", "+", "1", ")", "+", "1", "\n", "\n", "current_layer_mask", "=", "keep_masks", "[", "weight_idx", "]", "\n", "next_layer_mask", "=", "keep_masks", "[", "next_weight_idx", "]", "\n", "next_layer_bias_mask", "=", "keep_masks", "[", "next_bias_idx", "]", "\n", "\n", "# for the case of concatenation, channels unmatched", "\n", "current_layer_out_c", "=", "current_layer_mask", ".", "size", "(", "0", ")", "\n", "following_in_c", "=", "next_layer_mask", ".", "size", "(", "1", ")", "\n", "concatenate_layer_mask", "=", "[", "]", "\n", "concatenate_layer_out_c", "=", "0", "\n", "\n", "# Deal with concatenation which causes difference between out and in channels", "\n", "if", "current_layer_out_c", "!=", "following_in_c", ":", "\n", "\n", "      ", "if", "enable_verbose", ":", "\n", "        ", "print", "(", "'Warning (this is fine, concatenation), current layer: {}, following: {}'", ".", "format", "(", "current_layer_mask", ".", "size", "(", ")", ",", "next_layer_mask", ".", "size", "(", ")", ")", ")", "\n", "\n", "", "if", "True", ":", "\n", "        ", "idx_of_concat", "=", "(", "l", "-", "last_layer_last_encoder", ")", "/", "width", "\n", "if", "idx_of_concat", ".", "is_integer", "(", ")", "and", "(", "idx_of_concat", ">=", "0", ")", "and", "(", "l", "<", "n_layers", "-", "1", "-", "width", ")", ":", "\n", "          ", "concat_layer_idx", "=", "l", "-", "width", "-", "idx_of_concat", "*", "2", "*", "width", "\n", "concat_layer_idx", "=", "int", "(", "concat_layer_idx", ")", "\n", "concatenate_layer_mask", "=", "keep_masks", "[", "concat_layer_idx", "*", "2", "]", "\n", "concatenate_layer_out_c", "=", "concatenate_layer_mask", ".", "size", "(", "0", ")", "\n", "assert", "(", "concatenate_layer_out_c", "+", "current_layer_out_c", "==", "following_in_c", ")", "\n", "", "", "else", ":", "\n", "        ", "if", "l", "==", "7", ":", "\n", "          ", "concatenate_layer_mask", "=", "keep_masks", "[", "5", "*", "2", "]", "\n", "", "elif", "l", "==", "9", ":", "\n", "          ", "concatenate_layer_mask", "=", "keep_masks", "[", "3", "*", "2", "]", "\n", "", "elif", "l", "==", "11", ":", "\n", "          ", "concatenate_layer_mask", "=", "keep_masks", "[", "1", "*", "2", "]", "\n", "\n", "", "concatenate_layer_out_c", "=", "concatenate_layer_mask", ".", "size", "(", "0", ")", "\n", "assert", "(", "concatenate_layer_out_c", "+", "current_layer_out_c", "==", "following_in_c", ")", "\n", "\n", "# Concatenation first, then current_layer", "\n", "", "", "for", "idx_neuron", "in", "range", "(", "concatenate_layer_out_c", ")", ":", "\n", "# All conv3d except the last one have no bias", "\n", "      ", "if", "(", "concatenate_layer_mask", "[", "idx_neuron", ",", ":", ",", ":", ",", ":", ",", ":", "]", ".", "sum", "(", ")", "==", "0", ")", "and", "(", "next_layer_mask", "[", ":", ",", "idx_neuron", ",", ":", ",", ":", ",", ":", "]", ".", "sum", "(", ")", "!=", "0", ")", ":", "\n", "        ", "invalid_area", "=", "next_layer_mask", "[", ":", ",", "idx_neuron", ",", ":", ",", ":", ",", ":", "]", "==", "1", "\n", "next_layer_mask", "[", ":", ",", "idx_neuron", ",", ":", ",", ":", ",", ":", "]", "[", "invalid_area", "]", "=", "0", "\n", "\n", "", "", "for", "idx_neuron", "in", "range", "(", "current_layer_out_c", ")", ":", "\n", "      ", "idx_neuron_concat", "=", "idx_neuron", "+", "concatenate_layer_out_c", "\n", "\n", "if", "(", "current_layer_mask", "[", "idx_neuron", ",", ":", ",", ":", ",", ":", ",", ":", "]", ".", "sum", "(", ")", "==", "0", ")", "and", "(", "next_layer_mask", "[", ":", ",", "idx_neuron_concat", ",", ":", ",", ":", ",", ":", "]", ".", "sum", "(", ")", "!=", "0", ")", ":", "\n", "        ", "invalid_area", "=", "next_layer_mask", "[", ":", ",", "idx_neuron_concat", ",", ":", ",", ":", ",", ":", "]", "==", "1", "\n", "next_layer_mask", "[", ":", ",", "idx_neuron_concat", ",", ":", ",", ":", ",", ":", "]", "[", "invalid_area", "]", "=", "0", "\n", "\n", "# when weights of a neuron are all removed, its bias should also be removed", "\n", "if", "next_layer_bias_mask", "is", "not", "None", ":", "\n", "          ", "invalid_area", "=", "next_layer_mask", ".", "view", "(", "next_layer_mask", ".", "size", "(", "0", ")", ",", "-", "1", ")", ".", "sum", "(", "1", ")", "==", "0", "\n", "next_layer_bias_mask", "[", "invalid_area", "]", "=", "0", "\n", "\n", "# Backward", "\n", "", "", "", "", "for", "l", "in", "range", "(", "n_layers", "-", "1", ",", "0", ",", "-", "1", ")", ":", "\n", "# continue", "\n", "    ", "weight_idx", ",", "bias_idx", "=", "2", "*", "l", ",", "2", "*", "l", "+", "1", "\n", "front_weight_idx", ",", "front_bias_idx", "=", "2", "*", "(", "l", "-", "1", ")", ",", "2", "*", "(", "l", "-", "1", ")", "+", "1", "\n", "current_layer_mask", "=", "keep_masks", "[", "weight_idx", "]", "\n", "front_layer_mask", "=", "keep_masks", "[", "front_weight_idx", "]", "\n", "\n", "# Deal with concatenation which causes difference between out and in channels", "\n", "front_layer_out_c", "=", "front_layer_mask", ".", "size", "(", ")", "[", "0", "]", "\n", "current_layer_in_c", "=", "current_layer_mask", ".", "size", "(", ")", "[", "1", "]", "\n", "concatenate_layer_out_c", "=", "0", "\n", "\n", "if", "current_layer_in_c", "!=", "front_layer_out_c", ":", "\n", "      ", "if", "enable_verbose", ":", "\n", "        ", "print", "(", "'Warning (this is fine, concatenation), front layer: {}, current layer: {}'", ".", "format", "(", "front_layer_mask", ".", "size", "(", ")", ",", "current_layer_mask", ".", "size", "(", ")", ")", ")", "\n", "\n", "", "if", "True", ":", "\n", "        ", "idx_of_concat", "=", "(", "(", "l", "-", "1", ")", "-", "last_layer_last_encoder", ")", "/", "width", "\n", "if", "idx_of_concat", ".", "is_integer", "(", ")", "and", "(", "idx_of_concat", ">=", "0", ")", "and", "(", "(", "l", "-", "1", ")", "<", "n_layers", "-", "1", "-", "width", ")", ":", "\n", "          ", "concat_layer_idx", "=", "(", "l", "-", "1", ")", "-", "width", "-", "idx_of_concat", "*", "2", "*", "width", "\n", "concat_layer_idx", "=", "int", "(", "concat_layer_idx", ")", "\n", "concatenate_layer_mask", "=", "keep_masks", "[", "concat_layer_idx", "*", "2", "]", "\n", "concatenate_layer_out_c", "=", "concatenate_layer_mask", ".", "size", "(", "0", ")", "\n", "assert", "(", "concatenate_layer_out_c", "+", "front_layer_out_c", "==", "current_layer_in_c", ")", "\n", "", "", "else", ":", "\n", "        ", "if", "l", "==", "8", ":", "\n", "          ", "concatenate_layer_mask", "=", "keep_masks", "[", "5", "*", "2", "]", "\n", "", "elif", "l", "==", "10", ":", "\n", "          ", "concatenate_layer_mask", "=", "keep_masks", "[", "3", "*", "2", "]", "\n", "", "elif", "l", "==", "12", ":", "\n", "          ", "concatenate_layer_mask", "=", "keep_masks", "[", "1", "*", "2", "]", "\n", "\n", "", "concatenate_layer_out_c", "=", "concatenate_layer_mask", ".", "size", "(", "0", ")", "\n", "assert", "(", "concatenate_layer_out_c", "+", "front_layer_out_c", "==", "current_layer_in_c", ")", "\n", "\n", "", "", "for", "idx_neuron", "in", "range", "(", "current_layer_in_c", ")", ":", "\n", "      ", "if", "(", "concatenate_layer_out_c", ">", "0", ")", "and", "(", "idx_neuron", "<", "concatenate_layer_out_c", ")", ":", "\n", "        ", "if", "(", "current_layer_mask", "[", ":", ",", "idx_neuron", ",", ":", ",", ":", ",", ":", "]", ".", "sum", "(", ")", "==", "0", ")", "and", "(", "concatenate_layer_mask", "[", "idx_neuron", ",", ":", ",", ":", ",", ":", ",", ":", "]", ".", "sum", "(", ")", "!=", "0", ")", ":", "\n", "          ", "invalid_area", "=", "concatenate_layer_mask", "[", "idx_neuron", ",", ":", ",", ":", ",", ":", ",", ":", "]", "==", "1", "\n", "concatenate_layer_mask", "[", "idx_neuron", ",", ":", ",", ":", ",", ":", ",", ":", "]", "[", "invalid_area", "]", "=", "0", "\n", "", "", "else", ":", "\n", "        ", "idx_neuron_concat", "=", "idx_neuron", "-", "concatenate_layer_out_c", "\n", "if", "(", "current_layer_mask", "[", ":", ",", "idx_neuron", ",", ":", ",", ":", ",", ":", "]", ".", "sum", "(", ")", "==", "0", ")", "and", "(", "front_layer_mask", "[", "idx_neuron_concat", ",", ":", ",", ":", ",", ":", ",", ":", "]", ".", "sum", "(", ")", "!=", "0", ")", ":", "\n", "          ", "invalid_area", "=", "front_layer_mask", "[", "idx_neuron_concat", ",", ":", ",", ":", ",", ":", ",", ":", "]", "==", "1", "\n", "front_layer_mask", "[", "idx_neuron_concat", ",", ":", ",", ":", ",", ":", ",", ":", "]", "[", "invalid_area", "]", "=", "0", "\n", "\n", "# TODO", "\n", "# # Attention: Fill holes in neuron in_c, because after the above, in a neuron, in_c will be sparse", "\n", "# # but this neuron will be retained whenever there is ONE in_c is retained", "\n", "# for l in range(n_layers):", "\n", "#   weight_mask, bias_mask = keep_masks[2 * l], keep_masks[2 * l + 1]", "\n", "#   neuron_no = weight_mask.size(0)", "\n", "#   weight_sum = weight_mask.view(neuron_no, -1).sum(1)", "\n", "#   valid_neuron = weight_sum > 0", "\n", "#   invalid_neuron = weight_sum == 0", "\n", "#   weight_mask[valid_neuron] = 1", "\n", "#   weight_mask[invalid_neuron] = 0", "\n", "#", "\n", "#   if bias_mask is not None:", "\n", "#     bias_mask[valid_neuron] = 1", "\n", "#     bias_mask[invalid_neuron] = 0", "\n", "\n", "", "", "", "", "return", "keep_masks", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.prune.remove_redundant": [[573, 667], ["copy.deepcopy", "range", "range", "print", "len", "range", "range", "current_layer_mask.view.unsqueeze().unsqueeze", "next_layer_mask.view.unsqueeze().unsqueeze", "current_layer_mask.view.size", "next_layer_mask.view.size", "next_layer_mask.view.view", "current_layer_mask.view.unsqueeze().unsqueeze", "front_layer_mask.unsqueeze().unsqueeze", "front_layer_mask.size", "current_layer_mask.view.size", "current_layer_mask.view.view", "len", "len", "print", "current_layer_mask.view.size", "next_layer_mask.view.view().sum", "len", "len", "print", "current_layer_mask.view.size", "current_layer_mask.view.size", "current_layer_mask.view.unsqueeze", "next_layer_mask.view.size", "next_layer_mask.view.unsqueeze", "current_layer_mask.view.size", "current_layer_mask.view.unsqueeze", "front_layer_mask.size", "front_layer_mask.unsqueeze", "current_layer_mask.view.size", "next_layer_mask.view.size", "next_layer_mask[].sum", "next_layer_mask.view.view", "front_layer_mask.size", "current_layer_mask.view.size", "current_layer_mask[].sum", "current_layer_mask[].sum", "current_layer_mask[].sum", "next_layer_mask[].sum", "next_layer_mask.view.size", "front_layer_mask[].sum", "current_layer_mask[].sum", "front_layer_mask[].sum"], "function", ["None"], ["", "def", "remove_redundant", "(", "keep_masks", ",", "prune_mode", "=", "'param'", ")", ":", "\n", "  ", "if", "keep_masks", "is", "None", ":", "\n", "    ", "return", "\n", "\n", "", "keep_masks", "=", "copy", ".", "deepcopy", "(", "keep_masks", ")", "\n", "\n", "if", "enable_verbose", ":", "\n", "    ", "print", "(", "'='", "*", "20", ",", "'remove redundant retains'", ",", "'='", "*", "20", ")", "\n", "\n", "", "n_layers", "=", "len", "(", "keep_masks", ")", "//", "2", "\n", "\n", "# Forward", "\n", "for", "l", "in", "range", "(", "n_layers", "-", "1", ")", ":", "\n", "    ", "weight_idx", ",", "bias_idx", "=", "2", "*", "l", ",", "2", "*", "l", "+", "1", "\n", "next_weight_idx", ",", "next_bias_idx", "=", "2", "*", "(", "l", "+", "1", ")", ",", "2", "*", "(", "l", "+", "1", ")", "+", "1", "\n", "current_layer_mask", "=", "keep_masks", "[", "weight_idx", "]", "\n", "current_layer_bias_mask", "=", "keep_masks", "[", "bias_idx", "]", "\n", "next_layer_mask", "=", "keep_masks", "[", "next_weight_idx", "]", "\n", "next_layer_bias_mask", "=", "keep_masks", "[", "next_bias_idx", "]", "\n", "current_layer_mask", "=", "current_layer_mask", ".", "unsqueeze", "(", "2", ")", ".", "unsqueeze", "(", "3", ")", "if", "(", "len", "(", "current_layer_mask", ".", "size", "(", ")", ")", "==", "2", ")", "else", "current_layer_mask", "\n", "next_layer_mask", "=", "next_layer_mask", ".", "unsqueeze", "(", "2", ")", ".", "unsqueeze", "(", "3", ")", "if", "(", "len", "(", "next_layer_mask", ".", "size", "(", ")", ")", "==", "2", ")", "else", "next_layer_mask", "\n", "\n", "# for the case of flatten the output of convolutional layer, and connect", "\n", "# with a fully-connected layer, channels unmatched", "\n", "current_layer_out_c", "=", "current_layer_mask", ".", "size", "(", ")", "[", "0", "]", "\n", "following_in_c", "=", "next_layer_mask", ".", "size", "(", ")", "[", "1", "]", "\n", "if", "current_layer_out_c", "!=", "following_in_c", ":", "\n", "      ", "if", "enable_verbose", ":", "\n", "        ", "print", "(", "'Warning (this is fine), current layer: {}, following: {}'", ".", "format", "(", "current_layer_mask", ".", "size", "(", ")", ",", "next_layer_mask", ".", "size", "(", ")", ")", ")", "\n", "\n", "", "next_layer_mask", "=", "next_layer_mask", ".", "view", "(", "-", "1", ",", "current_layer_out_c", ",", "following_in_c", "//", "current_layer_out_c", ",", "1", ")", "\n", "\n", "", "for", "idx_neuron", "in", "range", "(", "current_layer_mask", ".", "size", "(", ")", "[", "0", "]", ")", ":", "\n", "      ", "if", "(", "current_layer_bias_mask", "is", "not", "None", ")", "and", "(", "(", "current_layer_mask", "[", "idx_neuron", ",", ":", ",", ":", ",", ":", "]", ".", "sum", "(", ")", "+", "current_layer_bias_mask", "[", "idx_neuron", "]", "==", "0", ")", "\n", "and", "(", "next_layer_mask", "[", ":", ",", "idx_neuron", ",", ":", ",", ":", "]", ".", "sum", "(", ")", "!=", "0", ")", ")", ":", "\n", "        ", "exist_invalid", "=", "True", "\n", "", "elif", "(", "current_layer_bias_mask", "is", "None", ")", "and", "(", "(", "current_layer_mask", "[", "idx_neuron", ",", ":", ",", ":", ",", ":", "]", ".", "sum", "(", ")", "==", "0", ")", "\n", "and", "(", "next_layer_mask", "[", ":", ",", "idx_neuron", ",", ":", ",", ":", "]", ".", "sum", "(", ")", "!=", "0", ")", ")", ":", "\n", "        ", "exist_invalid", "=", "True", "\n", "", "else", ":", "\n", "        ", "exist_invalid", "=", "False", "\n", "\n", "", "if", "exist_invalid", ":", "\n", "        ", "invalid_area", "=", "next_layer_mask", "[", ":", ",", "idx_neuron", ",", ":", ",", ":", "]", "==", "1", "\n", "next_layer_mask", "[", ":", ",", "idx_neuron", ",", ":", ",", ":", "]", "[", "invalid_area", "]", "=", "0", "\n", "\n", "# Bug fixed, when enable_bias=True, mp and channel_prune results are different because when removing invalid retains in channel_prune,", "\n", "# bias should be removed when all of the channels of a neuron are removed, which is different from param_prune", "\n", "", "", "if", "next_layer_bias_mask", "is", "not", "None", ":", "\n", "      ", "invalid_area", "=", "next_layer_mask", ".", "view", "(", "next_layer_mask", ".", "size", "(", "0", ")", ",", "-", "1", ")", ".", "sum", "(", "1", ")", "==", "0", "\n", "next_layer_bias_mask", "[", "invalid_area", "]", "=", "0", "\n", "\n", "# Backward", "\n", "", "", "for", "l", "in", "range", "(", "n_layers", "-", "1", ",", "0", ",", "-", "1", ")", ":", "\n", "    ", "weight_idx", ",", "bias_idx", "=", "2", "*", "l", ",", "2", "*", "l", "+", "1", "\n", "front_weight_idx", ",", "front_bias_idx", "=", "2", "*", "(", "l", "-", "1", ")", ",", "2", "*", "(", "l", "-", "1", ")", "+", "1", "\n", "current_layer_mask", "=", "keep_masks", "[", "weight_idx", "]", "\n", "front_layer_mask", "=", "keep_masks", "[", "front_weight_idx", "]", "\n", "front_layer_bias_mask", "=", "keep_masks", "[", "front_bias_idx", "]", "\n", "current_layer_mask", "=", "current_layer_mask", ".", "unsqueeze", "(", "2", ")", ".", "unsqueeze", "(", "3", ")", "if", "(", "len", "(", "current_layer_mask", ".", "size", "(", ")", ")", "==", "2", ")", "else", "current_layer_mask", "\n", "front_layer_mask", "=", "front_layer_mask", ".", "unsqueeze", "(", "2", ")", ".", "unsqueeze", "(", "3", ")", "if", "(", "len", "(", "front_layer_mask", ".", "size", "(", ")", ")", "==", "2", ")", "else", "front_layer_mask", "\n", "\n", "# for the case of flatten the output of convolutional layer, and connect", "\n", "# with a fully-connected layer, channels unmatched", "\n", "front_layer_out_c", "=", "front_layer_mask", ".", "size", "(", ")", "[", "0", "]", "\n", "current_layer_in_c", "=", "current_layer_mask", ".", "size", "(", ")", "[", "1", "]", "\n", "if", "current_layer_in_c", "!=", "front_layer_out_c", ":", "\n", "      ", "if", "enable_verbose", ":", "\n", "        ", "print", "(", "'Warnining (this is fine), front layer: {}, current layer: {}'", ".", "format", "(", "front_layer_mask", ".", "size", "(", ")", ",", "current_layer_mask", ".", "size", "(", ")", ")", ")", "\n", "\n", "", "current_layer_mask", "=", "current_layer_mask", ".", "view", "(", "-", "1", ",", "front_layer_out_c", ",", "current_layer_in_c", "//", "front_layer_out_c", ",", "1", ")", "\n", "\n", "", "for", "idx_neuron", "in", "range", "(", "current_layer_mask", ".", "size", "(", ")", "[", "1", "]", ")", ":", "\n", "      ", "if", "(", "front_layer_bias_mask", "is", "not", "None", ")", "and", "(", "(", "current_layer_mask", "[", ":", ",", "idx_neuron", ",", ":", ",", ":", "]", ".", "sum", "(", ")", "==", "0", ")", "\n", "and", "(", "front_layer_mask", "[", "idx_neuron", ",", ":", ",", ":", ",", ":", "]", ".", "sum", "(", ")", "+", "front_layer_bias_mask", "[", "idx_neuron", "]", "!=", "0", ")", ")", ":", "\n", "        ", "exist_invalid", "=", "True", "\n", "", "elif", "(", "front_layer_bias_mask", "is", "None", ")", "and", "(", "(", "current_layer_mask", "[", ":", ",", "idx_neuron", ",", ":", ",", ":", "]", ".", "sum", "(", ")", "==", "0", ")", "\n", "and", "(", "front_layer_mask", "[", "idx_neuron", ",", ":", ",", ":", ",", ":", "]", ".", "sum", "(", ")", "!=", "0", ")", ")", ":", "\n", "        ", "exist_invalid", "=", "True", "\n", "", "else", ":", "\n", "        ", "exist_invalid", "=", "False", "\n", "\n", "", "if", "exist_invalid", ":", "\n", "        ", "invalid_area", "=", "front_layer_mask", "[", "idx_neuron", ",", ":", ",", ":", ",", ":", "]", "==", "1", "\n", "front_layer_mask", "[", "idx_neuron", ",", ":", ",", ":", ",", ":", "]", "[", "invalid_area", "]", "=", "0", "\n", "\n", "if", "(", "front_layer_bias_mask", "is", "not", "None", ")", "and", "(", "front_layer_bias_mask", "[", "idx_neuron", "]", "==", "1", ")", ":", "\n", "          ", "front_layer_bias_mask", "[", "idx_neuron", "]", "=", "0", "\n", "\n", "", "", "", "", "return", "keep_masks", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.prune.dump_grad_mask": [[669, 684], ["numpy.zeros", "numpy.zeros", "enumerate", "scipy.savemat", "mask[].cpu().numpy", "len", "len", "layer_param.cpu().numpy", "layer_param.abs().cpu().numpy", "mask[].cpu", "layer_param.cpu", "layer_param.abs().cpu", "layer_param.abs"], "function", ["None"], ["", "def", "dump_grad_mask", "(", "grads", ",", "mask", ",", "args", ")", ":", "\n", "# Zhiwei dump this all_scores for message passing in MatLab", "\n", "  ", "params", "=", "np", ".", "zeros", "(", "(", "len", "(", "grads", ")", ",", ")", ",", "dtype", "=", "np", ".", "object", ")", "\n", "masks", "=", "np", ".", "zeros", "(", "(", "len", "(", "grads", ")", ",", ")", ",", "dtype", "=", "np", ".", "object", ")", "\n", "\n", "for", "idx", ",", "layer_param", "in", "enumerate", "(", "grads", ")", ":", "\n", "    ", "if", "args", ".", "enable_raw", ":", "\n", "      ", "params", "[", "idx", "]", "=", "layer_param", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "      ", "params", "[", "idx", "]", "=", "(", "layer_param", ".", "abs", "(", ")", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "masks", "[", "idx", "]", "=", "mask", "[", "idx", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "scio", ".", "savemat", "(", "'../data/params_{}_{}.mat'", ".", "format", "(", "args", ".", "network", ",", "args", ".", "optimizer", ")", ",", "\n", "{", "'params'", ":", "params", ",", "'masks'", ":", "masks", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.prune.param_prune": [[686, 708], ["grads[].new_zeros", "torch.cat", "torch.cat", "torch.cat", "torch.topk", "torch.topk", "torch.topk", "torch.sum", "torch.sum", "torch.sum", "print", "torch.cat.sum", "torch.cat.size", "int", "torch.cat", "torch.cat", "torch.cat", "print", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "float", "float"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.unet.losses.flatten", "home.repos.pwc.inspect_result.zwxu064_RANP.unet.losses.flatten", "home.repos.pwc.inspect_result.zwxu064_RANP.unet.losses.flatten", "home.repos.pwc.inspect_result.zwxu064_RANP.unet.losses.flatten", "home.repos.pwc.inspect_result.zwxu064_RANP.unet.losses.flatten", "home.repos.pwc.inspect_result.zwxu064_RANP.unet.losses.flatten"], ["", "def", "param_prune", "(", "grads", ",", "param_sparsity", ",", "enable_norm", "=", "False", ")", ":", "\n", "  ", "if", "enable_verbose", ":", "\n", "    ", "print", "(", "'='", "*", "20", ",", "'param prune (=SNIP)'", ",", "'='", "*", "20", ")", "\n", "\n", "# Calculate threshold", "\n", "", "zero_fill", "=", "grads", "[", "0", "]", ".", "new_zeros", "(", "1", ",", "dtype", "=", "torch", ".", "uint8", ")", "\n", "grad_vector", "=", "torch", ".", "cat", "(", "[", "torch", ".", "flatten", "(", "grad", ")", "if", "(", "grad", "is", "not", "None", ")", "else", "zero_fill", "for", "grad", "in", "grads", "]", ")", "\n", "norm_factor", "=", "grad_vector", ".", "sum", "(", ")", "if", "enable_norm", "else", "1", "\n", "grad_vector", "=", "grad_vector", "/", "norm_factor", "if", "enable_norm", "else", "grad_vector", "\n", "n_params", "=", "grad_vector", ".", "size", "(", ")", "[", "0", "]", "\n", "threshold", ",", "_", "=", "torch", ".", "topk", "(", "grad_vector", ",", "int", "(", "n_params", "*", "(", "1", "-", "param_sparsity", ")", ")", ",", "sorted", "=", "True", ")", "\n", "threshold_value", "=", "threshold", "[", "-", "1", "]", "\n", "\n", "# Prune on weights", "\n", "param_mask", "=", "[", "(", "grad", "/", "norm_factor", ">=", "threshold_value", ")", ".", "float", "(", ")", "if", "(", "grad", "is", "not", "None", ")", "else", "None", "for", "grad", "in", "grads", "]", "\n", "n_param_retained", "=", "torch", ".", "sum", "(", "torch", ".", "cat", "(", "[", "torch", ".", "flatten", "(", "mask", "==", "1", ")", "if", "(", "mask", "is", "not", "None", ")", "else", "zero_fill", "for", "mask", "in", "param_mask", "]", ")", ")", "\n", "\n", "if", "enable_verbose", ":", "\n", "    ", "print", "(", "'Weight prune, param sparsity:{}, keep {} out of {} weights ({:.4f}).'", ".", "format", "(", "param_sparsity", ",", "n_param_retained", ",", "n_params", ",", "float", "(", "n_param_retained", ")", "/", "float", "(", "n_params", ")", ")", ")", "\n", "\n", "", "return", "param_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.prune.param_prune_3dunet": [[710, 741], ["grads[].new_zeros", "torch.cat", "torch.cat", "torch.cat", "torch.topk", "torch.topk", "torch.topk", "torch.sum", "torch.sum", "torch.sum", "print", "torch.cat.sum", "torch.cat.size", "int", "param_mask[].new_ones", "param_mask[].new_ones", "torch.cat", "torch.cat", "torch.cat", "print", "len", "param_mask[].size", "len", "param_mask[].size", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten().float", "torch.flatten().float", "torch.flatten().float", "float", "float", "torch.flatten", "torch.flatten", "torch.flatten"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.unet.losses.flatten", "home.repos.pwc.inspect_result.zwxu064_RANP.unet.losses.flatten", "home.repos.pwc.inspect_result.zwxu064_RANP.unet.losses.flatten", "home.repos.pwc.inspect_result.zwxu064_RANP.unet.losses.flatten", "home.repos.pwc.inspect_result.zwxu064_RANP.unet.losses.flatten", "home.repos.pwc.inspect_result.zwxu064_RANP.unet.losses.flatten"], ["", "def", "param_prune_3dunet", "(", "grads", ",", "param_sparsity", ",", "enable_norm", "=", "False", ")", ":", "\n", "  ", "if", "enable_verbose", ":", "\n", "    ", "print", "(", "'='", "*", "20", ",", "'param prune (=SNIP)'", ",", "'='", "*", "20", ")", "\n", "\n", "# Calculate threshold", "\n", "", "zero_fill", "=", "grads", "[", "0", "]", ".", "new_zeros", "(", "1", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "grad_vector", "=", "torch", ".", "cat", "(", "[", "torch", ".", "flatten", "(", "grad", ")", "if", "(", "grad", "is", "not", "None", ")", "else", "zero_fill", "for", "grad", "in", "grads", "]", ")", "\n", "norm_factor", "=", "grad_vector", ".", "sum", "(", ")", "if", "enable_norm", "else", "1", "\n", "grad_vector", "=", "grad_vector", "/", "norm_factor", "if", "enable_norm", "else", "grad_vector", "\n", "n_params", "=", "grad_vector", ".", "size", "(", ")", "[", "0", "]", "\n", "threshold", ",", "_", "=", "torch", ".", "topk", "(", "grad_vector", ",", "int", "(", "n_params", "*", "(", "1", "-", "param_sparsity", ")", ")", ",", "sorted", "=", "True", ")", "\n", "threshold_value", "=", "threshold", "[", "-", "1", "]", "\n", "\n", "# Prune on weights", "\n", "param_mask", "=", "[", "(", "grad", "/", "norm_factor", ">=", "threshold_value", ")", ".", "float", "(", ")", "if", "(", "grad", "is", "not", "None", ")", "else", "None", "for", "grad", "in", "grads", "]", "\n", "\n", "# Last conv all 1 for num of classes", "\n", "# if len(param_mask[-1]) == 1:", "\n", "if", "param_mask", "[", "-", "1", "]", "is", "not", "None", "and", "len", "(", "param_mask", "[", "-", "1", "]", ")", ">", "0", ":", "\n", "    ", "param_mask", "[", "-", "1", "]", "=", "param_mask", "[", "-", "1", "]", ".", "new_ones", "(", "param_mask", "[", "-", "1", "]", ".", "size", "(", ")", ")", "\n", "\n", "", "if", "param_mask", "[", "-", "2", "]", "is", "not", "None", "and", "len", "(", "param_mask", "[", "-", "2", "]", ")", ">", "0", ":", "\n", "    ", "param_mask", "[", "-", "2", "]", "=", "param_mask", "[", "-", "2", "]", ".", "new_ones", "(", "param_mask", "[", "-", "2", "]", ".", "size", "(", ")", ")", "\n", "\n", "", "n_param_retained", "=", "torch", ".", "sum", "(", "torch", ".", "cat", "(", "[", "torch", ".", "flatten", "(", "mask", "==", "1", ")", ".", "float", "(", ")", "if", "(", "mask", "is", "not", "None", ")", "else", "zero_fill", "for", "mask", "in", "param_mask", "]", ")", ")", "\n", "\n", "if", "enable_verbose", ":", "\n", "    ", "print", "(", "'Weight prune, param sparsity:{}, keep {} out of {} weights ({:.4f}).'", ".", "format", "(", "param_sparsity", ",", "n_param_retained", ",", "n_params", ",", "float", "(", "n_param_retained", ")", "/", "float", "(", "n_params", ")", ")", ")", "\n", "\n", "", "return", "param_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.prune.neuron_prune_3dunet": [[744, 993], ["range", "grads[].new_zeros", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "print", "len", "grads[].size", "grad_weight.view().sum.abs", "neuron_grad_list.append", "copy.deepcopy", "isinstance", "range", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "print", "enumerate", "scipy.savemat", "len", "len", "grad_weight.view().sum", "neuron_grad.mean().cpu().numpy", "any", "any", "grads[].new_zeros", "torch.cat.size", "torch.topk", "torch.topk", "torch.topk", "param_mask.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat.size", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "numpy.random.seed", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat.size", "torch.topk", "torch.topk", "torch.topk", "range", "param_mask[].size", "grad_weight.view", "grad_weight.view.size", "resource_list_type.find", "torch.stack", "torch.stack", "torch.stack", "torch.stack.max", "torch.softmax", "torch.softmax", "torch.stack", "torch.stack", "torch.stack", "torch.stack.max", "len", "grads[].size", "int", "print", "grads[].new_zeros", "param_mask.append", "param_mask.append", "torch.zeros", "torch.zeros", "torch.zeros", "numpy.arange", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "grads[].new_zeros", "grads[].size", "param_mask.append", "int", "grads[].new_zeros", "param_mask.append", "print", "mask.size", "neuron_mask.append", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "grad_weight.view", "grad_weight.view().max", "neuron_grad.mean().cpu", "print", "copy.deepcopy", "print", "copy.deepcopy", "numpy.ceil", "grads[].size", "numpy.random.choice", "torch.ones", "torch.ones", "torch.ones", "numpy.arange", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "grads[].size", "grads[].new_zeros", "param_mask.append", "param_mask.append", "grads[].size", "grads[].new_zeros", "param_mask.append", "param_mask.append", "torch.flatten", "torch.flatten", "torch.flatten", "enumerate", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "float", "float", "float", "float", "mask.view().sum", "neuron_grad.size", "grad_weight.view.sum", "neuron_grad.mean", "enumerate", "neuron_grad.mean().cpu().numpy", "resource_list_type.find", "resource_list.max", "neuron_grad.mean().cpu().numpy", "resource_list_type.find", "resource_list.max", "enumerate", "neuron_grad.mean", "enumerate", "int", "int", "numpy.random.choice", "grads[].size", "grads[].size", "param_mask[].view().sum", "param_mask[].size", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "grad_weight.view.sum", "grad_weight.view", "neuron_grad.mean", "neuron_grad_list_factor.cpu().numpy", "enumerate", "enumerate", "F.softmax.cpu().numpy", "numpy.ceil", "int", "float", "mask.view", "neuron_grad.mean().cpu", "neuron_grad.mean().cpu", "param_mask[].view", "float", "mask.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "neuron_grad_list_factor.cpu", "F.softmax.cpu", "neuron_grad.mean", "neuron_grad.mean", "mask.size"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.unet.losses.flatten", "home.repos.pwc.inspect_result.zwxu064_RANP.unet.losses.flatten", "home.repos.pwc.inspect_result.zwxu064_RANP.unet.losses.flatten", "home.repos.pwc.inspect_result.zwxu064_RANP.unet.losses.flatten", "home.repos.pwc.inspect_result.zwxu064_RANP.unet.losses.flatten", "home.repos.pwc.inspect_result.zwxu064_RANP.unet.losses.flatten", "home.repos.pwc.inspect_result.zwxu064_RANP.unet.losses.flatten", "home.repos.pwc.inspect_result.zwxu064_RANP.unet.losses.flatten", "home.repos.pwc.inspect_result.zwxu064_RANP.unet.losses.flatten"], ["", "def", "neuron_prune_3dunet", "(", "grads", ",", "neuron_sparsity", ",", "acc_mode", ",", "\n", "layer_sparsity_list", "=", "None", ",", "\n", "random_method", "=", "None", ",", "\n", "random_sparsity", "=", "None", ",", "\n", "random_sparsity_seed", "=", "0", ",", "\n", "enable_layer_neuron_display", "=", "False", ",", "\n", "resource_list_type", "=", "None", ",", "\n", "resource_list", "=", "None", ",", "\n", "resource_list_lambda", "=", "0", ")", ":", "\n", "  ", "if", "enable_verbose", ":", "\n", "    ", "print", "(", "'='", "*", "20", ",", "'3DUNet neuron prune'", ",", "'='", "*", "20", ")", "\n", "\n", "", "neuron_grad_list", "=", "[", "]", "\n", "n_layers", "=", "len", "(", "grads", ")", "//", "2", "\n", "enable_dump_distribution", "=", "False", "\n", "\n", "if", "resource_list", "is", "not", "None", ":", "\n", "    ", "assert", "len", "(", "resource_list", ")", "==", "n_layers", ",", "'n_layer from grad masks {} != n_layer from memory list {}'", ".", "format", "(", "n_layers", ",", "len", "(", "resource_list", ")", ")", "\n", "\n", "# Get topk threshold", "\n", "", "for", "idx", "in", "range", "(", "n_layers", ")", ":", "\n", "    ", "weight_idx", ",", "bias_idx", "=", "2", "*", "idx", ",", "2", "*", "idx", "+", "1", "\n", "n_neuron_a_layer", "=", "grads", "[", "weight_idx", "]", ".", "size", "(", "0", ")", "\n", "\n", "grad_weight", "=", "grads", "[", "weight_idx", "]", "\n", "grad_bias", "=", "grads", "[", "bias_idx", "]", "if", "(", "grads", "[", "bias_idx", "]", "is", "not", "None", ")", "else", "None", "\n", "\n", "# Only the last 3dconv has bias", "\n", "if", "acc_mode", "==", "'sum'", ":", "\n", "      ", "neuron_grad_accu", "=", "grad_weight", ".", "view", "(", "n_neuron_a_layer", ",", "-", "1", ")", ".", "sum", "(", "dim", "=", "1", ")", "\n", "\n", "if", "grad_bias", "is", "not", "None", ":", "\n", "        ", "neuron_grad_accu", "=", "neuron_grad_accu", "+", "grad_bias", "\n", "", "", "elif", "acc_mode", "==", "'mean'", ":", "\n", "      ", "grads_a_layer", "=", "grad_weight", ".", "view", "(", "n_neuron_a_layer", ",", "-", "1", ")", "\n", "n_elements", "=", "grads_a_layer", ".", "size", "(", "1", ")", "\n", "\n", "if", "grad_bias", "is", "not", "None", ":", "\n", "        ", "neuron_grad_accu", "=", "(", "grads_a_layer", ".", "sum", "(", "1", ")", "+", "grad_bias", ")", "/", "(", "n_elements", "+", "1", ")", "\n", "", "else", ":", "\n", "        ", "neuron_grad_accu", "=", "grads_a_layer", ".", "sum", "(", "1", ")", "/", "n_elements", "\n", "", "", "elif", "acc_mode", "==", "'max'", ":", "\n", "      ", "neuron_grad_accu", ",", "_", "=", "grad_weight", ".", "view", "(", "n_neuron_a_layer", ",", "-", "1", ")", ".", "max", "(", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "      ", "assert", "False", "\n", "\n", "", "neuron_grad_accu", "=", "neuron_grad_accu", ".", "abs", "(", ")", "# 24-Jan-2020 Neuron importance is abs()", "\n", "neuron_grad_list", ".", "append", "(", "neuron_grad_accu", ")", "\n", "\n", "", "neuron_grad_list_org", ",", "neuron_grad_list_grad", ",", "neuron_grad_list_grad_flops", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "if", "enable_dump_distribution", ":", "\n", "    ", "neuron_grad_list_org", "=", "copy", ".", "deepcopy", "(", "neuron_grad_list", ")", "\n", "neuron_grad_list_org_mean", "=", "[", "neuron_grad", ".", "mean", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "for", "neuron_grad", "in", "neuron_grad_list_org", "]", "\n", "\n", "# TODO : Factor based on Neuron Importance or Memory List", "\n", "", "if", "random_method", "is", "None", ":", "\n", "    ", "if", "True", ":", "\n", "      ", "if", "resource_list_type", ".", "find", "(", "'grad'", ")", ">", "-", "1", ":", "\n", "        ", "neuron_grad_list_mean", "=", "torch", ".", "stack", "(", "[", "neuron_grad", ".", "mean", "(", ")", "for", "neuron_grad", "in", "neuron_grad_list", "]", ",", "dim", "=", "0", ")", "\n", "\n", "neuron_grad_list_mean_max", "=", "neuron_grad_list_mean", ".", "max", "(", ")", "\n", "neuron_grad_list_factor", "=", "neuron_grad_list_mean_max", "/", "neuron_grad_list_mean", "\n", "neuron_grad_list", "=", "[", "neuron_grad", "*", "neuron_grad_list_factor", "[", "idx", "]", "for", "idx", ",", "neuron_grad", "in", "enumerate", "(", "neuron_grad_list", ")", "]", "\n", "\n", "if", "enable_verbose", ":", "\n", "          ", "print", "(", "'=> Layer factors based on grads: \\n{}'", ".", "format", "(", "neuron_grad_list_factor", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ")", "\n", "\n", "", "if", "enable_dump_distribution", ":", "\n", "          ", "neuron_grad_list_grad", "=", "copy", ".", "deepcopy", "(", "neuron_grad_list", ")", "\n", "neuron_grad_list_grad_mean", "=", "[", "neuron_grad", ".", "mean", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "for", "neuron_grad", "in", "neuron_grad_list_grad", "]", "\n", "\n", "", "", "if", "any", "(", "[", "resource_list_type", ".", "find", "(", "s", ")", ">", "-", "1", "for", "s", "in", "[", "'flops'", ",", "'param'", ",", "'memory'", "]", "]", ")", ":", "\n", "        ", "resource_list_factor", "=", "F", ".", "softmax", "(", "-", "resource_list", "/", "resource_list", ".", "max", "(", ")", ",", "dim", "=", "0", ")", "\n", "\n", "if", "True", ":", "\n", "          ", "neuron_grad_list", "=", "[", "neuron_grad", "*", "(", "1", "+", "resource_list_lambda", "*", "resource_list_factor", "[", "idx", "]", ")", "for", "idx", ",", "neuron_grad", "in", "enumerate", "(", "neuron_grad_list", ")", "]", "\n", "", "else", ":", "\n", "          ", "neuron_grad_list", "=", "[", "neuron_grad", "*", "resource_list_factor", "[", "idx", "]", "for", "idx", ",", "neuron_grad", "in", "enumerate", "(", "neuron_grad_list", ")", "]", "\n", "\n", "", "if", "enable_verbose", ":", "\n", "          ", "print", "(", "'=> Layer weights([0, 1]) based on resource: \\n{}'", ".", "format", "(", "resource_list_factor", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ")", "\n", "\n", "", "if", "enable_dump_distribution", ":", "\n", "          ", "neuron_grad_list_grad_flops", "=", "copy", ".", "deepcopy", "(", "neuron_grad_list", ")", "\n", "neuron_grad_list_grad_flops_mean", "=", "[", "neuron_grad", ".", "mean", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "for", "neuron_grad", "in", "neuron_grad_list_grad_flops", "]", "\n", "", "", "", "else", ":", "\n", "      ", "if", "any", "(", "[", "resource_list_type", ".", "find", "(", "s", ")", ">", "-", "1", "for", "s", "in", "[", "'flops'", ",", "'param'", ",", "'memory'", "]", "]", ")", ":", "\n", "        ", "resource_list_factor", "=", "F", ".", "softmax", "(", "-", "resource_list", "/", "resource_list", ".", "max", "(", ")", ",", "dim", "=", "0", ")", "\n", "neuron_grad_list_weighted", "=", "[", "neuron_grad", "*", "resource_list_factor", "[", "idx", "]", "for", "idx", ",", "neuron_grad", "in", "enumerate", "(", "neuron_grad_list", ")", "]", "\n", "\n", "neuron_grad_list_weighted_mean", "=", "torch", ".", "stack", "(", "[", "neuron_grad", ".", "mean", "(", ")", "for", "neuron_grad", "in", "neuron_grad_list_weighted", "]", ",", "dim", "=", "0", ")", "\n", "neuron_grad_list_weighted_mean_max", "=", "neuron_grad_list_weighted_mean", ".", "max", "(", ")", "\n", "neuron_grad_list_factor", "=", "neuron_grad_list_weighted_mean_max", "/", "neuron_grad_list_weighted_mean", "\n", "neuron_grad_list", "=", "[", "neuron_grad", "*", "neuron_grad_list_factor", "[", "idx", "]", "for", "idx", ",", "neuron_grad", "in", "enumerate", "(", "neuron_grad_list", ")", "]", "\n", "\n", "# Get weight mask", "\n", "", "", "", "param_mask", "=", "[", "]", "\n", "\n", "if", "(", "layer_sparsity_list", "is", "not", "None", ")", "and", "(", "layer_sparsity_list", ">", "0", ")", ":", "# Layer-wise neuron pruning", "\n", "    ", "enable_layer_sparsity_list", "=", "isinstance", "(", "layer_sparsity_list", ",", "list", ")", "\n", "assert", "(", "len", "(", "layer_sparsity_list", ")", "==", "n_layers", ")", "if", "enable_layer_sparsity_list", "else", "True", "\n", "n_neurons", "=", "0", "\n", "\n", "for", "idx", "in", "range", "(", "n_layers", ")", ":", "\n", "      ", "weight_idx", ",", "bias_idx", "=", "2", "*", "idx", ",", "2", "*", "idx", "+", "1", "\n", "weight_mask_a_layer", "=", "grads", "[", "weight_idx", "]", ".", "new_zeros", "(", "grads", "[", "weight_idx", "]", ".", "size", "(", ")", ")", "\n", "\n", "neuron_grad_vector", "=", "neuron_grad_list", "[", "idx", "]", "\n", "n_neurons_a_layer", "=", "neuron_grad_vector", ".", "size", "(", "0", ")", "\n", "\n", "if", "idx", "==", "n_layers", "-", "1", ":", "# last layer", "\n", "        ", "layer_sparsity", "=", "0", "\n", "", "else", ":", "\n", "        ", "layer_sparsity", "=", "layer_sparsity_list", "[", "idx", "]", "if", "enable_layer_sparsity_list", "else", "layer_sparsity_list", "\n", "\n", "", "threshold", ",", "_", "=", "torch", ".", "topk", "(", "neuron_grad_vector", ",", "int", "(", "np", ".", "ceil", "(", "n_neurons_a_layer", "*", "(", "1", "-", "layer_sparsity", ")", ")", ")", ",", "sorted", "=", "True", ")", "\n", "threshold_value", "=", "threshold", "[", "-", "1", "]", "\n", "\n", "if", "enable_verbose", ":", "\n", "        ", "print", "(", "'===> Layer-wise neuron pruning, layer: {}, neurons: {}, retained: {}'", ".", "format", "(", "idx", ",", "n_neurons_a_layer", ",", "int", "(", "np", ".", "ceil", "(", "n_neurons_a_layer", "*", "(", "1", "-", "layer_sparsity", ")", ")", ")", ")", ")", "\n", "\n", "", "n_neurons", "+=", "n_neurons_a_layer", "\n", "retained_area", "=", "neuron_grad_vector", ">=", "threshold_value", "# neuron indices", "\n", "weight_mask_a_layer", "[", "retained_area", "]", "=", "1", "# retained_area refers to the first dimension", "\n", "param_mask", ".", "append", "(", "weight_mask_a_layer", ")", "\n", "\n", "if", "grads", "[", "bias_idx", "]", "is", "not", "None", ":", "\n", "        ", "bias_mask_a_layer", "=", "grads", "[", "bias_idx", "]", ".", "new_zeros", "(", "grads", "[", "bias_idx", "]", ".", "size", "(", ")", ")", "\n", "bias_mask_a_layer", "[", "retained_area", "]", "=", "1", "\n", "param_mask", ".", "append", "(", "bias_mask_a_layer", ")", "\n", "", "else", ":", "\n", "        ", "param_mask", ".", "append", "(", "None", ")", "\n", "", "", "", "elif", "random_method", "is", "not", "None", ":", "# Random pruning", "\n", "    ", "neuron_grad_vector", "=", "torch", ".", "cat", "(", "neuron_grad_list", ",", "dim", "=", "0", ")", "\n", "n_neurons", "=", "neuron_grad_vector", ".", "size", "(", "0", ")", "\n", "\n", "torch", ".", "manual_seed", "(", "random_sparsity_seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "random_sparsity_seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "random_sparsity_seed", ")", "\n", "\n", "if", "random_method", "==", "0", ":", "\n", "      ", "random_retain_mask", "=", "torch", ".", "zeros", "(", "n_neurons", ",", "dtype", "=", "torch", ".", "uint8", ")", "\n", "indices", "=", "np", ".", "arange", "(", "n_neurons", ")", "\n", "# np.random.shuffle(indices)", "\n", "choice", "=", "torch", ".", "from_numpy", "(", "np", ".", "random", ".", "choice", "(", "indices", ",", "int", "(", "n_neurons", "*", "(", "1", "-", "random_sparsity", ")", ")", ",", "replace", "=", "False", ")", ")", "\n", "random_retain_mask", "[", "choice", "]", "=", "1", "\n", "", "elif", "random_method", "==", "1", ":", "\n", "      ", "random_retain_mask", "=", "torch", ".", "ones", "(", "n_neurons", ",", "dtype", "=", "torch", ".", "uint8", ")", "\n", "indices", "=", "np", ".", "arange", "(", "n_neurons", ")", "\n", "# np.random.shuffle(indices)", "\n", "choice", "=", "torch", ".", "from_numpy", "(", "np", ".", "random", ".", "choice", "(", "indices", ",", "int", "(", "n_neurons", "*", "random_sparsity", ")", ",", "replace", "=", "False", ")", ")", "\n", "random_retain_mask", "[", "choice", "]", "=", "0", "\n", "", "else", ":", "\n", "      ", "assert", "False", ",", "'Invalid random method: {}'", ".", "format", "(", "random_method", ")", "\n", "", "extract_start", ",", "extract_end", "=", "0", ",", "0", "\n", "\n", "for", "idx", "in", "range", "(", "n_layers", ")", ":", "\n", "      ", "weight_idx", ",", "bias_idx", "=", "2", "*", "idx", ",", "2", "*", "idx", "+", "1", "\n", "weight_mask_a_layer", "=", "grads", "[", "weight_idx", "]", ".", "new_zeros", "(", "grads", "[", "weight_idx", "]", ".", "size", "(", ")", ")", "\n", "n_neuron_a_layer", "=", "grads", "[", "weight_idx", "]", ".", "size", "(", "0", ")", "\n", "extract_end", "+=", "n_neuron_a_layer", "\n", "\n", "if", "idx", "==", "n_layers", "-", "1", ":", "# last layer", "\n", "        ", "retained_area", "=", "neuron_grad_list", "[", "idx", "]", ">=", "0", "\n", "", "else", ":", "\n", "        ", "retained_area", "=", "random_retain_mask", "[", "extract_start", ":", "extract_end", "]", "\n", "\n", "", "weight_mask_a_layer", "[", "retained_area", "]", "=", "1", "\n", "param_mask", ".", "append", "(", "weight_mask_a_layer", ")", "\n", "\n", "if", "grads", "[", "bias_idx", "]", "is", "not", "None", ":", "\n", "        ", "bias_mask_a_layer", "=", "grads", "[", "bias_idx", "]", ".", "new_zeros", "(", "grads", "[", "bias_idx", "]", ".", "size", "(", ")", ")", "\n", "bias_mask_a_layer", "[", "retained_area", "]", "=", "1", "\n", "param_mask", ".", "append", "(", "bias_mask_a_layer", ")", "\n", "", "else", ":", "\n", "        ", "param_mask", ".", "append", "(", "None", ")", "\n", "\n", "", "extract_start", "=", "extract_end", "\n", "", "", "else", ":", "# Network neuron pruning", "\n", "    ", "neuron_grad_vector", "=", "torch", ".", "cat", "(", "neuron_grad_list", ",", "dim", "=", "0", ")", "\n", "\n", "n_neurons", "=", "neuron_grad_vector", ".", "size", "(", "0", ")", "\n", "threshold", ",", "_", "=", "torch", ".", "topk", "(", "neuron_grad_vector", ",", "int", "(", "n_neurons", "*", "(", "1", "-", "neuron_sparsity", ")", ")", ",", "sorted", "=", "True", ")", "\n", "threshold_value", "=", "threshold", "[", "-", "1", "]", "\n", "\n", "for", "idx", "in", "range", "(", "n_layers", ")", ":", "\n", "      ", "if", "idx", "==", "n_layers", "-", "1", ":", "# last layer", "\n", "        ", "threshold_value_new", "=", "-", "np", ".", "inf", "\n", "", "else", ":", "\n", "        ", "threshold_value_new", "=", "threshold_value", "\n", "\n", "", "weight_idx", ",", "bias_idx", "=", "2", "*", "idx", ",", "2", "*", "idx", "+", "1", "\n", "weight_mask_a_layer", "=", "grads", "[", "weight_idx", "]", ".", "new_zeros", "(", "grads", "[", "weight_idx", "]", ".", "size", "(", ")", ")", "\n", "retained_area", "=", "neuron_grad_list", "[", "idx", "]", ">=", "threshold_value_new", "# neuron indices", "\n", "weight_mask_a_layer", "[", "retained_area", "]", "=", "1", "# retained_area refers to the first dimension", "\n", "param_mask", ".", "append", "(", "weight_mask_a_layer", ")", "\n", "\n", "if", "grads", "[", "bias_idx", "]", "is", "not", "None", ":", "\n", "        ", "bias_mask_a_layer", "=", "grads", "[", "bias_idx", "]", ".", "new_zeros", "(", "grads", "[", "bias_idx", "]", ".", "size", "(", ")", ")", "\n", "bias_mask_a_layer", "[", "retained_area", "]", "=", "1", "\n", "param_mask", ".", "append", "(", "bias_mask_a_layer", ")", "\n", "", "else", ":", "\n", "        ", "param_mask", ".", "append", "(", "None", ")", "\n", "\n", "", "", "", "if", "enable_layer_neuron_display", ":", "\n", "    ", "for", "idx", "in", "range", "(", "n_layers", ")", ":", "\n", "      ", "n_neurons_a_layer", "=", "param_mask", "[", "2", "*", "idx", "]", ".", "size", "(", "0", ")", "\n", "n_neuron_retained_a_layer", "=", "(", "param_mask", "[", "2", "*", "idx", "]", ".", "view", "(", "n_neurons_a_layer", ",", "-", "1", ")", ".", "sum", "(", "1", ")", ">", "0", ")", ".", "sum", "(", ")", "\n", "\n", "if", "enable_verbose", ":", "\n", "        ", "print", "(", "'Conv layer id: {}, neuron retained: {}/{} ({:.2f}%), size: {}'", ".", "format", "(", "idx", ",", "n_neuron_retained_a_layer", ",", "\n", "n_neurons_a_layer", ",", "\n", "float", "(", "n_neuron_retained_a_layer", ")", "*", "100", "/", "float", "(", "n_neurons_a_layer", ")", ",", "\n", "param_mask", "[", "2", "*", "idx", "]", ".", "size", "(", ")", ")", ")", "\n", "\n", "", "", "", "zero_fill", "=", "grads", "[", "0", "]", ".", "new_zeros", "(", "1", ",", "dtype", "=", "torch", ".", "uint8", ")", "\n", "n_neuron_retained", "=", "torch", ".", "sum", "(", "torch", ".", "cat", "(", "[", "torch", ".", "flatten", "(", "mask", ".", "view", "(", "mask", ".", "size", "(", ")", "[", "0", "]", ",", "-", "1", ")", "[", ":", ",", "0", "]", "==", "1", ")", "if", "(", "idx", "%", "2", "==", "0", ")", "else", "zero_fill", "for", "idx", ",", "mask", "in", "enumerate", "(", "param_mask", ")", "]", ")", ")", "\n", "n_param_retained", "=", "torch", ".", "sum", "(", "torch", ".", "cat", "(", "[", "torch", ".", "flatten", "(", "mask", "==", "1", ")", "if", "(", "mask", "is", "not", "None", ")", "else", "zero_fill", "for", "mask", "in", "param_mask", "]", ")", ")", "\n", "n_params", "=", "torch", ".", "sum", "(", "torch", ".", "cat", "(", "[", "torch", ".", "flatten", "(", "mask", ">=", "0", ")", "if", "(", "mask", "is", "not", "None", ")", "else", "zero_fill", "for", "mask", "in", "param_mask", "]", ")", ")", "\n", "\n", "if", "enable_verbose", ":", "\n", "    ", "print", "(", "'Neuron prune, neuron sparsity:{}, keep {} out of {} neurons ({:.4f}), keep {} out of {} weights ({:.4f}).'", ".", "format", "(", "neuron_sparsity", ",", "n_neuron_retained", ",", "n_neurons", ",", "float", "(", "n_neuron_retained", ")", "/", "float", "(", "n_neurons", ")", ",", "\n", "n_param_retained", ",", "n_params", ",", "float", "(", "n_param_retained", ")", "/", "float", "(", "n_params", ")", ")", ")", "\n", "\n", "", "if", "enable_dump_distribution", ":", "\n", "    ", "neuron_mask", "=", "[", "]", "\n", "for", "idx", ",", "mask", "in", "enumerate", "(", "param_mask", ")", ":", "\n", "      ", "if", "idx", "%", "2", "==", "0", ":", "\n", "        ", "n_neurons", "=", "mask", ".", "size", "(", "0", ")", "\n", "value", "=", "mask", ".", "view", "(", "n_neurons", ",", "-", "1", ")", ".", "sum", "(", "1", ")", ">", "0", "\n", "neuron_mask", ".", "append", "(", "value", ")", "\n", "\n", "", "", "scio", ".", "savemat", "(", "'dump/neuron_list.mat'", ",", "{", "'org'", ":", "torch", ".", "cat", "(", "neuron_grad_list_org", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "'org_mean'", ":", "neuron_grad_list_org_mean", ",", "\n", "'grad'", ":", "torch", ".", "cat", "(", "neuron_grad_list_grad", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "'grad_mean'", ":", "neuron_grad_list_grad_mean", ",", "\n", "'grad_flops'", ":", "torch", ".", "cat", "(", "neuron_grad_list_grad_flops", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "'grad_flops_mean'", ":", "neuron_grad_list_grad_flops_mean", ",", "\n", "'mask'", ":", "torch", ".", "cat", "(", "neuron_mask", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "'number'", ":", "[", "neuron_grad", ".", "size", "(", "0", ")", "for", "neuron_grad", "in", "neuron_grad_list_org", "]", "}", ")", "\n", "\n", "", "return", "param_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.prune.neuron_prune": [[996, 1061], ["range", "torch.cat", "torch.cat", "torch.cat", "torch.topk", "torch.topk", "torch.topk", "range", "param_mask[].new_zeros", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "print", "len", "neuron_grad_list.append", "torch.cat.size", "int", "grads[].new_zeros", "param_mask.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "print", "grads[].size", "grad_weight.view().sum", "grads[].size", "grads[].new_zeros", "param_mask.append", "param_mask.append", "grad_weight.view", "grad_weight.view.size", "grads[].size", "grad_weight.view", "grad_weight.view().max", "torch.flatten", "torch.flatten", "torch.flatten", "enumerate", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "float", "float", "float", "float", "grad_weight.view.sum", "grad_weight.view.sum", "grad_weight.view", "mask.view", "mask.size"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.unet.losses.flatten", "home.repos.pwc.inspect_result.zwxu064_RANP.unet.losses.flatten", "home.repos.pwc.inspect_result.zwxu064_RANP.unet.losses.flatten", "home.repos.pwc.inspect_result.zwxu064_RANP.unet.losses.flatten", "home.repos.pwc.inspect_result.zwxu064_RANP.unet.losses.flatten", "home.repos.pwc.inspect_result.zwxu064_RANP.unet.losses.flatten", "home.repos.pwc.inspect_result.zwxu064_RANP.unet.losses.flatten", "home.repos.pwc.inspect_result.zwxu064_RANP.unet.losses.flatten", "home.repos.pwc.inspect_result.zwxu064_RANP.unet.losses.flatten"], ["", "def", "neuron_prune", "(", "grads", ",", "neuron_sparsity", ",", "acc_mode", ")", ":", "\n", "  ", "if", "enable_verbose", ":", "\n", "    ", "print", "(", "'='", "*", "20", ",", "'neuron prune'", ",", "'='", "*", "20", ")", "\n", "\n", "", "neuron_grad_list", "=", "[", "]", "\n", "n_layers", "=", "len", "(", "grads", ")", "//", "2", "\n", "\n", "# Get topk threshold", "\n", "for", "idx", "in", "range", "(", "n_layers", ")", ":", "\n", "    ", "weight_idx", ",", "bias_idx", "=", "2", "*", "idx", ",", "2", "*", "idx", "+", "1", "\n", "n_neuron_a_layer", "=", "grads", "[", "weight_idx", "]", ".", "size", "(", ")", "[", "0", "]", "\n", "\n", "grad_weight", "=", "grads", "[", "weight_idx", "]", "\n", "grad_bias", "=", "grads", "[", "bias_idx", "]", "if", "(", "grads", "[", "bias_idx", "]", "is", "not", "None", ")", "else", "None", "\n", "\n", "if", "acc_mode", "==", "'sum'", ":", "\n", "      ", "neuron_grad_accu", "=", "grad_weight", ".", "view", "(", "n_neuron_a_layer", ",", "-", "1", ")", ".", "sum", "(", "dim", "=", "1", ")", "\n", "neuron_grad_accu", "=", "neuron_grad_accu", "+", "grad_bias", "if", "(", "grad_bias", "is", "not", "None", ")", "else", "neuron_grad_accu", "\n", "", "elif", "acc_mode", "==", "'mean'", ":", "\n", "      ", "grads_a_layer", "=", "grad_weight", ".", "view", "(", "n_neuron_a_layer", ",", "-", "1", ")", "\n", "n_elements", "=", "grads_a_layer", ".", "size", "(", "1", ")", "\n", "\n", "if", "grad_bias", "is", "not", "None", ":", "\n", "        ", "neuron_grad_accu", "=", "(", "grads_a_layer", ".", "sum", "(", "1", ")", "+", "grad_bias", ")", "/", "(", "n_elements", "+", "1", ")", "\n", "", "else", ":", "\n", "        ", "neuron_grad_accu", "=", "grads_a_layer", ".", "sum", "(", "1", ")", "/", "n_elements", "\n", "", "", "elif", "acc_mode", "==", "'max'", ":", "\n", "      ", "neuron_grad_accu", ",", "_", "=", "grad_weight", ".", "view", "(", "n_neuron_a_layer", ",", "-", "1", ")", ".", "max", "(", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "      ", "assert", "False", "\n", "\n", "", "neuron_grad_list", ".", "append", "(", "neuron_grad_accu", ")", "\n", "\n", "", "neuron_grad_vector", "=", "torch", ".", "cat", "(", "neuron_grad_list", ",", "dim", "=", "0", ")", "\n", "n_neurons", "=", "neuron_grad_vector", ".", "size", "(", ")", "[", "0", "]", "\n", "threshold", ",", "_", "=", "torch", ".", "topk", "(", "neuron_grad_vector", ",", "int", "(", "n_neurons", "*", "(", "1", "-", "neuron_sparsity", ")", ")", ",", "sorted", "=", "True", ")", "\n", "threshold_value", "=", "threshold", "[", "-", "1", "]", "\n", "\n", "# Get weight mask", "\n", "param_mask", "=", "[", "]", "\n", "for", "idx", "in", "range", "(", "n_layers", ")", ":", "\n", "    ", "weight_idx", ",", "bias_idx", "=", "2", "*", "idx", ",", "2", "*", "idx", "+", "1", "\n", "weight_mask_a_layer", "=", "grads", "[", "weight_idx", "]", ".", "new_zeros", "(", "grads", "[", "weight_idx", "]", ".", "size", "(", ")", ")", "\n", "retained_area", "=", "neuron_grad_list", "[", "idx", "]", ">=", "threshold_value", "# neuron indices", "\n", "weight_mask_a_layer", "[", "retained_area", "]", "=", "1", "# retained_area refers to the first dimension", "\n", "param_mask", ".", "append", "(", "weight_mask_a_layer", ")", "\n", "\n", "if", "grads", "[", "bias_idx", "]", "is", "not", "None", ":", "\n", "      ", "bias_mask_a_layer", "=", "grads", "[", "bias_idx", "]", ".", "new_zeros", "(", "grads", "[", "bias_idx", "]", ".", "size", "(", ")", ")", "\n", "bias_mask_a_layer", "[", "retained_area", "]", "=", "1", "\n", "param_mask", ".", "append", "(", "bias_mask_a_layer", ")", "\n", "", "else", ":", "\n", "      ", "param_mask", ".", "append", "(", "None", ")", "\n", "\n", "", "", "zero_fill", "=", "param_mask", "[", "0", "]", ".", "new_zeros", "(", "1", ",", "dtype", "=", "torch", ".", "uint8", ")", "\n", "n_neuron_retained", "=", "torch", ".", "sum", "(", "torch", ".", "cat", "(", "[", "torch", ".", "flatten", "(", "mask", ".", "view", "(", "mask", ".", "size", "(", ")", "[", "0", "]", ",", "-", "1", ")", "[", ":", ",", "0", "]", "==", "1", ")", "if", "(", "idx", "%", "2", "==", "0", ")", "else", "zero_fill", "for", "idx", ",", "mask", "in", "enumerate", "(", "param_mask", ")", "]", ")", ")", "\n", "n_param_retained", "=", "torch", ".", "sum", "(", "torch", ".", "cat", "(", "[", "torch", ".", "flatten", "(", "mask", "==", "1", ")", "if", "(", "mask", "is", "not", "None", ")", "else", "zero_fill", "for", "mask", "in", "param_mask", "]", ")", ")", "\n", "n_params", "=", "torch", ".", "sum", "(", "torch", ".", "cat", "(", "[", "torch", ".", "flatten", "(", "mask", ">=", "0", ")", "if", "(", "mask", "is", "not", "None", ")", "else", "zero_fill", "for", "mask", "in", "param_mask", "]", ")", ")", "\n", "\n", "if", "enable_verbose", ":", "\n", "    ", "print", "(", "'Neuron prune, neuron sparsity:{}, keep {} out of {} neurons ({:.4f}), keep {} out of {} weights ({:.4f}).'", ".", "format", "(", "neuron_sparsity", ",", "n_neuron_retained", ",", "n_neurons", ",", "float", "(", "n_neuron_retained", ")", "/", "float", "(", "n_neurons", ")", ",", "\n", "n_param_retained", ",", "n_params", ",", "float", "(", "n_param_retained", ")", "/", "float", "(", "n_params", ")", ")", ")", "\n", "\n", "", "return", "param_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.prune.channel_prune": [[1063, 1102], ["copy.deepcopy", "copy.deepcopy", "prune_utils.convert_dim_conv2fully", "prune_utils.cal_channel_prune_grad", "range", "param_mask[].new_zeros", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "prune_utils.resume_dim_conv2fully", "print", "len", "grads[].new_zeros", "prune_utils.resume_dim_conv2fully.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "print", "grads[].size", "grads[].new_zeros", "prune_utils.resume_dim_conv2fully.append", "prune_utils.resume_dim_conv2fully.append", "grads[].size", "grads[].new_zeros.size", "grads[].new_zeros.view().sum", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "float", "float", "grads[].new_zeros.view"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.prune_utils.convert_dim_conv2fully", "home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.prune_utils.cal_channel_prune_grad", "home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.prune_utils.resume_dim_conv2fully", "home.repos.pwc.inspect_result.zwxu064_RANP.unet.losses.flatten", "home.repos.pwc.inspect_result.zwxu064_RANP.unet.losses.flatten", "home.repos.pwc.inspect_result.zwxu064_RANP.unet.losses.flatten", "home.repos.pwc.inspect_result.zwxu064_RANP.unet.losses.flatten", "home.repos.pwc.inspect_result.zwxu064_RANP.unet.losses.flatten", "home.repos.pwc.inspect_result.zwxu064_RANP.unet.losses.flatten"], ["", "def", "channel_prune", "(", "grads", ",", "channel_sparsity", ",", "acc_mode", "=", "'max'", ",", "norm", "=", "'max'", ")", ":", "\n", "  ", "if", "enable_verbose", ":", "\n", "    ", "print", "(", "'='", "*", "20", ",", "'channel prune'", ",", "'='", "*", "20", ")", "\n", "\n", "", "grads_org", "=", "copy", ".", "deepcopy", "(", "grads", ")", "\n", "grads", "=", "copy", ".", "deepcopy", "(", "grads", ")", "\n", "n_layers", "=", "len", "(", "grads", ")", "//", "2", "\n", "grads", "=", "convert_dim_conv2fully", "(", "grads", ")", "\n", "channel_accum_grad_list", ",", "threshold_value", "=", "cal_channel_prune_grad", "(", "grads", ",", "channel_sparsity", ",", "mode", "=", "acc_mode", ",", "norm", "=", "norm", ")", "\n", "\n", "# Prune on channel", "\n", "param_mask", "=", "[", "]", "\n", "for", "idx", "in", "range", "(", "n_layers", ")", ":", "\n", "    ", "weight_idx", ",", "bias_idx", "=", "2", "*", "idx", ",", "2", "*", "idx", "+", "1", "\n", "weight_mask_a_layer", "=", "grads", "[", "weight_idx", "]", ".", "new_zeros", "(", "grads", "[", "weight_idx", "]", ".", "size", "(", ")", ")", "\n", "retained_area", "=", "channel_accum_grad_list", "[", "idx", "]", ">=", "threshold_value", "\n", "weight_mask_a_layer", "[", "retained_area", "]", "=", "1", "# retained_area refers to the first two dimensions", "\n", "param_mask", ".", "append", "(", "weight_mask_a_layer", ")", "\n", "\n", "if", "grads", "[", "bias_idx", "]", "is", "not", "None", ":", "\n", "      ", "bias_mask_a_layer", "=", "grads", "[", "bias_idx", "]", ".", "new_zeros", "(", "grads", "[", "bias_idx", "]", ".", "size", "(", ")", ")", "\n", "n_neurons", "=", "bias_mask_a_layer", ".", "size", "(", ")", "[", "0", "]", "\n", "retained_area", "=", "weight_mask_a_layer", ".", "view", "(", "n_neurons", ",", "-", "1", ")", ".", "sum", "(", "dim", "=", "1", ")", ">", "0", "\n", "bias_mask_a_layer", "[", "retained_area", "]", "=", "1", "\n", "param_mask", ".", "append", "(", "bias_mask_a_layer", ")", "\n", "", "else", ":", "\n", "      ", "param_mask", ".", "append", "(", "None", ")", "\n", "\n", "", "", "zero_fill", "=", "param_mask", "[", "0", "]", ".", "new_zeros", "(", "1", ",", "dtype", "=", "torch", ".", "uint8", ")", "\n", "n_weight_retained", "=", "torch", ".", "sum", "(", "torch", ".", "cat", "(", "[", "torch", ".", "flatten", "(", "mask", "==", "1", ")", "if", "(", "mask", "is", "not", "None", ")", "else", "zero_fill", "for", "mask", "in", "param_mask", "]", ")", ")", "\n", "n_weights", "=", "torch", ".", "sum", "(", "torch", ".", "cat", "(", "[", "torch", ".", "flatten", "(", "mask", ">=", "0", ")", "if", "(", "mask", "is", "not", "None", ")", "else", "zero_fill", "for", "mask", "in", "param_mask", "]", ")", ")", "\n", "\n", "if", "enable_verbose", ":", "\n", "    ", "print", "(", "'Channel prune, channel sparsity:{}, keep {} out of {} weights ({:.4f})'", ".", "format", "(", "channel_sparsity", ",", "n_weight_retained", ",", "n_weights", ",", "float", "(", "n_weight_retained", ")", "/", "float", "(", "n_weights", ")", ")", ")", "\n", "\n", "", "param_mask", "=", "resume_dim_conv2fully", "(", "param_mask", ",", "grads_org", ")", "\n", "\n", "return", "param_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.prune.hidden_layer_prune": [[1104, 1129], ["torch.cat", "torch.cat", "torch.cat", "torch.topk", "torch.topk", "torch.topk", "print", "torch.cat.size", "int", "hidden_grad.new_zeros", "hidden_masks.append", "hidden_grad_list.append", "data.flatten", "hidden_grad.size", "hidden_grad.new_zeros.unsqueeze", "grad.sum"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.unet.losses.flatten"], ["", "def", "hidden_layer_prune", "(", "grads", ",", "sparsity", ",", "enable_sum", "=", "False", ")", ":", "\n", "  ", "if", "enable_verbose", ":", "\n", "    ", "print", "(", "'='", "*", "20", ",", "'hidden layer prune'", ",", "'='", "*", "20", ")", "\n", "\n", "", "hidden_grad_list", "=", "[", "]", "\n", "hidden_masks", "=", "[", "]", "\n", "\n", "# Get topk threshold", "\n", "if", "enable_sum", ":", "\n", "    ", "for", "grad", "in", "grads", ":", "\n", "      ", "hidden_grad_list", ".", "append", "(", "grad", ".", "sum", "(", "0", ")", ")", "# one layer one 3D mask no matter the out_channels", "\n", "", "", "else", ":", "\n", "    ", "hidden_grad_list", "=", "grads", "\n", "\n", "", "hidden_grad_vector", "=", "torch", ".", "cat", "(", "[", "data", ".", "flatten", "(", ")", "for", "data", "in", "hidden_grad_list", "]", ",", "dim", "=", "0", ")", "\n", "n_elements", "=", "hidden_grad_vector", ".", "size", "(", ")", "[", "0", "]", "\n", "threshold", ",", "_", "=", "torch", ".", "topk", "(", "hidden_grad_vector", ",", "int", "(", "n_elements", "*", "(", "1", "-", "sparsity", ")", ")", ",", "sorted", "=", "True", ")", "\n", "threshold_value", "=", "threshold", "[", "-", "1", "]", "\n", "\n", "for", "hidden_grad", "in", "hidden_grad_list", ":", "\n", "    ", "hidden_mask", "=", "hidden_grad", ".", "new_zeros", "(", "hidden_grad", ".", "size", "(", ")", ")", "\n", "hidden_mask", "[", "hidden_grad", ">=", "threshold_value", "]", "=", "1", "\n", "hidden_masks", ".", "append", "(", "hidden_mask", ".", "unsqueeze", "(", "0", ")", ")", "# for batch", "\n", "\n", "", "return", "hidden_masks", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.prune.pruning": [[1131, 1371], ["os.path.exists", "numpy.load", "print", "copy.deepcopy", "prune.add_mask_for_grad", "len", "time.time", "enumerate", "prune.hidden_layer_prune", "enumerate", "torch.ones().to", "torch.ones().to", "torch.ones().to", "add_mask_for_grad.forward", "prune.remove_hooks", "criterion.backward", "prune.get_mask_grad", "time.time", "numpy.save", "enumerate", "prune.do_statistics", "enumerate", "zip", "hidden_grad.size", "numpy.double", "numpy.double", "numpy.double", "print", "np.load.item", "np.load.item", "print", "add_mask_for_grad.zero_grad", "optimizer.zero_grad", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "mask.detach_", "add_mask_for_grad.", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "isinstance", "input.size", "add_mask_for_grad.", "prediction.reshape.reshape", "gt.reshape.reshape", "criterion", "prune.update_grads_average", "prune.update_grads_average", "prune.param_prune_3dunet", "numpy.double", "numpy.double", "torch.ones", "torch.ones", "torch.ones", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.smooth_l1_loss", "prune.param_prune_3dunet", "prune.remove_redundant_3dunet", "prune.remove_redundant_3dunet", "prune.neuron_prune_3dunet", "prune.remove_redundant_3dunet", "print", "print", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "input.cuda", "gt.reshape.cuda", "video_classification.remove_redundant_3dmobilenet", "prune.neuron_prune_3dunet", "video_classification.remove_redundant_3dmobilenet", "mask.sum", "torch.smooth_l1_loss", "torch.smooth_l1_loss", "video_classification.remove_redundant_I3D", "prune.neuron_prune_3dunet", "video_classification.remove_redundant_I3D", "video_classification.remove_redundant_PSM", "prune.neuron_prune_3dunet", "video_classification.remove_redundant_PSM", "prune.neuron_prune", "prune.remove_redundant"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.data.load", "home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.prune.add_mask_for_grad", "home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.prune.hidden_layer_prune", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.StereoLoss.forward", "home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.prune.remove_hooks", "home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.prune.get_mask_grad", "home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.prune.do_statistics", "home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.prune.update_grads_average", "home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.prune.update_grads_average", "home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.prune.param_prune_3dunet", "home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.prune.param_prune_3dunet", "home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.prune.remove_redundant_3dunet", "home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.prune.remove_redundant_3dunet", "home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.prune.neuron_prune_3dunet", "home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.prune.remove_redundant_3dunet", "home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.video_classification.remove_redundant_3dmobilenet", "home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.prune.neuron_prune_3dunet", "home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.video_classification.remove_redundant_3dmobilenet", "home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.video_classification.remove_redundant_I3D", "home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.prune.neuron_prune_3dunet", "home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.video_classification.remove_redundant_I3D", "home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.video_classification.remove_redundant_PSM", "home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.prune.neuron_prune_3dunet", "home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.video_classification.remove_redundant_PSM", "home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.prune.neuron_prune", "home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.prune.remove_redundant"], ["", "def", "pruning", "(", "file_name", ",", "\n", "model", ",", "\n", "train_dataloader", ",", "\n", "criterion", ",", "\n", "args", ",", "\n", "enable_3dunet", "=", "False", ",", "\n", "enable_hidden_sum", "=", "False", ",", "\n", "width", "=", "2", ",", "\n", "resource_list", "=", "None", ",", "\n", "network_name", "=", "'3dunet'", ")", ":", "\n", "  ", "enable_kernel_mask", "=", "(", "args", ".", "enable_neuron_prune", "or", "args", ".", "enable_param_prune", ")", "\n", "enable_hidden_mask", "=", "args", ".", "enable_hidden_layer_prune", "\n", "\n", "# ==== Get gradients", "\n", "if", "(", "file_name", "is", "not", "None", ")", "and", "os", ".", "path", ".", "exists", "(", "file_name", ")", ":", "\n", "    ", "obj", "=", "np", ".", "load", "(", "file_name", ",", "allow_pickle", "=", "True", ")", "\n", "kernel_grads_abs_average", "=", "obj", ".", "item", "(", ")", "[", "'kernel_mask_grad'", "]", "if", "enable_kernel_mask", "else", "[", "]", "\n", "hidden_grads_abs_average", "=", "obj", ".", "item", "(", ")", "[", "'hidden_mask_grad'", "]", "if", "enable_hidden_mask", "else", "[", "]", "\n", "", "else", ":", "\n", "    ", "print", "(", "args", ")", "\n", "model", "=", "copy", ".", "deepcopy", "(", "model", ")", "\n", "model", "=", "add_mask_for_grad", "(", "model", ",", "args", ",", "\n", "enable_kernel_mask", "=", "enable_kernel_mask", ",", "\n", "enable_hidden_mask", "=", "enable_hidden_mask", ")", "\n", "\n", "if", "enable_hidden_mask", ":", "# preset hidden mask size by a fixed input size", "\n", "      ", "randint_input", "=", "torch", ".", "ones", "(", "args", ".", "batch", ",", "1", ",", "args", ".", "spatial_size", ",", "\n", "args", ".", "spatial_size", ",", "args", ".", "spatial_size", ",", "\n", "dtype", "=", "torch", ".", "float", ")", ".", "to", "(", "args", ".", "device", ")", "\n", "model", ".", "forward", "(", "randint_input", ")", "\n", "remove_hooks", "(", "model", ")", "\n", "\n", "", "kernel_grads_abs_average", ",", "hidden_grads_abs_average", "=", "[", "]", ",", "[", "]", "\n", "batch_total", "=", "len", "(", "train_dataloader", ")", "\n", "time_start", "=", "time", ".", "time", "(", ")", "\n", "\n", "for", "idx", ",", "data", "in", "enumerate", "(", "train_dataloader", ")", ":", "\n", "      ", "if", "(", "(", "batch_total", ">", "1000", ")", "and", "idx", "%", "100", "==", "0", ")", "or", "(", "batch_total", "<=", "1000", ")", ":", "\n", "        ", "print", "(", "'Pruning, batch: {} / {}'", ".", "format", "(", "idx", "+", "1", ",", "batch_total", ")", ")", "\n", "\n", "", "if", "True", ":", "\n", "        ", "model", ".", "zero_grad", "(", ")", "# original snip pytorch code due to learnable mask that is not in optimizer", "\n", "", "else", ":", "\n", "        ", "optimizer", ".", "zero_grad", "(", ")", "# this is regular one that all learnable parameters are set into optimizer", "\n", "\n", "# For stereo and otherwise", "\n", "", "if", "args", ".", "dataset", "in", "{", "'sceneflow'", "}", ":", "\n", "        ", "imgL", ",", "imgR", ",", "disp_L", "=", "data", "\n", "\n", "imgL", "=", "Variable", "(", "torch", ".", "FloatTensor", "(", "imgL", ")", ")", "\n", "imgR", "=", "Variable", "(", "torch", ".", "FloatTensor", "(", "imgR", ")", ")", "\n", "disp_L", "=", "Variable", "(", "torch", ".", "FloatTensor", "(", "disp_L", ")", ")", "\n", "\n", "if", "args", ".", "enable_cuda", ":", "\n", "          ", "imgL", ",", "imgR", ",", "disp_L", "=", "imgL", ".", "cuda", "(", ")", ",", "imgR", ".", "cuda", "(", ")", ",", "disp_L", ".", "cuda", "(", ")", "\n", "\n", "", "mask", "=", "disp_L", "<", "args", ".", "maxdisp", "\n", "mask", ".", "detach_", "(", ")", "\n", "\n", "output1", ",", "output2", ",", "output3", "=", "model", "(", "imgL", ",", "imgR", ")", "\n", "output1", "=", "torch", ".", "squeeze", "(", "output1", ",", "1", ")", "\n", "output2", "=", "torch", ".", "squeeze", "(", "output2", ",", "1", ")", "\n", "output3", "=", "torch", ".", "squeeze", "(", "output3", ",", "1", ")", "\n", "loss", "=", "0.5", "*", "F", ".", "smooth_l1_loss", "(", "output1", "[", "mask", "]", ",", "disp_L", "[", "mask", "]", ",", "reduction", "=", "'mean'", ")", "+", "0.7", "*", "F", ".", "smooth_l1_loss", "(", "output2", "[", "mask", "]", ",", "disp_L", "[", "mask", "]", ",", "reduction", "=", "'mean'", ")", "+", "F", ".", "smooth_l1_loss", "(", "output3", "[", "mask", "]", ",", "disp_L", "[", "mask", "]", ",", "reduction", "=", "'mean'", ")", "\n", "", "else", ":", "\n", "        ", "if", "isinstance", "(", "data", ",", "list", ")", ":", "\n", "          ", "input", ",", "gt", "=", "data", "[", "0", "]", ",", "data", "[", "1", "]", "\n", "", "else", ":", "\n", "          ", "input", ",", "gt", "=", "data", "[", "'x'", "]", ",", "data", "[", "'y'", "]", "\n", "\n", "", "actual_batch", "=", "input", ".", "size", "(", "0", ")", "\n", "\n", "if", "args", ".", "enable_cuda", ":", "\n", "          ", "input", ",", "gt", "=", "input", ".", "cuda", "(", ")", ",", "gt", ".", "cuda", "(", ")", "\n", "\n", "", "prediction", "=", "model", "(", "input", ")", "\n", "prediction", "=", "prediction", ".", "reshape", "(", "actual_batch", ",", "args", ".", "n_class", ",", "-", "1", ")", "\n", "gt", "=", "gt", ".", "reshape", "(", "actual_batch", ",", "-", "1", ")", "\n", "loss", "=", "criterion", "(", "prediction", ",", "gt", ")", "\n", "\n", "", "loss", ".", "backward", "(", ")", "\n", "\n", "kernel_grad_abs", ",", "hidden_grad_abs", "=", "get_mask_grad", "(", "model", ",", "\n", "enable_kernel_mask", "=", "enable_kernel_mask", ",", "\n", "enable_hidden_mask", "=", "enable_hidden_mask", ",", "\n", "enable_raw_grad", "=", "args", ".", "enable_raw_grad", ")", "\n", "\n", "if", "enable_kernel_mask", ":", "\n", "        ", "kernel_grads_abs_average", "=", "update_grads_average", "(", "kernel_grads_abs_average", ",", "kernel_grad_abs", ",", "idx", ")", "\n", "\n", "", "if", "enable_hidden_mask", ":", "\n", "        ", "hidden_grads_abs_average", "=", "update_grads_average", "(", "hidden_grads_abs_average", ",", "hidden_grad_abs", ",", "idx", ")", "\n", "\n", "# torch.cuda.empty_cache()  # too slow", "\n", "\n", "", "", "duration_pruning", "=", "time", ".", "time", "(", ")", "-", "time_start", "\n", "if", "(", "file_name", "is", "not", "None", ")", ":", "\n", "      ", "np", ".", "save", "(", "file_name", ",", "{", "'kernel_mask_grad'", ":", "kernel_grads_abs_average", ",", "\n", "'hidden_mask_grad'", ":", "hidden_grads_abs_average", ",", "\n", "'time'", ":", "duration_pruning", "}", ")", "\n", "\n", "# ==== Get kernel mask by pruning on kernels, including removing redundent", "\n", "", "", "if", "enable_kernel_mask", ":", "\n", "    ", "if", "args", ".", "enable_param_prune", ":", "\n", "      ", "if", "False", ":", "# previous one", "\n", "        ", "if", "enable_3dunet", "or", "(", "network_name", "==", "'3dunet'", ")", ":", "\n", "          ", "kernel_mask", "=", "param_prune_3dunet", "(", "kernel_grads_abs_average", ",", "args", ".", "param_sparsity", ",", "enable_norm", "=", "False", ")", "\n", "kernel_mask_clean", "=", "remove_redundant_3dunet", "(", "kernel_mask", ",", "width", "=", "width", ")", "\n", "", "else", ":", "\n", "          ", "assert", "False", "\n", "", "", "else", ":", "\n", "        ", "kernel_mask", "=", "param_prune_3dunet", "(", "kernel_grads_abs_average", ",", "args", ".", "param_sparsity", ",", "enable_norm", "=", "False", ")", "\n", "\n", "if", "network_name", "==", "'3dunet'", ":", "\n", "          ", "kernel_mask_clean", "=", "remove_redundant_3dunet", "(", "kernel_mask", ",", "width", "=", "width", ")", "\n", "", "elif", "network_name", "==", "'mobilenetv2'", ":", "\n", "          ", "kernel_mask_clean", "=", "remove_redundant_3dmobilenet", "(", "kernel_mask", ")", "\n", "", "elif", "network_name", "==", "'i3d'", ":", "\n", "          ", "kernel_mask_clean", "=", "remove_redundant_I3D", "(", "kernel_mask", ")", "\n", "", "elif", "network_name", "==", "'psm'", ":", "\n", "          ", "valid_neuron_list_clean", "=", "remove_redundant_PSM", "(", "kernel_mask", ",", "mode", "=", "args", ".", "PSM_mode", ")", "\n", "", "else", ":", "\n", "          ", "assert", "False", "\n", "", "", "", "elif", "args", ".", "enable_neuron_prune", ":", "\n", "      ", "if", "enable_3dunet", "or", "(", "network_name", "==", "'3dunet'", ")", ":", "\n", "        ", "kernel_mask", "=", "neuron_prune_3dunet", "(", "kernel_grads_abs_average", ",", "\n", "args", ".", "neuron_sparsity", ",", "\n", "args", ".", "acc_mode", ",", "\n", "layer_sparsity_list", "=", "args", ".", "layer_sparsity_list", ",", "\n", "random_method", "=", "args", ".", "random_method", ",", "\n", "random_sparsity", "=", "args", ".", "random_sparsity", ",", "\n", "random_sparsity_seed", "=", "args", ".", "random_sparsity_seed", ",", "\n", "enable_layer_neuron_display", "=", "args", ".", "enable_layer_neuron_display", ",", "\n", "resource_list_type", "=", "args", ".", "resource_list_type", ",", "\n", "resource_list", "=", "resource_list", ",", "\n", "resource_list_lambda", "=", "args", ".", "resource_list_lambda", ")", "\n", "kernel_mask_clean", "=", "remove_redundant_3dunet", "(", "kernel_mask", ",", "width", "=", "width", ")", "\n", "", "elif", "network_name", "==", "'mobilenetv2'", ":", "\n", "        ", "kernel_mask", "=", "neuron_prune_3dunet", "(", "kernel_grads_abs_average", ",", "\n", "args", ".", "neuron_sparsity", ",", "\n", "args", ".", "acc_mode", ",", "\n", "layer_sparsity_list", "=", "args", ".", "layer_sparsity_list", ",", "\n", "random_method", "=", "args", ".", "random_method", ",", "\n", "random_sparsity", "=", "args", ".", "random_sparsity", ",", "\n", "random_sparsity_seed", "=", "args", ".", "random_sparsity_seed", ",", "\n", "resource_list_type", "=", "args", ".", "resource_list_type", ",", "\n", "resource_list", "=", "resource_list", ",", "\n", "resource_list_lambda", "=", "args", ".", "resource_list_lambda", ")", "\n", "kernel_mask_clean", "=", "remove_redundant_3dmobilenet", "(", "kernel_mask", ")", "\n", "", "elif", "network_name", "==", "'i3d'", ":", "\n", "        ", "kernel_mask", "=", "neuron_prune_3dunet", "(", "kernel_grads_abs_average", ",", "\n", "args", ".", "neuron_sparsity", ",", "\n", "args", ".", "acc_mode", ",", "\n", "layer_sparsity_list", "=", "args", ".", "layer_sparsity_list", ",", "\n", "random_method", "=", "args", ".", "random_method", ",", "\n", "random_sparsity", "=", "args", ".", "random_sparsity", ",", "\n", "random_sparsity_seed", "=", "args", ".", "random_sparsity_seed", ",", "\n", "resource_list_type", "=", "args", ".", "resource_list_type", ",", "\n", "resource_list", "=", "resource_list", ",", "\n", "resource_list_lambda", "=", "args", ".", "resource_list_lambda", ",", "\n", "enable_layer_neuron_display", "=", "False", ")", "\n", "kernel_mask_clean", "=", "remove_redundant_I3D", "(", "kernel_mask", ")", "\n", "", "elif", "network_name", "==", "'psm'", ":", "\n", "        ", "kernel_mask", "=", "neuron_prune_3dunet", "(", "kernel_grads_abs_average", ",", "\n", "args", ".", "neuron_sparsity", ",", "\n", "args", ".", "acc_mode", ",", "\n", "layer_sparsity_list", "=", "args", ".", "layer_sparsity_list", ",", "\n", "random_method", "=", "args", ".", "random_method", ",", "\n", "random_sparsity", "=", "args", ".", "random_sparsity", ",", "\n", "random_sparsity_seed", "=", "args", ".", "random_sparsity_seed", ",", "\n", "resource_list_type", "=", "args", ".", "resource_list_type", ",", "\n", "resource_list", "=", "resource_list", ",", "\n", "resource_list_lambda", "=", "args", ".", "resource_list_lambda", ",", "\n", "enable_layer_neuron_display", "=", "False", ")", "\n", "valid_neuron_list_clean", "=", "remove_redundant_PSM", "(", "kernel_mask", ",", "mode", "=", "args", ".", "PSM_mode", ")", "\n", "", "else", ":", "\n", "        ", "kernel_mask", "=", "neuron_prune", "(", "kernel_grads_abs_average", ",", "\n", "args", ".", "neuron_sparsity", ",", "args", ".", "acc_mode", ")", "\n", "kernel_mask_clean", "=", "remove_redundant", "(", "kernel_mask", ")", "\n", "\n", "", "", "if", "network_name", "==", "'psm'", ":", "\n", "      ", "for", "idx", ",", "valid_neuron", "in", "enumerate", "(", "valid_neuron_list_clean", ")", ":", "# previously use kernel_mask, but no difference I think", "\n", "        ", "if", "valid_neuron", "[", "0", "]", "==", "0", ":", "\n", "          ", "print", "(", "'All removed at {}th layer of valid_neuron_list'", ".", "format", "(", "idx", "//", "2", ")", ")", "\n", "status", "=", "-", "1", "\n", "return", "[", "status", "]", "\n", "", "", "", "else", ":", "\n", "      ", "do_statistics", "(", "kernel_mask", ",", "kernel_mask_clean", ")", "\n", "\n", "for", "idx", ",", "mask", "in", "enumerate", "(", "kernel_mask_clean", ")", ":", "# previously use kernel_mask, but no difference I think", "\n", "        ", "if", "(", "mask", "is", "not", "None", ")", "and", "(", "mask", ".", "sum", "(", ")", "==", "0", ")", ":", "\n", "          ", "print", "(", "'All removed at {}th layer of kernel_mask_clean'", ".", "format", "(", "idx", "//", "2", ")", ")", "\n", "status", "=", "-", "1", "\n", "return", "[", "status", "]", "\n", "", "", "", "", "else", ":", "\n", "    ", "kernel_mask_clean", "=", "None", "\n", "\n", "# ==== Get hidden layer mask by pruning on hidden layers", "\n", "", "if", "enable_hidden_mask", ":", "\n", "    ", "hidden_masks", "=", "hidden_layer_prune", "(", "hidden_grads_abs_average", ",", "args", ".", "hidden_layer_sparsity", ",", "\n", "enable_sum", "=", "enable_hidden_sum", ")", "\n", "\n", "n_elements_raw_total", ",", "n_elements_raw_retain", "=", "0", ",", "0", "\n", "n_elements_expand_total", ",", "n_elements_expand_retain", "=", "0", ",", "0", "\n", "\n", "for", "idx", ",", "(", "hidden_mask", ",", "hidden_grad", ")", "in", "enumerate", "(", "zip", "(", "hidden_masks", ",", "hidden_grads_abs_average", ")", ")", ":", "\n", "# Expanded to out_channels", "\n", "      ", "out_channels", "=", "hidden_grad", ".", "size", "(", "0", ")", "\n", "n_elements_expand_total", "+=", "np", ".", "double", "(", "(", "hidden_grad", ">=", "0", ")", ".", "sum", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "if", "enable_hidden_sum", ":", "\n", "        ", "n_elements_expand_retain", "+=", "np", ".", "double", "(", "out_channels", "*", "(", "hidden_mask", ">", "0", ")", ".", "sum", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "else", ":", "\n", "        ", "n_elements_expand_retain", "+=", "np", ".", "double", "(", "(", "hidden_mask", ">", "0", ")", ".", "sum", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "# Raw this will be the same as preset sparsity", "\n", "", "n_elements_raw_total", "+=", "np", ".", "double", "(", "(", "hidden_mask", ">=", "0", ")", ".", "sum", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "n_elements_raw_retain", "+=", "np", ".", "double", "(", "(", "hidden_mask", ">", "0", ")", ".", "sum", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "", "if", "enable_verbose", ":", "\n", "      ", "print", "(", "'Hidden layer pruning, preset: {:.2f}%, enable hidden sum: {};\\n'", "\n", "'raw retain {}/{} ({:.2f}%);\\n'", "\n", "'expand retain {}({:.2f}MB)/{}({:.2f}MB) ({:.4f}%) for ONE batch'", ".", "format", "(", "(", "1", "-", "args", ".", "hidden_layer_sparsity", ")", "*", "100", ",", "enable_hidden_sum", ",", "\n", "n_elements_raw_retain", ",", "n_elements_raw_total", ",", "\n", "n_elements_raw_retain", "*", "100", "/", "n_elements_raw_total", ",", "\n", "n_elements_expand_retain", ",", "n_elements_expand_retain", "*", "4", "/", "1024", "**", "2", ",", "\n", "n_elements_expand_total", ",", "n_elements_expand_total", "*", "4", "/", "1024", "**", "2", ",", "\n", "n_elements_expand_retain", "*", "100", "/", "n_elements_expand_total", ")", ")", "\n", "", "", "else", ":", "\n", "    ", "hidden_masks", "=", "None", "\n", "\n", "", "status", "=", "0", "\n", "\n", "if", "network_name", "==", "'psm'", ":", "\n", "    ", "return", "status", ",", "valid_neuron_list_clean", ",", "hidden_masks", "\n", "", "else", ":", "\n", "    ", "return", "status", ",", "kernel_mask_clean", ",", "hidden_masks", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.dataloader.get_mnist_dataloaders": [[7, 19], ["torchvision.transforms.Compose", "torchvision.datasets.MNIST", "torchvision.datasets.MNIST", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torchvision.transforms.ToTensor"], "function", ["None"], ["def", "get_mnist_dataloaders", "(", "train_batch_size", ",", "val_batch_size", ",", "args", ",", "enable_train_shuffle", "=", "True", ")", ":", "\n", "  ", "data_transform", "=", "Compose", "(", "[", "transforms", ".", "ToTensor", "(", ")", "]", ")", "\n", "\n", "# Normalise? transforms.Normalize((0.1307,), (0.3081,))", "\n", "\n", "train_dataset", "=", "MNIST", "(", "\"{}/{}\"", ".", "format", "(", "args", ".", "relative_dir", ",", "\"../dataset\"", ")", ",", "True", ",", "data_transform", ",", "download", "=", "True", ")", "\n", "test_dataset", "=", "MNIST", "(", "\"{}/{}\"", ".", "format", "(", "args", ".", "relative_dir", ",", "\"../dataset\"", ")", ",", "False", ",", "data_transform", ",", "download", "=", "False", ")", "\n", "\n", "train_loader", "=", "DataLoader", "(", "train_dataset", ",", "train_batch_size", ",", "shuffle", "=", "enable_train_shuffle", ",", "num_workers", "=", "2", ",", "pin_memory", "=", "True", ")", "\n", "test_loader", "=", "DataLoader", "(", "test_dataset", ",", "val_batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "2", ",", "pin_memory", "=", "True", ")", "\n", "\n", "return", "train_loader", ",", "test_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.pytorch_snip.dataloader.get_cifar10_dataloaders": [[21, 41], ["torchvision.transforms.Compose", "torchvision.datasets.CIFAR10", "torchvision.datasets.CIFAR10", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.RandomCrop", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize"], "function", ["None"], ["", "def", "get_cifar10_dataloaders", "(", "train_batch_size", ",", "test_batch_size", ",", "args", ",", "enable_train_shuffle", "=", "True", ",", "enable_train_trans", "=", "True", ")", ":", "\n", "  ", "if", "enable_train_trans", ":", "\n", "    ", "train_transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "RandomCrop", "(", "32", ",", "padding", "=", "4", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.4914", ",", "0.4822", ",", "0.4465", ")", ",", "(", "0.2023", ",", "0.1994", ",", "0.2010", ")", ")", "]", ")", "\n", "", "else", ":", "\n", "    ", "train_transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.4914", ",", "0.4822", ",", "0.4465", ")", ",", "(", "0.2023", ",", "0.1994", ",", "0.2010", ")", ")", "]", ")", "\n", "\n", "", "test_transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.4914", ",", "0.4822", ",", "0.4465", ")", ",", "(", "0.2023", ",", "0.1994", ",", "0.2010", ")", ")", "]", ")", "\n", "\n", "train_dataset", "=", "CIFAR10", "(", "\"{}/{}\"", ".", "format", "(", "args", ".", "relative_dir", ",", "\"../dataset\"", ")", ",", "True", ",", "train_transform", ",", "download", "=", "True", ")", "\n", "test_dataset", "=", "CIFAR10", "(", "\"{}/{}\"", ".", "format", "(", "args", ".", "relative_dir", ",", "\"../dataset\"", ")", ",", "False", ",", "test_transform", ",", "download", "=", "False", ")", "\n", "\n", "train_loader", "=", "DataLoader", "(", "train_dataset", ",", "train_batch_size", ",", "shuffle", "=", "enable_train_shuffle", ",", "num_workers", "=", "2", ",", "pin_memory", "=", "True", ")", "\n", "test_loader", "=", "DataLoader", "(", "test_dataset", ",", "test_batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "2", ",", "pin_memory", "=", "True", ")", "\n", "\n", "return", "train_loader", ",", "test_loader", "", "", ""]], "home.repos.pwc.inspect_result.zwxu064_RANP.efficient_3DCNN.opts.parse_opts": [[4, 109], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.set_defaults", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.set_defaults", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.set_defaults", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.set_defaults", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.set_defaults", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.set_defaults", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.set_defaults", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.set_defaults", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.set_defaults", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "parse_opts", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--server'", ",", "type", "=", "str", ",", "default", "=", "'data61'", ",", "help", "=", "'name of server'", ")", "\n", "parser", ".", "add_argument", "(", "'--root_path'", ",", "default", "=", "'/root/data/ActivityNet'", ",", "type", "=", "str", ",", "help", "=", "'Root directory path of data'", ")", "\n", "parser", ".", "add_argument", "(", "'--video_path'", ",", "default", "=", "'video_kinetics_jpg'", ",", "type", "=", "str", ",", "help", "=", "'Directory path of Videos'", ")", "\n", "parser", ".", "add_argument", "(", "'--annotation_path'", ",", "default", "=", "'kinetics.json'", ",", "type", "=", "str", ",", "help", "=", "'Annotation file path'", ")", "\n", "parser", ".", "add_argument", "(", "'--checkpoifnt_dir'", ",", "default", "=", "'checkpoints'", ",", "type", "=", "str", ",", "help", "=", "'Result directory path'", ")", "\n", "parser", ".", "add_argument", "(", "'--store_name'", ",", "default", "=", "'model'", ",", "type", "=", "str", ",", "help", "=", "'Name to store checkpoints'", ")", "\n", "parser", ".", "add_argument", "(", "'--modality'", ",", "default", "=", "'RGB'", ",", "type", "=", "str", ",", "help", "=", "'Modality of input data. RGB, Flow or RGBFlow'", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "default", "=", "'kinetics'", ",", "type", "=", "str", ",", "help", "=", "'Used dataset (activitynet | kinetics | ucf101 | hmdb51)'", ")", "\n", "parser", ".", "add_argument", "(", "'--n_classes'", ",", "default", "=", "400", ",", "type", "=", "int", ",", "help", "=", "'Number of classes (activitynet: 200, kinetics: 400, ucf101: 101, hmdb51: 51)'", ")", "\n", "parser", ".", "add_argument", "(", "'--n_finetune_classes'", ",", "default", "=", "400", ",", "type", "=", "int", ",", "help", "=", "'Number of classes for fine-tuning. n_classes is set to the number when pretraining.'", ")", "\n", "parser", ".", "add_argument", "(", "'--sample_size'", ",", "default", "=", "112", ",", "type", "=", "int", ",", "help", "=", "'Height and width of inputs'", ")", "\n", "parser", ".", "add_argument", "(", "'--sample_duration'", ",", "default", "=", "16", ",", "type", "=", "int", ",", "help", "=", "'Temporal duration of inputs'", ")", "\n", "parser", ".", "add_argument", "(", "'--downsample'", ",", "default", "=", "1", ",", "type", "=", "int", ",", "help", "=", "'Downsampling. Selecting 1 frame out of N'", ")", "\n", "parser", ".", "add_argument", "(", "'--initial_scale'", ",", "default", "=", "1.0", ",", "type", "=", "float", ",", "help", "=", "'Initial scale for multiscale cropping'", ")", "\n", "parser", ".", "add_argument", "(", "'--n_scales'", ",", "default", "=", "5", ",", "type", "=", "int", ",", "help", "=", "'Number of scales for multiscale cropping'", ")", "\n", "parser", ".", "add_argument", "(", "'--scale_step'", ",", "default", "=", "0.84089641525", ",", "type", "=", "float", ",", "help", "=", "'Scale step for multiscale cropping'", ")", "\n", "parser", ".", "add_argument", "(", "'--train_crop'", ",", "default", "=", "'corner'", ",", "type", "=", "str", ",", "help", "=", "'Spatial cropping method in training. random is uniform. corner is selection from 4 corners and 1 center.  (random | corner | center)'", ")", "\n", "parser", ".", "add_argument", "(", "'--learning_rate'", ",", "default", "=", "0.04", ",", "type", "=", "float", ",", "help", "=", "'Initial learning rate (divided by 10 while training by lr scheduler)'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_steps'", ",", "default", "=", "[", "40", ",", "55", ",", "65", ",", "70", ",", "200", ",", "250", "]", ",", "type", "=", "float", ",", "nargs", "=", "\"+\"", ",", "metavar", "=", "'LRSteps'", ",", "help", "=", "'epochs to decay learning rate by 10'", ")", "\n", "parser", ".", "add_argument", "(", "'--momentum'", ",", "default", "=", "0.9", ",", "type", "=", "float", ",", "help", "=", "'Momentum'", ")", "\n", "parser", ".", "add_argument", "(", "'--dampening'", ",", "default", "=", "0.9", ",", "type", "=", "float", ",", "help", "=", "'dampening of SGD'", ")", "\n", "parser", ".", "add_argument", "(", "'--weight_decay'", ",", "default", "=", "1e-3", ",", "type", "=", "float", ",", "help", "=", "'Weight Decay'", ")", "\n", "parser", ".", "add_argument", "(", "'--mean_dataset'", ",", "default", "=", "'activitynet'", ",", "type", "=", "str", ",", "help", "=", "'dataset for mean values of mean subtraction (activitynet | kinetics)'", ")", "\n", "parser", ".", "add_argument", "(", "'--no_mean_norm'", ",", "action", "=", "'store_true'", ",", "help", "=", "'If true, inputs are not normalized by mean.'", ")", "\n", "parser", ".", "set_defaults", "(", "no_mean_norm", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--std_norm'", ",", "action", "=", "'store_true'", ",", "help", "=", "'If true, inputs are normalized by standard deviation.'", ")", "\n", "parser", ".", "set_defaults", "(", "std_norm", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--nesterov'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Nesterov momentum'", ")", "\n", "parser", ".", "set_defaults", "(", "nesterov", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--optimizer'", ",", "default", "=", "'sgd'", ",", "type", "=", "str", ",", "help", "=", "'Currently only support SGD'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_patience'", ",", "default", "=", "10", ",", "type", "=", "int", ",", "help", "=", "'Patience of LR scheduler. See documentation of ReduceLROnPlateau.'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "default", "=", "128", ",", "type", "=", "int", ",", "help", "=", "'Batch Size'", ")", "\n", "parser", ".", "add_argument", "(", "'--n_epochs'", ",", "default", "=", "250", ",", "type", "=", "int", ",", "help", "=", "'Number of total epochs to run'", ")", "\n", "parser", ".", "add_argument", "(", "'--begin_epoch'", ",", "default", "=", "1", ",", "type", "=", "int", ",", "help", "=", "'Training begins at this epoch. Previous trained model indicated by resume_path is loaded.'", ")", "\n", "parser", ".", "add_argument", "(", "'--n_val_samples'", ",", "default", "=", "3", ",", "type", "=", "int", ",", "help", "=", "'Number of validation samples for each activity'", ")", "\n", "parser", ".", "add_argument", "(", "'--resume_path'", ",", "default", "=", "''", ",", "type", "=", "str", ",", "help", "=", "'Save data (.pth) of previous training'", ")", "\n", "parser", ".", "add_argument", "(", "'--pretrain_path'", ",", "default", "=", "''", ",", "type", "=", "str", ",", "help", "=", "'Pretrained model (.pth)'", ")", "\n", "parser", ".", "add_argument", "(", "'--ft_portion'", ",", "default", "=", "'complete'", ",", "type", "=", "str", ",", "help", "=", "'The portion of the model to apply fine tuning, either complete or last_layer'", ")", "\n", "parser", ".", "add_argument", "(", "'--no_train'", ",", "action", "=", "'store_true'", ",", "help", "=", "'If true, training is not performed.'", ")", "\n", "parser", ".", "set_defaults", "(", "no_train", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--no_val'", ",", "action", "=", "'store_true'", ",", "help", "=", "'If true, validation is not performed.'", ")", "\n", "parser", ".", "set_defaults", "(", "no_val", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--test'", ",", "action", "=", "'store_true'", ",", "help", "=", "'If true, test is performed.'", ")", "\n", "parser", ".", "set_defaults", "(", "test", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--test_subset'", ",", "default", "=", "'val'", ",", "type", "=", "str", ",", "help", "=", "'Used subset in test (val | test)'", ")", "\n", "parser", ".", "add_argument", "(", "'--scale_in_test'", ",", "default", "=", "1.0", ",", "type", "=", "float", ",", "help", "=", "'Spatial scale in test'", ")", "\n", "parser", ".", "add_argument", "(", "'--crop_position_in_test'", ",", "default", "=", "'c'", ",", "type", "=", "str", ",", "help", "=", "'Cropping method (c | tl | tr | bl | br) in test'", ")", "\n", "parser", ".", "add_argument", "(", "'--no_softmax_in_test'", ",", "action", "=", "'store_true'", ",", "help", "=", "'If true, output for each clip is not normalized using softmax.'", ")", "\n", "parser", ".", "set_defaults", "(", "no_softmax_in_test", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--no_cuda'", ",", "action", "=", "'store_true'", ",", "help", "=", "'If true, cuda is not used.'", ")", "\n", "parser", ".", "set_defaults", "(", "no_cuda", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--n_threads'", ",", "default", "=", "16", ",", "type", "=", "int", ",", "help", "=", "'Number of threads for multi-thread loading'", ")", "\n", "parser", ".", "add_argument", "(", "'--checkpoint'", ",", "default", "=", "10", ",", "type", "=", "int", ",", "help", "=", "'Trained model is saved at every this epochs.'", ")", "\n", "parser", ".", "add_argument", "(", "'--no_hflip'", ",", "action", "=", "'store_true'", ",", "help", "=", "'If true holizontal flipping is not performed.'", ")", "\n", "parser", ".", "set_defaults", "(", "no_hflip", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--norm_value'", ",", "default", "=", "1", ",", "type", "=", "int", ",", "help", "=", "'If 1, range of inputs is [0-255]. If 255, range of inputs is [0-1].'", ")", "\n", "parser", ".", "add_argument", "(", "'--model'", ",", "default", "=", "'resnet'", ",", "type", "=", "str", ",", "help", "=", "'(resnet | preresnet | wideresnet | resnext | densenet | '", ")", "\n", "parser", ".", "add_argument", "(", "'--version'", ",", "default", "=", "1.1", ",", "type", "=", "float", ",", "help", "=", "'Version of the model'", ")", "\n", "parser", ".", "add_argument", "(", "'--model_depth'", ",", "default", "=", "18", ",", "type", "=", "int", ",", "help", "=", "'Depth of resnet (10 | 18 | 34 | 50 | 101)'", ")", "\n", "parser", ".", "add_argument", "(", "'--resnet_shortcut'", ",", "default", "=", "'B'", ",", "type", "=", "str", ",", "help", "=", "'Shortcut type of resnet (A | B)'", ")", "\n", "parser", ".", "add_argument", "(", "'--wide_resnet_k'", ",", "default", "=", "2", ",", "type", "=", "int", ",", "help", "=", "'Wide resnet k'", ")", "\n", "parser", ".", "add_argument", "(", "'--resnext_cardinality'", ",", "default", "=", "32", ",", "type", "=", "int", ",", "help", "=", "'ResNeXt cardinality'", ")", "\n", "parser", ".", "add_argument", "(", "'--groups'", ",", "default", "=", "3", ",", "type", "=", "int", ",", "help", "=", "'The number of groups at group convolutions at conv layers'", ")", "\n", "parser", ".", "add_argument", "(", "'--width_mult'", ",", "default", "=", "1.0", ",", "type", "=", "float", ",", "help", "=", "'The applied width multiplier to scale number of filters'", ")", "\n", "parser", ".", "add_argument", "(", "'--manual_seed'", ",", "default", "=", "1", ",", "type", "=", "int", ",", "help", "=", "'Manually set random seed'", ")", "\n", "\n", "# For pruning", "\n", "parser", ".", "add_argument", "(", "'--resource_list_type'", ",", "type", "=", "str", ",", "default", "=", "'grad_flops'", ",", "\n", "choices", "=", "[", "'vanilla'", ",", "'grad'", ",", "'param'", ",", "'flops'", ",", "'memory'", ",", "'grad_param'", ",", "'grad_flops'", ",", "'grad_memory'", ",", "''", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--resource_list_lambda'", ",", "type", "=", "float", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "'--enable_raw_grad'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--acc_mode'", ",", "type", "=", "str", ",", "default", "=", "'sum'", ",", "help", "=", "'mode of mask grads, mean, max, sum'", ")", "\n", "parser", ".", "add_argument", "(", "'--prune_spatial_size'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "help", "=", "'prune spatial size'", ")", "\n", "parser", ".", "add_argument", "(", "'--neuron_sparsity'", ",", "type", "=", "float", ",", "default", "=", "0", ",", "help", "=", "'neuron sparsity'", ")", "\n", "parser", ".", "add_argument", "(", "'--weight_init'", ",", "type", "=", "str", ",", "default", "=", "'xn'", ",", "help", "=", "'weight initialization'", ",", "choices", "=", "[", "'xn'", ",", "'ort'", "]", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--layer_sparsity_list'", ",", "type", "=", "float", ",", "default", "=", "0", ",", "help", "=", "'layer wise neuron pruning'", ")", "\n", "parser", ".", "add_argument", "(", "'--random_method'", ",", "type", "=", "int", ",", "default", "=", "None", ",", "choices", "=", "[", "0", ",", "1", ",", "None", "]", ",", "help", "=", "'random method 0 or 1'", ")", "\n", "parser", ".", "add_argument", "(", "'--random_sparsity'", ",", "type", "=", "float", ",", "default", "=", "0", ",", "help", "=", "'random sparsity neuron pruning'", ")", "\n", "parser", ".", "add_argument", "(", "'--random_sparsity_seed'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'random sparsity seed for neuron pruning'", ")", "\n", "parser", ".", "add_argument", "(", "'--param_sparsity'", ",", "type", "=", "float", ",", "default", "=", "0", ",", "help", "=", "'SNIP param pruning'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "args", ".", "enable_neuron_prune", "=", "(", "args", ".", "neuron_sparsity", ">=", "0", ")", "\n", "args", ".", "enable_hidden_layer_prune", "=", "False", "\n", "args", ".", "enable_cuda", "=", "True", "\n", "args", ".", "n_class", "=", "args", ".", "n_classes", "\n", "args", ".", "enable_param_prune", "=", "False", "\n", "args", ".", "network_name", "=", "args", ".", "model", "\n", "args", ".", "batch", "=", "args", ".", "batch_size", "\n", "args", ".", "enable_param_prune", "=", "(", "args", ".", "param_sparsity", ">", "0", ")", "\n", "\n", "if", "args", ".", "dataset", "==", "'ucf101'", ":", "\n", "        ", "if", "args", ".", "model", "==", "'mobilenetv2'", ":", "\n", "            ", "args", ".", "lr_steps", "=", "[", "40", ",", "55", ",", "65", ",", "70", ",", "200", ",", "250", "]", "\n", "args", ".", "train_crop", "=", "'random'", "\n", "", "elif", "args", ".", "model", "==", "'I3D'", ":", "\n", "            ", "args", ".", "lr_steps", "=", "[", "50", ",", "100", ",", "150", ",", "200", "]", "\n", "args", ".", "sample_size", "=", "224", "\n", "args", ".", "train_crop", "=", "'random'", "\n", "\n", "", "", "return", "args", "\n", "", ""]], "home.repos.pwc.inspect_result.zwxu064_RANP.efficient_3DCNN.spatial_transforms.Compose.__init__": [[27, 29], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "transforms", ")", ":", "\n", "        ", "self", ".", "transforms", "=", "transforms", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.efficient_3DCNN.spatial_transforms.Compose.__call__": [[30, 34], ["t"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "for", "t", "in", "self", ".", "transforms", ":", "\n", "            ", "img", "=", "t", "(", "img", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.efficient_3DCNN.spatial_transforms.Compose.randomize_parameters": [[35, 38], ["t.randomize_parameters"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.efficient_3DCNN.spatial_transforms.MultiplyValues.randomize_parameters"], ["", "def", "randomize_parameters", "(", "self", ")", ":", "\n", "        ", "for", "t", "in", "self", ".", "transforms", ":", "\n", "            ", "t", ".", "randomize_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.efficient_3DCNN.spatial_transforms.ToTensor.__init__": [[46, 48], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "norm_value", "=", "255", ")", ":", "\n", "        ", "self", ".", "norm_value", "=", "norm_value", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.efficient_3DCNN.spatial_transforms.ToTensor.__call__": [[49, 90], ["isinstance", "torch.ByteTensor.view", "torch.ByteTensor.transpose().transpose().contiguous", "isinstance", "torch.from_numpy", "torch.ByteTensor.float().div", "isinstance", "numpy.zeros", "pic.copyto", "torch.from_numpy", "torch.from_numpy", "torch.ByteTensor.float().div", "pic.transpose", "numpy.array", "torch.from_numpy", "torch.ByteTensor", "len", "torch.ByteTensor.transpose().transpose", "torch.ByteTensor.float", "numpy.array", "torch.ByteStorage.from_buffer", "torch.ByteTensor.float", "pic.tobytes", "torch.ByteTensor.transpose"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "pic", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            pic (PIL.Image or numpy.ndarray): Image to be converted to tensor.\n        Returns:\n            Tensor: Converted image.\n        \"\"\"", "\n", "if", "isinstance", "(", "pic", ",", "np", ".", "ndarray", ")", ":", "\n", "# handle numpy array", "\n", "            ", "img", "=", "torch", ".", "from_numpy", "(", "pic", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", ")", "\n", "# backward compatibility", "\n", "return", "img", ".", "float", "(", ")", ".", "div", "(", "self", ".", "norm_value", ")", "\n", "\n", "", "if", "accimage", "is", "not", "None", "and", "isinstance", "(", "pic", ",", "accimage", ".", "Image", ")", ":", "\n", "            ", "nppic", "=", "np", ".", "zeros", "(", "\n", "[", "pic", ".", "channels", ",", "pic", ".", "height", ",", "pic", ".", "width", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "pic", ".", "copyto", "(", "nppic", ")", "\n", "return", "torch", ".", "from_numpy", "(", "nppic", ")", "\n", "\n", "# handle PIL Image", "\n", "", "if", "pic", ".", "mode", "==", "'I'", ":", "\n", "            ", "img", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "pic", ",", "np", ".", "int32", ",", "copy", "=", "False", ")", ")", "\n", "", "elif", "pic", ".", "mode", "==", "'I;16'", ":", "\n", "            ", "img", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "pic", ",", "np", ".", "int16", ",", "copy", "=", "False", ")", ")", "\n", "", "else", ":", "\n", "            ", "img", "=", "torch", ".", "ByteTensor", "(", "torch", ".", "ByteStorage", ".", "from_buffer", "(", "pic", ".", "tobytes", "(", ")", ")", ")", "\n", "# PIL image mode: 1, L, P, I, F, RGB, YCbCr, RGBA, CMYK", "\n", "", "if", "pic", ".", "mode", "==", "'YCbCr'", ":", "\n", "            ", "nchannel", "=", "3", "\n", "", "elif", "pic", ".", "mode", "==", "'I;16'", ":", "\n", "            ", "nchannel", "=", "1", "\n", "", "else", ":", "\n", "            ", "nchannel", "=", "len", "(", "pic", ".", "mode", ")", "\n", "", "img", "=", "img", ".", "view", "(", "pic", ".", "size", "[", "1", "]", ",", "pic", ".", "size", "[", "0", "]", ",", "nchannel", ")", "\n", "# put it from HWC to CHW format", "\n", "# yikes, this transpose takes 80% of the loading time/CPU", "\n", "img", "=", "img", ".", "transpose", "(", "0", ",", "1", ")", ".", "transpose", "(", "0", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "if", "isinstance", "(", "img", ",", "torch", ".", "ByteTensor", ")", ":", "\n", "            ", "return", "img", ".", "float", "(", ")", ".", "div", "(", "self", ".", "norm_value", ")", "\n", "", "else", ":", "\n", "            ", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.efficient_3DCNN.spatial_transforms.ToTensor.randomize_parameters": [[91, 93], ["None"], "methods", ["None"], ["", "", "def", "randomize_parameters", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.efficient_3DCNN.spatial_transforms.Normalize.__init__": [[106, 109], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "mean", ",", "std", ")", ":", "\n", "        ", "self", ".", "mean", "=", "mean", "\n", "self", ".", "std", "=", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.efficient_3DCNN.spatial_transforms.Normalize.__call__": [[110, 121], ["zip", "t.sub_().div_", "t.sub_"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            tensor (Tensor): Tensor image of size (C, H, W) to be normalized.\n        Returns:\n            Tensor: Normalized image.\n        \"\"\"", "\n", "# TODO: make efficient", "\n", "for", "t", ",", "m", ",", "s", "in", "zip", "(", "tensor", ",", "self", ".", "mean", ",", "self", ".", "std", ")", ":", "\n", "            ", "t", ".", "sub_", "(", "m", ")", ".", "div_", "(", "s", ")", "\n", "", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.efficient_3DCNN.spatial_transforms.Normalize.randomize_parameters": [[122, 124], ["None"], "methods", ["None"], ["", "def", "randomize_parameters", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.efficient_3DCNN.spatial_transforms.Scale.__init__": [[138, 144], ["isinstance", "isinstance", "len"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ",", "interpolation", "=", "Image", ".", "BILINEAR", ")", ":", "\n", "        ", "assert", "isinstance", "(", "size", ",", "\n", "int", ")", "or", "(", "isinstance", "(", "size", ",", "collections", ".", "Iterable", ")", "and", "\n", "len", "(", "size", ")", "==", "2", ")", "\n", "self", ".", "size", "=", "size", "\n", "self", ".", "interpolation", "=", "interpolation", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.efficient_3DCNN.spatial_transforms.Scale.__call__": [[145, 166], ["isinstance", "img.resize", "int", "img.resize", "int", "img.resize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            img (PIL.Image): Image to be scaled.\n        Returns:\n            PIL.Image: Rescaled image.\n        \"\"\"", "\n", "if", "isinstance", "(", "self", ".", "size", ",", "int", ")", ":", "\n", "            ", "w", ",", "h", "=", "img", ".", "size", "\n", "if", "(", "w", "<=", "h", "and", "w", "==", "self", ".", "size", ")", "or", "(", "h", "<=", "w", "and", "h", "==", "self", ".", "size", ")", ":", "\n", "                ", "return", "img", "\n", "", "if", "w", "<", "h", ":", "\n", "                ", "ow", "=", "self", ".", "size", "\n", "oh", "=", "int", "(", "self", ".", "size", "*", "h", "/", "w", ")", "\n", "return", "img", ".", "resize", "(", "(", "ow", ",", "oh", ")", ",", "self", ".", "interpolation", ")", "\n", "", "else", ":", "\n", "                ", "oh", "=", "self", ".", "size", "\n", "ow", "=", "int", "(", "self", ".", "size", "*", "w", "/", "h", ")", "\n", "return", "img", ".", "resize", "(", "(", "ow", ",", "oh", ")", ",", "self", ".", "interpolation", ")", "\n", "", "", "else", ":", "\n", "            ", "return", "img", ".", "resize", "(", "self", ".", "size", ",", "self", ".", "interpolation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.efficient_3DCNN.spatial_transforms.Scale.randomize_parameters": [[167, 169], ["None"], "methods", ["None"], ["", "", "def", "randomize_parameters", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.efficient_3DCNN.spatial_transforms.CenterCrop.__init__": [[179, 184], ["isinstance", "int", "int"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "if", "isinstance", "(", "size", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "self", ".", "size", "=", "(", "int", "(", "size", ")", ",", "int", "(", "size", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.efficient_3DCNN.spatial_transforms.CenterCrop.__call__": [[185, 197], ["int", "int", "img.crop", "round", "round"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.data.explore.crop"], ["", "", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            img (PIL.Image): Image to be cropped.\n        Returns:\n            PIL.Image: Cropped image.\n        \"\"\"", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "th", ",", "tw", "=", "self", ".", "size", "\n", "x1", "=", "int", "(", "round", "(", "(", "w", "-", "tw", ")", "/", "2.", ")", ")", "\n", "y1", "=", "int", "(", "round", "(", "(", "h", "-", "th", ")", "/", "2.", ")", ")", "\n", "return", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "tw", ",", "y1", "+", "th", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.efficient_3DCNN.spatial_transforms.CenterCrop.randomize_parameters": [[198, 200], ["None"], "methods", ["None"], ["", "def", "randomize_parameters", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.efficient_3DCNN.spatial_transforms.CornerCrop.__init__": [[204, 212], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ",", "crop_position", "=", "None", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "if", "crop_position", "is", "None", ":", "\n", "            ", "self", ".", "randomize", "=", "True", "\n", "", "else", ":", "\n", "            ", "self", ".", "randomize", "=", "False", "\n", "", "self", ".", "crop_position", "=", "crop_position", "\n", "self", ".", "crop_positions", "=", "[", "'c'", ",", "'tl'", ",", "'tr'", ",", "'bl'", ",", "'br'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.efficient_3DCNN.spatial_transforms.CornerCrop.__call__": [[213, 247], ["img.crop.crop.crop", "int", "int", "round", "round"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.data.explore.crop"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "image_width", "=", "img", ".", "size", "[", "0", "]", "\n", "image_height", "=", "img", ".", "size", "[", "1", "]", "\n", "\n", "if", "self", ".", "crop_position", "==", "'c'", ":", "\n", "            ", "th", ",", "tw", "=", "(", "self", ".", "size", ",", "self", ".", "size", ")", "\n", "x1", "=", "int", "(", "round", "(", "(", "image_width", "-", "tw", ")", "/", "2.", ")", ")", "\n", "y1", "=", "int", "(", "round", "(", "(", "image_height", "-", "th", ")", "/", "2.", ")", ")", "\n", "x2", "=", "x1", "+", "tw", "\n", "y2", "=", "y1", "+", "th", "\n", "", "elif", "self", ".", "crop_position", "==", "'tl'", ":", "\n", "            ", "x1", "=", "0", "\n", "y1", "=", "0", "\n", "x2", "=", "self", ".", "size", "\n", "y2", "=", "self", ".", "size", "\n", "", "elif", "self", ".", "crop_position", "==", "'tr'", ":", "\n", "            ", "x1", "=", "image_width", "-", "self", ".", "size", "\n", "y1", "=", "0", "\n", "x2", "=", "image_width", "\n", "y2", "=", "self", ".", "size", "\n", "", "elif", "self", ".", "crop_position", "==", "'bl'", ":", "\n", "            ", "x1", "=", "0", "\n", "y1", "=", "image_height", "-", "self", ".", "size", "\n", "x2", "=", "self", ".", "size", "\n", "y2", "=", "image_height", "\n", "", "elif", "self", ".", "crop_position", "==", "'br'", ":", "\n", "            ", "x1", "=", "image_width", "-", "self", ".", "size", "\n", "y1", "=", "image_height", "-", "self", ".", "size", "\n", "x2", "=", "image_width", "\n", "y2", "=", "image_height", "\n", "\n", "", "img", "=", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x2", ",", "y2", ")", ")", "\n", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.efficient_3DCNN.spatial_transforms.CornerCrop.randomize_parameters": [[248, 253], ["random.randint", "len"], "methods", ["None"], ["", "def", "randomize_parameters", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "randomize", ":", "\n", "            ", "self", ".", "crop_position", "=", "self", ".", "crop_positions", "[", "random", ".", "randint", "(", "\n", "0", ",", "\n", "len", "(", "self", ".", "crop_positions", ")", "-", "1", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.efficient_3DCNN.spatial_transforms.RandomHorizontalFlip.__call__": [[258, 268], ["img.transpose"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            img (PIL.Image): Image to be flipped.\n        Returns:\n            PIL.Image: Randomly flipped image.\n        \"\"\"", "\n", "if", "self", ".", "p", "<", "0.5", ":", "\n", "            ", "return", "img", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.efficient_3DCNN.spatial_transforms.RandomHorizontalFlip.randomize_parameters": [[269, 271], ["random.random"], "methods", ["None"], ["", "def", "randomize_parameters", "(", "self", ")", ":", "\n", "        ", "self", ".", "p", "=", "random", ".", "random", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.efficient_3DCNN.spatial_transforms.MultiScaleCornerCrop.__init__": [[284, 294], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "scales", ",", "\n", "size", ",", "\n", "interpolation", "=", "Image", ".", "BILINEAR", ",", "\n", "crop_positions", "=", "[", "'c'", ",", "'tl'", ",", "'tr'", ",", "'bl'", ",", "'br'", "]", ")", ":", "\n", "        ", "self", ".", "scales", "=", "scales", "\n", "self", ".", "size", "=", "size", "\n", "self", ".", "interpolation", "=", "interpolation", "\n", "\n", "self", ".", "crop_positions", "=", "crop_positions", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.efficient_3DCNN.spatial_transforms.MultiScaleCornerCrop.__call__": [[295, 334], ["min", "int", "img.crop.crop.crop", "img.crop.crop.resize"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.data.explore.crop"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "min_length", "=", "min", "(", "img", ".", "size", "[", "0", "]", ",", "img", ".", "size", "[", "1", "]", ")", "\n", "crop_size", "=", "int", "(", "min_length", "*", "self", ".", "scale", ")", "\n", "\n", "image_width", "=", "img", ".", "size", "[", "0", "]", "\n", "image_height", "=", "img", ".", "size", "[", "1", "]", "\n", "\n", "if", "self", ".", "crop_position", "==", "'c'", ":", "\n", "            ", "center_x", "=", "image_width", "//", "2", "\n", "center_y", "=", "image_height", "//", "2", "\n", "box_half", "=", "crop_size", "//", "2", "\n", "x1", "=", "center_x", "-", "box_half", "\n", "y1", "=", "center_y", "-", "box_half", "\n", "x2", "=", "center_x", "+", "box_half", "\n", "y2", "=", "center_y", "+", "box_half", "\n", "", "elif", "self", ".", "crop_position", "==", "'tl'", ":", "\n", "            ", "x1", "=", "0", "\n", "y1", "=", "0", "\n", "x2", "=", "crop_size", "\n", "y2", "=", "crop_size", "\n", "", "elif", "self", ".", "crop_position", "==", "'tr'", ":", "\n", "            ", "x1", "=", "image_width", "-", "crop_size", "\n", "y1", "=", "0", "\n", "x2", "=", "image_width", "\n", "y2", "=", "crop_size", "\n", "", "elif", "self", ".", "crop_position", "==", "'bl'", ":", "\n", "            ", "x1", "=", "0", "\n", "y1", "=", "image_height", "-", "crop_size", "\n", "x2", "=", "crop_size", "\n", "y2", "=", "image_height", "\n", "", "elif", "self", ".", "crop_position", "==", "'br'", ":", "\n", "            ", "x1", "=", "image_width", "-", "crop_size", "\n", "y1", "=", "image_height", "-", "crop_size", "\n", "x2", "=", "image_width", "\n", "y2", "=", "image_height", "\n", "\n", "", "img", "=", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x2", ",", "y2", ")", ")", "\n", "\n", "return", "img", ".", "resize", "(", "(", "self", ".", "size", ",", "self", ".", "size", ")", ",", "self", ".", "interpolation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.efficient_3DCNN.spatial_transforms.MultiScaleCornerCrop.randomize_parameters": [[335, 340], ["random.randint", "random.randint", "len", "len"], "methods", ["None"], ["", "def", "randomize_parameters", "(", "self", ")", ":", "\n", "        ", "self", ".", "scale", "=", "self", ".", "scales", "[", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ".", "scales", ")", "-", "1", ")", "]", "\n", "self", ".", "crop_position", "=", "self", ".", "crop_positions", "[", "random", ".", "randint", "(", "\n", "0", ",", "\n", "len", "(", "self", ".", "scales", ")", "-", "1", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.efficient_3DCNN.spatial_transforms.MultiScaleRandomCrop.__init__": [[344, 348], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "scales", ",", "size", ",", "interpolation", "=", "Image", ".", "BILINEAR", ")", ":", "\n", "        ", "self", ".", "scales", "=", "scales", "\n", "self", ".", "size", "=", "size", "\n", "self", ".", "interpolation", "=", "interpolation", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.efficient_3DCNN.spatial_transforms.MultiScaleRandomCrop.__call__": [[349, 364], ["min", "int", "img.crop.crop.crop", "img.crop.crop.resize"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.data.explore.crop"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "min_length", "=", "min", "(", "img", ".", "size", "[", "0", "]", ",", "img", ".", "size", "[", "1", "]", ")", "\n", "crop_size", "=", "int", "(", "min_length", "*", "self", ".", "scale", ")", "\n", "\n", "image_width", "=", "img", ".", "size", "[", "0", "]", "\n", "image_height", "=", "img", ".", "size", "[", "1", "]", "\n", "\n", "x1", "=", "self", ".", "tl_x", "*", "(", "image_width", "-", "crop_size", ")", "\n", "y1", "=", "self", ".", "tl_y", "*", "(", "image_height", "-", "crop_size", ")", "\n", "x2", "=", "x1", "+", "crop_size", "\n", "y2", "=", "y1", "+", "crop_size", "\n", "\n", "img", "=", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x2", ",", "y2", ")", ")", "\n", "\n", "return", "img", ".", "resize", "(", "(", "self", ".", "size", ",", "self", ".", "size", ")", ",", "self", ".", "interpolation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.efficient_3DCNN.spatial_transforms.MultiScaleRandomCrop.randomize_parameters": [[365, 370], ["random.random", "random.random", "random.randint", "len"], "methods", ["None"], ["", "def", "randomize_parameters", "(", "self", ")", ":", "\n", "        ", "self", ".", "scale", "=", "self", ".", "scales", "[", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ".", "scales", ")", "-", "1", ")", "]", "\n", "#self.scale = 1", "\n", "self", ".", "tl_x", "=", "random", ".", "random", "(", ")", "\n", "self", ".", "tl_y", "=", "random", ".", "random", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.efficient_3DCNN.spatial_transforms.SpatialElasticDisplacement.__init__": [[380, 386], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "sigma", "=", "3.0", ",", "alpha", "=", "1.0", ",", "order", "=", "3", ",", "cval", "=", "0", ",", "mode", "=", "\"constant\"", ")", ":", "\n", "        ", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "sigma", "=", "sigma", "\n", "self", ".", "order", "=", "order", "\n", "self", ".", "cval", "=", "cval", "\n", "self", ".", "mode", "=", "mode", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.efficient_3DCNN.spatial_transforms.SpatialElasticDisplacement.__call__": [[387, 410], ["isinstance", "numpy.squeeze", "spatial_transforms.SpatialElasticDisplacement._generate_indices", "spatial_transforms.SpatialElasticDisplacement._map_coordinates", "numpy.asarray", "PIL.Image.fromarray"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.efficient_3DCNN.spatial_transforms.SpatialElasticDisplacement._generate_indices", "home.repos.pwc.inspect_result.zwxu064_RANP.efficient_3DCNN.spatial_transforms.SpatialElasticDisplacement._map_coordinates"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "if", "self", ".", "p", "<", "0.65", ":", "\n", "            ", "is_PIL", "=", "isinstance", "(", "img", ",", "Image", ".", "Image", ")", "\n", "if", "is_PIL", ":", "\n", "                ", "img", "=", "np", ".", "asarray", "(", "img", ")", "\n", "\n", "", "image", "=", "img", "\n", "image_first_channel", "=", "np", ".", "squeeze", "(", "image", "[", "...", ",", "0", "]", ")", "\n", "indices_x", ",", "indices_y", "=", "self", ".", "_generate_indices", "(", "image_first_channel", ".", "shape", ",", "alpha", "=", "self", ".", "alpha", ",", "sigma", "=", "self", ".", "sigma", ")", "\n", "ret_image", "=", "(", "self", ".", "_map_coordinates", "(", "\n", "image", ",", "\n", "indices_x", ",", "\n", "indices_y", ",", "\n", "order", "=", "self", ".", "order", ",", "\n", "cval", "=", "self", ".", "cval", ",", "\n", "mode", "=", "self", ".", "mode", ")", ")", "\n", "\n", "if", "is_PIL", ":", "\n", "                ", "return", "Image", ".", "fromarray", "(", "ret_image", ")", "\n", "", "else", ":", "\n", "                ", "return", "ret_image", "\n", "", "", "else", ":", "\n", "            ", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.efficient_3DCNN.spatial_transforms.SpatialElasticDisplacement._generate_indices": [[411, 418], ["numpy.meshgrid", "len", "scipy.ndimage.gaussian_filter", "scipy.ndimage.gaussian_filter", "numpy.arange", "numpy.arange", "numpy.reshape", "numpy.reshape", "numpy.random.rand", "numpy.random.rand"], "methods", ["None"], ["", "", "def", "_generate_indices", "(", "self", ",", "shape", ",", "alpha", ",", "sigma", ")", ":", "\n", "        ", "assert", "(", "len", "(", "shape", ")", "==", "2", ")", ",", "\"shape: Should be of size 2!\"", "\n", "dx", "=", "scipy", ".", "ndimage", ".", "gaussian_filter", "(", "(", "np", ".", "random", ".", "rand", "(", "*", "shape", ")", "*", "2", "-", "1", ")", ",", "sigma", ",", "mode", "=", "\"constant\"", ",", "cval", "=", "0", ")", "*", "alpha", "\n", "dy", "=", "scipy", ".", "ndimage", ".", "gaussian_filter", "(", "(", "np", ".", "random", ".", "rand", "(", "*", "shape", ")", "*", "2", "-", "1", ")", ",", "sigma", ",", "mode", "=", "\"constant\"", ",", "cval", "=", "0", ")", "*", "alpha", "\n", "\n", "x", ",", "y", "=", "np", ".", "meshgrid", "(", "np", ".", "arange", "(", "shape", "[", "0", "]", ")", ",", "np", ".", "arange", "(", "shape", "[", "1", "]", ")", ",", "indexing", "=", "'ij'", ")", "\n", "return", "np", ".", "reshape", "(", "x", "+", "dx", ",", "(", "-", "1", ",", "1", ")", ")", ",", "np", ".", "reshape", "(", "y", "+", "dy", ",", "(", "-", "1", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.efficient_3DCNN.spatial_transforms.SpatialElasticDisplacement._map_coordinates": [[419, 434], ["numpy.copy", "range", "len", "scipy.ndimage.interpolation.map_coordinates", "scipy.ndimage.interpolation.map_coordinates.reshape"], "methods", ["None"], ["", "def", "_map_coordinates", "(", "self", ",", "image", ",", "indices_x", ",", "indices_y", ",", "order", "=", "1", ",", "cval", "=", "0", ",", "mode", "=", "\"constant\"", ")", ":", "\n", "        ", "assert", "(", "len", "(", "image", ".", "shape", ")", "==", "3", ")", ",", "\"image.shape: Should be of size 3!\"", "\n", "result", "=", "np", ".", "copy", "(", "image", ")", "\n", "height", ",", "width", "=", "image", ".", "shape", "[", "0", ":", "2", "]", "\n", "for", "c", "in", "range", "(", "image", ".", "shape", "[", "2", "]", ")", ":", "\n", "            ", "remapped_flat", "=", "scipy", ".", "ndimage", ".", "interpolation", ".", "map_coordinates", "(", "\n", "image", "[", "...", ",", "c", "]", ",", "\n", "(", "indices_x", ",", "indices_y", ")", ",", "\n", "order", "=", "order", ",", "\n", "cval", "=", "cval", ",", "\n", "mode", "=", "mode", "\n", ")", "\n", "remapped", "=", "remapped_flat", ".", "reshape", "(", "(", "height", ",", "width", ")", ")", "\n", "result", "[", "...", ",", "c", "]", "=", "remapped", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.efficient_3DCNN.spatial_transforms.SpatialElasticDisplacement.randomize_parameters": [[435, 437], ["random.random"], "methods", ["None"], ["", "def", "randomize_parameters", "(", "self", ")", ":", "\n", "       ", "self", ".", "p", "=", "random", ".", "random", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.efficient_3DCNN.spatial_transforms.RandomRotate.__init__": [[441, 443], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "interpolation", "=", "Image", ".", "BILINEAR", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.efficient_3DCNN.spatial_transforms.RandomRotate.__call__": [[444, 449], ["img.rotate"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "im_size", "=", "img", ".", "size", "\n", "ret_img", "=", "img", ".", "rotate", "(", "self", ".", "rotate_angle", ",", "resample", "=", "self", ".", "interpolation", ")", "\n", "\n", "return", "ret_img", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.efficient_3DCNN.spatial_transforms.RandomRotate.randomize_parameters": [[450, 452], ["random.randint"], "methods", ["None"], ["", "def", "randomize_parameters", "(", "self", ")", ":", "\n", "        ", "self", ".", "rotate_angle", "=", "random", ".", "randint", "(", "-", "10", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.efficient_3DCNN.spatial_transforms.RandomResize.__init__": [[456, 458], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "interpolation", "=", "Image", ".", "BILINEAR", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.efficient_3DCNN.spatial_transforms.RandomResize.__call__": [[459, 465], ["img.resize", "int", "int"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "im_size", "=", "img", ".", "size", "\n", "ret_img", "=", "img", ".", "resize", "(", "(", "int", "(", "im_size", "[", "0", "]", "*", "self", ".", "resize_const", ")", ",", "\n", "int", "(", "im_size", "[", "1", "]", "*", "self", ".", "resize_const", ")", ")", ")", "\n", "\n", "return", "ret_img", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.efficient_3DCNN.spatial_transforms.RandomResize.randomize_parameters": [[466, 468], ["random.uniform"], "methods", ["None"], ["", "def", "randomize_parameters", "(", "self", ")", ":", "\n", "        ", "self", ".", "resize_const", "=", "random", ".", "uniform", "(", "0.9", ",", "1.1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.efficient_3DCNN.spatial_transforms.Gaussian_blur.__init__": [[473, 475], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "radius", "=", "0.0", ")", ":", "\n", "        ", "self", ".", "radius", "=", "radius", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.efficient_3DCNN.spatial_transforms.Gaussian_blur.__call__": [[476, 482], ["ndimage.gaussian_filter"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "if", "self", ".", "p", "<", "0.2", ":", "\n", "            ", "blurred", "=", "ndimage", ".", "gaussian_filter", "(", "img", ",", "sigma", "=", "(", "5", ",", "5", ",", "0", ")", ",", "order", "=", "0", ")", "\n", "return", "blurred", "\n", "", "else", ":", "\n", "            ", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.efficient_3DCNN.spatial_transforms.Gaussian_blur.randomize_parameters": [[483, 486], ["random.random", "random.uniform"], "methods", ["None"], ["", "", "def", "randomize_parameters", "(", "self", ")", ":", "\n", "        ", "self", ".", "p", "=", "random", ".", "random", "(", ")", "\n", "self", ".", "radius", "=", "random", ".", "uniform", "(", "0.0", ",", "0.1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.efficient_3DCNN.spatial_transforms.SaltImage.__init__": [[489, 491], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "ratio", "=", "100", ")", ":", "\n", "        ", "self", ".", "ratio", "=", "ratio", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.efficient_3DCNN.spatial_transforms.SaltImage.__call__": [[492, 510], ["isinstance", "numpy.asarray", "numpy.where.astype", "numpy.random.randint", "numpy.where", "PIL.Image.fromarray", "numpy.where.astype"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "is_PIL", "=", "isinstance", "(", "img", ",", "Image", ".", "Image", ")", "\n", "if", "is_PIL", ":", "\n", "            ", "img", "=", "np", ".", "asarray", "(", "img", ")", "\n", "\n", "", "if", "self", ".", "p", "<", "0.10", ":", "\n", "            ", "data_final", "=", "[", "]", "\n", "img", "=", "img", ".", "astype", "(", "np", ".", "float", ")", "\n", "img_shape", "=", "img", ".", "shape", "\n", "noise", "=", "np", ".", "random", ".", "randint", "(", "self", ".", "ratio", ",", "size", "=", "img_shape", ")", "\n", "img", "=", "np", ".", "where", "(", "noise", "==", "0", ",", "255", ",", "img", ")", "\n", "\n", "if", "is_PIL", ":", "\n", "                ", "return", "Image", ".", "fromarray", "(", "img", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "", "else", ":", "\n", "                ", "return", "img", "\n", "", "", "else", ":", "\n", "            ", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.efficient_3DCNN.spatial_transforms.SaltImage.randomize_parameters": [[511, 514], ["random.random", "random.randint"], "methods", ["None"], ["", "", "def", "randomize_parameters", "(", "self", ")", ":", "\n", "        ", "self", ".", "p", "=", "random", ".", "random", "(", ")", "\n", "self", ".", "ratio", "=", "random", ".", "randint", "(", "80", ",", "120", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.efficient_3DCNN.spatial_transforms.Dropout.__init__": [[518, 520], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "ratio", "=", "100", ")", ":", "\n", "        ", "self", ".", "ratio", "=", "ratio", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.efficient_3DCNN.spatial_transforms.Dropout.__call__": [[521, 538], ["isinstance", "numpy.asarray", "numpy.where.astype", "numpy.random.randint", "numpy.where", "PIL.Image.fromarray", "numpy.where.astype"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "is_PIL", "=", "isinstance", "(", "img", ",", "Image", ".", "Image", ")", "\n", "if", "is_PIL", ":", "\n", "            ", "img", "=", "np", ".", "asarray", "(", "img", ")", "\n", "\n", "", "if", "self", ".", "p", "<", "0.10", ":", "\n", "            ", "data_final", "=", "[", "]", "\n", "img", "=", "img", ".", "astype", "(", "np", ".", "float", ")", "\n", "img_shape", "=", "img", ".", "shape", "\n", "noise", "=", "np", ".", "random", ".", "randint", "(", "self", ".", "ratio", ",", "size", "=", "img_shape", ")", "\n", "img", "=", "np", ".", "where", "(", "noise", "==", "0", ",", "0", ",", "img", ")", "\n", "if", "is_PIL", ":", "\n", "                ", "return", "Image", ".", "fromarray", "(", "img", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "", "else", ":", "\n", "                ", "return", "img", "\n", "", "", "else", ":", "\n", "            ", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.efficient_3DCNN.spatial_transforms.Dropout.randomize_parameters": [[539, 542], ["random.random", "random.randint"], "methods", ["None"], ["", "", "def", "randomize_parameters", "(", "self", ")", ":", "\n", "        ", "self", ".", "p", "=", "random", ".", "random", "(", ")", "\n", "self", ".", "ratio", "=", "random", ".", "randint", "(", "30", ",", "50", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.efficient_3DCNN.spatial_transforms.MultiplyValues.__init__": [[546, 549], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "value", "=", "0.2", ",", "per_channel", "=", "False", ")", ":", "\n", "        ", "self", ".", "value", "=", "value", "\n", "self", ".", "per_channel", "=", "per_channel", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.efficient_3DCNN.spatial_transforms.MultiplyValues.__call__": [[550, 565], ["isinstance", "numpy.asarray.astype", "numpy.where", "numpy.where", "image.astype.astype.astype", "numpy.asarray", "PIL.Image.fromarray"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "is_PIL", "=", "isinstance", "(", "img", ",", "Image", ".", "Image", ")", "\n", "if", "is_PIL", ":", "\n", "            ", "img", "=", "np", ".", "asarray", "(", "img", ")", "\n", "\n", "", "image", "=", "img", ".", "astype", "(", "np", ".", "float64", ")", "\n", "image", "*=", "self", ".", "sample", "\n", "image", "=", "np", ".", "where", "(", "image", ">", "255", ",", "255", ",", "image", ")", "\n", "image", "=", "np", ".", "where", "(", "image", "<", "0", ",", "0", ",", "image", ")", "\n", "image", "=", "image", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "if", "is_PIL", ":", "\n", "            ", "return", "Image", ".", "fromarray", "(", "image", ")", "\n", "", "else", ":", "\n", "            ", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.efficient_3DCNN.spatial_transforms.MultiplyValues.randomize_parameters": [[566, 568], ["random.uniform"], "methods", ["None"], ["", "", "def", "randomize_parameters", "(", "self", ")", ":", "\n", "        ", "self", ".", "sample", "=", "random", ".", "uniform", "(", "1.0", "-", "self", ".", "value", ",", "1.0", "+", "self", ".", "value", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zwxu064_RANP.efficient_3DCNN.train.train_epoch": [[10, 89], ["print", "model.train", "AverageMeter", "AverageMeter", "AverageMeter", "AverageMeter", "AverageMeter", "len", "time.time", "enumerate", "epoch_logger.log", "opt.writer.add_scalar", "opt.writer.add_scalar", "opt.writer.add_scalar", "AverageMeter.update", "torch.autograd.Variable", "torch.autograd.Variable", "model", "criterion", "AverageMeter.update", "calculate_accuracy", "AverageMeter.update", "AverageMeter.update", "optimizer.zero_grad", "criterion.backward", "optimizer.step", "AverageMeter.update", "time.time", "batch_logger.log", "inputs.cuda.cuda", "targets.cuda.cuda", "criterion.item", "inputs.cuda.size", "prec1.item", "inputs.cuda.size", "prec5.item", "inputs.cuda.size", "print", "time.time", "time.time", "len"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.data.train", "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_NvNet.utils.Logger.log", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.AverageMeter.update", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.AverageMeter.update", "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_NvNet.utils.calculate_accuracy", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.AverageMeter.update", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.AverageMeter.update", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.AverageMeter.update", "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_NvNet.utils.Logger.log"], ["from", "ignite", ".", "contrib", ".", "handlers", "import", "ProgressBar", "\n", "from", "ignite", ".", "handlers", "import", "ModelCheckpoint", "\n", "from", "network", "import", "*", "\n", "from", "dataloader", "import", "*", "\n", "from", "prune", "import", "*", "\n", "from", "prune_utils", "import", "*", "\n", "from", "flops", "import", "*", "\n", "from", "snip", "import", "SNIP", "\n", "\n", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", "=", "'2'", "\n", "device", "=", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", "\n", "\n", "\n", "def", "parse_arguments", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "# Data options", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "type", "=", "str", ",", "default", "=", "'mnist'", ",", "help", "=", "'dataset to use'", ")", "\n", "# Model options", "\n", "parser", ".", "add_argument", "(", "'--network'", ",", "type", "=", "str", ",", "default", "=", "'lenet5'", ",", "help", "=", "'network architecture to use'", ")", "\n", "parser", ".", "add_argument", "(", "'--param_sparsity'", ",", "type", "=", "float", ",", "default", "=", "0.9", ",", "help", "=", "'level of param sparsity to achieve'", ")", "\n", "parser", ".", "add_argument", "(", "'--neuron_sparsity'", ",", "type", "=", "float", ",", "default", "=", "0.9", ",", "help", "=", "'level of neuron sparsity to achieve'", ")", "\n", "parser", ".", "add_argument", "(", "'--channel_sparsity'", ",", "type", "=", "float", ",", "default", "=", "0.9", ",", "help", "=", "'level of channel sparsity to achieve'", ")", "\n", "# Train options", "\n", "parser", ".", "add_argument", "(", "'--batch'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'number of examples per mini-batch'", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "type", "=", "int", ",", "default", "=", "250", ",", "help", "=", "'number of training epochs'", ")", "\n", "parser", ".", "add_argument", "(", "'--optimizer'", ",", "type", "=", "str", ",", "default", "=", "'momentum'", ",", "help", "=", "'optimizer of choice'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_decay_ratio'", ",", "type", "=", "float", ",", "default", "=", "0.1", ",", "help", "=", "'learning rate decay ratio'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_decay_step'", ",", "type", "=", "int", ",", "default", "=", "25e3", ",", "help", "=", "'learning rate decay step'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "1e-1", ",", "help", "=", "'initial learning rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--weight_decay'", ",", "type", "=", "float", ",", "default", "=", "5e-4", ",", "help", "=", "'weight decay ratio'", ")", "\n", "parser", ".", "add_argument", "(", "'--log_interval'", ",", "type", "=", "int", ",", "default", "=", "20", ",", "help", "=", "'log saving frequency'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed_list'", ",", "nargs", "=", "'+'", ",", "default", "=", "0", ",", "help", "=", "'seeds'", ")", "\n", "parser", ".", "add_argument", "(", "'--relative_dir'", ",", "type", "=", "str", ",", "default", "=", "'.'", ",", "help", "=", "'relative directory'", ")", "\n", "parser", ".", "add_argument", "(", "'--weight_init'", ",", "type", "=", "str", ",", "default", "=", "'xn'", ",", "help", "=", "'xn, xu, kn, ku, orthogonal'", ")", "\n", "parser", ".", "add_argument", "(", "'--checkpoint_dir'", ",", "type", "=", "str", ",", "default", "=", "'checkpoint'", ",", "help", "=", "'save model dir'", ")", "\n", "parser", ".", "add_argument", "(", "'--resume_epoch'", ",", "type", "=", "int", ",", "default", "=", "'0'", ",", "help", "=", "'resume model'", ")", "\n", "# Operations", "\n", "parser", ".", "add_argument", "(", "'--enable_flops'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "help", "=", "'enable flops'", ")", "\n", "parser", ".", "add_argument", "(", "'--enable_bias'", ",", "action", "=", "'store_true'", ",", "default", "=", "True", ",", "help", "=", "'enable bias'", ")", "\n", "parser", ".", "add_argument", "(", "'--enable_dump'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "help", "=", "'dump for MatLab'", ")", "\n", "parser", ".", "add_argument", "(", "'--enable_param_prune'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "help", "=", "'prune params'", ")", "\n", "parser", ".", "add_argument", "(", "'--enable_neuron_prune'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "help", "=", "'prune neurons'", ")", "\n", "parser", ".", "add_argument", "(", "'--enable_channel_prune'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "help", "=", "'prune channels'", ")", "\n", "parser", ".", "add_argument", "(", "'--enable_dump_features'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "help", "=", "'dump features'", ")", "\n", "# For channel prune options", "\n", "parser", ".", "add_argument", "(", "'--acc_mode'", ",", "type", "=", "str", ",", "default", "=", "'mean'", ",", "help", "=", "'accumulation for importance of a channel'", ")", "\n", "parser", ".", "add_argument", "(", "'--norm'", ",", "type", "=", "str", ",", "default", "=", "'max'", ",", "help", "=", "'normalization over grads'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "args", ".", "device", "=", "device", "\n", "args", ".", "enable_cuda", "=", "device", "==", "'cuda'", "\n", "args", ".", "n_class", "=", "10", "\n", "\n", "if", "isinstance", "(", "args", ".", "seed_list", ",", "numbers", ".", "Number", ")", ":", "\n", "      ", "args", ".", "seed_list", "=", "[", "args", ".", "seed_list", "]", "\n", "\n", "", "if", "args", ".", "enable_neuron_prune", ":", "\n", "      ", "args", ".", "log_dir_comment", "=", "'neuron_prune'", "\n", "", "elif", "args", ".", "enable_channel_prune", ":", "\n", "      ", "args", ".", "log_dir_comment", "=", "'channel_prune'", "\n", "", "else", ":", "\n", "      ", "args", ".", "log_dir_comment", "=", "'param_prune'", "\n", "\n", "", "return", "args", "\n", "\n", "\n", "", "def", "mnist_experiment", "(", "args", ")", ":", "\n", "  ", "network_name", "=", "args", ".", "network", ".", "lower", "(", ")", "\n", "if", "network_name", "==", "'lenet300'", ":", "\n", "    ", "net", "=", "LeNet_300_100", "(", "enable_bias", "=", "args", ".", "enable_bias", ")", "\n", "", "elif", "network_name", "==", "'lenet5'", ":", "\n", "    ", "net", "=", "LeNet_5", "(", "enable_bias", "=", "args", ".", "enable_bias", ")", "\n", "", "elif", "network_name", "==", "'lenet5_caffe'", ":", "\n", "    ", "net", "=", "LeNet_5_Caffe", "(", "enable_bias", "=", "args", ".", "enable_bias", ")", "\n", "", "else", ":", "\n", "    ", "assert", "False", "\n", "\n", "", "net", "=", "net", ".", "to", "(", "args", ".", "device", ")", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.efficient_3DCNN.dataset.get_training_set": [[3, 35], ["datasets.Kinetics", "datasets.Jester", "datasets.UCF101"], "function", ["None"], ["def", "get_training_set", "(", "opt", ",", "spatial_transform", ",", "temporal_transform", ",", "\n", "target_transform", ")", ":", "\n", "    ", "assert", "opt", ".", "dataset", "in", "[", "'kinetics'", ",", "'jester'", ",", "'ucf101'", "]", "\n", "\n", "if", "opt", ".", "dataset", "==", "'kinetics'", ":", "\n", "        ", "training_data", "=", "Kinetics", "(", "\n", "opt", ".", "video_path", ",", "\n", "opt", ".", "annotation_path", ",", "\n", "'training'", ",", "\n", "spatial_transform", "=", "spatial_transform", ",", "\n", "temporal_transform", "=", "temporal_transform", ",", "\n", "target_transform", "=", "target_transform", ",", "\n", "sample_duration", "=", "opt", ".", "sample_duration", ")", "\n", "", "elif", "opt", ".", "dataset", "==", "'jester'", ":", "\n", "        ", "training_data", "=", "Jester", "(", "\n", "opt", ".", "video_path", ",", "\n", "opt", ".", "annotation_path", ",", "\n", "'training'", ",", "\n", "spatial_transform", "=", "spatial_transform", ",", "\n", "temporal_transform", "=", "temporal_transform", ",", "\n", "target_transform", "=", "target_transform", ",", "\n", "sample_duration", "=", "opt", ".", "sample_duration", ")", "\n", "", "elif", "opt", ".", "dataset", "==", "'ucf101'", ":", "\n", "        ", "training_data", "=", "UCF101", "(", "\n", "opt", ".", "video_path", ",", "\n", "opt", ".", "annotation_path", ",", "\n", "'training'", ",", "\n", "spatial_transform", "=", "spatial_transform", ",", "\n", "temporal_transform", "=", "temporal_transform", ",", "\n", "target_transform", "=", "target_transform", ",", "\n", "sample_duration", "=", "opt", ".", "sample_duration", ")", "\n", "", "return", "training_data", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.efficient_3DCNN.dataset.get_validation_set": [[37, 72], ["datasets.Kinetics", "datasets.Jester", "datasets.UCF101"], "function", ["None"], ["", "def", "get_validation_set", "(", "opt", ",", "spatial_transform", ",", "temporal_transform", ",", "\n", "target_transform", ")", ":", "\n", "    ", "assert", "opt", ".", "dataset", "in", "[", "'kinetics'", ",", "'jester'", ",", "'ucf101'", "]", "\n", "\n", "if", "opt", ".", "dataset", "==", "'kinetics'", ":", "\n", "        ", "validation_data", "=", "Kinetics", "(", "\n", "opt", ".", "video_path", ",", "\n", "opt", ".", "annotation_path", ",", "\n", "'validation'", ",", "\n", "opt", ".", "n_val_samples", ",", "\n", "spatial_transform", ",", "\n", "temporal_transform", ",", "\n", "target_transform", ",", "\n", "sample_duration", "=", "opt", ".", "sample_duration", ")", "\n", "", "elif", "opt", ".", "dataset", "==", "'jester'", ":", "\n", "        ", "validation_data", "=", "Jester", "(", "\n", "opt", ".", "video_path", ",", "\n", "opt", ".", "annotation_path", ",", "\n", "'validation'", ",", "\n", "opt", ".", "n_val_samples", ",", "\n", "spatial_transform", ",", "\n", "temporal_transform", ",", "\n", "target_transform", ",", "\n", "sample_duration", "=", "opt", ".", "sample_duration", ")", "\n", "", "elif", "opt", ".", "dataset", "==", "'ucf101'", ":", "\n", "        ", "validation_data", "=", "UCF101", "(", "\n", "opt", ".", "video_path", ",", "\n", "opt", ".", "annotation_path", ",", "\n", "'validation'", ",", "\n", "opt", ".", "n_val_samples", ",", "\n", "spatial_transform", ",", "\n", "temporal_transform", ",", "\n", "target_transform", ",", "\n", "sample_duration", "=", "opt", ".", "sample_duration", ")", "\n", "", "return", "validation_data", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.efficient_3DCNN.dataset.get_test_set": [[74, 113], ["datasets.Kinetics", "datasets.Jester", "datasets.UCF101"], "function", ["None"], ["", "def", "get_test_set", "(", "opt", ",", "spatial_transform", ",", "temporal_transform", ",", "target_transform", ")", ":", "\n", "    ", "assert", "opt", ".", "dataset", "in", "[", "'kinetics'", ",", "'jester'", ",", "'ucf101'", "]", "\n", "assert", "opt", ".", "test_subset", "in", "[", "'val'", ",", "'test'", "]", "\n", "\n", "if", "opt", ".", "test_subset", "==", "'val'", ":", "\n", "        ", "subset", "=", "'validation'", "\n", "", "elif", "opt", ".", "test_subset", "==", "'test'", ":", "\n", "        ", "subset", "=", "'testing'", "\n", "", "if", "opt", ".", "dataset", "==", "'kinetics'", ":", "\n", "        ", "test_data", "=", "Kinetics", "(", "\n", "opt", ".", "video_path", ",", "\n", "opt", ".", "annotation_path", ",", "\n", "subset", ",", "\n", "0", ",", "\n", "spatial_transform", ",", "\n", "temporal_transform", ",", "\n", "target_transform", ",", "\n", "sample_duration", "=", "opt", ".", "sample_duration", ")", "\n", "", "elif", "opt", ".", "dataset", "==", "'jester'", ":", "\n", "        ", "test_data", "=", "Jester", "(", "\n", "opt", ".", "video_path", ",", "\n", "opt", ".", "annotation_path", ",", "\n", "subset", ",", "\n", "0", ",", "\n", "spatial_transform", ",", "\n", "temporal_transform", ",", "\n", "target_transform", ",", "\n", "sample_duration", "=", "opt", ".", "sample_duration", ")", "\n", "", "elif", "opt", ".", "dataset", "==", "'ucf101'", ":", "\n", "        ", "test_data", "=", "UCF101", "(", "\n", "opt", ".", "video_path", ",", "\n", "opt", ".", "annotation_path", ",", "\n", "subset", ",", "\n", "0", ",", "\n", "spatial_transform", ",", "\n", "temporal_transform", ",", "\n", "target_transform", ",", "\n", "sample_duration", "=", "opt", ".", "sample_duration", ")", "\n", "", "return", "test_data", "\n", "", ""]], "home.repos.pwc.inspect_result.zwxu064_RANP.efficient_3DCNN.test.calculate_video_results": [[7, 20], ["torch.stack", "torch.stack", "torch.mean", "torch.mean", "torch.topk", "torch.topk", "range", "sorted_scores.size", "video_results.append", "float", "int"], "function", ["None"], ["def", "calculate_video_results", "(", "output_buffer", ",", "video_id", ",", "test_results", ",", "class_names", ")", ":", "\n", "    ", "video_outputs", "=", "torch", ".", "stack", "(", "output_buffer", ")", "\n", "average_scores", "=", "torch", ".", "mean", "(", "video_outputs", ",", "dim", "=", "0", ")", "\n", "sorted_scores", ",", "locs", "=", "torch", ".", "topk", "(", "average_scores", ",", "k", "=", "10", ")", "\n", "\n", "video_results", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "sorted_scores", ".", "size", "(", "0", ")", ")", ":", "\n", "        ", "video_results", ".", "append", "(", "{", "\n", "'label'", ":", "class_names", "[", "int", "(", "locs", "[", "i", "]", ")", "]", ",", "\n", "'score'", ":", "float", "(", "sorted_scores", "[", "i", "]", ")", "\n", "}", ")", "\n", "\n", "", "test_results", "[", "'results'", "]", "[", "video_id", "]", "=", "video_results", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.efficient_3DCNN.test.test": [[22, 72], ["print", "model.eval", "aux.utils.AverageMeter", "aux.utils.AverageMeter", "time.time", "enumerate", "aux.utils.AverageMeter.update", "model", "range", "aux.utils.AverageMeter.update", "time.time", "print", "time.time", "torch.no_grad", "torch.no_grad", "torch.autograd.Variable", "torch.softmax", "F.softmax.size", "output_buffer.append", "time.time", "test.calculate_video_results", "outputs[].data.cpu", "len"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.AverageMeter.update", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.AverageMeter.update", "home.repos.pwc.inspect_result.zwxu064_RANP.efficient_3DCNN.test.calculate_video_results"], ["", "def", "test", "(", "data_loader", ",", "model", ",", "opt", ",", "class_names", ")", ":", "\n", "    ", "print", "(", "'test'", ")", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "batch_time", "=", "AverageMeter", "(", ")", "\n", "data_time", "=", "AverageMeter", "(", ")", "\n", "\n", "end_time", "=", "time", ".", "time", "(", ")", "\n", "output_buffer", "=", "[", "]", "\n", "previous_video_id", "=", "''", "\n", "test_results", "=", "{", "'results'", ":", "{", "}", "}", "\n", "for", "i", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "        ", "data_time_per", "=", "time", ".", "time", "(", ")", "-", "end_time", "\n", "data_time", ".", "update", "(", "data_time_per", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "inputs", "=", "Variable", "(", "inputs", ")", "\n", "", "outputs", "=", "model", "(", "inputs", ")", "\n", "\n", "if", "not", "opt", ".", "no_softmax_in_test", ":", "\n", "            ", "outputs", "=", "F", ".", "softmax", "(", "outputs", ",", "dim", "=", "1", ")", "\n", "\n", "", "for", "j", "in", "range", "(", "outputs", ".", "size", "(", "0", ")", ")", ":", "\n", "            ", "if", "not", "(", "i", "==", "0", "and", "j", "==", "0", ")", "and", "targets", "[", "j", "]", "!=", "previous_video_id", ":", "\n", "                ", "calculate_video_results", "(", "output_buffer", ",", "previous_video_id", ",", "\n", "test_results", ",", "class_names", ")", "\n", "output_buffer", "=", "[", "]", "\n", "", "output_buffer", ".", "append", "(", "outputs", "[", "j", "]", ".", "data", ".", "cpu", "(", ")", ")", "\n", "previous_video_id", "=", "targets", "[", "j", "]", "\n", "\n", "# if (i % 100) == 0:", "\n", "#     with open(", "\n", "#             os.path.join(opt.result_path, '{}.json'.format(", "\n", "#                 opt.test_subset)), 'w') as f:", "\n", "#         json.dump(test_results, f)", "\n", "\n", "", "batch_time_per", "=", "time", ".", "time", "(", ")", "-", "end_time", "\n", "batch_time", ".", "update", "(", "batch_time_per", ")", "\n", "end_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "print", "(", "'[{}/{}]\\t'", "\n", "'Time {:.3f} ({:.3f})\\t'", "\n", "'Data {:.3f} ({:.3f})\\t'", ".", "format", "(", "\n", "i", "+", "1", ",", "\n", "len", "(", "data_loader", ")", ",", "\n", "batch_time_per", ",", "\n", "batch_time", ".", "avg", ",", "\n", "data_time_per", ",", "\n", "data_time", ".", "avg", ")", ")", "\n", "# with open(", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.efficient_3DCNN.temporal_transforms.LoopPadding.__init__": [[7, 10], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ",", "downsample", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "self", ".", "downsample", "=", "downsample", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.efficient_3DCNN.temporal_transforms.LoopPadding.__call__": [[11, 24], ["len", "out.append", "len", "range"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "frame_indices", ")", ":", "\n", "        ", "vid_duration", "=", "len", "(", "frame_indices", ")", "\n", "clip_duration", "=", "self", ".", "size", "*", "self", ".", "downsample", "\n", "out", "=", "frame_indices", "\n", "\n", "for", "index", "in", "out", ":", "\n", "            ", "if", "len", "(", "out", ")", ">=", "clip_duration", ":", "\n", "                ", "break", "\n", "", "out", ".", "append", "(", "index", ")", "\n", "\n", "", "selected_frames", "=", "[", "out", "[", "i", "]", "for", "i", "in", "range", "(", "0", ",", "clip_duration", ",", "self", ".", "downsample", ")", "]", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.efficient_3DCNN.temporal_transforms.TemporalBeginCrop.__init__": [[36, 39], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ",", "downsample", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "self", ".", "downsample", "=", "downsample", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.efficient_3DCNN.temporal_transforms.TemporalBeginCrop.__call__": [[40, 54], ["len", "out.append", "len", "range"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "frame_indices", ")", ":", "\n", "        ", "vid_duration", "=", "len", "(", "frame_indices", ")", "\n", "clip_duration", "=", "self", ".", "size", "*", "self", ".", "downsample", "\n", "\n", "out", "=", "frame_indices", "[", ":", "clip_duration", "]", "\n", "\n", "for", "index", "in", "out", ":", "\n", "            ", "if", "len", "(", "out", ")", ">=", "clip_duration", ":", "\n", "                ", "break", "\n", "", "out", ".", "append", "(", "index", ")", "\n", "\n", "", "selected_frames", "=", "[", "out", "[", "i", "]", "for", "i", "in", "range", "(", "0", ",", "clip_duration", ",", "self", ".", "downsample", ")", "]", "\n", "\n", "return", "selected_frames", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.efficient_3DCNN.temporal_transforms.TemporalCenterCrop.__init__": [[66, 69], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ",", "downsample", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "self", ".", "downsample", "=", "downsample", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.efficient_3DCNN.temporal_transforms.TemporalCenterCrop.__call__": [[70, 94], ["len", "max", "min", "len", "out.append", "len", "range"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "frame_indices", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            frame_indices (list): frame indices to be cropped.\n        Returns:\n            list: Cropped frame indices.\n        \"\"\"", "\n", "vid_duration", "=", "len", "(", "frame_indices", ")", "\n", "clip_duration", "=", "self", ".", "size", "*", "self", ".", "downsample", "\n", "\n", "center_index", "=", "len", "(", "frame_indices", ")", "//", "2", "\n", "begin_index", "=", "max", "(", "0", ",", "center_index", "-", "(", "clip_duration", "//", "2", ")", ")", "\n", "end_index", "=", "min", "(", "begin_index", "+", "clip_duration", ",", "vid_duration", ")", "\n", "\n", "out", "=", "frame_indices", "[", "begin_index", ":", "end_index", "]", "\n", "\n", "for", "index", "in", "out", ":", "\n", "            ", "if", "len", "(", "out", ")", ">=", "clip_duration", ":", "\n", "                ", "break", "\n", "", "out", ".", "append", "(", "index", ")", "\n", "\n", "", "selected_frames", "=", "[", "out", "[", "i", "]", "for", "i", "in", "range", "(", "0", ",", "clip_duration", ",", "self", ".", "downsample", ")", "]", "\n", "\n", "return", "selected_frames", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.efficient_3DCNN.temporal_transforms.TemporalRandomCrop.__init__": [[106, 109], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ",", "downsample", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "self", ".", "downsample", "=", "downsample", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.efficient_3DCNN.temporal_transforms.TemporalRandomCrop.__call__": [[110, 135], ["len", "max", "random.randint", "min", "out.append", "len", "range"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "frame_indices", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            frame_indices (list): frame indices to be cropped.\n        Returns:\n            list: Cropped frame indices.\n        \"\"\"", "\n", "\n", "vid_duration", "=", "len", "(", "frame_indices", ")", "\n", "clip_duration", "=", "self", ".", "size", "*", "self", ".", "downsample", "\n", "\n", "rand_end", "=", "max", "(", "0", ",", "vid_duration", "-", "clip_duration", "-", "1", ")", "\n", "begin_index", "=", "random", ".", "randint", "(", "0", ",", "rand_end", ")", "\n", "end_index", "=", "min", "(", "begin_index", "+", "clip_duration", ",", "vid_duration", ")", "\n", "\n", "out", "=", "frame_indices", "[", "begin_index", ":", "end_index", "]", "\n", "\n", "for", "index", "in", "out", ":", "\n", "            ", "if", "len", "(", "out", ")", ">=", "clip_duration", ":", "\n", "                ", "break", "\n", "", "out", ".", "append", "(", "index", ")", "\n", "\n", "", "selected_frames", "=", "[", "out", "[", "i", "]", "for", "i", "in", "range", "(", "0", ",", "clip_duration", ",", "self", ".", "downsample", ")", "]", "\n", "\n", "return", "selected_frames", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zwxu064_RANP.efficient_3DCNN.model.generate_model": [[7, 190], ["models.c3d.get_model", "resnet.resnet200.parameters", "models.squeezenet.get_model", "print", "torch.load", "sum", "print", "get_fine_tuning_parameters", "print", "torch.load", "resnet.resnet200.load_state_dict", "get_fine_tuning_parameters", "models.shufflenet.get_model", "resnet.resnet200.load_state_dict", "resnet.resnet200.load_state_dict", "torch.nn.Sequential", "resnet.resnet200.module.classifier.cuda", "torch.nn.Sequential", "models.shufflenetv2.get_model", "torch.device", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.Sequential", "resnet.resnet200.module.classifier.cuda", "p.numel", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.Sequential", "torch.nn.Linear", "models.mobilenet.get_model", "torch.nn.Dropout", "torch.nn.Conv3d", "torch.nn.ReLU", "torch.nn.AvgPool3d", "hasattr", "torch.nn.Linear", "resnet.resnet200.module.fc.cuda", "resnet.resnet200.parameters", "torch.nn.Dropout", "torch.nn.Conv3d", "torch.nn.ReLU", "torch.nn.AvgPool3d", "models.mobilenetv2.get_model", "resnet.resnet200.module.replace_logits", "resnet.resnet200.replace_logits", "models.resnext.resnext50", "models.resnext.resnext101", "models.resnet.resnet10", "os.path.exists", "models.resnext.resnext152", "models.resnet.resnet18", "models.I3D.InceptionI3d", "models.I3D.InceptionI3d", "models.resnet.resnet34", "models.resnet.resnet50", "models.resnet.resnet101", "models.resnet.resnet152", "models.resnet.resnet200"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.unet.model.get_model", "home.repos.pwc.inspect_result.zwxu064_RANP.unet.model.get_model", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.data.load", "home.repos.pwc.inspect_result.zwxu064_RANP.models.squeezenet.get_fine_tuning_parameters", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.data.load", "home.repos.pwc.inspect_result.zwxu064_RANP.models.squeezenet.get_fine_tuning_parameters", "home.repos.pwc.inspect_result.zwxu064_RANP.unet.model.get_model", "home.repos.pwc.inspect_result.zwxu064_RANP.unet.model.get_model", "home.repos.pwc.inspect_result.zwxu064_RANP.unet.model.get_model", "home.repos.pwc.inspect_result.zwxu064_RANP.unet.model.get_model", "home.repos.pwc.inspect_result.zwxu064_RANP.models.I3D.InceptionI3d.replace_logits", "home.repos.pwc.inspect_result.zwxu064_RANP.models.I3D.InceptionI3d.replace_logits", "home.repos.pwc.inspect_result.zwxu064_RANP.models.resnext.resnext50", "home.repos.pwc.inspect_result.zwxu064_RANP.models.resnext.resnext101", "home.repos.pwc.inspect_result.zwxu064_RANP.models.resnet.resnet10", "home.repos.pwc.inspect_result.zwxu064_RANP.models.resnext.resnext152", "home.repos.pwc.inspect_result.zwxu064_RANP.models.resnet.resnet18", "home.repos.pwc.inspect_result.zwxu064_RANP.models.resnet.resnet34", "home.repos.pwc.inspect_result.zwxu064_RANP.models.resnet.resnet50", "home.repos.pwc.inspect_result.zwxu064_RANP.models.resnet.resnet101", "home.repos.pwc.inspect_result.zwxu064_RANP.models.resnet.resnet152", "home.repos.pwc.inspect_result.zwxu064_RANP.models.resnet.resnet200"], ["def", "generate_model", "(", "opt", ")", ":", "\n", "    ", "assert", "opt", ".", "model", "in", "[", "'c3d'", ",", "'squeezenet'", ",", "'mobilenet'", ",", "'resnext'", ",", "'resnet'", ",", "\n", "'shufflenet'", ",", "'mobilenetv2'", ",", "'shufflenetv2'", ",", "'i3d'", "]", "\n", "\n", "if", "opt", ".", "model", "==", "'c3d'", ":", "\n", "        ", "from", "models", ".", "c3d", "import", "get_fine_tuning_parameters", "\n", "model", "=", "c3d", ".", "get_model", "(", "\n", "num_classes", "=", "opt", ".", "n_class", ",", "\n", "sample_size", "=", "opt", ".", "sample_size", ",", "\n", "sample_duration", "=", "opt", ".", "sample_duration", ")", "\n", "", "elif", "opt", ".", "model", "==", "'squeezenet'", ":", "\n", "        ", "from", "models", ".", "squeezenet", "import", "get_fine_tuning_parameters", "\n", "model", "=", "squeezenet", ".", "get_model", "(", "\n", "version", "=", "opt", ".", "version", ",", "\n", "num_classes", "=", "opt", ".", "n_class", ",", "\n", "sample_size", "=", "opt", ".", "sample_size", ",", "\n", "sample_duration", "=", "opt", ".", "sample_duration", ")", "\n", "", "elif", "opt", ".", "model", "==", "'shufflenet'", ":", "\n", "        ", "from", "models", ".", "shufflenet", "import", "get_fine_tuning_parameters", "\n", "model", "=", "shufflenet", ".", "get_model", "(", "\n", "groups", "=", "opt", ".", "groups", ",", "\n", "width_mult", "=", "opt", ".", "width_mult", ",", "\n", "num_classes", "=", "opt", ".", "n_class", ")", "\n", "", "elif", "opt", ".", "model", "==", "'shufflenetv2'", ":", "\n", "        ", "from", "models", ".", "shufflenetv2", "import", "get_fine_tuning_parameters", "\n", "model", "=", "shufflenetv2", ".", "get_model", "(", "\n", "num_classes", "=", "opt", ".", "n_class", ",", "\n", "sample_size", "=", "opt", ".", "sample_size", ",", "\n", "width_mult", "=", "opt", ".", "width_mult", ")", "\n", "", "elif", "opt", ".", "model", "==", "'mobilenet'", ":", "\n", "        ", "from", "models", ".", "mobilenet", "import", "get_fine_tuning_parameters", "\n", "model", "=", "mobilenet", ".", "get_model", "(", "\n", "num_classes", "=", "opt", ".", "n_class", ",", "\n", "sample_size", "=", "opt", ".", "sample_size", ",", "\n", "width_mult", "=", "opt", ".", "width_mult", ")", "\n", "", "elif", "opt", ".", "model", "==", "'mobilenetv2'", ":", "\n", "        ", "from", ".", "models", ".", "mobilenetv2", "import", "get_fine_tuning_parameters", "\n", "model", "=", "mobilenetv2", ".", "get_model", "(", "\n", "num_classes", "=", "opt", ".", "n_class", ",", "\n", "sample_size", "=", "opt", ".", "sample_size", ",", "\n", "width_mult", "=", "opt", ".", "width_mult", ")", "\n", "", "elif", "opt", ".", "model", "==", "'resnext'", ":", "\n", "        ", "assert", "opt", ".", "model_depth", "in", "[", "50", ",", "101", ",", "152", "]", "\n", "from", "models", ".", "resnext", "import", "get_fine_tuning_parameters", "\n", "if", "opt", ".", "model_depth", "==", "50", ":", "\n", "            ", "model", "=", "resnext", ".", "resnext50", "(", "\n", "num_classes", "=", "opt", ".", "n_class", ",", "\n", "shortcut_type", "=", "opt", ".", "resnet_shortcut", ",", "\n", "cardinality", "=", "opt", ".", "resnext_cardinality", ",", "\n", "sample_size", "=", "opt", ".", "sample_size", ",", "\n", "sample_duration", "=", "opt", ".", "sample_duration", ")", "\n", "", "elif", "opt", ".", "model_depth", "==", "101", ":", "\n", "            ", "model", "=", "resnext", ".", "resnext101", "(", "\n", "num_classes", "=", "opt", ".", "n_class", ",", "\n", "shortcut_type", "=", "opt", ".", "resnet_shortcut", ",", "\n", "cardinality", "=", "opt", ".", "resnext_cardinality", ",", "\n", "sample_size", "=", "opt", ".", "sample_size", ",", "\n", "sample_duration", "=", "opt", ".", "sample_duration", ")", "\n", "", "elif", "opt", ".", "model_depth", "==", "152", ":", "\n", "            ", "model", "=", "resnext", ".", "resnext152", "(", "\n", "num_classes", "=", "opt", ".", "n_class", ",", "\n", "shortcut_type", "=", "opt", ".", "resnet_shortcut", ",", "\n", "cardinality", "=", "opt", ".", "resnext_cardinality", ",", "\n", "sample_size", "=", "opt", ".", "sample_size", ",", "\n", "sample_duration", "=", "opt", ".", "sample_duration", ")", "\n", "", "", "elif", "opt", ".", "model", "==", "'resnet'", ":", "\n", "        ", "assert", "opt", ".", "model_depth", "in", "[", "10", ",", "18", ",", "34", ",", "50", ",", "101", ",", "152", ",", "200", "]", "\n", "from", "models", ".", "resnet", "import", "get_fine_tuning_parameters", "\n", "if", "opt", ".", "model_depth", "==", "10", ":", "\n", "            ", "model", "=", "resnet", ".", "resnet10", "(", "\n", "num_classes", "=", "opt", ".", "n_class", ",", "\n", "shortcut_type", "=", "opt", ".", "resnet_shortcut", ",", "\n", "sample_size", "=", "opt", ".", "sample_size", ",", "\n", "sample_duration", "=", "opt", ".", "sample_duration", ")", "\n", "", "elif", "opt", ".", "model_depth", "==", "18", ":", "\n", "            ", "model", "=", "resnet", ".", "resnet18", "(", "\n", "num_classes", "=", "opt", ".", "n_class", ",", "\n", "shortcut_type", "=", "opt", ".", "resnet_shortcut", ",", "\n", "sample_size", "=", "opt", ".", "sample_size", ",", "\n", "sample_duration", "=", "opt", ".", "sample_duration", ")", "\n", "", "elif", "opt", ".", "model_depth", "==", "34", ":", "\n", "            ", "model", "=", "resnet", ".", "resnet34", "(", "\n", "num_classes", "=", "opt", ".", "n_class", ",", "\n", "shortcut_type", "=", "opt", ".", "resnet_shortcut", ",", "\n", "sample_size", "=", "opt", ".", "sample_size", ",", "\n", "sample_duration", "=", "opt", ".", "sample_duration", ")", "\n", "", "elif", "opt", ".", "model_depth", "==", "50", ":", "\n", "            ", "model", "=", "resnet", ".", "resnet50", "(", "\n", "num_classes", "=", "opt", ".", "n_class", ",", "\n", "shortcut_type", "=", "opt", ".", "resnet_shortcut", ",", "\n", "sample_size", "=", "opt", ".", "sample_size", ",", "\n", "sample_duration", "=", "opt", ".", "sample_duration", ")", "\n", "", "elif", "opt", ".", "model_depth", "==", "101", ":", "\n", "            ", "model", "=", "resnet", ".", "resnet101", "(", "\n", "num_classes", "=", "opt", ".", "n_class", ",", "\n", "shortcut_type", "=", "opt", ".", "resnet_shortcut", ",", "\n", "sample_size", "=", "opt", ".", "sample_size", ",", "\n", "sample_duration", "=", "opt", ".", "sample_duration", ")", "\n", "", "elif", "opt", ".", "model_depth", "==", "152", ":", "\n", "            ", "model", "=", "resnet", ".", "resnet152", "(", "\n", "num_classes", "=", "opt", ".", "n_class", ",", "\n", "shortcut_type", "=", "opt", ".", "resnet_shortcut", ",", "\n", "sample_size", "=", "opt", ".", "sample_size", ",", "\n", "sample_duration", "=", "opt", ".", "sample_duration", ")", "\n", "", "elif", "opt", ".", "model_depth", "==", "200", ":", "\n", "            ", "model", "=", "resnet", ".", "resnet200", "(", "\n", "num_classes", "=", "opt", ".", "n_class", ",", "\n", "shortcut_type", "=", "opt", ".", "resnet_shortcut", ",", "\n", "sample_size", "=", "opt", ".", "sample_size", ",", "\n", "sample_duration", "=", "opt", ".", "sample_duration", ")", "\n", "", "", "elif", "opt", ".", "model", "==", "'i3d'", ":", "\n", "        ", "from", ".", "models", ".", "I3D", "import", "get_fine_tuning_parameters", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "opt", ".", "pretrain_path", ")", ":", "\n", "            ", "model", "=", "I3D", ".", "InceptionI3d", "(", "400", ",", "in_channels", "=", "3", ")", "\n", "", "else", ":", "\n", "            ", "model", "=", "I3D", ".", "InceptionI3d", "(", "opt", ".", "n_class", ",", "in_channels", "=", "3", ")", "\n", "\n", "", "", "if", "not", "opt", ".", "no_cuda", ":", "\n", "# model = model.cuda()", "\n", "# model = nn.DataParallel(model, device_ids=None)  # Zhiwei", "\n", "\n", "        ", "if", "opt", ".", "pretrain_path", ":", "\n", "            ", "print", "(", "'loading pretrained model {}'", ".", "format", "(", "opt", ".", "pretrain_path", ")", ")", "\n", "pretrain", "=", "torch", ".", "load", "(", "opt", ".", "pretrain_path", ",", "map_location", "=", "torch", ".", "device", "(", "'cpu'", ")", ")", "\n", "\n", "if", "False", ":", "\n", "                ", "assert", "opt", ".", "arch", "==", "pretrain", "[", "'arch'", "]", "\n", "model", ".", "load_state_dict", "(", "pretrain", "[", "'state_dict'", "]", ")", "\n", "", "else", ":", "\n", "                ", "model", ".", "load_state_dict", "(", "pretrain", ")", "\n", "\n", "", "if", "opt", ".", "model", "in", "[", "'mobilenet'", ",", "'mobilenetv2'", ",", "'shufflenet'", ",", "'shufflenetv2'", "]", ":", "\n", "                ", "model", ".", "module", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Dropout", "(", "0.9", ")", ",", "\n", "nn", ".", "Linear", "(", "model", ".", "module", ".", "classifier", "[", "1", "]", ".", "in_features", ",", "opt", ".", "n_finetune_classes", ")", ")", "\n", "model", ".", "module", ".", "classifier", "=", "model", ".", "module", ".", "classifier", ".", "cuda", "(", ")", "\n", "", "elif", "opt", ".", "model", "==", "'squeezenet'", ":", "\n", "                ", "model", ".", "module", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Dropout", "(", "p", "=", "0.5", ")", ",", "\n", "nn", ".", "Conv3d", "(", "model", ".", "module", ".", "classifier", "[", "1", "]", ".", "in_channels", ",", "opt", ".", "n_finetune_classes", ",", "kernel_size", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "AvgPool3d", "(", "(", "1", ",", "4", ",", "4", ")", ",", "stride", "=", "1", ")", ")", "\n", "model", ".", "module", ".", "classifier", "=", "model", ".", "module", ".", "classifier", ".", "cuda", "(", ")", "\n", "", "elif", "opt", ".", "model", "==", "'i3d'", ":", "# Zhiwei", "\n", "                ", "if", "hasattr", "(", "model", ",", "'module'", ")", ":", "\n", "                    ", "model", ".", "module", ".", "replace_logits", "(", "opt", ".", "n_class", ")", "\n", "", "else", ":", "\n", "                    ", "model", ".", "replace_logits", "(", "opt", ".", "n_class", ")", "\n", "", "", "else", ":", "\n", "                ", "model", ".", "module", ".", "fc", "=", "nn", ".", "Linear", "(", "model", ".", "module", ".", "fc", ".", "in_features", ",", "opt", ".", "n_finetune_classes", ")", "\n", "model", ".", "module", ".", "fc", "=", "model", ".", "module", ".", "fc", ".", "cuda", "(", ")", "\n", "\n", "", "pytorch_total_params", "=", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", ")", "\n", "print", "(", "\"Total number of trainable parameters: \"", ",", "pytorch_total_params", ")", "\n", "\n", "parameters", "=", "get_fine_tuning_parameters", "(", "model", ",", "opt", ".", "ft_portion", ")", "\n", "return", "model", ",", "parameters", "\n", "", "", "else", ":", "\n", "        ", "if", "opt", ".", "pretrain_path", ":", "\n", "            ", "print", "(", "'loading pretrained model {}'", ".", "format", "(", "opt", ".", "pretrain_path", ")", ")", "\n", "pretrain", "=", "torch", ".", "load", "(", "opt", ".", "pretrain_path", ")", "\n", "assert", "opt", ".", "arch", "==", "pretrain", "[", "'arch'", "]", "\n", "model", ".", "load_state_dict", "(", "pretrain", "[", "'state_dict'", "]", ")", "\n", "\n", "if", "opt", ".", "model", "in", "[", "'mobilenet'", ",", "'mobilenetv2'", ",", "'shufflenet'", ",", "'shufflenetv2'", "]", ":", "\n", "                ", "model", ".", "module", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Dropout", "(", "0.9", ")", ",", "\n", "nn", ".", "Linear", "(", "model", ".", "module", ".", "classifier", "[", "1", "]", ".", "in_features", ",", "opt", ".", "n_finetune_classes", ")", "\n", ")", "\n", "", "elif", "opt", ".", "model", "==", "'squeezenet'", ":", "\n", "                ", "model", ".", "module", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Dropout", "(", "p", "=", "0.5", ")", ",", "\n", "nn", ".", "Conv3d", "(", "model", ".", "module", ".", "classifier", "[", "1", "]", ".", "in_channels", ",", "opt", ".", "n_finetune_classes", ",", "kernel_size", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "AvgPool3d", "(", "(", "1", ",", "4", ",", "4", ")", ",", "stride", "=", "1", ")", ")", "\n", "", "else", ":", "\n", "                ", "model", ".", "module", ".", "fc", "=", "nn", ".", "Linear", "(", "model", ".", "module", ".", "fc", ".", "in_features", ",", "opt", ".", "n_finetune_classes", ")", "\n", "\n", "", "parameters", "=", "get_fine_tuning_parameters", "(", "model", ",", "opt", ".", "ft_begin_index", ")", "\n", "return", "model", ",", "parameters", "\n", "\n", "", "", "return", "model", ",", "model", ".", "parameters", "(", ")", "", "", ""]], "home.repos.pwc.inspect_result.zwxu064_RANP.efficient_3DCNN.mean.get_mean": [[1, 13], ["None"], "function", ["None"], ["def", "get_mean", "(", "norm_value", "=", "255", ",", "dataset", "=", "'activitynet'", ")", ":", "\n", "    ", "assert", "dataset", "in", "[", "'activitynet'", ",", "'kinetics'", "]", "\n", "\n", "if", "dataset", "==", "'activitynet'", ":", "\n", "        ", "return", "[", "\n", "114.7748", "/", "norm_value", ",", "107.7354", "/", "norm_value", ",", "99.4750", "/", "norm_value", "\n", "]", "\n", "", "elif", "dataset", "==", "'kinetics'", ":", "\n", "# Kinetics (10 videos for each class)", "\n", "        ", "return", "[", "\n", "110.63666788", "/", "norm_value", ",", "103.16065604", "/", "norm_value", ",", "\n", "96.29023126", "/", "norm_value", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.efficient_3DCNN.mean.get_std": [[16, 21], ["None"], "function", ["None"], ["", "", "def", "get_std", "(", "norm_value", "=", "255", ")", ":", "\n", "# Kinetics (10 videos for each class)", "\n", "    ", "return", "[", "\n", "38.7568578", "/", "norm_value", ",", "37.88248729", "/", "norm_value", ",", "\n", "40.02898126", "/", "norm_value", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.efficient_3DCNN.target_transforms.Compose.__init__": [[7, 9], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "transforms", ")", ":", "\n", "        ", "self", ".", "transforms", "=", "transforms", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.efficient_3DCNN.target_transforms.Compose.__call__": [[10, 15], ["dst.append", "t"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "target", ")", ":", "\n", "        ", "dst", "=", "[", "]", "\n", "for", "t", "in", "self", ".", "transforms", ":", "\n", "            ", "dst", ".", "append", "(", "t", "(", "target", ")", ")", "\n", "", "return", "dst", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.efficient_3DCNN.target_transforms.ClassLabel.__call__": [[19, 21], ["None"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "target", ")", ":", "\n", "        ", "return", "target", "[", "'label'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.efficient_3DCNN.target_transforms.VideoID.__call__": [[25, 27], ["None"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "target", ")", ":", "\n", "        ", "return", "target", "[", "'video_id'", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zwxu064_RANP.efficient_3DCNN.utils.AverageMeter.__init__": [[11, 13], ["utils.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.AverageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.efficient_3DCNN.utils.AverageMeter.reset": [[14, 19], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.efficient_3DCNN.utils.AverageMeter.update": [[20, 25], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.efficient_3DCNN.utils.Logger.__init__": [[29, 35], ["open", "csv.writer", "utils.Logger.logger.writerow"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "path", ",", "header", ")", ":", "\n", "        ", "self", ".", "log_file", "=", "open", "(", "path", ",", "'w'", ")", "\n", "self", ".", "logger", "=", "csv", ".", "writer", "(", "self", ".", "log_file", ",", "delimiter", "=", "'\\t'", ")", "\n", "\n", "self", ".", "logger", ".", "writerow", "(", "header", ")", "\n", "self", ".", "header", "=", "header", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.efficient_3DCNN.utils.Logger.__del": [[36, 38], ["utils.Logger.log_file.close"], "methods", ["None"], ["", "def", "__del", "(", "self", ")", ":", "\n", "        ", "self", ".", "log_file", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.efficient_3DCNN.utils.Logger.log": [[39, 47], ["utils.Logger.logger.writerow", "utils.Logger.log_file.flush", "write_values.append"], "methods", ["None"], ["", "def", "log", "(", "self", ",", "values", ")", ":", "\n", "        ", "write_values", "=", "[", "]", "\n", "for", "col", "in", "self", ".", "header", ":", "\n", "            ", "assert", "col", "in", "values", "\n", "write_values", ".", "append", "(", "values", "[", "col", "]", ")", "\n", "\n", "", "self", ".", "logger", ".", "writerow", "(", "write_values", ")", "\n", "self", ".", "log_file", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.efficient_3DCNN.utils.load_value_file": [[49, 54], ["open", "float", "input_file.read().rstrip", "input_file.read"], "function", ["None"], ["", "", "def", "load_value_file", "(", "file_path", ")", ":", "\n", "    ", "with", "open", "(", "file_path", ",", "'r'", ")", "as", "input_file", ":", "\n", "        ", "value", "=", "float", "(", "input_file", ".", "read", "(", ")", ".", "rstrip", "(", "'\\n\\r'", ")", ")", "\n", "\n", "", "return", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.efficient_3DCNN.utils.calculate_accuracy": [[56, 70], ["max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].view().float().sum", "res.append", "correct[].view().float().sum.mul_", "target.view", "correct[].view().float", "correct[].view"], "function", ["None"], ["", "def", "calculate_accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"Computes the precision@k for the specified values of k\"\"\"", "\n", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "        ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.efficient_3DCNN.utils.save_checkpoint": [[72, 76], ["torch.save", "shutil.copyfile"], "function", ["None"], ["", "def", "save_checkpoint", "(", "state", ",", "is_best", ",", "opt", ")", ":", "\n", "    ", "torch", ".", "save", "(", "state", ",", "'%s/%s_checkpoint.pth'", "%", "(", "opt", ".", "result_path", ",", "opt", ".", "store_name", ")", ")", "\n", "if", "is_best", ":", "\n", "        ", "shutil", ".", "copyfile", "(", "'%s/%s_checkpoint.pth'", "%", "(", "opt", ".", "result_path", ",", "opt", ".", "store_name", ")", ",", "'%s/%s_best.pth'", "%", "(", "opt", ".", "result_path", ",", "opt", ".", "store_name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.efficient_3DCNN.utils.adjust_learning_rate": [[78, 83], ["sum", "numpy.array"], "function", ["None"], ["", "", "def", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ",", "opt", ")", ":", "\n", "    ", "\"\"\"Sets the learning rate to the initial LR decayed by 10 every 30 epochs\"\"\"", "\n", "lr_new", "=", "opt", ".", "lr", "*", "(", "0.1", "**", "(", "sum", "(", "epoch", ">=", "np", ".", "array", "(", "opt", ".", "lr_steps", ")", ")", ")", ")", "\n", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "lr_new", "\n", "#param_group['lr'] = opt.learning_rate", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.efficient_3DCNN.validation.val_epoch": [[10, 69], ["print", "model.eval", "AverageMeter", "AverageMeter", "AverageMeter", "AverageMeter", "AverageMeter", "time.time", "enumerate", "logger.log", "opt.writer.add_scalar", "opt.writer.add_scalar", "opt.writer.add_scalar", "AverageMeter.update", "model", "criterion", "calculate_accuracy", "AverageMeter.update", "AverageMeter.update", "AverageMeter.update", "AverageMeter.update", "time.time", "print", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "torch.no_grad", "torch.autograd.Variable", "torch.autograd.Variable", "prec1.item", "torch.autograd.Variable.size", "prec5.item", "torch.autograd.Variable.size", "criterion.item", "torch.autograd.Variable.size", "time.time", "time.time", "len"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_NvNet.utils.Logger.log", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.AverageMeter.update", "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_NvNet.utils.calculate_accuracy", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.AverageMeter.update", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.AverageMeter.update", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.AverageMeter.update", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.AverageMeter.update"], ["def", "val_epoch", "(", "epoch", ",", "data_loader", ",", "model", ",", "criterion", ",", "opt", ",", "logger", ")", ":", "\n", "    ", "print", "(", "'validation at epoch {}'", ".", "format", "(", "epoch", ")", ")", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "batch_time", "=", "AverageMeter", "(", ")", "\n", "data_time", "=", "AverageMeter", "(", ")", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "top1", "=", "AverageMeter", "(", ")", "\n", "top5", "=", "AverageMeter", "(", ")", "\n", "\n", "end_time", "=", "time", ".", "time", "(", ")", "\n", "for", "i", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "        ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end_time", ")", "\n", "\n", "if", "not", "opt", ".", "no_cuda", ":", "\n", "            ", "inputs", "=", "inputs", ".", "cuda", "(", ")", "\n", "targets", "=", "targets", ".", "cuda", "(", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "inputs", "=", "Variable", "(", "inputs", ")", "\n", "targets", "=", "Variable", "(", "targets", ")", "\n", "\n", "", "outputs", "=", "model", "(", "inputs", ")", "\n", "loss", "=", "criterion", "(", "outputs", ",", "targets", ")", "\n", "prec1", ",", "prec5", "=", "calculate_accuracy", "(", "outputs", ".", "data", ",", "targets", ".", "data", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "top1", ".", "update", "(", "prec1", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "prec5", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end_time", ")", "\n", "end_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "print", "(", "'Epoch: [{0}][{1}/{2}]\\t'", "\n", "'Time {batch_time.val:.5f} ({batch_time.avg:.5f})\\t'", "\n", "'Data {data_time.val:.5f} ({data_time.avg:.5f})\\t'", "\n", "'Loss {loss.val:.4f} ({loss.avg:.4f})\\t'", "\n", "'Prec@1 {top1.val:.5f} ({top1.avg:.5f})\\t'", "\n", "'Prec@5 {top5.val:.5f} ({top5.avg:.5f})'", ".", "format", "(", "\n", "epoch", ",", "\n", "i", "+", "1", ",", "\n", "len", "(", "data_loader", ")", ",", "\n", "batch_time", "=", "batch_time", ",", "\n", "data_time", "=", "data_time", ",", "\n", "loss", "=", "losses", ",", "\n", "top1", "=", "top1", ",", "\n", "top5", "=", "top5", ")", ")", "\n", "\n", "", "logger", ".", "log", "(", "{", "'epoch'", ":", "epoch", ",", "\n", "'loss'", ":", "losses", ".", "avg", ",", "\n", "'prec1'", ":", "top1", ".", "avg", ",", "\n", "'prec5'", ":", "top5", ".", "avg", "}", ")", "\n", "\n", "opt", ".", "writer", ".", "add_scalar", "(", "'Val/loss'", ",", "losses", ".", "avg", ",", "epoch", ")", "\n", "opt", ".", "writer", ".", "add_scalar", "(", "'Val/prec1'", ",", "top1", ".", "avg", ",", "epoch", ")", "\n", "opt", ".", "writer", ".", "add_scalar", "(", "'Val/prec5'", ",", "top5", ".", "avg", ",", "epoch", ")", "\n", "\n", "return", "losses", ".", "avg", ",", "top1", ".", "avg", "", "", ""]], "home.repos.pwc.inspect_result.zwxu064_RANP.utils.eval_ucf101.UCFclassification.__init__": [[8, 30], ["eval_ucf101.UCFclassification._import_ground_truth", "eval_ucf101.UCFclassification._import_prediction", "IOError", "IOError", "print", "len", "print", "len", "print"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.utils.eval_kinetics.KINETICSclassification._import_ground_truth", "home.repos.pwc.inspect_result.zwxu064_RANP.utils.eval_kinetics.KINETICSclassification._import_prediction"], ["    ", "def", "__init__", "(", "self", ",", "ground_truth_filename", "=", "None", ",", "prediction_filename", "=", "None", ",", "\n", "subset", "=", "'validation'", ",", "verbose", "=", "False", ",", "top_k", "=", "1", ")", ":", "\n", "        ", "if", "not", "ground_truth_filename", ":", "\n", "            ", "raise", "IOError", "(", "'Please input a valid ground truth file.'", ")", "\n", "", "if", "not", "prediction_filename", ":", "\n", "            ", "raise", "IOError", "(", "'Please input a valid prediction file.'", ")", "\n", "", "self", ".", "subset", "=", "subset", "\n", "self", ".", "verbose", "=", "verbose", "\n", "self", ".", "top_k", "=", "top_k", "\n", "self", ".", "ap", "=", "None", "\n", "self", ".", "hit_at_k", "=", "None", "\n", "# Import ground truth and predictions.", "\n", "self", ".", "ground_truth", ",", "self", ".", "activity_index", "=", "self", ".", "_import_ground_truth", "(", "\n", "ground_truth_filename", ")", "\n", "self", ".", "prediction", "=", "self", ".", "_import_prediction", "(", "prediction_filename", ")", "\n", "\n", "if", "self", ".", "verbose", ":", "\n", "            ", "print", "(", "'[INIT] Loaded annotations from {} subset.'", ".", "format", "(", "subset", ")", ")", "\n", "nr_gt", "=", "len", "(", "self", ".", "ground_truth", ")", "\n", "print", "(", "'\\tNumber of ground truth instances: {}'", ".", "format", "(", "nr_gt", ")", ")", "\n", "nr_pred", "=", "len", "(", "self", ".", "prediction", ")", "\n", "print", "(", "'\\tNumber of predictions: {}'", ".", "format", "(", "nr_pred", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.utils.eval_ucf101.UCFclassification._import_ground_truth": [[31, 69], ["data[].items", "pandas.DataFrame", "ground_truth.drop_duplicates().reset_index.drop_duplicates().reset_index.drop_duplicates().reset_index", "open", "json.load", "video_lst.append", "label_lst.append", "ground_truth.drop_duplicates().reset_index.drop_duplicates().reset_index.drop_duplicates"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.data.load"], ["", "", "def", "_import_ground_truth", "(", "self", ",", "ground_truth_filename", ")", ":", "\n", "        ", "\"\"\"Reads ground truth file, checks if it is well formatted, and returns\n           the ground truth instances and the activity classes.\n\n        Parameters\n        ----------\n        ground_truth_filename : str\n            Full path to the ground truth json file.\n\n        Outputs\n        -------\n        ground_truth : df\n            Data frame containing the ground truth instances.\n        activity_index : dict\n            Dictionary containing class index.\n        \"\"\"", "\n", "with", "open", "(", "ground_truth_filename", ",", "'r'", ")", "as", "fobj", ":", "\n", "            ", "data", "=", "json", ".", "load", "(", "fobj", ")", "\n", "# Checking format", "\n", "# if not all([field in data.keys() for field in self.gt_fields]):", "\n", "# raise IOError('Please input a valid ground truth file.')", "\n", "\n", "# Initialize data frame", "\n", "", "activity_index", ",", "cidx", "=", "{", "}", ",", "0", "\n", "video_lst", ",", "label_lst", "=", "[", "]", ",", "[", "]", "\n", "for", "videoid", ",", "v", "in", "data", "[", "'database'", "]", ".", "items", "(", ")", ":", "\n", "            ", "if", "self", ".", "subset", "!=", "v", "[", "'subset'", "]", ":", "\n", "                ", "continue", "\n", "", "this_label", "=", "v", "[", "'annotations'", "]", "[", "'label'", "]", "\n", "if", "this_label", "not", "in", "activity_index", ":", "\n", "                ", "activity_index", "[", "this_label", "]", "=", "cidx", "\n", "cidx", "+=", "1", "\n", "", "video_lst", ".", "append", "(", "videoid", ")", "\n", "label_lst", ".", "append", "(", "activity_index", "[", "this_label", "]", ")", "\n", "", "ground_truth", "=", "pd", ".", "DataFrame", "(", "{", "'video-id'", ":", "video_lst", ",", "\n", "'label'", ":", "label_lst", "}", ")", "\n", "ground_truth", "=", "ground_truth", ".", "drop_duplicates", "(", ")", ".", "reset_index", "(", "drop", "=", "True", ")", "\n", "return", "ground_truth", ",", "activity_index", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.utils.eval_ucf101.UCFclassification._import_prediction": [[70, 102], ["data[].items", "pandas.DataFrame", "open", "json.load", "video_lst.append", "label_lst.append", "score_lst.append"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.data.load"], ["", "def", "_import_prediction", "(", "self", ",", "prediction_filename", ")", ":", "\n", "        ", "\"\"\"Reads prediction file, checks if it is well formatted, and returns\n           the prediction instances.\n\n        Parameters\n        ----------\n        prediction_filename : str\n            Full path to the prediction json file.\n\n        Outputs\n        -------\n        prediction : df\n            Data frame containing the prediction instances.\n        \"\"\"", "\n", "with", "open", "(", "prediction_filename", ",", "'r'", ")", "as", "fobj", ":", "\n", "            ", "data", "=", "json", ".", "load", "(", "fobj", ")", "\n", "# Checking format...", "\n", "# if not all([field in data.keys() for field in self.pred_fields]):", "\n", "# raise IOError('Please input a valid prediction file.')", "\n", "\n", "# Initialize data frame", "\n", "", "video_lst", ",", "label_lst", ",", "score_lst", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "videoid", ",", "v", "in", "data", "[", "'results'", "]", ".", "items", "(", ")", ":", "\n", "            ", "for", "result", "in", "v", ":", "\n", "                ", "label", "=", "self", ".", "activity_index", "[", "result", "[", "'label'", "]", "]", "\n", "video_lst", ".", "append", "(", "videoid", ")", "\n", "label_lst", ".", "append", "(", "label", ")", "\n", "score_lst", ".", "append", "(", "result", "[", "'score'", "]", ")", "\n", "", "", "prediction", "=", "pd", ".", "DataFrame", "(", "{", "'video-id'", ":", "video_lst", ",", "\n", "'label'", ":", "label_lst", ",", "\n", "'score'", ":", "score_lst", "}", ")", "\n", "return", "prediction", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.utils.eval_ucf101.UCFclassification.evaluate": [[103, 116], ["eval_ucf101.compute_video_hit_at_k", "print", "print"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.utils.eval_kinetics.compute_video_hit_at_k"], ["", "def", "evaluate", "(", "self", ")", ":", "\n", "        ", "\"\"\"Evaluates a prediction file. For the detection task we measure the\n        interpolated mean average precision to measure the performance of a\n        method.\n        \"\"\"", "\n", "hit_at_k", "=", "compute_video_hit_at_k", "(", "self", ".", "ground_truth", ",", "\n", "self", ".", "prediction", ",", "top_k", "=", "self", ".", "top_k", ")", "\n", "if", "self", ".", "verbose", ":", "\n", "            ", "print", "(", "'[RESULTS] Performance on ActivityNet untrimmed video '", "\n", "'classification task.'", ")", "\n", "print", "(", "'\\tError@{}: {}'", ".", "format", "(", "self", ".", "top_k", ",", "1.0", "-", "hit_at_k", ")", ")", "\n", "#print '\\tAvg Hit@{}: {}'.format(self.top_k, avg_hit_at_k)", "\n", "", "self", ".", "hit_at_k", "=", "hit_at_k", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.utils.eval_ucf101.compute_video_hit_at_k": [[120, 156], ["numpy.unique", "numpy.zeros", "enumerate", "float", "prediction.loc[].reset_index", "this_pred.loc[].reset_index.loc[].reset_index", "this_pred[].tolist", "[].tolist", "numpy.mean", "np.zeros.mean", "pred_idx.any", "this_pred[].values.argsort"], "function", ["None"], ["", "", "def", "compute_video_hit_at_k", "(", "ground_truth", ",", "prediction", ",", "top_k", "=", "3", ")", ":", "\n", "    ", "\"\"\"Compute accuracy at k prediction between ground truth and\n    predictions data frames. This code is greatly inspired by evaluation\n    performed in Karpathy et al. CVPR14.\n\n    Parameters\n    ----------\n    ground_truth : df\n        Data frame containing the ground truth instances.\n        Required fields: ['video-id', 'label']\n    prediction : df\n        Data frame containing the prediction instances.\n        Required fields: ['video-id, 'label', 'score']\n\n    Outputs\n    -------\n    acc : float\n        Top k accuracy score.\n    \"\"\"", "\n", "video_ids", "=", "np", ".", "unique", "(", "ground_truth", "[", "'video-id'", "]", ".", "values", ")", "\n", "avg_hits_per_vid", "=", "np", ".", "zeros", "(", "video_ids", ".", "size", ")", "\n", "for", "i", ",", "vid", "in", "enumerate", "(", "video_ids", ")", ":", "\n", "        ", "pred_idx", "=", "prediction", "[", "'video-id'", "]", "==", "vid", "\n", "if", "not", "pred_idx", ".", "any", "(", ")", ":", "\n", "            ", "continue", "\n", "", "this_pred", "=", "prediction", ".", "loc", "[", "pred_idx", "]", ".", "reset_index", "(", "drop", "=", "True", ")", "\n", "# Get top K predictions sorted by decreasing score.", "\n", "sort_idx", "=", "this_pred", "[", "'score'", "]", ".", "values", ".", "argsort", "(", ")", "[", ":", ":", "-", "1", "]", "[", ":", "top_k", "]", "\n", "this_pred", "=", "this_pred", ".", "loc", "[", "sort_idx", "]", ".", "reset_index", "(", "drop", "=", "True", ")", "\n", "# Get labels and compare against ground truth.", "\n", "pred_label", "=", "this_pred", "[", "'label'", "]", ".", "tolist", "(", ")", "\n", "gt_idx", "=", "ground_truth", "[", "'video-id'", "]", "==", "vid", "\n", "gt_label", "=", "ground_truth", ".", "loc", "[", "gt_idx", "]", "[", "'label'", "]", ".", "tolist", "(", ")", "\n", "avg_hits_per_vid", "[", "i", "]", "=", "np", ".", "mean", "(", "[", "1", "if", "this_label", "in", "pred_label", "else", "0", "\n", "for", "this_label", "in", "gt_label", "]", ")", "\n", "", "return", "float", "(", "avg_hits_per_vid", ".", "mean", "(", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.zwxu064_RANP.utils.ucf101_json.convert_csv_to_dict": [[7, 29], ["pandas.read_csv", "range", "range", "pd.read_csv.ix[].split", "keys.append", "key_labels.append", "len", "slash_rows[].split"], "function", ["None"], ["def", "convert_csv_to_dict", "(", "csv_path", ",", "subset", ")", ":", "\n", "    ", "data", "=", "pd", ".", "read_csv", "(", "csv_path", ",", "delimiter", "=", "' '", ",", "header", "=", "None", ")", "\n", "keys", "=", "[", "]", "\n", "key_labels", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "data", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "row", "=", "data", ".", "ix", "[", "i", ",", ":", "]", "\n", "slash_rows", "=", "data", ".", "ix", "[", "i", ",", "0", "]", ".", "split", "(", "'/'", ")", "\n", "class_name", "=", "slash_rows", "[", "0", "]", "\n", "basename", "=", "slash_rows", "[", "1", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "\n", "keys", ".", "append", "(", "basename", ")", "\n", "key_labels", ".", "append", "(", "class_name", ")", "\n", "\n", "", "database", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "len", "(", "keys", ")", ")", ":", "\n", "        ", "key", "=", "keys", "[", "i", "]", "\n", "database", "[", "key", "]", "=", "{", "}", "\n", "database", "[", "key", "]", "[", "'subset'", "]", "=", "subset", "\n", "label", "=", "key_labels", "[", "i", "]", "\n", "database", "[", "key", "]", "[", "'annotations'", "]", "=", "{", "'label'", ":", "label", "}", "\n", "\n", "", "return", "database", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.utils.ucf101_json.load_labels": [[30, 36], ["pandas.read_csv", "range", "labels.append"], "function", ["None"], ["", "def", "load_labels", "(", "label_csv_path", ")", ":", "\n", "    ", "data", "=", "pd", ".", "read_csv", "(", "label_csv_path", ",", "delimiter", "=", "' '", ",", "header", "=", "None", ")", "\n", "labels", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "data", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "labels", ".", "append", "(", "data", ".", "ix", "[", "i", ",", "1", "]", ")", "\n", "", "return", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.utils.ucf101_json.convert_ucf101_csv_to_activitynet_json": [[37, 51], ["ucf101_json.load_labels", "ucf101_json.convert_csv_to_dict", "ucf101_json.convert_csv_to_dict", "dst_data[].update", "dst_data[].update", "open", "json.dump"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.utils.kinetics_json.load_labels", "home.repos.pwc.inspect_result.zwxu064_RANP.utils.kinetics_json.convert_csv_to_dict", "home.repos.pwc.inspect_result.zwxu064_RANP.utils.kinetics_json.convert_csv_to_dict", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.AverageMeter.update", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.AverageMeter.update"], ["", "def", "convert_ucf101_csv_to_activitynet_json", "(", "label_csv_path", ",", "train_csv_path", ",", "\n", "val_csv_path", ",", "dst_json_path", ")", ":", "\n", "    ", "labels", "=", "load_labels", "(", "label_csv_path", ")", "\n", "train_database", "=", "convert_csv_to_dict", "(", "train_csv_path", ",", "'training'", ")", "\n", "val_database", "=", "convert_csv_to_dict", "(", "val_csv_path", ",", "'validation'", ")", "\n", "\n", "dst_data", "=", "{", "}", "\n", "dst_data", "[", "'labels'", "]", "=", "labels", "\n", "dst_data", "[", "'database'", "]", "=", "{", "}", "\n", "dst_data", "[", "'database'", "]", ".", "update", "(", "train_database", ")", "\n", "dst_data", "[", "'database'", "]", ".", "update", "(", "val_database", ")", "\n", "\n", "with", "open", "(", "dst_json_path", ",", "'w'", ")", "as", "dst_file", ":", "\n", "        ", "json", ".", "dump", "(", "dst_data", ",", "dst_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.utils.n_frames_kinetics.class_process": [[6, 28], ["os.path.join", "os.listdir", "os.path.isdir", "os.path.join", "os.listdir", "image_indices.append", "len", "print", "image_indices.sort", "print", "open", "dst_file.write", "int", "os.path.join", "str"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.binvox_rw.write"], ["def", "class_process", "(", "dir_path", ",", "class_name", ")", ":", "\n", "  ", "class_path", "=", "os", ".", "path", ".", "join", "(", "dir_path", ",", "class_name", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "class_path", ")", ":", "\n", "    ", "return", "\n", "\n", "", "for", "file_name", "in", "os", ".", "listdir", "(", "class_path", ")", ":", "\n", "    ", "video_dir_path", "=", "os", ".", "path", ".", "join", "(", "class_path", ",", "file_name", ")", "\n", "image_indices", "=", "[", "]", "\n", "for", "image_file_name", "in", "os", ".", "listdir", "(", "video_dir_path", ")", ":", "\n", "      ", "if", "'image'", "not", "in", "image_file_name", ":", "\n", "        ", "continue", "\n", "", "image_indices", ".", "append", "(", "int", "(", "image_file_name", "[", "6", ":", "11", "]", ")", ")", "\n", "\n", "", "if", "len", "(", "image_indices", ")", "==", "0", ":", "\n", "      ", "print", "(", "'no image files'", ",", "video_dir_path", ")", "\n", "n_frames", "=", "0", "\n", "", "else", ":", "\n", "      ", "image_indices", ".", "sort", "(", "reverse", "=", "True", ")", "\n", "n_frames", "=", "image_indices", "[", "0", "]", "\n", "print", "(", "video_dir_path", ",", "n_frames", ")", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "video_dir_path", ",", "'n_frames'", ")", ",", "'w'", ")", "as", "dst_file", ":", "\n", "      ", "dst_file", ".", "write", "(", "str", "(", "n_frames", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.utils.eval_kinetics.KINETICSclassification.__init__": [[10, 43], ["eval_kinetics.KINETICSclassification._import_ground_truth", "eval_kinetics.KINETICSclassification._import_prediction", "IOError", "IOError", "get_blocked_videos", "list", "print", "len", "print", "len", "print"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.utils.eval_kinetics.KINETICSclassification._import_ground_truth", "home.repos.pwc.inspect_result.zwxu064_RANP.utils.eval_kinetics.KINETICSclassification._import_prediction"], ["def", "__init__", "(", "self", ",", "ground_truth_filename", "=", "None", ",", "prediction_filename", "=", "None", ",", "\n", "ground_truth_fields", "=", "GROUND_TRUTH_FIELDS", ",", "\n", "prediction_fields", "=", "PREDICTION_FIELDS", ",", "\n", "subset", "=", "'validation'", ",", "verbose", "=", "False", ",", "top_k", "=", "1", ",", "\n", "check_status", "=", "True", ")", ":", "\n", "        ", "if", "not", "ground_truth_filename", ":", "\n", "            ", "raise", "IOError", "(", "'Please input a valid ground truth file.'", ")", "\n", "", "if", "not", "prediction_filename", ":", "\n", "            ", "raise", "IOError", "(", "'Please input a valid prediction file.'", ")", "\n", "", "self", ".", "subset", "=", "subset", "\n", "self", ".", "verbose", "=", "verbose", "\n", "self", ".", "gt_fields", "=", "ground_truth_fields", "\n", "self", ".", "pred_fields", "=", "prediction_fields", "\n", "self", ".", "top_k", "=", "top_k", "\n", "self", ".", "ap", "=", "None", "\n", "self", ".", "hit_at_k", "=", "None", "\n", "self", ".", "check_status", "=", "check_status", "\n", "# Retrieve blocked videos from server.", "\n", "if", "self", ".", "check_status", ":", "\n", "            ", "self", ".", "blocked_videos", "=", "get_blocked_videos", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "blocked_videos", "=", "list", "(", ")", "\n", "# Import ground truth and predictions.", "\n", "", "self", ".", "ground_truth", ",", "self", ".", "activity_index", "=", "self", ".", "_import_ground_truth", "(", "\n", "ground_truth_filename", ")", "\n", "self", ".", "prediction", "=", "self", ".", "_import_prediction", "(", "prediction_filename", ")", "\n", "\n", "if", "self", ".", "verbose", ":", "\n", "            ", "print", "(", "'[INIT] Loaded annotations from {} subset.'", ".", "format", "(", "subset", ")", ")", "\n", "nr_gt", "=", "len", "(", "self", ".", "ground_truth", ")", "\n", "print", "(", "'\\tNumber of ground truth instances: {}'", ".", "format", "(", "nr_gt", ")", ")", "\n", "nr_pred", "=", "len", "(", "self", ".", "prediction", ")", "\n", "print", "(", "'\\tNumber of predictions: {}'", ".", "format", "(", "nr_pred", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.utils.eval_kinetics.KINETICSclassification._import_ground_truth": [[44, 84], ["[].items", "pandas.DataFrame", "ground_truth.drop_duplicates().reset_index.drop_duplicates().reset_index.drop_duplicates().reset_index", "open", "json.load", "video_lst.append", "label_lst.append", "ground_truth.drop_duplicates().reset_index.drop_duplicates().reset_index.drop_duplicates"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.data.load"], ["", "", "def", "_import_ground_truth", "(", "self", ",", "ground_truth_filename", ")", ":", "\n", "        ", "\"\"\"Reads ground truth file, checks if it is well formatted, and returns\n           the ground truth instances and the activity classes.\n\n        Parameters\n        ----------\n        ground_truth_filename : str\n            Full path to the ground truth json file.\n\n        Outputs\n        -------\n        ground_truth : df\n            Data frame containing the ground truth instances.\n        activity_index : dict\n            Dictionary containing class index.\n        \"\"\"", "\n", "with", "open", "(", "ground_truth_filename", ",", "'r'", ")", "as", "fobj", ":", "\n", "            ", "data", "=", "json", ".", "load", "(", "fobj", ")", "\n", "# Checking format", "\n", "# if not all([field in data.keys() for field in self.gt_fields]):", "\n", "# raise IOError('Please input a valid ground truth file.')", "\n", "\n", "# Initialize data frame", "\n", "", "activity_index", ",", "cidx", "=", "{", "}", ",", "0", "\n", "video_lst", ",", "label_lst", "=", "[", "]", ",", "[", "]", "\n", "for", "videoid", ",", "v", "in", "data", "[", "'database'", "]", "[", "self", ".", "subset", "]", ".", "items", "(", ")", ":", "\n", "            ", "if", "self", ".", "subset", "!=", "v", "[", "'subset'", "]", ":", "\n", "                ", "continue", "\n", "", "if", "videoid", "in", "self", ".", "blocked_videos", ":", "\n", "                ", "continue", "\n", "", "this_label", "=", "v", "[", "'annotations'", "]", "[", "'label'", "]", "\n", "if", "this_label", "not", "in", "activity_index", ":", "\n", "                ", "activity_index", "[", "this_label", "]", "=", "cidx", "\n", "cidx", "+=", "1", "\n", "", "video_lst", ".", "append", "(", "videoid", "[", ":", "-", "14", "]", ")", "\n", "label_lst", ".", "append", "(", "activity_index", "[", "this_label", "]", ")", "\n", "", "ground_truth", "=", "pd", ".", "DataFrame", "(", "{", "'video-id'", ":", "video_lst", ",", "\n", "'label'", ":", "label_lst", "}", ")", "\n", "ground_truth", "=", "ground_truth", ".", "drop_duplicates", "(", ")", ".", "reset_index", "(", "drop", "=", "True", ")", "\n", "return", "ground_truth", ",", "activity_index", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.utils.eval_kinetics.KINETICSclassification._import_prediction": [[85, 119], ["data[].items", "pandas.DataFrame", "open", "json.load", "video_lst.append", "label_lst.append", "score_lst.append"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.data.load"], ["", "def", "_import_prediction", "(", "self", ",", "prediction_filename", ")", ":", "\n", "        ", "\"\"\"Reads prediction file, checks if it is well formatted, and returns\n           the prediction instances.\n\n        Parameters\n        ----------\n        prediction_filename : str\n            Full path to the prediction json file.\n\n        Outputs\n        -------\n        prediction : df\n            Data frame containing the prediction instances.\n        \"\"\"", "\n", "with", "open", "(", "prediction_filename", ",", "'r'", ")", "as", "fobj", ":", "\n", "            ", "data", "=", "json", ".", "load", "(", "fobj", ")", "\n", "# Checking format...", "\n", "# if not all([field in data.keys() for field in self.pred_fields]):", "\n", "# raise IOError('Please input a valid prediction file.')", "\n", "\n", "# Initialize data frame", "\n", "", "video_lst", ",", "label_lst", ",", "score_lst", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "videoid", ",", "v", "in", "data", "[", "'results'", "]", ".", "items", "(", ")", ":", "\n", "            ", "if", "videoid", "in", "self", ".", "blocked_videos", ":", "\n", "                ", "continue", "\n", "", "for", "result", "in", "v", ":", "\n", "                ", "label", "=", "self", ".", "activity_index", "[", "result", "[", "'label'", "]", "]", "\n", "video_lst", ".", "append", "(", "videoid", ")", "\n", "label_lst", ".", "append", "(", "label", ")", "\n", "score_lst", ".", "append", "(", "result", "[", "'score'", "]", ")", "\n", "", "", "prediction", "=", "pd", ".", "DataFrame", "(", "{", "'video-id'", ":", "video_lst", ",", "\n", "'label'", ":", "label_lst", ",", "\n", "'score'", ":", "score_lst", "}", ")", "\n", "return", "prediction", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.utils.eval_kinetics.KINETICSclassification.evaluate": [[120, 137], ["eval_kinetics.compute_video_hit_at_k", "print", "print"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.utils.eval_kinetics.compute_video_hit_at_k"], ["", "def", "evaluate", "(", "self", ")", ":", "\n", "        ", "\"\"\"Evaluates a prediction file. For the detection task we measure the\n        interpolated mean average precision to measure the performance of a\n        method.\n        \"\"\"", "\n", "hit_at_k", "=", "compute_video_hit_at_k", "(", "self", ".", "ground_truth", ",", "\n", "self", ".", "prediction", ",", "top_k", "=", "self", ".", "top_k", ")", "\n", "# avg_hit_at_k = compute_video_hit_at_k(", "\n", "# self.ground_truth, self.prediction, top_k=self.top_k, avg=True)", "\n", "if", "self", ".", "verbose", ":", "\n", "            ", "print", "(", "'[RESULTS] Performance on ActivityNet untrimmed video '", "\n", "'classification task.'", ")", "\n", "# print '\\tMean Average Precision: {}'.format(ap.mean())", "\n", "print", "(", "'\\tError@{}: {}'", ".", "format", "(", "self", ".", "top_k", ",", "1.0", "-", "hit_at_k", ")", ")", "\n", "#print '\\tAvg Hit@{}: {}'.format(self.top_k, avg_hit_at_k)", "\n", "# self.ap = ap", "\n", "", "self", ".", "hit_at_k", "=", "hit_at_k", "\n", "# self.avg_hit_at_k = avg_hit_at_k", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.utils.eval_kinetics.compute_video_hit_at_k": [[143, 181], ["numpy.unique", "numpy.zeros", "enumerate", "float", "prediction.loc[].reset_index", "this_pred.loc[].reset_index.loc[].reset_index", "this_pred[].tolist", "[].tolist", "numpy.mean", "np.zeros.mean", "pred_idx.any", "numpy.ceil", "this_pred[].values.argsort"], "function", ["None"], ["", "", "def", "compute_video_hit_at_k", "(", "ground_truth", ",", "prediction", ",", "top_k", "=", "3", ",", "avg", "=", "False", ")", ":", "\n", "    ", "\"\"\"Compute accuracy at k prediction between ground truth and\n    predictions data frames. This code is greatly inspired by evaluation\n    performed in Karpathy et al. CVPR14.\n\n    Parameters\n    ----------\n    ground_truth : df\n        Data frame containing the ground truth instances.\n        Required fields: ['video-id', 'label']\n    prediction : df\n        Data frame containing the prediction instances.\n        Required fields: ['video-id, 'label', 'score']\n\n    Outputs\n    -------\n    acc : float\n        Top k accuracy score.\n    \"\"\"", "\n", "video_ids", "=", "np", ".", "unique", "(", "ground_truth", "[", "'video-id'", "]", ".", "values", ")", "\n", "avg_hits_per_vid", "=", "np", ".", "zeros", "(", "video_ids", ".", "size", ")", "\n", "for", "i", ",", "vid", "in", "enumerate", "(", "video_ids", ")", ":", "\n", "        ", "pred_idx", "=", "prediction", "[", "'video-id'", "]", "==", "vid", "\n", "if", "not", "pred_idx", ".", "any", "(", ")", ":", "\n", "            ", "continue", "\n", "", "this_pred", "=", "prediction", ".", "loc", "[", "pred_idx", "]", ".", "reset_index", "(", "drop", "=", "True", ")", "\n", "# Get top K predictions sorted by decreasing score.", "\n", "sort_idx", "=", "this_pred", "[", "'score'", "]", ".", "values", ".", "argsort", "(", ")", "[", ":", ":", "-", "1", "]", "[", ":", "top_k", "]", "\n", "this_pred", "=", "this_pred", ".", "loc", "[", "sort_idx", "]", ".", "reset_index", "(", "drop", "=", "True", ")", "\n", "# Get labels and compare against ground truth.", "\n", "pred_label", "=", "this_pred", "[", "'label'", "]", ".", "tolist", "(", ")", "\n", "gt_idx", "=", "ground_truth", "[", "'video-id'", "]", "==", "vid", "\n", "gt_label", "=", "ground_truth", ".", "loc", "[", "gt_idx", "]", "[", "'label'", "]", ".", "tolist", "(", ")", "\n", "avg_hits_per_vid", "[", "i", "]", "=", "np", ".", "mean", "(", "[", "1", "if", "this_label", "in", "pred_label", "else", "0", "\n", "for", "this_label", "in", "gt_label", "]", ")", "\n", "if", "not", "avg", ":", "\n", "            ", "avg_hits_per_vid", "[", "i", "]", "=", "np", ".", "ceil", "(", "avg_hits_per_vid", "[", "i", "]", ")", "\n", "", "", "return", "float", "(", "avg_hits_per_vid", ".", "mean", "(", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.zwxu064_RANP.utils.n_frames_ucf101_hmdb51.class_process": [[6, 28], ["os.path.join", "os.listdir", "os.path.isdir", "os.path.join", "os.listdir", "image_indices.append", "len", "print", "image_indices.sort", "print", "open", "dst_file.write", "int", "os.path.join", "str"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.binvox_rw.write"], ["def", "class_process", "(", "dir_path", ",", "class_name", ")", ":", "\n", "  ", "class_path", "=", "os", ".", "path", ".", "join", "(", "dir_path", ",", "class_name", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "class_path", ")", ":", "\n", "    ", "return", "\n", "\n", "", "for", "file_name", "in", "os", ".", "listdir", "(", "class_path", ")", ":", "\n", "    ", "video_dir_path", "=", "os", ".", "path", ".", "join", "(", "class_path", ",", "file_name", ")", "\n", "image_indices", "=", "[", "]", "\n", "for", "image_file_name", "in", "os", ".", "listdir", "(", "video_dir_path", ")", ":", "\n", "      ", "if", "'image'", "not", "in", "image_file_name", ":", "\n", "        ", "continue", "\n", "", "image_indices", ".", "append", "(", "int", "(", "image_file_name", "[", "6", ":", "11", "]", ")", ")", "\n", "\n", "", "if", "len", "(", "image_indices", ")", "==", "0", ":", "\n", "      ", "print", "(", "'no image files'", ",", "video_dir_path", ")", "\n", "n_frames", "=", "0", "\n", "", "else", ":", "\n", "      ", "image_indices", ".", "sort", "(", "reverse", "=", "True", ")", "\n", "n_frames", "=", "image_indices", "[", "0", "]", "\n", "print", "(", "video_dir_path", ",", "n_frames", ")", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "video_dir_path", ",", "'n_frames'", ")", ",", "'w'", ")", "as", "dst_file", ":", "\n", "      ", "dst_file", ".", "write", "(", "str", "(", "n_frames", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.utils.video_jpg_kinetics.class_process": [[6, 39], ["os.path.join", "os.path.join", "os.listdir", "os.path.isdir", "os.path.exists", "os.mkdir", "os.path.splitext", "os.path.join", "os.path.join", "print", "subprocess.call", "print", "os.path.exists", "os.mkdir", "print", "os.path.exists", "subprocess.call", "print", "os.mkdir", "os.path.join"], "function", ["None"], ["def", "class_process", "(", "dir_path", ",", "dst_dir_path", ",", "class_name", ")", ":", "\n", "  ", "class_path", "=", "os", ".", "path", ".", "join", "(", "dir_path", ",", "class_name", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "class_path", ")", ":", "\n", "    ", "return", "\n", "\n", "", "dst_class_path", "=", "os", ".", "path", ".", "join", "(", "dst_dir_path", ",", "class_name", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "dst_class_path", ")", ":", "\n", "    ", "os", ".", "mkdir", "(", "dst_class_path", ")", "\n", "\n", "", "for", "file_name", "in", "os", ".", "listdir", "(", "class_path", ")", ":", "\n", "    ", "if", "'.mp4'", "not", "in", "file_name", ":", "\n", "      ", "continue", "\n", "", "name", ",", "ext", "=", "os", ".", "path", ".", "splitext", "(", "file_name", ")", "\n", "dst_directory_path", "=", "os", ".", "path", ".", "join", "(", "dst_class_path", ",", "name", ")", "\n", "\n", "video_file_path", "=", "os", ".", "path", ".", "join", "(", "class_path", ",", "file_name", ")", "\n", "try", ":", "\n", "      ", "if", "os", ".", "path", ".", "exists", "(", "dst_directory_path", ")", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "dst_directory_path", ",", "'image_00001.jpg'", ")", ")", ":", "\n", "          ", "subprocess", ".", "call", "(", "'rm -r \\\"{}\\\"'", ".", "format", "(", "dst_directory_path", ")", ",", "shell", "=", "True", ")", "\n", "print", "(", "'remove {}'", ".", "format", "(", "dst_directory_path", ")", ")", "\n", "os", ".", "mkdir", "(", "dst_directory_path", ")", "\n", "", "else", ":", "\n", "          ", "continue", "\n", "", "", "else", ":", "\n", "        ", "os", ".", "mkdir", "(", "dst_directory_path", ")", "\n", "", "", "except", ":", "\n", "      ", "print", "(", "dst_directory_path", ")", "\n", "continue", "\n", "", "cmd", "=", "'ffmpeg -i \\\"{}\\\" -vf scale=-1:240 \\\"{}/image_%05d.jpg\\\"'", ".", "format", "(", "video_file_path", ",", "dst_directory_path", ")", "\n", "print", "(", "cmd", ")", "\n", "subprocess", ".", "call", "(", "cmd", ",", "shell", "=", "True", ")", "\n", "print", "(", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.utils.jester_json.convert_csv_to_dict": [[7, 28], ["pandas.read_csv", "range", "range", "str", "keys.append", "key_labels.append", "len"], "function", ["None"], ["def", "convert_csv_to_dict", "(", "csv_path", ",", "subset", ",", "labels", ")", ":", "\n", "    ", "data", "=", "pd", ".", "read_csv", "(", "csv_path", ",", "delimiter", "=", "' '", ",", "header", "=", "None", ")", "\n", "keys", "=", "[", "]", "\n", "key_labels", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "data", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "row", "=", "data", ".", "iloc", "[", "i", ",", ":", "]", "\n", "class_name", "=", "labels", "[", "row", "[", "1", "]", "-", "1", "]", "\n", "basename", "=", "str", "(", "row", "[", "0", "]", ")", "\n", "\n", "keys", ".", "append", "(", "basename", ")", "\n", "key_labels", ".", "append", "(", "class_name", ")", "\n", "\n", "", "database", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "len", "(", "keys", ")", ")", ":", "\n", "        ", "key", "=", "keys", "[", "i", "]", "\n", "database", "[", "key", "]", "=", "{", "}", "\n", "database", "[", "key", "]", "[", "'subset'", "]", "=", "subset", "\n", "label", "=", "key_labels", "[", "i", "]", "\n", "database", "[", "key", "]", "[", "'annotations'", "]", "=", "{", "'label'", ":", "label", "}", "\n", "\n", "", "return", "database", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.utils.jester_json.load_labels": [[29, 35], ["pandas.read_csv", "range", "labels.append"], "function", ["None"], ["", "def", "load_labels", "(", "label_csv_path", ")", ":", "\n", "    ", "data", "=", "pd", ".", "read_csv", "(", "label_csv_path", ",", "delimiter", "=", "' '", ",", "header", "=", "None", ")", "\n", "labels", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "data", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "labels", ".", "append", "(", "data", ".", "iloc", "[", "i", ",", "1", "]", ")", "\n", "", "return", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.utils.jester_json.convert_jester_csv_to_activitynet_json": [[36, 50], ["jester_json.load_labels", "jester_json.convert_csv_to_dict", "jester_json.convert_csv_to_dict", "dst_data[].update", "dst_data[].update", "open", "json.dump"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.utils.kinetics_json.load_labels", "home.repos.pwc.inspect_result.zwxu064_RANP.utils.kinetics_json.convert_csv_to_dict", "home.repos.pwc.inspect_result.zwxu064_RANP.utils.kinetics_json.convert_csv_to_dict", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.AverageMeter.update", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.AverageMeter.update"], ["", "def", "convert_jester_csv_to_activitynet_json", "(", "label_csv_path", ",", "train_csv_path", ",", "\n", "val_csv_path", ",", "dst_json_path", ")", ":", "\n", "    ", "labels", "=", "load_labels", "(", "label_csv_path", ")", "\n", "train_database", "=", "convert_csv_to_dict", "(", "train_csv_path", ",", "'training'", ",", "labels", ")", "\n", "val_database", "=", "convert_csv_to_dict", "(", "val_csv_path", ",", "'validation'", ",", "labels", ")", "\n", "\n", "dst_data", "=", "{", "}", "\n", "dst_data", "[", "'labels'", "]", "=", "labels", "\n", "dst_data", "[", "'database'", "]", "=", "{", "}", "\n", "dst_data", "[", "'database'", "]", ".", "update", "(", "train_database", ")", "\n", "dst_data", "[", "'database'", "]", ".", "update", "(", "val_database", ")", "\n", "\n", "with", "open", "(", "dst_json_path", ",", "'w'", ")", "as", "dst_file", ":", "\n", "        ", "json", ".", "dump", "(", "dst_data", ",", "dst_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.utils.kinetics_json.convert_csv_to_dict": [[8, 39], ["pandas.read_csv", "range", "range", "cv2.VideoCapture.release", "keys.append", "len", "os.path.join", "cv2.VideoCapture", "int", "cv2.VideoCapture.release", "key_labels.append", "cv2.VideoCapture.get"], "function", ["None"], ["def", "convert_csv_to_dict", "(", "csv_path", ",", "dataset_path", ",", "subset", ")", ":", "\n", "    ", "data", "=", "pd", ".", "read_csv", "(", "csv_path", ")", "\n", "keys", "=", "[", "]", "\n", "key_labels", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "data", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "row", "=", "data", ".", "iloc", "[", "i", ",", ":", "]", "\n", "basename", "=", "'%s_%s_%s.mp4'", "%", "(", "row", "[", "'youtube_id'", "]", ",", "\n", "'%06d'", "%", "row", "[", "'time_start'", "]", ",", "\n", "'%06d'", "%", "row", "[", "'time_end'", "]", ")", "\n", "keys", ".", "append", "(", "basename", ")", "\n", "if", "subset", "!=", "'testing'", ":", "\n", "            ", "key_labels", ".", "append", "(", "row", "[", "'label'", "]", ")", "\n", "\n", "", "", "database", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "len", "(", "keys", ")", ")", ":", "\n", "        ", "key", "=", "keys", "[", "i", "]", "\n", "database", "[", "key", "]", "=", "{", "}", "\n", "database", "[", "key", "]", "[", "'subset'", "]", "=", "subset", "\n", "if", "subset", "!=", "'testing'", ":", "\n", "            ", "label", "=", "key_labels", "[", "i", "]", "\n", "database", "[", "key", "]", "[", "'annotations'", "]", "=", "{", "'label'", ":", "label", "}", "\n", "", "else", ":", "\n", "            ", "database", "[", "key", "]", "[", "'annotations'", "]", "=", "{", "}", "\n", "# Add n_frames", "\n", "", "video_path", "=", "os", ".", "path", ".", "join", "(", "dataset_path", ",", "label", ",", "key", ")", "\n", "cap", "=", "cv2", ".", "VideoCapture", "(", "video_path", ")", "\n", "database", "[", "key", "]", "[", "'n_frames'", "]", "=", "int", "(", "cap", ".", "get", "(", "7", ")", ")", "# Returns the number of frames in the video", "\n", "cap", ".", "release", "(", ")", "\n", "\n", "", "cap", ".", "release", "(", ")", "\n", "return", "database", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.utils.kinetics_json.load_labels": [[40, 43], ["pandas.read_csv", "data[].unique().tolist", "data[].unique"], "function", ["None"], ["", "def", "load_labels", "(", "train_csv_path", ")", ":", "\n", "    ", "data", "=", "pd", ".", "read_csv", "(", "train_csv_path", ")", "\n", "return", "data", "[", "'label'", "]", ".", "unique", "(", ")", ".", "tolist", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.utils.kinetics_json.convert_kinetics_csv_to_activitynet_json": [[44, 55], ["kinetics_json.load_labels", "kinetics_json.convert_csv_to_dict", "kinetics_json.convert_csv_to_dict", "open", "json.dump"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.utils.kinetics_json.load_labels", "home.repos.pwc.inspect_result.zwxu064_RANP.utils.kinetics_json.convert_csv_to_dict", "home.repos.pwc.inspect_result.zwxu064_RANP.utils.kinetics_json.convert_csv_to_dict"], ["", "def", "convert_kinetics_csv_to_activitynet_json", "(", "train_csv_path", ",", "val_csv_path", ",", "test_csv_path", ",", "dataset_path", ",", "dst_json_path", ")", ":", "\n", "    ", "labels", "=", "load_labels", "(", "val_csv_path", ")", "\n", "val_database", "=", "convert_csv_to_dict", "(", "val_csv_path", ",", "dataset_path", ",", "'validation'", ")", "\n", "train_database", "=", "convert_csv_to_dict", "(", "train_csv_path", ",", "dataset_path", ",", "'training'", ")", "\n", "\n", "dst_data", "=", "{", "}", "\n", "dst_data", "[", "'labels'", "]", "=", "labels", "\n", "dst_data", "[", "'database'", "]", "=", "{", "\"training\"", ":", "train_database", ",", "\"validation\"", ":", "val_database", "}", "\n", "\n", "with", "open", "(", "dst_json_path", ",", "'w'", ")", "as", "dst_file", ":", "\n", "        ", "json", ".", "dump", "(", "dst_data", ",", "dst_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.utils.video_jpg_ucf101_hmdb51.class_process": [[6, 39], ["os.path.join", "os.path.join", "os.listdir", "os.path.isdir", "os.path.exists", "os.mkdir", "os.path.splitext", "os.path.join", "os.path.join", "print", "subprocess.call", "print", "os.path.exists", "os.mkdir", "print", "os.path.exists", "subprocess.call", "print", "os.mkdir", "os.path.join"], "function", ["None"], ["def", "class_process", "(", "dir_path", ",", "dst_dir_path", ",", "class_name", ")", ":", "\n", "  ", "class_path", "=", "os", ".", "path", ".", "join", "(", "dir_path", ",", "class_name", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "class_path", ")", ":", "\n", "    ", "return", "\n", "\n", "", "dst_class_path", "=", "os", ".", "path", ".", "join", "(", "dst_dir_path", ",", "class_name", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "dst_class_path", ")", ":", "\n", "    ", "os", ".", "mkdir", "(", "dst_class_path", ")", "\n", "\n", "", "for", "file_name", "in", "os", ".", "listdir", "(", "class_path", ")", ":", "\n", "    ", "if", "'.avi'", "not", "in", "file_name", ":", "\n", "      ", "continue", "\n", "", "name", ",", "ext", "=", "os", ".", "path", ".", "splitext", "(", "file_name", ")", "\n", "dst_directory_path", "=", "os", ".", "path", ".", "join", "(", "dst_class_path", ",", "name", ")", "\n", "\n", "video_file_path", "=", "os", ".", "path", ".", "join", "(", "class_path", ",", "file_name", ")", "\n", "try", ":", "\n", "      ", "if", "os", ".", "path", ".", "exists", "(", "dst_directory_path", ")", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "dst_directory_path", ",", "'image_00001.jpg'", ")", ")", ":", "\n", "          ", "subprocess", ".", "call", "(", "'rm -r \\\"{}\\\"'", ".", "format", "(", "dst_directory_path", ")", ",", "shell", "=", "True", ")", "\n", "print", "(", "'remove {}'", ".", "format", "(", "dst_directory_path", ")", ")", "\n", "os", ".", "mkdir", "(", "dst_directory_path", ")", "\n", "", "else", ":", "\n", "          ", "continue", "\n", "", "", "else", ":", "\n", "        ", "os", ".", "mkdir", "(", "dst_directory_path", ")", "\n", "", "", "except", ":", "\n", "      ", "print", "(", "dst_directory_path", ")", "\n", "continue", "\n", "", "cmd", "=", "'ffmpeg -i \\\"{}\\\" -vf scale=-1:240 \\\"{}/image_%05d.jpg\\\"'", ".", "format", "(", "video_file_path", ",", "dst_directory_path", ")", "\n", "print", "(", "cmd", ")", "\n", "subprocess", ".", "call", "(", "cmd", ",", "shell", "=", "True", ")", "\n", "print", "(", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.utils.n_frames_jester.class_process": [[6, 27], ["os.listdir", "os.path.isdir", "os.path.join", "os.listdir", "image_indices.append", "len", "print", "image_indices.sort", "len", "print", "open", "dst_file.write", "int", "os.path.join", "str"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.binvox_rw.write"], ["def", "class_process", "(", "dir_path", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "isdir", "(", "dir_path", ")", ":", "\n", "        ", "return", "\n", "\n", "", "for", "file_name", "in", "os", ".", "listdir", "(", "dir_path", ")", ":", "\n", "        ", "video_dir_path", "=", "os", ".", "path", ".", "join", "(", "dir_path", ",", "file_name", ")", "\n", "image_indices", "=", "[", "]", "\n", "for", "image_file_name", "in", "os", ".", "listdir", "(", "video_dir_path", ")", ":", "\n", "            ", "if", "'00'", "not", "in", "image_file_name", ":", "\n", "                ", "continue", "\n", "", "image_indices", ".", "append", "(", "int", "(", "image_file_name", "[", "0", ":", "4", "]", ")", ")", "\n", "\n", "", "if", "len", "(", "image_indices", ")", "==", "0", ":", "\n", "            ", "print", "(", "'no image files'", ",", "video_dir_path", ")", "\n", "n_frames", "=", "0", "\n", "", "else", ":", "\n", "            ", "image_indices", ".", "sort", "(", "reverse", "=", "True", ")", "\n", "n_frames", "=", "len", "(", "image_indices", ")", "\n", "print", "(", "video_dir_path", ",", "n_frames", ")", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "video_dir_path", ",", "'n_frames'", ")", ",", "'w'", ")", "as", "dst_file", ":", "\n", "            ", "dst_file", ".", "write", "(", "str", "(", "n_frames", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.utils.parser.AttrDict.__getattr__": [[16, 26], ["name.startswith", "AttributeError", "parser.AttrDict"], "methods", ["None"], ["    ", "def", "__getattr__", "(", "self", ",", "name", ")", ":", "\n", "        ", "if", "name", "in", "self", ".", "__dict__", ":", "\n", "            ", "return", "self", ".", "__dict__", "[", "name", "]", "\n", "", "elif", "name", "in", "self", ":", "\n", "            ", "return", "self", "[", "name", "]", "\n", "", "elif", "name", ".", "startswith", "(", "'__'", ")", ":", "\n", "            ", "raise", "AttributeError", "(", "name", ")", "\n", "", "else", ":", "\n", "            ", "self", "[", "name", "]", "=", "AttrDict", "(", ")", "\n", "return", "self", "[", "name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.utils.parser.AttrDict.__setattr__": [[27, 32], ["None"], "methods", ["None"], ["", "", "def", "__setattr__", "(", "self", ",", "name", ",", "value", ")", ":", "\n", "        ", "if", "name", "in", "self", ".", "__dict__", ":", "\n", "            ", "self", ".", "__dict__", "[", "name", "]", "=", "value", "\n", "", "else", ":", "\n", "            ", "self", "[", "name", "]", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.utils.parser.AttrDict.__str__": [[33, 35], ["yaml.dump", "parser.AttrDict.strip"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.utils.parser.AttrDict.strip"], ["", "", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "yaml", ".", "dump", "(", "self", ".", "strip", "(", ")", ",", "default_flow_style", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.utils.parser.AttrDict.merge": [[36, 46], ["parser.AttrDict.cast", "isinstance", "parser.AttrDict.cast", "copy.deepcopy", "isinstance"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.utils.parser.AttrDict.cast", "home.repos.pwc.inspect_result.zwxu064_RANP.utils.parser.AttrDict.cast"], ["", "def", "merge", "(", "self", ",", "other", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "other", ",", "AttrDict", ")", ":", "\n", "            ", "other", "=", "AttrDict", ".", "cast", "(", "other", ")", "\n", "\n", "", "for", "k", ",", "v", "in", "other", ".", "items", "(", ")", ":", "\n", "            ", "v", "=", "copy", ".", "deepcopy", "(", "v", ")", "\n", "if", "k", "not", "in", "self", "or", "not", "isinstance", "(", "v", ",", "dict", ")", ":", "\n", "                ", "self", "[", "k", "]", "=", "v", "\n", "continue", "\n", "", "AttrDict", ".", "__dict__", "[", "'merge'", "]", "(", "self", "[", "k", "]", ",", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.utils.parser.AttrDict.strip": [[47, 53], ["isinstance", "isinstance", "isinstance", "str", "str.items", "tuple"], "methods", ["None"], ["", "", "def", "strip", "(", "self", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "self", ",", "dict", ")", ":", "\n", "            ", "if", "isinstance", "(", "self", ",", "list", ")", "or", "isinstance", "(", "self", ",", "tuple", ")", ":", "\n", "                ", "self", "=", "str", "(", "tuple", "(", "self", ")", ")", "\n", "", "return", "self", "\n", "", "return", "{", "k", ":", "AttrDict", ".", "__dict__", "[", "'strip'", "]", "(", "v", ")", "for", "k", ",", "v", "in", "self", ".", "items", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.utils.parser.AttrDict.cast": [[61, 66], ["parser.AttrDict", "isinstance", "parser.AttrDict.cast", "d.items"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.utils.parser.AttrDict.cast"], ["", "@", "staticmethod", "\n", "def", "cast", "(", "d", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "d", ",", "dict", ")", ":", "\n", "            ", "return", "d", "\n", "", "return", "AttrDict", "(", "{", "k", ":", "AttrDict", ".", "cast", "(", "v", ")", "for", "k", ",", "v", "in", "d", ".", "items", "(", ")", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.utils.parser.Parser.__init__": [[141, 146], ["parser.Parser.add_cfg", "parser.Parser.add_cfg", "parser.setup"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.utils.parser.Parser.add_cfg", "home.repos.pwc.inspect_result.zwxu064_RANP.utils.parser.Parser.add_cfg", "home.repos.pwc.inspect_result.zwxu064_RANP.utils.parser.setup"], ["    ", "def", "__init__", "(", "self", ",", "cfg_name", "=", "''", ",", "log", "=", "''", ")", ":", "\n", "        ", "self", ".", "add_cfg", "(", "'settings'", ")", "\n", "if", "cfg_name", ":", "\n", "            ", "self", ".", "add_cfg", "(", "cfg_name", ")", "\n", "setup", "(", "self", ",", "log", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.utils.parser.Parser.add_args": [[147, 150], ["parser.Parser.merge", "vars"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.utils.parser.AttrDict.merge"], ["", "", "def", "add_args", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "merge", "(", "vars", "(", "args", ")", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.utils.parser.Parser.add_cfg": [[151, 168], ["os.path.isfile", "parser.Parser.merge", "os.path.join", "parser.load", "parser.Parser.add_args", "parser.Parser.save_cfg", "os.path.splitext", "os.path.basename"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.utils.parser.AttrDict.merge", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.data.load", "home.repos.pwc.inspect_result.zwxu064_RANP.utils.parser.Parser.add_args", "home.repos.pwc.inspect_result.zwxu064_RANP.utils.parser.Parser.save_cfg"], ["", "def", "add_cfg", "(", "self", ",", "cfg", ",", "args", "=", "None", ",", "update", "=", "False", ")", ":", "\n", "        ", "if", "os", ".", "path", ".", "isfile", "(", "cfg", ")", ":", "\n", "            ", "fname", "=", "cfg", "\n", "cfg", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "cfg", ")", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "fname", "=", "os", ".", "path", ".", "join", "(", "path", ",", "'../experiments'", ",", "cfg", "+", "'.yaml'", ")", "\n", "\n", "", "self", ".", "merge", "(", "load", "(", "fname", ")", ")", "\n", "self", "[", "'name'", "]", "=", "cfg", "\n", "\n", "if", "args", "is", "not", "None", ":", "\n", "            ", "self", ".", "add_args", "(", "args", ")", "\n", "\n", "", "if", "cfg", "and", "args", "and", "update", ":", "\n", "            ", "self", ".", "save_cfg", "(", "fname", ")", "\n", "\n", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.utils.parser.Parser.save_cfg": [[169, 172], ["open", "yaml.dump", "parser.Parser.strip"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.utils.parser.AttrDict.strip"], ["", "def", "save_cfg", "(", "self", ",", "fname", ")", ":", "\n", "        ", "with", "open", "(", "fname", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "yaml", ".", "dump", "(", "self", ".", "strip", "(", ")", ",", "f", ",", "default_flow_style", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.utils.parser.Parser.getdir": [[173, 179], ["os.path.join"], "methods", ["None"], ["", "", "def", "getdir", "(", "self", ")", ":", "\n", "        ", "if", "'name'", "not", "in", "self", ":", "\n", "            ", "self", "[", "'name'", "]", "=", "'testing'", "\n", "\n", "", "checkpoint_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "train_dir", ",", "self", ".", "name", ")", "\n", "return", "checkpoint_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.utils.parser.Parser.makedir": [[180, 189], ["parser.Parser.getdir", "os.path.join", "parser.Parser.save_cfg", "os.path.exists", "os.makedirs"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.utils.parser.Parser.getdir", "home.repos.pwc.inspect_result.zwxu064_RANP.utils.parser.Parser.save_cfg"], ["", "def", "makedir", "(", "self", ")", ":", "\n", "        ", "checkpoint_dir", "=", "self", ".", "getdir", "(", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "checkpoint_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "checkpoint_dir", ")", "\n", "\n", "", "fname", "=", "os", ".", "path", ".", "join", "(", "checkpoint_dir", ",", "'cfg.yaml'", ")", "\n", "self", ".", "save_cfg", "(", "fname", ")", "\n", "\n", "return", "checkpoint_dir", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zwxu064_RANP.utils.parser.parse": [[68, 81], ["parser.AttrDict", "isinstance", "isinstance", "parser.parse", "ast.literal_eval", "float.items", "float", "fractions.Fraction"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.utils.parser.parse"], ["", "", "def", "parse", "(", "d", ")", ":", "\n", "# parse string as tuple, list or fraction", "\n", "    ", "if", "not", "isinstance", "(", "d", ",", "dict", ")", ":", "\n", "        ", "if", "isinstance", "(", "d", ",", "str", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "d", "=", "literal_eval", "(", "d", ")", "\n", "", "except", ":", "\n", "                ", "try", ":", "\n", "                    ", "d", "=", "float", "(", "Fraction", "(", "d", ")", ")", "\n", "", "except", ":", "\n", "                    ", "pass", "\n", "", "", "", "return", "d", "\n", "", "return", "AttrDict", "(", "{", "k", ":", "parse", "(", "v", ")", "for", "k", ",", "v", "in", "d", ".", "items", "(", ")", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.utils.parser.load": [[82, 86], ["open", "parser.parse", "yaml.load"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.utils.parser.parse", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.data.load"], ["", "def", "load", "(", "fname", ")", ":", "\n", "    ", "with", "open", "(", "fname", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "ret", "=", "parse", "(", "yaml", ".", "load", "(", "f", ",", "Loader", "=", "yaml", ".", "FullLoader", ")", ")", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.utils.parser.setup": [[125, 139], ["os.path.join", "os.path.join", "logging.basicConfig", "logging.StreamHandler", "logging.StreamHandler.setLevel", "logging.StreamHandler.setFormatter", "logging.getLogger().addHandler", "os.path.exists", "os.makedirs", "logging.Formatter", "logging.getLogger"], "function", ["None"], ["", "def", "setup", "(", "args", ",", "log", ")", ":", "\n", "    ", "ldir", "=", "os", ".", "path", ".", "join", "(", "path", ",", "'../'", ",", "'logs'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "ldir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "ldir", ")", "\n", "\n", "", "lfile", "=", "args", ".", "name", "+", "'_'", "+", "log", "+", "'.txt'", "if", "log", "else", "args", ".", "name", "+", "'.txt'", "\n", "lfile", "=", "os", ".", "path", ".", "join", "(", "ldir", ",", "lfile", ")", "\n", "\n", "logging", ".", "basicConfig", "(", "level", "=", "logging", ".", "INFO", ",", "\n", "format", "=", "'%(asctime)s %(message)s'", ",", "filename", "=", "lfile", ")", "\n", "console", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "console", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "console", ".", "setFormatter", "(", "logging", ".", "Formatter", "(", "'%(asctime)s %(message)s'", ")", ")", "\n", "logging", ".", "getLogger", "(", "''", ")", ".", "addHandler", "(", "console", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.utils.readpfm.readPFM": [[6, 42], ["open", "open.readline().rstrip().decode", "re.match", "float", "numpy.fromfile", "numpy.reshape", "numpy.flipud", "open.readline().decode", "map", "Exception", "open.readline().rstrip().decode", "open.readline().rstrip", "Exception", "re.match.groups", "open.readline", "open.readline().rstrip", "open.readline", "open.readline"], "function", ["None"], ["def", "readPFM", "(", "file", ")", ":", "\n", "    ", "file", "=", "open", "(", "file", ",", "'rb'", ")", "\n", "\n", "color", "=", "None", "\n", "width", "=", "None", "\n", "height", "=", "None", "\n", "scale", "=", "None", "\n", "endian", "=", "None", "\n", "\n", "header", "=", "file", ".", "readline", "(", ")", ".", "rstrip", "(", ")", ".", "decode", "(", "'utf-8'", ")", "\n", "if", "header", "==", "'PF'", ":", "\n", "        ", "color", "=", "True", "\n", "", "elif", "header", "==", "'Pf'", ":", "\n", "        ", "color", "=", "False", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "'Not a PFM file.'", ")", "\n", "\n", "", "dim_match", "=", "re", ".", "match", "(", "r'^(\\d+)\\s(\\d+)\\s$'", ",", "file", ".", "readline", "(", ")", ".", "decode", "(", "'utf-8'", ")", ")", "\n", "if", "dim_match", ":", "\n", "        ", "width", ",", "height", "=", "map", "(", "int", ",", "dim_match", ".", "groups", "(", ")", ")", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "'Malformed PFM header.'", ")", "\n", "\n", "", "scale", "=", "float", "(", "file", ".", "readline", "(", ")", ".", "rstrip", "(", ")", ".", "decode", "(", "'utf-8'", ")", ")", "\n", "if", "scale", "<", "0", ":", "# little-endian", "\n", "        ", "endian", "=", "'<'", "\n", "scale", "=", "-", "scale", "\n", "", "else", ":", "\n", "        ", "endian", "=", "'>'", "# big-endian", "\n", "\n", "", "data", "=", "np", ".", "fromfile", "(", "file", ",", "endian", "+", "'f'", ")", "\n", "shape", "=", "(", "height", ",", "width", ",", "3", ")", "if", "color", "else", "(", "height", ",", "width", ")", "\n", "\n", "data", "=", "np", ".", "reshape", "(", "data", ",", "shape", ")", "\n", "data", "=", "np", ".", "flipud", "(", "data", ")", "\n", "return", "data", ",", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.utils.preprocess.Lighting.__init__": [[92, 96], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "alphastd", ",", "eigval", ",", "eigvec", ")", ":", "\n", "        ", "self", ".", "alphastd", "=", "alphastd", "\n", "self", ".", "eigval", "=", "eigval", "\n", "self", ".", "eigvec", "=", "eigvec", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.utils.preprocess.Lighting.__call__": [[97, 108], ["img.new().resize_().normal_", "preprocess.Lighting.eigvec.type_as().clone().mul().mul().sum().squeeze", "img.add", "preprocess.Lighting.view().expand_as", "img.new().resize_", "preprocess.Lighting.eigvec.type_as().clone().mul().mul().sum", "preprocess.Lighting.view", "img.new", "preprocess.Lighting.eigvec.type_as().clone().mul().mul", "preprocess.Lighting.eigval.view().expand", "preprocess.Lighting.eigvec.type_as().clone().mul", "img.new().resize_().normal_.view().expand", "preprocess.Lighting.eigval.view", "preprocess.Lighting.eigvec.type_as().clone", "img.new().resize_().normal_.view", "preprocess.Lighting.eigvec.type_as"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.binvox_rw.Voxels.clone"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "if", "self", ".", "alphastd", "==", "0", ":", "\n", "            ", "return", "img", "\n", "\n", "", "alpha", "=", "img", ".", "new", "(", ")", ".", "resize_", "(", "3", ")", ".", "normal_", "(", "0", ",", "self", ".", "alphastd", ")", "\n", "rgb", "=", "self", ".", "eigvec", ".", "type_as", "(", "img", ")", ".", "clone", "(", ")", ".", "mul", "(", "alpha", ".", "view", "(", "1", ",", "3", ")", ".", "expand", "(", "3", ",", "3", ")", ")", ".", "mul", "(", "self", ".", "eigval", ".", "view", "(", "1", ",", "3", ")", ".", "expand", "(", "3", ",", "3", ")", ")", ".", "sum", "(", "1", ")", ".", "squeeze", "(", ")", "\n", "\n", "return", "img", ".", "add", "(", "rgb", ".", "view", "(", "3", ",", "1", ",", "1", ")", ".", "expand_as", "(", "img", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.utils.preprocess.Grayscale.__call__": [[112, 118], ["img.clone", "gs[].mul_().add_().add_", "gs[].copy_", "gs[].copy_", "gs[].mul_().add_", "gs[].mul_"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.binvox_rw.Voxels.clone"], ["    ", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "gs", "=", "img", ".", "clone", "(", ")", "\n", "gs", "[", "0", "]", ".", "mul_", "(", "0.299", ")", ".", "add_", "(", "0.587", ",", "gs", "[", "1", "]", ")", ".", "add_", "(", "0.114", ",", "gs", "[", "2", "]", ")", "\n", "gs", "[", "1", "]", ".", "copy_", "(", "gs", "[", "0", "]", ")", "\n", "gs", "[", "2", "]", ".", "copy_", "(", "gs", "[", "0", "]", ")", "\n", "return", "gs", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.utils.preprocess.Saturation.__init__": [[122, 124], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "var", ")", ":", "\n", "        ", "self", ".", "var", "=", "var", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.utils.preprocess.Saturation.__call__": [[125, 129], ["random.uniform", "img.lerp", "preprocess.Grayscale"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "gs", "=", "Grayscale", "(", ")", "(", "img", ")", "\n", "alpha", "=", "random", ".", "uniform", "(", "0", ",", "self", ".", "var", ")", "\n", "return", "img", ".", "lerp", "(", "gs", ",", "alpha", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.utils.preprocess.Brightness.__init__": [[133, 135], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "var", ")", ":", "\n", "        ", "self", ".", "var", "=", "var", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.utils.preprocess.Brightness.__call__": [[136, 140], ["img.new().resize_as_().zero_", "random.uniform", "img.lerp", "img.new().resize_as_", "img.new"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "gs", "=", "img", ".", "new", "(", ")", ".", "resize_as_", "(", "img", ")", ".", "zero_", "(", ")", "\n", "alpha", "=", "random", ".", "uniform", "(", "0", ",", "self", ".", "var", ")", "\n", "return", "img", ".", "lerp", "(", "gs", ",", "alpha", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.utils.preprocess.Contrast.__init__": [[144, 146], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "var", ")", ":", "\n", "        ", "self", ".", "var", "=", "var", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.utils.preprocess.Contrast.__call__": [[147, 152], ["gs.fill_", "random.uniform", "img.lerp", "preprocess.Grayscale", "gs.mean"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "gs", "=", "Grayscale", "(", ")", "(", "img", ")", "\n", "gs", ".", "fill_", "(", "gs", ".", "mean", "(", ")", ")", "\n", "alpha", "=", "random", ".", "uniform", "(", "0", ",", "self", ".", "var", ")", "\n", "return", "img", ".", "lerp", "(", "gs", ",", "alpha", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.utils.preprocess.RandomOrder.__init__": [[158, 160], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "transforms", ")", ":", "\n", "        ", "self", ".", "transforms", "=", "transforms", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.utils.preprocess.RandomOrder.__call__": [[161, 168], ["torch.randperm", "len"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "if", "self", ".", "transforms", "is", "None", ":", "\n", "            ", "return", "img", "\n", "", "order", "=", "torch", ".", "randperm", "(", "len", "(", "self", ".", "transforms", ")", ")", "\n", "for", "i", "in", "order", ":", "\n", "            ", "img", "=", "self", ".", "transforms", "[", "i", "]", "(", "img", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.utils.preprocess.ColorJitter.__init__": [[172, 180], ["preprocess.ColorJitter.transforms.append", "preprocess.ColorJitter.transforms.append", "preprocess.ColorJitter.transforms.append", "preprocess.Brightness", "preprocess.Contrast", "preprocess.Saturation"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "brightness", "=", "0.4", ",", "contrast", "=", "0.4", ",", "saturation", "=", "0.4", ")", ":", "\n", "        ", "self", ".", "transforms", "=", "[", "]", "\n", "if", "brightness", "!=", "0", ":", "\n", "            ", "self", ".", "transforms", ".", "append", "(", "Brightness", "(", "brightness", ")", ")", "\n", "", "if", "contrast", "!=", "0", ":", "\n", "            ", "self", ".", "transforms", ".", "append", "(", "Contrast", "(", "contrast", ")", ")", "\n", "", "if", "saturation", "!=", "0", ":", "\n", "            ", "self", ".", "transforms", ".", "append", "(", "Saturation", "(", "saturation", ")", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.zwxu064_RANP.utils.preprocess.scale_crop": [[21, 30], ["torchvision.Compose", "torchvision.ToTensor", "torchvision.Normalize"], "function", ["None"], ["def", "scale_crop", "(", "input_size", ",", "scale_size", "=", "None", ",", "normalize", "=", "__imagenet_stats", ")", ":", "\n", "    ", "t_list", "=", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "**", "normalize", ")", ",", "\n", "]", "\n", "#if scale_size != input_size:", "\n", "#t_list = [transforms.Scale((960,540))] + t_list", "\n", "\n", "return", "transforms", ".", "Compose", "(", "t_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.utils.preprocess.scale_random_crop": [[32, 42], ["torchvision.Compose", "torchvision.RandomCrop", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.Scale"], "function", ["None"], ["", "def", "scale_random_crop", "(", "input_size", ",", "scale_size", "=", "None", ",", "normalize", "=", "__imagenet_stats", ")", ":", "\n", "    ", "t_list", "=", "[", "\n", "transforms", ".", "RandomCrop", "(", "input_size", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "**", "normalize", ")", ",", "\n", "]", "\n", "if", "scale_size", "!=", "input_size", ":", "\n", "        ", "t_list", "=", "[", "transforms", ".", "Scale", "(", "scale_size", ")", "]", "+", "t_list", "\n", "\n", "", "transforms", ".", "Compose", "(", "t_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.utils.preprocess.pad_random_crop": [[44, 51], ["int", "torchvision.Compose", "torchvision.RandomCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.Normalize"], "function", ["None"], ["", "def", "pad_random_crop", "(", "input_size", ",", "scale_size", "=", "None", ",", "normalize", "=", "__imagenet_stats", ")", ":", "\n", "    ", "padding", "=", "int", "(", "(", "scale_size", "-", "input_size", ")", "/", "2", ")", "\n", "return", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomCrop", "(", "input_size", ",", "padding", "=", "padding", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "**", "normalize", ")", ",", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.utils.preprocess.inception_preproccess": [[54, 60], ["torchvision.Compose", "torchvision.RandomSizedCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.Normalize"], "function", ["None"], ["", "def", "inception_preproccess", "(", "input_size", ",", "normalize", "=", "__imagenet_stats", ")", ":", "\n", "    ", "return", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomSizedCrop", "(", "input_size", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "**", "normalize", ")", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.utils.preprocess.inception_color_preproccess": [[61, 73], ["torchvision.Compose", "torchvision.ToTensor", "preprocess.ColorJitter", "preprocess.Lighting", "torchvision.Normalize"], "function", ["None"], ["", "def", "inception_color_preproccess", "(", "input_size", ",", "normalize", "=", "__imagenet_stats", ")", ":", "\n", "    ", "return", "transforms", ".", "Compose", "(", "[", "\n", "#transforms.RandomSizedCrop(input_size),", "\n", "#transforms.RandomHorizontalFlip(),", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "ColorJitter", "(", "\n", "brightness", "=", "0.4", ",", "\n", "contrast", "=", "0.4", ",", "\n", "saturation", "=", "0.4", ",", "\n", ")", ",", "\n", "Lighting", "(", "0.1", ",", "__imagenet_pca", "[", "'eigval'", "]", ",", "__imagenet_pca", "[", "'eigvec'", "]", ")", ",", "\n", "transforms", ".", "Normalize", "(", "**", "normalize", ")", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.utils.preprocess.get_transform": [[76, 85], ["preprocess.inception_color_preproccess", "preprocess.scale_crop"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.dataloader.preprocess.inception_color_preproccess", "home.repos.pwc.inspect_result.zwxu064_RANP.dataloader.preprocess.scale_crop"], ["", "def", "get_transform", "(", "name", "=", "'imagenet'", ",", "input_size", "=", "None", ",", "\n", "scale_size", "=", "None", ",", "normalize", "=", "None", ",", "augment", "=", "True", ")", ":", "\n", "    ", "normalize", "=", "__imagenet_stats", "\n", "input_size", "=", "256", "\n", "if", "augment", ":", "\n", "            ", "return", "inception_color_preproccess", "(", "input_size", ",", "normalize", "=", "normalize", ")", "\n", "", "else", ":", "\n", "            ", "return", "scale_crop", "(", "input_size", "=", "input_size", ",", "\n", "scale_size", "=", "scale_size", ",", "normalize", "=", "normalize", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.datasets.jester.Jester.__init__": [[161, 180], ["jester.make_dataset", "get_loader"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.datasets.kinetics.make_dataset"], ["def", "__init__", "(", "self", ",", "\n", "root_path", ",", "\n", "annotation_path", ",", "\n", "subset", ",", "\n", "n_samples_for_each_video", "=", "1", ",", "\n", "spatial_transform", "=", "None", ",", "\n", "temporal_transform", "=", "None", ",", "\n", "target_transform", "=", "None", ",", "\n", "sample_duration", "=", "16", ",", "\n", "get_loader", "=", "get_default_video_loader", ")", ":", "\n", "        ", "self", ".", "data", ",", "self", ".", "class_names", "=", "make_dataset", "(", "\n", "root_path", ",", "annotation_path", ",", "subset", ",", "n_samples_for_each_video", ",", "\n", "sample_duration", ")", "\n", "\n", "self", ".", "spatial_transform", "=", "spatial_transform", "\n", "self", ".", "temporal_transform", "=", "temporal_transform", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "self", ".", "sample_duration", "=", "sample_duration", "\n", "self", ".", "loader", "=", "get_loader", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.datasets.jester.Jester.__getitem__": [[181, 204], ["jester.Jester.loader", "torch.stack().permute", "torch.stack().permute", "torch.stack().permute", "torch.stack().permute", "jester.Jester.temporal_transform", "jester.Jester.spatial_transform.randomize_parameters", "clip[].size", "jester.Jester.target_transform", "jester.Jester.spatial_transform", "torch.stack", "torch.stack", "torch.stack", "torch.stack"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.efficient_3DCNN.spatial_transforms.MultiplyValues.randomize_parameters"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            index (int): Index\n        Returns:\n            tuple: (image, target) where target is class_index of the target class.\n        \"\"\"", "\n", "path", "=", "self", ".", "data", "[", "index", "]", "[", "'video'", "]", "\n", "frame_indices", "=", "self", ".", "data", "[", "index", "]", "[", "'frame_indices'", "]", "\n", "if", "self", ".", "temporal_transform", "is", "not", "None", ":", "\n", "           ", "frame_indices", "=", "self", ".", "temporal_transform", "(", "frame_indices", ")", "\n", "", "clip", "=", "self", ".", "loader", "(", "path", ",", "frame_indices", ",", "self", ".", "sample_duration", ")", "\n", "if", "self", ".", "spatial_transform", "is", "not", "None", ":", "\n", "            ", "self", ".", "spatial_transform", ".", "randomize_parameters", "(", ")", "\n", "clip", "=", "[", "self", ".", "spatial_transform", "(", "img", ")", "for", "img", "in", "clip", "]", "\n", "", "im_dim", "=", "clip", "[", "0", "]", ".", "size", "(", ")", "[", "-", "2", ":", "]", "\n", "clip", "=", "torch", ".", "stack", "(", "clip", ",", "0", ")", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ")", "\n", "\n", "target", "=", "self", ".", "data", "[", "index", "]", "\n", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "target", "=", "self", ".", "target_transform", "(", "target", ")", "\n", "\n", "", "return", "clip", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.datasets.jester.Jester.__len__": [[205, 207], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zwxu064_RANP.datasets.jester.pil_loader": [[17, 22], ["open", "PIL.Image.open", "img.convert"], "function", ["None"], ["def", "pil_loader", "(", "path", ")", ":", "\n", "# open path as file to avoid ResourceWarning (https://github.com/python-pillow/Pillow/issues/835)", "\n", "    ", "with", "open", "(", "path", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "with", "Image", ".", "open", "(", "f", ")", "as", "img", ":", "\n", "            ", "return", "img", ".", "convert", "(", "'RGB'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.datasets.jester.accimage_loader": [[24, 31], ["accimage.Image", "jester.pil_loader"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.datasets.kinetics.pil_loader"], ["", "", "", "def", "accimage_loader", "(", "path", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "import", "accimage", "\n", "return", "accimage", ".", "Image", "(", "path", ")", "\n", "", "except", "IOError", ":", "\n", "# Potentially a decoding problem, fall back to PIL.Image", "\n", "        ", "return", "pil_loader", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.datasets.jester.get_default_image_loader": [[33, 39], ["get_image_backend"], "function", ["None"], ["", "", "def", "get_default_image_loader", "(", ")", ":", "\n", "    ", "from", "torchvision", "import", "get_image_backend", "\n", "if", "get_image_backend", "(", ")", "==", "'accimage'", ":", "\n", "        ", "return", "accimage_loader", "\n", "", "else", ":", "\n", "        ", "return", "pil_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.datasets.jester.video_loader": [[41, 51], ["os.path.join", "os.path.exists", "video.append", "image_loader"], "function", ["None"], ["", "", "def", "video_loader", "(", "video_dir_path", ",", "frame_indices", ",", "sample_duration", ",", "image_loader", ")", ":", "\n", "    ", "video", "=", "[", "]", "\n", "for", "i", "in", "frame_indices", ":", "\n", "        ", "image_path", "=", "os", ".", "path", ".", "join", "(", "video_dir_path", ",", "'{:05d}.jpg'", ".", "format", "(", "i", ")", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "image_path", ")", ":", "\n", "            ", "video", ".", "append", "(", "image_loader", "(", "image_path", ")", ")", "\n", "", "else", ":", "\n", "            ", "return", "video", "\n", "\n", "", "", "return", "video", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.datasets.jester.get_default_video_loader": [[53, 56], ["jester.get_default_image_loader", "functools.partial"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.datasets.kinetics.get_default_image_loader"], ["", "def", "get_default_video_loader", "(", ")", ":", "\n", "    ", "image_loader", "=", "get_default_image_loader", "(", ")", "\n", "return", "functools", ".", "partial", "(", "video_loader", ",", "image_loader", "=", "image_loader", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.datasets.jester.load_annotation_data": [[58, 61], ["open", "json.load"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.data.load"], ["", "def", "load_annotation_data", "(", "data_file_path", ")", ":", "\n", "    ", "with", "open", "(", "data_file_path", ",", "'r'", ")", "as", "data_file", ":", "\n", "        ", "return", "json", ".", "load", "(", "data_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.datasets.jester.get_class_labels": [[63, 70], ["torch.data"], "function", ["None"], ["", "", "def", "get_class_labels", "(", "data", ")", ":", "\n", "    ", "class_labels_map", "=", "{", "}", "\n", "index", "=", "0", "\n", "for", "class_label", "in", "data", "[", "'labels'", "]", ":", "\n", "        ", "class_labels_map", "[", "class_label", "]", "=", "index", "\n", "index", "+=", "1", "\n", "", "return", "class_labels_map", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.datasets.jester.get_video_names_and_annotations": [[72, 85], ["data[].items", "video_names.append", "annotations.append", "torch.data"], "function", ["None"], ["", "def", "get_video_names_and_annotations", "(", "data", ",", "subset", ")", ":", "\n", "    ", "video_names", "=", "[", "]", "\n", "annotations", "=", "[", "]", "\n", "\n", "for", "key", ",", "value", "in", "data", "[", "'database'", "]", ".", "items", "(", ")", ":", "\n", "        ", "this_subset", "=", "value", "[", "'subset'", "]", "\n", "if", "this_subset", "==", "subset", ":", "\n", "            ", "label", "=", "value", "[", "'annotations'", "]", "[", "'label'", "]", "\n", "#video_names.append('{}/{}'.format(label, key))", "\n", "video_names", ".", "append", "(", "key", ")", "\n", "annotations", ".", "append", "(", "value", "[", "'annotations'", "]", ")", "\n", "\n", "", "", "return", "video_names", ",", "annotations", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.datasets.jester.make_dataset": [[87, 142], ["jester.load_annotation_data", "jester.get_video_names_and_annotations", "jester.get_class_labels", "get_class_labels.items", "range", "len", "os.path.join", "os.path.join", "int", "print", "os.path.exists", "print", "third_party.efficient_3DCNN.utils.load_value_file", "len", "list", "dataset.append", "range", "range", "max", "copy.deepcopy", "list", "dataset.append", "len", "math.ceil", "range", "min"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.datasets.kinetics.load_annotation_data", "home.repos.pwc.inspect_result.zwxu064_RANP.datasets.ucf101.get_video_names_and_annotations", "home.repos.pwc.inspect_result.zwxu064_RANP.datasets.kinetics.get_class_labels", "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_NvNet.utils.load_value_file"], ["", "def", "make_dataset", "(", "root_path", ",", "annotation_path", ",", "subset", ",", "n_samples_for_each_video", ",", "\n", "sample_duration", ")", ":", "\n", "    ", "data", "=", "load_annotation_data", "(", "annotation_path", ")", "\n", "video_names", ",", "annotations", "=", "get_video_names_and_annotations", "(", "data", ",", "subset", ")", "\n", "class_to_idx", "=", "get_class_labels", "(", "data", ")", "\n", "idx_to_class", "=", "{", "}", "\n", "for", "name", ",", "label", "in", "class_to_idx", ".", "items", "(", ")", ":", "\n", "        ", "idx_to_class", "[", "label", "]", "=", "name", "\n", "\n", "", "dataset", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "video_names", ")", ")", ":", "\n", "        ", "if", "i", "%", "1000", "==", "0", ":", "\n", "            ", "print", "(", "'dataset loading [{}/{}]'", ".", "format", "(", "i", ",", "len", "(", "video_names", ")", ")", ")", "\n", "\n", "", "video_path", "=", "os", ".", "path", ".", "join", "(", "root_path", ",", "video_names", "[", "i", "]", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "video_path", ")", ":", "\n", "            ", "print", "(", "video_path", ")", "\n", "continue", "\n", "\n", "", "n_frames_file_path", "=", "os", ".", "path", ".", "join", "(", "video_path", ",", "'n_frames'", ")", "\n", "n_frames", "=", "int", "(", "load_value_file", "(", "n_frames_file_path", ")", ")", "\n", "if", "n_frames", "<=", "0", ":", "\n", "            ", "continue", "\n", "\n", "", "begin_t", "=", "1", "\n", "end_t", "=", "n_frames", "\n", "sample", "=", "{", "\n", "'video'", ":", "video_path", ",", "\n", "'segment'", ":", "[", "begin_t", ",", "end_t", "]", ",", "\n", "'n_frames'", ":", "n_frames", ",", "\n", "#'video_id': video_names[i].split('/')[1]", "\n", "'video_id'", ":", "video_names", "[", "i", "]", "\n", "}", "\n", "if", "len", "(", "annotations", ")", "!=", "0", ":", "\n", "            ", "sample", "[", "'label'", "]", "=", "class_to_idx", "[", "annotations", "[", "i", "]", "[", "'label'", "]", "]", "\n", "", "else", ":", "\n", "            ", "sample", "[", "'label'", "]", "=", "-", "1", "\n", "\n", "", "if", "n_samples_for_each_video", "==", "1", ":", "\n", "            ", "sample", "[", "'frame_indices'", "]", "=", "list", "(", "range", "(", "1", ",", "n_frames", "+", "1", ")", ")", "\n", "dataset", ".", "append", "(", "sample", ")", "\n", "", "else", ":", "\n", "            ", "if", "n_samples_for_each_video", ">", "1", ":", "\n", "                ", "step", "=", "max", "(", "1", ",", "\n", "math", ".", "ceil", "(", "(", "n_frames", "-", "1", "-", "sample_duration", ")", "/", "\n", "(", "n_samples_for_each_video", "-", "1", ")", ")", ")", "\n", "", "else", ":", "\n", "                ", "step", "=", "sample_duration", "\n", "", "for", "j", "in", "range", "(", "1", ",", "n_frames", ",", "step", ")", ":", "\n", "                ", "sample_j", "=", "copy", ".", "deepcopy", "(", "sample", ")", "\n", "sample_j", "[", "'frame_indices'", "]", "=", "list", "(", "\n", "range", "(", "j", ",", "min", "(", "n_frames", "+", "1", ",", "j", "+", "sample_duration", ")", ")", ")", "\n", "dataset", ".", "append", "(", "sample_j", ")", "\n", "\n", "", "", "", "return", "dataset", ",", "idx_to_class", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.datasets.ucf101.UCF101.__init__": [[157, 175], ["ucf101.make_dataset", "get_loader"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.datasets.kinetics.make_dataset"], ["def", "__init__", "(", "self", ",", "\n", "root_path", ",", "\n", "annotation_path", ",", "\n", "subset", ",", "\n", "n_samples_for_each_video", "=", "1", ",", "\n", "spatial_transform", "=", "None", ",", "\n", "temporal_transform", "=", "None", ",", "\n", "target_transform", "=", "None", ",", "\n", "sample_duration", "=", "16", ",", "\n", "get_loader", "=", "get_default_video_loader", ")", ":", "\n", "        ", "self", ".", "data", ",", "self", ".", "class_names", "=", "make_dataset", "(", "\n", "root_path", ",", "annotation_path", ",", "subset", ",", "n_samples_for_each_video", ",", "\n", "sample_duration", ")", "\n", "\n", "self", ".", "spatial_transform", "=", "spatial_transform", "\n", "self", ".", "temporal_transform", "=", "temporal_transform", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "self", ".", "loader", "=", "get_loader", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.datasets.ucf101.UCF101.__getitem__": [[176, 199], ["ucf101.UCF101.loader", "torch.stack().permute", "torch.stack().permute", "torch.stack().permute", "torch.stack().permute", "ucf101.UCF101.temporal_transform", "ucf101.UCF101.spatial_transform.randomize_parameters", "ucf101.UCF101.target_transform", "ucf101.UCF101.spatial_transform", "torch.stack", "torch.stack", "torch.stack", "torch.stack"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.efficient_3DCNN.spatial_transforms.MultiplyValues.randomize_parameters"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            index (int): Index\n        Returns:\n            tuple: (image, target) where target is class_index of the target class.\n        \"\"\"", "\n", "path", "=", "self", ".", "data", "[", "index", "]", "[", "'video'", "]", "\n", "\n", "frame_indices", "=", "self", ".", "data", "[", "index", "]", "[", "'frame_indices'", "]", "\n", "if", "self", ".", "temporal_transform", "is", "not", "None", ":", "\n", "            ", "frame_indices", "=", "self", ".", "temporal_transform", "(", "frame_indices", ")", "\n", "", "clip", "=", "self", ".", "loader", "(", "path", ",", "frame_indices", ")", "\n", "if", "self", ".", "spatial_transform", "is", "not", "None", ":", "\n", "            ", "self", ".", "spatial_transform", ".", "randomize_parameters", "(", ")", "\n", "clip", "=", "[", "self", ".", "spatial_transform", "(", "img", ")", "for", "img", "in", "clip", "]", "\n", "", "clip", "=", "torch", ".", "stack", "(", "clip", ",", "0", ")", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ")", "\n", "\n", "target", "=", "self", ".", "data", "[", "index", "]", "\n", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "target", "=", "self", ".", "target_transform", "(", "target", ")", "\n", "\n", "", "return", "clip", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.datasets.ucf101.UCF101.__len__": [[200, 202], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zwxu064_RANP.datasets.ucf101.pil_loader": [[16, 21], ["open", "PIL.Image.open", "img.convert"], "function", ["None"], ["def", "pil_loader", "(", "path", ")", ":", "\n", "# open path as file to avoid ResourceWarning (https://github.com/python-pillow/Pillow/issues/835)", "\n", "    ", "with", "open", "(", "path", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "with", "Image", ".", "open", "(", "f", ")", "as", "img", ":", "\n", "            ", "return", "img", ".", "convert", "(", "'RGB'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.datasets.ucf101.accimage_loader": [[23, 30], ["accimage.Image", "ucf101.pil_loader"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.datasets.kinetics.pil_loader"], ["", "", "", "def", "accimage_loader", "(", "path", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "import", "accimage", "\n", "return", "accimage", ".", "Image", "(", "path", ")", "\n", "", "except", "IOError", ":", "\n", "# Potentially a decoding problem, fall back to PIL.Image", "\n", "        ", "return", "pil_loader", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.datasets.ucf101.get_default_image_loader": [[32, 38], ["get_image_backend"], "function", ["None"], ["", "", "def", "get_default_image_loader", "(", ")", ":", "\n", "    ", "from", "torchvision", "import", "get_image_backend", "\n", "if", "get_image_backend", "(", ")", "==", "'accimage'", ":", "\n", "        ", "return", "accimage_loader", "\n", "", "else", ":", "\n", "        ", "return", "pil_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.datasets.ucf101.video_loader": [[40, 50], ["os.path.join", "os.path.exists", "video.append", "image_loader"], "function", ["None"], ["", "", "def", "video_loader", "(", "video_dir_path", ",", "frame_indices", ",", "image_loader", ")", ":", "\n", "    ", "video", "=", "[", "]", "\n", "for", "i", "in", "frame_indices", ":", "\n", "        ", "image_path", "=", "os", ".", "path", ".", "join", "(", "video_dir_path", ",", "'image_{:05d}.jpg'", ".", "format", "(", "i", ")", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "image_path", ")", ":", "\n", "            ", "video", ".", "append", "(", "image_loader", "(", "image_path", ")", ")", "\n", "", "else", ":", "\n", "            ", "return", "video", "\n", "\n", "", "", "return", "video", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.datasets.ucf101.get_default_video_loader": [[52, 55], ["ucf101.get_default_image_loader", "functools.partial"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.datasets.kinetics.get_default_image_loader"], ["", "def", "get_default_video_loader", "(", ")", ":", "\n", "    ", "image_loader", "=", "get_default_image_loader", "(", ")", "\n", "return", "functools", ".", "partial", "(", "video_loader", ",", "image_loader", "=", "image_loader", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.datasets.ucf101.load_annotation_data": [[57, 60], ["open", "json.load"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.data.load"], ["", "def", "load_annotation_data", "(", "data_file_path", ")", ":", "\n", "    ", "with", "open", "(", "data_file_path", ",", "'r'", ")", "as", "data_file", ":", "\n", "        ", "return", "json", ".", "load", "(", "data_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.datasets.ucf101.get_class_labels": [[62, 69], ["torch.data"], "function", ["None"], ["", "", "def", "get_class_labels", "(", "data", ")", ":", "\n", "    ", "class_labels_map", "=", "{", "}", "\n", "index", "=", "0", "\n", "for", "class_label", "in", "data", "[", "'labels'", "]", ":", "\n", "        ", "class_labels_map", "[", "class_label", "]", "=", "index", "\n", "index", "+=", "1", "\n", "", "return", "class_labels_map", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.datasets.ucf101.get_video_names_and_annotations": [[71, 83], ["data[].items", "video_names.append", "annotations.append", "torch.data"], "function", ["None"], ["", "def", "get_video_names_and_annotations", "(", "data", ",", "subset", ")", ":", "\n", "    ", "video_names", "=", "[", "]", "\n", "annotations", "=", "[", "]", "\n", "\n", "for", "key", ",", "value", "in", "data", "[", "'database'", "]", ".", "items", "(", ")", ":", "\n", "        ", "this_subset", "=", "value", "[", "'subset'", "]", "\n", "if", "this_subset", "==", "subset", ":", "\n", "            ", "label", "=", "value", "[", "'annotations'", "]", "[", "'label'", "]", "\n", "video_names", ".", "append", "(", "'{}/{}'", ".", "format", "(", "label", ",", "key", ")", ")", "\n", "annotations", ".", "append", "(", "value", "[", "'annotations'", "]", ")", "\n", "\n", "", "", "return", "video_names", ",", "annotations", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.datasets.ucf101.make_dataset": [[85, 138], ["ucf101.load_annotation_data", "ucf101.get_video_names_and_annotations", "ucf101.get_class_labels", "get_class_labels.items", "range", "len", "os.path.join", "os.path.join", "int", "print", "os.path.exists", "third_party.efficient_3DCNN.utils.load_value_file", "len", "list", "dataset.append", "range", "video_names[].split", "range", "max", "copy.deepcopy", "list", "dataset.append", "len", "math.ceil", "range", "min"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.datasets.kinetics.load_annotation_data", "home.repos.pwc.inspect_result.zwxu064_RANP.datasets.ucf101.get_video_names_and_annotations", "home.repos.pwc.inspect_result.zwxu064_RANP.datasets.kinetics.get_class_labels", "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_NvNet.utils.load_value_file"], ["", "def", "make_dataset", "(", "root_path", ",", "annotation_path", ",", "subset", ",", "n_samples_for_each_video", ",", "\n", "sample_duration", ")", ":", "\n", "    ", "data", "=", "load_annotation_data", "(", "annotation_path", ")", "\n", "video_names", ",", "annotations", "=", "get_video_names_and_annotations", "(", "data", ",", "subset", ")", "\n", "class_to_idx", "=", "get_class_labels", "(", "data", ")", "\n", "idx_to_class", "=", "{", "}", "\n", "for", "name", ",", "label", "in", "class_to_idx", ".", "items", "(", ")", ":", "\n", "        ", "idx_to_class", "[", "label", "]", "=", "name", "\n", "\n", "", "dataset", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "video_names", ")", ")", ":", "\n", "        ", "if", "i", "%", "1000", "==", "0", ":", "\n", "            ", "print", "(", "'dataset loading [{}/{}]'", ".", "format", "(", "i", ",", "len", "(", "video_names", ")", ")", ")", "\n", "\n", "", "video_path", "=", "os", ".", "path", ".", "join", "(", "root_path", ",", "video_names", "[", "i", "]", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "video_path", ")", ":", "\n", "            ", "continue", "\n", "\n", "", "n_frames_file_path", "=", "os", ".", "path", ".", "join", "(", "video_path", ",", "'n_frames'", ")", "\n", "n_frames", "=", "int", "(", "load_value_file", "(", "n_frames_file_path", ")", ")", "\n", "if", "n_frames", "<=", "0", ":", "\n", "            ", "continue", "\n", "\n", "", "begin_t", "=", "1", "\n", "end_t", "=", "n_frames", "\n", "sample", "=", "{", "\n", "'video'", ":", "video_path", ",", "\n", "'segment'", ":", "[", "begin_t", ",", "end_t", "]", ",", "\n", "'n_frames'", ":", "n_frames", ",", "\n", "'video_id'", ":", "video_names", "[", "i", "]", ".", "split", "(", "'/'", ")", "[", "1", "]", "\n", "}", "\n", "if", "len", "(", "annotations", ")", "!=", "0", ":", "\n", "            ", "sample", "[", "'label'", "]", "=", "class_to_idx", "[", "annotations", "[", "i", "]", "[", "'label'", "]", "]", "\n", "", "else", ":", "\n", "            ", "sample", "[", "'label'", "]", "=", "-", "1", "\n", "\n", "", "if", "n_samples_for_each_video", "==", "1", ":", "\n", "            ", "sample", "[", "'frame_indices'", "]", "=", "list", "(", "range", "(", "1", ",", "n_frames", "+", "1", ")", ")", "\n", "dataset", ".", "append", "(", "sample", ")", "\n", "", "else", ":", "\n", "            ", "if", "n_samples_for_each_video", ">", "1", ":", "\n", "                ", "step", "=", "max", "(", "1", ",", "\n", "math", ".", "ceil", "(", "(", "n_frames", "-", "1", "-", "sample_duration", ")", "/", "\n", "(", "n_samples_for_each_video", "-", "1", ")", ")", ")", "\n", "", "else", ":", "\n", "                ", "step", "=", "sample_duration", "\n", "", "for", "j", "in", "range", "(", "1", ",", "n_frames", ",", "step", ")", ":", "\n", "                ", "sample_j", "=", "copy", ".", "deepcopy", "(", "sample", ")", "\n", "sample_j", "[", "'frame_indices'", "]", "=", "list", "(", "\n", "range", "(", "j", ",", "min", "(", "n_frames", "+", "1", ",", "j", "+", "sample_duration", ")", ")", ")", "\n", "dataset", ".", "append", "(", "sample_j", ")", "\n", "\n", "", "", "", "return", "dataset", ",", "idx_to_class", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.datasets.kinetics.Kinetics.__init__": [[181, 200], ["kinetics.make_dataset", "get_loader"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.datasets.kinetics.make_dataset"], ["def", "__init__", "(", "self", ",", "\n", "root_path", ",", "\n", "annotation_path", ",", "\n", "subset", ",", "\n", "n_samples_for_each_video", "=", "1", ",", "\n", "spatial_transform", "=", "None", ",", "\n", "temporal_transform", "=", "None", ",", "\n", "target_transform", "=", "None", ",", "\n", "sample_duration", "=", "16", ",", "\n", "get_loader", "=", "get_default_video_loader", ")", ":", "\n", "        ", "self", ".", "data", ",", "self", ".", "class_names", "=", "make_dataset", "(", "\n", "root_path", ",", "annotation_path", ",", "subset", ",", "n_samples_for_each_video", ",", "\n", "sample_duration", ")", "\n", "\n", "self", ".", "spatial_transform", "=", "spatial_transform", "\n", "self", ".", "temporal_transform", "=", "temporal_transform", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "self", ".", "sample_duration", "=", "sample_duration", "\n", "self", ".", "loader", "=", "get_loader", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.datasets.kinetics.Kinetics.__getitem__": [[201, 224], ["kinetics.Kinetics.loader", "torch.stack().permute", "torch.stack().permute", "torch.stack().permute", "torch.stack().permute", "kinetics.Kinetics.temporal_transform", "kinetics.Kinetics.spatial_transform.randomize_parameters", "kinetics.Kinetics.target_transform", "kinetics.Kinetics.spatial_transform", "torch.stack", "torch.stack", "torch.stack", "torch.stack"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.efficient_3DCNN.spatial_transforms.MultiplyValues.randomize_parameters"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            index (int): Index\n        Returns:\n            tuple: (image, target) where target is class_index of the target class.\n        \"\"\"", "\n", "path", "=", "self", ".", "data", "[", "index", "]", "[", "'video'", "]", "\n", "\n", "frame_indices", "=", "self", ".", "data", "[", "index", "]", "[", "'frame_indices'", "]", "\n", "if", "self", ".", "temporal_transform", "is", "not", "None", ":", "\n", "           ", "frame_indices", "=", "self", ".", "temporal_transform", "(", "frame_indices", ")", "\n", "", "clip", "=", "self", ".", "loader", "(", "path", ",", "frame_indices", ",", "self", ".", "sample_duration", ")", "\n", "if", "self", ".", "spatial_transform", "is", "not", "None", ":", "\n", "            ", "self", ".", "spatial_transform", ".", "randomize_parameters", "(", ")", "\n", "clip", "=", "[", "self", ".", "spatial_transform", "(", "img", ")", "for", "img", "in", "clip", "]", "\n", "", "clip", "=", "torch", ".", "stack", "(", "clip", ",", "0", ")", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ")", "\n", "\n", "target", "=", "self", ".", "data", "[", "index", "]", "\n", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "target", "=", "self", ".", "target_transform", "(", "target", ")", "\n", "\n", "", "return", "clip", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.datasets.kinetics.Kinetics.__len__": [[225, 227], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zwxu064_RANP.datasets.kinetics.pil_loader": [[18, 23], ["open", "PIL.Image.open", "img.convert"], "function", ["None"], ["def", "pil_loader", "(", "path", ")", ":", "\n", "# open path as file to avoid ResourceWarning (https://github.com/python-pillow/Pillow/issues/835)", "\n", "    ", "with", "open", "(", "path", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "with", "Image", ".", "open", "(", "f", ")", "as", "img", ":", "\n", "            ", "return", "img", ".", "convert", "(", "'RGB'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.datasets.kinetics.accimage_loader": [[25, 32], ["accimage.Image", "kinetics.pil_loader"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.datasets.kinetics.pil_loader"], ["", "", "", "def", "accimage_loader", "(", "path", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "import", "accimage", "\n", "return", "accimage", ".", "Image", "(", "path", ")", "\n", "", "except", "IOError", ":", "\n", "# Potentially a decoding problem, fall back to PIL.Image", "\n", "        ", "return", "pil_loader", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.datasets.kinetics.get_default_image_loader": [[34, 40], ["get_image_backend"], "function", ["None"], ["", "", "def", "get_default_image_loader", "(", ")", ":", "\n", "    ", "from", "torchvision", "import", "get_image_backend", "\n", "if", "get_image_backend", "(", ")", "==", "'accimage'", ":", "\n", "        ", "return", "accimage_loader", "\n", "", "else", ":", "\n", "        ", "return", "pil_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.datasets.kinetics.video_loader": [[42, 69], ["cv2.VideoCapture", "cv2.VideoCapture.set", "cv2.VideoCapture.release", "cv2.VideoCapture.read", "video.append", "len", "range", "PIL.Image.fromarray", "video.append", "len", "video.append", "PIL.Image.new"], "function", ["None"], ["", "", "def", "video_loader", "(", "video_dir_path", ",", "frame_indices", ",", "sample_duration", ",", "image_loader", ")", ":", "\n", "# print(frame_indices)", "\n", "    ", "cap", "=", "cv2", ".", "VideoCapture", "(", "video_dir_path", ")", "\n", "video", "=", "[", "]", "\n", "cap", ".", "set", "(", "1", ",", "frame_indices", "[", "0", "]", ")", "\n", "for", "_", "in", "frame_indices", ":", "\n", "        ", "ret", ",", "frame", "=", "cap", ".", "read", "(", ")", "\n", "if", "ret", ":", "\n", "            ", "pil_frame", "=", "Image", ".", "fromarray", "(", "frame", ")", "\n", "video", ".", "append", "(", "pil_frame", ")", "\n", "", "else", ":", "\n", "            ", "break", "\n", "\n", "", "", "cap", ".", "release", "(", ")", "\n", "\n", "\n", "# Loop as many times for short videos", "\n", "for", "frame", "in", "video", ":", "\n", "        ", "if", "len", "(", "video", ")", ">=", "sample_duration", ":", "\n", "            ", "break", "\n", "", "video", ".", "append", "(", "frame", ")", "\n", "\n", "", "if", "len", "(", "video", ")", "==", "0", ":", "# give an empty clip", "\n", "        ", "for", "_", "in", "range", "(", "sample_duration", ")", ":", "\n", "            ", "video", ".", "append", "(", "Image", ".", "new", "(", "'RGB'", ",", "(", "320", ",", "180", ")", ")", ")", "\n", "\n", "", "", "return", "video", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.datasets.kinetics.get_default_video_loader": [[71, 74], ["kinetics.get_default_image_loader", "functools.partial"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.datasets.kinetics.get_default_image_loader"], ["", "def", "get_default_video_loader", "(", ")", ":", "\n", "    ", "image_loader", "=", "get_default_image_loader", "(", ")", "\n", "return", "functools", ".", "partial", "(", "video_loader", ",", "image_loader", "=", "image_loader", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.datasets.kinetics.load_annotation_data": [[76, 79], ["open", "json.load"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.data.load"], ["", "def", "load_annotation_data", "(", "data_file_path", ")", ":", "\n", "    ", "with", "open", "(", "data_file_path", ",", "'r'", ")", "as", "data_file", ":", "\n", "        ", "return", "json", ".", "load", "(", "data_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.datasets.kinetics.get_class_labels": [[81, 88], ["torch.data"], "function", ["None"], ["", "", "def", "get_class_labels", "(", "data", ")", ":", "\n", "    ", "class_labels_map", "=", "{", "}", "\n", "index", "=", "0", "\n", "for", "class_label", "in", "data", "[", "'labels'", "]", ":", "\n", "        ", "class_labels_map", "[", "class_label", "]", "=", "index", "\n", "index", "+=", "1", "\n", "", "return", "class_labels_map", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.datasets.kinetics.get_video_names_annotations_framenum": [[90, 107], ["[].items", "framenum.append", "video_names.append", "video_names.append", "annotations.append", "torch.data"], "function", ["None"], ["", "def", "get_video_names_annotations_framenum", "(", "data", ",", "subset", ")", ":", "\n", "    ", "video_names", "=", "[", "]", "\n", "annotations", "=", "[", "]", "\n", "framenum", "=", "[", "]", "\n", "\n", "for", "key", ",", "value", "in", "data", "[", "'database'", "]", "[", "subset", "]", ".", "items", "(", ")", ":", "\n", "        ", "this_subset", "=", "value", "[", "'subset'", "]", "\n", "framenum", ".", "append", "(", "value", "[", "'n_frames'", "]", ")", "\n", "if", "this_subset", "==", "subset", ":", "\n", "            ", "if", "subset", "==", "'testing'", ":", "\n", "                ", "video_names", ".", "append", "(", "'test/{}'", ".", "format", "(", "key", ")", ")", "\n", "", "else", ":", "\n", "                ", "label", "=", "value", "[", "'annotations'", "]", "[", "'label'", "]", "\n", "video_names", ".", "append", "(", "'{}/{}'", ".", "format", "(", "label", ",", "key", ")", ")", "\n", "annotations", ".", "append", "(", "value", "[", "'annotations'", "]", ")", "\n", "\n", "", "", "", "return", "video_names", ",", "annotations", ",", "framenum", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.datasets.kinetics.make_dataset": [[109, 162], ["kinetics.load_annotation_data", "kinetics.get_video_names_annotations_framenum", "kinetics.get_class_labels", "get_class_labels.items", "range", "len", "os.path.join", "print", "os.path.exists", "print", "len", "list", "dataset.append", "range", "[].split", "range", "max", "copy.deepcopy", "list", "dataset.append", "len", "math.ceil", "range", "min"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.datasets.kinetics.load_annotation_data", "home.repos.pwc.inspect_result.zwxu064_RANP.datasets.kinetics.get_video_names_annotations_framenum", "home.repos.pwc.inspect_result.zwxu064_RANP.datasets.kinetics.get_class_labels"], ["", "def", "make_dataset", "(", "root_path", ",", "annotation_path", ",", "subset", ",", "n_samples_for_each_video", ",", "\n", "sample_duration", ")", ":", "\n", "    ", "data", "=", "load_annotation_data", "(", "annotation_path", ")", "\n", "video_names", ",", "annotations", ",", "framenum", "=", "get_video_names_annotations_framenum", "(", "data", ",", "subset", ")", "\n", "class_to_idx", "=", "get_class_labels", "(", "data", ")", "\n", "idx_to_class", "=", "{", "}", "\n", "for", "name", ",", "label", "in", "class_to_idx", ".", "items", "(", ")", ":", "\n", "        ", "idx_to_class", "[", "label", "]", "=", "name", "\n", "\n", "", "dataset", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "video_names", ")", ")", ":", "\n", "        ", "if", "i", "%", "1000", "==", "0", ":", "\n", "            ", "print", "(", "'dataset loading [{}/{}]'", ".", "format", "(", "i", ",", "len", "(", "video_names", ")", ")", ")", "\n", "\n", "", "video_path", "=", "os", ".", "path", ".", "join", "(", "root_path", ",", "video_names", "[", "i", "]", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "video_path", ")", ":", "\n", "            ", "print", "(", "video_path", ")", "\n", "continue", "\n", "\n", "", "n_frames", "=", "framenum", "[", "i", "]", "\n", "if", "n_frames", "<=", "0", ":", "\n", "            ", "continue", "\n", "\n", "", "begin_t", "=", "1", "\n", "end_t", "=", "n_frames", "\n", "sample", "=", "{", "\n", "'video'", ":", "video_path", ",", "\n", "'segment'", ":", "[", "begin_t", ",", "end_t", "]", ",", "\n", "'n_frames'", ":", "n_frames", ",", "\n", "'video_id'", ":", "video_names", "[", "i", "]", "[", ":", "-", "14", "]", ".", "split", "(", "'/'", ")", "[", "1", "]", "\n", "}", "\n", "if", "len", "(", "annotations", ")", "!=", "0", ":", "\n", "            ", "sample", "[", "'label'", "]", "=", "class_to_idx", "[", "annotations", "[", "i", "]", "[", "'label'", "]", "]", "\n", "", "else", ":", "\n", "            ", "sample", "[", "'label'", "]", "=", "-", "1", "\n", "\n", "", "if", "n_samples_for_each_video", "==", "1", ":", "\n", "            ", "sample", "[", "'frame_indices'", "]", "=", "list", "(", "range", "(", "1", ",", "n_frames", "+", "1", ")", ")", "\n", "dataset", ".", "append", "(", "sample", ")", "\n", "", "else", ":", "\n", "            ", "if", "n_samples_for_each_video", ">", "1", ":", "\n", "                ", "step", "=", "max", "(", "1", ",", "\n", "math", ".", "ceil", "(", "(", "n_frames", "-", "1", "-", "sample_duration", ")", "/", "\n", "(", "n_samples_for_each_video", "-", "1", ")", ")", ")", "\n", "", "else", ":", "\n", "                ", "step", "=", "sample_duration", "\n", "", "for", "j", "in", "range", "(", "1", ",", "n_frames", ",", "step", ")", ":", "\n", "                ", "sample_j", "=", "copy", ".", "deepcopy", "(", "sample", ")", "\n", "sample_j", "[", "'frame_indices'", "]", "=", "list", "(", "\n", "range", "(", "j", ",", "min", "(", "n_frames", "+", "1", ",", "j", "+", "sample_duration", ")", ")", ")", "\n", "dataset", ".", "append", "(", "sample_j", ")", "\n", "\n", "", "", "", "return", "dataset", ",", "idx_to_class", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.I3D.MaxPool3dSamePadding.compute_pad": [[15, 20], ["max", "max"], "methods", ["None"], ["  ", "def", "compute_pad", "(", "self", ",", "dim", ",", "s", ")", ":", "\n", "    ", "if", "s", "%", "self", ".", "stride", "[", "dim", "]", "==", "0", ":", "\n", "      ", "return", "max", "(", "self", ".", "kernel_size", "[", "dim", "]", "-", "self", ".", "stride", "[", "dim", "]", ",", "0", ")", "\n", "", "else", ":", "\n", "      ", "return", "max", "(", "self", ".", "kernel_size", "[", "dim", "]", "-", "(", "s", "%", "self", ".", "stride", "[", "dim", "]", ")", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.I3D.MaxPool3dSamePadding.forward": [[21, 46], ["torch.pad.size", "numpy.ceil", "numpy.ceil", "numpy.ceil", "I3D.MaxPool3dSamePadding.compute_pad", "I3D.MaxPool3dSamePadding.compute_pad", "I3D.MaxPool3dSamePadding.compute_pad", "torch.pad", "torch.pad", "torch.pad", "super().forward", "float", "float", "float", "float", "float", "float"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.models.I3D.Unit3D.compute_pad", "home.repos.pwc.inspect_result.zwxu064_RANP.models.I3D.Unit3D.compute_pad", "home.repos.pwc.inspect_result.zwxu064_RANP.models.I3D.Unit3D.compute_pad", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.StereoLoss.forward"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# compute 'same' padding", "\n", "    ", "(", "batch", ",", "channel", ",", "t", ",", "h", ",", "w", ")", "=", "x", ".", "size", "(", ")", "\n", "# print t,h,w", "\n", "out_t", "=", "np", ".", "ceil", "(", "float", "(", "t", ")", "/", "float", "(", "self", ".", "stride", "[", "0", "]", ")", ")", "\n", "out_h", "=", "np", ".", "ceil", "(", "float", "(", "h", ")", "/", "float", "(", "self", ".", "stride", "[", "1", "]", ")", ")", "\n", "out_w", "=", "np", ".", "ceil", "(", "float", "(", "w", ")", "/", "float", "(", "self", ".", "stride", "[", "2", "]", ")", ")", "\n", "# print out_t, out_h, out_w", "\n", "pad_t", "=", "self", ".", "compute_pad", "(", "0", ",", "t", ")", "\n", "pad_h", "=", "self", ".", "compute_pad", "(", "1", ",", "h", ")", "\n", "pad_w", "=", "self", ".", "compute_pad", "(", "2", ",", "w", ")", "\n", "# print pad_t, pad_h, pad_w", "\n", "\n", "pad_t_f", "=", "pad_t", "//", "2", "\n", "pad_t_b", "=", "pad_t", "-", "pad_t_f", "\n", "pad_h_f", "=", "pad_h", "//", "2", "\n", "pad_h_b", "=", "pad_h", "-", "pad_h_f", "\n", "pad_w_f", "=", "pad_w", "//", "2", "\n", "pad_w_b", "=", "pad_w", "-", "pad_w_f", "\n", "\n", "pad", "=", "(", "pad_w_f", ",", "pad_w_b", ",", "pad_h_f", ",", "pad_h_b", ",", "pad_t_f", ",", "pad_t_b", ")", "\n", "# print x.size()", "\n", "# print pad", "\n", "x", "=", "F", ".", "pad", "(", "x", ",", "pad", ")", "\n", "return", "super", "(", "MaxPool3dSamePadding", ",", "self", ")", ".", "forward", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.I3D.Unit3D.__init__": [[50, 82], ["torch.Module.__init__", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.StereoLoss.__init__"], ["  ", "def", "__init__", "(", "self", ",", "in_channels", ",", "\n", "output_channels", ",", "\n", "kernel_shape", "=", "(", "1", ",", "1", ",", "1", ")", ",", "\n", "stride", "=", "(", "1", ",", "1", ",", "1", ")", ",", "\n", "padding", "=", "0", ",", "\n", "activation_fn", "=", "F", ".", "relu", ",", "\n", "use_batch_norm", "=", "True", ",", "\n", "use_bias", "=", "False", ",", "\n", "name", "=", "'unit_3d'", ")", ":", "\n", "\n", "    ", "\"\"\"Initializes Unit3D module.\"\"\"", "\n", "super", "(", "Unit3D", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "_output_channels", "=", "output_channels", "\n", "self", ".", "_kernel_shape", "=", "kernel_shape", "\n", "self", ".", "_stride", "=", "stride", "\n", "self", ".", "_use_batch_norm", "=", "use_batch_norm", "\n", "self", ".", "_activation_fn", "=", "activation_fn", "\n", "self", ".", "_use_bias", "=", "use_bias", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "padding", "=", "padding", "\n", "\n", "self", ".", "conv3d", "=", "nn", ".", "Conv3d", "(", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "self", ".", "_output_channels", ",", "\n", "kernel_size", "=", "self", ".", "_kernel_shape", ",", "\n", "stride", "=", "self", ".", "_stride", ",", "\n", "padding", "=", "0", ",", "\n", "# we always want padding to be 0 here. We will dynamically pad based on input size in forward function", "\n", "bias", "=", "self", ".", "_use_bias", ")", "\n", "\n", "if", "self", ".", "_use_batch_norm", ":", "\n", "      ", "self", ".", "bn", "=", "nn", ".", "BatchNorm3d", "(", "self", ".", "_output_channels", ",", "eps", "=", "0.001", ",", "momentum", "=", "0.01", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.I3D.Unit3D.compute_pad": [[83, 88], ["max", "max"], "methods", ["None"], ["", "", "def", "compute_pad", "(", "self", ",", "dim", ",", "s", ")", ":", "\n", "    ", "if", "s", "%", "self", ".", "_stride", "[", "dim", "]", "==", "0", ":", "\n", "      ", "return", "max", "(", "self", ".", "_kernel_shape", "[", "dim", "]", "-", "self", ".", "_stride", "[", "dim", "]", ",", "0", ")", "\n", "", "else", ":", "\n", "      ", "return", "max", "(", "self", ".", "_kernel_shape", "[", "dim", "]", "-", "(", "s", "%", "self", ".", "_stride", "[", "dim", "]", ")", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.I3D.Unit3D.forward": [[89, 121], ["I3D.Unit3D.size", "numpy.ceil", "numpy.ceil", "numpy.ceil", "I3D.Unit3D.compute_pad", "I3D.Unit3D.compute_pad", "I3D.Unit3D.compute_pad", "torch.pad", "torch.pad", "torch.pad", "I3D.Unit3D.conv3d", "I3D.Unit3D.bn", "I3D.Unit3D._activation_fn", "float", "float", "float", "float", "float", "float"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.models.I3D.Unit3D.compute_pad", "home.repos.pwc.inspect_result.zwxu064_RANP.models.I3D.Unit3D.compute_pad", "home.repos.pwc.inspect_result.zwxu064_RANP.models.I3D.Unit3D.compute_pad", "home.repos.pwc.inspect_result.zwxu064_RANP.unet.buildingblocks.conv3d"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# compute 'same' padding", "\n", "    ", "(", "batch", ",", "channel", ",", "t", ",", "h", ",", "w", ")", "=", "x", ".", "size", "(", ")", "\n", "# print t,h,w", "\n", "out_t", "=", "np", ".", "ceil", "(", "float", "(", "t", ")", "/", "float", "(", "self", ".", "_stride", "[", "0", "]", ")", ")", "\n", "out_h", "=", "np", ".", "ceil", "(", "float", "(", "h", ")", "/", "float", "(", "self", ".", "_stride", "[", "1", "]", ")", ")", "\n", "out_w", "=", "np", ".", "ceil", "(", "float", "(", "w", ")", "/", "float", "(", "self", ".", "_stride", "[", "2", "]", ")", ")", "\n", "# print out_t, out_h, out_w", "\n", "pad_t", "=", "self", ".", "compute_pad", "(", "0", ",", "t", ")", "\n", "pad_h", "=", "self", ".", "compute_pad", "(", "1", ",", "h", ")", "\n", "pad_w", "=", "self", ".", "compute_pad", "(", "2", ",", "w", ")", "\n", "# print pad_t, pad_h, pad_w", "\n", "\n", "pad_t_f", "=", "pad_t", "//", "2", "\n", "pad_t_b", "=", "pad_t", "-", "pad_t_f", "\n", "pad_h_f", "=", "pad_h", "//", "2", "\n", "pad_h_b", "=", "pad_h", "-", "pad_h_f", "\n", "pad_w_f", "=", "pad_w", "//", "2", "\n", "pad_w_b", "=", "pad_w", "-", "pad_w_f", "\n", "\n", "pad", "=", "(", "pad_w_f", ",", "pad_w_b", ",", "pad_h_f", ",", "pad_h_b", ",", "pad_t_f", ",", "pad_t_b", ")", "\n", "# print x.size()", "\n", "# print pad", "\n", "x", "=", "F", ".", "pad", "(", "x", ",", "pad", ")", "\n", "# print x.size()", "\n", "\n", "x", "=", "self", ".", "conv3d", "(", "x", ")", "\n", "if", "self", ".", "_use_batch_norm", ":", "\n", "      ", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "", "if", "self", ".", "_activation_fn", "is", "not", "None", ":", "\n", "      ", "x", "=", "self", ".", "_activation_fn", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.I3D.InceptionModule.__init__": [[124, 148], ["torch.Module.__init__", "I3D.Unit3D", "I3D.Unit3D", "I3D.Unit3D", "I3D.Unit3D", "I3D.Unit3D", "I3D.MaxPool3dSamePadding", "I3D.Unit3D"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.StereoLoss.__init__"], ["  ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "name", ")", ":", "\n", "    ", "super", "(", "InceptionModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "b0", "=", "Unit3D", "(", "in_channels", "=", "in_channels", ",", "output_channels", "=", "out_channels", "[", "0", "]", ",", "\n", "kernel_shape", "=", "[", "1", ",", "1", ",", "1", "]", ",", "padding", "=", "0", ",", "\n", "name", "=", "name", "+", "'/Branch_0/Conv3d_0a_1x1'", ")", "\n", "self", ".", "b1a", "=", "Unit3D", "(", "in_channels", "=", "in_channels", ",", "output_channels", "=", "out_channels", "[", "1", "]", ",", "\n", "kernel_shape", "=", "[", "1", ",", "1", ",", "1", "]", ",", "padding", "=", "0", ",", "\n", "name", "=", "name", "+", "'/Branch_1/Conv3d_0a_1x1'", ")", "\n", "self", ".", "b1b", "=", "Unit3D", "(", "in_channels", "=", "out_channels", "[", "1", "]", ",", "\n", "output_channels", "=", "out_channels", "[", "2", "]", ",", "kernel_shape", "=", "[", "3", ",", "3", ",", "3", "]", ",", "\n", "name", "=", "name", "+", "'/Branch_1/Conv3d_0b_3x3'", ")", "\n", "self", ".", "b2a", "=", "Unit3D", "(", "in_channels", "=", "in_channels", ",", "output_channels", "=", "out_channels", "[", "3", "]", ",", "\n", "kernel_shape", "=", "[", "1", ",", "1", ",", "1", "]", ",", "padding", "=", "0", ",", "\n", "name", "=", "name", "+", "'/Branch_2/Conv3d_0a_1x1'", ")", "\n", "self", ".", "b2b", "=", "Unit3D", "(", "in_channels", "=", "out_channels", "[", "3", "]", ",", "\n", "output_channels", "=", "out_channels", "[", "4", "]", ",", "kernel_shape", "=", "[", "3", ",", "3", ",", "3", "]", ",", "\n", "name", "=", "name", "+", "'/Branch_2/Conv3d_0b_3x3'", ")", "\n", "self", ".", "b3a", "=", "MaxPool3dSamePadding", "(", "kernel_size", "=", "[", "3", ",", "3", ",", "3", "]", ",", "\n", "stride", "=", "(", "1", ",", "1", ",", "1", ")", ",", "padding", "=", "0", ")", "\n", "self", ".", "b3b", "=", "Unit3D", "(", "in_channels", "=", "in_channels", ",", "output_channels", "=", "out_channels", "[", "5", "]", ",", "\n", "kernel_shape", "=", "[", "1", ",", "1", ",", "1", "]", ",", "padding", "=", "0", ",", "\n", "name", "=", "name", "+", "'/Branch_3/Conv3d_0b_1x1'", ")", "\n", "self", ".", "name", "=", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.I3D.InceptionModule.forward": [[149, 155], ["I3D.InceptionModule.b0", "I3D.InceptionModule.b1b", "I3D.InceptionModule.b2b", "I3D.InceptionModule.b3b", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "I3D.InceptionModule.b1a", "I3D.InceptionModule.b2a", "I3D.InceptionModule.b3a"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "b0", "=", "self", ".", "b0", "(", "x", ")", "\n", "b1", "=", "self", ".", "b1b", "(", "self", ".", "b1a", "(", "x", ")", ")", "\n", "b2", "=", "self", ".", "b2b", "(", "self", ".", "b2a", "(", "x", ")", ")", "\n", "b3", "=", "self", ".", "b3b", "(", "self", ".", "b3a", "(", "x", ")", ")", "\n", "return", "torch", ".", "cat", "(", "[", "b0", ",", "b1", ",", "b2", ",", "b3", "]", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.I3D.InceptionI3d.__init__": [[194, 338], ["torch.Module.__init__", "I3D.Unit3D", "I3D.MaxPool3dSamePadding", "I3D.Unit3D", "I3D.Unit3D", "I3D.MaxPool3dSamePadding", "I3D.InceptionModule", "I3D.InceptionModule", "I3D.MaxPool3dSamePadding", "I3D.InceptionModule", "I3D.InceptionModule", "I3D.InceptionModule", "I3D.InceptionModule", "I3D.InceptionModule", "I3D.MaxPool3dSamePadding", "I3D.InceptionModule", "I3D.InceptionModule", "I3D.InceptionI3d.build", "torch.AvgPool3d", "torch.AvgPool3d", "torch.AvgPool3d", "torch.Dropout", "torch.Dropout", "torch.Dropout", "I3D.Unit3D", "ValueError", "ValueError"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.StereoLoss.__init__", "home.repos.pwc.inspect_result.zwxu064_RANP.models.I3D.InceptionI3d.build"], ["def", "__init__", "(", "self", ",", "num_classes", "=", "400", ",", "spatial_squeeze", "=", "True", ",", "\n", "final_endpoint", "=", "'Logits'", ",", "name", "=", "'inception_i3d'", ",", "in_channels", "=", "3", ",", "\n", "dropout_keep_prob", "=", "0.5", ")", ":", "\n", "    ", "\"\"\"Initializes I3D model instance.\n    Args:\n      num_classes: The number of outputs in the logit layer (default 400, which\n          matches the Kinetics dataset).\n      spatial_squeeze: Whether to squeeze the spatial dimensions for the logits\n          before returning (default True).\n      final_endpoint: The model contains many possible endpoints.\n          `final_endpoint` specifies the last endpoint for the model to be built\n          up to. In addition to the output at `final_endpoint`, all the outputs\n          at endpoints up to `final_endpoint` will also be returned, in a\n          dictionary. `final_endpoint` must be one of\n          InceptionI3d.VALID_ENDPOINTS (default 'Logits').\n      name: A string (optional). The name of this module.\n    Raises:\n      ValueError: if `final_endpoint` is not recognized.\n    \"\"\"", "\n", "\n", "if", "final_endpoint", "not", "in", "self", ".", "VALID_ENDPOINTS", ":", "\n", "      ", "raise", "ValueError", "(", "'Unknown final endpoint %s'", "%", "final_endpoint", ")", "\n", "\n", "", "super", "(", "InceptionI3d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_num_classes", "=", "num_classes", "\n", "self", ".", "_spatial_squeeze", "=", "spatial_squeeze", "\n", "self", ".", "_final_endpoint", "=", "final_endpoint", "\n", "self", ".", "logits", "=", "None", "\n", "\n", "if", "self", ".", "_final_endpoint", "not", "in", "self", ".", "VALID_ENDPOINTS", ":", "\n", "      ", "raise", "ValueError", "(", "'Unknown final endpoint %s'", "%", "self", ".", "_final_endpoint", ")", "\n", "\n", "", "self", ".", "end_points", "=", "{", "}", "\n", "end_point", "=", "'Conv3d_1a_7x7'", "\n", "self", ".", "end_points", "[", "end_point", "]", "=", "Unit3D", "(", "in_channels", "=", "in_channels", ",", "\n", "output_channels", "=", "64", ",", "\n", "kernel_shape", "=", "[", "7", ",", "7", ",", "7", "]", ",", "\n", "stride", "=", "(", "2", ",", "2", ",", "2", ")", ",", "padding", "=", "(", "3", ",", "3", ",", "3", ")", ",", "\n", "name", "=", "name", "+", "end_point", ")", "\n", "if", "self", ".", "_final_endpoint", "==", "end_point", ":", "return", "\n", "\n", "end_point", "=", "'MaxPool3d_2a_3x3'", "\n", "self", ".", "end_points", "[", "end_point", "]", "=", "MaxPool3dSamePadding", "(", "kernel_size", "=", "[", "1", ",", "3", ",", "3", "]", ",", "\n", "stride", "=", "(", "1", ",", "2", ",", "2", ")", ",", "\n", "padding", "=", "0", ")", "\n", "if", "self", ".", "_final_endpoint", "==", "end_point", ":", "return", "\n", "\n", "end_point", "=", "'Conv3d_2b_1x1'", "\n", "self", ".", "end_points", "[", "end_point", "]", "=", "Unit3D", "(", "in_channels", "=", "64", ",", "output_channels", "=", "64", ",", "\n", "kernel_shape", "=", "[", "1", ",", "1", ",", "1", "]", ",", "padding", "=", "0", ",", "\n", "name", "=", "name", "+", "end_point", ")", "\n", "if", "self", ".", "_final_endpoint", "==", "end_point", ":", "return", "\n", "\n", "end_point", "=", "'Conv3d_2c_3x3'", "\n", "self", ".", "end_points", "[", "end_point", "]", "=", "Unit3D", "(", "in_channels", "=", "64", ",", "output_channels", "=", "192", ",", "\n", "kernel_shape", "=", "[", "3", ",", "3", ",", "3", "]", ",", "padding", "=", "1", ",", "\n", "name", "=", "name", "+", "end_point", ")", "\n", "if", "self", ".", "_final_endpoint", "==", "end_point", ":", "return", "\n", "\n", "end_point", "=", "'MaxPool3d_3a_3x3'", "\n", "self", ".", "end_points", "[", "end_point", "]", "=", "MaxPool3dSamePadding", "(", "kernel_size", "=", "[", "1", ",", "3", ",", "3", "]", ",", "\n", "stride", "=", "(", "1", ",", "2", ",", "2", ")", ",", "\n", "padding", "=", "0", ")", "\n", "if", "self", ".", "_final_endpoint", "==", "end_point", ":", "return", "\n", "\n", "end_point", "=", "'Mixed_3b'", "\n", "self", ".", "end_points", "[", "end_point", "]", "=", "InceptionModule", "(", "192", ",", "[", "64", ",", "96", ",", "128", ",", "16", ",", "32", ",", "32", "]", ",", "\n", "name", "+", "end_point", ")", "\n", "if", "self", ".", "_final_endpoint", "==", "end_point", ":", "return", "\n", "\n", "end_point", "=", "'Mixed_3c'", "\n", "self", ".", "end_points", "[", "end_point", "]", "=", "InceptionModule", "(", "256", ",", "\n", "[", "128", ",", "128", ",", "192", ",", "32", ",", "96", ",", "64", "]", ",", "\n", "name", "+", "end_point", ")", "\n", "if", "self", ".", "_final_endpoint", "==", "end_point", ":", "return", "\n", "\n", "end_point", "=", "'MaxPool3d_4a_3x3'", "\n", "self", ".", "end_points", "[", "end_point", "]", "=", "MaxPool3dSamePadding", "(", "kernel_size", "=", "[", "3", ",", "3", ",", "3", "]", ",", "\n", "stride", "=", "(", "2", ",", "2", ",", "2", ")", ",", "\n", "padding", "=", "0", ")", "\n", "if", "self", ".", "_final_endpoint", "==", "end_point", ":", "return", "\n", "\n", "end_point", "=", "'Mixed_4b'", "\n", "self", ".", "end_points", "[", "end_point", "]", "=", "InceptionModule", "(", "128", "+", "192", "+", "96", "+", "64", ",", "\n", "[", "192", ",", "96", ",", "208", ",", "16", ",", "48", ",", "64", "]", ",", "\n", "name", "+", "end_point", ")", "\n", "if", "self", ".", "_final_endpoint", "==", "end_point", ":", "return", "\n", "\n", "end_point", "=", "'Mixed_4c'", "\n", "self", ".", "end_points", "[", "end_point", "]", "=", "InceptionModule", "(", "192", "+", "208", "+", "48", "+", "64", ",", "\n", "[", "160", ",", "112", ",", "224", ",", "24", ",", "64", ",", "64", "]", ",", "\n", "name", "+", "end_point", ")", "\n", "if", "self", ".", "_final_endpoint", "==", "end_point", ":", "return", "\n", "\n", "end_point", "=", "'Mixed_4d'", "\n", "self", ".", "end_points", "[", "end_point", "]", "=", "InceptionModule", "(", "160", "+", "224", "+", "64", "+", "64", ",", "\n", "[", "128", ",", "128", ",", "256", ",", "24", ",", "64", ",", "64", "]", ",", "\n", "name", "+", "end_point", ")", "\n", "if", "self", ".", "_final_endpoint", "==", "end_point", ":", "return", "\n", "\n", "end_point", "=", "'Mixed_4e'", "\n", "self", ".", "end_points", "[", "end_point", "]", "=", "InceptionModule", "(", "128", "+", "256", "+", "64", "+", "64", ",", "\n", "[", "112", ",", "144", ",", "288", ",", "32", ",", "64", ",", "64", "]", ",", "\n", "name", "+", "end_point", ")", "\n", "if", "self", ".", "_final_endpoint", "==", "end_point", ":", "return", "\n", "\n", "end_point", "=", "'Mixed_4f'", "\n", "self", ".", "end_points", "[", "end_point", "]", "=", "InceptionModule", "(", "112", "+", "288", "+", "64", "+", "64", ",", "\n", "[", "256", ",", "160", ",", "320", ",", "32", ",", "128", ",", "128", "]", ",", "\n", "name", "+", "end_point", ")", "\n", "if", "self", ".", "_final_endpoint", "==", "end_point", ":", "return", "\n", "\n", "end_point", "=", "'MaxPool3d_5a_2x2'", "\n", "self", ".", "end_points", "[", "end_point", "]", "=", "MaxPool3dSamePadding", "(", "kernel_size", "=", "[", "2", ",", "2", ",", "2", "]", ",", "\n", "stride", "=", "(", "2", ",", "2", ",", "2", ")", ",", "\n", "padding", "=", "0", ")", "\n", "if", "self", ".", "_final_endpoint", "==", "end_point", ":", "return", "\n", "\n", "end_point", "=", "'Mixed_5b'", "\n", "self", ".", "end_points", "[", "end_point", "]", "=", "InceptionModule", "(", "256", "+", "320", "+", "128", "+", "128", ",", "\n", "[", "256", ",", "160", ",", "320", ",", "32", ",", "128", ",", "128", "]", ",", "\n", "name", "+", "end_point", ")", "\n", "if", "self", ".", "_final_endpoint", "==", "end_point", ":", "return", "\n", "\n", "end_point", "=", "'Mixed_5c'", "\n", "self", ".", "end_points", "[", "end_point", "]", "=", "InceptionModule", "(", "256", "+", "320", "+", "128", "+", "128", ",", "\n", "[", "384", ",", "192", ",", "384", ",", "48", ",", "128", ",", "128", "]", ",", "\n", "name", "+", "end_point", ")", "\n", "if", "self", ".", "_final_endpoint", "==", "end_point", ":", "return", "\n", "\n", "self", ".", "build", "(", ")", "\n", "\n", "end_point", "=", "'Logits'", "\n", "self", ".", "avg_pool", "=", "nn", ".", "AvgPool3d", "(", "kernel_size", "=", "[", "2", ",", "7", ",", "7", "]", ",", "\n", "stride", "=", "(", "1", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout_keep_prob", ")", "\n", "self", ".", "logits", "=", "Unit3D", "(", "in_channels", "=", "384", "+", "384", "+", "128", "+", "128", ",", "\n", "output_channels", "=", "self", ".", "_num_classes", ",", "\n", "kernel_shape", "=", "[", "1", ",", "1", ",", "1", "]", ",", "\n", "padding", "=", "0", ",", "\n", "activation_fn", "=", "None", ",", "\n", "use_batch_norm", "=", "False", ",", "\n", "use_bias", "=", "True", ",", "\n", "name", "=", "'logits'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.I3D.InceptionI3d.replace_logits": [[339, 349], ["I3D.Unit3D"], "methods", ["None"], ["", "def", "replace_logits", "(", "self", ",", "num_classes", ")", ":", "\n", "    ", "self", ".", "_num_classes", "=", "num_classes", "\n", "self", ".", "logits", "=", "Unit3D", "(", "in_channels", "=", "384", "+", "384", "+", "128", "+", "128", ",", "\n", "output_channels", "=", "self", ".", "_num_classes", ",", "\n", "kernel_shape", "=", "[", "1", ",", "1", ",", "1", "]", ",", "\n", "padding", "=", "0", ",", "\n", "activation_fn", "=", "None", ",", "\n", "use_batch_norm", "=", "False", ",", "\n", "use_bias", "=", "True", ",", "\n", "name", "=", "'logits'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.I3D.InceptionI3d.build": [[350, 353], ["I3D.InceptionI3d.end_points.keys", "I3D.InceptionI3d.add_module"], "methods", ["None"], ["", "def", "build", "(", "self", ")", ":", "\n", "    ", "for", "k", "in", "self", ".", "end_points", ".", "keys", "(", ")", ":", "\n", "      ", "self", ".", "add_module", "(", "k", ",", "self", ".", "end_points", "[", "k", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.I3D.InceptionI3d._initialize_weights": [[354, 368], ["I3D.InceptionI3d.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.bias.data.zero_", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "m.weight.size", "m.weight.data.normal_", "m.bias.data.zero_"], "methods", ["None"], ["", "", "def", "_initialize_weights", "(", "self", ")", ":", "\n", "      ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "          ", "if", "isinstance", "(", "m", ",", "(", "nn", ".", "Conv3d", ",", "nn", ".", "ConvTranspose3d", ",", "nn", ".", "Conv2d", ",", "nn", ".", "ConvTranspose2d", ")", ")", ":", "\n", "              ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "kernel_size", "[", "2", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                  ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm3d", ")", ":", "\n", "              ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "              ", "n", "=", "m", ".", "weight", ".", "size", "(", "1", ")", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.I3D.InceptionI3d.forward": [[369, 384], ["I3D.InceptionI3d.size", "I3D.InceptionI3d.logits", "I3D.InceptionI3d.squeeze().squeeze.squeeze", "I3D.InceptionI3d.dropout", "I3D.InceptionI3d.squeeze().squeeze", "I3D.InceptionI3d.avg_pool", "I3D.InceptionI3d.squeeze"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "t", "=", "x", ".", "size", "(", "2", ")", "\n", "\n", "for", "end_point", "in", "self", ".", "VALID_ENDPOINTS", ":", "\n", "      ", "if", "end_point", "in", "self", ".", "end_points", ":", "\n", "        ", "x", "=", "self", ".", "_modules", "[", "end_point", "]", "(", "x", ")", "# use _modules to work with dataparallel", "\n", "\n", "", "", "x", "=", "self", ".", "logits", "(", "self", ".", "dropout", "(", "self", ".", "avg_pool", "(", "x", ")", ")", ")", "\n", "if", "self", ".", "_spatial_squeeze", ":", "\n", "      ", "logits", "=", "x", ".", "squeeze", "(", "3", ")", ".", "squeeze", "(", "3", ")", "\n", "# logits is batch X time X classes, which is what we want to work with", "\n", "\n", "", "logits", "=", "logits", ".", "squeeze", "(", "2", ")", "# Zhiwei to get batch*classes", "\n", "\n", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.I3D.InceptionI3d.extract_features": [[385, 390], ["I3D.InceptionI3d.avg_pool"], "methods", ["None"], ["", "def", "extract_features", "(", "self", ",", "x", ")", ":", "\n", "    ", "for", "end_point", "in", "self", ".", "VALID_ENDPOINTS", ":", "\n", "      ", "if", "end_point", "in", "self", ".", "end_points", ":", "\n", "        ", "x", "=", "self", ".", "_modules", "[", "end_point", "]", "(", "x", ")", "\n", "", "", "return", "self", ".", "avg_pool", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.I3D.get_fine_tuning_parameters": [[391, 409], ["model.parameters", "ft_module_names.append", "model.named_parameters", "ValueError", "parameters.append", "parameters.append"], "function", ["None"], ["", "", "def", "get_fine_tuning_parameters", "(", "model", ",", "ft_portion", ")", ":", "\n", "  ", "if", "ft_portion", "==", "\"complete\"", ":", "\n", "    ", "return", "model", ".", "parameters", "(", ")", "\n", "", "elif", "ft_portion", "==", "\"last_layer\"", ":", "\n", "    ", "ft_module_names", "=", "[", "]", "\n", "ft_module_names", ".", "append", "(", "'logits'", ")", "\n", "\n", "parameters", "=", "[", "]", "\n", "for", "k", ",", "v", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "      ", "for", "ft_module", "in", "ft_module_names", ":", "\n", "        ", "if", "ft_module", "in", "k", ":", "\n", "          ", "parameters", ".", "append", "(", "{", "'params'", ":", "v", "}", ")", "\n", "break", "\n", "", "else", ":", "\n", "          ", "parameters", ".", "append", "(", "{", "'params'", ":", "v", ",", "'lr'", ":", "0.0", "}", ")", "\n", "", "", "", "return", "parameters", "\n", "", "else", ":", "\n", "    ", "raise", "ValueError", "(", "\"Unsupported ft_portion: 'complete' or 'last_layer' expected\"", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.mobilenet.Block.__init__": [[21, 27], ["torch.Module.__init__", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.StereoLoss.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "Block", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv3d", "(", "in_planes", ",", "in_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "groups", "=", "in_planes", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm3d", "(", "in_planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv3d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm3d", "(", "out_planes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.mobilenet.Block.forward": [[28, 32], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "mobilenet.Block.bn1", "mobilenet.Block.bn2", "mobilenet.Block.conv1", "mobilenet.Block.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.mobilenet.MobileNet.__init__": [[35, 66], ["torch.Module.__init__", "int", "int", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "mobilenet.conv_bn", "int", "range", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "mobilenet.MobileNet.features.append", "mobilenet.Block"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.StereoLoss.__init__", "home.repos.pwc.inspect_result.zwxu064_RANP.models.shufflenetv2.conv_bn"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", "=", "600", ",", "sample_size", "=", "224", ",", "width_mult", "=", "1.", ")", ":", "\n", "        ", "super", "(", "MobileNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "input_channel", "=", "32", "\n", "last_channel", "=", "1024", "\n", "input_channel", "=", "int", "(", "input_channel", "*", "width_mult", ")", "\n", "last_channel", "=", "int", "(", "last_channel", "*", "width_mult", ")", "\n", "cfg", "=", "[", "\n", "# c, n, s", "\n", "[", "64", ",", "1", ",", "(", "2", ",", "2", ",", "2", ")", "]", ",", "\n", "[", "128", ",", "2", ",", "(", "2", ",", "2", ",", "2", ")", "]", ",", "\n", "[", "256", ",", "2", ",", "(", "2", ",", "2", ",", "2", ")", "]", ",", "\n", "[", "512", ",", "6", ",", "(", "2", ",", "2", ",", "2", ")", "]", ",", "\n", "[", "1024", ",", "2", ",", "(", "1", ",", "1", ",", "1", ")", "]", ",", "\n", "]", "\n", "\n", "self", ".", "features", "=", "[", "conv_bn", "(", "3", ",", "input_channel", ",", "(", "1", ",", "2", ",", "2", ")", ")", "]", "\n", "# building inverted residual blocks", "\n", "for", "c", ",", "n", ",", "s", "in", "cfg", ":", "\n", "            ", "output_channel", "=", "int", "(", "c", "*", "width_mult", ")", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "                ", "stride", "=", "s", "if", "i", "==", "0", "else", "1", "\n", "self", ".", "features", ".", "append", "(", "Block", "(", "input_channel", ",", "output_channel", ",", "stride", ")", ")", "\n", "input_channel", "=", "output_channel", "\n", "# make it nn.Sequential", "\n", "", "", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "features", ")", "\n", "\n", "# building classifier", "\n", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Dropout", "(", "0.2", ")", ",", "\n", "nn", ".", "Linear", "(", "last_channel", ",", "num_classes", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.mobilenet.MobileNet.forward": [[69, 75], ["mobilenet.MobileNet.features", "torch.avg_pool3d", "torch.avg_pool3d", "torch.avg_pool3d", "mobilenet.MobileNet.view", "mobilenet.MobileNet.classifier", "mobilenet.MobileNet.size", "mobilenet.MobileNet.data.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "x", "=", "F", ".", "avg_pool3d", "(", "x", ",", "x", ".", "data", ".", "size", "(", ")", "[", "-", "3", ":", "]", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.mobilenet.conv_bn": [[11, 16], ["torch.Sequential", "torch.Conv3d", "torch.BatchNorm3d", "torch.ReLU"], "function", ["None"], ["def", "conv_bn", "(", "inp", ",", "oup", ",", "stride", ")", ":", "\n", "    ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "inp", ",", "oup", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "(", "1", ",", "1", ",", "1", ")", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "oup", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.mobilenet.get_fine_tuning_parameters": [[77, 97], ["model.parameters", "ft_module_names.append", "model.named_parameters", "ValueError", "parameters.append", "parameters.append"], "function", ["None"], ["", "", "def", "get_fine_tuning_parameters", "(", "model", ",", "ft_portion", ")", ":", "\n", "    ", "if", "ft_portion", "==", "\"complete\"", ":", "\n", "        ", "return", "model", ".", "parameters", "(", ")", "\n", "\n", "", "elif", "ft_portion", "==", "\"last_layer\"", ":", "\n", "        ", "ft_module_names", "=", "[", "]", "\n", "ft_module_names", ".", "append", "(", "'classifier'", ")", "\n", "\n", "parameters", "=", "[", "]", "\n", "for", "k", ",", "v", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "            ", "for", "ft_module", "in", "ft_module_names", ":", "\n", "                ", "if", "ft_module", "in", "k", ":", "\n", "                    ", "parameters", ".", "append", "(", "{", "'params'", ":", "v", "}", ")", "\n", "break", "\n", "", "", "else", ":", "\n", "                ", "parameters", ".", "append", "(", "{", "'params'", ":", "v", ",", "'lr'", ":", "0.0", "}", ")", "\n", "", "", "return", "parameters", "\n", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Unsupported ft_portion: 'complete' or 'last_layer' expected\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.mobilenet.get_model": [[99, 105], ["mobilenet.MobileNet"], "function", ["None"], ["", "", "def", "get_model", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    Returns the model.\n    \"\"\"", "\n", "model", "=", "MobileNet", "(", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.c3d.C3D.__init__": [[20, 73], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "int", "int", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool3d", "torch.MaxPool3d", "torch.MaxPool3d", "torch.MaxPool3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool3d", "torch.MaxPool3d", "torch.MaxPool3d", "torch.MaxPool3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool3d", "torch.MaxPool3d", "torch.MaxPool3d", "torch.MaxPool3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool3d", "torch.MaxPool3d", "torch.MaxPool3d", "torch.MaxPool3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool3d", "torch.MaxPool3d", "torch.MaxPool3d", "torch.MaxPool3d", "math.floor", "math.ceil", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.StereoLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "sample_size", ",", "\n", "sample_duration", ",", "\n", "num_classes", "=", "600", ")", ":", "\n", "\n", "        ", "super", "(", "C3D", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "group1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "MaxPool3d", "(", "kernel_size", "=", "(", "2", ",", "2", ",", "2", ")", ",", "stride", "=", "(", "1", ",", "2", ",", "2", ")", ")", ")", "\n", "self", ".", "group2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "64", ",", "128", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "MaxPool3d", "(", "kernel_size", "=", "(", "2", ",", "2", ",", "2", ")", ",", "stride", "=", "(", "2", ",", "2", ",", "2", ")", ")", ")", "\n", "self", ".", "group3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "128", ",", "256", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "256", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv3d", "(", "256", ",", "256", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "256", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "MaxPool3d", "(", "kernel_size", "=", "(", "2", ",", "2", ",", "2", ")", ",", "stride", "=", "(", "2", ",", "2", ",", "2", ")", ")", ")", "\n", "self", ".", "group4", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "256", ",", "512", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv3d", "(", "512", ",", "512", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "MaxPool3d", "(", "kernel_size", "=", "(", "2", ",", "2", ",", "2", ")", ",", "stride", "=", "(", "2", ",", "2", ",", "2", ")", ")", ")", "\n", "self", ".", "group5", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "512", ",", "512", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv3d", "(", "512", ",", "512", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "MaxPool3d", "(", "kernel_size", "=", "(", "1", ",", "2", ",", "2", ")", ",", "stride", "=", "(", "2", ",", "2", ",", "2", ")", ",", "padding", "=", "(", "0", ",", "1", ",", "1", ")", ")", ")", "\n", "\n", "last_duration", "=", "int", "(", "math", ".", "floor", "(", "sample_duration", "/", "16", ")", ")", "\n", "last_size", "=", "int", "(", "math", ".", "ceil", "(", "sample_size", "/", "32", ")", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "(", "512", "*", "last_duration", "*", "last_size", "*", "last_size", ")", ",", "4096", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", "0.5", ")", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "4096", ",", "4096", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", "0.5", ")", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "4096", ",", "num_classes", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.c3d.C3D.forward": [[76, 87], ["c3d.C3D.group1", "c3d.C3D.group2", "c3d.C3D.group3", "c3d.C3D.group4", "c3d.C3D.group5", "c3d.C3D.view", "c3d.C3D.fc1", "c3d.C3D.fc2", "c3d.C3D.fc", "c3d.C3D.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "group1", "(", "x", ")", "\n", "out", "=", "self", ".", "group2", "(", "out", ")", "\n", "out", "=", "self", ".", "group3", "(", "out", ")", "\n", "out", "=", "self", ".", "group4", "(", "out", ")", "\n", "out", "=", "self", ".", "group5", "(", "out", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "fc1", "(", "out", ")", "\n", "out", "=", "self", ".", "fc2", "(", "out", ")", "\n", "out", "=", "self", ".", "fc", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.c3d.get_fine_tuning_parameters": [[89, 109], ["model.parameters", "ft_module_names.append", "model.named_parameters", "ValueError", "parameters.append", "parameters.append"], "function", ["None"], ["", "", "def", "get_fine_tuning_parameters", "(", "model", ",", "ft_portion", ")", ":", "\n", "    ", "if", "ft_portion", "==", "\"complete\"", ":", "\n", "        ", "return", "model", ".", "parameters", "(", ")", "\n", "\n", "", "elif", "ft_portion", "==", "\"last_layer\"", ":", "\n", "        ", "ft_module_names", "=", "[", "]", "\n", "ft_module_names", ".", "append", "(", "'fc'", ")", "\n", "\n", "parameters", "=", "[", "]", "\n", "for", "k", ",", "v", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "            ", "for", "ft_module", "in", "ft_module_names", ":", "\n", "                ", "if", "ft_module", "in", "k", ":", "\n", "                    ", "parameters", ".", "append", "(", "{", "'params'", ":", "v", "}", ")", "\n", "break", "\n", "", "", "else", ":", "\n", "                ", "parameters", ".", "append", "(", "{", "'params'", ":", "v", ",", "'lr'", ":", "0.0", "}", ")", "\n", "", "", "return", "parameters", "\n", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Unsupported ft_portion: 'complete' or 'last_layer' expected\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.c3d.get_model": [[111, 117], ["c3d.C3D"], "function", ["None"], ["", "", "def", "get_model", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    Returns the model.\n    \"\"\"", "\n", "model", "=", "C3D", "(", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.mobilenetv2.InvertedResidual.__init__": [[31, 61], ["torch.Module.__init__", "round", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU6", "torch.ReLU6", "torch.ReLU6", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU6", "torch.ReLU6", "torch.ReLU6", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU6", "torch.ReLU6", "torch.ReLU6", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.StereoLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inp", ",", "oup", ",", "stride", ",", "expand_ratio", ")", ":", "\n", "        ", "super", "(", "InvertedResidual", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "\n", "hidden_dim", "=", "round", "(", "inp", "*", "expand_ratio", ")", "\n", "self", ".", "use_res_connect", "=", "self", ".", "stride", "==", "(", "1", ",", "1", ",", "1", ")", "and", "inp", "==", "oup", "\n", "\n", "if", "expand_ratio", "==", "1", ":", "\n", "            ", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "# dw", "\n", "nn", ".", "Conv3d", "(", "hidden_dim", ",", "hidden_dim", ",", "3", ",", "stride", ",", "1", ",", "groups", "=", "hidden_dim", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "hidden_dim", ")", ",", "\n", "nn", ".", "ReLU6", "(", "inplace", "=", "True", ")", ",", "\n", "# pw-linear", "\n", "nn", ".", "Conv3d", "(", "hidden_dim", ",", "oup", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "oup", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "# pw", "\n", "nn", ".", "Conv3d", "(", "inp", ",", "hidden_dim", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "hidden_dim", ")", ",", "\n", "nn", ".", "ReLU6", "(", "inplace", "=", "True", ")", ",", "\n", "# dw", "\n", "nn", ".", "Conv3d", "(", "hidden_dim", ",", "hidden_dim", ",", "3", ",", "stride", ",", "1", ",", "groups", "=", "hidden_dim", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "hidden_dim", ")", ",", "\n", "nn", ".", "ReLU6", "(", "inplace", "=", "True", ")", ",", "\n", "# pw-linear", "\n", "nn", ".", "Conv3d", "(", "hidden_dim", ",", "oup", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "oup", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.mobilenetv2.InvertedResidual.forward": [[63, 68], ["mobilenetv2.InvertedResidual.conv", "mobilenetv2.InvertedResidual.conv"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "use_res_connect", ":", "\n", "            ", "return", "x", "+", "self", ".", "conv", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "conv", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.mobilenetv2.MobileNetV2.__init__": [[71, 111], ["torch.Module.__init__", "int", "mobilenetv2.MobileNetV2.features.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "mobilenetv2.MobileNetV2._initialize_weights", "int", "mobilenetv2.conv_bn", "int", "range", "mobilenetv2.conv_1x1x1_bn", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "mobilenetv2.MobileNetV2.features.append", "block"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.StereoLoss.__init__", "home.repos.pwc.inspect_result.zwxu064_RANP.models.mobilenetv2.MobileNetV2._initialize_weights", "home.repos.pwc.inspect_result.zwxu064_RANP.models.shufflenetv2.conv_bn", "home.repos.pwc.inspect_result.zwxu064_RANP.models.shufflenetv2.conv_1x1x1_bn"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", "=", "1000", ",", "sample_size", "=", "224", ",", "width_mult", "=", "1.", ")", ":", "\n", "        ", "super", "(", "MobileNetV2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "block", "=", "InvertedResidual", "\n", "input_channel", "=", "32", "\n", "last_channel", "=", "1280", "\n", "interverted_residual_setting", "=", "[", "\n", "# t, c, n, s", "\n", "[", "1", ",", "16", ",", "1", ",", "(", "1", ",", "1", ",", "1", ")", "]", ",", "\n", "[", "6", ",", "24", ",", "2", ",", "(", "2", ",", "2", ",", "2", ")", "]", ",", "\n", "[", "6", ",", "32", ",", "3", ",", "(", "2", ",", "2", ",", "2", ")", "]", ",", "\n", "[", "6", ",", "64", ",", "4", ",", "(", "2", ",", "2", ",", "2", ")", "]", ",", "\n", "[", "6", ",", "96", ",", "3", ",", "(", "1", ",", "1", ",", "1", ")", "]", ",", "\n", "[", "6", ",", "160", ",", "3", ",", "(", "2", ",", "2", ",", "2", ")", "]", ",", "\n", "[", "6", ",", "320", ",", "1", ",", "(", "1", ",", "1", ",", "1", ")", "]", ",", "\n", "]", "\n", "\n", "# building first layer", "\n", "assert", "sample_size", "%", "16", "==", "0.", "\n", "input_channel", "=", "int", "(", "input_channel", "*", "width_mult", ")", "\n", "self", ".", "last_channel", "=", "int", "(", "last_channel", "*", "width_mult", ")", "if", "width_mult", ">", "1.0", "else", "last_channel", "\n", "self", ".", "features", "=", "[", "conv_bn", "(", "3", ",", "input_channel", ",", "(", "1", ",", "2", ",", "2", ")", ")", "]", "\n", "# building inverted residual blocks", "\n", "for", "t", ",", "c", ",", "n", ",", "s", "in", "interverted_residual_setting", ":", "\n", "            ", "output_channel", "=", "int", "(", "c", "*", "width_mult", ")", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "                ", "stride", "=", "s", "if", "i", "==", "0", "else", "(", "1", ",", "1", ",", "1", ")", "\n", "self", ".", "features", ".", "append", "(", "block", "(", "input_channel", ",", "output_channel", ",", "stride", ",", "expand_ratio", "=", "t", ")", ")", "\n", "input_channel", "=", "output_channel", "\n", "# building last several layers", "\n", "", "", "self", ".", "features", ".", "append", "(", "conv_1x1x1_bn", "(", "input_channel", ",", "self", ".", "last_channel", ")", ")", "\n", "# make it nn.Sequential", "\n", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "features", ")", "\n", "\n", "# building classifier", "\n", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Dropout", "(", "0.2", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "last_channel", ",", "num_classes", ")", ",", "\n", ")", "\n", "\n", "self", ".", "_initialize_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.mobilenetv2.MobileNetV2.forward": [[112, 118], ["mobilenetv2.MobileNetV2.features", "torch.avg_pool3d", "torch.avg_pool3d", "torch.avg_pool3d", "mobilenetv2.MobileNetV2.view", "mobilenetv2.MobileNetV2.classifier", "mobilenetv2.MobileNetV2.size", "mobilenetv2.MobileNetV2.data.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "x", "=", "F", ".", "avg_pool3d", "(", "x", ",", "x", ".", "data", ".", "size", "(", ")", "[", "-", "3", ":", "]", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.mobilenetv2.MobileNetV2._initialize_weights": [[119, 133], ["mobilenetv2.MobileNetV2.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.bias.data.zero_", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "m.weight.size", "m.weight.data.normal_", "m.bias.data.zero_"], "methods", ["None"], ["", "def", "_initialize_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv3d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "kernel_size", "[", "2", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm3d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "n", "=", "m", ".", "weight", ".", "size", "(", "1", ")", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.mobilenetv2.conv_bn": [[14, 19], ["torch.Sequential", "torch.Conv3d", "torch.BatchNorm3d", "torch.ReLU6"], "function", ["None"], ["def", "conv_bn", "(", "inp", ",", "oup", ",", "stride", ")", ":", "\n", "    ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "inp", ",", "oup", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "(", "1", ",", "1", ",", "1", ")", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "oup", ")", ",", "\n", "nn", ".", "ReLU6", "(", "inplace", "=", "True", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.mobilenetv2.conv_1x1x1_bn": [[22, 27], ["torch.Sequential", "torch.Conv3d", "torch.BatchNorm3d", "torch.ReLU6"], "function", ["None"], ["", "def", "conv_1x1x1_bn", "(", "inp", ",", "oup", ")", ":", "\n", "    ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "inp", ",", "oup", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "oup", ")", ",", "\n", "nn", ".", "ReLU6", "(", "inplace", "=", "True", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.mobilenetv2.get_fine_tuning_parameters": [[135, 155], ["model.parameters", "ft_module_names.append", "model.named_parameters", "ValueError", "parameters.append", "parameters.append"], "function", ["None"], ["", "", "", "", "def", "get_fine_tuning_parameters", "(", "model", ",", "ft_portion", ")", ":", "\n", "    ", "if", "ft_portion", "==", "\"complete\"", ":", "\n", "        ", "return", "model", ".", "parameters", "(", ")", "\n", "\n", "", "elif", "ft_portion", "==", "\"last_layer\"", ":", "\n", "        ", "ft_module_names", "=", "[", "]", "\n", "ft_module_names", ".", "append", "(", "'classifier'", ")", "\n", "\n", "parameters", "=", "[", "]", "\n", "for", "k", ",", "v", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "            ", "for", "ft_module", "in", "ft_module_names", ":", "\n", "                ", "if", "ft_module", "in", "k", ":", "\n", "                    ", "parameters", ".", "append", "(", "{", "'params'", ":", "v", "}", ")", "\n", "break", "\n", "", "", "else", ":", "\n", "                ", "parameters", ".", "append", "(", "{", "'params'", ":", "v", ",", "'lr'", ":", "0.0", "}", ")", "\n", "", "", "return", "parameters", "\n", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Unsupported ft_portion: 'complete' or 'last_layer' expected\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.mobilenetv2.get_model": [[157, 163], ["mobilenetv2.MobileNetV2"], "function", ["None"], ["", "", "def", "get_model", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    Returns the model.\n    \"\"\"", "\n", "model", "=", "MobileNetV2", "(", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.shufflenet.Bottleneck.__init__": [[35, 53], ["torch.Module.__init__", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.AvgPool3d", "torch.AvgPool3d", "torch.AvgPool3d"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.StereoLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "stride", ",", "groups", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "groups", "=", "groups", "\n", "mid_planes", "=", "out_planes", "//", "4", "\n", "if", "self", ".", "stride", "==", "2", ":", "\n", "            ", "out_planes", "=", "out_planes", "-", "in_planes", "\n", "", "g", "=", "1", "if", "in_planes", "==", "24", "else", "groups", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv3d", "(", "in_planes", ",", "mid_planes", ",", "kernel_size", "=", "1", ",", "groups", "=", "g", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm3d", "(", "mid_planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv3d", "(", "mid_planes", ",", "mid_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "groups", "=", "mid_planes", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm3d", "(", "mid_planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv3d", "(", "mid_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "groups", "=", "groups", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm3d", "(", "out_planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "if", "stride", "==", "2", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "AvgPool3d", "(", "kernel_size", "=", "(", "2", ",", "3", ",", "3", ")", ",", "stride", "=", "2", ",", "padding", "=", "(", "0", ",", "1", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.shufflenet.Bottleneck.forward": [[55, 67], ["shufflenet.Bottleneck.relu", "shufflenet.channel_shuffle", "shufflenet.Bottleneck.bn2", "shufflenet.Bottleneck.bn3", "shufflenet.Bottleneck.bn1", "shufflenet.Bottleneck.conv2", "shufflenet.Bottleneck.conv3", "shufflenet.Bottleneck.relu", "shufflenet.Bottleneck.relu", "shufflenet.Bottleneck.conv1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "shufflenet.Bottleneck.shortcut"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.models.shufflenetv2.channel_shuffle"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "channel_shuffle", "(", "out", ",", "self", ".", "groups", ")", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", "\n", "\n", "if", "self", ".", "stride", "==", "2", ":", "\n", "            ", "out", "=", "self", ".", "relu", "(", "torch", ".", "cat", "(", "[", "out", ",", "self", ".", "shortcut", "(", "x", ")", "]", ",", "1", ")", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "self", ".", "relu", "(", "out", "+", "x", ")", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.shufflenet.ShuffleNet.__init__": [[70, 107], ["torch.Module.__init__", "shufflenet.conv_bn", "torch.MaxPool3d", "torch.MaxPool3d", "torch.MaxPool3d", "shufflenet.ShuffleNet._make_layer", "shufflenet.ShuffleNet._make_layer", "shufflenet.ShuffleNet._make_layer", "torch.Sequential", "torch.Sequential", "torch.Sequential", "int", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "ValueError"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.StereoLoss.__init__", "home.repos.pwc.inspect_result.zwxu064_RANP.models.shufflenetv2.conv_bn", "home.repos.pwc.inspect_result.zwxu064_RANP.models.submodule.feature_extraction._make_layer", "home.repos.pwc.inspect_result.zwxu064_RANP.models.submodule.feature_extraction._make_layer", "home.repos.pwc.inspect_result.zwxu064_RANP.models.submodule.feature_extraction._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "\n", "groups", ",", "\n", "width_mult", "=", "1", ",", "\n", "num_classes", "=", "400", ")", ":", "\n", "        ", "super", "(", "ShuffleNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "groups", "=", "groups", "\n", "num_blocks", "=", "[", "4", ",", "8", ",", "4", "]", "\n", "\n", "# index 0 is invalid and should never be called.", "\n", "# only used for indexing convenience.", "\n", "if", "groups", "==", "1", ":", "\n", "            ", "out_planes", "=", "[", "24", ",", "144", ",", "288", ",", "567", "]", "\n", "", "elif", "groups", "==", "2", ":", "\n", "            ", "out_planes", "=", "[", "24", ",", "200", ",", "400", ",", "800", "]", "\n", "", "elif", "groups", "==", "3", ":", "\n", "            ", "out_planes", "=", "[", "24", ",", "240", ",", "480", ",", "960", "]", "\n", "", "elif", "groups", "==", "4", ":", "\n", "            ", "out_planes", "=", "[", "24", ",", "272", ",", "544", ",", "1088", "]", "\n", "", "elif", "groups", "==", "8", ":", "\n", "            ", "out_planes", "=", "[", "24", ",", "384", ",", "768", ",", "1536", "]", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"\"\"{} groups is not supported for\n                   1x1 Grouped Convolutions\"\"\"", ".", "format", "(", "num_groups", ")", ")", "\n", "", "out_planes", "=", "[", "int", "(", "i", "*", "width_mult", ")", "for", "i", "in", "out_planes", "]", "\n", "self", ".", "in_planes", "=", "out_planes", "[", "0", "]", "\n", "self", ".", "conv1", "=", "conv_bn", "(", "3", ",", "self", ".", "in_planes", ",", "stride", "=", "(", "1", ",", "2", ",", "2", ")", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool3d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "out_planes", "[", "1", "]", ",", "num_blocks", "[", "0", "]", ",", "self", ".", "groups", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "out_planes", "[", "2", "]", ",", "num_blocks", "[", "1", "]", ",", "self", ".", "groups", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "out_planes", "[", "3", "]", ",", "num_blocks", "[", "2", "]", ",", "self", ".", "groups", ")", "\n", "\n", "# building classifier", "\n", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Dropout", "(", "0.2", ")", ",", "\n", "nn", ".", "Linear", "(", "out_planes", "[", "3", "]", ",", "self", ".", "num_classes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.shufflenet.ShuffleNet._make_layer": [[109, 116], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "shufflenet.Bottleneck"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "out_planes", ",", "num_blocks", ",", "groups", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_blocks", ")", ":", "\n", "            ", "stride", "=", "2", "if", "i", "==", "0", "else", "1", "\n", "layers", ".", "append", "(", "Bottleneck", "(", "self", ".", "in_planes", ",", "out_planes", ",", "stride", "=", "stride", ",", "groups", "=", "groups", ")", ")", "\n", "self", ".", "in_planes", "=", "out_planes", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.shufflenet.ShuffleNet.forward": [[117, 127], ["shufflenet.ShuffleNet.conv1", "shufflenet.ShuffleNet.maxpool", "shufflenet.ShuffleNet.layer1", "shufflenet.ShuffleNet.layer2", "shufflenet.ShuffleNet.layer3", "torch.avg_pool3d", "torch.avg_pool3d", "torch.avg_pool3d", "shufflenet.ShuffleNet.view", "shufflenet.ShuffleNet.classifier", "shufflenet.ShuffleNet.size", "shufflenet.ShuffleNet.data.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "maxpool", "(", "out", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool3d", "(", "out", ",", "out", ".", "data", ".", "size", "(", ")", "[", "-", "3", ":", "]", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "classifier", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.shufflenet.conv_bn": [[11, 16], ["torch.Sequential", "torch.Conv3d", "torch.BatchNorm3d", "torch.ReLU"], "function", ["None"], ["def", "conv_bn", "(", "inp", ",", "oup", ",", "stride", ")", ":", "\n", "    ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "inp", ",", "oup", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "(", "1", ",", "1", ",", "1", ")", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "oup", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.shufflenet.channel_shuffle": [[19, 31], ["x.view.data.size", "x.view.view", "x.view.permute().contiguous", "x.view.view", "x.view.permute"], "function", ["None"], ["", "def", "channel_shuffle", "(", "x", ",", "groups", ")", ":", "\n", "    ", "'''Channel shuffle: [N,C,H,W] -> [N,g,C/g,H,W] -> [N,C/g,g,H,w] -> [N,C,H,W]'''", "\n", "batchsize", ",", "num_channels", ",", "depth", ",", "height", ",", "width", "=", "x", ".", "data", ".", "size", "(", ")", "\n", "channels_per_group", "=", "num_channels", "//", "groups", "\n", "# reshape", "\n", "x", "=", "x", ".", "view", "(", "batchsize", ",", "groups", ",", "\n", "channels_per_group", ",", "depth", ",", "height", ",", "width", ")", "\n", "#permute", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ",", "4", ",", "5", ")", ".", "contiguous", "(", ")", "\n", "# flatten", "\n", "x", "=", "x", ".", "view", "(", "batchsize", ",", "num_channels", ",", "depth", ",", "height", ",", "width", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.shufflenet.get_fine_tuning_parameters": [[128, 148], ["model.parameters", "ft_module_names.append", "model.named_parameters", "ValueError", "parameters.append", "parameters.append"], "function", ["None"], ["", "", "def", "get_fine_tuning_parameters", "(", "model", ",", "ft_portion", ")", ":", "\n", "    ", "if", "ft_portion", "==", "\"complete\"", ":", "\n", "        ", "return", "model", ".", "parameters", "(", ")", "\n", "\n", "", "elif", "ft_portion", "==", "\"last_layer\"", ":", "\n", "        ", "ft_module_names", "=", "[", "]", "\n", "ft_module_names", ".", "append", "(", "'classifier'", ")", "\n", "\n", "parameters", "=", "[", "]", "\n", "for", "k", ",", "v", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "            ", "for", "ft_module", "in", "ft_module_names", ":", "\n", "                ", "if", "ft_module", "in", "k", ":", "\n", "                    ", "parameters", ".", "append", "(", "{", "'params'", ":", "v", "}", ")", "\n", "break", "\n", "", "", "else", ":", "\n", "                ", "parameters", ".", "append", "(", "{", "'params'", ":", "v", ",", "'lr'", ":", "0.0", "}", ")", "\n", "", "", "return", "parameters", "\n", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Unsupported ft_portion: 'complete' or 'last_layer' expected\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.shufflenet.get_model": [[150, 156], ["shufflenet.ShuffleNet"], "function", ["None"], ["", "", "def", "get_model", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    Returns the model.\n    \"\"\"", "\n", "model", "=", "ShuffleNet", "(", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.shufflenetv2.InvertedResidual.__init__": [[43, 88], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.StereoLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inp", ",", "oup", ",", "stride", ")", ":", "\n", "        ", "super", "(", "InvertedResidual", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "assert", "stride", "in", "[", "1", ",", "2", "]", "\n", "\n", "oup_inc", "=", "oup", "//", "2", "\n", "\n", "if", "self", ".", "stride", "==", "1", ":", "\n", "#assert inp == oup_inc", "\n", "        \t", "self", ".", "banch2", "=", "nn", ".", "Sequential", "(", "\n", "# pw", "\n", "nn", ".", "Conv3d", "(", "oup_inc", ",", "oup_inc", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "oup_inc", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "# dw", "\n", "nn", ".", "Conv3d", "(", "oup_inc", ",", "oup_inc", ",", "3", ",", "stride", ",", "1", ",", "groups", "=", "oup_inc", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "oup_inc", ")", ",", "\n", "# pw-linear", "\n", "nn", ".", "Conv3d", "(", "oup_inc", ",", "oup_inc", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "oup_inc", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "banch1", "=", "nn", ".", "Sequential", "(", "\n", "# dw", "\n", "nn", ".", "Conv3d", "(", "inp", ",", "inp", ",", "3", ",", "stride", ",", "1", ",", "groups", "=", "inp", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "inp", ")", ",", "\n", "# pw-linear", "\n", "nn", ".", "Conv3d", "(", "inp", ",", "oup_inc", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "oup_inc", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "\n", "self", ".", "banch2", "=", "nn", ".", "Sequential", "(", "\n", "# pw", "\n", "nn", ".", "Conv3d", "(", "inp", ",", "oup_inc", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "oup_inc", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "# dw", "\n", "nn", ".", "Conv3d", "(", "oup_inc", ",", "oup_inc", ",", "3", ",", "stride", ",", "1", ",", "groups", "=", "oup_inc", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "oup_inc", ")", ",", "\n", "# pw-linear", "\n", "nn", ".", "Conv3d", "(", "oup_inc", ",", "oup_inc", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "oup_inc", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.shufflenetv2.InvertedResidual._concat": [[90, 94], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "_concat", "(", "x", ",", "out", ")", ":", "\n", "# concatenate along channel axis", "\n", "        ", "return", "torch", ".", "cat", "(", "(", "x", ",", "out", ")", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.shufflenetv2.InvertedResidual.forward": [[95, 104], ["shufflenetv2.channel_shuffle", "shufflenetv2.InvertedResidual._concat", "shufflenetv2.InvertedResidual.banch2", "shufflenetv2.InvertedResidual._concat", "shufflenetv2.InvertedResidual.banch1", "shufflenetv2.InvertedResidual.banch2"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.models.shufflenetv2.channel_shuffle", "home.repos.pwc.inspect_result.zwxu064_RANP.models.shufflenetv2.InvertedResidual._concat", "home.repos.pwc.inspect_result.zwxu064_RANP.models.shufflenetv2.InvertedResidual._concat"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "stride", "==", "1", ":", "\n", "            ", "x1", "=", "x", "[", ":", ",", ":", "(", "x", ".", "shape", "[", "1", "]", "//", "2", ")", ",", ":", ",", ":", ",", ":", "]", "\n", "x2", "=", "x", "[", ":", ",", "(", "x", ".", "shape", "[", "1", "]", "//", "2", ")", ":", ",", ":", ",", ":", ",", ":", "]", "\n", "out", "=", "self", ".", "_concat", "(", "x1", ",", "self", ".", "banch2", "(", "x2", ")", ")", "\n", "", "elif", "self", ".", "stride", "==", "2", ":", "\n", "            ", "out", "=", "self", ".", "_concat", "(", "self", ".", "banch1", "(", "x", ")", ",", "self", ".", "banch2", "(", "x", ")", ")", "\n", "\n", "", "return", "channel_shuffle", "(", "out", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.shufflenetv2.ShuffleNetV2.__init__": [[107, 154], ["torch.Module.__init__", "shufflenetv2.conv_bn", "torch.MaxPool3d", "torch.MaxPool3d", "torch.MaxPool3d", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "shufflenetv2.conv_1x1x1_bn", "torch.Sequential", "torch.Sequential", "torch.Sequential", "len", "range", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "shufflenetv2.ShuffleNetV2.features.append", "shufflenetv2.InvertedResidual", "ValueError"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.StereoLoss.__init__", "home.repos.pwc.inspect_result.zwxu064_RANP.models.shufflenetv2.conv_bn", "home.repos.pwc.inspect_result.zwxu064_RANP.models.shufflenetv2.conv_1x1x1_bn"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", "=", "600", ",", "sample_size", "=", "112", ",", "width_mult", "=", "1.", ")", ":", "\n", "        ", "super", "(", "ShuffleNetV2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "sample_size", "%", "16", "==", "0", "\n", "\n", "self", ".", "stage_repeats", "=", "[", "4", ",", "8", ",", "4", "]", "\n", "# index 0 is invalid and should never be called.", "\n", "# only used for indexing convenience.", "\n", "if", "width_mult", "==", "0.25", ":", "\n", "            ", "self", ".", "stage_out_channels", "=", "[", "-", "1", ",", "24", ",", "32", ",", "64", ",", "128", ",", "1024", "]", "\n", "", "elif", "width_mult", "==", "0.5", ":", "\n", "            ", "self", ".", "stage_out_channels", "=", "[", "-", "1", ",", "24", ",", "48", ",", "96", ",", "192", ",", "1024", "]", "\n", "", "elif", "width_mult", "==", "1.0", ":", "\n", "            ", "self", ".", "stage_out_channels", "=", "[", "-", "1", ",", "24", ",", "116", ",", "232", ",", "464", ",", "1024", "]", "\n", "", "elif", "width_mult", "==", "1.5", ":", "\n", "            ", "self", ".", "stage_out_channels", "=", "[", "-", "1", ",", "24", ",", "176", ",", "352", ",", "704", ",", "1024", "]", "\n", "", "elif", "width_mult", "==", "2.0", ":", "\n", "            ", "self", ".", "stage_out_channels", "=", "[", "-", "1", ",", "24", ",", "224", ",", "488", ",", "976", ",", "2048", "]", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"\"\"{} groups is not supported for\n                       1x1 Grouped Convolutions\"\"\"", ".", "format", "(", "num_groups", ")", ")", "\n", "\n", "# building first layer", "\n", "", "input_channel", "=", "self", ".", "stage_out_channels", "[", "1", "]", "\n", "self", ".", "conv1", "=", "conv_bn", "(", "3", ",", "input_channel", ",", "stride", "=", "(", "1", ",", "2", ",", "2", ")", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool3d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "features", "=", "[", "]", "\n", "# building inverted residual blocks", "\n", "for", "idxstage", "in", "range", "(", "len", "(", "self", ".", "stage_repeats", ")", ")", ":", "\n", "            ", "numrepeat", "=", "self", ".", "stage_repeats", "[", "idxstage", "]", "\n", "output_channel", "=", "self", ".", "stage_out_channels", "[", "idxstage", "+", "2", "]", "\n", "for", "i", "in", "range", "(", "numrepeat", ")", ":", "\n", "                ", "stride", "=", "2", "if", "i", "==", "0", "else", "1", "\n", "self", ".", "features", ".", "append", "(", "InvertedResidual", "(", "input_channel", ",", "output_channel", ",", "stride", ")", ")", "\n", "input_channel", "=", "output_channel", "\n", "\n", "# make it nn.Sequential", "\n", "", "", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "features", ")", "\n", "\n", "# building last several layers", "\n", "self", ".", "conv_last", "=", "conv_1x1x1_bn", "(", "input_channel", ",", "self", ".", "stage_out_channels", "[", "-", "1", "]", ")", "\n", "\n", "# building classifier", "\n", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Dropout", "(", "0.2", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "stage_out_channels", "[", "-", "1", "]", ",", "num_classes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.shufflenetv2.ShuffleNetV2.forward": [[156, 165], ["shufflenetv2.ShuffleNetV2.conv1", "shufflenetv2.ShuffleNetV2.maxpool", "shufflenetv2.ShuffleNetV2.features", "shufflenetv2.ShuffleNetV2.conv_last", "torch.avg_pool3d", "torch.avg_pool3d", "torch.avg_pool3d", "shufflenetv2.ShuffleNetV2.view", "shufflenetv2.ShuffleNetV2.classifier", "shufflenetv2.ShuffleNetV2.size", "shufflenetv2.ShuffleNetV2.data.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "maxpool", "(", "out", ")", "\n", "out", "=", "self", ".", "features", "(", "out", ")", "\n", "out", "=", "self", ".", "conv_last", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool3d", "(", "out", ",", "out", ".", "data", ".", "size", "(", ")", "[", "-", "3", ":", "]", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "classifier", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.shufflenetv2.conv_bn": [[15, 20], ["torch.Sequential", "torch.Conv3d", "torch.BatchNorm3d", "torch.ReLU"], "function", ["None"], ["def", "conv_bn", "(", "inp", ",", "oup", ",", "stride", ")", ":", "\n", "    ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "inp", ",", "oup", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "(", "1", ",", "1", ",", "1", ")", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "oup", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.shufflenetv2.conv_1x1x1_bn": [[22, 27], ["torch.Sequential", "torch.Conv3d", "torch.BatchNorm3d", "torch.ReLU"], "function", ["None"], ["", "def", "conv_1x1x1_bn", "(", "inp", ",", "oup", ")", ":", "\n", "    ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "inp", ",", "oup", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "oup", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.shufflenetv2.channel_shuffle": [[29, 41], ["x.view.data.size", "x.view.view", "x.view.permute().contiguous", "x.view.view", "x.view.permute"], "function", ["None"], ["", "def", "channel_shuffle", "(", "x", ",", "groups", ")", ":", "\n", "    ", "'''Channel shuffle: [N,C,H,W] -> [N,g,C/g,H,W] -> [N,C/g,g,H,w] -> [N,C,H,W]'''", "\n", "batchsize", ",", "num_channels", ",", "depth", ",", "height", ",", "width", "=", "x", ".", "data", ".", "size", "(", ")", "\n", "channels_per_group", "=", "num_channels", "//", "groups", "\n", "# reshape", "\n", "x", "=", "x", ".", "view", "(", "batchsize", ",", "groups", ",", "\n", "channels_per_group", ",", "depth", ",", "height", ",", "width", ")", "\n", "#permute", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ",", "4", ",", "5", ")", ".", "contiguous", "(", ")", "\n", "# flatten", "\n", "x", "=", "x", ".", "view", "(", "batchsize", ",", "num_channels", ",", "depth", ",", "height", ",", "width", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.shufflenetv2.get_fine_tuning_parameters": [[167, 187], ["model.parameters", "ft_module_names.append", "model.named_parameters", "ValueError", "parameters.append", "parameters.append"], "function", ["None"], ["", "", "def", "get_fine_tuning_parameters", "(", "model", ",", "ft_portion", ")", ":", "\n", "    ", "if", "ft_portion", "==", "\"complete\"", ":", "\n", "        ", "return", "model", ".", "parameters", "(", ")", "\n", "\n", "", "elif", "ft_portion", "==", "\"last_layer\"", ":", "\n", "        ", "ft_module_names", "=", "[", "]", "\n", "ft_module_names", ".", "append", "(", "'classifier'", ")", "\n", "\n", "parameters", "=", "[", "]", "\n", "for", "k", ",", "v", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "            ", "for", "ft_module", "in", "ft_module_names", ":", "\n", "                ", "if", "ft_module", "in", "k", ":", "\n", "                    ", "parameters", ".", "append", "(", "{", "'params'", ":", "v", "}", ")", "\n", "break", "\n", "", "", "else", ":", "\n", "                ", "parameters", ".", "append", "(", "{", "'params'", ":", "v", ",", "'lr'", ":", "0.0", "}", ")", "\n", "", "", "return", "parameters", "\n", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Unsupported ft_portion: 'complete' or 'last_layer' expected\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.shufflenetv2.get_model": [[189, 195], ["shufflenetv2.ShuffleNetV2"], "function", ["None"], ["", "", "def", "get_model", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    Returns the model.\n    \"\"\"", "\n", "model", "=", "ShuffleNetV2", "(", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.resnet.BasicBlock.__init__": [[41, 50], ["torch.Module.__init__", "resnet.conv3x3x3", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "resnet.conv3x3x3", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.StereoLoss.__init__", "home.repos.pwc.inspect_result.zwxu064_RANP.models.resnext.conv3x3x3", "home.repos.pwc.inspect_result.zwxu064_RANP.models.resnext.conv3x3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm3d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm3d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.resnet.BasicBlock.forward": [[51, 68], ["resnet.BasicBlock.conv1", "resnet.BasicBlock.bn1", "resnet.BasicBlock.relu", "resnet.BasicBlock.conv2", "resnet.BasicBlock.bn2", "resnet.BasicBlock.relu", "resnet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.resnet.Bottleneck.__init__": [[73, 85], ["torch.Module.__init__", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.StereoLoss.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv3d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm3d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv3d", "(", "\n", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm3d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv3d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm3d", "(", "planes", "*", "4", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.resnet.Bottleneck.forward": [[86, 107], ["resnet.Bottleneck.conv1", "resnet.Bottleneck.bn1", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv2", "resnet.Bottleneck.bn2", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv3", "resnet.Bottleneck.bn3", "resnet.Bottleneck.relu", "resnet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.resnet.ResNet.__init__": [[111, 149], ["torch.Module.__init__", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool3d", "torch.MaxPool3d", "torch.MaxPool3d", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "int", "int", "torch.AvgPool3d", "torch.AvgPool3d", "torch.AvgPool3d", "torch.Linear", "torch.Linear", "torch.Linear", "resnet.ResNet.modules", "math.ceil", "math.ceil", "isinstance", "torch.init.kaiming_normal", "torch.init.kaiming_normal", "torch.init.kaiming_normal", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.StereoLoss.__init__", "home.repos.pwc.inspect_result.zwxu064_RANP.models.submodule.feature_extraction._make_layer", "home.repos.pwc.inspect_result.zwxu064_RANP.models.submodule.feature_extraction._make_layer", "home.repos.pwc.inspect_result.zwxu064_RANP.models.submodule.feature_extraction._make_layer", "home.repos.pwc.inspect_result.zwxu064_RANP.models.submodule.feature_extraction._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "\n", "block", ",", "\n", "layers", ",", "\n", "sample_size", ",", "\n", "sample_duration", ",", "\n", "shortcut_type", "=", "'B'", ",", "\n", "num_classes", "=", "400", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv3d", "(", "\n", "3", ",", "\n", "64", ",", "\n", "kernel_size", "=", "7", ",", "\n", "stride", "=", "(", "1", ",", "2", ",", "2", ")", ",", "\n", "padding", "=", "(", "3", ",", "3", ",", "3", ")", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm3d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool3d", "(", "kernel_size", "=", "(", "3", ",", "3", ",", "3", ")", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ",", "shortcut_type", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "shortcut_type", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "shortcut_type", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "shortcut_type", ",", "stride", "=", "2", ")", "\n", "last_duration", "=", "int", "(", "math", ".", "ceil", "(", "sample_duration", "/", "16", ")", ")", "\n", "last_size", "=", "int", "(", "math", ".", "ceil", "(", "sample_size", "/", "32", ")", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool3d", "(", "\n", "(", "last_duration", ",", "last_size", ",", "last_size", ")", ",", "stride", "=", "1", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv3d", ")", ":", "\n", "                ", "m", ".", "weight", "=", "nn", ".", "init", ".", "kaiming_normal", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm3d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.resnet.ResNet._make_layer": [[150, 174], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "functools.partial", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "shortcut_type", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "if", "shortcut_type", "==", "'A'", ":", "\n", "                ", "downsample", "=", "partial", "(", "\n", "downsample_basic_block", ",", "\n", "planes", "=", "planes", "*", "block", ".", "expansion", ",", "\n", "stride", "=", "stride", ")", "\n", "", "else", ":", "\n", "                ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "\n", "self", ".", "inplanes", ",", "\n", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "stride", ",", "\n", "bias", "=", "False", ")", ",", "nn", ".", "BatchNorm3d", "(", "planes", "*", "block", ".", "expansion", ")", ")", "\n", "\n", "", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.resnet.ResNet.forward": [[175, 192], ["resnet.ResNet.conv1", "resnet.ResNet.bn1", "resnet.ResNet.relu", "resnet.ResNet.maxpool", "resnet.ResNet.layer1", "resnet.ResNet.layer2", "resnet.ResNet.layer3", "resnet.ResNet.layer4", "resnet.ResNet.avgpool", "resnet.ResNet.view", "resnet.ResNet.fc", "resnet.ResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.resnet.conv3x3x3": [[14, 23], ["torch.Conv3d"], "function", ["None"], ["def", "conv3x3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "# 3x3x3 convolution with padding", "\n", "    ", "return", "nn", ".", "Conv3d", "(", "\n", "in_planes", ",", "\n", "out_planes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.resnet.downsample_basic_block": [[25, 36], ["torch.avg_pool3d", "torch.Tensor().zero_", "torch.Tensor().zero_", "torch.Tensor().zero_", "isinstance", "torch.autograd.Variable", "zero_pads.cuda.cuda", "torch.cat", "torch.cat", "torch.cat", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size"], "function", ["None"], ["", "def", "downsample_basic_block", "(", "x", ",", "planes", ",", "stride", ")", ":", "\n", "    ", "out", "=", "F", ".", "avg_pool3d", "(", "x", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ")", "\n", "zero_pads", "=", "torch", ".", "Tensor", "(", "\n", "out", ".", "size", "(", "0", ")", ",", "planes", "-", "out", ".", "size", "(", "1", ")", ",", "out", ".", "size", "(", "2", ")", ",", "out", ".", "size", "(", "3", ")", ",", "\n", "out", ".", "size", "(", "4", ")", ")", ".", "zero_", "(", ")", "\n", "if", "isinstance", "(", "out", ".", "data", ",", "torch", ".", "cuda", ".", "FloatTensor", ")", ":", "\n", "        ", "zero_pads", "=", "zero_pads", ".", "cuda", "(", ")", "\n", "\n", "", "out", "=", "Variable", "(", "torch", ".", "cat", "(", "[", "out", ".", "data", ",", "zero_pads", "]", ",", "dim", "=", "1", ")", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.resnet.get_fine_tuning_parameters": [[194, 214], ["model.parameters", "ft_module_names.append", "model.named_parameters", "ValueError", "parameters.append", "parameters.append"], "function", ["None"], ["", "", "def", "get_fine_tuning_parameters", "(", "model", ",", "ft_portion", ")", ":", "\n", "    ", "if", "ft_portion", "==", "\"complete\"", ":", "\n", "        ", "return", "model", ".", "parameters", "(", ")", "\n", "\n", "", "elif", "ft_portion", "==", "\"last_layer\"", ":", "\n", "        ", "ft_module_names", "=", "[", "]", "\n", "ft_module_names", ".", "append", "(", "'fc'", ")", "\n", "\n", "parameters", "=", "[", "]", "\n", "for", "k", ",", "v", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "            ", "for", "ft_module", "in", "ft_module_names", ":", "\n", "                ", "if", "ft_module", "in", "k", ":", "\n", "                    ", "parameters", ".", "append", "(", "{", "'params'", ":", "v", "}", ")", "\n", "break", "\n", "", "", "else", ":", "\n", "                ", "parameters", ".", "append", "(", "{", "'params'", ":", "v", ",", "'lr'", ":", "0.0", "}", ")", "\n", "", "", "return", "parameters", "\n", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Unsupported ft_portion: 'complete' or 'last_layer' expected\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.resnet.resnet10": [[216, 221], ["resnet.ResNet"], "function", ["None"], ["", "", "def", "resnet10", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-18 model.\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.resnet.resnet18": [[223, 228], ["resnet.ResNet"], "function", ["None"], ["", "def", "resnet18", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-18 model.\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.resnet.resnet34": [[230, 235], ["resnet.ResNet"], "function", ["None"], ["", "def", "resnet34", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-34 model.\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.resnet.resnet50": [[237, 242], ["resnet.ResNet"], "function", ["None"], ["", "def", "resnet50", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-50 model.\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.resnet.resnet101": [[244, 249], ["resnet.ResNet"], "function", ["None"], ["", "def", "resnet101", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-101 model.\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.resnet.resnet152": [[251, 256], ["resnet.ResNet"], "function", ["None"], ["", "def", "resnet152", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-101 model.\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.resnet.resnet200": [[258, 263], ["resnet.ResNet"], "function", ["None"], ["", "def", "resnet200", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-101 model.\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "24", ",", "36", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.resnext.ResNeXtBottleneck.__init__": [[38, 59], ["torch.Module.__init__", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "int"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.StereoLoss.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "cardinality", ",", "stride", "=", "1", ",", "\n", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "ResNeXtBottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "mid_planes", "=", "cardinality", "*", "int", "(", "planes", "/", "32", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv3d", "(", "inplanes", ",", "mid_planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm3d", "(", "mid_planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv3d", "(", "\n", "mid_planes", ",", "\n", "mid_planes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "\n", "groups", "=", "cardinality", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm3d", "(", "mid_planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv3d", "(", "\n", "mid_planes", ",", "planes", "*", "self", ".", "expansion", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm3d", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.resnext.ResNeXtBottleneck.forward": [[60, 81], ["resnext.ResNeXtBottleneck.conv1", "resnext.ResNeXtBottleneck.bn1", "resnext.ResNeXtBottleneck.relu", "resnext.ResNeXtBottleneck.conv2", "resnext.ResNeXtBottleneck.bn2", "resnext.ResNeXtBottleneck.relu", "resnext.ResNeXtBottleneck.conv3", "resnext.ResNeXtBottleneck.bn3", "resnext.ResNeXtBottleneck.relu", "resnext.ResNeXtBottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.resnext.ResNeXt.__init__": [[85, 133], ["torch.Module.__init__", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool3d", "torch.MaxPool3d", "torch.MaxPool3d", "resnext.ResNeXt._make_layer", "resnext.ResNeXt._make_layer", "resnext.ResNeXt._make_layer", "resnext.ResNeXt._make_layer", "int", "int", "torch.AvgPool3d", "torch.AvgPool3d", "torch.AvgPool3d", "torch.Linear", "torch.Linear", "torch.Linear", "resnext.ResNeXt.modules", "math.ceil", "math.ceil", "isinstance", "torch.init.kaiming_normal", "torch.init.kaiming_normal", "torch.init.kaiming_normal", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.StereoLoss.__init__", "home.repos.pwc.inspect_result.zwxu064_RANP.models.submodule.feature_extraction._make_layer", "home.repos.pwc.inspect_result.zwxu064_RANP.models.submodule.feature_extraction._make_layer", "home.repos.pwc.inspect_result.zwxu064_RANP.models.submodule.feature_extraction._make_layer", "home.repos.pwc.inspect_result.zwxu064_RANP.models.submodule.feature_extraction._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "\n", "block", ",", "\n", "layers", ",", "\n", "sample_size", ",", "\n", "sample_duration", ",", "\n", "shortcut_type", "=", "'B'", ",", "\n", "cardinality", "=", "32", ",", "\n", "num_classes", "=", "400", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "ResNeXt", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv3d", "(", "\n", "3", ",", "\n", "64", ",", "\n", "kernel_size", "=", "7", ",", "\n", "stride", "=", "(", "1", ",", "2", ",", "2", ")", ",", "\n", "padding", "=", "(", "3", ",", "3", ",", "3", ")", ",", "\n", "bias", "=", "False", ")", "\n", "#self.conv1 = nn.Conv3d(", "\n", "#    3,", "\n", "#    64,", "\n", "#    kernel_size=(3,7,7),", "\n", "#    stride=(1, 2, 2),", "\n", "#    padding=(1, 3, 3),", "\n", "#    bias=False)", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm3d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool3d", "(", "kernel_size", "=", "(", "3", ",", "3", ",", "3", ")", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "0", "]", ",", "shortcut_type", ",", "\n", "cardinality", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "256", ",", "layers", "[", "1", "]", ",", "shortcut_type", ",", "cardinality", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "512", ",", "layers", "[", "2", "]", ",", "shortcut_type", ",", "cardinality", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "1024", ",", "layers", "[", "3", "]", ",", "shortcut_type", ",", "cardinality", ",", "stride", "=", "2", ")", "\n", "last_duration", "=", "int", "(", "math", ".", "ceil", "(", "sample_duration", "/", "16", ")", ")", "\n", "#last_duration = 1", "\n", "last_size", "=", "int", "(", "math", ".", "ceil", "(", "sample_size", "/", "32", ")", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool3d", "(", "\n", "(", "last_duration", ",", "last_size", ",", "last_size", ")", ",", "stride", "=", "1", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "cardinality", "*", "32", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv3d", ")", ":", "\n", "                ", "m", ".", "weight", "=", "nn", ".", "init", ".", "kaiming_normal", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm3d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.resnext.ResNeXt._make_layer": [[134, 165], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "functools.partial", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "\n", "block", ",", "\n", "planes", ",", "\n", "blocks", ",", "\n", "shortcut_type", ",", "\n", "cardinality", ",", "\n", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "if", "shortcut_type", "==", "'A'", ":", "\n", "                ", "downsample", "=", "partial", "(", "\n", "downsample_basic_block", ",", "\n", "planes", "=", "planes", "*", "block", ".", "expansion", ",", "\n", "stride", "=", "stride", ")", "\n", "", "else", ":", "\n", "                ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "\n", "self", ".", "inplanes", ",", "\n", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "stride", ",", "\n", "bias", "=", "False", ")", ",", "nn", ".", "BatchNorm3d", "(", "planes", "*", "block", ".", "expansion", ")", ")", "\n", "\n", "", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "\n", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "cardinality", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "cardinality", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.resnext.ResNeXt.forward": [[166, 183], ["resnext.ResNeXt.conv1", "resnext.ResNeXt.bn1", "resnext.ResNeXt.relu", "resnext.ResNeXt.maxpool", "resnext.ResNeXt.layer1", "resnext.ResNeXt.layer2", "resnext.ResNeXt.layer3", "resnext.ResNeXt.layer4", "resnext.ResNeXt.avgpool", "resnext.ResNeXt.view", "resnext.ResNeXt.fc", "resnext.ResNeXt.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.resnext.conv3x3x3": [[11, 20], ["torch.Conv3d"], "function", ["None"], ["def", "conv3x3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "# 3x3x3 convolution with padding", "\n", "    ", "return", "nn", ".", "Conv3d", "(", "\n", "in_planes", ",", "\n", "out_planes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.resnext.downsample_basic_block": [[22, 33], ["torch.avg_pool3d", "torch.Tensor().zero_", "torch.Tensor().zero_", "torch.Tensor().zero_", "isinstance", "torch.autograd.Variable", "zero_pads.cuda.cuda", "torch.cat", "torch.cat", "torch.cat", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size"], "function", ["None"], ["", "def", "downsample_basic_block", "(", "x", ",", "planes", ",", "stride", ")", ":", "\n", "    ", "out", "=", "F", ".", "avg_pool3d", "(", "x", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ")", "\n", "zero_pads", "=", "torch", ".", "Tensor", "(", "\n", "out", ".", "size", "(", "0", ")", ",", "planes", "-", "out", ".", "size", "(", "1", ")", ",", "out", ".", "size", "(", "2", ")", ",", "out", ".", "size", "(", "3", ")", ",", "\n", "out", ".", "size", "(", "4", ")", ")", ".", "zero_", "(", ")", "\n", "if", "isinstance", "(", "out", ".", "data", ",", "torch", ".", "cuda", ".", "FloatTensor", ")", ":", "\n", "        ", "zero_pads", "=", "zero_pads", ".", "cuda", "(", ")", "\n", "\n", "", "out", "=", "Variable", "(", "torch", ".", "cat", "(", "[", "out", ".", "data", ",", "zero_pads", "]", ",", "dim", "=", "1", ")", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.resnext.get_fine_tuning_parameters": [[185, 205], ["model.parameters", "ft_module_names.append", "model.named_parameters", "ValueError", "parameters.append", "parameters.append"], "function", ["None"], ["", "", "def", "get_fine_tuning_parameters", "(", "model", ",", "ft_portion", ")", ":", "\n", "    ", "if", "ft_portion", "==", "\"complete\"", ":", "\n", "        ", "return", "model", ".", "parameters", "(", ")", "\n", "\n", "", "elif", "ft_portion", "==", "\"last_layer\"", ":", "\n", "        ", "ft_module_names", "=", "[", "]", "\n", "ft_module_names", ".", "append", "(", "'fc'", ")", "\n", "\n", "parameters", "=", "[", "]", "\n", "for", "k", ",", "v", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "            ", "for", "ft_module", "in", "ft_module_names", ":", "\n", "                ", "if", "ft_module", "in", "k", ":", "\n", "                    ", "parameters", ".", "append", "(", "{", "'params'", ":", "v", "}", ")", "\n", "break", "\n", "", "", "else", ":", "\n", "                ", "parameters", ".", "append", "(", "{", "'params'", ":", "v", ",", "'lr'", ":", "0.0", "}", ")", "\n", "", "", "return", "parameters", "\n", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Unsupported ft_portion: 'complete' or 'last_layer' expected\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.resnext.resnext50": [[207, 212], ["resnext.ResNeXt"], "function", ["None"], ["", "", "def", "resnext50", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-50 model.\n    \"\"\"", "\n", "model", "=", "ResNeXt", "(", "ResNeXtBottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.resnext.resnext101": [[214, 219], ["resnext.ResNeXt"], "function", ["None"], ["", "def", "resnext101", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-101 model.\n    \"\"\"", "\n", "model", "=", "ResNeXt", "(", "ResNeXtBottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.resnext.resnext152": [[221, 226], ["resnext.ResNeXt"], "function", ["None"], ["", "def", "resnext152", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-101 model.\n    \"\"\"", "\n", "model", "=", "ResNeXt", "(", "ResNeXtBottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.squeezenet.Fire.__init__": [[19, 34], ["torch.Module.__init__", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.StereoLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inplanes", ",", "squeeze_planes", ",", "\n", "expand1x1_planes", ",", "expand3x3_planes", ",", "\n", "use_bypass", "=", "False", ")", ":", "\n", "        ", "super", "(", "Fire", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "use_bypass", "=", "use_bypass", "\n", "self", ".", "inplanes", "=", "inplanes", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "squeeze", "=", "nn", ".", "Conv3d", "(", "inplanes", ",", "squeeze_planes", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "squeeze_bn", "=", "nn", ".", "BatchNorm3d", "(", "squeeze_planes", ")", "\n", "self", ".", "expand1x1", "=", "nn", ".", "Conv3d", "(", "squeeze_planes", ",", "expand1x1_planes", ",", "\n", "kernel_size", "=", "1", ")", "\n", "self", ".", "expand1x1_bn", "=", "nn", ".", "BatchNorm3d", "(", "expand1x1_planes", ")", "\n", "self", ".", "expand3x3", "=", "nn", ".", "Conv3d", "(", "squeeze_planes", ",", "expand3x3_planes", ",", "\n", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "expand3x3_bn", "=", "nn", ".", "BatchNorm3d", "(", "expand3x3_planes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.squeezenet.Fire.forward": [[35, 52], ["squeezenet.Fire.squeeze", "squeezenet.Fire.squeeze_bn", "squeezenet.Fire.relu", "squeezenet.Fire.expand1x1", "squeezenet.Fire.expand1x1_bn", "squeezenet.Fire.expand3x3", "squeezenet.Fire.expand3x3_bn", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "squeezenet.Fire.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "squeeze", "(", "x", ")", "\n", "out", "=", "self", ".", "squeeze_bn", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out1", "=", "self", ".", "expand1x1", "(", "out", ")", "\n", "out1", "=", "self", ".", "expand1x1_bn", "(", "out1", ")", "\n", "\n", "out2", "=", "self", ".", "expand3x3", "(", "out", ")", "\n", "out2", "=", "self", ".", "expand3x3_bn", "(", "out2", ")", "\n", "\n", "out", "=", "torch", ".", "cat", "(", "[", "out1", ",", "out2", "]", ",", "1", ")", "\n", "if", "self", ".", "use_bypass", ":", "\n", "        \t", "out", "+=", "x", "\n", "", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.squeezenet.SqueezeNet.__init__": [[56, 119], ["torch.Module.__init__", "int", "int", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "squeezenet.SqueezeNet.modules", "ValueError", "math.ceil", "math.ceil", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.AvgPool3d", "torch.AvgPool3d", "torch.AvgPool3d", "torch.AvgPool3d", "isinstance", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool3d", "torch.MaxPool3d", "torch.MaxPool3d", "torch.MaxPool3d", "squeezenet.Fire", "squeezenet.Fire", "torch.MaxPool3d", "torch.MaxPool3d", "torch.MaxPool3d", "torch.MaxPool3d", "squeezenet.Fire", "squeezenet.Fire", "torch.MaxPool3d", "torch.MaxPool3d", "torch.MaxPool3d", "torch.MaxPool3d", "squeezenet.Fire", "squeezenet.Fire", "squeezenet.Fire", "torch.MaxPool3d", "torch.MaxPool3d", "torch.MaxPool3d", "torch.MaxPool3d", "squeezenet.Fire", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool3d", "torch.MaxPool3d", "torch.MaxPool3d", "torch.MaxPool3d", "squeezenet.Fire", "squeezenet.Fire", "torch.MaxPool3d", "torch.MaxPool3d", "torch.MaxPool3d", "torch.MaxPool3d", "squeezenet.Fire", "squeezenet.Fire", "torch.MaxPool3d", "torch.MaxPool3d", "torch.MaxPool3d", "torch.MaxPool3d", "squeezenet.Fire", "squeezenet.Fire", "torch.MaxPool3d", "torch.MaxPool3d", "torch.MaxPool3d", "torch.MaxPool3d", "squeezenet.Fire", "squeezenet.Fire", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.StereoLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "sample_size", ",", "\n", "sample_duration", ",", "\n", "version", "=", "1.1", ",", "\n", "num_classes", "=", "600", ")", ":", "\n", "        ", "super", "(", "SqueezeNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "version", "not", "in", "[", "1.0", ",", "1.1", "]", ":", "\n", "            ", "raise", "ValueError", "(", "\"Unsupported SqueezeNet version {version}:\"", "\n", "\"1.0 or 1.1 expected\"", ".", "format", "(", "version", "=", "version", ")", ")", "\n", "", "self", ".", "num_classes", "=", "num_classes", "\n", "last_duration", "=", "int", "(", "math", ".", "ceil", "(", "sample_duration", "/", "16", ")", ")", "\n", "last_size", "=", "int", "(", "math", ".", "ceil", "(", "sample_size", "/", "32", ")", ")", "\n", "if", "version", "==", "1.0", ":", "\n", "            ", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "3", ",", "96", ",", "kernel_size", "=", "7", ",", "stride", "=", "(", "1", ",", "2", ",", "2", ")", ",", "padding", "=", "(", "3", ",", "3", ",", "3", ")", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "96", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool3d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "Fire", "(", "96", ",", "16", ",", "64", ",", "64", ")", ",", "\n", "Fire", "(", "128", ",", "16", ",", "64", ",", "64", ",", "use_bypass", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool3d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "Fire", "(", "128", ",", "32", ",", "128", ",", "128", ")", ",", "\n", "Fire", "(", "256", ",", "32", ",", "128", ",", "128", ",", "use_bypass", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool3d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "Fire", "(", "256", ",", "48", ",", "192", ",", "192", ")", ",", "\n", "Fire", "(", "384", ",", "48", ",", "192", ",", "192", ",", "use_bypass", "=", "True", ")", ",", "\n", "Fire", "(", "384", ",", "64", ",", "256", ",", "256", ")", ",", "\n", "nn", ".", "MaxPool3d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "Fire", "(", "512", ",", "64", ",", "256", ",", "256", ",", "use_bypass", "=", "True", ")", ",", "\n", ")", "\n", "", "if", "version", "==", "1.1", ":", "\n", "            ", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "(", "1", ",", "2", ",", "2", ")", ",", "padding", "=", "(", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool3d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "Fire", "(", "64", ",", "16", ",", "64", ",", "64", ")", ",", "\n", "Fire", "(", "128", ",", "16", ",", "64", ",", "64", ",", "use_bypass", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool3d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "Fire", "(", "128", ",", "32", ",", "128", ",", "128", ")", ",", "\n", "Fire", "(", "256", ",", "32", ",", "128", ",", "128", ",", "use_bypass", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool3d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "Fire", "(", "256", ",", "48", ",", "192", ",", "192", ")", ",", "\n", "Fire", "(", "384", ",", "48", ",", "192", ",", "192", ",", "use_bypass", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool3d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "Fire", "(", "384", ",", "64", ",", "256", ",", "256", ")", ",", "\n", "Fire", "(", "512", ",", "64", ",", "256", ",", "256", ",", "use_bypass", "=", "True", ")", ",", "\n", ")", "\n", "# Final convolution is initialized differently form the rest", "\n", "", "final_conv", "=", "nn", ".", "Conv3d", "(", "512", ",", "self", ".", "num_classes", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Dropout", "(", "p", "=", "0.5", ")", ",", "\n", "final_conv", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "AvgPool3d", "(", "(", "last_duration", ",", "last_size", ",", "last_size", ")", ",", "stride", "=", "1", ")", "\n", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv3d", ")", ":", "\n", "                ", "m", ".", "weight", "=", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm3d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.squeezenet.SqueezeNet.forward": [[121, 125], ["squeezenet.SqueezeNet.features", "squeezenet.SqueezeNet.classifier", "squeezenet.SqueezeNet.view", "squeezenet.SqueezeNet.size"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n", "return", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.squeezenet.get_fine_tuning_parameters": [[127, 147], ["model.parameters", "ft_module_names.append", "model.named_parameters", "ValueError", "parameters.append", "parameters.append"], "function", ["None"], ["", "", "def", "get_fine_tuning_parameters", "(", "model", ",", "ft_portion", ")", ":", "\n", "    ", "if", "ft_portion", "==", "\"complete\"", ":", "\n", "        ", "return", "model", ".", "parameters", "(", ")", "\n", "\n", "", "elif", "ft_portion", "==", "\"last_layer\"", ":", "\n", "        ", "ft_module_names", "=", "[", "]", "\n", "ft_module_names", ".", "append", "(", "'classifier'", ")", "\n", "\n", "parameters", "=", "[", "]", "\n", "for", "k", ",", "v", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "            ", "for", "ft_module", "in", "ft_module_names", ":", "\n", "                ", "if", "ft_module", "in", "k", ":", "\n", "                    ", "parameters", ".", "append", "(", "{", "'params'", ":", "v", "}", ")", "\n", "break", "\n", "", "", "else", ":", "\n", "                ", "parameters", ".", "append", "(", "{", "'params'", ":", "v", ",", "'lr'", ":", "0.0", "}", ")", "\n", "", "", "return", "parameters", "\n", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Unsupported ft_portion: 'complete' or 'last_layer' expected\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.squeezenet.get_model": [[149, 155], ["squeezenet.SqueezeNet"], "function", ["None"], ["", "", "def", "get_model", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    Returns the model.\n    \"\"\"", "\n", "model", "=", "SqueezeNet", "(", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.munet.Modified3DUNet.__init__": [[5, 66], ["torch.Module.__init__", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Dropout3d", "torch.Dropout3d", "torch.Upsample", "torch.Upsample", "torch.Softmax", "torch.Softmax", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "munet.Modified3DUNet.lrelu_conv", "torch.InstanceNorm3d", "torch.InstanceNorm3d", "torch.Conv3d", "torch.Conv3d", "munet.Modified3DUNet.norm_lrelu_conv", "torch.InstanceNorm3d", "torch.InstanceNorm3d", "torch.Conv3d", "torch.Conv3d", "munet.Modified3DUNet.norm_lrelu_conv", "torch.InstanceNorm3d", "torch.InstanceNorm3d", "torch.Conv3d", "torch.Conv3d", "munet.Modified3DUNet.norm_lrelu_conv", "torch.InstanceNorm3d", "torch.InstanceNorm3d", "torch.Conv3d", "torch.Conv3d", "munet.Modified3DUNet.norm_lrelu_conv", "munet.Modified3DUNet.norm_lrelu_upscale_conv_norm_lrelu", "torch.Conv3d", "torch.Conv3d", "torch.InstanceNorm3d", "torch.InstanceNorm3d", "munet.Modified3DUNet.conv_norm_lrelu", "torch.Conv3d", "torch.Conv3d", "munet.Modified3DUNet.norm_lrelu_upscale_conv_norm_lrelu", "munet.Modified3DUNet.conv_norm_lrelu", "torch.Conv3d", "torch.Conv3d", "munet.Modified3DUNet.norm_lrelu_upscale_conv_norm_lrelu", "munet.Modified3DUNet.conv_norm_lrelu", "torch.Conv3d", "torch.Conv3d", "munet.Modified3DUNet.norm_lrelu_upscale_conv_norm_lrelu", "munet.Modified3DUNet.conv_norm_lrelu", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.StereoLoss.__init__", "home.repos.pwc.inspect_result.zwxu064_RANP.models.munet.Modified3DUNet.lrelu_conv", "home.repos.pwc.inspect_result.zwxu064_RANP.models.munet.Modified3DUNet.norm_lrelu_conv", "home.repos.pwc.inspect_result.zwxu064_RANP.models.munet.Modified3DUNet.norm_lrelu_conv", "home.repos.pwc.inspect_result.zwxu064_RANP.models.munet.Modified3DUNet.norm_lrelu_conv", "home.repos.pwc.inspect_result.zwxu064_RANP.models.munet.Modified3DUNet.norm_lrelu_conv", "home.repos.pwc.inspect_result.zwxu064_RANP.models.munet.Modified3DUNet.norm_lrelu_upscale_conv_norm_lrelu", "home.repos.pwc.inspect_result.zwxu064_RANP.models.munet.Modified3DUNet.conv_norm_lrelu", "home.repos.pwc.inspect_result.zwxu064_RANP.models.munet.Modified3DUNet.norm_lrelu_upscale_conv_norm_lrelu", "home.repos.pwc.inspect_result.zwxu064_RANP.models.munet.Modified3DUNet.conv_norm_lrelu", "home.repos.pwc.inspect_result.zwxu064_RANP.models.munet.Modified3DUNet.norm_lrelu_upscale_conv_norm_lrelu", "home.repos.pwc.inspect_result.zwxu064_RANP.models.munet.Modified3DUNet.conv_norm_lrelu", "home.repos.pwc.inspect_result.zwxu064_RANP.models.munet.Modified3DUNet.norm_lrelu_upscale_conv_norm_lrelu", "home.repos.pwc.inspect_result.zwxu064_RANP.models.munet.Modified3DUNet.conv_norm_lrelu"], ["\t", "def", "__init__", "(", "self", ",", "in_channels", ",", "n_classes", ",", "base_n_filter", "=", "8", ")", ":", "\n", "\t\t", "super", "(", "Modified3DUNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "n_classes", "=", "n_classes", "\n", "self", ".", "base_n_filter", "=", "base_n_filter", "\n", "\n", "self", ".", "lrelu", "=", "nn", ".", "LeakyReLU", "(", ")", "\n", "self", ".", "dropout3d", "=", "nn", ".", "Dropout3d", "(", "p", "=", "0.6", ")", "\n", "self", ".", "upsacle", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'nearest'", ")", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "1", ")", "\n", "\n", "# Level 1 context pathway", "\n", "self", ".", "conv3d_c1_1", "=", "nn", ".", "Conv3d", "(", "self", ".", "in_channels", ",", "self", ".", "base_n_filter", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv3d_c1_2", "=", "nn", ".", "Conv3d", "(", "self", ".", "base_n_filter", ",", "self", ".", "base_n_filter", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "lrelu_conv_c1", "=", "self", ".", "lrelu_conv", "(", "self", ".", "base_n_filter", ",", "self", ".", "base_n_filter", ")", "\n", "self", ".", "inorm3d_c1", "=", "nn", ".", "InstanceNorm3d", "(", "self", ".", "base_n_filter", ")", "\n", "\n", "# Level 2 context pathway", "\n", "self", ".", "conv3d_c2", "=", "nn", ".", "Conv3d", "(", "self", ".", "base_n_filter", ",", "self", ".", "base_n_filter", "*", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "norm_lrelu_conv_c2", "=", "self", ".", "norm_lrelu_conv", "(", "self", ".", "base_n_filter", "*", "2", ",", "self", ".", "base_n_filter", "*", "2", ")", "\n", "self", ".", "inorm3d_c2", "=", "nn", ".", "InstanceNorm3d", "(", "self", ".", "base_n_filter", "*", "2", ")", "\n", "\n", "# Level 3 context pathway", "\n", "self", ".", "conv3d_c3", "=", "nn", ".", "Conv3d", "(", "self", ".", "base_n_filter", "*", "2", ",", "self", ".", "base_n_filter", "*", "4", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "norm_lrelu_conv_c3", "=", "self", ".", "norm_lrelu_conv", "(", "self", ".", "base_n_filter", "*", "4", ",", "self", ".", "base_n_filter", "*", "4", ")", "\n", "self", ".", "inorm3d_c3", "=", "nn", ".", "InstanceNorm3d", "(", "self", ".", "base_n_filter", "*", "4", ")", "\n", "\n", "# Level 4 context pathway", "\n", "self", ".", "conv3d_c4", "=", "nn", ".", "Conv3d", "(", "self", ".", "base_n_filter", "*", "4", ",", "self", ".", "base_n_filter", "*", "8", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "norm_lrelu_conv_c4", "=", "self", ".", "norm_lrelu_conv", "(", "self", ".", "base_n_filter", "*", "8", ",", "self", ".", "base_n_filter", "*", "8", ")", "\n", "self", ".", "inorm3d_c4", "=", "nn", ".", "InstanceNorm3d", "(", "self", ".", "base_n_filter", "*", "8", ")", "\n", "\n", "# Level 5 context pathway, level 0 localization pathway", "\n", "self", ".", "conv3d_c5", "=", "nn", ".", "Conv3d", "(", "self", ".", "base_n_filter", "*", "8", ",", "self", ".", "base_n_filter", "*", "16", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "norm_lrelu_conv_c5", "=", "self", ".", "norm_lrelu_conv", "(", "self", ".", "base_n_filter", "*", "16", ",", "self", ".", "base_n_filter", "*", "16", ")", "\n", "self", ".", "norm_lrelu_upscale_conv_norm_lrelu_l0", "=", "self", ".", "norm_lrelu_upscale_conv_norm_lrelu", "(", "self", ".", "base_n_filter", "*", "16", ",", "self", ".", "base_n_filter", "*", "8", ")", "\n", "\n", "self", ".", "conv3d_l0", "=", "nn", ".", "Conv3d", "(", "self", ".", "base_n_filter", "*", "8", ",", "self", ".", "base_n_filter", "*", "8", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "inorm3d_l0", "=", "nn", ".", "InstanceNorm3d", "(", "self", ".", "base_n_filter", "*", "8", ")", "\n", "\n", "# Level 1 localization pathway", "\n", "self", ".", "conv_norm_lrelu_l1", "=", "self", ".", "conv_norm_lrelu", "(", "self", ".", "base_n_filter", "*", "16", ",", "self", ".", "base_n_filter", "*", "16", ")", "\n", "self", ".", "conv3d_l1", "=", "nn", ".", "Conv3d", "(", "self", ".", "base_n_filter", "*", "16", ",", "self", ".", "base_n_filter", "*", "8", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "norm_lrelu_upscale_conv_norm_lrelu_l1", "=", "self", ".", "norm_lrelu_upscale_conv_norm_lrelu", "(", "self", ".", "base_n_filter", "*", "8", ",", "self", ".", "base_n_filter", "*", "4", ")", "\n", "\n", "# Level 2 localization pathway", "\n", "self", ".", "conv_norm_lrelu_l2", "=", "self", ".", "conv_norm_lrelu", "(", "self", ".", "base_n_filter", "*", "8", ",", "self", ".", "base_n_filter", "*", "8", ")", "\n", "self", ".", "conv3d_l2", "=", "nn", ".", "Conv3d", "(", "self", ".", "base_n_filter", "*", "8", ",", "self", ".", "base_n_filter", "*", "4", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "norm_lrelu_upscale_conv_norm_lrelu_l2", "=", "self", ".", "norm_lrelu_upscale_conv_norm_lrelu", "(", "self", ".", "base_n_filter", "*", "4", ",", "self", ".", "base_n_filter", "*", "2", ")", "\n", "\n", "# Level 3 localization pathway", "\n", "self", ".", "conv_norm_lrelu_l3", "=", "self", ".", "conv_norm_lrelu", "(", "self", ".", "base_n_filter", "*", "4", ",", "self", ".", "base_n_filter", "*", "4", ")", "\n", "self", ".", "conv3d_l3", "=", "nn", ".", "Conv3d", "(", "self", ".", "base_n_filter", "*", "4", ",", "self", ".", "base_n_filter", "*", "2", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "norm_lrelu_upscale_conv_norm_lrelu_l3", "=", "self", ".", "norm_lrelu_upscale_conv_norm_lrelu", "(", "self", ".", "base_n_filter", "*", "2", ",", "self", ".", "base_n_filter", ")", "\n", "\n", "# Level 4 localization pathway", "\n", "self", ".", "conv_norm_lrelu_l4", "=", "self", ".", "conv_norm_lrelu", "(", "self", ".", "base_n_filter", "*", "2", ",", "self", ".", "base_n_filter", "*", "2", ")", "\n", "self", ".", "conv3d_l4", "=", "nn", ".", "Conv3d", "(", "self", ".", "base_n_filter", "*", "2", ",", "self", ".", "n_classes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "ds2_1x1_conv3d", "=", "nn", ".", "Conv3d", "(", "self", ".", "base_n_filter", "*", "8", ",", "self", ".", "n_classes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "ds3_1x1_conv3d", "=", "nn", ".", "Conv3d", "(", "self", ".", "base_n_filter", "*", "4", ",", "self", ".", "n_classes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.munet.Modified3DUNet.conv_norm_lrelu": [[70, 75], ["torch.Sequential", "torch.Sequential", "torch.Conv3d", "torch.Conv3d", "torch.InstanceNorm3d", "torch.InstanceNorm3d", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["None"], ["", "def", "conv_norm_lrelu", "(", "self", ",", "feat_in", ",", "feat_out", ")", ":", "\n", "\t\t", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "feat_in", ",", "feat_out", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "InstanceNorm3d", "(", "feat_out", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.munet.Modified3DUNet.norm_lrelu_conv": [[76, 81], ["torch.Sequential", "torch.Sequential", "torch.InstanceNorm3d", "torch.InstanceNorm3d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv3d", "torch.Conv3d"], "methods", ["None"], ["", "def", "norm_lrelu_conv", "(", "self", ",", "feat_in", ",", "feat_out", ")", ":", "\n", "\t\t", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "InstanceNorm3d", "(", "feat_in", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "nn", ".", "Conv3d", "(", "feat_in", ",", "feat_out", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.munet.Modified3DUNet.lrelu_conv": [[82, 86], ["torch.Sequential", "torch.Sequential", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv3d", "torch.Conv3d"], "methods", ["None"], ["", "def", "lrelu_conv", "(", "self", ",", "feat_in", ",", "feat_out", ")", ":", "\n", "\t\t", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "nn", ".", "Conv3d", "(", "feat_in", ",", "feat_out", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.munet.Modified3DUNet.norm_lrelu_upscale_conv_norm_lrelu": [[87, 96], ["torch.Sequential", "torch.Sequential", "torch.InstanceNorm3d", "torch.InstanceNorm3d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Upsample", "torch.Upsample", "torch.Conv3d", "torch.Conv3d", "torch.InstanceNorm3d", "torch.InstanceNorm3d", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["None"], ["", "def", "norm_lrelu_upscale_conv_norm_lrelu", "(", "self", ",", "feat_in", ",", "feat_out", ")", ":", "\n", "\t\t", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "InstanceNorm3d", "(", "feat_in", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'nearest'", ")", ",", "\n", "# should be feat_in*2 or feat_in", "\n", "nn", ".", "Conv3d", "(", "feat_in", ",", "feat_out", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "InstanceNorm3d", "(", "feat_out", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.munet.Modified3DUNet.forward": [[97, 190], ["munet.Modified3DUNet.conv3d_c1_1", "munet.Modified3DUNet.lrelu", "munet.Modified3DUNet.conv3d_c1_2", "munet.Modified3DUNet.dropout3d", "munet.Modified3DUNet.lrelu_conv_c1", "munet.Modified3DUNet.lrelu", "munet.Modified3DUNet.inorm3d_c1", "munet.Modified3DUNet.lrelu", "munet.Modified3DUNet.conv3d_c2", "munet.Modified3DUNet.norm_lrelu_conv_c2", "munet.Modified3DUNet.dropout3d", "munet.Modified3DUNet.norm_lrelu_conv_c2", "munet.Modified3DUNet.inorm3d_c2", "munet.Modified3DUNet.lrelu", "munet.Modified3DUNet.conv3d_c3", "munet.Modified3DUNet.norm_lrelu_conv_c3", "munet.Modified3DUNet.dropout3d", "munet.Modified3DUNet.norm_lrelu_conv_c3", "munet.Modified3DUNet.inorm3d_c3", "munet.Modified3DUNet.lrelu", "munet.Modified3DUNet.conv3d_c4", "munet.Modified3DUNet.norm_lrelu_conv_c4", "munet.Modified3DUNet.dropout3d", "munet.Modified3DUNet.norm_lrelu_conv_c4", "munet.Modified3DUNet.inorm3d_c4", "munet.Modified3DUNet.lrelu", "munet.Modified3DUNet.conv3d_c5", "munet.Modified3DUNet.norm_lrelu_conv_c5", "munet.Modified3DUNet.dropout3d", "munet.Modified3DUNet.norm_lrelu_conv_c5", "munet.Modified3DUNet.norm_lrelu_upscale_conv_norm_lrelu_l0", "munet.Modified3DUNet.conv3d_l0", "munet.Modified3DUNet.inorm3d_l0", "munet.Modified3DUNet.lrelu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "munet.Modified3DUNet.conv_norm_lrelu_l1", "munet.Modified3DUNet.conv3d_l1", "munet.Modified3DUNet.norm_lrelu_upscale_conv_norm_lrelu_l1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "munet.Modified3DUNet.conv_norm_lrelu_l2", "munet.Modified3DUNet.conv3d_l2", "munet.Modified3DUNet.norm_lrelu_upscale_conv_norm_lrelu_l2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "munet.Modified3DUNet.conv_norm_lrelu_l3", "munet.Modified3DUNet.conv3d_l3", "munet.Modified3DUNet.norm_lrelu_upscale_conv_norm_lrelu_l3", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "munet.Modified3DUNet.conv_norm_lrelu_l4", "munet.Modified3DUNet.conv3d_l4", "munet.Modified3DUNet.ds2_1x1_conv3d", "munet.Modified3DUNet.upsacle", "munet.Modified3DUNet.ds3_1x1_conv3d", "munet.Modified3DUNet.upsacle"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "#  Level 1 context pathway", "\n", "\t\t", "out", "=", "self", ".", "conv3d_c1_1", "(", "x", ")", "\n", "residual_1", "=", "out", "\n", "out", "=", "self", ".", "lrelu", "(", "out", ")", "\n", "out", "=", "self", ".", "conv3d_c1_2", "(", "out", ")", "\n", "out", "=", "self", ".", "dropout3d", "(", "out", ")", "\n", "out", "=", "self", ".", "lrelu_conv_c1", "(", "out", ")", "\n", "# Element Wise Summation", "\n", "out", "+=", "residual_1", "\n", "context_1", "=", "self", ".", "lrelu", "(", "out", ")", "\n", "out", "=", "self", ".", "inorm3d_c1", "(", "out", ")", "\n", "out", "=", "self", ".", "lrelu", "(", "out", ")", "\n", "\n", "# Level 2 context pathway", "\n", "out", "=", "self", ".", "conv3d_c2", "(", "out", ")", "\n", "residual_2", "=", "out", "\n", "out", "=", "self", ".", "norm_lrelu_conv_c2", "(", "out", ")", "\n", "out", "=", "self", ".", "dropout3d", "(", "out", ")", "\n", "out", "=", "self", ".", "norm_lrelu_conv_c2", "(", "out", ")", "\n", "out", "+=", "residual_2", "\n", "out", "=", "self", ".", "inorm3d_c2", "(", "out", ")", "\n", "out", "=", "self", ".", "lrelu", "(", "out", ")", "\n", "context_2", "=", "out", "\n", "\n", "# Level 3 context pathway", "\n", "out", "=", "self", ".", "conv3d_c3", "(", "out", ")", "\n", "residual_3", "=", "out", "\n", "out", "=", "self", ".", "norm_lrelu_conv_c3", "(", "out", ")", "\n", "out", "=", "self", ".", "dropout3d", "(", "out", ")", "\n", "out", "=", "self", ".", "norm_lrelu_conv_c3", "(", "out", ")", "\n", "out", "+=", "residual_3", "\n", "out", "=", "self", ".", "inorm3d_c3", "(", "out", ")", "\n", "out", "=", "self", ".", "lrelu", "(", "out", ")", "\n", "context_3", "=", "out", "\n", "\n", "# Level 4 context pathway", "\n", "out", "=", "self", ".", "conv3d_c4", "(", "out", ")", "\n", "residual_4", "=", "out", "\n", "out", "=", "self", ".", "norm_lrelu_conv_c4", "(", "out", ")", "\n", "out", "=", "self", ".", "dropout3d", "(", "out", ")", "\n", "out", "=", "self", ".", "norm_lrelu_conv_c4", "(", "out", ")", "\n", "out", "+=", "residual_4", "\n", "out", "=", "self", ".", "inorm3d_c4", "(", "out", ")", "\n", "out", "=", "self", ".", "lrelu", "(", "out", ")", "\n", "context_4", "=", "out", "\n", "\n", "# Level 5", "\n", "out", "=", "self", ".", "conv3d_c5", "(", "out", ")", "\n", "residual_5", "=", "out", "\n", "out", "=", "self", ".", "norm_lrelu_conv_c5", "(", "out", ")", "\n", "out", "=", "self", ".", "dropout3d", "(", "out", ")", "\n", "out", "=", "self", ".", "norm_lrelu_conv_c5", "(", "out", ")", "\n", "out", "+=", "residual_5", "\n", "out", "=", "self", ".", "norm_lrelu_upscale_conv_norm_lrelu_l0", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3d_l0", "(", "out", ")", "\n", "out", "=", "self", ".", "inorm3d_l0", "(", "out", ")", "\n", "out", "=", "self", ".", "lrelu", "(", "out", ")", "\n", "\n", "# Level 1 localization pathway", "\n", "out", "=", "torch", ".", "cat", "(", "[", "out", ",", "context_4", "]", ",", "dim", "=", "1", ")", "\n", "out", "=", "self", ".", "conv_norm_lrelu_l1", "(", "out", ")", "\n", "out", "=", "self", ".", "conv3d_l1", "(", "out", ")", "\n", "out", "=", "self", ".", "norm_lrelu_upscale_conv_norm_lrelu_l1", "(", "out", ")", "\n", "\n", "# Level 2 localization pathway", "\n", "out", "=", "torch", ".", "cat", "(", "[", "out", ",", "context_3", "]", ",", "dim", "=", "1", ")", "\n", "out", "=", "self", ".", "conv_norm_lrelu_l2", "(", "out", ")", "\n", "ds2", "=", "out", "\n", "out", "=", "self", ".", "conv3d_l2", "(", "out", ")", "\n", "out", "=", "self", ".", "norm_lrelu_upscale_conv_norm_lrelu_l2", "(", "out", ")", "\n", "\n", "# Level 3 localization pathway", "\n", "out", "=", "torch", ".", "cat", "(", "[", "out", ",", "context_2", "]", ",", "dim", "=", "1", ")", "\n", "out", "=", "self", ".", "conv_norm_lrelu_l3", "(", "out", ")", "\n", "ds3", "=", "out", "\n", "out", "=", "self", ".", "conv3d_l3", "(", "out", ")", "\n", "out", "=", "self", ".", "norm_lrelu_upscale_conv_norm_lrelu_l3", "(", "out", ")", "\n", "\n", "# Level 4 localization pathway", "\n", "out", "=", "torch", ".", "cat", "(", "[", "out", ",", "context_1", "]", ",", "dim", "=", "1", ")", "\n", "out", "=", "self", ".", "conv_norm_lrelu_l4", "(", "out", ")", "\n", "out_pred", "=", "self", ".", "conv3d_l4", "(", "out", ")", "\n", "\n", "ds2_1x1_conv", "=", "self", ".", "ds2_1x1_conv3d", "(", "ds2", ")", "\n", "ds1_ds2_sum_upscale", "=", "self", ".", "upsacle", "(", "ds2_1x1_conv", ")", "\n", "ds3_1x1_conv", "=", "self", ".", "ds3_1x1_conv3d", "(", "ds3", ")", "\n", "ds1_ds2_sum_upscale_ds3_sum", "=", "ds1_ds2_sum_upscale", "+", "ds3_1x1_conv", "\n", "ds1_ds2_sum_upscale_ds3_sum_upscale", "=", "self", ".", "upsacle", "(", "ds1_ds2_sum_upscale_ds3_sum", ")", "\n", "\n", "out", "=", "out_pred", "+", "ds1_ds2_sum_upscale_ds3_sum_upscale", "\n", "return", "out", "\n", "#seg_layer = out", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.unet.ConvD.__init__": [[21, 41], ["torch.Module.__init__", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "unet.normalization", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "unet.normalization", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "unet.normalization", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool3d", "torch.MaxPool3d", "torch.MaxPool3d"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.StereoLoss.__init__", "home.repos.pwc.inspect_result.zwxu064_RANP.models.unet.normalization", "home.repos.pwc.inspect_result.zwxu064_RANP.models.unet.normalization", "home.repos.pwc.inspect_result.zwxu064_RANP.models.unet.normalization"], ["    ", "def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "dropout", "=", "0.0", ",", "norm", "=", "'gn'", ",", "first", "=", "False", ")", ":", "\n", "        ", "super", "(", "ConvD", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "first", "=", "first", "\n", "\n", "if", "not", "self", ".", "first", ":", "\n", "          ", "self", ".", "maxpool", "=", "nn", ".", "MaxPool3d", "(", "2", ",", "2", ")", "\n", "\n", "", "self", ".", "dropout", "=", "dropout", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv3d", "(", "inplanes", ",", "planes", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "normalization", "(", "planes", ",", "norm", ")", "\n", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv3d", "(", "planes", ",", "planes", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "normalization", "(", "planes", ",", "norm", ")", "\n", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv3d", "(", "planes", ",", "planes", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "normalization", "(", "planes", ",", "norm", ")", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.unet.ConvD.forward": [[42, 51], ["unet.ConvD.bn1", "unet.ConvD.relu", "unet.ConvD.bn3", "unet.ConvD.relu", "unet.ConvD.maxpool", "unet.ConvD.conv1", "unet.ConvD.bn2", "torch.dropout3d", "torch.dropout3d", "torch.dropout3d", "unet.ConvD.conv3", "unet.ConvD.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "not", "self", ".", "first", ":", "\n", "            ", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "", "x", "=", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "y", "=", "self", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "x", ")", ")", ")", "\n", "if", "self", ".", "dropout", ">", "0", ":", "\n", "            ", "y", "=", "F", ".", "dropout3d", "(", "y", ",", "self", ".", "dropout", ")", "\n", "", "y", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "x", ")", ")", "\n", "return", "self", ".", "relu", "(", "x", "+", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.unet.ConvU.__init__": [[54, 70], ["torch.Module.__init__", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "unet.normalization", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "unet.normalization", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "unet.normalization"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.StereoLoss.__init__", "home.repos.pwc.inspect_result.zwxu064_RANP.models.unet.normalization", "home.repos.pwc.inspect_result.zwxu064_RANP.models.unet.normalization", "home.repos.pwc.inspect_result.zwxu064_RANP.models.unet.normalization"], ["    ", "def", "__init__", "(", "self", ",", "planes", ",", "norm", "=", "'gn'", ",", "first", "=", "False", ")", ":", "\n", "        ", "super", "(", "ConvU", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "first", "=", "first", "\n", "\n", "if", "not", "self", ".", "first", ":", "\n", "            ", "self", ".", "conv1", "=", "nn", ".", "Conv3d", "(", "2", "*", "planes", ",", "planes", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "normalization", "(", "planes", ",", "norm", ")", "\n", "\n", "", "self", ".", "conv2", "=", "nn", ".", "Conv3d", "(", "planes", ",", "planes", "//", "2", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "normalization", "(", "planes", "//", "2", ",", "norm", ")", "\n", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv3d", "(", "planes", ",", "planes", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "normalization", "(", "planes", ",", "norm", ")", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.unet.ConvU.forward": [[71, 83], ["torch.upsample", "torch.upsample", "torch.upsample", "unet.ConvU.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "unet.ConvU.relu", "unet.ConvU.relu", "unet.ConvU.bn2", "unet.ConvU.bn3", "unet.ConvU.bn1", "unet.ConvU.conv2", "unet.ConvU.conv3", "unet.ConvU.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "prev", ")", ":", "\n", "# final output is the localization layer", "\n", "        ", "if", "not", "self", ".", "first", ":", "\n", "            ", "x", "=", "self", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "\n", "", "y", "=", "F", ".", "upsample", "(", "x", ",", "scale_factor", "=", "2", ",", "mode", "=", "'trilinear'", ",", "align_corners", "=", "False", ")", "\n", "y", "=", "self", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "y", ")", ")", ")", "\n", "\n", "y", "=", "torch", ".", "cat", "(", "[", "prev", ",", "y", "]", ",", "1", ")", "\n", "y", "=", "self", ".", "relu", "(", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "y", ")", ")", ")", "\n", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.unet.Unet.__init__": [[86, 112], ["torch.Module.__init__", "torch.Upsample", "torch.Upsample", "torch.Upsample", "unet.ConvD", "unet.ConvD", "unet.ConvD", "unet.ConvD", "unet.ConvD", "unet.ConvU", "unet.ConvU", "unet.ConvU", "unet.ConvU", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "unet.Unet.modules", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.StereoLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "c", "=", "4", ",", "n", "=", "16", ",", "dropout", "=", "0.5", ",", "norm", "=", "'gn'", ",", "num_classes", "=", "5", ")", ":", "\n", "        ", "super", "(", "Unet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "upsample", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "\n", "mode", "=", "'trilinear'", ",", "align_corners", "=", "False", ")", "\n", "\n", "self", ".", "convd1", "=", "ConvD", "(", "c", ",", "n", ",", "dropout", ",", "norm", ",", "first", "=", "True", ")", "\n", "self", ".", "convd2", "=", "ConvD", "(", "n", ",", "2", "*", "n", ",", "dropout", ",", "norm", ")", "\n", "self", ".", "convd3", "=", "ConvD", "(", "2", "*", "n", ",", "4", "*", "n", ",", "dropout", ",", "norm", ")", "\n", "self", ".", "convd4", "=", "ConvD", "(", "4", "*", "n", ",", "8", "*", "n", ",", "dropout", ",", "norm", ")", "\n", "self", ".", "convd5", "=", "ConvD", "(", "8", "*", "n", ",", "16", "*", "n", ",", "dropout", ",", "norm", ")", "\n", "\n", "self", ".", "convu4", "=", "ConvU", "(", "16", "*", "n", ",", "norm", ",", "True", ")", "\n", "self", ".", "convu3", "=", "ConvU", "(", "8", "*", "n", ",", "norm", ")", "\n", "self", ".", "convu2", "=", "ConvU", "(", "4", "*", "n", ",", "norm", ")", "\n", "self", ".", "convu1", "=", "ConvU", "(", "2", "*", "n", ",", "norm", ")", "\n", "\n", "self", ".", "seg3", "=", "nn", ".", "Conv3d", "(", "8", "*", "n", ",", "num_classes", ",", "1", ")", "\n", "self", ".", "seg2", "=", "nn", ".", "Conv3d", "(", "4", "*", "n", ",", "num_classes", ",", "1", ")", "\n", "self", ".", "seg1", "=", "nn", ".", "Conv3d", "(", "2", "*", "n", ",", "num_classes", ",", "1", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv3d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm3d", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "GroupNorm", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.unet.Unet.forward": [[113, 130], ["unet.Unet.convd1", "unet.Unet.convd2", "unet.Unet.convd3", "unet.Unet.convd4", "unet.Unet.convd5", "unet.Unet.convu4", "unet.Unet.convu3", "unet.Unet.convu2", "unet.Unet.convu1", "unet.Unet.seg3", "unet.Unet.seg2", "unet.Unet.upsample", "unet.Unet.seg1", "unet.Unet.upsample"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x1", "=", "self", ".", "convd1", "(", "x", ")", "\n", "x2", "=", "self", ".", "convd2", "(", "x1", ")", "\n", "x3", "=", "self", ".", "convd3", "(", "x2", ")", "\n", "x4", "=", "self", ".", "convd4", "(", "x3", ")", "\n", "x5", "=", "self", ".", "convd5", "(", "x4", ")", "\n", "\n", "y4", "=", "self", ".", "convu4", "(", "x5", ",", "x4", ")", "\n", "y3", "=", "self", ".", "convu3", "(", "y4", ",", "x3", ")", "\n", "y2", "=", "self", ".", "convu2", "(", "y3", ",", "x2", ")", "\n", "y1", "=", "self", ".", "convu1", "(", "y2", ",", "x1", ")", "\n", "\n", "y3", "=", "self", ".", "seg3", "(", "y3", ")", "\n", "y2", "=", "self", ".", "seg2", "(", "y2", ")", "+", "self", ".", "upsample", "(", "y3", ")", "\n", "y1", "=", "self", ".", "seg1", "(", "y1", ")", "+", "self", ".", "upsample", "(", "y2", ")", "\n", "\n", "return", "y1", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.unet.normalization": [[8, 18], ["torch.BatchNorm3d", "torch.GroupNorm", "torch.InstanceNorm3d", "ValueError"], "function", ["None"], ["def", "normalization", "(", "planes", ",", "norm", "=", "'gn'", ")", ":", "\n", "    ", "if", "norm", "==", "'bn'", ":", "\n", "        ", "m", "=", "nn", ".", "BatchNorm3d", "(", "planes", ")", "\n", "", "elif", "norm", "==", "'gn'", ":", "\n", "        ", "m", "=", "nn", ".", "GroupNorm", "(", "4", ",", "planes", ")", "\n", "", "elif", "norm", "==", "'in'", ":", "\n", "        ", "m", "=", "nn", ".", "InstanceNorm3d", "(", "planes", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'normalization type {} is not supported'", ".", "format", "(", "norm", ")", ")", "\n", "", "return", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.deepmedic.ResBlock.__init__": [[9, 17], ["torch.Module.__init__", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.StereoLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ")", ":", "\n", "        ", "super", "(", "ResBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "inplanes", "=", "inplanes", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv3d", "(", "inplanes", ",", "planes", ",", "3", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm3d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv3d", "(", "planes", ",", "planes", ",", "3", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm3d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.deepmedic.ResBlock.forward": [[18, 25], ["deepmedic.ResBlock.relu", "deepmedic.ResBlock.bn2", "deepmedic.ResBlock.relu", "deepmedic.ResBlock.bn1", "deepmedic.ResBlock.conv2", "deepmedic.ResBlock.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y", "=", "self", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "y", "=", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "y", ")", ")", "\n", "x", "=", "x", "[", ":", ",", ":", ",", "2", ":", "-", "2", ",", "2", ":", "-", "2", ",", "2", ":", "-", "2", "]", "\n", "y", "[", ":", ",", ":", "self", ".", "inplanes", "]", "+=", "x", "\n", "y", "=", "self", ".", "relu", "(", "y", ")", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.deepmedic.DeepMedic.__init__": [[41, 77], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "deepmedic.DeepMedic.modules", "deepmedic.conv3x3", "deepmedic.conv3x3", "deepmedic.ResBlock", "deepmedic.ResBlock", "deepmedic.ResBlock", "deepmedic.conv3x3", "deepmedic.conv3x3", "deepmedic.conv3x3", "deepmedic.conv3x3", "deepmedic.conv3x3", "deepmedic.conv3x3", "deepmedic.conv3x3", "deepmedic.conv3x3", "torch.Upsample", "torch.Upsample", "torch.Upsample", "deepmedic.conv3x3", "deepmedic.conv3x3", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.StereoLoss.__init__", "home.repos.pwc.inspect_result.zwxu064_RANP.models.deepmedic.conv3x3", "home.repos.pwc.inspect_result.zwxu064_RANP.models.deepmedic.conv3x3", "home.repos.pwc.inspect_result.zwxu064_RANP.models.deepmedic.conv3x3", "home.repos.pwc.inspect_result.zwxu064_RANP.models.deepmedic.conv3x3", "home.repos.pwc.inspect_result.zwxu064_RANP.models.deepmedic.conv3x3", "home.repos.pwc.inspect_result.zwxu064_RANP.models.deepmedic.conv3x3", "home.repos.pwc.inspect_result.zwxu064_RANP.models.deepmedic.conv3x3", "home.repos.pwc.inspect_result.zwxu064_RANP.models.deepmedic.conv3x3", "home.repos.pwc.inspect_result.zwxu064_RANP.models.deepmedic.conv3x3", "home.repos.pwc.inspect_result.zwxu064_RANP.models.deepmedic.conv3x3", "home.repos.pwc.inspect_result.zwxu064_RANP.models.deepmedic.conv3x3", "home.repos.pwc.inspect_result.zwxu064_RANP.models.deepmedic.conv3x3"], ["    ", "def", "__init__", "(", "self", ",", "c", "=", "4", ",", "n1", "=", "30", ",", "n2", "=", "40", ",", "n3", "=", "50", ",", "m", "=", "150", ",", "up", "=", "True", ")", ":", "\n", "        ", "super", "(", "DeepMedic", ",", "self", ")", ".", "__init__", "(", ")", "\n", "#n1, n2, n3 = 30, 40, 50", "\n", "\n", "n", "=", "2", "*", "n3", "\n", "self", ".", "branch1", "=", "nn", ".", "Sequential", "(", "\n", "conv3x3", "(", "c", ",", "n1", ")", ",", "\n", "conv3x3", "(", "n1", ",", "n1", ")", ",", "\n", "ResBlock", "(", "n1", ",", "n2", ")", ",", "\n", "ResBlock", "(", "n2", ",", "n2", ")", ",", "\n", "ResBlock", "(", "n2", ",", "n3", ")", ")", "\n", "\n", "self", ".", "branch2", "=", "nn", ".", "Sequential", "(", "\n", "conv3x3", "(", "c", ",", "n1", ")", ",", "\n", "conv3x3", "(", "n1", ",", "n1", ")", ",", "\n", "conv3x3", "(", "n1", ",", "n2", ")", ",", "\n", "conv3x3", "(", "n2", ",", "n2", ")", ",", "\n", "conv3x3", "(", "n2", ",", "n2", ")", ",", "\n", "conv3x3", "(", "n2", ",", "n2", ")", ",", "\n", "conv3x3", "(", "n2", ",", "n3", ")", ",", "\n", "conv3x3", "(", "n3", ",", "n3", ")", ")", "\n", "\n", "self", ".", "up3", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "3", ",", "\n", "mode", "=", "'trilinear'", ",", "align_corners", "=", "False", ")", "if", "up", "else", "repeat", "\n", "\n", "self", ".", "fc", "=", "nn", ".", "Sequential", "(", "\n", "conv3x3", "(", "n", ",", "m", ",", "1", ")", ",", "\n", "conv3x3", "(", "m", ",", "m", ",", "1", ")", ",", "\n", "nn", ".", "Conv3d", "(", "m", ",", "5", ",", "1", ")", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv3d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm3d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.deepmedic.DeepMedic.forward": [[78, 86], ["deepmedic.DeepMedic.branch1", "deepmedic.DeepMedic.branch2", "deepmedic.DeepMedic.up3", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "deepmedic.DeepMedic.fc"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "x1", ",", "x2", "=", "inputs", "\n", "x1", "=", "self", ".", "branch1", "(", "x1", ")", "\n", "x2", "=", "self", ".", "branch2", "(", "x2", ")", "\n", "x2", "=", "self", ".", "up3", "(", "x2", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x1", ",", "x2", "]", ",", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.deepmedic.VDeepMedic.__init__": [[88, 127], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "deepmedic.VDeepMedic.modules", "deepmedic.conv3x3", "deepmedic.conv3x3", "deepmedic.ResBlock", "deepmedic.ResBlock", "deepmedic.ResBlock", "deepmedic.ResBlock", "deepmedic.ResBlock", "deepmedic.conv3x3", "deepmedic.conv3x3", "deepmedic.conv3x3", "deepmedic.conv3x3", "deepmedic.conv3x3", "deepmedic.conv3x3", "deepmedic.conv3x3", "deepmedic.conv3x3", "torch.Upsample", "torch.Upsample", "torch.Upsample", "deepmedic.conv3x3", "deepmedic.conv3x3", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.StereoLoss.__init__", "home.repos.pwc.inspect_result.zwxu064_RANP.models.deepmedic.conv3x3", "home.repos.pwc.inspect_result.zwxu064_RANP.models.deepmedic.conv3x3", "home.repos.pwc.inspect_result.zwxu064_RANP.models.deepmedic.conv3x3", "home.repos.pwc.inspect_result.zwxu064_RANP.models.deepmedic.conv3x3", "home.repos.pwc.inspect_result.zwxu064_RANP.models.deepmedic.conv3x3", "home.repos.pwc.inspect_result.zwxu064_RANP.models.deepmedic.conv3x3", "home.repos.pwc.inspect_result.zwxu064_RANP.models.deepmedic.conv3x3", "home.repos.pwc.inspect_result.zwxu064_RANP.models.deepmedic.conv3x3", "home.repos.pwc.inspect_result.zwxu064_RANP.models.deepmedic.conv3x3", "home.repos.pwc.inspect_result.zwxu064_RANP.models.deepmedic.conv3x3", "home.repos.pwc.inspect_result.zwxu064_RANP.models.deepmedic.conv3x3", "home.repos.pwc.inspect_result.zwxu064_RANP.models.deepmedic.conv3x3"], ["    ", "def", "__init__", "(", "self", ",", "c", "=", "4", ",", "n1", "=", "30", ",", "n2", "=", "40", ",", "n3", "=", "50", ",", "m", "=", "150", ",", "up", "=", "True", ")", ":", "\n", "        ", "super", "(", "VDeepMedic", ",", "self", ")", ".", "__init__", "(", ")", "\n", "#n1, n2, n3 = 30, 40, 50", "\n", "# need 29 inputs", "\n", "\n", "n", "=", "2", "*", "n3", "\n", "self", ".", "branch1", "=", "nn", ".", "Sequential", "(", "\n", "conv3x3", "(", "c", ",", "n1", ")", ",", "\n", "conv3x3", "(", "n1", ",", "n1", ")", ",", "\n", "ResBlock", "(", "n1", ",", "n2", ")", ",", "\n", "ResBlock", "(", "n2", ",", "n2", ")", ",", "\n", "ResBlock", "(", "n2", ",", "n2", ")", ",", "\n", "ResBlock", "(", "n2", ",", "n2", ")", ",", "\n", "ResBlock", "(", "n2", ",", "n3", ")", ")", "\n", "\n", "self", ".", "branch2", "=", "nn", ".", "Sequential", "(", "\n", "conv3x3", "(", "c", ",", "n1", ")", ",", "\n", "conv3x3", "(", "n1", ",", "n1", ")", ",", "\n", "conv3x3", "(", "n1", ",", "n2", ")", ",", "\n", "conv3x3", "(", "n2", ",", "n2", ")", ",", "\n", "conv3x3", "(", "n2", ",", "n2", ")", ",", "\n", "conv3x3", "(", "n2", ",", "n2", ")", ",", "\n", "conv3x3", "(", "n2", ",", "n3", ")", ",", "\n", "conv3x3", "(", "n3", ",", "n3", ")", ")", "\n", "\n", "self", ".", "up3", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "3", ",", "\n", "mode", "=", "'trilinear'", ",", "align_corners", "=", "False", ")", "if", "up", "else", "repeat", "\n", "\n", "self", ".", "fc", "=", "nn", ".", "Sequential", "(", "\n", "conv3x3", "(", "n", ",", "m", ",", "1", ")", ",", "\n", "conv3x3", "(", "m", ",", "m", ",", "1", ")", ",", "\n", "nn", ".", "Conv3d", "(", "m", ",", "5", ",", "1", ")", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv3d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm3d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.deepmedic.VDeepMedic.forward": [[128, 136], ["deepmedic.VDeepMedic.branch1", "deepmedic.VDeepMedic.branch2", "deepmedic.VDeepMedic.up3", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "deepmedic.VDeepMedic.fc"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "x1", ",", "x2", "=", "inputs", "\n", "x1", "=", "self", ".", "branch1", "(", "x1", ")", "\n", "x2", "=", "self", ".", "branch2", "(", "x2", ")", "\n", "x2", "=", "self", ".", "up3", "(", "x2", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x1", ",", "x2", "]", ",", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.deepmedic.DeepMedicNR.__init__": [[140, 179], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "deepmedic.DeepMedicNR.modules", "deepmedic.conv3x3", "deepmedic.conv3x3", "deepmedic.conv3x3", "deepmedic.conv3x3", "deepmedic.conv3x3", "deepmedic.conv3x3", "deepmedic.conv3x3", "deepmedic.conv3x3", "deepmedic.conv3x3", "deepmedic.conv3x3", "deepmedic.conv3x3", "deepmedic.conv3x3", "deepmedic.conv3x3", "deepmedic.conv3x3", "deepmedic.conv3x3", "deepmedic.conv3x3", "torch.Upsample", "torch.Upsample", "torch.Upsample", "deepmedic.conv3x3", "deepmedic.conv3x3", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.StereoLoss.__init__", "home.repos.pwc.inspect_result.zwxu064_RANP.models.deepmedic.conv3x3", "home.repos.pwc.inspect_result.zwxu064_RANP.models.deepmedic.conv3x3", "home.repos.pwc.inspect_result.zwxu064_RANP.models.deepmedic.conv3x3", "home.repos.pwc.inspect_result.zwxu064_RANP.models.deepmedic.conv3x3", "home.repos.pwc.inspect_result.zwxu064_RANP.models.deepmedic.conv3x3", "home.repos.pwc.inspect_result.zwxu064_RANP.models.deepmedic.conv3x3", "home.repos.pwc.inspect_result.zwxu064_RANP.models.deepmedic.conv3x3", "home.repos.pwc.inspect_result.zwxu064_RANP.models.deepmedic.conv3x3", "home.repos.pwc.inspect_result.zwxu064_RANP.models.deepmedic.conv3x3", "home.repos.pwc.inspect_result.zwxu064_RANP.models.deepmedic.conv3x3", "home.repos.pwc.inspect_result.zwxu064_RANP.models.deepmedic.conv3x3", "home.repos.pwc.inspect_result.zwxu064_RANP.models.deepmedic.conv3x3", "home.repos.pwc.inspect_result.zwxu064_RANP.models.deepmedic.conv3x3", "home.repos.pwc.inspect_result.zwxu064_RANP.models.deepmedic.conv3x3", "home.repos.pwc.inspect_result.zwxu064_RANP.models.deepmedic.conv3x3", "home.repos.pwc.inspect_result.zwxu064_RANP.models.deepmedic.conv3x3", "home.repos.pwc.inspect_result.zwxu064_RANP.models.deepmedic.conv3x3", "home.repos.pwc.inspect_result.zwxu064_RANP.models.deepmedic.conv3x3"], ["    ", "def", "__init__", "(", "self", ",", "c", "=", "4", ",", "n1", "=", "30", ",", "n2", "=", "40", ",", "n3", "=", "50", ",", "m", "=", "150", ",", "up", "=", "True", ")", ":", "\n", "        ", "super", "(", "DeepMedicNR", ",", "self", ")", ".", "__init__", "(", ")", "\n", "#n1, n2, n3 = 30, 40, 50", "\n", "\n", "n", "=", "2", "*", "n3", "\n", "self", ".", "branch1", "=", "nn", ".", "Sequential", "(", "\n", "conv3x3", "(", "c", ",", "n1", ")", ",", "\n", "conv3x3", "(", "n1", ",", "n1", ")", ",", "\n", "conv3x3", "(", "n1", ",", "n2", ")", ",", "\n", "conv3x3", "(", "n2", ",", "n2", ")", ",", "\n", "conv3x3", "(", "n2", ",", "n2", ")", ",", "\n", "conv3x3", "(", "n2", ",", "n2", ")", ",", "\n", "conv3x3", "(", "n2", ",", "n3", ")", ",", "\n", "conv3x3", "(", "n3", ",", "n3", ")", ")", "\n", "\n", "self", ".", "branch2", "=", "nn", ".", "Sequential", "(", "\n", "conv3x3", "(", "c", ",", "n1", ")", ",", "\n", "conv3x3", "(", "n1", ",", "n1", ")", ",", "\n", "conv3x3", "(", "n1", ",", "n2", ")", ",", "\n", "conv3x3", "(", "n2", ",", "n2", ")", ",", "\n", "conv3x3", "(", "n2", ",", "n2", ")", ",", "\n", "conv3x3", "(", "n2", ",", "n2", ")", ",", "\n", "conv3x3", "(", "n2", ",", "n3", ")", ",", "\n", "conv3x3", "(", "n3", ",", "n3", ")", ")", "\n", "\n", "self", ".", "up3", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "3", ",", "\n", "mode", "=", "'trilinear'", ",", "align_corners", "=", "False", ")", "if", "up", "else", "repeat", "\n", "\n", "self", ".", "fc", "=", "nn", ".", "Sequential", "(", "\n", "conv3x3", "(", "n", ",", "m", ",", "1", ")", ",", "\n", "conv3x3", "(", "m", ",", "m", ",", "1", ")", ",", "\n", "nn", ".", "Conv3d", "(", "m", ",", "5", ",", "1", ")", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv3d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm3d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.deepmedic.DeepMedicNR.forward": [[180, 188], ["deepmedic.DeepMedicNR.branch1", "deepmedic.DeepMedicNR.branch2", "deepmedic.DeepMedicNR.up3", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "deepmedic.DeepMedicNR.fc"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "x1", ",", "x2", "=", "inputs", "\n", "x1", "=", "self", ".", "branch1", "(", "x1", ")", "\n", "x2", "=", "self", ".", "branch2", "(", "x2", ")", "\n", "x2", "=", "self", ".", "up3", "(", "x2", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x1", ",", "x2", "]", ",", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.deepmedic.conv3x3": [[26, 31], ["torch.Sequential", "torch.Conv3d", "torch.BatchNorm3d", "torch.ReLU"], "function", ["None"], ["", "", "def", "conv3x3", "(", "inplanes", ",", "planes", ",", "ksize", "=", "3", ")", ":", "\n", "    ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "inplanes", ",", "planes", ",", "ksize", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "planes", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.deepmedic.repeat": [[32, 38], ["x.repeat.unsqueeze().unsqueeze().unsqueeze", "x.repeat.repeat", "x.repeat.view", "x.repeat.unsqueeze().unsqueeze", "x.repeat.unsqueeze"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.models.deepmedic.repeat"], ["", "def", "repeat", "(", "x", ",", "n", "=", "3", ")", ":", "\n", "# nc333", "\n", "    ", "b", ",", "c", ",", "h", ",", "w", ",", "t", "=", "x", ".", "shape", "\n", "x", "=", "x", ".", "unsqueeze", "(", "5", ")", ".", "unsqueeze", "(", "4", ")", ".", "unsqueeze", "(", "3", ")", "\n", "x", "=", "x", ".", "repeat", "(", "1", ",", "1", ",", "1", ",", "n", ",", "1", ",", "n", ",", "1", ",", "n", ")", "\n", "return", "x", ".", "view", "(", "b", ",", "c", ",", "n", "*", "h", ",", "n", "*", "w", ",", "n", "*", "t", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.criterions.hard_cross_entropy": [[8, 30], ["torch.cross_entropy", "pos.sum.sum", "min", "pos.sum.numel", "neg.sum.numel", "torch.topk", "torch.topk", "neg.sum.sum", "int"], "function", ["None"], ["def", "hard_cross_entropy", "(", "output", ",", "target", ",", "alpha", "=", "3.0", ",", "ignore_index", "=", "255", ")", ":", "\n", "    ", "mtx", "=", "F", ".", "cross_entropy", "(", "output", ",", "target", ",", "reduce", "=", "False", ",", "ignore_index", "=", "ignore_index", ")", "\n", "\n", "bg", "=", "(", "target", "==", "0", ")", "\n", "\n", "neg", "=", "mtx", "[", "bg", "]", "\n", "pos", "=", "mtx", "[", "1", "-", "bg", "]", "\n", "\n", "Np", ",", "Nn", "=", "pos", ".", "numel", "(", ")", ",", "neg", ".", "numel", "(", ")", "\n", "\n", "pos", "=", "pos", ".", "sum", "(", ")", "\n", "\n", "k", "=", "min", "(", "Np", "*", "alpha", ",", "Nn", ")", "\n", "if", "k", ">", "0", ":", "\n", "        ", "neg", ",", "_", "=", "torch", ".", "topk", "(", "neg", ",", "int", "(", "k", ")", ")", "\n", "neg", "=", "neg", ".", "sum", "(", ")", "\n", "", "else", ":", "\n", "        ", "neg", "=", "0.0", "\n", "\n", "", "loss", "=", "(", "pos", "+", "neg", ")", "/", "(", "Np", "+", "k", ")", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.criterions.hard_per_im_cross_entropy": [[32, 51], ["output.view.view", "target.view.view", "torch.cross_entropy", "pos.long().sum", "F.cross_entropy.clone().detach", "mtx.clone().detach.sort", "loss_idx.sort", "torch.clamp", "torch.clamp", "mtx[].mean", "pos.long", "F.cross_entropy.clone", "pos.size"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.binvox_rw.Voxels.clone"], ["", "def", "hard_per_im_cross_entropy", "(", "output", ",", "target", ",", "alpha", "=", "3.0", ",", "ignore_index", "=", "255", ")", ":", "\n", "    ", "n", ",", "c", "=", "output", ".", "shape", "[", ":", "2", "]", "\n", "output", "=", "output", ".", "view", "(", "n", ",", "c", ",", "-", "1", ")", "\n", "target", "=", "target", ".", "view", "(", "n", ",", "-", "1", ")", "\n", "\n", "mtx", "=", "F", ".", "cross_entropy", "(", "output", ",", "target", ",", "reduce", "=", "False", ",", "ignore_index", "=", "ignore_index", ")", "\n", "\n", "pos", "=", "target", ">", "0", "\n", "num_pos", "=", "pos", ".", "long", "(", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "\n", "loss", "=", "mtx", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "loss", "[", "pos", "]", "=", "0", "\n", "_", ",", "loss_idx", "=", "loss", ".", "sort", "(", "1", ",", "descending", "=", "True", ")", "\n", "_", ",", "idx_rank", "=", "loss_idx", ".", "sort", "(", "1", ")", "\n", "\n", "num_neg", "=", "torch", ".", "clamp", "(", "alpha", "*", "num_pos", ",", "max", "=", "pos", ".", "size", "(", "1", ")", "-", "1", ")", "\n", "neg", "=", "idx_rank", "<", "num_neg", "\n", "\n", "return", "mtx", "[", "neg", "+", "pos", "]", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.criterions.focal_loss": [[53, 68], ["target.size", "torch.cross_entropy", "pos.view().sum().view", "torch.clamp", "torch.clamp", "z.detach.detach", "focal.sum", "pos.view().sum", "torch.pow", "torch.pow", "pos.view", "torch.exp", "torch.exp"], "function", ["None"], ["", "def", "focal_loss", "(", "output", ",", "target", ",", "alpha", "=", "0.25", ",", "gamma", "=", "2.0", ",", "ignore_index", "=", "255", ")", ":", "\n", "    ", "n", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "lsfm", "=", "F", ".", "cross_entropy", "(", "output", ",", "target", ",", "reduce", "=", "False", ",", "ignore_index", "=", "ignore_index", ")", "\n", "\n", "pos", "=", "(", "target", ">", "0", ")", ".", "float", "(", ")", "\n", "Np", "=", "pos", ".", "view", "(", "n", ",", "-", "1", ")", ".", "sum", "(", "1", ")", ".", "view", "(", "n", ",", "1", ",", "1", ",", "1", ")", "\n", "\n", "Np", "=", "torch", ".", "clamp", "(", "Np", ",", "1.0", ")", "\n", "z", "=", "pos", "*", "alpha", "/", "Np", "/", "n", "+", "(", "1.0", "-", "pos", ")", "*", "(", "1.0", "-", "alpha", ")", "/", "Np", "/", "n", "\n", "z", "=", "z", ".", "detach", "(", ")", "\n", "\n", "focal", "=", "torch", ".", "pow", "(", "1.0", "-", "torch", ".", "exp", "(", "-", "lsfm", ")", ",", "gamma", ")", "*", "lsfm", "*", "z", "\n", "\n", "return", "focal", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.criterions.mean_cross_entropy": [[70, 83], ["torch.cross_entropy", "pos.mean", "neg.mean", "pos.numel", "pos.neg"], "function", ["None"], ["", "def", "mean_cross_entropy", "(", "output", ",", "target", ",", "alpha", "=", "3.0", ",", "ignore_index", "=", "255", ")", ":", "\n", "    ", "mtx", "=", "F", ".", "cross_entropy", "(", "output", ",", "target", ",", "reduce", "=", "False", ",", "ignore_index", "=", "ignore_index", ")", "\n", "\n", "bg", "=", "(", "target", "==", "0", ")", "\n", "\n", "neg", "=", "mtx", "[", "bg", "]", "\n", "pos", "=", "mtx", "[", "1", "-", "bg", "]", "\n", "\n", "pos", "=", "pos", ".", "mean", "(", ")", "if", "pos", ".", "numel", "(", ")", ">", "0", "else", "0", "\n", "neg", "=", "neg", ".", "mean", "(", ")", "if", "pos", ".", "neg", "(", ")", ">", "0", "else", "0", "\n", "\n", "loss", "=", "(", "neg", "*", "alpha", "+", "pos", ")", "/", "(", "alpha", "+", "1.0", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.criterions.dice": [[86, 90], ["output.sum", "target.sum"], "function", ["None"], ["def", "dice", "(", "output", ",", "target", ")", ":", "\n", "    ", "num", "=", "2", "*", "(", "output", "*", "target", ")", ".", "sum", "(", ")", "+", "eps", "\n", "den", "=", "output", ".", "sum", "(", ")", "+", "target", ".", "sum", "(", ")", "+", "eps", "\n", "return", "1.0", "-", "num", "/", "den", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.criterions.cross_entropy_dice": [[92, 106], ["torch.softmax", "range", "torch.cross_entropy", "torch.cross_entropy", "criterions.dice"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.miccai.metrics.dice"], ["", "def", "cross_entropy_dice", "(", "output", ",", "target", ",", "weight", "=", "1.0", ",", "ignore_index", "=", "255", ")", ":", "\n", "# Note: this output is not from Softmax(), but just score (logit)", "\n", "    ", "if", "True", ":", "\n", "        ", "loss", "=", "weight", "*", "F", ".", "cross_entropy", "(", "output", ",", "target", ",", "ignore_index", "=", "ignore_index", ")", "\n", "output", "=", "F", ".", "softmax", "(", "output", ",", "dim", "=", "1", ")", "\n", "for", "c", "in", "range", "(", "1", ",", "5", ")", ":", "\n", "            ", "o", "=", "output", "[", ":", ",", "c", "]", "\n", "t", "=", "(", "target", "==", "c", ")", ".", "float", "(", ")", "\n", "loss", "+=", "0.25", "*", "dice", "(", "o", ",", "t", ")", "\n", "", "", "else", ":", "\n", "# output = F.softmax(output, dim=1)", "\n", "        ", "loss", "=", "F", ".", "cross_entropy", "(", "output", ",", "target", ",", "ignore_index", "=", "ignore_index", ")", "\n", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.criterions.dice_per_im": [[110, 117], ["output.view.view", "target.view.view", "output.view.sum", "target.view.sum"], "function", ["None"], ["", "def", "dice_per_im", "(", "output", ",", "target", ")", ":", "\n", "    ", "n", "=", "output", ".", "shape", "[", "0", "]", "\n", "output", "=", "output", ".", "view", "(", "n", ",", "-", "1", ")", "\n", "target", "=", "target", ".", "view", "(", "n", ",", "-", "1", ")", "\n", "num", "=", "2", "*", "(", "output", "*", "target", ")", ".", "sum", "(", "1", ")", "+", "eps", "\n", "den", "=", "output", ".", "sum", "(", "1", ")", "+", "target", ".", "sum", "(", "1", ")", "+", "eps", "\n", "return", "1.0", "-", "(", "num", "/", "den", ")", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.criterions.cross_entropy_dice_per_im": [[118, 127], ["torch.softmax", "range", "torch.cross_entropy", "criterions.dice_per_im"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.models.criterions.dice_per_im"], ["", "def", "cross_entropy_dice_per_im", "(", "output", ",", "target", ",", "weight", "=", "1.0", ",", "ignore_index", "=", "255", ")", ":", "\n", "    ", "loss", "=", "weight", "*", "F", ".", "cross_entropy", "(", "output", ",", "target", ",", "ignore_index", "=", "ignore_index", ")", "\n", "output", "=", "F", ".", "softmax", "(", "output", ",", "dim", "=", "1", ")", "\n", "for", "c", "in", "range", "(", "1", ",", "5", ")", ":", "\n", "        ", "o", "=", "output", "[", ":", ",", "c", "]", "\n", "t", "=", "(", "target", "==", "c", ")", ".", "float", "(", ")", "\n", "loss", "+=", "0.25", "*", "dice_per_im", "(", "o", ",", "t", ")", "\n", "\n", "", "return", "loss", "\n", "", ""]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.submodule.BasicBlock.__init__": [[26, 37], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "submodule.convbn", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "submodule.convbn"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.StereoLoss.__init__", "home.repos.pwc.inspect_result.zwxu064_RANP.models.submodule.convbn", "home.repos.pwc.inspect_result.zwxu064_RANP.models.submodule.convbn"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "pad", ",", "dilation", ",", "activation_mode", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "activation", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "if", "(", "activation_mode", "==", "'ReLU'", ")", "else", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "convbn", "(", "inplanes", ",", "planes", ",", "3", ",", "stride", ",", "pad", ",", "dilation", ")", ",", "\n", "activation", ")", "\n", "\n", "self", ".", "conv2", "=", "convbn", "(", "planes", ",", "planes", ",", "3", ",", "1", ",", "pad", ",", "dilation", ")", "\n", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.submodule.BasicBlock.forward": [[38, 48], ["submodule.BasicBlock.conv1", "submodule.BasicBlock.conv2", "submodule.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "x", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.submodule.matchshifted.__init__": [[50, 52], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.StereoLoss.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "matchshifted", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.submodule.matchshifted.forward": [[53, 59], ["left.size", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "range", "range"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "left", ",", "right", ",", "shift", ")", ":", "\n", "        ", "batch", ",", "filters", ",", "height", ",", "width", "=", "left", ".", "size", "(", ")", "\n", "shifted_left", "=", "F", ".", "pad", "(", "torch", ".", "index_select", "(", "left", ",", "3", ",", "Variable", "(", "torch", ".", "LongTensor", "(", "[", "i", "for", "i", "in", "range", "(", "shift", ",", "width", ")", "]", ")", ")", ".", "cuda", "(", ")", ")", ",", "(", "shift", ",", "0", ",", "0", ",", "0", ")", ")", "\n", "shifted_right", "=", "F", ".", "pad", "(", "torch", ".", "index_select", "(", "right", ",", "3", ",", "Variable", "(", "torch", ".", "LongTensor", "(", "[", "i", "for", "i", "in", "range", "(", "width", "-", "shift", ")", "]", ")", ")", ".", "cuda", "(", ")", ")", ",", "(", "shift", ",", "0", ",", "0", ",", "0", ")", ")", "\n", "out", "=", "torch", ".", "cat", "(", "(", "shifted_left", ",", "shifted_right", ")", ",", "1", ")", ".", "view", "(", "batch", ",", "filters", "*", "2", ",", "1", ",", "height", ",", "width", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.submodule.disparityregression.__init__": [[61, 64], ["torch.Module.__init__", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "numpy.reshape", "numpy.array", "range"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.StereoLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "maxdisp", ")", ":", "\n", "        ", "super", "(", "disparityregression", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "disp", "=", "Variable", "(", "torch", ".", "Tensor", "(", "np", ".", "reshape", "(", "np", ".", "array", "(", "range", "(", "maxdisp", ")", ")", ",", "[", "1", ",", "maxdisp", ",", "1", ",", "1", "]", ")", ")", ".", "cuda", "(", ")", ",", "requires_grad", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.submodule.disparityregression.forward": [[65, 69], ["submodule.disparityregression.disp.repeat", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "x.size", "x.size", "x.size"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.models.deepmedic.repeat"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "disp", "=", "self", ".", "disp", ".", "repeat", "(", "x", ".", "size", "(", ")", "[", "0", "]", ",", "1", ",", "x", ".", "size", "(", ")", "[", "2", "]", ",", "x", ".", "size", "(", ")", "[", "3", "]", ")", "\n", "out", "=", "torch", ".", "sum", "(", "x", "*", "disp", ",", "1", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.submodule.feature_extraction.__init__": [[71, 106], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "submodule.feature_extraction._make_layer", "submodule.feature_extraction._make_layer", "submodule.feature_extraction._make_layer", "submodule.feature_extraction._make_layer", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "submodule.convbn", "submodule.convbn", "submodule.convbn", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "submodule.convbn", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "submodule.convbn", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "submodule.convbn", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "submodule.convbn", "submodule.convbn", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.StereoLoss.__init__", "home.repos.pwc.inspect_result.zwxu064_RANP.models.submodule.feature_extraction._make_layer", "home.repos.pwc.inspect_result.zwxu064_RANP.models.submodule.feature_extraction._make_layer", "home.repos.pwc.inspect_result.zwxu064_RANP.models.submodule.feature_extraction._make_layer", "home.repos.pwc.inspect_result.zwxu064_RANP.models.submodule.feature_extraction._make_layer", "home.repos.pwc.inspect_result.zwxu064_RANP.models.submodule.convbn", "home.repos.pwc.inspect_result.zwxu064_RANP.models.submodule.convbn", "home.repos.pwc.inspect_result.zwxu064_RANP.models.submodule.convbn", "home.repos.pwc.inspect_result.zwxu064_RANP.models.submodule.convbn", "home.repos.pwc.inspect_result.zwxu064_RANP.models.submodule.convbn", "home.repos.pwc.inspect_result.zwxu064_RANP.models.submodule.convbn", "home.repos.pwc.inspect_result.zwxu064_RANP.models.submodule.convbn", "home.repos.pwc.inspect_result.zwxu064_RANP.models.submodule.convbn"], ["    ", "def", "__init__", "(", "self", ",", "activation_mode", ",", "n_out", "=", "32", ")", ":", "\n", "        ", "super", "(", "feature_extraction", ",", "self", ")", ".", "__init__", "(", ")", "\n", "activation", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "if", "(", "activation_mode", "==", "'ReLU'", ")", "else", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "\n", "self", ".", "inplanes", "=", "32", "\n", "self", ".", "firstconv", "=", "nn", ".", "Sequential", "(", "convbn", "(", "3", ",", "32", ",", "3", ",", "2", ",", "1", ",", "1", ")", ",", "\n", "activation", ",", "\n", "convbn", "(", "32", ",", "32", ",", "3", ",", "1", ",", "1", ",", "1", ")", ",", "\n", "activation", ",", "\n", "convbn", "(", "32", ",", "32", ",", "3", ",", "1", ",", "1", ",", "1", ")", ",", "\n", "activation", ")", "\n", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "BasicBlock", ",", "32", ",", "3", ",", "1", ",", "1", ",", "1", ",", "activation_mode", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "BasicBlock", ",", "64", ",", "16", ",", "2", ",", "1", ",", "1", ",", "activation_mode", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "BasicBlock", ",", "128", ",", "3", ",", "1", ",", "1", ",", "1", ",", "activation_mode", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "BasicBlock", ",", "128", ",", "3", ",", "1", ",", "1", ",", "2", ",", "activation_mode", ")", "\n", "\n", "self", ".", "branch1", "=", "nn", ".", "Sequential", "(", "nn", ".", "AvgPool2d", "(", "(", "64", ",", "64", ")", ",", "stride", "=", "(", "64", ",", "64", ")", ")", ",", "\n", "convbn", "(", "128", ",", "32", ",", "1", ",", "1", ",", "0", ",", "1", ")", ",", "\n", "activation", ")", "\n", "\n", "self", ".", "branch2", "=", "nn", ".", "Sequential", "(", "nn", ".", "AvgPool2d", "(", "(", "32", ",", "32", ")", ",", "stride", "=", "(", "32", ",", "32", ")", ")", ",", "\n", "convbn", "(", "128", ",", "32", ",", "1", ",", "1", ",", "0", ",", "1", ")", ",", "\n", "activation", ")", "\n", "\n", "self", ".", "branch3", "=", "nn", ".", "Sequential", "(", "nn", ".", "AvgPool2d", "(", "(", "16", ",", "16", ")", ",", "stride", "=", "(", "16", ",", "16", ")", ")", ",", "\n", "convbn", "(", "128", ",", "32", ",", "1", ",", "1", ",", "0", ",", "1", ")", ",", "\n", "activation", ")", "\n", "\n", "self", ".", "branch4", "=", "nn", ".", "Sequential", "(", "nn", ".", "AvgPool2d", "(", "(", "8", ",", "8", ")", ",", "stride", "=", "(", "8", ",", "8", ")", ")", ",", "\n", "convbn", "(", "128", ",", "32", ",", "1", ",", "1", ",", "0", ",", "1", ")", ",", "\n", "activation", ")", "\n", "\n", "self", ".", "lastconv", "=", "nn", ".", "Sequential", "(", "convbn", "(", "320", ",", "128", ",", "3", ",", "1", ",", "1", ",", "1", ")", ",", "\n", "activation", ",", "\n", "nn", ".", "Conv2d", "(", "128", ",", "n_out", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.submodule.feature_extraction._make_layer": [[107, 122], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", ",", "pad", ",", "dilation", ",", "activation_mode", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "           ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "pad", ",", "dilation", ",", "activation_mode", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "1", ",", "None", ",", "pad", ",", "dilation", ",", "activation_mode", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.submodule.feature_extraction.forward": [[123, 151], ["submodule.feature_extraction.firstconv", "submodule.feature_extraction.layer1", "submodule.feature_extraction.layer2", "submodule.feature_extraction.layer3", "submodule.feature_extraction.layer4", "submodule.feature_extraction.branch1", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "submodule.feature_extraction.branch2", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "submodule.feature_extraction.branch3", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "submodule.feature_extraction.branch4", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "submodule.feature_extraction.lastconv", "submodule.feature_extraction.size", "submodule.feature_extraction.size", "submodule.feature_extraction.size", "submodule.feature_extraction.size", "submodule.feature_extraction.size", "submodule.feature_extraction.size", "submodule.feature_extraction.size", "submodule.feature_extraction.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "output", "=", "self", ".", "firstconv", "(", "x", ")", "\n", "output", "=", "self", ".", "layer1", "(", "output", ")", "\n", "output_raw", "=", "self", ".", "layer2", "(", "output", ")", "\n", "output", "=", "self", ".", "layer3", "(", "output_raw", ")", "\n", "output_skip", "=", "self", ".", "layer4", "(", "output", ")", "\n", "\n", "\n", "output_branch1", "=", "self", ".", "branch1", "(", "output_skip", ")", "\n", "output_branch1", "=", "F", ".", "interpolate", "(", "output_branch1", ",", "(", "output_skip", ".", "size", "(", ")", "[", "2", "]", ",", "output_skip", ".", "size", "(", ")", "[", "3", "]", ")", ",", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "True", ")", "\n", "\n", "output_branch2", "=", "self", ".", "branch2", "(", "output_skip", ")", "\n", "output_branch2", "=", "F", ".", "interpolate", "(", "output_branch2", ",", "(", "output_skip", ".", "size", "(", ")", "[", "2", "]", ",", "output_skip", ".", "size", "(", ")", "[", "3", "]", ")", ",", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "True", ")", "\n", "\n", "output_branch3", "=", "self", ".", "branch3", "(", "output_skip", ")", "\n", "output_branch3", "=", "F", ".", "interpolate", "(", "output_branch3", ",", "(", "output_skip", ".", "size", "(", ")", "[", "2", "]", ",", "output_skip", ".", "size", "(", ")", "[", "3", "]", ")", ",", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "True", ")", "\n", "\n", "output_branch4", "=", "self", ".", "branch4", "(", "output_skip", ")", "\n", "output_branch4", "=", "F", ".", "interpolate", "(", "output_branch4", ",", "(", "output_skip", ".", "size", "(", ")", "[", "2", "]", ",", "output_skip", ".", "size", "(", ")", "[", "3", "]", ")", ",", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "True", ")", "\n", "\n", "output_feature_concat", "=", "torch", ".", "cat", "(", "(", "output_raw", ",", "output_skip", ",", "output_branch4", ",", "output_branch3", ",", "output_branch2", ",", "output_branch1", ")", ",", "1", ")", "\n", "output_feature", "=", "self", ".", "lastconv", "(", "output_feature_concat", ")", "\n", "\n", "return", "output_feature", ",", "output_feature_concat", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.submodule.convbn": [[10, 14], ["torch.Sequential", "torch.Conv2d", "torch.BatchNorm2d"], "function", ["None"], ["def", "convbn", "(", "in_planes", ",", "out_planes", ",", "kernel_size", ",", "stride", ",", "pad", ",", "dilation", ")", ":", "\n", "\n", "    ", "return", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "dilation", "if", "dilation", ">", "1", "else", "pad", ",", "dilation", "=", "dilation", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.submodule.convbn_3d": [[16, 22], ["torch.Sequential", "torch.Sequential", "torch.Conv3d", "torch.BatchNorm3d", "torch.Conv3d"], "function", ["None"], ["", "def", "convbn_3d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", ",", "stride", ",", "pad", ",", "enable_bn", "=", "True", ")", ":", "\n", "    ", "if", "enable_bn", ":", "\n", "      ", "return", "nn", ".", "Sequential", "(", "nn", ".", "Conv3d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "kernel_size", ",", "padding", "=", "pad", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "out_planes", ")", ")", "\n", "", "else", ":", "\n", "      ", "return", "nn", ".", "Sequential", "(", "nn", ".", "Conv3d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "kernel_size", ",", "padding", "=", "pad", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.stackhourglass.hourglass.__init__": [[11, 41], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "submodule.convbn_3d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "submodule.convbn_3d", "submodule.convbn_3d", "submodule.convbn_3d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ConvTranspose3d", "torch.ConvTranspose3d", "torch.ConvTranspose3d", "torch.ConvTranspose3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ConvTranspose3d", "torch.ConvTranspose3d", "torch.ConvTranspose3d", "torch.ConvTranspose3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.StereoLoss.__init__", "home.repos.pwc.inspect_result.zwxu064_RANP.models.submodule.convbn_3d", "home.repos.pwc.inspect_result.zwxu064_RANP.models.submodule.convbn_3d", "home.repos.pwc.inspect_result.zwxu064_RANP.models.submodule.convbn_3d", "home.repos.pwc.inspect_result.zwxu064_RANP.models.submodule.convbn_3d"], ["    ", "def", "__init__", "(", "self", ",", "inplanes", ",", "activation_mode", "=", "'ReLU'", ",", "upsample_mode", "=", "'transpose'", ")", ":", "\n", "        ", "super", "(", "hourglass", ",", "self", ")", ".", "__init__", "(", ")", "\n", "activation", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "if", "(", "activation_mode", "==", "'ReLU'", ")", "else", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "\n", "self", ".", "activation", "=", "activation", "\n", "self", ".", "upsample_mode", "=", "upsample_mode", "\n", "\n", "# Group 1", "\n", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "convbn_3d", "(", "inplanes", ",", "inplanes", "*", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "pad", "=", "1", ")", ",", "\n", "activation", ")", "\n", "self", ".", "conv2", "=", "convbn_3d", "(", "inplanes", "*", "2", ",", "inplanes", "*", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "pad", "=", "1", ")", "\n", "\n", "# Group 2", "\n", "self", ".", "conv3", "=", "nn", ".", "Sequential", "(", "convbn_3d", "(", "inplanes", "*", "2", ",", "inplanes", "*", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "pad", "=", "1", ")", ",", "\n", "activation", ")", "\n", "self", ".", "conv4", "=", "nn", ".", "Sequential", "(", "convbn_3d", "(", "inplanes", "*", "2", ",", "inplanes", "*", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "pad", "=", "1", ")", ",", "\n", "activation", ")", "\n", "\n", "# Group 3", "\n", "if", "upsample_mode", "==", "'transpose'", ":", "\n", "          ", "self", ".", "conv5", "=", "nn", ".", "Sequential", "(", "nn", ".", "ConvTranspose3d", "(", "inplanes", "*", "2", ",", "inplanes", "*", "2", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ",", "stride", "=", "2", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "inplanes", "*", "2", ")", ")", "#+conv2", "\n", "\n", "self", ".", "conv6", "=", "nn", ".", "Sequential", "(", "nn", ".", "ConvTranspose3d", "(", "inplanes", "*", "2", ",", "inplanes", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ",", "stride", "=", "2", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "inplanes", ")", ")", "#+x", "\n", "", "elif", "upsample_mode", "==", "'interpolation_conv'", ":", "\n", "# self.conv5 = nn.Sequential(nn.Conv3d(inplanes*2, inplanes*2, kernel_size=3, stride=1, padding=1, bias=False),", "\n", "#                            nn.BatchNorm3d(inplanes*2))", "\n", "          ", "self", ".", "conv5", "=", "nn", ".", "Sequential", "(", "nn", ".", "BatchNorm3d", "(", "inplanes", "*", "2", ")", ")", "\n", "self", ".", "conv6", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv3d", "(", "inplanes", "*", "2", ",", "inplanes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "inplanes", ")", ")", "\n", "# self.conv6 = nn.Sequential(nn.BatchNorm3d(inplanes))", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.stackhourglass.hourglass.forward": [[43, 74], ["stackhourglass.hourglass.conv1", "stackhourglass.hourglass.conv2", "stackhourglass.hourglass.conv3", "stackhourglass.hourglass.conv4", "stackhourglass.hourglass.activation", "stackhourglass.hourglass.activation", "stackhourglass.hourglass.conv6", "stackhourglass.hourglass.activation", "stackhourglass.hourglass.activation", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "stackhourglass.hourglass.conv6", "stackhourglass.hourglass.activation", "stackhourglass.hourglass.activation", "stackhourglass.hourglass.conv5", "stackhourglass.hourglass.conv5", "stackhourglass.hourglass.conv5", "stackhourglass.hourglass.conv5"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "presqu", ",", "postsqu", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "#in:1/4 out:1/8", "\n", "pre", "=", "self", ".", "conv2", "(", "out", ")", "#in:1/8 out:1/8", "\n", "if", "postsqu", "is", "not", "None", ":", "\n", "           ", "pre", "=", "self", ".", "activation", "(", "pre", "+", "postsqu", ")", "\n", "", "else", ":", "\n", "           ", "pre", "=", "self", ".", "activation", "(", "pre", ")", "\n", "\n", "", "out", "=", "self", ".", "conv3", "(", "pre", ")", "#in:1/8 out:1/16", "\n", "out", "=", "self", ".", "conv4", "(", "out", ")", "#in:1/16 out:1/16", "\n", "\n", "if", "self", ".", "upsample_mode", "==", "'transpose'", ":", "\n", "          ", "if", "presqu", "is", "not", "None", ":", "\n", "            ", "post", "=", "self", ".", "activation", "(", "self", ".", "conv5", "(", "out", ")", "+", "presqu", ")", "#in:1/16 out:1/8", "\n", "", "else", ":", "\n", "            ", "post", "=", "self", ".", "activation", "(", "self", ".", "conv5", "(", "out", ")", "+", "pre", ")", "\n", "\n", "", "out", "=", "self", ".", "conv6", "(", "post", ")", "# in:1/8 out:1/4", "\n", "", "elif", "self", ".", "upsample_mode", "==", "'interpolation_conv'", ":", "\n", "          ", "d", ",", "h", ",", "w", "=", "out", ".", "shape", "[", "-", "3", ":", "]", "\n", "out", "=", "F", ".", "interpolate", "(", "out", ",", "(", "2", "*", "d", ",", "2", "*", "h", ",", "2", "*", "w", ")", ",", "mode", "=", "'trilinear'", ",", "align_corners", "=", "True", ")", "\n", "if", "presqu", "is", "not", "None", ":", "\n", "            ", "post", "=", "self", ".", "activation", "(", "self", ".", "conv5", "(", "out", ")", "+", "presqu", ")", "\n", "", "else", ":", "\n", "            ", "post", "=", "self", ".", "activation", "(", "self", ".", "conv5", "(", "out", ")", "+", "pre", ")", "\n", "\n", "", "d", ",", "h", ",", "w", "=", "post", ".", "shape", "[", "-", "3", ":", "]", "\n", "post_2x", "=", "F", ".", "interpolate", "(", "post", ",", "(", "2", "*", "d", ",", "2", "*", "h", ",", "2", "*", "w", ")", ",", "mode", "=", "'trilinear'", ",", "align_corners", "=", "True", ")", "\n", "out", "=", "self", ".", "conv6", "(", "post_2x", ")", "\n", "\n", "", "return", "out", ",", "pre", ",", "post", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.stackhourglass.PSMNet.__init__": [[76, 128], ["torch.Module.__init__", "submodule.feature_extraction", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "stackhourglass.PSMNet.modules", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "submodule.convbn_3d", "submodule.convbn_3d", "submodule.convbn_3d", "submodule.convbn_3d", "stackhourglass.hourglass", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "stackhourglass.hourglass", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "stackhourglass.hourglass", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "isinstance", "submodule.convbn_3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "submodule.convbn_3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "submodule.convbn_3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.StereoLoss.__init__", "home.repos.pwc.inspect_result.zwxu064_RANP.models.submodule.convbn_3d", "home.repos.pwc.inspect_result.zwxu064_RANP.models.submodule.convbn_3d", "home.repos.pwc.inspect_result.zwxu064_RANP.models.submodule.convbn_3d", "home.repos.pwc.inspect_result.zwxu064_RANP.models.submodule.convbn_3d", "home.repos.pwc.inspect_result.zwxu064_RANP.models.submodule.convbn_3d", "home.repos.pwc.inspect_result.zwxu064_RANP.models.submodule.convbn_3d", "home.repos.pwc.inspect_result.zwxu064_RANP.models.submodule.convbn_3d"], ["    ", "def", "__init__", "(", "self", ",", "maxdisp", ",", "activation_mode", "=", "'ReLU'", ",", "enable_out_list", "=", "False", ",", "reduce_glass", "=", "0", ",", "cv_type", "=", "None", ")", ":", "\n", "        ", "super", "(", "PSMNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "activation", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "if", "(", "activation_mode", "==", "'ReLU'", ")", "else", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "\n", "self", ".", "enable_out_list", "=", "enable_out_list", "\n", "self", ".", "maxdisp", "=", "maxdisp", "\n", "self", ".", "reduce_glass", "=", "reduce_glass", "\n", "self", ".", "cv_type", "=", "cv_type", "\n", "cv_in", "=", "32", "if", "(", "self", ".", "cv_type", "==", "'abs_diff'", ")", "else", "64", "\n", "self", ".", "feature_extraction", "=", "feature_extraction", "(", "activation_mode", ")", "\n", "\n", "self", ".", "dres0", "=", "nn", ".", "Sequential", "(", "convbn_3d", "(", "cv_in", ",", "32", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "activation", ",", "\n", "convbn_3d", "(", "32", ",", "32", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "activation", ")", "\n", "\n", "self", ".", "dres1", "=", "nn", ".", "Sequential", "(", "convbn_3d", "(", "32", ",", "32", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "activation", ",", "\n", "convbn_3d", "(", "32", ",", "32", ",", "3", ",", "1", ",", "1", ")", ")", "\n", "\n", "if", "reduce_glass", "<=", "2", ":", "\n", "          ", "self", ".", "dres2", "=", "hourglass", "(", "32", ")", "\n", "self", ".", "classif1", "=", "nn", ".", "Sequential", "(", "convbn_3d", "(", "32", ",", "32", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "activation", ",", "\n", "nn", ".", "Conv3d", "(", "32", ",", "1", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "\n", "", "if", "reduce_glass", "<=", "1", ":", "\n", "          ", "self", ".", "dres3", "=", "hourglass", "(", "32", ")", "\n", "self", ".", "classif2", "=", "nn", ".", "Sequential", "(", "convbn_3d", "(", "32", ",", "32", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "activation", ",", "\n", "nn", ".", "Conv3d", "(", "32", ",", "1", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "\n", "", "if", "reduce_glass", "<=", "0", ":", "\n", "          ", "self", ".", "dres4", "=", "hourglass", "(", "32", ")", "\n", "self", ".", "classif3", "=", "nn", ".", "Sequential", "(", "convbn_3d", "(", "32", ",", "32", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "activation", ",", "\n", "nn", ".", "Conv3d", "(", "32", ",", "1", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "\n", "", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Conv3d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "kernel_size", "[", "2", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm3d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.stackhourglass.PSMNet.forward": [[129, 241], ["stackhourglass.PSMNet.feature_extraction", "stackhourglass.PSMNet.feature_extraction", "torch.autograd.Variable().cuda.contiguous", "stackhourglass.PSMNet.dres0", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "range", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "range", "stackhourglass.PSMNet.dres1", "stackhourglass.PSMNet.dres2", "stackhourglass.PSMNet.classif1", "stackhourglass.PSMNet.dres3", "stackhourglass.PSMNet.dres4", "stackhourglass.PSMNet.classif2", "stackhourglass.PSMNet.classif3", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "submodule.disparityregression", "submodule.disparityregression", "submodule.disparityregression", "submodule.disparityregression", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "submodule.disparityregression", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "left.size", "left.size", "left.size", "left.size", "left.size", "left.size", "left.size", "left.size", "submodule.disparityregression", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "left.size", "left.size", "refimg_fea.size", "refimg_fea.size", "refimg_fea.size", "refimg_fea.size", "left.size", "left.size", "refimg_fea.size", "refimg_fea.size", "refimg_fea.size", "refimg_fea.size", "refimg_fea.size", "refimg_fea.size", "refimg_fea.size", "refimg_fea.size"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "left", ",", "right", ",", "edge_weights", "=", "None", ")", ":", "\n", "# Zhiwei left: (1,3,256,512)->down to 1/4, refimg_fea: (1,32,64,128)", "\n", "        ", "refimg_fea", ",", "_", "=", "self", ".", "feature_extraction", "(", "left", ")", "\n", "targetimg_fea", ",", "_", "=", "self", ".", "feature_extraction", "(", "right", ")", "\n", "\n", "#matching", "\n", "if", "self", ".", "cv_type", "==", "'abs_diff'", ":", "\n", "          ", "cost", "=", "Variable", "(", "torch", ".", "FloatTensor", "(", "refimg_fea", ".", "size", "(", ")", "[", "0", "]", ",", "refimg_fea", ".", "size", "(", ")", "[", "1", "]", ",", "\n", "self", ".", "maxdisp", "//", "4", ",", "refimg_fea", ".", "size", "(", ")", "[", "2", "]", ",", "\n", "refimg_fea", ".", "size", "(", ")", "[", "3", "]", ")", ".", "zero_", "(", ")", ")", ".", "cuda", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "maxdisp", "//", "4", ")", ":", "\n", "            ", "if", "i", ">", "0", ":", "\n", "              ", "cost", "[", ":", ",", ":", ",", "i", ",", ":", ",", "i", ":", "]", "=", "(", "refimg_fea", "[", ":", ",", ":", ",", ":", ",", "i", ":", "]", "-", "targetimg_fea", "[", ":", ",", ":", ",", ":", ",", ":", "-", "i", "]", ")", ".", "abs", "(", ")", "\n", "", "else", ":", "\n", "              ", "cost", "[", ":", ",", ":", ",", "i", ",", ":", ",", ":", "]", "=", "(", "refimg_fea", "-", "targetimg_fea", ")", ".", "abs", "(", ")", "\n", "", "", "", "else", ":", "\n", "          ", "cost", "=", "Variable", "(", "torch", ".", "FloatTensor", "(", "refimg_fea", ".", "size", "(", ")", "[", "0", "]", ",", "refimg_fea", ".", "size", "(", ")", "[", "1", "]", "*", "2", ",", "\n", "self", ".", "maxdisp", "//", "4", ",", "refimg_fea", ".", "size", "(", ")", "[", "2", "]", ",", "\n", "refimg_fea", ".", "size", "(", ")", "[", "3", "]", ")", ".", "zero_", "(", ")", ")", ".", "cuda", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "maxdisp", "//", "4", ")", ":", "\n", "              ", "if", "i", ">", "0", ":", "\n", "               ", "cost", "[", ":", ",", ":", "refimg_fea", ".", "size", "(", ")", "[", "1", "]", ",", "i", ",", ":", ",", "i", ":", "]", "=", "refimg_fea", "[", ":", ",", ":", ",", ":", ",", "i", ":", "]", "\n", "cost", "[", ":", ",", "refimg_fea", ".", "size", "(", ")", "[", "1", "]", ":", ",", "i", ",", ":", ",", "i", ":", "]", "=", "targetimg_fea", "[", ":", ",", ":", ",", ":", ",", ":", "-", "i", "]", "\n", "", "else", ":", "\n", "               ", "cost", "[", ":", ",", ":", "refimg_fea", ".", "size", "(", ")", "[", "1", "]", ",", "i", ",", ":", ",", ":", "]", "=", "refimg_fea", "\n", "cost", "[", ":", ",", "refimg_fea", ".", "size", "(", ")", "[", "1", "]", ":", ",", "i", ",", ":", ",", ":", "]", "=", "targetimg_fea", "\n", "\n", "", "", "", "cost", "=", "cost", ".", "contiguous", "(", ")", "\n", "\n", "# Zhiwei cost: (1,64,48,64,128)", "\n", "\n", "cost0", "=", "self", ".", "dres0", "(", "cost", ")", "\n", "cost0", "=", "self", ".", "dres1", "(", "cost0", ")", "+", "cost0", "\n", "\n", "if", "self", ".", "reduce_glass", "<=", "2", ":", "\n", "          ", "out1", ",", "pre1", ",", "post1", "=", "self", ".", "dres2", "(", "cost0", ",", "None", ",", "None", ")", "\n", "out1", "=", "out1", "+", "cost0", "\n", "cost1", "=", "self", ".", "classif1", "(", "out1", ")", "\n", "\n", "", "if", "self", ".", "reduce_glass", "<=", "1", ":", "\n", "          ", "out2", ",", "pre2", ",", "post2", "=", "self", ".", "dres3", "(", "out1", ",", "pre1", ",", "post1", ")", "\n", "out2", "=", "out2", "+", "cost0", "\n", "cost2", "=", "self", ".", "classif2", "(", "out2", ")", "+", "cost1", "\n", "\n", "", "if", "self", ".", "reduce_glass", "<=", "0", ":", "\n", "          ", "out3", ",", "pre3", ",", "post3", "=", "self", ".", "dres4", "(", "out2", ",", "pre1", ",", "post2", ")", "\n", "out3", "=", "out3", "+", "cost0", "\n", "cost3", "=", "self", ".", "classif3", "(", "out3", ")", "+", "cost2", "\n", "\n", "", "if", "self", ".", "training", ":", "\n", "# Zhiwei From (1,1,48,64,128)->up to 4, (1,1,192,256,512)", "\n", "          ", "if", "self", ".", "reduce_glass", "<=", "2", ":", "\n", "            ", "cost1", "=", "F", ".", "interpolate", "(", "cost1", ",", "[", "self", ".", "maxdisp", ",", "left", ".", "size", "(", ")", "[", "2", "]", ",", "left", ".", "size", "(", ")", "[", "3", "]", "]", ",", "mode", "=", "'trilinear'", ",", "align_corners", "=", "True", ")", "\n", "cost1", "=", "torch", ".", "squeeze", "(", "cost1", ",", "1", ")", "\n", "pred1", "=", "F", ".", "softmax", "(", "cost1", ",", "dim", "=", "1", ")", "\n", "pred1", "=", "disparityregression", "(", "self", ".", "maxdisp", ")", "(", "pred1", ")", "\n", "\n", "", "if", "self", ".", "reduce_glass", "<=", "1", ":", "\n", "            ", "cost2", "=", "F", ".", "interpolate", "(", "cost2", ",", "[", "self", ".", "maxdisp", ",", "left", ".", "size", "(", ")", "[", "2", "]", ",", "left", ".", "size", "(", ")", "[", "3", "]", "]", ",", "mode", "=", "'trilinear'", ",", "align_corners", "=", "True", ")", "\n", "cost2", "=", "torch", ".", "squeeze", "(", "cost2", ",", "1", ")", "\n", "pred2", "=", "F", ".", "softmax", "(", "cost2", ",", "dim", "=", "1", ")", "\n", "pred2", "=", "disparityregression", "(", "self", ".", "maxdisp", ")", "(", "pred2", ")", "\n", "\n", "", "if", "self", ".", "reduce_glass", "<=", "0", ":", "\n", "            ", "cost3", "=", "F", ".", "interpolate", "(", "cost3", ",", "[", "self", ".", "maxdisp", ",", "left", ".", "size", "(", ")", "[", "2", "]", ",", "left", ".", "size", "(", ")", "[", "3", "]", "]", ",", "mode", "=", "'trilinear'", ",", "align_corners", "=", "True", ")", "\n", "cost3", "=", "torch", ".", "squeeze", "(", "cost3", ",", "1", ")", "\n", "pred3", "=", "F", ".", "softmax", "(", "cost3", ",", "dim", "=", "1", ")", "\n", "#For your information: This formulation 'softmax(c)' learned \"similarity\"", "\n", "#while 'softmax(-c)' learned 'matching cost' as mentioned in the paper.", "\n", "#However, 'c' or '-c' do not affect the performance because feature-based cost volume provided flexibility.", "\n", "pred3", "=", "disparityregression", "(", "self", ".", "maxdisp", ")", "(", "pred3", ")", "\n", "", "", "else", ":", "\n", "          ", "if", "self", ".", "reduce_glass", "==", "2", ":", "\n", "            ", "cost1", "=", "F", ".", "interpolate", "(", "cost1", ",", "[", "self", ".", "maxdisp", ",", "left", ".", "size", "(", ")", "[", "2", "]", ",", "left", ".", "size", "(", ")", "[", "3", "]", "]", ",", "mode", "=", "'trilinear'", ",", "align_corners", "=", "True", ")", "\n", "cost1", "=", "torch", ".", "squeeze", "(", "cost1", ",", "1", ")", "\n", "pred1", "=", "F", ".", "softmax", "(", "cost1", ",", "dim", "=", "1", ")", "\n", "pred1", "=", "disparityregression", "(", "self", ".", "maxdisp", ")", "(", "pred1", ")", "\n", "", "elif", "self", ".", "reduce_glass", "==", "1", ":", "\n", "            ", "cost2", "=", "F", ".", "interpolate", "(", "cost2", ",", "[", "self", ".", "maxdisp", ",", "left", ".", "size", "(", ")", "[", "2", "]", ",", "left", ".", "size", "(", ")", "[", "3", "]", "]", ",", "mode", "=", "'trilinear'", ",", "align_corners", "=", "True", ")", "\n", "cost2", "=", "torch", ".", "squeeze", "(", "cost2", ",", "1", ")", "\n", "pred2", "=", "F", ".", "softmax", "(", "cost2", ",", "dim", "=", "1", ")", "\n", "pred2", "=", "disparityregression", "(", "self", ".", "maxdisp", ")", "(", "pred2", ")", "\n", "", "elif", "self", ".", "reduce_glass", "==", "0", ":", "\n", "            ", "cost3", "=", "F", ".", "interpolate", "(", "cost3", ",", "[", "self", ".", "maxdisp", ",", "left", ".", "size", "(", ")", "[", "2", "]", ",", "left", ".", "size", "(", ")", "[", "3", "]", "]", ",", "mode", "=", "'trilinear'", ",", "align_corners", "=", "True", ")", "\n", "cost3", "=", "torch", ".", "squeeze", "(", "cost3", ",", "1", ")", "\n", "pred3", "=", "F", ".", "softmax", "(", "cost3", ",", "dim", "=", "1", ")", "\n", "pred3", "=", "disparityregression", "(", "self", ".", "maxdisp", ")", "(", "pred3", ")", "\n", "\n", "", "", "if", "self", ".", "reduce_glass", "==", "0", ":", "\n", "          ", "if", "self", ".", "training", ":", "\n", "            ", "if", "self", ".", "enable_out_list", ":", "\n", "              ", "return", "[", "pred1", ",", "pred2", ",", "pred3", "]", ",", "None", "\n", "", "else", ":", "\n", "              ", "return", "pred1", ",", "pred2", ",", "pred3", "\n", "", "", "else", ":", "\n", "              ", "return", "pred3", ",", "None", "\n", "", "", "elif", "self", ".", "reduce_glass", "==", "1", ":", "\n", "          ", "if", "self", ".", "training", ":", "\n", "            ", "if", "self", ".", "enable_out_list", ":", "\n", "              ", "return", "[", "pred1", ",", "pred2", "]", ",", "None", "\n", "", "else", ":", "\n", "              ", "return", "pred1", ",", "pred2", "\n", "", "", "else", ":", "\n", "            ", "return", "pred2", ",", "None", "\n", "", "", "elif", "self", ".", "reduce_glass", "==", "2", ":", "\n", "          ", "if", "self", ".", "training", ":", "\n", "            ", "if", "self", ".", "enable_out_list", ":", "\n", "              ", "return", "[", "pred1", "]", ",", "None", "\n", "", "else", ":", "\n", "              ", "return", "pred1", "\n", "", "", "else", ":", "\n", "            ", "return", "pred1", ",", "None", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.basic.PSMNet.__init__": [[10, 56], ["torch.Module.__init__", "feature_extraction", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "basic.PSMNet.modules", "convbn_3d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "convbn_3d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "convbn_3d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "convbn_3d", "convbn_3d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "convbn_3d", "convbn_3d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "convbn_3d", "convbn_3d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "convbn_3d", "convbn_3d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.StereoLoss.__init__", "home.repos.pwc.inspect_result.zwxu064_RANP.models.submodule.convbn_3d", "home.repos.pwc.inspect_result.zwxu064_RANP.models.submodule.convbn_3d", "home.repos.pwc.inspect_result.zwxu064_RANP.models.submodule.convbn_3d", "home.repos.pwc.inspect_result.zwxu064_RANP.models.submodule.convbn_3d", "home.repos.pwc.inspect_result.zwxu064_RANP.models.submodule.convbn_3d", "home.repos.pwc.inspect_result.zwxu064_RANP.models.submodule.convbn_3d", "home.repos.pwc.inspect_result.zwxu064_RANP.models.submodule.convbn_3d", "home.repos.pwc.inspect_result.zwxu064_RANP.models.submodule.convbn_3d", "home.repos.pwc.inspect_result.zwxu064_RANP.models.submodule.convbn_3d", "home.repos.pwc.inspect_result.zwxu064_RANP.models.submodule.convbn_3d", "home.repos.pwc.inspect_result.zwxu064_RANP.models.submodule.convbn_3d"], ["    ", "def", "__init__", "(", "self", ",", "maxdisp", ")", ":", "\n", "        ", "super", "(", "PSMNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "maxdisp", "=", "maxdisp", "\n", "self", ".", "feature_extraction", "=", "feature_extraction", "(", ")", "\n", "\n", "self", ".", "dres0", "=", "nn", ".", "Sequential", "(", "convbn_3d", "(", "64", ",", "32", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "convbn_3d", "(", "32", ",", "32", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "self", ".", "dres1", "=", "nn", ".", "Sequential", "(", "convbn_3d", "(", "32", ",", "32", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "convbn_3d", "(", "32", ",", "32", ",", "3", ",", "1", ",", "1", ")", ")", "\n", "\n", "self", ".", "dres2", "=", "nn", ".", "Sequential", "(", "convbn_3d", "(", "32", ",", "32", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "convbn_3d", "(", "32", ",", "32", ",", "3", ",", "1", ",", "1", ")", ")", "\n", "\n", "self", ".", "dres3", "=", "nn", ".", "Sequential", "(", "convbn_3d", "(", "32", ",", "32", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "convbn_3d", "(", "32", ",", "32", ",", "3", ",", "1", ",", "1", ")", ")", "\n", "\n", "self", ".", "dres4", "=", "nn", ".", "Sequential", "(", "convbn_3d", "(", "32", ",", "32", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "convbn_3d", "(", "32", ",", "32", ",", "3", ",", "1", ",", "1", ")", ")", "\n", "\n", "self", ".", "classify", "=", "nn", ".", "Sequential", "(", "convbn_3d", "(", "32", ",", "32", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv3d", "(", "32", ",", "1", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Conv3d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "kernel_size", "[", "2", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm3d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.models.basic.PSMNet.forward": [[58, 87], ["basic.PSMNet.feature_extraction", "basic.PSMNet.feature_extraction", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "range", "torch.squeeze.contiguous", "torch.squeeze.contiguous", "torch.squeeze.contiguous", "torch.squeeze.contiguous", "basic.PSMNet.dres0", "basic.PSMNet.classify", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "basic.PSMNet.dres1", "basic.PSMNet.dres2", "basic.PSMNet.dres3", "basic.PSMNet.dres4", "disparityregression", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "left.size", "left.size", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "basic.PSMNet.size", "basic.PSMNet.size", "basic.PSMNet.size", "basic.PSMNet.size", "basic.PSMNet.size", "basic.PSMNet.size", "basic.PSMNet.size", "basic.PSMNet.size"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "left", ",", "right", ")", ":", "\n", "        ", "refimg_fea", "=", "self", ".", "feature_extraction", "(", "left", ")", "\n", "targetimg_fea", "=", "self", ".", "feature_extraction", "(", "right", ")", "\n", "\n", "#matching", "\n", "cost", "=", "Variable", "(", "torch", ".", "FloatTensor", "(", "refimg_fea", ".", "size", "(", ")", "[", "0", "]", ",", "refimg_fea", ".", "size", "(", ")", "[", "1", "]", "*", "2", ",", "self", ".", "maxdisp", "//", "4", ",", "refimg_fea", ".", "size", "(", ")", "[", "2", "]", ",", "refimg_fea", ".", "size", "(", ")", "[", "3", "]", ")", ".", "zero_", "(", ")", ",", "volatile", "=", "not", "self", ".", "training", ")", ".", "cuda", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "maxdisp", "//", "4", ")", ":", "\n", "            ", "if", "i", ">", "0", ":", "\n", "             ", "cost", "[", ":", ",", ":", "refimg_fea", ".", "size", "(", ")", "[", "1", "]", ",", "i", ",", ":", ",", "i", ":", "]", "=", "refimg_fea", "[", ":", ",", ":", ",", ":", ",", "i", ":", "]", "\n", "cost", "[", ":", ",", "refimg_fea", ".", "size", "(", ")", "[", "1", "]", ":", ",", "i", ",", ":", ",", "i", ":", "]", "=", "targetimg_fea", "[", ":", ",", ":", ",", ":", ",", ":", "-", "i", "]", "\n", "", "else", ":", "\n", "             ", "cost", "[", ":", ",", ":", "refimg_fea", ".", "size", "(", ")", "[", "1", "]", ",", "i", ",", ":", ",", ":", "]", "=", "refimg_fea", "\n", "cost", "[", ":", ",", "refimg_fea", ".", "size", "(", ")", "[", "1", "]", ":", ",", "i", ",", ":", ",", ":", "]", "=", "targetimg_fea", "\n", "", "", "cost", "=", "cost", ".", "contiguous", "(", ")", "\n", "\n", "cost0", "=", "self", ".", "dres0", "(", "cost", ")", "\n", "cost0", "=", "self", ".", "dres1", "(", "cost0", ")", "+", "cost0", "\n", "cost0", "=", "self", ".", "dres2", "(", "cost0", ")", "+", "cost0", "\n", "cost0", "=", "self", ".", "dres3", "(", "cost0", ")", "+", "cost0", "\n", "cost0", "=", "self", ".", "dres4", "(", "cost0", ")", "+", "cost0", "\n", "\n", "cost", "=", "self", ".", "classify", "(", "cost0", ")", "\n", "cost", "=", "F", ".", "interpolate", "(", "cost", ",", "[", "self", ".", "maxdisp", ",", "left", ".", "size", "(", ")", "[", "2", "]", ",", "left", ".", "size", "(", ")", "[", "3", "]", "]", ",", "mode", "=", "'trilinear'", ",", "align_corners", "=", "True", ")", "\n", "cost", "=", "torch", ".", "squeeze", "(", "cost", ",", "1", ")", "\n", "pred", "=", "F", ".", "softmax", "(", "cost", ")", "\n", "pred", "=", "disparityregression", "(", "self", ".", "maxdisp", ")", "(", "pred", ")", "\n", "\n", "return", "pred", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zwxu064_RANP.thop.count_hooks.count_conv2d": [[9, 35], ["torch.Tensor", "torch.Tensor", "x.size", "y.size", "y.size", "int"], "function", ["None"], ["def", "count_conv2d", "(", "m", ",", "x", ",", "y", ")", ":", "\n", "# TODO: add support for pad and dilation", "\n", "\t", "x", "=", "x", "[", "0", "]", "\n", "\n", "cin", "=", "m", ".", "in_channels", "\n", "cout", "=", "m", ".", "out_channels", "\n", "kh", ",", "kw", "=", "m", ".", "kernel_size", "\n", "batch_size", "=", "x", ".", "size", "(", ")", "[", "0", "]", "\n", "\n", "out_w", "=", "y", ".", "size", "(", "2", ")", "//", "m", ".", "stride", "[", "0", "]", "\n", "out_h", "=", "y", ".", "size", "(", "3", ")", "//", "m", ".", "stride", "[", "1", "]", "\n", "\n", "# ops per output element", "\n", "# kernel_mul = kh * kw * cin", "\n", "# kernel_add = kh * kw * cin - 1", "\n", "kernel_ops", "=", "multiply_adds", "*", "kh", "*", "kw", "*", "cin", "//", "m", ".", "groups", "\n", "bias_ops", "=", "1", "if", "m", ".", "bias", "is", "not", "None", "else", "0", "\n", "ops_per_element", "=", "kernel_ops", "+", "bias_ops", "\n", "\n", "# total ops", "\n", "# num_out_elements = y.numel()", "\n", "output_elements", "=", "batch_size", "*", "out_w", "*", "out_h", "*", "cout", "\n", "total_ops", "=", "output_elements", "*", "ops_per_element", "\n", "\n", "# in case same conv is used multiple times", "\n", "m", ".", "total_ops", "+=", "torch", ".", "Tensor", "(", "[", "int", "(", "total_ops", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.thop.count_hooks.count_conv3d": [[37, 64], ["torch.Tensor", "torch.Tensor", "x.size", "y.size", "y.size", "y.size", "int"], "function", ["None"], ["", "def", "count_conv3d", "(", "m", ",", "x", ",", "y", ")", ":", "\n", "# TODO: add support for pad and dilation", "\n", "\t", "x", "=", "x", "[", "0", "]", "\n", "\n", "cin", "=", "m", ".", "in_channels", "\n", "cout", "=", "m", ".", "out_channels", "\n", "kd", ",", "kh", ",", "kw", "=", "m", ".", "kernel_size", "\n", "batch_size", "=", "x", ".", "size", "(", ")", "[", "0", "]", "\n", "\n", "out_d", "=", "y", ".", "size", "(", "2", ")", "//", "m", ".", "stride", "[", "0", "]", "\n", "out_w", "=", "y", ".", "size", "(", "3", ")", "//", "m", ".", "stride", "[", "1", "]", "\n", "out_h", "=", "y", ".", "size", "(", "4", ")", "//", "m", ".", "stride", "[", "2", "]", "\n", "\n", "# ops per output element", "\n", "# kernel_mul = kh * kw * cin", "\n", "# kernel_add = kh * kw * cin - 1", "\n", "kernel_ops", "=", "multiply_adds", "*", "kd", "*", "kh", "*", "kw", "*", "cin", "//", "m", ".", "groups", "\n", "bias_ops", "=", "1", "if", "m", ".", "bias", "is", "not", "None", "else", "0", "\n", "ops_per_element", "=", "kernel_ops", "+", "bias_ops", "\n", "\n", "# total ops", "\n", "# num_out_elements = y.numel()", "\n", "output_elements", "=", "batch_size", "*", "out_d", "*", "out_w", "*", "out_h", "*", "cout", "\n", "total_ops", "=", "output_elements", "*", "ops_per_element", "\n", "\n", "# in case same conv is used multiple times", "\n", "m", ".", "total_ops", "+=", "torch", ".", "Tensor", "(", "[", "int", "(", "total_ops", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.thop.count_hooks.count_bn2d": [[66, 75], ["x.numel", "torch.Tensor", "torch.Tensor", "int"], "function", ["None"], ["", "def", "count_bn2d", "(", "m", ",", "x", ",", "y", ")", ":", "\n", "\t", "x", "=", "x", "[", "0", "]", "\n", "\n", "nelements", "=", "x", ".", "numel", "(", ")", "\n", "total_sub", "=", "nelements", "\n", "total_div", "=", "nelements", "\n", "total_ops", "=", "total_sub", "+", "total_div", "\n", "\n", "m", ".", "total_ops", "+=", "torch", ".", "Tensor", "(", "[", "int", "(", "total_ops", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.thop.count_hooks.count_relu": [[57, 64], ["x.numel", "torch.Tensor().double", "torch.Tensor().double", "torch.Tensor().byte", "torch.Tensor().byte", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "list", "int", "y.size"], "function", ["None"], ["# total ops", "\n", "# num_out_elements = y.numel()", "\n", "output_elements", "=", "batch_size", "*", "out_d", "*", "out_w", "*", "out_h", "*", "cout", "\n", "total_ops", "=", "output_elements", "*", "ops_per_element", "\n", "\n", "# in case same conv is used multiple times", "\n", "m", ".", "total_ops", "+=", "torch", ".", "Tensor", "(", "[", "int", "(", "total_ops", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.thop.count_hooks.count_softmax": [[66, 78], ["torch.Tensor().double", "torch.Tensor().double", "torch.Tensor().byte", "torch.Tensor().byte", "x.size", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "list", "int", "y.size"], "function", ["None"], ["", "def", "count_bn2d", "(", "m", ",", "x", ",", "y", ")", ":", "\n", "\t", "x", "=", "x", "[", "0", "]", "\n", "\n", "nelements", "=", "x", ".", "numel", "(", ")", "\n", "total_sub", "=", "nelements", "\n", "total_div", "=", "nelements", "\n", "total_ops", "=", "total_sub", "+", "total_div", "\n", "\n", "m", ".", "total_ops", "+=", "torch", ".", "Tensor", "(", "[", "int", "(", "total_ops", ")", "]", ")", "\n", "\n", "\n", "", "def", "count_relu", "(", "m", ",", "x", ",", "y", ")", ":", "\n", "\t", "x", "=", "x", "[", "0", "]", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.thop.count_hooks.count_maxpool": [[99, 105], ["y.numel", "torch.Tensor", "torch.Tensor", "torch.prod", "torch.prod", "torch.Tensor", "torch.Tensor", "int"], "function", ["None"], ["", "def", "count_maxpool", "(", "m", ",", "x", ",", "y", ")", ":", "\n", "\t", "kernel_ops", "=", "torch", ".", "prod", "(", "torch", ".", "Tensor", "(", "[", "m", ".", "kernel_size", "]", ")", ")", "-", "1", "\n", "num_elements", "=", "y", ".", "numel", "(", ")", "\n", "total_ops", "=", "kernel_ops", "*", "num_elements", "\n", "\n", "m", ".", "total_ops", "+=", "torch", ".", "Tensor", "(", "[", "int", "(", "total_ops", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.thop.count_hooks.count_avgpool": [[80, 89], ["torch.prod", "torch.prod", "y.numel", "torch.Tensor().double", "torch.Tensor().double", "torch.Tensor().byte", "torch.Tensor().byte", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "list", "int", "y.size"], "function", ["None"], ["nelements", "=", "x", ".", "numel", "(", ")", "\n", "total_ops", "=", "nelements", "\n", "\n", "m", ".", "total_ops", "+=", "torch", ".", "Tensor", "(", "[", "int", "(", "total_ops", ")", "]", ")", "\n", "\n", "\n", "", "def", "count_softmax", "(", "m", ",", "x", ",", "y", ")", ":", "\n", "\t", "x", "=", "x", "[", "0", "]", "\n", "\n", "batch_size", ",", "nfeatures", "=", "x", ".", "size", "(", ")", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.thop.count_hooks.count_linear": [[133, 143], ["y.numel", "torch.Tensor().double", "torch.Tensor().double", "torch.Tensor().byte", "torch.Tensor().byte", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "list", "int", "y.size"], "function", ["None"], []], "home.repos.pwc.inspect_result.zwxu064_RANP.thop.utils.profile": [[25, 68], ["model.eval", "model.apply", "torch.zeros", "torch.zeros", "model", "model.modules", "total_ops.item.item", "total_params.item.item", "m.register_buffer", "m.register_buffer", "m.parameters", "type", "len", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.Tensor", "torch.Tensor", "logging.info", "m.register_forward_hook", "len", "list", "logging.warning", "list", "m.children", "p.numel", "str", "m.children"], "function", ["None"], ["\n", "\n", "", "", "class", "Logger", "(", "object", ")", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ",", "path", ",", "header", ")", ":", "\n", "        ", "self", ".", "log_file", "=", "open", "(", "path", ",", "'w'", ")", "\n", "self", ".", "logger", "=", "csv", ".", "writer", "(", "self", ".", "log_file", ",", "delimiter", "=", "'\\t'", ")", "\n", "\n", "self", ".", "logger", ".", "writerow", "(", "header", ")", "\n", "self", ".", "header", "=", "header", "\n", "\n", "", "def", "__del", "(", "self", ")", ":", "\n", "        ", "self", ".", "log_file", ".", "close", "(", ")", "\n", "\n", "", "def", "log", "(", "self", ",", "values", ")", ":", "\n", "        ", "write_values", "=", "[", "]", "\n", "for", "col", "in", "self", ".", "header", ":", "\n", "            ", "assert", "col", "in", "values", "\n", "write_values", ".", "append", "(", "values", "[", "col", "]", ")", "\n", "\n", "", "self", ".", "logger", ".", "writerow", "(", "write_values", ")", "\n", "self", ".", "log_file", ".", "flush", "(", ")", "\n", "\n", "\n", "", "", "def", "load_value_file", "(", "file_path", ")", ":", "\n", "    ", "with", "open", "(", "file_path", ",", "'r'", ")", "as", "input_file", ":", "\n", "        ", "value", "=", "float", "(", "input_file", ".", "read", "(", ")", ".", "rstrip", "(", "'\\n\\r'", ")", ")", "\n", "\n", "", "return", "value", "\n", "\n", "\n", "", "def", "calculate_accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"Computes the precision@k for the specified values of k\"\"\"", "\n", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "        ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.thop.profile.register_count_memory": [[53, 55], ["output.nelement"], "function", ["None"], ["def", "register_count_memory", "(", "self", ",", "input", ",", "output", ")", ":", "\n", "    ", "self", ".", "total_memory", "+=", "output", ".", "nelement", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.thop.profile.profile": [[57, 213], ["mode.lower.lower", "model.eval", "model.apply", "model.modules", "total_ops.item.item", "total_params.item.item", "total_memory.item.item", "model.train", "model.named_modules", "m.register_buffer", "m.register_buffer", "m.register_buffer", "m.register_buffer", "m.parameters", "type", "m.register_forward_hook", "handler_collection.append", "torch.no_grad", "torch.no_grad", "model", "any", "m.total_ops.double", "m.total_params.double", "m.total_memory.double", "torch.cat", "torch.cat", "m.register_forward_hook.remove", "len", "hasattr", "hasattr", "hasattr", "hasattr", "isinstance", "logger.warning", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.Tensor().double", "torch.Tensor().double", "m.register_forward_hook", "handler_collection.append", "len", "isinstance", "isinstance", "resource_list.append", "isinstance", "print", "len", "m._buffers.pop", "m._buffers.pop", "m._buffers.pop", "m._buffers.pop", "list", "print", "print", "list", "isinstance", "resource_list_type.find", "isinstance", "list", "m.children", "str", "torch.Tensor", "torch.Tensor", "resource_list_type.find", "m.children", "resource_list_type.find", "isinstance", "output_size_layer.numpy", "m.children", "str", "resource_list_type.find", "isinstance", "m.total_ops.double.item", "p.numel", "isinstance", "m.total_params.double.item", "m.total_memory.double.item"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.data.train"], ["", "def", "profile", "(", "model", ",", "\n", "inputs", ",", "\n", "custom_ops", "=", "None", ",", "\n", "verbose", "=", "True", ",", "\n", "enable_layer_neuron_display", "=", "False", ",", "\n", "resource_list_type", "=", "None", ",", "\n", "mode", "=", "'all'", ")", ":", "# mode: all/2d/3d", "\n", "    ", "mode", "=", "mode", ".", "lower", "(", ")", "\n", "handler_collection", "=", "[", "]", "\n", "if", "custom_ops", "is", "None", ":", "\n", "        ", "custom_ops", "=", "{", "}", "\n", "\n", "", "def", "add_hooks", "(", "m", ")", ":", "\n", "        ", "if", "len", "(", "list", "(", "m", ".", "children", "(", ")", ")", ")", ">", "0", ":", "\n", "            ", "return", "\n", "\n", "", "if", "hasattr", "(", "m", ",", "\"total_ops\"", ")", "or", "hasattr", "(", "m", ",", "\"total_params\"", ")", "or", "hasattr", "(", "m", ",", "\"total_memory\"", ")", "or", "hasattr", "(", "m", ",", "\"output_size\"", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "ReLU", ")", ":", "return", "\n", "\n", "logger", ".", "warning", "(", "\"Either .total_ops or .total_params is already defined in %s.\"", "\n", "\"Be careful, it might change your code's behavior.\"", "%", "str", "(", "m", ")", ")", "\n", "\n", "", "m", ".", "register_buffer", "(", "'total_ops'", ",", "torch", ".", "zeros", "(", "1", ",", "dtype", "=", "torch", ".", "double", ")", ")", "\n", "m", ".", "register_buffer", "(", "'total_params'", ",", "torch", ".", "zeros", "(", "1", ",", "dtype", "=", "torch", ".", "double", ")", ")", "\n", "m", ".", "register_buffer", "(", "'total_memory'", ",", "torch", ".", "zeros", "(", "1", ",", "dtype", "=", "torch", ".", "double", ")", ")", "\n", "m", ".", "register_buffer", "(", "'output_size'", ",", "None", ")", "\n", "\n", "for", "p", "in", "m", ".", "parameters", "(", ")", ":", "\n", "            ", "m", ".", "total_params", "+=", "torch", ".", "Tensor", "(", "[", "p", ".", "numel", "(", ")", "]", ")", ".", "double", "(", ")", "\n", "\n", "", "m_type", "=", "type", "(", "m", ")", "\n", "fn", "=", "None", "\n", "if", "m_type", "in", "custom_ops", ":", "# if defined both op maps, use custom_ops to overwrite.", "\n", "            ", "fn", "=", "custom_ops", "[", "m_type", "]", "\n", "", "elif", "m_type", "in", "register_hooks", ":", "\n", "            ", "fn", "=", "register_hooks", "[", "m_type", "]", "\n", "\n", "", "if", "fn", "is", "None", ":", "\n", "            ", "if", "verbose", ":", "\n", "                ", "print", "(", "\"THOP has not implemented counting method for \"", ",", "m", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "verbose", ":", "\n", "                ", "print", "(", "\"Register FLOP counter for module %s\"", "%", "str", "(", "m", ")", ")", "\n", "", "handler", "=", "m", ".", "register_forward_hook", "(", "fn", ")", "\n", "handler_collection", ".", "append", "(", "handler", ")", "\n", "\n", "# m.register_forward_hook(register_count_memory)", "\n", "", "handler", "=", "m", ".", "register_forward_hook", "(", "register_count_memory", ")", "\n", "handler_collection", ".", "append", "(", "handler", ")", "\n", "\n", "", "training", "=", "model", ".", "training", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "model", ".", "apply", "(", "add_hooks", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "model", "(", "*", "inputs", ")", "\n", "\n", "", "total_ops", ",", "total_params", ",", "total_memory", "=", "0", ",", "0", ",", "0", "\n", "layer_id", "=", "0", "\n", "enable_resource_list", "=", "any", "(", "[", "resource_list_type", ".", "find", "(", "s", ")", ">", "-", "1", "for", "s", "in", "[", "'flops'", ",", "'param'", ",", "'memory'", "]", "]", ")", "if", "(", "resource_list_type", "is", "not", "None", ")", "else", "False", "\n", "resource_list", "=", "[", "]", "if", "enable_resource_list", "else", "None", "\n", "\n", "for", "m", "in", "model", ".", "modules", "(", ")", ":", "\n", "        ", "if", "len", "(", "list", "(", "m", ".", "children", "(", ")", ")", ")", ">", "0", ":", "# skip for non-leaf module", "\n", "            ", "continue", "\n", "", "opt_layer", "=", "m", ".", "total_ops", ".", "double", "(", ")", "\n", "param_layer", "=", "m", ".", "total_params", ".", "double", "(", ")", "\n", "memory_layer", "=", "m", ".", "total_memory", ".", "double", "(", ")", "\n", "output_size_layer", "=", "m", ".", "output_size", "\n", "\n", "if", "mode", "==", "'2d'", "and", "isinstance", "(", "m", ",", "(", "nn", ".", "Conv2d", ",", "nn", ".", "ConvTranspose2d", ",", "nn", ".", "Linear", ",", "nn", ".", "ConvTranspose1d", ",", "\n", "nn", ".", "BatchNorm2d", ",", "nn", ".", "BatchNorm1d", ",", "nn", ".", "AvgPool2d", ",", "nn", ".", "AvgPool1d", ",", "\n", "nn", ".", "AdaptiveAvgPool1d", ",", "nn", ".", "AdaptiveAvgPool2d", ",", "nn", ".", "MaxPool1d", ",", "\n", "nn", ".", "MaxPool2d", ")", ")", ":", "\n", "            ", "total_ops", "+=", "opt_layer", "\n", "total_params", "+=", "param_layer", "\n", "total_memory", "+=", "memory_layer", "\n", "", "elif", "mode", "==", "'3d'", "and", "isinstance", "(", "m", ",", "(", "nn", ".", "Conv3d", ",", "nn", ".", "ConvTranspose3d", ",", "nn", ".", "BatchNorm3d", ",", "nn", ".", "AvgPool3d", ",", "\n", "nn", ".", "AdaptiveAvgPool3d", ",", "nn", ".", "MaxPool3d", ")", ")", ":", "\n", "            ", "total_ops", "+=", "opt_layer", "\n", "total_params", "+=", "param_layer", "\n", "total_memory", "+=", "memory_layer", "\n", "# elif mode == 'common' and isinstance(m, (nn.ReLU, nn.LeakyReLU)):", "\n", "", "elif", "mode", "==", "'all'", ":", "\n", "            ", "total_ops", "+=", "opt_layer", "\n", "total_params", "+=", "param_layer", "\n", "total_memory", "+=", "memory_layer", "\n", "\n", "", "if", "enable_resource_list", "and", "isinstance", "(", "m", ",", "(", "nn", ".", "Conv3d", ",", "nn", ".", "Conv2d", ",", "nn", ".", "Conv3d", ",", "nn", ".", "ConvTranspose2d", ",", "\n", "nn", ".", "ConvTranspose3d", ",", "nn", ".", "ConvTranspose1d", ",", "nn", ".", "Linear", ")", ")", ":", "\n", "          ", "if", "resource_list_type", ".", "find", "(", "'flops'", ")", ">", "-", "1", ":", "\n", "            ", "resource_layer", "=", "opt_layer", "\n", "", "elif", "resource_list_type", ".", "find", "(", "'param'", ")", ">", "-", "1", ":", "\n", "            ", "resource_layer", "=", "param_layer", "\n", "", "elif", "resource_list_type", ".", "find", "(", "'memory'", ")", ">", "-", "1", ":", "\n", "            ", "resource_layer", "=", "memory_layer", "\n", "", "else", ":", "\n", "            ", "resource_layer", "=", "None", "\n", "\n", "", "resource_list", ".", "append", "(", "resource_layer", ")", "\n", "\n", "", "if", "enable_layer_neuron_display", ":", "\n", "            ", "neuron", "=", "0", "\n", "if", "isinstance", "(", "m", ",", "(", "nn", ".", "Linear", ",", "nn", ".", "Conv2d", ",", "nn", ".", "Conv3d", ",", "nn", ".", "ConvTranspose2d", ",", "nn", ".", "ConvTranspose3d", ")", ")", ":", "\n", "                ", "m_type", "=", "'Conv'", "\n", "neuron", "=", "m", ".", "out_channels", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm1d", ",", "nn", ".", "BatchNorm2d", ",", "nn", ".", "BatchNorm3d", ")", ")", ":", "\n", "                ", "m_type", "=", "'BNorm'", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "nn", ".", "ReLU", ",", "nn", ".", "ReLU6", ")", ")", ":", "\n", "                ", "m_type", "=", "'Activ'", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "nn", ".", "MaxPool1d", ",", "nn", ".", "MaxPool2d", ",", "nn", ".", "MaxPool3d", ")", ")", ":", "\n", "                ", "m_type", "=", "'MaxPool'", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "nn", ".", "Softmax", ")", ")", ":", "\n", "                ", "m_type", "=", "'Softmax'", "\n", "", "else", ":", "\n", "                ", "m_type", "=", "'Unknown'", "\n", "\n", "", "print", "(", "'Profile, layer id: {}, type: {}, neuron: {}, FLOPS: {:.2f}G, param: {:.2f}KB, memory: {:.2f}MB, output size: {}'", ".", "format", "(", "layer_id", ",", "\n", "m_type", ",", "\n", "neuron", ",", "\n", "opt_layer", ".", "item", "(", ")", "/", "1e9", ",", "\n", "param_layer", ".", "item", "(", ")", "*", "4", "/", "1024", ",", "\n", "memory_layer", ".", "item", "(", ")", "*", "4", "/", "(", "1024", "**", "2", ")", ",", "\n", "output_size_layer", ".", "numpy", "(", ")", ")", ")", "\n", "", "layer_id", "+=", "1", "\n", "\n", "", "resource_list", "=", "torch", ".", "cat", "(", "resource_list", ",", "0", ")", "if", "(", "resource_list", "is", "not", "None", ")", "else", "None", "\n", "total_ops", "=", "total_ops", ".", "item", "(", ")", "\n", "total_params", "=", "total_params", ".", "item", "(", ")", "\n", "total_memory", "=", "total_memory", ".", "item", "(", ")", "\n", "\n", "# reset model to original status", "\n", "model", ".", "train", "(", "training", ")", "\n", "for", "handler", "in", "handler_collection", ":", "\n", "        ", "handler", ".", "remove", "(", ")", "\n", "\n", "# remove temporal buffers", "\n", "", "for", "n", ",", "m", "in", "model", ".", "named_modules", "(", ")", ":", "\n", "        ", "if", "len", "(", "list", "(", "m", ".", "children", "(", ")", ")", ")", ">", "0", ":", "\n", "            ", "continue", "\n", "", "if", "\"total_ops\"", "in", "m", ".", "_buffers", ":", "\n", "            ", "m", ".", "_buffers", ".", "pop", "(", "\"total_ops\"", ")", "\n", "", "if", "\"total_params\"", "in", "m", ".", "_buffers", ":", "\n", "            ", "m", ".", "_buffers", ".", "pop", "(", "\"total_params\"", ")", "\n", "", "if", "\"total_memory\"", "in", "m", ".", "_buffers", ":", "\n", "            ", "m", ".", "_buffers", ".", "pop", "(", "\"total_memory\"", ")", "\n", "", "if", "\"output_size\"", "in", "m", ".", "_buffers", ":", "\n", "            ", "m", ".", "_buffers", ".", "pop", "(", "\"output_size\"", ")", "\n", "\n", "", "", "return", "total_ops", ",", "total_params", ",", "total_memory", ",", "resource_list", "\n", "", ""]], "home.repos.pwc.inspect_result.zwxu064_RANP.thop.count_hooks.zero_ops": [[13, 16], ["torch.Tensor().double", "torch.Tensor().double", "torch.Tensor().byte", "torch.Tensor().byte", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "list", "int", "y.size"], "function", ["None"], ["cin", "=", "m", ".", "in_channels", "\n", "cout", "=", "m", ".", "out_channels", "\n", "kh", ",", "kw", "=", "m", ".", "kernel_size", "\n", "batch_size", "=", "x", ".", "size", "(", ")", "[", "0", "]", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.thop.count_hooks.count_convNd": [[18, 29], ["[].numel", "torch.Tensor().double", "torch.Tensor().double", "torch.Tensor().byte", "torch.Tensor().byte", "y.nelement", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "m.weight.size", "list", "int", "y.size"], "function", ["None"], ["out_w", "=", "y", ".", "size", "(", "2", ")", "//", "m", ".", "stride", "[", "0", "]", "\n", "out_h", "=", "y", ".", "size", "(", "3", ")", "//", "m", ".", "stride", "[", "1", "]", "\n", "\n", "# ops per output element", "\n", "# kernel_mul = kh * kw * cin", "\n", "# kernel_add = kh * kw * cin - 1", "\n", "kernel_ops", "=", "multiply_adds", "*", "kh", "*", "kw", "*", "cin", "//", "m", ".", "groups", "\n", "bias_ops", "=", "1", "if", "m", ".", "bias", "is", "not", "None", "else", "0", "\n", "ops_per_element", "=", "kernel_ops", "+", "bias_ops", "\n", "\n", "# total ops", "\n", "# num_out_elements = y.numel()", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.thop.count_hooks.count_convNd_ver2": [[31, 44], ["m.weight.nelement", "torch.Tensor().double", "torch.Tensor().double", "torch.Tensor().byte", "torch.Tensor().byte", "m.bias.nelement", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "list", "y.size", "y.size", "int", "y.size"], "function", ["None"], ["total_ops", "=", "output_elements", "*", "ops_per_element", "\n", "\n", "# in case same conv is used multiple times", "\n", "m", ".", "total_ops", "+=", "torch", ".", "Tensor", "(", "[", "int", "(", "total_ops", ")", "]", ")", "\n", "\n", "\n", "", "def", "count_conv3d", "(", "m", ",", "x", ",", "y", ")", ":", "\n", "# TODO: add support for pad and dilation", "\n", "\t", "x", "=", "x", "[", "0", "]", "\n", "\n", "cin", "=", "m", ".", "in_channels", "\n", "cout", "=", "m", ".", "out_channels", "\n", "kd", ",", "kh", ",", "kw", "=", "m", ".", "kernel_size", "\n", "batch_size", "=", "x", ".", "size", "(", ")", "[", "0", "]", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.thop.count_hooks.count_bn": [[46, 55], ["x.numel", "torch.Tensor().double", "torch.Tensor().double", "torch.Tensor().byte", "torch.Tensor().byte", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "list", "int", "y.size"], "function", ["None"], ["out_d", "=", "y", ".", "size", "(", "2", ")", "//", "m", ".", "stride", "[", "0", "]", "\n", "out_w", "=", "y", ".", "size", "(", "3", ")", "//", "m", ".", "stride", "[", "1", "]", "\n", "out_h", "=", "y", ".", "size", "(", "4", ")", "//", "m", ".", "stride", "[", "2", "]", "\n", "\n", "# ops per output element", "\n", "# kernel_mul = kh * kw * cin", "\n", "# kernel_add = kh * kw * cin - 1", "\n", "kernel_ops", "=", "multiply_adds", "*", "kd", "*", "kh", "*", "kw", "*", "cin", "//", "m", ".", "groups", "\n", "bias_ops", "=", "1", "if", "m", ".", "bias", "is", "not", "None", "else", "0", "\n", "ops_per_element", "=", "kernel_ops", "+", "bias_ops", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.thop.count_hooks.count_adap_avgpool": [[91, 101], ["torch.prod", "torch.prod", "y.numel", "torch.Tensor().double", "torch.Tensor().double", "torch.Tensor().byte", "torch.Tensor().byte", "torch.Tensor", "torch.Tensor", "torch.Tensor().squeeze", "torch.Tensor().squeeze", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "list", "list", "int", "y.size"], "function", ["None"], ["total_exp", "=", "nfeatures", "\n", "total_add", "=", "nfeatures", "-", "1", "\n", "total_div", "=", "nfeatures", "\n", "total_ops", "=", "batch_size", "*", "(", "total_exp", "+", "total_add", "+", "total_div", ")", "\n", "\n", "m", ".", "total_ops", "+=", "torch", ".", "Tensor", "(", "[", "int", "(", "total_ops", ")", "]", ")", "\n", "\n", "\n", "", "def", "count_maxpool", "(", "m", ",", "x", ",", "y", ")", ":", "\n", "\t", "kernel_ops", "=", "torch", ".", "prod", "(", "torch", ".", "Tensor", "(", "[", "m", ".", "kernel_size", "]", ")", ")", "-", "1", "\n", "num_elements", "=", "y", ".", "numel", "(", ")", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.thop.count_hooks.count_upsample": [[104, 131], ["torch.Tensor().double", "torch.Tensor().double", "torch.Tensor().byte", "torch.Tensor().byte", "logger.warning", "count_hooks.zero_ops", "count_hooks.zero_ops", "y.nelement", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "y.nelement().double", "list", "y.nelement", "int", "y.size", "y.nelement", "y.nelement"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.thop.count_hooks.zero_ops", "home.repos.pwc.inspect_result.zwxu064_RANP.thop.count_hooks.zero_ops"], ["m", ".", "total_ops", "+=", "torch", ".", "Tensor", "(", "[", "int", "(", "total_ops", ")", "]", ")", "\n", "\n", "\n", "", "def", "count_avgpool", "(", "m", ",", "x", ",", "y", ")", ":", "\n", "\t", "total_add", "=", "torch", ".", "prod", "(", "torch", ".", "Tensor", "(", "[", "m", ".", "kernel_size", "]", ")", ")", "-", "1", "\n", "total_div", "=", "1", "\n", "kernel_ops", "=", "total_add", "+", "total_div", "\n", "num_elements", "=", "y", ".", "numel", "(", ")", "\n", "total_ops", "=", "kernel_ops", "*", "num_elements", "\n", "\n", "m", ".", "total_ops", "+=", "torch", ".", "Tensor", "(", "[", "int", "(", "total_ops", ")", "]", ")", "\n", "\n", "\n", "", "def", "count_linear", "(", "m", ",", "x", ",", "y", ")", ":", "\n", "# per output element", "\n", "\t", "total_mul", "=", "m", ".", "in_features", "\n", "total_add", "=", "m", ".", "in_features", "-", "1", "\n", "num_elements", "=", "y", ".", "numel", "(", ")", "\n", "total_ops", "=", "(", "total_mul", "+", "total_add", ")", "*", "num_elements", "\n", "\n", "m", ".", "total_ops", "+=", "torch", ".", "Tensor", "(", "[", "int", "(", "total_ops", ")", "]", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.zwxu064_RANP.thop.utils.clever_format": [[4, 24], ["isinstance", "clever_nums.append", "len", "clever_nums.append", "clever_nums.append", "clever_nums.append", "clever_nums.append"], "function", ["None"], ["import", "numpy", "as", "np", "\n", "\n", "\n", "\n", "class", "AverageMeter", "(", "object", ")", ":", "\n", "    ", "\"\"\"Computes and stores the average and current value\"\"\"", "\n", "\n", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n", "", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n", "", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_tumor.train_6.main": [[52, 220], ["torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "random.seed", "numpy.random.seed", "getattr", "getattr.", "model.cuda.cuda", "getattr", "logging.info", "getattr", "os.path.join", "getattr.", "data.sampler.CycleSampler", "torch.utils.data.DataLoader", "time.time", "int", "int", "predict_6.AverageMeter", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "enumerate", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "logging.info", "getattr", "model.cuda.parameters", "os.path.isfile", "str", "len", "os.path.join", "getattr.", "torch.utils.data.DataLoader", "getattr.", "torch.utils.data.DataLoader", "len", "float", "int", "train_6.adjust_learning_rate", "zip", "logging.info", "predict_6.AverageMeter.reset", "logging.info", "logging.info", "print", "torch.load", "torch.load", "torch.load", "torch.load", "model.cuda.load_state_dict", "optimizer.load_state_dict", "args.schedule.items", "model.cuda.", "getattr.", "predict_6.AverageMeter.update", "optimizer.zero_grad", "criterion.backward", "optimizer.step", "int", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "model.cuda.state_dict", "optimizer.state_dict", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "predict_6.validate", "len", "t.cuda", "len", "data.data_utils.add_mask", "data.data_utils.add_mask", "criterion.item", "target.numel", "time.time", "d.split", "model.cuda.state_dict", "optimizer.state_dict"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.adjust_learning_rate", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.AverageMeter.reset", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.data.load", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.data.load", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.data.load", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.data.load", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.AverageMeter.update", "home.repos.pwc.inspect_result.zwxu064_RANP.unet.trainer.UNet3DTrainer.validate", "home.repos.pwc.inspect_result.zwxu064_RANP.data.data_utils.add_mask", "home.repos.pwc.inspect_result.zwxu064_RANP.data.data_utils.add_mask"], ["", "def", "main", "(", ")", ":", "\n", "# setup environments and seeds", "\n", "    ", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", "=", "args", ".", "gpu", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "\n", "# setup networks", "\n", "Network", "=", "getattr", "(", "models", ",", "args", ".", "net", ")", "\n", "model", "=", "Network", "(", "**", "args", ".", "net_params", ")", "\n", "model", "=", "model", ".", "cuda", "(", ")", "\n", "\n", "optimizer", "=", "getattr", "(", "torch", ".", "optim", ",", "args", ".", "opt", ")", "(", "\n", "model", ".", "parameters", "(", ")", ",", "**", "args", ".", "opt_params", ")", "\n", "criterion", "=", "getattr", "(", "criterions", ",", "args", ".", "criterion", ")", "\n", "\n", "msg", "=", "''", "\n", "# optionally resume from a checkpoint", "\n", "if", "args", ".", "resume", ":", "\n", "        ", "if", "os", ".", "path", ".", "isfile", "(", "args", ".", "resume", ")", ":", "\n", "            ", "print", "(", "\"=> loading checkpoint '{}'\"", ".", "format", "(", "args", ".", "resume", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "resume", ")", "\n", "args", ".", "start_iter", "=", "checkpoint", "[", "'iter'", "]", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optim_dict'", "]", ")", "\n", "msg", "=", "(", "\"=> loaded checkpoint '{}' (iter {})\"", "\n", ".", "format", "(", "args", ".", "resume", ",", "checkpoint", "[", "'iter'", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "msg", "=", "\"=> no checkpoint found at '{}'\"", ".", "format", "(", "args", ".", "resume", ")", "\n", "", "", "else", ":", "\n", "        ", "msg", "=", "'-------------- New training session ----------------'", "\n", "\n", "", "msg", "+=", "'\\n'", "+", "str", "(", "args", ")", "\n", "logging", ".", "info", "(", "msg", ")", "\n", "\n", "# Data loading code", "\n", "Dataset", "=", "getattr", "(", "datasets", ",", "args", ".", "dataset", ")", "\n", "\n", "# The loader will get 1000 patches from 50 subjects for each sub epoch", "\n", "# each subject sample 20 patches", "\n", "train_list", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data_dir", ",", "args", ".", "train_list", ")", "\n", "train_set", "=", "Dataset", "(", "train_list", ",", "root", "=", "args", ".", "data_dir", ",", "\n", "for_train", "=", "True", ",", "num_patches", "=", "args", ".", "num_patches", ",", "\n", "transforms", "=", "args", ".", "train_transforms", ",", "\n", "sample_size", "=", "args", ".", "sample_size", ",", "sub_sample_size", "=", "args", ".", "sub_sample_size", ",", "\n", "target_size", "=", "args", ".", "target_size", ")", "\n", "\n", "\n", "num_iters", "=", "args", ".", "num_iters", "or", "(", "len", "(", "train_set", ")", "*", "args", ".", "num_epochs", ")", "//", "args", ".", "batch_size", "\n", "num_iters", "-=", "args", ".", "start_iter", "\n", "train_sampler", "=", "CycleSampler", "(", "len", "(", "train_set", ")", ",", "num_iters", "*", "args", ".", "batch_size", ")", "\n", "train_loader", "=", "DataLoader", "(", "\n", "train_set", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "collate_fn", "=", "train_set", ".", "collate", ",", "sampler", "=", "train_sampler", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ",", "worker_init_fn", "=", "init_fn", ")", "\n", "\n", "if", "args", ".", "valid_list", ":", "\n", "        ", "valid_list", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data_dir", ",", "args", ".", "valid_list", ")", "\n", "valid_set", "=", "Dataset", "(", "valid_list", ",", "root", "=", "args", ".", "data_dir", ",", "\n", "for_train", "=", "False", ",", "crop", "=", "False", ",", "\n", "transforms", "=", "args", ".", "test_transforms", ",", "\n", "sample_size", "=", "args", ".", "sample_size", ",", "sub_sample_size", "=", "args", ".", "sub_sample_size", ",", "\n", "target_size", "=", "args", ".", "target_size", ")", "\n", "valid_loader", "=", "DataLoader", "(", "\n", "valid_set", ",", "batch_size", "=", "1", ",", "shuffle", "=", "False", ",", "\n", "collate_fn", "=", "valid_set", ".", "collate", ",", "\n", "num_workers", "=", "4", ",", "pin_memory", "=", "True", ")", "\n", "\n", "train_valid_set", "=", "Dataset", "(", "train_list", ",", "root", "=", "args", ".", "data_dir", ",", "\n", "for_train", "=", "False", ",", "crop", "=", "False", ",", "\n", "transforms", "=", "args", ".", "test_transforms", ",", "\n", "sample_size", "=", "args", ".", "sample_size", ",", "sub_sample_size", "=", "args", ".", "sub_sample_size", ",", "\n", "target_size", "=", "args", ".", "target_size", ")", "\n", "train_valid_loader", "=", "DataLoader", "(", "\n", "train_valid_set", ",", "batch_size", "=", "1", ",", "shuffle", "=", "False", ",", "\n", "collate_fn", "=", "train_valid_set", ".", "collate", ",", "\n", "num_workers", "=", "4", ",", "pin_memory", "=", "True", ")", "\n", "\n", "", "start", "=", "time", ".", "time", "(", ")", "\n", "\n", "enum_batches", "=", "len", "(", "train_set", ")", "/", "float", "(", "args", ".", "batch_size", ")", "\n", "args", ".", "schedule", "=", "{", "int", "(", "k", "*", "enum_batches", ")", ":", "v", "for", "k", ",", "v", "in", "args", ".", "schedule", ".", "items", "(", ")", "}", "\n", "args", ".", "save_freq", "=", "int", "(", "enum_batches", "*", "args", ".", "save_freq", ")", "\n", "args", ".", "valid_freq", "=", "int", "(", "enum_batches", "*", "args", ".", "valid_freq", ")", "\n", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "torch", ".", "set_grad_enabled", "(", "True", ")", "\n", "\n", "for", "i", ",", "(", "data", ",", "label", ")", "in", "enumerate", "(", "train_loader", ",", "args", ".", "start_iter", ")", ":", "\n", "\n", "## validation", "\n", "#if args.valid_list and  (i % args.valid_freq) == 0:", "\n", "#    logging.info('-'*50)", "\n", "#    msg  =  'Iter {}, Epoch {:.4f}, {}'.format(i, i/enum_batches, 'validation')", "\n", "#    logging.info(msg)", "\n", "#    with torch.no_grad():", "\n", "#        validate(valid_loader, model, batch_size=args.mini_batch_size, names=valid_set.names)", "\n", "\n", "# actual training", "\n", "        ", "adjust_learning_rate", "(", "optimizer", ",", "i", ")", "\n", "for", "data", "in", "zip", "(", "*", "[", "d", ".", "split", "(", "args", ".", "mini_batch_size", ")", "for", "d", "in", "data", "]", ")", ":", "\n", "\n", "            ", "data", "=", "[", "t", ".", "cuda", "(", "non_blocking", "=", "True", ")", "for", "t", "in", "data", "]", "\n", "x1", ",", "x2", ",", "target", "=", "data", "[", ":", "3", "]", "\n", "\n", "if", "len", "(", "data", ")", ">", "3", ":", "# has mask", "\n", "                ", "m1", ",", "m2", "=", "data", "[", "3", ":", "]", "\n", "x1", "=", "add_mask", "(", "x1", ",", "m1", ",", "1", ")", "\n", "x2", "=", "add_mask", "(", "x2", ",", "m2", ",", "1", ")", "\n", "\n", "\n", "# compute output", "\n", "", "output", "=", "model", "(", "(", "x1", ",", "x2", ")", ")", "# output nx5x9x9x9, target nx9x9x9", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ",", "args", ".", "alpha", ")", "\n", "\n", "# measure accuracy and record loss", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "target", ".", "numel", "(", ")", ")", "\n", "\n", "# compute gradient and do SGD step", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "if", "(", "i", "+", "1", ")", "%", "args", ".", "save_freq", "==", "0", ":", "\n", "            ", "epoch", "=", "int", "(", "(", "i", "+", "1", ")", "//", "enum_batches", ")", "\n", "\n", "file_name", "=", "os", ".", "path", ".", "join", "(", "ckpts", ",", "'model_epoch_{}.tar'", ".", "format", "(", "epoch", ")", ")", "\n", "torch", ".", "save", "(", "{", "\n", "'iter'", ":", "i", "+", "1", ",", "\n", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'optim_dict'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "}", ",", "\n", "file_name", ")", "\n", "\n", "", "msg", "=", "'Iter {0:}, Epoch {1:.4f}, Loss {2:.4f}'", ".", "format", "(", "\n", "i", "+", "1", ",", "(", "i", "+", "1", ")", "/", "enum_batches", ",", "losses", ".", "avg", ")", "\n", "logging", ".", "info", "(", "msg", ")", "\n", "\n", "losses", ".", "reset", "(", ")", "\n", "\n", "", "i", "=", "num_iters", "+", "args", ".", "start_iter", "\n", "file_name", "=", "os", ".", "path", ".", "join", "(", "ckpts", ",", "'model_last.tar'", ")", "\n", "torch", ".", "save", "(", "{", "\n", "'iter'", ":", "i", ",", "\n", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'optim_dict'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "}", ",", "\n", "file_name", ")", "\n", "\n", "if", "args", ".", "valid_list", ":", "\n", "        ", "logging", ".", "info", "(", "'-'", "*", "50", ")", "\n", "msg", "=", "'Iter {}, Epoch {:.4f}, {}'", ".", "format", "(", "i", ",", "i", "/", "enum_batches", ",", "'validate validation data'", ")", "\n", "logging", ".", "info", "(", "msg", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "validate", "(", "valid_loader", ",", "model", ",", "batch_size", "=", "args", ".", "mini_batch_size", ",", "names", "=", "valid_set", ".", "names", ",", "out_dir", "=", "args", ".", "out", ")", "\n", "\n", "#logging.info('-'*50)", "\n", "#msg  =  'Iter {}, Epoch {:.4f}, {}'.format(i, i/enum_batches, 'validate training data')", "\n", "#logging.info(msg)", "\n", "\n", "#with torch.no_grad():", "\n", "#    validate(train_valid_loader, model, batch_size=args.mini_batch_size, names=train_valid_set.names, verbose=False)", "\n", "\n", "", "", "msg", "=", "'total time: {:.4f} minutes'", ".", "format", "(", "(", "time", ".", "time", "(", ")", "-", "start", ")", "/", "60", ")", "\n", "logging", ".", "info", "(", "msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_tumor.train_6.adjust_learning_rate": [[222, 227], ["None"], "function", ["None"], ["", "def", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ")", ":", "\n", "# reduce learning rate by a factor of 10", "\n", "    ", "if", "epoch", "+", "1", "in", "args", ".", "schedule", ":", "\n", "        ", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "*=", "0.1", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_tumor.predict.AverageMeter.__init__": [[188, 190], ["predict.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.AverageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_tumor.predict.AverageMeter.reset": [[191, 196], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_tumor.predict.AverageMeter.update": [[197, 202], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_tumor.predict.calculate_metrics": [[28, 32], ["medpy.metric.sensitivity", "medpy.metric.specificity", "medpy.metric.dc"], "function", ["None"], ["def", "calculate_metrics", "(", "pred", ",", "target", ")", ":", "\n", "    ", "sens", "=", "metric", ".", "sensitivity", "(", "pred", ",", "target", ")", "\n", "spec", "=", "metric", ".", "specificity", "(", "pred", ",", "target", ")", "\n", "dice", "=", "metric", ".", "dc", "(", "pred", ",", "target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_tumor.predict.f1_score": [[34, 38], ["o.sum", "t.sum"], "function", ["None"], ["def", "f1_score", "(", "o", ",", "t", ")", ":", "\n", "    ", "num", "=", "2", "*", "(", "o", "*", "t", ")", ".", "sum", "(", ")", "+", "eps", "\n", "den", "=", "o", ".", "sum", "(", ")", "+", "t", ".", "sum", "(", ")", "+", "eps", "\n", "return", "num", "/", "den", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_tumor.predict.dice": [[42, 56], ["predict.f1_score", "predict.f1_score", "predict.f1_score"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.miccai.metrics.f1_score", "home.repos.pwc.inspect_result.zwxu064_RANP.miccai.metrics.f1_score", "home.repos.pwc.inspect_result.zwxu064_RANP.miccai.metrics.f1_score"], ["", "def", "dice", "(", "output", ",", "target", ")", ":", "\n", "    ", "ret", "=", "[", "]", "\n", "# whole", "\n", "o", "=", "output", ">", "0", ";", "t", "=", "target", ">", "0", "\n", "ret", "+=", "f1_score", "(", "o", ",", "t", ")", ",", "\n", "# core", "\n", "o", "=", "(", "output", "==", "1", ")", "|", "(", "output", "==", "4", ")", "\n", "t", "=", "(", "target", "==", "1", ")", "|", "(", "target", "==", "4", ")", "\n", "ret", "+=", "f1_score", "(", "o", ",", "t", ")", ",", "\n", "# active", "\n", "o", "=", "(", "output", "==", "4", ")", ";", "t", "=", "(", "target", "==", "4", ")", "\n", "ret", "+=", "f1_score", "(", "o", ",", "t", ")", ",", "\n", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_tumor.predict.main": [[58, 90], ["args.getdir", "getattr", "getattr.", "model.cuda.cuda", "os.path.join", "torch.load", "torch.load", "torch.load", "torch.load", "model.cuda.load_state_dict", "getattr", "os.path.join", "getattr.", "torch.utils.data.DataLoader", "time.time", "logging.info", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "predict.validate", "time.time"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.utils.parser.Parser.getdir", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.data.load", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.data.load", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.data.load", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.data.load", "home.repos.pwc.inspect_result.zwxu064_RANP.unet.trainer.UNet3DTrainer.validate"], ["def", "main", "(", ")", ":", "\n", "    ", "ckpts", "=", "args", ".", "getdir", "(", ")", "\n", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", "=", "args", ".", "gpu", "\n", "# setup networks", "\n", "Network", "=", "getattr", "(", "models", ",", "args", ".", "net", ")", "\n", "model", "=", "Network", "(", "**", "args", ".", "net_params", ")", "\n", "model", "=", "model", ".", "cuda", "(", ")", "\n", "\n", "model_file", "=", "os", ".", "path", ".", "join", "(", "ckpts", ",", "args", ".", "ckpt", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "model_file", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "\n", "Dataset", "=", "getattr", "(", "datasets", ",", "args", ".", "dataset", ")", "\n", "\n", "valid_list", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data_dir", ",", "args", ".", "valid_list", ")", "\n", "valid_set", "=", "Dataset", "(", "valid_list", ",", "root", "=", "args", ".", "data_dir", ",", "\n", "for_train", "=", "False", ",", "crop", "=", "False", ",", "return_target", "=", "args", ".", "scoring", ",", "\n", "transforms", "=", "args", ".", "test_transforms", ",", "\n", "sample_size", "=", "args", ".", "sample_size", ",", "sub_sample_size", "=", "args", ".", "sub_sample_size", ",", "\n", "target_size", "=", "args", ".", "target_size", ")", "\n", "valid_loader", "=", "DataLoader", "(", "\n", "valid_set", ",", "batch_size", "=", "1", ",", "shuffle", "=", "False", ",", "\n", "collate_fn", "=", "valid_set", ".", "collate", ",", "\n", "num_workers", "=", "4", ",", "pin_memory", "=", "True", ")", "\n", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "scores", "=", "validate", "(", "valid_loader", ",", "model", ",", "args", ".", "batch_size", ",", "\n", "args", ".", "out_dir", ",", "valid_set", ".", "names", ",", "scoring", "=", "args", ".", "scoring", ")", "\n", "\n", "", "msg", "=", "'total time {:.4f} minutes'", ".", "format", "(", "(", "time", ".", "time", "(", ")", "-", "start", ")", "/", "60", ")", "\n", "logging", ".", "info", "(", "msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_tumor.predict.validate": [[92, 184], ["model.eval", "predict.AverageMeter", "enumerate", "model.train", "int", "int", "int", "labels.numpy.cuda", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "enumerate", "outputs.argmax.view().permute", "outputs.argmax.reshape", "outputs[].numpy", "str", "logging.info", "t.cuda", "len", "data.data_utils.add_mask", "predict.AverageMeter", "coords.split", "multicrop.crop3d_gpu", "multicrop.crop3d_gpu", "model", "torch.softmax", "F.softmax.permute().cpu", "len", "numpy.save", "labels.numpy.numpy", "outputs.argmax.argmax", "predict.dice", "predict.AverageMeter.update", "logging.info", "data.pop", "multicrop.crop3d_gpu", "criterion", "sample_loss.update", "outputs.argmax.view", "os.path.join", "numpy.array", "F.softmax.permute", "criterion.item", "multicrop.crop3d_gpu.size", "zip", "zip"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.data.train", "home.repos.pwc.inspect_result.zwxu064_RANP.data.data_utils.add_mask", "home.repos.pwc.inspect_result.zwxu064_RANP.miccai.metrics.dice", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.AverageMeter.update", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.AverageMeter.update"], ["", "def", "validate", "(", "valid_loader", ",", "model", ",", "batch_size", ",", "\n", "out_dir", "=", "''", ",", "names", "=", "None", ",", "scoring", "=", "True", ",", "verbose", "=", "True", ")", ":", "\n", "\n", "    ", "H", ",", "W", ",", "T", "=", "240", ",", "240", ",", "155", "\n", "\n", "dset", "=", "valid_loader", ".", "dataset", "\n", "names", "=", "dset", ".", "names", "\n", "h", ",", "w", ",", "t", "=", "dset", ".", "shape", ";", "h", ",", "w", ",", "t", "=", "int", "(", "h", ")", ",", "int", "(", "w", ")", ",", "int", "(", "t", ")", "\n", "sample_size", "=", "dset", ".", "sample_size", "\n", "sub_sample_size", "=", "dset", ".", "sub_sample_size", "\n", "target_size", "=", "dset", ".", "target_size", "\n", "dtype", "=", "torch", ".", "float32", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "criterion", "=", "F", ".", "cross_entropy", "\n", "\n", "vals", "=", "AverageMeter", "(", ")", "\n", "for", "i", ",", "(", "data", ",", "labels", ")", "in", "enumerate", "(", "valid_loader", ")", ":", "\n", "\n", "        ", "y", "=", "labels", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "data", "=", "[", "t", ".", "cuda", "(", "non_blocking", "=", "True", ")", "for", "t", "in", "data", "]", "\n", "x", ",", "coords", "=", "data", "[", ":", "2", "]", "\n", "\n", "if", "len", "(", "data", ")", ">", "2", ":", "# has mask", "\n", "            ", "x", "=", "add_mask", "(", "x", ",", "data", ".", "pop", "(", ")", ",", "0", ")", "\n", "\n", "", "outputs", "=", "torch", ".", "zeros", "(", "(", "5", ",", "h", "*", "w", "*", "t", ",", "target_size", ",", "target_size", ",", "target_size", ")", ",", "dtype", "=", "dtype", ")", "\n", "#targets = torch.zeros((h*w*t, 9, 9, 9), dtype=torch.uint8)", "\n", "\n", "sample_loss", "=", "AverageMeter", "(", ")", "if", "scoring", "and", "criterion", "is", "not", "None", "else", "None", "\n", "\n", "for", "b", ",", "coord", "in", "enumerate", "(", "coords", ".", "split", "(", "batch_size", ")", ")", ":", "\n", "            ", "x1", "=", "multicrop", ".", "crop3d_gpu", "(", "x", ",", "coord", ",", "sample_size", ",", "sample_size", ",", "sample_size", ",", "1", ",", "True", ")", "\n", "x2", "=", "multicrop", ".", "crop3d_gpu", "(", "x", ",", "coord", ",", "sub_sample_size", ",", "sub_sample_size", ",", "sub_sample_size", ",", "3", ",", "True", ")", "\n", "\n", "if", "scoring", ":", "\n", "                ", "target", "=", "multicrop", ".", "crop3d_gpu", "(", "y", ",", "coord", ",", "target_size", ",", "target_size", ",", "target_size", ",", "1", ",", "True", ")", "\n", "\n", "# compute output", "\n", "", "logit", "=", "model", "(", "(", "x1", ",", "x2", ")", ")", "# nx5x9x9x9, target nx9x9x9", "\n", "output", "=", "F", ".", "softmax", "(", "logit", ",", "dim", "=", "1", ")", "\n", "\n", "# copy output", "\n", "start", "=", "b", "*", "batch_size", "\n", "end", "=", "start", "+", "output", ".", "shape", "[", "0", "]", "\n", "outputs", "[", ":", ",", "start", ":", "end", "]", "=", "output", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ",", "4", ")", ".", "cpu", "(", ")", "\n", "\n", "#targets[start:end] = target.type(dtype).cpu()", "\n", "\n", "# measure accuracy and record loss", "\n", "if", "scoring", "and", "criterion", "is", "not", "None", ":", "\n", "                ", "loss", "=", "criterion", "(", "logit", ",", "target", ")", "\n", "sample_loss", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "target", ".", "size", "(", "0", ")", ")", "\n", "\n", "", "", "outputs", "=", "outputs", ".", "view", "(", "5", ",", "h", ",", "w", ",", "t", ",", "9", ",", "9", ",", "9", ")", ".", "permute", "(", "0", ",", "1", ",", "4", ",", "2", ",", "5", ",", "3", ",", "6", ")", "\n", "outputs", "=", "outputs", ".", "reshape", "(", "5", ",", "h", "*", "9", ",", "w", "*", "9", ",", "t", "*", "9", ")", "\n", "outputs", "=", "outputs", "[", ":", ",", ":", "H", ",", ":", "W", ",", ":", "T", "]", ".", "numpy", "(", ")", "\n", "\n", "#targets = targets.view(h, w, t, 9, 9, 9).permute(0, 3, 1, 4, 2, 5).reshape(h*9, w*9, t*9)", "\n", "#targets = targets[:H, :W, :T].numpy()", "\n", "\n", "msg", "=", "'Subject {}/{}, '", ".", "format", "(", "i", "+", "1", ",", "len", "(", "valid_loader", ")", ")", "\n", "name", "=", "str", "(", "i", ")", "\n", "if", "names", ":", "\n", "            ", "name", "=", "names", "[", "i", "]", "\n", "msg", "+=", "'{:>20}, '", ".", "format", "(", "name", ")", "\n", "\n", "", "if", "out_dir", ":", "\n", "            ", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "out_dir", ",", "name", "+", "'_preds'", ")", ",", "outputs", ")", "\n", "\n", "", "if", "scoring", ":", "\n", "            ", "labels", "=", "labels", ".", "numpy", "(", ")", "\n", "outputs", "=", "outputs", ".", "argmax", "(", "0", ")", "\n", "scores", "=", "dice", "(", "outputs", ",", "labels", ")", "\n", "\n", "#if criterion is not None:", "\n", "#    scores += sample_loss.avg,", "\n", "\n", "vals", ".", "update", "(", "np", ".", "array", "(", "scores", ")", ")", "\n", "\n", "msg", "+=", "', '", ".", "join", "(", "[", "'{}: {:.4f}'", ".", "format", "(", "k", ",", "v", ")", "for", "k", ",", "v", "in", "zip", "(", "keys", ",", "scores", ")", "]", ")", "\n", "\n", "", "if", "verbose", ":", "\n", "            ", "logging", ".", "info", "(", "msg", ")", "\n", "\n", "", "", "if", "scoring", ":", "\n", "        ", "msg", "=", "'Average scores: '", "\n", "msg", "+=", "', '", ".", "join", "(", "[", "'{}: {:.4f}'", ".", "format", "(", "k", ",", "v", ")", "for", "k", ",", "v", "in", "zip", "(", "keys", ",", "vals", ".", "avg", ")", "]", ")", "\n", "logging", ".", "info", "(", "msg", ")", "\n", "\n", "", "model", ".", "train", "(", ")", "\n", "return", "vals", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_tumor.compress_data.float2uint": [[7, 15], ["numpy.load", "data_temp.astype", "print", "numpy.savez_compressed", "os.remove", "file_path.find"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.data.load"], ["def", "float2uint", "(", "file_path", ")", ":", "\n", "\t", "filename", "=", "file_path", "[", ":", "file_path", ".", "find", "(", "'.npy'", ")", "]", "+", "'.npz'", "\n", "data_float32", "=", "np", ".", "load", "(", "file_path", ")", "\n", "data_temp", "=", "255", "*", "data_float32", "\n", "data_uint8", "=", "data_temp", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "print", "(", "filename", ")", "\n", "np", ".", "savez_compressed", "(", "filename", ",", "data", "=", "data_uint8", ")", "\n", "os", ".", "remove", "(", "file_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_tumor.split.write": [[9, 13], ["os.path.join", "open", "f.write"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.binvox_rw.write"], ["def", "write", "(", "data", ",", "fname", ",", "root", "=", "root", ")", ":", "\n", "    ", "fname", "=", "os", ".", "path", ".", "join", "(", "root", ",", "fname", ")", "\n", "with", "open", "(", "fname", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "'\\n'", ".", "join", "(", "data", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_tumor.train_unet.main": [[53, 246], ["torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "random.seed", "numpy.random.seed", "getattr", "getattr.", "model.cuda.cuda", "getattr", "logging.info", "time.time", "int", "int", "predict_unet.AverageMeter", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "enumerate", "logging.info", "getattr", "model.cuda.parameters", "os.path.isfile", "str", "getattr", "os.path.join", "getattr.", "data.sampler.CycleSampler", "torch.utils.data.DataLoader", "miccai.dataloader.BraTSDataset", "torch.utils.data.DataLoader", "len", "float", "int", "train_unet.adjust_learning_rate", "model.cuda.", "getattr.", "predict_unet.AverageMeter.update", "optimizer.zero_grad", "criterion.backward", "optimizer.step", "logging.info", "predict_unet.AverageMeter.reset", "logging.info", "logging.info", "print", "torch.load", "torch.load", "torch.load", "torch.load", "model.cuda.load_state_dict", "optimizer.load_state_dict", "len", "os.path.join", "getattr.", "torch.utils.data.DataLoader", "miccai.dataloader.BraTSDataset", "torch.utils.data.DataLoader", "args.schedule.items", "criterion.item", "target.numel", "int", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "predict_unet.validate", "x.cuda", "target.cuda", "data[].squeeze", "time.time", "len", "len", "x.cuda", "target.cuda", "model.cuda.state_dict", "optimizer.state_dict"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.adjust_learning_rate", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.AverageMeter.update", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.AverageMeter.reset", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.data.load", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.data.load", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.data.load", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.data.load", "home.repos.pwc.inspect_result.zwxu064_RANP.unet.trainer.UNet3DTrainer.validate"], ["", "def", "main", "(", ")", ":", "\n", "# setup environments and seeds", "\n", "# os.environ['CUDA_VISIBLE_DEVICES'] = args.gpu", "\n", "    ", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", "=", "\"3\"", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "\n", "# setup networks", "\n", "Network", "=", "getattr", "(", "models", ",", "args", ".", "net", ")", "\n", "model", "=", "Network", "(", "**", "args", ".", "net_params", ")", "\n", "model", "=", "model", ".", "cuda", "(", ")", "\n", "\n", "optimizer", "=", "getattr", "(", "torch", ".", "optim", ",", "args", ".", "opt", ")", "(", "\n", "model", ".", "parameters", "(", ")", ",", "**", "args", ".", "opt_params", ")", "\n", "criterion", "=", "getattr", "(", "criterions", ",", "args", ".", "criterion", ")", "\n", "\n", "msg", "=", "''", "\n", "# optionally resume from a checkpoint", "\n", "if", "args", ".", "resume", ":", "\n", "        ", "if", "os", ".", "path", ".", "isfile", "(", "args", ".", "resume", ")", ":", "\n", "            ", "print", "(", "\"=> loading checkpoint '{}'\"", ".", "format", "(", "args", ".", "resume", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "resume", ")", "\n", "args", ".", "start_iter", "=", "checkpoint", "[", "'iter'", "]", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optim_dict'", "]", ")", "\n", "msg", "=", "(", "\"=> loaded checkpoint '{}' (iter {})\"", "\n", ".", "format", "(", "args", ".", "resume", ",", "checkpoint", "[", "'iter'", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "msg", "=", "\"=> no checkpoint found at '{}'\"", ".", "format", "(", "args", ".", "resume", ")", "\n", "", "", "else", ":", "\n", "        ", "msg", "=", "'-------------- New training session ----------------'", "\n", "\n", "", "msg", "+=", "'\\n'", "+", "str", "(", "args", ")", "\n", "logging", ".", "info", "(", "msg", ")", "\n", "\n", "# Data loading code", "\n", "if", "enable_org", ":", "\n", "        ", "Dataset", "=", "getattr", "(", "datasets", ",", "args", ".", "dataset", ")", "\n", "\n", "train_list", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data_dir", ",", "args", ".", "train_list", ")", "\n", "train_set", "=", "Dataset", "(", "train_list", ",", "root", "=", "args", ".", "data_dir", ",", "for_train", "=", "True", ",", "\n", "transforms", "=", "args", ".", "train_transforms", ")", "\n", "num_iters", "=", "args", ".", "num_iters", "or", "(", "len", "(", "train_set", ")", "*", "args", ".", "num_epochs", ")", "//", "args", ".", "batch_size", "\n", "num_iters", "-=", "args", ".", "start_iter", "\n", "train_sampler", "=", "CycleSampler", "(", "len", "(", "train_set", ")", ",", "num_iters", "*", "args", ".", "batch_size", ")", "\n", "# train_loader = DataLoader(", "\n", "#     train_set,", "\n", "#     batch_size=args.batch_size,", "\n", "#     collate_fn=train_set.collate,", "\n", "#     num_workers=args.workers, pin_memory=True, worker_init_fn=init_fn,", "\n", "#     shuffle=True)  # TODO sampler=train_sampler", "\n", "train_loader", "=", "DataLoader", "(", "\n", "train_set", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "sampler", "=", "train_sampler", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ",", "worker_init_fn", "=", "init_fn", ")", "\n", "", "else", ":", "\n", "        ", "data_dir", "=", "'/home/users/u5710355/WorkSpace/git-lab/pytorch-projects/3DCNN-github/datasets/BraTS'", "\n", "train_set", "=", "BraTSDataset", "(", "'train'", ",", "data_dir", ",", "years", "=", "[", "2018", "]", ",", "\n", "spatial_size", "=", "128", ",", "\n", "enable_random_crop", "=", "True", ",", "\n", "enable_random_flip", "=", "True", ",", "\n", "enable_time_print", "=", "False", ")", "\n", "train_loader", "=", "DataLoader", "(", "train_set", ",", "batch_size", "=", "args", ".", "batch_size", ",", "num_workers", "=", "8", ",", "shuffle", "=", "True", ")", "\n", "num_iters", "=", "args", ".", "num_iters", "or", "(", "len", "(", "train_set", ")", "*", "args", ".", "num_epochs", ")", "//", "args", ".", "batch_size", "\n", "num_iters", "-=", "args", ".", "start_iter", "\n", "\n", "", "if", "args", ".", "valid_list", ":", "\n", "        ", "if", "enable_org", ":", "\n", "            ", "valid_list", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data_dir", ",", "args", ".", "valid_list", ")", "\n", "valid_set", "=", "Dataset", "(", "valid_list", ",", "root", "=", "args", ".", "data_dir", ",", "\n", "for_train", "=", "False", ",", "transforms", "=", "args", ".", "test_transforms", ")", "\n", "# valid_loader = DataLoader(", "\n", "#     valid_set, batch_size=1, shuffle=False,", "\n", "#     collate_fn=valid_set.collate,", "\n", "#     num_workers=4, pin_memory=True)", "\n", "valid_loader", "=", "DataLoader", "(", "\n", "valid_set", ",", "batch_size", "=", "1", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "4", ",", "pin_memory", "=", "True", ")", "\n", "\n", "# train_valid_set = Dataset(train_list, root=args.data_dir,", "\n", "#         for_train=False, transforms=args.test_transforms)", "\n", "#", "\n", "# train_valid_loader = DataLoader(", "\n", "#     train_valid_set, batch_size=1, shuffle=False,", "\n", "#     collate_fn=train_valid_set.collate,", "\n", "#     num_workers=4, pin_memory=True)", "\n", "", "else", ":", "\n", "            ", "data_dir", "=", "'/home/users/u5710355/WorkSpace/git-lab/pytorch-projects/3DCNN-github/datasets/BraTS'", "\n", "valid_set", "=", "BraTSDataset", "(", "'valid'", ",", "data_dir", ",", "years", "=", "[", "2018", "]", ",", "spatial_size", "=", "128", ",", "\n", "enable_random_crop", "=", "True", ",", "enable_random_flip", "=", "False", ")", "\n", "valid_loader", "=", "DataLoader", "(", "valid_set", ",", "batch_size", "=", "1", ",", "num_workers", "=", "8", ",", "shuffle", "=", "False", ")", "\n", "valid_set", ".", "names", "=", "None", "\n", "\n", "", "", "start", "=", "time", ".", "time", "(", ")", "\n", "\n", "enum_batches", "=", "len", "(", "train_set", ")", "/", "float", "(", "args", ".", "batch_size", ")", "\n", "args", ".", "schedule", "=", "{", "int", "(", "k", "*", "enum_batches", ")", ":", "v", "for", "k", ",", "v", "in", "args", ".", "schedule", ".", "items", "(", ")", "}", "\n", "args", ".", "save_freq", "=", "int", "(", "enum_batches", "*", "args", ".", "save_freq", ")", "\n", "args", ".", "valid_freq", "=", "int", "(", "enum_batches", "*", "args", ".", "valid_freq", ")", "\n", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "torch", ".", "set_grad_enabled", "(", "True", ")", "\n", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "train_loader", ",", "args", ".", "start_iter", ")", ":", "\n", "# continue", "\n", "## validation", "\n", "#if args.valid_list and  (i % args.valid_freq) == 0:", "\n", "#    logging.info('-'*50)", "\n", "#    msg  =  'Iter {}, Epoch {:.4f}, {}'.format(i, i/enum_batches, 'validation')", "\n", "#    logging.info(msg)", "\n", "#    with torch.no_grad():", "\n", "#        validate(valid_loader, model, names=valid_set.names)", "\n", "\n", "# actual training", "\n", "        ", "adjust_learning_rate", "(", "optimizer", ",", "i", ")", "\n", "\n", "if", "enable_org", ":", "\n", "# data = [t.cuda(non_blocking=True) for t in data]", "\n", "            ", "x", ",", "target", "=", "data", "[", ":", "2", "]", "\n", "# name = data[2]", "\n", "\n", "x", ",", "target", "=", "x", ".", "cuda", "(", ")", ",", "target", ".", "cuda", "(", ")", "\n", "\n", "# if len(data) > 2:  # has mask", "\n", "#     x = add_mask(x, data.pop(), 1)", "\n", "\n", "# print('==> Train, name: {}, data: {}, gt: {}'.format(name, x.size(), target.size()))", "\n", "", "else", ":", "\n", "            ", "x", ",", "target", "=", "data", "[", "'x'", "]", ",", "data", "[", "'y'", "]", ".", "squeeze", "(", "1", ")", "\n", "if", "True", ":", "\n", "                ", "x", ",", "target", "=", "x", ".", "cuda", "(", ")", ",", "target", ".", "cuda", "(", ")", "\n", "\n", "# logging.info(x.shape)", "\n", "# logging.info(torch.max(x))", "\n", "# logging.info(torch.min(x))", "\n", "# logging.info(target.shape)", "\n", "# logging.info(torch.max(target))", "\n", "# logging.info(torch.min(target))", "\n", "\n", "# compute output", "\n", "", "", "output", "=", "model", "(", "x", ")", "# nx5x128x128x128, target nx128x128x128", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ",", "args", ".", "alpha", ")", "\n", "\n", "# measure accuracy and record loss", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "target", ".", "numel", "(", ")", ")", "\n", "\n", "# compute gradient and do SGD step", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "if", "(", "i", "+", "1", ")", "%", "args", ".", "save_freq", "==", "0", ":", "\n", "            ", "epoch", "=", "int", "(", "(", "i", "+", "1", ")", "//", "enum_batches", ")", "\n", "file_name", "=", "os", ".", "path", ".", "join", "(", "ckpts", ",", "'model_epoch_{}.tar'", ".", "format", "(", "epoch", ")", ")", "\n", "torch", ".", "save", "(", "{", "\n", "'iter'", ":", "i", "+", "1", ",", "\n", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'optim_dict'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "}", ",", "\n", "file_name", ")", "\n", "\n", "", "msg", "=", "'Iter {0:}, Epoch {1:.4f}, Loss {2:.4f}'", ".", "format", "(", "\n", "i", "+", "1", ",", "(", "i", "+", "1", ")", "/", "enum_batches", ",", "losses", ".", "avg", ")", "\n", "logging", ".", "info", "(", "msg", ")", "\n", "\n", "losses", ".", "reset", "(", ")", "\n", "\n", "", "i", "=", "num_iters", "+", "args", ".", "start_iter", "\n", "# file_name = os.path.join(ckpts, 'model_last.tar')", "\n", "# torch.save({", "\n", "#     'iter': i,", "\n", "#     'state_dict': model.state_dict(),", "\n", "#     'optim_dict': optimizer.state_dict(),", "\n", "#     },", "\n", "#     file_name)", "\n", "\n", "if", "args", ".", "valid_list", ":", "\n", "        ", "logging", ".", "info", "(", "'-'", "*", "50", ")", "\n", "msg", "=", "'Iter {}, Epoch {:.4f}, {}'", ".", "format", "(", "i", ",", "i", "/", "enum_batches", ",", "'validate validation data'", ")", "\n", "logging", ".", "info", "(", "msg", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "validate", "(", "valid_loader", ",", "model", ",", "names", "=", "valid_set", ".", "names", ",", "out_dir", "=", "args", ".", "out", ",", "enable_org", "=", "enable_org", ")", "\n", "\n", "#logging.info('-'*50)", "\n", "#msg  =  'Iter {}, Epoch {:.4f}, {}'.format(i, i/enum_batches, 'validate training data')", "\n", "#logging.info(msg)", "\n", "#with torch.no_grad():", "\n", "#    validate(train_valid_loader, model, names=train_valid_set.names, verbose=False)", "\n", "\n", "", "", "msg", "=", "'total time: {:.4f} minutes'", ".", "format", "(", "(", "time", ".", "time", "(", ")", "-", "start", ")", "/", "60", ")", "\n", "logging", ".", "info", "(", "msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_tumor.train_unet.adjust_learning_rate": [[248, 253], ["None"], "function", ["None"], ["", "def", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ")", ":", "\n", "# reduce learning rate by a factor of 10", "\n", "    ", "if", "epoch", "+", "1", "in", "args", ".", "schedule", ":", "\n", "        ", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "*=", "0.1", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_tumor.train.main": [[52, 221], ["torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "random.seed", "numpy.random.seed", "getattr", "getattr.", "model.cuda.cuda", "getattr", "logging.info", "getattr", "os.path.join", "getattr.", "data.sampler.CycleSampler", "torch.utils.data.DataLoader", "time.time", "int", "int", "predict.AverageMeter", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "enumerate", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "logging.info", "getattr", "model.cuda.parameters", "os.path.isfile", "str", "len", "os.path.join", "getattr.", "torch.utils.data.DataLoader", "getattr.", "torch.utils.data.DataLoader", "len", "float", "int", "train.adjust_learning_rate", "zip", "logging.info", "predict.AverageMeter.reset", "logging.info", "logging.info", "print", "torch.load", "torch.load", "torch.load", "torch.load", "model.cuda.load_state_dict", "optimizer.load_state_dict", "args.schedule.items", "model.cuda.", "getattr.", "predict.AverageMeter.update", "optimizer.zero_grad", "criterion.backward", "optimizer.step", "int", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "model.cuda.state_dict", "optimizer.state_dict", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "predict.validate", "len", "t.cuda", "len", "data.data_utils.add_mask", "data.data_utils.add_mask", "criterion.item", "target.numel", "time.time", "d.split", "model.cuda.state_dict", "optimizer.state_dict"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.adjust_learning_rate", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.AverageMeter.reset", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.data.load", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.data.load", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.data.load", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.data.load", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.AverageMeter.update", "home.repos.pwc.inspect_result.zwxu064_RANP.unet.trainer.UNet3DTrainer.validate", "home.repos.pwc.inspect_result.zwxu064_RANP.data.data_utils.add_mask", "home.repos.pwc.inspect_result.zwxu064_RANP.data.data_utils.add_mask"], ["parser", ".", "add_argument", "(", "'--enable_dump'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "help", "=", "'dump for MatLab'", ")", "\n", "parser", ".", "add_argument", "(", "'--enable_param_prune'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "help", "=", "'prune params'", ")", "\n", "parser", ".", "add_argument", "(", "'--enable_neuron_prune'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "help", "=", "'prune neurons'", ")", "\n", "parser", ".", "add_argument", "(", "'--enable_channel_prune'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "help", "=", "'prune channels'", ")", "\n", "parser", ".", "add_argument", "(", "'--enable_dump_features'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "help", "=", "'dump features'", ")", "\n", "# For channel prune options", "\n", "parser", ".", "add_argument", "(", "'--acc_mode'", ",", "type", "=", "str", ",", "default", "=", "'mean'", ",", "help", "=", "'accumulation for importance of a channel'", ")", "\n", "parser", ".", "add_argument", "(", "'--norm'", ",", "type", "=", "str", ",", "default", "=", "'max'", ",", "help", "=", "'normalization over grads'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "args", ".", "device", "=", "device", "\n", "args", ".", "enable_cuda", "=", "device", "==", "'cuda'", "\n", "args", ".", "n_class", "=", "10", "\n", "\n", "if", "isinstance", "(", "args", ".", "seed_list", ",", "numbers", ".", "Number", ")", ":", "\n", "      ", "args", ".", "seed_list", "=", "[", "args", ".", "seed_list", "]", "\n", "\n", "", "if", "args", ".", "enable_neuron_prune", ":", "\n", "      ", "args", ".", "log_dir_comment", "=", "'neuron_prune'", "\n", "", "elif", "args", ".", "enable_channel_prune", ":", "\n", "      ", "args", ".", "log_dir_comment", "=", "'channel_prune'", "\n", "", "else", ":", "\n", "      ", "args", ".", "log_dir_comment", "=", "'param_prune'", "\n", "\n", "", "return", "args", "\n", "\n", "\n", "", "def", "mnist_experiment", "(", "args", ")", ":", "\n", "  ", "network_name", "=", "args", ".", "network", ".", "lower", "(", ")", "\n", "if", "network_name", "==", "'lenet300'", ":", "\n", "    ", "net", "=", "LeNet_300_100", "(", "enable_bias", "=", "args", ".", "enable_bias", ")", "\n", "", "elif", "network_name", "==", "'lenet5'", ":", "\n", "    ", "net", "=", "LeNet_5", "(", "enable_bias", "=", "args", ".", "enable_bias", ")", "\n", "", "elif", "network_name", "==", "'lenet5_caffe'", ":", "\n", "    ", "net", "=", "LeNet_5_Caffe", "(", "enable_bias", "=", "args", ".", "enable_bias", ")", "\n", "", "else", ":", "\n", "    ", "assert", "False", "\n", "\n", "", "net", "=", "net", ".", "to", "(", "args", ".", "device", ")", "\n", "train_batch_size", "=", "val_batch_size", "=", "args", ".", "batch", "\n", "train_loader", ",", "val_loader", "=", "get_mnist_dataloaders", "(", "train_batch_size", ",", "val_batch_size", ",", "\n", "args", ",", "enable_train_shuffle", "=", "True", ")", "\n", "\n", "return", "net", ",", "train_loader", ",", "val_loader", "\n", "\n", "\n", "", "def", "cifar10_experiment", "(", "args", ")", ":", "\n", "  ", "network_name", "=", "args", ".", "network", ".", "lower", "(", ")", "\n", "if", "network_name", "==", "'alexnet_v1'", ":", "\n", "    ", "net", "=", "AlexNet", "(", "k", "=", "1", ",", "enable_bias", "=", "args", ".", "enable_bias", ")", "\n", "", "elif", "network_name", "==", "'alexnet_v2'", ":", "\n", "    ", "net", "=", "AlexNet", "(", "k", "=", "2", ",", "enable_bias", "=", "args", ".", "enable_bias", ")", "\n", "", "elif", "network_name", "==", "'vgg_c'", ":", "\n", "    ", "net", "=", "VGG", "(", "'C'", ",", "enable_bias", "=", "args", ".", "enable_bias", ",", "enable_dump_features", "=", "args", ".", "enable_dump_features", ")", "\n", "", "elif", "network_name", "==", "'vgg_d'", ":", "\n", "    ", "net", "=", "VGG", "(", "'D'", ",", "enable_bias", "=", "args", ".", "enable_bias", ")", "\n", "", "elif", "network_name", "==", "'vgg_like'", ":", "\n", "    ", "net", "=", "VGG", "(", "'like'", ",", "enable_bias", "=", "args", ".", "enable_bias", ")", "\n", "", "else", ":", "\n", "    ", "assert", "False", "\n", "\n", "", "net", "=", "net", ".", "to", "(", "args", ".", "device", ")", "\n", "train_batch_size", "=", "val_batch_size", "=", "args", ".", "batch", "\n", "train_loader", ",", "val_loader", "=", "get_cifar10_dataloaders", "(", "train_batch_size", ",", "val_batch_size", ",", "args", ",", "\n", "enable_train_shuffle", "=", "True", ",", "\n", "enable_train_trans", "=", "True", ")", "\n", "\n", "return", "net", ",", "train_loader", ",", "val_loader", "\n", "\n", "\n", "", "def", "train", "(", "args", ")", ":", "\n", "    ", "writer", "=", "SummaryWriter", "(", "log_dir", "=", "'{}/runs/{}/{}_{}_seed{}_winit{}'", ".", "format", "(", "args", ".", "relative_dir", ",", "args", ".", "log_dir_comment", ",", "args", ".", "network", ",", "\n", "time", ".", "strftime", "(", "\"%Y%m%d_%H%M%S\"", ")", ",", "args", ".", "seed", ",", "args", ".", "weight_init", ")", ")", "\n", "\n", "if", "args", ".", "dataset", "==", "'mnist'", ":", "\n", "      ", "net", ",", "train_loader", ",", "val_loader", "=", "mnist_experiment", "(", "args", ")", "\n", "train_loader_prune", ",", "_", "=", "get_mnist_dataloaders", "(", "args", ".", "batch", ",", "args", ".", "batch", ",", "\n", "args", ",", "enable_train_shuffle", "=", "False", ")", "\n", "", "elif", "args", ".", "dataset", "==", "'cifar10'", ":", "\n", "      ", "net", ",", "train_loader", ",", "val_loader", "=", "cifar10_experiment", "(", "args", ")", "\n", "train_loader_prune", ",", "_", "=", "get_cifar10_dataloaders", "(", "args", ".", "batch", ",", "args", ".", "batch", ",", "\n", "args", ",", "enable_train_shuffle", "=", "False", ",", "\n", "enable_train_trans", "=", "False", ")", "\n", "", "else", ":", "\n", "      ", "assert", "False", "\n", "\n", "", "enable_nesterov", "=", "True", "if", "(", "args", ".", "optimizer", "==", "'nesterov'", ")", "else", "False", "\n", "\n", "optimizer", "=", "optim", ".", "SGD", "(", "net", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "momentum", "=", "0.9", ",", "weight_decay", "=", "args", ".", "weight_decay", ",", "nesterov", "=", "enable_nesterov", ")", "\n", "lr_scheduler", "=", "optim", ".", "lr_scheduler", ".", "StepLR", "(", "optimizer", ",", "args", ".", "lr_decay_step", ",", "gamma", "=", "args", ".", "lr_decay_ratio", ")", "# Zhiwei paper 0.1", "\n", "\n", "# Resume", "\n", "resume_model_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "checkpoint_dir", ",", "'{}_model_{}.pth'", ".", "format", "(", "args", ".", "network", ",", "args", ".", "resume_epoch", ")", ")", "\n", "resume_opt_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "checkpoint_dir", ",", "'{}_optimizer_{}.pth'", ".", "format", "(", "args", ".", "network", ",", "args", ".", "resume_epoch", ")", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "resume_model_path", ")", ":", "\n", "      ", "checkpoint", "=", "torch", ".", "load", "(", "resume_model_path", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", "\n", "net", ".", "load_state_dict", "(", "checkpoint", ")", "\n", "", "else", ":", "\n", "      ", "if", "args", ".", "resume_epoch", ">", "0", ":", "\n", "        ", "print", "(", "'{} not exist'", ".", "format", "(", "resume_model_path", ")", ")", "\n", "\n", "", "", "if", "os", ".", "path", ".", "exists", "(", "resume_opt_path", ")", ":", "\n", "      ", "checkpoint", "=", "torch", ".", "load", "(", "resume_opt_path", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", ")", "\n", "", "else", ":", "\n", "      ", "if", "args", ".", "resume_epoch", ">", "0", ":", "\n", "        ", "print", "(", "'{} not exist'", ".", "format", "(", "resume_opt_path", ")", ")", "\n", "\n", "# Pre-training pruning using SKIP", "\n", "", "", "if", "True", ":", "\n", "      ", "criterion", "=", "F", ".", "nll_loss", "\n", "prune_mask_clean", ",", "_", "=", "pruning", "(", "None", ",", "net", ",", "train_loader_prune", ",", "criterion", ",", "args", ",", "\n", "enable_kernel_mask", "=", "True", ",", "enable_hidden_mask", "=", "False", ",", "\n", "enable_3dunet", "=", "False", ",", "enable_hidden_sum", "=", "False", ")", "\n", "", "else", ":", "\n", "      ", "grads", "=", "SNIP", "(", "net", ",", "train_loader_prune", ",", "args", ")", "\n", "\n", "print", "(", "'Check grads value for seeds'", ",", "torch", ".", "stack", "(", "[", "grad", ".", "abs", "(", ")", ".", "sum", "(", ")", "for", "grad", "in", "grads", "]", ")", ".", "sum", "(", ")", ")", "\n", "\n", "# Removing redundant and calculate gflops", "\n", "all_one_mask", "=", "param_prune", "(", "grads", ",", "param_sparsity", "=", "0", ")", "\n", "\n", "if", "args", ".", "enable_flops", ":", "\n", "        ", "flop_input", ",", "flop_target", "=", "next", "(", "iter", "(", "train_loader_prune", ")", ")", "\n", "flop_input", "=", "flop_input", ".", "to", "(", "args", ".", "device", ")", "\n", "flops_no_prune", ",", "params_no_prune", "=", "cal_flops", "(", "net", ",", "all_one_mask", ",", "flop_input", ",", "comment", "=", "'(no prune)'", ")", "\n", "\n", "# Case 1: Parameter prune, has redundant retains", "\n", "", "if", "args", ".", "enable_param_prune", ":", "\n", "        ", "prune_mask", "=", "param_prune", "(", "grads", ",", "param_sparsity", "=", "args", ".", "param_sparsity", ")", "\n", "prune_mask_clean", "=", "remove_redundant", "(", "prune_mask", ",", "prune_mode", "=", "'param'", ")", "\n", "do_statistics", "(", "prune_mask", ",", "prune_mask_clean", ")", "\n", "\n", "# Flop of param prune before and after removing redundant params", "\n", "if", "args", ".", "enable_flops", ":", "\n", "          ", "flops_param_prune", ",", "params_param_prune", "=", "cal_flops", "(", "net", ",", "prune_mask", ",", "flop_input", ")", "\n", "flops_param_prune_clean", ",", "params_param_prune_clean", "=", "cal_flops", "(", "net", ",", "prune_mask_clean", ",", "flop_input", ")", "\n", "print", "(", "\"GFlops, param prune, original:{:.4f} (param:{:.0f}), pruned:{:.4f} ({:.4f}%, param:{:.0f}), \"", "\n", "\"clean:{:.4f} ({:.4f}%, param:{:.0f}).\\n\"", ".", "format", "(", "flops_no_prune", ",", "params_no_prune", ",", "\n", "flops_param_prune", ",", "flops_param_prune", "*", "100", "/", "flops_no_prune", ",", "params_param_prune", ",", "\n", "flops_param_prune_clean", ",", "flops_param_prune_clean", "*", "100", "/", "flops_no_prune", ",", "params_param_prune_clean", ")", ")", "\n", "\n", "# Case 2: neuron prune, not good, a whole layer will be removed", "\n", "", "", "if", "args", ".", "enable_neuron_prune", ":", "\n", "        ", "prune_mask", "=", "neuron_prune", "(", "grads", ",", "neuron_sparsity", "=", "args", ".", "neuron_sparsity", ",", "acc_mode", "=", "args", ".", "acc_mode", ")", "\n", "prune_mask_clean", "=", "remove_redundant", "(", "prune_mask", ",", "prune_mode", "=", "'neuron'", ")", "\n", "do_statistics", "(", "prune_mask", ",", "prune_mask_clean", ")", "\n", "\n", "if", "args", ".", "enable_flops", ":", "\n", "# Flop of neuron prune before and after removing redundant params", "\n", "          ", "flops_neuron_prune", ",", "params_neuron_prune", "=", "cal_flops", "(", "net", ",", "prune_mask", ",", "flop_input", ")", "\n", "flops_neuron_prune_clean", ",", "params_neuron_prune_clean", "=", "cal_flops", "(", "net", ",", "prune_mask_clean", ",", "flop_input", ")", "\n", "print", "(", "\"GFlops, neuron prune, original:{:.4f} (param:{:.0f}), pruned:{:.4f} ({:.4f}%, param:{:.0f}),\"", "\n", "\"clean:{:.4f} ({:.4f}%, param:{:.0f}).\\n\"", ".", "format", "(", "flops_no_prune", ",", "params_no_prune", ",", "\n", "flops_neuron_prune", ",", "flops_neuron_prune", "*", "100", "/", "flops_no_prune", ",", "params_neuron_prune", ",", "\n", "flops_neuron_prune_clean", ",", "flops_neuron_prune_clean", "*", "100", "/", "flops_no_prune", ",", "params_neuron_prune_clean", ")", ")", "\n", "\n", "# Case 3: good, but pay attention to acc_mode='max'", "\n", "", "", "if", "args", ".", "enable_channel_prune", ":", "\n", "        ", "prune_mask", "=", "channel_prune", "(", "grads", ",", "channel_sparsity", "=", "args", ".", "channel_sparsity", ",", "\n", "acc_mode", "=", "args", ".", "acc_mode", ",", "norm", "=", "args", ".", "norm", ")", "\n", "prune_mask_clean", "=", "remove_redundant", "(", "prune_mask", ",", "prune_mode", "=", "'channel'", ")", "\n", "do_statistics", "(", "prune_mask", ",", "prune_mask_clean", ")", "\n", "\n", "if", "args", ".", "enable_flops", ":", "\n", "# Flop of channel prune before and after removing redundant params", "\n", "          ", "flops_channel_prune", ",", "params_channel_prune", "=", "cal_flops", "(", "net", ",", "prune_mask", ",", "flop_input", ")", "\n", "flops_channel_prune_clean", ",", "params_channel_prune_clean", "=", "cal_flops", "(", "net", ",", "prune_mask_clean", ",", "flop_input", ")", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_tumor.train.adjust_learning_rate": [[223, 228], ["None"], "function", ["None"], ["\"clean:{:.4f} ({:.4f}%, param:{:.0f}).\\n\"", ".", "format", "(", "flops_no_prune", ",", "params_no_prune", ",", "\n", "flops_channel_prune", ",", "flops_channel_prune", "*", "100", "/", "flops_no_prune", ",", "params_channel_prune", ",", "\n", "flops_channel_prune_clean", ",", "flops_channel_prune_clean", "*", "100", "/", "flops_no_prune", ",", "params_channel_prune_clean", ")", ")", "\n", "\n", "", "", "if", "args", ".", "enable_channel_prune", ":", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_tumor.predict_12.AverageMeter.__init__": [[188, 190], ["predict_12.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.AverageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_tumor.predict_12.AverageMeter.reset": [[191, 196], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_tumor.predict_12.AverageMeter.update": [[197, 202], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_tumor.predict_12.calculate_metrics": [[28, 32], ["medpy.metric.sensitivity", "medpy.metric.specificity", "medpy.metric.dc"], "function", ["None"], ["def", "calculate_metrics", "(", "pred", ",", "target", ")", ":", "\n", "    ", "sens", "=", "metric", ".", "sensitivity", "(", "pred", ",", "target", ")", "\n", "spec", "=", "metric", ".", "specificity", "(", "pred", ",", "target", ")", "\n", "dice", "=", "metric", ".", "dc", "(", "pred", ",", "target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_tumor.predict_12.f1_score": [[34, 38], ["o.sum", "t.sum"], "function", ["None"], ["def", "f1_score", "(", "o", ",", "t", ")", ":", "\n", "    ", "num", "=", "2", "*", "(", "o", "*", "t", ")", ".", "sum", "(", ")", "+", "eps", "\n", "den", "=", "o", ".", "sum", "(", ")", "+", "t", ".", "sum", "(", ")", "+", "eps", "\n", "return", "num", "/", "den", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_tumor.predict_12.dice": [[42, 56], ["predict_12.f1_score", "predict_12.f1_score", "predict_12.f1_score"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.miccai.metrics.f1_score", "home.repos.pwc.inspect_result.zwxu064_RANP.miccai.metrics.f1_score", "home.repos.pwc.inspect_result.zwxu064_RANP.miccai.metrics.f1_score"], ["", "def", "dice", "(", "output", ",", "target", ")", ":", "\n", "    ", "ret", "=", "[", "]", "\n", "# whole", "\n", "o", "=", "output", ">", "0", ";", "t", "=", "target", ">", "0", "\n", "ret", "+=", "f1_score", "(", "o", ",", "t", ")", ",", "\n", "# core", "\n", "o", "=", "(", "output", "==", "1", ")", "|", "(", "output", "==", "4", ")", "\n", "t", "=", "(", "target", "==", "1", ")", "|", "(", "target", "==", "4", ")", "\n", "ret", "+=", "f1_score", "(", "o", ",", "t", ")", ",", "\n", "# active", "\n", "o", "=", "(", "output", "==", "4", ")", ";", "t", "=", "(", "target", "==", "4", ")", "\n", "ret", "+=", "f1_score", "(", "o", ",", "t", ")", ",", "\n", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_tumor.predict_12.main": [[58, 90], ["args.getdir", "getattr", "getattr.", "model.cuda.cuda", "os.path.join", "torch.load", "torch.load", "torch.load", "torch.load", "model.cuda.load_state_dict", "getattr", "os.path.join", "getattr.", "torch.utils.data.DataLoader", "time.time", "logging.info", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "predict_12.validate", "time.time"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.utils.parser.Parser.getdir", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.data.load", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.data.load", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.data.load", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.data.load", "home.repos.pwc.inspect_result.zwxu064_RANP.unet.trainer.UNet3DTrainer.validate"], ["def", "main", "(", ")", ":", "\n", "    ", "ckpts", "=", "args", ".", "getdir", "(", ")", "\n", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", "=", "args", ".", "gpu", "\n", "# setup networks", "\n", "Network", "=", "getattr", "(", "models", ",", "args", ".", "net", ")", "\n", "model", "=", "Network", "(", "**", "args", ".", "net_params", ")", "\n", "model", "=", "model", ".", "cuda", "(", ")", "\n", "\n", "model_file", "=", "os", ".", "path", ".", "join", "(", "ckpts", ",", "args", ".", "ckpt", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "model_file", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "\n", "Dataset", "=", "getattr", "(", "datasets", ",", "args", ".", "dataset", ")", "\n", "\n", "valid_list", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data_dir", ",", "args", ".", "valid_list", ")", "\n", "valid_set", "=", "Dataset", "(", "valid_list", ",", "root", "=", "args", ".", "data_dir", ",", "\n", "for_train", "=", "False", ",", "crop", "=", "False", ",", "return_target", "=", "args", ".", "scoring", ",", "\n", "transforms", "=", "args", ".", "test_transforms", ",", "\n", "sample_size", "=", "args", ".", "sample_size", ",", "sub_sample_size", "=", "args", ".", "sub_sample_size", ",", "\n", "target_size", "=", "args", ".", "target_size", ")", "\n", "valid_loader", "=", "DataLoader", "(", "\n", "valid_set", ",", "batch_size", "=", "1", ",", "shuffle", "=", "False", ",", "\n", "collate_fn", "=", "valid_set", ".", "collate", ",", "\n", "num_workers", "=", "4", ",", "pin_memory", "=", "True", ")", "\n", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "scores", "=", "validate", "(", "valid_loader", ",", "model", ",", "args", ".", "batch_size", ",", "\n", "args", ".", "out_dir", ",", "valid_set", ".", "names", ",", "scoring", "=", "args", ".", "scoring", ")", "\n", "\n", "", "msg", "=", "'total time {:.4f} minutes'", ".", "format", "(", "(", "time", ".", "time", "(", ")", "-", "start", ")", "/", "60", ")", "\n", "logging", ".", "info", "(", "msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_tumor.predict_12.validate": [[92, 184], ["model.eval", "predict_12.AverageMeter", "enumerate", "model.train", "int", "int", "int", "labels.numpy.cuda", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "enumerate", "outputs.argmax.view().permute", "outputs.argmax.reshape", "outputs[].numpy", "str", "logging.info", "t.cuda", "len", "data.data_utils.add_mask", "predict_12.AverageMeter", "coords.split", "multicrop.crop3d_gpu", "multicrop.crop3d_gpu", "model", "torch.softmax", "F.softmax.permute().cpu", "len", "numpy.save", "labels.numpy.numpy", "outputs.argmax.argmax", "predict_12.dice", "predict_12.AverageMeter.update", "logging.info", "data.pop", "multicrop.crop3d_gpu", "criterion", "sample_loss.update", "outputs.argmax.view", "os.path.join", "numpy.array", "F.softmax.permute", "criterion.item", "multicrop.crop3d_gpu.size", "zip", "zip"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.data.train", "home.repos.pwc.inspect_result.zwxu064_RANP.data.data_utils.add_mask", "home.repos.pwc.inspect_result.zwxu064_RANP.miccai.metrics.dice", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.AverageMeter.update", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.AverageMeter.update"], ["", "def", "validate", "(", "valid_loader", ",", "model", ",", "batch_size", ",", "\n", "out_dir", "=", "''", ",", "names", "=", "None", ",", "scoring", "=", "True", ",", "verbose", "=", "True", ")", ":", "\n", "\n", "    ", "H", ",", "W", ",", "T", "=", "240", ",", "240", ",", "155", "\n", "\n", "dset", "=", "valid_loader", ".", "dataset", "\n", "names", "=", "dset", ".", "names", "\n", "h", ",", "w", ",", "t", "=", "dset", ".", "shape", ";", "h", ",", "w", ",", "t", "=", "int", "(", "h", ")", ",", "int", "(", "w", ")", ",", "int", "(", "t", ")", "\n", "sample_size", "=", "dset", ".", "sample_size", "\n", "sub_sample_size", "=", "dset", ".", "sub_sample_size", "\n", "target_size", "=", "dset", ".", "target_size", "\n", "dtype", "=", "torch", ".", "float32", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "criterion", "=", "F", ".", "cross_entropy", "\n", "\n", "vals", "=", "AverageMeter", "(", ")", "\n", "for", "i", ",", "(", "data", ",", "labels", ")", "in", "enumerate", "(", "valid_loader", ")", ":", "\n", "\n", "        ", "y", "=", "labels", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "data", "=", "[", "t", ".", "cuda", "(", "non_blocking", "=", "True", ")", "for", "t", "in", "data", "]", "\n", "x", ",", "coords", "=", "data", "[", ":", "2", "]", "\n", "\n", "if", "len", "(", "data", ")", ">", "2", ":", "# has mask", "\n", "            ", "x", "=", "add_mask", "(", "x", ",", "data", ".", "pop", "(", ")", ",", "0", ")", "\n", "\n", "", "outputs", "=", "torch", ".", "zeros", "(", "(", "5", ",", "h", "*", "w", "*", "t", ",", "target_size", ",", "target_size", ",", "target_size", ")", ",", "dtype", "=", "dtype", ")", "\n", "#targets = torch.zeros((h*w*t, 9, 9, 9), dtype=torch.uint8)", "\n", "\n", "sample_loss", "=", "AverageMeter", "(", ")", "if", "scoring", "and", "criterion", "is", "not", "None", "else", "None", "\n", "\n", "for", "b", ",", "coord", "in", "enumerate", "(", "coords", ".", "split", "(", "batch_size", ")", ")", ":", "\n", "            ", "x1", "=", "multicrop", ".", "crop3d_gpu", "(", "x", ",", "coord", ",", "sample_size", ",", "sample_size", ",", "sample_size", ",", "1", ",", "True", ")", "\n", "x2", "=", "multicrop", ".", "crop3d_gpu", "(", "x", ",", "coord", ",", "sub_sample_size", ",", "sub_sample_size", ",", "sub_sample_size", ",", "3", ",", "True", ")", "\n", "\n", "if", "scoring", ":", "\n", "                ", "target", "=", "multicrop", ".", "crop3d_gpu", "(", "y", ",", "coord", ",", "target_size", ",", "target_size", ",", "target_size", ",", "1", ",", "True", ")", "\n", "\n", "# compute output", "\n", "", "logit", "=", "model", "(", "(", "x1", ",", "x2", ")", ")", "# nx5x9x9x9, target nx9x9x9", "\n", "output", "=", "F", ".", "softmax", "(", "logit", ",", "dim", "=", "1", ")", "\n", "\n", "# copy output", "\n", "start", "=", "b", "*", "batch_size", "\n", "end", "=", "start", "+", "output", ".", "shape", "[", "0", "]", "\n", "outputs", "[", ":", ",", "start", ":", "end", "]", "=", "output", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ",", "4", ")", ".", "cpu", "(", ")", "\n", "\n", "#targets[start:end] = target.type(dtype).cpu()", "\n", "\n", "# measure accuracy and record loss", "\n", "if", "scoring", "and", "criterion", "is", "not", "None", ":", "\n", "                ", "loss", "=", "criterion", "(", "logit", ",", "target", ")", "\n", "sample_loss", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "target", ".", "size", "(", "0", ")", ")", "\n", "\n", "", "", "outputs", "=", "outputs", ".", "view", "(", "5", ",", "h", ",", "w", ",", "t", ",", "12", ",", "12", ",", "12", ")", ".", "permute", "(", "0", ",", "1", ",", "4", ",", "2", ",", "5", ",", "3", ",", "6", ")", "\n", "outputs", "=", "outputs", ".", "reshape", "(", "5", ",", "h", "*", "12", ",", "w", "*", "12", ",", "t", "*", "12", ")", "\n", "outputs", "=", "outputs", "[", ":", ",", ":", "H", ",", ":", "W", ",", ":", "T", "]", ".", "numpy", "(", ")", "\n", "\n", "#targets = targets.view(h, w, t, 9, 9, 9).permute(0, 3, 1, 4, 2, 5).reshape(h*9, w*9, t*9)", "\n", "#targets = targets[:H, :W, :T].numpy()", "\n", "\n", "msg", "=", "'Subject {}/{}, '", ".", "format", "(", "i", "+", "1", ",", "len", "(", "valid_loader", ")", ")", "\n", "name", "=", "str", "(", "i", ")", "\n", "if", "names", ":", "\n", "            ", "name", "=", "names", "[", "i", "]", "\n", "msg", "+=", "'{:>20}, '", ".", "format", "(", "name", ")", "\n", "\n", "", "if", "out_dir", ":", "\n", "            ", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "out_dir", ",", "name", "+", "'_preds'", ")", ",", "outputs", ")", "\n", "\n", "", "if", "scoring", ":", "\n", "            ", "labels", "=", "labels", ".", "numpy", "(", ")", "\n", "outputs", "=", "outputs", ".", "argmax", "(", "0", ")", "\n", "scores", "=", "dice", "(", "outputs", ",", "labels", ")", "\n", "\n", "#if criterion is not None:", "\n", "#    scores += sample_loss.avg,", "\n", "\n", "vals", ".", "update", "(", "np", ".", "array", "(", "scores", ")", ")", "\n", "\n", "msg", "+=", "', '", ".", "join", "(", "[", "'{}: {:.4f}'", ".", "format", "(", "k", ",", "v", ")", "for", "k", ",", "v", "in", "zip", "(", "keys", ",", "scores", ")", "]", ")", "\n", "\n", "", "if", "verbose", ":", "\n", "            ", "logging", ".", "info", "(", "msg", ")", "\n", "\n", "", "", "if", "scoring", ":", "\n", "        ", "msg", "=", "'Average scores: '", "\n", "msg", "+=", "', '", ".", "join", "(", "[", "'{}: {:.4f}'", ".", "format", "(", "k", ",", "v", ")", "for", "k", ",", "v", "in", "zip", "(", "keys", ",", "vals", ".", "avg", ")", "]", ")", "\n", "logging", ".", "info", "(", "msg", ")", "\n", "\n", "", "model", ".", "train", "(", ")", "\n", "return", "vals", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_tumor.predict_6.AverageMeter.__init__": [[188, 190], ["predict_6.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.AverageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_tumor.predict_6.AverageMeter.reset": [[191, 196], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_tumor.predict_6.AverageMeter.update": [[197, 202], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_tumor.predict_6.calculate_metrics": [[28, 32], ["medpy.metric.sensitivity", "medpy.metric.specificity", "medpy.metric.dc"], "function", ["None"], ["def", "calculate_metrics", "(", "pred", ",", "target", ")", ":", "\n", "    ", "sens", "=", "metric", ".", "sensitivity", "(", "pred", ",", "target", ")", "\n", "spec", "=", "metric", ".", "specificity", "(", "pred", ",", "target", ")", "\n", "dice", "=", "metric", ".", "dc", "(", "pred", ",", "target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_tumor.predict_6.f1_score": [[34, 38], ["o.sum", "t.sum"], "function", ["None"], ["def", "f1_score", "(", "o", ",", "t", ")", ":", "\n", "    ", "num", "=", "2", "*", "(", "o", "*", "t", ")", ".", "sum", "(", ")", "+", "eps", "\n", "den", "=", "o", ".", "sum", "(", ")", "+", "t", ".", "sum", "(", ")", "+", "eps", "\n", "return", "num", "/", "den", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_tumor.predict_6.dice": [[42, 56], ["predict_6.f1_score", "predict_6.f1_score", "predict_6.f1_score"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.miccai.metrics.f1_score", "home.repos.pwc.inspect_result.zwxu064_RANP.miccai.metrics.f1_score", "home.repos.pwc.inspect_result.zwxu064_RANP.miccai.metrics.f1_score"], ["", "def", "dice", "(", "output", ",", "target", ")", ":", "\n", "    ", "ret", "=", "[", "]", "\n", "# whole", "\n", "o", "=", "output", ">", "0", ";", "t", "=", "target", ">", "0", "\n", "ret", "+=", "f1_score", "(", "o", ",", "t", ")", ",", "\n", "# core", "\n", "o", "=", "(", "output", "==", "1", ")", "|", "(", "output", "==", "4", ")", "\n", "t", "=", "(", "target", "==", "1", ")", "|", "(", "target", "==", "4", ")", "\n", "ret", "+=", "f1_score", "(", "o", ",", "t", ")", ",", "\n", "# active", "\n", "o", "=", "(", "output", "==", "4", ")", ";", "t", "=", "(", "target", "==", "4", ")", "\n", "ret", "+=", "f1_score", "(", "o", ",", "t", ")", ",", "\n", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_tumor.predict_6.main": [[58, 90], ["args.getdir", "getattr", "getattr.", "model.cuda.cuda", "os.path.join", "torch.load", "torch.load", "torch.load", "torch.load", "model.cuda.load_state_dict", "getattr", "os.path.join", "getattr.", "torch.utils.data.DataLoader", "time.time", "logging.info", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "predict_6.validate", "time.time"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.utils.parser.Parser.getdir", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.data.load", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.data.load", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.data.load", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.data.load", "home.repos.pwc.inspect_result.zwxu064_RANP.unet.trainer.UNet3DTrainer.validate"], ["def", "main", "(", ")", ":", "\n", "    ", "ckpts", "=", "args", ".", "getdir", "(", ")", "\n", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", "=", "args", ".", "gpu", "\n", "# setup networks", "\n", "Network", "=", "getattr", "(", "models", ",", "args", ".", "net", ")", "\n", "model", "=", "Network", "(", "**", "args", ".", "net_params", ")", "\n", "model", "=", "model", ".", "cuda", "(", ")", "\n", "\n", "model_file", "=", "os", ".", "path", ".", "join", "(", "ckpts", ",", "args", ".", "ckpt", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "model_file", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "\n", "Dataset", "=", "getattr", "(", "datasets", ",", "args", ".", "dataset", ")", "\n", "\n", "valid_list", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data_dir", ",", "args", ".", "valid_list", ")", "\n", "valid_set", "=", "Dataset", "(", "valid_list", ",", "root", "=", "args", ".", "data_dir", ",", "\n", "for_train", "=", "False", ",", "crop", "=", "False", ",", "return_target", "=", "args", ".", "scoring", ",", "\n", "transforms", "=", "args", ".", "test_transforms", ",", "\n", "sample_size", "=", "args", ".", "sample_size", ",", "sub_sample_size", "=", "args", ".", "sub_sample_size", ",", "\n", "target_size", "=", "args", ".", "target_size", ")", "\n", "valid_loader", "=", "DataLoader", "(", "\n", "valid_set", ",", "batch_size", "=", "1", ",", "shuffle", "=", "False", ",", "\n", "collate_fn", "=", "valid_set", ".", "collate", ",", "\n", "num_workers", "=", "4", ",", "pin_memory", "=", "True", ")", "\n", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "scores", "=", "validate", "(", "valid_loader", ",", "model", ",", "args", ".", "batch_size", ",", "\n", "args", ".", "out_dir", ",", "valid_set", ".", "names", ",", "scoring", "=", "args", ".", "scoring", ")", "\n", "\n", "", "msg", "=", "'total time {:.4f} minutes'", ".", "format", "(", "(", "time", ".", "time", "(", ")", "-", "start", ")", "/", "60", ")", "\n", "logging", ".", "info", "(", "msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_tumor.predict_6.validate": [[92, 184], ["model.eval", "predict_6.AverageMeter", "enumerate", "model.train", "int", "int", "int", "labels.numpy.cuda", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "enumerate", "outputs.argmax.view().permute", "outputs.argmax.reshape", "outputs[].numpy", "str", "logging.info", "t.cuda", "len", "data.data_utils.add_mask", "predict_6.AverageMeter", "coords.split", "multicrop.crop3d_gpu", "multicrop.crop3d_gpu", "model", "torch.softmax", "F.softmax.permute().cpu", "len", "numpy.save", "labels.numpy.numpy", "outputs.argmax.argmax", "predict_6.dice", "predict_6.AverageMeter.update", "logging.info", "data.pop", "multicrop.crop3d_gpu", "criterion", "sample_loss.update", "outputs.argmax.view", "os.path.join", "numpy.array", "F.softmax.permute", "criterion.item", "multicrop.crop3d_gpu.size", "zip", "zip"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.data.train", "home.repos.pwc.inspect_result.zwxu064_RANP.data.data_utils.add_mask", "home.repos.pwc.inspect_result.zwxu064_RANP.miccai.metrics.dice", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.AverageMeter.update", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.AverageMeter.update"], ["", "def", "validate", "(", "valid_loader", ",", "model", ",", "batch_size", ",", "\n", "out_dir", "=", "''", ",", "names", "=", "None", ",", "scoring", "=", "True", ",", "verbose", "=", "True", ")", ":", "\n", "\n", "    ", "H", ",", "W", ",", "T", "=", "240", ",", "240", ",", "155", "\n", "\n", "dset", "=", "valid_loader", ".", "dataset", "\n", "names", "=", "dset", ".", "names", "\n", "h", ",", "w", ",", "t", "=", "dset", ".", "shape", ";", "h", ",", "w", ",", "t", "=", "int", "(", "h", ")", ",", "int", "(", "w", ")", ",", "int", "(", "t", ")", "\n", "sample_size", "=", "dset", ".", "sample_size", "\n", "sub_sample_size", "=", "dset", ".", "sub_sample_size", "\n", "target_size", "=", "dset", ".", "target_size", "\n", "dtype", "=", "torch", ".", "float32", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "criterion", "=", "F", ".", "cross_entropy", "\n", "\n", "vals", "=", "AverageMeter", "(", ")", "\n", "for", "i", ",", "(", "data", ",", "labels", ")", "in", "enumerate", "(", "valid_loader", ")", ":", "\n", "\n", "        ", "y", "=", "labels", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "data", "=", "[", "t", ".", "cuda", "(", "non_blocking", "=", "True", ")", "for", "t", "in", "data", "]", "\n", "x", ",", "coords", "=", "data", "[", ":", "2", "]", "\n", "\n", "if", "len", "(", "data", ")", ">", "2", ":", "# has mask", "\n", "            ", "x", "=", "add_mask", "(", "x", ",", "data", ".", "pop", "(", ")", ",", "0", ")", "\n", "\n", "", "outputs", "=", "torch", ".", "zeros", "(", "(", "5", ",", "h", "*", "w", "*", "t", ",", "target_size", ",", "target_size", ",", "target_size", ")", ",", "dtype", "=", "dtype", ")", "\n", "#targets = torch.zeros((h*w*t, 9, 9, 9), dtype=torch.uint8)", "\n", "\n", "sample_loss", "=", "AverageMeter", "(", ")", "if", "scoring", "and", "criterion", "is", "not", "None", "else", "None", "\n", "\n", "for", "b", ",", "coord", "in", "enumerate", "(", "coords", ".", "split", "(", "batch_size", ")", ")", ":", "\n", "            ", "x1", "=", "multicrop", ".", "crop3d_gpu", "(", "x", ",", "coord", ",", "sample_size", ",", "sample_size", ",", "sample_size", ",", "1", ",", "True", ")", "\n", "x2", "=", "multicrop", ".", "crop3d_gpu", "(", "x", ",", "coord", ",", "sub_sample_size", ",", "sub_sample_size", ",", "sub_sample_size", ",", "3", ",", "True", ")", "\n", "\n", "if", "scoring", ":", "\n", "                ", "target", "=", "multicrop", ".", "crop3d_gpu", "(", "y", ",", "coord", ",", "target_size", ",", "target_size", ",", "target_size", ",", "1", ",", "True", ")", "\n", "\n", "# compute output", "\n", "", "logit", "=", "model", "(", "(", "x1", ",", "x2", ")", ")", "# nx5x9x9x9, target nx9x9x9", "\n", "output", "=", "F", ".", "softmax", "(", "logit", ",", "dim", "=", "1", ")", "\n", "\n", "# copy output", "\n", "start", "=", "b", "*", "batch_size", "\n", "end", "=", "start", "+", "output", ".", "shape", "[", "0", "]", "\n", "outputs", "[", ":", ",", "start", ":", "end", "]", "=", "output", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ",", "4", ")", ".", "cpu", "(", ")", "\n", "\n", "#targets[start:end] = target.type(dtype).cpu()", "\n", "\n", "# measure accuracy and record loss", "\n", "if", "scoring", "and", "criterion", "is", "not", "None", ":", "\n", "                ", "loss", "=", "criterion", "(", "logit", ",", "target", ")", "\n", "sample_loss", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "target", ".", "size", "(", "0", ")", ")", "\n", "\n", "", "", "outputs", "=", "outputs", ".", "view", "(", "5", ",", "h", ",", "w", ",", "t", ",", "6", ",", "6", ",", "6", ")", ".", "permute", "(", "0", ",", "1", ",", "4", ",", "2", ",", "5", ",", "3", ",", "6", ")", "\n", "outputs", "=", "outputs", ".", "reshape", "(", "5", ",", "h", "*", "6", ",", "w", "*", "6", ",", "t", "*", "6", ")", "\n", "outputs", "=", "outputs", "[", ":", ",", ":", "H", ",", ":", "W", ",", ":", "T", "]", ".", "numpy", "(", ")", "\n", "\n", "#targets = targets.view(h, w, t, 9, 9, 9).permute(0, 3, 1, 4, 2, 5).reshape(h*9, w*9, t*9)", "\n", "#targets = targets[:H, :W, :T].numpy()", "\n", "\n", "msg", "=", "'Subject {}/{}, '", ".", "format", "(", "i", "+", "1", ",", "len", "(", "valid_loader", ")", ")", "\n", "name", "=", "str", "(", "i", ")", "\n", "if", "names", ":", "\n", "            ", "name", "=", "names", "[", "i", "]", "\n", "msg", "+=", "'{:>20}, '", ".", "format", "(", "name", ")", "\n", "\n", "", "if", "out_dir", ":", "\n", "            ", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "out_dir", ",", "name", "+", "'_preds'", ")", ",", "outputs", ")", "\n", "\n", "", "if", "scoring", ":", "\n", "            ", "labels", "=", "labels", ".", "numpy", "(", ")", "\n", "outputs", "=", "outputs", ".", "argmax", "(", "0", ")", "\n", "scores", "=", "dice", "(", "outputs", ",", "labels", ")", "\n", "\n", "#if criterion is not None:", "\n", "#    scores += sample_loss.avg,", "\n", "\n", "vals", ".", "update", "(", "np", ".", "array", "(", "scores", ")", ")", "\n", "\n", "msg", "+=", "', '", ".", "join", "(", "[", "'{}: {:.4f}'", ".", "format", "(", "k", ",", "v", ")", "for", "k", ",", "v", "in", "zip", "(", "keys", ",", "scores", ")", "]", ")", "\n", "\n", "", "if", "verbose", ":", "\n", "            ", "logging", ".", "info", "(", "msg", ")", "\n", "\n", "", "", "if", "scoring", ":", "\n", "        ", "msg", "=", "'Average scores: '", "\n", "msg", "+=", "', '", ".", "join", "(", "[", "'{}: {:.4f}'", ".", "format", "(", "k", ",", "v", ")", "for", "k", ",", "v", "in", "zip", "(", "keys", ",", "vals", ".", "avg", ")", "]", ")", "\n", "logging", ".", "info", "(", "msg", ")", "\n", "\n", "", "model", ".", "train", "(", ")", "\n", "return", "vals", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_tumor.createBrainParcellation.ReadImage": [[9, 12], ["SimpleITK.GetArrayFromImage().astype", "SimpleITK.GetArrayFromImage", "SimpleITK.ReadImage"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_tumor.createBrainParcellation.ReadImage"], ["def", "ReadImage", "(", "file_path", ")", ":", "\n", "    ", "''' This code returns the numpy nd array for a MR image at path'''", "\n", "return", "sitk", ".", "GetArrayFromImage", "(", "sitk", ".", "ReadImage", "(", "file_path", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_tumor.createBrainParcellation.N4ITK": [[13, 20], ["print", "nipype.interfaces.ants.N4BiasFieldCorrection", "nipype.interfaces.ants.N4BiasFieldCorrection.run"], "function", ["None"], ["", "def", "N4ITK", "(", "filepath", ",", "output_name", ")", ":", "\n", "    ", "print", "(", "'N4ITK working on: %s'", "%", "filepath", ")", "\n", "n4", "=", "N4BiasFieldCorrection", "(", ")", "\n", "n4", ".", "inputs", ".", "dimension", "=", "3", "\n", "n4", ".", "inputs", ".", "input_image", "=", "filepath", "\n", "n4", ".", "inputs", ".", "output_image", "=", "output_name", "\n", "n4", ".", "run", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_tumor.createBrainParcellation.RegisterBrain": [[21, 27], ["print", "subprocess.call", "subprocess.call", "print"], "function", ["None"], ["", "def", "RegisterBrain", "(", "t1_path", ",", "ref_path", ",", "subject2mni_mat", ",", "mni2subject_mat", ")", ":", "\n", "    ", "print", "(", "'Working on registration!'", ")", "\n", "# Create the affine transformation matrix from subject space to MNI152 1mm space", "\n", "subprocess", ".", "call", "(", "[", "\"flirt\"", ",", "\"-in\"", ",", "t1_path", ",", "\"-ref\"", ",", "ref_path", ",", "\"-omat\"", ",", "subject2mni_mat", "]", ")", "\n", "subprocess", ".", "call", "(", "[", "\"convert_xfm\"", ",", "\"-omat\"", ",", "mni2subject_mat", ",", "\"-inverse\"", ",", "subject2mni_mat", "]", ")", "\n", "print", "(", "'Finish this subject!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_tumor.createBrainParcellation.RegisterLabels2Subject": [[28, 34], ["range", "len", "os.path.join", "subprocess.call", "str"], "function", ["None"], ["", "def", "RegisterLabels2Subject", "(", "refVol_path", ",", "bp_filepaths", ",", "mni2subject_mat", ",", "temp_dir", ")", ":", "\n", "\t", "''' register indivudial labels from MNI 152 space to subject space '''", "\n", "for", "j", "in", "range", "(", "len", "(", "bp_filepaths", ")", ")", ":", "\n", "\t\t", "label_name", "=", "os", ".", "path", ".", "join", "(", "temp_dir", ",", "\"lab\"", "+", "str", "(", "j", "+", "1", ")", "+", "\".nii.gz\"", ")", "\n", "# Register Brain Labels to Subject Space", "\n", "subprocess", ".", "call", "(", "[", "\"flirt\"", ",", "\"-in\"", ",", "bp_filepaths", "[", "j", "]", ",", "\"-ref\"", ",", "refVol_path", ",", "\"-out\"", ",", "label_name", ",", "\"-init\"", ",", "mni2subject_mat", ",", "\"-applyxfm\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_tumor.createBrainParcellation.SubjectLabels2ParcellationArgmax": [[35, 46], ["print", "numpy.zeros", "SimpleITK.ReadImage", "enumerate", "numpy.argmax", "np.argmax.astype", "SimpleITK.GetImageFromArray", "sitk.GetImageFromArray.CopyInformation", "SimpleITK.WriteImage", "createBrainParcellation.ReadImage", "len"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_tumor.createBrainParcellation.ReadImage", "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_tumor.createBrainParcellation.ReadImage"], ["", "", "def", "SubjectLabels2ParcellationArgmax", "(", "subject_bp_filepaths", ",", "subject_name", ")", ":", "\n", "\t", "print", "(", "'Mapping brain parcellation to subject'", ")", "\n", "subjectBrainParcellations", "=", "np", ".", "zeros", "(", "(", "len", "(", "subject_bp_filepaths", ")", "+", "1", ",", "155", ",", "240", ",", "240", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "img", "=", "sitk", ".", "ReadImage", "(", "subject_bp_filepaths", "[", "0", "]", ")", "\n", "for", "j", ",", "bp", "in", "enumerate", "(", "subject_bp_filepaths", ")", ":", "\n", "\t\t", "subjectBrainParcellations", "[", "j", "+", "1", ",", ":", "]", "=", "ReadImage", "(", "bp", ")", "\n", "", "brainParcellation", "=", "np", ".", "argmax", "(", "subjectBrainParcellations", ",", "axis", "=", "0", ")", "\n", "brainParcellationFloat", "=", "brainParcellation", ".", "astype", "(", "np", ".", "float32", ")", "\n", "brainParcellationFloat_img", "=", "sitk", ".", "GetImageFromArray", "(", "brainParcellationFloat", ")", "\n", "brainParcellationFloat_img", ".", "CopyInformation", "(", "img", ")", "\n", "sitk", ".", "WriteImage", "(", "brainParcellationFloat_img", ",", "subject_name", ")", "\n", "", "def", "Remove", "(", "filepaths", ")", ":", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_tumor.createBrainParcellation.Remove": [[46, 49], ["os.remove"], "function", ["None"], ["", "def", "Remove", "(", "filepaths", ")", ":", "\n", "\t", "for", "file", "in", "filepaths", ":", "\n", "\t\t", "os", ".", "remove", "(", "file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_tumor.prep.nib_load": [[18, 27], ["nibabel.load", "nib.load.get_data", "nib.load.uncache", "os.path.exists", "numpy.array"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.data.load"], ["def", "nib_load", "(", "file_name", ")", ":", "\n", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "file_name", ")", ":", "\n", "        ", "return", "np", ".", "array", "(", "[", "1", "]", ")", "\n", "\n", "", "proxy", "=", "nib", ".", "load", "(", "file_name", ")", "\n", "data", "=", "proxy", ".", "get_data", "(", ")", "\n", "proxy", ".", "uncache", "(", ")", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_tumor.prep.get_dist2center": [[29, 36], ["len", "numpy.zeros", "enumerate"], "function", ["None"], ["", "def", "get_dist2center", "(", "patch_shape", ")", ":", "\n", "    ", "ndim", "=", "len", "(", "patch_shape", ")", "\n", "dist2center", "=", "np", ".", "zeros", "(", "(", "ndim", ",", "2", ")", ",", "dtype", "=", "'int32'", ")", "# from patch boundaries", "\n", "for", "dim", ",", "shape", "in", "enumerate", "(", "patch_shape", ")", ":", "\n", "        ", "dist2center", "[", "dim", "]", "=", "[", "shape", "/", "2", "-", "1", ",", "shape", "/", "2", "]", "if", "shape", "%", "2", "==", "0", "else", "[", "shape", "//", "2", ",", "shape", "//", "2", "]", "\n", "", "return", "dist2center", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_tumor.prep.process": [[38, 124], ["numpy.array", "numpy.stack", "range", "prep.nib_load", "np.stack.sum", "numpy.percentile", "numpy.percentile", "y.mean", "y.std", "open", "pickle.dump", "prep.get_dist2center", "numpy.zeros", "numpy.stack().T.astype", "numpy.stack().T.astype", "numpy.array", "open", "pickle.dump", "prep.nib_load", "numpy.stack", "numpy.stack", "np.stack().T.astype.nonzero", "np.stack().T.astype.nonzero"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.data.parcellation.nib_load", "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_tumor.prep.get_dist2center", "home.repos.pwc.inspect_result.zwxu064_RANP.data.parcellation.nib_load"], ["", "def", "process", "(", "path", ",", "has_label", "=", "True", ")", ":", "\n", "    ", "label", "=", "np", ".", "array", "(", "\n", "nib_load", "(", "path", "+", "'seg.nii.gz'", ")", ",", "dtype", "=", "'uint8'", ",", "order", "=", "'C'", ")", "\n", "\n", "images", "=", "np", ".", "stack", "(", "[", "\n", "np", ".", "array", "(", "nib_load", "(", "path", "+", "modal", "+", "'.nii.gz'", ")", ",", "dtype", "=", "'float32'", ",", "order", "=", "'C'", ")", "\n", "for", "modal", "in", "modalities", "]", ",", "-", "1", ")", "\n", "\n", "mask", "=", "images", ".", "sum", "(", "-", "1", ")", ">", "0", "\n", "\n", "for", "k", "in", "range", "(", "4", ")", ":", "\n", "        ", "x", "=", "images", "[", "...", ",", "k", "]", "\n", "y", "=", "x", "[", "mask", "]", "\n", "lower", "=", "np", ".", "percentile", "(", "y", ",", "0.2", ")", "\n", "upper", "=", "np", ".", "percentile", "(", "y", ",", "99.8", ")", "\n", "x", "[", "mask", "&", "(", "x", "<", "lower", ")", "]", "=", "lower", "\n", "x", "[", "mask", "&", "(", "x", ">", "upper", ")", "]", "=", "upper", "\n", "\n", "y", "=", "x", "[", "mask", "]", "\n", "\n", "# 0.8885", "\n", "#x[mask] -= y.mean()", "\n", "#x[mask] /= y.std()", "\n", "\n", "# 0.909", "\n", "x", "-=", "y", ".", "mean", "(", ")", "\n", "x", "/=", "y", ".", "std", "(", ")", "\n", "\n", "#0.8704", "\n", "#x /= y.mean()", "\n", "\n", "images", "[", "...", ",", "k", "]", "=", "x", "\n", "\n", "#return images, label", "\n", "\n", "#output = path + 'data_f32_divm.pkl'", "\n", "", "output", "=", "path", "+", "'data_f32.pkl'", "\n", "with", "open", "(", "output", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "(", "images", ",", "label", ")", ",", "f", ")", "\n", "\n", "#mean, std = [], []", "\n", "#for k in range(4):", "\n", "#    x = images[..., k]", "\n", "#    y = x[mask]", "\n", "#    lower = np.percentile(y, 0.2)", "\n", "#    upper = np.percentile(y, 99.8)", "\n", "#    x[mask & (x < lower)] = lower", "\n", "#    x[mask & (x > upper)] = upper", "\n", "\n", "#    y = x[mask]", "\n", "\n", "#    mean.append(y.mean())", "\n", "#    std.append(y.std())", "\n", "\n", "#    images[..., k] = x", "\n", "#path = '/home/thuyen/FastData/'", "\n", "#output = path + 'data_i16.pkl'", "\n", "#with open(output, 'wb') as f:", "\n", "#    pickle.dump((images, mask, mean, std, label), f)", "\n", "\n", "", "if", "not", "has_label", ":", "\n", "        ", "return", "\n", "\n", "", "for", "patch_shape", "in", "patch_shapes", ":", "\n", "        ", "dist2center", "=", "get_dist2center", "(", "patch_shape", ")", "\n", "\n", "sx", ",", "sy", ",", "sz", "=", "dist2center", "[", ":", ",", "0", "]", "# left-most boundary", "\n", "ex", ",", "ey", ",", "ez", "=", "mask", ".", "shape", "-", "dist2center", "[", ":", ",", "1", "]", "# right-most boundary", "\n", "shape", "=", "mask", ".", "shape", "\n", "maps", "=", "np", ".", "zeros", "(", "shape", ",", "dtype", "=", "\"int16\"", ")", "\n", "maps", "[", "sx", ":", "ex", ",", "sy", ":", "ey", ",", "sz", ":", "ez", "]", "=", "1", "\n", "\n", "fg", "=", "(", "label", ">", "0", ")", ".", "astype", "(", "'int16'", ")", "\n", "bg", "=", "(", "(", "mask", ">", "0", ")", "*", "(", "fg", "==", "0", ")", ")", ".", "astype", "(", "'int16'", ")", "\n", "\n", "fg", "=", "fg", "*", "maps", "\n", "bg", "=", "bg", "*", "maps", "\n", "\n", "fg", "=", "np", ".", "stack", "(", "fg", ".", "nonzero", "(", ")", ")", ".", "T", ".", "astype", "(", "'uint8'", ")", "\n", "bg", "=", "np", ".", "stack", "(", "bg", ".", "nonzero", "(", ")", ")", ".", "T", ".", "astype", "(", "'uint8'", ")", "\n", "\n", "suffix", "=", "'{}x{}x{}_'", ".", "format", "(", "*", "patch_shape", ")", "\n", "\n", "output", "=", "path", "+", "suffix", "+", "'coords.pkl'", "\n", "with", "open", "(", "output", ",", "'wb'", ")", "as", "f", ":", "\n", "            ", "pickle", ".", "dump", "(", "(", "fg", ",", "bg", ")", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_tumor.prep.doit": [[127, 135], ["os.path.join", "open().read().splitlines", "os.path.join", "prep.process", "open().read", "sub.split", "zip", "open"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_tumor.prep.process"], ["", "", "", "def", "doit", "(", "dset", ")", ":", "\n", "    ", "root", ",", "has_label", "=", "dset", "[", "'root'", "]", ",", "dset", "[", "'has_label'", "]", "\n", "file_list", "=", "os", ".", "path", ".", "join", "(", "root", ",", "dset", "[", "'flist'", "]", ")", "\n", "subjects", "=", "open", "(", "file_list", ")", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "names", "=", "[", "sub", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "for", "sub", "in", "subjects", "]", "\n", "paths", "=", "[", "os", ".", "path", ".", "join", "(", "root", ",", "sub", ",", "name", "+", "'_'", ")", "for", "sub", ",", "name", "in", "zip", "(", "subjects", ",", "names", ")", "]", "\n", "for", "path", "in", "paths", ":", "\n", "        ", "process", "(", "path", ",", "has_label", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_tumor.predict_unet.AverageMeter.__init__": [[167, 169], ["predict_unet.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.AverageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_tumor.predict_unet.AverageMeter.reset": [[170, 175], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_tumor.predict_unet.AverageMeter.update": [[176, 181], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_tumor.predict_unet.calculate_metrics": [[28, 32], ["medpy.metric.sensitivity", "medpy.metric.specificity", "medpy.metric.dc"], "function", ["None"], ["def", "calculate_metrics", "(", "pred", ",", "target", ")", ":", "\n", "    ", "sens", "=", "metric", ".", "sensitivity", "(", "pred", ",", "target", ")", "\n", "spec", "=", "metric", ".", "specificity", "(", "pred", ",", "target", ")", "\n", "dice", "=", "metric", ".", "dc", "(", "pred", ",", "target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_tumor.predict_unet.f1_score": [[34, 38], ["o.sum", "t.sum"], "function", ["None"], ["def", "f1_score", "(", "o", ",", "t", ")", ":", "\n", "    ", "num", "=", "2", "*", "(", "o", "*", "t", ")", ".", "sum", "(", ")", "+", "eps", "\n", "den", "=", "o", ".", "sum", "(", ")", "+", "t", ".", "sum", "(", ")", "+", "eps", "\n", "return", "num", "/", "den", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_tumor.predict_unet.dice": [[43, 57], ["predict_unet.f1_score", "predict_unet.f1_score", "predict_unet.f1_score"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.miccai.metrics.f1_score", "home.repos.pwc.inspect_result.zwxu064_RANP.miccai.metrics.f1_score", "home.repos.pwc.inspect_result.zwxu064_RANP.miccai.metrics.f1_score"], ["", "def", "dice", "(", "output", ",", "target", ")", ":", "\n", "    ", "ret", "=", "[", "]", "\n", "# whole", "\n", "o", "=", "output", ">", "0", ";", "t", "=", "target", ">", "0", "\n", "ret", "+=", "f1_score", "(", "o", ",", "t", ")", ",", "\n", "# core", "\n", "o", "=", "(", "output", "==", "1", ")", "|", "(", "output", "==", "4", ")", "\n", "t", "=", "(", "target", "==", "1", ")", "|", "(", "target", "==", "4", ")", "\n", "ret", "+=", "f1_score", "(", "o", ",", "t", ")", ",", "\n", "# active", "\n", "o", "=", "(", "output", "==", "4", ")", ";", "t", "=", "(", "target", "==", "4", ")", "\n", "ret", "+=", "f1_score", "(", "o", ",", "t", ")", ",", "\n", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_tumor.predict_unet.main": [[59, 90], ["args.getdir", "getattr", "getattr.", "model.cuda.cuda", "os.path.join", "torch.load", "torch.load", "torch.load", "torch.load", "model.cuda.load_state_dict", "getattr", "os.path.join", "getattr.", "torch.utils.data.DataLoader", "time.time", "logging.info", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "predict_unet.validate", "time.time"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.utils.parser.Parser.getdir", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.data.load", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.data.load", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.data.load", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.data.load", "home.repos.pwc.inspect_result.zwxu064_RANP.unet.trainer.UNet3DTrainer.validate"], ["def", "main", "(", ")", ":", "\n", "    ", "ckpts", "=", "args", ".", "getdir", "(", ")", "\n", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", "=", "\"2,3\"", "\n", "# setup networks", "\n", "Network", "=", "getattr", "(", "models", ",", "args", ".", "net", ")", "\n", "model", "=", "Network", "(", "**", "args", ".", "net_params", ")", "\n", "model", "=", "model", ".", "cuda", "(", ")", "\n", "\n", "model_file", "=", "os", ".", "path", ".", "join", "(", "ckpts", ",", "args", ".", "ckpt", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "model_file", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "\n", "Dataset", "=", "getattr", "(", "datasets", ",", "args", ".", "dataset", ")", "\n", "\n", "valid_list", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data_dir", ",", "args", ".", "valid_list", ")", "\n", "valid_set", "=", "Dataset", "(", "valid_list", ",", "root", "=", "args", ".", "data_dir", ",", "\n", "for_train", "=", "False", ",", "return_target", "=", "args", ".", "scoring", ",", "\n", "transforms", "=", "args", ".", "test_transforms", ")", "\n", "valid_loader", "=", "DataLoader", "(", "\n", "valid_set", ",", "\n", "batch_size", "=", "1", ",", "shuffle", "=", "False", ",", "\n", "collate_fn", "=", "valid_set", ".", "collate", ",", "\n", "num_workers", "=", "4", ",", "pin_memory", "=", "True", ")", "\n", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "scores", "=", "validate", "(", "valid_loader", ",", "model", ",", "\n", "args", ".", "out_dir", ",", "valid_set", ".", "names", ",", "scoring", "=", "args", ".", "scoring", ")", "\n", "\n", "", "msg", "=", "'total time {:.4f} minutes'", ".", "format", "(", "(", "time", ".", "time", "(", ")", "-", "start", ")", "/", "60", ")", "\n", "logging", ".", "info", "(", "msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_tumor.predict_unet.validate": [[92, 163], ["model.eval", "predict_unet.AverageMeter", "enumerate", "model.train", "model", "torch.softmax", "output[].cpu().numpy", "str", "logging.info", "len", "numpy.save", "output.argmax.argmax", "predict_unet.dice", "predict_unet.AverageMeter.update", "logging.info", "[].numpy", "x.cuda", "target.cuda", "[].numpy", "data[].squeeze", "output[].cpu", "os.path.join", "numpy.array", "x.cuda", "target.cuda", "zip", "zip"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.data.train", "home.repos.pwc.inspect_result.zwxu064_RANP.miccai.metrics.dice", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.AverageMeter.update"], ["", "def", "validate", "(", "valid_loader", ",", "model", ",", "out_dir", "=", "''", ",", "names", "=", "None", ",", "scoring", "=", "True", ",", "verbose", "=", "True", ",", "enable_org", "=", "True", ")", ":", "\n", "\n", "    ", "H", ",", "W", ",", "T", "=", "240", ",", "240", ",", "155", "\n", "dtype", "=", "torch", ".", "float32", "\n", "\n", "dset", "=", "valid_loader", ".", "dataset", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "criterion", "=", "F", ".", "cross_entropy", "\n", "\n", "vals", "=", "AverageMeter", "(", ")", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "valid_loader", ")", ":", "\n", "\n", "        ", "if", "enable_org", ":", "\n", "            ", "target_cpu", "=", "data", "[", "1", "]", "[", "0", ",", ":", "H", ",", ":", "W", ",", ":", "T", "]", ".", "numpy", "(", ")", "if", "scoring", "else", "None", "\n", "# data = [t.cuda(non_blocking=True) for t in data]", "\n", "\n", "x", ",", "target", "=", "data", "[", ":", "2", "]", "\n", "# name = data[2]", "\n", "x", ",", "target", "=", "x", ".", "cuda", "(", ")", ",", "target", ".", "cuda", "(", ")", "\n", "\n", "# if len(data) > 2:", "\n", "#     x = add_mask(x, data.pop(), 1)", "\n", "# print('==> Valid, name: {}, data: {}, gt: {}'.format(name, x.size(), target.size()))", "\n", "", "else", ":", "\n", "            ", "target_cpu", "=", "data", "[", "'y'", "]", "[", "0", ",", "0", ",", ":", "H", ",", ":", "W", ",", ":", "T", "]", ".", "numpy", "(", ")", "if", "scoring", "else", "None", "\n", "x", ",", "target", "=", "data", "[", "'x'", "]", ",", "data", "[", "'y'", "]", ".", "squeeze", "(", "1", ")", "\n", "if", "True", ":", "\n", "                ", "x", ",", "target", "=", "x", ".", "cuda", "(", ")", ",", "target", ".", "cuda", "(", ")", "\n", "\n", "# compute output", "\n", "", "", "logit", "=", "model", "(", "x", ")", "# nx5x9x9x9, target nx9x9x9", "\n", "output", "=", "F", ".", "softmax", "(", "logit", ",", "dim", "=", "1", ")", "# nx5x9x9x9", "\n", "\n", "## measure accuracy and record loss", "\n", "#loss = None", "\n", "#if scoring and criterion is not None:", "\n", "#    loss = criterion(logit, target).item()", "\n", "\n", "output", "=", "output", "[", "0", ",", ":", ",", ":", "H", ",", ":", "W", ",", ":", "T", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "msg", "=", "'Subject {}/{}, '", ".", "format", "(", "i", "+", "1", ",", "len", "(", "valid_loader", ")", ")", "\n", "name", "=", "str", "(", "i", ")", "\n", "if", "names", ":", "\n", "            ", "name", "=", "names", "[", "i", "]", "\n", "msg", "+=", "'{:>20}, '", ".", "format", "(", "name", ")", "\n", "\n", "", "if", "out_dir", ":", "\n", "            ", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "out_dir", ",", "name", "+", "'_preds'", ")", ",", "output", ")", "\n", "\n", "", "if", "scoring", ":", "\n", "            ", "output", "=", "output", ".", "argmax", "(", "0", ")", "\n", "scores", "=", "dice", "(", "output", ",", "target_cpu", ")", "\n", "\n", "#if loss is not None:", "\n", "#    scores += loss,", "\n", "\n", "vals", ".", "update", "(", "np", ".", "array", "(", "scores", ")", ")", "\n", "\n", "msg", "+=", "', '", ".", "join", "(", "[", "'{}: {:.4f}'", ".", "format", "(", "k", ",", "v", ")", "for", "k", ",", "v", "in", "zip", "(", "keys", ",", "scores", ")", "]", ")", "\n", "\n", "", "if", "verbose", ":", "\n", "            ", "logging", ".", "info", "(", "msg", ")", "\n", "\n", "", "", "if", "scoring", ":", "\n", "        ", "msg", "=", "'Average scores: '", "\n", "msg", "+=", "', '", ".", "join", "(", "[", "'{}: {:.4f}'", ".", "format", "(", "k", ",", "v", ")", "for", "k", ",", "v", "in", "zip", "(", "keys", ",", "vals", ".", "avg", ")", "]", ")", "\n", "logging", ".", "info", "(", "msg", ")", "\n", "\n", "", "model", ".", "train", "(", ")", "\n", "return", "vals", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_tumor.train_12.main": [[52, 220], ["torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "random.seed", "numpy.random.seed", "getattr", "getattr.", "model.cuda.cuda", "getattr", "logging.info", "getattr", "os.path.join", "getattr.", "data.sampler.CycleSampler", "torch.utils.data.DataLoader", "time.time", "int", "int", "predict_12.AverageMeter", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "enumerate", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "logging.info", "getattr", "model.cuda.parameters", "os.path.isfile", "str", "len", "os.path.join", "getattr.", "torch.utils.data.DataLoader", "getattr.", "torch.utils.data.DataLoader", "len", "float", "int", "train_12.adjust_learning_rate", "zip", "logging.info", "predict_12.AverageMeter.reset", "logging.info", "logging.info", "print", "torch.load", "torch.load", "torch.load", "torch.load", "model.cuda.load_state_dict", "optimizer.load_state_dict", "args.schedule.items", "model.cuda.", "getattr.", "predict_12.AverageMeter.update", "optimizer.zero_grad", "criterion.backward", "optimizer.step", "int", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "model.cuda.state_dict", "optimizer.state_dict", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "predict_12.validate", "len", "t.cuda", "len", "data.data_utils.add_mask", "data.data_utils.add_mask", "criterion.item", "target.numel", "time.time", "d.split", "model.cuda.state_dict", "optimizer.state_dict"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.adjust_learning_rate", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.AverageMeter.reset", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.data.load", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.data.load", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.data.load", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.data.load", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.AverageMeter.update", "home.repos.pwc.inspect_result.zwxu064_RANP.unet.trainer.UNet3DTrainer.validate", "home.repos.pwc.inspect_result.zwxu064_RANP.data.data_utils.add_mask", "home.repos.pwc.inspect_result.zwxu064_RANP.data.data_utils.add_mask"], ["", "def", "main", "(", ")", ":", "\n", "# setup environments and seeds", "\n", "    ", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", "=", "args", ".", "gpu", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "\n", "# setup networks", "\n", "Network", "=", "getattr", "(", "models", ",", "args", ".", "net", ")", "\n", "model", "=", "Network", "(", "**", "args", ".", "net_params", ")", "\n", "model", "=", "model", ".", "cuda", "(", ")", "\n", "\n", "optimizer", "=", "getattr", "(", "torch", ".", "optim", ",", "args", ".", "opt", ")", "(", "\n", "model", ".", "parameters", "(", ")", ",", "**", "args", ".", "opt_params", ")", "\n", "criterion", "=", "getattr", "(", "criterions", ",", "args", ".", "criterion", ")", "\n", "\n", "msg", "=", "''", "\n", "# optionally resume from a checkpoint", "\n", "if", "args", ".", "resume", ":", "\n", "        ", "if", "os", ".", "path", ".", "isfile", "(", "args", ".", "resume", ")", ":", "\n", "            ", "print", "(", "\"=> loading checkpoint '{}'\"", ".", "format", "(", "args", ".", "resume", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "resume", ")", "\n", "args", ".", "start_iter", "=", "checkpoint", "[", "'iter'", "]", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optim_dict'", "]", ")", "\n", "msg", "=", "(", "\"=> loaded checkpoint '{}' (iter {})\"", "\n", ".", "format", "(", "args", ".", "resume", ",", "checkpoint", "[", "'iter'", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "msg", "=", "\"=> no checkpoint found at '{}'\"", ".", "format", "(", "args", ".", "resume", ")", "\n", "", "", "else", ":", "\n", "        ", "msg", "=", "'-------------- New training session ----------------'", "\n", "\n", "", "msg", "+=", "'\\n'", "+", "str", "(", "args", ")", "\n", "logging", ".", "info", "(", "msg", ")", "\n", "\n", "# Data loading code", "\n", "Dataset", "=", "getattr", "(", "datasets", ",", "args", ".", "dataset", ")", "\n", "\n", "# The loader will get 1000 patches from 50 subjects for each sub epoch", "\n", "# each subject sample 20 patches", "\n", "train_list", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data_dir", ",", "args", ".", "train_list", ")", "\n", "train_set", "=", "Dataset", "(", "train_list", ",", "root", "=", "args", ".", "data_dir", ",", "\n", "for_train", "=", "True", ",", "num_patches", "=", "args", ".", "num_patches", ",", "\n", "transforms", "=", "args", ".", "train_transforms", ",", "\n", "sample_size", "=", "args", ".", "sample_size", ",", "sub_sample_size", "=", "args", ".", "sub_sample_size", ",", "\n", "target_size", "=", "args", ".", "target_size", ")", "\n", "\n", "\n", "num_iters", "=", "args", ".", "num_iters", "or", "(", "len", "(", "train_set", ")", "*", "args", ".", "num_epochs", ")", "//", "args", ".", "batch_size", "\n", "num_iters", "-=", "args", ".", "start_iter", "\n", "train_sampler", "=", "CycleSampler", "(", "len", "(", "train_set", ")", ",", "num_iters", "*", "args", ".", "batch_size", ")", "\n", "train_loader", "=", "DataLoader", "(", "\n", "train_set", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "collate_fn", "=", "train_set", ".", "collate", ",", "sampler", "=", "train_sampler", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ",", "worker_init_fn", "=", "init_fn", ")", "\n", "\n", "if", "args", ".", "valid_list", ":", "\n", "        ", "valid_list", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data_dir", ",", "args", ".", "valid_list", ")", "\n", "valid_set", "=", "Dataset", "(", "valid_list", ",", "root", "=", "args", ".", "data_dir", ",", "\n", "for_train", "=", "False", ",", "crop", "=", "False", ",", "\n", "transforms", "=", "args", ".", "test_transforms", ",", "\n", "sample_size", "=", "args", ".", "sample_size", ",", "sub_sample_size", "=", "args", ".", "sub_sample_size", ",", "\n", "target_size", "=", "args", ".", "target_size", ")", "\n", "valid_loader", "=", "DataLoader", "(", "\n", "valid_set", ",", "batch_size", "=", "1", ",", "shuffle", "=", "False", ",", "\n", "collate_fn", "=", "valid_set", ".", "collate", ",", "\n", "num_workers", "=", "4", ",", "pin_memory", "=", "True", ")", "\n", "\n", "train_valid_set", "=", "Dataset", "(", "train_list", ",", "root", "=", "args", ".", "data_dir", ",", "\n", "for_train", "=", "False", ",", "crop", "=", "False", ",", "\n", "transforms", "=", "args", ".", "test_transforms", ",", "\n", "sample_size", "=", "args", ".", "sample_size", ",", "sub_sample_size", "=", "args", ".", "sub_sample_size", ",", "\n", "target_size", "=", "args", ".", "target_size", ")", "\n", "train_valid_loader", "=", "DataLoader", "(", "\n", "train_valid_set", ",", "batch_size", "=", "1", ",", "shuffle", "=", "False", ",", "\n", "collate_fn", "=", "train_valid_set", ".", "collate", ",", "\n", "num_workers", "=", "4", ",", "pin_memory", "=", "True", ")", "\n", "\n", "", "start", "=", "time", ".", "time", "(", ")", "\n", "\n", "enum_batches", "=", "len", "(", "train_set", ")", "/", "float", "(", "args", ".", "batch_size", ")", "\n", "args", ".", "schedule", "=", "{", "int", "(", "k", "*", "enum_batches", ")", ":", "v", "for", "k", ",", "v", "in", "args", ".", "schedule", ".", "items", "(", ")", "}", "\n", "args", ".", "save_freq", "=", "int", "(", "enum_batches", "*", "args", ".", "save_freq", ")", "\n", "args", ".", "valid_freq", "=", "int", "(", "enum_batches", "*", "args", ".", "valid_freq", ")", "\n", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "torch", ".", "set_grad_enabled", "(", "True", ")", "\n", "\n", "for", "i", ",", "(", "data", ",", "label", ")", "in", "enumerate", "(", "train_loader", ",", "args", ".", "start_iter", ")", ":", "\n", "\n", "## validation", "\n", "#if args.valid_list and  (i % args.valid_freq) == 0:", "\n", "#    logging.info('-'*50)", "\n", "#    msg  =  'Iter {}, Epoch {:.4f}, {}'.format(i, i/enum_batches, 'validation')", "\n", "#    logging.info(msg)", "\n", "#    with torch.no_grad():", "\n", "#        validate(valid_loader, model, batch_size=args.mini_batch_size, names=valid_set.names)", "\n", "\n", "# actual training", "\n", "        ", "adjust_learning_rate", "(", "optimizer", ",", "i", ")", "\n", "for", "data", "in", "zip", "(", "*", "[", "d", ".", "split", "(", "args", ".", "mini_batch_size", ")", "for", "d", "in", "data", "]", ")", ":", "\n", "\n", "            ", "data", "=", "[", "t", ".", "cuda", "(", "non_blocking", "=", "True", ")", "for", "t", "in", "data", "]", "\n", "x1", ",", "x2", ",", "target", "=", "data", "[", ":", "3", "]", "\n", "\n", "if", "len", "(", "data", ")", ">", "3", ":", "# has mask", "\n", "                ", "m1", ",", "m2", "=", "data", "[", "3", ":", "]", "\n", "x1", "=", "add_mask", "(", "x1", ",", "m1", ",", "1", ")", "\n", "x2", "=", "add_mask", "(", "x2", ",", "m2", ",", "1", ")", "\n", "\n", "\n", "# compute output", "\n", "", "output", "=", "model", "(", "(", "x1", ",", "x2", ")", ")", "# output nx5x9x9x9, target nx9x9x9", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ",", "args", ".", "alpha", ")", "\n", "\n", "# measure accuracy and record loss", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "target", ".", "numel", "(", ")", ")", "\n", "\n", "# compute gradient and do SGD step", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "if", "(", "i", "+", "1", ")", "%", "args", ".", "save_freq", "==", "0", ":", "\n", "            ", "epoch", "=", "int", "(", "(", "i", "+", "1", ")", "//", "enum_batches", ")", "\n", "\n", "file_name", "=", "os", ".", "path", ".", "join", "(", "ckpts", ",", "'model_epoch_{}.tar'", ".", "format", "(", "epoch", ")", ")", "\n", "torch", ".", "save", "(", "{", "\n", "'iter'", ":", "i", "+", "1", ",", "\n", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'optim_dict'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "}", ",", "\n", "file_name", ")", "\n", "\n", "", "msg", "=", "'Iter {0:}, Epoch {1:.4f}, Loss {2:.4f}'", ".", "format", "(", "\n", "i", "+", "1", ",", "(", "i", "+", "1", ")", "/", "enum_batches", ",", "losses", ".", "avg", ")", "\n", "logging", ".", "info", "(", "msg", ")", "\n", "\n", "losses", ".", "reset", "(", ")", "\n", "\n", "", "i", "=", "num_iters", "+", "args", ".", "start_iter", "\n", "file_name", "=", "os", ".", "path", ".", "join", "(", "ckpts", ",", "'model_last.tar'", ")", "\n", "torch", ".", "save", "(", "{", "\n", "'iter'", ":", "i", ",", "\n", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'optim_dict'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "}", ",", "\n", "file_name", ")", "\n", "\n", "if", "args", ".", "valid_list", ":", "\n", "        ", "logging", ".", "info", "(", "'-'", "*", "50", ")", "\n", "msg", "=", "'Iter {}, Epoch {:.4f}, {}'", ".", "format", "(", "i", ",", "i", "/", "enum_batches", ",", "'validate validation data'", ")", "\n", "logging", ".", "info", "(", "msg", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "validate", "(", "valid_loader", ",", "model", ",", "batch_size", "=", "args", ".", "mini_batch_size", ",", "names", "=", "valid_set", ".", "names", ",", "out_dir", "=", "args", ".", "out", ")", "\n", "\n", "#logging.info('-'*50)", "\n", "#msg  =  'Iter {}, Epoch {:.4f}, {}'.format(i, i/enum_batches, 'validate training data')", "\n", "#logging.info(msg)", "\n", "\n", "#with torch.no_grad():", "\n", "#    validate(train_valid_loader, model, batch_size=args.mini_batch_size, names=train_valid_set.names, verbose=False)", "\n", "\n", "", "", "msg", "=", "'total time: {:.4f} minutes'", ".", "format", "(", "(", "time", ".", "time", "(", ")", "-", "start", ")", "/", "60", ")", "\n", "logging", ".", "info", "(", "msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_tumor.train_12.adjust_learning_rate": [[222, 227], ["None"], "function", ["None"], ["", "def", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ")", ":", "\n", "# reduce learning rate by a factor of 10", "\n", "    ", "if", "epoch", "+", "1", "in", "args", ".", "schedule", ":", "\n", "        ", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "*=", "0.1", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.data.tf_utils.generate_elastic_transform_coordinates": [[23, 32], ["len", "range", "tuple", "numpy.meshgrid", "offsets.append", "numpy.reshape", "numpy.arange", "zip", "scipy.ndimage.filters.gaussian_filter", "numpy.random.random"], "function", ["None"], ["def", "generate_elastic_transform_coordinates", "(", "shape", ",", "alpha", ",", "sigma", ")", ":", "\n", "    ", "n_dim", "=", "len", "(", "shape", ")", "\n", "offsets", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "n_dim", ")", ":", "\n", "        ", "offsets", ".", "append", "(", "gaussian_filter", "(", "(", "np", ".", "random", ".", "random", "(", "shape", ")", "*", "2", "-", "1", ")", ",", "sigma", ",", "mode", "=", "\"constant\"", ",", "cval", "=", "0", ")", "*", "alpha", ")", "\n", "", "tmp", "=", "tuple", "(", "[", "np", ".", "arange", "(", "i", ")", "for", "i", "in", "shape", "]", ")", "\n", "coords", "=", "np", ".", "meshgrid", "(", "*", "tmp", ",", "indexing", "=", "'ij'", ")", "\n", "indices", "=", "[", "np", ".", "reshape", "(", "i", "+", "j", ",", "(", "-", "1", ",", "1", ")", ")", "for", "i", ",", "j", "in", "zip", "(", "offsets", ",", "coords", ")", "]", "\n", "return", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.data.tf_utils.create_zero_centered_coordinate_mesh": [[34, 40], ["tuple", "numpy.array().astype", "range", "len", "numpy.arange", "numpy.array", "numpy.meshgrid", "numpy.array().astype", "numpy.array"], "function", ["None"], ["", "def", "create_zero_centered_coordinate_mesh", "(", "shape", ")", ":", "\n", "    ", "tmp", "=", "tuple", "(", "[", "np", ".", "arange", "(", "i", ")", "for", "i", "in", "shape", "]", ")", "\n", "coords", "=", "np", ".", "array", "(", "np", ".", "meshgrid", "(", "*", "tmp", ",", "indexing", "=", "'ij'", ")", ")", ".", "astype", "(", "float", ")", "\n", "for", "d", "in", "range", "(", "len", "(", "shape", ")", ")", ":", "\n", "        ", "coords", "[", "d", "]", "-=", "(", "(", "np", ".", "array", "(", "shape", ")", ".", "astype", "(", "float", ")", "-", "1", ")", "/", "2.", ")", "[", "d", "]", "\n", "", "return", "coords", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.data.tf_utils.elastic_deform_coordinates": [[42, 51], ["len", "range", "numpy.array", "np.array.append", "scipy.ndimage.filters.gaussian_filter", "numpy.random.random"], "function", ["None"], ["", "def", "elastic_deform_coordinates", "(", "coordinates", ",", "alpha", ",", "sigma", ")", ":", "\n", "    ", "n_dim", "=", "len", "(", "coordinates", ")", "\n", "offsets", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "n_dim", ")", ":", "\n", "        ", "offsets", ".", "append", "(", "\n", "gaussian_filter", "(", "(", "np", ".", "random", ".", "random", "(", "coordinates", ".", "shape", "[", "1", ":", "]", ")", "*", "2", "-", "1", ")", ",", "sigma", ",", "mode", "=", "\"constant\"", ",", "cval", "=", "0", ")", "*", "alpha", ")", "\n", "", "offsets", "=", "np", ".", "array", "(", "offsets", ")", "\n", "indices", "=", "offsets", "+", "coordinates", "\n", "return", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.data.tf_utils.rotate_coords_3d": [[53, 60], ["numpy.identity", "create_matrix_rotation_x_3d", "create_matrix_rotation_y_3d", "create_matrix_rotation_z_3d", "numpy.dot().transpose().reshape", "len", "numpy.dot().transpose", "numpy.dot", "np.dot().transpose().reshape.reshape().transpose", "np.dot().transpose().reshape.reshape", "len"], "function", ["None"], ["", "def", "rotate_coords_3d", "(", "coords", ",", "angle_x", ",", "angle_y", ",", "angle_z", ")", ":", "\n", "    ", "rot_matrix", "=", "np", ".", "identity", "(", "len", "(", "coords", ")", ")", "\n", "rot_matrix", "=", "create_matrix_rotation_x_3d", "(", "angle_x", ",", "rot_matrix", ")", "\n", "rot_matrix", "=", "create_matrix_rotation_y_3d", "(", "angle_y", ",", "rot_matrix", ")", "\n", "rot_matrix", "=", "create_matrix_rotation_z_3d", "(", "angle_z", ",", "rot_matrix", ")", "\n", "coords", "=", "np", ".", "dot", "(", "coords", ".", "reshape", "(", "len", "(", "coords", ")", ",", "-", "1", ")", ".", "transpose", "(", ")", ",", "rot_matrix", ")", ".", "transpose", "(", ")", ".", "reshape", "(", "coords", ".", "shape", ")", "\n", "return", "coords", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.data.tf_utils.rotate_coords_2d": [[62, 66], ["create_matrix_rotation_2d", "numpy.dot().transpose().reshape", "numpy.dot().transpose", "numpy.dot", "np.dot().transpose().reshape.reshape().transpose", "np.dot().transpose().reshape.reshape", "len"], "function", ["None"], ["", "def", "rotate_coords_2d", "(", "coords", ",", "angle", ")", ":", "\n", "    ", "rot_matrix", "=", "create_matrix_rotation_2d", "(", "angle", ")", "\n", "coords", "=", "np", ".", "dot", "(", "coords", ".", "reshape", "(", "len", "(", "coords", ")", ",", "-", "1", ")", ".", "transpose", "(", ")", ",", "rot_matrix", ")", ".", "transpose", "(", ")", ".", "reshape", "(", "coords", ".", "shape", ")", "\n", "return", "coords", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.data.tf_utils.scale_coords": [[68, 70], ["None"], "function", ["None"], ["", "def", "scale_coords", "(", "coords", ",", "scale", ")", ":", "\n", "    ", "return", "coords", "*", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.data.tf_utils.uncenter_coords": [[72, 78], ["copy.deepcopy", "range"], "function", ["None"], ["", "def", "uncenter_coords", "(", "coords", ")", ":", "\n", "    ", "shp", "=", "coords", ".", "shape", "[", "1", ":", "]", "\n", "coords", "=", "deepcopy", "(", "coords", ")", "\n", "for", "d", "in", "range", "(", "coords", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "coords", "[", "d", "]", "+=", "(", "shp", "[", "d", "]", "-", "1", ")", "/", "2.", "\n", "", "return", "coords", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.data.tf_utils.interpolate_img": [[80, 82], ["scipy.ndimage.map_coordinates"], "function", ["None"], ["", "def", "interpolate_img", "(", "img", ",", "coords", ",", "order", "=", "3", ",", "mode", "=", "'nearest'", ",", "cval", "=", "0.0", ")", ":", "\n", "    ", "return", "map_coordinates", "(", "img", ",", "coords", ",", "order", "=", "order", ",", "mode", "=", "mode", ",", "cval", "=", "cval", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.data.tf_utils.generate_noise": [[84, 88], ["scipy.ndimage.filters.gaussian_filter", "numpy.random.random"], "function", ["None"], ["", "def", "generate_noise", "(", "shape", ",", "alpha", ",", "sigma", ")", ":", "\n", "    ", "noise", "=", "np", ".", "random", ".", "random", "(", "shape", ")", "*", "2", "-", "1", "\n", "noise", "=", "gaussian_filter", "(", "noise", ",", "sigma", ",", "mode", "=", "\"constant\"", ",", "cval", "=", "0", ")", "*", "alpha", "\n", "return", "noise", "\n", "", ""]], "home.repos.pwc.inspect_result.zwxu064_RANP.data.explore.nib_load": [[6, 11], ["nibabel.load", "nib.load.get_data().astype", "nib.load.uncache", "nib.load.get_data"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.data.load"], ["def", "nib_load", "(", "file_name", ")", ":", "\n", "    ", "proxy", "=", "nib", ".", "load", "(", "file_name", ")", "\n", "data", "=", "proxy", ".", "get_data", "(", ")", ".", "astype", "(", "'float32'", ")", "\n", "proxy", ".", "uncache", "(", ")", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.data.explore.crop": [[12, 21], ["numpy.lib.stride_tricks.as_strided", "numpy.array", "tuple", "tuple", "numpy.array"], "function", ["None"], ["", "def", "crop", "(", "x", ",", "ksize", ",", "stride", "=", "3", ")", ":", "\n", "    ", "shape", "=", "(", "np", ".", "array", "(", "x", ".", "shape", "[", ":", "3", "]", ")", "-", "ksize", ")", "/", "stride", "+", "1", "\n", "shape", "=", "tuple", "(", "shape", ")", "+", "(", "ksize", ",", ")", "*", "3", "+", "(", "x", ".", "shape", "[", "3", "]", ",", ")", "\n", "\n", "strides", "=", "np", ".", "array", "(", "x", ".", "strides", "[", ":", "3", "]", ")", "*", "3", "\n", "strides", "=", "tuple", "(", "strides", ")", "+", "x", ".", "strides", "\n", "\n", "x", "=", "as_strided", "(", "x", ",", "shape", "=", "shape", ",", "strides", "=", "strides", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.data.transforms.Base.sample": [[11, 13], ["None"], "methods", ["None"], ["    ", "def", "sample", "(", "self", ",", "*", "shape", ")", ":", "\n", "        ", "return", "shape", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.data.transforms.Base.tf": [[14, 16], ["None"], "methods", ["None"], ["", "def", "tf", "(", "self", ",", "img", ",", "k", "=", "0", ")", ":", "\n", "        ", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.data.transforms.Base.__call__": [[17, 31], ["isinstance", "transforms.Base.tf", "transforms.Base.sample", "isinstance", "transforms.Base.tf", "enumerate"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.data.transforms.Spatial.tf", "home.repos.pwc.inspect_result.zwxu064_RANP.data.rand.Constant.sample", "home.repos.pwc.inspect_result.zwxu064_RANP.data.transforms.Spatial.tf"], ["", "def", "__call__", "(", "self", ",", "img", ",", "dim", "=", "3", ",", "reuse", "=", "False", ")", ":", "\n", "# image: nhwtc", "\n", "# shape: no first dim", "\n", "        ", "if", "not", "reuse", ":", "\n", "            ", "im", "=", "img", "if", "isinstance", "(", "img", ",", "np", ".", "ndarray", ")", "else", "img", "[", "0", "]", "\n", "# how to know  if the last dim is channel??", "\n", "# nhwtc vs nhwt??", "\n", "shape", "=", "im", ".", "shape", "[", "1", ":", "dim", "+", "1", "]", "\n", "self", ".", "sample", "(", "*", "shape", ")", "\n", "\n", "", "if", "isinstance", "(", "img", ",", "collections", ".", "Sequence", ")", ":", "\n", "            ", "return", "[", "self", ".", "tf", "(", "x", ",", "k", ")", "for", "k", ",", "x", "in", "enumerate", "(", "img", ")", "]", "\n", "\n", "", "return", "self", ".", "tf", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.data.transforms.Base.__str__": [[32, 34], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "'Itendity()'", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.data.transforms.Rot90.__init__": [[42, 47], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "axes", "=", "(", "0", ",", "1", ")", ")", ":", "\n", "        ", "self", ".", "axes", "=", "axes", "\n", "\n", "for", "a", "in", "self", ".", "axes", ":", "\n", "            ", "assert", "a", ">", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.data.transforms.Rot90.sample": [[48, 57], ["list"], "methods", ["None"], ["", "", "def", "sample", "(", "self", ",", "*", "shape", ")", ":", "\n", "        ", "shape", "=", "list", "(", "shape", ")", "\n", "i", ",", "j", "=", "self", ".", "axes", "\n", "\n", "# shape: no first dim", "\n", "i", ",", "j", "=", "i", "-", "1", ",", "j", "-", "1", "\n", "shape", "[", "i", "]", ",", "shape", "[", "j", "]", "=", "shape", "[", "j", "]", ",", "shape", "[", "i", "]", "\n", "\n", "return", "shape", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.data.transforms.Rot90.tf": [[58, 60], ["numpy.rot90"], "methods", ["None"], ["", "def", "tf", "(", "self", ",", "img", ",", "k", "=", "0", ")", ":", "\n", "        ", "return", "np", ".", "rot90", "(", "img", ",", "axes", "=", "self", ".", "axes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.data.transforms.Rot90.__str__": [[61, 63], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "'Rot90(axes=({}, {})'", ".", "format", "(", "*", "self", ".", "axes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.data.transforms.Flip.__init__": [[66, 68], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "axis", "=", "0", ")", ":", "\n", "        ", "self", ".", "axis", "=", "axis", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.data.transforms.Flip.tf": [[69, 71], ["numpy.flip"], "methods", ["None"], ["", "def", "tf", "(", "self", ",", "img", ",", "k", "=", "0", ")", ":", "\n", "        ", "return", "np", ".", "flip", "(", "img", ",", "self", ".", "axis", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.data.transforms.Flip.__str__": [[72, 74], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "'Flip(axis={})'", ".", "format", "(", "self", ".", "axis", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.data.transforms.RandSelect.__init__": [[77, 81], ["isinstance"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "prob", "=", "0.5", ",", "tf", "=", "None", ")", ":", "\n", "        ", "self", ".", "prob", "=", "prob", "\n", "self", ".", "ops", "=", "tf", "if", "isinstance", "(", "tf", ",", "collections", ".", "Sequence", ")", "else", "(", "tf", ",", ")", "\n", "self", ".", "buff", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.data.transforms.RandSelect.sample": [[82, 90], ["random.random", "op.sample"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.data.rand.Constant.sample"], ["", "def", "sample", "(", "self", ",", "*", "shape", ")", ":", "\n", "        ", "self", ".", "buff", "=", "random", ".", "random", "(", ")", "<", "self", ".", "prob", "\n", "\n", "if", "self", ".", "buff", ":", "\n", "            ", "for", "op", "in", "self", ".", "ops", ":", "\n", "                ", "shape", "=", "op", ".", "sample", "(", "*", "shape", ")", "\n", "\n", "", "", "return", "shape", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.data.transforms.RandSelect.tf": [[91, 96], ["op.tf"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.data.transforms.Spatial.tf"], ["", "def", "tf", "(", "self", ",", "img", ",", "k", "=", "0", ")", ":", "\n", "        ", "if", "self", ".", "buff", ":", "\n", "            ", "for", "op", "in", "self", ".", "ops", ":", "\n", "                ", "img", "=", "op", ".", "tf", "(", "img", ",", "k", ")", "\n", "", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.data.transforms.RandSelect.__str__": [[97, 103], ["len", "str", "str"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "if", "len", "(", "self", ".", "ops", ")", "==", "1", ":", "\n", "            ", "ops", "=", "str", "(", "self", ".", "ops", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "            ", "ops", "=", "'[{}]'", ".", "format", "(", "', '", ".", "join", "(", "[", "str", "(", "op", ")", "for", "op", "in", "self", ".", "ops", "]", ")", ")", "\n", "", "return", "'RandSelect({}, {})'", ".", "format", "(", "self", ".", "prob", ",", "ops", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.data.transforms.CenterCrop.__init__": [[106, 109], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "self", ".", "buffer", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.data.transforms.CenterCrop.sample": [[110, 115], ["len", "slice", "slice"], "methods", ["None"], ["", "def", "sample", "(", "self", ",", "*", "shape", ")", ":", "\n", "        ", "size", "=", "self", ".", "size", "\n", "start", "=", "[", "(", "s", "-", "size", ")", "//", "2", "for", "s", "in", "shape", "]", "\n", "self", ".", "buffer", "=", "[", "slice", "(", "None", ")", "]", "+", "[", "slice", "(", "s", ",", "s", "+", "size", ")", "for", "s", "in", "start", "]", "\n", "return", "[", "size", "]", "*", "len", "(", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.data.transforms.CenterCrop.tf": [[117, 119], ["tuple"], "methods", ["None"], ["", "def", "tf", "(", "self", ",", "img", ",", "k", "=", "0", ")", ":", "\n", "        ", "return", "img", "[", "tuple", "(", "self", ".", "buffer", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.data.transforms.CenterCrop.__str__": [[120, 122], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "'CenterCrop({})'", ".", "format", "(", "self", ".", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.data.transforms.RandCrop.sample": [[125, 130], ["random.randint", "len", "slice", "slice"], "methods", ["None"], ["    ", "def", "sample", "(", "self", ",", "*", "shape", ")", ":", "\n", "        ", "size", "=", "self", ".", "size", "\n", "start", "=", "[", "random", ".", "randint", "(", "0", ",", "s", "-", "size", ")", "for", "s", "in", "shape", "]", "\n", "self", ".", "buffer", "=", "[", "slice", "(", "None", ")", "]", "+", "[", "slice", "(", "s", ",", "s", "+", "size", ")", "for", "s", "in", "start", "]", "\n", "return", "[", "size", "]", "*", "len", "(", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.data.transforms.RandCrop.__str__": [[131, 133], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "'RandCrop({})'", ".", "format", "(", "self", ".", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.data.transforms.Pad.__init__": [[136, 140], ["tuple", "zip", "isinstance", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "pad", ",", "fill_v", "=", "0", ")", ":", "\n", "        ", "self", ".", "pad", "=", "pad", "\n", "self", ".", "px", "=", "tuple", "(", "zip", "(", "[", "0", "]", "*", "len", "(", "pad", ")", ",", "pad", ")", ")", "\n", "self", ".", "fill_v", "=", "fill_v", "if", "isinstance", "(", "fill_v", ",", "list", ")", "else", "[", "fill_v", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.data.transforms.Pad.sample": [[141, 150], ["list", "range", "len"], "methods", ["None"], ["", "def", "sample", "(", "self", ",", "*", "shape", ")", ":", "\n", "\n", "        ", "shape", "=", "list", "(", "shape", ")", "\n", "\n", "# shape: no first dim", "\n", "for", "i", "in", "range", "(", "len", "(", "shape", ")", ")", ":", "\n", "            ", "shape", "[", "i", "]", "+=", "self", ".", "pad", "[", "i", "+", "1", "]", "\n", "\n", "", "return", "shape", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.data.transforms.Pad.tf": [[151, 155], ["len", "numpy.pad"], "methods", ["None"], ["", "def", "tf", "(", "self", ",", "img", ",", "k", "=", "0", ")", ":", "\n", "#nhwtc, nhwt", "\n", "        ", "dim", "=", "len", "(", "img", ".", "shape", ")", "\n", "return", "np", ".", "pad", "(", "img", ",", "self", ".", "px", "[", ":", "dim", "]", ",", "mode", "=", "'constant'", ",", "constant_values", "=", "self", ".", "fill_v", "[", "k", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.data.transforms.Pad.__str__": [[156, 158], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "'Pad(({}, {}, {}))'", ".", "format", "(", "*", "self", ".", "pad", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.data.transforms.Noise.__init__": [[162, 167], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "sigma", "=", "0.1", ",", "channel", "=", "True", ",", "num", "=", "-", "1", ")", ":", "\n", "        ", "self", ".", "dim", "=", "dim", "\n", "self", ".", "sigma", "=", "sigma", "\n", "self", ".", "channel", "=", "channel", "\n", "self", ".", "num", "=", "num", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.data.transforms.Noise.tf": [[168, 178], ["numpy.exp", "len", "torch.randn().numpy", "torch.randn"], "methods", ["None"], ["", "def", "tf", "(", "self", ",", "img", ",", "k", "=", "0", ")", ":", "\n", "        ", "if", "self", ".", "num", ">", "0", "and", "k", ">=", "self", ".", "num", ":", "\n", "            ", "return", "img", "\n", "\n", "", "if", "self", ".", "channel", ":", "\n", "#nhwtc, hwtc, hwt", "\n", "            ", "shape", "=", "[", "1", "]", "if", "len", "(", "img", ".", "shape", ")", "<", "self", ".", "dim", "+", "2", "else", "[", "img", ".", "shape", "[", "-", "1", "]", "]", "\n", "", "else", ":", "\n", "            ", "shape", "=", "img", ".", "shape", "\n", "", "return", "img", "*", "np", ".", "exp", "(", "self", ".", "sigma", "*", "torch", ".", "randn", "(", "shape", ",", "dtype", "=", "torch", ".", "float32", ")", ".", "numpy", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.data.transforms.Noise.__str__": [[179, 181], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "'Noise()'", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.data.transforms.GaussianBlur.__init__": [[185, 191], ["rand.Constant"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "sigma", "=", "Constant", "(", "1.5", ")", ",", "app", "=", "-", "1", ")", ":", "\n", "# 1.5 pixel", "\n", "        ", "self", ".", "dim", "=", "dim", "\n", "self", ".", "sigma", "=", "sigma", "\n", "self", ".", "eps", "=", "0.001", "\n", "self", ".", "app", "=", "app", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.data.transforms.GaussianBlur.tf": [[192, 211], ["range", "transforms.GaussianBlur.sigma.sample", "len", "range", "scipy.ndimage.gaussian_filter", "len", "scipy.ndimage.gaussian_filter", "ValueError"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.data.rand.Constant.sample"], ["", "def", "tf", "(", "self", ",", "img", ",", "k", "=", "0", ")", ":", "\n", "        ", "if", "self", ".", "num", ">", "0", "and", "k", ">=", "self", ".", "num", ":", "\n", "            ", "return", "img", "\n", "\n", "# image is nhwtc", "\n", "", "for", "n", "in", "range", "(", "img", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "sig", "=", "self", ".", "sigma", ".", "sample", "(", ")", "\n", "# sample each channel saperately to avoid correlations", "\n", "if", "sig", ">", "self", ".", "eps", ":", "\n", "                ", "if", "len", "(", "img", ".", "shape", ")", "==", "self", ".", "dim", "+", "2", ":", "\n", "                    ", "C", "=", "img", ".", "shape", "[", "-", "1", "]", "\n", "for", "c", "in", "range", "(", "C", ")", ":", "\n", "                        ", "img", "[", "n", ",", "...", ",", "c", "]", "=", "ndimage", ".", "gaussian_filter", "(", "img", "[", "n", ",", "...", ",", "c", "]", ",", "sig", ")", "\n", "", "", "elif", "len", "(", "img", ".", "shape", ")", "==", "self", ".", "dim", "+", "1", ":", "\n", "                    ", "img", "[", "n", "]", "=", "ndimage", ".", "gaussian_filter", "(", "img", "[", "n", "]", ",", "sig", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "ValueError", "(", "'image shape is not supported'", ")", "\n", "\n", "", "", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.data.transforms.GaussianBlur.__str__": [[212, 214], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "'GaussianBlur()'", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.data.transforms.ToNumpy.__init__": [[217, 219], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "num", "=", "-", "1", ")", ":", "\n", "        ", "self", ".", "num", "=", "num", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.data.transforms.ToNumpy.tf": [[220, 224], ["img.numpy"], "methods", ["None"], ["", "def", "tf", "(", "self", ",", "img", ",", "k", "=", "0", ")", ":", "\n", "        ", "if", "self", ".", "num", ">", "0", "and", "k", ">=", "self", ".", "num", ":", "\n", "            ", "return", "img", "\n", "", "return", "img", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.data.transforms.ToNumpy.__str__": [[225, 227], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "'ToNumpy()'", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.data.transforms.ToTensor.__init__": [[230, 232], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "num", "=", "-", "1", ")", ":", "\n", "        ", "self", ".", "num", "=", "num", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.data.transforms.ToTensor.tf": [[233, 238], ["torch.from_numpy"], "methods", ["None"], ["", "def", "tf", "(", "self", ",", "img", ",", "k", "=", "0", ")", ":", "\n", "        ", "if", "self", ".", "num", ">", "0", "and", "k", ">=", "self", ".", "num", ":", "\n", "            ", "return", "img", "\n", "\n", "", "return", "torch", ".", "from_numpy", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.data.transforms.ToTensor.__str__": [[239, 241], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "'ToTensor'", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.data.transforms.TensorType.__init__": [[244, 247], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "types", ",", "num", "=", "-", "1", ")", ":", "\n", "        ", "self", ".", "types", "=", "types", "# ('torch.float32', 'torch.int64')", "\n", "self", ".", "num", "=", "num", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.data.transforms.TensorType.tf": [[248, 253], ["img.type"], "methods", ["None"], ["", "def", "tf", "(", "self", ",", "img", ",", "k", "=", "0", ")", ":", "\n", "        ", "if", "self", ".", "num", ">", "0", "and", "k", ">=", "self", ".", "num", ":", "\n", "            ", "return", "img", "\n", "# make this work with both Tensor and Numpy", "\n", "", "return", "img", ".", "type", "(", "self", ".", "types", "[", "k", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.data.transforms.TensorType.__str__": [[254, 257], ["str"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "s", "=", "', '", ".", "join", "(", "[", "str", "(", "s", ")", "for", "s", "in", "self", ".", "types", "]", ")", "\n", "return", "'TensorType(({}))'", ".", "format", "(", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.data.transforms.NumpyType.__init__": [[260, 263], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "types", ",", "num", "=", "-", "1", ")", ":", "\n", "        ", "self", ".", "types", "=", "types", "# ('float32', 'int64')", "\n", "self", ".", "num", "=", "num", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.data.transforms.NumpyType.tf": [[264, 269], ["img.astype"], "methods", ["None"], ["", "def", "tf", "(", "self", ",", "img", ",", "k", "=", "0", ")", ":", "\n", "        ", "if", "self", ".", "num", ">", "0", "and", "k", ">=", "self", ".", "num", ":", "\n", "            ", "return", "img", "\n", "# make this work with both Tensor and Numpy", "\n", "", "return", "img", ".", "astype", "(", "self", ".", "types", "[", "k", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.data.transforms.NumpyType.__str__": [[270, 273], ["str"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "s", "=", "', '", ".", "join", "(", "[", "str", "(", "s", ")", "for", "s", "in", "self", ".", "types", "]", ")", "\n", "return", "'NumpyType(({}))'", ".", "format", "(", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.data.transforms.Normalize.__init__": [[276, 280], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "mean", "=", "0.0", ",", "std", "=", "1.0", ",", "num", "=", "-", "1", ")", ":", "\n", "        ", "self", ".", "mean", "=", "mean", "\n", "self", ".", "std", "=", "std", "\n", "self", ".", "num", "=", "num", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.data.transforms.Normalize.tf": [[281, 287], ["None"], "methods", ["None"], ["", "def", "tf", "(", "self", ",", "img", ",", "k", "=", "0", ")", ":", "\n", "        ", "if", "self", ".", "num", ">", "0", "and", "k", ">=", "self", ".", "num", ":", "\n", "            ", "return", "img", "\n", "", "img", "-=", "self", ".", "mean", "\n", "img", "/=", "self", ".", "std", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.data.transforms.Normalize.__str__": [[288, 290], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "'Normalize()'", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.data.transforms.Compose.__init__": [[293, 297], ["isinstance"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "ops", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "ops", ",", "collections", ".", "Sequence", ")", ":", "\n", "            ", "ops", "=", "ops", ",", "\n", "", "self", ".", "ops", "=", "ops", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.data.transforms.Compose.sample": [[298, 301], ["op.sample"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.data.rand.Constant.sample"], ["", "def", "sample", "(", "self", ",", "*", "shape", ")", ":", "\n", "        ", "for", "op", "in", "self", ".", "ops", ":", "\n", "            ", "shape", "=", "op", ".", "sample", "(", "*", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.data.transforms.Compose.tf": [[302, 315], ["op.tf"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.data.transforms.Spatial.tf"], ["", "", "def", "tf", "(", "self", ",", "img", ",", "k", "=", "0", ")", ":", "\n", "#is_tensor = isinstance(img, torch.Tensor)", "\n", "#if is_tensor:", "\n", "#    img = img.numpy()", "\n", "\n", "        ", "for", "op", "in", "self", ".", "ops", ":", "\n", "            ", "img", "=", "op", ".", "tf", "(", "img", ",", "k", ")", "# do not use op(img) here", "\n", "\n", "#if is_tensor:", "\n", "#    img = np.ascontiguousarray(img)", "\n", "#    img = torch.from_numpy(img)", "\n", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.data.transforms.Compose.__str__": [[316, 319], ["str"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "ops", "=", "', '", ".", "join", "(", "[", "str", "(", "op", ")", "for", "op", "in", "self", ".", "ops", "]", ")", "\n", "return", "'Compose([{}])'", ".", "format", "(", "ops", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.data.transforms.Spatial.__init__": [[327, 356], ["len", "list", "isinstance", "ValueError", "numpy.array"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "patch_size", ",", "center_to_border", "=", "None", ",", "\n", "alpha", "=", "None", ",", "sigma", "=", "None", ",", "\n", "angle_x", "=", "None", ",", "angle_y", "=", "None", ",", "angle_z", "=", "None", ",", "\n", "scale", "=", "None", ",", "random_crop", "=", "True", ")", ":", "\n", "\n", "        ", "self", ".", "patch_size", "=", "patch_size", "\n", "self", ".", "buff", "=", "None", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "sigma", "=", "sigma", "\n", "self", ".", "angle_x", "=", "angle_x", "\n", "self", ".", "angle_y", "=", "angle_y", "\n", "self", ".", "angle_z", "=", "angle_z", "\n", "self", ".", "scale", "=", "scale", "\n", "self", ".", "dim", "=", "len", "(", "patch_size", ")", "\n", "self", ".", "random_crop", "=", "random_crop", "\n", "\n", "if", "center_to_border", "is", "None", ":", "\n", "            ", "center_to_border", "=", "list", "(", "np", ".", "array", "(", "patch_size", ")", "//", "2", ")", "\n", "", "elif", "not", "isinstance", "(", "center_to_border", ",", "collections", ".", "Sequence", ")", ":", "\n", "            ", "center_to_border", "=", "self", ".", "dim", "*", "(", "center_to_border", ",", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'center to border'", ")", "\n", "\n", "", "self", ".", "center_to_border", "=", "center_to_border", "\n", "\n", "\n", "self", ".", "order_data", "=", "3", "\n", "self", ".", "border_mode_data", "=", "'nearest'", "\n", "self", ".", "border_cval_data", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.data.transforms.Spatial.sample": [[357, 390], ["tf_utils.create_zero_centered_coordinate_mesh", "range", "transforms.Spatial.alpha.sample", "transforms.Spatial.sigma.sample", "tf_utils.elastic_deform_coordinates", "transforms.Spatial.angle_x.sample", "transforms.Spatial.scale.sample", "tf_utils.scale_coords", "transforms.Spatial.angle_y.sample", "transforms.Spatial.angle_z.sample", "tf_utils.rotate_coords_3d", "tf_utils.rotate_coords_2d", "random.uniform", "int", "numpy.round"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.data.tf_utils.create_zero_centered_coordinate_mesh", "home.repos.pwc.inspect_result.zwxu064_RANP.data.rand.Constant.sample", "home.repos.pwc.inspect_result.zwxu064_RANP.data.rand.Constant.sample", "home.repos.pwc.inspect_result.zwxu064_RANP.data.tf_utils.elastic_deform_coordinates", "home.repos.pwc.inspect_result.zwxu064_RANP.data.rand.Constant.sample", "home.repos.pwc.inspect_result.zwxu064_RANP.data.rand.Constant.sample", "home.repos.pwc.inspect_result.zwxu064_RANP.data.tf_utils.scale_coords", "home.repos.pwc.inspect_result.zwxu064_RANP.data.rand.Constant.sample", "home.repos.pwc.inspect_result.zwxu064_RANP.data.rand.Constant.sample", "home.repos.pwc.inspect_result.zwxu064_RANP.data.tf_utils.rotate_coords_3d", "home.repos.pwc.inspect_result.zwxu064_RANP.data.tf_utils.rotate_coords_2d"], ["", "def", "sample", "(", "self", ",", "*", "shape", ")", ":", "\n", "#nhwtc", "\n", "        ", "coords", "=", "create_zero_centered_coordinate_mesh", "(", "self", ".", "patch_size", ")", "\n", "# dimxhxwxt", "\n", "\n", "if", "self", ".", "alpha", "is", "not", "None", "and", "self", ".", "sigma", "is", "not", "None", ":", "\n", "            ", "a", "=", "self", ".", "alpha", ".", "sample", "(", ")", "\n", "s", "=", "self", ".", "sigma", ".", "sample", "(", ")", "\n", "coords", "=", "elastic_deform_coordinates", "(", "coords", ",", "a", ",", "s", ")", "\n", "\n", "", "if", "self", ".", "angle_x", "is", "not", "None", ":", "\n", "            ", "ax", "=", "self", ".", "angle_x", ".", "sample", "(", ")", "\n", "if", "self", ".", "dim", "==", "3", ":", "\n", "                ", "ay", "=", "self", ".", "angle_y", ".", "sample", "(", ")", "\n", "az", "=", "self", ".", "angle_z", ".", "sample", "(", ")", "\n", "coords", "=", "rotate_coords_3d", "(", "coords", ",", "ax", ",", "ay", ",", "az", ")", "\n", "", "else", ":", "\n", "                ", "coords", "=", "rotate_coords_2d", "(", "coords", ",", "ax", ")", "\n", "", "", "if", "self", ".", "scale", "is", "not", "None", ":", "\n", "            ", "sc", "=", "self", ".", "scale", ".", "sample", "(", ")", "\n", "coords", "=", "scale_coords", "(", "coords", ",", "sc", ")", "\n", "\n", "", "for", "d", "in", "range", "(", "self", ".", "dim", ")", ":", "\n", "            ", "if", "self", ".", "random_crop", ":", "\n", "                ", "ctr", "=", "random", ".", "uniform", "(", "self", ".", "center_to_border", "[", "d", "]", ",", "\n", "shape", "[", "d", "]", "-", "self", ".", "center_to_border", "[", "d", "]", ")", "\n", "", "else", ":", "\n", "                ", "ctr", "=", "int", "(", "np", ".", "round", "(", "shape", "[", "d", "]", "/", "2.", ")", ")", "\n", "", "coords", "[", "d", "]", "+=", "ctr", "\n", "\n", "", "self", ".", "buff", "=", "coords", "\n", "\n", "return", "self", ".", "patch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.data.transforms.Spatial.tf": [[391, 406], ["list", "numpy.zeros", "range", "len", "range", "tf_utils.interpolate_img", "len", "tf_utils.interpolate_img", "ValueError"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.data.tf_utils.interpolate_img", "home.repos.pwc.inspect_result.zwxu064_RANP.data.tf_utils.interpolate_img"], ["", "def", "tf", "(", "self", ",", "img", ")", ":", "\n", "        ", "shape", "=", "list", "(", "img", ".", "shape", ")", "\n", "shape", "[", "1", ":", "self", ".", "dim", "+", "1", "]", "=", "self", ".", "patch_size", "\n", "out", "=", "np", ".", "zeros", "(", "shape", ",", "dtype", "=", "img", ".", "dtype", ")", "\n", "for", "n", "in", "range", "(", "img", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "if", "len", "(", "img", ".", "shape", ")", "==", "self", ".", "dim", "+", "2", ":", "\n", "                ", "for", "c", "in", "range", "(", "img", ".", "shape", "[", "-", "1", "]", ")", ":", "\n", "                    ", "out", "[", "n", ",", "...", ",", "c", "]", "=", "interpolate_img", "(", "img", "[", "n", ",", "...", ",", "c", "]", ",", "self", ".", "buff", ",", "\n", "self", ".", "order_data", ",", "self", ".", "border_mode_data", ",", "cval", "=", "self", ".", "border_cval_data", ")", "\n", "", "", "elif", "len", "(", "img", ".", "shape", ")", "==", "self", ".", "dim", "+", "1", ":", "\n", "                ", "out", "[", "n", "]", "=", "interpolate_img", "(", "img", "[", "n", "]", ",", "self", ".", "buff", ",", "\n", "self", ".", "order_data", ",", "self", ".", "border_mode_data", ",", "cval", "=", "self", ".", "border_cval_data", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "'image shape is not supported'", ")", "\n", "", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.data.data_utils.init_fn": [[7, 12], ["torch.LongTensor().random_().item", "numpy.random.seed", "random.seed", "torch.LongTensor().random_", "torch.LongTensor"], "function", ["None"], ["def", "init_fn", "(", "worker", ")", ":", "\n", "    ", "seed", "=", "torch", ".", "LongTensor", "(", "1", ")", ".", "random_", "(", ")", ".", "item", "(", ")", "\n", "seed", "=", "(", "seed", "+", "worker", ")", "%", "M", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.data.data_utils.add_mask": [[13, 22], ["mask.unsqueeze.unsqueeze", "list", "x.new().zero_", "new_x.scatter_.scatter_", "slice", "len", "x.new", "slice"], "function", ["None"], ["", "def", "add_mask", "(", "x", ",", "mask", ",", "dim", "=", "1", ")", ":", "\n", "    ", "mask", "=", "mask", ".", "unsqueeze", "(", "dim", ")", "\n", "shape", "=", "list", "(", "x", ".", "shape", ")", ";", "shape", "[", "dim", "]", "+=", "21", "\n", "new_x", "=", "x", ".", "new", "(", "*", "shape", ")", ".", "zero_", "(", ")", "\n", "new_x", "=", "new_x", ".", "scatter_", "(", "dim", ",", "mask", ",", "1.0", ")", "\n", "s", "=", "[", "slice", "(", "None", ")", "]", "*", "len", "(", "shape", ")", "\n", "s", "[", "dim", "]", "=", "slice", "(", "21", ",", "None", ")", "\n", "new_x", "[", "s", "]", "=", "x", "\n", "return", "new_x", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.data.data_utils.sample": [[23, 27], ["random.sample", "torch.tensor", "range"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.data.rand.Constant.sample"], ["", "def", "sample", "(", "x", ",", "size", ")", ":", "\n", "#https://gist.github.com/yoavram/4134617", "\n", "    ", "i", "=", "random", ".", "sample", "(", "range", "(", "x", ".", "shape", "[", "0", "]", ")", ",", "size", ")", "\n", "return", "torch", ".", "tensor", "(", "x", "[", "i", "]", ",", "dtype", "=", "torch", ".", "int16", ")", "\n", "#x = np.random.permutation(x)", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.data.data_utils.pkload": [[30, 33], ["open", "pickle.load"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.data.load"], ["", "def", "pkload", "(", "fname", ")", ":", "\n", "    ", "with", "open", "(", "fname", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "return", "pickle", ".", "load", "(", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.data.data_utils.get_all_coords": [[36, 43], ["torch.tensor", "numpy.stack", "v.reshape", "numpy.meshgrid", "numpy.arange"], "function", ["None"], ["def", "get_all_coords", "(", "stride", ")", ":", "\n", "    ", "return", "torch", ".", "tensor", "(", "\n", "np", ".", "stack", "(", "[", "v", ".", "reshape", "(", "-", "1", ")", "for", "v", "in", "\n", "np", ".", "meshgrid", "(", "\n", "*", "[", "stride", "//", "2", "+", "np", ".", "arange", "(", "0", ",", "s", ",", "stride", ")", "for", "s", "in", "_shape", "]", ",", "\n", "indexing", "=", "'ij'", ")", "]", ",", "\n", "-", "1", ")", ",", "dtype", "=", "torch", ".", "int16", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.data.data_utils.gen_feats": [[46, 57], ["numpy.stack().astype", "numpy.array", "numpy.stack", "numpy.meshgrid", "numpy.arange", "numpy.arange", "numpy.arange"], "function", ["None"], ["def", "gen_feats", "(", ")", ":", "\n", "    ", "x", ",", "y", ",", "z", "=", "240", ",", "240", ",", "155", "\n", "feats", "=", "np", ".", "stack", "(", "\n", "np", ".", "meshgrid", "(", "\n", "np", ".", "arange", "(", "x", ")", ",", "np", ".", "arange", "(", "y", ")", ",", "np", ".", "arange", "(", "z", ")", ",", "\n", "indexing", "=", "'ij'", ")", ",", "-", "1", ")", ".", "astype", "(", "'float32'", ")", "\n", "shape", "=", "np", ".", "array", "(", "[", "x", ",", "y", ",", "z", "]", ")", "\n", "feats", "-=", "shape", "/", "2.0", "\n", "feats", "/=", "shape", "\n", "\n", "return", "feats", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.data.test_sampling.sample1": [[13, 16], ["random.sample", "torch.tensor", "range"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.data.rand.Constant.sample"], ["def", "sample1", "(", ")", ":", "\n", "    ", "i", "=", "random", ".", "sample", "(", "range", "(", "x", ".", "shape", "[", "0", "]", ")", ",", "size", ")", "\n", "return", "torch", ".", "tensor", "(", "x", "[", "i", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.data.test_sampling.sample2": [[17, 20], ["numpy.random.permutation", "torch.tensor"], "function", ["None"], ["", "def", "sample2", "(", ")", ":", "\n", "    ", "y", "=", "np", ".", "random", ".", "permutation", "(", "x", ")", "\n", "return", "torch", ".", "tensor", "(", "y", "[", ":", "size", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.data.sampler.RandomCycleIter.__init__": [[9, 13], ["list", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data", ")", ":", "\n", "        ", "self", ".", "data_list", "=", "list", "(", "data", ")", "\n", "self", ".", "length", "=", "len", "(", "self", ".", "data_list", ")", "\n", "self", ".", "i", "=", "self", ".", "length", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.data.sampler.RandomCycleIter.__iter__": [[14, 16], ["None"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.data.sampler.RandomCycleIter.__next__": [[17, 23], ["random.shuffle"], "methods", ["None"], ["", "def", "__next__", "(", "self", ")", ":", "\n", "        ", "self", ".", "i", "+=", "1", "\n", "if", "self", ".", "i", "==", "self", ".", "length", ":", "\n", "            ", "self", ".", "i", "=", "0", "\n", "random", ".", "shuffle", "(", "self", ".", "data_list", ")", "\n", "", "return", "self", ".", "data_list", "[", "self", ".", "i", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.data.sampler.MSampler.__init__": [[36, 48], ["sum", "range", "sum", "sampler.RandomCycleIter", "range"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "batch_sizes", ",", "sizes", ",", "num_samples", "=", "None", ",", "num_iters", "=", "None", ")", ":", "\n", "        ", "self", ".", "batch_size", "=", "sum", "(", "batch_sizes", ")", "\n", "self", ".", "index_data", "=", "{", "}", "\n", "size", ",", "c", "=", "0", ",", "-", "1", "\n", "for", "i", "in", "range", "(", "self", ".", "batch_size", ")", ":", "\n", "            ", "if", "i", "==", "size", ":", "\n", "                ", "c", "+=", "1", "\n", "size", "+=", "batch_sizes", "[", "c", "]", "\n", "", "self", ".", "index_data", "[", "i", "]", "=", "c", "\n", "\n", "", "self", ".", "num_samples", "=", "num_samples", "or", "num_iters", "*", "self", ".", "batch_size", "or", "sum", "(", "sizes", ")", "\n", "self", ".", "data_iters", "=", "[", "RandomCycleIter", "(", "range", "(", "n", ")", ")", "for", "n", "in", "sizes", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.data.sampler.MSampler.__iter__": [[49, 53], ["sampler.multi_data_generator"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.data.sampler.multi_data_generator"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "multi_data_generator", "(", "\n", "self", ".", "data_iters", ",", "self", ".", "index_data", ",", "\n", "self", ".", "num_samples", ",", "self", ".", "batch_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.data.sampler.MSampler.__len__": [[54, 56], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.data.sampler.CycleSampler.__init__": [[65, 68], ["sampler.RandomCycleIter", "range"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ",", "num_samples", "=", "None", ",", "num_epochs", "=", "0", ")", ":", "\n", "        ", "self", ".", "num_samples", "=", "num_samples", "or", "size", "*", "num_epochs", "\n", "self", ".", "data_iter", "=", "RandomCycleIter", "(", "range", "(", "size", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.data.sampler.CycleSampler.__iter__": [[69, 71], ["sampler.single_data_generator"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.data.sampler.single_data_generator"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "single_data_generator", "(", "self", ".", "data_iter", ",", "self", ".", "num_samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.data.sampler.CycleSampler.__len__": [[72, 74], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.data.sampler.RandomSampler.__init__": [[78, 81], ["numpy.random.RandomSatate"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data_source", ",", "state", "=", "None", ",", "seed", "=", "None", ")", ":", "\n", "        ", "self", ".", "data_source", "=", "data_source", "\n", "self", ".", "rng", "=", "np", ".", "random", ".", "RandomSatate", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.data.sampler.RandomSampler.__iter__": [[82, 84], ["iter", "torch.randperm().long", "torch.randperm", "len"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "iter", "(", "torch", ".", "randperm", "(", "len", "(", "self", ".", "data_source", ")", ")", ".", "long", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.data.sampler.RandomSampler.__len__": [[85, 87], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data_source", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.data.sampler.RandomSampler.get_state": [[88, 90], ["sampler.RandomSampler.rng.get_state"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.data.sampler.RandomSampler.get_state"], ["", "def", "get_state", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "rng", ".", "get_state", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.data.sampler.RandomSampler.set_state": [[91, 93], ["sampler.RandomSampler.rng.set_state"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.data.sampler.RandomSampler.set_state"], ["", "def", "set_state", "(", "self", ",", "state", ")", ":", "\n", "        ", "self", ".", "rng", ".", "set_state", "(", "state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.data.sampler.multi_data_generator": [[27, 34], ["next"], "function", ["None"], ["", "def", "multi_data_generator", "(", "data_iters", ",", "index_data", ",", "n", ",", "size", ")", ":", "\n", "    ", "i", "=", "0", "\n", "while", "i", "<", "n", ":", "\n", "        ", "index", "=", "i", "%", "size", "\n", "d", "=", "index_data", "[", "index", "]", "\n", "yield", "d", ",", "next", "(", "data_iters", "[", "d", "]", ")", "\n", "i", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.data.sampler.single_data_generator": [[58, 63], ["next"], "function", ["None"], ["", "", "def", "single_data_generator", "(", "data_iter", ",", "n", ")", ":", "\n", "    ", "i", "=", "0", "\n", "while", "i", "<", "n", ":", "\n", "        ", "yield", "next", "(", "data_iter", ")", "\n", "i", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.data.dualpath.DualData28.__init__": [[22, 54], ["data_utils.get_all_coords", "numpy.ceil().astype", "eval", "data_utils.gen_feats", "open", "line.strip.strip.strip", "names.append", "os.path.join", "paths.append", "numpy.ceil", "line.strip.strip.split", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.data.data_utils.get_all_coords", "home.repos.pwc.inspect_result.zwxu064_RANP.data.data_utils.gen_feats", "home.repos.pwc.inspect_result.zwxu064_RANP.utils.parser.AttrDict.strip"], ["    ", "def", "__init__", "(", "self", ",", "list_file", ",", "root", "=", "''", ",", "num_patches", "=", "20", ",", "for_train", "=", "False", ",", "\n", "transforms", "=", "''", ",", "return_target", "=", "True", ",", "crop", "=", "True", ",", "\n", "sample_size", "=", "25", ",", "sub_sample_size", "=", "19", ",", "target_size", "=", "19", ")", ":", "\n", "        ", "paths", ",", "names", "=", "[", "]", ",", "[", "]", "\n", "with", "open", "(", "list_file", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ":", "\n", "                ", "line", "=", "line", ".", "strip", "(", ")", "\n", "name", "=", "line", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "names", ".", "append", "(", "name", ")", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "line", ",", "name", "+", "'_'", ")", "\n", "paths", ".", "append", "(", "path", ")", "\n", "\n", "", "", "self", ".", "root", "=", "root", "\n", "self", ".", "names", "=", "names", "\n", "self", ".", "paths", "=", "paths", "\n", "self", ".", "crop", "=", "crop", "\n", "self", ".", "num_patches", "=", "num_patches", "\n", "self", ".", "for_train", "=", "for_train", "\n", "self", ".", "return_target", "=", "return_target", "\n", "\n", "self", ".", "sample_size", "=", "sample_size", "\n", "self", ".", "sub_sample_size", "=", "sub_sample_size", "\n", "self", ".", "target_size", "=", "target_size", "\n", "\n", "self", ".", "suffix", "=", "'{}x{}x{}_'", ".", "format", "(", "sample_size", ",", "sample_size", ",", "sample_size", ")", "\n", "\n", "self", ".", "all_coords", "=", "get_all_coords", "(", "target_size", ")", "\n", "self", ".", "shape", "=", "np", ".", "ceil", "(", "np", ".", "array", "(", "_shape", ",", "dtype", "=", "'float32'", ")", "/", "target_size", ")", ".", "astype", "(", "'int'", ")", "\n", "\n", "self", ".", "transforms", "=", "eval", "(", "transforms", "or", "'Identity()'", ")", "\n", "\n", "self", ".", "feats", "=", "gen_feats", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.data.dualpath.DualData28.__getitem__": [[55, 117], ["data_utils.pkload", "numpy.concatenate", "numpy.load", "torch.from_numpy", "multicrop.crop3d_cpu", "multicrop.crop3d_cpu", "multicrop.crop3d_cpu", "multicrop.crop3d_cpu", "samples.permute().contiguous.permute().contiguous.permute().contiguous", "sub_samples.permute().contiguous.permute().contiguous.permute().contiguous", "torch.from_numpy", "torch.from_numpy", "dualpath.DualData28.transforms", "images.permute().contiguous.permute().contiguous.permute().contiguous", "data_utils.pkload", "torch.cat", "multicrop.crop3d_cpu", "dualpath.DualData28.transforms", "dualpath.DualData28.transforms", "images.permute().contiguous.permute().contiguous.unsqueeze", "label.unsqueeze", "torch.from_numpy.unsqueeze", "images.permute().contiguous.permute().contiguous.squeeze", "label.squeeze", "torch.from_numpy.squeeze", "samples.permute().contiguous.permute().contiguous.permute", "sub_samples.permute().contiguous.permute().contiguous.permute", "images.permute().contiguous.permute().contiguous.permute", "data_utils.sample"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.data.data_utils.pkload", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.data.load", "home.repos.pwc.inspect_result.zwxu064_RANP.data.data_utils.pkload", "home.repos.pwc.inspect_result.zwxu064_RANP.data.rand.Constant.sample"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "path", "=", "self", ".", "paths", "[", "index", "]", "\n", "\n", "# faster than niffty", "\n", "#images, label = pkload(path + 'data_f32_divm.pkl')", "\n", "\n", "#images, label = pkload(path + 'data_f32.pkl')", "\n", "#images, label = torch.tensor(images), torch.tensor(label)", "\n", "\n", "images", ",", "label", "=", "pkload", "(", "path", "+", "'data_f32.pkl'", ")", "\n", "images", ",", "label", "=", "torch", ".", "from_numpy", "(", "images", ")", ",", "torch", ".", "from_numpy", "(", "label", ")", "\n", "\n", "images", "=", "np", ".", "concatenate", "(", "[", "images", ",", "self", ".", "feats", "]", ",", "-", "1", ")", "\n", "\n", "mask", "=", "np", ".", "load", "(", "path", "+", "'HarvardOxford-sub.npy'", ")", "\n", "mask", "=", "torch", ".", "from_numpy", "(", "mask", ")", "\n", "\n", "if", "not", "self", ".", "crop", ":", "\n", "# transformation needs nhwtc", "\n", "            ", "images", ",", "label", ",", "mask", "=", "images", ".", "unsqueeze", "(", "0", ")", ",", "label", ".", "unsqueeze", "(", "0", ")", ",", "mask", ".", "unsqueeze", "(", "0", ")", "\n", "images", ",", "label", ",", "mask", "=", "self", ".", "transforms", "(", "[", "images", ",", "label", ",", "mask", "]", ")", "\n", "images", ",", "label", ",", "mask", "=", "images", ".", "squeeze", "(", "0", ")", ",", "label", ".", "squeeze", "(", "0", ")", ",", "mask", ".", "squeeze", "(", "0", ")", "\n", "images", "=", "images", ".", "permute", "(", "3", ",", "0", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "\n", "return", "(", "images", ",", "self", ".", "all_coords", ",", "mask", ")", ",", "label", "\n", "\n", "", "if", "self", ".", "for_train", ":", "\n", "            ", "fg", ",", "bg", "=", "pkload", "(", "path", "+", "self", ".", "suffix", "+", "'coords.pkl'", ")", "\n", "coords", "=", "torch", ".", "cat", "(", "[", "sample", "(", "x", ",", "self", ".", "num_patches", "//", "2", ")", "for", "x", "in", "(", "fg", ",", "bg", ")", "]", ")", "\n", "", "else", ":", "\n", "            ", "coords", "=", "self", ".", "all_coords", "\n", "\n", "", "samples", "=", "multicrop", ".", "crop3d_cpu", "(", "images", ",", "coords", ",", "\n", "self", ".", "sample_size", ",", "self", ".", "sample_size", ",", "self", ".", "sample_size", ",", "1", ",", "False", ")", "\n", "\n", "sub_samples", "=", "multicrop", ".", "crop3d_cpu", "(", "images", ",", "coords", ",", "\n", "self", ".", "sub_sample_size", ",", "self", ".", "sub_sample_size", ",", "self", ".", "sub_sample_size", ",", "3", ",", "False", ")", "\n", "\n", "mask_id", "=", "multicrop", ".", "crop3d_cpu", "(", "mask", ",", "coords", ",", "\n", "self", ".", "sample_size", ",", "self", ".", "sample_size", ",", "self", ".", "sample_size", ",", "1", ",", "False", ")", "\n", "\n", "sub_mask_id", "=", "multicrop", ".", "crop3d_cpu", "(", "mask", ",", "coords", ",", "\n", "self", ".", "sub_sample_size", ",", "self", ".", "sub_sample_size", ",", "self", ".", "sub_sample_size", ",", "3", ",", "False", ")", "\n", "\n", "if", "self", ".", "return_target", ":", "\n", "            ", "target", "=", "multicrop", ".", "crop3d_cpu", "(", "\n", "label", ",", "coords", ",", "\n", "self", ".", "target_size", ",", "self", ".", "target_size", ",", "self", ".", "target_size", ",", "1", ",", "False", ")", "\n", "samples", ",", "sub_samples", ",", "mask_id", ",", "sub_mask_id", ",", "target", "=", "self", ".", "transforms", "(", "[", "samples", ",", "sub_samples", ",", "mask_id", ",", "sub_mask_id", ",", "target", "]", ")", "\n", "", "else", ":", "\n", "            ", "samples", ",", "sub_samples", ",", "mask_id", ",", "sub_mask_id", "=", "self", ".", "transforms", "(", "[", "samples", ",", "sub_samples", ",", "mask_id", ",", "sub_mask_id", "]", ")", "\n", "target", "=", "coords", "\n", "\n", "", "if", "self", ".", "for_train", ":", "label", "=", "_zero", "\n", "\n", "samples", "=", "samples", ".", "permute", "(", "0", ",", "4", ",", "1", ",", "2", ",", "3", ")", ".", "contiguous", "(", ")", "\n", "sub_samples", "=", "sub_samples", ".", "permute", "(", "0", ",", "4", ",", "1", ",", "2", ",", "3", ")", ".", "contiguous", "(", ")", "\n", "\n", "#samples = self.add_mask(samples, mask_id, 1)", "\n", "#sub_samples = self.add_mask(sub_samples, sub_mask_id, 1)", "\n", "\n", "return", "(", "samples", ",", "sub_samples", ",", "target", ",", "mask_id", ",", "sub_mask_id", ")", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.data.dualpath.DualData28.__len__": [[129, 131], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "names", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.data.dualpath.DualData28.collate": [[132, 142], ["list", "torch.cat", "zip", "torch.cat", "torch.randperm", "zip"], "methods", ["None"], ["", "def", "collate", "(", "self", ",", "batch", ")", ":", "\n", "        ", "data", ",", "label", "=", "list", "(", "zip", "(", "*", "batch", ")", ")", "\n", "data", "=", "[", "torch", ".", "cat", "(", "v", ")", "for", "v", "in", "zip", "(", "*", "data", ")", "]", "\n", "label", "=", "torch", ".", "cat", "(", "label", ")", "\n", "\n", "if", "self", ".", "for_train", ":", "\n", "            ", "perm", "=", "torch", ".", "randperm", "(", "data", "[", "0", "]", ".", "shape", "[", "0", "]", ")", "\n", "data", "=", "[", "t", "[", "perm", "]", "for", "t", "in", "data", "]", "\n", "\n", "", "return", "data", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.data.dualpath.DualData25.__init__": [[145, 175], ["data_utils.get_all_coords", "numpy.ceil().astype", "eval", "open", "line.strip.strip.strip", "names.append", "os.path.join", "paths.append", "numpy.ceil", "line.strip.strip.split", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.data.data_utils.get_all_coords", "home.repos.pwc.inspect_result.zwxu064_RANP.utils.parser.AttrDict.strip"], ["    ", "def", "__init__", "(", "self", ",", "list_file", ",", "root", "=", "''", ",", "num_patches", "=", "20", ",", "for_train", "=", "False", ",", "\n", "transforms", "=", "''", ",", "return_target", "=", "True", ",", "crop", "=", "True", ",", "\n", "sample_size", "=", "25", ",", "sub_sample_size", "=", "19", ",", "target_size", "=", "19", ")", ":", "\n", "        ", "paths", ",", "names", "=", "[", "]", ",", "[", "]", "\n", "with", "open", "(", "list_file", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ":", "\n", "                ", "line", "=", "line", ".", "strip", "(", ")", "\n", "name", "=", "line", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "names", ".", "append", "(", "name", ")", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "line", ",", "name", "+", "'_'", ")", "\n", "paths", ".", "append", "(", "path", ")", "\n", "\n", "", "", "self", ".", "root", "=", "root", "\n", "self", ".", "names", "=", "names", "\n", "self", ".", "paths", "=", "paths", "\n", "self", ".", "crop", "=", "crop", "\n", "self", ".", "num_patches", "=", "num_patches", "\n", "self", ".", "for_train", "=", "for_train", "\n", "self", ".", "return_target", "=", "return_target", "\n", "\n", "self", ".", "sample_size", "=", "sample_size", "\n", "self", ".", "sub_sample_size", "=", "sub_sample_size", "\n", "self", ".", "target_size", "=", "target_size", "\n", "\n", "self", ".", "suffix", "=", "'{}x{}x{}_'", ".", "format", "(", "sample_size", ",", "sample_size", ",", "sample_size", ")", "\n", "\n", "self", ".", "all_coords", "=", "get_all_coords", "(", "target_size", ")", "\n", "self", ".", "shape", "=", "np", ".", "ceil", "(", "np", ".", "array", "(", "_shape", ",", "dtype", "=", "'float32'", ")", "/", "target_size", ")", ".", "astype", "(", "'int'", ")", "\n", "\n", "self", ".", "transforms", "=", "eval", "(", "transforms", "or", "'Identity()'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.data.dualpath.DualData25.__getitem__": [[177, 238], ["data_utils.pkload", "numpy.load", "torch.from_numpy", "multicrop.crop3d_cpu", "multicrop.crop3d_cpu", "multicrop.crop3d_cpu", "multicrop.crop3d_cpu", "samples.permute().contiguous.permute().contiguous.permute().contiguous", "sub_samples.permute().contiguous.permute().contiguous.permute().contiguous", "torch.from_numpy", "torch.from_numpy", "dualpath.DualData25.transforms", "images.permute().contiguous.permute().contiguous.permute().contiguous", "data_utils.pkload", "torch.cat", "multicrop.crop3d_cpu", "dualpath.DualData25.transforms", "dualpath.DualData25.transforms", "images.permute().contiguous.permute().contiguous.unsqueeze", "label.unsqueeze", "torch.from_numpy.unsqueeze", "images.permute().contiguous.permute().contiguous.squeeze", "label.squeeze", "torch.from_numpy.squeeze", "samples.permute().contiguous.permute().contiguous.permute", "sub_samples.permute().contiguous.permute().contiguous.permute", "images.permute().contiguous.permute().contiguous.permute", "data_utils.sample"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.data.data_utils.pkload", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.data.load", "home.repos.pwc.inspect_result.zwxu064_RANP.data.data_utils.pkload", "home.repos.pwc.inspect_result.zwxu064_RANP.data.rand.Constant.sample"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "path", "=", "self", ".", "paths", "[", "index", "]", "\n", "\n", "# faster than niffty", "\n", "#images, label = pkload(path + 'data_f32_divm.pkl')", "\n", "\n", "#images, label = pkload(path + 'data_f32.pkl')", "\n", "#images, label = torch.tensor(images), torch.tensor(label)", "\n", "\n", "images", ",", "label", "=", "pkload", "(", "path", "+", "'data_f32.pkl'", ")", "\n", "images", ",", "label", "=", "torch", ".", "from_numpy", "(", "images", ")", ",", "torch", ".", "from_numpy", "(", "label", ")", "\n", "\n", "\n", "mask", "=", "np", ".", "load", "(", "path", "+", "'HarvardOxford-sub.npy'", ")", "\n", "mask", "=", "torch", ".", "from_numpy", "(", "mask", ")", "\n", "\n", "if", "not", "self", ".", "crop", ":", "\n", "# transformation needs nhwtc", "\n", "            ", "images", ",", "label", ",", "mask", "=", "images", ".", "unsqueeze", "(", "0", ")", ",", "label", ".", "unsqueeze", "(", "0", ")", ",", "mask", ".", "unsqueeze", "(", "0", ")", "\n", "images", ",", "label", ",", "mask", "=", "self", ".", "transforms", "(", "[", "images", ",", "label", ",", "mask", "]", ")", "\n", "images", ",", "label", ",", "mask", "=", "images", ".", "squeeze", "(", "0", ")", ",", "label", ".", "squeeze", "(", "0", ")", ",", "mask", ".", "squeeze", "(", "0", ")", "\n", "images", "=", "images", ".", "permute", "(", "3", ",", "0", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "\n", "return", "(", "images", ",", "self", ".", "all_coords", ",", "mask", ")", ",", "label", "\n", "\n", "", "if", "self", ".", "for_train", ":", "\n", "            ", "fg", ",", "bg", "=", "pkload", "(", "path", "+", "self", ".", "suffix", "+", "'coords.pkl'", ")", "\n", "coords", "=", "torch", ".", "cat", "(", "[", "sample", "(", "x", ",", "self", ".", "num_patches", "//", "2", ")", "for", "x", "in", "(", "fg", ",", "bg", ")", "]", ")", "\n", "", "else", ":", "\n", "            ", "coords", "=", "self", ".", "all_coords", "\n", "\n", "", "samples", "=", "multicrop", ".", "crop3d_cpu", "(", "images", ",", "coords", ",", "\n", "self", ".", "sample_size", ",", "self", ".", "sample_size", ",", "self", ".", "sample_size", ",", "1", ",", "False", ")", "\n", "\n", "sub_samples", "=", "multicrop", ".", "crop3d_cpu", "(", "images", ",", "coords", ",", "\n", "self", ".", "sub_sample_size", ",", "self", ".", "sub_sample_size", ",", "self", ".", "sub_sample_size", ",", "3", ",", "False", ")", "\n", "\n", "mask_id", "=", "multicrop", ".", "crop3d_cpu", "(", "mask", ",", "coords", ",", "\n", "self", ".", "sample_size", ",", "self", ".", "sample_size", ",", "self", ".", "sample_size", ",", "1", ",", "False", ")", "\n", "\n", "sub_mask_id", "=", "multicrop", ".", "crop3d_cpu", "(", "mask", ",", "coords", ",", "\n", "self", ".", "sub_sample_size", ",", "self", ".", "sub_sample_size", ",", "self", ".", "sub_sample_size", ",", "3", ",", "False", ")", "\n", "\n", "if", "self", ".", "return_target", ":", "\n", "            ", "target", "=", "multicrop", ".", "crop3d_cpu", "(", "\n", "label", ",", "coords", ",", "\n", "self", ".", "target_size", ",", "self", ".", "target_size", ",", "self", ".", "target_size", ",", "1", ",", "False", ")", "\n", "samples", ",", "sub_samples", ",", "mask_id", ",", "sub_mask_id", ",", "target", "=", "self", ".", "transforms", "(", "[", "samples", ",", "sub_samples", ",", "mask_id", ",", "sub_mask_id", ",", "target", "]", ")", "\n", "", "else", ":", "\n", "            ", "samples", ",", "sub_samples", ",", "mask_id", ",", "sub_mask_id", "=", "self", ".", "transforms", "(", "[", "samples", ",", "sub_samples", ",", "mask_id", ",", "sub_mask_id", "]", ")", "\n", "target", "=", "coords", "\n", "\n", "", "if", "self", ".", "for_train", ":", "label", "=", "_zero", "\n", "\n", "samples", "=", "samples", ".", "permute", "(", "0", ",", "4", ",", "1", ",", "2", ",", "3", ")", ".", "contiguous", "(", ")", "\n", "sub_samples", "=", "sub_samples", ".", "permute", "(", "0", ",", "4", ",", "1", ",", "2", ",", "3", ")", ".", "contiguous", "(", ")", "\n", "\n", "#samples = self.add_mask(samples, mask_id, 1)", "\n", "#sub_samples = self.add_mask(sub_samples, sub_mask_id, 1)", "\n", "\n", "return", "(", "samples", ",", "sub_samples", ",", "target", ",", "mask_id", ",", "sub_mask_id", ")", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.data.dualpath.DualData25.__len__": [[250, 252], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "names", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.data.dualpath.DualData25.collate": [[253, 263], ["list", "torch.cat", "zip", "torch.cat", "torch.randperm", "zip"], "methods", ["None"], ["", "def", "collate", "(", "self", ",", "batch", ")", ":", "\n", "        ", "data", ",", "label", "=", "list", "(", "zip", "(", "*", "batch", ")", ")", "\n", "data", "=", "[", "torch", ".", "cat", "(", "v", ")", "for", "v", "in", "zip", "(", "*", "data", ")", "]", "\n", "label", "=", "torch", ".", "cat", "(", "label", ")", "\n", "\n", "if", "self", ".", "for_train", ":", "\n", "            ", "perm", "=", "torch", ".", "randperm", "(", "data", "[", "0", "]", ".", "shape", "[", "0", "]", ")", "\n", "data", "=", "[", "t", "[", "perm", "]", "for", "t", "in", "data", "]", "\n", "\n", "", "return", "data", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.data.dualpath.DualData.__init__": [[266, 296], ["data_utils.get_all_coords", "numpy.ceil().astype", "eval", "open", "line.strip.strip.strip", "names.append", "os.path.join", "paths.append", "numpy.ceil", "line.strip.strip.split", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.data.data_utils.get_all_coords", "home.repos.pwc.inspect_result.zwxu064_RANP.utils.parser.AttrDict.strip"], ["    ", "def", "__init__", "(", "self", ",", "list_file", ",", "root", "=", "''", ",", "num_patches", "=", "20", ",", "for_train", "=", "False", ",", "\n", "transforms", "=", "''", ",", "return_target", "=", "True", ",", "crop", "=", "True", ",", "\n", "sample_size", "=", "25", ",", "sub_sample_size", "=", "19", ",", "target_size", "=", "19", ")", ":", "\n", "        ", "paths", ",", "names", "=", "[", "]", ",", "[", "]", "\n", "with", "open", "(", "list_file", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ":", "\n", "                ", "line", "=", "line", ".", "strip", "(", ")", "\n", "name", "=", "line", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "names", ".", "append", "(", "name", ")", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "line", ",", "name", "+", "'_'", ")", "\n", "paths", ".", "append", "(", "path", ")", "\n", "\n", "", "", "self", ".", "root", "=", "root", "\n", "self", ".", "names", "=", "names", "\n", "self", ".", "paths", "=", "paths", "\n", "self", ".", "crop", "=", "crop", "\n", "self", ".", "num_patches", "=", "num_patches", "\n", "self", ".", "for_train", "=", "for_train", "\n", "self", ".", "return_target", "=", "return_target", "\n", "\n", "self", ".", "sample_size", "=", "sample_size", "\n", "self", ".", "sub_sample_size", "=", "sub_sample_size", "\n", "self", ".", "target_size", "=", "target_size", "\n", "\n", "self", ".", "suffix", "=", "'{}x{}x{}_'", ".", "format", "(", "sample_size", ",", "sample_size", ",", "sample_size", ")", "\n", "\n", "self", ".", "all_coords", "=", "get_all_coords", "(", "target_size", ")", "\n", "self", ".", "shape", "=", "np", ".", "ceil", "(", "np", ".", "array", "(", "_shape", ",", "dtype", "=", "'float32'", ")", "/", "target_size", ")", ".", "astype", "(", "'int'", ")", "\n", "\n", "self", ".", "transforms", "=", "eval", "(", "transforms", "or", "'Identity()'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.data.dualpath.DualData.__getitem__": [[297, 345], ["data_utils.pkload", "multicrop.crop3d_cpu", "multicrop.crop3d_cpu", "samples.permute().contiguous.permute().contiguous.permute().contiguous", "sub_samples.permute().contiguous.permute().contiguous.permute().contiguous", "torch.from_numpy", "torch.from_numpy", "dualpath.DualData.transforms", "images.permute().contiguous.permute().contiguous.permute().contiguous", "data_utils.pkload", "torch.cat", "multicrop.crop3d_cpu", "dualpath.DualData.transforms", "dualpath.DualData.transforms", "images.permute().contiguous.permute().contiguous.unsqueeze", "label.unsqueeze", "images.permute().contiguous.permute().contiguous.squeeze", "label.squeeze", "samples.permute().contiguous.permute().contiguous.permute", "sub_samples.permute().contiguous.permute().contiguous.permute", "images.permute().contiguous.permute().contiguous.permute", "data_utils.sample"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.data.data_utils.pkload", "home.repos.pwc.inspect_result.zwxu064_RANP.data.data_utils.pkload", "home.repos.pwc.inspect_result.zwxu064_RANP.data.rand.Constant.sample"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "path", "=", "self", ".", "paths", "[", "index", "]", "\n", "\n", "# faster than niffty", "\n", "#images, label = pkload(path + 'data_f32_divm.pkl')", "\n", "\n", "#images, label = pkload(path + 'data_f32.pkl')", "\n", "#images, label = torch.tensor(images), torch.tensor(label)", "\n", "\n", "images", ",", "label", "=", "pkload", "(", "path", "+", "'data_f32.pkl'", ")", "\n", "images", ",", "label", "=", "torch", ".", "from_numpy", "(", "images", ")", ",", "torch", ".", "from_numpy", "(", "label", ")", "\n", "\n", "\n", "if", "not", "self", ".", "crop", ":", "\n", "# transformation needs nhwtc", "\n", "            ", "images", ",", "label", "=", "images", ".", "unsqueeze", "(", "0", ")", ",", "label", ".", "unsqueeze", "(", "0", ")", "\n", "images", ",", "label", "=", "self", ".", "transforms", "(", "[", "images", ",", "label", "]", ")", "\n", "images", ",", "label", "=", "images", ".", "squeeze", "(", "0", ")", ",", "label", ".", "squeeze", "(", "0", ")", "\n", "\n", "images", "=", "images", ".", "permute", "(", "3", ",", "0", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "return", "(", "images", ",", "self", ".", "all_coords", ")", ",", "label", "\n", "\n", "", "if", "self", ".", "for_train", ":", "\n", "            ", "fg", ",", "bg", "=", "pkload", "(", "path", "+", "self", ".", "suffix", "+", "'coords.pkl'", ")", "\n", "coords", "=", "torch", ".", "cat", "(", "[", "sample", "(", "x", ",", "self", ".", "num_patches", "//", "2", ")", "for", "x", "in", "(", "fg", ",", "bg", ")", "]", ")", "\n", "", "else", ":", "\n", "            ", "coords", "=", "self", ".", "all_coords", "\n", "\n", "", "samples", "=", "multicrop", ".", "crop3d_cpu", "(", "images", ",", "coords", ",", "\n", "self", ".", "sample_size", ",", "self", ".", "sample_size", ",", "self", ".", "sample_size", ",", "1", ",", "False", ")", "\n", "\n", "sub_samples", "=", "multicrop", ".", "crop3d_cpu", "(", "images", ",", "coords", ",", "\n", "self", ".", "sub_sample_size", ",", "self", ".", "sub_sample_size", ",", "self", ".", "sub_sample_size", ",", "3", ",", "False", ")", "\n", "\n", "if", "self", ".", "return_target", ":", "\n", "            ", "target", "=", "multicrop", ".", "crop3d_cpu", "(", "\n", "label", ",", "coords", ",", "\n", "self", ".", "target_size", ",", "self", ".", "target_size", ",", "self", ".", "target_size", ",", "1", ",", "False", ")", "\n", "samples", ",", "sub_samples", ",", "target", "=", "self", ".", "transforms", "(", "[", "samples", ",", "sub_samples", ",", "target", "]", ")", "\n", "", "else", ":", "\n", "            ", "samples", ",", "sub_samples", "=", "self", ".", "transforms", "(", "[", "samples", ",", "sub_samples", "]", ")", "\n", "target", "=", "coords", "\n", "\n", "", "if", "self", ".", "for_train", ":", "label", "=", "_zero", "\n", "\n", "samples", "=", "samples", ".", "permute", "(", "0", ",", "4", ",", "1", ",", "2", ",", "3", ")", ".", "contiguous", "(", ")", "\n", "sub_samples", "=", "sub_samples", ".", "permute", "(", "0", ",", "4", ",", "1", ",", "2", ",", "3", ")", ".", "contiguous", "(", ")", "\n", "return", "(", "samples", ",", "sub_samples", ",", "target", ")", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.data.dualpath.DualData.__len__": [[346, 348], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "names", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.data.dualpath.DualData.collate": [[349, 359], ["list", "torch.cat", "zip", "torch.cat", "torch.randperm", "zip"], "methods", ["None"], ["", "def", "collate", "(", "self", ",", "batch", ")", ":", "\n", "        ", "data", ",", "label", "=", "list", "(", "zip", "(", "*", "batch", ")", ")", "\n", "data", "=", "[", "torch", ".", "cat", "(", "v", ")", "for", "v", "in", "zip", "(", "*", "data", ")", "]", "\n", "label", "=", "torch", ".", "cat", "(", "label", ")", "\n", "\n", "if", "self", ".", "for_train", ":", "\n", "            ", "perm", "=", "torch", ".", "randperm", "(", "data", "[", "0", "]", ".", "shape", "[", "0", "]", ")", "\n", "data", "=", "[", "t", "[", "perm", "]", "for", "t", "in", "data", "]", "\n", "\n", "", "return", "data", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.data.rand.Uniform.__init__": [[4, 7], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "a", ",", "b", ")", ":", "\n", "        ", "self", ".", "a", "=", "a", "\n", "self", ".", "b", "=", "b", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.data.rand.Uniform.sample": [[8, 10], ["random.uniform"], "methods", ["None"], ["", "def", "sample", "(", "self", ")", ":", "\n", "        ", "return", "random", ".", "uniform", "(", "self", ".", "a", ",", "self", ".", "b", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.data.rand.Gaussian.__init__": [[12, 15], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "mean", ",", "std", ")", ":", "\n", "        ", "self", ".", "mean", "=", "mean", "\n", "self", ".", "std", "=", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.data.rand.Gaussian.sample": [[16, 18], ["random.gauss"], "methods", ["None"], ["", "def", "sample", "(", "self", ")", ":", "\n", "        ", "return", "random", ".", "gauss", "(", "self", ".", "mean", ",", "self", ".", "std", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.data.rand.Constant.__init__": [[20, 22], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "val", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.data.rand.Constant.sample": [[23, 25], ["None"], "methods", ["None"], ["", "def", "sample", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.data.parcellation.nib_load": [[5, 12], ["nibabel.load", "nib.load.get_data", "nib.load.uncache"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.data.load"], ["def", "nib_load", "(", "file_name", ")", ":", "\n", "    ", "proxy", "=", "nib", ".", "load", "(", "file_name", ")", "\n", "data", "=", "proxy", ".", "get_data", "(", ")", "\n", "#print('thuyen', data.dtype)", "\n", "#data = data.astype('float32')", "\n", "proxy", ".", "uncache", "(", ")", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.data.singlepath.SingleData28.__init__": [[20, 37], ["eval", "data_utils.gen_feats", "open", "line.strip.strip.strip", "names.append", "os.path.join", "paths.append", "line.strip.strip.split"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.data.data_utils.gen_feats", "home.repos.pwc.inspect_result.zwxu064_RANP.utils.parser.AttrDict.strip"], ["    ", "def", "__init__", "(", "self", ",", "list_file", ",", "root", "=", "''", ",", "for_train", "=", "False", ",", "\n", "transforms", "=", "''", ",", "return_target", "=", "True", ",", "crop", "=", "True", ")", ":", "\n", "        ", "paths", ",", "names", "=", "[", "]", ",", "[", "]", "\n", "with", "open", "(", "list_file", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ":", "\n", "                ", "line", "=", "line", ".", "strip", "(", ")", "\n", "name", "=", "line", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "names", ".", "append", "(", "name", ")", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "line", ",", "name", "+", "'_'", ")", "\n", "paths", ".", "append", "(", "path", ")", "\n", "\n", "", "", "self", ".", "names", "=", "names", "\n", "self", ".", "paths", "=", "paths", "\n", "self", ".", "return_target", "=", "return_target", "\n", "\n", "self", ".", "transforms", "=", "eval", "(", "transforms", "or", "'Identity()'", ")", "\n", "self", ".", "feats", "=", "gen_feats", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.data.singlepath.SingleData28.__getitem__": [[38, 65], ["data_utils.pkload", "numpy.concatenate", "numpy.load", "numpy.ascontiguousarray", "numpy.ascontiguousarray", "singlepath.SingleData28.transforms", "numpy.array", "numpy.ascontiguousarray.transpose", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "singlepath.SingleData28.transforms", "b.sum"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.data.data_utils.pkload", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.data.load"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "path", "=", "self", ".", "paths", "[", "index", "]", "\n", "\n", "x", ",", "y", "=", "pkload", "(", "path", "+", "'data_f32.pkl'", ")", "\n", "x", "=", "np", ".", "concatenate", "(", "[", "x", ",", "self", ".", "feats", "]", ",", "-", "1", ")", "\n", "\n", "mask", "=", "np", ".", "load", "(", "path", "+", "'HarvardOxford-sub.npy'", ")", "\n", "# transforms work with nhwtc", "\n", "x", ",", "y", ",", "mask", "=", "x", "[", "None", ",", "...", "]", ",", "y", "[", "None", ",", "...", "]", ",", "mask", "[", "None", ",", "...", "]", "\n", "\n", "done", "=", "False", "\n", "if", "self", ".", "return_target", ":", "\n", "            ", "while", "not", "done", ":", "\n", "                ", "a", ",", "b", ",", "c", "=", "self", ".", "transforms", "(", "[", "x", ",", "y", ",", "mask", "]", ")", "\n", "if", "b", ".", "sum", "(", ")", ">", "0", ":", "\n", "                    ", "done", "=", "True", "\n", "x", ",", "y", ",", "mask", "=", "a", ",", "b", ",", "c", "\n", "", "", "", "else", ":", "\n", "            ", "x", ",", "mask", "=", "self", ".", "transforms", "(", "[", "x", ",", "mask", "]", ")", "\n", "y", "=", "np", ".", "array", "(", "[", "1", "]", ")", "\n", "\n", "", "x", "=", "np", ".", "ascontiguousarray", "(", "x", ".", "transpose", "(", "0", ",", "4", ",", "1", ",", "2", ",", "3", ")", ")", "\n", "y", "=", "np", ".", "ascontiguousarray", "(", "y", ")", "\n", "\n", "x", ",", "y", ",", "mask", "=", "torch", ".", "from_numpy", "(", "x", ")", ",", "torch", ".", "from_numpy", "(", "y", ")", ",", "torch", ".", "from_numpy", "(", "mask", ")", "\n", "\n", "return", "x", ",", "y", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.data.singlepath.SingleData28.__len__": [[67, 69], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "names", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.data.singlepath.SingleData28.collate": [[70, 72], ["torch.cat", "zip"], "methods", ["None"], ["", "def", "collate", "(", "self", ",", "batch", ")", ":", "\n", "        ", "return", "[", "torch", ".", "cat", "(", "v", ")", "for", "v", "in", "zip", "(", "*", "batch", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.data.singlepath.SingleData25.__init__": [[86, 102], ["eval", "open", "line.strip.strip.strip", "names.append", "os.path.join", "paths.append", "line.strip.strip.split"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.utils.parser.AttrDict.strip"], ["    ", "def", "__init__", "(", "self", ",", "list_file", ",", "root", "=", "''", ",", "for_train", "=", "False", ",", "\n", "transforms", "=", "''", ",", "return_target", "=", "True", ",", "crop", "=", "True", ")", ":", "\n", "        ", "paths", ",", "names", "=", "[", "]", ",", "[", "]", "\n", "with", "open", "(", "list_file", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ":", "\n", "                ", "line", "=", "line", ".", "strip", "(", ")", "\n", "name", "=", "line", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "names", ".", "append", "(", "name", ")", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "line", ",", "name", "+", "'_'", ")", "\n", "paths", ".", "append", "(", "path", ")", "\n", "\n", "", "", "self", ".", "names", "=", "names", "\n", "self", ".", "paths", "=", "paths", "\n", "self", ".", "return_target", "=", "return_target", "\n", "\n", "self", ".", "transforms", "=", "eval", "(", "transforms", "or", "'Identity()'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.data.singlepath.SingleData25.__getitem__": [[103, 129], ["data_utils.pkload", "numpy.load", "numpy.ascontiguousarray", "numpy.ascontiguousarray", "singlepath.SingleData25.transforms", "numpy.array", "numpy.ascontiguousarray.transpose", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "singlepath.SingleData25.transforms", "b.sum"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.data.data_utils.pkload", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.data.load"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "path", "=", "self", ".", "paths", "[", "index", "]", "\n", "\n", "x", ",", "y", "=", "pkload", "(", "path", "+", "'data_f32.pkl'", ")", "\n", "mask", "=", "np", ".", "load", "(", "path", "+", "'HarvardOxford-sub.npy'", ")", "\n", "\n", "# transforms work with nhwtc", "\n", "x", ",", "y", ",", "mask", "=", "x", "[", "None", ",", "...", "]", ",", "y", "[", "None", ",", "...", "]", ",", "mask", "[", "None", ",", "...", "]", "\n", "\n", "done", "=", "False", "\n", "if", "self", ".", "return_target", ":", "\n", "            ", "while", "not", "done", ":", "\n", "                ", "a", ",", "b", ",", "c", "=", "self", ".", "transforms", "(", "[", "x", ",", "y", ",", "mask", "]", ")", "\n", "if", "b", ".", "sum", "(", ")", ">", "0", ":", "\n", "                    ", "done", "=", "True", "\n", "x", ",", "y", ",", "mask", "=", "a", ",", "b", ",", "c", "\n", "", "", "", "else", ":", "\n", "            ", "x", ",", "mask", "=", "self", ".", "transforms", "(", "[", "x", ",", "mask", "]", ")", "\n", "y", "=", "np", ".", "array", "(", "[", "1", "]", ")", "\n", "\n", "", "x", "=", "np", ".", "ascontiguousarray", "(", "x", ".", "transpose", "(", "0", ",", "4", ",", "1", ",", "2", ",", "3", ")", ")", "\n", "y", "=", "np", ".", "ascontiguousarray", "(", "y", ")", "\n", "\n", "x", ",", "y", ",", "mask", "=", "torch", ".", "from_numpy", "(", "x", ")", ",", "torch", ".", "from_numpy", "(", "y", ")", ",", "torch", ".", "from_numpy", "(", "mask", ")", "\n", "\n", "return", "x", ",", "y", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.data.singlepath.SingleData25.__len__": [[130, 132], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "names", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.data.singlepath.SingleData25.collate": [[133, 135], ["torch.cat", "zip"], "methods", ["None"], ["", "def", "collate", "(", "self", ",", "batch", ")", ":", "\n", "        ", "return", "[", "torch", ".", "cat", "(", "v", ")", "for", "v", "in", "zip", "(", "*", "batch", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.data.singlepath.SingleData.__init__": [[149, 165], ["eval", "open", "line.strip.strip.strip", "names.append", "os.path.join", "paths.append", "line.strip.strip.split"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.utils.parser.AttrDict.strip"], ["    ", "def", "__init__", "(", "self", ",", "list_file", ",", "root", "=", "''", ",", "for_train", "=", "False", ",", "\n", "transforms", "=", "''", ",", "return_target", "=", "True", ",", "crop", "=", "True", ")", ":", "\n", "        ", "paths", ",", "names", "=", "[", "]", ",", "[", "]", "\n", "with", "open", "(", "list_file", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ":", "\n", "                ", "line", "=", "line", ".", "strip", "(", ")", "\n", "name", "=", "line", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "names", ".", "append", "(", "name", ")", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "line", ",", "name", "+", "'_'", ")", "\n", "paths", ".", "append", "(", "path", ")", "\n", "\n", "", "", "self", ".", "names", "=", "names", "\n", "self", ".", "paths", "=", "paths", "\n", "self", ".", "return_target", "=", "return_target", "\n", "\n", "self", ".", "transforms", "=", "eval", "(", "transforms", "or", "'Identity()'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.data.singlepath.SingleData.__getitem__": [[166, 192], ["data_utils.pkload", "numpy.ascontiguousarray", "numpy.ascontiguousarray", "singlepath.SingleData.transforms", "singlepath.SingleData.transpose", "torch.from_numpy", "torch.from_numpy", "singlepath.SingleData.squeeze", "numpy.ascontiguousarray.squeeze", "singlepath.SingleData.transforms", "b.sum"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.data.data_utils.pkload"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "name", "=", "self", ".", "names", "[", "index", "]", "\n", "path", "=", "self", ".", "paths", "[", "index", "]", "\n", "\n", "x", ",", "y", "=", "pkload", "(", "path", "+", "'data_f32.pkl'", ")", "\n", "\n", "# transforms work with nhwtc", "\n", "x", ",", "y", "=", "x", "[", "None", ",", "...", "]", ",", "y", "[", "None", ",", "...", "]", "\n", "\n", "done", "=", "False", "\n", "if", "self", ".", "return_target", ":", "\n", "            ", "while", "not", "done", ":", "\n", "                ", "a", ",", "b", "=", "self", ".", "transforms", "(", "[", "x", ",", "y", "]", ")", "\n", "if", "b", ".", "sum", "(", ")", ">", "0", ":", "\n", "                    ", "done", "=", "True", "\n", "x", ",", "y", "=", "a", ",", "b", "\n", "\n", "", "", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "transforms", "(", "x", ")", "\n", "\n", "", "x", "=", "np", ".", "ascontiguousarray", "(", "x", ".", "transpose", "(", "0", ",", "4", ",", "1", ",", "2", ",", "3", ")", ")", "\n", "y", "=", "np", ".", "ascontiguousarray", "(", "y", ")", "\n", "\n", "x", ",", "y", "=", "torch", ".", "from_numpy", "(", "x", ")", ",", "torch", ".", "from_numpy", "(", "y", ")", "\n", "\n", "return", "x", ".", "squeeze", "(", "0", ")", ",", "y", ".", "squeeze", "(", "0", ")", ",", "name", "\n", "# return x, y", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.data.singlepath.SingleData.__len__": [[194, 196], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "names", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.data.singlepath.SingleData.collate": [[197, 199], ["torch.cat", "zip"], "methods", ["None"], ["", "def", "collate", "(", "self", ",", "batch", ")", ":", "\n", "        ", "return", "[", "torch", ".", "cat", "(", "v", ")", "for", "v", "in", "zip", "(", "*", "batch", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.miccai.myutils.AverageMeter.__init__": [[355, 357], ["myutils.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.AverageMeter.reset"], ["  ", "def", "__init__", "(", "self", ")", ":", "\n", "    ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.miccai.myutils.AverageMeter.reset": [[358, 362], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "    ", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.miccai.myutils.AverageMeter.update": [[363, 367], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "    ", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.miccai.myutils.FlipChannels.__call__": [[370, 373], ["PIL.Image.fromarray", "numpy.array", "img.astype"], "methods", ["None"], ["  ", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "    ", "img", "=", "np", ".", "array", "(", "img", ")", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "return", "Image", ".", "fromarray", "(", "img", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.miccai.myutils.MaskToTensor.__init__": [[376, 378], ["None"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "enable_long", "=", "True", ")", ":", "\n", "    ", "self", ".", "enable_long", "=", "enable_long", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.miccai.myutils.MaskToTensor.__call__": [[379, 386], ["torch.from_numpy", "numpy.array", "torch.from_numpy.long"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "mask", ")", ":", "\n", "    ", "if", "mask", "is", "not", "None", ":", "\n", "      ", "mask_tensor", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "mask", ",", "dtype", "=", "np", ".", "float32", ")", ")", "\n", "mask_tensor", "=", "mask_tensor", ".", "long", "(", ")", "if", "self", ".", "enable_long", "else", "mask_tensor", "\n", "return", "mask_tensor", "\n", "", "else", ":", "\n", "      ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.miccai.myutils.GTToTensor.__init__": [[388, 390], ["None"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "enable_long", "=", "False", ")", ":", "\n", "    ", "self", ".", "enable_long", "=", "enable_long", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.miccai.myutils.GTToTensor.__call__": [[391, 400], ["numpy.divide", "torch.from_numpy", "numpy.array", "numpy.round", "torch.from_numpy.long"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "mask", ",", "scale", "=", "1", ",", "use_round", "=", "False", ")", ":", "\n", "    ", "if", "mask", "is", "not", "None", ":", "\n", "      ", "mask_scale", "=", "np", ".", "divide", "(", "np", ".", "array", "(", "mask", ",", "dtype", "=", "np", ".", "float32", ")", ",", "scale", ")", "\n", "mask_scale", "=", "np", ".", "round", "(", "mask_scale", ")", "if", "use_round", "else", "mask_scale", "\n", "mask_scale", "=", "torch", ".", "from_numpy", "(", "mask_scale", ")", "\n", "mask_scale", "=", "mask_scale", ".", "long", "(", ")", "if", "self", ".", "enable_long", "else", "mask_scale", "\n", "return", "mask_scale", "\n", "", "else", ":", "\n", "      ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.miccai.myutils.DeNormalize.__init__": [[403, 406], ["None"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "mean", ",", "std", ")", ":", "\n", "    ", "self", ".", "mean", "=", "mean", "\n", "self", ".", "std", "=", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.miccai.myutils.DeNormalize.__call__": [[407, 411], ["zip", "t.mul_().add_", "t.mul_"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "tensor", ")", ":", "\n", "    ", "for", "t", ",", "m", ",", "s", "in", "zip", "(", "tensor", ",", "self", ".", "mean", ",", "self", ".", "std", ")", ":", "\n", "      ", "t", ".", "mul_", "(", "s", ")", ".", "add_", "(", "m", ")", "\n", "", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.miccai.myutils.SlidingCrop.__init__": [[414, 418], ["None"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "crop_size", ",", "stride_rate", ",", "ignore_label", ")", ":", "\n", "    ", "self", ".", "crop_size", "=", "crop_size", "\n", "self", ".", "stride_rate", "=", "stride_rate", "\n", "self", ".", "ignore_label", "=", "ignore_label", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.miccai.myutils.SlidingCrop._pad": [[419, 427], ["max", "max", "numpy.pad", "numpy.pad"], "methods", ["None"], ["", "def", "_pad", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "    ", "h", ",", "w", "=", "img", ".", "shape", "[", ":", "2", "]", "\n", "pad_h", "=", "max", "(", "self", ".", "crop_size", "-", "h", ",", "0", ")", "\n", "pad_w", "=", "max", "(", "self", ".", "crop_size", "-", "w", ",", "0", ")", "\n", "img", "=", "np", ".", "pad", "(", "img", ",", "(", "(", "0", ",", "pad_h", ")", ",", "(", "0", ",", "pad_w", ")", ",", "(", "0", ",", "0", ")", ")", ",", "'constant'", ")", "\n", "mask", "=", "np", ".", "pad", "(", "mask", ",", "(", "(", "0", ",", "pad_h", ")", ",", "(", "0", ",", "pad_w", ")", ")", ",", "'constant'", ",", "\n", "constant_values", "=", "self", ".", "ignore_label", ")", "\n", "return", "img", ",", "mask", ",", "h", ",", "w", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.miccai.myutils.SlidingCrop.__call__": [[428, 459], ["max", "numpy.array", "numpy.array", "int", "range", "myutils.SlidingCrop._pad", "PIL.Image.fromarray().convert", "PIL.Image.fromarray().convert", "math.ceil", "int", "int", "range", "math.ceil", "math.ceil", "myutils.SlidingCrop._pad", "img_slices.append", "mask_slices.append", "slices_info.append", "PIL.Image.fromarray", "PIL.Image.fromarray", "PIL.Image.fromarray().convert", "PIL.Image.fromarray().convert", "PIL.Image.fromarray().convert.astype", "PIL.Image.fromarray().convert.astype", "float", "float", "PIL.Image.fromarray", "PIL.Image.fromarray", "img_sub.astype", "mask_sub.astype"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.SlidingCrop._pad", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.SlidingCrop._pad"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "    ", "assert", "img", ".", "size", "==", "mask", ".", "size", "\n", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "long_size", "=", "max", "(", "h", ",", "w", ")", "\n", "img", "=", "np", ".", "array", "(", "img", ")", "\n", "mask", "=", "np", ".", "array", "(", "mask", ")", "\n", "\n", "if", "long_size", ">", "self", ".", "crop_size", ":", "\n", "      ", "stride", "=", "int", "(", "math", ".", "ceil", "(", "self", ".", "crop_size", "*", "self", ".", "stride_rate", ")", ")", "\n", "h_step_num", "=", "int", "(", "math", ".", "ceil", "(", "(", "h", "-", "self", ".", "crop_size", ")", "/", "float", "(", "stride", ")", ")", ")", "+", "1", "\n", "w_step_num", "=", "int", "(", "math", ".", "ceil", "(", "(", "w", "-", "self", ".", "crop_size", ")", "/", "float", "(", "stride", ")", ")", ")", "+", "1", "\n", "img_slices", ",", "mask_slices", ",", "slices_info", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "yy", "in", "range", "(", "h_step_num", ")", ":", "\n", "        ", "for", "xx", "in", "range", "(", "w_step_num", ")", ":", "\n", "          ", "sy", ",", "sx", "=", "yy", "*", "stride", ",", "xx", "*", "stride", "\n", "ey", ",", "ex", "=", "sy", "+", "self", ".", "crop_size", ",", "sx", "+", "self", ".", "crop_size", "\n", "img_sub", "=", "img", "[", "sy", ":", "ey", ",", "sx", ":", "ex", ",", ":", "]", "\n", "mask_sub", "=", "mask", "[", "sy", ":", "ey", ",", "sx", ":", "ex", "]", "\n", "img_sub", ",", "mask_sub", ",", "sub_h", ",", "sub_w", "=", "self", ".", "_pad", "(", "img_sub", ",", "mask_sub", ")", "\n", "img_slices", ".", "append", "(", "Image", ".", "fromarray", "(", "img_sub", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", ".", "convert", "(", "'RGB'", ")", ")", "\n", "mask_slices", ".", "append", "(", "Image", ".", "fromarray", "(", "mask_sub", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", ".", "convert", "(", "'P'", ")", ")", "\n", "slices_info", ".", "append", "(", "[", "sy", ",", "ey", ",", "sx", ",", "ex", ",", "sub_h", ",", "sub_w", "]", ")", "\n", "", "", "return", "img_slices", ",", "mask_slices", ",", "slices_info", "\n", "", "else", ":", "\n", "      ", "img", ",", "mask", ",", "sub_h", ",", "sub_w", "=", "self", ".", "_pad", "(", "img", ",", "mask", ")", "\n", "img", "=", "Image", ".", "fromarray", "(", "img", ".", "astype", "(", "np", ".", "uint8", ")", ")", ".", "convert", "(", "'RGB'", ")", "\n", "mask", "=", "Image", ".", "fromarray", "(", "mask", ".", "astype", "(", "np", ".", "uint8", ")", ")", ".", "convert", "(", "'P'", ")", "\n", "return", "[", "img", "]", ",", "[", "mask", "]", ",", "[", "[", "0", ",", "sub_h", ",", "0", ",", "sub_w", ",", "sub_h", ",", "sub_w", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.miccai.myutils.RandomCrop.__init__": [[462, 467], ["isinstance", "int", "int"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "size", "=", "None", ")", ":", "\n", "    ", "if", "isinstance", "(", "size", ",", "numbers", ".", "Number", ")", ":", "\n", "      ", "self", ".", "size", "=", "(", "int", "(", "size", ")", ",", "int", "(", "size", ")", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.miccai.myutils.RandomCrop.__call__": [[468, 497], ["isinstance", "random.randint", "random.randint", "max", "max", "outputs.append", "outputs.append", "math.ceil", "math.ceil", "PIL.ImageOps.expand"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "is_list", "=", "isinstance", "(", "inputs", ",", "list", ")", "\n", "inputs", "=", "[", "inputs", "]", "if", "not", "is_list", "else", "inputs", "\n", "outputs", "=", "[", "]", "\n", "w", ",", "h", "=", "inputs", "[", "0", "]", ".", "size", "\n", "\n", "if", "self", ".", "size", "is", "None", ":", "\n", "      ", "th", ",", "tw", "=", "math", ".", "ceil", "(", "h", "/", "32", ")", "*", "32", ",", "math", ".", "ceil", "(", "w", "/", "32", ")", "*", "32", "\n", "", "else", ":", "\n", "      ", "th", ",", "tw", "=", "self", ".", "size", "\n", "\n", "", "w_gap", ",", "h_gap", "=", "tw", "-", "w", ",", "th", "-", "h", "\n", "w_rand", ",", "h_rand", "=", "random", ".", "randint", "(", "0", ",", "max", "(", "w", "-", "tw", ",", "0", ")", ")", ",", "random", ".", "randint", "(", "0", ",", "max", "(", "h", "-", "th", ",", "0", ")", ")", "\n", "w_0", "=", "(", "w_gap", "//", "2", ")", "if", "(", "w", "-", "tw", "<", "0", ")", "else", "-", "w_rand", "\n", "h_0", "=", "(", "h_gap", "//", "2", ")", "if", "(", "h", "-", "th", "<", "0", ")", "else", "-", "h_rand", "\n", "border", "=", "(", "w_0", ",", "h_0", ",", "w_gap", "-", "w_0", ",", "h_gap", "-", "h_0", ")", "\n", "\n", "for", "input", "in", "inputs", ":", "\n", "      ", "if", "input", "is", "not", "None", ":", "\n", "# border:(left,up,right,down)", "\n", "        ", "fill_v", "=", "0", "if", "input", ".", "mode", "==", "'RGB'", "else", "255", "\n", "outputs", ".", "append", "(", "ImageOps", ".", "expand", "(", "input", ",", "border", "=", "border", ",", "fill", "=", "fill_v", ")", ")", "\n", "", "else", ":", "\n", "        ", "outputs", ".", "append", "(", "None", ")", "\n", "\n", "", "", "if", "not", "is_list", ":", "\n", "      ", "return", "outputs", "[", "0", "]", "\n", "", "else", ":", "\n", "      ", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.miccai.myutils.RandomCrop3D.__init__": [[501, 508], ["isinstance", "int", "int", "int"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "size", "=", "None", ",", "enable_crop_random_seed", "=", "False", ")", ":", "\n", "    ", "if", "isinstance", "(", "size", ",", "numbers", ".", "Number", ")", ":", "\n", "      ", "self", ".", "size", "=", "(", "int", "(", "size", ")", ",", "int", "(", "size", ")", ",", "int", "(", "size", ")", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "size", "=", "size", "\n", "\n", "", "self", ".", "enable_crop_random_seed", "=", "enable_crop_random_seed", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.miccai.myutils.RandomCrop3D.__call__": [[509, 539], ["isinstance", "max", "max", "max", "random.randint", "random.randint", "random.randint", "outputs.append", "outputs.append", "math.ceil", "math.ceil", "math.ceil"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "is_list", "=", "isinstance", "(", "inputs", ",", "list", ")", "\n", "inputs", "=", "[", "inputs", "]", "if", "(", "not", "is_list", ")", "else", "inputs", "\n", "outputs", "=", "[", "]", "\n", "h", ",", "w", ",", "d", "=", "inputs", "[", "0", "]", ".", "shape", "[", "-", "3", ":", "]", "\n", "\n", "if", "self", ".", "size", "is", "None", ":", "\n", "      ", "th", ",", "tw", ",", "td", "=", "math", ".", "ceil", "(", "h", "/", "32", ")", "*", "32", ",", "math", ".", "ceil", "(", "w", "/", "32", ")", "*", "32", ",", "math", ".", "ceil", "(", "d", "/", "32", ")", "*", "32", "\n", "", "else", ":", "\n", "      ", "th", ",", "tw", ",", "td", "=", "self", ".", "size", "\n", "\n", "", "h_gap", ",", "w_gap", ",", "d_gap", "=", "max", "(", "h", "-", "th", ",", "0", ")", ",", "max", "(", "w", "-", "tw", ",", "0", ")", ",", "max", "(", "d", "-", "td", ",", "0", ")", "\n", "\n", "if", "self", ".", "enable_crop_random_seed", ":", "\n", "      ", "h_rand", ",", "w_rand", ",", "d_rand", "=", "random", ".", "randint", "(", "0", ",", "h_gap", "-", "1", ")", ",", "random", ".", "randint", "(", "0", ",", "w_gap", "-", "1", ")", ",", "random", ".", "randint", "(", "0", ",", "d_gap", "-", "1", ")", "\n", "", "else", ":", "\n", "      ", "h_rand", ",", "w_rand", ",", "d_rand", "=", "h_gap", "//", "2", ",", "w_gap", "//", "2", ",", "d_gap", "//", "2", "\n", "\n", "", "for", "input", "in", "inputs", ":", "\n", "      ", "if", "input", "is", "not", "None", ":", "\n", "        ", "new_input", "=", "input", "[", ":", ",", "h_rand", ":", "-", "(", "h_gap", "-", "h_rand", ")", ",", "w_rand", ":", "-", "(", "w_gap", "-", "w_rand", ")", ",", "\n", "d_rand", ":", "-", "(", "d_gap", "-", "d_rand", ")", "]", "\n", "outputs", ".", "append", "(", "new_input", ")", "\n", "", "else", ":", "\n", "        ", "outputs", ".", "append", "(", "None", ")", "\n", "\n", "", "", "if", "not", "is_list", ":", "\n", "      ", "return", "outputs", "[", "0", "]", "\n", "", "else", ":", "\n", "      ", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.miccai.myutils.RandomHorizontalFlip.__init__": [[542, 544], ["None"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "p", "=", "0.5", ")", ":", "\n", "    ", "self", ".", "p", "=", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.miccai.myutils.RandomHorizontalFlip.__call__": [[545, 564], ["isinstance", "numpy.random.random", "outputs.append", "outputs.append", "torchvision.RandomHorizontalFlip"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "is_list", "=", "isinstance", "(", "inputs", ",", "list", ")", "\n", "outputs", "=", "[", "]", "\n", "inputs", "=", "[", "inputs", "]", "if", "not", "is_list", "else", "inputs", "\n", "enable_flip", "=", "np", ".", "random", ".", "random", "(", ")", "<", "self", ".", "p", "\n", "\n", "if", "enable_flip", ":", "\n", "      ", "for", "input", "in", "inputs", ":", "\n", "        ", "if", "input", "is", "not", "None", ":", "\n", "          ", "outputs", ".", "append", "(", "transforms", ".", "RandomHorizontalFlip", "(", "p", "=", "1.", ")", "(", "input", ")", ")", "\n", "", "else", ":", "\n", "          ", "outputs", ".", "append", "(", "None", ")", "\n", "", "", "", "else", ":", "\n", "      ", "outputs", "=", "inputs", "\n", "\n", "", "if", "not", "is_list", ":", "\n", "      ", "return", "outputs", "[", "0", "]", "\n", "", "else", ":", "\n", "      ", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.miccai.myutils.RandomVerticalFlip.__init__": [[567, 569], ["None"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "p", "=", "0.5", ")", ":", "\n", "    ", "self", ".", "p", "=", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.miccai.myutils.RandomVerticalFlip.__call__": [[570, 589], ["isinstance", "numpy.random.random", "outputs.append", "outputs.append", "torchvision.RandomVerticalFlip"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "is_list", "=", "isinstance", "(", "inputs", ",", "list", ")", "\n", "outputs", "=", "[", "]", "\n", "inputs", "=", "[", "inputs", "]", "if", "not", "is_list", "else", "inputs", "\n", "enable_flip", "=", "np", ".", "random", ".", "random", "(", ")", "<", "self", ".", "p", "\n", "\n", "if", "enable_flip", ":", "\n", "      ", "for", "input", "in", "inputs", ":", "\n", "        ", "if", "input", "is", "not", "None", ":", "\n", "          ", "outputs", ".", "append", "(", "transforms", ".", "RandomVerticalFlip", "(", "p", "=", "1.", ")", "(", "input", ")", ")", "\n", "", "else", ":", "\n", "          ", "outputs", ".", "append", "(", "None", ")", "\n", "", "", "", "else", ":", "\n", "      ", "outputs", "=", "inputs", "\n", "\n", "", "if", "not", "is_list", ":", "\n", "      ", "return", "outputs", "[", "0", "]", "\n", "", "else", ":", "\n", "      ", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.miccai.myutils.CenterCrop.__init__": [[592, 598], ["isinstance", "int", "int"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "size", "=", "None", ",", "mode", "=", "'left_up'", ")", ":", "\n", "    ", "self", ".", "mode", "=", "mode", "\n", "if", "isinstance", "(", "size", ",", "numbers", ".", "Number", ")", ":", "\n", "      ", "self", ".", "size", "=", "(", "int", "(", "size", ")", ",", "int", "(", "size", ")", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.miccai.myutils.CenterCrop.__call__": [[599, 626], ["isinstance", "outputs.append", "outputs.append", "math.ceil", "math.ceil", "PIL.ImageOps.expand"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "is_list", "=", "isinstance", "(", "inputs", ",", "list", ")", "\n", "outputs", "=", "[", "]", "\n", "inputs", "=", "[", "inputs", "]", "if", "not", "is_list", "else", "inputs", "\n", "w", ",", "h", "=", "inputs", "[", "0", "]", ".", "size", "\n", "\n", "if", "self", ".", "size", "is", "None", ":", "\n", "      ", "th", ",", "tw", "=", "math", ".", "ceil", "(", "h", "/", "32", ")", "*", "32", ",", "math", ".", "ceil", "(", "w", "/", "32", ")", "*", "32", "\n", "", "else", ":", "\n", "      ", "th", ",", "tw", "=", "self", ".", "size", "\n", "\n", "", "w_gap", ",", "h_gap", "=", "tw", "-", "w", ",", "th", "-", "h", "\n", "w_0", ",", "h_0", "=", "w_gap", "//", "2", ",", "h_gap", "//", "2", "\n", "border", "=", "(", "w_0", ",", "h_0", ",", "w_gap", "-", "w_0", ",", "h_gap", "-", "h_0", ")", "\n", "\n", "for", "input", "in", "inputs", ":", "\n", "      ", "if", "input", "is", "not", "None", ":", "\n", "# border:(left,up,right,down)", "\n", "        ", "fill_v", "=", "0", "if", "input", ".", "mode", "==", "'RGB'", "else", "255", "\n", "outputs", ".", "append", "(", "ImageOps", ".", "expand", "(", "input", ",", "border", "=", "border", ",", "fill", "=", "fill_v", ")", ")", "\n", "", "else", ":", "\n", "        ", "outputs", ".", "append", "(", "None", ")", "\n", "\n", "", "", "if", "not", "is_list", ":", "\n", "      ", "return", "outputs", "[", "0", "]", "\n", "", "else", ":", "\n", "      ", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.miccai.myutils.RandomGaussianBlur.__call__": [[629, 644], ["isinstance", "outputs.append", "outputs.append", "random.random", "input.filter", "PIL.ImageFilter.GaussianBlur", "random.random"], "methods", ["None"], ["  ", "def", "__call__", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "is_list", "=", "isinstance", "(", "inputs", ",", "list", ")", "\n", "outputs", "=", "[", "]", "\n", "inputs", "=", "[", "inputs", "]", "if", "not", "is_list", "else", "inputs", "\n", "\n", "for", "input", "in", "inputs", ":", "\n", "      ", "if", "(", "input", ".", "mode", "==", "'RGB'", ")", "and", "(", "random", ".", "random", "(", ")", "<", "0.5", ")", ":", "\n", "         ", "outputs", ".", "append", "(", "input", ".", "filter", "(", "ImageFilter", ".", "GaussianBlur", "(", "radius", "=", "random", ".", "random", "(", ")", ")", ")", ")", "\n", "", "else", ":", "\n", "         ", "outputs", ".", "append", "(", "input", ")", "\n", "\n", "", "", "if", "not", "is_list", ":", "\n", "      ", "return", "outputs", "[", "0", "]", "\n", "", "else", ":", "\n", "      ", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.miccai.myutils.CrossEntropyLoss2D.__init__": [[647, 652], ["torch.nn.Module.__init__", "torch.nn.NLLLoss"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.StereoLoss.__init__"], ["  ", "def", "__init__", "(", "self", ",", "weight", "=", "None", ",", "reduction", "=", "'mean'", ",", "ignore_index", "=", "255", ",", "reg", "=", "0", ",", "eps", "=", "1e-10", ")", ":", "\n", "    ", "super", "(", "CrossEntropyLoss2D", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "nll_loss", "=", "nn", ".", "NLLLoss", "(", "weight", ",", "reduction", "=", "reduction", ",", "ignore_index", "=", "ignore_index", ")", "\n", "self", ".", "reg", "=", "reg", "\n", "self", ".", "eps", "=", "eps", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.miccai.myutils.CrossEntropyLoss2D.forward": [[654, 668], ["myutils.CrossEntropyLoss2D.nll_loss", "len", "predicts.reshape.reshape.size", "predicts.reshape.reshape.reshape", "model.parameters", "predicts.reshape.reshape.size", "m.pow().sum", "m.pow"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "predicts", ",", "targets", ",", "model", "=", "None", ")", ":", "\n", "    ", "if", "len", "(", "predicts", ".", "size", "(", ")", ")", "==", "6", ":", "\n", "      ", "batch", ",", "_", ",", "_", ",", "n_dir_type", ",", "height", ",", "width", "=", "predicts", ".", "size", "(", ")", "\n", "predicts", "=", "predicts", ".", "reshape", "(", "batch", ",", "-", "1", ",", "n_dir_type", ",", "height", ",", "width", ")", "\n", "\n", "", "loss", "=", "self", ".", "nll_loss", "(", "(", "predicts", "+", "self", ".", "eps", ")", ".", "log", "(", ")", ",", "targets", ")", "\n", "\n", "param_loss", "=", "0", "\n", "if", "(", "self", ".", "reg", ">", "0", ")", "and", "(", "model", "is", "not", "None", ")", ":", "\n", "      ", "for", "m", "in", "model", ".", "parameters", "(", ")", ":", "\n", "# param_loss += m.norm(2)", "\n", "        ", "param_loss", "+=", "m", ".", "pow", "(", "2", ")", ".", "sum", "(", ")", "\n", "\n", "", "", "return", "loss", "+", "self", ".", "reg", "*", "param_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.miccai.myutils.StereoLoss.__init__": [[671, 681], ["torch.nn.Module.__init__", "torch.nn.SmoothL1Loss", "torch.nn.L1Loss", "torch.nn.MSELoss"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.StereoLoss.__init__"], ["  ", "def", "__init__", "(", "self", ",", "loss_type", "=", "'smooth_l1'", ",", "reduction", "=", "'mean'", ",", "reg", "=", "1e-4", ")", ":", "\n", "    ", "super", "(", "StereoLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "loss_type", "==", "'smooth_l1'", ":", "\n", "      ", "self", ".", "loss_fn", "=", "nn", ".", "SmoothL1Loss", "(", "reduction", "=", "reduction", ")", "\n", "", "elif", "loss_type", "==", "'l1'", ":", "\n", "      ", "self", ".", "loss_fn", "=", "nn", ".", "L1Loss", "(", "reduction", "=", "reduction", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "loss_fn", "=", "nn", ".", "MSELoss", "(", "reduction", "=", "reduction", ")", "\n", "\n", "", "self", ".", "reg", "=", "reg", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.miccai.myutils.StereoLoss.forward": [[682, 692], ["myutils.StereoLoss.loss_fn", "model.parameters", "m.pow().sum", "m.pow"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "predicts", ",", "targets", ",", "model", "=", "None", ")", ":", "\n", "    ", "loss", "=", "self", ".", "loss_fn", "(", "predicts", ",", "targets", ")", "\n", "param_loss", "=", "0", "\n", "\n", "if", "(", "self", ".", "reg", ">", "0", ")", "and", "(", "model", "is", "not", "None", ")", ":", "\n", "      ", "for", "m", "in", "model", ".", "parameters", "(", ")", ":", "\n", "# param_loss += m.norm(2)", "\n", "        ", "param_loss", "+=", "m", ".", "pow", "(", "2", ")", ".", "sum", "(", ")", "\n", "\n", "", "", "return", "loss", "+", "self", ".", "reg", "*", "param_loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zwxu064_RANP.miccai.myutils.remove_tree": [[17, 24], ["os.walk", "os.remove", "os.path.join", "file.split", "wildcards.split"], "function", ["None"], ["def", "remove_tree", "(", "fold_dir", ",", "wildcards", "=", "None", ")", ":", "\n", "  ", "for", "root", ",", "dirs", ",", "files", "in", "os", ".", "walk", "(", "fold_dir", ")", ":", "\n", "    ", "for", "file", "in", "files", ":", "\n", "      ", "if", "wildcards", "is", "not", "None", ":", "\n", "        ", "if", "(", "file", ".", "split", "(", "'.'", ")", "[", "-", "1", "]", "not", "in", "wildcards", ".", "split", "(", "'.'", ")", "[", "-", "1", "]", ")", ":", "\n", "          ", "continue", "\n", "", "", "os", ".", "remove", "(", "os", ".", "path", ".", "join", "(", "root", ",", "file", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.miccai.myutils.parse_json": [[27, 35], ["os.path.exists", "open", "json.load"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.data.load"], ["", "", "", "def", "parse_json", "(", "file_path", ")", ":", "\n", "  ", "if", "not", "os", ".", "path", ".", "exists", "(", "file_path", ")", ":", "\n", "    ", "raise", "FileNotFoundError", "\n", "\n", "", "with", "open", "(", "file_path", ",", "'r'", ")", "as", "config", ":", "\n", "    ", "data", "=", "json", ".", "load", "(", "config", ")", "\n", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.miccai.myutils.check_dir": [[37, 40], ["os.path.exists", "os.mkdir"], "function", ["None"], ["", "def", "check_dir", "(", "dir_name", ")", ":", "\n", "  ", "if", "not", "os", ".", "path", ".", "exists", "(", "dir_name", ")", ":", "\n", "    ", "os", ".", "mkdir", "(", "dir_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.miccai.myutils.print_info": [[42, 64], ["len", "zip", "print", "range", "obj.keys", "isinstance", "isinstance"], "function", ["None"], ["", "", "def", "print_info", "(", "obj", ")", ":", "\n", "  ", "obj_len", "=", "len", "(", "obj", ")", "\n", "string", "=", "''", "\n", "\n", "for", "i", ",", "key", "in", "zip", "(", "range", "(", "obj_len", ")", ",", "obj", ".", "keys", "(", ")", ")", ":", "\n", "    ", "if", "i", "<", "obj_len", "-", "1", ":", "\n", "      ", "if", "obj", "[", "key", "]", "==", "'best'", ":", "\n", "        ", "string", "+=", "'[={}] '", ".", "format", "(", "obj", "[", "key", "]", ")", "\n", "", "elif", "obj", "[", "key", "]", "in", "{", "'train'", ",", "'valid'", "}", ":", "\n", "        ", "string", "+=", "'[{}] '", ".", "format", "(", "obj", "[", "key", "]", ")", "\n", "", "else", ":", "\n", "        ", "if", "isinstance", "(", "obj", "[", "key", "]", ",", "(", "float", ",", "np", ".", "float64", ",", "np", ".", "float32", ")", ")", ":", "\n", "          ", "string", "+=", "'{}: {:.4f}, '", ".", "format", "(", "key", ",", "obj", "[", "key", "]", ")", ".", "rstrip", "(", "'0'", ")", ".", "rstrip", "(", "'.'", ")", "\n", "", "else", ":", "\n", "          ", "string", "+=", "'{}: {}, '", ".", "format", "(", "key", ",", "obj", "[", "key", "]", ")", "\n", "", "", "", "elif", "i", "==", "obj_len", "-", "1", ":", "\n", "      ", "if", "isinstance", "(", "obj", "[", "key", "]", ",", "(", "float", ",", "np", ".", "float64", ",", "np", ".", "float32", ")", ")", ":", "\n", "        ", "string", "+=", "'{}: {:.4f}'", ".", "format", "(", "key", ",", "obj", "[", "key", "]", ")", ".", "rstrip", "(", "'0'", ")", ".", "rstrip", "(", "'.'", ")", "\n", "", "else", ":", "\n", "        ", "string", "+=", "'{}: {}'", ".", "format", "(", "key", ",", "obj", "[", "key", "]", ")", "\n", "\n", "", "", "", "print", "(", "string", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.miccai.myutils.save_disp_image": [[66, 87], ["numpy.round", "PIL.Image.fromarray", "Image.fromarray.save", "len", "np.transpose.squeeze", "numpy.multiply", "np.round.astype", "PIL.Image.fromarray", "Image.fromarray.save", "np.transpose.size", "np.transpose.cpu().data.numpy", "scale.data.numpy", "len", "np.transpose.squeeze", "numpy.transpose", "np.transpose.size", "np.transpose.size", "np.transpose.cpu().data.numpy().astype", "np.transpose.cpu", "np.transpose.cpu().data.numpy", "np.transpose.cpu"], "function", ["None"], ["", "def", "save_disp_image", "(", "img_path", ",", "img", ",", "scale", ",", "mode", "=", "'grey'", ")", ":", "\n", "  ", "assert", "(", "img_path", "is", "not", "None", ")", "\n", "\n", "if", "mode", "in", "{", "'grey'", ",", "'gray'", "}", ":", "\n", "    ", "assert", "(", "scale", ">", "0", ")", "\n", "if", "len", "(", "img", ".", "size", "(", ")", ")", "==", "3", ":", "\n", "      ", "img", "=", "img", ".", "squeeze", "(", "0", ")", "\n", "\n", "", "img_scale", "=", "np", ".", "round", "(", "\n", "np", ".", "multiply", "(", "img", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", ",", "scale", ".", "data", ".", "numpy", "(", ")", ")", ")", "\n", "img_pil", "=", "Image", ".", "fromarray", "(", "img_scale", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "img_pil", ".", "save", "(", "img_path", ",", "\"PNG\"", ")", "\n", "", "elif", "mode", "==", "'rgb'", ":", "\n", "    ", "if", "len", "(", "img", ".", "size", "(", ")", ")", "==", "4", ":", "\n", "      ", "img", "=", "img", ".", "squeeze", "(", "0", ")", "\n", "\n", "", "if", "img", ".", "size", "(", ")", "[", "0", "]", "==", "3", ":", "\n", "      ", "img", "=", "np", ".", "transpose", "(", "img", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", ".", "astype", "(", "np", ".", "uint8", ")", ",", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "\n", "", "img_pil", "=", "Image", ".", "fromarray", "(", "img", ",", "'RGB'", ")", "\n", "img_pil", ".", "save", "(", "img_path", ",", "\"JPEG\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.miccai.myutils.write_to_tensorboard": [[89, 108], ["obj.keys", "writer.add_image", "obj.keys", "writer.add_scalar", "writer.add_scalar"], "function", ["None"], ["", "", "def", "write_to_tensorboard", "(", "tb_mode", ",", "writer", ",", "obj", ")", ":", "\n", "  ", "assert", "(", "tb_mode", "in", "{", "'scalar'", ",", "'image'", "}", ")", "\n", "\n", "for", "key", "in", "obj", ".", "keys", "(", ")", ":", "\n", "    ", "if", "tb_mode", "==", "'scalar'", ":", "\n", "      ", "if", "key", "in", "{", "'train_loss'", ",", "'valid_loss'", ",", "'acc'", ",", "'acc_acl'", ",", "\n", "'mean_iou'", ",", "'fwavacc'", ",", "'loss'", ",", "'error'", ",", "'train_error'", ",", "\n", "'valid_error'", ",", "'train_acc0.5'", ",", "'train_acc1'", ",", "'train_acc2'", ",", "\n", "'train_acc3'", ",", "'valid_acc0.5'", ",", "'valid_acc1'", ",", "'valid_acc2'", ",", "\n", "'valid_acc3'", ",", "'train_acc5'", ",", "'valid_acc5'", ",", "'train_acc'", ",", "\n", "'valid_acc'", "}", ":", "\n", "        ", "net_mode", "=", "obj", "[", "'mode'", "]", "\n", "\n", "if", "'batch_iter'", "in", "obj", ".", "keys", "(", ")", ":", "\n", "          ", "writer", ".", "add_scalar", "(", "key", ",", "obj", "[", "key", "]", ",", "obj", "[", "'batch_iter'", "]", ")", "\n", "", "else", ":", "\n", "          ", "writer", ".", "add_scalar", "(", "key", ",", "obj", "[", "key", "]", ",", "obj", "[", "'epoch'", "]", ")", "\n", "", "", "", "elif", "tb_mode", "==", "'image'", ":", "\n", "      ", "writer", ".", "add_image", "(", "key", ",", "obj", "[", "key", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.miccai.myutils.fast_hist": [[112, 119], ["numpy.bincount().reshape", "numpy.bincount", "label_true[].astype"], "function", ["None"], ["", "", "", "def", "fast_hist", "(", "label_pred", ",", "label_true", ",", "num_class", ")", ":", "\n", "  ", "mask", "=", "(", "label_true", ">=", "0", ")", "&", "(", "label_true", "<", "num_class", ")", "\n", "hist", "=", "np", ".", "bincount", "(", "\n", "num_class", "*", "label_true", "[", "mask", "]", ".", "astype", "(", "int", ")", "+", "\n", "label_pred", "[", "mask", "]", ",", "minlength", "=", "num_class", "**", "2", ")", ".", "reshape", "(", "\n", "num_class", ",", "num_class", ")", "\n", "return", "hist", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.miccai.myutils.get_upsampling_weight": [[121, 134], ["numpy.zeros", "torch.from_numpy", "abs", "abs", "list", "list", "range", "range"], "function", ["None"], ["", "def", "get_upsampling_weight", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ")", ":", "\n", "  ", "factor", "=", "(", "kernel_size", "+", "1", ")", "//", "2", "\n", "if", "kernel_size", "%", "2", "==", "1", ":", "\n", "    ", "center", "=", "factor", "-", "1", "\n", "", "else", ":", "\n", "    ", "center", "=", "factor", "-", "0.5", "\n", "", "og", "=", "np", ".", "ogrid", "[", ":", "kernel_size", ",", ":", "kernel_size", "]", "\n", "filt", "=", "(", "1", "-", "abs", "(", "og", "[", "0", "]", "-", "center", ")", "/", "factor", ")", "*", "(", "1", "-", "abs", "(", "og", "[", "1", "]", "-", "center", ")", "/", "factor", ")", "\n", "weight", "=", "np", ".", "zeros", "(", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "kernel_size", ")", ",", "\n", "dtype", "=", "np", ".", "float", ")", "\n", "weight", "[", "list", "(", "range", "(", "in_channels", ")", ")", ",", "list", "(", "range", "(", "out_channels", ")", ")", ",", ":", ",", ":", "]", "=", "filt", "\n", "\n", "return", "torch", ".", "from_numpy", "(", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.miccai.myutils.get_adaptive_crop_size": [[136, 152], ["data_large.size", "data_small.size", "min", "min", "len", "len", "isinstance"], "function", ["None"], ["", "def", "get_adaptive_crop_size", "(", "data_large", ",", "data_small", ",", "crop_size", ")", ":", "\n", "  ", "large_size", "=", "data_large", ".", "size", "(", ")", "\n", "small_size", "=", "data_small", ".", "size", "(", ")", "\n", "h_diff", "=", "large_size", "[", "-", "2", "]", "-", "small_size", "[", "-", "2", "]", "\n", "w_diff", "=", "large_size", "[", "-", "1", "]", "-", "small_size", "[", "-", "1", "]", "\n", "\n", "assert", "(", "len", "(", "large_size", ")", "==", "len", "(", "large_size", ")", ")", "\n", "assert", "(", "h_diff", ">=", "0", "and", "w_diff", ">=", "0", ")", "\n", "\n", "if", "not", "isinstance", "(", "crop_size", ",", "tuple", ")", ":", "\n", "    ", "crop_size", "=", "(", "crop_size", ",", "crop_size", ")", "\n", "\n", "", "crop_top", "=", "min", "(", "crop_size", "[", "0", "]", ",", "h_diff", ")", "\n", "crop_left", "=", "min", "(", "crop_size", "[", "1", "]", ",", "w_diff", ")", "\n", "\n", "return", "(", "(", "crop_top", ",", "h_diff", "-", "crop_top", ")", ",", "(", "crop_left", ",", "w_diff", "-", "crop_left", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.miccai.myutils.evaluate": [[154, 173], ["numpy.zeros", "zip", "myutils.fast_hist", "numpy.errstate", "numpy.divide", "numpy.divide", "numpy.nanmean", "numpy.divide", "numpy.nanmean", "numpy.divide", "lp.flatten", "lt.flatten", "numpy.diag().sum", "np.zeros.sum", "numpy.diag", "np.zeros.sum", "numpy.diag", "np.zeros.sum", "np.zeros.sum", "numpy.diag", "numpy.diag", "np.zeros.sum", "np.zeros.sum"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.fast_hist", "home.repos.pwc.inspect_result.zwxu064_RANP.unet.losses.flatten", "home.repos.pwc.inspect_result.zwxu064_RANP.unet.losses.flatten"], ["", "def", "evaluate", "(", "predictions", ",", "gts", ",", "class_num", ")", ":", "\n", "  ", "hist", "=", "np", ".", "zeros", "(", "(", "class_num", ",", "class_num", ")", ")", "\n", "\n", "for", "lp", ",", "lt", "in", "zip", "(", "predictions", ",", "gts", ")", ":", "\n", "    ", "hist", "+=", "fast_hist", "(", "lp", ".", "flatten", "(", ")", ",", "lt", ".", "flatten", "(", ")", ",", "class_num", ")", "\n", "\n", "", "with", "np", ".", "errstate", "(", "divide", "=", "'ignore'", ",", "invalid", "=", "'ignore'", ")", ":", "# divide 0 ignored", "\n", "# axis 0: gt, axis 1: prediction", "\n", "    ", "acc", "=", "np", ".", "divide", "(", "np", ".", "diag", "(", "hist", ")", ".", "sum", "(", ")", ",", "hist", ".", "sum", "(", ")", ")", "\n", "acc_cls", "=", "np", ".", "divide", "(", "np", ".", "diag", "(", "hist", ")", ",", "hist", ".", "sum", "(", "axis", "=", "1", ")", ")", "\n", "acc_cls", "=", "np", ".", "nanmean", "(", "acc_cls", ")", "\n", "\n", "iu", "=", "np", ".", "divide", "(", "np", ".", "diag", "(", "hist", ")", ",", "(", "hist", ".", "sum", "(", "axis", "=", "1", ")", ")", "+", "hist", ".", "sum", "(", "axis", "=", "0", ")", "-", "np", ".", "diag", "(", "hist", ")", ")", "\n", "mean_iou", "=", "np", ".", "nanmean", "(", "iu", ")", "\n", "\n", "freq", "=", "np", ".", "divide", "(", "hist", ".", "sum", "(", "axis", "=", "1", ")", ",", "hist", ".", "sum", "(", ")", ")", "\n", "fwavacc", "=", "(", "freq", "[", "freq", ">", "0", "]", "*", "iu", "[", "freq", ">", "0", "]", ")", ".", "sum", "(", ")", "\n", "\n", "", "return", "acc", ",", "acc_cls", ",", "mean_iou", ",", "fwavacc", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.miccai.myutils.cal_accuracy": [[175, 187], ["predict.size", "numpy.absolute", "numpy.subtract", "len", "numpy.sum", "predict.cpu().data.numpy", "gt.cpu().data.numpy", "len", "numpy.less_equal", "predict.cpu", "gt.cpu"], "function", ["None"], ["", "def", "cal_accuracy", "(", "predict", ",", "gt", ",", "threshold", ")", ":", "\n", "  ", "img_size", "=", "predict", ".", "size", "(", ")", "\n", "diff", "=", "np", ".", "absolute", "(", "np", ".", "subtract", "(", "predict", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", ",", "gt", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", ")", ")", "\n", "if", "len", "(", "img_size", ")", "==", "3", ":", "\n", "    ", "pixel_num", "=", "img_size", "[", "1", "]", "*", "img_size", "[", "2", "]", "\n", "", "elif", "len", "(", "img_size", ")", "==", "1", ":", "\n", "    ", "pixel_num", "=", "img_size", "[", "0", "]", "\n", "", "else", ":", "\n", "    ", "pixel_num", "=", "1", "\n", "\n", "", "acc", "=", "np", ".", "sum", "(", "np", ".", "less_equal", "(", "diff", ",", "threshold", ")", ")", "/", "pixel_num", "\n", "return", "100", "*", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.miccai.myutils.weight_init": [[189, 217], ["enumerate", "model.modules", "isinstance", "isinstance", "torch.nn.init.xavier_normal_", "torch.nn.init.normal_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.normal_", "torch.nn.init.constant_", "torch.nn.init.constant_"], "function", ["None"], ["", "def", "weight_init", "(", "model", ",", "enable_fixed", "=", "False", ")", ":", "\n", "  ", "for", "ind", ",", "module", "in", "enumerate", "(", "model", ".", "modules", "(", ")", ")", ":", "\n", "    ", "if", "isinstance", "(", "module", ",", "(", "nn", ".", "Conv2d", ",", "\n", "nn", ".", "Conv3d", ",", "\n", "nn", ".", "ConvTranspose2d", ",", "\n", "nn", ".", "ConvTranspose3d", ")", ")", ":", "\n", "      ", "if", "module", ".", "weight", "is", "not", "None", ":", "\n", "        ", "nn", ".", "init", ".", "xavier_normal_", "(", "module", ".", "weight", ")", "\n", "\n", "if", "enable_fixed", ":", "\n", "          ", "nn", ".", "init", ".", "constant_", "(", "module", ".", "weight", ",", "1", ")", "\n", "\n", "", "", "if", "module", ".", "bias", "is", "not", "None", ":", "\n", "        ", "nn", ".", "init", ".", "normal_", "(", "module", ".", "bias", ")", "\n", "\n", "if", "enable_fixed", ":", "\n", "          ", "nn", ".", "init", ".", "constant_", "(", "module", ".", "bias", ",", "0", ")", "\n", "", "", "", "elif", "isinstance", "(", "module", ",", "(", "nn", ".", "BatchNorm1d", ",", "\n", "nn", ".", "BatchNorm2d", ",", "\n", "nn", ".", "BatchNorm3d", ")", ")", ":", "\n", "      ", "if", "module", ".", "weight", "is", "not", "None", ":", "\n", "        ", "nn", ".", "init", ".", "normal_", "(", "module", ".", "weight", ",", "mean", "=", "1", ",", "std", "=", "0.02", ")", "\n", "\n", "if", "enable_fixed", ":", "\n", "          ", "nn", ".", "init", ".", "constant_", "(", "module", ".", "weight", ",", "1", ")", "\n", "\n", "", "", "if", "module", ".", "bias", "is", "not", "None", ":", "\n", "        ", "nn", ".", "init", ".", "constant_", "(", "module", ".", "bias", ",", "0", ")", "\n", "#", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.miccai.myutils.weight_fixed": [[226, 230], ["range", "len", "obj[].parameters"], "function", ["None"], ["", "", "", "", "def", "weight_fixed", "(", "obj", ")", ":", "\n", "  ", "for", "i", "in", "range", "(", "len", "(", "obj", ")", ")", ":", "\n", "    ", "for", "param", "in", "obj", "[", "i", "]", ".", "parameters", "(", ")", ":", "\n", "      ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.miccai.myutils.check_valid": [[232, 241], ["torch.isnan().any", "torch.isinf().any", "torch.isnan", "torch.isinf"], "function", ["None"], ["", "", "", "def", "check_valid", "(", "input", ",", "enable_zero", "=", "False", ")", ":", "\n", "  ", "if", "torch", ".", "isnan", "(", "input", ")", ".", "any", "(", ")", "or", "torch", ".", "isinf", "(", "input", ")", ".", "any", "(", ")", ":", "\n", "    ", "status", "=", "False", "\n", "", "elif", "enable_zero", "and", "(", "input", "==", "0", ")", ".", "any", "(", ")", ":", "\n", "    ", "status", "=", "False", "\n", "", "else", ":", "\n", "    ", "status", "=", "True", "\n", "\n", "", "return", "status", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.miccai.myutils.to_tensor_custom": [[243, 245], ["torch.from_numpy().type().to", "torch.from_numpy().type", "torch.from_numpy"], "function", ["None"], ["", "def", "to_tensor_custom", "(", "input", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "'cpu'", ")", ":", "\n", "  ", "return", "torch", ".", "from_numpy", "(", "input", ")", ".", "type", "(", "dtype", ")", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.miccai.myutils.colorize_mask": [[247, 252], ["PIL.Image.fromarray().convert", "Image.fromarray().convert.putpalette", "PIL.Image.fromarray", "mask.astype"], "function", ["None"], ["", "def", "colorize_mask", "(", "mask", ",", "palette", ")", ":", "\n", "  ", "new_mask", "=", "Image", ".", "fromarray", "(", "mask", ".", "astype", "(", "np", ".", "uint8", ")", ")", ".", "convert", "(", "'P'", ")", "\n", "new_mask", ".", "putpalette", "(", "palette", ")", "\n", "\n", "return", "new_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.miccai.myutils.visualize_context": [[254, 260], ["Image.fromarray.float().cpu().detach", "PIL.Image.fromarray", "Image.fromarray.max", "Image.fromarray.numpy", "Image.fromarray.float().cpu", "Image.fromarray.float"], "function", ["None"], ["", "def", "visualize_context", "(", "context", ")", ":", "\n", "  ", "context", "=", "context", ".", "float", "(", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", "\n", "context", "=", "context", "*", "255", "//", "context", ".", "max", "(", ")", "\n", "context", "=", "Image", ".", "fromarray", "(", "context", ".", "numpy", "(", ")", ")", "\n", "\n", "return", "context", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.miccai.myutils.get_params_per": [[261, 286], ["isinstance", "isinstance", "isinstance", "isinstance", "len", "len", "len", "len", "len", "len"], "function", ["None"], ["", "def", "get_params_per", "(", "idx", ",", "out_channels", ",", "kernel_sizes", ",", "strides", ",", "paddings", ")", ":", "\n", "  ", "if", "isinstance", "(", "out_channels", ",", "list", ")", ":", "\n", "    ", "out_channel", "=", "out_channels", "[", "idx", "]", "\n", "", "else", ":", "\n", "    ", "out_channel", "=", "out_channels", "\n", "\n", "", "if", "isinstance", "(", "kernel_sizes", ",", "list", ")", ":", "\n", "    ", "assert", "len", "(", "kernel_sizes", ")", "==", "len", "(", "out_channels", ")", "\n", "kernel_size", "=", "kernel_sizes", "[", "idx", "]", "\n", "", "else", ":", "\n", "    ", "kernel_size", "=", "kernel_sizes", "\n", "\n", "", "if", "isinstance", "(", "strides", ",", "list", ")", ":", "\n", "    ", "assert", "len", "(", "strides", ")", "==", "len", "(", "out_channels", ")", "\n", "stride", "=", "strides", "[", "idx", "]", "\n", "", "else", ":", "\n", "    ", "stride", "=", "strides", "\n", "\n", "", "if", "isinstance", "(", "paddings", ",", "list", ")", ":", "\n", "    ", "assert", "len", "(", "paddings", ")", "==", "len", "(", "out_channels", ")", "\n", "padding", "=", "paddings", "[", "idx", "]", "\n", "", "else", ":", "\n", "    ", "padding", "=", "paddings", "\n", "\n", "", "return", "out_channel", ",", "kernel_size", ",", "stride", ",", "padding", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.miccai.myutils.get_model_state_dict": [[289, 296], ["hasattr", "model.module.state_dict", "model.state_dict"], "function", ["None"], ["", "def", "get_model_state_dict", "(", "model", ")", ":", "\n", "  ", "if", "hasattr", "(", "model", ",", "'module'", ")", ":", "\n", "    ", "model_state_dict", "=", "model", ".", "module", ".", "state_dict", "(", ")", "\n", "", "else", ":", "\n", "    ", "model_state_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "\n", "", "return", "model_state_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.miccai.myutils.load_optimizer_state_dict": [[298, 309], ["optimizer.load_state_dict", "optimizer.state.values", "state.items", "isinstance", "v.cuda", "v.cpu"], "function", ["None"], ["", "def", "load_optimizer_state_dict", "(", "checkpoint", ",", "optimizer", ",", "enable_cuda", "=", "True", ")", ":", "\n", "  ", "optimizer", ".", "load_state_dict", "(", "checkpoint", ")", "\n", "for", "state", "in", "optimizer", ".", "state", ".", "values", "(", ")", ":", "\n", "    ", "for", "k", ",", "v", "in", "state", ".", "items", "(", ")", ":", "\n", "      ", "if", "isinstance", "(", "v", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "if", "enable_cuda", ":", "\n", "          ", "state", "[", "k", "]", "=", "v", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "          ", "state", "[", "k", "]", "=", "v", ".", "cpu", "(", ")", "\n", "\n", "", "", "", "", "return", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.miccai.myutils.check_data_input": [[311, 339], ["isinstance", "math.floor", "math.ceil", "matplotlib.figure", "len", "math.sqrt", "matplotlib.show", "matplotlib.pause", "matplotlib.close", "matplotlib.show", "plt.figure.add_subplot", "input.size", "len", "matplotlib.imshow", "matplotlib.imshow", "len", "matplotlib.imshow", "input.size", "input[].permute"], "function", ["None"], ["", "def", "check_data_input", "(", "inputs", ",", "time", "=", "5", ")", ":", "\n", "  ", "is_list", "=", "isinstance", "(", "inputs", ",", "list", ")", "\n", "inputs", "=", "[", "inputs", "]", "if", "not", "is_list", "else", "inputs", "\n", "count", ",", "n_inputs", "=", "1", ",", "len", "(", "inputs", ")", "\n", "rows", "=", "math", ".", "floor", "(", "math", ".", "sqrt", "(", "n_inputs", ")", ")", "\n", "cols", "=", "math", ".", "ceil", "(", "n_inputs", "/", "rows", ")", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "rows", ",", "cols", ")", ")", "\n", "\n", "for", "input", "in", "inputs", ":", "\n", "    ", "if", "input", "is", "not", "None", ":", "\n", "      ", "fig", ".", "add_subplot", "(", "rows", ",", "cols", ",", "count", ")", "\n", "count", "+=", "1", "\n", "input_size", "=", "input", ".", "size", "(", ")", "\n", "\n", "if", "len", "(", "input_size", ")", "==", "4", ":", "\n", "        ", "if", "input", ".", "size", "(", ")", "[", "1", "]", "==", "1", ":", "\n", "          ", "plt", ".", "imshow", "(", "input", "[", "0", ",", "0", ",", ":", ",", ":", "]", ")", "\n", "", "else", ":", "\n", "          ", "plt", ".", "imshow", "(", "input", "[", "0", ",", ":", ",", ":", ",", ":", "]", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "", "", "elif", "len", "(", "input_size", ")", "==", "3", ":", "\n", "        ", "plt", ".", "imshow", "(", "input", "[", "0", ",", ":", ",", ":", "]", ")", "\n", "\n", "", "", "", "if", "time", "is", "not", "None", ":", "\n", "    ", "plt", ".", "show", "(", "block", "=", "False", ")", "\n", "plt", ".", "pause", "(", "time", ")", "\n", "plt", ".", "close", "(", ")", "\n", "", "else", ":", "\n", "    ", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.miccai.myutils.adjust_learning_rate": [[341, 346], ["print"], "function", ["None"], ["", "", "def", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ",", "step", ")", ":", "\n", "  ", "if", "(", "epoch", ">", "1", ")", "and", "(", "epoch", "%", "step", "==", "0", ")", ":", "\n", "    ", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "      ", "param_group", "[", "'lr'", "]", "*=", "0.1", "\n", "", "print", "(", "'Adjust learning rate to {:e}'", ".", "format", "(", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.miccai.myutils.split_weight_bias": [[348, 351], ["list", "filter", "model.named_parameters"], "function", ["None"], ["", "", "def", "split_weight_bias", "(", "model", ",", "mode", "=", "'weight'", ")", ":", "\n", "  ", "return", "[", "p", "[", "1", "]", "for", "p", "in", "list", "(", "filter", "(", "lambda", "p", ":", "(", "mode", "in", "p", "[", "0", "]", ")", "and", "(", "p", "[", "1", "]", ".", "requires_grad", ")", ",", "\n", "model", ".", "named_parameters", "(", ")", ")", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.miccai.data_augmentation.random_flip_dimensions": [[13, 20], ["list", "range", "numpy.random.choice", "list.append"], "function", ["None"], ["def", "random_flip_dimensions", "(", "n_dimensions", ")", ":", "\n", "  ", "axis", "=", "list", "(", ")", "\n", "for", "dim", "in", "range", "(", "n_dimensions", ")", ":", "\n", "    ", "if", "np", ".", "random", ".", "choice", "(", "[", "True", ",", "False", "]", ")", ":", "\n", "      ", "axis", ".", "append", "(", "dim", ")", "\n", "\n", "", "", "return", "axis", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.miccai.data_augmentation.flip_image": [[22, 31], ["nilearn.image.new_img_like", "numpy.copy", "image.get_data", "numpy.flip", "numpy.flip", "image.get_data"], "function", ["None"], ["", "def", "flip_image", "(", "image", ",", "axis", ")", ":", "\n", "  ", "try", ":", "\n", "    ", "new_data", "=", "np", ".", "copy", "(", "image", ".", "get_data", "(", ")", ")", "\n", "for", "axis_index", "in", "axis", ":", "\n", "      ", "new_data", "=", "np", ".", "flip", "(", "new_data", ",", "axis", "=", "axis_index", ")", "\n", "", "", "except", "TypeError", ":", "\n", "    ", "new_data", "=", "np", ".", "flip", "(", "image", ".", "get_data", "(", ")", ",", "axis", "=", "axis", ")", "\n", "\n", "", "return", "new_img_like", "(", "image", ",", "data", "=", "new_data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.miccai.data_augmentation.offset_image": [[33, 70], ["image.get_data", "numpy.zeros", "nilearn.image.new_img_like", "len", "len", "len", "int", "int", "int", "slice", "slice", "slice", "slice", "slice", "slice", "slice", "slice", "slice", "slice", "slice", "slice"], "function", ["None"], ["", "def", "offset_image", "(", "image", ",", "offset_factor", ")", ":", "\n", "  ", "image_data", "=", "image", ".", "get_data", "(", ")", "\n", "image_shape", "=", "image_data", ".", "shape", "\n", "new_data", "=", "np", ".", "zeros", "(", "image_shape", ")", "\n", "\n", "assert", "len", "(", "image_shape", ")", "==", "3", ",", "\"Wrong dimessions! Expected 3 but got {0}\"", ".", "format", "(", "len", "(", "image_shape", ")", ")", "\n", "\n", "if", "len", "(", "image_shape", ")", "==", "3", ":", "\n", "    ", "new_data", "[", ":", "]", "=", "image_data", "[", "0", "]", "[", "0", "]", "[", "0", "]", "\n", "oz", "=", "int", "(", "image_shape", "[", "0", "]", "*", "offset_factor", "[", "0", "]", ")", "\n", "oy", "=", "int", "(", "image_shape", "[", "1", "]", "*", "offset_factor", "[", "1", "]", ")", "\n", "ox", "=", "int", "(", "image_shape", "[", "2", "]", "*", "offset_factor", "[", "2", "]", ")", "\n", "\n", "if", "oy", ">=", "0", ":", "\n", "      ", "slice_y", "=", "slice", "(", "image_shape", "[", "1", "]", "-", "oy", ")", "\n", "index_y", "=", "slice", "(", "oy", ",", "image_shape", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "      ", "slice_y", "=", "slice", "(", "-", "oy", ",", "image_shape", "[", "1", "]", ")", "\n", "index_y", "=", "slice", "(", "image_shape", "[", "1", "]", "+", "oy", ")", "\n", "\n", "", "if", "ox", ">=", "0", ":", "\n", "      ", "slice_x", "=", "slice", "(", "image_shape", "[", "2", "]", "-", "ox", ")", "\n", "index_x", "=", "slice", "(", "ox", ",", "image_shape", "[", "2", "]", ")", "\n", "", "else", ":", "\n", "      ", "slice_x", "=", "slice", "(", "-", "ox", ",", "image_shape", "[", "2", "]", ")", "\n", "index_x", "=", "slice", "(", "image_shape", "[", "2", "]", "+", "ox", ")", "\n", "\n", "", "if", "oz", ">=", "0", ":", "\n", "      ", "slice_z", "=", "slice", "(", "image_shape", "[", "0", "]", "-", "oz", ")", "\n", "index_z", "=", "slice", "(", "oz", ",", "image_shape", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "      ", "slice_z", "=", "slice", "(", "-", "oz", ",", "image_shape", "[", "0", "]", ")", "\n", "index_z", "=", "slice", "(", "image_shape", "[", "0", "]", "+", "oz", ")", "\n", "\n", "", "new_data", "[", "index_z", ",", "index_y", ",", "index_x", "]", "=", "image_data", "[", "slice_z", ",", "slice_y", ",", "slice_x", "]", "\n", "\n", "", "return", "new_img_like", "(", "image", ",", "data", "=", "new_data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.miccai.data_augmentation.augment_image": [[72, 80], ["data_augmentation.flip_image", "data_augmentation.offset_image"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.Dataloader.data_augmentation.flip_image", "home.repos.pwc.inspect_result.zwxu064_RANP.Dataloader.data_augmentation.offset_image"], ["", "def", "augment_image", "(", "image", ",", "flip_axis", "=", "None", ",", "offset_factor", "=", "None", ")", ":", "\n", "  ", "if", "flip_axis", "is", "not", "None", ":", "\n", "    ", "image", "=", "flip_image", "(", "image", ",", "axis", "=", "flip_axis", ")", "\n", "\n", "", "if", "offset_factor", "is", "not", "None", ":", "\n", "    ", "image", "=", "offset_image", "(", "image", ",", "offset_factor", "=", "offset_factor", ")", "\n", "\n", "", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.miccai.data_augmentation.get_target_label": [[82, 101], ["numpy.zeros", "range", "numpy.where", "numpy.where", "numpy.where", "numpy.where", "numpy.where"], "function", ["None"], ["", "def", "get_target_label", "(", "label_data", ",", "config", ")", ":", "\n", "  ", "target_label", "=", "np", ".", "zeros", "(", "label_data", ".", "shape", ")", "\n", "\n", "for", "l_idx", "in", "range", "(", "config", "[", "\"n_labels\"", "]", ")", ":", "\n", "    ", "assert", "config", "[", "\"labels\"", "]", "[", "l_idx", "]", "in", "[", "1", ",", "2", ",", "4", "]", ",", "\"Wrong label! Expected 1 or 2 or 4, but got {0}\"", ".", "format", "(", "config", "[", "\"labels\"", "]", "[", "l_idx", "]", ")", "\n", "\n", "if", "not", "config", "[", "\"label_containing\"", "]", ":", "\n", "      ", "target_label", "[", "np", ".", "where", "(", "label_data", "==", "config", "[", "\"labels\"", "]", "[", "l_idx", "]", ")", "]", "=", "1", "\n", "", "else", ":", "\n", "      ", "if", "config", "[", "\"labels\"", "]", "[", "l_idx", "]", "==", "1", ":", "\n", "        ", "target_label", "[", "np", ".", "where", "(", "label_data", "==", "1", ")", "]", "=", "1", "\n", "target_label", "[", "np", ".", "where", "(", "label_data", "==", "4", ")", "]", "=", "1", "\n", "", "elif", "config", "[", "\"labels\"", "]", "[", "l_idx", "]", "==", "2", ":", "\n", "        ", "target_label", "[", "np", ".", "where", "(", "label_data", ">", "0", ")", "]", "=", "1", "\n", "", "elif", "config", "[", "\"labels\"", "]", "[", "l_idx", "]", "==", "4", ":", "\n", "        ", "target_label", "[", "np", ".", "where", "(", "label_data", "==", "4", ")", "]", "=", "1", "\n", "\n", "", "", "", "return", "target_label", "\n", "", ""]], "home.repos.pwc.inspect_result.zwxu064_RANP.miccai.dataloader.BraTSDataset.__init__": [[109, 137], ["os.path.join", "l.strip", "myutils.RandomCrop3D", "open().readlines", "open"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.utils.parser.AttrDict.strip"], []], "home.repos.pwc.inspect_result.zwxu064_RANP.miccai.dataloader.BraTSDataset.__len__": [[138, 140], ["int", "len"], "methods", ["None"], []], "home.repos.pwc.inspect_result.zwxu064_RANP.miccai.dataloader.BraTSDataset.__getitem__": [[141, 208], ["nibabel.load", "nibabel.load.get_fdata", "nibabel.load", "nibabel.load.get_fdata", "nibabel.load", "nibabel.load.get_fdata", "nibabel.load", "nibabel.load.get_fdata", "nibabel.load", "nibabel.load.get_fdata", "numpy.stack", "numpy.expand_dims", "len", "range", "numpy.asarray", "nibabel.Nifti1Image", "nilearn.image.resample_to_img().get_data", "torch.from_numpy().float", "torch.from_numpy().long", "torch.from_numpy().float.view().max", "data_max.view.view.view", "time.time", "dataloader.BraTSDataset.paths[].split", "data_augmentation.random_flip_dimensions", "nibabel.Nifti1Image", "data_list.append", "numpy.expand_dims", "print", "dataloader.BraTSDataset.random_crop_3d", "torch.from_numpy().float.size", "print", "numpy.random.random", "nilearn.image.resample_to_img().get_data", "nilearn.image.resample_to_img", "len", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy().float.view", "data_augmentation.augment_image", "torch.from_numpy().float.size", "nilearn.image.resample_to_img", "time.time", "data_augmentation.augment_image"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.data.load", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.data.load", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.data.load", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.data.load", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.data.load", "home.repos.pwc.inspect_result.zwxu064_RANP.Dataloader.data_augmentation.random_flip_dimensions", "home.repos.pwc.inspect_result.zwxu064_RANP.Dataloader.data_augmentation.augment_image", "home.repos.pwc.inspect_result.zwxu064_RANP.Dataloader.data_augmentation.augment_image"], []], "home.repos.pwc.inspect_result.zwxu064_RANP.miccai.dataloader.remove_keymap_conflicts": [[18, 25], ["prop.startswith", "set", "keys.remove"], "function", ["None"], ["return", "train_loader", ",", "test_loader", "\n", "\n", "\n", "", "def", "get_cifar10_dataloaders", "(", "train_batch_size", ",", "test_batch_size", ",", "args", ",", "enable_train_shuffle", "=", "True", ",", "enable_train_trans", "=", "True", ")", ":", "\n", "  ", "if", "enable_train_trans", ":", "\n", "    ", "train_transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "RandomCrop", "(", "32", ",", "padding", "=", "4", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.miccai.dataloader.multi_slice_viewer": [[27, 60], ["dataloader.remove_keymap_conflicts", "len", "matplotlib.subplots", "range", "matplotlib.suptitle", "range", "axes.imshow", "axes.title.set_text", "fig.canvas.mpl_connect", "fig.canvas.mpl_connect", "[].sum"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.Dataloader.dataloader.remove_keymap_conflicts"], ["", "else", ":", "\n", "    ", "train_transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.4914", ",", "0.4822", ",", "0.4465", ")", ",", "(", "0.2023", ",", "0.1994", ",", "0.2010", ")", ")", "]", ")", "\n", "\n", "", "test_transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.4914", ",", "0.4822", ",", "0.4465", ")", ",", "(", "0.2023", ",", "0.1994", ",", "0.2010", ")", ")", "]", ")", "\n", "\n", "train_dataset", "=", "CIFAR10", "(", "\"{}/{}\"", ".", "format", "(", "args", ".", "relative_dir", ",", "\"../dataset\"", ")", ",", "True", ",", "train_transform", ",", "download", "=", "True", ")", "\n", "test_dataset", "=", "CIFAR10", "(", "\"{}/{}\"", ".", "format", "(", "args", ".", "relative_dir", ",", "\"../dataset\"", ")", ",", "False", ",", "test_transform", ",", "download", "=", "False", ")", "\n", "\n", "train_loader", "=", "DataLoader", "(", "train_dataset", ",", "train_batch_size", ",", "shuffle", "=", "enable_train_shuffle", ",", "num_workers", "=", "2", ",", "pin_memory", "=", "True", ")", "\n", "test_loader", "=", "DataLoader", "(", "test_dataset", ",", "test_batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "2", ",", "pin_memory", "=", "True", ")", "\n", "\n", "return", "train_loader", ",", "test_loader", "", "", ""]], "home.repos.pwc.inspect_result.zwxu064_RANP.miccai.dataloader.auto_display": [[62, 75], ["len", "range", "range", "matplotlib.suptitle", "fig.canvas.draw", "matplotlib.pause", "fig.axes[].images[].set_array"], "function", ["None"], []], "home.repos.pwc.inspect_result.zwxu064_RANP.miccai.dataloader.process_key": [[77, 91], ["len", "matplotlib.suptitle", "fig.canvas.draw", "range", "dataloader.previous_slice", "range", "dataloader.next_slice"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.Dataloader.dataloader.previous_slice", "home.repos.pwc.inspect_result.zwxu064_RANP.Dataloader.dataloader.next_slice"], []], "home.repos.pwc.inspect_result.zwxu064_RANP.miccai.dataloader.previous_slice": [[93, 97], ["ax.images[].set_array"], "function", ["None"], []], "home.repos.pwc.inspect_result.zwxu064_RANP.miccai.dataloader.next_slice": [[99, 103], ["ax.images[].set_array"], "function", ["None"], []], "home.repos.pwc.inspect_result.zwxu064_RANP.miccai.metrics.f1_score": [[2, 6], ["o.sum", "t.sum"], "function", ["None"], ["\n", "import", "numpy", "as", "np", "\n", "import", "torch", "\n", "import", "torch", ".", "nn", ".", "functional", "as", "F", "\n", "from", "skimage", "import", "measure", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.miccai.metrics.dice": [[11, 25], ["metrics.f1_score", "metrics.f1_score", "metrics.f1_score"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.miccai.metrics.f1_score", "home.repos.pwc.inspect_result.zwxu064_RANP.miccai.metrics.f1_score", "home.repos.pwc.inspect_result.zwxu064_RANP.miccai.metrics.f1_score"], ["LOGGER", "=", "get_logger", "(", "'EvalMetric'", ")", "\n", "\n", "SUPPORTED_METRICS", "=", "[", "'dice'", ",", "'iou'", ",", "'boundary_ap'", ",", "'dt_ap'", ",", "'quantized_dt_ap'", ",", "'angle'", ",", "'inverse_angular'", "]", "\n", "\n", "\n", "class", "DiceCoefficient", ":", "\n", "    ", "\"\"\"Computes Dice Coefficient.\n    Generalized to multiple channels by computing per-channel Dice Score\n    (as described in https://arxiv.org/pdf/1707.03237.pdf) and theTn simply taking the average.\n    Input is expected to be probabilities instead of logits.\n    This metric is mostly useful when channels contain the same semantic class (e.g. affinities computed with different offsets).\n    DO NOT USE this metric when training with DiceLoss, otherwise the results will be biased towards the loss.\n    \"\"\"", "\n", "\n", "def", "__init__", "(", "self", ",", "epsilon", "=", "1e-5", ",", "ignore_index", "=", "None", ",", "**", "kwargs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.unet.config.load_config": [[10, 19], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "config._load_config_yaml", "_load_config_yaml.get", "torch.device"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.unet.config._load_config_yaml"], ["def", "load_config", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'UNet3D training'", ")", "\n", "parser", ".", "add_argument", "(", "'--config'", ",", "type", "=", "str", ",", "help", "=", "'Path to the YAML config file'", ",", "required", "=", "True", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "config", "=", "_load_config_yaml", "(", "args", ".", "config", ")", "\n", "# Get a device to train on", "\n", "device", "=", "config", ".", "get", "(", "'device'", ",", "DEFAULT_DEVICE", ")", "\n", "config", "[", "'device'", "]", "=", "torch", ".", "device", "(", "device", ")", "\n", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.unet.config._load_config_yaml": [[21, 23], ["yaml.load", "open"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.data.load"], ["", "def", "_load_config_yaml", "(", "config_file", ")", ":", "\n", "    ", "return", "yaml", ".", "load", "(", "open", "(", "config_file", ",", "'r'", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.zwxu064_RANP.unet.buildingblocks.SingleConv.__init__": [[80, 85], ["torch.nn.Sequential.__init__", "buildingblocks.create_conv", "buildingblocks.SingleConv.add_module"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.StereoLoss.__init__", "home.repos.pwc.inspect_result.zwxu064_RANP.unet.buildingblocks.create_conv"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "order", "=", "'crg'", ",", "num_groups", "=", "8", ",", "padding", "=", "1", ")", ":", "\n", "        ", "super", "(", "SingleConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "for", "name", ",", "module", "in", "create_conv", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "order", ",", "num_groups", ",", "padding", "=", "padding", ")", ":", "\n", "            ", "self", ".", "add_module", "(", "name", ",", "module", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.unet.buildingblocks.DoubleConv.__init__": [[109, 163], ["torch.nn.Sequential.__init__", "range", "conv_in.append", "conv_out.append", "range", "conv_in.append", "conv_out.append", "conv_in.append", "conv_out.append", "range", "conv_in.append", "conv_out.append", "len", "len", "len", "buildingblocks.DoubleConv.add_module", "conv_in.append", "conv_out.append", "conv_in.append", "conv_out.append", "buildingblocks.SingleConv"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.StereoLoss.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "encoder", ",", "kernel_size", "=", "3", ",", "order", "=", "'crg'", ",", "num_groups", "=", "8", ",", "width", "=", "2", ",", "\n", "res_type", "=", "None", ")", ":", "\n", "        ", "super", "(", "DoubleConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# if encoder:", "\n", "#     # we're in the encoder path", "\n", "#     conv1_in_channels = in_channels", "\n", "#     conv1_out_channels = out_channels // 2", "\n", "#     if conv1_out_channels < in_channels:", "\n", "#         conv1_out_channels = in_channels", "\n", "#     conv2_in_channels, conv2_out_channels = conv1_out_channels, out_channels", "\n", "# else:", "\n", "#     # we're in the decoder path, decrease the number of channels in the 1st convolution", "\n", "#     conv1_in_channels, conv1_out_channels = in_channels, out_channels", "\n", "#     conv2_in_channels, conv2_out_channels = out_channels, out_channels", "\n", "#", "\n", "# # conv1", "\n", "# self.add_module('SingleConv1',", "\n", "#                 SingleConv(conv1_in_channels, conv1_out_channels, kernel_size, order, num_groups))", "\n", "# # conv2", "\n", "# self.add_module('SingleConv2',", "\n", "#                 SingleConv(conv2_in_channels, conv2_out_channels, kernel_size, order, num_groups))", "\n", "conv_in", ",", "conv_out", "=", "[", "]", ",", "[", "]", "\n", "if", "encoder", ":", "\n", "# first conv", "\n", "            ", "conv_in_tmp", "=", "in_channels", "\n", "conv_out_tmp", "=", "out_channels", "//", "2", "\n", "conv_out_tmp", "=", "in_channels", "if", "conv_out_tmp", "<", "in_channels", "else", "conv_out_tmp", "\n", "\n", "conv_in", ".", "append", "(", "conv_in_tmp", ")", "\n", "conv_out", ".", "append", "(", "conv_out_tmp", ")", "\n", "\n", "for", "idx", "in", "range", "(", "width", "-", "2", ")", ":", "\n", "                ", "conv_in", ".", "append", "(", "conv_out_tmp", ")", "\n", "conv_out", ".", "append", "(", "conv_out_tmp", ")", "\n", "\n", "# last cnv", "\n", "", "conv_in", ".", "append", "(", "conv_out_tmp", ")", "\n", "conv_out", ".", "append", "(", "out_channels", ")", "\n", "", "else", ":", "\n", "            ", "conv_in", ".", "append", "(", "in_channels", ")", "\n", "conv_out", ".", "append", "(", "out_channels", ")", "\n", "\n", "for", "idx", "in", "range", "(", "width", "-", "2", ")", ":", "\n", "                ", "conv_in", ".", "append", "(", "out_channels", ")", "\n", "conv_out", ".", "append", "(", "out_channels", ")", "\n", "\n", "# last cnv", "\n", "", "conv_in", ".", "append", "(", "out_channels", ")", "\n", "conv_out", ".", "append", "(", "out_channels", ")", "\n", "\n", "", "assert", "len", "(", "conv_in", ")", "==", "len", "(", "conv_out", ")", ",", "'conv_in should be equal to conv_out'", "\n", "for", "idx", "in", "range", "(", "len", "(", "conv_in", ")", ")", ":", "\n", "            ", "name", "=", "'SingleConv{}'", ".", "format", "(", "idx", "+", "1", ")", "\n", "self", ".", "add_module", "(", "name", ",", "SingleConv", "(", "conv_in", "[", "idx", "]", ",", "conv_out", "[", "idx", "]", ",", "kernel_size", ",", "order", ",", "num_groups", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.unet.buildingblocks.DeepXConv.__init__": [[166, 204], ["torch.nn.Sequential.__init__", "len", "range", "conv_in.append", "conv_out.append", "range", "conv_in.append", "conv_out.append", "conv_in.append", "conv_out.append", "range", "conv_in.append", "conv_out.append", "len", "len", "len", "buildingblocks.DeepXConv.add_module", "conv_in.append", "conv_out.append", "conv_in.append", "conv_out.append", "buildingblocks.SingleConv"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.StereoLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "encoder", ",", "kernel_size", "=", "3", ",", "order", "=", "'crg'", ",", "num_groups", "=", "8", ",", "width", "=", "2", ",", "\n", "res_type", "=", "None", ")", ":", "\n", "        ", "super", "(", "DeepXConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "res_type", "=", "res_type", "\n", "conv_in", ",", "conv_out", "=", "[", "]", ",", "[", "]", "\n", "if", "encoder", ":", "\n", "# first conv", "\n", "            ", "conv_in_tmp", "=", "in_channels", "\n", "conv_out_tmp", "=", "out_channels", "//", "2", "if", "(", "res_type", "is", "None", ")", "else", "out_channels", "\n", "conv_out_tmp", "=", "in_channels", "if", "conv_out_tmp", "<", "in_channels", "else", "conv_out_tmp", "\n", "\n", "conv_in", ".", "append", "(", "conv_in_tmp", ")", "\n", "conv_out", ".", "append", "(", "conv_out_tmp", ")", "\n", "\n", "for", "idx", "in", "range", "(", "width", "-", "2", ")", ":", "\n", "                ", "conv_in", ".", "append", "(", "conv_out_tmp", ")", "\n", "conv_out", ".", "append", "(", "conv_out_tmp", ")", "\n", "\n", "# last cnv", "\n", "", "conv_in", ".", "append", "(", "conv_out_tmp", ")", "\n", "conv_out", ".", "append", "(", "out_channels", ")", "\n", "", "else", ":", "\n", "            ", "conv_in", ".", "append", "(", "in_channels", ")", "\n", "conv_out", ".", "append", "(", "out_channels", ")", "\n", "\n", "for", "idx", "in", "range", "(", "width", "-", "2", ")", ":", "\n", "                ", "conv_in", ".", "append", "(", "out_channels", ")", "\n", "conv_out", ".", "append", "(", "out_channels", ")", "\n", "\n", "# last cnv", "\n", "", "conv_in", ".", "append", "(", "out_channels", ")", "\n", "conv_out", ".", "append", "(", "out_channels", ")", "\n", "\n", "", "assert", "len", "(", "conv_in", ")", "==", "len", "(", "conv_out", ")", ",", "'conv_in should be equal to conv_out'", "\n", "self", ".", "n_layers", "=", "len", "(", "conv_in", ")", "\n", "for", "idx", "in", "range", "(", "len", "(", "conv_in", ")", ")", ":", "\n", "            ", "name", "=", "'SingleConv{}'", ".", "format", "(", "idx", "+", "1", ")", "\n", "self", ".", "add_module", "(", "name", ",", "SingleConv", "(", "conv_in", "[", "idx", "]", ",", "conv_out", "[", "idx", "]", ",", "kernel_size", ",", "order", ",", "num_groups", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.unet.buildingblocks.DeepXConv.forward": [[205, 215], ["range", "getattr"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "output", ",", "block_res", "=", "None", ",", "None", "\n", "for", "idx", "in", "range", "(", "self", ".", "n_layers", ")", ":", "\n", "            ", "output", "=", "getattr", "(", "self", ",", "'SingleConv{}'", ".", "format", "(", "idx", "+", "1", ")", ")", "(", "input", ")", "\n", "output", "=", "input", "+", "output", "if", "(", "self", ".", "res_type", "==", "'layer'", "and", "idx", ">", "0", ")", "else", "output", "\n", "block_res", "=", "output", "if", "(", "self", ".", "res_type", "==", "'block'", "and", "idx", "==", "0", ")", "else", "output", "\n", "input", "=", "output", "\n", "\n", "", "output", "=", "output", "+", "block_res", "if", "(", "self", ".", "res_type", "==", "'block'", ")", "else", "output", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.unet.buildingblocks.ExtResNetBlock.__init__": [[228, 249], ["torch.nn.Module.__init__", "buildingblocks.SingleConv", "buildingblocks.SingleConv", "buildingblocks.SingleConv", "n_order.replace.replace.replace", "torch.nn.LeakyReLU", "torch.nn.ELU", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.StereoLoss.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "order", "=", "'cge'", ",", "num_groups", "=", "8", ",", "res_type", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "ExtResNetBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# first convolution", "\n", "self", ".", "conv1", "=", "SingleConv", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "kernel_size", ",", "order", "=", "order", ",", "num_groups", "=", "num_groups", ")", "\n", "# residual block", "\n", "self", ".", "conv2", "=", "SingleConv", "(", "out_channels", ",", "out_channels", ",", "kernel_size", "=", "kernel_size", ",", "order", "=", "order", ",", "num_groups", "=", "num_groups", ")", "\n", "# remove non-linearity from the 3rd convolution since it's going to be applied after adding the residual", "\n", "n_order", "=", "order", "\n", "for", "c", "in", "'rel'", ":", "\n", "            ", "n_order", "=", "n_order", ".", "replace", "(", "c", ",", "''", ")", "\n", "", "self", ".", "conv3", "=", "SingleConv", "(", "out_channels", ",", "out_channels", ",", "kernel_size", "=", "kernel_size", ",", "order", "=", "n_order", ",", "\n", "num_groups", "=", "num_groups", ")", "\n", "\n", "# create non-linearity separately", "\n", "if", "'l'", "in", "order", ":", "\n", "            ", "self", ".", "non_linearity", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.1", ",", "inplace", "=", "True", ")", "\n", "", "elif", "'e'", "in", "order", ":", "\n", "            ", "self", ".", "non_linearity", "=", "nn", ".", "ELU", "(", "inplace", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "non_linearity", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.unet.buildingblocks.ExtResNetBlock.forward": [[250, 263], ["buildingblocks.ExtResNetBlock.conv1", "buildingblocks.ExtResNetBlock.conv2", "buildingblocks.ExtResNetBlock.conv3", "buildingblocks.ExtResNetBlock.non_linearity"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# apply first convolution and save the output as a residual", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "residual", "=", "out", "\n", "\n", "# residual block", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "\n", "out", "+=", "residual", "\n", "out", "=", "self", ".", "non_linearity", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.unet.buildingblocks.Encoder.__init__": [[285, 305], ["torch.nn.Module.__init__", "basic_module", "torch.nn.MaxPool3d", "torch.nn.AvgPool3d"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.StereoLoss.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "conv_kernel_size", "=", "3", ",", "apply_pooling", "=", "True", ",", "\n", "pool_kernel_size", "=", "(", "2", ",", "2", ",", "2", ")", ",", "pool_type", "=", "'max'", ",", "basic_module", "=", "DoubleConv", ",", "conv_layer_order", "=", "'crg'", ",", "\n", "num_groups", "=", "8", ",", "width", "=", "2", ",", "res_type", "=", "None", ")", ":", "\n", "        ", "super", "(", "Encoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "pool_type", "in", "[", "'max'", ",", "'avg'", "]", "\n", "if", "apply_pooling", ":", "\n", "            ", "if", "pool_type", "==", "'max'", ":", "\n", "                ", "self", ".", "pooling", "=", "nn", ".", "MaxPool3d", "(", "kernel_size", "=", "pool_kernel_size", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "pooling", "=", "nn", ".", "AvgPool3d", "(", "kernel_size", "=", "pool_kernel_size", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "pooling", "=", "None", "\n", "\n", "", "self", ".", "basic_module", "=", "basic_module", "(", "in_channels", ",", "out_channels", ",", "\n", "encoder", "=", "True", ",", "\n", "kernel_size", "=", "conv_kernel_size", ",", "\n", "order", "=", "conv_layer_order", ",", "\n", "num_groups", "=", "num_groups", ",", "\n", "width", "=", "width", ",", "\n", "res_type", "=", "res_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.unet.buildingblocks.Encoder.forward": [[306, 311], ["buildingblocks.Encoder.basic_module", "buildingblocks.Encoder.pooling"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "pooling", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "pooling", "(", "x", ")", "\n", "", "x", "=", "self", ".", "basic_module", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.unet.buildingblocks.Decoder.__init__": [[331, 360], ["torch.nn.Module.__init__", "basic_module", "torch.nn.ConvTranspose3d"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.StereoLoss.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "\n", "scale_factor", "=", "(", "2", ",", "2", ",", "2", ")", ",", "basic_module", "=", "DoubleConv", ",", "conv_layer_order", "=", "'crg'", ",", "num_groups", "=", "8", ",", "\n", "width", "=", "2", ",", "res_type", "=", "None", ")", ":", "\n", "        ", "super", "(", "Decoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "basic_module", "in", "{", "DoubleConv", ",", "DeepXConv", "}", ":", "\n", "# if DoubleConv is the basic_module use nearest neighbor interpolation for upsampling", "\n", "            ", "self", ".", "upsample", "=", "None", "\n", "", "else", ":", "\n", "# otherwise use ConvTranspose3d (bear in mind your GPU memory)", "\n", "# make sure that the output size reverses the MaxPool3d from the corresponding encoder", "\n", "# (D_out\u2005=\u2005(D_in\u2005\u2212\u20051)\u2005\u00d7\u2005\u2005stride[0]\u2005\u2212\u20052\u2005\u00d7\u2005\u2005padding[0]\u2005+\u2005\u2005kernel_size[0]\u2005+\u2005\u2005output_padding[0])", "\n", "# also scale the number of channels from in_channels to out_channels so that summation joining", "\n", "# works correctly", "\n", "            ", "self", ".", "upsample", "=", "nn", ".", "ConvTranspose3d", "(", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "stride", "=", "scale_factor", ",", "\n", "padding", "=", "1", ",", "\n", "output_padding", "=", "1", ")", "\n", "# adapt the number of in_channels for the ExtResNetBlock", "\n", "in_channels", "=", "out_channels", "\n", "\n", "", "self", ".", "basic_module", "=", "basic_module", "(", "in_channels", ",", "out_channels", ",", "\n", "encoder", "=", "False", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "order", "=", "conv_layer_order", ",", "\n", "num_groups", "=", "num_groups", ",", "\n", "width", "=", "width", ",", "\n", "res_type", "=", "res_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.unet.buildingblocks.Decoder.forward": [[361, 375], ["buildingblocks.Decoder.basic_module", "torch.nn.functional.interpolate", "torch.cat", "buildingblocks.Decoder.upsample", "encoder_features.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "encoder_features", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "upsample", "is", "None", ":", "\n", "# use nearest neighbor interpolation and concatenation joining", "\n", "            ", "output_size", "=", "encoder_features", ".", "size", "(", ")", "[", "2", ":", "]", "\n", "x", "=", "F", ".", "interpolate", "(", "x", ",", "size", "=", "output_size", ",", "mode", "=", "'nearest'", ")", "\n", "# concatenate encoder_features (encoder path) with the upsampled input across channel dimension", "\n", "x", "=", "torch", ".", "cat", "(", "(", "encoder_features", ",", "x", ")", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "# use ConvTranspose3d and summation joining", "\n", "            ", "x", "=", "self", ".", "upsample", "(", "x", ")", "\n", "x", "+=", "encoder_features", "\n", "\n", "", "x", "=", "self", ".", "basic_module", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.unet.buildingblocks.FinalConv.__init__": [[395, 404], ["torch.nn.Sequential.__init__", "buildingblocks.FinalConv.add_module", "torch.nn.Conv3d", "buildingblocks.FinalConv.add_module", "buildingblocks.SingleConv"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.StereoLoss.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "order", "=", "'crg'", ",", "num_groups", "=", "8", ")", ":", "\n", "        ", "super", "(", "FinalConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# conv1", "\n", "self", ".", "add_module", "(", "'SingleConv'", ",", "SingleConv", "(", "in_channels", ",", "in_channels", ",", "kernel_size", ",", "order", ",", "num_groups", ")", ")", "\n", "\n", "# in the last layer a 1\u00d71 convolution reduces the number of output channels to out_channels", "\n", "final_conv", "=", "nn", ".", "Conv3d", "(", "in_channels", ",", "out_channels", ",", "1", ")", "\n", "self", ".", "add_module", "(", "'final_conv'", ",", "final_conv", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zwxu064_RANP.unet.buildingblocks.conv3d": [[6, 8], ["torch.nn.Conv3d"], "function", ["None"], ["def", "conv3d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "bias", ",", "padding", "=", "1", ")", ":", "\n", "    ", "return", "nn", ".", "Conv3d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "padding", "=", "padding", ",", "bias", "=", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.unet.buildingblocks.create_conv": [[10, 61], ["enumerate", "modules.append", "modules.append", "torch.nn.ReLU", "modules.append", "torch.nn.LeakyReLU", "modules.append", "torch.nn.ELU", "modules.append", "buildingblocks.conv3d", "order.index", "ValueError", "torch.nn.GroupNorm", "order.index", "modules.append", "modules.append", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.unet.buildingblocks.conv3d"], ["", "def", "create_conv", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "order", ",", "num_groups", ",", "padding", "=", "1", ")", ":", "\n", "    ", "\"\"\"\n    Create a list of modules with together constitute a single conv layer with non-linearity\n    and optional batchnorm/groupnorm.\n\n    Args:\n        in_channels (int): number of input channels\n        out_channels (int): number of output channels\n        order (string): order of things, e.g.\n            'cr' -> conv + ReLU\n            'crg' -> conv + ReLU + groupnorm\n            'cl' -> conv + LeakyReLU\n            'ce' -> conv + ELU\n        num_groups (int): number of groups for the GroupNorm\n        padding (int): add zero-padding to the input\n\n    Return:\n        list of tuple (name, module)\n    \"\"\"", "\n", "assert", "'c'", "in", "order", ",", "\"Conv layer MUST be present\"", "\n", "assert", "order", "[", "0", "]", "not", "in", "'rle'", ",", "'Non-linearity cannot be the first operation in the layer'", "\n", "\n", "modules", "=", "[", "]", "\n", "for", "i", ",", "char", "in", "enumerate", "(", "order", ")", ":", "\n", "        ", "if", "char", "==", "'r'", ":", "\n", "            ", "modules", ".", "append", "(", "(", "'ReLU'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ")", "\n", "", "elif", "char", "==", "'l'", ":", "\n", "            ", "modules", ".", "append", "(", "(", "'LeakyReLU'", ",", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.1", ",", "inplace", "=", "True", ")", ")", ")", "\n", "", "elif", "char", "==", "'e'", ":", "\n", "            ", "modules", ".", "append", "(", "(", "'ELU'", ",", "nn", ".", "ELU", "(", "inplace", "=", "True", ")", ")", ")", "\n", "", "elif", "char", "==", "'c'", ":", "\n", "# add learnable bias only in the absence of gatchnorm/groupnorm", "\n", "            ", "bias", "=", "not", "(", "'g'", "in", "order", "or", "'b'", "in", "order", ")", "\n", "modules", ".", "append", "(", "(", "'conv'", ",", "conv3d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "bias", ",", "padding", "=", "padding", ")", ")", ")", "\n", "", "elif", "char", "==", "'g'", ":", "\n", "            ", "is_before_conv", "=", "i", "<", "order", ".", "index", "(", "'c'", ")", "\n", "assert", "not", "is_before_conv", ",", "'GroupNorm MUST go after the Conv3d'", "\n", "# number of groups must be less or equal the number of channels", "\n", "if", "out_channels", "<", "num_groups", ":", "\n", "                ", "num_groups", "=", "out_channels", "\n", "", "modules", ".", "append", "(", "(", "'groupnorm'", ",", "nn", ".", "GroupNorm", "(", "num_groups", "=", "num_groups", ",", "num_channels", "=", "out_channels", ")", ")", ")", "\n", "", "elif", "char", "==", "'b'", ":", "\n", "            ", "is_before_conv", "=", "i", "<", "order", ".", "index", "(", "'c'", ")", "\n", "if", "is_before_conv", ":", "\n", "                ", "modules", ".", "append", "(", "(", "'batchnorm'", ",", "nn", ".", "BatchNorm3d", "(", "in_channels", ")", ")", ")", "\n", "", "else", ":", "\n", "                ", "modules", ".", "append", "(", "(", "'batchnorm'", ",", "nn", ".", "BatchNorm3d", "(", "out_channels", ")", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "f\"Unsupported layer type '{char}'. MUST be one of ['b', 'g', 'r', 'l', 'e', 'c']\"", ")", "\n", "\n", "", "", "return", "modules", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.unet.metrics.DiceCoefficient.__init__": [[25, 28], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "epsilon", "=", "1e-5", ",", "ignore_index", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "epsilon", "=", "epsilon", "\n", "self", ".", "ignore_index", "=", "ignore_index", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.unet.metrics.DiceCoefficient.__call__": [[29, 37], ["torch.mean", "torch.mean", "torch.mean", "torch.mean", "unet3d.losses.compute_per_channel_dice"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.unet.losses.compute_per_channel_dice"], ["", "def", "__call__", "(", "self", ",", "input", ",", "target", ")", ":", "\n", "        ", "\"\"\"\n        :param input: 5D probability maps torch tensor (NxCxDxHxW)\n        :param target: 4D or 5D ground truth torch tensor. 4D (NxDxHxW) tensor will be expanded to 5D as one-hot\n        :return: Soft Dice Coefficient averaged over all channels/classes\n        \"\"\"", "\n", "# Average across channels in order to get the final score", "\n", "return", "torch", ".", "mean", "(", "compute_per_channel_dice", "(", "input", ",", "target", ",", "epsilon", "=", "self", ".", "epsilon", ",", "ignore_index", "=", "self", ".", "ignore_index", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.unet.metrics.MeanIoU.__init__": [[44, 51], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "skip_channels", "=", "(", ")", ",", "ignore_index", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        :param skip_channels: list/tuple of channels to be ignored from the IoU computation\n        :param ignore_index: id of the label to be ignored from IoU computation\n        \"\"\"", "\n", "self", ".", "ignore_index", "=", "ignore_index", "\n", "self", ".", "skip_channels", "=", "skip_channels", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.unet.metrics.MeanIoU.__call__": [[52, 90], ["metrics.MeanIoU._binarize_predictions", "binary_prediction.byte.byte.byte", "unet3d.losses.expand_as_one_hot.byte", "range", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "input.dim", "input.size", "unet3d.losses.expand_as_one_hot.dim", "unet3d.losses.expand_as_one_hot", "input.size", "unet3d.losses.expand_as_one_hot.size", "per_channel_iou.append", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "metrics.MeanIoU._jaccard_index"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.unet.metrics.MeanIoU._binarize_predictions", "home.repos.pwc.inspect_result.zwxu064_RANP.unet.losses.expand_as_one_hot", "home.repos.pwc.inspect_result.zwxu064_RANP.unet.metrics.MeanIoU._jaccard_index"], ["", "def", "__call__", "(", "self", ",", "input", ",", "target", ")", ":", "\n", "        ", "\"\"\"\n        :param input: 5D probability maps torch float tensor (NxCxDxHxW)\n        :param target: 4D or 5D ground truth torch tensor. 4D (NxDxHxW) tensor will be expanded to 5D as one-hot\n        :return: intersection over union averaged over all channels\n        \"\"\"", "\n", "assert", "input", ".", "dim", "(", ")", "==", "5", "\n", "\n", "n_classes", "=", "input", ".", "size", "(", ")", "[", "1", "]", "\n", "if", "target", ".", "dim", "(", ")", "==", "4", ":", "\n", "            ", "target", "=", "expand_as_one_hot", "(", "target", ",", "C", "=", "n_classes", ",", "ignore_index", "=", "self", ".", "ignore_index", ")", "\n", "\n", "# batch dim must be 1", "\n", "", "input", "=", "input", "[", "0", "]", "\n", "target", "=", "target", "[", "0", "]", "\n", "assert", "input", ".", "size", "(", ")", "==", "target", ".", "size", "(", ")", "\n", "\n", "binary_prediction", "=", "self", ".", "_binarize_predictions", "(", "input", ",", "n_classes", ")", "\n", "\n", "if", "self", ".", "ignore_index", "is", "not", "None", ":", "\n", "# zero out ignore_index", "\n", "            ", "mask", "=", "target", "==", "self", ".", "ignore_index", "\n", "binary_prediction", "[", "mask", "]", "=", "0", "\n", "target", "[", "mask", "]", "=", "0", "\n", "\n", "# convert to uint8 just in case", "\n", "", "binary_prediction", "=", "binary_prediction", ".", "byte", "(", ")", "\n", "target", "=", "target", ".", "byte", "(", ")", "\n", "\n", "per_channel_iou", "=", "[", "]", "\n", "for", "c", "in", "range", "(", "n_classes", ")", ":", "\n", "            ", "if", "c", "in", "self", ".", "skip_channels", ":", "\n", "                ", "continue", "\n", "\n", "", "per_channel_iou", ".", "append", "(", "self", ".", "_jaccard_index", "(", "binary_prediction", "[", "c", "]", ",", "target", "[", "c", "]", ")", ")", "\n", "\n", "", "assert", "per_channel_iou", ",", "\"All channels were ignored from the computation\"", "\n", "return", "torch", ".", "mean", "(", "torch", ".", "tensor", "(", "per_channel_iou", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.unet.metrics.MeanIoU._binarize_predictions": [[91, 103], ["torch.max", "torch.max", "torch.max", "torch.max", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "result.long", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like"], "methods", ["None"], ["", "def", "_binarize_predictions", "(", "self", ",", "input", ",", "n_classes", ")", ":", "\n", "        ", "\"\"\"\n        Puts 1 for the class/channel with the highest probability and 0 in other channels. Returns byte tensor of the\n        same size as the input tensor.\n        \"\"\"", "\n", "if", "n_classes", "==", "1", ":", "\n", "# for single channel input just threshold the probability map", "\n", "            ", "result", "=", "input", ">", "0.5", "\n", "return", "result", ".", "long", "(", ")", "\n", "\n", "", "_", ",", "max_index", "=", "torch", ".", "max", "(", "input", ",", "dim", "=", "0", ",", "keepdim", "=", "True", ")", "\n", "return", "torch", ".", "zeros_like", "(", "input", ",", "dtype", "=", "torch", ".", "uint8", ")", ".", "scatter_", "(", "0", ",", "max_index", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.unet.metrics.MeanIoU._jaccard_index": [[104, 109], ["torch.sum().float", "torch.sum().float", "torch.sum().float", "torch.sum().float", "torch.sum().float", "torch.sum().float", "torch.sum().float", "torch.sum().float", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["", "def", "_jaccard_index", "(", "self", ",", "prediction", ",", "target", ")", ":", "\n", "        ", "\"\"\"\n        Computes IoU for a given target and prediction tensors\n        \"\"\"", "\n", "return", "torch", ".", "sum", "(", "prediction", "&", "target", ")", ".", "float", "(", ")", "/", "torch", ".", "sum", "(", "prediction", "|", "target", ")", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.unet.metrics.AdaptedRandError.__init__": [[112, 114], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "all_stats", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "all_stats", "=", "all_stats", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.unet.metrics.AdaptedRandError.__call__": [[115, 117], ["unet3d.utils.adapted_rand"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.unet.utils.adapted_rand"], ["", "def", "__call__", "(", "self", ",", "input", ",", "target", ")", ":", "\n", "        ", "return", "adapted_rand", "(", "input", ",", "target", ",", "all_stats", "=", "self", ".", "all_stats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.unet.metrics.BoundaryAdaptedRandError.__init__": [[120, 125], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "threshold", "=", "0.4", ",", "use_last_target", "=", "False", ",", "use_first_input", "=", "False", ",", "invert_pmaps", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "threshold", "=", "threshold", "\n", "self", ".", "use_last_target", "=", "use_last_target", "\n", "self", ".", "use_first_input", "=", "use_first_input", "\n", "self", ".", "invert_pmaps", "=", "invert_pmaps", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.unet.metrics.BoundaryAdaptedRandError.__call__": [[126, 178], ["isinstance", "isinstance", "isinstance", "isinstance", "range", "LOGGER.info", "input[].detach().cpu().numpy", "numpy.logical_not.astype", "skimage.measure.label", "target[].detach().cpu().numpy.astype", "unet3d.utils.adapted_rand", "per_channel_arand.append", "numpy.min", "numpy.argmin", "input[].detach().cpu().numpy.dim", "target[].detach().cpu().numpy", "target[].detach().cpu().numpy", "numpy.logical_not", "input[].detach().cpu", "target[].detach().cpu().numpy.dim", "target[].detach().cpu().numpy.dim", "target[].detach().cpu", "target[].detach().cpu", "input[].detach", "target[].detach", "target[].detach"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.unet.utils.adapted_rand"], ["", "def", "__call__", "(", "self", ",", "input", ",", "target", ")", ":", "\n", "        ", "if", "isinstance", "(", "input", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "assert", "input", ".", "dim", "(", ")", "==", "5", "\n", "# convert to numpy array", "\n", "input", "=", "input", "[", "0", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "# 4D", "\n", "\n", "", "if", "isinstance", "(", "target", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "if", "not", "self", ".", "use_last_target", ":", "\n", "                ", "assert", "target", ".", "dim", "(", ")", "==", "4", "\n", "# convert to numpy array", "\n", "target", "=", "target", "[", "0", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "# 3D", "\n", "", "else", ":", "\n", "# if use_last_target == True the target must be 5D (NxCxDxHxW)", "\n", "                ", "assert", "target", ".", "dim", "(", ")", "==", "5", "\n", "target", "=", "target", "[", "0", ",", "-", "1", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "# 3D", "\n", "\n", "", "", "if", "isinstance", "(", "input", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "assert", "input", ".", "ndim", "==", "4", "\n", "\n", "", "if", "isinstance", "(", "target", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "assert", "target", ".", "ndim", "==", "3", "\n", "\n", "", "if", "self", ".", "use_first_input", ":", "\n", "# compute only on the first input channel", "\n", "            ", "n_channels", "=", "1", "\n", "", "else", ":", "\n", "            ", "n_channels", "=", "input", ".", "shape", "[", "0", "]", "\n", "\n", "", "per_channel_arand", "=", "[", "]", "\n", "for", "c", "in", "range", "(", "n_channels", ")", ":", "\n", "            ", "predictions", "=", "input", "[", "c", "]", "\n", "# threshold probability maps", "\n", "predictions", "=", "predictions", ">", "self", ".", "threshold", "\n", "\n", "if", "self", ".", "invert_pmaps", ":", "\n", "# for connected component analysis we need to treat boundary signal as background", "\n", "# assign 0-label to boundary mask", "\n", "                ", "predictions", "=", "np", ".", "logical_not", "(", "predictions", ")", "\n", "\n", "", "predictions", "=", "predictions", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "# run connected components on the predicted mask; consider only 1-connectivity", "\n", "predicted", "=", "measure", ".", "label", "(", "predictions", ",", "background", "=", "0", ",", "connectivity", "=", "1", ")", "\n", "# make sure that target is 'int' type as well", "\n", "target", "=", "target", ".", "astype", "(", "np", ".", "int64", ")", "\n", "# compute AdaptedRand error", "\n", "arand", "=", "adapted_rand", "(", "predicted", ",", "target", ")", "\n", "per_channel_arand", ".", "append", "(", "arand", ")", "\n", "\n", "# get minimum AdaptedRand error across channels", "\n", "", "min_arand", ",", "c_index", "=", "np", ".", "min", "(", "per_channel_arand", ")", ",", "np", ".", "argmin", "(", "per_channel_arand", ")", "\n", "LOGGER", ".", "info", "(", "f'Min AdaptedRand error: {min_arand}, channel: {c_index}'", ")", "\n", "return", "min_arand", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.unet.metrics._AbstractAP.__init__": [[181, 185], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "iou_range", "=", "(", "0.5", ",", "1.0", ")", ",", "ignore_index", "=", "-", "1", ",", "min_instance_size", "=", "None", ")", ":", "\n", "        ", "self", ".", "iou_range", "=", "iou_range", "\n", "self", ".", "ignore_index", "=", "ignore_index", "\n", "self", ".", "min_instance_size", "=", "min_instance_size", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.unet.metrics._AbstractAP.__call__": [[186, 188], ["NotImplementedError"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "input", ",", "target", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.unet.metrics._AbstractAP._calculate_average_precision": [[189, 205], ["metrics._AbstractAP._roc_curve", "recall.insert", "recall.append", "precision.insert", "precision.append", "range", "range", "max", "len", "len"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.unet.metrics._AbstractAP._roc_curve"], ["", "def", "_calculate_average_precision", "(", "self", ",", "predicted", ",", "target", ",", "target_instances", ")", ":", "\n", "        ", "recall", ",", "precision", "=", "self", ".", "_roc_curve", "(", "predicted", ",", "target", ",", "target_instances", ")", "\n", "recall", ".", "insert", "(", "0", ",", "0.0", ")", "# insert 0.0 at beginning of list", "\n", "recall", ".", "append", "(", "1.0", ")", "# insert 1.0 at end of list", "\n", "precision", ".", "insert", "(", "0", ",", "0.0", ")", "# insert 0.0 at beginning of list", "\n", "precision", ".", "append", "(", "0.0", ")", "# insert 0.0 at end of list", "\n", "# make the precision(recall) piece-wise constant and monotonically decreasing", "\n", "# by iterating backwards starting from the last precision value (0.0)", "\n", "# see: https://www.jeremyjordan.me/evaluating-image-segmentation-models/ e.g.", "\n", "for", "i", "in", "range", "(", "len", "(", "precision", ")", "-", "2", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "            ", "precision", "[", "i", "]", "=", "max", "(", "precision", "[", "i", "]", ",", "precision", "[", "i", "+", "1", "]", ")", "\n", "# compute the area under precision recall curve by simple integration of piece-wise constant function", "\n", "", "ap", "=", "0.0", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "recall", ")", ")", ":", "\n", "            ", "ap", "+=", "(", "(", "recall", "[", "i", "]", "-", "recall", "[", "i", "-", "1", "]", ")", "*", "precision", "[", "i", "]", ")", "\n", "", "return", "ap", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.unet.metrics._AbstractAP._roc_curve": [[206, 243], ["metrics._AbstractAP._filter_instances", "numpy.arange", "numpy.array", "set", "set", "set", "len", "len", "len", "numpy.array.append", "sorted", "list", "list", "metrics._AbstractAP._find_overlapping_target", "set.discard", "set.add", "set.discard", "set.discard"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.unet.metrics._AbstractAP._filter_instances", "home.repos.pwc.inspect_result.zwxu064_RANP.unet.metrics._AbstractAP._find_overlapping_target"], ["", "def", "_roc_curve", "(", "self", ",", "predicted", ",", "target", ",", "target_instances", ")", ":", "\n", "        ", "ROC", "=", "[", "]", "\n", "predicted", ",", "predicted_instances", "=", "self", ".", "_filter_instances", "(", "predicted", ")", "\n", "\n", "# compute precision/recall curve points for various IoU values from a given range", "\n", "for", "min_iou", "in", "np", ".", "arange", "(", "self", ".", "iou_range", "[", "0", "]", ",", "self", ".", "iou_range", "[", "1", "]", ",", "0.1", ")", ":", "\n", "# initialize false negatives set", "\n", "            ", "false_negatives", "=", "set", "(", "target_instances", ")", "\n", "# initialize false positives set", "\n", "false_positives", "=", "set", "(", "predicted_instances", ")", "\n", "# initialize true positives set", "\n", "true_positives", "=", "set", "(", ")", "\n", "\n", "for", "pred_label", "in", "predicted_instances", ":", "\n", "                ", "target_label", "=", "self", ".", "_find_overlapping_target", "(", "pred_label", ",", "predicted", ",", "target", ",", "min_iou", ")", "\n", "if", "target_label", "is", "not", "None", ":", "\n", "# update TP, FP and FN", "\n", "                    ", "if", "target_label", "==", "self", ".", "ignore_index", ":", "\n", "# ignore if 'ignore_index' is the biggest overlapping", "\n", "                        ", "false_positives", ".", "discard", "(", "pred_label", ")", "\n", "", "else", ":", "\n", "                        ", "true_positives", ".", "add", "(", "pred_label", ")", "\n", "false_positives", ".", "discard", "(", "pred_label", ")", "\n", "false_negatives", ".", "discard", "(", "target_label", ")", "\n", "\n", "", "", "", "tp", "=", "len", "(", "true_positives", ")", "\n", "fp", "=", "len", "(", "false_positives", ")", "\n", "fn", "=", "len", "(", "false_negatives", ")", "\n", "\n", "recall", "=", "tp", "/", "(", "tp", "+", "fn", ")", "\n", "precision", "=", "tp", "/", "(", "tp", "+", "fp", ")", "\n", "ROC", ".", "append", "(", "(", "recall", ",", "precision", ")", ")", "\n", "\n", "# sort points by recall", "\n", "", "ROC", "=", "np", ".", "array", "(", "sorted", "(", "ROC", ",", "key", "=", "lambda", "t", ":", "t", "[", "0", "]", ")", ")", "\n", "# return recall and precision values", "\n", "return", "list", "(", "ROC", "[", ":", ",", "0", "]", ")", ",", "list", "(", "ROC", "[", ":", ",", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.unet.metrics._AbstractAP._find_overlapping_target": [[244, 262], ["numpy.unique", "numpy.argmax", "metrics._AbstractAP._iou"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.unet.metrics._AbstractAP._iou"], ["", "def", "_find_overlapping_target", "(", "self", ",", "predicted_label", ",", "predicted", ",", "target", ",", "min_iou", ")", ":", "\n", "        ", "\"\"\"\n        Return ground truth label which overlaps by at least 'min_iou' with a given input label 'p_label'\n        or None if such ground truth label does not exist.\n        \"\"\"", "\n", "mask_predicted", "=", "predicted", "==", "predicted_label", "\n", "overlapping_labels", "=", "target", "[", "mask_predicted", "]", "\n", "labels", ",", "counts", "=", "np", ".", "unique", "(", "overlapping_labels", ",", "return_counts", "=", "True", ")", "\n", "# retrieve the biggest overlapping label", "\n", "target_label_ind", "=", "np", ".", "argmax", "(", "counts", ")", "\n", "target_label", "=", "labels", "[", "target_label_ind", "]", "\n", "# return target label if IoU greater than 'min_iou'; since we're starting from 0.5 IoU there might be", "\n", "# only one target label that fulfill this criterion", "\n", "mask_target", "=", "target", "==", "target_label", "\n", "# return target_label if IoU > min_iou", "\n", "if", "self", ".", "_iou", "(", "mask_predicted", ",", "mask_target", ")", ">", "min_iou", ":", "\n", "            ", "return", "target_label", "\n", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.unet.metrics._AbstractAP._iou": [[263, 271], ["numpy.logical_and", "numpy.logical_or", "numpy.sum", "numpy.sum"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_iou", "(", "prediction", ",", "target", ")", ":", "\n", "        ", "\"\"\"\n        Computes intersection over union\n        \"\"\"", "\n", "intersection", "=", "np", ".", "logical_and", "(", "prediction", ",", "target", ")", "\n", "union", "=", "np", ".", "logical_or", "(", "prediction", ",", "target", ")", "\n", "return", "np", ".", "sum", "(", "intersection", ")", "/", "np", ".", "sum", "(", "union", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.unet.metrics._AbstractAP._filter_instances": [[272, 288], ["set", "set.discard", "numpy.unique", "zip", "numpy.unique"], "methods", ["None"], ["", "def", "_filter_instances", "(", "self", ",", "input", ")", ":", "\n", "        ", "\"\"\"\n        Filters instances smaller than 'min_instance_size' by overriding them with 'ignore_index'\n        :param input: input instance segmentation\n        :return: tuple: (instance segmentation with small instances filtered, set of unique labels without the 'ignore_index')\n        \"\"\"", "\n", "if", "self", ".", "min_instance_size", "is", "not", "None", ":", "\n", "            ", "labels", ",", "counts", "=", "np", ".", "unique", "(", "input", ",", "return_counts", "=", "True", ")", "\n", "for", "label", ",", "count", "in", "zip", "(", "labels", ",", "counts", ")", ":", "\n", "                ", "if", "count", "<", "self", ".", "min_instance_size", ":", "\n", "                    ", "mask", "=", "input", "==", "label", "\n", "input", "[", "mask", "]", "=", "self", ".", "ignore_index", "\n", "\n", "", "", "", "labels", "=", "set", "(", "np", ".", "unique", "(", "input", ")", ")", "\n", "labels", ".", "discard", "(", "self", ".", "ignore_index", ")", "\n", "return", "input", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.unet.metrics._AbstractAP._dt_to_cc": [[289, 299], ["skimage.measure.label"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_dt_to_cc", "(", "distance_transform", ",", "threshold", ")", ":", "\n", "        ", "\"\"\"\n        Threshold a given distance_transform and returns connected components.\n        :param distance_transform: 3D distance transform matrix\n        :param threshold: threshold energy level\n        :return: 3D segmentation volume\n        \"\"\"", "\n", "boundary", "=", "(", "distance_transform", ">", "threshold", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "return", "measure", ".", "label", "(", "boundary", ",", "background", "=", "0", ",", "connectivity", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.unet.metrics.StandardAveragePrecision.__init__": [[302, 304], ["metrics._AbstractAP.__init__"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.StereoLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "iou_range", "=", "(", "0.5", ",", "1.0", ")", ",", "ignore_index", "=", "-", "1", ",", "min_instance_size", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "iou_range", ",", "ignore_index", ",", "min_instance_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.unet.metrics.StandardAveragePrecision.__call__": [[305, 312], ["metrics.StandardAveragePrecision._filter_instances", "metrics.StandardAveragePrecision._calculate_average_precision", "isinstance", "isinstance"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.unet.metrics._AbstractAP._filter_instances", "home.repos.pwc.inspect_result.zwxu064_RANP.unet.metrics._AbstractAP._calculate_average_precision"], ["", "def", "__call__", "(", "self", ",", "input", ",", "target", ")", ":", "\n", "        ", "assert", "isinstance", "(", "input", ",", "np", ".", "ndarray", ")", "and", "isinstance", "(", "target", ",", "np", ".", "ndarray", ")", "\n", "assert", "input", ".", "ndim", "==", "target", ".", "ndim", "==", "3", "\n", "\n", "target", ",", "target_instances", "=", "self", ".", "_filter_instances", "(", "target", ")", "\n", "\n", "return", "self", ".", "_calculate_average_precision", "(", "input", ",", "target", ",", "target_instances", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.unet.metrics.DistanceTransformAveragePrecision.__init__": [[315, 318], ["metrics._AbstractAP.__init__"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.StereoLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "threshold", "=", "0.1", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "threshold", "=", "threshold", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.unet.metrics.DistanceTransformAveragePrecision.__call__": [[319, 342], ["isinstance", "isinstance", "isinstance", "isinstance", "metrics.DistanceTransformAveragePrecision._dt_to_cc", "metrics.DistanceTransformAveragePrecision._dt_to_cc", "metrics.DistanceTransformAveragePrecision._filter_instances", "metrics.DistanceTransformAveragePrecision._calculate_average_precision", "input[].detach().cpu().numpy", "target[].detach().cpu().numpy", "input[].detach().cpu().numpy.dim", "target[].detach().cpu().numpy.dim", "input[].detach().cpu", "target[].detach().cpu", "input[].detach", "target[].detach"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.unet.metrics._AbstractAP._dt_to_cc", "home.repos.pwc.inspect_result.zwxu064_RANP.unet.metrics._AbstractAP._dt_to_cc", "home.repos.pwc.inspect_result.zwxu064_RANP.unet.metrics._AbstractAP._filter_instances", "home.repos.pwc.inspect_result.zwxu064_RANP.unet.metrics._AbstractAP._calculate_average_precision"], ["", "def", "__call__", "(", "self", ",", "input", ",", "target", ")", ":", "\n", "        ", "if", "isinstance", "(", "input", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "assert", "input", ".", "dim", "(", ")", "==", "5", "\n", "# convert to numpy array", "\n", "input", "=", "input", "[", "0", ",", "0", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "# 3D distance transform", "\n", "\n", "", "if", "isinstance", "(", "target", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "assert", "target", ".", "dim", "(", ")", "==", "5", "\n", "target", "=", "target", "[", "0", ",", "0", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "# 3D distance transform", "\n", "\n", "", "if", "isinstance", "(", "input", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "assert", "input", ".", "ndim", "==", "3", "\n", "\n", "", "if", "isinstance", "(", "target", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "assert", "target", ".", "ndim", "==", "3", "\n", "\n", "", "predicted_cc", "=", "self", ".", "_dt_to_cc", "(", "input", ",", "self", ".", "threshold", ")", "\n", "target_cc", "=", "self", ".", "_dt_to_cc", "(", "target", ",", "self", ".", "threshold", ")", "\n", "\n", "# get ground truth label set", "\n", "target_cc", ",", "target_instances", "=", "self", ".", "_filter_instances", "(", "target_cc", ")", "\n", "\n", "return", "self", ".", "_calculate_average_precision", "(", "predicted_cc", ",", "target_cc", ",", "target_instances", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.unet.metrics.QuantizedDistanceTransformAveragePrecision.__init__": [[345, 348], ["metrics._AbstractAP.__init__"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.StereoLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "threshold", "=", "0", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "threshold", "=", "threshold", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.unet.metrics.QuantizedDistanceTransformAveragePrecision.__call__": [[349, 374], ["isinstance", "isinstance", "isinstance", "isinstance", "metrics.QuantizedDistanceTransformAveragePrecision._dt_to_cc", "metrics.QuantizedDistanceTransformAveragePrecision._dt_to_cc", "metrics.QuantizedDistanceTransformAveragePrecision._filter_instances", "metrics.QuantizedDistanceTransformAveragePrecision._calculate_average_precision", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "input.detach().cpu().numpy.detach().cpu().numpy.detach().cpu().numpy", "target[].detach().cpu().numpy", "input.detach().cpu().numpy.detach().cpu().numpy.dim", "target[].detach().cpu().numpy.dim", "input.detach().cpu().numpy.detach().cpu().numpy.detach().cpu", "target[].detach().cpu", "input.detach().cpu().numpy.detach().cpu().numpy.detach", "target[].detach"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.unet.metrics._AbstractAP._dt_to_cc", "home.repos.pwc.inspect_result.zwxu064_RANP.unet.metrics._AbstractAP._dt_to_cc", "home.repos.pwc.inspect_result.zwxu064_RANP.unet.metrics._AbstractAP._filter_instances", "home.repos.pwc.inspect_result.zwxu064_RANP.unet.metrics._AbstractAP._calculate_average_precision"], ["", "def", "__call__", "(", "self", ",", "input", ",", "target", ")", ":", "\n", "        ", "if", "isinstance", "(", "input", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "assert", "input", ".", "dim", "(", ")", "==", "5", "\n", "# convert probability maps to label tensor", "\n", "input", "=", "torch", ".", "argmax", "(", "input", "[", "0", "]", ",", "dim", "=", "0", ")", "\n", "# convert to numpy array", "\n", "input", "=", "input", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "# 3D distance transform", "\n", "\n", "", "if", "isinstance", "(", "target", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "assert", "target", ".", "dim", "(", ")", "==", "4", "\n", "target", "=", "target", "[", "0", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "# 3D distance transform", "\n", "\n", "", "if", "isinstance", "(", "input", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "assert", "input", ".", "ndim", "==", "3", "\n", "\n", "", "if", "isinstance", "(", "target", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "assert", "target", ".", "ndim", "==", "3", "\n", "\n", "", "predicted_cc", "=", "self", ".", "_dt_to_cc", "(", "input", ",", "self", ".", "threshold", ")", "\n", "target_cc", "=", "self", ".", "_dt_to_cc", "(", "target", ",", "self", ".", "threshold", ")", "\n", "\n", "# get ground truth label set", "\n", "target_cc", ",", "target_instances", "=", "self", ".", "_filter_instances", "(", "target_cc", ")", "\n", "\n", "return", "self", ".", "_calculate_average_precision", "(", "predicted_cc", ",", "target_cc", ",", "target_instances", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.unet.metrics.BoundaryAveragePrecision.__init__": [[381, 399], ["metrics._AbstractAP.__init__"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.StereoLoss.__init__"], ["def", "__init__", "(", "self", ",", "threshold", "=", "0.4", ",", "iou_range", "=", "(", "0.5", ",", "1.0", ")", ",", "ignore_index", "=", "-", "1", ",", "min_instance_size", "=", "None", ",", "\n", "use_last_target", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        :param threshold: probability value at which the input is going to be thresholded\n        :param iou_range: compute ROC curve for the the range of IoU values: range(min,max,0.05)\n        :param ignore_index: label to be ignored during computation\n        :param min_instance_size: minimum size of the predicted instances to be considered\n        :param use_last_target: if True use the last target channel to compute AP\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "ignore_index", ",", "min_instance_size", ",", "iou_range", ")", "\n", "self", ".", "threshold", "=", "threshold", "\n", "# always have well defined ignore_index", "\n", "if", "ignore_index", "is", "None", ":", "\n", "            ", "ignore_index", "=", "-", "1", "\n", "", "self", ".", "iou_range", "=", "iou_range", "\n", "self", ".", "ignore_index", "=", "ignore_index", "\n", "self", ".", "min_instance_size", "=", "min_instance_size", "\n", "self", ".", "use_last_target", "=", "use_last_target", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.unet.metrics.BoundaryAveragePrecision.__call__": [[400, 448], ["isinstance", "isinstance", "isinstance", "isinstance", "metrics.BoundaryAveragePrecision._filter_instances", "range", "LOGGER.info", "input[].detach().cpu().numpy", "numpy.logical_not().astype", "skimage.measure.label", "metrics.BoundaryAveragePrecision._calculate_average_precision", "per_channel_ap.append", "numpy.max", "numpy.argmax", "input[].detach().cpu().numpy.dim", "target[].detach().cpu().numpy", "target[].detach().cpu().numpy", "input[].detach().cpu", "target[].detach().cpu().numpy.dim", "target[].detach().cpu().numpy.dim", "numpy.logical_not", "target[].detach().cpu", "target[].detach().cpu", "input[].detach", "target[].detach", "target[].detach"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.unet.metrics._AbstractAP._filter_instances", "home.repos.pwc.inspect_result.zwxu064_RANP.unet.metrics._AbstractAP._calculate_average_precision"], ["", "def", "__call__", "(", "self", ",", "input", ",", "target", ")", ":", "\n", "        ", "\"\"\"\n        :param input: 5D probability maps torch float tensor (NxCxDxHxW) / or 4D numpy.ndarray\n        :param target: 4D or 5D ground truth instance segmentation torch long tensor / or 3D numpy.ndarray\n        :return: highest average precision among channels\n        \"\"\"", "\n", "if", "isinstance", "(", "input", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "assert", "input", ".", "dim", "(", ")", "==", "5", "\n", "# convert to numpy array", "\n", "input", "=", "input", "[", "0", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "# 4D", "\n", "\n", "", "if", "isinstance", "(", "target", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "if", "not", "self", ".", "use_last_target", ":", "\n", "                ", "assert", "target", ".", "dim", "(", ")", "==", "4", "\n", "# convert to numpy array", "\n", "target", "=", "target", "[", "0", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "# 3D", "\n", "", "else", ":", "\n", "# if use_last_target == True the target must be 5D (NxCxDxHxW)", "\n", "                ", "assert", "target", ".", "dim", "(", ")", "==", "5", "\n", "target", "=", "target", "[", "0", ",", "-", "1", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "# 3D", "\n", "\n", "", "", "if", "isinstance", "(", "input", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "assert", "input", ".", "ndim", "==", "4", "\n", "\n", "", "if", "isinstance", "(", "target", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "assert", "target", ".", "ndim", "==", "3", "\n", "\n", "# filter small instances from the target and get ground truth label set (without 'ignore_index')", "\n", "", "target", ",", "target_instances", "=", "self", ".", "_filter_instances", "(", "target", ")", "\n", "\n", "per_channel_ap", "=", "[", "]", "\n", "n_channels", "=", "input", ".", "shape", "[", "0", "]", "\n", "for", "c", "in", "range", "(", "n_channels", ")", ":", "\n", "            ", "predictions", "=", "input", "[", "c", "]", "\n", "# threshold probability maps", "\n", "predictions", "=", "predictions", ">", "self", ".", "threshold", "\n", "# for connected component analysis we need to treat boundary signal as background", "\n", "# assign 0-label to boundary mask", "\n", "predictions", "=", "np", ".", "logical_not", "(", "predictions", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "# run connected components on the predicted mask; consider only 1-connectivity", "\n", "predicted", "=", "measure", ".", "label", "(", "predictions", ",", "background", "=", "0", ",", "connectivity", "=", "1", ")", "\n", "ap", "=", "self", ".", "_calculate_average_precision", "(", "predicted", ",", "target", ",", "target_instances", ")", "\n", "per_channel_ap", ".", "append", "(", "ap", ")", "\n", "\n", "# get maximum average precision across channels", "\n", "", "max_ap", ",", "c_index", "=", "np", ".", "max", "(", "per_channel_ap", ")", ",", "np", ".", "argmax", "(", "per_channel_ap", ")", "\n", "LOGGER", ".", "info", "(", "f'Max average precision: {max_ap}, channel: {c_index}'", ")", "\n", "return", "max_ap", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.unet.metrics.WithinAngleThreshold.__init__": [[456, 458], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "angle_threshold", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "threshold_radians", "=", "angle_threshold", "/", "360", "*", "np", ".", "pi", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.unet.metrics.WithinAngleThreshold.__call__": [[459, 481], ["isinstance", "zip", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "len", "len", "len", "torch.acos", "torch.acos", "torch.acos", "torch.acos", "error_radians[].numel", "torch.acos.numel", "torch.acos.numel", "torch.norm().detach().clamp", "torch.norm().detach().clamp", "torch.norm().detach().clamp", "torch.norm().detach().clamp", "torch.norm().detach().clamp", "torch.norm().detach().clamp", "torch.norm().detach().clamp", "torch.norm().detach().clamp", "torch.norm().detach", "torch.norm().detach", "torch.norm().detach", "torch.norm().detach", "torch.norm().detach", "torch.norm().detach", "torch.norm().detach", "torch.norm().detach", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "inputs", ",", "targets", ")", ":", "\n", "        ", "assert", "isinstance", "(", "inputs", ",", "list", ")", "\n", "if", "len", "(", "inputs", ")", "==", "1", ":", "\n", "            ", "targets", "=", "[", "targets", "]", "\n", "", "assert", "len", "(", "inputs", ")", "==", "len", "(", "targets", ")", "\n", "\n", "within_count", "=", "0", "\n", "total_count", "=", "0", "\n", "for", "input", ",", "target", "in", "zip", "(", "inputs", ",", "targets", ")", ":", "\n", "# normalize and multiply by the stability_coeff in order to prevent NaN results from torch.acos", "\n", "            ", "stability_coeff", "=", "0.999999", "\n", "input", "=", "input", "/", "torch", ".", "norm", "(", "input", ",", "p", "=", "2", ",", "dim", "=", "1", ")", ".", "detach", "(", ")", ".", "clamp", "(", "min", "=", "1e-8", ")", "*", "stability_coeff", "\n", "target", "=", "target", "/", "torch", ".", "norm", "(", "target", ",", "p", "=", "2", ",", "dim", "=", "1", ")", ".", "detach", "(", ")", ".", "clamp", "(", "min", "=", "1e-8", ")", "*", "stability_coeff", "\n", "# compute cosine map", "\n", "cosines", "=", "(", "input", "*", "target", ")", ".", "sum", "(", "dim", "=", "1", ")", "\n", "error_radians", "=", "torch", ".", "acos", "(", "cosines", ")", "\n", "# increase by the number of directions within the threshold", "\n", "within_count", "+=", "error_radians", "[", "error_radians", "<", "self", ".", "threshold_radians", "]", ".", "numel", "(", ")", "\n", "# increase by the number of all directions", "\n", "total_count", "+=", "error_radians", ".", "numel", "(", ")", "\n", "\n", "", "return", "torch", ".", "tensor", "(", "within_count", "/", "total_count", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.unet.metrics.InverseAngularError.__init__": [[484, 486], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.unet.metrics.InverseAngularError.__call__": [[487, 505], ["isinstance", "zip", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "len", "len", "len", "torch.acos", "torch.acos", "torch.acos", "torch.acos", "torch.acos.sum", "torch.acos.sum", "torch.norm().detach().clamp", "torch.norm().detach().clamp", "torch.norm().detach().clamp", "torch.norm().detach().clamp", "torch.norm().detach().clamp", "torch.norm().detach().clamp", "torch.norm().detach().clamp", "torch.norm().detach().clamp", "torch.norm().detach", "torch.norm().detach", "torch.norm().detach", "torch.norm().detach", "torch.norm().detach", "torch.norm().detach", "torch.norm().detach", "torch.norm().detach", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "inputs", ",", "targets", ",", "**", "kwargs", ")", ":", "\n", "        ", "assert", "isinstance", "(", "inputs", ",", "list", ")", "\n", "if", "len", "(", "inputs", ")", "==", "1", ":", "\n", "            ", "targets", "=", "[", "targets", "]", "\n", "", "assert", "len", "(", "inputs", ")", "==", "len", "(", "targets", ")", "\n", "\n", "total_error", "=", "0", "\n", "for", "input", ",", "target", "in", "zip", "(", "inputs", ",", "targets", ")", ":", "\n", "# normalize and multiply by the stability_coeff in order to prevent NaN results from torch.acos", "\n", "            ", "stability_coeff", "=", "0.999999", "\n", "input", "=", "input", "/", "torch", ".", "norm", "(", "input", ",", "p", "=", "2", ",", "dim", "=", "1", ")", ".", "detach", "(", ")", ".", "clamp", "(", "min", "=", "1e-8", ")", "*", "stability_coeff", "\n", "target", "=", "target", "/", "torch", ".", "norm", "(", "target", ",", "p", "=", "2", ",", "dim", "=", "1", ")", ".", "detach", "(", ")", ".", "clamp", "(", "min", "=", "1e-8", ")", "*", "stability_coeff", "\n", "# compute cosine map", "\n", "cosines", "=", "(", "input", "*", "target", ")", ".", "sum", "(", "dim", "=", "1", ")", "\n", "error_radians", "=", "torch", ".", "acos", "(", "cosines", ")", "\n", "total_error", "+=", "error_radians", ".", "sum", "(", ")", "\n", "\n", "", "return", "torch", ".", "tensor", "(", "1.", "/", "total_error", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.unet.metrics.PSNR.__init__": [[508, 510], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.unet.metrics.PSNR.__call__": [[511, 515], ["input.size", "target.size", "torch.log10", "torch.log10", "torch.log10", "torch.log10", "torch.max", "torch.max", "torch.max", "torch.max", "torch.mse_loss", "torch.mse_loss", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "input", ",", "target", ")", ":", "\n", "        ", "assert", "input", ".", "size", "(", ")", "==", "target", ".", "size", "(", ")", "\n", "\n", "return", "10", "*", "torch", ".", "log10", "(", "1", "/", "torch", ".", "max", "(", "F", ".", "mse_loss", "(", "input", ",", "target", ")", ",", "torch", ".", "tensor", "(", "0.01", ")", ".", "to", "(", "input", ".", "device", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.unet.metrics.get_evaluation_metric": [[517, 533], ["metrics.get_evaluation_metric._metric_class"], "function", ["None"], ["", "", "def", "get_evaluation_metric", "(", "config", ")", ":", "\n", "    ", "\"\"\"\n    Returns the evaluation metric function based on provided configuration\n    :param config: (dict) a top level configuration object containing the 'eval_metric' key\n    :return: an instance of the evaluation metric\n    \"\"\"", "\n", "\n", "def", "_metric_class", "(", "class_name", ")", ":", "\n", "        ", "m", "=", "importlib", ".", "import_module", "(", "'unet3d.metrics'", ")", "\n", "clazz", "=", "getattr", "(", "m", ",", "class_name", ")", "\n", "return", "clazz", "\n", "\n", "", "assert", "'eval_metric'", "in", "config", ",", "'Could not find evaluation metric configuration'", "\n", "metric_config", "=", "config", "[", "'eval_metric'", "]", "\n", "metric_class", "=", "_metric_class", "(", "metric_config", "[", "'name'", "]", ")", "\n", "return", "metric_class", "(", "**", "metric_config", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.zwxu064_RANP.unet.trainer.UNet3DTrainer.__init__": [[40, 82], ["trainer.UNet3DTrainer.logger.info", "logger.info", "tensorboardX.SummaryWriter", "utils.get_logger", "float", "float", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.unet.utils.get_logger"], ["def", "__init__", "(", "self", ",", "model", ",", "optimizer", ",", "lr_scheduler", ",", "loss_criterion", ",", "\n", "eval_criterion", ",", "device", ",", "loaders", ",", "checkpoint_dir", ",", "\n", "max_num_epochs", "=", "100", ",", "max_num_iterations", "=", "1e5", ",", "\n", "validate_after_iters", "=", "100", ",", "log_after_iters", "=", "100", ",", "\n", "validate_iters", "=", "None", ",", "num_iterations", "=", "1", ",", "num_epoch", "=", "0", ",", "\n", "eval_score_higher_is_better", "=", "True", ",", "best_eval_score", "=", "None", ",", "\n", "logger", "=", "None", ")", ":", "\n", "        ", "if", "logger", "is", "None", ":", "\n", "            ", "self", ".", "logger", "=", "utils", ".", "get_logger", "(", "'UNet3DTrainer'", ",", "level", "=", "logging", ".", "DEBUG", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "logger", "=", "logger", "\n", "\n", "", "self", ".", "logger", ".", "info", "(", "model", ")", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "optimizer", "=", "optimizer", "\n", "self", ".", "scheduler", "=", "lr_scheduler", "\n", "self", ".", "loss_criterion", "=", "loss_criterion", "\n", "self", ".", "eval_criterion", "=", "eval_criterion", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "loaders", "=", "loaders", "\n", "self", ".", "checkpoint_dir", "=", "checkpoint_dir", "\n", "self", ".", "max_num_epochs", "=", "max_num_epochs", "\n", "self", ".", "max_num_iterations", "=", "max_num_iterations", "\n", "self", ".", "validate_after_iters", "=", "validate_after_iters", "\n", "self", ".", "log_after_iters", "=", "log_after_iters", "\n", "self", ".", "validate_iters", "=", "validate_iters", "\n", "self", ".", "eval_score_higher_is_better", "=", "eval_score_higher_is_better", "\n", "logger", ".", "info", "(", "f'eval_score_higher_is_better: {eval_score_higher_is_better}'", ")", "\n", "\n", "if", "best_eval_score", "is", "not", "None", ":", "\n", "            ", "self", ".", "best_eval_score", "=", "best_eval_score", "\n", "", "else", ":", "\n", "# initialize the best_eval_score", "\n", "            ", "if", "eval_score_higher_is_better", ":", "\n", "                ", "self", ".", "best_eval_score", "=", "float", "(", "'-inf'", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "best_eval_score", "=", "float", "(", "'+inf'", ")", "\n", "\n", "", "", "self", ".", "writer", "=", "SummaryWriter", "(", "log_dir", "=", "os", ".", "path", ".", "join", "(", "checkpoint_dir", ",", "'logs'", ")", ")", "\n", "\n", "self", ".", "num_iterations", "=", "num_iterations", "\n", "self", ".", "num_epoch", "=", "num_epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.unet.trainer.UNet3DTrainer.from_checkpoint": [[83, 105], ["logger.info", "utils.load_checkpoint", "logger.info", "cls", "os.path.split", "torch.device"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.unet.utils.load_checkpoint"], ["", "@", "classmethod", "\n", "def", "from_checkpoint", "(", "cls", ",", "checkpoint_path", ",", "model", ",", "optimizer", ",", "lr_scheduler", ",", "loss_criterion", ",", "eval_criterion", ",", "loaders", ",", "\n", "logger", "=", "None", ")", ":", "\n", "        ", "logger", ".", "info", "(", "f\"Loading checkpoint '{checkpoint_path}'...\"", ")", "\n", "state", "=", "utils", ".", "load_checkpoint", "(", "checkpoint_path", ",", "model", ",", "optimizer", ")", "\n", "logger", ".", "info", "(", "\n", "f\"Checkpoint loaded. Epoch: {state['epoch']}. Best val score: {state['best_eval_score']}. Num_iterations: {state['num_iterations']}\"", ")", "\n", "checkpoint_dir", "=", "os", ".", "path", ".", "split", "(", "checkpoint_path", ")", "[", "0", "]", "\n", "return", "cls", "(", "model", ",", "optimizer", ",", "lr_scheduler", ",", "\n", "loss_criterion", ",", "eval_criterion", ",", "\n", "torch", ".", "device", "(", "state", "[", "'device'", "]", ")", ",", "\n", "loaders", ",", "checkpoint_dir", ",", "\n", "eval_score_higher_is_better", "=", "state", "[", "'eval_score_higher_is_better'", "]", ",", "\n", "best_eval_score", "=", "state", "[", "'best_eval_score'", "]", ",", "\n", "num_iterations", "=", "state", "[", "'num_iterations'", "]", ",", "\n", "num_epoch", "=", "state", "[", "'epoch'", "]", ",", "\n", "max_num_epochs", "=", "state", "[", "'max_num_epochs'", "]", ",", "\n", "max_num_iterations", "=", "state", "[", "'max_num_iterations'", "]", ",", "\n", "validate_after_iters", "=", "state", "[", "'validate_after_iters'", "]", ",", "\n", "log_after_iters", "=", "state", "[", "'log_after_iters'", "]", ",", "\n", "validate_iters", "=", "state", "[", "'validate_iters'", "]", ",", "\n", "logger", "=", "logger", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.unet.trainer.UNet3DTrainer.from_pretrained": [[106, 130], ["logger.info", "utils.load_checkpoint", "cls", "os.path.split"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.unet.utils.load_checkpoint"], ["", "@", "classmethod", "\n", "def", "from_pretrained", "(", "cls", ",", "pre_trained", ",", "model", ",", "optimizer", ",", "lr_scheduler", ",", "loss_criterion", ",", "eval_criterion", ",", "\n", "device", ",", "loaders", ",", "\n", "max_num_epochs", "=", "100", ",", "max_num_iterations", "=", "1e5", ",", "\n", "validate_after_iters", "=", "100", ",", "log_after_iters", "=", "100", ",", "\n", "validate_iters", "=", "None", ",", "num_iterations", "=", "1", ",", "num_epoch", "=", "0", ",", "\n", "eval_score_higher_is_better", "=", "True", ",", "best_eval_score", "=", "None", ",", "\n", "logger", "=", "None", ")", ":", "\n", "        ", "logger", ".", "info", "(", "f\"Logging pre-trained model from '{pre_trained}'...\"", ")", "\n", "utils", ".", "load_checkpoint", "(", "pre_trained", ",", "model", ",", "None", ")", "\n", "checkpoint_dir", "=", "os", ".", "path", ".", "split", "(", "pre_trained", ")", "[", "0", "]", "\n", "return", "cls", "(", "model", ",", "optimizer", ",", "lr_scheduler", ",", "\n", "loss_criterion", ",", "eval_criterion", ",", "\n", "device", ",", "loaders", ",", "checkpoint_dir", ",", "\n", "eval_score_higher_is_better", "=", "eval_score_higher_is_better", ",", "\n", "best_eval_score", "=", "best_eval_score", ",", "\n", "num_iterations", "=", "num_iterations", ",", "\n", "num_epoch", "=", "num_epoch", ",", "\n", "max_num_epochs", "=", "max_num_epochs", ",", "\n", "max_num_iterations", "=", "max_num_iterations", ",", "\n", "validate_after_iters", "=", "validate_after_iters", ",", "\n", "log_after_iters", "=", "log_after_iters", ",", "\n", "validate_iters", "=", "validate_iters", ",", "\n", "logger", "=", "logger", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.unet.trainer.UNet3DTrainer.fit": [[131, 140], ["range", "trainer.UNet3DTrainer.train"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.data.train"], ["", "def", "fit", "(", "self", ")", ":", "\n", "        ", "for", "_", "in", "range", "(", "self", ".", "num_epoch", ",", "self", ".", "max_num_epochs", ")", ":", "\n", "# train for one epoch", "\n", "            ", "should_terminate", "=", "self", ".", "train", "(", "self", ".", "loaders", "[", "'train'", "]", ")", "\n", "\n", "if", "should_terminate", ":", "\n", "                ", "break", "\n", "\n", "", "self", ".", "num_epoch", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.unet.trainer.UNet3DTrainer.train": [[141, 212], ["utils.RunningAverage", "utils.RunningAverage", "trainer.UNet3DTrainer.model.train", "enumerate", "trainer.UNet3DTrainer.logger.info", "trainer.UNet3DTrainer._split_training_batch", "trainer.UNet3DTrainer._forward_pass", "utils.RunningAverage.update", "trainer.UNet3DTrainer.optimizer.zero_grad", "loss.backward", "trainer.UNet3DTrainer.optimizer.step", "loss.item", "trainer.UNet3DTrainer._batch_size", "trainer.UNet3DTrainer.validate", "isinstance", "trainer.UNet3DTrainer._log_lr", "trainer.UNet3DTrainer._is_best_eval_score", "trainer.UNet3DTrainer._save_checkpoint", "hasattr", "trainer.UNet3DTrainer.eval_criterion", "utils.RunningAverage.update", "trainer.UNet3DTrainer.logger.info", "trainer.UNet3DTrainer._log_stats", "trainer.UNet3DTrainer._log_params", "trainer.UNet3DTrainer._log_images", "trainer.UNet3DTrainer.logger.info", "trainer.UNet3DTrainer.scheduler.step", "trainer.UNet3DTrainer.scheduler.step", "trainer.UNet3DTrainer.model.final_activation", "trainer.UNet3DTrainer.item", "trainer.UNet3DTrainer._batch_size"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.data.train", "home.repos.pwc.inspect_result.zwxu064_RANP.unet.trainer.UNet3DTrainer._split_training_batch", "home.repos.pwc.inspect_result.zwxu064_RANP.unet.trainer.UNet3DTrainer._forward_pass", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.AverageMeter.update", "home.repos.pwc.inspect_result.zwxu064_RANP.unet.trainer.UNet3DTrainer._batch_size", "home.repos.pwc.inspect_result.zwxu064_RANP.unet.trainer.UNet3DTrainer.validate", "home.repos.pwc.inspect_result.zwxu064_RANP.unet.trainer.UNet3DTrainer._log_lr", "home.repos.pwc.inspect_result.zwxu064_RANP.unet.trainer.UNet3DTrainer._is_best_eval_score", "home.repos.pwc.inspect_result.zwxu064_RANP.unet.trainer.UNet3DTrainer._save_checkpoint", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.AverageMeter.update", "home.repos.pwc.inspect_result.zwxu064_RANP.unet.trainer.UNet3DTrainer._log_stats", "home.repos.pwc.inspect_result.zwxu064_RANP.unet.trainer.UNet3DTrainer._log_params", "home.repos.pwc.inspect_result.zwxu064_RANP.unet.trainer.UNet3DTrainer._log_images", "home.repos.pwc.inspect_result.zwxu064_RANP.unet.trainer.UNet3DTrainer._batch_size"], ["", "", "def", "train", "(", "self", ",", "train_loader", ")", ":", "\n", "        ", "\"\"\"Trains the model for 1 epoch.\n\n        Args:\n            train_loader (torch.utils.data.DataLoader): training data loader\n\n        Returns:\n            True if the training should be terminated immediately, False otherwise\n        \"\"\"", "\n", "train_losses", "=", "utils", ".", "RunningAverage", "(", ")", "\n", "train_eval_scores", "=", "utils", ".", "RunningAverage", "(", ")", "\n", "\n", "# sets the model in training mode", "\n", "self", ".", "model", ".", "train", "(", ")", "\n", "\n", "for", "i", ",", "t", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "\n", "f'Training iteration {self.num_iterations}. Batch {i}. Epoch [{self.num_epoch}/{self.max_num_epochs - 1}]'", ")", "\n", "\n", "input", ",", "target", ",", "weight", "=", "self", ".", "_split_training_batch", "(", "t", ")", "\n", "\n", "output", ",", "loss", "=", "self", ".", "_forward_pass", "(", "input", ",", "target", ",", "weight", ")", "\n", "\n", "train_losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "self", ".", "_batch_size", "(", "input", ")", ")", "\n", "\n", "# compute gradients and update parameters", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "if", "self", ".", "num_iterations", "%", "self", ".", "validate_after_iters", "==", "0", ":", "\n", "# evaluate on validation set", "\n", "                ", "eval_score", "=", "self", ".", "validate", "(", "self", ".", "loaders", "[", "'val'", "]", ")", "\n", "# adjust learning rate if necessary", "\n", "if", "isinstance", "(", "self", ".", "scheduler", ",", "ReduceLROnPlateau", ")", ":", "\n", "                    ", "self", ".", "scheduler", ".", "step", "(", "eval_score", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "scheduler", ".", "step", "(", ")", "\n", "# log current learning rate in tensorboard", "\n", "", "self", ".", "_log_lr", "(", ")", "\n", "# remember best validation metric", "\n", "is_best", "=", "self", ".", "_is_best_eval_score", "(", "eval_score", ")", "\n", "\n", "# save checkpoint", "\n", "self", ".", "_save_checkpoint", "(", "is_best", ")", "\n", "\n", "", "if", "self", ".", "num_iterations", "%", "self", ".", "log_after_iters", "==", "0", ":", "\n", "# if model contains final_activation layer for normalizing logits apply it, otherwise both", "\n", "# the evaluation metric as well as images in tensorboard will be incorrectly computed", "\n", "                ", "if", "hasattr", "(", "self", ".", "model", ",", "'final_activation'", ")", ":", "\n", "                    ", "output", "=", "self", ".", "model", ".", "final_activation", "(", "output", ")", "\n", "\n", "# compute eval criterion", "\n", "", "eval_score", "=", "self", ".", "eval_criterion", "(", "output", ",", "target", ")", "\n", "train_eval_scores", ".", "update", "(", "eval_score", ".", "item", "(", ")", ",", "self", ".", "_batch_size", "(", "input", ")", ")", "\n", "\n", "# log stats, params and images", "\n", "self", ".", "logger", ".", "info", "(", "\n", "f'Training stats. Loss: {train_losses.avg}. Evaluation score: {train_eval_scores.avg}'", ")", "\n", "self", ".", "_log_stats", "(", "'train'", ",", "train_losses", ".", "avg", ",", "train_eval_scores", ".", "avg", ")", "\n", "self", ".", "_log_params", "(", ")", "\n", "self", ".", "_log_images", "(", "input", ",", "target", ",", "output", ")", "\n", "\n", "", "if", "self", ".", "max_num_iterations", "<", "self", ".", "num_iterations", ":", "\n", "                ", "self", ".", "logger", ".", "info", "(", "\n", "f'Maximum number of iterations {self.max_num_iterations} exceeded. Finishing training...'", ")", "\n", "return", "True", "\n", "\n", "", "self", ".", "num_iterations", "+=", "1", "\n", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.unet.trainer.UNet3DTrainer.validate": [[213, 244], ["trainer.UNet3DTrainer.logger.info", "utils.RunningAverage", "utils.RunningAverage", "trainer.UNet3DTrainer.model.eval", "trainer.UNet3DTrainer.model.train", "torch.no_grad", "enumerate", "trainer.UNet3DTrainer._log_stats", "trainer.UNet3DTrainer.logger.info", "trainer.UNet3DTrainer.logger.info", "trainer.UNet3DTrainer._split_training_batch", "trainer.UNet3DTrainer._forward_pass", "utils.RunningAverage.update", "trainer.UNet3DTrainer.eval_criterion", "utils.RunningAverage.update", "loss.item", "trainer.UNet3DTrainer._batch_size", "trainer.UNet3DTrainer.item", "trainer.UNet3DTrainer._batch_size"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.data.train", "home.repos.pwc.inspect_result.zwxu064_RANP.unet.trainer.UNet3DTrainer._log_stats", "home.repos.pwc.inspect_result.zwxu064_RANP.unet.trainer.UNet3DTrainer._split_training_batch", "home.repos.pwc.inspect_result.zwxu064_RANP.unet.trainer.UNet3DTrainer._forward_pass", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.AverageMeter.update", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.AverageMeter.update", "home.repos.pwc.inspect_result.zwxu064_RANP.unet.trainer.UNet3DTrainer._batch_size", "home.repos.pwc.inspect_result.zwxu064_RANP.unet.trainer.UNet3DTrainer._batch_size"], ["", "def", "validate", "(", "self", ",", "val_loader", ")", ":", "\n", "        ", "self", ".", "logger", ".", "info", "(", "'Validating...'", ")", "\n", "\n", "val_losses", "=", "utils", ".", "RunningAverage", "(", ")", "\n", "val_scores", "=", "utils", ".", "RunningAverage", "(", ")", "\n", "\n", "try", ":", "\n", "# set the model in evaluation mode; final_activation doesn't need to be called explicitly", "\n", "            ", "self", ".", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "for", "i", ",", "t", "in", "enumerate", "(", "val_loader", ")", ":", "\n", "                    ", "self", ".", "logger", ".", "info", "(", "f'Validation iteration {i}'", ")", "\n", "\n", "input", ",", "target", ",", "weight", "=", "self", ".", "_split_training_batch", "(", "t", ")", "\n", "\n", "output", ",", "loss", "=", "self", ".", "_forward_pass", "(", "input", ",", "target", ",", "weight", ")", "\n", "val_losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "self", ".", "_batch_size", "(", "input", ")", ")", "\n", "\n", "eval_score", "=", "self", ".", "eval_criterion", "(", "output", ",", "target", ")", "\n", "val_scores", ".", "update", "(", "eval_score", ".", "item", "(", ")", ",", "self", ".", "_batch_size", "(", "input", ")", ")", "\n", "\n", "if", "self", ".", "validate_iters", "is", "not", "None", "and", "self", ".", "validate_iters", "<=", "i", ":", "\n", "# stop validation", "\n", "                        ", "break", "\n", "\n", "", "", "self", ".", "_log_stats", "(", "'val'", ",", "val_losses", ".", "avg", ",", "val_scores", ".", "avg", ")", "\n", "self", ".", "logger", ".", "info", "(", "f'Validation finished. Loss: {val_losses.avg}. Evaluation score: {val_scores.avg}'", ")", "\n", "return", "val_scores", ".", "avg", "\n", "", "", "finally", ":", "\n", "# set back in training mode", "\n", "            ", "self", ".", "model", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.unet.trainer.UNet3DTrainer._split_training_batch": [[245, 259], ["trainer.UNet3DTrainer._split_training_batch._move_to_device"], "methods", ["None"], ["", "", "def", "_split_training_batch", "(", "self", ",", "t", ")", ":", "\n", "        ", "def", "_move_to_device", "(", "input", ")", ":", "\n", "            ", "if", "isinstance", "(", "input", ",", "tuple", ")", "or", "isinstance", "(", "input", ",", "list", ")", ":", "\n", "                ", "return", "tuple", "(", "[", "_move_to_device", "(", "x", ")", "for", "x", "in", "input", "]", ")", "\n", "", "else", ":", "\n", "                ", "return", "input", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "", "", "t", "=", "_move_to_device", "(", "t", ")", "\n", "weight", "=", "None", "\n", "if", "len", "(", "t", ")", "==", "2", ":", "\n", "            ", "input", ",", "target", "=", "t", "\n", "", "else", ":", "\n", "            ", "input", ",", "target", ",", "weight", "=", "t", "\n", "", "return", "input", ",", "target", ",", "weight", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.unet.trainer.UNet3DTrainer._forward_pass": [[260, 271], ["trainer.UNet3DTrainer.model", "trainer.UNet3DTrainer.loss_criterion", "trainer.UNet3DTrainer.loss_criterion"], "methods", ["None"], ["", "def", "_forward_pass", "(", "self", ",", "input", ",", "target", ",", "weight", "=", "None", ")", ":", "\n", "# forward pass", "\n", "        ", "output", "=", "self", ".", "model", "(", "input", ")", "\n", "\n", "# compute the loss", "\n", "if", "weight", "is", "None", ":", "\n", "            ", "loss", "=", "self", ".", "loss_criterion", "(", "output", ",", "target", ")", "\n", "", "else", ":", "\n", "            ", "loss", "=", "self", ".", "loss_criterion", "(", "output", ",", "target", ",", "weight", ")", "\n", "\n", "", "return", "output", ",", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.unet.trainer.UNet3DTrainer._is_best_eval_score": [[272, 283], ["trainer.UNet3DTrainer.logger.info"], "methods", ["None"], ["", "def", "_is_best_eval_score", "(", "self", ",", "eval_score", ")", ":", "\n", "        ", "if", "self", ".", "eval_score_higher_is_better", ":", "\n", "            ", "is_best", "=", "eval_score", ">", "self", ".", "best_eval_score", "\n", "", "else", ":", "\n", "            ", "is_best", "=", "eval_score", "<", "self", ".", "best_eval_score", "\n", "\n", "", "if", "is_best", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "f'Saving new best evaluation metric: {eval_score}'", ")", "\n", "self", ".", "best_eval_score", "=", "eval_score", "\n", "\n", "", "return", "is_best", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.unet.trainer.UNet3DTrainer._save_checkpoint": [[284, 300], ["utils.save_checkpoint", "trainer.UNet3DTrainer.model.state_dict", "trainer.UNet3DTrainer.optimizer.state_dict", "str"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.unet.utils.save_checkpoint"], ["", "def", "_save_checkpoint", "(", "self", ",", "is_best", ")", ":", "\n", "        ", "utils", ".", "save_checkpoint", "(", "{", "\n", "'epoch'", ":", "self", ".", "num_epoch", "+", "1", ",", "\n", "'num_iterations'", ":", "self", ".", "num_iterations", ",", "\n", "'model_state_dict'", ":", "self", ".", "model", ".", "state_dict", "(", ")", ",", "\n", "'best_eval_score'", ":", "self", ".", "best_eval_score", ",", "\n", "'eval_score_higher_is_better'", ":", "self", ".", "eval_score_higher_is_better", ",", "\n", "'optimizer_state_dict'", ":", "self", ".", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'device'", ":", "str", "(", "self", ".", "device", ")", ",", "\n", "'max_num_epochs'", ":", "self", ".", "max_num_epochs", ",", "\n", "'max_num_iterations'", ":", "self", ".", "max_num_iterations", ",", "\n", "'validate_after_iters'", ":", "self", ".", "validate_after_iters", ",", "\n", "'log_after_iters'", ":", "self", ".", "log_after_iters", ",", "\n", "'validate_iters'", ":", "self", ".", "validate_iters", "\n", "}", ",", "is_best", ",", "checkpoint_dir", "=", "self", ".", "checkpoint_dir", ",", "\n", "logger", "=", "self", ".", "logger", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.unet.trainer.UNet3DTrainer._log_lr": [[301, 304], ["trainer.UNet3DTrainer.writer.add_scalar"], "methods", ["None"], ["", "def", "_log_lr", "(", "self", ")", ":", "\n", "        ", "lr", "=", "self", ".", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'learning_rate'", ",", "lr", ",", "self", ".", "num_iterations", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.unet.trainer.UNet3DTrainer._log_stats": [[305, 313], ["tag_value.items", "trainer.UNet3DTrainer.writer.add_scalar"], "methods", ["None"], ["", "def", "_log_stats", "(", "self", ",", "phase", ",", "loss_avg", ",", "eval_score_avg", ")", ":", "\n", "        ", "tag_value", "=", "{", "\n", "f'{phase}_loss_avg'", ":", "loss_avg", ",", "\n", "f'{phase}_eval_score_avg'", ":", "eval_score_avg", "\n", "}", "\n", "\n", "for", "tag", ",", "value", "in", "tag_value", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "writer", ".", "add_scalar", "(", "tag", ",", "value", ",", "self", ".", "num_iterations", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.unet.trainer.UNet3DTrainer._log_params": [[314, 319], ["trainer.UNet3DTrainer.logger.info", "trainer.UNet3DTrainer.model.named_parameters", "trainer.UNet3DTrainer.writer.add_histogram", "trainer.UNet3DTrainer.writer.add_histogram", "value.data.cpu().numpy", "value.grad.data.cpu().numpy", "value.data.cpu", "value.grad.data.cpu"], "methods", ["None"], ["", "", "def", "_log_params", "(", "self", ")", ":", "\n", "        ", "self", ".", "logger", ".", "info", "(", "'Logging model parameters and gradients'", ")", "\n", "for", "name", ",", "value", "in", "self", ".", "model", ".", "named_parameters", "(", ")", ":", "\n", "            ", "self", ".", "writer", ".", "add_histogram", "(", "name", ",", "value", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "self", ".", "num_iterations", ")", "\n", "self", ".", "writer", ".", "add_histogram", "(", "name", "+", "'/grad'", ",", "value", ".", "grad", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "self", ".", "num_iterations", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.unet.trainer.UNet3DTrainer._log_images": [[320, 337], ["inputs_map.items", "img_sources.items", "trainer.UNet3DTrainer._images_from_batch", "isinstance", "isinstance", "enumerate", "batch.data.cpu().numpy", "trainer.UNet3DTrainer.writer.add_image", "b.data.cpu().numpy", "batch.data.cpu", "b.data.cpu"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.unet.trainer.UNet3DTrainer._images_from_batch"], ["", "", "def", "_log_images", "(", "self", ",", "input", ",", "target", ",", "prediction", ")", ":", "\n", "        ", "inputs_map", "=", "{", "\n", "'inputs'", ":", "input", ",", "\n", "'targets'", ":", "target", ",", "\n", "'predictions'", ":", "prediction", "\n", "}", "\n", "img_sources", "=", "{", "}", "\n", "for", "name", ",", "batch", "in", "inputs_map", ".", "items", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "batch", ",", "list", ")", "or", "isinstance", "(", "batch", ",", "tuple", ")", ":", "\n", "                ", "for", "i", ",", "b", "in", "enumerate", "(", "batch", ")", ":", "\n", "                    ", "img_sources", "[", "f'{name}{i}'", "]", "=", "b", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "", "else", ":", "\n", "                ", "img_sources", "[", "name", "]", "=", "batch", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "", "for", "name", ",", "batch", "in", "img_sources", ".", "items", "(", ")", ":", "\n", "            ", "for", "tag", ",", "image", "in", "self", ".", "_images_from_batch", "(", "name", ",", "batch", ")", ":", "\n", "                ", "self", ".", "writer", ".", "add_image", "(", "tag", ",", "image", ",", "self", ".", "num_iterations", ",", "dataformats", "=", "'HW'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.unet.trainer.UNet3DTrainer._images_from_batch": [[338, 360], ["range", "range", "range", "tag_template.format", "tagged_images.append", "tag_template.format", "tagged_images.append", "trainer.UNet3DTrainer._normalize_img", "trainer.UNet3DTrainer._normalize_img"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.unet.trainer.UNet3DTrainer._normalize_img", "home.repos.pwc.inspect_result.zwxu064_RANP.unet.trainer.UNet3DTrainer._normalize_img"], ["", "", "", "def", "_images_from_batch", "(", "self", ",", "name", ",", "batch", ")", ":", "\n", "        ", "tag_template", "=", "'{}/batch_{}/channel_{}/slice_{}'", "\n", "\n", "tagged_images", "=", "[", "]", "\n", "\n", "if", "batch", ".", "ndim", "==", "5", ":", "\n", "# NCDHW", "\n", "            ", "slice_idx", "=", "batch", ".", "shape", "[", "2", "]", "//", "2", "# get the middle slice", "\n", "for", "batch_idx", "in", "range", "(", "batch", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "for", "channel_idx", "in", "range", "(", "batch", ".", "shape", "[", "1", "]", ")", ":", "\n", "                    ", "tag", "=", "tag_template", ".", "format", "(", "name", ",", "batch_idx", ",", "channel_idx", ",", "slice_idx", ")", "\n", "img", "=", "batch", "[", "batch_idx", ",", "channel_idx", ",", "slice_idx", ",", "...", "]", "\n", "tagged_images", ".", "append", "(", "(", "tag", ",", "self", ".", "_normalize_img", "(", "img", ")", ")", ")", "\n", "", "", "", "else", ":", "\n", "# batch has no channel dim: NDHW", "\n", "            ", "slice_idx", "=", "batch", ".", "shape", "[", "1", "]", "//", "2", "# get the middle slice", "\n", "for", "batch_idx", "in", "range", "(", "batch", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "tag", "=", "tag_template", ".", "format", "(", "name", ",", "batch_idx", ",", "0", ",", "slice_idx", ")", "\n", "img", "=", "batch", "[", "batch_idx", ",", "slice_idx", ",", "...", "]", "\n", "tagged_images", ".", "append", "(", "(", "tag", ",", "self", ".", "_normalize_img", "(", "img", ")", ")", ")", "\n", "\n", "", "", "return", "tagged_images", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.unet.trainer.UNet3DTrainer._normalize_img": [[361, 364], ["numpy.ptp", "numpy.min"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_normalize_img", "(", "img", ")", ":", "\n", "        ", "return", "(", "img", "-", "np", ".", "min", "(", "img", ")", ")", "/", "np", ".", "ptp", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.unet.trainer.UNet3DTrainer._batch_size": [[365, 371], ["isinstance", "isinstance", "input[].size", "input.size"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_batch_size", "(", "input", ")", ":", "\n", "        ", "if", "isinstance", "(", "input", ",", "list", ")", "or", "isinstance", "(", "input", ",", "tuple", ")", ":", "\n", "            ", "return", "input", "[", "0", "]", ".", "size", "(", "0", ")", "\n", "", "else", ":", "\n", "            ", "return", "input", ".", "size", "(", "0", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.zwxu064_RANP.unet.model.UNet3D.__init__": [[39, 105], ["torch.Module.__init__", "isinstance", "enumerate", "torch.ModuleList", "torch.ModuleList", "list", "range", "torch.ModuleList", "torch.ModuleList", "torch.Conv3d", "torch.Conv3d", "unet.utils.create_feature_maps", "encoders.append", "reversed", "unet.buildingblocks.Decoder", "decoders.append", "unet.buildingblocks.Encoder", "unet.buildingblocks.Encoder", "len", "torch.Sigmoid", "torch.Sigmoid", "torch.Softmax", "torch.Softmax"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.StereoLoss.__init__", "home.repos.pwc.inspect_result.zwxu064_RANP.unet.utils.create_feature_maps"], ["num_classes", "=", "opt", ".", "n_class", ",", "\n", "sample_size", "=", "opt", ".", "sample_size", ",", "\n", "width_mult", "=", "opt", ".", "width_mult", ")", "\n", "", "elif", "opt", ".", "model", "==", "'mobilenetv2'", ":", "\n", "        ", "from", ".", "models", ".", "mobilenetv2", "import", "get_fine_tuning_parameters", "\n", "model", "=", "mobilenetv2", ".", "get_model", "(", "\n", "num_classes", "=", "opt", ".", "n_class", ",", "\n", "sample_size", "=", "opt", ".", "sample_size", ",", "\n", "width_mult", "=", "opt", ".", "width_mult", ")", "\n", "", "elif", "opt", ".", "model", "==", "'resnext'", ":", "\n", "        ", "assert", "opt", ".", "model_depth", "in", "[", "50", ",", "101", ",", "152", "]", "\n", "from", "models", ".", "resnext", "import", "get_fine_tuning_parameters", "\n", "if", "opt", ".", "model_depth", "==", "50", ":", "\n", "            ", "model", "=", "resnext", ".", "resnext50", "(", "\n", "num_classes", "=", "opt", ".", "n_class", ",", "\n", "shortcut_type", "=", "opt", ".", "resnet_shortcut", ",", "\n", "cardinality", "=", "opt", ".", "resnext_cardinality", ",", "\n", "sample_size", "=", "opt", ".", "sample_size", ",", "\n", "sample_duration", "=", "opt", ".", "sample_duration", ")", "\n", "", "elif", "opt", ".", "model_depth", "==", "101", ":", "\n", "            ", "model", "=", "resnext", ".", "resnext101", "(", "\n", "num_classes", "=", "opt", ".", "n_class", ",", "\n", "shortcut_type", "=", "opt", ".", "resnet_shortcut", ",", "\n", "cardinality", "=", "opt", ".", "resnext_cardinality", ",", "\n", "sample_size", "=", "opt", ".", "sample_size", ",", "\n", "sample_duration", "=", "opt", ".", "sample_duration", ")", "\n", "", "elif", "opt", ".", "model_depth", "==", "152", ":", "\n", "            ", "model", "=", "resnext", ".", "resnext152", "(", "\n", "num_classes", "=", "opt", ".", "n_class", ",", "\n", "shortcut_type", "=", "opt", ".", "resnet_shortcut", ",", "\n", "cardinality", "=", "opt", ".", "resnext_cardinality", ",", "\n", "sample_size", "=", "opt", ".", "sample_size", ",", "\n", "sample_duration", "=", "opt", ".", "sample_duration", ")", "\n", "", "", "elif", "opt", ".", "model", "==", "'resnet'", ":", "\n", "        ", "assert", "opt", ".", "model_depth", "in", "[", "10", ",", "18", ",", "34", ",", "50", ",", "101", ",", "152", ",", "200", "]", "\n", "from", "models", ".", "resnet", "import", "get_fine_tuning_parameters", "\n", "if", "opt", ".", "model_depth", "==", "10", ":", "\n", "            ", "model", "=", "resnet", ".", "resnet10", "(", "\n", "num_classes", "=", "opt", ".", "n_class", ",", "\n", "shortcut_type", "=", "opt", ".", "resnet_shortcut", ",", "\n", "sample_size", "=", "opt", ".", "sample_size", ",", "\n", "sample_duration", "=", "opt", ".", "sample_duration", ")", "\n", "", "elif", "opt", ".", "model_depth", "==", "18", ":", "\n", "            ", "model", "=", "resnet", ".", "resnet18", "(", "\n", "num_classes", "=", "opt", ".", "n_class", ",", "\n", "shortcut_type", "=", "opt", ".", "resnet_shortcut", ",", "\n", "sample_size", "=", "opt", ".", "sample_size", ",", "\n", "sample_duration", "=", "opt", ".", "sample_duration", ")", "\n", "", "elif", "opt", ".", "model_depth", "==", "34", ":", "\n", "            ", "model", "=", "resnet", ".", "resnet34", "(", "\n", "num_classes", "=", "opt", ".", "n_class", ",", "\n", "shortcut_type", "=", "opt", ".", "resnet_shortcut", ",", "\n", "sample_size", "=", "opt", ".", "sample_size", ",", "\n", "sample_duration", "=", "opt", ".", "sample_duration", ")", "\n", "", "elif", "opt", ".", "model_depth", "==", "50", ":", "\n", "            ", "model", "=", "resnet", ".", "resnet50", "(", "\n", "num_classes", "=", "opt", ".", "n_class", ",", "\n", "shortcut_type", "=", "opt", ".", "resnet_shortcut", ",", "\n", "sample_size", "=", "opt", ".", "sample_size", ",", "\n", "sample_duration", "=", "opt", ".", "sample_duration", ")", "\n", "", "elif", "opt", ".", "model_depth", "==", "101", ":", "\n", "            ", "model", "=", "resnet", ".", "resnet101", "(", "\n", "num_classes", "=", "opt", ".", "n_class", ",", "\n", "shortcut_type", "=", "opt", ".", "resnet_shortcut", ",", "\n", "sample_size", "=", "opt", ".", "sample_size", ",", "\n", "sample_duration", "=", "opt", ".", "sample_duration", ")", "\n", "", "elif", "opt", ".", "model_depth", "==", "152", ":", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.unet.model.UNet3D.forward": [[106, 134], ["zip", "model.UNet3D.final_conv", "encoder", "encoders_features.insert", "decoder", "model.UNet3D.final_activation"], "methods", ["None"], ["            ", "model", "=", "resnet", ".", "resnet152", "(", "\n", "num_classes", "=", "opt", ".", "n_class", ",", "\n", "shortcut_type", "=", "opt", ".", "resnet_shortcut", ",", "\n", "sample_size", "=", "opt", ".", "sample_size", ",", "\n", "sample_duration", "=", "opt", ".", "sample_duration", ")", "\n", "", "elif", "opt", ".", "model_depth", "==", "200", ":", "\n", "            ", "model", "=", "resnet", ".", "resnet200", "(", "\n", "num_classes", "=", "opt", ".", "n_class", ",", "\n", "shortcut_type", "=", "opt", ".", "resnet_shortcut", ",", "\n", "sample_size", "=", "opt", ".", "sample_size", ",", "\n", "sample_duration", "=", "opt", ".", "sample_duration", ")", "\n", "", "", "elif", "opt", ".", "model", "==", "'i3d'", ":", "\n", "        ", "from", ".", "models", ".", "I3D", "import", "get_fine_tuning_parameters", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "opt", ".", "pretrain_path", ")", ":", "\n", "            ", "model", "=", "I3D", ".", "InceptionI3d", "(", "400", ",", "in_channels", "=", "3", ")", "\n", "", "else", ":", "\n", "            ", "model", "=", "I3D", ".", "InceptionI3d", "(", "opt", ".", "n_class", ",", "in_channels", "=", "3", ")", "\n", "\n", "", "", "if", "not", "opt", ".", "no_cuda", ":", "\n", "# model = model.cuda()", "\n", "# model = nn.DataParallel(model, device_ids=None)  # Zhiwei", "\n", "\n", "        ", "if", "opt", ".", "pretrain_path", ":", "\n", "            ", "print", "(", "'loading pretrained model {}'", ".", "format", "(", "opt", ".", "pretrain_path", ")", ")", "\n", "pretrain", "=", "torch", ".", "load", "(", "opt", ".", "pretrain_path", ",", "map_location", "=", "torch", ".", "device", "(", "'cpu'", ")", ")", "\n", "\n", "if", "False", ":", "\n", "                ", "assert", "opt", ".", "arch", "==", "pretrain", "[", "'arch'", "]", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.unet.model.ResidualUNet3D.__init__": [[162, 203], ["torch.Module.__init__", "isinstance", "enumerate", "torch.ModuleList", "torch.ModuleList", "list", "range", "torch.ModuleList", "torch.ModuleList", "torch.Conv3d", "torch.Conv3d", "unet.utils.create_feature_maps", "encoders.append", "reversed", "unet.buildingblocks.Decoder", "decoders.append", "torch.Sigmoid", "torch.Sigmoid", "torch.Softmax", "torch.Softmax", "unet.buildingblocks.Encoder", "unet.buildingblocks.Encoder", "len"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.StereoLoss.__init__", "home.repos.pwc.inspect_result.zwxu064_RANP.unet.utils.create_feature_maps"], ["\n", "parameters", "=", "get_fine_tuning_parameters", "(", "model", ",", "opt", ".", "ft_portion", ")", "\n", "return", "model", ",", "parameters", "\n", "", "", "else", ":", "\n", "        ", "if", "opt", ".", "pretrain_path", ":", "\n", "            ", "print", "(", "'loading pretrained model {}'", ".", "format", "(", "opt", ".", "pretrain_path", ")", ")", "\n", "pretrain", "=", "torch", ".", "load", "(", "opt", ".", "pretrain_path", ")", "\n", "assert", "opt", ".", "arch", "==", "pretrain", "[", "'arch'", "]", "\n", "model", ".", "load_state_dict", "(", "pretrain", "[", "'state_dict'", "]", ")", "\n", "\n", "if", "opt", ".", "model", "in", "[", "'mobilenet'", ",", "'mobilenetv2'", ",", "'shufflenet'", ",", "'shufflenetv2'", "]", ":", "\n", "                ", "model", ".", "module", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Dropout", "(", "0.9", ")", ",", "\n", "nn", ".", "Linear", "(", "model", ".", "module", ".", "classifier", "[", "1", "]", ".", "in_features", ",", "opt", ".", "n_finetune_classes", ")", "\n", ")", "\n", "", "elif", "opt", ".", "model", "==", "'squeezenet'", ":", "\n", "                ", "model", ".", "module", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Dropout", "(", "p", "=", "0.5", ")", ",", "\n", "nn", ".", "Conv3d", "(", "model", ".", "module", ".", "classifier", "[", "1", "]", ".", "in_channels", ",", "opt", ".", "n_finetune_classes", ",", "kernel_size", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "AvgPool3d", "(", "(", "1", ",", "4", ",", "4", ")", ",", "stride", "=", "1", ")", ")", "\n", "", "else", ":", "\n", "                ", "model", ".", "module", ".", "fc", "=", "nn", ".", "Linear", "(", "model", ".", "module", ".", "fc", ".", "in_features", ",", "opt", ".", "n_finetune_classes", ")", "\n", "\n", "", "parameters", "=", "get_fine_tuning_parameters", "(", "model", ",", "opt", ".", "ft_begin_index", ")", "\n", "return", "model", ",", "parameters", "\n", "\n", "", "", "return", "model", ",", "model", ".", "parameters", "(", ")", "", "", ""]], "home.repos.pwc.inspect_result.zwxu064_RANP.unet.model.ResidualUNet3D.forward": [[204, 230], ["zip", "model.ResidualUNet3D.final_conv", "encoder", "encoders_features.insert", "decoder", "model.ResidualUNet3D.final_activation"], "methods", ["None"], []], "home.repos.pwc.inspect_result.zwxu064_RANP.unet.model.Noise2NoiseUNet3D.__init__": [[252, 291], ["torch.Module.__init__", "isinstance", "enumerate", "torch.ModuleList", "torch.ModuleList", "list", "range", "torch.ModuleList", "torch.ModuleList", "unet.buildingblocks.SingleConv", "unet.utils.create_feature_maps", "encoders.append", "reversed", "unet.buildingblocks.Decoder", "decoders.append", "unet.buildingblocks.Encoder", "unet.buildingblocks.Encoder", "len"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.StereoLoss.__init__", "home.repos.pwc.inspect_result.zwxu064_RANP.unet.utils.create_feature_maps"], []], "home.repos.pwc.inspect_result.zwxu064_RANP.unet.model.Noise2NoiseUNet3D.forward": [[292, 313], ["zip", "model.Noise2NoiseUNet3D.final_conv", "encoder", "encoders_features.insert", "decoder"], "methods", ["None"], []], "home.repos.pwc.inspect_result.zwxu064_RANP.unet.model.TagsUNet3D.__init__": [[344, 376], ["torch.Module.__init__", "min", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "unet.buildingblocks.Encoder", "unet.buildingblocks.Encoder", "unet.buildingblocks.Encoder", "unet.buildingblocks.Encoder", "unet.buildingblocks.Decoder", "unet.buildingblocks.Decoder", "unet.buildingblocks.Decoder", "unet.buildingblocks.FinalConv", "range"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.StereoLoss.__init__"], []], "home.repos.pwc.inspect_result.zwxu064_RANP.unet.model.TagsUNet3D.forward": [[377, 400], ["zip", "encoder", "encoders_features.insert", "decoder", "final_head", "torch.norm().detach().clamp", "torch.norm().detach().clamp", "torch.norm().detach().clamp", "torch.norm().detach().clamp", "torch.norm().detach", "torch.norm().detach", "torch.norm().detach", "torch.norm().detach", "torch.norm", "torch.norm", "torch.norm", "torch.norm"], "methods", ["None"], []], "home.repos.pwc.inspect_result.zwxu064_RANP.unet.model.DistanceTransformUNet3D.__init__": [[421, 448], ["torch.Module.__init__", "min", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Conv3d", "torch.Conv3d", "torch.Sigmoid", "torch.Sigmoid", "torch.Softmax", "torch.Softmax", "unet.buildingblocks.Encoder", "unet.buildingblocks.Encoder", "unet.buildingblocks.Decoder"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.StereoLoss.__init__"], []], "home.repos.pwc.inspect_result.zwxu064_RANP.unet.model.DistanceTransformUNet3D.forward": [[449, 482], ["zip", "model.DistanceTransformUNet3D.final_conv", "isinstance", "isinstance", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "encoder", "encoders_features.insert", "decoder", "model.DistanceTransformUNet3D.final_activation"], "methods", ["None"], []], "home.repos.pwc.inspect_result.zwxu064_RANP.unet.model.EndToEndDTUNet3D.__init__": [[485, 501], ["torch.Module.__init__", "model.TagsUNet3D", "model.DistanceTransformUNet3D", "model.EndToEndDTUNet3D._load_net", "model.EndToEndDTUNet3D._load_net"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.StereoLoss.__init__", "home.repos.pwc.inspect_result.zwxu064_RANP.unet.model.EndToEndDTUNet3D._load_net", "home.repos.pwc.inspect_result.zwxu064_RANP.unet.model.EndToEndDTUNet3D._load_net"], []], "home.repos.pwc.inspect_result.zwxu064_RANP.unet.model.EndToEndDTUNet3D._load_net": [[502, 507], ["torch.load", "torch.load", "torch.load", "torch.load", "model.load_state_dict"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.data.load", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.data.load", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.data.load", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.data.load"], []], "home.repos.pwc.inspect_result.zwxu064_RANP.unet.model.EndToEndDTUNet3D.forward": [[508, 511], ["model.EndToEndDTUNet3D.tags_net", "model.EndToEndDTUNet3D.dt_net"], "methods", ["None"], []], "home.repos.pwc.inspect_result.zwxu064_RANP.unet.model.UNet3DSSC.__init__": [[515, 569], ["torch.Module.__init__", "torch.Softmax", "torch.Softmax", "model.UNet3DSSC.encoder_module", "model.UNet3DSSC.encoder_module", "model.UNet3DSSC.encoder_module", "model.UNet3DSSC.encoder_module", "torch.Sequential", "torch.Sequential", "model.UNet3DSSC.decoder_module", "model.UNet3DSSC.decoder_module", "model.UNet3DSSC.decoder_module", "model.UNet3DSSC.decoder_module", "torch.Sequential", "torch.Sequential", "model.UNet3DSSC.encoder_module", "model.UNet3DSSC.encoder_module", "model.UNet3DSSC.encoder_module", "model.UNet3DSSC.encoder_module", "torch.Sequential", "torch.Sequential", "model.UNet3DSSC.decoder_module", "model.UNet3DSSC.decoder_module", "model.UNet3DSSC.decoder_module", "model.UNet3DSSC.decoder_module", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.Conv3d", "torch.Conv3d", "torch.ReLU", "torch.ReLU", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.Conv3d", "torch.Conv3d"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.StereoLoss.__init__", "home.repos.pwc.inspect_result.zwxu064_RANP.unet.model.UNet3DSSC.encoder_module", "home.repos.pwc.inspect_result.zwxu064_RANP.unet.model.UNet3DSSC.encoder_module", "home.repos.pwc.inspect_result.zwxu064_RANP.unet.model.UNet3DSSC.encoder_module", "home.repos.pwc.inspect_result.zwxu064_RANP.unet.model.UNet3DSSC.encoder_module", "home.repos.pwc.inspect_result.zwxu064_RANP.unet.model.UNet3DSSC.decoder_module", "home.repos.pwc.inspect_result.zwxu064_RANP.unet.model.UNet3DSSC.decoder_module", "home.repos.pwc.inspect_result.zwxu064_RANP.unet.model.UNet3DSSC.decoder_module", "home.repos.pwc.inspect_result.zwxu064_RANP.unet.model.UNet3DSSC.decoder_module", "home.repos.pwc.inspect_result.zwxu064_RANP.unet.model.UNet3DSSC.encoder_module", "home.repos.pwc.inspect_result.zwxu064_RANP.unet.model.UNet3DSSC.encoder_module", "home.repos.pwc.inspect_result.zwxu064_RANP.unet.model.UNet3DSSC.encoder_module", "home.repos.pwc.inspect_result.zwxu064_RANP.unet.model.UNet3DSSC.encoder_module", "home.repos.pwc.inspect_result.zwxu064_RANP.unet.model.UNet3DSSC.decoder_module", "home.repos.pwc.inspect_result.zwxu064_RANP.unet.model.UNet3DSSC.decoder_module", "home.repos.pwc.inspect_result.zwxu064_RANP.unet.model.UNet3DSSC.decoder_module", "home.repos.pwc.inspect_result.zwxu064_RANP.unet.model.UNet3DSSC.decoder_module"], []], "home.repos.pwc.inspect_result.zwxu064_RANP.unet.model.UNet3DSSC.encoder_module": [[570, 580], ["torch.Sequential", "torch.Sequential", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d"], "methods", ["None"], []], "home.repos.pwc.inspect_result.zwxu064_RANP.unet.model.UNet3DSSC.decoder_module": [[581, 592], ["torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose3d", "torch.ConvTranspose3d", "torch.BatchNorm3d", "torch.BatchNorm3d"], "methods", ["None"], []], "home.repos.pwc.inspect_result.zwxu064_RANP.unet.model.UNet3DSSC.forward": [[593, 609], ["model.UNet3DSSC.encoder_0", "model.UNet3DSSC.encoder_1", "model.UNet3DSSC.encoder_2", "model.UNet3DSSC.encoder_3", "model.UNet3DSSC.encoder_4", "model.UNet3DSSC.upsample", "model.UNet3DSSC.decoder_0", "model.UNet3DSSC.decoder_1", "model.UNet3DSSC.decoder_2", "model.UNet3DSSC.final_convs", "model.UNet3DSSC.final_activation", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], []], "home.repos.pwc.inspect_result.zwxu064_RANP.unet.model.get_model": [[315, 325], ["model.get_model._model_class"], "function", ["None"], []], "home.repos.pwc.inspect_result.zwxu064_RANP.unet.utils.RunningAverage.__init__": [[87, 91], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.zwxu064_RANP.unet.utils.RunningAverage.update": [[92, 96], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.zwxu064_RANP.unet.utils.save_checkpoint": [[11, 38], ["os.path.join", "utils.save_checkpoint.log_info"], "function", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n", "", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n", "", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n", "\n", "", "", "class", "Logger", "(", "object", ")", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ",", "path", ",", "header", ")", ":", "\n", "        ", "self", ".", "log_file", "=", "open", "(", "path", ",", "'w'", ")", "\n", "self", ".", "logger", "=", "csv", ".", "writer", "(", "self", ".", "log_file", ",", "delimiter", "=", "'\\t'", ")", "\n", "\n", "self", ".", "logger", ".", "writerow", "(", "header", ")", "\n", "self", ".", "header", "=", "header", "\n", "\n", "", "def", "__del", "(", "self", ")", ":", "\n", "        ", "self", ".", "log_file", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.unet.utils.load_checkpoint": [[40, 63], ["torch.load", "model.load_state_dict", "os.path.exists", "IOError", "optimizer.load_state_dict"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.data.load"], ["        ", "write_values", "=", "[", "]", "\n", "for", "col", "in", "self", ".", "header", ":", "\n", "            ", "assert", "col", "in", "values", "\n", "write_values", ".", "append", "(", "values", "[", "col", "]", ")", "\n", "\n", "", "self", ".", "logger", ".", "writerow", "(", "write_values", ")", "\n", "self", ".", "log_file", ".", "flush", "(", ")", "\n", "\n", "\n", "", "", "def", "load_value_file", "(", "file_path", ")", ":", "\n", "    ", "with", "open", "(", "file_path", ",", "'r'", ")", "as", "input_file", ":", "\n", "        ", "value", "=", "float", "(", "input_file", ".", "read", "(", ")", ".", "rstrip", "(", "'\\n\\r'", ")", ")", "\n", "\n", "", "return", "value", "\n", "\n", "\n", "", "def", "calculate_accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"Computes the precision@k for the specified values of k\"\"\"", "\n", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.unet.utils.get_logger": [[65, 76], ["logging.getLogger", "logging.getLogger.setLevel", "logging.StreamHandler", "logging.Formatter", "logging.StreamHandler.setFormatter", "logging.getLogger.addHandler"], "function", ["None"], ["res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "        ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "\n", "\n", "", "def", "save_checkpoint", "(", "state", ",", "is_best", ",", "opt", ")", ":", "\n", "    ", "torch", ".", "save", "(", "state", ",", "'%s/%s_checkpoint.pth'", "%", "(", "opt", ".", "result_path", ",", "opt", ".", "store_name", ")", ")", "\n", "if", "is_best", ":", "\n", "        ", "shutil", ".", "copyfile", "(", "'%s/%s_checkpoint.pth'", "%", "(", "opt", ".", "result_path", ",", "opt", ".", "store_name", ")", ",", "'%s/%s_best.pth'", "%", "(", "opt", ".", "result_path", ",", "opt", ".", "store_name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.unet.utils.get_number_of_learnable_parameters": [[78, 81], ["filter", "sum", "model.parameters", "numpy.prod", "p.size"], "function", ["None"], ["", "", "def", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ",", "opt", ")", ":", "\n", "    ", "\"\"\"Sets the learning rate to the initial LR decayed by 10 every 30 epochs\"\"\"", "\n", "lr_new", "=", "opt", ".", "lr", "*", "(", "0.1", "**", "(", "sum", "(", "epoch", ">=", "np", ".", "array", "(", "opt", ".", "lr_steps", ")", ")", ")", ")", "\n", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.unet.utils.find_maximum_patch_size": [[98, 119], ["utils.get_logger", "numpy.random.randn().astype", "torch.from_numpy().view().to", "get_logger.info", "model", "numpy.random.randn", "torch.from_numpy().view", "torch.from_numpy"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.unet.utils.get_logger"], []], "home.repos.pwc.inspect_result.zwxu064_RANP.unet.utils.unpad": [[121, 151], ["slice", "utils.unpad._new_slices"], "function", ["None"], []], "home.repos.pwc.inspect_result.zwxu064_RANP.unet.utils.create_feature_maps": [[153, 156], ["min", "range"], "function", ["None"], []], "home.repos.pwc.inspect_result.zwxu064_RANP.unet.utils.adapted_rand": [[159, 222], ["numpy.ravel", "numpy.ravel", "numpy.ones", "scipy.csr_matrix", "p_ij[].todense", "b.multiply", "numpy.array", "numpy.array", "numpy.sum", "numpy.amax", "numpy.amax", "a.sum", "b.sum", "numpy.sum", "numpy.sum", "max", "max", "max", "numpy.sum", "numpy.sum"], "function", ["None"], []], "home.repos.pwc.inspect_result.zwxu064_RANP.unet.losses.DiceLoss.__init__": [[40, 57], ["torch.nn.Module.__init__", "losses.DiceLoss.register_buffer", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Softmax", "torch.nn.Softmax"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.StereoLoss.__init__"], ["def", "__init__", "(", "self", ",", "epsilon", "=", "1e-5", ",", "weight", "=", "None", ",", "ignore_index", "=", "None", ",", "sigmoid_normalization", "=", "True", ",", "\n", "skip_last_target", "=", "False", ")", ":", "\n", "        ", "super", "(", "DiceLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "epsilon", "=", "epsilon", "\n", "self", ".", "register_buffer", "(", "'weight'", ",", "weight", ")", "\n", "self", ".", "ignore_index", "=", "ignore_index", "\n", "# The output from the network during training is assumed to be un-normalized probabilities and we would", "\n", "# like to normalize the logits. Since Dice (or soft Dice in this case) is usually used for binary data,", "\n", "# normalizing the channels with Sigmoid is the default choice even for multi-class segmentation problems.", "\n", "# However if one would like to apply Softmax in order to get the proper probability distribution from the", "\n", "# output, just specify sigmoid_normalization=False.", "\n", "if", "sigmoid_normalization", ":", "\n", "            ", "self", ".", "normalization", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "normalization", "=", "nn", ".", "Softmax", "(", "dim", "=", "1", ")", "\n", "# if True skip the last channel in the target", "\n", "", "self", ".", "skip_last_target", "=", "skip_last_target", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.unet.losses.DiceLoss.forward": [[58, 73], ["losses.DiceLoss.normalization", "losses.compute_per_channel_dice", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.autograd.Variable", "torch.autograd.Variable"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.models.unet.normalization", "home.repos.pwc.inspect_result.zwxu064_RANP.unet.losses.compute_per_channel_dice"], ["", "def", "forward", "(", "self", ",", "input", ",", "target", ")", ":", "\n", "# get probabilities from logits", "\n", "        ", "input", "=", "self", ".", "normalization", "(", "input", ")", "\n", "if", "self", ".", "weight", "is", "not", "None", ":", "\n", "            ", "weight", "=", "Variable", "(", "self", ".", "weight", ",", "requires_grad", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "weight", "=", "None", "\n", "\n", "", "if", "self", ".", "skip_last_target", ":", "\n", "            ", "target", "=", "target", "[", ":", ",", ":", "-", "1", ",", "...", "]", "\n", "\n", "", "per_channel_dice", "=", "compute_per_channel_dice", "(", "input", ",", "target", ",", "epsilon", "=", "self", ".", "epsilon", ",", "ignore_index", "=", "self", ".", "ignore_index", ",", "\n", "weight", "=", "weight", ")", "\n", "# Average the Dice score across all channels/classes", "\n", "return", "torch", ".", "mean", "(", "1.", "-", "per_channel_dice", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.unet.losses.GeneralizedDiceLoss.__init__": [[79, 88], ["torch.nn.Module.__init__", "losses.GeneralizedDiceLoss.register_buffer", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Softmax", "torch.nn.Softmax"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.StereoLoss.__init__"], ["def", "__init__", "(", "self", ",", "epsilon", "=", "1e-5", ",", "weight", "=", "None", ",", "ignore_index", "=", "None", ",", "sigmoid_normalization", "=", "True", ")", ":", "\n", "        ", "super", "(", "GeneralizedDiceLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "epsilon", "=", "epsilon", "\n", "self", ".", "register_buffer", "(", "'weight'", ",", "weight", ")", "\n", "self", ".", "ignore_index", "=", "ignore_index", "\n", "if", "sigmoid_normalization", ":", "\n", "            ", "self", ".", "normalization", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "normalization", "=", "nn", ".", "Softmax", "(", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.unet.losses.GeneralizedDiceLoss.forward": [[89, 119], ["losses.GeneralizedDiceLoss.normalization", "losses.flatten", "losses.flatten", "target.float.float.float", "target.float.float.sum", "torch.autograd.Variable", "torch.autograd.Variable", "intersect.sum.sum.sum", "flatten.size", "target.float.float.size", "target.float.float.clone().ne_", "torch.autograd.Variable", "torch.autograd.Variable", "denominator.clamp", "target.float.float.clone"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.models.unet.normalization", "home.repos.pwc.inspect_result.zwxu064_RANP.unet.losses.flatten", "home.repos.pwc.inspect_result.zwxu064_RANP.unet.losses.flatten", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.binvox_rw.Voxels.clone"], ["", "", "def", "forward", "(", "self", ",", "input", ",", "target", ")", ":", "\n", "# get probabilities from logits", "\n", "        ", "input", "=", "self", ".", "normalization", "(", "input", ")", "\n", "\n", "assert", "input", ".", "size", "(", ")", "==", "target", ".", "size", "(", ")", ",", "\"'input' and 'target' must have the same shape\"", "\n", "\n", "# mask ignore_index if present", "\n", "if", "self", ".", "ignore_index", "is", "not", "None", ":", "\n", "            ", "mask", "=", "target", ".", "clone", "(", ")", ".", "ne_", "(", "self", ".", "ignore_index", ")", "\n", "mask", ".", "requires_grad", "=", "False", "\n", "\n", "input", "=", "input", "*", "mask", "\n", "target", "=", "target", "*", "mask", "\n", "\n", "", "input", "=", "flatten", "(", "input", ")", "\n", "target", "=", "flatten", "(", "target", ")", "\n", "\n", "target", "=", "target", ".", "float", "(", ")", "\n", "target_sum", "=", "target", ".", "sum", "(", "-", "1", ")", "\n", "class_weights", "=", "Variable", "(", "1.", "/", "(", "target_sum", "*", "target_sum", ")", ".", "clamp", "(", "min", "=", "self", ".", "epsilon", ")", ",", "requires_grad", "=", "False", ")", "\n", "\n", "intersect", "=", "(", "input", "*", "target", ")", ".", "sum", "(", "-", "1", ")", "*", "class_weights", "\n", "if", "self", ".", "weight", "is", "not", "None", ":", "\n", "            ", "weight", "=", "Variable", "(", "self", ".", "weight", ",", "requires_grad", "=", "False", ")", "\n", "intersect", "=", "weight", "*", "intersect", "\n", "", "intersect", "=", "intersect", ".", "sum", "(", ")", "\n", "\n", "denominator", "=", "(", "(", "input", "+", "target", ")", ".", "sum", "(", "-", "1", ")", "*", "class_weights", ")", ".", "sum", "(", ")", "\n", "\n", "return", "1.", "-", "2.", "*", "intersect", "/", "denominator", ".", "clamp", "(", "min", "=", "self", ".", "epsilon", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.unet.losses.WeightedCrossEntropyLoss.__init__": [[125, 129], ["torch.nn.Module.__init__", "losses.WeightedCrossEntropyLoss.register_buffer"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.StereoLoss.__init__"], ["def", "__init__", "(", "self", ",", "weight", "=", "None", ",", "ignore_index", "=", "-", "1", ")", ":", "\n", "        ", "super", "(", "WeightedCrossEntropyLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "register_buffer", "(", "'weight'", ",", "weight", ")", "\n", "self", ".", "ignore_index", "=", "ignore_index", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.unet.losses.WeightedCrossEntropyLoss.forward": [[130, 136], ["losses.WeightedCrossEntropyLoss._class_weights", "torch.cross_entropy", "torch.cross_entropy", "torch.autograd.Variable", "torch.autograd.Variable"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.unet.losses.WeightedCrossEntropyLoss._class_weights"], ["", "def", "forward", "(", "self", ",", "input", ",", "target", ")", ":", "\n", "        ", "class_weights", "=", "self", ".", "_class_weights", "(", "input", ")", "\n", "if", "self", ".", "weight", "is", "not", "None", ":", "\n", "            ", "weight", "=", "Variable", "(", "self", ".", "weight", ",", "requires_grad", "=", "False", ")", "\n", "class_weights", "=", "class_weights", "*", "weight", "\n", "", "return", "F", ".", "cross_entropy", "(", "input", ",", "target", ",", "weight", "=", "class_weights", ",", "ignore_index", "=", "self", ".", "ignore_index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.unet.losses.WeightedCrossEntropyLoss._class_weights": [[137, 146], ["torch.softmax", "torch.softmax", "losses.flatten", "flatten.sum", "torch.autograd.Variable", "torch.autograd.Variable"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.unet.losses.flatten"], ["", "@", "staticmethod", "\n", "def", "_class_weights", "(", "input", ")", ":", "\n", "# normalize the input first", "\n", "        ", "input", "=", "F", ".", "softmax", "(", "input", ",", "_stacklevel", "=", "5", ")", "\n", "flattened", "=", "flatten", "(", "input", ")", "\n", "nominator", "=", "(", "1.", "-", "flattened", ")", ".", "sum", "(", "-", "1", ")", "\n", "denominator", "=", "flattened", ".", "sum", "(", "-", "1", ")", "\n", "class_weights", "=", "Variable", "(", "nominator", "/", "denominator", ",", "requires_grad", "=", "False", ")", "\n", "return", "class_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.unet.losses.BCELossWrapper.__init__": [[153, 159], ["hasattr", "RuntimeError", "type"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "loss_criterion", ",", "ignore_index", "=", "-", "1", ",", "skip_last_target", "=", "False", ")", ":", "\n", "        ", "if", "hasattr", "(", "loss_criterion", ",", "'ignore_index'", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "f\"Cannot wrap {type(loss_criterion)}. Use 'ignore_index' attribute instead\"", ")", "\n", "", "self", ".", "loss_criterion", "=", "loss_criterion", "\n", "self", ".", "ignore_index", "=", "ignore_index", "\n", "self", ".", "skip_last_target", "=", "skip_last_target", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.unet.losses.BCELossWrapper.__call__": [[160, 176], ["losses.BCELossWrapper.loss_criterion", "input.size", "target.size", "target.clone().ne_", "target.clone"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.binvox_rw.Voxels.clone"], ["", "def", "__call__", "(", "self", ",", "input", ",", "target", ")", ":", "\n", "        ", "if", "self", ".", "skip_last_target", ":", "\n", "            ", "target", "=", "target", "[", ":", ",", ":", "-", "1", ",", "...", "]", "\n", "\n", "", "assert", "input", ".", "size", "(", ")", "==", "target", ".", "size", "(", ")", "\n", "\n", "masked_input", "=", "input", "\n", "masked_target", "=", "target", "\n", "if", "self", ".", "ignore_index", "is", "not", "None", ":", "\n", "            ", "mask", "=", "target", ".", "clone", "(", ")", ".", "ne_", "(", "self", ".", "ignore_index", ")", "\n", "mask", ".", "requires_grad", "=", "False", "\n", "\n", "masked_input", "=", "input", "*", "mask", "\n", "masked_target", "=", "target", "*", "mask", "\n", "\n", "", "return", "self", ".", "loss_criterion", "(", "masked_input", ",", "masked_target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.unet.losses.PixelWiseCrossEntropyLoss.__init__": [[179, 184], ["torch.nn.Module.__init__", "losses.PixelWiseCrossEntropyLoss.register_buffer", "torch.nn.LogSoftmax", "torch.nn.LogSoftmax"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.StereoLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "class_weights", "=", "None", ",", "ignore_index", "=", "None", ")", ":", "\n", "        ", "super", "(", "PixelWiseCrossEntropyLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "register_buffer", "(", "'class_weights'", ",", "class_weights", ")", "\n", "self", ".", "ignore_index", "=", "ignore_index", "\n", "self", ".", "log_softmax", "=", "nn", ".", "LogSoftmax", "(", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.unet.losses.PixelWiseCrossEntropyLoss.forward": [[185, 216], ["losses.PixelWiseCrossEntropyLoss.log_softmax", "losses.expand_as_one_hot", "weights.expand_as.expand_as.unsqueeze", "weights.expand_as.expand_as.expand_as", "losses.PixelWiseCrossEntropyLoss.class_weights.view", "result.mean", "expand_as_one_hot.size", "weights.expand_as.expand_as.size", "torch.autograd.Variable", "torch.autograd.Variable", "torch.ones().float().to", "torch.ones().float().to", "torch.ones().float().to", "torch.ones().float().to", "losses.PixelWiseCrossEntropyLoss.register_buffer", "expand_as_one_hot.data.ne().float", "input.size", "torch.ones().float", "torch.ones().float", "torch.ones().float", "torch.ones().float", "expand_as_one_hot.data.ne", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "input.size"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.unet.losses.expand_as_one_hot"], ["", "def", "forward", "(", "self", ",", "input", ",", "target", ",", "weights", ")", ":", "\n", "        ", "assert", "target", ".", "size", "(", ")", "==", "weights", ".", "size", "(", ")", "\n", "# normalize the input", "\n", "log_probabilities", "=", "self", ".", "log_softmax", "(", "input", ")", "\n", "# standard CrossEntropyLoss requires the target to be (NxDxHxW), so we need to expand it to (NxCxDxHxW)", "\n", "target", "=", "expand_as_one_hot", "(", "target", ",", "C", "=", "input", ".", "size", "(", ")", "[", "1", "]", ",", "ignore_index", "=", "self", ".", "ignore_index", ")", "\n", "# expand weights", "\n", "weights", "=", "weights", ".", "unsqueeze", "(", "0", ")", "\n", "weights", "=", "weights", ".", "expand_as", "(", "input", ")", "\n", "\n", "# mask ignore_index if present", "\n", "if", "self", ".", "ignore_index", "is", "not", "None", ":", "\n", "            ", "mask", "=", "Variable", "(", "target", ".", "data", ".", "ne", "(", "self", ".", "ignore_index", ")", ".", "float", "(", ")", ",", "requires_grad", "=", "False", ")", "\n", "log_probabilities", "=", "log_probabilities", "*", "mask", "\n", "target", "=", "target", "*", "mask", "\n", "\n", "# create default class_weights if None", "\n", "", "if", "self", ".", "class_weights", "is", "None", ":", "\n", "            ", "class_weights", "=", "torch", ".", "ones", "(", "input", ".", "size", "(", ")", "[", "1", "]", ")", ".", "float", "(", ")", ".", "to", "(", "input", ".", "device", ")", "\n", "self", ".", "register_buffer", "(", "'class_weights'", ",", "class_weights", ")", "\n", "\n", "# resize class_weights to be broadcastable into the weights", "\n", "", "class_weights", "=", "self", ".", "class_weights", ".", "view", "(", "1", ",", "-", "1", ",", "1", ",", "1", ",", "1", ")", "\n", "\n", "# multiply weights tensor by class weights", "\n", "weights", "=", "class_weights", "*", "weights", "\n", "\n", "# compute the losses", "\n", "result", "=", "-", "weights", "*", "target", "*", "log_probabilities", "\n", "# average the losses", "\n", "return", "result", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.unet.losses.MSEWithLogitsLoss.__init__": [[223, 226], ["torch.nn.MSELoss.__init__", "torch.nn.Sigmoid", "torch.nn.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.StereoLoss.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "MSEWithLogitsLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.unet.losses.MSEWithLogitsLoss.forward": [[227, 229], ["super().forward", "losses.MSEWithLogitsLoss.sigmoid"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.StereoLoss.forward"], ["", "def", "forward", "(", "self", ",", "input", ",", "target", ")", ":", "\n", "        ", "return", "super", "(", ")", ".", "forward", "(", "self", ".", "sigmoid", "(", "input", ")", ",", "target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.unet.losses.TagsAngularLoss.__init__": [[232, 235], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.StereoLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "tags_coefficients", ")", ":", "\n", "        ", "super", "(", "TagsAngularLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "tags_coefficients", "=", "tags_coefficients", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.unet.losses.TagsAngularLoss.forward": [[236, 249], ["isinstance", "zip", "len", "len", "len", "len", "losses.square_angular_loss"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.unet.losses.square_angular_loss"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "targets", ",", "weight", ")", ":", "\n", "        ", "assert", "isinstance", "(", "inputs", ",", "list", ")", "\n", "# if there is just one output head the 'inputs' is going to be a singleton list [tensor]", "\n", "# and 'targets' is just going to be a tensor (that's how the HDF5Dataloader works)", "\n", "# so wrap targets in a list in this case", "\n", "if", "len", "(", "inputs", ")", "==", "1", ":", "\n", "            ", "targets", "=", "[", "targets", "]", "\n", "", "assert", "len", "(", "inputs", ")", "==", "len", "(", "targets", ")", "==", "len", "(", "self", ".", "tags_coefficients", ")", "\n", "loss", "=", "0", "\n", "for", "input", ",", "target", ",", "alpha", "in", "zip", "(", "inputs", ",", "targets", ",", "self", ".", "tags_coefficients", ")", ":", "\n", "            ", "loss", "+=", "alpha", "*", "square_angular_loss", "(", "input", ",", "target", ",", "weight", ")", "\n", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.unet.losses.compute_per_channel_dice": [[8, 33], ["losses.flatten", "losses.flatten", "target.float.float", "flatten.size", "target.float.size", "target.float.clone().ne_", "denominator.clamp", "target.float.clone"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.unet.losses.flatten", "home.repos.pwc.inspect_result.zwxu064_RANP.unet.losses.flatten", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.binvox_rw.Voxels.clone"], ["def", "compute_per_channel_dice", "(", "input", ",", "target", ",", "epsilon", "=", "1e-5", ",", "ignore_index", "=", "None", ",", "weight", "=", "None", ")", ":", "\n", "# assumes that input is a normalized probability", "\n", "\n", "# input and target shapes must match", "\n", "    ", "assert", "input", ".", "size", "(", ")", "==", "target", ".", "size", "(", ")", ",", "\"'input' and 'target' must have the same shape\"", "\n", "\n", "# mask ignore_index if present", "\n", "if", "ignore_index", "is", "not", "None", ":", "\n", "        ", "mask", "=", "target", ".", "clone", "(", ")", ".", "ne_", "(", "ignore_index", ")", "\n", "mask", ".", "requires_grad", "=", "False", "\n", "\n", "input", "=", "input", "*", "mask", "\n", "target", "=", "target", "*", "mask", "\n", "\n", "", "input", "=", "flatten", "(", "input", ")", "\n", "target", "=", "flatten", "(", "target", ")", "\n", "\n", "target", "=", "target", ".", "float", "(", ")", "\n", "# Compute per channel Dice Coefficient", "\n", "intersect", "=", "(", "input", "*", "target", ")", ".", "sum", "(", "-", "1", ")", "\n", "if", "weight", "is", "not", "None", ":", "\n", "        ", "intersect", "=", "weight", "*", "intersect", "\n", "\n", "", "denominator", "=", "(", "input", "+", "target", ")", ".", "sum", "(", "-", "1", ")", "\n", "return", "2.", "*", "intersect", "/", "denominator", ".", "clamp", "(", "min", "=", "epsilon", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.unet.losses.square_angular_loss": [[251, 273], ["torch.acos", "torch.acos", "input.size", "target.size", "torch.norm().detach().clamp", "torch.norm().detach().clamp", "torch.norm().detach().clamp", "torch.norm().detach().clamp", "torch.norm().detach", "torch.norm().detach", "torch.norm().detach", "torch.norm().detach", "torch.norm", "torch.norm", "torch.norm", "torch.norm"], "function", ["None"], ["", "", "def", "square_angular_loss", "(", "input", ",", "target", ",", "weights", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Computes square angular loss between input and target directions.\n    Makes sure that the input and target directions are normalized so that torch.acos would not produce NaNs.\n\n    :param input: 5D input tensor (NCDHW)\n    :param target: 5D target tensor (NCDHW)\n    :param weights: 3D weight tensor in order to balance different instance sizes\n    :return: per pixel weighted sum of squared angular losses\n    \"\"\"", "\n", "assert", "input", ".", "size", "(", ")", "==", "target", ".", "size", "(", ")", "\n", "# normalize and multiply by the stability_coeff in order to prevent NaN results from torch.acos", "\n", "stability_coeff", "=", "0.999999", "\n", "input", "=", "input", "/", "torch", ".", "norm", "(", "input", ",", "p", "=", "2", ",", "dim", "=", "1", ")", ".", "detach", "(", ")", ".", "clamp", "(", "min", "=", "1e-8", ")", "*", "stability_coeff", "\n", "target", "=", "target", "/", "torch", ".", "norm", "(", "target", ",", "p", "=", "2", ",", "dim", "=", "1", ")", ".", "detach", "(", ")", ".", "clamp", "(", "min", "=", "1e-8", ")", "*", "stability_coeff", "\n", "# compute cosine map", "\n", "cosines", "=", "(", "input", "*", "target", ")", ".", "sum", "(", "dim", "=", "1", ")", "\n", "error_radians", "=", "torch", ".", "acos", "(", "cosines", ")", "\n", "if", "weights", "is", "not", "None", ":", "\n", "        ", "return", "(", "error_radians", "*", "error_radians", "*", "weights", ")", ".", "sum", "(", ")", "\n", "", "else", ":", "\n", "        ", "return", "(", "error_radians", "*", "error_radians", ")", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.unet.losses.flatten": [[275, 287], ["tensor.size", "tensor.permute", "tensor.permute.view", "tuple", "range", "tensor.dim"], "function", ["None"], ["", "", "def", "flatten", "(", "tensor", ")", ":", "\n", "    ", "\"\"\"Flattens a given tensor such that the channel axis is first.\n    The shapes are transformed as follows:\n       (N, C, D, H, W) -> (C, N * D * H * W)\n    \"\"\"", "\n", "C", "=", "tensor", ".", "size", "(", "1", ")", "\n", "# new axis order", "\n", "axis_order", "=", "(", "1", ",", "0", ")", "+", "tuple", "(", "range", "(", "2", ",", "tensor", ".", "dim", "(", ")", ")", ")", "\n", "# Transpose: (N, C, D, H, W) -> (C, N, D, H, W)", "\n", "transposed", "=", "tensor", ".", "permute", "(", "axis_order", ")", "\n", "# Flatten: (C, N, D, H, W) -> (C, N * D * H * W)", "\n", "return", "transposed", ".", "view", "(", "C", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.unet.losses.expand_as_one_hot": [[289, 322], ["input.size", "list", "tuple.insert", "tuple", "input.unsqueeze", "input.dim", "src.clone.expand", "src.clone.clone", "torch.zeros().to().scatter_", "torch.zeros().to().scatter_", "torch.zeros().to().scatter_", "torch.zeros().to().scatter_", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.binvox_rw.Voxels.clone"], ["", "def", "expand_as_one_hot", "(", "input", ",", "C", ",", "ignore_index", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Converts NxDxHxW label image to NxCxDxHxW, where each label gets converted to its corresponding one-hot vector\n    :param input: 4D input image (NxDxHxW)\n    :param C: number of channels/labels\n    :param ignore_index: ignore index to be kept during the expansion\n    :return: 5D output image (NxCxDxHxW)\n    \"\"\"", "\n", "assert", "input", ".", "dim", "(", ")", "==", "4", "\n", "\n", "shape", "=", "input", ".", "size", "(", ")", "\n", "shape", "=", "list", "(", "shape", ")", "\n", "shape", ".", "insert", "(", "1", ",", "C", ")", "\n", "shape", "=", "tuple", "(", "shape", ")", "\n", "\n", "# expand the input tensor to Nx1xDxHxW", "\n", "src", "=", "input", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "if", "ignore_index", "is", "not", "None", ":", "\n", "# create ignore_index mask for the result", "\n", "        ", "expanded_src", "=", "src", ".", "expand", "(", "shape", ")", "\n", "mask", "=", "expanded_src", "==", "ignore_index", "\n", "# clone the src tensor and zero out ignore_index in the input", "\n", "src", "=", "src", ".", "clone", "(", ")", "\n", "src", "[", "src", "==", "ignore_index", "]", "=", "0", "\n", "# scatter to get the one-hot tensor", "\n", "result", "=", "torch", ".", "zeros", "(", "shape", ")", ".", "to", "(", "input", ".", "device", ")", ".", "scatter_", "(", "1", ",", "src", ",", "1", ")", "\n", "# bring back the ignore_index in the result", "\n", "result", "[", "mask", "]", "=", "ignore_index", "\n", "return", "result", "\n", "", "else", ":", "\n", "# scatter to get the one-hot tensor", "\n", "        ", "return", "torch", ".", "zeros", "(", "shape", ")", ".", "to", "(", "input", ".", "device", ")", ".", "scatter_", "(", "1", ",", "src", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.unet.losses.get_loss_criterion": [[329, 382], ["loss_config.get", "loss_config.get", "torch.tensor().to", "torch.tensor().to", "loss_config.get", "torch.nn.BCEWithLogitsLoss", "losses.BCELossWrapper", "torch.nn.CrossEntropyLoss", "torch.tensor", "torch.tensor", "torch.nn.BCEWithLogitsLoss", "losses.WeightedCrossEntropyLoss", "losses.PixelWiseCrossEntropyLoss", "losses.GeneralizedDiceLoss", "loss_config.get", "loss_config.get", "losses.DiceLoss", "losses.TagsAngularLoss", "losses.MSEWithLogitsLoss", "torch.nn.MSELoss", "torch.nn.SmoothL1Loss", "torch.nn.L1Loss", "RuntimeError"], "function", ["None"], ["def", "get_loss_criterion", "(", "config", ")", ":", "\n", "    ", "\"\"\"\n    Returns the loss function based on provided configuration\n    :param config: (dict) a top level configuration object containing the 'loss' key\n    :return: an instance of the loss function\n    \"\"\"", "\n", "assert", "'loss'", "in", "config", ",", "'Could not find loss function configuration'", "\n", "loss_config", "=", "config", "[", "'loss'", "]", "\n", "name", "=", "loss_config", "[", "'name'", "]", "\n", "\n", "ignore_index", "=", "loss_config", ".", "get", "(", "'ignore_index'", ",", "None", ")", "\n", "weight", "=", "loss_config", ".", "get", "(", "'weight'", ",", "None", ")", "\n", "\n", "if", "weight", "is", "not", "None", ":", "\n", "# convert to cuda tensor if necessary", "\n", "        ", "weight", "=", "torch", ".", "tensor", "(", "weight", ")", ".", "to", "(", "config", "[", "'device'", "]", ")", "\n", "\n", "", "if", "name", "==", "'BCEWithLogitsLoss'", ":", "\n", "        ", "skip_last_target", "=", "loss_config", ".", "get", "(", "'skip_last_target'", ",", "False", ")", "\n", "if", "ignore_index", "is", "None", "and", "not", "skip_last_target", ":", "\n", "            ", "return", "nn", ".", "BCEWithLogitsLoss", "(", ")", "\n", "", "else", ":", "\n", "            ", "return", "BCELossWrapper", "(", "nn", ".", "BCEWithLogitsLoss", "(", ")", ",", "ignore_index", "=", "ignore_index", ",", "skip_last_target", "=", "skip_last_target", ")", "\n", "", "", "elif", "name", "==", "'CrossEntropyLoss'", ":", "\n", "        ", "if", "ignore_index", "is", "None", ":", "\n", "            ", "ignore_index", "=", "-", "100", "# use the default 'ignore_index' as defined in the CrossEntropyLoss", "\n", "", "return", "nn", ".", "CrossEntropyLoss", "(", "weight", "=", "weight", ",", "ignore_index", "=", "ignore_index", ")", "\n", "", "elif", "name", "==", "'WeightedCrossEntropyLoss'", ":", "\n", "        ", "if", "ignore_index", "is", "None", ":", "\n", "            ", "ignore_index", "=", "-", "100", "# use the default 'ignore_index' as defined in the CrossEntropyLoss", "\n", "", "return", "WeightedCrossEntropyLoss", "(", "weight", "=", "weight", ",", "ignore_index", "=", "ignore_index", ")", "\n", "", "elif", "name", "==", "'PixelWiseCrossEntropyLoss'", ":", "\n", "        ", "return", "PixelWiseCrossEntropyLoss", "(", "class_weights", "=", "weight", ",", "ignore_index", "=", "ignore_index", ")", "\n", "", "elif", "name", "==", "'GeneralizedDiceLoss'", ":", "\n", "        ", "return", "GeneralizedDiceLoss", "(", "weight", "=", "weight", ",", "ignore_index", "=", "ignore_index", ")", "\n", "", "elif", "name", "==", "'DiceLoss'", ":", "\n", "        ", "sigmoid_normalization", "=", "loss_config", ".", "get", "(", "'sigmoid_normalization'", ",", "True", ")", "\n", "skip_last_target", "=", "loss_config", ".", "get", "(", "'skip_last_target'", ",", "False", ")", "\n", "return", "DiceLoss", "(", "weight", "=", "weight", ",", "ignore_index", "=", "ignore_index", ",", "sigmoid_normalization", "=", "sigmoid_normalization", ",", "\n", "skip_last_target", "=", "skip_last_target", ")", "\n", "", "elif", "name", "==", "'TagsAngularLoss'", ":", "\n", "        ", "tags_coefficients", "=", "loss_config", "[", "'tags_coefficients'", "]", "\n", "return", "TagsAngularLoss", "(", "tags_coefficients", ")", "\n", "", "elif", "name", "==", "'MSEWithLogitsLoss'", ":", "\n", "        ", "return", "MSEWithLogitsLoss", "(", ")", "\n", "", "elif", "name", "==", "'MSELoss'", ":", "\n", "        ", "return", "MSELoss", "(", ")", "\n", "", "elif", "name", "==", "'SmoothL1Loss'", ":", "\n", "        ", "return", "SmoothL1Loss", "(", ")", "\n", "", "elif", "name", "==", "'L1Loss'", ":", "\n", "        ", "return", "L1Loss", "(", ")", "\n", "", "else", ":", "\n", "        ", "raise", "RuntimeError", "(", "f\"Unsupported loss function: '{name}'. Supported losses: {SUPPORTED_LOSSES}\"", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zwxu064_RANP.PSM.main.get_model_state_dict": [[21, 28], ["hasattr", "model.module.state_dict", "model.state_dict"], "function", ["None"], ["import", "test", "\n", "\n", "\n", "\n", "if", "__name__", "==", "'__main__'", ":", "\n", "# os.environ['CUDA_VISIBLE_DEVICES']=\"0\"", "\n", "    ", "opt", "=", "parse_opts", "(", ")", "\n", "if", "opt", ".", "root_path", "!=", "''", ":", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.PSM.main.load_optimizer_state_dict": [[30, 41], ["optimizer.load_state_dict", "optimizer.state.values", "state.items", "isinstance", "v.cuda", "v.cpu"], "function", ["None"], ["opt", ".", "annotation_path", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "root_path", ",", "opt", ".", "annotation_path", ")", "\n", "opt", ".", "result_path", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "root_path", ",", "opt", ".", "result_path", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "opt", ".", "result_path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "opt", ".", "result_path", ")", "\n", "", "if", "opt", ".", "resume_path", ":", "\n", "            ", "opt", ".", "resume_path", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "root_path", ",", "opt", ".", "resume_path", ")", "\n", "", "if", "opt", ".", "pretrain_path", ":", "\n", "            ", "opt", ".", "pretrain_path", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "root_path", ",", "opt", ".", "pretrain_path", ")", "\n", "", "", "opt", ".", "scales", "=", "[", "opt", ".", "initial_scale", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "opt", ".", "n_scales", ")", ":", "\n", "        ", "opt", ".", "scales", ".", "append", "(", "opt", ".", "scales", "[", "-", "1", "]", "*", "opt", ".", "scale_step", ")", "\n", "", "opt", ".", "arch", "=", "'{}'", ".", "format", "(", "opt", ".", "model", ")", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.PSM.main.train": [[101, 134], ["model.train", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "mask.detach_", "optimizer.zero_grad", "F.smooth_l1_loss.backward", "optimizer.step", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "model", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "torch.smooth_l1_loss", "model", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.smooth_l1_loss", "torch.smooth_l1_loss", "torch.smooth_l1_loss"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.data.train"], ["os", ".", "path", ".", "join", "(", "opt", ".", "result_path", ",", "'train_batch.log'", ")", ",", "\n", "[", "'epoch'", ",", "'batch'", ",", "'iter'", ",", "'loss'", ",", "'prec1'", ",", "'prec5'", ",", "'lr'", "]", ")", "\n", "\n", "if", "opt", ".", "nesterov", ":", "\n", "            ", "dampening", "=", "0", "\n", "", "else", ":", "\n", "            ", "dampening", "=", "opt", ".", "dampening", "\n", "", "optimizer", "=", "optim", ".", "SGD", "(", "\n", "parameters", ",", "\n", "lr", "=", "opt", ".", "learning_rate", ",", "\n", "momentum", "=", "opt", ".", "momentum", ",", "\n", "dampening", "=", "dampening", ",", "\n", "weight_decay", "=", "opt", ".", "weight_decay", ",", "\n", "nesterov", "=", "opt", ".", "nesterov", ")", "\n", "scheduler", "=", "lr_scheduler", ".", "ReduceLROnPlateau", "(", "\n", "optimizer", ",", "'min'", ",", "patience", "=", "opt", ".", "lr_patience", ")", "\n", "", "if", "not", "opt", ".", "no_val", ":", "\n", "        ", "spatial_transform", "=", "Compose", "(", "[", "\n", "Scale", "(", "opt", ".", "sample_size", ")", ",", "\n", "CenterCrop", "(", "opt", ".", "sample_size", ")", ",", "\n", "ToTensor", "(", "opt", ".", "norm_value", ")", ",", "norm_method", "\n", "]", ")", "\n", "#temporal_transform = LoopPadding(opt.sample_duration)", "\n", "temporal_transform", "=", "TemporalCenterCrop", "(", "opt", ".", "sample_duration", ",", "opt", ".", "downsample", ")", "\n", "target_transform", "=", "ClassLabel", "(", ")", "\n", "validation_data", "=", "get_validation_set", "(", "\n", "opt", ",", "spatial_transform", ",", "temporal_transform", ",", "target_transform", ")", "\n", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "validation_data", ",", "\n", "batch_size", "=", "16", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "opt", ".", "n_threads", ",", "\n", "pin_memory", "=", "True", ")", "\n", "val_logger", "=", "Logger", "(", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.PSM.main.test": [[135, 157], ["model.eval", "torch.autograd.Variable", "torch.autograd.Variable", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "len", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "model.data.cpu", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs"], "function", ["None"], ["os", ".", "path", ".", "join", "(", "opt", ".", "result_path", ",", "'val.log'", ")", ",", "[", "'epoch'", ",", "'loss'", ",", "'prec1'", ",", "'prec5'", "]", ")", "\n", "\n", "", "best_prec1", "=", "0", "\n", "if", "opt", ".", "resume_path", ":", "\n", "        ", "print", "(", "'loading checkpoint {}'", ".", "format", "(", "opt", ".", "resume_path", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "opt", ".", "resume_path", ")", "\n", "assert", "opt", ".", "arch", "==", "checkpoint", "[", "'arch'", "]", "\n", "best_prec1", "=", "checkpoint", "[", "'best_prec1'", "]", "\n", "opt", ".", "begin_epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "\n", "\n", "", "print", "(", "'run'", ")", "\n", "for", "i", "in", "range", "(", "opt", ".", "begin_epoch", ",", "opt", ".", "n_epochs", "+", "1", ")", ":", "\n", "\n", "        ", "if", "not", "opt", ".", "no_train", ":", "\n", "            ", "adjust_learning_rate", "(", "optimizer", ",", "i", ",", "opt", ")", "\n", "train_epoch", "(", "i", ",", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "opt", ",", "\n", "train_logger", ",", "train_batch_logger", ")", "\n", "state", "=", "{", "\n", "'epoch'", ":", "i", ",", "\n", "'arch'", ":", "opt", ".", "arch", ",", "\n", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.PSM.main.adjust_learning_rate": [[158, 163], ["print"], "function", ["None"], ["'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'best_prec1'", ":", "best_prec1", "\n", "}", "\n", "save_checkpoint", "(", "state", ",", "False", ",", "opt", ")", "\n", "\n", "", "if", "not", "opt", ".", "no_val", ":", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.PSM.main.main": [[165, 209], ["time.time", "range", "print", "enumerate", "print", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "int", "print", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "main.adjust_learning_rate", "enumerate", "print", "main.get_model_state_dict", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "main.test", "print", "test.item", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "time.time", "main.train", "print", "train.item", "[].split", "str", "optimizer.state_dict", "len", "len", "len", "time.time", "len", "args.loadmodel.split", "time.time"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.adjust_learning_rate", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.get_model_state_dict", "home.repos.pwc.inspect_result.zwxu064_RANP.PSM.main.test", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.data.train"], ["val_logger", ")", "\n", "is_best", "=", "prec1", ">", "best_prec1", "\n", "best_prec1", "=", "max", "(", "prec1", ",", "best_prec1", ")", "\n", "state", "=", "{", "\n", "'epoch'", ":", "i", ",", "\n", "'arch'", ":", "opt", ".", "arch", ",", "\n", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'best_prec1'", ":", "best_prec1", "\n", "}", "\n", "save_checkpoint", "(", "state", ",", "is_best", ",", "opt", ")", "\n", "\n", "\n", "", "", "if", "opt", ".", "test", ":", "\n", "        ", "spatial_transform", "=", "Compose", "(", "[", "\n", "Scale", "(", "int", "(", "opt", ".", "sample_size", "/", "opt", ".", "scale_in_test", ")", ")", ",", "\n", "CornerCrop", "(", "opt", ".", "sample_size", ",", "opt", ".", "crop_position_in_test", ")", ",", "\n", "ToTensor", "(", "opt", ".", "norm_value", ")", ",", "norm_method", "\n", "]", ")", "\n", "# temporal_transform = LoopPadding(opt.sample_duration, opt.downsample)", "\n", "temporal_transform", "=", "TemporalRandomCrop", "(", "opt", ".", "sample_duration", ",", "opt", ".", "downsample", ")", "\n", "target_transform", "=", "VideoID", "(", ")", "\n", "\n", "test_data", "=", "get_test_set", "(", "opt", ",", "spatial_transform", ",", "temporal_transform", ",", "\n", "target_transform", ")", "\n", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "test_data", ",", "\n", "batch_size", "=", "16", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "opt", ".", "n_threads", ",", "\n", "pin_memory", "=", "True", ")", "\n", "test", ".", "test", "(", "test_loader", ",", "model", ",", "opt", ",", "test_data", ".", "class_names", ")", "\n", "\n", "\n", "\n", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zwxu064_RANP.dataloader.KITTI_submission_loader.is_image_file": [[14, 16], ["any", "filename.endswith"], "function", ["None"], ["def", "is_image_file", "(", "filename", ")", ":", "\n", "    ", "return", "any", "(", "filename", ".", "endswith", "(", "extension", ")", "for", "extension", "in", "IMG_EXTENSIONS", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.dataloader.KITTI_submission_loader.dataloader": [[17, 30], ["os.listdir", "os.listdir", "img.find"], "function", ["None"], ["", "def", "dataloader", "(", "filepath", ")", ":", "\n", "\n", "  ", "left_fold", "=", "'image_2/'", "\n", "right_fold", "=", "'image_3/'", "\n", "\n", "\n", "image", "=", "[", "img", "for", "img", "in", "os", ".", "listdir", "(", "filepath", "+", "left_fold", ")", "if", "img", ".", "find", "(", "'_10'", ")", ">", "-", "1", "]", "\n", "\n", "\n", "left_test", "=", "[", "filepath", "+", "left_fold", "+", "img", "for", "img", "in", "image", "]", "\n", "right_test", "=", "[", "filepath", "+", "right_fold", "+", "img", "for", "img", "in", "image", "]", "\n", "\n", "return", "left_test", ",", "right_test", "\n", "", ""]], "home.repos.pwc.inspect_result.zwxu064_RANP.dataloader.KITTI_submission_loader2012.is_image_file": [[14, 16], ["any", "filename.endswith"], "function", ["None"], ["def", "is_image_file", "(", "filename", ")", ":", "\n", "    ", "return", "any", "(", "filename", ".", "endswith", "(", "extension", ")", "for", "extension", "in", "IMG_EXTENSIONS", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.dataloader.KITTI_submission_loader2012.dataloader": [[17, 30], ["os.listdir", "os.listdir", "img.find"], "function", ["None"], ["", "def", "dataloader", "(", "filepath", ")", ":", "\n", "\n", "  ", "left_fold", "=", "'colored_0/'", "\n", "right_fold", "=", "'colored_1/'", "\n", "\n", "\n", "image", "=", "[", "img", "for", "img", "in", "os", ".", "listdir", "(", "filepath", "+", "left_fold", ")", "if", "img", ".", "find", "(", "'_10'", ")", ">", "-", "1", "]", "\n", "\n", "\n", "left_test", "=", "[", "filepath", "+", "left_fold", "+", "img", "for", "img", "in", "image", "]", "\n", "right_test", "=", "[", "filepath", "+", "right_fold", "+", "img", "for", "img", "in", "image", "]", "\n", "\n", "return", "left_test", ",", "right_test", "\n", "", ""]], "home.repos.pwc.inspect_result.zwxu064_RANP.dataloader.SecenFlowLoader.myImageFloder.__init__": [[29, 37], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "left", ",", "right", ",", "left_disparity", ",", "training", ",", "loader", "=", "default_loader", ",", "dploader", "=", "disparity_loader", ")", ":", "\n", "\n", "        ", "self", ".", "left", "=", "left", "\n", "self", ".", "right", "=", "right", "\n", "self", ".", "disp_L", "=", "left_disparity", "\n", "self", ".", "loader", "=", "loader", "\n", "self", ".", "dploader", "=", "dploader", "\n", "self", ".", "training", "=", "training", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.dataloader.SecenFlowLoader.myImageFloder.__getitem__": [[38, 74], ["SecenFlowLoader.myImageFloder.loader", "SecenFlowLoader.myImageFloder.loader", "SecenFlowLoader.myImageFloder.dploader", "numpy.ascontiguousarray", "random.randint", "random.randint", "preprocess.get_transform.crop", "preprocess.get_transform.crop", "preprocess.get_transform", "preprocess.get_transform.", "preprocess.get_transform.", "preprocess.get_transform.crop", "preprocess.get_transform.crop", "preprocess.get_transform", "preprocess.get_transform.", "preprocess.get_transform."], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.data.explore.crop", "home.repos.pwc.inspect_result.zwxu064_RANP.data.explore.crop", "home.repos.pwc.inspect_result.zwxu064_RANP.dataloader.preprocess.get_transform", "home.repos.pwc.inspect_result.zwxu064_RANP.data.explore.crop", "home.repos.pwc.inspect_result.zwxu064_RANP.data.explore.crop", "home.repos.pwc.inspect_result.zwxu064_RANP.dataloader.preprocess.get_transform"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "left", "=", "self", ".", "left", "[", "index", "]", "\n", "right", "=", "self", ".", "right", "[", "index", "]", "\n", "disp_L", "=", "self", ".", "disp_L", "[", "index", "]", "\n", "name", "=", "left", "\n", "\n", "left_img", "=", "self", ".", "loader", "(", "left", ")", "\n", "right_img", "=", "self", ".", "loader", "(", "right", ")", "\n", "dataL", ",", "scaleL", "=", "self", ".", "dploader", "(", "disp_L", ")", "\n", "dataL", "=", "np", ".", "ascontiguousarray", "(", "dataL", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "if", "self", ".", "training", ":", "\n", "           ", "w", ",", "h", "=", "left_img", ".", "size", "\n", "th", ",", "tw", "=", "256", ",", "512", "\n", "# th, tw = h, w", "\n", "\n", "x1", "=", "random", ".", "randint", "(", "0", ",", "w", "-", "tw", ")", "\n", "y1", "=", "random", ".", "randint", "(", "0", ",", "h", "-", "th", ")", "\n", "\n", "left_img", "=", "left_img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "tw", ",", "y1", "+", "th", ")", ")", "\n", "right_img", "=", "right_img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "tw", ",", "y1", "+", "th", ")", ")", "\n", "dataL", "=", "dataL", "[", "y1", ":", "y1", "+", "th", ",", "x1", ":", "x1", "+", "tw", "]", "\n", "processed", "=", "preprocess", ".", "get_transform", "(", "augment", "=", "False", ")", "\n", "left_img", "=", "processed", "(", "left_img", ")", "\n", "right_img", "=", "processed", "(", "right_img", ")", "\n", "\n", "return", "left_img", ",", "right_img", ",", "dataL", ",", "name", "\n", "", "else", ":", "\n", "           ", "w", ",", "h", "=", "left_img", ".", "size", "\n", "left_img", "=", "left_img", ".", "crop", "(", "(", "w", "-", "960", ",", "h", "-", "544", ",", "w", ",", "h", ")", ")", "\n", "right_img", "=", "right_img", ".", "crop", "(", "(", "w", "-", "960", ",", "h", "-", "544", ",", "w", ",", "h", ")", ")", "\n", "processed", "=", "preprocess", ".", "get_transform", "(", "augment", "=", "False", ")", "\n", "left_img", "=", "processed", "(", "left_img", ")", "\n", "right_img", "=", "processed", "(", "right_img", ")", "\n", "\n", "return", "left_img", ",", "right_img", ",", "dataL", ",", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.dataloader.SecenFlowLoader.myImageFloder.__len__": [[75, 77], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "left", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zwxu064_RANP.dataloader.SecenFlowLoader.is_image_file": [[18, 20], ["any", "filename.endswith"], "function", ["None"], ["def", "is_image_file", "(", "filename", ")", ":", "\n", "    ", "return", "any", "(", "filename", ".", "endswith", "(", "extension", ")", "for", "extension", "in", "IMG_EXTENSIONS", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.dataloader.SecenFlowLoader.default_loader": [[21, 23], ["PIL.Image.open().convert", "PIL.Image.open"], "function", ["None"], ["", "def", "default_loader", "(", "path", ")", ":", "\n", "    ", "return", "Image", ".", "open", "(", "path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.dataloader.SecenFlowLoader.disparity_loader": [[24, 26], ["readpfm.readPFM"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.dataloader.readpfm.readPFM"], ["", "def", "disparity_loader", "(", "path", ")", ":", "\n", "    ", "return", "rp", ".", "readPFM", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.dataloader.readpfm.readPFM": [[6, 42], ["open", "open.readline().rstrip().decode", "re.match", "float", "numpy.fromfile", "numpy.reshape", "numpy.flipud", "open.readline().decode", "map", "Exception", "open.readline().rstrip().decode", "open.readline().rstrip", "Exception", "re.match.groups", "open.readline", "open.readline().rstrip", "open.readline", "open.readline"], "function", ["None"], ["def", "readPFM", "(", "file", ")", ":", "\n", "    ", "file", "=", "open", "(", "file", ",", "'rb'", ")", "\n", "\n", "color", "=", "None", "\n", "width", "=", "None", "\n", "height", "=", "None", "\n", "scale", "=", "None", "\n", "endian", "=", "None", "\n", "\n", "header", "=", "file", ".", "readline", "(", ")", ".", "rstrip", "(", ")", ".", "decode", "(", "'utf-8'", ")", "\n", "if", "header", "==", "'PF'", ":", "\n", "        ", "color", "=", "True", "\n", "", "elif", "header", "==", "'Pf'", ":", "\n", "        ", "color", "=", "False", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "'Not a PFM file.'", ")", "\n", "\n", "", "dim_match", "=", "re", ".", "match", "(", "r'^(\\d+)\\s(\\d+)\\s$'", ",", "file", ".", "readline", "(", ")", ".", "decode", "(", "'utf-8'", ")", ")", "\n", "if", "dim_match", ":", "\n", "        ", "width", ",", "height", "=", "map", "(", "int", ",", "dim_match", ".", "groups", "(", ")", ")", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "'Malformed PFM header.'", ")", "\n", "\n", "", "scale", "=", "float", "(", "file", ".", "readline", "(", ")", ".", "rstrip", "(", ")", ".", "decode", "(", "'utf-8'", ")", ")", "\n", "if", "scale", "<", "0", ":", "# little-endian", "\n", "        ", "endian", "=", "'<'", "\n", "scale", "=", "-", "scale", "\n", "", "else", ":", "\n", "        ", "endian", "=", "'>'", "# big-endian", "\n", "\n", "", "data", "=", "np", ".", "fromfile", "(", "file", ",", "endian", "+", "'f'", ")", "\n", "shape", "=", "(", "height", ",", "width", ",", "3", ")", "if", "color", "else", "(", "height", ",", "width", ")", "\n", "\n", "data", "=", "np", ".", "reshape", "(", "data", ",", "shape", ")", "\n", "data", "=", "np", ".", "flipud", "(", "data", ")", "\n", "return", "data", ",", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.dataloader.KITTILoader.myImageFloder.__init__": [[27, 35], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "left", ",", "right", ",", "left_disparity", ",", "training", ",", "loader", "=", "default_loader", ",", "dploader", "=", "disparity_loader", ")", ":", "\n", "\n", "        ", "self", ".", "left", "=", "left", "\n", "self", ".", "right", "=", "right", "\n", "self", ".", "disp_L", "=", "left_disparity", "\n", "self", ".", "loader", "=", "loader", "\n", "self", ".", "dploader", "=", "dploader", "\n", "self", ".", "training", "=", "training", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.dataloader.KITTILoader.myImageFloder.__getitem__": [[36, 79], ["KITTILoader.myImageFloder.loader", "KITTILoader.myImageFloder.loader", "KITTILoader.myImageFloder.dploader", "random.randint", "random.randint", "preprocess.get_transform.crop", "preprocess.get_transform.crop", "preprocess.get_transform", "preprocess.get_transform.", "preprocess.get_transform.", "preprocess.get_transform.crop", "preprocess.get_transform.crop", "dataL.crop.crop.crop", "preprocess.get_transform", "preprocess.get_transform.", "preprocess.get_transform.", "numpy.ascontiguousarray", "numpy.ascontiguousarray"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.data.explore.crop", "home.repos.pwc.inspect_result.zwxu064_RANP.data.explore.crop", "home.repos.pwc.inspect_result.zwxu064_RANP.dataloader.preprocess.get_transform", "home.repos.pwc.inspect_result.zwxu064_RANP.data.explore.crop", "home.repos.pwc.inspect_result.zwxu064_RANP.data.explore.crop", "home.repos.pwc.inspect_result.zwxu064_RANP.data.explore.crop", "home.repos.pwc.inspect_result.zwxu064_RANP.dataloader.preprocess.get_transform"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "left", "=", "self", ".", "left", "[", "index", "]", "\n", "right", "=", "self", ".", "right", "[", "index", "]", "\n", "disp_L", "=", "self", ".", "disp_L", "[", "index", "]", "\n", "\n", "left_img", "=", "self", ".", "loader", "(", "left", ")", "\n", "right_img", "=", "self", ".", "loader", "(", "right", ")", "\n", "dataL", "=", "self", ".", "dploader", "(", "disp_L", ")", "\n", "\n", "\n", "if", "self", ".", "training", ":", "\n", "           ", "w", ",", "h", "=", "left_img", ".", "size", "\n", "th", ",", "tw", "=", "256", ",", "512", "\n", "\n", "x1", "=", "random", ".", "randint", "(", "0", ",", "w", "-", "tw", ")", "\n", "y1", "=", "random", ".", "randint", "(", "0", ",", "h", "-", "th", ")", "\n", "\n", "left_img", "=", "left_img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "tw", ",", "y1", "+", "th", ")", ")", "\n", "right_img", "=", "right_img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "tw", ",", "y1", "+", "th", ")", ")", "\n", "\n", "dataL", "=", "np", ".", "ascontiguousarray", "(", "dataL", ",", "dtype", "=", "np", ".", "float32", ")", "/", "256", "\n", "dataL", "=", "dataL", "[", "y1", ":", "y1", "+", "th", ",", "x1", ":", "x1", "+", "tw", "]", "\n", "\n", "processed", "=", "preprocess", ".", "get_transform", "(", "augment", "=", "False", ")", "\n", "left_img", "=", "processed", "(", "left_img", ")", "\n", "right_img", "=", "processed", "(", "right_img", ")", "\n", "\n", "return", "left_img", ",", "right_img", ",", "dataL", "\n", "", "else", ":", "\n", "           ", "w", ",", "h", "=", "left_img", ".", "size", "\n", "\n", "left_img", "=", "left_img", ".", "crop", "(", "(", "w", "-", "1232", ",", "h", "-", "368", ",", "w", ",", "h", ")", ")", "\n", "right_img", "=", "right_img", ".", "crop", "(", "(", "w", "-", "1232", ",", "h", "-", "368", ",", "w", ",", "h", ")", ")", "\n", "w1", ",", "h1", "=", "left_img", ".", "size", "\n", "\n", "dataL", "=", "dataL", ".", "crop", "(", "(", "w", "-", "1232", ",", "h", "-", "368", ",", "w", ",", "h", ")", ")", "\n", "dataL", "=", "np", ".", "ascontiguousarray", "(", "dataL", ",", "dtype", "=", "np", ".", "float32", ")", "/", "256", "\n", "\n", "processed", "=", "preprocess", ".", "get_transform", "(", "augment", "=", "False", ")", "\n", "left_img", "=", "processed", "(", "left_img", ")", "\n", "right_img", "=", "processed", "(", "right_img", ")", "\n", "\n", "return", "left_img", ",", "right_img", ",", "dataL", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.dataloader.KITTILoader.myImageFloder.__len__": [[80, 82], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "left", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zwxu064_RANP.dataloader.KITTILoader.is_image_file": [[16, 18], ["any", "filename.endswith"], "function", ["None"], ["def", "is_image_file", "(", "filename", ")", ":", "\n", "    ", "return", "any", "(", "filename", ".", "endswith", "(", "extension", ")", "for", "extension", "in", "IMG_EXTENSIONS", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.dataloader.KITTILoader.default_loader": [[19, 21], ["PIL.Image.open().convert", "PIL.Image.open"], "function", ["None"], ["", "def", "default_loader", "(", "path", ")", ":", "\n", "    ", "return", "Image", ".", "open", "(", "path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.dataloader.KITTILoader.disparity_loader": [[22, 24], ["PIL.Image.open"], "function", ["None"], ["", "def", "disparity_loader", "(", "path", ")", ":", "\n", "    ", "return", "Image", ".", "open", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.dataloader.preprocess.Lighting.__init__": [[92, 96], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "alphastd", ",", "eigval", ",", "eigvec", ")", ":", "\n", "        ", "self", ".", "alphastd", "=", "alphastd", "\n", "self", ".", "eigval", "=", "eigval", "\n", "self", ".", "eigvec", "=", "eigvec", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.dataloader.preprocess.Lighting.__call__": [[97, 108], ["img.new().resize_().normal_", "preprocess.Lighting.eigvec.type_as().clone().mul().mul().sum().squeeze", "img.add", "preprocess.Lighting.view().expand_as", "img.new().resize_", "preprocess.Lighting.eigvec.type_as().clone().mul().mul().sum", "preprocess.Lighting.view", "img.new", "preprocess.Lighting.eigvec.type_as().clone().mul().mul", "preprocess.Lighting.eigval.view().expand", "preprocess.Lighting.eigvec.type_as().clone().mul", "img.new().resize_().normal_.view().expand", "preprocess.Lighting.eigval.view", "preprocess.Lighting.eigvec.type_as().clone", "img.new().resize_().normal_.view", "preprocess.Lighting.eigvec.type_as"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.binvox_rw.Voxels.clone"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "if", "self", ".", "alphastd", "==", "0", ":", "\n", "            ", "return", "img", "\n", "\n", "", "alpha", "=", "img", ".", "new", "(", ")", ".", "resize_", "(", "3", ")", ".", "normal_", "(", "0", ",", "self", ".", "alphastd", ")", "\n", "rgb", "=", "self", ".", "eigvec", ".", "type_as", "(", "img", ")", ".", "clone", "(", ")", ".", "mul", "(", "alpha", ".", "view", "(", "1", ",", "3", ")", ".", "expand", "(", "3", ",", "3", ")", ")", ".", "mul", "(", "self", ".", "eigval", ".", "view", "(", "1", ",", "3", ")", ".", "expand", "(", "3", ",", "3", ")", ")", ".", "sum", "(", "1", ")", ".", "squeeze", "(", ")", "\n", "\n", "return", "img", ".", "add", "(", "rgb", ".", "view", "(", "3", ",", "1", ",", "1", ")", ".", "expand_as", "(", "img", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.dataloader.preprocess.Grayscale.__call__": [[112, 118], ["img.clone", "gs[].mul_().add_().add_", "gs[].copy_", "gs[].copy_", "gs[].mul_().add_", "gs[].mul_"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.binvox_rw.Voxels.clone"], ["    ", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "gs", "=", "img", ".", "clone", "(", ")", "\n", "gs", "[", "0", "]", ".", "mul_", "(", "0.299", ")", ".", "add_", "(", "0.587", ",", "gs", "[", "1", "]", ")", ".", "add_", "(", "0.114", ",", "gs", "[", "2", "]", ")", "\n", "gs", "[", "1", "]", ".", "copy_", "(", "gs", "[", "0", "]", ")", "\n", "gs", "[", "2", "]", ".", "copy_", "(", "gs", "[", "0", "]", ")", "\n", "return", "gs", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.dataloader.preprocess.Saturation.__init__": [[122, 124], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "var", ")", ":", "\n", "        ", "self", ".", "var", "=", "var", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.dataloader.preprocess.Saturation.__call__": [[125, 129], ["random.uniform", "img.lerp", "preprocess.Grayscale"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "gs", "=", "Grayscale", "(", ")", "(", "img", ")", "\n", "alpha", "=", "random", ".", "uniform", "(", "0", ",", "self", ".", "var", ")", "\n", "return", "img", ".", "lerp", "(", "gs", ",", "alpha", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.dataloader.preprocess.Brightness.__init__": [[133, 135], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "var", ")", ":", "\n", "        ", "self", ".", "var", "=", "var", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.dataloader.preprocess.Brightness.__call__": [[136, 140], ["img.new().resize_as_().zero_", "random.uniform", "img.lerp", "img.new().resize_as_", "img.new"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "gs", "=", "img", ".", "new", "(", ")", ".", "resize_as_", "(", "img", ")", ".", "zero_", "(", ")", "\n", "alpha", "=", "random", ".", "uniform", "(", "0", ",", "self", ".", "var", ")", "\n", "return", "img", ".", "lerp", "(", "gs", ",", "alpha", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.dataloader.preprocess.Contrast.__init__": [[144, 146], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "var", ")", ":", "\n", "        ", "self", ".", "var", "=", "var", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.dataloader.preprocess.Contrast.__call__": [[147, 152], ["gs.fill_", "random.uniform", "img.lerp", "preprocess.Grayscale", "gs.mean"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "gs", "=", "Grayscale", "(", ")", "(", "img", ")", "\n", "gs", ".", "fill_", "(", "gs", ".", "mean", "(", ")", ")", "\n", "alpha", "=", "random", ".", "uniform", "(", "0", ",", "self", ".", "var", ")", "\n", "return", "img", ".", "lerp", "(", "gs", ",", "alpha", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.dataloader.preprocess.RandomOrder.__init__": [[158, 160], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "transforms", ")", ":", "\n", "        ", "self", ".", "transforms", "=", "transforms", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.dataloader.preprocess.RandomOrder.__call__": [[161, 168], ["torch.randperm", "len"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "if", "self", ".", "transforms", "is", "None", ":", "\n", "            ", "return", "img", "\n", "", "order", "=", "torch", ".", "randperm", "(", "len", "(", "self", ".", "transforms", ")", ")", "\n", "for", "i", "in", "order", ":", "\n", "            ", "img", "=", "self", ".", "transforms", "[", "i", "]", "(", "img", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.dataloader.preprocess.ColorJitter.__init__": [[172, 180], ["preprocess.ColorJitter.transforms.append", "preprocess.ColorJitter.transforms.append", "preprocess.ColorJitter.transforms.append", "preprocess.Brightness", "preprocess.Contrast", "preprocess.Saturation"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "brightness", "=", "0.4", ",", "contrast", "=", "0.4", ",", "saturation", "=", "0.4", ")", ":", "\n", "        ", "self", ".", "transforms", "=", "[", "]", "\n", "if", "brightness", "!=", "0", ":", "\n", "            ", "self", ".", "transforms", ".", "append", "(", "Brightness", "(", "brightness", ")", ")", "\n", "", "if", "contrast", "!=", "0", ":", "\n", "            ", "self", ".", "transforms", ".", "append", "(", "Contrast", "(", "contrast", ")", ")", "\n", "", "if", "saturation", "!=", "0", ":", "\n", "            ", "self", ".", "transforms", ".", "append", "(", "Saturation", "(", "saturation", ")", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.zwxu064_RANP.dataloader.preprocess.scale_crop": [[21, 30], ["torchvision.Compose", "torchvision.ToTensor", "torchvision.Normalize"], "function", ["None"], ["def", "scale_crop", "(", "input_size", ",", "scale_size", "=", "None", ",", "normalize", "=", "__imagenet_stats", ")", ":", "\n", "    ", "t_list", "=", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "**", "normalize", ")", ",", "\n", "]", "\n", "#if scale_size != input_size:", "\n", "#t_list = [transforms.Scale((960,540))] + t_list", "\n", "\n", "return", "transforms", ".", "Compose", "(", "t_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.dataloader.preprocess.scale_random_crop": [[32, 42], ["torchvision.Compose", "torchvision.RandomCrop", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.Scale"], "function", ["None"], ["", "def", "scale_random_crop", "(", "input_size", ",", "scale_size", "=", "None", ",", "normalize", "=", "__imagenet_stats", ")", ":", "\n", "    ", "t_list", "=", "[", "\n", "transforms", ".", "RandomCrop", "(", "input_size", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "**", "normalize", ")", ",", "\n", "]", "\n", "if", "scale_size", "!=", "input_size", ":", "\n", "        ", "t_list", "=", "[", "transforms", ".", "Scale", "(", "scale_size", ")", "]", "+", "t_list", "\n", "\n", "", "transforms", ".", "Compose", "(", "t_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.dataloader.preprocess.pad_random_crop": [[44, 51], ["int", "torchvision.Compose", "torchvision.RandomCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.Normalize"], "function", ["None"], ["", "def", "pad_random_crop", "(", "input_size", ",", "scale_size", "=", "None", ",", "normalize", "=", "__imagenet_stats", ")", ":", "\n", "    ", "padding", "=", "int", "(", "(", "scale_size", "-", "input_size", ")", "/", "2", ")", "\n", "return", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomCrop", "(", "input_size", ",", "padding", "=", "padding", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "**", "normalize", ")", ",", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.dataloader.preprocess.inception_preproccess": [[54, 60], ["torchvision.Compose", "torchvision.RandomSizedCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.Normalize"], "function", ["None"], ["", "def", "inception_preproccess", "(", "input_size", ",", "normalize", "=", "__imagenet_stats", ")", ":", "\n", "    ", "return", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomSizedCrop", "(", "input_size", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "**", "normalize", ")", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.dataloader.preprocess.inception_color_preproccess": [[61, 73], ["torchvision.Compose", "torchvision.ToTensor", "preprocess.ColorJitter", "preprocess.Lighting", "torchvision.Normalize"], "function", ["None"], ["", "def", "inception_color_preproccess", "(", "input_size", ",", "normalize", "=", "__imagenet_stats", ")", ":", "\n", "    ", "return", "transforms", ".", "Compose", "(", "[", "\n", "#transforms.RandomSizedCrop(input_size),", "\n", "#transforms.RandomHorizontalFlip(),", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "ColorJitter", "(", "\n", "brightness", "=", "0.4", ",", "\n", "contrast", "=", "0.4", ",", "\n", "saturation", "=", "0.4", ",", "\n", ")", ",", "\n", "Lighting", "(", "0.1", ",", "__imagenet_pca", "[", "'eigval'", "]", ",", "__imagenet_pca", "[", "'eigvec'", "]", ")", ",", "\n", "transforms", ".", "Normalize", "(", "**", "normalize", ")", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.dataloader.preprocess.get_transform": [[76, 85], ["preprocess.inception_color_preproccess", "preprocess.scale_crop"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.dataloader.preprocess.inception_color_preproccess", "home.repos.pwc.inspect_result.zwxu064_RANP.dataloader.preprocess.scale_crop"], ["", "def", "get_transform", "(", "name", "=", "'imagenet'", ",", "input_size", "=", "None", ",", "\n", "scale_size", "=", "None", ",", "normalize", "=", "None", ",", "augment", "=", "True", ")", ":", "\n", "    ", "normalize", "=", "__imagenet_stats", "\n", "input_size", "=", "256", "\n", "if", "augment", ":", "\n", "            ", "return", "inception_color_preproccess", "(", "input_size", ",", "normalize", "=", "normalize", ")", "\n", "", "else", ":", "\n", "            ", "return", "scale_crop", "(", "input_size", "=", "input_size", ",", "\n", "scale_size", "=", "scale_size", ",", "normalize", "=", "normalize", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.dataloader.KITTIloader2015.is_image_file": [[14, 16], ["any", "filename.endswith"], "function", ["None"], ["def", "is_image_file", "(", "filename", ")", ":", "\n", "    ", "return", "any", "(", "filename", ".", "endswith", "(", "extension", ")", "for", "extension", "in", "IMG_EXTENSIONS", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.dataloader.KITTIloader2015.dataloader": [[17, 40], ["os.listdir", "os.listdir", "img.find"], "function", ["None"], ["", "def", "dataloader", "(", "filepath", ")", ":", "\n", "\n", "  ", "left_fold", "=", "'image_2/'", "\n", "right_fold", "=", "'image_3/'", "\n", "disp_L", "=", "'disp_occ_0/'", "\n", "disp_R", "=", "'disp_occ_1/'", "\n", "\n", "image", "=", "[", "img", "for", "img", "in", "os", ".", "listdir", "(", "filepath", "+", "left_fold", ")", "if", "img", ".", "find", "(", "'_10'", ")", ">", "-", "1", "]", "\n", "\n", "train", "=", "image", "[", ":", "160", "]", "\n", "val", "=", "image", "[", "160", ":", "]", "\n", "\n", "left_train", "=", "[", "filepath", "+", "left_fold", "+", "img", "for", "img", "in", "train", "]", "\n", "right_train", "=", "[", "filepath", "+", "right_fold", "+", "img", "for", "img", "in", "train", "]", "\n", "disp_train_L", "=", "[", "filepath", "+", "disp_L", "+", "img", "for", "img", "in", "train", "]", "\n", "#disp_train_R = [filepath+disp_R+img for img in train]", "\n", "\n", "left_val", "=", "[", "filepath", "+", "left_fold", "+", "img", "for", "img", "in", "val", "]", "\n", "right_val", "=", "[", "filepath", "+", "right_fold", "+", "img", "for", "img", "in", "val", "]", "\n", "disp_val_L", "=", "[", "filepath", "+", "disp_L", "+", "img", "for", "img", "in", "val", "]", "\n", "#disp_val_R = [filepath+disp_R+img for img in val]", "\n", "\n", "return", "left_train", ",", "right_train", ",", "disp_train_L", ",", "left_val", ",", "right_val", ",", "disp_val_L", "\n", "", ""]], "home.repos.pwc.inspect_result.zwxu064_RANP.dataloader.KITTIloader2012.is_image_file": [[14, 16], ["any", "filename.endswith"], "function", ["None"], ["def", "is_image_file", "(", "filename", ")", ":", "\n", "    ", "return", "any", "(", "filename", ".", "endswith", "(", "extension", ")", "for", "extension", "in", "IMG_EXTENSIONS", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.dataloader.KITTIloader2012.dataloader": [[17, 38], ["os.listdir", "os.listdir", "img.find"], "function", ["None"], ["", "def", "dataloader", "(", "filepath", ")", ":", "\n", "\n", "  ", "left_fold", "=", "'colored_0/'", "\n", "right_fold", "=", "'colored_1/'", "\n", "disp_noc", "=", "'disp_occ/'", "\n", "\n", "image", "=", "[", "img", "for", "img", "in", "os", ".", "listdir", "(", "filepath", "+", "left_fold", ")", "if", "img", ".", "find", "(", "'_10'", ")", ">", "-", "1", "]", "\n", "\n", "train", "=", "image", "[", ":", "]", "\n", "val", "=", "image", "[", "160", ":", "]", "\n", "\n", "left_train", "=", "[", "filepath", "+", "left_fold", "+", "img", "for", "img", "in", "train", "]", "\n", "right_train", "=", "[", "filepath", "+", "right_fold", "+", "img", "for", "img", "in", "train", "]", "\n", "disp_train", "=", "[", "filepath", "+", "disp_noc", "+", "img", "for", "img", "in", "train", "]", "\n", "\n", "\n", "left_val", "=", "[", "filepath", "+", "left_fold", "+", "img", "for", "img", "in", "val", "]", "\n", "right_val", "=", "[", "filepath", "+", "right_fold", "+", "img", "for", "img", "in", "val", "]", "\n", "disp_val", "=", "[", "filepath", "+", "disp_noc", "+", "img", "for", "img", "in", "val", "]", "\n", "\n", "return", "left_train", ",", "right_train", ",", "disp_train", ",", "left_val", ",", "right_val", ",", "disp_val", "\n", "", ""]], "home.repos.pwc.inspect_result.zwxu064_RANP.dataloader.listflowfile.is_image_file": [[13, 15], ["any", "filename.endswith"], "function", ["None"], ["def", "is_image_file", "(", "filename", ")", ":", "\n", "    ", "return", "any", "(", "filename", ".", "endswith", "(", "extension", ")", "for", "extension", "in", "IMG_EXTENSIONS", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.dataloader.listflowfile.dataloader": [[16, 107], ["os.listdir", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "os.path.isdir", "os.path.isdir", "listflowfile.is_image_file", "listflowfile.is_image_file", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "os.path.join", "os.path.join", "dsp.find", "all_left_img.append", "all_left_disp.append", "all_right_img.append", "listflowfile.is_image_file", "all_left_disp.append", "listflowfile.is_image_file", "listflowfile.is_image_file", "test_left_disp.append", "listflowfile.is_image_file", "os.listdir", "os.listdir", "img.find", "img.find", "img.find", "all_left_img.append", "all_right_img.append", "test_left_img.append", "test_right_img.append", "listflowfile.is_image_file", "all_left_disp.append", "listflowfile.is_image_file", "all_left_img.append", "all_right_img.append", "im.split", "im.split", "im.split", "im.split"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.dataloader.listflowfile.is_image_file", "home.repos.pwc.inspect_result.zwxu064_RANP.dataloader.listflowfile.is_image_file", "home.repos.pwc.inspect_result.zwxu064_RANP.dataloader.listflowfile.is_image_file", "home.repos.pwc.inspect_result.zwxu064_RANP.dataloader.listflowfile.is_image_file", "home.repos.pwc.inspect_result.zwxu064_RANP.dataloader.listflowfile.is_image_file", "home.repos.pwc.inspect_result.zwxu064_RANP.dataloader.listflowfile.is_image_file", "home.repos.pwc.inspect_result.zwxu064_RANP.dataloader.listflowfile.is_image_file", "home.repos.pwc.inspect_result.zwxu064_RANP.dataloader.listflowfile.is_image_file"], ["", "def", "dataloader", "(", "filepath", ")", ":", "\n", "\n", " ", "img_list", "=", "[", "'frames_cleanpass_driving'", ",", "'frames_cleanpass_flying'", ",", "'frames_cleanpass_monkaa'", "]", "\n", "classes", "=", "[", "d", "for", "d", "in", "os", ".", "listdir", "(", "filepath", ")", "if", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "join", "(", "filepath", ",", "d", ")", ")", "]", "\n", "image", "=", "[", "img", "for", "img", "in", "classes", "if", "(", "(", "img", ".", "find", "(", "img_list", "[", "0", "]", ")", ">", "-", "1", ")", "or", "(", "img", ".", "find", "(", "img_list", "[", "1", "]", ")", ">", "-", "1", ")", "or", "(", "img", ".", "find", "(", "img_list", "[", "2", "]", ")", ">", "-", "1", ")", ")", "]", "\n", "disp", "=", "[", "dsp", "for", "dsp", "in", "classes", "if", "dsp", ".", "find", "(", "'disparity'", ")", ">", "-", "1", "]", "\n", "\n", "monkaa_path", "=", "filepath", "+", "[", "x", "for", "x", "in", "image", "if", "'monkaa'", "in", "x", "]", "[", "0", "]", "\n", "monkaa_disp", "=", "filepath", "+", "[", "x", "for", "x", "in", "disp", "if", "'monkaa'", "in", "x", "]", "[", "0", "]", "\n", "\n", "\n", "monkaa_dir", "=", "os", ".", "listdir", "(", "monkaa_path", ")", "\n", "\n", "all_left_img", "=", "[", "]", "\n", "all_right_img", "=", "[", "]", "\n", "all_left_disp", "=", "[", "]", "\n", "test_left_img", "=", "[", "]", "\n", "test_right_img", "=", "[", "]", "\n", "test_left_disp", "=", "[", "]", "\n", "\n", "\n", "for", "dd", "in", "monkaa_dir", ":", "\n", "   ", "for", "im", "in", "os", ".", "listdir", "(", "monkaa_path", "+", "'/'", "+", "dd", "+", "'/left/'", ")", ":", "\n", "    ", "if", "is_image_file", "(", "monkaa_path", "+", "'/'", "+", "dd", "+", "'/left/'", "+", "im", ")", ":", "\n", "     ", "all_left_img", ".", "append", "(", "monkaa_path", "+", "'/'", "+", "dd", "+", "'/left/'", "+", "im", ")", "\n", "all_left_disp", ".", "append", "(", "monkaa_disp", "+", "'/'", "+", "dd", "+", "'/left/'", "+", "im", ".", "split", "(", "\".\"", ")", "[", "0", "]", "+", "'.pfm'", ")", "\n", "\n", "", "", "for", "im", "in", "os", ".", "listdir", "(", "monkaa_path", "+", "'/'", "+", "dd", "+", "'/right/'", ")", ":", "\n", "    ", "if", "is_image_file", "(", "monkaa_path", "+", "'/'", "+", "dd", "+", "'/right/'", "+", "im", ")", ":", "\n", "     ", "all_right_img", ".", "append", "(", "monkaa_path", "+", "'/'", "+", "dd", "+", "'/right/'", "+", "im", ")", "\n", "\n", "", "", "", "flying_path", "=", "filepath", "+", "[", "x", "for", "x", "in", "image", "if", "'flying'", "in", "x", "]", "[", "0", "]", "\n", "flying_disp", "=", "filepath", "+", "[", "x", "for", "x", "in", "disp", "if", "'flying'", "in", "x", "]", "[", "0", "]", "\n", "flying_dir", "=", "flying_path", "+", "'/TRAIN/'", "\n", "subdir", "=", "[", "'A'", ",", "'B'", ",", "'C'", "]", "\n", "\n", "for", "ss", "in", "subdir", ":", "\n", "    ", "flying", "=", "os", ".", "listdir", "(", "flying_dir", "+", "ss", ")", "\n", "\n", "for", "ff", "in", "flying", ":", "\n", "      ", "imm_l", "=", "os", ".", "listdir", "(", "flying_dir", "+", "ss", "+", "'/'", "+", "ff", "+", "'/left/'", ")", "\n", "for", "im", "in", "imm_l", ":", "\n", "       ", "if", "is_image_file", "(", "flying_dir", "+", "ss", "+", "'/'", "+", "ff", "+", "'/left/'", "+", "im", ")", ":", "\n", "         ", "all_left_img", ".", "append", "(", "flying_dir", "+", "ss", "+", "'/'", "+", "ff", "+", "'/left/'", "+", "im", ")", "\n", "\n", "", "all_left_disp", ".", "append", "(", "flying_disp", "+", "'/TRAIN/'", "+", "ss", "+", "'/'", "+", "ff", "+", "'/left/'", "+", "im", ".", "split", "(", "\".\"", ")", "[", "0", "]", "+", "'.pfm'", ")", "\n", "\n", "if", "is_image_file", "(", "flying_dir", "+", "ss", "+", "'/'", "+", "ff", "+", "'/right/'", "+", "im", ")", ":", "\n", "         ", "all_right_img", ".", "append", "(", "flying_dir", "+", "ss", "+", "'/'", "+", "ff", "+", "'/right/'", "+", "im", ")", "\n", "\n", "", "", "", "", "flying_dir", "=", "flying_path", "+", "'/TEST/'", "\n", "\n", "subdir", "=", "[", "'A'", ",", "'B'", ",", "'C'", "]", "\n", "\n", "for", "ss", "in", "subdir", ":", "\n", "    ", "flying", "=", "os", ".", "listdir", "(", "flying_dir", "+", "ss", ")", "\n", "\n", "for", "ff", "in", "flying", ":", "\n", "      ", "imm_l", "=", "os", ".", "listdir", "(", "flying_dir", "+", "ss", "+", "'/'", "+", "ff", "+", "'/left/'", ")", "\n", "for", "im", "in", "imm_l", ":", "\n", "       ", "if", "is_image_file", "(", "flying_dir", "+", "ss", "+", "'/'", "+", "ff", "+", "'/left/'", "+", "im", ")", ":", "\n", "         ", "test_left_img", ".", "append", "(", "flying_dir", "+", "ss", "+", "'/'", "+", "ff", "+", "'/left/'", "+", "im", ")", "\n", "\n", "", "test_left_disp", ".", "append", "(", "flying_disp", "+", "'/TEST/'", "+", "ss", "+", "'/'", "+", "ff", "+", "'/left/'", "+", "im", ".", "split", "(", "\".\"", ")", "[", "0", "]", "+", "'.pfm'", ")", "\n", "\n", "if", "is_image_file", "(", "flying_dir", "+", "ss", "+", "'/'", "+", "ff", "+", "'/right/'", "+", "im", ")", ":", "\n", "         ", "test_right_img", ".", "append", "(", "flying_dir", "+", "ss", "+", "'/'", "+", "ff", "+", "'/right/'", "+", "im", ")", "\n", "\n", "\n", "\n", "", "", "", "", "driving_dir", "=", "filepath", "+", "[", "x", "for", "x", "in", "image", "if", "'driving'", "in", "x", "]", "[", "0", "]", "+", "'/'", "\n", "driving_disp", "=", "filepath", "+", "[", "x", "for", "x", "in", "disp", "if", "'driving'", "in", "x", "]", "[", "0", "]", "\n", "\n", "subdir1", "=", "[", "'35mm_focallength'", ",", "'15mm_focallength'", "]", "\n", "subdir2", "=", "[", "'scene_backwards'", ",", "'scene_forwards'", "]", "\n", "subdir3", "=", "[", "'fast'", ",", "'slow'", "]", "\n", "\n", "for", "i", "in", "subdir1", ":", "\n", "   ", "for", "j", "in", "subdir2", ":", "\n", "    ", "for", "k", "in", "subdir3", ":", "\n", "        ", "imm_l", "=", "os", ".", "listdir", "(", "driving_dir", "+", "i", "+", "'/'", "+", "j", "+", "'/'", "+", "k", "+", "'/left/'", ")", "\n", "for", "im", "in", "imm_l", ":", "\n", "          ", "if", "is_image_file", "(", "driving_dir", "+", "i", "+", "'/'", "+", "j", "+", "'/'", "+", "k", "+", "'/left/'", "+", "im", ")", ":", "\n", "            ", "all_left_img", ".", "append", "(", "driving_dir", "+", "i", "+", "'/'", "+", "j", "+", "'/'", "+", "k", "+", "'/left/'", "+", "im", ")", "\n", "", "all_left_disp", ".", "append", "(", "driving_disp", "+", "'/'", "+", "i", "+", "'/'", "+", "j", "+", "'/'", "+", "k", "+", "'/left/'", "+", "im", ".", "split", "(", "\".\"", ")", "[", "0", "]", "+", "'.pfm'", ")", "\n", "\n", "if", "is_image_file", "(", "driving_dir", "+", "i", "+", "'/'", "+", "j", "+", "'/'", "+", "k", "+", "'/right/'", "+", "im", ")", ":", "\n", "            ", "all_right_img", ".", "append", "(", "driving_dir", "+", "i", "+", "'/'", "+", "j", "+", "'/'", "+", "k", "+", "'/right/'", "+", "im", ")", "\n", "\n", "\n", "", "", "", "", "", "return", "all_left_img", ",", "all_right_img", ",", "all_left_disp", ",", "test_left_img", ",", "test_right_img", ",", "test_left_disp", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_NvNet.main.main": [[57, 124], ["print", "nvnet.NvNet", "model.cuda.parameters", "torch.optim.Adam", "print", "dataset.BratsDataset", "dataset.BratsDataset", "utils.Logger", "torch.optim.lr_scheduler.ReduceLROnPlateau", "print", "range", "metrics.CombinedLoss", "metrics.SoftDiceLoss", "model.cuda.cuda", "loss_function.cuda.cuda", "utils.load_old_model", "train_shapenet.train_epoch", "validation.val_epoch", "lr_scheduler.ReduceLROnPlateau.step", "os.path.exists", "Exception", "os.path.join", "os.path.join", "torch.save", "os.path.join", "os.path.exists", "torch.save", "os.path.exists", "os.makedirs", "model.cuda.state_dict", "optim.Adam.state_dict", "os.system", "[].split", "config[].split"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_NvNet.utils.load_old_model", "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_NvNet.train.train_epoch", "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_NvNet.validation.val_epoch"], ["        ", "criterion", "=", "criterion", ".", "cuda", "(", ")", "\n", "\n", "", "if", "opt", ".", "no_mean_norm", "and", "not", "opt", ".", "std_norm", ":", "\n", "        ", "norm_method", "=", "Normalize", "(", "[", "0", ",", "0", ",", "0", "]", ",", "[", "1", ",", "1", ",", "1", "]", ")", "\n", "", "elif", "not", "opt", ".", "std_norm", ":", "\n", "        ", "norm_method", "=", "Normalize", "(", "opt", ".", "mean", ",", "[", "1", ",", "1", ",", "1", "]", ")", "\n", "", "else", ":", "\n", "        ", "norm_method", "=", "Normalize", "(", "opt", ".", "mean", ",", "opt", ".", "std", ")", "\n", "\n", "", "if", "not", "opt", ".", "no_train", ":", "\n", "        ", "assert", "opt", ".", "train_crop", "in", "[", "'random'", ",", "'corner'", ",", "'center'", "]", "\n", "if", "opt", ".", "train_crop", "==", "'random'", ":", "\n", "            ", "crop_method", "=", "MultiScaleRandomCrop", "(", "opt", ".", "scales", ",", "opt", ".", "sample_size", ")", "\n", "", "elif", "opt", ".", "train_crop", "==", "'corner'", ":", "\n", "            ", "crop_method", "=", "MultiScaleCornerCrop", "(", "opt", ".", "scales", ",", "opt", ".", "sample_size", ")", "\n", "", "elif", "opt", ".", "train_crop", "==", "'center'", ":", "\n", "            ", "crop_method", "=", "MultiScaleCornerCrop", "(", "\n", "opt", ".", "scales", ",", "opt", ".", "sample_size", ",", "crop_positions", "=", "[", "'c'", "]", ")", "\n", "", "spatial_transform", "=", "Compose", "(", "[", "\n", "RandomHorizontalFlip", "(", ")", ",", "\n", "#RandomRotate(),", "\n", "#RandomResize(),", "\n", "crop_method", ",", "\n", "#MultiplyValues(),", "\n", "#Dropout(),", "\n", "#SaltImage(),", "\n", "#Gaussian_blur(),", "\n", "#SpatialElasticDisplacement(),", "\n", "ToTensor", "(", "opt", ".", "norm_value", ")", ",", "norm_method", "\n", "]", ")", "\n", "temporal_transform", "=", "TemporalRandomCrop", "(", "opt", ".", "sample_duration", ",", "opt", ".", "downsample", ")", "\n", "target_transform", "=", "ClassLabel", "(", ")", "\n", "training_data", "=", "get_training_set", "(", "opt", ",", "spatial_transform", ",", "\n", "temporal_transform", ",", "target_transform", ")", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "training_data", ",", "\n", "batch_size", "=", "opt", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "opt", ".", "n_threads", ",", "\n", "pin_memory", "=", "True", ")", "\n", "train_logger", "=", "Logger", "(", "\n", "os", ".", "path", ".", "join", "(", "opt", ".", "result_path", ",", "'train.log'", ")", ",", "\n", "[", "'epoch'", ",", "'loss'", ",", "'prec1'", ",", "'prec5'", ",", "'lr'", "]", ")", "\n", "train_batch_logger", "=", "Logger", "(", "\n", "os", ".", "path", ".", "join", "(", "opt", ".", "result_path", ",", "'train_batch.log'", ")", ",", "\n", "[", "'epoch'", ",", "'batch'", ",", "'iter'", ",", "'loss'", ",", "'prec1'", ",", "'prec5'", ",", "'lr'", "]", ")", "\n", "\n", "if", "opt", ".", "nesterov", ":", "\n", "            ", "dampening", "=", "0", "\n", "", "else", ":", "\n", "            ", "dampening", "=", "opt", ".", "dampening", "\n", "", "optimizer", "=", "optim", ".", "SGD", "(", "\n", "parameters", ",", "\n", "lr", "=", "opt", ".", "learning_rate", ",", "\n", "momentum", "=", "opt", ".", "momentum", ",", "\n", "dampening", "=", "dampening", ",", "\n", "weight_decay", "=", "opt", ".", "weight_decay", ",", "\n", "nesterov", "=", "opt", ".", "nesterov", ")", "\n", "scheduler", "=", "lr_scheduler", ".", "ReduceLROnPlateau", "(", "\n", "optimizer", ",", "'min'", ",", "patience", "=", "opt", ".", "lr_patience", ")", "\n", "", "if", "not", "opt", ".", "no_val", ":", "\n", "        ", "spatial_transform", "=", "Compose", "(", "[", "\n", "Scale", "(", "opt", ".", "sample_size", ")", ",", "\n", "CenterCrop", "(", "opt", ".", "sample_size", ")", ",", "\n", "ToTensor", "(", "opt", ".", "norm_value", ")", ",", "norm_method", "\n", "]", ")", "\n", "#temporal_transform = LoopPadding(opt.sample_duration)", "\n", "temporal_transform", "=", "TemporalCenterCrop", "(", "opt", ".", "sample_duration", ",", "opt", ".", "downsample", ")", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_NvNet.predict.init_model_from_states": [[23, 44], ["print", "nvnet.NvNet", "torch.load", "model.cuda.cuda", "model.cuda.load_state_dict", "OrderedDict", "state_dict.items", "model.cuda.load_state_dict"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.data.load"], ["from", "data", ".", "data_utils", "import", "add_mask", "\n", "from", "utils", "import", "Parser", "\n", "\n", "path", "=", "os", ".", "path", ".", "dirname", "(", "__file__", ")", "\n", "\n", "def", "calculate_metrics", "(", "pred", ",", "target", ")", ":", "\n", "    ", "sens", "=", "metric", ".", "sensitivity", "(", "pred", ",", "target", ")", "\n", "spec", "=", "metric", ".", "specificity", "(", "pred", ",", "target", ")", "\n", "dice", "=", "metric", ".", "dc", "(", "pred", ",", "target", ")", "\n", "\n", "", "eps", "=", "1e-5", "\n", "def", "f1_score", "(", "o", ",", "t", ")", ":", "\n", "    ", "num", "=", "2", "*", "(", "o", "*", "t", ")", ".", "sum", "(", ")", "+", "eps", "\n", "den", "=", "o", ".", "sum", "(", ")", "+", "t", ".", "sum", "(", ")", "+", "eps", "\n", "return", "num", "/", "den", "\n", "\n", "#https://github.com/ellisdg/3DUnetCNN", "\n", "#https://github.com/ellisdg/3DUnetCNN/blob/master/brats/evaluate.py", "\n", "#https://github.com/MIC-DKFZ/BraTS2017/blob/master/utils_validation.py", "\n", "", "def", "dice", "(", "output", ",", "target", ")", ":", "\n", "    ", "ret", "=", "[", "]", "\n", "# whole", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_NvNet.predict.predict": [[46, 77], ["print", "model.eval", "tables.open_file", "range", "tables.open_file.close", "len", "numpy.asarray", "nibabel.Nifti1Image", "nib.Nifti1Image.to_filename", "os.path.join", "os.path.join", "numpy.asarray", "torch.from_numpy", "inputs.cuda.type", "inputs.cuda.cuda", "torch.no_grad", "model.tolist", "os.path.join", "tables.open_file.root.subject_ids[].decode", "model", "model", "str"], "function", ["None"], ["ret", "+=", "f1_score", "(", "o", ",", "t", ")", ",", "\n", "# core", "\n", "o", "=", "(", "output", "==", "1", ")", "|", "(", "output", "==", "4", ")", "\n", "t", "=", "(", "target", "==", "1", ")", "|", "(", "target", "==", "4", ")", "\n", "ret", "+=", "f1_score", "(", "o", ",", "t", ")", ",", "\n", "# active", "\n", "o", "=", "(", "output", "==", "4", ")", ";", "t", "=", "(", "target", "==", "4", ")", "\n", "ret", "+=", "f1_score", "(", "o", ",", "t", ")", ",", "\n", "\n", "return", "ret", "\n", "\n", "", "keys", "=", "'whole'", ",", "'core'", ",", "'enhancing'", ",", "'loss'", "\n", "def", "main", "(", ")", ":", "\n", "    ", "ckpts", "=", "args", ".", "getdir", "(", ")", "\n", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", "=", "args", ".", "gpu", "\n", "# setup networks", "\n", "Network", "=", "getattr", "(", "models", ",", "args", ".", "net", ")", "\n", "model", "=", "Network", "(", "**", "args", ".", "net_params", ")", "\n", "model", "=", "model", ".", "cuda", "(", ")", "\n", "\n", "model_file", "=", "os", ".", "path", ".", "join", "(", "ckpts", ",", "args", ".", "ckpt", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "model_file", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "\n", "Dataset", "=", "getattr", "(", "datasets", ",", "args", ".", "dataset", ")", "\n", "\n", "valid_list", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data_dir", ",", "args", ".", "valid_list", ")", "\n", "valid_set", "=", "Dataset", "(", "valid_list", ",", "root", "=", "args", ".", "data_dir", ",", "\n", "for_train", "=", "False", ",", "crop", "=", "False", ",", "return_target", "=", "args", ".", "scoring", ",", "\n", "transforms", "=", "args", ".", "test_transforms", ",", "\n", "sample_size", "=", "args", ".", "sample_size", ",", "sub_sample_size", "=", "args", ".", "sub_sample_size", ",", "\n", "target_size", "=", "args", ".", "target_size", ")", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_NvNet.metrics.SoftDiceLoss.__init__": [[15, 17], ["torch.nn.modules.loss._Loss.__init__"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.StereoLoss.__init__"], ["\n", "class", "DiceCoefficient", ":", "\n", "    "]], "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_NvNet.metrics.SoftDiceLoss.forward": [[18, 26], ["torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul"], "methods", ["None"], ["\n", "\n", "def", "__init__", "(", "self", ",", "epsilon", "=", "1e-5", ",", "ignore_index", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "epsilon", "=", "epsilon", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_NvNet.metrics.CustomKLLoss.__init__": [[32, 34], ["torch.nn.modules.loss._Loss.__init__"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.StereoLoss.__init__"], ["\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_NvNet.metrics.CustomKLLoss.forward": [[35, 37], ["torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.log", "torch.log", "torch.log", "torch.log", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_NvNet.utils.Logger.log", "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_NvNet.utils.Logger.log", "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_NvNet.utils.Logger.log", "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_NvNet.utils.Logger.log"], ["# Average across channels in order to get the final score", "\n", "return", "torch", ".", "mean", "(", "compute_per_channel_dice", "(", "input", ",", "target", ",", "epsilon", "=", "self", ".", "epsilon", ",", "ignore_index", "=", "self", ".", "ignore_index", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_NvNet.metrics.CombinedLoss.__init__": [[43, 50], ["torch.nn.modules.loss._Loss.__init__", "metrics.SoftDiceLoss", "torch.MSELoss", "torch.MSELoss", "metrics.CustomKLLoss"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.StereoLoss.__init__"], ["\n", "def", "__init__", "(", "self", ",", "skip_channels", "=", "(", ")", ",", "ignore_index", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        :param skip_channels: list/tuple of channels to be ignored from the IoU computation\n        :param ignore_index: id of the label to be ignored from IoU computation\n        \"\"\"", "\n", "self", ".", "ignore_index", "=", "ignore_index", "\n", "self", ".", "skip_channels", "=", "skip_channels", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_NvNet.metrics.CombinedLoss.forward": [[51, 62], ["metrics.CombinedLoss.dice_loss", "metrics.CombinedLoss.l2_loss", "metrics.CombinedLoss.kl_loss"], "methods", ["None"], ["\n", "", "def", "__call__", "(", "self", ",", "input", ",", "target", ")", ":", "\n", "        ", "\"\"\"\n        :param input: 5D probability maps torch float tensor (NxCxDxHxW)\n        :param target: 4D or 5D ground truth torch tensor. 4D (NxDxHxW) tensor will be expanded to 5D as one-hot\n        :return: intersection over union averaged over all channels\n        \"\"\"", "\n", "assert", "input", ".", "dim", "(", ")", "==", "5", "\n", "\n", "n_classes", "=", "input", ".", "size", "(", ")", "[", "1", "]", "\n", "if", "target", ".", "dim", "(", ")", "==", "4", ":", "\n", "            ", "target", "=", "expand_as_one_hot", "(", "target", ",", "C", "=", "n_classes", ",", "ignore_index", "=", "self", ".", "ignore_index", ")", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_NvNet.train.train_epoch": [[13, 59], ["print", "model.train", "utils.AverageMeter", "utils.AverageMeter", "data_set.file_open", "torch.utils.data.DataLoader", "tqdm.tqdm", "enumerate", "logger.log", "data_set.file_close", "utils.calculate_accuracy", "utils.AverageMeter.update", "utils.AverageMeter.update", "optimizer.zero_grad", "criterion.backward", "optimizer.step", "tqdm.tqdm.set_description", "inputs.cuda.type", "inputs.cuda.cuda", "targets.cuda.type", "targets.cuda.cuda", "model", "criterion", "model", "criterion", "model.cpu", "targets.cuda.cpu", "criterion.cpu", "inputs.cuda.size", "inputs.cuda.size", "format", "format", "utils.AverageMeter.avg.item", "utils.AverageMeter.avg.item", "utils.AverageMeter.avg.item", "utils.AverageMeter.avg.item"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.data.train", "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_NvNet.dataset.BratsDataset.file_open", "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_NvNet.utils.Logger.log", "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_NvNet.dataset.BratsDataset.file_close", "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_NvNet.utils.calculate_accuracy", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.AverageMeter.update", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.AverageMeter.update"], ["from", "dataloader", "import", "*", "\n", "from", "prune", "import", "*", "\n", "from", "prune_utils", "import", "*", "\n", "from", "flops", "import", "*", "\n", "from", "snip", "import", "SNIP", "\n", "\n", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", "=", "'2'", "\n", "device", "=", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", "\n", "\n", "\n", "def", "parse_arguments", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "# Data options", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "type", "=", "str", ",", "default", "=", "'mnist'", ",", "help", "=", "'dataset to use'", ")", "\n", "# Model options", "\n", "parser", ".", "add_argument", "(", "'--network'", ",", "type", "=", "str", ",", "default", "=", "'lenet5'", ",", "help", "=", "'network architecture to use'", ")", "\n", "parser", ".", "add_argument", "(", "'--param_sparsity'", ",", "type", "=", "float", ",", "default", "=", "0.9", ",", "help", "=", "'level of param sparsity to achieve'", ")", "\n", "parser", ".", "add_argument", "(", "'--neuron_sparsity'", ",", "type", "=", "float", ",", "default", "=", "0.9", ",", "help", "=", "'level of neuron sparsity to achieve'", ")", "\n", "parser", ".", "add_argument", "(", "'--channel_sparsity'", ",", "type", "=", "float", ",", "default", "=", "0.9", ",", "help", "=", "'level of channel sparsity to achieve'", ")", "\n", "# Train options", "\n", "parser", ".", "add_argument", "(", "'--batch'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'number of examples per mini-batch'", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "type", "=", "int", ",", "default", "=", "250", ",", "help", "=", "'number of training epochs'", ")", "\n", "parser", ".", "add_argument", "(", "'--optimizer'", ",", "type", "=", "str", ",", "default", "=", "'momentum'", ",", "help", "=", "'optimizer of choice'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_decay_ratio'", ",", "type", "=", "float", ",", "default", "=", "0.1", ",", "help", "=", "'learning rate decay ratio'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_decay_step'", ",", "type", "=", "int", ",", "default", "=", "25e3", ",", "help", "=", "'learning rate decay step'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "1e-1", ",", "help", "=", "'initial learning rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--weight_decay'", ",", "type", "=", "float", ",", "default", "=", "5e-4", ",", "help", "=", "'weight decay ratio'", ")", "\n", "parser", ".", "add_argument", "(", "'--log_interval'", ",", "type", "=", "int", ",", "default", "=", "20", ",", "help", "=", "'log saving frequency'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed_list'", ",", "nargs", "=", "'+'", ",", "default", "=", "0", ",", "help", "=", "'seeds'", ")", "\n", "parser", ".", "add_argument", "(", "'--relative_dir'", ",", "type", "=", "str", ",", "default", "=", "'.'", ",", "help", "=", "'relative directory'", ")", "\n", "parser", ".", "add_argument", "(", "'--weight_init'", ",", "type", "=", "str", ",", "default", "=", "'xn'", ",", "help", "=", "'xn, xu, kn, ku, orthogonal'", ")", "\n", "parser", ".", "add_argument", "(", "'--checkpoint_dir'", ",", "type", "=", "str", ",", "default", "=", "'checkpoint'", ",", "help", "=", "'save model dir'", ")", "\n", "parser", ".", "add_argument", "(", "'--resume_epoch'", ",", "type", "=", "int", ",", "default", "=", "'0'", ",", "help", "=", "'resume model'", ")", "\n", "# Operations", "\n", "parser", ".", "add_argument", "(", "'--enable_flops'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "help", "=", "'enable flops'", ")", "\n", "parser", ".", "add_argument", "(", "'--enable_bias'", ",", "action", "=", "'store_true'", ",", "default", "=", "True", ",", "help", "=", "'enable bias'", ")", "\n", "parser", ".", "add_argument", "(", "'--enable_dump'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "help", "=", "'dump for MatLab'", ")", "\n", "parser", ".", "add_argument", "(", "'--enable_param_prune'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "help", "=", "'prune params'", ")", "\n", "parser", ".", "add_argument", "(", "'--enable_neuron_prune'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "help", "=", "'prune neurons'", ")", "\n", "parser", ".", "add_argument", "(", "'--enable_channel_prune'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "help", "=", "'prune channels'", ")", "\n", "parser", ".", "add_argument", "(", "'--enable_dump_features'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "help", "=", "'dump features'", ")", "\n", "# For channel prune options", "\n", "parser", ".", "add_argument", "(", "'--acc_mode'", ",", "type", "=", "str", ",", "default", "=", "'mean'", ",", "help", "=", "'accumulation for importance of a channel'", ")", "\n", "parser", ".", "add_argument", "(", "'--norm'", ",", "type", "=", "str", ",", "default", "=", "'max'", ",", "help", "=", "'normalization over grads'", ")", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_NvNet.dataset.BratsDataset.__init__": [[97, 113], ["torch.utils.data.Dataset.__init__", "utils.pickle_load"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.StereoLoss.__init__", "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_NvNet.utils.pickle_load"], ["0", ",", "\n", "spatial_transform", ",", "\n", "temporal_transform", ",", "\n", "target_transform", ",", "\n", "sample_duration", "=", "opt", ".", "sample_duration", ")", "\n", "", "elif", "opt", ".", "dataset", "==", "'ucf101'", ":", "\n", "        ", "test_data", "=", "UCF101", "(", "\n", "opt", ".", "video_path", ",", "\n", "opt", ".", "annotation_path", ",", "\n", "subset", ",", "\n", "0", ",", "\n", "spatial_transform", ",", "\n", "temporal_transform", ",", "\n", "target_transform", ",", "\n", "sample_duration", "=", "opt", ".", "sample_duration", ")", "\n", "", "return", "test_data", "\n", "", ""]], "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_NvNet.dataset.BratsDataset.file_open": [[114, 117], ["dataset.open_data_file"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_NvNet.dataset.open_data_file"], []], "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_NvNet.dataset.BratsDataset.file_close": [[118, 122], ["dataset.BratsDataset.data_file.close"], "methods", ["None"], []], "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_NvNet.dataset.BratsDataset.get_affine": [[123, 125], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_NvNet.dataset.BratsDataset.__getitem__": [[126, 173], ["dataset.get_target_label", "len", "list", "range", "numpy.asarray", "nibabel.Nifti1Image", "nilearn.image.resample_to_img().get_data", "nibabel.Nifti1Image", "list.append", "len", "numpy.concatenate", "dataset.random_flip_dimensions", "nilearn.image.resample_to_img().get_data", "nilearn.image.resample_to_img", "numpy.array", "numpy.random.random", "dataset.augment_image", "dataset.BratsDataset.data_file.root.subject_ids[].decode", "nilearn.image.resample_to_img", "str", "dataset.augment_image"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.Dataloader.data_augmentation.get_target_label", "home.repos.pwc.inspect_result.zwxu064_RANP.Dataloader.data_augmentation.random_flip_dimensions", "home.repos.pwc.inspect_result.zwxu064_RANP.Dataloader.data_augmentation.augment_image", "home.repos.pwc.inspect_result.zwxu064_RANP.Dataloader.data_augmentation.augment_image"], []], "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_NvNet.dataset.BratsDataset.__len__": [[174, 176], ["len"], "methods", ["None"], []], "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_NvNet.dataset.open_data_file": [[13, 15], ["tables.open_file"], "function", ["None"], ["temporal_transform", "=", "temporal_transform", ",", "\n", "target_transform", "=", "target_transform", ",", "\n", "sample_duration", "=", "opt", ".", "sample_duration", ")", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_NvNet.dataset.random_flip_dimensions": [[16, 23], ["list", "range", "numpy.random.choice", "list.append"], "function", ["None"], ["", "elif", "opt", ".", "dataset", "==", "'jester'", ":", "\n", "        ", "training_data", "=", "Jester", "(", "\n", "opt", ".", "video_path", ",", "\n", "opt", ".", "annotation_path", ",", "\n", "'training'", ",", "\n", "spatial_transform", "=", "spatial_transform", ",", "\n", "temporal_transform", "=", "temporal_transform", ",", "\n", "target_transform", "=", "target_transform", ",", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_NvNet.dataset.flip_image": [[24, 33], ["nilearn.image.new_img_like", "numpy.copy", "image.get_data", "numpy.flip", "numpy.flip", "image.get_data"], "function", ["None"], ["sample_duration", "=", "opt", ".", "sample_duration", ")", "\n", "", "elif", "opt", ".", "dataset", "==", "'ucf101'", ":", "\n", "        ", "training_data", "=", "UCF101", "(", "\n", "opt", ".", "video_path", ",", "\n", "opt", ".", "annotation_path", ",", "\n", "'training'", ",", "\n", "spatial_transform", "=", "spatial_transform", ",", "\n", "temporal_transform", "=", "temporal_transform", ",", "\n", "target_transform", "=", "target_transform", ",", "\n", "sample_duration", "=", "opt", ".", "sample_duration", ")", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_NvNet.dataset.offset_image": [[34, 69], ["image.get_data", "numpy.zeros", "nilearn.image.new_img_like", "len", "len", "len", "int", "int", "int", "slice", "slice", "slice", "slice", "slice", "slice", "slice", "slice", "slice", "slice", "slice", "slice"], "function", ["None"], ["", "return", "training_data", "\n", "\n", "\n", "", "def", "get_validation_set", "(", "opt", ",", "spatial_transform", ",", "temporal_transform", ",", "\n", "target_transform", ")", ":", "\n", "    ", "assert", "opt", ".", "dataset", "in", "[", "'kinetics'", ",", "'jester'", ",", "'ucf101'", "]", "\n", "\n", "if", "opt", ".", "dataset", "==", "'kinetics'", ":", "\n", "        ", "validation_data", "=", "Kinetics", "(", "\n", "opt", ".", "video_path", ",", "\n", "opt", ".", "annotation_path", ",", "\n", "'validation'", ",", "\n", "opt", ".", "n_val_samples", ",", "\n", "spatial_transform", ",", "\n", "temporal_transform", ",", "\n", "target_transform", ",", "\n", "sample_duration", "=", "opt", ".", "sample_duration", ")", "\n", "", "elif", "opt", ".", "dataset", "==", "'jester'", ":", "\n", "        ", "validation_data", "=", "Jester", "(", "\n", "opt", ".", "video_path", ",", "\n", "opt", ".", "annotation_path", ",", "\n", "'validation'", ",", "\n", "opt", ".", "n_val_samples", ",", "\n", "spatial_transform", ",", "\n", "temporal_transform", ",", "\n", "target_transform", ",", "\n", "sample_duration", "=", "opt", ".", "sample_duration", ")", "\n", "", "elif", "opt", ".", "dataset", "==", "'ucf101'", ":", "\n", "        ", "validation_data", "=", "UCF101", "(", "\n", "opt", ".", "video_path", ",", "\n", "opt", ".", "annotation_path", ",", "\n", "'validation'", ",", "\n", "opt", ".", "n_val_samples", ",", "\n", "spatial_transform", ",", "\n", "temporal_transform", ",", "\n", "target_transform", ",", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_NvNet.dataset.augment_image": [[70, 77], ["dataset.flip_image", "dataset.offset_image"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.Dataloader.data_augmentation.flip_image", "home.repos.pwc.inspect_result.zwxu064_RANP.Dataloader.data_augmentation.offset_image"], ["sample_duration", "=", "opt", ".", "sample_duration", ")", "\n", "", "return", "validation_data", "\n", "\n", "\n", "", "def", "get_test_set", "(", "opt", ",", "spatial_transform", ",", "temporal_transform", ",", "target_transform", ")", ":", "\n", "    ", "assert", "opt", ".", "dataset", "in", "[", "'kinetics'", ",", "'jester'", ",", "'ucf101'", "]", "\n", "assert", "opt", ".", "test_subset", "in", "[", "'val'", ",", "'test'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_NvNet.dataset.get_target_label": [[78, 95], ["numpy.zeros", "range", "numpy.where", "numpy.where", "numpy.where", "numpy.where", "numpy.where"], "function", ["None"], ["if", "opt", ".", "test_subset", "==", "'val'", ":", "\n", "        ", "subset", "=", "'validation'", "\n", "", "elif", "opt", ".", "test_subset", "==", "'test'", ":", "\n", "        ", "subset", "=", "'testing'", "\n", "", "if", "opt", ".", "dataset", "==", "'kinetics'", ":", "\n", "        ", "test_data", "=", "Kinetics", "(", "\n", "opt", ".", "video_path", ",", "\n", "opt", ".", "annotation_path", ",", "\n", "subset", ",", "\n", "0", ",", "\n", "spatial_transform", ",", "\n", "temporal_transform", ",", "\n", "target_transform", ",", "\n", "sample_duration", "=", "opt", ".", "sample_duration", ")", "\n", "", "elif", "opt", ".", "dataset", "==", "'jester'", ":", "\n", "        ", "test_data", "=", "Jester", "(", "\n", "opt", ".", "video_path", ",", "\n", "opt", ".", "annotation_path", ",", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_NvNet.nvnet.DownSampling.__init__": [[12, 25], ["torch.Module.__init__", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Dropout3d", "torch.Dropout3d", "torch.Dropout3d"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.StereoLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inChans", ",", "outChans", ",", "stride", "=", "2", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "dropout_rate", "=", "None", ")", ":", "\n", "        ", "super", "(", "DownSampling", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "dropout_flag", "=", "False", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv3d", "(", "in_channels", "=", "inChans", ",", "\n", "out_channels", "=", "outChans", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "\n", "bias", "=", "False", ")", "\n", "if", "dropout_rate", "is", "not", "None", ":", "\n", "            ", "self", ".", "dropout_flag", "=", "True", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout3d", "(", "dropout_rate", ",", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_NvNet.nvnet.DownSampling.forward": [[26, 31], ["nvnet.DownSampling.conv1", "nvnet.DownSampling.dropout"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "if", "self", ".", "dropout_flag", ":", "\n", "            ", "out", "=", "self", ".", "dropout", "(", "out", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_NvNet.nvnet.EncoderBlock.__init__": [[36, 50], ["torch.Module.__init__", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.StereoLoss.__init__"], ["def", "__init__", "(", "self", ",", "inChans", ",", "outChans", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "num_groups", "=", "8", ",", "activation", "=", "\"relu\"", ",", "normalizaiton", "=", "\"group_normalization\"", ")", ":", "\n", "        ", "super", "(", "EncoderBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "normalizaiton", "==", "\"group_normalization\"", ":", "\n", "            ", "self", ".", "norm1", "=", "nn", ".", "GroupNorm", "(", "num_groups", "=", "num_groups", ",", "num_channels", "=", "inChans", ")", "\n", "self", ".", "norm2", "=", "nn", ".", "GroupNorm", "(", "num_groups", "=", "num_groups", ",", "num_channels", "=", "inChans", ")", "\n", "", "if", "activation", "==", "\"relu\"", ":", "\n", "            ", "self", ".", "actv1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "actv2", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "activation", "==", "\"elu\"", ":", "\n", "            ", "self", ".", "actv1", "=", "nn", ".", "ELU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "actv2", "=", "nn", ".", "ELU", "(", "inplace", "=", "True", ")", "\n", "", "self", ".", "conv1", "=", "nn", ".", "Conv3d", "(", "in_channels", "=", "inChans", ",", "out_channels", "=", "outChans", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv3d", "(", "in_channels", "=", "inChans", ",", "out_channels", "=", "outChans", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_NvNet.nvnet.EncoderBlock.forward": [[52, 65], ["nvnet.EncoderBlock.norm1", "nvnet.EncoderBlock.actv1", "nvnet.EncoderBlock.conv1", "nvnet.EncoderBlock.norm2", "nvnet.EncoderBlock.actv2", "nvnet.EncoderBlock.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "norm1", "(", "x", ")", "\n", "out", "=", "self", ".", "actv1", "(", "out", ")", "\n", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "out", "=", "self", ".", "norm2", "(", "out", ")", "\n", "out", "=", "self", ".", "actv2", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "\n", "out", "+=", "residual", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_NvNet.nvnet.LinearUpSampling.__init__": [[70, 77], ["torch.Module.__init__", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.StereoLoss.__init__"], ["def", "__init__", "(", "self", ",", "inChans", ",", "outChans", ",", "scale_factor", "=", "2", ",", "mode", "=", "\"trilinear\"", ",", "align_corners", "=", "True", ")", ":", "\n", "        ", "super", "(", "LinearUpSampling", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "scale_factor", "=", "scale_factor", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "align_corners", "=", "align_corners", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv3d", "(", "in_channels", "=", "inChans", ",", "out_channels", "=", "outChans", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv3d", "(", "in_channels", "=", "inChans", ",", "out_channels", "=", "outChans", ",", "kernel_size", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_NvNet.nvnet.LinearUpSampling.forward": [[78, 88], ["nvnet.LinearUpSampling.conv1", "torch.functional.interpolate", "torch.functional.interpolate", "torch.functional.interpolate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "nvnet.LinearUpSampling.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "skipx", "=", "None", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "# out = self.up1(out)", "\n", "out", "=", "nn", ".", "functional", ".", "interpolate", "(", "out", ",", "scale_factor", "=", "self", ".", "scale_factor", ",", "mode", "=", "self", ".", "mode", ",", "align_corners", "=", "self", ".", "align_corners", ")", "\n", "\n", "if", "skipx", "is", "not", "None", ":", "\n", "            ", "out", "=", "torch", ".", "cat", "(", "(", "out", ",", "skipx", ")", ",", "1", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_NvNet.nvnet.DecoderBlock.__init__": [[93, 107], ["torch.Module.__init__", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.StereoLoss.__init__"], ["def", "__init__", "(", "self", ",", "inChans", ",", "outChans", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "num_groups", "=", "8", ",", "activation", "=", "\"relu\"", ",", "normalizaiton", "=", "\"group_normalization\"", ")", ":", "\n", "        ", "super", "(", "DecoderBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "normalizaiton", "==", "\"group_normalization\"", ":", "\n", "            ", "self", ".", "norm1", "=", "nn", ".", "GroupNorm", "(", "num_groups", "=", "num_groups", ",", "num_channels", "=", "outChans", ")", "\n", "self", ".", "norm2", "=", "nn", ".", "GroupNorm", "(", "num_groups", "=", "num_groups", ",", "num_channels", "=", "outChans", ")", "\n", "", "if", "activation", "==", "\"relu\"", ":", "\n", "            ", "self", ".", "actv1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "actv2", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "activation", "==", "\"elu\"", ":", "\n", "            ", "self", ".", "actv1", "=", "nn", ".", "ELU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "actv2", "=", "nn", ".", "ELU", "(", "inplace", "=", "True", ")", "\n", "", "self", ".", "conv1", "=", "nn", ".", "Conv3d", "(", "in_channels", "=", "inChans", ",", "out_channels", "=", "outChans", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv3d", "(", "in_channels", "=", "outChans", ",", "out_channels", "=", "outChans", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_NvNet.nvnet.DecoderBlock.forward": [[109, 122], ["nvnet.DecoderBlock.norm1", "nvnet.DecoderBlock.actv1", "nvnet.DecoderBlock.conv1", "nvnet.DecoderBlock.norm2", "nvnet.DecoderBlock.actv2", "nvnet.DecoderBlock.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "norm1", "(", "x", ")", "\n", "out", "=", "self", ".", "actv1", "(", "out", ")", "\n", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "out", "=", "self", ".", "norm2", "(", "out", ")", "\n", "out", "=", "self", ".", "actv2", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "\n", "out", "+=", "residual", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_NvNet.nvnet.OutputTransition.__init__": [[128, 133], ["torch.Module.__init__", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.StereoLoss.__init__"], ["def", "__init__", "(", "self", ",", "inChans", ",", "outChans", ")", ":", "\n", "        ", "super", "(", "OutputTransition", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv3d", "(", "in_channels", "=", "inChans", ",", "out_channels", "=", "outChans", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "actv1", "=", "torch", ".", "sigmoid", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_NvNet.nvnet.OutputTransition.forward": [[134, 136], ["nvnet.OutputTransition.actv1", "nvnet.OutputTransition.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "actv1", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_NvNet.nvnet.VDResampling.__init__": [[141, 158], ["torch.Module.__init__", "int", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "nvnet.LinearUpSampling", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.StereoLoss.__init__"], ["def", "__init__", "(", "self", ",", "inChans", "=", "256", ",", "outChans", "=", "256", ",", "dense_features", "=", "(", "10", ",", "12", ",", "8", ")", ",", "stride", "=", "2", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "activation", "=", "\"relu\"", ",", "normalizaiton", "=", "\"group_normalization\"", ")", ":", "\n", "        ", "super", "(", "VDResampling", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "midChans", "=", "int", "(", "inChans", "/", "2", ")", "\n", "self", ".", "dense_features", "=", "dense_features", "\n", "if", "normalizaiton", "==", "\"group_normalization\"", ":", "\n", "            ", "self", ".", "gn1", "=", "nn", ".", "GroupNorm", "(", "num_groups", "=", "8", ",", "num_channels", "=", "inChans", ")", "\n", "", "if", "activation", "==", "\"relu\"", ":", "\n", "            ", "self", ".", "actv1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "actv2", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "activation", "==", "\"elu\"", ":", "\n", "            ", "self", ".", "actv1", "=", "nn", ".", "ELU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "actv2", "=", "nn", ".", "ELU", "(", "inplace", "=", "True", ")", "\n", "", "self", ".", "conv1", "=", "nn", ".", "Conv3d", "(", "in_channels", "=", "inChans", ",", "out_channels", "=", "16", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ")", "\n", "self", ".", "dense1", "=", "nn", ".", "Linear", "(", "in_features", "=", "16", "*", "dense_features", "[", "0", "]", "*", "dense_features", "[", "1", "]", "*", "dense_features", "[", "2", "]", ",", "out_features", "=", "inChans", ")", "\n", "self", ".", "dense2", "=", "nn", ".", "Linear", "(", "in_features", "=", "midChans", ",", "out_features", "=", "midChans", "*", "dense_features", "[", "0", "]", "*", "dense_features", "[", "1", "]", "*", "dense_features", "[", "2", "]", ")", "\n", "self", ".", "up0", "=", "LinearUpSampling", "(", "midChans", ",", "outChans", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_NvNet.nvnet.VDResampling.forward": [[159, 173], ["nvnet.VDResampling.gn1", "nvnet.VDResampling.actv1", "nvnet.VDResampling.conv1", "nvnet.VDResampling.view", "nvnet.VDResampling.dense1", "nvnet.VDraw", "nvnet.VDResampling.dense2", "nvnet.VDResampling.actv2", "nvnet.VDResampling.view", "nvnet.VDResampling.up0", "nvnet.VDResampling.num_flat_features"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_NvNet.nvnet.VDraw", "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_NvNet.nvnet.VDResampling.num_flat_features"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "gn1", "(", "x", ")", "\n", "out", "=", "self", ".", "actv1", "(", "out", ")", "\n", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "out", "=", "out", ".", "view", "(", "-", "1", ",", "self", ".", "num_flat_features", "(", "out", ")", ")", "\n", "out_vd", "=", "self", ".", "dense1", "(", "out", ")", "\n", "distr", "=", "out_vd", "\n", "out", "=", "VDraw", "(", "out_vd", ")", "\n", "out", "=", "self", ".", "dense2", "(", "out", ")", "\n", "out", "=", "self", ".", "actv2", "(", "out", ")", "\n", "out", "=", "out", ".", "view", "(", "(", "1", ",", "128", ",", "self", ".", "dense_features", "[", "0", "]", ",", "self", ".", "dense_features", "[", "1", "]", ",", "self", ".", "dense_features", "[", "2", "]", ")", ")", "\n", "out", "=", "self", ".", "up0", "(", "out", ")", "\n", "\n", "return", "out", ",", "distr", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_NvNet.nvnet.VDResampling.num_flat_features": [[174, 181], ["x.size"], "methods", ["None"], ["", "def", "num_flat_features", "(", "self", ",", "x", ")", ":", "\n", "        ", "size", "=", "x", ".", "size", "(", ")", "[", "1", ":", "]", "\n", "num_features", "=", "1", "\n", "for", "s", "in", "size", ":", "\n", "            ", "num_features", "*=", "s", "\n", "\n", "", "return", "num_features", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_NvNet.nvnet.VDecoderBlock.__init__": [[190, 195], ["torch.Module.__init__", "nvnet.LinearUpSampling", "nvnet.DecoderBlock"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.StereoLoss.__init__"], ["def", "__init__", "(", "self", ",", "inChans", ",", "outChans", ",", "activation", "=", "\"relu\"", ",", "normalizaiton", "=", "\"group_normalization\"", ",", "mode", "=", "\"trilinear\"", ")", ":", "\n", "        ", "super", "(", "VDecoderBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "up0", "=", "LinearUpSampling", "(", "inChans", ",", "outChans", ",", "mode", "=", "mode", ")", "\n", "self", ".", "block", "=", "DecoderBlock", "(", "outChans", ",", "outChans", ",", "activation", "=", "activation", ",", "normalizaiton", "=", "normalizaiton", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_NvNet.nvnet.VDecoderBlock.forward": [[196, 201], ["nvnet.VDecoderBlock.up0", "nvnet.VDecoderBlock.block"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "up0", "(", "x", ")", "\n", "out", "=", "self", ".", "block", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_NvNet.nvnet.VAE.__init__": [[206, 214], ["torch.Module.__init__", "nvnet.VDResampling", "nvnet.VDecoderBlock", "nvnet.VDecoderBlock", "nvnet.VDecoderBlock", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.StereoLoss.__init__"], ["def", "__init__", "(", "self", ",", "inChans", "=", "256", ",", "outChans", "=", "4", ",", "dense_features", "=", "(", "10", ",", "12", ",", "8", ")", ",", "activation", "=", "\"relu\"", ",", "normalizaiton", "=", "\"group_normalization\"", ",", "mode", "=", "\"trilinear\"", ")", ":", "\n", "        ", "super", "(", "VAE", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "vd_resample", "=", "VDResampling", "(", "inChans", "=", "inChans", ",", "outChans", "=", "inChans", ",", "dense_features", "=", "dense_features", ")", "\n", "self", ".", "vd_block2", "=", "VDecoderBlock", "(", "inChans", ",", "inChans", "//", "2", ")", "\n", "self", ".", "vd_block1", "=", "VDecoderBlock", "(", "inChans", "//", "2", ",", "inChans", "//", "4", ")", "\n", "self", ".", "vd_block0", "=", "VDecoderBlock", "(", "inChans", "//", "4", ",", "inChans", "//", "8", ")", "\n", "self", ".", "vd_end", "=", "nn", ".", "Conv3d", "(", "inChans", "//", "8", ",", "outChans", ",", "kernel_size", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_NvNet.nvnet.VAE.forward": [[215, 223], ["nvnet.VAE.vd_resample", "nvnet.VAE.vd_block2", "nvnet.VAE.vd_block1", "nvnet.VAE.vd_block0", "nvnet.VAE.vd_end"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", ",", "distr", "=", "self", ".", "vd_resample", "(", "x", ")", "\n", "out", "=", "self", ".", "vd_block2", "(", "out", ")", "\n", "out", "=", "self", ".", "vd_block1", "(", "out", ")", "\n", "out", "=", "self", ".", "vd_block0", "(", "out", ")", "\n", "out", "=", "self", ".", "vd_end", "(", "out", ")", "\n", "\n", "return", "out", ",", "distr", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_NvNet.nvnet.NvNet.__init__": [[225, 265], ["torch.Module.__init__", "nvnet.DownSampling", "nvnet.EncoderBlock", "nvnet.DownSampling", "nvnet.EncoderBlock", "nvnet.EncoderBlock", "nvnet.DownSampling", "nvnet.EncoderBlock", "nvnet.EncoderBlock", "nvnet.DownSampling", "nvnet.EncoderBlock", "nvnet.EncoderBlock", "nvnet.EncoderBlock", "nvnet.EncoderBlock", "nvnet.LinearUpSampling", "nvnet.DecoderBlock", "nvnet.LinearUpSampling", "nvnet.DecoderBlock", "nvnet.LinearUpSampling", "nvnet.DecoderBlock", "nvnet.OutputTransition", "nvnet.VAE"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.StereoLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "NvNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "config", "=", "config", "\n", "# some critical parameters", "\n", "self", ".", "inChans", "=", "config", "[", "\"input_shape\"", "]", "[", "1", "]", "\n", "self", ".", "input_shape", "=", "config", "[", "\"input_shape\"", "]", "\n", "self", ".", "seg_outChans", "=", "config", "[", "\"n_labels\"", "]", "\n", "self", ".", "activation", "=", "config", "[", "\"activation\"", "]", "\n", "self", ".", "normalizaiton", "=", "config", "[", "\"normalizaiton\"", "]", "\n", "self", ".", "mode", "=", "config", "[", "\"mode\"", "]", "\n", "\n", "# Encoder Blocks", "\n", "self", ".", "in_conv0", "=", "DownSampling", "(", "inChans", "=", "self", ".", "inChans", ",", "outChans", "=", "32", ",", "stride", "=", "1", ",", "dropout_rate", "=", "0.2", ")", "\n", "self", ".", "en_block0", "=", "EncoderBlock", "(", "32", ",", "32", ",", "activation", "=", "self", ".", "activation", ",", "normalizaiton", "=", "self", ".", "normalizaiton", ")", "\n", "self", ".", "en_down1", "=", "DownSampling", "(", "32", ",", "64", ")", "\n", "self", ".", "en_block1_0", "=", "EncoderBlock", "(", "64", ",", "64", ",", "activation", "=", "self", ".", "activation", ",", "normalizaiton", "=", "self", ".", "normalizaiton", ")", "\n", "self", ".", "en_block1_1", "=", "EncoderBlock", "(", "64", ",", "64", ",", "activation", "=", "self", ".", "activation", ",", "normalizaiton", "=", "self", ".", "normalizaiton", ")", "\n", "self", ".", "en_down2", "=", "DownSampling", "(", "64", ",", "128", ")", "\n", "self", ".", "en_block2_0", "=", "EncoderBlock", "(", "128", ",", "128", ",", "activation", "=", "self", ".", "activation", ",", "normalizaiton", "=", "self", ".", "normalizaiton", ")", "\n", "self", ".", "en_block2_1", "=", "EncoderBlock", "(", "128", ",", "128", ",", "activation", "=", "self", ".", "activation", ",", "normalizaiton", "=", "self", ".", "normalizaiton", ")", "\n", "self", ".", "en_down3", "=", "DownSampling", "(", "128", ",", "256", ")", "\n", "self", ".", "en_block3_0", "=", "EncoderBlock", "(", "256", ",", "256", ",", "activation", "=", "self", ".", "activation", ",", "normalizaiton", "=", "self", ".", "normalizaiton", ")", "\n", "self", ".", "en_block3_1", "=", "EncoderBlock", "(", "256", ",", "256", ",", "activation", "=", "self", ".", "activation", ",", "normalizaiton", "=", "self", ".", "normalizaiton", ")", "\n", "self", ".", "en_block3_2", "=", "EncoderBlock", "(", "256", ",", "256", ",", "activation", "=", "self", ".", "activation", ",", "normalizaiton", "=", "self", ".", "normalizaiton", ")", "\n", "self", ".", "en_block3_3", "=", "EncoderBlock", "(", "256", ",", "256", ",", "activation", "=", "self", ".", "activation", ",", "normalizaiton", "=", "self", ".", "normalizaiton", ")", "\n", "\n", "# Decoder Blocks", "\n", "self", ".", "de_up2", "=", "LinearUpSampling", "(", "256", ",", "128", ",", "mode", "=", "self", ".", "mode", ")", "\n", "self", ".", "de_block2", "=", "DecoderBlock", "(", "128", ",", "128", ",", "activation", "=", "self", ".", "activation", ",", "normalizaiton", "=", "self", ".", "normalizaiton", ")", "\n", "self", ".", "de_up1", "=", "LinearUpSampling", "(", "128", ",", "64", ",", "mode", "=", "self", ".", "mode", ")", "\n", "self", ".", "de_block1", "=", "DecoderBlock", "(", "64", ",", "64", ",", "activation", "=", "self", ".", "activation", ",", "normalizaiton", "=", "self", ".", "normalizaiton", ")", "\n", "self", ".", "de_up0", "=", "LinearUpSampling", "(", "64", ",", "32", ",", "mode", "=", "self", ".", "mode", ")", "\n", "self", ".", "de_block0", "=", "DecoderBlock", "(", "32", ",", "32", ",", "activation", "=", "self", ".", "activation", ",", "normalizaiton", "=", "self", ".", "normalizaiton", ")", "\n", "self", ".", "de_end", "=", "OutputTransition", "(", "32", ",", "self", ".", "seg_outChans", ")", "\n", "\n", "# Variational Auto-Encoder", "\n", "if", "self", ".", "config", "[", "\"VAE_enable\"", "]", ":", "\n", "            ", "self", ".", "dense_features", "=", "(", "self", ".", "input_shape", "[", "2", "]", "//", "16", ",", "self", ".", "input_shape", "[", "3", "]", "//", "16", ",", "self", ".", "input_shape", "[", "4", "]", "//", "16", ")", "\n", "self", ".", "vae", "=", "VAE", "(", "256", ",", "outChans", "=", "self", ".", "inChans", ",", "dense_features", "=", "self", ".", "dense_features", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_NvNet.nvnet.NvNet.forward": [[266, 288], ["nvnet.NvNet.in_conv0", "nvnet.NvNet.en_block0", "nvnet.NvNet.en_block1_1", "nvnet.NvNet.en_block2_1", "nvnet.NvNet.en_block3_3", "nvnet.NvNet.de_block2", "nvnet.NvNet.de_block1", "nvnet.NvNet.de_block0", "nvnet.NvNet.de_end", "nvnet.NvNet.en_block1_0", "nvnet.NvNet.en_block2_0", "nvnet.NvNet.en_block3_2", "nvnet.NvNet.de_up2", "nvnet.NvNet.de_up1", "nvnet.NvNet.de_up0", "nvnet.NvNet.vae", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "nvnet.NvNet.en_down1", "nvnet.NvNet.en_down2", "nvnet.NvNet.en_block3_1", "nvnet.NvNet.en_block3_0", "nvnet.NvNet.en_down3"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out_init", "=", "self", ".", "in_conv0", "(", "x", ")", "\n", "out_en0", "=", "self", ".", "en_block0", "(", "out_init", ")", "\n", "out_en1", "=", "self", ".", "en_block1_1", "(", "self", ".", "en_block1_0", "(", "self", ".", "en_down1", "(", "out_en0", ")", ")", ")", "\n", "out_en2", "=", "self", ".", "en_block2_1", "(", "self", ".", "en_block2_0", "(", "self", ".", "en_down2", "(", "out_en1", ")", ")", ")", "\n", "out_en3", "=", "self", ".", "en_block3_3", "(", "\n", "self", ".", "en_block3_2", "(", "\n", "self", ".", "en_block3_1", "(", "\n", "self", ".", "en_block3_0", "(", "\n", "self", ".", "en_down3", "(", "out_en2", ")", ")", ")", ")", ")", "\n", "\n", "out_de2", "=", "self", ".", "de_block2", "(", "self", ".", "de_up2", "(", "out_en3", ",", "out_en2", ")", ")", "\n", "out_de1", "=", "self", ".", "de_block1", "(", "self", ".", "de_up1", "(", "out_de2", ",", "out_en1", ")", ")", "\n", "out_de0", "=", "self", ".", "de_block0", "(", "self", ".", "de_up0", "(", "out_de1", ",", "out_en0", ")", ")", "\n", "out_end", "=", "self", ".", "de_end", "(", "out_de0", ")", "\n", "\n", "if", "self", ".", "config", "[", "\"VAE_enable\"", "]", ":", "\n", "            ", "out_vae", ",", "out_distr", "=", "self", ".", "vae", "(", "out_en3", ")", "\n", "out_final", "=", "torch", ".", "cat", "(", "(", "out_end", ",", "out_vae", ")", ",", "1", ")", "\n", "return", "out_final", ",", "out_distr", "\n", "\n", "", "return", "out_end", "", "", "", ""]], "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_NvNet.nvnet.VDraw": [[182, 185], ["torch.distributions.Normal().sample", "torch.distributions.Normal().sample", "torch.distributions.Normal().sample", "torch.distributions.Normal", "torch.distributions.Normal", "torch.distributions.Normal"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.data.rand.Constant.sample", "home.repos.pwc.inspect_result.zwxu064_RANP.data.rand.Constant.sample", "home.repos.pwc.inspect_result.zwxu064_RANP.data.rand.Constant.sample"], ["", "", "def", "VDraw", "(", "x", ")", ":", "\n", "# Generate a Gaussian distribution with the given mean(128-d) and std(128-d)", "\n", "    ", "return", "torch", ".", "distributions", ".", "Normal", "(", "x", "[", ":", ",", ":", "128", "]", ",", "x", "[", ":", ",", "128", ":", "]", ")", ".", "sample", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_NvNet.utils.AverageMeter.__init__": [[17, 19], ["utils.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.AverageMeter.reset"], ["self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_NvNet.utils.AverageMeter.reset": [[20, 25], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_NvNet.utils.AverageMeter.update": [[26, 31], ["None"], "methods", ["None"], ["\n", "", "", "class", "Logger", "(", "object", ")", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ",", "path", ",", "header", ")", ":", "\n", "        ", "self", ".", "log_file", "=", "open", "(", "path", ",", "'w'", ")", "\n", "self", ".", "logger", "=", "csv", ".", "writer", "(", "self", ".", "log_file", ",", "delimiter", "=", "'\\t'", ")", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_NvNet.utils.Logger.__init__": [[35, 38], ["tensorboardX.SummaryWriter", "[].split", "model_name.split"], "methods", ["None"], ["\n", "", "def", "__del", "(", "self", ")", ":", "\n", "        ", "self", ".", "log_file", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_NvNet.utils.Logger.__del": [[39, 41], ["utils.Logger.writer.close"], "methods", ["None"], ["", "def", "log", "(", "self", ",", "values", ")", ":", "\n", "        ", "write_values", "=", "[", "]", "\n", "for", "col", "in", "self", ".", "header", ":", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_NvNet.utils.Logger.log": [[42, 47], ["utils.Logger.writer.add_scalar", "float", "int"], "methods", ["None"], ["            ", "assert", "col", "in", "values", "\n", "write_values", ".", "append", "(", "values", "[", "col", "]", ")", "\n", "\n", "", "self", ".", "logger", ".", "writerow", "(", "write_values", ")", "\n", "self", ".", "log_file", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_NvNet.utils.pickle_load": [[10, 13], ["open", "pickle.load"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.data.load"], ["\n", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_NvNet.utils.load_value_file": [[49, 54], ["open", "float", "input_file.read().rstrip", "input_file.read"], "function", ["None"], ["", "", "def", "load_value_file", "(", "file_path", ")", ":", "\n", "    ", "with", "open", "(", "file_path", ",", "'r'", ")", "as", "input_file", ":", "\n", "        ", "value", "=", "float", "(", "input_file", ".", "read", "(", ")", ".", "rstrip", "(", "'\\n\\r'", ")", ")", "\n", "\n", "", "return", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_NvNet.utils.calculate_accuracy": [[66, 68], ["utils.dice_coefficient"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_NvNet.utils.dice_coefficient"], ["for", "k", "in", "topk", ":", "\n", "        ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_NvNet.utils.dice_coefficient": [[69, 80], ["targets.size", "y_pred.type.type", "torch.sum", "torch.mul", "torch.sum", "torch.sum"], "function", ["None"], ["", "return", "res", "\n", "\n", "\n", "", "def", "save_checkpoint", "(", "state", ",", "is_best", ",", "opt", ")", ":", "\n", "    ", "torch", ".", "save", "(", "state", ",", "'%s/%s_checkpoint.pth'", "%", "(", "opt", ".", "result_path", ",", "opt", ".", "store_name", ")", ")", "\n", "if", "is_best", ":", "\n", "        ", "shutil", ".", "copyfile", "(", "'%s/%s_checkpoint.pth'", "%", "(", "opt", ".", "result_path", ",", "opt", ".", "store_name", ")", ",", "'%s/%s_best.pth'", "%", "(", "opt", ".", "result_path", ",", "opt", ".", "store_name", ")", ")", "\n", "\n", "\n", "", "", "def", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ",", "opt", ")", ":", "\n", "    ", "\"\"\"Sets the learning rate to the initial LR decayed by 10 every 30 epochs\"\"\"", "\n", "lr_new", "=", "opt", ".", "lr", "*", "(", "0.1", "**", "(", "sum", "(", "epoch", ">=", "np", ".", "array", "(", "opt", ".", "lr_steps", ")", ")", ")", ")", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_NvNet.utils.load_old_model": [[81, 89], ["print", "torch.load", "model.load_state_dict", "optimizer.load_state_dict"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.data.load"], ["for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "lr_new", "\n", "#param_group['lr'] = opt.learning_rate", "\n", "\n", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_NvNet.utils.normalize_data": [[90, 92], ["None"], "function", ["None"], []], "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_NvNet.validation.val_epoch": [[12, 60], ["print", "model.eval", "utils.AverageMeter", "utils.AverageMeter", "data_set.file_open", "torch.utils.data.DataLoader", "tqdm.tqdm", "time.time", "enumerate", "data_set.file_open", "print", "logger.log", "utils.calculate_accuracy", "utils.AverageMeter.update", "utils.AverageMeter.update", "time.time", "tqdm.tqdm.set_description", "inputs.cuda.type", "inputs.cuda.cuda", "targets.cuda.type", "targets.cuda.cuda", "torch.no_grad", "model.cpu", "targets.cuda.cpu", "criterion.cpu", "inputs.cuda.size", "inputs.cuda.size", "model", "criterion", "model", "criterion", "format", "format", "utils.AverageMeter.avg.item", "utils.AverageMeter.avg.item"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_NvNet.dataset.BratsDataset.file_open", "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_NvNet.dataset.BratsDataset.file_open", "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_NvNet.utils.Logger.log", "home.repos.pwc.inspect_result.zwxu064_RANP.BraTS2018_NvNet.utils.calculate_accuracy", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.AverageMeter.update", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.AverageMeter.update"], ["\n", "model", ".", "eval", "(", ")", "\n", "\n", "batch_time", "=", "AverageMeter", "(", ")", "\n", "data_time", "=", "AverageMeter", "(", ")", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "top1", "=", "AverageMeter", "(", ")", "\n", "top5", "=", "AverageMeter", "(", ")", "\n", "\n", "end_time", "=", "time", ".", "time", "(", ")", "\n", "for", "i", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "        ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end_time", ")", "\n", "\n", "if", "not", "opt", ".", "no_cuda", ":", "\n", "            ", "inputs", "=", "inputs", ".", "cuda", "(", ")", "\n", "targets", "=", "targets", ".", "cuda", "(", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "inputs", "=", "Variable", "(", "inputs", ")", "\n", "targets", "=", "Variable", "(", "targets", ")", "\n", "\n", "", "outputs", "=", "model", "(", "inputs", ")", "\n", "loss", "=", "criterion", "(", "outputs", ",", "targets", ")", "\n", "prec1", ",", "prec5", "=", "calculate_accuracy", "(", "outputs", ".", "data", ",", "targets", ".", "data", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "top1", ".", "update", "(", "prec1", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "prec5", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end_time", ")", "\n", "end_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "print", "(", "'Epoch: [{0}][{1}/{2}]\\t'", "\n", "'Time {batch_time.val:.5f} ({batch_time.avg:.5f})\\t'", "\n", "'Data {data_time.val:.5f} ({data_time.avg:.5f})\\t'", "\n", "'Loss {loss.val:.4f} ({loss.avg:.4f})\\t'", "\n", "'Prec@1 {top1.val:.5f} ({top1.avg:.5f})\\t'", "\n", "'Prec@5 {top5.val:.5f} ({top5.avg:.5f})'", ".", "format", "(", "\n", "epoch", ",", "\n", "i", "+", "1", ",", "\n", "len", "(", "data_loader", ")", ",", "\n", "batch_time", "=", "batch_time", ",", "\n", "data_time", "=", "data_time", ",", "\n", "loss", "=", "losses", ",", "\n", "top1", "=", "top1", ",", "\n", "top5", "=", "top5", ")", ")", "\n", "\n", "", "logger", ".", "log", "(", "{", "'epoch'", ":", "epoch", ",", "\n", "'loss'", ":", "losses", ".", "avg", ",", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.Dataloader.data_augmentation.random_flip_dimensions": [[13, 20], ["list", "range", "numpy.random.choice", "list.append"], "function", ["None"], ["def", "random_flip_dimensions", "(", "n_dimensions", ")", ":", "\n", "  ", "axis", "=", "list", "(", ")", "\n", "for", "dim", "in", "range", "(", "n_dimensions", ")", ":", "\n", "    ", "if", "np", ".", "random", ".", "choice", "(", "[", "True", ",", "False", "]", ")", ":", "\n", "      ", "axis", ".", "append", "(", "dim", ")", "\n", "\n", "", "", "return", "axis", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.Dataloader.data_augmentation.flip_image": [[22, 31], ["nilearn.image.new_img_like", "numpy.copy", "image.get_data", "numpy.flip", "numpy.flip", "image.get_data"], "function", ["None"], ["", "def", "flip_image", "(", "image", ",", "axis", ")", ":", "\n", "  ", "try", ":", "\n", "    ", "new_data", "=", "np", ".", "copy", "(", "image", ".", "get_data", "(", ")", ")", "\n", "for", "axis_index", "in", "axis", ":", "\n", "      ", "new_data", "=", "np", ".", "flip", "(", "new_data", ",", "axis", "=", "axis_index", ")", "\n", "", "", "except", "TypeError", ":", "\n", "    ", "new_data", "=", "np", ".", "flip", "(", "image", ".", "get_data", "(", ")", ",", "axis", "=", "axis", ")", "\n", "\n", "", "return", "new_img_like", "(", "image", ",", "data", "=", "new_data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.Dataloader.data_augmentation.offset_image": [[33, 70], ["image.get_data", "numpy.zeros", "nilearn.image.new_img_like", "len", "len", "len", "int", "int", "int", "slice", "slice", "slice", "slice", "slice", "slice", "slice", "slice", "slice", "slice", "slice", "slice"], "function", ["None"], ["", "def", "offset_image", "(", "image", ",", "offset_factor", ")", ":", "\n", "  ", "image_data", "=", "image", ".", "get_data", "(", ")", "\n", "image_shape", "=", "image_data", ".", "shape", "\n", "new_data", "=", "np", ".", "zeros", "(", "image_shape", ")", "\n", "\n", "assert", "len", "(", "image_shape", ")", "==", "3", ",", "\"Wrong dimessions! Expected 3 but got {0}\"", ".", "format", "(", "len", "(", "image_shape", ")", ")", "\n", "\n", "if", "len", "(", "image_shape", ")", "==", "3", ":", "\n", "    ", "new_data", "[", ":", "]", "=", "image_data", "[", "0", "]", "[", "0", "]", "[", "0", "]", "\n", "oz", "=", "int", "(", "image_shape", "[", "0", "]", "*", "offset_factor", "[", "0", "]", ")", "\n", "oy", "=", "int", "(", "image_shape", "[", "1", "]", "*", "offset_factor", "[", "1", "]", ")", "\n", "ox", "=", "int", "(", "image_shape", "[", "2", "]", "*", "offset_factor", "[", "2", "]", ")", "\n", "\n", "if", "oy", ">=", "0", ":", "\n", "      ", "slice_y", "=", "slice", "(", "image_shape", "[", "1", "]", "-", "oy", ")", "\n", "index_y", "=", "slice", "(", "oy", ",", "image_shape", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "      ", "slice_y", "=", "slice", "(", "-", "oy", ",", "image_shape", "[", "1", "]", ")", "\n", "index_y", "=", "slice", "(", "image_shape", "[", "1", "]", "+", "oy", ")", "\n", "\n", "", "if", "ox", ">=", "0", ":", "\n", "      ", "slice_x", "=", "slice", "(", "image_shape", "[", "2", "]", "-", "ox", ")", "\n", "index_x", "=", "slice", "(", "ox", ",", "image_shape", "[", "2", "]", ")", "\n", "", "else", ":", "\n", "      ", "slice_x", "=", "slice", "(", "-", "ox", ",", "image_shape", "[", "2", "]", ")", "\n", "index_x", "=", "slice", "(", "image_shape", "[", "2", "]", "+", "ox", ")", "\n", "\n", "", "if", "oz", ">=", "0", ":", "\n", "      ", "slice_z", "=", "slice", "(", "image_shape", "[", "0", "]", "-", "oz", ")", "\n", "index_z", "=", "slice", "(", "oz", ",", "image_shape", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "      ", "slice_z", "=", "slice", "(", "-", "oz", ",", "image_shape", "[", "0", "]", ")", "\n", "index_z", "=", "slice", "(", "image_shape", "[", "0", "]", "+", "oz", ")", "\n", "\n", "", "new_data", "[", "index_z", ",", "index_y", ",", "index_x", "]", "=", "image_data", "[", "slice_z", ",", "slice_y", ",", "slice_x", "]", "\n", "\n", "", "return", "new_img_like", "(", "image", ",", "data", "=", "new_data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.Dataloader.data_augmentation.augment_image": [[72, 80], ["data_augmentation.flip_image", "data_augmentation.offset_image"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.Dataloader.data_augmentation.flip_image", "home.repos.pwc.inspect_result.zwxu064_RANP.Dataloader.data_augmentation.offset_image"], ["", "def", "augment_image", "(", "image", ",", "flip_axis", "=", "None", ",", "offset_factor", "=", "None", ")", ":", "\n", "  ", "if", "flip_axis", "is", "not", "None", ":", "\n", "    ", "image", "=", "flip_image", "(", "image", ",", "axis", "=", "flip_axis", ")", "\n", "\n", "", "if", "offset_factor", "is", "not", "None", ":", "\n", "    ", "image", "=", "offset_image", "(", "image", ",", "offset_factor", "=", "offset_factor", ")", "\n", "\n", "", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.Dataloader.data_augmentation.get_target_label": [[82, 101], ["numpy.zeros", "range", "numpy.where", "numpy.where", "numpy.where", "numpy.where", "numpy.where"], "function", ["None"], ["", "def", "get_target_label", "(", "label_data", ",", "config", ")", ":", "\n", "  ", "target_label", "=", "np", ".", "zeros", "(", "label_data", ".", "shape", ")", "\n", "\n", "for", "l_idx", "in", "range", "(", "config", "[", "\"n_labels\"", "]", ")", ":", "\n", "    ", "assert", "config", "[", "\"labels\"", "]", "[", "l_idx", "]", "in", "[", "1", ",", "2", ",", "4", "]", ",", "\"Wrong label! Expected 1 or 2 or 4, but got {0}\"", ".", "format", "(", "config", "[", "\"labels\"", "]", "[", "l_idx", "]", ")", "\n", "\n", "if", "not", "config", "[", "\"label_containing\"", "]", ":", "\n", "      ", "target_label", "[", "np", ".", "where", "(", "label_data", "==", "config", "[", "\"labels\"", "]", "[", "l_idx", "]", ")", "]", "=", "1", "\n", "", "else", ":", "\n", "      ", "if", "config", "[", "\"labels\"", "]", "[", "l_idx", "]", "==", "1", ":", "\n", "        ", "target_label", "[", "np", ".", "where", "(", "label_data", "==", "1", ")", "]", "=", "1", "\n", "target_label", "[", "np", ".", "where", "(", "label_data", "==", "4", ")", "]", "=", "1", "\n", "", "elif", "config", "[", "\"labels\"", "]", "[", "l_idx", "]", "==", "2", ":", "\n", "        ", "target_label", "[", "np", ".", "where", "(", "label_data", ">", "0", ")", "]", "=", "1", "\n", "", "elif", "config", "[", "\"labels\"", "]", "[", "l_idx", "]", "==", "4", ":", "\n", "        ", "target_label", "[", "np", ".", "where", "(", "label_data", "==", "4", ")", "]", "=", "1", "\n", "\n", "", "", "", "return", "target_label", "\n", "", ""]], "home.repos.pwc.inspect_result.zwxu064_RANP.Dataloader.create_brats_pkl.check_dir": [[6, 9], ["os.path.exists", "os.mkdir"], "function", ["None"], ["def", "check_dir", "(", "dir_name", ")", ":", "\n", "  ", "if", "not", "os", ".", "path", ".", "exists", "(", "dir_name", ")", ":", "\n", "    ", "os", ".", "mkdir", "(", "dir_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.Dataloader.create_brats_pkl.create_test_pkl": [[11, 13], ["None"], "function", ["None"], ["", "", "def", "create_test_pkl", "(", "data_root", ",", "dataset", ",", "years", ")", ":", "\n", "  ", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.Dataloader.create_brats_pkl.create_train_valid_pkl": [[15, 100], ["os.path.exists", "os.path.join", "os.path.exists", "os.path.join", "create_brats_pkl.check_dir", "os.path.join", "create_brats_pkl.check_dir", "print", "range", "open", "pickle.dump", "open.close", "open", "pickle.dump", "open.close", "print", "open", "range", "open.close", "open", "range", "open.close", "print", "open", "pickle.load", "open.close", "open", "pickle.load", "open.close", "len", "os.path.join", "os.path.join", "os.walk", "int", "os.path.join", "os.path.join", "os.path.join", "len", "open.write", "open.write", "os.path.join", "len", "open.write", "open.write", "dataset.find", "os.path.join", "os.path.join", "os.path.exists", "range", "range", "int", "int", "str", "str", "len", "pickle.load.append", "pickle.load.append", "file.find", "paths.append", "paths.append", "paths.append", "paths.append", "paths.append", "len", "len", "root.split", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.check_dir", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.check_dir", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.data.load", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.data.load", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.binvox_rw.write", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.binvox_rw.write", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.binvox_rw.write", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.binvox_rw.write"], ["", "def", "create_train_valid_pkl", "(", "data_root", ",", "dataset", ",", "years", ",", "split_ratio", "=", "None", ")", ":", "\n", "  ", "assert", "os", ".", "path", ".", "exists", "(", "data_root", ")", "\n", "dataset_dir", "=", "os", ".", "path", ".", "join", "(", "data_root", ",", "dataset", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "dataset_dir", ")", "\n", "full_name", "=", "\"BraTS\"", "\n", "\n", "for", "year", "in", "years", ":", "\n", "    ", "full_name", "=", "full_name", "+", "'_{}'", ".", "format", "(", "year", ")", "\n", "\n", "", "path_file_dir", "=", "os", ".", "path", ".", "join", "(", "dataset_dir", ",", "'packs'", ")", "\n", "check_dir", "(", "path_file_dir", ")", "\n", "path_file_dir", "=", "os", ".", "path", ".", "join", "(", "path_file_dir", ",", "full_name", ")", "\n", "check_dir", "(", "path_file_dir", ")", "\n", "\n", "print", "(", "'====Creating train+valid pkl'", ")", "\n", "paths", "=", "[", "]", "\n", "\n", "for", "year", "in", "years", ":", "\n", "    ", "data_dir", "=", "os", ".", "path", ".", "join", "(", "dataset_dir", ",", "'{}'", ".", "format", "(", "year", ")", ")", "\n", "data_dir", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'MICCAI_BraTS_{}_Data_Training'", ".", "format", "(", "year", ")", ")", "\n", "\n", "for", "root", ",", "dirs", ",", "files", "in", "os", ".", "walk", "(", "data_dir", ")", ":", "\n", "      ", "for", "file", "in", "files", ":", "\n", "        ", "if", "file", ".", "find", "(", "'.nii.gz'", ")", ">", "-", "1", ":", "\n", "          ", "id_name", "=", "root", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "paths", ".", "append", "(", "os", ".", "path", ".", "join", "(", "root", ",", "'{}_t1.nii.gz'", ".", "format", "(", "id_name", ")", ")", ")", "\n", "paths", ".", "append", "(", "os", ".", "path", ".", "join", "(", "root", ",", "'{}_t1ce.nii.gz'", ".", "format", "(", "id_name", ")", ")", ")", "\n", "paths", ".", "append", "(", "os", ".", "path", ".", "join", "(", "root", ",", "'{}_t2.nii.gz'", ".", "format", "(", "id_name", ")", ")", ")", "\n", "paths", ".", "append", "(", "os", ".", "path", ".", "join", "(", "root", ",", "'{}_flair.nii.gz'", ".", "format", "(", "id_name", ")", ")", ")", "\n", "paths", ".", "append", "(", "os", ".", "path", ".", "join", "(", "root", ",", "'{}_seg.nii.gz'", ".", "format", "(", "id_name", ")", ")", ")", "\n", "break", "\n", "\n", "# 1 in split_ratio percent for valid, the rest for train", "\n", "", "", "", "", "train_paths", ",", "valid_paths", "=", "[", "]", ",", "[", "]", "\n", "for", "path_ind", "in", "range", "(", "int", "(", "len", "(", "paths", ")", "/", "5", ")", ")", ":", "\n", "    ", "if", "(", "split_ratio", "is", "not", "None", ")", "and", "(", "path_ind", "%", "split_ratio", "==", "0", ")", ":", "\n", "      ", "for", "i", "in", "range", "(", "5", ")", ":", "\n", "        ", "valid_paths", ".", "append", "(", "paths", "[", "5", "*", "path_ind", "+", "i", "]", ")", "\n", "", "", "else", ":", "\n", "      ", "for", "i", "in", "range", "(", "5", ")", ":", "\n", "        ", "train_paths", ".", "append", "(", "paths", "[", "5", "*", "path_ind", "+", "i", "]", ")", "\n", "\n", "", "", "", "fout", "=", "open", "(", "os", ".", "path", ".", "join", "(", "path_file_dir", ",", "'{}_train.pkl'", ".", "format", "(", "dataset", ")", ")", ",", "'wb'", ")", "\n", "pickle", ".", "dump", "(", "train_paths", ",", "fout", ")", "\n", "fout", ".", "close", "(", ")", "\n", "\n", "fout", "=", "open", "(", "os", ".", "path", ".", "join", "(", "path_file_dir", ",", "'{}_valid.pkl'", ".", "format", "(", "dataset", ")", ")", ",", "'wb'", ")", "\n", "pickle", ".", "dump", "(", "valid_paths", ",", "fout", ")", "\n", "fout", ".", "close", "(", ")", "\n", "\n", "print", "(", "'Dataset: {}, train images: {}, valid images: {}'", ".", "\n", "format", "(", "dataset", ",", "int", "(", "len", "(", "train_paths", ")", "/", "5", ")", ",", "int", "(", "len", "(", "valid_paths", ")", "/", "5", ")", ")", ")", "\n", "\n", "# Save file paths to txt", "\n", "fp", "=", "open", "(", "os", ".", "path", ".", "join", "(", "path_file_dir", ",", "'{}_train.txt'", ".", "format", "(", "dataset", ")", ")", ",", "'w'", ")", "\n", "for", "path_ind", "in", "range", "(", "len", "(", "train_paths", ")", ")", ":", "\n", "    ", "fp", ".", "write", "(", "str", "(", "train_paths", "[", "path_ind", "]", ")", ")", "\n", "fp", ".", "write", "(", "'\\n'", ")", "\n", "", "fp", ".", "close", "(", ")", "\n", "\n", "fp", "=", "open", "(", "os", ".", "path", ".", "join", "(", "path_file_dir", ",", "'{}_valid.txt'", ".", "format", "(", "dataset", ")", ")", ",", "'w'", ")", "\n", "for", "path_ind", "in", "range", "(", "len", "(", "valid_paths", ")", ")", ":", "\n", "    ", "fp", ".", "write", "(", "str", "(", "valid_paths", "[", "path_ind", "]", ")", ")", "\n", "fp", ".", "write", "(", "'\\n'", ")", "\n", "", "fp", ".", "close", "(", ")", "\n", "\n", "if", "dataset", ".", "find", "(", "'-single'", ")", ">", "-", "1", ":", "\n", "    ", "return", "\n", "\n", "# Check", "\n", "", "print", "(", "'====Checking'", ")", "\n", "fin", "=", "open", "(", "os", ".", "path", ".", "join", "(", "path_file_dir", ",", "'{}_train.pkl'", ".", "format", "(", "dataset", ")", ")", ",", "'rb'", ")", "\n", "train_paths", "=", "pickle", ".", "load", "(", "fin", ")", "\n", "fin", ".", "close", "(", ")", "\n", "\n", "fin", "=", "open", "(", "os", ".", "path", ".", "join", "(", "path_file_dir", ",", "'{}_valid.pkl'", ".", "format", "(", "dataset", ")", ")", ",", "'rb'", ")", "\n", "valid_paths", "=", "pickle", ".", "load", "(", "fin", ")", "\n", "fin", ".", "close", "(", ")", "\n", "\n", "all_paths", "=", "train_paths", "+", "valid_paths", "\n", "path_len", "=", "len", "(", "all_paths", ")", "\n", "assert", "(", "path_len", "%", "5", "==", "0", ")", "\n", "\n", "for", "path", "in", "all_paths", ":", "\n", "    ", "assert", "os", ".", "path", ".", "exists", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.Dataloader.dataloader.BraTSDataset.__init__": [[105, 133], ["os.path.join", "l.strip", "aux.utils.RandomCrop3D", "open().readlines", "open"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.utils.parser.AttrDict.strip"], []], "home.repos.pwc.inspect_result.zwxu064_RANP.Dataloader.dataloader.BraTSDataset.__len__": [[134, 136], ["int", "len"], "methods", ["None"], []], "home.repos.pwc.inspect_result.zwxu064_RANP.Dataloader.dataloader.BraTSDataset.__getitem__": [[137, 204], ["nibabel.load", "nibabel.load.get_fdata", "nibabel.load", "nibabel.load.get_fdata", "nibabel.load", "nibabel.load.get_fdata", "nibabel.load", "nibabel.load.get_fdata", "nibabel.load", "nibabel.load.get_fdata", "numpy.stack", "numpy.expand_dims", "len", "range", "numpy.asarray", "nibabel.Nifti1Image", "nilearn.image.resample_to_img().get_data", "torch.from_numpy().float", "torch.from_numpy().long", "torch.from_numpy().float.view().max", "data_max.view.view.view", "time.time", "dataloader.BraTSDataset.paths[].split", "data_augmentation.random_flip_dimensions", "nibabel.Nifti1Image", "data_list.append", "numpy.expand_dims", "print", "dataloader.BraTSDataset.random_crop_3d", "torch.from_numpy().float.size", "print", "numpy.random.random", "nilearn.image.resample_to_img().get_data", "nilearn.image.resample_to_img", "len", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy().float.view", "data_augmentation.augment_image", "torch.from_numpy().float.size", "nilearn.image.resample_to_img", "time.time", "data_augmentation.augment_image"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.data.load", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.data.load", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.data.load", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.data.load", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.data.load", "home.repos.pwc.inspect_result.zwxu064_RANP.Dataloader.data_augmentation.random_flip_dimensions", "home.repos.pwc.inspect_result.zwxu064_RANP.Dataloader.data_augmentation.augment_image", "home.repos.pwc.inspect_result.zwxu064_RANP.Dataloader.data_augmentation.augment_image"], []], "home.repos.pwc.inspect_result.zwxu064_RANP.Dataloader.dataloader.remove_keymap_conflicts": [[14, 21], ["prop.startswith", "set", "keys.remove"], "function", ["None"], ["\n", "train_loader", "=", "DataLoader", "(", "train_dataset", ",", "train_batch_size", ",", "shuffle", "=", "enable_train_shuffle", ",", "num_workers", "=", "2", ",", "pin_memory", "=", "True", ")", "\n", "test_loader", "=", "DataLoader", "(", "test_dataset", ",", "val_batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "2", ",", "pin_memory", "=", "True", ")", "\n", "\n", "return", "train_loader", ",", "test_loader", "\n", "\n", "\n", "", "def", "get_cifar10_dataloaders", "(", "train_batch_size", ",", "test_batch_size", ",", "args", ",", "enable_train_shuffle", "=", "True", ",", "enable_train_trans", "=", "True", ")", ":", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.Dataloader.dataloader.multi_slice_viewer": [[23, 56], ["dataloader.remove_keymap_conflicts", "len", "matplotlib.subplots", "range", "matplotlib.suptitle", "range", "axes.imshow", "axes.title.set_text", "fig.canvas.mpl_connect", "fig.canvas.mpl_connect", "[].sum"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.Dataloader.dataloader.remove_keymap_conflicts"], ["    ", "train_transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "RandomCrop", "(", "32", ",", "padding", "=", "4", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.4914", ",", "0.4822", ",", "0.4465", ")", ",", "(", "0.2023", ",", "0.1994", ",", "0.2010", ")", ")", "]", ")", "\n", "", "else", ":", "\n", "    ", "train_transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.4914", ",", "0.4822", ",", "0.4465", ")", ",", "(", "0.2023", ",", "0.1994", ",", "0.2010", ")", ")", "]", ")", "\n", "\n", "", "test_transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.4914", ",", "0.4822", ",", "0.4465", ")", ",", "(", "0.2023", ",", "0.1994", ",", "0.2010", ")", ")", "]", ")", "\n", "\n", "train_dataset", "=", "CIFAR10", "(", "\"{}/{}\"", ".", "format", "(", "args", ".", "relative_dir", ",", "\"../dataset\"", ")", ",", "True", ",", "train_transform", ",", "download", "=", "True", ")", "\n", "test_dataset", "=", "CIFAR10", "(", "\"{}/{}\"", ".", "format", "(", "args", ".", "relative_dir", ",", "\"../dataset\"", ")", ",", "False", ",", "test_transform", ",", "download", "=", "False", ")", "\n", "\n", "train_loader", "=", "DataLoader", "(", "train_dataset", ",", "train_batch_size", ",", "shuffle", "=", "enable_train_shuffle", ",", "num_workers", "=", "2", ",", "pin_memory", "=", "True", ")", "\n", "test_loader", "=", "DataLoader", "(", "test_dataset", ",", "test_batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "2", ",", "pin_memory", "=", "True", ")", "\n", "\n", "return", "train_loader", ",", "test_loader", "", "", ""]], "home.repos.pwc.inspect_result.zwxu064_RANP.Dataloader.dataloader.auto_display": [[58, 71], ["len", "range", "range", "matplotlib.suptitle", "fig.canvas.draw", "matplotlib.pause", "fig.axes[].images[].set_array"], "function", ["None"], []], "home.repos.pwc.inspect_result.zwxu064_RANP.Dataloader.dataloader.process_key": [[73, 87], ["len", "matplotlib.suptitle", "fig.canvas.draw", "range", "dataloader.previous_slice", "range", "dataloader.next_slice"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.Dataloader.dataloader.previous_slice", "home.repos.pwc.inspect_result.zwxu064_RANP.Dataloader.dataloader.next_slice"], []], "home.repos.pwc.inspect_result.zwxu064_RANP.Dataloader.dataloader.previous_slice": [[89, 93], ["ax.images[].set_array"], "function", ["None"], []], "home.repos.pwc.inspect_result.zwxu064_RANP.Dataloader.dataloader.next_slice": [[95, 99], ["ax.images[].set_array"], "function", ["None"], []], "home.repos.pwc.inspect_result.zwxu064_RANP.aux.fully_convolutional.Model.__init__": [[16, 34], ["torch.Module.__init__", "torch.Module.__init__", "torch.Module.__init__", "torch.Module.__init__", "scn.Sequential().add", "scn.Sequential().add().add().add().add", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "scn.InputLayer", "scn.OutputLayer", "sum", "scn.Sequential", "scn.Sequential().add().add().add", "scn.BatchNormReLU", "scn.Sequential().add().add", "sum", "scn.FullyConvolutionalNet", "scn.Sequential().add", "scn.SubmanifoldConvolution", "scn.Sequential"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.StereoLoss.__init__", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.StereoLoss.__init__", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.StereoLoss.__init__", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.StereoLoss.__init__"], ["  ", "def", "__init__", "(", "self", ")", ":", "\n", "    ", "nn", ".", "Module", ".", "__init__", "(", "self", ")", "\n", "self", ".", "input", "=", "scn", ".", "Sequential", "(", ")", ".", "add", "(", "\n", "scn", ".", "InputLayer", "(", "dimension", ",", "data", ".", "spatialSize", ",", "mode", "=", "3", ")", ")", "\n", "\n", "self", ".", "sparseModel", "=", "scn", ".", "Sequential", "(", ")", ".", "add", "(", "\n", "scn", ".", "SubmanifoldConvolution", "(", "dimension", ",", "1", ",", "m", ",", "3", ",", "False", ")", ")", ".", "add", "(", "\n", "scn", ".", "FullyConvolutionalNet", "(", "dimension", ",", "reps", ",", "nPlanes", ",", "residual_blocks", "=", "False", ",", "downsample", "=", "[", "3", ",", "2", "]", ")", ")", ".", "add", "(", "\n", "scn", ".", "BatchNormReLU", "(", "sum", "(", "nPlanes", ")", ")", ")", ".", "add", "(", "\n", "scn", ".", "OutputLayer", "(", "dimension", ")", ")", "\n", "\n", "# self.sparseModel = scn.Sequential().add(", "\n", "#   scn.InputLayer(dimension, data.spatialSize, mode=3)).add(", "\n", "#   scn.SubmanifoldConvolution(dimension, 1, m, 3, False)).add(", "\n", "#   scn.FullyConvolutionalNet(dimension, reps, nPlanes, residual_blocks=False, downsample=[3,2])).add(", "\n", "#   scn.BatchNormReLU(sum(nPlanes))).add(", "\n", "#   scn.OutputLayer(dimension))", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "sum", "(", "nPlanes", ")", ",", "data", ".", "nClassesTotal", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.aux.fully_convolutional.Model.forward": [[34, 40], ["fully_convolutional.Model.input", "fully_convolutional.Model.sparseModel", "fully_convolutional.Model.linear"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "x", "=", "self", ".", "input", "(", "x", ")", "\n", "x", "=", "self", ".", "sparseModel", "(", "x", ")", "\n", "# x=self.sparseModel(x)", "\n", "x", "=", "self", ".", "linear", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.aux.fully_convolutional.store": [[42, 54], ["zip", "[].cpu().numpy", "f.split", "[].cpu().numpy", "[].cpu", "[].cpu", "predictions.detach", "batch[].detach"], "function", ["None"], ["", "", "def", "store", "(", "stats", ",", "batch", ",", "predictions", ",", "loss", ")", ":", "\n", "  ", "ctr", "=", "0", "\n", "for", "nP", ",", "f", ",", "classOffset", ",", "nClasses", "in", "zip", "(", "batch", "[", "'nPoints'", "]", ",", "batch", "[", "'xf'", "]", ",", "batch", "[", "'classOffset'", "]", ",", "batch", "[", "'nClasses'", "]", ")", ":", "\n", "    ", "categ", ",", "f", "=", "f", ".", "split", "(", "'/'", ")", "[", "-", "2", ":", "]", "\n", "if", "not", "categ", "in", "stats", ":", "\n", "      ", "stats", "[", "categ", "]", "=", "{", "}", "\n", "", "if", "not", "f", "in", "stats", "[", "categ", "]", ":", "\n", "      ", "stats", "[", "categ", "]", "[", "f", "]", "=", "{", "'p'", ":", "0", ",", "'y'", ":", "0", "}", "\n", "#print(predictions[ctr:ctr+nP,classOffset:classOffset+nClasses].abs().max().item())", "\n", "", "stats", "[", "categ", "]", "[", "f", "]", "[", "'p'", "]", "+=", "predictions", ".", "detach", "(", ")", "[", "ctr", ":", "ctr", "+", "nP", ",", "classOffset", ":", "classOffset", "+", "nClasses", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "stats", "[", "categ", "]", "[", "f", "]", "[", "'y'", "]", "=", "batch", "[", "'y'", "]", ".", "detach", "(", ")", "[", "ctr", ":", "ctr", "+", "nP", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "-", "classOffset", "\n", "ctr", "+=", "nP", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.aux.fully_convolutional.store_voxel": [[57, 78], ["predictions.detach().cpu().numpy.detach().cpu().numpy", "gts.detach().cpu().numpy.detach().cpu().numpy", "len", "range", "predictions.detach().cpu().numpy.detach().cpu", "gts.detach().cpu().numpy.detach().cpu", "[].cpu().numpy", "[].cpu().numpy", "[].split", "predictions.detach().cpu().numpy.detach", "gts.detach().cpu().numpy.detach", "[].cpu", "[].cpu"], "function", ["None"], ["", "", "def", "store_voxel", "(", "stats", ",", "data", ",", "predictions", ",", "gts", ")", ":", "\n", "# Predictions (batch,class,dim^3), class first", "\n", "  ", "predictions", "=", "predictions", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "gts", "=", "gts", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "batch", "=", "predictions", ".", "shape", "[", "0", "]", "\n", "actual_batch", "=", "len", "(", "data", "[", "'class_offset'", "]", ")", "\n", "\n", "for", "idx", "in", "range", "(", "batch", ")", ":", "\n", "    ", "class_offset", ",", "num_class", "=", "data", "[", "'class_offset'", "]", "[", "idx", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "data", "[", "'num_class'", "]", "[", "idx", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "prediction", ",", "gt", "=", "predictions", "[", "idx", "]", ",", "gts", "[", "idx", "]", "\n", "categ", ",", "f", "=", "data", "[", "'file_path'", "]", "[", "idx", "]", ".", "split", "(", "'/'", ")", "[", "-", "2", ":", "]", "\n", "\n", "if", "not", "categ", "in", "stats", ":", "\n", "      ", "stats", "[", "categ", "]", "=", "{", "}", "\n", "\n", "", "if", "not", "f", "in", "stats", "[", "categ", "]", ":", "\n", "      ", "stats", "[", "categ", "]", "[", "f", "]", "=", "{", "'p'", ":", "0", ",", "'y'", ":", "0", "}", "\n", "\n", "", "mask", "=", "(", "gt", "!=", "255", ")", "# ignore empty space", "\n", "stats", "[", "categ", "]", "[", "f", "]", "[", "'p'", "]", "+=", "prediction", "[", "class_offset", ":", "class_offset", "+", "num_class", ",", "mask", "]", "\n", "stats", "[", "categ", "]", "[", "f", "]", "[", "'y'", "]", "=", "gt", "[", "mask", "]", "-", "class_offset", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.aux.fully_convolutional.inter": [[80, 83], ["numpy.sum", "numpy.logical_and", "pred.astype", "gt.astype"], "function", ["None"], ["", "", "def", "inter", "(", "pred", ",", "gt", ",", "label", ")", ":", "\n", "  ", "assert", "pred", ".", "size", "==", "gt", ".", "size", ",", "'Predictions incomplete!'", "\n", "return", "np", ".", "sum", "(", "np", ".", "logical_and", "(", "pred", ".", "astype", "(", "'int'", ")", "==", "label", ",", "gt", ".", "astype", "(", "'int'", ")", "==", "label", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.aux.fully_convolutional.union": [[85, 88], ["numpy.sum", "numpy.logical_or", "pred.astype", "gt.astype"], "function", ["None"], ["", "def", "union", "(", "pred", ",", "gt", ",", "label", ")", ":", "\n", "  ", "assert", "pred", ".", "size", "==", "gt", ".", "size", ",", "'Predictions incomplete!'", "\n", "return", "np", ".", "sum", "(", "np", ".", "logical_or", "(", "pred", ".", "astype", "(", "'int'", ")", "==", "label", ",", "gt", ".", "astype", "(", "'int'", ")", "==", "label", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.aux.fully_convolutional.iou": [[90, 119], ["sorted", "len", "numpy.zeros", "numpy.zeros", "enumerate", "stats.keys", "len", "stats[].values", "numpy.zeros", "range", "numpy.mean", "numpy.sum", "numpy.sum", "np.zeros.sum", "gt.append", "numpy.max", "range", "pred.append", "pred.append", "numpy.concatenate", "len", "len", "j[].argmax", "j[].argmax", "fully_convolutional.inter", "fully_convolutional.union"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.fully_convolutional.inter", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.fully_convolutional.union"], ["", "def", "iou", "(", "stats", ",", "class_first", "=", "False", ")", ":", "\n", "  ", "eps", "=", "sys", ".", "float_info", ".", "epsilon", "\n", "categories", "=", "sorted", "(", "stats", ".", "keys", "(", ")", ")", "\n", "ncategory", "=", "len", "(", "categories", ")", "\n", "iou_all", "=", "np", ".", "zeros", "(", "ncategory", ")", "\n", "nmodels", "=", "np", ".", "zeros", "(", "ncategory", ",", "dtype", "=", "'int'", ")", "\n", "for", "i", ",", "categ", "in", "enumerate", "(", "categories", ")", ":", "\n", "    ", "nmodels", "[", "i", "]", "=", "len", "(", "stats", "[", "categ", "]", ")", "\n", "pred", "=", "[", "]", "\n", "gt", "=", "[", "]", "\n", "for", "j", "in", "stats", "[", "categ", "]", ".", "values", "(", ")", ":", "\n", "      ", "if", "class_first", ":", "\n", "        ", "pred", ".", "append", "(", "j", "[", "'p'", "]", ".", "argmax", "(", "0", ")", ")", "\n", "", "else", ":", "\n", "        ", "pred", ".", "append", "(", "j", "[", "'p'", "]", ".", "argmax", "(", "1", ")", ")", "\n", "", "gt", ".", "append", "(", "j", "[", "'y'", "]", ")", "\n", "", "npart", "=", "np", ".", "max", "(", "np", ".", "concatenate", "(", "gt", ")", ")", "+", "1", "\n", "iou_per_part", "=", "np", ".", "zeros", "(", "(", "len", "(", "pred", ")", ",", "npart", ")", ")", "\n", "# loop over parts", "\n", "for", "j", "in", "range", "(", "npart", ")", ":", "\n", "# loop over CAD models", "\n", "      ", "for", "k", "in", "range", "(", "len", "(", "pred", ")", ")", ":", "\n", "        ", "p", "=", "pred", "[", "k", "]", "\n", "iou_per_part", "[", "k", ",", "j", "]", "=", "(", "inter", "(", "p", ",", "gt", "[", "k", "]", ",", "j", ")", "+", "eps", ")", "/", "(", "union", "(", "p", ",", "gt", "[", "k", "]", ",", "j", ")", "+", "eps", ")", "\n", "# average over CAD models and parts", "\n", "", "", "iou_all", "[", "i", "]", "=", "np", ".", "mean", "(", "iou_per_part", ")", "\n", "# weighted average over categories", "\n", "", "iou_weighted_ave", "=", "np", ".", "sum", "(", "iou_all", "*", "nmodels", ")", "/", "np", ".", "sum", "(", "nmodels", ")", "\n", "return", "{", "'iou'", ":", "iou_weighted_ave", ",", "'nmodels_sum'", ":", "nmodels", ".", "sum", "(", ")", ",", "'iou_all'", ":", "iou_all", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.aux.metrics.Evaluator.__init__": [[5, 8], ["numpy.zeros"], "methods", ["None"], ["import", "torch", ".", "nn", ".", "functional", "as", "F", "\n", "from", "skimage", "import", "measure", "\n", "\n", "from", "unet3d", ".", "losses", "import", "compute_per_channel_dice", ",", "expand_as_one_hot", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.aux.metrics.Evaluator.Pixel_Accuracy": [[9, 12], ["numpy.diag().sum", "metrics.Evaluator.confusion_matrix.sum", "numpy.diag"], "methods", ["None"], ["from", "unet3d", ".", "utils", "import", "get_logger", ",", "adapted_rand", "\n", "\n", "LOGGER", "=", "get_logger", "(", "'EvalMetric'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.aux.metrics.Evaluator.Pixel_Accuracy_Class": [[13, 17], ["numpy.nanmean", "numpy.diag", "metrics.Evaluator.confusion_matrix.sum"], "methods", ["None"], ["SUPPORTED_METRICS", "=", "[", "'dice'", ",", "'iou'", ",", "'boundary_ap'", ",", "'dt_ap'", ",", "'quantized_dt_ap'", ",", "'angle'", ",", "'inverse_angular'", "]", "\n", "\n", "\n", "class", "DiceCoefficient", ":", "\n", "    "]], "home.repos.pwc.inspect_result.zwxu064_RANP.aux.metrics.Evaluator.Mean_Intersection_over_Union": [[18, 24], ["numpy.nanmean", "numpy.diag", "numpy.diag", "numpy.sum", "numpy.sum"], "methods", ["None"], ["\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.aux.metrics.Evaluator.Frequency_Weighted_Intersection_over_Union": [[25, 33], ["numpy.sum", "numpy.sum", "numpy.diag", "numpy.diag", "numpy.sum", "numpy.sum"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "epsilon", "=", "1e-5", ",", "ignore_index", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "epsilon", "=", "epsilon", "\n", "self", ".", "ignore_index", "=", "ignore_index", "\n", "\n", "", "def", "__call__", "(", "self", ",", "input", ",", "target", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.zwxu064_RANP.aux.metrics.Evaluator._generate_matrix": [[34, 40], ["numpy.bincount", "numpy.bincount.reshape", "gt_image[].astype"], "methods", ["None"], ["\n", "# Average across channels in order to get the final score", "\n", "return", "torch", ".", "mean", "(", "compute_per_channel_dice", "(", "input", ",", "target", ",", "epsilon", "=", "self", ".", "epsilon", ",", "ignore_index", "=", "self", ".", "ignore_index", ")", ")", "\n", "\n", "\n", "", "", "class", "MeanIoU", ":", "\n", "    "]], "home.repos.pwc.inspect_result.zwxu064_RANP.aux.metrics.Evaluator.add_batch": [[41, 44], ["metrics.Evaluator._generate_matrix"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.metrics.Evaluator._generate_matrix"], ["\n", "\n", "def", "__init__", "(", "self", ",", "skip_channels", "=", "(", ")", ",", "ignore_index", "=", "None", ",", "**", "kwargs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.aux.metrics.Evaluator.reset": [[45, 47], ["numpy.zeros"], "methods", ["None"], ["        "]], "home.repos.pwc.inspect_result.zwxu064_RANP.aux.binvox_rw.Voxels.__init__": [[91, 98], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "data", ",", "dims", ",", "translate", ",", "scale", ",", "axis_order", ")", ":", "\n", "        ", "self", ".", "data", "=", "data", "\n", "self", ".", "dims", "=", "dims", "\n", "self", ".", "translate", "=", "translate", "\n", "self", ".", "scale", "=", "scale", "\n", "assert", "(", "axis_order", "in", "(", "'xzy'", ",", "'xyz'", ")", ")", "\n", "self", ".", "axis_order", "=", "axis_order", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.aux.binvox_rw.Voxels.clone": [[99, 104], ["binvox_rw.Voxels.data.copy", "binvox_rw.Voxels"], "methods", ["None"], ["", "def", "clone", "(", "self", ")", ":", "\n", "        ", "data", "=", "self", ".", "data", ".", "copy", "(", ")", "\n", "dims", "=", "self", ".", "dims", "[", ":", "]", "\n", "translate", "=", "self", ".", "translate", "[", ":", "]", "\n", "return", "Voxels", "(", "data", ",", "dims", ",", "translate", ",", "self", ".", "scale", ",", "self", ".", "axis_order", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.aux.binvox_rw.Voxels.write": [[105, 107], ["binvox_rw.Voxels.write"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.binvox_rw.write"], ["", "def", "write", "(", "self", ",", "fp", ")", ":", "\n", "        ", "write", "(", "self", ",", "fp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.aux.binvox_rw.read_header": [[109, 120], ["fp.readline().strip", "fp.readline", "fp.readline.startswith", "IOError", "int", "float", "fp.readline", "float", "fp.readline().strip().split", "fp.readline().strip().split", "fp.readline().strip().split", "fp.readline().strip", "fp.readline().strip", "fp.readline().strip", "fp.readline", "fp.readline", "fp.readline"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.utils.parser.AttrDict.strip", "home.repos.pwc.inspect_result.zwxu064_RANP.utils.parser.AttrDict.strip", "home.repos.pwc.inspect_result.zwxu064_RANP.utils.parser.AttrDict.strip", "home.repos.pwc.inspect_result.zwxu064_RANP.utils.parser.AttrDict.strip"], ["", "", "def", "read_header", "(", "fp", ")", ":", "\n", "    ", "\"\"\" Read binvox header. Mostly meant for internal use.\n    \"\"\"", "\n", "line", "=", "fp", ".", "readline", "(", ")", ".", "strip", "(", ")", "\n", "if", "not", "line", ".", "startswith", "(", "b'#binvox'", ")", ":", "\n", "        ", "raise", "IOError", "(", "'Not a binvox file'", ")", "\n", "", "dims", "=", "[", "int", "(", "i", ")", "for", "i", "in", "fp", ".", "readline", "(", ")", ".", "strip", "(", ")", ".", "split", "(", "b' '", ")", "[", "1", ":", "]", "]", "\n", "translate", "=", "[", "float", "(", "i", ")", "for", "i", "in", "fp", ".", "readline", "(", ")", ".", "strip", "(", ")", ".", "split", "(", "b' '", ")", "[", "1", ":", "]", "]", "\n", "scale", "=", "[", "float", "(", "i", ")", "for", "i", "in", "fp", ".", "readline", "(", ")", ".", "strip", "(", ")", ".", "split", "(", "b' '", ")", "[", "1", ":", "]", "]", "[", "0", "]", "\n", "line", "=", "fp", ".", "readline", "(", ")", "\n", "return", "dims", ",", "translate", ",", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.aux.binvox_rw.read_binvox": [[121, 133], ["os.path.exists", "open", "binvox_rw.read_header", "numpy.frombuffer", "numpy.repeat().astype", "np.transpose.reshape", "fp.close", "fp.read", "numpy.transpose", "numpy.repeat"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.binvox_rw.read_header", "home.repos.pwc.inspect_result.zwxu064_RANP.models.deepmedic.repeat"], ["", "def", "read_binvox", "(", "filename", ",", "coord_mode", "=", "'xzy'", ")", ":", "\n", "    ", "assert", "os", ".", "path", ".", "exists", "(", "filename", ")", "\n", "with", "open", "(", "filename", ",", "'rb'", ")", "as", "fp", ":", "\n", "        ", "dims", ",", "translate", ",", "scale", "=", "read_header", "(", "fp", ")", "\n", "raw_data", "=", "np", ".", "frombuffer", "(", "fp", ".", "read", "(", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "values", ",", "counts", "=", "raw_data", "[", ":", ":", "2", "]", ",", "raw_data", "[", "1", ":", ":", "2", "]", "\n", "voxel", "=", "np", ".", "repeat", "(", "values", ",", "counts", ")", ".", "astype", "(", "np", ".", "bool", ")", "\n", "voxel", "=", "voxel", ".", "reshape", "(", "dims", ")", "\n", "if", "coord_mode", "==", "'xyz'", ":", "\n", "            ", "voxel", "=", "np", ".", "transpose", "(", "voxel", ",", "(", "0", ",", "2", ",", "1", ")", ")", "\n", "", "fp", ".", "close", "(", ")", "\n", "", "return", "voxel", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.aux.binvox_rw.read_as_3d_array": [[134, 169], ["binvox_rw.read_header", "numpy.frombuffer", "numpy.repeat().astype", "np.transpose.reshape", "binvox_rw.Voxels", "fp.read", "numpy.transpose", "numpy.repeat"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.binvox_rw.read_header", "home.repos.pwc.inspect_result.zwxu064_RANP.models.deepmedic.repeat"], ["", "def", "read_as_3d_array", "(", "fp", ",", "fix_coords", "=", "True", ")", ":", "\n", "    ", "\"\"\" Read binary binvox format as array.\n\n    Returns the model with accompanying metadata.\n\n    Voxels are stored in a three-dimensional numpy array, which is simple and\n    direct, but may use a lot of memory for large models. (Storage requirements\n    are 8*(d^3) bytes, where d is the dimensions of the binvox model. Numpy\n    boolean arrays use a byte per element).\n\n    Doesn't do any checks on input except for the '#binvox' line.\n    \"\"\"", "\n", "dims", ",", "translate", ",", "scale", "=", "read_header", "(", "fp", ")", "\n", "raw_data", "=", "np", ".", "frombuffer", "(", "fp", ".", "read", "(", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "# if just using reshape() on the raw data:", "\n", "# indexing the array as array[i,j,k], the indices map into the", "\n", "# coords as:", "\n", "# i -> x", "\n", "# j -> z", "\n", "# k -> y", "\n", "# if fix_coords is true, then data is rearranged so that", "\n", "# mapping is", "\n", "# i -> x", "\n", "# j -> y", "\n", "# k -> z", "\n", "values", ",", "counts", "=", "raw_data", "[", ":", ":", "2", "]", ",", "raw_data", "[", "1", ":", ":", "2", "]", "\n", "data", "=", "np", ".", "repeat", "(", "values", ",", "counts", ")", ".", "astype", "(", "np", ".", "bool", ")", "\n", "data", "=", "data", ".", "reshape", "(", "dims", ")", "\n", "if", "fix_coords", ":", "\n", "# xzy to xyz TODO the right thing", "\n", "        ", "data", "=", "np", ".", "transpose", "(", "data", ",", "(", "0", ",", "2", ",", "1", ")", ")", "\n", "axis_order", "=", "'xyz'", "\n", "", "else", ":", "\n", "        ", "axis_order", "=", "'xzy'", "\n", "", "return", "Voxels", "(", "data", ",", "dims", ",", "translate", ",", "scale", ",", "axis_order", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.aux.binvox_rw.read_as_coord_array": [[171, 217], ["binvox_rw.read_header", "numpy.frombuffer", "numpy.cumsum", "numpy.concatenate().astype", "values.astype.astype", "zip", "numpy.array", "binvox_rw.Voxels", "fp.read", "np.array.extend", "numpy.vstack", "numpy.vstack", "numpy.ascontiguousarray", "numpy.concatenate", "range"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.binvox_rw.read_header"], ["", "def", "read_as_coord_array", "(", "fp", ",", "fix_coords", "=", "True", ")", ":", "\n", "    ", "\"\"\" Read binary binvox format as coordinates.\n\n    Returns binvox model with voxels in a \"coordinate\" representation, i.e.  an\n    3 x N array where N is the number of nonzero voxels. Each column\n    corresponds to a nonzero voxel and the 3 rows are the (x, z, y) coordinates\n    of the voxel.  (The odd ordering is due to the way binvox format lays out\n    data).  Note that coordinates refer to the binvox voxels, without any\n    scaling or translation.\n\n    Use this to save memory if your model is very sparse (mostly empty).\n\n    Doesn't do any checks on input except for the '#binvox' line.\n    \"\"\"", "\n", "dims", ",", "translate", ",", "scale", "=", "read_header", "(", "fp", ")", "\n", "raw_data", "=", "np", ".", "frombuffer", "(", "fp", ".", "read", "(", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "values", ",", "counts", "=", "raw_data", "[", ":", ":", "2", "]", ",", "raw_data", "[", "1", ":", ":", "2", "]", "\n", "\n", "index", ",", "end_index", "=", "0", ",", "0", "\n", "end_indices", "=", "np", ".", "cumsum", "(", "counts", ")", "\n", "indices", "=", "np", ".", "concatenate", "(", "(", "[", "0", "]", ",", "end_indices", "[", ":", "-", "1", "]", ")", ")", ".", "astype", "(", "end_indices", ".", "dtype", ")", "\n", "\n", "values", "=", "values", ".", "astype", "(", "np", ".", "bool", ")", "\n", "indices", "=", "indices", "[", "values", "]", "\n", "end_indices", "=", "end_indices", "[", "values", "]", "\n", "\n", "nz_voxels", "=", "[", "]", "\n", "for", "index", ",", "end_index", "in", "zip", "(", "indices", ",", "end_indices", ")", ":", "\n", "        ", "nz_voxels", ".", "extend", "(", "range", "(", "index", ",", "end_index", ")", ")", "\n", "", "nz_voxels", "=", "np", ".", "array", "(", "nz_voxels", ")", "\n", "# TODO are these dims correct?", "\n", "# according to docs,", "\n", "# index = x * wxh + z * width + y; // wxh = width * height = d * d", "\n", "\n", "x", "=", "nz_voxels", "/", "(", "dims", "[", "0", "]", "*", "dims", "[", "1", "]", ")", "\n", "zwpy", "=", "nz_voxels", "%", "(", "dims", "[", "0", "]", "*", "dims", "[", "1", "]", ")", "# z*w + y", "\n", "z", "=", "zwpy", "/", "dims", "[", "0", "]", "\n", "y", "=", "zwpy", "%", "dims", "[", "0", "]", "\n", "if", "fix_coords", ":", "\n", "        ", "data", "=", "np", ".", "vstack", "(", "(", "x", ",", "y", ",", "z", ")", ")", "\n", "axis_order", "=", "'xyz'", "\n", "", "else", ":", "\n", "        ", "data", "=", "np", ".", "vstack", "(", "(", "x", ",", "z", ",", "y", ")", ")", "\n", "axis_order", "=", "'xzy'", "\n", "", "return", "Voxels", "(", "np", ".", "ascontiguousarray", "(", "data", ")", ",", "dims", ",", "translate", ",", "scale", ",", "axis_order", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.aux.binvox_rw.dense_to_sparse": [[219, 226], ["numpy.asarray", "ValueError", "numpy.nonzero"], "function", ["None"], ["", "def", "dense_to_sparse", "(", "voxel_data", ",", "dtype", "=", "np", ".", "int", ")", ":", "\n", "    ", "\"\"\" From dense representation to sparse (coordinate) representation.\n    No coordinate reordering.\n    \"\"\"", "\n", "if", "voxel_data", ".", "ndim", "!=", "3", ":", "\n", "        ", "raise", "ValueError", "(", "'voxel_data is wrong shape; should be 3D array.'", ")", "\n", "", "return", "np", ".", "asarray", "(", "np", ".", "nonzero", "(", "voxel_data", ")", ",", "dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.aux.binvox_rw.sparse_to_dense": [[228, 242], ["numpy.isscalar", "voxel_data.astype", "numpy.zeros", "ValueError", "numpy.atleast_2d", "numpy.any", "dims.flatten", "tuple"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.unet.losses.flatten"], ["", "def", "sparse_to_dense", "(", "voxel_data", ",", "dims", ",", "dtype", "=", "np", ".", "bool", ")", ":", "\n", "    ", "if", "voxel_data", ".", "ndim", "!=", "2", "or", "voxel_data", ".", "shape", "[", "0", "]", "!=", "3", ":", "\n", "        ", "raise", "ValueError", "(", "'voxel_data is wrong shape; should be 3xN array.'", ")", "\n", "", "if", "np", ".", "isscalar", "(", "dims", ")", ":", "\n", "        ", "dims", "=", "[", "dims", "]", "*", "3", "\n", "", "dims", "=", "np", ".", "atleast_2d", "(", "dims", ")", ".", "T", "\n", "# truncate to integers", "\n", "xyz", "=", "voxel_data", ".", "astype", "(", "np", ".", "int", ")", "\n", "# discard voxels that fall outside dims", "\n", "valid_ix", "=", "~", "np", ".", "any", "(", "(", "xyz", "<", "0", ")", "|", "(", "xyz", ">=", "dims", ")", ",", "0", ")", "\n", "xyz", "=", "xyz", "[", ":", ",", "valid_ix", "]", "\n", "out", "=", "np", ".", "zeros", "(", "dims", ".", "flatten", "(", ")", ",", "dtype", "=", "dtype", ")", "\n", "out", "[", "tuple", "(", "xyz", ")", "]", "=", "True", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.aux.binvox_rw.write": [[250, 299], ["fp.write", "fp.write", "fp.write", "fp.write", "fp.write", "binvox_rw.sparse_to_dense", "ValueError", "sparse_to_dense.flatten", "fp.write", "fp.write", "numpy.transpose().flatten", "fp.write", "fp.write", "chr", "chr", "str", "fp.write", "fp.write", "chr", "chr", "map", "map", "numpy.transpose", "chr", "chr"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.binvox_rw.write", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.binvox_rw.write", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.binvox_rw.write", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.binvox_rw.write", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.binvox_rw.write", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.binvox_rw.sparse_to_dense", "home.repos.pwc.inspect_result.zwxu064_RANP.unet.losses.flatten", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.binvox_rw.write", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.binvox_rw.write", "home.repos.pwc.inspect_result.zwxu064_RANP.unet.losses.flatten", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.binvox_rw.write", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.binvox_rw.write", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.binvox_rw.write", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.binvox_rw.write"], ["", "def", "write", "(", "voxel_model", ",", "fp", ")", ":", "\n", "    ", "\"\"\" Write binary binvox format.\n\n    Note that when saving a model in sparse (coordinate) format, it is first\n    converted to dense format.\n\n    Doesn't check if the model is 'sane'.\n\n    \"\"\"", "\n", "if", "voxel_model", ".", "data", ".", "ndim", "==", "2", ":", "\n", "# TODO avoid conversion to dense", "\n", "        ", "dense_voxel_data", "=", "sparse_to_dense", "(", "voxel_model", ".", "data", ",", "voxel_model", ".", "dims", ")", "\n", "", "else", ":", "\n", "        ", "dense_voxel_data", "=", "voxel_model", ".", "data", "\n", "\n", "", "fp", ".", "write", "(", "'#binvox 1\\n'", ")", "\n", "fp", ".", "write", "(", "'dim '", "+", "' '", ".", "join", "(", "map", "(", "str", ",", "voxel_model", ".", "dims", ")", ")", "+", "'\\n'", ")", "\n", "fp", ".", "write", "(", "'translate '", "+", "' '", ".", "join", "(", "map", "(", "str", ",", "voxel_model", ".", "translate", ")", ")", "+", "'\\n'", ")", "\n", "fp", ".", "write", "(", "'scale '", "+", "str", "(", "voxel_model", ".", "scale", ")", "+", "'\\n'", ")", "\n", "fp", ".", "write", "(", "'data\\n'", ")", "\n", "if", "voxel_model", ".", "axis_order", "not", "in", "(", "'xzy'", ",", "'xyz'", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'Unsupported voxel model axis order'", ")", "\n", "\n", "", "if", "voxel_model", ".", "axis_order", "==", "'xzy'", ":", "\n", "        ", "voxels_flat", "=", "dense_voxel_data", ".", "flatten", "(", ")", "\n", "", "elif", "voxel_model", ".", "axis_order", "==", "'xyz'", ":", "\n", "        ", "voxels_flat", "=", "np", ".", "transpose", "(", "dense_voxel_data", ",", "(", "0", ",", "2", ",", "1", ")", ")", ".", "flatten", "(", ")", "\n", "\n", "# keep a sort of state machine for writing run length encoding", "\n", "", "state", "=", "voxels_flat", "[", "0", "]", "\n", "ctr", "=", "0", "\n", "for", "c", "in", "voxels_flat", ":", "\n", "        ", "if", "c", "==", "state", ":", "\n", "            ", "ctr", "+=", "1", "\n", "# if ctr hits max, dump", "\n", "if", "ctr", "==", "255", ":", "\n", "                ", "fp", ".", "write", "(", "chr", "(", "state", ")", ")", "\n", "fp", ".", "write", "(", "chr", "(", "ctr", ")", ")", "\n", "ctr", "=", "0", "\n", "", "", "else", ":", "\n", "# if switch state, dump", "\n", "            ", "fp", ".", "write", "(", "chr", "(", "state", ")", ")", "\n", "fp", ".", "write", "(", "chr", "(", "ctr", ")", ")", "\n", "state", "=", "c", "\n", "ctr", "=", "1", "\n", "# flush out remainders", "\n", "", "", "if", "ctr", ">", "0", ":", "\n", "        ", "fp", ".", "write", "(", "chr", "(", "state", ")", ")", "\n", "fp", ".", "write", "(", "chr", "(", "ctr", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.aux.data.init": [[28, 39], ["torch.LongTensor", "torch.LongTensor", "globals", "globals", "globals", "globals", "print", "int", "print", "int", "globals", "globals"], "function", ["None"], ["def", "init", "(", "c", ",", "resolution", "=", "50", ",", "sz", "=", "50", "*", "8", "+", "8", ",", "batchSize", "=", "16", ")", ":", "\n", "    ", "globals", "(", ")", "[", "'categ'", "]", "=", "c", "\n", "globals", "(", ")", "[", "'resolution'", "]", "=", "resolution", "\n", "globals", "(", ")", "[", "'batchSize'", "]", "=", "batchSize", "\n", "globals", "(", ")", "[", "'spatialSize'", "]", "=", "torch", ".", "LongTensor", "(", "[", "sz", "]", "*", "3", ")", "\n", "if", "categ", "==", "-", "1", ":", "\n", "        ", "print", "(", "'All categories: 50 classes'", ")", "\n", "globals", "(", ")", "[", "'nClassesTotal'", "]", "=", "int", "(", "classOffsets", "[", "-", "1", "]", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'categ '", ",", "categ", ",", "classes", "[", "categ", "]", ")", "\n", "globals", "(", ")", "[", "'nClassesTotal'", "]", "=", "int", "(", "nClasses", "[", "categ", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.aux.data.load": [[40, 45], ["numpy.loadtxt", "numpy.random.randint", "numpy.loadtxt().astype", "numpy.loadtxt"], "function", ["None"], ["", "", "def", "load", "(", "xF", ",", "c", ",", "classOffset", ",", "nc", ")", ":", "\n", "    ", "xl", "=", "np", ".", "loadtxt", "(", "xF", "[", "0", "]", ")", "\n", "xl", "/=", "(", "(", "xl", "**", "2", ")", ".", "sum", "(", "1", ")", ".", "max", "(", ")", "**", "0.5", ")", "\n", "y", "=", "np", ".", "loadtxt", "(", "xF", "[", "0", "]", "[", ":", "-", "9", "]", "+", "'seg'", ")", ".", "astype", "(", "'int64'", ")", "+", "classOffset", "-", "1", "\n", "return", "(", "xF", "[", "0", "]", ",", "xl", ",", "y", ",", "c", ",", "classOffset", ",", "nc", ",", "np", ".", "random", ".", "randint", "(", "1e6", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.aux.data.train": [[46, 104], ["print", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "range", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "len", "numpy.random.RandomState", "print", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "glob.glob", "d.append", "numpy.eye", "numpy.dot", "numpy.dot", "np.random.RandomState.uniform().astype", "numpy.floor().astype", "numpy.ones().astype", "xl_.append", "xf_.append", "y_.append", "categ_.append", "classOffset_.append", "nClasses_.append", "numpy.zeros", "mask_.append", "nPoints_.append", "numpy.hstack", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "glob.glob", "d.append", "enumerate", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.hstack", "numpy.hstack", "numpy.vstack", "data.load", "np.random.RandomState.randint", "numpy.linalg.qr", "np.random.RandomState.uniform", "numpy.floor", "numpy.ones", "numpy.ones", "numpy.vstack", "numpy.vstack", "data.load", "np.random.RandomState.randn", "numpy.ones"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.data.load", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.data.load"], ["", "def", "train", "(", ")", ":", "\n", "    ", "d", "=", "[", "]", "\n", "if", "categ", "==", "-", "1", ":", "\n", "        ", "for", "c", "in", "range", "(", "16", ")", ":", "\n", "            ", "if", "c", ">", "0", ":", "\n", "                ", "continue", "\n", "", "print", "(", "'train data create'", ",", "c", ")", "\n", "for", "x", "in", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "glob", ".", "glob", "(", "'train_val/'", "+", "categories", "[", "c", "]", "+", "'/*.pts.train'", ")", ",", "\n", "collate_fn", "=", "lambda", "x", ":", "load", "(", "x", ",", "c", ",", "classOffsets", "[", "c", "]", ",", "nClasses", "[", "c", "]", ")", ",", "\n", "num_workers", "=", "12", ")", ":", "\n", "                ", "d", ".", "append", "(", "x", ")", "\n", "", "", "", "else", ":", "\n", "        ", "for", "x", "in", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "glob", ".", "glob", "(", "'train_val/'", "+", "categories", "[", "categ", "]", "+", "'/*.pts.train'", ")", ",", "\n", "collate_fn", "=", "lambda", "x", ":", "load", "(", "x", ",", "categ", ",", "0", ",", "nClasses", "[", "categ", "]", ")", ",", "\n", "num_workers", "=", "12", ")", ":", "\n", "            ", "d", ".", "append", "(", "x", ")", "\n", "\n", "", "", "print", "(", "len", "(", "d", ")", ")", "\n", "def", "merge", "(", "tbl", ")", ":", "\n", "        ", "xl_", "=", "[", "]", "\n", "xf_", "=", "[", "]", "\n", "y_", "=", "[", "]", "\n", "categ_", "=", "[", "]", "\n", "mask_", "=", "[", "]", "\n", "classOffset_", "=", "[", "]", "\n", "nClasses_", "=", "[", "]", "\n", "nPoints_", "=", "[", "]", "\n", "np_random", "=", "np", ".", "random", ".", "RandomState", "(", "[", "x", "[", "-", "1", "]", "for", "x", "in", "tbl", "]", ")", "\n", "for", "_", ",", "xl", ",", "y", ",", "categ", ",", "classOffset", ",", "nClasses", ",", "idx", "in", "tbl", ":", "\n", "            ", "m", "=", "np", ".", "eye", "(", "3", ",", "dtype", "=", "'float32'", ")", "\n", "m", "[", "0", ",", "0", "]", "*=", "np_random", ".", "randint", "(", "0", ",", "2", ")", "*", "2", "-", "1", "\n", "m", "=", "np", ".", "dot", "(", "m", ",", "np", ".", "linalg", ".", "qr", "(", "np_random", ".", "randn", "(", "3", ",", "3", ")", ")", "[", "0", "]", ")", "\n", "xl", "=", "np", ".", "dot", "(", "xl", ",", "m", ")", "\n", "xl", "+=", "np_random", ".", "uniform", "(", "-", "1", ",", "1", ",", "(", "1", ",", "3", ")", ")", ".", "astype", "(", "'float32'", ")", "\n", "xl", "=", "np", ".", "floor", "(", "resolution", "*", "(", "4", "+", "xl", ")", ")", ".", "astype", "(", "'int64'", ")", "\n", "xf", "=", "np", ".", "ones", "(", "(", "xl", ".", "shape", "[", "0", "]", ",", "1", ")", ")", ".", "astype", "(", "'float32'", ")", "\n", "xl_", ".", "append", "(", "xl", ")", "\n", "xf_", ".", "append", "(", "xf", ")", "\n", "y_", ".", "append", "(", "y", ")", "\n", "categ_", ".", "append", "(", "np", ".", "ones", "(", "y", ".", "shape", "[", "0", "]", ",", "dtype", "=", "'int64'", ")", "*", "categ", ")", "\n", "classOffset_", ".", "append", "(", "classOffset", ")", "\n", "nClasses_", ".", "append", "(", "nClasses", ")", "\n", "mask", "=", "np", ".", "zeros", "(", "(", "y", ".", "shape", "[", "0", "]", ",", "nClassesTotal", ")", ",", "dtype", "=", "'float32'", ")", "\n", "mask", "[", ":", ",", "classOffset", ":", "classOffset", "+", "nClasses", "]", "=", "1", "\n", "mask_", ".", "append", "(", "mask", ")", "\n", "nPoints_", ".", "append", "(", "y", ".", "shape", "[", "0", "]", ")", "\n", "", "xl_", "=", "[", "np", ".", "hstack", "(", "[", "x", ",", "idx", "*", "np", ".", "ones", "(", "(", "x", ".", "shape", "[", "0", "]", ",", "1", ")", ",", "dtype", "=", "'int64'", ")", "]", ")", "for", "idx", ",", "x", "in", "enumerate", "(", "xl_", ")", "]", "\n", "return", "{", "'x'", ":", "[", "torch", ".", "from_numpy", "(", "np", ".", "vstack", "(", "xl_", ")", ")", ",", "torch", ".", "from_numpy", "(", "np", ".", "vstack", "(", "xf_", ")", ")", "]", ",", "\n", "'y'", ":", "torch", ".", "from_numpy", "(", "np", ".", "hstack", "(", "y_", ")", ")", ",", "\n", "'categ'", ":", "torch", ".", "from_numpy", "(", "np", ".", "hstack", "(", "categ_", ")", ")", ",", "\n", "'classOffset'", ":", "classOffset_", ",", "\n", "'nClasses'", ":", "nClasses_", ",", "\n", "'mask'", ":", "torch", ".", "from_numpy", "(", "np", ".", "vstack", "(", "mask_", ")", ")", ",", "\n", "'xf'", ":", "[", "x", "[", "0", "]", "for", "x", "in", "tbl", "]", ",", "\n", "'nPoints'", ":", "nPoints_", "}", "\n", "", "return", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "d", ",", "batch_size", "=", "batchSize", ",", "collate_fn", "=", "merge", ",", "num_workers", "=", "10", ",", "shuffle", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.aux.data.valid": [[105, 162], ["print", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "range", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "len", "numpy.random.RandomState", "print", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "glob.glob", "d.append", "numpy.eye", "numpy.dot", "numpy.dot", "np.random.RandomState.uniform().astype", "numpy.floor().astype", "xl_.append", "numpy.ones().astype", "xf_.append", "y_.append", "categ_.append", "classOffset_.append", "nClasses_.append", "numpy.zeros", "mask_.append", "nPoints_.append", "numpy.hstack", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "glob.glob", "d.append", "enumerate", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.hstack", "numpy.hstack", "numpy.vstack", "data.load", "np.random.RandomState.randint", "numpy.linalg.qr", "np.random.RandomState.uniform", "numpy.floor", "numpy.ones", "numpy.ones", "numpy.vstack", "numpy.vstack", "data.load", "np.random.RandomState.randn", "numpy.ones"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.data.load", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.data.load"], ["", "def", "valid", "(", ")", ":", "\n", "    ", "d", "=", "[", "]", "\n", "if", "categ", "==", "-", "1", ":", "\n", "        ", "for", "c", "in", "range", "(", "16", ")", ":", "\n", "            ", "if", "c", ">", "0", ":", "\n", "                ", "continue", "\n", "", "print", "(", "'valid create'", ",", "c", ")", "\n", "for", "x", "in", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "glob", ".", "glob", "(", "'train_val/'", "+", "categories", "[", "c", "]", "+", "'/*.pts.valid'", ")", ",", "\n", "collate_fn", "=", "lambda", "x", ":", "load", "(", "x", ",", "c", ",", "classOffsets", "[", "c", "]", ",", "nClasses", "[", "c", "]", ")", ",", "\n", "num_workers", "=", "12", ")", ":", "\n", "                ", "d", ".", "append", "(", "x", ")", "\n", "", "", "", "else", ":", "\n", "        ", "for", "x", "in", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "glob", ".", "glob", "(", "'train_val/'", "+", "categories", "[", "categ", "]", "+", "'/*.pts.valid'", ")", ",", "\n", "collate_fn", "=", "lambda", "x", ":", "load", "(", "x", ",", "categ", ",", "0", ",", "nClasses", "[", "categ", "]", ")", ",", "\n", "num_workers", "=", "12", ")", ":", "\n", "            ", "d", ".", "append", "(", "x", ")", "\n", "", "", "print", "(", "len", "(", "d", ")", ")", "\n", "def", "merge", "(", "tbl", ")", ":", "\n", "        ", "xl_", "=", "[", "]", "\n", "xf_", "=", "[", "]", "\n", "y_", "=", "[", "]", "\n", "categ_", "=", "[", "]", "\n", "mask_", "=", "[", "]", "\n", "classOffset_", "=", "[", "]", "\n", "nClasses_", "=", "[", "]", "\n", "nPoints_", "=", "[", "]", "\n", "np_random", "=", "np", ".", "random", ".", "RandomState", "(", "[", "x", "[", "-", "1", "]", "for", "x", "in", "tbl", "]", ")", "\n", "for", "_", ",", "xl", ",", "y", ",", "categ", ",", "classOffset", ",", "nClasses", ",", "idx", "in", "tbl", ":", "\n", "            ", "m", "=", "np", ".", "eye", "(", "3", ",", "dtype", "=", "'float32'", ")", "\n", "m", "[", "0", ",", "0", "]", "*=", "np_random", ".", "randint", "(", "0", ",", "2", ")", "*", "2", "-", "1", "\n", "m", "=", "np", ".", "dot", "(", "m", ",", "np", ".", "linalg", ".", "qr", "(", "np_random", ".", "randn", "(", "3", ",", "3", ")", ")", "[", "0", "]", ")", "\n", "xl", "=", "np", ".", "dot", "(", "xl", ",", "m", ")", "\n", "xl", "+=", "np_random", ".", "uniform", "(", "-", "1", ",", "1", ",", "(", "1", ",", "3", ")", ")", ".", "astype", "(", "'float32'", ")", "\n", "xl", "=", "np", ".", "floor", "(", "resolution", "*", "(", "4", "+", "xl", ")", ")", ".", "astype", "(", "'int64'", ")", "\n", "xl_", ".", "append", "(", "xl", ")", "\n", "xf", "=", "np", ".", "ones", "(", "(", "xl", ".", "shape", "[", "0", "]", ",", "1", ")", ")", ".", "astype", "(", "'float32'", ")", "\n", "xf_", ".", "append", "(", "xf", ")", "\n", "y_", ".", "append", "(", "y", ")", "\n", "categ_", ".", "append", "(", "np", ".", "ones", "(", "y", ".", "shape", "[", "0", "]", ",", "dtype", "=", "'int64'", ")", "*", "categ", ")", "\n", "classOffset_", ".", "append", "(", "classOffset", ")", "\n", "nClasses_", ".", "append", "(", "nClasses", ")", "\n", "mask", "=", "np", ".", "zeros", "(", "(", "y", ".", "shape", "[", "0", "]", ",", "nClassesTotal", ")", ",", "dtype", "=", "'float32'", ")", "\n", "mask", "[", ":", ",", "classOffset", ":", "classOffset", "+", "nClasses", "]", "=", "1", "\n", "mask_", ".", "append", "(", "mask", ")", "\n", "nPoints_", ".", "append", "(", "y", ".", "shape", "[", "0", "]", ")", "\n", "", "xl_", "=", "[", "np", ".", "hstack", "(", "[", "x", ",", "idx", "*", "np", ".", "ones", "(", "(", "x", ".", "shape", "[", "0", "]", ",", "1", ")", ",", "dtype", "=", "'int64'", ")", "]", ")", "for", "idx", ",", "x", "in", "enumerate", "(", "xl_", ")", "]", "\n", "return", "{", "'x'", ":", "[", "torch", ".", "from_numpy", "(", "np", ".", "vstack", "(", "xl_", ")", ")", ",", "torch", ".", "from_numpy", "(", "np", ".", "vstack", "(", "xf_", ")", ")", "]", ",", "\n", "'y'", ":", "torch", ".", "from_numpy", "(", "np", ".", "hstack", "(", "y_", ")", ")", ",", "\n", "'categ'", ":", "torch", ".", "from_numpy", "(", "np", ".", "hstack", "(", "categ_", ")", ")", ",", "\n", "'classOffset'", ":", "classOffset_", ",", "\n", "'nClasses'", ":", "nClasses_", ",", "\n", "'mask'", ":", "torch", ".", "from_numpy", "(", "np", ".", "vstack", "(", "mask_", ")", ")", ",", "\n", "'xf'", ":", "[", "x", "[", "0", "]", "for", "x", "in", "tbl", "]", ",", "\n", "'nPoints'", ":", "nPoints_", "}", "\n", "", "return", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "d", ",", "batch_size", "=", "batchSize", ",", "collate_fn", "=", "merge", ",", "num_workers", "=", "10", ",", "shuffle", "=", "True", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.zwxu064_RANP.aux.pc2voxel.random_trans": [[9, 11], ["numpy.random"], "function", ["None"], ["def", "random_trans", "(", "left", ",", "right", ")", ":", "\n", "  ", "return", "np_random", ".", "random", "(", ")", "*", "(", "right", "-", "left", ")", "+", "left", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.aux.pc2voxel.point_2_voxel": [[12, 145], ["numpy.floor", "numpy.repeat", "numpy.unique", "numpy.zeros", "voxel.reshape.flatten", "voxel.reshape.reshape", "numpy.eye", "numpy.dot", "numpy.dot", "np.dot.min", "np.dot.max", "print", "numpy.array", "numpy.arange", "numpy.expand_dims", "range", "numpy.hstack", "numpy.transpose", "range", "aux.binvox_rw.Voxels", "print", "numpy.zeros", "expand_gt[].reshape", "np.dot.min", "np.dot.max", "numpy.array", "numpy.unique", "numpy.unique", "numpy.unique", "numpy.array().reshape", "np.hstack.append", "numpy.int32", "overlaps[].reshape", "numpy.all", "numpy.unique", "numpy.argmax", "uni_data[].reshape", "voxel_gt.reshape.flatten", "voxel_gt.reshape.reshape", "str", "open", "aux.binvox_rw.Voxels.write", "numpy.ones", "numpy.randint", "numpy.linalg.qr", "numpy.vstack", "numpy.vstack", "len", "numpy.ones", "numpy.transpose", "str", "str", "str", "str", "str", "str", "numpy.ones", "numpy.randn", "pc2voxel.random_trans", "range", "numpy.array", "expand_gt.append", "numpy.int32", "numpy.meshgrid", "numpy.concatenate", "range"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.models.deepmedic.repeat", "home.repos.pwc.inspect_result.zwxu064_RANP.unet.losses.flatten", "home.repos.pwc.inspect_result.zwxu064_RANP.unet.losses.flatten", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.binvox_rw.write", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.pc2voxel.random_trans"], ["", "def", "point_2_voxel", "(", "spatial_size", ",", "dim", ",", "points", ",", "scale", ",", "ignore_label", "=", "255", ",", "result_dir", "=", "None", ",", "\n", "trans", "=", "None", ",", "enable_random_trans", "=", "False", ",", "enable_random_rotate", "=", "False", ",", "\n", "gt", "=", "None", ",", "enable_debug", "=", "False", ",", "enable_voxel_gt", "=", "False", ",", "\n", "enable_hard_padding", "=", "False", ")", ":", "\n", "  ", "assert", "dim", "*", "scale", "<=", "spatial_size", "\n", "assert", "points", ".", "min", "(", ")", ">=", "-", "1", "and", "points", ".", "max", "(", ")", "<=", "1", "\n", "enable_voxel_gt", "=", "None", "if", "(", "gt", "is", "None", ")", "else", "enable_voxel_gt", "\n", "trans", "=", "np", ".", "array", "(", "[", "[", "0.", ",", "0.", ",", "0.", "]", "]", ",", "dtype", "=", "np", ".", "float64", ")", ".", "T", "if", "(", "trans", "is", "None", ")", "else", "trans", "\n", "points", "=", "points", ".", "T", "if", "(", "points", ".", "shape", "[", "0", "]", "!=", "3", ")", "else", "points", "\n", "gt", "=", "gt", ".", "T", "if", "(", "gt", ".", "shape", "[", "0", "]", "!=", "1", ")", "else", "gt", "\n", "trans", "=", "trans", ".", "T", "if", "(", "not", "enable_random_trans", ")", "and", "(", "trans", ".", "shape", "[", "0", "]", "!=", "3", ")", "else", "trans", "\n", "n_points", "=", "points", ".", "shape", "[", "1", "]", "\n", "\n", "# Random rotate, move before translate to avoid index overflow", "\n", "if", "enable_random_rotate", ":", "\n", "    ", "m", "=", "np", ".", "eye", "(", "3", ",", "dtype", "=", "'float32'", ")", "\n", "m", "[", "0", ",", "0", "]", "*=", "np_random", ".", "randint", "(", "0", ",", "2", ")", "*", "2", "-", "1", "\n", "m", "=", "np", ".", "dot", "(", "m", ",", "np", ".", "linalg", ".", "qr", "(", "np_random", ".", "randn", "(", "3", ",", "3", ")", ")", "[", "0", "]", ")", "\n", "points", "=", "np", ".", "dot", "(", "m", ",", "points", ")", "\n", "\n", "# Scale > 1 is too slow", "\n", "", "if", "enable_hard_padding", ":", "\n", "    ", "assert", "scale", ">", "1", ",", "'Error! For hard padding, scale>1 while scale:{}'", ".", "format", "(", "scale", ")", "\n", "assert", "dim", "<=", "spatial_size", ",", "'Error! For hard padding, dim<=spatial size while dim:{}, spatial size:{}'", ".", "format", "(", "dim", ",", "spatial_size", ")", "\n", "spatial_size_org", "=", "spatial_size", "\n", "spatial_size", "=", "dim", "\n", "scale", "=", "1", "\n", "\n", "# points (3,n_points), formula is (points + trans) * (dim / 2) + spatial_size / 2 in [0, spatial_size]", "\n", "", "tmp", "=", "(", "spatial_size", "/", "2", ")", "/", "(", "dim", "/", "2", ")", "\n", "max_trans_p_left", "=", "-", "tmp", "-", "points", ".", "min", "(", "1", ")", "\n", "max_trans_p_right", "=", "tmp", "-", "points", ".", "max", "(", "1", ")", "\n", "\n", "if", "enable_debug", ":", "\n", "    ", "print", "(", "max_trans_p_left", ",", "max_trans_p_right", ")", "\n", "\n", "", "if", "enable_random_trans", ":", "\n", "    ", "trans", "=", "np", ".", "array", "(", "[", "[", "random_trans", "(", "max_trans_p_left", "[", "i", "]", ",", "max_trans_p_right", "[", "i", "]", ")", "]", "for", "i", "in", "range", "(", "3", ")", "]", ",", "dtype", "=", "trans", ".", "dtype", ")", "\n", "", "elif", "enable_debug", ":", "\n", "    ", "assert", "(", "trans", "[", "0", "]", ">=", "max_trans_p_left", "[", "0", "]", ")", "and", "(", "trans", "[", "0", "]", "<=", "max_trans_p_right", "[", "0", "]", ")", ",", "'x range in [{:.4f},{:.4f}]'", ".", "format", "(", "max_trans_p_left", "[", "0", "]", ",", "max_trans_p_right", "[", "0", "]", ")", "\n", "assert", "(", "trans", "[", "1", "]", ">=", "max_trans_p_left", "[", "1", "]", ")", "and", "(", "trans", "[", "1", "]", "<=", "max_trans_p_right", "[", "1", "]", ")", ",", "'y range in [{:.4f},{:.4f}]'", ".", "format", "(", "max_trans_p_left", "[", "1", "]", ",", "max_trans_p_right", "[", "1", "]", ")", "\n", "assert", "(", "trans", "[", "2", "]", ">=", "max_trans_p_left", "[", "2", "]", ")", "and", "(", "trans", "[", "2", "]", "<=", "max_trans_p_right", "[", "2", "]", ")", ",", "'z range in [{:.4f},{:.4f}]'", ".", "format", "(", "max_trans_p_left", "[", "2", "]", ",", "max_trans_p_right", "[", "2", "]", ")", "\n", "\n", "# Central moving is contained in +spatial_size // 2", "\n", "", "points", "=", "np", ".", "floor", "(", "(", "points", "+", "trans", ")", "*", "(", "dim", "/", "2", ")", "+", "spatial_size", "/", "2", ")", "\n", "expand_list", "=", "np", ".", "arange", "(", "0", ",", "scale", ")", "-", "scale", "//", "2", "# keep side equal distances", "\n", "expand_list", "=", "np", ".", "repeat", "(", "np", ".", "expand_dims", "(", "expand_list", ",", "0", ")", ",", "3", ",", "axis", "=", "0", ")", "\n", "expand_points", "=", "[", "]", "\n", "expand_gt", "=", "[", "]", "\n", "\n", "if", "(", "scale", ">", "1", ")", "or", "(", "gt", "is", "not", "None", ")", ":", "\n", "    ", "for", "idx", "in", "range", "(", "n_points", ")", ":", "\n", "      ", "expand_one", "=", "points", "[", ":", ",", "idx", ":", "idx", "+", "1", "]", "+", "expand_list", "\n", "x_list", "=", "np", ".", "unique", "(", "expand_one", "[", "0", ",", ":", "]", ")", "\n", "y_list", "=", "np", ".", "unique", "(", "expand_one", "[", "1", ",", ":", "]", ")", "\n", "z_list", "=", "np", ".", "unique", "(", "expand_one", "[", "2", ",", ":", "]", ")", "\n", "expand_one", "=", "np", ".", "array", "(", "np", ".", "meshgrid", "(", "x_list", ",", "y_list", ",", "z_list", ")", ")", ".", "reshape", "(", "3", ",", "-", "1", ")", "\n", "expand_points", ".", "append", "(", "expand_one", ")", "\n", "\n", "if", "gt", "is", "not", "None", ":", "\n", "        ", "gt_cat", "=", "np", ".", "vstack", "(", "[", "np", ".", "concatenate", "(", "[", "expand_one", "[", ":", ",", "num", "]", ",", "gt", "[", ":", ",", "idx", "]", "]", ")", "for", "num", "in", "range", "(", "expand_one", ".", "shape", "[", "1", "]", ")", "]", ")", "\n", "expand_gt", ".", "append", "(", "gt_cat", ")", "if", "gt", "is", "not", "None", "else", "None", "\n", "\n", "", "", "if", "gt", "is", "not", "None", ":", "\n", "      ", "expand_gt", "=", "np", ".", "vstack", "(", "expand_gt", ")", ".", "T", "\n", "\n", "", "expand_points", "=", "np", ".", "hstack", "(", "expand_points", ")", "\n", "", "else", ":", "\n", "    ", "expand_points", "=", "points", "\n", "\n", "", "coord", ",", "indice", ",", "counts", "=", "np", ".", "unique", "(", "expand_points", ",", "axis", "=", "1", ",", "return_index", "=", "True", ",", "return_counts", "=", "True", ")", "\n", "index", "=", "coord", "[", "0", ",", ":", "]", "*", "(", "spatial_size", "**", "2", ")", "+", "coord", "[", "1", ",", ":", "]", "*", "spatial_size", "+", "coord", "[", "2", ",", ":", "]", "\n", "voxel", "=", "np", ".", "zeros", "(", "(", "spatial_size", ",", "spatial_size", ",", "spatial_size", ")", ",", "dtype", "=", "bool", ")", "\n", "voxel", "=", "voxel", ".", "flatten", "(", ")", "\n", "voxel", "[", "np", ".", "int32", "(", "index", ")", "]", "=", "True", "\n", "voxel", "=", "voxel", ".", "reshape", "(", "spatial_size", ",", "spatial_size", ",", "spatial_size", ")", "\n", "\n", "mode", "=", "'xzy'", "\n", "voxel", "=", "np", ".", "transpose", "(", "voxel", ",", "(", "0", ",", "2", ",", "1", ")", ")", "if", "mode", "==", "'xzy'", "else", "voxel", "\n", "\n", "if", "gt", "is", "not", "None", ":", "\n", "# Assign label from voxels taken up the most, when two voxels with different labels merged to one voxel", "\n", "    ", "overlaps", "=", "coord", "[", ":", ",", "counts", ">", "1", "]", "# 23-Jan-2020, large number of overlaps make it very slow", "\n", "for", "over_idx", "in", "range", "(", "overlaps", ".", "shape", "[", "1", "]", ")", ":", "\n", "      ", "overlap", "=", "overlaps", "[", ":", ",", "over_idx", "]", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "area", "=", "np", ".", "all", "(", "expand_gt", "[", "0", ":", "3", ",", ":", "]", "==", "overlap", ",", "axis", "=", "0", ")", "\n", "value", "=", "expand_gt", "[", ":", ",", "area", "]", "\n", "uni_data", ",", "uni_counts", "=", "np", ".", "unique", "(", "value", ",", "axis", "=", "1", ",", "return_counts", "=", "True", ")", "\n", "if", "len", "(", "uni_counts", ")", "==", "1", ":", "continue", "\n", "max_index", "=", "np", ".", "argmax", "(", "uni_counts", ")", "\n", "expand_gt", "[", ":", ",", "area", "]", "=", "uni_data", "[", ":", ",", "max_index", "]", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "\n", "", "if", "enable_voxel_gt", ":", "\n", "      ", "voxel_gt", "=", "255", "*", "np", ".", "ones", "(", "(", "spatial_size", ",", "spatial_size", ",", "spatial_size", ")", ",", "dtype", "=", "bool", ")", "\n", "voxel_gt", "=", "voxel_gt", ".", "flatten", "(", ")", "\n", "voxel_gt", "[", "np", ".", "int32", "(", "index", ")", "]", "=", "expand_gt", "[", "3", ",", "indice", "]", "\n", "voxel_gt", "=", "voxel_gt", ".", "reshape", "(", "spatial_size", ",", "spatial_size", ",", "spatial_size", ")", "\n", "voxel_gt", "=", "np", ".", "transpose", "(", "voxel_gt", ",", "(", "0", ",", "2", ",", "1", ")", ")", "if", "mode", "==", "'xzy'", "else", "voxel_gt", "\n", "assert", "(", "voxel", "==", "True", ")", ".", "sum", "(", ")", "==", "(", "voxel_gt", "!=", "ignore_label", ")", ".", "sum", "(", ")", "\n", "# file_path = '{}/test_dim{}_size{}_scale{}.mat'.format(result_dir, dim, spatial_size, scale)", "\n", "# scio.savemat(file_path, {'gt': expand_gt[3,:]})", "\n", "", "else", ":", "\n", "      ", "voxel_gt", "=", "None", "\n", "\n", "", "", "if", "result_dir", "is", "not", "None", ":", "\n", "    ", "object", "=", "Voxels", "(", "voxel", ",", "[", "str", "(", "spatial_size", ")", ",", "str", "(", "spatial_size", ")", ",", "str", "(", "spatial_size", ")", "]", ",", "[", "str", "(", "0", ")", ",", "str", "(", "0", ")", ",", "str", "(", "0", ")", "]", ",", "str", "(", "spatial_size", ")", ",", "mode", ")", "\n", "print", "(", "'spatial size'", ",", "object", ".", "data", ".", "shape", ")", "\n", "file_path", "=", "'{}/test_dim{}_size{}_scale{}.binvox'", ".", "format", "(", "result_dir", ",", "dim", ",", "spatial_size", ",", "scale", ")", "\n", "\n", "with", "open", "(", "file_path", ",", "'w'", ")", "as", "fp", ":", "\n", "      ", "object", ".", "write", "(", "fp", ")", "\n", "\n", "", "", "if", "enable_hard_padding", ":", "\n", "    ", "voxel_padded", "=", "np", ".", "zeros", "(", "(", "spatial_size_org", ",", "spatial_size_org", ",", "spatial_size_org", ")", ",", "dtype", "=", "bool", ")", "\n", "offset_start", "=", "dim", "//", "2", "\n", "offset_end", "=", "offset_start", "+", "dim", "\n", "voxel_padded", "[", "offset_start", ":", "offset_end", ",", "offset_start", ":", "offset_end", ",", "offset_start", ":", "offset_end", "]", "=", "voxel", "\n", "del", "voxel", "\n", "voxel", "=", "voxel_padded", "\n", "\n", "if", "voxel_gt", "is", "not", "None", ":", "\n", "      ", "gt_padded", "=", "255", "*", "np", ".", "ones", "(", "(", "spatial_size_org", ",", "spatial_size_org", ",", "spatial_size_org", ")", ",", "dtype", "=", "bool", ")", "\n", "gt_padded", "[", "offset_start", ":", "offset_end", ",", "offset_start", ":", "offset_end", ",", "offset_start", ":", "offset_end", "]", "=", "voxel_gt", "\n", "del", "voxel_gt", "\n", "voxel_gt", "=", "gt_padded", "\n", "\n", "", "", "if", "enable_voxel_gt", ":", "\n", "    ", "return", "voxel", ",", "voxel_gt", "\n", "", "else", ":", "\n", "    ", "expand_gt_Np", "=", "255", "*", "np", ".", "ones", "(", "(", "1", ",", "3000", ")", ",", "dtype", "=", "'int64'", ")", "\n", "expand_gt_Np", "[", "0", ",", ":", "n_points", "]", "=", "expand_gt", "[", "-", "1", ",", ":", "]", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "return", "voxel", ",", "expand_gt_Np", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.aux.viz_voxel.viz_voxel": [[9, 61], ["numpy.unique", "numpy.empty", "range", "print", "time.time", "matplotlib.figure", "plt.figure.gca", "fig.gca.voxels", "print", "fig.gca.view_init", "matplotlib.axis", "copy.deepcopy", "len", "os.path.exists", "os.makedirs", "matplotlib.savefig", "matplotlib.title", "matplotlib.show", "matplotlib.pause", "matplotlib.close", "matplotlib.show", "scipy.loadmat", "len", "time.time"], "function", ["None"], ["def", "viz_voxel", "(", "file_name", "=", "None", ",", "voxel", "=", "None", ",", "enable_close_time", "=", "0", ",", "ignore_label", "=", "255", ",", "mask", "=", "None", ",", "\n", "title", "=", "None", ",", "elevation", "=", "30", ",", "azimuth", "=", "45", ",", "fixed_color", "=", "None", ",", "data_root", "=", "'.'", ",", "enable_save", "=", "False", ")", ":", "\n", "  ", "if", "file_name", "is", "not", "None", ":", "\n", "    ", "voxel", "=", "scio", ".", "loadmat", "(", "file_name", ")", "[", "'gt'", "]", "\n", "", "else", ":", "\n", "    ", "voxel", "=", "copy", ".", "deepcopy", "(", "voxel", ")", "\n", "\n", "", "classes", "=", "np", ".", "unique", "(", "voxel", "[", "voxel", "!=", "ignore_label", "]", ")", "\n", "colors", "=", "np", ".", "empty", "(", "voxel", ".", "shape", ",", "dtype", "=", "object", ")", "\n", "\n", "for", "idx", "in", "range", "(", "len", "(", "classes", ")", ")", ":", "\n", "    ", "if", "fixed_color", "is", "None", ":", "\n", "      ", "if", "idx", ">=", "len", "(", "colormap", ")", ":", "\n", "        ", "color", "=", "'white'", "\n", "", "else", ":", "\n", "        ", "color", "=", "colormap", "[", "idx", "]", "\n", "", "", "else", ":", "\n", "      ", "color", "=", "fixed_color", "\n", "\n", "", "colors", "[", "voxel", "==", "classes", "[", "idx", "]", "]", "=", "color", "\n", "\n", "", "voxel", "[", "voxel", "!=", "ignore_label", "]", "=", "True", "\n", "voxel", "[", "voxel", "==", "ignore_label", "]", "=", "False", "\n", "\n", "if", "mask", "is", "not", "None", ":", "\n", "    ", "voxel", "[", "mask", "==", "False", "]", "=", "False", "\n", "\n", "", "print", "(", "'Start to display ...'", ")", "\n", "time_start", "=", "time", ".", "time", "(", ")", "\n", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "ax", "=", "fig", ".", "gca", "(", "projection", "=", "'3d'", ")", "\n", "ax", ".", "voxels", "(", "voxel", ",", "facecolors", "=", "colors", ",", "edgecolor", "=", "'k'", ",", "linewidth", "=", "0.05", ")", "# edgecolor='k'", "\n", "print", "(", "'Display time: {:.4f} s'", ".", "format", "(", "time", ".", "time", "(", ")", "-", "time_start", ")", ")", "\n", "\n", "ax", ".", "view_init", "(", "elevation", ",", "azimuth", ")", "# elevation angle in z, azimuth angle in x-y", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "data_root", ")", ":", "\n", "    ", "os", ".", "makedirs", "(", "data_root", ")", "\n", "\n", "", "if", "enable_save", ":", "\n", "    ", "plt", ".", "savefig", "(", "'{}/{}.eps'", ".", "format", "(", "data_root", ",", "title", ")", ",", "format", "=", "'eps'", ")", "\n", "\n", "", "if", "title", "is", "not", "None", ":", "\n", "    ", "plt", ".", "title", "(", "title", ")", "\n", "\n", "", "if", "enable_close_time", ">", "0", ":", "\n", "    ", "plt", ".", "show", "(", "block", "=", "False", ")", "\n", "plt", ".", "pause", "(", "enable_close_time", ")", "\n", "plt", ".", "close", "(", ")", "\n", "", "else", ":", "\n", "    ", "plt", ".", "show", "(", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.zwxu064_RANP.aux.lr_scheduler.LR_Scheduler.__init__": [[30, 42], ["print"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "mode", ",", "base_lr", ",", "num_epochs", ",", "iters_per_epoch", "=", "0", ",", "\n", "lr_step", "=", "0", ",", "warmup_epochs", "=", "0", ")", ":", "\n", "        ", "self", ".", "mode", "=", "mode", "\n", "print", "(", "'Using {} LR Scheduler!'", ".", "format", "(", "self", ".", "mode", ")", ")", "\n", "self", ".", "lr", "=", "base_lr", "\n", "if", "mode", "==", "'step'", ":", "\n", "            ", "assert", "lr_step", "\n", "", "self", ".", "lr_step", "=", "lr_step", "\n", "self", ".", "iters_per_epoch", "=", "iters_per_epoch", "\n", "self", ".", "N", "=", "num_epochs", "*", "iters_per_epoch", "\n", "self", ".", "epoch", "=", "-", "1", "\n", "self", ".", "warmup_iters", "=", "warmup_epochs", "*", "iters_per_epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.aux.lr_scheduler.LR_Scheduler.__call__": [[43, 62], ["lr_scheduler.LR_Scheduler._adjust_learning_rate", "math.cos", "pow"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.lr_scheduler.LR_Scheduler._adjust_learning_rate"], ["", "def", "__call__", "(", "self", ",", "optimizer", ",", "i", ",", "epoch", ",", "best_pred", "=", "0", ")", ":", "\n", "        ", "T", "=", "epoch", "*", "self", ".", "iters_per_epoch", "+", "i", "\n", "if", "self", ".", "mode", "==", "'cos'", ":", "\n", "            ", "lr", "=", "0.5", "*", "self", ".", "lr", "*", "(", "1", "+", "math", ".", "cos", "(", "1.0", "*", "T", "/", "self", ".", "N", "*", "math", ".", "pi", ")", ")", "\n", "", "elif", "self", ".", "mode", "==", "'poly'", ":", "\n", "            ", "lr", "=", "self", ".", "lr", "*", "pow", "(", "(", "1", "-", "1.0", "*", "T", "/", "self", ".", "N", ")", ",", "0.9", ")", "\n", "", "elif", "self", ".", "mode", "==", "'step'", ":", "\n", "            ", "lr", "=", "self", ".", "lr", "*", "(", "0.1", "**", "(", "epoch", "//", "self", ".", "lr_step", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplemented", "\n", "# warm up lr schedule", "\n", "", "if", "self", ".", "warmup_iters", ">", "0", "and", "T", "<", "self", ".", "warmup_iters", ":", "\n", "            ", "lr", "=", "lr", "*", "1.0", "*", "T", "/", "self", ".", "warmup_iters", "\n", "", "if", "epoch", ">", "self", ".", "epoch", ":", "\n", "# print('\\n=>Epoches %i, learning rate = %.4f, \\", "\n", "#     previous best = %.4f' % (epoch, lr, best_pred))", "\n", "            ", "self", ".", "epoch", "=", "epoch", "\n", "", "assert", "lr", ">=", "0", "\n", "self", ".", "_adjust_learning_rate", "(", "optimizer", ",", "lr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.aux.lr_scheduler.LR_Scheduler._adjust_learning_rate": [[63, 71], ["len", "range", "len"], "methods", ["None"], ["", "def", "_adjust_learning_rate", "(", "self", ",", "optimizer", ",", "lr", ")", ":", "\n", "        ", "if", "len", "(", "optimizer", ".", "param_groups", ")", "==", "1", ":", "\n", "            ", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "=", "lr", "\n", "", "else", ":", "\n", "# enlarge the lr at the head", "\n", "            ", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "=", "lr", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "optimizer", ".", "param_groups", ")", ")", ":", "\n", "                ", "optimizer", ".", "param_groups", "[", "i", "]", "[", "'lr'", "]", "=", "lr", "*", "10", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.zwxu064_RANP.aux.dataloader.SHAPENET.__init__": [[47, 59], ["dataloader.get_datalist"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.dataloader.get_datalist"], []], "home.repos.pwc.inspect_result.zwxu064_RANP.aux.dataloader.SHAPENET.__getitem__": [[60, 78], ["dataloader.read_pcf", "aux.pc2voxel.point_2_voxel", "numpy.expand_dims", "torch.from_numpy", "torch.from_numpy().long", "torch.from_numpy.astype", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.dataloader.read_pcf", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.pc2voxel.point_2_voxel"], []], "home.repos.pwc.inspect_result.zwxu064_RANP.aux.dataloader.SHAPENET.__len__": [[79, 81], ["len"], "methods", ["None"], []], "home.repos.pwc.inspect_result.zwxu064_RANP.aux.dataloader.read_pcf": [[9, 21], ["numpy.loadtxt", "gt.reshape.reshape", "numpy.loadtxt().astype", "numpy.loadtxt", "xF.replace"], "function", ["None"], ["\n", "# Normalise? transforms.Normalize((0.1307,), (0.3081,))", "\n", "\n", "train_dataset", "=", "MNIST", "(", "\"{}/{}\"", ".", "format", "(", "args", ".", "relative_dir", ",", "\"../dataset\"", ")", ",", "True", ",", "data_transform", ",", "download", "=", "True", ")", "\n", "test_dataset", "=", "MNIST", "(", "\"{}/{}\"", ".", "format", "(", "args", ".", "relative_dir", ",", "\"../dataset\"", ")", ",", "False", ",", "data_transform", ",", "download", "=", "False", ")", "\n", "\n", "train_loader", "=", "DataLoader", "(", "train_dataset", ",", "train_batch_size", ",", "shuffle", "=", "enable_train_shuffle", ",", "num_workers", "=", "2", ",", "pin_memory", "=", "True", ")", "\n", "test_loader", "=", "DataLoader", "(", "test_dataset", ",", "val_batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "2", ",", "pin_memory", "=", "True", ")", "\n", "\n", "return", "train_loader", ",", "test_loader", "\n", "\n", "\n", "", "def", "get_cifar10_dataloaders", "(", "train_batch_size", ",", "test_batch_size", ",", "args", ",", "enable_train_shuffle", "=", "True", ",", "enable_train_trans", "=", "True", ")", ":", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.aux.dataloader.get_datalist": [[23, 44], ["range", "glob.glob", "glob.glob", "os.path.join", "list.append", "os.path.join", "list.append"], "function", ["None"], ["    ", "train_transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "RandomCrop", "(", "32", ",", "padding", "=", "4", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.4914", ",", "0.4822", ",", "0.4465", ")", ",", "(", "0.2023", ",", "0.1994", ",", "0.2010", ")", ")", "]", ")", "\n", "", "else", ":", "\n", "    ", "train_transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.4914", ",", "0.4822", ",", "0.4465", ")", ",", "(", "0.2023", ",", "0.1994", ",", "0.2010", ")", ")", "]", ")", "\n", "\n", "", "test_transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.4914", ",", "0.4822", ",", "0.4465", ")", ",", "(", "0.2023", ",", "0.1994", ",", "0.2010", ")", ")", "]", ")", "\n", "\n", "train_dataset", "=", "CIFAR10", "(", "\"{}/{}\"", ".", "format", "(", "args", ".", "relative_dir", ",", "\"../dataset\"", ")", ",", "True", ",", "train_transform", ",", "download", "=", "True", ")", "\n", "test_dataset", "=", "CIFAR10", "(", "\"{}/{}\"", ".", "format", "(", "args", ".", "relative_dir", ",", "\"../dataset\"", ")", ",", "False", ",", "test_transform", ",", "download", "=", "False", ")", "\n", "\n", "train_loader", "=", "DataLoader", "(", "train_dataset", ",", "train_batch_size", ",", "shuffle", "=", "enable_train_shuffle", ",", "num_workers", "=", "2", ",", "pin_memory", "=", "True", ")", "\n", "test_loader", "=", "DataLoader", "(", "test_dataset", ",", "test_batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "2", ",", "pin_memory", "=", "True", ")", "\n", "\n", "return", "train_loader", ",", "test_loader", "", "", ""]], "home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.AverageMeter.__init__": [[361, 363], ["utils.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.AverageMeter.reset"], []], "home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.AverageMeter.reset": [[364, 368], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.AverageMeter.update": [[369, 373], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.FlipChannels.__call__": [[376, 379], ["PIL.Image.fromarray", "numpy.array", "img.astype"], "methods", ["None"], []], "home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.MaskToTensor.__init__": [[382, 384], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.MaskToTensor.__call__": [[385, 392], ["torch.from_numpy", "numpy.array", "torch.from_numpy.long"], "methods", ["None"], []], "home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.GTToTensor.__init__": [[394, 396], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.GTToTensor.__call__": [[397, 406], ["numpy.divide", "torch.from_numpy", "numpy.array", "numpy.round", "torch.from_numpy.long"], "methods", ["None"], []], "home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.DeNormalize.__init__": [[409, 412], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.DeNormalize.__call__": [[413, 417], ["zip", "t.mul_().add_", "t.mul_"], "methods", ["None"], []], "home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.SlidingCrop.__init__": [[420, 424], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.SlidingCrop._pad": [[425, 433], ["max", "max", "numpy.pad", "numpy.pad"], "methods", ["None"], []], "home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.SlidingCrop.__call__": [[434, 465], ["max", "numpy.array", "numpy.array", "int", "range", "utils.SlidingCrop._pad", "PIL.Image.fromarray().convert", "PIL.Image.fromarray().convert", "math.ceil", "int", "int", "range", "math.ceil", "math.ceil", "utils.SlidingCrop._pad", "img_slices.append", "mask_slices.append", "slices_info.append", "PIL.Image.fromarray", "PIL.Image.fromarray", "PIL.Image.fromarray().convert", "PIL.Image.fromarray().convert", "PIL.Image.fromarray().convert.astype", "PIL.Image.fromarray().convert.astype", "float", "float", "PIL.Image.fromarray", "PIL.Image.fromarray", "img_sub.astype", "mask_sub.astype"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.SlidingCrop._pad", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.SlidingCrop._pad"], []], "home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.RandomCrop.__init__": [[468, 473], ["isinstance", "int", "int"], "methods", ["None"], []], "home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.RandomCrop.__call__": [[474, 503], ["isinstance", "random.randint", "random.randint", "max", "max", "outputs.append", "outputs.append", "math.ceil", "math.ceil", "PIL.ImageOps.expand"], "methods", ["None"], []], "home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.RandomCrop3D.__init__": [[507, 514], ["isinstance", "int", "int", "int"], "methods", ["None"], []], "home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.RandomCrop3D.__call__": [[515, 549], ["isinstance", "max", "max", "max", "random.randint", "random.randint", "random.randint", "outputs.append", "outputs.append", "math.ceil", "math.ceil", "math.ceil", "max", "max", "max"], "methods", ["None"], []], "home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.RandomHorizontalFlip.__init__": [[552, 554], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.RandomHorizontalFlip.__call__": [[555, 574], ["isinstance", "numpy.random.random", "outputs.append", "outputs.append", "torchvision.RandomHorizontalFlip"], "methods", ["None"], []], "home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.RandomVerticalFlip.__init__": [[577, 579], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.RandomVerticalFlip.__call__": [[580, 599], ["isinstance", "numpy.random.random", "outputs.append", "outputs.append", "torchvision.RandomVerticalFlip"], "methods", ["None"], []], "home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.CenterCrop.__init__": [[602, 608], ["isinstance", "int", "int"], "methods", ["None"], []], "home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.CenterCrop.__call__": [[609, 636], ["isinstance", "outputs.append", "outputs.append", "math.ceil", "math.ceil", "PIL.ImageOps.expand"], "methods", ["None"], []], "home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.RandomGaussianBlur.__call__": [[639, 654], ["isinstance", "outputs.append", "outputs.append", "random.random", "input.filter", "PIL.ImageFilter.GaussianBlur", "random.random"], "methods", ["None"], []], "home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.CrossEntropyLoss2D.__init__": [[657, 662], ["torch.nn.Module.__init__", "torch.nn.NLLLoss"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.StereoLoss.__init__"], []], "home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.CrossEntropyLoss2D.forward": [[664, 678], ["utils.CrossEntropyLoss2D.nll_loss", "len", "predicts.reshape.reshape.size", "predicts.reshape.reshape.reshape", "model.parameters", "predicts.reshape.reshape.size", "m.pow().sum", "m.pow"], "methods", ["None"], []], "home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.StereoLoss.__init__": [[681, 691], ["torch.nn.Module.__init__", "torch.nn.SmoothL1Loss", "torch.nn.L1Loss", "torch.nn.MSELoss"], "methods", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.StereoLoss.__init__"], []], "home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.StereoLoss.forward": [[692, 702], ["utils.StereoLoss.loss_fn", "model.parameters", "m.pow().sum", "m.pow"], "methods", ["None"], []], "home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.remove_tree": [[16, 23], ["os.walk", "os.remove", "os.path.join", "file.split", "wildcards.split"], "function", ["None"], ["self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n", "", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.parse_json": [[26, 34], ["os.path.exists", "open", "json.load"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.data.load"], ["\n", "", "", "class", "Logger", "(", "object", ")", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ",", "path", ",", "header", ")", ":", "\n", "        ", "self", ".", "log_file", "=", "open", "(", "path", ",", "'w'", ")", "\n", "self", ".", "logger", "=", "csv", ".", "writer", "(", "self", ".", "log_file", ",", "delimiter", "=", "'\\t'", ")", "\n", "\n", "self", ".", "logger", ".", "writerow", "(", "header", ")", "\n", "self", ".", "header", "=", "header", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.check_dir": [[36, 39], ["os.path.exists", "os.makedirs"], "function", ["None"], ["", "def", "__del", "(", "self", ")", ":", "\n", "        ", "self", ".", "log_file", ".", "close", "(", ")", "\n", "\n", "", "def", "log", "(", "self", ",", "values", ")", ":", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.print_info": [[41, 63], ["len", "zip", "print", "range", "obj.keys", "isinstance", "isinstance"], "function", ["None"], ["for", "col", "in", "self", ".", "header", ":", "\n", "            ", "assert", "col", "in", "values", "\n", "write_values", ".", "append", "(", "values", "[", "col", "]", ")", "\n", "\n", "", "self", ".", "logger", ".", "writerow", "(", "write_values", ")", "\n", "self", ".", "log_file", ".", "flush", "(", ")", "\n", "\n", "\n", "", "", "def", "load_value_file", "(", "file_path", ")", ":", "\n", "    ", "with", "open", "(", "file_path", ",", "'r'", ")", "as", "input_file", ":", "\n", "        ", "value", "=", "float", "(", "input_file", ".", "read", "(", ")", ".", "rstrip", "(", "'\\n\\r'", ")", ")", "\n", "\n", "", "return", "value", "\n", "\n", "\n", "", "def", "calculate_accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"Computes the precision@k for the specified values of k\"\"\"", "\n", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n"]], "home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.save_disp_image": [[65, 86], ["numpy.round", "PIL.Image.fromarray", "Image.fromarray.save", "len", "np.transpose.squeeze", "numpy.multiply", "np.round.astype", "PIL.Image.fromarray", "Image.fromarray.save", "np.transpose.size", "np.transpose.cpu().data.numpy", "scale.data.numpy", "len", "np.transpose.squeeze", "numpy.transpose", "np.transpose.size", "np.transpose.size", "np.transpose.cpu().data.numpy().astype", "np.transpose.cpu", "np.transpose.cpu().data.numpy", "np.transpose.cpu"], "function", ["None"], ["res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "        ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "\n", "\n", "", "def", "save_checkpoint", "(", "state", ",", "is_best", ",", "opt", ")", ":", "\n", "    ", "torch", ".", "save", "(", "state", ",", "'%s/%s_checkpoint.pth'", "%", "(", "opt", ".", "result_path", ",", "opt", ".", "store_name", ")", ")", "\n", "if", "is_best", ":", "\n", "        ", "shutil", ".", "copyfile", "(", "'%s/%s_checkpoint.pth'", "%", "(", "opt", ".", "result_path", ",", "opt", ".", "store_name", ")", ",", "'%s/%s_best.pth'", "%", "(", "opt", ".", "result_path", ",", "opt", ".", "store_name", ")", ")", "\n", "\n", "\n", "", "", "def", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ",", "opt", ")", ":", "\n", "    ", "\"\"\"Sets the learning rate to the initial LR decayed by 10 every 30 epochs\"\"\"", "\n", "lr_new", "=", "opt", ".", "lr", "*", "(", "0.1", "**", "(", "sum", "(", "epoch", ">=", "np", ".", "array", "(", "opt", ".", "lr_steps", ")", ")", ")", ")", "\n", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "lr_new", "\n", "#param_group['lr'] = opt.learning_rate", "\n", "\n", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.write_to_tensorboard": [[88, 108], ["obj.keys", "writer.add_image", "obj.keys", "writer.add_scalar", "writer.add_scalar"], "function", ["None"], []], "home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.fast_hist": [[112, 119], ["numpy.bincount().reshape", "numpy.bincount", "label_true[].astype"], "function", ["None"], []], "home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.get_upsampling_weight": [[121, 134], ["numpy.zeros", "torch.from_numpy", "abs", "abs", "list", "list", "range", "range"], "function", ["None"], []], "home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.get_adaptive_crop_size": [[136, 152], ["data_large.size", "data_small.size", "min", "min", "len", "len", "isinstance"], "function", ["None"], []], "home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.evaluate": [[154, 173], ["numpy.zeros", "zip", "utils.fast_hist", "numpy.errstate", "numpy.divide", "numpy.divide", "numpy.nanmean", "numpy.divide", "numpy.nanmean", "numpy.divide", "lp.flatten", "lt.flatten", "numpy.diag().sum", "np.zeros.sum", "numpy.diag", "np.zeros.sum", "numpy.diag", "np.zeros.sum", "np.zeros.sum", "numpy.diag", "numpy.diag", "np.zeros.sum", "np.zeros.sum"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.fast_hist", "home.repos.pwc.inspect_result.zwxu064_RANP.unet.losses.flatten", "home.repos.pwc.inspect_result.zwxu064_RANP.unet.losses.flatten"], []], "home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.cal_accuracy": [[175, 187], ["predict.size", "numpy.absolute", "numpy.subtract", "len", "numpy.sum", "predict.cpu().data.numpy", "gt.cpu().data.numpy", "len", "numpy.less_equal", "predict.cpu", "gt.cpu"], "function", ["None"], []], "home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.weight_init": [[189, 223], ["enumerate", "model.modules", "isinstance", "isinstance", "torch.nn.init.orthogonal_", "torch.nn.init.constant_", "torch.nn.init.normal_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.xavier_normal_", "torch.nn.init.constant_", "torch.nn.init.normal_"], "function", ["None"], []], "home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.weight_fixed": [[232, 236], ["range", "len", "obj[].parameters"], "function", ["None"], []], "home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.check_valid": [[238, 247], ["torch.isnan().any", "torch.isinf().any", "torch.isnan", "torch.isinf"], "function", ["None"], []], "home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.to_tensor_custom": [[249, 251], ["torch.from_numpy().type().to", "torch.from_numpy().type", "torch.from_numpy"], "function", ["None"], []], "home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.colorize_mask": [[253, 258], ["PIL.Image.fromarray().convert", "Image.fromarray().convert.putpalette", "PIL.Image.fromarray", "mask.astype"], "function", ["None"], []], "home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.visualize_context": [[260, 266], ["Image.fromarray.float().cpu().detach", "PIL.Image.fromarray", "Image.fromarray.max", "Image.fromarray.numpy", "Image.fromarray.float().cpu", "Image.fromarray.float"], "function", ["None"], []], "home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.get_params_per": [[267, 292], ["isinstance", "isinstance", "isinstance", "isinstance", "len", "len", "len", "len", "len", "len"], "function", ["None"], []], "home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.get_model_state_dict": [[295, 302], ["hasattr", "model.module.state_dict", "model.state_dict"], "function", ["None"], []], "home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.load_optimizer_state_dict": [[304, 315], ["optimizer.load_state_dict", "optimizer.state.values", "state.items", "isinstance", "v.cuda", "v.cpu"], "function", ["None"], []], "home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.check_data_input": [[317, 345], ["isinstance", "math.floor", "math.ceil", "matplotlib.figure", "len", "math.sqrt", "matplotlib.show", "matplotlib.pause", "matplotlib.close", "matplotlib.show", "plt.figure.add_subplot", "input.size", "len", "matplotlib.imshow", "matplotlib.imshow", "len", "matplotlib.imshow", "input.size", "input[].permute"], "function", ["None"], []], "home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.adjust_learning_rate": [[347, 352], ["print"], "function", ["None"], []], "home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.split_weight_bias": [[354, 357], ["list", "filter", "model.named_parameters"], "function", ["None"], []], "home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.model_transfer_last_layer": [[704, 728], ["enumerate", "model.encoders.named_modules", "model.final_conv.weight.size", "model.final_conv.weight.size", "torch.nn.Parameter", "utils.weight_init_single_layer", "isinstance", "model.final_conv.weight.new_zeros", "torch.nn.Parameter", "layer.weight.size", "layer.weight.size", "torch.nn.Parameter", "utils.weight_init_single_layer", "model.final_conv.bias.new_zeros", "layer.weight.new_zeros"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.weight_init_single_layer", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.weight_init_single_layer"], []], "home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.weight_init_single_layer": [[730, 744], ["torch.nn.init.orthogonal_", "torch.nn.init.constant_", "torch.nn.init.xavier_normal_", "torch.nn.init.constant_", "torch.nn.init.normal_", "utils.weight_init", "utils.weight_init"], "function", ["home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.weight_init", "home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.weight_init"], []], "home.repos.pwc.inspect_result.zwxu064_RANP.aux.utils.remove_module_key": [[746, 752], ["collections.OrderedDict", "state_dict.items"], "function", ["None"], []]}