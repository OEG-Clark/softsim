{"home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.None.common_args.str2bool": [[5, 14], ["isinstance", "v.lower", "v.lower", "argparse.ArgumentTypeError"], "function", ["None"], ["def", "str2bool", "(", "v", ")", ":", "\n", "    ", "if", "isinstance", "(", "v", ",", "bool", ")", ":", "\n", "        ", "return", "v", "\n", "", "if", "v", ".", "lower", "(", ")", "in", "(", "'yes'", ",", "'true'", ",", "'t'", ",", "'y'", ",", "'1'", ")", ":", "\n", "        ", "return", "True", "\n", "", "elif", "v", ".", "lower", "(", ")", "in", "(", "'no'", ",", "'false'", ",", "'f'", ",", "'n'", ",", "'0'", ")", ":", "\n", "        ", "return", "False", "\n", "", "else", ":", "\n", "        ", "raise", "argparse", ".", "ArgumentTypeError", "(", "'Boolean value expected.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.None.common_args.parse_args": [[15, 117], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "config.update_config"], "function", ["home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.verify_data_model.check_data_model.parse_args", "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.config.default.update_config"], ["", "", "def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Train dual network'", ")", "\n", "parser", ".", "add_argument", "(", "'--cfg'", ",", "\n", "help", "=", "'experiment configure file name'", ",", "\n", "required", "=", "True", ",", "\n", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--logDir'", ",", "\n", "help", "=", "'log directory'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "''", ")", "\n", "parser", ".", "add_argument", "(", "'--model'", ",", "\n", "help", "=", "'Choose one among simplified, simsiam and simclr'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"simplified\"", ")", "\n", "parser", ".", "add_argument", "(", "'--local_rank'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "'--normalize_repr'", ",", "\n", "help", "=", "'Whether to normalize representations while training'", ",", "\n", "type", "=", "str2bool", ",", "\n", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--ema_decay'", ",", "\n", "help", "=", "'The decay parameter for exponential moving average update'", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "'--use_masking'", ",", "\n", "help", "=", "'Whether to use masked data (independent masking)'", ",", "\n", "type", "=", "str2bool", ",", "\n", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--use_multimasking'", ",", "\n", "help", "=", "'Whether to use masked data loader for randomized masking of inputs'", ",", "\n", "type", "=", "str2bool", ",", "\n", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--n_aug'", ",", "\n", "help", "=", "'Number of augmentations per input if using multimasking'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "5", ")", "\n", "parser", ".", "add_argument", "(", "'--use_bn'", ",", "\n", "help", "=", "'Whether to use batch norm in simplified model'", ",", "\n", "type", "=", "str2bool", ",", "\n", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "\n", "help", "=", "'learning rate'", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "0.025", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "\n", "help", "=", "'training batch size'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "384", ")", "\n", "parser", ".", "add_argument", "(", "'--temperature'", ",", "\n", "help", "=", "'temperature in simclr loss'", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "0.05", ")", "\n", "parser", ".", "add_argument", "(", "'--use_pred'", ",", "\n", "help", "=", "'Include a predictor in the model?'", ",", "\n", "type", "=", "str2bool", ",", "\n", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--use_bias'", ",", "\n", "help", "=", "'should the encoder have a bias'", ",", "\n", "type", "=", "str2bool", ",", "\n", "default", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'--use_pred_bias'", ",", "\n", "help", "=", "'Should the predictor have a bias?'", ",", "\n", "type", "=", "str2bool", ",", "\n", "default", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'--m_identity'", ",", "\n", "help", "=", "'Use identity for M'", ",", "\n", "type", "=", "str2bool", ",", "\n", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--use_alt_norm'", ",", "\n", "help", "=", "'Use alternate normalization (i.e. column normalization) of weight matrices Wo and Wt (supported in simplified and simplified-no-alter).'", ",", "\n", "type", "=", "str2bool", ",", "\n", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--use_row_norm'", ",", "\n", "help", "=", "'Row normalize the weight matrices Wo and Wt (supported in simplified and simplified-no-alter).'", ",", "\n", "type", "=", "str2bool", ",", "\n", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--log_metrics'", ",", "\n", "help", "=", "\"should we log wandb metrics?\"", ",", "\n", "action", "=", "'store_true'", "\n", ")", "\n", "parser", ".", "add_argument", "(", "'--const_bias'", ",", "\n", "help", "=", "\"should the bias of encoder be a constant\"", ",", "\n", "action", "=", "'store_true'", "\n", ")", "\n", "parser", ".", "add_argument", "(", "'--clip_bias'", ",", "\n", "help", "=", "\"Should we clip bias?\"", ",", "\n", "action", "=", "'store_true'", "\n", ")", "\n", "parser", ".", "add_argument", "(", "'--bias_val'", ",", "\n", "help", "=", "\"The value of biases of encoder, if constant\"", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "0.005", "\n", ")", "\n", "parser", ".", "add_argument", "(", "'--wandb_project'", ",", "\n", "help", "=", "\"Name of project for purposes of wandb logging\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"experiment-log\"", "\n", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "update_config", "(", "config", ",", "args", ")", "\n", "return", "args", "\n", "", ""]], "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.None.main.main": [[27, 313], ["common_args.parse_args", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "torch.cuda.is_available", "print", "pathlib.Path", "torch.device", "pathlib.Path.exists", "print", "pathlib.Path.mkdir", "range", "print", "numpy.random.seed", "torch.manual_seed", "data_model.gen_sparse_coding_data.gen_z", "data_model.gen_sparse_coding_data.gen_epsilon", "data_model.gen_sparse_coding_data.gen_Winit", "data_model.gen_sparse_coding_data.gen_Winit", "torch.save", "wandb.init", "numpy.eye", "data_model.gen_sparse_coding_data.gen_M", "dataset.multimask_sparse_contr_dataset.MultiMaskedSparseContrastiveDataset", "torch.utils.data.DataLoader", "dataset.masked_sparse_contr_dataset.MaskedSparseContrastiveDataset", "torch.utils.data.DataLoader", "print", "models.sparse_contrastive_model_reduced.SparseContrastiveModelReduced", "model.to.to", "torch.optim.SGD", "torch.optim.SGD", "functions.train.alternate_train", "wandb.init.finish", "open", "pickle.dump", "pathlib.Path.joinpath", "list", "list", "print", "models.sparse_contrastive_model.SparseContrastiveModel", "model.to.to", "torch.optim.SGD", "torch.optim.SGD", "functions.train.alternate_train", "pathlib.Path.joinpath", "model.to.state_dict", "model.to.parameters", "model.to.parameters", "list", "list", "print", "models.sparse_contrastive_model.SparseContrastiveModel", "model.to.to", "torch.optim.SGD", "torch.optim.SGD", "functions.train.alternate_train", "model.to.parameters", "model.to.parameters", "list", "list", "print", "models.sparse_contrastive_no_alt.SparseContrastiveModelNoAlter", "model.to.to", "torch.optim.SGD", "functions.train.train", "model.to.parameters", "model.to.parameters", "model.to.parameters", "data_model.gen_sparse_coding_data.gen_Winit", "data_model.gen_sparse_coding_data.gen_Winit", "print", "models.sparse_contrastive_ml_model.SparseContrastiveMultiLayeredModel", "model.to.to", "torch.optim.SGD", "torch.optim.SGD", "functions.train.alternate_train", "list", "list", "model.to.parameters", "model.to.parameters"], "function", ["home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.verify_data_model.check_data_model.parse_args", "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.data_model.gen_sparse_coding_data.gen_z", "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.data_model.gen_sparse_coding_data.gen_epsilon", "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.data_model.gen_sparse_coding_data.gen_Winit", "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.data_model.gen_sparse_coding_data.gen_Winit", "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.data_model.gen_sparse_coding_data.gen_M", "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.functions.train.alternate_train", "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.functions.train.alternate_train", "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.functions.train.alternate_train", "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.functions.train.train", "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.data_model.gen_sparse_coding_data.gen_Winit", "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.data_model.gen_sparse_coding_data.gen_Winit", "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.functions.train.alternate_train"], ["def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "\n", "print", "(", "'config.n '", ",", "config", ".", "nn", ")", "\n", "print", "(", "'config.p '", ",", "config", ".", "p", ")", "\n", "print", "(", "'config.d '", ",", "config", ".", "d", ")", "\n", "print", "(", "'config.m '", ",", "config", ".", "m", ")", "\n", "print", "(", "'config.has_target_predictor '", ",", "config", ".", "has_target_predictor", ")", "\n", "print", "(", "'config.has_target_ReLU '", ",", "config", ".", "has_target_ReLU", ")", "\n", "print", "(", "'config.lr '", ",", "config", ".", "lr", ")", "\n", "print", "(", "'config.sigma0 '", ",", "config", ".", "sigma0", ")", "\n", "print", "(", "'args.normalize_repr'", ",", "args", ".", "normalize_repr", ")", "\n", "print", "(", "'args.ema_decay'", ",", "args", ".", "ema_decay", ")", "\n", "print", "(", "'args.use_multimasking'", ",", "args", ".", "use_multimasking", ")", "\n", "print", "(", "'args.use_bn'", ",", "args", ".", "use_bn", ")", "\n", "print", "(", "'args.temperature'", ",", "args", ".", "temperature", ")", "\n", "print", "(", "'args.use_pred'", ",", "args", ".", "use_pred", ")", "\n", "print", "(", "'args.m_identity'", ",", "args", ".", "m_identity", ")", "\n", "\n", "device", "=", "'cpu'", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "'cuda:{}'", ".", "format", "(", "args", ".", "local_rank", ")", ")", "\n", "", "print", "(", "f\"Using device {device}\"", ")", "\n", "\n", "# Save Result", "\n", "root_output_dir", "=", "Path", "(", "config", ".", "LOG_DIR", ")", "\n", "\n", "# set up logger", "\n", "if", "not", "root_output_dir", ".", "exists", "(", ")", ":", "\n", "        ", "print", "(", "'=> creating {}'", ".", "format", "(", "root_output_dir", ")", ")", "\n", "root_output_dir", ".", "mkdir", "(", ")", "\n", "\n", "", "log_metrics", "=", "args", ".", "log_metrics", "\n", "logger", "=", "None", "\n", "\n", "sigma0", "=", "None", "\n", "\n", "online_scheduler", "=", "None", "\n", "target_scheduler", "=", "None", "\n", "\n", "# number of augmentations if multimask", "\n", "n_aug", "=", "args", ".", "n_aug", "\n", "\n", "bias_val", "=", "args", ".", "bias_val", "\n", "if", "not", "args", ".", "const_bias", ":", "\n", "        ", "bias_val", "=", "\"trained\"", "\n", "\n", "", "for", "ws_noise", "in", "config", ".", "ws_noise_levels", ":", "#[1, 1.25, 1.5, 2]: ", "\n", "        ", "for", "sigma0", "in", "config", ".", "gaussian_noise_levels", ":", "\n", "            ", "for", "sparsity", "in", "config", ".", "sparsity_levels", ":", "\n", "                ", "for", "maskprob", "in", "config", ".", "masking_probs", ":", "\n", "                    ", "for", "i", "in", "range", "(", "config", ".", "num_exp", ")", ":", "\n", "\n", "                        ", "print", "(", "f\"Experiment {i+1}\"", ")", "\n", "\n", "np", ".", "random", ".", "seed", "(", "i", "+", "1", ")", "\n", "torch", ".", "manual_seed", "(", "i", "+", "1", ")", "\n", "\n", "# pnb == pred no bias", "\n", "if", "log_metrics", ":", "\n", "                            ", "run", "=", "wandb", ".", "init", "(", "project", "=", "args", ".", "wandb_project", ",", "reinit", "=", "True", ",", "name", "=", "f\"trial-{i}\"", ",", "\n", "group", "=", "f\"{args.model}-cn-{args.use_alt_norm}-rn-{args.use_row_norm}-I{args.m_identity}-bn-{args.use_bn}-\"", "+", "\n", "f\"norm-{args.normalize_repr}-p{config.p}-m{config.m}-d{config.d}-c{ws_noise}-bias-{bias_val}-sp-{sparsity}-\"", "+", "\n", "f\"mask{maskprob}-lr-{config.lr}-1h-{config.one_hot_latent}\"", ",", "\n", "config", "=", "config", ")", "\n", "logger", "=", "wandb", ".", "log", "\n", "\n", "# Generate data", "\n", "", "if", "args", ".", "m_identity", ":", "\n", "                            ", "M", "=", "np", ".", "eye", "(", "config", ".", "p", ")", "\n", "", "else", ":", "\n", "                            ", "M", "=", "gen_M", "(", "p", "=", "config", ".", "p", ",", "d", "=", "config", ".", "d", ")", "\n", "\n", "", "Z", "=", "gen_z", "(", "n", "=", "config", ".", "nn", ",", "d", "=", "config", ".", "d", ",", "prob", "=", "sparsity", ",", "one_hot_latent", "=", "config", ".", "one_hot_latent", ")", "\n", "\n", "Epsilon", "=", "gen_epsilon", "(", "n", "=", "config", ".", "nn", ",", "p", "=", "config", ".", "p", ",", "d", "=", "config", ".", "d", ",", "sigma0", "=", "sigma0", ")", "\n", "X", "=", "(", "M", "@", "Z", "+", "Epsilon", ")", ".", "T", "\n", "\n", "if", "args", ".", "use_multimasking", ":", "\n", "                            ", "dataset", "=", "MultiMaskedSparseContrastiveDataset", "(", "data", "=", "X", ",", "Z", "=", "Z", ".", "T", ",", "prob_ones", "=", "1", "-", "maskprob", ",", "n_aug", "=", "n_aug", ")", "\n", "train_loader", "=", "DataLoader", "(", "dataset", ",", "batch_size", "=", "config", ".", "batch_size", ",", "shuffle", "=", "True", ",", "drop_last", "=", "False", ",", "collate_fn", "=", "multi_mask_data_collate", ")", "\n", "", "else", ":", "\n", "                            ", "dataset", "=", "MaskedSparseContrastiveDataset", "(", "data", "=", "X", ",", "Z", "=", "Z", ".", "T", ",", "prob_ones", "=", "1", "-", "maskprob", ")", "\n", "train_loader", "=", "DataLoader", "(", "dataset", ",", "batch_size", "=", "config", ".", "batch_size", ",", "shuffle", "=", "True", ",", "drop_last", "=", "False", ")", "\n", "\n", "\n", "", "Wo_init", "=", "gen_Winit", "(", "M", ",", "c", "=", "ws_noise", ",", "m", "=", "config", ".", "m", ",", "d", "=", "config", ".", "d", ",", "p", "=", "config", ".", "p", ")", "\n", "Wt_init", "=", "gen_Winit", "(", "M", ",", "c", "=", "ws_noise", ",", "m", "=", "config", ".", "m", ",", "d", "=", "config", ".", "d", ",", "p", "=", "config", ".", "p", ")", "\n", "\n", "\n", "if", "args", ".", "model", "==", "'simplified'", ":", "\n", "                            ", "print", "(", "f\"Running {args.model}...\"", ")", "\n", "# Initialize model", "\n", "model", "=", "SparseContrastiveModelReduced", "(", "Wo_init", "=", "Wo_init", ",", "\n", "Wt_init", "=", "Wt_init", ",", "\n", "m", "=", "config", ".", "m", ",", "\n", "p", "=", "config", ".", "p", ",", "\n", "d", "=", "config", ".", "d", ",", "\n", "has_online_ReLU", "=", "config", ".", "has_online_ReLU", ",", "\n", "has_target_ReLU", "=", "config", ".", "has_target_ReLU", ",", "\n", "normalize_rep", "=", "args", ".", "normalize_repr", ",", "\n", "device", "=", "device", ",", "\n", "use_bn", "=", "args", ".", "use_bn", ",", "\n", "use_bias", "=", "args", ".", "use_bias", ",", "\n", "const_bias", "=", "args", ".", "const_bias", ",", "\n", "const_bias_val", "=", "bias_val", "\n", ")", "\n", "\n", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "\n", "online_optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "list", "(", "model", ".", "parameters", "(", ")", ")", ",", "lr", "=", "config", ".", "lr", ")", "\n", "target_optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "list", "(", "model", ".", "parameters", "(", ")", ")", ",", "lr", "=", "config", ".", "lr", ")", "\n", "\n", "assert", "not", "args", ".", "use_alt_norm", "==", "True", "or", "not", "args", ".", "use_row_norm", "==", "True", ",", "\"we cannot normalize both rows and cols\"", "\n", "\n", "val_dict", "=", "alternate_train", "(", "model", ",", "online_optimizer", "=", "online_optimizer", ",", "\n", "target_optimizer", "=", "target_optimizer", ",", "\n", "train_loader", "=", "train_loader", ",", "\n", "max_epochs", "=", "config", ".", "NUM_EPOCHES", ",", "\n", "M", "=", "M", ",", "\n", "ema_decay", "=", "args", ".", "ema_decay", ",", "\n", "log_metrics", "=", "log_metrics", ",", "\n", "logger", "=", "logger", ",", "\n", "online_scheduler", "=", "online_scheduler", ",", "\n", "target_scheduler", "=", "target_scheduler", ",", "\n", "col_norm", "=", "args", ".", "use_alt_norm", ",", "\n", "row_norm", "=", "args", ".", "use_row_norm", ",", "\n", "clip_bias", "=", "args", ".", "clip_bias", "\n", ")", "\n", "\n", "", "elif", "args", ".", "model", "==", "'simplified-pred'", ":", "\n", "                            ", "print", "(", "f\"Running {args.model}...\"", ")", "\n", "# Initialize model", "\n", "model", "=", "SparseContrastiveModel", "(", "Wo_init", "=", "Wo_init", ",", "\n", "Wt_init", "=", "Wt_init", ",", "\n", "m", "=", "config", ".", "m", ",", "\n", "p", "=", "config", ".", "p", ",", "\n", "d", "=", "config", ".", "d", ",", "\n", "has_online_ReLU", "=", "config", ".", "has_online_ReLU", ",", "\n", "has_target_ReLU", "=", "config", ".", "has_target_ReLU", ",", "\n", "normalize_rep", "=", "args", ".", "normalize_repr", ",", "\n", "device", "=", "device", ",", "\n", "use_bn", "=", "args", ".", "use_bn", ",", "\n", "use_pred", "=", "True", ",", "\n", "use_pred_bias", "=", "args", ".", "use_pred_bias", "\n", ")", "\n", "\n", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "\n", "online_optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "list", "(", "model", ".", "parameters", "(", ")", ")", ",", "lr", "=", "config", ".", "lr", ")", "\n", "target_optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "list", "(", "model", ".", "parameters", "(", ")", ")", ",", "lr", "=", "config", ".", "lr", ")", "\n", "\n", "# online_optimizer = torch.optim.SGD(list(model.Wo.parameters()) + list(model.Wp.parameters()), lr=config.lr)", "\n", "# target_optimizer = torch.optim.SGD(list(model.Wt.parameters()) + list(model.Wp.parameters()), lr=config.lr)", "\n", "\n", "val_dict", "=", "alternate_train", "(", "model", ",", "online_optimizer", "=", "online_optimizer", ",", "\n", "target_optimizer", "=", "target_optimizer", ",", "\n", "train_loader", "=", "train_loader", ",", "\n", "max_epochs", "=", "config", ".", "NUM_EPOCHES", ",", "\n", "M", "=", "M", ",", "\n", "ema_decay", "=", "args", ".", "ema_decay", ",", "\n", "log_metrics", "=", "log_metrics", ",", "\n", "logger", "=", "logger", ",", "\n", "online_scheduler", "=", "online_scheduler", ",", "\n", "target_scheduler", "=", "target_scheduler", ",", "\n", "col_norm", "=", "args", ".", "use_alt_norm", ",", "\n", "row_norm", "=", "args", ".", "use_row_norm", ",", "\n", ")", "\n", "\n", "", "elif", "args", ".", "model", "==", "'simplified-pred-norm'", ":", "\n", "                            ", "print", "(", "f\"Running {args.model}...\"", ")", "\n", "# Initialize model", "\n", "model", "=", "SparseContrastiveModel", "(", "Wo_init", "=", "Wo_init", ",", "\n", "Wt_init", "=", "Wt_init", ",", "\n", "m", "=", "config", ".", "m", ",", "\n", "p", "=", "config", ".", "p", ",", "\n", "d", "=", "config", ".", "d", ",", "\n", "has_online_ReLU", "=", "config", ".", "has_online_ReLU", ",", "\n", "has_target_ReLU", "=", "config", ".", "has_target_ReLU", ",", "\n", "normalize_rep", "=", "args", ".", "normalize_repr", ",", "\n", "device", "=", "device", ",", "\n", "use_bn", "=", "args", ".", "use_bn", ",", "\n", "use_pred", "=", "True", ",", "\n", "use_pred_bias", "=", "args", ".", "use_pred_bias", "\n", ")", "\n", "\n", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "\n", "online_optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "list", "(", "model", ".", "parameters", "(", ")", ")", ",", "lr", "=", "config", ".", "lr", ")", "\n", "target_optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "list", "(", "model", ".", "parameters", "(", ")", ")", ",", "lr", "=", "config", ".", "lr", ")", "\n", "\n", "val_dict", "=", "alternate_train", "(", "model", ",", "online_optimizer", "=", "online_optimizer", ",", "\n", "target_optimizer", "=", "target_optimizer", ",", "\n", "train_loader", "=", "train_loader", ",", "\n", "max_epochs", "=", "config", ".", "NUM_EPOCHES", ",", "\n", "M", "=", "M", ",", "\n", "ema_decay", "=", "args", ".", "ema_decay", ",", "\n", "log_metrics", "=", "log_metrics", ",", "\n", "logger", "=", "logger", ",", "\n", "online_scheduler", "=", "online_scheduler", ",", "\n", "target_scheduler", "=", "target_scheduler", ",", "\n", "col_norm", "=", "args", ".", "use_alt_norm", ",", "\n", "row_norm", "=", "args", ".", "use_row_norm", ",", "\n", "pred_norm", "=", "True", "\n", ")", "\n", "\n", "", "elif", "args", ".", "model", "==", "'simplified-noalt-pred'", ":", "\n", "                            ", "print", "(", "f\"Running {args.model}...\"", ")", "\n", "# Initialize model", "\n", "model", "=", "SparseContrastiveModelNoAlter", "(", "Wo_init", "=", "Wo_init", ",", "\n", "Wt_init", "=", "Wt_init", ",", "\n", "m", "=", "config", ".", "m", ",", "\n", "p", "=", "config", ".", "p", ",", "\n", "d", "=", "config", ".", "d", ",", "\n", "has_online_ReLU", "=", "config", ".", "has_online_ReLU", ",", "\n", "has_target_ReLU", "=", "config", ".", "has_target_ReLU", ",", "\n", "normalize_rep", "=", "args", ".", "normalize_repr", ",", "\n", "device", "=", "device", ",", "\n", "use_bn", "=", "args", ".", "use_bn", ",", "\n", "use_pred", "=", "args", ".", "use_pred", ",", "\n", "linear_pred", "=", "False", ",", "\n", "use_pred_bias", "=", "args", ".", "use_pred_bias", "\n", ")", "\n", "\n", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "config", ".", "lr", ")", "\n", "\n", "val_dict", "=", "train", "(", "model", ",", "optimizer", "=", "optimizer", ",", "\n", "train_loader", "=", "train_loader", ",", "\n", "max_epochs", "=", "config", ".", "NUM_EPOCHES", ",", "\n", "M", "=", "M", ",", "\n", "log_metrics", "=", "log_metrics", ",", "\n", "logger", "=", "logger", ",", "\n", "col_norm", "=", "args", ".", "use_alt_norm", ",", "\n", "row_norm", "=", "args", ".", "use_row_norm", ",", "\n", "pred_norm", "=", "True", "\n", ")", "\n", "\n", "", "elif", "args", ".", "model", "==", "'simplified-ml'", ":", "\n", "                            ", "Wo1_init", "=", "gen_Winit", "(", "M", ",", "c", "=", "ws_noise", ",", "m", "=", "config", ".", "m", ",", "d", "=", "config", ".", "d", ",", "p", "=", "config", ".", "m", ")", "\n", "Wt1_init", "=", "gen_Winit", "(", "M", ",", "c", "=", "ws_noise", ",", "m", "=", "config", ".", "m", ",", "d", "=", "config", ".", "d", ",", "p", "=", "config", ".", "m", ")", "\n", "\n", "print", "(", "f\"Running {args.model}...\"", ")", "\n", "# Initialize model", "\n", "model", "=", "SparseContrastiveMultiLayeredModel", "(", "Wo_init", "=", "Wo_init", ",", "\n", "Wt_init", "=", "Wt_init", ",", "\n", "Wo1_init", "=", "Wo1_init", ",", "\n", "Wt1_init", "=", "Wt1_init", ",", "\n", "m", "=", "config", ".", "m", ",", "\n", "p", "=", "config", ".", "p", ",", "\n", "d", "=", "config", ".", "d", ",", "\n", "has_online_ReLU", "=", "config", ".", "has_online_ReLU", ",", "\n", "has_target_ReLU", "=", "config", ".", "has_target_ReLU", ",", "\n", "normalize_rep", "=", "args", ".", "normalize_repr", ",", "\n", "device", "=", "device", ",", "\n", "use_bn", "=", "args", ".", "use_bn", "\n", ")", "\n", "\n", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "\n", "online_optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "list", "(", "model", ".", "parameters", "(", ")", ")", ",", "lr", "=", "config", ".", "lr", ")", "\n", "target_optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "list", "(", "model", ".", "parameters", "(", ")", ")", ",", "lr", "=", "config", ".", "lr", ")", "\n", "\n", "# online_optimizer = torch.optim.SGD(list(model.Wo.parameters()), lr=config.lr)", "\n", "# target_optimizer = torch.optim.SGD(list(model.Wt.parameters()), lr=config.lr)", "\n", "\n", "val_dict", "=", "alternate_train", "(", "model", ",", "online_optimizer", "=", "online_optimizer", ",", "\n", "target_optimizer", "=", "target_optimizer", ",", "\n", "train_loader", "=", "train_loader", ",", "\n", "max_epochs", "=", "config", ".", "NUM_EPOCHES", ",", "\n", "M", "=", "M", ",", "\n", "log_metrics", "=", "log_metrics", ",", "\n", "logger", "=", "logger", ",", "\n", "online_scheduler", "=", "None", ",", "\n", "target_scheduler", "=", "None", "\n", ")", "\n", "", "if", "log_metrics", ":", "\n", "                            ", "run", ".", "finish", "(", ")", "\n", "\n", "", "with", "open", "(", "root_output_dir", ".", "joinpath", "(", "f\"training_val_dict_c{ws_noise}_noise{sigma0}_sparse{sparsity}_mask{maskprob}_ema{args.ema_decay}_experiment{i}.pkl\"", ")", ",", "'wb'", ")", "as", "f", ":", "\n", "                            ", "pickle", ".", "dump", "(", "val_dict", ",", "f", ")", "\n", "\n", "", "torch", ".", "save", "(", "{", "\n", "'model_state_dict'", ":", "model", ".", "state_dict", "(", ")", "\n", "}", ",", "root_output_dir", ".", "joinpath", "(", "'final_model.pt'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.None.main_simsiam.main": [[26, 269], ["common_args.parse_args", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "torch.cuda.is_available", "torch.cuda.is_available", "print", "pathlib.Path", "torch.device", "torch.device", "pathlib.Path.exists", "print", "pathlib.Path.mkdir", "range", "print", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "data_model.gen_sparse_coding_data.gen_z", "data_model.gen_sparse_coding_data.gen_epsilon", "data_model.gen_sparse_coding_data.gen_Winit", "wandb.init", "numpy.eye", "data_model.gen_sparse_coding_data.gen_M", "dataset.multimask_sparse_contr_dataset.MultiMaskedSparseContrastiveDataset", "torch.utils.data.DataLoader", "dataset.masked_sparse_contr_dataset.MaskedSparseContrastiveDataset", "torch.utils.data.DataLoader", "models.simsiam.SimSiamModel", "model.to.to", "torch.optim.SGD", "torch.optim.SGD", "functions.train.train", "wandb.init.finish", "open", "pickle.dump", "open", "pickle.dump", "model.to.parameters", "models.simsiam.SimSiamModel", "model.to.to", "model.to.parameters", "torch.optim.SGD", "torch.optim.SGD", "model.to.to", "torch.optim.SGD", "torch.optim.SGD", "functions.train.train", "pathlib.Path.joinpath", "pathlib.Path.joinpath", "filter", "model.to.parameters", "data_model.gen_sparse_coding_data.gen_Winit", "models.simsiam_ml.SimSiamMultiLayeredModel", "model.to.to", "torch.optim.SGD", "torch.optim.SGD", "functions.train.train", "print", "model.to.parameters", "model.to.parameters", "models.simsiam_abl.SimSiamAblationModel", "model.to.to", "torch.optim.SGD", "torch.optim.SGD", "functions.train.train", "model.to.parameters", "models.simsiam_abl.SimSiamAblationModel", "torch.Parameter", "model.to.to", "model.to.parameters", "torch.optim.SGD", "torch.optim.SGD", "functions.train.train", "torch.eye", "torch.eye", "filter", "models.simsiam_abl.SimSiamAblationModel", "model.to.to", "torch.optim.SGD", "torch.optim.SGD", "functions.train.train", "print", "model.to.parameters", "model.to.parameters"], "function", ["home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.verify_data_model.check_data_model.parse_args", "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.data_model.gen_sparse_coding_data.gen_z", "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.data_model.gen_sparse_coding_data.gen_epsilon", "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.data_model.gen_sparse_coding_data.gen_Winit", "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.data_model.gen_sparse_coding_data.gen_M", "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.functions.train.train", "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.functions.train.train", "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.data_model.gen_sparse_coding_data.gen_Winit", "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.functions.train.train", "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.functions.train.train", "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.functions.train.train", "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.functions.train.train"], ["def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "\n", "print", "(", "'config.n '", ",", "config", ".", "nn", ")", "# debug", "\n", "print", "(", "'config.p '", ",", "config", ".", "p", ")", "# debug", "\n", "print", "(", "'config.d '", ",", "config", ".", "d", ")", "# debug", "\n", "print", "(", "'config.m '", ",", "config", ".", "m", ")", "# debug", "\n", "print", "(", "'config.has_target_predictor '", ",", "config", ".", "has_target_predictor", ")", "# debug", "\n", "print", "(", "'config.has_target_ReLU '", ",", "config", ".", "has_target_ReLU", ")", "# debug", "\n", "print", "(", "'config.lr '", ",", "config", ".", "lr", ")", "# debug", "\n", "print", "(", "'config.sigma0 '", ",", "config", ".", "sigma0", ")", "# debug", "\n", "print", "(", "'args.normalize_repr'", ",", "args", ".", "normalize_repr", ")", "\n", "print", "(", "'args.ema_decay'", ",", "args", ".", "ema_decay", ")", "\n", "print", "(", "'args.use_multimasking'", ",", "args", ".", "use_multimasking", ")", "\n", "print", "(", "'args.use_bn'", ",", "args", ".", "use_bn", ")", "\n", "print", "(", "'args.temperature'", ",", "args", ".", "temperature", ")", "\n", "print", "(", "'args.use_pred'", ",", "args", ".", "use_pred", ")", "\n", "print", "(", "'args.m_identity'", ",", "args", ".", "m_identity", ")", "\n", "\n", "device", "=", "'cpu'", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "'cuda:{}'", ".", "format", "(", "args", ".", "local_rank", ")", ")", "\n", "", "print", "(", "f\"Using device {device}\"", ")", "\n", "\n", "# Save Result", "\n", "root_output_dir", "=", "Path", "(", "config", ".", "LOG_DIR", ")", "\n", "\n", "# set up logger", "\n", "if", "not", "root_output_dir", ".", "exists", "(", ")", ":", "\n", "        ", "print", "(", "'=> creating {}'", ".", "format", "(", "root_output_dir", ")", ")", "\n", "root_output_dir", ".", "mkdir", "(", ")", "\n", "\n", "", "log_metrics", "=", "args", ".", "log_metrics", "\n", "logger", "=", "None", "\n", "\n", "sigma0", "=", "None", "\n", "# number of augmentations if multimask", "\n", "n_aug", "=", "5", "\n", "\n", "bias_val", "=", "args", ".", "bias_val", "\n", "if", "not", "args", ".", "const_bias", ":", "\n", "        ", "bias_val", "=", "\"trained\"", "\n", "\n", "", "for", "ws_noise", "in", "config", ".", "ws_noise_levels", ":", "\n", "        ", "for", "sigma0", "in", "config", ".", "gaussian_noise_levels", ":", "\n", "            ", "for", "sparsity", "in", "config", ".", "sparsity_levels", ":", "# proportion of non-zeros", "\n", "                ", "for", "maskprob", "in", "config", ".", "masking_probs", ":", "\n", "                    ", "for", "i", "in", "range", "(", "config", ".", "num_exp", ")", ":", "\n", "                        ", "print", "(", "f\"Experiment {i+1}\"", ")", "\n", "\n", "np", ".", "random", ".", "seed", "(", "i", "+", "1", ")", "\n", "torch", ".", "manual_seed", "(", "i", "+", "1", ")", "\n", "\n", "# pnb == pred no bias", "\n", "if", "log_metrics", ":", "\n", "                            ", "run", "=", "wandb", ".", "init", "(", "project", "=", "args", ".", "wandb_project", ",", "reinit", "=", "True", ",", "name", "=", "f\"trial-{i}\"", ",", "\n", "group", "=", "f\"{args.model}-cn-{args.use_alt_norm}-rn-{args.use_row_norm}-I{args.m_identity}-\"", "+", "\n", "f\"bn-{args.use_bn}-norm-{args.normalize_repr}-p{config.p}-m{config.m}-d{config.d}-c{ws_noise}-bias-{bias_val}-\"", "+", "\n", "f\"sp-{sparsity}-mask{maskprob}-lr-{config.lr}-1h-{config.one_hot_latent}\"", ",", "\n", "config", "=", "config", ")", "\n", "logger", "=", "wandb", ".", "log", "\n", "\n", "# Generate data", "\n", "", "if", "args", ".", "m_identity", ":", "\n", "                            ", "M", "=", "np", ".", "eye", "(", "config", ".", "p", ")", "\n", "", "else", ":", "\n", "                            ", "M", "=", "gen_M", "(", "p", "=", "config", ".", "p", ",", "d", "=", "config", ".", "d", ")", "\n", "\n", "", "Z", "=", "gen_z", "(", "n", "=", "config", ".", "nn", ",", "d", "=", "config", ".", "d", ",", "prob", "=", "sparsity", ",", "one_hot_latent", "=", "config", ".", "one_hot_latent", ")", "\n", "\n", "Epsilon", "=", "gen_epsilon", "(", "n", "=", "config", ".", "nn", ",", "p", "=", "config", ".", "p", ",", "d", "=", "config", ".", "d", ",", "sigma0", "=", "sigma0", ")", "\n", "X", "=", "(", "M", "@", "Z", "+", "Epsilon", ")", ".", "T", "\n", "\n", "if", "args", ".", "use_multimasking", ":", "\n", "                            ", "dataset", "=", "MultiMaskedSparseContrastiveDataset", "(", "data", "=", "X", ",", "Z", "=", "Z", ".", "T", ",", "prob_ones", "=", "1", "-", "maskprob", ",", "n_aug", "=", "n_aug", ")", "\n", "train_loader", "=", "DataLoader", "(", "dataset", ",", "batch_size", "=", "config", ".", "batch_size", ",", "shuffle", "=", "True", ",", "drop_last", "=", "False", ",", "collate_fn", "=", "multi_mask_data_collate", ")", "\n", "", "else", ":", "\n", "                            ", "dataset", "=", "MaskedSparseContrastiveDataset", "(", "data", "=", "X", ",", "Z", "=", "Z", ".", "T", ",", "prob_ones", "=", "1", "-", "maskprob", ")", "\n", "train_loader", "=", "DataLoader", "(", "dataset", ",", "batch_size", "=", "config", ".", "batch_size", ",", "shuffle", "=", "True", ",", "drop_last", "=", "False", ")", "\n", "\n", "\n", "", "Wo_init", "=", "gen_Winit", "(", "M", ",", "c", "=", "ws_noise", ",", "m", "=", "config", ".", "m", ",", "d", "=", "config", ".", "d", ",", "p", "=", "config", ".", "p", ")", "\n", "\n", "if", "args", ".", "model", "==", "'simsiam'", ":", "\n", "                            ", "model", "=", "SimSiamModel", "(", "Wo_init", "=", "Wo_init", ",", "\n", "m", "=", "config", ".", "m", ",", "\n", "p", "=", "config", ".", "p", ",", "\n", "d", "=", "config", ".", "d", ",", "\n", "has_online_ReLU", "=", "config", ".", "has_online_ReLU", ",", "\n", "has_target_ReLU", "=", "config", ".", "has_target_ReLU", ",", "\n", "device", "=", "device", ",", "\n", "use_bn", "=", "args", ".", "use_bn", ",", "\n", "batch_norm", "=", "config", ".", "batch_norm", ",", "\n", ")", "\n", "\n", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "config", ".", "lr", ")", "\n", "val_dict", "=", "train", "(", "model", ",", "optimizer", "=", "optimizer", ",", "\n", "train_loader", "=", "train_loader", ",", "\n", "max_epochs", "=", "config", ".", "NUM_EPOCHES", ",", "\n", "M", "=", "M", ",", "\n", "log_metrics", "=", "log_metrics", ",", "\n", "logger", "=", "logger", "\n", ")", "\n", "", "elif", "args", ".", "model", "==", "'simsiam-freeze'", ":", "\n", "                            ", "model", "=", "SimSiamModel", "(", "Wo_init", "=", "Wo_init", ",", "\n", "m", "=", "config", ".", "m", ",", "\n", "p", "=", "config", ".", "p", ",", "\n", "d", "=", "config", ".", "d", ",", "\n", "has_online_ReLU", "=", "config", ".", "has_online_ReLU", ",", "\n", "has_target_ReLU", "=", "config", ".", "has_target_ReLU", ",", "\n", "device", "=", "device", ",", "\n", "use_bn", "=", "args", ".", "use_bn", ",", "\n", "batch_norm", "=", "config", ".", "batch_norm", ",", "\n", ")", "\n", "# Freeze predictor weights", "\n", "model", ".", "Wp", ".", "weight", ".", "requires_grad", "=", "False", "\n", "model", ".", "Wp", ".", "bias", ".", "requires_grad", "=", "False", "\n", "\n", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "for", "param", "in", "model", ".", "parameters", "(", ")", ":", "\n", "                                ", "if", "param", ".", "requires_grad", ":", "\n", "                                    ", "print", "(", "param", ")", "\n", "\n", "", "", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "model", ".", "parameters", "(", ")", ")", ",", "lr", "=", "config", ".", "lr", ")", "\n", "\n", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "config", ".", "lr", ")", "\n", "val_dict", "=", "train", "(", "model", ",", "optimizer", "=", "optimizer", ",", "\n", "train_loader", "=", "train_loader", ",", "\n", "max_epochs", "=", "config", ".", "NUM_EPOCHES", ",", "\n", "M", "=", "M", ",", "\n", "log_metrics", "=", "log_metrics", ",", "\n", "logger", "=", "logger", "\n", ")", "\n", "\n", "", "elif", "args", ".", "model", "==", "'simsiam-ml'", ":", "\n", "                            ", "Wo1_init", "=", "gen_Winit", "(", "M", ",", "c", "=", "ws_noise", ",", "m", "=", "config", ".", "m", ",", "d", "=", "config", ".", "d", ",", "p", "=", "config", ".", "m", ")", "\n", "model", "=", "SimSiamMultiLayeredModel", "(", "Wo_init", "=", "Wo_init", ",", "\n", "Wo1_init", "=", "Wo1_init", ",", "\n", "m", "=", "config", ".", "m", ",", "\n", "p", "=", "config", ".", "p", ",", "\n", "d", "=", "config", ".", "d", ",", "\n", "has_online_ReLU", "=", "config", ".", "has_online_ReLU", ",", "\n", "has_target_ReLU", "=", "config", ".", "has_target_ReLU", ",", "\n", "device", "=", "device", ",", "\n", "use_bn", "=", "args", ".", "use_bn", ",", "\n", ")", "\n", "\n", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "config", ".", "lr", ")", "\n", "val_dict", "=", "train", "(", "model", ",", "optimizer", "=", "optimizer", ",", "\n", "train_loader", "=", "train_loader", ",", "\n", "max_epochs", "=", "config", ".", "NUM_EPOCHES", ",", "\n", "M", "=", "M", ",", "\n", "log_metrics", "=", "log_metrics", ",", "\n", "logger", "=", "logger", "\n", ")", "\n", "", "elif", "args", ".", "model", "==", "'simsiam-abl'", ":", "\n", "                            ", "model", "=", "SimSiamAblationModel", "(", "Wo_init", "=", "Wo_init", ",", "\n", "m", "=", "config", ".", "m", ",", "\n", "p", "=", "config", ".", "p", ",", "\n", "d", "=", "config", ".", "d", ",", "\n", "has_online_ReLU", "=", "config", ".", "has_online_ReLU", ",", "\n", "has_target_ReLU", "=", "config", ".", "has_target_ReLU", ",", "\n", "device", "=", "device", ",", "\n", "use_bn", "=", "args", ".", "use_bn", ",", "\n", "batch_norm", "=", "config", ".", "batch_norm", ",", "\n", ")", "\n", "\n", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "config", ".", "lr", ")", "\n", "\n", "val_dict", "=", "train", "(", "model", ",", "optimizer", "=", "optimizer", ",", "\n", "train_loader", "=", "train_loader", ",", "\n", "max_epochs", "=", "config", ".", "NUM_EPOCHES", ",", "\n", "M", "=", "M", ",", "\n", "log_metrics", "=", "log_metrics", ",", "\n", "logger", "=", "logger", "\n", ")", "\n", "", "elif", "args", ".", "model", "==", "'simsiam-abl-2'", ":", "\n", "                            ", "model", "=", "SimSiamAblationModel", "(", "Wo_init", "=", "Wo_init", ",", "\n", "m", "=", "config", ".", "m", ",", "\n", "p", "=", "config", ".", "p", ",", "\n", "d", "=", "config", ".", "d", ",", "\n", "has_online_ReLU", "=", "config", ".", "has_online_ReLU", ",", "\n", "has_target_ReLU", "=", "config", ".", "has_target_ReLU", ",", "\n", "device", "=", "device", ",", "\n", "use_bn", "=", "args", ".", "use_bn", ",", "\n", "batch_norm", "=", "config", ".", "batch_norm", ",", "\n", ")", "\n", "# Freeze predictor weights", "\n", "model", ".", "Wp", ".", "weight", ".", "data", "=", "nn", ".", "Parameter", "(", "torch", ".", "eye", "(", "config", ".", "m", ",", "config", ".", "m", ")", ",", "requires_grad", "=", "False", ")", "\n", "\n", "model", ".", "Wp", ".", "weight", ".", "requires_grad", "=", "False", "\n", "model", ".", "Wp", ".", "bias", ".", "requires_grad", "=", "False", "\n", "\n", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "\n", "for", "param", "in", "model", ".", "parameters", "(", ")", ":", "\n", "                                ", "if", "param", ".", "requires_grad", ":", "\n", "                                    ", "print", "(", "param", ")", "\n", "\n", "", "", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "model", ".", "parameters", "(", ")", ")", ",", "lr", "=", "config", ".", "lr", ")", "\n", "\n", "val_dict", "=", "train", "(", "model", ",", "optimizer", "=", "optimizer", ",", "\n", "train_loader", "=", "train_loader", ",", "\n", "max_epochs", "=", "config", ".", "NUM_EPOCHES", ",", "\n", "M", "=", "M", ",", "\n", "log_metrics", "=", "log_metrics", ",", "\n", "logger", "=", "logger", "\n", ")", "\n", "", "elif", "args", ".", "model", "==", "'simsiam-diag'", ":", "\n", "                            ", "model", "=", "SimSiamAblationModel", "(", "Wo_init", "=", "Wo_init", ",", "\n", "m", "=", "config", ".", "m", ",", "\n", "p", "=", "config", ".", "p", ",", "\n", "d", "=", "config", ".", "d", ",", "\n", "has_online_ReLU", "=", "config", ".", "has_online_ReLU", ",", "\n", "has_target_ReLU", "=", "config", ".", "has_target_ReLU", ",", "\n", "device", "=", "device", ",", "\n", "use_bn", "=", "args", ".", "use_bn", ",", "\n", "batch_norm", "=", "config", ".", "batch_norm", ",", "\n", "use_diag_pred", "=", "True", "\n", ")", "\n", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "config", ".", "lr", ")", "\n", "\n", "val_dict", "=", "train", "(", "model", ",", "optimizer", "=", "optimizer", ",", "\n", "train_loader", "=", "train_loader", ",", "\n", "max_epochs", "=", "config", ".", "NUM_EPOCHES", ",", "\n", "M", "=", "M", ",", "\n", "log_metrics", "=", "log_metrics", ",", "\n", "logger", "=", "logger", "\n", ")", "\n", "", "if", "log_metrics", ":", "\n", "                            ", "run", ".", "finish", "(", ")", "\n", "\n", "", "with", "open", "(", "root_output_dir", ".", "joinpath", "(", "f\"training_val_dict_c{ws_noise}_noise{sigma0}_sparse{sparsity}_mask{maskprob}_ema{args.ema_decay}_experiment{i}.pkl\"", ")", ",", "'wb'", ")", "as", "f", ":", "\n", "                            ", "pickle", ".", "dump", "(", "val_dict", ",", "f", ")", "\n", "\n", "", "with", "open", "(", "root_output_dir", ".", "joinpath", "(", "'model.pkl'", ")", ",", "'wb'", ")", "as", "f", ":", "\n", "                            ", "pickle", ".", "dump", "(", "model", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.None.main_simclr.main": [[27, 192], ["common_args.parse_args", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "torch.cuda.is_available", "torch.cuda.is_available", "print", "pathlib.Path", "torch.device", "torch.device", "pathlib.Path.exists", "print", "pathlib.Path.mkdir", "range", "print", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "data_model.gen_sparse_coding_data.gen_epsilon", "data_model.gen_sparse_coding_data.gen_Winit", "torch.save", "torch.save", "wandb.init", "numpy.eye", "data_model.gen_sparse_coding_data.gen_M", "data_model.gen_sparse_coding_data.gen_z_one_hot", "data_model.gen_sparse_coding_data.gen_z", "dataset.multimask_sparse_contr_dataset.MultiMaskedSparseContrastiveDataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "models.simclr.SimCLROrigModel", "model.to.to", "torch.optim.SGD", "torch.optim.SGD", "functions.train.train", "wandb.init.finish", "open", "pickle.dump", "pathlib.Path.joinpath", "dataset.masked_sparse_contr_dataset.MaskedSparseContrastiveDataset", "torch.utils.data.DataLoader", "dataset.dep_mask_contrastive_dataset.DependentMaskContrastiveDataset", "torch.utils.data.DataLoader", "model.to.parameters", "models.simclr.SimCLRModel", "model.to.to", "torch.optim.SGD", "torch.optim.SGD", "functions.train.train", "pathlib.Path.joinpath", "model.to.state_dict", "model.to.parameters", "dataset.simple_contrastive_dataset.SimpleContrastiveDataset", "torch.utils.data.DataLoader", "models.simclr_asym.SimCLRAsymmetricModel", "model.to.to", "torch.optim.SGD", "torch.optim.SGD", "functions.train.augment_and_train", "model.to.parameters"], "function", ["home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.verify_data_model.check_data_model.parse_args", "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.data_model.gen_sparse_coding_data.gen_epsilon", "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.data_model.gen_sparse_coding_data.gen_Winit", "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.data_model.gen_sparse_coding_data.gen_M", "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.data_model.gen_sparse_coding_data.gen_z_one_hot", "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.data_model.gen_sparse_coding_data.gen_z", "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.functions.train.train", "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.functions.train.train", "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.functions.train.augment_and_train"], ["def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "\n", "print", "(", "'config.n '", ",", "config", ".", "nn", ")", "# debug", "\n", "print", "(", "'config.p '", ",", "config", ".", "p", ")", "# debug", "\n", "print", "(", "'config.d '", ",", "config", ".", "d", ")", "# debug", "\n", "print", "(", "'config.m '", ",", "config", ".", "m", ")", "# debug", "\n", "print", "(", "'config.has_target_predictor '", ",", "config", ".", "has_target_predictor", ")", "# debug", "\n", "print", "(", "'config.has_target_ReLU '", ",", "config", ".", "has_target_ReLU", ")", "# debug", "\n", "print", "(", "'config.lr '", ",", "config", ".", "lr", ")", "# debug", "\n", "print", "(", "'config.sigma0 '", ",", "config", ".", "sigma0", ")", "# debug", "\n", "print", "(", "'args.normalize_repr'", ",", "args", ".", "normalize_repr", ")", "\n", "print", "(", "'args.ema_decay'", ",", "args", ".", "ema_decay", ")", "\n", "print", "(", "'args.use_masking'", ",", "args", ".", "use_masking", ")", "\n", "print", "(", "'args.use_multimasking'", ",", "args", ".", "use_multimasking", ")", "\n", "print", "(", "'args.use_bn'", ",", "args", ".", "use_bn", ")", "\n", "print", "(", "'args.temperature'", ",", "args", ".", "temperature", ")", "\n", "print", "(", "'args.use_pred'", ",", "args", ".", "use_pred", ")", "\n", "print", "(", "'args.m_identity'", ",", "args", ".", "m_identity", ")", "\n", "\n", "device", "=", "'cpu'", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "'cuda:{}'", ".", "format", "(", "args", ".", "local_rank", ")", ")", "\n", "", "print", "(", "f\"Using device {device}\"", ")", "\n", "\n", "# Save Result", "\n", "root_output_dir", "=", "Path", "(", "config", ".", "LOG_DIR", ")", "\n", "\n", "# set up logger", "\n", "if", "not", "root_output_dir", ".", "exists", "(", ")", ":", "\n", "        ", "print", "(", "'=> creating {}'", ".", "format", "(", "root_output_dir", ")", ")", "\n", "root_output_dir", ".", "mkdir", "(", "parents", "=", "True", ")", "\n", "\n", "", "log_metrics", "=", "args", ".", "log_metrics", "\n", "logger", "=", "None", "\n", "\n", "sigma0", "=", "None", "\n", "# number of augmentations if multimask", "\n", "n_aug", "=", "args", ".", "n_aug", "\n", "\n", "for", "sigma0", "in", "config", ".", "gaussian_noise_levels", ":", "\n", "        ", "for", "sparsity", "in", "config", ".", "sparsity_levels", ":", "# proportion of non-zeros", "\n", "            ", "for", "maskprob", "in", "config", ".", "masking_probs", ":", "\n", "                ", "for", "i", "in", "range", "(", "config", ".", "num_exp", ")", ":", "\n", "                    ", "print", "(", "f\"Experiment {i+1}\"", ")", "\n", "\n", "np", ".", "random", ".", "seed", "(", "i", "+", "1", ")", "\n", "torch", ".", "manual_seed", "(", "i", "+", "1", ")", "\n", "\n", "if", "log_metrics", ":", "\n", "                        ", "run", "=", "wandb", ".", "init", "(", "project", "=", "args", ".", "wandb_project", ",", "reinit", "=", "True", ",", "name", "=", "f\"trial-{i}\"", ",", "\n", "group", "=", "f\"{args.model}-I{args.m_identity}-bn-{args.use_bn}-norm-{args.normalize_repr}-p{config.p}-m{config.m}-d{config.d}-sp-{sparsity}-\"", "+", "\n", "f\"mask{maskprob}-lr-{config.lr}-1h-{config.one_hot_latent}-temperature-{args.temperature}\"", ",", "\n", "config", "=", "config", ")", "\n", "logger", "=", "wandb", ".", "log", "\n", "\n", "# Generate data", "\n", "", "if", "args", ".", "m_identity", ":", "\n", "                        ", "M", "=", "np", ".", "eye", "(", "config", ".", "p", ")", "\n", "", "else", ":", "\n", "                        ", "M", "=", "gen_M", "(", "p", "=", "config", ".", "p", ",", "d", "=", "config", ".", "d", ")", "\n", "\n", "", "if", "config", ".", "one_hot_latent", ":", "\n", "                        ", "Z", "=", "gen_z_one_hot", "(", "n", "=", "config", ".", "nn", ",", "d", "=", "config", ".", "d", ",", "prob", "=", "sparsity", ")", "\n", "", "else", ":", "\n", "                        ", "Z", "=", "gen_z", "(", "n", "=", "config", ".", "nn", ",", "d", "=", "config", ".", "d", ",", "prob", "=", "sparsity", ",", "one_hot_latent", "=", "config", ".", "one_hot_latent", ")", "\n", "\n", "", "Epsilon", "=", "gen_epsilon", "(", "n", "=", "config", ".", "nn", ",", "p", "=", "config", ".", "p", ",", "d", "=", "config", ".", "d", ",", "sigma0", "=", "sigma0", ")", "\n", "X", "=", "(", "M", "@", "Z", "+", "Epsilon", ")", ".", "T", "\n", "\n", "if", "args", ".", "use_multimasking", ":", "\n", "                        ", "dataset", "=", "MultiMaskedSparseContrastiveDataset", "(", "data", "=", "X", ",", "Z", "=", "Z", ".", "T", ",", "prob_ones", "=", "1", "-", "maskprob", ",", "n_aug", "=", "n_aug", ")", "\n", "train_loader", "=", "DataLoader", "(", "dataset", ",", "batch_size", "=", "config", ".", "batch_size", ",", "shuffle", "=", "True", ",", "drop_last", "=", "True", ",", "collate_fn", "=", "multi_mask_data_collate", ")", "\n", "", "elif", "args", ".", "use_masking", ":", "\n", "                        ", "dataset", "=", "MaskedSparseContrastiveDataset", "(", "data", "=", "X", ",", "Z", "=", "Z", ".", "T", ",", "prob_ones", "=", "1", "-", "maskprob", ")", "\n", "train_loader", "=", "DataLoader", "(", "dataset", ",", "batch_size", "=", "config", ".", "batch_size", ",", "shuffle", "=", "True", ",", "drop_last", "=", "True", ")", "\n", "", "else", ":", "\n", "                        ", "dataset", "=", "DependentMaskContrastiveDataset", "(", "data", "=", "X", ",", "Z", "=", "Z", ".", "T", ")", "\n", "train_loader", "=", "DataLoader", "(", "dataset", ",", "batch_size", "=", "config", ".", "batch_size", ",", "shuffle", "=", "True", ",", "drop_last", "=", "True", ")", "\n", "\n", "", "Wo_init", "=", "gen_Winit", "(", "M", ",", "c", "=", "None", ",", "m", "=", "config", ".", "m", ",", "d", "=", "config", ".", "d", ",", "p", "=", "config", ".", "p", ")", "\n", "\n", "if", "args", ".", "model", "==", "'simclr-orig'", ":", "\n", "# drop the last incomplete batch", "\n", "# Note: Use a larger dataset to train this, ensure that the model can see most of the dataset", "\n", "                        ", "train_loader", "=", "DataLoader", "(", "dataset", ",", "batch_size", "=", "config", ".", "batch_size", ",", "shuffle", "=", "True", ",", "drop_last", "=", "True", ")", "\n", "\n", "model", "=", "SimCLROrigModel", "(", "Wo_init", "=", "Wo_init", ",", "\n", "m", "=", "config", ".", "m", ",", "\n", "p", "=", "config", ".", "p", ",", "\n", "d", "=", "config", ".", "d", ",", "\n", "has_online_ReLU", "=", "config", ".", "has_online_ReLU", ",", "\n", "has_target_ReLU", "=", "config", ".", "has_target_ReLU", ",", "\n", "batch_size", "=", "config", ".", "batch_size", ",", "\n", "temperature", "=", "args", ".", "temperature", ",", "\n", "device", "=", "device", ")", "\n", "\n", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "config", ".", "lr", ")", "\n", "val_dict", "=", "train", "(", "model", ",", "optimizer", "=", "optimizer", ",", "\n", "train_loader", "=", "train_loader", ",", "\n", "max_epochs", "=", "config", ".", "NUM_EPOCHES", ",", "\n", "M", "=", "M", ",", "\n", "log_metrics", "=", "log_metrics", ",", "\n", "logger", "=", "logger", "\n", ")", "\n", "", "elif", "args", ".", "model", "==", "'simclr'", ":", "\n", "                            ", "model", "=", "SimCLRModel", "(", "Wo_init", "=", "Wo_init", ",", "\n", "m", "=", "config", ".", "m", ",", "\n", "p", "=", "config", ".", "p", ",", "\n", "d", "=", "config", ".", "d", ",", "\n", "has_online_ReLU", "=", "config", ".", "has_online_ReLU", ",", "\n", "has_target_ReLU", "=", "config", ".", "has_target_ReLU", ",", "\n", "batch_size", "=", "config", ".", "batch_size", "*", "n_aug", "if", "args", ".", "use_multimasking", "else", "config", ".", "batch_size", ",", "\n", "temperature", "=", "args", ".", "temperature", ",", "\n", "use_bn", "=", "args", ".", "use_bn", ",", "\n", "device", "=", "device", ")", "\n", "\n", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "config", ".", "lr", ")", "\n", "val_dict", "=", "train", "(", "model", ",", "optimizer", "=", "optimizer", ",", "\n", "train_loader", "=", "train_loader", ",", "\n", "max_epochs", "=", "config", ".", "NUM_EPOCHES", ",", "\n", "M", "=", "M", ",", "\n", "log_metrics", "=", "log_metrics", ",", "\n", "logger", "=", "logger", "\n", ")", "\n", "\n", "", "elif", "args", ".", "model", "==", "'simclr-alter-aug'", ":", "\n", "                        ", "dataset", "=", "SimpleContrastiveDataset", "(", "data", "=", "X", ",", "Z", "=", "Z", ".", "T", ",", "prob_ones", "=", "1", "-", "maskprob", ")", "\n", "train_loader", "=", "DataLoader", "(", "dataset", ",", "batch_size", "=", "config", ".", "batch_size", ",", "shuffle", "=", "True", ",", "drop_last", "=", "True", ")", "\n", "\n", "model", "=", "SimCLRAsymmetricModel", "(", "Wo_init", "=", "Wo_init", ",", "\n", "m", "=", "config", ".", "m", ",", "\n", "p", "=", "config", ".", "p", ",", "\n", "d", "=", "config", ".", "d", ",", "\n", "has_online_ReLU", "=", "config", ".", "has_online_ReLU", ",", "\n", "has_target_ReLU", "=", "config", ".", "has_target_ReLU", ",", "\n", "batch_size", "=", "config", ".", "batch_size", ",", "\n", "temperature", "=", "args", ".", "temperature", ",", "\n", "device", "=", "device", ")", "\n", "\n", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "config", ".", "lr", ")", "\n", "val_dict", "=", "augment_and_train", "(", "model", ",", "optimizer", "=", "optimizer", ",", "\n", "train_loader", "=", "train_loader", ",", "\n", "max_epochs", "=", "config", ".", "NUM_EPOCHES", ",", "\n", "M", "=", "M", ",", "\n", "prob_ones", "=", "1", "-", "maskprob", ",", "\n", "log_metrics", "=", "log_metrics", ",", "\n", "logger", "=", "logger", "\n", ")", "\n", "\n", "", "if", "log_metrics", ":", "\n", "                        ", "run", ".", "finish", "(", ")", "\n", "\n", "", "with", "open", "(", "root_output_dir", ".", "joinpath", "(", "f\"training_val_dict_c{None}_noise{sigma0}_sparse{sparsity}_mask{maskprob}_ema{args.ema_decay}_experiment{i}.pkl\"", ")", ",", "'wb'", ")", "as", "f", ":", "\n", "                        ", "pickle", ".", "dump", "(", "val_dict", ",", "f", ")", "\n", "\n", "", "torch", ".", "save", "(", "{", "\n", "'model_state_dict'", ":", "model", ".", "state_dict", "(", ")", "\n", "}", ",", "root_output_dir", ".", "joinpath", "(", "'final_model.pt'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.utils.log_metrics.check_sparse_coding_learning": [[7, 22], ["numpy.linalg.norm", "numpy.linalg.norm", "range", "torch.no_grad", "model.Wo.weight.cpu().detach().numpy", "abs", "max_mean_diff.append", "numpy.max", "numpy.median", "numpy.min", "max", "model.Wo.weight.cpu().detach", "model.Wo.weight.cpu"], "function", ["None"], ["def", "check_sparse_coding_learning", "(", "model", ",", "M", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "Wo", "=", "model", ".", "Wo", ".", "weight", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "", "d", "=", "model", ".", "d", "\n", "Wo_dot_M", "=", "Wo", "@", "M", "\n", "col_normsW", "=", "np", ".", "linalg", ".", "norm", "(", "Wo", ".", "T", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", "\n", "col_normsM", "=", "np", ".", "linalg", ".", "norm", "(", "M", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", "\n", "Wo_dot_M", "=", "Wo_dot_M", "/", "(", "col_normsW", ".", "T", "@", "col_normsM", ")", "\n", "max_mean_diff", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "d", ")", ":", "\n", "        ", "row_abs", "=", "abs", "(", "Wo_dot_M", "[", ":", ",", "i", "]", ")", "\n", "max_mean_diff", ".", "append", "(", "max", "(", "row_abs", ")", ")", "\n", "\n", "", "max_val", ",", "med_val", ",", "min_val", "=", "np", ".", "max", "(", "max_mean_diff", ")", ",", "np", ".", "median", "(", "max_mean_diff", ")", ",", "np", ".", "min", "(", "max_mean_diff", ")", "\n", "return", "max_val", ",", "med_val", ",", "min_val", ",", "Wo_dot_M", "\n", "\n"]], "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.utils.log_metrics.log_all_metrics": [[23, 109], ["vals_to_log.items", "logger", "torch.no_grad", "log_metrics.check_sparse_coding_learning", "log_metrics.check_support", "numpy.linalg.svd", "numpy.max", "numpy.min", "torch.norm", "model.Wo.weight.cpu().numpy", "numpy.linalg.svd", "numpy.max", "numpy.min", "torch.norm", "torch.norm", "numpy.linalg.svd", "numpy.max", "numpy.min", "numpy.linalg.svd", "numpy.max", "numpy.min", "torch.norm", "torch.norm", "model.Wp.weight.cpu().numpy", "numpy.linalg.svd", "numpy.max", "numpy.min", "matplotlib.clf", "seaborn.heatmap", "wandb.Image", "hasattr", "torch.norm", "torch.norm", "model.Wo.weight.cpu().numpy", "model.Wo.weight.cpu().numpy", "numpy.linalg.svd", "numpy.max", "numpy.min", "matplotlib.clf", "seaborn.heatmap", "wandb.Image", "matplotlib.clf", "seaborn.heatmap", "wandb.Image", "model.Wo.weight.cpu", "model.Wproj.weight.cpu().numpy", "model.Wo.weight.detach().cpu", "matplotlib.clf", "seaborn.heatmap", "wandb.Image", "matplotlib.clf", "seaborn.heatmap", "wandb.Image", "model.Wp.weight.cpu().numpy", "model.Wo.weight.detach().cpu", "model.Wt.weight.detach().cpu", "matplotlib.clf", "seaborn.heatmap", "wandb.Image", "model.Wp.weight.cpu", "model.Wproj.weight.detach().cpu", "model.Wp.weight.detach().cpu", "model.Wo.weight.cpu", "model.Wo.weight.cpu", "model.Wp.weight.detach().cpu", "model.Wproj.weight.cpu", "model.Wo.weight.detach", "model.Wp.weight.cpu", "model.Wo.weight.detach", "model.Wt.weight.detach", "model.Wproj.weight.detach", "model.Wp.weight.detach", "model.Wp.weight.detach"], "function", ["home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.utils.log_metrics.check_sparse_coding_learning", "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.utils.log_metrics.check_support"], ["", "def", "log_all_metrics", "(", "model", ",", "M", ",", "z", ",", "loss", ",", "logger", ",", "vals_to_log", "=", "{", "}", ",", "log_weights", "=", "False", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "max_val", ",", "med_val", ",", "min_val", ",", "Wo_dot_M", "=", "check_sparse_coding_learning", "(", "model", ",", "M", ")", "\n", "support", ",", "falsesupport", ",", "sparse", "=", "check_support", "(", "model", ",", "M", ",", "z", ")", "\n", "\n", "val_dict", "=", "{", "\"Max Wo_dot_M\"", ":", "max_val", ",", "\n", "\"Med Wo_dot_M\"", ":", "med_val", ",", "\n", "\"Min Wo_dot_M\"", ":", "min_val", ",", "\n", "\"loss\"", ":", "loss", ",", "\n", "\"support\"", ":", "support", ",", "\n", "\"false_support\"", ":", "falsesupport", ",", "\n", "\"sparse\"", ":", "sparse", ",", "\n", "\"Wo_norm\"", ":", "torch", ".", "norm", "(", "model", ".", "Wo", ".", "weight", ")", ",", "\n", "\"bo norm\"", ":", "torch", ".", "norm", "(", "model", ".", "Wo", ".", "bias", ")", "if", "model", ".", "Wo", ".", "bias", "is", "not", "None", "else", "torch", ".", "norm", "(", "model", ".", "bo", ")", ",", "\n", "}", "\n", "sigma_o", "=", "np", ".", "linalg", ".", "svd", "(", "model", ".", "Wo", ".", "weight", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "compute_uv", "=", "False", ")", "\n", "val_dict", "[", "\"Wo_largest_singular_val\"", "]", "=", "np", ".", "max", "(", "sigma_o", ")", "\n", "val_dict", "[", "\"Wo_smallest_singular_val\"", "]", "=", "np", ".", "min", "(", "sigma_o", ")", "\n", "val_dict", "[", "\"Wo_condition number\"", "]", "=", "val_dict", "[", "\"Wo_largest_singular_val\"", "]", "/", "val_dict", "[", "\"Wo_smallest_singular_val\"", "]", "\n", "\n", "if", "'simsiam'", "in", "model", ".", "name", ":", "\n", "            ", "sigma_p", "=", "np", ".", "linalg", ".", "svd", "(", "model", ".", "Wp", ".", "weight", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "compute_uv", "=", "False", ")", "\n", "val_dict", "[", "\"Wp_largest_singular_val\"", "]", "=", "np", ".", "max", "(", "sigma_p", ")", "\n", "val_dict", "[", "\"Wp_smallest_singular_val\"", "]", "=", "np", ".", "min", "(", "sigma_p", ")", "\n", "val_dict", "[", "\"Wp_condition number\"", "]", "=", "val_dict", "[", "\"Wp_largest_singular_val\"", "]", "/", "val_dict", "[", "\"Wp_smallest_singular_val\"", "]", "\n", "\n", "if", "model", ".", "name", "==", "'simsiam'", ":", "\n", "                ", "sigma_proj", "=", "np", ".", "linalg", ".", "svd", "(", "model", ".", "Wproj", ".", "weight", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "compute_uv", "=", "False", ")", "\n", "val_dict", "[", "\"Wproj_largest_singular_val\"", "]", "=", "np", ".", "max", "(", "sigma_proj", ")", "\n", "val_dict", "[", "\"Wproj_smallest_singular_val\"", "]", "=", "np", ".", "min", "(", "sigma_proj", ")", "\n", "val_dict", "[", "\"Wproj_condition number\"", "]", "=", "val_dict", "[", "\"Wproj_largest_singular_val\"", "]", "/", "val_dict", "[", "\"Wproj_smallest_singular_val\"", "]", "\n", "\n", "", "if", "log_weights", ":", "\n", "                ", "plt", ".", "clf", "(", ")", "\n", "ax", "=", "sns", ".", "heatmap", "(", "model", ".", "Wo", ".", "weight", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", "\n", "val_dict", "[", "\"w_e\"", "]", "=", "wandb", ".", "Image", "(", "ax", ")", "\n", "\n", "if", "model", ".", "name", "==", "'simsiam'", ":", "\n", "                    ", "plt", ".", "clf", "(", ")", "\n", "ax", "=", "sns", ".", "heatmap", "(", "model", ".", "Wproj", ".", "weight", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", "\n", "val_dict", "[", "\"w_proj\"", "]", "=", "wandb", ".", "Image", "(", "ax", ")", "\n", "\n", "", "if", "hasattr", "(", "model", ".", "Wp", ",", "'weight'", ")", ":", "\n", "                    ", "plt", ".", "clf", "(", ")", "\n", "ax", "=", "sns", ".", "heatmap", "(", "model", ".", "Wp", ".", "weight", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", "\n", "val_dict", "[", "\"w_pred\"", "]", "=", "wandb", ".", "Image", "(", "ax", ")", "\n", "\n", "", "", "", "if", "\"simplified\"", "in", "model", ".", "name", "or", "model", ".", "name", "==", "\"simplest\"", ":", "\n", "            ", "val_dict", "[", "\"Wt_norm\"", "]", "=", "torch", ".", "norm", "(", "model", ".", "Wt", ".", "weight", ")", "\n", "val_dict", "[", "\"weight diff\"", "]", "=", "torch", ".", "norm", "(", "model", ".", "Wo", ".", "weight", "-", "model", ".", "Wt", ".", "weight", ")", "\n", "val_dict", "[", "\"bt norm\"", "]", "=", "torch", ".", "norm", "(", "model", ".", "Wt", ".", "bias", ")", "if", "model", ".", "Wt", ".", "bias", "is", "not", "None", "else", "torch", ".", "norm", "(", "model", ".", "bt", ")", "\n", "\n", "sigma_o", "=", "np", ".", "linalg", ".", "svd", "(", "model", ".", "Wo", ".", "weight", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "compute_uv", "=", "False", ")", "\n", "val_dict", "[", "\"Wo_largest_singular_val\"", "]", "=", "np", ".", "max", "(", "sigma_o", ")", "\n", "val_dict", "[", "\"Wo_smallest_singular_val\"", "]", "=", "np", ".", "min", "(", "sigma_o", ")", "\n", "val_dict", "[", "\"Wo_condition number\"", "]", "=", "val_dict", "[", "\"Wo_largest_singular_val\"", "]", "/", "val_dict", "[", "\"Wo_smallest_singular_val\"", "]", "\n", "\n", "sigma_t", "=", "np", ".", "linalg", ".", "svd", "(", "model", ".", "Wo", ".", "weight", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "compute_uv", "=", "False", ")", "\n", "val_dict", "[", "\"Wt_largest_singular_val\"", "]", "=", "np", ".", "max", "(", "sigma_t", ")", "\n", "val_dict", "[", "\"Wt_smallest_singular_val\"", "]", "=", "np", ".", "min", "(", "sigma_t", ")", "\n", "val_dict", "[", "\"Wt_condition number\"", "]", "=", "val_dict", "[", "\"Wt_largest_singular_val\"", "]", "/", "val_dict", "[", "\"Wt_smallest_singular_val\"", "]", "\n", "\n", "if", "\"pred\"", "in", "model", ".", "name", ":", "\n", "                ", "sigma_p", "=", "np", ".", "linalg", ".", "svd", "(", "model", ".", "Wp", ".", "weight", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "compute_uv", "=", "False", ")", "\n", "val_dict", "[", "\"Wp_largest_singular_val\"", "]", "=", "np", ".", "max", "(", "sigma_p", ")", "\n", "val_dict", "[", "\"Wp_smallest_singular_val\"", "]", "=", "np", ".", "min", "(", "sigma_p", ")", "\n", "val_dict", "[", "\"Wp_condition number\"", "]", "=", "val_dict", "[", "\"Wp_largest_singular_val\"", "]", "/", "val_dict", "[", "\"Wp_smallest_singular_val\"", "]", "\n", "\n", "", "if", "log_weights", ":", "\n", "                ", "plt", ".", "clf", "(", ")", "\n", "ax", "=", "sns", ".", "heatmap", "(", "model", ".", "Wo", ".", "weight", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", "\n", "val_dict", "[", "\"Wo\"", "]", "=", "wandb", ".", "Image", "(", "ax", ")", "\n", "\n", "plt", ".", "clf", "(", ")", "\n", "ax", "=", "sns", ".", "heatmap", "(", "model", ".", "Wt", ".", "weight", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", "\n", "val_dict", "[", "\"Wt\"", "]", "=", "wandb", ".", "Image", "(", "ax", ")", "\n", "\n", "if", "\"pred\"", "in", "model", ".", "name", ":", "\n", "                    ", "plt", ".", "clf", "(", ")", "\n", "ax", "=", "sns", ".", "heatmap", "(", "model", ".", "Wp", ".", "weight", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", "\n", "val_dict", "[", "\"Wpred\"", "]", "=", "wandb", ".", "Image", "(", "ax", ")", "\n", "\n", "", "", "", "", "for", "k", ",", "v", "in", "vals_to_log", ".", "items", "(", ")", ":", "\n", "        ", "val_dict", "[", "k", "]", "=", "v", "\n", "", "logger", "(", "val_dict", ")", "\n", "return", "val_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.utils.log_metrics.check_support": [[110, 153], ["numpy.linalg.norm", "numpy.linalg.norm", "numpy.array", "numpy.sign", "range", "torch.no_grad", "model.Wo.weight.cpu().detach().numpy", "numpy.unravel_index", "latentsord.append", "neuronord.append", "numpy.mean", "numpy.mean", "numpy.mean", "model.predicted_rep.cpu().detach().numpy", "z.cpu().numpy", "numpy.argsort", "numpy.sum", "match.append", "mismatch.append", "sparse.append", "match.append", "mismatch.append", "sparse.append", "model.Wo.weight.cpu().detach", "abs", "model.predicted_rep.cpu().detach", "z.cpu", "numpy.sum", "numpy.sum", "numpy.sum", "max", "numpy.mean", "numpy.mean", "model.Wo.weight.cpu", "abs", "abs", "numpy.sum", "abs", "abs", "model.predicted_rep.cpu", "abs", "abs"], "function", ["None"], ["", "def", "check_support", "(", "model", ",", "M", ",", "z", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "Wo", "=", "model", ".", "Wo", ".", "weight", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "pred_rep", "=", "model", ".", "predicted_rep", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ".", "T", "\n", "z", "=", "z", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "T", "\n", "\n", "", "m", "=", "model", ".", "m", "\n", "d", "=", "model", ".", "d", "\n", "assert", "z", ".", "shape", "[", "0", "]", "==", "d", ",", "\"Z has incorrect shape\"", "\n", "assert", "pred_rep", ".", "shape", "[", "0", "]", "==", "m", ",", "\"predicted rep being passed in check support has incorrect shape\"", "\n", "Wo_dot_M", "=", "Wo", "@", "M", "# m * d", "\n", "col_normsW", "=", "np", ".", "linalg", ".", "norm", "(", "Wo", ".", "T", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", "\n", "col_normsM", "=", "np", ".", "linalg", ".", "norm", "(", "M", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", "\n", "Wo_dot_M", "=", "Wo_dot_M", "/", "(", "col_normsW", ".", "T", "@", "col_normsM", ")", "\n", "latentsord", "=", "[", "]", "\n", "neuronord", "=", "[", "]", "\n", "# sort the neuron-latents pair by their cosine value (decreasing ordering)", "\n", "sorted_ind", "=", "np", ".", "array", "(", "np", ".", "unravel_index", "(", "np", ".", "argsort", "(", "-", "Wo_dot_M", ",", "axis", "=", "None", ")", ",", "Wo_dot_M", ".", "shape", ")", ")", "\n", "\n", "j", "=", "0", "\n", "while", "j", "<", "d", ":", "\n", "        ", "neuronnow", "=", "sorted_ind", "[", "0", ",", "0", "]", "\n", "latentnow", "=", "sorted_ind", "[", "1", ",", "0", "]", "\n", "latentsord", ".", "append", "(", "latentnow", ")", "\n", "neuronord", ".", "append", "(", "neuronnow", ")", "\n", "sorted_ind", "=", "sorted_ind", "[", ":", ",", "sorted_ind", "[", "0", ",", ":", "]", "!=", "neuronnow", "]", "\n", "sorted_ind", "=", "sorted_ind", "[", ":", ",", "sorted_ind", "[", "1", ",", ":", "]", "!=", "latentnow", "]", "\n", "j", "+=", "1", "\n", "", "z_est", "=", "np", ".", "sign", "(", "pred_rep", ")", "# (m, batch_size) m>=d, z:(d,batch_size)", "\n", "match", "=", "[", "]", "\n", "mismatch", "=", "[", "]", "\n", "sparse", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "z_est", ".", "shape", "[", "1", "]", ")", ":", "\n", "        ", "if", "np", ".", "sum", "(", "abs", "(", "z", "[", ":", ",", "i", "]", ")", ")", ">", "0", ":", "\n", "            ", "match", ".", "append", "(", "np", ".", "sum", "(", "abs", "(", "z", "[", "latentsord", ",", "i", "]", "*", "z_est", "[", "neuronord", ",", "i", "]", ")", ")", "/", "np", ".", "sum", "(", "abs", "(", "z", "[", ":", ",", "i", "]", ")", ")", ")", "# get the match between m and d", "\n", "mismatch", ".", "append", "(", "np", ".", "sum", "(", "(", "z", "[", "latentsord", ",", "i", "]", "==", "0", ")", "*", "abs", "(", "z_est", "[", "neuronord", ",", "i", "]", ")", ")", "/", "max", "(", "np", ".", "sum", "(", "abs", "(", "z_est", "[", ":", ",", "i", "]", ")", ")", ",", "1", ")", ")", "\n", "sparse", ".", "append", "(", "np", ".", "mean", "(", "abs", "(", "z_est", "[", ":", ",", "i", "]", ")", ")", "-", "np", ".", "mean", "(", "abs", "(", "z", "[", ":", ",", "i", "]", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "match", ".", "append", "(", "0", ")", "\n", "mismatch", ".", "append", "(", "0", ")", "\n", "sparse", ".", "append", "(", "0", ")", "\n", "\n", "", "", "return", "np", ".", "mean", "(", "match", ")", ",", "np", ".", "mean", "(", "mismatch", ")", ",", "np", ".", "mean", "(", "sparse", ")", "", "", ""]], "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.functions.train.alternate_train": [[5, 88], ["utils.log_metrics.check_sparse_coding_learning", "range", "utils.log_metrics.check_sparse_coding_learning", "print", "print", "print", "type", "x1.to().float.to().float", "x2.to().float.to().float", "online_optimizer.zero_grad", "target_optimizer.zero_grad", "model", "model.backward", "online_scheduler.step", "target_scheduler.step", "utils.log_metrics.log_all_metrics", "online_optimizer.step", "torch.clamp", "torch.clamp", "x1.to().float.to", "x2.to().float.to", "torch.no_grad", "online_optimizer.step", "target_optimizer.step", "torch.no_grad", "model.Wo.weight.data.norm", "model.Wt.weight.data.norm", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model.Wo.weight.data.norm", "model.Wt.weight.data.norm", "model.Wp.weight.data.norm", "model.Wp.weight.data.norm"], "function", ["home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.utils.log_metrics.check_sparse_coding_learning", "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.utils.log_metrics.check_sparse_coding_learning", "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.utils.log_metrics.log_all_metrics"], ["def", "alternate_train", "(", "model", ",", "online_optimizer", ",", "target_optimizer", ",", "train_loader", ",", "max_epochs", ",", "M", ",", "\n", "ema_decay", "=", "None", ",", "\n", "log_metrics", "=", "False", ",", "\n", "logger", "=", "None", ",", "\n", "online_scheduler", "=", "None", ",", "\n", "target_scheduler", "=", "None", ",", "\n", "col_norm", "=", "False", ",", "\n", "row_norm", "=", "False", ",", "\n", "clip_bias", "=", "False", ",", "\n", "clip_bias_maxval", "=", "1", ",", "\n", "clip_bias_minval", "=", "-", "1", ",", "\n", "pred_norm", "=", "False", ")", ":", "\n", "\n", "    ", "assert", "ema_decay", "is", "None", ",", "\"EMA is not None\"", "\n", "init_vals", "=", "check_sparse_coding_learning", "(", "model", ",", "M", ")", "\n", "if", "ema_decay", "is", "None", ":", "\n", "        ", "print", "(", "\"Starting alternating training...\"", ")", "\n", "", "else", ":", "\n", "        ", "assert", "type", "(", "ema_decay", ")", "is", "float", "\n", "print", "(", "\"Starting exponential moving average training...\"", ")", "\n", "\n", "", "for", "epoch_counter", "in", "range", "(", "max_epochs", ")", ":", "\n", "        ", "optimize_online", "=", "True", "\n", "for", "x1", ",", "x2", ",", "z", "in", "train_loader", ":", "\n", "            ", "x1", "=", "x1", ".", "to", "(", "model", ".", "device", ")", ".", "float", "(", ")", "\n", "x2", "=", "x2", ".", "to", "(", "model", ".", "device", ")", ".", "float", "(", ")", "\n", "\n", "online_optimizer", ".", "zero_grad", "(", ")", "\n", "target_optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "loss", "=", "model", "(", "x1", ",", "x2", ",", "optimize_online", "=", "optimize_online", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "if", "ema_decay", "is", "not", "None", ":", "\n", "                ", "online_optimizer", ".", "step", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "model", ".", "Wt", ".", "weight", ".", "data", "=", "ema_decay", "*", "model", ".", "Wt", ".", "weight", ".", "data", "+", "(", "1", "-", "ema_decay", ")", "*", "model", ".", "Wo", ".", "weight", ".", "data", "\n", "model", ".", "Wt", ".", "bias", ".", "data", "=", "ema_decay", "*", "model", ".", "Wt", ".", "bias", ".", "data", "+", "(", "1", "-", "ema_decay", ")", "*", "model", ".", "Wo", ".", "bias", ".", "data", "\n", "", "", "elif", "optimize_online", ":", "\n", "                ", "online_optimizer", ".", "step", "(", ")", "\n", "", "else", ":", "\n", "                ", "target_optimizer", ".", "step", "(", ")", "\n", "\n", "", "optimize_online", "=", "(", "ema_decay", "is", "not", "None", ")", "or", "(", "not", "optimize_online", ")", "\n", "\n", "if", "col_norm", ":", "\n", "                ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "model", ".", "Wo", ".", "weight", ".", "data", "=", "model", ".", "Wo", ".", "weight", ".", "data", "/", "model", ".", "Wo", ".", "weight", ".", "data", ".", "norm", "(", "dim", "=", "0", ")", "\n", "model", ".", "Wt", ".", "weight", ".", "data", "=", "model", ".", "Wt", ".", "weight", ".", "data", "/", "model", ".", "Wt", ".", "weight", ".", "data", ".", "norm", "(", "dim", "=", "0", ")", "\n", "\n", "", "", "elif", "row_norm", ":", "\n", "                ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "model", ".", "Wo", ".", "weight", ".", "data", "=", "(", "model", ".", "Wo", ".", "weight", ".", "data", ".", "T", "/", "model", ".", "Wo", ".", "weight", ".", "data", ".", "norm", "(", "dim", "=", "1", ")", ")", ".", "T", "\n", "model", ".", "Wt", ".", "weight", ".", "data", "=", "(", "model", ".", "Wt", ".", "weight", ".", "data", ".", "T", "/", "model", ".", "Wt", ".", "weight", ".", "data", ".", "norm", "(", "dim", "=", "1", ")", ")", ".", "T", "\n", "\n", "", "", "if", "pred_norm", ":", "\n", "                ", "if", "col_norm", ":", "\n", "                    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                        ", "model", ".", "Wp", ".", "weight", ".", "data", "=", "(", "model", ".", "Wp", ".", "weight", ".", "data", ".", "T", "/", "model", ".", "Wp", ".", "weight", ".", "data", ".", "norm", "(", "dim", "=", "0", ")", ")", ".", "T", "\n", "", "", "elif", "row_norm", ":", "\n", "                    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                        ", "model", ".", "Wp", ".", "weight", ".", "data", "=", "(", "model", ".", "Wp", ".", "weight", ".", "data", ".", "T", "/", "model", ".", "Wp", ".", "weight", ".", "data", ".", "norm", "(", "dim", "=", "1", ")", ")", ".", "T", "\n", "\n", "", "", "", "if", "clip_bias", ":", "\n", "                ", "model", ".", "Wo", ".", "bias", ".", "data", "=", "torch", ".", "clamp", "(", "model", ".", "Wo", ".", "bias", ".", "data", ",", "min", "=", "clip_bias_minval", ",", "max", "=", "clip_bias_maxval", ")", "\n", "model", ".", "Wt", ".", "bias", ".", "data", "=", "torch", ".", "clamp", "(", "model", ".", "Wt", ".", "bias", ".", "data", ",", "min", "=", "clip_bias_minval", ",", "max", "=", "clip_bias_maxval", ")", "\n", "", "", "if", "online_scheduler", "is", "not", "None", "and", "target_scheduler", "is", "not", "None", ":", "\n", "            ", "online_scheduler", ".", "step", "(", ")", "\n", "target_scheduler", ".", "step", "(", ")", "\n", "\n", "", "print", "(", "f\"Epoch {epoch_counter} Loss {loss} \"", ")", "\n", "if", "log_metrics", ":", "\n", "            ", "log_weight", "=", "False", "\n", "if", "epoch_counter", "%", "50", "==", "0", ":", "\n", "                ", "log_weight", "=", "True", "\n", "", "log_all_metrics", "(", "model", ",", "M", ",", "z", ",", "loss", ",", "logger", ",", "log_weights", "=", "log_weight", ")", "\n", "\n", "", "", "final_vals", "=", "check_sparse_coding_learning", "(", "model", ",", "M", ")", "\n", "return", "{", "\"model\"", ":", "model", ",", "\n", "\"loss\"", ":", "loss", ",", "\n", "\"init_metric\"", ":", "init_vals", ",", "\n", "\"final_metric\"", ":", "final_vals", ",", "\n", "\"M\"", ":", "M", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.functions.train.train": [[91, 141], ["utils.log_metrics.check_sparse_coding_learning", "print", "range", "utils.log_metrics.check_sparse_coding_learning", "print", "print", "x1.to().float.to().float", "x2.to().float.to().float", "optimizer.zero_grad", "model", "model.backward", "optimizer.step", "utils.log_metrics.log_all_metrics", "x1.to().float.to", "x2.to().float.to", "torch.no_grad", "model.item", "model.Wo.weight.data.norm", "model.Wt.weight.data.norm", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model.Wo.weight.data.norm", "model.Wt.weight.data.norm", "model.Wp.weight.data.norm", "model.Wp.weight.data.norm"], "function", ["home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.utils.log_metrics.check_sparse_coding_learning", "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.utils.log_metrics.check_sparse_coding_learning", "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.utils.log_metrics.log_all_metrics"], ["", "def", "train", "(", "model", ",", "optimizer", ",", "train_loader", ",", "max_epochs", ",", "M", ",", "log_metrics", "=", "False", ",", "logger", "=", "None", ",", "\n", "col_norm", "=", "False", ",", "\n", "row_norm", "=", "False", ",", "\n", "pred_norm", "=", "False", "\n", ")", ":", "\n", "    ", "init_vals", "=", "check_sparse_coding_learning", "(", "model", ",", "M", ")", "\n", "print", "(", "\"Starting training...\"", ")", "\n", "for", "epoch_counter", "in", "range", "(", "max_epochs", ")", ":", "\n", "        ", "for", "x1", ",", "x2", ",", "z", "in", "train_loader", ":", "\n", "\n", "            ", "x1", "=", "x1", ".", "to", "(", "model", ".", "device", ")", ".", "float", "(", ")", "\n", "x2", "=", "x2", ".", "to", "(", "model", ".", "device", ")", ".", "float", "(", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "loss", "=", "model", "(", "x1", ",", "x2", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "if", "col_norm", ":", "\n", "                ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "model", ".", "Wo", ".", "weight", ".", "data", "=", "model", ".", "Wo", ".", "weight", ".", "data", "/", "model", ".", "Wo", ".", "weight", ".", "data", ".", "norm", "(", "dim", "=", "0", ")", "\n", "model", ".", "Wt", ".", "weight", ".", "data", "=", "model", ".", "Wt", ".", "weight", ".", "data", "/", "model", ".", "Wt", ".", "weight", ".", "data", ".", "norm", "(", "dim", "=", "0", ")", "\n", "", "", "elif", "row_norm", ":", "\n", "                ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "model", ".", "Wo", ".", "weight", ".", "data", "=", "(", "model", ".", "Wo", ".", "weight", ".", "data", ".", "T", "/", "model", ".", "Wo", ".", "weight", ".", "data", ".", "norm", "(", "dim", "=", "1", ")", ")", ".", "T", "\n", "model", ".", "Wt", ".", "weight", ".", "data", "=", "(", "model", ".", "Wt", ".", "weight", ".", "data", ".", "T", "/", "model", ".", "Wt", ".", "weight", ".", "data", ".", "norm", "(", "dim", "=", "1", ")", ")", ".", "T", "\n", "\n", "", "", "if", "pred_norm", ":", "\n", "                ", "if", "col_norm", ":", "\n", "                    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                        ", "model", ".", "Wp", ".", "weight", ".", "data", "=", "(", "model", ".", "Wp", ".", "weight", ".", "data", ".", "T", "/", "model", ".", "Wp", ".", "weight", ".", "data", ".", "norm", "(", "dim", "=", "0", ")", ")", ".", "T", "\n", "", "", "elif", "row_norm", ":", "\n", "                    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                        ", "model", ".", "Wp", ".", "weight", ".", "data", "=", "(", "model", ".", "Wp", ".", "weight", ".", "data", ".", "T", "/", "model", ".", "Wp", ".", "weight", ".", "data", ".", "norm", "(", "dim", "=", "1", ")", ")", ".", "T", "\n", "\n", "", "", "", "", "print", "(", "f\"Epoch {epoch_counter} Loss {loss.item()}\"", ")", "\n", "if", "log_metrics", ":", "\n", "            ", "log_weights", "=", "False", "\n", "if", "epoch_counter", "%", "50", "==", "0", ":", "\n", "                ", "log_weights", "=", "True", "\n", "", "log_all_metrics", "(", "model", ",", "M", ",", "z", ",", "loss", ",", "logger", ",", "log_weights", "=", "log_weights", ")", "\n", "\n", "", "", "final_vals", "=", "check_sparse_coding_learning", "(", "model", ",", "M", ")", "\n", "print", "(", "f\"Epoch {epoch_counter} Loss {loss} min_cosine {final_vals[2]}\"", ")", "\n", "return", "{", "\"model\"", ":", "model", ",", "\n", "\"loss\"", ":", "loss", ",", "\n", "\"init_metric\"", ":", "init_vals", ",", "\n", "\"final_metric\"", ":", "final_vals", ",", "\n", "\"M\"", ":", "M", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.functions.train.augment_and_train": [[144, 189], ["utils.log_metrics.check_sparse_coding_learning", "print", "range", "utils.log_metrics.check_sparse_coding_learning", "print", "torch.eye", "numpy.random.choice", "torch.matmul", "torch.matmul", "x1.to().float.to().float", "x2.to().float.to().float", "optimizer.zero_grad", "model", "model.backward", "optimizer.step", "utils.log_metrics.log_all_metrics", "x1.to().float.to", "x2.to().float.to", "torch.no_grad", "hasattr", "model.Wo.weight.data.norm", "model.Wt.weight.data.norm", "model.Wp.weight.data.norm"], "function", ["home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.utils.log_metrics.check_sparse_coding_learning", "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.utils.log_metrics.check_sparse_coding_learning", "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.utils.log_metrics.log_all_metrics"], ["", "def", "augment_and_train", "(", "model", ",", "optimizer", ",", "train_loader", ",", "max_epochs", ",", "M", ",", "prob_ones", "=", "0.5", ",", "log_metrics", "=", "False", ",", "logger", "=", "None", ",", "alt_norm", "=", "False", ")", ":", "\n", "    ", "init_vals", "=", "check_sparse_coding_learning", "(", "model", ",", "M", ")", "\n", "print", "(", "\"Starting training...\"", ")", "\n", "for", "epoch_counter", "in", "range", "(", "max_epochs", ")", ":", "\n", "        ", "for", "x", ",", "z", "in", "train_loader", ":", "\n", "            ", "p", "=", "x", ".", "shape", "[", "1", "]", "\n", "\n", "identity", "=", "torch", ".", "eye", "(", "p", ")", "\n", "mask", "=", "np", ".", "random", ".", "choice", "(", "[", "0", ",", "1", "]", ",", "(", "p", ",", "p", ")", ",", "p", "=", "[", "1", "-", "prob_ones", ",", "prob_ones", "]", ")", "\n", "D1", "=", "identity", "*", "mask", "\n", "D2", "=", "identity", "-", "D1", "\n", "\n", "x1", "=", "torch", ".", "matmul", "(", "x", ",", "D1", ")", "\n", "x2", "=", "torch", ".", "matmul", "(", "x", ",", "D2", ")", "\n", "\n", "x1", "=", "x1", ".", "to", "(", "model", ".", "device", ")", ".", "float", "(", ")", "\n", "x2", "=", "x2", ".", "to", "(", "model", ".", "device", ")", ".", "float", "(", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "loss", "=", "model", "(", "x1", ",", "x2", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "if", "alt_norm", ":", "\n", "                ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "model", ".", "Wo", ".", "weight", ".", "data", "=", "model", ".", "Wo", ".", "weight", ".", "data", "/", "model", ".", "Wo", ".", "weight", ".", "data", ".", "norm", "(", "dim", "=", "0", ")", "\n", "model", ".", "Wt", ".", "weight", ".", "data", "=", "model", ".", "Wt", ".", "weight", ".", "data", "/", "model", ".", "Wt", ".", "weight", ".", "data", ".", "norm", "(", "dim", "=", "0", ")", "\n", "if", "hasattr", "(", "model", ",", "\"Wp\"", ")", ":", "\n", "                       ", "model", ".", "Wp", ".", "weight", ".", "data", "=", "model", ".", "Wp", ".", "weight", ".", "data", "/", "model", ".", "Wp", ".", "weight", ".", "data", ".", "norm", "(", "dim", "=", "0", ")", "\n", "\n", "", "", "", "", "print", "(", "f\"Epoch {epoch_counter} Loss {loss}\"", ")", "\n", "\n", "if", "log_metrics", ":", "\n", "            ", "log_weights", "=", "False", "\n", "if", "epoch_counter", "%", "50", "==", "0", ":", "\n", "                ", "log_weights", "=", "True", "\n", "", "log_all_metrics", "(", "model", ",", "M", ",", "z", ",", "loss", ",", "logger", ",", "log_weights", "=", "log_weights", ")", "\n", "\n", "", "", "final_vals", "=", "check_sparse_coding_learning", "(", "model", ",", "M", ")", "\n", "return", "{", "\"model\"", ":", "model", ",", "\n", "\"loss\"", ":", "loss", ",", "\n", "\"init_metric\"", ":", "init_vals", ",", "\n", "\"final_metric\"", ":", "final_vals", ",", "\n", "\"M\"", ":", "M", ",", "\n", "}", ""]], "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.dataset.masked_sparse_contr_dataset.MaskedSparseContrastiveDataset.__init__": [[5, 12], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data", ",", "Z", ",", "prob_ones", "=", "0.5", ")", ":", "\n", "        ", "self", ".", "data", "=", "data", "\n", "self", ".", "Z", "=", "Z", "\n", "\n", "assert", "data", ".", "shape", "[", "0", "]", "==", "Z", ".", "shape", "[", "0", "]", "\n", "\n", "self", ".", "prob_ones", "=", "prob_ones", "\n", "\n"]], "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.dataset.masked_sparse_contr_dataset.MaskedSparseContrastiveDataset.__len__": [[13, 15], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.dataset.masked_sparse_contr_dataset.MaskedSparseContrastiveDataset.__getitem__": [[16, 31], ["numpy.eye", "numpy.random.choice", "numpy.random.choice", "numpy.matmul", "numpy.matmul", "numpy.matmul.astype", "numpy.matmul.astype", "masked_sparse_contr_dataset.MaskedSparseContrastiveDataset.Z[].astype"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "x", "=", "self", ".", "data", "[", "idx", "]", "\n", "p", "=", "x", ".", "shape", "[", "0", "]", "\n", "\n", "identity", "=", "np", ".", "eye", "(", "p", ")", "\n", "mask", "=", "np", ".", "random", ".", "choice", "(", "[", "0", ",", "1", "]", ",", "(", "p", ",", "p", ")", ",", "p", "=", "[", "1", "-", "self", ".", "prob_ones", ",", "self", ".", "prob_ones", "]", ")", "\n", "D1", "=", "identity", "*", "mask", "\n", "\n", "mask", "=", "np", ".", "random", ".", "choice", "(", "[", "0", ",", "1", "]", ",", "(", "p", ",", "p", ")", ",", "p", "=", "[", "1", "-", "self", ".", "prob_ones", ",", "self", ".", "prob_ones", "]", ")", "\n", "D2", "=", "identity", "*", "mask", "\n", "\n", "a1", "=", "np", ".", "matmul", "(", "D1", ",", "x", ")", "# 2 * ", "\n", "a2", "=", "np", ".", "matmul", "(", "D2", ",", "x", ")", "# 2 * ", "\n", "\n", "return", "a1", ".", "astype", "(", "np", ".", "float", ")", ",", "a2", ".", "astype", "(", "np", ".", "float", ")", ",", "self", ".", "Z", "[", "idx", "]", ".", "astype", "(", "np", ".", "int", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.dataset.simple_contrastive_dataset.SimpleContrastiveDataset.__init__": [[4, 11], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data", ",", "Z", ",", "prob_ones", "=", "0.5", ")", ":", "\n", "        ", "self", ".", "data", "=", "data", "\n", "self", ".", "Z", "=", "Z", "\n", "\n", "assert", "data", ".", "shape", "[", "0", "]", "==", "Z", ".", "shape", "[", "0", "]", "\n", "\n", "self", ".", "prob_ones", "=", "prob_ones", "\n", "\n"]], "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.dataset.simple_contrastive_dataset.SimpleContrastiveDataset.__len__": [[12, 14], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.dataset.simple_contrastive_dataset.SimpleContrastiveDataset.__getitem__": [[15, 18], ["x.astype", "simple_contrastive_dataset.SimpleContrastiveDataset.Z[].astype"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "x", "=", "self", ".", "data", "[", "idx", "]", "\n", "return", "x", ".", "astype", "(", "np", ".", "float", ")", ",", "self", ".", "Z", "[", "idx", "]", ".", "astype", "(", "np", ".", "int", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.dataset.multimask_sparse_contr_dataset.MultiMaskedSparseContrastiveDataset.__init__": [[5, 14], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data", ",", "Z", ",", "prob_ones", "=", "0.5", ",", "n_aug", "=", "5", ")", ":", "\n", "        ", "self", ".", "data", "=", "data", "\n", "self", ".", "Z", "=", "Z", "\n", "\n", "self", ".", "n_aug", "=", "n_aug", "\n", "\n", "assert", "data", ".", "shape", "[", "0", "]", "==", "Z", ".", "shape", "[", "0", "]", "\n", "\n", "self", ".", "prob_ones", "=", "prob_ones", "\n", "\n"]], "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.dataset.multimask_sparse_contr_dataset.MultiMaskedSparseContrastiveDataset.__len__": [[15, 17], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.dataset.multimask_sparse_contr_dataset.MultiMaskedSparseContrastiveDataset.__getitem__": [[18, 40], ["range", "numpy.eye", "numpy.random.choice", "numpy.random.choice", "numpy.matmul", "numpy.matmul", "a1_list.append", "a2_list.append", "multimask_sparse_contr_dataset.MultiMaskedSparseContrastiveDataset.Z[].astype", "numpy.matmul.astype", "numpy.matmul.astype"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "x", "=", "self", ".", "data", "[", "idx", "]", "\n", "p", "=", "x", ".", "shape", "[", "0", "]", "\n", "\n", "a1_list", "=", "[", "]", "\n", "a2_list", "=", "[", "]", "\n", "\n", "for", "_", "in", "range", "(", "self", ".", "n_aug", ")", ":", "\n", "            ", "identity", "=", "np", ".", "eye", "(", "p", ")", "\n", "mask", "=", "np", ".", "random", ".", "choice", "(", "[", "0", ",", "1", "]", ",", "(", "p", ",", "p", ")", ",", "p", "=", "[", "1", "-", "self", ".", "prob_ones", ",", "self", ".", "prob_ones", "]", ")", "\n", "D1", "=", "identity", "*", "mask", "\n", "\n", "mask", "=", "np", ".", "random", ".", "choice", "(", "[", "0", ",", "1", "]", ",", "(", "p", ",", "p", ")", ",", "p", "=", "[", "1", "-", "self", ".", "prob_ones", ",", "self", ".", "prob_ones", "]", ")", "\n", "D2", "=", "identity", "*", "mask", "\n", "\n", "a1", "=", "np", ".", "matmul", "(", "D1", ",", "x", ")", "\n", "a2", "=", "np", ".", "matmul", "(", "D2", ",", "x", ")", "\n", "\n", "a1_list", ".", "append", "(", "a1", ".", "astype", "(", "np", ".", "float", ")", ")", "\n", "a2_list", ".", "append", "(", "a2", ".", "astype", "(", "np", ".", "float", ")", ")", "\n", "\n", "", "return", "a1_list", ",", "a2_list", ",", "self", ".", "Z", "[", "idx", "]", ".", "astype", "(", "np", ".", "int", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.dataset.multimask_sparse_contr_dataset.multi_mask_data_collate": [[42, 57], ["torch.tensor", "torch.tensor", "torch.tensor", "zip", "torch.tensor.append", "torch.tensor.append", "torch.tensor.append"], "function", ["None"], ["", "", "def", "multi_mask_data_collate", "(", "batch", ")", ":", "\n", "    ", "all_a1", "=", "[", "]", "\n", "all_a2", "=", "[", "]", "\n", "all_z", "=", "[", "]", "\n", "\n", "for", "a1_list", ",", "a2_list", ",", "z", "in", "batch", ":", "\n", "        ", "for", "a1", ",", "a2", "in", "zip", "(", "a1_list", ",", "a2_list", ")", ":", "\n", "            ", "all_a1", ".", "append", "(", "a1", ")", "\n", "all_a2", ".", "append", "(", "a2", ")", "\n", "all_z", ".", "append", "(", "z", ")", "\n", "\n", "", "", "all_a1", "=", "torch", ".", "tensor", "(", "all_a1", ")", "\n", "all_a2", "=", "torch", ".", "tensor", "(", "all_a2", ")", "\n", "all_z", "=", "torch", ".", "tensor", "(", "all_z", ")", "\n", "return", "all_a1", ",", "all_a2", ",", "all_z", "", "", ""]], "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.dataset.dep_mask_contrastive_dataset.DependentMaskContrastiveDataset.__init__": [[5, 9], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data", ",", "Z", ")", ":", "\n", "        ", "self", ".", "data", "=", "data", "\n", "self", ".", "Z", "=", "Z", "\n", "assert", "data", ".", "shape", "[", "0", "]", "==", "Z", ".", "shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.dataset.dep_mask_contrastive_dataset.DependentMaskContrastiveDataset.__len__": [[10, 12], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.dataset.dep_mask_contrastive_dataset.DependentMaskContrastiveDataset.__getitem__": [[13, 26], ["numpy.random.choice", "numpy.eye", "numpy.matmul", "numpy.matmul", "numpy.sum", "a1.astype", "a2.astype", "dep_mask_contrastive_dataset.DependentMaskContrastiveDataset.Z[].astype", "numpy.identity"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "x", "=", "self", ".", "data", "[", "idx", "]", "\n", "p", "=", "x", ".", "shape", "[", "0", "]", "\n", "\n", "mask", "=", "np", ".", "random", ".", "choice", "(", "[", "0", ",", "1", "]", ",", "(", "p", ",", "p", ")", ",", "p", "=", "[", "0.5", ",", "0.5", "]", ")", "\n", "identity", "=", "np", ".", "eye", "(", "p", ")", "\n", "D", "=", "identity", "*", "mask", "\n", "\n", "a1", "=", "2", "*", "np", ".", "matmul", "(", "D", ",", "x", ")", "\n", "a2", "=", "2", "*", "np", ".", "matmul", "(", "(", "np", ".", "identity", "(", "p", ")", "-", "D", ")", ",", "x", ")", "\n", "\n", "assert", "np", ".", "sum", "(", "0.5", "*", "(", "a1", "+", "a2", ")", "-", "x", ")", "==", "0", ",", "\"Error in augmentation\"", "\n", "return", "a1", ".", "astype", "(", "np", ".", "float", ")", ",", "a2", ".", "astype", "(", "np", ".", "float", ")", ",", "self", ".", "Z", "[", "idx", "]", ".", "astype", "(", "np", ".", "int", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.verify_data_model.check_data_model.parse_args": [[13, 72], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "config.update_config"], "function", ["home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.verify_data_model.check_data_model.parse_args", "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.config.default.update_config"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Train dual network'", ")", "\n", "parser", ".", "add_argument", "(", "'--cfg'", ",", "\n", "help", "=", "'experiment configure file name'", ",", "\n", "required", "=", "True", ",", "\n", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--logDir'", ",", "\n", "help", "=", "'log directory'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "''", ")", "\n", "parser", ".", "add_argument", "(", "'--nn'", ",", "\n", "help", "=", "\"number of training examples\"", ",", "# p", "\n", "default", "=", "100", ",", "\n", "required", "=", "False", ",", "\n", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--NUM_EPOCHES'", ",", "\n", "help", "=", "\"number of training steps\"", ",", "\n", "default", "=", "100000", ",", "\n", "required", "=", "False", ",", "\n", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--c'", ",", "\n", "help", "=", "\"parameter to control initialization of W\"", ",", "\n", "default", "=", "1", ",", "\n", "required", "=", "False", ",", "\n", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--p'", ",", "\n", "help", "=", "\"value of dimension p\"", ",", "\n", "default", "=", "20", ",", "\n", "required", "=", "False", ",", "\n", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--d'", ",", "\n", "help", "=", "\"value of dimension d\"", ",", "\n", "default", "=", "20", ",", "\n", "required", "=", "False", ",", "\n", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--m'", ",", "\n", "help", "=", "\"value of dimension m\"", ",", "\n", "default", "=", "20", ",", "\n", "required", "=", "False", ",", "\n", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "\n", "help", "=", "\"learning rate\"", ",", "\n", "default", "=", "5e-4", ",", "\n", "required", "=", "False", ",", "\n", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--sigma0'", ",", "\n", "help", "=", "\"variance of gaussian noise being added to groundtruth\"", ",", "\n", "default", "=", "None", ",", "\n", "required", "=", "False", ",", "\n", "type", "=", "float", ")", "\n", "# Condition 2 in Model definition; Page 4 ", "\n", "parser", ".", "add_argument", "(", "'--threshold'", ",", "\n", "help", "=", "\"value of thresholding constant\"", ",", "\n", "default", "=", "0.7", ",", "\n", "required", "=", "False", ",", "\n", "type", "=", "float", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "update_config", "(", "config", ",", "args", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.verify_data_model.check_data_model.verify_delta_k_close": [[73, 83], ["range", "numpy.linalg.norm", "numpy.linalg.norm", "numpy.log", "numpy.linalg.norm"], "function", ["None"], ["", "def", "verify_delta_k_close", "(", "A", ",", "Aopt", ",", "delta_factor", "=", "50", ",", "k", "=", "1", ")", ":", "\n", "    ", "n", "=", "A", ".", "shape", "[", "1", "]", "\n", "delta", "=", "1", "/", "np", ".", "log", "(", "n", ")", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "        ", "diff_norm", "=", "np", ".", "linalg", ".", "norm", "(", "A", "[", ":", ",", "i", "]", "-", "Aopt", "[", ":", ",", "i", "]", ",", "ord", "=", "2", ")", "\n", "assert", "diff_norm", "<=", "delta_factor", "*", "delta", ",", "f\"diff_norm {diff_norm}, delta {delta_factor * delta}\"", "\n", "\n", "", "opt_norm", "=", "np", ".", "linalg", ".", "norm", "(", "Aopt", ",", "ord", "=", "2", ")", "\n", "mat_diff_norm", "=", "np", ".", "linalg", ".", "norm", "(", "A", "-", "Aopt", ",", "ord", "=", "2", ")", "\n", "assert", "mat_diff_norm", "<=", "k", "*", "opt_norm", ",", "f\"Opt norm {k * opt_norm} diff_norm {mat_diff_norm}\"", "\n", "\n"]], "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.verify_data_model.check_data_model.verify_delta_close": [[85, 95], ["range", "numpy.linalg.norm", "numpy.linalg.norm", "numpy.log", "numpy.linalg.norm"], "function", ["None"], ["", "def", "verify_delta_close", "(", "A", ",", "Aopt", ",", "delta_factor", "=", "50", ")", ":", "\n", "    ", "n", "=", "A", ".", "shape", "[", "1", "]", "\n", "delta", "=", "1", "/", "np", ".", "log", "(", "n", ")", "\n", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "        ", "diff_norm", "=", "np", ".", "linalg", ".", "norm", "(", "A", "[", ":", ",", "i", "]", "-", "Aopt", "[", ":", ",", "i", "]", ",", "ord", "=", "2", ")", "\n", "assert", "diff_norm", "<=", "delta_factor", "*", "delta", ",", "f\"diff_norm {diff_norm}, delta {delta_factor * delta}\"", "\n", "", "mat_norm", "=", "np", ".", "linalg", ".", "norm", "(", "A", ".", "T", ",", "ord", "=", "2", ")", "\n", "opt_norm", "=", "np", ".", "linalg", ".", "norm", "(", "Aopt", ",", "ord", "=", "2", ")", "\n", "assert", "mat_norm", "<=", "2", "*", "opt_norm", ",", "f\"Opt norm {2 * opt_norm} diff_norm {diff_norm}\"", "\n", "\n"]], "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.verify_data_model.check_data_model.sparse_coding_neural_update": [[101, 139], ["range", "numpy.maximum", "numpy.ones_like", "check_data_model.verify_delta_k_close", "numpy.round", "numpy.round", "numpy.round", "numpy.abs", "numpy.linalg.norm", "numpy.linalg.norm", "numpy.linalg.norm", "print", "losslist.append", "distlist.append", "zdistlist.append", "slist.append"], "function", ["home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.verify_data_model.check_data_model.verify_delta_k_close"], ["", "def", "sparse_coding_neural_update", "(", "x", ",", "M", ",", "C", ",", "eta", ",", "num_steps", ",", "Mopt", ",", "zopt", ")", ":", "\n", "# I assume that M is initialized appropriately (\\delta, 2)", "\n", "# TODO: Implement initialization algorithm", "\n", "# NOte: ^ Probably not needed right now bc we are verifying our sparse model", "\n", "    ", "zdistlist", "=", "[", "]", "\n", "distlist", "=", "[", "]", "\n", "losslist", "=", "[", "]", "\n", "slist", "=", "[", "]", "\n", "for", "s", "in", "range", "(", "num_steps", ")", ":", "\n", "# Decode step", "\n", "        ", "z", "=", "x", "@", "M", ".", "T", "#n*m", "\n", "z_mask", "=", "np", ".", "maximum", "(", "np", ".", "abs", "(", "z", ")", ",", "C", "/", "2", ")", "#", "\n", "z", "[", "z_mask", "<=", "C", "/", "2", "]", "=", "0", "\n", "\n", "# Update step", "\n", "sign_z", "=", "np", ".", "ones_like", "(", "z", ")", "\n", "sign_z", "[", "z", "<", "0", "]", "=", "-", "1", "\n", "sign_z", "[", "z", "==", "0", "]", "=", "0", "\n", "\n", "grad", "=", "(", "x", "-", "z", "@", "M", ")", ".", "T", "@", "sign_z", "# p*n n*m = p*m ", "\n", "grad", "/=", "x", ".", "shape", "[", "0", "]", "# n", "\n", "\n", "M", "=", "M", "+", "eta", "*", "grad", ".", "T", "\n", "\n", "verify_delta_k_close", "(", "M", ",", "Mopt", ",", "k", "=", "2", ")", "\n", "\n", "loss", "=", "np", ".", "round", "(", "np", ".", "linalg", ".", "norm", "(", "x", "-", "z", "@", "M", ",", "'fro'", ")", ",", "5", ")", "\n", "dist", "=", "np", ".", "round", "(", "np", ".", "linalg", ".", "norm", "(", "M", ".", "T", "-", "Mopt", ",", "'fro'", ")", ",", "5", ")", "\n", "zdist", "=", "np", ".", "round", "(", "np", ".", "linalg", ".", "norm", "(", "z", ".", "T", "-", "zopt", ",", "'fro'", ")", ",", "5", ")", "\n", "\n", "if", "not", "s", "%", "50", ":", "\n", "            ", "print", "(", "f\" Step {s}/{num_steps} Loss {loss} Dist {dist} Z {zdist}\"", ")", "\n", "losslist", ".", "append", "(", "loss", ")", "\n", "distlist", ".", "append", "(", "dist", ")", "\n", "zdistlist", ".", "append", "(", "zdist", ")", "\n", "slist", ".", "append", "(", "s", ")", "\n", "\n", "", "", "return", "M", ",", "z", ".", "T", ",", "losslist", ",", "distlist", ",", "zdistlist", ",", "slist", "\n", "\n"]], "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.verify_data_model.check_data_model.olshausen_field_update": [[140, 158], ["range", "numpy.maximum", "check_data_model.verify_delta_close", "numpy.abs", "print", "numpy.linalg.norm"], "function", ["home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.verify_data_model.check_data_model.verify_delta_close"], ["", "def", "olshausen_field_update", "(", "x", ",", "M", ",", "C", ",", "M_opt", ",", "eta", ",", "num_steps", ")", ":", "\n", "    ", "for", "s", "in", "range", "(", "num_steps", ")", ":", "\n", "# Decode step", "\n", "        ", "z", "=", "x", "@", "M", ".", "T", "\n", "z_mask", "=", "np", ".", "maximum", "(", "np", ".", "abs", "(", "z", ")", ",", "C", "/", "2", ")", "\n", "z", "[", "z_mask", "<=", "C", "/", "2", "]", "=", "0", "\n", "\n", "# Update step", "\n", "grad", "=", "(", "x", "-", "z", "@", "M", ")", ".", "T", "@", "z", "\n", "grad", "/=", "x", ".", "shape", "[", "0", "]", "\n", "\n", "if", "not", "(", "num_steps", "%", "20", ")", ":", "\n", "            ", "print", "(", "f\" Step {s}/{num_steps} Loss {np.linalg.norm(x - z @ M)}\"", ")", "\n", "\n", "", "M", "=", "M", "+", "eta", "*", "grad", ".", "T", "\n", "verify_delta_close", "(", "M", ",", "M_opt", ")", "\n", "# No need to project onto set B if M is delta close to Mopt for all steps", "\n", "", "return", "M", ",", "z", ".", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.verify_data_model.check_data_model.main": [[159, 185], ["gen_M", "gen_z", "gen_epsilon", "check_data_model.verify_delta_k_close", "check_data_model.sparse_coding_neural_update", "matplotlib.subplots", "ax1.plot", "ax1.set", "ax2.plot", "ax2.set", "ax3.plot", "ax3.set", "matplotlib.savefig", "matplotlib.close", "gen_Winit"], "function", ["home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.data_model.gen_sparse_coding_data.gen_M", "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.data_model.gen_sparse_coding_data.gen_z", "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.data_model.gen_sparse_coding_data.gen_epsilon", "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.verify_data_model.check_data_model.verify_delta_k_close", "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.verify_data_model.check_data_model.sparse_coding_neural_update", "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.data_model.gen_sparse_coding_data.gen_Winit"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "M", "=", "gen_M", "(", "p", "=", "args", ".", "p", ",", "d", "=", "args", ".", "d", ")", "# p*d", "\n", "\n", "Z", "=", "gen_z", "(", "n", "=", "args", ".", "nn", ",", "d", "=", "args", ".", "d", ",", "prob", "=", "None", ")", "# d*n", "\n", "epsilon", "=", "gen_epsilon", "(", "n", "=", "args", ".", "nn", ",", "p", "=", "args", ".", "p", ",", "d", "=", "args", ".", "d", ",", "sigma0", "=", "args", ".", "sigma0", ")", "\n", "\n", "X", "=", "(", "M", "@", "Z", "+", "epsilon", ")", ".", "T", "# n*p", "\n", "\n", "W_init", "=", "gen_Winit", "(", "M", ",", "p", "=", "args", ".", "p", ",", "m", "=", "args", ".", "m", ",", "d", "=", "args", ".", "d", ",", "c", "=", "0", ")", ".", "T", "# m*p, m=d", "\n", "\n", "verify_delta_k_close", "(", "W_init", ",", "M", ",", "k", "=", "2", ")", "\n", "\n", "M_final", ",", "z_final", ",", "losslist", ",", "distlist", ",", "zdistlist", ",", "slist", "=", "sparse_coding_neural_update", "(", "X", ",", "W_init", ",", "args", ".", "threshold", ",", "args", ".", "lr", ",", "args", ".", "NUM_EPOCHES", ",", "M", ",", "Z", ")", "\n", "\n", "fig", ",", "(", "ax1", ",", "ax2", ",", "ax3", ")", "=", "plt", ".", "subplots", "(", "1", ",", "3", ",", "figsize", "=", "(", "18", ",", "5", ")", ",", "gridspec_kw", "=", "{", "'width_ratios'", ":", "[", "1", ",", "1", ",", "1", "]", "}", ")", "\n", "ax1", ".", "plot", "(", "slist", ",", "losslist", ",", "color", "=", "'k'", ",", "linewidth", "=", "1.0", ")", "\n", "ax1", ".", "set", "(", "xlabel", "=", "\"epochs\"", ",", "ylabel", "=", "\"loss\"", ")", "\n", "\n", "ax2", ".", "plot", "(", "slist", ",", "distlist", ",", "color", "=", "'k'", ",", "linewidth", "=", "1.0", ")", "\n", "ax2", ".", "set", "(", "xlabel", "=", "\"epochs\"", ",", "ylabel", "=", "\"dictionary error\"", ")", "\n", "\n", "ax3", ".", "plot", "(", "slist", ",", "zdistlist", ",", "color", "=", "'k'", ",", "linewidth", "=", "1.0", ")", "\n", "ax3", ".", "set", "(", "xlabel", "=", "\"epochs\"", ",", "ylabel", "=", "\"latents error\"", ")", "\n", "\n", "plt", ".", "savefig", "(", "\"{0}/result.png\"", ".", "format", "(", "args", ".", "logDir", ")", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.config.default.update_config": [[35, 51], ["cfg.defrost", "cfg.merge_from_file", "print", "cfg.freeze"], "function", ["None"], ["def", "update_config", "(", "cfg", ",", "args", ")", ":", "\n", "    ", "cfg", ".", "defrost", "(", ")", "\n", "cfg", ".", "merge_from_file", "(", "args", ".", "cfg", ")", "\n", "\n", "if", "args", ".", "logDir", ":", "\n", "        ", "cfg", ".", "LOG_DIR", "=", "args", ".", "logDir", "\n", "\n", "", "if", "args", ".", "lr", ":", "\n", "        ", "cfg", ".", "lr", "=", "args", ".", "lr", "\n", "\n", "", "if", "args", ".", "batch_size", ":", "\n", "        ", "cfg", ".", "batch_size", "=", "args", ".", "batch_size", "\n", "\n", "", "print", "(", "cfg", ")", "\n", "\n", "cfg", ".", "freeze", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.models.simclr_asym.SimCLRAsymmetricModel.__init__": [[10, 43], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "models.model_utils.SymReLU", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "simclr_asym.SimCLRAsymmetricModel.init_weights", "models.nt_xent.Asymmetric_NT_Xent"], "methods", ["home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.models.sparse_contrastive_no_alt.SparseContrastiveModelNoAlter.__init__", "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.models.sparse_contrastive_no_alt.SparseContrastiveModelNoAlter.init_weights"], ["    ", "def", "__init__", "(", "self", ",", "Wo_init", ",", "m", ",", "p", ",", "d", ",", "\n", "has_online_ReLU", "=", "True", ",", "\n", "has_target_ReLU", "=", "True", ",", "\n", "device", "=", "None", ",", "\n", "batch_size", "=", "64", ",", "\n", "temperature", "=", "0.05", ",", "\n", "use_bn", "=", "False", ",", "\n", ")", "->", "None", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "p", "=", "p", "\n", "self", ".", "m", "=", "m", "\n", "self", ".", "d", "=", "d", "\n", "\n", "self", ".", "Wo", "=", "nn", ".", "Linear", "(", "p", ",", "m", ",", "bias", "=", "True", ")", "\n", "\n", "self", ".", "srelu", "=", "SymReLU", "(", ")", "\n", "\n", "self", ".", "has_online_ReLU", "=", "has_online_ReLU", "\n", "self", ".", "has_target_ReLU", "=", "has_target_ReLU", "\n", "\n", "self", ".", "use_bn", "=", "use_bn", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm1d", "(", "m", ")", "\n", "\n", "self", ".", "init_weights", "(", "Wo_init", ")", "\n", "\n", "self", ".", "criterion", "=", "Asymmetric_NT_Xent", "(", "batch_size", ",", "temperature", ")", "\n", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "temperature", "=", "temperature", "\n", "self", ".", "device", "=", "device", "\n", "\n", "self", ".", "name", "=", "\"simclr\"", "\n", "\n"]], "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.models.simclr_asym.SimCLRAsymmetricModel.init_weights": [[44, 52], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ",", "Wo_init", ")", ":", "\n", "        ", "if", "self", ".", "Wo", ".", "weight", ".", "shape", "==", "Wo_init", ".", "T", ".", "shape", ":", "\n", "            ", "Wo_init", "=", "Wo_init", ".", "T", "\n", "\n", "", "assert", "Wo_init", ".", "shape", "==", "self", ".", "Wo", ".", "weight", ".", "shape", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "self", ".", "Wo", ".", "weight", ".", "data", "=", "torch", ".", "from_numpy", "(", "Wo_init", ")", ".", "type", "(", "torch", ".", "float", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.models.simclr_asym.SimCLRAsymmetricModel.forward": [[53, 70], ["simclr_asym.SimCLRAsymmetricModel.criterion", "simclr_asym.SimCLRAsymmetricModel.Wo", "simclr_asym.SimCLRAsymmetricModel.Wo", "simclr_asym.SimCLRAsymmetricModel.bn1", "simclr_asym.SimCLRAsymmetricModel.bn1", "simclr_asym.SimCLRAsymmetricModel.srelu", "simclr_asym.SimCLRAsymmetricModel.srelu"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x1", ",", "x2", ")", ":", "\n", "\n", "        ", "zo", ",", "zt", "=", "self", ".", "Wo", "(", "x1", ")", ",", "self", ".", "Wo", "(", "x2", ")", "\n", "\n", "if", "self", ".", "use_bn", ":", "\n", "            ", "zo", "=", "self", ".", "bn1", "(", "zo", ")", "\n", "zt", "=", "self", ".", "bn1", "(", "zt", ")", "\n", "\n", "", "if", "self", ".", "has_online_ReLU", "and", "self", ".", "has_target_ReLU", ":", "\n", "            ", "zo", "=", "self", ".", "srelu", "(", "zo", ",", "self", ".", "Wo", ".", "bias", ")", "\n", "zt", "=", "self", ".", "srelu", "(", "zt", ",", "self", ".", "Wo", ".", "bias", ")", "\n", "\n", "", "self", ".", "predicted_rep", "=", "zo", "\n", "self", ".", "target_rep", "=", "zt", "\n", "\n", "loss", "=", "self", ".", "criterion", "(", "zo", ",", "zt", ")", "\n", "return", "loss", "", "", "", ""]], "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.models.sparse_contrastive_model.SparseContrastiveModel.__init__": [[8, 53], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "sparse_contrastive_model.SparseContrastiveModel.init_weights", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "models.model_utils.SymReLU"], "methods", ["home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.models.sparse_contrastive_no_alt.SparseContrastiveModelNoAlter.__init__", "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.models.sparse_contrastive_no_alt.SparseContrastiveModelNoAlter.init_weights"], ["    ", "def", "__init__", "(", "self", ",", "Wo_init", ",", "Wt_init", ",", "m", ",", "p", ",", "d", ",", "\n", "has_online_ReLU", "=", "True", ",", "\n", "has_target_ReLU", "=", "True", ",", "\n", "device", "=", "None", ",", "\n", "normalize_rep", "=", "True", ",", "\n", "use_bn", "=", "False", ",", "\n", "use_pred", "=", "False", ",", "\n", "linear_pred", "=", "False", ",", "\n", "use_pred_bias", "=", "True", "\n", ")", "->", "None", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "p", "=", "p", "\n", "self", ".", "m", "=", "m", "\n", "self", ".", "d", "=", "d", "\n", "\n", "self", ".", "use_bn", "=", "use_bn", "\n", "self", ".", "use_pred", "=", "use_pred", "\n", "self", ".", "linear_pred", "=", "linear_pred", "\n", "\n", "self", ".", "Wo", "=", "nn", ".", "Linear", "(", "p", ",", "m", ",", "bias", "=", "True", ")", "\n", "self", ".", "Wt", "=", "nn", ".", "Linear", "(", "p", ",", "m", ",", "bias", "=", "True", ")", "\n", "# No bias in predictor", "\n", "if", "use_pred", ":", "\n", "            ", "self", ".", "Wp", "=", "nn", ".", "Linear", "(", "m", ",", "m", ",", "bias", "=", "use_pred_bias", ")", "\n", "\n", "", "if", "use_bn", ":", "\n", "            ", "self", ".", "bno", "=", "nn", ".", "BatchNorm1d", "(", "m", ")", "\n", "self", ".", "bnt", "=", "nn", ".", "BatchNorm1d", "(", "m", ")", "\n", "\n", "", "if", "has_online_ReLU", "and", "has_target_ReLU", ":", "\n", "            ", "self", ".", "srelu", "=", "SymReLU", "(", ")", "\n", "\n", "", "self", ".", "has_online_ReLU", "=", "has_online_ReLU", "\n", "self", ".", "has_target_ReLU", "=", "has_target_ReLU", "\n", "\n", "self", ".", "init_weights", "(", "Wo_init", ",", "Wt_init", ")", "\n", "\n", "self", ".", "device", "=", "device", "\n", "\n", "self", ".", "normalize_rep", "=", "normalize_rep", "\n", "if", "self", ".", "use_pred", ":", "\n", "            ", "self", ".", "name", "=", "'simplified-pred'", "\n", "", "else", ":", "\n", "            ", "self", ".", "name", "=", "\"simplified\"", "\n", "\n"]], "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.models.sparse_contrastive_model.SparseContrastiveModel.init_weights": [[55, 66], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["None"], ["", "", "def", "init_weights", "(", "self", ",", "Wo_init", ",", "Wt_init", ")", ":", "\n", "        ", "if", "self", ".", "Wo", ".", "weight", ".", "shape", "==", "Wo_init", ".", "T", ".", "shape", ":", "\n", "            ", "Wo_init", "=", "Wo_init", ".", "T", "\n", "Wt_init", "=", "Wt_init", ".", "T", "\n", "\n", "", "assert", "Wo_init", ".", "shape", "==", "self", ".", "Wo", ".", "weight", ".", "shape", "\n", "assert", "Wt_init", ".", "shape", "==", "self", ".", "Wt", ".", "weight", ".", "shape", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "self", ".", "Wo", ".", "weight", ".", "data", "=", "torch", ".", "from_numpy", "(", "Wo_init", ")", ".", "type", "(", "torch", ".", "float", ")", "\n", "self", ".", "Wt", ".", "weight", ".", "data", "=", "torch", ".", "from_numpy", "(", "Wt_init", ")", ".", "type", "(", "torch", ".", "float", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.models.sparse_contrastive_model.SparseContrastiveModel.forward": [[67, 122], ["sparse_contrastive_model.SparseContrastiveModel.Wo", "sparse_contrastive_model.SparseContrastiveModel.Wt", "sparse_contrastive_model.SparseContrastiveModel.bno", "sparse_contrastive_model.SparseContrastiveModel.bnt", "sparse_contrastive_model.SparseContrastiveModel.srelu", "sparse_contrastive_model.SparseContrastiveModel.srelu", "sparse_contrastive_model.SparseContrastiveModel.Wp", "sparse_contrastive_model.SparseContrastiveModel.Wp", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.sum().mean", "torch.sum().mean", "torch.sum().mean", "torch.sum().mean", "torch.sum().mean", "torch.sum().mean", "torch.sum().mean", "torch.sum().mean", "torch.sum().mean", "torch.sum().mean", "torch.sum().mean", "torch.sum().mean", "torch.sum().mean", "torch.sum().mean", "torch.sum().mean", "torch.sum().mean", "torch.sum().mean", "torch.sum().mean", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.normalize.detach", "torch.normalize.detach", "torch.normalize.detach", "torch.normalize.detach"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x1", ",", "x2", ",", "optimize_online", "=", "True", ")", ":", "\n", "        ", "zo", "=", "self", ".", "Wo", "(", "x1", ")", "\n", "zt", "=", "self", ".", "Wt", "(", "x2", ")", "\n", "\n", "self", ".", "zo", "=", "zo", "\n", "self", ".", "zt", "=", "zt", "\n", "\n", "if", "self", ".", "use_bn", ":", "\n", "            ", "zo", "=", "self", ".", "bno", "(", "zo", ")", "\n", "zt", "=", "self", ".", "bnt", "(", "zt", ")", "\n", "\n", "", "if", "self", ".", "has_online_ReLU", "and", "self", ".", "has_target_ReLU", ":", "\n", "            ", "zo", "=", "self", ".", "srelu", "(", "zo", ",", "self", ".", "Wo", ".", "bias", ")", "\n", "zt", "=", "self", ".", "srelu", "(", "zt", ",", "self", ".", "Wt", ".", "bias", ")", "\n", "\n", "", "self", ".", "error", "=", "zo", "-", "zt", "\n", "\n", "self", ".", "predicted_rep", "=", "zo", "\n", "self", ".", "target_rep", "=", "zt", "\n", "\n", "if", "self", ".", "use_pred", ":", "\n", "            ", "if", "optimize_online", ":", "\n", "                ", "po", "=", "self", ".", "Wp", "(", "zo", ")", "\n", "if", "self", ".", "normalize_rep", ":", "\n", "                    ", "po", "=", "F", ".", "normalize", "(", "po", ",", "dim", "=", "1", ")", "\n", "", "", "else", ":", "\n", "                ", "pt", "=", "self", ".", "Wp", "(", "zt", ")", "\n", "if", "self", ".", "normalize_rep", ":", "\n", "                    ", "pt", "=", "F", ".", "normalize", "(", "pt", ",", "dim", "=", "1", ")", "\n", "\n", "", "", "", "if", "self", ".", "normalize_rep", ":", "\n", "            ", "if", "optimize_online", ":", "\n", "                ", "zt", "=", "F", ".", "normalize", "(", "zt", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "                ", "zo", "=", "F", ".", "normalize", "(", "zo", ",", "dim", "=", "1", ")", "\n", "\n", "", "", "if", "optimize_online", ":", "\n", "            ", "if", "self", ".", "use_pred", ":", "\n", "#loss = torch.sum((po - zt.detach())**2, dim=-1).mean()", "\n", "# This loss is used in theoretical analysis of training dynamics", "\n", "                ", "loss", "=", "2", "-", "2", "*", "(", "po", "*", "zt", ".", "detach", "(", ")", ")", ".", "sum", "(", "dim", "=", "1", ")", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "                ", "loss", "=", "torch", ".", "sum", "(", "(", "zo", "-", "zt", ".", "detach", "(", ")", ")", "**", "2", ",", "dim", "=", "-", "1", ")", ".", "mean", "(", ")", "\n", "\n", "", "", "else", ":", "\n", "            ", "if", "self", ".", "use_pred", ":", "\n", "#loss = torch.sum((zo.detach() - pt)**2, dim=-1).mean()", "\n", "# This loss is used in theoretical analysis of training dynamics", "\n", "                ", "loss", "=", "2", "-", "2", "*", "(", "zo", ".", "detach", "(", ")", "*", "pt", ")", ".", "sum", "(", "dim", "=", "1", ")", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "                ", "loss", "=", "torch", ".", "sum", "(", "(", "zo", ".", "detach", "(", ")", "-", "zt", ")", "**", "2", ",", "dim", "=", "-", "1", ")", ".", "mean", "(", ")", "\n", "\n", "", "", "self", ".", "bo", "=", "self", ".", "Wo", ".", "bias", "\n", "self", ".", "bt", "=", "self", ".", "Wt", ".", "bias", "\n", "return", "loss", "", "", "", ""]], "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.models.simclr.SimCLROrigModel.__init__": [[10, 42], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "models.model_utils.SymReLU", "simclr.SimCLROrigModel.init_weights", "models.nt_xent.NT_Xent", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.models.sparse_contrastive_no_alt.SparseContrastiveModelNoAlter.__init__", "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.models.sparse_contrastive_no_alt.SparseContrastiveModelNoAlter.init_weights"], ["    ", "def", "__init__", "(", "self", ",", "Wo_init", ",", "m", ",", "p", ",", "d", ",", "\n", "has_online_ReLU", "=", "True", ",", "\n", "has_target_ReLU", "=", "True", ",", "\n", "device", "=", "None", ",", "\n", "batch_size", "=", "64", ",", "\n", "temperature", "=", "0.05", "\n", ")", "->", "None", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "p", "=", "p", "\n", "self", ".", "m", "=", "m", "\n", "self", ".", "d", "=", "d", "\n", "\n", "self", ".", "Wo", "=", "nn", ".", "Linear", "(", "p", ",", "m", ",", "bias", "=", "True", ")", "\n", "self", ".", "Wp", "=", "nn", ".", "Linear", "(", "m", ",", "m", ",", "bias", "=", "True", ")", "\n", "\n", "self", ".", "srelu", "=", "SymReLU", "(", ")", "\n", "\n", "self", ".", "has_online_ReLU", "=", "has_online_ReLU", "\n", "self", ".", "has_target_ReLU", "=", "has_target_ReLU", "\n", "\n", "self", ".", "init_weights", "(", "Wo_init", ")", "\n", "\n", "self", ".", "criterion", "=", "NT_Xent", "(", "batch_size", ",", "temperature", ")", "\n", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "temperature", "=", "temperature", "\n", "self", ".", "device", "=", "device", "\n", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm1d", "(", "m", ")", "\n", "\n", "self", ".", "name", "=", "\"simclr-orig\"", "\n", "\n"]], "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.models.simclr.SimCLROrigModel.init_weights": [[43, 51], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ",", "Wo_init", ")", ":", "\n", "        ", "if", "self", ".", "Wo", ".", "weight", ".", "shape", "==", "Wo_init", ".", "T", ".", "shape", ":", "\n", "            ", "Wo_init", "=", "Wo_init", ".", "T", "\n", "\n", "", "assert", "Wo_init", ".", "shape", "==", "self", ".", "Wo", ".", "weight", ".", "shape", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "self", ".", "Wo", ".", "weight", ".", "data", "=", "torch", ".", "from_numpy", "(", "Wo_init", ")", ".", "type", "(", "torch", ".", "float", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.models.simclr.SimCLROrigModel.forward": [[52, 66], ["simclr.SimCLROrigModel.srelu", "simclr.SimCLROrigModel.srelu", "simclr.SimCLROrigModel.Wp", "simclr.SimCLROrigModel.Wp", "simclr.SimCLROrigModel.criterion", "simclr.SimCLROrigModel.Wo", "simclr.SimCLROrigModel.Wo", "simclr.SimCLROrigModel.bn1", "simclr.SimCLROrigModel.bn1"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x1", ",", "x2", ")", ":", "\n", "        ", "zo", ",", "zt", "=", "self", ".", "Wo", "(", "x1", ")", ",", "self", ".", "Wo", "(", "x2", ")", "\n", "\n", "zo", "=", "self", ".", "srelu", "(", "self", ".", "bn1", "(", "zo", ")", ",", "self", ".", "Wo", ".", "bias", ")", "\n", "zt", "=", "self", ".", "srelu", "(", "self", ".", "bn1", "(", "zt", ")", ",", "self", ".", "Wo", ".", "bias", ")", "\n", "\n", "self", ".", "predicted_rep", "=", "zo", "\n", "self", ".", "target_rep", "=", "zt", "\n", "\n", "zo", "=", "self", ".", "Wp", "(", "zo", ")", "\n", "zt", "=", "self", ".", "Wp", "(", "zt", ")", "\n", "\n", "loss", "=", "self", ".", "criterion", "(", "zo", ",", "zt", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.models.simclr.SimCLRModel.__init__": [[68, 101], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "models.model_utils.SymReLU", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "simclr.SimCLRModel.init_weights", "models.nt_xent.NT_Xent"], "methods", ["home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.models.sparse_contrastive_no_alt.SparseContrastiveModelNoAlter.__init__", "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.models.sparse_contrastive_no_alt.SparseContrastiveModelNoAlter.init_weights"], ["    ", "def", "__init__", "(", "self", ",", "Wo_init", ",", "m", ",", "p", ",", "d", ",", "\n", "has_online_ReLU", "=", "True", ",", "\n", "has_target_ReLU", "=", "True", ",", "\n", "device", "=", "None", ",", "\n", "batch_size", "=", "64", ",", "\n", "temperature", "=", "0.05", ",", "\n", "use_bn", "=", "False", ",", "\n", ")", "->", "None", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "p", "=", "p", "\n", "self", ".", "m", "=", "m", "\n", "self", ".", "d", "=", "d", "\n", "\n", "self", ".", "Wo", "=", "nn", ".", "Linear", "(", "p", ",", "m", ",", "bias", "=", "True", ")", "\n", "\n", "self", ".", "srelu", "=", "SymReLU", "(", ")", "\n", "\n", "self", ".", "has_online_ReLU", "=", "has_online_ReLU", "\n", "self", ".", "has_target_ReLU", "=", "has_target_ReLU", "\n", "\n", "self", ".", "use_bn", "=", "use_bn", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm1d", "(", "m", ")", "\n", "\n", "self", ".", "init_weights", "(", "Wo_init", ")", "\n", "\n", "self", ".", "criterion", "=", "NT_Xent", "(", "batch_size", ",", "temperature", ")", "\n", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "temperature", "=", "temperature", "\n", "self", ".", "device", "=", "device", "\n", "\n", "self", ".", "name", "=", "\"simclr\"", "\n", "\n"]], "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.models.simclr.SimCLRModel.init_weights": [[102, 110], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ",", "Wo_init", ")", ":", "\n", "        ", "if", "self", ".", "Wo", ".", "weight", ".", "shape", "==", "Wo_init", ".", "T", ".", "shape", ":", "\n", "            ", "Wo_init", "=", "Wo_init", ".", "T", "\n", "\n", "", "assert", "Wo_init", ".", "shape", "==", "self", ".", "Wo", ".", "weight", ".", "shape", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "self", ".", "Wo", ".", "weight", ".", "data", "=", "torch", ".", "from_numpy", "(", "Wo_init", ")", ".", "type", "(", "torch", ".", "float", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.models.simclr.SimCLRModel.forward": [[111, 127], ["simclr.SimCLRModel.criterion", "simclr.SimCLRModel.Wo", "simclr.SimCLRModel.Wo", "simclr.SimCLRModel.bn1", "simclr.SimCLRModel.bn1", "simclr.SimCLRModel.srelu", "simclr.SimCLRModel.srelu"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x1", ",", "x2", ")", ":", "\n", "        ", "zo", ",", "zt", "=", "self", ".", "Wo", "(", "x1", ")", ",", "self", ".", "Wo", "(", "x2", ")", "\n", "\n", "if", "self", ".", "use_bn", ":", "\n", "            ", "zo", "=", "self", ".", "bn1", "(", "zo", ")", "\n", "zt", "=", "self", ".", "bn1", "(", "zt", ")", "\n", "\n", "", "if", "self", ".", "has_online_ReLU", "and", "self", ".", "has_target_ReLU", ":", "\n", "            ", "zo", "=", "self", ".", "srelu", "(", "zo", ",", "self", ".", "Wo", ".", "bias", ")", "\n", "zt", "=", "self", ".", "srelu", "(", "zt", ",", "self", ".", "Wo", ".", "bias", ")", "\n", "\n", "", "self", ".", "predicted_rep", "=", "zo", "\n", "self", ".", "target_rep", "=", "zt", "\n", "\n", "loss", "=", "self", ".", "criterion", "(", "zo", ",", "zt", ")", "\n", "return", "loss", "", "", "", ""]], "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.models.simsiam.SimSiamModel.__init__": [[8, 42], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "SymReLU", "simsiam.SimSiamModel.init_weights", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "print"], "methods", ["home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.models.sparse_contrastive_no_alt.SparseContrastiveModelNoAlter.__init__", "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.models.sparse_contrastive_no_alt.SparseContrastiveModelNoAlter.init_weights"], ["    ", "def", "__init__", "(", "self", ",", "Wo_init", ",", "m", ",", "p", ",", "d", ",", "\n", "has_online_ReLU", "=", "True", ",", "\n", "has_target_ReLU", "=", "True", ",", "\n", "device", "=", "None", ",", "\n", "batch_norm", "=", "None", ",", "\n", "use_bn", "=", "True", ",", "\n", ")", "->", "None", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "p", "=", "p", "\n", "self", ".", "m", "=", "m", "\n", "self", ".", "d", "=", "d", "\n", "\n", "self", ".", "Wo", "=", "nn", ".", "Linear", "(", "p", ",", "m", ",", "bias", "=", "True", ")", "\n", "self", ".", "Wproj", "=", "nn", ".", "Linear", "(", "m", ",", "m", ",", "bias", "=", "True", ")", "\n", "self", ".", "Wp", "=", "nn", ".", "Linear", "(", "m", ",", "m", ",", "bias", "=", "True", ")", "\n", "\n", "self", ".", "srelu", "=", "SymReLU", "(", ")", "\n", "\n", "self", ".", "has_online_ReLU", "=", "has_online_ReLU", "\n", "self", ".", "has_target_ReLU", "=", "has_target_ReLU", "\n", "\n", "self", ".", "init_weights", "(", "Wo_init", ")", "\n", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "use_bn", "=", "use_bn", "\n", "self", ".", "batch_norm", "=", "batch_norm", "\n", "\n", "if", "batch_norm", "is", "not", "None", "or", "self", ".", "use_bn", ":", "\n", "            ", "self", ".", "norm1", "=", "nn", ".", "BatchNorm1d", "(", "m", ")", "\n", "self", ".", "norm2", "=", "nn", ".", "BatchNorm1d", "(", "m", ")", "\n", "\n", "print", "(", "f\"Using batch norm {batch_norm}\"", ")", "\n", "", "self", ".", "name", "=", "\"simsiam\"", "\n", "\n"]], "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.models.simsiam.SimSiamModel.init_weights": [[43, 51], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ",", "Wo_init", ")", ":", "\n", "        ", "if", "self", ".", "Wo", ".", "weight", ".", "shape", "==", "Wo_init", ".", "T", ".", "shape", ":", "\n", "            ", "Wo_init", "=", "Wo_init", ".", "T", "\n", "\n", "", "assert", "Wo_init", ".", "shape", "==", "self", ".", "Wo", ".", "weight", ".", "shape", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "self", ".", "Wo", ".", "weight", ".", "data", "=", "torch", ".", "from_numpy", "(", "Wo_init", ")", ".", "type", "(", "torch", ".", "float", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.models.simsiam.SimSiamModel.forward": [[52, 84], ["simsiam.SimSiamModel.srelu", "simsiam.SimSiamModel.srelu", "simsiam.SimSiamModel.srelu", "simsiam.SimSiamModel.srelu", "simsiam.SimSiamModel.Wo", "simsiam.SimSiamModel.Wo", "simsiam.SimSiamModel.norm1", "simsiam.SimSiamModel.norm1", "simsiam.SimSiamModel.norm1", "simsiam.SimSiamModel.norm1", "simsiam.SimSiamModel.Wproj", "simsiam.SimSiamModel.Wproj", "simsiam.SimSiamModel.norm2", "simsiam.SimSiamModel.norm2", "simsiam.SimSiamModel.norm2", "simsiam.SimSiamModel.norm2", "simsiam.SimSiamModel.Wp", "simsiam.SimSiamModel.Wp", "D", "D"], "methods", ["home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.models.model_utils.D", "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.models.model_utils.D"], ["", "", "def", "forward", "(", "self", ",", "x1", ",", "x2", ")", ":", "\n", "        ", "zo", ",", "zt", "=", "self", ".", "Wo", "(", "x1", ")", ",", "self", ".", "Wo", "(", "x2", ")", "\n", "if", "self", ".", "use_bn", "or", "self", ".", "batch_norm", "==", "'encoder_pre_activation'", ":", "\n", "            ", "zo", "=", "self", ".", "norm1", "(", "zo", ")", "\n", "zt", "=", "self", ".", "norm1", "(", "zt", ")", "\n", "\n", "", "zo", "=", "self", ".", "srelu", "(", "zo", ",", "self", ".", "Wo", ".", "bias", ")", "\n", "zt", "=", "self", ".", "srelu", "(", "zt", ",", "self", ".", "Wo", ".", "bias", ")", "\n", "\n", "if", "self", ".", "batch_norm", "==", "'encoder_post_activation'", ":", "\n", "            ", "zo", "=", "self", ".", "norm1", "(", "zo", ")", "\n", "zt", "=", "self", ".", "norm1", "(", "zt", ")", "\n", "\n", "", "self", ".", "predicted_rep", "=", "zo", "# Used for checking support in pytorch_utils.py", "\n", "self", ".", "target_rep", "=", "zt", "\n", "\n", "zo", ",", "zt", "=", "self", ".", "Wproj", "(", "zo", ")", ",", "self", ".", "Wproj", "(", "zt", ")", "\n", "if", "self", ".", "use_bn", "or", "self", ".", "batch_norm", "==", "'encoder_pre_activation'", ":", "\n", "            ", "zo", "=", "self", ".", "norm2", "(", "zo", ")", "\n", "zt", "=", "self", ".", "norm2", "(", "zt", ")", "\n", "\n", "", "zo", "=", "self", ".", "srelu", "(", "zo", ",", "self", ".", "Wproj", ".", "bias", ")", "\n", "zt", "=", "self", ".", "srelu", "(", "zt", ",", "self", ".", "Wproj", ".", "bias", ")", "\n", "\n", "if", "self", ".", "batch_norm", "==", "'encoder_post_activation'", ":", "\n", "            ", "zo", "=", "self", ".", "norm2", "(", "zo", ")", "\n", "zt", "=", "self", ".", "norm2", "(", "zt", ")", "\n", "\n", "", "p1", ",", "p2", "=", "self", ".", "Wp", "(", "zo", ")", ",", "self", ".", "Wp", "(", "zt", ")", "\n", "\n", "loss", "=", "0.5", "*", "(", "D", "(", "p1", ",", "zt", ",", "\"simplified\"", ")", "+", "D", "(", "p2", ",", "zo", ",", "\"simplified\"", ")", ")", "\n", "return", "loss", "", "", "", ""]], "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.models.model_utils.SymReLU.__init__": [[6, 9], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.models.sparse_contrastive_no_alt.SparseContrastiveModelNoAlter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "use_neg_bias", "=", "False", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "use_neg_bias", "=", "use_neg_bias", "\n", "\n"]], "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.models.model_utils.SymReLU.forward": [[10, 14], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "b", ")", ":", "\n", "        ", "if", "self", ".", "use_neg_bias", ":", "\n", "            ", "return", "F", ".", "relu", "(", "x", ")", "-", "F", ".", "relu", "(", "-", "x", "-", "2", "*", "b", ")", "\n", "", "return", "F", ".", "relu", "(", "x", ")", "-", "F", ".", "relu", "(", "-", "x", "+", "2", "*", "b", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.models.model_utils.D": [[15, 32], ["F.normalize.detach", "torch.normalize", "torch.normalize", "torch.cosine_similarity().mean", "F.normalize.detach", "torch.normalize", "torch.normalize", "torch.sum().mean", "torch.sum().mean", "torch.sum().mean", "torch.cosine_similarity", "torch.sum", "torch.sum", "torch.sum", "F.normalize.detach"], "function", ["None"], ["", "", "def", "D", "(", "p", ",", "z", ",", "version", "=", "'l2'", ")", ":", "# negative cosine similarity", "\n", "    ", "if", "version", "==", "'original'", ":", "\n", "        ", "z", "=", "z", ".", "detach", "(", ")", "# stop gradient", "\n", "p", "=", "F", ".", "normalize", "(", "p", ",", "dim", "=", "1", ")", "# l2-normalize", "\n", "z", "=", "F", ".", "normalize", "(", "z", ",", "dim", "=", "1", ")", "# l2-normalize", "\n", "return", "-", "(", "p", "*", "z", ")", ".", "sum", "(", "dim", "=", "1", ")", ".", "mean", "(", ")", "\n", "\n", "", "elif", "version", "==", "'simplified'", ":", "\n", "        ", "return", "-", "F", ".", "cosine_similarity", "(", "p", ",", "z", ".", "detach", "(", ")", ",", "dim", "=", "-", "1", ")", ".", "mean", "(", ")", "\n", "\n", "", "elif", "version", "==", "'l2'", ":", "\n", "        ", "z", "=", "z", ".", "detach", "(", ")", "\n", "p", "=", "F", ".", "normalize", "(", "p", ",", "dim", "=", "1", ")", "# l2-normalize", "\n", "z", "=", "F", ".", "normalize", "(", "z", ",", "dim", "=", "1", ")", "# l2-normalize", "\n", "return", "torch", ".", "sum", "(", "(", "p", "-", "z", ")", "**", "2", ",", "dim", "=", "-", "1", ")", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.models.sparse_contrastive_ml_model.SparseContrastiveMultiLayeredModel.__init__": [[8, 48], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "print", "sparse_contrastive_ml_model.SparseContrastiveMultiLayeredModel.init_weights", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "models.model_utils.SymReLU"], "methods", ["home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.models.sparse_contrastive_no_alt.SparseContrastiveModelNoAlter.__init__", "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.models.sparse_contrastive_no_alt.SparseContrastiveModelNoAlter.init_weights"], ["    ", "def", "__init__", "(", "self", ",", "Wo_init", ",", "Wt_init", ",", "Wo1_init", ",", "Wt1_init", ",", "m", ",", "p", ",", "d", ",", "\n", "has_online_ReLU", "=", "True", ",", "\n", "has_target_ReLU", "=", "True", ",", "\n", "device", "=", "None", ",", "\n", "normalize_rep", "=", "True", ",", "\n", "use_bn", "=", "False", ",", "\n", ")", "->", "None", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "p", "=", "p", "\n", "self", ".", "m", "=", "m", "\n", "self", ".", "d", "=", "d", "\n", "\n", "self", ".", "use_bn", "=", "use_bn", "\n", "self", ".", "Wo", "=", "nn", ".", "Linear", "(", "p", ",", "m", ",", "bias", "=", "True", ")", "\n", "self", ".", "Wo_1", "=", "nn", ".", "Linear", "(", "m", ",", "m", ",", "bias", "=", "True", ")", "\n", "\n", "self", ".", "Wt", "=", "nn", ".", "Linear", "(", "p", ",", "m", ",", "bias", "=", "True", ")", "\n", "self", ".", "Wt_1", "=", "nn", ".", "Linear", "(", "m", ",", "m", ",", "bias", "=", "True", ")", "\n", "\n", "if", "use_bn", ":", "\n", "            ", "self", ".", "bno", "=", "nn", ".", "BatchNorm1d", "(", "m", ")", "\n", "self", ".", "bnt", "=", "nn", ".", "BatchNorm1d", "(", "m", ")", "\n", "\n", "self", ".", "bno_1", "=", "nn", ".", "BatchNorm1d", "(", "m", ")", "\n", "self", ".", "bnt_1", "=", "nn", ".", "BatchNorm1d", "(", "m", ")", "\n", "\n", "", "print", "(", "self", ".", "Wo", ".", "weight", ".", "shape", ")", "\n", "if", "has_online_ReLU", "and", "has_target_ReLU", ":", "\n", "            ", "self", ".", "srelu", "=", "SymReLU", "(", ")", "\n", "\n", "", "self", ".", "has_online_ReLU", "=", "has_online_ReLU", "\n", "self", ".", "has_target_ReLU", "=", "has_target_ReLU", "\n", "\n", "self", ".", "init_weights", "(", "Wo_init", ",", "Wt_init", ",", "Wo1_init", ",", "Wt1_init", ")", "\n", "\n", "self", ".", "device", "=", "device", "\n", "\n", "self", ".", "normalize_rep", "=", "normalize_rep", "\n", "self", ".", "name", "=", "\"simplified-ml\"", "\n", "\n"]], "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.models.sparse_contrastive_ml_model.SparseContrastiveMultiLayeredModel.init_weights": [[49, 67], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ",", "Wo_init", ",", "Wt_init", ",", "Wo1_init", ",", "Wt1_init", ")", ":", "\n", "        ", "if", "self", ".", "Wo", ".", "weight", ".", "shape", "==", "Wo_init", ".", "T", ".", "shape", ":", "\n", "            ", "Wo_init", "=", "Wo_init", ".", "T", "\n", "Wt_init", "=", "Wt_init", ".", "T", "\n", "\n", "Wo1_init", "=", "Wo1_init", ".", "T", "\n", "Wt1_init", "=", "Wt1_init", ".", "T", "\n", "\n", "", "assert", "Wo_init", ".", "shape", "==", "self", ".", "Wo", ".", "weight", ".", "shape", ",", "f\"{Wo_init.shape} {self.Wo.weight.shape}\"", "\n", "assert", "Wt_init", ".", "shape", "==", "self", ".", "Wt", ".", "weight", ".", "shape", ",", "f\"{Wt_init.shape} {self.Wt.weight.shape}\"", "\n", "assert", "Wo1_init", ".", "shape", "==", "self", ".", "Wo_1", ".", "weight", ".", "shape", ",", "f\"{Wo1_init.shape} {self.Wo_1.weight.shape}\"", "\n", "assert", "Wt1_init", ".", "shape", "==", "self", ".", "Wt_1", ".", "weight", ".", "shape", ",", "f\"{Wt1_init.shape} {self.Wt_1.weight.shape}\"", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "self", ".", "Wo", ".", "weight", ".", "data", "=", "torch", ".", "from_numpy", "(", "Wo_init", ")", ".", "type", "(", "torch", ".", "float", ")", "\n", "self", ".", "Wt", ".", "weight", ".", "data", "=", "torch", ".", "from_numpy", "(", "Wt_init", ")", ".", "type", "(", "torch", ".", "float", ")", "\n", "self", ".", "Wo_1", ".", "weight", ".", "data", "=", "torch", ".", "from_numpy", "(", "Wo1_init", ")", ".", "type", "(", "torch", ".", "float", ")", "\n", "self", ".", "Wt_1", ".", "weight", ".", "data", "=", "torch", ".", "from_numpy", "(", "Wt1_init", ")", ".", "type", "(", "torch", ".", "float", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.models.sparse_contrastive_ml_model.SparseContrastiveMultiLayeredModel.forward": [[68, 110], ["sparse_contrastive_ml_model.SparseContrastiveMultiLayeredModel.Wo", "sparse_contrastive_ml_model.SparseContrastiveMultiLayeredModel.Wt", "sparse_contrastive_ml_model.SparseContrastiveMultiLayeredModel.srelu", "sparse_contrastive_ml_model.SparseContrastiveMultiLayeredModel.srelu", "sparse_contrastive_ml_model.SparseContrastiveMultiLayeredModel.Wo_1", "sparse_contrastive_ml_model.SparseContrastiveMultiLayeredModel.Wt_1", "sparse_contrastive_ml_model.SparseContrastiveMultiLayeredModel.srelu", "sparse_contrastive_ml_model.SparseContrastiveMultiLayeredModel.srelu", "sparse_contrastive_ml_model.SparseContrastiveMultiLayeredModel.bno", "sparse_contrastive_ml_model.SparseContrastiveMultiLayeredModel.bnt", "sparse_contrastive_ml_model.SparseContrastiveMultiLayeredModel.bno_1", "sparse_contrastive_ml_model.SparseContrastiveMultiLayeredModel.bnt_1", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.sum().mean", "torch.sum().mean", "torch.sum().mean", "torch.sum().mean", "torch.sum().mean", "torch.sum().mean", "torch.sum().mean", "torch.sum().mean", "torch.sum().mean", "torch.sum().mean", "torch.sum().mean", "torch.sum().mean", "torch.sum().mean", "torch.sum().mean", "torch.sum().mean", "torch.sum().mean", "torch.sum().mean", "torch.sum().mean", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.normalize.detach", "torch.normalize.detach"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x1", ",", "x2", ",", "optimize_online", "=", "True", ")", ":", "\n", "        ", "zo", "=", "self", ".", "Wo", "(", "x1", ")", "\n", "zt", "=", "self", ".", "Wt", "(", "x2", ")", "\n", "\n", "if", "self", ".", "use_bn", ":", "\n", "            ", "zo", "=", "self", ".", "bno", "(", "zo", ")", "\n", "zt", "=", "self", ".", "bnt", "(", "zt", ")", "\n", "\n", "", "zo", "=", "self", ".", "srelu", "(", "zo", ",", "self", ".", "Wo", ".", "bias", ")", "\n", "zt", "=", "self", ".", "srelu", "(", "zt", ",", "self", ".", "Wt", ".", "bias", ")", "\n", "\n", "zo", "=", "self", ".", "Wo_1", "(", "zo", ")", "\n", "zt", "=", "self", ".", "Wt_1", "(", "zt", ")", "\n", "\n", "self", ".", "zo", "=", "zo", "\n", "self", ".", "zt", "=", "zt", "\n", "\n", "if", "self", ".", "use_bn", ":", "\n", "            ", "zo", "=", "self", ".", "bno_1", "(", "zo", ")", "\n", "zt", "=", "self", ".", "bnt_1", "(", "zt", ")", "\n", "\n", "", "zo", "=", "self", ".", "srelu", "(", "zo", ",", "self", ".", "Wo_1", ".", "bias", ")", "\n", "zt", "=", "self", ".", "srelu", "(", "zt", ",", "self", ".", "Wt_1", ".", "bias", ")", "\n", "\n", "self", ".", "error", "=", "zo", "-", "zt", "\n", "\n", "self", ".", "predicted_rep", "=", "zo", "\n", "self", ".", "target_rep", "=", "zt", "\n", "\n", "if", "self", ".", "normalize_rep", ":", "\n", "            ", "zo", "=", "F", ".", "normalize", "(", "zo", ",", "dim", "=", "1", ")", "\n", "zt", "=", "F", ".", "normalize", "(", "zt", ",", "dim", "=", "1", ")", "\n", "\n", "#loss = torch.sum((zo - zt)**2, dim=-1).mean()", "\n", "", "if", "optimize_online", ":", "\n", "            ", "loss", "=", "torch", ".", "sum", "(", "(", "zo", "-", "zt", ".", "detach", "(", ")", ")", "**", "2", ",", "dim", "=", "-", "1", ")", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "            ", "loss", "=", "torch", ".", "sum", "(", "(", "zo", ".", "detach", "(", ")", "-", "zt", ")", "**", "2", ",", "dim", "=", "-", "1", ")", ".", "mean", "(", ")", "\n", "\n", "", "self", ".", "bo", "=", "self", ".", "Wo", ".", "bias", "\n", "self", ".", "bt", "=", "self", ".", "Wt", ".", "bias", "\n", "return", "loss", "", "", "", ""]], "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.models.simsiam_ml.SimSiamMultiLayeredModel.__init__": [[8, 38], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "SymReLU", "simsiam_ml.SimSiamMultiLayeredModel.init_weights", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "print"], "methods", ["home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.models.sparse_contrastive_no_alt.SparseContrastiveModelNoAlter.__init__", "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.models.sparse_contrastive_no_alt.SparseContrastiveModelNoAlter.init_weights"], ["    ", "def", "__init__", "(", "self", ",", "Wo_init", ",", "Wo1_init", ",", "m", ",", "p", ",", "d", ",", "\n", "has_online_ReLU", "=", "True", ",", "\n", "has_target_ReLU", "=", "True", ",", "\n", "device", "=", "None", ",", "\n", "use_bn", "=", "None", ",", "\n", ")", "->", "None", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "p", "=", "p", "\n", "self", ".", "m", "=", "m", "\n", "self", ".", "d", "=", "d", "\n", "\n", "self", ".", "Wo", "=", "nn", ".", "Linear", "(", "p", ",", "m", ",", "bias", "=", "True", ")", "\n", "self", ".", "Wo_1", "=", "nn", ".", "Linear", "(", "m", ",", "m", ",", "bias", "=", "True", ")", "\n", "self", ".", "Wp", "=", "nn", ".", "Linear", "(", "m", ",", "m", ",", "bias", "=", "True", ")", "\n", "\n", "self", ".", "srelu", "=", "SymReLU", "(", ")", "\n", "\n", "self", ".", "has_online_ReLU", "=", "has_online_ReLU", "\n", "self", ".", "has_target_ReLU", "=", "has_target_ReLU", "\n", "\n", "self", ".", "init_weights", "(", "Wo_init", ",", "Wo1_init", ")", "\n", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "use_bn", "=", "use_bn", "\n", "if", "use_bn", "is", "not", "None", ":", "\n", "            ", "self", ".", "norm1", "=", "nn", ".", "BatchNorm1d", "(", "m", ")", "\n", "self", ".", "norm2", "=", "nn", ".", "BatchNorm1d", "(", "m", ")", "\n", "print", "(", "f\"Using batch norm {use_bn}\"", ")", "\n", "", "self", ".", "name", "=", "\"simsiam-ml\"", "\n", "\n"]], "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.models.simsiam_ml.SimSiamMultiLayeredModel.init_weights": [[39, 50], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ",", "Wo_init", ",", "Wo1_init", ")", ":", "\n", "        ", "if", "self", ".", "Wo", ".", "weight", ".", "shape", "==", "Wo_init", ".", "T", ".", "shape", ":", "\n", "            ", "Wo_init", "=", "Wo_init", ".", "T", "\n", "Wo1_init", "=", "Wo1_init", ".", "T", "\n", "\n", "", "assert", "Wo_init", ".", "shape", "==", "self", ".", "Wo", ".", "weight", ".", "shape", "\n", "assert", "Wo1_init", ".", "shape", "==", "self", ".", "Wo_1", ".", "weight", ".", "shape", ",", "f\"{Wo1_init.shape} {self.Wo_1.weight.shape}\"", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "self", ".", "Wo", ".", "weight", ".", "data", "=", "torch", ".", "from_numpy", "(", "Wo_init", ")", ".", "type", "(", "torch", ".", "float", ")", "\n", "self", ".", "Wo_1", ".", "weight", ".", "data", "=", "torch", ".", "from_numpy", "(", "Wo1_init", ")", ".", "type", "(", "torch", ".", "float", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.models.simsiam_ml.SimSiamMultiLayeredModel.forward": [[51, 75], ["simsiam_ml.SimSiamMultiLayeredModel.srelu", "simsiam_ml.SimSiamMultiLayeredModel.srelu", "simsiam_ml.SimSiamMultiLayeredModel.srelu", "simsiam_ml.SimSiamMultiLayeredModel.srelu", "simsiam_ml.SimSiamMultiLayeredModel.Wo", "simsiam_ml.SimSiamMultiLayeredModel.Wo", "simsiam_ml.SimSiamMultiLayeredModel.norm1", "simsiam_ml.SimSiamMultiLayeredModel.norm1", "simsiam_ml.SimSiamMultiLayeredModel.Wo_1", "simsiam_ml.SimSiamMultiLayeredModel.Wo_1", "simsiam_ml.SimSiamMultiLayeredModel.norm2", "simsiam_ml.SimSiamMultiLayeredModel.norm2", "simsiam_ml.SimSiamMultiLayeredModel.Wp", "simsiam_ml.SimSiamMultiLayeredModel.Wp", "D", "D"], "methods", ["home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.models.model_utils.D", "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.models.model_utils.D"], ["", "", "def", "forward", "(", "self", ",", "x1", ",", "x2", ")", ":", "\n", "        ", "zo", ",", "zt", "=", "self", ".", "Wo", "(", "x1", ")", ",", "self", ".", "Wo", "(", "x2", ")", "\n", "if", "self", ".", "use_bn", ":", "\n", "            ", "zo", "=", "self", ".", "norm1", "(", "zo", ")", "\n", "zt", "=", "self", ".", "norm1", "(", "zt", ")", "\n", "\n", "", "zo", "=", "self", ".", "srelu", "(", "zo", ",", "self", ".", "Wo", ".", "bias", ")", "\n", "zt", "=", "self", ".", "srelu", "(", "zt", ",", "self", ".", "Wo", ".", "bias", ")", "\n", "\n", "zo", ",", "zt", "=", "self", ".", "Wo_1", "(", "zo", ")", ",", "self", ".", "Wo_1", "(", "zt", ")", "\n", "if", "self", ".", "use_bn", ":", "\n", "            ", "zo", "=", "self", ".", "norm2", "(", "zo", ")", "\n", "zt", "=", "self", ".", "norm2", "(", "zt", ")", "\n", "\n", "", "zo", "=", "self", ".", "srelu", "(", "zo", ",", "self", ".", "Wo_1", ".", "bias", ")", "\n", "zt", "=", "self", ".", "srelu", "(", "zt", ",", "self", ".", "Wo_1", ".", "bias", ")", "\n", "\n", "self", ".", "predicted_rep", "=", "zo", "# Used for checking support in pytorch_utils.py", "\n", "self", ".", "target_rep", "=", "zt", "\n", "\n", "p1", ",", "p2", "=", "self", ".", "Wp", "(", "zo", ")", ",", "self", ".", "Wp", "(", "zt", ")", "\n", "\n", "loss", "=", "0.5", "*", "(", "D", "(", "p1", ",", "zt", ",", "\"simplified\"", ")", "+", "D", "(", "p2", ",", "zo", ",", "\"simplified\"", ")", ")", "\n", "return", "loss", "", "", "", ""]], "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.models.sparse_contrastive_model_reduced.SparseContrastiveModelReduced.__init__": [[8, 44], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "models.model_utils.SymReLU", "sparse_contrastive_model_reduced.SparseContrastiveModelReduced.init_weights", "print", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.models.sparse_contrastive_no_alt.SparseContrastiveModelNoAlter.__init__", "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.models.sparse_contrastive_no_alt.SparseContrastiveModelNoAlter.init_weights"], ["    ", "def", "__init__", "(", "self", ",", "Wo_init", ",", "Wt_init", ",", "m", ",", "p", ",", "d", ",", "\n", "has_online_ReLU", "=", "True", ",", "\n", "has_target_ReLU", "=", "True", ",", "\n", "device", "=", "None", ",", "\n", "normalize_rep", "=", "True", ",", "\n", "use_bn", "=", "False", ",", "\n", "use_pred", "=", "False", ",", "\n", "linear_pred", "=", "False", ",", "\n", "use_bias", "=", "True", ",", "\n", "const_bias", "=", "False", ",", "\n", "const_bias_val", "=", "1", ",", "\n", ")", "->", "None", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "p", "=", "p", "\n", "self", ".", "m", "=", "m", "\n", "self", ".", "d", "=", "d", "\n", "\n", "self", ".", "Wo", "=", "nn", ".", "Linear", "(", "p", ",", "m", ",", "bias", "=", "use_bias", ")", "\n", "self", ".", "Wt", "=", "nn", ".", "Linear", "(", "p", ",", "m", ",", "bias", "=", "use_bias", ")", "\n", "\n", "if", "not", "use_bias", "and", "const_bias", ":", "\n", "            ", "print", "(", "\"Bias will be a constant!!!\"", ")", "\n", "self", ".", "bo", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "m", ")", "*", "const_bias_val", ",", "requires_grad", "=", "False", ")", "\n", "self", ".", "bt", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "m", ")", "*", "const_bias_val", ",", "requires_grad", "=", "False", ")", "\n", "\n", "", "self", ".", "const_bias", "=", "const_bias", "\n", "\n", "self", ".", "srelu", "=", "SymReLU", "(", ")", "\n", "\n", "self", ".", "init_weights", "(", "Wo_init", ",", "Wt_init", ")", "\n", "\n", "self", ".", "device", "=", "device", "\n", "\n", "self", ".", "normalize_rep", "=", "normalize_rep", "\n", "self", ".", "name", "=", "\"simplified\"", "\n", "\n"]], "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.models.sparse_contrastive_model_reduced.SparseContrastiveModelReduced.init_weights": [[45, 56], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ",", "Wo_init", ",", "Wt_init", ")", ":", "\n", "        ", "if", "self", ".", "Wo", ".", "weight", ".", "shape", "==", "Wo_init", ".", "T", ".", "shape", ":", "\n", "            ", "Wo_init", "=", "Wo_init", ".", "T", "\n", "Wt_init", "=", "Wt_init", ".", "T", "\n", "\n", "", "assert", "Wo_init", ".", "shape", "==", "self", ".", "Wo", ".", "weight", ".", "shape", "\n", "assert", "Wt_init", ".", "shape", "==", "self", ".", "Wt", ".", "weight", ".", "shape", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "self", ".", "Wo", ".", "weight", ".", "data", "=", "torch", ".", "from_numpy", "(", "Wo_init", ")", ".", "type", "(", "torch", ".", "float", ")", "\n", "self", ".", "Wt", ".", "weight", ".", "data", "=", "torch", ".", "from_numpy", "(", "Wt_init", ")", ".", "type", "(", "torch", ".", "float", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.models.sparse_contrastive_model_reduced.SparseContrastiveModelReduced.forward": [[57, 96], ["sparse_contrastive_model_reduced.SparseContrastiveModelReduced.Wo", "sparse_contrastive_model_reduced.SparseContrastiveModelReduced.Wt", "sparse_contrastive_model_reduced.SparseContrastiveModelReduced.srelu", "sparse_contrastive_model_reduced.SparseContrastiveModelReduced.srelu", "sparse_contrastive_model_reduced.SparseContrastiveModelReduced.srelu", "sparse_contrastive_model_reduced.SparseContrastiveModelReduced.srelu", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize.detach", "torch.normalize.detach"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x1", ",", "x2", ",", "optimize_online", "=", "True", ")", ":", "\n", "        ", "zo", "=", "self", ".", "Wo", "(", "x1", ")", "\n", "zt", "=", "self", ".", "Wt", "(", "x2", ")", "\n", "\n", "if", "self", ".", "const_bias", ":", "\n", "            ", "zo", "+=", "self", ".", "bo", "\n", "zt", "+=", "self", ".", "bt", "\n", "\n", "", "self", ".", "zo", "=", "zo", "\n", "self", ".", "zt", "=", "zt", "\n", "\n", "if", "self", ".", "const_bias", ":", "\n", "            ", "zo", "=", "self", ".", "srelu", "(", "zo", ",", "self", ".", "bo", ")", "\n", "zt", "=", "self", ".", "srelu", "(", "zt", ",", "self", ".", "bt", ")", "\n", "", "else", ":", "\n", "            ", "zo", "=", "self", ".", "srelu", "(", "zo", ",", "self", ".", "Wo", ".", "bias", ")", "\n", "zt", "=", "self", ".", "srelu", "(", "zt", ",", "self", ".", "Wt", ".", "bias", ")", "\n", "\n", "", "self", ".", "error", "=", "zo", "-", "zt", "\n", "\n", "self", ".", "predicted_rep", "=", "zo", "\n", "self", ".", "target_rep", "=", "zt", "\n", "\n", "if", "self", ".", "normalize_rep", ":", "\n", "            ", "zt", "=", "F", ".", "normalize", "(", "zt", ",", "dim", "=", "1", ")", "\n", "zo", "=", "F", ".", "normalize", "(", "zo", ",", "dim", "=", "1", ")", "\n", "\n", "", "if", "optimize_online", ":", "\n", "#loss = torch.sum((zo - zt.detach())**2, dim=-1).mean()", "\n", "            ", "loss", "=", "2", "-", "2", "*", "(", "zo", "*", "zt", ".", "detach", "(", ")", ")", ".", "sum", "(", "dim", "=", "1", ")", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "#loss = torch.sum((zo.detach() - zt)**2, dim=-1).mean()", "\n", "            ", "loss", "=", "2", "-", "2", "*", "(", "zo", ".", "detach", "(", ")", "*", "zt", ")", ".", "sum", "(", "dim", "=", "1", ")", ".", "mean", "(", ")", "\n", "\n", "", "if", "not", "self", ".", "const_bias", ":", "\n", "            ", "self", ".", "bo", "=", "self", ".", "Wo", ".", "bias", "\n", "self", ".", "bt", "=", "self", ".", "Wt", ".", "bias", "\n", "\n", "", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.models.nt_xent.NT_Xent.__init__": [[8, 16], ["torch.Module.__init__", "nt_xent.NT_Xent.mask_correlated_samples", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CosineSimilarity", "torch.CosineSimilarity", "torch.CosineSimilarity"], "methods", ["home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.models.sparse_contrastive_no_alt.SparseContrastiveModelNoAlter.__init__", "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.models.nt_xent.Asymmetric_NT_Xent.mask_correlated_samples"], ["    ", "def", "__init__", "(", "self", ",", "batch_size", ",", "temperature", ")", "->", "None", ":", "\n", "        ", "super", "(", "NT_Xent", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "temperature", "=", "temperature", "\n", "\n", "self", ".", "mask", "=", "self", ".", "mask_correlated_samples", "(", "batch_size", ")", "\n", "self", ".", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", "reduction", "=", "\"sum\"", ")", "\n", "self", ".", "similarity_f", "=", "nn", ".", "CosineSimilarity", "(", "dim", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.models.nt_xent.NT_Xent.mask_correlated_samples": [[17, 25], ["torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "mask.fill_diagonal_.fill_diagonal_.fill_diagonal_", "range"], "methods", ["None"], ["", "def", "mask_correlated_samples", "(", "self", ",", "batch_size", ")", ":", "\n", "        ", "N", "=", "2", "*", "batch_size", "\n", "mask", "=", "torch", ".", "ones", "(", "(", "N", ",", "N", ")", ",", "dtype", "=", "bool", ")", "\n", "mask", "=", "mask", ".", "fill_diagonal_", "(", "0", ")", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "mask", "[", "i", ",", "batch_size", "+", "i", "]", "=", "0", "\n", "mask", "[", "batch_size", "+", "i", ",", "i", "]", "=", "0", "\n", "", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.models.nt_xent.NT_Xent.forward": [[26, 49], ["torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.cat().reshape", "torch.cat().reshape", "torch.cat().reshape", "torch.cat().reshape", "torch.cat().reshape", "torch.cat().reshape", "torch.cat().reshape", "torch.cat().reshape", "torch.cat().reshape", "sim[].reshape", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "nt_xent.NT_Xent.criterion", "nt_xent.NT_Xent.similarity_f", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "z_i", ",", "z_j", ")", ":", "\n", "        ", "N", "=", "2", "*", "self", ".", "batch_size", "\n", "\n", "z_i", "=", "F", ".", "normalize", "(", "z_i", ",", "dim", "=", "-", "1", ")", "\n", "z_j", "=", "F", ".", "normalize", "(", "z_j", ",", "dim", "=", "-", "1", ")", "\n", "\n", "z", "=", "torch", ".", "cat", "(", "(", "z_i", ",", "z_j", ")", ",", "dim", "=", "0", ")", "\n", "\n", "sim", "=", "self", ".", "similarity_f", "(", "z", ".", "unsqueeze", "(", "1", ")", ",", "z", ".", "unsqueeze", "(", "0", ")", ")", "/", "self", ".", "temperature", "\n", "\n", "sim_i_j", "=", "torch", ".", "diag", "(", "sim", ",", "self", ".", "batch_size", ")", "\n", "sim_j_i", "=", "torch", ".", "diag", "(", "sim", ",", "-", "self", ".", "batch_size", ")", "\n", "\n", "# We have 2N samples", "\n", "positive_samples", "=", "torch", ".", "cat", "(", "(", "sim_i_j", ",", "sim_j_i", ")", ",", "dim", "=", "0", ")", ".", "reshape", "(", "N", ",", "1", ")", "\n", "negative_samples", "=", "sim", "[", "self", ".", "mask", "]", ".", "reshape", "(", "N", ",", "-", "1", ")", "\n", "\n", "labels", "=", "torch", ".", "zeros", "(", "N", ")", ".", "to", "(", "positive_samples", ".", "device", ")", ".", "long", "(", ")", "\n", "logits", "=", "torch", ".", "cat", "(", "(", "positive_samples", ",", "negative_samples", ")", ",", "dim", "=", "1", ")", "\n", "\n", "loss", "=", "self", ".", "criterion", "(", "logits", ",", "labels", ")", "\n", "loss", "/=", "N", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.models.nt_xent.Asymmetric_NT_Xent.__init__": [[52, 60], ["torch.Module.__init__", "nt_xent.Asymmetric_NT_Xent.mask_correlated_samples", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CosineSimilarity", "torch.CosineSimilarity", "torch.CosineSimilarity"], "methods", ["home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.models.sparse_contrastive_no_alt.SparseContrastiveModelNoAlter.__init__", "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.models.nt_xent.Asymmetric_NT_Xent.mask_correlated_samples"], ["    ", "def", "__init__", "(", "self", ",", "batch_size", ",", "temperature", ")", "->", "None", ":", "\n", "        ", "super", "(", "Asymmetric_NT_Xent", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "temperature", "=", "temperature", "\n", "\n", "self", ".", "mask", "=", "self", ".", "mask_correlated_samples", "(", "batch_size", ")", "\n", "self", ".", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", "reduction", "=", "\"sum\"", ")", "\n", "self", ".", "similarity_f", "=", "nn", ".", "CosineSimilarity", "(", "dim", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.models.nt_xent.Asymmetric_NT_Xent.mask_correlated_samples": [[61, 66], ["torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "mask.fill_diagonal_.fill_diagonal_.fill_diagonal_"], "methods", ["None"], ["", "def", "mask_correlated_samples", "(", "self", ",", "batch_size", ")", ":", "\n", "        ", "N", "=", "batch_size", "\n", "mask", "=", "torch", ".", "ones", "(", "(", "N", ",", "N", ")", ",", "dtype", "=", "bool", ")", "\n", "mask", "=", "mask", ".", "fill_diagonal_", "(", "0", ")", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.models.nt_xent.Asymmetric_NT_Xent.forward": [[67, 87], ["torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag.reshape", "torch.diag.reshape", "torch.diag.reshape", "sim[].reshape", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "nt_xent.Asymmetric_NT_Xent.criterion", "nt_xent.Asymmetric_NT_Xent.similarity_f", "torch.normalize.unsqueeze", "torch.normalize.unsqueeze", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "z_i", ",", "z_j", ")", ":", "\n", "        ", "N", "=", "self", ".", "batch_size", "\n", "\n", "z_i", "=", "F", ".", "normalize", "(", "z_i", ",", "dim", "=", "-", "1", ")", "\n", "z_j", "=", "F", ".", "normalize", "(", "z_j", ",", "dim", "=", "-", "1", ")", "\n", "\n", "sim", "=", "self", ".", "similarity_f", "(", "z_i", ".", "unsqueeze", "(", "1", ")", ",", "z_j", ".", "unsqueeze", "(", "0", ")", ")", "/", "self", ".", "temperature", "\n", "\n", "sim_i_j", "=", "torch", ".", "diag", "(", "sim", ")", "\n", "\n", "# We have N samples", "\n", "positive_samples", "=", "sim_i_j", ".", "reshape", "(", "N", ",", "1", ")", "\n", "negative_samples", "=", "sim", "[", "self", ".", "mask", "]", ".", "reshape", "(", "N", ",", "-", "1", ")", "\n", "\n", "labels", "=", "torch", ".", "zeros", "(", "N", ")", ".", "to", "(", "positive_samples", ".", "device", ")", ".", "long", "(", ")", "\n", "logits", "=", "torch", ".", "cat", "(", "(", "positive_samples", ",", "negative_samples", ")", ",", "dim", "=", "1", ")", "\n", "\n", "loss", "=", "self", ".", "criterion", "(", "logits", ",", "labels", ")", "\n", "loss", "/=", "N", "\n", "return", "loss", "", "", "", ""]], "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.models.simsiam_abl.SimSiamAblationModel.__init__": [[8, 47], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "SymReLU", "simsiam_abl.SimSiamAblationModel.init_weights", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "print", "np.sqrt", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand"], "methods", ["home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.models.sparse_contrastive_no_alt.SparseContrastiveModelNoAlter.__init__", "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.models.sparse_contrastive_no_alt.SparseContrastiveModelNoAlter.init_weights"], ["    ", "def", "__init__", "(", "self", ",", "Wo_init", ",", "m", ",", "p", ",", "d", ",", "\n", "has_online_ReLU", "=", "True", ",", "\n", "has_target_ReLU", "=", "True", ",", "\n", "device", "=", "None", ",", "\n", "batch_norm", "=", "None", ",", "\n", "use_bn", "=", "True", ",", "\n", "use_diag_pred", "=", "False", "\n", ")", "->", "None", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "p", "=", "p", "\n", "self", ".", "m", "=", "m", "\n", "self", ".", "d", "=", "d", "\n", "\n", "self", ".", "Wo", "=", "nn", ".", "Linear", "(", "p", ",", "m", ",", "bias", "=", "True", ")", "\n", "if", "use_diag_pred", ":", "\n", "            ", "k", "=", "1", "/", "np", ".", "sqrt", "(", "m", ")", "\n", "self", ".", "Wp", "=", "nn", ".", "Parameter", "(", "(", "2", "*", "torch", ".", "rand", "(", "(", "m", ",", "1", ")", ",", "device", "=", "device", ")", "-", "1", ")", "*", "k", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "m", ",", "device", "=", "device", ")", ",", "requires_grad", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "Wp", "=", "nn", ".", "Linear", "(", "m", ",", "m", ",", "bias", "=", "True", ")", "\n", "\n", "", "self", ".", "use_diag_pred", "=", "use_diag_pred", "\n", "self", ".", "srelu", "=", "SymReLU", "(", ")", "\n", "\n", "self", ".", "has_online_ReLU", "=", "has_online_ReLU", "\n", "self", ".", "has_target_ReLU", "=", "has_target_ReLU", "\n", "\n", "self", ".", "init_weights", "(", "Wo_init", ")", "\n", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "use_bn", "=", "use_bn", "\n", "self", ".", "batch_norm", "=", "batch_norm", "\n", "\n", "if", "batch_norm", "is", "not", "None", "or", "self", ".", "use_bn", ":", "\n", "            ", "self", ".", "norm1", "=", "nn", ".", "BatchNorm1d", "(", "m", ")", "\n", "\n", "print", "(", "f\"Using batch norm {batch_norm}\"", ")", "\n", "", "self", ".", "name", "=", "\"simsiam-diag\"", "\n", "\n"]], "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.models.simsiam_abl.SimSiamAblationModel.init_weights": [[48, 56], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ",", "Wo_init", ")", ":", "\n", "        ", "if", "self", ".", "Wo", ".", "weight", ".", "shape", "==", "Wo_init", ".", "T", ".", "shape", ":", "\n", "            ", "Wo_init", "=", "Wo_init", ".", "T", "\n", "\n", "", "assert", "Wo_init", ".", "shape", "==", "self", ".", "Wo", ".", "weight", ".", "shape", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "self", ".", "Wo", ".", "weight", ".", "data", "=", "torch", ".", "from_numpy", "(", "Wo_init", ")", ".", "type", "(", "torch", ".", "float", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.models.simsiam_abl.SimSiamAblationModel.forward": [[57, 77], ["simsiam_abl.SimSiamAblationModel.srelu", "simsiam_abl.SimSiamAblationModel.srelu", "simsiam_abl.SimSiamAblationModel.Wo", "simsiam_abl.SimSiamAblationModel.Wo", "simsiam_abl.SimSiamAblationModel.norm1", "simsiam_abl.SimSiamAblationModel.norm1", "simsiam_abl.SimSiamAblationModel.Wp", "simsiam_abl.SimSiamAblationModel.Wp", "D", "D"], "methods", ["home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.models.model_utils.D", "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.models.model_utils.D"], ["", "", "def", "forward", "(", "self", ",", "x1", ",", "x2", ")", ":", "\n", "        ", "zo", ",", "zt", "=", "self", ".", "Wo", "(", "x1", ")", ",", "self", ".", "Wo", "(", "x2", ")", "\n", "if", "self", ".", "use_bn", ":", "\n", "            ", "zo", "=", "self", ".", "norm1", "(", "zo", ")", "\n", "zt", "=", "self", ".", "norm1", "(", "zt", ")", "\n", "\n", "", "zo", "=", "self", ".", "srelu", "(", "zo", ",", "self", ".", "Wo", ".", "bias", ")", "\n", "zt", "=", "self", ".", "srelu", "(", "zt", ",", "self", ".", "Wo", ".", "bias", ")", "\n", "\n", "self", ".", "predicted_rep", "=", "zo", "# Used for checking support in pytorch_utils.py", "\n", "self", ".", "target_rep", "=", "zt", "\n", "\n", "if", "self", ".", "use_diag_pred", ":", "\n", "            ", "p1", ",", "p2", "=", "zo", "@", "self", ".", "Wp", "+", "self", ".", "bias", ",", "zt", "@", "self", ".", "Wp", "+", "self", ".", "bias", "\n", "", "else", ":", "\n", "            ", "p1", ",", "p2", "=", "self", ".", "Wp", "(", "zo", ")", ",", "self", ".", "Wp", "(", "zt", ")", "\n", "\n", "#loss = 0.5 * (D(zo, zt, \"simplified\") + D(zt, zo, \"simplified\"))", "\n", "", "loss", "=", "0.5", "*", "(", "D", "(", "p1", ",", "zt", ",", "\"simplified\"", ")", "+", "D", "(", "p2", ",", "zo", ",", "\"simplified\"", ")", ")", "\n", "return", "loss", "", "", "", ""]], "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.models.sparse_contrastive_no_alt.SparseContrastiveModelNoAlter.__init__": [[8, 53], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "sparse_contrastive_no_alt.SparseContrastiveModelNoAlter.init_weights", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "models.model_utils.SymReLU", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand"], "methods", ["home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.models.sparse_contrastive_no_alt.SparseContrastiveModelNoAlter.__init__", "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.models.sparse_contrastive_no_alt.SparseContrastiveModelNoAlter.init_weights"], ["    ", "def", "__init__", "(", "self", ",", "Wo_init", ",", "Wt_init", ",", "m", ",", "p", ",", "d", ",", "\n", "has_online_ReLU", "=", "True", ",", "\n", "has_target_ReLU", "=", "True", ",", "\n", "device", "=", "None", ",", "\n", "normalize_rep", "=", "True", ",", "\n", "use_bn", "=", "False", ",", "\n", "use_pred", "=", "True", ",", "\n", "linear_pred", "=", "False", ",", "\n", "use_pred_bias", "=", "True", "\n", ")", "->", "None", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "p", "=", "p", "\n", "self", ".", "m", "=", "m", "\n", "self", ".", "d", "=", "d", "\n", "\n", "self", ".", "use_bn", "=", "use_bn", "\n", "self", ".", "use_pred", "=", "use_pred", "\n", "self", ".", "linear_pred", "=", "linear_pred", "\n", "self", ".", "Wo", "=", "nn", ".", "Linear", "(", "p", ",", "m", ",", "bias", "=", "True", ")", "\n", "self", ".", "Wt", "=", "nn", ".", "Linear", "(", "p", ",", "m", ",", "bias", "=", "True", ")", "\n", "\n", "if", "linear_pred", ":", "\n", "            ", "k", "=", "1", "/", "(", "p", "*", "d", ")", "\n", "self", ".", "Wp", "=", "nn", ".", "Parameter", "(", "(", "torch", ".", "rand", "(", "0", ",", "k", ",", "(", "m", ",", "1", ")", ",", "device", "=", "device", ")", ")", "*", "k", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "m", ",", "device", "=", "device", ")", ",", "requires_grad", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "Wp", "=", "nn", ".", "Linear", "(", "m", ",", "m", ",", "bias", "=", "use_pred_bias", ")", "\n", "\n", "", "if", "use_bn", ":", "\n", "            ", "self", ".", "bno", "=", "nn", ".", "BatchNorm1d", "(", "m", ")", "\n", "self", ".", "bnt", "=", "nn", ".", "BatchNorm1d", "(", "m", ")", "\n", "\n", "", "if", "has_online_ReLU", "and", "has_target_ReLU", ":", "\n", "            ", "self", ".", "srelu", "=", "SymReLU", "(", ")", "\n", "\n", "", "self", ".", "has_online_ReLU", "=", "has_online_ReLU", "\n", "self", ".", "has_target_ReLU", "=", "has_target_ReLU", "\n", "\n", "self", ".", "init_weights", "(", "Wo_init", ",", "Wt_init", ")", "\n", "\n", "self", ".", "device", "=", "device", "\n", "\n", "self", ".", "normalize_rep", "=", "normalize_rep", "\n", "self", ".", "name", "=", "\"simplified-no-alter-pred\"", "\n", "\n"]], "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.models.sparse_contrastive_no_alt.SparseContrastiveModelNoAlter.init_weights": [[54, 65], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ",", "Wo_init", ",", "Wt_init", ")", ":", "\n", "        ", "if", "self", ".", "Wo", ".", "weight", ".", "shape", "==", "Wo_init", ".", "T", ".", "shape", ":", "\n", "            ", "Wo_init", "=", "Wo_init", ".", "T", "\n", "Wt_init", "=", "Wt_init", ".", "T", "\n", "\n", "", "assert", "Wo_init", ".", "shape", "==", "self", ".", "Wo", ".", "weight", ".", "shape", "\n", "assert", "Wt_init", ".", "shape", "==", "self", ".", "Wt", ".", "weight", ".", "shape", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "self", ".", "Wo", ".", "weight", ".", "data", "=", "torch", ".", "from_numpy", "(", "Wo_init", ")", ".", "type", "(", "torch", ".", "float", ")", "\n", "self", ".", "Wt", ".", "weight", ".", "data", "=", "torch", ".", "from_numpy", "(", "Wt_init", ")", ".", "type", "(", "torch", ".", "float", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.models.sparse_contrastive_no_alt.SparseContrastiveModelNoAlter.forward": [[66, 114], ["sparse_contrastive_no_alt.SparseContrastiveModelNoAlter.Wo", "sparse_contrastive_no_alt.SparseContrastiveModelNoAlter.Wt", "sparse_contrastive_no_alt.SparseContrastiveModelNoAlter.bno", "sparse_contrastive_no_alt.SparseContrastiveModelNoAlter.bnt", "sparse_contrastive_no_alt.SparseContrastiveModelNoAlter.srelu", "sparse_contrastive_no_alt.SparseContrastiveModelNoAlter.srelu", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "sparse_contrastive_no_alt.SparseContrastiveModelNoAlter.Wp", "sparse_contrastive_no_alt.SparseContrastiveModelNoAlter.Wp", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.sum().mean", "torch.sum().mean", "torch.sum().mean", "torch.sum().mean", "torch.sum().mean", "torch.sum().mean", "torch.sum().mean", "torch.sum().mean", "torch.sum().mean", "torch.sum().mean", "torch.sum().mean", "torch.sum().mean", "torch.sum().mean", "torch.sum().mean", "torch.sum().mean", "torch.sum().mean", "torch.sum().mean", "torch.sum().mean", "torch.sum().mean", "torch.sum().mean", "torch.sum().mean", "torch.sum().mean", "torch.sum().mean", "torch.sum().mean", "torch.sum().mean", "torch.sum().mean", "torch.sum().mean", "torch.sum().mean", "torch.sum().mean", "torch.sum().mean", "torch.sum().mean", "torch.sum().mean", "torch.sum().mean", "torch.sum().mean", "torch.sum().mean", "torch.sum().mean", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.normalize.detach", "torch.normalize.detach", "torch.normalize.detach", "torch.normalize.detach"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x1", ",", "x2", ")", ":", "\n", "        ", "zo", "=", "self", ".", "Wo", "(", "x1", ")", "\n", "zt", "=", "self", ".", "Wt", "(", "x2", ")", "\n", "\n", "self", ".", "zo", "=", "zo", "\n", "self", ".", "zt", "=", "zt", "\n", "\n", "if", "self", ".", "use_bn", ":", "\n", "            ", "zo", "=", "self", ".", "bno", "(", "zo", ")", "\n", "zt", "=", "self", ".", "bnt", "(", "zt", ")", "\n", "\n", "", "if", "self", ".", "has_online_ReLU", "and", "self", ".", "has_target_ReLU", ":", "\n", "            ", "zo", "=", "self", ".", "srelu", "(", "zo", ",", "self", ".", "Wo", ".", "bias", ")", "\n", "zt", "=", "self", ".", "srelu", "(", "zt", ",", "self", ".", "Wt", ".", "bias", ")", "\n", "\n", "", "self", ".", "error", "=", "zo", "-", "zt", "\n", "\n", "self", ".", "predicted_rep", "=", "zo", "\n", "self", ".", "target_rep", "=", "zt", "\n", "\n", "if", "self", ".", "linear_pred", ":", "\n", "            ", "po", ",", "pt", "=", "zo", "@", "self", ".", "Wp", "+", "self", ".", "bias", ",", "zt", "@", "self", ".", "Wp", "+", "self", ".", "bias", "\n", "\n", "", "elif", "self", ".", "use_pred", ":", "\n", "            ", "po", "=", "self", ".", "Wp", "(", "zo", ")", "\n", "pt", "=", "self", ".", "Wp", "(", "zt", ")", "\n", "\n", "", "if", "self", ".", "normalize_rep", ":", "\n", "            ", "zo", "=", "F", ".", "normalize", "(", "zo", ",", "dim", "=", "1", ")", "\n", "zt", "=", "F", ".", "normalize", "(", "zt", ",", "dim", "=", "1", ")", "\n", "\n", "if", "self", ".", "use_pred", ":", "\n", "                ", "po", "=", "F", ".", "normalize", "(", "po", ")", "\n", "pt", "=", "F", ".", "normalize", "(", "pt", ")", "\n", "\n", "", "", "if", "self", ".", "use_pred", "or", "self", ".", "linear_pred", ":", "\n", "# loss =  0.5 * (2 - 2 * (po * zt.detach()).sum(dim=1).mean() + \\", "\n", "#                2 - 2 * (pt * zo.detach()).sum(dim=1).mean())", "\n", "# loss =  2 - 2 * (po * zt).sum(dim=1).mean()", "\n", "            ", "loss", "=", "0.5", "*", "(", "torch", ".", "sum", "(", "(", "po", "-", "zt", ".", "detach", "(", ")", ")", "**", "2", ",", "dim", "=", "-", "1", ")", ".", "mean", "(", ")", "+", "torch", ".", "sum", "(", "(", "zo", ".", "detach", "(", ")", "-", "pt", ")", "**", "2", ",", "dim", "=", "-", "1", ")", ".", "mean", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "loss", "=", "0.5", "*", "(", "torch", ".", "sum", "(", "(", "zo", "-", "zt", ".", "detach", "(", ")", ")", "**", "2", ",", "dim", "=", "-", "1", ")", ".", "mean", "(", ")", "+", "torch", ".", "sum", "(", "(", "zo", ".", "detach", "(", ")", "-", "zt", ")", "**", "2", ",", "dim", "=", "-", "1", ")", ".", "mean", "(", ")", ")", "\n", "\n", "", "self", ".", "bo", "=", "self", ".", "Wo", ".", "bias", "\n", "self", ".", "bt", "=", "self", ".", "Wt", ".", "bias", "\n", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.data_model.gen_sparse_coding_data.gen_z_random": [[4, 10], ["numpy.random.choice", "numpy.log", "numpy.log", "numpy.log", "numpy.log"], "function", ["None"], ["def", "gen_z_random", "(", "n", ",", "d", ",", "prob", "=", "None", ")", ":", "\n", "    ", "if", "prob", "is", "None", ":", "\n", "        ", "prob", "=", "np", ".", "log", "(", "np", ".", "log", "(", "d", ")", ")", "/", "d", "\n", "", "else", ":", "\n", "        ", "prob", "=", "(", "np", ".", "log", "(", "np", ".", "log", "(", "d", ")", ")", "/", "d", ")", "**", "prob", "\n", "", "return", "np", ".", "random", ".", "choice", "(", "[", "0", ",", "-", "1", ",", "1", "]", ",", "(", "d", ",", "n", ")", ",", "p", "=", "[", "1", "-", "prob", ",", "prob", "/", "2", ",", "prob", "/", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.data_model.gen_sparse_coding_data.gen_z": [[11, 28], ["numpy.zeros", "print", "numpy.random.permutation", "numpy.ceil", "max", "numpy.array", "numpy.ceil", "int", "int", "int", "numpy.log", "numpy.ceil", "len", "numpy.random.permutation", "numpy.log", "range", "numpy.where"], "function", ["None"], ["", "def", "gen_z", "(", "n", ",", "d", ",", "prob", "=", "None", ",", "one_hot_latent", "=", "False", ")", ":", "\n", "    ", "z", "=", "np", ".", "zeros", "(", "d", ")", "\n", "if", "one_hot_latent", ":", "\n", "        ", "(", "num_neg_ones", ",", "num_ones", ")", "=", "np", ".", "random", ".", "permutation", "(", "[", "0", ",", "1", "]", ")", "\n", "s1", "=", "num_neg_ones", "\n", "s2", "=", "s1", "+", "num_ones", "\n", "", "else", ":", "\n", "        ", "if", "prob", "is", "None", ":", "\n", "            ", "prob", "=", "np", ".", "log", "(", "np", ".", "log", "(", "d", ")", ")", "/", "d", "\n", "", "else", ":", "\n", "            ", "prob", "=", "prob", "\n", "", "s1", "=", "np", ".", "ceil", "(", "d", "*", "prob", "/", "2", ")", "\n", "s2", "=", "max", "(", "np", ".", "ceil", "(", "d", "*", "prob", ")", ",", "np", ".", "ceil", "(", "d", "*", "prob", "/", "2", ")", "+", "1", ")", "\n", "", "z", "[", ":", "int", "(", "s1", ")", "]", "=", "-", "1", "\n", "z", "[", "int", "(", "s1", ")", ":", "int", "(", "s2", ")", "]", "=", "1", "\n", "print", "(", "f\"Sparsity {len(np.where(z == 0)[0])} Total entries {z.shape[0]}\"", ")", "\n", "return", "np", ".", "array", "(", "[", "np", ".", "random", ".", "permutation", "(", "z", ")", "for", "i", "in", "range", "(", "n", ")", "]", ")", ".", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.data_model.gen_sparse_coding_data.gen_z_one_hot": [[29, 36], ["numpy.zeros", "numpy.arange", "numpy.random.choice", "print", "numpy.arange", "len", "numpy.where"], "function", ["None"], ["", "def", "gen_z_one_hot", "(", "n", ",", "d", ",", "prob", "=", "None", ")", ":", "\n", "    ", "z", "=", "np", ".", "zeros", "(", "(", "n", ",", "d", ")", ")", "\n", "ridx", "=", "np", ".", "arange", "(", "n", ")", "\n", "cidx", "=", "np", ".", "random", ".", "choice", "(", "np", ".", "arange", "(", "d", ")", ",", "n", ")", "\n", "z", "[", "ridx", ",", "cidx", "]", "=", "1", "\n", "print", "(", "f\"Sparsity {len(np.where(z == 0)[0])} Total entries {z.shape[0]}\"", ")", "\n", "return", "z", ".", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.data_model.gen_sparse_coding_data.gen_z_k_sparse": [[38, 46], ["numpy.random.choice", "range", "print", "sum", "numpy.arange", "len", "numpy.where"], "function", ["None"], ["", "def", "gen_z_k_sparse", "(", "n", ",", "d", ",", "prob", "=", "None", ")", ":", "\n", "    ", "z", "=", "np", ".", "random", ".", "choice", "(", "[", "0", ",", "1", "]", ",", "(", "d", ",", "n", ")", ",", "p", "=", "[", "1", "-", "prob", ",", "prob", "]", ")", "\n", "for", "c", "in", "range", "(", "d", ")", ":", "\n", "        ", "if", "sum", "(", "z", "[", "c", "]", ")", "==", "0", ":", "\n", "            ", "ridx", "=", "np", ".", "arange", "(", "n", ")", "\n", "z", "[", "c", ",", "ridx", "]", "=", "1", "\n", "", "", "print", "(", "f\"Sparsity {len(np.where(z == 0)[0])} Total entries {z.shape[0]}\"", ")", "\n", "return", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.data_model.gen_sparse_coding_data.gen_M": [[47, 55], ["numpy.random.normal", "numpy.linalg.qr"], "function", ["None"], ["", "def", "gen_M", "(", "p", ",", "d", ")", ":", "\n", "    ", "\"\"\"\n    Generate a column orthonormal matrix of shape (p, d)\n    \"\"\"", "\n", "X", "=", "np", ".", "random", ".", "normal", "(", "0", ",", "1", ",", "(", "p", ",", "d", ")", ")", "\n", "assert", "p", ">=", "d", "\n", "Q", ",", "_", "=", "np", ".", "linalg", ".", "qr", "(", "X", ")", "\n", "return", "Q", "\n", "\n"]], "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.data_model.gen_sparse_coding_data.random_normal_weight_init": [[57, 60], ["numpy.random.normal", "numpy.sqrt", "numpy.sqrt"], "function", ["None"], ["", "def", "random_normal_weight_init", "(", "input", ",", "output", ")", ":", "\n", "    ", "std", "=", "np", ".", "sqrt", "(", "2", ")", "/", "np", ".", "sqrt", "(", "input", "+", "output", ")", "\n", "return", "np", ".", "random", ".", "normal", "(", "0", ",", "std", ",", "(", "input", ",", "output", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.data_model.gen_sparse_coding_data.random_weight_init": [[62, 65], ["numpy.random.uniform", "numpy.sqrt", "numpy.sqrt"], "function", ["None"], ["", "def", "random_weight_init", "(", "input", ",", "output", ")", ":", "\n", "    ", "b", "=", "np", ".", "sqrt", "(", "6", ")", "/", "np", ".", "sqrt", "(", "input", "+", "output", ")", "\n", "return", "np", ".", "random", ".", "uniform", "(", "-", "b", ",", "b", ",", "(", "input", ",", "output", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.data_model.gen_sparse_coding_data.kaiming_weight_init": [[66, 72], ["numpy.random.uniform", "numpy.sqrt", "numpy.sqrt"], "function", ["None"], ["", "def", "kaiming_weight_init", "(", "input", ",", "output", ",", "fanmode", "=", "'fan_in'", ")", ":", "\n", "    ", "dim", "=", "output", "\n", "if", "fanmode", "==", "'fan_in'", ":", "\n", "        ", "dim", "=", "input", "\n", "", "b", "=", "np", ".", "sqrt", "(", "3", ")", "/", "np", ".", "sqrt", "(", "dim", ")", "\n", "return", "np", ".", "random", ".", "uniform", "(", "-", "b", ",", "b", ",", "(", "input", ",", "output", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.data_model.gen_sparse_coding_data.gen_Winit": [[73, 87], ["numpy.random.normal", "numpy.sqrt", "numpy.random.normal", "numpy.random.choice"], "function", ["None"], ["", "def", "gen_Winit", "(", "M", ",", "p", ",", "m", ",", "d", ",", "c", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Generate initialization of W0 based on M\n    \"\"\"", "\n", "if", "m", ">", "d", ":", "\n", "        ", "MS", "=", "M", "[", ":", ",", "np", ".", "random", ".", "choice", "(", "d", ",", "m", ")", "]", "\n", "", "else", ":", "\n", "        ", "MS", "=", "M", "\n", "", "if", "c", "is", "None", ":", "# random", "\n", "        ", "return", "np", ".", "random", ".", "normal", "(", "0", ",", "np", ".", "sqrt", "(", "1", "/", "(", "p", "*", "d", ")", ")", ",", "(", "p", ",", "m", ")", ")", "\n", "", "elif", "c", ">", "0", ":", "# close to M", "\n", "        ", "return", "MS", "+", "np", ".", "random", ".", "normal", "(", "0", ",", "1.0", "/", "p", "**", "(", "c", "/", "2", ")", ",", "(", "p", ",", "m", ")", ")", "#np.random.normal(0, c, (p, m)) #", "\n", "", "else", ":", "# equals M", "\n", "        ", "return", "MS", "\n", "\n"]], "home.repos.pwc.inspect_result.ashwinipokle_contrastive_landscape.data_model.gen_sparse_coding_data.gen_epsilon": [[88, 97], ["numpy.random.normal", "numpy.sqrt", "numpy.zeros", "numpy.random.normal", "numpy.log", "numpy.sqrt", "numpy.log"], "function", ["None"], ["", "", "def", "gen_epsilon", "(", "n", ",", "p", ",", "d", ",", "sigma0", "=", "None", ")", ":", "\n", "    ", "if", "sigma0", "is", "None", ":", "\n", "        ", "sigma0", "=", "np", ".", "sqrt", "(", "np", ".", "log", "(", "d", ")", ")", "/", "d", "# default, following yuanzhi", "\n", "return", "np", ".", "random", ".", "normal", "(", "0", ",", "sigma0", ",", "(", "p", ",", "n", ")", ")", "\n", "", "elif", "sigma0", "==", "0", ":", "\n", "        ", "return", "np", ".", "zeros", "(", "(", "p", ",", "n", ")", ")", "\n", "", "else", ":", "\n", "        ", "sigma0", "=", "(", "np", ".", "sqrt", "(", "np", ".", "log", "(", "d", ")", ")", "/", "d", ")", "**", "sigma0", "# smaller", "\n", "return", "np", ".", "random", ".", "normal", "(", "0", ",", "sigma0", ",", "(", "p", ",", "n", ")", ")", "\n", "\n"]]}