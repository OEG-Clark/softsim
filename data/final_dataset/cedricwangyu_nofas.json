{"home.repos.pwc.inspect_result.cedricwangyu_nofas.None.maf.MaskedLinear.__init__": [[50, 62], ["torch.Linear.__init__", "maf.MaskedLinear.register_buffer", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.cedricwangyu_nofas.None.highdimModels.Highdim.__init__"], ["def", "__init__", "(", "self", ",", "input_size", ",", "n_outputs", ",", "mask", ",", "cond_label_size", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "input_size", ",", "n_outputs", ")", "\n", "# self.weight.data.fill_(1.00)", "\n", "# self.bias.data.fill_(0.00)", "\n", "# nn.init.kaiming_uniform_(self.weight, mode='fan_out', nonlinearity='relu')", "\n", "# nn.init.kaiming_normal_(self.weight, mode='fan_out', nonlinearity='relu')", "\n", "\n", "self", ".", "register_buffer", "(", "'mask'", ",", "mask", ")", "\n", "\n", "self", ".", "cond_label_size", "=", "cond_label_size", "\n", "if", "cond_label_size", "is", "not", "None", ":", "\n", "            ", "self", ".", "cond_weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "rand", "(", "n_outputs", ",", "cond_label_size", ")", "/", "math", ".", "sqrt", "(", "cond_label_size", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cedricwangyu_nofas.None.maf.MaskedLinear.forward": [[63, 68], ["torch.linear", "torch.linear", "torch.linear", "torch.linear", "torch.linear", "torch.linear", "torch.linear", "torch.linear"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "y", "=", "None", ")", ":", "\n", "        ", "out", "=", "F", ".", "linear", "(", "x", ",", "self", ".", "weight", "*", "self", ".", "mask", ",", "self", ".", "bias", ")", "\n", "if", "y", "is", "not", "None", ":", "\n", "            ", "out", "=", "out", "+", "F", ".", "linear", "(", "y", ",", "self", ".", "cond_weight", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.cedricwangyu_nofas.None.maf.MaskedLinear.extra_repr": [[69, 73], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "return", "'in_features={}, out_features={}, bias={}'", ".", "format", "(", "\n", "self", ".", "in_features", ",", "self", ".", "out_features", ",", "self", ".", "bias", "is", "not", "None", "\n", ")", "+", "(", "self", ".", "cond_label_size", "!=", "None", ")", "*", "', cond_features={}'", ".", "format", "(", "self", ".", "cond_label_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cedricwangyu_nofas.None.maf.LinearMaskedCoupling.__init__": [[78, 96], ["torch.Module.__init__", "maf.LinearMaskedCoupling.register_buffer", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "copy.deepcopy", "range", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "len", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "isinstance", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.cedricwangyu_nofas.None.highdimModels.Highdim.__init__"], ["def", "__init__", "(", "self", ",", "input_size", ",", "hidden_size", ",", "n_hidden", ",", "mask", ",", "cond_label_size", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "register_buffer", "(", "'mask'", ",", "mask", ")", "\n", "\n", "# scale function", "\n", "s_net", "=", "[", "nn", ".", "Linear", "(", "input_size", "+", "(", "cond_label_size", "if", "cond_label_size", "is", "not", "None", "else", "0", ")", ",", "hidden_size", ")", "]", "\n", "for", "_", "in", "range", "(", "n_hidden", ")", ":", "\n", "            ", "s_net", "+=", "[", "nn", ".", "Tanh", "(", ")", ",", "nn", ".", "Linear", "(", "hidden_size", ",", "hidden_size", ")", "]", "\n", "\n", "", "s_net", "+=", "[", "nn", ".", "Tanh", "(", ")", ",", "nn", ".", "Linear", "(", "hidden_size", ",", "input_size", ")", "]", "# Default nn.Tanh()", "\n", "self", ".", "s_net", "=", "nn", ".", "Sequential", "(", "*", "s_net", ")", "\n", "\n", "# translation function", "\n", "self", ".", "t_net", "=", "copy", ".", "deepcopy", "(", "self", ".", "s_net", ")", "\n", "# replace Tanh with ReLU's per MAF paper", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "t_net", ")", ")", ":", "\n", "            ", "if", "not", "isinstance", "(", "self", ".", "t_net", "[", "i", "]", ",", "nn", ".", "Linear", ")", ":", "self", ".", "t_net", "[", "i", "]", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cedricwangyu_nofas.None.maf.LinearMaskedCoupling.forward": [[97, 111], ["maf.LinearMaskedCoupling.s_net", "maf.LinearMaskedCoupling.t_net", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "y", "=", "None", ")", ":", "\n", "# apply mask", "\n", "        ", "mx", "=", "x", "*", "self", ".", "mask", "\n", "\n", "# run through model", "\n", "s", "=", "self", ".", "s_net", "(", "mx", "if", "y", "is", "None", "else", "torch", ".", "cat", "(", "[", "y", ",", "mx", "]", ",", "dim", "=", "1", ")", ")", "\n", "t", "=", "self", ".", "t_net", "(", "mx", "if", "y", "is", "None", "else", "torch", ".", "cat", "(", "[", "y", ",", "mx", "]", ",", "dim", "=", "1", ")", ")", "\n", "u", "=", "mx", "+", "(", "1", "-", "self", ".", "mask", ")", "*", "(", "x", "-", "t", ")", "*", "torch", ".", "exp", "(", "\n", "-", "s", ")", "# cf RealNVP eq 8 where u corresponds to x (here we're modeling u)", "\n", "\n", "log_abs_det_jacobian", "=", "-", "(", "\n", "1", "-", "self", ".", "mask", ")", "*", "s", "# log det du/dx; cf RealNVP 8 and 6; note, sum over input_size done at model log_prob", "\n", "\n", "return", "u", ",", "log_abs_det_jacobian", "\n", "\n"]], "home.repos.pwc.inspect_result.cedricwangyu_nofas.None.maf.LinearMaskedCoupling.inverse": [[112, 124], ["maf.LinearMaskedCoupling.s_net", "maf.LinearMaskedCoupling.t_net", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "maf.LinearMaskedCoupling.exp"], "methods", ["None"], ["", "def", "inverse", "(", "self", ",", "u", ",", "y", "=", "None", ")", ":", "\n", "# apply mask", "\n", "        ", "mu", "=", "u", "*", "self", ".", "mask", "\n", "\n", "# run through model", "\n", "s", "=", "self", ".", "s_net", "(", "mu", "if", "y", "is", "None", "else", "torch", ".", "cat", "(", "[", "y", ",", "mu", "]", ",", "dim", "=", "1", ")", ")", "\n", "t", "=", "self", ".", "t_net", "(", "mu", "if", "y", "is", "None", "else", "torch", ".", "cat", "(", "[", "y", ",", "mu", "]", ",", "dim", "=", "1", ")", ")", "\n", "x", "=", "mu", "+", "(", "1", "-", "self", ".", "mask", ")", "*", "(", "u", "*", "s", ".", "exp", "(", ")", "+", "t", ")", "# cf RealNVP eq 7", "\n", "\n", "log_abs_det_jacobian", "=", "(", "1", "-", "self", ".", "mask", ")", "*", "s", "# log det dx/du", "\n", "\n", "return", "x", ",", "log_abs_det_jacobian", "\n", "\n"]], "home.repos.pwc.inspect_result.cedricwangyu_nofas.None.maf.BatchNorm.__init__": [[129, 139], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "maf.BatchNorm.register_buffer", "maf.BatchNorm.register_buffer", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.cedricwangyu_nofas.None.highdimModels.Highdim.__init__"], ["def", "__init__", "(", "self", ",", "input_size", ",", "momentum", "=", "0.9", ",", "eps", "=", "1e-5", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "momentum", "=", "momentum", "\n", "self", ".", "eps", "=", "eps", "\n", "\n", "self", ".", "log_gamma", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "input_size", ")", ")", "\n", "self", ".", "beta", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "input_size", ")", ")", "\n", "\n", "self", ".", "register_buffer", "(", "'running_mean'", ",", "torch", ".", "zeros", "(", "input_size", ")", ")", "\n", "self", ".", "register_buffer", "(", "'running_var'", ",", "torch", ".", "ones", "(", "input_size", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cedricwangyu_nofas.None.maf.BatchNorm.forward": [[140, 165], ["x.mean", "x.var", "maf.BatchNorm.running_mean.mul_().add_", "maf.BatchNorm.running_var.mul_().add_", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "log_abs_det_jacobian.expand_as", "maf.BatchNorm.log_gamma.exp", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "maf.BatchNorm.running_mean.mul_", "maf.BatchNorm.running_var.mul_"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "cond_y", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "training", ":", "\n", "            ", "self", ".", "batch_mean", "=", "x", ".", "mean", "(", "0", ")", "\n", "self", ".", "batch_var", "=", "x", ".", "var", "(", "0", ")", "# note MAF paper uses biased variance estimate; ie x.var(0, unbiased=False)", "\n", "\n", "# update running mean", "\n", "self", ".", "running_mean", ".", "mul_", "(", "self", ".", "momentum", ")", ".", "add_", "(", "self", ".", "batch_mean", ".", "data", "*", "(", "1", "-", "self", ".", "momentum", ")", ")", "\n", "self", ".", "running_var", ".", "mul_", "(", "self", ".", "momentum", ")", ".", "add_", "(", "self", ".", "batch_var", ".", "data", "*", "(", "1", "-", "self", ".", "momentum", ")", ")", "\n", "\n", "mean", "=", "self", ".", "batch_mean", "\n", "var", "=", "self", ".", "batch_var", "\n", "", "else", ":", "\n", "            ", "mean", "=", "self", ".", "running_mean", "\n", "var", "=", "self", ".", "running_var", "\n", "\n", "# compute normalized input (cf original batch norm paper algo 1)", "\n", "", "x_hat", "=", "(", "x", "-", "mean", ")", "/", "torch", ".", "sqrt", "(", "var", "+", "self", ".", "eps", ")", "\n", "y", "=", "self", ".", "log_gamma", ".", "exp", "(", ")", "*", "x_hat", "+", "self", ".", "beta", "\n", "\n", "# compute log_abs_det_jacobian (cf RealNVP paper)", "\n", "log_abs_det_jacobian", "=", "self", ".", "log_gamma", "-", "0.5", "*", "torch", ".", "log", "(", "var", "+", "self", ".", "eps", ")", "\n", "# print('in sum log var {:6.3f} ; out sum log var {:6.3f}; sum log det {:8.3f}; mean log_gamma {:5.3f}; mean", "\n", "# beta {:5.3f}'.format( (var + self.eps).log().sum().data.numpy(), y.var(0).log().sum().data.numpy(),", "\n", "# log_abs_det_jacobian.mean(0).item(), self.log_gamma.mean(), self.beta.mean()))", "\n", "return", "y", ",", "log_abs_det_jacobian", ".", "expand_as", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cedricwangyu_nofas.None.maf.BatchNorm.inverse": [[166, 180], ["torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "log_abs_det_jacobian.expand_as", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log"], "methods", ["None"], ["", "def", "inverse", "(", "self", ",", "y", ",", "cond_y", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "training", ":", "\n", "            ", "mean", "=", "self", ".", "batch_mean", "\n", "var", "=", "self", ".", "batch_var", "\n", "", "else", ":", "\n", "            ", "mean", "=", "self", ".", "running_mean", "\n", "var", "=", "self", ".", "running_var", "\n", "\n", "", "x_hat", "=", "(", "y", "-", "self", ".", "beta", ")", "*", "torch", ".", "exp", "(", "-", "self", ".", "log_gamma", ")", "\n", "x", "=", "x_hat", "*", "torch", ".", "sqrt", "(", "var", "+", "self", ".", "eps", ")", "+", "mean", "\n", "\n", "log_abs_det_jacobian", "=", "0.5", "*", "torch", ".", "log", "(", "var", "+", "self", ".", "eps", ")", "-", "self", ".", "log_gamma", "\n", "\n", "return", "x", ",", "log_abs_det_jacobian", ".", "expand_as", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cedricwangyu_nofas.None.maf.FlowSequential.forward": [[185, 191], ["module"], "methods", ["None"], ["def", "forward", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "sum_log_abs_det_jacobians", "=", "0", "\n", "for", "module", "in", "self", ":", "\n", "            ", "x", ",", "log_abs_det_jacobian", "=", "module", "(", "x", ",", "y", ")", "\n", "sum_log_abs_det_jacobians", "=", "sum_log_abs_det_jacobians", "+", "log_abs_det_jacobian", "\n", "", "return", "x", ",", "sum_log_abs_det_jacobians", "\n", "\n"]], "home.repos.pwc.inspect_result.cedricwangyu_nofas.None.maf.FlowSequential.inverse": [[192, 198], ["reversed", "module.inverse"], "methods", ["home.repos.pwc.inspect_result.cedricwangyu_nofas.None.maf.RealNVP.inverse"], ["", "def", "inverse", "(", "self", ",", "u", ",", "y", ")", ":", "\n", "        ", "sum_log_abs_det_jacobians", "=", "0", "\n", "for", "module", "in", "reversed", "(", "self", ")", ":", "\n", "            ", "u", ",", "log_abs_det_jacobian", "=", "module", ".", "inverse", "(", "u", ",", "y", ")", "\n", "sum_log_abs_det_jacobians", "=", "sum_log_abs_det_jacobians", "+", "log_abs_det_jacobian", "\n", "", "return", "u", ",", "sum_log_abs_det_jacobians", "\n", "\n"]], "home.repos.pwc.inspect_result.cedricwangyu_nofas.None.maf.MADE.__init__": [[205, 242], ["torch.Module.__init__", "maf.MADE.register_buffer", "maf.MADE.register_buffer", "maf.create_masks", "maf.MaskedLinear", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "maf.MaskedLinear", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Tanh", "maf.MaskedLinear", "masks[].repeat", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "ValueError"], "methods", ["home.repos.pwc.inspect_result.cedricwangyu_nofas.None.highdimModels.Highdim.__init__", "home.repos.pwc.inspect_result.cedricwangyu_nofas.None.maf.create_masks"], ["    ", "def", "__init__", "(", "self", ",", "input_size", ",", "hidden_size", ",", "n_hidden", ",", "cond_label_size", "=", "None", ",", "activation", "=", "'relu'", ",", "\n", "input_order", "=", "'sequential'", ",", "input_degrees", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            input_size -- scalar; dim of inputs\n            hidden_size -- scalar; dim of hidden layers\n            n_hidden -- scalar; number of hidden layers\n            activation -- str; activation function to use\n            input_order -- str or tensor; variable order for creating the autoregressive masks (sequential|random)\n                            or the order flipped from the previous layer in a stack of mades\n            conditional -- bool; whether model is conditional\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "# base distribution for calculation of log prob under the model", "\n", "self", ".", "register_buffer", "(", "'base_dist_mean'", ",", "torch", ".", "zeros", "(", "input_size", ")", ")", "\n", "self", ".", "register_buffer", "(", "'base_dist_var'", ",", "torch", ".", "ones", "(", "input_size", ")", ")", "\n", "\n", "# create masks", "\n", "masks", ",", "self", ".", "input_degrees", "=", "create_masks", "(", "input_size", ",", "hidden_size", ",", "n_hidden", ",", "input_order", ",", "input_degrees", ")", "\n", "\n", "# setup activation", "\n", "if", "activation", "==", "'relu'", ":", "\n", "            ", "activation_fn", "=", "nn", ".", "ReLU", "(", ")", "\n", "", "elif", "activation", "==", "'tanh'", ":", "\n", "            ", "activation_fn", "=", "nn", ".", "Tanh", "(", ")", "\n", "", "elif", "activation", "==", "'custom'", ":", "\n", "            ", "activation_fn", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Check activation function.'", ")", "\n", "\n", "# construct model", "\n", "", "self", ".", "net_input", "=", "MaskedLinear", "(", "input_size", ",", "hidden_size", ",", "masks", "[", "0", "]", ",", "cond_label_size", ")", "\n", "self", ".", "net", "=", "[", "]", "\n", "for", "m", "in", "masks", "[", "1", ":", "-", "1", "]", ":", "\n", "            ", "self", ".", "net", "+=", "[", "activation_fn", ",", "MaskedLinear", "(", "hidden_size", ",", "hidden_size", ",", "m", ")", "]", "\n", "", "self", ".", "net", "+=", "[", "activation_fn", ",", "MaskedLinear", "(", "hidden_size", ",", "2", "*", "input_size", ",", "masks", "[", "-", "1", "]", ".", "repeat", "(", "2", ",", "1", ")", ")", "]", "\n", "self", ".", "net", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "net", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cedricwangyu_nofas.None.maf.MADE.base_dist": [[243, 246], ["torch.Normal", "torch.Normal", "torch.Normal", "torch.Normal"], "methods", ["None"], ["", "@", "property", "\n", "def", "base_dist", "(", "self", ")", ":", "\n", "        ", "return", "D", ".", "Normal", "(", "self", ".", "base_dist_mean", ",", "self", ".", "base_dist_var", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cedricwangyu_nofas.None.maf.MADE.forward": [[247, 254], ["maf.MADE.net().chunk", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "maf.MADE.net", "maf.MADE.net_input"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", "=", "None", ")", ":", "\n", "# MAF eq 4 -- return mean and log std", "\n", "        ", "m", ",", "loga", "=", "self", ".", "net", "(", "self", ".", "net_input", "(", "x", ",", "y", ")", ")", ".", "chunk", "(", "chunks", "=", "2", ",", "dim", "=", "1", ")", "\n", "u", "=", "(", "x", "-", "m", ")", "*", "torch", ".", "exp", "(", "-", "loga", ")", "\n", "# MAF eq 5", "\n", "log_abs_det_jacobian", "=", "-", "loga", "\n", "return", "u", ",", "log_abs_det_jacobian", "\n", "\n"]], "home.repos.pwc.inspect_result.cedricwangyu_nofas.None.maf.MADE.inverse": [[255, 265], ["torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "maf.MADE.net().chunk", "maf.MADE.net", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "maf.MADE.net_input"], "methods", ["None"], ["", "def", "inverse", "(", "self", ",", "u", ",", "y", "=", "None", ",", "sum_log_abs_det_jacobians", "=", "None", ")", ":", "\n", "# MAF eq 3", "\n", "        ", "D", "=", "u", ".", "shape", "[", "1", "]", "\n", "x", "=", "torch", ".", "zeros_like", "(", "u", ")", "\n", "# run through reverse model", "\n", "for", "i", "in", "self", ".", "input_degrees", ":", "\n", "            ", "m", ",", "loga", "=", "self", ".", "net", "(", "self", ".", "net_input", "(", "x", ",", "y", ")", ")", ".", "chunk", "(", "chunks", "=", "2", ",", "dim", "=", "1", ")", "\n", "x", "[", ":", ",", "i", "]", "=", "u", "[", ":", ",", "i", "]", "*", "torch", ".", "exp", "(", "loga", "[", ":", ",", "i", "]", ")", "+", "m", "[", ":", ",", "i", "]", "\n", "", "log_abs_det_jacobian", "=", "loga", "\n", "return", "x", ",", "log_abs_det_jacobian", "\n", "\n"]], "home.repos.pwc.inspect_result.cedricwangyu_nofas.None.maf.MADE.log_prob": [[266, 269], ["maf.MADE.forward", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "maf.MADE.base_dist.log_prob"], "methods", ["home.repos.pwc.inspect_result.cedricwangyu_nofas.None.FNN_surrogate_nested.Surrogate.forward", "home.repos.pwc.inspect_result.cedricwangyu_nofas.None.maf.RealNVP.log_prob"], ["", "def", "log_prob", "(", "self", ",", "x", ",", "y", "=", "None", ")", ":", "\n", "        ", "u", ",", "log_abs_det_jacobian", "=", "self", ".", "forward", "(", "x", ",", "y", ")", "\n", "return", "torch", ".", "sum", "(", "self", ".", "base_dist", ".", "log_prob", "(", "u", ")", "+", "log_abs_det_jacobian", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cedricwangyu_nofas.None.maf.MAF.__init__": [[272, 289], ["torch.Module.__init__", "maf.MAF.register_buffer", "maf.MAF.register_buffer", "range", "maf.FlowSequential", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "modules[].input_degrees.flip", "maf.MADE", "maf.BatchNorm"], "methods", ["home.repos.pwc.inspect_result.cedricwangyu_nofas.None.highdimModels.Highdim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_blocks", ",", "input_size", ",", "hidden_size", ",", "n_hidden", ",", "cond_label_size", "=", "None", ",", "activation", "=", "'relu'", ",", "\n", "input_order", "=", "'sequential'", ",", "batch_norm", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "# base distribution for calculation of log prob under the model", "\n", "self", ".", "register_buffer", "(", "'base_dist_mean'", ",", "torch", ".", "zeros", "(", "input_size", ")", ")", "\n", "self", ".", "register_buffer", "(", "'base_dist_var'", ",", "torch", ".", "ones", "(", "input_size", ")", ")", "\n", "\n", "# construct model", "\n", "modules", "=", "[", "]", "\n", "self", ".", "input_degrees", "=", "None", "\n", "for", "i", "in", "range", "(", "n_blocks", ")", ":", "\n", "            ", "modules", "+=", "[", "\n", "MADE", "(", "input_size", ",", "hidden_size", ",", "n_hidden", ",", "cond_label_size", ",", "activation", ",", "input_order", ",", "self", ".", "input_degrees", ")", "]", "\n", "self", ".", "input_degrees", "=", "modules", "[", "-", "1", "]", ".", "input_degrees", ".", "flip", "(", "0", ")", "\n", "modules", "+=", "batch_norm", "*", "[", "BatchNorm", "(", "input_size", ")", "]", "\n", "\n", "", "self", ".", "net", "=", "FlowSequential", "(", "*", "modules", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cedricwangyu_nofas.None.maf.MAF.base_dist": [[290, 293], ["torch.Normal", "torch.Normal", "torch.Normal", "torch.Normal"], "methods", ["None"], ["", "@", "property", "\n", "def", "base_dist", "(", "self", ")", ":", "\n", "        ", "return", "D", ".", "Normal", "(", "self", ".", "base_dist_mean", ",", "self", ".", "base_dist_var", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cedricwangyu_nofas.None.maf.MAF.forward": [[294, 296], ["maf.MAF.net"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", "=", "None", ")", ":", "\n", "        ", "return", "self", ".", "net", "(", "x", ",", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cedricwangyu_nofas.None.maf.MAF.inverse": [[297, 299], ["maf.MAF.net.inverse"], "methods", ["home.repos.pwc.inspect_result.cedricwangyu_nofas.None.maf.RealNVP.inverse"], ["", "def", "inverse", "(", "self", ",", "u", ",", "y", "=", "None", ")", ":", "\n", "        ", "return", "self", ".", "net", ".", "inverse", "(", "u", ",", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cedricwangyu_nofas.None.maf.MAF.log_prob": [[300, 303], ["maf.MAF.forward", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "maf.MAF.base_dist.log_prob"], "methods", ["home.repos.pwc.inspect_result.cedricwangyu_nofas.None.FNN_surrogate_nested.Surrogate.forward", "home.repos.pwc.inspect_result.cedricwangyu_nofas.None.maf.RealNVP.log_prob"], ["", "def", "log_prob", "(", "self", ",", "x", ",", "y", "=", "None", ")", ":", "\n", "        ", "u", ",", "sum_log_abs_det_jacobians", "=", "self", ".", "forward", "(", "x", ",", "y", ")", "\n", "return", "torch", ".", "sum", "(", "self", ".", "base_dist", ".", "log_prob", "(", "u", ")", "+", "sum_log_abs_det_jacobians", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cedricwangyu_nofas.None.maf.RealNVP.__init__": [[306, 322], ["torch.Module.__init__", "maf.RealNVP.register_buffer", "maf.RealNVP.register_buffer", "range", "maf.FlowSequential", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "maf.LinearMaskedCoupling", "maf.BatchNorm"], "methods", ["home.repos.pwc.inspect_result.cedricwangyu_nofas.None.highdimModels.Highdim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_blocks", ",", "input_size", ",", "hidden_size", ",", "n_hidden", ",", "cond_label_size", "=", "None", ",", "batch_norm", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "# base distribution for calculation of log prob under the model", "\n", "self", ".", "register_buffer", "(", "'base_dist_mean'", ",", "torch", ".", "zeros", "(", "input_size", ")", ")", "\n", "self", ".", "register_buffer", "(", "'base_dist_var'", ",", "torch", ".", "ones", "(", "input_size", ")", ")", "\n", "\n", "# construct model", "\n", "modules", "=", "[", "]", "\n", "mask", "=", "torch", ".", "arange", "(", "input_size", ")", "%", "2", "\n", "for", "i", "in", "range", "(", "n_blocks", ")", ":", "\n", "            ", "modules", "+=", "[", "LinearMaskedCoupling", "(", "input_size", ",", "hidden_size", ",", "n_hidden", ",", "mask", ",", "cond_label_size", ")", "]", "\n", "mask", "=", "1", "-", "mask", "\n", "modules", "+=", "batch_norm", "*", "[", "BatchNorm", "(", "input_size", ")", "]", "\n", "\n", "", "self", ".", "net", "=", "FlowSequential", "(", "*", "modules", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cedricwangyu_nofas.None.maf.RealNVP.base_dist": [[323, 326], ["torch.Normal", "torch.Normal", "torch.Normal", "torch.Normal"], "methods", ["None"], ["", "@", "property", "\n", "def", "base_dist", "(", "self", ")", ":", "\n", "        ", "return", "D", ".", "Normal", "(", "self", ".", "base_dist_mean", ",", "self", ".", "base_dist_var", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cedricwangyu_nofas.None.maf.RealNVP.forward": [[327, 329], ["maf.RealNVP.net"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", "=", "None", ")", ":", "\n", "        ", "return", "self", ".", "net", "(", "x", ",", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cedricwangyu_nofas.None.maf.RealNVP.inverse": [[330, 332], ["maf.RealNVP.net.inverse"], "methods", ["home.repos.pwc.inspect_result.cedricwangyu_nofas.None.maf.RealNVP.inverse"], ["", "def", "inverse", "(", "self", ",", "u", ",", "y", "=", "None", ")", ":", "\n", "        ", "return", "self", ".", "net", ".", "inverse", "(", "u", ",", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cedricwangyu_nofas.None.maf.RealNVP.log_prob": [[333, 336], ["maf.RealNVP.forward", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "maf.RealNVP.base_dist.log_prob"], "methods", ["home.repos.pwc.inspect_result.cedricwangyu_nofas.None.FNN_surrogate_nested.Surrogate.forward", "home.repos.pwc.inspect_result.cedricwangyu_nofas.None.maf.RealNVP.log_prob"], ["", "def", "log_prob", "(", "self", ",", "x", ",", "y", "=", "None", ")", ":", "\n", "        ", "u", ",", "sum_log_abs_det_jacobians", "=", "self", ".", "forward", "(", "x", ",", "y", ")", "\n", "return", "torch", ".", "sum", "(", "self", ".", "base_dist", ".", "log_prob", "(", "u", ")", "+", "sum_log_abs_det_jacobians", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cedricwangyu_nofas.None.maf.create_masks": [[16, 45], ["zip", "range", "range", "min", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "min", "degrees[].min().item", "d1.unsqueeze", "d0.unsqueeze", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "degrees[].min().item", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "degrees[].min", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "degrees[].min"], "function", ["None"], ["def", "create_masks", "(", "input_size", ",", "hidden_size", ",", "n_hidden", ",", "input_order", "=", "'sequential'", ",", "input_degrees", "=", "None", ")", ":", "\n", "# MADE paper sec 4:", "\n", "# degrees of connections between layers -- ensure at most in_degree - 1 connections", "\n", "    ", "degrees", "=", "[", "]", "\n", "\n", "# set input degrees to what is provided in args (the flipped order of the previous layer in a stack of mades);", "\n", "# else init input degrees based on strategy in input_order (sequential or random)", "\n", "if", "input_order", "==", "'sequential'", ":", "\n", "        ", "degrees", "+=", "[", "torch", ".", "arange", "(", "input_size", ")", "]", "if", "input_degrees", "is", "None", "else", "[", "input_degrees", "]", "\n", "for", "_", "in", "range", "(", "n_hidden", "+", "1", ")", ":", "\n", "            ", "degrees", "+=", "[", "torch", ".", "arange", "(", "hidden_size", ")", "%", "(", "input_size", "-", "1", ")", "]", "\n", "", "degrees", "+=", "[", "torch", ".", "arange", "(", "input_size", ")", "%", "input_size", "-", "1", "]", "if", "input_degrees", "is", "None", "else", "[", "\n", "input_degrees", "%", "input_size", "-", "1", "]", "\n", "\n", "", "elif", "input_order", "==", "'random'", ":", "\n", "        ", "degrees", "+=", "[", "torch", ".", "randperm", "(", "input_size", ")", "]", "if", "input_degrees", "is", "None", "else", "[", "input_degrees", "]", "\n", "for", "_", "in", "range", "(", "n_hidden", "+", "1", ")", ":", "\n", "            ", "min_prev_degree", "=", "min", "(", "degrees", "[", "-", "1", "]", ".", "min", "(", ")", ".", "item", "(", ")", ",", "input_size", "-", "1", ")", "\n", "degrees", "+=", "[", "torch", ".", "randint", "(", "min_prev_degree", ",", "input_size", ",", "(", "hidden_size", ",", ")", ")", "]", "\n", "", "min_prev_degree", "=", "min", "(", "degrees", "[", "-", "1", "]", ".", "min", "(", ")", ".", "item", "(", ")", ",", "input_size", "-", "1", ")", "\n", "degrees", "+=", "[", "torch", ".", "randint", "(", "min_prev_degree", ",", "input_size", ",", "(", "input_size", ",", ")", ")", "-", "1", "]", "if", "input_degrees", "is", "None", "else", "[", "\n", "input_degrees", "-", "1", "]", "\n", "\n", "# construct masks", "\n", "", "masks", "=", "[", "]", "\n", "for", "(", "d0", ",", "d1", ")", "in", "zip", "(", "degrees", "[", ":", "-", "1", "]", ",", "degrees", "[", "1", ":", "]", ")", ":", "\n", "        ", "masks", "+=", "[", "(", "d1", ".", "unsqueeze", "(", "-", "1", ")", ">=", "d0", ".", "unsqueeze", "(", "0", ")", ")", "]", "\n", "\n", "", "return", "masks", ",", "degrees", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.cedricwangyu_nofas.None.maf.train": [[338, 372], ["nf.train", "nf.base_dist.sample", "nf", "torch.any", "torch.any", "torch.any", "torch.any", "optimizer.zero_grad", "loss.backward", "optimizer.step", "print", "nf.base_dist.sample", "nf", "numpy.savetxt", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "print", "print", "numpy.savetxt", "exit", "xk[].data.clone", "print", "print", "print", "model.surrogate.update", "print", "log.append", "xkk.data.numpy", "numpy.array", "model.surrogate.grid_record.size", "loss.item", "str", "str", "list", "model.den_t", "loss.item", "list", "model.surrogate.grid_record.size", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "loss.item", "torch.std().detach().numpy", "torch.std().detach().numpy", "torch.std().detach().numpy", "torch.std().detach().numpy", "torch.std().detach", "torch.std().detach", "torch.std().detach", "torch.std().detach", "torch.std", "torch.std", "torch.std", "torch.std"], "function", ["home.repos.pwc.inspect_result.cedricwangyu_nofas.None.maf.train", "home.repos.pwc.inspect_result.cedricwangyu_nofas.None.mh.MH.sample", "home.repos.pwc.inspect_result.cedricwangyu_nofas.None.mh.MH.sample", "home.repos.pwc.inspect_result.cedricwangyu_nofas.None.FNN_surrogate_nested.Surrogate.update", "home.repos.pwc.inspect_result.cedricwangyu_nofas.None.highdimModels.Highdim.den_t"], ["", "", "def", "train", "(", "nf", ",", "model", ",", "optimizer", ",", "iteration", ",", "exp", ",", "log", ",", "sampling", "=", "True", ",", "update", "=", "True", ")", ":", "\n", "    ", "nf", ".", "train", "(", ")", "\n", "x0", "=", "nf", ".", "base_dist", ".", "sample", "(", "[", "exp", ".", "batch_size", "]", ")", "\n", "xk", ",", "sum_log_abs_det_jacobians", "=", "nf", "(", "x0", ")", "\n", "\n", "# generate samples on the way", "\n", "if", "sampling", "and", "iteration", "%", "200", "==", "0", ":", "\n", "        ", "x00", "=", "nf", ".", "base_dist", ".", "sample", "(", "[", "exp", ".", "n_sample", "]", ")", "\n", "xkk", ",", "_", "=", "nf", "(", "x00", ")", "\n", "np", ".", "savetxt", "(", "exp", ".", "output_dir", "+", "'/samples'", "+", "str", "(", "iteration", ")", ",", "xkk", ".", "data", ".", "numpy", "(", ")", ",", "newline", "=", "\"\\n\"", ")", "\n", "\n", "", "if", "torch", ".", "any", "(", "torch", ".", "isnan", "(", "xk", ")", ")", ":", "\n", "        ", "print", "(", "\"WTF \"", "+", "str", "(", "iteration", ")", ")", "\n", "print", "(", "xk", ")", "\n", "np", ".", "savetxt", "(", "exp", ".", "output_dir", "+", "'/'", "+", "exp", ".", "log_file", ",", "np", ".", "array", "(", "log", ")", ",", "newline", "=", "\"\\n\"", ")", "\n", "exit", "(", "-", "1", ")", "\n", "\n", "# updating surrogate model", "\n", "", "if", "iteration", "%", "exp", ".", "calibrate_interval", "==", "0", "and", "update", "and", "model", ".", "surrogate", ".", "grid_record", ".", "size", "(", "0", ")", "<", "exp", ".", "budget", ":", "\n", "        ", "xk0", "=", "xk", "[", ":", "exp", ".", "true_data_num", ",", ":", "]", ".", "data", ".", "clone", "(", ")", "\n", "print", "(", "\"\\n\"", ")", "\n", "print", "(", "list", "(", "model", ".", "surrogate", ".", "grid_record", ".", "size", "(", ")", ")", "[", "0", "]", ")", "\n", "print", "(", "xk0", ")", "\n", "model", ".", "surrogate", ".", "update", "(", "xk0", ",", "max_iters", "=", "6000", ")", "\n", "\n", "# Free energy bound", "\n", "", "loss", "=", "(", "-", "torch", ".", "sum", "(", "sum_log_abs_det_jacobians", ",", "1", ")", "-", "model", ".", "den_t", "(", "xk", ")", ")", ".", "mean", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "print", "(", "\"{}\\t{}\"", ".", "format", "(", "iteration", ",", "loss", ".", "item", "(", ")", ")", ",", "end", "=", "'\\r'", ")", "\n", "if", "iteration", "%", "exp", ".", "log_interval", "==", "0", ":", "\n", "        ", "print", "(", "\"{}\\t{}\"", ".", "format", "(", "iteration", ",", "loss", ".", "item", "(", ")", ")", ")", "\n", "log", ".", "append", "(", "[", "iteration", ",", "loss", ".", "item", "(", ")", "]", "+", "list", "(", "torch", ".", "std", "(", "xk", ",", "dim", "=", "0", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cedricwangyu_nofas.None.circuitModels.circuitModel.__init__": [[55, 76], ["circuitModels.circuitModel.solve_t"], "methods", ["home.repos.pwc.inspect_result.cedricwangyu_nofas.None.highdimModels.Highdim.solve_t"], ["    ", "def", "__init__", "(", "self", ",", "numParam", ",", "numState", ",", "numAuxState", ",", "numOutputs", ",", "\n", "parName", ",", "limits", ",", "defParam", ",", "\n", "cycleTime", ",", "totalCycles", ",", "forcing", "=", "None", ")", ":", "\n", "# Time integration parameters", "\n", "        ", "self", ".", "cycleTime", "=", "cycleTime", "\n", "self", ".", "totalCycles", "=", "totalCycles", "\n", "# Forcing", "\n", "self", ".", "forcing", "=", "forcing", "\n", "# Init parameters", "\n", "self", ".", "numParam", "=", "numParam", "\n", "self", ".", "numState", "=", "numState", "\n", "self", ".", "numAuxState", "=", "numAuxState", "\n", "self", ".", "numOutputs", "=", "numOutputs", "\n", "self", ".", "parName", "=", "parName", "\n", "\n", "self", ".", "stdRatio", "=", "0.01", "\n", "self", ".", "limits", "=", "limits", "\n", "self", ".", "mmHgToBarye", "=", "1333.22", "\n", "self", ".", "defParam", "=", "defParam", "\n", "self", ".", "defOut", "=", "self", ".", "solve_t", "(", "self", ".", "defParam", ",", "y0", "=", "None", ")", "\n", "self", ".", "data", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.cedricwangyu_nofas.None.circuitModels.circuitModel.evalDeriv_t": [[77, 80], ["None"], "methods", ["None"], ["", "def", "evalDeriv_t", "(", "self", ",", "t", ",", "y", ",", "params", ")", ":", "\n", "# PyTorch - Computing Derivative for the model. See specific definition in subclasses of RC and RCR", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.cedricwangyu_nofas.None.circuitModels.circuitModel.postProcess_t": [[81, 84], ["None"], "methods", ["None"], ["", "def", "postProcess_t", "(", "self", ",", "t", ",", "y", ",", "aux", ",", "start", ",", "stop", ")", ":", "\n", "# PyTorch - Computing (min, max, ave) output given solution of ODE. See specific definition in subclasses of RC and RCR", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.cedricwangyu_nofas.None.circuitModels.circuitModel.genDataFile": [[85, 96], ["numpy.zeros", "range", "numpy.savetxt", "torch.randn", "len"], "methods", ["None"], ["", "def", "genDataFile", "(", "self", ",", "dataSize", ",", "dataFileName", ")", ":", "\n", "# Scipy - Generate Data file: Given the solution def_out of default parameters,", "\n", "# sample data with mean def_out and cov matrix with diagonal std * def_out", "\n", "        ", "data", "=", "np", ".", "zeros", "(", "(", "self", ".", "numOutputs", ",", "dataSize", ")", ")", "\n", "# Get Standard Deviaitons using ratios", "\n", "stds", "=", "self", ".", "defOut", "*", "self", ".", "stdRatio", "\n", "for", "loopA", "in", "range", "(", "dataSize", ")", ":", "\n", "# Get Default Paramters", "\n", "            ", "data", "[", ":", ",", "loopA", "]", "=", "self", ".", "defOut", "[", "0", "]", "+", "torch", ".", "randn", "(", "len", "(", "stds", "[", "0", "]", ")", ")", "*", "stds", "\n", "", "self", ".", "data", "=", "data", "\n", "np", ".", "savetxt", "(", "dataFileName", ",", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cedricwangyu_nofas.None.circuitModels.circuitModel.solve_t": [[97, 111], ["numpy.linspace", "circuitModels.solve_ivp_s", "len", "circuitModels.circuitModel.postProcess_t", "list", "len", "params.size", "torch.ones", "circuitModels.circuitModel.evalDeriv_t", "torch.ones().double", "len", "params.double", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.cedricwangyu_nofas.None.circuitModels.solve_ivp_s", "home.repos.pwc.inspect_result.cedricwangyu_nofas.None.circuitModels.rcrModel.postProcess_t", "home.repos.pwc.inspect_result.cedricwangyu_nofas.None.circuitModels.rcrModel.evalDeriv_t"], ["", "def", "solve_t", "(", "self", ",", "params", ",", "y0", "=", "None", ")", ":", "\n", "# Pytorch - Reimplementing solve: Support Multiple parameters", "\n", "        ", "batch_size", "=", "list", "(", "params", ".", "size", "(", ")", ")", "[", "0", "]", "\n", "if", "y0", "is", "None", ":", "y0", "=", "55.0", "*", "self", ".", "mmHgToBarye", "*", "torch", ".", "ones", "(", "batch_size", ")", "\n", "t_bound", "=", "self", ".", "totalCycles", "*", "self", ".", "cycleTime", "\n", "saveSteps", "=", "np", ".", "linspace", "(", "0.0", ",", "t_bound", ",", "201", ",", "endpoint", "=", "True", ")", "\n", "odeSol_t", ",", "odeSol_y", ",", "odeSol_aux", "=", "solve_ivp_s", "(", "lambda", "t", ",", "y", ":", "self", ".", "evalDeriv_t", "(", "t", ",", "y", ",", "params", ".", "double", "(", ")", ")", ",", "0.0", ",", "t_bound", ",", "\n", "y0", "*", "torch", ".", "ones", "(", "batch_size", ")", ".", "double", "(", ")", ",", "\n", "max_step", "=", "self", ".", "cycleTime", "/", "1000.0", ",", "t_eval", "=", "saveSteps", ",", "\n", "batch_size", "=", "batch_size", ",", "aux_size", "=", "self", ".", "numAuxState", ")", "\n", "start", "=", "len", "(", "saveSteps", ")", "-", "(", "len", "(", "saveSteps", "[", "saveSteps", ">", "(", "self", ".", "totalCycles", "-", "1", ")", "*", "self", ".", "cycleTime", "]", ")", "+", "1", ")", "\n", "stop", "=", "len", "(", "saveSteps", ")", "\n", "\n", "return", "self", ".", "postProcess_t", "(", "odeSol_t", ",", "odeSol_y", ",", "odeSol_aux", ",", "start", ",", "stop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cedricwangyu_nofas.None.circuitModels.circuitModel.evalNegLL_t": [[112, 127], ["len", "torch.tensor", "range", "numpy.log", "numpy.prod", "torch.log", "torch.sum", "torch.prod", "modelOut[].repeat().t().float", "Data[].float", "modelOut[].repeat().t", "modelOut[].repeat"], "methods", ["None"], ["", "def", "evalNegLL_t", "(", "self", ",", "modelOut", ")", ":", "\n", "# PyTorch - Evaluate Negative Log-Likelihood with multiple parameters.", "\n", "        ", "data_size", "=", "len", "(", "self", ".", "data", "[", "0", "]", ")", "\n", "# Get the absolute values of the standard deviations", "\n", "stds", "=", "self", ".", "defOut", "*", "self", ".", "stdRatio", "\n", "Data", "=", "torch", ".", "tensor", "(", "self", ".", "data", ")", "\n", "# Eval LL", "\n", "ll1", "=", "-", "0.5", "*", "np", ".", "prod", "(", "self", ".", "data", ".", "shape", ")", "*", "np", ".", "log", "(", "2.0", "*", "np", ".", "pi", ")", "# a number", "\n", "ll2", "=", "(", "-", "0.5", "*", "self", ".", "data", ".", "shape", "[", "1", "]", "*", "torch", ".", "log", "(", "torch", ".", "prod", "(", "stds", ")", ")", ")", ".", "item", "(", ")", "# a number", "\n", "ll3", "=", "0.0", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "            ", "ll3", "=", "ll3", "-", "0.5", "*", "torch", ".", "sum", "(", "\n", "(", "(", "modelOut", "[", ":", ",", "i", "]", ".", "repeat", "(", "data_size", ",", "1", ")", ".", "t", "(", ")", ".", "float", "(", ")", "-", "Data", "[", "i", ",", ":", "]", ".", "float", "(", ")", ")", "/", "stds", "[", "0", ",", "i", "]", ")", "**", "2", ",", "dim", "=", "1", ")", "\n", "", "negLL", "=", "-", "(", "ll1", "+", "ll2", "+", "ll3", ")", "\n", "return", "negLL", "\n", "\n"]], "home.repos.pwc.inspect_result.cedricwangyu_nofas.None.circuitModels.circuitModel.den_t": [[128, 131], ["None"], "methods", ["None"], ["", "def", "den_t", "(", "self", ",", "xx", ",", "surrogate", "=", "None", ")", ":", "\n", "# PyTorch - True Log Posterior of Model.", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.cedricwangyu_nofas.None.circuitModels.rcModel.__init__": [[134, 149], ["torch.Tensor", "torch.Tensor", "circuitModels.circuitModel.__init__", "FNN_surrogate_nested.Surrogate", "torch.Tensor", "circuitModels.rcModel.solve_t", "circuitModels.rcModel.transform"], "methods", ["home.repos.pwc.inspect_result.cedricwangyu_nofas.None.highdimModels.Highdim.__init__", "home.repos.pwc.inspect_result.cedricwangyu_nofas.None.highdimModels.Highdim.solve_t", "home.repos.pwc.inspect_result.cedricwangyu_nofas.None.highdimModels.Highdim.transform"], ["    ", "def", "__init__", "(", "self", ",", "cycleTime", ",", "totalCycles", ",", "forcing", "=", "None", ")", ":", "\n", "# Init parameters", "\n", "        ", "numParam", "=", "2", "\n", "numState", "=", "1", "\n", "numAuxState", "=", "4", "\n", "numOutputs", "=", "3", "\n", "parName", "=", "[", "\"R\"", ",", "\"C\"", "]", "\n", "limits", "=", "torch", ".", "Tensor", "(", "[", "[", "100.0", ",", "1500.0", "]", ",", "[", "1.0e-5", ",", "1.0e-2", "]", "]", ")", "\n", "defParam", "=", "torch", ".", "Tensor", "(", "[", "[", "1000.0", ",", "0.00005", "]", "]", ")", "\n", "#  Invoke Superclass Constructor", "\n", "super", "(", ")", ".", "__init__", "(", "numParam", ",", "numState", ",", "numAuxState", ",", "numOutputs", ",", "\n", "parName", ",", "limits", ",", "defParam", ",", "\n", "cycleTime", ",", "totalCycles", ",", "forcing", ")", "\n", "self", ".", "surrogate", "=", "Surrogate", "(", "\"RC\"", ",", "lambda", "x", ":", "self", ".", "solve_t", "(", "self", ".", "transform", "(", "x", ")", ")", ",", "numParam", ",", "numOutputs", ",", "\n", "torch", ".", "Tensor", "(", "[", "[", "-", "7", ",", "7", "]", ",", "[", "-", "7", ",", "7", "]", "]", ")", ",", "20", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cedricwangyu_nofas.None.circuitModels.rcModel.evalDeriv_t": [[150, 167], ["numpy.interp", "torch.zeros", "tuple", "tuple", "dP1dt.size"], "methods", ["None"], ["", "def", "evalDeriv_t", "(", "self", ",", "t", ",", "y", ",", "params", ")", ":", "\n", "# Pytorch - Evaluate Derivative.", "\n", "        ", "R", "=", "params", "[", ":", ",", "0", "]", "\n", "C", "=", "params", "[", ":", ",", "1", "]", "\n", "Pd", "=", "55", "*", "self", ".", "mmHgToBarye", "\n", "P1", "=", "y", "\n", "\n", "# Interpolate forcing", "\n", "Q1", "=", "np", ".", "interp", "(", "t", "%", "self", ".", "cycleTime", ",", "self", ".", "forcing", "[", ":", ",", "0", "]", ",", "self", ".", "forcing", "[", ":", ",", "1", "]", ")", "\n", "Q2", "=", "(", "P1", "-", "Pd", ")", "/", "R", "\n", "dP1dt", "=", "(", "Q1", "-", "Q2", ")", "/", "C", "\n", "\n", "aux", "=", "torch", ".", "zeros", "(", "tuple", "(", "(", "self", ".", "numAuxState", ",", ")", ")", "+", "tuple", "(", "dP1dt", ".", "size", "(", ")", ")", ")", "\n", "aux", "[", "0", "]", "=", "Pd", "\n", "aux", "[", "1", "]", "=", "Q1", "\n", "aux", "[", "2", "]", "=", "Q2", "\n", "return", "dP1dt", ",", "aux", "\n", "\n"]], "home.repos.pwc.inspect_result.cedricwangyu_nofas.None.circuitModels.rcModel.postProcess_t": [[168, 174], ["torch.stack", "torch.min", "torch.max", "circuitModels.trapz", "float"], "methods", ["home.repos.pwc.inspect_result.cedricwangyu_nofas.None.circuitModels.trapz"], ["", "def", "postProcess_t", "(", "self", ",", "t", ",", "y", ",", "aux", ",", "start", ",", "stop", ")", ":", "\n", "# PyTorch - Computing (Min, Max, Ave) tuple given solution of ODE", "\n", "        ", "return", "torch", ".", "stack", "(", "[", "torch", ".", "min", "(", "y", "[", "start", ":", "stop", ",", ":", "]", ",", "0", ")", "[", "0", "]", "/", "self", ".", "mmHgToBarye", ",", "\n", "torch", ".", "max", "(", "y", "[", "start", ":", "stop", ",", ":", "]", ",", "0", ")", "[", "0", "]", "/", "self", ".", "mmHgToBarye", ",", "\n", "trapz", "(", "t", "[", "start", ":", "stop", "]", ",", "y", "[", "start", ":", "stop", ",", ":", "]", ")", "/", "float", "(", "self", ".", "cycleTime", ")", "/", "self", ".", "mmHgToBarye", "]", ",", "\n", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cedricwangyu_nofas.None.circuitModels.rcModel.transform": [[175, 178], ["torch.chunk", "torch.cat", "torch.exp", "torch.tanh"], "methods", ["None"], ["", "def", "transform", "(", "self", ",", "x", ")", ":", "\n", "        ", "x1", ",", "x2", "=", "torch", ".", "chunk", "(", "x", ",", "chunks", "=", "2", ",", "dim", "=", "1", ")", "\n", "return", "torch", ".", "cat", "(", "(", "torch", ".", "tanh", "(", "x1", "/", "7.0", "*", "3.0", ")", "*", "700.0", "+", "800.0", ",", "torch", ".", "exp", "(", "x2", "/", "7.0", "*", "3.0", "-", "8.0", ")", ")", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cedricwangyu_nofas.None.circuitModels.rcModel.den_t": [[179, 188], ["torch.chunk", "list", "torch.log", "circuitModels.rcModel.surrogate.forward", "circuitModels.rcModel.solve_t", "x.size", "circuitModels.rcModel.transform", "circuitModels.rcModel.evalNegLL_t().reshape", "torch.tanh", "circuitModels.rcModel.evalNegLL_t"], "methods", ["home.repos.pwc.inspect_result.cedricwangyu_nofas.None.FNN_surrogate_nested.Surrogate.forward", "home.repos.pwc.inspect_result.cedricwangyu_nofas.None.highdimModels.Highdim.solve_t", "home.repos.pwc.inspect_result.cedricwangyu_nofas.None.highdimModels.Highdim.transform", "home.repos.pwc.inspect_result.cedricwangyu_nofas.None.highdimModels.Highdim.evalNegLL_t"], ["", "def", "den_t", "(", "self", ",", "x", ",", "surrogate", "=", "True", ")", ":", "\n", "        ", "batch_size", "=", "list", "(", "x", ".", "size", "(", ")", ")", "[", "0", "]", "\n", "x1", ",", "x2", "=", "torch", ".", "chunk", "(", "x", ",", "chunks", "=", "2", ",", "dim", "=", "1", ")", "\n", "adjust", "=", "torch", ".", "log", "(", "1.0", "-", "torch", ".", "tanh", "(", "x1", "/", "7.0", "*", "3.0", ")", "**", "2", ")", "+", "x2", "/", "7", "*", "3", "\n", "if", "surrogate", ":", "\n", "            ", "modelOut", "=", "self", ".", "surrogate", ".", "forward", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "modelOut", "=", "self", ".", "solve_t", "(", "self", ".", "transform", "(", "x", ")", ")", "\n", "", "return", "-", "self", ".", "evalNegLL_t", "(", "modelOut", ")", ".", "reshape", "(", "batch_size", ",", "1", ")", "+", "adjust", "\n", "\n"]], "home.repos.pwc.inspect_result.cedricwangyu_nofas.None.circuitModels.rcrModel.__init__": [[191, 208], ["torch.Tensor", "torch.Tensor", "circuitModels.circuitModel.__init__", "FNN_surrogate_nested.Surrogate", "torch.Tensor", "circuitModels.rcrModel.solve_t", "circuitModels.rcrModel.transform"], "methods", ["home.repos.pwc.inspect_result.cedricwangyu_nofas.None.highdimModels.Highdim.__init__", "home.repos.pwc.inspect_result.cedricwangyu_nofas.None.highdimModels.Highdim.solve_t", "home.repos.pwc.inspect_result.cedricwangyu_nofas.None.highdimModels.Highdim.transform"], ["    ", "def", "__init__", "(", "self", ",", "cycleTime", ",", "totalCycles", ",", "forcing", "=", "None", ")", ":", "\n", "# Init parameters", "\n", "        ", "numParam", "=", "3", "\n", "numState", "=", "1", "\n", "numAuxState", "=", "4", "\n", "numOutputs", "=", "3", "\n", "parName", "=", "[", "\"R1\"", ",", "\"R2\"", ",", "\"C\"", "]", "\n", "limits", "=", "torch", ".", "Tensor", "(", "[", "[", "100.0", ",", "1500.0", "]", ",", "\n", "[", "100.0", ",", "1500.0", "]", ",", "\n", "[", "1.0e-5", ",", "1.0e-2", "]", "]", ")", "\n", "defParam", "=", "torch", ".", "Tensor", "(", "[", "[", "1000.0", ",", "1000.0", ",", "0.00005", "]", "]", ")", "\n", "#  Invoke Superclass Constructor", "\n", "super", "(", ")", ".", "__init__", "(", "numParam", ",", "numState", ",", "numAuxState", ",", "numOutputs", ",", "\n", "parName", ",", "limits", ",", "defParam", ",", "\n", "cycleTime", ",", "totalCycles", ",", "forcing", ")", "\n", "self", ".", "surrogate", "=", "Surrogate", "(", "\"RCR\"", ",", "lambda", "x", ":", "self", ".", "solve_t", "(", "self", ".", "transform", "(", "x", ")", ")", ",", "numParam", ",", "numOutputs", ",", "\n", "torch", ".", "Tensor", "(", "[", "[", "-", "7", ",", "7", "]", ",", "[", "-", "7", ",", "7", "]", ",", "[", "-", "7", ",", "7", "]", "]", ")", ",", "20", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cedricwangyu_nofas.None.circuitModels.rcrModel.evalDeriv_t": [[209, 228], ["numpy.interp", "torch.zeros", "torch.ones", "tuple", "tuple", "dP1dt.size"], "methods", ["None"], ["", "def", "evalDeriv_t", "(", "self", ",", "t", ",", "y", ",", "params", ")", ":", "\n", "        ", "R1", "=", "params", "[", ":", ",", "0", "]", "\n", "R2", "=", "params", "[", ":", ",", "1", "]", "\n", "C", "=", "params", "[", ":", ",", "2", "]", "\n", "Pd", "=", "55", "*", "self", ".", "mmHgToBarye", "*", "torch", ".", "ones", "(", "params", ".", "shape", "[", "0", "]", ")", "\n", "P1", "=", "y", "\n", "\n", "# Interpolate forcing", "\n", "Q1", "=", "np", ".", "interp", "(", "t", "%", "self", ".", "cycleTime", ",", "self", ".", "forcing", "[", ":", ",", "0", "]", ",", "self", ".", "forcing", "[", ":", ",", "1", "]", ")", "\n", "P0", "=", "P1", "+", "R1", "*", "Q1", "\n", "Q2", "=", "(", "P1", "-", "Pd", ")", "/", "R2", "\n", "dP1dt", "=", "(", "Q1", "-", "Q2", ")", "/", "C", "\n", "\n", "aux", "=", "torch", ".", "zeros", "(", "tuple", "(", "(", "self", ".", "numAuxState", ",", ")", ")", "+", "tuple", "(", "dP1dt", ".", "size", "(", ")", ")", ")", "\n", "aux", "[", "0", "]", "=", "Pd", "\n", "aux", "[", "1", "]", "=", "P0", "\n", "aux", "[", "2", "]", "=", "Q1", "\n", "aux", "[", "3", "]", "=", "Q2", "\n", "return", "dP1dt", ",", "aux", "\n", "\n"]], "home.repos.pwc.inspect_result.cedricwangyu_nofas.None.circuitModels.rcrModel.postProcess_t": [[229, 234], ["torch.stack", "torch.min", "torch.max", "circuitModels.trapz", "float"], "methods", ["home.repos.pwc.inspect_result.cedricwangyu_nofas.None.circuitModels.trapz"], ["", "def", "postProcess_t", "(", "self", ",", "t", ",", "y", ",", "aux", ",", "start", ",", "stop", ")", ":", "\n", "        ", "return", "torch", ".", "stack", "(", "[", "torch", ".", "min", "(", "aux", "[", "start", ":", "stop", ",", "1", ",", ":", "]", ",", "0", ")", "[", "0", "]", "/", "self", ".", "mmHgToBarye", ",", "\n", "torch", ".", "max", "(", "aux", "[", "start", ":", "stop", ",", "1", ",", ":", "]", ",", "0", ")", "[", "0", "]", "/", "self", ".", "mmHgToBarye", ",", "\n", "trapz", "(", "t", "[", "start", ":", "stop", "]", ",", "aux", "[", "start", ":", "stop", ",", "1", ",", ":", "]", ")", "/", "float", "(", "self", ".", "cycleTime", ")", "/", "self", ".", "mmHgToBarye", "]", ",", "\n", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cedricwangyu_nofas.None.circuitModels.rcrModel.transform": [[235, 240], ["torch.chunk", "torch.cat", "torch.exp", "torch.tanh", "torch.tanh"], "methods", ["None"], ["", "def", "transform", "(", "self", ",", "x", ")", ":", "\n", "        ", "x1", ",", "x2", ",", "x3", "=", "torch", ".", "chunk", "(", "x", ",", "chunks", "=", "3", ",", "dim", "=", "1", ")", "\n", "return", "torch", ".", "cat", "(", "(", "torch", ".", "tanh", "(", "x1", "/", "7.0", "*", "3.0", ")", "*", "700.0", "+", "800.0", ",", "\n", "torch", ".", "tanh", "(", "x2", "/", "7.0", "*", "3.0", ")", "*", "700.0", "+", "800.0", ",", "\n", "torch", ".", "exp", "(", "x3", "/", "7.0", "*", "3.0", "-", "8.0", ")", ")", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cedricwangyu_nofas.None.circuitModels.rcrModel.den_t": [[241, 252], ["torch.chunk", "list", "circuitModels.rcrModel.surrogate.forward", "circuitModels.rcrModel.solve_t", "x.size", "torch.log", "torch.log", "circuitModels.rcrModel.transform", "circuitModels.rcrModel.evalNegLL_t().reshape", "circuitModels.rcrModel.evalNegLL_t", "torch.tanh", "torch.tanh"], "methods", ["home.repos.pwc.inspect_result.cedricwangyu_nofas.None.FNN_surrogate_nested.Surrogate.forward", "home.repos.pwc.inspect_result.cedricwangyu_nofas.None.highdimModels.Highdim.solve_t", "home.repos.pwc.inspect_result.cedricwangyu_nofas.None.highdimModels.Highdim.transform", "home.repos.pwc.inspect_result.cedricwangyu_nofas.None.highdimModels.Highdim.evalNegLL_t"], ["", "def", "den_t", "(", "self", ",", "x", ",", "surrogate", "=", "True", ")", ":", "\n", "        ", "batch_size", "=", "list", "(", "x", ".", "size", "(", ")", ")", "[", "0", "]", "\n", "x1", ",", "x2", ",", "x3", "=", "torch", ".", "chunk", "(", "x", ",", "chunks", "=", "3", ",", "dim", "=", "1", ")", "\n", "adjust", "=", "torch", ".", "log", "(", "1.0", "-", "torch", ".", "tanh", "(", "x1", "/", "7.0", "*", "3.0", ")", "**", "2", ")", "+", "torch", ".", "log", "(", "1.0", "-", "torch", ".", "tanh", "(", "x2", "/", "7.0", "*", "3.0", ")", "**", "2", ")", "+", "x3", "/", "7", "*", "3", "\n", "if", "surrogate", ":", "\n", "            ", "modelOut", "=", "self", ".", "surrogate", ".", "forward", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "modelOut", "=", "self", ".", "solve_t", "(", "self", ".", "transform", "(", "x", ")", ")", "\n", "", "return", "-", "self", ".", "evalNegLL_t", "(", "modelOut", ")", ".", "reshape", "(", "batch_size", ",", "1", ")", "+", "adjust", "", "", "", ""]], "home.repos.pwc.inspect_result.cedricwangyu_nofas.None.circuitModels.solve_ivp_s": [[10, 42], ["int", "y0.double", "torch.zeros", "torch.zeros", "torch.zeros", "range", "len", "len", "len", "func", "func", "func", "func", "len", "len", "len"], "function", ["None"], ["def", "solve_ivp_s", "(", "func", ",", "t0", ",", "t_bound", ",", "y0", ",", "max_step", ",", "t_eval", ",", "batch_size", ",", "aux_size", ")", ":", "\n", "# PyTorch - Reimplementing scipy.integrate.solve_ivp (Runge-Kuta Method solving ODE) - Output compared and tested.", "\n", "    ", "n", "=", "int", "(", "(", "t_bound", "-", "t0", ")", "/", "max_step", ")", "\n", "t", "=", "t0", "\n", "y", "=", "y0", ".", "double", "(", ")", "\n", "y_rec", "=", "torch", ".", "zeros", "(", "len", "(", "t_eval", ")", ",", "batch_size", ")", "\n", "aux_rec", "=", "torch", ".", "zeros", "(", "len", "(", "t_eval", ")", ",", "aux_size", ",", "batch_size", ")", "\n", "t_rec", "=", "torch", ".", "zeros", "(", "len", "(", "t_eval", ")", ")", "\n", "i", "=", "0", "\n", "for", "_", "in", "range", "(", "n", ")", ":", "\n", "        ", "res", ",", "aux", "=", "func", "(", "t", ",", "y", ")", "\n", "k1", "=", "max_step", "*", "res", "\n", "res", ",", "aux", "=", "func", "(", "t", "+", "0.5", "*", "max_step", ",", "y", "+", "0.5", "*", "k1", ")", "\n", "k2", "=", "max_step", "*", "res", "\n", "res", ",", "aux", "=", "func", "(", "t", "+", "0.5", "*", "max_step", ",", "y", "+", "0.5", "*", "k2", ")", "\n", "k3", "=", "max_step", "*", "res", "\n", "res", ",", "aux", "=", "func", "(", "t", "+", "0.5", "*", "max_step", ",", "y", "+", "k3", ")", "# I think this should be 1.0 and not 0.5!!!", "\n", "k4", "=", "max_step", "*", "res", "\n", "delta", "=", "1.0", "/", "6.0", "*", "(", "k1", "+", "2", "*", "k2", "+", "2", "*", "k3", "+", "k4", ")", "\n", "\n", "if", "t", ">=", "t_eval", "[", "i", "]", ":", "\n", "            ", "y_rec", "[", "i", ",", ":", "]", "=", "y", "\n", "aux_rec", "[", "i", ",", ":", ",", ":", "]", "=", "aux", "\n", "t_rec", "[", "i", "]", "=", "t", "\n", "i", "=", "i", "+", "1", "\n", "", "y", "=", "y", "+", "delta", "\n", "t", "=", "t", "+", "max_step", "\n", "\n", "", "y_rec", "[", "len", "(", "t_eval", ")", "-", "1", ",", ":", "]", "=", "y", "\n", "aux_rec", "[", "len", "(", "t_eval", ")", "-", "1", ",", ":", ",", ":", "]", "=", "aux", "\n", "t_rec", "[", "len", "(", "t_eval", ")", "-", "1", "]", "=", "t", "\n", "return", "t_rec", ",", "y_rec", ",", "aux_rec", "\n", "\n"]], "home.repos.pwc.inspect_result.cedricwangyu_nofas.None.circuitModels.trapz": [[44, 52], ["list", "torch.sum", "y.size"], "function", ["None"], ["", "def", "trapz", "(", "t", ",", "y", ")", ":", "\n", "# Pytorch - Numerical Integration: Trapezoidal Rule", "\n", "    ", "S", "=", "list", "(", "y", ".", "size", "(", ")", ")", "\n", "t0", "=", "t", "[", ":", "S", "[", "0", "]", "-", "1", "]", "\n", "t1", "=", "t", "[", "1", ":", "]", "\n", "y0", "=", "y", "[", ":", "S", "[", "0", "]", "-", "1", ",", ":", "]", "\n", "y1", "=", "y", "[", "1", ":", ",", ":", "]", "\n", "return", "torch", ".", "sum", "(", "(", "y1", "+", "y0", ")", "/", "2.0", "*", "(", "t1", "-", "t0", ")", ".", "reshape", "(", "S", "[", "0", "]", "-", "1", ",", "1", ")", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cedricwangyu_nofas.None.experiment_setting.experiment.__init__": [[4, 30], ["os.path.splitext"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "flow_type", "=", "'made'", "# str: Type of flow", "\n", "self", ".", "n_blocks", "=", "5", "# int: Number of layers", "\n", "self", ".", "hidden_size", "=", "100", "# int: Hidden layer size for MADE in each layer", "\n", "self", ".", "n_hidden", "=", "1", "# int: Number of hidden layers in each MADE", "\n", "self", ".", "activation_fn", "=", "'relu'", "# str: Actication function used", "\n", "self", ".", "input_order", "=", "'sequential'", "# str: Input order for create_mask", "\n", "self", ".", "batch_norm_order", "=", "True", "# boo: Order to decide if batch_norm is used", "\n", "\n", "self", ".", "input_size", "=", "2", "\n", "self", ".", "batch_size", "=", "100", "# int: Number of samples generated", "\n", "self", ".", "true_data_num", "=", "2", "# double: proportion of true model evaluated", "\n", "self", ".", "n_iter", "=", "1e4", "# int: Number of iterations", "\n", "self", ".", "lr", "=", "1e-4", "# float: Learning rate", "\n", "self", ".", "lr_decay", "=", "0.999", "# float: Learning rate decay", "\n", "self", ".", "log_interval", "=", "300", "# int: How often to show loss sta", "\n", "self", ".", "calibrate_interval", "=", "1000", "\n", "self", ".", "budget", "=", "64", "\n", "\n", "self", ".", "output_dir", "=", "'./results/{}'", ".", "format", "(", "os", ".", "path", ".", "splitext", "(", "__file__", ")", "[", "0", "]", ")", "\n", "self", ".", "results_file", "=", "'results.txt'", "\n", "self", ".", "log_file", "=", "'log.txt'", "\n", "self", ".", "samples_file", "=", "'samples.txt'", "\n", "self", ".", "seed", "=", "1", "\n", "self", ".", "n_sample", "=", "10000", "\n", "self", ".", "no_cuda", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.cedricwangyu_nofas.None.FNN_surrogate_nested.FNN.__init__": [[11, 16], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.cedricwangyu_nofas.None.highdimModels.Highdim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_size", ",", "output_size", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "input_size", ",", "64", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "64", ",", "32", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "32", ",", "output_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cedricwangyu_nofas.None.FNN_surrogate_nested.FNN.forward": [[17, 23], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "FNN_surrogate_nested.FNN.fc3", "FNN_surrogate_nested.FNN.fc1", "FNN_surrogate_nested.FNN.fc2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "fc2", "(", "x", ")", ")", "\n", "# x = F.relu(self.fc3(x))", "\n", "x", "=", "self", ".", "fc3", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.cedricwangyu_nofas.None.FNN_surrogate_nested.Surrogate.__init__": [[26, 47], ["FNN_surrogate_nested.FNN", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "numpy.exp", "range"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "model_name", ",", "model_func", ",", "input_size", ",", "output_size", ",", "limits", "=", "None", ",", "memory_len", "=", "20", ")", ":", "\n", "        ", "self", ".", "input_size", "=", "input_size", "\n", "self", ".", "output_size", "=", "output_size", "\n", "self", ".", "model_name", "=", "model_name", "\n", "self", ".", "mf", "=", "model_func", "\n", "self", ".", "pre_out", "=", "None", "\n", "self", ".", "m", "=", "None", "\n", "self", ".", "sd", "=", "None", "\n", "self", ".", "tm", "=", "None", "\n", "self", ".", "tsd", "=", "None", "\n", "self", ".", "limits", "=", "limits", "\n", "self", ".", "pre_grid", "=", "None", "\n", "self", ".", "surrogate", "=", "FNN", "(", "input_size", ",", "output_size", ")", "\n", "self", ".", "beta_0", "=", "0.5", "\n", "self", ".", "beta_1", "=", "0.1", "\n", "\n", "self", ".", "memory_grid", "=", "[", "]", "\n", "self", ".", "memory_out", "=", "[", "]", "\n", "self", ".", "memory_len", "=", "memory_len", "\n", "self", ".", "weights", "=", "torch", ".", "Tensor", "(", "[", "np", ".", "exp", "(", "-", "self", ".", "beta_1", "*", "i", ")", "for", "i", "in", "range", "(", "memory_len", ")", "]", ")", "\n", "self", ".", "grid_record", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.cedricwangyu_nofas.None.FNN_surrogate_nested.Surrogate.limits": [[52, 65], ["torch.Tensor().tolist", "torch.Tensor().tolist", "torch.Tensor().tolist", "torch.Tensor().tolist", "torch.Tensor().tolist", "torch.Tensor().tolist", "torch.Tensor().tolist", "torch.Tensor().tolist", "torch.Tensor().tolist", "len", "print", "exit", "any", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "print", "exit", "any", "print", "exit", "len"], "methods", ["None"], ["", "@", "limits", ".", "setter", "\n", "def", "limits", "(", "self", ",", "limits", ")", ":", "\n", "        ", "limits", "=", "torch", ".", "Tensor", "(", "limits", ")", ".", "tolist", "(", ")", "\n", "if", "len", "(", "limits", ")", "!=", "self", ".", "input_size", ":", "\n", "            ", "print", "(", "\"Error: Invalid input size for limit. Abort.\"", ")", "\n", "exit", "(", "-", "1", ")", "\n", "", "elif", "any", "(", "len", "(", "item", ")", "!=", "2", "for", "item", "in", "limits", ")", ":", "\n", "            ", "print", "(", "\"Error: Limits should be two bounds. Abort.\"", ")", "\n", "exit", "(", "-", "1", ")", "\n", "", "elif", "any", "(", "item", "[", "0", "]", ">", "item", "[", "1", "]", "for", "item", "in", "limits", ")", ":", "\n", "            ", "print", "(", "\"Error: Upper bound should not be smaller than lower bound. Abort.\"", ")", "\n", "exit", "(", "-", "1", ")", "\n", "", "self", ".", "__limits", "=", "limits", "\n", "\n"]], "home.repos.pwc.inspect_result.cedricwangyu_nofas.None.FNN_surrogate_nested.Surrogate.pre_grid": [[70, 89], ["os.path.exists", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "FNN_surrogate_nested.Surrogate.mf", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "FNN_surrogate_nested.Surrogate.__pre_grid.clone", "numpy.load", "print", "print", "print"], "methods", ["None"], ["", "@", "pre_grid", ".", "setter", "\n", "def", "pre_grid", "(", "self", ",", "pre_grid", ")", ":", "\n", "        ", "if", "pre_grid", "is", "None", ":", "\n", "            ", "if", "path", ".", "exists", "(", "self", ".", "model_name", "+", "'.npz'", ")", ":", "\n", "                ", "container", "=", "np", ".", "load", "(", "self", ".", "model_name", "+", "'.npz'", ")", "\n", "if", "'pre_grid'", "in", "container", ":", "\n", "                    ", "self", ".", "pre_grid", "=", "container", "[", "'pre_grid'", "]", "\n", "print", "(", "\"Success: Pre-Grid found.\"", ")", "\n", "", "", "else", ":", "\n", "                ", "print", "(", "\"Warning: \"", "+", "self", ".", "model_name", "+", "\".npz does not found, please generate pre-grid.\"", ")", "\n", "print", "(", "\"Suggestion: Use Surrogate.gen_grid(input_limits=None, grid_num=5, store=True)\"", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "__pre_grid", "=", "torch", ".", "Tensor", "(", "pre_grid", ")", "\n", "self", ".", "m", "=", "torch", ".", "mean", "(", "self", ".", "pre_grid", ",", "0", ")", "\n", "self", ".", "sd", "=", "torch", ".", "std", "(", "self", ".", "pre_grid", ",", "0", ")", "\n", "self", ".", "pre_out", "=", "self", ".", "mf", "(", "self", ".", "pre_grid", ")", "\n", "self", ".", "tm", "=", "torch", ".", "mean", "(", "self", ".", "pre_out", ",", "0", ")", "\n", "self", ".", "tsd", "=", "torch", ".", "std", "(", "self", ".", "pre_out", ",", "0", ")", "\n", "self", ".", "grid_record", "=", "self", ".", "__pre_grid", ".", "clone", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cedricwangyu_nofas.None.FNN_surrogate_nested.Surrogate.gen_grid": [[90, 104], ["torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "print", "meshpoints.append", "FNN_surrogate_nested.Surrogate.pre_grid.clone", "FNN_surrogate_nested.Surrogate.surrogate_save", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "item.reshape", "len"], "methods", ["home.repos.pwc.inspect_result.cedricwangyu_nofas.None.FNN_surrogate_nested.Surrogate.surrogate_save"], ["", "", "def", "gen_grid", "(", "self", ",", "input_limits", "=", "None", ",", "gridnum", "=", "4", ",", "store", "=", "True", ")", ":", "\n", "        ", "meshpoints", "=", "[", "]", "\n", "if", "input_limits", "is", "not", "None", ":", "\n", "            ", "self", ".", "limits", "=", "input_limits", "\n", "print", "(", "\"Warning: Input limits recorded in surrogate.\"", ")", "\n", "\n", "", "for", "lim", "in", "self", ".", "limits", ":", "meshpoints", ".", "append", "(", "torch", ".", "linspace", "(", "lim", "[", "0", "]", ",", "lim", "[", "1", "]", ",", "steps", "=", "gridnum", ")", ")", "\n", "grid", "=", "torch", ".", "meshgrid", "(", "meshpoints", ")", "\n", "grid", "=", "torch", ".", "cat", "(", "[", "item", ".", "reshape", "(", "gridnum", "**", "len", "(", "self", ".", "limits", ")", ",", "1", ")", "for", "item", "in", "grid", "]", ",", "1", ")", "\n", "if", "store", ":", "\n", "            ", "self", ".", "pre_grid", "=", "grid", "\n", "self", ".", "grid_record", "=", "self", ".", "pre_grid", ".", "clone", "(", ")", "\n", "self", ".", "surrogate_save", "(", ")", "\n", "", "return", "grid", "\n", "\n"]], "home.repos.pwc.inspect_result.cedricwangyu_nofas.None.FNN_surrogate_nested.Surrogate.surrogate_save": [[105, 109], ["torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "numpy.savez", "FNN_surrogate_nested.Surrogate.surrogate.state_dict"], "methods", ["None"], ["", "def", "surrogate_save", "(", "self", ")", ":", "\n", "        ", "torch", ".", "save", "(", "self", ".", "surrogate", ".", "state_dict", "(", ")", ",", "self", ".", "model_name", "+", "'.sur'", ")", "\n", "np", ".", "savez", "(", "self", ".", "model_name", ",", "limits", "=", "self", ".", "limits", ",", "pre_grid", "=", "self", ".", "pre_grid", ",", "\n", "grid_record", "=", "self", ".", "grid_record", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cedricwangyu_nofas.None.FNN_surrogate_nested.Surrogate.surrogate_load": [[110, 119], ["FNN_surrogate_nested.Surrogate.surrogate.load_state_dict", "numpy.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "setattr", "print", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "print"], "methods", ["None"], ["", "def", "surrogate_load", "(", "self", ")", ":", "\n", "        ", "self", ".", "surrogate", ".", "load_state_dict", "(", "torch", ".", "load", "(", "self", ".", "model_name", "+", "'.sur'", ")", ")", "\n", "container", "=", "np", ".", "load", "(", "self", ".", "model_name", "+", "'.npz'", ")", "\n", "for", "key", "in", "container", ":", "\n", "            ", "try", ":", "\n", "                ", "setattr", "(", "self", ",", "key", ",", "torch", ".", "Tensor", "(", "container", "[", "key", "]", ")", ")", "\n", "print", "(", "\"Success: [\"", "+", "key", "+", "\"] loaded.\"", ")", "\n", "", "except", ":", "\n", "                ", "print", "(", "\"Warning: [\"", "+", "key", "+", "\"] is not a surrogate variables.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cedricwangyu_nofas.None.FNN_surrogate_nested.Surrogate.pre_train": [[120, 145], ["torch.optim.RMSprop", "torch.optim.RMSprop", "torch.optim.RMSprop", "torch.optim.RMSprop", "torch.optim.RMSprop", "torch.optim.RMSprop", "torch.optim.RMSprop", "torch.optim.RMSprop", "torch.optim.RMSprop", "torch.optim.lr_scheduler.ExponentialLR", "torch.optim.lr_scheduler.ExponentialLR", "torch.optim.lr_scheduler.ExponentialLR", "torch.optim.lr_scheduler.ExponentialLR", "torch.optim.lr_scheduler.ExponentialLR", "torch.optim.lr_scheduler.ExponentialLR", "torch.optim.lr_scheduler.ExponentialLR", "torch.optim.lr_scheduler.ExponentialLR", "torch.optim.lr_scheduler.ExponentialLR", "range", "FNN_surrogate_nested.Surrogate.surrogate.parameters", "FNN_surrogate_nested.Surrogate.surrogate.train", "torch.optim.lr_scheduler.ExponentialLR.step", "torch.optim.lr_scheduler.ExponentialLR.step", "torch.optim.lr_scheduler.ExponentialLR.step", "FNN_surrogate_nested.Surrogate.surrogate", "torch.optim.RMSprop.zero_grad", "torch.optim.RMSprop.zero_grad", "torch.optim.RMSprop.zero_grad", "loss.backward", "torch.optim.RMSprop.step", "torch.optim.RMSprop.step", "torch.optim.RMSprop.step", "FNN_surrogate_nested.Surrogate.surrogate_save", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "FNN_surrogate_nested.Surrogate.size", "FNN_surrogate_nested.Surrogate.surrogate.parameters", "print", "print", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs"], "methods", ["home.repos.pwc.inspect_result.cedricwangyu_nofas.None.maf.train", "home.repos.pwc.inspect_result.cedricwangyu_nofas.None.FNN_surrogate_nested.Surrogate.surrogate_save"], ["", "", "", "def", "pre_train", "(", "self", ",", "max_iters", ",", "lr", ",", "lr_exp", ",", "record_interval", ",", "store", "=", "True", ",", "reg", "=", "False", ")", ":", "\n", "        ", "grid", "=", "(", "self", ".", "pre_grid", "-", "self", ".", "m", ")", "/", "self", ".", "sd", "\n", "out", "=", "(", "self", ".", "pre_out", "-", "self", ".", "tm", ")", "/", "self", ".", "tsd", "\n", "optimizer", "=", "torch", ".", "optim", ".", "RMSprop", "(", "self", ".", "surrogate", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ")", "\n", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "ExponentialLR", "(", "optimizer", ",", "lr_exp", ")", "\n", "for", "i", "in", "range", "(", "max_iters", ")", ":", "\n", "            ", "self", ".", "surrogate", ".", "train", "(", ")", "\n", "scheduler", ".", "step", "(", ")", "\n", "y", "=", "self", ".", "surrogate", "(", "grid", ")", "\n", "loss", "=", "torch", ".", "sum", "(", "(", "y", "-", "out", ")", "**", "2", ")", "/", "y", ".", "size", "(", "0", ")", "\n", "if", "reg", ":", "\n", "                ", "reg_loss", "=", "0", "\n", "for", "param", "in", "self", ".", "surrogate", ".", "parameters", "(", ")", ":", "\n", "                    ", "reg_loss", "+=", "torch", ".", "abs", "(", "param", ")", ".", "sum", "(", ")", "*", "0.0001", "\n", "", "loss", "+=", "reg_loss", "\n", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "if", "i", "%", "record_interval", "==", "0", ":", "\n", "                ", "if", "reg", ":", "\n", "                    ", "print", "(", "'iter {}\\t loss {}\\t reg_loss {}'", ".", "format", "(", "i", ",", "loss", ",", "reg_loss", ")", ")", "\n", "", "else", ":", "\n", "                    ", "print", "(", "'iter {}   loss {}'", ".", "format", "(", "i", ",", "loss", ")", ")", "\n", "", "", "", "if", "store", ":", "self", ".", "surrogate_save", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cedricwangyu_nofas.None.FNN_surrogate_nested.Surrogate.update": [[146, 187], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.any", "torch.any", "torch.any", "torch.any", "torch.any", "torch.any", "torch.any", "torch.any", "torch.any", "print", "print", "FNN_surrogate_nested.Surrogate.memory_grid.insert", "FNN_surrogate_nested.Surrogate.memory_out.insert", "torch.optim.RMSprop", "torch.optim.RMSprop", "torch.optim.RMSprop", "torch.optim.RMSprop", "torch.optim.RMSprop", "torch.optim.RMSprop", "torch.optim.RMSprop", "torch.optim.RMSprop", "torch.optim.RMSprop", "torch.optim.lr_scheduler.ExponentialLR", "torch.optim.lr_scheduler.ExponentialLR", "torch.optim.lr_scheduler.ExponentialLR", "torch.optim.lr_scheduler.ExponentialLR", "torch.optim.lr_scheduler.ExponentialLR", "torch.optim.lr_scheduler.ExponentialLR", "torch.optim.lr_scheduler.ExponentialLR", "torch.optim.lr_scheduler.ExponentialLR", "torch.optim.lr_scheduler.ExponentialLR", "range", "print", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "len", "FNN_surrogate_nested.Surrogate.memory_grid.pop", "FNN_surrogate_nested.Surrogate.memory_out.pop", "FNN_surrogate_nested.Surrogate.surrogate.parameters", "FNN_surrogate_nested.Surrogate.surrogate.train", "torch.optim.lr_scheduler.ExponentialLR.step", "torch.optim.lr_scheduler.ExponentialLR.step", "torch.optim.lr_scheduler.ExponentialLR.step", "FNN_surrogate_nested.Surrogate.surrogate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.optim.RMSprop.zero_grad", "torch.optim.RMSprop.zero_grad", "torch.optim.RMSprop.zero_grad", "loss.backward", "torch.optim.RMSprop.step", "torch.optim.RMSprop.step", "torch.optim.RMSprop.step", "FNN_surrogate_nested.Surrogate.surrogate_save", "torch.normal", "torch.normal", "torch.normal", "torch.normal", "torch.normal", "torch.normal", "torch.normal", "torch.normal", "torch.normal", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "FNN_surrogate_nested.Surrogate.surrogate.parameters", "print", "FNN_surrogate_nested.Surrogate.mf", "list", "list", "item.mean", "FNN_surrogate_nested.Surrogate.weights[].sum", "tuple", "FNN_surrogate_nested.Surrogate.pre_grid.size", "item.size", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "p.size", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "len", "len"], "methods", ["home.repos.pwc.inspect_result.cedricwangyu_nofas.None.maf.train", "home.repos.pwc.inspect_result.cedricwangyu_nofas.None.FNN_surrogate_nested.Surrogate.surrogate_save"], ["", "def", "update", "(", "self", ",", "x", ",", "max_iters", "=", "10000", ",", "lr", "=", "0.01", ",", "lr_exp", "=", "0.999", ",", "record_interval", "=", "500", ",", "store", "=", "False", ",", "tol", "=", "1e-5", ",", "reg", "=", "False", ")", ":", "\n", "        ", "self", ".", "grid_record", "=", "torch", ".", "cat", "(", "(", "self", ".", "grid_record", ",", "x", ")", ",", "dim", "=", "0", ")", "\n", "s", "=", "torch", ".", "std", "(", "x", ",", "dim", "=", "0", ")", "\n", "thresh", "=", "0.1", "\n", "if", "torch", ".", "any", "(", "s", "<", "thresh", ")", ":", "\n", "            ", "p", "=", "x", "[", ":", ",", "s", "<", "thresh", "]", "\n", "x", "[", ":", ",", "s", "<", "thresh", "]", "+=", "torch", ".", "normal", "(", "0", ",", "1", ",", "size", "=", "tuple", "(", "p", ".", "size", "(", ")", ")", ")", "*", "thresh", "\n", "", "print", "(", "\"Std: \"", ",", "s", ")", "\n", "print", "(", "\"Std after: \"", ",", "torch", ".", "std", "(", "x", ",", "dim", "=", "0", ")", ")", "\n", "if", "len", "(", "self", ".", "memory_grid", ")", ">=", "self", ".", "memory_len", ":", "\n", "            ", "self", ".", "memory_grid", ".", "pop", "(", ")", "\n", "self", ".", "memory_out", ".", "pop", "(", ")", "\n", "", "self", ".", "memory_grid", ".", "insert", "(", "0", ",", "(", "x", "-", "self", ".", "m", ")", "/", "self", ".", "sd", ")", "\n", "self", ".", "memory_out", ".", "insert", "(", "0", ",", "(", "self", ".", "mf", "(", "x", ")", "-", "self", ".", "tm", ")", "/", "self", ".", "tsd", ")", "\n", "sizes", "=", "[", "list", "(", "self", ".", "pre_grid", ".", "size", "(", ")", ")", "[", "0", "]", "]", "+", "[", "list", "(", "item", ".", "size", "(", ")", ")", "[", "0", "]", "for", "item", "in", "self", ".", "memory_grid", "]", "\n", "# print(sizes)", "\n", "optimizer", "=", "torch", ".", "optim", ".", "RMSprop", "(", "self", ".", "surrogate", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ")", "\n", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "ExponentialLR", "(", "optimizer", ",", "lr_exp", ")", "\n", "for", "i", "in", "range", "(", "max_iters", ")", ":", "\n", "            ", "self", ".", "surrogate", ".", "train", "(", ")", "\n", "scheduler", ".", "step", "(", ")", "\n", "y", "=", "self", ".", "surrogate", "(", "torch", ".", "cat", "(", "(", "(", "self", ".", "pre_grid", "-", "self", ".", "m", ")", "/", "self", ".", "sd", ",", "*", "self", ".", "memory_grid", ")", ",", "dim", "=", "0", ")", ")", "\n", "out", "=", "torch", ".", "cat", "(", "(", "(", "self", ".", "pre_out", "-", "self", ".", "tm", ")", "/", "self", ".", "tsd", ",", "*", "self", ".", "memory_out", ")", ",", "dim", "=", "0", ")", "\n", "raw_loss", "=", "torch", ".", "stack", "(", "[", "item", ".", "mean", "(", ")", "for", "item", "in", "torch", ".", "split", "(", "torch", ".", "sum", "(", "(", "y", "-", "out", ")", "**", "2", ",", "dim", "=", "1", ")", ",", "sizes", ")", "]", ")", "\n", "loss", "=", "raw_loss", "[", "0", "]", "*", "2", "*", "self", ".", "beta_0", "*", "self", ".", "weights", "[", ":", "len", "(", "self", ".", "memory_grid", ")", "]", ".", "sum", "(", ")", "+", "torch", ".", "sum", "(", "\n", "raw_loss", "[", "1", ":", "]", "*", "self", ".", "weights", "[", ":", "len", "(", "self", ".", "memory_grid", ")", "]", ")", "*", "(", "1", "-", "self", ".", "beta_0", ")", "*", "2", "\n", "\n", "# loss = raw_loss[0] * self.weights[:len(self.memory_grid)].sum() + torch.sum(", "\n", "#     raw_loss[1:] * self.weights[:len(self.memory_grid)])", "\n", "if", "reg", ":", "\n", "                ", "for", "param", "in", "self", ".", "surrogate", ".", "parameters", "(", ")", ":", "\n", "                    ", "loss", "+=", "torch", ".", "abs", "(", "param", ")", ".", "sum", "(", ")", "*", "0.1", "\n", "", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "if", "i", "%", "record_interval", "==", "0", ":", "\n", "                ", "print", "(", "'Updating: {}\\t loss {}'", ".", "format", "(", "i", ",", "loss", ")", ",", "end", "=", "'\\r'", ")", "\n", "", "if", "loss", "<", "tol", "**", "2", ":", "break", "\n", "", "print", "(", "'                                                        '", ",", "end", "=", "'\\r'", ")", "\n", "if", "store", ":", "self", ".", "surrogate_save", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cedricwangyu_nofas.None.FNN_surrogate_nested.Surrogate.forward": [[188, 190], ["FNN_surrogate_nested.Surrogate.surrogate"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "surrogate", "(", "(", "x", "-", "self", ".", "m", ")", "/", "self", ".", "sd", ")", "*", "self", ".", "tsd", "+", "self", ".", "tm", "\n", "\n"]], "home.repos.pwc.inspect_result.cedricwangyu_nofas.None.mh.MH.__init__": [[23, 31], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "logden", "=", "None", ",", "x0", "=", "None", ",", "std", "=", "None", ")", ":", "\n", "        ", "self", ".", "logden", "=", "logden", "\n", "self", ".", "name", "=", "None", "\n", "self", ".", "x0", "=", "x0", "\n", "self", ".", "std", "=", "std", "\n", "self", ".", "max_sample", "=", "10000", "\n", "self", ".", "burn_in", "=", "0.1", "\n", "self", ".", "thinning", "=", "1000", "\n", "\n"]], "home.repos.pwc.inspect_result.cedricwangyu_nofas.None.mh.MH.jump_dist": [[32, 35], ["torch.Normal", "torch.Normal", "torch.Normal", "torch.Normal", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "mh.MH.std.repeat", "mh.MH.x0.size", "mh.MH.x0.size", "mh.MH.x0.size"], "methods", ["None"], ["", "@", "property", "\n", "def", "jump_dist", "(", "self", ")", ":", "\n", "        ", "return", "D", ".", "Normal", "(", "torch", ".", "zeros", "(", "self", ".", "x0", ".", "size", "(", "0", ")", ",", "self", ".", "x0", ".", "size", "(", "1", ")", ")", ",", "self", ".", "std", ".", "repeat", "(", "self", ".", "x0", ".", "size", "(", "0", ")", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cedricwangyu_nofas.None.mh.MH.judge_dist": [[36, 39], ["torch.Uniform", "torch.Uniform", "torch.Uniform", "torch.Uniform", "torch.tensor().repeat", "torch.tensor().repeat", "torch.tensor().repeat", "torch.tensor().repeat", "torch.tensor().repeat", "torch.tensor().repeat", "torch.tensor().repeat", "torch.tensor().repeat", "torch.tensor().repeat", "torch.tensor().repeat", "torch.tensor().repeat", "torch.tensor().repeat", "torch.tensor().repeat", "torch.tensor().repeat", "torch.tensor().repeat", "torch.tensor().repeat", "torch.tensor().repeat", "torch.tensor().repeat", "torch.tensor().repeat", "torch.tensor().repeat", "torch.tensor().repeat", "torch.tensor().repeat", "torch.tensor().repeat", "torch.tensor().repeat", "torch.tensor().repeat", "torch.tensor().repeat", "torch.tensor().repeat", "torch.tensor().repeat", "torch.tensor().repeat", "torch.tensor().repeat", "torch.tensor().repeat", "torch.tensor().repeat", "mh.MH.x0.size", "mh.MH.x0.size", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["None"], ["", "@", "property", "\n", "def", "judge_dist", "(", "self", ")", ":", "\n", "        ", "return", "D", ".", "Uniform", "(", "torch", ".", "tensor", "(", "[", "0.0", "]", ")", ".", "repeat", "(", "self", ".", "x0", ".", "size", "(", "0", ")", ",", "1", ")", ",", "torch", ".", "tensor", "(", "[", "1.0", "]", ")", ".", "repeat", "(", "self", ".", "x0", ".", "size", "(", "0", ")", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cedricwangyu_nofas.None.mh.MH.sample": [[40, 57], ["mh.MH.logden", "tqdm.trange", "print", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "mh.MH.x0.clone", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "zip", "memory.append", "mh.MH.x0.size", "mh.MH.jump_dist.sample", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "mh.MH.logden", "x_curr.clone", "mh.MH.judge_dist.sample", "judge_res.reshape", "judge_res.reshape", "judge_res.reshape", "judge_res.reshape"], "methods", ["home.repos.pwc.inspect_result.cedricwangyu_nofas.None.mh.MH.sample", "home.repos.pwc.inspect_result.cedricwangyu_nofas.None.mh.MH.sample"], ["", "def", "sample", "(", "self", ")", ":", "\n", "        ", "memory", ",", "x_curr", ",", "total", ",", "accept", "=", "[", "]", ",", "self", ".", "x0", ".", "clone", "(", ")", ",", "0", ",", "torch", ".", "zeros", "(", "self", ".", "x0", ".", "size", "(", "0", ")", ",", "1", ")", "\n", "logp", "=", "self", ".", "logden", "(", "x_curr", ")", "\n", "for", "_", "in", "tqdm", ".", "trange", "(", "self", ".", "max_sample", ")", ":", "\n", "            ", "for", "noise", ",", "judge", "in", "zip", "(", "self", ".", "jump_dist", ".", "sample", "(", "[", "self", ".", "thinning", "]", ")", ",", "\n", "torch", ".", "log", "(", "self", ".", "judge_dist", ".", "sample", "(", "[", "self", ".", "thinning", "]", ")", ")", ")", ":", "\n", "                ", "x_prop", ",", "total", "=", "noise", "+", "x_curr", ",", "total", "+", "1", "\n", "logq", "=", "self", ".", "logden", "(", "x_prop", ")", "\n", "# judge_res = (torch.sum(torch.abs(x_prop) > 4, dim=1, keepdim=True) > 0) + (", "\n", "#             judge > (logq - logp)) == False", "\n", "judge_res", "=", "judge", "<", "logq", "-", "logp", "\n", "x_curr", "[", "judge_res", ".", "reshape", "(", "-", "1", ")", ",", ":", "]", "=", "x_prop", "[", "judge_res", ".", "reshape", "(", "-", "1", ")", ",", ":", "]", "\n", "logp", "[", "judge_res", ".", "reshape", "(", "-", "1", ")", ",", ":", "]", "=", "logq", "[", "judge_res", ".", "reshape", "(", "-", "1", ")", ",", ":", "]", "\n", "accept", "+=", "judge_res", "\n", "", "memory", ".", "append", "(", "x_curr", ".", "clone", "(", ")", ")", "\n", "", "print", "(", "\"Total Sampled: \"", ",", "total", ",", "\"; Accepted: \"", ",", "accept", ",", "\"; Accept Rate: \"", ",", "accept", "/", "total", ")", "\n", "return", "torch", ".", "stack", "(", "memory", ",", "dim", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cedricwangyu_nofas.None.mh.MH.post_process": [[58, 68], ["print", "print", "range", "len", "len", "len", "acfs.append", "numpy.array", "statsmodels.tsa.stattools.acf", "int", "len"], "methods", ["None"], ["", "def", "post_process", "(", "self", ",", "m", ")", ":", "\n", "        ", "print", "(", "\"Original Size: \"", ",", "len", "(", "m", ")", ")", "\n", "m", "=", "m", "[", "int", "(", "len", "(", "m", ")", "*", "self", ".", "burn_in", ")", ":", ",", ":", "]", "\n", "# m = m[0:len(m):int(1 / self.thinning), :]", "\n", "# print(\"Burn_in: \", self.burn_in, \"; Thinning: \", self.thinning)", "\n", "print", "(", "\"After: \"", ",", "len", "(", "m", ")", ")", "\n", "acfs", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "len", "(", "m", "[", "0", "]", ")", ")", ":", "\n", "            ", "acfs", ".", "append", "(", "acf", "(", "m", "[", ":", ",", "j", "]", ",", "unbiased", "=", "True", ",", "nlags", "=", "20", ")", ")", "\n", "", "return", "m", ",", "np", ".", "array", "(", "acfs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cedricwangyu_nofas.None.mh.MH.gelman_rubin": [[69, 77], ["torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "x.size", "x.size", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.var", "torch.var", "torch.var", "torch.var", "torch.var", "torch.var", "torch.var", "torch.var", "torch.var", "torch.var", "torch.var", "torch.var", "torch.var", "torch.var", "torch.var", "torch.var", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "range", "x.size"], "methods", ["None"], ["", "def", "gelman_rubin", "(", "self", ",", "x", ")", ":", "\n", "        ", "M", ",", "N", "=", "x", ".", "size", "(", "0", ")", ",", "x", ".", "size", "(", "1", ")", "\n", "mu_m", "=", "torch", ".", "mean", "(", "x", ",", "dim", "=", "1", ")", "\n", "mu", "=", "torch", ".", "mean", "(", "mu_m", ",", "dim", "=", "0", ")", "\n", "B", "=", "N", "/", "(", "M", "-", "1", ")", "*", "torch", ".", "sum", "(", "(", "mu_m", "-", "mu", ")", "**", "2", ",", "dim", "=", "0", ")", "\n", "W", "=", "torch", ".", "mean", "(", "torch", ".", "var", "(", "x", ",", "dim", "=", "1", ")", ",", "dim", "=", "0", ")", "\n", "R", "=", "torch", ".", "sqrt", "(", "(", "(", "N", "-", "1", ")", "/", "N", "*", "W", "+", "(", "M", "+", "1", ")", "/", "M", "/", "N", "*", "B", ")", "/", "W", ")", "\n", "return", "R", ",", "torch", ".", "cat", "(", "[", "x", "[", "i", "]", "for", "i", "in", "range", "(", "x", ".", "size", "(", "0", ")", ")", "]", ",", "dim", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cedricwangyu_nofas.None.mh.MH_RC": [[79, 110], ["random.randint", "print", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "numpy.loadtxt", "circuitModels.rcModel", "numpy.loadtxt", "circuitModels.rcModel.surrogate.surrogate_load", "mh.MH", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "range", "circuitModels.rcModel.den_t", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "mh.MH.sample", "MH.x0.size", "numpy.savetxt", "numpy.loadtxt", "mh.MH.post_process", "numpy.savetxt", "numpy.savetxt", "str", "os.path.isdir", "os.makedirs", "raw[].detach().numpy", "raw[].detach"], "function", ["home.repos.pwc.inspect_result.cedricwangyu_nofas.None.FNN_surrogate_nested.Surrogate.surrogate_load", "home.repos.pwc.inspect_result.cedricwangyu_nofas.None.highdimModels.Highdim.den_t", "home.repos.pwc.inspect_result.cedricwangyu_nofas.None.mh.MH.sample", "home.repos.pwc.inspect_result.cedricwangyu_nofas.None.temporary.post_process"], ["", "", "def", "MH_RC", "(", ")", ":", "\n", "    ", "seed", "=", "random", ".", "randint", "(", "1", ",", "10", "**", "9", ")", "\n", "print", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "\n", "cycleTime", "=", "1.07", "\n", "totalCycles", "=", "10", "\n", "dataname", "=", "'data_rc.txt'", "\n", "forcing", "=", "np", ".", "loadtxt", "(", "'inlet.flow'", ")", "\n", "rc", "=", "rcModel", "(", "cycleTime", ",", "totalCycles", ",", "forcing", ")", "\n", "rc", ".", "data", "=", "np", ".", "loadtxt", "(", "dataname", ")", "\n", "rc", ".", "surrogate", ".", "surrogate_load", "(", ")", "\n", "\n", "mh", "=", "MH", "(", ")", "\n", "mh", ".", "max_sample", "=", "1000", "\n", "mh", ".", "burn_in", "=", "0.1", "\n", "mh", ".", "thinning", "=", "1000", "\n", "mh", ".", "logden", "=", "lambda", "x", ":", "rc", ".", "den_t", "(", "x", ",", "surrogate", "=", "True", ")", "\n", "\n", "mh", ".", "x0", "=", "torch", ".", "Tensor", "(", "[", "[", "0.0", ",", "0.0", "]", ",", "\n", "[", "-", "4.0", ",", "-", "4.0", "]", "]", ")", "\n", "mh", ".", "std", "=", "torch", ".", "Tensor", "(", "[", "0.01", ",", "0.1", "]", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "raw", "=", "mh", ".", "sample", "(", ")", "\n", "for", "i", "in", "range", "(", "mh", ".", "x0", ".", "size", "(", "0", ")", ")", ":", "\n", "        ", "directory", "=", "\"results/RC_\"", "+", "str", "(", "i", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "directory", ")", ":", "os", ".", "makedirs", "(", "directory", ")", "\n", "np", ".", "savetxt", "(", "directory", "+", "'/raw_samples.txt'", ",", "raw", "[", ":", ",", "i", ",", ":", "]", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", "\n", "m", "=", "np", ".", "loadtxt", "(", "directory", "+", "'/raw_samples.txt'", ")", "\n", "m", ",", "acfs", "=", "mh", ".", "post_process", "(", "m", ")", "\n", "np", ".", "savetxt", "(", "directory", "+", "'/samples.txt'", ",", "m", ")", "\n", "np", ".", "savetxt", "(", "directory", "+", "'/acfs.txt'", ",", "acfs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cedricwangyu_nofas.None.mh.MH_RCR": [[112, 143], ["random.randint", "print", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "numpy.loadtxt", "circuitModels.rcrModel", "numpy.loadtxt", "circuitModels.rcrModel.surrogate.surrogate_load", "mh.MH", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "range", "circuitModels.rcrModel.den_t", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "mh.MH.sample", "MH.x0.size", "numpy.savetxt", "numpy.loadtxt", "mh.MH.post_process", "numpy.savetxt", "numpy.savetxt", "str", "os.path.isdir", "os.makedirs", "raw[].detach().numpy", "raw[].detach"], "function", ["home.repos.pwc.inspect_result.cedricwangyu_nofas.None.FNN_surrogate_nested.Surrogate.surrogate_load", "home.repos.pwc.inspect_result.cedricwangyu_nofas.None.highdimModels.Highdim.den_t", "home.repos.pwc.inspect_result.cedricwangyu_nofas.None.mh.MH.sample", "home.repos.pwc.inspect_result.cedricwangyu_nofas.None.temporary.post_process"], ["", "", "def", "MH_RCR", "(", ")", ":", "\n", "    ", "seed", "=", "random", ".", "randint", "(", "1", ",", "10", "**", "9", ")", "\n", "print", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "\n", "cycleTime", "=", "1.07", "\n", "totalCycles", "=", "10", "\n", "dataname", "=", "'data_rcr.txt'", "\n", "forcing", "=", "np", ".", "loadtxt", "(", "'inlet.flow'", ")", "\n", "rc", "=", "rcrModel", "(", "cycleTime", ",", "totalCycles", ",", "forcing", ")", "\n", "rc", ".", "data", "=", "np", ".", "loadtxt", "(", "dataname", ")", "\n", "rc", ".", "surrogate", ".", "surrogate_load", "(", ")", "\n", "\n", "mh", "=", "MH", "(", ")", "\n", "mh", ".", "max_sample", "=", "1000", "\n", "mh", ".", "burn_in", "=", "0.1", "\n", "mh", ".", "thinning", "=", "2000", "\n", "mh", ".", "logden", "=", "lambda", "x", ":", "rc", ".", "den_t", "(", "x", ",", "surrogate", "=", "True", ")", "\n", "\n", "mh", ".", "x0", "=", "torch", ".", "Tensor", "(", "[", "[", "-", "4.0", ",", "-", "4.0", ",", "-", "4.0", "]", ",", "\n", "[", "0.0", ",", "0.0", ",", "0.0", "]", "]", ")", "\n", "mh", ".", "std", "=", "torch", ".", "Tensor", "(", "[", "0.025", ",", "0.025", ",", "0.025", "]", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "raw", "=", "mh", ".", "sample", "(", ")", "\n", "for", "i", "in", "range", "(", "mh", ".", "x0", ".", "size", "(", "0", ")", ")", ":", "\n", "        ", "directory", "=", "\"results/RCR_\"", "+", "str", "(", "i", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "directory", ")", ":", "os", ".", "makedirs", "(", "directory", ")", "\n", "np", ".", "savetxt", "(", "directory", "+", "'/raw_samples.txt'", ",", "raw", "[", ":", ",", "i", ",", ":", "]", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", "\n", "m", "=", "np", ".", "loadtxt", "(", "directory", "+", "'/raw_samples.txt'", ")", "\n", "m", ",", "acfs", "=", "mh", ".", "post_process", "(", "m", ")", "\n", "np", ".", "savetxt", "(", "directory", "+", "'/samples.txt'", ",", "m", ")", "\n", "np", ".", "savetxt", "(", "directory", "+", "'/acfs.txt'", ",", "acfs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cedricwangyu_nofas.None.mh.MH_Trivial": [[145, 173], ["random.randint", "print", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "TrivialModels.circuitTrivial", "numpy.loadtxt", "mh.MH", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "range", "TrivialModels.circuitTrivial.den_t", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "mh.MH.sample", "MH.x0.size", "numpy.savetxt", "numpy.loadtxt", "mh.MH.post_process", "numpy.savetxt", "numpy.savetxt", "str", "os.path.isdir", "os.makedirs", "raw[].detach().numpy", "raw[].detach"], "function", ["home.repos.pwc.inspect_result.cedricwangyu_nofas.None.highdimModels.Highdim.den_t", "home.repos.pwc.inspect_result.cedricwangyu_nofas.None.mh.MH.sample", "home.repos.pwc.inspect_result.cedricwangyu_nofas.None.temporary.post_process"], ["", "", "def", "MH_Trivial", "(", "directory", ")", ":", "\n", "    ", "seed", "=", "random", ".", "randint", "(", "1", ",", "10", "**", "9", ")", "\n", "print", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "\n", "rt", "=", "circuitTrivial", "(", ")", "\n", "rt", ".", "stdRatio", "=", "0.05", "\n", "dataName", "=", "'data_trivial.txt'", "\n", "rt", ".", "data", "=", "np", ".", "loadtxt", "(", "dataName", ")", "\n", "\n", "mh", "=", "MH", "(", ")", "\n", "mh", ".", "max_sample", "=", "1000", "\n", "mh", ".", "burn_in", "=", "0.1", "\n", "mh", ".", "thinning", "=", "1000", "\n", "mh", ".", "logden", "=", "lambda", "x", ":", "rt", ".", "den_t", "(", "x", ",", "surrogate", "=", "False", ")", "\n", "\n", "mh", ".", "x0", "=", "torch", ".", "Tensor", "(", "[", "[", "5.5", ",", "5.5", "]", ",", "\n", "[", "0.0", ",", "0.0", "]", "]", ")", "\n", "mh", ".", "std", "=", "torch", ".", "Tensor", "(", "[", "0.01", ",", "0.01", "]", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "raw", "=", "mh", ".", "sample", "(", ")", "\n", "for", "i", "in", "range", "(", "mh", ".", "x0", ".", "size", "(", "0", ")", ")", ":", "\n", "        ", "directory", "=", "\"results/Trivial_\"", "+", "str", "(", "i", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "directory", ")", ":", "os", ".", "makedirs", "(", "directory", ")", "\n", "np", ".", "savetxt", "(", "directory", "+", "'/raw_samples.txt'", ",", "raw", "[", ":", ",", "i", ",", ":", "]", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", "\n", "m", "=", "np", ".", "loadtxt", "(", "directory", "+", "'/raw_samples.txt'", ")", "\n", "m", ",", "acfs", "=", "mh", ".", "post_process", "(", "m", ")", "\n", "np", ".", "savetxt", "(", "directory", "+", "'/samples.txt'", ",", "m", ")", "\n", "np", ".", "savetxt", "(", "directory", "+", "'/acfs.txt'", ",", "acfs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cedricwangyu_nofas.None.mh.MH_Hidim": [[175, 200], ["random.randint", "print", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "highdimModels.Highdim", "numpy.loadtxt", "mh.MH", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "range", "highdimModels.Highdim.den_t", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "mh.MH.sample", "MH.x0.size", "numpy.savetxt", "numpy.loadtxt", "mh.MH.post_process", "numpy.savetxt", "numpy.savetxt", "str", "os.path.isdir", "os.makedirs", "raw[].detach().numpy", "raw[].detach"], "function", ["home.repos.pwc.inspect_result.cedricwangyu_nofas.None.highdimModels.Highdim.den_t", "home.repos.pwc.inspect_result.cedricwangyu_nofas.None.mh.MH.sample", "home.repos.pwc.inspect_result.cedricwangyu_nofas.None.temporary.post_process"], ["", "", "def", "MH_Hidim", "(", ")", ":", "\n", "    ", "seed", "=", "random", ".", "randint", "(", "1", ",", "10", "**", "9", ")", "\n", "print", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "\n", "hd", "=", "Highdim", "(", ")", "\n", "hd", ".", "data", "=", "np", ".", "loadtxt", "(", "'data_highdim.txt'", ")", "\n", "\n", "mh", "=", "MH", "(", ")", "\n", "mh", ".", "max_sample", "=", "1000", "\n", "mh", ".", "burn_in", "=", "0.1", "\n", "mh", ".", "thinning", "=", "100000", "\n", "mh", ".", "logden", "=", "lambda", "x", ":", "hd", ".", "den_t", "(", "x", ",", "surrogate", "=", "False", ")", "\n", "mh", ".", "x0", "=", "torch", ".", "Tensor", "(", "[", "[", "3.0", ",", "3.0", ",", "3.0", ",", "3.0", ",", "3.0", "]", ",", "\n", "[", "-", "3.0", ",", "-", "3.0", ",", "-", "3.0", ",", "-", "3.0", ",", "-", "3.0", "]", "]", ")", "\n", "mh", ".", "std", "=", "torch", ".", "Tensor", "(", "[", "0.03", ",", "0.03", ",", "0.03", ",", "0.03", ",", "0.03", "]", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "raw", "=", "mh", ".", "sample", "(", ")", "\n", "for", "i", "in", "range", "(", "mh", ".", "x0", ".", "size", "(", "0", ")", ")", ":", "\n", "        ", "directory", "=", "\"results/hidim_\"", "+", "str", "(", "i", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "directory", ")", ":", "os", ".", "makedirs", "(", "directory", ")", "\n", "np", ".", "savetxt", "(", "directory", "+", "'/raw_samples.txt'", ",", "raw", "[", ":", ",", "i", ",", ":", "]", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", "\n", "m", "=", "np", ".", "loadtxt", "(", "directory", "+", "'/raw_samples.txt'", ")", "\n", "m", ",", "acfs", "=", "mh", ".", "post_process", "(", "m", ")", "\n", "np", ".", "savetxt", "(", "directory", "+", "'/samples.txt'", ",", "m", ")", "\n", "np", ".", "savetxt", "(", "directory", "+", "'/acfs.txt'", ",", "acfs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cedricwangyu_nofas.None.TrivialModels.circuitTrivial.__init__": [[7, 15], ["torch.Tensor", "torch.Tensor", "FNN_surrogate_nested.Surrogate"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "# Init parameters", "\n", "        ", "self", ".", "defParam", "=", "torch", ".", "Tensor", "(", "[", "[", "3.0", ",", "5.0", "]", "]", ")", "\n", "self", ".", "RM", "=", "torch", ".", "Tensor", "(", "[", "[", "1.0", ",", "1.0", "]", ",", "\n", "[", "1.0", ",", "-", "1.0", "]", "]", ")", "\n", "self", ".", "stdRatio", "=", "0.05", "\n", "self", ".", "surrogate", "=", "Surrogate", "(", "\"Trivial\"", ",", "self", ".", "solve_t", ",", "2", ",", "2", ",", "[", "[", "0", ",", "6", "]", ",", "[", "0", ",", "6", "]", "]", ",", "20", ")", "\n", "self", ".", "data", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.cedricwangyu_nofas.None.TrivialModels.circuitTrivial.genDataFile": [[16, 23], ["print", "TrivialModels.circuitTrivial.data.t().detach().numpy", "TrivialModels.circuitTrivial.solve_t", "numpy.savetxt", "torch.normal", "TrivialModels.circuitTrivial.data.t().detach", "torch.abs", "TrivialModels.circuitTrivial.data.t"], "methods", ["home.repos.pwc.inspect_result.cedricwangyu_nofas.None.highdimModels.Highdim.solve_t"], ["", "def", "genDataFile", "(", "self", ",", "dataSize", "=", "50", ",", "dataFileName", "=", "\"source/data/data_trivial.txt\"", ",", "store", "=", "True", ")", ":", "\n", "        ", "def_out", "=", "self", ".", "solve_t", "(", "self", ".", "defParam", ")", "[", "0", "]", "\n", "print", "(", "def_out", ")", "\n", "self", ".", "data", "=", "def_out", "+", "self", ".", "stdRatio", "*", "torch", ".", "abs", "(", "def_out", ")", "*", "torch", ".", "normal", "(", "0", ",", "1", ",", "size", "=", "(", "dataSize", ",", "2", ")", ")", "\n", "self", ".", "data", "=", "self", ".", "data", ".", "t", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "if", "store", ":", "np", ".", "savetxt", "(", "dataFileName", ",", "self", ".", "data", ")", "\n", "return", "self", ".", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.cedricwangyu_nofas.None.TrivialModels.circuitTrivial.solve_t": [[24, 28], ["torch.chunk", "torch.cat", "torch.matmul", "torch.exp"], "methods", ["None"], ["", "def", "solve_t", "(", "self", ",", "params", ")", ":", "\n", "        ", "z1", ",", "z2", "=", "torch", ".", "chunk", "(", "params", ",", "chunks", "=", "2", ",", "dim", "=", "1", ")", "\n", "x", "=", "torch", ".", "cat", "(", "(", "z1", "**", "3", "/", "10", ",", "torch", ".", "exp", "(", "z2", "/", "3", ")", ")", ",", "1", ")", "\n", "return", "torch", ".", "matmul", "(", "x", ",", "self", ".", "RM", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cedricwangyu_nofas.None.TrivialModels.circuitTrivial.evalNegLL_t": [[29, 42], ["torch.tensor", "torch.abs", "TrivialModels.circuitTrivial.solve_t", "TrivialModels.circuitTrivial.surrogate.forward", "numpy.log", "torch.sum", "TrivialModels.circuitTrivial.solve_t", "numpy.prod", "torch.log", "torch.sum", "torch.prod", "TrivialModels.circuitTrivial.unsqueeze", "torch.tensor.t().unsqueeze", "torch.tensor.t"], "methods", ["home.repos.pwc.inspect_result.cedricwangyu_nofas.None.highdimModels.Highdim.solve_t", "home.repos.pwc.inspect_result.cedricwangyu_nofas.None.FNN_surrogate_nested.Surrogate.forward", "home.repos.pwc.inspect_result.cedricwangyu_nofas.None.highdimModels.Highdim.solve_t"], ["", "def", "evalNegLL_t", "(", "self", ",", "params", ",", "surrogate", "=", "True", ")", ":", "\n", "        ", "stds", "=", "torch", ".", "abs", "(", "self", ".", "solve_t", "(", "self", ".", "defParam", ")", ")", "*", "self", ".", "stdRatio", "\n", "if", "not", "surrogate", ":", "\n", "            ", "modelOut", "=", "self", ".", "solve_t", "(", "params", ")", "\n", "", "else", ":", "\n", "            ", "modelOut", "=", "self", ".", "surrogate", ".", "forward", "(", "params", ")", "\n", "", "Data", "=", "torch", ".", "tensor", "(", "self", ".", "data", ")", "\n", "# Eval LL", "\n", "ll1", "=", "-", "0.5", "*", "np", ".", "prod", "(", "self", ".", "data", ".", "shape", ")", "*", "np", ".", "log", "(", "2.0", "*", "np", ".", "pi", ")", "\n", "ll2", "=", "(", "-", "0.5", "*", "self", ".", "data", ".", "shape", "[", "1", "]", "*", "torch", ".", "log", "(", "torch", ".", "prod", "(", "stds", ")", ")", ")", ".", "item", "(", ")", "\n", "ll3", "=", "-", "0.5", "*", "torch", ".", "sum", "(", "torch", ".", "sum", "(", "(", "modelOut", ".", "unsqueeze", "(", "0", ")", "-", "Data", ".", "t", "(", ")", ".", "unsqueeze", "(", "1", ")", ")", "**", "2", ",", "dim", "=", "0", ")", "/", "stds", "[", "0", "]", "**", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "negLL", "=", "-", "(", "ll1", "+", "ll2", "+", "ll3", ")", "\n", "return", "negLL", "\n", "\n"]], "home.repos.pwc.inspect_result.cedricwangyu_nofas.None.TrivialModels.circuitTrivial.den_t": [[43, 45], ["TrivialModels.circuitTrivial.evalNegLL_t"], "methods", ["home.repos.pwc.inspect_result.cedricwangyu_nofas.None.highdimModels.Highdim.evalNegLL_t"], ["", "def", "den_t", "(", "self", ",", "params", ",", "surrogate", "=", "True", ")", ":", "\n", "        ", "return", "-", "self", ".", "evalNegLL_t", "(", "params", ",", "surrogate", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.cedricwangyu_nofas.None.highdimModels.Highdim.__init__": [[9, 21], ["torch.Tensor", "torch.Tensor", "highdimModels.Highdim.solve_t", "FNN_surrogate_nested.Surrogate", "torch.Tensor", "numpy.sqrt", "torch.Tensor", "highdimModels.Highdim.solve_t", "highdimModels.Highdim.transform"], "methods", ["home.repos.pwc.inspect_result.cedricwangyu_nofas.None.highdimModels.Highdim.solve_t", "home.repos.pwc.inspect_result.cedricwangyu_nofas.None.highdimModels.Highdim.solve_t", "home.repos.pwc.inspect_result.cedricwangyu_nofas.None.highdimModels.Highdim.transform"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "# Init parameters", "\n", "        ", "self", ".", "input_num", "=", "5", "\n", "self", ".", "output_num", "=", "4", "\n", "self", ".", "x0", "=", "torch", ".", "Tensor", "(", "[", "0.0838", ",", "0.2290", ",", "0.9133", ",", "0.1524", ",", "0.8258", "]", ")", "\n", "self", ".", "defParam", "=", "torch", ".", "Tensor", "(", "[", "[", "15.6426", ",", "0.2231", ",", "1.2840", ",", "0.0821", ",", "5.7546", "]", "]", ")", "\n", "self", ".", "RM", "=", "torch", ".", "Tensor", "(", "[", "[", "1", ",", "0", ",", "0", ",", "0", "]", ",", "[", "1", ",", "1", ",", "0", ",", "0", "]", ",", "[", "0", ",", "1", ",", "1", ",", "0", "]", ",", "[", "0", ",", "0", ",", "1", ",", "1", "]", ",", "[", "0", ",", "0", ",", "0", ",", "1", "]", "]", ")", "/", "np", ".", "sqrt", "(", "2.0", ")", "\n", "self", ".", "defOut", "=", "self", ".", "solve_t", "(", "self", ".", "defParam", ")", "\n", "self", ".", "stdRatio", "=", "0.01", "\n", "self", ".", "data", "=", "None", "\n", "self", ".", "surrogate", "=", "Surrogate", "(", "\"highdim\"", ",", "lambda", "x", ":", "self", ".", "solve_t", "(", "self", ".", "transform", "(", "x", ")", ")", ",", "self", ".", "input_num", ",", "self", ".", "output_num", ",", "\n", "torch", ".", "Tensor", "(", "[", "[", "-", "3", ",", "3", "]", ",", "[", "-", "3", ",", "3", "]", ",", "[", "-", "3", ",", "3", "]", ",", "[", "-", "3", ",", "3", "]", ",", "[", "-", "3", ",", "3", "]", "]", ")", ",", "20", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cedricwangyu_nofas.None.highdimModels.Highdim.genDataFile": [[23, 29], ["highdimModels.Highdim.data.t().detach().numpy", "numpy.savetxt", "torch.normal", "highdimModels.Highdim.data.t().detach", "torch.abs", "highdimModels.Highdim.data.t"], "methods", ["None"], ["", "def", "genDataFile", "(", "self", ",", "dataSize", "=", "50", ",", "dataFileName", "=", "\"source/data/data_highdim.txt\"", ",", "store", "=", "True", ")", ":", "\n", "        ", "def_out", "=", "self", ".", "defOut", "[", "0", "]", "\n", "self", ".", "data", "=", "def_out", "+", "self", ".", "stdRatio", "*", "torch", ".", "abs", "(", "def_out", ")", "*", "torch", ".", "normal", "(", "0", ",", "1", ",", "size", "=", "(", "dataSize", ",", "self", ".", "output_num", ")", ")", "\n", "self", ".", "data", "=", "self", ".", "data", ".", "t", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "if", "store", ":", "np", ".", "savetxt", "(", "dataFileName", ",", "self", ".", "data", ")", "\n", "return", "self", ".", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.cedricwangyu_nofas.None.highdimModels.Highdim.solve_t": [[30, 32], ["torch.matmul", "torch.abs"], "methods", ["None"], ["", "def", "solve_t", "(", "self", ",", "params", ")", ":", "\n", "        ", "return", "torch", ".", "matmul", "(", "(", "2", "*", "torch", ".", "abs", "(", "2", "*", "self", ".", "x0", "-", "1", ")", "+", "params", ")", "/", "(", "1", "+", "params", ")", ",", "self", ".", "RM", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cedricwangyu_nofas.None.highdimModels.Highdim.evalNegLL_t": [[33, 42], ["len", "torch.tensor", "numpy.log", "torch.sum", "numpy.prod", "torch.log", "torch.sum", "torch.prod", "modelOut.unsqueeze", "torch.tensor.t().unsqueeze", "torch.tensor.t"], "methods", ["None"], ["", "def", "evalNegLL_t", "(", "self", ",", "modelOut", ")", ":", "\n", "        ", "data_size", "=", "len", "(", "self", ".", "data", "[", "0", "]", ")", "\n", "stds", "=", "self", ".", "defOut", "*", "self", ".", "stdRatio", "\n", "Data", "=", "torch", ".", "tensor", "(", "self", ".", "data", ")", "\n", "ll1", "=", "-", "0.5", "*", "np", ".", "prod", "(", "self", ".", "data", ".", "shape", ")", "*", "np", ".", "log", "(", "2.0", "*", "np", ".", "pi", ")", "# a number", "\n", "ll2", "=", "(", "-", "0.5", "*", "self", ".", "data", ".", "shape", "[", "1", "]", "*", "torch", ".", "log", "(", "torch", ".", "prod", "(", "stds", ")", ")", ")", ".", "item", "(", ")", "# a number", "\n", "ll3", "=", "-", "0.5", "*", "torch", ".", "sum", "(", "torch", ".", "sum", "(", "(", "modelOut", ".", "unsqueeze", "(", "0", ")", "-", "Data", ".", "t", "(", ")", ".", "unsqueeze", "(", "1", ")", ")", "**", "2", ",", "dim", "=", "0", ")", "/", "stds", "[", "0", "]", "**", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "negLL", "=", "-", "(", "ll1", "+", "ll2", "+", "ll3", ")", "\n", "return", "negLL", "\n", "\n"]], "home.repos.pwc.inspect_result.cedricwangyu_nofas.None.highdimModels.Highdim.transform": [[43, 45], ["torch.exp"], "methods", ["None"], ["", "def", "transform", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "torch", ".", "exp", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cedricwangyu_nofas.None.highdimModels.Highdim.den_t": [[46, 54], ["x.size", "torch.sum", "highdimModels.Highdim.surrogate.forward", "highdimModels.Highdim.solve_t", "highdimModels.Highdim.transform", "highdimModels.Highdim.evalNegLL_t().reshape", "highdimModels.Highdim.evalNegLL_t"], "methods", ["home.repos.pwc.inspect_result.cedricwangyu_nofas.None.FNN_surrogate_nested.Surrogate.forward", "home.repos.pwc.inspect_result.cedricwangyu_nofas.None.highdimModels.Highdim.solve_t", "home.repos.pwc.inspect_result.cedricwangyu_nofas.None.highdimModels.Highdim.transform", "home.repos.pwc.inspect_result.cedricwangyu_nofas.None.highdimModels.Highdim.evalNegLL_t"], ["", "def", "den_t", "(", "self", ",", "x", ",", "surrogate", "=", "True", ")", ":", "\n", "        ", "batch_size", "=", "x", ".", "size", "(", "0", ")", "\n", "adjust", "=", "torch", ".", "sum", "(", "x", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "if", "surrogate", ":", "\n", "            ", "modelOut", "=", "self", ".", "surrogate", ".", "forward", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "modelOut", "=", "self", ".", "solve_t", "(", "self", ".", "transform", "(", "x", ")", ")", "\n", "", "return", "-", "self", ".", "evalNegLL_t", "(", "modelOut", ")", ".", "reshape", "(", "batch_size", ",", "1", ")", "+", "adjust", "\n", "", "def", "rev_solve_t", "(", "self", ",", "y", ")", ":", "\n"]], "home.repos.pwc.inspect_result.cedricwangyu_nofas.None.highdimModels.Highdim.rev_solve_t": [[54, 70], ["torch.Tensor", "torch.cat", "torch.cat", "torch.cat", "print", "torch.cat", "torch.cat", "torch.cat", "numpy.sqrt", "torch.abs", "torch.Tensor", "torch.Tensor", "torch.max", "torch.min", "torch.cat", "y.size"], "methods", ["None"], ["", "def", "rev_solve_t", "(", "self", ",", "y", ")", ":", "\n", "        ", "x", "=", "torch", ".", "Tensor", "(", "[", "[", "0", "]", "]", "*", "y", ".", "size", "(", "0", ")", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "y", "[", ":", ",", "3", ":", "4", "]", ",", "x", "]", ",", "dim", "=", "1", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "y", "[", ":", ",", "2", ":", "3", "]", "-", "x", "[", ":", ",", "0", ":", "1", "]", ",", "x", "]", ",", "dim", "=", "1", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "y", "[", ":", ",", "1", ":", "2", "]", "-", "x", "[", ":", ",", "0", ":", "1", "]", ",", "x", "]", ",", "dim", "=", "1", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "y", "[", ":", ",", "0", ":", "1", "]", "-", "x", "[", ":", ",", "0", ":", "1", "]", ",", "x", "]", ",", "dim", "=", "1", ")", "*", "np", ".", "sqrt", "(", "2", ")", "\n", "\n", "con", "=", "2", "*", "torch", ".", "abs", "(", "2", "*", "self", ".", "x0", "-", "1", ")", "\n", "print", "(", "con", ")", "\n", "t1", "=", "(", "1", "-", "x", ")", "/", "torch", ".", "Tensor", "(", "[", "1", ",", "-", "1", ",", "1", ",", "-", "1", ",", "1", "]", ")", "\n", "t2", "=", "(", "con", "-", "x", ")", "/", "torch", ".", "Tensor", "(", "[", "1", ",", "-", "1", ",", "1", ",", "-", "1", ",", "1", "]", ")", "\n", "tmin", "=", "torch", ".", "cat", "(", "[", "t1", "[", ":", ",", "0", ":", "1", "]", ",", "t2", "[", ":", ",", "1", ":", "2", "]", ",", "t1", "[", ":", ",", "2", ":", "3", "]", ",", "t2", "[", ":", ",", "3", ":", "4", "]", ",", "t1", "[", ":", ",", "4", ":", "5", "]", "]", ",", "dim", "=", "1", ")", "\n", "tmax", "=", "torch", ".", "cat", "(", "[", "t2", "[", ":", ",", "0", ":", "1", "]", ",", "t1", "[", ":", ",", "1", ":", "2", "]", ",", "t2", "[", ":", ",", "2", ":", "3", "]", ",", "t1", "[", ":", ",", "3", ":", "4", "]", ",", "t2", "[", ":", ",", "4", ":", "5", "]", "]", ",", "dim", "=", "1", ")", "\n", "tmin", "=", "torch", ".", "max", "(", "tmin", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "tmax", "=", "torch", ".", "min", "(", "tmax", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "return", "x", ",", "torch", ".", "cat", "(", "[", "tmin", ",", "tmax", "]", ",", "dim", "=", "1", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.cedricwangyu_nofas.None.temporary.execute": [[23, 86], ["print", "torch.device", "torch.manual_seed", "maf.RealNVP.to", "torch.optim.RMSprop", "torch.optim.lr_scheduler.ExponentialLR", "circuitModels.rcrModel.surrogate.surrogate_load", "range", "numpy.savetxt", "numpy.savetxt", "os.path.isdir", "os.makedirs", "torch.cuda.is_available", "torch.cuda.manual_seed", "maf.MADE", "maf.RealNVP.parameters", "highdimModels.Highdim", "numpy.loadtxt", "torch.optim.lr_scheduler.ExponentialLR.step", "maf.train", "circuitModels.rcrModel.surrogate.grid_record.detach().numpy", "numpy.array", "maf.MAF", "TrivialModels.circuitTrivial", "numpy.loadtxt", "torch.cuda.is_available", "maf.RealNVP", "ValueError", "numpy.loadtxt", "circuitModels.rcModel", "numpy.loadtxt", "circuitModels.rcrModel.surrogate.grid_record.detach", "numpy.loadtxt", "circuitModels.rcrModel", "FNN_surrogate_nested.Surrogate", "numpy.loadtxt", "ValueError", "torch.Tensor", "circuitModels.rcrModel.solve_t", "circuitModels.rcrModel.transform"], "function", ["home.repos.pwc.inspect_result.cedricwangyu_nofas.None.FNN_surrogate_nested.Surrogate.surrogate_load", "home.repos.pwc.inspect_result.cedricwangyu_nofas.None.maf.train", "home.repos.pwc.inspect_result.cedricwangyu_nofas.None.highdimModels.Highdim.solve_t", "home.repos.pwc.inspect_result.cedricwangyu_nofas.None.highdimModels.Highdim.transform"], ["def", "execute", "(", "exp", ",", "beta_0", "=", "0.5", ",", "beta_1", "=", "0.1", ",", "memory_size", "=", "20", ")", ":", "\n", "# setup file ops", "\n", "    ", "if", "not", "os", ".", "path", ".", "isdir", "(", "exp", ".", "output_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "exp", ".", "output_dir", ")", "\n", "\n", "# setup device", "\n", "", "print", "(", "\"Cuda Availability: \"", ",", "torch", ".", "cuda", ".", "is_available", "(", ")", ")", "\n", "device", "=", "torch", ".", "device", "(", "'cuda:0'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "and", "not", "exp", ".", "no_cuda", "else", "'cpu'", ")", "\n", "torch", ".", "manual_seed", "(", "exp", ".", "seed", ")", "\n", "if", "device", ".", "type", "==", "'cuda'", ":", "torch", ".", "cuda", ".", "manual_seed", "(", "exp", ".", "seed", ")", "\n", "\n", "# model", "\n", "if", "exp", ".", "flow_type", "==", "'made'", ":", "\n", "        ", "model", "=", "MADE", "(", "exp", ".", "input_size", ",", "exp", ".", "hidden_size", ",", "exp", ".", "n_hidden", ",", "None", ",", "exp", ".", "activation_fn", ",", "exp", ".", "input_order", ")", "\n", "", "elif", "exp", ".", "flow_type", "==", "'maf'", ":", "\n", "        ", "model", "=", "MAF", "(", "exp", ".", "n_blocks", ",", "exp", ".", "input_size", ",", "exp", ".", "hidden_size", ",", "exp", ".", "n_hidden", ",", "None", ",", "\n", "exp", ".", "activation_fn", ",", "exp", ".", "input_order", ",", "batch_norm", "=", "exp", ".", "batch_norm_order", ")", "\n", "", "elif", "exp", ".", "flow_type", "==", "'realnvp'", ":", "# Under construction", "\n", "        ", "model", "=", "RealNVP", "(", "exp", ".", "n_blocks", ",", "exp", ".", "input_size", ",", "exp", ".", "hidden_size", ",", "exp", ".", "n_hidden", ",", "None", ",", "\n", "batch_norm", "=", "exp", ".", "batch_norm_order", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Unrecognized model.'", ")", "\n", "\n", "", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "RMSprop", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "exp", ".", "lr", ")", "\n", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "ExponentialLR", "(", "optimizer", ",", "exp", ".", "lr_decay", ")", "\n", "\n", "test_mode", "=", "'RCR'", "\n", "if", "test_mode", "==", "'hidim'", ":", "\n", "        ", "rt", "=", "Highdim", "(", ")", "\n", "rt", ".", "data", "=", "np", ".", "loadtxt", "(", "'source/data/data_highdim.txt'", ")", "\n", "", "elif", "test_mode", "==", "'trivial'", ":", "\n", "        ", "rt", "=", "circuitTrivial", "(", ")", "\n", "rt", ".", "data", "=", "np", ".", "loadtxt", "(", "'source/data/data_trivial.txt'", ")", "\n", "", "elif", "test_mode", "==", "'RC'", ":", "\n", "        ", "cycleTime", "=", "1.07", "\n", "totalCycles", "=", "10", "\n", "forcing", "=", "np", ".", "loadtxt", "(", "'source/data/inlet.flow'", ")", "\n", "rt", "=", "rcModel", "(", "cycleTime", ",", "totalCycles", ",", "forcing", ")", "# RC Model Defined", "\n", "rt", ".", "data", "=", "np", ".", "loadtxt", "(", "'source/data/data_rc.txt'", ")", "\n", "", "elif", "test_mode", "==", "'RCR'", ":", "\n", "        ", "cycleTime", "=", "1.07", "\n", "totalCycles", "=", "10", "\n", "forcing", "=", "np", ".", "loadtxt", "(", "'source/data/inlet.flow'", ")", "\n", "rt", "=", "rcrModel", "(", "cycleTime", ",", "totalCycles", ",", "forcing", ")", "# RCR Model Defined", "\n", "rt", ".", "surrogate", "=", "Surrogate", "(", "\"RCR\"", ",", "lambda", "x", ":", "rt", ".", "solve_t", "(", "rt", ".", "transform", "(", "x", ")", ")", ",", "rt", ".", "numParam", ",", "rt", ".", "numOutputs", ",", "\n", "torch", ".", "Tensor", "(", "[", "[", "-", "7", ",", "7", "]", ",", "[", "-", "7", ",", "7", "]", ",", "[", "-", "7", ",", "7", "]", "]", ")", ",", "memory_size", ")", "\n", "rt", ".", "data", "=", "np", ".", "loadtxt", "(", "'source/data/data_rcr.txt'", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Unrecognized task'", ")", "\n", "", "rt", ".", "surrogate", ".", "surrogate_load", "(", ")", "\n", "# rt.surrogate.beta_0 = beta_0", "\n", "# rt.surrogate.beta_1 = beta_1", "\n", "# rt.surrogate.weights = torch.Tensor([np.exp(-rt.surrogate.beta_1 * ii) for ii in range(rt.surrogate.memory_len)])", "\n", "loglist", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "exp", ".", "n_iter", ")", ":", "\n", "        ", "scheduler", ".", "step", "(", ")", "\n", "train", "(", "model", ",", "rt", ",", "optimizer", ",", "i", ",", "exp", ",", "loglist", ",", "True", ",", "True", ")", "# with surrogate", "\n", "# train(model, rt, optimizer, i, exp, loglist, True, False) # no surrogate", "\n", "\n", "# rt.surrogate.surrogate_save() # Used for saving the resulting surrogate model", "\n", "", "np", ".", "savetxt", "(", "exp", ".", "output_dir", "+", "'/grid_trace.txt'", ",", "rt", ".", "surrogate", ".", "grid_record", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", "\n", "np", ".", "savetxt", "(", "exp", ".", "output_dir", "+", "'/'", "+", "exp", ".", "log_file", ",", "np", ".", "array", "(", "loglist", ")", ",", "newline", "=", "\"\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cedricwangyu_nofas.None.temporary.post_process": [[88, 104], ["numpy.loadtxt", "circuitModels.rcrModel", "numpy.loadtxt", "torch.tensor", "circuitModels.rcrModel.transform", "numpy.savetxt", "print", "circuitModels.rcrModel.solve_t", "torch.normal", "print", "numpy.savetxt", "numpy.loadtxt", "rt.transform.detach().numpy", "torch.normal.detach().numpy", "rt.transform.detach", "rt.transform.size", "torch.abs", "torch.normal.detach"], "function", ["home.repos.pwc.inspect_result.cedricwangyu_nofas.None.highdimModels.Highdim.transform", "home.repos.pwc.inspect_result.cedricwangyu_nofas.None.highdimModels.Highdim.solve_t"], ["", "def", "post_process", "(", "folder", ")", ":", "\n", "    ", "cycleTime", "=", "1.07", "\n", "totalCycles", "=", "10", "\n", "forcing", "=", "np", ".", "loadtxt", "(", "'source/data/inlet.flow'", ")", "\n", "rt", "=", "rcrModel", "(", "cycleTime", ",", "totalCycles", ",", "forcing", ")", "\n", "rt", ".", "data", "=", "np", ".", "loadtxt", "(", "'source/data/data_rcr.txt'", ")", "\n", "\n", "params", "=", "torch", ".", "tensor", "(", "np", ".", "loadtxt", "(", "folder", "+", "\"/samples25000\"", ")", ")", "\n", "params", "=", "rt", ".", "transform", "(", "params", ")", "\n", "np", ".", "savetxt", "(", "folder", "+", "\"/RCR_MAF_Parameters.txt\"", ",", "params", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", "\n", "print", "(", "params", ")", "\n", "model_out", "=", "rt", ".", "solve_t", "(", "params", ")", "\n", "res", "=", "torch", ".", "normal", "(", "0", ",", "1", ",", "size", "=", "(", "params", ".", "size", "(", "0", ")", ",", "3", ")", ")", "\n", "res", "=", "model_out", "+", "0.01", "*", "torch", ".", "abs", "(", "rt", ".", "defOut", "[", "0", "]", ")", "*", "res", "\n", "print", "(", "res", ")", "\n", "np", ".", "savetxt", "(", "folder", "+", "\"/RCR_MAF_Samples.txt\"", ",", "res", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n"]]}