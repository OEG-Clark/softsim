{"home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.snli_extract.tokenize_spacy": [[10, 18], ["spacy_nlp", "tok.lemma_.replace", "zip"], "function", ["None"], ["def", "tokenize_spacy", "(", "text", ")", ":", "\n", "\t", "tokenized", "=", "spacy_nlp", "(", "text", ")", "\n", "# use universal pos tags", "\n", "toks", "=", "[", "tok", ".", "text", "for", "tok", "in", "tokenized", "if", "not", "tok", ".", "is_space", "]", "\n", "pos", "=", "[", "tok", ".", "pos_", "for", "tok", "in", "tokenized", "if", "not", "tok", ".", "is_space", "]", "\n", "lemma", "=", "[", "tok", ".", "lemma_", ".", "replace", "(", "' '", ",", "''", ")", "for", "tok", "in", "tokenized", "if", "not", "tok", ".", "is_space", "]", "\n", "lemma", "=", "[", "l", "if", "l", "!=", "''", "else", "t", "for", "l", ",", "t", "in", "zip", "(", "lemma", ",", "toks", ")", "]", "\n", "return", "toks", ",", "pos", ",", "lemma", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.snli_extract.filter_by_pos": [[20, 30], ["zip", "filtered_toks.append", "filtered_pos.append", "filtered_lemma.append"], "function", ["None"], ["", "def", "filter_by_pos", "(", "keys", ",", "toks", ",", "pos", ",", "lemma", ")", ":", "\n", "\t", "filtered_toks", "=", "[", "]", "\n", "filtered_pos", "=", "[", "]", "\n", "filtered_lemma", "=", "[", "]", "\n", "for", "t", ",", "p", ",", "l", "in", "zip", "(", "toks", ",", "pos", ",", "lemma", ")", ":", "\n", "\t\t", "if", "p", "not", "in", "keys", ":", "\n", "\t\t\t", "filtered_toks", ".", "append", "(", "t", ")", "\n", "filtered_pos", ".", "append", "(", "p", ")", "\n", "filtered_lemma", ".", "append", "(", "l", ")", "\n", "", "", "return", "filtered_toks", ",", "filtered_pos", ",", "filtered_lemma", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.snli_extract.write_to": [[31, 36], ["print", "open", "f.write"], "function", ["home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.preprocess.Indexer.write"], ["", "def", "write_to", "(", "ls", ",", "out_file", ")", ":", "\n", "\t", "print", "(", "'writing to {0}'", ".", "format", "(", "out_file", ")", ")", "\n", "with", "open", "(", "out_file", ",", "'w+'", ")", "as", "f", ":", "\n", "\t\t", "for", "l", "in", "ls", ":", "\n", "\t\t\t", "f", ".", "write", "(", "(", "l", "+", "'\\n'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.snli_extract.extract": [[37, 94], ["print", "open", "l.rstrip().split", "snli_extract.tokenize_spacy", "snli_extract.tokenize_spacy", "max", "all_sent1.append", "all_sent2.append", "all_sent1_pos.append", "all_sent2_pos.append", "all_sent1_lemma.append", "all_sent2_lemma.append", "all_label.append", "print", "print", "opt.filter.split", "snli_extract.filter_by_pos", "snli_extract.filter_by_pos", "len", "len", "len", "len", "len", "len", "len", "len", "l.strip", "l.rstrip"], "function", ["home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.unlabeled_extract.tokenize_spacy", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.unlabeled_extract.tokenize_spacy", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.unlabeled_extract.filter_by_pos", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.unlabeled_extract.filter_by_pos"], ["", "", "", "def", "extract", "(", "opt", ",", "csv_file", ")", ":", "\n", "\t", "all_sent1", "=", "[", "]", "\n", "all_sent2", "=", "[", "]", "\n", "all_label", "=", "[", "]", "\n", "all_sent1_pos", "=", "[", "]", "\n", "all_sent2_pos", "=", "[", "]", "\n", "all_sent1_lemma", "=", "[", "]", "\n", "all_sent2_lemma", "=", "[", "]", "\n", "max_sent_l", "=", "0", "\n", "\n", "skip_cnt", "=", "0", "\n", "\n", "with", "open", "(", "csv_file", ",", "'r'", ")", "as", "f", ":", "\n", "\t\t", "line_idx", "=", "0", "\n", "for", "l", "in", "f", ":", "\n", "\t\t\t", "line_idx", "+=", "1", "\n", "if", "line_idx", "==", "1", "or", "l", ".", "strip", "(", ")", "==", "''", ":", "\n", "\t\t\t\t", "continue", "\n", "\n", "", "cells", "=", "l", ".", "rstrip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "label", "=", "cells", "[", "0", "]", "\n", "sent1", "=", "cells", "[", "5", "]", "\n", "sent2", "=", "cells", "[", "6", "]", "\n", "\n", "if", "label", "==", "'-'", ":", "\n", "\t\t\t\t", "print", "(", "'skipping label {0}'", ".", "format", "(", "label", ")", ")", "\n", "skip_cnt", "+=", "1", "\n", "continue", "\n", "", "else", ":", "\n", "\t\t\t\t", "print", "(", "label", ")", "\n", "\n", "", "assert", "(", "label", "in", "[", "'entailment'", ",", "'neutral'", ",", "'contradiction'", "]", ")", "\n", "\n", "sent1_toks", ",", "sent1_pos", ",", "sent1_lemma", "=", "tokenize_spacy", "(", "sent1", ")", "\n", "sent2_toks", ",", "sent2_pos", ",", "sent2_lemma", "=", "tokenize_spacy", "(", "sent2", ")", "\n", "\n", "if", "opt", ".", "filter", "!=", "''", ":", "\n", "\t\t\t\t", "keys", "=", "opt", ".", "filter", ".", "split", "(", "','", ")", "\n", "sent1_toks", ",", "sent1_pos", ",", "sent1_lemma", "=", "filter_by_pos", "(", "keys", ",", "sent1_toks", ",", "sent1_pos", ",", "sent1_lemma", ")", "\n", "sent2_toks", ",", "sent2_pos", ",", "sent1_lemma", "=", "filter_by_pos", "(", "keys", ",", "sent2_toks", ",", "sent2_pos", ",", "sent2_lemma", ")", "\n", "\n", "", "assert", "(", "len", "(", "sent1_toks", ")", "==", "len", "(", "sent1_pos", ")", ")", "\n", "assert", "(", "len", "(", "sent2_toks", ")", "==", "len", "(", "sent2_pos", ")", ")", "\n", "assert", "(", "len", "(", "sent1_toks", ")", "==", "len", "(", "sent1_lemma", ")", ")", "\n", "max_sent_l", "=", "max", "(", "max_sent_l", ",", "len", "(", "sent1_toks", ")", ",", "len", "(", "sent2_toks", ")", ")", "\n", "\n", "all_sent1", ".", "append", "(", "' '", ".", "join", "(", "sent1_toks", ")", ")", "\n", "all_sent2", ".", "append", "(", "' '", ".", "join", "(", "sent2_toks", ")", ")", "\n", "all_sent1_pos", ".", "append", "(", "' '", ".", "join", "(", "sent1_pos", ")", ")", "\n", "all_sent2_pos", ".", "append", "(", "' '", ".", "join", "(", "sent2_pos", ")", ")", "\n", "all_sent1_lemma", ".", "append", "(", "' '", ".", "join", "(", "sent1_lemma", ")", ")", "\n", "all_sent2_lemma", ".", "append", "(", "' '", ".", "join", "(", "sent2_lemma", ")", ")", "\n", "all_label", ".", "append", "(", "label", ")", "\n", "\n", "", "", "print", "(", "'skipped {0} examples'", ".", "format", "(", "skip_cnt", ")", ")", "\n", "\n", "return", "(", "all_sent1", ",", "all_sent2", ",", "all_sent1_pos", ",", "all_sent2_pos", ",", "all_sent1_lemma", ",", "all_sent2_lemma", ",", "all_label", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.snli_extract.main": [[103, 115], ["parser.parse_args", "snli_extract.extract", "print", "snli_extract.write_to", "snli_extract.write_to", "snli_extract.write_to", "snli_extract.write_to", "snli_extract.write_to", "snli_extract.write_to", "snli_extract.write_to", "len"], "function", ["home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.unlabeled_extract.extract", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.unlabeled_extract.write_to", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.unlabeled_extract.write_to", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.unlabeled_extract.write_to", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.unlabeled_extract.write_to", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.unlabeled_extract.write_to", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.unlabeled_extract.write_to", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.unlabeled_extract.write_to"], ["def", "main", "(", "args", ")", ":", "\n", "\t", "opt", "=", "parser", ".", "parse_args", "(", "args", ")", "\n", "all_sent1", ",", "all_sent2", ",", "all_sent1_pos", ",", "all_sent2_pos", ",", "all_sent1_lemma", ",", "all_sent2_lemma", ",", "all_label", "=", "extract", "(", "opt", ",", "opt", ".", "data", ")", "\n", "print", "(", "'{0} examples processed.'", ".", "format", "(", "len", "(", "all_sent1", ")", ")", ")", "\n", "\n", "write_to", "(", "all_sent1", ",", "opt", ".", "output", "+", "'.sent1.txt'", ")", "\n", "write_to", "(", "all_sent2", ",", "opt", ".", "output", "+", "'.sent2.txt'", ")", "\n", "write_to", "(", "all_sent1_pos", ",", "opt", ".", "output", "+", "'.sent1_pos.txt'", ")", "\n", "write_to", "(", "all_sent2_pos", ",", "opt", ".", "output", "+", "'.sent2_pos.txt'", ")", "\n", "write_to", "(", "all_sent1_lemma", ",", "opt", ".", "output", "+", "'.sent1_lemma.txt'", ")", "\n", "write_to", "(", "all_sent2_lemma", ",", "opt", ".", "output", "+", "'.sent2_lemma.txt'", ")", "\n", "write_to", "(", "all_label", ",", "opt", ".", "output", "+", "'.label.txt'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.elmo_bias.ElmoBias.__init__": [[11, 29], ["super().__init__", "print", "h5py.File", "np.ascontiguousarray", "torch.nn.Parameter", "Exception", "torch.from_numpy().float().view", "torch.from_numpy().float", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.classifier.local_classifier.LocalClassifier.__init__"], ["\t", "def", "__init__", "(", "self", ",", "opt", ",", "shared", ")", ":", "\n", "\t\t", "super", "(", "ElmoBias", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "opt", "=", "opt", "\n", "self", ".", "shared", "=", "shared", "\n", "\n", "print", "(", "'loading embedding bias from {0}'", ".", "format", "(", "opt", ".", "bias_elmo", ")", ")", "\n", "f", "=", "h5py", ".", "File", "(", "opt", ".", "bias_elmo", ",", "'r'", ")", "\n", "bias_elmo", "=", "f", "[", "'bias'", "]", "[", ":", "]", "\n", "\n", "assert", "(", "opt", ".", "fix_word_vecs", "==", "1", ")", "# this will not work with dynamic word embeddings, natually", "\n", "\n", "if", "opt", ".", "bias_type", "==", "'removal'", ":", "\n", "\t\t\t", "bias_elmo", "=", "np", ".", "ascontiguousarray", "(", "bias_elmo", "[", ":", ",", ":", "]", ")", "# the original elmo bias are [l2, l1, l0], we might need [l0, l1, l2]", "\n", "self", ".", "bias_elmo", "=", "nn", ".", "Parameter", "(", "torch", ".", "from_numpy", "(", "bias_elmo", ")", ".", "float", "(", ")", ".", "view", "(", "1", ",", "opt", ".", "num_bias", ",", "-", "1", ")", ",", "requires_grad", "=", "False", ")", "\n", "self", ".", "bias_elmo", ".", "skip_init", "=", "1", "\n", "self", ".", "bias_elmo", ".", "skip_save", "=", "1", "\n", "", "else", ":", "\n", "\t\t\t", "raise", "Exception", "(", "'unrecognized bias_type {0}'", ".", "format", "(", "self", ".", "opt", ".", "bias_type", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.elmo_bias.ElmoBias.debias": [[31, 42], ["bias.expand.expand.expand", "enc.bmm", "bias.expand.expand.transpose", "Exception"], "methods", ["None"], ["", "", "def", "debias", "(", "self", ",", "enc", ",", "bias", ")", ":", "\n", "\t\t", "batch_l", ",", "sent_l", ",", "elmo_size", "=", "enc", ".", "shape", "\n", "\n", "if", "self", ".", "opt", ".", "bias_type", "==", "'removal'", ":", "\n", "\t\t\t", "bias", "=", "bias", ".", "expand", "(", "batch_l", ",", "1", ",", "elmo_size", ")", "\n", "proj", "=", "enc", ".", "bmm", "(", "bias", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "return", "enc", "-", "(", "proj", "*", "bias", ")", "\n", "", "elif", "self", ".", "opt", ".", "bias_type", "==", "'nationality'", ":", "\n", "\t\t\t", "assert", "(", "False", ")", "\n", "", "else", ":", "\n", "\t\t\t", "raise", "Exception", "(", "'unrecognized bias_type {0}'", ".", "format", "(", "self", ".", "opt", ".", "bias_type", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.elmo_bias.ElmoBias.forward": [[45, 59], ["range", "torch.cat", "torch.cat.append", "elmo_bias.ElmoBias.debias"], "methods", ["home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.elmo_bias.ElmoBias.debias"], ["", "", "def", "forward", "(", "self", ",", "elmo_enc", ")", ":", "\n", "\t\t", "batch_l", ",", "sent_l", ",", "enc_size", "=", "elmo_enc", ".", "shape", "\n", "assert", "(", "enc_size", "==", "self", ".", "opt", ".", "elmo_in_size", "*", "3", ")", "\n", "\n", "debiased", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "\t\t\t", "start", "=", "self", ".", "opt", ".", "elmo_in_size", "*", "i", "\n", "end", "=", "self", ".", "opt", ".", "elmo_in_size", "*", "(", "i", "+", "1", ")", "\n", "\n", "# each time we get (batch_l, sent_l, elmo_in_size)", "\n", "debiased", ".", "append", "(", "self", ".", "debias", "(", "elmo_enc", "[", ":", ",", ":", ",", "start", ":", "end", "]", ",", "self", ".", "bias_elmo", "[", ":", ",", ":", ",", "start", ":", "end", "]", ")", ")", "\n", "\n", "", "debiased", "=", "torch", ".", "cat", "(", "debiased", ",", "2", ")", "\n", "return", "debiased", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.elmo_batch_preprocess.load_elmo": [[11, 35], ["h5py.File", "torch.from_numpy().view", "h5py.File", "torch.from_numpy().view", "h5py.File", "torch.from_numpy().view", "allennlp.commands.elmo.ElmoEmbedder", "ElmoEmbedderDebias", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "[].astype", "[].astype", "[].astype"], "function", ["None"], ["def", "load_elmo", "(", "opt", ")", ":", "\n", "\t", "options_file", "=", "\"https://s3-us-west-2.amazonaws.com/allennlp/models/elmo/2x4096_512_2048cnn_2xhighway/elmo_2x4096_512_2048cnn_2xhighway_options.json\"", "\n", "weight_file", "=", "\"https://s3-us-west-2.amazonaws.com/allennlp/models/elmo/2x4096_512_2048cnn_2xhighway/elmo_2x4096_512_2048cnn_2xhighway_weights.hdf5\"", "\n", "\n", "bias", "=", "None", "\n", "if", "opt", ".", "bias", "!=", "''", ":", "\n", "\t\t", "f", "=", "h5py", ".", "File", "(", "opt", ".", "bias", ",", "'r'", ")", "\n", "bias", "=", "torch", ".", "from_numpy", "(", "f", "[", "'bias'", "]", "[", ":", "]", ".", "astype", "(", "np", ".", "float32", ")", ")", ".", "view", "(", "1", ",", "1", ",", "-", "1", ")", "\n", "bias", "=", "bias", "[", ":", ",", ":", ",", "0", ":", "512", "]", "\n", "\n", "", "contraction", "=", "None", "\n", "if", "opt", ".", "contract_v1", "!=", "''", "and", "opt", ".", "contract_v2", "!=", "''", ":", "\n", "\t\t", "f", "=", "h5py", ".", "File", "(", "opt", ".", "contract_v1", ",", "'r'", ")", "\n", "contract_v1", "=", "torch", ".", "from_numpy", "(", "f", "[", "'bias'", "]", "[", ":", "]", ".", "astype", "(", "np", ".", "float32", ")", ")", ".", "view", "(", "1", ",", "1", ",", "-", "1", ")", "\n", "f", "=", "h5py", ".", "File", "(", "opt", ".", "contract_v2", ",", "'r'", ")", "\n", "contract_v2", "=", "torch", ".", "from_numpy", "(", "f", "[", "'bias'", "]", "[", ":", "]", ".", "astype", "(", "np", ".", "float32", ")", ")", ".", "view", "(", "1", ",", "1", ",", "-", "1", ")", "\n", "contraction", "=", "(", "contract_v1", "[", ":", ",", ":", ",", ":", "512", "]", ",", "contract_v2", "[", ":", ",", ":", ",", ":", "512", "]", ")", "\n", "\n", "", "if", "bias", "is", "None", "and", "contraction", "is", "None", ":", "\n", "\t\t", "elmo", "=", "ElmoEmbedder", "(", "options_file", ",", "weight_file", ",", "cuda_device", "=", "opt", ".", "gpuid", ")", "# by default all 3 layers are output", "\n", "", "else", ":", "\n", "\t\t", "elmo", "=", "ElmoEmbedderDebias", "(", "bias", ",", "opt", ".", "num_bias", ",", "contraction", ",", "options_file", ",", "weight_file", ",", "cuda_device", "=", "opt", ".", "gpuid", ")", "\n", "\n", "", "return", "elmo", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.elmo_batch_preprocess.load_token": [[37, 45], ["open", "tokens.append", "l.rstrip", "l.strip().split", "l.strip"], "function", ["None"], ["", "def", "load_token", "(", "path", ")", ":", "\n", "\t", "tokens", "=", "[", "]", "\n", "with", "open", "(", "path", ",", "'r+'", ")", "as", "f", ":", "\n", "\t\t", "for", "l", "in", "f", ":", "\n", "\t\t\t", "if", "l", ".", "rstrip", "(", ")", "==", "''", ":", "\n", "\t\t\t\t", "continue", "\n", "", "tokens", ".", "append", "(", "l", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", ")", "\n", "", "", "return", "tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.elmo_batch_preprocess.elmo_over": [[47, 50], ["elmo.embed_batch"], "function", ["home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.elmo.elmo_embedder_debias.ElmoEmbedderDebias.embed_batch"], ["", "def", "elmo_over", "(", "opt", ",", "elmo", ",", "toks", ")", ":", "\n", "\t", "emb_ls", "=", "elmo", ".", "embed_batch", "(", "toks", ")", "\n", "return", "emb_ls", "# each element has shape (3, seq_l, 1024)", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.elmo_batch_preprocess.load_batched": [[52, 61], ["h5py.File", "[].astype", "[].astype", "[].astype", "[].astype", "[].astype"], "function", ["None"], ["", "def", "load_batched", "(", "opt", ")", ":", "\n", "\t", "f", "=", "h5py", ".", "File", "(", "opt", ".", "batched", ",", "'r'", ")", "\n", "source_l", "=", "f", "[", "'source_l'", "]", "[", ":", "]", ".", "astype", "(", "np", ".", "int32", ")", "# (batch_l,)", "\n", "target_l", "=", "f", "[", "'target_l'", "]", "[", ":", "]", ".", "astype", "(", "np", ".", "int32", ")", "# (batch_l,)", "\n", "batch_l", "=", "f", "[", "'batch_l'", "]", "[", ":", "]", ".", "astype", "(", "np", ".", "int32", ")", "\n", "batch_idx", "=", "f", "[", "'batch_idx'", "]", "[", ":", "]", ".", "astype", "(", "np", ".", "int32", ")", "\n", "ex_idx", "=", "f", "[", "'ex_idx'", "]", "[", ":", "]", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n", "return", "ex_idx", ",", "batch_idx", ",", "batch_l", ",", "source_l", ",", "target_l", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.elmo_batch_preprocess.load_elmo_unbatched": [[63, 66], ["h5py.File"], "function", ["None"], ["", "def", "load_elmo_unbatched", "(", "opt", ")", ":", "\n", "\t", "f", "=", "h5py", ".", "File", "(", "opt", ".", "elmo_unbatched", ",", "'r'", ")", "\n", "return", "f", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.elmo_batch_preprocess.process": [[68, 118], ["h5py.File", "print", "range", "h5py.File.close", "len", "len", "elmo_batch_preprocess.elmo_over", "elmo_batch_preprocess.elmo_over", "torch.zeros", "enumerate", "torch.zeros", "enumerate", "torch.zeros.numpy().astype", "torch.zeros.numpy().astype", "len", "len", "len", "len", "torch.from_numpy().transpose().contiguous", "torch.from_numpy().transpose().contiguous.view", "torch.from_numpy().transpose().contiguous", "torch.from_numpy().transpose().contiguous.view", "print", "range", "torch.zeros.numpy", "torch.zeros.numpy", "torch.from_numpy().transpose", "torch.from_numpy().transpose", "torch.from_numpy", "torch.from_numpy"], "function", ["home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.elmo_preprocess.elmo_over", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.elmo_preprocess.elmo_over"], ["", "def", "process", "(", "opt", ",", "src", ",", "tgt", ",", "batched", ",", "elmo", ",", "output", ")", ":", "\n", "\t", "assert", "(", "len", "(", "src", ")", "==", "len", "(", "tgt", ")", ")", "\n", "\n", "ex_idx", ",", "batch_idx", ",", "batch_l", ",", "source_l", ",", "target_l", "=", "batched", "\n", "\n", "f", "=", "h5py", ".", "File", "(", "output", ",", "'w'", ")", "\n", "\n", "print_every", "=", "100", "\n", "batch_cnt", "=", "0", "\n", "num_batch", "=", "batch_l", ".", "shape", "[", "0", "]", "\n", "print", "(", "'processing {0} batches...'", ".", "format", "(", "num_batch", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "num_batch", ")", ":", "\n", "\t\t", "start", "=", "batch_idx", "[", "i", "]", "\n", "end", "=", "start", "+", "batch_l", "[", "i", "]", "\n", "\n", "batch_ex_idx", "=", "[", "ex_idx", "[", "k", "]", "for", "k", "in", "range", "(", "batch_idx", "[", "i", "]", ",", "batch_idx", "[", "i", "]", "+", "batch_l", "[", "i", "]", ")", "]", "\n", "\n", "batch_src", "=", "[", "src", "[", "k", "]", "for", "k", "in", "batch_ex_idx", "]", "\n", "batch_tgt", "=", "[", "tgt", "[", "k", "]", "for", "k", "in", "batch_ex_idx", "]", "\n", "\n", "elmo_ls1", "=", "elmo_over", "(", "opt", ",", "elmo", ",", "batch_src", ")", "\n", "elmo_ls2", "=", "elmo_over", "(", "opt", ",", "elmo", ",", "batch_tgt", ")", "\n", "\n", "seq_l1", "=", "source_l", "[", "i", "]", "-", "1", "\n", "seq_l2", "=", "target_l", "[", "i", "]", "-", "1", "\n", "\n", "# sanity check, sentences within a batch are supposed to have the same length", "\n", "assert", "(", "len", "(", "batch_src", "[", "0", "]", ")", "==", "len", "(", "batch_src", "[", "-", "1", "]", ")", ")", "\n", "assert", "(", "len", "(", "batch_src", "[", "0", "]", ")", "==", "seq_l1", ")", "\n", "assert", "(", "len", "(", "batch_tgt", "[", "0", "]", ")", "==", "seq_l2", ")", "\n", "\n", "batch_elmo1", "=", "torch", ".", "zeros", "(", "batch_l", "[", "i", "]", ",", "seq_l1", ",", "3072", ")", "\n", "for", "k", ",", "e", "in", "enumerate", "(", "elmo_ls1", ")", ":", "\n", "\t\t\t", "e", "=", "torch", ".", "from_numpy", "(", "e", ")", ".", "transpose", "(", "1", ",", "0", ")", ".", "contiguous", "(", ")", "# (seq_l, 3, 1024)", "\n", "batch_elmo1", "[", "k", "]", "=", "e", ".", "view", "(", "seq_l1", ",", "3072", ")", "\n", "\n", "", "batch_elmo2", "=", "torch", ".", "zeros", "(", "batch_l", "[", "i", "]", ",", "seq_l2", ",", "3072", ")", "\n", "for", "k", ",", "e", "in", "enumerate", "(", "elmo_ls2", ")", ":", "\n", "\t\t\t", "e", "=", "torch", ".", "from_numpy", "(", "e", ")", ".", "transpose", "(", "1", ",", "0", ")", ".", "contiguous", "(", ")", "# (seq_l, 3, 1024)", "\n", "batch_elmo2", "[", "k", "]", "=", "e", ".", "view", "(", "seq_l2", ",", "3072", ")", "\n", "\n", "", "f", "[", "'{0}.src_batch'", ".", "format", "(", "i", ")", "]", "=", "batch_elmo1", ".", "numpy", "(", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "f", "[", "'{0}.tgt_batch'", ".", "format", "(", "i", ")", "]", "=", "batch_elmo2", ".", "numpy", "(", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "batch_cnt", "+=", "1", "\n", "if", "batch_cnt", "%", "print_every", "==", "0", ":", "\n", "\t\t\t", "print", "(", "'processed {0} batches'", ".", "format", "(", "batch_cnt", ")", ")", "\n", "\n", "", "", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.elmo_batch_preprocess.main": [[120, 150], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "elmo_batch_preprocess.load_elmo", "elmo_batch_preprocess.load_token", "elmo_batch_preprocess.load_token", "elmo_batch_preprocess.load_batched", "elmo_batch_preprocess.process", "torch.cuda.set_device", "t.lower", "t.lower"], "function", ["home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.elmo_preprocess.load_elmo", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.elmo_preprocess.load_token", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.elmo_preprocess.load_token", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.elmo_batch_preprocess.load_batched", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.evaluation.process"], ["", "def", "main", "(", "arguments", ")", ":", "\n", "\t", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "description", "=", "__doc__", ",", "\n", "formatter_class", "=", "argparse", ".", "ArgumentDefaultsHelpFormatter", ")", "\n", "parser", ".", "add_argument", "(", "'--gpuid'", ",", "help", "=", "\"The gpuid\"", ",", "type", "=", "int", ",", "default", "=", "-", "1", ")", "\n", "parser", ".", "add_argument", "(", "'--src'", ",", "help", "=", "\"Path to the tokenized premise\"", ",", "default", "=", "\"data/nli_bias/dev.sent1.txt\"", ")", "\n", "parser", ".", "add_argument", "(", "'--tgt'", ",", "help", "=", "\"Path to the tokenized hypothesis\"", ",", "default", "=", "\"data/nli_bias/dev.sent2.txt\"", ")", "\n", "parser", ".", "add_argument", "(", "'--bias'", ",", "help", "=", "\"Path to the elmo bias file, (optional)\"", ",", "default", "=", "\"\"", ")", "\n", "parser", ".", "add_argument", "(", "'--num_bias'", ",", "help", "=", "\"The number of bias directions\"", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "parser", ".", "add_argument", "(", "'--lowercase'", ",", "help", "=", "\"Whether to embed input in lower case\"", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "parser", ".", "add_argument", "(", "'--contract_v1'", ",", "help", "=", "\"Path to the elmo contraction dir 1, (optional)\"", ",", "default", "=", "\"\"", ")", "\n", "parser", ".", "add_argument", "(", "'--contract_v2'", ",", "help", "=", "\"Path to the elmo contraction dir 2, (optional)\"", ",", "default", "=", "\"\"", ")", "\n", "parser", ".", "add_argument", "(", "'--batched'", ",", "help", "=", "\"The batched hdf5 file from preprocess.py\"", ",", "default", "=", "'data/nli_bias/snli-val.hdf5'", ")", "\n", "parser", ".", "add_argument", "(", "'--output'", ",", "help", "=", "\"Prefix of output files\"", ",", "default", "=", "\"data/nli_bias/dev\"", ")", "\n", "opt", "=", "parser", ".", "parse_args", "(", "arguments", ")", "\n", "\n", "if", "opt", ".", "gpuid", "!=", "-", "1", ":", "\n", "\t\t", "torch", ".", "cuda", ".", "set_device", "(", "opt", ".", "gpuid", ")", "\n", "\n", "\n", "", "elmo", "=", "load_elmo", "(", "opt", ")", "\n", "src", "=", "load_token", "(", "opt", ".", "src", ")", "\n", "tgt", "=", "load_token", "(", "opt", ".", "tgt", ")", "\n", "\n", "if", "opt", ".", "lowercase", "==", "1", ":", "\n", "\t\t", "src", "=", "[", "[", "t", ".", "lower", "(", ")", "for", "t", "in", "s", "]", "for", "s", "in", "src", "]", "\n", "tgt", "=", "[", "[", "t", ".", "lower", "(", ")", "for", "t", "in", "s", "]", "for", "s", "in", "tgt", "]", "\n", "\n", "", "batched", "=", "load_batched", "(", "opt", ")", "\n", "process", "(", "opt", ",", "src", ",", "tgt", ",", "batched", ",", "elmo", ",", "opt", ".", "output", "+", "'.elmo.hdf5'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.holder.Holder.__setitem__": [[3, 5], ["None"], "methods", ["None"], ["    ", "def", "__setitem__", "(", "self", ",", "key", ",", "item", ")", ":", "\n", "        ", "self", ".", "__dict__", "[", "key", "]", "=", "item", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.holder.Holder.__getitem__": [[6, 8], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "key", ")", ":", "\n", "        ", "return", "self", ".", "__dict__", "[", "key", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.holder.Holder.__repr__": [[9, 11], ["repr"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "repr", "(", "self", ".", "__dict__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.holder.Holder.__len__": [[12, 14], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "__dict__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.holder.Holder.__delitem__": [[15, 17], ["None"], "methods", ["None"], ["", "def", "__delitem__", "(", "self", ",", "key", ")", ":", "\n", "        ", "del", "self", ".", "__dict__", "[", "key", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.holder.Holder.clear": [[18, 20], ["holder.Holder.__dict__.clear"], "methods", ["home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.holder.Holder.clear"], ["", "def", "clear", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__dict__", ".", "clear", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.holder.Holder.copy": [[21, 23], ["holder.Holder.__dict__.copy"], "methods", ["home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.holder.Holder.copy"], ["", "def", "copy", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__dict__", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.holder.Holder.has_key": [[24, 26], ["None"], "methods", ["None"], ["", "def", "has_key", "(", "self", ",", "k", ")", ":", "\n", "        ", "return", "k", "in", "self", ".", "__dict__", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.holder.Holder.update": [[27, 29], ["holder.Holder.__dict__.update"], "methods", ["home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.holder.Holder.update"], ["", "def", "update", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "__dict__", ".", "update", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.holder.Holder.keys": [[30, 32], ["holder.Holder.__dict__.keys"], "methods", ["home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.holder.Holder.keys"], ["", "def", "keys", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__dict__", ".", "keys", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.holder.Holder.values": [[33, 35], ["holder.Holder.__dict__.values"], "methods", ["home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.holder.Holder.values"], ["", "def", "values", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__dict__", ".", "values", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.holder.Holder.items": [[36, 38], ["holder.Holder.__dict__.items"], "methods", ["home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.holder.Holder.items"], ["", "def", "items", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__dict__", ".", "items", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.holder.Holder.pop": [[39, 41], ["holder.Holder.__dict__.pop"], "methods", ["home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.holder.Holder.pop"], ["", "def", "pop", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "return", "self", ".", "__dict__", ".", "pop", "(", "*", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.holder.Holder.__cmp__": [[42, 44], ["holder.Holder.__cmp__"], "methods", ["home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.holder.Holder.__cmp__"], ["", "def", "__cmp__", "(", "self", ",", "dict_", ")", ":", "\n", "        ", "return", "self", ".", "__cmp__", "(", "self", ".", "__dict__", ",", "dict_", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.holder.Holder.__contains__": [[45, 47], ["None"], "methods", ["None"], ["", "def", "__contains__", "(", "self", ",", "item", ")", ":", "\n", "        ", "return", "item", "in", "self", ".", "__dict__", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.holder.Holder.__iter__": [[48, 50], ["iter"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "iter", "(", "self", ".", "__dict__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.holder.Holder.__unicode__": [[51, 53], ["unicode", "repr"], "methods", ["None"], ["", "def", "__unicode__", "(", "self", ")", ":", "\n", "        ", "return", "unicode", "(", "repr", "(", "self", ".", "__dict__", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.multiclass_loss.MulticlassLoss.__init__": [[12, 23], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.classifier.local_classifier.LocalClassifier.__init__"], ["\t", "def", "__init__", "(", "self", ",", "opt", ",", "shared", ")", ":", "\n", "\t\t", "super", "(", "MulticlassLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "opt", "=", "opt", "\n", "self", ".", "shared", "=", "shared", "\n", "\n", "self", ".", "num_correct", "=", "0", "\n", "self", ".", "num_ex", "=", "0", "\n", "self", ".", "verbose", "=", "False", "\n", "# NOTE, do not creat loss node globally", "\n", "\n", "self", ".", "all_preds", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.multiclass_loss.MulticlassLoss.forward": [[25, 47], ["torch.nn.NLLLoss", "crit.cuda.cuda.", "numpy.equal().sum", "hasattr", "crit.cuda.cuda.cuda", "util.pick_label", "enumerate", "numpy.equal", "log_p.data.cpu", "zip", "multiclass_loss.MulticlassLoss.all_preds.append", "util.pick_label", "gold.cpu", "log_p.data.cpu", "gold.cpu"], "methods", ["home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.util.pick_label", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.util.pick_label"], ["", "def", "forward", "(", "self", ",", "pred", ",", "gold", ")", ":", "\n", "\t\t", "log_p", "=", "pred", "\n", "batch_l", "=", "self", ".", "shared", ".", "batch_l", "\n", "assert", "(", "pred", ".", "shape", "==", "(", "batch_l", ",", "self", ".", "opt", ".", "num_label", ")", ")", "\n", "\n", "# loss", "\n", "crit", "=", "torch", ".", "nn", ".", "NLLLoss", "(", "reduction", "=", "'sum'", ")", "# for pytorch < 0.4.1, use size_average=False", "\n", "if", "self", ".", "opt", ".", "gpuid", "!=", "-", "1", ":", "\n", "\t\t\t", "crit", "=", "crit", ".", "cuda", "(", ")", "\n", "", "loss", "=", "crit", "(", "log_p", ",", "gold", "[", ":", "]", ")", "\n", "\n", "# stats", "\n", "self", ".", "num_correct", "+=", "np", ".", "equal", "(", "pick_label", "(", "log_p", ".", "data", ".", "cpu", "(", ")", ")", ",", "gold", ".", "cpu", "(", ")", ")", ".", "sum", "(", ")", "\n", "self", ".", "num_ex", "+=", "batch_l", "\n", "\n", "if", "hasattr", "(", "self", ".", "opt", ",", "'pred_output'", ")", ":", "\n", "\t\t\t", "preds", "=", "pick_label", "(", "log_p", ".", "data", ".", "cpu", "(", ")", ")", "\n", "for", "k", ",", "(", "ex_idx", ",", "p", ")", "in", "enumerate", "(", "zip", "(", "self", ".", "shared", ".", "batch_ex_idx", ",", "preds", ")", ")", ":", "\n", "\t\t\t\t", "self", ".", "all_preds", ".", "append", "(", "[", "ex_idx", ",", "p", ",", "gold", ".", "cpu", "(", ")", "[", "k", "]", "]", ")", "\n", "\n", "\n", "", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.multiclass_loss.MulticlassLoss.print_cur_stats": [[50, 53], ["float"], "methods", ["None"], ["", "def", "print_cur_stats", "(", "self", ")", ":", "\n", "\t\t", "stats", "=", "'Acc {0:.3f} '", ".", "format", "(", "float", "(", "self", ".", "num_correct", ")", "/", "self", ".", "num_ex", ")", "\n", "return", "stats", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.multiclass_loss.MulticlassLoss.get_epoch_metric": [[55, 58], ["float"], "methods", ["None"], ["", "def", "get_epoch_metric", "(", "self", ")", ":", "\n", "\t\t", "acc", "=", "float", "(", "self", ".", "num_correct", ")", "/", "self", ".", "num_ex", "\n", "return", "acc", ",", "[", "acc", "]", "# and any other scalar metrics\t", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.multiclass_loss.MulticlassLoss.begin_pass": [[60, 65], ["None"], "methods", ["None"], ["", "def", "begin_pass", "(", "self", ")", ":", "\n", "# clear stats", "\n", "\t\t", "self", ".", "num_correct", "=", "0", "\n", "self", ".", "num_ex", "=", "0", "\n", "self", ".", "all_preds", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.multiclass_loss.MulticlassLoss.end_pass": [[66, 73], ["hasattr", "print", "open", "f.write"], "methods", ["home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.preprocess.Indexer.write"], ["", "def", "end_pass", "(", "self", ")", ":", "\n", "\t\t", "if", "hasattr", "(", "self", ".", "opt", ",", "'pred_output'", ")", ":", "\n", "\t\t\t", "pred_path", "=", "self", ".", "opt", ".", "pred_output", "+", "'.pred.txt'", "\n", "print", "(", "'writing predictions to {0}'", ".", "format", "(", "pred_path", ")", ")", "\n", "with", "open", "(", "pred_path", ",", "'w'", ")", "as", "f", ":", "\n", "\t\t\t\t", "for", "idx", ",", "p", ",", "g", "in", "self", ".", "all_preds", ":", "\n", "\t\t\t\t\t", "f", ".", "write", "(", "'{0}\\t{1}\\t{2}\\n'", ".", "format", "(", "idx", ",", "p", ",", "g", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.contraction.maxSpan": [[8, 18], ["range", "len", "range", "len", "numpy.abs", "numpy.linalg.norm", "numpy.linalg.norm", "numpy.matmul", "numpy.vstack", "numpy.linalg.norm", "numpy.linalg.norm"], "function", ["None"], ["def", "maxSpan", "(", "V1", ",", "V2", ")", ":", "\n", "\t", "maxVal", "=", "-", "2000000", "\n", "for", "i", "in", "range", "(", "len", "(", "V1", ")", ")", ":", "\n", "\t\t", "for", "j", "in", "range", "(", "len", "(", "V2", ")", ")", ":", "\n", "\n", "\t\t\t", "dot", "=", "np", ".", "abs", "(", "np", ".", "matmul", "(", "V1", "[", "i", "]", ",", "V2", "[", "j", "]", ".", "T", ")", ")", "\n", "if", "dot", ">=", "maxVal", ":", "\n", "\t\t\t\t", "maxVal", "=", "dot", "\n", "vec", "=", "np", ".", "vstack", "(", "(", "V1", "[", "i", "]", "/", "np", ".", "linalg", ".", "norm", "(", "V1", "[", "i", "]", ")", ",", "V2", "[", "j", "]", "/", "np", ".", "linalg", ".", "norm", "(", "V2", "[", "j", "]", ")", ")", ")", "\n", "", "", "", "return", "V1", "[", "i", "]", "/", "np", ".", "linalg", ".", "norm", "(", "V1", "[", "i", "]", ")", ",", "V2", "[", "j", "]", "/", "np", ".", "linalg", ".", "norm", "(", "V2", "[", "j", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.contraction.proj": [[19, 21], ["numpy.dot", "numpy.dot"], "function", ["None"], ["", "def", "proj", "(", "u", ",", "a", ")", ":", "\n", "\t", "return", "(", "(", "np", ".", "dot", "(", "u", ",", "a", ".", "T", ")", ")", "*", "u", ")", "/", "(", "np", ".", "dot", "(", "u", ",", "u", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.contraction.gsConstrained": [[23, 38], ["numpy.asarray().reshape", "numpy.asarray().reshape", "numpy.zeros", "range", "numpy.linalg.norm", "contraction.proj", "numpy.linalg.norm", "range", "numpy.asarray", "numpy.asarray", "len", "numpy.linalg.norm", "numpy.shape", "numpy.shape", "contraction.proj"], "function", ["home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.contractionFunc.proj", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.contractionFunc.proj"], ["", "def", "gsConstrained", "(", "matrix", ",", "v1", ",", "v2", ")", ":", "\n", "\t", "v1", "=", "np", ".", "asarray", "(", "v1", ")", ".", "reshape", "(", "-", "1", ")", "\n", "v2", "=", "np", ".", "asarray", "(", "v2", ")", ".", "reshape", "(", "-", "1", ")", "\n", "u", "=", "np", ".", "zeros", "(", "(", "np", ".", "shape", "(", "matrix", ")", "[", "0", "]", ",", "np", ".", "shape", "(", "matrix", ")", "[", "1", "]", ")", ")", "\n", "u", "[", "0", "]", "=", "v1", "\n", "u", "[", "0", "]", "=", "u", "[", "0", "]", "/", "np", ".", "linalg", ".", "norm", "(", "u", "[", "0", "]", ")", "\n", "u", "[", "1", "]", "=", "v2", "-", "proj", "(", "u", "[", "0", "]", ",", "v2", ")", "\n", "u", "[", "1", "]", "=", "u", "[", "1", "]", "/", "np", ".", "linalg", ".", "norm", "(", "u", "[", "1", "]", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "matrix", ")", "-", "2", ")", ":", "\n", "\t\t", "p", "=", "0.0", "\n", "for", "j", "in", "range", "(", "0", ",", "i", "+", "2", ")", ":", "\n", "\t\t\t", "p", "=", "p", "+", "proj", "(", "u", "[", "j", "]", ",", "matrix", "[", "i", "]", ")", "\n", "", "u", "[", "i", "+", "2", "]", "=", "matrix", "[", "i", "]", "-", "p", "\n", "u", "[", "i", "+", "2", "]", "=", "u", "[", "i", "+", "2", "]", "/", "np", ".", "linalg", ".", "norm", "(", "u", "[", "i", "+", "2", "]", ")", "\n", "", "return", "u", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.contraction.basis": [[40, 45], ["numpy.linalg.norm", "float", "numpy.matmul"], "function", ["None"], ["", "def", "basis", "(", "vec", ")", ":", "\n", "\t", "v1", "=", "vec", "[", "0", "]", ";", "v2", "=", "vec", "[", "1", "]", ";", "\n", "v2Prime", "=", "v2", "-", "v1", "*", "float", "(", "np", ".", "matmul", "(", "v1", ",", "v2", ".", "T", ")", ")", ";", "\n", "v2Prime", "=", "v2Prime", "/", "np", ".", "linalg", ".", "norm", "(", "v2Prime", ")", "\n", "return", "v2Prime", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.contraction.get_basis": [[47, 52], ["v1.bmm", "v2.transpose", "v2_prime.norm"], "function", ["None"], ["", "def", "get_basis", "(", "v1", ",", "v2", ")", ":", "\n", "\t", "proj", "=", "v1", ".", "bmm", "(", "v2", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "v2_prime", "=", "v2", "-", "v1", "*", "proj", "\n", "v2_prime", "=", "v2_prime", "/", "v2_prime", ".", "norm", "(", ")", "\n", "return", "v2_prime", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.contraction.rotate": [[56, 119], ["torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "contraction.get_basis", "torch.cat.view().bmm", "proj1.view.view", "torch.cat.view().bmm", "proj2.view.view", "torch.cat", "one_zero.view.bmm", "torch.sqrt", "torch.cat", "one_zero.cuda.view", "torch.acos", "one_zero.view.expand().bmm", "torch.clamp", "torch.acos", "phi.view.view", "zero_one.cuda.view().expand().bmm", "d.view.view", "theta_x.view.view", "torch.autograd.Variable", "torch.cos", "torch.cos", "R.cuda.bmm().view", "torch.cat", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "half_pi.cuda.cuda", "pi.cuda.cuda", "one_zero.cuda.cuda", "zero_one.cuda.cuda", "one_zero.view.expand().transpose", "get_basis.expand().transpose", "torch.cat.transpose", "one_zero.view.bmm", "torch.cat.norm().unsqueeze", "norm_x.view", "norm_x.view", "torch.zeros", "R.cuda.cuda", "torch.sin", "torch.sin", "torch.cat.view", "torch.cat.view", "torch.cat.transpose", "one_zero.view.expand", "zero_one.cuda.view().expand", "cond1.float", "cond4.float", "R.cuda.bmm", "one_zero.view.expand", "get_basis.expand", "torch.cat.norm", "cond2.float", "pi.cuda.view().expand", "cond3.float", "pi.cuda.view().expand", "torch.cat.view", "zero_one.cuda.view", "pi.cuda.view", "pi.cuda.view", "contraction.proj"], "function", ["home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.contraction.get_basis", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.contractionFunc.proj"], ["", "def", "rotate", "(", "opt", ",", "v1", ",", "v2", ",", "x", ")", ":", "\n", "\t", "batch_l", ",", "seq_l", ",", "d", "=", "x", ".", "shape", "\n", "half_pi", "=", "Variable", "(", "torch", ".", "Tensor", "(", "[", "np", ".", "pi", "/", "2", "]", ")", ",", "requires_grad", "=", "False", ")", "\n", "pi", "=", "Variable", "(", "torch", ".", "Tensor", "(", "[", "np", ".", "pi", "]", ")", ",", "requires_grad", "=", "False", ")", "\n", "one_zero", "=", "Variable", "(", "torch", ".", "Tensor", "(", "[", "1", ",", "0", "]", ")", ",", "requires_grad", "=", "False", ")", "\n", "zero_one", "=", "Variable", "(", "torch", ".", "Tensor", "(", "[", "0", ",", "1", "]", ")", ",", "requires_grad", "=", "False", ")", "\n", "if", "opt", ".", "gpuid", "!=", "-", "1", ":", "\n", "\t\t", "half_pi", "=", "half_pi", ".", "cuda", "(", "opt", ".", "gpuid", ")", "\n", "pi", "=", "pi", ".", "cuda", "(", "opt", ".", "gpuid", ")", "\n", "one_zero", "=", "one_zero", ".", "cuda", "(", "opt", ".", "gpuid", ")", "\n", "zero_one", "=", "zero_one", ".", "cuda", "(", "opt", ".", "gpuid", ")", "\n", "\n", "", "v2_prime", "=", "get_basis", "(", "v1", ",", "v2", ")", "\n", "x_prime", "=", "x", "[", ":", ",", ":", ",", "2", ":", "]", "# (batch_l,seq_l,d-2)", "\n", "\n", "proj1", "=", "x", ".", "view", "(", "-", "1", ",", "1", ",", "d", ")", ".", "bmm", "(", "v1", ".", "expand", "(", "batch_l", "*", "seq_l", ",", "1", ",", "d", ")", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "proj1", "=", "proj1", ".", "view", "(", "batch_l", ",", "seq_l", ",", "1", ")", "\n", "proj2", "=", "x", ".", "view", "(", "-", "1", ",", "1", ",", "d", ")", ".", "bmm", "(", "v2_prime", ".", "expand", "(", "batch_l", "*", "seq_l", ",", "1", ",", "d", ")", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "proj2", "=", "proj2", ".", "view", "(", "batch_l", ",", "seq_l", ",", "1", ")", "\n", "\n", "x", "=", "torch", ".", "cat", "(", "[", "proj1", ",", "proj2", "]", ",", "2", ")", "# (batch_l, seq_l, 2)", "\n", "dot", "=", "v1", ".", "bmm", "(", "v2", ".", "transpose", "(", "1", ",", "2", ")", ")", "# (1, 1, 1)", "\n", "normalizer", "=", "torch", ".", "sqrt", "(", "1.0", "-", "dot", "*", "dot", ")", "# (1,1,1)", "\n", "v2", "=", "torch", ".", "cat", "(", "[", "dot", ",", "normalizer", "]", ",", "2", ")", "# (1,1,2)", "\n", "v1", "=", "one_zero", ".", "view", "(", "1", ",", "1", ",", "2", ")", "# (1,1,2)", "\n", "\n", "theta", "=", "torch", ".", "acos", "(", "v1", ".", "bmm", "(", "v2", ".", "transpose", "(", "1", ",", "2", ")", ")", ")", "# (1,1,1)", "\n", "theta_p", "=", "half_pi", "-", "theta", "\n", "norm_x", "=", "x", "/", "x", ".", "norm", "(", "p", "=", "2", ",", "dim", "=", "2", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n", "prod", "=", "v1", ".", "expand", "(", "batch_l", "*", "seq_l", ",", "1", ",", "2", ")", ".", "bmm", "(", "norm_x", ".", "view", "(", "-", "1", ",", "2", ",", "1", ")", ")", "\n", "prod", "=", "torch", ".", "clamp", "(", "prod", ",", "-", "1.0", ",", "1.0", ")", "# need to clamp it in reality", "\n", "phi", "=", "torch", ".", "acos", "(", "prod", ")", "\n", "phi", "=", "phi", ".", "view", "(", "batch_l", ",", "seq_l", ",", "1", ")", "\n", "d", "=", "zero_one", ".", "view", "(", "1", ",", "1", ",", "2", ")", ".", "expand", "(", "batch_l", "*", "seq_l", ",", "1", ",", "2", ")", ".", "bmm", "(", "norm_x", ".", "view", "(", "-", "1", ",", "2", ",", "1", ")", ")", "\n", "d", "=", "d", ".", "view", "(", "batch_l", ",", "seq_l", ",", "1", ")", "\n", "\n", "cond1", "=", "(", "phi", "<", "theta_p", ")", "*", "(", "d", ">", "0", ")", "\n", "cond1", "=", "cond1", ".", "float", "(", ")", "*", "theta", "*", "(", "phi", "/", "theta_p", ")", "\n", "\n", "cond2", "=", "(", "phi", ">", "theta_p", ")", "*", "(", "d", ">", "0", ")", "\n", "cond2", "=", "cond2", ".", "float", "(", ")", "*", "theta", "*", "(", "pi", ".", "view", "(", "1", ",", "1", ",", "1", ")", ".", "expand", "(", "batch_l", ",", "seq_l", ",", "1", ")", "-", "phi", ")", "/", "(", "pi", "-", "theta_p", ")", "\n", "\n", "cond3", "=", "(", "phi", ">=", "pi", "-", "theta_p", ")", "*", "(", "d", "<", "0", ")", "\n", "cond3", "=", "cond3", ".", "float", "(", ")", "*", "theta", "*", "(", "pi", ".", "view", "(", "1", ",", "1", ",", "1", ")", ".", "expand", "(", "batch_l", ",", "seq_l", ",", "1", ")", "-", "phi", ")", "/", "theta_p", "\n", "\n", "cond4", "=", "(", "phi", "<", "pi", "-", "theta_p", ")", "*", "(", "d", "<", "0", ")", "\n", "cond4", "=", "cond4", ".", "float", "(", ")", "*", "theta", "*", "(", "phi", "/", "(", "pi", "-", "theta_p", ")", ")", "\n", "\n", "theta_x", "=", "cond1", "+", "cond2", "+", "cond3", "+", "cond4", "\n", "theta_x", "=", "theta_x", ".", "view", "(", "-", "1", ")", "\n", "\n", "\n", "R", "=", "Variable", "(", "torch", ".", "zeros", "(", "batch_l", "*", "seq_l", ",", "2", ",", "2", ")", ",", "requires_grad", "=", "False", ")", "\n", "if", "opt", ".", "gpuid", "!=", "-", "1", ":", "\n", "\t\t", "R", "=", "R", ".", "cuda", "(", "opt", ".", "gpuid", ")", "\n", "", "R", "[", ":", ",", "0", ",", "0", "]", "=", "torch", ".", "cos", "(", "theta_x", ")", "\n", "R", "[", ":", ",", "0", ",", "1", "]", "=", "-", "torch", ".", "sin", "(", "theta_x", ")", "\n", "R", "[", ":", ",", "1", ",", "0", "]", "=", "-", "torch", ".", "sin", "(", "theta_x", ")", "\n", "R", "[", ":", ",", "1", ",", "1", "]", "=", "torch", ".", "cos", "(", "theta_x", ")", "\n", "\n", "rotated", "=", "R", ".", "bmm", "(", "x", ".", "view", "(", "-", "1", ",", "2", ",", "1", ")", ")", ".", "view", "(", "batch_l", ",", "seq_l", ",", "2", ")", "\n", "return", "torch", ".", "cat", "(", "[", "rotated", ",", "x_prime", "]", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.contraction.correction": [[123, 130], ["U.expand.expand", "U.expand.bmm().view", "contraction.rotate", "U.expand.transpose().bmm", "U.transpose().bmm.view", "rotate.view", "U.expand.bmm", "U.expand.transpose", "x.view"], "function", ["home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.contraction.rotate"], ["", "def", "correction", "(", "opt", ",", "U", ",", "v1", ",", "v2", ",", "x", ")", ":", "\n", "\t", "batch_l", ",", "seq_l", ",", "d", "=", "x", ".", "shape", "\n", "U", "=", "U", ".", "expand", "(", "batch_l", "*", "seq_l", ",", "d", ",", "d", ")", "\n", "proj", "=", "U", ".", "bmm", "(", "x", ".", "view", "(", "batch_l", "*", "seq_l", ",", "d", ",", "1", ")", ")", ".", "view", "(", "batch_l", ",", "seq_l", ",", "d", ")", "\n", "rotated", "=", "rotate", "(", "opt", ",", "v1", ",", "v2", ",", "proj", ")", "\n", "corrected", "=", "U", ".", "transpose", "(", "1", ",", "2", ")", ".", "bmm", "(", "rotated", ".", "view", "(", "-", "1", ",", "d", ",", "1", ")", ")", "\n", "return", "corrected", ".", "view", "(", "batch_l", ",", "seq_l", ",", "d", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.contraction.main": [[132, 173], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "numpy.random.rand", "numpy.random.rand", "contraction.maxSpan", "numpy.identity", "contraction.gsConstrained", "torch.from_numpy().float().view", "torch.from_numpy().float().view", "torch.from_numpy().float().unsqueeze", "torch.randn", "contraction.correction", "util.isnan", "print", "print", "print", "print", "print", "contraction.basis", "print", "numpy.vstack", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "function", ["home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.contractionFunc.maxSpan", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.contractionFunc.gsConstrained", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.contractionFunc.correction", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.util.isnan", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.contractionFunc.basis"], ["", "def", "main", "(", "arguments", ")", ":", "\n", "\t", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "description", "=", "__doc__", ",", "\n", "formatter_class", "=", "argparse", ".", "ArgumentDefaultsHelpFormatter", ")", "\n", "parser", ".", "add_argument", "(", "'--gpuid'", ",", "help", "=", "\"Cuda idx\"", ",", "type", "=", "int", ",", "default", "=", "-", "1", ")", "\n", "parser", ".", "add_argument", "(", "'--v1'", ",", "help", "=", "\"Path to dir 1 vector\"", ",", "default", "=", "\"\"", ")", "\n", "parser", ".", "add_argument", "(", "'--v2'", ",", "help", "=", "\"Path to dir 2 vector\"", ",", "default", "=", "\"\"", ")", "\n", "parser", ".", "add_argument", "(", "'--dim'", ",", "help", "=", "\"dimension of vector\"", ",", "type", "=", "int", ",", "default", "=", "300", ")", "\n", "opt", "=", "parser", ".", "parse_args", "(", "arguments", ")", "\n", "\n", "#Running it", "\n", "dimensions", "=", "opt", ".", "dim", "\n", "\n", "#loading the two direction vector files", "\n", "#V1 = np.asmatrix(np.loadtxt(opt.v1))", "\n", "#V2 = np.asmatrix(np.loadtxt(opt.v2))", "\n", "V1", "=", "np", ".", "random", ".", "rand", "(", "1", ",", "opt", ".", "dim", ")", "\n", "V2", "=", "np", ".", "random", ".", "rand", "(", "3", ",", "opt", ".", "dim", ")", "\n", "v1", ",", "v2", "=", "maxSpan", "(", "V1", ",", "V2", ")", "\n", "\n", "#calculating U once is enough", "\n", "U", "=", "np", ".", "identity", "(", "dimensions", ")", "\n", "U", "=", "gsConstrained", "(", "U", ",", "v1", ",", "basis", "(", "np", ".", "vstack", "(", "(", "v1", ",", "v2", ")", ")", ")", ")", "\n", "\n", "v1", "=", "torch", ".", "from_numpy", "(", "v1", ")", ".", "float", "(", ")", ".", "view", "(", "1", ",", "1", ",", "opt", ".", "dim", ")", "\n", "v2", "=", "torch", ".", "from_numpy", "(", "v2", ")", ".", "float", "(", ")", ".", "view", "(", "1", ",", "1", ",", "opt", ".", "dim", ")", "\n", "U", "=", "torch", ".", "from_numpy", "(", "U", ")", ".", "float", "(", ")", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "x", "=", "torch", ".", "randn", "(", "50", ",", "300", ",", "300", ")", "\n", "\n", "#calculating for each word vector x, it's sheared form after contraction", "\n", "result", "=", "correction", "(", "opt", ",", "U", ",", "v1", ",", "v2", ",", "x", ")", "\n", "\n", "if", "isnan", "(", "result", ")", ":", "\n", "\t\t", "print", "(", "'*********** nan found'", ")", "\n", "\n", "", "print", "(", "result", ".", "shape", ")", "\n", "print", "(", "U", ".", "shape", ")", "\n", "print", "(", "v1", ".", "shape", ")", "\n", "print", "(", "v2", ".", "shape", ")", "\n", "print", "(", "x", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.get_pretrain_vecs.load_glove_vec": [[8, 30], ["open", "line.split", "numpy.array", "list", "print", "len", "map", "len", "len"], "function", ["None"], ["def", "load_glove_vec", "(", "fname", ",", "vocab", ")", ":", "\n", "    ", "dim", "=", "0", "\n", "word_vecs", "=", "{", "}", "\n", "word_vec_size", "=", "None", "\n", "for", "line", "in", "open", "(", "fname", ",", "'r'", ")", ":", "\n", "        ", "d", "=", "line", ".", "split", "(", ")", "\n", "\n", "# get info from the first word", "\n", "if", "word_vec_size", "is", "None", ":", "\n", "          ", "word_vec_size", "=", "len", "(", "d", ")", "-", "1", "\n", "\n", "", "word", "=", "' '", ".", "join", "(", "d", "[", ":", "len", "(", "d", ")", "-", "word_vec_size", "]", ")", "\n", "vec", "=", "d", "[", "-", "word_vec_size", ":", "]", "\n", "vec", "=", "np", ".", "array", "(", "list", "(", "map", "(", "float", ",", "vec", ")", ")", ")", "\n", "dim", "=", "vec", ".", "size", "\n", "\n", "if", "len", "(", "d", ")", "-", "word_vec_size", "!=", "1", ":", "\n", "          ", "print", "(", "'multi word token found: {0}'", ".", "format", "(", "line", ")", ")", "\n", "\n", "", "if", "word", "in", "vocab", ":", "\n", "            ", "word_vecs", "[", "word", "]", "=", "vec", "\n", "", "", "return", "word_vecs", ",", "dim", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.get_pretrain_vecs.main": [[31, 59], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "list", "print", "get_pretrain_vecs.load_glove_vec", "print", "numpy.random.normal", "print", "w2v.items", "open().read().split", "map", "h5py.File", "numpy.array", "str", "len", "str", "open().read", "len", "len", "len", "int", "open", "x.split", "x.split"], "function", ["home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.get_pretrain_vecs.load_glove_vec", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.holder.Holder.items"], ["", "def", "main", "(", ")", ":", "\n", "  ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "description", "=", "__doc__", ",", "\n", "formatter_class", "=", "argparse", ".", "RawDescriptionHelpFormatter", ")", "\n", "parser", ".", "add_argument", "(", "'--dict'", ",", "help", "=", "\"The extracted token file (only tokens that are in the vocab)\"", ",", "default", "=", "'data/snli.word.dict'", ")", "\n", "parser", ".", "add_argument", "(", "'--glove'", ",", "help", "=", "'The pretrained word vectors'", ",", "default", "=", "''", ")", "\n", "parser", ".", "add_argument", "(", "'--output'", ",", "help", "=", "\"output hdf5 file\"", ",", "default", "=", "'data/glove'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "vocab", "=", "open", "(", "args", ".", "dict", ",", "\"r\"", ")", ".", "read", "(", ")", ".", "split", "(", "\"\\n\"", ")", "[", ":", "-", "1", "]", "\n", "vocab", "=", "list", "(", "map", "(", "lambda", "x", ":", "(", "x", ".", "split", "(", ")", "[", "0", "]", ",", "int", "(", "x", ".", "split", "(", ")", "[", "1", "]", ")", ")", ",", "vocab", ")", ")", "\n", "word2idx", "=", "{", "x", "[", "0", "]", ":", "x", "[", "1", "]", "for", "x", "in", "vocab", "}", "\n", "\n", "print", "(", "\"vocab size: \"", "+", "str", "(", "len", "(", "vocab", ")", ")", ")", "\n", "w2v", ",", "dim", "=", "load_glove_vec", "(", "args", ".", "glove", ",", "word2idx", ")", "\n", "print", "(", "\"matched word vector size: {0}, dim: {1}\"", ".", "format", "(", "len", "(", "w2v", ")", ",", "dim", ")", ")", "\n", "\n", "rs", "=", "np", ".", "random", ".", "normal", "(", "scale", "=", "0.05", ",", "size", "=", "(", "len", "(", "vocab", ")", ",", "dim", ")", ")", "\n", "# TODO, normalize or not???? ", "\n", "#for i in range(len(vocab)):", "\n", "#  rs[i] = rs[i] / np.linalg.norm(rs[i])", "\n", "\n", "print", "(", "\"num words in pretrained model is \"", "+", "str", "(", "len", "(", "w2v", ")", ")", ")", "\n", "for", "word", ",", "vec", "in", "w2v", ".", "items", "(", ")", ":", "\n", "      ", "rs", "[", "word2idx", "[", "word", "]", "]", "=", "vec", "\n", "\n", "", "with", "h5py", ".", "File", "(", "args", ".", "output", "+", "'.hdf5'", ",", "\"w\"", ")", "as", "f", ":", "\n", "    ", "f", "[", "\"word_vecs\"", "]", "=", "np", ".", "array", "(", "rs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.preprocess_unlabeled.Indexer.__init__": [[16, 29], ["range", "len", "len", "str"], "methods", ["None"], ["\t", "def", "__init__", "(", "self", ",", "symbols", "=", "[", "\"<blank>\"", "]", ",", "num_oov", "=", "100", ")", ":", "\n", "\t\t", "self", ".", "num_oov", "=", "num_oov", "\n", "\n", "self", ".", "d", "=", "{", "}", "\n", "self", ".", "cnt", "=", "{", "}", "\n", "for", "s", "in", "symbols", ":", "\n", "\t\t\t", "self", ".", "d", "[", "s", "]", "=", "len", "(", "self", ".", "d", ")", "\n", "self", ".", "cnt", "[", "s", "]", "=", "0", "\n", "\n", "", "for", "i", "in", "range", "(", "self", ".", "num_oov", ")", ":", "#hash oov words to one of 100 random embeddings", "\n", "\t\t\t", "oov_word", "=", "'<oov'", "+", "str", "(", "i", ")", "+", "'>'", "\n", "self", ".", "d", "[", "oov_word", "]", "=", "len", "(", "self", ".", "d", ")", "\n", "self", ".", "cnt", "[", "oov_word", "]", "=", "10000000", "# have a large number for oov word to avoid being pruned", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.preprocess_unlabeled.Indexer.convert": [[30, 32], ["str", "numpy.random.randint"], "methods", ["None"], ["", "", "def", "convert", "(", "self", ",", "w", ")", ":", "\n", "\t\t", "return", "self", ".", "d", "[", "w", "]", "if", "w", "in", "self", ".", "d", "else", "self", ".", "d", "[", "'<oov'", "+", "str", "(", "np", ".", "random", ".", "randint", "(", "self", ".", "num_oov", ")", ")", "+", "'>'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.preprocess_unlabeled.Indexer.convert_sequence": [[33, 35], ["preprocess_unlabeled.Indexer.convert"], "methods", ["home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.preprocess.convert"], ["", "def", "convert_sequence", "(", "self", ",", "ls", ")", ":", "\n", "\t\t", "return", "[", "self", ".", "convert", "(", "l", ")", "for", "l", "in", "ls", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.preprocess_unlabeled.Indexer.write": [[36, 47], ["print", "len", "len", "len", "len", "open", "items.sort", "preprocess_unlabeled.Indexer.d.items", "f.write", "f.write"], "methods", ["home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.holder.Holder.items", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.preprocess.Indexer.write", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.preprocess.Indexer.write"], ["", "def", "write", "(", "self", ",", "outfile", ",", "with_cnt", "=", "True", ")", ":", "\n", "\t\t", "print", "(", "len", "(", "self", ".", "d", ")", ",", "len", "(", "self", ".", "cnt", ")", ")", "\n", "assert", "(", "len", "(", "self", ".", "d", ")", "==", "len", "(", "self", ".", "cnt", ")", ")", "\n", "with", "open", "(", "outfile", ",", "'w+'", ")", "as", "f", ":", "\n", "\t\t\t", "items", "=", "[", "(", "v", ",", "k", ")", "for", "k", ",", "v", "in", "self", ".", "d", ".", "items", "(", ")", "]", "\n", "items", ".", "sort", "(", ")", "\n", "for", "v", ",", "k", "in", "items", ":", "\n", "\t\t\t\t", "if", "with_cnt", ":", "\n", "\t\t\t\t\t", "f", ".", "write", "(", "'{0} {1} {2}\\n'", ".", "format", "(", "k", ",", "v", ",", "self", ".", "cnt", "[", "k", "]", ")", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "f", ".", "write", "(", "'{0} {1}\\n'", ".", "format", "(", "k", ",", "v", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.preprocess_unlabeled.Indexer.set_word": [[48, 51], ["None"], "methods", ["None"], ["", "", "", "", "def", "set_word", "(", "self", ",", "w", ",", "idx", ",", "count", ")", ":", "\n", "\t\t", "self", ".", "d", "[", "w", "]", "=", "idx", "\n", "self", ".", "cnt", "[", "w", "]", "=", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.preprocess_unlabeled.Indexer.register_words": [[54, 61], ["len"], "methods", ["None"], ["", "def", "register_words", "(", "self", ",", "wv", ",", "seq", ",", "count", ")", ":", "\n", "\t\t", "for", "w", "in", "seq", ":", "\n", "\t\t\t", "if", "w", "in", "wv", "and", "w", "not", "in", "self", ".", "d", ":", "\n", "\t\t\t\t", "self", ".", "d", "[", "w", "]", "=", "len", "(", "self", ".", "d", ")", "\n", "self", ".", "cnt", "[", "w", "]", "=", "0", "\n", "", "if", "w", "in", "self", ".", "cnt", ":", "\n", "\t\t\t\t", "self", ".", "cnt", "[", "w", "]", "=", "self", ".", "cnt", "[", "w", "]", "+", "1", "if", "count", "else", "self", ".", "cnt", "[", "w", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.preprocess_unlabeled.Indexer.register_all_words": [[63, 70], ["len"], "methods", ["None"], ["", "", "", "def", "register_all_words", "(", "self", ",", "seq", ",", "count", ")", ":", "\n", "\t\t", "for", "w", "in", "seq", ":", "\n", "\t\t\t", "if", "w", "not", "in", "self", ".", "d", ":", "\n", "\t\t\t\t", "self", ".", "d", "[", "w", "]", "=", "len", "(", "self", ".", "d", ")", "\n", "self", ".", "cnt", "[", "w", "]", "=", "0", "\n", "", "if", "w", "in", "self", ".", "cnt", ":", "\n", "\t\t\t\t", "self", ".", "cnt", "[", "w", "]", "=", "self", ".", "cnt", "[", "w", "]", "+", "1", "if", "count", "else", "self", ".", "cnt", "[", "w", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.preprocess_unlabeled.pad": [[72, 79], ["len", "len", "len"], "function", ["None"], ["", "", "", "", "def", "pad", "(", "ls", ",", "length", ",", "symbol", ",", "pad_back", "=", "True", ")", ":", "\n", "\t", "if", "len", "(", "ls", ")", ">=", "length", ":", "\n", "\t\t", "return", "ls", "[", ":", "length", "]", "\n", "", "if", "pad_back", ":", "\n", "\t\t", "return", "ls", "+", "[", "symbol", "]", "*", "(", "length", "-", "len", "(", "ls", ")", ")", "\n", "", "else", ":", "\n", "\t\t", "return", "[", "symbol", "]", "*", "(", "length", "-", "len", "(", "ls", ")", ")", "+", "ls", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.preprocess_unlabeled.get_glove_words": [[81, 87], ["set", "open", "[].strip", "set.add", "line.split"], "function", ["None"], ["", "", "def", "get_glove_words", "(", "f", ")", ":", "\n", "\t", "glove_words", "=", "set", "(", ")", "\n", "for", "line", "in", "open", "(", "f", ",", "\"r\"", ")", ":", "\n", "\t\t", "word", "=", "line", ".", "split", "(", ")", "[", "0", "]", ".", "strip", "(", ")", "\n", "glove_words", ".", "add", "(", "word", ")", "\n", "", "return", "glove_words", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.preprocess_unlabeled.make_vocab": [[89, 112], ["enumerate", "zip", "targ_orig.lower.strip().split", "src_orig.lower.strip().split", "all_word_indexer.register_all_words", "word_indexer.register_words", "all_word_indexer.register_all_words", "word_indexer.register_words", "open", "open", "src_orig.lower.rstrip", "src_orig.lower.lower", "targ_orig.lower.lower", "targ_orig.lower.strip", "src_orig.lower.strip", "len", "len"], "function", ["home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.preprocess.Indexer.register_all_words", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.preprocess.Indexer.register_words", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.preprocess.Indexer.register_all_words", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.preprocess.Indexer.register_words"], ["", "def", "make_vocab", "(", "opt", ",", "glove_vocab", ",", "word_indexer", ",", "all_word_indexer", ",", "label_indexer", ",", "sent1", ",", "sent2", ",", "max_seq_l", ",", "count", ")", ":", "\n", "\t", "num_ex", "=", "0", "\n", "for", "_", ",", "(", "src_orig", ",", "targ_orig", ")", "in", "enumerate", "(", "zip", "(", "open", "(", "sent1", ",", "'r'", ")", ",", "open", "(", "sent2", ",", "'r'", ")", ")", ")", ":", "\n", "\t\t", "if", "src_orig", ".", "rstrip", "(", ")", "==", "''", ":", "\n", "\t\t\t", "continue", "\n", "", "if", "opt", ".", "lowercase", "==", "1", ":", "\n", "\t\t\t", "src_orig", "=", "src_orig", ".", "lower", "(", ")", "\n", "targ_orig", "=", "targ_orig", ".", "lower", "(", ")", "\n", "\n", "", "targ", "=", "targ_orig", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "src", "=", "src_orig", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "\n", "assert", "(", "len", "(", "targ", ")", "<=", "max_seq_l", "and", "len", "(", "src", ")", "<=", "max_seq_l", ")", "\n", "\n", "all_word_indexer", ".", "register_all_words", "(", "targ", ",", "count", ")", "\n", "word_indexer", ".", "register_words", "(", "glove_vocab", ",", "targ", ",", "count", ")", "\n", "\n", "all_word_indexer", ".", "register_all_words", "(", "src", ",", "count", ")", "\n", "word_indexer", ".", "register_words", "(", "glove_vocab", ",", "src", ",", "count", ")", "\n", "\n", "num_ex", "+=", "1", "\n", "\n", "", "return", "num_ex", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.preprocess_unlabeled.load_vocab_to_indexer": [[114, 125], ["set", "open", "l.split", "set.add", "word_indexer.set_word", "l.rstrip", "int", "int"], "function", ["home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.preprocess_unlabeled.Indexer.set_word"], ["", "def", "load_vocab_to_indexer", "(", "path", ",", "word_indexer", ")", ":", "\n", "\t", "vocab", "=", "set", "(", ")", "\n", "with", "open", "(", "path", ",", "'r'", ")", "as", "f", ":", "\n", "\t\t", "for", "l", "in", "f", ":", "\n", "\t\t\t", "if", "l", ".", "rstrip", "(", ")", "==", "''", ":", "\n", "\t\t\t\t", "continue", "\n", "", "p", "=", "l", ".", "split", "(", ")", "\n", "tok", ",", "idx", ",", "cnt", "=", "p", "[", "0", "]", ",", "int", "(", "p", "[", "1", "]", ")", ",", "int", "(", "p", "[", "2", "]", ")", "\n", "vocab", ".", "add", "(", "tok", ")", "\n", "#", "\n", "word_indexer", ".", "set_word", "(", "tok", ",", "idx", ",", "cnt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.preprocess_unlabeled.convert": [[128, 254], ["numpy.random.seed", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.array", "enumerate", "print", "sorted", "enumerate", "range", "range", "h5py.File", "numpy.array", "numpy.array", "print", "h5py.File.close", "zip", "preprocess_unlabeled.pad", "word_indexer.convert_sequence", "preprocess_unlabeled.pad", "word_indexer.convert_sequence", "preprocess_unlabeled.pad", "all_word_indexer.convert_sequence", "preprocess_unlabeled.pad", "all_word_indexer.convert_sequence", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.random.permutation", "len", "batch_location.append", "len", "batch_l.append", "source_l_new.append", "target_l_new.append", "range", "open", "open", "src_orig.lower.rstrip", "src_orig.lower.lower", "targ_orig.lower.lower", "targ_orig.lower.strip().split", "src_orig.lower.strip().split", "print", "batch_location.append", "len", "min", "batch_idx.append", "len", "len", "range", "enumerate", "len", "sources[].sum", "targ_orig.lower.strip", "src_orig.lower.strip", "len"], "function", ["home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.preprocess.pad", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.preprocess.Indexer.convert_sequence", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.preprocess.pad", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.preprocess.Indexer.convert_sequence", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.preprocess.pad", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.preprocess.Indexer.convert_sequence", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.preprocess.pad", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.preprocess.Indexer.convert_sequence"], ["", "", "", "def", "convert", "(", "opt", ",", "word_indexer", ",", "all_word_indexer", ",", "label_indexer", ",", "sent1", ",", "sent2", ",", "output", ",", "num_ex", ")", ":", "\n", "\t", "np", ".", "random", ".", "seed", "(", "opt", ".", "seed", ")", "\n", "\n", "max_seq_l", "=", "opt", ".", "max_seq_l", "+", "1", "#add 1 for BOS", "\n", "targets", "=", "np", ".", "zeros", "(", "(", "num_ex", ",", "max_seq_l", ")", ",", "dtype", "=", "int", ")", "\n", "sources", "=", "np", ".", "zeros", "(", "(", "num_ex", ",", "max_seq_l", ")", ",", "dtype", "=", "int", ")", "\n", "all_sources", "=", "np", ".", "zeros", "(", "(", "num_ex", ",", "opt", ".", "max_seq_l", ")", ",", "dtype", "=", "int", ")", "\n", "all_targets", "=", "np", ".", "zeros", "(", "(", "num_ex", ",", "opt", ".", "max_seq_l", ")", ",", "dtype", "=", "int", ")", "\n", "labels", "=", "np", ".", "zeros", "(", "(", "num_ex", ",", ")", ",", "dtype", "=", "int", ")", "# fake some labels to have data format compatible with dev/test", "\n", "source_lengths", "=", "np", ".", "zeros", "(", "(", "num_ex", ",", ")", ",", "dtype", "=", "int", ")", "\n", "target_lengths", "=", "np", ".", "zeros", "(", "(", "num_ex", ",", ")", ",", "dtype", "=", "int", ")", "\n", "ex_idx", "=", "np", ".", "zeros", "(", "num_ex", ",", "dtype", "=", "int", ")", "\n", "batch_keys", "=", "np", ".", "array", "(", "[", "None", "for", "_", "in", "range", "(", "num_ex", ")", "]", ")", "\n", "\n", "ex_id", "=", "0", "\n", "for", "_", ",", "(", "src_orig", ",", "targ_orig", ")", "in", "enumerate", "(", "zip", "(", "open", "(", "sent1", ",", "'r'", ")", ",", "open", "(", "sent2", ",", "'r'", ")", ")", ")", ":", "\n", "\t\t", "if", "src_orig", ".", "rstrip", "(", ")", "==", "''", ":", "\n", "\t\t\t", "continue", "\n", "\n", "", "if", "opt", ".", "lowercase", "==", "1", ":", "\n", "\t\t\t", "src_orig", "=", "src_orig", ".", "lower", "(", ")", "\n", "targ_orig", "=", "targ_orig", ".", "lower", "(", ")", "\n", "\n", "", "targ_orig", "=", "[", "'<s>'", "]", "+", "targ_orig", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "src_orig", "=", "[", "'<s>'", "]", "+", "src_orig", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "label", "=", "'neutral'", "# fake label", "\n", "\n", "src", "=", "pad", "(", "src_orig", ",", "max_seq_l", ",", "'<blank>'", ")", "\n", "src", "=", "word_indexer", ".", "convert_sequence", "(", "src", ")", "\n", "\n", "targ", "=", "pad", "(", "targ_orig", ",", "max_seq_l", ",", "'<blank>'", ")", "\n", "targ", "=", "word_indexer", ".", "convert_sequence", "(", "targ", ")", "\n", "\n", "all_src", "=", "pad", "(", "src_orig", ",", "opt", ".", "max_seq_l", ",", "'<blank>'", ")", "\n", "all_src", "=", "all_word_indexer", ".", "convert_sequence", "(", "all_src", ")", "\n", "\n", "all_targ", "=", "pad", "(", "targ_orig", ",", "opt", ".", "max_seq_l", ",", "'<blank>'", ")", "\n", "all_targ", "=", "all_word_indexer", ".", "convert_sequence", "(", "all_targ", ")", "\n", "\n", "sources", "[", "ex_id", "]", "=", "np", ".", "array", "(", "src", ",", "dtype", "=", "int", ")", "\n", "targets", "[", "ex_id", "]", "=", "np", ".", "array", "(", "targ", ",", "dtype", "=", "int", ")", "\n", "all_sources", "[", "ex_id", "]", "=", "np", ".", "array", "(", "all_src", ",", "dtype", "=", "int", ")", "\n", "all_targets", "[", "ex_id", "]", "=", "np", ".", "array", "(", "all_targ", ",", "dtype", "=", "int", ")", "\n", "source_lengths", "[", "ex_id", "]", "=", "(", "sources", "[", "ex_id", "]", "!=", "0", ")", ".", "sum", "(", ")", "\n", "target_lengths", "[", "ex_id", "]", "=", "(", "targets", "[", "ex_id", "]", "!=", "0", ")", ".", "sum", "(", ")", "\n", "labels", "[", "ex_id", "]", "=", "label_indexer", ".", "d", "[", "label", "]", "\n", "batch_keys", "[", "ex_id", "]", "=", "(", "source_lengths", "[", "ex_id", "]", ",", "target_lengths", "[", "ex_id", "]", ")", "\n", "ex_id", "+=", "1", "\n", "if", "ex_id", "%", "100000", "==", "0", ":", "\n", "\t\t\t", "print", "(", "\"{}/{} sentences processed\"", ".", "format", "(", "ex_id", ",", "num_ex", ")", ")", "\n", "\n", "", "", "print", "(", "ex_id", ",", "num_ex", ")", "\n", "if", "opt", ".", "shuffle", "==", "1", ":", "\n", "\t\t", "rand_idx", "=", "np", ".", "random", ".", "permutation", "(", "ex_id", ")", "\n", "targets", "=", "targets", "[", "rand_idx", "]", "\n", "sources", "=", "sources", "[", "rand_idx", "]", "\n", "all_sources", "=", "all_sources", "[", "rand_idx", "]", "\n", "all_targets", "=", "all_targets", "[", "rand_idx", "]", "\n", "source_lengths", "=", "source_lengths", "[", "rand_idx", "]", "\n", "target_lengths", "=", "target_lengths", "[", "rand_idx", "]", "\n", "labels", "=", "labels", "[", "rand_idx", "]", "\n", "batch_keys", "=", "batch_keys", "[", "rand_idx", "]", "\n", "ex_idx", "=", "rand_idx", "\n", "\n", "# break up batches based on source/target lengths", "\n", "", "sorted_keys", "=", "sorted", "(", "[", "(", "i", ",", "p", ")", "for", "i", ",", "p", "in", "enumerate", "(", "batch_keys", ")", "]", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "\n", "sorted_idx", "=", "[", "i", "for", "i", ",", "_", "in", "sorted_keys", "]", "\n", "# rearrange examples\t", "\n", "sources", "=", "sources", "[", "sorted_idx", "]", "\n", "targets", "=", "targets", "[", "sorted_idx", "]", "\n", "all_sources", "=", "all_sources", "[", "sorted_idx", "]", "\n", "all_targets", "=", "all_targets", "[", "sorted_idx", "]", "\n", "labels", "=", "labels", "[", "sorted_idx", "]", "\n", "target_l", "=", "target_lengths", "[", "sorted_idx", "]", "\n", "source_l", "=", "source_lengths", "[", "sorted_idx", "]", "\n", "ex_idx", "=", "rand_idx", "[", "sorted_idx", "]", "\n", "\n", "curr_l_src", "=", "0", "\n", "curr_l_targ", "=", "0", "\n", "batch_location", "=", "[", "]", "#idx where sent length changes", "\n", "for", "j", ",", "i", "in", "enumerate", "(", "sorted_idx", ")", ":", "\n", "\t\t", "if", "batch_keys", "[", "i", "]", "[", "0", "]", "!=", "curr_l_src", "or", "batch_keys", "[", "i", "]", "[", "1", "]", "!=", "curr_l_targ", ":", "\n", "\t\t\t", "curr_l_src", "=", "source_lengths", "[", "i", "]", "\n", "curr_l_targ", "=", "target_lengths", "[", "i", "]", "\n", "batch_location", ".", "append", "(", "j", ")", "\n", "", "", "if", "batch_location", "[", "-", "1", "]", "!=", "len", "(", "sources", ")", ":", "\n", "\t\t", "batch_location", ".", "append", "(", "len", "(", "sources", ")", "-", "1", ")", "\n", "\n", "#get batch sizes", "\n", "", "curr_idx", "=", "0", "\n", "batch_idx", "=", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "batch_location", ")", "-", "1", ")", ":", "\n", "\t\t", "end_location", "=", "batch_location", "[", "i", "+", "1", "]", "\n", "while", "curr_idx", "<", "end_location", ":", "\n", "\t\t\t", "curr_idx", "=", "min", "(", "curr_idx", "+", "opt", ".", "batch_size", ",", "end_location", ")", "\n", "batch_idx", ".", "append", "(", "curr_idx", ")", "\n", "\n", "", "", "batch_l", "=", "[", "]", "\n", "target_l_new", "=", "[", "]", "\n", "source_l_new", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "batch_idx", ")", ")", ":", "\n", "\t\t", "end", "=", "batch_idx", "[", "i", "+", "1", "]", "if", "i", "<", "len", "(", "batch_idx", ")", "-", "1", "else", "len", "(", "sources", ")", "\n", "batch_l", ".", "append", "(", "end", "-", "batch_idx", "[", "i", "]", ")", "\n", "source_l_new", ".", "append", "(", "source_l", "[", "batch_idx", "[", "i", "]", "]", ")", "\n", "target_l_new", ".", "append", "(", "target_l", "[", "batch_idx", "[", "i", "]", "]", ")", "\n", "\n", "# sanity check", "\n", "for", "k", "in", "range", "(", "batch_idx", "[", "i", "]", ",", "end", ")", ":", "\n", "\t\t\t", "assert", "(", "source_l", "[", "k", "]", "==", "source_l_new", "[", "-", "1", "]", ")", "\n", "assert", "(", "sources", "[", "k", ",", "source_l", "[", "k", "]", ":", "]", ".", "sum", "(", ")", "==", "0", ")", "\n", "\n", "\n", "# Write output", "\n", "", "", "f", "=", "h5py", ".", "File", "(", "output", ",", "\"w\"", ")", "\n", "f", "[", "\"source\"", "]", "=", "sources", "\n", "f", "[", "\"target\"", "]", "=", "targets", "\n", "f", "[", "\"label\"", "]", "=", "labels", "\n", "f", "[", "'all_source'", "]", "=", "all_sources", "\n", "f", "[", "'all_target'", "]", "=", "all_targets", "\n", "f", "[", "\"target_l\"", "]", "=", "np", ".", "array", "(", "target_l_new", ",", "dtype", "=", "int", ")", "\n", "f", "[", "\"source_l\"", "]", "=", "np", ".", "array", "(", "source_l_new", ",", "dtype", "=", "int", ")", "\n", "f", "[", "\"batch_l\"", "]", "=", "batch_l", "\n", "f", "[", "\"batch_idx\"", "]", "=", "batch_idx", "\n", "f", "[", "'ex_idx'", "]", "=", "ex_idx", "\n", "print", "(", "\"saved {} batches \"", ".", "format", "(", "len", "(", "f", "[", "\"batch_l\"", "]", ")", ")", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.preprocess_unlabeled.process": [[256, 284], ["preprocess_unlabeled.Indexer", "preprocess_unlabeled.Indexer", "preprocess_unlabeled.load_vocab_to_indexer", "preprocess_unlabeled.load_vocab_to_indexer", "preprocess_unlabeled.get_glove_words", "preprocess_unlabeled.Indexer", "range", "preprocess_unlabeled.Indexer.register_all_words", "preprocess_unlabeled.Indexer.register_all_words", "print", "preprocess_unlabeled.make_vocab", "print", "print", "preprocess_unlabeled.Indexer.write", "preprocess_unlabeled.Indexer.write", "preprocess_unlabeled.Indexer.write", "print", "preprocess_unlabeled.convert", "oov_words.append", "len", "len", "len", "len", "str"], "function", ["home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.preprocess_unlabeled.load_vocab_to_indexer", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.preprocess_unlabeled.load_vocab_to_indexer", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.preprocess.get_glove_words", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.preprocess.Indexer.register_all_words", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.preprocess.Indexer.register_all_words", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.preprocess.make_vocab", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.preprocess.Indexer.write", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.preprocess.Indexer.write", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.preprocess.Indexer.write", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.preprocess.convert"], ["", "def", "process", "(", "opt", ")", ":", "\n", "\t", "all_word_indexer", "=", "Indexer", "(", "symbols", "=", "[", "\"<blank>\"", ",", "\"<s>\"", "]", ")", "# all tokens will be recorded", "\n", "word_indexer", "=", "Indexer", "(", "symbols", "=", "[", "\"<blank>\"", ",", "\"<s>\"", "]", ")", "# only glove tokens will be recorded", "\n", "load_vocab_to_indexer", "(", "opt", ".", "vocab", ",", "word_indexer", ")", "\n", "load_vocab_to_indexer", "(", "opt", ".", "vocab_all", ",", "all_word_indexer", ")", "\n", "glove_vocab", "=", "get_glove_words", "(", "opt", ".", "glove", ")", "\n", "label_indexer", "=", "Indexer", "(", "symbols", "=", "[", "\"entailment\"", ",", "\"neutral\"", ",", "\"contradiction\"", "]", ",", "num_oov", "=", "0", ")", "\n", "\n", "oov_words", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "100", ")", ":", "#hash oov words to one of 100 random embeddings, per Parikh et al. 2016", "\n", "\t\t", "oov_words", ".", "append", "(", "'<oov'", "+", "str", "(", "i", ")", "+", "'>'", ")", "\n", "", "word_indexer", ".", "register_all_words", "(", "oov_words", ",", "count", "=", "False", ")", "\n", "all_word_indexer", ".", "register_all_words", "(", "oov_words", ",", "count", "=", "False", ")", "\n", "\n", "print", "(", "\"First pass through data to get vocab...\"", ")", "\n", "\n", "num_unlabeled", "=", "make_vocab", "(", "opt", ",", "glove_vocab", ",", "word_indexer", ",", "all_word_indexer", ",", "label_indexer", ",", "opt", ".", "sent1", ",", "opt", ".", "sent2", ",", "opt", ".", "max_seq_l", ",", "count", "=", "False", ")", "# no counting on unlabeled set", "\n", "print", "(", "\"Number of examples in unlabeled data: {}\"", ".", "format", "(", "num_unlabeled", ")", ")", "\n", "print", "(", "\"Number of sentences in unlabeled data: {0}, accumulated number of tokens: {1}/{2}\"", ".", "format", "(", "num_unlabeled", ",", "len", "(", "word_indexer", ".", "d", ")", ",", "len", "(", "all_word_indexer", ".", "d", ")", ")", ")", "\n", "\n", "word_indexer", ".", "write", "(", "opt", ".", "output", "+", "\".word.dict\"", ")", "\n", "all_word_indexer", ".", "write", "(", "opt", ".", "output", "+", "\".allword.dict\"", ")", "\n", "label_indexer", ".", "write", "(", "opt", ".", "output", "+", "\".label.dict\"", ")", "\n", "print", "(", "\"vocab size: {}\"", ".", "format", "(", "len", "(", "word_indexer", ".", "d", ")", ")", ")", "\n", "\n", "assert", "(", "len", "(", "label_indexer", ".", "d", ")", "==", "3", ")", "\n", "\n", "convert", "(", "opt", ",", "word_indexer", ",", "all_word_indexer", ",", "label_indexer", ",", "opt", ".", "sent1", ",", "opt", ".", "sent2", ",", "opt", ".", "output", "+", "\".hdf5\"", ",", "num_unlabeled", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.preprocess_unlabeled.main": [[286, 310], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "preprocess_unlabeled.process"], "function", ["home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.evaluation.process"], ["", "def", "main", "(", "arguments", ")", ":", "\n", "\t", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "description", "=", "__doc__", ",", "\n", "formatter_class", "=", "argparse", ".", "ArgumentDefaultsHelpFormatter", ")", "\n", "parser", ".", "add_argument", "(", "'--sent1'", ",", "help", "=", "\"Path to sent1 unlabeled data.\"", ",", "default", "=", "\"unlabeled.sent1.txt\"", ")", "\n", "parser", ".", "add_argument", "(", "'--sent2'", ",", "help", "=", "\"Path to sent2 unlabeled data.\"", ",", "default", "=", "\"unlabeled.sent2.txt\"", ")", "\n", "parser", ".", "add_argument", "(", "'--dir'", ",", "help", "=", "\"Path to the data dir\"", ",", "default", "=", "\"./data/nli_bias/\"", ")", "\n", "parser", ".", "add_argument", "(", "'--vocab'", ",", "help", "=", "\"Path to the glove vocabulary preprocessed\"", ",", "default", "=", "\"./data/nli_bias/snli.word.dict\"", ")", "\n", "parser", ".", "add_argument", "(", "'--vocab_all'", ",", "help", "=", "\"Path to the all word vocabulary preprocessed\"", ",", "default", "=", "\"./data/nli_bias/snli.allword.dict\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "help", "=", "\"Size of each minibatch.\"", ",", "type", "=", "int", ",", "default", "=", "32", ")", "\n", "parser", ".", "add_argument", "(", "'--max_seq_l'", ",", "help", "=", "\"Maximum sequence length. Sequences longer than this are dropped.\"", ",", "type", "=", "int", ",", "default", "=", "100", ")", "\n", "parser", ".", "add_argument", "(", "'--output'", ",", "help", "=", "\"Prefix of the output file names. \"", ",", "type", "=", "str", ",", "default", "=", "\"unlabeled\"", ")", "\n", "parser", ".", "add_argument", "(", "'--shuffle'", ",", "help", "=", "\"If = 1, shuffle sentences before sorting (based on source length).\"", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "help", "=", "\"The random seed\"", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "parser", ".", "add_argument", "(", "'--glove'", ",", "type", "=", "str", ",", "default", "=", "''", ")", "\n", "parser", ".", "add_argument", "(", "'--lowercase'", ",", "help", "=", "\"Whether to use lowercase for vocabulary.\"", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "opt", "=", "parser", ".", "parse_args", "(", "arguments", ")", "\n", "\n", "opt", ".", "sent1", "=", "opt", ".", "dir", "+", "opt", ".", "sent1", "\n", "opt", ".", "sent2", "=", "opt", ".", "dir", "+", "opt", ".", "sent2", "\n", "opt", ".", "output", "=", "opt", ".", "dir", "+", "opt", ".", "output", "\n", "\n", "process", "(", "opt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.predict_unlabeled.load_sent": [[68, 77], ["print", "open", "sents.append", "l.rstrip", "l.rstrip().split", "l.rstrip"], "function", ["None"], ["def", "load_sent", "(", "path", ")", ":", "\n", "\t", "print", "(", "'loading tokenized sentences from {0}'", ".", "format", "(", "path", ")", ")", "\n", "sents", "=", "[", "]", "\n", "with", "open", "(", "path", ",", "'r'", ")", "as", "f", ":", "\n", "\t\t", "for", "l", "in", "f", ":", "\n", "\t\t\t", "if", "l", ".", "rstrip", "(", ")", "==", "''", ":", "\n", "\t\t\t\t", "continue", "\n", "", "sents", ".", "append", "(", "l", ".", "rstrip", "(", ")", ".", "split", "(", "' '", ")", ")", "\n", "", "", "return", "sents", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.predict_unlabeled.load_x_pairs": [[78, 89], ["print", "open", "l.rstrip().split", "x1.append", "x2.append", "l.rstrip", "l.rstrip"], "function", ["None"], ["", "def", "load_x_pairs", "(", "path", ")", ":", "\n", "\t", "print", "(", "'laoding x pairs from {0}'", ".", "format", "(", "path", ")", ")", "\n", "x1", ",", "x2", "=", "[", "]", ",", "[", "]", "\n", "with", "open", "(", "path", ",", "'r'", ")", "as", "f", ":", "\n", "\t\t", "for", "l", "in", "f", ":", "\n", "\t\t\t", "if", "l", ".", "rstrip", "(", ")", "==", "''", ":", "\n", "\t\t\t\t", "continue", "\n", "", "toks", "=", "l", ".", "rstrip", "(", ")", ".", "split", "(", ")", "\n", "x1", ".", "append", "(", "toks", "[", "0", "]", ")", "\n", "x2", ".", "append", "(", "toks", "[", "1", "]", ")", "\n", "", "", "return", "x1", ",", "x2", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.predict_unlabeled.write_log": [[91, 96], ["print", "open", "f.write"], "function", ["home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.preprocess.Indexer.write"], ["", "def", "write_log", "(", "path", ",", "lines", ")", ":", "\n", "\t", "print", "(", "'writing log to {0}'", ".", "format", "(", "path", ")", ")", "\n", "with", "open", "(", "path", ",", "'w'", ")", "as", "f", ":", "\n", "\t\t", "for", "l", "in", "lines", ":", "\n", "\t\t\t", "f", ".", "write", "(", "l", "+", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.predict_unlabeled.evaluate": [[98, 153], ["m.train", "multiclass_loss.MulticlassLoss", "data.subsample", "print", "m.begin_pass", "range", "multiclass_loss.MulticlassLoss.get_epoch_metric", "m.end_pass", "print", "predict_unlabeled.write_log", "val_idx.size", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "m.update_context", "m.forward", "multiclass_loss.MulticlassLoss.", "float", "m.forward.data.exp", "enumerate", "log.append", "print", "float", "float", "float"], "function", ["home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.train.train", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.data.Data.subsample", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.classifier.local_classifier.LocalClassifier.begin_pass", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.multiclass_loss.MulticlassLoss.get_epoch_metric", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.classifier.local_classifier.LocalClassifier.end_pass", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.predict_unlabeled.write_log", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.data.Data.size", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.pipeline.Pipeline.update_context", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.classifier.local_classifier.LocalClassifier.forward"], ["", "", "", "def", "evaluate", "(", "opt", ",", "shared", ",", "m", ",", "data", ")", ":", "\n", "\t", "m", ".", "train", "(", "False", ")", "\n", "\n", "batch_cnt", "=", "0", "\n", "val_loss", "=", "0.0", "\n", "num_ex", "=", "0", "\n", "\n", "loss", "=", "MulticlassLoss", "(", "opt", ",", "shared", ")", "\n", "\n", "val_idx", ",", "val_num_ex", "=", "data", ".", "subsample", "(", "1.0", ")", "\n", "data_size", "=", "val_idx", ".", "size", "(", ")", "[", "0", "]", "\n", "print", "(", "'evaluating on {0} batches {1} examples'", ".", "format", "(", "data_size", ",", "val_num_ex", ")", ")", "\n", "\n", "log", "=", "[", "'x1,x2,premise,hypothesis,entail_probability,neutral_probability,contradiction_probability'", "]", "\n", "\n", "m", ".", "begin_pass", "(", ")", "\n", "for", "i", "in", "range", "(", "data_size", ")", ":", "\n", "\t\t", "(", "data_name", ",", "source", ",", "target", ",", "\n", "batch_ex_idx", ",", "batch_l", ",", "source_l", ",", "target_l", ",", "label", ",", "res_map", ")", "=", "data", "[", "val_idx", "[", "i", "]", "]", "\n", "\n", "wv_idx1", "=", "Variable", "(", "source", ",", "requires_grad", "=", "False", ")", "\n", "wv_idx2", "=", "Variable", "(", "target", ",", "requires_grad", "=", "False", ")", "\n", "y_gold", "=", "Variable", "(", "label", ",", "requires_grad", "=", "False", ")", "\n", "\n", "# update network parameters", "\n", "m", ".", "update_context", "(", "batch_ex_idx", ",", "batch_l", ",", "source_l", ",", "target_l", ",", "res_map", ")", "\n", "\n", "# forward pass", "\n", "pred", "=", "m", ".", "forward", "(", "wv_idx1", ",", "wv_idx2", ")", "\n", "\n", "# loss", "\n", "batch_loss", "=", "loss", "(", "pred", ",", "y_gold", ")", "\n", "\n", "# stats", "\n", "val_loss", "+=", "float", "(", "batch_loss", ".", "data", ")", "\n", "num_ex", "+=", "batch_l", "\n", "\n", "# logging", "\n", "dist", "=", "pred", ".", "data", ".", "exp", "(", ")", "\n", "for", "k", ",", "ex_idx", "in", "enumerate", "(", "batch_ex_idx", ")", ":", "\n", "# output format is: premise, hypothesis, p(E), p(N), p(C)", "\n", "\t\t\t", "log", ".", "append", "(", "'{0},{1},{2},{3},{4:.4f},{5:.4f},{6:.4f}'", ".", "format", "(", "res_map", "[", "'x_pair'", "]", "[", "k", "]", "[", "0", "]", ",", "res_map", "[", "'x_pair'", "]", "[", "k", "]", "[", "1", "]", ",", "' '", ".", "join", "(", "res_map", "[", "'sent1'", "]", "[", "k", "]", ")", ",", "' '", ".", "join", "(", "res_map", "[", "'sent2'", "]", "[", "k", "]", ")", ",", "float", "(", "dist", "[", "k", "]", "[", "0", "]", ")", ",", "float", "(", "dist", "[", "k", "]", "[", "1", "]", ")", ",", "float", "(", "dist", "[", "k", "]", "[", "2", "]", ")", ")", ")", "\n", "\n", "", "if", "(", "batch_cnt", "+", "1", ")", "%", "1000", "==", "0", ":", "\n", "\t\t\t", "print", "(", "'predicted {0} batches'", ".", "format", "(", "batch_cnt", "+", "1", ")", ")", "\n", "", "batch_cnt", "+=", "1", "\n", "\n", "", "perf", ",", "extra_perf", "=", "loss", ".", "get_epoch_metric", "(", ")", "\n", "m", ".", "end_pass", "(", ")", "\n", "print", "(", "'finished evaluation on {0} examples'", ".", "format", "(", "num_ex", ")", ")", "\n", "\n", "# printing", "\n", "write_log", "(", "opt", ".", "pred_output", ",", "log", ")", "\n", "\n", "return", "(", "perf", ",", "extra_perf", ",", "val_loss", "/", "num_ex", ",", "num_ex", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.predict_unlabeled.main": [[156, 199], ["parser.parse_args", "holder.Holder", "pipeline.Pipeline", "print", "load_param_dict", "m.cuda.set_param_dict", "data.Data", "predict_unlabeled.evaluate", "torch.cuda.set_device", "torch.cuda.manual_seed_all", "m.cuda.cuda", "parser.parse_args.res.split", "parser.parse_args.res.split"], "function", ["home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.util.load_param_dict", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.pipeline.Pipeline.set_param_dict", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.eval.evaluate"], ["", "def", "main", "(", "args", ")", ":", "\n", "\t", "opt", "=", "parser", ".", "parse_args", "(", "args", ")", "\n", "shared", "=", "Holder", "(", ")", "\n", "\n", "# ", "\n", "opt", ".", "data", "=", "opt", ".", "dir", "+", "opt", ".", "data", "\n", "opt", ".", "res", "=", "''", "if", "opt", ".", "res", "==", "''", "else", "','", ".", "join", "(", "[", "opt", ".", "dir", "+", "path", "for", "path", "in", "opt", ".", "res", ".", "split", "(", "','", ")", "]", ")", "\n", "opt", ".", "word_vecs", "=", "opt", ".", "dir", "+", "opt", ".", "word_vecs", "\n", "opt", ".", "dict", "=", "opt", ".", "dir", "+", "opt", ".", "dict", "\n", "opt", ".", "bias_glove", "=", "opt", ".", "dir", "+", "opt", ".", "bias_glove", "\n", "opt", ".", "bias_elmo", "=", "opt", ".", "dir", "+", "opt", ".", "bias_elmo", "\n", "opt", ".", "contract_v1", "=", "opt", ".", "dir", "+", "opt", ".", "contract_v1", "\n", "opt", ".", "contract_v2", "=", "opt", ".", "dir", "+", "opt", ".", "contract_v2", "\n", "#opt.sent1 = opt.dir + opt.sent1 ", "\n", "#opt.sent2 = opt.dir + opt.sent2", "\n", "#opt.x_pair = opt.dir + opt.x_pair", "\n", "\n", "#shared.sent1 = load_sent(opt.sent1)", "\n", "#shared.sent2 = load_sent(opt.sent2)", "\n", "#shared.x1, shared.x2 = load_x_pairs(opt.x_pair)", "\n", "\n", "if", "opt", ".", "gpuid", "!=", "-", "1", ":", "\n", "\t\t", "torch", ".", "cuda", ".", "set_device", "(", "opt", ".", "gpuid", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "1", ")", "\n", "\n", "# build model", "\n", "", "m", "=", "Pipeline", "(", "opt", ",", "shared", ")", "\n", "\n", "# initialization", "\n", "print", "(", "'loading pretrained model from {0}...'", ".", "format", "(", "opt", ".", "load_file", ")", ")", "\n", "param_dict", "=", "load_param_dict", "(", "'{0}.hdf5'", ".", "format", "(", "opt", ".", "load_file", ")", ")", "\n", "m", ".", "set_param_dict", "(", "param_dict", ")", "\n", "\n", "if", "opt", ".", "gpuid", "!=", "-", "1", ":", "\n", "\t\t", "m", "=", "m", ".", "cuda", "(", ")", "\n", "\n", "# loading data", "\n", "", "res_files", "=", "None", "if", "opt", ".", "res", "==", "''", "else", "opt", ".", "res", ".", "split", "(", "','", ")", "\n", "data", "=", "Data", "(", "opt", ",", "opt", ".", "data", ",", "res_files", ")", "\n", "\n", "#", "\n", "perf", ",", "extra_perf", ",", "avg_loss", ",", "num_ex", "=", "evaluate", "(", "opt", ",", "shared", ",", "m", ",", "data", ")", "\n", "extra_perf_str", "=", "' '", ".", "join", "(", "[", "'{:.4f}'", ".", "format", "(", "p", ")", "for", "p", "in", "extra_perf", "]", ")", "\n", "#print('Val {0:.4f} Extra {1} Loss: {2:.4f}'.format(", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.eval.evaluate": [[62, 103], ["m.train", "multiclass_loss.MulticlassLoss", "data.subsample", "print", "multiclass_loss.MulticlassLoss.begin_pass", "m.begin_pass", "range", "multiclass_loss.MulticlassLoss.get_epoch_metric", "m.end_pass", "multiclass_loss.MulticlassLoss.end_pass", "print", "val_idx.size", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "m.update_context", "m.forward", "multiclass_loss.MulticlassLoss.", "float"], "function", ["home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.train.train", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.data.Data.subsample", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.classifier.local_classifier.LocalClassifier.begin_pass", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.classifier.local_classifier.LocalClassifier.begin_pass", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.multiclass_loss.MulticlassLoss.get_epoch_metric", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.classifier.local_classifier.LocalClassifier.end_pass", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.classifier.local_classifier.LocalClassifier.end_pass", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.data.Data.size", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.pipeline.Pipeline.update_context", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.classifier.local_classifier.LocalClassifier.forward"], ["def", "evaluate", "(", "opt", ",", "shared", ",", "m", ",", "data", ")", ":", "\n", "\t", "m", ".", "train", "(", "False", ")", "\n", "\n", "val_loss", "=", "0.0", "\n", "num_ex", "=", "0", "\n", "\n", "loss", "=", "MulticlassLoss", "(", "opt", ",", "shared", ")", "\n", "\n", "val_idx", ",", "val_num_ex", "=", "data", ".", "subsample", "(", "1.0", ")", "\n", "data_size", "=", "val_idx", ".", "size", "(", ")", "[", "0", "]", "\n", "print", "(", "'evaluating on {0} batches {1} examples'", ".", "format", "(", "data_size", ",", "val_num_ex", ")", ")", "\n", "\n", "loss", ".", "begin_pass", "(", ")", "\n", "m", ".", "begin_pass", "(", ")", "\n", "for", "i", "in", "range", "(", "data_size", ")", ":", "\n", "\t\t", "(", "data_name", ",", "source", ",", "target", ",", "\n", "batch_ex_idx", ",", "batch_l", ",", "source_l", ",", "target_l", ",", "label", ",", "res_map", ")", "=", "data", "[", "val_idx", "[", "i", "]", "]", "\n", "\n", "wv_idx1", "=", "Variable", "(", "source", ",", "requires_grad", "=", "False", ")", "\n", "wv_idx2", "=", "Variable", "(", "target", ",", "requires_grad", "=", "False", ")", "\n", "y_gold", "=", "Variable", "(", "label", ",", "requires_grad", "=", "False", ")", "\n", "\n", "# update network parameters", "\n", "m", ".", "update_context", "(", "batch_ex_idx", ",", "batch_l", ",", "source_l", ",", "target_l", ",", "res_map", ")", "\n", "\n", "# forward pass", "\n", "pred", "=", "m", ".", "forward", "(", "wv_idx1", ",", "wv_idx2", ")", "\n", "\n", "# loss", "\n", "batch_loss", "=", "loss", "(", "pred", ",", "y_gold", ")", "\n", "\n", "# stats", "\n", "val_loss", "+=", "float", "(", "batch_loss", ".", "data", ")", "\n", "num_ex", "+=", "batch_l", "\n", "\n", "", "perf", ",", "extra_perf", "=", "loss", ".", "get_epoch_metric", "(", ")", "\n", "m", ".", "end_pass", "(", ")", "\n", "loss", ".", "end_pass", "(", ")", "\n", "print", "(", "'finished evaluation on {0} examples'", ".", "format", "(", "num_ex", ")", ")", "\n", "\n", "return", "(", "perf", ",", "extra_perf", ",", "val_loss", "/", "num_ex", ",", "num_ex", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.eval.main": [[106, 142], ["parser.parse_args", "holder.Holder", "pipeline.Pipeline", "print", "load_param_dict", "m.cuda.set_param_dict", "data.Data", "eval.evaluate", "print", "torch.cuda.set_device", "torch.cuda.manual_seed_all", "m.cuda.cuda", "parser.parse_args.res.split", "parser.parse_args.res.split"], "function", ["home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.util.load_param_dict", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.pipeline.Pipeline.set_param_dict", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.eval.evaluate"], ["", "def", "main", "(", "args", ")", ":", "\n", "\t", "opt", "=", "parser", ".", "parse_args", "(", "args", ")", "\n", "shared", "=", "Holder", "(", ")", "\n", "\n", "# ", "\n", "opt", ".", "data", "=", "opt", ".", "dir", "+", "opt", ".", "data", "\n", "opt", ".", "res", "=", "''", "if", "opt", ".", "res", "==", "''", "else", "','", ".", "join", "(", "[", "opt", ".", "dir", "+", "path", "for", "path", "in", "opt", ".", "res", ".", "split", "(", "','", ")", "]", ")", "\n", "opt", ".", "word_vecs", "=", "opt", ".", "dir", "+", "opt", ".", "word_vecs", "\n", "opt", ".", "dict", "=", "opt", ".", "dir", "+", "opt", ".", "dict", "\n", "opt", ".", "bias_glove", "=", "opt", ".", "dir", "+", "opt", ".", "bias_glove", "\n", "opt", ".", "bias_elmo", "=", "opt", ".", "dir", "+", "opt", ".", "bias_elmo", "\n", "\n", "if", "opt", ".", "gpuid", "!=", "-", "1", ":", "\n", "\t\t", "torch", ".", "cuda", ".", "set_device", "(", "opt", ".", "gpuid", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "1", ")", "\n", "\n", "# build model", "\n", "", "m", "=", "Pipeline", "(", "opt", ",", "shared", ")", "\n", "\n", "# initialization", "\n", "print", "(", "'loading pretrained model from {0}...'", ".", "format", "(", "opt", ".", "load_file", ")", ")", "\n", "param_dict", "=", "load_param_dict", "(", "'{0}.hdf5'", ".", "format", "(", "opt", ".", "load_file", ")", ")", "\n", "m", ".", "set_param_dict", "(", "param_dict", ")", "\n", "\n", "if", "opt", ".", "gpuid", "!=", "-", "1", ":", "\n", "\t\t", "m", "=", "m", ".", "cuda", "(", ")", "\n", "\n", "# loading data", "\n", "", "res_files", "=", "None", "if", "opt", ".", "res", "==", "''", "else", "opt", ".", "res", ".", "split", "(", "','", ")", "\n", "data", "=", "Data", "(", "opt", ",", "opt", ".", "data", ",", "res_files", ")", "\n", "\n", "#", "\n", "perf", ",", "extra_perf", ",", "avg_loss", ",", "num_ex", "=", "evaluate", "(", "opt", ",", "shared", ",", "m", ",", "data", ")", "\n", "extra_perf_str", "=", "' '", ".", "join", "(", "[", "'{:.4f}'", ".", "format", "(", "p", ")", "for", "p", "in", "extra_perf", "]", ")", "\n", "print", "(", "'Val {0:.4f} Extra {1} Loss: {2:.4f}'", ".", "format", "(", "\n", "perf", ",", "extra_perf_str", ",", "avg_loss", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.ema.EMA.__init__": [[5, 8], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "opt", ",", "shared", ")", ":", "\n", "        ", "self", ".", "mu", "=", "opt", ".", "mu", "\n", "self", ".", "avg", "=", "{", "}", "# keeps a copy of parameter averages", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.ema.EMA.step": [[9, 20], ["m.named_parameters", "ema.EMA.avg[].copy_", "torch.Tensor().type_as().resize_as_().zero_", "ema.EMA.avg[].copy_", "torch.Tensor().type_as().resize_as_", "torch.Tensor().type_as", "torch.Tensor"], "methods", ["None"], ["", "def", "step", "(", "self", ",", "m", ")", ":", "\n", "# recompute the averages", "\n", "        ", "for", "n", ",", "p", "in", "m", ".", "named_parameters", "(", ")", ":", "\n", "            ", "if", "p", ".", "requires_grad", ":", "\n", "                ", "if", "n", "not", "in", "self", ".", "avg", ":", "\n", "# intialize with the model itself", "\n", "                    ", "self", ".", "avg", "[", "n", "]", "=", "torch", ".", "Tensor", "(", ")", ".", "type_as", "(", "p", ".", "data", ")", ".", "resize_as_", "(", "p", ".", "data", ")", ".", "zero_", "(", ")", "\n", "self", ".", "avg", "[", "n", "]", ".", "copy_", "(", "p", ".", "data", ")", "\n", "\n", "", "new_avg", "=", "(", "1.0", "-", "self", ".", "mu", ")", "*", "p", ".", "data", "+", "self", ".", "mu", "*", "self", ".", "avg", "[", "n", "]", "\n", "self", ".", "avg", "[", "n", "]", ".", "copy_", "(", "new_avg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.ema.EMA.get_param_dict": [[26, 31], ["ema.EMA.avg.items", "p.cpu().numpy", "p.cpu"], "methods", ["home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.holder.Holder.items"], ["", "", "", "def", "get_param_dict", "(", "self", ")", ":", "\n", "        ", "param_dict", "=", "{", "}", "\n", "for", "n", ",", "p", "in", "self", ".", "avg", ".", "items", "(", ")", ":", "\n", "            ", "param_dict", "[", "n", "]", "=", "p", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "return", "param_dict", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.encoder_with_elmo.EncoderWithElmo.__init__": [[14, 60], ["super().__init__", "torch.nn.Dropout", "LockedDropout", "util.build_rnn", "elmo_encoder.ElmoEncoder", "elmo_loader.ElmoLoader", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Softmax", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.classifier.local_classifier.LocalClassifier.__init__", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.util.build_rnn"], ["\t", "def", "__init__", "(", "self", ",", "opt", ",", "shared", ")", ":", "\n", "\t\t", "super", "(", "EncoderWithElmo", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# bookkeeping", "\n", "self", ".", "opt", "=", "opt", "\n", "self", ".", "shared", "=", "shared", "\n", "\n", "self", ".", "elmo_drop", "=", "nn", ".", "Dropout", "(", "opt", ".", "elmo_dropout", ")", "\n", "self", ".", "drop", "=", "LockedDropout", "(", "opt", ".", "dropout", ")", "\n", "\n", "if", "opt", ".", "dynamic_elmo", "==", "1", ":", "\n", "\t\t\t", "self", ".", "elmo", "=", "ElmoEncoder", "(", "opt", ",", "shared", ")", "\n", "", "else", ":", "\n", "\t\t\t", "self", ".", "elmo", "=", "ElmoLoader", "(", "opt", ",", "shared", ")", "\n", "\n", "\n", "# rnn merger", "\n", "", "bidir", "=", "opt", ".", "birnn", "==", "1", "\n", "rnn_in_size", "=", "opt", ".", "word_vec_size", "+", "opt", ".", "elmo_in_size", "if", "opt", ".", "use_elmo_only", "==", "0", "else", "opt", ".", "elmo_in_size", "\n", "rnn_hidden_size", "=", "opt", ".", "hidden_size", "if", "not", "bidir", "else", "opt", ".", "hidden_size", "//", "2", "\n", "self", ".", "rnn", "=", "build_rnn", "(", "\n", "opt", ".", "rnn_type", ",", "\n", "input_size", "=", "rnn_in_size", ",", "\n", "hidden_size", "=", "rnn_hidden_size", ",", "\n", "num_layers", "=", "opt", ".", "rnn_layer", ",", "\n", "bias", "=", "True", ",", "\n", "batch_first", "=", "True", ",", "\n", "dropout", "=", "opt", ".", "dropout", ",", "\n", "bidirectional", "=", "bidir", ")", "\n", "\n", "if", "opt", ".", "elmo_blend", "==", "'concat'", ":", "\n", "\t\t\t", "self", ".", "sampler_pre", "=", "nn", ".", "Linear", "(", "opt", ".", "elmo_in_size", "*", "3", ",", "opt", ".", "elmo_in_size", ")", "\n", "self", ".", "sampler_post", "=", "nn", ".", "Linear", "(", "opt", ".", "elmo_in_size", "*", "3", ",", "opt", ".", "elmo_in_size", ")", "\n", "\n", "", "elif", "opt", ".", "elmo_blend", "==", "'interpolate'", ":", "\n", "\t\t\t", "self", ".", "gamma_pre", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "1", ")", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "gamma_pre", ".", "skip_init", "=", "1", "\n", "self", ".", "gamma_post", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "1", ")", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "gamma_post", ".", "skip_init", "=", "1", "\n", "\n", "self", ".", "w_pre", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "3", ")", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "w_pre", ".", "skip_init", "=", "1", "\n", "self", ".", "w_post", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "3", ")", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "w_post", ".", "skip_init", "=", "1", "\n", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.encoder_with_elmo.EncoderWithElmo.rnn_over": [[62, 66], ["encoder_with_elmo.EncoderWithElmo.drop", "encoder_with_elmo.EncoderWithElmo.rnn"], "methods", ["None"], ["", "", "def", "rnn_over", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "x", ",", "h", "=", "self", ".", "rnn", "(", "x", ")", "\n", "return", "x", ",", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.encoder_with_elmo.EncoderWithElmo.interpolate_elmo": [[68, 81], ["torch.nn.Softmax"], "methods", ["None"], ["", "def", "interpolate_elmo", "(", "self", ",", "elmo_layers1", ",", "elmo_layers2", ",", "w", ",", "gamma", ")", ":", "\n", "\t\t", "weights", "=", "nn", ".", "Softmax", "(", "0", ")", "(", "w", ")", "\n", "# interpolate", "\n", "if", "self", ".", "opt", ".", "elmo_layer", "==", "3", ":", "\n", "\t\t\t", "sent1", "=", "elmo_layers1", "[", "0", "]", "*", "weights", "[", "0", "]", "+", "elmo_layers1", "[", "1", "]", "*", "weights", "[", "1", "]", "+", "elmo_layers1", "[", "2", "]", "*", "weights", "[", "2", "]", "\n", "sent2", "=", "elmo_layers2", "[", "0", "]", "*", "weights", "[", "0", "]", "+", "elmo_layers2", "[", "1", "]", "*", "weights", "[", "1", "]", "+", "elmo_layers2", "[", "2", "]", "*", "weights", "[", "2", "]", "\n", "", "elif", "self", ".", "opt", ".", "elmo_layer", "==", "2", ":", "\n", "\t\t\t", "sent1", "=", "elmo_layers1", "[", "0", "]", "*", "weights", "[", "0", "]", "+", "elmo_layers1", "[", "1", "]", "*", "weights", "[", "1", "]", "\n", "sent2", "=", "elmo_layers2", "[", "0", "]", "*", "weights", "[", "0", "]", "+", "elmo_layers2", "[", "1", "]", "*", "weights", "[", "1", "]", "\n", "", "elif", "self", ".", "opt", ".", "elmo_layer", "==", "1", ":", "\n", "\t\t\t", "sent1", "=", "elmo_layers1", "[", "0", "]", "*", "weights", "[", "0", "]", "\n", "sent2", "=", "elmo_layers2", "[", "0", "]", "*", "weights", "[", "0", "]", "\n", "", "return", "sent1", "*", "gamma", ",", "sent2", "*", "gamma", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.encoder_with_elmo.EncoderWithElmo.concat_elmo": [[83, 85], ["torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "concat_elmo", "(", "self", ",", "elmo_layers1", ",", "elmo_layers2", ")", ":", "\n", "\t\t", "return", "torch", ".", "cat", "(", "elmo_layers1", ",", "2", ")", ",", "torch", ".", "cat", "(", "elmo_layers2", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.encoder_with_elmo.EncoderWithElmo.sample_elmo": [[87, 91], ["sampler().view", "sampler().view", "sampler", "sampler", "sampler().view.view", "sampler().view.view"], "methods", ["None"], ["", "def", "sample_elmo", "(", "self", ",", "sampler", ",", "elmo1", ",", "elmo2", ")", ":", "\n", "\t\t", "elmo1", "=", "sampler", "(", "elmo1", ".", "view", "(", "-", "1", ",", "self", ".", "opt", ".", "elmo_in_size", "*", "3", ")", ")", ".", "view", "(", "self", ".", "shared", ".", "batch_l", ",", "self", ".", "shared", ".", "sent_l1", ",", "-", "1", ")", "\n", "elmo2", "=", "sampler", "(", "elmo2", ".", "view", "(", "-", "1", ",", "self", ".", "opt", ".", "elmo_in_size", "*", "3", ")", ")", ".", "view", "(", "self", ".", "shared", ".", "batch_l", ",", "self", ".", "shared", ".", "sent_l2", ",", "-", "1", ")", "\n", "return", "elmo1", ",", "elmo2", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.encoder_with_elmo.EncoderWithElmo.forward": [[93, 138], ["encoder_with_elmo.EncoderWithElmo.elmo", "encoder_with_elmo.EncoderWithElmo.rnn_over", "encoder_with_elmo.EncoderWithElmo.rnn_over", "encoder_with_elmo.EncoderWithElmo.interpolate_elmo", "encoder_with_elmo.EncoderWithElmo.elmo_drop", "encoder_with_elmo.EncoderWithElmo.elmo_drop", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "encoder_with_elmo.EncoderWithElmo.concat_elmo", "encoder_with_elmo.EncoderWithElmo.sample_elmo", "encoder_with_elmo.EncoderWithElmo.interpolate_elmo", "encoder_with_elmo.EncoderWithElmo.elmo_drop", "encoder_with_elmo.EncoderWithElmo.elmo_drop", "encoder_with_elmo.EncoderWithElmo.concat_elmo", "encoder_with_elmo.EncoderWithElmo.sample_elmo"], "methods", ["home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.encoder.rnn_encoder.RNNEncoder.rnn_over", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.encoder.rnn_encoder.RNNEncoder.rnn_over", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.encoder_with_elmo.EncoderWithElmo.interpolate_elmo", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.encoder_with_elmo.EncoderWithElmo.concat_elmo", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.encoder_with_elmo.EncoderWithElmo.sample_elmo", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.encoder_with_elmo.EncoderWithElmo.interpolate_elmo", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.encoder_with_elmo.EncoderWithElmo.concat_elmo", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.encoder_with_elmo.EncoderWithElmo.sample_elmo"], ["", "def", "forward", "(", "self", ",", "sent1", ",", "sent2", ")", ":", "\n", "# elmo pass", "\n", "\t\t", "elmo1", ",", "elmo2", "=", "self", ".", "elmo", "(", ")", "\n", "\n", "# pre-rnn elmo", "\n", "elmo_pre1", ",", "elmo_pre2", "=", "None", ",", "None", "\n", "if", "self", ".", "opt", ".", "elmo_blend", "==", "'interpolate'", ":", "\n", "\t\t\t", "elmo_pre1", ",", "elmo_pre2", "=", "self", ".", "interpolate_elmo", "(", "elmo1", ",", "elmo2", ",", "self", ".", "w_pre", ",", "self", ".", "gamma_pre", ")", "\n", "", "elif", "self", ".", "opt", ".", "elmo_blend", "==", "'concat'", ":", "\n", "\t\t\t", "elmo_pre1", ",", "elmo_pre2", "=", "self", ".", "concat_elmo", "(", "elmo1", ",", "elmo2", ")", "\n", "elmo_pre1", ",", "elmo_pre2", "=", "self", ".", "sample_elmo", "(", "self", ".", "sampler_pre", ",", "elmo_pre1", ",", "elmo_pre2", ")", "\n", "\n", "", "elmo_pre1", ",", "elmo_pre2", "=", "self", ".", "elmo_drop", "(", "elmo_pre1", ")", ",", "self", ".", "elmo_drop", "(", "elmo_pre2", ")", "\n", "\n", "enc1", ",", "enc2", "=", "elmo_pre1", ",", "elmo_pre2", "\n", "if", "self", ".", "opt", ".", "use_elmo_only", "==", "0", ":", "\n", "\t\t\t", "enc1", "=", "torch", ".", "cat", "(", "[", "sent1", ",", "enc1", "]", ",", "2", ")", "\n", "enc2", "=", "torch", ".", "cat", "(", "[", "sent2", ",", "enc2", "]", ",", "2", ")", "\n", "\n", "# read", "\n", "", "enc1", ",", "_", "=", "self", ".", "rnn_over", "(", "enc1", ")", "\n", "enc2", ",", "_", "=", "self", ".", "rnn_over", "(", "enc2", ")", "\n", "\n", "# post-rnn elmo", "\n", "if", "self", ".", "opt", ".", "use_elmo_post", "==", "1", ":", "\n", "\t\t\t", "elmo_post1", ",", "elmo_post2", "=", "None", ",", "None", "\n", "if", "self", ".", "opt", ".", "elmo_blend", "==", "'interpolate'", ":", "\n", "\t\t\t\t", "elmo_post1", ",", "elmo_post2", "=", "self", ".", "interpolate_elmo", "(", "elmo1", ",", "elmo2", ",", "self", ".", "w_post", ",", "self", ".", "gamma_post", ")", "\n", "", "elif", "self", ".", "opt", ".", "elmo_blend", "==", "'concat'", ":", "\n", "\t\t\t\t", "elmo_post1", ",", "elmo_post2", "=", "self", ".", "concat_elmo", "(", "elmo1", ",", "elmo2", ")", "\n", "elmo_post1", ",", "elmo_post2", "=", "self", ".", "sample_elmo", "(", "self", ".", "sampler_post", ",", "elmo_post1", ",", "elmo_post2", ")", "\n", "\n", "", "elmo_post1", ",", "elmo_post2", "=", "self", ".", "elmo_drop", "(", "elmo_post1", ")", ",", "self", ".", "elmo_drop", "(", "elmo_post2", ")", "\n", "enc1", "=", "torch", ".", "cat", "(", "[", "enc1", ",", "elmo_post1", "]", ",", "2", ")", "\n", "enc2", "=", "torch", ".", "cat", "(", "[", "enc2", ",", "elmo_post2", "]", ",", "2", ")", "\n", "\n", "# record", "\n", "#\ttake lstm encoding as embeddings for classification", "\n", "#\ttake post-lstm encoding as encodings for attention", "\n", "", "self", ".", "shared", ".", "input_emb1", "=", "enc1", "\n", "self", ".", "shared", ".", "input_emb2", "=", "enc2", "\n", "self", ".", "shared", ".", "input_enc1", "=", "enc1", "\n", "self", ".", "shared", ".", "input_enc2", "=", "enc2", "\n", "\n", "return", "[", "self", ".", "shared", ".", "input_emb1", ",", "self", ".", "shared", ".", "input_emb2", ",", "self", ".", "shared", ".", "input_enc1", ",", "self", ".", "shared", ".", "input_enc2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.encoder_with_elmo.EncoderWithElmo.begin_pass": [[139, 141], ["None"], "methods", ["None"], ["", "def", "begin_pass", "(", "self", ")", ":", "\n", "\t\t", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.encoder_with_elmo.EncoderWithElmo.end_pass": [[142, 144], ["None"], "methods", ["None"], ["", "def", "end_pass", "(", "self", ")", ":", "\n", "\t\t", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.unlabeled_extract.tokenize_spacy": [[10, 18], ["spacy_nlp", "tok.lemma_.replace", "zip"], "function", ["None"], ["def", "tokenize_spacy", "(", "text", ")", ":", "\n", "\t", "tokenized", "=", "spacy_nlp", "(", "text", ")", "\n", "# use universal pos tags", "\n", "toks", "=", "[", "tok", ".", "text", "for", "tok", "in", "tokenized", "if", "not", "tok", ".", "is_space", "]", "\n", "pos", "=", "[", "tok", ".", "pos_", "for", "tok", "in", "tokenized", "if", "not", "tok", ".", "is_space", "]", "\n", "lemma", "=", "[", "tok", ".", "lemma_", ".", "replace", "(", "' '", ",", "''", ")", "for", "tok", "in", "tokenized", "if", "not", "tok", ".", "is_space", "]", "\n", "lemma", "=", "[", "l", "if", "l", "!=", "''", "else", "t", "for", "l", ",", "t", "in", "zip", "(", "lemma", ",", "toks", ")", "]", "\n", "return", "toks", ",", "pos", ",", "lemma", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.unlabeled_extract.filter_by_pos": [[20, 30], ["zip", "filtered_toks.append", "filtered_pos.append", "filtered_lemma.append"], "function", ["None"], ["", "def", "filter_by_pos", "(", "keys", ",", "toks", ",", "pos", ",", "lemma", ")", ":", "\n", "\t", "filtered_toks", "=", "[", "]", "\n", "filtered_pos", "=", "[", "]", "\n", "filtered_lemma", "=", "[", "]", "\n", "for", "t", ",", "p", ",", "l", "in", "zip", "(", "toks", ",", "pos", ",", "lemma", ")", ":", "\n", "\t\t", "if", "p", "not", "in", "keys", ":", "\n", "\t\t\t", "filtered_toks", ".", "append", "(", "t", ")", "\n", "filtered_pos", ".", "append", "(", "p", ")", "\n", "filtered_lemma", ".", "append", "(", "l", ")", "\n", "", "", "return", "filtered_toks", ",", "filtered_pos", ",", "filtered_lemma", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.unlabeled_extract.write_to": [[32, 37], ["print", "open", "f.write"], "function", ["home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.preprocess.Indexer.write"], ["", "def", "write_to", "(", "ls", ",", "out_file", ")", ":", "\n", "\t", "print", "(", "'writing to {0}'", ".", "format", "(", "out_file", ")", ")", "\n", "with", "open", "(", "out_file", ",", "'w+'", ")", "as", "f", ":", "\n", "\t\t", "for", "l", "in", "ls", ":", "\n", "\t\t\t", "f", ".", "write", "(", "(", "l", "+", "'\\n'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.unlabeled_extract.extract": [[39, 103], ["print", "open", "l.rstrip().split", "max", "all_x_pairs.append", "all_sent1.append", "all_sent2.append", "unlabeled_extract.tokenize_spacy", "unlabeled_extract.tokenize_spacy", "sent1.split", "sent2.split", "len", "len", "all_sent1_pos.append", "all_sent2_pos.append", "all_sent1_lemma.append", "all_sent2_lemma.append", "print", "l.strip", "l.rstrip", "opt.filter.split", "unlabeled_extract.filter_by_pos", "unlabeled_extract.filter_by_pos", "len", "len", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.unlabeled_extract.tokenize_spacy", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.unlabeled_extract.tokenize_spacy", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.unlabeled_extract.filter_by_pos", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.unlabeled_extract.filter_by_pos"], ["", "", "", "def", "extract", "(", "opt", ",", "csv_file", ")", ":", "\n", "\t", "all_sent1", "=", "[", "]", "\n", "all_sent2", "=", "[", "]", "\n", "all_sent1_pos", "=", "[", "]", "\n", "all_sent2_pos", "=", "[", "]", "\n", "all_sent1_lemma", "=", "[", "]", "\n", "all_sent2_lemma", "=", "[", "]", "\n", "all_x_pairs", "=", "[", "]", "# the pair of words (x1, x2) in sentence template", "\n", "max_sent_l", "=", "0", "\n", "\n", "skip_cnt", "=", "0", "\n", "\n", "with", "open", "(", "csv_file", ",", "'r'", ")", "as", "f", ":", "\n", "\t\t", "line_idx", "=", "0", "\n", "for", "l", "in", "f", ":", "\n", "\t\t\t", "line_idx", "+=", "1", "\n", "if", "line_idx", "==", "1", "or", "l", ".", "strip", "(", ")", "==", "''", ":", "\n", "\t\t\t\t", "continue", "\n", "\n", "", "if", "opt", ".", "max_num", "!=", "-", "1", "and", "line_idx", ">=", "opt", ".", "max_num", ":", "\n", "\t\t\t\t", "break", "\n", "\n", "", "cells", "=", "l", ".", "rstrip", "(", ")", ".", "split", "(", "','", ")", "\n", "x1", "=", "cells", "[", "2", "]", "\n", "x2", "=", "cells", "[", "3", "]", "\n", "sent1", "=", "cells", "[", "-", "2", "]", "\n", "sent2", "=", "cells", "[", "-", "1", "]", "\n", "\n", "if", "opt", ".", "tokenize", "==", "1", ":", "\n", "\t\t\t\t", "sent1_toks", ",", "sent1_pos", ",", "sent1_lemma", "=", "tokenize_spacy", "(", "sent1", ")", "\n", "sent2_toks", ",", "sent2_pos", ",", "sent2_lemma", "=", "tokenize_spacy", "(", "sent2", ")", "\n", "\n", "if", "opt", ".", "filter", "!=", "''", ":", "\n", "\t\t\t\t\t", "keys", "=", "opt", ".", "filter", ".", "split", "(", "','", ")", "\n", "sent1_toks", ",", "sent1_pos", ",", "sent1_lemma", "=", "filter_by_pos", "(", "keys", ",", "sent1_toks", ",", "sent1_pos", ",", "sent1_lemma", ")", "\n", "sent2_toks", ",", "sent2_pos", ",", "sent1_lemma", "=", "filter_by_pos", "(", "keys", ",", "sent2_toks", ",", "sent2_pos", ",", "sent2_lemma", ")", "\n", "\n", "", "assert", "(", "len", "(", "sent1_toks", ")", "==", "len", "(", "sent1_pos", ")", ")", "\n", "assert", "(", "len", "(", "sent2_toks", ")", "==", "len", "(", "sent2_pos", ")", ")", "\n", "assert", "(", "len", "(", "sent1_toks", ")", "==", "len", "(", "sent1_lemma", ")", ")", "\n", "\n", "", "else", ":", "\n", "\t\t\t\t", "sent1_toks", "=", "sent1", ".", "split", "(", "' '", ")", "\n", "sent2_toks", "=", "sent2", ".", "split", "(", "' '", ")", "\n", "\n", "", "max_sent_l", "=", "max", "(", "max_sent_l", ",", "len", "(", "sent1_toks", ")", ",", "len", "(", "sent2_toks", ")", ")", "\n", "\n", "all_x_pairs", ".", "append", "(", "'{0} {1}'", ".", "format", "(", "x1", ",", "x2", ")", ")", "\n", "all_sent1", ".", "append", "(", "' '", ".", "join", "(", "sent1_toks", ")", ")", "\n", "all_sent2", ".", "append", "(", "' '", ".", "join", "(", "sent2_toks", ")", ")", "\n", "\n", "all_sent1_pos", ",", "all_sent1_lemma", ",", "all_sent2_pos", ",", "all_sent2_lemma", "=", "None", ",", "None", ",", "None", ",", "None", "\n", "if", "opt", ".", "tokenize", "==", "1", ":", "\n", "\t\t\t\t", "all_sent1_pos", ".", "append", "(", "' '", ".", "join", "(", "sent1_pos", ")", ")", "\n", "all_sent2_pos", ".", "append", "(", "' '", ".", "join", "(", "sent2_pos", ")", ")", "\n", "all_sent1_lemma", ".", "append", "(", "' '", ".", "join", "(", "sent1_lemma", ")", ")", "\n", "all_sent2_lemma", ".", "append", "(", "' '", ".", "join", "(", "sent2_lemma", ")", ")", "\n", "\n", "", "if", "line_idx", "%", "1000", "==", "0", ":", "\n", "\t\t\t\t", "print", "(", "'extracted {0} examples'", ".", "format", "(", "line_idx", ")", ")", "\n", "\n", "", "", "", "print", "(", "'skipped {0} examples'", ".", "format", "(", "skip_cnt", ")", ")", "\n", "\n", "return", "(", "all_x_pairs", ",", "all_sent1", ",", "all_sent2", ",", "all_sent1_pos", ",", "all_sent2_pos", ",", "all_sent1_lemma", ",", "all_sent2_lemma", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.unlabeled_extract.main": [[115, 139], ["parser.parse_args", "unlabeled_extract.extract", "print", "unlabeled_extract.write_to", "unlabeled_extract.write_to", "unlabeled_extract.write_to", "unlabeled_extract.write_to", "unlabeled_extract.write_to", "unlabeled_extract.write_to", "unlabeled_extract.write_to", "len", "l.lower", "l.lower", "l.lower", "l.lower", "l.lower", "l.lower", "l.lower"], "function", ["home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.unlabeled_extract.extract", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.unlabeled_extract.write_to", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.unlabeled_extract.write_to", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.unlabeled_extract.write_to", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.unlabeled_extract.write_to", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.unlabeled_extract.write_to", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.unlabeled_extract.write_to", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.unlabeled_extract.write_to"], ["def", "main", "(", "args", ")", ":", "\n", "\t", "opt", "=", "parser", ".", "parse_args", "(", "args", ")", "\n", "all_x_pairs", ",", "all_sent1", ",", "all_sent2", ",", "all_sent1_pos", ",", "all_sent2_pos", ",", "all_sent1_lemma", ",", "all_sent2_lemma", "=", "extract", "(", "opt", ",", "opt", ".", "data", ")", "\n", "print", "(", "'{0} examples processed.'", ".", "format", "(", "len", "(", "all_sent1", ")", ")", ")", "\n", "\n", "if", "opt", ".", "lowercase", "==", "1", ":", "\n", "\t\t", "all_x_pairs", "=", "[", "l", ".", "lower", "(", ")", "for", "l", "in", "all_x_pairs", "]", "\n", "all_sent1", "=", "[", "l", ".", "lower", "(", ")", "for", "l", "in", "all_sent1", "]", "\n", "all_sent2", "=", "[", "l", ".", "lower", "(", ")", "for", "l", "in", "all_sent2", "]", "\n", "\n", "", "write_to", "(", "all_x_pairs", ",", "opt", ".", "output", "+", "'.x_pair.txt'", ")", "\n", "write_to", "(", "all_sent1", ",", "opt", ".", "output", "+", "'.sent1.txt'", ")", "\n", "write_to", "(", "all_sent2", ",", "opt", ".", "output", "+", "'.sent2.txt'", ")", "\n", "\n", "if", "opt", ".", "tokenize", "==", "1", ":", "\n", "\t\t", "if", "opt", ".", "lowercase", "==", "1", ":", "\n", "\t\t\t", "all_sent1_pos", "=", "[", "l", ".", "lower", "(", ")", "for", "l", "in", "all_sent1_pos", "]", "\n", "all_sent2_pos", "=", "[", "l", ".", "lower", "(", ")", "for", "l", "in", "all_sent2_pos", "]", "\n", "all_sent1_lemma", "=", "[", "l", ".", "lower", "(", ")", "for", "l", "in", "all_sent1_lemma", "]", "\n", "all_sent2_lemma", "=", "[", "l", ".", "lower", "(", ")", "for", "l", "in", "all_sent2_lemma", "]", "\n", "", "write_to", "(", "all_sent1_pos", ",", "opt", ".", "output", "+", "'.sent1_pos.txt'", ")", "\n", "write_to", "(", "all_sent2_pos", ",", "opt", ".", "output", "+", "'.sent2_pos.txt'", ")", "\n", "write_to", "(", "all_sent1_lemma", ",", "opt", ".", "output", "+", "'.sent1_lemma.txt'", ")", "\n", "write_to", "(", "all_sent2_lemma", ",", "opt", ".", "output", "+", "'.sent2_lemma.txt'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.train.train_epoch": [[82, 162], ["time.time", "multiclass_loss.MulticlassLoss", "torch.randperm", "m.train", "multiclass_loss.MulticlassLoss.begin_pass", "m.begin_pass", "range", "multiclass_loss.MulticlassLoss.get_epoch_metric", "m.end_pass", "multiclass_loss.MulticlassLoss.end_pass", "sub_idx.size", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "m.update_context", "m.forward", "multiclass_loss.MulticlassLoss.", "float", "loss.backward", "time.time", "optim.step", "m.zero_grad", "min", "max", "multiclass_loss.MulticlassLoss.print_cur_stats", "ema.step", "time.time", "multiclass_loss.MulticlassLoss.print_cur_stats", "print", "float"], "function", ["home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.train.train", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.classifier.local_classifier.LocalClassifier.begin_pass", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.classifier.local_classifier.LocalClassifier.begin_pass", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.multiclass_loss.MulticlassLoss.get_epoch_metric", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.classifier.local_classifier.LocalClassifier.end_pass", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.classifier.local_classifier.LocalClassifier.end_pass", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.data.Data.size", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.pipeline.Pipeline.update_context", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.classifier.local_classifier.LocalClassifier.forward", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.optimizer.Optimizer.step", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.multiclass_loss.MulticlassLoss.print_cur_stats", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.optimizer.Optimizer.step", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.multiclass_loss.MulticlassLoss.print_cur_stats"], ["def", "train_epoch", "(", "opt", ",", "shared", ",", "m", ",", "optim", ",", "ema", ",", "data", ",", "epoch_id", ",", "sub_idx", ")", ":", "\n", "\t", "train_loss", "=", "0.0", "\n", "num_ex", "=", "0", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "num_correct", "=", "0", "\n", "min_grad_norm2", "=", "1000000000000.0", "\n", "max_grad_norm2", "=", "0.0", "\n", "\n", "loss", "=", "MulticlassLoss", "(", "opt", ",", "shared", ")", "\n", "\n", "# subsamples of data", "\n", "# if subsample indices provided, permutate from subsamples", "\n", "#\telse permutate from all the data", "\n", "data_size", "=", "sub_idx", ".", "size", "(", ")", "[", "0", "]", "\n", "batch_order", "=", "torch", ".", "randperm", "(", "data_size", ")", "\n", "if", "sub_idx", "is", "not", "None", ":", "\n", "\t\t", "batch_order", "=", "sub_idx", "[", "batch_order", "]", "\n", "\n", "", "acc_batch_size", "=", "0", "\n", "m", ".", "train", "(", "True", ")", "\n", "loss", ".", "begin_pass", "(", ")", "\n", "m", ".", "begin_pass", "(", ")", "\n", "for", "i", "in", "range", "(", "data_size", ")", ":", "\n", "\t\t", "(", "data_name", ",", "source", ",", "target", ",", "\n", "batch_ex_idx", ",", "batch_l", ",", "source_l", ",", "target_l", ",", "label", ",", "res_map", ")", "=", "data", "[", "batch_order", "[", "i", "]", "]", "\n", "\n", "wv_idx1", "=", "Variable", "(", "source", ",", "requires_grad", "=", "False", ")", "\n", "wv_idx2", "=", "Variable", "(", "target", ",", "requires_grad", "=", "False", ")", "\n", "y_gold", "=", "Variable", "(", "label", ",", "requires_grad", "=", "False", ")", "\n", "\n", "# update network parameters", "\n", "shared", ".", "epoch", "=", "epoch_id", "\n", "m", ".", "update_context", "(", "batch_ex_idx", ",", "batch_l", ",", "source_l", ",", "target_l", ",", "res_map", ")", "\n", "\n", "# forward pass", "\n", "output", "=", "m", ".", "forward", "(", "wv_idx1", ",", "wv_idx2", ")", "\n", "\n", "# loss", "\n", "batch_loss", "=", "loss", "(", "output", ",", "y_gold", ")", "\n", "\n", "# stats", "\n", "train_loss", "+=", "float", "(", "batch_loss", ".", "data", ")", "\n", "num_ex", "+=", "batch_l", "\n", "time_taken", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "acc_batch_size", "+=", "batch_l", "\n", "\n", "# accumulate grads", "\n", "batch_loss", ".", "backward", "(", ")", "\n", "\n", "# accumulate current batch until the rolled up batch size exceeds threshold or meet certain boundary", "\n", "if", "i", "==", "data_size", "-", "1", "or", "acc_batch_size", ">=", "opt", ".", "acc_batch_size", "or", "(", "i", "+", "1", ")", "%", "opt", ".", "print_every", "==", "0", ":", "\n", "\t\t\t", "grad_norm2", "=", "optim", ".", "step", "(", "m", ",", "acc_batch_size", ")", "\n", "if", "opt", ".", "ema", "==", "1", ":", "\n", "\t\t\t\t", "ema", ".", "step", "(", "m", ")", "\n", "\n", "# clear up grad", "\n", "", "m", ".", "zero_grad", "(", ")", "\n", "acc_batch_size", "=", "0", "\n", "\n", "# stats", "\n", "grad_norm2_avg", "=", "grad_norm2", "\n", "min_grad_norm2", "=", "min", "(", "min_grad_norm2", ",", "grad_norm2_avg", ")", "\n", "max_grad_norm2", "=", "max", "(", "max_grad_norm2", ",", "grad_norm2_avg", ")", "\n", "time_taken", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "loss_stats", "=", "loss", ".", "print_cur_stats", "(", ")", "\n", "\n", "if", "(", "i", "+", "1", ")", "%", "opt", ".", "print_every", "==", "0", ":", "\n", "\t\t\t\t", "stats", "=", "'{0}, Batch {1:.1f}k '", ".", "format", "(", "epoch_id", "+", "1", ",", "float", "(", "i", "+", "1", ")", "/", "1000", ")", "\n", "stats", "+=", "'Grad {0:.1f}/{1:.1f} '", ".", "format", "(", "min_grad_norm2", ",", "max_grad_norm2", ")", "\n", "stats", "+=", "'Loss {0:.4f} '", ".", "format", "(", "train_loss", "/", "num_ex", ")", "\n", "stats", "+=", "loss", ".", "print_cur_stats", "(", ")", "\n", "stats", "+=", "'Time {0:.1f}'", ".", "format", "(", "time_taken", ")", "\n", "print", "(", "stats", ")", "\n", "\n", "", "", "", "perf", ",", "extra_perf", "=", "loss", ".", "get_epoch_metric", "(", ")", "\n", "\n", "m", ".", "end_pass", "(", ")", "\n", "loss", ".", "end_pass", "(", ")", "\n", "\n", "return", "perf", ",", "extra_perf", ",", "train_loss", "/", "num_ex", ",", "num_ex", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.train.train": [[163, 218], ["train_data.subsample", "print", "print", "max", "val_data.subsample", "print", "print", "range", "int", "train.train_epoch", "train_perfs.append", "print", "train.validate", "val_perfs.append", "extra_perfs.append", "print", "print", "zip", "print", "print", "m.get_param_dict", "util.save_param_dict", "util.save_opt", "print", "ema.get_param_dict", "util.save_param_dict"], "function", ["home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.data.Data.subsample", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.data.Data.subsample", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.train.train_epoch", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.train.validate", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.pipeline.Pipeline.get_param_dict", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.util.save_param_dict", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.util.save_opt", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.pipeline.Pipeline.get_param_dict", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.util.save_param_dict"], ["", "def", "train", "(", "opt", ",", "shared", ",", "m", ",", "optim", ",", "ema", ",", "train_data", ",", "val_data", ")", ":", "\n", "\t", "best_val_perf", "=", "0.0", "\n", "test_perf", "=", "0.0", "\n", "train_perfs", "=", "[", "]", "\n", "val_perfs", "=", "[", "]", "\n", "extra_perfs", "=", "[", "]", "\n", "\n", "train_idx", ",", "train_num_ex", "=", "train_data", ".", "subsample", "(", "opt", ".", "percent", ")", "\n", "print", "(", "'{0} examples sampled for training'", ".", "format", "(", "train_num_ex", ")", ")", "\n", "print", "(", "'for the record, the first 10 training batches are: {0}'", ".", "format", "(", "train_idx", "[", ":", "10", "]", ")", ")", "\n", "# sample the same proportion from the dev set as well", "\n", "#\tbut we don't want this to be too small", "\n", "minimal_dev_num", "=", "max", "(", "int", "(", "train_num_ex", "*", "0.1", ")", ",", "1000", ")", "\n", "val_idx", ",", "val_num_ex", "=", "val_data", ".", "subsample", "(", "opt", ".", "percent", ",", "minimal_num", "=", "minimal_dev_num", ")", "\n", "print", "(", "'{0} examples sampled for dev'", ".", "format", "(", "val_num_ex", ")", ")", "\n", "print", "(", "'for the record, the first 10 dev batches are: {0}'", ".", "format", "(", "val_idx", "[", ":", "10", "]", ")", ")", "\n", "\n", "start", "=", "0", "\n", "for", "i", "in", "range", "(", "start", ",", "opt", ".", "epochs", ")", ":", "\n", "\t\t", "train_perf", ",", "extra_train_perf", ",", "loss", ",", "num_ex", "=", "train_epoch", "(", "opt", ",", "shared", ",", "m", ",", "optim", ",", "ema", ",", "train_data", ",", "i", ",", "train_idx", ")", "\n", "train_perfs", ".", "append", "(", "train_perf", ")", "\n", "extra_perf_str", "=", "' '", ".", "join", "(", "[", "'{:.4f}'", ".", "format", "(", "p", ")", "for", "p", "in", "extra_train_perf", "]", ")", "\n", "print", "(", "'Train {0:.4f} All {1}'", ".", "format", "(", "train_perf", ",", "extra_perf_str", ")", ")", "\n", "\n", "# evaluate", "\n", "#\tand save if it's the best model", "\n", "val_perf", ",", "extra_val_perf", ",", "val_loss", ",", "num_ex", "=", "validate", "(", "opt", ",", "shared", ",", "m", ",", "val_data", ",", "val_idx", ")", "\n", "val_perfs", ".", "append", "(", "val_perf", ")", "\n", "extra_perfs", ".", "append", "(", "extra_val_perf", ")", "\n", "extra_perf_str", "=", "' '", ".", "join", "(", "[", "'{:.4f}'", ".", "format", "(", "p", ")", "for", "p", "in", "extra_val_perf", "]", ")", "\n", "print", "(", "'Val {0:.4f} All {1}'", ".", "format", "(", "val_perf", ",", "extra_perf_str", ")", ")", "\n", "\n", "perf_table_str", "=", "''", "\n", "cnt", "=", "0", "\n", "print", "(", "'Epoch  | Train | Val ...'", ")", "\n", "for", "train_perf", ",", "extra_perf", "in", "zip", "(", "train_perfs", ",", "extra_perfs", ")", ":", "\n", "\t\t\t", "extra_perf_str", "=", "' '", ".", "join", "(", "[", "'{:.4f}'", ".", "format", "(", "p", ")", "for", "p", "in", "extra_perf", "]", ")", "\n", "perf_table_str", "+=", "'{0}\\t{1:.4f}\\t{2}\\n'", ".", "format", "(", "cnt", "+", "1", ",", "train_perf", ",", "extra_perf_str", ")", "\n", "cnt", "+=", "1", "\n", "", "print", "(", "perf_table_str", ")", "\n", "\n", "if", "val_perf", ">", "best_val_perf", ":", "\n", "\t\t\t", "best_val_perf", "=", "val_perf", "\n", "print", "(", "'saving model to {0}'", ".", "format", "(", "opt", ".", "save_file", ")", ")", "\n", "param_dict", "=", "m", ".", "get_param_dict", "(", ")", "\n", "save_param_dict", "(", "param_dict", ",", "'{0}.hdf5'", ".", "format", "(", "opt", ".", "save_file", ")", ")", "\n", "save_opt", "(", "opt", ",", "'{0}.opt'", ".", "format", "(", "opt", ".", "save_file", ")", ")", "\n", "\n", "# save ema", "\n", "if", "opt", ".", "ema", "==", "1", ":", "\n", "\t\t\t\t", "ema_param_dict", "=", "ema", ".", "get_param_dict", "(", ")", "\n", "save_param_dict", "(", "ema_param_dict", ",", "'{0}.ema.hdf5'", ".", "format", "(", "opt", ".", "save_file", ")", ")", "\n", "\n", "", "", "else", ":", "\n", "\t\t\t", "print", "(", "'skip saving model for perf <= {0:.4f}'", ".", "format", "(", "best_val_perf", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.train.validate": [[221, 260], ["m.train", "multiclass_loss.MulticlassLoss", "print", "multiclass_loss.MulticlassLoss.begin_pass", "m.begin_pass", "range", "multiclass_loss.MulticlassLoss.get_epoch_metric", "m.end_pass", "multiclass_loss.MulticlassLoss.end_pass", "val_idx.size", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "m.update_context", "m.forward", "multiclass_loss.MulticlassLoss.", "float", "val_idx.size"], "function", ["home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.train.train", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.classifier.local_classifier.LocalClassifier.begin_pass", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.classifier.local_classifier.LocalClassifier.begin_pass", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.multiclass_loss.MulticlassLoss.get_epoch_metric", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.classifier.local_classifier.LocalClassifier.end_pass", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.classifier.local_classifier.LocalClassifier.end_pass", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.data.Data.size", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.pipeline.Pipeline.update_context", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.classifier.local_classifier.LocalClassifier.forward", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.data.Data.size"], ["", "", "", "def", "validate", "(", "opt", ",", "shared", ",", "m", ",", "val_data", ",", "val_idx", ")", ":", "\n", "\t", "m", ".", "train", "(", "False", ")", "\n", "\n", "val_loss", "=", "0.0", "\n", "num_ex", "=", "0", "\n", "\n", "loss", "=", "MulticlassLoss", "(", "opt", ",", "shared", ")", "\n", "\n", "data_size", "=", "val_idx", ".", "size", "(", ")", "[", "0", "]", "\n", "print", "(", "'validating on the {0} batches...'", ".", "format", "(", "val_idx", ".", "size", "(", ")", "[", "0", "]", ")", ")", "\n", "\n", "loss", ".", "begin_pass", "(", ")", "\n", "m", ".", "begin_pass", "(", ")", "\n", "for", "i", "in", "range", "(", "data_size", ")", ":", "\n", "\t\t", "(", "data_name", ",", "source", ",", "target", ",", "\n", "batch_ex_idx", ",", "batch_l", ",", "source_l", ",", "target_l", ",", "label", ",", "res_map", ")", "=", "val_data", "[", "val_idx", "[", "i", "]", "]", "\n", "\n", "wv_idx1", "=", "Variable", "(", "source", ",", "requires_grad", "=", "False", ")", "\n", "wv_idx2", "=", "Variable", "(", "target", ",", "requires_grad", "=", "False", ")", "\n", "y_gold", "=", "Variable", "(", "label", ",", "requires_grad", "=", "False", ")", "\n", "\n", "# update network parameters", "\n", "m", ".", "update_context", "(", "batch_ex_idx", ",", "batch_l", ",", "source_l", ",", "target_l", ",", "res_map", ")", "\n", "\n", "# forward pass", "\n", "pred", "=", "m", ".", "forward", "(", "wv_idx1", ",", "wv_idx2", ")", "\n", "\n", "# loss", "\n", "batch_loss", "=", "loss", "(", "pred", ",", "y_gold", ")", "\n", "\n", "# stats", "\n", "val_loss", "+=", "float", "(", "batch_loss", ".", "data", ")", "\n", "num_ex", "+=", "batch_l", "\n", "\n", "", "perf", ",", "extra_perf", "=", "loss", ".", "get_epoch_metric", "(", ")", "\n", "m", ".", "end_pass", "(", ")", "\n", "loss", ".", "end_pass", "(", ")", "\n", "\n", "return", "(", "perf", ",", "extra_perf", ",", "val_loss", "/", "num_ex", ",", "num_ex", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.train.main": [[264, 308], ["parser.parse_args", "holder.Holder", "torch.manual_seed", "print", "pipeline.Pipeline", "optimizer.Optimizer", "ema.EMA", "m.cuda.init_weight", "filter", "sum", "print", "data.Data", "data.Data", "print", "train.train", "torch.cuda.set_device", "torch.cuda.manual_seed_all", "m.cuda.parameters", "m.cuda.cuda", "parser.parse_args.train_res.split", "parser.parse_args.val_res.split", "numpy.prod", "data.Data.size", "p.size", "parser.parse_args.train_res.split", "parser.parse_args.val_res.split"], "function", ["home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.pipeline.Pipeline.init_weight", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.train.train", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.data.Data.size", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.data.Data.size"], ["", "def", "main", "(", "args", ")", ":", "\n", "\t", "opt", "=", "parser", ".", "parse_args", "(", "args", ")", "\n", "shared", "=", "Holder", "(", ")", "\n", "\n", "# ", "\n", "opt", ".", "train_data", "=", "opt", ".", "dir", "+", "opt", ".", "train_data", "\n", "opt", ".", "val_data", "=", "opt", ".", "dir", "+", "opt", ".", "val_data", "\n", "opt", ".", "train_res", "=", "''", "if", "opt", ".", "train_res", "==", "''", "else", "','", ".", "join", "(", "[", "opt", ".", "dir", "+", "path", "for", "path", "in", "opt", ".", "train_res", ".", "split", "(", "','", ")", "]", ")", "\n", "opt", ".", "val_res", "=", "''", "if", "opt", ".", "val_res", "==", "''", "else", "','", ".", "join", "(", "[", "opt", ".", "dir", "+", "path", "for", "path", "in", "opt", ".", "val_res", ".", "split", "(", "','", ")", "]", ")", "\n", "opt", ".", "word_vecs", "=", "opt", ".", "dir", "+", "opt", ".", "word_vecs", "\n", "opt", ".", "dict", "=", "opt", ".", "dir", "+", "opt", ".", "dict", "\n", "opt", ".", "bias_glove", "=", "opt", ".", "dir", "+", "opt", ".", "bias_glove", "\n", "opt", ".", "bias_elmo", "=", "opt", ".", "dir", "+", "opt", ".", "bias_elmo", "\n", "opt", ".", "contract_v1", "=", "opt", ".", "dir", "+", "opt", ".", "contract_v1", "\n", "opt", ".", "contract_v2", "=", "opt", ".", "dir", "+", "opt", ".", "contract_v2", "\n", "\n", "torch", ".", "manual_seed", "(", "opt", ".", "seed", ")", "\n", "if", "opt", ".", "gpuid", "!=", "-", "1", ":", "\n", "\t\t", "torch", ".", "cuda", ".", "set_device", "(", "opt", ".", "gpuid", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "opt", ".", "seed", ")", "\n", "\n", "", "print", "(", "opt", ")", "\n", "\n", "# build model", "\n", "m", "=", "Pipeline", "(", "opt", ",", "shared", ")", "\n", "optim", "=", "Optimizer", "(", "opt", ",", "shared", ")", "\n", "ema", "=", "EMA", "(", "opt", ",", "shared", ")", "\n", "\n", "m", ".", "init_weight", "(", ")", "\n", "model_parameters", "=", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "m", ".", "parameters", "(", ")", ")", "\n", "num_params", "=", "sum", "(", "[", "np", ".", "prod", "(", "p", ".", "size", "(", ")", ")", "for", "p", "in", "model_parameters", "]", ")", "\n", "print", "(", "'total number of trainable parameters: {0}'", ".", "format", "(", "num_params", ")", ")", "\n", "if", "opt", ".", "gpuid", "!=", "-", "1", ":", "\n", "\t\t", "m", "=", "m", ".", "cuda", "(", ")", "\n", "\n", "# loading data", "\n", "", "train_res_files", "=", "None", "if", "opt", ".", "train_res", "==", "''", "else", "opt", ".", "train_res", ".", "split", "(", "','", ")", "\n", "train_data", "=", "Data", "(", "opt", ",", "opt", ".", "train_data", ",", "train_res_files", ")", "\n", "val_res_files", "=", "None", "if", "opt", ".", "val_res", "==", "''", "else", "opt", ".", "val_res", ".", "split", "(", "','", ")", "\n", "val_data", "=", "Data", "(", "opt", ",", "opt", ".", "val_data", ",", "val_res_files", ")", "\n", "\n", "print", "(", "'{0} batches in train set'", ".", "format", "(", "train_data", ".", "size", "(", ")", ")", ")", "\n", "\n", "train", "(", "opt", ",", "shared", ",", "m", ",", "optim", ",", "ema", ",", "train_data", ",", "val_data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.pipeline.Pipeline.__init__": [[22, 48], ["super().__init__", "embeddings.Embeddings", "ProjEncoder", "LocalAttention", "Exception", "LocalClassifier", "Exception", "RNNEncoder", "encoder_with_elmo.EncoderWithElmo", "Exception"], "methods", ["home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.classifier.local_classifier.LocalClassifier.__init__"], ["\t", "def", "__init__", "(", "self", ",", "opt", ",", "shared", ")", ":", "\n", "\t\t", "super", "(", "Pipeline", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "shared", "=", "shared", "\n", "self", ".", "opt", "=", "opt", "\n", "\n", "self", ".", "embeddings", "=", "Embeddings", "(", "opt", ",", "shared", ")", "\n", "\n", "if", "opt", ".", "encoder", "==", "'proj'", ":", "\n", "\t\t\t", "self", ".", "encoder", "=", "ProjEncoder", "(", "opt", ",", "shared", ")", "\n", "", "elif", "opt", ".", "encoder", "==", "'rnn'", ":", "\n", "\t\t\t", "self", ".", "encoder", "=", "RNNEncoder", "(", "opt", ",", "shared", ")", "\n", "", "elif", "opt", ".", "encoder", "==", "\"encoder_with_elmo\"", ":", "\n", "\t\t\t", "self", ".", "encoder", "=", "EncoderWithElmo", "(", "opt", ",", "shared", ")", "\n", "", "else", ":", "\n", "\t\t\t", "raise", "Exception", "(", "'unrecognized enocder: {0}'", ".", "format", "(", "opt", ".", "encoder", ")", ")", "\n", "\n", "", "if", "opt", ".", "attention", "==", "'local'", ":", "\n", "\t\t\t", "self", ".", "attention", "=", "LocalAttention", "(", "opt", ",", "shared", ")", "\n", "", "else", ":", "\n", "\t\t\t", "raise", "Exception", "(", "'unrecognized attention: {0}'", ".", "format", "(", "opt", ".", "attention", ")", ")", "\n", "\n", "", "if", "opt", ".", "classifier", "==", "'local'", ":", "\n", "\t\t\t", "self", ".", "classifier", "=", "LocalClassifier", "(", "opt", ",", "shared", ")", "\n", "", "else", ":", "\n", "\t\t\t", "raise", "Exception", "(", "'unrecognized classifier: {0}'", ".", "format", "(", "opt", ".", "classifier", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.pipeline.Pipeline.init_weight": [[50, 88], ["pipeline.Pipeline.named_parameters", "len", "print", "pipeline.Pipeline.named_parameters", "missed_names.append", "pipeline.Pipeline.named_parameters", "hasattr", "print", "torch.nn.init.xavier_uniform_", "missed_names.append", "missed_names.append", "print", "torch.nn.init.constant_", "missed_names.append", "hasattr", "print", "torch.nn.init.xavier_normal_", "print", "torch.nn.init.constant_", "missed_names.append"], "methods", ["None"], ["", "", "def", "init_weight", "(", "self", ")", ":", "\n", "\t\t", "missed_names", "=", "[", "]", "\n", "if", "self", ".", "opt", ".", "param_init_type", "==", "'xavier_uniform'", ":", "\n", "\t\t\t", "for", "n", ",", "p", "in", "self", ".", "named_parameters", "(", ")", ":", "\n", "\t\t\t\t", "if", "p", ".", "requires_grad", "and", "not", "hasattr", "(", "p", ",", "'skip_init'", ")", ":", "\n", "\t\t\t\t\t", "if", "'weight'", "in", "n", ":", "\n", "\t\t\t\t\t\t", "print", "(", "'initializing {}'", ".", "format", "(", "n", ")", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "p", ")", "\n", "#p.data.mul_(self.opt.param_init)", "\n", "", "elif", "'bias'", "in", "n", ":", "\n", "\t\t\t\t\t\t", "print", "(", "'initializing {}'", ".", "format", "(", "n", ")", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "p", ",", "0", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t\t", "missed_names", ".", "append", "(", "n", ")", "\n", "", "", "else", ":", "\n", "\t\t\t\t\t", "missed_names", ".", "append", "(", "n", ")", "\n", "", "", "", "elif", "self", ".", "opt", ".", "param_init_type", "==", "'xavier_normal'", ":", "\n", "\t\t\t", "for", "n", ",", "p", "in", "self", ".", "named_parameters", "(", ")", ":", "\n", "\t\t\t\t", "if", "p", ".", "requires_grad", "and", "not", "hasattr", "(", "p", ",", "'skip_init'", ")", ":", "\n", "\t\t\t\t\t", "if", "'weight'", "in", "n", ":", "\n", "\t\t\t\t\t\t", "print", "(", "'initializing {}'", ".", "format", "(", "n", ")", ")", "\n", "nn", ".", "init", ".", "xavier_normal_", "(", "p", ")", "\n", "#p.data.mul_(self.opt.param_init)", "\n", "", "elif", "'bias'", "in", "n", ":", "\n", "\t\t\t\t\t\t", "print", "(", "'initializing {}'", ".", "format", "(", "n", ")", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "p", ",", "0", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t\t", "missed_names", ".", "append", "(", "n", ")", "\n", "", "", "else", ":", "\n", "\t\t\t\t\t", "missed_names", ".", "append", "(", "n", ")", "\n", "", "", "", "elif", "self", ".", "opt", ".", "param_init_type", "==", "'no'", ":", "\n", "\t\t\t", "for", "n", ",", "p", "in", "self", ".", "named_parameters", "(", ")", ":", "\n", "\t\t\t\t", "missed_names", ".", "append", "(", "n", ")", "\n", "", "", "else", ":", "\n", "\t\t\t", "assert", "(", "False", ")", "\n", "\n", "", "if", "len", "(", "missed_names", ")", "!=", "0", ":", "\n", "\t\t\t", "print", "(", "'uninitialized fields: {0}'", ".", "format", "(", "missed_names", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.pipeline.Pipeline.forward": [[90, 103], ["pipeline.Pipeline.embeddings", "pipeline.Pipeline.embeddings", "pipeline.Pipeline.encoder", "pipeline.Pipeline.attention", "pipeline.Pipeline.classifier", "hasattr", "run_forward_hooks"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "token1", ",", "token2", ")", ":", "\n", "\t\t", "token1", "=", "self", ".", "embeddings", "(", "token1", ")", "# (batch_l, context_l, word_vec_size)", "\n", "token2", "=", "self", ".", "embeddings", "(", "token2", ")", "# (batch_l, response_l, word_vec_size)", "\n", "\n", "input_emb1", ",", "input_emb2", ",", "input_enc1", ",", "input_enc2", "=", "self", ".", "encoder", "(", "token1", ",", "token2", ")", "\n", "att1", ",", "att2", "=", "self", ".", "attention", "(", "input_enc1", ",", "input_enc2", ")", "\n", "out", "=", "self", ".", "classifier", "(", "input_emb1", ",", "input_emb2", ",", "att1", ",", "att2", ")", "\n", "\n", "# if there is any fwd pass hooks, execute them", "\n", "if", "hasattr", "(", "self", ".", "opt", ",", "'forward_hooks'", ")", "and", "self", ".", "opt", ".", "forward_hooks", "!=", "''", ":", "\n", "\t\t\t", "run_forward_hooks", "(", "self", ".", "opt", ",", "self", ".", "shared", ",", "self", ")", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.pipeline.Pipeline.update_context": [[105, 111], ["None"], "methods", ["None"], ["", "def", "update_context", "(", "self", ",", "batch_ex_idx", ",", "batch_l", ",", "sent_l1", ",", "sent_l2", ",", "res_map", "=", "None", ")", ":", "\n", "\t\t", "self", ".", "shared", ".", "batch_ex_idx", "=", "batch_ex_idx", "\n", "self", ".", "shared", ".", "batch_l", "=", "batch_l", "\n", "self", ".", "shared", ".", "sent_l1", "=", "sent_l1", "\n", "self", ".", "shared", ".", "sent_l2", "=", "sent_l2", "\n", "self", ".", "shared", ".", "res_map", "=", "res_map", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.pipeline.Pipeline.begin_pass": [[113, 117], ["pipeline.Pipeline.encoder.begin_pass", "pipeline.Pipeline.attention.begin_pass", "pipeline.Pipeline.classifier.begin_pass"], "methods", ["home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.classifier.local_classifier.LocalClassifier.begin_pass", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.classifier.local_classifier.LocalClassifier.begin_pass", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.classifier.local_classifier.LocalClassifier.begin_pass"], ["", "def", "begin_pass", "(", "self", ")", ":", "\n", "\t\t", "self", ".", "encoder", ".", "begin_pass", "(", ")", "\n", "self", ".", "attention", ".", "begin_pass", "(", ")", "\n", "self", ".", "classifier", ".", "begin_pass", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.pipeline.Pipeline.end_pass": [[118, 122], ["pipeline.Pipeline.encoder.end_pass", "pipeline.Pipeline.attention.end_pass", "pipeline.Pipeline.classifier.end_pass"], "methods", ["home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.classifier.local_classifier.LocalClassifier.end_pass", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.classifier.local_classifier.LocalClassifier.end_pass", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.classifier.local_classifier.LocalClassifier.end_pass"], ["", "def", "end_pass", "(", "self", ")", ":", "\n", "\t\t", "self", ".", "encoder", ".", "end_pass", "(", ")", "\n", "self", ".", "attention", ".", "end_pass", "(", ")", "\n", "self", ".", "classifier", ".", "end_pass", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.pipeline.Pipeline.get_param_dict": [[124, 137], ["pipeline.Pipeline.named_parameters", "torch2np", "skipped_fields.append", "hasattr", "p.data.cpu"], "methods", ["home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.util.torch2np"], ["", "def", "get_param_dict", "(", "self", ")", ":", "\n", "\t\t", "is_cuda", "=", "self", ".", "opt", ".", "gpuid", "!=", "-", "1", "\n", "param_dict", "=", "{", "}", "\n", "skipped_fields", "=", "[", "]", "\n", "for", "n", ",", "p", "in", "self", ".", "named_parameters", "(", ")", ":", "\n", "# save all parameters that do not have skip_save flag", "\n", "# \tunlearnable parameters will also be saved", "\n", "\t\t\t", "if", "not", "hasattr", "(", "p", ",", "'skip_save'", ")", "or", "p", ".", "skip_save", "==", "0", ":", "\n", "\t\t\t\t", "param_dict", "[", "n", "]", "=", "torch2np", "(", "p", ".", "data", ".", "cpu", "(", ")", ",", "is_cuda", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "skipped_fields", ".", "append", "(", "n", ")", "\n", "#print('skipped fields:', skipped_fields)", "\n", "", "", "return", "param_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.pipeline.Pipeline.set_param_dict": [[138, 150], ["pipeline.Pipeline.named_parameters", "print", "rec_fields.append", "print", "p.data.copy_", "skipped_fields.append", "torch.from_numpy"], "methods", ["None"], ["", "def", "set_param_dict", "(", "self", ",", "param_dict", ")", ":", "\n", "\t\t", "skipped_fields", "=", "[", "]", "\n", "rec_fields", "=", "[", "]", "\n", "for", "n", ",", "p", "in", "self", ".", "named_parameters", "(", ")", ":", "\n", "\t\t\t", "if", "n", "in", "param_dict", ":", "\n", "\t\t\t\t", "rec_fields", ".", "append", "(", "n", ")", "\n", "# load everything we have", "\n", "print", "(", "'setting {0}'", ".", "format", "(", "n", ")", ")", "\n", "p", ".", "data", ".", "copy_", "(", "torch", ".", "from_numpy", "(", "param_dict", "[", "n", "]", "[", ":", "]", ")", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "skipped_fields", ".", "append", "(", "n", ")", "\n", "", "", "print", "(", "'skipped fileds: {0}'", ".", "format", "(", "skipped_fields", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.pipeline.overfit": [[153, 229], ["sys.path.insert", "holder.Holder", "holder.Holder", "torch.randn", "torch.randn", "torch.from_numpy", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "pipeline.Pipeline", "m.cuda.init_weight", "torch.nn.NLLLoss", "optimizer.Adagrad", "print", "m.cuda.", "criterion.cuda.", "print", "print", "print", "enumerate", "print", "xrange", "numpy.random.randint", "input1_.cuda.cuda", "input2_.cuda.cuda", "gold_.cuda.cuda", "m.cuda.cuda", "criterion.cuda.cuda", "optimizer.Adagrad.cuda", "m.cuda.parameters", "print", "m.cuda.state_dict", "print", "m.cuda.", "criterion.cuda.", "print", "print", "print", "m.cuda.zero_grad", "criterion.backward", "optimizer.Adagrad.step", "holder.Holder.out.exp"], "function", ["home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.pipeline.Pipeline.init_weight", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.optimizer.Optimizer.step"], ["", "", "def", "overfit", "(", ")", ":", "\n", "\t", "sys", ".", "path", ".", "insert", "(", "0", ",", "'../attention/'", ")", "\n", "\n", "opt", "=", "Holder", "(", ")", "\n", "opt", ".", "gpuid", "=", "1", "\n", "opt", ".", "word_vec_size", "=", "3", "\n", "opt", ".", "hidden_size", "=", "4", "\n", "opt", ".", "dropout", "=", "0.0", "\n", "opt", ".", "num_labels", "=", "3", "\n", "opt", ".", "encoder", "=", "'proj'", "\n", "opt", ".", "attention", "=", "'local'", "\n", "opt", ".", "classifier", "=", "'local'", "\n", "opt", ".", "constr", "=", "''", "\n", "opt", ".", "scale_hard_att", "=", "1", "\n", "opt", ".", "learning_rate", "=", "0.05", "\n", "opt", ".", "param_init", "=", "0.01", "\n", "shared", "=", "Holder", "(", ")", "\n", "shared", ".", "batch_l", "=", "2", "\n", "shared", ".", "sent_l1", "=", "5", "\n", "shared", ".", "sent_l2", "=", "8", "\n", "\n", "input1_", "=", "torch", ".", "randn", "(", "shared", ".", "batch_l", ",", "shared", ".", "sent_l1", ",", "opt", ".", "word_vec_size", ")", "\n", "input2_", "=", "torch", ".", "randn", "(", "shared", ".", "batch_l", ",", "shared", ".", "sent_l2", ",", "opt", ".", "word_vec_size", ")", "\n", "gold_", "=", "torch", ".", "from_numpy", "(", "np", ".", "random", ".", "randint", "(", "opt", ".", "num_labels", ",", "size", "=", "shared", ".", "batch_l", ")", ")", "\n", "if", "opt", ".", "gpuid", "!=", "-", "1", ":", "\n", "\t\t", "input1_", "=", "input1_", ".", "cuda", "(", ")", "\n", "input2_", "=", "input2_", ".", "cuda", "(", ")", "\n", "gold_", "=", "gold_", ".", "cuda", "(", ")", "\n", "", "shared", ".", "input1", "=", "Variable", "(", "input1_", ",", "True", ")", "\n", "shared", ".", "input2", "=", "Variable", "(", "input2_", ",", "True", ")", "\n", "gold", "=", "Variable", "(", "gold_", ",", "False", ")", "\n", "\n", "# build network", "\n", "m", "=", "Pipeline", "(", "opt", ",", "shared", ")", "\n", "m", ".", "init_weight", "(", ")", "\n", "criterion", "=", "torch", ".", "nn", ".", "NLLLoss", "(", "size_average", "=", "False", ")", "\n", "optim", "=", "Adagrad", "(", "opt", ")", "\n", "\n", "\n", "print", "(", "m", ")", "\n", "assert", "(", "False", ")", "\n", "\n", "if", "opt", ".", "gpuid", "!=", "-", "1", ":", "\n", "\t\t", "m", "=", "m", ".", "cuda", "(", ")", "\n", "criterion", "=", "criterion", ".", "cuda", "(", ")", "\n", "optim", ".", "cuda", "(", ")", "\n", "\n", "# update batch info", "\n", "", "shared", ".", "batch_l", "=", "2", "\n", "shared", ".", "sent_l1", "=", "5", "\n", "shared", ".", "sent_l2", "=", "8", "\n", "\n", "# run network", "\n", "shared", ".", "out", "=", "m", "(", "shared", ".", "input1", ",", "shared", ".", "input2", ")", "\n", "loss", "=", "criterion", "(", "shared", ".", "out", ",", "gold", ")", "\n", "print", "(", "shared", ".", "out", ")", "\n", "print", "(", "loss", ")", "\n", "print", "(", "m", ")", "\n", "for", "i", ",", "p", "in", "enumerate", "(", "m", ".", "parameters", "(", ")", ")", ":", "\n", "\t\t", "print", "(", "p", ".", "data", ")", "\n", "\n", "", "print", "(", "m", ".", "state_dict", "(", ")", ")", "\n", "\n", "\n", "for", "i", "in", "xrange", "(", "300", ")", ":", "\n", "\t\t", "print", "(", "'epoch: {0}'", ".", "format", "(", "i", "+", "1", ")", ")", "\n", "\n", "shared", ".", "out", "=", "m", "(", "shared", ".", "input1", ",", "shared", ".", "input2", ")", "\n", "loss", "=", "criterion", "(", "shared", ".", "out", ",", "gold", ")", "\n", "print", "(", "'y\\': {0}'", ".", "format", "(", "shared", ".", "out", ".", "exp", "(", ")", ")", ")", "\n", "print", "(", "'y*: {0}'", ".", "format", "(", "gold", ")", ")", "\n", "print", "(", "'loss: {0}'", ".", "format", "(", "loss", ")", ")", "\n", "\n", "m", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optim", ".", "step", "(", "shared", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.embedding_bias.EmbeddingBias.__init__": [[15, 76], ["super().__init__", "print", "h5py.File", "print", "h5py.File", "print", "h5py.File", "torch.nn.Parameter", "torch.from_numpy().float().view", "torch.from_numpy().view().numpy", "torch.from_numpy().view().numpy", "contractionFunc.maxSpan", "numpy.identity", "contractionFunc.gsConstrained", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "Exception", "torch.ones", "torch.nn.Parameter", "torch.from_numpy().float().view", "contractionFunc.basis", "torch.from_numpy().float().view", "torch.from_numpy().float().view", "torch.from_numpy().float().view", "torch.from_numpy().float", "torch.ones", "torch.nn.Parameter", "torch.from_numpy().float().view", "Exception", "torch.from_numpy().view", "torch.from_numpy().view", "numpy.vstack", "torch.from_numpy().float", "torch.ones", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy", "torch.from_numpy().float", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.classifier.local_classifier.LocalClassifier.__init__", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.contractionFunc.maxSpan", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.contractionFunc.gsConstrained", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.contractionFunc.basis"], ["\t", "def", "__init__", "(", "self", ",", "opt", ",", "shared", ")", ":", "\n", "\t\t", "super", "(", "EmbeddingBias", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "opt", "=", "opt", "\n", "self", ".", "shared", "=", "shared", "\n", "\n", "if", "opt", ".", "bias_glove", "!=", "opt", ".", "dir", ":", "\n", "\t\t\t", "print", "(", "'loading embedding bias from {0}'", ".", "format", "(", "opt", ".", "bias_glove", ")", ")", "\n", "f", "=", "h5py", ".", "File", "(", "opt", ".", "bias_glove", ",", "'r'", ")", "\n", "bias_glove", "=", "f", "[", "'bias'", "]", "[", ":", "]", "\n", "\n", "", "if", "opt", ".", "contract_v1", "!=", "opt", ".", "dir", ":", "\n", "\t\t\t", "print", "(", "'loading embedding contract1 from {0}'", ".", "format", "(", "opt", ".", "contract_v1", ")", ")", "\n", "f", "=", "h5py", ".", "File", "(", "opt", ".", "contract_v1", ",", "'r'", ")", "\n", "v1", "=", "f", "[", "'bias'", "]", "[", ":", "]", "\n", "", "if", "opt", ".", "contract_v2", "!=", "opt", ".", "dir", ":", "\n", "\t\t\t", "print", "(", "'loading embedding contract2 from {0}'", ".", "format", "(", "opt", ".", "contract_v2", ")", ")", "\n", "f", "=", "h5py", ".", "File", "(", "opt", ".", "contract_v2", ",", "'r'", ")", "\n", "v2", "=", "f", "[", "'bias'", "]", "[", ":", "]", "\n", "\n", "", "assert", "(", "opt", ".", "fix_word_vecs", "==", "1", ")", "# this will not work with dynamic word embeddings, natually", "\n", "\n", "if", "opt", ".", "bias_glove", "!=", "opt", ".", "dir", ":", "\n", "\t\t\t", "if", "opt", ".", "bias_type", "==", "'removal1'", ":", "\n", "\t\t\t\t", "self", ".", "bias_glove", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "1", ",", "1", ",", "opt", ".", "word_vec_size", ")", ",", "requires_grad", "=", "False", ")", "\n", "self", ".", "bias_glove", ".", "data", "=", "torch", ".", "from_numpy", "(", "bias_glove", ")", ".", "float", "(", ")", ".", "view", "(", "1", ",", "1", ",", "opt", ".", "word_vec_size", ")", "\n", "self", ".", "bias_glove", ".", "skip_init", "=", "1", "\n", "self", ".", "bias_glove", ".", "skip_save", "=", "1", "\n", "", "elif", "opt", ".", "bias_type", "==", "'removal2'", ":", "\n", "\t\t\t\t", "self", ".", "bias_glove", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "1", ",", "2", ",", "opt", ".", "word_vec_size", ")", ",", "requires_grad", "=", "False", ")", "\n", "self", ".", "bias_glove", ".", "data", "=", "torch", ".", "from_numpy", "(", "bias_glove", ")", ".", "float", "(", ")", ".", "view", "(", "1", ",", "2", ",", "opt", ".", "word_vec_size", ")", "\n", "self", ".", "bias_glove", ".", "skip_init", "=", "1", "\n", "self", ".", "bias_glove", ".", "skip_save", "=", "1", "\n", "", "elif", "opt", ".", "bias_type", "==", "'removal3'", ":", "\n", "\t\t\t\t", "self", ".", "bias_glove", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "1", ",", "3", ",", "opt", ".", "word_vec_size", ")", ",", "requires_grad", "=", "False", ")", "\n", "self", ".", "bias_glove", ".", "data", "=", "torch", ".", "from_numpy", "(", "bias_glove", ")", ".", "float", "(", ")", ".", "view", "(", "1", ",", "3", ",", "opt", ".", "word_vec_size", ")", "\n", "self", ".", "bias_glove", ".", "skip_init", "=", "1", "\n", "self", ".", "bias_glove", ".", "skip_save", "=", "1", "\n", "", "else", ":", "\n", "\t\t\t\t", "raise", "Exception", "(", "'unrecognized bias_type {0}'", ".", "format", "(", "self", ".", "opt", ".", "bias_type", ")", ")", "\n", "\n", "", "", "if", "opt", ".", "contract_v1", "!=", "opt", ".", "dir", ":", "\n", "\t\t\t", "if", "opt", ".", "bias_type", "==", "'contract'", ":", "\n", "\t\t\t\t", "v1", "=", "torch", ".", "from_numpy", "(", "v1", ")", ".", "view", "(", "-", "1", ",", "opt", ".", "word_vec_size", ")", ".", "numpy", "(", ")", "\n", "v2", "=", "torch", ".", "from_numpy", "(", "v2", ")", ".", "view", "(", "-", "1", ",", "opt", ".", "word_vec_size", ")", ".", "numpy", "(", ")", "\n", "\n", "v1", ",", "v2", "=", "maxSpan", "(", "v1", ",", "v2", ")", "\n", "U", "=", "np", ".", "identity", "(", "opt", ".", "word_vec_size", ")", "\n", "U", "=", "gsConstrained", "(", "U", ",", "v1", ",", "basis", "(", "np", ".", "vstack", "(", "(", "v1", ",", "v2", ")", ")", ")", ")", "\n", "\n", "self", ".", "contract_glove1", "=", "nn", ".", "Parameter", "(", "torch", ".", "from_numpy", "(", "v1", ")", ".", "float", "(", ")", ".", "view", "(", "1", ",", "1", ",", "opt", ".", "word_vec_size", ")", ",", "requires_grad", "=", "False", ")", "\n", "self", ".", "contract_glove1", ".", "skip_init", "=", "1", "\n", "self", ".", "contract_glove1", ".", "skip_save", "=", "1", "\n", "self", ".", "contract_glove2", "=", "nn", ".", "Parameter", "(", "torch", ".", "from_numpy", "(", "v2", ")", ".", "float", "(", ")", ".", "view", "(", "1", ",", "1", ",", "opt", ".", "word_vec_size", ")", ",", "requires_grad", "=", "False", ")", "\n", "self", ".", "contract_glove2", ".", "skip_init", "=", "1", "\n", "self", ".", "contract_glove2", ".", "skip_save", "=", "1", "\n", "self", ".", "contract_U", "=", "nn", ".", "Parameter", "(", "torch", ".", "from_numpy", "(", "U", ")", ".", "float", "(", ")", ".", "view", "(", "1", ",", "opt", ".", "word_vec_size", ",", "opt", ".", "word_vec_size", ")", ",", "requires_grad", "=", "False", ")", "\n", "self", ".", "contract_U", ".", "skip_init", "=", "1", "\n", "self", ".", "contract_U", ".", "skip_save", "=", "1", "\n", "\n", "", "else", ":", "\n", "\t\t\t\t", "raise", "Exception", "(", "'unrecognized bias_type {0}'", ".", "format", "(", "self", ".", "opt", ".", "bias_type", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.embedding_bias.EmbeddingBias.contraction_correct": [[78, 83], ["contractionFunc.correction"], "methods", ["home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.contractionFunc.correction"], ["", "", "", "def", "contraction_correct", "(", "self", ",", "enc", ")", ":", "\n", "\t\t", "rec", "=", "enc", "\n", "enc", "=", "correction", "(", "self", ".", "opt", ",", "self", ".", "contract_U", ",", "self", ".", "contract_glove1", ",", "self", ".", "contract_glove2", ",", "enc", ")", "\n", "\n", "return", "enc", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.embedding_bias.EmbeddingBias.forward": [[85, 115], ["embedding_bias.EmbeddingBias.bias_glove.expand", "glove_enc.bmm", "embedding_bias.EmbeddingBias.contraction_correct", "Exception", "embedding_bias.EmbeddingBias.transpose", "embedding_bias.EmbeddingBias.bias_glove[].expand", "embedding_bias.EmbeddingBias.bias_glove[].expand", "glove_enc.bmm", "glove_enc.bmm", "embedding_bias.EmbeddingBias.transpose", "embedding_bias.EmbeddingBias.transpose", "embedding_bias.EmbeddingBias.bias_glove[].expand", "embedding_bias.EmbeddingBias.bias_glove[].expand", "embedding_bias.EmbeddingBias.bias_glove[].expand", "glove_enc.bmm", "glove_enc.bmm", "glove_enc.bmm", "Exception", "embedding_bias.EmbeddingBias.transpose", "embedding_bias.EmbeddingBias.transpose", "embedding_bias.EmbeddingBias.transpose"], "methods", ["home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.embedding_bias.EmbeddingBias.contraction_correct"], ["", "def", "forward", "(", "self", ",", "glove_enc", ")", ":", "\n", "\t\t", "batch_l", ",", "sent_l", ",", "glove_size", "=", "glove_enc", ".", "shape", "\n", "\n", "if", "self", ".", "opt", ".", "bias_glove", "!=", "self", ".", "opt", ".", "dir", ":", "\n", "\t\t\t", "if", "self", ".", "opt", ".", "bias_type", "==", "'removal1'", ":", "\n", "\t\t\t\t", "bias", "=", "self", ".", "bias_glove", ".", "expand", "(", "batch_l", ",", "1", ",", "glove_size", ")", "\n", "proj", "=", "glove_enc", ".", "bmm", "(", "bias", ".", "transpose", "(", "1", ",", "2", ")", ")", "# batch_l, sent_l, 1", "\n", "return", "glove_enc", "-", "(", "proj", "*", "bias", ")", "\n", "", "elif", "self", ".", "opt", ".", "bias_type", "==", "'removal2'", ":", "\n", "\t\t\t\t", "bias1", "=", "self", ".", "bias_glove", "[", ":", ",", "0", ":", "1", ",", ":", "]", ".", "expand", "(", "batch_l", ",", "1", ",", "glove_size", ")", "\n", "bias2", "=", "self", ".", "bias_glove", "[", ":", ",", "1", ":", "2", ",", ":", "]", ".", "expand", "(", "batch_l", ",", "1", ",", "glove_size", ")", "\n", "proj1", "=", "glove_enc", ".", "bmm", "(", "bias1", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "proj2", "=", "glove_enc", ".", "bmm", "(", "bias2", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "return", "glove_enc", "-", "(", "proj1", "*", "bias1", ")", "-", "(", "proj2", "*", "bias2", ")", "\n", "", "elif", "self", ".", "opt", ".", "bias_type", "==", "'removal3'", ":", "\n", "\t\t\t\t", "bias1", "=", "self", ".", "bias_glove", "[", ":", ",", "0", ":", "1", ",", ":", "]", ".", "expand", "(", "batch_l", ",", "1", ",", "glove_size", ")", "\n", "bias2", "=", "self", ".", "bias_glove", "[", ":", ",", "1", ":", "2", ",", ":", "]", ".", "expand", "(", "batch_l", ",", "1", ",", "glove_size", ")", "\n", "bias3", "=", "self", ".", "bias_glove", "[", ":", ",", "2", ":", "3", ",", ":", "]", ".", "expand", "(", "batch_l", ",", "1", ",", "glove_size", ")", "\n", "proj1", "=", "glove_enc", ".", "bmm", "(", "bias1", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "proj2", "=", "glove_enc", ".", "bmm", "(", "bias2", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "proj3", "=", "glove_enc", ".", "bmm", "(", "bias3", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "return", "glove_enc", "-", "(", "proj1", "*", "bias1", ")", "-", "(", "proj2", "*", "bias2", ")", "-", "(", "proj3", "*", "bias3", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "raise", "Exception", "(", "'unrecognized bias_type {0}'", ".", "format", "(", "self", ".", "opt", ".", "bias_type", ")", ")", "\n", "\n", "", "", "if", "self", ".", "opt", ".", "contract_v1", "!=", "self", ".", "opt", ".", "dir", ":", "\n", "\t\t\t", "if", "self", ".", "opt", ".", "bias_type", "==", "'contract'", ":", "\n", "\t\t\t\t", "return", "self", ".", "contraction_correct", "(", "glove_enc", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "raise", "Exception", "(", "'unrecognized bias_type {0}'", ".", "format", "(", "self", ".", "opt", ".", "bias_type", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.data.Data.__init__": [[11, 76], ["print", "h5py.File", "[].astype", "[].astype", "[].astype", "[].astype", "[].astype", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "range", "range", "data.Data.batches.append", "data.Data.source[].sum", "data.Data.target[].sum", "h5py.File.endswith", "data.Data.res_names.extend", "int", "int", "int", "data.Data.__load_txt", "h5py.File.endswith", "data.Data.__load_elmo", "h5py.File.endswith", "data.Data.__load_json_res"], "methods", ["home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.data.Data.__load_txt", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.data.Data.__load_elmo", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.data.Data.__load_json_res"], ["\t", "def", "__init__", "(", "self", ",", "opt", ",", "data_file", ",", "res_files", "=", "None", ")", ":", "\n", "\t\t", "self", ".", "opt", "=", "opt", "\n", "self", ".", "data_name", "=", "data_file", "\n", "\n", "print", "(", "'loading data from {0}'", ".", "format", "(", "data_file", ")", ")", "\n", "f", "=", "h5py", ".", "File", "(", "data_file", ",", "'r'", ")", "\n", "self", ".", "source", "=", "f", "[", "'source'", "]", "[", ":", "]", "# indices to glove tokens", "\n", "self", ".", "target", "=", "f", "[", "'target'", "]", "[", ":", "]", "\n", "self", ".", "all_source", "=", "f", "[", "'all_source'", "]", "[", ":", "]", "# indices to all tokens", "\n", "self", ".", "all_target", "=", "f", "[", "'all_target'", "]", "[", ":", "]", "\n", "self", ".", "source_l", "=", "f", "[", "'source_l'", "]", "[", ":", "]", ".", "astype", "(", "np", ".", "int32", ")", "# (batch_l,)", "\n", "self", ".", "target_l", "=", "f", "[", "'target_l'", "]", "[", ":", "]", ".", "astype", "(", "np", ".", "int32", ")", "# (batch_l,)", "\n", "self", ".", "label", "=", "f", "[", "'label'", "]", "[", ":", "]", "\n", "self", ".", "batch_l", "=", "f", "[", "'batch_l'", "]", "[", ":", "]", ".", "astype", "(", "np", ".", "int32", ")", "\n", "self", ".", "batch_idx", "=", "f", "[", "'batch_idx'", "]", "[", ":", "]", ".", "astype", "(", "np", ".", "int32", ")", "\n", "self", ".", "ex_idx", "=", "f", "[", "'ex_idx'", "]", "[", ":", "]", ".", "astype", "(", "np", ".", "int32", ")", "\n", "self", ".", "length", "=", "self", ".", "batch_l", ".", "shape", "[", "0", "]", "\n", "\n", "self", ".", "all_source", "=", "torch", ".", "from_numpy", "(", "self", ".", "all_source", ")", "\n", "self", ".", "all_target", "=", "torch", ".", "from_numpy", "(", "self", ".", "all_target", ")", "\n", "self", ".", "source", "=", "torch", ".", "from_numpy", "(", "self", ".", "source", ")", "\n", "self", ".", "target", "=", "torch", ".", "from_numpy", "(", "self", ".", "target", ")", "\n", "self", ".", "label", "=", "torch", ".", "from_numpy", "(", "self", ".", "label", ")", "\n", "\n", "self", ".", "batches", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "length", ")", ":", "\n", "\t\t\t", "start", "=", "self", ".", "batch_idx", "[", "i", "]", "\n", "end", "=", "start", "+", "self", ".", "batch_l", "[", "i", "]", "\n", "\n", "# get example token indices", "\n", "all_source_i", "=", "self", ".", "all_source", "[", "start", ":", "end", ",", "0", ":", "self", ".", "source_l", "[", "i", "]", "]", "\n", "all_target_i", "=", "self", ".", "all_target", "[", "start", ":", "end", ",", "0", ":", "self", ".", "target_l", "[", "i", "]", "]", "\n", "source_i", "=", "self", ".", "source", "[", "start", ":", "end", ",", "0", ":", "self", ".", "source_l", "[", "i", "]", "]", "\n", "target_i", "=", "self", ".", "target", "[", "start", ":", "end", ",", "0", ":", "self", ".", "target_l", "[", "i", "]", "]", "\n", "label_i", "=", "self", ".", "label", "[", "start", ":", "end", "]", "\n", "\n", "# sanity check", "\n", "assert", "(", "self", ".", "source", "[", "start", ":", "end", ",", "self", ".", "source_l", "[", "i", "]", ":", "]", ".", "sum", "(", ")", "==", "0", ")", "\n", "assert", "(", "self", ".", "target", "[", "start", ":", "end", ",", "self", ".", "target_l", "[", "i", "]", ":", "]", ".", "sum", "(", ")", "==", "0", ")", "\n", "\n", "# src, tgt, all_src, all_tgt, batch_l, src_l, tgt_l, label, raw info", "\n", "self", ".", "batches", ".", "append", "(", "(", "source_i", ",", "target_i", ",", "all_source_i", ",", "all_target_i", ",", "\n", "int", "(", "self", ".", "batch_l", "[", "i", "]", ")", ",", "int", "(", "self", ".", "source_l", "[", "i", "]", ")", ",", "int", "(", "self", ".", "target_l", "[", "i", "]", ")", ",", "label_i", ")", ")", "\n", "\n", "# count examples", "\n", "", "self", ".", "num_ex", "=", "0", "\n", "for", "i", "in", "range", "(", "self", ".", "length", ")", ":", "\n", "\t\t\t", "self", ".", "num_ex", "+=", "self", ".", "batch_l", "[", "i", "]", "\n", "\n", "# load resource files", "\n", "", "self", ".", "res_names", "=", "[", "]", "\n", "if", "res_files", "is", "not", "None", ":", "\n", "\t\t\t", "for", "f", "in", "res_files", ":", "\n", "\t\t\t\t", "if", "f", ".", "endswith", "(", "'txt'", ")", ":", "\n", "\t\t\t\t\t", "res_names", "=", "self", ".", "__load_txt", "(", "f", ")", "\n", "\n", "", "elif", "f", ".", "endswith", "(", "'elmo.hdf5'", ")", ":", "\n", "\t\t\t\t\t", "res_names", "=", "self", ".", "__load_elmo", "(", "f", ")", "\n", "\n", "", "elif", "f", ".", "endswith", "(", "'json'", ")", ":", "\n", "\t\t\t\t\t", "res_names", "=", "self", ".", "__load_json_res", "(", "f", ")", "\n", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "assert", "(", "False", ")", "\n", "", "self", ".", "res_names", ".", "extend", "(", "res_names", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.data.Data.subsample": [[78, 96], ["int", "max", "torch.LongTensor", "range", "torch.randperm", "data.Data.batch_l.sum", "float", "data.Data.size", "data.Data.size"], "methods", ["home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.data.Data.size", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.data.Data.size"], ["", "", "", "def", "subsample", "(", "self", ",", "ratio", ",", "minimal_num", "=", "0", ")", ":", "\n", "\t\t", "target_num_ex", "=", "int", "(", "float", "(", "self", ".", "num_ex", ")", "*", "ratio", ")", "\n", "target_num_ex", "=", "max", "(", "target_num_ex", ",", "minimal_num", ")", "\n", "sub_idx", "=", "torch", ".", "LongTensor", "(", "range", "(", "self", ".", "size", "(", ")", ")", ")", "\n", "sub_num_ex", "=", "0", "\n", "\n", "if", "ratio", "!=", "1.0", ":", "\n", "\t\t\t", "rand_idx", "=", "torch", ".", "randperm", "(", "self", ".", "size", "(", ")", ")", "\n", "i", "=", "0", "\n", "while", "sub_num_ex", "<", "target_num_ex", "and", "i", "<", "self", ".", "batch_l", ".", "shape", "[", "0", "]", ":", "\n", "\t\t\t\t", "sub_num_ex", "+=", "self", ".", "batch_l", "[", "rand_idx", "[", "i", "]", "]", "\n", "i", "+=", "1", "\n", "", "sub_idx", "=", "rand_idx", "[", ":", "i", "]", "\n", "\n", "", "else", ":", "\n", "\t\t\t", "sub_num_ex", "=", "self", ".", "batch_l", ".", "sum", "(", ")", "\n", "\n", "", "return", "sub_idx", ",", "sub_num_ex", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.data.Data.__load_txt": [[98, 120], ["print", "setattr", "io.open", "path.split", "print", "lines.append", "parsed.append", "l.rstrip", "l.split"], "methods", ["None"], ["", "def", "__load_txt", "(", "self", ",", "path", ")", ":", "\n", "\t\t", "lines", "=", "[", "]", "\n", "print", "(", "'loading resource from {0}'", ".", "format", "(", "path", ")", ")", "\n", "# read file in unicode mode!!!", "\n", "with", "io", ".", "open", "(", "path", ",", "'r+'", ",", "encoding", "=", "\"utf-8\"", ")", "as", "f", ":", "\n", "\t\t\t", "for", "l", "in", "f", ":", "\n", "\t\t\t\t", "lines", ".", "append", "(", "l", ".", "rstrip", "(", ")", ")", "\n", "# the second last extension is the res name", "\n", "", "", "res_name", "=", "path", ".", "split", "(", "'.'", ")", "[", "-", "2", "]", "\n", "res_data", "=", "lines", "[", ":", "]", "\n", "\n", "# some customized parsing", "\n", "parsed", "=", "[", "]", "\n", "if", "res_name", "==", "'sent1'", "or", "res_name", "==", "'sent2'", "or", "res_name", "==", "'x_pair'", ":", "\n", "\t\t\t", "print", "(", "'customized parsing...'", ")", "\n", "for", "l", "in", "res_data", ":", "\n", "\t\t\t\t", "parsed", ".", "append", "(", "l", ".", "split", "(", ")", ")", "\n", "", "", "else", ":", "\n", "\t\t\t", "parsed", "=", "res_data", "\n", "\n", "", "setattr", "(", "self", ",", "res_name", ",", "parsed", ")", "\n", "return", "[", "res_name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.data.Data.__load_elmo": [[122, 129], ["print", "h5py.File"], "methods", ["None"], ["", "def", "__load_elmo", "(", "self", ",", "path", ")", ":", "\n", "\t\t", "print", "(", "'loading resources from {0}'", ".", "format", "(", "path", ")", ")", "\n", "f", "=", "h5py", ".", "File", "(", "path", ",", "'r'", ")", "\n", "self", ".", "elmo_file", "=", "f", "\n", "\n", "# the attributes will not be assigned to self, instead, they are customized in __get_res", "\n", "return", "[", "'elmo_src'", ",", "'elmo_tgt'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.data.Data.__load_json_res": [[131, 152], ["print", "ujson.loads", "next", "open", "f.read", "len", "iter", "data.Data.__load_json_map", "data.Data.__load_json_list"], "methods", ["home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.data.Data.__load_json_map", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.data.Data.__load_json_list"], ["", "def", "__load_json_res", "(", "self", ",", "path", ")", ":", "\n", "\t\t", "print", "(", "'loading resource from {0}'", ".", "format", "(", "path", ")", ")", "\n", "\n", "f_str", "=", "None", "\n", "with", "open", "(", "path", ",", "'r'", ")", "as", "f", ":", "\n", "\t\t\t", "f_str", "=", "f", ".", "read", "(", ")", "\n", "", "j_obj", "=", "ujson", ".", "loads", "(", "f_str", ")", "\n", "\n", "# get key name of the file", "\n", "assert", "(", "len", "(", "j_obj", ")", "==", "2", ")", "\n", "res_type", "=", "next", "(", "iter", "(", "j_obj", ")", ")", "\n", "\n", "res_name", "=", "None", "\n", "if", "j_obj", "[", "res_type", "]", "==", "'map'", ":", "\n", "\t\t\t", "res_name", "=", "self", ".", "__load_json_map", "(", "path", ")", "\n", "", "elif", "j_obj", "[", "res_type", "]", "==", "'list'", ":", "\n", "\t\t\t", "res_name", "=", "self", ".", "__load_json_list", "(", "path", ")", "\n", "", "else", ":", "\n", "\t\t\t", "assert", "(", "False", ")", "\n", "\n", "", "return", "[", "res_name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.data.Data.__load_json_map": [[154, 182], ["ujson.loads", "ujson.loads.items", "j_obj[].items", "setattr", "open", "f.read", "len", "v.items", "int", "int", "int"], "methods", ["home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.holder.Holder.items", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.holder.Holder.items", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.holder.Holder.items"], ["", "def", "__load_json_map", "(", "self", ",", "path", ")", ":", "\n", "\t\t", "f_str", "=", "None", "\n", "with", "open", "(", "path", ",", "'r'", ")", "as", "f", ":", "\n", "\t\t\t", "f_str", "=", "f", ".", "read", "(", ")", "\n", "", "j_obj", "=", "ujson", ".", "loads", "(", "f_str", ")", "\n", "\n", "assert", "(", "len", "(", "j_obj", ")", "==", "2", ")", "\n", "\n", "res_name", "=", "None", "\n", "for", "k", ",", "v", "in", "j_obj", ".", "items", "(", ")", ":", "\n", "\t\t\t", "if", "k", "!=", "'type'", ":", "\n", "\t\t\t\t", "res_name", "=", "k", "\n", "\n", "# optimize indices", "\n", "", "", "res", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "j_obj", "[", "res_name", "]", ".", "items", "(", ")", ":", "\n", "\t\t\t", "lut", "=", "{", "}", "\n", "for", "i", ",", "j", "in", "v", ".", "items", "(", ")", ":", "\n", "\t\t\t\t", "if", "i", "==", "res_name", ":", "\n", "\t\t\t\t\t", "lut", "[", "res_name", "]", "=", "[", "int", "(", "l", ")", "for", "l", "in", "j", "]", "\n", "", "else", ":", "\n", "# for token indices, shift by 1 to incorporate the nul-token at the beginning", "\n", "\t\t\t\t\t", "lut", "[", "int", "(", "i", ")", "]", "=", "(", "[", "l", "+", "1", "for", "l", "in", "j", "[", "0", "]", "]", ",", "[", "l", "+", "1", "for", "l", "in", "j", "[", "1", "]", "]", ")", "\n", "\n", "", "", "res", "[", "int", "(", "k", ")", "]", "=", "lut", "\n", "\n", "", "setattr", "(", "self", ",", "res_name", ",", "res", ")", "\n", "return", "res_name", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.data.Data.__load_json_list": [[184, 208], ["ujson.loads", "ujson.loads.items", "j_obj[].items", "setattr", "open", "f.read", "len", "int"], "methods", ["home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.holder.Holder.items", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.holder.Holder.items"], ["", "def", "__load_json_list", "(", "self", ",", "path", ")", ":", "\n", "\t\t", "f_str", "=", "None", "\n", "with", "open", "(", "path", ",", "'r'", ")", "as", "f", ":", "\n", "\t\t\t", "f_str", "=", "f", ".", "read", "(", ")", "\n", "", "j_obj", "=", "ujson", ".", "loads", "(", "f_str", ")", "\n", "\n", "assert", "(", "len", "(", "j_obj", ")", "==", "2", ")", "\n", "\n", "res_name", "=", "None", "\n", "for", "k", ",", "v", "in", "j_obj", ".", "items", "(", ")", ":", "\n", "\t\t\t", "if", "k", "!=", "'type'", ":", "\n", "\t\t\t\t", "res_name", "=", "k", "\n", "\n", "# optimize indices", "\n", "", "", "res", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "j_obj", "[", "res_name", "]", ".", "items", "(", ")", ":", "\n", "\t\t\t", "p", "=", "v", "[", "'p'", "]", "\n", "h", "=", "v", "[", "'h'", "]", "\n", "\n", "# for token indices, shift by 1 to incorporate the nul-token at the beginning", "\n", "res", "[", "int", "(", "k", ")", "]", "=", "(", "[", "l", "+", "1", "for", "l", "in", "p", "]", ",", "[", "l", "+", "1", "for", "l", "in", "h", "]", ")", "\n", "\n", "", "setattr", "(", "self", ",", "res_name", ",", "res", ")", "\n", "return", "res_name", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.data.Data.size": [[211, 213], ["None"], "methods", ["None"], ["", "def", "size", "(", "self", ")", ":", "\n", "\t\t", "return", "self", ".", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.data.Data.__get_res_elmo": [[215, 234], ["torch.from_numpy", "embs.cuda.cuda.cuda", "torch.from_numpy", "Exception", "embs.cuda.cuda.cuda"], "methods", ["None"], ["", "def", "__get_res_elmo", "(", "self", ",", "res_name", ",", "idx", ",", "batch_ex_idx", ")", ":", "\n", "\t\t", "if", "res_name", "==", "'elmo_src'", ":", "\n", "\t\t\t", "embs", "=", "torch", ".", "from_numpy", "(", "self", ".", "elmo_file", "[", "'{0}.src_batch'", ".", "format", "(", "idx", ")", "]", "[", ":", "]", ")", "\n", "if", "self", ".", "opt", ".", "gpuid", "!=", "-", "1", ":", "\n", "\t\t\t\t", "embs", "=", "embs", ".", "cuda", "(", ")", "\n", "#embs = [torch.from_numpy(self.elmo_file['{0}.src'.format(i)][:]) for i in batch_ex_idx]", "\n", "#if self.opt.gpuid != -1:", "\n", "#\tembs = [p.cuda() for p in embs]", "\n", "", "return", "embs", "\n", "", "elif", "res_name", "==", "'elmo_tgt'", ":", "\n", "\t\t\t", "embs", "=", "torch", ".", "from_numpy", "(", "self", ".", "elmo_file", "[", "'{0}.tgt_batch'", ".", "format", "(", "idx", ")", "]", "[", ":", "]", ")", "\n", "if", "self", ".", "opt", ".", "gpuid", "!=", "-", "1", ":", "\n", "\t\t\t\t", "embs", "=", "embs", ".", "cuda", "(", ")", "\n", "#embs = [torch.from_numpy(self.elmo_file['{0}.tgt'.format(i)][:]) for i in batch_ex_idx]", "\n", "#if self.opt.gpuid != -1:", "\n", "#\tembs = [p.cuda() for p in embs]", "\n", "", "return", "embs", "\n", "", "else", ":", "\n", "\t\t\t", "raise", "Exception", "(", "'unrecognized res {0}'", ".", "format", "(", "res_name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.data.Data.__getitem__": [[236, 254], ["data.Data.__get_res", "source.cuda.cuda.cuda", "target.cuda.cuda.cuda", "label.cuda.cuda.cuda", "range"], "methods", ["home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.data.Data.__get_res"], ["", "", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "\t\t", "(", "source", ",", "target", ",", "all_source", ",", "all_target", ",", "\n", "batch_l", ",", "source_l", ",", "target_l", ",", "label", ")", "=", "self", ".", "batches", "[", "idx", "]", "\n", "token_l", "=", "self", ".", "opt", ".", "token_l", "\n", "\n", "# transfer to gpu if needed", "\n", "if", "self", ".", "opt", ".", "gpuid", "!=", "-", "1", ":", "\n", "\t\t\t", "source", "=", "source", ".", "cuda", "(", ")", "\n", "target", "=", "target", ".", "cuda", "(", ")", "\n", "label", "=", "label", ".", "cuda", "(", ")", "\n", "\n", "# get batch ex indices", "\n", "", "batch_ex_idx", "=", "[", "self", ".", "ex_idx", "[", "i", "]", "for", "i", "in", "range", "(", "self", ".", "batch_idx", "[", "idx", "]", ",", "self", ".", "batch_idx", "[", "idx", "]", "+", "self", ".", "batch_l", "[", "idx", "]", ")", "]", "\n", "\n", "res_map", "=", "self", ".", "__get_res", "(", "idx", ")", "\n", "\n", "return", "(", "self", ".", "data_name", ",", "source", ",", "target", ",", "\n", "batch_ex_idx", ",", "batch_l", ",", "source_l", ",", "target_l", ",", "label", ",", "res_map", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.data.Data.__get_res": [[256, 276], ["len", "range", "data.Data.__get_res_elmo", "getattr"], "methods", ["home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.data.Data.__get_res_elmo"], ["", "def", "__get_res", "(", "self", ",", "idx", ")", ":", "\n", "# if there is no resource presents, return None", "\n", "\t\t", "if", "len", "(", "self", ".", "res_names", ")", "==", "0", ":", "\n", "\t\t\t", "return", "None", "\n", "\n", "", "batch_ex_idx", "=", "[", "self", ".", "ex_idx", "[", "i", "]", "for", "i", "in", "range", "(", "self", ".", "batch_idx", "[", "idx", "]", ",", "self", ".", "batch_idx", "[", "idx", "]", "+", "self", ".", "batch_l", "[", "idx", "]", ")", "]", "\n", "\n", "all_res", "=", "{", "}", "\n", "for", "res_n", "in", "self", ".", "res_names", ":", "\n", "# some customization for elmo is needed here for lazy loading", "\n", "\t\t\t", "if", "'elmo'", "in", "res_n", ":", "\n", "\t\t\t\t", "batch_res", "=", "self", ".", "__get_res_elmo", "(", "res_n", ",", "idx", ",", "batch_ex_idx", ")", "\n", "all_res", "[", "res_n", "]", "=", "batch_res", "\n", "", "else", ":", "\n", "\t\t\t\t", "res", "=", "getattr", "(", "self", ",", "res_n", ")", "\n", "\n", "batch_res", "=", "[", "res", "[", "ex_id", "]", "for", "ex_id", "in", "batch_ex_idx", "]", "\n", "all_res", "[", "res_n", "]", "=", "batch_res", "\n", "\n", "", "", "return", "all_res", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.contractionFunc.maxSpan": [[5, 15], ["range", "len", "range", "len", "numpy.matmul", "numpy.linalg.norm", "numpy.linalg.norm", "numpy.vstack", "numpy.linalg.norm", "numpy.linalg.norm"], "function", ["None"], ["def", "maxSpan", "(", "V1", ",", "V2", ")", ":", "\n", "\t", "maxVal", "=", "-", "2000000", "\n", "for", "i", "in", "range", "(", "len", "(", "V1", ")", ")", ":", "\n", "\t\t", "for", "j", "in", "range", "(", "len", "(", "V2", ")", ")", ":", "\n", "\n", "\t\t\t", "dot", "=", "np", ".", "matmul", "(", "V1", "[", "i", "]", ",", "V2", "[", "j", "]", ".", "T", ")", "\n", "if", "dot", ">=", "maxVal", ":", "\n", "\t\t\t\t", "maxVal", "=", "dot", "\n", "vec", "=", "np", ".", "vstack", "(", "(", "V1", "[", "i", "]", "/", "np", ".", "linalg", ".", "norm", "(", "V1", "[", "i", "]", ")", ",", "V2", "[", "j", "]", "/", "np", ".", "linalg", ".", "norm", "(", "V2", "[", "j", "]", ")", ")", ")", "\n", "", "", "", "return", "V1", "[", "i", "]", "/", "np", ".", "linalg", ".", "norm", "(", "V1", "[", "i", "]", ")", ",", "V2", "[", "j", "]", "/", "np", ".", "linalg", ".", "norm", "(", "V2", "[", "j", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.contractionFunc.proj": [[16, 18], ["numpy.dot", "numpy.dot"], "function", ["None"], ["", "def", "proj", "(", "u", ",", "a", ")", ":", "\n", "\t", "return", "(", "(", "np", ".", "dot", "(", "u", ",", "a", ".", "T", ")", ")", "*", "u", ")", "/", "(", "np", ".", "dot", "(", "u", ",", "u", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.contractionFunc.basis": [[19, 24], ["numpy.linalg.norm", "float", "numpy.matmul"], "function", ["None"], ["", "def", "basis", "(", "vec", ")", ":", "\n", "\t", "v1", "=", "vec", "[", "0", "]", ";", "v2", "=", "vec", "[", "1", "]", ";", "\n", "v2Prime", "=", "v2", "-", "v1", "*", "float", "(", "np", ".", "matmul", "(", "v1", ",", "v2", ".", "T", ")", ")", ";", "\n", "v2Prime", "=", "v2Prime", "/", "np", ".", "linalg", ".", "norm", "(", "v2Prime", ")", "\n", "return", "v2Prime", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.contractionFunc.gsConstrained": [[25, 40], ["numpy.asarray().reshape", "numpy.asarray().reshape", "numpy.zeros", "range", "numpy.linalg.norm", "contractionFunc.proj", "numpy.linalg.norm", "range", "numpy.asarray", "numpy.asarray", "len", "numpy.linalg.norm", "numpy.shape", "numpy.shape", "contractionFunc.proj"], "function", ["home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.contractionFunc.proj", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.contractionFunc.proj"], ["", "def", "gsConstrained", "(", "matrix", ",", "v1", ",", "v2", ")", ":", "\n", "\t", "v1", "=", "np", ".", "asarray", "(", "v1", ")", ".", "reshape", "(", "-", "1", ")", "\n", "v2", "=", "np", ".", "asarray", "(", "v2", ")", ".", "reshape", "(", "-", "1", ")", "\n", "u", "=", "np", ".", "zeros", "(", "(", "np", ".", "shape", "(", "matrix", ")", "[", "0", "]", ",", "np", ".", "shape", "(", "matrix", ")", "[", "1", "]", ")", ")", "\n", "u", "[", "0", "]", "=", "v1", "\n", "u", "[", "0", "]", "=", "u", "[", "0", "]", "/", "np", ".", "linalg", ".", "norm", "(", "u", "[", "0", "]", ")", "\n", "u", "[", "1", "]", "=", "v2", "-", "proj", "(", "u", "[", "0", "]", ",", "v2", ")", "\n", "u", "[", "1", "]", "=", "u", "[", "1", "]", "/", "np", ".", "linalg", ".", "norm", "(", "u", "[", "1", "]", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "matrix", ")", "-", "2", ")", ":", "\n", "\t\t", "p", "=", "0.0", "\n", "for", "j", "in", "range", "(", "0", ",", "i", "+", "2", ")", ":", "\n", "\t\t\t", "p", "=", "p", "+", "proj", "(", "u", "[", "j", "]", ",", "matrix", "[", "i", "]", ")", "\n", "", "u", "[", "i", "+", "2", "]", "=", "matrix", "[", "i", "]", "-", "p", "\n", "u", "[", "i", "+", "2", "]", "=", "u", "[", "i", "+", "2", "]", "/", "np", ".", "linalg", ".", "norm", "(", "u", "[", "i", "+", "2", "]", ")", "\n", "", "return", "u", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.contractionFunc.rotation": [[42, 70], ["numpy.asarray().reshape", "numpy.asarray().reshape", "numpy.asarray().reshape", "contractionFunc.basis", "numpy.arccos", "numpy.arccos", "numpy.dot", "numpy.zeros", "numpy.cos", "numpy.cos", "numpy.hstack", "numpy.vstack", "numpy.dot", "numpy.dot", "numpy.matmul", "numpy.sqrt", "numpy.dot", "numpy.dot", "numpy.sin", "numpy.sin", "numpy.asarray", "numpy.asarray", "numpy.asarray", "len", "numpy.linalg.norm", "numpy.matmul", "numpy.linalg.norm", "numpy.matmul"], "function", ["home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.contractionFunc.basis"], ["", "def", "rotation", "(", "v1", ",", "v2", ",", "x", ")", ":", "\n", "\t", "v1", "=", "np", ".", "asarray", "(", "v1", ")", ".", "reshape", "(", "-", "1", ")", "\n", "v2", "=", "np", ".", "asarray", "(", "v2", ")", ".", "reshape", "(", "-", "1", ")", "\n", "x", "=", "np", ".", "asarray", "(", "x", ")", ".", "reshape", "(", "-", "1", ")", "\n", "\n", "v2P", "=", "basis", "(", "np", ".", "vstack", "(", "(", "v1", ",", "v2", ")", ")", ")", "\n", "xP", "=", "x", "[", "2", ":", "len", "(", "x", ")", "]", "\n", "\n", "x", "=", "(", "np", ".", "dot", "(", "x", ",", "v1", ")", ",", "np", ".", "dot", "(", "x", ",", "v2P", ")", ")", "\n", "v2", "=", "(", "np", ".", "matmul", "(", "v2", ",", "v1", ".", "T", ")", ",", "np", ".", "sqrt", "(", "1", "-", "(", "np", ".", "matmul", "(", "v2", ",", "v1", ".", "T", ")", "**", "2", ")", ")", ")", "\n", "v1", "=", "(", "1", ",", "0", ")", "\n", "thetaX", "=", "0.0", "\n", "theta", "=", "np", ".", "arccos", "(", "np", ".", "dot", "(", "v1", ",", "v2", ")", ")", "\n", "thetaP", "=", "(", "np", ".", "pi", "/", "2.0", ")", "-", "theta", "\n", "phi", "=", "np", ".", "arccos", "(", "np", ".", "dot", "(", "v1", ",", "x", "/", "np", ".", "linalg", ".", "norm", "(", "x", ")", ")", ")", "\n", "d", "=", "np", ".", "dot", "(", "[", "0", ",", "1", "]", ",", "x", "/", "np", ".", "linalg", ".", "norm", "(", "x", ")", ")", "\n", "if", "phi", "<", "thetaP", "and", "d", ">", "0", ":", "\n", "\t\t", "thetaX", "=", "theta", "*", "(", "phi", "/", "thetaP", ")", "\n", "", "elif", "phi", ">", "thetaP", "and", "d", ">", "0", ":", "\n", "\t\t", "thetaX", "=", "theta", "*", "(", "(", "np", ".", "pi", "-", "phi", ")", "/", "(", "np", ".", "pi", "-", "thetaP", ")", ")", "\n", "", "elif", "phi", ">=", "np", ".", "pi", "-", "thetaP", "and", "d", "<", "0", ":", "\n", "\t\t", "thetaX", "=", "theta", "*", "(", "(", "np", ".", "pi", "-", "phi", ")", "/", "thetaP", ")", "\n", "", "elif", "phi", "<", "np", ".", "pi", "-", "thetaP", "and", "d", "<", "0", ":", "\n", "\t\t", "thetaX", "=", "theta", "*", "(", "phi", "/", "(", "np", ".", "pi", "-", "thetaP", ")", ")", "\n", "", "R", "=", "np", ".", "zeros", "(", "(", "2", ",", "2", ")", ")", "\n", "R", "[", "0", "]", "[", "0", "]", "=", "np", ".", "cos", "(", "thetaX", ")", ";", "R", "[", "0", "]", "[", "1", "]", "=", "-", "np", ".", "sin", "(", "thetaX", ")", "\n", "R", "[", "1", "]", "[", "0", "]", "=", "-", "np", ".", "sin", "(", "thetaX", ")", ";", "R", "[", "1", "]", "[", "1", "]", "=", "np", ".", "cos", "(", "thetaX", ")", "\n", "return", "np", ".", "hstack", "(", "(", "np", ".", "matmul", "(", "R", ",", "x", ")", ",", "xP", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.contractionFunc.correction": [[71, 73], ["numpy.matmul", "contractionFunc.rotation", "numpy.matmul"], "function", ["home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.contractionFunc.rotation"], ["", "def", "correction", "(", "U", ",", "v1", ",", "v2", ",", "x", ")", ":", "\n", "\t", "return", "np", ".", "matmul", "(", "U", ".", "T", ",", "rotation", "(", "v1", ",", "v2", ",", "np", ".", "matmul", "(", "U", ",", "x", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.contractionFunc.main": [[74, 107], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "numpy.random.rand", "numpy.random.rand", "contractionFunc.maxSpan", "numpy.identity", "contractionFunc.gsConstrained", "numpy.random.rand", "contractionFunc.correction", "print", "print", "print", "print", "print", "contractionFunc.basis", "numpy.vstack"], "function", ["home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.contractionFunc.maxSpan", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.contractionFunc.gsConstrained", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.contractionFunc.correction", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.contractionFunc.basis"], ["", "def", "main", "(", "arguments", ")", ":", "\n", "\t", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "description", "=", "__doc__", ",", "\n", "formatter_class", "=", "argparse", ".", "ArgumentDefaultsHelpFormatter", ")", "\n", "parser", ".", "add_argument", "(", "'--v1'", ",", "help", "=", "\"Path to dir 1 vector\"", ",", "default", "=", "\"\"", ")", "\n", "parser", ".", "add_argument", "(", "'--v2'", ",", "help", "=", "\"Path to dir 2 vector\"", ",", "default", "=", "\"\"", ")", "\n", "parser", ".", "add_argument", "(", "'--dim'", ",", "help", "=", "\"dimension of vector\"", ",", "type", "=", "int", ",", "default", "=", "300", ")", "\n", "opt", "=", "parser", ".", "parse_args", "(", "arguments", ")", "\n", "\n", "#Running it", "\n", "dimensions", "=", "opt", ".", "dim", "\n", "\n", "#loading the two direction vector files", "\n", "#V1 = np.asmatrix(np.loadtxt(opt.v1))", "\n", "#V2 = np.asmatrix(np.loadtxt(opt.v2))", "\n", "V1", "=", "np", ".", "random", ".", "rand", "(", "1", ",", "opt", ".", "dim", ")", "\n", "V2", "=", "np", ".", "random", ".", "rand", "(", "1", ",", "opt", ".", "dim", ")", "\n", "v1", ",", "v2", "=", "maxSpan", "(", "V1", ",", "V2", ")", "\n", "\n", "#calculating U once is enough", "\n", "U", "=", "np", ".", "identity", "(", "dimensions", ")", "\n", "U", "=", "gsConstrained", "(", "U", ",", "v1", ",", "basis", "(", "np", ".", "vstack", "(", "(", "v1", ",", "v2", ")", ")", ")", ")", "\n", "\n", "x", "=", "np", ".", "random", ".", "rand", "(", "300", ")", "#put in the vector you want, so, each glove vector we are debiaising", "\n", "\n", "#calculating for each word vector x, it's sheared form after contraction", "\n", "result", "=", "correction", "(", "U", ",", "v1", ",", "v2", ",", "x", ")", "\n", "\n", "print", "(", "result", ".", "shape", ")", "\n", "print", "(", "'U.shape'", ",", "U", ".", "shape", ")", "\n", "print", "(", "v1", ".", "shape", ")", "\n", "print", "(", "v2", ".", "shape", ")", "\n", "print", "(", "x", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.embeddings.Embeddings.__init__": [[11, 43], ["super().__init__", "print", "h5py.File", "print", "torch.nn.Embedding", "torch.zeros().float", "torch.from_numpy().float", "embedding_bias.EmbeddingBias", "util.load_dict", "torch.zeros", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.classifier.local_classifier.LocalClassifier.__init__", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.util.load_dict"], ["\t", "def", "__init__", "(", "self", ",", "opt", ",", "shared", ")", ":", "\n", "\t\t", "super", "(", "Embeddings", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "opt", "=", "opt", "\n", "self", ".", "shared", "=", "shared", "\n", "\n", "if", "opt", ".", "debias", "==", "1", ":", "\n", "\t\t\t", "self", ".", "embedding_bias", "=", "EmbeddingBias", "(", "opt", ",", "shared", ")", "\n", "\n", "", "print", "(", "'loading word vector from {0}'", ".", "format", "(", "opt", ".", "word_vecs", ")", ")", "\n", "f", "=", "h5py", ".", "File", "(", "opt", ".", "word_vecs", ",", "'r'", ")", "\n", "word_vecs", "=", "f", "[", "'word_vecs'", "]", "[", ":", "]", "\n", "assert", "(", "opt", ".", "word_vec_size", "==", "word_vecs", ".", "shape", "[", "1", "]", ")", "\n", "num_tok", "=", "word_vecs", ".", "shape", "[", "0", "]", "\n", "\n", "print", "(", "'loading word dict from {0}'", ".", "format", "(", "opt", ".", "dict", ")", ")", "\n", "if", "opt", ".", "dict", "!=", "''", ":", "\n", "\t\t\t", "self", ".", "vocab", "=", "load_dict", "(", "opt", ".", "dict", ")", "\n", "\n", "# assumes <blank> is the first, the second is the oov", "\n", "# \tand assumes there is exactly one oov", "\n", "", "assert", "(", "self", ".", "vocab", "[", "0", "]", "==", "'<blank>'", ")", "\n", "assert", "(", "self", ".", "vocab", "[", "1", "]", "==", "'<s>'", ")", "\n", "assert", "(", "self", ".", "vocab", "[", "2", "]", "==", "'<oov0>'", ")", "\n", "\n", "self", ".", "embeddings", "=", "nn", ".", "Embedding", "(", "num_tok", ",", "opt", ".", "word_vec_size", ")", "\n", "self", ".", "embeddings", ".", "weight", ".", "data", "[", "0", ",", ":", "]", "=", "torch", ".", "zeros", "(", "1", ",", "opt", ".", "word_vec_size", ")", ".", "float", "(", ")", "\n", "# load all w2v including oov from preprocessed hdf5", "\n", "#self.embeddings.weight.data[1:] = rand_tensor((1, opt.word_vec_size), -0.05, 0.05).float()", "\n", "self", ".", "embeddings", ".", "weight", ".", "data", "[", "1", ":", "]", "=", "torch", ".", "from_numpy", "(", "word_vecs", "[", "1", ":", "]", ")", ".", "float", "(", ")", "\n", "self", ".", "embeddings", ".", "weight", ".", "requires_grad", "=", "opt", ".", "fix_word_vecs", "==", "0", "\n", "self", ".", "embeddings", ".", "weight", ".", "skip_init", "=", "1", "\n", "self", ".", "embeddings", ".", "weight", ".", "skip_save", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.embeddings.Embeddings.forward": [[48, 58], ["idx.contiguous().view.contiguous().view.contiguous().view", "embeddings.Embeddings.embeddings().view", "hasattr", "embeddings.Embeddings.embedding_bias", "idx.contiguous().view.contiguous().view.contiguous", "embeddings.Embeddings.embeddings"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "idx", ")", ":", "\n", "\t\t", "batch_l", ",", "seq_l", "=", "idx", ".", "shape", "\n", "idx", "=", "idx", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "# flatten to form a single vector (pytorch 0.3.1 does not support tensor idx)", "\n", "emb", "=", "self", ".", "embeddings", "(", "idx", ")", ".", "view", "(", "batch_l", ",", "seq_l", ",", "self", ".", "opt", ".", "word_vec_size", ")", "\n", "\n", "# if to debias", "\n", "if", "hasattr", "(", "self", ",", "'embedding_bias'", ")", ":", "\n", "\t\t\t", "emb", "=", "self", ".", "embedding_bias", "(", "emb", ")", "\n", "\n", "", "return", "emb", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.embeddings.Embeddings.begin_pass": [[60, 62], ["None"], "methods", ["None"], ["", "def", "begin_pass", "(", "self", ")", ":", "\n", "\t\t", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.embeddings.Embeddings.end_pass": [[63, 65], ["None"], "methods", ["None"], ["", "def", "end_pass", "(", "self", ")", ":", "\n", "\t\t", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.dummy.load_csv": [[3, 16], ["open", "table.append", "heads.extend", "l.rstrip().split", "l.rstrip().split", "l.rstrip", "l.rstrip"], "function", ["None"], ["def", "load_csv", "(", "path", ")", ":", "\n", "\t", "heads", "=", "[", "]", "\n", "table", "=", "[", "]", "\n", "with", "open", "(", "path", ",", "'r'", ")", "as", "f", ":", "\n", "\t\t", "ln_cnt", "=", "0", "\n", "for", "l", "in", "f", ":", "\n", "\t\t\t", "ln_cnt", "+=", "1", "\n", "if", "ln_cnt", "==", "1", ":", "\n", "\t\t\t\t", "heads", ".", "extend", "(", "l", ".", "rstrip", "(", ")", ".", "split", "(", "','", ")", ")", "\n", "continue", "\n", "\n", "", "table", ".", "append", "(", "l", ".", "rstrip", "(", ")", ".", "split", "(", "','", ")", ")", "\n", "", "", "return", "heads", ",", "table", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.preprocess.Indexer.__init__": [[16, 29], ["range", "len", "len", "str"], "methods", ["None"], ["\t", "def", "__init__", "(", "self", ",", "symbols", "=", "[", "\"<blank>\"", "]", ",", "num_oov", "=", "100", ")", ":", "\n", "\t\t", "self", ".", "num_oov", "=", "num_oov", "\n", "\n", "self", ".", "d", "=", "{", "}", "\n", "self", ".", "cnt", "=", "{", "}", "\n", "for", "s", "in", "symbols", ":", "\n", "\t\t\t", "self", ".", "d", "[", "s", "]", "=", "len", "(", "self", ".", "d", ")", "\n", "self", ".", "cnt", "[", "s", "]", "=", "0", "\n", "\n", "", "for", "i", "in", "range", "(", "self", ".", "num_oov", ")", ":", "#hash oov words to one of 100 random embeddings", "\n", "\t\t\t", "oov_word", "=", "'<oov'", "+", "str", "(", "i", ")", "+", "'>'", "\n", "self", ".", "d", "[", "oov_word", "]", "=", "len", "(", "self", ".", "d", ")", "\n", "self", ".", "cnt", "[", "oov_word", "]", "=", "10000000", "# have a large number for oov word to avoid being pruned", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.preprocess.Indexer.convert": [[30, 32], ["str", "numpy.random.randint"], "methods", ["None"], ["", "", "def", "convert", "(", "self", ",", "w", ")", ":", "\n", "\t\t", "return", "self", ".", "d", "[", "w", "]", "if", "w", "in", "self", ".", "d", "else", "self", ".", "d", "[", "'<oov'", "+", "str", "(", "np", ".", "random", ".", "randint", "(", "self", ".", "num_oov", ")", ")", "+", "'>'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.preprocess.Indexer.convert_sequence": [[33, 35], ["preprocess.Indexer.convert"], "methods", ["home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.preprocess.convert"], ["", "def", "convert_sequence", "(", "self", ",", "ls", ")", ":", "\n", "\t\t", "return", "[", "self", ".", "convert", "(", "l", ")", "for", "l", "in", "ls", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.preprocess.Indexer.write": [[36, 47], ["print", "len", "len", "len", "len", "open", "items.sort", "preprocess.Indexer.d.items", "f.write", "f.write"], "methods", ["home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.holder.Holder.items", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.preprocess.Indexer.write", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.preprocess.Indexer.write"], ["", "def", "write", "(", "self", ",", "outfile", ",", "with_cnt", "=", "True", ")", ":", "\n", "\t\t", "print", "(", "len", "(", "self", ".", "d", ")", ",", "len", "(", "self", ".", "cnt", ")", ")", "\n", "assert", "(", "len", "(", "self", ".", "d", ")", "==", "len", "(", "self", ".", "cnt", ")", ")", "\n", "with", "open", "(", "outfile", ",", "'w+'", ")", "as", "f", ":", "\n", "\t\t\t", "items", "=", "[", "(", "v", ",", "k", ")", "for", "k", ",", "v", "in", "self", ".", "d", ".", "items", "(", ")", "]", "\n", "items", ".", "sort", "(", ")", "\n", "for", "v", ",", "k", "in", "items", ":", "\n", "\t\t\t\t", "if", "with_cnt", ":", "\n", "\t\t\t\t\t", "f", ".", "write", "(", "'{0} {1} {2}\\n'", ".", "format", "(", "k", ",", "v", ",", "self", ".", "cnt", "[", "k", "]", ")", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "f", ".", "write", "(", "'{0} {1}\\n'", ".", "format", "(", "k", ",", "v", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.preprocess.Indexer.register_words": [[50, 57], ["len"], "methods", ["None"], ["", "", "", "", "def", "register_words", "(", "self", ",", "wv", ",", "seq", ",", "count", ")", ":", "\n", "\t\t", "for", "w", "in", "seq", ":", "\n", "\t\t\t", "if", "w", "in", "wv", "and", "w", "not", "in", "self", ".", "d", ":", "\n", "\t\t\t\t", "self", ".", "d", "[", "w", "]", "=", "len", "(", "self", ".", "d", ")", "\n", "self", ".", "cnt", "[", "w", "]", "=", "0", "\n", "", "if", "w", "in", "self", ".", "cnt", ":", "\n", "\t\t\t\t", "self", ".", "cnt", "[", "w", "]", "=", "self", ".", "cnt", "[", "w", "]", "+", "1", "if", "count", "else", "self", ".", "cnt", "[", "w", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.preprocess.Indexer.register_all_words": [[59, 66], ["len"], "methods", ["None"], ["", "", "", "def", "register_all_words", "(", "self", ",", "seq", ",", "count", ")", ":", "\n", "\t\t", "for", "w", "in", "seq", ":", "\n", "\t\t\t", "if", "w", "not", "in", "self", ".", "d", ":", "\n", "\t\t\t\t", "self", ".", "d", "[", "w", "]", "=", "len", "(", "self", ".", "d", ")", "\n", "self", ".", "cnt", "[", "w", "]", "=", "0", "\n", "", "if", "w", "in", "self", ".", "cnt", ":", "\n", "\t\t\t\t", "self", ".", "cnt", "[", "w", "]", "=", "self", ".", "cnt", "[", "w", "]", "+", "1", "if", "count", "else", "self", ".", "cnt", "[", "w", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.preprocess.pad": [[68, 75], ["len", "len", "len"], "function", ["None"], ["", "", "", "", "def", "pad", "(", "ls", ",", "length", ",", "symbol", ",", "pad_back", "=", "True", ")", ":", "\n", "\t", "if", "len", "(", "ls", ")", ">=", "length", ":", "\n", "\t\t", "return", "ls", "[", ":", "length", "]", "\n", "", "if", "pad_back", ":", "\n", "\t\t", "return", "ls", "+", "[", "symbol", "]", "*", "(", "length", "-", "len", "(", "ls", ")", ")", "\n", "", "else", ":", "\n", "\t\t", "return", "[", "symbol", "]", "*", "(", "length", "-", "len", "(", "ls", ")", ")", "+", "ls", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.preprocess.get_glove_words": [[76, 82], ["set", "open", "[].strip", "set.add", "line.split"], "function", ["None"], ["", "", "def", "get_glove_words", "(", "f", ")", ":", "\n", "\t", "glove_words", "=", "set", "(", ")", "\n", "for", "line", "in", "open", "(", "f", ",", "\"r\"", ")", ":", "\n", "\t\t", "word", "=", "line", ".", "split", "(", ")", "[", "0", "]", ".", "strip", "(", ")", "\n", "glove_words", ".", "add", "(", "word", ")", "\n", "", "return", "glove_words", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.preprocess.make_vocab": [[84, 109], ["enumerate", "zip", "targ_orig.lower.strip().split", "src_orig.lower.strip().split", "l.rstrip.rstrip", "all_word_indexer.register_all_words", "word_indexer.register_words", "all_word_indexer.register_all_words", "word_indexer.register_words", "label_indexer.register_all_words", "open", "open", "open", "src_orig.lower.rstrip", "src_orig.lower.lower", "targ_orig.lower.lower", "targ_orig.lower.strip", "src_orig.lower.strip", "len", "len"], "function", ["home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.preprocess.Indexer.register_all_words", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.preprocess.Indexer.register_words", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.preprocess.Indexer.register_all_words", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.preprocess.Indexer.register_words", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.preprocess.Indexer.register_all_words"], ["", "def", "make_vocab", "(", "opt", ",", "glove_vocab", ",", "word_indexer", ",", "all_word_indexer", ",", "label_indexer", ",", "sent1", ",", "sent2", ",", "label", ",", "max_seq_l", ",", "count", ")", ":", "\n", "\t", "num_ex", "=", "0", "\n", "for", "_", ",", "(", "src_orig", ",", "targ_orig", ",", "l", ")", "in", "enumerate", "(", "zip", "(", "open", "(", "sent1", ",", "'r'", ")", ",", "open", "(", "sent2", ",", "'r'", ")", ",", "open", "(", "label", ",", "'r'", ")", ")", ")", ":", "\n", "\t\t", "if", "src_orig", ".", "rstrip", "(", ")", "==", "''", ":", "\n", "\t\t\t", "continue", "\n", "", "if", "opt", ".", "lowercase", "==", "1", ":", "\n", "\t\t\t", "src_orig", "=", "src_orig", ".", "lower", "(", ")", "\n", "targ_orig", "=", "targ_orig", ".", "lower", "(", ")", "\n", "\n", "", "targ", "=", "targ_orig", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "src", "=", "src_orig", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "l", "=", "l", ".", "rstrip", "(", ")", "\n", "\n", "assert", "(", "len", "(", "targ", ")", "<=", "max_seq_l", "and", "len", "(", "src", ")", "<=", "max_seq_l", ")", "\n", "\n", "all_word_indexer", ".", "register_all_words", "(", "targ", ",", "count", ")", "\n", "word_indexer", ".", "register_words", "(", "glove_vocab", ",", "targ", ",", "count", ")", "\n", "\n", "all_word_indexer", ".", "register_all_words", "(", "src", ",", "count", ")", "\n", "word_indexer", ".", "register_words", "(", "glove_vocab", ",", "src", ",", "count", ")", "\n", "\n", "label_indexer", ".", "register_all_words", "(", "[", "l", "]", ",", "count", ")", "\n", "num_ex", "+=", "1", "\n", "\n", "", "return", "num_ex", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.preprocess.convert": [[111, 237], ["numpy.random.seed", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.array", "enumerate", "print", "sorted", "enumerate", "range", "range", "h5py.File", "numpy.array", "numpy.array", "print", "h5py.File.close", "zip", "label_orig.strip", "preprocess.pad", "word_indexer.convert_sequence", "preprocess.pad", "word_indexer.convert_sequence", "preprocess.pad", "all_word_indexer.convert_sequence", "preprocess.pad", "all_word_indexer.convert_sequence", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.random.permutation", "len", "batch_location.append", "len", "batch_l.append", "source_l_new.append", "target_l_new.append", "range", "open", "open", "open", "src_orig.lower.rstrip", "src_orig.lower.lower", "targ_orig.lower.lower", "targ_orig.lower.strip().split", "src_orig.lower.strip().split", "print", "batch_location.append", "len", "min", "batch_idx.append", "len", "len", "range", "enumerate", "len", "sources[].sum", "targ_orig.lower.strip", "src_orig.lower.strip", "len"], "function", ["home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.preprocess.pad", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.preprocess.Indexer.convert_sequence", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.preprocess.pad", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.preprocess.Indexer.convert_sequence", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.preprocess.pad", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.preprocess.Indexer.convert_sequence", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.preprocess.pad", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.preprocess.Indexer.convert_sequence"], ["", "def", "convert", "(", "opt", ",", "word_indexer", ",", "all_word_indexer", ",", "label_indexer", ",", "sent1", ",", "sent2", ",", "label", ",", "output", ",", "num_ex", ")", ":", "\n", "\t", "np", ".", "random", ".", "seed", "(", "opt", ".", "seed", ")", "\n", "\n", "max_seq_l", "=", "opt", ".", "max_seq_l", "+", "1", "#add 1 for BOS", "\n", "targets", "=", "np", ".", "zeros", "(", "(", "num_ex", ",", "max_seq_l", ")", ",", "dtype", "=", "int", ")", "\n", "sources", "=", "np", ".", "zeros", "(", "(", "num_ex", ",", "max_seq_l", ")", ",", "dtype", "=", "int", ")", "\n", "all_sources", "=", "np", ".", "zeros", "(", "(", "num_ex", ",", "opt", ".", "max_seq_l", ")", ",", "dtype", "=", "int", ")", "\n", "all_targets", "=", "np", ".", "zeros", "(", "(", "num_ex", ",", "opt", ".", "max_seq_l", ")", ",", "dtype", "=", "int", ")", "\n", "labels", "=", "np", ".", "zeros", "(", "(", "num_ex", ",", ")", ",", "dtype", "=", "int", ")", "\n", "source_lengths", "=", "np", ".", "zeros", "(", "(", "num_ex", ",", ")", ",", "dtype", "=", "int", ")", "\n", "target_lengths", "=", "np", ".", "zeros", "(", "(", "num_ex", ",", ")", ",", "dtype", "=", "int", ")", "\n", "ex_idx", "=", "np", ".", "zeros", "(", "num_ex", ",", "dtype", "=", "int", ")", "\n", "batch_keys", "=", "np", ".", "array", "(", "[", "None", "for", "_", "in", "range", "(", "num_ex", ")", "]", ")", "\n", "\n", "ex_id", "=", "0", "\n", "for", "_", ",", "(", "src_orig", ",", "targ_orig", ",", "label_orig", ")", "in", "enumerate", "(", "zip", "(", "open", "(", "sent1", ",", "'r'", ")", ",", "open", "(", "sent2", ",", "'r'", ")", ",", "open", "(", "label", ",", "'r'", ")", ")", ")", ":", "\n", "\t\t", "if", "src_orig", ".", "rstrip", "(", ")", "==", "''", ":", "\n", "\t\t\t", "continue", "\n", "\n", "", "if", "opt", ".", "lowercase", "==", "1", ":", "\n", "\t\t\t", "src_orig", "=", "src_orig", ".", "lower", "(", ")", "\n", "targ_orig", "=", "targ_orig", ".", "lower", "(", ")", "\n", "\n", "", "targ_orig", "=", "[", "'<s>'", "]", "+", "targ_orig", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "src_orig", "=", "[", "'<s>'", "]", "+", "src_orig", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "label", "=", "label_orig", ".", "strip", "(", ")", "\n", "\n", "src", "=", "pad", "(", "src_orig", ",", "max_seq_l", ",", "'<blank>'", ")", "\n", "src", "=", "word_indexer", ".", "convert_sequence", "(", "src", ")", "\n", "\n", "targ", "=", "pad", "(", "targ_orig", ",", "max_seq_l", ",", "'<blank>'", ")", "\n", "targ", "=", "word_indexer", ".", "convert_sequence", "(", "targ", ")", "\n", "\n", "all_src", "=", "pad", "(", "src_orig", ",", "opt", ".", "max_seq_l", ",", "'<blank>'", ")", "\n", "all_src", "=", "all_word_indexer", ".", "convert_sequence", "(", "all_src", ")", "\n", "\n", "all_targ", "=", "pad", "(", "targ_orig", ",", "opt", ".", "max_seq_l", ",", "'<blank>'", ")", "\n", "all_targ", "=", "all_word_indexer", ".", "convert_sequence", "(", "all_targ", ")", "\n", "\n", "sources", "[", "ex_id", "]", "=", "np", ".", "array", "(", "src", ",", "dtype", "=", "int", ")", "\n", "targets", "[", "ex_id", "]", "=", "np", ".", "array", "(", "targ", ",", "dtype", "=", "int", ")", "\n", "all_sources", "[", "ex_id", "]", "=", "np", ".", "array", "(", "all_src", ",", "dtype", "=", "int", ")", "\n", "all_targets", "[", "ex_id", "]", "=", "np", ".", "array", "(", "all_targ", ",", "dtype", "=", "int", ")", "\n", "source_lengths", "[", "ex_id", "]", "=", "(", "sources", "[", "ex_id", "]", "!=", "0", ")", ".", "sum", "(", ")", "\n", "target_lengths", "[", "ex_id", "]", "=", "(", "targets", "[", "ex_id", "]", "!=", "0", ")", ".", "sum", "(", ")", "\n", "labels", "[", "ex_id", "]", "=", "label_indexer", ".", "d", "[", "label", "]", "\n", "batch_keys", "[", "ex_id", "]", "=", "(", "source_lengths", "[", "ex_id", "]", ",", "target_lengths", "[", "ex_id", "]", ")", "\n", "ex_id", "+=", "1", "\n", "if", "ex_id", "%", "100000", "==", "0", ":", "\n", "\t\t\t", "print", "(", "\"{}/{} sentences processed\"", ".", "format", "(", "ex_id", ",", "num_ex", ")", ")", "\n", "\n", "", "", "print", "(", "ex_id", ",", "num_ex", ")", "\n", "if", "opt", ".", "shuffle", "==", "1", ":", "\n", "\t\t", "rand_idx", "=", "np", ".", "random", ".", "permutation", "(", "ex_id", ")", "\n", "targets", "=", "targets", "[", "rand_idx", "]", "\n", "sources", "=", "sources", "[", "rand_idx", "]", "\n", "all_sources", "=", "all_sources", "[", "rand_idx", "]", "\n", "all_targets", "=", "all_targets", "[", "rand_idx", "]", "\n", "source_lengths", "=", "source_lengths", "[", "rand_idx", "]", "\n", "target_lengths", "=", "target_lengths", "[", "rand_idx", "]", "\n", "labels", "=", "labels", "[", "rand_idx", "]", "\n", "batch_keys", "=", "batch_keys", "[", "rand_idx", "]", "\n", "ex_idx", "=", "rand_idx", "\n", "\n", "# break up batches based on source/target lengths", "\n", "", "sorted_keys", "=", "sorted", "(", "[", "(", "i", ",", "p", ")", "for", "i", ",", "p", "in", "enumerate", "(", "batch_keys", ")", "]", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "\n", "sorted_idx", "=", "[", "i", "for", "i", ",", "_", "in", "sorted_keys", "]", "\n", "# rearrange examples\t", "\n", "sources", "=", "sources", "[", "sorted_idx", "]", "\n", "targets", "=", "targets", "[", "sorted_idx", "]", "\n", "all_sources", "=", "all_sources", "[", "sorted_idx", "]", "\n", "all_targets", "=", "all_targets", "[", "sorted_idx", "]", "\n", "labels", "=", "labels", "[", "sorted_idx", "]", "\n", "target_l", "=", "target_lengths", "[", "sorted_idx", "]", "\n", "source_l", "=", "source_lengths", "[", "sorted_idx", "]", "\n", "ex_idx", "=", "rand_idx", "[", "sorted_idx", "]", "\n", "\n", "curr_l_src", "=", "0", "\n", "curr_l_targ", "=", "0", "\n", "batch_location", "=", "[", "]", "#idx where sent length changes", "\n", "for", "j", ",", "i", "in", "enumerate", "(", "sorted_idx", ")", ":", "\n", "\t\t", "if", "batch_keys", "[", "i", "]", "[", "0", "]", "!=", "curr_l_src", "or", "batch_keys", "[", "i", "]", "[", "1", "]", "!=", "curr_l_targ", ":", "\n", "\t\t\t", "curr_l_src", "=", "source_lengths", "[", "i", "]", "\n", "curr_l_targ", "=", "target_lengths", "[", "i", "]", "\n", "batch_location", ".", "append", "(", "j", ")", "\n", "", "", "if", "batch_location", "[", "-", "1", "]", "!=", "len", "(", "sources", ")", ":", "\n", "\t\t", "batch_location", ".", "append", "(", "len", "(", "sources", ")", "-", "1", ")", "\n", "\n", "#get batch sizes", "\n", "", "curr_idx", "=", "0", "\n", "batch_idx", "=", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "batch_location", ")", "-", "1", ")", ":", "\n", "\t\t", "end_location", "=", "batch_location", "[", "i", "+", "1", "]", "\n", "while", "curr_idx", "<", "end_location", ":", "\n", "\t\t\t", "curr_idx", "=", "min", "(", "curr_idx", "+", "opt", ".", "batch_size", ",", "end_location", ")", "\n", "batch_idx", ".", "append", "(", "curr_idx", ")", "\n", "\n", "", "", "batch_l", "=", "[", "]", "\n", "target_l_new", "=", "[", "]", "\n", "source_l_new", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "batch_idx", ")", ")", ":", "\n", "\t\t", "end", "=", "batch_idx", "[", "i", "+", "1", "]", "if", "i", "<", "len", "(", "batch_idx", ")", "-", "1", "else", "len", "(", "sources", ")", "\n", "batch_l", ".", "append", "(", "end", "-", "batch_idx", "[", "i", "]", ")", "\n", "source_l_new", ".", "append", "(", "source_l", "[", "batch_idx", "[", "i", "]", "]", ")", "\n", "target_l_new", ".", "append", "(", "target_l", "[", "batch_idx", "[", "i", "]", "]", ")", "\n", "\n", "# sanity check", "\n", "for", "k", "in", "range", "(", "batch_idx", "[", "i", "]", ",", "end", ")", ":", "\n", "\t\t\t", "assert", "(", "source_l", "[", "k", "]", "==", "source_l_new", "[", "-", "1", "]", ")", "\n", "assert", "(", "sources", "[", "k", ",", "source_l", "[", "k", "]", ":", "]", ".", "sum", "(", ")", "==", "0", ")", "\n", "\n", "\n", "# Write output", "\n", "", "", "f", "=", "h5py", ".", "File", "(", "output", ",", "\"w\"", ")", "\n", "f", "[", "\"source\"", "]", "=", "sources", "\n", "f", "[", "\"target\"", "]", "=", "targets", "\n", "f", "[", "\"label\"", "]", "=", "labels", "\n", "f", "[", "'all_source'", "]", "=", "all_sources", "\n", "f", "[", "'all_target'", "]", "=", "all_targets", "\n", "f", "[", "\"target_l\"", "]", "=", "np", ".", "array", "(", "target_l_new", ",", "dtype", "=", "int", ")", "\n", "f", "[", "\"source_l\"", "]", "=", "np", ".", "array", "(", "source_l_new", ",", "dtype", "=", "int", ")", "\n", "f", "[", "\"batch_l\"", "]", "=", "batch_l", "\n", "f", "[", "\"batch_idx\"", "]", "=", "batch_idx", "\n", "f", "[", "'ex_idx'", "]", "=", "ex_idx", "\n", "print", "(", "\"saved {} batches \"", ".", "format", "(", "len", "(", "f", "[", "\"batch_l\"", "]", ")", ")", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.preprocess.process": [[239, 274], ["preprocess.Indexer", "preprocess.Indexer", "preprocess.get_glove_words", "preprocess.Indexer", "range", "preprocess.Indexer.register_all_words", "preprocess.Indexer.register_all_words", "print", "preprocess.make_vocab", "print", "print", "preprocess.make_vocab", "print", "print", "preprocess.make_vocab", "print", "preprocess.Indexer.write", "preprocess.Indexer.write", "preprocess.Indexer.write", "print", "preprocess.convert", "preprocess.convert", "preprocess.convert", "oov_words.append", "len", "len", "len", "len", "len", "len", "str"], "function", ["home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.preprocess.get_glove_words", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.preprocess.Indexer.register_all_words", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.preprocess.Indexer.register_all_words", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.preprocess.make_vocab", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.preprocess.make_vocab", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.preprocess.make_vocab", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.preprocess.Indexer.write", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.preprocess.Indexer.write", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.preprocess.Indexer.write", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.preprocess.convert", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.preprocess.convert", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.preprocess.convert"], ["", "def", "process", "(", "opt", ")", ":", "\n", "\t", "all_word_indexer", "=", "Indexer", "(", "symbols", "=", "[", "\"<blank>\"", ",", "\"<s>\"", "]", ")", "# all tokens will be recorded", "\n", "word_indexer", "=", "Indexer", "(", "symbols", "=", "[", "\"<blank>\"", ",", "\"<s>\"", "]", ")", "# only glove tokens will be recorded", "\n", "glove_vocab", "=", "get_glove_words", "(", "opt", ".", "glove", ")", "\n", "label_indexer", "=", "Indexer", "(", "symbols", "=", "[", "\"entailment\"", ",", "\"neutral\"", ",", "\"contradiction\"", "]", ",", "num_oov", "=", "0", ")", "\n", "\n", "oov_words", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "100", ")", ":", "#hash oov words to one of 100 random embeddings, per Parikh et al. 2016", "\n", "\t\t", "oov_words", ".", "append", "(", "'<oov'", "+", "str", "(", "i", ")", "+", "'>'", ")", "\n", "", "word_indexer", ".", "register_all_words", "(", "oov_words", ",", "count", "=", "False", ")", "\n", "all_word_indexer", ".", "register_all_words", "(", "oov_words", ",", "count", "=", "False", ")", "\n", "\n", "print", "(", "\"First pass through data to get vocab...\"", ")", "\n", "\n", "num_train", "=", "make_vocab", "(", "opt", ",", "glove_vocab", ",", "word_indexer", ",", "all_word_indexer", ",", "label_indexer", ",", "opt", ".", "sent1", ",", "opt", ".", "sent2", ",", "opt", ".", "label", ",", "opt", ".", "max_seq_l", ",", "count", "=", "True", ")", "\n", "print", "(", "\"Number of examples in training: {}\"", ".", "format", "(", "num_train", ")", ")", "\n", "print", "(", "\"Number of sentences in training: {0}, number of tokens: {1}/{2}\"", ".", "format", "(", "num_train", ",", "len", "(", "word_indexer", ".", "d", ")", ",", "len", "(", "all_word_indexer", ".", "d", ")", ")", ")", "\n", "\n", "num_valid", "=", "make_vocab", "(", "opt", ",", "glove_vocab", ",", "word_indexer", ",", "all_word_indexer", ",", "label_indexer", ",", "opt", ".", "sent1_val", ",", "opt", ".", "sent2_val", ",", "opt", ".", "label_val", ",", "opt", ".", "max_seq_l", ",", "count", "=", "True", ")", "\n", "print", "(", "\"Number of examples in valid: {}\"", ".", "format", "(", "num_valid", ")", ")", "\n", "print", "(", "\"Number of sentences in valid: {0}, number of tokens: {1}/{2}\"", ".", "format", "(", "num_valid", ",", "len", "(", "word_indexer", ".", "d", ")", ",", "len", "(", "all_word_indexer", ".", "d", ")", ")", ")", "\n", "\n", "num_test", "=", "make_vocab", "(", "opt", ",", "glove_vocab", ",", "word_indexer", ",", "all_word_indexer", ",", "label_indexer", ",", "opt", ".", "sent1_test", ",", "opt", ".", "sent2_test", ",", "opt", ".", "label_test", ",", "opt", ".", "max_seq_l", ",", "count", "=", "False", ")", "# no counting on test set", "\n", "print", "(", "\"Number of examples in test: {}\"", ".", "format", "(", "num_test", ")", ")", "\n", "\n", "word_indexer", ".", "write", "(", "opt", ".", "output", "+", "\".word.dict\"", ")", "\n", "all_word_indexer", ".", "write", "(", "opt", ".", "output", "+", "\".allword.dict\"", ")", "\n", "label_indexer", ".", "write", "(", "opt", ".", "output", "+", "\".label.dict\"", ")", "\n", "print", "(", "\"vocab size: {}\"", ".", "format", "(", "len", "(", "word_indexer", ".", "d", ")", ")", ")", "\n", "\n", "assert", "(", "len", "(", "label_indexer", ".", "d", ")", "==", "3", ")", "\n", "\n", "convert", "(", "opt", ",", "word_indexer", ",", "all_word_indexer", ",", "label_indexer", ",", "opt", ".", "sent1_val", ",", "opt", ".", "sent2_val", ",", "opt", ".", "label_val", ",", "opt", ".", "output", "+", "\"-val.hdf5\"", ",", "num_valid", ")", "\n", "convert", "(", "opt", ",", "word_indexer", ",", "all_word_indexer", ",", "label_indexer", ",", "opt", ".", "sent1", ",", "opt", ".", "sent2", ",", "opt", ".", "label", ",", "opt", ".", "output", "+", "\"-train.hdf5\"", ",", "num_train", ")", "\n", "convert", "(", "opt", ",", "word_indexer", ",", "all_word_indexer", ",", "label_indexer", ",", "opt", ".", "sent1_test", ",", "opt", ".", "sent2_test", ",", "opt", ".", "label_test", ",", "opt", ".", "output", "+", "\"-test.hdf5\"", ",", "num_test", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.preprocess.main": [[276, 312], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "preprocess.process"], "function", ["home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.evaluation.process"], ["", "def", "main", "(", "arguments", ")", ":", "\n", "\t", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "description", "=", "__doc__", ",", "\n", "formatter_class", "=", "argparse", ".", "ArgumentDefaultsHelpFormatter", ")", "\n", "parser", ".", "add_argument", "(", "'--sent1'", ",", "help", "=", "\"Path to sent1 training data.\"", ",", "default", "=", "\"train.sent1.txt\"", ")", "\n", "parser", ".", "add_argument", "(", "'--sent2'", ",", "help", "=", "\"Path to sent2 training data.\"", ",", "default", "=", "\"train.sent2.txt\"", ")", "\n", "parser", ".", "add_argument", "(", "'--label'", ",", "help", "=", "\"Path to label data\"", ",", "default", "=", "\"train.label.txt\"", ")", "\n", "parser", ".", "add_argument", "(", "'--sent1_val'", ",", "help", "=", "\"Path to sent1 validation data.\"", ",", "default", "=", "\"dev.sent1.txt\"", ")", "\n", "parser", ".", "add_argument", "(", "'--sent2_val'", ",", "help", "=", "\"Path to sent2 validation data.\"", ",", "default", "=", "\"dev.sent2.txt\"", ")", "\n", "parser", ".", "add_argument", "(", "'--label_val'", ",", "help", "=", "\"Path to label validation data.\"", ",", "default", "=", "\"dev.label.txt\"", ")", "\n", "parser", ".", "add_argument", "(", "'--sent1_test'", ",", "help", "=", "\"Path to sent1 test data.\"", ",", "default", "=", "\"test.sent1.txt\"", ")", "\n", "parser", ".", "add_argument", "(", "'--sent2_test'", ",", "help", "=", "\"Path to sent2 test data.\"", ",", "default", "=", "\"test.sent2.txt\"", ")", "\n", "parser", ".", "add_argument", "(", "'--label_test'", ",", "help", "=", "\"Path to label test data.\"", ",", "default", "=", "\"test.label.txt\"", ")", "\n", "parser", ".", "add_argument", "(", "'--dir'", ",", "help", "=", "\"Path to the data dir\"", ",", "default", "=", "\"./data/nli_bias/\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "help", "=", "\"Size of each minibatch.\"", ",", "type", "=", "int", ",", "default", "=", "32", ")", "\n", "parser", ".", "add_argument", "(", "'--max_seq_l'", ",", "help", "=", "\"Maximum sequence length. Sequences longer than this are dropped.\"", ",", "type", "=", "int", ",", "default", "=", "100", ")", "\n", "parser", ".", "add_argument", "(", "'--output'", ",", "help", "=", "\"Prefix of the output file names. \"", ",", "type", "=", "str", ",", "default", "=", "\"snli\"", ")", "\n", "parser", ".", "add_argument", "(", "'--shuffle'", ",", "help", "=", "\"If = 1, shuffle sentences before sorting (based on source length).\"", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "help", "=", "\"The random seed\"", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "parser", ".", "add_argument", "(", "'--glove'", ",", "type", "=", "str", ",", "default", "=", "''", ")", "\n", "parser", ".", "add_argument", "(", "'--lowercase'", ",", "help", "=", "\"Whether to use lowercase for vocabulary.\"", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "opt", "=", "parser", ".", "parse_args", "(", "arguments", ")", "\n", "\n", "opt", ".", "sent1", "=", "opt", ".", "dir", "+", "opt", ".", "sent1", "\n", "opt", ".", "sent2", "=", "opt", ".", "dir", "+", "opt", ".", "sent2", "\n", "opt", ".", "sent1_val", "=", "opt", ".", "dir", "+", "opt", ".", "sent1_val", "\n", "opt", ".", "sent2_val", "=", "opt", ".", "dir", "+", "opt", ".", "sent2_val", "\n", "opt", ".", "sent1_test", "=", "opt", ".", "dir", "+", "opt", ".", "sent1_test", "\n", "opt", ".", "sent2_test", "=", "opt", ".", "dir", "+", "opt", ".", "sent2_test", "\n", "opt", ".", "label", "=", "opt", ".", "dir", "+", "opt", ".", "label", "\n", "opt", ".", "label_val", "=", "opt", ".", "dir", "+", "opt", ".", "label_val", "\n", "opt", ".", "label_test", "=", "opt", ".", "dir", "+", "opt", ".", "label_test", "\n", "opt", ".", "output", "=", "opt", ".", "dir", "+", "opt", ".", "output", "\n", "\n", "process", "(", "opt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.convert_bias_vec.load_vec": [[8, 16], ["open", "numpy.asarray", "vals.append", "l.rstrip", "float", "l.rstrip().split", "l.rstrip"], "function", ["None"], ["def", "load_vec", "(", "path", ")", ":", "\n", "\t", "with", "open", "(", "path", ",", "'r'", ")", "as", "f", ":", "\n", "\t\t", "vals", "=", "[", "]", "\n", "for", "l", "in", "f", ":", "\n", "\t\t\t", "if", "l", ".", "rstrip", "(", ")", "==", "''", ":", "\n", "\t\t\t\t", "continue", "\n", "", "vals", ".", "append", "(", "[", "float", "(", "k", ")", "for", "k", "in", "l", ".", "rstrip", "(", ")", ".", "split", "(", ")", "]", ")", "\n", "", "return", "np", ".", "asarray", "(", "vals", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.convert_bias_vec.write_hdf5": [[18, 23], ["print", "h5py.File", "map.items"], "function", ["home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.holder.Holder.items"], ["", "", "def", "write_hdf5", "(", "path", ",", "map", ")", ":", "\n", "\t", "print", "(", "'writing data to {0}'", ".", "format", "(", "path", ")", ")", "\n", "f", "=", "h5py", ".", "File", "(", "path", ",", "\"w\"", ")", "\n", "for", "key", ",", "val", "in", "map", ".", "items", "(", ")", ":", "\n", "\t\t", "f", "[", "key", "]", "=", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.convert_bias_vec.main": [[26, 37], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "convert_bias_vec.load_vec", "convert_bias_vec.write_hdf5"], "function", ["home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.convert_bias_vec.load_vec", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.convert_bias_vec.write_hdf5"], ["", "", "def", "main", "(", "arguments", ")", ":", "\n", "\t", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "description", "=", "__doc__", ",", "\n", "formatter_class", "=", "argparse", ".", "ArgumentDefaultsHelpFormatter", ")", "\n", "parser", ".", "add_argument", "(", "'--input'", ",", "help", "=", "\"Path to the vec text file, one value per line\"", ",", "default", "=", "''", ")", "\n", "parser", ".", "add_argument", "(", "'--output'", ",", "help", "=", "\"Prefix of the output file names. \"", ",", "type", "=", "str", ",", "default", "=", "\"data/nli_bias/bias\"", ")", "\n", "opt", "=", "parser", ".", "parse_args", "(", "arguments", ")", "\n", "\n", "vec", "=", "load_vec", "(", "opt", ".", "input", ")", "\n", "m", "=", "{", "'bias'", ":", "vec", "}", "\n", "write_hdf5", "(", "opt", ".", "output", "+", "'.hdf5'", ",", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.gen_random_bias.gen_gaussian_bias": [[9, 13], ["random.gauss", "sum", "range"], "function", ["None"], ["def", "gen_gaussian_bias", "(", "dim", ")", ":", "\n", "\t", "vec", "=", "[", "gauss", "(", "0", ",", "1", ")", "for", "i", "in", "range", "(", "dim", ")", "]", "\n", "mag", "=", "sum", "(", "x", "**", "2", "for", "x", "in", "vec", ")", "**", ".5", "\n", "return", "[", "x", "/", "mag", "for", "x", "in", "vec", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.gen_random_bias.gen_random_bias": [[15, 29], ["sklearn.decomposition.PCA", "torch.cat().numpy", "sklearn.decomposition.PCA.fit", "numpy.random.permutation", "torch.cat().numpy.append", "len", "torch.from_numpy().view", "torch.cat", "torch.from_numpy"], "function", ["None"], ["", "def", "gen_random_bias", "(", "word_vecs", ")", ":", "\n", "\t", "word_vec_size", "=", "word_vecs", "[", "0", "]", ".", "size", "\n", "\n", "p", "=", "PCA", "(", "n_components", "=", "20", ")", "\n", "idx", "=", "np", ".", "random", ".", "permutation", "(", "len", "(", "word_vecs", ")", ")", "[", "0", ":", "20", "]", "\n", "\n", "A", "=", "[", "]", "\n", "for", "i", "in", "idx", ":", "\n", "\t\t", "A", ".", "append", "(", "torch", ".", "from_numpy", "(", "word_vecs", "[", "i", "]", ")", ".", "view", "(", "1", ",", "word_vec_size", ")", ")", "\n", "", "A", "=", "torch", ".", "cat", "(", "A", ",", "0", ")", ".", "numpy", "(", ")", "\n", "\n", "p", ".", "fit", "(", "A", ")", "\n", "V", "=", "p", ".", "components_", "\n", "return", "V", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.gen_random_bias.load_glove": [[31, 51], ["open", "line.split", "numpy.array", "word_vecs.append", "list", "print", "len", "map", "len", "len"], "function", ["None"], ["", "def", "load_glove", "(", "fname", ")", ":", "\n", "    ", "dim", "=", "0", "\n", "word_vecs", "=", "[", "]", "\n", "word_vec_size", "=", "None", "\n", "for", "line", "in", "open", "(", "fname", ",", "'r'", ")", ":", "\n", "        ", "d", "=", "line", ".", "split", "(", ")", "\n", "\n", "# get info from the first word", "\n", "if", "word_vec_size", "is", "None", ":", "\n", "          ", "word_vec_size", "=", "len", "(", "d", ")", "-", "1", "\n", "\n", "", "word", "=", "' '", ".", "join", "(", "d", "[", ":", "len", "(", "d", ")", "-", "word_vec_size", "]", ")", "\n", "vec", "=", "d", "[", "-", "word_vec_size", ":", "]", "\n", "vec", "=", "np", ".", "array", "(", "list", "(", "map", "(", "float", ",", "vec", ")", ")", ")", "\n", "\n", "if", "len", "(", "d", ")", "-", "word_vec_size", "!=", "1", ":", "\n", "          ", "print", "(", "'multi word token found: {0}'", ".", "format", "(", "line", ")", ")", "\n", "\n", "", "word_vecs", ".", "append", "(", "vec", ")", "\n", "", "return", "word_vecs", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.gen_random_bias.write_bias": [[53, 58], ["open", "f.write", "str"], "function", ["home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.preprocess.Indexer.write"], ["", "def", "write_bias", "(", "path", ",", "bias", ")", ":", "\n", "\t", "with", "open", "(", "path", ",", "'w'", ")", "as", "f", ":", "\n", "\t\t", "for", "b", "in", "bias", ":", "\n", "\t\t\t", "log", "=", "' '", ".", "join", "(", "[", "str", "(", "v", ")", "for", "v", "in", "b", "]", ")", "\n", "f", ".", "write", "(", "log", "+", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.gen_random_bias.main": [[60, 90], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "numpy.random.seed", "print", "gen_random_bias.load_glove", "range", "print", "range", "print", "gen_random_bias.write_bias", "bias.append", "gen_random_bias.gen_random_bias", "bias.append", "gen_random_bias.gen_gaussian_bias"], "function", ["home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.gen_random_bias.load_glove", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.gen_random_bias.write_bias", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.gen_random_bias.gen_random_bias", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.gen_random_bias.gen_gaussian_bias"], ["", "", "", "def", "main", "(", "arguments", ")", ":", "\n", "\t", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "description", "=", "__doc__", ",", "\n", "formatter_class", "=", "argparse", ".", "ArgumentDefaultsHelpFormatter", ")", "\n", "parser", ".", "add_argument", "(", "'--glove'", ",", "help", "=", "\"Path to the glove file\"", ",", "default", "=", "'./data/glove.840B.300d.txt'", ")", "\n", "parser", ".", "add_argument", "(", "'--output'", ",", "help", "=", "\"Prefix of the output file names. \"", ",", "type", "=", "str", ",", "default", "=", "\"data/nli_bias/random\"", ")", "\n", "parser", ".", "add_argument", "(", "'--num_bias'", ",", "help", "=", "\"The number of bias vectors to generate\"", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "parser", ".", "add_argument", "(", "'--num_file'", ",", "help", "=", "\"The number of bias files to generate\"", ",", "type", "=", "int", ",", "default", "=", "10", ")", "\n", "parser", ".", "add_argument", "(", "'--type'", ",", "help", "=", "\"The type of random bias, random/gaussian\"", ",", "default", "=", "'random'", ")", "\n", "parser", ".", "add_argument", "(", "'--dim'", ",", "help", "=", "\"The dim of gaussian vector\"", ",", "type", "=", "int", ",", "default", "=", "300", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "help", "=", "\"The random seed\"", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "opt", "=", "parser", ".", "parse_args", "(", "arguments", ")", "\n", "\n", "np", ".", "random", ".", "seed", "(", "opt", ".", "seed", ")", "\n", "\n", "print", "(", "'loading glove from {0}'", ".", "format", "(", "opt", ".", "glove", ")", ")", "\n", "glove", "=", "load_glove", "(", "opt", ".", "glove", ")", "\n", "\n", "for", "i", "in", "range", "(", "opt", ".", "num_file", ")", ":", "\n", "\t\t", "print", "(", "'generating random bias...'", ")", "\n", "bias", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "opt", ".", "num_bias", ")", ":", "\n", "\t\t\t", "if", "opt", ".", "type", "==", "'random'", ":", "\n", "\t\t\t\t", "bias", ".", "append", "(", "gen_random_bias", "(", "glove", ")", ")", "\n", "", "elif", "opt", ".", "type", "==", "'gaussian'", ":", "\n", "\t\t\t\t", "bias", ".", "append", "(", "gen_gaussian_bias", "(", "opt", ".", "dim", ")", ")", "\n", "\n", "", "", "output_path", "=", "opt", ".", "output", "+", "'{0}.txt'", ".", "format", "(", "i", "+", "1", ")", "\n", "print", "(", "'writing random bias to {0}'", ".", "format", "(", "output_path", ")", ")", "\n", "write_bias", "(", "output_path", ",", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.elmo_encoder.ElmoEncoder.__init__": [[17, 50], ["super().__init__", "torch.zeros().float", "elmo_encoder.ElmoEncoder.null_token.cuda", "Exception", "ElmoEmbedderDebias", "allennlp.modules.elmo._ElmoCharacterEncoder", "torch.zeros", "elmo_bias.ElmoBias", "h5py.File", "h5py.File", "torch.from_numpy().view", "torch.from_numpy().view", "torch.from_numpy", "torch.from_numpy", "[].astype", "[].astype"], "methods", ["home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.classifier.local_classifier.LocalClassifier.__init__"], ["\t", "def", "__init__", "(", "self", ",", "opt", ",", "shared", ")", ":", "\n", "\t\t", "super", "(", "ElmoEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "opt", "=", "opt", "\n", "self", ".", "shared", "=", "shared", "\n", "\n", "self", ".", "null_token", "=", "torch", ".", "zeros", "(", "opt", ".", "elmo_in_size", ")", ".", "float", "(", ")", "\n", "if", "opt", ".", "gpuid", "!=", "-", "1", ":", "\n", "\t\t\t", "self", ".", "null_token", "=", "self", ".", "null_token", ".", "cuda", "(", ")", "\n", "\n", "# initialize from these", "\n", "", "options_file", "=", "None", "\n", "weight_file", "=", "None", "\n", "if", "opt", ".", "elmo_in_size", "==", "1024", ":", "\n", "\t\t\t", "options_file", "=", "\"https://s3-us-west-2.amazonaws.com/allennlp/models/elmo/2x4096_512_2048cnn_2xhighway/elmo_2x4096_512_2048cnn_2xhighway_options.json\"", "\n", "weight_file", "=", "\"https://s3-us-west-2.amazonaws.com/allennlp/models/elmo/2x4096_512_2048cnn_2xhighway/elmo_2x4096_512_2048cnn_2xhighway_weights.hdf5\"", "\n", "", "else", ":", "\n", "\t\t\t", "raise", "Exception", "(", "\"unsupported elmo_in_size {0}\"", ".", "format", "(", "opt", ".", "elmo_in_size", ")", ")", "\n", "\n", "", "if", "opt", ".", "debias", "==", "1", ":", "\n", "\t\t\t", "bias", "=", "None", "\n", "contraction", "=", "None", "\n", "if", "opt", ".", "bias_elmo", "!=", "opt", ".", "dir", ":", "\n", "\t\t\t\t", "self", ".", "elmo_bias", "=", "ElmoBias", "(", "opt", ",", "shared", ")", "\n", "bias", "=", "self", ".", "elmo_bias", ".", "bias_elmo", "[", ":", ",", ":", ",", "0", ":", "512", "]", "\n", "", "if", "opt", ".", "contract_v1", "!=", "opt", ".", "dir", ":", "\n", "\t\t\t\t", "f", "=", "h5py", ".", "File", "(", "opt", ".", "contract_v1", ",", "'r'", ")", "\n", "self", ".", "contract_v1", "=", "torch", ".", "from_numpy", "(", "f", "[", "'bias'", "]", "[", ":", "]", ".", "astype", "(", "np", ".", "float32", ")", ")", ".", "view", "(", "1", ",", "1", ",", "-", "1", ")", "[", ":", ",", ":", ",", ":", "512", "]", "\n", "f", "=", "h5py", ".", "File", "(", "opt", ".", "contract_v2", ",", "'r'", ")", "\n", "self", ".", "contract_v2", "=", "torch", ".", "from_numpy", "(", "f", "[", "'bias'", "]", "[", ":", "]", ".", "astype", "(", "np", ".", "float32", ")", ")", ".", "view", "(", "1", ",", "1", ",", "-", "1", ")", "[", ":", ",", ":", ",", ":", "512", "]", "\n", "contraction", "=", "(", "self", ".", "contract_v1", ",", "self", ".", "contract_v2", ")", "\n", "", "self", ".", "elmo", "=", "ElmoEmbedderDebias", "(", "bias", ",", "opt", ".", "num_bias", ",", "contraction", ",", "options_file", ",", "weight_file", ",", "cuda_device", "=", "opt", ".", "gpuid", ")", "\n", "", "else", ":", "\n", "\t\t\t", "self", ".", "elmo", "=", "ElmoEmbedder", "(", "options_file", ",", "weight_file", ",", "cuda_device", "=", "opt", ".", "gpuid", ")", "# by default all 3 layers are output", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.elmo_encoder.ElmoEncoder.elmo_over": [[52, 58], ["elmo_encoder.ElmoEncoder.elmo.embed_batch", "torch.cat", "emb.cuda.cuda.cuda", "torch.from_numpy().transpose().unsqueeze", "torch.from_numpy().transpose", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.elmo.elmo_embedder_debias.ElmoEmbedderDebias.embed_batch"], ["", "", "def", "elmo_over", "(", "self", ",", "toks", ")", ":", "\n", "\t\t", "emb_ls", "=", "self", ".", "elmo", ".", "embed_batch", "(", "toks", ")", "# each element has shape (3, seq_l, 1024)", "\n", "emb", "=", "torch", ".", "cat", "(", "[", "torch", ".", "from_numpy", "(", "e", ")", ".", "transpose", "(", "0", ",", "1", ")", ".", "unsqueeze", "(", "0", ")", "for", "e", "in", "emb_ls", "]", ",", "0", ")", "# (batch_l, seq_l, 3, 1024)", "\n", "if", "self", ".", "opt", ".", "gpuid", "!=", "-", "1", ":", "\n", "\t\t\t", "emb", "=", "emb", ".", "cuda", "(", ")", "\n", "", "return", "emb", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.elmo_encoder.ElmoEncoder.get_layer": [[61, 94], ["torch.zeros", "torch.zeros", "range", "range", "torch.autograd.Variable", "torch.autograd.Variable", "sent1.cuda.cuda.cuda", "sent2.cuda.cuda.cuda", "len", "len"], "methods", ["None"], ["", "def", "get_layer", "(", "self", ",", "elmo1", ",", "elmo2", ",", "idx", ")", ":", "\n", "\t\t", "batch_l", "=", "self", ".", "shared", ".", "batch_l", "\n", "sent_l1", "=", "self", ".", "shared", ".", "sent_l1", "\n", "sent_l2", "=", "self", ".", "shared", ".", "sent_l2", "\n", "\n", "# if to debias", "\n", "#if hasattr(self, 'elmo_bias'):", "\n", "#\telmo1 = self.elmo_bias(elmo1)", "\n", "#\telmo2 = self.elmo_bias(elmo2)", "\n", "\n", "sent1", "=", "torch", ".", "zeros", "(", "batch_l", ",", "sent_l1", ",", "self", ".", "opt", ".", "elmo_in_size", ")", "\n", "sent2", "=", "torch", ".", "zeros", "(", "batch_l", ",", "sent_l2", ",", "self", ".", "opt", ".", "elmo_in_size", ")", "\n", "if", "self", ".", "opt", ".", "gpuid", "!=", "-", "1", ":", "\n", "\t\t\t", "sent1", "=", "sent1", ".", "cuda", "(", ")", "\n", "sent2", "=", "sent2", ".", "cuda", "(", ")", "\n", "\n", "", "start", "=", "self", ".", "opt", ".", "elmo_in_size", "*", "idx", "\n", "end", "=", "self", ".", "opt", ".", "elmo_in_size", "*", "(", "idx", "+", "1", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "elmo1", ")", ")", ":", "\n", "\t\t\t", "assert", "(", "elmo1", "[", "i", "]", ".", "shape", "[", "0", "]", "==", "sent_l1", "-", "1", ")", "\n", "sent1", "[", "i", ",", "0", ",", ":", "]", "=", "self", ".", "null_token", "\n", "sent1", "[", "i", ",", "1", ":", ",", ":", "]", "=", "elmo1", "[", "i", "]", "[", ":", ",", "start", ":", "end", "]", "\n", "\n", "", "for", "i", "in", "range", "(", "len", "(", "elmo2", ")", ")", ":", "\n", "\t\t\t", "assert", "(", "elmo2", "[", "i", "]", ".", "shape", "[", "0", "]", "==", "sent_l2", "-", "1", ")", "\n", "sent2", "[", "i", ",", "0", ",", ":", "]", "=", "self", ".", "null_token", "\n", "sent2", "[", "i", ",", "1", ":", ",", ":", "]", "=", "elmo2", "[", "i", "]", "[", ":", ",", "start", ":", "end", "]", "\n", "\n", "", "sent1", "=", "Variable", "(", "sent1", ",", "requires_grad", "=", "False", ")", "\n", "sent2", "=", "Variable", "(", "sent2", ",", "requires_grad", "=", "False", ")", "\n", "\n", "return", "sent1", ",", "sent2", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.elmo_encoder.ElmoEncoder.forward": [[96, 117], ["elmo_encoder.ElmoEncoder.elmo_over", "elmo_encoder.ElmoEncoder.elmo_over", "elmo1.view.view.view", "elmo2.view.view.view", "elmo_encoder.ElmoEncoder.get_layer", "elmo_encoder.ElmoEncoder.get_layer", "elmo_encoder.ElmoEncoder.get_layer", "len", "len"], "methods", ["home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.elmo_preprocess.elmo_over", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.elmo_preprocess.elmo_over", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.elmo_loader.ElmoLoader.get_layer", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.elmo_loader.ElmoLoader.get_layer", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.elmo_loader.ElmoLoader.get_layer"], ["", "def", "forward", "(", "self", ")", ":", "\n", "\t\t", "batch_l", "=", "self", ".", "shared", ".", "batch_l", "\n", "sent_l1", "=", "self", ".", "shared", ".", "sent_l1", "\n", "sent_l2", "=", "self", ".", "shared", ".", "sent_l2", "\n", "\n", "sent1", "=", "self", ".", "shared", ".", "res_map", "[", "'sent1'", "]", "\n", "sent2", "=", "self", ".", "shared", ".", "res_map", "[", "'sent2'", "]", "\n", "\n", "assert", "(", "batch_l", "==", "len", "(", "sent1", ")", "and", "batch_l", "==", "len", "(", "sent2", ")", ")", "\n", "\n", "elmo1", "=", "self", ".", "elmo_over", "(", "sent1", ")", "# (batch_l, seq_l, 3, 1024)", "\n", "elmo2", "=", "self", ".", "elmo_over", "(", "sent2", ")", "\n", "\n", "elmo1", "=", "elmo1", ".", "view", "(", "batch_l", ",", "sent_l1", "-", "1", ",", "3072", ")", "# (batch_l, seq_l, 3072)", "\n", "elmo2", "=", "elmo2", ".", "view", "(", "batch_l", ",", "sent_l2", "-", "1", ",", "3072", ")", "\n", "\n", "sent1_l0", ",", "sent2_l0", "=", "self", ".", "get_layer", "(", "elmo1", ",", "elmo2", ",", "0", ")", "\n", "sent1_l1", ",", "sent2_l1", "=", "self", ".", "get_layer", "(", "elmo1", ",", "elmo2", ",", "1", ")", "\n", "sent1_l2", ",", "sent2_l2", "=", "self", ".", "get_layer", "(", "elmo1", ",", "elmo2", ",", "2", ")", "\n", "\n", "return", "[", "[", "sent1_l0", ",", "sent1_l1", ",", "sent1_l2", "]", ",", "[", "sent2_l0", ",", "sent2_l1", ",", "sent2_l2", "]", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.elmo_loader.ElmoLoader.__init__": [[13, 25], ["super().__init__", "torch.zeros().float", "elmo_loader.ElmoLoader.null_token.cuda", "elmo_bias.ElmoBias", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.classifier.local_classifier.LocalClassifier.__init__"], ["\t", "def", "__init__", "(", "self", ",", "opt", ",", "shared", ")", ":", "\n", "\t\t", "super", "(", "ElmoLoader", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "opt", "=", "opt", "\n", "self", ".", "shared", "=", "shared", "\n", "self", ".", "null_token", "=", "torch", ".", "zeros", "(", "opt", ".", "elmo_in_size", ")", ".", "float", "(", ")", "\n", "if", "opt", ".", "gpuid", "!=", "-", "1", ":", "\n", "\t\t\t", "self", ".", "null_token", "=", "self", ".", "null_token", ".", "cuda", "(", ")", "\n", "#self.null_token.skip_init = 1", "\n", "#self.null_token.requires_grad = True", "\n", "\n", "", "if", "opt", ".", "debias", "==", "1", "and", "opt", ".", "bias_elmo", "!=", "''", ":", "\n", "\t\t\t", "self", ".", "elmo_bias", "=", "ElmoBias", "(", "opt", ",", "shared", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.elmo_loader.ElmoLoader.get_layer": [[28, 64], ["torch.zeros", "torch.zeros", "range", "range", "torch.autograd.Variable", "torch.autograd.Variable", "elmo_loader.ElmoLoader.elmo_bias", "elmo_loader.ElmoLoader.elmo_bias", "sent1.cuda.cuda.cuda", "sent2.cuda.cuda.cuda", "len", "len"], "methods", ["None"], ["", "", "def", "get_layer", "(", "self", ",", "idx", ")", ":", "\n", "\t\t", "batch_l", "=", "self", ".", "shared", ".", "batch_l", "\n", "sent_l1", "=", "self", ".", "shared", ".", "sent_l1", "\n", "sent_l2", "=", "self", ".", "shared", ".", "sent_l2", "\n", "\n", "elmo1", "=", "self", ".", "shared", ".", "res_map", "[", "'elmo_src'", "]", "\n", "elmo2", "=", "self", ".", "shared", ".", "res_map", "[", "'elmo_tgt'", "]", "\n", "\n", "# if to debias", "\n", "if", "self", ".", "opt", ".", "debias", "==", "1", "and", "self", ".", "opt", ".", "bias_elmo", "!=", "''", ":", "\n", "\t\t\t", "elmo1", "=", "self", ".", "elmo_bias", "(", "elmo1", ")", "\n", "elmo2", "=", "self", ".", "elmo_bias", "(", "elmo2", ")", "\n", "\n", "", "sent1", "=", "torch", ".", "zeros", "(", "batch_l", ",", "sent_l1", ",", "self", ".", "opt", ".", "elmo_in_size", ")", "\n", "sent2", "=", "torch", ".", "zeros", "(", "batch_l", ",", "sent_l2", ",", "self", ".", "opt", ".", "elmo_in_size", ")", "\n", "if", "self", ".", "opt", ".", "gpuid", "!=", "-", "1", ":", "\n", "\t\t\t", "sent1", "=", "sent1", ".", "cuda", "(", ")", "\n", "sent2", "=", "sent2", ".", "cuda", "(", ")", "\n", "\n", "", "start", "=", "self", ".", "opt", ".", "elmo_in_size", "*", "idx", "\n", "end", "=", "self", ".", "opt", ".", "elmo_in_size", "*", "(", "idx", "+", "1", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "elmo1", ")", ")", ":", "\n", "\t\t\t", "assert", "(", "elmo1", "[", "i", "]", ".", "shape", "[", "0", "]", "==", "sent_l1", "-", "1", ")", "\n", "sent1", "[", "i", ",", "0", ",", ":", "]", "=", "self", ".", "null_token", "\n", "sent1", "[", "i", ",", "1", ":", ",", ":", "]", "=", "elmo1", "[", "i", "]", "[", ":", ",", "start", ":", "end", "]", "\n", "\n", "", "for", "i", "in", "range", "(", "len", "(", "elmo2", ")", ")", ":", "\n", "\t\t\t", "assert", "(", "elmo2", "[", "i", "]", ".", "shape", "[", "0", "]", "==", "sent_l2", "-", "1", ")", "\n", "sent2", "[", "i", ",", "0", ",", ":", "]", "=", "self", ".", "null_token", "\n", "sent2", "[", "i", ",", "1", ":", ",", ":", "]", "=", "elmo2", "[", "i", "]", "[", ":", ",", "start", ":", "end", "]", "\n", "\n", "", "sent1", "=", "Variable", "(", "sent1", ",", "requires_grad", "=", "False", ")", "\n", "sent2", "=", "Variable", "(", "sent2", ",", "requires_grad", "=", "False", ")", "\n", "\n", "return", "sent1", ",", "sent2", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.elmo_loader.ElmoLoader.forward": [[68, 74], ["elmo_loader.ElmoLoader.get_layer", "elmo_loader.ElmoLoader.get_layer", "elmo_loader.ElmoLoader.get_layer"], "methods", ["home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.elmo_loader.ElmoLoader.get_layer", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.elmo_loader.ElmoLoader.get_layer", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.elmo_loader.ElmoLoader.get_layer"], ["", "def", "forward", "(", "self", ")", ":", "\n", "\t\t", "sent1_l0", ",", "sent2_l0", "=", "self", ".", "get_layer", "(", "0", ")", "\n", "sent1_l1", ",", "sent2_l1", "=", "self", ".", "get_layer", "(", "1", ")", "\n", "sent1_l2", ",", "sent2_l2", "=", "self", ".", "get_layer", "(", "2", ")", "\n", "\n", "return", "[", "[", "sent1_l0", ",", "sent1_l1", ",", "sent1_l2", "]", ",", "[", "sent2_l0", ",", "sent2_l1", ",", "sent2_l2", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.elmo_loader.ElmoLoader.begin_pass": [[76, 78], ["None"], "methods", ["None"], ["", "def", "begin_pass", "(", "self", ")", ":", "\n", "\t\t", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.elmo_loader.ElmoLoader.end_pass": [[79, 81], ["None"], "methods", ["None"], ["", "def", "end_pass", "(", "self", ")", ":", "\n", "\t\t", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.elmo_preprocess.load_elmo": [[9, 18], ["allennlp.modules.elmo.Elmo", "elmo.cuda.cuda"], "function", ["None"], ["def", "load_elmo", "(", "opt", ")", ":", "\n", "\t", "options_file", "=", "\"https://s3-us-west-2.amazonaws.com/allennlp/models/elmo/2x4096_512_2048cnn_2xhighway/elmo_2x4096_512_2048cnn_2xhighway_options.json\"", "\n", "weight_file", "=", "\"https://s3-us-west-2.amazonaws.com/allennlp/models/elmo/2x4096_512_2048cnn_2xhighway/elmo_2x4096_512_2048cnn_2xhighway_weights.hdf5\"", "\n", "\n", "\n", "elmo", "=", "Elmo", "(", "options_file", ",", "weight_file", ",", "3", ",", "dropout", "=", "0", ",", "requires_grad", "=", "False", ")", "# by default all 3 layers are output", "\n", "if", "opt", ".", "gpuid", "!=", "-", "1", ":", "\n", "\t\t", "elmo", "=", "elmo", ".", "cuda", "(", ")", "\n", "", "return", "elmo", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.elmo_preprocess.load_sent": [[20, 28], ["open", "par.append", "l.strip", "elmo_preprocess.split_par", "l.rstrip"], "function", ["home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.elmo_preprocess.split_par"], ["", "def", "load_sent", "(", "path", ")", ":", "\n", "\t", "par", "=", "[", "]", "\n", "with", "open", "(", "path", ",", "'r+'", ")", "as", "f", ":", "\n", "\t\t", "for", "l", "in", "f", ":", "\n", "\t\t\t", "if", "l", ".", "strip", "(", ")", "==", "''", ":", "\n", "\t\t\t\t", "continue", "\n", "", "par", ".", "append", "(", "split_par", "(", "l", ".", "rstrip", "(", ")", ")", ")", "\n", "", "", "return", "par", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.elmo_preprocess.load_token": [[30, 38], ["open", "tokens.append", "l.rstrip", "l.strip().split", "l.strip"], "function", ["None"], ["", "def", "load_token", "(", "path", ")", ":", "\n", "\t", "tokens", "=", "[", "]", "\n", "with", "open", "(", "path", ",", "'r+'", ")", "as", "f", ":", "\n", "\t\t", "for", "l", "in", "f", ":", "\n", "\t\t\t", "if", "l", ".", "rstrip", "(", ")", "==", "''", ":", "\n", "\t\t\t\t", "continue", "\n", "", "tokens", ".", "append", "(", "l", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", ")", "\n", "", "", "return", "tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.elmo_preprocess.split_par": [[40, 45], ["par.strip().split", "s.strip().split", "par.strip", "s.strip", "s.strip"], "function", ["None"], ["", "def", "split_par", "(", "par", ")", ":", "\n", "\t", "sents", "=", "par", ".", "strip", "(", ")", ".", "split", "(", "'|||'", ")", "\n", "sents", "=", "[", "s", "for", "s", "in", "sents", "if", "s", ".", "strip", "(", ")", "!=", "''", "]", "\n", "sents", "=", "[", "s", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "for", "s", "in", "sents", "]", "\n", "return", "sents", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.elmo_preprocess.elmo_over": [[47, 55], ["allennlp.modules.elmo.batch_to_ids", "torch.cat", "char_idx.cuda.cuda", "elmo"], "function", ["None"], ["", "def", "elmo_over", "(", "opt", ",", "elmo", ",", "toks", ")", ":", "\n", "\t", "char_idx", "=", "batch_to_ids", "(", "toks", ")", "\n", "\n", "if", "opt", ".", "gpuid", "!=", "-", "1", ":", "\n", "\t\t", "char_idx", "=", "char_idx", ".", "cuda", "(", ")", "\n", "\n", "", "emb", "=", "elmo", "(", "char_idx", ")", "[", "'elmo_representations'", "]", "\n", "return", "torch", ".", "cat", "(", "[", "t", ".", "data", "for", "t", "in", "emb", "]", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.elmo_preprocess.process": [[57, 88], ["h5py.File", "print", "range", "h5py.File.close", "len", "len", "len", "elmo_over().cpu", "elmo_over().cpu", "range", "len", "print", "elmo_preprocess.elmo_over", "elmo_preprocess.elmo_over", "batch_elmo1[].numpy", "batch_elmo2[].numpy", "len", "len"], "function", ["home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.elmo_preprocess.elmo_over", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.elmo_preprocess.elmo_over"], ["", "def", "process", "(", "opt", ",", "elmo", ",", "src", ",", "tgt", ",", "output", ")", ":", "\n", "\t", "assert", "(", "len", "(", "src", ")", "==", "len", "(", "tgt", ")", ")", "\n", "\n", "# output 3 components:", "\n", "#\tcontext indices, elmo embeddings for unique contexts, elmo embeddings for queries", "\n", "f", "=", "h5py", ".", "File", "(", "output", ",", "'w'", ")", "\n", "\n", "batch_size", "=", "opt", ".", "batch_size", "\n", "print_every", "=", "100", "\n", "\n", "print", "(", "'processing with batch size {0}...'", ".", "format", "(", "batch_size", ")", ")", "\n", "\n", "batch_cnt", "=", "0", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "src", ")", ",", "batch_size", ")", ":", "\n", "\t\t", "batch_src", "=", "src", "[", "i", ":", "i", "+", "batch_size", "]", "\n", "batch_tgt", "=", "tgt", "[", "i", ":", "i", "+", "batch_size", "]", "\n", "\n", "batch_elmo1", "=", "elmo_over", "(", "opt", ",", "elmo", ",", "batch_src", ")", ".", "cpu", "(", ")", "\n", "batch_elmo2", "=", "elmo_over", "(", "opt", ",", "elmo", ",", "batch_tgt", ")", ".", "cpu", "(", ")", "\n", "\n", "assert", "(", "batch_elmo1", ".", "shape", "[", "0", "]", "==", "len", "(", "batch_src", ")", ")", "\n", "\n", "for", "k", "in", "range", "(", "batch_elmo1", ".", "shape", "[", "0", "]", ")", ":", "\n", "\t\t\t", "f", "[", "'{0}.src'", ".", "format", "(", "i", "+", "k", ")", "]", "=", "batch_elmo1", "[", "k", "]", ".", "numpy", "(", ")", "[", ":", "len", "(", "batch_src", "[", "k", "]", ")", "]", "\n", "f", "[", "'{0}.tgt'", ".", "format", "(", "i", "+", "k", ")", "]", "=", "batch_elmo2", "[", "k", "]", ".", "numpy", "(", ")", "[", ":", "len", "(", "batch_tgt", "[", "k", "]", ")", "]", "\n", "\n", "", "batch_cnt", "+=", "1", "\n", "if", "batch_cnt", "%", "print_every", "==", "0", ":", "\n", "\t\t\t", "print", "(", "'processed {0} examples'", ".", "format", "(", "batch_cnt", "*", "batch_size", ")", ")", "\n", "\n", "", "", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.elmo_preprocess.main": [[90, 109], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "elmo_preprocess.load_elmo", "elmo_preprocess.load_token", "elmo_preprocess.load_token", "elmo_preprocess.process", "torch.cuda.set_device"], "function", ["home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.elmo_preprocess.load_elmo", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.elmo_preprocess.load_token", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.elmo_preprocess.load_token", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.evaluation.process"], ["", "def", "main", "(", "arguments", ")", ":", "\n", "\t", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "description", "=", "__doc__", ",", "\n", "formatter_class", "=", "argparse", ".", "ArgumentDefaultsHelpFormatter", ")", "\n", "parser", ".", "add_argument", "(", "'--gpuid'", ",", "help", "=", "\"The gpuid\"", ",", "type", "=", "int", ",", "default", "=", "-", "1", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "help", "=", "\"The batch size\"", ",", "type", "=", "int", ",", "default", "=", "40", ")", "\n", "parser", ".", "add_argument", "(", "'--src'", ",", "help", "=", "\"Path to the tokenized premise\"", ",", "default", "=", "\"data/snli_bias/dev.sent1.txt\"", ")", "\n", "parser", ".", "add_argument", "(", "'--tgt'", ",", "help", "=", "\"Path to the tokenized hypothesis\"", ",", "default", "=", "\"data/nli_bias/dev.sent2.txt\"", ")", "\n", "parser", ".", "add_argument", "(", "'--output'", ",", "help", "=", "\"Prefix of output files\"", ",", "default", "=", "\"data/snli_bias/dev\"", ")", "\n", "opt", "=", "parser", ".", "parse_args", "(", "arguments", ")", "\n", "\n", "if", "opt", ".", "gpuid", "!=", "-", "1", ":", "\n", "\t\t", "torch", ".", "cuda", ".", "set_device", "(", "opt", ".", "gpuid", ")", "\n", "\n", "", "elmo", "=", "load_elmo", "(", "opt", ")", "\n", "src", "=", "load_token", "(", "opt", ".", "src", ")", "\n", "tgt", "=", "load_token", "(", "opt", ".", "tgt", ")", "\n", "\n", "process", "(", "opt", ",", "elmo", ",", "src", ",", "tgt", ",", "opt", ".", "output", "+", "'.elmo.hdf5'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.locked_dropout.LockedDropout.__init__": [[9, 12], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.classifier.local_classifier.LocalClassifier.__init__"], ["    ", "def", "__init__", "(", "self", ",", "p", ")", ":", "\n", "        ", "super", "(", "LockedDropout", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "p", "=", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.locked_dropout.LockedDropout.forward": [[13, 25], ["x.data.new().bernoulli_", "torch.autograd.Variable", "torch.autograd.Variable", "mask.cuda.cuda.expand_as", "mask.cuda.cuda.cuda", "x.data.new"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "not", "self", ".", "training", "or", "self", ".", "p", "==", "0.0", ":", "\n", "            ", "return", "x", "\n", "\n", "", "m", "=", "x", ".", "data", ".", "new", "(", "x", ".", "shape", "[", "0", "]", ",", "1", ",", "x", ".", "shape", "[", "2", "]", ")", ".", "bernoulli_", "(", "1.0", "-", "self", ".", "p", ")", "\n", "mask", "=", "Variable", "(", "m", "/", "(", "1", "-", "self", ".", "p", ")", ",", "requires_grad", "=", "False", ")", "\n", "mask", "=", "mask", ".", "expand_as", "(", "x", ")", "\n", "\n", "if", "x", ".", "is_cuda", ":", "\n", "        \t", "mask", "=", "mask", ".", "cuda", "(", ")", "\n", "\n", "", "return", "mask", "*", "x", "", "", "", ""]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.util.build_rnn": [[8, 27], ["torch.nn.LSTM", "torch.nn.GRU"], "function", ["None"], ["def", "build_rnn", "(", "type", ",", "input_size", ",", "hidden_size", ",", "num_layers", ",", "bias", ",", "batch_first", ",", "dropout", ",", "bidirectional", ")", ":", "\n", "\t", "if", "type", "==", "'lstm'", ":", "\n", "\t\t", "return", "nn", ".", "LSTM", "(", "input_size", "=", "input_size", ",", "\n", "hidden_size", "=", "hidden_size", ",", "\n", "num_layers", "=", "num_layers", ",", "\n", "bias", "=", "bias", ",", "\n", "batch_first", "=", "batch_first", ",", "\n", "dropout", "=", "dropout", ",", "\n", "bidirectional", "=", "bidirectional", ")", "\n", "", "elif", "type", "==", "'gru'", ":", "\n", "\t\t", "return", "nn", ".", "GRU", "(", "input_size", "=", "input_size", ",", "\n", "hidden_size", "=", "hidden_size", ",", "\n", "num_layers", "=", "num_layers", ",", "\n", "bias", "=", "bias", ",", "\n", "batch_first", "=", "batch_first", ",", "\n", "dropout", "=", "dropout", ",", "\n", "bidirectional", "=", "bidirectional", ")", "\n", "", "else", ":", "\n", "\t\t", "assert", "(", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.util.isnan": [[29, 31], ["None"], "function", ["None"], ["", "", "def", "isnan", "(", "x", ")", ":", "\n", "    ", "return", "(", "x", "!=", "x", ")", ".", "sum", "(", ")", ">", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.util.rand_tensor": [[33, 35], ["torch.rand"], "function", ["None"], ["", "def", "rand_tensor", "(", "shape", ",", "r1", ",", "r2", ")", ":", "\n", "\t", "return", "(", "r1", "-", "r2", ")", "*", "torch", ".", "rand", "(", "shape", ")", "+", "r2", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.util.pick_label": [[37, 39], ["numpy.argmax"], "function", ["None"], ["", "def", "pick_label", "(", "dist", ")", ":", "\n", "\t", "return", "np", ".", "argmax", "(", "dist", ",", "axis", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.util.torch2np": [[40, 42], ["t.numpy", "t.cpu().numpy", "t.cpu"], "function", ["None"], ["", "def", "torch2np", "(", "t", ",", "is_cuda", ")", ":", "\n", "\t", "return", "t", ".", "numpy", "(", ")", "if", "not", "is_cuda", "else", "t", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.util.save_param_dict": [[43, 49], ["h5py.File", "param_dict.items", "h5py.File.close", "h5py.File.create_dataset"], "function", ["home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.holder.Holder.items"], ["", "def", "save_param_dict", "(", "param_dict", ",", "path", ")", ":", "\n", "\t", "file", "=", "h5py", ".", "File", "(", "path", ",", "'w'", ")", "\n", "for", "name", ",", "p", "in", "param_dict", ".", "items", "(", ")", ":", "\n", "\t\t", "file", ".", "create_dataset", "(", "name", ",", "data", "=", "p", ")", "\n", "\n", "", "file", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.util.load_param_dict": [[50, 54], ["h5py.File"], "function", ["None"], ["", "def", "load_param_dict", "(", "path", ")", ":", "\n", "# TODO, this is ugly", "\n", "\t", "f", "=", "h5py", ".", "File", "(", "path", ",", "'r'", ")", "\n", "return", "f", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.util.load_dict": [[55, 67], ["open", "l.rstrip().split", "l.strip", "len", "print", "l.rstrip().split", "l.rstrip", "int", "l.rstrip", "l.rstrip"], "function", ["None"], ["", "def", "load_dict", "(", "path", ")", ":", "\n", "\t", "rs", "=", "{", "}", "\n", "with", "open", "(", "path", ",", "'r+'", ")", "as", "f", ":", "\n", "\t\t", "for", "l", "in", "f", ":", "\n", "\t\t\t", "if", "l", ".", "strip", "(", ")", "==", "''", ":", "\n", "\t\t\t\t", "continue", "\n", "", "if", "len", "(", "l", ".", "rstrip", "(", ")", ".", "split", "(", ")", ")", "<", "3", ":", "\n", "\t\t\t\t", "print", "(", "'weird line found: {0}'", ".", "format", "(", "l", ".", "rstrip", "(", ")", ")", ")", "\n", "continue", "\n", "", "w", ",", "idx", ",", "cnt", "=", "l", ".", "rstrip", "(", ")", ".", "split", "(", ")", "\n", "rs", "[", "int", "(", "idx", ")", "]", "=", "w", "\n", "", "", "return", "rs", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.util.save_opt": [[69, 72], ["open", "f.write"], "function", ["home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.preprocess.Indexer.write"], ["", "def", "save_opt", "(", "opt", ",", "path", ")", ":", "\n", "\t", "with", "open", "(", "path", ",", "'w'", ")", "as", "f", ":", "\n", "\t\t", "f", ".", "write", "(", "'{0}'", ".", "format", "(", "opt", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.util.simple_init": [[73, 80], ["hasattr", "m.weight.data.copy_().mul_", "hasattr", "m.bias.data.copy_().mul_", "m.weight.data.copy_", "m.bias.data.copy_", "torch.randn", "torch.randn"], "function", ["None"], ["", "", "def", "simple_init", "(", "opt", ",", "m", ")", ":", "\n", "\t", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "hasattr", "(", "m", ",", "'weight'", ")", ":", "\n", "\t\t", "m", ".", "weight", ".", "data", ".", "copy_", "(", "torch", ".", "randn", "(", "m", ".", "weight", ".", "data", ".", "shape", ")", ")", ".", "mul_", "(", "opt", ".", "param_init", ")", "\n", "\n", "", "if", "hasattr", "(", "m", ",", "'bias'", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "\t\t", "m", ".", "bias", ".", "data", ".", "copy_", "(", "torch", ".", "randn", "(", "m", ".", "bias", ".", "data", ".", "shape", ")", ")", ".", "mul_", "(", "opt", ".", "param_init", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.util.save_optim": [[81, 87], ["h5py.File", "optim.parameters", "h5py.File.close", "h5py.File.create_dataset"], "function", ["None"], ["", "", "def", "save_optim", "(", "optim", ",", "path", ")", ":", "\n", "\t", "file", "=", "h5py", ".", "File", "(", "path", ",", "'w'", ")", "\n", "for", "i", ",", "p", "in", "optim", ".", "parameters", "(", ")", ":", "\n", "\t\t", "file", ".", "create_dataset", "(", "'{0}'", ".", "format", "(", "i", ")", ",", "data", "=", "p", ")", "\n", "\n", "", "file", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.util.load_optim": [[88, 92], ["h5py.File"], "function", ["None"], ["", "def", "load_optim", "(", "path", ")", ":", "\n", "\t", "f", "=", "h5py", ".", "File", "(", "path", ",", "'r'", ")", "\n", "# CLOSE??", "\n", "return", "f", "", "", ""]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.optimizer.Adagrad.__init__": [[9, 14], ["None"], "methods", ["None"], ["\t", "def", "__init__", "(", "self", ",", "opt", ",", "shared", ")", ":", "\n", "\t\t", "self", ".", "opt", "=", "opt", "\n", "self", ".", "shared", "=", "shared", "\n", "self", ".", "optim", "=", "None", "\n", "self", ".", "clip", "=", "opt", ".", "clip", "if", "opt", ".", "clip", ">", "0.0", "else", "10000000000.0", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.optimizer.Adagrad.step": [[15, 25], ["torch.nn.utils.clip_grad_norm_", "optimizer.Adagrad.optim.step", "torch.optim.Adagrad", "m.parameters"], "methods", ["home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.optimizer.Optimizer.step"], ["", "def", "step", "(", "self", ",", "m", ")", ":", "\n", "\t\t", "params", "=", "[", "p", "for", "p", "in", "m", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", "]", "\n", "if", "self", ".", "optim", "is", "None", ":", "\n", "\t\t\t", "self", ".", "optim", "=", "torch", ".", "optim", ".", "Adagrad", "(", "params", ",", "lr", "=", "self", ".", "opt", ".", "learning_rate", ")", "\n", "\n", "", "grad_norm2", "=", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "params", ",", "self", ".", "clip", ",", "norm_type", "=", "2", ")", "\n", "\n", "self", ".", "optim", ".", "step", "(", ")", "\n", "\n", "return", "grad_norm2", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.optimizer.Adam.__init__": [[28, 34], ["float", "opt.adam_betas.split"], "methods", ["None"], ["\t", "def", "__init__", "(", "self", ",", "opt", ",", "shared", ")", ":", "\n", "\t\t", "self", ".", "opt", "=", "opt", "\n", "self", ".", "shared", "=", "shared", "\n", "self", ".", "optim", "=", "None", "\n", "self", ".", "clip", "=", "opt", ".", "clip", "if", "opt", ".", "clip", ">", "0.0", "else", "10000000000.0", "\n", "self", ".", "betas", "=", "[", "float", "(", "b", ")", "for", "b", "in", "opt", ".", "adam_betas", ".", "split", "(", "','", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.optimizer.Adam.step": [[35, 45], ["torch.nn.utils.clip_grad_norm_", "optimizer.Adam.optim.step", "torch.optim.Adam", "m.parameters"], "methods", ["home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.optimizer.Optimizer.step"], ["", "def", "step", "(", "self", ",", "m", ")", ":", "\n", "\t\t", "params", "=", "[", "p", "for", "p", "in", "m", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", "]", "\n", "if", "self", ".", "optim", "is", "None", ":", "\n", "\t\t\t", "self", ".", "optim", "=", "torch", ".", "optim", ".", "Adam", "(", "params", ",", "lr", "=", "self", ".", "opt", ".", "learning_rate", ",", "betas", "=", "self", ".", "betas", ")", "\n", "\n", "", "grad_norm2", "=", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "params", ",", "self", ".", "clip", ",", "norm_type", "=", "2", ")", "\n", "\n", "self", ".", "optim", ".", "step", "(", ")", "\n", "\n", "return", "grad_norm2", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.optimizer.Adamax.__init__": [[48, 54], ["float", "opt.adam_betas.split"], "methods", ["None"], ["\t", "def", "__init__", "(", "self", ",", "opt", ",", "shared", ")", ":", "\n", "\t\t", "self", ".", "opt", "=", "opt", "\n", "self", ".", "shared", "=", "shared", "\n", "self", ".", "optim", "=", "None", "\n", "self", ".", "clip", "=", "opt", ".", "clip", "if", "opt", ".", "clip", ">", "0.0", "else", "10000000000.0", "\n", "self", ".", "betas", "=", "[", "float", "(", "b", ")", "for", "b", "in", "opt", ".", "adam_betas", ".", "split", "(", "','", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.optimizer.Adamax.step": [[55, 65], ["torch.nn.utils.clip_grad_norm_", "optimizer.Adamax.optim.step", "torch.optim.Adamax", "m.parameters"], "methods", ["home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.optimizer.Optimizer.step"], ["", "def", "step", "(", "self", ",", "m", ")", ":", "\n", "\t\t", "params", "=", "[", "p", "for", "p", "in", "m", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", "]", "\n", "if", "self", ".", "optim", "is", "None", ":", "\n", "\t\t\t", "self", ".", "optim", "=", "torch", ".", "optim", ".", "Adamax", "(", "params", ",", "lr", "=", "self", ".", "opt", ".", "learning_rate", ",", "betas", "=", "self", ".", "betas", ")", "\n", "\n", "", "grad_norm2", "=", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "params", ",", "self", ".", "clip", ",", "norm_type", "=", "2", ")", "\n", "\n", "self", ".", "optim", ".", "step", "(", ")", "\n", "\n", "return", "grad_norm2", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.optimizer.Adadelta.__init__": [[68, 73], ["None"], "methods", ["None"], ["\t", "def", "__init__", "(", "self", ",", "opt", ",", "shared", ")", ":", "\n", "\t\t", "self", ".", "opt", "=", "opt", "\n", "self", ".", "shared", "=", "shared", "\n", "self", ".", "optim", "=", "None", "\n", "self", ".", "clip", "=", "opt", ".", "clip", "if", "opt", ".", "clip", ">", "0.0", "else", "10000000000.0", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.optimizer.Adadelta.step": [[74, 84], ["torch.nn.utils.clip_grad_norm_", "optimizer.Adadelta.optim.step", "torch.optim.Adadelta", "m.parameters"], "methods", ["home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.optimizer.Optimizer.step"], ["", "def", "step", "(", "self", ",", "m", ")", ":", "\n", "\t\t", "params", "=", "[", "p", "for", "p", "in", "m", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", "]", "\n", "if", "self", ".", "optim", "is", "None", ":", "\n", "\t\t\t", "self", ".", "optim", "=", "torch", ".", "optim", ".", "Adadelta", "(", "params", ",", "lr", "=", "self", ".", "opt", ".", "learning_rate", ",", "rho", "=", "0.95", ")", "\n", "\n", "", "grad_norm2", "=", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "params", ",", "self", ".", "clip", ",", "norm_type", "=", "2", ")", "\n", "\n", "self", ".", "optim", ".", "step", "(", ")", "\n", "\n", "return", "grad_norm2", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.optimizer.Optimizer.__init__": [[89, 104], ["optimizer.Adagrad", "optimizer.Adam", "optimizer.Adamax", "optimizer.Adadelta", "print"], "methods", ["None"], ["\t", "def", "__init__", "(", "self", ",", "opt", ",", "shared", ")", ":", "\n", "\t\t", "self", ".", "opt", "=", "opt", "\n", "self", ".", "shared", "=", "shared", "\n", "if", "opt", ".", "optim", "==", "'adagrad'", ":", "\n", "\t\t\t", "self", ".", "optim", "=", "Adagrad", "(", "opt", ",", "shared", ")", "\n", "", "elif", "opt", ".", "optim", "==", "'adam'", ":", "\n", "\t\t\t", "self", ".", "optim", "=", "Adam", "(", "opt", ",", "shared", ")", "\n", "", "elif", "opt", ".", "optim", "==", "'adamax'", ":", "\n", "\t\t\t", "self", ".", "optim", "=", "Adamax", "(", "opt", ",", "shared", ")", "\n", "", "elif", "opt", ".", "optim", "==", "'adadelta'", ":", "\n", "\t\t\t", "self", ".", "optim", "=", "Adadelta", "(", "opt", ",", "shared", ")", "\n", "", "else", ":", "\n", "\t\t\t", "print", "(", "'unrecognized optim: {0}'", ".", "format", "(", "opt", ".", "optim", ")", ")", "\n", "assert", "(", "False", ")", "\n", "", "self", ".", "__FLAG", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.optimizer.Optimizer.step": [[105, 132], ["optimizer.Optimizer.optim.step", "m.named_parameters", "m.named_parameters", "len", "print", "noupdate_names.append", "p.grad.data.div_", "print"], "methods", ["home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.optimizer.Optimizer.step"], ["", "def", "step", "(", "self", ",", "m", ",", "batch_size", "=", "1", ")", ":", "\n", "\t\t", "if", "not", "self", ".", "__FLAG", ":", "\n", "\t\t\t", "noupdate_names", "=", "[", "]", "\n", "for", "n", ",", "p", "in", "m", ".", "named_parameters", "(", ")", ":", "\n", "\t\t\t\t", "if", "not", "p", ".", "requires_grad", "or", "p", ".", "grad", "is", "None", ":", "\n", "\t\t\t\t\t", "noupdate_names", ".", "append", "(", "n", ")", "\n", "", "", "if", "len", "(", "noupdate_names", ")", "!=", "0", ":", "\n", "\t\t\t\t", "print", "(", "'fields that do not have gradient: {0}'", ".", "format", "(", "noupdate_names", ")", ")", "\n", "\n", "# if need to average gradient over batch", "\n", "", "", "if", "batch_size", "!=", "1", ":", "\n", "\t\t\t", "for", "n", ",", "p", "in", "m", ".", "named_parameters", "(", ")", ":", "\n", "\t\t\t\t", "if", "p", ".", "requires_grad", ":", "\n", "\t\t\t\t\t", "if", "p", ".", "grad", "is", "None", ":", "\n", "\t\t\t\t\t\t", "if", "not", "self", ".", "__FLAG", ":", "\n", "\t\t\t\t\t\t\t", "print", "(", "'{0} requires grad but has no grad, double check your graph'", ".", "format", "(", "n", ")", ")", "\n", "", "", "else", ":", "\n", "\t\t\t\t\t\t", "p", ".", "grad", ".", "data", ".", "div_", "(", "batch_size", ")", "\n", "\n", "\n", "", "", "", "", "self", ".", "__FLAG", "=", "True", "\n", "\n", "# update clip gradient", "\n", "if", "self", ".", "shared", ".", "epoch", "+", "1", ">=", "self", ".", "opt", ".", "clip_epoch", "and", "self", ".", "opt", ".", "clip", ">", "0.0", ":", "\n", "\t\t\t", "self", ".", "optim", ".", "clip", "=", "self", ".", "opt", ".", "clip", "\n", "\n", "", "return", "self", ".", "optim", ".", "step", "(", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.evaluation.readFile": [[9, 14], ["open", "open.readline", "open.readlines"], "function", ["None"], ["def", "readFile", "(", "fileName", ")", ":", "\n", "\t", "f1", "=", "open", "(", "fileName", ",", "'r'", ")", "\n", "f1", ".", "readline", "(", ")", "\n", "data", "=", "f1", ".", "readlines", "(", ")", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.evaluation.process": [[16, 25], ["numpy.zeros", "range", "len", "data[].strip().split", "float", "float", "float", "len", "data[].strip"], "function", ["None"], ["", "def", "process", "(", "data", ")", ":", "\n", "\t", "A", "=", "np", ".", "zeros", "(", "(", "len", "(", "data", ")", ",", "3", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "data", ")", ")", ":", "\n", "\t\t", "a", "=", "data", "[", "i", "]", ".", "strip", "(", ")", ".", "split", "(", "','", ")", "\n", "A", "[", "i", "]", "[", "0", "]", "=", "float", "(", "a", "[", "4", "]", ")", ";", "\n", "A", "[", "i", "]", "[", "1", "]", "=", "float", "(", "a", "[", "5", "]", ")", ";", "\n", "A", "[", "i", "]", "[", "2", "]", "=", "float", "(", "a", "[", "6", "]", ")", ";", "\n", "\n", "", "return", "A", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.evaluation.netNeutral": [[27, 29], ["sum", "len"], "function", ["None"], ["", "def", "netNeutral", "(", "A", ")", ":", "\n", "\t", "return", "sum", "(", "A", ")", "/", "len", "(", "A", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.evaluation.sortedDist": [[30, 35], ["numpy.asarray", "numpy.argsort", "numpy.sort"], "function", ["None"], ["", "def", "sortedDist", "(", "A", ")", ":", "\n", "\t", "tempA", "=", "np", ".", "asarray", "(", "A", ")", "\n", "sortedArg", "=", "np", ".", "argsort", "(", "tempA", ")", "\n", "tempA", "=", "np", ".", "sort", "(", "tempA", ")", "\n", "return", "sortedArg", ",", "tempA", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.evaluation.sortedArgs": [[36, 44], ["range", "len", "len"], "function", ["None"], ["", "def", "sortedArgs", "(", "l1", ",", "val", ",", "l2", ",", "lE", ",", "lC", ")", ":", "\n", "\t", "L", "=", "[", "0", "]", "*", "len", "(", "l1", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "l1", ")", ")", ":", "\n", "\t\t", "if", "lE", "[", "l1", "[", "i", "]", "]", ">", "lC", "[", "l1", "[", "i", "]", "]", ":", "\n", "\t\t\t", "L", "[", "l1", "[", "i", "]", "]", "=", "(", "l2", "[", "i", "]", ",", "'e'", ",", "lE", "[", "i", "]", ",", "val", "[", "i", "]", ")", "\n", "", "else", ":", "\n", "\t\t\t", "L", "[", "l1", "[", "i", "]", "]", "=", "(", "l2", "[", "i", "]", ",", "'c'", ",", "lC", "[", "i", "]", ",", "val", "[", "i", "]", ")", "\n", "", "", "return", "L", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.evaluation.sortedFunc": [[46, 49], ["numpy.argsort"], "function", ["None"], ["", "def", "sortedFunc", "(", "list1", ",", "tupleList", ",", "listE", ",", "listC", ")", ":", "\n", "\t", "ind", "=", "np", ".", "argsort", "(", "list1", ")", ";", "\n", "return", "'Done'", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.evaluation.KLD": [[50, 52], ["scipy.stats.entropy"], "function", ["None"], ["", "def", "KLD", "(", "A", ",", "i", ",", "j", ")", ":", "\n", "\t", "return", "sp", ".", "stats", ".", "entropy", "(", "A", "[", "i", "]", ",", "A", "[", "j", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.evaluation.counter": [[53, 55], ["None"], "function", ["None"], ["", "def", "counter", "(", "A", ",", "threshold", ")", ":", "\n", "\t", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.evaluation.cdf": [[56, 60], ["range", "len", "numpy.asarray", "len"], "function", ["None"], ["", "def", "cdf", "(", "A", ",", "arr", ")", ":", "\n", "\t", "for", "i", "in", "range", "(", "1", ",", "len", "(", "arr", ")", ")", ":", "\n", "\t\t", "arr", "[", "i", "]", "+=", "arr", "[", "i", "-", "1", "]", "\n", "", "return", "np", ".", "asarray", "(", "arr", ")", "/", "len", "(", "A", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.evaluation.plotting": [[61, 66], ["matplotlib.pyplot.plot", "matplotlib.pyplot.xlabel", "matplotlib.pyplot.ylabel", "matplotlib.pyplot.show", "range", "len"], "function", ["None"], ["", "def", "plotting", "(", "val", ")", ":", "\n", "\t", "plt", ".", "plot", "(", "range", "(", "len", "(", "val", ")", ")", ",", "val", ")", "\n", "plt", ".", "xlabel", "(", "'Sorted Tuples'", ",", "fontsize", "=", "'20'", ")", "\n", "plt", ".", "ylabel", "(", "'P_neutral'", ",", "fontsize", "=", "'18'", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.evaluation.structure": [[67, 71], ["range", "len", "data[].strip().split", "data[].strip"], "function", ["None"], ["", "def", "structure", "(", "data", ")", ":", "\n", "\t", "for", "i", "in", "range", "(", "len", "(", "data", ")", ")", ":", "\n", "\t\t", "data", "[", "i", "]", "=", "data", "[", "i", "]", ".", "strip", "(", ")", ".", "split", "(", "','", ")", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.evaluation.filtering": [[72, 77], ["range", "len", "newData.append"], "function", ["None"], ["", "def", "filtering", "(", "data", ")", ":", "\n", "\t", "newData", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "data", ")", ")", ":", "\n", "\t\t", "newData", ".", "append", "(", "data", "[", "i", "]", ")", "\n", "", "return", "newData", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.evaluation.club": [[79, 92], ["dict", "range", "len", "newList1.append", "newListN.append", "newListE.append", "newListC.append", "float", "float", "float", "float", "float", "float"], "function", ["None"], ["", "def", "club", "(", "data", ")", ":", "\n", "\t", "newData", "=", "dict", "(", ")", ";", "newList1", "=", "[", "]", ";", "newListN", "=", "[", "]", ";", "newListE", "=", "[", "]", ";", "newListC", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "data", ")", ")", ":", "\n", "\t\t", "if", "(", "data", "[", "i", "]", "[", "0", "]", ",", "data", "[", "i", "]", "[", "1", "]", ")", "not", "in", "newData", ":", "\n", "\t\t\t", "newData", "[", "(", "data", "[", "i", "]", "[", "0", "]", ",", "data", "[", "i", "]", "[", "1", "]", ")", "]", "=", "[", "float", "(", "data", "[", "i", "]", "[", "4", "]", ")", ",", "float", "(", "data", "[", "i", "]", "[", "5", "]", ")", ",", "float", "(", "data", "[", "i", "]", "[", "6", "]", ")", ",", "1.0", "]", "\n", "", "else", ":", "\n", "\t\t\t", "newData", "[", "(", "data", "[", "i", "]", "[", "0", "]", ",", "data", "[", "i", "]", "[", "1", "]", ")", "]", "[", "0", "]", "+=", "float", "(", "data", "[", "i", "]", "[", "4", "]", ")", "\n", "newData", "[", "(", "data", "[", "i", "]", "[", "0", "]", ",", "data", "[", "i", "]", "[", "1", "]", ")", "]", "[", "1", "]", "+=", "float", "(", "data", "[", "i", "]", "[", "5", "]", ")", "\n", "newData", "[", "(", "data", "[", "i", "]", "[", "0", "]", ",", "data", "[", "i", "]", "[", "1", "]", ")", "]", "[", "2", "]", "+=", "float", "(", "data", "[", "i", "]", "[", "6", "]", ")", "\n", "newData", "[", "(", "data", "[", "i", "]", "[", "0", "]", ",", "data", "[", "i", "]", "[", "1", "]", ")", "]", "[", "3", "]", "+=", "1.0", "\n", "", "", "for", "key", "in", "newData", ":", "\n", "\t\t", "newList1", ".", "append", "(", "key", ")", ";", "newListN", ".", "append", "(", "newData", "[", "key", "]", "[", "1", "]", "/", "newData", "[", "key", "]", "[", "3", "]", ")", ";", "newListE", ".", "append", "(", "newData", "[", "key", "]", "[", "0", "]", "/", "newData", "[", "key", "]", "[", "3", "]", ")", ";", "newListC", ".", "append", "(", "newData", "[", "key", "]", "[", "2", "]", "/", "newData", "[", "key", "]", "[", "3", "]", ")", ";", "\n", "", "return", "newList1", ",", "newListN", ",", "newListE", ",", "newListC", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.evaluation.fracNeutral": [[94, 100], ["range", "len", "len"], "function", ["None"], ["", "def", "fracNeutral", "(", "l", ",", "alpha", ")", ":", "\n", "\t", "counter", "=", "0.0", "\n", "for", "i", "in", "range", "(", "len", "(", "l", ")", ")", ":", "\n", "\t\t", "if", "l", "[", "i", "]", ">", "alpha", ":", "\n", "\t\t\t", "counter", "=", "counter", "+", "1.0", "\n", "", "", "return", "counter", "/", "len", "(", "l", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.evaluation.ksTest": [[102, 104], ["scipy.stats.ks_2samp"], "function", ["None"], ["", "def", "ksTest", "(", "d1", ",", "d2", ")", ":", "\n", "\t", "return", "sp", ".", "stats", ".", "ks_2samp", "(", "d1", ",", "d2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.evaluation.main": [[108, 123], ["parser.parse_args", "evaluation.readFile", "evaluation.process", "evaluation.structure", "evaluation.club", "print", "evaluation.sortedArgs", "print", "evaluation.ksTest", "evaluation.netNeutral", "evaluation.fracNeutral", "evaluation.fracNeutral", "evaluation.cdf", "evaluation.sortedDist", "numpy.sort"], "function", ["home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.evaluation.readFile", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.evaluation.process", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.evaluation.structure", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.evaluation.club", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.evaluation.sortedArgs", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.evaluation.ksTest", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.evaluation.netNeutral", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.evaluation.fracNeutral", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.evaluation.fracNeutral", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.evaluation.cdf", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.evaluation.sortedDist"], ["def", "main", "(", "args", ")", ":", "\n", "\t", "opt", "=", "parser", ".", "parse_args", "(", "args", ")", "\n", "\n", "data", "=", "readFile", "(", "opt", ".", "data", ")", "\n", "\n", "A", "=", "process", "(", "data", ")", "\n", "#plt.plot()", "\n", "\n", "data", "=", "structure", "(", "data", ")", "\n", "dataL1", ",", "dataL2", ",", "dataL3", ",", "dataL4", "=", "club", "(", "data", ")", "\n", "print", "(", "'kstest'", ",", "ksTest", "(", "cdf", "(", "A", ",", "np", ".", "sort", "(", "dataL2", ")", ")", ")", ")", "\n", "\n", "args", "=", "sortedArgs", "(", "sortedDist", "(", "dataL2", ")", "[", "0", "]", ",", "dataL2", ",", "dataL1", ",", "dataL3", ",", "dataL4", ")", "\n", "\n", "print", "(", "'Net Neutral : '", ",", "netNeutral", "(", "dataL2", ")", ",", "'Threshold = 0.5 : '", ",", "fracNeutral", "(", "dataL2", ",", "0.5", ")", ",", "'Threshold = 0.7 : '", ",", "fracNeutral", "(", "dataL2", ",", "0.7", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.encoder.rnn_encoder.RNNEncoder.__init__": [[13, 34], ["super().__init__", "build_rnn", "LockedDropout"], "methods", ["home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.classifier.local_classifier.LocalClassifier.__init__", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.util.build_rnn"], ["\t", "def", "__init__", "(", "self", ",", "opt", ",", "shared", ")", ":", "\n", "\t\t", "super", "(", "RNNEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "bidir", "=", "opt", ".", "birnn", "==", "1", "\n", "hidden_state", "=", "opt", ".", "hidden_size", "if", "not", "self", ".", "bidir", "else", "opt", ".", "hidden_size", "//", "2", "\n", "\n", "self", ".", "rnn", "=", "build_rnn", "(", "\n", "opt", ".", "rnn_type", ",", "\n", "input_size", "=", "opt", ".", "word_vec_size", ",", "\n", "hidden_size", "=", "hidden_state", ",", "\n", "num_layers", "=", "opt", ".", "rnn_layer", ",", "\n", "bias", "=", "True", ",", "\n", "batch_first", "=", "True", ",", "\n", "dropout", "=", "opt", ".", "dropout", ",", "\n", "bidirectional", "=", "self", ".", "bidir", ")", "\n", "\n", "self", ".", "drop", "=", "LockedDropout", "(", "opt", ".", "dropout", ")", "\n", "\n", "# bookkeeping", "\n", "self", ".", "opt", "=", "opt", "\n", "self", ".", "shared", "=", "shared", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.encoder.rnn_encoder.RNNEncoder.rnn_over": [[36, 39], ["rnn", "rnn_encoder.RNNEncoder.drop"], "methods", ["None"], ["", "def", "rnn_over", "(", "self", ",", "rnn", ",", "enc", ")", ":", "\n", "\t\t", "enc", ",", "_", "=", "rnn", "(", "self", ".", "drop", "(", "enc", ")", ")", "\n", "return", "enc", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.encoder.rnn_encoder.RNNEncoder.forward": [[41, 56], ["rnn_encoder.RNNEncoder.rnn_over", "rnn_encoder.RNNEncoder.rnn_over", "lstm_enc1.contiguous.contiguous.contiguous", "lstm_enc2.contiguous.contiguous.contiguous"], "methods", ["home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.encoder.rnn_encoder.RNNEncoder.rnn_over", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.encoder.rnn_encoder.RNNEncoder.rnn_over"], ["", "def", "forward", "(", "self", ",", "sent1", ",", "sent2", ")", ":", "\n", "\t\t", "lstm_enc1", "=", "self", ".", "rnn_over", "(", "self", ".", "rnn", ",", "sent1", ")", "\n", "lstm_enc2", "=", "self", ".", "rnn_over", "(", "self", ".", "rnn", ",", "sent2", ")", "\n", "lstm_enc1", "=", "lstm_enc1", ".", "contiguous", "(", ")", "\n", "lstm_enc2", "=", "lstm_enc2", ".", "contiguous", "(", ")", "\n", "\n", "# record", "\n", "#\ttake lstm encoding as embeddings for classification", "\n", "#\ttake post-lstm encoding as encodings for attention", "\n", "self", ".", "shared", ".", "input_emb1", "=", "lstm_enc1", "\n", "self", ".", "shared", ".", "input_emb2", "=", "lstm_enc2", "\n", "self", ".", "shared", ".", "input_enc1", "=", "lstm_enc1", "\n", "self", ".", "shared", ".", "input_enc2", "=", "lstm_enc2", "\n", "\n", "return", "[", "self", ".", "shared", ".", "input_emb1", ",", "self", ".", "shared", ".", "input_emb2", ",", "self", ".", "shared", ".", "input_enc1", ",", "self", ".", "shared", ".", "input_enc2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.encoder.rnn_encoder.RNNEncoder.begin_pass": [[57, 59], ["None"], "methods", ["None"], ["", "def", "begin_pass", "(", "self", ")", ":", "\n", "\t\t", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.encoder.rnn_encoder.RNNEncoder.end_pass": [[60, 62], ["None"], "methods", ["None"], ["", "def", "end_pass", "(", "self", ")", ":", "\n", "\t\t", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.encoder.proj_encoder.ProjEncoder.__init__": [[10, 25], ["super().__init__", "torch.nn.Linear", "torch.nn.Sequential", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.classifier.local_classifier.LocalClassifier.__init__"], ["\t", "def", "__init__", "(", "self", ",", "opt", ",", "shared", ")", ":", "\n", "\t\t", "super", "(", "ProjEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "proj", "=", "nn", ".", "Linear", "(", "opt", ".", "word_vec_size", ",", "opt", ".", "hidden_size", ",", "False", ")", "\n", "\n", "self", ".", "f", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Dropout", "(", "opt", ".", "dropout", ")", ",", "\n", "nn", ".", "Linear", "(", "opt", ".", "hidden_size", ",", "opt", ".", "hidden_size", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", "opt", ".", "dropout", ")", ",", "\n", "nn", ".", "Linear", "(", "opt", ".", "hidden_size", ",", "opt", ".", "hidden_size", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ")", "\n", "\n", "# bookkeeping", "\n", "self", ".", "opt", "=", "opt", "\n", "self", ".", "shared", "=", "shared", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.encoder.proj_encoder.ProjEncoder.forward": [[27, 44], ["proj_encoder.ProjEncoder.proj", "proj_encoder.ProjEncoder.proj", "proj_encoder.ProjEncoder.f().view", "proj_encoder.ProjEncoder.f().view", "proj_encoder.ProjEncoder.shared.input_emb1.view", "proj_encoder.ProjEncoder.shared.input_emb2.view", "sent1.view", "sent2.view", "proj_encoder.ProjEncoder.f", "proj_encoder.ProjEncoder.f"], "methods", ["home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.contractionFunc.proj", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.contractionFunc.proj"], ["", "def", "forward", "(", "self", ",", "sent1", ",", "sent2", ")", ":", "\n", "\t\t", "batch_l", "=", "self", ".", "shared", ".", "batch_l", "\n", "sent_l1", "=", "self", ".", "shared", ".", "sent_l1", "\n", "sent_l2", "=", "self", ".", "shared", ".", "sent_l2", "\n", "input_size", "=", "self", ".", "opt", ".", "word_vec_size", "\n", "hidden_size", "=", "self", ".", "opt", ".", "hidden_size", "\n", "\n", "self", ".", "shared", ".", "input_emb1", "=", "self", ".", "proj", "(", "sent1", ".", "view", "(", "batch_l", "*", "sent_l1", ",", "input_size", ")", ")", "\n", "self", ".", "shared", ".", "input_emb2", "=", "self", ".", "proj", "(", "sent2", ".", "view", "(", "batch_l", "*", "sent_l2", ",", "input_size", ")", ")", "\n", "\n", "self", ".", "shared", ".", "input_enc1", "=", "self", ".", "f", "(", "self", ".", "shared", ".", "input_emb1", ")", ".", "view", "(", "batch_l", ",", "sent_l1", ",", "hidden_size", ")", "\n", "self", ".", "shared", ".", "input_enc2", "=", "self", ".", "f", "(", "self", ".", "shared", ".", "input_emb2", ")", ".", "view", "(", "batch_l", ",", "sent_l2", ",", "hidden_size", ")", "\n", "\n", "self", ".", "shared", ".", "input_emb1", "=", "self", ".", "shared", ".", "input_emb1", ".", "view", "(", "batch_l", ",", "sent_l1", ",", "hidden_size", ")", "\n", "self", ".", "shared", ".", "input_emb2", "=", "self", ".", "shared", ".", "input_emb2", ".", "view", "(", "batch_l", ",", "sent_l2", ",", "hidden_size", ")", "\n", "\n", "return", "[", "self", ".", "shared", ".", "input_emb1", ",", "self", ".", "shared", ".", "input_emb2", ",", "self", ".", "shared", ".", "input_enc1", ",", "self", ".", "shared", ".", "input_enc2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.encoder.proj_encoder.ProjEncoder.begin_pass": [[46, 48], ["None"], "methods", ["None"], ["", "def", "begin_pass", "(", "self", ")", ":", "\n", "\t\t", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.encoder.proj_encoder.ProjEncoder.end_pass": [[49, 51], ["None"], "methods", ["None"], ["", "def", "end_pass", "(", "self", ")", ":", "\n", "\t\t", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.elmo.elmo_bilm_debias.ElmoBilmDebias.__init__": [[41, 81], ["super().__init__", "allennlp.modules.elmo._ElmoCharacterEncoder", "allennlp.modules.elmo_lstm.ElmoLstm", "elmo_bilm_debias.ElmoBilmDebias._elmo_lstm.load_weights", "logging.warning", "logging.info", "elmo_bilm_debias.ElmoBilmDebias.create_cached_cnn_embeddings", "open", "json.load", "options[].get", "allennlp.common.checks.ConfigurationError", "allennlp.common.file_utils.cached_path"], "methods", ["home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.classifier.local_classifier.LocalClassifier.__init__"], ["def", "__init__", "(", "self", ",", "\n", "options_file", ":", "str", ",", "\n", "weight_file", ":", "str", ",", "\n", "requires_grad", ":", "bool", "=", "False", ",", "\n", "vocab_to_cache", ":", "List", "[", "str", "]", "=", "None", ")", "->", "None", ":", "\n", "        ", "super", "(", "ElmoBilmDebias", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "_token_embedder", "=", "_ElmoCharacterEncoder", "(", "options_file", ",", "weight_file", ",", "requires_grad", "=", "requires_grad", ")", "\n", "\n", "self", ".", "_requires_grad", "=", "requires_grad", "\n", "if", "requires_grad", "and", "vocab_to_cache", ":", "\n", "            ", "logging", ".", "warning", "(", "\"You are fine tuning ELMo and caching char CNN word vectors. \"", "\n", "\"This behaviour is not guaranteed to be well defined, particularly. \"", "\n", "\"if not all of your inputs will occur in the vocabulary cache.\"", ")", "\n", "# This is an embedding, used to look up cached", "\n", "# word vectors built from character level cnn embeddings.", "\n", "", "self", ".", "_word_embedding", "=", "None", "\n", "self", ".", "_bos_embedding", ":", "torch", ".", "Tensor", "=", "None", "\n", "self", ".", "_eos_embedding", ":", "torch", ".", "Tensor", "=", "None", "\n", "if", "vocab_to_cache", ":", "\n", "            ", "logging", ".", "info", "(", "\"Caching character cnn layers for words in vocabulary.\"", ")", "\n", "# This sets 3 attributes, _word_embedding, _bos_embedding and _eos_embedding.", "\n", "# They are set in the method so they can be accessed from outside the", "\n", "# constructor.", "\n", "self", ".", "create_cached_cnn_embeddings", "(", "vocab_to_cache", ")", "\n", "\n", "", "with", "open", "(", "cached_path", "(", "options_file", ")", ",", "'r'", ")", "as", "fin", ":", "\n", "            ", "options", "=", "json", ".", "load", "(", "fin", ")", "\n", "", "if", "not", "options", "[", "'lstm'", "]", ".", "get", "(", "'use_skip_connections'", ")", ":", "\n", "            ", "raise", "ConfigurationError", "(", "'We only support pretrained biLMs with residual connections'", ")", "\n", "", "self", ".", "_elmo_lstm", "=", "ElmoLstm", "(", "input_size", "=", "options", "[", "'lstm'", "]", "[", "'projection_dim'", "]", ",", "\n", "hidden_size", "=", "options", "[", "'lstm'", "]", "[", "'projection_dim'", "]", ",", "\n", "cell_size", "=", "options", "[", "'lstm'", "]", "[", "'dim'", "]", ",", "\n", "num_layers", "=", "options", "[", "'lstm'", "]", "[", "'n_layers'", "]", ",", "\n", "memory_cell_clip_value", "=", "options", "[", "'lstm'", "]", "[", "'cell_clip'", "]", ",", "\n", "state_projection_clip_value", "=", "options", "[", "'lstm'", "]", "[", "'proj_clip'", "]", ",", "\n", "requires_grad", "=", "requires_grad", ")", "\n", "self", ".", "_elmo_lstm", ".", "load_weights", "(", "weight_file", ")", "\n", "# Number of representation layers including context independent layer", "\n", "self", ".", "num_layers", "=", "options", "[", "'lstm'", "]", "[", "'n_layers'", "]", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.elmo.elmo_bilm_debias.ElmoBilmDebias.get_output_dim": [[82, 84], ["elmo_bilm_debias.ElmoBilmDebias._token_embedder.get_output_dim"], "methods", ["home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.elmo.elmo_bilm_debias.ElmoBilmDebias.get_output_dim"], ["", "def", "get_output_dim", "(", "self", ")", ":", "\n", "        ", "return", "2", "*", "self", ".", "_token_embedder", ".", "get_output_dim", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.elmo.elmo_bilm_debias.ElmoBilmDebias.forward": [[85, 196], ["torch.cat", "elmo_bilm_debias.ElmoBilmDebias._elmo_lstm", "torch.chunk", "elmo_bilm_debias.ElmoBilmDebias._token_embedder", "Holder", "contraction[].get_device", "correction", "elmo_bilm_debias.ElmoBilmDebias.size", "output_tensors.append", "elmo_bilm_debias.ElmoBilmDebias._word_embedding", "allennlp.nn.util.add_sentence_boundary_token_ids", "bias.expand.expand.expand", "correction.bmm", "hasattr", "contraction[].view().cpu().numpy", "contraction[].view().cpu().numpy", "maxSpan", "numpy.identity", "numpy.identity", "gsConstrained", "torch.from_numpy().view", "torch.from_numpy().view", "torch.from_numpy().view().float", "contraction[].get_device", "correction.contiguous", "torch.cat", "mask.float().unsqueeze", "layer_activations.squeeze", "elmo_bilm_debias.ElmoBilmDebias._token_embedder", "bias.expand.expand.transpose", "bias.expand.expand.expand", "correction.bmm", "correction.bmm", "Exception", "basis", "elmo_bilm_debias.ElmoBilmDebias.contract_v1.cuda", "elmo_bilm_debias.ElmoBilmDebias.contract_v2.cuda", "elmo_bilm_debias.ElmoBilmDebias.contract_U.cuda", "bias1.transpose", "bias2.transpose", "contraction[].view().cpu", "contraction[].view().cpu", "numpy.vstack", "numpy.vstack", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy().view", "mask.float", "contraction[].view", "contraction[].view", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.contractionFunc.correction", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.data.Data.size", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.contractionFunc.maxSpan", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.contractionFunc.gsConstrained", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.contractionFunc.basis"], ["", "def", "forward", "(", "self", ",", "# pylint: disable=arguments-differ", "\n", "inputs", ":", "torch", ".", "Tensor", ",", "\n", "bias", ":", "torch", ".", "Tensor", "=", "None", ",", "\n", "num_bias", ":", "int", "=", "1", ",", "\n", "contraction", ":", "(", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", ")", "=", "None", ",", "\n", "word_inputs", ":", "torch", ".", "Tensor", "=", "None", ")", "->", "Dict", "[", "str", ",", "Union", "[", "torch", ".", "Tensor", ",", "List", "[", "torch", ".", "Tensor", "]", "]", "]", ":", "\n", "        ", "\"\"\"\n        Parameters\n        ----------\n        inputs: ``torch.Tensor``, required.\n            Shape ``(batch_size, timesteps, 50)`` of character ids representing the current batch.\n        word_inputs : ``torch.Tensor``, required.\n            If you passed a cached vocab, you can in addition pass a tensor of shape ``(batch_size, timesteps)``,\n            which represent word ids which have been pre-cached.\n        Returns\n        -------\n        Dict with keys:\n        ``'activations'``: ``List[torch.Tensor]``\n            A list of activations at each layer of the network, each of shape\n            ``(batch_size, timesteps + 2, embedding_dim)``\n        ``'mask'``:  ``torch.Tensor``\n            Shape ``(batch_size, timesteps + 2)`` long tensor with sequence mask.\n        Note that the output tensors all include additional special begin and end of sequence\n        markers.\n        \"\"\"", "\n", "if", "self", ".", "_word_embedding", "is", "not", "None", "and", "word_inputs", "is", "not", "None", ":", "\n", "            ", "try", ":", "\n", "                ", "mask_without_bos_eos", "=", "(", "word_inputs", ">", "0", ")", ".", "long", "(", ")", "\n", "# The character cnn part is cached - just look it up.", "\n", "embedded_inputs", "=", "self", ".", "_word_embedding", "(", "word_inputs", ")", "# type: ignore", "\n", "# shape (batch_size, timesteps + 2, embedding_dim)", "\n", "type_representation", ",", "mask", "=", "add_sentence_boundary_token_ids", "(", "\n", "embedded_inputs", ",", "\n", "mask_without_bos_eos", ",", "\n", "self", ".", "_bos_embedding", ",", "\n", "self", ".", "_eos_embedding", "\n", ")", "\n", "", "except", "RuntimeError", ":", "\n", "# Back off to running the character convolutions,", "\n", "# as we might not have the words in the cache.", "\n", "                ", "token_embedding", "=", "self", ".", "_token_embedder", "(", "inputs", ")", "\n", "mask", "=", "token_embedding", "[", "'mask'", "]", "\n", "type_representation", "=", "token_embedding", "[", "'token_embedding'", "]", "\n", "", "", "else", ":", "\n", "            ", "token_embedding", "=", "self", ".", "_token_embedder", "(", "inputs", ")", "\n", "mask", "=", "token_embedding", "[", "'mask'", "]", "\n", "type_representation", "=", "token_embedding", "[", "'token_embedding'", "]", "\n", "\n", "# debiasing the input embeddings", "\n", "#   1. take out the boundaries, i.e. len - 2", "\n", "", "batch_l", ",", "seq_l", ",", "elmo_size", "=", "type_representation", ".", "shape", "\n", "l0", "=", "type_representation", "[", ":", ",", "1", ":", "-", "1", ",", ":", "]", "\n", "#   2. debiasing", "\n", "if", "bias", "is", "not", "None", ":", "\n", "            ", "if", "num_bias", "==", "1", ":", "\n", "                ", "bias", "=", "bias", ".", "expand", "(", "batch_l", ",", "1", ",", "elmo_size", ")", "\n", "proj", "=", "l0", ".", "bmm", "(", "bias", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "l0", "=", "l0", "-", "(", "proj", "*", "bias", ")", "\n", "", "elif", "num_bias", "==", "2", ":", "\n", "                ", "bias", "=", "bias", ".", "expand", "(", "batch_l", ",", "2", ",", "elmo_size", ")", "\n", "bias1", "=", "bias", "[", ":", ",", "0", ":", "1", ",", ":", "]", "\n", "bias2", "=", "bias", "[", ":", ",", "1", ":", "2", ",", ":", "]", "\n", "proj1", "=", "l0", ".", "bmm", "(", "bias1", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "proj2", "=", "l0", ".", "bmm", "(", "bias2", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "l0", "=", "l0", "-", "(", "proj1", "*", "bias1", ")", "-", "(", "proj2", "*", "bias2", ")", "\n", "", "else", ":", "\n", "                ", "raise", "Exception", "(", "'unrecognized num_bias: {0}'", ".", "format", "(", "num_bias", ")", ")", "\n", "#   3. contraction", "\n", "", "", "if", "contraction", "is", "not", "None", ":", "\n", "            ", "if", "not", "hasattr", "(", "self", ",", "'contract_U'", ")", ":", "\n", "                ", "v1", "=", "contraction", "[", "0", "]", ".", "view", "(", "-", "1", ",", "elmo_size", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "v2", "=", "contraction", "[", "1", "]", ".", "view", "(", "-", "1", ",", "elmo_size", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "v1", ",", "v2", "=", "maxSpan", "(", "v1", ",", "v2", ")", "\n", "U", "=", "np", ".", "identity", "(", "elmo_size", ")", "\n", "U", "=", "gsConstrained", "(", "U", ",", "v1", ",", "basis", "(", "np", ".", "vstack", "(", "(", "v1", ",", "v2", ")", ")", ")", ")", "\n", "\n", "self", ".", "contract_v1", "=", "torch", ".", "from_numpy", "(", "v1", ")", ".", "view", "(", "1", ",", "1", ",", "elmo_size", ")", "\n", "self", ".", "contract_v2", "=", "torch", ".", "from_numpy", "(", "v2", ")", ".", "view", "(", "1", ",", "1", ",", "elmo_size", ")", "\n", "self", ".", "contract_U", "=", "torch", ".", "from_numpy", "(", "U", ")", ".", "view", "(", "1", ",", "elmo_size", ",", "elmo_size", ")", ".", "float", "(", ")", "\n", "gpuid", "=", "contraction", "[", "0", "]", ".", "get_device", "(", ")", "\n", "if", "gpuid", "!=", "-", "1", ":", "\n", "                    ", "self", ".", "contract_v1", "=", "self", ".", "contract_v1", ".", "cuda", "(", "gpuid", ")", "\n", "self", ".", "contract_v2", "=", "self", ".", "contract_v2", ".", "cuda", "(", "gpuid", ")", "\n", "self", ".", "contract_U", "=", "self", ".", "contract_U", ".", "cuda", "(", "gpuid", ")", "\n", "\n", "", "", "opt", "=", "Holder", "(", ")", "\n", "opt", ".", "gpuid", "=", "contraction", "[", "0", "]", ".", "get_device", "(", ")", "\n", "l0", "=", "correction", "(", "opt", ",", "self", ".", "contract_U", ",", "self", ".", "contract_v1", ",", "self", ".", "contract_v2", ",", "l0", ".", "contiguous", "(", ")", ")", "\n", "\n", "#   4. reconcat with boundaries", "\n", "", "type_representation", "=", "torch", ".", "cat", "(", "[", "type_representation", "[", ":", ",", "0", ":", "1", ",", ":", "]", ",", "l0", ",", "type_representation", "[", ":", ",", "-", "1", ":", ",", ":", "]", "]", ",", "1", ")", "\n", "\n", "# continue the lm", "\n", "lstm_outputs", "=", "self", ".", "_elmo_lstm", "(", "type_representation", ",", "mask", ")", "\n", "\n", "# Prepare the output.  The first layer is duplicated.", "\n", "# Because of minor differences in how masking is applied depending", "\n", "# on whether the char cnn layers are cached, we'll be defensive and", "\n", "# multiply by the mask here. It's not strictly necessary, as the", "\n", "# mask passed on is correct, but the values in the padded areas", "\n", "# of the char cnn representations can change.", "\n", "output_tensors", "=", "[", "\n", "torch", ".", "cat", "(", "[", "type_representation", ",", "type_representation", "]", ",", "dim", "=", "-", "1", ")", "*", "mask", ".", "float", "(", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "]", "\n", "for", "layer_activations", "in", "torch", ".", "chunk", "(", "lstm_outputs", ",", "lstm_outputs", ".", "size", "(", "0", ")", ",", "dim", "=", "0", ")", ":", "\n", "            ", "output_tensors", ".", "append", "(", "layer_activations", ".", "squeeze", "(", "0", ")", ")", "\n", "\n", "", "return", "{", "\n", "'activations'", ":", "output_tensors", ",", "\n", "'mask'", ":", "mask", ",", "\n", "}", ""]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.elmo.elmo_embedder_debias.ElmoEmbedderDebias.__init__": [[32, 66], ["allennlp.data.token_indexers.elmo_indexer.ELMoTokenCharactersIndexer", "logger.info", "elmo_bilm_debias.ElmoBilmDebias", "elmo_embedder_debias.ElmoEmbedderDebias.elmo_bilm.cuda", "elmo_embedder_debias.ElmoEmbedderDebias.bias.cuda", "elmo_embedder_debias.ElmoEmbedderDebias.contraction[].cuda", "elmo_embedder_debias.ElmoEmbedderDebias.contraction[].cuda"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "bias", ":", "torch", ".", "Tensor", "=", "None", ",", "\n", "num_bias", ":", "int", "=", "1", ",", "\n", "contraction", ":", "(", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", ")", "=", "None", ",", "\n", "options_file", ":", "str", "=", "DEFAULT_OPTIONS_FILE", ",", "\n", "weight_file", ":", "str", "=", "DEFAULT_WEIGHT_FILE", ",", "\n", "cuda_device", ":", "int", "=", "-", "1", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Parameters\n        ----------\n        options_file : ``str``, optional\n            A path or URL to an ELMo options file.\n        weight_file : ``str``, optional\n            A path or URL to an ELMo weights file.\n        cuda_device : ``int``, optional, (default=-1)\n            The GPU device to run on.\n        \"\"\"", "\n", "self", ".", "indexer", "=", "ELMoTokenCharactersIndexer", "(", ")", "\n", "\n", "logger", ".", "info", "(", "\"Initializing ELMo.\"", ")", "\n", "self", ".", "elmo_bilm", "=", "ElmoBilmDebias", "(", "options_file", ",", "weight_file", ")", "\n", "if", "cuda_device", ">=", "0", ":", "\n", "            ", "self", ".", "elmo_bilm", "=", "self", ".", "elmo_bilm", ".", "cuda", "(", "device", "=", "cuda_device", ")", "\n", "\n", "", "self", ".", "cuda_device", "=", "cuda_device", "\n", "\n", "self", ".", "num_bias", "=", "num_bias", "\n", "self", ".", "bias", "=", "bias", "\n", "self", ".", "contraction", "=", "contraction", "\n", "if", "cuda_device", ">=", "0", ":", "\n", "            ", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "                ", "self", ".", "bias", "=", "self", ".", "bias", ".", "cuda", "(", "device", "=", "cuda_device", ")", "\n", "", "if", "self", ".", "contraction", "is", "not", "None", ":", "\n", "                ", "self", ".", "contraction", "=", "(", "self", ".", "contraction", "[", "0", "]", ".", "cuda", "(", "device", "=", "cuda_device", ")", ",", "self", ".", "contraction", "[", "1", "]", ".", "cuda", "(", "device", "=", "cuda_device", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.elmo.elmo_embedder_debias.ElmoEmbedderDebias.batch_to_embeddings": [[69, 99], ["allennlp.modules.elmo.batch_to_ids", "elmo_embedder_debias.ElmoEmbedderDebias.elmo_bilm", "torch.cat", "character_ids.cuda.cuda.cuda", "allennlp.nn.util.remove_sentence_boundaries", "ele[].unsqueeze"], "methods", ["None"], ["", "", "", "def", "batch_to_embeddings", "(", "self", ",", "batch", ":", "List", "[", "List", "[", "str", "]", "]", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "        ", "\"\"\"\n        Parameters\n        ----------\n        batch : ``List[List[str]]``, required\n            A list of tokenized sentences.\n        Returns\n        -------\n            A tuple of tensors, the first representing activations (batch_size, 3, num_timesteps, 1024) and\n        the second a mask (batch_size, num_timesteps).\n        \"\"\"", "\n", "character_ids", "=", "batch_to_ids", "(", "batch", ")", "\n", "if", "self", ".", "cuda_device", ">=", "0", ":", "\n", "            ", "character_ids", "=", "character_ids", ".", "cuda", "(", "device", "=", "self", ".", "cuda_device", ")", "\n", "\n", "", "bilm_output", "=", "self", ".", "elmo_bilm", "(", "character_ids", ",", "self", ".", "bias", ",", "self", ".", "num_bias", ",", "self", ".", "contraction", ")", "\n", "layer_activations", "=", "bilm_output", "[", "'activations'", "]", "\n", "mask_with_bos_eos", "=", "bilm_output", "[", "'mask'", "]", "\n", "\n", "# without_bos_eos is a 3 element list of (activation, mask) tensor pairs,", "\n", "# each with size (batch_size, num_timesteps, dim and (batch_size, num_timesteps)", "\n", "# respectively.", "\n", "without_bos_eos", "=", "[", "remove_sentence_boundaries", "(", "layer", ",", "mask_with_bos_eos", ")", "\n", "for", "layer", "in", "layer_activations", "]", "\n", "# Converts a list of pairs (activation, mask) tensors to a single tensor of activations.", "\n", "activations", "=", "torch", ".", "cat", "(", "[", "ele", "[", "0", "]", ".", "unsqueeze", "(", "1", ")", "for", "ele", "in", "without_bos_eos", "]", ",", "dim", "=", "1", ")", "\n", "# The mask is the same for each ELMo vector, so just take the first.", "\n", "mask", "=", "without_bos_eos", "[", "0", "]", "[", "1", "]", "\n", "\n", "return", "activations", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.elmo.elmo_embedder_debias.ElmoEmbedderDebias.embed_sentence": [[100, 115], ["elmo_embedder_debias.ElmoEmbedderDebias.embed_batch"], "methods", ["home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.elmo.elmo_embedder_debias.ElmoEmbedderDebias.embed_batch"], ["", "def", "embed_sentence", "(", "self", ",", "sentence", ":", "List", "[", "str", "]", ")", "->", "numpy", ".", "ndarray", ":", "\n", "        ", "\"\"\"\n        Computes the ELMo embeddings for a single tokenized sentence.\n        Please note that ELMo has internal state and will give different results for the same input.\n        See the comment under the class definition.\n        Parameters\n        ----------\n        sentence : ``List[str]``, required\n            A tokenized sentence.\n        Returns\n        -------\n        A tensor containing the ELMo vectors.\n        \"\"\"", "\n", "\n", "return", "self", ".", "embed_batch", "(", "[", "sentence", "]", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.elmo.elmo_embedder_debias.ElmoEmbedderDebias.embed_batch": [[116, 146], ["elmo_embeddings.append", "elmo_embedder_debias.ElmoEmbedderDebias.batch_to_embeddings", "range", "empty_embedding", "len", "int", "mask[].sum", "elmo_embeddings.append", "elmo_embeddings.append", "empty_embedding", "embeddings[].detach().cpu().numpy", "embeddings[].detach().cpu", "embeddings[].detach"], "methods", ["home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.elmo.elmo_embedder_debias.ElmoEmbedderDebias.batch_to_embeddings"], ["", "def", "embed_batch", "(", "self", ",", "batch", ":", "List", "[", "List", "[", "str", "]", "]", ")", "->", "List", "[", "numpy", ".", "ndarray", "]", ":", "\n", "        ", "\"\"\"\n        Computes the ELMo embeddings for a batch of tokenized sentences.\n        Please note that ELMo has internal state and will give different results for the same input.\n        See the comment under the class definition.\n        Parameters\n        ----------\n        batch : ``List[List[str]]``, required\n            A list of tokenized sentences.\n        Returns\n        -------\n            A list of tensors, each representing the ELMo vectors for the input sentence at the same index.\n        \"\"\"", "\n", "elmo_embeddings", "=", "[", "]", "\n", "\n", "# Batches with only an empty sentence will throw an exception inside AllenNLP, so we handle this case", "\n", "# and return an empty embedding instead.", "\n", "if", "batch", "==", "[", "[", "]", "]", ":", "\n", "            ", "elmo_embeddings", ".", "append", "(", "empty_embedding", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "embeddings", ",", "mask", "=", "self", ".", "batch_to_embeddings", "(", "batch", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "batch", ")", ")", ":", "\n", "                ", "length", "=", "int", "(", "mask", "[", "i", ",", ":", "]", ".", "sum", "(", ")", ")", "\n", "# Slicing the embedding :0 throws an exception so we need to special case for empty sentences.", "\n", "if", "length", "==", "0", ":", "\n", "                    ", "elmo_embeddings", ".", "append", "(", "empty_embedding", "(", ")", ")", "\n", "", "else", ":", "\n", "                    ", "elmo_embeddings", ".", "append", "(", "embeddings", "[", "i", ",", ":", ",", ":", "length", ",", ":", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "", "", "", "return", "elmo_embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.elmo.elmo_embedder_debias.ElmoEmbedderDebias.embed_sentences": [[147, 166], ["allennlp.common.util.lazy_groups_of", "iter", "elmo_embedder_debias.ElmoEmbedderDebias.embed_batch"], "methods", ["home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.elmo.elmo_embedder_debias.ElmoEmbedderDebias.embed_batch"], ["", "def", "embed_sentences", "(", "self", ",", "\n", "sentences", ":", "Iterable", "[", "List", "[", "str", "]", "]", ",", "\n", "batch_size", ":", "int", "=", "DEFAULT_BATCH_SIZE", ")", "->", "Iterable", "[", "numpy", ".", "ndarray", "]", ":", "\n", "        ", "\"\"\"\n        Computes the ELMo embeddings for a iterable of sentences.\n        Please note that ELMo has internal state and will give different results for the same input.\n        See the comment under the class definition.\n        Parameters\n        ----------\n        sentences : ``Iterable[List[str]]``, required\n            An iterable of tokenized sentences.\n        batch_size : ``int``, required\n            The number of sentences ELMo should process at once.\n        Returns\n        -------\n            A list of tensors, each representing the ELMo vectors for the input sentence at the same index.\n        \"\"\"", "\n", "for", "batch", "in", "lazy_groups_of", "(", "iter", "(", "sentences", ")", ",", "batch_size", ")", ":", "\n", "            ", "yield", "from", "self", ".", "embed_batch", "(", "batch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.elmo.elmo_embedder_debias.ElmoEmbedderDebias.embed_file": [[167, 251], ["logger.info", "line.strip", "allennlp.common.checks.ConfigurationError", "sentence.split", "logger.warning", "zip", "h5py.File", "allennlp.common.tqdm.Tqdm.tqdm", "enumerate", "elmo_embedder_debias.ElmoEmbedderDebias.embed_sentences", "fout.create_dataset", "fout.create_dataset", "json.dumps", "str", "enumerate", "allennlp.common.checks.ConfigurationError", "str", "elmo_embedder_debias.ElmoEmbedderDebias.embed_sentences", "fout.keys", "h5py.special_dtype", "int", "numpy.average"], "methods", ["home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.elmo.elmo_embedder_debias.ElmoEmbedderDebias.embed_sentences", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.elmo.elmo_embedder_debias.ElmoEmbedderDebias.embed_sentences", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.holder.Holder.keys"], ["", "", "def", "embed_file", "(", "self", ",", "\n", "input_file", ":", "IO", ",", "\n", "output_file_path", ":", "str", ",", "\n", "output_format", ":", "str", "=", "\"all\"", ",", "\n", "batch_size", ":", "int", "=", "DEFAULT_BATCH_SIZE", ",", "\n", "forget_sentences", ":", "bool", "=", "False", ",", "\n", "use_sentence_keys", ":", "bool", "=", "False", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Computes ELMo embeddings from an input_file where each line contains a sentence tokenized by whitespace.\n        The ELMo embeddings are written out in HDF5 format, where each sentence embedding\n        is saved in a dataset with the line number in the original file as the key.\n        Parameters\n        ----------\n        input_file : ``IO``, required\n            A file with one tokenized sentence per line.\n        output_file_path : ``str``, required\n            A path to the output hdf5 file.\n        output_format : ``str``, optional, (default = \"all\")\n            The embeddings to output.  Must be one of \"all\", \"top\", or \"average\".\n        batch_size : ``int``, optional, (default = 64)\n            The number of sentences to process in ELMo at one time.\n        forget_sentences : ``bool``, optional, (default = False).\n            If use_sentence_keys is False, whether or not to include a string\n            serialized JSON dictionary that associates sentences with their\n            line number (its HDF5 key). The mapping is placed in the\n            \"sentence_to_index\" HDF5 key. This is useful if\n            you want to use the embeddings without keeping the original file\n            of sentences around.\n        use_sentence_keys : ``bool``, optional, (default = False).\n            Whether or not to use full sentences as keys. By default,\n            the line numbers of the input file are used as ids, which is more robust.\n        \"\"\"", "\n", "\n", "assert", "output_format", "in", "[", "\"all\"", ",", "\"top\"", ",", "\"average\"", "]", "\n", "\n", "# Tokenizes the sentences.", "\n", "sentences", "=", "[", "line", ".", "strip", "(", ")", "for", "line", "in", "input_file", "]", "\n", "\n", "blank_lines", "=", "[", "i", "for", "(", "i", ",", "line", ")", "in", "enumerate", "(", "sentences", ")", "if", "line", "==", "\"\"", "]", "\n", "if", "blank_lines", ":", "\n", "            ", "raise", "ConfigurationError", "(", "f\"Your input file contains empty lines at indexes \"", "\n", "f\"{blank_lines}. Please remove them.\"", ")", "\n", "", "split_sentences", "=", "[", "sentence", ".", "split", "(", ")", "for", "sentence", "in", "sentences", "]", "\n", "# Uses the sentence index as the key.", "\n", "\n", "if", "use_sentence_keys", ":", "\n", "            ", "logger", ".", "warning", "(", "\"Using sentences as keys can fail if sentences \"", "\n", "\"contain forward slashes or colons. Use with caution.\"", ")", "\n", "embedded_sentences", "=", "zip", "(", "sentences", ",", "self", ".", "embed_sentences", "(", "split_sentences", ",", "batch_size", ")", ")", "\n", "", "else", ":", "\n", "            ", "embedded_sentences", "=", "(", "(", "str", "(", "i", ")", ",", "x", ")", "for", "i", ",", "x", "in", "\n", "enumerate", "(", "self", ".", "embed_sentences", "(", "split_sentences", ",", "batch_size", ")", ")", ")", "\n", "\n", "", "sentence_to_index", "=", "{", "}", "\n", "logger", ".", "info", "(", "\"Processing sentences.\"", ")", "\n", "with", "h5py", ".", "File", "(", "output_file_path", ",", "'w'", ")", "as", "fout", ":", "\n", "            ", "for", "key", ",", "embeddings", "in", "Tqdm", ".", "tqdm", "(", "embedded_sentences", ")", ":", "\n", "                ", "if", "use_sentence_keys", "and", "key", "in", "fout", ".", "keys", "(", ")", ":", "\n", "                    ", "raise", "ConfigurationError", "(", "f\"Key already exists in {output_file_path}. \"", "\n", "f\"To encode duplicate sentences, do not pass \"", "\n", "f\"the --use-sentence-keys flag.\"", ")", "\n", "\n", "", "if", "not", "forget_sentences", "and", "not", "use_sentence_keys", ":", "\n", "                    ", "sentence", "=", "sentences", "[", "int", "(", "key", ")", "]", "\n", "sentence_to_index", "[", "sentence", "]", "=", "key", "\n", "\n", "", "if", "output_format", "==", "\"all\"", ":", "\n", "                    ", "output", "=", "embeddings", "\n", "", "elif", "output_format", "==", "\"top\"", ":", "\n", "                    ", "output", "=", "embeddings", "[", "-", "1", "]", "\n", "", "elif", "output_format", "==", "\"average\"", ":", "\n", "                    ", "output", "=", "numpy", ".", "average", "(", "embeddings", ",", "axis", "=", "0", ")", "\n", "\n", "", "fout", ".", "create_dataset", "(", "\n", "str", "(", "key", ")", ",", "\n", "output", ".", "shape", ",", "dtype", "=", "'float32'", ",", "\n", "data", "=", "output", "\n", ")", "\n", "", "if", "not", "forget_sentences", "and", "not", "use_sentence_keys", ":", "\n", "                ", "sentence_index_dataset", "=", "fout", ".", "create_dataset", "(", "\n", "\"sentence_to_index\"", ",", "\n", "(", "1", ",", ")", ",", "\n", "dtype", "=", "h5py", ".", "special_dtype", "(", "vlen", "=", "str", ")", ")", "\n", "sentence_index_dataset", "[", "0", "]", "=", "json", ".", "dumps", "(", "sentence_to_index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.attention.local_attention.LocalAttention.__init__": [[10, 18], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.classifier.local_classifier.LocalClassifier.__init__"], ["\t", "def", "__init__", "(", "self", ",", "opt", ",", "shared", ")", ":", "\n", "\t\t", "super", "(", "LocalAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# bookkeeping", "\n", "self", ".", "opt", "=", "opt", "\n", "self", ".", "shared", "=", "shared", "\n", "self", ".", "dropout", "=", "opt", ".", "dropout", "\n", "self", ".", "hidden_size", "=", "opt", ".", "hidden_size", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.attention.local_attention.LocalAttention.forward": [[20, 30], ["sent1.bmm", "local_attention.LocalAttention.shared.score1.transpose().contiguous", "sent2.transpose", "torch.nn.Softmax", "torch.nn.Softmax", "local_attention.LocalAttention.shared.score1.transpose"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "sent1", ",", "sent2", ")", ":", "\n", "\n", "# score tensors of size batch_l x sent_l1 x sent_l2", "\n", "\t\t", "self", ".", "shared", ".", "score1", "=", "sent1", ".", "bmm", "(", "sent2", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "self", ".", "shared", ".", "score2", "=", "self", ".", "shared", ".", "score1", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "# attention", "\n", "self", ".", "shared", ".", "att_soft1", "=", "nn", ".", "Softmax", "(", "2", ")", "(", "self", ".", "shared", ".", "score1", ")", "\n", "self", ".", "shared", ".", "att_soft2", "=", "nn", ".", "Softmax", "(", "2", ")", "(", "self", ".", "shared", ".", "score2", ")", "\n", "\n", "return", "[", "self", ".", "shared", ".", "att_soft1", ",", "self", ".", "shared", ".", "att_soft2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.attention.local_attention.LocalAttention.begin_pass": [[32, 34], ["None"], "methods", ["None"], ["", "def", "begin_pass", "(", "self", ")", ":", "\n", "\t\t", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.attention.local_attention.LocalAttention.end_pass": [[35, 37], ["None"], "methods", ["None"], ["", "def", "end_pass", "(", "self", ")", ":", "\n", "\t\t", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.stereotypes.lists.Lists.__init__": [[34, 53], ["lists.Lists.load_dir", "lists.Lists.load_dir", "lists.Lists.objects.keys", "list", "lists.Lists.load_dir", "lists.Lists.load_dir", "os.path.join", "os.path.join", "lists.Lists.all_objects.extend", "set", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.stereotypes.lists.Lists.load_dir", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.stereotypes.lists.Lists.load_dir", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.None.holder.Holder.keys", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.stereotypes.lists.Lists.load_dir", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.stereotypes.lists.Lists.load_dir"], ["def", "__init__", "(", "self", ",", "data_dir", ",", "known_words", "=", "None", ")", ":", "\n", "        ", "\"\"\"Arguments:\n\n        data_dir -- the word list directory\n\n        known_words -- a set of known words to keep. If this\n        argument is None, all words are kept.\n        \n        \"\"\"", "\n", "self", ".", "known_words", "=", "known_words", "\n", "self", ".", "people", "=", "self", ".", "load_dir", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'nouns'", ",", "'people'", ")", ")", "\n", "self", ".", "objects", "=", "self", ".", "load_dir", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'nouns'", ",", "'objects'", ")", ")", "\n", "self", ".", "all_objects", "=", "[", "]", "\n", "for", "o", "in", "self", ".", "objects", ".", "keys", "(", ")", ":", "\n", "            ", "self", ".", "all_objects", ".", "extend", "(", "self", ".", "objects", "[", "o", "]", ")", "\n", "", "self", ".", "all_objects", "=", "list", "(", "set", "(", "self", ".", "all_objects", ")", ")", "\n", "\n", "self", ".", "adjectives", "=", "self", ".", "load_dir", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'adjectives'", ")", ")", "\n", "self", ".", "verbs", "=", "self", ".", "load_dir", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'verbs'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.stereotypes.lists.Lists.load_dir": [[54, 62], ["print", "os.listdir", "os.path.join", "lists.Lists.load_list", "print", "str", "len"], "methods", ["home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.stereotypes.lists.Lists.load_list"], ["", "def", "load_dir", "(", "self", ",", "dir_name", ")", ":", "\n", "        ", "out", "=", "{", "}", "\n", "print", "(", "\"Loading \"", "+", "dir_name", ")", "\n", "for", "name", "in", "os", ".", "listdir", "(", "dir_name", ")", ":", "\n", "            ", "file_name", "=", "os", ".", "path", ".", "join", "(", "dir_name", ",", "name", ")", "\n", "out", "[", "name", "]", "=", "self", ".", "load_list", "(", "file_name", ")", "\n", "print", "(", "\"\\t\"", "+", "str", "(", "len", "(", "out", "[", "name", "]", ")", ")", "+", "\" \"", "+", "name", "+", "\" words \"", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.stereotypes.lists.Lists.load_list": [[64, 78], ["open", "list", "map.sort", "map", "set", "f.readlines", "x.strip", "out.append", "out.append"], "methods", ["None"], ["", "def", "load_list", "(", "self", ",", "file_name", ")", ":", "\n", "        ", "with", "open", "(", "file_name", ")", "as", "f", ":", "\n", "            ", "lines", "=", "list", "(", "set", "(", "f", ".", "readlines", "(", ")", ")", ")", "\n", "lines", ".", "sort", "(", ")", "\n", "lines", "=", "map", "(", "lambda", "x", ":", "x", ".", "strip", "(", ")", ",", "lines", ")", "\n", "out", "=", "[", "]", "\n", "for", "item", "in", "lines", ":", "\n", "                ", "if", "self", ".", "known_words", "==", "None", ":", "\n", "                    ", "out", ".", "append", "(", "item", ")", "\n", "", "elif", "item", "in", "self", ".", "known_words", ":", "\n", "                    ", "out", ".", "append", "(", "item", ")", "\n", "# else:", "\n", "#     print >> sys.stderr, (\"Ignoring unknown word: \" + item)", "\n", "", "", "return", "out", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.stereotypes.templates.SubjectTemplate.__init__": [[32, 36], ["templates.make_type", "obj.strip", "verb.strip"], "methods", ["home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.stereotypes.templates.make_type"], ["def", "__init__", "(", "self", ",", "name", ",", "verb", ",", "obj", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "template_type", "=", "make_type", "(", "name", ")", "\n", "self", ".", "ending", "=", "verb", ".", "strip", "(", ")", "+", "\" \"", "+", "obj", ".", "strip", "(", ")", "+", "\" .\"", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.stereotypes.templates.SubjectTemplate.apply": [[37, 39], ["templates.SubjectTemplate.ending.strip", "templates.articlize", "x.strip"], "methods", ["home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.stereotypes.templates.articlize"], ["", "def", "apply", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "articlize", "(", "x", ".", "strip", "(", ")", ",", "True", ")", "+", "\" \"", "+", "self", ".", "ending", ".", "strip", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.stereotypes.templates.ObjectTemplate.__init__": [[44, 48], ["templates.make_type"], "methods", ["home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.stereotypes.templates.make_type"], ["def", "__init__", "(", "self", ",", "name", ",", "beginning", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "template_type", "=", "make_type", "(", "name", ")", "\n", "self", ".", "beginning", "=", "beginning", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.stereotypes.templates.ObjectTemplate.apply": [[49, 51], ["templates.articlize", "templates.ObjectTemplate.beginning.strip", "x.strip"], "methods", ["home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.stereotypes.templates.articlize"], ["", "def", "apply", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "beginning", ".", "strip", "(", ")", "+", "\" \"", "+", "articlize", "(", "x", ".", "strip", "(", ")", ",", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.stereotypes.templates.Templates.__init__": [[73, 100], ["list.extend", "list", "list.sort", "list.extend", "set", "templates.Templates.add_templates", "templates.Templates.add_templates", "templates.Templates.add_templates", "templates.Templates.add_templates"], "methods", ["home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.stereotypes.templates.Templates.add_templates", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.stereotypes.templates.Templates.add_templates", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.stereotypes.templates.Templates.add_templates", "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.stereotypes.templates.Templates.add_templates"], ["def", "__init__", "(", "self", ",", "lists", ")", ":", "\n", "        ", "self", ".", "adjective_templates", "=", "[", "]", "\n", "self", ".", "noun_templates", "=", "[", "]", "\n", "commerce_verbs", "=", "lists", ".", "verbs", "[", "'commerce_verbs'", "]", "\n", "\n", "for", "v", "in", "commerce_verbs", ":", "\n", "            ", "for", "o", "in", "lists", ".", "all_objects", ":", "\n", "                ", "self", ".", "add_templates", "(", "v", ",", "o", ")", "\n", "\n", "", "", "interaction_verbs", "=", "lists", ".", "verbs", "[", "'interaction_verbs'", "]", "\n", "other_people", "=", "[", "]", "\n", "other_people", ".", "extend", "(", "lists", ".", "people", "[", "'person_hyponyms'", "]", ")", "\n", "if", "'rulers'", "in", "lists", ".", "people", ":", "\n", "            ", "other_people", ".", "extend", "(", "lists", ".", "people", "[", "'rulers'", "]", ")", "\n", "", "other_people", "=", "list", "(", "set", "(", "other_people", ")", ")", "\n", "other_people", ".", "sort", "(", ")", "\n", "for", "v", "in", "interaction_verbs", ":", "\n", "            ", "for", "o", "in", "other_people", ":", "\n", "                ", "self", ".", "add_templates", "(", "v", ",", "o", ")", "\n", "\n", "", "", "for", "v", "in", "lists", ".", "verbs", "[", "'driving_verbs'", "]", ":", "\n", "            ", "for", "o", "in", "lists", ".", "objects", "[", "'vehicles'", "]", ":", "\n", "                ", "self", ".", "add_templates", "(", "v", ",", "o", ")", "\n", "\n", "", "", "for", "v", "in", "lists", ".", "verbs", "[", "'eating_verbs'", "]", ":", "\n", "            ", "for", "o", "in", "lists", ".", "objects", "[", "'food'", "]", ":", "\n", "                ", "self", ".", "add_templates", "(", "v", ",", "o", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.stereotypes.templates.Templates.add_templates": [[101, 110], ["templates.articlize", "templates.SubjectTemplate", "templates.SubjectTemplate", "templates.Templates.noun_templates.append", "templates.Templates.adjective_templates.append"], "methods", ["home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.stereotypes.templates.articlize"], ["", "", "", "def", "add_templates", "(", "self", ",", "v", ",", "o", ")", ":", "\n", "        ", "ao", "=", "articlize", "(", "o", ",", "False", ")", "\n", "n_template", "=", "SubjectTemplate", "(", "v", "+", "\"_\"", "+", "o", ",", "\n", "v", ",", "ao", ")", "\n", "a_template", "=", "SubjectTemplate", "(", "'person_'", "+", "v", "+", "\"_\"", "+", "o", ",", "\n", "'person '", "+", "v", ",", "ao", ")", "\n", "\n", "self", ".", "noun_templates", ".", "append", "(", "[", "n_template", ",", "n_template", "]", ")", "\n", "self", ".", "adjective_templates", ".", "append", "(", "[", "a_template", ",", "a_template", "]", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.stereotypes.templates.articlize": [[4, 21], ["x[].lower", "set", "v.lower"], "function", ["None"], ["def", "articlize", "(", "x", ",", "capitalize", ")", ":", "\n", "    ", "\"\"\"A utility function to assign the correct article to a word\n\n    Arguments:\n    x -- a word\n    capitalize -- a flag to indicate whether the article should be capitalized\n    \"\"\"", "\n", "is_vowel", "=", "x", "[", "0", "]", ".", "lower", "(", ")", "in", "set", "(", "[", "'a'", ",", "'e'", ",", "'i'", ",", "'o'", ",", "'u'", "]", ")", "\n", "if", "is_vowel", ":", "\n", "        ", "v", "=", "\"An\"", "\n", "", "else", ":", "\n", "        ", "v", "=", "\"A\"", "\n", "\n", "", "if", "capitalize", ":", "\n", "        ", "return", "v", "+", "\" \"", "+", "x", "\n", "", "else", ":", "\n", "        ", "return", "v", ".", "lower", "(", ")", "+", "\" \"", "+", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.stereotypes.templates.make_type": [[22, 27], ["name.split"], "function", ["None"], ["", "", "def", "make_type", "(", "name", ")", ":", "\n", "    ", "\"\"\"\n    A utility to get a template type from its name\n    \"\"\"", "\n", "return", "'_'", ".", "join", "(", "name", ".", "split", "(", "\"_\"", ")", "[", "0", ":", "-", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.classifier.local_classifier.LocalClassifier.__init__": [[11, 35], ["super().__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.classifier.local_classifier.LocalClassifier.__init__"], ["\t", "def", "__init__", "(", "self", ",", "opt", ",", "shared", ")", ":", "\n", "\t\t", "super", "(", "LocalClassifier", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# bookkeeping", "\n", "self", ".", "opt", "=", "opt", "\n", "self", ".", "shared", "=", "shared", "\n", "\n", "self", ".", "enc_size", "=", "opt", ".", "hidden_size", "*", "2", "+", "opt", ".", "elmo_size", "*", "2", "if", "opt", ".", "use_elmo_post", "==", "1", "else", "opt", ".", "hidden_size", "*", "2", "\n", "self", ".", "g", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Dropout", "(", "opt", ".", "dropout", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "enc_size", ",", "opt", ".", "cls_hidden_size", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", "opt", ".", "dropout", ")", ",", "\n", "nn", ".", "Linear", "(", "opt", ".", "cls_hidden_size", ",", "opt", ".", "cls_hidden_size", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ")", "\n", "\n", "self", ".", "h", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Dropout", "(", "opt", ".", "dropout", ")", ",", "\n", "nn", ".", "Linear", "(", "opt", ".", "cls_hidden_size", "*", "2", ",", "opt", ".", "cls_hidden_size", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", "opt", ".", "dropout", ")", ",", "\n", "nn", ".", "Linear", "(", "opt", ".", "cls_hidden_size", ",", "opt", ".", "cls_hidden_size", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "opt", ".", "cls_hidden_size", ",", "opt", ".", "num_label", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.classifier.local_classifier.LocalClassifier.forward": [[37, 64], ["att1.bmm", "att2.bmm", "torch.cat", "torch.cat", "local_classifier.LocalClassifier.g().view", "local_classifier.LocalClassifier.g().view", "local_classifier.LocalClassifier.sum", "local_classifier.LocalClassifier.sum", "torch.cat", "local_classifier.LocalClassifier.h", "torch.nn.LogSoftmax", "local_classifier.LocalClassifier.g", "local_classifier.LocalClassifier.g", "torch.cat.view", "torch.cat.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "sent1", ",", "sent2", ",", "att1", ",", "att2", ")", ":", "\n", "\t\t", "batch_l", "=", "self", ".", "shared", ".", "batch_l", "\n", "sent_l1", "=", "self", ".", "shared", ".", "sent_l1", "\n", "sent_l2", "=", "self", ".", "shared", ".", "sent_l2", "\n", "cls_hidden_size", "=", "self", ".", "opt", ".", "cls_hidden_size", "\n", "\n", "attended2", "=", "att1", ".", "bmm", "(", "sent2", ")", "\n", "attended1", "=", "att2", ".", "bmm", "(", "sent1", ")", "\n", "\n", "cat1", "=", "torch", ".", "cat", "(", "[", "sent1", ",", "attended2", "]", ",", "2", ")", "\n", "cat2", "=", "torch", ".", "cat", "(", "[", "sent2", ",", "attended1", "]", ",", "2", ")", "\n", "\n", "phi1", "=", "self", ".", "g", "(", "cat1", ".", "view", "(", "batch_l", "*", "sent_l1", ",", "self", ".", "enc_size", ")", ")", ".", "view", "(", "batch_l", ",", "sent_l1", ",", "cls_hidden_size", ")", "\n", "phi2", "=", "self", ".", "g", "(", "cat2", ".", "view", "(", "batch_l", "*", "sent_l2", ",", "self", ".", "enc_size", ")", ")", ".", "view", "(", "batch_l", ",", "sent_l2", ",", "cls_hidden_size", ")", "\n", "\n", "flat_phi1", "=", "phi1", ".", "sum", "(", "1", ")", "\n", "flat_phi2", "=", "phi2", ".", "sum", "(", "1", ")", "\n", "\n", "phi", "=", "torch", ".", "cat", "(", "[", "flat_phi1", ",", "flat_phi2", "]", ",", "1", ")", "\n", "y_scores", "=", "self", ".", "h", "(", "phi", ")", "\n", "\n", "# record", "\n", "self", ".", "shared", ".", "y_scores", "=", "y_scores", "\n", "\n", "self", ".", "shared", ".", "out", "=", "nn", ".", "LogSoftmax", "(", "1", ")", "(", "y_scores", ")", "\n", "\n", "return", "self", ".", "shared", ".", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.classifier.local_classifier.LocalClassifier.begin_pass": [[66, 68], ["None"], "methods", ["None"], ["", "def", "begin_pass", "(", "self", ")", ":", "\n", "\t\t", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.sunipa_On-Measuring-and-Mitigating-Biased-Inferences-of-Word-Embeddings.classifier.local_classifier.LocalClassifier.end_pass": [[69, 71], ["None"], "methods", ["None"], ["", "def", "end_pass", "(", "self", ")", ":", "\n", "\t\t", "pass", "\n", "\n"]]}