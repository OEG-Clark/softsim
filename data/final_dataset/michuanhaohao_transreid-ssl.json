{"home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.clustercontrast.trainers.ClusterContrastTrainer.__init__": [[7, 11], ["object.__init__"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.softmax_loss.LabelSmoothingCrossEntropy.__init__"], ["    ", "def", "__init__", "(", "self", ",", "encoder", ",", "memory", "=", "None", ")", ":", "\n", "        ", "super", "(", "ClusterContrastTrainer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "encoder", "=", "encoder", "\n", "self", ".", "memory", "=", "memory", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.clustercontrast.trainers.ClusterContrastTrainer.train": [[12, 55], ["trainers.ClusterContrastTrainer.encoder.train", "utils.meters.AverageMeter", "utils.meters.AverageMeter", "utils.meters.AverageMeter", "time.time", "range", "data_loader.next", "utils.meters.AverageMeter.update", "trainers.ClusterContrastTrainer._parse_data", "trainers.ClusterContrastTrainer._forward", "trainers.ClusterContrastTrainer.memory", "optimizer.zero_grad", "trainers.ClusterContrastTrainer.backward", "optimizer.step", "utils.meters.AverageMeter.update", "utils.meters.AverageMeter.update", "time.time", "trainers.ClusterContrastTrainer.item", "print", "time.time", "time.time", "len"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.clustercontrast.trainers.ClusterContrastTrainer.train", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.data.__init__.IterLoader.next", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.utils.MetricLogger.update", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.clustercontrast.trainers.ClusterContrastTrainer._parse_data", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.clustercontrast.trainers.ClusterContrastTrainer._forward", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.models.cm.CM_Hard.backward", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.solver.scheduler.Scheduler.step", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.utils.MetricLogger.update", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.utils.MetricLogger.update"], ["", "def", "train", "(", "self", ",", "epoch", ",", "data_loader", ",", "optimizer", ",", "print_freq", "=", "10", ",", "train_iters", "=", "400", ")", ":", "\n", "        ", "self", ".", "encoder", ".", "train", "(", ")", "\n", "\n", "batch_time", "=", "AverageMeter", "(", ")", "\n", "data_time", "=", "AverageMeter", "(", ")", "\n", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "i", "in", "range", "(", "train_iters", ")", ":", "\n", "# load data", "\n", "            ", "inputs", "=", "data_loader", ".", "next", "(", ")", "\n", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "# process inputs", "\n", "inputs", ",", "labels", ",", "indexes", "=", "self", ".", "_parse_data", "(", "inputs", ")", "\n", "\n", "# forward", "\n", "f_out", "=", "self", ".", "_forward", "(", "inputs", ")", "\n", "# print(\"f_out shape: {}\".format(f_out.shape))", "\n", "# compute loss with the hybrid memory", "\n", "# loss = self.memory(f_out, indexes)", "\n", "loss", "=", "self", ".", "memory", "(", "f_out", ",", "labels", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ")", "\n", "\n", "# print log", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "(", "i", "+", "1", ")", "%", "print_freq", "==", "0", ":", "\n", "                ", "print", "(", "'Epoch: [{}][{}/{}]\\t'", "\n", "'Time {:.3f} ({:.3f})\\t'", "\n", "'Data {:.3f} ({:.3f})\\t'", "\n", "'Loss {:.3f} ({:.3f})'", "\n", ".", "format", "(", "epoch", ",", "i", "+", "1", ",", "len", "(", "data_loader", ")", ",", "\n", "batch_time", ".", "val", ",", "batch_time", ".", "avg", ",", "\n", "data_time", ".", "val", ",", "data_time", ".", "avg", ",", "\n", "losses", ".", "val", ",", "losses", ".", "avg", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.clustercontrast.trainers.ClusterContrastTrainer._parse_data": [[56, 59], ["imgs.cuda", "pids.cuda", "indexes.cuda"], "methods", ["None"], ["", "", "", "def", "_parse_data", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "imgs", ",", "_", ",", "pids", ",", "_", ",", "indexes", "=", "inputs", "\n", "return", "imgs", ".", "cuda", "(", ")", ",", "pids", ".", "cuda", "(", ")", ",", "indexes", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.clustercontrast.trainers.ClusterContrastTrainer._forward": [[60, 62], ["trainers.ClusterContrastTrainer.encoder"], "methods", ["None"], ["", "def", "_forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "return", "self", ".", "encoder", "(", "inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.clustercontrast.evaluators.Evaluator.__init__": [[115, 118], ["object.__init__"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.softmax_loss.LabelSmoothingCrossEntropy.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model", ")", ":", "\n", "        ", "super", "(", "Evaluator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model", "=", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.clustercontrast.evaluators.Evaluator.evaluate": [[119, 132], ["evaluators.extract_features", "evaluators.pairwise_distance", "evaluators.evaluate_all", "print", "evaluators.pairwise_distance", "evaluators.pairwise_distance", "utils.rerank.re_ranking", "evaluators.evaluate_all", "utils.rerank.re_ranking.numpy", "distmat_qq.numpy", "distmat_gg.numpy"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.clustercontrast.evaluators.extract_features", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.clustercontrast.evaluators.pairwise_distance", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.clustercontrast.evaluators.evaluate_all", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.clustercontrast.evaluators.pairwise_distance", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.clustercontrast.evaluators.pairwise_distance", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.utils.reranking.re_ranking", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.clustercontrast.evaluators.evaluate_all"], ["", "def", "evaluate", "(", "self", ",", "data_loader", ",", "query", ",", "gallery", ",", "cmc_flag", "=", "False", ",", "rerank", "=", "False", ")", ":", "\n", "        ", "features", ",", "_", "=", "extract_features", "(", "self", ".", "model", ",", "data_loader", ",", "cluster_features", "=", "False", ")", "\n", "distmat", ",", "query_features", ",", "gallery_features", "=", "pairwise_distance", "(", "features", ",", "query", ",", "gallery", ")", "\n", "results", "=", "evaluate_all", "(", "query_features", ",", "gallery_features", ",", "distmat", ",", "query", "=", "query", ",", "gallery", "=", "gallery", ",", "cmc_flag", "=", "cmc_flag", ")", "\n", "\n", "if", "(", "not", "rerank", ")", ":", "\n", "            ", "return", "results", "\n", "\n", "", "print", "(", "'Applying person re-ranking ...'", ")", "\n", "distmat_qq", ",", "_", ",", "_", "=", "pairwise_distance", "(", "features", ",", "query", ",", "query", ")", "\n", "distmat_gg", ",", "_", ",", "_", "=", "pairwise_distance", "(", "features", ",", "gallery", ",", "gallery", ")", "\n", "distmat", "=", "re_ranking", "(", "distmat", ".", "numpy", "(", ")", ",", "distmat_qq", ".", "numpy", "(", ")", ",", "distmat_gg", ".", "numpy", "(", ")", ")", "\n", "return", "evaluate_all", "(", "query_features", ",", "gallery_features", ",", "distmat", ",", "query", "=", "query", ",", "gallery", "=", "gallery", ",", "cmc_flag", "=", "cmc_flag", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.clustercontrast.evaluators.extract_features": [[22, 58], ["model.eval", "utils.meters.AverageMeter", "utils.meters.AverageMeter", "collections.OrderedDict", "collections.OrderedDict", "time.time", "torch.no_grad", "enumerate", "utils.meters.AverageMeter.update", "utils.to_torch().cuda", "model", "outputs.data.cpu.data.cpu", "zip", "utils.meters.AverageMeter.update", "time.time", "print", "time.time", "utils.to_torch", "time.time", "len"], "function", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.utils.MetricLogger.update", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.utils.MetricLogger.update", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.utils.__init__.to_torch"], ["def", "extract_features", "(", "model", ",", "data_loader", ",", "print_freq", "=", "50", ",", "cluster_features", "=", "True", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "batch_time", "=", "AverageMeter", "(", ")", "\n", "data_time", "=", "AverageMeter", "(", ")", "\n", "\n", "features", "=", "OrderedDict", "(", ")", "\n", "labels", "=", "OrderedDict", "(", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "i", ",", "(", "imgs", ",", "fnames", ",", "pids", ",", "_", ",", "_", ")", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "            ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "imgs", "=", "to_torch", "(", "imgs", ")", ".", "cuda", "(", ")", "\n", "outputs", "=", "model", "(", "imgs", ")", "\n", "#  if cluster_features:", "\n", "#  inv_idx = torch.arange(imgs.size(3) - 1, -1, -1).long().cuda()", "\n", "#  imgs_flip = imgs.index_select(3, inv_idx)", "\n", "#  outputs_flip = model(imgs_flip)", "\n", "#  outputs = (outputs + outputs_flip)/2.0", "\n", "outputs", "=", "outputs", ".", "data", ".", "cpu", "(", ")", "\n", "for", "fname", ",", "output", ",", "pid", "in", "zip", "(", "fnames", ",", "outputs", ",", "pids", ")", ":", "\n", "                ", "features", "[", "fname", "]", "=", "output", "\n", "labels", "[", "fname", "]", "=", "pid", "\n", "\n", "", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "(", "i", "+", "1", ")", "%", "print_freq", "==", "0", ":", "\n", "                ", "print", "(", "'Extract Features: [{}/{}]\\t'", "\n", "'Time {:.3f} ({:.3f})\\t'", "\n", "'Data {:.3f} ({:.3f})\\t'", "\n", ".", "format", "(", "i", "+", "1", ",", "len", "(", "data_loader", ")", ",", "\n", "batch_time", ".", "val", ",", "batch_time", ".", "avg", ",", "\n", "data_time", ".", "val", ",", "data_time", ".", "avg", ")", ")", "\n", "\n", "", "", "", "return", "features", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.clustercontrast.evaluators.pairwise_distance": [[60, 78], ["torch.cat", "torch.cat", "x.view.view", "y.view.view", "dist_m.addmm_", "len", "torch.cat", "x.view.view", "x.view.size", "y.view.size", "torch.pow().sum().expand", "torch.pow().sum().expand().t", "y.view.t", "x.view.numpy", "y.view.numpy", "list", "torch.pow().sum", "dist_m.expand", "features[].unsqueeze", "features[].unsqueeze", "features.values", "torch.mm", "torch.pow().sum", "torch.pow().sum().expand", "torch.pow", "x.view.t", "torch.pow", "torch.pow().sum", "torch.pow"], "function", ["None"], ["", "def", "pairwise_distance", "(", "features", ",", "query", "=", "None", ",", "gallery", "=", "None", ")", ":", "\n", "    ", "if", "query", "is", "None", "and", "gallery", "is", "None", ":", "\n", "        ", "n", "=", "len", "(", "features", ")", "\n", "x", "=", "torch", ".", "cat", "(", "list", "(", "features", ".", "values", "(", ")", ")", ")", "\n", "x", "=", "x", ".", "view", "(", "n", ",", "-", "1", ")", "\n", "dist_m", "=", "torch", ".", "pow", "(", "x", ",", "2", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "*", "2", "\n", "dist_m", "=", "dist_m", ".", "expand", "(", "n", ",", "n", ")", "-", "2", "*", "torch", ".", "mm", "(", "x", ",", "x", ".", "t", "(", ")", ")", "\n", "return", "dist_m", "\n", "\n", "", "x", "=", "torch", ".", "cat", "(", "[", "features", "[", "f", "]", ".", "unsqueeze", "(", "0", ")", "for", "f", ",", "_", ",", "_", "in", "query", "]", ",", "0", ")", "\n", "y", "=", "torch", ".", "cat", "(", "[", "features", "[", "f", "]", ".", "unsqueeze", "(", "0", ")", "for", "f", ",", "_", ",", "_", "in", "gallery", "]", ",", "0", ")", "\n", "m", ",", "n", "=", "x", ".", "size", "(", "0", ")", ",", "y", ".", "size", "(", "0", ")", "\n", "x", "=", "x", ".", "view", "(", "m", ",", "-", "1", ")", "\n", "y", "=", "y", ".", "view", "(", "n", ",", "-", "1", ")", "\n", "dist_m", "=", "torch", ".", "pow", "(", "x", ",", "2", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "expand", "(", "m", ",", "n", ")", "+", "torch", ".", "pow", "(", "y", ",", "2", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "expand", "(", "n", ",", "m", ")", ".", "t", "(", ")", "\n", "dist_m", ".", "addmm_", "(", "1", ",", "-", "2", ",", "x", ",", "y", ".", "t", "(", ")", ")", "\n", "return", "dist_m", ",", "x", ".", "numpy", "(", ")", ",", "y", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.clustercontrast.evaluators.evaluate_all": [[80, 112], ["evaluation_metrics.mean_ap", "print", "print", "dict", "evaluation_metrics.cmc", "print", "cmc_configs.items"], "function", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.evaluation_metrics.ranking.mean_ap", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.evaluation_metrics.ranking.cmc"], ["", "def", "evaluate_all", "(", "query_features", ",", "gallery_features", ",", "distmat", ",", "query", "=", "None", ",", "gallery", "=", "None", ",", "\n", "query_ids", "=", "None", ",", "gallery_ids", "=", "None", ",", "\n", "query_cams", "=", "None", ",", "gallery_cams", "=", "None", ",", "\n", "cmc_topk", "=", "(", "1", ",", "5", ",", "10", ")", ",", "cmc_flag", "=", "False", ")", ":", "\n", "    ", "if", "query", "is", "not", "None", "and", "gallery", "is", "not", "None", ":", "\n", "        ", "query_ids", "=", "[", "pid", "for", "_", ",", "pid", ",", "_", "in", "query", "]", "\n", "gallery_ids", "=", "[", "pid", "for", "_", ",", "pid", ",", "_", "in", "gallery", "]", "\n", "query_cams", "=", "[", "cam", "for", "_", ",", "_", ",", "cam", "in", "query", "]", "\n", "gallery_cams", "=", "[", "cam", "for", "_", ",", "_", ",", "cam", "in", "gallery", "]", "\n", "", "else", ":", "\n", "        ", "assert", "(", "query_ids", "is", "not", "None", "and", "gallery_ids", "is", "not", "None", "\n", "and", "query_cams", "is", "not", "None", "and", "gallery_cams", "is", "not", "None", ")", "\n", "\n", "# Compute mean AP", "\n", "", "mAP", "=", "mean_ap", "(", "distmat", ",", "query_ids", ",", "gallery_ids", ",", "query_cams", ",", "gallery_cams", ")", "\n", "print", "(", "'Mean AP: {:4.1%}'", ".", "format", "(", "mAP", ")", ")", "\n", "\n", "if", "(", "not", "cmc_flag", ")", ":", "\n", "        ", "return", "mAP", "\n", "\n", "", "cmc_configs", "=", "{", "\n", "'market1501'", ":", "dict", "(", "separate_camera_set", "=", "False", ",", "\n", "single_gallery_shot", "=", "False", ",", "\n", "first_match_break", "=", "True", ")", ",", "}", "\n", "cmc_scores", "=", "{", "name", ":", "cmc", "(", "distmat", ",", "query_ids", ",", "gallery_ids", ",", "\n", "query_cams", ",", "gallery_cams", ",", "**", "params", ")", "\n", "for", "name", ",", "params", "in", "cmc_configs", ".", "items", "(", ")", "}", "\n", "\n", "print", "(", "'CMC Scores:'", ")", "\n", "for", "k", "in", "cmc_topk", ":", "\n", "        ", "print", "(", "'  top-{:<4}{:12.1%}'", ".", "format", "(", "k", ",", "cmc_scores", "[", "'market1501'", "]", "[", "k", "-", "1", "]", ")", ")", "\n", "", "return", "cmc_scores", "[", "'market1501'", "]", ",", "mAP", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.utils.faiss_rerank.k_reciprocal_neigh": [[54, 59], ["numpy.where"], "function", ["None"], ["", "elif", "(", "search_option", "==", "2", ")", ":", "\n", "# GPU", "\n", "        ", "index", "=", "index_init_gpu", "(", "ngpus", ",", "target_features", ".", "size", "(", "-", "1", ")", ")", "\n", "index", ".", "add", "(", "target_features", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "_", ",", "initial_rank", "=", "index", ".", "search", "(", "target_features", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "k1", ")", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.utils.faiss_rerank.compute_jaccard_distance": [[60, 154], ["time.time", "faiss.get_num_gpus", "target_features.size", "range", "numpy.zeros", "range", "range", "numpy.zeros", "range", "print", "faiss.StandardGpuResources", "faiss.StandardGpuResources.setDefaultNullStreamAllDevices", "faiss_utils.search_raw_array_pytorch", "initial_rank.cpu().numpy.cpu().numpy", "nn_k1.append", "nn_k1_half.append", "numpy.unique", "numpy.zeros_like", "range", "invIndex.append", "numpy.zeros", "range", "print", "faiss.StandardGpuResources", "faiss.GpuIndexFlatL2", "faiss_utils.index_init_cpu.add", "faiss_utils.search_index_pytorch", "faiss.StandardGpuResources.syncDefaultStreamCurrentDevice", "initial_rank.cpu().numpy.cpu().numpy", "faiss_rerank.k_reciprocal_neigh", "faiss_rerank.k_reciprocal_neigh", "torch.softmax().view().cpu().numpy().astype", "torch.softmax().view().cpu().numpy", "numpy.mean", "numpy.where", "len", "initial_rank.cpu().numpy.cpu", "target_features.size", "target_features.cpu().numpy", "faiss_utils.index_init_gpu", "faiss_utils.index_init_cpu.add", "faiss_utils.index_init_cpu.search", "faiss_utils.index_init_cpu", "faiss_utils.index_init_cpu.add", "faiss_utils.index_init_cpu.search", "int", "len", "numpy.append", "torch.mm", "torch.mm", "numpy.where", "numpy.minimum", "initial_rank.cpu().numpy.cpu", "target_features.size", "target_features.cpu().numpy", "target_features.cpu().numpy", "target_features.size", "target_features.cpu().numpy", "target_features.cpu().numpy", "numpy.around", "numpy.intersect1d", "len", "target_features[].unsqueeze().contiguous", "target_features[].t", "torch.softmax().view().cpu().numpy", "torch.softmax().view().cpu", "time.time", "target_features.cpu", "target_features.cpu", "target_features.cpu", "target_features.cpu", "target_features.cpu", "target_features[].unsqueeze", "torch.softmax().view().cpu", "torch.softmax().view", "torch.softmax().view", "torch.softmax", "torch.softmax"], "function", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.utils.faiss_utils.search_raw_array_pytorch", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.utils.faiss_utils.search_index_pytorch", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.utils.faiss_rerank.k_reciprocal_neigh", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.utils.faiss_rerank.k_reciprocal_neigh", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.utils.faiss_utils.index_init_gpu", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.utils.faiss_utils.index_init_cpu"], ["# CPU", "\n", "        ", "index", "=", "index_init_cpu", "(", "target_features", ".", "size", "(", "-", "1", ")", ")", "\n", "index", ".", "add", "(", "target_features", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "_", ",", "initial_rank", "=", "index", ".", "search", "(", "target_features", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "k1", ")", "\n", "\n", "\n", "", "nn_k1", "=", "[", "]", "\n", "nn_k1_half", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "        ", "nn_k1", ".", "append", "(", "k_reciprocal_neigh", "(", "initial_rank", ",", "i", ",", "k1", ")", ")", "\n", "nn_k1_half", ".", "append", "(", "k_reciprocal_neigh", "(", "initial_rank", ",", "i", ",", "int", "(", "np", ".", "around", "(", "k1", "/", "2", ")", ")", ")", ")", "\n", "\n", "", "V", "=", "np", ".", "zeros", "(", "(", "N", ",", "N", ")", ",", "dtype", "=", "mat_type", ")", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "        ", "k_reciprocal_index", "=", "nn_k1", "[", "i", "]", "\n", "k_reciprocal_expansion_index", "=", "k_reciprocal_index", "\n", "for", "candidate", "in", "k_reciprocal_index", ":", "\n", "            ", "candidate_k_reciprocal_index", "=", "nn_k1_half", "[", "candidate", "]", "\n", "if", "(", "len", "(", "np", ".", "intersect1d", "(", "candidate_k_reciprocal_index", ",", "k_reciprocal_index", ")", ")", ">", "2", "/", "3", "*", "len", "(", "candidate_k_reciprocal_index", ")", ")", ":", "\n", "                ", "k_reciprocal_expansion_index", "=", "np", ".", "append", "(", "k_reciprocal_expansion_index", ",", "candidate_k_reciprocal_index", ")", "\n", "\n", "", "", "k_reciprocal_expansion_index", "=", "np", ".", "unique", "(", "k_reciprocal_expansion_index", ")", "## element-wise unique", "\n", "dist", "=", "2", "-", "2", "*", "torch", ".", "mm", "(", "target_features", "[", "i", "]", ".", "unsqueeze", "(", "0", ")", ".", "contiguous", "(", ")", ",", "target_features", "[", "k_reciprocal_expansion_index", "]", ".", "t", "(", ")", ")", "\n", "if", "use_float16", ":", "\n", "            ", "V", "[", "i", ",", "k_reciprocal_expansion_index", "]", "=", "F", ".", "softmax", "(", "-", "dist", ",", "dim", "=", "1", ")", ".", "view", "(", "-", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "mat_type", ")", "\n", "", "else", ":", "\n", "            ", "V", "[", "i", ",", "k_reciprocal_expansion_index", "]", "=", "F", ".", "softmax", "(", "-", "dist", ",", "dim", "=", "1", ")", ".", "view", "(", "-", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "", "del", "nn_k1", ",", "nn_k1_half", "\n", "\n", "if", "k2", "!=", "1", ":", "\n", "        ", "V_qe", "=", "np", ".", "zeros_like", "(", "V", ",", "dtype", "=", "mat_type", ")", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "            ", "V_qe", "[", "i", ",", ":", "]", "=", "np", ".", "mean", "(", "V", "[", "initial_rank", "[", "i", ",", ":", "k2", "]", ",", ":", "]", ",", "axis", "=", "0", ")", "\n", "", "V", "=", "V_qe", "\n", "del", "V_qe", "\n", "\n", "", "del", "initial_rank", "\n", "\n", "invIndex", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "        ", "invIndex", ".", "append", "(", "np", ".", "where", "(", "V", "[", ":", ",", "i", "]", "!=", "0", ")", "[", "0", "]", ")", "#len(invIndex)=all_num", "\n", "\n", "", "jaccard_dist", "=", "np", ".", "zeros", "(", "(", "N", ",", "N", ")", ",", "dtype", "=", "mat_type", ")", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "        ", "temp_min", "=", "np", ".", "zeros", "(", "(", "1", ",", "N", ")", ",", "dtype", "=", "mat_type", ")", "\n", "# temp_max = np.zeros((1,N), dtype=mat_type)", "\n", "indNonZero", "=", "np", ".", "where", "(", "V", "[", "i", ",", ":", "]", "!=", "0", ")", "[", "0", "]", "\n", "indImages", "=", "[", "]", "\n", "indImages", "=", "[", "invIndex", "[", "ind", "]", "for", "ind", "in", "indNonZero", "]", "\n", "for", "j", "in", "range", "(", "len", "(", "indNonZero", ")", ")", ":", "\n", "            ", "temp_min", "[", "0", ",", "indImages", "[", "j", "]", "]", "=", "temp_min", "[", "0", ",", "indImages", "[", "j", "]", "]", "+", "np", ".", "minimum", "(", "V", "[", "i", ",", "indNonZero", "[", "j", "]", "]", ",", "V", "[", "indImages", "[", "j", "]", ",", "indNonZero", "[", "j", "]", "]", ")", "\n", "# temp_max[0,indImages[j]] = temp_max[0,indImages[j]]+np.maximum(V[i,indNonZero[j]],V[indImages[j],indNonZero[j]])", "\n", "\n", "", "jaccard_dist", "[", "i", "]", "=", "1", "-", "temp_min", "/", "(", "2", "-", "temp_min", ")", "\n", "# jaccard_dist[i] = 1-temp_min/(temp_max+1e-6)", "\n", "\n", "", "del", "invIndex", ",", "V", "\n", "\n", "pos_bool", "=", "(", "jaccard_dist", "<", "0", ")", "\n", "jaccard_dist", "[", "pos_bool", "]", "=", "0.0", "\n", "if", "print_flag", ":", "\n", "        ", "print", "(", "\"Jaccard distance computing time cost: {}\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "end", ")", ")", "\n", "\n", "", "return", "jaccard_dist", "\n", "", ""]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.utils.rerank.re_ranking": [[31, 98], ["numpy.concatenate", "numpy.power().astype", "numpy.transpose", "numpy.zeros_like().astype", "numpy.argsort().astype", "range", "range", "numpy.zeros_like", "range", "range", "numpy.unique", "numpy.exp", "numpy.zeros_like", "range", "invIndex.append", "numpy.zeros", "range", "numpy.concatenate", "numpy.concatenate", "numpy.power", "numpy.max", "numpy.zeros_like", "numpy.argsort", "numpy.where", "len", "numpy.sum", "numpy.mean", "numpy.where", "len", "numpy.where", "len", "numpy.append", "numpy.where", "numpy.minimum", "numpy.intersect1d", "len", "int", "int", "numpy.around", "numpy.around"], "function", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.utils.SmoothedValue.max"], ["def", "re_ranking", "(", "q_g_dist", ",", "q_q_dist", ",", "g_g_dist", ",", "k1", "=", "20", ",", "k2", "=", "6", ",", "lambda_value", "=", "0.3", ")", ":", "\n", "\n", "# The following naming, e.g. gallery_num, is different from outer scope.", "\n", "# Don't care about it.", "\n", "\n", "    ", "original_dist", "=", "np", ".", "concatenate", "(", "\n", "[", "np", ".", "concatenate", "(", "[", "q_q_dist", ",", "q_g_dist", "]", ",", "axis", "=", "1", ")", ",", "\n", "np", ".", "concatenate", "(", "[", "q_g_dist", ".", "T", ",", "g_g_dist", "]", ",", "axis", "=", "1", ")", "]", ",", "\n", "axis", "=", "0", ")", "\n", "original_dist", "=", "np", ".", "power", "(", "original_dist", ",", "2", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "original_dist", "=", "np", ".", "transpose", "(", "1.", "*", "original_dist", "/", "np", ".", "max", "(", "original_dist", ",", "axis", "=", "0", ")", ")", "\n", "V", "=", "np", ".", "zeros_like", "(", "original_dist", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "initial_rank", "=", "np", ".", "argsort", "(", "original_dist", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n", "query_num", "=", "q_g_dist", ".", "shape", "[", "0", "]", "\n", "gallery_num", "=", "q_g_dist", ".", "shape", "[", "0", "]", "+", "q_g_dist", ".", "shape", "[", "1", "]", "\n", "all_num", "=", "gallery_num", "\n", "\n", "for", "i", "in", "range", "(", "all_num", ")", ":", "\n", "# k-reciprocal neighbors", "\n", "        ", "forward_k_neigh_index", "=", "initial_rank", "[", "i", ",", ":", "k1", "+", "1", "]", "\n", "backward_k_neigh_index", "=", "initial_rank", "[", "forward_k_neigh_index", ",", ":", "k1", "+", "1", "]", "\n", "fi", "=", "np", ".", "where", "(", "backward_k_neigh_index", "==", "i", ")", "[", "0", "]", "\n", "k_reciprocal_index", "=", "forward_k_neigh_index", "[", "fi", "]", "\n", "k_reciprocal_expansion_index", "=", "k_reciprocal_index", "\n", "for", "j", "in", "range", "(", "len", "(", "k_reciprocal_index", ")", ")", ":", "\n", "            ", "candidate", "=", "k_reciprocal_index", "[", "j", "]", "\n", "candidate_forward_k_neigh_index", "=", "initial_rank", "[", "candidate", ",", ":", "int", "(", "np", ".", "around", "(", "k1", "/", "2.", ")", ")", "+", "1", "]", "\n", "candidate_backward_k_neigh_index", "=", "initial_rank", "[", "candidate_forward_k_neigh_index", ",", ":", "int", "(", "np", ".", "around", "(", "k1", "/", "2.", ")", ")", "+", "1", "]", "\n", "fi_candidate", "=", "np", ".", "where", "(", "candidate_backward_k_neigh_index", "==", "candidate", ")", "[", "0", "]", "\n", "candidate_k_reciprocal_index", "=", "candidate_forward_k_neigh_index", "[", "fi_candidate", "]", "\n", "if", "len", "(", "np", ".", "intersect1d", "(", "candidate_k_reciprocal_index", ",", "k_reciprocal_index", ")", ")", ">", "2.", "/", "3", "*", "len", "(", "candidate_k_reciprocal_index", ")", ":", "\n", "                ", "k_reciprocal_expansion_index", "=", "np", ".", "append", "(", "k_reciprocal_expansion_index", ",", "candidate_k_reciprocal_index", ")", "\n", "\n", "", "", "k_reciprocal_expansion_index", "=", "np", ".", "unique", "(", "k_reciprocal_expansion_index", ")", "\n", "weight", "=", "np", ".", "exp", "(", "-", "original_dist", "[", "i", ",", "k_reciprocal_expansion_index", "]", ")", "\n", "V", "[", "i", ",", "k_reciprocal_expansion_index", "]", "=", "1.", "*", "weight", "/", "np", ".", "sum", "(", "weight", ")", "\n", "", "original_dist", "=", "original_dist", "[", ":", "query_num", ",", "]", "\n", "if", "k2", "!=", "1", ":", "\n", "        ", "V_qe", "=", "np", ".", "zeros_like", "(", "V", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "i", "in", "range", "(", "all_num", ")", ":", "\n", "            ", "V_qe", "[", "i", ",", ":", "]", "=", "np", ".", "mean", "(", "V", "[", "initial_rank", "[", "i", ",", ":", "k2", "]", ",", ":", "]", ",", "axis", "=", "0", ")", "\n", "", "V", "=", "V_qe", "\n", "del", "V_qe", "\n", "", "del", "initial_rank", "\n", "invIndex", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "gallery_num", ")", ":", "\n", "        ", "invIndex", ".", "append", "(", "np", ".", "where", "(", "V", "[", ":", ",", "i", "]", "!=", "0", ")", "[", "0", "]", ")", "\n", "\n", "", "jaccard_dist", "=", "np", ".", "zeros_like", "(", "original_dist", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "\n", "for", "i", "in", "range", "(", "query_num", ")", ":", "\n", "        ", "temp_min", "=", "np", ".", "zeros", "(", "shape", "=", "[", "1", ",", "gallery_num", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "indNonZero", "=", "np", ".", "where", "(", "V", "[", "i", ",", ":", "]", "!=", "0", ")", "[", "0", "]", "\n", "indImages", "=", "[", "]", "\n", "indImages", "=", "[", "invIndex", "[", "ind", "]", "for", "ind", "in", "indNonZero", "]", "\n", "for", "j", "in", "range", "(", "len", "(", "indNonZero", ")", ")", ":", "\n", "            ", "temp_min", "[", "0", ",", "indImages", "[", "j", "]", "]", "=", "temp_min", "[", "0", ",", "indImages", "[", "j", "]", "]", "+", "np", ".", "minimum", "(", "V", "[", "i", ",", "indNonZero", "[", "j", "]", "]", ",", "V", "[", "indImages", "[", "j", "]", ",", "indNonZero", "[", "j", "]", "]", ")", "\n", "", "jaccard_dist", "[", "i", "]", "=", "1", "-", "temp_min", "/", "(", "2.", "-", "temp_min", ")", "\n", "\n", "", "final_dist", "=", "jaccard_dist", "*", "(", "1", "-", "lambda_value", ")", "+", "original_dist", "*", "lambda_value", "\n", "del", "original_dist", "\n", "del", "V", "\n", "del", "jaccard_dist", "\n", "final_dist", "=", "final_dist", "[", ":", "query_num", ",", "query_num", ":", "]", "\n", "return", "final_dist", "\n", "", ""]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.utils.logging.Logger.__init__": [[9, 15], ["osutils.mkdir_if_missing", "open", "os.path.dirname"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.utils.iotools.mkdir_if_missing"], ["    ", "def", "__init__", "(", "self", ",", "fpath", "=", "None", ")", ":", "\n", "        ", "self", ".", "console", "=", "sys", ".", "stdout", "\n", "self", ".", "file", "=", "None", "\n", "if", "fpath", "is", "not", "None", ":", "\n", "            ", "mkdir_if_missing", "(", "os", ".", "path", ".", "dirname", "(", "fpath", ")", ")", "\n", "self", ".", "file", "=", "open", "(", "fpath", ",", "'w'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.utils.logging.Logger.__del__": [[16, 18], ["logging.Logger.close"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.utils.logging.Logger.close"], ["", "", "def", "__del__", "(", "self", ")", ":", "\n", "        ", "self", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.utils.logging.Logger.__enter__": [[19, 21], ["None"], "methods", ["None"], ["", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.utils.logging.Logger.__exit__": [[22, 24], ["logging.Logger.close"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.utils.logging.Logger.close"], ["", "def", "__exit__", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "self", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.utils.logging.Logger.write": [[25, 29], ["logging.Logger.console.write", "logging.Logger.file.write"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.utils.logging.Logger.write", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.utils.logging.Logger.write"], ["", "def", "write", "(", "self", ",", "msg", ")", ":", "\n", "        ", "self", ".", "console", ".", "write", "(", "msg", ")", "\n", "if", "self", ".", "file", "is", "not", "None", ":", "\n", "            ", "self", ".", "file", ".", "write", "(", "msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.utils.logging.Logger.flush": [[30, 35], ["logging.Logger.console.flush", "logging.Logger.file.flush", "os.fsync", "logging.Logger.file.fileno"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.utils.logging.Logger.flush", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.utils.logging.Logger.flush"], ["", "", "def", "flush", "(", "self", ")", ":", "\n", "        ", "self", ".", "console", ".", "flush", "(", ")", "\n", "if", "self", ".", "file", "is", "not", "None", ":", "\n", "            ", "self", ".", "file", ".", "flush", "(", ")", "\n", "os", ".", "fsync", "(", "self", ".", "file", ".", "fileno", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.utils.logging.Logger.close": [[36, 40], ["logging.Logger.console.close", "logging.Logger.file.close"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.utils.logging.Logger.close", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.utils.logging.Logger.close"], ["", "", "def", "close", "(", "self", ")", ":", "\n", "        ", "self", ".", "console", ".", "close", "(", ")", "\n", "if", "self", ".", "file", "is", "not", "None", ":", "\n", "            ", "self", ".", "file", ".", "close", "(", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.utils.faiss_utils.swig_ptr_from_FloatTensor": [[6, 11], ["x.is_contiguous", "faiss.cast_integer_to_float_ptr", "x.storage().data_ptr", "x.storage_offset", "x.storage"], "function", ["None"], ["def", "swig_ptr_from_FloatTensor", "(", "x", ")", ":", "\n", "    ", "assert", "x", ".", "is_contiguous", "(", ")", "\n", "assert", "x", ".", "dtype", "==", "torch", ".", "float32", "\n", "return", "faiss", ".", "cast_integer_to_float_ptr", "(", "\n", "x", ".", "storage", "(", ")", ".", "data_ptr", "(", ")", "+", "x", ".", "storage_offset", "(", ")", "*", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.utils.faiss_utils.swig_ptr_from_LongTensor": [[12, 17], ["x.is_contiguous", "faiss.cast_integer_to_long_ptr", "x.storage().data_ptr", "x.storage_offset", "x.storage"], "function", ["None"], ["", "def", "swig_ptr_from_LongTensor", "(", "x", ")", ":", "\n", "    ", "assert", "x", ".", "is_contiguous", "(", ")", "\n", "assert", "x", ".", "dtype", "==", "torch", ".", "int64", ",", "'dtype=%s'", "%", "x", ".", "dtype", "\n", "\n", "return", "faiss", ".", "cast_integer_to_idx_t_ptr", "(", "\n", "x", ".", "storage", "(", ")", ".", "data_ptr", "(", ")", "+", "x", ".", "storage_offset", "(", ")", "*", "8", ")", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.utils.faiss_utils.search_index_pytorch": [[18, 42], ["x.is_contiguous", "x.size", "torch.cuda.synchronize", "faiss_utils.swig_ptr_from_FloatTensor", "faiss_utils.swig_ptr_from_LongTensor", "faiss_utils.swig_ptr_from_FloatTensor", "index.search_c", "torch.cuda.synchronize", "torch.empty", "torch.empty", "torch.empty.size", "torch.empty.size"], "function", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.utils.faiss_utils.swig_ptr_from_FloatTensor", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.utils.faiss_utils.swig_ptr_from_LongTensor", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.utils.faiss_utils.swig_ptr_from_FloatTensor"], ["\n", "", "def", "search_index_pytorch", "(", "index", ",", "x", ",", "k", ",", "D", "=", "None", ",", "I", "=", "None", ")", ":", "\n", "    ", "\"\"\"call the search function of an index with pytorch tensor I/O (CPU\n    and GPU supported)\"\"\"", "\n", "assert", "x", ".", "is_contiguous", "(", ")", "\n", "n", ",", "d", "=", "x", ".", "size", "(", ")", "\n", "assert", "d", "==", "index", ".", "d", "\n", "\n", "if", "D", "is", "None", ":", "\n", "        ", "D", "=", "torch", ".", "empty", "(", "(", "n", ",", "k", ")", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "x", ".", "device", ")", "\n", "", "else", ":", "\n", "        ", "assert", "D", ".", "size", "(", ")", "==", "(", "n", ",", "k", ")", "\n", "\n", "", "if", "I", "is", "None", ":", "\n", "        ", "I", "=", "torch", ".", "empty", "(", "(", "n", ",", "k", ")", ",", "dtype", "=", "torch", ".", "int64", ",", "device", "=", "x", ".", "device", ")", "\n", "", "else", ":", "\n", "        ", "assert", "I", ".", "size", "(", ")", "==", "(", "n", ",", "k", ")", "\n", "", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "xptr", "=", "swig_ptr_from_FloatTensor", "(", "x", ")", "\n", "Iptr", "=", "swig_ptr_from_LongTensor", "(", "I", ")", "\n", "Dptr", "=", "swig_ptr_from_FloatTensor", "(", "D", ")", "\n", "index", ".", "search_c", "(", "n", ",", "xptr", ",", "\n", "k", ",", "Dptr", ",", "Iptr", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "return", "D", ",", "I", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.utils.faiss_utils.search_raw_array_pytorch": [[43, 90], ["xq.t.size", "xq.t.is_contiguous", "faiss_utils.swig_ptr_from_FloatTensor", "xb.t.size", "xb.t.is_contiguous", "faiss_utils.swig_ptr_from_FloatTensor", "faiss_utils.swig_ptr_from_FloatTensor", "faiss_utils.swig_ptr_from_LongTensor", "faiss.bruteForceKnn", "xq.t.t().is_contiguous", "xb.t.t().is_contiguous", "torch.empty", "torch.empty", "xq.t.t", "TypeError", "xb.t.t", "TypeError", "xq.t.t", "xb.t.t"], "function", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.utils.faiss_utils.swig_ptr_from_FloatTensor", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.utils.faiss_utils.swig_ptr_from_FloatTensor", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.utils.faiss_utils.swig_ptr_from_FloatTensor", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.utils.faiss_utils.swig_ptr_from_LongTensor"], ["\n", "", "def", "search_raw_array_pytorch", "(", "res", ",", "xb", ",", "xq", ",", "k", ",", "D", "=", "None", ",", "I", "=", "None", ",", "\n", "metric", "=", "faiss", ".", "METRIC_L2", ")", ":", "\n", "    ", "assert", "xb", ".", "device", "==", "xq", ".", "device", "\n", "\n", "nq", ",", "d", "=", "xq", ".", "size", "(", ")", "\n", "if", "xq", ".", "is_contiguous", "(", ")", ":", "\n", "        ", "xq_row_major", "=", "True", "\n", "", "elif", "xq", ".", "t", "(", ")", ".", "is_contiguous", "(", ")", ":", "\n", "        ", "xq", "=", "xq", ".", "t", "(", ")", "# I initially wrote xq:t(), Lua is still haunting me :-)", "\n", "xq_row_major", "=", "False", "\n", "", "else", ":", "\n", "        ", "raise", "TypeError", "(", "'matrix should be row or column-major'", ")", "\n", "\n", "", "xq_ptr", "=", "swig_ptr_from_FloatTensor", "(", "xq", ")", "\n", "\n", "nb", ",", "d2", "=", "xb", ".", "size", "(", ")", "\n", "assert", "d2", "==", "d", "\n", "if", "xb", ".", "is_contiguous", "(", ")", ":", "\n", "        ", "xb_row_major", "=", "True", "\n", "", "elif", "xb", ".", "t", "(", ")", ".", "is_contiguous", "(", ")", ":", "\n", "        ", "xb", "=", "xb", ".", "t", "(", ")", "\n", "xb_row_major", "=", "False", "\n", "", "else", ":", "\n", "        ", "raise", "TypeError", "(", "'matrix should be row or column-major'", ")", "\n", "", "xb_ptr", "=", "swig_ptr_from_FloatTensor", "(", "xb", ")", "\n", "\n", "if", "D", "is", "None", ":", "\n", "        ", "D", "=", "torch", ".", "empty", "(", "nq", ",", "k", ",", "device", "=", "xb", ".", "device", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "", "else", ":", "\n", "        ", "assert", "D", ".", "shape", "==", "(", "nq", ",", "k", ")", "\n", "assert", "D", ".", "device", "==", "xb", ".", "device", "\n", "\n", "", "if", "I", "is", "None", ":", "\n", "        ", "I", "=", "torch", ".", "empty", "(", "nq", ",", "k", ",", "device", "=", "xb", ".", "device", ",", "dtype", "=", "torch", ".", "int64", ")", "\n", "", "else", ":", "\n", "        ", "assert", "I", ".", "shape", "==", "(", "nq", ",", "k", ")", "\n", "assert", "I", ".", "device", "==", "xb", ".", "device", "\n", "\n", "", "D_ptr", "=", "swig_ptr_from_FloatTensor", "(", "D", ")", "\n", "I_ptr", "=", "swig_ptr_from_LongTensor", "(", "I", ")", "\n", "\n", "faiss", ".", "bruteForceKnn", "(", "res", ",", "metric", ",", "\n", "xb_ptr", ",", "xb_row_major", ",", "nb", ",", "\n", "xq_ptr", ",", "xq_row_major", ",", "nq", ",", "\n", "d", ",", "k", ",", "D_ptr", ",", "I_ptr", ")", "\n", "\n", "return", "D", ",", "I", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.utils.faiss_utils.index_init_gpu": [[91, 106], ["range", "faiss.IndexShards", "faiss.IndexShards.reset", "faiss.GpuIndexFlatConfig", "flat_config.append", "faiss.StandardGpuResources", "faiss.GpuIndexFlatL2", "faiss.IndexShards.add_shard", "range", "range"], "function", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.utils.meter.AverageMeter.reset"], ["\n", "", "def", "index_init_gpu", "(", "ngpus", ",", "feat_dim", ")", ":", "\n", "    ", "flat_config", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "ngpus", ")", ":", "\n", "        ", "cfg", "=", "faiss", ".", "GpuIndexFlatConfig", "(", ")", "\n", "cfg", ".", "useFloat16", "=", "False", "\n", "cfg", ".", "device", "=", "i", "\n", "flat_config", ".", "append", "(", "cfg", ")", "\n", "\n", "", "res", "=", "[", "faiss", ".", "StandardGpuResources", "(", ")", "for", "i", "in", "range", "(", "ngpus", ")", "]", "\n", "indexes", "=", "[", "faiss", ".", "GpuIndexFlatL2", "(", "res", "[", "i", "]", ",", "feat_dim", ",", "flat_config", "[", "i", "]", ")", "for", "i", "in", "range", "(", "ngpus", ")", "]", "\n", "index", "=", "faiss", ".", "IndexShards", "(", "feat_dim", ")", "\n", "for", "sub_index", "in", "indexes", ":", "\n", "        ", "index", ".", "add_shard", "(", "sub_index", ")", "\n", "", "index", ".", "reset", "(", ")", "\n", "return", "index", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.utils.faiss_utils.index_init_cpu": [[107, 109], ["faiss.IndexFlatL2"], "function", ["None"], ["\n", "", "def", "index_init_cpu", "(", "feat_dim", ")", ":", "\n", "    ", "return", "faiss", ".", "IndexFlatL2", "(", "feat_dim", ")", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.utils.osutils.mkdir_if_missing": [[6, 12], ["os.makedirs"], "function", ["None"], ["def", "mkdir_if_missing", "(", "dir_path", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "os", ".", "makedirs", "(", "dir_path", ")", "\n", "", "except", "OSError", "as", "e", ":", "\n", "        ", "if", "e", ".", "errno", "!=", "errno", ".", "EEXIST", ":", "\n", "            ", "raise", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.utils.meters.AverageMeter.__init__": [[7, 12], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.utils.meters.AverageMeter.reset": [[13, 18], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.utils.meters.AverageMeter.update": [[19, 24], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "", "", ""]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.utils.serialization.read_json": [[12, 16], ["open", "json.load"], "function", ["None"], ["def", "read_json", "(", "fpath", ")", ":", "\n", "    ", "with", "open", "(", "fpath", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "obj", "=", "json", ".", "load", "(", "f", ")", "\n", "", "return", "obj", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.utils.serialization.write_json": [[18, 22], ["osutils.mkdir_if_missing", "os.dirname", "open", "json.dump"], "function", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.utils.iotools.mkdir_if_missing"], ["", "def", "write_json", "(", "obj", ",", "fpath", ")", ":", "\n", "    ", "mkdir_if_missing", "(", "osp", ".", "dirname", "(", "fpath", ")", ")", "\n", "with", "open", "(", "fpath", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "obj", ",", "f", ",", "indent", "=", "4", ",", "separators", "=", "(", "','", ",", "': '", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.utils.serialization.save_checkpoint": [[24, 29], ["osutils.mkdir_if_missing", "torch.save", "os.dirname", "shutil.copy", "os.join", "os.dirname"], "function", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.utils.iotools.mkdir_if_missing"], ["", "", "def", "save_checkpoint", "(", "state", ",", "is_best", ",", "fpath", "=", "'checkpoint.pth.tar'", ")", ":", "\n", "    ", "mkdir_if_missing", "(", "osp", ".", "dirname", "(", "fpath", ")", ")", "\n", "torch", ".", "save", "(", "state", ",", "fpath", ")", "\n", "if", "is_best", ":", "\n", "        ", "shutil", ".", "copy", "(", "fpath", ",", "osp", ".", "join", "(", "osp", ".", "dirname", "(", "fpath", ")", ",", "'model_best.pth.tar'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.utils.serialization.load_checkpoint": [[31, 39], ["os.isfile", "torch.load", "print", "ValueError", "torch.device"], "function", ["None"], ["", "", "def", "load_checkpoint", "(", "fpath", ")", ":", "\n", "    ", "if", "osp", ".", "isfile", "(", "fpath", ")", ":", "\n", "# checkpoint = torch.load(fpath)", "\n", "        ", "checkpoint", "=", "torch", ".", "load", "(", "fpath", ",", "map_location", "=", "torch", ".", "device", "(", "'cpu'", ")", ")", "\n", "print", "(", "\"=> Loaded checkpoint '{}'\"", ".", "format", "(", "fpath", ")", ")", "\n", "return", "checkpoint", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"=> No checkpoint found at '{}'\"", ".", "format", "(", "fpath", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.utils.serialization.copy_state_dict": [[41, 62], ["model.state_dict", "set", "state_dict.items", "isinstance", "tgt_state[].copy_", "set.add", "set", "len", "print", "name.startswith", "param.size", "tgt_state[].size", "print", "model.state_dict.keys", "param.size", "tgt_state[].size", "len"], "function", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.solver.scheduler.Scheduler.state_dict"], ["", "", "def", "copy_state_dict", "(", "state_dict", ",", "model", ",", "strip", "=", "None", ")", ":", "\n", "    ", "tgt_state", "=", "model", ".", "state_dict", "(", ")", "\n", "copied_names", "=", "set", "(", ")", "\n", "for", "name", ",", "param", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "        ", "if", "strip", "is", "not", "None", "and", "name", ".", "startswith", "(", "strip", ")", ":", "\n", "            ", "name", "=", "name", "[", "len", "(", "strip", ")", ":", "]", "\n", "", "if", "name", "not", "in", "tgt_state", ":", "\n", "            ", "continue", "\n", "", "if", "isinstance", "(", "param", ",", "Parameter", ")", ":", "\n", "            ", "param", "=", "param", ".", "data", "\n", "", "if", "param", ".", "size", "(", ")", "!=", "tgt_state", "[", "name", "]", ".", "size", "(", ")", ":", "\n", "            ", "print", "(", "'mismatch:'", ",", "name", ",", "param", ".", "size", "(", ")", ",", "tgt_state", "[", "name", "]", ".", "size", "(", ")", ")", "\n", "continue", "\n", "", "tgt_state", "[", "name", "]", ".", "copy_", "(", "param", ")", "\n", "copied_names", ".", "add", "(", "name", ")", "\n", "\n", "", "missing", "=", "set", "(", "tgt_state", ".", "keys", "(", ")", ")", "-", "copied_names", "\n", "if", "len", "(", "missing", ")", ">", "0", ":", "\n", "        ", "print", "(", "\"missing keys in state_dict:\"", ",", "missing", ")", "\n", "\n", "", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.utils.__init__.to_numpy": [[6, 13], ["torch.is_tensor", "tensor.cpu().numpy", "ValueError", "tensor.cpu", "type", "type"], "function", ["None"], ["from", ".", "import", "utils", "\n", "from", ".", "import", "evaluators", "\n", "from", ".", "import", "trainers", "\n", "\n", "__version__", "=", "'0.1.0'", "\n", ""]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.utils.__init__.to_torch": [[15, 22], ["torch.from_numpy", "type", "torch.is_tensor", "ValueError", "type"], "function", ["None"], []], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.utils.faiss_rerank.cosine_dist": [[23, 30], ["torch.matmul", "torch.matmul", "y.transpose", "torch.sqrt().view().repeat", "torch.sqrt().view().repeat", "torch.sqrt().view().repeat", "torch.sqrt().view().repeat", "torch.sqrt().view", "torch.sqrt().view", "torch.sqrt().view", "torch.sqrt().view", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.pow", "torch.pow", "torch.pow", "torch.pow"], "function", ["None"], ["def", "k_reciprocal_neigh", "(", "initial_rank", ",", "i", ",", "k1", ")", ":", "\n", "    ", "forward_k_neigh_index", "=", "initial_rank", "[", "i", ",", ":", "k1", "+", "1", "]", "\n", "backward_k_neigh_index", "=", "initial_rank", "[", "forward_k_neigh_index", ",", ":", "k1", "+", "1", "]", "\n", "fi", "=", "np", ".", "where", "(", "backward_k_neigh_index", "==", "i", ")", "[", "0", "]", "\n", "return", "forward_k_neigh_index", "[", "fi", "]", "\n", "\n", "\n", "", "def", "compute_jaccard_distance", "(", "target_features", ",", "k1", "=", "20", ",", "k2", "=", "6", ",", "print_flag", "=", "True", ",", "search_option", "=", "0", ",", "use_float16", "=", "False", ")", ":", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.utils.faiss_rerank.batch_cosine_dist": [[31, 53], ["range", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cat", "torch.cat", "range", "torch.cat", "torch.cat", "torch.cat.append", "faiss_rerank.cosine_dist", "torch.cat.append", "torch.cat.t().cpu", "torch.max", "torch.max", "torch.cat.t"], "function", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.triplet_loss.cosine_dist", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.utils.SmoothedValue.max", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.utils.SmoothedValue.max"], ["    ", "end", "=", "time", ".", "time", "(", ")", "\n", "if", "print_flag", ":", "\n", "        ", "print", "(", "'Computing jaccard distance...'", ")", "\n", "\n", "", "ngpus", "=", "faiss", ".", "get_num_gpus", "(", ")", "\n", "N", "=", "target_features", ".", "size", "(", "0", ")", "\n", "mat_type", "=", "np", ".", "float16", "if", "use_float16", "else", "np", ".", "float32", "\n", "search_option", "=", "2", "\n", "\n", "if", "(", "search_option", "==", "0", ")", ":", "\n", "# GPU + PyTorch CUDA Tensors (1)", "\n", "        ", "res", "=", "faiss", ".", "StandardGpuResources", "(", ")", "\n", "res", ".", "setDefaultNullStreamAllDevices", "(", ")", "\n", "_", ",", "initial_rank", "=", "search_raw_array_pytorch", "(", "res", ",", "target_features", ",", "target_features", ",", "k1", ")", "\n", "initial_rank", "=", "initial_rank", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "elif", "(", "search_option", "==", "1", ")", ":", "\n", "# GPU + PyTorch CUDA Tensors (2)", "\n", "        ", "res", "=", "faiss", ".", "StandardGpuResources", "(", ")", "\n", "index", "=", "faiss", ".", "GpuIndexFlatL2", "(", "res", ",", "target_features", ".", "size", "(", "-", "1", ")", ")", "\n", "index", ".", "add", "(", "target_features", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "_", ",", "initial_rank", "=", "search_index_pytorch", "(", "index", ",", "target_features", ",", "k1", ")", "\n", "res", ".", "syncDefaultStreamCurrentDevice", "(", ")", "\n", "initial_rank", "=", "initial_rank", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.utils.iotools.mkdir_if_missing": [[14, 21], ["os.exists", "os.makedirs", "os.makedirs"], "function", ["None"], ["def", "mkdir_if_missing", "(", "directory", ")", ":", "\n", "    ", "if", "not", "osp", ".", "exists", "(", "directory", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "os", ".", "makedirs", "(", "directory", ")", "\n", "", "except", "OSError", "as", "e", ":", "\n", "            ", "if", "e", ".", "errno", "!=", "errno", ".", "EEXIST", ":", "\n", "                ", "raise", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.utils.iotools.check_isfile": [[23, 28], ["os.isfile", "print"], "function", ["None"], ["", "", "", "", "def", "check_isfile", "(", "path", ")", ":", "\n", "    ", "isfile", "=", "osp", ".", "isfile", "(", "path", ")", "\n", "if", "not", "isfile", ":", "\n", "        ", "print", "(", "\"=> Warning: no file found at '{}' (ignored)\"", ".", "format", "(", "path", ")", ")", "\n", "", "return", "isfile", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.utils.iotools.read_json": [[30, 34], ["open", "json.load"], "function", ["None"], ["", "def", "read_json", "(", "fpath", ")", ":", "\n", "    ", "with", "open", "(", "fpath", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "obj", "=", "json", ".", "load", "(", "f", ")", "\n", "", "return", "obj", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.utils.iotools.write_json": [[36, 40], ["iotools.mkdir_if_missing", "os.dirname", "open", "json.dump"], "function", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.utils.iotools.mkdir_if_missing"], ["", "def", "write_json", "(", "obj", ",", "fpath", ")", ":", "\n", "    ", "mkdir_if_missing", "(", "osp", ".", "dirname", "(", "fpath", ")", ")", "\n", "with", "open", "(", "fpath", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "obj", ",", "f", ",", "indent", "=", "4", ",", "separators", "=", "(", "','", ",", "': '", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.utils.reranking.re_ranking": [[29, 101], ["probFea.size", "numpy.transpose", "numpy.zeros_like().astype", "numpy.argsort().astype", "range", "range", "numpy.zeros_like", "range", "galFea.size", "torch.cat", "distmat.addmm_", "distmat.cpu().numpy", "range", "numpy.unique", "numpy.exp", "numpy.zeros_like", "range", "invIndex.append", "numpy.zeros", "range", "torch.pow().sum().expand", "torch.pow().sum().expand().t", "torch.cat.t", "numpy.max", "numpy.zeros_like", "numpy.argsort", "numpy.where", "len", "numpy.sum", "numpy.mean", "numpy.where", "len", "distmat.cpu", "numpy.where", "len", "numpy.append", "numpy.where", "numpy.minimum", "torch.pow().sum", "torch.pow().sum().expand", "numpy.intersect1d", "len", "torch.pow", "torch.pow().sum", "int", "int", "numpy.around", "numpy.around", "torch.pow"], "function", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.utils.SmoothedValue.max"], ["def", "re_ranking", "(", "probFea", ",", "galFea", ",", "k1", ",", "k2", ",", "lambda_value", ",", "local_distmat", "=", "None", ",", "only_local", "=", "False", ")", ":", "\n", "# if feature vector is numpy, you should use 'torch.tensor' transform it to tensor", "\n", "    ", "query_num", "=", "probFea", ".", "size", "(", "0", ")", "\n", "all_num", "=", "query_num", "+", "galFea", ".", "size", "(", "0", ")", "\n", "if", "only_local", ":", "\n", "        ", "original_dist", "=", "local_distmat", "\n", "", "else", ":", "\n", "        ", "feat", "=", "torch", ".", "cat", "(", "[", "probFea", ",", "galFea", "]", ")", "\n", "# print('using GPU to compute original distance')", "\n", "distmat", "=", "torch", ".", "pow", "(", "feat", ",", "2", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "expand", "(", "all_num", ",", "all_num", ")", "+", "torch", ".", "pow", "(", "feat", ",", "2", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "expand", "(", "all_num", ",", "all_num", ")", ".", "t", "(", ")", "\n", "distmat", ".", "addmm_", "(", "1", ",", "-", "2", ",", "feat", ",", "feat", ".", "t", "(", ")", ")", "\n", "original_dist", "=", "distmat", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "del", "feat", "\n", "if", "not", "local_distmat", "is", "None", ":", "\n", "            ", "original_dist", "=", "original_dist", "+", "local_distmat", "\n", "", "", "gallery_num", "=", "original_dist", ".", "shape", "[", "0", "]", "\n", "original_dist", "=", "np", ".", "transpose", "(", "original_dist", "/", "np", ".", "max", "(", "original_dist", ",", "axis", "=", "0", ")", ")", "\n", "V", "=", "np", ".", "zeros_like", "(", "original_dist", ")", ".", "astype", "(", "np", ".", "float16", ")", "\n", "initial_rank", "=", "np", ".", "argsort", "(", "original_dist", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n", "# print('starting re_ranking')", "\n", "for", "i", "in", "range", "(", "all_num", ")", ":", "\n", "# k-reciprocal neighbors", "\n", "        ", "forward_k_neigh_index", "=", "initial_rank", "[", "i", ",", ":", "k1", "+", "1", "]", "\n", "backward_k_neigh_index", "=", "initial_rank", "[", "forward_k_neigh_index", ",", ":", "k1", "+", "1", "]", "\n", "fi", "=", "np", ".", "where", "(", "backward_k_neigh_index", "==", "i", ")", "[", "0", "]", "\n", "k_reciprocal_index", "=", "forward_k_neigh_index", "[", "fi", "]", "\n", "k_reciprocal_expansion_index", "=", "k_reciprocal_index", "\n", "for", "j", "in", "range", "(", "len", "(", "k_reciprocal_index", ")", ")", ":", "\n", "            ", "candidate", "=", "k_reciprocal_index", "[", "j", "]", "\n", "candidate_forward_k_neigh_index", "=", "initial_rank", "[", "candidate", ",", ":", "int", "(", "np", ".", "around", "(", "k1", "/", "2", ")", ")", "+", "1", "]", "\n", "candidate_backward_k_neigh_index", "=", "initial_rank", "[", "candidate_forward_k_neigh_index", ",", "\n", ":", "int", "(", "np", ".", "around", "(", "k1", "/", "2", ")", ")", "+", "1", "]", "\n", "fi_candidate", "=", "np", ".", "where", "(", "candidate_backward_k_neigh_index", "==", "candidate", ")", "[", "0", "]", "\n", "candidate_k_reciprocal_index", "=", "candidate_forward_k_neigh_index", "[", "fi_candidate", "]", "\n", "if", "len", "(", "np", ".", "intersect1d", "(", "candidate_k_reciprocal_index", ",", "k_reciprocal_index", ")", ")", ">", "2", "/", "3", "*", "len", "(", "\n", "candidate_k_reciprocal_index", ")", ":", "\n", "                ", "k_reciprocal_expansion_index", "=", "np", ".", "append", "(", "k_reciprocal_expansion_index", ",", "candidate_k_reciprocal_index", ")", "\n", "\n", "", "", "k_reciprocal_expansion_index", "=", "np", ".", "unique", "(", "k_reciprocal_expansion_index", ")", "\n", "weight", "=", "np", ".", "exp", "(", "-", "original_dist", "[", "i", ",", "k_reciprocal_expansion_index", "]", ")", "\n", "V", "[", "i", ",", "k_reciprocal_expansion_index", "]", "=", "weight", "/", "np", ".", "sum", "(", "weight", ")", "\n", "", "original_dist", "=", "original_dist", "[", ":", "query_num", ",", "]", "\n", "if", "k2", "!=", "1", ":", "\n", "        ", "V_qe", "=", "np", ".", "zeros_like", "(", "V", ",", "dtype", "=", "np", ".", "float16", ")", "\n", "for", "i", "in", "range", "(", "all_num", ")", ":", "\n", "            ", "V_qe", "[", "i", ",", ":", "]", "=", "np", ".", "mean", "(", "V", "[", "initial_rank", "[", "i", ",", ":", "k2", "]", ",", ":", "]", ",", "axis", "=", "0", ")", "\n", "", "V", "=", "V_qe", "\n", "del", "V_qe", "\n", "", "del", "initial_rank", "\n", "invIndex", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "gallery_num", ")", ":", "\n", "        ", "invIndex", ".", "append", "(", "np", ".", "where", "(", "V", "[", ":", ",", "i", "]", "!=", "0", ")", "[", "0", "]", ")", "\n", "\n", "", "jaccard_dist", "=", "np", ".", "zeros_like", "(", "original_dist", ",", "dtype", "=", "np", ".", "float16", ")", "\n", "\n", "for", "i", "in", "range", "(", "query_num", ")", ":", "\n", "        ", "temp_min", "=", "np", ".", "zeros", "(", "shape", "=", "[", "1", ",", "gallery_num", "]", ",", "dtype", "=", "np", ".", "float16", ")", "\n", "indNonZero", "=", "np", ".", "where", "(", "V", "[", "i", ",", ":", "]", "!=", "0", ")", "[", "0", "]", "\n", "indImages", "=", "[", "invIndex", "[", "ind", "]", "for", "ind", "in", "indNonZero", "]", "\n", "for", "j", "in", "range", "(", "len", "(", "indNonZero", ")", ")", ":", "\n", "            ", "temp_min", "[", "0", ",", "indImages", "[", "j", "]", "]", "=", "temp_min", "[", "0", ",", "indImages", "[", "j", "]", "]", "+", "np", ".", "minimum", "(", "V", "[", "i", ",", "indNonZero", "[", "j", "]", "]", ",", "\n", "V", "[", "indImages", "[", "j", "]", ",", "indNonZero", "[", "j", "]", "]", ")", "\n", "", "jaccard_dist", "[", "i", "]", "=", "1", "-", "temp_min", "/", "(", "2", "-", "temp_min", ")", "\n", "\n", "", "final_dist", "=", "jaccard_dist", "*", "(", "1", "-", "lambda_value", ")", "+", "original_dist", "*", "lambda_value", "\n", "del", "original_dist", "\n", "del", "V", "\n", "del", "jaccard_dist", "\n", "final_dist", "=", "final_dist", "[", ":", "query_num", ",", "query_num", ":", "]", "\n", "return", "final_dist", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.utils.metrics.R1_mAP_eval.__init__": [[90, 96], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.softmax_loss.LabelSmoothingCrossEntropy.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_query", ",", "max_rank", "=", "50", ",", "feat_norm", "=", "True", ",", "reranking", "=", "False", ")", ":", "\n", "        ", "super", "(", "R1_mAP_eval", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_query", "=", "num_query", "\n", "self", ".", "max_rank", "=", "max_rank", "\n", "self", ".", "feat_norm", "=", "feat_norm", "\n", "self", ".", "reranking", "=", "reranking", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.utils.metrics.R1_mAP_eval.reset": [[97, 101], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "feats", "=", "[", "]", "\n", "self", ".", "pids", "=", "[", "]", "\n", "self", ".", "camids", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.utils.metrics.R1_mAP_eval.update": [[102, 107], ["metrics.R1_mAP_eval.feats.append", "metrics.R1_mAP_eval.pids.extend", "metrics.R1_mAP_eval.camids.extend", "feat.cpu", "numpy.asarray", "numpy.asarray"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "output", ")", ":", "# called once for each batch", "\n", "        ", "feat", ",", "pid", ",", "camid", "=", "output", "\n", "self", ".", "feats", ".", "append", "(", "feat", ".", "cpu", "(", ")", ")", "\n", "self", ".", "pids", ".", "extend", "(", "np", ".", "asarray", "(", "pid", ")", ")", "\n", "self", ".", "camids", ".", "extend", "(", "np", ".", "asarray", "(", "camid", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.utils.metrics.R1_mAP_eval.compute": [[108, 132], ["torch.cat", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "metrics.eval_func", "print", "torch.nn.functional.normalize", "print", "utils.reranking.re_ranking", "print", "metrics.euclidean_distance"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.utils.metrics.eval_func", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.triplet_loss.normalize", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.utils.reranking.re_ranking", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.utils.metrics.euclidean_distance"], ["", "def", "compute", "(", "self", ")", ":", "# called after each epoch", "\n", "        ", "feats", "=", "torch", ".", "cat", "(", "self", ".", "feats", ",", "dim", "=", "0", ")", "\n", "if", "self", ".", "feat_norm", ":", "\n", "            ", "print", "(", "\"The test feature is normalized\"", ")", "\n", "feats", "=", "torch", ".", "nn", ".", "functional", ".", "normalize", "(", "feats", ",", "dim", "=", "1", ",", "p", "=", "2", ")", "# along channel", "\n", "# query", "\n", "", "qf", "=", "feats", "[", ":", "self", ".", "num_query", "]", "\n", "q_pids", "=", "np", ".", "asarray", "(", "self", ".", "pids", "[", ":", "self", ".", "num_query", "]", ")", "\n", "q_camids", "=", "np", ".", "asarray", "(", "self", ".", "camids", "[", ":", "self", ".", "num_query", "]", ")", "\n", "# gallery", "\n", "gf", "=", "feats", "[", "self", ".", "num_query", ":", "]", "\n", "g_pids", "=", "np", ".", "asarray", "(", "self", ".", "pids", "[", "self", ".", "num_query", ":", "]", ")", "\n", "\n", "g_camids", "=", "np", ".", "asarray", "(", "self", ".", "camids", "[", "self", ".", "num_query", ":", "]", ")", "\n", "if", "self", ".", "reranking", ":", "\n", "            ", "print", "(", "'=> Enter reranking'", ")", "\n", "distmat", "=", "re_ranking", "(", "qf", ",", "gf", ",", "k1", "=", "20", ",", "k2", "=", "6", ",", "lambda_value", "=", "0.3", ")", "\n", "\n", "", "else", ":", "\n", "            ", "print", "(", "'=> Computing DistMat with euclidean_distance'", ")", "\n", "distmat", "=", "euclidean_distance", "(", "qf", ",", "gf", ")", "\n", "", "cmc", ",", "mAP", "=", "eval_func", "(", "distmat", ",", "q_pids", ",", "g_pids", ",", "q_camids", ",", "g_camids", ")", "\n", "\n", "return", "cmc", ",", "mAP", ",", "distmat", ",", "self", ".", "pids", ",", "self", ".", "camids", ",", "qf", ",", "gf", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.utils.metrics.euclidean_distance": [[7, 14], ["dist_mat.addmm_", "dist_mat.cpu().numpy", "torch.pow().sum().expand", "torch.pow().sum().expand().t", "gf.t", "dist_mat.cpu", "torch.pow().sum", "torch.pow().sum().expand", "torch.pow", "torch.pow().sum", "torch.pow"], "function", ["None"], ["def", "euclidean_distance", "(", "qf", ",", "gf", ")", ":", "\n", "    ", "m", "=", "qf", ".", "shape", "[", "0", "]", "\n", "n", "=", "gf", ".", "shape", "[", "0", "]", "\n", "dist_mat", "=", "torch", ".", "pow", "(", "qf", ",", "2", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "expand", "(", "m", ",", "n", ")", "+", "torch", ".", "pow", "(", "gf", ",", "2", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "expand", "(", "n", ",", "m", ")", ".", "t", "(", ")", "\n", "dist_mat", ".", "addmm_", "(", "1", ",", "-", "2", ",", "qf", ",", "gf", ".", "t", "(", ")", ")", "\n", "return", "dist_mat", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.utils.metrics.cosine_similarity": [[15, 26], ["qf.mm", "torch.norm", "torch.norm", "torch.norm.mm", "np.arccos.mul().cpu().numpy", "numpy.clip", "numpy.arccos", "gf.t", "torch.norm.t", "np.arccos.mul().cpu", "np.arccos.mul"], "function", ["None"], ["", "def", "cosine_similarity", "(", "qf", ",", "gf", ")", ":", "\n", "    ", "epsilon", "=", "0.00001", "\n", "dist_mat", "=", "qf", ".", "mm", "(", "gf", ".", "t", "(", ")", ")", "\n", "qf_norm", "=", "torch", ".", "norm", "(", "qf", ",", "p", "=", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "# mx1", "\n", "gf_norm", "=", "torch", ".", "norm", "(", "gf", ",", "p", "=", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "# nx1", "\n", "qg_normdot", "=", "qf_norm", ".", "mm", "(", "gf_norm", ".", "t", "(", ")", ")", "\n", "\n", "dist_mat", "=", "dist_mat", ".", "mul", "(", "1", "/", "qg_normdot", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "dist_mat", "=", "np", ".", "clip", "(", "dist_mat", ",", "-", "1", "+", "epsilon", ",", "1", "-", "epsilon", ")", "\n", "dist_mat", "=", "np", ".", "arccos", "(", "dist_mat", ")", "\n", "return", "dist_mat", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.utils.metrics.eval_func": [[28, 87], ["numpy.argsort", "range", "numpy.asarray().astype", "numpy.mean", "print", "numpy.invert", "orig_cmc.cumsum", "np.asarray().astype.append", "orig_cmc.sum", "orig_cmc.cumsum", "all_AP.append", "np.asarray().astype.sum", "numpy.any", "numpy.arange", "numpy.asarray", "orig_cmc.cumsum.sum", "numpy.asarray"], "function", ["None"], ["", "def", "eval_func", "(", "distmat", ",", "q_pids", ",", "g_pids", ",", "q_camids", ",", "g_camids", ",", "max_rank", "=", "50", ")", ":", "\n", "    ", "\"\"\"Evaluation with market1501 metric\n        Key: for each query identity, its gallery images from the same camera view are discarded.\n        \"\"\"", "\n", "num_q", ",", "num_g", "=", "distmat", ".", "shape", "\n", "# distmat g", "\n", "#    q    1 3 2 4", "\n", "#         4 1 2 3", "\n", "if", "num_g", "<", "max_rank", ":", "\n", "        ", "max_rank", "=", "num_g", "\n", "print", "(", "\"Note: number of gallery samples is quite small, got {}\"", ".", "format", "(", "num_g", ")", ")", "\n", "", "indices", "=", "np", ".", "argsort", "(", "distmat", ",", "axis", "=", "1", ")", "\n", "#  0 2 1 3", "\n", "#  1 2 3 0", "\n", "matches", "=", "(", "g_pids", "[", "indices", "]", "==", "q_pids", "[", ":", ",", "np", ".", "newaxis", "]", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "# compute cmc curve for each query", "\n", "all_cmc", "=", "[", "]", "\n", "all_AP", "=", "[", "]", "\n", "num_valid_q", "=", "0.", "# number of valid query", "\n", "for", "q_idx", "in", "range", "(", "num_q", ")", ":", "\n", "# get query pid and camid", "\n", "        ", "q_pid", "=", "q_pids", "[", "q_idx", "]", "\n", "q_camid", "=", "q_camids", "[", "q_idx", "]", "\n", "\n", "# remove gallery samples that have the same pid and camid with query", "\n", "order", "=", "indices", "[", "q_idx", "]", "# select one row", "\n", "remove", "=", "(", "g_pids", "[", "order", "]", "==", "q_pid", ")", "&", "(", "g_camids", "[", "order", "]", "==", "q_camid", ")", "\n", "keep", "=", "np", ".", "invert", "(", "remove", ")", "\n", "\n", "# compute cmc curve", "\n", "# binary vector, positions with value 1 are correct matches", "\n", "orig_cmc", "=", "matches", "[", "q_idx", "]", "[", "keep", "]", "\n", "if", "not", "np", ".", "any", "(", "orig_cmc", ")", ":", "\n", "# this condition is true when query identity does not appear in gallery", "\n", "            ", "continue", "\n", "\n", "", "cmc", "=", "orig_cmc", ".", "cumsum", "(", ")", "\n", "cmc", "[", "cmc", ">", "1", "]", "=", "1", "\n", "\n", "all_cmc", ".", "append", "(", "cmc", "[", ":", "max_rank", "]", ")", "\n", "num_valid_q", "+=", "1.", "\n", "\n", "# compute average precision", "\n", "# reference: https://en.wikipedia.org/wiki/Evaluation_measures_(information_retrieval)#Average_precision", "\n", "num_rel", "=", "orig_cmc", ".", "sum", "(", ")", "\n", "tmp_cmc", "=", "orig_cmc", ".", "cumsum", "(", ")", "\n", "y", "=", "np", ".", "arange", "(", "1", ",", "tmp_cmc", ".", "shape", "[", "0", "]", "+", "1", ")", "*", "1.0", "\n", "tmp_cmc", "=", "tmp_cmc", "/", "y", "\n", "tmp_cmc", "=", "np", ".", "asarray", "(", "tmp_cmc", ")", "*", "orig_cmc", "\n", "AP", "=", "tmp_cmc", ".", "sum", "(", ")", "/", "num_rel", "\n", "all_AP", ".", "append", "(", "AP", ")", "\n", "\n", "", "assert", "num_valid_q", ">", "0", ",", "\"Error: all query identities do not appear in gallery\"", "\n", "\n", "all_cmc", "=", "np", ".", "asarray", "(", "all_cmc", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "all_cmc", "=", "all_cmc", ".", "sum", "(", "0", ")", "/", "num_valid_q", "\n", "mAP", "=", "np", ".", "mean", "(", "all_AP", ")", "\n", "\n", "return", "all_cmc", ",", "mAP", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.utils.meter.AverageMeter.__init__": [[4, 9], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.utils.meter.AverageMeter.reset": [[10, 15], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.utils.meter.AverageMeter.update": [[16, 21], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "", "", "", ""]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.utils.logger.setup_logger": [[5, 27], ["logging.getLogger", "logging.getLogger.setLevel", "logging.StreamHandler", "logging.StreamHandler.setLevel", "logging.Formatter", "logging.StreamHandler.setFormatter", "logging.getLogger.addHandler", "logging.FileHandler.setLevel", "logging.FileHandler.setFormatter", "logging.getLogger.addHandler", "os.exists", "os.makedirs", "os.makedirs", "logging.FileHandler", "logging.FileHandler", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "function", ["None"], ["def", "setup_logger", "(", "name", ",", "save_dir", ",", "if_train", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "name", ")", "\n", "logger", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "\n", "ch", "=", "logging", ".", "StreamHandler", "(", "stream", "=", "sys", ".", "stdout", ")", "\n", "ch", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "\"%(asctime)s %(name)s %(levelname)s: %(message)s\"", ",", "datefmt", "=", "'%Y-%m-%d %H:%M:%S'", ")", "\n", "ch", ".", "setFormatter", "(", "formatter", ")", "\n", "logger", ".", "addHandler", "(", "ch", ")", "\n", "\n", "if", "save_dir", ":", "\n", "        ", "if", "not", "osp", ".", "exists", "(", "save_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "save_dir", ")", "\n", "", "if", "if_train", ":", "\n", "            ", "fh", "=", "logging", ".", "FileHandler", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "\"train_log.txt\"", ")", ",", "mode", "=", "'w'", ")", "\n", "", "else", ":", "\n", "            ", "fh", "=", "logging", ".", "FileHandler", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "\"test_log.txt\"", ")", ",", "mode", "=", "'w'", ")", "\n", "", "fh", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "fh", ".", "setFormatter", "(", "formatter", ")", "\n", "logger", ".", "addHandler", "(", "fh", ")", "\n", "\n", "", "return", "logger", "\n", "", ""]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.data.transforms.RectScale.__init__": [[10, 14], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "height", ",", "width", ",", "interpolation", "=", "Image", ".", "BILINEAR", ")", ":", "\n", "        ", "self", ".", "height", "=", "height", "\n", "self", ".", "width", "=", "width", "\n", "self", ".", "interpolation", "=", "interpolation", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.data.transforms.RectScale.__call__": [[15, 20], ["img.resize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "w", ",", "h", "=", "img", ".", "size", "\n", "if", "h", "==", "self", ".", "height", "and", "w", "==", "self", ".", "width", ":", "\n", "            ", "return", "img", "\n", "", "return", "img", ".", "resize", "(", "(", "self", ".", "width", ",", "self", ".", "height", ")", ",", "self", ".", "interpolation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.data.transforms.RandomSizedRectCrop.__init__": [[23, 27], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "height", ",", "width", ",", "interpolation", "=", "Image", ".", "BILINEAR", ")", ":", "\n", "        ", "self", ".", "height", "=", "height", "\n", "self", ".", "width", "=", "width", "\n", "self", ".", "interpolation", "=", "interpolation", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.data.transforms.RandomSizedRectCrop.__call__": [[28, 50], ["range", "transforms.RectScale", "RectScale.", "random.uniform", "int", "int", "random.uniform", "round", "round", "random.randint", "random.randint", "img.crop.crop.crop", "img.crop.crop.resize", "math.sqrt", "math.sqrt"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "for", "attempt", "in", "range", "(", "10", ")", ":", "\n", "            ", "area", "=", "img", ".", "size", "[", "0", "]", "*", "img", ".", "size", "[", "1", "]", "\n", "target_area", "=", "random", ".", "uniform", "(", "0.64", ",", "1.0", ")", "*", "area", "\n", "aspect_ratio", "=", "random", ".", "uniform", "(", "2", ",", "3", ")", "\n", "\n", "h", "=", "int", "(", "round", "(", "math", ".", "sqrt", "(", "target_area", "*", "aspect_ratio", ")", ")", ")", "\n", "w", "=", "int", "(", "round", "(", "math", ".", "sqrt", "(", "target_area", "/", "aspect_ratio", ")", ")", ")", "\n", "\n", "if", "w", "<=", "img", ".", "size", "[", "0", "]", "and", "h", "<=", "img", ".", "size", "[", "1", "]", ":", "\n", "                ", "x1", "=", "random", ".", "randint", "(", "0", ",", "img", ".", "size", "[", "0", "]", "-", "w", ")", "\n", "y1", "=", "random", ".", "randint", "(", "0", ",", "img", ".", "size", "[", "1", "]", "-", "h", ")", "\n", "\n", "img", "=", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "w", ",", "y1", "+", "h", ")", ")", "\n", "assert", "(", "img", ".", "size", "==", "(", "w", ",", "h", ")", ")", "\n", "\n", "return", "img", ".", "resize", "(", "(", "self", ".", "width", ",", "self", ".", "height", ")", ",", "self", ".", "interpolation", ")", "\n", "\n", "# Fallback", "\n", "", "", "scale", "=", "RectScale", "(", "self", ".", "height", ",", "self", ".", "width", ",", "\n", "interpolation", "=", "self", ".", "interpolation", ")", "\n", "return", "scale", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.data.transforms.RandomErasing.__init__": [[64, 70], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "probability", "=", "0.5", ",", "sl", "=", "0.02", ",", "sh", "=", "0.4", ",", "r1", "=", "0.3", ",", "mean", "=", "(", "0.4914", ",", "0.4822", ",", "0.4465", ")", ")", ":", "\n", "        ", "self", ".", "probability", "=", "probability", "\n", "self", ".", "mean", "=", "mean", "\n", "self", ".", "sl", "=", "sl", "\n", "self", ".", "sh", "=", "sh", "\n", "self", ".", "r1", "=", "r1", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.data.transforms.RandomErasing.__call__": [[71, 97], ["range", "random.uniform", "random.uniform", "int", "int", "random.uniform", "round", "round", "random.randint", "random.randint", "img.size", "img.size", "math.sqrt", "math.sqrt", "img.size", "img.size", "img.size", "img.size", "img.size"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "\n", "        ", "if", "random", ".", "uniform", "(", "0", ",", "1", ")", ">=", "self", ".", "probability", ":", "\n", "            ", "return", "img", "\n", "\n", "", "for", "attempt", "in", "range", "(", "100", ")", ":", "\n", "            ", "area", "=", "img", ".", "size", "(", ")", "[", "1", "]", "*", "img", ".", "size", "(", ")", "[", "2", "]", "\n", "\n", "target_area", "=", "random", ".", "uniform", "(", "self", ".", "sl", ",", "self", ".", "sh", ")", "*", "area", "\n", "aspect_ratio", "=", "random", ".", "uniform", "(", "self", ".", "r1", ",", "1", "/", "self", ".", "r1", ")", "\n", "\n", "h", "=", "int", "(", "round", "(", "math", ".", "sqrt", "(", "target_area", "*", "aspect_ratio", ")", ")", ")", "\n", "w", "=", "int", "(", "round", "(", "math", ".", "sqrt", "(", "target_area", "/", "aspect_ratio", ")", ")", ")", "\n", "\n", "if", "w", "<", "img", ".", "size", "(", ")", "[", "2", "]", "and", "h", "<", "img", ".", "size", "(", ")", "[", "1", "]", ":", "\n", "                ", "x1", "=", "random", ".", "randint", "(", "0", ",", "img", ".", "size", "(", ")", "[", "1", "]", "-", "h", ")", "\n", "y1", "=", "random", ".", "randint", "(", "0", ",", "img", ".", "size", "(", ")", "[", "2", "]", "-", "w", ")", "\n", "if", "img", ".", "size", "(", ")", "[", "0", "]", "==", "3", ":", "\n", "                    ", "img", "[", "0", ",", "x1", ":", "x1", "+", "h", ",", "y1", ":", "y1", "+", "w", "]", "=", "self", ".", "mean", "[", "0", "]", "\n", "img", "[", "1", ",", "x1", ":", "x1", "+", "h", ",", "y1", ":", "y1", "+", "w", "]", "=", "self", ".", "mean", "[", "1", "]", "\n", "img", "[", "2", ",", "x1", ":", "x1", "+", "h", ",", "y1", ":", "y1", "+", "w", "]", "=", "self", ".", "mean", "[", "2", "]", "\n", "", "else", ":", "\n", "                    ", "img", "[", "0", ",", "x1", ":", "x1", "+", "h", ",", "y1", ":", "y1", "+", "w", "]", "=", "self", ".", "mean", "[", "0", "]", "\n", "", "return", "img", "\n", "\n", "", "", "return", "img", "\n", "", "", ""]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.data.preprocessor.Preprocessor.__init__": [[12, 17], ["torch.utils.data.Dataset.__init__"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.softmax_loss.LabelSmoothingCrossEntropy.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "root", "=", "None", ",", "transform", "=", "None", ")", ":", "\n", "        ", "super", "(", "Preprocessor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "root", "=", "root", "\n", "self", ".", "transform", "=", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.data.preprocessor.Preprocessor.__len__": [[18, 20], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.data.preprocessor.Preprocessor.__getitem__": [[21, 23], ["preprocessor.Preprocessor._get_single_item"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.data.preprocessor.Preprocessor._get_single_item"], ["", "def", "__getitem__", "(", "self", ",", "indices", ")", ":", "\n", "        ", "return", "self", ".", "_get_single_item", "(", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.data.preprocessor.Preprocessor._get_single_item": [[24, 36], ["PIL.Image.open().convert", "os.join", "os.join", "preprocessor.Preprocessor.transform", "PIL.Image.open"], "methods", ["None"], ["", "def", "_get_single_item", "(", "self", ",", "index", ")", ":", "\n", "        ", "fname", ",", "pid", ",", "camid", "=", "self", ".", "dataset", "[", "index", "]", "\n", "fpath", "=", "fname", "\n", "if", "self", ".", "root", "is", "not", "None", ":", "\n", "            ", "fpath", "=", "osp", ".", "join", "(", "self", ".", "root", ",", "fname", ")", "\n", "\n", "", "img", "=", "Image", ".", "open", "(", "fpath", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "", "return", "img", ",", "fname", ",", "pid", ",", "camid", ",", "index", "\n", "", "", ""]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.data.sampler.RandomIdentitySampler.__init__": [[20, 28], ["collections.defaultdict", "enumerate", "list", "len", "sampler.RandomIdentitySampler.index_dic[].append", "sampler.RandomIdentitySampler.index_dic.keys"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data_source", ",", "num_instances", ")", ":", "\n", "        ", "self", ".", "data_source", "=", "data_source", "\n", "self", ".", "num_instances", "=", "num_instances", "\n", "self", ".", "index_dic", "=", "defaultdict", "(", "list", ")", "\n", "for", "index", ",", "(", "_", ",", "pid", ",", "_", ")", "in", "enumerate", "(", "data_source", ")", ":", "\n", "            ", "self", ".", "index_dic", "[", "pid", "]", ".", "append", "(", "index", ")", "\n", "", "self", ".", "pids", "=", "list", "(", "self", ".", "index_dic", ".", "keys", "(", ")", ")", "\n", "self", ".", "num_samples", "=", "len", "(", "self", ".", "pids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.data.sampler.RandomIdentitySampler.__len__": [[29, 31], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_samples", "*", "self", ".", "num_instances", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.data.sampler.RandomIdentitySampler.__iter__": [[32, 44], ["torch.randperm().tolist", "iter", "ret.extend", "torch.randperm", "len", "numpy.random.choice", "numpy.random.choice"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "indices", "=", "torch", ".", "randperm", "(", "self", ".", "num_samples", ")", ".", "tolist", "(", ")", "\n", "ret", "=", "[", "]", "\n", "for", "i", "in", "indices", ":", "\n", "            ", "pid", "=", "self", ".", "pids", "[", "i", "]", "\n", "t", "=", "self", ".", "index_dic", "[", "pid", "]", "\n", "if", "len", "(", "t", ")", ">=", "self", ".", "num_instances", ":", "\n", "                ", "t", "=", "np", ".", "random", ".", "choice", "(", "t", ",", "size", "=", "self", ".", "num_instances", ",", "replace", "=", "False", ")", "\n", "", "else", ":", "\n", "                ", "t", "=", "np", ".", "random", ".", "choice", "(", "t", ",", "size", "=", "self", ".", "num_instances", ",", "replace", "=", "True", ")", "\n", "", "ret", ".", "extend", "(", "t", ")", "\n", "", "return", "iter", "(", "ret", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.data.sampler.RandomMultipleGallerySampler.__init__": [[47, 64], ["torch.utils.data.sampler.Sampler.__init__", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "enumerate", "list", "len", "sampler.RandomMultipleGallerySampler.pid_cam[].append", "sampler.RandomMultipleGallerySampler.pid_index[].append", "sampler.RandomMultipleGallerySampler.pid_index.keys"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.softmax_loss.LabelSmoothingCrossEntropy.__init__"], ["    ", "def", "__init__", "(", "self", ",", "data_source", ",", "num_instances", "=", "4", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "data_source", ")", "\n", "self", ".", "data_source", "=", "data_source", "\n", "self", ".", "index_pid", "=", "defaultdict", "(", "int", ")", "\n", "self", ".", "pid_cam", "=", "defaultdict", "(", "list", ")", "\n", "self", ".", "pid_index", "=", "defaultdict", "(", "list", ")", "\n", "self", ".", "num_instances", "=", "num_instances", "\n", "\n", "for", "index", ",", "(", "_", ",", "pid", ",", "cam", ")", "in", "enumerate", "(", "data_source", ")", ":", "\n", "            ", "if", "pid", "<", "0", ":", "\n", "                ", "continue", "\n", "", "self", ".", "index_pid", "[", "index", "]", "=", "pid", "\n", "self", ".", "pid_cam", "[", "pid", "]", ".", "append", "(", "cam", ")", "\n", "self", ".", "pid_index", "[", "pid", "]", ".", "append", "(", "index", ")", "\n", "\n", "", "self", ".", "pids", "=", "list", "(", "self", ".", "pid_index", ".", "keys", "(", ")", ")", "\n", "self", ".", "num_samples", "=", "len", "(", "self", ".", "pids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.data.sampler.RandomMultipleGallerySampler.__len__": [[65, 67], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_samples", "*", "self", ".", "num_instances", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.data.sampler.RandomMultipleGallerySampler.__iter__": [[68, 107], ["torch.randperm().tolist", "iter", "random.choice", "ret.append", "sampler.No_index", "torch.randperm", "sampler.No_index", "len", "len", "numpy.random.choice", "numpy.random.choice", "ret.append", "len", "numpy.random.choice", "numpy.random.choice", "ret.append"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.data.sampler.No_index", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.data.sampler.No_index"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "indices", "=", "torch", ".", "randperm", "(", "len", "(", "self", ".", "pids", ")", ")", ".", "tolist", "(", ")", "\n", "ret", "=", "[", "]", "\n", "\n", "for", "kid", "in", "indices", ":", "\n", "            ", "i", "=", "random", ".", "choice", "(", "self", ".", "pid_index", "[", "self", ".", "pids", "[", "kid", "]", "]", ")", "\n", "\n", "_", ",", "i_pid", ",", "i_cam", "=", "self", ".", "data_source", "[", "i", "]", "\n", "\n", "ret", ".", "append", "(", "i", ")", "\n", "\n", "pid_i", "=", "self", ".", "index_pid", "[", "i", "]", "\n", "cams", "=", "self", ".", "pid_cam", "[", "pid_i", "]", "\n", "index", "=", "self", ".", "pid_index", "[", "pid_i", "]", "\n", "select_cams", "=", "No_index", "(", "cams", ",", "i_cam", ")", "\n", "\n", "if", "select_cams", ":", "\n", "\n", "                ", "if", "len", "(", "select_cams", ")", ">=", "self", ".", "num_instances", ":", "\n", "                    ", "cam_indexes", "=", "np", ".", "random", ".", "choice", "(", "select_cams", ",", "size", "=", "self", ".", "num_instances", "-", "1", ",", "replace", "=", "False", ")", "\n", "", "else", ":", "\n", "                    ", "cam_indexes", "=", "np", ".", "random", ".", "choice", "(", "select_cams", ",", "size", "=", "self", ".", "num_instances", "-", "1", ",", "replace", "=", "True", ")", "\n", "\n", "", "for", "kk", "in", "cam_indexes", ":", "\n", "                    ", "ret", ".", "append", "(", "index", "[", "kk", "]", ")", "\n", "\n", "", "", "else", ":", "\n", "                ", "select_indexes", "=", "No_index", "(", "index", ",", "i", ")", "\n", "if", "not", "select_indexes", ":", "\n", "                    ", "continue", "\n", "", "if", "len", "(", "select_indexes", ")", ">=", "self", ".", "num_instances", ":", "\n", "                    ", "ind_indexes", "=", "np", ".", "random", ".", "choice", "(", "select_indexes", ",", "size", "=", "self", ".", "num_instances", "-", "1", ",", "replace", "=", "False", ")", "\n", "", "else", ":", "\n", "                    ", "ind_indexes", "=", "np", ".", "random", ".", "choice", "(", "select_indexes", ",", "size", "=", "self", ".", "num_instances", "-", "1", ",", "replace", "=", "True", ")", "\n", "\n", "", "for", "kk", "in", "ind_indexes", ":", "\n", "                    ", "ret", ".", "append", "(", "index", "[", "kk", "]", ")", "\n", "\n", "", "", "", "return", "iter", "(", "ret", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.data.sampler.No_index": [[14, 17], ["isinstance", "enumerate"], "function", ["None"], ["def", "No_index", "(", "a", ",", "b", ")", ":", "\n", "    ", "assert", "isinstance", "(", "a", ",", "list", ")", "\n", "return", "[", "i", "for", "i", ",", "j", "in", "enumerate", "(", "a", ")", "if", "j", "!=", "b", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.data.base_dataset.BaseDataset.get_imagedata_info": [[10, 21], ["set", "set", "len", "len", "len"], "methods", ["None"], ["def", "get_imagedata_info", "(", "self", ",", "data", ")", ":", "\n", "        ", "pids", ",", "cams", "=", "[", "]", ",", "[", "]", "\n", "for", "_", ",", "pid", ",", "camid", "in", "data", ":", "\n", "            ", "pids", "+=", "[", "pid", "]", "\n", "cams", "+=", "[", "camid", "]", "\n", "", "pids", "=", "set", "(", "pids", ")", "\n", "cams", "=", "set", "(", "cams", ")", "\n", "num_pids", "=", "len", "(", "pids", ")", "\n", "num_cams", "=", "len", "(", "cams", ")", "\n", "num_imgs", "=", "len", "(", "data", ")", "\n", "return", "num_pids", ",", "num_imgs", ",", "num_cams", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.data.base_dataset.BaseDataset.print_dataset_statistics": [[22, 24], ["None"], "methods", ["None"], ["", "def", "print_dataset_statistics", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.data.base_dataset.BaseDataset.images_dir": [[25, 28], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "images_dir", "(", "self", ")", ":", "\n", "        ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.data.base_dataset.BaseImageDataset.print_dataset_statistics": [[35, 48], ["base_dataset.BaseImageDataset.get_imagedata_info", "base_dataset.BaseImageDataset.get_imagedata_info", "base_dataset.BaseImageDataset.get_imagedata_info", "print", "print", "print", "print", "print", "print", "print", "print"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.datasets.bases.BaseDataset.get_imagedata_info", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.datasets.bases.BaseDataset.get_imagedata_info", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.datasets.bases.BaseDataset.get_imagedata_info"], ["def", "print_dataset_statistics", "(", "self", ",", "train", ",", "query", ",", "gallery", ")", ":", "\n", "        ", "num_train_pids", ",", "num_train_imgs", ",", "num_train_cams", "=", "self", ".", "get_imagedata_info", "(", "train", ")", "\n", "num_query_pids", ",", "num_query_imgs", ",", "num_query_cams", "=", "self", ".", "get_imagedata_info", "(", "query", ")", "\n", "num_gallery_pids", ",", "num_gallery_imgs", ",", "num_gallery_cams", "=", "self", ".", "get_imagedata_info", "(", "gallery", ")", "\n", "\n", "print", "(", "\"Dataset statistics:\"", ")", "\n", "print", "(", "\"  ----------------------------------------\"", ")", "\n", "print", "(", "\"  subset   | # ids | # images | # cameras\"", ")", "\n", "print", "(", "\"  ----------------------------------------\"", ")", "\n", "print", "(", "\"  train    | {:5d} | {:8d} | {:9d}\"", ".", "format", "(", "num_train_pids", ",", "num_train_imgs", ",", "num_train_cams", ")", ")", "\n", "print", "(", "\"  query    | {:5d} | {:8d} | {:9d}\"", ".", "format", "(", "num_query_pids", ",", "num_query_imgs", ",", "num_query_cams", ")", ")", "\n", "print", "(", "\"  gallery  | {:5d} | {:8d} | {:9d}\"", ".", "format", "(", "num_gallery_pids", ",", "num_gallery_imgs", ",", "num_gallery_cams", ")", ")", "\n", "print", "(", "\"  ----------------------------------------\"", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.data.__init__.IterLoader.__init__": [[8, 12], ["None"], "methods", ["None"], ["from", ".", "import", "trainers", "\n", "\n", "__version__", "=", "'0.1.0'", "\n", ""]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.data.__init__.IterLoader.__len__": [[13, 18], ["len"], "methods", ["None"], []], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.data.__init__.IterLoader.new_epoch": [[19, 21], ["iter"], "methods", ["None"], []], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.data.__init__.IterLoader.next": [[22, 28], ["__init__.IterLoader.next"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.data.__init__.IterLoader.next"], []], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.datasets.market1501.Market1501.__init__": [[28, 52], ["bases.BaseImageDataset.__init__", "os.join", "os.join", "os.join", "os.join", "market1501.Market1501._check_before_run", "market1501.Market1501._process_dir", "market1501.Market1501._process_dir", "market1501.Market1501._process_dir", "market1501.Market1501.get_imagedata_info", "market1501.Market1501.get_imagedata_info", "market1501.Market1501.get_imagedata_info", "print", "market1501.Market1501.print_dataset_statistics"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.softmax_loss.LabelSmoothingCrossEntropy.__init__", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.datasets.msmt17.MSMT17._check_before_run", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.datasets.mm.MM._process_dir", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.datasets.mm.MM._process_dir", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.datasets.mm.MM._process_dir", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.datasets.bases.BaseDataset.get_imagedata_info", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.datasets.bases.BaseDataset.get_imagedata_info", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.datasets.bases.BaseDataset.get_imagedata_info", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.datasets.bases.BaseImageDataset.print_dataset_statistics"], ["self", ".", "_check_before_run", "(", ")", "\n", "\n", "train", "=", "self", ".", "_process_dir", "(", "self", ".", "train_dir", ",", "relabel", "=", "True", ")", "\n", "query", "=", "self", ".", "_process_dir", "(", "self", ".", "query_dir", ",", "relabel", "=", "False", ")", "\n", "gallery", "=", "self", ".", "_process_dir", "(", "self", ".", "gallery_dir", ",", "relabel", "=", "False", ")", "\n", "\n", "if", "verbose", ":", "\n", "            ", "print", "(", "\"=> Market1501 loaded\"", ")", "\n", "self", ".", "print_dataset_statistics", "(", "train", ",", "query", ",", "gallery", ")", "\n", "\n", "", "self", ".", "train", "=", "train", "\n", "self", ".", "query", "=", "query", "\n", "self", ".", "gallery", "=", "gallery", "\n", "\n", "self", ".", "num_train_pids", ",", "self", ".", "num_train_imgs", ",", "self", ".", "num_train_cams", "=", "self", ".", "get_imagedata_info", "(", "self", ".", "train", ")", "\n", "self", ".", "num_query_pids", ",", "self", ".", "num_query_imgs", ",", "self", ".", "num_query_cams", "=", "self", ".", "get_imagedata_info", "(", "self", ".", "query", ")", "\n", "self", ".", "num_gallery_pids", ",", "self", ".", "num_gallery_imgs", ",", "self", ".", "num_gallery_cams", "=", "self", ".", "get_imagedata_info", "(", "self", ".", "gallery", ")", "\n", "\n", "", "def", "_check_before_run", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check if all files are available before going deeper\"\"\"", "\n", "if", "not", "osp", ".", "exists", "(", "self", ".", "dataset_dir", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "dataset_dir", ")", ")", "\n", "", "if", "not", "osp", ".", "exists", "(", "self", ".", "train_dir", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "train_dir", ")", ")", "\n", "", "if", "not", "osp", ".", "exists", "(", "self", ".", "query_dir", ")", ":", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.datasets.market1501.Market1501._check_before_run": [[53, 63], ["os.exists", "RuntimeError", "os.exists", "RuntimeError", "os.exists", "RuntimeError", "os.exists", "RuntimeError"], "methods", ["None"], ["            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "query_dir", ")", ")", "\n", "", "if", "not", "osp", ".", "exists", "(", "self", ".", "gallery_dir", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "gallery_dir", ")", ")", "\n", "\n", "", "", "def", "_process_dir", "(", "self", ",", "dir_path", ",", "relabel", "=", "False", ")", ":", "\n", "        ", "img_paths", "=", "glob", ".", "glob", "(", "osp", ".", "join", "(", "dir_path", ",", "'*.jpg'", ")", ")", "\n", "pattern", "=", "re", ".", "compile", "(", "r'([-\\d]+)_c(\\d)'", ")", "\n", "\n", "pid_container", "=", "set", "(", ")", "\n", "for", "img_path", "in", "img_paths", ":", "\n", "            ", "pid", ",", "_", "=", "map", "(", "int", ",", "pattern", ".", "search", "(", "img_path", ")", ".", "groups", "(", ")", ")", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.datasets.market1501.Market1501._process_dir": [[64, 85], ["glob.glob", "re.compile", "set", "sorted", "sorted", "os.join", "map", "set.add", "map", "dataset.append", "re.compile.search().groups", "enumerate", "re.compile.search().groups", "re.compile.search", "re.compile.search"], "methods", ["None"], ["if", "pid", "==", "-", "1", ":", "\n", "                ", "continue", "# junk images are just ignored", "\n", "", "pid_container", ".", "add", "(", "pid", ")", "\n", "", "pid2label", "=", "{", "pid", ":", "label", "for", "label", ",", "pid", "in", "enumerate", "(", "pid_container", ")", "}", "\n", "\n", "dataset", "=", "[", "]", "\n", "for", "img_path", "in", "img_paths", ":", "\n", "            ", "pid", ",", "camid", "=", "map", "(", "int", ",", "pattern", ".", "search", "(", "img_path", ")", ".", "groups", "(", ")", ")", "\n", "if", "pid", "==", "-", "1", ":", "\n", "                ", "continue", "# junk images are just ignored", "\n", "", "assert", "0", "<=", "pid", "<=", "1501", "# pid == 0 means background", "\n", "assert", "1", "<=", "camid", "<=", "6", "\n", "camid", "-=", "1", "# index starts from 0", "\n", "if", "relabel", ":", "\n", "                ", "pid", "=", "pid2label", "[", "pid", "]", "\n", "", "dataset", ".", "append", "(", "(", "img_path", ",", "pid", ",", "camid", ")", ")", "\n", "\n", "", "return", "dataset", "\n", "", "", ""]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.datasets.__init__.names": [[14, 16], ["sorted", "__factory.keys"], "function", ["None"], []], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.datasets.__init__.create": [[18, 39], ["KeyError"], "function", ["None"], []], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.datasets.__init__.get_dataset": [[41, 44], ["warnings.warn", "__init__.create"], "function", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.models.__init__.create"], []], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.datasets.msmt17.MSMT17.__init__": [[26, 54], ["bases.BaseImageDataset.__init__", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "msmt17.MSMT17._check_before_run", "msmt17.MSMT17._process_dir", "msmt17.MSMT17._process_dir", "msmt17.MSMT17._process_dir", "msmt17.MSMT17._process_dir", "msmt17.MSMT17.get_imagedata_info", "msmt17.MSMT17.get_imagedata_info", "msmt17.MSMT17.get_imagedata_info", "print", "msmt17.MSMT17.print_dataset_statistics"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.softmax_loss.LabelSmoothingCrossEntropy.__init__", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.datasets.msmt17.MSMT17._check_before_run", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.datasets.mm.MM._process_dir", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.datasets.mm.MM._process_dir", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.datasets.mm.MM._process_dir", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.datasets.mm.MM._process_dir", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.datasets.bases.BaseDataset.get_imagedata_info", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.datasets.bases.BaseDataset.get_imagedata_info", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.datasets.bases.BaseDataset.get_imagedata_info", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.datasets.bases.BaseImageDataset.print_dataset_statistics"], ["self", ".", "train_dir", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'train'", ")", "\n", "self", ".", "test_dir", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'test'", ")", "\n", "self", ".", "list_train_path", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'list_train.txt'", ")", "\n", "self", ".", "list_val_path", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'list_val.txt'", ")", "\n", "self", ".", "list_query_path", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'list_query.txt'", ")", "\n", "self", ".", "list_gallery_path", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'list_gallery.txt'", ")", "\n", "\n", "self", ".", "_check_before_run", "(", ")", "\n", "train", "=", "self", ".", "_process_dir", "(", "self", ".", "train_dir", ",", "self", ".", "list_train_path", ")", "\n", "val", "=", "self", ".", "_process_dir", "(", "self", ".", "train_dir", ",", "self", ".", "list_val_path", ")", "\n", "train", "+=", "val", "\n", "query", "=", "self", ".", "_process_dir", "(", "self", ".", "test_dir", ",", "self", ".", "list_query_path", ")", "\n", "gallery", "=", "self", ".", "_process_dir", "(", "self", ".", "test_dir", ",", "self", ".", "list_gallery_path", ")", "\n", "if", "verbose", ":", "\n", "            ", "print", "(", "\"=> MSMT17 loaded\"", ")", "\n", "self", ".", "print_dataset_statistics", "(", "train", ",", "query", ",", "gallery", ")", "\n", "\n", "", "self", ".", "train", "=", "train", "\n", "self", ".", "query", "=", "query", "\n", "self", ".", "gallery", "=", "gallery", "\n", "\n", "self", ".", "num_train_pids", ",", "self", ".", "num_train_imgs", ",", "self", ".", "num_train_cams", "=", "self", ".", "get_imagedata_info", "(", "self", ".", "train", ")", "\n", "self", ".", "num_query_pids", ",", "self", ".", "num_query_imgs", ",", "self", ".", "num_query_cams", "=", "self", ".", "get_imagedata_info", "(", "self", ".", "query", ")", "\n", "self", ".", "num_gallery_pids", ",", "self", ".", "num_gallery_imgs", ",", "self", ".", "num_gallery_cams", "=", "self", ".", "get_imagedata_info", "(", "self", ".", "gallery", ")", "\n", "", "def", "_check_before_run", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check if all files are available before going deeper\"\"\"", "\n", "if", "not", "osp", ".", "exists", "(", "self", ".", "dataset_dir", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "dataset_dir", ")", ")", "\n", "", "if", "not", "osp", ".", "exists", "(", "self", ".", "train_dir", ")", ":", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.datasets.msmt17.MSMT17._check_before_run": [[54, 62], ["os.exists", "RuntimeError", "os.exists", "RuntimeError", "os.exists", "RuntimeError"], "methods", ["None"], ["", "if", "not", "osp", ".", "exists", "(", "self", ".", "train_dir", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "train_dir", ")", ")", "\n", "", "if", "not", "osp", ".", "exists", "(", "self", ".", "test_dir", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "test_dir", ")", ")", "\n", "\n", "", "", "def", "_process_dir", "(", "self", ",", "dir_path", ",", "list_path", ")", ":", "\n", "        ", "with", "open", "(", "list_path", ",", "'r'", ")", "as", "txt", ":", "\n", "            ", "lines", "=", "txt", ".", "readlines", "(", ")", "\n", "", "dataset", "=", "[", "]", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.datasets.msmt17.MSMT17._process_dir": [[63, 82], ["set", "set", "enumerate", "print", "enumerate", "open", "txt.readlines", "img_info.split", "int", "int", "os.join", "dataset.append", "set.add", "set.add", "os.join.split"], "methods", ["None"], ["pid_container", "=", "set", "(", ")", "\n", "cam_container", "=", "set", "(", ")", "\n", "for", "img_idx", ",", "img_info", "in", "enumerate", "(", "lines", ")", ":", "\n", "            ", "img_path", ",", "pid", "=", "img_info", ".", "split", "(", "' '", ")", "\n", "pid", "=", "int", "(", "pid", ")", "# no need to relabel", "\n", "camid", "=", "int", "(", "img_path", ".", "split", "(", "'_'", ")", "[", "2", "]", ")", "\n", "img_path", "=", "osp", ".", "join", "(", "dir_path", ",", "img_path", ")", "\n", "dataset", ".", "append", "(", "(", "img_path", ",", "self", ".", "pid_begin", "+", "pid", ",", "camid", "-", "1", ")", ")", "\n", "pid_container", ".", "add", "(", "pid", ")", "\n", "cam_container", ".", "add", "(", "camid", ")", "\n", "# check if pid starts from 0 and increments with 1", "\n", "", "for", "idx", ",", "pid", "in", "enumerate", "(", "pid_container", ")", ":", "\n", "            ", "assert", "idx", "==", "pid", ",", "\"See code comment for explanation\"", "\n", "", "return", "dataset", "\n", "", "", ""]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.datasets.transforms.RandomErasing.__init__": [[26, 32], ["None"], "methods", ["None"], ["self", ".", "interpolation", "=", "interpolation", "\n", "\n", "", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "for", "attempt", "in", "range", "(", "10", ")", ":", "\n", "            ", "area", "=", "img", ".", "size", "[", "0", "]", "*", "img", ".", "size", "[", "1", "]", "\n", "target_area", "=", "random", ".", "uniform", "(", "0.64", ",", "1.0", ")", "*", "area", "\n", "aspect_ratio", "=", "random", ".", "uniform", "(", "2", ",", "3", ")", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.datasets.transforms.RandomErasing.__call__": [[33, 59], ["range", "random.uniform", "random.uniform", "int", "int", "random.uniform", "round", "round", "random.randint", "random.randint", "img.size", "img.size", "math.sqrt", "math.sqrt", "img.size", "img.size", "img.size", "img.size", "img.size"], "methods", ["None"], ["\n", "h", "=", "int", "(", "round", "(", "math", ".", "sqrt", "(", "target_area", "*", "aspect_ratio", ")", ")", ")", "\n", "w", "=", "int", "(", "round", "(", "math", ".", "sqrt", "(", "target_area", "/", "aspect_ratio", ")", ")", ")", "\n", "\n", "if", "w", "<=", "img", ".", "size", "[", "0", "]", "and", "h", "<=", "img", ".", "size", "[", "1", "]", ":", "\n", "                ", "x1", "=", "random", ".", "randint", "(", "0", ",", "img", ".", "size", "[", "0", "]", "-", "w", ")", "\n", "y1", "=", "random", ".", "randint", "(", "0", ",", "img", ".", "size", "[", "1", "]", "-", "h", ")", "\n", "\n", "img", "=", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "w", ",", "y1", "+", "h", ")", ")", "\n", "assert", "(", "img", ".", "size", "==", "(", "w", ",", "h", ")", ")", "\n", "\n", "return", "img", ".", "resize", "(", "(", "self", ".", "width", ",", "self", ".", "height", ")", ",", "self", ".", "interpolation", ")", "\n", "\n", "# Fallback", "\n", "", "", "scale", "=", "RectScale", "(", "self", ".", "height", ",", "self", ".", "width", ",", "\n", "interpolation", "=", "self", ".", "interpolation", ")", "\n", "return", "scale", "(", "img", ")", "\n", "\n", "\n", "", "", "class", "RandomErasing", "(", "object", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.datasets.transforms.RandomPatch.__init__": [[74, 96], ["collections.deque"], "methods", ["None"], ["            ", "return", "img", "\n", "\n", "", "for", "attempt", "in", "range", "(", "100", ")", ":", "\n", "            ", "area", "=", "img", ".", "size", "(", ")", "[", "1", "]", "*", "img", ".", "size", "(", ")", "[", "2", "]", "\n", "\n", "target_area", "=", "random", ".", "uniform", "(", "self", ".", "sl", ",", "self", ".", "sh", ")", "*", "area", "\n", "aspect_ratio", "=", "random", ".", "uniform", "(", "self", ".", "r1", ",", "1", "/", "self", ".", "r1", ")", "\n", "\n", "h", "=", "int", "(", "round", "(", "math", ".", "sqrt", "(", "target_area", "*", "aspect_ratio", ")", ")", ")", "\n", "w", "=", "int", "(", "round", "(", "math", ".", "sqrt", "(", "target_area", "/", "aspect_ratio", ")", ")", ")", "\n", "\n", "if", "w", "<", "img", ".", "size", "(", ")", "[", "2", "]", "and", "h", "<", "img", ".", "size", "(", ")", "[", "1", "]", ":", "\n", "                ", "x1", "=", "random", ".", "randint", "(", "0", ",", "img", ".", "size", "(", ")", "[", "1", "]", "-", "h", ")", "\n", "y1", "=", "random", ".", "randint", "(", "0", ",", "img", ".", "size", "(", ")", "[", "2", "]", "-", "w", ")", "\n", "if", "img", ".", "size", "(", ")", "[", "0", "]", "==", "3", ":", "\n", "                    ", "img", "[", "0", ",", "x1", ":", "x1", "+", "h", ",", "y1", ":", "y1", "+", "w", "]", "=", "self", ".", "mean", "[", "0", "]", "\n", "img", "[", "1", ",", "x1", ":", "x1", "+", "h", ",", "y1", ":", "y1", "+", "w", "]", "=", "self", ".", "mean", "[", "1", "]", "\n", "img", "[", "2", ",", "x1", ":", "x1", "+", "h", ",", "y1", ":", "y1", "+", "w", "]", "=", "self", ".", "mean", "[", "2", "]", "\n", "", "else", ":", "\n", "                    ", "img", "[", "0", ",", "x1", ":", "x1", "+", "h", ",", "y1", ":", "y1", "+", "w", "]", "=", "self", ".", "mean", "[", "0", "]", "\n", "", "return", "img", "\n", "\n", "", "", "return", "img", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.datasets.transforms.RandomPatch.generate_wh": [[97, 111], ["range", "random.uniform", "int", "int", "random.uniform", "round", "round", "math.sqrt", "math.sqrt"], "methods", ["None"], ["", "", ""]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.datasets.transforms.RandomPatch.transform_patch": [[112, 118], ["random.uniform", "patch.rotate.rotate.transpose", "random.uniform", "patch.rotate.rotate.rotate", "random.randint"], "methods", ["None"], []], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.datasets.transforms.RandomPatch.__call__": [[119, 145], ["transforms.RandomPatch.generate_wh", "random.randint", "random.randint", "transforms.RandomPatch.transform_patch", "img.paste", "random.randint", "random.randint", "img.crop", "transforms.RandomPatch.patchpool.append", "len", "random.uniform", "random.sample"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.datasets.transforms.RandomPatch.generate_wh", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.datasets.transforms.RandomPatch.transform_patch"], []], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.datasets.sampler_ddp.RandomIdentitySampler_DDP.__init__": [[121, 146], ["torch.get_world_size", "torch.get_world_size", "collections.defaultdict", "enumerate", "list", "torch.get_rank", "torch.get_rank", "sampler_ddp.RandomIdentitySampler_DDP.index_dic[].append", "sampler_ddp.RandomIdentitySampler_DDP.index_dic.keys", "len"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.utils.get_world_size", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.utils.get_world_size", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.utils.get_rank", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.utils.get_rank"], ["def", "__init__", "(", "self", ",", "data_source", ",", "batch_size", ",", "num_instances", ")", ":", "\n", "        ", "self", ".", "data_source", "=", "data_source", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "world_size", "=", "dist", ".", "get_world_size", "(", ")", "\n", "self", ".", "num_instances", "=", "num_instances", "\n", "self", ".", "mini_batch_size", "=", "self", ".", "batch_size", "//", "self", ".", "world_size", "\n", "self", ".", "num_pids_per_batch", "=", "self", ".", "mini_batch_size", "//", "self", ".", "num_instances", "\n", "self", ".", "index_dic", "=", "defaultdict", "(", "list", ")", "\n", "\n", "for", "index", ",", "(", "_", ",", "pid", ",", "_", ",", "_", ")", "in", "enumerate", "(", "self", ".", "data_source", ")", ":", "\n", "            ", "self", ".", "index_dic", "[", "pid", "]", ".", "append", "(", "index", ")", "\n", "", "self", ".", "pids", "=", "list", "(", "self", ".", "index_dic", ".", "keys", "(", ")", ")", "\n", "\n", "# estimate number of examples in an epoch", "\n", "self", ".", "length", "=", "0", "\n", "for", "pid", "in", "self", ".", "pids", ":", "\n", "            ", "idxs", "=", "self", ".", "index_dic", "[", "pid", "]", "\n", "num", "=", "len", "(", "idxs", ")", "\n", "if", "num", "<", "self", ".", "num_instances", ":", "\n", "                ", "num", "=", "self", ".", "num_instances", "\n", "", "self", ".", "length", "+=", "num", "-", "num", "%", "self", ".", "num_instances", "\n", "\n", "", "self", ".", "rank", "=", "dist", ".", "get_rank", "(", ")", "\n", "#self.world_size = dist.get_world_size()", "\n", "self", ".", "length", "//=", "self", ".", "world_size", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.datasets.sampler_ddp.RandomIdentitySampler_DDP.__iter__": [[147, 157], ["sampler_ddp.shared_random_seed", "numpy.random.seed", "int", "sampler_ddp.RandomIdentitySampler_DDP.sample_list", "int", "sampler_ddp.RandomIdentitySampler_DDP.__fetch_current_node_idxs", "len", "iter", "math.ceil", "len"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.datasets.sampler_ddp.shared_random_seed", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.datasets.sampler_ddp.RandomIdentitySampler_DDP.sample_list", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.datasets.sampler_ddp.RandomIdentitySampler_DDP.__fetch_current_node_idxs"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "seed", "=", "shared_random_seed", "(", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "self", ".", "_seed", "=", "int", "(", "seed", ")", "\n", "final_idxs", "=", "self", ".", "sample_list", "(", ")", "\n", "length", "=", "int", "(", "math", ".", "ceil", "(", "len", "(", "final_idxs", ")", "*", "1.0", "/", "self", ".", "world_size", ")", ")", "\n", "#final_idxs = final_idxs[self.rank * length:(self.rank + 1) * length]", "\n", "final_idxs", "=", "self", ".", "__fetch_current_node_idxs", "(", "final_idxs", ",", "length", ")", "\n", "self", ".", "length", "=", "len", "(", "final_idxs", ")", "\n", "return", "iter", "(", "final_idxs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.datasets.sampler_ddp.RandomIdentitySampler_DDP.__fetch_current_node_idxs": [[159, 169], ["len", "range", "numpy.array", "list", "range", "index_target.extend", "min", "numpy.array"], "methods", ["None"], ["", "def", "__fetch_current_node_idxs", "(", "self", ",", "final_idxs", ",", "length", ")", ":", "\n", "        ", "total_num", "=", "len", "(", "final_idxs", ")", "\n", "block_num", "=", "(", "length", "//", "self", ".", "mini_batch_size", ")", "\n", "index_target", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "block_num", "*", "self", ".", "world_size", ",", "self", ".", "world_size", ")", ":", "\n", "            ", "index", "=", "range", "(", "self", ".", "mini_batch_size", "*", "self", ".", "rank", "+", "self", ".", "mini_batch_size", "*", "i", ",", "min", "(", "self", ".", "mini_batch_size", "*", "self", ".", "rank", "+", "self", ".", "mini_batch_size", "*", "(", "i", "+", "1", ")", ",", "total_num", ")", ")", "\n", "index_target", ".", "extend", "(", "index", ")", "\n", "", "index_target_npy", "=", "np", ".", "array", "(", "index_target", ")", "\n", "final_idxs", "=", "list", "(", "np", ".", "array", "(", "final_idxs", ")", "[", "index_target_npy", "]", ")", "\n", "return", "final_idxs", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.datasets.sampler_ddp.RandomIdentitySampler_DDP.sample_list": [[171, 194], ["copy.deepcopy", "len", "numpy.random.choice().tolist", "range", "numpy.random.choice", "copy.deepcopy", "numpy.random.shuffle", "batch_indices.append", "len", "copy.deepcopy.remove", "len", "numpy.random.choice().tolist", "avai_idxs.pop", "numpy.random.choice"], "methods", ["None"], ["", "def", "sample_list", "(", "self", ")", ":", "\n", "#np.random.seed(self._seed)", "\n", "        ", "avai_pids", "=", "copy", ".", "deepcopy", "(", "self", ".", "pids", ")", "\n", "batch_idxs_dict", "=", "{", "}", "\n", "\n", "batch_indices", "=", "[", "]", "\n", "while", "len", "(", "avai_pids", ")", ">=", "self", ".", "num_pids_per_batch", ":", "\n", "            ", "selected_pids", "=", "np", ".", "random", ".", "choice", "(", "avai_pids", ",", "self", ".", "num_pids_per_batch", ",", "replace", "=", "False", ")", ".", "tolist", "(", ")", "\n", "for", "pid", "in", "selected_pids", ":", "\n", "                ", "if", "pid", "not", "in", "batch_idxs_dict", ":", "\n", "                    ", "idxs", "=", "copy", ".", "deepcopy", "(", "self", ".", "index_dic", "[", "pid", "]", ")", "\n", "if", "len", "(", "idxs", ")", "<", "self", ".", "num_instances", ":", "\n", "                        ", "idxs", "=", "np", ".", "random", ".", "choice", "(", "idxs", ",", "size", "=", "self", ".", "num_instances", ",", "replace", "=", "True", ")", ".", "tolist", "(", ")", "\n", "", "np", ".", "random", ".", "shuffle", "(", "idxs", ")", "\n", "batch_idxs_dict", "[", "pid", "]", "=", "idxs", "\n", "\n", "", "avai_idxs", "=", "batch_idxs_dict", "[", "pid", "]", "\n", "for", "_", "in", "range", "(", "self", ".", "num_instances", ")", ":", "\n", "                    ", "batch_indices", ".", "append", "(", "avai_idxs", ".", "pop", "(", "0", ")", ")", "\n", "\n", "", "if", "len", "(", "avai_idxs", ")", "<", "self", ".", "num_instances", ":", "avai_pids", ".", "remove", "(", "pid", ")", "\n", "\n", "", "", "return", "batch_indices", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.datasets.sampler_ddp.RandomIdentitySampler_DDP.__len__": [[195, 197], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.datasets.sampler_ddp._get_global_gloo_group": [[12, 21], ["torch.get_backend", "torch.new_group"], "function", ["None"], ["def", "_get_global_gloo_group", "(", ")", ":", "\n", "    ", "\"\"\"\n    Return a process group based on gloo backend, containing all the ranks\n    The result is cached.\n    \"\"\"", "\n", "if", "dist", ".", "get_backend", "(", ")", "==", "\"nccl\"", ":", "\n", "        ", "return", "dist", ".", "new_group", "(", "backend", "=", "\"gloo\"", ")", "\n", "", "else", ":", "\n", "        ", "return", "dist", ".", "group", ".", "WORLD", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.datasets.sampler_ddp._serialize_to_tensor": [[22, 37], ["torch.get_backend", "torch.device", "torch.device", "pickle.dumps", "torch.ByteStorage.from_buffer", "torch.ByteStorage.from_buffer", "torch.ByteTensor().to", "torch.ByteTensor().to", "len", "print", "torch.ByteTensor", "torch.ByteTensor", "torch.get_rank", "len"], "function", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.utils.get_rank"], ["", "", "def", "_serialize_to_tensor", "(", "data", ",", "group", ")", ":", "\n", "    ", "backend", "=", "dist", ".", "get_backend", "(", "group", ")", "\n", "assert", "backend", "in", "[", "\"gloo\"", ",", "\"nccl\"", "]", "\n", "device", "=", "torch", ".", "device", "(", "\"cpu\"", "if", "backend", "==", "\"gloo\"", "else", "\"cuda\"", ")", "\n", "\n", "buffer", "=", "pickle", ".", "dumps", "(", "data", ")", "\n", "if", "len", "(", "buffer", ")", ">", "1024", "**", "3", ":", "\n", "        ", "print", "(", "\n", "\"Rank {} trying to all-gather {:.2f} GB of data on device {}\"", ".", "format", "(", "\n", "dist", ".", "get_rank", "(", ")", ",", "len", "(", "buffer", ")", "/", "(", "1024", "**", "3", ")", ",", "device", "\n", ")", "\n", ")", "\n", "", "storage", "=", "torch", ".", "ByteStorage", ".", "from_buffer", "(", "buffer", ")", "\n", "tensor", "=", "torch", ".", "ByteTensor", "(", "storage", ")", ".", "to", "(", "device", "=", "device", ")", "\n", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.datasets.sampler_ddp._pad_to_largest_tensor": [[38, 63], ["torch.get_world_size", "torch.tensor", "torch.tensor", "torch.all_gather", "max", "torch.zeros", "torch.zeros", "int", "torch.zeros", "torch.zeros", "torch.cat", "torch.cat", "torch.cat.numel", "range", "size.item"], "function", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.utils.get_world_size", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.datasets.sampler_ddp.all_gather", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.utils.SmoothedValue.max"], ["", "def", "_pad_to_largest_tensor", "(", "tensor", ",", "group", ")", ":", "\n", "    ", "\"\"\"\n    Returns:\n        list[int]: size of the tensor, on each rank\n        Tensor: padded tensor that has the max size\n    \"\"\"", "\n", "world_size", "=", "dist", ".", "get_world_size", "(", "group", "=", "group", ")", "\n", "assert", "(", "\n", "world_size", ">=", "1", "\n", ")", ",", "\"comm.gather/all_gather must be called from ranks within the given group!\"", "\n", "local_size", "=", "torch", ".", "tensor", "(", "[", "tensor", ".", "numel", "(", ")", "]", ",", "dtype", "=", "torch", ".", "int64", ",", "device", "=", "tensor", ".", "device", ")", "\n", "size_list", "=", "[", "\n", "torch", ".", "zeros", "(", "[", "1", "]", ",", "dtype", "=", "torch", ".", "int64", ",", "device", "=", "tensor", ".", "device", ")", "for", "_", "in", "range", "(", "world_size", ")", "\n", "]", "\n", "dist", ".", "all_gather", "(", "size_list", ",", "local_size", ",", "group", "=", "group", ")", "\n", "size_list", "=", "[", "int", "(", "size", ".", "item", "(", ")", ")", "for", "size", "in", "size_list", "]", "\n", "\n", "max_size", "=", "max", "(", "size_list", ")", "\n", "\n", "# we pad the tensor because torch all_gather does not support", "\n", "# gathering tensors of different shapes", "\n", "if", "local_size", "!=", "max_size", ":", "\n", "        ", "padding", "=", "torch", ".", "zeros", "(", "(", "max_size", "-", "local_size", ",", ")", ",", "dtype", "=", "torch", ".", "uint8", ",", "device", "=", "tensor", ".", "device", ")", "\n", "tensor", "=", "torch", ".", "cat", "(", "(", "tensor", ",", "padding", ")", ",", "dim", "=", "0", ")", "\n", "", "return", "size_list", ",", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.datasets.sampler_ddp.all_gather": [[64, 98], ["sampler_ddp._serialize_to_tensor", "sampler_ddp._pad_to_largest_tensor", "max", "torch.all_gather", "zip", "torch.get_world_size", "sampler_ddp._get_global_gloo_group", "torch.get_world_size", "torch.empty", "torch.empty", "data_list.append", "_serialize_to_tensor.cpu().numpy().tobytes", "pickle.loads", "_serialize_to_tensor.cpu().numpy", "_serialize_to_tensor.cpu"], "function", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.datasets.sampler_ddp._serialize_to_tensor", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.datasets.sampler_ddp._pad_to_largest_tensor", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.utils.SmoothedValue.max", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.datasets.sampler_ddp.all_gather", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.utils.get_world_size", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.datasets.sampler_ddp._get_global_gloo_group", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.utils.get_world_size"], ["", "def", "all_gather", "(", "data", ",", "group", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Run all_gather on arbitrary picklable data (not necessarily tensors).\n    Args:\n        data: any picklable object\n        group: a torch process group. By default, will use a group which\n            contains all ranks on gloo backend.\n    Returns:\n        list[data]: list of data gathered from each rank\n    \"\"\"", "\n", "if", "dist", ".", "get_world_size", "(", ")", "==", "1", ":", "\n", "        ", "return", "[", "data", "]", "\n", "", "if", "group", "is", "None", ":", "\n", "        ", "group", "=", "_get_global_gloo_group", "(", ")", "\n", "", "if", "dist", ".", "get_world_size", "(", "group", ")", "==", "1", ":", "\n", "        ", "return", "[", "data", "]", "\n", "\n", "", "tensor", "=", "_serialize_to_tensor", "(", "data", ",", "group", ")", "\n", "\n", "size_list", ",", "tensor", "=", "_pad_to_largest_tensor", "(", "tensor", ",", "group", ")", "\n", "max_size", "=", "max", "(", "size_list", ")", "\n", "\n", "# receiving Tensor from all ranks", "\n", "tensor_list", "=", "[", "\n", "torch", ".", "empty", "(", "(", "max_size", ",", ")", ",", "dtype", "=", "torch", ".", "uint8", ",", "device", "=", "tensor", ".", "device", ")", "for", "_", "in", "size_list", "\n", "]", "\n", "dist", ".", "all_gather", "(", "tensor_list", ",", "tensor", ",", "group", "=", "group", ")", "\n", "\n", "data_list", "=", "[", "]", "\n", "for", "size", ",", "tensor", "in", "zip", "(", "size_list", ",", "tensor_list", ")", ":", "\n", "        ", "buffer", "=", "tensor", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tobytes", "(", ")", "[", ":", "size", "]", "\n", "data_list", ".", "append", "(", "pickle", ".", "loads", "(", "buffer", ")", ")", "\n", "\n", "", "return", "data_list", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.datasets.sampler_ddp.shared_random_seed": [[99, 110], ["numpy.random.randint", "sampler_ddp.all_gather"], "function", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.datasets.sampler_ddp.all_gather"], ["", "def", "shared_random_seed", "(", ")", ":", "\n", "    ", "\"\"\"\n    Returns:\n        int: a random number that is the same across all workers.\n            If workers need a shared RNG, they can use this shared seed to\n            create one.\n    All workers must call this function, otherwise it will deadlock.\n    \"\"\"", "\n", "ints", "=", "np", ".", "random", ".", "randint", "(", "2", "**", "31", ")", "\n", "all_ints", "=", "all_gather", "(", "ints", ")", "\n", "return", "all_ints", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.datasets.mm.MM.__init__": [[15, 40], ["bases.BaseImageDataset.__init__", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "mm.MM.process_msmt", "mm.MM.extend", "mm.MM._process_dir", "mm.MM._process_dir", "mm.MM.get_imagedata_info", "mm.MM.get_imagedata_info", "mm.MM.get_imagedata_info", "mm.MM.process_label", "print", "mm.MM.print_dataset_statistics"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.softmax_loss.LabelSmoothingCrossEntropy.__init__", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.datasets.mm.MM.process_msmt", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.datasets.mm.MM._process_dir", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.datasets.mm.MM._process_dir", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.datasets.bases.BaseDataset.get_imagedata_info", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.datasets.bases.BaseDataset.get_imagedata_info", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.datasets.bases.BaseDataset.get_imagedata_info", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.datasets.mm.MM.process_label", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.datasets.bases.BaseImageDataset.print_dataset_statistics"], ["    ", "def", "__init__", "(", "self", ",", "root", "=", "''", ",", "verbose", "=", "True", ",", "pid_begin", "=", "0", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "MM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dataset_dir", "=", "osp", ".", "join", "(", "root", ",", "'market1501'", ")", "\n", "self", ".", "query_dir", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'query'", ")", "\n", "self", ".", "gallery_dir", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'bounding_box_test'", ")", "\n", "\n", "market_dir", "=", "'/home/michuan.lh/datasets/market1501/bounding_box_train'", "\n", "msmt_dir", "=", "'/home/michuan.lh/datasets/MSMT17/train'", "\n", "train", "=", "self", ".", "process_msmt", "(", "msmt_dir", ")", "\n", "train", ".", "extend", "(", "self", ".", "process_label", "(", "market_dir", ",", "b_pid", "=", "1041", ",", "b_camid", "=", "15", ")", ")", "\n", "\n", "query", "=", "self", ".", "_process_dir", "(", "self", ".", "query_dir", ",", "relabel", "=", "False", ")", "\n", "gallery", "=", "self", ".", "_process_dir", "(", "self", ".", "gallery_dir", ",", "relabel", "=", "False", ")", "\n", "\n", "if", "verbose", ":", "\n", "            ", "print", "(", "\"=> MM loaded\"", ")", "\n", "self", ".", "print_dataset_statistics", "(", "train", ",", "query", ",", "gallery", ")", "\n", "\n", "", "self", ".", "train", "=", "train", "\n", "self", ".", "query", "=", "query", "\n", "self", ".", "gallery", "=", "gallery", "\n", "\n", "self", ".", "num_train_pids", ",", "self", ".", "num_train_imgs", ",", "self", ".", "num_train_cams", ",", "self", ".", "num_train_vids", "=", "self", ".", "get_imagedata_info", "(", "self", ".", "train", ")", "\n", "self", ".", "num_query_pids", ",", "self", ".", "num_query_imgs", ",", "self", ".", "num_query_cams", ",", "self", ".", "num_query_vids", "=", "self", ".", "get_imagedata_info", "(", "self", ".", "query", ")", "\n", "self", ".", "num_gallery_pids", ",", "self", ".", "num_gallery_imgs", ",", "self", ".", "num_gallery_cams", ",", "self", ".", "num_gallery_vids", "=", "self", ".", "get_imagedata_info", "(", "self", ".", "gallery", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.datasets.mm.MM._process_dir": [[42, 63], ["glob.glob", "re.compile", "set", "sorted", "sorted", "os.join", "os.join", "map", "set.add", "map", "dataset.append", "re.compile.search().groups", "enumerate", "re.compile.search().groups", "re.compile.search", "re.compile.search"], "methods", ["None"], ["", "def", "_process_dir", "(", "self", ",", "dir_path", ",", "relabel", "=", "False", ")", ":", "\n", "        ", "img_paths", "=", "glob", ".", "glob", "(", "osp", ".", "join", "(", "dir_path", ",", "'*.jpg'", ")", ")", "\n", "pattern", "=", "re", ".", "compile", "(", "r'([-\\d]+)_c(\\d)'", ")", "\n", "\n", "pid_container", "=", "set", "(", ")", "\n", "for", "img_path", "in", "sorted", "(", "img_paths", ")", ":", "\n", "            ", "pid", ",", "_", "=", "map", "(", "int", ",", "pattern", ".", "search", "(", "img_path", ")", ".", "groups", "(", ")", ")", "\n", "if", "pid", "==", "-", "1", ":", "continue", "# junk images are just ignored", "\n", "pid_container", ".", "add", "(", "pid", ")", "\n", "", "pid2label", "=", "{", "pid", ":", "label", "for", "label", ",", "pid", "in", "enumerate", "(", "pid_container", ")", "}", "\n", "dataset", "=", "[", "]", "\n", "for", "img_path", "in", "sorted", "(", "img_paths", ")", ":", "\n", "            ", "pid", ",", "camid", "=", "map", "(", "int", ",", "pattern", ".", "search", "(", "img_path", ")", ".", "groups", "(", ")", ")", "\n", "if", "pid", "==", "-", "1", ":", "continue", "# junk images are just ignored", "\n", "assert", "0", "<=", "pid", "<=", "1501", "# pid == 0 means background", "\n", "assert", "1", "<=", "camid", "<=", "6", "\n", "camid", "-=", "1", "# index starts from 0", "\n", "if", "relabel", ":", "pid", "=", "pid2label", "[", "pid", "]", "\n", "\n", "dataset", ".", "append", "(", "(", "img_path", ",", "pid", ",", "camid", ",", "1", ")", ")", "\n", "", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.datasets.mm.MM.process_label": [[64, 86], ["os.listdir", "os.listdir", "os.listdir", "os.listdir", "re.compile", "set", "set", "sorted", "map", "set.add", "set.add", "map", "dataset.append", "re.compile.search().groups", "enumerate", "re.compile.search().groups", "os.path.splitext", "os.path.splitext", "os.path.splitext", "os.path.splitext", "os.path.splitext", "os.path.splitext", "os.path.splitext", "os.path.splitext", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "re.compile.search", "re.compile.search"], "methods", ["None"], ["", "def", "process_label", "(", "self", ",", "root_dir", ",", "b_pid", "=", "0", ",", "b_camid", "=", "0", ")", ":", "\n", "        ", "img_paths", "=", "os", ".", "listdir", "(", "root_dir", ")", "\n", "pattern", "=", "re", ".", "compile", "(", "r'([-\\d]+)_c(\\d)'", ")", "\n", "pid_container", "=", "set", "(", ")", "\n", "camid_container", "=", "set", "(", ")", "\n", "EXTs", "=", "(", "'.jpg'", ",", "'.png'", ",", "'.jpeg'", ",", "'.bmp'", ",", "'.ppm'", ")", "\n", "for", "img_path", "in", "img_paths", ":", "\n", "            ", "if", "os", ".", "path", ".", "splitext", "(", "img_path", ")", "[", "-", "1", "]", "not", "in", "EXTs", ":", "continue", "\n", "pid", ",", "camid", "=", "map", "(", "int", ",", "pattern", ".", "search", "(", "img_path", ")", ".", "groups", "(", ")", ")", "\n", "if", "pid", "==", "-", "1", ":", "continue", "# junk images are just ignored", "\n", "pid_container", ".", "add", "(", "pid", ")", "\n", "camid_container", ".", "add", "(", "camid", ")", "\n", "", "pid2label", "=", "{", "pid", ":", "label", "for", "label", ",", "pid", "in", "enumerate", "(", "pid_container", ")", "}", "\n", "dataset", "=", "[", "]", "\n", "for", "img_path", "in", "sorted", "(", "img_paths", ")", ":", "\n", "            ", "if", "os", ".", "path", ".", "splitext", "(", "img_path", ")", "[", "-", "1", "]", "not", "in", "EXTs", ":", "continue", "\n", "pid", ",", "camid", "=", "map", "(", "int", ",", "pattern", ".", "search", "(", "img_path", ")", ".", "groups", "(", ")", ")", "\n", "camid", "-=", "1", "# index starts from 0", "\n", "if", "pid", "==", "-", "1", ":", "continue", "# junk images are just ignored", "\n", "pid", "=", "pid2label", "[", "pid", "]", "\n", "dataset", ".", "append", "(", "(", "os", ".", "path", ".", "join", "(", "root_dir", ",", "img_path", ")", ",", "b_pid", "+", "pid", ",", "b_camid", "+", "camid", ",", "1", ")", ")", "\n", "", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.datasets.mm.MM.process_msmt": [[87, 100], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "set", "enumerate", "open", "txt.readlines", "img_info.split", "int", "int", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "dataset.append", "os.path.join.split", "os.path.join.split"], "methods", ["None"], ["", "def", "process_msmt", "(", "self", ",", "msmt_dir", ")", ":", "\n", "        ", "list_path", "=", "os", ".", "path", ".", "join", "(", "msmt_dir", ",", "'../list_train.txt'", ")", "\n", "with", "open", "(", "list_path", ",", "'r'", ")", "as", "txt", ":", "\n", "            ", "lines", "=", "txt", ".", "readlines", "(", ")", "\n", "", "dataset", "=", "[", "]", "\n", "pid_container", "=", "set", "(", ")", "\n", "for", "img_idx", ",", "img_info", "in", "enumerate", "(", "lines", ")", ":", "\n", "            ", "img_path", ",", "pid", "=", "img_info", ".", "split", "(", "' '", ")", "\n", "pid", "=", "int", "(", "pid", ")", "# no need to relabel", "\n", "camid", "=", "int", "(", "img_path", ".", "split", "(", "'_'", ")", "[", "2", "]", ")", "\n", "img_path", "=", "os", ".", "path", ".", "join", "(", "msmt_dir", ",", "img_path", ")", "\n", "dataset", ".", "append", "(", "(", "img_path", ",", "pid", ",", "camid", "-", "1", ",", "1", ")", ")", "\n", "", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.datasets.bases.BaseDataset.get_imagedata_info": [[32, 47], ["set", "set", "set", "len", "len", "len", "len"], "methods", ["None"], ["def", "get_imagedata_info", "(", "self", ",", "data", ")", ":", "\n", "        ", "pids", ",", "cams", ",", "tracks", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "for", "_", ",", "pid", ",", "camid", ",", "trackid", "in", "data", ":", "\n", "            ", "pids", "+=", "[", "pid", "]", "\n", "cams", "+=", "[", "camid", "]", "\n", "tracks", "+=", "[", "trackid", "]", "\n", "", "pids", "=", "set", "(", "pids", ")", "\n", "cams", "=", "set", "(", "cams", ")", "\n", "tracks", "=", "set", "(", "tracks", ")", "\n", "num_pids", "=", "len", "(", "pids", ")", "\n", "num_cams", "=", "len", "(", "cams", ")", "\n", "num_imgs", "=", "len", "(", "data", ")", "\n", "num_views", "=", "len", "(", "tracks", ")", "\n", "return", "num_pids", ",", "num_imgs", ",", "num_cams", ",", "num_views", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.datasets.bases.BaseDataset.print_dataset_statistics": [[48, 50], ["None"], "methods", ["None"], ["", "def", "print_dataset_statistics", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.datasets.bases.BaseImageDataset.print_dataset_statistics": [[57, 70], ["bases.BaseImageDataset.get_imagedata_info", "bases.BaseImageDataset.get_imagedata_info", "bases.BaseImageDataset.get_imagedata_info", "logging.getLogger", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.datasets.bases.BaseDataset.get_imagedata_info", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.datasets.bases.BaseDataset.get_imagedata_info", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.datasets.bases.BaseDataset.get_imagedata_info"], ["def", "print_dataset_statistics", "(", "self", ",", "train", ",", "query", ",", "gallery", ")", ":", "\n", "        ", "num_train_pids", ",", "num_train_imgs", ",", "num_train_cams", ",", "num_train_views", "=", "self", ".", "get_imagedata_info", "(", "train", ")", "\n", "num_query_pids", ",", "num_query_imgs", ",", "num_query_cams", ",", "num_train_views", "=", "self", ".", "get_imagedata_info", "(", "query", ")", "\n", "num_gallery_pids", ",", "num_gallery_imgs", ",", "num_gallery_cams", ",", "num_train_views", "=", "self", ".", "get_imagedata_info", "(", "gallery", ")", "\n", "logger", "=", "logging", ".", "getLogger", "(", "\"transreid.check\"", ")", "\n", "logger", ".", "info", "(", "\"Dataset statistics:\"", ")", "\n", "logger", ".", "info", "(", "\"  ----------------------------------------\"", ")", "\n", "logger", ".", "info", "(", "\"  subset   | # ids | # images | # cameras\"", ")", "\n", "logger", ".", "info", "(", "\"  ----------------------------------------\"", ")", "\n", "logger", ".", "info", "(", "\"  train    | {:5d} | {:8d} | {:9d}\"", ".", "format", "(", "num_train_pids", ",", "num_train_imgs", ",", "num_train_cams", ")", ")", "\n", "logger", ".", "info", "(", "\"  query    | {:5d} | {:8d} | {:9d}\"", ".", "format", "(", "num_query_pids", ",", "num_query_imgs", ",", "num_query_cams", ")", ")", "\n", "logger", ".", "info", "(", "\"  gallery  | {:5d} | {:8d} | {:9d}\"", ".", "format", "(", "num_gallery_pids", ",", "num_gallery_imgs", ",", "num_gallery_cams", ")", ")", "\n", "logger", ".", "info", "(", "\"  ----------------------------------------\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.datasets.bases.ImageDataset.__init__": [[72, 75], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "transform", "=", "None", ")", ":", "\n", "        ", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "transform", "=", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.datasets.bases.ImageDataset.__len__": [[76, 78], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.datasets.bases.ImageDataset.__getitem__": [[79, 87], ["bases.read_image", "bases.ImageDataset.transform"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.datasets.bases.read_image"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "img_path", ",", "pid", ",", "camid", ",", "trackid", "=", "self", ".", "dataset", "[", "index", "]", "\n", "img", "=", "read_image", "(", "img_path", ")", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "", "return", "img", ",", "pid", ",", "camid", ",", "trackid", ",", "img_path", "\n", "#  return img, pid, camid, trackid,img_path.split('/')[-1]", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.datasets.bases.read_image": [[11, 25], ["os.exists", "IOError", "PIL.Image.open().convert", "print", "PIL.Image.open"], "function", ["None"], ["def", "read_image", "(", "img_path", ")", ":", "\n", "    ", "\"\"\"Keep reading image until succeed.\n    This can avoid IOError incurred by heavy IO process.\"\"\"", "\n", "got_img", "=", "False", "\n", "if", "not", "osp", ".", "exists", "(", "img_path", ")", ":", "\n", "        ", "raise", "IOError", "(", "\"{} does not exist\"", ".", "format", "(", "img_path", ")", ")", "\n", "", "while", "not", "got_img", ":", "\n", "        ", "try", ":", "\n", "            ", "img", "=", "Image", ".", "open", "(", "img_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "got_img", "=", "True", "\n", "", "except", "IOError", ":", "\n", "            ", "print", "(", "\"IOError incurred when reading '{}'. Will redo. Don't worry. Just chill.\"", ".", "format", "(", "img_path", ")", ")", "\n", "pass", "\n", "", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.datasets.sampler.RandomIdentitySampler.__init__": [[18, 37], ["collections.defaultdict", "enumerate", "list", "sampler.RandomIdentitySampler.index_dic[].append", "sampler.RandomIdentitySampler.index_dic.keys", "len"], "methods", ["None"], ["\n", "", "class", "RandomIdentitySampler", "(", "Sampler", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "data_source", ",", "num_instances", ")", ":", "\n", "        ", "self", ".", "data_source", "=", "data_source", "\n", "self", ".", "num_instances", "=", "num_instances", "\n", "self", ".", "index_dic", "=", "defaultdict", "(", "list", ")", "\n", "for", "index", ",", "(", "_", ",", "pid", ",", "_", ")", "in", "enumerate", "(", "data_source", ")", ":", "\n", "            ", "self", ".", "index_dic", "[", "pid", "]", ".", "append", "(", "index", ")", "\n", "", "self", ".", "pids", "=", "list", "(", "self", ".", "index_dic", ".", "keys", "(", ")", ")", "\n", "self", ".", "num_samples", "=", "len", "(", "self", ".", "pids", ")", "\n", "\n", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_samples", "*", "self", ".", "num_instances", "\n", "\n", "", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "indices", "=", "torch", ".", "randperm", "(", "self", ".", "num_samples", ")", ".", "tolist", "(", ")", "\n", "ret", "=", "[", "]", "\n", "for", "i", "in", "indices", ":", "\n", "            ", "pid", "=", "self", ".", "pids", "[", "i", "]", "\n", "t", "=", "self", ".", "index_dic", "[", "pid", "]", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.datasets.sampler.RandomIdentitySampler.__iter__": [[38, 65], ["collections.defaultdict", "copy.deepcopy", "iter", "copy.deepcopy", "random.shuffle", "len", "random.sample", "len", "numpy.random.choice", "batch_idxs_dict[].pop.append", "batch_idxs_dict[].pop", "final_idxs.extend", "len", "batch_idxs_dict[].append", "len", "copy.deepcopy.remove"], "methods", ["None"], ["if", "len", "(", "t", ")", ">=", "self", ".", "num_instances", ":", "\n", "                ", "t", "=", "np", ".", "random", ".", "choice", "(", "t", ",", "size", "=", "self", ".", "num_instances", ",", "replace", "=", "False", ")", "\n", "", "else", ":", "\n", "                ", "t", "=", "np", ".", "random", ".", "choice", "(", "t", ",", "size", "=", "self", ".", "num_instances", ",", "replace", "=", "True", ")", "\n", "", "ret", ".", "extend", "(", "t", ")", "\n", "", "return", "iter", "(", "ret", ")", "\n", "\n", "\n", "", "", "class", "RandomMultipleGallerySampler", "(", "Sampler", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "data_source", ",", "num_instances", "=", "4", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "data_source", ")", "\n", "self", ".", "data_source", "=", "data_source", "\n", "self", ".", "index_pid", "=", "defaultdict", "(", "int", ")", "\n", "self", ".", "pid_cam", "=", "defaultdict", "(", "list", ")", "\n", "self", ".", "pid_index", "=", "defaultdict", "(", "list", ")", "\n", "self", ".", "num_instances", "=", "num_instances", "\n", "\n", "for", "index", ",", "(", "_", ",", "pid", ",", "cam", ")", "in", "enumerate", "(", "data_source", ")", ":", "\n", "            ", "if", "pid", "<", "0", ":", "\n", "                ", "continue", "\n", "", "self", ".", "index_pid", "[", "index", "]", "=", "pid", "\n", "self", ".", "pid_cam", "[", "pid", "]", ".", "append", "(", "cam", ")", "\n", "self", ".", "pid_index", "[", "pid", "]", ".", "append", "(", "index", ")", "\n", "\n", "", "self", ".", "pids", "=", "list", "(", "self", ".", "pid_index", ".", "keys", "(", ")", ")", "\n", "self", ".", "num_samples", "=", "len", "(", "self", ".", "pids", ")", "\n", "\n", "", "def", "__len__", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.datasets.sampler.RandomIdentitySampler.__len__": [[66, 68], ["None"], "methods", ["None"], ["        ", "return", "self", ".", "num_samples", "*", "self", ".", "num_instances", "\n", "\n", "", "def", "__iter__", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.datasets.sampler.RandomIdentitySampler_IdUniform.__init__": [[81, 90], ["collections.defaultdict", "enumerate", "list", "len", "sampler.RandomIdentitySampler_IdUniform.index_dic[].append", "sampler.RandomIdentitySampler_IdUniform.index_dic.keys"], "methods", ["None"], ["index", "=", "self", ".", "pid_index", "[", "pid_i", "]", "\n", "select_cams", "=", "No_index", "(", "cams", ",", "i_cam", ")", "\n", "\n", "if", "select_cams", ":", "\n", "\n", "                ", "if", "len", "(", "select_cams", ")", ">=", "self", ".", "num_instances", ":", "\n", "                    ", "cam_indexes", "=", "np", ".", "random", ".", "choice", "(", "select_cams", ",", "size", "=", "self", ".", "num_instances", "-", "1", ",", "replace", "=", "False", ")", "\n", "", "else", ":", "\n", "                    ", "cam_indexes", "=", "np", ".", "random", ".", "choice", "(", "select_cams", ",", "size", "=", "self", ".", "num_instances", "-", "1", ",", "replace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.datasets.sampler.RandomIdentitySampler_IdUniform.__iter__": [[91, 101], ["torch.randperm", "iter", "numpy.random.choice", "ret.extend", "len"], "methods", ["None"], ["", "for", "kk", "in", "cam_indexes", ":", "\n", "                    ", "ret", ".", "append", "(", "index", "[", "kk", "]", ")", "\n", "\n", "", "", "else", ":", "\n", "                ", "select_indexes", "=", "No_index", "(", "index", ",", "i", ")", "\n", "if", "not", "select_indexes", ":", "\n", "                    ", "continue", "\n", "", "if", "len", "(", "select_indexes", ")", ">=", "self", ".", "num_instances", ":", "\n", "                    ", "ind_indexes", "=", "np", ".", "random", ".", "choice", "(", "select_indexes", ",", "size", "=", "self", ".", "num_instances", "-", "1", ",", "replace", "=", "False", ")", "\n", "", "else", ":", "\n", "                    ", "ind_indexes", "=", "np", ".", "random", ".", "choice", "(", "select_indexes", ",", "size", "=", "self", ".", "num_instances", "-", "1", ",", "replace", "=", "True", ")", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.datasets.sampler.RandomIdentitySampler_IdUniform.__len__": [[102, 104], ["None"], "methods", ["None"], ["\n", "", "for", "kk", "in", "ind_indexes", ":", "\n", "                    ", "ret", ".", "append", "(", "index", "[", "kk", "]", ")", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.datasets.preprocessing.RandomErasing.__init__": [[17, 23], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "probability", "=", "0.5", ",", "sl", "=", "0.02", ",", "sh", "=", "0.4", ",", "r1", "=", "0.3", ",", "mean", "=", "(", "0.4914", ",", "0.4822", ",", "0.4465", ")", ")", ":", "\n", "        ", "self", ".", "probability", "=", "probability", "\n", "self", ".", "mean", "=", "mean", "\n", "self", ".", "sl", "=", "sl", "\n", "self", ".", "sh", "=", "sh", "\n", "self", ".", "r1", "=", "r1", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.datasets.preprocessing.RandomErasing.__call__": [[24, 50], ["range", "random.uniform", "random.uniform", "int", "int", "random.uniform", "round", "round", "random.randint", "random.randint", "img.size", "img.size", "math.sqrt", "math.sqrt", "img.size", "img.size", "img.size", "img.size", "img.size"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "\n", "        ", "if", "random", ".", "uniform", "(", "0", ",", "1", ")", ">=", "self", ".", "probability", ":", "\n", "            ", "return", "img", "\n", "\n", "", "for", "attempt", "in", "range", "(", "100", ")", ":", "\n", "            ", "area", "=", "img", ".", "size", "(", ")", "[", "1", "]", "*", "img", ".", "size", "(", ")", "[", "2", "]", "\n", "\n", "target_area", "=", "random", ".", "uniform", "(", "self", ".", "sl", ",", "self", ".", "sh", ")", "*", "area", "\n", "aspect_ratio", "=", "random", ".", "uniform", "(", "self", ".", "r1", ",", "1", "/", "self", ".", "r1", ")", "\n", "\n", "h", "=", "int", "(", "round", "(", "math", ".", "sqrt", "(", "target_area", "*", "aspect_ratio", ")", ")", ")", "\n", "w", "=", "int", "(", "round", "(", "math", ".", "sqrt", "(", "target_area", "/", "aspect_ratio", ")", ")", ")", "\n", "\n", "if", "w", "<", "img", ".", "size", "(", ")", "[", "2", "]", "and", "h", "<", "img", ".", "size", "(", ")", "[", "1", "]", ":", "\n", "                ", "x1", "=", "random", ".", "randint", "(", "0", ",", "img", ".", "size", "(", ")", "[", "1", "]", "-", "h", ")", "\n", "y1", "=", "random", ".", "randint", "(", "0", ",", "img", ".", "size", "(", ")", "[", "2", "]", "-", "w", ")", "\n", "if", "img", ".", "size", "(", ")", "[", "0", "]", "==", "3", ":", "\n", "                    ", "img", "[", "0", ",", "x1", ":", "x1", "+", "h", ",", "y1", ":", "y1", "+", "w", "]", "=", "self", ".", "mean", "[", "0", "]", "\n", "img", "[", "1", ",", "x1", ":", "x1", "+", "h", ",", "y1", ":", "y1", "+", "w", "]", "=", "self", ".", "mean", "[", "1", "]", "\n", "img", "[", "2", ",", "x1", ":", "x1", "+", "h", ",", "y1", ":", "y1", "+", "w", "]", "=", "self", ".", "mean", "[", "2", "]", "\n", "", "else", ":", "\n", "                    ", "img", "[", "0", ",", "x1", ":", "x1", "+", "h", ",", "y1", ":", "y1", "+", "w", "]", "=", "self", ".", "mean", "[", "0", "]", "\n", "", "return", "img", "\n", "\n", "", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.datasets.make_dataloader.train_collate_fn": [[19, 28], ["zip", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.stack", "torch.stack"], "function", ["None"], ["def", "train_collate_fn", "(", "batch", ")", ":", "\n", "    ", "\"\"\"\n    # collate_fn\u8fd9\u4e2a\u51fd\u6570\u7684\u8f93\u5165\u5c31\u662f\u4e00\u4e2alist\uff0clist\u7684\u957f\u5ea6\u662f\u4e00\u4e2abatch size\uff0clist\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f__getitem__\u5f97\u5230\u7684\u7ed3\u679c\n    \"\"\"", "\n", "imgs", ",", "pids", ",", "camids", ",", "viewids", ",", "_", "=", "zip", "(", "*", "batch", ")", "\n", "pids", "=", "torch", ".", "tensor", "(", "pids", ",", "dtype", "=", "torch", ".", "int64", ")", "\n", "viewids", "=", "torch", ".", "tensor", "(", "viewids", ",", "dtype", "=", "torch", ".", "int64", ")", "\n", "camids", "=", "torch", ".", "tensor", "(", "camids", ",", "dtype", "=", "torch", ".", "int64", ")", "\n", "return", "torch", ".", "stack", "(", "imgs", ",", "dim", "=", "0", ")", ",", "pids", ",", "camids", ",", "viewids", ",", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.datasets.make_dataloader.val_collate_fn": [[29, 34], ["zip", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.stack", "torch.stack"], "function", ["None"], ["", "def", "val_collate_fn", "(", "batch", ")", ":", "\n", "    ", "imgs", ",", "pids", ",", "camids", ",", "viewids", ",", "img_paths", "=", "zip", "(", "*", "batch", ")", "\n", "viewids", "=", "torch", ".", "tensor", "(", "viewids", ",", "dtype", "=", "torch", ".", "int64", ")", "\n", "camids_batch", "=", "torch", ".", "tensor", "(", "camids", ",", "dtype", "=", "torch", ".", "int64", ")", "\n", "return", "torch", ".", "stack", "(", "imgs", ",", "dim", "=", "0", ")", ",", "pids", ",", "camids", ",", "camids_batch", ",", "viewids", ",", "img_paths", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.datasets.make_dataloader.make_dataloader": [[35, 112], ["torchvision.Compose", "torchvision.Compose", "bases.ImageDataset", "bases.ImageDataset", "bases.ImageDataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "OURAPI", "print", "len", "torchvision.Resize", "torchvision.RandomHorizontalFlip", "torchvision.Pad", "torchvision.RandomCrop", "torchvision.ToTensor", "torchvision.Normalize", "timm.data.random_erasing.RandomErasing", "torchvision.Resize", "torchvision.ToTensor", "torchvision.Normalize", "print", "sampler_ddp.RandomIdentitySampler_DDP", "torch.utils.data.sampler.BatchSampler", "torch.utils.data.sampler.BatchSampler", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "print", "torch.utils.data.DataLoader", "torch.get_world_size", "print", "torch.utils.data.DataLoader", "print", "sampler.RandomIdentitySampler", "sampler.RandomIdentitySampler_IdUniform"], "function", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.utils.get_world_size"], ["", "def", "make_dataloader", "(", "cfg", ")", ":", "\n", "    ", "train_transforms", "=", "T", ".", "Compose", "(", "[", "\n", "T", ".", "Resize", "(", "cfg", ".", "INPUT", ".", "SIZE_TRAIN", ",", "interpolation", "=", "3", ")", ",", "\n", "T", ".", "RandomHorizontalFlip", "(", "p", "=", "cfg", ".", "INPUT", ".", "PROB", ")", ",", "\n", "T", ".", "Pad", "(", "cfg", ".", "INPUT", ".", "PADDING", ")", ",", "\n", "T", ".", "RandomCrop", "(", "cfg", ".", "INPUT", ".", "SIZE_TRAIN", ")", ",", "\n", "T", ".", "ToTensor", "(", ")", ",", "\n", "T", ".", "Normalize", "(", "mean", "=", "cfg", ".", "INPUT", ".", "PIXEL_MEAN", ",", "std", "=", "cfg", ".", "INPUT", ".", "PIXEL_STD", ")", ",", "\n", "RandomErasing", "(", "probability", "=", "cfg", ".", "INPUT", ".", "RE_PROB", ",", "mode", "=", "'pixel'", ",", "max_count", "=", "1", ",", "device", "=", "'cpu'", ")", ",", "\n", "]", ")", "\n", "\n", "val_transforms", "=", "T", ".", "Compose", "(", "[", "\n", "T", ".", "Resize", "(", "cfg", ".", "INPUT", ".", "SIZE_TEST", ")", ",", "\n", "T", ".", "ToTensor", "(", ")", ",", "\n", "T", ".", "Normalize", "(", "mean", "=", "cfg", ".", "INPUT", ".", "PIXEL_MEAN", ",", "std", "=", "cfg", ".", "INPUT", ".", "PIXEL_STD", ")", "\n", "]", ")", "\n", "\n", "num_workers", "=", "cfg", ".", "DATALOADER", ".", "NUM_WORKERS", "\n", "\n", "if", "cfg", ".", "DATASETS", ".", "NAMES", "==", "'ourapi'", ":", "\n", "        ", "dataset", "=", "OURAPI", "(", "root_train", "=", "cfg", ".", "DATASETS", ".", "ROOT_TRAIN_DIR", ",", "root_val", "=", "cfg", ".", "DATASETS", ".", "ROOT_VAL_DIR", ",", "config", "=", "cfg", ")", "\n", "", "else", ":", "\n", "        ", "dataset", "=", "__factory", "[", "cfg", ".", "DATASETS", ".", "NAMES", "]", "(", "root", "=", "cfg", ".", "DATASETS", ".", "ROOT_DIR", ")", "\n", "\n", "", "train_set", "=", "ImageDataset", "(", "dataset", ".", "train", ",", "train_transforms", ")", "\n", "train_set_normal", "=", "ImageDataset", "(", "dataset", ".", "train", ",", "val_transforms", ")", "\n", "num_classes", "=", "dataset", ".", "num_train_pids", "\n", "cam_num", "=", "dataset", ".", "num_train_cams", "\n", "view_num", "=", "dataset", ".", "num_train_vids", "\n", "\n", "if", "cfg", ".", "DATALOADER", ".", "SAMPLER", "in", "[", "'softmax_triplet'", ",", "'img_triplet'", "]", ":", "\n", "        ", "print", "(", "'using img_triplet sampler'", ")", "\n", "if", "cfg", ".", "MODEL", ".", "DIST_TRAIN", ":", "\n", "            ", "print", "(", "'DIST_TRAIN START'", ")", "\n", "mini_batch_size", "=", "cfg", ".", "SOLVER", ".", "IMS_PER_BATCH", "//", "dist", ".", "get_world_size", "(", ")", "\n", "data_sampler", "=", "RandomIdentitySampler_DDP", "(", "dataset", ".", "train", ",", "cfg", ".", "SOLVER", ".", "IMS_PER_BATCH", ",", "cfg", ".", "DATALOADER", ".", "NUM_INSTANCE", ")", "\n", "batch_sampler", "=", "torch", ".", "utils", ".", "data", ".", "sampler", ".", "BatchSampler", "(", "data_sampler", ",", "mini_batch_size", ",", "True", ")", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_set", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", "batch_sampler", "=", "batch_sampler", ",", "\n", "collate_fn", "=", "train_collate_fn", ",", "\n", "pin_memory", "=", "True", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "train_loader", "=", "DataLoader", "(", "\n", "train_set", ",", "batch_size", "=", "cfg", ".", "SOLVER", ".", "IMS_PER_BATCH", ",", "\n", "sampler", "=", "RandomIdentitySampler", "(", "dataset", ".", "train", ",", "cfg", ".", "SOLVER", ".", "IMS_PER_BATCH", ",", "cfg", ".", "DATALOADER", ".", "NUM_INSTANCE", ")", ",", "\n", "num_workers", "=", "num_workers", ",", "collate_fn", "=", "train_collate_fn", "\n", ")", "\n", "", "", "elif", "cfg", ".", "DATALOADER", ".", "SAMPLER", "==", "'softmax'", ":", "\n", "        ", "print", "(", "'using softmax sampler'", ")", "\n", "train_loader", "=", "DataLoader", "(", "\n", "train_set", ",", "batch_size", "=", "cfg", ".", "SOLVER", ".", "IMS_PER_BATCH", ",", "shuffle", "=", "True", ",", "num_workers", "=", "num_workers", ",", "\n", "collate_fn", "=", "train_collate_fn", "\n", ")", "\n", "", "elif", "cfg", ".", "DATALOADER", ".", "SAMPLER", "in", "[", "'id_triplet'", ",", "'id'", "]", ":", "\n", "        ", "print", "(", "'using ID sampler'", ")", "\n", "train_loader", "=", "DataLoader", "(", "\n", "train_set", ",", "batch_size", "=", "cfg", ".", "SOLVER", ".", "IMS_PER_BATCH", ",", "\n", "sampler", "=", "RandomIdentitySampler_IdUniform", "(", "dataset", ".", "train", ",", "cfg", ".", "DATALOADER", ".", "NUM_INSTANCE", ")", ",", "\n", "num_workers", "=", "num_workers", ",", "collate_fn", "=", "train_collate_fn", ",", "drop_last", "=", "True", ",", "\n", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'unsupported sampler! expected softmax or triplet but got {}'", ".", "format", "(", "cfg", ".", "SAMPLER", ")", ")", "\n", "\n", "", "val_set", "=", "ImageDataset", "(", "dataset", ".", "query", "+", "dataset", ".", "gallery", ",", "val_transforms", ")", "\n", "\n", "val_loader", "=", "DataLoader", "(", "\n", "val_set", ",", "batch_size", "=", "cfg", ".", "TEST", ".", "IMS_PER_BATCH", ",", "shuffle", "=", "False", ",", "num_workers", "=", "num_workers", ",", "\n", "collate_fn", "=", "val_collate_fn", "\n", ")", "\n", "train_loader_normal", "=", "DataLoader", "(", "\n", "train_set_normal", ",", "batch_size", "=", "cfg", ".", "TEST", ".", "IMS_PER_BATCH", ",", "shuffle", "=", "False", ",", "num_workers", "=", "num_workers", ",", "\n", "collate_fn", "=", "val_collate_fn", "\n", ")", "\n", "return", "train_loader", ",", "train_loader_normal", ",", "val_loader", ",", "len", "(", "dataset", ".", "query", ")", ",", "num_classes", ",", "cam_num", ",", "view_num", "\n", "", ""]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.models.resnet_ibn.ResNetIBN.__init__": [[22, 71], ["print", "torch.nn.Module.__init__", "resnet_ibn.ResNetIBN.load_param", "torch.nn.Sequential", "pooling.build_pooling_layer", "torch.nn.init.constant_", "torch.nn.init.constant_", "resnet_ibn.ResNetIBN.feat_bn.bias.requires_grad_", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.init.kaiming_normal_", "torch.nn.init.constant_", "torch.nn.BatchNorm1d", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.init.normal_"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.softmax_loss.LabelSmoothingCrossEntropy.__init__", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.vit_pytorch.TransReID.load_param", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.models.pooling.build_pooling_layer"], ["def", "__init__", "(", "self", ",", "depth", ",", "pretrained", "=", "True", ",", "cut_at_pooling", "=", "False", ",", "\n", "num_features", "=", "0", ",", "norm", "=", "False", ",", "dropout", "=", "0", ",", "num_classes", "=", "0", ",", "pooling_type", "=", "'avg'", ",", "pretrained_path", "=", "''", ")", ":", "\n", "\n", "        ", "print", "(", "'pooling_type: {}'", ".", "format", "(", "pooling_type", ")", ")", "\n", "super", "(", "ResNetIBN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "depth", "=", "depth", "\n", "self", ".", "pretrained", "=", "pretrained", "\n", "self", ".", "cut_at_pooling", "=", "cut_at_pooling", "\n", "\n", "resnet", "=", "ResNetIBN", ".", "__factory", "[", "depth", "]", "(", "pretrained", "=", "pretrained", ")", "\n", "resnet", ".", "layer4", "[", "0", "]", ".", "conv2", ".", "stride", "=", "(", "1", ",", "1", ")", "\n", "resnet", ".", "layer4", "[", "0", "]", ".", "downsample", "[", "0", "]", ".", "stride", "=", "(", "1", ",", "1", ")", "\n", "resnet", "=", "self", ".", "load_param", "(", "resnet", ",", "model_path", "=", "pretrained_path", ")", "\n", "\n", "self", ".", "base", "=", "nn", ".", "Sequential", "(", "\n", "resnet", ".", "conv1", ",", "resnet", ".", "bn1", ",", "resnet", ".", "relu", ",", "resnet", ".", "maxpool", ",", "\n", "resnet", ".", "layer1", ",", "resnet", ".", "layer2", ",", "resnet", ".", "layer3", ",", "resnet", ".", "layer4", ")", "\n", "\n", "self", ".", "gap", "=", "build_pooling_layer", "(", "pooling_type", ")", "\n", "\n", "if", "not", "self", ".", "cut_at_pooling", ":", "\n", "            ", "self", ".", "num_features", "=", "num_features", "\n", "self", ".", "norm", "=", "norm", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "has_embedding", "=", "num_features", ">", "0", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "\n", "out_planes", "=", "resnet", ".", "fc", ".", "in_features", "\n", "\n", "# Append new layers", "\n", "if", "self", ".", "has_embedding", ":", "\n", "                ", "self", ".", "feat", "=", "nn", ".", "Linear", "(", "out_planes", ",", "self", ".", "num_features", ")", "\n", "self", ".", "feat_bn", "=", "nn", ".", "BatchNorm1d", "(", "self", ".", "num_features", ")", "\n", "init", ".", "kaiming_normal_", "(", "self", ".", "feat", ".", "weight", ",", "mode", "=", "'fan_out'", ")", "\n", "init", ".", "constant_", "(", "self", ".", "feat", ".", "bias", ",", "0", ")", "\n", "", "else", ":", "\n", "# Change the num_features to CNN output channels", "\n", "                ", "self", ".", "num_features", "=", "out_planes", "\n", "self", ".", "feat_bn", "=", "nn", ".", "BatchNorm1d", "(", "self", ".", "num_features", ")", "\n", "", "self", ".", "feat_bn", ".", "bias", ".", "requires_grad_", "(", "False", ")", "\n", "if", "self", ".", "dropout", ">", "0", ":", "\n", "                ", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "self", ".", "dropout", ")", "\n", "", "if", "self", ".", "num_classes", ">", "0", ":", "\n", "                ", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "self", ".", "num_features", ",", "self", ".", "num_classes", ",", "bias", "=", "False", ")", "\n", "init", ".", "normal_", "(", "self", ".", "classifier", ".", "weight", ",", "std", "=", "0.001", ")", "\n", "\n", "", "", "init", ".", "constant_", "(", "self", ".", "feat_bn", ".", "weight", ",", "1", ")", "\n", "init", ".", "constant_", "(", "self", ".", "feat_bn", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.models.resnet_ibn.ResNetIBN.forward": [[75, 107], ["resnet_ibn.ResNetIBN.base", "resnet_ibn.ResNetIBN.gap", "x.view.view.view", "x.view.view.size", "resnet_ibn.ResNetIBN.feat_bn", "resnet_ibn.ResNetIBN.feat_bn", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "resnet_ibn.ResNetIBN.drop", "resnet_ibn.ResNetIBN.classifier", "resnet_ibn.ResNetIBN.feat", "torch.nn.functional.relu"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.triplet_loss.normalize", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.triplet_loss.normalize"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "base", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "gap", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "if", "self", ".", "cut_at_pooling", ":", "\n", "            ", "return", "x", "\n", "\n", "", "if", "self", ".", "has_embedding", ":", "\n", "            ", "bn_x", "=", "self", ".", "feat_bn", "(", "self", ".", "feat", "(", "x", ")", ")", "\n", "", "else", ":", "\n", "            ", "bn_x", "=", "self", ".", "feat_bn", "(", "x", ")", "\n", "\n", "", "if", "self", ".", "training", "is", "False", ":", "\n", "            ", "bn_x", "=", "F", ".", "normalize", "(", "bn_x", ")", "\n", "return", "bn_x", "\n", "\n", "", "if", "self", ".", "norm", ":", "\n", "            ", "bn_x", "=", "F", ".", "normalize", "(", "bn_x", ")", "\n", "", "elif", "self", ".", "has_embedding", ":", "\n", "            ", "bn_x", "=", "F", ".", "relu", "(", "bn_x", ")", "\n", "\n", "", "if", "self", ".", "dropout", ">", "0", ":", "\n", "            ", "bn_x", "=", "self", ".", "drop", "(", "bn_x", ")", "\n", "\n", "", "if", "self", ".", "num_classes", ">", "0", ":", "\n", "            ", "prob", "=", "self", ".", "classifier", "(", "bn_x", ")", "\n", "", "else", ":", "\n", "            ", "return", "bn_x", "\n", "\n", "", "return", "prob", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.models.resnet_ibn.ResNetIBN.load_param": [[124, 135], ["torch.load", "i.startswith", "[].copy_", "i.replace", "model.state_dict"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.solver.scheduler.Scheduler.state_dict"], ["", "def", "load_param", "(", "self", ",", "model", ",", "model_path", ")", ":", "\n", "        ", "param_dict", "=", "torch", ".", "load", "(", "model_path", ",", "map_location", "=", "'cpu'", ")", "\n", "for", "i", "in", "param_dict", ":", "\n", "            ", "if", "'fc'", "in", "i", "or", "'classifier'", "in", "i", "or", "'bottleneck'", "in", "i", ":", "\n", "                ", "continue", "\n", "", "if", "i", ".", "startswith", "(", "'base'", ")", ":", "\n", "                ", "j", "=", "i", ".", "replace", "(", "'base.'", ",", "''", ")", "\n", "", "else", ":", "\n", "                ", "j", "=", "i", "\n", "", "model", ".", "state_dict", "(", ")", "[", "j", "]", ".", "copy_", "(", "param_dict", "[", "i", "]", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.models.resnet_ibn.resnet_ibn50a": [[137, 139], ["resnet_ibn.ResNetIBN"], "function", ["None"], ["", "", "def", "resnet_ibn50a", "(", "**", "kwargs", ")", ":", "\n", "    ", "return", "ResNetIBN", "(", "'50a'", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.models.resnet_ibn.resnet_ibn101a": [[141, 143], ["resnet_ibn.ResNetIBN"], "function", ["None"], ["", "def", "resnet_ibn101a", "(", "**", "kwargs", ")", ":", "\n", "    ", "return", "ResNetIBN", "(", "'101a'", ",", "**", "kwargs", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.models.dsbn.DSBN2d.__init__": [[7, 12], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.softmax_loss.LabelSmoothingCrossEntropy.__init__"], ["    ", "def", "__init__", "(", "self", ",", "planes", ")", ":", "\n", "        ", "super", "(", "DSBN2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_features", "=", "planes", "\n", "self", ".", "BN_S", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "BN_T", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.models.dsbn.DSBN2d.forward": [[13, 24], ["x.size", "torch.split", "torch.split", "torch.split", "torch.split", "dsbn.DSBN2d.BN_S", "dsbn.DSBN2d.BN_T", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "dsbn.DSBN2d.BN_T", "int", "split[].contiguous", "split[].contiguous"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "(", "not", "self", ".", "training", ")", ":", "\n", "            ", "return", "self", ".", "BN_T", "(", "x", ")", "\n", "\n", "", "bs", "=", "x", ".", "size", "(", "0", ")", "\n", "assert", "(", "bs", "%", "2", "==", "0", ")", "\n", "split", "=", "torch", ".", "split", "(", "x", ",", "int", "(", "bs", "/", "2", ")", ",", "0", ")", "\n", "out1", "=", "self", ".", "BN_S", "(", "split", "[", "0", "]", ".", "contiguous", "(", ")", ")", "\n", "out2", "=", "self", ".", "BN_T", "(", "split", "[", "1", "]", ".", "contiguous", "(", ")", ")", "\n", "out", "=", "torch", ".", "cat", "(", "(", "out1", ",", "out2", ")", ",", "0", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.models.dsbn.DSBN1d.__init__": [[26, 31], ["torch.Module.__init__", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.softmax_loss.LabelSmoothingCrossEntropy.__init__"], ["    ", "def", "__init__", "(", "self", ",", "planes", ")", ":", "\n", "        ", "super", "(", "DSBN1d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_features", "=", "planes", "\n", "self", ".", "BN_S", "=", "nn", ".", "BatchNorm1d", "(", "planes", ")", "\n", "self", ".", "BN_T", "=", "nn", ".", "BatchNorm1d", "(", "planes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.models.dsbn.DSBN1d.forward": [[32, 43], ["x.size", "torch.split", "torch.split", "torch.split", "torch.split", "dsbn.DSBN1d.BN_S", "dsbn.DSBN1d.BN_T", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "dsbn.DSBN1d.BN_T", "int", "split[].contiguous", "split[].contiguous"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "(", "not", "self", ".", "training", ")", ":", "\n", "            ", "return", "self", ".", "BN_T", "(", "x", ")", "\n", "\n", "", "bs", "=", "x", ".", "size", "(", "0", ")", "\n", "assert", "(", "bs", "%", "2", "==", "0", ")", "\n", "split", "=", "torch", ".", "split", "(", "x", ",", "int", "(", "bs", "/", "2", ")", ",", "0", ")", "\n", "out1", "=", "self", ".", "BN_S", "(", "split", "[", "0", "]", ".", "contiguous", "(", ")", ")", "\n", "out2", "=", "self", ".", "BN_T", "(", "split", "[", "1", "]", ".", "contiguous", "(", ")", ")", "\n", "out", "=", "torch", ".", "cat", "(", "(", "out1", ",", "out2", ")", ",", "0", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.models.dsbn.convert_dsbn": [[44, 59], ["enumerate", "model.named_children", "isinstance", "dsbn.DSBN2d", "DSBN1d.BN_S.load_state_dict", "DSBN1d.BN_T.load_state_dict", "setattr", "isinstance", "next", "child.state_dict", "child.state_dict", "dsbn.DSBN1d", "DSBN1d.BN_S.load_state_dict", "DSBN1d.BN_T.load_state_dict", "setattr", "dsbn.convert_dsbn", "model.parameters", "child.state_dict", "child.state_dict"], "function", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.solver.scheduler.Scheduler.load_state_dict", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.solver.scheduler.Scheduler.load_state_dict", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.data.__init__.IterLoader.next", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.solver.scheduler.Scheduler.state_dict", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.solver.scheduler.Scheduler.state_dict", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.solver.scheduler.Scheduler.load_state_dict", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.solver.scheduler.Scheduler.load_state_dict", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.models.dsbn.convert_dsbn", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.solver.scheduler.Scheduler.state_dict", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.solver.scheduler.Scheduler.state_dict"], ["", "", "def", "convert_dsbn", "(", "model", ")", ":", "\n", "    ", "for", "_", ",", "(", "child_name", ",", "child", ")", "in", "enumerate", "(", "model", ".", "named_children", "(", ")", ")", ":", "\n", "        ", "assert", "(", "not", "next", "(", "model", ".", "parameters", "(", ")", ")", ".", "is_cuda", ")", "\n", "if", "isinstance", "(", "child", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "            ", "m", "=", "DSBN2d", "(", "child", ".", "num_features", ")", "\n", "m", ".", "BN_S", ".", "load_state_dict", "(", "child", ".", "state_dict", "(", ")", ")", "\n", "m", ".", "BN_T", ".", "load_state_dict", "(", "child", ".", "state_dict", "(", ")", ")", "\n", "setattr", "(", "model", ",", "child_name", ",", "m", ")", "\n", "", "elif", "isinstance", "(", "child", ",", "nn", ".", "BatchNorm1d", ")", ":", "\n", "            ", "m", "=", "DSBN1d", "(", "child", ".", "num_features", ")", "\n", "m", ".", "BN_S", ".", "load_state_dict", "(", "child", ".", "state_dict", "(", ")", ")", "\n", "m", ".", "BN_T", ".", "load_state_dict", "(", "child", ".", "state_dict", "(", ")", ")", "\n", "setattr", "(", "model", ",", "child_name", ",", "m", ")", "\n", "", "else", ":", "\n", "            ", "convert_dsbn", "(", "child", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.models.dsbn.convert_bn": [[60, 79], ["enumerate", "model.named_children", "isinstance", "torch.BatchNorm2d", "setattr", "isinstance", "next", "nn.BatchNorm1d.load_state_dict", "nn.BatchNorm1d.load_state_dict", "torch.BatchNorm1d", "setattr", "dsbn.convert_bn", "model.parameters", "child.BN_T.state_dict", "child.BN_S.state_dict", "nn.BatchNorm1d.load_state_dict", "nn.BatchNorm1d.load_state_dict", "child.BN_T.state_dict", "child.BN_S.state_dict"], "function", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.data.__init__.IterLoader.next", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.solver.scheduler.Scheduler.load_state_dict", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.solver.scheduler.Scheduler.load_state_dict", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.models.dsbn.convert_bn", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.solver.scheduler.Scheduler.state_dict", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.solver.scheduler.Scheduler.state_dict", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.solver.scheduler.Scheduler.load_state_dict", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.solver.scheduler.Scheduler.load_state_dict", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.solver.scheduler.Scheduler.state_dict", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.solver.scheduler.Scheduler.state_dict"], ["", "", "", "def", "convert_bn", "(", "model", ",", "use_target", "=", "True", ")", ":", "\n", "    ", "for", "_", ",", "(", "child_name", ",", "child", ")", "in", "enumerate", "(", "model", ".", "named_children", "(", ")", ")", ":", "\n", "        ", "assert", "(", "not", "next", "(", "model", ".", "parameters", "(", ")", ")", ".", "is_cuda", ")", "\n", "if", "isinstance", "(", "child", ",", "DSBN2d", ")", ":", "\n", "            ", "m", "=", "nn", ".", "BatchNorm2d", "(", "child", ".", "num_features", ")", "\n", "if", "use_target", ":", "\n", "                ", "m", ".", "load_state_dict", "(", "child", ".", "BN_T", ".", "state_dict", "(", ")", ")", "\n", "", "else", ":", "\n", "                ", "m", ".", "load_state_dict", "(", "child", ".", "BN_S", ".", "state_dict", "(", ")", ")", "\n", "", "setattr", "(", "model", ",", "child_name", ",", "m", ")", "\n", "", "elif", "isinstance", "(", "child", ",", "DSBN1d", ")", ":", "\n", "            ", "m", "=", "nn", ".", "BatchNorm1d", "(", "child", ".", "num_features", ")", "\n", "if", "use_target", ":", "\n", "                ", "m", ".", "load_state_dict", "(", "child", ".", "BN_T", ".", "state_dict", "(", ")", ")", "\n", "", "else", ":", "\n", "                ", "m", ".", "load_state_dict", "(", "child", ".", "BN_S", ".", "state_dict", "(", ")", ")", "\n", "", "setattr", "(", "model", ",", "child_name", ",", "m", ")", "\n", "", "else", ":", "\n", "            ", "convert_bn", "(", "child", ",", "use_target", "=", "use_target", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.models.cm.CM.forward": [[11, 19], ["ctx.save_for_backward", "inputs.mm", "ctx.features.t"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "inputs", ",", "targets", ",", "features", ",", "momentum", ")", ":", "\n", "        ", "ctx", ".", "features", "=", "features", "\n", "ctx", ".", "momentum", "=", "momentum", "\n", "ctx", ".", "save_for_backward", "(", "inputs", ",", "targets", ")", "\n", "outputs", "=", "inputs", ".", "mm", "(", "ctx", ".", "features", ".", "t", "(", ")", ")", "\n", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.models.cm.CM.backward": [[20, 33], ["zip", "grad_outputs.mm", "ctx.features[].norm"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_outputs", ")", ":", "\n", "        ", "inputs", ",", "targets", "=", "ctx", ".", "saved_tensors", "\n", "grad_inputs", "=", "None", "\n", "if", "ctx", ".", "needs_input_grad", "[", "0", "]", ":", "\n", "            ", "grad_inputs", "=", "grad_outputs", ".", "mm", "(", "ctx", ".", "features", ")", "\n", "\n", "# momentum update", "\n", "", "for", "x", ",", "y", "in", "zip", "(", "inputs", ",", "targets", ")", ":", "\n", "            ", "ctx", ".", "features", "[", "y", "]", "=", "ctx", ".", "momentum", "*", "ctx", ".", "features", "[", "y", "]", "+", "(", "1.", "-", "ctx", ".", "momentum", ")", "*", "x", "\n", "ctx", ".", "features", "[", "y", "]", "/=", "ctx", ".", "features", "[", "y", "]", ".", "norm", "(", ")", "\n", "\n", "", "return", "grad_inputs", ",", "None", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.models.cm.CM_Hard.forward": [[41, 49], ["ctx.save_for_backward", "inputs.mm", "ctx.features.t"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "inputs", ",", "targets", ",", "features", ",", "momentum", ")", ":", "\n", "        ", "ctx", ".", "features", "=", "features", "\n", "ctx", ".", "momentum", "=", "momentum", "\n", "ctx", ".", "save_for_backward", "(", "inputs", ",", "targets", ")", "\n", "outputs", "=", "inputs", ".", "mm", "(", "ctx", ".", "features", ".", "t", "(", ")", ")", "\n", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.models.cm.CM_Hard.backward": [[50, 72], ["collections.defaultdict", "zip", "collections.defaultdict.items", "grad_outputs.mm", "targets.tolist", "batch_centers[].append", "numpy.argmin", "ctx.features[].norm", "distances.append", "numpy.array", "distance.cpu().numpy", "feature.unsqueeze().mm", "ctx.features[].unsqueeze().t", "distance.cpu", "feature.unsqueeze", "ctx.features[].unsqueeze"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_outputs", ")", ":", "\n", "        ", "inputs", ",", "targets", "=", "ctx", ".", "saved_tensors", "\n", "grad_inputs", "=", "None", "\n", "if", "ctx", ".", "needs_input_grad", "[", "0", "]", ":", "\n", "            ", "grad_inputs", "=", "grad_outputs", ".", "mm", "(", "ctx", ".", "features", ")", "\n", "\n", "", "batch_centers", "=", "collections", ".", "defaultdict", "(", "list", ")", "\n", "for", "instance_feature", ",", "index", "in", "zip", "(", "inputs", ",", "targets", ".", "tolist", "(", ")", ")", ":", "\n", "            ", "batch_centers", "[", "index", "]", ".", "append", "(", "instance_feature", ")", "\n", "\n", "", "for", "index", ",", "features", "in", "batch_centers", ".", "items", "(", ")", ":", "\n", "            ", "distances", "=", "[", "]", "\n", "for", "feature", "in", "features", ":", "\n", "                ", "distance", "=", "feature", ".", "unsqueeze", "(", "0", ")", ".", "mm", "(", "ctx", ".", "features", "[", "index", "]", ".", "unsqueeze", "(", "0", ")", ".", "t", "(", ")", ")", "[", "0", "]", "[", "0", "]", "\n", "distances", ".", "append", "(", "distance", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "", "median", "=", "np", ".", "argmin", "(", "np", ".", "array", "(", "distances", ")", ")", "\n", "ctx", ".", "features", "[", "index", "]", "=", "ctx", ".", "features", "[", "index", "]", "*", "ctx", ".", "momentum", "+", "(", "1", "-", "ctx", ".", "momentum", ")", "*", "features", "[", "median", "]", "\n", "ctx", ".", "features", "[", "index", "]", "/=", "ctx", ".", "features", "[", "index", "]", ".", "norm", "(", ")", "\n", "\n", "", "return", "grad_inputs", ",", "None", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.models.cm.ClusterMemory.__init__": [[79, 89], ["super().__init__", "cm.ClusterMemory.register_buffer", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.softmax_loss.LabelSmoothingCrossEntropy.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_features", ",", "num_samples", ",", "temp", "=", "0.05", ",", "momentum", "=", "0.2", ",", "use_hard", "=", "False", ")", ":", "\n", "        ", "super", "(", "ClusterMemory", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_features", "=", "num_features", "\n", "self", ".", "num_samples", "=", "num_samples", "\n", "\n", "self", ".", "momentum", "=", "momentum", "\n", "self", ".", "temp", "=", "temp", "\n", "self", ".", "use_hard", "=", "use_hard", "\n", "\n", "self", ".", "register_buffer", "(", "'features'", ",", "torch", ".", "zeros", "(", "num_samples", ",", "num_features", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.models.cm.ClusterMemory.forward": [[90, 101], ["torch.normalize().cuda", "torch.normalize().cuda", "torch.cross_entropy", "torch.cross_entropy", "cm.cm_hard", "cm.cm", "torch.normalize", "torch.normalize"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.models.cm.cm_hard", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.models.cm.cm", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.triplet_loss.normalize", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.triplet_loss.normalize"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "targets", ")", ":", "\n", "\n", "        ", "inputs", "=", "F", ".", "normalize", "(", "inputs", ",", "dim", "=", "1", ")", ".", "cuda", "(", ")", "\n", "if", "self", ".", "use_hard", ":", "\n", "            ", "outputs", "=", "cm_hard", "(", "inputs", ",", "targets", ",", "self", ".", "features", ",", "self", ".", "momentum", ")", "\n", "", "else", ":", "\n", "            ", "outputs", "=", "cm", "(", "inputs", ",", "targets", ",", "self", ".", "features", ",", "self", ".", "momentum", ")", "\n", "\n", "", "outputs", "/=", "self", ".", "temp", "\n", "loss", "=", "F", ".", "cross_entropy", "(", "outputs", ",", "targets", ")", "\n", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.models.cm.cm": [[35, 37], ["CM.apply", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor", "torch.Tensor"], "function", ["None"], ["", "", "def", "cm", "(", "inputs", ",", "indexes", ",", "features", ",", "momentum", "=", "0.5", ")", ":", "\n", "    ", "return", "CM", ".", "apply", "(", "inputs", ",", "indexes", ",", "features", ",", "torch", ".", "Tensor", "(", "[", "momentum", "]", ")", ".", "to", "(", "inputs", ".", "device", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.models.cm.cm_hard": [[74, 76], ["CM_Hard.apply", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor", "torch.Tensor"], "function", ["None"], ["", "", "def", "cm_hard", "(", "inputs", ",", "indexes", ",", "features", ",", "momentum", "=", "0.5", ")", ":", "\n", "    ", "return", "CM_Hard", ".", "apply", "(", "inputs", ",", "indexes", ",", "features", ",", "torch", ".", "Tensor", "(", "[", "momentum", "]", ")", ".", "to", "(", "inputs", ".", "device", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.models.resnet.ResNet.__init__": [[23, 71], ["print", "torch.nn.Module.__init__", "resnet.ResNet.ResNet.load_param", "torch.nn.Sequential", "pooling.build_pooling_layer", "torch.nn.init.constant_", "torch.nn.init.constant_", "KeyError", "resnet.ResNet.ResNet.feat_bn.bias.requires_grad_", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.init.kaiming_normal_", "torch.nn.init.constant_", "torch.nn.BatchNorm1d", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.init.normal_"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.softmax_loss.LabelSmoothingCrossEntropy.__init__", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.vit_pytorch.TransReID.load_param", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.models.pooling.build_pooling_layer"], ["def", "__init__", "(", "self", ",", "depth", ",", "pretrained_path", "=", "''", ",", "cut_at_pooling", "=", "False", ",", "\n", "num_features", "=", "0", ",", "norm", "=", "False", ",", "dropout", "=", "0", ",", "num_classes", "=", "0", ",", "pooling_type", "=", "'avg'", ")", ":", "\n", "        ", "print", "(", "'pooling_type: {}'", ".", "format", "(", "pooling_type", ")", ")", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "#  self.pretrained = pretrained", "\n", "self", ".", "depth", "=", "depth", "\n", "self", ".", "cut_at_pooling", "=", "cut_at_pooling", "\n", "# Construct base (pretrained) resnet", "\n", "if", "depth", "not", "in", "ResNet", ".", "__factory", ":", "\n", "            ", "raise", "KeyError", "(", "\"Unsupported depth:\"", ",", "depth", ")", "\n", "", "resnet", "=", "ResNet", ".", "__factory", "[", "depth", "]", "(", "pretrained", "=", "False", ")", "\n", "resnet", ".", "layer4", "[", "0", "]", ".", "conv2", ".", "stride", "=", "(", "1", ",", "1", ")", "\n", "resnet", ".", "layer4", "[", "0", "]", ".", "downsample", "[", "0", "]", ".", "stride", "=", "(", "1", ",", "1", ")", "\n", "resnet", "=", "self", ".", "load_param", "(", "resnet", ",", "model_path", "=", "pretrained_path", ")", "\n", "self", ".", "base", "=", "nn", ".", "Sequential", "(", "\n", "resnet", ".", "conv1", ",", "resnet", ".", "bn1", ",", "resnet", ".", "relu", ",", "resnet", ".", "maxpool", ",", "\n", "resnet", ".", "layer1", ",", "resnet", ".", "layer2", ",", "resnet", ".", "layer3", ",", "resnet", ".", "layer4", ")", "\n", "\n", "\n", "self", ".", "gap", "=", "build_pooling_layer", "(", "pooling_type", ")", "\n", "\n", "if", "not", "self", ".", "cut_at_pooling", ":", "\n", "            ", "self", ".", "num_features", "=", "num_features", "\n", "self", ".", "norm", "=", "norm", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "has_embedding", "=", "num_features", ">", "0", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "\n", "out_planes", "=", "resnet", ".", "fc", ".", "in_features", "\n", "\n", "# Append new layers", "\n", "if", "self", ".", "has_embedding", ":", "\n", "                ", "self", ".", "feat", "=", "nn", ".", "Linear", "(", "out_planes", ",", "self", ".", "num_features", ")", "\n", "self", ".", "feat_bn", "=", "nn", ".", "BatchNorm1d", "(", "self", ".", "num_features", ")", "\n", "init", ".", "kaiming_normal_", "(", "self", ".", "feat", ".", "weight", ",", "mode", "=", "'fan_out'", ")", "\n", "init", ".", "constant_", "(", "self", ".", "feat", ".", "bias", ",", "0", ")", "\n", "", "else", ":", "\n", "# Change the num_features to CNN output channels", "\n", "                ", "self", ".", "num_features", "=", "out_planes", "\n", "self", ".", "feat_bn", "=", "nn", ".", "BatchNorm1d", "(", "self", ".", "num_features", ")", "\n", "", "self", ".", "feat_bn", ".", "bias", ".", "requires_grad_", "(", "False", ")", "\n", "if", "self", ".", "dropout", ">", "0", ":", "\n", "                ", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "self", ".", "dropout", ")", "\n", "", "if", "self", ".", "num_classes", ">", "0", ":", "\n", "                ", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "self", ".", "num_features", ",", "self", ".", "num_classes", ",", "bias", "=", "False", ")", "\n", "init", ".", "normal_", "(", "self", ".", "classifier", ".", "weight", ",", "std", "=", "0.001", ")", "\n", "", "", "init", ".", "constant_", "(", "self", ".", "feat_bn", ".", "weight", ",", "1", ")", "\n", "init", ".", "constant_", "(", "self", ".", "feat_bn", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.models.resnet.ResNet.forward": [[75, 108], ["x.view.view.size", "resnet.ResNet.base", "resnet.ResNet.gap", "x.view.view.view", "x.view.view.size", "resnet.ResNet.feat_bn", "resnet.ResNet.feat_bn", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "resnet.ResNet.drop", "resnet.ResNet.classifier", "resnet.ResNet.feat", "torch.nn.functional.relu"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.triplet_loss.normalize", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.triplet_loss.normalize"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "bs", "=", "x", ".", "size", "(", "0", ")", "\n", "x", "=", "self", ".", "base", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "gap", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "if", "self", ".", "cut_at_pooling", ":", "\n", "            ", "return", "x", "\n", "\n", "", "if", "self", ".", "has_embedding", ":", "\n", "            ", "bn_x", "=", "self", ".", "feat_bn", "(", "self", ".", "feat", "(", "x", ")", ")", "\n", "", "else", ":", "\n", "            ", "bn_x", "=", "self", ".", "feat_bn", "(", "x", ")", "\n", "\n", "", "if", "(", "self", ".", "training", "is", "False", ")", ":", "\n", "            ", "bn_x", "=", "F", ".", "normalize", "(", "bn_x", ")", "\n", "return", "bn_x", "\n", "\n", "", "if", "self", ".", "norm", ":", "\n", "            ", "bn_x", "=", "F", ".", "normalize", "(", "bn_x", ")", "\n", "", "elif", "self", ".", "has_embedding", ":", "\n", "            ", "bn_x", "=", "F", ".", "relu", "(", "bn_x", ")", "\n", "\n", "", "if", "self", ".", "dropout", ">", "0", ":", "\n", "            ", "bn_x", "=", "self", ".", "drop", "(", "bn_x", ")", "\n", "\n", "", "if", "self", ".", "num_classes", ">", "0", ":", "\n", "            ", "prob", "=", "self", ".", "classifier", "(", "bn_x", ")", "\n", "", "else", ":", "\n", "            ", "return", "bn_x", "\n", "\n", "", "return", "prob", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.models.resnet.ResNet.load_param": [[126, 137], ["torch.load", "i.startswith", "[].copy_", "i.replace", "model.state_dict"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.solver.scheduler.Scheduler.state_dict"], ["", "def", "load_param", "(", "self", ",", "model", ",", "model_path", ")", ":", "\n", "        ", "param_dict", "=", "torch", ".", "load", "(", "model_path", ",", "map_location", "=", "'cpu'", ")", "\n", "for", "i", "in", "param_dict", ":", "\n", "            ", "if", "'fc'", "in", "i", "or", "'classifier'", "in", "i", "or", "'bottleneck'", "in", "i", ":", "\n", "                ", "continue", "\n", "", "if", "i", ".", "startswith", "(", "'base'", ")", ":", "\n", "                ", "j", "=", "i", ".", "replace", "(", "'base.'", ",", "''", ")", "\n", "", "else", ":", "\n", "                ", "j", "=", "i", "\n", "", "model", ".", "state_dict", "(", ")", "[", "j", "]", ".", "copy_", "(", "param_dict", "[", "i", "]", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.models.resnet.resnet18": [[138, 140], ["resnet.ResNet"], "function", ["None"], ["", "", "def", "resnet18", "(", "**", "kwargs", ")", ":", "\n", "    ", "return", "ResNet", "(", "18", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.models.resnet.resnet34": [[142, 144], ["resnet.ResNet"], "function", ["None"], ["", "def", "resnet34", "(", "**", "kwargs", ")", ":", "\n", "    ", "return", "ResNet", "(", "34", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.models.resnet.resnet50": [[146, 148], ["resnet.ResNet"], "function", ["None"], ["", "def", "resnet50", "(", "**", "kwargs", ")", ":", "\n", "    ", "return", "ResNet", "(", "50", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.models.resnet.resnet101": [[150, 152], ["resnet.ResNet"], "function", ["None"], ["", "def", "resnet101", "(", "**", "kwargs", ")", ":", "\n", "    ", "return", "ResNet", "(", "101", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.models.resnet.resnet152": [[154, 156], ["resnet.ResNet"], "function", ["None"], ["", "def", "resnet152", "(", "**", "kwargs", ")", ":", "\n", "    ", "return", "ResNet", "(", "152", ",", "**", "kwargs", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.models.pooling.GeneralizedMeanPoolingList.__init__": [[34, 38], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.softmax_loss.LabelSmoothingCrossEntropy.__init__"], ["def", "__init__", "(", "self", ",", "output_size", "=", "1", ",", "eps", "=", "1e-6", ")", ":", "\n", "        ", "super", "(", "GeneralizedMeanPoolingList", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "output_size", "=", "output_size", "\n", "self", ".", "eps", "=", "eps", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.models.pooling.GeneralizedMeanPoolingList.forward": [[39, 46], ["torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "x.clamp.clamp.clamp", "torch.nn.functional.adaptive_avg_pool2d", "torch.nn.functional.adaptive_avg_pool2d", "torch.nn.functional.adaptive_avg_pool2d", "torch.nn.functional.adaptive_avg_pool2d", "outs.append", "torch.stack", "torch.stack", "torch.stack", "torch.stack"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x_list", ")", ":", "\n", "        ", "outs", "=", "[", "]", "\n", "for", "x", "in", "x_list", ":", "\n", "            ", "x", "=", "x", ".", "clamp", "(", "min", "=", "self", ".", "eps", ")", "\n", "out", "=", "torch", ".", "nn", ".", "functional", ".", "adaptive_avg_pool2d", "(", "x", ",", "self", ".", "output_size", ")", "\n", "outs", ".", "append", "(", "out", ")", "\n", "", "return", "torch", ".", "stack", "(", "outs", ",", "-", "1", ")", ".", "mean", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.models.pooling.GeneralizedMeanPoolingList.__repr__": [[47, 54], ["str"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "(", "\n", "self", ".", "__class__", ".", "__name__", "\n", "+", "\"(\"", "\n", "+", "\"output_size=\"", "\n", "+", "str", "(", "self", ".", "output_size", ")", "\n", "+", "\")\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.models.pooling.GeneralizedMeanPooling.__init__": [[72, 78], ["super().__init__", "float"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.softmax_loss.LabelSmoothingCrossEntropy.__init__"], ["def", "__init__", "(", "self", ",", "norm", ",", "output_size", "=", "1", ",", "eps", "=", "1e-6", ")", ":", "\n", "        ", "super", "(", "GeneralizedMeanPooling", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "norm", ">", "0", "\n", "self", ".", "p", "=", "float", "(", "norm", ")", "\n", "self", ".", "output_size", "=", "output_size", "\n", "self", ".", "eps", "=", "eps", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.models.pooling.GeneralizedMeanPooling.forward": [[79, 83], ["x.clamp().pow.clamp().pow.clamp().pow", "torch.nn.functional.adaptive_avg_pool2d().pow", "torch.nn.functional.adaptive_avg_pool2d().pow", "torch.nn.functional.adaptive_avg_pool2d().pow", "torch.nn.functional.adaptive_avg_pool2d().pow", "x.clamp().pow.clamp().pow.clamp", "torch.nn.functional.adaptive_avg_pool2d", "torch.nn.functional.adaptive_avg_pool2d", "torch.nn.functional.adaptive_avg_pool2d", "torch.nn.functional.adaptive_avg_pool2d"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", ".", "clamp", "(", "min", "=", "self", ".", "eps", ")", ".", "pow", "(", "self", ".", "p", ")", "\n", "return", "torch", ".", "nn", ".", "functional", ".", "adaptive_avg_pool2d", "(", "x", ",", "self", ".", "output_size", ")", ".", "pow", "(", "\n", "1.0", "/", "self", ".", "p", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.models.pooling.GeneralizedMeanPooling.__repr__": [[85, 94], ["str", "str"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "(", "\n", "self", ".", "__class__", ".", "__name__", "\n", "+", "\"(\"", "\n", "+", "str", "(", "self", ".", "p", ")", "\n", "+", "\", \"", "\n", "+", "\"output_size=\"", "\n", "+", "str", "(", "self", ".", "output_size", ")", "\n", "+", "\")\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.models.pooling.GeneralizedMeanPoolingP.__init__": [[101, 104], ["pooling.GeneralizedMeanPooling.__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.softmax_loss.LabelSmoothingCrossEntropy.__init__"], ["def", "__init__", "(", "self", ",", "norm", "=", "3", ",", "output_size", "=", "1", ",", "eps", "=", "1e-6", ")", ":", "\n", "        ", "super", "(", "GeneralizedMeanPoolingP", ",", "self", ")", ".", "__init__", "(", "norm", ",", "output_size", ",", "eps", ")", "\n", "self", ".", "p", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "1", ")", "*", "norm", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.models.pooling.GeneralizedMeanPoolingFpn.__init__": [[121, 127], ["super().__init__", "float"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.softmax_loss.LabelSmoothingCrossEntropy.__init__"], ["def", "__init__", "(", "self", ",", "norm", ",", "output_size", "=", "1", ",", "eps", "=", "1e-6", ")", ":", "\n", "        ", "super", "(", "GeneralizedMeanPoolingFpn", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "norm", ">", "0", "\n", "self", ".", "p", "=", "float", "(", "norm", ")", "\n", "self", ".", "output_size", "=", "output_size", "\n", "self", ".", "eps", "=", "eps", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.models.pooling.GeneralizedMeanPoolingFpn.forward": [[128, 137], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "x.clamp().pow.clamp().pow.clamp().pow", "torch.nn.functional.adaptive_avg_pool2d().pow", "torch.nn.functional.adaptive_avg_pool2d().pow", "torch.nn.functional.adaptive_avg_pool2d().pow", "torch.nn.functional.adaptive_avg_pool2d().pow", "outs.append", "x.clamp().pow.clamp().pow.clamp", "torch.nn.functional.adaptive_avg_pool2d", "torch.nn.functional.adaptive_avg_pool2d", "torch.nn.functional.adaptive_avg_pool2d", "torch.nn.functional.adaptive_avg_pool2d"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x_lists", ")", ":", "\n", "        ", "outs", "=", "[", "]", "\n", "for", "x", "in", "x_lists", ":", "\n", "            ", "x", "=", "x", ".", "clamp", "(", "min", "=", "self", ".", "eps", ")", ".", "pow", "(", "self", ".", "p", ")", "\n", "out", "=", "torch", ".", "nn", ".", "functional", ".", "adaptive_avg_pool2d", "(", "x", ",", "self", ".", "output_size", ")", ".", "pow", "(", "\n", "1.0", "/", "self", ".", "p", "\n", ")", "\n", "outs", ".", "append", "(", "out", ")", "\n", "", "return", "torch", ".", "cat", "(", "outs", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.models.pooling.GeneralizedMeanPoolingFpn.__repr__": [[138, 147], ["str", "str"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "(", "\n", "self", ".", "__class__", ".", "__name__", "\n", "+", "\"(\"", "\n", "+", "str", "(", "self", ".", "p", ")", "\n", "+", "\", \"", "\n", "+", "\"output_size=\"", "\n", "+", "str", "(", "self", ".", "output_size", ")", "\n", "+", "\")\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.models.pooling.GeneralizedMeanPoolingPFpn.__init__": [[154, 157], ["pooling.GeneralizedMeanPoolingFpn.__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.softmax_loss.LabelSmoothingCrossEntropy.__init__"], ["def", "__init__", "(", "self", ",", "norm", "=", "3", ",", "output_size", "=", "1", ",", "eps", "=", "1e-6", ")", ":", "\n", "        ", "super", "(", "GeneralizedMeanPoolingPFpn", ",", "self", ")", ".", "__init__", "(", "norm", ",", "output_size", ",", "eps", ")", "\n", "self", ".", "p", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "1", ")", "*", "norm", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.models.pooling.AdaptiveAvgMaxPool2d.__init__": [[160, 163], ["super().__init__", "pooling.FastGlobalAvgPool2d"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.softmax_loss.LabelSmoothingCrossEntropy.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "AdaptiveAvgMaxPool2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "avgpool", "=", "FastGlobalAvgPool2d", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.models.pooling.AdaptiveAvgMaxPool2d.forward": [[164, 169], ["pooling.AdaptiveAvgMaxPool2d.avgpool", "torch.adaptive_max_pool2d", "torch.adaptive_max_pool2d"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x_avg", "=", "self", ".", "avgpool", "(", "x", ",", "self", ".", "output_size", ")", "\n", "x_max", "=", "F", ".", "adaptive_max_pool2d", "(", "x", ",", "1", ")", "\n", "x", "=", "x_max", "+", "x_avg", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.models.pooling.FastGlobalAvgPool2d.__init__": [[172, 175], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.softmax_loss.LabelSmoothingCrossEntropy.__init__"], ["    ", "def", "__init__", "(", "self", ",", "flatten", "=", "False", ")", ":", "\n", "        ", "super", "(", "FastGlobalAvgPool2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "flatten", "=", "flatten", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.models.pooling.FastGlobalAvgPool2d.forward": [[176, 185], ["x.size", "x.view().mean", "x.view().mean().view", "x.size", "x.size", "x.view", "x.view().mean", "x.view", "x.size", "x.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "flatten", ":", "\n", "            ", "in_size", "=", "x", ".", "size", "(", ")", "\n", "return", "x", ".", "view", "(", "(", "in_size", "[", "0", "]", ",", "in_size", "[", "1", "]", ",", "-", "1", ")", ")", ".", "mean", "(", "dim", "=", "2", ")", "\n", "", "else", ":", "\n", "            ", "return", "(", "\n", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "x", ".", "size", "(", "1", ")", ",", "-", "1", ")", "\n", ".", "mean", "(", "-", "1", ")", "\n", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "x", ".", "size", "(", "1", ")", ",", "1", ",", "1", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.models.pooling.Flatten.forward": [[198, 200], ["input.view", "input.size"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "input", ".", "view", "(", "input", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.models.pooling.avg_pooling": [[188, 190], ["torch.nn.AdaptiveAvgPool2d"], "function", ["None"], ["", "", "", "def", "avg_pooling", "(", ")", ":", "\n", "    ", "return", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "# return FastGlobalAvgPool2d()", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.models.pooling.max_pooling": [[193, 195], ["torch.nn.AdaptiveMaxPool2d"], "function", ["None"], ["", "def", "max_pooling", "(", ")", ":", "\n", "    ", "return", "nn", ".", "AdaptiveMaxPool2d", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.models.pooling.pooling_names": [[212, 214], ["sorted", "__pooling_factory.keys"], "function", ["None"], ["def", "pooling_names", "(", ")", ":", "\n", "    ", "return", "sorted", "(", "__pooling_factory", ".", "keys", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.models.pooling.build_pooling_layer": [[216, 227], ["KeyError"], "function", ["None"], ["", "def", "build_pooling_layer", "(", "name", ")", ":", "\n", "    ", "\"\"\"\n    Create a pooling layer.\n    Parameters\n    ----------\n    name : str\n        The backbone name.\n    \"\"\"", "\n", "if", "name", "not", "in", "__pooling_factory", ":", "\n", "        ", "raise", "KeyError", "(", "\"Unknown pooling layer:\"", ",", "name", ")", "\n", "", "return", "__pooling_factory", "[", "name", "]", "(", ")", "", "", ""]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.models.resnet_ibn_a.BasicBlock.__init__": [[25, 34], ["torch.Module.__init__", "resnet_ibn_a.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "resnet_ibn_a.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.softmax_loss.LabelSmoothingCrossEntropy.__init__", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.resnet.conv3x3", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.resnet.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.models.resnet_ibn_a.BasicBlock.forward": [[35, 52], ["resnet_ibn_a.BasicBlock.conv1", "resnet_ibn_a.BasicBlock.bn1", "resnet_ibn_a.BasicBlock.relu", "resnet_ibn_a.BasicBlock.conv2", "resnet_ibn_a.BasicBlock.bn2", "resnet_ibn_a.BasicBlock.relu", "resnet_ibn_a.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.models.resnet_ibn_a.IBN.__init__": [[55, 62], ["torch.Module.__init__", "int", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.softmax_loss.LabelSmoothingCrossEntropy.__init__"], ["    ", "def", "__init__", "(", "self", ",", "planes", ")", ":", "\n", "        ", "super", "(", "IBN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "half1", "=", "int", "(", "planes", "/", "2", ")", "\n", "self", ".", "half", "=", "half1", "\n", "half2", "=", "planes", "-", "half1", "\n", "self", ".", "IN", "=", "nn", ".", "InstanceNorm2d", "(", "half1", ",", "affine", "=", "True", ")", "\n", "self", ".", "BN", "=", "nn", ".", "BatchNorm2d", "(", "half2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.models.resnet_ibn_a.IBN.forward": [[63, 69], ["torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "resnet_ibn_a.IBN.IN", "resnet_ibn_a.IBN.BN", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "split[].contiguous", "split[].contiguous"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "split", "=", "torch", ".", "split", "(", "x", ",", "self", ".", "half", ",", "1", ")", "\n", "out1", "=", "self", ".", "IN", "(", "split", "[", "0", "]", ".", "contiguous", "(", ")", ")", "\n", "out2", "=", "self", ".", "BN", "(", "split", "[", "1", "]", ".", "contiguous", "(", ")", ")", "\n", "out", "=", "torch", ".", "cat", "(", "(", "out1", ",", "out2", ")", ",", "1", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.models.resnet_ibn_a.Bottleneck.__init__": [[73, 88], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "resnet_ibn_a.IBN", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.softmax_loss.LabelSmoothingCrossEntropy.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "ibn", "=", "False", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "if", "ibn", ":", "\n", "            ", "self", ".", "bn1", "=", "IBN", "(", "planes", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "self", ".", "expansion", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.models.resnet_ibn_a.Bottleneck.forward": [[89, 110], ["resnet_ibn_a.Bottleneck.conv1", "resnet_ibn_a.Bottleneck.bn1", "resnet_ibn_a.Bottleneck.relu", "resnet_ibn_a.Bottleneck.conv2", "resnet_ibn_a.Bottleneck.bn2", "resnet_ibn_a.Bottleneck.relu", "resnet_ibn_a.Bottleneck.conv3", "resnet_ibn_a.Bottleneck.bn3", "resnet_ibn_a.Bottleneck.relu", "resnet_ibn_a.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.models.resnet_ibn_a.ResNet.__init__": [[114, 140], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "resnet_ibn_a.ResNet._make_layer", "resnet_ibn_a.ResNet._make_layer", "resnet_ibn_a.ResNet._make_layer", "resnet_ibn_a.ResNet._make_layer", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "resnet_ibn_a.ResNet.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.softmax_loss.LabelSmoothingCrossEntropy.__init__", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.resnet_ibn_a.ResNet_IBN._make_layer", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.resnet_ibn_a.ResNet_IBN._make_layer", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.resnet_ibn_a.ResNet_IBN._make_layer", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.resnet_ibn_a.ResNet_IBN._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ")", ":", "\n", "        ", "scale", "=", "64", "\n", "self", ".", "inplanes", "=", "scale", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "scale", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "scale", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "scale", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "scale", "*", "2", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "scale", "*", "4", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "scale", "*", "8", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "7", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "scale", "*", "8", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "InstanceNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.models.resnet_ibn_a.ResNet._make_layer": [[141, 160], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "ibn", "=", "True", "\n", "if", "planes", "==", "512", ":", "\n", "            ", "ibn", "=", "False", "\n", "", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "ibn", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "ibn", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.models.resnet_ibn_a.ResNet.forward": [[161, 177], ["resnet_ibn_a.ResNet.conv1", "resnet_ibn_a.ResNet.bn1", "resnet_ibn_a.ResNet.relu", "resnet_ibn_a.ResNet.maxpool", "resnet_ibn_a.ResNet.layer1", "resnet_ibn_a.ResNet.layer2", "resnet_ibn_a.ResNet.layer3", "resnet_ibn_a.ResNet.layer4", "resnet_ibn_a.ResNet.avgpool", "resnet_ibn_a.ResNet.view", "resnet_ibn_a.ResNet.fc", "resnet_ibn_a.ResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.models.resnet_ibn_a.conv3x3": [[16, 20], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"3x3 convolution with padding\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.models.resnet_ibn_a.resnet50_ibn_a": [[179, 190], ["resnet_ibn_a.ResNet", "resnet_ibn_a.remove_module_key", "ResNet.load_state_dict", "torch.load", "torch.load", "torch.load", "torch.device", "torch.device", "torch.device"], "function", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.models.resnet_ibn_a.remove_module_key", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.solver.scheduler.Scheduler.load_state_dict"], ["", "", "def", "resnet50_ibn_a", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-50 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "state_dict", "=", "torch", ".", "load", "(", "model_urls", "[", "'ibn_resnet50a'", "]", ",", "map_location", "=", "torch", ".", "device", "(", "'cpu'", ")", ")", "[", "'state_dict'", "]", "\n", "state_dict", "=", "remove_module_key", "(", "state_dict", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.models.resnet_ibn_a.resnet101_ibn_a": [[192, 203], ["resnet_ibn_a.ResNet", "resnet_ibn_a.remove_module_key", "ResNet.load_state_dict", "torch.load", "torch.load", "torch.load", "torch.device", "torch.device", "torch.device"], "function", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.models.resnet_ibn_a.remove_module_key", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.solver.scheduler.Scheduler.load_state_dict"], ["", "def", "resnet101_ibn_a", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-101 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "state_dict", "=", "torch", ".", "load", "(", "model_urls", "[", "'ibn_resnet101a'", "]", ",", "map_location", "=", "torch", ".", "device", "(", "'cpu'", ")", ")", "[", "'state_dict'", "]", "\n", "state_dict", "=", "remove_module_key", "(", "state_dict", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.models.resnet_ibn_a.remove_module_key": [[205, 210], ["list", "state_dict.keys", "state_dict.pop", "key.replace"], "function", ["None"], ["", "def", "remove_module_key", "(", "state_dict", ")", ":", "\n", "    ", "for", "key", "in", "list", "(", "state_dict", ".", "keys", "(", ")", ")", ":", "\n", "        ", "if", "'module'", "in", "key", ":", "\n", "            ", "state_dict", "[", "key", ".", "replace", "(", "'module.'", ",", "''", ")", "]", "=", "state_dict", ".", "pop", "(", "key", ")", "\n", "", "", "return", "state_dict", "\n", "", ""]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.models.kmeans.label_generator_kmeans": [[13, 35], ["torch.no_grad", "faiss.Kmeans", "faiss.Kmeans.train", "faiss.Kmeans.index.search", "labels.reshape.reshape", "utils.to_torch().float", "features.size", "utils.to_numpy", "utils.to_numpy", "utils.to_torch"], "function", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.clustercontrast.trainers.ClusterContrastTrainer.train", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.utils.__init__.to_numpy", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.utils.__init__.to_numpy", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.utils.__init__.to_torch"], ["@", "torch", ".", "no_grad", "(", ")", "\n", "def", "label_generator_kmeans", "(", "features", ",", "num_classes", "=", "500", ",", "cuda", "=", "True", ")", ":", "\n", "\n", "    ", "assert", "num_classes", ",", "\"num_classes for kmeans is null\"", "\n", "\n", "# k-means cluster by faiss", "\n", "cluster", "=", "faiss", ".", "Kmeans", "(", "\n", "features", ".", "size", "(", "-", "1", ")", ",", "num_classes", ",", "niter", "=", "300", ",", "verbose", "=", "True", ",", "gpu", "=", "cuda", "\n", ")", "\n", "\n", "cluster", ".", "train", "(", "to_numpy", "(", "features", ")", ")", "\n", "\n", "_", ",", "labels", "=", "cluster", ".", "index", ".", "search", "(", "to_numpy", "(", "features", ")", ",", "1", ")", "\n", "labels", "=", "labels", ".", "reshape", "(", "-", "1", ")", "\n", "\n", "centers", "=", "to_torch", "(", "cluster", ".", "centroids", ")", ".", "float", "(", ")", "\n", "# labels = to_torch(labels).long()", "\n", "\n", "# k-means does not have outlier points", "\n", "assert", "not", "(", "-", "1", "in", "labels", ")", "\n", "\n", "return", "labels", ",", "centers", ",", "num_classes", ",", "None", "\n", "", ""]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.models.__init__.names": [[19, 21], ["sorted", "__factory.keys"], "function", ["None"], []], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.models.__init__.create": [[23, 57], ["KeyError"], "function", ["None"], []], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.models.vision_transformer.DropPath.__init__": [[67, 70], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.softmax_loss.LabelSmoothingCrossEntropy.__init__"], ["def", "__init__", "(", "self", ",", "drop_prob", "=", "None", ")", ":", "\n", "        ", "super", "(", "DropPath", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "drop_prob", "=", "drop_prob", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.models.vision_transformer.DropPath.forward": [[71, 73], ["vision_transformer.drop_path"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.vit_pytorch.drop_path"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "drop_path", "(", "x", ",", "self", ".", "drop_prob", ",", "self", ".", "training", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.models.vision_transformer.Mlp.__init__": [[75, 83], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "act_layer", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.softmax_loss.LabelSmoothingCrossEntropy.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "hidden_features", "=", "None", ",", "out_features", "=", "None", ",", "act_layer", "=", "nn", ".", "GELU", ",", "drop", "=", "0.", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "out_features", "=", "out_features", "or", "in_features", "\n", "hidden_features", "=", "hidden_features", "or", "in_features", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "in_features", ",", "hidden_features", ")", "\n", "self", ".", "act", "=", "act_layer", "(", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "hidden_features", ",", "out_features", ")", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "drop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.models.vision_transformer.Mlp.forward": [[84, 91], ["vision_transformer.Mlp.fc1", "vision_transformer.Mlp.act", "vision_transformer.Mlp.drop", "vision_transformer.Mlp.fc2", "vision_transformer.Mlp.drop"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "x", "=", "self", ".", "act", "(", "x", ")", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.models.vision_transformer.Attention.__init__": [[94, 105], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.softmax_loss.LabelSmoothingCrossEntropy.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "num_heads", "=", "8", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "attn_drop", "=", "0.", ",", "proj_drop", "=", "0.", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "head_dim", "=", "dim", "//", "num_heads", "\n", "# NOTE scale factor was wrong in my original version, can set manually to be compat with prev weights", "\n", "self", ".", "scale", "=", "qk_scale", "or", "head_dim", "**", "-", "0.5", "\n", "\n", "self", ".", "qkv", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", "*", "3", ",", "bias", "=", "qkv_bias", ")", "\n", "self", ".", "attn_drop", "=", "nn", ".", "Dropout", "(", "attn_drop", ")", "\n", "self", ".", "proj", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", ")", "\n", "self", ".", "proj_drop", "=", "nn", ".", "Dropout", "(", "proj_drop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.models.vision_transformer.Attention.forward": [[106, 119], ["vision_transformer.Attention.qkv().reshape().permute", "vision_transformer.Attention.softmax", "vision_transformer.Attention.attn_drop", "vision_transformer.Attention.proj", "vision_transformer.Attention.proj_drop", "vision_transformer.Attention.qkv().reshape", "k.transpose", "vision_transformer.Attention.qkv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "B", ",", "N", ",", "C", "=", "x", ".", "shape", "\n", "qkv", "=", "self", ".", "qkv", "(", "x", ")", ".", "reshape", "(", "B", ",", "N", ",", "3", ",", "self", ".", "num_heads", ",", "C", "//", "self", ".", "num_heads", ")", ".", "permute", "(", "2", ",", "0", ",", "3", ",", "1", ",", "4", ")", "\n", "q", ",", "k", ",", "v", "=", "qkv", "[", "0", "]", ",", "qkv", "[", "1", "]", ",", "qkv", "[", "2", "]", "# make torchscript happy (cannot use tensor as tuple)", "\n", "\n", "attn", "=", "(", "q", "@", "k", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ")", "*", "self", ".", "scale", "\n", "attn", "=", "attn", ".", "softmax", "(", "dim", "=", "-", "1", ")", "\n", "attn", "=", "self", ".", "attn_drop", "(", "attn", ")", "\n", "\n", "x", "=", "(", "attn", "@", "v", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "reshape", "(", "B", ",", "N", ",", "C", ")", "\n", "x", "=", "self", ".", "proj", "(", "x", ")", "\n", "x", "=", "self", ".", "proj_drop", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.models.vision_transformer.Block.__init__": [[123, 134], ["torch.Module.__init__", "norm_layer", "vision_transformer.Attention", "norm_layer", "int", "vision_transformer.Mlp", "vision_transformer.DropPath", "torch.Identity", "torch.Identity", "torch.Identity"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.softmax_loss.LabelSmoothingCrossEntropy.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "num_heads", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "drop", "=", "0.", ",", "attn_drop", "=", "0.", ",", "\n", "drop_path", "=", "0.", ",", "act_layer", "=", "nn", ".", "GELU", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "norm1", "=", "norm_layer", "(", "dim", ")", "\n", "self", ".", "attn", "=", "Attention", "(", "\n", "dim", ",", "num_heads", "=", "num_heads", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "attn_drop", "=", "attn_drop", ",", "proj_drop", "=", "drop", ")", "\n", "# NOTE: drop path for stochastic depth, we shall see if this is better than dropout here", "\n", "self", ".", "drop_path", "=", "DropPath", "(", "drop_path", ")", "if", "drop_path", ">", "0.", "else", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "norm2", "=", "norm_layer", "(", "dim", ")", "\n", "mlp_hidden_dim", "=", "int", "(", "dim", "*", "mlp_ratio", ")", "\n", "self", ".", "mlp", "=", "Mlp", "(", "in_features", "=", "dim", ",", "hidden_features", "=", "mlp_hidden_dim", ",", "act_layer", "=", "act_layer", ",", "drop", "=", "drop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.models.vision_transformer.Block.forward": [[135, 139], ["vision_transformer.Block.drop_path", "vision_transformer.Block.drop_path", "vision_transformer.Block.attn", "vision_transformer.Block.mlp", "vision_transformer.Block.norm1", "vision_transformer.Block.norm2"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.vit_pytorch.drop_path", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.vit_pytorch.drop_path"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", "+", "self", ".", "drop_path", "(", "self", ".", "attn", "(", "self", ".", "norm1", "(", "x", ")", ")", ")", "\n", "x", "=", "x", "+", "self", ".", "drop_path", "(", "self", ".", "mlp", "(", "self", ".", "norm2", "(", "x", ")", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.models.vision_transformer.PatchEmbed_overlap.__init__": [[143, 167], ["torch.Module.__init__", "to_2tuple", "to_2tuple", "to_2tuple", "print", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "vision_transformer.PatchEmbed_overlap.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.softmax_loss.LabelSmoothingCrossEntropy.__init__"], ["def", "__init__", "(", "self", ",", "img_size", "=", "224", ",", "patch_size", "=", "16", ",", "stride_size", "=", "16", ",", "in_chans", "=", "3", ",", "embed_dim", "=", "768", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "img_size", "=", "to_2tuple", "(", "img_size", ")", "\n", "patch_size", "=", "to_2tuple", "(", "patch_size", ")", "\n", "stride_size_tuple", "=", "to_2tuple", "(", "stride_size", ")", "\n", "self", ".", "num_x", "=", "(", "img_size", "[", "1", "]", "-", "patch_size", "[", "1", "]", ")", "//", "stride_size_tuple", "[", "1", "]", "+", "1", "\n", "self", ".", "num_y", "=", "(", "img_size", "[", "0", "]", "-", "patch_size", "[", "0", "]", ")", "//", "stride_size_tuple", "[", "0", "]", "+", "1", "\n", "print", "(", "'using stride: {}, and patch number is num_y{} * num_x{}'", ".", "format", "(", "stride_size", ",", "self", ".", "num_y", ",", "self", ".", "num_x", ")", ")", "\n", "num_patches", "=", "self", ".", "num_x", "*", "self", ".", "num_y", "\n", "self", ".", "img_size", "=", "img_size", "\n", "self", ".", "patch_size", "=", "patch_size", "\n", "self", ".", "num_patches", "=", "num_patches", "\n", "\n", "self", ".", "proj", "=", "nn", ".", "Conv2d", "(", "in_chans", ",", "embed_dim", ",", "kernel_size", "=", "patch_size", ",", "stride", "=", "stride_size", ")", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "InstanceNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.models.vision_transformer.PatchEmbed_overlap.forward": [[168, 178], ["vision_transformer.PatchEmbed_overlap.proj", "x.flatten().transpose.flatten().transpose.flatten().transpose", "x.flatten().transpose.flatten().transpose.flatten"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "B", ",", "C", ",", "H", ",", "W", "=", "x", ".", "shape", "\n", "\n", "# FIXME look at relaxing size constraints", "\n", "assert", "H", "==", "self", ".", "img_size", "[", "0", "]", "and", "W", "==", "self", ".", "img_size", "[", "1", "]", ",", "f\"Input image size ({H}*{W}) doesn't match model ({self.img_size[0]}*{self.img_size[1]}).\"", "\n", "x", "=", "self", ".", "proj", "(", "x", ")", "\n", "\n", "x", "=", "x", ".", "flatten", "(", "2", ")", ".", "transpose", "(", "1", ",", "2", ")", "# [64, 8, 768]", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.models.vision_transformer.IBN.__init__": [[180, 187], ["torch.Module.__init__", "int", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.softmax_loss.LabelSmoothingCrossEntropy.__init__"], ["    ", "def", "__init__", "(", "self", ",", "planes", ")", ":", "\n", "        ", "super", "(", "IBN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "half1", "=", "int", "(", "planes", "/", "2", ")", "\n", "self", ".", "half", "=", "half1", "\n", "half2", "=", "planes", "-", "half1", "\n", "self", ".", "IN", "=", "nn", ".", "InstanceNorm2d", "(", "half1", ",", "affine", "=", "True", ")", "\n", "self", ".", "BN", "=", "nn", ".", "BatchNorm2d", "(", "half2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.models.vision_transformer.IBN.forward": [[188, 194], ["torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "vision_transformer.IBN.IN", "vision_transformer.IBN.BN", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "split[].contiguous", "split[].contiguous"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "split", "=", "torch", ".", "split", "(", "x", ",", "self", ".", "half", ",", "1", ")", "\n", "out1", "=", "self", ".", "IN", "(", "split", "[", "0", "]", ".", "contiguous", "(", ")", ")", "\n", "out2", "=", "self", ".", "BN", "(", "split", "[", "1", "]", ".", "contiguous", "(", ")", ")", "\n", "out", "=", "torch", ".", "cat", "(", "(", "out1", ",", "out2", ")", ",", "1", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.models.vision_transformer.PatchEmbed_VOLO.__init__": [[202, 239], ["torch.Module.__init__", "to_2tuple", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "vision_transformer.IBN", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "vision_transformer.IBN", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.softmax_loss.LabelSmoothingCrossEntropy.__init__"], ["def", "__init__", "(", "self", ",", "img_size", "=", "224", ",", "stem_conv", "=", "False", ",", "stem_stride", "=", "1", ",", "\n", "patch_size", "=", "8", ",", "in_chans", "=", "3", ",", "hidden_dim", "=", "64", ",", "embed_dim", "=", "384", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "assert", "patch_size", "in", "[", "4", ",", "8", ",", "16", "]", "\n", "img_size", "=", "to_2tuple", "(", "img_size", ")", "\n", "self", ".", "num_x", "=", "img_size", "[", "1", "]", "//", "patch_size", "\n", "self", ".", "num_y", "=", "img_size", "[", "0", "]", "//", "patch_size", "\n", "self", ".", "num_patches", "=", "self", ".", "num_x", "*", "self", ".", "num_y", "\n", "self", ".", "img_size", "=", "img_size", "\n", "self", ".", "patch_size", "=", "patch_size", "\n", "\n", "self", ".", "stem_conv", "=", "stem_conv", "\n", "if", "stem_conv", ":", "\n", "            ", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_chans", ",", "hidden_dim", ",", "kernel_size", "=", "7", ",", "stride", "=", "stem_stride", ",", "\n", "padding", "=", "3", ",", "bias", "=", "False", ")", ",", "# 112x112", "\n", "#  nn.BatchNorm2d(hidden_dim),", "\n", "IBN", "(", "hidden_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "hidden_dim", ",", "hidden_dim", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "# 112x112", "\n", "#  nn.BatchNorm2d(hidden_dim),", "\n", "IBN", "(", "hidden_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "hidden_dim", ",", "hidden_dim", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "# 112x112", "\n", "nn", ".", "BatchNorm2d", "(", "hidden_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "\n", "", "self", ".", "proj", "=", "nn", ".", "Conv2d", "(", "hidden_dim", ",", "\n", "embed_dim", ",", "\n", "kernel_size", "=", "patch_size", "//", "stem_stride", ",", "\n", "stride", "=", "patch_size", "//", "stem_stride", ")", "\n", "self", ".", "num_patches", "=", "(", "img_size", "[", "0", "]", "//", "patch_size", ")", "*", "(", "img_size", "[", "1", "]", "//", "patch_size", ")", "\n", "self", ".", "img_size", "=", "img_size", "\n", "self", ".", "patch_size", "=", "patch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.models.vision_transformer.PatchEmbed_VOLO.forward": [[240, 246], ["vision_transformer.PatchEmbed_VOLO.proj", "vision_transformer.PatchEmbed_VOLO.flatten().permute", "vision_transformer.PatchEmbed_VOLO.conv", "vision_transformer.PatchEmbed_VOLO.flatten"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "stem_conv", ":", "\n", "            ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "", "x", "=", "self", ".", "proj", "(", "x", ")", "# B, C, H, W", "\n", "x", "=", "x", ".", "flatten", "(", "2", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.models.vision_transformer.TransReID.__init__": [[250, 296], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "print", "print", "print", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "norm_layer", "vision_transformer.trunc_normal_", "vision_transformer.trunc_normal_", "vision_transformer.TransReID.apply", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "vision_transformer.TransReID.bottleneck.bias.requires_grad_", "vision_transformer.TransReID.bottleneck.apply", "vision_transformer.TransReID.load_param", "vision_transformer.PatchEmbed_VOLO", "print", "vision_transformer.PatchEmbed_overlap", "print", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "x.item", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Identity", "torch.Identity", "torch.Identity", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "vision_transformer.Block", "range"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.softmax_loss.LabelSmoothingCrossEntropy.__init__", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.vit_pytorch.trunc_normal_", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.vit_pytorch.trunc_normal_", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.vit_pytorch.TransReID.load_param"], ["def", "__init__", "(", "self", ",", "img_size", "=", "224", ",", "patch_size", "=", "16", ",", "stride_size", "=", "16", ",", "in_chans", "=", "3", ",", "num_classes", "=", "0", ",", "embed_dim", "=", "768", ",", "depth", "=", "12", ",", "num_heads", "=", "12", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "drop_rate", "=", "0.", ",", "attn_drop_rate", "=", "0.", ",", "drop_path_rate", "=", "0.", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ",", "pretrained_path", "=", "''", ",", "hw_ratio", "=", "1", ",", "conv_stem", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "num_features", "=", "self", ".", "in_planes", "=", "self", ".", "embed_dim", "=", "embed_dim", "\n", "if", "conv_stem", ":", "\n", "            ", "self", ".", "patch_embed", "=", "PatchEmbed_VOLO", "(", "img_size", "=", "img_size", ",", "stem_conv", "=", "True", ",", "stem_stride", "=", "2", ",", "\n", "patch_size", "=", "patch_size", ",", "in_chans", "=", "in_chans", ",", "hidden_dim", "=", "64", ",", "embed_dim", "=", "384", ")", "\n", "print", "(", "'Using convolution stem'", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "patch_embed", "=", "PatchEmbed_overlap", "(", "\n", "img_size", "=", "img_size", ",", "patch_size", "=", "patch_size", ",", "stride_size", "=", "stride_size", ",", "in_chans", "=", "in_chans", ",", "\n", "embed_dim", "=", "embed_dim", ")", "\n", "print", "(", "'Using standard patch embedding'", ")", "\n", "\n", "", "num_patches", "=", "self", ".", "patch_embed", ".", "num_patches", "\n", "\n", "self", ".", "cls_token", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "1", ",", "embed_dim", ")", ")", "\n", "self", ".", "pos_embed", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "num_patches", "+", "1", ",", "embed_dim", ")", ")", "\n", "\n", "print", "(", "'using drop_out rate is : {}'", ".", "format", "(", "drop_rate", ")", ")", "\n", "print", "(", "'using attn_drop_out rate is : {}'", ".", "format", "(", "attn_drop_rate", ")", ")", "\n", "print", "(", "'using drop_path rate is : {}'", ".", "format", "(", "drop_path_rate", ")", ")", "\n", "\n", "self", ".", "pos_drop", "=", "nn", ".", "Dropout", "(", "p", "=", "drop_rate", ")", "\n", "dpr", "=", "[", "x", ".", "item", "(", ")", "for", "x", "in", "torch", ".", "linspace", "(", "0", ",", "drop_path_rate", ",", "depth", ")", "]", "# stochastic depth decay rule", "\n", "\n", "self", ".", "blocks", "=", "nn", ".", "ModuleList", "(", "[", "\n", "Block", "(", "\n", "dim", "=", "embed_dim", ",", "num_heads", "=", "num_heads", ",", "mlp_ratio", "=", "mlp_ratio", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "attn_drop", "=", "attn_drop_rate", ",", "drop_path", "=", "dpr", "[", "i", "]", ",", "norm_layer", "=", "norm_layer", ")", "\n", "for", "i", "in", "range", "(", "depth", ")", "]", ")", "\n", "\n", "self", ".", "norm", "=", "norm_layer", "(", "embed_dim", ")", "\n", "\n", "# Classifier head", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "embed_dim", ",", "num_classes", ")", "if", "num_classes", ">", "0", "else", "nn", ".", "Identity", "(", ")", "\n", "trunc_normal_", "(", "self", ".", "cls_token", ",", "std", "=", ".02", ")", "\n", "trunc_normal_", "(", "self", ".", "pos_embed", ",", "std", "=", ".02", ")", "\n", "\n", "self", ".", "apply", "(", "self", ".", "_init_weights", ")", "\n", "\n", "self", ".", "bottleneck", "=", "nn", ".", "BatchNorm1d", "(", "self", ".", "in_planes", ")", "\n", "self", ".", "bottleneck", ".", "bias", ".", "requires_grad_", "(", "False", ")", "\n", "self", ".", "bottleneck", ".", "apply", "(", "weights_init_kaiming", ")", "\n", "\n", "self", ".", "load_param", "(", "pretrained_path", ",", "hw_ratio", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.models.vision_transformer.TransReID._init_weights": [[298, 306], ["isinstance", "vision_transformer.trunc_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.vit_pytorch.trunc_normal_"], ["", "def", "_init_weights", "(", "self", ",", "m", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "trunc_normal_", "(", "m", ".", "weight", ",", "std", "=", ".02", ")", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "LayerNorm", ")", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.models.vision_transformer.TransReID.no_weight_decay": [[307, 310], ["None"], "methods", ["None"], ["", "", "@", "torch", ".", "jit", ".", "ignore", "\n", "def", "no_weight_decay", "(", "self", ")", ":", "\n", "        ", "return", "{", "'pos_embed'", ",", "'cls_token'", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.models.vision_transformer.TransReID.get_classifier": [[311, 313], ["None"], "methods", ["None"], ["", "def", "get_classifier", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "head", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.models.vision_transformer.TransReID.reset_classifier": [[314, 317], ["torch.Linear", "torch.Linear", "torch.Linear", "torch.Identity", "torch.Identity", "torch.Identity"], "methods", ["None"], ["", "def", "reset_classifier", "(", "self", ",", "num_classes", ",", "global_pool", "=", "''", ")", ":", "\n", "        ", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "self", ".", "embed_dim", ",", "num_classes", ")", "if", "num_classes", ">", "0", "else", "nn", ".", "Identity", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.models.vision_transformer.TransReID.forward_features": [[318, 332], ["vision_transformer.TransReID.patch_embed", "vision_transformer.TransReID.cls_token.expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "vision_transformer.TransReID.pos_drop", "vision_transformer.TransReID.norm", "blk"], "methods", ["None"], ["", "def", "forward_features", "(", "self", ",", "x", ")", ":", "\n", "        ", "B", "=", "x", ".", "shape", "[", "0", "]", "\n", "x", "=", "self", ".", "patch_embed", "(", "x", ")", "\n", "\n", "cls_tokens", "=", "self", ".", "cls_token", ".", "expand", "(", "B", ",", "-", "1", ",", "-", "1", ")", "# stole cls_tokens impl from Phil Wang, thanks", "\n", "x", "=", "torch", ".", "cat", "(", "(", "cls_tokens", ",", "x", ")", ",", "dim", "=", "1", ")", "\n", "x", "=", "x", "+", "self", ".", "pos_embed", "\n", "x", "=", "self", ".", "pos_drop", "(", "x", ")", "\n", "for", "blk", "in", "self", ".", "blocks", ":", "\n", "            ", "x", "=", "blk", "(", "x", ")", "\n", "\n", "", "x", "=", "self", ".", "norm", "(", "x", ")", "\n", "\n", "return", "x", "[", ":", ",", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.models.vision_transformer.TransReID.forward": [[333, 338], ["vision_transformer.TransReID.forward_features", "vision_transformer.TransReID.bottleneck", "torch.normalize", "torch.normalize", "torch.normalize"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.vit_pytorch.TransReID.forward_features", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.triplet_loss.normalize", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.triplet_loss.normalize", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.triplet_loss.normalize"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "forward_features", "(", "x", ")", "\n", "bn_x", "=", "feat", "=", "self", ".", "bottleneck", "(", "x", ")", "\n", "bn_x", "=", "F", ".", "normalize", "(", "bn_x", ")", "\n", "return", "bn_x", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.models.vision_transformer.TransReID.load_param": [[339, 386], ["torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load.items", "torch.load.items", "torch.load.items", "print", "print", "obj.items", "k.replace.replace.startswith", "k.replace.replace.startswith", "k.replace.replace.startswith", "k.replace.replace.replace", "k.replace.replace.replace", "k.replace.replace.replace", "torch.cat.reshape", "torch.cat.reshape", "torch.cat.reshape", "[].copy_", "k.replace.replace.replace", "k.replace.replace.startswith", "len", "vision_transformer.resize_pos_embed", "print", "print", "len", "print", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "vision_transformer.TransReID.state_dict().keys", "vision_transformer.TransReID.state_dict", "vision_transformer.TransReID.state_dict", "vision_transformer.TransReID.state_dict"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.vit_pytorch.resize_pos_embed", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.solver.scheduler.Scheduler.state_dict", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.solver.scheduler.Scheduler.state_dict", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.solver.scheduler.Scheduler.state_dict"], ["", "def", "load_param", "(", "self", ",", "model_path", ",", "hw_ratio", ")", ":", "\n", "        ", "param_dict", "=", "torch", ".", "load", "(", "model_path", ",", "map_location", "=", "'cpu'", ")", "\n", "count", "=", "0", "\n", "if", "'model'", "in", "param_dict", ":", "\n", "            ", "param_dict", "=", "param_dict", "[", "'model'", "]", "\n", "", "if", "'state_dict'", "in", "param_dict", ":", "\n", "            ", "param_dict", "=", "param_dict", "[", "'state_dict'", "]", "\n", "", "if", "'teacher'", "in", "param_dict", ":", "### for dino", "\n", "            ", "obj", "=", "param_dict", "[", "\"teacher\"", "]", "\n", "print", "(", "'Convert dino model......'", ")", "\n", "newmodel", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "obj", ".", "items", "(", ")", ":", "\n", "                ", "if", "k", ".", "startswith", "(", "\"module.\"", ")", ":", "\n", "                    ", "k", "=", "k", ".", "replace", "(", "\"module.\"", ",", "\"\"", ")", "\n", "", "if", "not", "k", ".", "startswith", "(", "\"backbone.\"", ")", ":", "\n", "                    ", "continue", "\n", "", "old_k", "=", "k", "\n", "k", "=", "k", ".", "replace", "(", "\"backbone.\"", ",", "\"\"", ")", "\n", "newmodel", "[", "k", "]", "=", "v", "\n", "param_dict", "=", "newmodel", "\n", "", "", "for", "k", ",", "v", "in", "param_dict", ".", "items", "(", ")", ":", "\n", "            ", "if", "k", ".", "startswith", "(", "\"module.\"", ")", ":", "\n", "                ", "k", "=", "k", ".", "replace", "(", "\"module.\"", ",", "\"\"", ")", "\n", "", "if", "k", ".", "startswith", "(", "'base'", ")", ":", "\n", "                ", "k", "=", "k", ".", "replace", "(", "'base.'", ",", "''", ")", "\n", "", "if", "'head'", "in", "k", "or", "'dist'", "in", "k", "or", "'pre_logits'", "in", "k", ":", "\n", "                ", "continue", "\n", "", "if", "'fc.'", "in", "k", "or", "'classifier'", "in", "k", "or", "'bottleneck'", "in", "k", ":", "\n", "                ", "continue", "\n", "", "if", "'patch_embed.proj.weight'", "in", "k", "and", "len", "(", "v", ".", "shape", ")", "<", "4", ":", "\n", "# For old models that I trained prior to conv based patchification", "\n", "                ", "O", ",", "I", ",", "H", ",", "W", "=", "self", ".", "patch_embed", ".", "proj", ".", "weight", ".", "shape", "\n", "v", "=", "v", ".", "reshape", "(", "O", ",", "-", "1", ",", "H", ",", "W", ")", "\n", "", "elif", "k", "==", "'pos_embed'", "and", "v", ".", "shape", "!=", "self", ".", "pos_embed", ".", "shape", ":", "\n", "# To resize pos embedding when using model at different size from pretrained weights", "\n", "                ", "if", "'distilled'", "in", "model_path", ":", "\n", "                    ", "print", "(", "'distill need to choose right cls token in the pth'", ")", "\n", "v", "=", "torch", ".", "cat", "(", "[", "v", "[", ":", ",", "0", ":", "1", "]", ",", "v", "[", ":", ",", "2", ":", "]", "]", ",", "dim", "=", "1", ")", "\n", "", "v", "=", "resize_pos_embed", "(", "v", ",", "self", ".", "pos_embed", ",", "self", ".", "patch_embed", ".", "num_y", ",", "self", ".", "patch_embed", ".", "num_x", ",", "hw_ratio", "=", "hw_ratio", ")", "\n", "", "try", ":", "\n", "                ", "self", ".", "state_dict", "(", ")", "[", "k", "]", ".", "copy_", "(", "v", ")", "\n", "count", "+=", "1", "\n", "", "except", ":", "\n", "                ", "print", "(", "'===========================ERROR========================='", ")", "\n", "print", "(", "'shape do not match in k :{}: param_dict{} vs self.state_dict(){}'", ".", "format", "(", "k", ",", "v", ".", "shape", ",", "self", ".", "state_dict", "(", ")", "[", "k", "]", ".", "shape", ")", ")", "\n", "\n", "", "", "print", "(", "'Load %d / %d layers.'", "%", "(", "count", ",", "len", "(", "self", ".", "state_dict", "(", ")", ".", "keys", "(", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.models.vision_transformer._ntuple": [[34, 40], ["isinstance", "tuple", "itertools.repeat"], "function", ["None"], ["def", "_ntuple", "(", "n", ")", ":", "\n", "    ", "def", "parse", "(", "x", ")", ":", "\n", "        ", "if", "isinstance", "(", "x", ",", "container_abcs", ".", "Iterable", ")", ":", "\n", "            ", "return", "x", "\n", "", "return", "tuple", "(", "repeat", "(", "x", ",", "n", ")", ")", "\n", "", "return", "parse", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.models.vision_transformer.drop_path": [[45, 63], ["random_tensor.floor_", "torch.rand", "torch.rand", "torch.rand", "x.div"], "function", ["None"], ["def", "drop_path", "(", "x", ",", "drop_prob", ":", "float", "=", "0.", ",", "training", ":", "bool", "=", "False", ")", ":", "\n", "    ", "\"\"\"Drop paths (Stochastic Depth) per sample (when applied in main path of residual blocks).\n\n    This is the same as the DropConnect impl I created for EfficientNet, etc networks, however,\n    the original name is misleading as 'Drop Connect' is a different form of dropout in a separate paper...\n    See discussion: https://github.com/tensorflow/tpu/issues/494#issuecomment-532968956 ... I've opted for\n    changing the layer and argument names to 'drop path' rather than mix DropConnect as a layer name and use\n    'survival rate' as the argument.\n\n    \"\"\"", "\n", "if", "drop_prob", "==", "0.", "or", "not", "training", ":", "\n", "        ", "return", "x", "\n", "", "keep_prob", "=", "1", "-", "drop_prob", "\n", "shape", "=", "(", "x", ".", "shape", "[", "0", "]", ",", ")", "+", "(", "1", ",", ")", "*", "(", "x", ".", "ndim", "-", "1", ")", "# work with diff dim tensors, not just 2D ConvNets", "\n", "random_tensor", "=", "keep_prob", "+", "torch", ".", "rand", "(", "shape", ",", "dtype", "=", "x", ".", "dtype", ",", "device", "=", "x", ".", "device", ")", "\n", "random_tensor", ".", "floor_", "(", ")", "# binarize", "\n", "output", "=", "x", ".", "div", "(", "keep_prob", ")", "*", "random_tensor", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.models.vision_transformer.resize_pos_embed": [[388, 404], ["int", "print", "posemb_grid.permute().reshape.reshape().permute", "torch.interpolate", "posemb_grid.permute().reshape.permute().reshape", "torch.cat", "torch.cat", "torch.cat", "math.sqrt", "posemb_grid.permute().reshape.reshape", "posemb_grid.permute().reshape.permute", "len"], "function", ["None"], ["", "", "def", "resize_pos_embed", "(", "posemb", ",", "posemb_new", ",", "hight", ",", "width", ",", "hw_ratio", ")", ":", "\n", "# Rescale the grid of position embeddings when loading from state_dict. Adapted from", "\n", "# https://github.com/google-research/vision_transformer/blob/00883dd691c63a6830751563748663526e811cee/vit_jax/checkpoint.py#L224", "\n", "    ", "ntok_new", "=", "posemb_new", ".", "shape", "[", "1", "]", "\n", "\n", "posemb_token", ",", "posemb_grid", "=", "posemb", "[", ":", ",", ":", "1", "]", ",", "posemb", "[", "0", ",", "1", ":", "]", "\n", "ntok_new", "-=", "1", "\n", "\n", "gs_old_h", "=", "int", "(", "math", ".", "sqrt", "(", "len", "(", "posemb_grid", ")", "*", "hw_ratio", ")", ")", "\n", "gs_old_w", "=", "gs_old_h", "//", "hw_ratio", "\n", "print", "(", "'Resized position embedding from size:{} to size: {} with height:{} width: {}'", ".", "format", "(", "posemb", ".", "shape", ",", "posemb_new", ".", "shape", ",", "hight", ",", "width", ")", ")", "\n", "posemb_grid", "=", "posemb_grid", ".", "reshape", "(", "1", ",", "gs_old_h", ",", "gs_old_w", ",", "-", "1", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "posemb_grid", "=", "F", ".", "interpolate", "(", "posemb_grid", ",", "size", "=", "(", "hight", ",", "width", ")", ",", "mode", "=", "'bilinear'", ")", "\n", "posemb_grid", "=", "posemb_grid", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "reshape", "(", "1", ",", "hight", "*", "width", ",", "-", "1", ")", "\n", "posemb", "=", "torch", ".", "cat", "(", "[", "posemb_token", ",", "posemb_grid", "]", ",", "dim", "=", "1", ")", "\n", "return", "posemb", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.models.vision_transformer.vit_base": [[406, 412], ["vision_transformer.TransReID", "functools.partial"], "function", ["None"], ["", "def", "vit_base", "(", "img_size", "=", "(", "256", ",", "128", ")", ",", "stride_size", "=", "16", ",", "drop_path_rate", "=", "0.1", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "TransReID", "(", "\n", "img_size", "=", "img_size", ",", "patch_size", "=", "16", ",", "stride_size", "=", "stride_size", ",", "embed_dim", "=", "768", ",", "depth", "=", "12", ",", "num_heads", "=", "12", ",", "\n", "mlp_ratio", "=", "4", ",", "qkv_bias", "=", "True", ",", "drop_path_rate", "=", "drop_path_rate", ",", "\n", "norm_layer", "=", "partial", "(", "nn", ".", "LayerNorm", ",", "eps", "=", "1e-6", ")", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.models.vision_transformer.vit_small": [[413, 419], ["vision_transformer.TransReID", "functools.partial"], "function", ["None"], ["", "def", "vit_small", "(", "img_size", "=", "(", "256", ",", "128", ")", ",", "stride_size", "=", "16", ",", "drop_path_rate", "=", "0.1", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "TransReID", "(", "\n", "img_size", "=", "img_size", ",", "patch_size", "=", "16", ",", "stride_size", "=", "stride_size", ",", "embed_dim", "=", "384", ",", "depth", "=", "12", ",", "num_heads", "=", "6", ",", "\n", "mlp_ratio", "=", "4", ",", "qkv_bias", "=", "True", ",", "drop_path_rate", "=", "drop_path_rate", ",", "\n", "norm_layer", "=", "partial", "(", "nn", ".", "LayerNorm", ",", "eps", "=", "1e-6", ")", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.models.vision_transformer._no_grad_trunc_normal_": [[421, 454], ["print", "torch.no_grad", "torch.no_grad", "torch.no_grad", "vision_transformer._no_grad_trunc_normal_.norm_cdf"], "function", ["None"], ["", "def", "_no_grad_trunc_normal_", "(", "tensor", ",", "mean", ",", "std", ",", "a", ",", "b", ")", ":", "\n", "# Cut & paste from PyTorch official master until it's in a few official releases - RW", "\n", "# Method based on https://people.sc.fsu.edu/~jburkardt/presentations/truncated_normal.pdf", "\n", "    ", "def", "norm_cdf", "(", "x", ")", ":", "\n", "# Computes standard normal cumulative distribution function", "\n", "        ", "return", "(", "1.", "+", "math", ".", "erf", "(", "x", "/", "math", ".", "sqrt", "(", "2.", ")", ")", ")", "/", "2.", "\n", "\n", "", "if", "(", "mean", "<", "a", "-", "2", "*", "std", ")", "or", "(", "mean", ">", "b", "+", "2", "*", "std", ")", ":", "\n", "        ", "print", "(", "\"mean is more than 2 std from [a, b] in nn.init.trunc_normal_. \"", "\n", "\"The distribution of values may be incorrect.\"", ",", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# Values are generated by using a truncated uniform distribution and", "\n", "# then using the inverse CDF for the normal distribution.", "\n", "# Get upper and lower cdf values", "\n", "        ", "l", "=", "norm_cdf", "(", "(", "a", "-", "mean", ")", "/", "std", ")", "\n", "u", "=", "norm_cdf", "(", "(", "b", "-", "mean", ")", "/", "std", ")", "\n", "\n", "# Uniformly fill tensor with values from [l, u], then translate to", "\n", "# [2l-1, 2u-1].", "\n", "tensor", ".", "uniform_", "(", "2", "*", "l", "-", "1", ",", "2", "*", "u", "-", "1", ")", "\n", "\n", "# Use inverse cdf transform for normal distribution to get truncated", "\n", "# standard normal", "\n", "tensor", ".", "erfinv_", "(", ")", "\n", "\n", "# Transform to proper mean, std", "\n", "tensor", ".", "mul_", "(", "std", "*", "math", ".", "sqrt", "(", "2.", ")", ")", "\n", "tensor", ".", "add_", "(", "mean", ")", "\n", "\n", "# Clamp to ensure it's in the proper range", "\n", "tensor", ".", "clamp_", "(", "min", "=", "a", ",", "max", "=", "b", ")", "\n", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.models.vision_transformer.trunc_normal_": [[456, 475], ["vision_transformer._no_grad_trunc_normal_"], "function", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.vit_pytorch._no_grad_trunc_normal_"], ["", "", "def", "trunc_normal_", "(", "tensor", ",", "mean", "=", "0.", ",", "std", "=", "1.", ",", "a", "=", "-", "2.", ",", "b", "=", "2.", ")", ":", "\n", "# type: (Tensor, float, float, float, float) -> Tensor", "\n", "    ", "r\"\"\"Fills the input Tensor with values drawn from a truncated\n    normal distribution. The values are effectively drawn from the\n    normal distribution :math:`\\mathcal{N}(\\text{mean}, \\text{std}^2)`\n    with values outside :math:`[a, b]` redrawn until they are within\n    the bounds. The method used for generating the random values works\n    best when :math:`a \\leq \\text{mean} \\leq b`.\n    Args:\n        tensor: an n-dimensional `torch.Tensor`\n        mean: the mean of the normal distribution\n        std: the standard deviation of the normal distribution\n        a: the minimum cutoff value\n        b: the maximum cutoff value\n    Examples:\n        >>> w = torch.empty(3, 5)\n        >>> nn.init.trunc_normal_(w)\n    \"\"\"", "\n", "return", "_no_grad_trunc_normal_", "(", "tensor", ",", "mean", ",", "std", ",", "a", ",", "b", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.models.vision_transformer.weights_init_kaiming": [[477, 491], ["classname.find", "torch.init.kaiming_normal_", "torch.init.constant_", "classname.find", "torch.init.kaiming_normal_", "torch.init.constant_", "classname.find", "torch.init.constant_", "torch.init.constant_"], "function", ["None"], ["", "def", "weights_init_kaiming", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ":", "\n", "        ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "a", "=", "0", ",", "mode", "=", "'fan_out'", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0.0", ")", "\n", "\n", "", "elif", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "a", "=", "0", ",", "mode", "=", "'fan_in'", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0.0", ")", "\n", "", "", "elif", "classname", ".", "find", "(", "'BatchNorm'", ")", "!=", "-", "1", ":", "\n", "        ", "if", "m", ".", "affine", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1.0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0.0", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.evaluation_metrics.ranking._unique_sample": [[10, 16], ["numpy.zeros", "ids_dict.items", "numpy.random.choice"], "function", ["None"], ["def", "_unique_sample", "(", "ids_dict", ",", "num", ")", ":", "\n", "    ", "mask", "=", "np", ".", "zeros", "(", "num", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "for", "_", ",", "indices", "in", "ids_dict", ".", "items", "(", ")", ":", "\n", "        ", "i", "=", "np", ".", "random", ".", "choice", "(", "indices", ")", "\n", "mask", "[", "i", "]", "=", "True", "\n", "", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.evaluation_metrics.ranking.cmc": [[18, 80], ["utils.to_numpy", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.argsort", "numpy.zeros", "range", "numpy.arange", "numpy.arange", "numpy.zeros().astype", "numpy.ones().astype", "range", "RuntimeError", "np.zeros.cumsum", "numpy.any", "collections.defaultdict", "zip", "enumerate", "numpy.zeros", "numpy.ones", "numpy.where", "ids_dict[].append", "ranking._unique_sample", "numpy.nonzero", "numpy.nonzero", "len", "len"], "function", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.utils.__init__.to_numpy", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.evaluation_metrics.ranking._unique_sample"], ["", "def", "cmc", "(", "distmat", ",", "query_ids", "=", "None", ",", "gallery_ids", "=", "None", ",", "\n", "query_cams", "=", "None", ",", "gallery_cams", "=", "None", ",", "topk", "=", "100", ",", "\n", "separate_camera_set", "=", "False", ",", "\n", "single_gallery_shot", "=", "False", ",", "\n", "first_match_break", "=", "False", ")", ":", "\n", "    ", "distmat", "=", "to_numpy", "(", "distmat", ")", "\n", "m", ",", "n", "=", "distmat", ".", "shape", "\n", "# Fill up default values", "\n", "if", "query_ids", "is", "None", ":", "\n", "        ", "query_ids", "=", "np", ".", "arange", "(", "m", ")", "\n", "", "if", "gallery_ids", "is", "None", ":", "\n", "        ", "gallery_ids", "=", "np", ".", "arange", "(", "n", ")", "\n", "", "if", "query_cams", "is", "None", ":", "\n", "        ", "query_cams", "=", "np", ".", "zeros", "(", "m", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "", "if", "gallery_cams", "is", "None", ":", "\n", "        ", "gallery_cams", "=", "np", ".", "ones", "(", "n", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "# Ensure numpy array", "\n", "", "query_ids", "=", "np", ".", "asarray", "(", "query_ids", ")", "\n", "gallery_ids", "=", "np", ".", "asarray", "(", "gallery_ids", ")", "\n", "query_cams", "=", "np", ".", "asarray", "(", "query_cams", ")", "\n", "gallery_cams", "=", "np", ".", "asarray", "(", "gallery_cams", ")", "\n", "# Sort and find correct matches", "\n", "indices", "=", "np", ".", "argsort", "(", "distmat", ",", "axis", "=", "1", ")", "\n", "matches", "=", "(", "gallery_ids", "[", "indices", "]", "==", "query_ids", "[", ":", ",", "np", ".", "newaxis", "]", ")", "\n", "# Compute CMC for each query", "\n", "ret", "=", "np", ".", "zeros", "(", "topk", ")", "\n", "num_valid_queries", "=", "0", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "# Filter out the same id and same camera", "\n", "        ", "valid", "=", "(", "(", "gallery_ids", "[", "indices", "[", "i", "]", "]", "!=", "query_ids", "[", "i", "]", ")", "|", "\n", "(", "gallery_cams", "[", "indices", "[", "i", "]", "]", "!=", "query_cams", "[", "i", "]", ")", ")", "\n", "if", "separate_camera_set", ":", "\n", "# Filter out samples from same camera", "\n", "            ", "valid", "&=", "(", "gallery_cams", "[", "indices", "[", "i", "]", "]", "!=", "query_cams", "[", "i", "]", ")", "\n", "", "if", "not", "np", ".", "any", "(", "matches", "[", "i", ",", "valid", "]", ")", ":", "continue", "\n", "if", "single_gallery_shot", ":", "\n", "            ", "repeat", "=", "10", "\n", "gids", "=", "gallery_ids", "[", "indices", "[", "i", "]", "[", "valid", "]", "]", "\n", "inds", "=", "np", ".", "where", "(", "valid", ")", "[", "0", "]", "\n", "ids_dict", "=", "defaultdict", "(", "list", ")", "\n", "for", "j", ",", "x", "in", "zip", "(", "inds", ",", "gids", ")", ":", "\n", "                ", "ids_dict", "[", "x", "]", ".", "append", "(", "j", ")", "\n", "", "", "else", ":", "\n", "            ", "repeat", "=", "1", "\n", "", "for", "_", "in", "range", "(", "repeat", ")", ":", "\n", "            ", "if", "single_gallery_shot", ":", "\n", "# Randomly choose one instance for each id", "\n", "                ", "sampled", "=", "(", "valid", "&", "_unique_sample", "(", "ids_dict", ",", "len", "(", "valid", ")", ")", ")", "\n", "index", "=", "np", ".", "nonzero", "(", "matches", "[", "i", ",", "sampled", "]", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "                ", "index", "=", "np", ".", "nonzero", "(", "matches", "[", "i", ",", "valid", "]", ")", "[", "0", "]", "\n", "", "delta", "=", "1.", "/", "(", "len", "(", "index", ")", "*", "repeat", ")", "\n", "for", "j", ",", "k", "in", "enumerate", "(", "index", ")", ":", "\n", "                ", "if", "k", "-", "j", ">=", "topk", ":", "break", "\n", "if", "first_match_break", ":", "\n", "                    ", "ret", "[", "k", "-", "j", "]", "+=", "1", "\n", "break", "\n", "", "ret", "[", "k", "-", "j", "]", "+=", "delta", "\n", "", "", "num_valid_queries", "+=", "1", "\n", "", "if", "num_valid_queries", "==", "0", ":", "\n", "        ", "raise", "RuntimeError", "(", "\"No valid query\"", ")", "\n", "", "return", "ret", ".", "cumsum", "(", ")", "/", "num_valid_queries", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.evaluation_metrics.ranking.mean_ap": [[82, 116], ["utils.to_numpy", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.argsort", "range", "numpy.mean", "numpy.arange", "numpy.arange", "numpy.zeros().astype", "numpy.ones().astype", "aps.append", "len", "RuntimeError", "numpy.any", "sklearn.metrics.average_precision_score", "numpy.zeros", "numpy.ones"], "function", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.utils.__init__.to_numpy"], ["", "def", "mean_ap", "(", "distmat", ",", "query_ids", "=", "None", ",", "gallery_ids", "=", "None", ",", "\n", "query_cams", "=", "None", ",", "gallery_cams", "=", "None", ")", ":", "\n", "    ", "distmat", "=", "to_numpy", "(", "distmat", ")", "\n", "m", ",", "n", "=", "distmat", ".", "shape", "\n", "# Fill up default values", "\n", "if", "query_ids", "is", "None", ":", "\n", "        ", "query_ids", "=", "np", ".", "arange", "(", "m", ")", "\n", "", "if", "gallery_ids", "is", "None", ":", "\n", "        ", "gallery_ids", "=", "np", ".", "arange", "(", "n", ")", "\n", "", "if", "query_cams", "is", "None", ":", "\n", "        ", "query_cams", "=", "np", ".", "zeros", "(", "m", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "", "if", "gallery_cams", "is", "None", ":", "\n", "        ", "gallery_cams", "=", "np", ".", "ones", "(", "n", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "# Ensure numpy array", "\n", "", "query_ids", "=", "np", ".", "asarray", "(", "query_ids", ")", "\n", "gallery_ids", "=", "np", ".", "asarray", "(", "gallery_ids", ")", "\n", "query_cams", "=", "np", ".", "asarray", "(", "query_cams", ")", "\n", "gallery_cams", "=", "np", ".", "asarray", "(", "gallery_cams", ")", "\n", "# Sort and find correct matches", "\n", "indices", "=", "np", ".", "argsort", "(", "distmat", ",", "axis", "=", "1", ")", "\n", "matches", "=", "(", "gallery_ids", "[", "indices", "]", "==", "query_ids", "[", ":", ",", "np", ".", "newaxis", "]", ")", "\n", "# Compute AP for each query", "\n", "aps", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "# Filter out the same id and same camera", "\n", "        ", "valid", "=", "(", "(", "gallery_ids", "[", "indices", "[", "i", "]", "]", "!=", "query_ids", "[", "i", "]", ")", "|", "\n", "(", "gallery_cams", "[", "indices", "[", "i", "]", "]", "!=", "query_cams", "[", "i", "]", ")", ")", "\n", "y_true", "=", "matches", "[", "i", ",", "valid", "]", "\n", "y_score", "=", "-", "distmat", "[", "i", "]", "[", "indices", "[", "i", "]", "]", "[", "valid", "]", "\n", "if", "not", "np", ".", "any", "(", "y_true", ")", ":", "continue", "\n", "aps", ".", "append", "(", "average_precision_score", "(", "y_true", ",", "y_score", ")", ")", "\n", "", "if", "len", "(", "aps", ")", "==", "0", ":", "\n", "        ", "raise", "RuntimeError", "(", "\"No valid query\"", ")", "\n", "", "return", "np", ".", "mean", "(", "aps", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.evaluation_metrics.classification.accuracy": [[7, 22], ["torch.no_grad", "max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "utils.to_torch", "utils.to_torch", "target.view().expand_as", "correct[].view().float().sum", "ret.append", "correct[].view().float().sum.mul_", "target.view", "correct[].view().float", "correct[].view"], "function", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.utils.SmoothedValue.max", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.utils.__init__.to_torch", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.utils.__init__.to_torch"], ["def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "output", ",", "target", "=", "to_torch", "(", "output", ")", ",", "to_torch", "(", "target", ")", "\n", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "ret", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "            ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "dim", "=", "0", ",", "keepdim", "=", "True", ")", "\n", "ret", ".", "append", "(", "correct_k", ".", "mul_", "(", "1.", "/", "batch_size", ")", ")", "\n", "", "return", "ret", "\n", "", "", ""]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.examples.cluster_contrast_train_usl.get_data": [[36, 40], ["clustercontrast.datasets.create"], "function", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.models.__init__.create"], ["def", "get_data", "(", "name", ",", "data_dir", ")", ":", "\n", "    ", "root", "=", "'/home/michuan.lh/datasets'", "\n", "dataset", "=", "datasets", ".", "create", "(", "name", ",", "root", ")", "\n", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.examples.cluster_contrast_train_usl.get_train_loader": [[42, 73], ["clustercontrast.utils.data.transforms.Compose", "clustercontrast.utils.data.IterLoader", "clustercontrast.utils.data.transforms.Normalize", "clustercontrast.utils.data.transforms.Normalize", "sorted", "sorted", "clustercontrast.utils.data.sampler.RandomMultipleGallerySampler", "torch.utils.data.DataLoader", "clustercontrast.utils.data.transforms.Resize", "clustercontrast.utils.data.transforms.RandomHorizontalFlip", "clustercontrast.utils.data.transforms.Pad", "clustercontrast.utils.data.transforms.RandomCrop", "clustercontrast.utils.data.transforms.ToTensor", "clustercontrast.utils.data.transforms.RandomErasing", "clustercontrast.utils.data.preprocessor.Preprocessor"], "function", ["None"], ["", "def", "get_train_loader", "(", "args", ",", "dataset", ",", "height", ",", "width", ",", "batch_size", ",", "workers", ",", "\n", "num_instances", ",", "iters", ",", "trainset", "=", "None", ")", ":", "\n", "    ", "if", "args", ".", "self_norm", ":", "\n", "        ", "normalizer", "=", "T", ".", "Normalize", "(", "mean", "=", "[", "0.5", ",", "0.5", ",", "0.5", "]", ",", "\n", "std", "=", "[", "0.5", ",", "0.5", ",", "0.5", "]", ")", "\n", "", "else", ":", "\n", "        ", "normalizer", "=", "T", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "\n", "", "train_transformer", "=", "T", ".", "Compose", "(", "[", "\n", "T", ".", "Resize", "(", "(", "height", ",", "width", ")", ",", "interpolation", "=", "3", ")", ",", "\n", "T", ".", "RandomHorizontalFlip", "(", "p", "=", "0.5", ")", ",", "\n", "T", ".", "Pad", "(", "10", ")", ",", "\n", "T", ".", "RandomCrop", "(", "(", "height", ",", "width", ")", ")", ",", "\n", "T", ".", "ToTensor", "(", ")", ",", "\n", "normalizer", ",", "\n", "T", ".", "RandomErasing", "(", "probability", "=", "0.5", ",", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ")", "\n", "]", ")", "\n", "\n", "train_set", "=", "sorted", "(", "dataset", ".", "train", ")", "if", "trainset", "is", "None", "else", "sorted", "(", "trainset", ")", "\n", "rmgs_flag", "=", "num_instances", ">", "0", "\n", "if", "rmgs_flag", ":", "\n", "        ", "sampler", "=", "RandomMultipleGallerySampler", "(", "train_set", ",", "num_instances", ")", "\n", "", "else", ":", "\n", "        ", "sampler", "=", "None", "\n", "", "train_loader", "=", "IterLoader", "(", "\n", "DataLoader", "(", "Preprocessor", "(", "train_set", ",", "root", "=", "dataset", ".", "images_dir", ",", "transform", "=", "train_transformer", ")", ",", "\n", "batch_size", "=", "batch_size", ",", "num_workers", "=", "workers", ",", "sampler", "=", "sampler", ",", "\n", "shuffle", "=", "not", "rmgs_flag", ",", "pin_memory", "=", "True", ",", "drop_last", "=", "True", ")", ",", "length", "=", "iters", ")", "\n", "\n", "return", "train_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.examples.cluster_contrast_train_usl.get_test_loader": [[75, 98], ["clustercontrast.utils.data.transforms.Compose", "torch.utils.data.DataLoader", "clustercontrast.utils.data.transforms.Normalize", "clustercontrast.utils.data.transforms.Normalize", "list", "clustercontrast.utils.data.preprocessor.Preprocessor", "clustercontrast.utils.data.transforms.Resize", "clustercontrast.utils.data.transforms.ToTensor", "set", "set"], "function", ["None"], ["", "def", "get_test_loader", "(", "args", ",", "dataset", ",", "height", ",", "width", ",", "batch_size", ",", "workers", ",", "testset", "=", "None", ")", ":", "\n", "    ", "if", "args", ".", "self_norm", ":", "\n", "        ", "normalizer", "=", "T", ".", "Normalize", "(", "mean", "=", "[", "0.5", ",", "0.5", ",", "0.5", "]", ",", "\n", "std", "=", "[", "0.5", ",", "0.5", ",", "0.5", "]", ")", "\n", "", "else", ":", "\n", "        ", "normalizer", "=", "T", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "\n", "", "test_transformer", "=", "T", ".", "Compose", "(", "[", "\n", "T", ".", "Resize", "(", "(", "height", ",", "width", ")", ",", "interpolation", "=", "3", ")", ",", "\n", "T", ".", "ToTensor", "(", ")", ",", "\n", "normalizer", "\n", "]", ")", "\n", "\n", "if", "testset", "is", "None", ":", "\n", "        ", "testset", "=", "list", "(", "set", "(", "dataset", ".", "query", ")", "|", "set", "(", "dataset", ".", "gallery", ")", ")", "\n", "\n", "", "test_loader", "=", "DataLoader", "(", "\n", "Preprocessor", "(", "testset", ",", "root", "=", "dataset", ".", "images_dir", ",", "transform", "=", "test_transformer", ")", ",", "\n", "batch_size", "=", "batch_size", ",", "num_workers", "=", "workers", ",", "\n", "shuffle", "=", "False", ",", "pin_memory", "=", "True", ")", "\n", "\n", "return", "test_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.examples.cluster_contrast_train_usl.create_model": [[100, 112], ["models.create.cuda", "torch.nn.DataParallel", "clustercontrast.models.create", "clustercontrast.models.create"], "function", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.models.__init__.create", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.models.__init__.create"], ["", "def", "create_model", "(", "args", ")", ":", "\n", "    ", "if", "'resnet'", "in", "args", ".", "arch", ":", "\n", "        ", "model", "=", "models", ".", "create", "(", "args", ".", "arch", ",", "num_features", "=", "args", ".", "features", ",", "norm", "=", "True", ",", "dropout", "=", "args", ".", "dropout", ",", "\n", "num_classes", "=", "0", ",", "pooling_type", "=", "args", ".", "pooling_type", ",", "pretrained_path", "=", "args", ".", "pretrained_path", ")", "\n", "", "else", ":", "\n", "        ", "model", "=", "models", ".", "create", "(", "args", ".", "arch", ",", "img_size", "=", "(", "args", ".", "height", ",", "args", ".", "width", ")", ",", "drop_path_rate", "=", "args", ".", "drop_path_rate", "\n", ",", "pretrained_path", "=", "args", ".", "pretrained_path", ",", "hw_ratio", "=", "args", ".", "hw_ratio", ",", "conv_stem", "=", "args", ".", "conv_stem", ")", "\n", "# use CUDA", "\n", "\n", "", "model", ".", "cuda", "(", ")", "\n", "model", "=", "nn", ".", "DataParallel", "(", "model", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.examples.cluster_contrast_train_usl.main": [[114, 124], ["parser.parse_args", "cluster_contrast_train_usl.main_worker", "random.seed", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed"], "function", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.run_with_submitit.parse_args", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.examples.test.main_worker"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "if", "args", ".", "seed", "is", "not", "None", ":", "\n", "        ", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "cudnn", ".", "deterministic", "=", "True", "\n", "\n", "", "main_worker", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.examples.cluster_contrast_train_usl.main_worker": [[126, 247], ["time.monotonic", "clustercontrast.utils.logging.Logger", "print", "print", "cluster_contrast_train_usl.get_data", "cluster_contrast_train_usl.get_test_loader", "cluster_contrast_train_usl.create_model", "clustercontrast.evaluators.Evaluator", "print", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "clustercontrast.trainers.ClusterContrastTrainer", "range", "print", "clustercontrast.utils.serialization.load_checkpoint", "create_model.load_state_dict", "clustercontrast.evaluators.Evaluator.evaluate", "time.monotonic", "print", "os.join", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.AdamW", "torch.optim.AdamW", "torch.no_grad", "torch.no_grad", "cluster_contrast_train_usl.main_worker.generate_cluster_features"], "function", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.examples.test.get_data", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.examples.cluster_contrast_train_usl.get_test_loader", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.examples.cluster_contrast_train_usl.create_model", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.transformer_layers.load_checkpoint", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.solver.scheduler.Scheduler.load_state_dict", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.clustercontrast.evaluators.Evaluator.evaluate"], ["", "def", "main_worker", "(", "args", ")", ":", "\n", "    ", "global", "start_epoch", ",", "best_mAP", "\n", "start_time", "=", "time", ".", "monotonic", "(", ")", "\n", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "sys", ".", "stdout", "=", "Logger", "(", "osp", ".", "join", "(", "args", ".", "logs_dir", ",", "'log.txt'", ")", ")", "\n", "print", "(", "\"==========\\nArgs:{}\\n==========\"", ".", "format", "(", "args", ")", ")", "\n", "\n", "# Create datasets", "\n", "iters", "=", "args", ".", "iters", "if", "(", "args", ".", "iters", ">", "0", ")", "else", "None", "\n", "print", "(", "\"==> Load unlabeled dataset\"", ")", "\n", "dataset", "=", "get_data", "(", "args", ".", "dataset", ",", "args", ".", "data_dir", ")", "\n", "test_loader", "=", "get_test_loader", "(", "args", ",", "dataset", ",", "args", ".", "height", ",", "args", ".", "width", ",", "args", ".", "batch_size", ",", "args", ".", "workers", ")", "\n", "\n", "# Create model", "\n", "model", "=", "create_model", "(", "args", ")", "\n", "\n", "# Evaluator", "\n", "evaluator", "=", "Evaluator", "(", "model", ")", "\n", "\n", "# Optimizer", "\n", "params", "=", "[", "{", "\"params\"", ":", "[", "value", "]", "}", "for", "_", ",", "value", "in", "model", ".", "named_parameters", "(", ")", "if", "value", ".", "requires_grad", "]", "\n", "print", "(", "'optimizer: %s'", "%", "(", "args", ".", "optimizer", ")", ")", "\n", "if", "args", ".", "optimizer", "==", "'Adam'", ":", "\n", "        ", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "params", ",", "lr", "=", "args", ".", "lr", ",", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "", "if", "args", ".", "optimizer", "==", "'AdamW'", ":", "\n", "        ", "optimizer", "=", "torch", ".", "optim", ".", "AdamW", "(", "params", ",", "lr", "=", "args", ".", "lr", ",", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "", "elif", "args", ".", "optimizer", "==", "'SGD'", ":", "\n", "        ", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "params", ",", "lr", "=", "args", ".", "lr", ",", "momentum", "=", "0.9", ",", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "", "lr_scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "StepLR", "(", "optimizer", ",", "step_size", "=", "args", ".", "step_size", ",", "gamma", "=", "0.1", ")", "\n", "\n", "# Trainer", "\n", "trainer", "=", "ClusterContrastTrainer", "(", "model", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "args", ".", "epochs", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "print", "(", "'==> Create pseudo labels for unlabeled data'", ")", "\n", "cluster_loader", "=", "get_test_loader", "(", "args", ",", "dataset", ",", "args", ".", "height", ",", "args", ".", "width", ",", "\n", "args", ".", "batch_size", ",", "args", ".", "workers", ",", "testset", "=", "sorted", "(", "dataset", ".", "train", ")", ")", "\n", "\n", "features", ",", "_", "=", "extract_features", "(", "model", ",", "cluster_loader", ",", "print_freq", "=", "50", ")", "\n", "features", "=", "torch", ".", "cat", "(", "[", "features", "[", "f", "]", ".", "unsqueeze", "(", "0", ")", "for", "f", ",", "_", ",", "_", "in", "sorted", "(", "dataset", ".", "train", ")", "]", ",", "0", ")", "\n", "rerank_dist", "=", "compute_jaccard_distance", "(", "features", ",", "k1", "=", "args", ".", "k1", ",", "k2", "=", "args", ".", "k2", ")", "\n", "\n", "if", "epoch", "==", "0", ":", "\n", "# DBSCAN cluster", "\n", "                ", "eps", "=", "args", ".", "eps", "\n", "print", "(", "'Clustering criterion: eps: {:.3f}'", ".", "format", "(", "eps", ")", ")", "\n", "cluster", "=", "DBSCAN", "(", "eps", "=", "eps", ",", "min_samples", "=", "4", ",", "metric", "=", "'precomputed'", ",", "n_jobs", "=", "-", "1", ")", "\n", "\n", "# select & cluster images as training set of this epochs", "\n", "", "pseudo_labels", "=", "cluster", ".", "fit_predict", "(", "rerank_dist", ")", "\n", "num_cluster", "=", "len", "(", "set", "(", "pseudo_labels", ")", ")", "-", "(", "1", "if", "-", "1", "in", "pseudo_labels", "else", "0", ")", "\n", "\n", "# print(\"epoch: {} \\n pseudo_labels: {}\".format(epoch, pseudo_labels.tolist()[:100]))", "\n", "\n", "# generate new dataset and calculate cluster centers", "\n", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "generate_cluster_features", "(", "labels", ",", "features", ")", ":", "\n", "            ", "centers", "=", "collections", ".", "defaultdict", "(", "list", ")", "\n", "for", "i", ",", "label", "in", "enumerate", "(", "labels", ")", ":", "\n", "                ", "if", "label", "==", "-", "1", ":", "\n", "                    ", "continue", "\n", "", "centers", "[", "labels", "[", "i", "]", "]", ".", "append", "(", "features", "[", "i", "]", ")", "\n", "\n", "", "centers", "=", "[", "\n", "torch", ".", "stack", "(", "centers", "[", "idx", "]", ",", "dim", "=", "0", ")", ".", "mean", "(", "0", ")", "for", "idx", "in", "sorted", "(", "centers", ".", "keys", "(", ")", ")", "\n", "]", "\n", "\n", "centers", "=", "torch", ".", "stack", "(", "centers", ",", "dim", "=", "0", ")", "\n", "return", "centers", "\n", "\n", "", "cluster_features", "=", "generate_cluster_features", "(", "pseudo_labels", ",", "features", ")", "\n", "del", "cluster_loader", ",", "features", "\n", "\n", "# Create hybrid memory", "\n", "memory", "=", "ClusterMemory", "(", "model", ".", "module", ".", "num_features", ",", "num_cluster", ",", "temp", "=", "args", ".", "temp", ",", "\n", "momentum", "=", "args", ".", "momentum", ",", "use_hard", "=", "args", ".", "use_hard", ")", ".", "cuda", "(", ")", "\n", "memory", ".", "features", "=", "F", ".", "normalize", "(", "cluster_features", ",", "dim", "=", "1", ")", ".", "cuda", "(", ")", "\n", "\n", "trainer", ".", "memory", "=", "memory", "\n", "\n", "pseudo_labeled_dataset", "=", "[", "]", "\n", "for", "i", ",", "(", "(", "fname", ",", "_", ",", "cid", ")", ",", "label", ")", "in", "enumerate", "(", "zip", "(", "sorted", "(", "dataset", ".", "train", ")", ",", "pseudo_labels", ")", ")", ":", "\n", "            ", "if", "label", "!=", "-", "1", ":", "\n", "                ", "pseudo_labeled_dataset", ".", "append", "(", "(", "fname", ",", "label", ".", "item", "(", ")", ",", "cid", ")", ")", "\n", "\n", "", "", "print", "(", "'==> Statistics for epoch {}: {} clusters'", ".", "format", "(", "epoch", ",", "num_cluster", ")", ")", "\n", "\n", "train_loader", "=", "get_train_loader", "(", "args", ",", "dataset", ",", "args", ".", "height", ",", "args", ".", "width", ",", "\n", "args", ".", "batch_size", ",", "args", ".", "workers", ",", "args", ".", "num_instances", ",", "iters", ",", "\n", "trainset", "=", "pseudo_labeled_dataset", ")", "\n", "\n", "train_loader", ".", "new_epoch", "(", ")", "\n", "\n", "trainer", ".", "train", "(", "epoch", ",", "train_loader", ",", "optimizer", ",", "\n", "print_freq", "=", "args", ".", "print_freq", ",", "train_iters", "=", "len", "(", "train_loader", ")", ")", "\n", "\n", "if", "(", "epoch", "+", "1", ")", "%", "args", ".", "eval_step", "==", "0", "or", "(", "epoch", "==", "args", ".", "epochs", "-", "1", ")", ":", "\n", "            ", "mAP", "=", "evaluator", ".", "evaluate", "(", "test_loader", ",", "dataset", ".", "query", ",", "dataset", ".", "gallery", ",", "cmc_flag", "=", "False", ")", "\n", "is_best", "=", "(", "mAP", ">", "best_mAP", ")", "\n", "best_mAP", "=", "max", "(", "mAP", ",", "best_mAP", ")", "\n", "save_checkpoint", "(", "{", "\n", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'epoch'", ":", "epoch", "+", "1", ",", "\n", "'best_mAP'", ":", "best_mAP", ",", "\n", "}", ",", "is_best", ",", "fpath", "=", "osp", ".", "join", "(", "args", ".", "logs_dir", ",", "'checkpoint.pth.tar'", ")", ")", "\n", "\n", "print", "(", "'\\n * Finished epoch {:3d}  model mAP: {:5.1%}  best: {:5.1%}{}\\n'", ".", "\n", "format", "(", "epoch", ",", "mAP", ",", "best_mAP", ",", "' *'", "if", "is_best", "else", "''", ")", ")", "\n", "\n", "", "lr_scheduler", ".", "step", "(", ")", "\n", "\n", "", "print", "(", "'==> Test with the best model:'", ")", "\n", "checkpoint", "=", "load_checkpoint", "(", "osp", ".", "join", "(", "args", ".", "logs_dir", ",", "'model_best.pth.tar'", ")", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "evaluator", ".", "evaluate", "(", "test_loader", ",", "dataset", ".", "query", ",", "dataset", ".", "gallery", ",", "cmc_flag", "=", "True", ")", "\n", "\n", "end_time", "=", "time", ".", "monotonic", "(", ")", "\n", "print", "(", "'Total running time: '", ",", "timedelta", "(", "seconds", "=", "end_time", "-", "start_time", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.examples.test.get_data": [[23, 43], ["os.join", "clustercontrast.datasets.create", "clustercontrast.utils.data.transforms.Normalize", "clustercontrast.utils.data.transforms.Compose", "torch.utils.data.DataLoader", "clustercontrast.utils.data.preprocessor.Preprocessor", "clustercontrast.utils.data.transforms.Resize", "clustercontrast.utils.data.transforms.ToTensor", "list", "set", "set"], "function", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.models.__init__.create"], ["def", "get_data", "(", "name", ",", "data_dir", ",", "height", ",", "width", ",", "batch_size", ",", "workers", ")", ":", "\n", "    ", "root", "=", "osp", ".", "join", "(", "data_dir", ",", "name", ")", "\n", "\n", "dataset", "=", "datasets", ".", "create", "(", "name", ",", "root", ")", "\n", "\n", "normalizer", "=", "T", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "\n", "test_transformer", "=", "T", ".", "Compose", "(", "[", "\n", "T", ".", "Resize", "(", "(", "height", ",", "width", ")", ",", "interpolation", "=", "3", ")", ",", "\n", "T", ".", "ToTensor", "(", ")", ",", "\n", "normalizer", "\n", "]", ")", "\n", "\n", "test_loader", "=", "DataLoader", "(", "\n", "Preprocessor", "(", "list", "(", "set", "(", "dataset", ".", "query", ")", "|", "set", "(", "dataset", ".", "gallery", ")", ")", ",", "\n", "root", "=", "dataset", ".", "images_dir", ",", "transform", "=", "test_transformer", ")", ",", "\n", "batch_size", "=", "batch_size", ",", "num_workers", "=", "workers", ",", "\n", "shuffle", "=", "False", ",", "pin_memory", "=", "True", ")", "\n", "return", "dataset", ",", "test_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.examples.test.main": [[45, 55], ["parser.parse_args", "test.main_worker", "random.seed", "numpy.random.seed", "torch.manual_seed"], "function", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.run_with_submitit.parse_args", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.examples.test.main_worker"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "if", "args", ".", "seed", "is", "not", "None", ":", "\n", "        ", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "cudnn", ".", "deterministic", "=", "True", "\n", "\n", "", "main_worker", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.examples.test.main_worker": [[57, 91], ["os.dirname", "clustercontrast.utils.logging.Logger", "print", "test.get_data", "clustercontrast.models.create", "clustercontrast.utils.serialization.load_checkpoint", "clustercontrast.utils.serialization.copy_state_dict", "nn.DataParallel.cuda", "torch.nn.DataParallel", "nn.DataParallel.eval", "clustercontrast.evaluators.Evaluator", "clustercontrast.evaluators.Evaluator.evaluate", "os.join", "print", "clustercontrast.models.dsbn.convert_dsbn", "print", "clustercontrast.models.dsbn.convert_bn"], "function", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.examples.test.get_data", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.models.__init__.create", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.transformer_layers.load_checkpoint", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.utils.serialization.copy_state_dict", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.clustercontrast.evaluators.Evaluator.evaluate", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.models.dsbn.convert_dsbn", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.models.dsbn.convert_bn"], ["", "def", "main_worker", "(", "args", ")", ":", "\n", "    ", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "log_dir", "=", "osp", ".", "dirname", "(", "args", ".", "resume", ")", "\n", "sys", ".", "stdout", "=", "Logger", "(", "osp", ".", "join", "(", "log_dir", ",", "'log_test.txt'", ")", ")", "\n", "print", "(", "\"==========\\nArgs:{}\\n==========\"", ".", "format", "(", "args", ")", ")", "\n", "\n", "# Create data loaders", "\n", "dataset", ",", "test_loader", "=", "get_data", "(", "args", ".", "dataset", ",", "args", ".", "data_dir", ",", "args", ".", "height", ",", "\n", "args", ".", "width", ",", "args", ".", "batch_size", ",", "args", ".", "workers", ")", "\n", "\n", "# Create model", "\n", "model", "=", "models", ".", "create", "(", "args", ".", "arch", ",", "pretrained", "=", "False", ",", "num_features", "=", "args", ".", "features", ",", "dropout", "=", "args", ".", "dropout", ",", "\n", "num_classes", "=", "0", ",", "pooling_type", "=", "args", ".", "pooling_type", ")", "\n", "if", "args", ".", "dsbn", ":", "\n", "        ", "print", "(", "\"==> Load the model with domain-specific BNs\"", ")", "\n", "convert_dsbn", "(", "model", ")", "\n", "\n", "# Load from checkpoint", "\n", "", "checkpoint", "=", "load_checkpoint", "(", "args", ".", "resume", ")", "\n", "copy_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ",", "model", ",", "strip", "=", "'module.'", ")", "\n", "\n", "if", "args", ".", "dsbn", ":", "\n", "        ", "print", "(", "\"==> Test with {}-domain BNs\"", ".", "format", "(", "\"source\"", "if", "args", ".", "test_source", "else", "\"target\"", ")", ")", "\n", "convert_bn", "(", "model", ",", "use_target", "=", "(", "not", "args", ".", "test_source", ")", ")", "\n", "\n", "", "model", ".", "cuda", "(", ")", "\n", "model", "=", "nn", ".", "DataParallel", "(", "model", ")", "\n", "\n", "# Evaluator", "\n", "model", ".", "eval", "(", ")", "\n", "evaluator", "=", "Evaluator", "(", "model", ")", "\n", "evaluator", ".", "evaluate", "(", "test_loader", ",", "dataset", ".", "query", ",", "dataset", ".", "gallery", ",", "cmc_flag", "=", "True", ",", "rerank", "=", "args", ".", "rerank", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.ours_vit.DropPath.__init__": [[67, 70], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.softmax_loss.LabelSmoothingCrossEntropy.__init__"], ["def", "__init__", "(", "self", ",", "drop_prob", "=", "None", ")", ":", "\n", "        ", "super", "(", "DropPath", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "drop_prob", "=", "drop_prob", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.ours_vit.DropPath.forward": [[71, 73], ["ours_vit.drop_path"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.vit_pytorch.drop_path"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "drop_path", "(", "x", ",", "self", ".", "drop_prob", ",", "self", ".", "training", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.ours_vit.Mlp.__init__": [[121, 129], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "act_layer", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.softmax_loss.LabelSmoothingCrossEntropy.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "hidden_features", "=", "None", ",", "out_features", "=", "None", ",", "act_layer", "=", "nn", ".", "GELU", ",", "drop", "=", "0.", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "out_features", "=", "out_features", "or", "in_features", "\n", "hidden_features", "=", "hidden_features", "or", "in_features", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "in_features", ",", "hidden_features", ")", "\n", "self", ".", "act", "=", "act_layer", "(", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "hidden_features", ",", "out_features", ")", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "drop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.ours_vit.Mlp.forward": [[130, 137], ["ours_vit.Mlp.fc1", "ours_vit.Mlp.act", "ours_vit.Mlp.drop", "ours_vit.Mlp.fc2", "ours_vit.Mlp.drop"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "x", "=", "self", ".", "act", "(", "x", ")", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.ours_vit.Attention.__init__": [[140, 151], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.softmax_loss.LabelSmoothingCrossEntropy.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "num_heads", "=", "8", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "attn_drop", "=", "0.", ",", "proj_drop", "=", "0.", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "head_dim", "=", "dim", "//", "num_heads", "\n", "# NOTE scale factor was wrong in my original version, can set manually to be compat with prev weights", "\n", "self", ".", "scale", "=", "qk_scale", "or", "head_dim", "**", "-", "0.5", "\n", "\n", "self", ".", "qkv", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", "*", "3", ",", "bias", "=", "qkv_bias", ")", "\n", "self", ".", "attn_drop", "=", "nn", ".", "Dropout", "(", "attn_drop", ")", "\n", "self", ".", "proj", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", ")", "\n", "self", ".", "proj_drop", "=", "nn", ".", "Dropout", "(", "proj_drop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.ours_vit.Attention.forward": [[152, 165], ["ours_vit.Attention.qkv().reshape().permute", "ours_vit.Attention.softmax", "ours_vit.Attention.attn_drop", "ours_vit.Attention.proj", "ours_vit.Attention.proj_drop", "ours_vit.Attention.qkv().reshape", "k.transpose", "ours_vit.Attention.qkv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "B", ",", "N", ",", "C", "=", "x", ".", "shape", "\n", "qkv", "=", "self", ".", "qkv", "(", "x", ")", ".", "reshape", "(", "B", ",", "N", ",", "3", ",", "self", ".", "num_heads", ",", "C", "//", "self", ".", "num_heads", ")", ".", "permute", "(", "2", ",", "0", ",", "3", ",", "1", ",", "4", ")", "\n", "q", ",", "k", ",", "v", "=", "qkv", "[", "0", "]", ",", "qkv", "[", "1", "]", ",", "qkv", "[", "2", "]", "# make torchscript happy (cannot use tensor as tuple)", "\n", "\n", "attn", "=", "(", "q", "@", "k", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ")", "*", "self", ".", "scale", "\n", "attn", "=", "attn", ".", "softmax", "(", "dim", "=", "-", "1", ")", "\n", "attn", "=", "self", ".", "attn_drop", "(", "attn", ")", "\n", "\n", "x", "=", "(", "attn", "@", "v", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "reshape", "(", "B", ",", "N", ",", "C", ")", "\n", "x", "=", "self", ".", "proj", "(", "x", ")", "\n", "x", "=", "self", ".", "proj_drop", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.ours_vit.Block.__init__": [[169, 181], ["torch.Module.__init__", "norm_layer", "ours_vit.Attention", "norm_layer", "int", "ours_vit.Mlp", "ours_vit.DropPath", "torch.Identity", "torch.Identity", "torch.Identity"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.softmax_loss.LabelSmoothingCrossEntropy.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "num_heads", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "drop", "=", "0.", ",", "attn_drop", "=", "0.", ",", "\n", "drop_path", "=", "0.", ",", "act_layer", "=", "nn", ".", "GELU", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "norm1", "=", "norm_layer", "(", "dim", ")", "\n", "self", ".", "attn", "=", "Attention", "(", "\n", "dim", ",", "num_heads", "=", "num_heads", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "attn_drop", "=", "attn_drop", ",", "proj_drop", "=", "drop", ")", "\n", "# NOTE: drop path for stochastic depth, we shall see if this is better than dropout here", "\n", "self", ".", "drop_path", "=", "DropPath", "(", "drop_path", ")", "if", "drop_path", ">", "0.", "else", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "norm2", "=", "norm_layer", "(", "dim", ")", "\n", "#  self.norm2 = nn.BatchNorm1d(dim)", "\n", "mlp_hidden_dim", "=", "int", "(", "dim", "*", "mlp_ratio", ")", "\n", "self", ".", "mlp", "=", "Mlp", "(", "in_features", "=", "dim", ",", "hidden_features", "=", "mlp_hidden_dim", ",", "act_layer", "=", "act_layer", ",", "drop", "=", "drop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.ours_vit.Block.forward": [[182, 189], ["ours_vit.Block.drop_path", "ours_vit.Block.drop_path", "ours_vit.Block.attn", "ours_vit.Block.mlp", "ours_vit.Block.norm1", "ours_vit.Block.norm2"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.vit_pytorch.drop_path", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.vit_pytorch.drop_path"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", "+", "self", ".", "drop_path", "(", "self", ".", "attn", "(", "self", ".", "norm1", "(", "x", ")", ")", ")", "\n", "x", "=", "x", "+", "self", ".", "drop_path", "(", "self", ".", "mlp", "(", "self", ".", "norm2", "(", "x", ")", ")", ")", "\n", "\n", "#  x = self.norm2(x.transpose(1,2)).transpose(1,2)", "\n", "#  x = x + self.drop_path(self.mlp(x))", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.ours_vit.PatchEmbed.__init__": [[194, 204], ["torch.Module.__init__", "to_2tuple", "to_2tuple", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.softmax_loss.LabelSmoothingCrossEntropy.__init__"], ["def", "__init__", "(", "self", ",", "img_size", "=", "224", ",", "patch_size", "=", "16", ",", "in_chans", "=", "3", ",", "embed_dim", "=", "768", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "img_size", "=", "to_2tuple", "(", "img_size", ")", "\n", "patch_size", "=", "to_2tuple", "(", "patch_size", ")", "\n", "num_patches", "=", "(", "img_size", "[", "1", "]", "//", "patch_size", "[", "1", "]", ")", "*", "(", "img_size", "[", "0", "]", "//", "patch_size", "[", "0", "]", ")", "\n", "self", ".", "img_size", "=", "img_size", "\n", "self", ".", "patch_size", "=", "patch_size", "\n", "self", ".", "num_patches", "=", "num_patches", "\n", "\n", "self", ".", "proj", "=", "nn", ".", "Conv2d", "(", "in_chans", ",", "embed_dim", ",", "kernel_size", "=", "patch_size", ",", "stride", "=", "patch_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.ours_vit.PatchEmbed.forward": [[205, 212], ["ours_vit.PatchEmbed.proj().flatten().transpose", "ours_vit.PatchEmbed.proj().flatten", "ours_vit.PatchEmbed.proj"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "B", ",", "C", ",", "H", ",", "W", "=", "x", ".", "shape", "\n", "# FIXME look at relaxing size constraints", "\n", "assert", "H", "==", "self", ".", "img_size", "[", "0", "]", "and", "W", "==", "self", ".", "img_size", "[", "1", "]", ",", "f\"Input image size ({H}*{W}) doesn't match model ({self.img_size[0]}*{self.img_size[1]}).\"", "\n", "x", "=", "self", ".", "proj", "(", "x", ")", ".", "flatten", "(", "2", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.ours_vit.IBN.__init__": [[214, 221], ["torch.Module.__init__", "int", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.softmax_loss.LabelSmoothingCrossEntropy.__init__"], ["    ", "def", "__init__", "(", "self", ",", "planes", ")", ":", "\n", "        ", "super", "(", "IBN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "half1", "=", "int", "(", "planes", "/", "2", ")", "\n", "self", ".", "half", "=", "half1", "\n", "half2", "=", "planes", "-", "half1", "\n", "self", ".", "IN", "=", "nn", ".", "InstanceNorm2d", "(", "half1", ",", "affine", "=", "True", ")", "\n", "self", ".", "BN", "=", "nn", ".", "BatchNorm2d", "(", "half2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.ours_vit.IBN.forward": [[222, 228], ["torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "ours_vit.IBN.IN", "ours_vit.IBN.BN", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "split[].contiguous", "split[].contiguous"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "split", "=", "torch", ".", "split", "(", "x", ",", "self", ".", "half", ",", "1", ")", "\n", "out1", "=", "self", ".", "IN", "(", "split", "[", "0", "]", ".", "contiguous", "(", ")", ")", "\n", "out2", "=", "self", ".", "BN", "(", "split", "[", "1", "]", ".", "contiguous", "(", ")", ")", "\n", "out", "=", "torch", ".", "cat", "(", "(", "out1", ",", "out2", ")", ",", "1", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.ours_vit.PatchEmbed_VOLO.__init__": [[235, 266], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "ours_vit.IBN", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "ours_vit.IBN", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.softmax_loss.LabelSmoothingCrossEntropy.__init__"], ["def", "__init__", "(", "self", ",", "img_size", "=", "224", ",", "stem_conv", "=", "False", ",", "stem_stride", "=", "1", ",", "\n", "patch_size", "=", "8", ",", "in_chans", "=", "3", ",", "hidden_dim", "=", "64", ",", "embed_dim", "=", "384", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "assert", "patch_size", "in", "[", "4", ",", "8", ",", "16", "]", "\n", "\n", "self", ".", "stem_conv", "=", "stem_conv", "\n", "if", "stem_conv", ":", "\n", "            ", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_chans", ",", "hidden_dim", ",", "kernel_size", "=", "7", ",", "stride", "=", "stem_stride", ",", "\n", "padding", "=", "3", ",", "bias", "=", "False", ")", ",", "# 112x112", "\n", "#  nn.BatchNorm2d(hidden_dim),", "\n", "IBN", "(", "hidden_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "hidden_dim", ",", "hidden_dim", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "# 112x112", "\n", "#  nn.BatchNorm2d(hidden_dim),", "\n", "IBN", "(", "hidden_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "hidden_dim", ",", "hidden_dim", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "# 112x112", "\n", "nn", ".", "BatchNorm2d", "(", "hidden_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "\n", "", "self", ".", "proj", "=", "nn", ".", "Conv2d", "(", "hidden_dim", ",", "\n", "embed_dim", ",", "\n", "kernel_size", "=", "patch_size", "//", "stem_stride", ",", "\n", "stride", "=", "patch_size", "//", "stem_stride", ")", "\n", "self", ".", "num_patches", "=", "(", "img_size", "[", "0", "]", "//", "patch_size", ")", "*", "(", "img_size", "[", "1", "]", "//", "patch_size", ")", "\n", "self", ".", "img_size", "=", "img_size", "\n", "self", ".", "patch_size", "=", "patch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.ours_vit.PatchEmbed_VOLO.forward": [[267, 273], ["ours_vit.PatchEmbed_VOLO.proj", "ours_vit.PatchEmbed_VOLO.flatten().permute", "ours_vit.PatchEmbed_VOLO.conv", "ours_vit.PatchEmbed_VOLO.flatten"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "stem_conv", ":", "\n", "            ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "", "x", "=", "self", ".", "proj", "(", "x", ")", "# B, C, H, W", "\n", "x", "=", "x", ".", "flatten", "(", "2", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.ours_vit.Ours_ViT.__init__": [[278, 313], ["torch.Module.__init__", "to_2tuple", "ours_vit.PatchEmbed_VOLO", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "norm_layer", "ours_vit.trunc_normal_", "ours_vit.trunc_normal_", "ours_vit.Ours_ViT.apply", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "x.item", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Identity", "torch.Identity", "torch.Identity", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "ours_vit.Block", "range"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.softmax_loss.LabelSmoothingCrossEntropy.__init__", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.vit_pytorch.trunc_normal_", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.vit_pytorch.trunc_normal_"], ["def", "__init__", "(", "self", ",", "img_size", "=", "224", ",", "patch_size", "=", "16", ",", "stride_size", "=", "16", ",", "in_chans", "=", "3", ",", "num_classes", "=", "1000", ",", "embed_dim", "=", "768", ",", "depth", "=", "12", ",", "\n", "num_heads", "=", "12", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "drop_rate", "=", "0.", ",", "attn_drop_rate", "=", "0.", ",", "\n", "drop_path_rate", "=", "0.", ",", "hybrid_backbone", "=", "None", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "num_features", "=", "self", ".", "embed_dim", "=", "embed_dim", "# num_features for consistency with other models", "\n", "self", ".", "img_size", "=", "to_2tuple", "(", "img_size", ")", "\n", "self", ".", "patch_embed", "=", "PatchEmbed_VOLO", "(", "img_size", "=", "img_size", ",", "stem_conv", "=", "True", ",", "stem_stride", "=", "2", "\n", ",", "patch_size", "=", "patch_size", ",", "in_chans", "=", "in_chans", ",", "hidden_dim", "=", "64", ",", "embed_dim", "=", "embed_dim", ")", "\n", "\n", "num_patches", "=", "self", ".", "patch_embed", ".", "num_patches", "\n", "\n", "self", ".", "cls_token", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "1", ",", "embed_dim", ")", ")", "\n", "self", ".", "pos_embed", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "num_patches", "+", "1", ",", "embed_dim", ")", ")", "\n", "#  self.pos_embed = nn.Parameter(torch.zeros(1, num_patches, embed_dim))", "\n", "self", ".", "in_planes", "=", "embed_dim", "\n", "# Initialize SIE Embedding", "\n", "\n", "self", ".", "pos_drop", "=", "nn", ".", "Dropout", "(", "p", "=", "drop_rate", ")", "\n", "dpr", "=", "[", "x", ".", "item", "(", ")", "for", "x", "in", "torch", ".", "linspace", "(", "0", ",", "drop_path_rate", ",", "depth", ")", "]", "# stochastic depth decay rule", "\n", "\n", "self", ".", "blocks", "=", "nn", ".", "ModuleList", "(", "[", "\n", "Block", "(", "\n", "dim", "=", "embed_dim", ",", "num_heads", "=", "num_heads", ",", "mlp_ratio", "=", "mlp_ratio", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "attn_drop", "=", "attn_drop_rate", ",", "drop_path", "=", "dpr", "[", "i", "]", ",", "norm_layer", "=", "norm_layer", ")", "\n", "for", "i", "in", "range", "(", "depth", ")", "]", ")", "\n", "\n", "self", ".", "norm", "=", "norm_layer", "(", "embed_dim", ")", "\n", "\n", "# Classifier head", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "embed_dim", ",", "num_classes", ")", "if", "num_classes", ">", "0", "else", "nn", ".", "Identity", "(", ")", "\n", "trunc_normal_", "(", "self", ".", "cls_token", ",", "std", "=", ".02", ")", "\n", "trunc_normal_", "(", "self", ".", "pos_embed", ",", "std", "=", ".02", ")", "\n", "\n", "self", ".", "apply", "(", "self", ".", "_init_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.ours_vit.Ours_ViT._init_weights": [[314, 322], ["isinstance", "ours_vit.trunc_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.vit_pytorch.trunc_normal_"], ["", "def", "_init_weights", "(", "self", ",", "m", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "trunc_normal_", "(", "m", ".", "weight", ",", "std", "=", ".02", ")", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "LayerNorm", ")", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.ours_vit.Ours_ViT.no_weight_decay": [[323, 326], ["None"], "methods", ["None"], ["", "", "@", "torch", ".", "jit", ".", "ignore", "\n", "def", "no_weight_decay", "(", "self", ")", ":", "\n", "        ", "return", "{", "'pos_embed'", ",", "'cls_token'", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.ours_vit.Ours_ViT.get_classifier": [[327, 329], ["None"], "methods", ["None"], ["", "def", "get_classifier", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "head", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.ours_vit.Ours_ViT.reset_classifier": [[330, 333], ["torch.Linear", "torch.Linear", "torch.Linear", "torch.Identity", "torch.Identity", "torch.Identity"], "methods", ["None"], ["", "def", "reset_classifier", "(", "self", ",", "num_classes", ",", "global_pool", "=", "''", ")", ":", "\n", "        ", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "self", ".", "embed_dim", ",", "num_classes", ")", "if", "num_classes", ">", "0", "else", "nn", ".", "Identity", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.ours_vit.Ours_ViT.interpolate_pos_encoding": [[334, 357], ["torch.functional.interpolate", "torch.functional.interpolate", "torch.functional.interpolate", "patch_pos_embed.permute().view.permute().view.permute().view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "patch_pos_embed.permute().view.permute().view.reshape().permute", "int", "int", "patch_pos_embed.permute().view.permute().view.permute", "class_pos_embed.unsqueeze", "patch_pos_embed.permute().view.permute().view.reshape"], "methods", ["None"], ["", "def", "interpolate_pos_encoding", "(", "self", ",", "x", ",", "h", ",", "w", ")", ":", "\n", "        ", "npatch", "=", "x", ".", "shape", "[", "1", "]", "-", "1", "\n", "N", "=", "self", ".", "pos_embed", ".", "shape", "[", "1", "]", "-", "1", "\n", "if", "npatch", "==", "N", "and", "self", ".", "img_size", "==", "(", "h", ",", "w", ")", ":", "\n", "            ", "return", "self", ".", "pos_embed", "\n", "", "OH", "=", "self", ".", "img_size", "[", "0", "]", "//", "self", ".", "patch_embed", ".", "patch_size", "\n", "OW", "=", "self", ".", "img_size", "[", "1", "]", "//", "self", ".", "patch_embed", ".", "patch_size", "\n", "class_pos_embed", "=", "self", ".", "pos_embed", "[", ":", ",", "0", "]", "\n", "patch_pos_embed", "=", "self", ".", "pos_embed", "[", ":", ",", "1", ":", "]", "\n", "dim", "=", "x", ".", "shape", "[", "-", "1", "]", "\n", "# we add a small number to avoid floating point error in the interpolation", "\n", "# see discussion at https://github.com/facebookresearch/dino/issues/8", "\n", "w0", "=", "w", "//", "self", ".", "patch_embed", ".", "patch_size", "\n", "h0", "=", "h", "//", "self", ".", "patch_embed", ".", "patch_size", "\n", "w0", ",", "h0", "=", "w0", "+", "0.1", ",", "h0", "+", "0.1", "\n", "patch_pos_embed", "=", "nn", ".", "functional", ".", "interpolate", "(", "\n", "patch_pos_embed", ".", "reshape", "(", "1", ",", "OH", ",", "OW", ",", "dim", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ",", "\n", "scale_factor", "=", "(", "h0", "/", "OH", ",", "w0", "/", "OW", ")", ",", "\n", "mode", "=", "'bicubic'", ",", "\n", ")", "\n", "assert", "int", "(", "w0", ")", "==", "patch_pos_embed", ".", "shape", "[", "-", "1", "]", "and", "int", "(", "h0", ")", "==", "patch_pos_embed", ".", "shape", "[", "-", "2", "]", "\n", "patch_pos_embed", "=", "patch_pos_embed", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "view", "(", "1", ",", "-", "1", ",", "dim", ")", "\n", "return", "torch", ".", "cat", "(", "(", "class_pos_embed", ".", "unsqueeze", "(", "0", ")", ",", "patch_pos_embed", ")", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.ours_vit.Ours_ViT.prepare_tokens": [[358, 369], ["ours_vit.Ours_ViT.patch_embed", "ours_vit.Ours_ViT.cls_token.expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "ours_vit.Ours_ViT.pos_drop", "ours_vit.Ours_ViT.interpolate_pos_encoding"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.vision_transformer.VisionTransformer.interpolate_pos_encoding"], ["", "def", "prepare_tokens", "(", "self", ",", "x", ")", ":", "\n", "        ", "B", ",", "nc", ",", "w", ",", "h", "=", "x", ".", "shape", "\n", "x", "=", "self", ".", "patch_embed", "(", "x", ")", "# patch linear embedding", "\n", "\n", "# add the [CLS] token to the embed patch tokens", "\n", "cls_tokens", "=", "self", ".", "cls_token", ".", "expand", "(", "B", ",", "-", "1", ",", "-", "1", ")", "\n", "x", "=", "torch", ".", "cat", "(", "(", "cls_tokens", ",", "x", ")", ",", "dim", "=", "1", ")", "\n", "\n", "# add positional encoding to each token", "\n", "x", "=", "x", "+", "self", ".", "interpolate_pos_encoding", "(", "x", ",", "w", ",", "h", ")", "\n", "return", "self", ".", "pos_drop", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.ours_vit.Ours_ViT.forward": [[371, 378], ["ours_vit.Ours_ViT.prepare_tokens", "ours_vit.Ours_ViT.norm", "blk"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.vision_transformer.VisionTransformer.prepare_tokens"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "prepare_tokens", "(", "x", ")", "\n", "for", "blk", "in", "self", ".", "blocks", ":", "\n", "            ", "x", "=", "blk", "(", "x", ")", "\n", "", "x", "=", "self", ".", "norm", "(", "x", ")", "\n", "return", "x", "[", ":", ",", "0", "]", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.ours_vit.Ours_ViT.load_param": [[379, 406], ["torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load.items", "torch.load.items", "torch.load.items", "print", "torch.cat.reshape", "torch.cat.reshape", "torch.cat.reshape", "[].copy_", "len", "ours_vit.resize_pos_embed", "print", "print", "len", "print", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "ours_vit.Ours_ViT.state_dict().keys", "ours_vit.Ours_ViT.state_dict", "ours_vit.Ours_ViT.state_dict", "ours_vit.Ours_ViT.state_dict"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.vit_pytorch.resize_pos_embed", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.solver.scheduler.Scheduler.state_dict", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.solver.scheduler.Scheduler.state_dict", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.solver.scheduler.Scheduler.state_dict"], ["", "def", "load_param", "(", "self", ",", "model_path", ")", ":", "\n", "        ", "param_dict", "=", "torch", ".", "load", "(", "model_path", ",", "map_location", "=", "'cpu'", ")", "\n", "count", "=", "0", "\n", "if", "'model'", "in", "param_dict", ":", "\n", "            ", "param_dict", "=", "param_dict", "[", "'model'", "]", "\n", "", "if", "'state_dict'", "in", "param_dict", ":", "\n", "            ", "param_dict", "=", "param_dict", "[", "'state_dict'", "]", "\n", "", "for", "k", ",", "v", "in", "param_dict", ".", "items", "(", ")", ":", "\n", "            ", "if", "'head'", "in", "k", "or", "'dist'", "in", "k", ":", "\n", "                ", "continue", "\n", "", "if", "'patch_embed.proj.weight'", "in", "k", "and", "len", "(", "v", ".", "shape", ")", "<", "4", ":", "\n", "# For old models that I trained prior to conv based patchification", "\n", "                ", "O", ",", "I", ",", "H", ",", "W", "=", "self", ".", "patch_embed", ".", "proj", ".", "weight", ".", "shape", "\n", "v", "=", "v", ".", "reshape", "(", "O", ",", "-", "1", ",", "H", ",", "W", ")", "\n", "", "elif", "k", "==", "'pos_embed'", "and", "v", ".", "shape", "!=", "self", ".", "pos_embed", ".", "shape", ":", "\n", "# To resize pos embedding when using model at different size from pretrained weights", "\n", "                ", "if", "'distilled'", "in", "model_path", ":", "\n", "                    ", "print", "(", "'distill need to choose right cls token in the pth'", ")", "\n", "v", "=", "torch", ".", "cat", "(", "[", "v", "[", ":", ",", "0", ":", "1", "]", ",", "v", "[", ":", ",", "2", ":", "]", "]", ",", "dim", "=", "1", ")", "\n", "", "v", "=", "resize_pos_embed", "(", "v", ",", "self", ".", "pos_embed", ",", "self", ".", "patch_embed", ".", "num_y", ",", "self", ".", "patch_embed", ".", "num_x", ")", "\n", "", "try", ":", "\n", "                ", "self", ".", "state_dict", "(", ")", "[", "k", "]", ".", "copy_", "(", "v", ")", "\n", "count", "=", "count", "+", "1", "\n", "", "except", ":", "\n", "                ", "print", "(", "'===========================ERROR========================='", ")", "\n", "print", "(", "'shape do not match in k :{}: param_dict{} vs self.state_dict(){}'", ".", "format", "(", "k", ",", "v", ".", "shape", ",", "self", ".", "state_dict", "(", ")", "[", "k", "]", ".", "shape", ")", ")", "\n", "", "", "print", "(", "'Load %d / %d layers.'", "%", "(", "count", ",", "len", "(", "self", ".", "state_dict", "(", ")", ".", "keys", "(", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.ours_vit._ntuple": [[34, 40], ["isinstance", "tuple", "itertools.repeat"], "function", ["None"], ["def", "_ntuple", "(", "n", ")", ":", "\n", "    ", "def", "parse", "(", "x", ")", ":", "\n", "        ", "if", "isinstance", "(", "x", ",", "container_abcs", ".", "Iterable", ")", ":", "\n", "            ", "return", "x", "\n", "", "return", "tuple", "(", "repeat", "(", "x", ",", "n", ")", ")", "\n", "", "return", "parse", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.ours_vit.drop_path": [[45, 63], ["random_tensor.floor_", "torch.rand", "torch.rand", "torch.rand", "x.div"], "function", ["None"], ["def", "drop_path", "(", "x", ",", "drop_prob", ":", "float", "=", "0.", ",", "training", ":", "bool", "=", "False", ")", ":", "\n", "    ", "\"\"\"Drop paths (Stochastic Depth) per sample (when applied in main path of residual blocks).\n\n    This is the same as the DropConnect impl I created for EfficientNet, etc networks, however,\n    the original name is misleading as 'Drop Connect' is a different form of dropout in a separate paper...\n    See discussion: https://github.com/tensorflow/tpu/issues/494#issuecomment-532968956 ... I've opted for\n    changing the layer and argument names to 'drop path' rather than mix DropConnect as a layer name and use\n    'survival rate' as the argument.\n\n    \"\"\"", "\n", "if", "drop_prob", "==", "0.", "or", "not", "training", ":", "\n", "        ", "return", "x", "\n", "", "keep_prob", "=", "1", "-", "drop_prob", "\n", "shape", "=", "(", "x", ".", "shape", "[", "0", "]", ",", ")", "+", "(", "1", ",", ")", "*", "(", "x", ".", "ndim", "-", "1", ")", "# work with diff dim tensors, not just 2D ConvNets", "\n", "random_tensor", "=", "keep_prob", "+", "torch", ".", "rand", "(", "shape", ",", "dtype", "=", "x", ".", "dtype", ",", "device", "=", "x", ".", "device", ")", "\n", "random_tensor", ".", "floor_", "(", ")", "# binarize", "\n", "output", "=", "x", ".", "div", "(", "keep_prob", ")", "*", "random_tensor", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.ours_vit._cfg": [[75, 83], ["None"], "function", ["None"], ["", "", "def", "_cfg", "(", "url", "=", "''", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "{", "\n", "'url'", ":", "url", ",", "\n", "'num_classes'", ":", "1000", ",", "'input_size'", ":", "(", "3", ",", "224", ",", "224", ")", ",", "'pool_size'", ":", "None", ",", "\n", "'crop_pct'", ":", ".9", ",", "'interpolation'", ":", "'bicubic'", ",", "\n", "'mean'", ":", "IMAGENET_DEFAULT_MEAN", ",", "'std'", ":", "IMAGENET_DEFAULT_STD", ",", "\n", "'first_conv'", ":", "'patch_embed.proj'", ",", "'classifier'", ":", "'head'", ",", "\n", "**", "kwargs", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.ours_vit.resize_pos_embed": [[407, 422], ["int", "print", "posemb_grid.permute().reshape.reshape().permute", "torch.interpolate", "posemb_grid.permute().reshape.permute().reshape", "torch.cat", "torch.cat", "torch.cat", "math.sqrt", "len", "posemb_grid.permute().reshape.reshape", "posemb_grid.permute().reshape.permute"], "function", ["None"], ["", "", "def", "resize_pos_embed", "(", "posemb", ",", "posemb_new", ",", "hight", ",", "width", ")", ":", "\n", "# Rescale the grid of position embeddings when loading from state_dict. Adapted from", "\n", "# https://github.com/google-research/vision_transformer/blob/00883dd691c63a6830751563748663526e811cee/vit_jax/checkpoint.py#L224", "\n", "    ", "ntok_new", "=", "posemb_new", ".", "shape", "[", "1", "]", "\n", "\n", "posemb_token", ",", "posemb_grid", "=", "posemb", "[", ":", ",", ":", "1", "]", ",", "posemb", "[", "0", ",", "1", ":", "]", "\n", "ntok_new", "-=", "1", "\n", "\n", "gs_old", "=", "int", "(", "math", ".", "sqrt", "(", "len", "(", "posemb_grid", ")", ")", ")", "\n", "print", "(", "'Resized position embedding from size:{} to size: {} with height:{} width: {}'", ".", "format", "(", "posemb", ".", "shape", ",", "posemb_new", ".", "shape", ",", "hight", ",", "width", ")", ")", "\n", "posemb_grid", "=", "posemb_grid", ".", "reshape", "(", "1", ",", "gs_old", ",", "gs_old", ",", "-", "1", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "posemb_grid", "=", "F", ".", "interpolate", "(", "posemb_grid", ",", "size", "=", "(", "hight", ",", "width", ")", ",", "mode", "=", "'bilinear'", ")", "\n", "posemb_grid", "=", "posemb_grid", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "reshape", "(", "1", ",", "hight", "*", "width", ",", "-", "1", ")", "\n", "posemb", "=", "torch", ".", "cat", "(", "[", "posemb_token", ",", "posemb_grid", "]", ",", "dim", "=", "1", ")", "\n", "return", "posemb", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.ours_vit.ours_vit_small": [[424, 429], ["print", "ours_vit.Ours_ViT", "functools.partial"], "function", ["None"], ["", "def", "ours_vit_small", "(", "img_size", "=", "(", "256", ",", "128", ")", ",", "patch_size", "=", "16", ",", "stride_size", "=", "16", ",", "drop_rate", "=", "0.", ",", "attn_drop_rate", "=", "0.", ",", "drop_path_rate", "=", "0.0", ",", "**", "kwargs", ")", ":", "\n", "#  kwargs.setdefault('qk_scale', 768 ** -0.5)", "\n", "    ", "print", "(", "'ICS'", ")", "\n", "model", "=", "Ours_ViT", "(", "img_size", "=", "img_size", ",", "patch_size", "=", "patch_size", ",", "stride_size", "=", "stride_size", ",", "embed_dim", "=", "384", ",", "depth", "=", "12", ",", "num_heads", "=", "6", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "True", ",", "drop_path_rate", "=", "drop_path_rate", ",", "drop_rate", "=", "drop_rate", ",", "attn_drop_rate", "=", "attn_drop_rate", ",", "norm_layer", "=", "partial", "(", "nn", ".", "LayerNorm", ",", "eps", "=", "1e-6", ")", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.ours_vit.ours_vit_base": [[431, 435], ["print", "ours_vit.Ours_ViT", "functools.partial"], "function", ["None"], ["", "def", "ours_vit_base", "(", "img_size", "=", "(", "256", ",", "128", ")", ",", "patch_size", "=", "16", ",", "stride_size", "=", "16", ",", "drop_rate", "=", "0.", ",", "attn_drop_rate", "=", "0.", ",", "drop_path_rate", "=", "0.0", ",", "**", "kwargs", ")", ":", "\n", "    ", "print", "(", "'ICS'", ")", "\n", "model", "=", "Ours_ViT", "(", "img_size", "=", "img_size", ",", "patch_size", "=", "patch_size", ",", "stride_size", "=", "stride_size", ",", "embed_dim", "=", "768", ",", "depth", "=", "12", ",", "num_heads", "=", "12", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "True", ",", "drop_path_rate", "=", "drop_path_rate", ",", "drop_rate", "=", "drop_rate", ",", "attn_drop_rate", "=", "attn_drop_rate", ",", "norm_layer", "=", "partial", "(", "nn", ".", "LayerNorm", ",", "eps", "=", "1e-6", ")", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.ours_vit._no_grad_trunc_normal_": [[436, 469], ["print", "torch.no_grad", "torch.no_grad", "torch.no_grad", "ours_vit._no_grad_trunc_normal_.norm_cdf"], "function", ["None"], ["", "def", "_no_grad_trunc_normal_", "(", "tensor", ",", "mean", ",", "std", ",", "a", ",", "b", ")", ":", "\n", "# Cut & paste from PyTorch official master until it's in a few official releases - RW", "\n", "# Method based on https://people.sc.fsu.edu/~jburkardt/presentations/truncated_normal.pdf", "\n", "    ", "def", "norm_cdf", "(", "x", ")", ":", "\n", "# Computes standard normal cumulative distribution function", "\n", "        ", "return", "(", "1.", "+", "math", ".", "erf", "(", "x", "/", "math", ".", "sqrt", "(", "2.", ")", ")", ")", "/", "2.", "\n", "\n", "", "if", "(", "mean", "<", "a", "-", "2", "*", "std", ")", "or", "(", "mean", ">", "b", "+", "2", "*", "std", ")", ":", "\n", "        ", "print", "(", "\"mean is more than 2 std from [a, b] in nn.init.trunc_normal_. \"", "\n", "\"The distribution of values may be incorrect.\"", ",", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# Values are generated by using a truncated uniform distribution and", "\n", "# then using the inverse CDF for the normal distribution.", "\n", "# Get upper and lower cdf values", "\n", "        ", "l", "=", "norm_cdf", "(", "(", "a", "-", "mean", ")", "/", "std", ")", "\n", "u", "=", "norm_cdf", "(", "(", "b", "-", "mean", ")", "/", "std", ")", "\n", "\n", "# Uniformly fill tensor with values from [l, u], then translate to", "\n", "# [2l-1, 2u-1].", "\n", "tensor", ".", "uniform_", "(", "2", "*", "l", "-", "1", ",", "2", "*", "u", "-", "1", ")", "\n", "\n", "# Use inverse cdf transform for normal distribution to get truncated", "\n", "# standard normal", "\n", "tensor", ".", "erfinv_", "(", ")", "\n", "\n", "# Transform to proper mean, std", "\n", "tensor", ".", "mul_", "(", "std", "*", "math", ".", "sqrt", "(", "2.", ")", ")", "\n", "tensor", ".", "add_", "(", "mean", ")", "\n", "\n", "# Clamp to ensure it's in the proper range", "\n", "tensor", ".", "clamp_", "(", "min", "=", "a", ",", "max", "=", "b", ")", "\n", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.ours_vit.trunc_normal_": [[471, 490], ["ours_vit._no_grad_trunc_normal_"], "function", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.vit_pytorch._no_grad_trunc_normal_"], ["", "", "def", "trunc_normal_", "(", "tensor", ",", "mean", "=", "0.", ",", "std", "=", "1.", ",", "a", "=", "-", "2.", ",", "b", "=", "2.", ")", ":", "\n", "# type: (Tensor, float, float, float, float) -> Tensor", "\n", "    ", "r\"\"\"Fills the input Tensor with values drawn from a truncated\n    normal distribution. The values are effectively drawn from the\n    normal distribution :math:`\\mathcal{N}(\\text{mean}, \\text{std}^2)`\n    with values outside :math:`[a, b]` redrawn until they are within\n    the bounds. The method used for generating the random values works\n    best when :math:`a \\leq \\text{mean} \\leq b`.\n    Args:\n        tensor: an n-dimensional `torch.Tensor`\n        mean: the mean of the normal distribution\n        std: the standard deviation of the normal distribution\n        a: the minimum cutoff value\n        b: the maximum cutoff value\n    Examples:\n        >>> w = torch.empty(3, 5)\n        >>> nn.init.trunc_normal_(w)\n    \"\"\"", "\n", "return", "_no_grad_trunc_normal_", "(", "tensor", ",", "mean", ",", "std", ",", "a", ",", "b", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.visualize_attention.apply_mask": [[38, 42], ["range", "numpy.np.uint8"], "function", ["None"], ["def", "apply_mask", "(", "image", ",", "mask", ",", "color", ",", "alpha", "=", "0.5", ")", ":", "\n", "    ", "for", "c", "in", "range", "(", "3", ")", ":", "\n", "        ", "image", "[", ":", ",", ":", ",", "c", "]", "=", "image", "[", ":", ",", ":", ",", "c", "]", "*", "(", "1", "-", "alpha", "*", "mask", ")", "+", "alpha", "*", "mask", "*", "color", "[", "c", "]", "*", "255", "\n", "", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.visualize_attention.random_colors": [[44, 53], ["list", "random.shuffle", "map", "range", "colorsys.hsv_to_rgb"], "function", ["None"], ["", "def", "random_colors", "(", "N", ",", "bright", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    Generate random colors.\n    \"\"\"", "\n", "brightness", "=", "1.0", "if", "bright", "else", "0.7", "\n", "hsv", "=", "[", "(", "i", "/", "N", ",", "1", ",", "brightness", ")", "for", "i", "in", "range", "(", "N", ")", "]", "\n", "colors", "=", "list", "(", "map", "(", "lambda", "c", ":", "colorsys", ".", "hsv_to_rgb", "(", "*", "c", ")", ",", "hsv", ")", ")", "\n", "random", ".", "shuffle", "(", "colors", ")", "\n", "return", "colors", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.visualize_attention.display_instances": [[55, 96], ["matplotlib.figure", "matplotlib.Axes", "plt.gca.set_axis_off", "plt.figure.add_axes", "matplotlib.gca", "visualize_attention.random_colors", "plt.gca.set_ylim", "plt.gca.set_xlim", "plt.gca.axis", "image.astype().copy", "range", "plt.gca.imshow", "plt.figure.savefig", "print", "visualize_attention.apply_mask", "apply_mask.astype", "image.astype", "cv2.blur", "numpy.zeros", "skimage.measure.find_contours", "matplotlib.patches.Polygon", "plt.gca.add_patch", "numpy.fliplr"], "function", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.visualize_attention.random_colors", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.visualize_attention.apply_mask"], ["", "def", "display_instances", "(", "image", ",", "mask", ",", "fname", "=", "\"test\"", ",", "figsize", "=", "(", "5", ",", "5", ")", ",", "blur", "=", "False", ",", "contour", "=", "True", ",", "alpha", "=", "0.5", ")", ":", "\n", "    ", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "figsize", ",", "frameon", "=", "False", ")", "\n", "ax", "=", "plt", ".", "Axes", "(", "fig", ",", "[", "0.", ",", "0.", ",", "1.", ",", "1.", "]", ")", "\n", "ax", ".", "set_axis_off", "(", ")", "\n", "fig", ".", "add_axes", "(", "ax", ")", "\n", "ax", "=", "plt", ".", "gca", "(", ")", "\n", "\n", "N", "=", "1", "\n", "mask", "=", "mask", "[", "None", ",", ":", ",", ":", "]", "\n", "# Generate random colors", "\n", "colors", "=", "random_colors", "(", "N", ")", "\n", "\n", "# Show area outside image boundaries.", "\n", "height", ",", "width", "=", "image", ".", "shape", "[", ":", "2", "]", "\n", "margin", "=", "0", "\n", "ax", ".", "set_ylim", "(", "height", "+", "margin", ",", "-", "margin", ")", "\n", "ax", ".", "set_xlim", "(", "-", "margin", ",", "width", "+", "margin", ")", "\n", "ax", ".", "axis", "(", "'off'", ")", "\n", "masked_image", "=", "image", ".", "astype", "(", "np", ".", "uint32", ")", ".", "copy", "(", ")", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "        ", "color", "=", "colors", "[", "i", "]", "\n", "_mask", "=", "mask", "[", "i", "]", "\n", "if", "blur", ":", "\n", "            ", "_mask", "=", "cv2", ".", "blur", "(", "_mask", ",", "(", "10", ",", "10", ")", ")", "\n", "# Mask", "\n", "", "masked_image", "=", "apply_mask", "(", "masked_image", ",", "_mask", ",", "color", ",", "alpha", ")", "\n", "# Mask Polygon", "\n", "# Pad to ensure proper polygons for masks that touch image edges.", "\n", "if", "contour", ":", "\n", "            ", "padded_mask", "=", "np", ".", "zeros", "(", "(", "_mask", ".", "shape", "[", "0", "]", "+", "2", ",", "_mask", ".", "shape", "[", "1", "]", "+", "2", ")", ")", "\n", "padded_mask", "[", "1", ":", "-", "1", ",", "1", ":", "-", "1", "]", "=", "_mask", "\n", "contours", "=", "find_contours", "(", "padded_mask", ",", "0.5", ")", "\n", "for", "verts", "in", "contours", ":", "\n", "# Subtract the padding and flip (y, x) to (x, y)", "\n", "                ", "verts", "=", "np", ".", "fliplr", "(", "verts", ")", "-", "1", "\n", "p", "=", "Polygon", "(", "verts", ",", "facecolor", "=", "\"none\"", ",", "edgecolor", "=", "color", ")", "\n", "ax", ".", "add_patch", "(", "p", ")", "\n", "", "", "", "ax", ".", "imshow", "(", "masked_image", ".", "astype", "(", "np", ".", "uint8", ")", ",", "aspect", "=", "'auto'", ")", "\n", "fig", ".", "savefig", "(", "fname", ")", "\n", "print", "(", "f\"{fname} saved.\"", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.main_dino.DINOLoss.__init__": [[398, 412], ["torch.Module.__init__", "main_dino.DINOLoss.register_buffer", "numpy.concatenate", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "numpy.linspace", "numpy.ones"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.softmax_loss.LabelSmoothingCrossEntropy.__init__"], ["    ", "def", "__init__", "(", "self", ",", "out_dim", ",", "ncrops", ",", "warmup_teacher_temp", ",", "teacher_temp", ",", "\n", "warmup_teacher_temp_epochs", ",", "nepochs", ",", "student_temp", "=", "0.1", ",", "\n", "center_momentum", "=", "0.9", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "student_temp", "=", "student_temp", "\n", "self", ".", "center_momentum", "=", "center_momentum", "\n", "self", ".", "ncrops", "=", "ncrops", "\n", "self", ".", "register_buffer", "(", "\"center\"", ",", "torch", ".", "zeros", "(", "1", ",", "out_dim", ")", ")", "\n", "# we apply a warm up for the teacher temperature because", "\n", "# a too high temperature makes the training instable at the beginning", "\n", "self", ".", "teacher_temp_schedule", "=", "np", ".", "concatenate", "(", "(", "\n", "np", ".", "linspace", "(", "warmup_teacher_temp", ",", "\n", "teacher_temp", ",", "warmup_teacher_temp_epochs", ")", ",", "\n", "np", ".", "ones", "(", "nepochs", "-", "warmup_teacher_temp_epochs", ")", "*", "teacher_temp", "\n", ")", ")", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.main_dino.DINOLoss.forward": [[414, 439], ["student_out.chunk.chunk.chunk", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "teacher_out.detach().chunk.detach().chunk.detach().chunk", "enumerate", "main_dino.DINOLoss.update_center", "range", "teacher_out.detach().chunk.detach().chunk.detach", "len", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum.mean", "torch.sum.mean", "torch.sum.mean", "torch.sum.mean", "torch.sum.mean", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.main_dino.DINOLoss.update_center"], ["", "def", "forward", "(", "self", ",", "student_output", ",", "teacher_output", ",", "epoch", ")", ":", "\n", "        ", "\"\"\"\n        Cross-entropy between softmax outputs of the teacher and student networks.\n        \"\"\"", "\n", "student_out", "=", "student_output", "/", "self", ".", "student_temp", "\n", "student_out", "=", "student_out", ".", "chunk", "(", "self", ".", "ncrops", ")", "\n", "\n", "# teacher centering and sharpening", "\n", "temp", "=", "self", ".", "teacher_temp_schedule", "[", "epoch", "]", "\n", "teacher_out", "=", "F", ".", "softmax", "(", "(", "teacher_output", "-", "self", ".", "center", ")", "/", "temp", ",", "dim", "=", "-", "1", ")", "\n", "teacher_out", "=", "teacher_out", ".", "detach", "(", ")", ".", "chunk", "(", "2", ")", "\n", "\n", "total_loss", "=", "0", "\n", "n_loss_terms", "=", "0", "\n", "for", "iq", ",", "q", "in", "enumerate", "(", "teacher_out", ")", ":", "\n", "            ", "for", "v", "in", "range", "(", "len", "(", "student_out", ")", ")", ":", "\n", "                ", "if", "v", "==", "iq", ":", "\n", "# we skip cases where student and teacher operate on the same view", "\n", "                    ", "continue", "\n", "", "loss", "=", "torch", ".", "sum", "(", "-", "q", "*", "F", ".", "log_softmax", "(", "student_out", "[", "v", "]", ",", "dim", "=", "-", "1", ")", ",", "dim", "=", "-", "1", ")", "\n", "total_loss", "+=", "loss", ".", "mean", "(", ")", "\n", "n_loss_terms", "+=", "1", "\n", "", "", "total_loss", "/=", "n_loss_terms", "\n", "self", ".", "update_center", "(", "teacher_output", ")", "\n", "return", "total_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.main_dino.DINOLoss.update_center": [[440, 451], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.all_reduce", "torch.all_reduce", "torch.all_reduce", "torch.all_reduce", "torch.all_reduce", "len", "torch.get_world_size", "torch.get_world_size", "torch.get_world_size", "torch.get_world_size", "torch.get_world_size"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.utils.get_world_size", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.utils.get_world_size", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.utils.get_world_size", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.utils.get_world_size", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.utils.get_world_size"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "update_center", "(", "self", ",", "teacher_output", ")", ":", "\n", "        ", "\"\"\"\n        Update center used for teacher output.\n        \"\"\"", "\n", "batch_center", "=", "torch", ".", "sum", "(", "teacher_output", ",", "dim", "=", "0", ",", "keepdim", "=", "True", ")", "\n", "dist", ".", "all_reduce", "(", "batch_center", ")", "\n", "batch_center", "=", "batch_center", "/", "(", "len", "(", "teacher_output", ")", "*", "dist", ".", "get_world_size", "(", ")", ")", "\n", "\n", "# ema update", "\n", "self", ".", "center", "=", "self", ".", "center", "*", "self", ".", "center_momentum", "+", "batch_center", "*", "(", "1", "-", "self", ".", "center_momentum", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.main_dino.DataAugmentationDINO.__init__": [[454, 490], ["torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.RandomApply", "torchvision.transforms.RandomGrayscale", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.RandomResizedCrop", "utils.GaussianBlur", "torchvision.transforms.RandomResizedCrop", "utils.GaussianBlur", "utils.Solarization", "torchvision.transforms.RandomResizedCrop", "utils.GaussianBlur", "torchvision.transforms.ColorJitter"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ",", "crop_size", ",", "global_crops_scale", ",", "local_crops_scale", ",", "local_crops_number", ")", ":", "\n", "        ", "flip_and_color_jitter", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomHorizontalFlip", "(", "p", "=", "0.5", ")", ",", "\n", "transforms", ".", "RandomApply", "(", "\n", "[", "transforms", ".", "ColorJitter", "(", "brightness", "=", "0.4", ",", "contrast", "=", "0.4", ",", "saturation", "=", "0.2", ",", "hue", "=", "0.1", ")", "]", ",", "\n", "p", "=", "0.8", "\n", ")", ",", "\n", "transforms", ".", "RandomGrayscale", "(", "p", "=", "0.2", ")", ",", "\n", "]", ")", "\n", "normalize", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.485", ",", "0.456", ",", "0.406", ")", ",", "(", "0.229", ",", "0.224", ",", "0.225", ")", ")", ",", "\n", "]", ")", "\n", "\n", "# first global crop", "\n", "self", ".", "global_transfo1", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "size", "=", "size", ",", "scale", "=", "global_crops_scale", ",", "interpolation", "=", "Image", ".", "BICUBIC", ")", ",", "\n", "flip_and_color_jitter", ",", "\n", "utils", ".", "GaussianBlur", "(", "1.0", ")", ",", "\n", "normalize", ",", "\n", "]", ")", "\n", "# second global crop", "\n", "self", ".", "global_transfo2", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "size", "=", "size", ",", "scale", "=", "global_crops_scale", ",", "interpolation", "=", "Image", ".", "BICUBIC", ")", ",", "\n", "flip_and_color_jitter", ",", "\n", "utils", ".", "GaussianBlur", "(", "0.1", ")", ",", "\n", "utils", ".", "Solarization", "(", "0.2", ")", ",", "\n", "normalize", ",", "\n", "]", ")", "\n", "# transformation for the local small crops", "\n", "self", ".", "local_crops_number", "=", "local_crops_number", "\n", "self", ".", "local_transfo", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "size", "=", "crop_size", ",", "scale", "=", "local_crops_scale", ",", "interpolation", "=", "Image", ".", "BICUBIC", ")", ",", "\n", "flip_and_color_jitter", ",", "\n", "utils", ".", "GaussianBlur", "(", "p", "=", "0.5", ")", ",", "\n", "normalize", ",", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.main_dino.DataAugmentationDINO.__call__": [[492, 499], ["crops.append", "crops.append", "range", "main_dino.DataAugmentationDINO.global_transfo1", "main_dino.DataAugmentationDINO.global_transfo2", "crops.append", "main_dino.DataAugmentationDINO.local_transfo"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "image", ")", ":", "\n", "        ", "crops", "=", "[", "]", "\n", "crops", ".", "append", "(", "self", ".", "global_transfo1", "(", "image", ")", ")", "\n", "crops", ".", "append", "(", "self", ".", "global_transfo2", "(", "image", ")", ")", "\n", "for", "_", "in", "range", "(", "self", ".", "local_crops_number", ")", ":", "\n", "            ", "crops", ".", "append", "(", "self", ".", "local_transfo", "(", "image", ")", ")", "\n", "", "return", "crops", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.main_dino.get_args_parser": [[43, 136], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument"], "function", ["None"], ["def", "get_args_parser", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "'DINO'", ",", "add_help", "=", "False", ")", "\n", "\n", "# Model parameters", "\n", "parser", ".", "add_argument", "(", "'--arch'", ",", "default", "=", "'vit_small'", ",", "type", "=", "str", ",", "\n", "#  choices=['vit_tiny', 'vit_small', 'vit_base', 'deit_tiny', 'deit_small'] + torchvision_archs,", "\n", "help", "=", "\"\"\"Name of architecture to train. For quick experiments with ViTs,\n        we recommend using vit_tiny or vit_small.\"\"\"", ")", "\n", "parser", ".", "add_argument", "(", "'--patch_size'", ",", "default", "=", "16", ",", "type", "=", "int", ",", "help", "=", "\"\"\"Size in pixels\n        of input square patches - default 16 (for 16x16 patches). Using smaller\n        values leads to better performance but requires more memory. Applies only\n        for ViTs (vit_tiny, vit_small and vit_base). If <16, we recommend disabling\n        mixed precision training (--use_fp16 false) to avoid unstabilities.\"\"\"", ")", "\n", "parser", ".", "add_argument", "(", "'--height'", ",", "default", "=", "224", ",", "type", "=", "int", ",", "help", "=", "\"\"\"Height of image\"\"\"", ")", "\n", "parser", ".", "add_argument", "(", "'--width'", ",", "default", "=", "224", ",", "type", "=", "int", ",", "help", "=", "\"\"\"Width of image\"\"\"", ")", "\n", "parser", ".", "add_argument", "(", "'--crop_height'", ",", "default", "=", "96", ",", "type", "=", "int", ",", "help", "=", "\"\"\"Height of crop image\"\"\"", ")", "\n", "parser", ".", "add_argument", "(", "'--crop_width'", ",", "default", "=", "96", ",", "type", "=", "int", ",", "help", "=", "\"\"\"Width of crop image\"\"\"", ")", "\n", "parser", ".", "add_argument", "(", "'--out_dim'", ",", "default", "=", "65536", ",", "type", "=", "int", ",", "help", "=", "\"\"\"Dimensionality of\n        the DINO head output. For complex and large datasets large values (like 65k) work well.\"\"\"", ")", "\n", "parser", ".", "add_argument", "(", "'--norm_last_layer'", ",", "default", "=", "True", ",", "type", "=", "utils", ".", "bool_flag", ",", "\n", "help", "=", "\"\"\"Whether or not to weight normalize the last layer of the DINO head.\n        Not normalizing leads to better performance but can make the training unstable.\n        In our experiments, we typically set this paramater to False with vit_small and True with vit_base.\"\"\"", ")", "\n", "parser", ".", "add_argument", "(", "'--momentum_teacher'", ",", "default", "=", "0.996", ",", "type", "=", "float", ",", "help", "=", "\"\"\"Base EMA\n        parameter for teacher update. The value is increased to 1 during training with cosine schedule.\n        We recommend setting a higher value with small batches: for example use 0.9995 with batch size of 256.\"\"\"", ")", "\n", "parser", ".", "add_argument", "(", "'--use_bn_in_head'", ",", "default", "=", "False", ",", "type", "=", "utils", ".", "bool_flag", ",", "\n", "help", "=", "\"Whether to use batch normalizations in projection head (Default: False)\"", ")", "\n", "\n", "# Temperature teacher parameters", "\n", "parser", ".", "add_argument", "(", "'--warmup_teacher_temp'", ",", "default", "=", "0.04", ",", "type", "=", "float", ",", "\n", "help", "=", "\"\"\"Initial value for the teacher temperature: 0.04 works well in most cases.\n        Try decreasing it if the training loss does not decrease.\"\"\"", ")", "\n", "parser", ".", "add_argument", "(", "'--teacher_temp'", ",", "default", "=", "0.04", ",", "type", "=", "float", ",", "help", "=", "\"\"\"Final value (after linear warmup)\n        of the teacher temperature. For most experiments, anything above 0.07 is unstable. We recommend\n        starting with the default value of 0.04 and increase this slightly if needed.\"\"\"", ")", "\n", "parser", ".", "add_argument", "(", "'--warmup_teacher_temp_epochs'", ",", "default", "=", "0", ",", "type", "=", "int", ",", "\n", "help", "=", "'Number of warmup epochs for the teacher temperature (Default: 30).'", ")", "\n", "\n", "# Training/Optimization parameters", "\n", "parser", ".", "add_argument", "(", "'--use_fp16'", ",", "type", "=", "utils", ".", "bool_flag", ",", "default", "=", "True", ",", "help", "=", "\"\"\"Whether or not\n        to use half precision for training. Improves training time and memory requirements,\n        but can provoke instability and slight decay of performance. We recommend disabling\n        mixed precision if the loss is unstable, if reducing the patch size or if training with bigger ViTs.\"\"\"", ")", "\n", "parser", ".", "add_argument", "(", "'--weight_decay'", ",", "type", "=", "float", ",", "default", "=", "0.04", ",", "help", "=", "\"\"\"Initial value of the\n        weight decay. With ViT, a smaller value at the beginning of training works well.\"\"\"", ")", "\n", "parser", ".", "add_argument", "(", "'--weight_decay_end'", ",", "type", "=", "float", ",", "default", "=", "0.4", ",", "help", "=", "\"\"\"Final value of the\n        weight decay. We use a cosine schedule for WD and using a larger decay by\n        the end of training improves performance for ViTs.\"\"\"", ")", "\n", "parser", ".", "add_argument", "(", "'--clip_grad'", ",", "type", "=", "float", ",", "default", "=", "3.0", ",", "help", "=", "\"\"\"Maximal parameter\n        gradient norm if using gradient clipping. Clipping with norm .3 ~ 1.0 can\n        help optimization for larger ViT architectures. 0 for disabling.\"\"\"", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size_per_gpu'", ",", "default", "=", "64", ",", "type", "=", "int", ",", "\n", "help", "=", "'Per-GPU batch-size : number of distinct images loaded on one GPU.'", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "default", "=", "100", ",", "type", "=", "int", ",", "help", "=", "'Number of epochs of training.'", ")", "\n", "parser", ".", "add_argument", "(", "'--freeze_last_layer'", ",", "default", "=", "1", ",", "type", "=", "int", ",", "help", "=", "\"\"\"Number of epochs\n        during which we keep the output layer fixed. Typically doing so during\n        the first epoch helps training. Try increasing this value if the loss does not decrease.\"\"\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--lr\"", ",", "default", "=", "0.0005", ",", "type", "=", "float", ",", "help", "=", "\"\"\"Learning rate at the end of\n        linear warmup (highest LR used during training). The learning rate is linearly scaled\n        with the batch size, and specified here for a reference batch size of 256.\"\"\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--warmup_epochs\"", ",", "default", "=", "10", ",", "type", "=", "int", ",", "\n", "help", "=", "\"Number of epochs for the linear learning-rate warm up.\"", ")", "\n", "parser", ".", "add_argument", "(", "'--min_lr'", ",", "type", "=", "float", ",", "default", "=", "1e-6", ",", "help", "=", "\"\"\"Target LR at the\n        end of optimization. We use a cosine LR schedule with linear warmup.\"\"\"", ")", "\n", "parser", ".", "add_argument", "(", "'--optimizer'", ",", "default", "=", "'adamw'", ",", "type", "=", "str", ",", "\n", "choices", "=", "[", "'adamw'", ",", "'sgd'", ",", "'lars'", "]", ",", "help", "=", "\"\"\"Type of optimizer. We recommend using adamw with ViTs.\"\"\"", ")", "\n", "\n", "# Multi-crop parameters", "\n", "parser", ".", "add_argument", "(", "'--global_crops_scale'", ",", "type", "=", "float", ",", "nargs", "=", "'+'", ",", "default", "=", "(", "0.4", ",", "1.", ")", ",", "\n", "help", "=", "\"\"\"Scale range of the cropped image before resizing, relatively to the origin image.\n        Used for large global view cropping. When disabling multi-crop (--local_crops_number 0), we\n        recommand using a wider range of scale (\"--global_crops_scale 0.14 1.\" for example)\"\"\"", ")", "\n", "parser", ".", "add_argument", "(", "'--local_crops_number'", ",", "type", "=", "int", ",", "default", "=", "8", ",", "help", "=", "\"\"\"Number of small\n        local views to generate. Set this parameter to 0 to disable multi-crop training.\n        When disabling multi-crop we recommend to use \"--global_crops_scale 0.14 1.\" \"\"\"", ")", "\n", "parser", ".", "add_argument", "(", "'--local_crops_scale'", ",", "type", "=", "float", ",", "nargs", "=", "'+'", ",", "default", "=", "(", "0.05", ",", "0.4", ")", ",", "\n", "help", "=", "\"\"\"Scale range of the cropped image before resizing, relatively to the origin image.\n        Used for small local view cropping of multi-crop.\"\"\"", ")", "\n", "\n", "# Misc", "\n", "parser", ".", "add_argument", "(", "'--data_path'", ",", "default", "=", "'/path/to/imagenet/train/'", ",", "type", "=", "str", ",", "\n", "help", "=", "'Please specify path to the ImageNet training data.'", ")", "\n", "parser", ".", "add_argument", "(", "'--filter_path'", ",", "default", "=", "''", ",", "type", "=", "str", ",", "help", "=", "'Filter of image list.'", ")", "\n", "parser", ".", "add_argument", "(", "'--keep_num'", ",", "default", "=", "1281167", ",", "type", "=", "int", ",", "help", "=", "'Number of training images.'", ")", "\n", "parser", ".", "add_argument", "(", "'--output_dir'", ",", "default", "=", "\".\"", ",", "type", "=", "str", ",", "help", "=", "'Path to save logs and checkpoints.'", ")", "\n", "parser", ".", "add_argument", "(", "'--saveckp_freq'", ",", "default", "=", "5", ",", "type", "=", "int", ",", "help", "=", "'Save checkpoint every x epochs.'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "default", "=", "0", ",", "type", "=", "int", ",", "help", "=", "'Random seed.'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_workers'", ",", "default", "=", "16", ",", "type", "=", "int", ",", "help", "=", "'Number of data loading workers per GPU.'", ")", "\n", "parser", ".", "add_argument", "(", "\"--dist_url\"", ",", "default", "=", "\"env://\"", ",", "type", "=", "str", ",", "help", "=", "\"\"\"url used to set up\n        distributed training; see https://pytorch.org/docs/stable/distributed.html\"\"\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--local_rank\"", ",", "default", "=", "0", ",", "type", "=", "int", ",", "help", "=", "\"Please ignore and do not set this argument.\"", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.main_dino.train_dino": [[138, 333], ["utils.init_distributed_mode", "utils.fix_random_seeds", "print", "print", "main_dino.DataAugmentationDINO", "torchvision.datasets.ImageFolder", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "print", "args.arch.replace", "utils.MultiCropWrapper", "utils.MultiCropWrapper", "utils.has_batchnorms", "torch.parallel.DistributedDataParallel", "teacher_without_ddp.load_state_dict", "ours_vit.ours_vit_base.parameters", "print", "DINOLoss().cuda", "utils.get_params_groups", "utils.cosine_scheduler", "utils.cosine_scheduler", "utils.cosine_scheduler", "print", "utils.restart_from_checkpoint", "time.time", "print", "range", "str", "print", "pickle.load", "os.path.join", "list", "vision_transformer.__dict__.keys", "vision_transformer.DINOHead", "vision_transformer.DINOHead", "ours_vit.ours_vit_base.cuda", "ours_vit.ours_vit_base.cuda", "torch.SyncBatchNorm.convert_sync_batchnorm", "torch.SyncBatchNorm.convert_sync_batchnorm", "torch.parallel.DistributedDataParallel", "ours_vit.ours_vit_base.module.state_dict", "torch.optim.AdamW", "torch.optim.AdamW", "torch.optim.AdamW", "torch.optim.AdamW", "torch.optim.AdamW", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "len", "len", "len", "os.path.join", "torch.utils.data.DataLoader.sampler.set_epoch", "main_dino.train_one_epoch", "utils.save_on_master", "utils.is_main_process", "time.time", "datetime.timedelta", "utils.get_sha", "open", "os.path.join", "zip", "torchvision.models.__dict__.keys", "main_dino.DINOLoss", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "ours_vit.ours_vit_base.state_dict", "ours_vit.ours_vit_base.state_dict", "utils.LARS.state_dict", "DINOLoss().cuda.state_dict", "torch.cuda.amp.GradScaler.state_dict", "os.path.join", "utils.save_on_master", "range", "len", "ours_vit.ours_vit_small", "ours_vit.ours_vit_small", "utils.LARS", "os.path.join", "f.write", "int", "sorted", "ours_vit.ours_vit_base", "ours_vit.ours_vit_base", "print", "utils.get_world_size", "train_one_epoch.items", "str", "dict().items", "json.dumps", "pathlib.Path", "dict", "vars"], "function", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.utils.init_distributed_mode", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.utils.fix_random_seeds", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.utils.has_batchnorms", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.solver.scheduler.Scheduler.load_state_dict", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.utils.get_params_groups", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.utils.cosine_scheduler", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.utils.cosine_scheduler", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.utils.cosine_scheduler", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.utils.restart_from_checkpoint", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.solver.scheduler.Scheduler.state_dict", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.main_dino.train_one_epoch", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.utils.save_on_master", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.utils.is_main_process", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.utils.get_sha", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.solver.scheduler.Scheduler.state_dict", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.solver.scheduler.Scheduler.state_dict", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.solver.scheduler.Scheduler.state_dict", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.solver.scheduler.Scheduler.state_dict", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.solver.scheduler.Scheduler.state_dict", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.utils.save_on_master", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.ours_vit.ours_vit_small", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.ours_vit.ours_vit_small", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.utils.logging.Logger.write", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.ours_vit.ours_vit_base", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.ours_vit.ours_vit_base", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.utils.get_world_size"], ["", "def", "train_dino", "(", "args", ")", ":", "\n", "    ", "utils", ".", "init_distributed_mode", "(", "args", ")", "\n", "utils", ".", "fix_random_seeds", "(", "args", ".", "seed", ")", "\n", "print", "(", "\"git:\\n  {}\\n\"", ".", "format", "(", "utils", ".", "get_sha", "(", ")", ")", ")", "\n", "print", "(", "\"\\n\"", ".", "join", "(", "\"%s: %s\"", "%", "(", "k", ",", "str", "(", "v", ")", ")", "for", "k", ",", "v", "in", "sorted", "(", "dict", "(", "vars", "(", "args", ")", ")", ".", "items", "(", ")", ")", ")", ")", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "# ============ preparing data ... ============", "\n", "transform", "=", "DataAugmentationDINO", "(", "\n", "(", "args", ".", "height", ",", "args", ".", "width", ")", ",", "\n", "(", "args", ".", "crop_height", ",", "args", ".", "crop_width", ")", ",", "\n", "args", ".", "global_crops_scale", ",", "\n", "args", ".", "local_crops_scale", ",", "\n", "args", ".", "local_crops_number", ",", "\n", ")", "\n", "dataset", "=", "datasets", ".", "ImageFolder", "(", "args", ".", "data_path", ",", "transform", "=", "transform", ")", "\n", "if", "args", ".", "filter_path", "!=", "''", ":", "\n", "        ", "save_list", "=", "pickle", ".", "load", "(", "open", "(", "args", ".", "filter_path", ",", "\"rb\"", ")", ")", "\n", "keep_num", "=", "args", ".", "keep_num", "\n", "label", "=", "[", "0", "for", "i", "in", "range", "(", "keep_num", ")", "]", "\n", "dir_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data_path", ",", "'images'", ")", "\n", "used_list", "=", "[", "os", ".", "path", ".", "join", "(", "dir_path", ",", "i", ")", "for", "i", "in", "save_list", "[", ":", "keep_num", "]", "]", "\n", "dataset", ".", "samples", "=", "list", "(", "zip", "(", "used_list", ",", "label", ")", ")", "\n", "dataset", ".", "imgs", "=", "dataset", ".", "samples", "\n", "", "sampler", "=", "torch", ".", "utils", ".", "data", ".", "DistributedSampler", "(", "dataset", ",", "shuffle", "=", "True", ")", "\n", "data_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "dataset", ",", "\n", "sampler", "=", "sampler", ",", "\n", "batch_size", "=", "args", ".", "batch_size_per_gpu", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ",", "\n", "pin_memory", "=", "True", ",", "\n", "drop_last", "=", "True", ",", "\n", ")", "\n", "print", "(", "f\"Data loaded: there are {len(dataset)} images.\"", ")", "\n", "\n", "# ============ building student and teacher networks ... ============", "\n", "# we changed the name DeiT-S for ViT-S to avoid confusions", "\n", "args", ".", "arch", "=", "args", ".", "arch", ".", "replace", "(", "\"deit\"", ",", "\"vit\"", ")", "\n", "# if the network is a vision transformer (i.e. vit_tiny, vit_small, vit_base)", "\n", "if", "args", ".", "arch", "in", "vits", ".", "__dict__", ".", "keys", "(", ")", ":", "\n", "        ", "student", "=", "vits", ".", "__dict__", "[", "args", ".", "arch", "]", "(", "\n", "img_size", "=", "(", "args", ".", "height", ",", "args", ".", "width", ")", ",", "\n", "patch_size", "=", "args", ".", "patch_size", ",", "\n", "drop_path_rate", "=", "0.1", ",", "# stochastic depth", "\n", ")", "\n", "teacher", "=", "vits", ".", "__dict__", "[", "args", ".", "arch", "]", "(", "\n", "img_size", "=", "(", "args", ".", "height", ",", "args", ".", "width", ")", ",", "\n", "patch_size", "=", "args", ".", "patch_size", ")", "\n", "embed_dim", "=", "student", ".", "embed_dim", "\n", "# otherwise, we check if the architecture is in torchvision models", "\n", "", "elif", "args", ".", "arch", "in", "torchvision_models", ".", "__dict__", ".", "keys", "(", ")", ":", "\n", "        ", "student", "=", "torchvision_models", ".", "__dict__", "[", "args", ".", "arch", "]", "(", ")", "\n", "teacher", "=", "torchvision_models", ".", "__dict__", "[", "args", ".", "arch", "]", "(", ")", "\n", "embed_dim", "=", "student", ".", "fc", ".", "weight", ".", "shape", "[", "1", "]", "\n", "", "elif", "args", ".", "arch", "==", "'ours_vit_small'", ":", "\n", "        ", "student", "=", "ours_vit_small", "(", "\n", "img_size", "=", "(", "args", ".", "height", ",", "args", ".", "width", ")", ",", "\n", "patch_size", "=", "args", ".", "patch_size", ",", "\n", "drop_path_rate", "=", "0.1", ",", "# stochastic depth", "\n", ")", "\n", "teacher", "=", "ours_vit_small", "(", "\n", "img_size", "=", "(", "args", ".", "height", ",", "args", ".", "width", ")", ",", "\n", "patch_size", "=", "args", ".", "patch_size", ")", "\n", "embed_dim", "=", "student", ".", "embed_dim", "\n", "", "elif", "args", ".", "arch", "==", "'ours_vit_base'", ":", "\n", "        ", "student", "=", "ours_vit_base", "(", "\n", "img_size", "=", "(", "args", ".", "height", ",", "args", ".", "width", ")", ",", "\n", "patch_size", "=", "args", ".", "patch_size", ",", "\n", "drop_path_rate", "=", "0.1", ",", "# stochastic depth", "\n", ")", "\n", "teacher", "=", "ours_vit_base", "(", "\n", "img_size", "=", "(", "args", ".", "height", ",", "args", ".", "width", ")", ",", "\n", "patch_size", "=", "args", ".", "patch_size", ")", "\n", "embed_dim", "=", "student", ".", "embed_dim", "\n", "", "else", ":", "\n", "        ", "print", "(", "f\"Unknow architecture: {args.arch}\"", ")", "\n", "\n", "# multi-crop wrapper handles forward with inputs of different resolutions", "\n", "", "student", "=", "utils", ".", "MultiCropWrapper", "(", "student", ",", "DINOHead", "(", "\n", "embed_dim", ",", "\n", "args", ".", "out_dim", ",", "\n", "use_bn", "=", "args", ".", "use_bn_in_head", ",", "\n", "norm_last_layer", "=", "args", ".", "norm_last_layer", ",", "\n", ")", ")", "\n", "teacher", "=", "utils", ".", "MultiCropWrapper", "(", "\n", "teacher", ",", "\n", "DINOHead", "(", "embed_dim", ",", "args", ".", "out_dim", ",", "args", ".", "use_bn_in_head", ")", ",", "\n", ")", "\n", "# move networks to gpu", "\n", "student", ",", "teacher", "=", "student", ".", "cuda", "(", ")", ",", "teacher", ".", "cuda", "(", ")", "\n", "# synchronize batch norms (if any)", "\n", "if", "utils", ".", "has_batchnorms", "(", "student", ")", ":", "\n", "        ", "student", "=", "nn", ".", "SyncBatchNorm", ".", "convert_sync_batchnorm", "(", "student", ")", "\n", "teacher", "=", "nn", ".", "SyncBatchNorm", ".", "convert_sync_batchnorm", "(", "teacher", ")", "\n", "\n", "# we need DDP wrapper to have synchro batch norms working...", "\n", "teacher", "=", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "teacher", ",", "device_ids", "=", "[", "args", ".", "gpu", "]", ")", "\n", "teacher_without_ddp", "=", "teacher", ".", "module", "\n", "", "else", ":", "\n", "# teacher_without_ddp and teacher are the same thing", "\n", "        ", "teacher_without_ddp", "=", "teacher", "\n", "", "student", "=", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "student", ",", "device_ids", "=", "[", "args", ".", "gpu", "]", ")", "\n", "# teacher and student start with the same weights", "\n", "teacher_without_ddp", ".", "load_state_dict", "(", "student", ".", "module", ".", "state_dict", "(", ")", ")", "\n", "# there is no backpropagation through the teacher, so no need for gradients", "\n", "for", "p", "in", "teacher", ".", "parameters", "(", ")", ":", "\n", "        ", "p", ".", "requires_grad", "=", "False", "\n", "", "print", "(", "f\"Student and Teacher are built: they are both {args.arch} network.\"", ")", "\n", "\n", "# ============ preparing loss ... ============", "\n", "dino_loss", "=", "DINOLoss", "(", "\n", "args", ".", "out_dim", ",", "\n", "args", ".", "local_crops_number", "+", "2", ",", "# total number of crops = 2 global crops + local_crops_number", "\n", "args", ".", "warmup_teacher_temp", ",", "\n", "args", ".", "teacher_temp", ",", "\n", "args", ".", "warmup_teacher_temp_epochs", ",", "\n", "args", ".", "epochs", ",", "\n", ")", ".", "cuda", "(", ")", "\n", "\n", "# ============ preparing optimizer ... ============", "\n", "params_groups", "=", "utils", ".", "get_params_groups", "(", "student", ")", "\n", "if", "args", ".", "optimizer", "==", "\"adamw\"", ":", "\n", "        ", "optimizer", "=", "torch", ".", "optim", ".", "AdamW", "(", "params_groups", ")", "# to use with ViTs", "\n", "", "elif", "args", ".", "optimizer", "==", "\"sgd\"", ":", "\n", "        ", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "params_groups", ",", "lr", "=", "0", ",", "momentum", "=", "0.9", ")", "# lr is set by scheduler", "\n", "", "elif", "args", ".", "optimizer", "==", "\"lars\"", ":", "\n", "        ", "optimizer", "=", "utils", ".", "LARS", "(", "params_groups", ")", "# to use with convnet and large batches", "\n", "# for mixed precision training", "\n", "", "fp16_scaler", "=", "None", "\n", "if", "args", ".", "use_fp16", ":", "\n", "        ", "fp16_scaler", "=", "torch", ".", "cuda", ".", "amp", ".", "GradScaler", "(", ")", "\n", "\n", "# ============ init schedulers ... ============", "\n", "", "lr_schedule", "=", "utils", ".", "cosine_scheduler", "(", "\n", "args", ".", "lr", "*", "(", "args", ".", "batch_size_per_gpu", "*", "utils", ".", "get_world_size", "(", ")", ")", "/", "256.", ",", "# linear scaling rule", "\n", "args", ".", "min_lr", ",", "\n", "args", ".", "epochs", ",", "len", "(", "data_loader", ")", ",", "\n", "warmup_epochs", "=", "args", ".", "warmup_epochs", ",", "\n", ")", "\n", "wd_schedule", "=", "utils", ".", "cosine_scheduler", "(", "\n", "args", ".", "weight_decay", ",", "\n", "args", ".", "weight_decay_end", ",", "\n", "args", ".", "epochs", ",", "len", "(", "data_loader", ")", ",", "\n", ")", "\n", "# momentum parameter is increased to 1. during training with a cosine schedule", "\n", "momentum_schedule", "=", "utils", ".", "cosine_scheduler", "(", "args", ".", "momentum_teacher", ",", "1", ",", "\n", "args", ".", "epochs", ",", "len", "(", "data_loader", ")", ")", "\n", "print", "(", "f\"Loss, optimizer and schedulers ready.\"", ")", "\n", "\n", "# ============ optionally resume training ... ============", "\n", "to_restore", "=", "{", "\"epoch\"", ":", "0", "}", "\n", "utils", ".", "restart_from_checkpoint", "(", "\n", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "\"checkpoint.pth\"", ")", ",", "\n", "run_variables", "=", "to_restore", ",", "\n", "student", "=", "student", ",", "\n", "teacher", "=", "teacher", ",", "\n", "optimizer", "=", "optimizer", ",", "\n", "fp16_scaler", "=", "fp16_scaler", ",", "\n", "dino_loss", "=", "dino_loss", ",", "\n", ")", "\n", "start_epoch", "=", "to_restore", "[", "\"epoch\"", "]", "\n", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "\"Starting DINO training !\"", ")", "\n", "for", "epoch", "in", "range", "(", "start_epoch", ",", "args", ".", "epochs", ")", ":", "\n", "        ", "data_loader", ".", "sampler", ".", "set_epoch", "(", "epoch", ")", "\n", "\n", "# ============ training one epoch of DINO ... ============", "\n", "train_stats", "=", "train_one_epoch", "(", "student", ",", "teacher", ",", "teacher_without_ddp", ",", "dino_loss", ",", "\n", "data_loader", ",", "optimizer", ",", "lr_schedule", ",", "wd_schedule", ",", "momentum_schedule", ",", "\n", "epoch", ",", "fp16_scaler", ",", "args", ")", "\n", "\n", "# ============ writing logs ... ============", "\n", "save_dict", "=", "{", "\n", "'student'", ":", "student", ".", "state_dict", "(", ")", ",", "\n", "'teacher'", ":", "teacher", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'epoch'", ":", "epoch", "+", "1", ",", "\n", "'args'", ":", "args", ",", "\n", "'dino_loss'", ":", "dino_loss", ".", "state_dict", "(", ")", ",", "\n", "}", "\n", "if", "fp16_scaler", "is", "not", "None", ":", "\n", "            ", "save_dict", "[", "'fp16_scaler'", "]", "=", "fp16_scaler", ".", "state_dict", "(", ")", "\n", "", "utils", ".", "save_on_master", "(", "save_dict", ",", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "'checkpoint.pth'", ")", ")", "\n", "#  if args.saveckp_freq and epoch % args.saveckp_freq == 0:", "\n", "if", "epoch", ">=", "85", "and", "args", ".", "saveckp_freq", "and", "epoch", "%", "args", ".", "saveckp_freq", "==", "0", ":", "\n", "            ", "utils", ".", "save_on_master", "(", "save_dict", ",", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "f'checkpoint{epoch:04}.pth'", ")", ")", "\n", "", "log_stats", "=", "{", "**", "{", "f'train_{k}'", ":", "v", "for", "k", ",", "v", "in", "train_stats", ".", "items", "(", ")", "}", ",", "\n", "'epoch'", ":", "epoch", "}", "\n", "if", "utils", ".", "is_main_process", "(", ")", ":", "\n", "            ", "with", "(", "Path", "(", "args", ".", "output_dir", ")", "/", "\"log.txt\"", ")", ".", "open", "(", "\"a\"", ")", "as", "f", ":", "\n", "                ", "f", ".", "write", "(", "json", ".", "dumps", "(", "log_stats", ")", "+", "\"\\n\"", ")", "\n", "", "", "", "total_time", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "total_time_str", "=", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "int", "(", "total_time", ")", ")", ")", "\n", "print", "(", "'Training time {}'", ".", "format", "(", "total_time_str", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.main_dino.train_one_epoch": [[335, 395], ["utils.MetricLogger", "enumerate", "utils.MetricLogger.synchronize_between_processes", "print", "utils.MetricLogger.log_every", "enumerate", "optimizer.zero_grad", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "utils.MetricLogger.update", "utils.MetricLogger.update", "utils.MetricLogger.update", "im.cuda", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "teacher", "student", "dino_loss", "math.isfinite", "print", "sys.exit", "dino_loss.backward", "utils.cancel_gradients_last_layer", "optimizer.step", "fp16_scaler.scale().backward", "utils.cancel_gradients_last_layer", "fp16_scaler.step", "fp16_scaler.update", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "zip", "utils.MetricLogger.meters.items", "len", "dino_loss.item", "utils.clip_gradients", "fp16_scaler.unscale_", "utils.clip_gradients", "student.module.parameters", "teacher_without_ddp.parameters", "param_k.data.mul_().add_", "dino_loss.item", "dino_loss.item", "fp16_scaler.scale", "param_k.data.mul_", "param_q.detach"], "function", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.utils.MetricLogger.synchronize_between_processes", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.utils.MetricLogger.log_every", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.utils.MetricLogger.update", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.utils.MetricLogger.update", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.utils.MetricLogger.update", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.models.cm.CM_Hard.backward", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.utils.cancel_gradients_last_layer", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.solver.scheduler.Scheduler.step", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.models.cm.CM_Hard.backward", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.utils.cancel_gradients_last_layer", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.solver.scheduler.Scheduler.step", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.utils.MetricLogger.update", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.utils.clip_gradients", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.utils.clip_gradients"], ["", "def", "train_one_epoch", "(", "student", ",", "teacher", ",", "teacher_without_ddp", ",", "dino_loss", ",", "data_loader", ",", "\n", "optimizer", ",", "lr_schedule", ",", "wd_schedule", ",", "momentum_schedule", ",", "epoch", ",", "\n", "fp16_scaler", ",", "args", ")", ":", "\n", "    ", "metric_logger", "=", "utils", ".", "MetricLogger", "(", "delimiter", "=", "\"  \"", ")", "\n", "header", "=", "'Epoch: [{}/{}]'", ".", "format", "(", "epoch", ",", "args", ".", "epochs", ")", "\n", "for", "it", ",", "(", "images", ",", "_", ")", "in", "enumerate", "(", "metric_logger", ".", "log_every", "(", "data_loader", ",", "200", ",", "header", ")", ")", ":", "\n", "# update weight decay and learning rate according to their schedule", "\n", "        ", "it", "=", "len", "(", "data_loader", ")", "*", "epoch", "+", "it", "# global training iteration", "\n", "for", "i", ",", "param_group", "in", "enumerate", "(", "optimizer", ".", "param_groups", ")", ":", "\n", "            ", "param_group", "[", "\"lr\"", "]", "=", "lr_schedule", "[", "it", "]", "\n", "if", "i", "==", "0", ":", "# only the first group is regularized", "\n", "                ", "param_group", "[", "\"weight_decay\"", "]", "=", "wd_schedule", "[", "it", "]", "\n", "\n", "# move images to gpu", "\n", "", "", "images", "=", "[", "im", ".", "cuda", "(", "non_blocking", "=", "True", ")", "for", "im", "in", "images", "]", "\n", "# teacher and student forward passes + compute dino loss", "\n", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", "fp16_scaler", "is", "not", "None", ")", ":", "\n", "            ", "teacher_output", "=", "teacher", "(", "images", "[", ":", "2", "]", ")", "# only the 2 global views pass through the teacher", "\n", "student_output", "=", "student", "(", "images", ")", "\n", "loss", "=", "dino_loss", "(", "student_output", ",", "teacher_output", ",", "epoch", ")", "\n", "\n", "", "if", "not", "math", ".", "isfinite", "(", "loss", ".", "item", "(", ")", ")", ":", "\n", "            ", "print", "(", "\"Loss is {}, stopping training\"", ".", "format", "(", "loss", ".", "item", "(", ")", ")", ",", "force", "=", "True", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n", "# student update", "\n", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "param_norms", "=", "None", "\n", "if", "fp16_scaler", "is", "None", ":", "\n", "            ", "loss", ".", "backward", "(", ")", "\n", "if", "args", ".", "clip_grad", ":", "\n", "                ", "param_norms", "=", "utils", ".", "clip_gradients", "(", "student", ",", "args", ".", "clip_grad", ")", "\n", "", "utils", ".", "cancel_gradients_last_layer", "(", "epoch", ",", "student", ",", "\n", "args", ".", "freeze_last_layer", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "", "else", ":", "\n", "            ", "fp16_scaler", ".", "scale", "(", "loss", ")", ".", "backward", "(", ")", "\n", "if", "args", ".", "clip_grad", ":", "\n", "                ", "fp16_scaler", ".", "unscale_", "(", "optimizer", ")", "# unscale the gradients of optimizer's assigned params in-place", "\n", "param_norms", "=", "utils", ".", "clip_gradients", "(", "student", ",", "args", ".", "clip_grad", ")", "\n", "", "utils", ".", "cancel_gradients_last_layer", "(", "epoch", ",", "student", ",", "\n", "args", ".", "freeze_last_layer", ")", "\n", "fp16_scaler", ".", "step", "(", "optimizer", ")", "\n", "fp16_scaler", ".", "update", "(", ")", "\n", "\n", "# EMA update for the teacher", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "m", "=", "momentum_schedule", "[", "it", "]", "# momentum parameter", "\n", "for", "param_q", ",", "param_k", "in", "zip", "(", "student", ".", "module", ".", "parameters", "(", ")", ",", "teacher_without_ddp", ".", "parameters", "(", ")", ")", ":", "\n", "                ", "param_k", ".", "data", ".", "mul_", "(", "m", ")", ".", "add_", "(", "(", "1", "-", "m", ")", "*", "param_q", ".", "detach", "(", ")", ".", "data", ")", "\n", "\n", "# logging", "\n", "", "", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "metric_logger", ".", "update", "(", "loss", "=", "loss", ".", "item", "(", ")", ")", "\n", "metric_logger", ".", "update", "(", "lr", "=", "optimizer", ".", "param_groups", "[", "0", "]", "[", "\"lr\"", "]", ")", "\n", "metric_logger", ".", "update", "(", "wd", "=", "optimizer", ".", "param_groups", "[", "0", "]", "[", "\"weight_decay\"", "]", ")", "\n", "# gather the stats from all processes", "\n", "", "metric_logger", ".", "synchronize_between_processes", "(", ")", "\n", "print", "(", "\"Averaged stats:\"", ",", "metric_logger", ")", "\n", "return", "{", "k", ":", "meter", ".", "global_avg", "for", "k", ",", "meter", "in", "metric_logger", ".", "meters", ".", "items", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.hubconf.dino_vits16": [[22, 35], ["torch.hub.load_state_dict_from_url", "model.load_state_dict"], "function", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.solver.scheduler.Scheduler.load_state_dict"], ["def", "dino_vits16", "(", "pretrained", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    ViT-Small/16x16 pre-trained with DINO.\n    Achieves 74.5% top-1 accuracy on ImageNet with k-NN classification.\n    \"\"\"", "\n", "model", "=", "vits", ".", "__dict__", "[", "\"vit_small\"", "]", "(", "patch_size", "=", "16", ",", "num_classes", "=", "0", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "state_dict", "=", "torch", ".", "hub", ".", "load_state_dict_from_url", "(", "\n", "url", "=", "\"https://dl.fbaipublicfiles.com/dino/dino_deitsmall16_pretrain/dino_deitsmall16_pretrain.pth\"", ",", "\n", "map_location", "=", "\"cpu\"", ",", "\n", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "True", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.hubconf.dino_vits8": [[37, 50], ["torch.hub.load_state_dict_from_url", "model.load_state_dict"], "function", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.solver.scheduler.Scheduler.load_state_dict"], ["", "def", "dino_vits8", "(", "pretrained", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    ViT-Small/8x8 pre-trained with DINO.\n    Achieves 78.3% top-1 accuracy on ImageNet with k-NN classification.\n    \"\"\"", "\n", "model", "=", "vits", ".", "__dict__", "[", "\"vit_small\"", "]", "(", "patch_size", "=", "8", ",", "num_classes", "=", "0", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "state_dict", "=", "torch", ".", "hub", ".", "load_state_dict_from_url", "(", "\n", "url", "=", "\"https://dl.fbaipublicfiles.com/dino/dino_deitsmall8_pretrain/dino_deitsmall8_pretrain.pth\"", ",", "\n", "map_location", "=", "\"cpu\"", ",", "\n", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "True", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.hubconf.dino_vitb16": [[52, 65], ["torch.hub.load_state_dict_from_url", "model.load_state_dict"], "function", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.solver.scheduler.Scheduler.load_state_dict"], ["", "def", "dino_vitb16", "(", "pretrained", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    ViT-Base/16x16 pre-trained with DINO.\n    Achieves 76.1% top-1 accuracy on ImageNet with k-NN classification.\n    \"\"\"", "\n", "model", "=", "vits", ".", "__dict__", "[", "\"vit_base\"", "]", "(", "patch_size", "=", "16", ",", "num_classes", "=", "0", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "state_dict", "=", "torch", ".", "hub", ".", "load_state_dict_from_url", "(", "\n", "url", "=", "\"https://dl.fbaipublicfiles.com/dino/dino_vitbase16_pretrain/dino_vitbase16_pretrain.pth\"", ",", "\n", "map_location", "=", "\"cpu\"", ",", "\n", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "True", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.hubconf.dino_vitb8": [[67, 80], ["torch.hub.load_state_dict_from_url", "model.load_state_dict"], "function", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.solver.scheduler.Scheduler.load_state_dict"], ["", "def", "dino_vitb8", "(", "pretrained", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    ViT-Base/8x8 pre-trained with DINO.\n    Achieves 77.4% top-1 accuracy on ImageNet with k-NN classification.\n    \"\"\"", "\n", "model", "=", "vits", ".", "__dict__", "[", "\"vit_base\"", "]", "(", "patch_size", "=", "8", ",", "num_classes", "=", "0", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "state_dict", "=", "torch", ".", "hub", ".", "load_state_dict_from_url", "(", "\n", "url", "=", "\"https://dl.fbaipublicfiles.com/dino/dino_vitbase8_pretrain/dino_vitbase8_pretrain.pth\"", ",", "\n", "map_location", "=", "\"cpu\"", ",", "\n", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "True", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.hubconf.dino_resnet50": [[82, 96], ["torchvision.models.resnet.resnet50", "torch.nn.Identity", "torch.hub.load_state_dict_from_url", "torchvision.models.resnet.resnet50.load_state_dict"], "function", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.models.resnet.resnet50", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.solver.scheduler.Scheduler.load_state_dict"], ["", "def", "dino_resnet50", "(", "pretrained", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    ResNet-50 pre-trained with DINO.\n    Achieves 75.3% top-1 accuracy on ImageNet linear evaluation benchmark (requires to train `fc`).\n    \"\"\"", "\n", "model", "=", "resnet50", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", "\n", "model", ".", "fc", "=", "torch", ".", "nn", ".", "Identity", "(", ")", "\n", "if", "pretrained", ":", "\n", "        ", "state_dict", "=", "torch", ".", "hub", ".", "load_state_dict_from_url", "(", "\n", "url", "=", "\"https://dl.fbaipublicfiles.com/dino/dino_resnet50_pretrain/dino_resnet50_pretrain.pth\"", ",", "\n", "map_location", "=", "\"cpu\"", ",", "\n", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "False", ")", "\n", "", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.vision_transformer.DropPath.__init__": [[42, 45], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.softmax_loss.LabelSmoothingCrossEntropy.__init__"], ["IMAGENET_DEFAULT_STD", "=", "(", "0.229", ",", "0.224", ",", "0.225", ")", "\n", "to_2tuple", "=", "_ntuple", "(", "2", ")", "\n", "\n", "def", "drop_path", "(", "x", ",", "drop_prob", ":", "float", "=", "0.", ",", "training", ":", "bool", "=", "False", ")", ":", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.vision_transformer.DropPath.forward": [[46, 48], ["vision_transformer.drop_path"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.vit_pytorch.drop_path"], ["    "]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.vision_transformer.Mlp.__init__": [[51, 59], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "act_layer", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.softmax_loss.LabelSmoothingCrossEntropy.__init__"], ["\n", "if", "drop_prob", "==", "0.", "or", "not", "training", ":", "\n", "        ", "return", "x", "\n", "", "keep_prob", "=", "1", "-", "drop_prob", "\n", "shape", "=", "(", "x", ".", "shape", "[", "0", "]", ",", ")", "+", "(", "1", ",", ")", "*", "(", "x", ".", "ndim", "-", "1", ")", "# work with diff dim tensors, not just 2D ConvNets", "\n", "random_tensor", "=", "keep_prob", "+", "torch", ".", "rand", "(", "shape", ",", "dtype", "=", "x", ".", "dtype", ",", "device", "=", "x", ".", "device", ")", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.vision_transformer.Mlp.forward": [[60, 67], ["vision_transformer.Mlp.fc1", "vision_transformer.Mlp.act", "vision_transformer.Mlp.drop", "vision_transformer.Mlp.fc2", "vision_transformer.Mlp.drop"], "methods", ["None"], ["random_tensor", ".", "floor_", "(", ")", "# binarize", "\n", "output", "=", "x", ".", "div", "(", "keep_prob", ")", "*", "random_tensor", "\n", "return", "output", "\n", "\n", "", "class", "DropPath", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "\"\"\"Drop paths (Stochastic Depth) per sample  (when applied in main path of residual blocks).\n    \"\"\"", "\n", "def", "__init__", "(", "self", ",", "drop_prob", "=", "None", ")", ":", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.vision_transformer.Attention.__init__": [[70, 80], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.softmax_loss.LabelSmoothingCrossEntropy.__init__"], ["\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "drop_path", "(", "x", ",", "self", ".", "drop_prob", ",", "self", ".", "training", ")", "\n", "\n", "", "", "class", "Mlp", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "in_features", ",", "hidden_features", "=", "None", ",", "out_features", "=", "None", ",", "act_layer", "=", "nn", ".", "GELU", ",", "drop", "=", "0.", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "out_features", "=", "out_features", "or", "in_features", "\n", "hidden_features", "=", "hidden_features", "or", "in_features", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "in_features", ",", "hidden_features", ")", "\n", "self", ".", "act", "=", "act_layer", "(", ")", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.vision_transformer.Attention.forward": [[81, 94], ["vision_transformer.Attention.qkv().reshape().permute", "vision_transformer.Attention.softmax", "vision_transformer.Attention.attn_drop", "vision_transformer.Attention.proj", "vision_transformer.Attention.proj_drop", "vision_transformer.Attention.qkv().reshape", "k.transpose", "vision_transformer.Attention.qkv"], "methods", ["None"], ["self", ".", "fc2", "=", "nn", ".", "Linear", "(", "hidden_features", ",", "out_features", ")", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "drop", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "x", "=", "self", ".", "act", "(", "x", ")", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "return", "x", "\n", "\n", "\n", "", "", "class", "Attention", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "dim", ",", "num_heads", "=", "8", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "attn_drop", "=", "0.", ",", "proj_drop", "=", "0.", ")", ":", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.vision_transformer.Block.__init__": [[97, 107], ["torch.Module.__init__", "norm_layer", "vision_transformer.Attention", "norm_layer", "int", "vision_transformer.Mlp", "vision_transformer.DropPath", "torch.Identity", "torch.Identity"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.softmax_loss.LabelSmoothingCrossEntropy.__init__"], ["head_dim", "=", "dim", "//", "num_heads", "\n", "# NOTE scale factor was wrong in my original version, can set manually to be compat with prev weights", "\n", "self", ".", "scale", "=", "qk_scale", "or", "head_dim", "**", "-", "0.5", "\n", "\n", "self", ".", "qkv", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", "*", "3", ",", "bias", "=", "qkv_bias", ")", "\n", "self", ".", "attn_drop", "=", "nn", ".", "Dropout", "(", "attn_drop", ")", "\n", "self", ".", "proj", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", ")", "\n", "self", ".", "proj_drop", "=", "nn", ".", "Dropout", "(", "proj_drop", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "B", ",", "N", ",", "C", "=", "x", ".", "shape", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.vision_transformer.Block.forward": [[108, 115], ["vision_transformer.Block.attn", "vision_transformer.Block.norm1", "vision_transformer.Block.drop_path", "vision_transformer.Block.drop_path", "vision_transformer.Block.mlp", "vision_transformer.Block.norm2"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.vit_pytorch.drop_path", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.vit_pytorch.drop_path"], ["qkv", "=", "self", ".", "qkv", "(", "x", ")", ".", "reshape", "(", "B", ",", "N", ",", "3", ",", "self", ".", "num_heads", ",", "C", "//", "self", ".", "num_heads", ")", ".", "permute", "(", "2", ",", "0", ",", "3", ",", "1", ",", "4", ")", "\n", "q", ",", "k", ",", "v", "=", "qkv", "[", "0", "]", ",", "qkv", "[", "1", "]", ",", "qkv", "[", "2", "]", "# make torchscript happy (cannot use tensor as tuple)", "\n", "\n", "attn", "=", "(", "q", "@", "k", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ")", "*", "self", ".", "scale", "\n", "attn", "=", "attn", ".", "softmax", "(", "dim", "=", "-", "1", ")", "\n", "attn", "=", "self", ".", "attn_drop", "(", "attn", ")", "\n", "\n", "x", "=", "(", "attn", "@", "v", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "reshape", "(", "B", ",", "N", ",", "C", ")", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.vision_transformer.PatchEmbed.__init__": [[120, 128], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.softmax_loss.LabelSmoothingCrossEntropy.__init__"], ["\n", "", "", "class", "Block", "(", "nn", ".", "Module", ")", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ",", "dim", ",", "num_heads", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "drop", "=", "0.", ",", "attn_drop", "=", "0.", ",", "\n", "drop_path", "=", "0.", ",", "act_layer", "=", "nn", ".", "GELU", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "norm1", "=", "norm_layer", "(", "dim", ")", "\n", "self", ".", "attn", "=", "Attention", "(", "\n", "dim", ",", "num_heads", "=", "num_heads", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "attn_drop", "=", "attn_drop", ",", "proj_drop", "=", "drop", ")", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.vision_transformer.PatchEmbed.forward": [[129, 133], ["vision_transformer.PatchEmbed.proj().flatten().transpose", "vision_transformer.PatchEmbed.proj().flatten", "vision_transformer.PatchEmbed.proj"], "methods", ["None"], ["# NOTE: drop path for stochastic depth, we shall see if this is better than dropout here", "\n", "self", ".", "drop_path", "=", "DropPath", "(", "drop_path", ")", "if", "drop_path", ">", "0.", "else", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "norm2", "=", "norm_layer", "(", "dim", ")", "\n", "mlp_hidden_dim", "=", "int", "(", "dim", "*", "mlp_ratio", ")", "\n", "self", ".", "mlp", "=", "Mlp", "(", "in_features", "=", "dim", ",", "hidden_features", "=", "mlp_hidden_dim", ",", "act_layer", "=", "act_layer", ",", "drop", "=", "drop", ")", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.vision_transformer.VisionTransformer.__init__": [[137, 166], ["torch.Module.__init__", "ours_vit.to_2tuple", "vision_transformer.PatchEmbed", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Dropout", "torch.Dropout", "torch.ModuleList", "torch.ModuleList", "norm_layer", "utils.trunc_normal_", "utils.trunc_normal_", "vision_transformer.VisionTransformer.apply", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "x.item", "torch.Linear", "torch.Linear", "torch.Identity", "torch.Identity", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "vision_transformer.Block", "range"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.softmax_loss.LabelSmoothingCrossEntropy.__init__", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.vit_pytorch.trunc_normal_", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.vit_pytorch.trunc_normal_"], ["x", "=", "x", "+", "self", ".", "drop_path", "(", "self", ".", "mlp", "(", "self", ".", "norm2", "(", "x", ")", ")", ")", "\n", "return", "x", "\n", "\n", "", "", "class", "PatchEmbed_overlap", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "\"\"\" Image to Patch Embedding with overlapping patches\n    \"\"\"", "\n", "def", "__init__", "(", "self", ",", "img_size", "=", "224", ",", "patch_size", "=", "16", ",", "stride_size", "=", "16", ",", "in_chans", "=", "3", ",", "embed_dim", "=", "768", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "img_size", "=", "to_2tuple", "(", "img_size", ")", "\n", "patch_size", "=", "to_2tuple", "(", "patch_size", ")", "\n", "stride_size_tuple", "=", "to_2tuple", "(", "stride_size", ")", "\n", "self", ".", "num_x", "=", "(", "img_size", "[", "1", "]", "-", "patch_size", "[", "1", "]", ")", "//", "stride_size_tuple", "[", "1", "]", "+", "1", "\n", "self", ".", "num_y", "=", "(", "img_size", "[", "0", "]", "-", "patch_size", "[", "0", "]", ")", "//", "stride_size_tuple", "[", "0", "]", "+", "1", "\n", "print", "(", "'using stride: {}, and patch number is num_y{} * num_x{}'", ".", "format", "(", "stride_size", ",", "self", ".", "num_y", ",", "self", ".", "num_x", ")", ")", "\n", "num_patches", "=", "self", ".", "num_x", "*", "self", ".", "num_y", "\n", "self", ".", "img_size", "=", "img_size", "\n", "self", ".", "patch_size", "=", "patch_size", "\n", "self", ".", "num_patches", "=", "num_patches", "\n", "\n", "self", ".", "proj", "=", "nn", ".", "Conv2d", "(", "in_chans", ",", "embed_dim", ",", "kernel_size", "=", "patch_size", ",", "stride", "=", "stride_size", ")", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "InstanceNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.vision_transformer.VisionTransformer._init_weights": [[167, 175], ["isinstance", "utils.trunc_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.vit_pytorch.trunc_normal_"], ["\n", "", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "B", ",", "C", ",", "H", ",", "W", "=", "x", ".", "shape", "\n", "\n", "# FIXME look at relaxing size constraints", "\n", "assert", "H", "==", "self", ".", "img_size", "[", "0", "]", "and", "W", "==", "self", ".", "img_size", "[", "1", "]", ",", "f\"Input image size ({H}*{W}) doesn't match model ({self.img_size[0]}*{self.img_size[1]}).\"", "\n", "x", "=", "self", ".", "proj", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.vision_transformer.VisionTransformer.interpolate_pos_encoding": [[200, 224], ["torch.functional.interpolate", "torch.functional.interpolate", "patch_pos_embed.permute().view.permute().view.permute().view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "patch_pos_embed.permute().view.permute().view.reshape().permute", "int", "int", "patch_pos_embed.permute().view.permute().view.permute", "class_pos_embed.unsqueeze", "patch_pos_embed.permute().view.permute().view.reshape"], "methods", ["None"], ["\n", "\n", "def", "__init__", "(", "self", ",", "img_size", "=", "224", ",", "stem_conv", "=", "False", ",", "stem_stride", "=", "1", ",", "\n", "patch_size", "=", "8", ",", "in_chans", "=", "3", ",", "hidden_dim", "=", "64", ",", "embed_dim", "=", "384", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "assert", "patch_size", "in", "[", "4", ",", "8", ",", "16", "]", "\n", "img_size", "=", "to_2tuple", "(", "img_size", ")", "\n", "self", ".", "num_x", "=", "img_size", "[", "1", "]", "//", "patch_size", "\n", "self", ".", "num_y", "=", "img_size", "[", "0", "]", "//", "patch_size", "\n", "self", ".", "num_patches", "=", "self", ".", "num_x", "*", "self", ".", "num_y", "\n", "self", ".", "img_size", "=", "img_size", "\n", "self", ".", "patch_size", "=", "patch_size", "\n", "\n", "self", ".", "stem_conv", "=", "stem_conv", "\n", "if", "stem_conv", ":", "\n", "            ", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_chans", ",", "hidden_dim", ",", "kernel_size", "=", "7", ",", "stride", "=", "stem_stride", ",", "\n", "padding", "=", "3", ",", "bias", "=", "False", ")", ",", "# 112x112", "\n", "#  nn.BatchNorm2d(hidden_dim),", "\n", "IBN", "(", "hidden_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "hidden_dim", ",", "hidden_dim", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "# 112x112", "\n", "#  nn.BatchNorm2d(hidden_dim),", "\n", "IBN", "(", "hidden_dim", ")", ",", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.vision_transformer.VisionTransformer.prepare_tokens": [[225, 237], ["vision_transformer.VisionTransformer.patch_embed", "vision_transformer.VisionTransformer.cls_token.expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "vision_transformer.VisionTransformer.pos_drop", "vision_transformer.VisionTransformer.interpolate_pos_encoding"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.vision_transformer.VisionTransformer.interpolate_pos_encoding"], ["nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "hidden_dim", ",", "hidden_dim", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "# 112x112", "\n", "nn", ".", "BatchNorm2d", "(", "hidden_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "\n", "", "self", ".", "proj", "=", "nn", ".", "Conv2d", "(", "hidden_dim", ",", "\n", "embed_dim", ",", "\n", "kernel_size", "=", "patch_size", "//", "stem_stride", ",", "\n", "stride", "=", "patch_size", "//", "stem_stride", ")", "\n", "self", ".", "num_patches", "=", "(", "img_size", "[", "0", "]", "//", "patch_size", ")", "*", "(", "img_size", "[", "1", "]", "//", "patch_size", ")", "\n", "self", ".", "img_size", "=", "img_size", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.vision_transformer.VisionTransformer.forward": [[238, 244], ["vision_transformer.VisionTransformer.prepare_tokens", "vision_transformer.VisionTransformer.norm", "blk"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.vision_transformer.VisionTransformer.prepare_tokens"], ["self", ".", "patch_size", "=", "patch_size", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "stem_conv", ":", "\n", "            ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "", "x", "=", "self", ".", "proj", "(", "x", ")", "# B, C, H, W", "\n", "x", "=", "x", ".", "flatten", "(", "2", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.vision_transformer.VisionTransformer.get_last_selfattention": [[245, 253], ["vision_transformer.VisionTransformer.prepare_tokens", "enumerate", "blk", "blk", "len"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.vision_transformer.VisionTransformer.prepare_tokens"], ["return", "x", "\n", "\n", "", "", "class", "TransReID", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "\"\"\" Transformer-based Object Re-Identification\n    \"\"\"", "\n", "def", "__init__", "(", "self", ",", "img_size", "=", "224", ",", "patch_size", "=", "16", ",", "stride_size", "=", "16", ",", "in_chans", "=", "3", ",", "num_classes", "=", "0", ",", "embed_dim", "=", "768", ",", "depth", "=", "12", ",", "num_heads", "=", "12", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "drop_rate", "=", "0.", ",", "attn_drop_rate", "=", "0.", ",", "drop_path_rate", "=", "0.", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ",", "pretrained_path", "=", "''", ",", "hw_ratio", "=", "1", ",", "conv_stem", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "num_features", "=", "self", ".", "in_planes", "=", "self", ".", "embed_dim", "=", "embed_dim", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.vision_transformer.VisionTransformer.get_intermediate_layers": [[254, 263], ["vision_transformer.VisionTransformer.prepare_tokens", "enumerate", "blk", "output.append", "len", "vision_transformer.VisionTransformer.norm"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.vision_transformer.VisionTransformer.prepare_tokens"], ["if", "conv_stem", ":", "\n", "            ", "self", ".", "patch_embed", "=", "PatchEmbed_VOLO", "(", "img_size", "=", "img_size", ",", "stem_conv", "=", "True", ",", "stem_stride", "=", "2", ",", "\n", "patch_size", "=", "patch_size", ",", "in_chans", "=", "in_chans", ",", "hidden_dim", "=", "64", ",", "embed_dim", "=", "384", ")", "\n", "print", "(", "'Using convolution stem'", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "patch_embed", "=", "PatchEmbed_overlap", "(", "\n", "img_size", "=", "img_size", ",", "patch_size", "=", "patch_size", ",", "stride_size", "=", "stride_size", ",", "in_chans", "=", "in_chans", ",", "\n", "embed_dim", "=", "embed_dim", ")", "\n", "print", "(", "'Using standard patch embedding'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.vision_transformer.DINOHead.__init__": [[287, 309], ["torch.Module.__init__", "max", "vision_transformer.DINOHead.apply", "torch.utils.weight_norm", "torch.utils.weight_norm", "vision_transformer.DINOHead.last_layer.weight_g.data.fill_", "torch.Linear", "torch.Linear", "layers.append", "range", "layers.append", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "layers.append", "torch.GELU", "torch.GELU", "layers.append", "layers.append", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Linear", "torch.Linear", "layers.append", "torch.GELU", "torch.GELU", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.softmax_loss.LabelSmoothingCrossEntropy.__init__", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.utils.SmoothedValue.max"], ["trunc_normal_", "(", "self", ".", "pos_embed", ",", "std", "=", ".02", ")", "\n", "\n", "self", ".", "apply", "(", "self", ".", "_init_weights", ")", "\n", "\n", "self", ".", "bottleneck", "=", "nn", ".", "BatchNorm1d", "(", "self", ".", "in_planes", ")", "\n", "self", ".", "bottleneck", ".", "bias", ".", "requires_grad_", "(", "False", ")", "\n", "self", ".", "bottleneck", ".", "apply", "(", "weights_init_kaiming", ")", "\n", "\n", "self", ".", "load_param", "(", "pretrained_path", ",", "hw_ratio", ")", "\n", "\n", "\n", "", "def", "_init_weights", "(", "self", ",", "m", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "trunc_normal_", "(", "m", ".", "weight", ",", "std", "=", ".02", ")", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "LayerNorm", ")", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1.0", ")", "\n", "\n", "", "", "@", "torch", ".", "jit", ".", "ignore", "\n", "def", "no_weight_decay", "(", "self", ")", ":", "\n", "        ", "return", "{", "'pos_embed'", ",", "'cls_token'", "}", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.vision_transformer.DINOHead._init_weights": [[310, 315], ["isinstance", "utils.trunc_normal_", "isinstance", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.vit_pytorch.trunc_normal_"], ["\n", "", "def", "get_classifier", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "head", "\n", "\n", "", "def", "reset_classifier", "(", "self", ",", "num_classes", ",", "global_pool", "=", "''", ")", ":", "\n", "        ", "self", ".", "num_classes", "=", "num_classes", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.vision_transformer.DINOHead.forward": [[316, 321], ["vision_transformer.DINOHead.mlp", "torch.functional.normalize", "torch.functional.normalize", "vision_transformer.DINOHead.last_layer"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.triplet_loss.normalize", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.triplet_loss.normalize"], ["self", ".", "fc", "=", "nn", ".", "Linear", "(", "self", ".", "embed_dim", ",", "num_classes", ")", "if", "num_classes", ">", "0", "else", "nn", ".", "Identity", "(", ")", "\n", "\n", "", "def", "forward_features", "(", "self", ",", "x", ")", ":", "\n", "        ", "B", "=", "x", ".", "shape", "[", "0", "]", "\n", "x", "=", "self", ".", "patch_embed", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.vision_transformer.drop_path": [[28, 37], ["random_tensor.floor_", "torch.rand", "torch.rand", "x.div"], "function", ["None"], ["import", "torch", ".", "nn", "as", "nn", "\n", "import", "torch", ".", "nn", ".", "functional", "as", "F", "\n", "from", "torch", ".", "_six", "import", "container_abcs", "\n", "\n", "\n", "# From PyTorch internals", "\n", "def", "_ntuple", "(", "n", ")", ":", "\n", "    ", "def", "parse", "(", "x", ")", ":", "\n", "        ", "if", "isinstance", "(", "x", ",", "container_abcs", ".", "Iterable", ")", ":", "\n", "            ", "return", "x", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.vision_transformer.vit_tiny": [[265, 270], ["vision_transformer.VisionTransformer", "functools.partial"], "function", ["None"], ["\n", "self", ".", "cls_token", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "1", ",", "embed_dim", ")", ")", "\n", "self", ".", "pos_embed", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "num_patches", "+", "1", ",", "embed_dim", ")", ")", "\n", "\n", "print", "(", "'using drop_out rate is : {}'", ".", "format", "(", "drop_rate", ")", ")", "\n", "print", "(", "'using attn_drop_out rate is : {}'", ".", "format", "(", "attn_drop_rate", ")", ")", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.vision_transformer.vit_small": [[272, 277], ["vision_transformer.VisionTransformer", "functools.partial"], "function", ["None"], ["\n", "self", ".", "pos_drop", "=", "nn", ".", "Dropout", "(", "p", "=", "drop_rate", ")", "\n", "dpr", "=", "[", "x", ".", "item", "(", ")", "for", "x", "in", "torch", ".", "linspace", "(", "0", ",", "drop_path_rate", ",", "depth", ")", "]", "# stochastic depth decay rule", "\n", "\n", "self", ".", "blocks", "=", "nn", ".", "ModuleList", "(", "[", "\n", "Block", "(", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.vision_transformer.vit_base": [[279, 284], ["vision_transformer.VisionTransformer", "functools.partial"], "function", ["None"], ["drop", "=", "drop_rate", ",", "attn_drop", "=", "attn_drop_rate", ",", "drop_path", "=", "dpr", "[", "i", "]", ",", "norm_layer", "=", "norm_layer", ")", "\n", "for", "i", "in", "range", "(", "depth", ")", "]", ")", "\n", "\n", "self", ".", "norm", "=", "norm_layer", "(", "embed_dim", ")", "\n", "\n", "# Classifier head", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.utils.GaussianBlur.__init__": [[40, 44], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "p", "=", "0.5", ",", "radius_min", "=", "0.1", ",", "radius_max", "=", "2.", ")", ":", "\n", "        ", "self", ".", "prob", "=", "p", "\n", "self", ".", "radius_min", "=", "radius_min", "\n", "self", ".", "radius_max", "=", "radius_max", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.utils.GaussianBlur.__call__": [[45, 53], ["img.filter", "random.random", "PIL.ImageFilter.GaussianBlur", "random.uniform"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "do_it", "=", "random", ".", "random", "(", ")", "<=", "self", ".", "prob", "\n", "if", "not", "do_it", ":", "\n", "            ", "return", "img", "\n", "\n", "", "return", "img", ".", "filter", "(", "\n", "ImageFilter", ".", "GaussianBlur", "(", "\n", "radius", "=", "random", ".", "uniform", "(", "self", ".", "radius_min", ",", "self", ".", "radius_max", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.utils.Solarization.__init__": [[61, 63], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "p", ")", ":", "\n", "        ", "self", ".", "p", "=", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.utils.Solarization.__call__": [[64, 69], ["random.random", "PIL.ImageOps.solarize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", "<", "self", ".", "p", ":", "\n", "            ", "return", "ImageOps", ".", "solarize", "(", "img", ")", "\n", "", "else", ":", "\n", "            ", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.utils.SmoothedValue.__init__": [[199, 206], ["collections.deque"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "window_size", "=", "20", ",", "fmt", "=", "None", ")", ":", "\n", "        ", "if", "fmt", "is", "None", ":", "\n", "            ", "fmt", "=", "\"{median:.6f} ({global_avg:.6f})\"", "\n", "", "self", ".", "deque", "=", "deque", "(", "maxlen", "=", "window_size", ")", "\n", "self", ".", "total", "=", "0.0", "\n", "self", ".", "count", "=", "0", "\n", "self", ".", "fmt", "=", "fmt", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.utils.SmoothedValue.update": [[207, 211], ["utils.SmoothedValue.deque.append"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "value", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "deque", ".", "append", "(", "value", ")", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "total", "+=", "value", "*", "n", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.utils.SmoothedValue.synchronize_between_processes": [[212, 224], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.barrier", "torch.barrier", "torch.all_reduce", "torch.all_reduce", "t.tolist.tolist.tolist", "int", "utils.is_dist_avail_and_initialized"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.utils.is_dist_avail_and_initialized"], ["", "def", "synchronize_between_processes", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Warning: does not synchronize the deque!\n        \"\"\"", "\n", "if", "not", "is_dist_avail_and_initialized", "(", ")", ":", "\n", "            ", "return", "\n", "", "t", "=", "torch", ".", "tensor", "(", "[", "self", ".", "count", ",", "self", ".", "total", "]", ",", "dtype", "=", "torch", ".", "float64", ",", "device", "=", "'cuda'", ")", "\n", "dist", ".", "barrier", "(", ")", "\n", "dist", ".", "all_reduce", "(", "t", ")", "\n", "t", "=", "t", ".", "tolist", "(", ")", "\n", "self", ".", "count", "=", "int", "(", "t", "[", "0", "]", ")", "\n", "self", ".", "total", "=", "t", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.utils.SmoothedValue.median": [[225, 229], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor.median().item", "torch.tensor.median().item", "list", "torch.tensor.median", "torch.tensor.median"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.utils.SmoothedValue.median", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.utils.SmoothedValue.median"], ["", "@", "property", "\n", "def", "median", "(", "self", ")", ":", "\n", "        ", "d", "=", "torch", ".", "tensor", "(", "list", "(", "self", ".", "deque", ")", ")", "\n", "return", "d", ".", "median", "(", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.utils.SmoothedValue.avg": [[230, 234], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor.mean().item", "torch.tensor.mean().item", "list", "torch.tensor.mean", "torch.tensor.mean"], "methods", ["None"], ["", "@", "property", "\n", "def", "avg", "(", "self", ")", ":", "\n", "        ", "d", "=", "torch", ".", "tensor", "(", "list", "(", "self", ".", "deque", ")", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "return", "d", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.utils.SmoothedValue.global_avg": [[235, 238], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "global_avg", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "total", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.utils.SmoothedValue.max": [[239, 242], ["utils.SmoothedValue.max"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.utils.SmoothedValue.max"], ["", "@", "property", "\n", "def", "max", "(", "self", ")", ":", "\n", "        ", "return", "max", "(", "self", ".", "deque", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.utils.SmoothedValue.value": [[243, 246], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "value", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "deque", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.utils.SmoothedValue.__str__": [[247, 254], ["utils.SmoothedValue.fmt.format"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "fmt", ".", "format", "(", "\n", "median", "=", "self", ".", "median", ",", "\n", "avg", "=", "self", ".", "avg", ",", "\n", "global_avg", "=", "self", ".", "global_avg", ",", "\n", "max", "=", "self", ".", "max", ",", "\n", "value", "=", "self", ".", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.utils.MetricLogger.__init__": [[284, 287], ["collections.defaultdict"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "delimiter", "=", "\"\\t\"", ")", ":", "\n", "        ", "self", ".", "meters", "=", "defaultdict", "(", "SmoothedValue", ")", "\n", "self", ".", "delimiter", "=", "delimiter", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.utils.MetricLogger.update": [[288, 294], ["kwargs.items", "isinstance", "isinstance", "utils.MetricLogger.meters[].update", "v.item.item.item"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.utils.MetricLogger.update"], ["", "def", "update", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "for", "k", ",", "v", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "v", ",", "torch", ".", "Tensor", ")", ":", "\n", "                ", "v", "=", "v", ".", "item", "(", ")", "\n", "", "assert", "isinstance", "(", "v", ",", "(", "float", ",", "int", ")", ")", "\n", "self", ".", "meters", "[", "k", "]", ".", "update", "(", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.utils.MetricLogger.__getattr__": [[295, 302], ["AttributeError", "type"], "methods", ["None"], ["", "", "def", "__getattr__", "(", "self", ",", "attr", ")", ":", "\n", "        ", "if", "attr", "in", "self", ".", "meters", ":", "\n", "            ", "return", "self", ".", "meters", "[", "attr", "]", "\n", "", "if", "attr", "in", "self", ".", "__dict__", ":", "\n", "            ", "return", "self", ".", "__dict__", "[", "attr", "]", "\n", "", "raise", "AttributeError", "(", "\"'{}' object has no attribute '{}'\"", ".", "format", "(", "\n", "type", "(", "self", ")", ".", "__name__", ",", "attr", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.utils.MetricLogger.__str__": [[303, 310], ["utils.MetricLogger.meters.items", "utils.MetricLogger.delimiter.join", "loss_str.append", "str"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "loss_str", "=", "[", "]", "\n", "for", "name", ",", "meter", "in", "self", ".", "meters", ".", "items", "(", ")", ":", "\n", "            ", "loss_str", ".", "append", "(", "\n", "\"{}: {}\"", ".", "format", "(", "name", ",", "str", "(", "meter", ")", ")", "\n", ")", "\n", "", "return", "self", ".", "delimiter", ".", "join", "(", "loss_str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.utils.MetricLogger.synchronize_between_processes": [[311, 314], ["utils.MetricLogger.meters.values", "meter.synchronize_between_processes"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.utils.MetricLogger.synchronize_between_processes"], ["", "def", "synchronize_between_processes", "(", "self", ")", ":", "\n", "        ", "for", "meter", "in", "self", ".", "meters", ".", "values", "(", ")", ":", "\n", "            ", "meter", ".", "synchronize_between_processes", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.utils.MetricLogger.add_meter": [[315, 317], ["None"], "methods", ["None"], ["", "", "def", "add_meter", "(", "self", ",", "name", ",", "meter", ")", ":", "\n", "        ", "self", ".", "meters", "[", "name", "]", "=", "meter", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.utils.MetricLogger.log_every": [[318, 371], ["time.time", "time.time", "utils.SmoothedValue", "utils.SmoothedValue", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "str", "print", "utils.MetricLogger.delimiter.join", "utils.MetricLogger.delimiter.join", "utils.SmoothedValue.update", "utils.SmoothedValue.update", "time.time", "time.time", "datetime.timedelta", "str", "str", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "len", "time.time", "time.time", "datetime.timedelta", "print", "print", "int", "len", "str", "len", "len", "utils.MetricLogger.format", "utils.MetricLogger.format", "len", "int", "len", "len", "str", "str", "str", "str", "str", "str", "torch.cuda.max_memory_allocated", "torch.cuda.max_memory_allocated", "torch.cuda.max_memory_allocated", "torch.cuda.max_memory_allocated"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.utils.MetricLogger.update", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.utils.MetricLogger.update"], ["", "def", "log_every", "(", "self", ",", "iterable", ",", "print_freq", ",", "header", "=", "None", ")", ":", "\n", "        ", "i", "=", "0", "\n", "if", "not", "header", ":", "\n", "            ", "header", "=", "''", "\n", "", "start_time", "=", "time", ".", "time", "(", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "iter_time", "=", "SmoothedValue", "(", "fmt", "=", "'{avg:.6f}'", ")", "\n", "data_time", "=", "SmoothedValue", "(", "fmt", "=", "'{avg:.6f}'", ")", "\n", "space_fmt", "=", "':'", "+", "str", "(", "len", "(", "str", "(", "len", "(", "iterable", ")", ")", ")", ")", "+", "'d'", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "log_msg", "=", "self", ".", "delimiter", ".", "join", "(", "[", "\n", "header", ",", "\n", "'[{0'", "+", "space_fmt", "+", "'}/{1}]'", ",", "\n", "'eta: {eta}'", ",", "\n", "'{meters}'", ",", "\n", "'time: {time}'", ",", "\n", "'data: {data}'", ",", "\n", "'max mem: {memory:.0f}'", "\n", "]", ")", "\n", "", "else", ":", "\n", "            ", "log_msg", "=", "self", ".", "delimiter", ".", "join", "(", "[", "\n", "header", ",", "\n", "'[{0'", "+", "space_fmt", "+", "'}/{1}]'", ",", "\n", "'eta: {eta}'", ",", "\n", "'{meters}'", ",", "\n", "'time: {time}'", ",", "\n", "'data: {data}'", "\n", "]", ")", "\n", "", "MB", "=", "1024.0", "*", "1024.0", "\n", "for", "obj", "in", "iterable", ":", "\n", "            ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "yield", "obj", "\n", "iter_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "if", "i", "%", "print_freq", "==", "0", "or", "i", "==", "len", "(", "iterable", ")", "-", "1", ":", "\n", "                ", "eta_seconds", "=", "iter_time", ".", "global_avg", "*", "(", "len", "(", "iterable", ")", "-", "i", ")", "\n", "eta_string", "=", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "int", "(", "eta_seconds", ")", ")", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                    ", "print", "(", "log_msg", ".", "format", "(", "\n", "i", ",", "len", "(", "iterable", ")", ",", "eta", "=", "eta_string", ",", "\n", "meters", "=", "str", "(", "self", ")", ",", "\n", "time", "=", "str", "(", "iter_time", ")", ",", "data", "=", "str", "(", "data_time", ")", ",", "\n", "memory", "=", "torch", ".", "cuda", ".", "max_memory_allocated", "(", ")", "/", "MB", ")", ")", "\n", "", "else", ":", "\n", "                    ", "print", "(", "log_msg", ".", "format", "(", "\n", "i", ",", "len", "(", "iterable", ")", ",", "eta", "=", "eta_string", ",", "\n", "meters", "=", "str", "(", "self", ")", ",", "\n", "time", "=", "str", "(", "iter_time", ")", ",", "data", "=", "str", "(", "data_time", ")", ")", ")", "\n", "", "", "i", "+=", "1", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "", "total_time", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "total_time_str", "=", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "int", "(", "total_time", ")", ")", ")", "\n", "print", "(", "'{} Total time: {} ({:.6f} s / it)'", ".", "format", "(", "\n", "header", ",", "total_time_str", ",", "total_time", "/", "len", "(", "iterable", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.utils.LARS.__init__": [[527, 533], ["dict", "super().__init__"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.softmax_loss.LabelSmoothingCrossEntropy.__init__"], ["def", "__init__", "(", "self", ",", "params", ",", "lr", "=", "0", ",", "weight_decay", "=", "0", ",", "momentum", "=", "0.9", ",", "eta", "=", "0.001", ",", "\n", "weight_decay_filter", "=", "None", ",", "lars_adaptation_filter", "=", "None", ")", ":", "\n", "        ", "defaults", "=", "dict", "(", "lr", "=", "lr", ",", "weight_decay", "=", "weight_decay", ",", "momentum", "=", "momentum", ",", "\n", "eta", "=", "eta", ",", "weight_decay_filter", "=", "weight_decay_filter", ",", "\n", "lars_adaptation_filter", "=", "lars_adaptation_filter", ")", "\n", "super", "(", ")", ".", "__init__", "(", "params", ",", "defaults", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.utils.LARS.step": [[534, 562], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "mu.mul_().add_", "p.add_", "dp.mul.mul.add", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.where", "torch.where", "torch.where", "torch.where", "dp.mul.mul.mul", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.where", "torch.where", "torch.where", "torch.where", "mu.mul_"], "methods", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "step", "(", "self", ")", ":", "\n", "        ", "for", "g", "in", "self", ".", "param_groups", ":", "\n", "            ", "for", "p", "in", "g", "[", "'params'", "]", ":", "\n", "                ", "dp", "=", "p", ".", "grad", "\n", "\n", "if", "dp", "is", "None", ":", "\n", "                    ", "continue", "\n", "\n", "", "if", "p", ".", "ndim", "!=", "1", ":", "\n", "                    ", "dp", "=", "dp", ".", "add", "(", "p", ",", "alpha", "=", "g", "[", "'weight_decay'", "]", ")", "\n", "\n", "", "if", "p", ".", "ndim", "!=", "1", ":", "\n", "                    ", "param_norm", "=", "torch", ".", "norm", "(", "p", ")", "\n", "update_norm", "=", "torch", ".", "norm", "(", "dp", ")", "\n", "one", "=", "torch", ".", "ones_like", "(", "param_norm", ")", "\n", "q", "=", "torch", ".", "where", "(", "param_norm", ">", "0.", ",", "\n", "torch", ".", "where", "(", "update_norm", ">", "0", ",", "\n", "(", "g", "[", "'eta'", "]", "*", "param_norm", "/", "update_norm", ")", ",", "one", ")", ",", "one", ")", "\n", "dp", "=", "dp", ".", "mul", "(", "q", ")", "\n", "\n", "", "param_state", "=", "self", ".", "state", "[", "p", "]", "\n", "if", "'mu'", "not", "in", "param_state", ":", "\n", "                    ", "param_state", "[", "'mu'", "]", "=", "torch", ".", "zeros_like", "(", "p", ")", "\n", "", "mu", "=", "param_state", "[", "'mu'", "]", "\n", "mu", ".", "mul_", "(", "g", "[", "'momentum'", "]", ")", ".", "add_", "(", "dp", ")", "\n", "\n", "p", ".", "add_", "(", "mu", ",", "alpha", "=", "-", "g", "[", "'lr'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.utils.MultiCropWrapper.__init__": [[573, 579], ["torch.nn.Module.__init__", "torch.nn.Identity", "torch.nn.Identity", "torch.nn.Identity", "torch.nn.Identity"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.softmax_loss.LabelSmoothingCrossEntropy.__init__"], ["def", "__init__", "(", "self", ",", "backbone", ",", "head", ")", ":", "\n", "        ", "super", "(", "MultiCropWrapper", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# disable layers dedicated to ImageNet labels classification", "\n", "backbone", ".", "fc", ",", "backbone", ".", "head", "=", "nn", ".", "Identity", "(", ")", ",", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "backbone", "=", "backbone", "\n", "self", ".", "head", "=", "head", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.utils.MultiCropWrapper.forward": [[580, 598], ["torch.cumsum", "torch.cumsum", "torch.cumsum", "torch.cumsum", "utils.MultiCropWrapper.head", "isinstance", "utils.MultiCropWrapper.backbone", "torch.unique_consecutive", "torch.unique_consecutive", "torch.unique_consecutive", "torch.unique_consecutive", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# convert to list", "\n", "        ", "if", "not", "isinstance", "(", "x", ",", "list", ")", ":", "\n", "            ", "x", "=", "[", "x", "]", "\n", "", "idx_crops", "=", "torch", ".", "cumsum", "(", "torch", ".", "unique_consecutive", "(", "\n", "torch", ".", "tensor", "(", "[", "inp", ".", "shape", "[", "-", "1", "]", "for", "inp", "in", "x", "]", ")", ",", "\n", "return_counts", "=", "True", ",", "\n", ")", "[", "1", "]", ",", "0", ")", "\n", "start_idx", "=", "0", "\n", "for", "end_idx", "in", "idx_crops", ":", "\n", "            ", "_out", "=", "self", ".", "backbone", "(", "torch", ".", "cat", "(", "x", "[", "start_idx", ":", "end_idx", "]", ")", ")", "\n", "if", "start_idx", "==", "0", ":", "\n", "                ", "output", "=", "_out", "\n", "", "else", ":", "\n", "                ", "output", "=", "torch", ".", "cat", "(", "(", "output", ",", "_out", ")", ")", "\n", "", "start_idx", "=", "end_idx", "\n", "# Run the head forward on the concatenated features.", "\n", "", "return", "self", ".", "head", "(", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.utils.load_pretrained_weights": [[71, 100], ["os.path.isfile", "torch.load", "torch.load", "model.load_state_dict", "utils.setup_for_distributed.print", "utils.setup_for_distributed.print", "utils.setup_for_distributed.print", "k.replace", "k.replace", "utils.setup_for_distributed.print", "torch.hub.load_state_dict_from_url", "torch.hub.load_state_dict_from_url", "model.load_state_dict", "utils.setup_for_distributed.print", "torch.hub.load_state_dict_from_url.items", "torch.hub.load_state_dict_from_url.items"], "function", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.solver.scheduler.Scheduler.load_state_dict", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.solver.scheduler.Scheduler.load_state_dict"], ["", "", "", "def", "load_pretrained_weights", "(", "model", ",", "pretrained_weights", ",", "checkpoint_key", ",", "model_name", ",", "patch_size", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "isfile", "(", "pretrained_weights", ")", ":", "\n", "        ", "state_dict", "=", "torch", ".", "load", "(", "pretrained_weights", ",", "map_location", "=", "\"cpu\"", ")", "\n", "if", "checkpoint_key", "is", "not", "None", "and", "checkpoint_key", "in", "state_dict", ":", "\n", "            ", "print", "(", "f\"Take key {checkpoint_key} in provided checkpoint dict\"", ")", "\n", "state_dict", "=", "state_dict", "[", "checkpoint_key", "]", "\n", "# remove `module.` prefix", "\n", "", "state_dict", "=", "{", "k", ".", "replace", "(", "\"module.\"", ",", "\"\"", ")", ":", "v", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", "}", "\n", "# remove `backbone.` prefix induced by multicrop wrapper", "\n", "state_dict", "=", "{", "k", ".", "replace", "(", "\"backbone.\"", ",", "\"\"", ")", ":", "v", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", "}", "\n", "msg", "=", "model", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "False", ")", "\n", "print", "(", "'Pretrained weights found at {} and loaded with msg: {}'", ".", "format", "(", "pretrained_weights", ",", "msg", ")", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"Please use the `--pretrained_weights` argument to indicate the path of the checkpoint to evaluate.\"", ")", "\n", "url", "=", "None", "\n", "if", "model_name", "==", "\"vit_small\"", "and", "patch_size", "==", "16", ":", "\n", "            ", "url", "=", "\"dino_deitsmall16_pretrain/dino_deitsmall16_pretrain.pth\"", "\n", "", "elif", "model_name", "==", "\"vit_small\"", "and", "patch_size", "==", "8", ":", "\n", "            ", "url", "=", "\"dino_deitsmall8_pretrain/dino_deitsmall8_pretrain.pth\"", "\n", "", "elif", "model_name", "==", "\"vit_base\"", "and", "patch_size", "==", "16", ":", "\n", "            ", "url", "=", "\"dino_vitbase16_pretrain/dino_vitbase16_pretrain.pth\"", "\n", "", "elif", "model_name", "==", "\"vit_base\"", "and", "patch_size", "==", "8", ":", "\n", "            ", "url", "=", "\"dino_vitbase8_pretrain/dino_vitbase8_pretrain.pth\"", "\n", "", "if", "url", "is", "not", "None", ":", "\n", "            ", "print", "(", "\"Since no pretrained weights have been provided, we load the reference pretrained DINO weights.\"", ")", "\n", "state_dict", "=", "torch", ".", "hub", ".", "load_state_dict_from_url", "(", "url", "=", "\"https://dl.fbaipublicfiles.com/dino/\"", "+", "url", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"There is no reference weights available for this model => We use random weights.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.utils.clip_gradients": [[102, 112], ["model.named_parameters", "p.grad.data.norm", "norms.append", "p.grad.data.norm.item", "p.grad.data.mul_"], "function", ["None"], ["", "", "", "def", "clip_gradients", "(", "model", ",", "clip", ")", ":", "\n", "    ", "norms", "=", "[", "]", "\n", "for", "name", ",", "p", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "        ", "if", "p", ".", "grad", "is", "not", "None", ":", "\n", "            ", "param_norm", "=", "p", ".", "grad", ".", "data", ".", "norm", "(", "2", ")", "\n", "norms", ".", "append", "(", "param_norm", ".", "item", "(", ")", ")", "\n", "clip_coef", "=", "clip", "/", "(", "param_norm", "+", "1e-6", ")", "\n", "if", "clip_coef", "<", "1", ":", "\n", "                ", "p", ".", "grad", ".", "data", ".", "mul_", "(", "clip_coef", ")", "\n", "", "", "", "return", "norms", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.utils.cancel_gradients_last_layer": [[114, 120], ["model.named_parameters"], "function", ["None"], ["", "def", "cancel_gradients_last_layer", "(", "epoch", ",", "model", ",", "freeze_last_layer", ")", ":", "\n", "    ", "if", "epoch", ">=", "freeze_last_layer", ":", "\n", "        ", "return", "\n", "", "for", "n", ",", "p", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "        ", "if", "\"last_layer\"", "in", "n", ":", "\n", "            ", "p", ".", "grad", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.utils.restart_from_checkpoint": [[122, 155], ["utils.setup_for_distributed.print", "torch.load", "torch.load", "kwargs.items", "os.path.isfile", "utils.setup_for_distributed.print", "value.load_state_dict", "utils.setup_for_distributed.print", "value.load_state_dict", "utils.setup_for_distributed.print", "utils.setup_for_distributed.print"], "function", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.solver.scheduler.Scheduler.load_state_dict", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.solver.scheduler.Scheduler.load_state_dict"], ["", "", "", "def", "restart_from_checkpoint", "(", "ckp_path", ",", "run_variables", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    Re-start from checkpoint\n    \"\"\"", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "ckp_path", ")", ":", "\n", "        ", "return", "\n", "", "print", "(", "\"Found checkpoint at {}\"", ".", "format", "(", "ckp_path", ")", ")", "\n", "\n", "# open checkpoint file", "\n", "checkpoint", "=", "torch", ".", "load", "(", "ckp_path", ",", "map_location", "=", "\"cpu\"", ")", "\n", "\n", "# key is what to look for in the checkpoint file", "\n", "# value is the object to load", "\n", "# example: {'state_dict': model}", "\n", "for", "key", ",", "value", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "        ", "if", "key", "in", "checkpoint", "and", "value", "is", "not", "None", ":", "\n", "            ", "try", ":", "\n", "                ", "msg", "=", "value", ".", "load_state_dict", "(", "checkpoint", "[", "key", "]", ",", "strict", "=", "False", ")", "\n", "print", "(", "\"=> loaded '{}' from checkpoint '{}' with msg {}\"", ".", "format", "(", "key", ",", "ckp_path", ",", "msg", ")", ")", "\n", "", "except", "TypeError", ":", "\n", "                ", "try", ":", "\n", "                    ", "msg", "=", "value", ".", "load_state_dict", "(", "checkpoint", "[", "key", "]", ")", "\n", "print", "(", "\"=> loaded '{}' from checkpoint: '{}'\"", ".", "format", "(", "key", ",", "ckp_path", ")", ")", "\n", "", "except", "ValueError", ":", "\n", "                    ", "print", "(", "\"=> failed to load '{}' from checkpoint: '{}'\"", ".", "format", "(", "key", ",", "ckp_path", ")", ")", "\n", "", "", "", "else", ":", "\n", "            ", "print", "(", "\"=> key '{}' not found in checkpoint: '{}'\"", ".", "format", "(", "key", ",", "ckp_path", ")", ")", "\n", "\n", "# re load variable important for the run", "\n", "", "", "if", "run_variables", "is", "not", "None", ":", "\n", "        ", "for", "var_name", "in", "run_variables", ":", "\n", "            ", "if", "var_name", "in", "checkpoint", ":", "\n", "                ", "run_variables", "[", "var_name", "]", "=", "checkpoint", "[", "var_name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.utils.cosine_scheduler": [[157, 169], ["numpy.array", "numpy.arange", "numpy.concatenate", "numpy.linspace", "len", "numpy.cos", "len"], "function", ["None"], ["", "", "", "", "def", "cosine_scheduler", "(", "base_value", ",", "final_value", ",", "epochs", ",", "niter_per_ep", ",", "warmup_epochs", "=", "0", ",", "start_warmup_value", "=", "0", ")", ":", "\n", "    ", "warmup_schedule", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "warmup_iters", "=", "warmup_epochs", "*", "niter_per_ep", "\n", "if", "warmup_epochs", ">", "0", ":", "\n", "        ", "warmup_schedule", "=", "np", ".", "linspace", "(", "start_warmup_value", ",", "base_value", ",", "warmup_iters", ")", "\n", "\n", "", "iters", "=", "np", ".", "arange", "(", "epochs", "*", "niter_per_ep", "-", "warmup_iters", ")", "\n", "schedule", "=", "final_value", "+", "0.5", "*", "(", "base_value", "-", "final_value", ")", "*", "(", "1", "+", "np", ".", "cos", "(", "np", ".", "pi", "*", "iters", "/", "len", "(", "iters", ")", ")", ")", "\n", "\n", "schedule", "=", "np", ".", "concatenate", "(", "(", "warmup_schedule", ",", "schedule", ")", ")", "\n", "assert", "len", "(", "schedule", ")", "==", "epochs", "*", "niter_per_ep", "\n", "return", "schedule", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.utils.bool_flag": [[171, 183], ["s.lower", "s.lower", "argparse.ArgumentTypeError"], "function", ["None"], ["", "def", "bool_flag", "(", "s", ")", ":", "\n", "    ", "\"\"\"\n    Parse boolean arguments from the command line.\n    \"\"\"", "\n", "FALSY_STRINGS", "=", "{", "\"off\"", ",", "\"false\"", ",", "\"0\"", "}", "\n", "TRUTHY_STRINGS", "=", "{", "\"on\"", ",", "\"true\"", ",", "\"1\"", "}", "\n", "if", "s", ".", "lower", "(", ")", "in", "FALSY_STRINGS", ":", "\n", "        ", "return", "False", "\n", "", "elif", "s", ".", "lower", "(", ")", "in", "TRUTHY_STRINGS", ":", "\n", "        ", "return", "True", "\n", "", "else", ":", "\n", "        ", "raise", "argparse", ".", "ArgumentTypeError", "(", "\"invalid value for a boolean flag\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.utils.fix_random_seeds": [[185, 192], ["torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "numpy.random.seed"], "function", ["None"], ["", "", "def", "fix_random_seeds", "(", "seed", "=", "31", ")", ":", "\n", "    ", "\"\"\"\n    Fix random seeds.\n    \"\"\"", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.utils.reduce_dict": [[256, 281], ["utils.get_world_size", "torch.no_grad", "torch.no_grad", "sorted", "torch.stack", "torch.stack", "torch.all_reduce", "input_dict.keys", "names.append", "torch.stack.append", "zip"], "function", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.utils.get_world_size"], ["", "", "def", "reduce_dict", "(", "input_dict", ",", "average", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        input_dict (dict): all the values will be reduced\n        average (bool): whether to do average or sum\n    Reduce the values in the dictionary from all processes so that all processes\n    have the averaged results. Returns a dict with the same fields as\n    input_dict, after reduction.\n    \"\"\"", "\n", "world_size", "=", "get_world_size", "(", ")", "\n", "if", "world_size", "<", "2", ":", "\n", "        ", "return", "input_dict", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "names", "=", "[", "]", "\n", "values", "=", "[", "]", "\n", "# sort the keys so that they are consistent across processes", "\n", "for", "k", "in", "sorted", "(", "input_dict", ".", "keys", "(", ")", ")", ":", "\n", "            ", "names", ".", "append", "(", "k", ")", "\n", "values", ".", "append", "(", "input_dict", "[", "k", "]", ")", "\n", "", "values", "=", "torch", ".", "stack", "(", "values", ",", "dim", "=", "0", ")", "\n", "dist", ".", "all_reduce", "(", "values", ")", "\n", "if", "average", ":", "\n", "            ", "values", "/=", "world_size", "\n", "", "reduced_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "zip", "(", "names", ",", "values", ")", "}", "\n", "", "return", "reduced_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.utils.get_sha": [[373, 391], ["os.path.dirname", "os.path.abspath", "subprocess.check_output().decode().strip", "utils.get_sha._run"], "function", ["None"], ["", "", "def", "get_sha", "(", ")", ":", "\n", "    ", "cwd", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "__file__", ")", ")", "\n", "\n", "def", "_run", "(", "command", ")", ":", "\n", "        ", "return", "subprocess", ".", "check_output", "(", "command", ",", "cwd", "=", "cwd", ")", ".", "decode", "(", "'ascii'", ")", ".", "strip", "(", ")", "\n", "", "sha", "=", "'N/A'", "\n", "diff", "=", "\"clean\"", "\n", "branch", "=", "'N/A'", "\n", "try", ":", "\n", "        ", "sha", "=", "_run", "(", "[", "'git'", ",", "'rev-parse'", ",", "'HEAD'", "]", ")", "\n", "subprocess", ".", "check_output", "(", "[", "'git'", ",", "'diff'", "]", ",", "cwd", "=", "cwd", ")", "\n", "diff", "=", "_run", "(", "[", "'git'", ",", "'diff-index'", ",", "'HEAD'", "]", ")", "\n", "diff", "=", "\"has uncommited changes\"", "if", "diff", "else", "\"clean\"", "\n", "branch", "=", "_run", "(", "[", "'git'", ",", "'rev-parse'", ",", "'--abbrev-ref'", ",", "'HEAD'", "]", ")", "\n", "", "except", "Exception", ":", "\n", "        ", "pass", "\n", "", "message", "=", "f\"sha: {sha}, status: {diff}, branch: {branch}\"", "\n", "return", "message", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.utils.is_dist_avail_and_initialized": [[393, 399], ["torch.is_available", "torch.is_initialized"], "function", ["None"], ["", "def", "is_dist_avail_and_initialized", "(", ")", ":", "\n", "    ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "        ", "return", "False", "\n", "", "if", "not", "dist", ".", "is_initialized", "(", ")", ":", "\n", "        ", "return", "False", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.utils.get_world_size": [[401, 405], ["torch.get_world_size", "utils.is_dist_avail_and_initialized"], "function", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.utils.get_world_size", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.utils.is_dist_avail_and_initialized"], ["", "def", "get_world_size", "(", ")", ":", "\n", "    ", "if", "not", "is_dist_avail_and_initialized", "(", ")", ":", "\n", "        ", "return", "1", "\n", "", "return", "dist", ".", "get_world_size", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.utils.get_rank": [[407, 411], ["torch.get_rank", "utils.is_dist_avail_and_initialized"], "function", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.utils.get_rank", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.utils.is_dist_avail_and_initialized"], ["", "def", "get_rank", "(", ")", ":", "\n", "    ", "if", "not", "is_dist_avail_and_initialized", "(", ")", ":", "\n", "        ", "return", "0", "\n", "", "return", "dist", ".", "get_rank", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.utils.is_main_process": [[413, 415], ["utils.get_rank"], "function", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.utils.get_rank"], ["", "def", "is_main_process", "(", ")", ":", "\n", "    ", "return", "get_rank", "(", ")", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.utils.save_on_master": [[417, 420], ["utils.is_main_process", "torch.save", "torch.save"], "function", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.utils.is_main_process"], ["", "def", "save_on_master", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "if", "is_main_process", "(", ")", ":", "\n", "        ", "torch", ".", "save", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.utils.setup_for_distributed": [[422, 435], ["kwargs.pop", "builtin_print"], "function", ["None"], ["", "", "def", "setup_for_distributed", "(", "is_master", ")", ":", "\n", "    ", "\"\"\"\n    This function disables printing when not in master process\n    \"\"\"", "\n", "import", "builtins", "as", "__builtin__", "\n", "builtin_print", "=", "__builtin__", ".", "print", "\n", "\n", "def", "print", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "force", "=", "kwargs", ".", "pop", "(", "'force'", ",", "False", ")", "\n", "if", "is_master", "or", "force", ":", "\n", "            ", "builtin_print", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "", "", "__builtin__", ".", "print", "=", "print", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.utils.init_distributed_mode": [[437, 470], ["torch.init_process_group", "torch.cuda.set_device", "torch.cuda.set_device", "utils.setup_for_distributed.print", "torch.barrier", "utils.setup_for_distributed", "int", "int", "int", "int", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.device_count", "torch.cuda.device_count", "utils.setup_for_distributed.print", "utils.setup_for_distributed.print", "sys.exit"], "function", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.utils.setup_for_distributed"], ["", "def", "init_distributed_mode", "(", "args", ")", ":", "\n", "# launched with torch.distributed.launch", "\n", "    ", "if", "'RANK'", "in", "os", ".", "environ", "and", "'WORLD_SIZE'", "in", "os", ".", "environ", ":", "\n", "        ", "args", ".", "rank", "=", "int", "(", "os", ".", "environ", "[", "\"RANK\"", "]", ")", "\n", "args", ".", "world_size", "=", "int", "(", "os", ".", "environ", "[", "'WORLD_SIZE'", "]", ")", "\n", "args", ".", "gpu", "=", "int", "(", "os", ".", "environ", "[", "'LOCAL_RANK'", "]", ")", "\n", "# launched with submitit on a slurm cluster", "\n", "", "elif", "'SLURM_PROCID'", "in", "os", ".", "environ", ":", "\n", "        ", "args", ".", "rank", "=", "int", "(", "os", ".", "environ", "[", "'SLURM_PROCID'", "]", ")", "\n", "args", ".", "gpu", "=", "args", ".", "rank", "%", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "# launched naively with `python main_dino.py`", "\n", "# we manually add MASTER_ADDR and MASTER_PORT to env variables", "\n", "", "elif", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "print", "(", "'Will run the code on one GPU.'", ")", "\n", "args", ".", "rank", ",", "args", ".", "gpu", ",", "args", ".", "world_size", "=", "0", ",", "0", ",", "1", "\n", "os", ".", "environ", "[", "'MASTER_ADDR'", "]", "=", "'127.0.0.1'", "\n", "os", ".", "environ", "[", "'MASTER_PORT'", "]", "=", "'29500'", "\n", "", "else", ":", "\n", "        ", "print", "(", "'Does not support training without GPU.'", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n", "", "dist", ".", "init_process_group", "(", "\n", "backend", "=", "\"nccl\"", ",", "\n", "init_method", "=", "args", ".", "dist_url", ",", "\n", "world_size", "=", "args", ".", "world_size", ",", "\n", "rank", "=", "args", ".", "rank", ",", "\n", ")", "\n", "\n", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "print", "(", "'| distributed init (rank {}): {}'", ".", "format", "(", "\n", "args", ".", "rank", ",", "args", ".", "dist_url", ")", ",", "flush", "=", "True", ")", "\n", "dist", ".", "barrier", "(", ")", "\n", "setup_for_distributed", "(", "args", ".", "rank", "==", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.utils.accuracy": [[472, 480], ["max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.reshape().expand_as", "target.reshape", "correct[].reshape().float().sum", "correct[].reshape().float", "correct[].reshape"], "function", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.utils.SmoothedValue.max"], ["", "def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"Computes the accuracy over the k top predictions for the specified values of k\"\"\"", "\n", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "reshape", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "return", "[", "correct", "[", ":", "k", "]", ".", "reshape", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ")", "*", "100.", "/", "batch_size", "for", "k", "in", "topk", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.utils._no_grad_trunc_normal_": [[482, 516], ["warnings.warn", "torch.no_grad", "torch.no_grad", "utils._no_grad_trunc_normal_.norm_cdf"], "function", ["None"], ["", "def", "_no_grad_trunc_normal_", "(", "tensor", ",", "mean", ",", "std", ",", "a", ",", "b", ")", ":", "\n", "# Cut & paste from PyTorch official master until it's in a few official releases - RW", "\n", "# Method based on https://people.sc.fsu.edu/~jburkardt/presentations/truncated_normal.pdf", "\n", "    ", "def", "norm_cdf", "(", "x", ")", ":", "\n", "# Computes standard normal cumulative distribution function", "\n", "        ", "return", "(", "1.", "+", "math", ".", "erf", "(", "x", "/", "math", ".", "sqrt", "(", "2.", ")", ")", ")", "/", "2.", "\n", "\n", "", "if", "(", "mean", "<", "a", "-", "2", "*", "std", ")", "or", "(", "mean", ">", "b", "+", "2", "*", "std", ")", ":", "\n", "        ", "warnings", ".", "warn", "(", "\"mean is more than 2 std from [a, b] in nn.init.trunc_normal_. \"", "\n", "\"The distribution of values may be incorrect.\"", ",", "\n", "stacklevel", "=", "2", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# Values are generated by using a truncated uniform distribution and", "\n", "# then using the inverse CDF for the normal distribution.", "\n", "# Get upper and lower cdf values", "\n", "        ", "l", "=", "norm_cdf", "(", "(", "a", "-", "mean", ")", "/", "std", ")", "\n", "u", "=", "norm_cdf", "(", "(", "b", "-", "mean", ")", "/", "std", ")", "\n", "\n", "# Uniformly fill tensor with values from [l, u], then translate to", "\n", "# [2l-1, 2u-1].", "\n", "tensor", ".", "uniform_", "(", "2", "*", "l", "-", "1", ",", "2", "*", "u", "-", "1", ")", "\n", "\n", "# Use inverse cdf transform for normal distribution to get truncated", "\n", "# standard normal", "\n", "tensor", ".", "erfinv_", "(", ")", "\n", "\n", "# Transform to proper mean, std", "\n", "tensor", ".", "mul_", "(", "std", "*", "math", ".", "sqrt", "(", "2.", ")", ")", "\n", "tensor", ".", "add_", "(", "mean", ")", "\n", "\n", "# Clamp to ensure it's in the proper range", "\n", "tensor", ".", "clamp_", "(", "min", "=", "a", ",", "max", "=", "b", ")", "\n", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.utils.trunc_normal_": [[518, 521], ["utils._no_grad_trunc_normal_"], "function", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.vit_pytorch._no_grad_trunc_normal_"], ["", "", "def", "trunc_normal_", "(", "tensor", ",", "mean", "=", "0.", ",", "std", "=", "1.", ",", "a", "=", "-", "2.", ",", "b", "=", "2.", ")", ":", "\n", "# type: (Tensor, float, float, float, float) -> Tensor", "\n", "    ", "return", "_no_grad_trunc_normal_", "(", "tensor", ",", "mean", ",", "std", ",", "a", ",", "b", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.utils.get_params_groups": [[600, 612], ["model.named_parameters", "name.endswith", "not_regularized.append", "regularized.append", "len"], "function", ["None"], ["", "", "def", "get_params_groups", "(", "model", ")", ":", "\n", "    ", "regularized", "=", "[", "]", "\n", "not_regularized", "=", "[", "]", "\n", "for", "name", ",", "param", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "        ", "if", "not", "param", ".", "requires_grad", ":", "\n", "            ", "continue", "\n", "# we do not regularize biases nor Norm parameters", "\n", "", "if", "name", ".", "endswith", "(", "\".bias\"", ")", "or", "len", "(", "param", ".", "shape", ")", "==", "1", ":", "\n", "            ", "not_regularized", ".", "append", "(", "param", ")", "\n", "", "else", ":", "\n", "            ", "regularized", ".", "append", "(", "param", ")", "\n", "", "", "return", "[", "{", "'params'", ":", "regularized", "}", ",", "{", "'params'", ":", "not_regularized", ",", "'weight_decay'", ":", "0.", "}", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.utils.has_batchnorms": [[614, 620], ["model.named_modules", "isinstance"], "function", ["None"], ["", "def", "has_batchnorms", "(", "model", ")", ":", "\n", "    ", "bn_types", "=", "(", "nn", ".", "BatchNorm1d", ",", "nn", ".", "BatchNorm2d", ",", "nn", ".", "BatchNorm3d", ",", "nn", ".", "SyncBatchNorm", ")", "\n", "for", "name", ",", "module", "in", "model", ".", "named_modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "module", ",", "bn_types", ")", ":", "\n", "            ", "return", "True", "\n", "", "", "return", "False", "\n", "", ""]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.run_with_submitit.Trainer.__init__": [[59, 61], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.run_with_submitit.Trainer.__call__": [[62, 67], ["run_with_submitit.Trainer._setup_gpu_args", "main_dino.train_dino"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.run_with_submitit.Trainer._setup_gpu_args", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.main_dino.train_dino"], ["", "def", "__call__", "(", "self", ")", ":", "\n", "        ", "import", "main_dino", "\n", "\n", "self", ".", "_setup_gpu_args", "(", ")", "\n", "main_dino", ".", "train_dino", "(", "self", ".", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.run_with_submitit.Trainer.checkpoint": [[68, 76], ["get_init_file().as_uri", "print", "submitit.helpers.DelayedSubmission", "type", "run_with_submitit.get_init_file"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.run_with_submitit.get_init_file"], ["", "def", "checkpoint", "(", "self", ")", ":", "\n", "        ", "import", "os", "\n", "import", "submitit", "\n", "\n", "self", ".", "args", ".", "dist_url", "=", "get_init_file", "(", ")", ".", "as_uri", "(", ")", "\n", "print", "(", "\"Requeuing \"", ",", "self", ".", "args", ")", "\n", "empty_trainer", "=", "type", "(", "self", ")", "(", "self", ".", "args", ")", "\n", "return", "submitit", ".", "helpers", ".", "DelayedSubmission", "(", "empty_trainer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.run_with_submitit.Trainer._setup_gpu_args": [[77, 87], ["submitit.JobEnvironment", "pathlib.Path", "print", "str().replace", "str", "str"], "methods", ["None"], ["", "def", "_setup_gpu_args", "(", "self", ")", ":", "\n", "        ", "import", "submitit", "\n", "from", "pathlib", "import", "Path", "\n", "\n", "job_env", "=", "submitit", ".", "JobEnvironment", "(", ")", "\n", "self", ".", "args", ".", "output_dir", "=", "Path", "(", "str", "(", "self", ".", "args", ".", "output_dir", ")", ".", "replace", "(", "\"%j\"", ",", "str", "(", "job_env", ".", "job_id", ")", ")", ")", "\n", "self", ".", "args", ".", "gpu", "=", "job_env", ".", "local_rank", "\n", "self", ".", "args", ".", "rank", "=", "job_env", ".", "global_rank", "\n", "self", ".", "args", ".", "world_size", "=", "job_env", ".", "num_tasks", "\n", "print", "(", "f\"Process group: {job_env.num_tasks} tasks, rank: {job_env.global_rank}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.run_with_submitit.parse_args": [[27, 38], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "main_dino.get_args_parser"], "function", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.run_with_submitit.parse_args", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.main_dino.get_args_parser"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\"Submitit for DINO\"", ",", "parents", "=", "[", "main_dino", ".", "get_args_parser", "(", ")", "]", ")", "\n", "parser", ".", "add_argument", "(", "\"--ngpus\"", ",", "default", "=", "8", ",", "type", "=", "int", ",", "help", "=", "\"Number of gpus to request on each node\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--nodes\"", ",", "default", "=", "2", ",", "type", "=", "int", ",", "help", "=", "\"Number of nodes to request\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--timeout\"", ",", "default", "=", "2800", ",", "type", "=", "int", ",", "help", "=", "\"Duration of the job\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--partition\"", ",", "default", "=", "\"learnfair\"", ",", "type", "=", "str", ",", "help", "=", "\"Partition where to submit\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--use_volta32\"", ",", "action", "=", "'store_true'", ",", "help", "=", "\"Big models? Use this\"", ")", "\n", "parser", ".", "add_argument", "(", "'--comment'", ",", "default", "=", "\"\"", ",", "type", "=", "str", ",", "\n", "help", "=", "'Comment to pass to scheduler, e.g. priority message'", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.run_with_submitit.get_shared_folder": [[40, 47], ["os.getenv", "pathlib.Path().is_dir", "RuntimeError", "pathlib.Path", "pathlib.Path.mkdir", "pathlib.Path"], "function", ["None"], ["", "def", "get_shared_folder", "(", ")", "->", "Path", ":", "\n", "    ", "user", "=", "os", ".", "getenv", "(", "\"USER\"", ")", "\n", "if", "Path", "(", "\"/checkpoint/\"", ")", ".", "is_dir", "(", ")", ":", "\n", "        ", "p", "=", "Path", "(", "f\"/checkpoint/{user}/experiments\"", ")", "\n", "p", ".", "mkdir", "(", "exist_ok", "=", "True", ")", "\n", "return", "p", "\n", "", "raise", "RuntimeError", "(", "\"No shared folder available\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.run_with_submitit.get_init_file": [[49, 56], ["os.makedirs", "init_file.exists", "str", "run_with_submitit.get_shared_folder", "os.remove", "run_with_submitit.get_shared_folder", "str", "uuid.uuid4"], "function", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.run_with_submitit.get_shared_folder", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.run_with_submitit.get_shared_folder"], ["", "def", "get_init_file", "(", ")", ":", "\n", "# Init file must not exist, but it's parent dir must exist.", "\n", "    ", "os", ".", "makedirs", "(", "str", "(", "get_shared_folder", "(", ")", ")", ",", "exist_ok", "=", "True", ")", "\n", "init_file", "=", "get_shared_folder", "(", ")", "/", "f\"{uuid.uuid4().hex}_init\"", "\n", "if", "init_file", ".", "exists", "(", ")", ":", "\n", "        ", "os", ".", "remove", "(", "str", "(", "init_file", ")", ")", "\n", "", "return", "init_file", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.run_with_submitit.main": [[89, 129], ["run_with_submitit.parse_args", "pathlib.Path().mkdir", "submitit.AutoExecutor", "submitit.AutoExecutor.update_parameters", "submitit.AutoExecutor.update_parameters", "get_init_file().as_uri", "run_with_submitit.Trainer", "submitit.AutoExecutor.submit", "print", "print", "run_with_submitit.get_shared_folder", "pathlib.Path", "run_with_submitit.get_init_file"], "function", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.run_with_submitit.parse_args", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.run_with_submitit.get_shared_folder", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.run_with_submitit.get_init_file"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "if", "args", ".", "output_dir", "==", "\"\"", ":", "\n", "        ", "args", ".", "output_dir", "=", "get_shared_folder", "(", ")", "/", "\"%j\"", "\n", "", "Path", "(", "args", ".", "output_dir", ")", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "executor", "=", "submitit", ".", "AutoExecutor", "(", "folder", "=", "args", ".", "output_dir", ",", "slurm_max_num_timeout", "=", "30", ")", "\n", "\n", "num_gpus_per_node", "=", "args", ".", "ngpus", "\n", "nodes", "=", "args", ".", "nodes", "\n", "timeout_min", "=", "args", ".", "timeout", "\n", "\n", "partition", "=", "args", ".", "partition", "\n", "kwargs", "=", "{", "}", "\n", "if", "args", ".", "use_volta32", ":", "\n", "        ", "kwargs", "[", "'slurm_constraint'", "]", "=", "'volta32gb'", "\n", "", "if", "args", ".", "comment", ":", "\n", "        ", "kwargs", "[", "'slurm_comment'", "]", "=", "args", ".", "comment", "\n", "\n", "", "executor", ".", "update_parameters", "(", "\n", "mem_gb", "=", "40", "*", "num_gpus_per_node", ",", "\n", "gpus_per_node", "=", "num_gpus_per_node", ",", "\n", "tasks_per_node", "=", "num_gpus_per_node", ",", "# one task per GPU", "\n", "cpus_per_task", "=", "10", ",", "\n", "nodes", "=", "nodes", ",", "\n", "timeout_min", "=", "timeout_min", ",", "# max is 60 * 72", "\n", "# Below are cluster dependent parameters", "\n", "slurm_partition", "=", "partition", ",", "\n", "slurm_signal_delay_s", "=", "120", ",", "\n", "**", "kwargs", "\n", ")", "\n", "\n", "executor", ".", "update_parameters", "(", "name", "=", "\"dino\"", ")", "\n", "\n", "args", ".", "dist_url", "=", "get_init_file", "(", ")", ".", "as_uri", "(", ")", "\n", "\n", "trainer", "=", "Trainer", "(", "args", ")", "\n", "job", "=", "executor", ".", "submit", "(", "trainer", ")", "\n", "\n", "print", "(", "f\"Submitted job_id: {job.job_id}\"", ")", "\n", "print", "(", "f\"Logs and checkpoints will be saved at: {args.output_dir}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.transreid_pytorch.train.set_seed": [[16, 24], ["torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "numpy.random.seed", "random.seed"], "function", ["None"], ["def", "set_seed", "(", "seed", ")", ":", "\n", "    ", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.model.make_model.Backbone.__init__": [[64, 114], ["torch.Module.__init__", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "make_model.Backbone.classifier.apply", "torch.BatchNorm1d", "torch.BatchNorm1d", "make_model.Backbone.bottleneck.bias.requires_grad_", "make_model.Backbone.bottleneck.apply", "backbones.resnet.ResNet", "print", "make_model.Backbone.base.load_param", "print", "torch.Linear", "torch.Linear", "make_model.Backbone.fcneck.apply", "torch.Dropout", "torch.Dropout", "make_model.Backbone.load_param", "backbones.resnet_ibn_a.resnet50_ibn_a", "print", "print"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.softmax_loss.LabelSmoothingCrossEntropy.__init__", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.vit_pytorch.TransReID.load_param", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.vit_pytorch.TransReID.load_param", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.resnet_ibn_a.resnet50_ibn_a"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ",", "cfg", ")", ":", "\n", "        ", "super", "(", "Backbone", ",", "self", ")", ".", "__init__", "(", ")", "\n", "last_stride", "=", "cfg", ".", "MODEL", ".", "LAST_STRIDE", "\n", "model_path", "=", "cfg", ".", "MODEL", ".", "PRETRAIN_PATH", "\n", "model_name", "=", "cfg", ".", "MODEL", ".", "NAME", "\n", "pretrain_choice", "=", "cfg", ".", "MODEL", ".", "PRETRAIN_CHOICE", "\n", "self", ".", "cos_layer", "=", "cfg", ".", "MODEL", ".", "COS_LAYER", "\n", "self", ".", "neck", "=", "cfg", ".", "MODEL", ".", "NECK", "\n", "self", ".", "neck_feat", "=", "cfg", ".", "TEST", ".", "NECK_FEAT", "\n", "self", ".", "reduce_feat_dim", "=", "cfg", ".", "MODEL", ".", "REDUCE_FEAT_DIM", "\n", "self", ".", "feat_dim", "=", "cfg", ".", "MODEL", ".", "FEAT_DIM", "\n", "self", ".", "dropout_rate", "=", "cfg", ".", "MODEL", ".", "DROPOUT_RATE", "\n", "\n", "if", "model_name", "==", "'resnet50'", ":", "\n", "            ", "self", ".", "in_planes", "=", "2048", "\n", "self", ".", "base", "=", "ResNet", "(", "last_stride", "=", "last_stride", ",", "\n", "block", "=", "Bottleneck", ",", "\n", "layers", "=", "[", "3", ",", "4", ",", "6", ",", "3", "]", ")", "\n", "print", "(", "'using resnet50 as a backbone'", ")", "\n", "", "elif", "model_name", "==", "'resnet50_ibn_a'", ":", "\n", "            ", "self", ".", "in_planes", "=", "2048", "\n", "self", ".", "base", "=", "resnet50_ibn_a", "(", "last_stride", ")", "\n", "print", "(", "'using resnet50_ibn_a as a backbone'", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'unsupported backbone! but got {}'", ".", "format", "(", "model_name", ")", ")", "\n", "\n", "", "if", "pretrain_choice", "==", "'imagenet'", ":", "\n", "            ", "self", ".", "base", ".", "load_param", "(", "model_path", ")", "\n", "print", "(", "'Loading pretrained ImageNet model......from {}'", ".", "format", "(", "model_path", ")", ")", "\n", "\n", "\n", "", "self", ".", "gap", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "if", "self", ".", "reduce_feat_dim", ":", "\n", "            ", "self", ".", "fcneck", "=", "nn", ".", "Linear", "(", "self", ".", "in_planes", ",", "self", ".", "feat_dim", ",", "bias", "=", "False", ")", "\n", "self", ".", "fcneck", ".", "apply", "(", "weights_init_xavier", ")", "\n", "self", ".", "in_planes", "=", "cfg", ".", "MODEL", ".", "FEAT_DIM", "\n", "\n", "", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "self", ".", "in_planes", ",", "self", ".", "num_classes", ",", "bias", "=", "False", ")", "\n", "self", ".", "classifier", ".", "apply", "(", "weights_init_classifier", ")", "\n", "\n", "self", ".", "bottleneck", "=", "nn", ".", "BatchNorm1d", "(", "self", ".", "in_planes", ")", "\n", "self", ".", "bottleneck", ".", "bias", ".", "requires_grad_", "(", "False", ")", "\n", "self", ".", "bottleneck", ".", "apply", "(", "weights_init_kaiming", ")", "\n", "\n", "if", "self", ".", "dropout_rate", ">", "0", ":", "\n", "            ", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "self", ".", "dropout_rate", ")", "\n", "\n", "", "if", "pretrain_choice", "==", "'self'", ":", "\n", "            ", "self", ".", "load_param", "(", "model_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.model.make_model.Backbone.forward": [[116, 141], ["make_model.Backbone.base", "torch.functional.avg_pool2d", "torch.functional.avg_pool2d", "make_model.Backbone.view", "make_model.Backbone.fcneck", "make_model.Backbone.dropout", "make_model.Backbone.bottleneck", "make_model.Backbone.arcface", "make_model.Backbone.classifier"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "label", "=", "None", ",", "**", "kwargs", ")", ":", "# label is unused if self.cos_layer == 'no'", "\n", "        ", "x", "=", "self", ".", "base", "(", "x", ")", "\n", "global_feat", "=", "nn", ".", "functional", ".", "avg_pool2d", "(", "x", ",", "x", ".", "shape", "[", "2", ":", "4", "]", ")", "\n", "global_feat", "=", "global_feat", ".", "view", "(", "global_feat", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "# flatten to (bs, 2048)", "\n", "if", "self", ".", "reduce_feat_dim", ":", "\n", "            ", "global_feat", "=", "self", ".", "fcneck", "(", "global_feat", ")", "\n", "\n", "", "if", "self", ".", "neck", "==", "'no'", ":", "\n", "            ", "feat", "=", "global_feat", "\n", "", "elif", "self", ".", "neck", "==", "'bnneck'", ":", "\n", "            ", "feat", "=", "self", ".", "bottleneck", "(", "global_feat", ")", "\n", "", "if", "self", ".", "dropout_rate", ">", "0", ":", "\n", "            ", "feat", "=", "self", ".", "dropout", "(", "feat", ")", "\n", "\n", "", "if", "self", ".", "training", ":", "\n", "            ", "if", "self", ".", "cos_layer", ":", "\n", "                ", "cls_score", "=", "self", ".", "arcface", "(", "feat", ",", "label", ")", "\n", "", "else", ":", "\n", "                ", "cls_score", "=", "self", ".", "classifier", "(", "feat", ")", "\n", "", "return", "cls_score", ",", "global_feat", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "neck_feat", "==", "'after'", ":", "\n", "                ", "return", "feat", "\n", "", "else", ":", "\n", "                ", "return", "global_feat", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.model.make_model.Backbone.load_param": [[142, 154], ["torch.load", "torch.load", "torch.load", "torch.load", "print", "[].copy_", "[].copy_", "make_model.Backbone.state_dict", "make_model.Backbone.state_dict", "i.replace"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.solver.scheduler.Scheduler.state_dict", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.solver.scheduler.Scheduler.state_dict"], ["", "", "", "def", "load_param", "(", "self", ",", "trained_path", ")", ":", "\n", "        ", "param_dict", "=", "torch", ".", "load", "(", "trained_path", ")", "\n", "if", "'state_dict'", "in", "param_dict", ":", "\n", "            ", "param_dict", "=", "param_dict", "[", "'state_dict'", "]", "\n", "", "for", "i", "in", "param_dict", ":", "\n", "            ", "if", "'classifier'", "in", "i", ":", "\n", "                ", "continue", "\n", "", "elif", "'module'", "in", "i", ":", "\n", "                ", "self", ".", "state_dict", "(", ")", "[", "i", ".", "replace", "(", "'module.'", ",", "''", ")", "]", ".", "copy_", "(", "param_dict", "[", "i", "]", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "state_dict", "(", ")", "[", "i", "]", ".", "copy_", "(", "param_dict", "[", "i", "]", ")", "\n", "", "", "print", "(", "'Loading pretrained model from {}'", ".", "format", "(", "trained_path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.model.make_model.build_transformer.__init__": [[166, 230], ["torch.Module.__init__", "print", "torch.BatchNorm1d", "torch.BatchNorm1d", "make_model.build_transformer.bottleneck.bias.requires_grad_", "make_model.build_transformer.bottleneck.apply", "torch.Dropout", "torch.Dropout", "make_model.build_transformer.base.load_param", "print", "print", "loss.metric_learning.Arcface", "make_model.build_transformer.load_param", "print", "loss.metric_learning.Cosface", "print", "loss.metric_learning.AMSoftmax", "print", "loss.metric_learning.CircleLoss", "torch.Linear", "torch.Linear", "make_model.build_transformer.classifier.apply", "torch.Linear", "torch.Linear", "make_model.build_transformer.fcneck.apply"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.softmax_loss.LabelSmoothingCrossEntropy.__init__", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.vit_pytorch.TransReID.load_param", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.vit_pytorch.TransReID.load_param"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ",", "camera_num", ",", "view_num", ",", "cfg", ",", "factory", ")", ":", "\n", "        ", "super", "(", "build_transformer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "last_stride", "=", "cfg", ".", "MODEL", ".", "LAST_STRIDE", "\n", "model_path", "=", "cfg", ".", "MODEL", ".", "PRETRAIN_PATH", "\n", "model_name", "=", "cfg", ".", "MODEL", ".", "NAME", "\n", "pretrain_choice", "=", "cfg", ".", "MODEL", ".", "PRETRAIN_CHOICE", "\n", "self", ".", "cos_layer", "=", "cfg", ".", "MODEL", ".", "COS_LAYER", "\n", "self", ".", "neck", "=", "cfg", ".", "MODEL", ".", "NECK", "\n", "self", ".", "neck_feat", "=", "cfg", ".", "TEST", ".", "NECK_FEAT", "\n", "self", ".", "reduce_feat_dim", "=", "cfg", ".", "MODEL", ".", "REDUCE_FEAT_DIM", "\n", "self", ".", "feat_dim", "=", "cfg", ".", "MODEL", ".", "FEAT_DIM", "\n", "self", ".", "dropout_rate", "=", "cfg", ".", "MODEL", ".", "DROPOUT_RATE", "\n", "\n", "print", "(", "'using Transformer_type: {} as a backbone'", ".", "format", "(", "cfg", ".", "MODEL", ".", "TRANSFORMER_TYPE", ")", ")", "\n", "\n", "if", "cfg", ".", "MODEL", ".", "SIE_CAMERA", ":", "\n", "            ", "camera_num", "=", "camera_num", "\n", "", "else", ":", "\n", "            ", "camera_num", "=", "0", "\n", "", "if", "cfg", ".", "MODEL", ".", "SIE_VIEW", ":", "\n", "            ", "view_num", "=", "view_num", "\n", "", "else", ":", "\n", "            ", "view_num", "=", "0", "\n", "\n", "", "self", ".", "base", "=", "factory", "[", "cfg", ".", "MODEL", ".", "TRANSFORMER_TYPE", "]", "(", "img_size", "=", "cfg", ".", "INPUT", ".", "SIZE_TRAIN", ",", "sie_xishu", "=", "cfg", ".", "MODEL", ".", "SIE_COE", ",", "camera", "=", "camera_num", ",", "view", "=", "view_num", ",", "stride_size", "=", "cfg", ".", "MODEL", ".", "STRIDE_SIZE", ",", "drop_path_rate", "=", "cfg", ".", "MODEL", ".", "DROP_PATH", ",", "drop_rate", "=", "cfg", ".", "MODEL", ".", "DROP_OUT", ",", "attn_drop_rate", "=", "cfg", ".", "MODEL", ".", "ATT_DROP_RATE", ",", "gem_pool", "=", "cfg", ".", "MODEL", ".", "GEM_POOLING", ",", "stem_conv", "=", "cfg", ".", "MODEL", ".", "STEM_CONV", ")", "\n", "self", ".", "in_planes", "=", "self", ".", "base", ".", "in_planes", "\n", "if", "pretrain_choice", "==", "'imagenet'", ":", "\n", "            ", "self", ".", "base", ".", "load_param", "(", "model_path", ",", "hw_ratio", "=", "cfg", ".", "MODEL", ".", "PRETRAIN_HW_RATIO", ")", "\n", "print", "(", "'Loading pretrained ImageNet model......from {}'", ".", "format", "(", "model_path", ")", ")", "\n", "\n", "", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "ID_LOSS_TYPE", "=", "cfg", ".", "MODEL", ".", "ID_LOSS_TYPE", "\n", "if", "self", ".", "ID_LOSS_TYPE", "==", "'arcface'", ":", "\n", "            ", "print", "(", "'using {} with s:{}, m: {}'", ".", "format", "(", "self", ".", "ID_LOSS_TYPE", ",", "cfg", ".", "SOLVER", ".", "COSINE_SCALE", ",", "cfg", ".", "SOLVER", ".", "COSINE_MARGIN", ")", ")", "\n", "self", ".", "classifier", "=", "Arcface", "(", "self", ".", "in_planes", ",", "self", ".", "num_classes", ",", "\n", "s", "=", "cfg", ".", "SOLVER", ".", "COSINE_SCALE", ",", "m", "=", "cfg", ".", "SOLVER", ".", "COSINE_MARGIN", ")", "\n", "", "elif", "self", ".", "ID_LOSS_TYPE", "==", "'cosface'", ":", "\n", "            ", "print", "(", "'using {} with s:{}, m: {}'", ".", "format", "(", "self", ".", "ID_LOSS_TYPE", ",", "cfg", ".", "SOLVER", ".", "COSINE_SCALE", ",", "cfg", ".", "SOLVER", ".", "COSINE_MARGIN", ")", ")", "\n", "self", ".", "classifier", "=", "Cosface", "(", "self", ".", "in_planes", ",", "self", ".", "num_classes", ",", "\n", "s", "=", "cfg", ".", "SOLVER", ".", "COSINE_SCALE", ",", "m", "=", "cfg", ".", "SOLVER", ".", "COSINE_MARGIN", ")", "\n", "", "elif", "self", ".", "ID_LOSS_TYPE", "==", "'amsoftmax'", ":", "\n", "            ", "print", "(", "'using {} with s:{}, m: {}'", ".", "format", "(", "self", ".", "ID_LOSS_TYPE", ",", "cfg", ".", "SOLVER", ".", "COSINE_SCALE", ",", "cfg", ".", "SOLVER", ".", "COSINE_MARGIN", ")", ")", "\n", "self", ".", "classifier", "=", "AMSoftmax", "(", "self", ".", "in_planes", ",", "self", ".", "num_classes", ",", "\n", "s", "=", "cfg", ".", "SOLVER", ".", "COSINE_SCALE", ",", "m", "=", "cfg", ".", "SOLVER", ".", "COSINE_MARGIN", ")", "\n", "", "elif", "self", ".", "ID_LOSS_TYPE", "==", "'circle'", ":", "\n", "            ", "print", "(", "'using {} with s:{}, m: {}'", ".", "format", "(", "self", ".", "ID_LOSS_TYPE", ",", "cfg", ".", "SOLVER", ".", "COSINE_SCALE", ",", "cfg", ".", "SOLVER", ".", "COSINE_MARGIN", ")", ")", "\n", "self", ".", "classifier", "=", "CircleLoss", "(", "self", ".", "in_planes", ",", "self", ".", "num_classes", ",", "\n", "s", "=", "cfg", ".", "SOLVER", ".", "COSINE_SCALE", ",", "m", "=", "cfg", ".", "SOLVER", ".", "COSINE_MARGIN", ")", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "reduce_feat_dim", ":", "\n", "                ", "self", ".", "fcneck", "=", "nn", ".", "Linear", "(", "self", ".", "in_planes", ",", "self", ".", "feat_dim", ",", "bias", "=", "False", ")", "\n", "self", ".", "fcneck", ".", "apply", "(", "weights_init_xavier", ")", "\n", "self", ".", "in_planes", "=", "cfg", ".", "MODEL", ".", "FEAT_DIM", "\n", "", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "self", ".", "in_planes", ",", "self", ".", "num_classes", ",", "bias", "=", "False", ")", "\n", "self", ".", "classifier", ".", "apply", "(", "weights_init_classifier", ")", "\n", "\n", "", "self", ".", "bottleneck", "=", "nn", ".", "BatchNorm1d", "(", "self", ".", "in_planes", ")", "\n", "self", ".", "bottleneck", ".", "bias", ".", "requires_grad_", "(", "False", ")", "\n", "self", ".", "bottleneck", ".", "apply", "(", "weights_init_kaiming", ")", "\n", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "self", ".", "dropout_rate", ")", "\n", "\n", "if", "pretrain_choice", "==", "'self'", ":", "\n", "            ", "self", ".", "load_param", "(", "model_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.model.make_model.build_transformer.forward": [[231, 252], ["make_model.build_transformer.base", "make_model.build_transformer.bottleneck", "make_model.build_transformer.dropout", "make_model.build_transformer.fcneck", "make_model.build_transformer.classifier", "make_model.build_transformer.classifier"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "label", "=", "None", ",", "cam_label", "=", "None", ",", "view_label", "=", "None", ")", ":", "\n", "        ", "global_feat", "=", "self", ".", "base", "(", "x", ",", "cam_label", "=", "cam_label", ",", "view_label", "=", "view_label", ")", "\n", "if", "self", ".", "reduce_feat_dim", ":", "\n", "            ", "global_feat", "=", "self", ".", "fcneck", "(", "global_feat", ")", "\n", "", "feat", "=", "self", ".", "bottleneck", "(", "global_feat", ")", "\n", "feat_cls", "=", "self", ".", "dropout", "(", "feat", ")", "\n", "\n", "if", "self", ".", "training", ":", "\n", "            ", "if", "self", ".", "ID_LOSS_TYPE", "in", "(", "'arcface'", ",", "'cosface'", ",", "'amsoftmax'", ",", "'circle'", ")", ":", "\n", "                ", "cls_score", "=", "self", ".", "classifier", "(", "feat_cls", ",", "label", ")", "\n", "", "else", ":", "\n", "                ", "cls_score", "=", "self", ".", "classifier", "(", "feat_cls", ")", "\n", "\n", "", "return", "cls_score", ",", "global_feat", "# global feature for triplet loss", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "neck_feat", "==", "'after'", ":", "\n", "# print(\"Test with feature after BN\")", "\n", "                ", "return", "feat", "\n", "", "else", ":", "\n", "# print(\"Test with feature before BN\")", "\n", "                ", "return", "global_feat", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.model.make_model.build_transformer.load_param": [[253, 261], ["torch.load", "torch.load", "torch.load", "torch.load", "print", "[].copy_", "make_model.build_transformer.state_dict", "i.replace"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.solver.scheduler.Scheduler.state_dict"], ["", "", "", "def", "load_param", "(", "self", ",", "trained_path", ")", ":", "\n", "        ", "param_dict", "=", "torch", ".", "load", "(", "trained_path", ",", "map_location", "=", "'cpu'", ")", "\n", "for", "i", "in", "param_dict", ":", "\n", "            ", "try", ":", "\n", "                ", "self", ".", "state_dict", "(", ")", "[", "i", ".", "replace", "(", "'module.'", ",", "''", ")", "]", ".", "copy_", "(", "param_dict", "[", "i", "]", ")", "\n", "", "except", ":", "\n", "                ", "continue", "\n", "", "", "print", "(", "'Loading pretrained model from {}'", ".", "format", "(", "trained_path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.model.make_model.build_transformer_local.__init__": [[264, 354], ["torch.Module.__init__", "print", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.BatchNorm1d", "torch.BatchNorm1d", "make_model.build_transformer_local.bottleneck.bias.requires_grad_", "make_model.build_transformer_local.bottleneck.apply", "torch.BatchNorm1d", "torch.BatchNorm1d", "make_model.build_transformer_local.bottleneck_1.bias.requires_grad_", "make_model.build_transformer_local.bottleneck_1.apply", "torch.BatchNorm1d", "torch.BatchNorm1d", "make_model.build_transformer_local.bottleneck_2.bias.requires_grad_", "make_model.build_transformer_local.bottleneck_2.apply", "torch.BatchNorm1d", "torch.BatchNorm1d", "make_model.build_transformer_local.bottleneck_3.bias.requires_grad_", "make_model.build_transformer_local.bottleneck_3.apply", "torch.BatchNorm1d", "torch.BatchNorm1d", "make_model.build_transformer_local.bottleneck_4.bias.requires_grad_", "make_model.build_transformer_local.bottleneck_4.apply", "print", "print", "print", "make_model.build_transformer_local.base.load_param", "print", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "print", "loss.metric_learning.Arcface", "print", "loss.metric_learning.Cosface", "print", "loss.metric_learning.AMSoftmax", "print", "loss.metric_learning.CircleLoss", "torch.Linear", "torch.Linear", "make_model.build_transformer_local.classifier.apply", "torch.Linear", "torch.Linear", "make_model.build_transformer_local.classifier_1.apply", "torch.Linear", "torch.Linear", "make_model.build_transformer_local.classifier_2.apply", "torch.Linear", "torch.Linear", "make_model.build_transformer_local.classifier_3.apply", "torch.Linear", "torch.Linear", "make_model.build_transformer_local.classifier_4.apply"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.softmax_loss.LabelSmoothingCrossEntropy.__init__", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.vit_pytorch.TransReID.load_param"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ",", "camera_num", ",", "view_num", ",", "cfg", ",", "factory", ",", "rearrange", ")", ":", "\n", "        ", "super", "(", "build_transformer_local", ",", "self", ")", ".", "__init__", "(", ")", "\n", "model_path", "=", "cfg", ".", "MODEL", ".", "PRETRAIN_PATH", "\n", "pretrain_choice", "=", "cfg", ".", "MODEL", ".", "PRETRAIN_CHOICE", "\n", "self", ".", "cos_layer", "=", "cfg", ".", "MODEL", ".", "COS_LAYER", "\n", "self", ".", "neck", "=", "cfg", ".", "MODEL", ".", "NECK", "\n", "self", ".", "neck_feat", "=", "cfg", ".", "TEST", ".", "NECK_FEAT", "\n", "\n", "print", "(", "'using Transformer_type: {} as a backbone'", ".", "format", "(", "cfg", ".", "MODEL", ".", "TRANSFORMER_TYPE", ")", ")", "\n", "\n", "if", "cfg", ".", "MODEL", ".", "SIE_CAMERA", ":", "\n", "            ", "camera_num", "=", "camera_num", "\n", "", "else", ":", "\n", "            ", "camera_num", "=", "0", "\n", "\n", "", "if", "cfg", ".", "MODEL", ".", "SIE_VIEW", ":", "\n", "            ", "view_num", "=", "view_num", "\n", "", "else", ":", "\n", "            ", "view_num", "=", "0", "\n", "\n", "", "self", ".", "base", "=", "factory", "[", "cfg", ".", "MODEL", ".", "TRANSFORMER_TYPE", "]", "(", "img_size", "=", "cfg", ".", "INPUT", ".", "SIZE_TRAIN", ",", "sie_xishu", "=", "cfg", ".", "MODEL", ".", "SIE_COE", ",", "local_feature", "=", "cfg", ".", "MODEL", ".", "JPM", ",", "camera", "=", "camera_num", ",", "view", "=", "view_num", ",", "stride_size", "=", "cfg", ".", "MODEL", ".", "STRIDE_SIZE", ",", "drop_path_rate", "=", "cfg", ".", "MODEL", ".", "DROP_PATH", ")", "\n", "self", ".", "in_planes", "=", "self", ".", "base", ".", "in_planes", "\n", "if", "pretrain_choice", "==", "'imagenet'", ":", "\n", "            ", "self", ".", "base", ".", "load_param", "(", "model_path", ",", "hw_ratio", "=", "cfg", ".", "MODEL", ".", "PRETRAIN_HW_RATIO", ")", "\n", "print", "(", "'Loading pretrained ImageNet model......from {}'", ".", "format", "(", "model_path", ")", ")", "\n", "\n", "", "block", "=", "self", ".", "base", ".", "blocks", "[", "-", "1", "]", "\n", "layer_norm", "=", "self", ".", "base", ".", "norm", "\n", "self", ".", "b1", "=", "nn", ".", "Sequential", "(", "\n", "copy", ".", "deepcopy", "(", "block", ")", ",", "\n", "copy", ".", "deepcopy", "(", "layer_norm", ")", "\n", ")", "\n", "self", ".", "b2", "=", "nn", ".", "Sequential", "(", "\n", "copy", ".", "deepcopy", "(", "block", ")", ",", "\n", "copy", ".", "deepcopy", "(", "layer_norm", ")", "\n", ")", "\n", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "ID_LOSS_TYPE", "=", "cfg", ".", "MODEL", ".", "ID_LOSS_TYPE", "\n", "if", "self", ".", "ID_LOSS_TYPE", "==", "'arcface'", ":", "\n", "            ", "print", "(", "'using {} with s:{}, m: {}'", ".", "format", "(", "self", ".", "ID_LOSS_TYPE", ",", "cfg", ".", "SOLVER", ".", "COSINE_SCALE", ",", "cfg", ".", "SOLVER", ".", "COSINE_MARGIN", ")", ")", "\n", "self", ".", "classifier", "=", "Arcface", "(", "self", ".", "in_planes", ",", "self", ".", "num_classes", ",", "\n", "s", "=", "cfg", ".", "SOLVER", ".", "COSINE_SCALE", ",", "m", "=", "cfg", ".", "SOLVER", ".", "COSINE_MARGIN", ")", "\n", "", "elif", "self", ".", "ID_LOSS_TYPE", "==", "'cosface'", ":", "\n", "            ", "print", "(", "'using {} with s:{}, m: {}'", ".", "format", "(", "self", ".", "ID_LOSS_TYPE", ",", "cfg", ".", "SOLVER", ".", "COSINE_SCALE", ",", "cfg", ".", "SOLVER", ".", "COSINE_MARGIN", ")", ")", "\n", "self", ".", "classifier", "=", "Cosface", "(", "self", ".", "in_planes", ",", "self", ".", "num_classes", ",", "\n", "s", "=", "cfg", ".", "SOLVER", ".", "COSINE_SCALE", ",", "m", "=", "cfg", ".", "SOLVER", ".", "COSINE_MARGIN", ")", "\n", "", "elif", "self", ".", "ID_LOSS_TYPE", "==", "'amsoftmax'", ":", "\n", "            ", "print", "(", "'using {} with s:{}, m: {}'", ".", "format", "(", "self", ".", "ID_LOSS_TYPE", ",", "cfg", ".", "SOLVER", ".", "COSINE_SCALE", ",", "cfg", ".", "SOLVER", ".", "COSINE_MARGIN", ")", ")", "\n", "self", ".", "classifier", "=", "AMSoftmax", "(", "self", ".", "in_planes", ",", "self", ".", "num_classes", ",", "\n", "s", "=", "cfg", ".", "SOLVER", ".", "COSINE_SCALE", ",", "m", "=", "cfg", ".", "SOLVER", ".", "COSINE_MARGIN", ")", "\n", "", "elif", "self", ".", "ID_LOSS_TYPE", "==", "'circle'", ":", "\n", "            ", "print", "(", "'using {} with s:{}, m: {}'", ".", "format", "(", "self", ".", "ID_LOSS_TYPE", ",", "cfg", ".", "SOLVER", ".", "COSINE_SCALE", ",", "cfg", ".", "SOLVER", ".", "COSINE_MARGIN", ")", ")", "\n", "self", ".", "classifier", "=", "CircleLoss", "(", "self", ".", "in_planes", ",", "self", ".", "num_classes", ",", "\n", "s", "=", "cfg", ".", "SOLVER", ".", "COSINE_SCALE", ",", "m", "=", "cfg", ".", "SOLVER", ".", "COSINE_MARGIN", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "self", ".", "in_planes", ",", "self", ".", "num_classes", ",", "bias", "=", "False", ")", "\n", "self", ".", "classifier", ".", "apply", "(", "weights_init_classifier", ")", "\n", "self", ".", "classifier_1", "=", "nn", ".", "Linear", "(", "self", ".", "in_planes", ",", "self", ".", "num_classes", ",", "bias", "=", "False", ")", "\n", "self", ".", "classifier_1", ".", "apply", "(", "weights_init_classifier", ")", "\n", "self", ".", "classifier_2", "=", "nn", ".", "Linear", "(", "self", ".", "in_planes", ",", "self", ".", "num_classes", ",", "bias", "=", "False", ")", "\n", "self", ".", "classifier_2", ".", "apply", "(", "weights_init_classifier", ")", "\n", "self", ".", "classifier_3", "=", "nn", ".", "Linear", "(", "self", ".", "in_planes", ",", "self", ".", "num_classes", ",", "bias", "=", "False", ")", "\n", "self", ".", "classifier_3", ".", "apply", "(", "weights_init_classifier", ")", "\n", "self", ".", "classifier_4", "=", "nn", ".", "Linear", "(", "self", ".", "in_planes", ",", "self", ".", "num_classes", ",", "bias", "=", "False", ")", "\n", "self", ".", "classifier_4", ".", "apply", "(", "weights_init_classifier", ")", "\n", "\n", "", "self", ".", "bottleneck", "=", "nn", ".", "BatchNorm1d", "(", "self", ".", "in_planes", ")", "\n", "self", ".", "bottleneck", ".", "bias", ".", "requires_grad_", "(", "False", ")", "\n", "self", ".", "bottleneck", ".", "apply", "(", "weights_init_kaiming", ")", "\n", "self", ".", "bottleneck_1", "=", "nn", ".", "BatchNorm1d", "(", "self", ".", "in_planes", ")", "\n", "self", ".", "bottleneck_1", ".", "bias", ".", "requires_grad_", "(", "False", ")", "\n", "self", ".", "bottleneck_1", ".", "apply", "(", "weights_init_kaiming", ")", "\n", "self", ".", "bottleneck_2", "=", "nn", ".", "BatchNorm1d", "(", "self", ".", "in_planes", ")", "\n", "self", ".", "bottleneck_2", ".", "bias", ".", "requires_grad_", "(", "False", ")", "\n", "self", ".", "bottleneck_2", ".", "apply", "(", "weights_init_kaiming", ")", "\n", "self", ".", "bottleneck_3", "=", "nn", ".", "BatchNorm1d", "(", "self", ".", "in_planes", ")", "\n", "self", ".", "bottleneck_3", ".", "bias", ".", "requires_grad_", "(", "False", ")", "\n", "self", ".", "bottleneck_3", ".", "apply", "(", "weights_init_kaiming", ")", "\n", "self", ".", "bottleneck_4", "=", "nn", ".", "BatchNorm1d", "(", "self", ".", "in_planes", ")", "\n", "self", ".", "bottleneck_4", ".", "bias", ".", "requires_grad_", "(", "False", ")", "\n", "self", ".", "bottleneck_4", ".", "apply", "(", "weights_init_kaiming", ")", "\n", "\n", "self", ".", "shuffle_groups", "=", "cfg", ".", "MODEL", ".", "SHUFFLE_GROUP", "\n", "print", "(", "'using shuffle_groups size:{}'", ".", "format", "(", "self", ".", "shuffle_groups", ")", ")", "\n", "self", ".", "shift_num", "=", "cfg", ".", "MODEL", ".", "SHIFT_NUM", "\n", "print", "(", "'using shift_num size:{}'", ".", "format", "(", "self", ".", "shift_num", ")", ")", "\n", "self", ".", "divide_length", "=", "cfg", ".", "MODEL", ".", "DEVIDE_LENGTH", "\n", "print", "(", "'using divide_length size:{}'", ".", "format", "(", "self", ".", "divide_length", ")", ")", "\n", "self", ".", "rearrange", "=", "rearrange", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.model.make_model.build_transformer_local.forward": [[355, 419], ["make_model.build_transformer_local.base", "make_model.build_transformer_local.b1", "make_model.build_transformer_local.b2", "make_model.build_transformer_local.b2", "make_model.build_transformer_local.b2", "make_model.build_transformer_local.b2", "make_model.build_transformer_local.bottleneck", "make_model.build_transformer_local.bottleneck_1", "make_model.build_transformer_local.bottleneck_2", "make_model.build_transformer_local.bottleneck_3", "make_model.build_transformer_local.bottleneck_4", "make_model.build_transformer_local.size", "make_model.shuffle_unit", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "make_model.build_transformer_local.classifier", "make_model.build_transformer_local.classifier", "make_model.build_transformer_local.classifier_1", "make_model.build_transformer_local.classifier_2", "make_model.build_transformer_local.classifier_3", "make_model.build_transformer_local.classifier_4", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.model.make_model.shuffle_unit"], ["", "def", "forward", "(", "self", ",", "x", ",", "label", "=", "None", ",", "cam_label", "=", "None", ",", "view_label", "=", "None", ")", ":", "# label is unused if self.cos_layer == 'no'", "\n", "\n", "        ", "features", "=", "self", ".", "base", "(", "x", ",", "cam_label", "=", "cam_label", ",", "view_label", "=", "view_label", ")", "\n", "\n", "# global branch", "\n", "b1_feat", "=", "self", ".", "b1", "(", "features", ")", "# [64, 129, 768]", "\n", "global_feat", "=", "b1_feat", "[", ":", ",", "0", "]", "\n", "\n", "# JPM branch", "\n", "feature_length", "=", "features", ".", "size", "(", "1", ")", "-", "1", "\n", "patch_length", "=", "feature_length", "//", "self", ".", "divide_length", "\n", "token", "=", "features", "[", ":", ",", "0", ":", "1", "]", "\n", "\n", "if", "self", ".", "rearrange", ":", "\n", "            ", "x", "=", "shuffle_unit", "(", "features", ",", "self", ".", "shift_num", ",", "self", ".", "shuffle_groups", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "features", "[", ":", ",", "1", ":", "]", "\n", "# lf_1", "\n", "", "b1_local_feat", "=", "x", "[", ":", ",", ":", "patch_length", "]", "\n", "b1_local_feat", "=", "self", ".", "b2", "(", "torch", ".", "cat", "(", "(", "token", ",", "b1_local_feat", ")", ",", "dim", "=", "1", ")", ")", "\n", "local_feat_1", "=", "b1_local_feat", "[", ":", ",", "0", "]", "\n", "\n", "# lf_2", "\n", "b2_local_feat", "=", "x", "[", ":", ",", "patch_length", ":", "patch_length", "*", "2", "]", "\n", "b2_local_feat", "=", "self", ".", "b2", "(", "torch", ".", "cat", "(", "(", "token", ",", "b2_local_feat", ")", ",", "dim", "=", "1", ")", ")", "\n", "local_feat_2", "=", "b2_local_feat", "[", ":", ",", "0", "]", "\n", "\n", "# lf_3", "\n", "b3_local_feat", "=", "x", "[", ":", ",", "patch_length", "*", "2", ":", "patch_length", "*", "3", "]", "\n", "b3_local_feat", "=", "self", ".", "b2", "(", "torch", ".", "cat", "(", "(", "token", ",", "b3_local_feat", ")", ",", "dim", "=", "1", ")", ")", "\n", "local_feat_3", "=", "b3_local_feat", "[", ":", ",", "0", "]", "\n", "\n", "# lf_4", "\n", "b4_local_feat", "=", "x", "[", ":", ",", "patch_length", "*", "3", ":", "patch_length", "*", "4", "]", "\n", "b4_local_feat", "=", "self", ".", "b2", "(", "torch", ".", "cat", "(", "(", "token", ",", "b4_local_feat", ")", ",", "dim", "=", "1", ")", ")", "\n", "local_feat_4", "=", "b4_local_feat", "[", ":", ",", "0", "]", "\n", "\n", "feat", "=", "self", ".", "bottleneck", "(", "global_feat", ")", "\n", "\n", "local_feat_1_bn", "=", "self", ".", "bottleneck_1", "(", "local_feat_1", ")", "\n", "local_feat_2_bn", "=", "self", ".", "bottleneck_2", "(", "local_feat_2", ")", "\n", "local_feat_3_bn", "=", "self", ".", "bottleneck_3", "(", "local_feat_3", ")", "\n", "local_feat_4_bn", "=", "self", ".", "bottleneck_4", "(", "local_feat_4", ")", "\n", "\n", "if", "self", ".", "training", ":", "\n", "            ", "if", "self", ".", "ID_LOSS_TYPE", "in", "(", "'arcface'", ",", "'cosface'", ",", "'amsoftmax'", ",", "'circle'", ")", ":", "\n", "                ", "cls_score", "=", "self", ".", "classifier", "(", "feat", ",", "label", ")", "\n", "", "else", ":", "\n", "                ", "cls_score", "=", "self", ".", "classifier", "(", "feat", ")", "\n", "cls_score_1", "=", "self", ".", "classifier_1", "(", "local_feat_1_bn", ")", "\n", "cls_score_2", "=", "self", ".", "classifier_2", "(", "local_feat_2_bn", ")", "\n", "cls_score_3", "=", "self", ".", "classifier_3", "(", "local_feat_3_bn", ")", "\n", "cls_score_4", "=", "self", ".", "classifier_4", "(", "local_feat_4_bn", ")", "\n", "", "return", "[", "cls_score", ",", "cls_score_1", ",", "cls_score_2", ",", "cls_score_3", ",", "\n", "cls_score_4", "\n", "]", ",", "[", "global_feat", ",", "local_feat_1", ",", "local_feat_2", ",", "local_feat_3", ",", "\n", "local_feat_4", "]", "# global feature for triplet loss", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "neck_feat", "==", "'after'", ":", "\n", "                ", "return", "torch", ".", "cat", "(", "\n", "[", "feat", ",", "local_feat_1_bn", "/", "4", ",", "local_feat_2_bn", "/", "4", ",", "local_feat_3_bn", "/", "4", ",", "local_feat_4_bn", "/", "4", "]", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "                ", "return", "torch", ".", "cat", "(", "\n", "[", "global_feat", ",", "local_feat_1", "/", "4", ",", "local_feat_2", "/", "4", ",", "local_feat_3", "/", "4", ",", "local_feat_4", "/", "4", "]", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.model.make_model.build_transformer_local.load_param": [[420, 425], ["torch.load", "torch.load", "torch.load", "torch.load", "print", "[].copy_", "make_model.build_transformer_local.state_dict", "i.replace"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.solver.scheduler.Scheduler.state_dict"], ["", "", "", "def", "load_param", "(", "self", ",", "trained_path", ")", ":", "\n", "        ", "param_dict", "=", "torch", ".", "load", "(", "trained_path", ")", "\n", "for", "i", "in", "param_dict", ":", "\n", "            ", "self", ".", "state_dict", "(", ")", "[", "i", ".", "replace", "(", "'module.'", ",", "''", ")", "]", ".", "copy_", "(", "param_dict", "[", "i", "]", ")", "\n", "", "print", "(", "'Loading pretrained model from {}'", ".", "format", "(", "trained_path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.model.make_model.shuffle_unit": [[10, 28], ["features.size", "features.size", "torch.cat", "torch.cat", "torch.transpose().contiguous", "torch.transpose().contiguous", "x.view.view", "x.view.view", "torch.cat", "torch.cat", "x.view.view", "torch.transpose", "torch.transpose"], "function", ["None"], ["def", "shuffle_unit", "(", "features", ",", "shift", ",", "group", ",", "begin", "=", "1", ")", ":", "\n", "\n", "    ", "batchsize", "=", "features", ".", "size", "(", "0", ")", "\n", "dim", "=", "features", ".", "size", "(", "-", "1", ")", "\n", "# Shift Operation", "\n", "feature_random", "=", "torch", ".", "cat", "(", "[", "features", "[", ":", ",", "begin", "-", "1", "+", "shift", ":", "]", ",", "features", "[", ":", ",", "begin", ":", "begin", "-", "1", "+", "shift", "]", "]", ",", "dim", "=", "1", ")", "\n", "x", "=", "feature_random", "\n", "# Patch Shuffle Operation", "\n", "try", ":", "\n", "        ", "x", "=", "x", ".", "view", "(", "batchsize", ",", "group", ",", "-", "1", ",", "dim", ")", "\n", "", "except", ":", "\n", "        ", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "x", "[", ":", ",", "-", "2", ":", "-", "1", ",", ":", "]", "]", ",", "dim", "=", "1", ")", "\n", "x", "=", "x", ".", "view", "(", "batchsize", ",", "group", ",", "-", "1", ",", "dim", ")", "\n", "\n", "", "x", "=", "torch", ".", "transpose", "(", "x", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "batchsize", ",", "-", "1", ",", "dim", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.model.make_model.weights_init_xavier": [[29, 39], ["classname.find", "torch.init.xavier_uniform_", "torch.init.constant_", "classname.find", "torch.init.xavier_uniform_", "torch.init.constant_"], "function", ["None"], ["", "def", "weights_init_xavier", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ":", "\n", "        ", "nn", ".", "init", ".", "xavier_uniform_", "(", "m", ".", "weight", ")", "\n", "if", "m", ".", "bias", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0.0", ")", "\n", "", "", "elif", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "nn", ".", "init", ".", "xavier_uniform_", "(", "m", ".", "weight", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.model.make_model.weights_init_kaiming": [[40, 54], ["classname.find", "torch.init.kaiming_normal_", "torch.init.constant_", "classname.find", "torch.init.kaiming_normal_", "torch.init.constant_", "classname.find", "torch.init.constant_", "torch.init.constant_"], "function", ["None"], ["", "", "", "def", "weights_init_kaiming", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ":", "\n", "        ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "a", "=", "0", ",", "mode", "=", "'fan_out'", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0.0", ")", "\n", "\n", "", "elif", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "a", "=", "0", ",", "mode", "=", "'fan_in'", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0.0", ")", "\n", "", "", "elif", "classname", ".", "find", "(", "'BatchNorm'", ")", "!=", "-", "1", ":", "\n", "        ", "if", "m", ".", "affine", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1.0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.model.make_model.weights_init_classifier": [[55, 61], ["classname.find", "torch.init.normal_", "torch.init.constant_"], "function", ["None"], ["", "", "", "def", "weights_init_classifier", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ":", "\n", "        ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "std", "=", "0.001", ")", "\n", "if", "m", ".", "bias", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.model.make_model.make_model": [[437, 449], ["make_model.Backbone", "print", "make_model.build_transformer_local", "print", "make_model.build_transformer", "print"], "function", ["None"], ["def", "make_model", "(", "cfg", ",", "num_class", ",", "camera_num", ",", "view_num", ")", ":", "\n", "    ", "if", "cfg", ".", "MODEL", ".", "NAME", "==", "'transformer'", ":", "\n", "        ", "if", "cfg", ".", "MODEL", ".", "JPM", ":", "\n", "            ", "model", "=", "build_transformer_local", "(", "num_class", ",", "camera_num", ",", "view_num", ",", "cfg", ",", "__factory_T_type", ",", "rearrange", "=", "cfg", ".", "MODEL", ".", "RE_ARRANGE", ")", "\n", "print", "(", "'===========building transformer with JPM module ==========='", ")", "\n", "", "else", ":", "\n", "            ", "model", "=", "build_transformer", "(", "num_class", ",", "camera_num", ",", "view_num", ",", "cfg", ",", "__factory_T_type", ")", "\n", "print", "(", "'===========building transformer==========='", ")", "\n", "", "", "else", ":", "\n", "        ", "model", "=", "Backbone", "(", "num_class", ",", "cfg", ")", "\n", "print", "(", "'===========building ResNet==========='", ")", "\n", "", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.transformer_layers.PatchEmbed.__init__": [[23, 34], ["torch.nn.Module.__init__", "to_2tuple", "to_2tuple", "torch.nn.Conv2d", "norm_layer", "torch.nn.Identity"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.softmax_loss.LabelSmoothingCrossEntropy.__init__"], ["def", "__init__", "(", "self", ",", "img_size", "=", "224", ",", "patch_size", "=", "16", ",", "in_chans", "=", "3", ",", "embed_dim", "=", "768", ",", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "img_size", "=", "to_2tuple", "(", "img_size", ")", "\n", "patch_size", "=", "to_2tuple", "(", "patch_size", ")", "\n", "self", ".", "img_size", "=", "img_size", "\n", "self", ".", "patch_size", "=", "patch_size", "\n", "self", ".", "grid_size", "=", "(", "img_size", "[", "0", "]", "//", "patch_size", "[", "0", "]", ",", "img_size", "[", "1", "]", "//", "patch_size", "[", "1", "]", ")", "\n", "self", ".", "num_patches", "=", "self", ".", "grid_size", "[", "0", "]", "*", "self", ".", "grid_size", "[", "1", "]", "\n", "\n", "self", ".", "proj", "=", "nn", ".", "Conv2d", "(", "in_chans", ",", "embed_dim", ",", "kernel_size", "=", "patch_size", ",", "stride", "=", "patch_size", ")", "\n", "self", ".", "norm", "=", "norm_layer", "(", "embed_dim", ")", "if", "norm_layer", "else", "nn", ".", "Identity", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.transformer_layers.PatchEmbed.forward": [[35, 42], ["transformer_layers.PatchEmbed.proj().flatten().transpose", "transformer_layers.PatchEmbed.norm", "transformer_layers.PatchEmbed.proj().flatten", "transformer_layers.PatchEmbed.proj"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "B", ",", "C", ",", "H", ",", "W", "=", "x", ".", "shape", "\n", "assert", "H", "==", "self", ".", "img_size", "[", "0", "]", "and", "W", "==", "self", ".", "img_size", "[", "1", "]", ",", "f\"Input image size ({H}*{W}) doesn't match model ({self.img_size[0]}*{self.img_size[1]}).\"", "\n", "x", "=", "self", ".", "proj", "(", "x", ")", ".", "flatten", "(", "2", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "x", "=", "self", ".", "norm", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.transformer_layers.DropPath.__init__": [[66, 69], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.softmax_loss.LabelSmoothingCrossEntropy.__init__"], ["def", "__init__", "(", "self", ",", "drop_prob", "=", "None", ")", ":", "\n", "        ", "super", "(", "DropPath", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "drop_prob", "=", "drop_prob", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.transformer_layers.DropPath.forward": [[70, 72], ["transformer_layers.drop_path"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.vit_pytorch.drop_path"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "drop_path", "(", "x", ",", "self", ".", "drop_prob", ",", "self", ".", "training", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.transformer_layers.Mlp.__init__": [[75, 83], ["torch.nn.Module.__init__", "torch.nn.Linear", "act_layer", "torch.nn.Linear", "torch.nn.Dropout"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.softmax_loss.LabelSmoothingCrossEntropy.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "hidden_features", "=", "None", ",", "out_features", "=", "None", ",", "act_layer", "=", "nn", ".", "GELU", ",", "drop", "=", "0.", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "out_features", "=", "out_features", "or", "in_features", "\n", "hidden_features", "=", "hidden_features", "or", "in_features", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "in_features", ",", "hidden_features", ")", "\n", "self", ".", "act", "=", "act_layer", "(", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "hidden_features", ",", "out_features", ")", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "drop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.transformer_layers.Mlp.forward": [[84, 91], ["transformer_layers.Mlp.fc1", "transformer_layers.Mlp.act", "transformer_layers.Mlp.drop", "transformer_layers.Mlp.fc2", "transformer_layers.Mlp.drop"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "x", "=", "self", ".", "act", "(", "x", ")", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.transformer_layers._ntuple": [[11, 17], ["isinstance", "tuple", "itertools.repeat"], "function", ["None"], ["def", "_ntuple", "(", "n", ")", ":", "\n", "    ", "def", "parse", "(", "x", ")", ":", "\n", "        ", "if", "isinstance", "(", "x", ",", "container_abcs", ".", "Iterable", ")", ":", "\n", "            ", "return", "x", "\n", "", "return", "tuple", "(", "repeat", "(", "x", ",", "n", ")", ")", "\n", "", "return", "parse", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.transformer_layers.drop_path": [[44, 62], ["random_tensor.floor_", "torch.rand", "x.div"], "function", ["None"], ["", "", "def", "drop_path", "(", "x", ",", "drop_prob", ":", "float", "=", "0.", ",", "training", ":", "bool", "=", "False", ")", ":", "\n", "    ", "\"\"\"Drop paths (Stochastic Depth) per sample (when applied in main path of residual blocks).\n\n    This is the same as the DropConnect impl I created for EfficientNet, etc networks, however,\n    the original name is misleading as 'Drop Connect' is a different form of dropout in a separate paper...\n    See discussion: https://github.com/tensorflow/tpu/issues/494#issuecomment-532968956 ... I've opted for\n    changing the layer and argument names to 'drop path' rather than mix DropConnect as a layer name and use\n    'survival rate' as the argument.\n\n    \"\"\"", "\n", "if", "drop_prob", "==", "0.", "or", "not", "training", ":", "\n", "        ", "return", "x", "\n", "", "keep_prob", "=", "1", "-", "drop_prob", "\n", "shape", "=", "(", "x", ".", "shape", "[", "0", "]", ",", ")", "+", "(", "1", ",", ")", "*", "(", "x", ".", "ndim", "-", "1", ")", "# work with diff dim tensors, not just 2D ConvNets", "\n", "random_tensor", "=", "keep_prob", "+", "torch", ".", "rand", "(", "shape", ",", "dtype", "=", "x", ".", "dtype", ",", "device", "=", "x", ".", "device", ")", "\n", "random_tensor", ".", "floor_", "(", ")", "# binarize", "\n", "output", "=", "x", ".", "div", "(", "keep_prob", ")", "*", "random_tensor", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.transformer_layers._no_grad_trunc_normal_": [[93, 126], ["print", "torch.no_grad", "transformer_layers._no_grad_trunc_normal_.norm_cdf"], "function", ["None"], ["", "", "def", "_no_grad_trunc_normal_", "(", "tensor", ",", "mean", ",", "std", ",", "a", ",", "b", ")", ":", "\n", "# Cut & paste from PyTorch official master until it's in a few official releases - RW", "\n", "# Method based on https://people.sc.fsu.edu/~jburkardt/presentations/truncated_normal.pdf", "\n", "    ", "def", "norm_cdf", "(", "x", ")", ":", "\n", "# Computes standard normal cumulative distribution function", "\n", "        ", "return", "(", "1.", "+", "math", ".", "erf", "(", "x", "/", "math", ".", "sqrt", "(", "2.", ")", ")", ")", "/", "2.", "\n", "\n", "", "if", "(", "mean", "<", "a", "-", "2", "*", "std", ")", "or", "(", "mean", ">", "b", "+", "2", "*", "std", ")", ":", "\n", "        ", "print", "(", "\"mean is more than 2 std from [a, b] in nn.init.trunc_normal_. \"", "\n", "\"The distribution of values may be incorrect.\"", ",", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# Values are generated by using a truncated uniform distribution and", "\n", "# then using the inverse CDF for the normal distribution.", "\n", "# Get upper and lower cdf values", "\n", "        ", "l", "=", "norm_cdf", "(", "(", "a", "-", "mean", ")", "/", "std", ")", "\n", "u", "=", "norm_cdf", "(", "(", "b", "-", "mean", ")", "/", "std", ")", "\n", "\n", "# Uniformly fill tensor with values from [l, u], then translate to", "\n", "# [2l-1, 2u-1].", "\n", "tensor", ".", "uniform_", "(", "2", "*", "l", "-", "1", ",", "2", "*", "u", "-", "1", ")", "\n", "\n", "# Use inverse cdf transform for normal distribution to get truncated", "\n", "# standard normal", "\n", "tensor", ".", "erfinv_", "(", ")", "\n", "\n", "# Transform to proper mean, std", "\n", "tensor", ".", "mul_", "(", "std", "*", "math", ".", "sqrt", "(", "2.", ")", ")", "\n", "tensor", ".", "add_", "(", "mean", ")", "\n", "\n", "# Clamp to ensure it's in the proper range", "\n", "tensor", ".", "clamp_", "(", "min", "=", "a", ",", "max", "=", "b", ")", "\n", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.transformer_layers.trunc_normal_": [[128, 147], ["transformer_layers._no_grad_trunc_normal_"], "function", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.vit_pytorch._no_grad_trunc_normal_"], ["", "", "def", "trunc_normal_", "(", "tensor", ",", "mean", "=", "0.", ",", "std", "=", "1.", ",", "a", "=", "-", "2.", ",", "b", "=", "2.", ")", ":", "\n", "# type: (Tensor, float, float, float, float) -> Tensor", "\n", "    ", "r\"\"\"Fills the input Tensor with values drawn from a truncated\n    normal distribution. The values are effectively drawn from the\n    normal distribution :math:`\\mathcal{N}(\\text{mean}, \\text{std}^2)`\n    with values outside :math:`[a, b]` redrawn until they are within\n    the bounds. The method used for generating the random values works\n    best when :math:`a \\leq \\text{mean} \\leq b`.\n    Args:\n        tensor: an n-dimensional `torch.Tensor`\n        mean: the mean of the normal distribution\n        std: the standard deviation of the normal distribution\n        a: the minimum cutoff value\n        b: the maximum cutoff value\n    Examples:\n        >>> w = torch.empty(3, 5)\n        >>> nn.init.trunc_normal_(w)\n    \"\"\"", "\n", "return", "_no_grad_trunc_normal_", "(", "tensor", ",", "mean", ",", "std", ",", "a", ",", "b", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.transformer_layers._init_vit_weights": [[149, 182], ["isinstance", "n.startswith", "torch.nn.init.zeros_", "torch.nn.init.constant_", "n.startswith", "isinstance", "lecun_normal_", "isinstance", "lecun_normal_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.ones_", "torch.nn.init.xavier_uniform_", "transformer_layers.trunc_normal_", "torch.nn.init.zeros_", "torch.nn.init.normal_", "torch.nn.init.zeros_"], "function", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.vit_pytorch.trunc_normal_"], ["", "def", "_init_vit_weights", "(", "m", ",", "n", ":", "str", "=", "''", ",", "head_bias", ":", "float", "=", "0.", ",", "jax_impl", ":", "bool", "=", "False", ")", ":", "\n", "    ", "\"\"\" ViT weight initialization\n    * When called without n, head_bias, jax_impl args it will behave exactly the same\n      as my original init for compatibility with prev hparam / downstream use cases (ie DeiT).\n    * When called w/ valid n (module name) and jax_impl=True, will (hopefully) match JAX impl\n    \"\"\"", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "        ", "if", "n", ".", "startswith", "(", "'head'", ")", ":", "\n", "            ", "nn", ".", "init", ".", "zeros_", "(", "m", ".", "weight", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "head_bias", ")", "\n", "", "elif", "n", ".", "startswith", "(", "'pre_logits'", ")", ":", "\n", "            ", "lecun_normal_", "(", "m", ".", "weight", ")", "\n", "nn", ".", "init", ".", "zeros_", "(", "m", ".", "bias", ")", "\n", "", "else", ":", "\n", "            ", "if", "jax_impl", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_uniform_", "(", "m", ".", "weight", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "if", "'mlp'", "in", "n", ":", "\n", "                        ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "bias", ",", "std", "=", "1e-6", ")", "\n", "", "else", ":", "\n", "                        ", "nn", ".", "init", ".", "zeros_", "(", "m", ".", "bias", ")", "\n", "", "", "", "else", ":", "\n", "                ", "trunc_normal_", "(", "m", ".", "weight", ",", "std", "=", ".02", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "zeros_", "(", "m", ".", "bias", ")", "\n", "", "", "", "", "elif", "jax_impl", "and", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "# NOTE conv was left to pytorch default in my original init", "\n", "        ", "lecun_normal_", "(", "m", ".", "weight", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "            ", "nn", ".", "init", ".", "zeros_", "(", "m", ".", "bias", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "LayerNorm", ")", ":", "\n", "        ", "nn", ".", "init", ".", "zeros_", "(", "m", ".", "bias", ")", "\n", "nn", ".", "init", ".", "ones_", "(", "m", ".", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.transformer_layers.load_checkpoint": [[184, 249], ["torch.load", "[].startswith", "transformer_layers.load_state_dict", "isinstance", "RuntimeError", "state_dict.get", "absolute_pos_embed.size", "model.absolute_pos_embed.size", "table_pretrained.size", "table_current.size", "logger.warning", "absolute_pos_embed.view().permute", "state_dict.keys", "model.state_dict", "logger.warning", "list", "state_dict.items", "int", "int", "torch.nn.functional.interpolate", "F.interpolate.view().permute", "state_dict.keys", "absolute_pos_embed.view", "table_pretrained.permute().view", "F.interpolate.view", "table_pretrained.permute"], "function", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.solver.scheduler.Scheduler.load_state_dict", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.solver.scheduler.Scheduler.state_dict"], ["", "", "def", "load_checkpoint", "(", "model", ",", "\n", "filename", ",", "\n", "map_location", "=", "'cpu'", ",", "\n", "strict", "=", "False", ",", "\n", "logger", "=", "None", ")", ":", "\n", "    ", "\"\"\"Load checkpoint from a file or URI.\n    Args:\n        model (Module): Module to load checkpoint.\n        filename (str): Accept local filepath, URL, ``torchvision://xxx``,\n            ``open-mmlab://xxx``. Please refer to ``docs/model_zoo.md`` for\n            details.\n        map_location (str): Same as :func:`torch.load`.\n        strict (bool): Whether to allow different params for the model and\n            checkpoint.\n        logger (:mod:`logging.Logger` or None): The logger for error message.\n    Returns:\n        dict or OrderedDict: The loaded checkpoint.\n    \"\"\"", "\n", "checkpoint", "=", "torch", ".", "load", "(", "filename", ",", "map_location", "=", "map_location", ")", "\n", "# OrderedDict is a subclass of dict", "\n", "if", "not", "isinstance", "(", "checkpoint", ",", "dict", ")", ":", "\n", "        ", "raise", "RuntimeError", "(", "\n", "f'No state_dict found in checkpoint file {filename}'", ")", "\n", "# get state_dict from checkpoint", "\n", "", "if", "'state_dict'", "in", "checkpoint", ":", "\n", "        ", "state_dict", "=", "checkpoint", "[", "'state_dict'", "]", "\n", "", "elif", "'model'", "in", "checkpoint", ":", "\n", "        ", "state_dict", "=", "checkpoint", "[", "'model'", "]", "\n", "", "else", ":", "\n", "        ", "state_dict", "=", "checkpoint", "\n", "# strip prefix of state_dict", "\n", "", "if", "list", "(", "state_dict", ".", "keys", "(", ")", ")", "[", "0", "]", ".", "startswith", "(", "'module.'", ")", ":", "\n", "        ", "state_dict", "=", "{", "k", "[", "7", ":", "]", ":", "v", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", "}", "\n", "\n", "# reshape absolute position embedding", "\n", "", "if", "state_dict", ".", "get", "(", "'absolute_pos_embed'", ")", "is", "not", "None", ":", "\n", "        ", "absolute_pos_embed", "=", "state_dict", "[", "'absolute_pos_embed'", "]", "\n", "N1", ",", "L", ",", "C1", "=", "absolute_pos_embed", ".", "size", "(", ")", "\n", "N2", ",", "C2", ",", "H", ",", "W", "=", "model", ".", "absolute_pos_embed", ".", "size", "(", ")", "\n", "if", "N1", "!=", "N2", "or", "C1", "!=", "C2", "or", "L", "!=", "H", "*", "W", ":", "\n", "            ", "logger", ".", "warning", "(", "\"Error in loading absolute_pos_embed, pass\"", ")", "\n", "", "else", ":", "\n", "            ", "state_dict", "[", "'absolute_pos_embed'", "]", "=", "absolute_pos_embed", ".", "view", "(", "N2", ",", "H", ",", "W", ",", "C2", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "\n", "# interpolate position bias table if needed", "\n", "", "", "relative_position_bias_table_keys", "=", "[", "k", "for", "k", "in", "state_dict", ".", "keys", "(", ")", "if", "\"relative_position_bias_table\"", "in", "k", "]", "\n", "for", "table_key", "in", "relative_position_bias_table_keys", ":", "\n", "        ", "table_pretrained", "=", "state_dict", "[", "table_key", "]", "\n", "table_current", "=", "model", ".", "state_dict", "(", ")", "[", "table_key", "]", "\n", "L1", ",", "nH1", "=", "table_pretrained", ".", "size", "(", ")", "\n", "L2", ",", "nH2", "=", "table_current", ".", "size", "(", ")", "\n", "if", "nH1", "!=", "nH2", ":", "\n", "            ", "logger", ".", "warning", "(", "f\"Error in loading {table_key}, pass\"", ")", "\n", "", "else", ":", "\n", "            ", "if", "L1", "!=", "L2", ":", "\n", "                ", "S1", "=", "int", "(", "L1", "**", "0.5", ")", "\n", "S2", "=", "int", "(", "L2", "**", "0.5", ")", "\n", "table_pretrained_resized", "=", "F", ".", "interpolate", "(", "\n", "table_pretrained", ".", "permute", "(", "1", ",", "0", ")", ".", "view", "(", "1", ",", "nH1", ",", "S1", ",", "S1", ")", ",", "\n", "size", "=", "(", "S2", ",", "S2", ")", ",", "mode", "=", "'bicubic'", ")", "\n", "state_dict", "[", "table_key", "]", "=", "table_pretrained_resized", ".", "view", "(", "nH2", ",", "L2", ")", ".", "permute", "(", "1", ",", "0", ")", "\n", "\n", "# load state_dict", "\n", "", "", "", "load_state_dict", "(", "model", ",", "state_dict", ",", "strict", ",", "logger", ")", "\n", "return", "checkpoint", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.transformer_layers.load_state_dict": [[250, 302], ["getattr", "state_dict.copy.copy", "transformer_layers.load_state_dict.load"], "function", ["None"], ["", "def", "load_state_dict", "(", "module", ",", "state_dict", ",", "strict", "=", "False", ",", "logger", "=", "None", ")", ":", "\n", "    ", "\"\"\"Load state_dict to a module.\n    This method is modified from :meth:`torch.nn.Module.load_state_dict`.\n    Default value for ``strict`` is set to ``False`` and the message for\n    param mismatch will be shown even if strict is False.\n    Args:\n        module (Module): Module that receives the state_dict.\n        state_dict (OrderedDict): Weights.\n        strict (bool): whether to strictly enforce that the keys\n            in :attr:`state_dict` match the keys returned by this module's\n            :meth:`~torch.nn.Module.state_dict` function. Default: ``False``.\n        logger (:obj:`logging.Logger`, optional): Logger to log the error\n            message. If not specified, print function will be used.\n    \"\"\"", "\n", "unexpected_keys", "=", "[", "]", "\n", "all_missing_keys", "=", "[", "]", "\n", "err_msg", "=", "[", "]", "\n", "\n", "metadata", "=", "getattr", "(", "state_dict", ",", "'_metadata'", ",", "None", ")", "\n", "state_dict", "=", "state_dict", ".", "copy", "(", ")", "\n", "if", "metadata", "is", "not", "None", ":", "\n", "        ", "state_dict", ".", "_metadata", "=", "metadata", "\n", "\n", "# use _load_from_state_dict to enable checkpoint version control", "\n", "", "def", "load", "(", "module", ",", "prefix", "=", "''", ")", ":", "\n", "# recursively check parallel module in case that the model has a", "\n", "# complicated structure, e.g., nn.Module(nn.Module(DDP))", "\n", "#  if is_module_wrapper(module):", "\n", "#  module = module.module", "\n", "        ", "local_metadata", "=", "{", "}", "if", "metadata", "is", "None", "else", "metadata", ".", "get", "(", "\n", "prefix", "[", ":", "-", "1", "]", ",", "{", "}", ")", "\n", "module", ".", "_load_from_state_dict", "(", "state_dict", ",", "prefix", ",", "local_metadata", ",", "True", ",", "\n", "all_missing_keys", ",", "unexpected_keys", ",", "\n", "err_msg", ")", "\n", "for", "name", ",", "child", "in", "module", ".", "_modules", ".", "items", "(", ")", ":", "\n", "            ", "if", "child", "is", "not", "None", ":", "\n", "                ", "load", "(", "child", ",", "prefix", "+", "name", "+", "'.'", ")", "\n", "\n", "", "", "", "load", "(", "module", ")", "\n", "load", "=", "None", "# break load->load reference cycle", "\n", "\n", "# ignore \"num_batches_tracked\" of BN layers", "\n", "missing_keys", "=", "[", "\n", "key", "for", "key", "in", "all_missing_keys", "if", "'num_batches_tracked'", "not", "in", "key", "\n", "]", "\n", "\n", "if", "unexpected_keys", ":", "\n", "        ", "err_msg", ".", "append", "(", "'unexpected key in source '", "\n", "f'state_dict: {\", \".join(unexpected_keys)}\\n'", ")", "\n", "", "if", "missing_keys", ":", "\n", "        ", "err_msg", ".", "append", "(", "\n", "f'missing keys in source state_dict: {\", \".join(missing_keys)}\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.swin_transformer.WindowAttention.__init__": [[51, 84], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "relative_coords.permute().contiguous.permute().contiguous.permute().contiguous", "relative_coords.permute().contiguous.permute().contiguous.sum", "swin_transformer.WindowAttention.register_buffer", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "transformer_layers.trunc_normal_", "torch.Softmax", "torch.Softmax", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "relative_coords.permute().contiguous.permute().contiguous.permute"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.softmax_loss.LabelSmoothingCrossEntropy.__init__", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.vit_pytorch.trunc_normal_"], ["def", "__init__", "(", "self", ",", "dim", ",", "window_size", ",", "num_heads", ",", "qkv_bias", "=", "True", ",", "qk_scale", "=", "None", ",", "attn_drop", "=", "0.", ",", "proj_drop", "=", "0.", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "window_size", "=", "window_size", "# Wh, Ww", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "head_dim", "=", "dim", "//", "num_heads", "\n", "self", ".", "scale", "=", "qk_scale", "or", "head_dim", "**", "-", "0.5", "\n", "\n", "# define a parameter table of relative position bias", "\n", "self", ".", "relative_position_bias_table", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "zeros", "(", "(", "2", "*", "window_size", "[", "0", "]", "-", "1", ")", "*", "(", "2", "*", "window_size", "[", "1", "]", "-", "1", ")", ",", "num_heads", ")", ")", "# 2*Wh-1 * 2*Ww-1, nH", "\n", "\n", "# get pair-wise relative position index for each token inside the window", "\n", "coords_h", "=", "torch", ".", "arange", "(", "self", ".", "window_size", "[", "0", "]", ")", "\n", "coords_w", "=", "torch", ".", "arange", "(", "self", ".", "window_size", "[", "1", "]", ")", "\n", "coords", "=", "torch", ".", "stack", "(", "torch", ".", "meshgrid", "(", "[", "coords_h", ",", "coords_w", "]", ")", ")", "# 2, Wh, Ww", "\n", "coords_flatten", "=", "torch", ".", "flatten", "(", "coords", ",", "1", ")", "# 2, Wh*Ww", "\n", "relative_coords", "=", "coords_flatten", "[", ":", ",", ":", ",", "None", "]", "-", "coords_flatten", "[", ":", ",", "None", ",", ":", "]", "# 2, Wh*Ww, Wh*Ww", "\n", "relative_coords", "=", "relative_coords", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "contiguous", "(", ")", "# Wh*Ww, Wh*Ww, 2", "\n", "relative_coords", "[", ":", ",", ":", ",", "0", "]", "+=", "self", ".", "window_size", "[", "0", "]", "-", "1", "# shift to start from 0", "\n", "relative_coords", "[", ":", ",", ":", ",", "1", "]", "+=", "self", ".", "window_size", "[", "1", "]", "-", "1", "\n", "relative_coords", "[", ":", ",", ":", ",", "0", "]", "*=", "2", "*", "self", ".", "window_size", "[", "1", "]", "-", "1", "\n", "relative_position_index", "=", "relative_coords", ".", "sum", "(", "-", "1", ")", "# Wh*Ww, Wh*Ww", "\n", "self", ".", "register_buffer", "(", "\"relative_position_index\"", ",", "relative_position_index", ")", "\n", "\n", "self", ".", "qkv", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", "*", "3", ",", "bias", "=", "qkv_bias", ")", "\n", "self", ".", "attn_drop", "=", "nn", ".", "Dropout", "(", "attn_drop", ")", "\n", "self", ".", "proj", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", ")", "\n", "self", ".", "proj_drop", "=", "nn", ".", "Dropout", "(", "proj_drop", ")", "\n", "\n", "trunc_normal_", "(", "self", ".", "relative_position_bias_table", ",", "std", "=", ".02", ")", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.swin_transformer.WindowAttention.forward": [[85, 117], ["swin_transformer.WindowAttention.qkv().reshape().permute", "swin_transformer.WindowAttention.relative_position_bias_table[].view", "relative_position_bias.permute().contiguous.permute().contiguous.permute().contiguous", "swin_transformer.WindowAttention.attn_drop", "swin_transformer.WindowAttention.proj", "swin_transformer.WindowAttention.proj_drop", "k.transpose", "relative_position_bias.permute().contiguous.permute().contiguous.unsqueeze", "swin_transformer.WindowAttention.view", "swin_transformer.WindowAttention.softmax", "swin_transformer.WindowAttention.softmax", "swin_transformer.WindowAttention.qkv().reshape", "relative_position_bias.permute().contiguous.permute().contiguous.permute", "swin_transformer.WindowAttention.view", "mask.unsqueeze().unsqueeze", "swin_transformer.WindowAttention.qkv", "swin_transformer.WindowAttention.relative_position_index.view", "mask.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "mask", ":", "Optional", "[", "torch", ".", "Tensor", "]", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            x: input features with shape of (num_windows*B, N, C)\n            mask: (0/-inf) mask with shape of (num_windows, Wh*Ww, Wh*Ww) or None\n        \"\"\"", "\n", "B_", ",", "N", ",", "C", "=", "x", ".", "shape", "\n", "qkv", "=", "self", ".", "qkv", "(", "x", ")", ".", "reshape", "(", "B_", ",", "N", ",", "3", ",", "self", ".", "num_heads", ",", "C", "//", "self", ".", "num_heads", ")", ".", "permute", "(", "2", ",", "0", ",", "3", ",", "1", ",", "4", ")", "\n", "q", ",", "k", ",", "v", "=", "qkv", "[", "0", "]", ",", "qkv", "[", "1", "]", ",", "qkv", "[", "2", "]", "# make torchscript happy (cannot use tensor as tuple)", "\n", "\n", "q", "=", "q", "*", "self", ".", "scale", "\n", "attn", "=", "(", "q", "@", "k", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ")", "\n", "\n", "relative_position_bias", "=", "self", ".", "relative_position_bias_table", "[", "self", ".", "relative_position_index", ".", "view", "(", "-", "1", ")", "]", ".", "view", "(", "\n", "self", ".", "window_size", "[", "0", "]", "*", "self", ".", "window_size", "[", "1", "]", ",", "self", ".", "window_size", "[", "0", "]", "*", "self", ".", "window_size", "[", "1", "]", ",", "-", "1", ")", "# Wh*Ww,Wh*Ww,nH", "\n", "relative_position_bias", "=", "relative_position_bias", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "contiguous", "(", ")", "# nH, Wh*Ww, Wh*Ww", "\n", "attn", "=", "attn", "+", "relative_position_bias", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "if", "mask", "is", "not", "None", ":", "\n", "            ", "nW", "=", "mask", ".", "shape", "[", "0", "]", "\n", "attn", "=", "attn", ".", "view", "(", "B_", "//", "nW", ",", "nW", ",", "self", ".", "num_heads", ",", "N", ",", "N", ")", "+", "mask", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "0", ")", "\n", "attn", "=", "attn", ".", "view", "(", "-", "1", ",", "self", ".", "num_heads", ",", "N", ",", "N", ")", "\n", "attn", "=", "self", ".", "softmax", "(", "attn", ")", "\n", "", "else", ":", "\n", "            ", "attn", "=", "self", ".", "softmax", "(", "attn", ")", "\n", "\n", "", "attn", "=", "self", ".", "attn_drop", "(", "attn", ")", "\n", "\n", "x", "=", "(", "attn", "@", "v", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "reshape", "(", "B_", ",", "N", ",", "C", ")", "\n", "x", "=", "self", ".", "proj", "(", "x", ")", "\n", "x", "=", "self", ".", "proj_drop", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.swin_transformer.SwinTransformerBlock.__init__": [[137, 187], ["torch.Module.__init__", "norm_layer", "swin_transformer.WindowAttention", "norm_layer", "int", "transformer_layers.Mlp", "swin_transformer.SwinTransformerBlock.register_buffer", "min", "min", "transformer_layers.DropPath", "torch.Identity", "torch.Identity", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "swin_transformer.window_partition", "mask_windows.view.view.view", "attn_mask.masked_fill().masked_fill.masked_fill().masked_fill.masked_fill().masked_fill", "transformer_layers.to_2tuple", "slice", "slice", "slice", "slice", "slice", "slice", "mask_windows.view.view.unsqueeze", "mask_windows.view.view.unsqueeze", "float", "attn_mask.masked_fill().masked_fill.masked_fill().masked_fill.masked_fill", "float"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.softmax_loss.LabelSmoothingCrossEntropy.__init__", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.swin_transformer.window_partition"], ["def", "__init__", "(", "self", ",", "dim", ",", "input_resolution", ",", "num_heads", ",", "window_size", "=", "7", ",", "shift_size", "=", "0", ",", "\n", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "True", ",", "qk_scale", "=", "None", ",", "drop", "=", "0.", ",", "attn_drop", "=", "0.", ",", "drop_path", "=", "0.", ",", "\n", "act_layer", "=", "nn", ".", "GELU", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "input_resolution", "=", "input_resolution", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "self", ".", "window_size", "=", "window_size", "\n", "self", ".", "shift_size", "=", "shift_size", "\n", "self", ".", "mlp_ratio", "=", "mlp_ratio", "\n", "if", "min", "(", "self", ".", "input_resolution", ")", "<=", "self", ".", "window_size", ":", "\n", "# if window size is larger than input resolution, we don't partition windows", "\n", "            ", "self", ".", "shift_size", "=", "0", "\n", "self", ".", "window_size", "=", "min", "(", "self", ".", "input_resolution", ")", "\n", "", "assert", "0", "<=", "self", ".", "shift_size", "<", "self", ".", "window_size", ",", "\"shift_size must in 0-window_size\"", "\n", "\n", "self", ".", "norm1", "=", "norm_layer", "(", "dim", ")", "\n", "self", ".", "attn", "=", "WindowAttention", "(", "\n", "dim", ",", "window_size", "=", "to_2tuple", "(", "self", ".", "window_size", ")", ",", "num_heads", "=", "num_heads", ",", "\n", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "attn_drop", "=", "attn_drop", ",", "proj_drop", "=", "drop", ")", "\n", "\n", "self", ".", "drop_path", "=", "DropPath", "(", "drop_path", ")", "if", "drop_path", ">", "0.", "else", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "norm2", "=", "norm_layer", "(", "dim", ")", "\n", "mlp_hidden_dim", "=", "int", "(", "dim", "*", "mlp_ratio", ")", "\n", "self", ".", "mlp", "=", "Mlp", "(", "in_features", "=", "dim", ",", "hidden_features", "=", "mlp_hidden_dim", ",", "act_layer", "=", "act_layer", ",", "drop", "=", "drop", ")", "\n", "\n", "if", "self", ".", "shift_size", ">", "0", ":", "\n", "# calculate attention mask for SW-MSA", "\n", "            ", "H", ",", "W", "=", "self", ".", "input_resolution", "\n", "img_mask", "=", "torch", ".", "zeros", "(", "(", "1", ",", "H", ",", "W", ",", "1", ")", ")", "# 1 H W 1", "\n", "h_slices", "=", "(", "slice", "(", "0", ",", "-", "self", ".", "window_size", ")", ",", "\n", "slice", "(", "-", "self", ".", "window_size", ",", "-", "self", ".", "shift_size", ")", ",", "\n", "slice", "(", "-", "self", ".", "shift_size", ",", "None", ")", ")", "\n", "w_slices", "=", "(", "slice", "(", "0", ",", "-", "self", ".", "window_size", ")", ",", "\n", "slice", "(", "-", "self", ".", "window_size", ",", "-", "self", ".", "shift_size", ")", ",", "\n", "slice", "(", "-", "self", ".", "shift_size", ",", "None", ")", ")", "\n", "cnt", "=", "0", "\n", "for", "h", "in", "h_slices", ":", "\n", "                ", "for", "w", "in", "w_slices", ":", "\n", "                    ", "img_mask", "[", ":", ",", "h", ",", "w", ",", ":", "]", "=", "cnt", "\n", "cnt", "+=", "1", "\n", "\n", "", "", "mask_windows", "=", "window_partition", "(", "img_mask", ",", "self", ".", "window_size", ")", "# nW, window_size, window_size, 1", "\n", "mask_windows", "=", "mask_windows", ".", "view", "(", "-", "1", ",", "self", ".", "window_size", "*", "self", ".", "window_size", ")", "\n", "attn_mask", "=", "mask_windows", ".", "unsqueeze", "(", "1", ")", "-", "mask_windows", ".", "unsqueeze", "(", "2", ")", "\n", "attn_mask", "=", "attn_mask", ".", "masked_fill", "(", "attn_mask", "!=", "0", ",", "float", "(", "-", "100.0", ")", ")", ".", "masked_fill", "(", "attn_mask", "==", "0", ",", "float", "(", "0.0", ")", ")", "\n", "", "else", ":", "\n", "            ", "attn_mask", "=", "None", "\n", "\n", "", "self", ".", "register_buffer", "(", "\"attn_mask\"", ",", "attn_mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.swin_transformer.SwinTransformerBlock.forward": [[188, 226], ["swin_transformer.SwinTransformerBlock.norm1", "torch.roll.view", "torch.roll.view", "swin_transformer.window_partition", "x_windows.view.view.view", "swin_transformer.SwinTransformerBlock.attn", "attn_windows.view.view.view", "swin_transformer.window_reverse", "torch.roll.view", "torch.roll.view", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "swin_transformer.SwinTransformerBlock.drop_path", "swin_transformer.SwinTransformerBlock.drop_path", "swin_transformer.SwinTransformerBlock.mlp", "swin_transformer.SwinTransformerBlock.norm2"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.swin_transformer.window_partition", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.swin_transformer.window_reverse", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.vit_pytorch.drop_path", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.vit_pytorch.drop_path"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "H", ",", "W", "=", "self", ".", "input_resolution", "\n", "B", ",", "L", ",", "C", "=", "x", ".", "shape", "\n", "assert", "L", "==", "H", "*", "W", ",", "\"input feature has wrong size\"", "\n", "\n", "shortcut", "=", "x", "\n", "x", "=", "self", ".", "norm1", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "B", ",", "H", ",", "W", ",", "C", ")", "\n", "\n", "# cyclic shift", "\n", "if", "self", ".", "shift_size", ">", "0", ":", "\n", "            ", "shifted_x", "=", "torch", ".", "roll", "(", "x", ",", "shifts", "=", "(", "-", "self", ".", "shift_size", ",", "-", "self", ".", "shift_size", ")", ",", "dims", "=", "(", "1", ",", "2", ")", ")", "\n", "", "else", ":", "\n", "            ", "shifted_x", "=", "x", "\n", "\n", "# partition windows", "\n", "", "x_windows", "=", "window_partition", "(", "shifted_x", ",", "self", ".", "window_size", ")", "# nW*B, window_size, window_size, C", "\n", "x_windows", "=", "x_windows", ".", "view", "(", "-", "1", ",", "self", ".", "window_size", "*", "self", ".", "window_size", ",", "C", ")", "# nW*B, window_size*window_size, C", "\n", "\n", "# W-MSA/SW-MSA", "\n", "attn_windows", "=", "self", ".", "attn", "(", "x_windows", ",", "mask", "=", "self", ".", "attn_mask", ")", "# nW*B, window_size*window_size, C", "\n", "\n", "# merge windows", "\n", "attn_windows", "=", "attn_windows", ".", "view", "(", "-", "1", ",", "self", ".", "window_size", ",", "self", ".", "window_size", ",", "C", ")", "\n", "shifted_x", "=", "window_reverse", "(", "attn_windows", ",", "self", ".", "window_size", ",", "H", ",", "W", ")", "# B H' W' C", "\n", "\n", "# reverse cyclic shift", "\n", "if", "self", ".", "shift_size", ">", "0", ":", "\n", "            ", "x", "=", "torch", ".", "roll", "(", "shifted_x", ",", "shifts", "=", "(", "self", ".", "shift_size", ",", "self", ".", "shift_size", ")", ",", "dims", "=", "(", "1", ",", "2", ")", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "shifted_x", "\n", "", "x", "=", "x", ".", "view", "(", "B", ",", "H", "*", "W", ",", "C", ")", "\n", "\n", "# FFN", "\n", "x", "=", "shortcut", "+", "self", ".", "drop_path", "(", "x", ")", "\n", "x", "=", "x", "+", "self", ".", "drop_path", "(", "self", ".", "mlp", "(", "self", ".", "norm2", "(", "x", ")", ")", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.swin_transformer.PatchMerging.__init__": [[236, 242], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "norm_layer"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.softmax_loss.LabelSmoothingCrossEntropy.__init__"], ["def", "__init__", "(", "self", ",", "input_resolution", ",", "dim", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_resolution", "=", "input_resolution", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "reduction", "=", "nn", ".", "Linear", "(", "4", "*", "dim", ",", "2", "*", "dim", ",", "bias", "=", "False", ")", "\n", "self", ".", "norm", "=", "norm_layer", "(", "4", "*", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.swin_transformer.PatchMerging.forward": [[243, 265], ["swin_transformer.PatchMerging.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "swin_transformer.PatchMerging.view", "swin_transformer.PatchMerging.norm", "swin_transformer.PatchMerging.reduction"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        x: B, H*W, C\n        \"\"\"", "\n", "H", ",", "W", "=", "self", ".", "input_resolution", "\n", "B", ",", "L", ",", "C", "=", "x", ".", "shape", "\n", "assert", "L", "==", "H", "*", "W", ",", "\"input feature has wrong size\"", "\n", "assert", "H", "%", "2", "==", "0", "and", "W", "%", "2", "==", "0", ",", "f\"x size ({H}*{W}) are not even.\"", "\n", "\n", "x", "=", "x", ".", "view", "(", "B", ",", "H", ",", "W", ",", "C", ")", "\n", "\n", "x0", "=", "x", "[", ":", ",", "0", ":", ":", "2", ",", "0", ":", ":", "2", ",", ":", "]", "# B H/2 W/2 C", "\n", "x1", "=", "x", "[", ":", ",", "1", ":", ":", "2", ",", "0", ":", ":", "2", ",", ":", "]", "# B H/2 W/2 C", "\n", "x2", "=", "x", "[", ":", ",", "0", ":", ":", "2", ",", "1", ":", ":", "2", ",", ":", "]", "# B H/2 W/2 C", "\n", "x3", "=", "x", "[", ":", ",", "1", ":", ":", "2", ",", "1", ":", ":", "2", ",", ":", "]", "# B H/2 W/2 C", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x0", ",", "x1", ",", "x2", ",", "x3", "]", ",", "-", "1", ")", "# B H/2 W/2 4*C", "\n", "x", "=", "x", ".", "view", "(", "B", ",", "-", "1", ",", "4", "*", "C", ")", "# B H/2*W/2 4*C", "\n", "\n", "x", "=", "self", ".", "norm", "(", "x", ")", "\n", "x", "=", "self", ".", "reduction", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.swin_transformer.PatchMerging.extra_repr": [[266, 268], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "f\"input_resolution={self.input_resolution}, dim={self.dim}\"", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.swin_transformer.PatchMerging.flops": [[269, 274], ["None"], "methods", ["None"], ["", "def", "flops", "(", "self", ")", ":", "\n", "        ", "H", ",", "W", "=", "self", ".", "input_resolution", "\n", "flops", "=", "H", "*", "W", "*", "self", ".", "dim", "\n", "flops", "+=", "(", "H", "//", "2", ")", "*", "(", "W", "//", "2", ")", "*", "4", "*", "self", ".", "dim", "*", "2", "*", "self", ".", "dim", "\n", "return", "flops", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.swin_transformer.BasicLayer.__init__": [[295, 322], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "downsample", "swin_transformer.SwinTransformerBlock", "range", "isinstance"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.softmax_loss.LabelSmoothingCrossEntropy.__init__"], ["def", "__init__", "(", "self", ",", "dim", ",", "input_resolution", ",", "depth", ",", "num_heads", ",", "window_size", ",", "\n", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "True", ",", "qk_scale", "=", "None", ",", "drop", "=", "0.", ",", "attn_drop", "=", "0.", ",", "\n", "drop_path", "=", "0.", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ",", "downsample", "=", "None", ",", "use_checkpoint", "=", "False", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "input_resolution", "=", "input_resolution", "\n", "self", ".", "depth", "=", "depth", "\n", "self", ".", "use_checkpoint", "=", "use_checkpoint", "\n", "\n", "# build blocks", "\n", "self", ".", "blocks", "=", "nn", ".", "ModuleList", "(", "[", "\n", "SwinTransformerBlock", "(", "dim", "=", "dim", ",", "input_resolution", "=", "input_resolution", ",", "\n", "num_heads", "=", "num_heads", ",", "window_size", "=", "window_size", ",", "\n", "shift_size", "=", "0", "if", "(", "i", "%", "2", "==", "0", ")", "else", "window_size", "//", "2", ",", "\n", "mlp_ratio", "=", "mlp_ratio", ",", "\n", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop", ",", "attn_drop", "=", "attn_drop", ",", "\n", "drop_path", "=", "drop_path", "[", "i", "]", "if", "isinstance", "(", "drop_path", ",", "list", ")", "else", "drop_path", ",", "\n", "norm_layer", "=", "norm_layer", ")", "\n", "for", "i", "in", "range", "(", "depth", ")", "]", ")", "\n", "\n", "# patch merging layer", "\n", "if", "downsample", "is", "not", "None", ":", "\n", "            ", "self", ".", "downsample", "=", "downsample", "(", "input_resolution", ",", "dim", "=", "dim", ",", "norm_layer", "=", "norm_layer", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "downsample", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.swin_transformer.BasicLayer.forward": [[323, 332], ["swin_transformer.BasicLayer.downsample", "checkpoint.checkpoint", "blk", "torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.run_with_submitit.Trainer.checkpoint"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "for", "blk", "in", "self", ".", "blocks", ":", "\n", "            ", "if", "not", "torch", ".", "jit", ".", "is_scripting", "(", ")", "and", "self", ".", "use_checkpoint", ":", "\n", "                ", "x", "=", "checkpoint", ".", "checkpoint", "(", "blk", ",", "x", ")", "\n", "", "else", ":", "\n", "                ", "x", "=", "blk", "(", "x", ")", "\n", "", "", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "downsample", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.swin_transformer.BasicLayer.extra_repr": [[333, 335], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "f\"dim={self.dim}, input_resolution={self.input_resolution}, depth={self.depth}\"", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.swin_transformer.SwinTransformer.__init__": [[362, 428], ["torch.Module.__init__", "len", "int", "transformer_layers.PatchEmbed", "torch.Dropout", "torch.Dropout", "range", "torch.Sequential", "torch.Sequential", "norm_layer", "torch.AdaptiveAvgPool1d", "torch.AdaptiveAvgPool1d", "weight_init.startswith", "torch.Parameter", "torch.Parameter", "transformer_layers.trunc_normal_", "x.item", "swin_transformer.SwinTransformer.named_modules", "swin_transformer.SwinTransformer.apply", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "swin_transformer.BasicLayer", "math.log", "transformer_layers._init_vit_weights", "sum", "int", "sum", "sum"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.softmax_loss.LabelSmoothingCrossEntropy.__init__", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.vit_pytorch.trunc_normal_", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.transformer_layers._init_vit_weights"], ["def", "__init__", "(", "self", ",", "img_size", "=", "224", ",", "patch_size", "=", "4", ",", "in_chans", "=", "3", ",", "num_classes", "=", "1000", ",", "\n", "embed_dim", "=", "96", ",", "depths", "=", "(", "2", ",", "2", ",", "6", ",", "2", ")", ",", "num_heads", "=", "(", "3", ",", "6", ",", "12", ",", "24", ")", ",", "\n", "window_size", "=", "7", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "True", ",", "qk_scale", "=", "None", ",", "\n", "drop_rate", "=", "0.", ",", "attn_drop_rate", "=", "0.", ",", "drop_path_rate", "=", "0.1", ",", "\n", "norm_layer", "=", "nn", ".", "LayerNorm", ",", "ape", "=", "False", ",", "patch_norm", "=", "True", ",", "\n", "use_checkpoint", "=", "False", ",", "weight_init", "=", "''", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "num_layers", "=", "len", "(", "depths", ")", "\n", "self", ".", "embed_dim", "=", "embed_dim", "\n", "self", ".", "ape", "=", "ape", "\n", "self", ".", "patch_norm", "=", "patch_norm", "\n", "self", ".", "num_features", "=", "int", "(", "embed_dim", "*", "2", "**", "(", "self", ".", "num_layers", "-", "1", ")", ")", "\n", "self", ".", "mlp_ratio", "=", "mlp_ratio", "\n", "self", ".", "in_planes", "=", "1024", "\n", "\n", "# split image into non-overlapping patches", "\n", "self", ".", "patch_embed", "=", "PatchEmbed", "(", "\n", "img_size", "=", "img_size", ",", "patch_size", "=", "patch_size", ",", "in_chans", "=", "in_chans", ",", "embed_dim", "=", "embed_dim", ",", "\n", "norm_layer", "=", "norm_layer", "if", "self", ".", "patch_norm", "else", "None", ")", "\n", "num_patches", "=", "self", ".", "patch_embed", ".", "num_patches", "\n", "self", ".", "patch_grid", "=", "self", ".", "patch_embed", ".", "grid_size", "\n", "\n", "# absolute position embedding", "\n", "if", "self", ".", "ape", ":", "\n", "            ", "self", ".", "absolute_pos_embed", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "num_patches", ",", "embed_dim", ")", ")", "\n", "trunc_normal_", "(", "self", ".", "absolute_pos_embed", ",", "std", "=", ".02", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "absolute_pos_embed", "=", "None", "\n", "\n", "", "self", ".", "pos_drop", "=", "nn", ".", "Dropout", "(", "p", "=", "drop_rate", ")", "\n", "\n", "# stochastic depth", "\n", "dpr", "=", "[", "x", ".", "item", "(", ")", "for", "x", "in", "torch", ".", "linspace", "(", "0", ",", "drop_path_rate", ",", "sum", "(", "depths", ")", ")", "]", "# stochastic depth decay rule", "\n", "\n", "# build layers", "\n", "layers", "=", "[", "]", "\n", "for", "i_layer", "in", "range", "(", "self", ".", "num_layers", ")", ":", "\n", "            ", "layers", "+=", "[", "BasicLayer", "(", "\n", "dim", "=", "int", "(", "embed_dim", "*", "2", "**", "i_layer", ")", ",", "\n", "input_resolution", "=", "(", "self", ".", "patch_grid", "[", "0", "]", "//", "(", "2", "**", "i_layer", ")", ",", "self", ".", "patch_grid", "[", "1", "]", "//", "(", "2", "**", "i_layer", ")", ")", ",", "\n", "depth", "=", "depths", "[", "i_layer", "]", ",", "\n", "num_heads", "=", "num_heads", "[", "i_layer", "]", ",", "\n", "window_size", "=", "window_size", ",", "\n", "mlp_ratio", "=", "self", ".", "mlp_ratio", ",", "\n", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "attn_drop", "=", "attn_drop_rate", ",", "\n", "drop_path", "=", "dpr", "[", "sum", "(", "depths", "[", ":", "i_layer", "]", ")", ":", "sum", "(", "depths", "[", ":", "i_layer", "+", "1", "]", ")", "]", ",", "\n", "norm_layer", "=", "norm_layer", ",", "\n", "downsample", "=", "PatchMerging", "if", "(", "i_layer", "<", "self", ".", "num_layers", "-", "1", ")", "else", "None", ",", "\n", "use_checkpoint", "=", "use_checkpoint", ")", "\n", "]", "\n", "", "self", ".", "layers", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n", "self", ".", "norm", "=", "norm_layer", "(", "self", ".", "num_features", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool1d", "(", "1", ")", "\n", "#  self.head = nn.Linear(self.num_features, num_classes) if num_classes > 0 else nn.Identity()", "\n", "\n", "assert", "weight_init", "in", "(", "'jax'", ",", "'jax_nlhb'", ",", "'nlhb'", ",", "''", ")", "\n", "head_bias", "=", "-", "math", ".", "log", "(", "self", ".", "num_classes", ")", "if", "'nlhb'", "in", "weight_init", "else", "0.", "\n", "if", "weight_init", ".", "startswith", "(", "'jax'", ")", ":", "\n", "            ", "for", "n", ",", "m", "in", "self", ".", "named_modules", "(", ")", ":", "\n", "                ", "_init_vit_weights", "(", "m", ",", "n", ",", "head_bias", "=", "head_bias", ",", "jax_impl", "=", "True", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "apply", "(", "_init_vit_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.swin_transformer.SwinTransformer.no_weight_decay": [[429, 432], ["None"], "methods", ["None"], ["", "", "@", "torch", ".", "jit", ".", "ignore", "\n", "def", "no_weight_decay", "(", "self", ")", ":", "\n", "        ", "return", "{", "'absolute_pos_embed'", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.swin_transformer.SwinTransformer.no_weight_decay_keywords": [[433, 436], ["None"], "methods", ["None"], ["", "@", "torch", ".", "jit", ".", "ignore", "\n", "def", "no_weight_decay_keywords", "(", "self", ")", ":", "\n", "        ", "return", "{", "'relative_position_bias_table'", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.swin_transformer.SwinTransformer.forward_features": [[437, 447], ["swin_transformer.SwinTransformer.patch_embed", "swin_transformer.SwinTransformer.pos_drop", "swin_transformer.SwinTransformer.layers", "swin_transformer.SwinTransformer.norm", "swin_transformer.SwinTransformer.avgpool", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten.transpose", "torch.flatten.transpose"], "methods", ["None"], ["", "def", "forward_features", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "patch_embed", "(", "x", ")", "\n", "if", "self", ".", "absolute_pos_embed", "is", "not", "None", ":", "\n", "            ", "x", "=", "x", "+", "self", ".", "absolute_pos_embed", "\n", "", "x", "=", "self", ".", "pos_drop", "(", "x", ")", "\n", "x", "=", "self", ".", "layers", "(", "x", ")", "\n", "x", "=", "self", ".", "norm", "(", "x", ")", "# B L C", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ".", "transpose", "(", "1", ",", "2", ")", ")", "# B C 1", "\n", "x", "=", "torch", ".", "flatten", "(", "x", ",", "1", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.swin_transformer.SwinTransformer.forward": [[448, 452], ["swin_transformer.SwinTransformer.forward_features"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.vit_pytorch.TransReID.forward_features"], ["", "def", "forward", "(", "self", ",", "x", ",", "**", "kwargs", ")", ":", "\n", "        ", "x", "=", "self", ".", "forward_features", "(", "x", ")", "\n", "#  x = self.head(x)", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.swin_transformer.SwinTransformer.load_param": [[453, 455], ["transformer_layers.load_checkpoint"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.transformer_layers.load_checkpoint"], ["", "def", "load_param", "(", "self", ",", "model_path", ")", ":", "\n", "        ", "load_checkpoint", "(", "self", ",", "model_path", ")", "\n", "#  param_dict = torch.load(model_path, map_location='cpu')", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.swin_transformer.window_partition": [[8, 20], ["x.view.view", "x.view.permute().contiguous().view", "x.view.permute().contiguous", "x.view.permute"], "function", ["None"], ["def", "window_partition", "(", "x", ",", "window_size", ":", "int", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        x: (B, H, W, C)\n        window_size (int): window size\n    Returns:\n        windows: (num_windows*B, window_size, window_size, C)\n    \"\"\"", "\n", "B", ",", "H", ",", "W", ",", "C", "=", "x", ".", "shape", "\n", "x", "=", "x", ".", "view", "(", "B", ",", "H", "//", "window_size", ",", "window_size", ",", "W", "//", "window_size", ",", "window_size", ",", "C", ")", "\n", "windows", "=", "x", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "2", ",", "4", ",", "5", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "window_size", ",", "window_size", ",", "C", ")", "\n", "return", "windows", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.swin_transformer.window_reverse": [[22, 36], ["int", "windows.view", "x.permute().contiguous().view.permute().contiguous().view", "x.permute().contiguous().view.permute().contiguous", "x.permute().contiguous().view.permute"], "function", ["None"], ["", "def", "window_reverse", "(", "windows", ",", "window_size", ":", "int", ",", "H", ":", "int", ",", "W", ":", "int", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        windows: (num_windows*B, window_size, window_size, C)\n        window_size (int): Window size\n        H (int): Height of image\n        W (int): Width of image\n    Returns:\n        x: (B, H, W, C)\n    \"\"\"", "\n", "B", "=", "int", "(", "windows", ".", "shape", "[", "0", "]", "/", "(", "H", "*", "W", "/", "window_size", "/", "window_size", ")", ")", "\n", "x", "=", "windows", ".", "view", "(", "B", ",", "H", "//", "window_size", ",", "W", "//", "window_size", ",", "window_size", ",", "window_size", ",", "-", "1", ")", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "2", ",", "4", ",", "5", ")", ".", "contiguous", "(", ")", ".", "view", "(", "B", ",", "H", ",", "W", ",", "-", "1", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.swin_transformer.pre_settings": [[468, 484], ["print", "print", "print", "print", "print"], "function", ["None"], ["", "", "def", "pre_settings", "(", "img_size", ",", "drop_rate", ",", "attn_drop_rate", ",", "drop_path_rate", ")", ":", "\n", "    ", "if", "img_size", "in", "(", "[", "256", ",", "128", "]", ",", "[", "256", ",", "256", "]", ",", "[", "384", ",", "128", "]", ")", ":", "\n", "        ", "window_size", "=", "8", "\n", "", "elif", "img_size", "in", "(", "[", "224", ",", "224", "]", ",", "[", "224", ",", "112", "]", ")", ":", "\n", "        ", "window_size", "=", "7", "\n", "", "elif", "img_size", "in", "(", "[", "384", ",", "384", "]", ",", "[", "384", ",", "192", "]", ")", ":", "\n", "        ", "window_size", "=", "12", "\n", "", "elif", "img_size", "in", "(", "[", "192", ",", "192", "]", ",", ")", ":", "\n", "        ", "window_size", "=", "6", "\n", "", "else", ":", "\n", "        ", "print", "(", "'Window size dose not match!'", ")", "\n", "", "print", "(", "'Window size is set to %d'", "%", "window_size", ")", "\n", "print", "(", "'using drop_out rate is : {}'", ".", "format", "(", "drop_rate", ")", ")", "\n", "print", "(", "'using attn_drop_out rate is : {}'", ".", "format", "(", "attn_drop_rate", ")", ")", "\n", "print", "(", "'using drop_path rate is : {}'", ".", "format", "(", "drop_path_rate", ")", ")", "\n", "return", "window_size", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.swin_transformer.swin_base_patch4_window7_224": [[485, 489], ["swin_transformer.pre_settings", "swin_transformer.SwinTransformer"], "function", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.swin_transformer.pre_settings"], ["", "def", "swin_base_patch4_window7_224", "(", "img_size", "=", "224", ",", "drop_rate", "=", "0.0", ",", "attn_drop_rate", "=", "0.0", ",", "drop_path_rate", "=", "0.1", ",", "camera_num", "=", "0", ",", "view_num", "=", "0", ",", "**", "kwargs", ")", ":", "\n", "    ", "window_size", "=", "pre_settings", "(", "img_size", ",", "drop_rate", ",", "attn_drop_rate", ",", "drop_path_rate", ")", "\n", "model", "=", "SwinTransformer", "(", "img_size", "=", "img_size", ",", "patch_size", "=", "4", ",", "window_size", "=", "window_size", ",", "embed_dim", "=", "128", ",", "depths", "=", "(", "2", ",", "2", ",", "18", ",", "2", ")", ",", "num_heads", "=", "(", "4", ",", "8", ",", "16", ",", "32", ")", ",", "drop_path_rate", "=", "drop_path_rate", ",", "drop_rate", "=", "drop_rate", ",", "attn_drop_rate", "=", "attn_drop_rate", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.swin_transformer.swin_small_patch4_window7_224": [[490, 494], ["swin_transformer.pre_settings", "swin_transformer.SwinTransformer"], "function", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.swin_transformer.pre_settings"], ["", "def", "swin_small_patch4_window7_224", "(", "img_size", "=", "224", ",", "drop_rate", "=", "0.0", ",", "attn_drop_rate", "=", "0.0", ",", "drop_path_rate", "=", "0.1", ",", "camera_num", "=", "0", ",", "view_num", "=", "0", ",", "**", "kwargs", ")", ":", "\n", "    ", "window_size", "=", "pre_settings", "(", "img_size", ",", "drop_rate", ",", "attn_drop_rate", ",", "drop_path_rate", ")", "\n", "model", "=", "SwinTransformer", "(", "img_size", "=", "img_size", ",", "patch_size", "=", "4", ",", "window_size", "=", "window_size", ",", "embed_dim", "=", "96", ",", "depths", "=", "(", "2", ",", "2", ",", "18", ",", "2", ")", ",", "num_heads", "=", "(", "3", ",", "6", ",", "12", ",", "24", ")", ",", "drop_path_rate", "=", "drop_path_rate", ",", "drop_rate", "=", "drop_rate", ",", "attn_drop_rate", "=", "attn_drop_rate", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.resnet.BasicBlock.__init__": [[16, 25], ["torch.nn.Module.__init__", "resnet.conv3x3", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "resnet.conv3x3", "torch.nn.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.softmax_loss.LabelSmoothingCrossEntropy.__init__", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.resnet.conv3x3", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.resnet.conv3x3"], ["18", ":", "torchvision", ".", "models", ".", "resnet18", ",", "\n", "34", ":", "torchvision", ".", "models", ".", "resnet34", ",", "\n", "50", ":", "torchvision", ".", "models", ".", "resnet50", ",", "\n", "101", ":", "torchvision", ".", "models", ".", "resnet101", ",", "\n", "152", ":", "torchvision", ".", "models", ".", "resnet152", ",", "\n", "}", "\n", "\n", "def", "__init__", "(", "self", ",", "depth", ",", "pretrained_path", "=", "''", ",", "cut_at_pooling", "=", "False", ",", "\n", "num_features", "=", "0", ",", "norm", "=", "False", ",", "dropout", "=", "0", ",", "num_classes", "=", "0", ",", "pooling_type", "=", "'avg'", ")", ":", "\n", "        ", "print", "(", "'pooling_type: {}'", ".", "format", "(", "pooling_type", ")", ")", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.resnet.BasicBlock.forward": [[26, 43], ["resnet.BasicBlock.conv1", "resnet.BasicBlock.bn1", "resnet.BasicBlock.relu", "resnet.BasicBlock.conv2", "resnet.BasicBlock.bn2", "resnet.BasicBlock.relu", "resnet.BasicBlock.downsample"], "methods", ["None"], ["super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "#  self.pretrained = pretrained", "\n", "self", ".", "depth", "=", "depth", "\n", "self", ".", "cut_at_pooling", "=", "cut_at_pooling", "\n", "# Construct base (pretrained) resnet", "\n", "if", "depth", "not", "in", "ResNet", ".", "__factory", ":", "\n", "            ", "raise", "KeyError", "(", "\"Unsupported depth:\"", ",", "depth", ")", "\n", "", "resnet", "=", "ResNet", ".", "__factory", "[", "depth", "]", "(", "pretrained", "=", "False", ")", "\n", "resnet", ".", "layer4", "[", "0", "]", ".", "conv2", ".", "stride", "=", "(", "1", ",", "1", ")", "\n", "resnet", ".", "layer4", "[", "0", "]", ".", "downsample", "[", "0", "]", ".", "stride", "=", "(", "1", ",", "1", ")", "\n", "resnet", "=", "self", ".", "load_param", "(", "resnet", ",", "model_path", "=", "pretrained_path", ")", "\n", "self", ".", "base", "=", "nn", ".", "Sequential", "(", "\n", "resnet", ".", "conv1", ",", "resnet", ".", "bn1", ",", "resnet", ".", "relu", ",", "resnet", ".", "maxpool", ",", "\n", "resnet", ".", "layer1", ",", "resnet", ".", "layer2", ",", "resnet", ".", "layer3", ",", "resnet", ".", "layer4", ")", "\n", "\n", "\n", "self", ".", "gap", "=", "build_pooling_layer", "(", "pooling_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.resnet.Bottleneck.__init__": [[48, 60], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.softmax_loss.LabelSmoothingCrossEntropy.__init__"], ["self", ".", "has_embedding", "=", "num_features", ">", "0", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "\n", "out_planes", "=", "resnet", ".", "fc", ".", "in_features", "\n", "\n", "# Append new layers", "\n", "if", "self", ".", "has_embedding", ":", "\n", "                ", "self", ".", "feat", "=", "nn", ".", "Linear", "(", "out_planes", ",", "self", ".", "num_features", ")", "\n", "self", ".", "feat_bn", "=", "nn", ".", "BatchNorm1d", "(", "self", ".", "num_features", ")", "\n", "init", ".", "kaiming_normal_", "(", "self", ".", "feat", ".", "weight", ",", "mode", "=", "'fan_out'", ")", "\n", "init", ".", "constant_", "(", "self", ".", "feat", ".", "bias", ",", "0", ")", "\n", "", "else", ":", "\n", "# Change the num_features to CNN output channels", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.resnet.Bottleneck.forward": [[61, 82], ["resnet.Bottleneck.conv1", "resnet.Bottleneck.bn1", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv2", "resnet.Bottleneck.bn2", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv3", "resnet.Bottleneck.bn3", "resnet.Bottleneck.relu", "resnet.Bottleneck.downsample"], "methods", ["None"], ["                ", "self", ".", "num_features", "=", "out_planes", "\n", "self", ".", "feat_bn", "=", "nn", ".", "BatchNorm1d", "(", "self", ".", "num_features", ")", "\n", "", "self", ".", "feat_bn", ".", "bias", ".", "requires_grad_", "(", "False", ")", "\n", "if", "self", ".", "dropout", ">", "0", ":", "\n", "                ", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "self", ".", "dropout", ")", "\n", "", "if", "self", ".", "num_classes", ">", "0", ":", "\n", "                ", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "self", ".", "num_features", ",", "self", ".", "num_classes", ",", "bias", "=", "False", ")", "\n", "init", ".", "normal_", "(", "self", ".", "classifier", ".", "weight", ",", "std", "=", "0.001", ")", "\n", "", "", "init", ".", "constant_", "(", "self", ".", "feat_bn", ".", "weight", ",", "1", ")", "\n", "init", ".", "constant_", "(", "self", ".", "feat_bn", ".", "bias", ",", "0", ")", "\n", "\n", "#  if not pretrained:", "\n", "#  self.reset_params()", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "bs", "=", "x", ".", "size", "(", "0", ")", "\n", "x", "=", "self", ".", "base", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "gap", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "if", "self", ".", "cut_at_pooling", ":", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.resnet.ResNet.__init__": [[85, 97], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.MaxPool2d", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.softmax_loss.LabelSmoothingCrossEntropy.__init__", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.resnet_ibn_a.ResNet_IBN._make_layer", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.resnet_ibn_a.ResNet_IBN._make_layer", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.resnet_ibn_a.ResNet_IBN._make_layer", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.resnet_ibn_a.ResNet_IBN._make_layer"], ["", "if", "self", ".", "has_embedding", ":", "\n", "            ", "bn_x", "=", "self", ".", "feat_bn", "(", "self", ".", "feat", "(", "x", ")", ")", "\n", "", "else", ":", "\n", "            ", "bn_x", "=", "self", ".", "feat_bn", "(", "x", ")", "\n", "\n", "", "if", "(", "self", ".", "training", "is", "False", ")", ":", "\n", "            ", "bn_x", "=", "F", ".", "normalize", "(", "bn_x", ")", "\n", "return", "bn_x", "\n", "\n", "", "if", "self", ".", "norm", ":", "\n", "            ", "bn_x", "=", "F", ".", "normalize", "(", "bn_x", ")", "\n", "", "elif", "self", ".", "has_embedding", ":", "\n", "            ", "bn_x", "=", "F", ".", "relu", "(", "bn_x", ")", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.resnet.ResNet._make_layer": [[98, 114], ["layers.append", "range", "torch.nn.Sequential", "torch.nn.Sequential", "block", "layers.append", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "block"], "methods", ["None"], ["\n", "", "if", "self", ".", "dropout", ">", "0", ":", "\n", "            ", "bn_x", "=", "self", ".", "drop", "(", "bn_x", ")", "\n", "\n", "", "if", "self", ".", "num_classes", ">", "0", ":", "\n", "            ", "prob", "=", "self", ".", "classifier", "(", "bn_x", ")", "\n", "", "else", ":", "\n", "            ", "return", "bn_x", "\n", "\n", "", "return", "prob", "\n", "\n", "#  def reset_params(self):", "\n", "#  for m in self.modules():", "\n", "#  if isinstance(m, nn.Conv2d):", "\n", "#  init.kaiming_normal_(m.weight, mode='fan_out')", "\n", "#  if m.bias is not None:", "\n", "#  init.constant_(m.bias, 0)", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.resnet.ResNet.forward": [[115, 126], ["resnet.ResNet.conv1", "resnet.ResNet.bn1", "resnet.ResNet.relu", "resnet.ResNet.maxpool", "resnet.ResNet.layer1", "resnet.ResNet.layer2", "resnet.ResNet.layer3", "resnet.ResNet.layer4"], "methods", ["None"], ["#  elif isinstance(m, nn.BatchNorm2d):", "\n", "#  init.constant_(m.weight, 1)", "\n", "#  init.constant_(m.bias, 0)", "\n", "#  elif isinstance(m, nn.BatchNorm1d):", "\n", "#  init.constant_(m.weight, 1)", "\n", "#  init.constant_(m.bias, 0)", "\n", "#  elif isinstance(m, nn.Linear):", "\n", "#  init.normal_(m.weight, std=0.001)", "\n", "#  if m.bias is not None:", "\n", "#  init.constant_(m.bias, 0)", "\n", "\n", "", "def", "load_param", "(", "self", ",", "model", ",", "model_path", ")", ":", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.resnet.ResNet.load_param": [[127, 135], ["torch.load", "[].copy_", "resnet.ResNet.state_dict"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.solver.scheduler.Scheduler.state_dict"], ["        ", "param_dict", "=", "torch", ".", "load", "(", "model_path", ",", "map_location", "=", "'cpu'", ")", "\n", "for", "i", "in", "param_dict", ":", "\n", "            ", "if", "'fc'", "in", "i", "or", "'classifier'", "in", "i", "or", "'bottleneck'", "in", "i", ":", "\n", "                ", "continue", "\n", "", "if", "i", ".", "startswith", "(", "'base'", ")", ":", "\n", "                ", "j", "=", "i", ".", "replace", "(", "'base.'", ",", "''", ")", "\n", "", "else", ":", "\n", "                ", "j", "=", "i", "\n", "", "model", ".", "state_dict", "(", ")", "[", "j", "]", ".", "copy_", "(", "param_dict", "[", "i", "]", ")", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.resnet.ResNet.random_init": [[136, 144], ["resnet.ResNet.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["None"], ["", "return", "model", "\n", "\n", "", "", "def", "resnet18", "(", "**", "kwargs", ")", ":", "\n", "    ", "return", "ResNet", "(", "18", ",", "**", "kwargs", ")", "\n", "\n", "\n", "", "def", "resnet34", "(", "**", "kwargs", ")", ":", "\n", "    ", "return", "ResNet", "(", "34", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.resnet.conv3x3": [[7, 11], ["torch.nn.Conv2d"], "function", ["None"], ["from", ".", "pooling", "import", "build_pooling_layer", "\n", "\n", "\n", "__all__", "=", "[", "'ResNet'", ",", "'resnet18'", ",", "'resnet34'", ",", "'resnet50'", ",", "'resnet101'", ",", "\n", "'resnet152'", "]", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.resnet_ibn_a.IBN.__init__": [[19, 26], ["torch.Module.__init__", "int", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.softmax_loss.LabelSmoothingCrossEntropy.__init__"], ["padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n", "\n", "", "class", "BasicBlock", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "expansion", "=", "1", "\n", "\n", "def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.resnet_ibn_a.IBN.forward": [[27, 33], ["torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "resnet_ibn_a.IBN.IN", "resnet_ibn_a.IBN.BN", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "split[].contiguous", "split[].contiguous"], "methods", ["None"], ["self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.resnet_ibn_a.Bottleneck_IBN.__init__": [[38, 53], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "resnet_ibn_a.IBN", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.softmax_loss.LabelSmoothingCrossEntropy.__init__"], ["out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.resnet_ibn_a.Bottleneck_IBN.forward": [[54, 75], ["resnet_ibn_a.Bottleneck_IBN.conv1", "resnet_ibn_a.Bottleneck_IBN.bn1", "resnet_ibn_a.Bottleneck_IBN.relu", "resnet_ibn_a.Bottleneck_IBN.conv2", "resnet_ibn_a.Bottleneck_IBN.bn2", "resnet_ibn_a.Bottleneck_IBN.relu", "resnet_ibn_a.Bottleneck_IBN.conv3", "resnet_ibn_a.Bottleneck_IBN.bn3", "resnet_ibn_a.Bottleneck_IBN.relu", "resnet_ibn_a.Bottleneck_IBN.downsample"], "methods", ["None"], ["", "", "class", "IBN", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "planes", ")", ":", "\n", "        ", "super", "(", "IBN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "half1", "=", "int", "(", "planes", "/", "2", ")", "\n", "self", ".", "half", "=", "half1", "\n", "half2", "=", "planes", "-", "half1", "\n", "self", ".", "IN", "=", "nn", ".", "InstanceNorm2d", "(", "half1", ",", "affine", "=", "True", ")", "\n", "self", ".", "BN", "=", "nn", ".", "BatchNorm2d", "(", "half2", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "split", "=", "torch", ".", "split", "(", "x", ",", "self", ".", "half", ",", "1", ")", "\n", "out1", "=", "self", ".", "IN", "(", "split", "[", "0", "]", ".", "contiguous", "(", ")", ")", "\n", "out2", "=", "self", ".", "BN", "(", "split", "[", "1", "]", ".", "contiguous", "(", ")", ")", "\n", "out", "=", "torch", ".", "cat", "(", "(", "out1", ",", "out2", ")", ",", "1", ")", "\n", "return", "out", "\n", "\n", "", "", "class", "Bottleneck", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "expansion", "=", "4", "\n", "\n", "def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "ibn", "=", "False", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.resnet_ibn_a.ResNet_IBN.__init__": [[79, 106], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "resnet_ibn_a.ResNet_IBN._make_layer", "resnet_ibn_a.ResNet_IBN._make_layer", "resnet_ibn_a.ResNet_IBN._make_layer", "resnet_ibn_a.ResNet_IBN._make_layer", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "resnet_ibn_a.ResNet_IBN.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.softmax_loss.LabelSmoothingCrossEntropy.__init__", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.resnet_ibn_a.ResNet_IBN._make_layer", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.resnet_ibn_a.ResNet_IBN._make_layer", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.resnet_ibn_a.ResNet_IBN._make_layer", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.resnet_ibn_a.ResNet_IBN._make_layer"], ["            ", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "self", ".", "expansion", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.resnet_ibn_a.ResNet_IBN._make_layer": [[107, 126], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n", "\n", "", "", "class", "ResNet", "(", "nn", ".", "Module", ")", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ")", ":", "\n", "        ", "scale", "=", "64", "\n", "self", ".", "inplanes", "=", "scale", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "scale", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "scale", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "scale", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "scale", "*", "2", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "scale", "*", "4", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "scale", "*", "8", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.resnet_ibn_a.ResNet_IBN._freeze_stages": [[127, 140], ["range", "resnet_ibn_a.ResNet_IBN.bn1.eval", "getattr", "print", "getattr.eval", "getattr.parameters", "getattr.parameters"], "methods", ["None"], ["self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "7", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "scale", "*", "8", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "InstanceNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.resnet_ibn_a.ResNet_IBN.forward": [[140, 156], ["resnet_ibn_a.ResNet_IBN.conv1", "resnet_ibn_a.ResNet_IBN.bn1", "resnet_ibn_a.ResNet_IBN.relu", "resnet_ibn_a.ResNet_IBN.maxpool", "resnet_ibn_a.ResNet_IBN.layer1", "resnet_ibn_a.ResNet_IBN.layer2", "resnet_ibn_a.ResNet_IBN.layer3", "resnet_ibn_a.ResNet_IBN.layer4"], "methods", ["None"], ["\n", "", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "ibn", "=", "True", "\n", "if", "planes", "==", "512", ":", "\n", "            ", "ibn", "=", "False", "\n", "", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "ibn", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.resnet_ibn_a.ResNet_IBN.load_param": [[157, 165], ["torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "[].copy_", "resnet_ibn_a.ResNet_IBN.state_dict", "i.replace"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.solver.scheduler.Scheduler.state_dict"], ["            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "ibn", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.resnet_ibn_a.resnet50_ibn_a": [[168, 177], ["resnet_ibn_a.ResNet_IBN", "ResNet_IBN.load_state_dict", "torch.load_url"], "function", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.solver.scheduler.Scheduler.load_state_dict"], ["x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.resnet_ibn_a.resnet101_ibn_a": [[179, 188], ["resnet_ibn_a.ResNet_IBN", "ResNet_IBN.load_state_dict", "torch.load_url"], "function", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.solver.scheduler.Scheduler.load_state_dict"], ["", "", "def", "resnet50_ibn_a", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-50 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "state_dict", "=", "torch", ".", "load", "(", "model_urls", "[", "'ibn_resnet50a'", "]", ",", "map_location", "=", "torch", ".", "device", "(", "'cpu'", ")", ")", "[", "'state_dict'", "]", "\n", "state_dict", "=", "remove_module_key", "(", "state_dict", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.resnet_ibn_a.resnet152_ibn_a": [[190, 199], ["resnet_ibn_a.ResNet_IBN", "ResNet_IBN.load_state_dict", "torch.load_url"], "function", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.solver.scheduler.Scheduler.load_state_dict"], ["\n", "\n", "", "def", "resnet101_ibn_a", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-101 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "state_dict", "=", "torch", ".", "load", "(", "model_urls", "[", "'ibn_resnet101a'", "]", ",", "map_location", "=", "torch", ".", "device", "(", "'cpu'", ")", ")", "[", "'state_dict'", "]", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.vit_pytorch.GeneralizedMeanPooling.__init__": [[59, 65], ["torch.Module.__init__", "float"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.softmax_loss.LabelSmoothingCrossEntropy.__init__"], ["def", "__init__", "(", "self", ",", "norm", "=", "3", ",", "output_size", "=", "1", ",", "eps", "=", "1e-6", ")", ":", "\n", "        ", "super", "(", "GeneralizedMeanPooling", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "norm", ">", "0", "\n", "self", ".", "p", "=", "float", "(", "norm", ")", "\n", "self", ".", "output_size", "=", "output_size", "\n", "self", ".", "eps", "=", "eps", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.vit_pytorch.GeneralizedMeanPooling.forward": [[66, 69], ["x.clamp().pow.clamp().pow.clamp().pow", "torch.adaptive_avg_pool1d().pow", "torch.adaptive_avg_pool1d().pow", "torch.adaptive_avg_pool1d().pow", "x.clamp().pow.clamp().pow.clamp", "torch.adaptive_avg_pool1d", "torch.adaptive_avg_pool1d", "torch.adaptive_avg_pool1d"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", ".", "clamp", "(", "min", "=", "self", ".", "eps", ")", ".", "pow", "(", "self", ".", "p", ")", "\n", "return", "F", ".", "adaptive_avg_pool1d", "(", "x", ",", "self", ".", "output_size", ")", ".", "pow", "(", "1.", "/", "self", ".", "p", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.vit_pytorch.DropPath.__init__": [[92, 95], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.softmax_loss.LabelSmoothingCrossEntropy.__init__"], ["def", "__init__", "(", "self", ",", "drop_prob", "=", "None", ")", ":", "\n", "        ", "super", "(", "DropPath", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "drop_prob", "=", "drop_prob", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.vit_pytorch.DropPath.forward": [[96, 98], ["vit_pytorch.drop_path"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.vit_pytorch.drop_path"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "drop_path", "(", "x", ",", "self", ".", "drop_prob", ",", "self", ".", "training", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.vit_pytorch.Mlp.__init__": [[101, 109], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "act_layer", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.softmax_loss.LabelSmoothingCrossEntropy.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "hidden_features", "=", "None", ",", "out_features", "=", "None", ",", "act_layer", "=", "nn", ".", "GELU", ",", "drop", "=", "0.", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "out_features", "=", "out_features", "or", "in_features", "\n", "hidden_features", "=", "hidden_features", "or", "in_features", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "in_features", ",", "hidden_features", ")", "\n", "self", ".", "act", "=", "act_layer", "(", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "hidden_features", ",", "out_features", ")", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "drop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.vit_pytorch.Mlp.forward": [[110, 117], ["vit_pytorch.Mlp.fc1", "vit_pytorch.Mlp.act", "vit_pytorch.Mlp.drop", "vit_pytorch.Mlp.fc2", "vit_pytorch.Mlp.drop"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "x", "=", "self", ".", "act", "(", "x", ")", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.vit_pytorch.Attention.__init__": [[120, 131], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.softmax_loss.LabelSmoothingCrossEntropy.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "num_heads", "=", "8", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "attn_drop", "=", "0.", ",", "proj_drop", "=", "0.", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "head_dim", "=", "dim", "//", "num_heads", "\n", "# NOTE scale factor was wrong in my original version, can set manually to be compat with prev weights", "\n", "self", ".", "scale", "=", "qk_scale", "or", "head_dim", "**", "-", "0.5", "\n", "\n", "self", ".", "qkv", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", "*", "3", ",", "bias", "=", "qkv_bias", ")", "\n", "self", ".", "attn_drop", "=", "nn", ".", "Dropout", "(", "attn_drop", ")", "\n", "self", ".", "proj", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", ")", "\n", "self", ".", "proj_drop", "=", "nn", ".", "Dropout", "(", "proj_drop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.vit_pytorch.Attention.forward": [[132, 145], ["vit_pytorch.Attention.qkv().reshape().permute", "vit_pytorch.Attention.softmax", "vit_pytorch.Attention.attn_drop", "vit_pytorch.Attention.proj", "vit_pytorch.Attention.proj_drop", "vit_pytorch.Attention.qkv().reshape", "k.transpose", "vit_pytorch.Attention.qkv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "B", ",", "N", ",", "C", "=", "x", ".", "shape", "\n", "qkv", "=", "self", ".", "qkv", "(", "x", ")", ".", "reshape", "(", "B", ",", "N", ",", "3", ",", "self", ".", "num_heads", ",", "C", "//", "self", ".", "num_heads", ")", ".", "permute", "(", "2", ",", "0", ",", "3", ",", "1", ",", "4", ")", "\n", "q", ",", "k", ",", "v", "=", "qkv", "[", "0", "]", ",", "qkv", "[", "1", "]", ",", "qkv", "[", "2", "]", "# make torchscript happy (cannot use tensor as tuple)", "\n", "\n", "attn", "=", "(", "q", "@", "k", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ")", "*", "self", ".", "scale", "\n", "attn", "=", "attn", ".", "softmax", "(", "dim", "=", "-", "1", ")", "\n", "attn", "=", "self", ".", "attn_drop", "(", "attn", ")", "\n", "\n", "x", "=", "(", "attn", "@", "v", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "reshape", "(", "B", ",", "N", ",", "C", ")", "\n", "x", "=", "self", ".", "proj", "(", "x", ")", "\n", "x", "=", "self", ".", "proj_drop", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.vit_pytorch.Block.__init__": [[149, 160], ["torch.Module.__init__", "norm_layer", "vit_pytorch.Attention", "norm_layer", "int", "vit_pytorch.Mlp", "vit_pytorch.DropPath", "torch.Identity", "torch.Identity", "torch.Identity"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.softmax_loss.LabelSmoothingCrossEntropy.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "num_heads", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "drop", "=", "0.", ",", "attn_drop", "=", "0.", ",", "\n", "drop_path", "=", "0.", ",", "act_layer", "=", "nn", ".", "GELU", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "norm1", "=", "norm_layer", "(", "dim", ")", "\n", "self", ".", "attn", "=", "Attention", "(", "\n", "dim", ",", "num_heads", "=", "num_heads", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "attn_drop", "=", "attn_drop", ",", "proj_drop", "=", "drop", ")", "\n", "# NOTE: drop path for stochastic depth, we shall see if this is better than dropout here", "\n", "self", ".", "drop_path", "=", "DropPath", "(", "drop_path", ")", "if", "drop_path", ">", "0.", "else", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "norm2", "=", "norm_layer", "(", "dim", ")", "\n", "mlp_hidden_dim", "=", "int", "(", "dim", "*", "mlp_ratio", ")", "\n", "self", ".", "mlp", "=", "Mlp", "(", "in_features", "=", "dim", ",", "hidden_features", "=", "mlp_hidden_dim", ",", "act_layer", "=", "act_layer", ",", "drop", "=", "drop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.vit_pytorch.Block.forward": [[161, 165], ["vit_pytorch.Block.drop_path", "vit_pytorch.Block.drop_path", "vit_pytorch.Block.attn", "vit_pytorch.Block.mlp", "vit_pytorch.Block.norm1", "vit_pytorch.Block.norm2"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.vit_pytorch.drop_path", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.vit_pytorch.drop_path"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", "+", "self", ".", "drop_path", "(", "self", ".", "attn", "(", "self", ".", "norm1", "(", "x", ")", ")", ")", "\n", "x", "=", "x", "+", "self", ".", "drop_path", "(", "self", ".", "mlp", "(", "self", ".", "norm2", "(", "x", ")", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.vit_pytorch.IBN.__init__": [[167, 174], ["torch.Module.__init__", "int", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.softmax_loss.LabelSmoothingCrossEntropy.__init__"], ["    ", "def", "__init__", "(", "self", ",", "planes", ")", ":", "\n", "        ", "super", "(", "IBN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "half1", "=", "int", "(", "planes", "/", "2", ")", "\n", "self", ".", "half", "=", "half1", "\n", "half2", "=", "planes", "-", "half1", "\n", "self", ".", "IN", "=", "nn", ".", "InstanceNorm2d", "(", "half1", ",", "affine", "=", "True", ")", "\n", "self", ".", "BN", "=", "nn", ".", "BatchNorm2d", "(", "half2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.vit_pytorch.IBN.forward": [[175, 181], ["torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "vit_pytorch.IBN.IN", "vit_pytorch.IBN.BN", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "split[].contiguous", "split[].contiguous"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "split", "=", "torch", ".", "split", "(", "x", ",", "self", ".", "half", ",", "1", ")", "\n", "out1", "=", "self", ".", "IN", "(", "split", "[", "0", "]", ".", "contiguous", "(", ")", ")", "\n", "out2", "=", "self", ".", "BN", "(", "split", "[", "1", "]", ".", "contiguous", "(", ")", ")", "\n", "out", "=", "torch", ".", "cat", "(", "(", "out1", ",", "out2", ")", ",", "1", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.vit_pytorch.PatchEmbed.__init__": [[185, 216], ["torch.Module.__init__", "to_2tuple", "to_2tuple", "to_2tuple", "print", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "vit_pytorch.IBN", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "vit_pytorch.IBN", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.softmax_loss.LabelSmoothingCrossEntropy.__init__"], ["def", "__init__", "(", "self", ",", "img_size", "=", "224", ",", "patch_size", "=", "16", ",", "stride_size", "=", "16", ",", "in_chans", "=", "3", ",", "embed_dim", "=", "768", ",", "stem_conv", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "img_size", "=", "to_2tuple", "(", "img_size", ")", "\n", "patch_size", "=", "to_2tuple", "(", "patch_size", ")", "\n", "stride_size_tuple", "=", "to_2tuple", "(", "stride_size", ")", "\n", "self", ".", "num_x", "=", "(", "img_size", "[", "1", "]", "-", "patch_size", "[", "1", "]", ")", "//", "stride_size_tuple", "[", "1", "]", "+", "1", "\n", "self", ".", "num_y", "=", "(", "img_size", "[", "0", "]", "-", "patch_size", "[", "0", "]", ")", "//", "stride_size_tuple", "[", "0", "]", "+", "1", "\n", "print", "(", "'using stride: {}, and patch number is num_y{} * num_x{}'", ".", "format", "(", "stride_size", ",", "self", ".", "num_y", ",", "self", ".", "num_x", ")", ")", "\n", "self", ".", "num_patches", "=", "self", ".", "num_x", "*", "self", ".", "num_y", "\n", "self", ".", "img_size", "=", "img_size", "\n", "self", ".", "patch_size", "=", "patch_size", "\n", "\n", "self", ".", "stem_conv", "=", "stem_conv", "\n", "if", "self", ".", "stem_conv", ":", "\n", "            ", "hidden_dim", "=", "64", "\n", "stem_stride", "=", "2", "\n", "stride_size", "=", "patch_size", "=", "patch_size", "[", "0", "]", "//", "stem_stride", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_chans", ",", "hidden_dim", ",", "kernel_size", "=", "7", ",", "stride", "=", "stem_stride", ",", "padding", "=", "3", ",", "bias", "=", "False", ")", ",", "\n", "IBN", "(", "hidden_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "hidden_dim", ",", "hidden_dim", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "IBN", "(", "hidden_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "hidden_dim", ",", "hidden_dim", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "hidden_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "in_chans", "=", "hidden_dim", "\n", "\n", "", "self", ".", "proj", "=", "nn", ".", "Conv2d", "(", "in_chans", ",", "embed_dim", ",", "kernel_size", "=", "patch_size", ",", "stride", "=", "stride_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.vit_pytorch.PatchEmbed.forward": [[217, 223], ["vit_pytorch.PatchEmbed.proj", "vit_pytorch.PatchEmbed.flatten().transpose", "vit_pytorch.PatchEmbed.conv", "vit_pytorch.PatchEmbed.flatten"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "stem_conv", ":", "\n", "            ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "", "x", "=", "self", ".", "proj", "(", "x", ")", "\n", "x", "=", "x", ".", "flatten", "(", "2", ")", ".", "transpose", "(", "1", ",", "2", ")", "# [64, 8, 768]", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.vit_pytorch.TransReID.__init__": [[228, 281], ["functools.partial", "torch.Module.__init__", "vit_pytorch.PatchEmbed", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "norm_layer", "vit_pytorch.trunc_normal_", "vit_pytorch.trunc_normal_", "vit_pytorch.TransReID.apply", "vit_pytorch.GeneralizedMeanPooling", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "print", "torch.Parameter", "torch.Parameter", "torch.Parameter", "vit_pytorch.trunc_normal_", "x.item", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Identity", "torch.Identity", "torch.Identity", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.Parameter", "torch.Parameter", "torch.Parameter", "vit_pytorch.trunc_normal_", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "vit_pytorch.Block", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.Parameter", "torch.Parameter", "torch.Parameter", "vit_pytorch.trunc_normal_", "range", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.softmax_loss.LabelSmoothingCrossEntropy.__init__", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.vit_pytorch.trunc_normal_", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.vit_pytorch.trunc_normal_", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.vit_pytorch.trunc_normal_", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.vit_pytorch.trunc_normal_", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.vit_pytorch.trunc_normal_"], ["def", "__init__", "(", "self", ",", "img_size", "=", "224", ",", "patch_size", "=", "16", ",", "stride_size", "=", "16", ",", "in_chans", "=", "3", ",", "num_classes", "=", "1000", ",", "embed_dim", "=", "768", ",", "depth", "=", "12", ",", "num_heads", "=", "12", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "drop_rate", "=", "0.", ",", "attn_drop_rate", "=", "0.", ",", "camera", "=", "0", ",", "view", "=", "0", ",", "drop_path_rate", "=", "0.", ",", "norm_layer", "=", "partial", "(", "nn", ".", "LayerNorm", ",", "eps", "=", "1e-6", ")", ",", "local_feature", "=", "False", ",", "sie_xishu", "=", "1.0", ",", "hw_ratio", "=", "1", ",", "gem_pool", "=", "False", ",", "stem_conv", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "num_features", "=", "self", ".", "embed_dim", "=", "embed_dim", "# num_features for consistency with other models", "\n", "self", ".", "local_feature", "=", "local_feature", "\n", "self", ".", "patch_embed", "=", "PatchEmbed", "(", "\n", "img_size", "=", "img_size", ",", "patch_size", "=", "patch_size", ",", "stride_size", "=", "stride_size", ",", "in_chans", "=", "in_chans", ",", "\n", "embed_dim", "=", "embed_dim", ",", "stem_conv", "=", "stem_conv", ")", "\n", "\n", "num_patches", "=", "self", ".", "patch_embed", ".", "num_patches", "\n", "\n", "self", ".", "cls_token", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "1", ",", "embed_dim", ")", ")", "\n", "self", ".", "pos_embed", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "num_patches", "+", "1", ",", "embed_dim", ")", ")", "\n", "self", ".", "cam_num", "=", "camera", "\n", "self", ".", "view_num", "=", "view", "\n", "self", ".", "sie_xishu", "=", "sie_xishu", "\n", "self", ".", "in_planes", "=", "768", "\n", "self", ".", "gem_pool", "=", "gem_pool", "\n", "if", "self", ".", "gem_pool", ":", "\n", "            ", "print", "(", "'using gem pooling'", ")", "\n", "# Initialize SIE Embedding", "\n", "", "if", "camera", ">", "1", "and", "view", ">", "1", ":", "\n", "            ", "self", ".", "sie_embed", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "camera", "*", "view", ",", "1", ",", "embed_dim", ")", ")", "\n", "trunc_normal_", "(", "self", ".", "sie_embed", ",", "std", "=", ".02", ")", "\n", "", "elif", "camera", ">", "1", ":", "\n", "            ", "self", ".", "sie_embed", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "camera", ",", "1", ",", "embed_dim", ")", ")", "\n", "trunc_normal_", "(", "self", ".", "sie_embed", ",", "std", "=", ".02", ")", "\n", "", "elif", "view", ">", "1", ":", "\n", "            ", "self", ".", "sie_embed", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "view", ",", "1", ",", "embed_dim", ")", ")", "\n", "trunc_normal_", "(", "self", ".", "sie_embed", ",", "std", "=", ".02", ")", "\n", "\n", "#  print('using drop_out rate is : {}'.format(drop_rate))", "\n", "#  print('using attn_drop_out rate is : {}'.format(attn_drop_rate))", "\n", "#  print('using drop_path rate is : {}'.format(drop_path_rate))", "\n", "\n", "", "self", ".", "pos_drop", "=", "nn", ".", "Dropout", "(", "p", "=", "drop_rate", ")", "\n", "dpr", "=", "[", "x", ".", "item", "(", ")", "for", "x", "in", "torch", ".", "linspace", "(", "0", ",", "drop_path_rate", ",", "depth", ")", "]", "# stochastic depth decay rule", "\n", "\n", "self", ".", "blocks", "=", "nn", ".", "ModuleList", "(", "[", "\n", "Block", "(", "\n", "dim", "=", "embed_dim", ",", "num_heads", "=", "num_heads", ",", "mlp_ratio", "=", "mlp_ratio", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "attn_drop", "=", "attn_drop_rate", ",", "drop_path", "=", "dpr", "[", "i", "]", ",", "norm_layer", "=", "norm_layer", ")", "\n", "for", "i", "in", "range", "(", "depth", ")", "]", ")", "\n", "\n", "self", ".", "norm", "=", "norm_layer", "(", "embed_dim", ")", "\n", "\n", "# Classifier head", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "embed_dim", ",", "num_classes", ")", "if", "num_classes", ">", "0", "else", "nn", ".", "Identity", "(", ")", "\n", "trunc_normal_", "(", "self", ".", "cls_token", ",", "std", "=", ".02", ")", "\n", "trunc_normal_", "(", "self", ".", "pos_embed", ",", "std", "=", ".02", ")", "\n", "\n", "self", ".", "apply", "(", "self", ".", "_init_weights", ")", "\n", "self", ".", "gem", "=", "GeneralizedMeanPooling", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.vit_pytorch.TransReID._init_weights": [[282, 290], ["isinstance", "vit_pytorch.trunc_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.vit_pytorch.trunc_normal_"], ["", "def", "_init_weights", "(", "self", ",", "m", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "trunc_normal_", "(", "m", ".", "weight", ",", "std", "=", ".02", ")", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "LayerNorm", ")", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.vit_pytorch.TransReID.no_weight_decay": [[291, 294], ["None"], "methods", ["None"], ["", "", "@", "torch", ".", "jit", ".", "ignore", "\n", "def", "no_weight_decay", "(", "self", ")", ":", "\n", "        ", "return", "{", "'pos_embed'", ",", "'cls_token'", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.vit_pytorch.TransReID.get_classifier": [[295, 297], ["None"], "methods", ["None"], ["", "def", "get_classifier", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "head", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.vit_pytorch.TransReID.reset_classifier": [[298, 301], ["torch.Linear", "torch.Linear", "torch.Linear", "torch.Identity", "torch.Identity", "torch.Identity"], "methods", ["None"], ["", "def", "reset_classifier", "(", "self", ",", "num_classes", ",", "global_pool", "=", "''", ")", ":", "\n", "        ", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "self", ".", "embed_dim", ",", "num_classes", ")", "if", "num_classes", ">", "0", "else", "nn", ".", "Identity", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.vit_pytorch.TransReID.forward_features": [[302, 333], ["vit_pytorch.TransReID.patch_embed", "vit_pytorch.TransReID.cls_token.expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "vit_pytorch.TransReID.pos_drop", "vit_pytorch.TransReID.norm", "vit_pytorch.TransReID.gem().squeeze", "blk", "blk", "vit_pytorch.TransReID.gem", "x[].permute"], "methods", ["None"], ["", "def", "forward_features", "(", "self", ",", "x", ",", "camera_id", ",", "view_id", ")", ":", "\n", "        ", "B", "=", "x", ".", "shape", "[", "0", "]", "\n", "x", "=", "self", ".", "patch_embed", "(", "x", ")", "\n", "\n", "cls_tokens", "=", "self", ".", "cls_token", ".", "expand", "(", "B", ",", "-", "1", ",", "-", "1", ")", "# stole cls_tokens impl from Phil Wang, thanks", "\n", "x", "=", "torch", ".", "cat", "(", "(", "cls_tokens", ",", "x", ")", ",", "dim", "=", "1", ")", "\n", "\n", "if", "self", ".", "cam_num", ">", "0", "and", "self", ".", "view_num", ">", "0", ":", "\n", "            ", "x", "=", "x", "+", "self", ".", "pos_embed", "+", "self", ".", "sie_xishu", "*", "self", ".", "sie_embed", "[", "camera_id", "*", "self", ".", "view_num", "+", "view_id", "]", "\n", "", "elif", "self", ".", "cam_num", ">", "0", ":", "\n", "            ", "x", "=", "x", "+", "self", ".", "pos_embed", "+", "self", ".", "sie_xishu", "*", "self", ".", "sie_embed", "[", "camera_id", "]", "\n", "", "elif", "self", ".", "view_num", ">", "0", ":", "\n", "            ", "x", "=", "x", "+", "self", ".", "pos_embed", "+", "self", ".", "sie_xishu", "*", "self", ".", "sie_embed", "[", "view_id", "]", "\n", "", "else", ":", "\n", "            ", "x", "=", "x", "+", "self", ".", "pos_embed", "\n", "\n", "", "x", "=", "self", ".", "pos_drop", "(", "x", ")", "\n", "\n", "if", "self", ".", "local_feature", ":", "\n", "            ", "for", "blk", "in", "self", ".", "blocks", "[", ":", "-", "1", "]", ":", "\n", "                ", "x", "=", "blk", "(", "x", ")", "\n", "", "return", "x", "\n", "", "else", ":", "\n", "            ", "for", "blk", "in", "self", ".", "blocks", ":", "\n", "                ", "x", "=", "blk", "(", "x", ")", "\n", "\n", "", "x", "=", "self", ".", "norm", "(", "x", ")", "\n", "", "if", "self", ".", "gem_pool", ":", "\n", "            ", "gf", "=", "self", ".", "gem", "(", "x", "[", ":", ",", "1", ":", "]", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ")", ".", "squeeze", "(", ")", "\n", "return", "x", "[", ":", ",", "0", "]", "+", "gf", "\n", "", "return", "x", "[", ":", ",", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.vit_pytorch.TransReID.forward": [[334, 337], ["vit_pytorch.TransReID.forward_features"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.vit_pytorch.TransReID.forward_features"], ["", "def", "forward", "(", "self", ",", "x", ",", "cam_label", "=", "None", ",", "view_label", "=", "None", ")", ":", "\n", "        ", "x", "=", "self", ".", "forward_features", "(", "x", ",", "cam_label", ",", "view_label", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.vit_pytorch.TransReID.load_param": [[338, 378], ["torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load.items", "torch.load.items", "torch.load.items", "print", "print", "obj.items", "k.replace.replace.startswith", "k.replace.replace.replace", "torch.cat.reshape", "torch.cat.reshape", "torch.cat.reshape", "[].copy_", "k.replace.replace.replace", "k.replace.replace.startswith", "len", "vit_pytorch.resize_pos_embed", "print", "print", "len", "print", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "vit_pytorch.TransReID.state_dict().keys", "vit_pytorch.TransReID.state_dict", "vit_pytorch.TransReID.state_dict", "vit_pytorch.TransReID.state_dict"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.vit_pytorch.resize_pos_embed", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.solver.scheduler.Scheduler.state_dict", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.solver.scheduler.Scheduler.state_dict", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.solver.scheduler.Scheduler.state_dict"], ["", "def", "load_param", "(", "self", ",", "model_path", ",", "hw_ratio", ")", ":", "\n", "        ", "param_dict", "=", "torch", ".", "load", "(", "model_path", ",", "map_location", "=", "'cpu'", ")", "\n", "count", "=", "0", "\n", "if", "'model'", "in", "param_dict", ":", "\n", "            ", "param_dict", "=", "param_dict", "[", "'model'", "]", "\n", "", "if", "'state_dict'", "in", "param_dict", ":", "\n", "            ", "param_dict", "=", "param_dict", "[", "'state_dict'", "]", "\n", "", "if", "'teacher'", "in", "param_dict", ":", "### for dino", "\n", "            ", "obj", "=", "param_dict", "[", "\"teacher\"", "]", "\n", "print", "(", "'Convert dino model......'", ")", "\n", "newmodel", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "obj", ".", "items", "(", ")", ":", "\n", "                ", "if", "k", ".", "startswith", "(", "\"module.\"", ")", ":", "\n", "                    ", "k", "=", "k", ".", "replace", "(", "\"module.\"", ",", "\"\"", ")", "\n", "", "if", "not", "k", ".", "startswith", "(", "\"backbone.\"", ")", ":", "\n", "                    ", "continue", "\n", "", "old_k", "=", "k", "\n", "k", "=", "k", ".", "replace", "(", "\"backbone.\"", ",", "\"\"", ")", "\n", "newmodel", "[", "k", "]", "=", "v", "\n", "param_dict", "=", "newmodel", "\n", "", "", "for", "k", ",", "v", "in", "param_dict", ".", "items", "(", ")", ":", "\n", "            ", "if", "'head'", "in", "k", "or", "'dist'", "in", "k", "or", "'pre_logits'", "in", "k", ":", "\n", "                ", "continue", "\n", "", "if", "'patch_embed.proj.weight'", "in", "k", "and", "len", "(", "v", ".", "shape", ")", "<", "4", ":", "\n", "# For old models that I trained prior to conv based patchification", "\n", "                ", "O", ",", "I", ",", "H", ",", "W", "=", "self", ".", "patch_embed", ".", "proj", ".", "weight", ".", "shape", "\n", "v", "=", "v", ".", "reshape", "(", "O", ",", "-", "1", ",", "H", ",", "W", ")", "\n", "", "elif", "k", "==", "'pos_embed'", "and", "v", ".", "shape", "!=", "self", ".", "pos_embed", ".", "shape", ":", "\n", "# To resize pos embedding when using model at different size from pretrained weights", "\n", "                ", "if", "'distilled'", "in", "model_path", ":", "\n", "                    ", "print", "(", "'distill need to choose right cls token in the pth'", ")", "\n", "v", "=", "torch", ".", "cat", "(", "[", "v", "[", ":", ",", "0", ":", "1", "]", ",", "v", "[", ":", ",", "2", ":", "]", "]", ",", "dim", "=", "1", ")", "\n", "", "v", "=", "resize_pos_embed", "(", "v", ",", "self", ".", "pos_embed", ",", "self", ".", "patch_embed", ".", "num_y", ",", "self", ".", "patch_embed", ".", "num_x", ",", "hw_ratio", ")", "\n", "", "try", ":", "\n", "                ", "self", ".", "state_dict", "(", ")", "[", "k", "]", ".", "copy_", "(", "v", ")", "\n", "count", "+=", "1", "\n", "", "except", ":", "\n", "                ", "print", "(", "'===========================ERROR========================='", ")", "\n", "print", "(", "'shape do not match in k :{}: param_dict{} vs self.state_dict(){}'", ".", "format", "(", "k", ",", "v", ".", "shape", ",", "self", ".", "state_dict", "(", ")", "[", "k", "]", ".", "shape", ")", ")", "\n", "", "", "print", "(", "'Load %d / %d layers.'", "%", "(", "count", ",", "len", "(", "self", ".", "state_dict", "(", ")", ".", "keys", "(", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.vit_pytorch._ntuple": [[34, 40], ["isinstance", "tuple", "itertools.repeat"], "function", ["None"], ["def", "_ntuple", "(", "n", ")", ":", "\n", "    ", "def", "parse", "(", "x", ")", ":", "\n", "        ", "if", "isinstance", "(", "x", ",", "container_abcs", ".", "Iterable", ")", ":", "\n", "            ", "return", "x", "\n", "", "return", "tuple", "(", "repeat", "(", "x", ",", "n", ")", ")", "\n", "", "return", "parse", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.vit_pytorch.drop_path": [[70, 88], ["random_tensor.floor_", "torch.rand", "torch.rand", "torch.rand", "x.div"], "function", ["None"], ["", "", "def", "drop_path", "(", "x", ",", "drop_prob", ":", "float", "=", "0.", ",", "training", ":", "bool", "=", "False", ")", ":", "\n", "    ", "\"\"\"Drop paths (Stochastic Depth) per sample (when applied in main path of residual blocks).\n\n    This is the same as the DropConnect impl I created for EfficientNet, etc networks, however,\n    the original name is misleading as 'Drop Connect' is a different form of dropout in a separate paper...\n    See discussion: https://github.com/tensorflow/tpu/issues/494#issuecomment-532968956 ... I've opted for\n    changing the layer and argument names to 'drop path' rather than mix DropConnect as a layer name and use\n    'survival rate' as the argument.\n\n    \"\"\"", "\n", "if", "drop_prob", "==", "0.", "or", "not", "training", ":", "\n", "        ", "return", "x", "\n", "", "keep_prob", "=", "1", "-", "drop_prob", "\n", "shape", "=", "(", "x", ".", "shape", "[", "0", "]", ",", ")", "+", "(", "1", ",", ")", "*", "(", "x", ".", "ndim", "-", "1", ")", "# work with diff dim tensors, not just 2D ConvNets", "\n", "random_tensor", "=", "keep_prob", "+", "torch", ".", "rand", "(", "shape", ",", "dtype", "=", "x", ".", "dtype", ",", "device", "=", "x", ".", "device", ")", "\n", "random_tensor", ".", "floor_", "(", ")", "# binarize", "\n", "output", "=", "x", ".", "div", "(", "keep_prob", ")", "*", "random_tensor", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.vit_pytorch.resize_pos_embed": [[380, 396], ["int", "print", "posemb_grid.permute().reshape.reshape().permute", "torch.interpolate", "posemb_grid.permute().reshape.permute().reshape", "torch.cat", "torch.cat", "torch.cat", "math.sqrt", "posemb_grid.permute().reshape.reshape", "posemb_grid.permute().reshape.permute", "len"], "function", ["None"], ["", "", "def", "resize_pos_embed", "(", "posemb", ",", "posemb_new", ",", "hight", ",", "width", ",", "hw_ratio", ")", ":", "\n", "# Rescale the grid of position embeddings when loading from state_dict. Adapted from", "\n", "# https://github.com/google-research/vision_transformer/blob/00883dd691c63a6830751563748663526e811cee/vit_jax/checkpoint.py#L224", "\n", "    ", "ntok_new", "=", "posemb_new", ".", "shape", "[", "1", "]", "\n", "\n", "posemb_token", ",", "posemb_grid", "=", "posemb", "[", ":", ",", ":", "1", "]", ",", "posemb", "[", "0", ",", "1", ":", "]", "\n", "ntok_new", "-=", "1", "\n", "\n", "gs_old_h", "=", "int", "(", "math", ".", "sqrt", "(", "len", "(", "posemb_grid", ")", "*", "hw_ratio", ")", ")", "\n", "gs_old_w", "=", "gs_old_h", "//", "hw_ratio", "\n", "print", "(", "'Resized position embedding from size:{} to size: {} with height:{} width: {}'", ".", "format", "(", "posemb", ".", "shape", ",", "posemb_new", ".", "shape", ",", "hight", ",", "width", ")", ")", "\n", "posemb_grid", "=", "posemb_grid", ".", "reshape", "(", "1", ",", "gs_old_h", ",", "gs_old_w", ",", "-", "1", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "posemb_grid", "=", "F", ".", "interpolate", "(", "posemb_grid", ",", "size", "=", "(", "hight", ",", "width", ")", ",", "mode", "=", "'bilinear'", ")", "\n", "posemb_grid", "=", "posemb_grid", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "reshape", "(", "1", ",", "hight", "*", "width", ",", "-", "1", ")", "\n", "posemb", "=", "torch", ".", "cat", "(", "[", "posemb_token", ",", "posemb_grid", "]", ",", "dim", "=", "1", ")", "\n", "return", "posemb", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.vit_pytorch.vit_base_patch16_224_TransReID": [[398, 401], ["vit_pytorch.TransReID"], "function", ["None"], ["", "def", "vit_base_patch16_224_TransReID", "(", "img_size", "=", "(", "256", ",", "128", ")", ",", "stride_size", "=", "16", ",", "drop_path_rate", "=", "0.1", ",", "camera", "=", "0", ",", "view", "=", "0", ",", "local_feature", "=", "False", ",", "sie_xishu", "=", "1.5", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "TransReID", "(", "img_size", "=", "img_size", ",", "patch_size", "=", "16", ",", "stride_size", "=", "stride_size", ",", "embed_dim", "=", "768", ",", "depth", "=", "12", ",", "num_heads", "=", "12", ",", "mlp_ratio", "=", "4", ",", "qkv_bias", "=", "True", ",", "camera", "=", "camera", ",", "view", "=", "view", ",", "drop_path_rate", "=", "drop_path_rate", ",", "sie_xishu", "=", "sie_xishu", ",", "local_feature", "=", "local_feature", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.vit_pytorch.vit_small_patch16_224_TransReID": [[402, 406], ["vit_pytorch.TransReID"], "function", ["None"], ["", "def", "vit_small_patch16_224_TransReID", "(", "img_size", "=", "(", "256", ",", "128", ")", ",", "stride_size", "=", "16", ",", "drop_path_rate", "=", "0.1", ",", "camera", "=", "0", ",", "view", "=", "0", ",", "local_feature", "=", "False", ",", "sie_xishu", "=", "1.5", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "TransReID", "(", "img_size", "=", "img_size", ",", "patch_size", "=", "16", ",", "stride_size", "=", "stride_size", ",", "embed_dim", "=", "384", ",", "depth", "=", "12", ",", "num_heads", "=", "6", ",", "mlp_ratio", "=", "4", ",", "qkv_bias", "=", "True", ",", "drop_path_rate", "=", "drop_path_rate", ",", "camera", "=", "camera", ",", "view", "=", "view", ",", "sie_xishu", "=", "sie_xishu", ",", "local_feature", "=", "local_feature", ",", "**", "kwargs", ")", "\n", "model", ".", "in_planes", "=", "384", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.vit_pytorch._no_grad_trunc_normal_": [[408, 441], ["print", "torch.no_grad", "torch.no_grad", "torch.no_grad", "vit_pytorch._no_grad_trunc_normal_.norm_cdf"], "function", ["None"], ["", "def", "_no_grad_trunc_normal_", "(", "tensor", ",", "mean", ",", "std", ",", "a", ",", "b", ")", ":", "\n", "# Cut & paste from PyTorch official master until it's in a few official releases - RW", "\n", "# Method based on https://people.sc.fsu.edu/~jburkardt/presentations/truncated_normal.pdf", "\n", "    ", "def", "norm_cdf", "(", "x", ")", ":", "\n", "# Computes standard normal cumulative distribution function", "\n", "        ", "return", "(", "1.", "+", "math", ".", "erf", "(", "x", "/", "math", ".", "sqrt", "(", "2.", ")", ")", ")", "/", "2.", "\n", "\n", "", "if", "(", "mean", "<", "a", "-", "2", "*", "std", ")", "or", "(", "mean", ">", "b", "+", "2", "*", "std", ")", ":", "\n", "        ", "print", "(", "\"mean is more than 2 std from [a, b] in nn.init.trunc_normal_. \"", "\n", "\"The distribution of values may be incorrect.\"", ",", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# Values are generated by using a truncated uniform distribution and", "\n", "# then using the inverse CDF for the normal distribution.", "\n", "# Get upper and lower cdf values", "\n", "        ", "l", "=", "norm_cdf", "(", "(", "a", "-", "mean", ")", "/", "std", ")", "\n", "u", "=", "norm_cdf", "(", "(", "b", "-", "mean", ")", "/", "std", ")", "\n", "\n", "# Uniformly fill tensor with values from [l, u], then translate to", "\n", "# [2l-1, 2u-1].", "\n", "tensor", ".", "uniform_", "(", "2", "*", "l", "-", "1", ",", "2", "*", "u", "-", "1", ")", "\n", "\n", "# Use inverse cdf transform for normal distribution to get truncated", "\n", "# standard normal", "\n", "tensor", ".", "erfinv_", "(", ")", "\n", "\n", "# Transform to proper mean, std", "\n", "tensor", ".", "mul_", "(", "std", "*", "math", ".", "sqrt", "(", "2.", ")", ")", "\n", "tensor", ".", "add_", "(", "mean", ")", "\n", "\n", "# Clamp to ensure it's in the proper range", "\n", "tensor", ".", "clamp_", "(", "min", "=", "a", ",", "max", "=", "b", ")", "\n", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.vit_pytorch.trunc_normal_": [[443, 462], ["vit_pytorch._no_grad_trunc_normal_"], "function", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.backbones.vit_pytorch._no_grad_trunc_normal_"], ["", "", "def", "trunc_normal_", "(", "tensor", ",", "mean", "=", "0.", ",", "std", "=", "1.", ",", "a", "=", "-", "2.", ",", "b", "=", "2.", ")", ":", "\n", "# type: (Tensor, float, float, float, float) -> Tensor", "\n", "    ", "r\"\"\"Fills the input Tensor with values drawn from a truncated\n    normal distribution. The values are effectively drawn from the\n    normal distribution :math:`\\mathcal{N}(\\text{mean}, \\text{std}^2)`\n    with values outside :math:`[a, b]` redrawn until they are within\n    the bounds. The method used for generating the random values works\n    best when :math:`a \\leq \\text{mean} \\leq b`.\n    Args:\n        tensor: an n-dimensional `torch.Tensor`\n        mean: the mean of the normal distribution\n        std: the standard deviation of the normal distribution\n        a: the minimum cutoff value\n        b: the maximum cutoff value\n    Examples:\n        >>> w = torch.empty(3, 5)\n        >>> nn.init.trunc_normal_(w)\n    \"\"\"", "\n", "return", "_no_grad_trunc_normal_", "(", "tensor", ",", "mean", ",", "std", ",", "a", ",", "b", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.processor.processor.do_train": [[11, 144], ["logging.getLogger", "logging.getLogger.info", "utils.meter.AverageMeter", "utils.meter.AverageMeter", "utils.metrics.R1_mAP_eval", "torch.cuda.amp.GradScaler", "range", "torch.nn.parallel.DistributedDataParallel.to", "time.time", "utils.meter.AverageMeter.reset", "utils.meter.AverageMeter.reset", "utils.metrics.R1_mAP_eval.reset", "torch.nn.parallel.DistributedDataParallel.train", "enumerate", "time.time", "logging.getLogger.info", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "optimizer.zero_grad", "optimizer_center.zero_grad", "img.to.to", "vid.to", "target_cam.to.to", "target_view.to.to", "amp.GradScaler.scale().backward", "amp.GradScaler.step", "amp.GradScaler.update", "isinstance", "utils.meter.AverageMeter.update", "utils.meter.AverageMeter.update", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "scheduler.step", "scheduler.step", "logging.getLogger.info", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.amp.autocast", "torch.nn.parallel.DistributedDataParallel.", "loss_fn", "center_criterion.parameters", "amp.GradScaler.step", "amp.GradScaler.update", "loss_fn.item", "torch.save", "torch.save", "torch.save", "torch.nn.parallel.DistributedDataParallel.eval", "enumerate", "utils.metrics.R1_mAP_eval.compute", "logging.getLogger.info", "logging.getLogger.info", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "amp.GradScaler.scale", "torch.get_rank", "logging.getLogger.info", "torch.get_rank", "torch.save", "torch.save", "torch.save", "torch.nn.parallel.DistributedDataParallel.state_dict", "os.path.join", "torch.get_rank", "torch.nn.parallel.DistributedDataParallel.eval", "enumerate", "utils.metrics.R1_mAP_eval.compute", "logging.getLogger.info", "logging.getLogger.info", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "logging.getLogger.info", "logging.getLogger.info", "torch.nn.parallel.DistributedDataParallel.state_dict", "os.path.join", "logging.getLogger.info", "torch.no_grad", "torch.no_grad", "torch.no_grad", "img.to.to", "camids.to.to", "target_view.to.to", "torch.nn.parallel.DistributedDataParallel.", "utils.metrics.R1_mAP_eval.update", "scheduler._get_lr", "scheduler.get_lr", "len", "torch.no_grad", "torch.no_grad", "torch.no_grad", "img.to.to", "camids.to.to", "target_view.to.to", "torch.nn.parallel.DistributedDataParallel.", "utils.metrics.R1_mAP_eval.update", "scheduler._get_lr", "scheduler.get_lr", "len", "score[].max", "score.max"], "function", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.utils.meter.AverageMeter.reset", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.utils.meter.AverageMeter.reset", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.utils.meter.AverageMeter.reset", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.clustercontrast.trainers.ClusterContrastTrainer.train", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.models.cm.CM_Hard.backward", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.solver.scheduler.Scheduler.step", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.utils.MetricLogger.update", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.utils.MetricLogger.update", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.utils.MetricLogger.update", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.solver.scheduler.Scheduler.step", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.solver.scheduler.Scheduler.step", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.solver.scheduler.Scheduler.step", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.utils.MetricLogger.update", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.utils.metrics.R1_mAP_eval.compute", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.utils.get_rank", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.utils.get_rank", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.solver.scheduler.Scheduler.state_dict", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.utils.get_rank", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.utils.metrics.R1_mAP_eval.compute", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.solver.scheduler.Scheduler.state_dict", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.utils.MetricLogger.update", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.solver.cosine_lr.CosineLRScheduler._get_lr", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.solver.lr_scheduler.WarmupMultiStepLR.get_lr", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.utils.MetricLogger.update", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.solver.cosine_lr.CosineLRScheduler._get_lr", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.solver.lr_scheduler.WarmupMultiStepLR.get_lr", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.utils.SmoothedValue.max", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.utils.SmoothedValue.max"], ["def", "do_train", "(", "cfg", ",", "\n", "model", ",", "\n", "center_criterion", ",", "\n", "train_loader", ",", "\n", "val_loader", ",", "\n", "optimizer", ",", "\n", "optimizer_center", ",", "\n", "scheduler", ",", "\n", "loss_fn", ",", "\n", "num_query", ",", "local_rank", ")", ":", "\n", "    ", "log_period", "=", "cfg", ".", "SOLVER", ".", "LOG_PERIOD", "\n", "checkpoint_period", "=", "cfg", ".", "SOLVER", ".", "CHECKPOINT_PERIOD", "\n", "eval_period", "=", "cfg", ".", "SOLVER", ".", "EVAL_PERIOD", "\n", "\n", "device", "=", "\"cuda\"", "\n", "epochs", "=", "cfg", ".", "SOLVER", ".", "MAX_EPOCHS", "\n", "\n", "logger", "=", "logging", ".", "getLogger", "(", "\"transreid.train\"", ")", "\n", "logger", ".", "info", "(", "'start training'", ")", "\n", "_LOCAL_PROCESS_GROUP", "=", "None", "\n", "if", "device", ":", "\n", "        ", "model", ".", "to", "(", "local_rank", ")", "\n", "if", "torch", ".", "cuda", ".", "device_count", "(", ")", ">", "1", "and", "cfg", ".", "MODEL", ".", "DIST_TRAIN", ":", "\n", "            ", "logger", ".", "info", "(", "'Using {} GPUs for training'", ".", "format", "(", "torch", ".", "cuda", ".", "device_count", "(", ")", ")", ")", "\n", "model", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "model", ",", "device_ids", "=", "[", "local_rank", "]", ",", "find_unused_parameters", "=", "True", ")", "\n", "\n", "", "", "loss_meter", "=", "AverageMeter", "(", ")", "\n", "acc_meter", "=", "AverageMeter", "(", ")", "\n", "\n", "evaluator", "=", "R1_mAP_eval", "(", "num_query", ",", "max_rank", "=", "50", ",", "feat_norm", "=", "cfg", ".", "TEST", ".", "FEAT_NORM", ")", "\n", "scaler", "=", "amp", ".", "GradScaler", "(", ")", "\n", "# train", "\n", "for", "epoch", "in", "range", "(", "1", ",", "epochs", "+", "1", ")", ":", "\n", "        ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "loss_meter", ".", "reset", "(", ")", "\n", "acc_meter", ".", "reset", "(", ")", "\n", "evaluator", ".", "reset", "(", ")", "\n", "model", ".", "train", "(", ")", "\n", "for", "n_iter", ",", "(", "img", ",", "vid", ",", "target_cam", ",", "target_view", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "            ", "optimizer", ".", "zero_grad", "(", ")", "\n", "optimizer_center", ".", "zero_grad", "(", ")", "\n", "img", "=", "img", ".", "to", "(", "device", ")", "\n", "target", "=", "vid", ".", "to", "(", "device", ")", "\n", "target_cam", "=", "target_cam", ".", "to", "(", "device", ")", "\n", "target_view", "=", "target_view", ".", "to", "(", "device", ")", "\n", "with", "amp", ".", "autocast", "(", "enabled", "=", "True", ")", ":", "\n", "                ", "score", ",", "feat", "=", "model", "(", "img", ",", "target", ",", "cam_label", "=", "target_cam", ",", "view_label", "=", "target_view", ")", "\n", "loss", "=", "loss_fn", "(", "score", ",", "feat", ",", "target", ",", "target_cam", ")", "\n", "\n", "", "scaler", ".", "scale", "(", "loss", ")", ".", "backward", "(", ")", "\n", "\n", "scaler", ".", "step", "(", "optimizer", ")", "\n", "scaler", ".", "update", "(", ")", "\n", "\n", "if", "'center'", "in", "cfg", ".", "MODEL", ".", "METRIC_LOSS_TYPE", ":", "\n", "                ", "for", "param", "in", "center_criterion", ".", "parameters", "(", ")", ":", "\n", "                    ", "param", ".", "grad", ".", "data", "*=", "(", "1.", "/", "cfg", ".", "SOLVER", ".", "CENTER_LOSS_WEIGHT", ")", "\n", "", "scaler", ".", "step", "(", "optimizer_center", ")", "\n", "scaler", ".", "update", "(", ")", "\n", "", "if", "isinstance", "(", "score", ",", "list", ")", ":", "\n", "                ", "acc", "=", "(", "score", "[", "0", "]", ".", "max", "(", "1", ")", "[", "1", "]", "==", "target", ")", ".", "float", "(", ")", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "                ", "acc", "=", "(", "score", ".", "max", "(", "1", ")", "[", "1", "]", "==", "target", ")", ".", "float", "(", ")", ".", "mean", "(", ")", "\n", "\n", "", "loss_meter", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "img", ".", "shape", "[", "0", "]", ")", "\n", "acc_meter", ".", "update", "(", "acc", ",", "1", ")", "\n", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "if", "cfg", ".", "MODEL", ".", "DIST_TRAIN", ":", "\n", "                ", "if", "dist", ".", "get_rank", "(", ")", "==", "0", ":", "\n", "                    ", "if", "(", "n_iter", "+", "1", ")", "%", "log_period", "==", "0", ":", "\n", "                        ", "base_lr", "=", "scheduler", ".", "_get_lr", "(", "epoch", ")", "[", "0", "]", "if", "cfg", ".", "SOLVER", ".", "WARMUP_METHOD", "==", "'cosine'", "else", "scheduler", ".", "get_lr", "(", ")", "[", "0", "]", "\n", "logger", ".", "info", "(", "\"Epoch[{}] Iter[{}/{}] Loss: {:.3f}, Acc: {:.3f}, Base Lr: {:.2e}\"", "\n", ".", "format", "(", "epoch", ",", "(", "n_iter", "+", "1", ")", ",", "len", "(", "train_loader", ")", ",", "loss_meter", ".", "avg", ",", "acc_meter", ".", "avg", ",", "base_lr", ")", ")", "\n", "", "", "", "else", ":", "\n", "                ", "if", "(", "n_iter", "+", "1", ")", "%", "log_period", "==", "0", ":", "\n", "                    ", "base_lr", "=", "scheduler", ".", "_get_lr", "(", "epoch", ")", "[", "0", "]", "if", "cfg", ".", "SOLVER", ".", "WARMUP_METHOD", "==", "'cosine'", "else", "scheduler", ".", "get_lr", "(", ")", "[", "0", "]", "\n", "logger", ".", "info", "(", "\"Epoch[{}] Iter[{}/{}] Loss: {:.3f}, Acc: {:.3f}, Base Lr: {:.2e}\"", "\n", ".", "format", "(", "epoch", ",", "(", "n_iter", "+", "1", ")", ",", "len", "(", "train_loader", ")", ",", "loss_meter", ".", "avg", ",", "acc_meter", ".", "avg", ",", "base_lr", ")", ")", "\n", "\n", "", "", "", "end_time", "=", "time", ".", "time", "(", ")", "\n", "time_per_batch", "=", "(", "end_time", "-", "start_time", ")", "/", "(", "n_iter", "+", "1", ")", "\n", "if", "cfg", ".", "SOLVER", ".", "WARMUP_METHOD", "==", "'cosine'", ":", "\n", "            ", "scheduler", ".", "step", "(", "epoch", ")", "\n", "", "else", ":", "\n", "            ", "scheduler", ".", "step", "(", ")", "\n", "", "if", "cfg", ".", "MODEL", ".", "DIST_TRAIN", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "logger", ".", "info", "(", "\"Epoch {} done. Time per epoch: {:.3f}[s] Speed: {:.1f}[samples/s]\"", "\n", ".", "format", "(", "epoch", ",", "time_per_batch", "*", "(", "n_iter", "+", "1", ")", ",", "train_loader", ".", "batch_size", "/", "time_per_batch", ")", ")", "\n", "\n", "", "if", "epoch", "%", "checkpoint_period", "==", "0", ":", "\n", "            ", "if", "cfg", ".", "MODEL", ".", "DIST_TRAIN", ":", "\n", "                ", "if", "dist", ".", "get_rank", "(", ")", "==", "0", ":", "\n", "                    ", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "cfg", ".", "OUTPUT_DIR", ",", "cfg", ".", "MODEL", ".", "NAME", "+", "'_{}.pth'", ".", "format", "(", "epoch", ")", ")", ")", "\n", "", "", "else", ":", "\n", "                ", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "cfg", ".", "OUTPUT_DIR", ",", "cfg", ".", "MODEL", ".", "NAME", "+", "'_{}.pth'", ".", "format", "(", "epoch", ")", ")", ")", "\n", "\n", "", "", "if", "epoch", "%", "eval_period", "==", "0", ":", "\n", "            ", "if", "cfg", ".", "MODEL", ".", "DIST_TRAIN", ":", "\n", "                ", "if", "dist", ".", "get_rank", "(", ")", "==", "0", ":", "\n", "                    ", "model", ".", "eval", "(", ")", "\n", "for", "n_iter", ",", "(", "img", ",", "vid", ",", "camid", ",", "camids", ",", "target_view", ",", "_", ")", "in", "enumerate", "(", "val_loader", ")", ":", "\n", "                        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                            ", "img", "=", "img", ".", "to", "(", "device", ")", "\n", "camids", "=", "camids", ".", "to", "(", "device", ")", "\n", "target_view", "=", "target_view", ".", "to", "(", "device", ")", "\n", "feat", "=", "model", "(", "img", ",", "cam_label", "=", "camids", ",", "view_label", "=", "target_view", ")", "\n", "evaluator", ".", "update", "(", "(", "feat", ",", "vid", ",", "camid", ")", ")", "\n", "", "", "cmc", ",", "mAP", ",", "_", ",", "_", ",", "_", ",", "_", ",", "_", "=", "evaluator", ".", "compute", "(", ")", "\n", "logger", ".", "info", "(", "\"Validation Results - Epoch: {}\"", ".", "format", "(", "epoch", ")", ")", "\n", "logger", ".", "info", "(", "\"mAP: {:.1%}\"", ".", "format", "(", "mAP", ")", ")", "\n", "for", "r", "in", "[", "1", ",", "5", ",", "10", "]", ":", "\n", "                        ", "logger", ".", "info", "(", "\"CMC curve, Rank-{:<3}:{:.1%}\"", ".", "format", "(", "r", ",", "cmc", "[", "r", "-", "1", "]", ")", ")", "\n", "", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "", "", "else", ":", "\n", "                ", "model", ".", "eval", "(", ")", "\n", "for", "n_iter", ",", "(", "img", ",", "vid", ",", "camid", ",", "camids", ",", "target_view", ",", "_", ")", "in", "enumerate", "(", "val_loader", ")", ":", "\n", "                    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                        ", "img", "=", "img", ".", "to", "(", "device", ")", "\n", "camids", "=", "camids", ".", "to", "(", "device", ")", "\n", "target_view", "=", "target_view", ".", "to", "(", "device", ")", "\n", "feat", "=", "model", "(", "img", ",", "cam_label", "=", "camids", ",", "view_label", "=", "target_view", ")", "\n", "evaluator", ".", "update", "(", "(", "feat", ",", "vid", ",", "camid", ")", ")", "\n", "", "", "cmc", ",", "mAP", ",", "_", ",", "_", ",", "_", ",", "_", ",", "_", "=", "evaluator", ".", "compute", "(", ")", "\n", "logger", ".", "info", "(", "\"Validation Results - Epoch: {}\"", ".", "format", "(", "epoch", ")", ")", "\n", "logger", ".", "info", "(", "\"mAP: {:.1%}\"", ".", "format", "(", "mAP", ")", ")", "\n", "for", "r", "in", "[", "1", ",", "5", ",", "10", "]", ":", "\n", "                    ", "logger", ".", "info", "(", "\"CMC curve, Rank-{:<3}:{:.1%}\"", ".", "format", "(", "r", ",", "cmc", "[", "r", "-", "1", "]", ")", ")", "\n", "", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.processor.processor.do_inference": [[146, 182], ["logging.getLogger", "logging.getLogger.info", "utils.metrics.R1_mAP_eval", "utils.metrics.R1_mAP_eval.reset", "nn.DataParallel.eval", "enumerate", "utils.metrics.R1_mAP_eval.compute", "logging.getLogger.info", "logging.getLogger.info", "nn.DataParallel.to", "logging.getLogger.info", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "print", "torch.DataParallel", "torch.no_grad", "torch.no_grad", "torch.no_grad", "img.to.to", "camids.to.to", "target_view.to.to", "nn.DataParallel.", "utils.metrics.R1_mAP_eval.update", "img_path_list.extend", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count"], "function", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.utils.meter.AverageMeter.reset", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.utils.metrics.R1_mAP_eval.compute", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.utils.MetricLogger.update"], ["", "", "", "", "def", "do_inference", "(", "cfg", ",", "\n", "model", ",", "\n", "val_loader", ",", "\n", "num_query", ")", ":", "\n", "    ", "device", "=", "\"cuda\"", "\n", "logger", "=", "logging", ".", "getLogger", "(", "\"transreid.test\"", ")", "\n", "logger", ".", "info", "(", "\"Enter inferencing\"", ")", "\n", "\n", "evaluator", "=", "R1_mAP_eval", "(", "num_query", ",", "max_rank", "=", "50", ",", "feat_norm", "=", "cfg", ".", "TEST", ".", "FEAT_NORM", ")", "\n", "\n", "evaluator", ".", "reset", "(", ")", "\n", "\n", "if", "device", ":", "\n", "        ", "if", "torch", ".", "cuda", ".", "device_count", "(", ")", ">", "1", ":", "\n", "            ", "print", "(", "'Using {} GPUs for inference'", ".", "format", "(", "torch", ".", "cuda", ".", "device_count", "(", ")", ")", ")", "\n", "model", "=", "nn", ".", "DataParallel", "(", "model", ")", "\n", "", "model", ".", "to", "(", "device", ")", "\n", "\n", "", "model", ".", "eval", "(", ")", "\n", "img_path_list", "=", "[", "]", "\n", "\n", "for", "n_iter", ",", "(", "img", ",", "pid", ",", "camid", ",", "camids", ",", "target_view", ",", "imgpath", ")", "in", "enumerate", "(", "val_loader", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "img", "=", "img", ".", "to", "(", "device", ")", "\n", "camids", "=", "camids", ".", "to", "(", "device", ")", "\n", "target_view", "=", "target_view", ".", "to", "(", "device", ")", "\n", "feat", "=", "model", "(", "img", ",", "cam_label", "=", "camids", ",", "view_label", "=", "target_view", ")", "\n", "evaluator", ".", "update", "(", "(", "feat", ",", "pid", ",", "camid", ")", ")", "\n", "img_path_list", ".", "extend", "(", "imgpath", ")", "\n", "\n", "", "", "cmc", ",", "mAP", ",", "_", ",", "_", ",", "_", ",", "_", ",", "_", "=", "evaluator", ".", "compute", "(", ")", "\n", "logger", ".", "info", "(", "\"Validation Results \"", ")", "\n", "logger", ".", "info", "(", "\"mAP: {:.1%}\"", ".", "format", "(", "mAP", ")", ")", "\n", "for", "r", "in", "[", "1", ",", "5", ",", "10", "]", ":", "\n", "        ", "logger", ".", "info", "(", "\"CMC curve, Rank-{:<3}:{:.1%}\"", ".", "format", "(", "r", ",", "cmc", "[", "r", "-", "1", "]", ")", ")", "\n", "", "return", "cmc", "[", "0", "]", ",", "cmc", "[", "4", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.solver.make_optimizer.make_optimizer": [[4, 30], ["model.named_parameters", "torch.optim.SGD", "center_criterion.parameters", "getattr", "torch.optim.AdamW", "print", "getattr"], "function", ["None"], ["def", "make_optimizer", "(", "cfg", ",", "model", ",", "center_criterion", ")", ":", "\n", "    ", "params", "=", "[", "]", "\n", "for", "key", ",", "value", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "        ", "if", "not", "value", ".", "requires_grad", ":", "\n", "            ", "continue", "\n", "", "lr", "=", "cfg", ".", "SOLVER", ".", "BASE_LR", "\n", "weight_decay", "=", "cfg", ".", "SOLVER", ".", "WEIGHT_DECAY", "\n", "if", "\"bias\"", "in", "key", ":", "\n", "            ", "lr", "=", "cfg", ".", "SOLVER", ".", "BASE_LR", "*", "cfg", ".", "SOLVER", ".", "BIAS_LR_FACTOR", "\n", "weight_decay", "=", "cfg", ".", "SOLVER", ".", "WEIGHT_DECAY_BIAS", "\n", "", "if", "cfg", ".", "SOLVER", ".", "LARGE_FC_LR", ":", "\n", "            ", "if", "\"classifier\"", "in", "key", "or", "\"arcface\"", "in", "key", ":", "\n", "                ", "lr", "=", "cfg", ".", "SOLVER", ".", "BASE_LR", "*", "2", "\n", "print", "(", "'Using two times learning rate for fc '", ")", "\n", "\n", "", "", "params", "+=", "[", "{", "\"params\"", ":", "[", "value", "]", ",", "\"lr\"", ":", "lr", ",", "\"weight_decay\"", ":", "weight_decay", "}", "]", "\n", "\n", "", "if", "cfg", ".", "SOLVER", ".", "OPTIMIZER_NAME", "==", "'SGD'", ":", "\n", "        ", "optimizer", "=", "getattr", "(", "torch", ".", "optim", ",", "cfg", ".", "SOLVER", ".", "OPTIMIZER_NAME", ")", "(", "params", ",", "momentum", "=", "cfg", ".", "SOLVER", ".", "MOMENTUM", ")", "\n", "", "elif", "cfg", ".", "SOLVER", ".", "OPTIMIZER_NAME", "==", "'AdamW'", ":", "\n", "        ", "optimizer", "=", "torch", ".", "optim", ".", "AdamW", "(", "params", ",", "lr", "=", "cfg", ".", "SOLVER", ".", "BASE_LR", ",", "weight_decay", "=", "cfg", ".", "SOLVER", ".", "WEIGHT_DECAY", ")", "\n", "", "else", ":", "\n", "        ", "optimizer", "=", "getattr", "(", "torch", ".", "optim", ",", "cfg", ".", "SOLVER", ".", "OPTIMIZER_NAME", ")", "(", "params", ")", "\n", "", "optimizer_center", "=", "torch", ".", "optim", ".", "SGD", "(", "center_criterion", ".", "parameters", "(", ")", ",", "lr", "=", "cfg", ".", "SOLVER", ".", "CENTER_LR", ")", "\n", "\n", "return", "optimizer", ",", "optimizer_center", "\n", "", ""]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.solver.scheduler_factory.create_scheduler": [[7, 39], ["cosine_lr.CosineLRScheduler"], "function", ["None"], ["def", "create_scheduler", "(", "cfg", ",", "optimizer", ")", ":", "\n", "    ", "num_epochs", "=", "cfg", ".", "SOLVER", ".", "MAX_EPOCHS", "\n", "# type 1", "\n", "# lr_min = 0.01 * cfg.SOLVER.BASE_LR", "\n", "# warmup_lr_init = 0.001 * cfg.SOLVER.BASE_LR", "\n", "# type 2", "\n", "lr_min", "=", "0.002", "*", "cfg", ".", "SOLVER", ".", "BASE_LR", "\n", "warmup_lr_init", "=", "0.01", "*", "cfg", ".", "SOLVER", ".", "BASE_LR", "\n", "# type 3", "\n", "# lr_min = 0.001 * cfg.SOLVER.BASE_LR", "\n", "# warmup_lr_init = 0.01 * cfg.SOLVER.BASE_LR", "\n", "\n", "warmup_t", "=", "cfg", ".", "SOLVER", ".", "WARMUP_EPOCHS", "\n", "noise_range", "=", "None", "\n", "\n", "lr_scheduler", "=", "CosineLRScheduler", "(", "\n", "optimizer", ",", "\n", "t_initial", "=", "num_epochs", ",", "\n", "lr_min", "=", "lr_min", ",", "\n", "t_mul", "=", "1.", ",", "\n", "decay_rate", "=", "0.1", ",", "\n", "warmup_lr_init", "=", "warmup_lr_init", ",", "\n", "warmup_t", "=", "warmup_t", ",", "\n", "cycle_limit", "=", "1", ",", "\n", "t_in_epochs", "=", "True", ",", "\n", "noise_range_t", "=", "noise_range", ",", "\n", "noise_pct", "=", "0.67", ",", "\n", "noise_std", "=", "1.", ",", "\n", "noise_seed", "=", "42", ",", "\n", ")", "\n", "\n", "return", "lr_scheduler", "\n", "", ""]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.solver.cosine_lr.CosineLRScheduler.__init__": [[26, 66], ["scheduler.Scheduler.__init__", "_logger.warning", "super().update_groups"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.softmax_loss.LabelSmoothingCrossEntropy.__init__", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.solver.scheduler.Scheduler.update_groups"], ["def", "__init__", "(", "self", ",", "\n", "optimizer", ":", "torch", ".", "optim", ".", "Optimizer", ",", "\n", "t_initial", ":", "int", ",", "\n", "t_mul", ":", "float", "=", "1.", ",", "\n", "lr_min", ":", "float", "=", "0.", ",", "\n", "decay_rate", ":", "float", "=", "1.", ",", "\n", "warmup_t", "=", "0", ",", "\n", "warmup_lr_init", "=", "0", ",", "\n", "warmup_prefix", "=", "False", ",", "\n", "cycle_limit", "=", "0", ",", "\n", "t_in_epochs", "=", "True", ",", "\n", "noise_range_t", "=", "None", ",", "\n", "noise_pct", "=", "0.67", ",", "\n", "noise_std", "=", "1.0", ",", "\n", "noise_seed", "=", "42", ",", "\n", "initialize", "=", "True", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "optimizer", ",", "param_group_field", "=", "\"lr\"", ",", "\n", "noise_range_t", "=", "noise_range_t", ",", "noise_pct", "=", "noise_pct", ",", "noise_std", "=", "noise_std", ",", "noise_seed", "=", "noise_seed", ",", "\n", "initialize", "=", "initialize", ")", "\n", "\n", "assert", "t_initial", ">", "0", "\n", "assert", "lr_min", ">=", "0", "\n", "if", "t_initial", "==", "1", "and", "t_mul", "==", "1", "and", "decay_rate", "==", "1", ":", "\n", "            ", "_logger", ".", "warning", "(", "\"Cosine annealing scheduler will have no effect on the learning \"", "\n", "\"rate since t_initial = t_mul = eta_mul = 1.\"", ")", "\n", "", "self", ".", "t_initial", "=", "t_initial", "\n", "self", ".", "t_mul", "=", "t_mul", "\n", "self", ".", "lr_min", "=", "lr_min", "\n", "self", ".", "decay_rate", "=", "decay_rate", "\n", "self", ".", "cycle_limit", "=", "cycle_limit", "\n", "self", ".", "warmup_t", "=", "warmup_t", "\n", "self", ".", "warmup_lr_init", "=", "warmup_lr_init", "\n", "self", ".", "warmup_prefix", "=", "warmup_prefix", "\n", "self", ".", "t_in_epochs", "=", "t_in_epochs", "\n", "if", "self", ".", "warmup_t", ":", "\n", "            ", "self", ".", "warmup_steps", "=", "[", "(", "v", "-", "warmup_lr_init", ")", "/", "self", ".", "warmup_t", "for", "v", "in", "self", ".", "base_values", "]", "\n", "super", "(", ")", ".", "update_groups", "(", "self", ".", "warmup_lr_init", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "warmup_steps", "=", "[", "1", "for", "_", "in", "self", ".", "base_values", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.solver.cosine_lr.CosineLRScheduler._get_lr": [[67, 95], ["math.floor", "math.log", "math.cos"], "methods", ["None"], ["", "", "def", "_get_lr", "(", "self", ",", "t", ")", ":", "\n", "        ", "if", "t", "<", "self", ".", "warmup_t", ":", "\n", "            ", "lrs", "=", "[", "self", ".", "warmup_lr_init", "+", "t", "*", "s", "for", "s", "in", "self", ".", "warmup_steps", "]", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "warmup_prefix", ":", "\n", "                ", "t", "=", "t", "-", "self", ".", "warmup_t", "\n", "\n", "", "if", "self", ".", "t_mul", "!=", "1", ":", "\n", "                ", "i", "=", "math", ".", "floor", "(", "math", ".", "log", "(", "1", "-", "t", "/", "self", ".", "t_initial", "*", "(", "1", "-", "self", ".", "t_mul", ")", ",", "self", ".", "t_mul", ")", ")", "\n", "t_i", "=", "self", ".", "t_mul", "**", "i", "*", "self", ".", "t_initial", "\n", "t_curr", "=", "t", "-", "(", "1", "-", "self", ".", "t_mul", "**", "i", ")", "/", "(", "1", "-", "self", ".", "t_mul", ")", "*", "self", ".", "t_initial", "\n", "", "else", ":", "\n", "                ", "i", "=", "t", "//", "self", ".", "t_initial", "\n", "t_i", "=", "self", ".", "t_initial", "\n", "t_curr", "=", "t", "-", "(", "self", ".", "t_initial", "*", "i", ")", "\n", "\n", "", "gamma", "=", "self", ".", "decay_rate", "**", "i", "\n", "lr_min", "=", "self", ".", "lr_min", "*", "gamma", "\n", "lr_max_values", "=", "[", "v", "*", "gamma", "for", "v", "in", "self", ".", "base_values", "]", "\n", "\n", "if", "self", ".", "cycle_limit", "==", "0", "or", "(", "self", ".", "cycle_limit", ">", "0", "and", "i", "<", "self", ".", "cycle_limit", ")", ":", "\n", "                ", "lrs", "=", "[", "\n", "lr_min", "+", "0.5", "*", "(", "lr_max", "-", "lr_min", ")", "*", "(", "1", "+", "math", ".", "cos", "(", "math", ".", "pi", "*", "t_curr", "/", "t_i", ")", ")", "for", "lr_max", "in", "lr_max_values", "\n", "]", "\n", "", "else", ":", "\n", "                ", "lrs", "=", "[", "self", ".", "lr_min", "for", "_", "in", "self", ".", "base_values", "]", "\n", "\n", "", "", "return", "lrs", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.solver.cosine_lr.CosineLRScheduler.get_epoch_values": [[96, 101], ["cosine_lr.CosineLRScheduler._get_lr"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.solver.cosine_lr.CosineLRScheduler._get_lr"], ["", "def", "get_epoch_values", "(", "self", ",", "epoch", ":", "int", ")", ":", "\n", "        ", "if", "self", ".", "t_in_epochs", ":", "\n", "            ", "return", "self", ".", "_get_lr", "(", "epoch", ")", "\n", "", "else", ":", "\n", "            ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.solver.cosine_lr.CosineLRScheduler.get_update_values": [[102, 107], ["cosine_lr.CosineLRScheduler._get_lr"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.solver.cosine_lr.CosineLRScheduler._get_lr"], ["", "", "def", "get_update_values", "(", "self", ",", "num_updates", ":", "int", ")", ":", "\n", "        ", "if", "not", "self", ".", "t_in_epochs", ":", "\n", "            ", "return", "self", ".", "_get_lr", "(", "num_updates", ")", "\n", "", "else", ":", "\n", "            ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.solver.cosine_lr.CosineLRScheduler.get_cycle_length": [[108, 116], ["max", "int", "math.floor"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.utils.SmoothedValue.max"], ["", "", "def", "get_cycle_length", "(", "self", ",", "cycles", "=", "0", ")", ":", "\n", "        ", "if", "not", "cycles", ":", "\n", "            ", "cycles", "=", "self", ".", "cycle_limit", "\n", "", "cycles", "=", "max", "(", "1", ",", "cycles", ")", "\n", "if", "self", ".", "t_mul", "==", "1.0", ":", "\n", "            ", "return", "self", ".", "t_initial", "*", "cycles", "\n", "", "else", ":", "\n", "            ", "return", "int", "(", "math", ".", "floor", "(", "-", "self", ".", "t_initial", "*", "(", "self", ".", "t_mul", "**", "cycles", "-", "1", ")", "/", "(", "1", "-", "self", ".", "t_mul", ")", ")", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.solver.scheduler.Scheduler.__init__": [[25, 54], ["scheduler.Scheduler.update_groups", "enumerate", "enumerate", "group.setdefault", "KeyError", "KeyError"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.solver.scheduler.Scheduler.update_groups"], ["def", "__init__", "(", "self", ",", "\n", "optimizer", ":", "torch", ".", "optim", ".", "Optimizer", ",", "\n", "param_group_field", ":", "str", ",", "\n", "noise_range_t", "=", "None", ",", "\n", "noise_type", "=", "'normal'", ",", "\n", "noise_pct", "=", "0.67", ",", "\n", "noise_std", "=", "1.0", ",", "\n", "noise_seed", "=", "None", ",", "\n", "initialize", ":", "bool", "=", "True", ")", "->", "None", ":", "\n", "        ", "self", ".", "optimizer", "=", "optimizer", "\n", "self", ".", "param_group_field", "=", "param_group_field", "\n", "self", ".", "_initial_param_group_field", "=", "f\"initial_{param_group_field}\"", "\n", "if", "initialize", ":", "\n", "            ", "for", "i", ",", "group", "in", "enumerate", "(", "self", ".", "optimizer", ".", "param_groups", ")", ":", "\n", "                ", "if", "param_group_field", "not", "in", "group", ":", "\n", "                    ", "raise", "KeyError", "(", "f\"{param_group_field} missing from param_groups[{i}]\"", ")", "\n", "", "group", ".", "setdefault", "(", "self", ".", "_initial_param_group_field", ",", "group", "[", "param_group_field", "]", ")", "\n", "", "", "else", ":", "\n", "            ", "for", "i", ",", "group", "in", "enumerate", "(", "self", ".", "optimizer", ".", "param_groups", ")", ":", "\n", "                ", "if", "self", ".", "_initial_param_group_field", "not", "in", "group", ":", "\n", "                    ", "raise", "KeyError", "(", "f\"{self._initial_param_group_field} missing from param_groups[{i}]\"", ")", "\n", "", "", "", "self", ".", "base_values", "=", "[", "group", "[", "self", ".", "_initial_param_group_field", "]", "for", "group", "in", "self", ".", "optimizer", ".", "param_groups", "]", "\n", "self", ".", "metric", "=", "None", "# any point to having this for all?", "\n", "self", ".", "noise_range_t", "=", "noise_range_t", "\n", "self", ".", "noise_pct", "=", "noise_pct", "\n", "self", ".", "noise_type", "=", "noise_type", "\n", "self", ".", "noise_std", "=", "noise_std", "\n", "self", ".", "noise_seed", "=", "noise_seed", "if", "noise_seed", "is", "not", "None", "else", "42", "\n", "self", ".", "update_groups", "(", "self", ".", "base_values", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.solver.scheduler.Scheduler.state_dict": [[55, 57], ["scheduler.Scheduler.__dict__.items"], "methods", ["None"], ["", "def", "state_dict", "(", "self", ")", "->", "Dict", "[", "str", ",", "Any", "]", ":", "\n", "        ", "return", "{", "key", ":", "value", "for", "key", ",", "value", "in", "self", ".", "__dict__", ".", "items", "(", ")", "if", "key", "!=", "'optimizer'", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.solver.scheduler.Scheduler.load_state_dict": [[58, 60], ["scheduler.Scheduler.__dict__.update"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.utils.MetricLogger.update"], ["", "def", "load_state_dict", "(", "self", ",", "state_dict", ":", "Dict", "[", "str", ",", "Any", "]", ")", "->", "None", ":", "\n", "        ", "self", ".", "__dict__", ".", "update", "(", "state_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.solver.scheduler.Scheduler.get_epoch_values": [[61, 63], ["None"], "methods", ["None"], ["", "def", "get_epoch_values", "(", "self", ",", "epoch", ":", "int", ")", ":", "\n", "        ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.solver.scheduler.Scheduler.get_update_values": [[64, 66], ["None"], "methods", ["None"], ["", "def", "get_update_values", "(", "self", ",", "num_updates", ":", "int", ")", ":", "\n", "        ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.solver.scheduler.Scheduler.step": [[67, 73], ["scheduler.Scheduler.get_epoch_values", "scheduler.Scheduler._add_noise", "scheduler.Scheduler.update_groups"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.solver.scheduler.Scheduler.get_epoch_values", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.solver.scheduler.Scheduler._add_noise", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.solver.scheduler.Scheduler.update_groups"], ["", "def", "step", "(", "self", ",", "epoch", ":", "int", ",", "metric", ":", "float", "=", "None", ")", "->", "None", ":", "\n", "        ", "self", ".", "metric", "=", "metric", "\n", "values", "=", "self", ".", "get_epoch_values", "(", "epoch", ")", "\n", "if", "values", "is", "not", "None", ":", "\n", "            ", "values", "=", "self", ".", "_add_noise", "(", "values", ",", "epoch", ")", "\n", "self", ".", "update_groups", "(", "values", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.solver.scheduler.Scheduler.step_update": [[74, 80], ["scheduler.Scheduler.get_update_values", "scheduler.Scheduler._add_noise", "scheduler.Scheduler.update_groups"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.solver.scheduler.Scheduler.get_update_values", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.solver.scheduler.Scheduler._add_noise", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.solver.scheduler.Scheduler.update_groups"], ["", "", "def", "step_update", "(", "self", ",", "num_updates", ":", "int", ",", "metric", ":", "float", "=", "None", ")", ":", "\n", "        ", "self", ".", "metric", "=", "metric", "\n", "values", "=", "self", ".", "get_update_values", "(", "num_updates", ")", "\n", "if", "values", "is", "not", "None", ":", "\n", "            ", "values", "=", "self", ".", "_add_noise", "(", "values", ",", "num_updates", ")", "\n", "self", ".", "update_groups", "(", "values", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.solver.scheduler.Scheduler.update_groups": [[81, 86], ["zip", "isinstance", "len"], "methods", ["None"], ["", "", "def", "update_groups", "(", "self", ",", "values", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "values", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "values", "=", "[", "values", "]", "*", "len", "(", "self", ".", "optimizer", ".", "param_groups", ")", "\n", "", "for", "param_group", ",", "value", "in", "zip", "(", "self", ".", "optimizer", ".", "param_groups", ",", "values", ")", ":", "\n", "            ", "param_group", "[", "self", ".", "param_group_field", "]", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.solver.scheduler.Scheduler._add_noise": [[87, 106], ["isinstance", "torch.Generator", "torch.Generator.manual_seed", "torch.randn().item", "abs", "torch.randn", "torch.rand().item", "torch.rand"], "methods", ["None"], ["", "", "def", "_add_noise", "(", "self", ",", "lrs", ",", "t", ")", ":", "\n", "        ", "if", "self", ".", "noise_range_t", "is", "not", "None", ":", "\n", "            ", "if", "isinstance", "(", "self", ".", "noise_range_t", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "                ", "apply_noise", "=", "self", ".", "noise_range_t", "[", "0", "]", "<=", "t", "<", "self", ".", "noise_range_t", "[", "1", "]", "\n", "", "else", ":", "\n", "                ", "apply_noise", "=", "t", ">=", "self", ".", "noise_range_t", "\n", "", "if", "apply_noise", ":", "\n", "                ", "g", "=", "torch", ".", "Generator", "(", ")", "\n", "g", ".", "manual_seed", "(", "self", ".", "noise_seed", "+", "t", ")", "\n", "if", "self", ".", "noise_type", "==", "'normal'", ":", "\n", "                    ", "while", "True", ":", "\n", "# resample if noise out of percent limit, brute force but shouldn't spin much", "\n", "                        ", "noise", "=", "torch", ".", "randn", "(", "1", ",", "generator", "=", "g", ")", ".", "item", "(", ")", "\n", "if", "abs", "(", "noise", ")", "<", "self", ".", "noise_pct", ":", "\n", "                            ", "break", "\n", "", "", "", "else", ":", "\n", "                    ", "noise", "=", "2", "*", "(", "torch", ".", "rand", "(", "1", ",", "generator", "=", "g", ")", ".", "item", "(", ")", "-", "0.5", ")", "*", "self", ".", "noise_pct", "\n", "", "lrs", "=", "[", "v", "+", "v", "*", "noise", "for", "v", "in", "lrs", "]", "\n", "", "", "return", "lrs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.solver.lr_scheduler.WarmupMultiStepLR.__init__": [[15, 42], ["super().__init__", "ValueError", "ValueError", "list", "sorted"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.softmax_loss.LabelSmoothingCrossEntropy.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "optimizer", ",", "\n", "milestones", ",", "# steps", "\n", "gamma", "=", "0.1", ",", "\n", "warmup_factor", "=", "1.0", "/", "3", ",", "\n", "warmup_iters", "=", "500", ",", "\n", "warmup_method", "=", "\"linear\"", ",", "\n", "last_epoch", "=", "-", "1", ",", "\n", ")", ":", "\n", "        ", "if", "not", "list", "(", "milestones", ")", "==", "sorted", "(", "milestones", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Milestones should be a list of\"", "\" increasing integers. Got {}\"", ",", "\n", "milestones", ",", "\n", ")", "\n", "\n", "", "if", "warmup_method", "not", "in", "(", "\"constant\"", ",", "\"linear\"", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Only 'constant' or 'linear' warmup_method accepted\"", "\n", "\"got {}\"", ".", "format", "(", "warmup_method", ")", "\n", ")", "\n", "", "self", ".", "milestones", "=", "milestones", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "warmup_factor", "=", "warmup_factor", "\n", "self", ".", "warmup_iters", "=", "warmup_iters", "\n", "self", ".", "warmup_method", "=", "warmup_method", "\n", "super", "(", "WarmupMultiStepLR", ",", "self", ")", ".", "__init__", "(", "optimizer", ",", "last_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.solver.lr_scheduler.WarmupMultiStepLR.get_lr": [[43, 56], ["bisect.bisect_right"], "methods", ["None"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "warmup_factor", "=", "1", "\n", "if", "self", ".", "last_epoch", "<", "self", ".", "warmup_iters", ":", "\n", "            ", "if", "self", ".", "warmup_method", "==", "\"constant\"", ":", "\n", "                ", "warmup_factor", "=", "self", ".", "warmup_factor", "\n", "", "elif", "self", ".", "warmup_method", "==", "\"linear\"", ":", "\n", "                ", "alpha", "=", "self", ".", "last_epoch", "/", "self", ".", "warmup_iters", "\n", "warmup_factor", "=", "self", ".", "warmup_factor", "*", "(", "1", "-", "alpha", ")", "+", "alpha", "\n", "", "", "return", "[", "\n", "base_lr", "\n", "*", "warmup_factor", "\n", "*", "self", ".", "gamma", "**", "bisect_right", "(", "self", ".", "milestones", ",", "self", ".", "last_epoch", ")", "\n", "for", "base_lr", "in", "self", ".", "base_lrs", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.metric_learning.ContrastiveLoss.__init__": [[10, 13], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.softmax_loss.LabelSmoothingCrossEntropy.__init__"], ["    ", "def", "__init__", "(", "self", ",", "margin", "=", "0.3", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "ContrastiveLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "margin", "=", "margin", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.metric_learning.ContrastiveLoss.forward": [[14, 43], ["inputs.size", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "list", "range", "inputs.t", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "list.append", "sum", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "len", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "targets", ")", ":", "\n", "        ", "n", "=", "inputs", ".", "size", "(", "0", ")", "\n", "# Compute similarity matrix", "\n", "sim_mat", "=", "torch", ".", "matmul", "(", "inputs", ",", "inputs", ".", "t", "(", ")", ")", "\n", "targets", "=", "targets", "\n", "loss", "=", "list", "(", ")", "\n", "c", "=", "0", "\n", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "            ", "pos_pair_", "=", "torch", ".", "masked_select", "(", "sim_mat", "[", "i", "]", ",", "targets", "==", "targets", "[", "i", "]", ")", "\n", "\n", "#  move itself", "\n", "pos_pair_", "=", "torch", ".", "masked_select", "(", "pos_pair_", ",", "pos_pair_", "<", "1", ")", "\n", "neg_pair_", "=", "torch", ".", "masked_select", "(", "sim_mat", "[", "i", "]", ",", "targets", "!=", "targets", "[", "i", "]", ")", "\n", "\n", "pos_pair_", "=", "torch", ".", "sort", "(", "pos_pair_", ")", "[", "0", "]", "\n", "neg_pair_", "=", "torch", ".", "sort", "(", "neg_pair_", ")", "[", "0", "]", "\n", "\n", "neg_pair", "=", "torch", ".", "masked_select", "(", "neg_pair_", ",", "neg_pair_", ">", "self", ".", "margin", ")", "\n", "\n", "neg_loss", "=", "0", "\n", "\n", "pos_loss", "=", "torch", ".", "sum", "(", "-", "pos_pair_", "+", "1", ")", "\n", "if", "len", "(", "neg_pair", ")", ">", "0", ":", "\n", "                ", "neg_loss", "=", "torch", ".", "sum", "(", "neg_pair", ")", "\n", "", "loss", ".", "append", "(", "pos_loss", "+", "neg_loss", ")", "\n", "\n", "", "loss", "=", "sum", "(", "loss", ")", "/", "n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.metric_learning.CircleLoss.__init__": [[46, 53], ["torch.Module.__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "metric_learning.CircleLoss.reset_parameters", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.softmax_loss.LabelSmoothingCrossEntropy.__init__", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.arcface.CircleLoss.reset_parameters"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "num_classes", ",", "s", "=", "256", ",", "m", "=", "0.25", ")", ":", "\n", "        ", "super", "(", "CircleLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "weight", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "num_classes", ",", "in_features", ")", ")", "\n", "self", ".", "s", "=", "s", "\n", "self", ".", "m", "=", "m", "\n", "self", ".", "_num_classes", "=", "num_classes", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.metric_learning.CircleLoss.reset_parameters": [[55, 57], ["torch.init.kaiming_uniform_", "torch.init.kaiming_uniform_", "torch.init.kaiming_uniform_", "torch.init.kaiming_uniform_", "math.sqrt"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "nn", ".", "init", ".", "kaiming_uniform_", "(", "self", ".", "weight", ",", "a", "=", "math", ".", "sqrt", "(", "5", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.metric_learning.CircleLoss.__call__": [[58, 74], ["torch.linear", "torch.linear", "torch.linear", "torch.linear", "torch.clamp_min", "torch.clamp_min", "torch.clamp_min", "torch.clamp_min", "torch.clamp_min", "torch.clamp_min", "torch.clamp_min", "torch.clamp_min", "torch.clamp_min", "torch.clamp_min", "torch.clamp_min", "torch.clamp_min", "torch.clamp_min", "torch.clamp_min", "torch.clamp_min", "torch.clamp_min", "torch.clamp_min", "torch.clamp_min", "torch.clamp_min", "torch.clamp_min", "torch.clamp_min", "torch.clamp_min", "torch.clamp_min", "torch.clamp_min", "torch.clamp_min", "torch.clamp_min", "torch.clamp_min", "torch.clamp_min", "torch.clamp_min", "torch.clamp_min", "torch.clamp_min", "torch.clamp_min", "torch.one_hot", "torch.one_hot", "torch.one_hot", "torch.one_hot", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.linear.detach", "torch.linear.detach"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.triplet_loss.normalize", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.triplet_loss.normalize", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.triplet_loss.normalize", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.triplet_loss.normalize", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.triplet_loss.normalize", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.triplet_loss.normalize", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.triplet_loss.normalize", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.triplet_loss.normalize"], ["", "def", "__call__", "(", "self", ",", "bn_feat", ",", "targets", ")", ":", "\n", "\n", "        ", "sim_mat", "=", "F", ".", "linear", "(", "F", ".", "normalize", "(", "bn_feat", ")", ",", "F", ".", "normalize", "(", "self", ".", "weight", ")", ")", "\n", "alpha_p", "=", "torch", ".", "clamp_min", "(", "-", "sim_mat", ".", "detach", "(", ")", "+", "1", "+", "self", ".", "m", ",", "min", "=", "0.", ")", "\n", "alpha_n", "=", "torch", ".", "clamp_min", "(", "sim_mat", ".", "detach", "(", ")", "+", "self", ".", "m", ",", "min", "=", "0.", ")", "\n", "delta_p", "=", "1", "-", "self", ".", "m", "\n", "delta_n", "=", "self", ".", "m", "\n", "\n", "s_p", "=", "self", ".", "s", "*", "alpha_p", "*", "(", "sim_mat", "-", "delta_p", ")", "\n", "s_n", "=", "self", ".", "s", "*", "alpha_n", "*", "(", "sim_mat", "-", "delta_n", ")", "\n", "\n", "targets", "=", "F", ".", "one_hot", "(", "targets", ",", "num_classes", "=", "self", ".", "_num_classes", ")", "\n", "\n", "pred_class_logits", "=", "targets", "*", "s_p", "+", "(", "1.0", "-", "targets", ")", "*", "s_n", "\n", "\n", "return", "pred_class_logits", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.metric_learning.Arcface.__init__": [[85, 100], ["torch.Module.__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "math.cos", "math.sin", "math.cos", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "math.sin"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.softmax_loss.LabelSmoothingCrossEntropy.__init__"], ["def", "__init__", "(", "self", ",", "in_features", ",", "out_features", ",", "s", "=", "30.0", ",", "m", "=", "0.30", ",", "easy_margin", "=", "False", ",", "ls_eps", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "Arcface", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_features", "=", "in_features", "\n", "self", ".", "out_features", "=", "out_features", "\n", "self", ".", "s", "=", "s", "\n", "self", ".", "m", "=", "m", "\n", "self", ".", "ls_eps", "=", "ls_eps", "# label smoothing", "\n", "self", ".", "weight", "=", "Parameter", "(", "torch", ".", "FloatTensor", "(", "out_features", ",", "in_features", ")", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "weight", ")", "\n", "\n", "self", ".", "easy_margin", "=", "easy_margin", "\n", "self", ".", "cos_m", "=", "math", ".", "cos", "(", "m", ")", "\n", "self", ".", "sin_m", "=", "math", ".", "sin", "(", "m", ")", "\n", "self", ".", "th", "=", "math", ".", "cos", "(", "math", ".", "pi", "-", "m", ")", "\n", "self", ".", "mm", "=", "math", ".", "sin", "(", "math", ".", "pi", "-", "m", ")", "*", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.metric_learning.Arcface.forward": [[101, 122], ["torch.linear", "torch.linear", "torch.linear", "torch.linear", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.where.type_as", "torch.where.type_as", "torch.where.type_as", "torch.where.type_as", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros.scatter_", "torch.zeros.scatter_", "torch.zeros.scatter_", "torch.zeros.scatter_", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.linear.size", "label.view().long", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "label.view"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.triplet_loss.normalize", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.triplet_loss.normalize", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.triplet_loss.normalize", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.triplet_loss.normalize", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.triplet_loss.normalize", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.triplet_loss.normalize", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.triplet_loss.normalize", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.triplet_loss.normalize"], ["", "def", "forward", "(", "self", ",", "input", ",", "label", ")", ":", "\n", "# --------------------------- cos(theta) & phi(theta) ---------------------------", "\n", "        ", "cosine", "=", "F", ".", "linear", "(", "F", ".", "normalize", "(", "input", ")", ",", "F", ".", "normalize", "(", "self", ".", "weight", ")", ")", "\n", "sine", "=", "torch", ".", "sqrt", "(", "1.0", "-", "torch", ".", "pow", "(", "cosine", ",", "2", ")", ")", "\n", "phi", "=", "cosine", "*", "self", ".", "cos_m", "-", "sine", "*", "self", ".", "sin_m", "\n", "phi", "=", "phi", ".", "type_as", "(", "cosine", ")", "\n", "if", "self", ".", "easy_margin", ":", "\n", "            ", "phi", "=", "torch", ".", "where", "(", "cosine", ">", "0", ",", "phi", ",", "cosine", ")", "\n", "", "else", ":", "\n", "            ", "phi", "=", "torch", ".", "where", "(", "cosine", ">", "self", ".", "th", ",", "phi", ",", "cosine", "-", "self", ".", "mm", ")", "\n", "# --------------------------- convert label to one-hot ---------------------------", "\n", "# one_hot = torch.zeros(cosine.size(), requires_grad=True, device='cuda')", "\n", "", "one_hot", "=", "torch", ".", "zeros", "(", "cosine", ".", "size", "(", ")", ",", "device", "=", "'cuda'", ")", "\n", "one_hot", ".", "scatter_", "(", "1", ",", "label", ".", "view", "(", "-", "1", ",", "1", ")", ".", "long", "(", ")", ",", "1", ")", "\n", "if", "self", ".", "ls_eps", ">", "0", ":", "\n", "            ", "one_hot", "=", "(", "1", "-", "self", ".", "ls_eps", ")", "*", "one_hot", "+", "self", ".", "ls_eps", "/", "self", ".", "out_features", "\n", "# -------------torch.where(out_i = {x_i if condition_i else y_i) -------------", "\n", "", "output", "=", "(", "one_hot", "*", "phi", ")", "+", "(", "(", "1.0", "-", "one_hot", ")", "*", "cosine", ")", "\n", "output", "*=", "self", ".", "s", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.metric_learning.Cosface.__init__": [[134, 142], ["torch.Module.__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.softmax_loss.LabelSmoothingCrossEntropy.__init__"], ["def", "__init__", "(", "self", ",", "in_features", ",", "out_features", ",", "s", "=", "30.0", ",", "m", "=", "0.30", ")", ":", "\n", "        ", "super", "(", "Cosface", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_features", "=", "in_features", "\n", "self", ".", "out_features", "=", "out_features", "\n", "self", ".", "s", "=", "s", "\n", "self", ".", "m", "=", "m", "\n", "self", ".", "weight", "=", "Parameter", "(", "torch", ".", "FloatTensor", "(", "out_features", ",", "in_features", ")", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.metric_learning.Cosface.forward": [[143, 157], ["torch.linear", "torch.linear", "torch.linear", "torch.linear", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros.scatter_", "torch.zeros.scatter_", "torch.zeros.scatter_", "torch.zeros.scatter_", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.linear.size", "label.view().long", "label.view"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.triplet_loss.normalize", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.triplet_loss.normalize", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.triplet_loss.normalize", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.triplet_loss.normalize", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.triplet_loss.normalize", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.triplet_loss.normalize", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.triplet_loss.normalize", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.triplet_loss.normalize"], ["", "def", "forward", "(", "self", ",", "input", ",", "label", ")", ":", "\n", "# --------------------------- cos(theta) & phi(theta) ---------------------------", "\n", "        ", "cosine", "=", "F", ".", "linear", "(", "F", ".", "normalize", "(", "input", ")", ",", "F", ".", "normalize", "(", "self", ".", "weight", ")", ")", "\n", "phi", "=", "cosine", "-", "self", ".", "m", "\n", "# --------------------------- convert label to one-hot ---------------------------", "\n", "one_hot", "=", "torch", ".", "zeros", "(", "cosine", ".", "size", "(", ")", ",", "device", "=", "'cuda'", ")", "\n", "# one_hot = one_hot.cuda() if cosine.is_cuda else one_hot", "\n", "one_hot", ".", "scatter_", "(", "1", ",", "label", ".", "view", "(", "-", "1", ",", "1", ")", ".", "long", "(", ")", ",", "1", ")", "\n", "# -------------torch.where(out_i = {x_i if condition_i else y_i) -------------", "\n", "output", "=", "(", "one_hot", "*", "phi", ")", "+", "(", "(", "1.0", "-", "one_hot", ")", "*", "cosine", ")", "# you can use torch.where if your torch.__version__ is 0.4", "\n", "output", "*=", "self", ".", "s", "\n", "# print(output)", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.metric_learning.Cosface.__repr__": [[158, 164], ["str", "str", "str", "str"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "'('", "+", "'in_features='", "+", "str", "(", "self", ".", "in_features", ")", "+", "', out_features='", "+", "str", "(", "self", ".", "out_features", ")", "+", "', s='", "+", "str", "(", "self", ".", "s", ")", "+", "', m='", "+", "str", "(", "self", ".", "m", ")", "+", "')'", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.metric_learning.AMSoftmax.__init__": [[167, 175], ["torch.Module.__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.softmax_loss.LabelSmoothingCrossEntropy.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "out_features", ",", "s", "=", "30.0", ",", "m", "=", "0.30", ")", ":", "\n", "        ", "super", "(", "AMSoftmax", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "m", "=", "m", "\n", "self", ".", "s", "=", "s", "\n", "self", ".", "in_feats", "=", "in_features", "\n", "self", ".", "W", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "in_features", ",", "out_features", ")", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "ce", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "nn", ".", "init", ".", "xavier_normal_", "(", "self", ".", "W", ",", "gain", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.metric_learning.AMSoftmax.forward": [[176, 190], ["torch.norm().clamp", "torch.norm().clamp", "torch.norm().clamp", "torch.norm().clamp", "torch.norm().clamp", "torch.norm().clamp", "torch.norm().clamp", "torch.norm().clamp", "torch.norm().clamp", "torch.norm().clamp", "torch.norm().clamp", "torch.norm().clamp", "torch.norm().clamp", "torch.norm().clamp", "torch.norm().clamp", "torch.norm().clamp", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.norm().clamp", "torch.norm().clamp", "torch.norm().clamp", "torch.norm().clamp", "torch.norm().clamp", "torch.norm().clamp", "torch.norm().clamp", "torch.norm().clamp", "torch.norm().clamp", "torch.norm().clamp", "torch.norm().clamp", "torch.norm().clamp", "torch.norm().clamp", "torch.norm().clamp", "torch.norm().clamp", "torch.norm().clamp", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "lb.view", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "x.size", "lb.size", "x.size", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.mm.size", "torch.mm.size", "torch.mm.size", "torch.mm.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "lb", ")", ":", "\n", "        ", "assert", "x", ".", "size", "(", ")", "[", "0", "]", "==", "lb", ".", "size", "(", ")", "[", "0", "]", "\n", "assert", "x", ".", "size", "(", ")", "[", "1", "]", "==", "self", ".", "in_feats", "\n", "x_norm", "=", "torch", ".", "norm", "(", "x", ",", "p", "=", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "clamp", "(", "min", "=", "1e-12", ")", "\n", "x_norm", "=", "torch", ".", "div", "(", "x", ",", "x_norm", ")", "\n", "w_norm", "=", "torch", ".", "norm", "(", "self", ".", "W", ",", "p", "=", "2", ",", "dim", "=", "0", ",", "keepdim", "=", "True", ")", ".", "clamp", "(", "min", "=", "1e-12", ")", "\n", "w_norm", "=", "torch", ".", "div", "(", "self", ".", "W", ",", "w_norm", ")", "\n", "costh", "=", "torch", ".", "mm", "(", "x_norm", ",", "w_norm", ")", "\n", "# print(x_norm.shape, w_norm.shape, costh.shape)", "\n", "lb_view", "=", "lb", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "delt_costh", "=", "torch", ".", "zeros", "(", "costh", ".", "size", "(", ")", ",", "device", "=", "'cuda'", ")", ".", "scatter_", "(", "1", ",", "lb_view", ",", "self", ".", "m", ")", "\n", "costh_m", "=", "costh", "-", "delt_costh", "\n", "costh_m_s", "=", "self", ".", "s", "*", "costh_m", "\n", "return", "costh_m_s", "", "", "", ""]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.arcface.ArcFace.__init__": [[9, 27], ["torch.Module.__init__", "math.cos", "math.sin", "math.cos", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "arcface.ArcFace.reset_parameters", "math.sin", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "arcface.ArcFace.register_parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.softmax_loss.LabelSmoothingCrossEntropy.__init__", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.arcface.CircleLoss.reset_parameters"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "out_features", ",", "s", "=", "30.0", ",", "m", "=", "0.50", ",", "bias", "=", "False", ")", ":", "\n", "        ", "super", "(", "ArcFace", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_features", "=", "in_features", "\n", "self", ".", "out_features", "=", "out_features", "\n", "self", ".", "s", "=", "s", "\n", "self", ".", "m", "=", "m", "\n", "self", ".", "cos_m", "=", "math", ".", "cos", "(", "m", ")", "\n", "self", ".", "sin_m", "=", "math", ".", "sin", "(", "m", ")", "\n", "\n", "self", ".", "th", "=", "math", ".", "cos", "(", "math", ".", "pi", "-", "m", ")", "\n", "self", ".", "mm", "=", "math", ".", "sin", "(", "math", ".", "pi", "-", "m", ")", "*", "m", "\n", "\n", "self", ".", "weight", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "out_features", ",", "in_features", ")", ")", "\n", "if", "bias", ":", "\n", "            ", "self", ".", "bias", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "out_features", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "'bias'", ",", "None", ")", "\n", "", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.arcface.ArcFace.reset_parameters": [[28, 34], ["torch.init.kaiming_uniform_", "torch.init.kaiming_uniform_", "torch.init.kaiming_uniform_", "torch.init._calculate_fan_in_and_fan_out", "torch.init._calculate_fan_in_and_fan_out", "torch.init._calculate_fan_in_and_fan_out", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "math.sqrt", "math.sqrt"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "nn", ".", "init", ".", "kaiming_uniform_", "(", "self", ".", "weight", ",", "a", "=", "math", ".", "sqrt", "(", "5", ")", ")", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "fan_in", ",", "_", "=", "nn", ".", "init", ".", "_calculate_fan_in_and_fan_out", "(", "self", ".", "weight", ")", "\n", "bound", "=", "1", "/", "math", ".", "sqrt", "(", "fan_in", ")", "\n", "nn", ".", "init", ".", "uniform_", "(", "self", ".", "bias", ",", "-", "bound", ",", "bound", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.arcface.ArcFace.forward": [[35, 51], ["torch.linear", "torch.linear", "torch.linear", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros.scatter_", "torch.zeros.scatter_", "torch.zeros.scatter_", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.linear.size", "label.view().long", "label.view", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.triplet_loss.normalize", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.triplet_loss.normalize", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.triplet_loss.normalize", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.triplet_loss.normalize", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.triplet_loss.normalize", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.triplet_loss.normalize"], ["", "", "def", "forward", "(", "self", ",", "input", ",", "label", ")", ":", "\n", "        ", "cosine", "=", "F", ".", "linear", "(", "F", ".", "normalize", "(", "input", ")", ",", "F", ".", "normalize", "(", "self", ".", "weight", ")", ")", "\n", "sine", "=", "torch", ".", "sqrt", "(", "(", "1.0", "-", "torch", ".", "pow", "(", "cosine", ",", "2", ")", ")", ".", "clamp", "(", "0", ",", "1", ")", ")", "\n", "phi", "=", "cosine", "*", "self", ".", "cos_m", "-", "sine", "*", "self", ".", "sin_m", "\n", "phi", "=", "torch", ".", "where", "(", "cosine", ">", "self", ".", "th", ",", "phi", ",", "cosine", "-", "self", ".", "mm", ")", "\n", "# --------------------------- convert label to one-hot ---------------------------", "\n", "# one_hot = torch.zeros(cosine.size(), requires_grad=True, device='cuda')", "\n", "one_hot", "=", "torch", ".", "zeros", "(", "cosine", ".", "size", "(", ")", ",", "device", "=", "'cuda'", ")", "\n", "one_hot", ".", "scatter_", "(", "1", ",", "label", ".", "view", "(", "-", "1", ",", "1", ")", ".", "long", "(", ")", ",", "1", ")", "\n", "# -------------torch.where(out_i = {x_i if condition_i else y_i) -------------", "\n", "output", "=", "(", "one_hot", "*", "phi", ")", "+", "(", "\n", "(", "1.0", "-", "one_hot", ")", "*", "cosine", ")", "# you can use torch.where if your torch.__version__ is 0.4", "\n", "output", "*=", "self", ".", "s", "\n", "# print(output)", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.arcface.CircleLoss.__init__": [[53, 60], ["torch.Module.__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "arcface.CircleLoss.reset_parameters", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.softmax_loss.LabelSmoothingCrossEntropy.__init__", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.arcface.CircleLoss.reset_parameters"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "num_classes", ",", "s", "=", "256", ",", "m", "=", "0.25", ")", ":", "\n", "        ", "super", "(", "CircleLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "weight", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "num_classes", ",", "in_features", ")", ")", "\n", "self", ".", "s", "=", "s", "\n", "self", ".", "m", "=", "m", "\n", "self", ".", "_num_classes", "=", "num_classes", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.arcface.CircleLoss.reset_parameters": [[62, 64], ["torch.init.kaiming_uniform_", "torch.init.kaiming_uniform_", "torch.init.kaiming_uniform_", "math.sqrt"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "nn", ".", "init", ".", "kaiming_uniform_", "(", "self", ".", "weight", ",", "a", "=", "math", ".", "sqrt", "(", "5", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.arcface.CircleLoss.__call__": [[65, 81], ["torch.linear", "torch.linear", "torch.linear", "torch.clamp_min", "torch.clamp_min", "torch.clamp_min", "torch.clamp_min", "torch.clamp_min", "torch.clamp_min", "torch.clamp_min", "torch.clamp_min", "torch.clamp_min", "torch.clamp_min", "torch.clamp_min", "torch.clamp_min", "torch.clamp_min", "torch.clamp_min", "torch.clamp_min", "torch.clamp_min", "torch.clamp_min", "torch.clamp_min", "torch.one_hot", "torch.one_hot", "torch.one_hot", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.linear.detach", "torch.linear.detach"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.triplet_loss.normalize", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.triplet_loss.normalize", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.triplet_loss.normalize", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.triplet_loss.normalize", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.triplet_loss.normalize", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.triplet_loss.normalize"], ["", "def", "__call__", "(", "self", ",", "bn_feat", ",", "targets", ")", ":", "\n", "\n", "        ", "sim_mat", "=", "F", ".", "linear", "(", "F", ".", "normalize", "(", "bn_feat", ")", ",", "F", ".", "normalize", "(", "self", ".", "weight", ")", ")", "\n", "alpha_p", "=", "torch", ".", "clamp_min", "(", "-", "sim_mat", ".", "detach", "(", ")", "+", "1", "+", "self", ".", "m", ",", "min", "=", "0.", ")", "\n", "alpha_n", "=", "torch", ".", "clamp_min", "(", "sim_mat", ".", "detach", "(", ")", "+", "self", ".", "m", ",", "min", "=", "0.", ")", "\n", "delta_p", "=", "1", "-", "self", ".", "m", "\n", "delta_n", "=", "self", ".", "m", "\n", "\n", "s_p", "=", "self", ".", "s", "*", "alpha_p", "*", "(", "sim_mat", "-", "delta_p", ")", "\n", "s_n", "=", "self", ".", "s", "*", "alpha_n", "*", "(", "sim_mat", "-", "delta_n", ")", "\n", "\n", "targets", "=", "F", ".", "one_hot", "(", "targets", ",", "num_classes", "=", "self", ".", "_num_classes", ")", "\n", "\n", "pred_class_logits", "=", "targets", "*", "s_p", "+", "(", "1.0", "-", "targets", ")", "*", "s_n", "\n", "\n", "return", "pred_class_logits", "", "", "", ""]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.center_loss.CenterLoss.__init__": [[18, 28], ["torch.nn.Module.__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.randn().cuda", "torch.randn", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.softmax_loss.LabelSmoothingCrossEntropy.__init__"], ["def", "__init__", "(", "self", ",", "num_classes", "=", "751", ",", "feat_dim", "=", "2048", ",", "use_gpu", "=", "True", ")", ":", "\n", "        ", "super", "(", "CenterLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "feat_dim", "=", "feat_dim", "\n", "self", ".", "use_gpu", "=", "use_gpu", "\n", "\n", "if", "self", ".", "use_gpu", ":", "\n", "            ", "self", ".", "centers", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "self", ".", "num_classes", ",", "self", ".", "feat_dim", ")", ".", "cuda", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "centers", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "self", ".", "num_classes", ",", "self", ".", "feat_dim", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.center_loss.CenterLoss.forward": [[29, 55], ["x.size", "distmat.addmm_", "torch.arange().long", "labels.unsqueeze().expand.unsqueeze().expand.unsqueeze().expand", "labels.unsqueeze().expand.unsqueeze().expand.eq", "range", "torch.cat", "torch.cat.mean", "x.size", "labels.unsqueeze().expand.unsqueeze().expand.size", "torch.pow().sum().expand", "torch.pow().sum().expand().t", "center_loss.CenterLoss.centers.t", "classes.cuda.cuda.cuda", "classes.cuda.cuda.expand", "value.clamp.clamp.clamp", "torch.cat.append", "torch.arange", "labels.unsqueeze().expand.unsqueeze().expand.unsqueeze", "torch.pow().sum", "torch.pow().sum().expand", "torch.pow", "torch.pow().sum", "torch.pow"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "labels", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            x: feature matrix with shape (batch_size, feat_dim).\n            labels: ground truth labels with shape (num_classes).\n        \"\"\"", "\n", "assert", "x", ".", "size", "(", "0", ")", "==", "labels", ".", "size", "(", "0", ")", ",", "\"features.size(0) is not equal to labels.size(0)\"", "\n", "\n", "batch_size", "=", "x", ".", "size", "(", "0", ")", "\n", "distmat", "=", "torch", ".", "pow", "(", "x", ",", "2", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "expand", "(", "batch_size", ",", "self", ".", "num_classes", ")", "+", "torch", ".", "pow", "(", "self", ".", "centers", ",", "2", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "expand", "(", "self", ".", "num_classes", ",", "batch_size", ")", ".", "t", "(", ")", "\n", "distmat", ".", "addmm_", "(", "1", ",", "-", "2", ",", "x", ",", "self", ".", "centers", ".", "t", "(", ")", ")", "\n", "\n", "classes", "=", "torch", ".", "arange", "(", "self", ".", "num_classes", ")", ".", "long", "(", ")", "\n", "if", "self", ".", "use_gpu", ":", "classes", "=", "classes", ".", "cuda", "(", ")", "\n", "labels", "=", "labels", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "batch_size", ",", "self", ".", "num_classes", ")", "\n", "mask", "=", "labels", ".", "eq", "(", "classes", ".", "expand", "(", "batch_size", ",", "self", ".", "num_classes", ")", ")", "\n", "\n", "dist", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "value", "=", "distmat", "[", "i", "]", "[", "mask", "[", "i", "]", "]", "\n", "value", "=", "value", ".", "clamp", "(", "min", "=", "1e-12", ",", "max", "=", "1e+12", ")", "# for numerical stability", "\n", "dist", ".", "append", "(", "value", ")", "\n", "", "dist", "=", "torch", ".", "cat", "(", "dist", ")", "\n", "loss", "=", "dist", ".", "mean", "(", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.make_loss.make_loss": [[13, 82], ["center_loss.CenterLoss", "print", "softmax_loss.CrossEntropyLabelSmooth", "print", "triplet_loss.TripletLoss", "print", "triplet_loss.TripletLoss", "print", "torch.cross_entropy", "print", "print", "isinstance", "isinstance", "isinstance", "isinstance", "softmax_loss.CrossEntropyLabelSmooth.", "torch.cross_entropy", "softmax_loss.CrossEntropyLabelSmooth.", "sum", "len", "sum", "len", "triplet_loss.TripletLoss.", "torch.cross_entropy", "sum", "len", "sum", "len", "triplet_loss.TripletLoss.", "softmax_loss.CrossEntropyLabelSmooth.", "triplet_loss.TripletLoss.", "torch.cross_entropy", "triplet_loss.TripletLoss.", "triplet_loss.TripletLoss.", "triplet_loss.TripletLoss."], "function", ["None"], ["def", "make_loss", "(", "cfg", ",", "num_classes", ")", ":", "# modified by gu", "\n", "    ", "sampler", "=", "cfg", ".", "DATALOADER", ".", "SAMPLER", "\n", "feat_dim", "=", "2048", "\n", "center_criterion", "=", "CenterLoss", "(", "num_classes", "=", "num_classes", ",", "feat_dim", "=", "feat_dim", ",", "use_gpu", "=", "True", ")", "# center loss", "\n", "if", "'triplet'", "in", "cfg", ".", "MODEL", ".", "METRIC_LOSS_TYPE", ":", "\n", "        ", "if", "cfg", ".", "MODEL", ".", "NO_MARGIN", ":", "\n", "            ", "triplet", "=", "TripletLoss", "(", ")", "\n", "print", "(", "\"using soft triplet loss for training\"", ")", "\n", "", "else", ":", "\n", "            ", "triplet", "=", "TripletLoss", "(", "cfg", ".", "SOLVER", ".", "MARGIN", ")", "# triplet loss", "\n", "print", "(", "\"using triplet loss with margin:{}\"", ".", "format", "(", "cfg", ".", "SOLVER", ".", "MARGIN", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "print", "(", "'expected METRIC_LOSS_TYPE should be triplet'", "\n", "'but got {}'", ".", "format", "(", "cfg", ".", "MODEL", ".", "METRIC_LOSS_TYPE", ")", ")", "\n", "\n", "", "if", "cfg", ".", "MODEL", ".", "IF_LABELSMOOTH", "==", "'on'", ":", "\n", "        ", "xent", "=", "CrossEntropyLabelSmooth", "(", "num_classes", "=", "num_classes", ")", "\n", "print", "(", "\"label smooth on, numclasses:\"", ",", "num_classes", ")", "\n", "\n", "", "if", "sampler", "in", "[", "'softmax'", ",", "'id'", "]", ":", "\n", "        ", "def", "loss_func", "(", "score", ",", "feat", ",", "target", ",", "target_cam", ")", ":", "\n", "            ", "return", "F", ".", "cross_entropy", "(", "score", ",", "target", ")", "\n", "\n", "#  elif cfg.DATALOADER.SAMPLER in ['softmax_triplet', 'id_triplet', 'img_triplet']:", "\n", "", "", "elif", "'triplet'", "in", "sampler", ":", "\n", "        ", "def", "loss_func", "(", "score", ",", "feat", ",", "target", ",", "target_cam", ")", ":", "\n", "            ", "if", "cfg", ".", "MODEL", ".", "METRIC_LOSS_TYPE", "==", "'triplet'", ":", "\n", "                ", "if", "cfg", ".", "MODEL", ".", "IF_LABELSMOOTH", "==", "'on'", ":", "\n", "                    ", "if", "isinstance", "(", "score", ",", "list", ")", ":", "\n", "                        ", "ID_LOSS", "=", "[", "xent", "(", "scor", ",", "target", ")", "for", "scor", "in", "score", "[", "1", ":", "]", "]", "\n", "ID_LOSS", "=", "sum", "(", "ID_LOSS", ")", "/", "len", "(", "ID_LOSS", ")", "\n", "ID_LOSS", "=", "0.5", "*", "ID_LOSS", "+", "0.5", "*", "xent", "(", "score", "[", "0", "]", ",", "target", ")", "\n", "", "else", ":", "\n", "                        ", "ID_LOSS", "=", "xent", "(", "score", ",", "target", ")", "\n", "\n", "", "if", "isinstance", "(", "feat", ",", "list", ")", ":", "\n", "                            ", "TRI_LOSS", "=", "[", "triplet", "(", "feats", ",", "target", ")", "[", "0", "]", "for", "feats", "in", "feat", "[", "1", ":", "]", "]", "\n", "TRI_LOSS", "=", "sum", "(", "TRI_LOSS", ")", "/", "len", "(", "TRI_LOSS", ")", "\n", "TRI_LOSS", "=", "0.5", "*", "TRI_LOSS", "+", "0.5", "*", "triplet", "(", "feat", "[", "0", "]", ",", "target", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "                            ", "TRI_LOSS", "=", "triplet", "(", "feat", ",", "target", ",", "normalize_feature", "=", "cfg", ".", "SOLVER", ".", "TRP_L2", ")", "[", "0", "]", "\n", "\n", "", "return", "cfg", ".", "MODEL", ".", "ID_LOSS_WEIGHT", "*", "ID_LOSS", "+", "cfg", ".", "MODEL", ".", "TRIPLET_LOSS_WEIGHT", "*", "TRI_LOSS", "\n", "", "else", ":", "\n", "                    ", "if", "isinstance", "(", "score", ",", "list", ")", ":", "\n", "                        ", "ID_LOSS", "=", "[", "F", ".", "cross_entropy", "(", "scor", ",", "target", ")", "for", "scor", "in", "score", "[", "1", ":", "]", "]", "\n", "ID_LOSS", "=", "sum", "(", "ID_LOSS", ")", "/", "len", "(", "ID_LOSS", ")", "\n", "ID_LOSS", "=", "0.5", "*", "ID_LOSS", "+", "0.5", "*", "F", ".", "cross_entropy", "(", "score", "[", "0", "]", ",", "target", ")", "\n", "", "else", ":", "\n", "                        ", "ID_LOSS", "=", "F", ".", "cross_entropy", "(", "score", ",", "target", ")", "\n", "\n", "", "if", "isinstance", "(", "feat", ",", "list", ")", ":", "\n", "                            ", "TRI_LOSS", "=", "[", "triplet", "(", "feats", ",", "target", ")", "[", "0", "]", "for", "feats", "in", "feat", "[", "1", ":", "]", "]", "\n", "TRI_LOSS", "=", "sum", "(", "TRI_LOSS", ")", "/", "len", "(", "TRI_LOSS", ")", "\n", "TRI_LOSS", "=", "0.5", "*", "TRI_LOSS", "+", "0.5", "*", "triplet", "(", "feat", "[", "0", "]", ",", "target", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "                            ", "TRI_LOSS", "=", "triplet", "(", "feat", ",", "target", ",", "normalize_feature", "=", "cfg", ".", "SOLVER", ".", "TRP_L2", ")", "[", "0", "]", "\n", "\n", "", "return", "cfg", ".", "MODEL", ".", "ID_LOSS_WEIGHT", "*", "ID_LOSS", "+", "cfg", ".", "MODEL", ".", "TRIPLET_LOSS_WEIGHT", "*", "TRI_LOSS", "\n", "", "", "else", ":", "\n", "                ", "print", "(", "'expected METRIC_LOSS_TYPE should be triplet'", "\n", "'but got {}'", ".", "format", "(", "cfg", ".", "MODEL", ".", "METRIC_LOSS_TYPE", ")", ")", "\n", "\n", "", "", "", "else", ":", "\n", "        ", "print", "(", "'expected sampler should be softmax, triplet, softmax_triplet or softmax_triplet_center'", "\n", "'but got {}'", ".", "format", "(", "cfg", ".", "DATALOADER", ".", "SAMPLER", ")", ")", "\n", "", "return", "loss_func", ",", "center_criterion", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.triplet_loss.TripletLoss.__init__": [[113, 120], ["torch.nn.MarginRankingLoss", "torch.nn.SoftMarginLoss"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "margin", "=", "None", ",", "hard_factor", "=", "0.0", ")", ":", "\n", "        ", "self", ".", "margin", "=", "margin", "\n", "self", ".", "hard_factor", "=", "hard_factor", "\n", "if", "margin", "is", "not", "None", ":", "\n", "            ", "self", ".", "ranking_loss", "=", "nn", ".", "MarginRankingLoss", "(", "margin", "=", "margin", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "ranking_loss", "=", "nn", ".", "SoftMarginLoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.triplet_loss.TripletLoss.__call__": [[121, 136], ["triplet_loss.euclidean_dist", "triplet_loss.hard_example_mining", "dist_an.new().resize_as_().fill_", "triplet_loss.normalize", "triplet_loss.TripletLoss.ranking_loss", "triplet_loss.TripletLoss.ranking_loss", "dist_an.new().resize_as_", "dist_an.new"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.triplet_loss.euclidean_dist", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.triplet_loss.hard_example_mining", "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.triplet_loss.normalize"], ["", "", "def", "__call__", "(", "self", ",", "global_feat", ",", "labels", ",", "normalize_feature", "=", "False", ")", ":", "\n", "        ", "if", "normalize_feature", ":", "\n", "            ", "global_feat", "=", "normalize", "(", "global_feat", ",", "axis", "=", "-", "1", ")", "\n", "", "dist_mat", "=", "euclidean_dist", "(", "global_feat", ",", "global_feat", ")", "\n", "dist_ap", ",", "dist_an", "=", "hard_example_mining", "(", "dist_mat", ",", "labels", ")", "\n", "\n", "#  dist_ap *= (1.0 + self.hard_factor)", "\n", "#  dist_an *= (1.0 - self.hard_factor)", "\n", "\n", "y", "=", "dist_an", ".", "new", "(", ")", ".", "resize_as_", "(", "dist_an", ")", ".", "fill_", "(", "1", ")", "\n", "if", "self", ".", "margin", "is", "not", "None", ":", "\n", "            ", "loss", "=", "self", ".", "ranking_loss", "(", "dist_an", ",", "dist_ap", ",", "y", ")", "\n", "", "else", ":", "\n", "            ", "loss", "=", "self", ".", "ranking_loss", "(", "dist_an", "-", "dist_ap", ",", "y", ")", "\n", "", "return", "loss", ",", "dist_ap", ",", "dist_an", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.triplet_loss.normalize": [[5, 14], ["torch.norm().expand_as", "torch.norm"], "function", ["None"], ["def", "normalize", "(", "x", ",", "axis", "=", "-", "1", ")", ":", "\n", "    ", "\"\"\"Normalizing to unit length along the specified dimension.\n    Args:\n      x: pytorch Variable\n    Returns:\n      x: pytorch Variable, same shape as input\n    \"\"\"", "\n", "x", "=", "1.", "*", "x", "/", "(", "torch", ".", "norm", "(", "x", ",", "2", ",", "axis", ",", "keepdim", "=", "True", ")", ".", "expand_as", "(", "x", ")", "+", "1e-12", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.triplet_loss.euclidean_dist": [[16, 32], ["torch.pow().sum().expand", "torch.pow().sum().expand().t", "dist.clamp().sqrt.clamp().sqrt", "x.size", "y.size", "torch.pow().sum", "torch.pow().sum().expand", "torch.matmul", "dist.clamp().sqrt.clamp", "y.t", "torch.pow", "torch.pow().sum", "torch.pow"], "function", ["None"], ["", "def", "euclidean_dist", "(", "x", ",", "y", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n      x: pytorch Variable, with shape [m, d]\n      y: pytorch Variable, with shape [n, d]\n    Returns:\n      dist: pytorch Variable, with shape [m, n]\n    \"\"\"", "\n", "m", ",", "n", "=", "x", ".", "size", "(", "0", ")", ",", "y", ".", "size", "(", "0", ")", "\n", "xx", "=", "torch", ".", "pow", "(", "x", ",", "2", ")", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", ".", "expand", "(", "m", ",", "n", ")", "\n", "yy", "=", "torch", ".", "pow", "(", "y", ",", "2", ")", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", ".", "expand", "(", "n", ",", "m", ")", ".", "t", "(", ")", "\n", "dist", "=", "xx", "+", "yy", "\n", "dist", "=", "dist", "-", "2", "*", "torch", ".", "matmul", "(", "x", ",", "y", ".", "t", "(", ")", ")", "\n", "# dist.addmm_(1, -2, x, y.t())", "\n", "dist", "=", "dist", ".", "clamp", "(", "min", "=", "1e-12", ")", ".", "sqrt", "(", ")", "# for numerical stability", "\n", "return", "dist", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.triplet_loss.cosine_dist": [[34, 49], ["torch.pow().sum().sqrt().expand", "torch.pow().sum().sqrt().expand().t", "torch.mm", "x.size", "y.size", "y.t", "torch.pow().sum().sqrt", "torch.pow().sum().sqrt().expand", "torch.pow().sum", "torch.pow().sum().sqrt", "torch.pow", "torch.pow().sum", "torch.pow"], "function", ["None"], ["", "def", "cosine_dist", "(", "x", ",", "y", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n      x: pytorch Variable, with shape [m, d]\n      y: pytorch Variable, with shape [n, d]\n    Returns:\n      dist: pytorch Variable, with shape [m, n]\n    \"\"\"", "\n", "m", ",", "n", "=", "x", ".", "size", "(", "0", ")", ",", "y", ".", "size", "(", "0", ")", "\n", "x_norm", "=", "torch", ".", "pow", "(", "x", ",", "2", ")", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", ".", "sqrt", "(", ")", ".", "expand", "(", "m", ",", "n", ")", "\n", "y_norm", "=", "torch", ".", "pow", "(", "y", ",", "2", ")", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", ".", "sqrt", "(", ")", ".", "expand", "(", "n", ",", "m", ")", ".", "t", "(", ")", "\n", "xy_intersection", "=", "torch", ".", "mm", "(", "x", ",", "y", ".", "t", "(", ")", ")", "\n", "dist", "=", "xy_intersection", "/", "(", "x_norm", "*", "y_norm", ")", "\n", "dist", "=", "(", "1.", "-", "dist", ")", "/", "2", "\n", "return", "dist", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.triplet_loss.hard_example_mining": [[51, 105], ["dist_mat.size", "labels.expand().eq", "labels.expand().ne", "torch.max", "torch.min", "dist_ap.squeeze.squeeze", "dist_an.squeeze.squeeze", "len", "dist_mat.size", "dist_mat.size", "labels.expand().t", "labels.expand().t", "dist_mat[].contiguous().view", "dist_mat[].contiguous().view", "labels.new().resize_as_().copy_().unsqueeze().expand", "torch.gather", "torch.gather", "p_inds.squeeze.squeeze", "n_inds.squeeze.squeeze", "dist_mat.size", "labels.expand", "labels.expand", "ind[].contiguous().view", "ind[].contiguous().view", "labels.expand", "labels.expand", "dist_mat[].contiguous", "dist_mat[].contiguous", "labels.new().resize_as_().copy_().unsqueeze", "ind[].contiguous", "ind[].contiguous", "labels.new().resize_as_().copy_", "torch.arange().long", "labels.new().resize_as_", "torch.arange", "labels.new"], "function", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.dino.utils.SmoothedValue.max"], ["", "def", "hard_example_mining", "(", "dist_mat", ",", "labels", ",", "return_inds", "=", "False", ")", ":", "\n", "    ", "\"\"\"For each anchor, find the hardest positive and negative sample.\n    Args:\n      dist_mat: pytorch Variable, pair wise distance between samples, shape [N, N]\n      labels: pytorch LongTensor, with shape [N]\n      return_inds: whether to return the indices. Save time if `False`(?)\n    Returns:\n      dist_ap: pytorch Variable, distance(anchor, positive); shape [N]\n      dist_an: pytorch Variable, distance(anchor, negative); shape [N]\n      p_inds: pytorch LongTensor, with shape [N];\n        indices of selected hard positive samples; 0 <= p_inds[i] <= N - 1\n      n_inds: pytorch LongTensor, with shape [N];\n        indices of selected hard negative samples; 0 <= n_inds[i] <= N - 1\n    NOTE: Only consider the case in which all labels have same num of samples,\n      thus we can cope with all anchors in parallel.\n    \"\"\"", "\n", "\n", "assert", "len", "(", "dist_mat", ".", "size", "(", ")", ")", "==", "2", "\n", "assert", "dist_mat", ".", "size", "(", "0", ")", "==", "dist_mat", ".", "size", "(", "1", ")", "\n", "N", "=", "dist_mat", ".", "size", "(", "0", ")", "\n", "\n", "# shape [N, N]", "\n", "is_pos", "=", "labels", ".", "expand", "(", "N", ",", "N", ")", ".", "eq", "(", "labels", ".", "expand", "(", "N", ",", "N", ")", ".", "t", "(", ")", ")", "\n", "is_neg", "=", "labels", ".", "expand", "(", "N", ",", "N", ")", ".", "ne", "(", "labels", ".", "expand", "(", "N", ",", "N", ")", ".", "t", "(", ")", ")", "\n", "\n", "# `dist_ap` means distance(anchor, positive)", "\n", "# both `dist_ap` and `relative_p_inds` with shape [N, 1]", "\n", "dist_ap", ",", "relative_p_inds", "=", "torch", ".", "max", "(", "\n", "dist_mat", "[", "is_pos", "]", ".", "contiguous", "(", ")", ".", "view", "(", "N", ",", "-", "1", ")", ",", "1", ",", "keepdim", "=", "True", ")", "\n", "# print(dist_mat[is_pos].shape)", "\n", "# `dist_an` means distance(anchor, negative)", "\n", "# both `dist_an` and `relative_n_inds` with shape [N, 1]", "\n", "dist_an", ",", "relative_n_inds", "=", "torch", ".", "min", "(", "\n", "dist_mat", "[", "is_neg", "]", ".", "contiguous", "(", ")", ".", "view", "(", "N", ",", "-", "1", ")", ",", "1", ",", "keepdim", "=", "True", ")", "\n", "# shape [N]", "\n", "dist_ap", "=", "dist_ap", ".", "squeeze", "(", "1", ")", "\n", "dist_an", "=", "dist_an", ".", "squeeze", "(", "1", ")", "\n", "\n", "if", "return_inds", ":", "\n", "# shape [N, N]", "\n", "        ", "ind", "=", "(", "labels", ".", "new", "(", ")", ".", "resize_as_", "(", "labels", ")", "\n", ".", "copy_", "(", "torch", ".", "arange", "(", "0", ",", "N", ")", ".", "long", "(", ")", ")", "\n", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "N", ",", "N", ")", ")", "\n", "# shape [N, 1]", "\n", "p_inds", "=", "torch", ".", "gather", "(", "\n", "ind", "[", "is_pos", "]", ".", "contiguous", "(", ")", ".", "view", "(", "N", ",", "-", "1", ")", ",", "1", ",", "relative_p_inds", ".", "data", ")", "\n", "n_inds", "=", "torch", ".", "gather", "(", "\n", "ind", "[", "is_neg", "]", ".", "contiguous", "(", ")", ".", "view", "(", "N", ",", "-", "1", ")", ",", "1", ",", "relative_n_inds", ".", "data", ")", "\n", "# shape [N]", "\n", "p_inds", "=", "p_inds", ".", "squeeze", "(", "1", ")", "\n", "n_inds", "=", "n_inds", ".", "squeeze", "(", "1", ")", "\n", "return", "dist_ap", ",", "dist_an", ",", "p_inds", ",", "n_inds", "\n", "\n", "", "return", "dist_ap", ",", "dist_an", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.softmax_loss.CrossEntropyLabelSmooth.__init__": [[16, 22], ["torch.Module.__init__", "torch.LogSoftmax", "torch.LogSoftmax"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.softmax_loss.LabelSmoothingCrossEntropy.__init__"], ["def", "__init__", "(", "self", ",", "num_classes", ",", "epsilon", "=", "0.1", ",", "use_gpu", "=", "True", ")", ":", "\n", "        ", "super", "(", "CrossEntropyLabelSmooth", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "epsilon", "=", "epsilon", "\n", "self", ".", "use_gpu", "=", "use_gpu", "\n", "self", ".", "logsoftmax", "=", "nn", ".", "LogSoftmax", "(", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.softmax_loss.CrossEntropyLabelSmooth.forward": [[23, 35], ["softmax_loss.CrossEntropyLabelSmooth.logsoftmax", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "targets.cuda.cuda.unsqueeze().data.cpu", "targets.cuda.cuda.cuda", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "softmax_loss.CrossEntropyLabelSmooth.size", "targets.cuda.cuda.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "targets", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            inputs: prediction matrix (before softmax) with shape (batch_size, num_classes)\n            targets: ground truth labels with shape (num_classes)\n        \"\"\"", "\n", "log_probs", "=", "self", ".", "logsoftmax", "(", "inputs", ")", "\n", "targets", "=", "torch", ".", "zeros", "(", "log_probs", ".", "size", "(", ")", ")", ".", "scatter_", "(", "1", ",", "targets", ".", "unsqueeze", "(", "1", ")", ".", "data", ".", "cpu", "(", ")", ",", "1", ")", "\n", "if", "self", ".", "use_gpu", ":", "targets", "=", "targets", ".", "cuda", "(", ")", "\n", "targets", "=", "(", "1", "-", "self", ".", "epsilon", ")", "*", "targets", "+", "self", ".", "epsilon", "/", "self", ".", "num_classes", "\n", "loss", "=", "(", "-", "targets", "*", "log_probs", ")", ".", "mean", "(", "0", ")", ".", "sum", "(", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.softmax_loss.LabelSmoothingCrossEntropy.__init__": [[40, 49], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.softmax_loss.LabelSmoothingCrossEntropy.__init__"], ["def", "__init__", "(", "self", ",", "smoothing", "=", "0.1", ")", ":", "\n", "        ", "\"\"\"\n        Constructor for the LabelSmoothing module.\n        :param smoothing: label smoothing factor\n        \"\"\"", "\n", "super", "(", "LabelSmoothingCrossEntropy", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "smoothing", "<", "1.0", "\n", "self", ".", "smoothing", "=", "smoothing", "\n", "self", ".", "confidence", "=", "1.", "-", "smoothing", "\n", "\n"]], "home.repos.pwc.inspect_result.michuanhaohao_transreid-ssl.loss.softmax_loss.LabelSmoothingCrossEntropy.forward": [[50, 57], ["torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "nll_loss.squeeze.squeeze.squeeze", "loss.mean", "torch.nn.functional.log_softmax.gather", "torch.nn.functional.log_softmax.mean", "target.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "target", ")", ":", "\n", "        ", "logprobs", "=", "F", ".", "log_softmax", "(", "x", ",", "dim", "=", "-", "1", ")", "\n", "nll_loss", "=", "-", "logprobs", ".", "gather", "(", "dim", "=", "-", "1", ",", "index", "=", "target", ".", "unsqueeze", "(", "1", ")", ")", "\n", "nll_loss", "=", "nll_loss", ".", "squeeze", "(", "1", ")", "\n", "smooth_loss", "=", "-", "logprobs", ".", "mean", "(", "dim", "=", "-", "1", ")", "\n", "loss", "=", "self", ".", "confidence", "*", "nll_loss", "+", "self", ".", "smoothing", "*", "smooth_loss", "\n", "return", "loss", ".", "mean", "(", ")", "", "", "", ""]]}