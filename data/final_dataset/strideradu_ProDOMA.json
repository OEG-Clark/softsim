{"home.repos.pwc.inspect_result.strideradu_ProDOMA.None.predict.predict": [[9, 66], ["model.cuda", "model.eval", "dataset.DnapepDataset", "data.DataLoader", "tqdm.tqdm", "len", "print", "list", "list.sort", "eval", "utils.load_checkpoint", "set", "pd.read_csv", "pd.read_csv.to_csv", "print", "os.path.basename", "os.path.dirname", "os.path.join", "np.save", "os.path.join", "np.save", "feature.cuda", "target.cuda", "torch.no_grad", "data_parallel", "F.softmax", "[].tolist", "target.tolist", "torch.topk", "enumerate", "corrects.data.cpu().numpy", "pd.read_csv.head", "F.softmax.data.cpu", "probs.append", "topks.append", "l.tolist", "top5[].tolist", "corrects.data.cpu", "os.path.splitext", "os.path.splitext", "torch.max", "[].view", "target.size", "torch.max"], "function", ["home.repos.pwc.inspect_result.strideradu_ProDOMA.None.utils.load_checkpoint"], ["def", "predict", "(", "args", ")", ":", "\n", "    ", "model", "=", "eval", "(", "args", ".", "model", ")", "(", "args", ")", "\n", "if", "args", ".", "model", "not", "in", "MODEL_WO_LOAD", ":", "\n", "        ", "load_checkpoint", "(", "args", ".", "checkpoint_path", ",", "model", ")", "\n", "", "model", ".", "cuda", "(", ")", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "probs", "=", "[", "]", "\n", "topks", "=", "[", "]", "\n", "y_pred", "=", "[", "]", "\n", "y_true", "=", "[", "]", "\n", "\n", "predict_data", "=", "DnapepDataset", "(", "args", ".", "test_file", ",", "type", "=", "'test'", ",", "shuffle", "=", "False", ")", "\n", "data_loader", "=", "data", ".", "DataLoader", "(", "predict_data", ",", "batch_size", "=", "args", ".", "batch_size", ")", "\n", "\n", "corrects", "=", "0", "\n", "for", "batch", "in", "tqdm", ".", "tqdm", "(", "data_loader", ")", ":", "\n", "        ", "feature", ",", "target", ",", "_", "=", "batch", "[", "0", "]", ",", "batch", "[", "1", "]", ",", "batch", "[", "2", "]", "\n", "# feature.data.t_(), target.data.sub_(1)  # batch first, index align", "\n", "feature", ",", "target", "=", "feature", ".", "cuda", "(", ")", ",", "target", ".", "cuda", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "logit", "=", "data_parallel", "(", "model", ",", "feature", ")", "\n", "prob", "=", "F", ".", "softmax", "(", "logit", ",", "1", ")", "\n", "\n", "y_pred", "+=", "torch", ".", "max", "(", "prob", ",", "1", ")", "[", "1", "]", ".", "tolist", "(", ")", "\n", "y_true", "+=", "target", ".", "tolist", "(", ")", "\n", "corrects", "+=", "(", "torch", ".", "max", "(", "prob", ",", "1", ")", "\n", "[", "1", "]", ".", "view", "(", "target", ".", "size", "(", ")", ")", ".", "data", "==", "target", ".", "data", ")", ".", "sum", "(", ")", "\n", "logit_5", ",", "top5", "=", "torch", ".", "topk", "(", "prob", ".", "data", ".", "cpu", "(", ")", ",", "args", ".", "topk", ")", "\n", "for", "i", ",", "l", "in", "enumerate", "(", "logit_5", ")", ":", "\n", "                ", "probs", ".", "append", "(", "l", ".", "tolist", "(", ")", ")", "\n", "topks", ".", "append", "(", "top5", "[", "i", "]", ".", "tolist", "(", ")", ")", "\n", "\n", "", "", "", "size", "=", "len", "(", "data_loader", ".", "dataset", ")", "\n", "accuracy", "=", "100", "*", "corrects", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "/", "size", "\n", "print", "(", "\"acc: {:.4f}%({}/{})\"", ".", "format", "(", "accuracy", ",", "corrects", ",", "size", ")", ")", "\n", "cls_label", "=", "list", "(", "set", "(", "y_true", ")", ")", "\n", "cls_label", ".", "sort", "(", ")", "\n", "# cm = confusion_matrix(y_true, y_pred)", "\n", "# plot_confusion_matrix(cm, target_names=cls_label)", "\n", "\n", "if", "args", ".", "predict_file", ":", "\n", "        ", "df", "=", "pd", ".", "read_csv", "(", "args", ".", "test_file", ",", "sep", "=", "'\\t'", ",", "header", "=", "None", ")", "\n", "df", "[", "\"probs\"", "]", "=", "probs", "\n", "df", "[", "\"topk\"", "]", "=", "topks", "\n", "df", ".", "to_csv", "(", "args", ".", "predict_file", ",", "columns", "=", "[", "2", ",", "0", ",", "\"topk\"", ",", "\"probs\"", "]", ")", "\n", "\n", "print", "(", "df", ".", "head", "(", ")", ")", "\n", "\n", "base", "=", "os", ".", "path", ".", "basename", "(", "args", ".", "predict_file", ")", "\n", "parent_dir", "=", "os", ".", "path", ".", "dirname", "(", "args", ".", "predict_file", ")", "\n", "file_path", "=", "os", ".", "path", ".", "join", "(", "parent_dir", ",", "os", ".", "path", ".", "splitext", "(", "base", ")", "[", "0", "]", "+", "'_probs.npy'", ")", "\n", "np", ".", "save", "(", "file_path", ",", "probs", ")", "\n", "\n", "file_path", "=", "os", ".", "path", ".", "join", "(", "parent_dir", ",", "os", ".", "path", ".", "splitext", "(", "base", ")", "[", "0", "]", "+", "'_topk.npy'", ")", "\n", "np", ".", "save", "(", "file_path", ",", "topks", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.strideradu_ProDOMA.None.train_oe.train": [[9, 93], ["model.cuda", "float", "print", "time.time", "model.train", "range", "pd.DataFrame", "pd.DataFrame.to_csv", "print", "utils.get_lrs", "enumerate", "zip", "torch.cat", "optimizer.zero_grad", "data_parallel", "criterion", "criterion.backward", "optimizer.step", "criterion.item", "losses.append", "print", "torch.cat.cuda", "target.cuda", "criterion.item", "train_oe.validate", "train_oe.validate", "print", "train_info[].append", "train_info[].append", "train_info[].append", "train_info[].append", "train_info[].append", "train_info[].append", "train_info[].append", "pd.DataFrame", "pd.DataFrame.to_csv", "model.train", "float", "criterion.item", "utils.save_checkpoint", "len", "logit[].mean", "torch.logsumexp", "time.time", "len", "len"], "function", ["home.repos.pwc.inspect_result.strideradu_ProDOMA.None.train.train", "home.repos.pwc.inspect_result.strideradu_ProDOMA.None.utils.get_lrs", "home.repos.pwc.inspect_result.strideradu_ProDOMA.None.train.validate", "home.repos.pwc.inspect_result.strideradu_ProDOMA.None.train.validate", "home.repos.pwc.inspect_result.strideradu_ProDOMA.None.train.train", "home.repos.pwc.inspect_result.strideradu_ProDOMA.None.utils.save_checkpoint"], ["def", "train", "(", "train_loader", ",", "ood_loader", ",", "val_loader", ",", "test_loader", ",", "model", ",", "optimizer", ",", "args", ")", ":", "\n", "    ", "model", ".", "cuda", "(", ")", "\n", "\n", "steps", "=", "0", "\n", "best_acc", "=", "0", "\n", "best_loss", "=", "float", "(", "'inf'", ")", "\n", "\n", "train_info", "=", "{", "'epoch'", ":", "[", "]", ",", "'train_loss'", ":", "[", "]", ",", "'val_loss'", ":", "[", "]", ",", "'metric'", ":", "[", "]", ",", "'best'", ":", "[", "]", ",", "'test_loss'", ":", "[", "]", ",", "\n", "'test_acc'", ":", "[", "]", "}", "\n", "\n", "print", "(", "\n", "'epoch |   lr    |    %        |  loss  |  avg   |val loss| top1  |  top3   |  best  |test loss| top1  | time | save |'", ")", "\n", "bg", "=", "time", ".", "time", "(", ")", "\n", "train_iter", "=", "0", "\n", "model", ".", "train", "(", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "1", ",", "args", ".", "epochs", "+", "1", ")", ":", "\n", "        ", "losses", "=", "[", "]", "\n", "train_loss", "=", "0", "\n", "last_val_iter", "=", "0", "\n", "current_lr", "=", "get_lrs", "(", "optimizer", ")", "\n", "for", "batch_idx", ",", "batch", "in", "enumerate", "(", "zip", "(", "train_loader", ",", "ood_loader", ")", ")", ":", "\n", "            ", "in_set", ",", "out_set", "=", "batch", "\n", "train_iter", "+=", "1", "\n", "feature", "=", "torch", ".", "cat", "(", "(", "in_set", "[", "0", "]", ",", "out_set", "[", "0", "]", ")", ",", "0", ")", "\n", "target", "=", "in_set", "[", "1", "]", "\n", "\n", "feature", ",", "target", "=", "feature", ".", "cuda", "(", ")", ",", "target", ".", "cuda", "(", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "logit", "=", "data_parallel", "(", "model", ",", "feature", ")", "\n", "\n", "# outlier exposure", "\n", "loss", "=", "criterion", "(", "logit", "[", ":", "len", "(", "in_set", "[", "0", "]", ")", "]", ",", "target", ")", "\n", "loss", "+=", "0.5", "*", "-", "(", "logit", "[", "len", "(", "in_set", "[", "0", "]", ")", ":", "]", ".", "mean", "(", "1", ")", "-", "torch", ".", "logsumexp", "(", "logit", "[", "len", "(", "in_set", "[", "0", "]", ")", ":", "]", ",", "dim", "=", "1", ")", ")", ".", "mean", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "train_loss", "+=", "loss", ".", "item", "(", ")", "\n", "losses", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "\n", "print", "(", "'\\r {:4d} | {:.5f} | {:4d}/{} | {:.4f} | {:.4f} |'", ".", "format", "(", "\n", "epoch", ",", "float", "(", "current_lr", "[", "0", "]", ")", ",", "args", ".", "batch_size", "*", "(", "batch_idx", "+", "1", ")", ",", "train_loader", ".", "num", ",", "loss", ".", "item", "(", ")", ",", "\n", "train_loss", "/", "(", "train_iter", "-", "last_val_iter", ")", ")", ",", "end", "=", "''", ")", "\n", "\n", "if", "train_iter", ">", "0", "and", "train_iter", "%", "args", ".", "iter_val", "==", "0", ":", "\n", "\n", "                ", "top_1", ",", "top_3", ",", "val_loss", ",", "size", "=", "validate", "(", "val_loader", ",", "model", ")", "\n", "test_top_1", ",", "tst_top_3", ",", "test_loss", ",", "_", "=", "validate", "(", "test_loader", ",", "model", ")", "\n", "_save_ckp", "=", "' '", "\n", "\n", "if", "val_loss", "<", "best_loss", ":", "\n", "                    ", "best_acc", "=", "top_1", "\n", "best_loss", "=", "val_loss", "\n", "save_checkpoint", "(", "args", ".", "checkpoint_path", ",", "model", ",", "optimizer", ")", "\n", "_save_ckp", "=", "'*'", "\n", "\n", "", "print", "(", "' {:.4f} | {:.4f} | {:.4f} | {:.4f} | {:.4f} | {:.4f} | {:.2f} | {:4s} |'", ".", "format", "(", "val_loss", ",", "top_1", ",", "\n", "top_3", ",", "best_acc", ",", "\n", "test_loss", ",", "\n", "test_top_1", ",", "\n", "(", "\n", "time", ".", "time", "(", ")", "-", "bg", ")", "/", "60", ",", "\n", "_save_ckp", ")", ")", "\n", "\n", "train_info", "[", "'epoch'", "]", ".", "append", "(", "args", ".", "batch_size", "*", "(", "batch_idx", "+", "1", ")", "/", "train_loader", ".", "num", "+", "epoch", ")", "\n", "train_info", "[", "'train_loss'", "]", ".", "append", "(", "train_loss", "/", "(", "batch_idx", "+", "1", ")", ")", "\n", "train_info", "[", "'val_loss'", "]", ".", "append", "(", "val_loss", ")", "\n", "train_info", "[", "'metric'", "]", ".", "append", "(", "top_1", ")", "\n", "train_info", "[", "'best'", "]", ".", "append", "(", "best_acc", ")", "\n", "train_info", "[", "'test_loss'", "]", ".", "append", "(", "test_loss", ")", "\n", "train_info", "[", "'test_acc'", "]", ".", "append", "(", "test_top_1", ")", "\n", "\n", "log_df", "=", "pd", ".", "DataFrame", "(", "train_info", ")", "\n", "log_df", ".", "to_csv", "(", "args", ".", "checkpoint_path", "+", "'.csv'", ")", "\n", "\n", "train_loss", "=", "0", "\n", "last_val_iter", "=", "train_iter", "\n", "\n", "model", ".", "train", "(", ")", "\n", "\n", "", "", "", "log_df", "=", "pd", ".", "DataFrame", "(", "train_info", ")", "\n", "log_df", ".", "to_csv", "(", "args", ".", "checkpoint_path", "+", "'.csv'", ")", "\n", "print", "(", "\"Best accuracy is {:.4f}\"", ".", "format", "(", "best_acc", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.strideradu_ProDOMA.None.train_oe.validate": [[95, 122], ["model.eval", "np.concatenate", "utils.metric.mean", "np.mean", "len", "isinstance", "torch.no_grad", "model", "criterion", "losses.append", "utils.metric", "corrects.append", "feature[].cuda", "feature[].cuda", "target.cuda", "feature.cuda", "target.cuda", "criterion.item", "utils.metric.data.cpu().numpy", "utils.metric.data.cpu"], "function", ["home.repos.pwc.inspect_result.strideradu_ProDOMA.None.utils.metric"], ["", "def", "validate", "(", "data_loader", ",", "model", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "corrects", "=", "[", "]", "\n", "losses", "=", "[", "]", "\n", "for", "batch", "in", "data_loader", ":", "\n", "        ", "feature", ",", "target", "=", "batch", "[", "0", "]", ",", "batch", "[", "1", "]", "\n", "# feature.data.t_(), target.data.sub_(1)  # batch first, index align", "\n", "if", "isinstance", "(", "feature", ",", "list", ")", ":", "\n", "#   feature contains seqs and positions", "\n", "            ", "feature", "[", "0", "]", ",", "feature", "[", "1", "]", ",", "target", "=", "feature", "[", "0", "]", ".", "cuda", "(", ")", ",", "feature", "[", "1", "]", ".", "cuda", "(", ")", ",", "target", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "            ", "feature", ",", "target", "=", "feature", ".", "cuda", "(", ")", ",", "target", ".", "cuda", "(", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "logit", "=", "model", "(", "feature", ")", "\n", "loss", "=", "criterion", "(", "logit", ",", "target", ")", "\n", "\n", "losses", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "correct", "=", "metric", "(", "logit", ",", "target", ")", "\n", "corrects", ".", "append", "(", "correct", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "", "", "correct", "=", "np", ".", "concatenate", "(", "corrects", ")", "\n", "correct", "=", "correct", ".", "mean", "(", "0", ")", "\n", "loss", "=", "np", ".", "mean", "(", "losses", ")", "\n", "top", "=", "[", "correct", "[", "0", "]", ",", "correct", "[", "0", "]", "+", "correct", "[", "1", "]", ",", "correct", "[", "0", "]", "+", "correct", "[", "1", "]", "+", "correct", "[", "2", "]", "]", "\n", "size", "=", "len", "(", "data_loader", ".", "dataset", ")", "\n", "return", "top", "[", "0", "]", ",", "top", "[", "2", "]", ",", "loss", ",", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.strideradu_ProDOMA.None.train.train": [[14, 102], ["model.cuda", "float", "amp.initialize", "print", "time.time", "model.train", "range", "pd.DataFrame", "pd.DataFrame.to_csv", "print", "utils.get_lrs", "enumerate", "isinstance", "optimizer.zero_grad", "data_parallel", "criterion", "optimizer.step", "criterion.item", "losses.append", "print", "amp.scale_loss", "scaled_loss.backward", "criterion.item", "train.validate", "train.validate", "print", "train_info[].append", "train_info[].append", "train_info[].append", "train_info[].append", "train_info[].append", "train_info[].append", "train_info[].append", "pd.DataFrame", "pd.DataFrame.to_csv", "model.train", "feature[].cuda", "feature[].cuda", "target.cuda", "feature.cuda", "target.cuda", "float", "criterion.item", "utils.save_checkpoint", "time.time"], "function", ["home.repos.pwc.inspect_result.strideradu_ProDOMA.None.train.train", "home.repos.pwc.inspect_result.strideradu_ProDOMA.None.utils.get_lrs", "home.repos.pwc.inspect_result.strideradu_ProDOMA.None.train.validate", "home.repos.pwc.inspect_result.strideradu_ProDOMA.None.train.validate", "home.repos.pwc.inspect_result.strideradu_ProDOMA.None.train.train", "home.repos.pwc.inspect_result.strideradu_ProDOMA.None.utils.save_checkpoint"], ["def", "train", "(", "train_loader", ",", "val_loader", ",", "test_loader", ",", "model", ",", "optimizer", ",", "args", ")", ":", "\n", "    ", "model", ".", "cuda", "(", ")", "\n", "\n", "steps", "=", "0", "\n", "best_acc", "=", "0", "\n", "best_loss", "=", "float", "(", "'inf'", ")", "\n", "\n", "model", ",", "optimizer", "=", "amp", ".", "initialize", "(", "model", ",", "optimizer", ",", "opt_level", "=", "\"O1\"", ",", "verbosity", "=", "0", ")", "\n", "\n", "train_info", "=", "{", "'epoch'", ":", "[", "]", ",", "'train_loss'", ":", "[", "]", ",", "'val_loss'", ":", "[", "]", ",", "'metric'", ":", "[", "]", ",", "'best'", ":", "[", "]", ",", "'test_loss'", ":", "[", "]", ",", "\n", "'test_acc'", ":", "[", "]", "}", "\n", "\n", "print", "(", "\n", "'epoch |   lr    |    %        |  loss  |  avg   |val loss| top1  |  top3   |  best  |test loss| top1  | time | save |'", ")", "\n", "bg", "=", "time", ".", "time", "(", ")", "\n", "train_iter", "=", "0", "\n", "model", ".", "train", "(", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "1", ",", "args", ".", "epochs", "+", "1", ")", ":", "\n", "        ", "losses", "=", "[", "]", "\n", "train_loss", "=", "0", "\n", "last_val_iter", "=", "0", "\n", "current_lr", "=", "get_lrs", "(", "optimizer", ")", "\n", "for", "batch_idx", ",", "batch", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "            ", "train_iter", "+=", "1", "\n", "feature", ",", "target", ",", "_", "=", "batch", "[", "0", "]", ",", "batch", "[", "1", "]", ",", "batch", "[", "2", "]", "\n", "# print(feature.shape)", "\n", "# feature.data.t_(), target.data.sub_(1)  # batch first, index align", "\n", "if", "isinstance", "(", "feature", ",", "list", ")", ":", "\n", "#   feature contains seqs and positions", "\n", "                ", "feature", "[", "0", "]", ",", "feature", "[", "1", "]", ",", "target", "=", "feature", "[", "0", "]", ".", "cuda", "(", ")", ",", "feature", "[", "1", "]", ".", "cuda", "(", ")", ",", "target", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "                ", "feature", ",", "target", "=", "feature", ".", "cuda", "(", ")", ",", "target", ".", "cuda", "(", ")", "\n", "\n", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "logit", "=", "data_parallel", "(", "model", ",", "feature", ")", "\n", "\n", "loss", "=", "criterion", "(", "logit", ",", "target", ")", "\n", "with", "amp", ".", "scale_loss", "(", "loss", ",", "optimizer", ")", "as", "scaled_loss", ":", "\n", "                ", "scaled_loss", ".", "backward", "(", ")", "\n", "", "optimizer", ".", "step", "(", ")", "\n", "\n", "train_loss", "+=", "loss", ".", "item", "(", ")", "\n", "losses", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "\n", "print", "(", "'\\r {:4d} | {:.5f} | {:4d}/{} | {:.4f} | {:.4f} |'", ".", "format", "(", "\n", "epoch", ",", "float", "(", "current_lr", "[", "0", "]", ")", ",", "args", ".", "batch_size", "*", "(", "batch_idx", "+", "1", ")", ",", "train_loader", ".", "num", ",", "loss", ".", "item", "(", ")", ",", "\n", "train_loss", "/", "(", "train_iter", "-", "last_val_iter", ")", ")", ",", "end", "=", "''", ")", "\n", "\n", "if", "train_iter", ">", "0", "and", "train_iter", "%", "args", ".", "iter_val", "==", "0", ":", "\n", "\n", "                ", "top_1", ",", "top_3", ",", "val_loss", ",", "size", "=", "validate", "(", "val_loader", ",", "model", ")", "\n", "test_top_1", ",", "tst_top_3", ",", "test_loss", ",", "_", "=", "validate", "(", "test_loader", ",", "model", ")", "\n", "_save_ckp", "=", "' '", "\n", "\n", "if", "val_loss", "<", "best_loss", ":", "\n", "                    ", "best_acc", "=", "top_1", "\n", "best_loss", "=", "val_loss", "\n", "save_checkpoint", "(", "args", ".", "checkpoint_path", ",", "model", ",", "optimizer", ")", "\n", "_save_ckp", "=", "'*'", "\n", "\n", "", "print", "(", "' {:.4f} | {:.4f} | {:.4f} | {:.4f} | {:.4f} | {:.4f} | {:.2f} | {:4s} |'", ".", "format", "(", "val_loss", ",", "top_1", ",", "\n", "top_3", ",", "best_acc", ",", "\n", "test_loss", ",", "\n", "test_top_1", ",", "\n", "(", "\n", "time", ".", "time", "(", ")", "-", "bg", ")", "/", "60", ",", "\n", "_save_ckp", ")", ")", "\n", "\n", "train_info", "[", "'epoch'", "]", ".", "append", "(", "args", ".", "batch_size", "*", "(", "batch_idx", "+", "1", ")", "/", "train_loader", ".", "num", "+", "epoch", ")", "\n", "train_info", "[", "'train_loss'", "]", ".", "append", "(", "train_loss", "/", "(", "batch_idx", "+", "1", ")", ")", "\n", "train_info", "[", "'val_loss'", "]", ".", "append", "(", "val_loss", ")", "\n", "train_info", "[", "'metric'", "]", ".", "append", "(", "top_1", ")", "\n", "train_info", "[", "'best'", "]", ".", "append", "(", "best_acc", ")", "\n", "train_info", "[", "'test_loss'", "]", ".", "append", "(", "test_loss", ")", "\n", "train_info", "[", "'test_acc'", "]", ".", "append", "(", "test_top_1", ")", "\n", "\n", "log_df", "=", "pd", ".", "DataFrame", "(", "train_info", ")", "\n", "log_df", ".", "to_csv", "(", "args", ".", "checkpoint_path", "+", "'.csv'", ")", "\n", "\n", "train_loss", "=", "0", "\n", "last_val_iter", "=", "train_iter", "\n", "\n", "model", ".", "train", "(", ")", "\n", "\n", "", "", "", "log_df", "=", "pd", ".", "DataFrame", "(", "train_info", ")", "\n", "log_df", ".", "to_csv", "(", "args", ".", "checkpoint_path", "+", "'.csv'", ")", "\n", "print", "(", "\"Best accuracy is {:.4f}\"", ".", "format", "(", "best_acc", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.strideradu_ProDOMA.None.train.validate": [[104, 131], ["model.eval", "np.concatenate", "utils.metric.mean", "np.mean", "len", "isinstance", "torch.no_grad", "model", "criterion", "losses.append", "utils.metric", "corrects.append", "feature[].cuda", "feature[].cuda", "target.cuda", "feature.cuda", "target.cuda", "criterion.item", "utils.metric.data.cpu().numpy", "utils.metric.data.cpu"], "function", ["home.repos.pwc.inspect_result.strideradu_ProDOMA.None.utils.metric"], ["", "def", "validate", "(", "data_loader", ",", "model", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "corrects", "=", "[", "]", "\n", "losses", "=", "[", "]", "\n", "for", "batch", "in", "data_loader", ":", "\n", "        ", "feature", ",", "target", "=", "batch", "[", "0", "]", ",", "batch", "[", "1", "]", "\n", "# feature.data.t_(), target.data.sub_(1)  # batch first, index align", "\n", "if", "isinstance", "(", "feature", ",", "list", ")", ":", "\n", "#   feature contains seqs and positions", "\n", "            ", "feature", "[", "0", "]", ",", "feature", "[", "1", "]", ",", "target", "=", "feature", "[", "0", "]", ".", "cuda", "(", ")", ",", "feature", "[", "1", "]", ".", "cuda", "(", ")", ",", "target", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "            ", "feature", ",", "target", "=", "feature", ".", "cuda", "(", ")", ",", "target", ".", "cuda", "(", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "logit", "=", "model", "(", "feature", ")", "\n", "loss", "=", "criterion", "(", "logit", ",", "target", ")", "\n", "\n", "losses", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "correct", "=", "metric", "(", "logit", ",", "target", ")", "\n", "corrects", ".", "append", "(", "correct", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "", "", "correct", "=", "np", ".", "concatenate", "(", "corrects", ")", "\n", "correct", "=", "correct", ".", "mean", "(", "0", ")", "\n", "loss", "=", "np", ".", "mean", "(", "losses", ")", "\n", "top", "=", "[", "correct", "[", "0", "]", ",", "correct", "[", "0", "]", "+", "correct", "[", "1", "]", ",", "correct", "[", "0", "]", "+", "correct", "[", "1", "]", "+", "correct", "[", "2", "]", "]", "\n", "size", "=", "len", "(", "data_loader", ".", "dataset", ")", "\n", "return", "top", "[", "0", "]", ",", "top", "[", "2", "]", ",", "loss", ",", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.strideradu_ProDOMA.None.dataset.DnapepDataset.__init__": [[151, 167], ["pandas.read_csv", "df.sample().reset_index.sample().reset_index.sample().reset_index", "df.sample().reset_index.sample().reset_index.sample"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "file_path", ",", "type", "=", "'train'", ",", "seq_len", "=", "1000", ",", "multilabel", "=", "False", ",", "num_classes", "=", "86", ",", "swap_dim", "=", "False", ",", "\n", "use_embed", "=", "False", ",", "shuffle", "=", "True", ")", ":", "\n", "        ", "self", ".", "type", "=", "type", "\n", "self", ".", "file", "=", "file_path", "\n", "self", ".", "seq_len", "=", "1000", "\n", "# column 0 is label, column 1 is seq", "\n", "df", "=", "pd", ".", "read_csv", "(", "self", ".", "file", ",", "sep", "=", "'\\t'", ",", "header", "=", "None", ")", "\n", "if", "shuffle", ":", "\n", "            ", "df", "=", "df", ".", "sample", "(", "frac", "=", "1", ")", ".", "reset_index", "(", "drop", "=", "True", ")", "\n", "", "self", ".", "labels", "=", "df", "[", "0", "]", "\n", "self", ".", "seqs", "=", "df", "[", "1", "]", "\n", "self", ".", "multilabel", "=", "multilabel", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "swap_dim", "=", "swap_dim", "\n", "self", ".", "use_embed", "=", "use_embed", "\n", "self", ".", "position", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.strideradu_ProDOMA.None.dataset.DnapepDataset.__len__": [[168, 170], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "seqs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.strideradu_ProDOMA.None.dataset.DnapepDataset.__getitem__": [[171, 207], ["numpy.zeros", "dataset.encoding_dna_seq_idx_aug", "numpy.zeros", "dataset.encoding_dna_seq_np_aug", "random.random", "numpy.zeros", "numpy.zeros", "dataset.DnapepDataset.get_position"], "methods", ["home.repos.pwc.inspect_result.strideradu_ProDOMA.None.dataset.encoding_dna_seq_idx_aug", "home.repos.pwc.inspect_result.strideradu_ProDOMA.None.dataset.encoding_dna_seq_np_aug", "home.repos.pwc.inspect_result.strideradu_ProDOMA.None.dataset.DnapepDataset.get_position"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "if", "self", ".", "use_embed", ":", "\n", "            ", "self", ".", "seq_dim", "=", "1", "\n", "seq_np", "=", "np", ".", "zeros", "(", "(", "3", ",", "self", ".", "seq_len", ",", "self", ".", "seq_dim", ")", ",", "dtype", "=", "np", ".", "int", ")", "\n", "peps", "=", "encoding_dna_seq_idx_aug", "(", "self", ".", "seqs", "[", "index", "]", ",", "seq_np", ",", "type", "=", "self", ".", "type", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "seq_dim", "=", "CHARLEN", "\n", "seq_np", "=", "np", ".", "zeros", "(", "(", "3", ",", "self", ".", "seq_len", ",", "self", ".", "seq_dim", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "# encoding_dna_seq_np(self.seqs[index], seq_np)", "\n", "peps", "=", "encoding_dna_seq_np_aug", "(", "self", ".", "seqs", "[", "index", "]", ",", "seq_np", ",", "type", "=", "self", ".", "type", ")", "\n", "", "target", "=", "self", ".", "labels", "[", "index", "]", "\n", "if", "self", ".", "swap_dim", ":", "\n", "            ", "r", "=", "random", ".", "random", "(", ")", "\n", "seq_np_aug", "=", "np", ".", "zeros", "(", "(", "3", ",", "self", ".", "seq_len", ",", "self", ".", "seq_dim", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "if", "r", "<", "(", "1", "/", "3", ")", ":", "\n", "                ", "seq_np_aug", "[", "0", ",", ":", ",", ":", "]", "=", "seq_np", "[", "1", ",", ":", ",", ":", "]", "\n", "seq_np_aug", "[", "1", ",", ":", ",", ":", "]", "=", "seq_np", "[", "2", ",", ":", ",", ":", "]", "\n", "seq_np_aug", "[", "2", ",", ":", ",", ":", "]", "=", "seq_np", "[", "0", ",", ":", ",", ":", "]", "\n", "# peps[0, 1, 2] = peps[1, 2, 0]", "\n", "", "elif", "r", "<", "(", "2", "/", "3", ")", ":", "\n", "                ", "seq_np_aug", "[", "0", ",", ":", ",", ":", "]", "=", "seq_np", "[", "2", ",", ":", ",", ":", "]", "\n", "seq_np_aug", "[", "1", ",", ":", ",", ":", "]", "=", "seq_np", "[", "0", ",", ":", ",", ":", "]", "\n", "seq_np_aug", "[", "2", ",", ":", ",", ":", "]", "=", "seq_np", "[", "1", ",", ":", ",", ":", "]", "\n", "# peps[0, 1, 2] = peps[2, 0, 1]", "\n", "", "else", ":", "\n", "                ", "seq_np_aug", "=", "seq_np", "\n", "\n", "", "seq_np", "=", "seq_np_aug", "\n", "\n", "", "if", "self", ".", "multilabel", ":", "\n", "            ", "target", "=", "np", ".", "zeros", "(", "self", ".", "num_classes", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "target", "[", "self", ".", "labels", "[", "index", "]", "]", "=", "1", "\n", "", "if", "self", ".", "position", ":", "\n", "            ", "pos_array", "=", "self", ".", "get_position", "(", "peps", "[", "0", "]", ")", "\n", "seq_np", "=", "[", "seq_np", ",", "pos_array", "]", "\n", "", "return", "seq_np", ",", "target", ",", "peps", "\n", "\n"]], "home.repos.pwc.inspect_result.strideradu_ProDOMA.None.dataset.DnapepDataset.get_position": [[208, 219], ["numpy.zeros", "enumerate"], "methods", ["None"], ["", "def", "get_position", "(", "self", ",", "pep_seq", ")", ":", "\n", "        ", "\"\"\"\n        generate position array\n        :param pep_seq:\n        :return:\n        \"\"\"", "\n", "inst_position", "=", "np", ".", "zeros", "(", "self", ".", "seq_len", ",", "dtype", "=", "np", ".", "int", ")", "\n", "for", "pos_i", ",", "w_i", "in", "enumerate", "(", "pep_seq", ")", ":", "\n", "            ", "if", "pos_i", "<", "1000", ":", "\n", "                ", "inst_position", "[", "pos_i", "]", "=", "pos_i", "+", "1", "\n", "", "", "return", "inst_position", "\n", "\n"]], "home.repos.pwc.inspect_result.strideradu_ProDOMA.None.dataset.DnaDataset.__init__": [[223, 231], ["pandas.read_csv"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "file_path", ",", "type", "=", "'train'", ",", "seq_len", "=", "1000", ")", ":", "\n", "        ", "self", ".", "type", "=", "type", "\n", "self", ".", "file", "=", "file_path", "\n", "self", ".", "seq_len", "=", "3000", "\n", "# column 0 is label, column 1 is seq", "\n", "df", "=", "pd", ".", "read_csv", "(", "self", ".", "file", ",", "sep", "=", "'\\t'", ",", "header", "=", "None", ")", "\n", "self", ".", "labels", "=", "df", "[", "0", "]", "\n", "self", ".", "seqs", "=", "df", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.strideradu_ProDOMA.None.dataset.DnaDataset.__len__": [[232, 234], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "seqs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.strideradu_ProDOMA.None.dataset.DnaDataset.__getitem__": [[235, 240], ["numpy.zeros", "dataset.encoding_dna"], "methods", ["home.repos.pwc.inspect_result.strideradu_ProDOMA.None.dataset.encoding_dna"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "seq_np", "=", "np", ".", "zeros", "(", "(", "1", ",", "self", ".", "seq_len", ",", "4", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "# encoding_dna_seq_np(self.seqs[index], seq_np)", "\n", "encoding_dna", "(", "self", ".", "seqs", "[", "index", "]", ",", "seq_np", ")", "\n", "return", "seq_np", ",", "self", ".", "labels", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.strideradu_ProDOMA.None.dataset.SingleFrameDataset.__init__": [[244, 255], ["pandas.read_csv", "df.sample().reset_index.sample().reset_index.sample().reset_index", "df.sample().reset_index.sample().reset_index.sample"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "file_path", ",", "type", "=", "'train'", ",", "seq_len", "=", "1000", ",", "multilabel", "=", "False", ",", "num_classes", "=", "86", ")", ":", "\n", "        ", "self", ".", "type", "=", "type", "\n", "self", ".", "file", "=", "file_path", "\n", "self", ".", "seq_len", "=", "1000", "\n", "# column 0 is label, column 1 is seq", "\n", "df", "=", "pd", ".", "read_csv", "(", "self", ".", "file", ",", "sep", "=", "'\\t'", ",", "header", "=", "None", ")", "\n", "df", "=", "df", ".", "sample", "(", "frac", "=", "1", ")", ".", "reset_index", "(", "drop", "=", "True", ")", "\n", "self", ".", "labels", "=", "df", "[", "0", "]", "\n", "self", ".", "seqs", "=", "df", "[", "1", "]", "\n", "self", ".", "multilabel", "=", "multilabel", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "\n"]], "home.repos.pwc.inspect_result.strideradu_ProDOMA.None.dataset.SingleFrameDataset.__len__": [[256, 258], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "seqs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.strideradu_ProDOMA.None.dataset.SingleFrameDataset.__getitem__": [[259, 268], ["numpy.zeros", "dataset.encoding_dna_seq_frame1_np_aug", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.strideradu_ProDOMA.None.dataset.encoding_dna_seq_frame1_np_aug"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "seq_np", "=", "np", ".", "zeros", "(", "(", "1", ",", "self", ".", "seq_len", ",", "CHARLEN", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "# encoding_dna_seq_np(self.seqs[index], seq_np)", "\n", "peps", "=", "encoding_dna_seq_frame1_np_aug", "(", "self", ".", "seqs", "[", "index", "]", ",", "seq_np", ",", "type", "=", "self", ".", "type", ")", "\n", "target", "=", "self", ".", "labels", "[", "index", "]", "\n", "if", "self", ".", "multilabel", ":", "\n", "            ", "target", "=", "np", ".", "zeros", "(", "self", ".", "num_classes", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "target", "[", "self", ".", "labels", "[", "index", "]", "]", "=", "1", "\n", "", "return", "seq_np", ",", "target", ",", "peps", "\n", "\n"]], "home.repos.pwc.inspect_result.strideradu_ProDOMA.None.dataset.PepFrameDataset.__init__": [[272, 282], ["pandas.read_csv", "df.sample().reset_index.sample().reset_index.sample().reset_index", "df.sample().reset_index.sample().reset_index.sample"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "file_path", ",", "type", "=", "'train'", ",", "seq_len", "=", "1000", ",", "num_classes", "=", "86", ")", ":", "\n", "        ", "self", ".", "type", "=", "type", "\n", "self", ".", "file", "=", "file_path", "\n", "self", ".", "seq_len", "=", "1000", "\n", "# column 0 is label, column 1 is seq", "\n", "df", "=", "pd", ".", "read_csv", "(", "self", ".", "file", ",", "sep", "=", "'\\t'", ",", "header", "=", "None", ")", "\n", "df", "=", "df", ".", "sample", "(", "frac", "=", "1", ")", ".", "reset_index", "(", "drop", "=", "True", ")", "\n", "self", ".", "labels", "=", "df", "[", "0", "]", "\n", "self", ".", "seqs", "=", "df", "[", "1", "]", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "\n"]], "home.repos.pwc.inspect_result.strideradu_ProDOMA.None.dataset.PepFrameDataset.__len__": [[283, 285], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "seqs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.strideradu_ProDOMA.None.dataset.PepFrameDataset.__getitem__": [[286, 290], ["dataset.PepFrameDataset.encoding"], "methods", ["home.repos.pwc.inspect_result.strideradu_ProDOMA.None.dataset.DnaFastaDataset.encoding"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "peps", "=", "self", ".", "encoding", "(", "self", ".", "seqs", "[", "index", "]", ")", "\n", "target", "=", "self", ".", "labels", "[", "index", "]", "\n", "return", "peps", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.strideradu_ProDOMA.None.dataset.PepFrameDataset.encoding": [[291, 312], ["range", "numpy.zeros", "len", "Bio.Seq.translate", "enumerate", "range", "isinstance"], "methods", ["None"], ["", "def", "encoding", "(", "self", ",", "seq", ")", ":", "\n", "        ", "arr", "=", "[", "np", ".", "zeros", "(", "(", "1", ",", "self", ".", "seq_len", ",", "CHARLEN", ")", ",", "dtype", "=", "np", ".", "float32", ")", "for", "i", "in", "range", "(", "3", ")", "]", "\n", "for", "frame_start", "in", "range", "(", "3", ")", ":", "\n", "            ", "length", "=", "len", "(", "seq", ")", "\n", "frame_end", "=", "3", "*", "(", "length", "//", "3", ")", "-", "3", "+", "frame_start", "\n", "pep", "=", "translate", "(", "seq", "[", "frame_start", ":", "frame_end", "]", ")", "\n", "for", "i", ",", "c", "in", "enumerate", "(", "pep", ")", ":", "\n", "                ", "if", "i", "<", "self", ".", "seq_len", ":", "\n", "                    ", "if", "c", "==", "\"_\"", "or", "c", "==", "\"*\"", ":", "\n", "# let them zero", "\n", "                        ", "continue", "\n", "", "elif", "isinstance", "(", "CHARSET", "[", "c", "]", ",", "int", ")", ":", "\n", "                        ", "idx", "=", "CHARSET", "[", "c", "]", "\n", "arr", "[", "frame_start", "]", "[", "0", "]", "[", "i", "]", "[", "idx", "]", "=", "1", "\n", "", "else", ":", "\n", "                        ", "idx1", "=", "CHARSET", "[", "c", "]", "[", "0", "]", "\n", "idx2", "=", "CHARSET", "[", "c", "]", "[", "1", "]", "\n", "arr", "[", "frame_start", "]", "[", "0", "]", "[", "i", "]", "[", "idx1", "]", "=", "0.5", "\n", "arr", "[", "frame_start", "]", "[", "0", "]", "[", "i", "]", "[", "idx2", "]", "=", "0.5", "\n", "\n", "", "", "", "", "return", "arr", "\n", "\n"]], "home.repos.pwc.inspect_result.strideradu_ProDOMA.None.dataset.OpenPepDataset.__init__": [[316, 329], ["pandas.read_csv", "df.sample().reset_index.sample().reset_index.sample().reset_index", "df.sample().reset_index.sample().reset_index.sample"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "file_path", ",", "type", "=", "'train'", ",", "seq_len", "=", "1000", ",", "num_classes", "=", "86", ",", "use_embed", "=", "False", ",", "shuffle", "=", "True", ")", ":", "\n", "        ", "self", ".", "type", "=", "type", "\n", "self", ".", "seq_len", "=", "1000", "\n", "self", ".", "file", "=", "file_path", "\n", "# column 0 is label, column 1 is seq", "\n", "df", "=", "pd", ".", "read_csv", "(", "self", ".", "file", ",", "sep", "=", "'\\t'", ",", "header", "=", "None", ")", "\n", "if", "shuffle", ":", "\n", "            ", "df", "=", "df", ".", "sample", "(", "frac", "=", "1", ")", ".", "reset_index", "(", "drop", "=", "True", ")", "\n", "", "self", ".", "labels", "=", "df", "[", "0", "]", "\n", "self", ".", "in_set", "=", "(", "self", ".", "labels", ">=", "0", ")", ".", "astype", "(", "'int32'", ")", "# 1: inset, 0: outset", "\n", "self", ".", "seqs", "=", "df", "[", "1", "]", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "use_embed", "=", "use_embed", "\n", "\n"]], "home.repos.pwc.inspect_result.strideradu_ProDOMA.None.dataset.OpenPepDataset.__len__": [[330, 332], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "seqs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.strideradu_ProDOMA.None.dataset.OpenPepDataset.__getitem__": [[333, 342], ["dataset.OpenPepDataset.encoding"], "methods", ["home.repos.pwc.inspect_result.strideradu_ProDOMA.None.dataset.DnaFastaDataset.encoding"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "if", "self", ".", "use_embed", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "else", ":", "\n", "            ", "self", ".", "seq_dim", "=", "CHARLEN", "\n", "seq_np", ",", "peps", "=", "self", ".", "encoding", "(", "self", ".", "seqs", "[", "index", "]", ")", "\n", "", "target", "=", "self", ".", "labels", "[", "index", "]", "\n", "inset", "=", "self", ".", "in_set", "[", "index", "]", "\n", "return", "seq_np", ",", "target", ",", "inset", "\n", "\n"]], "home.repos.pwc.inspect_result.strideradu_ProDOMA.None.dataset.OpenPepDataset.encoding": [[343, 366], ["numpy.zeros", "range", "len", "Bio.Seq.translate", "peps.append", "enumerate", "isinstance"], "methods", ["None"], ["", "def", "encoding", "(", "self", ",", "seq", ")", ":", "\n", "        ", "arr", "=", "np", ".", "zeros", "(", "(", "3", ",", "self", ".", "seq_len", ",", "CHARLEN", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "peps", "=", "[", "]", "\n", "for", "frame_start", "in", "range", "(", "3", ")", ":", "\n", "            ", "length", "=", "len", "(", "seq", ")", "\n", "frame_end", "=", "3", "*", "(", "length", "//", "3", ")", "-", "3", "+", "frame_start", "\n", "pep", "=", "translate", "(", "seq", "[", "frame_start", ":", "frame_end", "]", ")", "\n", "peps", ".", "append", "(", "pep", ")", "\n", "for", "i", ",", "c", "in", "enumerate", "(", "pep", ")", ":", "\n", "                ", "if", "i", "<", "self", ".", "seq_len", ":", "\n", "                    ", "if", "c", "==", "\"_\"", "or", "c", "==", "\"*\"", ":", "\n", "# let them zero", "\n", "                        ", "continue", "\n", "", "elif", "isinstance", "(", "CHARSET", "[", "c", "]", ",", "int", ")", ":", "\n", "                        ", "idx", "=", "CHARSET", "[", "c", "]", "\n", "arr", "[", "frame_start", "]", "[", "i", "]", "[", "idx", "]", "=", "1", "\n", "", "else", ":", "\n", "                        ", "idx1", "=", "CHARSET", "[", "c", "]", "[", "0", "]", "\n", "idx2", "=", "CHARSET", "[", "c", "]", "[", "1", "]", "\n", "arr", "[", "frame_start", "]", "[", "i", "]", "[", "idx1", "]", "=", "0.5", "\n", "arr", "[", "frame_start", "]", "[", "i", "]", "[", "idx2", "]", "=", "0.5", "\n", "\n", "", "", "", "", "return", "arr", ",", "peps", "\n", "\n"]], "home.repos.pwc.inspect_result.strideradu_ProDOMA.None.dataset.DnaFastaDataset.__init__": [[370, 387], ["list", "Bio.SeqIO.parse", "dataset.DnaFastaDataset.ids.append", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "file_path", ",", "labels", "=", "None", ",", "type", "=", "'train'", ",", "seq_len", "=", "1000", ",", "num_classes", "=", "86", ",", "use_embed", "=", "False", ",", "\n", "shuffle", "=", "True", ")", ":", "\n", "        ", "self", ".", "type", "=", "type", "\n", "self", ".", "seq_len", "=", "1000", "\n", "# column 0 is label, column 1 is seq", "\n", "self", ".", "file", "=", "file_path", "\n", "\n", "records", "=", "list", "(", "SeqIO", ".", "parse", "(", "file_path", ",", "format", "=", "'fasta'", ")", ")", "\n", "self", ".", "ids", "=", "[", "]", "\n", "for", "record", "in", "records", ":", "\n", "            ", "self", ".", "ids", ".", "append", "(", "record", ".", "id", ")", "\n", "", "if", "labels", "is", "None", ":", "\n", "            ", "labels", "=", "[", "-", "1", "]", "*", "len", "(", "records", ")", "\n", "", "self", ".", "labels", "=", "labels", "\n", "self", ".", "seqs", "=", "records", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "use_embed", "=", "use_embed", "\n", "\n"]], "home.repos.pwc.inspect_result.strideradu_ProDOMA.None.dataset.DnaFastaDataset.__len__": [[388, 390], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "seqs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.strideradu_ProDOMA.None.dataset.DnaFastaDataset.__getitem__": [[391, 399], ["dataset.DnaFastaDataset.encoding"], "methods", ["home.repos.pwc.inspect_result.strideradu_ProDOMA.None.dataset.DnaFastaDataset.encoding"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "if", "self", ".", "use_embed", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "else", ":", "\n", "            ", "self", ".", "seq_dim", "=", "CHARLEN", "\n", "seq_np", ",", "peps", "=", "self", ".", "encoding", "(", "self", ".", "seqs", "[", "index", "]", ")", "\n", "", "target", "=", "self", ".", "labels", "[", "index", "]", "\n", "return", "seq_np", ",", "target", ",", "peps", "\n", "\n"]], "home.repos.pwc.inspect_result.strideradu_ProDOMA.None.dataset.DnaFastaDataset.encoding": [[400, 423], ["numpy.zeros", "range", "len", "Bio.Seq.translate", "peps.append", "enumerate", "str", "isinstance"], "methods", ["None"], ["", "def", "encoding", "(", "self", ",", "record", ")", ":", "\n", "        ", "arr", "=", "np", ".", "zeros", "(", "(", "3", ",", "self", ".", "seq_len", ",", "CHARLEN", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "peps", "=", "[", "]", "\n", "for", "frame_start", "in", "range", "(", "3", ")", ":", "\n", "            ", "length", "=", "len", "(", "record", ".", "seq", ")", "\n", "frame_end", "=", "3", "*", "(", "length", "//", "3", ")", "-", "3", "+", "frame_start", "\n", "pep", "=", "translate", "(", "record", ".", "seq", "[", "frame_start", ":", "frame_end", "]", ")", "\n", "peps", ".", "append", "(", "str", "(", "pep", ")", ")", "\n", "for", "i", ",", "c", "in", "enumerate", "(", "pep", ")", ":", "\n", "                ", "if", "i", "<", "self", ".", "seq_len", ":", "\n", "                    ", "if", "c", "==", "\"_\"", "or", "c", "==", "\"*\"", ":", "\n", "# let them zero", "\n", "                        ", "continue", "\n", "", "elif", "isinstance", "(", "CHARSET", "[", "c", "]", ",", "int", ")", ":", "\n", "                        ", "idx", "=", "CHARSET", "[", "c", "]", "\n", "arr", "[", "frame_start", "]", "[", "i", "]", "[", "idx", "]", "=", "1", "\n", "", "else", ":", "\n", "                        ", "idx1", "=", "CHARSET", "[", "c", "]", "[", "0", "]", "\n", "idx2", "=", "CHARSET", "[", "c", "]", "[", "1", "]", "\n", "arr", "[", "frame_start", "]", "[", "i", "]", "[", "idx1", "]", "=", "0.5", "\n", "arr", "[", "frame_start", "]", "[", "i", "]", "[", "idx2", "]", "=", "0.5", "\n", "\n", "", "", "", "", "return", "arr", ",", "peps", "\n", "", "", ""]], "home.repos.pwc.inspect_result.strideradu_ProDOMA.None.dataset.encoding_dna_seq_np": [[24, 40], ["range", "Bio.Seq.translate", "enumerate", "isinstance"], "function", ["None"], ["def", "encoding_dna_seq_np", "(", "seq", ",", "arr", ",", "seq_len", "=", "1000", ")", ":", "\n", "    ", "for", "frame_start", "in", "range", "(", "3", ")", ":", "\n", "        ", "pep", "=", "translate", "(", "seq", "[", "frame_start", ":", "]", ")", "\n", "for", "i", ",", "c", "in", "enumerate", "(", "pep", ")", ":", "\n", "            ", "if", "i", "<", "seq_len", ":", "\n", "                ", "if", "c", "==", "\"_\"", "or", "c", "==", "\"*\"", ":", "\n", "# let them zero", "\n", "                    ", "continue", "\n", "", "elif", "isinstance", "(", "CHARSET", "[", "c", "]", ",", "int", ")", ":", "\n", "                    ", "idx", "=", "CHARSET", "[", "c", "]", "\n", "arr", "[", "frame_start", "]", "[", "i", "]", "[", "idx", "]", "=", "1", "\n", "", "else", ":", "\n", "                    ", "idx1", "=", "CHARSET", "[", "c", "]", "[", "0", "]", "\n", "idx2", "=", "CHARSET", "[", "c", "]", "[", "1", "]", "\n", "arr", "[", "frame_start", "]", "[", "i", "]", "[", "idx1", "]", "=", "0.5", "\n", "arr", "[", "frame_start", "]", "[", "i", "]", "[", "idx2", "]", "=", "0.5", "\n", "\n"]], "home.repos.pwc.inspect_result.strideradu_ProDOMA.None.dataset.encoding_dna_seq_np_aug": [[42, 75], ["range", "len", "Bio.Seq.translate", "enumerate", "peps.append", "isinstance", "random.random"], "function", ["None"], ["", "", "", "", "", "def", "encoding_dna_seq_np_aug", "(", "seq", ",", "arr", ",", "seq_len", "=", "1000", ",", "perc", "=", "0.0", ",", "type", "=", "'train'", ")", ":", "\n", "    ", "\"\"\"\n\n    :param seq:\n    :param arr:\n    :param seq_len:\n    :param perc: kind like drop out, randomly replaced peptide as 0\n    :param type:\n    :return:\n    \"\"\"", "\n", "peps", "=", "[", "]", "\n", "for", "frame_start", "in", "range", "(", "3", ")", ":", "\n", "        ", "length", "=", "len", "(", "seq", ")", "\n", "frame_end", "=", "3", "*", "(", "length", "//", "3", ")", "-", "3", "+", "frame_start", "\n", "pep", "=", "translate", "(", "seq", "[", "frame_start", ":", "frame_end", "]", ")", "\n", "for", "i", ",", "c", "in", "enumerate", "(", "pep", ")", ":", "\n", "            ", "if", "i", "<", "seq_len", ":", "\n", "                ", "if", "random", ".", "random", "(", ")", "<", "perc", "and", "type", "==", "'train'", ":", "\n", "                    ", "continue", "\n", "", "if", "c", "==", "\"_\"", "or", "c", "==", "\"*\"", ":", "\n", "# let them zero", "\n", "                    ", "continue", "\n", "", "elif", "isinstance", "(", "CHARSET", "[", "c", "]", ",", "int", ")", ":", "\n", "                    ", "idx", "=", "CHARSET", "[", "c", "]", "\n", "arr", "[", "frame_start", "]", "[", "i", "]", "[", "idx", "]", "=", "1", "\n", "", "else", ":", "\n", "                    ", "idx1", "=", "CHARSET", "[", "c", "]", "[", "0", "]", "\n", "idx2", "=", "CHARSET", "[", "c", "]", "[", "1", "]", "\n", "arr", "[", "frame_start", "]", "[", "i", "]", "[", "idx1", "]", "=", "0.5", "\n", "arr", "[", "frame_start", "]", "[", "i", "]", "[", "idx2", "]", "=", "0.5", "\n", "\n", "", "", "", "peps", ".", "append", "(", "pep", ")", "\n", "", "return", "peps", "\n", "\n"]], "home.repos.pwc.inspect_result.strideradu_ProDOMA.None.dataset.encoding_dna_seq_idx_aug": [[77, 107], ["range", "len", "Bio.Seq.translate", "enumerate", "peps.append", "isinstance"], "function", ["None"], ["", "def", "encoding_dna_seq_idx_aug", "(", "seq", ",", "arr", ",", "seq_len", "=", "1000", ",", "type", "=", "'train'", ")", ":", "\n", "    ", "\"\"\"\n\n    :param seq:\n    :param arr:\n    :param seq_len:\n    :param perc: kind like drop out, randomly replaced peptide as 0\n    :param type:\n    :return:\n    \"\"\"", "\n", "peps", "=", "[", "]", "\n", "for", "frame_start", "in", "range", "(", "3", ")", ":", "\n", "        ", "length", "=", "len", "(", "seq", ")", "\n", "frame_end", "=", "3", "*", "(", "length", "//", "3", ")", "-", "3", "+", "frame_start", "\n", "pep", "=", "translate", "(", "seq", "[", "frame_start", ":", "frame_end", "]", ")", "\n", "for", "i", ",", "c", "in", "enumerate", "(", "pep", ")", ":", "\n", "            ", "if", "i", "<", "seq_len", ":", "\n", "                ", "if", "c", "==", "\"_\"", "or", "c", "==", "\"*\"", ":", "\n", "# let them zero", "\n", "                    ", "continue", "\n", "", "elif", "isinstance", "(", "CHARSET", "[", "c", "]", ",", "int", ")", ":", "\n", "                    ", "idx", "=", "CHARSET", "[", "c", "]", "\n", "# we need add extra 1 to left 0 for *", "\n", "arr", "[", "frame_start", "]", "[", "i", "]", "=", "idx", "+", "1", "\n", "", "else", ":", "\n", "                    ", "idx", "=", "CHARSET_SUB", "[", "c", "]", "\n", "arr", "[", "frame_start", "]", "[", "i", "]", "=", "idx", "+", "1", "\n", "\n", "", "", "", "peps", ".", "append", "(", "pep", ")", "\n", "", "return", "peps", "\n", "\n"]], "home.repos.pwc.inspect_result.strideradu_ProDOMA.None.dataset.encoding_dna_seq_frame1_np_aug": [[109, 132], ["len", "Bio.Seq.translate", "enumerate", "peps.append", "isinstance", "random.random"], "function", ["None"], ["", "def", "encoding_dna_seq_frame1_np_aug", "(", "seq", ",", "arr", ",", "seq_len", "=", "1000", ",", "perc", "=", "0.7", ",", "type", "=", "'train'", ")", ":", "\n", "    ", "peps", "=", "[", "]", "\n", "length", "=", "len", "(", "seq", ")", "\n", "frame_end", "=", "3", "*", "(", "length", "//", "3", ")", "\n", "pep", "=", "translate", "(", "seq", "[", ":", "frame_end", "]", ")", "\n", "for", "i", ",", "c", "in", "enumerate", "(", "pep", ")", ":", "\n", "        ", "if", "i", "<", "seq_len", ":", "\n", "            ", "if", "random", ".", "random", "(", ")", "<", "perc", "and", "type", "==", "'train'", ":", "\n", "                ", "continue", "\n", "", "if", "c", "==", "\"_\"", "or", "c", "==", "\"*\"", ":", "\n", "# let them zero", "\n", "                ", "continue", "\n", "", "elif", "isinstance", "(", "CHARSET", "[", "c", "]", ",", "int", ")", ":", "\n", "                ", "idx", "=", "CHARSET", "[", "c", "]", "\n", "arr", "[", "0", "]", "[", "i", "]", "[", "idx", "]", "=", "1", "\n", "", "else", ":", "\n", "                ", "idx1", "=", "CHARSET", "[", "c", "]", "[", "0", "]", "\n", "idx2", "=", "CHARSET", "[", "c", "]", "[", "1", "]", "\n", "arr", "[", "0", "]", "[", "i", "]", "[", "idx1", "]", "=", "0.5", "\n", "arr", "[", "0", "]", "[", "i", "]", "[", "idx2", "]", "=", "0.5", "\n", "\n", "", "", "", "peps", ".", "append", "(", "pep", ")", "\n", "return", "peps", "\n", "\n"]], "home.repos.pwc.inspect_result.strideradu_ProDOMA.None.dataset.encoding_dna": [[134, 147], ["enumerate", "isinstance", "len"], "function", ["None"], ["", "def", "encoding_dna", "(", "seq", ",", "arr", ",", "seq_len", "=", "1000", ")", ":", "\n", "    ", "for", "i", ",", "c", "in", "enumerate", "(", "seq", ")", ":", "\n", "        ", "if", "i", "<", "seq_len", ":", "\n", "            ", "if", "c", "==", "\"_\"", "or", "c", "==", "\"*\"", ":", "\n", "# let them zero", "\n", "                ", "continue", "\n", "", "elif", "isinstance", "(", "DNASET", "[", "c", "]", ",", "int", ")", ":", "\n", "                ", "idx", "=", "DNASET", "[", "c", "]", "\n", "arr", "[", "0", "]", "[", "i", "]", "[", "idx", "]", "=", "1", "\n", "", "else", ":", "\n", "                ", "nums", "=", "len", "(", "DNASET", "[", "c", "]", ")", "\n", "for", "idx", "in", "DNASET", "[", "c", "]", ":", "\n", "                    ", "arr", "[", "0", "]", "[", "i", "]", "[", "idx", "]", "=", "1", "/", "nums", "\n", "\n"]], "home.repos.pwc.inspect_result.strideradu_ProDOMA.None.predict_openset.predict": [[8, 95], ["print", "model.cuda", "model.eval", "dataset.DnapepDataset", "data.DataLoader", "tqdm.tqdm", "len", "accuracy_score", "print", "np.argsort", "enumerate", "print", "print", "print", "print", "print", "print", "np.array", "np.load", "eval", "utils.load_checkpoint", "pd.read_csv", "pd.read_csv.to_csv", "feature.cuda", "target.cuda", "torch.no_grad", "data_parallel", "F.softmax", "torch.max", "enumerate", "target.tolist", "torch.topk", "enumerate", "int", "scores.tolist", "preds.tolist", "y_score.append", "F.softmax.data.cpu", "probs.append", "topks.append", "y_pred.append", "y_pred.append", "l.numpy", "top5[].numpy"], "function", ["home.repos.pwc.inspect_result.strideradu_ProDOMA.None.utils.load_checkpoint"], ["def", "predict", "(", "args", ")", ":", "\n", "    ", "if", "args", ".", "threshold", "is", "None", ":", "\n", "        ", "threshold", "=", "np", ".", "array", "(", "[", "0.0", "]", "*", "args", ".", "num_classes", ")", "\n", "\n", "", "else", ":", "\n", "        ", "threshold", "=", "np", ".", "load", "(", "args", ".", "threshold", ")", "\n", "\n", "", "print", "(", "threshold", ")", "\n", "\n", "model", "=", "eval", "(", "args", ".", "model", ")", "(", "args", ")", "\n", "if", "args", ".", "model", "not", "in", "MODEL_WO_LOAD", ":", "\n", "        ", "load_checkpoint", "(", "args", ".", "checkpoint_path", ",", "model", ")", "\n", "", "model", ".", "cuda", "(", ")", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "probs", "=", "[", "]", "\n", "topks", "=", "[", "]", "\n", "y_pred", "=", "[", "]", "\n", "y_true", "=", "[", "]", "\n", "\n", "y_score", "=", "[", "]", "\n", "\n", "predict_data", "=", "DnapepDataset", "(", "args", ".", "test_file", ",", "type", "=", "'test'", ",", "shuffle", "=", "False", ")", "\n", "data_loader", "=", "data", ".", "DataLoader", "(", "predict_data", ",", "batch_size", "=", "args", ".", "batch_size", ")", "\n", "\n", "corrects", "=", "0", "\n", "for", "batch", "in", "tqdm", ".", "tqdm", "(", "data_loader", ")", ":", "\n", "        ", "feature", ",", "target", ",", "_", "=", "batch", "[", "0", "]", ",", "batch", "[", "1", "]", ",", "batch", "[", "2", "]", "\n", "# feature.data.t_(), target.data.sub_(1)  # batch first, index align", "\n", "feature", ",", "target", "=", "feature", ".", "cuda", "(", ")", ",", "target", ".", "cuda", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "logit", "=", "data_parallel", "(", "model", ",", "feature", ")", "\n", "prob", "=", "F", ".", "softmax", "(", "logit", ",", "1", ")", "\n", "\n", "scores", ",", "preds", "=", "torch", ".", "max", "(", "prob", ",", "1", ")", "\n", "scores", ",", "preds", "=", "scores", ".", "tolist", "(", ")", ",", "preds", ".", "tolist", "(", ")", "\n", "for", "i", ",", "pred", "in", "enumerate", "(", "preds", ")", ":", "\n", "                ", "y_score", ".", "append", "(", "scores", "[", "i", "]", ")", "\n", "if", "scores", "[", "i", "]", ">", "threshold", "[", "pred", "]", ":", "\n", "                    ", "y_pred", ".", "append", "(", "pred", ")", "\n", "\n", "", "else", ":", "\n", "                    ", "y_pred", ".", "append", "(", "-", "1", ")", "\n", "\n", "", "", "y_true", "+=", "target", ".", "tolist", "(", ")", "\n", "logit_5", ",", "top5", "=", "torch", ".", "topk", "(", "prob", ".", "data", ".", "cpu", "(", ")", ",", "args", ".", "topk", ")", "\n", "for", "i", ",", "l", "in", "enumerate", "(", "logit_5", ")", ":", "\n", "                ", "probs", ".", "append", "(", "l", ".", "numpy", "(", ")", ")", "\n", "topks", ".", "append", "(", "top5", "[", "i", "]", ".", "numpy", "(", ")", ")", "\n", "\n", "", "", "", "size", "=", "len", "(", "data_loader", ".", "dataset", ")", "\n", "accuracy", "=", "accuracy_score", "(", "y_true", ",", "y_pred", ")", "\n", "print", "(", "\"acc: {:.4f}%({}/{})\"", ".", "format", "(", "100", "*", "accuracy", ",", "int", "(", "accuracy", "*", "size", ")", ",", "size", ")", ")", "\n", "\n", "# print(y_true)", "\n", "# print(y_pred)", "\n", "idx", "=", "np", ".", "argsort", "(", "y_score", ")", "\n", "# print(np.array(y_true)[idx])", "\n", "\n", "true", "=", "0", "\n", "for", "y", "in", "y_true", ":", "\n", "        ", "if", "y", "!=", "-", "1", ":", "\n", "            ", "true", "+=", "1", "\n", "\n", "", "", "tp", "=", "0", "\n", "p", "=", "0", "\n", "for", "i", ",", "y", "in", "enumerate", "(", "y_pred", ")", ":", "\n", "        ", "if", "y", "!=", "-", "1", ":", "\n", "            ", "p", "+=", "1", "\n", "if", "y", "==", "y_true", "[", "i", "]", ":", "\n", "                ", "tp", "+=", "1", "\n", "", "", "", "print", "(", "tp", ")", "\n", "print", "(", "p", ")", "\n", "print", "(", "true", ")", "\n", "recall", "=", "tp", "/", "true", "\n", "precision", "=", "tp", "/", "p", "\n", "print", "(", "f'recall is {recall}'", ")", "\n", "print", "(", "f'precision is {precision}'", ")", "\n", "print", "(", "f'f1 is {2*recall * precision / (recall + precision)}'", ")", "\n", "\n", "if", "args", ".", "predict_file", ":", "\n", "        ", "df", "=", "pd", ".", "read_csv", "(", "args", ".", "test_file", ",", "sep", "=", "'\\t'", ",", "header", "=", "None", ")", "\n", "df", "[", "\"probs\"", "]", "=", "probs", "\n", "df", "[", "\"topk\"", "]", "=", "topks", "\n", "df", "[", "\"pred\"", "]", "=", "y_pred", "\n", "df", ".", "to_csv", "(", "args", ".", "predict_file", ",", "columns", "=", "[", "2", ",", "0", ",", "\"pred\"", ",", "\"topk\"", ",", "\"probs\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.strideradu_ProDOMA.None.utils.argparser": [[34, 262], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_known_args", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "argparse.ArgumentParser.print_help", "sys.exit"], "function", ["None"], ["def", "argparser", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "# for model", "\n", "parser", ".", "add_argument", "(", "\n", "'--filter_sizes'", ",", "\n", "default", "=", "[", "8", ",", "12", ",", "16", ",", "20", ",", "24", ",", "28", ",", "32", ",", "36", "]", ",", "\n", "type", "=", "int", ",", "\n", "nargs", "=", "'+'", ",", "\n", "help", "=", "'Space seperated list of motif filter lengths. (ex, --filter_sizes 4 8 12)'", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--num_filters'", ",", "\n", "default", "=", "256", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "'number of filters per kernel'", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--num_hidden'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "512", ",", "\n", "help", "=", "'Number of neurons in hidden layer.'", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--l2'", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "0.001", ",", "\n", "help", "=", "'(Lambda value / 2) of L2 regularizer on weights connected to last layer (0 to exclude).'", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--dropout'", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "0.5", ",", "\n", "help", "=", "'Rate for dropout.'", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--num_classes'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "86", ",", "\n", "help", "=", "'Number of classes (families).'", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--seq_len'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "1000", ",", "\n", "help", "=", "'Length of input sequences.'", "\n", ")", "\n", "# for learning", "\n", "parser", ".", "add_argument", "(", "\n", "'--lr'", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "0.001", ",", "\n", "help", "=", "'Initial learning rate.'", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--epochs'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "2", ",", "\n", "help", "=", "'Number of epochs to train.'", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--batch_size'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "256", ",", "\n", "help", "=", "'Batch size. Must divide evenly into the dataset sizes.'", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--train_file'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "os", ".", "path", ".", "join", "(", "DATA_DIR", ",", "default_train_file", ")", ",", "\n", "help", "=", "'Directory for input data.'", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "'--valid_file'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "os", ".", "path", ".", "join", "(", "DATA_DIR", ",", "default_valid_file", ")", ",", "\n", "help", "=", "'Directory for input data.'", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "'--test_file'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "os", ".", "path", ".", "join", "(", "DATA_DIR", ",", "default_test_file", ")", ",", "\n", "help", "=", "'Directory for input data.'", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "'--ood_file'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "os", ".", "path", ".", "join", "(", "DATA_DIR", ",", "default_train_file", ")", ",", "\n", "help", "=", "'Directory for input ood data.'", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "'--checkpoint_path'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "'Path to write checkpoint file.'", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--log_dir'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "DATA_DIR", ",", "\n", "help", "=", "'Directory for log data.'", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--log_interval'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "100", ",", "\n", "help", "=", "'Interval of steps for logging.'", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--save_interval'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "100", ",", "\n", "help", "=", "'Interval of steps for save model.'", "\n", ")", "\n", "# test", "\n", "parser", ".", "add_argument", "(", "\n", "'--fine_tuning'", ",", "\n", "type", "=", "bool", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "'If true, weight on last layer will not be restored.'", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--fine_tuning_layers'", ",", "\n", "type", "=", "str", ",", "\n", "nargs", "=", "'+'", ",", "\n", "default", "=", "[", "\"fc2\"", "]", ",", "\n", "help", "=", "'Which layers should be restored. Default is [\"fc2\"].'", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--save_prediction'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "'Path to save prediction'", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--topk'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "1", ",", "\n", "help", "=", "'Top k prediction for predict'", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--predict_file'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "'path for predict data.'", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--iter_val'", ",", "default", "=", "100", ",", "type", "=", "int", ",", "help", "=", "'start epoch'", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "'--model'", ",", "default", "=", "'PepCNN'", ",", "type", "=", "str", ",", "help", "=", "'model name'", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "'--openset_model'", ",", "default", "=", "'ThresholdBaseline'", ",", "type", "=", "str", ",", "help", "=", "'model name for openset'", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "'--filter_topk'", ",", "default", "=", "100", ",", "type", "=", "int", ",", "help", "=", "'top_filters to print'", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "'--suffix'", ",", "default", "=", "''", ",", "type", "=", "str", ",", "help", "=", "'suffix of the output folder'", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--truth'", ",", "default", "=", "None", ",", "type", "=", "str", ",", "help", "=", "'ground truth of the simulated reads'", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "'--embed_dim'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "10", ",", "\n", "help", "=", "'embedding dimension.'", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "'--conv1_filter'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "3", ",", "\n", "help", "=", "'the filter size for the first convolution of CNNDeep.'", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "'--epsilon'", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "0.0012", ",", "\n", "help", "=", "'epsilon for ODIN.'", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "'--temperature'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "1000", ",", "\n", "help", "=", "'temperature for ODIN.'", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "'--repeat'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "5", ",", "\n", "help", "=", "'repeat for experiments.'", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "'--threshold'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "'path to threshold file.'", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--swap_dim'", ",", "action", "=", "'store_true'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--apex'", ",", "action", "=", "'store_true'", ")", "\n", "try", ":", "\n", "        ", "FLAGS", ",", "unparsed", "=", "parser", ".", "parse_known_args", "(", ")", "\n", "\n", "", "except", ":", "\n", "        ", "parser", ".", "print_help", "(", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n", "# check validity", "\n", "# assert (len(FLAGS.filter_sizes) == len(FLAGS.num_filters))", "\n", "\n", "", "return", "FLAGS", "\n", "\n"]], "home.repos.pwc.inspect_result.strideradu_ProDOMA.None.utils.save_checkpoint": [[264, 268], ["torch.save", "torch.save", "torch.save", "model.state_dict", "optimizer.state_dict"], "function", ["None"], ["", "def", "save_checkpoint", "(", "checkpoint_path", ",", "model", ",", "optimizer", ")", ":", "\n", "    ", "state", "=", "{", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", "}", "\n", "torch", ".", "save", "(", "state", ",", "checkpoint_path", ")", "\n", "# print('model saved to %s' % checkpoint_path)", "\n"]], "home.repos.pwc.inspect_result.strideradu_ProDOMA.None.utils.load_checkpoint": [[271, 277], ["torch.load", "torch.load", "torch.load", "model.load_state_dict", "print", "optimizer.load_state_dict"], "function", ["None"], ["", "def", "load_checkpoint", "(", "checkpoint_path", ",", "model", ",", "optimizer", "=", "None", ")", ":", "\n", "    ", "state", "=", "torch", ".", "load", "(", "checkpoint_path", ")", "\n", "model", ".", "load_state_dict", "(", "state", "[", "'state_dict'", "]", ")", "\n", "if", "optimizer", ":", "\n", "        ", "optimizer", ".", "load_state_dict", "(", "state", "[", "'optimizer'", "]", ")", "\n", "", "print", "(", "'model loaded from %s'", "%", "checkpoint_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.strideradu_ProDOMA.None.utils.multi_f_measure": [[279, 296], ["torch.autograd.Variable", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "probs.size", "torch.mul", "torch.mul", "torch.mul", "fs.sum"], "function", ["None"], ["", "def", "multi_f_measure", "(", "probs", ",", "labels", ",", "threshold", "=", "0.5", ",", "beta", "=", "1", ")", ":", "\n", "    ", "SMALL", "=", "1e-6", "# 0  #1e-12", "\n", "batch_size", "=", "probs", ".", "size", "(", ")", "[", "0", "]", "\n", "\n", "# weather", "\n", "l", "=", "labels", "\n", "p", "=", "Variable", "(", "(", "probs", ">", "threshold", ")", ".", "float", "(", ")", ")", "\n", "\n", "num_pos", "=", "torch", ".", "sum", "(", "p", ",", "1", ")", "\n", "num_pos_hat", "=", "torch", ".", "sum", "(", "l", ",", "1", ")", "\n", "tp", "=", "torch", ".", "sum", "(", "torch", ".", "mul", "(", "l", ",", "p", ")", ",", "1", ")", "\n", "precise", "=", "tp", "/", "(", "num_pos", "+", "SMALL", ")", "\n", "recall", "=", "tp", "/", "(", "num_pos_hat", "+", "SMALL", ")", "\n", "\n", "fs", "=", "(", "1", "+", "beta", "*", "beta", ")", "*", "precise", "*", "recall", "/", "(", "beta", "*", "beta", "*", "precise", "+", "recall", "+", "SMALL", ")", "\n", "f", "=", "fs", ".", "sum", "(", ")", "/", "batch_size", "\n", "return", "f", "\n", "\n"]], "home.repos.pwc.inspect_result.strideradu_ProDOMA.None.utils.plot_confusion_matrix": [[298, 373], ["matplotlib.figure", "matplotlib.imshow", "matplotlib.title", "matplotlib.colorbar", "itertools.product", "matplotlib.tight_layout", "matplotlib.ylabel", "matplotlib.xlabel", "matplotlib.show", "numpy.trace", "float", "list", "matplotlib.get_cmap", "numpy.arange", "matplotlib.xticks", "matplotlib.yticks", "range", "range", "numpy.sum", "range", "cm.astype", "len", "cm.max", "cm.max", "matplotlib.text", "matplotlib.text", "cm.sum"], "function", ["None"], ["", "def", "plot_confusion_matrix", "(", "cm", ",", "\n", "target_names", "=", "None", ",", "\n", "title", "=", "'Confusion matrix'", ",", "\n", "cmap", "=", "None", ",", "\n", "normalize", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    given a sklearn confusion matrix (cm), make a nice plot\n\n    Arguments\n    ---------\n    cm:           confusion matrix from sklearn.metrics.confusion_matrix\n\n    target_names: given classification classes such as [0, 1, 2]\n                  the class names, for example: ['high', 'medium', 'low']\n\n    title:        the text to display at the top of the matrix\n\n    cmap:         the gradient of the values displayed from matplotlib.pyplot.cm\n                  see http://matplotlib.org/examples/color/colormaps_reference.html\n                  plt.get_cmap('jet') or plt.cm.Blues\n\n    normalize:    If False, plot the raw numbers\n                  If True, plot the proportions\n\n    Usage\n    -----\n    plot_confusion_matrix(cm           = cm,                  # confusion matrix created by\n                                                              # sklearn.metrics.confusion_matrix\n                          normalize    = True,                # show proportions\n                          target_names = y_labels_vals,       # list of names of the classes\n                          title        = best_estimator_name) # title of graph\n\n    Citiation\n    ---------\n    http://scikit-learn.org/stable/auto_examples/model_selection/plot_confusion_matrix.html\n\n    \"\"\"", "\n", "\n", "accuracy", "=", "np", ".", "trace", "(", "cm", ")", "/", "float", "(", "np", ".", "sum", "(", "cm", ")", ")", "\n", "misclass", "=", "1", "-", "accuracy", "\n", "\n", "if", "target_names", "is", "None", ":", "\n", "        ", "target_names", "=", "list", "(", "range", "(", "cm", ".", "shape", "[", "0", "]", "+", "1", ")", ")", "\n", "\n", "", "if", "cmap", "is", "None", ":", "\n", "        ", "cmap", "=", "plt", ".", "get_cmap", "(", "'Blues'", ")", "\n", "\n", "", "if", "normalize", ":", "\n", "        ", "cm", "=", "cm", ".", "astype", "(", "'float'", ")", "/", "cm", ".", "sum", "(", "axis", "=", "1", ")", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "\n", "", "plt", ".", "figure", "(", "figsize", "=", "(", "8", ",", "6", ")", ")", "\n", "plt", ".", "imshow", "(", "cm", ",", "interpolation", "=", "'nearest'", ",", "cmap", "=", "cmap", ")", "\n", "plt", ".", "title", "(", "title", ")", "\n", "plt", ".", "colorbar", "(", ")", "\n", "\n", "if", "target_names", "is", "not", "None", ":", "\n", "        ", "tick_marks", "=", "np", ".", "arange", "(", "len", "(", "target_names", ")", ")", "\n", "plt", ".", "xticks", "(", "tick_marks", ",", "target_names", ",", "rotation", "=", "45", ")", "\n", "plt", ".", "yticks", "(", "tick_marks", ",", "target_names", ")", "\n", "\n", "", "thresh", "=", "cm", ".", "max", "(", ")", "/", "1.5", "if", "normalize", "else", "cm", ".", "max", "(", ")", "/", "2", "\n", "for", "i", ",", "j", "in", "itertools", ".", "product", "(", "range", "(", "cm", ".", "shape", "[", "0", "]", ")", ",", "range", "(", "cm", ".", "shape", "[", "1", "]", ")", ")", ":", "\n", "        ", "if", "normalize", ":", "\n", "            ", "plt", ".", "text", "(", "j", ",", "i", ",", "\"{:0.4f}\"", ".", "format", "(", "cm", "[", "i", ",", "j", "]", ")", ",", "\n", "horizontalalignment", "=", "\"center\"", ",", "\n", "color", "=", "\"white\"", "if", "cm", "[", "i", ",", "j", "]", ">", "thresh", "else", "\"black\"", ")", "\n", "", "else", ":", "\n", "            ", "plt", ".", "text", "(", "j", ",", "i", ",", "\"{:,}\"", ".", "format", "(", "cm", "[", "i", ",", "j", "]", ")", ",", "\n", "horizontalalignment", "=", "\"center\"", ",", "\n", "color", "=", "\"white\"", "if", "cm", "[", "i", ",", "j", "]", ">", "thresh", "else", "\"black\"", ")", "\n", "\n", "", "", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "ylabel", "(", "'True label'", ")", "\n", "plt", ".", "xlabel", "(", "'Predicted label\\naccuracy={:0.4f}; misclass={:0.4f}'", ".", "format", "(", "accuracy", ",", "misclass", ")", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.strideradu_ProDOMA.None.utils.metric": [[375, 381], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.softmax", "F.softmax.topk", "top.eq", "truth.view().expand_as", "truth.view"], "function", ["None"], ["", "def", "metric", "(", "logit", ",", "truth", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "prob", "=", "F", ".", "softmax", "(", "logit", ",", "1", ")", "\n", "value", ",", "top", "=", "prob", ".", "topk", "(", "3", ",", "dim", "=", "1", ",", "largest", "=", "True", ",", "sorted", "=", "True", ")", "\n", "correct", "=", "top", ".", "eq", "(", "truth", ".", "view", "(", "-", "1", ",", "1", ")", ".", "expand_as", "(", "top", ")", ")", "\n", "", "return", "correct", "\n", "\n"]], "home.repos.pwc.inspect_result.strideradu_ProDOMA.None.utils.get_lrs": [[383, 389], ["optimizer.state_dict", "lrs.append"], "function", ["None"], ["", "def", "get_lrs", "(", "optimizer", ")", ":", "\n", "    ", "lrs", "=", "[", "]", "\n", "for", "pgs", "in", "optimizer", ".", "state_dict", "(", ")", "[", "'param_groups'", "]", ":", "\n", "        ", "lrs", ".", "append", "(", "pgs", "[", "'lr'", "]", ")", "\n", "", "lrs", "=", "[", "'{:.6f}'", ".", "format", "(", "x", ")", "for", "x", "in", "lrs", "]", "\n", "return", "lrs", "\n", "\n"]], "home.repos.pwc.inspect_result.strideradu_ProDOMA.models.PepCNN.PepCNNDeep.__init__": [[14, 33], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "len", "sum", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "enumerate"], "methods", ["home.repos.pwc.inspect_result.strideradu_ProDOMA.models.PepCNN.PepCNNDeepBN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "num_token", "=", "21", ")", ":", "\n", "        ", "super", "(", "PepCNNDeep", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_token", "=", "num_token", "\n", "self", ".", "seq_len", "=", "args", ".", "seq_len", "\n", "self", ".", "num_class", "=", "args", ".", "num_classes", "\n", "self", ".", "channel_in", "=", "3", "\n", "self", ".", "kernel_nums", "=", "[", "args", ".", "num_filters", "]", "*", "len", "(", "args", ".", "filter_sizes", ")", "\n", "self", ".", "kernel_sizes", "=", "args", ".", "filter_sizes", "\n", "self", ".", "dropout_rate", "=", "args", ".", "dropout", "\n", "\n", "self", ".", "convs1", "=", "nn", ".", "Conv2d", "(", "self", ".", "channel_in", ",", "256", ",", "(", "args", ".", "conv1_filter", ",", "self", ".", "num_token", ")", ")", "\n", "self", ".", "convs2", "=", "nn", ".", "ModuleList", "(", "\n", "[", "nn", ".", "Conv2d", "(", "256", ",", "self", ".", "kernel_nums", "[", "i", "]", ",", "(", "kernel_size", ",", "1", ")", ")", "for", "i", ",", "kernel_size", "in", "\n", "enumerate", "(", "self", ".", "kernel_sizes", ")", "]", ")", "\n", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "self", ".", "dropout_rate", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "sum", "(", "self", ".", "kernel_nums", ")", ",", "args", ".", "num_hidden", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "args", ".", "num_hidden", ",", "self", ".", "num_class", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.strideradu_ProDOMA.models.PepCNN.PepCNNDeep.forward": [[34, 52], ["torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "PepCNN.PepCNNDeep.dropout", "PepCNN.PepCNNDeep.fc1", "PepCNN.PepCNNDeep.fc2", "PepCNN.PepCNNDeep.convs1", "torch.relu().squeeze", "torch.relu().squeeze", "torch.relu().squeeze", "torch.max_pool1d().squeeze", "torch.max_pool1d().squeeze", "torch.max_pool1d().squeeze", "enumerate", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool1d", "torch.max_pool1d", "torch.max_pool1d", "conv", "i.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "return_conv", "=", "False", ")", ":", "\n", "        ", "x", "=", "F", ".", "relu", "(", "self", ".", "convs1", "(", "x", ")", ")", "\n", "\n", "x", "=", "[", "F", ".", "relu", "(", "conv", "(", "x", ")", ")", ".", "squeeze", "(", "3", ")", "for", "i", ",", "conv", "in", "enumerate", "(", "self", ".", "convs2", ")", "]", "\n", "\n", "conv", "=", "x", "\n", "\n", "x", "=", "[", "F", ".", "max_pool1d", "(", "i", ",", "i", ".", "size", "(", "2", ")", ")", ".", "squeeze", "(", "2", ")", "for", "i", "in", "x", "]", "# [(N, Co), ...]*len(Ks)", "\n", "\n", "x", "=", "torch", ".", "cat", "(", "x", ",", "1", ")", "\n", "\n", "x", "=", "self", ".", "dropout", "(", "x", ")", "# (N, len(Ks)*Co)", "\n", "x", "=", "self", ".", "fc1", "(", "x", ")", "# (N, C)", "\n", "# conv = x", "\n", "logit", "=", "self", ".", "fc2", "(", "x", ")", "\n", "if", "return_conv", ":", "\n", "            ", "return", "logit", ",", "conv", "\n", "", "return", "logit", "\n", "\n"]], "home.repos.pwc.inspect_result.strideradu_ProDOMA.models.PepCNN.PepCNNDeepTriple.__init__": [[56, 75], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "len", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "sum", "enumerate"], "methods", ["home.repos.pwc.inspect_result.strideradu_ProDOMA.models.PepCNN.PepCNNDeepBN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "num_token", "=", "21", ")", ":", "\n", "        ", "super", "(", "PepCNNDeepTriple", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_token", "=", "num_token", "\n", "self", ".", "seq_len", "=", "args", ".", "seq_len", "\n", "self", ".", "num_class", "=", "args", ".", "num_classes", "\n", "self", ".", "channel_in", "=", "1", "\n", "self", ".", "kernel_nums", "=", "[", "args", ".", "num_filters", "]", "*", "len", "(", "args", ".", "filter_sizes", ")", "\n", "self", ".", "kernel_sizes", "=", "args", ".", "filter_sizes", "\n", "self", ".", "dropout_rate", "=", "args", ".", "dropout", "\n", "\n", "self", ".", "convs1", "=", "nn", ".", "Conv2d", "(", "self", ".", "channel_in", ",", "self", ".", "kernel_nums", "[", "0", "]", ",", "(", "args", ".", "conv1_filter", ",", "self", ".", "num_token", ")", ")", "\n", "self", ".", "convs2", "=", "nn", ".", "ModuleList", "(", "\n", "[", "nn", ".", "Conv2d", "(", "self", ".", "kernel_nums", "[", "0", "]", ",", "self", ".", "kernel_nums", "[", "i", "]", ",", "(", "kernel_size", ",", "1", ")", ")", "for", "i", ",", "kernel_size", "in", "\n", "enumerate", "(", "self", ".", "kernel_sizes", ")", "]", ")", "\n", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "self", ".", "dropout_rate", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "3", "*", "sum", "(", "self", ".", "kernel_nums", ")", ",", "args", ".", "num_hidden", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "args", ".", "num_hidden", ",", "self", ".", "num_class", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.strideradu_ProDOMA.models.PepCNN.PepCNNDeepTriple.branch_feature": [[76, 83], ["torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "PepCNN.PepCNNDeepTriple.convs1", "torch.relu().squeeze", "torch.relu().squeeze", "torch.relu().squeeze", "torch.max_pool1d().squeeze", "torch.max_pool1d().squeeze", "torch.max_pool1d().squeeze", "enumerate", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool1d", "torch.max_pool1d", "torch.max_pool1d", "conv", "i.size"], "methods", ["None"], ["", "def", "branch_feature", "(", "self", ",", "input", ")", ":", "\n", "        ", "input", "=", "input", ".", "unsqueeze", "(", "1", ")", "\n", "input", "=", "F", ".", "relu", "(", "self", ".", "convs1", "(", "input", ")", ")", "\n", "input", "=", "[", "F", ".", "relu", "(", "conv", "(", "input", ")", ")", ".", "squeeze", "(", "3", ")", "for", "i", ",", "conv", "in", "enumerate", "(", "self", ".", "convs2", ")", "]", "\n", "input", "=", "[", "F", ".", "max_pool1d", "(", "i", ",", "i", ".", "size", "(", "2", ")", ")", ".", "squeeze", "(", "2", ")", "for", "i", "in", "input", "]", "# [(N, Co), ...]*len(Ks)", "\n", "input", "=", "torch", ".", "cat", "(", "input", ",", "1", ")", "\n", "return", "input", "\n", "\n"]], "home.repos.pwc.inspect_result.strideradu_ProDOMA.models.PepCNN.PepCNNDeepTriple.forward": [[84, 99], ["PepCNN.PepCNNDeepTriple.branch_feature", "PepCNN.PepCNNDeepTriple.branch_feature", "PepCNN.PepCNNDeepTriple.branch_feature", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "PepCNN.PepCNNDeepTriple.dropout", "PepCNN.PepCNNDeepTriple.fc1", "PepCNN.PepCNNDeepTriple.fc2"], "methods", ["home.repos.pwc.inspect_result.strideradu_ProDOMA.models.PepCNN.PepCNNDeepTriple.branch_feature", "home.repos.pwc.inspect_result.strideradu_ProDOMA.models.PepCNN.PepCNNDeepTriple.branch_feature", "home.repos.pwc.inspect_result.strideradu_ProDOMA.models.PepCNN.PepCNNDeepTriple.branch_feature"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x1", "=", "x", "[", ":", ",", "0", ",", ":", ",", ":", "]", "\n", "x2", "=", "x", "[", ":", ",", "0", ",", ":", ",", ":", "]", "\n", "x3", "=", "x", "[", ":", ",", "0", ",", ":", ",", ":", "]", "\n", "\n", "x1", "=", "self", ".", "branch_feature", "(", "x1", ")", "\n", "x2", "=", "self", ".", "branch_feature", "(", "x2", ")", "\n", "x3", "=", "self", ".", "branch_feature", "(", "x3", ")", "\n", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x1", ",", "x2", ",", "x3", "]", ",", "1", ")", "\n", "\n", "x", "=", "self", ".", "dropout", "(", "x", ")", "# (N, len(Ks)*Co)", "\n", "x", "=", "self", ".", "fc1", "(", "x", ")", "# (N, C)", "\n", "logit", "=", "self", ".", "fc2", "(", "x", ")", "\n", "return", "logit", "\n", "\n"]], "home.repos.pwc.inspect_result.strideradu_ProDOMA.models.PepCNN.PepCNNDeep2Layer.__init__": [[102, 122], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "len", "sum", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "enumerate"], "methods", ["home.repos.pwc.inspect_result.strideradu_ProDOMA.models.PepCNN.PepCNNDeepBN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "num_token", "=", "21", ")", ":", "\n", "        ", "super", "(", "PepCNNDeep2Layer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_token", "=", "num_token", "\n", "self", ".", "seq_len", "=", "args", ".", "seq_len", "\n", "self", ".", "num_class", "=", "args", ".", "num_classes", "\n", "self", ".", "channel_in", "=", "3", "\n", "self", ".", "kernel_nums", "=", "[", "args", ".", "num_filters", "]", "*", "len", "(", "args", ".", "filter_sizes", ")", "\n", "self", ".", "kernel_sizes", "=", "args", ".", "filter_sizes", "\n", "self", ".", "dropout_rate", "=", "args", ".", "dropout", "\n", "\n", "self", ".", "convs1", "=", "nn", ".", "Conv2d", "(", "self", ".", "channel_in", ",", "64", ",", "(", "args", ".", "conv1_filter", ",", "self", ".", "num_token", ")", ")", "\n", "self", ".", "convs2", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "(", "args", ".", "conv1_filter", ",", "1", ")", ")", "\n", "self", ".", "convs3", "=", "nn", ".", "ModuleList", "(", "\n", "[", "nn", ".", "Conv2d", "(", "64", ",", "self", ".", "kernel_nums", "[", "i", "]", ",", "(", "kernel_size", ",", "1", ")", ")", "for", "i", ",", "kernel_size", "in", "\n", "enumerate", "(", "self", ".", "kernel_sizes", ")", "]", ")", "\n", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "self", ".", "dropout_rate", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "sum", "(", "self", ".", "kernel_nums", ")", ",", "args", ".", "num_hidden", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "args", ".", "num_hidden", ",", "self", ".", "num_class", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.strideradu_ProDOMA.models.PepCNN.PepCNNDeep2Layer.forward": [[123, 138], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "PepCNN.PepCNNDeep2Layer.dropout", "PepCNN.PepCNNDeep2Layer.fc1", "PepCNN.PepCNNDeep2Layer.fc2", "PepCNN.PepCNNDeep2Layer.convs1", "PepCNN.PepCNNDeep2Layer.convs2", "torch.relu().squeeze", "torch.relu().squeeze", "torch.relu().squeeze", "torch.max_pool1d().squeeze", "torch.max_pool1d().squeeze", "torch.max_pool1d().squeeze", "enumerate", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool1d", "torch.max_pool1d", "torch.max_pool1d", "conv", "i.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "F", ".", "relu", "(", "self", ".", "convs1", "(", "x", ")", ")", "\n", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "convs2", "(", "x", ")", ")", "\n", "\n", "x", "=", "[", "F", ".", "relu", "(", "conv", "(", "x", ")", ")", ".", "squeeze", "(", "3", ")", "for", "i", ",", "conv", "in", "enumerate", "(", "self", ".", "convs3", ")", "]", "\n", "\n", "x", "=", "[", "F", ".", "max_pool1d", "(", "i", ",", "i", ".", "size", "(", "2", ")", ")", ".", "squeeze", "(", "2", ")", "for", "i", "in", "x", "]", "# [(N, Co), ...]*len(Ks)", "\n", "\n", "x", "=", "torch", ".", "cat", "(", "x", ",", "1", ")", "\n", "\n", "x", "=", "self", ".", "dropout", "(", "x", ")", "# (N, len(Ks)*Co)", "\n", "x", "=", "self", ".", "fc1", "(", "x", ")", "# (N, C)", "\n", "logit", "=", "self", ".", "fc2", "(", "x", ")", "\n", "return", "logit", "\n", "\n"]], "home.repos.pwc.inspect_result.strideradu_ProDOMA.models.PepCNN.BasicConv2d.__init__": [[141, 145], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.strideradu_ProDOMA.models.PepCNN.PepCNNDeepBN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "BasicConv2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "bias", "=", "False", ",", "**", "kwargs", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "out_channels", ",", "eps", "=", "0.001", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.strideradu_ProDOMA.models.PepCNN.BasicConv2d.forward": [[146, 150], ["PepCNN.BasicConv2d.conv", "PepCNN.BasicConv2d.bn", "torch.relu", "torch.relu", "torch.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "return", "F", ".", "relu", "(", "x", ",", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.strideradu_ProDOMA.models.PepCNN.PepCNNDeep2LayerBN.__init__": [[153, 173], ["torch.Module.__init__", "PepCNN.BasicConv2d", "PepCNN.BasicConv2d", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "len", "sum", "PepCNN.BasicConv2d", "enumerate"], "methods", ["home.repos.pwc.inspect_result.strideradu_ProDOMA.models.PepCNN.PepCNNDeepBN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "num_token", "=", "21", ")", ":", "\n", "        ", "super", "(", "PepCNNDeep2LayerBN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_token", "=", "num_token", "\n", "self", ".", "seq_len", "=", "args", ".", "seq_len", "\n", "self", ".", "num_class", "=", "args", ".", "num_classes", "\n", "self", ".", "channel_in", "=", "3", "\n", "self", ".", "kernel_nums", "=", "[", "args", ".", "num_filters", "]", "*", "len", "(", "args", ".", "filter_sizes", ")", "\n", "self", ".", "kernel_sizes", "=", "args", ".", "filter_sizes", "\n", "self", ".", "dropout_rate", "=", "args", ".", "dropout", "\n", "\n", "self", ".", "convs1", "=", "BasicConv2d", "(", "self", ".", "channel_in", ",", "self", ".", "kernel_nums", "[", "0", "]", ",", "kernel_size", "=", "(", "args", ".", "conv1_filter", ",", "self", ".", "num_token", ")", ")", "\n", "self", ".", "convs2", "=", "BasicConv2d", "(", "self", ".", "kernel_nums", "[", "0", "]", ",", "self", ".", "kernel_nums", "[", "0", "]", ",", "kernel_size", "=", "(", "args", ".", "conv1_filter", ",", "1", ")", ")", "\n", "self", ".", "convs3", "=", "nn", ".", "ModuleList", "(", "\n", "[", "BasicConv2d", "(", "self", ".", "kernel_nums", "[", "0", "]", ",", "self", ".", "kernel_nums", "[", "i", "]", ",", "kernel_size", "=", "(", "kernel_size", ",", "1", ")", ")", "for", "i", ",", "kernel_size", "in", "\n", "enumerate", "(", "self", ".", "kernel_sizes", ")", "]", ")", "\n", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "self", ".", "dropout_rate", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "sum", "(", "self", ".", "kernel_nums", ")", ",", "args", ".", "num_hidden", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "args", ".", "num_hidden", ",", "self", ".", "num_class", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.strideradu_ProDOMA.models.PepCNN.PepCNNDeep2LayerBN.forward": [[174, 189], ["PepCNN.PepCNNDeep2LayerBN.convs1", "PepCNN.PepCNNDeep2LayerBN.convs2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "PepCNN.PepCNNDeep2LayerBN.dropout", "PepCNN.PepCNNDeep2LayerBN.fc1", "PepCNN.PepCNNDeep2LayerBN.fc2", "conv().squeeze", "torch.max_pool1d().squeeze", "torch.max_pool1d().squeeze", "torch.max_pool1d().squeeze", "enumerate", "conv", "torch.max_pool1d", "torch.max_pool1d", "torch.max_pool1d", "i.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "convs1", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "convs2", "(", "x", ")", "\n", "\n", "x", "=", "[", "conv", "(", "x", ")", ".", "squeeze", "(", "3", ")", "for", "i", ",", "conv", "in", "enumerate", "(", "self", ".", "convs3", ")", "]", "\n", "\n", "x", "=", "[", "F", ".", "max_pool1d", "(", "i", ",", "i", ".", "size", "(", "2", ")", ")", ".", "squeeze", "(", "2", ")", "for", "i", "in", "x", "]", "# [(N, Co), ...]*len(Ks)", "\n", "\n", "x", "=", "torch", ".", "cat", "(", "x", ",", "1", ")", "\n", "\n", "x", "=", "self", ".", "dropout", "(", "x", ")", "# (N, len(Ks)*Co)", "\n", "x", "=", "self", ".", "fc1", "(", "x", ")", "# (N, C)", "\n", "logit", "=", "self", ".", "fc2", "(", "x", ")", "\n", "return", "logit", "\n", "\n"]], "home.repos.pwc.inspect_result.strideradu_ProDOMA.models.PepCNN.PepCNNDeepBN.__init__": [[192, 211], ["torch.Module.__init__", "PepCNN.BasicConv2d", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "len", "sum", "PepCNN.BasicConv2d", "enumerate"], "methods", ["home.repos.pwc.inspect_result.strideradu_ProDOMA.models.PepCNN.PepCNNDeepBN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "num_token", "=", "21", ")", ":", "\n", "        ", "super", "(", "PepCNNDeepBN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_token", "=", "num_token", "\n", "self", ".", "seq_len", "=", "args", ".", "seq_len", "\n", "self", ".", "num_class", "=", "args", ".", "num_classes", "\n", "self", ".", "channel_in", "=", "3", "\n", "self", ".", "kernel_nums", "=", "[", "args", ".", "num_filters", "]", "*", "len", "(", "args", ".", "filter_sizes", ")", "\n", "self", ".", "kernel_sizes", "=", "args", ".", "filter_sizes", "\n", "self", ".", "dropout_rate", "=", "args", ".", "dropout", "\n", "\n", "self", ".", "convs1", "=", "BasicConv2d", "(", "self", ".", "channel_in", ",", "self", ".", "kernel_nums", "[", "0", "]", ",", "kernel_size", "=", "(", "args", ".", "conv1_filter", ",", "self", ".", "num_token", ")", ")", "\n", "self", ".", "convs2", "=", "nn", ".", "ModuleList", "(", "\n", "[", "BasicConv2d", "(", "self", ".", "kernel_nums", "[", "0", "]", ",", "self", ".", "kernel_nums", "[", "i", "]", ",", "kernel_size", "=", "(", "kernel_size", ",", "1", ")", ")", "for", "i", ",", "kernel_size", "in", "\n", "enumerate", "(", "self", ".", "kernel_sizes", ")", "]", ")", "\n", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "self", ".", "dropout_rate", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "sum", "(", "self", ".", "kernel_nums", ")", ",", "args", ".", "num_hidden", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "args", ".", "num_hidden", ",", "self", ".", "num_class", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.strideradu_ProDOMA.models.PepCNN.PepCNNDeepBN.forward": [[212, 225], ["PepCNN.PepCNNDeepBN.convs1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "PepCNN.PepCNNDeepBN.dropout", "PepCNN.PepCNNDeepBN.fc1", "PepCNN.PepCNNDeepBN.fc2", "conv().squeeze", "torch.max_pool1d().squeeze", "torch.max_pool1d().squeeze", "torch.max_pool1d().squeeze", "enumerate", "conv", "torch.max_pool1d", "torch.max_pool1d", "torch.max_pool1d", "i.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "convs1", "(", "x", ")", "\n", "\n", "x", "=", "[", "conv", "(", "x", ")", ".", "squeeze", "(", "3", ")", "for", "i", ",", "conv", "in", "enumerate", "(", "self", ".", "convs2", ")", "]", "\n", "\n", "x", "=", "[", "F", ".", "max_pool1d", "(", "i", ",", "i", ".", "size", "(", "2", ")", ")", ".", "squeeze", "(", "2", ")", "for", "i", "in", "x", "]", "# [(N, Co), ...]*len(Ks)", "\n", "\n", "x", "=", "torch", ".", "cat", "(", "x", ",", "1", ")", "\n", "\n", "x", "=", "self", ".", "dropout", "(", "x", ")", "# (N, len(Ks)*Co)", "\n", "x", "=", "self", ".", "fc1", "(", "x", ")", "# (N, C)", "\n", "logit", "=", "self", ".", "fc2", "(", "x", ")", "\n", "return", "logit", "\n", "", "", ""]], "home.repos.pwc.inspect_result.strideradu_ProDOMA.models.PepCNN.kmax_pooling": [[8, 11], ["x.gather", "[].sort", "x.topk"], "function", ["None"], ["def", "kmax_pooling", "(", "x", ",", "dim", ",", "k", ")", ":", "\n", "    ", "index", "=", "x", ".", "topk", "(", "k", ",", "dim", "=", "dim", ")", "[", "1", "]", ".", "sort", "(", "dim", "=", "dim", ")", "[", "0", "]", "\n", "return", "x", ".", "gather", "(", "dim", ",", "index", ")", "\n", "\n"]]}