{"home.repos.pwc.inspect_result.liu-yushan_calgnn.remove_edges.models.GCN.__init__": [[10, 15], ["torch.Module.__init__", "torch_geometric.nn.GCNConv", "torch_geometric.nn.GCNConv"], "methods", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.metacal.metacal.MetaCalCoverageAcc.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "nhid", ",", "dropout", ")", ":", "\n", "        ", "super", "(", "GCN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gc1", "=", "GCNConv", "(", "dataset", ".", "num_features", ",", "nhid", ")", "\n", "self", ".", "gc2", "=", "GCNConv", "(", "nhid", ",", "dataset", ".", "num_classes", ")", "\n", "self", ".", "dropout", "=", "dropout", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.remove_edges.models.GCN.reset_parameters": [[16, 19], ["models.GCN.gc1.reset_parameters", "models.GCN.gc2.reset_parameters"], "methods", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.models.APPNPNet.reset_parameters", "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.models.APPNPNet.reset_parameters"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "self", ".", "gc1", ".", "reset_parameters", "(", ")", "\n", "self", ".", "gc2", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.remove_edges.models.GCN.forward": [[20, 28], ["edge_index.to", "models.GCN.gc1", "torch.relu", "torch.relu", "torch.dropout", "torch.dropout", "models.GCN.gc2", "torch.log_softmax", "torch.log_softmax"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "data", ",", "edge_index", ")", ":", "\n", "        ", "x", "=", "data", ".", "x", "\n", "a", "=", "edge_index", ".", "to", "(", "x", ".", "device", ")", "\n", "x", "=", "self", ".", "gc1", "(", "x", ",", "a", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "self", ".", "gc2", "(", "x", ",", "a", ")", "\n", "return", "F", ".", "log_softmax", "(", "x", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.remove_edges.models.GAT.__init__": [[31, 44], ["torch.Module.__init__", "torch_geometric.nn.GATConv", "torch_geometric.nn.GATConv"], "methods", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.metacal.metacal.MetaCalCoverageAcc.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "nhid", ",", "first_heads", ",", "output_heads", ",", "dropout", ")", ":", "\n", "        ", "super", "(", "GAT", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gc1", "=", "GATConv", "(", "\n", "dataset", ".", "num_features", ",", "nhid", ",", "heads", "=", "first_heads", ",", "dropout", "=", "dropout", "\n", ")", "\n", "self", ".", "gc2", "=", "GATConv", "(", "\n", "nhid", "*", "first_heads", ",", "\n", "dataset", ".", "num_classes", ",", "\n", "heads", "=", "output_heads", ",", "\n", "concat", "=", "False", ",", "\n", "dropout", "=", "dropout", ",", "\n", ")", "\n", "self", ".", "dropout", "=", "dropout", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.remove_edges.models.GAT.reset_parameters": [[45, 48], ["models.GAT.gc1.reset_parameters", "models.GAT.gc2.reset_parameters"], "methods", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.models.APPNPNet.reset_parameters", "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.models.APPNPNet.reset_parameters"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "self", ".", "gc1", ".", "reset_parameters", "(", ")", "\n", "self", ".", "gc2", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.remove_edges.models.GAT.forward": [[49, 58], ["edge_index.to", "torch.dropout", "torch.dropout", "models.GAT.gc1", "torch.elu", "torch.elu", "torch.dropout", "torch.dropout", "models.GAT.gc2", "torch.log_softmax", "torch.log_softmax"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "data", ",", "edge_index", ")", ":", "\n", "        ", "x", "=", "data", ".", "x", "\n", "a", "=", "edge_index", ".", "to", "(", "x", ".", "device", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "self", ".", "gc1", "(", "x", ",", "a", ")", "\n", "x", "=", "F", ".", "elu", "(", "x", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "self", ".", "gc2", "(", "x", ",", "a", ")", "\n", "return", "F", ".", "log_softmax", "(", "x", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.remove_edges.models.GAT_GCNParameters.__init__": [[61, 68], ["torch.Module.__init__", "torch_geometric.nn.GATConv", "torch_geometric.nn.GATConv"], "methods", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.metacal.metacal.MetaCalCoverageAcc.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "nhid", "=", "8", ",", "first_heads", "=", "8", ",", "output_heads", "=", "1", ",", "dropout", "=", "0.", ")", ":", "\n", "        ", "super", "(", "GAT_GCNParameters", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gc1", "=", "GATConv", "(", "dataset", ".", "num_features", ",", "nhid", ",", "heads", "=", "first_heads", ")", "\n", "self", ".", "gc2", "=", "GATConv", "(", "\n", "nhid", "*", "first_heads", ",", "dataset", ".", "num_classes", ",", "heads", "=", "output_heads", ",", "concat", "=", "False", ",", "\n", ")", "\n", "self", ".", "dropout", "=", "dropout", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.remove_edges.models.GAT_GCNParameters.reset_parameters": [[69, 72], ["models.GAT_GCNParameters.gc1.reset_parameters", "models.GAT_GCNParameters.gc2.reset_parameters"], "methods", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.models.APPNPNet.reset_parameters", "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.models.APPNPNet.reset_parameters"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "self", ".", "gc1", ".", "reset_parameters", "(", ")", "\n", "self", ".", "gc2", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.remove_edges.models.GAT_GCNParameters.forward": [[73, 81], ["edge_index.to", "models.GAT_GCNParameters.gc1", "torch.relu", "torch.relu", "torch.dropout", "torch.dropout", "models.GAT_GCNParameters.gc2", "torch.log_softmax", "torch.log_softmax"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "data", ",", "edge_index", ")", ":", "\n", "        ", "x", "=", "data", ".", "x", "\n", "a", "=", "edge_index", ".", "to", "(", "x", ".", "device", ")", "\n", "x", "=", "self", ".", "gc1", "(", "x", ",", "a", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "self", ".", "gc2", "(", "x", ",", "a", ")", "\n", "return", "F", ".", "log_softmax", "(", "x", ",", "dim", "=", "1", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.remove_edges.metrics.split": [[23, 29], ["int", "len", "numpy.ceil", "len", "len", "range", "len", "len"], "function", ["None"], ["def", "split", "(", "sequence", ":", "List", "[", "T", "]", ",", "parts", ":", "int", ")", "->", "List", "[", "List", "[", "T", "]", "]", ":", "\n", "    ", "assert", "parts", "<=", "len", "(", "sequence", ")", "\n", "part_size", "=", "int", "(", "np", ".", "ceil", "(", "len", "(", "sequence", ")", "*", "1.0", "/", "parts", ")", ")", "\n", "assert", "part_size", "*", "parts", ">=", "len", "(", "sequence", ")", "\n", "assert", "(", "part_size", "-", "1", ")", "*", "parts", "<", "len", "(", "sequence", ")", "\n", "return", "[", "sequence", "[", "i", ":", "i", "+", "part_size", "]", "for", "i", "in", "range", "(", "0", ",", "len", "(", "sequence", ")", ",", "part_size", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.remove_edges.metrics.get_equal_bins": [[31, 43], ["sorted", "metrics.split", "range", "sorted.append", "sorted", "sorted.append", "list", "len", "set"], "function", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.split"], ["", "def", "get_equal_bins", "(", "probs", ":", "List", "[", "float", "]", ",", "num_bins", ":", "int", "=", "10", ")", "->", "Bins", ":", "\n", "    ", "\"\"\"Get bins that contain approximately an equal number of data points.\"\"\"", "\n", "sorted_probs", "=", "sorted", "(", "probs", ")", "\n", "binned_data", "=", "split", "(", "sorted_probs", ",", "num_bins", ")", "\n", "bins", ":", "Bins", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "binned_data", ")", "-", "1", ")", ":", "\n", "        ", "last_prob", "=", "binned_data", "[", "i", "]", "[", "-", "1", "]", "\n", "next_first_prob", "=", "binned_data", "[", "i", "+", "1", "]", "[", "0", "]", "\n", "bins", ".", "append", "(", "(", "last_prob", "+", "next_first_prob", ")", "/", "2.0", ")", "\n", "", "bins", ".", "append", "(", "1.0", ")", "\n", "bins", "=", "sorted", "(", "list", "(", "set", "(", "bins", ")", ")", ")", "\n", "return", "bins", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.remove_edges.metrics.get_equal_prob_bins": [[45, 47], ["range"], "function", ["None"], ["", "def", "get_equal_prob_bins", "(", "probs", ":", "List", "[", "float", "]", ",", "num_bins", ":", "int", "=", "10", ")", "->", "Bins", ":", "\n", "    ", "return", "[", "i", "*", "1.0", "/", "num_bins", "for", "i", "in", "range", "(", "1", ",", "num_bins", "+", "1", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.remove_edges.metrics.get_discrete_bins": [[49, 57], ["sorted", "range", "bins.append", "numpy.unique", "bins.append", "len"], "function", ["None"], ["", "def", "get_discrete_bins", "(", "data", ":", "List", "[", "float", "]", ")", "->", "Bins", ":", "\n", "    ", "sorted_values", "=", "sorted", "(", "np", ".", "unique", "(", "data", ")", ")", "\n", "bins", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "sorted_values", ")", "-", "1", ")", ":", "\n", "        ", "mid", "=", "(", "sorted_values", "[", "i", "]", "+", "sorted_values", "[", "i", "+", "1", "]", ")", "/", "2.0", "\n", "bins", ".", "append", "(", "mid", ")", "\n", "", "bins", ".", "append", "(", "1.0", ")", "\n", "return", "bins", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.remove_edges.metrics.get_top_calibration_error_uncertainties": [[62, 65], ["metrics.get_calibration_error_uncertainties"], "function", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.get_calibration_error_uncertainties"], ["", "def", "get_top_calibration_error_uncertainties", "(", "probs", ",", "labels", ",", "p", "=", "2", ",", "alpha", "=", "0.1", ")", ":", "\n", "    ", "return", "get_calibration_error_uncertainties", "(", "\n", "probs", ",", "labels", ",", "p", ",", "alpha", ",", "mode", "=", "\"top-label\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.remove_edges.metrics.get_calibration_error_uncertainties": [[68, 99], ["list", "metrics.bootstrap_uncertainty", "zip", "zip", "metrics.get_calibration_error"], "function", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.bootstrap_uncertainty", "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.get_calibration_error"], ["", "def", "get_calibration_error_uncertainties", "(", "probs", ",", "labels", ",", "p", "=", "2", ",", "alpha", "=", "0.1", ",", "mode", "=", "\"marginal\"", ")", ":", "\n", "    ", "\"\"\"Get confidence intervals for the calibration error.\n    Args:\n        probs: A numpy array of shape (n,) or (n, k). If the shape is (n,) then\n            we assume binary classification and probs[i] is the model's confidence\n            the i-th example is 1. Otherwise, probs[i][j] is the model's confidence\n            the i-th example is j, with 0 <= probs[i][j] <= 1.\n        labels: A numpy array of shape (n,). labels[i] denotes the label of the i-th\n            example. In the binary classification setting, labels[i] must be 0 or 1,\n            in the k class setting labels[i] is an integer with 0 <= labels[i] <= k-1.\n        p: We measure the lp calibration error, where p >= 1 is an integer.\n        mode: 'marginal' or 'top-label'. 'marginal' calibration means we compute the\n            calibraton error for each class and then average them. Top-label means\n            we compute the calibration error of the prediction that the model is most\n            confident about.\n    Returns:\n        [lower, mid, upper]: 1-alpha confidence intervals produced by bootstrap resampling.\n        [lower, upper] represents the confidence interval. mid represents the median of\n        the bootstrap estimates. When p is not 2 (e.g. for the ECE where p = 1), this\n        can be used as a debiased estimate as well.\n    \"\"\"", "\n", "data", "=", "list", "(", "zip", "(", "probs", ",", "labels", ")", ")", "\n", "\n", "def", "ce_functional", "(", "data", ")", ":", "\n", "        ", "probs", ",", "labels", "=", "zip", "(", "*", "data", ")", "\n", "return", "get_calibration_error", "(", "probs", ",", "labels", ",", "p", ",", "debias", "=", "False", ",", "mode", "=", "mode", ")", "\n", "\n", "", "[", "lower", ",", "mid", ",", "upper", "]", "=", "bootstrap_uncertainty", "(", "\n", "data", ",", "ce_functional", ",", "num_samples", "=", "100", ",", "alpha", "=", "alpha", "\n", ")", "\n", "return", "[", "lower", ",", "mid", ",", "upper", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.remove_edges.metrics.get_top_calibration_error": [[101, 103], ["metrics.get_calibration_error"], "function", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.get_calibration_error"], ["", "def", "get_top_calibration_error", "(", "probs", ",", "labels", ",", "p", "=", "2", ",", "debias", "=", "True", ")", ":", "\n", "    ", "return", "get_calibration_error", "(", "probs", ",", "labels", ",", "p", ",", "debias", ",", "mode", "=", "\"top-label\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.remove_edges.metrics.get_calibration_error": [[105, 132], ["metrics.is_discrete", "metrics.get_binning_ce", "metrics.lower_bound_scaling_ce"], "function", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.is_discrete", "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.get_binning_ce", "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.lower_bound_scaling_ce"], ["", "def", "get_calibration_error", "(", "probs", ",", "labels", ",", "p", "=", "2", ",", "debias", "=", "True", ",", "mode", "=", "\"marginal\"", ")", ":", "\n", "    ", "\"\"\"Get the calibration error.\n    Args:\n        probs: A numpy array of shape (n,) or (n, k). If the shape is (n,) then\n            we assume binary classification and probs[i] is the model's confidence\n            the i-th example is 1. Otherwise, probs[i][j] is the model's confidence\n            the i-th example is j, with 0 <= probs[i][j] <= 1.\n        labels: A numpy array of shape (n,). labels[i] denotes the label of the i-th\n            example. In the binary classification setting, labels[i] must be 0 or 1,\n            in the k class setting labels[i] is an integer with 0 <= labels[i] <= k-1.\n        p: We measure the lp calibration error, where p >= 1 is an integer.\n        debias: Should we try to debias the estimates? For p = 2, the debiasing\n            has provably better sample complexity.\n        mode: 'marginal' or 'top-label'. 'marginal' calibration means we compute the\n            calibraton error for each class and then average them. Top-label means\n            we compute the calibration error of the prediction that the model is most\n            confident about.\n    Returns:\n        Estimated calibration error, a floating point value.\n        The method first uses heuristics to check if the values came from a scaling\n        method or binning method, and then calls the corresponding function. For\n        more explicit control, use lower_bound_scaling_ce or get_binning_ce.\n    \"\"\"", "\n", "if", "is_discrete", "(", "probs", ")", ":", "\n", "        ", "return", "get_binning_ce", "(", "probs", ",", "labels", ",", "p", ",", "debias", ",", "mode", "=", "mode", ")", "\n", "", "else", ":", "\n", "        ", "return", "lower_bound_scaling_ce", "(", "probs", ",", "labels", ",", "p", ",", "debias", ",", "mode", "=", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.remove_edges.metrics.lower_bound_scaling_top_ce": [[134, 139], ["metrics.lower_bound_scaling_ce"], "function", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.lower_bound_scaling_ce"], ["", "", "def", "lower_bound_scaling_top_ce", "(", "\n", "probs", ",", "labels", ",", "p", "=", "2", ",", "debias", "=", "True", ",", "num_bins", "=", "15", ",", "binning_scheme", "=", "get_equal_bins", "\n", ")", ":", "\n", "    ", "return", "lower_bound_scaling_ce", "(", "\n", "probs", ",", "labels", ",", "p", ",", "debias", ",", "num_bins", ",", "binning_scheme", ",", "mode", "=", "\"top-label\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.remove_edges.metrics.lower_bound_scaling_ce": [[142, 176], ["metrics._get_ce"], "function", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics._get_ce"], ["", "def", "lower_bound_scaling_ce", "(", "\n", "probs", ",", "\n", "labels", ",", "\n", "p", "=", "2", ",", "\n", "debias", "=", "True", ",", "\n", "num_bins", "=", "15", ",", "\n", "binning_scheme", "=", "get_equal_bins", ",", "\n", "mode", "=", "\"marginal\"", ",", "\n", ")", ":", "\n", "    ", "\"\"\"Lower bound the calibration error of a model with continuous outputs.\n    Args:\n        probs: A numpy array of shape (n,) or (n, k). If the shape is (n,) then\n            we assume binary classification and probs[i] is the model's confidence\n            the i-th example is 1. Otherwise, probs[i][j] is the model's confidence\n            the i-th example is j, with 0 <= probs[i][j] <= 1.\n        labels: A numpy array of shape (n,). labels[i] denotes the label of the i-th\n            example. In the binary classification setting, labels[i] must be 0 or 1,\n            in the k class setting labels[i] is an integer with 0 <= labels[i] <= k-1.\n        p: We measure the lp calibration error, where p >= 1 is an integer.\n        debias: Should we try to debias the estimates? For p = 2, the debiasing\n            has provably better sample complexity.\n        num_bins: Integer number of bins used to estimate the calibration error.\n        binning_scheme: A function that takes in a list of probabilities and number of bins,\n            and outputs a list of bins. See get_equal_bins, get_equal_prob_bins for examples.\n        mode: 'marginal' or 'top-label'. 'marginal' calibration means we compute the\n            calibraton error for each class and then average them. Top-label means\n            we compute the calibration error of the prediction that the model is most\n            confident about.\n    Returns:\n        Estimated lower bound for calibration error, a floating point value.\n        For scaling methods we cannot estimate the calibration error, but only a\n        lower bound.\n    \"\"\"", "\n", "return", "_get_ce", "(", "probs", ",", "labels", ",", "p", ",", "debias", ",", "num_bins", ",", "binning_scheme", ",", "mode", "=", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.remove_edges.metrics.get_binning_top_ce": [[178, 180], ["metrics.get_binning_ce"], "function", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.get_binning_ce"], ["", "def", "get_binning_top_ce", "(", "probs", ",", "labels", ",", "p", "=", "2", ",", "debias", "=", "True", ",", "mode", "=", "\"marginal\"", ")", ":", "\n", "    ", "return", "get_binning_ce", "(", "probs", ",", "labels", ",", "p", ",", "debias", ",", "mode", "=", "\"top-label\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.remove_edges.metrics.get_binning_ce": [[182, 204], ["metrics._get_ce"], "function", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics._get_ce"], ["", "def", "get_binning_ce", "(", "probs", ",", "labels", ",", "p", "=", "2", ",", "debias", "=", "True", ",", "mode", "=", "\"marginal\"", ")", ":", "\n", "    ", "\"\"\"Estimate the calibration error of a binned model.\n    Args:\n        probs: A numpy array of shape (n,) or (n, k). If the shape is (n,) then\n            we assume binary classification and probs[i] is the model's confidence\n            the i-th example is 1. Otherwise, probs[i][j] is the model's confidence\n            the i-th example is j, with 0 <= probs[i][j] <= 1.\n        labels: A numpy array of shape (n,). labels[i] denotes the label of the i-th\n            example. In the binary classification setting, labels[i] must be 0 or 1,\n            in the k class setting labels[i] is an integer with 0 <= labels[i] <= k-1.\n        p: We measure the lp calibration error, where p >= 1 is an integer.\n        debias: Should we try to debias the estimates? For p = 2, the debiasing\n            has provably better sample complexity.\n        mode: 'marginal' or 'top-label'. 'marginal' calibration means we compute the\n            calibraton error for each class and then average them. Top-label means\n            we compute the calibration error of the prediction that the model is most\n            confident about.\n    Returns:\n        Estimated calibration error, a floating point value.\n    \"\"\"", "\n", "return", "_get_ce", "(", "\n", "probs", ",", "labels", ",", "p", ",", "debias", ",", "None", ",", "binning_scheme", "=", "get_discrete_bins", ",", "mode", "=", "mode", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.remove_edges.metrics.get_ece": [[207, 216], ["metrics.lower_bound_scaling_ce"], "function", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.lower_bound_scaling_ce"], ["", "def", "get_ece", "(", "probs", ",", "labels", ",", "debias", "=", "False", ",", "num_bins", "=", "15", ",", "mode", "=", "\"top-label\"", ")", ":", "\n", "    ", "return", "lower_bound_scaling_ce", "(", "\n", "probs", ",", "\n", "labels", ",", "\n", "p", "=", "1", ",", "\n", "debias", "=", "debias", ",", "\n", "num_bins", "=", "num_bins", ",", "\n", "binning_scheme", "=", "get_equal_prob_bins", ",", "\n", "mode", "=", "mode", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.remove_edges.metrics._get_ce": [[219, 270], ["numpy.array", "numpy.array", "list", "ValueError", "numpy.issubdtype", "ValueError", "len", "ValueError", "ValueError", "len", "metrics._get_ce.ce_1d"], "function", ["None"], ["", "def", "_get_ce", "(", "probs", ",", "labels", ",", "p", ",", "debias", ",", "num_bins", ",", "binning_scheme", ",", "mode", "=", "\"marginal\"", ")", ":", "\n", "    ", "def", "ce_1d", "(", "probs", ",", "labels", ")", ":", "\n", "        ", "assert", "probs", ".", "shape", "==", "labels", ".", "shape", "\n", "assert", "len", "(", "probs", ".", "shape", ")", "==", "1", "\n", "data", "=", "list", "(", "zip", "(", "probs", ",", "labels", ")", ")", "\n", "if", "binning_scheme", "==", "get_discrete_bins", ":", "\n", "            ", "assert", "num_bins", "is", "None", "\n", "bins", "=", "binning_scheme", "(", "probs", ")", "\n", "", "else", ":", "\n", "            ", "bins", "=", "binning_scheme", "(", "probs", ",", "num_bins", "=", "num_bins", ")", "\n", "", "if", "p", "==", "2", "and", "debias", ":", "\n", "            ", "return", "unbiased_l2_ce", "(", "bin", "(", "data", ",", "bins", ")", ")", "\n", "", "elif", "debias", ":", "\n", "            ", "return", "normal_debiased_ce", "(", "bin", "(", "data", ",", "bins", ")", ",", "power", "=", "p", ")", "\n", "", "else", ":", "\n", "            ", "return", "plugin_ce", "(", "bin", "(", "data", ",", "bins", ")", ",", "power", "=", "p", ")", "\n", "\n", "", "", "if", "mode", "!=", "\"marginal\"", "and", "mode", "!=", "\"top-label\"", ":", "\n", "        ", "raise", "ValueError", "(", "\"mode must be 'marginal' or 'top-label'.\"", ")", "\n", "", "probs", "=", "np", ".", "array", "(", "probs", ")", "\n", "labels", "=", "np", ".", "array", "(", "labels", ")", "\n", "if", "not", "(", "np", ".", "issubdtype", "(", "labels", ".", "dtype", ",", "np", ".", "integer", ")", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\"labels should an integer numpy array.\"", ")", "\n", "", "if", "len", "(", "labels", ".", "shape", ")", "!=", "1", ":", "\n", "        ", "raise", "ValueError", "(", "\"labels should be a 1D numpy array.\"", ")", "\n", "", "if", "probs", ".", "shape", "[", "0", "]", "!=", "labels", ".", "shape", "[", "0", "]", ":", "\n", "        ", "raise", "ValueError", "(", "\"labels and probs should have the same number of entries.\"", ")", "\n", "", "if", "len", "(", "probs", ".", "shape", ")", "==", "1", ":", "\n", "# If 1D (2-class setting), compute the regular calibration error.", "\n", "        ", "if", "np", ".", "min", "(", "labels", ")", "!=", "0", "or", "np", ".", "max", "(", "labels", ")", "!=", "1", ":", "\n", "            ", "raise", "ValueError", "(", "\"If probs is 1D, each label should be 0 or 1.\"", ")", "\n", "", "return", "ce_1d", "(", "probs", ",", "labels", ")", "\n", "", "elif", "len", "(", "probs", ".", "shape", ")", "==", "2", ":", "\n", "        ", "if", "np", ".", "min", "(", "labels", ")", "<", "0", "or", "np", ".", "max", "(", "labels", ")", ">", "probs", ".", "shape", "[", "1", "]", "-", "1", ":", "\n", "            ", "raise", "ValueError", "(", "\"labels should be between 0 and num_classes - 1.\"", ")", "\n", "", "if", "mode", "==", "\"marginal\"", ":", "\n", "            ", "labels_one_hot", "=", "get_labels_one_hot", "(", "labels", ",", "k", "=", "probs", ".", "shape", "[", "1", "]", ")", "\n", "assert", "probs", ".", "shape", "==", "labels_one_hot", ".", "shape", "\n", "marginal_ces", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "probs", ".", "shape", "[", "1", "]", ")", ":", "\n", "                ", "cur_probs", "=", "probs", "[", ":", ",", "k", "]", "\n", "cur_labels", "=", "labels_one_hot", "[", ":", ",", "k", "]", "\n", "marginal_ces", ".", "append", "(", "ce_1d", "(", "cur_probs", ",", "cur_labels", ")", "**", "p", ")", "\n", "", "return", "np", ".", "mean", "(", "marginal_ces", ")", "**", "(", "1.0", "/", "p", ")", "\n", "", "elif", "mode", "==", "\"top-label\"", ":", "\n", "            ", "preds", "=", "get_top_predictions", "(", "probs", ")", "\n", "correct", "=", "(", "preds", "==", "labels", ")", ".", "astype", "(", "probs", ".", "dtype", ")", "\n", "confidences", "=", "get_top_probs", "(", "probs", ")", "\n", "return", "ce_1d", "(", "confidences", ",", "correct", ")", "\n", "", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"probs should be a 1D or 2D numpy array.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.remove_edges.metrics.is_discrete": [[272, 283], ["numpy.array", "len", "metrics.enough_duplicates", "len", "range", "ValueError", "metrics.enough_duplicates"], "function", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.enough_duplicates", "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.enough_duplicates"], ["", "", "def", "is_discrete", "(", "probs", ")", ":", "\n", "    ", "probs", "=", "np", ".", "array", "(", "probs", ")", "\n", "if", "len", "(", "probs", ".", "shape", ")", "==", "1", ":", "\n", "        ", "return", "enough_duplicates", "(", "probs", ")", "\n", "", "elif", "len", "(", "probs", ".", "shape", ")", "==", "2", ":", "\n", "        ", "for", "k", "in", "range", "(", "probs", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "if", "not", "enough_duplicates", "(", "probs", "[", ":", ",", "k", "]", ")", ":", "\n", "                ", "return", "False", "\n", "", "", "return", "True", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"probs must be a 1D or 2D numpy array.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.remove_edges.metrics.enough_duplicates": [[285, 291], ["metrics.get_discrete_bins", "len"], "function", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.get_discrete_bins"], ["", "", "def", "enough_duplicates", "(", "array", ")", ":", "\n", "# TODO: instead check that we have at least 2 values in each bin.", "\n", "    ", "num_bins", "=", "get_discrete_bins", "(", "array", ")", "\n", "if", "len", "(", "num_bins", ")", "<", "array", ".", "shape", "[", "0", "]", "/", "4.0", ":", "\n", "        ", "return", "True", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.remove_edges.metrics.get_bin": [[296, 301], ["bisect.bisect_left"], "function", ["None"], ["", "def", "get_bin", "(", "pred_prob", ":", "float", ",", "bins", ":", "List", "[", "float", "]", ")", "->", "int", ":", "\n", "    ", "\"\"\"Get the index of the bin that pred_prob belongs in.\"\"\"", "\n", "assert", "0.0", "<=", "pred_prob", "<=", "1.0", "\n", "assert", "bins", "[", "-", "1", "]", "==", "1.0", "\n", "return", "bisect", ".", "bisect_left", "(", "bins", ",", "pred_prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.remove_edges.metrics.bin": [[303, 305], ["metrics.fast_bin"], "function", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.fast_bin"], ["", "def", "bin", "(", "data", ":", "Data", ",", "bins", ":", "Bins", ")", ":", "\n", "    ", "return", "fast_bin", "(", "data", ",", "bins", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.remove_edges.metrics.fast_bin": [[307, 315], ["numpy.array", "numpy.searchsorted", "numpy.argsort", "numpy.searchsorted", "numpy.split", "list", "range", "len"], "function", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.split"], ["", "def", "fast_bin", "(", "data", ",", "bins", ")", ":", "\n", "    ", "prob_label", "=", "np", ".", "array", "(", "data", ")", "\n", "bin_indices", "=", "np", ".", "searchsorted", "(", "bins", ",", "prob_label", "[", ":", ",", "0", "]", ")", "\n", "bin_sort_indices", "=", "np", ".", "argsort", "(", "bin_indices", ")", "\n", "sorted_bins", "=", "bin_indices", "[", "bin_sort_indices", "]", "\n", "splits", "=", "np", ".", "searchsorted", "(", "sorted_bins", ",", "list", "(", "range", "(", "1", ",", "len", "(", "bins", ")", ")", ")", ")", "\n", "binned_data", "=", "np", ".", "split", "(", "prob_label", "[", "bin_sort_indices", "]", ",", "splits", ")", "\n", "return", "binned_data", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.remove_edges.metrics.equal_bin": [[317, 320], ["sorted", "metrics.split"], "function", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.split"], ["", "def", "equal_bin", "(", "data", ":", "Data", ",", "num_bins", ":", "int", ")", "->", "BinnedData", ":", "\n", "    ", "sorted_probs", "=", "sorted", "(", "data", ")", "\n", "return", "split", "(", "sorted_probs", ",", "num_bins", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.remove_edges.metrics.difference_mean": [[325, 331], ["numpy.array", "numpy.mean", "numpy.mean"], "function", ["None"], ["", "def", "difference_mean", "(", "data", ":", "Data", ")", "->", "float", ":", "\n", "    ", "\"\"\"Returns average pred_prob - average label.\"\"\"", "\n", "data", "=", "np", ".", "array", "(", "data", ")", "\n", "ave_pred_prob", "=", "np", ".", "mean", "(", "data", "[", ":", ",", "0", "]", ")", "\n", "ave_label", "=", "np", ".", "mean", "(", "data", "[", ":", ",", "1", "]", ")", "\n", "return", "ave_pred_prob", "-", "ave_label", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.remove_edges.metrics.get_bin_probs": [[333, 339], ["list", "sum", "list", "list", "map", "map", "abs", "sum"], "function", ["None"], ["", "def", "get_bin_probs", "(", "binned_data", ":", "BinnedData", ")", "->", "List", "[", "float", "]", ":", "\n", "    ", "bin_sizes", "=", "list", "(", "map", "(", "len", ",", "binned_data", ")", ")", "\n", "num_data", "=", "sum", "(", "bin_sizes", ")", "\n", "bin_probs", "=", "list", "(", "map", "(", "lambda", "b", ":", "b", "*", "1.0", "/", "num_data", ",", "bin_sizes", ")", ")", "\n", "assert", "abs", "(", "sum", "(", "bin_probs", ")", "-", "1.0", ")", "<", "eps", "\n", "return", "list", "(", "bin_probs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.remove_edges.metrics.plugin_ce": [[341, 350], ["metrics.get_bin_probs", "list", "map", "numpy.dot", "len", "abs", "metrics.difference_mean"], "function", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.get_bin_probs", "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.difference_mean"], ["", "def", "plugin_ce", "(", "binned_data", ":", "BinnedData", ",", "power", "=", "2", ")", "->", "float", ":", "\n", "    ", "def", "bin_error", "(", "data", ":", "Data", ")", ":", "\n", "        ", "if", "len", "(", "data", ")", "==", "0", ":", "\n", "            ", "return", "0.0", "\n", "", "return", "abs", "(", "difference_mean", "(", "data", ")", ")", "**", "power", "\n", "\n", "", "bin_probs", "=", "get_bin_probs", "(", "binned_data", ")", "\n", "bin_errors", "=", "list", "(", "map", "(", "bin_error", ",", "binned_data", ")", ")", "\n", "return", "np", ".", "dot", "(", "bin_probs", ",", "bin_errors", ")", "**", "(", "1.0", "/", "power", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.remove_edges.metrics.unbiased_square_ce": [[352, 367], ["metrics.get_bin_probs", "list", "numpy.dot", "list", "numpy.mean", "map", "len", "abs", "map", "metrics.difference_mean", "len"], "function", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.get_bin_probs", "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.difference_mean"], ["", "def", "unbiased_square_ce", "(", "binned_data", ":", "BinnedData", ")", "->", "float", ":", "\n", "# Note, this is not the l2 CE. It does not take the square root.", "\n", "    ", "def", "bin_error", "(", "data", ":", "Data", ")", ":", "\n", "        ", "if", "len", "(", "data", ")", "<", "2", ":", "\n", "            ", "return", "0.0", "\n", "# raise ValueError('Too few values in bin, use fewer bins or get more data.')", "\n", "", "biased_estimate", "=", "abs", "(", "difference_mean", "(", "data", ")", ")", "**", "2", "\n", "label_values", "=", "list", "(", "map", "(", "lambda", "x", ":", "x", "[", "1", "]", ",", "data", ")", ")", "\n", "mean_label", "=", "np", ".", "mean", "(", "label_values", ")", "\n", "variance", "=", "mean_label", "*", "(", "1.0", "-", "mean_label", ")", "/", "(", "len", "(", "data", ")", "-", "1.0", ")", "\n", "return", "biased_estimate", "-", "variance", "\n", "\n", "", "bin_probs", "=", "get_bin_probs", "(", "binned_data", ")", "\n", "bin_errors", "=", "list", "(", "map", "(", "bin_error", ",", "binned_data", ")", ")", "\n", "return", "np", ".", "dot", "(", "bin_probs", ",", "bin_errors", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.remove_edges.metrics.unbiased_l2_ce": [[369, 371], ["max", "metrics.unbiased_square_ce"], "function", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.unbiased_square_ce"], ["", "def", "unbiased_l2_ce", "(", "binned_data", ":", "BinnedData", ")", "->", "float", ":", "\n", "    ", "return", "max", "(", "unbiased_square_ce", "(", "binned_data", ")", ",", "0.0", ")", "**", "0.5", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.remove_edges.metrics.normal_debiased_ce": [[373, 398], ["numpy.array", "numpy.array", "numpy.sqrt", "numpy.array", "metrics.plugin_ce", "metrics.get_bin_probs", "range", "numpy.mean", "list", "numpy.min", "ValueError", "list", "list", "numpy.random.normal", "numpy.power", "numpy.power", "resampled_ces.append", "map", "map", "map", "len", "len", "numpy.abs", "numpy.dot", "numpy.mean", "numpy.mean"], "function", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.plugin_ce", "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.get_bin_probs"], ["", "def", "normal_debiased_ce", "(", "binned_data", ":", "BinnedData", ",", "power", "=", "1", ",", "resamples", "=", "1000", ")", "->", "float", ":", "\n", "    ", "bin_sizes", "=", "np", ".", "array", "(", "list", "(", "map", "(", "len", ",", "binned_data", ")", ")", ")", "\n", "if", "np", ".", "min", "(", "bin_sizes", ")", "<=", "1", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "\"Every bin must have at least 2 points for debiased estimator. \"", "\n", "\"Try adding the argument debias=False to your function call.\"", "\n", ")", "\n", "", "label_means", "=", "np", ".", "array", "(", "list", "(", "map", "(", "lambda", "l", ":", "np", ".", "mean", "(", "[", "b", "for", "a", ",", "b", "in", "l", "]", ")", ",", "binned_data", ")", ")", ")", "\n", "label_stddev", "=", "np", ".", "sqrt", "(", "label_means", "*", "(", "1", "-", "label_means", ")", "/", "bin_sizes", ")", "\n", "model_vals", "=", "np", ".", "array", "(", "list", "(", "map", "(", "lambda", "l", ":", "np", ".", "mean", "(", "[", "a", "for", "a", ",", "b", "in", "l", "]", ")", ",", "binned_data", ")", ")", ")", "\n", "assert", "label_means", ".", "shape", "==", "(", "len", "(", "binned_data", ")", ",", ")", "\n", "assert", "model_vals", ".", "shape", "==", "(", "len", "(", "binned_data", ")", ",", ")", "\n", "ce", "=", "plugin_ce", "(", "binned_data", ",", "power", "=", "power", ")", "\n", "bin_probs", "=", "get_bin_probs", "(", "binned_data", ")", "\n", "resampled_ces", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "resamples", ")", ":", "\n", "        ", "label_samples", "=", "np", ".", "random", ".", "normal", "(", "loc", "=", "label_means", ",", "scale", "=", "label_stddev", ")", "\n", "# TODO: we can also correct the bias for the model_vals, although this is", "\n", "# smaller.", "\n", "diffs", "=", "np", ".", "power", "(", "np", ".", "abs", "(", "label_samples", "-", "model_vals", ")", ",", "power", ")", "\n", "cur_ce", "=", "np", ".", "power", "(", "np", ".", "dot", "(", "bin_probs", ",", "diffs", ")", ",", "1.0", "/", "power", ")", "\n", "resampled_ces", ".", "append", "(", "cur_ce", ")", "\n", "", "mean_resampled", "=", "np", ".", "mean", "(", "resampled_ces", ")", "\n", "bias_corrected_ce", "=", "2", "*", "ce", "-", "mean_resampled", "\n", "return", "bias_corrected_ce", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.remove_edges.metrics.eval_top_mse": [[403, 406], ["numpy.mean", "metrics.get_top_predictions", "numpy.square"], "function", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.get_top_predictions"], ["", "def", "eval_top_mse", "(", "calibrated_probs", ",", "probs", ",", "labels", ")", ":", "\n", "    ", "correct", "=", "get_top_predictions", "(", "probs", ")", "==", "labels", "\n", "return", "np", ".", "mean", "(", "np", ".", "square", "(", "calibrated_probs", "-", "correct", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.remove_edges.metrics.eval_marginal_mse": [[408, 416], ["metrics.get_labels_one_hot", "numpy.array", "numpy.mean", "numpy.square"], "function", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.get_labels_one_hot"], ["", "def", "eval_marginal_mse", "(", "calibrated_probs", ",", "probs", ",", "labels", ")", ":", "\n", "    ", "assert", "calibrated_probs", ".", "shape", "==", "probs", ".", "shape", "\n", "k", "=", "probs", ".", "shape", "[", "1", "]", "\n", "labels_one_hot", "=", "get_labels_one_hot", "(", "np", ".", "array", "(", "labels", ")", ",", "k", ")", "\n", "return", "(", "\n", "np", ".", "mean", "(", "np", ".", "square", "(", "calibrated_probs", "-", "labels_one_hot", ")", ")", "\n", "*", "calibrated_probs", ".", "shape", "[", "1", "]", "\n", "/", "2.0", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.remove_edges.metrics.resample": [[422, 425], ["numpy.random.choice", "list", "range", "len", "len"], "function", ["None"], ["", "def", "resample", "(", "data", ":", "List", "[", "T", "]", ")", "->", "List", "[", "T", "]", ":", "\n", "    ", "indices", "=", "np", ".", "random", ".", "choice", "(", "list", "(", "range", "(", "len", "(", "data", ")", ")", ")", ",", "size", "=", "len", "(", "data", ")", ",", "replace", "=", "True", ")", "\n", "return", "[", "data", "[", "i", "]", "for", "i", "in", "indices", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.remove_edges.metrics.bootstrap_uncertainty": [[427, 442], ["estimator", "functional", "range", "bootstrap_estimates.append", "estimator", "numpy.percentile", "numpy.percentile", "numpy.percentile", "metrics.resample"], "function", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.resample"], ["", "def", "bootstrap_uncertainty", "(", "\n", "data", ":", "List", "[", "T", "]", ",", "functional", ",", "estimator", "=", "None", ",", "alpha", "=", "10.0", ",", "num_samples", "=", "1000", "\n", ")", "->", "Tuple", "[", "float", ",", "float", "]", ":", "\n", "    ", "\"\"\"Return boostrap uncertained for 1 - alpha percent confidence interval.\"\"\"", "\n", "if", "estimator", "is", "None", ":", "\n", "        ", "estimator", "=", "functional", "\n", "", "estimate", "=", "estimator", "(", "data", ")", "\n", "plugin", "=", "functional", "(", "data", ")", "\n", "bootstrap_estimates", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "num_samples", ")", ":", "\n", "        ", "bootstrap_estimates", ".", "append", "(", "estimator", "(", "resample", "(", "data", ")", ")", ")", "\n", "", "return", "(", "\n", "plugin", "+", "estimate", "-", "np", ".", "percentile", "(", "bootstrap_estimates", ",", "100", "-", "alpha", "/", "2.0", ")", ",", "\n", "plugin", "+", "estimate", "-", "np", ".", "percentile", "(", "bootstrap_estimates", ",", "50", ")", ",", "\n", "plugin", "+", "estimate", "-", "np", ".", "percentile", "(", "bootstrap_estimates", ",", "alpha", "/", "2.0", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.remove_edges.metrics.precentile_bootstrap_uncertainty": [[445, 461], ["functional", "estimator", "range", "bootstrap_estimates.append", "estimator", "numpy.percentile", "numpy.percentile", "numpy.percentile", "metrics.resample", "numpy.percentile"], "function", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.resample"], ["", "def", "precentile_bootstrap_uncertainty", "(", "\n", "data", ":", "List", "[", "T", "]", ",", "functional", ",", "estimator", "=", "None", ",", "alpha", "=", "10.0", ",", "num_samples", "=", "1000", "\n", ")", "->", "Tuple", "[", "float", ",", "float", "]", ":", "\n", "    ", "\"\"\"Return boostrap uncertained for 1 - alpha percent confidence interval.\"\"\"", "\n", "if", "estimator", "is", "None", ":", "\n", "        ", "estimator", "=", "functional", "\n", "", "plugin", "=", "functional", "(", "data", ")", "\n", "estimate", "=", "estimator", "(", "data", ")", "\n", "bootstrap_estimates", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "num_samples", ")", ":", "\n", "        ", "bootstrap_estimates", ".", "append", "(", "estimator", "(", "resample", "(", "data", ")", ")", ")", "\n", "", "bias", "=", "2", "*", "np", ".", "percentile", "(", "bootstrap_estimates", ",", "50", ")", "-", "plugin", "-", "estimate", "\n", "return", "(", "\n", "np", ".", "percentile", "(", "bootstrap_estimates", ",", "alpha", "/", "2.0", ")", "-", "bias", ",", "\n", "np", ".", "percentile", "(", "bootstrap_estimates", ",", "50", ")", "-", "bias", ",", "\n", "np", ".", "percentile", "(", "bootstrap_estimates", ",", "100", "-", "alpha", "/", "2.0", ")", "-", "bias", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.remove_edges.metrics.bootstrap_std": [[464, 472], ["range", "numpy.std", "bootstrap_estimates.append", "estimator", "metrics.resample"], "function", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.resample"], ["", "def", "bootstrap_std", "(", "\n", "data", ":", "List", "[", "T", "]", ",", "estimator", "=", "None", ",", "num_samples", "=", "100", "\n", ")", "->", "Tuple", "[", "float", ",", "float", "]", ":", "\n", "    ", "\"\"\"Return boostrap uncertained for 1 - alpha percent confidence interval.\"\"\"", "\n", "bootstrap_estimates", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "num_samples", ")", ":", "\n", "        ", "bootstrap_estimates", ".", "append", "(", "estimator", "(", "resample", "(", "data", ")", ")", ")", "\n", "", "return", "np", ".", "std", "(", "bootstrap_estimates", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.remove_edges.metrics.get_platt_scaler": [[477, 495], ["sklearn.linear_model.LogisticRegression", "np.log.astype", "numpy.expand_dims", "numpy.clip", "numpy.log", "sklearn.linear_model.LogisticRegression.fit", "numpy.array", "numpy.clip", "numpy.log", "numpy.exp"], "function", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.metacal.metacal.MetaCalCoverageAcc.fit"], ["", "def", "get_platt_scaler", "(", "model_probs", ",", "labels", ")", ":", "\n", "    ", "clf", "=", "LogisticRegression", "(", "C", "=", "1e10", ",", "solver", "=", "\"lbfgs\"", ")", "\n", "eps", "=", "1e-12", "\n", "model_probs", "=", "model_probs", ".", "astype", "(", "dtype", "=", "np", ".", "float64", ")", "\n", "model_probs", "=", "np", ".", "expand_dims", "(", "model_probs", ",", "axis", "=", "-", "1", ")", "\n", "model_probs", "=", "np", ".", "clip", "(", "model_probs", ",", "eps", ",", "1", "-", "eps", ")", "\n", "model_probs", "=", "np", ".", "log", "(", "model_probs", "/", "(", "1", "-", "model_probs", ")", ")", "\n", "clf", ".", "fit", "(", "model_probs", ",", "labels", ")", "\n", "\n", "def", "calibrator", "(", "probs", ")", ":", "\n", "        ", "x", "=", "np", ".", "array", "(", "probs", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "x", "=", "np", ".", "clip", "(", "x", ",", "eps", ",", "1", "-", "eps", ")", "\n", "x", "=", "np", ".", "log", "(", "x", "/", "(", "1", "-", "x", ")", ")", "\n", "x", "=", "x", "*", "clf", ".", "coef_", "[", "0", "]", "+", "clf", ".", "intercept_", "\n", "output", "=", "1", "/", "(", "1", "+", "np", ".", "exp", "(", "-", "x", ")", ")", "\n", "return", "output", "\n", "\n", "", "return", "calibrator", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.remove_edges.metrics.get_histogram_calibrator": [[497, 520], ["zip", "numpy.array", "metrics.get_bin", "binned_values[].append", "numpy.mean", "metrics.get_histogram_calibrator.safe_mean"], "function", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.get_bin"], ["", "def", "get_histogram_calibrator", "(", "model_probs", ",", "values", ",", "bins", ")", ":", "\n", "    ", "binned_values", "=", "[", "[", "]", "for", "_", "in", "range", "(", "len", "(", "bins", ")", ")", "]", "\n", "for", "prob", ",", "value", "in", "zip", "(", "model_probs", ",", "values", ")", ":", "\n", "        ", "bin_idx", "=", "get_bin", "(", "prob", ",", "bins", ")", "\n", "binned_values", "[", "bin_idx", "]", ".", "append", "(", "float", "(", "value", ")", ")", "\n", "\n", "", "def", "safe_mean", "(", "values", ",", "bin_idx", ")", ":", "\n", "        ", "if", "len", "(", "values", ")", "==", "0", ":", "\n", "            ", "if", "bin_idx", "==", "0", ":", "\n", "                ", "return", "float", "(", "bins", "[", "0", "]", ")", "/", "2.0", "\n", "", "return", "float", "(", "bins", "[", "bin_idx", "]", "+", "bins", "[", "bin_idx", "-", "1", "]", ")", "/", "2.0", "\n", "", "return", "np", ".", "mean", "(", "values", ")", "\n", "\n", "", "bin_means", "=", "[", "\n", "safe_mean", "(", "values", ",", "bidx", ")", "for", "values", ",", "bidx", "in", "zip", "(", "binned_values", ",", "range", "(", "len", "(", "bins", ")", ")", ")", "\n", "]", "\n", "bin_means", "=", "np", ".", "array", "(", "bin_means", ")", "\n", "\n", "def", "calibrator", "(", "probs", ")", ":", "\n", "        ", "indices", "=", "np", ".", "searchsorted", "(", "bins", ",", "probs", ")", "\n", "return", "bin_means", "[", "indices", "]", "\n", "\n", "", "return", "calibrator", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.remove_edges.metrics.get_discrete_calibrator": [[522, 524], ["metrics.get_histogram_calibrator"], "function", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.get_histogram_calibrator"], ["", "def", "get_discrete_calibrator", "(", "model_probs", ",", "bins", ")", ":", "\n", "    ", "return", "get_histogram_calibrator", "(", "model_probs", ",", "model_probs", ",", "bins", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.remove_edges.metrics.save_test_probs_labels": [[529, 533], ["dataset.load_data", "model.predict", "pickle.dump", "open"], "function", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.metacal.utils.load_data", "home.repos.pwc.inspect_result.liu-yushan_calgnn.metacal.metacal.MetaCalCoverageAcc.predict"], ["", "def", "save_test_probs_labels", "(", "dataset", ",", "model", ",", "filename", ")", ":", "\n", "    ", "(", "x_train", ",", "y_train", ")", ",", "(", "x_test", ",", "y_test", ")", "=", "dataset", ".", "load_data", "(", ")", "\n", "probs", "=", "model", ".", "predict", "(", "x_test", ")", "\n", "pickle", ".", "dump", "(", "(", "probs", ",", "y_test", ")", ",", "open", "(", "filename", ",", "\"wb\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.remove_edges.metrics.load_test_probs_labels": [[535, 543], ["pickle.load", "numpy.random.choice", "numpy.array", "numpy.array", "open", "len", "list", "range", "len", "len"], "function", ["None"], ["", "def", "load_test_probs_labels", "(", "filename", ")", ":", "\n", "    ", "probs", ",", "labels", "=", "pickle", ".", "load", "(", "open", "(", "filename", ",", "\"rb\"", ")", ")", "\n", "if", "len", "(", "labels", ".", "shape", ")", ">", "1", ":", "\n", "        ", "labels", "=", "labels", "[", ":", ",", "0", "]", "\n", "", "indices", "=", "np", ".", "random", ".", "choice", "(", "list", "(", "range", "(", "len", "(", "probs", ")", ")", ")", ",", "size", "=", "len", "(", "probs", ")", ",", "replace", "=", "False", ")", "\n", "probs", "=", "np", ".", "array", "(", "[", "probs", "[", "i", "]", "for", "i", "in", "indices", "]", ")", "\n", "labels", "=", "np", ".", "array", "(", "[", "labels", "[", "i", "]", "for", "i", "in", "indices", "]", ")", "\n", "return", "probs", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.remove_edges.metrics.get_top_predictions": [[545, 547], ["numpy.argmax"], "function", ["None"], ["", "def", "get_top_predictions", "(", "probs", ")", ":", "\n", "    ", "return", "np", ".", "argmax", "(", "probs", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.remove_edges.metrics.get_top_probs": [[549, 551], ["numpy.max"], "function", ["None"], ["", "def", "get_top_probs", "(", "probs", ")", ":", "\n", "    ", "return", "np", ".", "max", "(", "probs", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.remove_edges.metrics.get_accuracy": [[553, 555], ["len", "sum"], "function", ["None"], ["", "def", "get_accuracy", "(", "probs", ",", "labels", ")", ":", "\n", "    ", "return", "sum", "(", "labels", "==", "predictions", ")", "*", "1.0", "/", "len", "(", "labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.remove_edges.metrics.get_labels_one_hot": [[557, 564], ["numpy.zeros", "numpy.min", "numpy.max", "numpy.arange"], "function", ["None"], ["", "def", "get_labels_one_hot", "(", "labels", ",", "k", ")", ":", "\n", "    ", "assert", "np", ".", "min", "(", "labels", ")", ">=", "0", "\n", "assert", "np", ".", "max", "(", "labels", ")", "<=", "k", "-", "1", "\n", "num_labels", "=", "labels", ".", "shape", "[", "0", "]", "\n", "labels_one_hot", "=", "np", ".", "zeros", "(", "(", "num_labels", ",", "k", ")", ")", "\n", "labels_one_hot", "[", "np", ".", "arange", "(", "num_labels", ")", ",", "labels", "]", "=", "1", "\n", "return", "labels_one_hot", "\n", "", ""]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.remove_edges.plot_results.str_to_arr": [[17, 23], ["np.array().astype.replace", "np.array().astype.split", "numpy.array().astype", "numpy.round", "numpy.array"], "function", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.split"], ["", "def", "str_to_arr", "(", "line", ")", ":", "\n", "    ", "line", "=", "line", "[", "1", ":", "-", "2", "]", "\n", "line", ".", "replace", "(", "\" \"", ",", "\"\"", ")", "\n", "line", "=", "line", ".", "split", "(", "\",\"", ")", "\n", "line", "=", "np", ".", "array", "(", "line", ")", ".", "astype", "(", "\"float64\"", ")", "\n", "return", "np", ".", "round", "(", "line", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.remove_edges.create_model.create_gcn_model": [[6, 10], ["models.GCN", "torch.optim.Adam", "models.GCN.parameters"], "function", ["None"], ["def", "create_gcn_model", "(", "dataset", ",", "nhid", "=", "16", ",", "dropout", "=", "0.", ",", "lr", "=", "0.01", ",", "weight_decay", "=", "5e-4", ")", ":", "\n", "    ", "model", "=", "GCN", "(", "dataset", ",", "nhid", ",", "dropout", ")", "\n", "optimizer", "=", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ",", "weight_decay", "=", "weight_decay", ")", "\n", "return", "model", ",", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.remove_edges.create_model.create_gat_model": [[12, 24], ["models.GAT", "torch.optim.Adam", "models.GAT.parameters"], "function", ["None"], ["", "def", "create_gat_model", "(", "dataset", ",", "nhid", "=", "8", ",", "first_heads", "=", "8", ",", "dropout", "=", "0.6", ")", ":", "\n", "    ", "if", "dataset", ".", "name", "in", "[", "\"Cora\"", ",", "\"Citeseer\"", "]", ":", "\n", "        ", "output_heads", "=", "1", "\n", "lr", "=", "0.005", "\n", "weight_decay", "=", "5e-4", "\n", "", "elif", "dataset", ".", "name", "==", "\"Pubmed\"", ":", "\n", "        ", "output_heads", "=", "8", "\n", "lr", "=", "0.01", "\n", "weight_decay", "=", "0.001", "\n", "", "model", "=", "GAT", "(", "dataset", ",", "nhid", ",", "first_heads", ",", "output_heads", ",", "dropout", ")", "\n", "optimizer", "=", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ",", "weight_decay", "=", "weight_decay", ")", "\n", "return", "model", ",", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.remove_edges.create_model.create_gat_gcnparam_model": [[26, 32], ["models.GAT_GCNParameters", "torch.optim.Adam", "models.GAT_GCNParameters.parameters"], "function", ["None"], ["", "def", "create_gat_gcnparam_model", "(", "dataset", ")", ":", "\n", "    ", "lr", "=", "0.01", "\n", "weight_decay", "=", "5e-4", "\n", "model", "=", "GAT_GCNParameters", "(", "dataset", ")", "\n", "optimizer", "=", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ",", "weight_decay", "=", "weight_decay", ")", "\n", "return", "model", ",", "optimizer", "\n", "", ""]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.remove_edges.remove_edges.remove_edges": [[12, 86], ["torch.sort", "len", "range", "torch.randperm", "torch.cat", "remove_edges.remove_edges.del_tensor_ele"], "function", ["None"], ["def", "remove_edges", "(", "edge_index", ",", "data", ",", "remove_rate", ")", ":", "\n", "    ", "\"\"\"\n    Remove the egdes in edge_index from the graph.\n    :return new edge_index, average node degree\n    \"\"\"", "\n", "remove_list", "=", "torch", ".", "randperm", "(", "data", ".", "num_edges", ")", "[", ":", "int", "(", "data", ".", "num_edges", "*", "remove_rate", ")", "]", "\n", "remove_list", ",", "_", "=", "torch", ".", "sort", "(", "remove_list", ",", "descending", "=", "True", ")", "\n", "\n", "def", "del_tensor_ele", "(", "arr", ",", "index", ")", ":", "\n", "        ", "arr1", "=", "arr", "[", ":", ",", "0", ":", "index", "]", "\n", "arr2", "=", "arr", "[", ":", ",", "index", "+", "1", ":", "]", "\n", "return", "torch", ".", "cat", "(", "(", "arr1", ",", "arr2", ")", ",", "dim", "=", "1", ")", "\n", "\n", "", "new_edge_index", "=", "edge_index", "\n", "for", "col", "in", "remove_list", ":", "\n", "        ", "new_edge_index", "=", "del_tensor_ele", "(", "new_edge_index", ",", "col", ")", "\n", "# Delete single directed edge", "\n", "", "if", "len", "(", "new_edge_index", "[", "0", "]", ")", ":", "\n", "        ", "highest_idx", "=", "new_edge_index", ".", "max", "(", ")", "\n", "", "else", ":", "\n", "        ", "highest_idx", "=", "0", "\n", "", "for", "node_i", "in", "range", "(", "highest_idx", "+", "1", ")", ":", "\n", "        ", "nodes_connected_i_top", "=", "(", "\n", "new_edge_index", "[", "0", ",", "new_edge_index", "[", "1", ",", ":", "]", "==", "node_i", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", ")", "\n", "nodes_connected_i_down", "=", "(", "\n", "new_edge_index", "[", "1", ",", "new_edge_index", "[", "0", ",", ":", "]", "==", "node_i", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", ")", "\n", "top_del_i_list", "=", "list", "(", "\n", "set", "(", "nodes_connected_i_top", ".", "numpy", "(", ")", ")", ".", "difference", "(", "\n", "list", "(", "nodes_connected_i_down", ".", "numpy", "(", ")", ")", "\n", ")", "\n", ")", "\n", "down_del_i_list", "=", "list", "(", "\n", "set", "(", "nodes_connected_i_down", ".", "numpy", "(", ")", ")", ".", "difference", "(", "\n", "list", "(", "nodes_connected_i_top", ".", "numpy", "(", ")", ")", "\n", ")", "\n", ")", "\n", "# Delte these two lists", "\n", "for", "top_del_i", "in", "top_del_i_list", ":", "\n", "            ", "col_del_i", "=", "list", "(", "\n", "set", "(", "\n", "torch", ".", "where", "(", "(", "new_edge_index", "[", "1", ",", ":", "]", "==", "node_i", ")", ")", "[", "0", "]", "\n", ".", "detach", "(", ")", "\n", ".", "cpu", "(", ")", "\n", ".", "numpy", "(", ")", "\n", ")", ".", "intersection", "(", "\n", "set", "(", "\n", "torch", ".", "where", "(", "new_edge_index", "[", "0", ",", ":", "]", "==", "top_del_i", ")", "[", "0", "]", "\n", ".", "detach", "(", ")", "\n", ".", "cpu", "(", ")", "\n", ".", "numpy", "(", ")", "\n", ")", "\n", ")", "\n", ")", "[", "0", "]", "\n", "new_edge_index", "=", "del_tensor_ele", "(", "new_edge_index", ",", "col_del_i", ")", "\n", "", "for", "down_del_i", "in", "down_del_i_list", ":", "\n", "            ", "col_del_i", "=", "list", "(", "\n", "set", "(", "\n", "torch", ".", "where", "(", "(", "new_edge_index", "[", "0", ",", ":", "]", "==", "node_i", ")", ")", "[", "0", "]", "\n", ".", "detach", "(", ")", "\n", ".", "cpu", "(", ")", "\n", ".", "numpy", "(", ")", "\n", ")", ".", "intersection", "(", "\n", "set", "(", "\n", "torch", ".", "where", "(", "new_edge_index", "[", "1", ",", ":", "]", "==", "down_del_i", ")", "[", "0", "]", "\n", ".", "detach", "(", ")", "\n", ".", "cpu", "(", ")", "\n", ".", "numpy", "(", ")", "\n", ")", "\n", ")", "\n", ")", "[", "0", "]", "\n", "new_edge_index", "=", "del_tensor_ele", "(", "new_edge_index", ",", "col_del_i", ")", "\n", "", "", "return", "new_edge_index", ",", "new_edge_index", ".", "shape", "[", "1", "]", "//", "2", "/", "data", ".", "num_nodes", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.remove_edges.remove_edges.run": [[88, 126], ["torch.device", "range", "utils.training", "gnn.to", "utils.cal_eval_model", "res_uncal.append", "numpy.mean", "numpy.sqrt", "torch.cuda.is_available", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.var", "numpy.var", "numpy.var", "numpy.var"], "function", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.utils.training", "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.utils.cal_eval_model"], ["", "def", "run", "(", "edge_index", ",", "gnn", ",", "optimizer", ",", "args", ")", ":", "\n", "    ", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "res_uncal", "=", "[", "]", "\n", "for", "num_run", "in", "range", "(", "args", ".", "num_runs", ")", ":", "\n", "        ", "test_acc", ",", "_", ",", "gnn", "=", "training", "(", "\n", "dataset", ",", "\n", "gnn", ",", "\n", "optimizer", ",", "\n", "args", ".", "model", ",", "\n", "args", ".", "dataset", ",", "\n", "args", ".", "epochs", ",", "\n", "args", ".", "add_cal_loss", ",", "\n", "args", ".", "early_stopping", ",", "\n", "args", ".", "patience", ",", "\n", "args", ".", "alpha", ",", "\n", "args", ".", "lmbda", ",", "\n", "num_run", ",", "\n", "edge_index", ",", "\n", ")", "\n", "gnn", ".", "to", "(", "device", ")", "\n", "\n", "# Uncal", "\n", "ece", ",", "marg_ece", ",", "nll", ",", "test_acc", "=", "cal_eval_model", "(", "\n", "gnn", ",", "dataset", ",", "device", ",", "args", ".", "dataset", ",", "args", ".", "model", ",", "edge_index", "\n", ")", "\n", "res_uncal", ".", "append", "(", "[", "ece", ",", "marg_ece", ",", "nll", ",", "test_acc", "]", ")", "\n", "\n", "# 0: mean, 1: std", "\n", "", "ece0", ",", "marg_ece0", ",", "nll0", ",", "test_acc0", "=", "np", ".", "mean", "(", "res_uncal", ",", "axis", "=", "0", ")", "*", "100", "\n", "nll0", "=", "nll0", "/", "100", "\n", "ece1", ",", "marg_ece1", ",", "nll1", ",", "test_acc1", "=", "(", "\n", "np", ".", "sqrt", "(", "np", ".", "var", "(", "res_uncal", ",", "axis", "=", "0", ")", "[", "0", "]", ")", "*", "100", ",", "\n", "np", ".", "sqrt", "(", "np", ".", "var", "(", "res_uncal", ",", "axis", "=", "0", ")", "[", "1", "]", ")", "*", "100", ",", "\n", "np", ".", "sqrt", "(", "np", ".", "var", "(", "res_uncal", ",", "axis", "=", "0", ")", "[", "2", "]", ")", ",", "\n", "np", ".", "sqrt", "(", "np", ".", "var", "(", "res_uncal", ",", "axis", "=", "0", ")", "[", "3", "]", ")", "*", "100", ",", "\n", ")", "\n", "\n", "return", "test_acc0", ",", "ece0", ",", "marg_ece0", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.remove_edges.utils.reproducibility_seed": [[13, 21], ["torch.manual_seed", "torch.manual_seed", "numpy.random.seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed"], "function", ["None"], ["def", "reproducibility_seed", "(", "a", ",", "b", ")", ":", "\n", "    ", "torch_init_seed", "=", "a", "\n", "torch", ".", "manual_seed", "(", "torch_init_seed", ")", "\n", "numpy_init_seed", "=", "b", "\n", "np", ".", "random", ".", "seed", "(", "numpy_init_seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "torch_init_seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.remove_edges.utils.training": [[23, 130], ["torch.no_grad", "torch.no_grad", "torch.device", "torch.device", "gnn.reset_parameters", "torch.cuda.is_available", "torch.cuda.is_available", "float", "range", "gnn.train", "optimizer.zero_grad", "torch.nll_loss", "F.nll_loss.backward", "optimizer.step", "F.nll_loss.item", "gnn.eval", "torch.softmax", "data", "gnn.to", "data.to", "os.path.exists", "os.makedirs", "torch.cuda.synchronize", "torch.cuda.synchronize", "utils.training.training_step"], "function", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.models.APPNPNet.reset_parameters"], ["", "def", "training", "(", "\n", "dataset", ",", "\n", "gnn", ",", "\n", "optimizer", ",", "\n", "gnn_name", ",", "\n", "data_name", ",", "\n", "epochs", ",", "\n", "add_cal_loss", ",", "\n", "early_stopping", ",", "\n", "patience", ",", "\n", "alpha", ",", "\n", "lmbda", ",", "\n", "num_run", ",", "\n", "edge_index", ",", "\n", "save_model", "=", "False", ",", "\n", ")", ":", "\n", "    ", "data", "=", "dataset", "[", "0", "]", "\n", "avg_conf_list", ",", "avg_acc_list", "=", "[", "]", ",", "[", "]", "\n", "\n", "def", "training_step", "(", "\n", "data", ",", "alpha", ",", "lmbda", ",", "epoch", ",", "epochs", ",", "add_cal_loss", ",", "device", ",", "edge_index", "\n", ")", ":", "\n", "        ", "gnn", ".", "train", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "logits", "=", "gnn", "(", "data", ",", "edge_index", ")", "[", "data", ".", "train_mask", "]", "\n", "nll_loss", "=", "F", ".", "nll_loss", "(", "logits", ",", "data", ".", "y", "[", "data", ".", "train_mask", "]", ")", "\n", "if", "add_cal_loss", ":", "\n", "            ", "loss_cal", "=", "cal_loss", "(", "\n", "data", ".", "y", "[", "data", ".", "train_mask", "]", ",", "logits", ",", "lmbda", ",", "epoch", ",", "epochs", ",", "device", "\n", ")", "\n", "loss", "=", "alpha", "*", "nll_loss", "+", "(", "1.0", "-", "alpha", ")", "*", "loss_cal", "\n", "", "else", ":", "\n", "            ", "loss", "=", "nll_loss", "\n", "", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "return", "loss", ".", "item", "(", ")", "\n", "\n", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "test_step", "(", "data", ",", "edge_index", ")", ":", "\n", "        ", "gnn", ".", "eval", "(", ")", "\n", "(", "\n", "logits", ",", "\n", "logits_list", ",", "\n", "probs_list", ",", "\n", "accs_list", ",", "\n", "losses_list", ",", "\n", "y_pred_list", ",", "\n", "y_true_list", ",", "\n", ")", "=", "(", "gnn", "(", "data", ",", "edge_index", ")", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ")", "\n", "probs_pred", "=", "F", ".", "softmax", "(", "logits", ",", "dim", "=", "1", ")", "\n", "\n", "for", "_", ",", "mask", "in", "data", "(", "\"train_mask\"", ",", "\"val_mask\"", ",", "\"test_mask\"", ")", ":", "\n", "            ", "y_pred", "=", "logits", "[", "mask", "]", ".", "max", "(", "1", ")", "[", "1", "]", "\n", "loss", "=", "F", ".", "nll_loss", "(", "logits", "[", "mask", "]", ",", "data", ".", "y", "[", "mask", "]", ")", "\n", "acc", "=", "y_pred", ".", "eq", "(", "data", ".", "y", "[", "mask", "]", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "mask", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "logits_list", ".", "append", "(", "logits", "[", "mask", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "probs_list", ".", "append", "(", "probs_pred", "[", "mask", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "accs_list", ".", "append", "(", "acc", ")", "\n", "losses_list", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "y_pred_list", ".", "append", "(", "y_pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "y_true_list", ".", "append", "(", "data", ".", "y", "[", "mask", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "", "return", "logits_list", ",", "probs_list", ",", "accs_list", ",", "losses_list", ",", "y_pred_list", ",", "y_true_list", "\n", "\n", "", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "gnn", ",", "data", "=", "gnn", ".", "to", "(", "device", ")", ",", "data", ".", "to", "(", "device", ")", "\n", "gnn", ".", "reset_parameters", "(", ")", "\n", "\n", "checkpoints_path", "=", "\"checkpoints/{}_{}/\"", ".", "format", "(", "gnn_name", ",", "data_name", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "checkpoints_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "checkpoints_path", ")", "\n", "\n", "", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "\n", "", "best_val_acc", ",", "best_test_acc", "=", "0", ",", "0", "\n", "best_val_loss", "=", "float", "(", "\"inf\"", ")", "\n", "val_loss_history", "=", "[", "]", "\n", "patience_cur", "=", "patience", "\n", "\n", "for", "epoch", "in", "range", "(", "epochs", ")", ":", "\n", "        ", "training_step", "(", "\n", "data", ",", "alpha", ",", "lmbda", ",", "epoch", ",", "epochs", ",", "add_cal_loss", ",", "device", ",", "edge_index", "\n", ")", "\n", "(", "\n", "[", "logits_train", ",", "logits_val", ",", "logits_test", "]", ",", "\n", "[", "probs_train", ",", "probs_val", ",", "probs_test", "]", ",", "\n", "[", "train_acc", ",", "val_acc", ",", "test_acc", "]", ",", "\n", "[", "train_loss", ",", "val_loss", ",", "test_loss", "]", ",", "\n", "[", "y_pred_train", ",", "y_pred_val", ",", "y_pred_test", "]", ",", "\n", "[", "y_true_train", ",", "y_true_val", ",", "y_true_test", "]", ",", "\n", ")", "=", "test_step", "(", "data", ",", "edge_index", ")", "\n", "\n", "if", "val_loss", "<", "best_val_loss", ":", "\n", "            ", "best_val_loss", "=", "val_loss", "\n", "best_val_acc", "=", "val_acc", "\n", "best_test_acc", "=", "test_acc", "\n", "patience_cur", "=", "patience", "\n", "if", "save_model", ":", "\n", "                ", "torch", ".", "save", "(", "gnn", ".", "state_dict", "(", ")", ",", "checkpoints_path", "+", "str", "(", "num_run", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "patience_cur", "-=", "1", "\n", "if", "not", "patience_cur", "and", "early_stopping", ":", "\n", "                ", "break", "\n", "\n", "", "", "", "return", "best_test_acc", ",", "best_val_acc", ",", "gnn", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.remove_edges.utils.cal_loss": [[132, 200], ["torch.softmax", "utils.cal_loss.calculate_confidence_vec"], "function", ["None"], ["", "def", "cal_loss", "(", "y_true", ",", "logits", ",", "lmbda", ",", "epoch", ",", "epochs", ",", "device", ")", ":", "\n", "    ", "def", "calculate_confidence_vec", "(", "confidence", ",", "y_pred", ",", "y_true", ",", "device", ",", "bin_num", "=", "15", ")", ":", "\n", "        ", "def", "compute_binned_acc_conf", "(", "\n", "conf_thresh_lower", ",", "conf_thresh_upper", ",", "conf", ",", "pred", ",", "true", ",", "device", "\n", ")", ":", "\n", "            ", "filtered_tuples", "=", "[", "\n", "x", "\n", "for", "x", "in", "zip", "(", "pred", ",", "true", ",", "conf", ")", "\n", "if", "x", "[", "2", "]", ">", "conf_thresh_lower", "and", "x", "[", "2", "]", "<=", "conf_thresh_upper", "\n", "]", "\n", "if", "len", "(", "filtered_tuples", ")", "<", "1", ":", "\n", "                ", "return", "(", "\n", "torch", ".", "tensor", "(", "0.0", ")", ".", "to", "(", "device", ")", ",", "\n", "torch", ".", "tensor", "(", "0.0", ",", "requires_grad", "=", "True", ")", ".", "to", "(", "device", ")", ",", "\n", "torch", ".", "tensor", "(", "0", ")", ".", "to", "(", "device", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "                ", "correct", "=", "len", "(", "\n", "[", "x", "for", "x", "in", "filtered_tuples", "if", "x", "[", "0", "]", "==", "x", "[", "1", "]", "]", "\n", ")", "# How many correct labels", "\n", "len_bin", "=", "torch", ".", "tensor", "(", "len", "(", "filtered_tuples", ")", ")", ".", "to", "(", "\n", "device", "\n", ")", "# How many elements fall into the given bin", "\n", "avg_conf", "=", "(", "\n", "torch", ".", "sum", "(", "torch", ".", "stack", "(", "[", "x", "[", "2", "]", "for", "x", "in", "filtered_tuples", "]", ")", ")", "/", "len_bin", "\n", ")", "# Avg confidence of bin", "\n", "accuracy", "=", "(", "torch", ".", "tensor", "(", "correct", ",", "dtype", "=", "torch", ".", "float32", ")", "/", "len_bin", ")", ".", "to", "(", "\n", "device", "\n", ")", "# Accuracy of bin", "\n", "", "return", "accuracy", ",", "avg_conf", ",", "len_bin", "\n", "\n", "", "bin_size", "=", "torch", ".", "tensor", "(", "1.0", "/", "bin_num", ")", "\n", "upper_bounds", "=", "torch", ".", "arange", "(", "bin_size", ",", "1", "+", "bin_size", ",", "bin_size", ")", "\n", "\n", "accuracies", "=", "[", "]", "\n", "num_in_each_bin", "=", "[", "]", "\n", "\n", "for", "conf_thresh", "in", "upper_bounds", ":", "\n", "            ", "acc", ",", "avg_conf", ",", "len_bin", "=", "compute_binned_acc_conf", "(", "\n", "conf_thresh", "-", "bin_size", ",", "conf_thresh", ",", "confidence", ",", "y_pred", ",", "y_true", ",", "device", "\n", ")", "\n", "accuracies", ".", "append", "(", "acc", ")", "\n", "num_in_each_bin", ".", "append", "(", "len_bin", ")", "\n", "\n", "", "acc_all", "=", "[", "]", "\n", "for", "conf", "in", "confidence", ":", "\n", "            ", "idx", "=", "int", "(", "conf", "//", "(", "1", "/", "bin_num", ")", ")", "\n", "acc_all", ".", "append", "(", "accuracies", "[", "idx", "]", ")", "\n", "\n", "", "return", "torch", ".", "stack", "(", "acc_all", ")", ",", "torch", ".", "stack", "(", "num_in_each_bin", ")", "\n", "\n", "", "def", "calculate_cal_term", "(", "acc_vector", ",", "conf_vector", ",", "num_in_each_bin", ")", ":", "\n", "        ", "bin_error", "=", "acc_vector", "*", "torch", ".", "log", "(", "conf_vector", ")", "\n", "cal_term", "=", "-", "torch", ".", "sum", "(", "bin_error", ")", "\n", "return", "cal_term", "\n", "\n", "", "probs", "=", "F", ".", "softmax", "(", "logits", ",", "dim", "=", "1", ")", "\n", "y_pred", "=", "torch", ".", "max", "(", "logits", ",", "axis", "=", "1", ")", "[", "1", "]", "\n", "confidence", "=", "torch", ".", "max", "(", "probs", ",", "axis", "=", "1", ")", "[", "0", "]", "\n", "acc_vector", ",", "num_in_each_bin", "=", "calculate_confidence_vec", "(", "\n", "confidence", ",", "y_pred", ",", "y_true", ",", "device", "\n", ")", "\n", "cal_term", "=", "calculate_cal_term", "(", "acc_vector", ",", "confidence", ",", "num_in_each_bin", ")", "\n", "\n", "lmbda", "=", "torch", ".", "tensor", "(", "lmbda", ")", "\n", "annealing_coef", "=", "torch", ".", "min", "(", "lmbda", ",", "torch", ".", "tensor", "(", "lmbda", "*", "(", "epoch", "+", "1", ")", "/", "epochs", ")", ")", "\n", "\n", "return", "cal_term", "*", "annealing_coef", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.remove_edges.utils.cal_eval_model": [[202, 243], ["dataset[].to", "[].detach().cpu", "torch.softmax", "numpy.array", "prob_pred_test[].detach().cpu().numpy", "list", "list", "metrics.lower_bound_scaling_ce", "metrics.lower_bound_scaling_ce", "torch.no_grad", "torch.no_grad", "gnn.to", "gnn.eval", "len", "numpy.arange", "numpy.finfo", "F.softmax.detach().cpu().numpy", "test_labels.detach().cpu().numpy", "utils.draw_RD", "utils.draw_CH", "gnn", "[].detach", "prob_pred_test[].detach().cpu", "numpy.sum", "F.softmax.detach().cpu().numpy", "[].detach().cpu.numpy", "test_labels.detach().cpu().numpy", "F.softmax.detach().cpu().numpy", "[].detach().cpu.numpy", "test_labels.detach().cpu().numpy", "numpy.log", "F.softmax.detach().cpu", "test_labels.detach().cpu", "prob_pred_test[].detach", "F.softmax.detach().cpu", "test_labels.detach().cpu", "F.softmax.detach().cpu", "test_labels.detach().cpu", "test_logits.max", "F.softmax.detach", "test_labels.detach", "F.softmax.detach", "test_labels.detach", "F.softmax.detach", "test_labels.detach"], "function", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.lower_bound_scaling_ce", "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.lower_bound_scaling_ce", "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.utils.draw_RD", "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.utils.draw_CH"], ["", "def", "cal_eval_model", "(", "gnn", ",", "dataset", ",", "device", ",", "data_name", ",", "gnn_name", ",", "edge_index", ",", "draw", "=", "False", ")", ":", "\n", "    ", "data", "=", "dataset", "[", "0", "]", ".", "to", "(", "device", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "gnn", ".", "to", "(", "device", ")", "\n", "gnn", ".", "eval", "(", ")", "\n", "test_logits", "=", "gnn", "(", "data", ",", "edge_index", ")", "[", "data", ".", "test_mask", "]", "\n", "test_labels", "=", "data", ".", "y", "[", "data", ".", "test_mask", "]", "\n", "\n", "", "y_pred_test", "=", "test_logits", ".", "max", "(", "1", ")", "[", "1", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "prob_pred_test", "=", "F", ".", "softmax", "(", "test_logits", ",", "dim", "=", "1", ")", "\n", "test_acc", "=", "(", "y_pred_test", "==", "test_labels", ")", ".", "sum", "(", ")", "/", "len", "(", "test_labels", ")", "\n", "\n", "a", "=", "np", ".", "array", "(", "np", ".", "arange", "(", "0", ",", "prob_pred_test", ".", "shape", "[", "0", "]", ")", ")", "\n", "p_y", "=", "prob_pred_test", "[", "a", ",", "test_labels", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "tiny", "=", "np", ".", "finfo", "(", "np", ".", "float", ")", ".", "tiny", "# To avoid division by 0 warning", "\n", "nll", "=", "-", "np", ".", "sum", "(", "np", ".", "log", "(", "p_y", "+", "tiny", ")", ")", "/", "prob_pred_test", ".", "shape", "[", "0", "]", "\n", "\n", "probs", "=", "list", "(", "prob_pred_test", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "labels", "=", "list", "(", "test_labels", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "ece", "=", "lower_bound_scaling_ce", "(", "probs", ",", "labels", ",", "p", "=", "1", ",", "debias", "=", "False", ",", "mode", "=", "\"top-label\"", ")", "\n", "marg_ece", "=", "lower_bound_scaling_ce", "(", "probs", ",", "labels", ",", "p", "=", "1", ",", "debias", "=", "False", ",", "mode", "=", "\"marginal\"", ")", "\n", "\n", "if", "draw", ":", "\n", "        ", "draw_RD", "(", "\n", "prob_pred_test", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "y_pred_test", ".", "numpy", "(", ")", ",", "\n", "test_labels", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "data_name", ",", "\n", "gnn_name", ",", "\n", "ece", ",", "\n", ")", "\n", "draw_CH", "(", "\n", "prob_pred_test", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "y_pred_test", ".", "numpy", "(", ")", ",", "\n", "test_labels", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "data_name", ",", "\n", "gnn_name", ",", "\n", "ece", ",", "\n", ")", "\n", "\n", "", "return", "ece", ",", "marg_ece", ",", "nll", ",", "test_acc", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.remove_edges.utils.draw_RD": [[245, 264], ["numpy.max", "utils.get_uncalibrated_res", "matplotlib.subplots", "utils.rel_diagram_sub", "fig.savefig"], "function", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.utils.get_uncalibrated_res", "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.utils.rel_diagram_sub"], ["", "def", "draw_RD", "(", "prob_pred_test", ",", "y_pred_test", ",", "y_true_test", ",", "data_name", ",", "gnn_name", ",", "ece", ")", ":", "\n", "    ", "confs_pred_test", "=", "np", ".", "max", "(", "prob_pred_test", ",", "axis", "=", "1", ")", "\n", "bin_info_uncal", "=", "get_uncalibrated_res", "(", "y_true_test", ",", "confs_pred_test", ",", "y_pred_test", ")", "\n", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "nrows", "=", "1", ",", "ncols", "=", "1", ",", "figsize", "=", "(", "5", ",", "5", ")", ",", "sharex", "=", "\"col\"", ",", "sharey", "=", "\"row\"", ")", "\n", "rel_diagram_sub", "(", "\n", "bin_info_uncal", "[", "0", "]", ",", "\n", "bin_info_uncal", "[", "1", "]", ",", "\n", "ax", ",", "\n", "15", ",", "\n", "\"Reliability Diagram\"", ",", "\n", "\"Confidence\"", ",", "\n", "\"Accuracy\"", ",", "\n", "ece", ",", "\n", "data_name", ",", "\n", "gnn_name", ",", "\n", ")", "\n", "\n", "fig", ".", "savefig", "(", "\"output/figures/{}_{}_rd.png\"", ".", "format", "(", "gnn_name", ",", "data_name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.remove_edges.utils.draw_CH": [[266, 285], ["numpy.max", "utils.get_uncalibrated_res", "matplotlib.subplots", "utils.conf_histogram_sub", "fig.savefig"], "function", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.utils.get_uncalibrated_res", "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.utils.conf_histogram_sub"], ["", "def", "draw_CH", "(", "prob_pred_test", ",", "y_pred_test", ",", "y_true_test", ",", "data_name", ",", "gnn_name", ",", "ece", ")", ":", "\n", "    ", "confs_pred_test", "=", "np", ".", "max", "(", "prob_pred_test", ",", "axis", "=", "1", ")", "\n", "bin_info_uncal", "=", "get_uncalibrated_res", "(", "y_true_test", ",", "confs_pred_test", ",", "y_pred_test", ")", "\n", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "nrows", "=", "1", ",", "ncols", "=", "1", ",", "figsize", "=", "(", "5", ",", "5", ")", ",", "sharex", "=", "\"col\"", ",", "sharey", "=", "\"row\"", ")", "\n", "ave_conf", ",", "ave_acc", "=", "conf_histogram_sub", "(", "\n", "bin_info_uncal", "[", "0", "]", ",", "\n", "bin_info_uncal", "[", "1", "]", ",", "\n", "bin_info_uncal", "[", "2", "]", ",", "\n", "ax", ",", "\n", "15", ",", "\n", "\"Confidence Histogram\"", ",", "\n", "\"Confidence\"", ",", "\n", "\"Proportion of samples\"", ",", "\n", "ece", ",", "\n", "data_name", ",", "\n", "gnn_name", ",", "\n", ")", "\n", "fig", ".", "savefig", "(", "\"output/figures/{}_{}_ch.png\"", ".", "format", "(", "gnn_name", ",", "data_name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.remove_edges.utils.get_uncalibrated_res": [[287, 290], ["utils.get_bin_info"], "function", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.utils.get_bin_info"], ["", "def", "get_uncalibrated_res", "(", "y_true", ",", "confs_pred", ",", "y_pred", ",", "M", "=", "15", ")", ":", "\n", "    ", "bin_size", "=", "1", "/", "M", "\n", "return", "get_bin_info", "(", "confs_pred", ",", "y_pred", ",", "y_true", ",", "bin_size", "=", "bin_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.remove_edges.utils.get_bin_info": [[292, 311], ["numpy.arange", "utils.compute_acc_bin", "accuracies.append", "confidences.append", "bin_lengths.append"], "function", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.utils.compute_acc_bin"], ["", "def", "get_bin_info", "(", "conf", ",", "pred", ",", "true", ",", "bin_size", ")", ":", "\n", "    ", "\"\"\"\n    Get accuracy, confidence and elements in bin information for all the bins.\n    \"\"\"", "\n", "upper_bounds", "=", "np", ".", "arange", "(", "bin_size", ",", "1", "+", "bin_size", ",", "bin_size", ")", "\n", "\n", "accuracies", "=", "[", "]", "\n", "confidences", "=", "[", "]", "\n", "bin_lengths", "=", "[", "]", "\n", "\n", "for", "conf_thresh", "in", "upper_bounds", ":", "\n", "        ", "acc", ",", "avg_conf", ",", "len_bin", "=", "compute_acc_bin", "(", "\n", "conf_thresh", "-", "bin_size", ",", "conf_thresh", ",", "conf", ",", "pred", ",", "true", "\n", ")", "\n", "accuracies", ".", "append", "(", "acc", ")", "\n", "confidences", ".", "append", "(", "avg_conf", ")", "\n", "bin_lengths", ".", "append", "(", "len_bin", ")", "\n", "\n", "", "return", "accuracies", ",", "confidences", ",", "bin_lengths", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.remove_edges.utils.compute_acc_bin": [[313, 334], ["len", "len", "len", "zip", "sum", "float"], "function", ["None"], ["", "def", "compute_acc_bin", "(", "conf_thresh_lower", ",", "conf_thresh_upper", ",", "conf", ",", "pred", ",", "true", ")", ":", "\n", "    ", "\"\"\"\n    Computes accuracy and average confidence for bin.\n    \"\"\"", "\n", "filtered_tuples", "=", "[", "\n", "x", "\n", "for", "x", "in", "zip", "(", "pred", ",", "true", ",", "conf", ")", "\n", "if", "x", "[", "2", "]", ">", "conf_thresh_lower", "and", "x", "[", "2", "]", "<=", "conf_thresh_upper", "\n", "]", "\n", "if", "len", "(", "filtered_tuples", ")", "<", "1", ":", "\n", "        ", "return", "0", ",", "0", ",", "0", "\n", "", "else", ":", "\n", "        ", "correct", "=", "len", "(", "\n", "[", "x", "for", "x", "in", "filtered_tuples", "if", "x", "[", "0", "]", "==", "x", "[", "1", "]", "]", "\n", ")", "# How many correct labels", "\n", "len_bin", "=", "len", "(", "filtered_tuples", ")", "# How many elements fall into given bin", "\n", "avg_conf", "=", "(", "\n", "sum", "(", "[", "x", "[", "2", "]", "for", "x", "in", "filtered_tuples", "]", ")", "/", "len_bin", "\n", ")", "# Avg confidence of BIN", "\n", "accuracy", "=", "float", "(", "correct", ")", "/", "len_bin", "\n", "return", "accuracy", ",", "avg_conf", ",", "len_bin", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.remove_edges.utils.rel_diagram_sub": [[336, 395], ["matplotlib.plot", "numpy.arange", "numpy.array", "numpy.array", "ax.bar", "ax.bar", "ax.text", "ax.set_aspect", "ax.plot", "ax.legend", "ax.legend", "ax.set_xlim", "ax.set_ylim", "ax.set_title", "ax.set_xlabel", "ax.set_ylabel", "ax.xaxis.set_tick_params", "ax.yaxis.set_tick_params", "numpy.arange", "numpy.arange", "round", "gnn_name.upper"], "function", ["None"], ["", "", "def", "rel_diagram_sub", "(", "\n", "accs", ",", "\n", "confs", ",", "\n", "ax", ",", "\n", "M", "=", "15", ",", "\n", "name", "=", "\"Reliability Diagram\"", ",", "\n", "xname", "=", "\"\"", ",", "\n", "yname", "=", "\"\"", ",", "\n", "ece", "=", "None", ",", "\n", "data_name", "=", "None", ",", "\n", "gnn_name", "=", "None", ",", "\n", ")", ":", "\n", "    ", "plt", ".", "plot", "(", "\n", "np", ".", "arange", "(", "0", ",", "1", ",", "0.1", ")", ",", "np", ".", "arange", "(", "0", ",", "1", ",", "0.1", ")", ",", "linestyle", "=", "\"dashed\"", ",", "color", "=", "\"black\"", "\n", ")", "\n", "\n", "bin_size", "=", "1", "/", "M", "\n", "# Center of each bin", "\n", "positions", "=", "np", ".", "arange", "(", "0", "+", "bin_size", "/", "2", ",", "1", "+", "bin_size", "/", "2", ",", "bin_size", ")", "\n", "outputs", "=", "np", ".", "array", "(", "confs", ")", "\n", "acc", "=", "np", ".", "array", "(", "accs", ")", "\n", "# Bars with outputs", "\n", "output_plt", "=", "ax", ".", "bar", "(", "\n", "positions", ",", "acc", ",", "width", "=", "bin_size", ",", "edgecolor", "=", "\"black\"", ",", "color", "=", "\"blue\"", ",", "zorder", "=", "0", "\n", ")", "\n", "# Plot gap first, so its below everything", "\n", "gap_plt", "=", "ax", ".", "bar", "(", "\n", "positions", ",", "\n", "outputs", "-", "acc", ",", "\n", "bottom", "=", "acc", ",", "\n", "width", "=", "bin_size", ",", "\n", "edgecolor", "=", "\"red\"", ",", "\n", "hatch", "=", "\"/\"", ",", "\n", "color", "=", "\"red\"", ",", "\n", "alpha", "=", "0.3", ",", "\n", "linewidth", "=", "2", ",", "\n", "label", "=", "\"Gap\"", ",", "\n", "zorder", "=", "3", ",", "\n", ")", "\n", "ax", ".", "text", "(", "\n", "0.55", ",", "\n", "0.1", ",", "\n", "\"ECE = {}%\"", ".", "format", "(", "round", "(", "ece", "*", "100", ",", "1", ")", ")", ",", "\n", "size", "=", "14", ",", "\n", "backgroundcolor", "=", "\"grey\"", ",", "\n", ")", "\n", "\n", "# Line plot with center line.", "\n", "ax", ".", "set_aspect", "(", "\"equal\"", ")", "\n", "ax", ".", "plot", "(", "[", "0", ",", "1", "]", ",", "[", "0", ",", "1", "]", ",", "linestyle", "=", "\"--\"", ",", "color", "=", "\"grey\"", ")", "\n", "ax", ".", "legend", "(", "handles", "=", "[", "gap_plt", ",", "output_plt", "]", ")", "\n", "ax", ".", "legend", "(", "loc", "=", "2", ",", "prop", "=", "{", "\"size\"", ":", "14", "}", ")", "\n", "ax", ".", "set_xlim", "(", "0", ",", "1", ")", "\n", "ax", ".", "set_ylim", "(", "0", ",", "1", ")", "\n", "ax", ".", "set_title", "(", "\"{} on {}\"", ".", "format", "(", "gnn_name", ".", "upper", "(", ")", ",", "data_name", ")", ",", "fontsize", "=", "14", ")", "\n", "ax", ".", "set_xlabel", "(", "xname", ",", "fontsize", "=", "14", ",", "color", "=", "\"black\"", ")", "\n", "ax", ".", "set_ylabel", "(", "yname", ",", "fontsize", "=", "14", ",", "color", "=", "\"black\"", ")", "\n", "ax", ".", "xaxis", ".", "set_tick_params", "(", "labelsize", "=", "13", ")", "\n", "ax", ".", "yaxis", ".", "set_tick_params", "(", "labelsize", "=", "13", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.remove_edges.utils.conf_histogram_sub": [[397, 435], ["numpy.array", "numpy.array", "numpy.arange", "ax.bar", "ax.plot", "ax.plot", "ax.legend", "ax.set_xlim", "ax.set_ylim", "ax.set_title", "ax.set_xlabel", "ax.set_ylabel", "ax.xaxis.set_tick_params", "ax.yaxis.set_tick_params", "numpy.array", "numpy.array().sum", "gnn_name.upper", "numpy.array"], "function", ["None"], ["", "def", "conf_histogram_sub", "(", "\n", "accs", ",", "\n", "confs", ",", "\n", "nums", ",", "\n", "ax", ",", "\n", "M", "=", "15", ",", "\n", "name", "=", "\"Reliability Diagram\"", ",", "\n", "xname", "=", "\"\"", ",", "\n", "yname", "=", "\"\"", ",", "\n", "ece", "=", "None", ",", "\n", "data_name", "=", "None", ",", "\n", "gnn_name", "=", "None", ",", "\n", ")", ":", "\n", "    ", "acc", "=", "np", ".", "array", "(", "accs", ")", "\n", "conf", "=", "np", ".", "array", "(", "confs", ")", "\n", "num", "=", "np", ".", "array", "(", "nums", ")", "/", "np", ".", "array", "(", "nums", ")", ".", "sum", "(", ")", "\n", "bin_size", "=", "1", "/", "M", "\n", "# Center of each bin", "\n", "positions", "=", "np", ".", "arange", "(", "0", "+", "bin_size", "/", "2", ",", "1", "+", "bin_size", "/", "2", ",", "bin_size", ")", "\n", "# Bars with nums", "\n", "output_plt", "=", "ax", ".", "bar", "(", "\n", "positions", ",", "num", ",", "width", "=", "bin_size", ",", "edgecolor", "=", "\"black\"", ",", "color", "=", "\"blue\"", ",", "zorder", "=", "0", "\n", ")", "\n", "ave_conf", "=", "(", "conf", "*", "num", ")", ".", "sum", "(", ")", "\n", "ax", ".", "plot", "(", "\n", "[", "ave_conf", ",", "ave_conf", "]", ",", "[", "0", ",", "1", "]", ",", "linestyle", "=", "\"-\"", ",", "color", "=", "\"blue\"", ",", "label", "=", "\"Avg. conf.\"", "\n", ")", "\n", "ave_acc", "=", "(", "acc", "*", "num", ")", ".", "sum", "(", ")", "\n", "ax", ".", "plot", "(", "[", "ave_acc", ",", "ave_acc", "]", ",", "[", "0", ",", "1", "]", ",", "linestyle", "=", "\"--\"", ",", "color", "=", "\"red\"", ",", "label", "=", "\"Acc.\"", ")", "\n", "ax", ".", "legend", "(", "loc", "=", "2", ",", "prop", "=", "{", "\"size\"", ":", "14", "}", ")", "\n", "ax", ".", "set_xlim", "(", "0", ",", "1", ")", "\n", "ax", ".", "set_ylim", "(", "0", ",", "1", ")", "\n", "ax", ".", "set_title", "(", "\"{} on {}\"", ".", "format", "(", "gnn_name", ".", "upper", "(", ")", ",", "data_name", ")", ",", "fontsize", "=", "14", ")", "\n", "ax", ".", "set_xlabel", "(", "xname", ",", "fontsize", "=", "14", ",", "color", "=", "\"black\"", ")", "\n", "ax", ".", "set_ylabel", "(", "yname", ",", "fontsize", "=", "14", ",", "color", "=", "\"black\"", ")", "\n", "ax", ".", "xaxis", ".", "set_tick_params", "(", "labelsize", "=", "13", ")", "\n", "ax", ".", "yaxis", ".", "set_tick_params", "(", "labelsize", "=", "13", ")", "\n", "return", "ave_conf", ",", "ave_acc", "\n", "", ""]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.remove_edges.get_dataset.get_planetoid_dataset": [[5, 10], ["torch_geometric.datasets.Planetoid", "torch_geometric.NormalizeFeatures"], "function", ["None"], ["def", "get_planetoid_dataset", "(", "data_name", ",", "normalize_features", "=", "True", ")", ":", "\n", "    ", "dataset", "=", "Planetoid", "(", "root", "=", "\"/tmp/\"", "+", "data_name", ",", "name", "=", "data_name", ")", "\n", "if", "normalize_features", ":", "\n", "        ", "dataset", ".", "transform", "=", "T", ".", "NormalizeFeatures", "(", ")", "\n", "", "return", "dataset", "\n", "", ""]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.remove_edges.args.get_args": [[8, 21], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "get_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"--dataset\"", ",", "type", "=", "str", ",", "choices", "=", "datasets", ")", "\n", "parser", ".", "add_argument", "(", "\"--model\"", ",", "type", "=", "str", ",", "choices", "=", "models", ")", "\n", "parser", ".", "add_argument", "(", "\"--num_runs\"", ",", "type", "=", "int", ",", "default", "=", "10", ")", "\n", "parser", ".", "add_argument", "(", "\"--epochs\"", ",", "type", "=", "int", ",", "default", "=", "200", ")", "\n", "parser", ".", "add_argument", "(", "\"--early_stopping\"", ",", "type", "=", "bool", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "\"--patience\"", ",", "type", "=", "int", ",", "default", "=", "10", ")", "\n", "parser", ".", "add_argument", "(", "\"--add_cal_loss\"", ",", "type", "=", "bool", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "\"--alpha\"", ",", "type", "=", "float", ",", "default", "=", "0.98", ")", "\n", "parser", ".", "add_argument", "(", "\"--lmbda\"", ",", "type", "=", "float", ",", "default", "=", "1.0", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "", ""]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.depth_width.models.GCNStack.__init__": [[7, 16], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "models.GCNStack.convs.append", "range", "models.GCNStack.convs.append", "models.GCNStack.build_conv_model", "models.GCNStack.convs.append", "models.GCNStack.build_conv_model", "models.GCNStack.build_conv_model"], "methods", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.metacal.metacal.MetaCalCoverageAcc.__init__", "home.repos.pwc.inspect_result.liu-yushan_calgnn.depth_width.models.GATStack.build_conv_model", "home.repos.pwc.inspect_result.liu-yushan_calgnn.depth_width.models.GATStack.build_conv_model", "home.repos.pwc.inspect_result.liu-yushan_calgnn.depth_width.models.GATStack.build_conv_model"], ["\n", "\n", "class", "GCN", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "dataset", ",", "nhid", ",", "dropout", ")", ":", "\n", "        ", "super", "(", "GCN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gc1", "=", "GCNConv", "(", "dataset", ".", "num_features", ",", "nhid", ")", "\n", "self", ".", "gc2", "=", "GCNConv", "(", "nhid", ",", "dataset", ".", "num_classes", ")", "\n", "self", ".", "dropout", "=", "dropout", "\n", "\n", "", "def", "reset_parameters", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.depth_width.models.GCNStack.build_conv_model": [[17, 19], ["torch_geometric.nn.GCNConv"], "methods", ["None"], ["        ", "self", ".", "gc1", ".", "reset_parameters", "(", ")", "\n", "self", ".", "gc2", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.depth_width.models.GCNStack.reset_parameters": [[20, 23], ["range", "models.GCNStack.convs[].reset_parameters"], "methods", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.models.APPNPNet.reset_parameters"], ["", "def", "forward", "(", "self", ",", "data", ",", "edge_index", ")", ":", "\n", "        ", "x", "=", "data", ".", "x", "\n", "a", "=", "edge_index", ".", "to", "(", "x", ".", "device", ")", "\n", "x", "=", "self", ".", "gc1", "(", "x", ",", "a", ")", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.depth_width.models.GCNStack.forward": [[24, 36], ["torch.relu", "torch.relu", "torch.dropout", "torch.dropout", "range", "torch.log_softmax", "torch.log_softmax", "torch.relu", "torch.relu", "torch.dropout", "torch.dropout"], "methods", ["None"], ["x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "self", ".", "gc2", "(", "x", ",", "a", ")", "\n", "return", "F", ".", "log_softmax", "(", "x", ",", "dim", "=", "1", ")", "\n", "\n", "\n", "", "", "class", "GAT", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "dataset", ",", "nhid", ",", "first_heads", ",", "output_heads", ",", "dropout", ")", ":", "\n", "        ", "super", "(", "GAT", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gc1", "=", "GATConv", "(", "\n", "dataset", ".", "num_features", ",", "nhid", ",", "heads", "=", "first_heads", ",", "dropout", "=", "dropout", "\n", ")", "\n", "self", ".", "gc2", "=", "GATConv", "(", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.depth_width.models.GATStack.__init__": [[39, 48], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "models.GATStack.convs.append", "range", "models.GATStack.convs.append", "torch_geometric.nn.GATConv", "models.GATStack.convs.append", "models.GATStack.build_conv_model", "models.GATStack.build_conv_model"], "methods", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.metacal.metacal.MetaCalCoverageAcc.__init__", "home.repos.pwc.inspect_result.liu-yushan_calgnn.depth_width.models.GATStack.build_conv_model", "home.repos.pwc.inspect_result.liu-yushan_calgnn.depth_width.models.GATStack.build_conv_model"], ["heads", "=", "output_heads", ",", "\n", "concat", "=", "False", ",", "\n", "dropout", "=", "dropout", ",", "\n", ")", "\n", "self", ".", "dropout", "=", "dropout", "\n", "\n", "", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "self", ".", "gc1", ".", "reset_parameters", "(", ")", "\n", "self", ".", "gc2", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.depth_width.models.GATStack.build_conv_model": [[49, 51], ["torch_geometric.nn.GATConv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "data", ",", "edge_index", ")", ":", "\n", "        ", "x", "=", "data", ".", "x", "\n", "a", "=", "edge_index", ".", "to", "(", "x", ".", "device", ")", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.depth_width.models.GATStack.reset_parameters": [[52, 55], ["range", "models.GATStack.convs[].reset_parameters"], "methods", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.models.APPNPNet.reset_parameters"], ["x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "self", ".", "gc1", "(", "x", ",", "a", ")", "\n", "x", "=", "F", ".", "elu", "(", "x", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.depth_width.models.GATStack.forward": [[56, 68], ["torch.relu", "torch.relu", "torch.dropout", "torch.dropout", "range", "torch.log_softmax", "torch.log_softmax", "torch.relu", "torch.relu", "torch.dropout", "torch.dropout"], "methods", ["None"], ["x", "=", "self", ".", "gc2", "(", "x", ",", "a", ")", "\n", "return", "F", ".", "log_softmax", "(", "x", ",", "dim", "=", "1", ")", "\n", "\n", "\n", "", "", "class", "GAT_GCNParameters", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "dataset", ",", "nhid", "=", "8", ",", "first_heads", "=", "8", ",", "output_heads", "=", "1", ",", "dropout", "=", "0.", ")", ":", "\n", "        ", "super", "(", "GAT_GCNParameters", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gc1", "=", "GATConv", "(", "dataset", ".", "num_features", ",", "nhid", ",", "heads", "=", "first_heads", ")", "\n", "self", ".", "gc2", "=", "GATConv", "(", "\n", "nhid", "*", "first_heads", ",", "dataset", ".", "num_classes", ",", "heads", "=", "output_heads", ",", "concat", "=", "False", ",", "\n", ")", "\n", "self", ".", "dropout", "=", "dropout", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.depth_width.models.GCN_width.__init__": [[71, 75], ["torch.Module.__init__", "torch_geometric.nn.GCNConv", "torch_geometric.nn.GCNConv"], "methods", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.metacal.metacal.MetaCalCoverageAcc.__init__"], ["self", ".", "gc2", ".", "reset_parameters", "(", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "data", ",", "edge_index", ")", ":", "\n", "        ", "x", "=", "data", ".", "x", "\n", "a", "=", "edge_index", ".", "to", "(", "x", ".", "device", ")", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.depth_width.models.GCN_width.reset_parameters": [[76, 79], ["models.GCN_width.gc1.reset_parameters", "models.GCN_width.gc2.reset_parameters"], "methods", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.models.APPNPNet.reset_parameters", "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.models.APPNPNet.reset_parameters"], ["x", "=", "self", ".", "gc1", "(", "x", ",", "a", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "self", ".", "gc2", "(", "x", ",", "a", ")", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.depth_width.models.GCN_width.forward": [[80, 86], ["models.GCN_width.gc1", "torch.relu", "torch.relu", "models.GCN_width.gc2", "torch.log_softmax", "torch.log_softmax"], "methods", ["None"], ["return", "F", ".", "log_softmax", "(", "x", ",", "dim", "=", "1", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.depth_width.models.GAT_width.__init__": [[89, 94], ["torch.Module.__init__", "torch_geometric.nn.GATConv", "torch_geometric.nn.GATConv"], "methods", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.metacal.metacal.MetaCalCoverageAcc.__init__"], []], "home.repos.pwc.inspect_result.liu-yushan_calgnn.depth_width.models.GAT_width.reset_parameters": [[96, 99], ["models.GAT_width.gc1.reset_parameters", "models.GAT_width.gc2.reset_parameters"], "methods", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.models.APPNPNet.reset_parameters", "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.models.APPNPNet.reset_parameters"], []], "home.repos.pwc.inspect_result.liu-yushan_calgnn.depth_width.models.GAT_width.forward": [[100, 106], ["models.GAT_width.gc1", "torch.elu", "torch.elu", "models.GAT_width.gc2", "torch.log_softmax", "torch.log_softmax"], "methods", ["None"], []], "home.repos.pwc.inspect_result.liu-yushan_calgnn.depth_width.width.run": [[14, 65], ["torch.optim.Adam", "range", "models.GCN_width", "models.GAT_width.parameters", "utils.training", "torch.device", "models.GAT_width.to", "utils.cal_eval_model", "res_uncal.append", "numpy.mean", "numpy.sqrt", "models.GAT_width", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "torch.cuda.is_available", "numpy.var", "numpy.var", "numpy.var", "numpy.var"], "function", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.utils.training", "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.utils.cal_eval_model"], ["def", "run", "(", "width_layer", ",", "dataset", ",", "args", ")", ":", "\n", "    ", "if", "args", ".", "model", "==", "\"gcn\"", ":", "\n", "        ", "gnn", "=", "GCN_width", "(", "dataset", ",", "nhid", "=", "width_layer", ")", "\n", "lr", "=", "0.01", "\n", "wd", "=", "5e-4", "\n", "", "elif", "args", ".", "model", "==", "\"gat\"", ":", "\n", "        ", "if", "dataset", ".", "name", "in", "[", "\"Cora\"", ",", "\"Citeseer\"", "]", ":", "\n", "            ", "output_heads", "=", "1", "\n", "lr", "=", "0.005", "\n", "wd", "=", "5e-4", "\n", "", "elif", "dataset", ".", "name", "==", "\"Pubmed\"", ":", "\n", "            ", "output_heads", "=", "8", "\n", "lr", "=", "0.01", "\n", "wd", "=", "0.001", "\n", "", "gnn", "=", "GAT_width", "(", "dataset", ",", "output_heads", ",", "nhid", "=", "width_layer", ")", "\n", "", "optimizer", "=", "Adam", "(", "gnn", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ",", "weight_decay", "=", "wd", ")", "\n", "\n", "res_uncal", "=", "[", "]", "\n", "for", "num_run", "in", "range", "(", "args", ".", "num_runs", ")", ":", "\n", "        ", "test_acc", ",", "_", "=", "training", "(", "\n", "dataset", ",", "\n", "gnn", ",", "\n", "optimizer", ",", "\n", "args", ".", "model", ",", "\n", "args", ".", "dataset", ",", "\n", "args", ".", "epochs", ",", "\n", "args", ".", "add_cal_loss", ",", "\n", "args", ".", "early_stopping", ",", "\n", "args", ".", "patience", ",", "\n", "args", ".", "alpha", ",", "\n", "args", ".", "lmbda", ",", "\n", "num_run", ",", "\n", ")", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "gnn", ".", "to", "(", "device", ")", "\n", "ece", ",", "marg_ece", ",", "nll", ",", "test_acc", "=", "cal_eval_model", "(", "\n", "gnn", ",", "dataset", ",", "device", ",", "args", ".", "dataset", ",", "args", ".", "model", "\n", ")", "\n", "res_uncal", ".", "append", "(", "[", "ece", ",", "marg_ece", ",", "nll", ",", "test_acc", "]", ")", "\n", "\n", "# 0: mean, 1: std", "\n", "", "ece0", ",", "marg_ece0", ",", "nll0", ",", "test_acc0", "=", "np", ".", "mean", "(", "res_uncal", ",", "axis", "=", "0", ")", "*", "100", "\n", "nll0", "=", "nll0", "/", "100", "\n", "ece1", ",", "marg_ece1", ",", "nll1", ",", "test_acc1", "=", "(", "\n", "np", ".", "sqrt", "(", "np", ".", "var", "(", "res_uncal", ",", "axis", "=", "0", ")", "[", "0", "]", ")", "*", "100", ",", "\n", "np", ".", "sqrt", "(", "np", ".", "var", "(", "res_uncal", ",", "axis", "=", "0", ")", "[", "1", "]", ")", "*", "100", ",", "\n", "np", ".", "sqrt", "(", "np", ".", "var", "(", "res_uncal", ",", "axis", "=", "0", ")", "[", "2", "]", ")", ",", "\n", "np", ".", "sqrt", "(", "np", ".", "var", "(", "res_uncal", ",", "axis", "=", "0", ")", "[", "3", "]", ")", "*", "100", ",", "\n", ")", "\n", "\n", "return", "test_acc0", ",", "test_acc1", ",", "nll0", ",", "nll1", ",", "ece0", ",", "ece1", ",", "marg_ece0", ",", "marg_ece1", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.depth_width.metrics.split": [[23, 29], ["int", "len", "numpy.ceil", "len", "len", "range", "len", "len"], "function", ["None"], ["def", "split", "(", "sequence", ":", "List", "[", "T", "]", ",", "parts", ":", "int", ")", "->", "List", "[", "List", "[", "T", "]", "]", ":", "\n", "    ", "assert", "parts", "<=", "len", "(", "sequence", ")", "\n", "part_size", "=", "int", "(", "np", ".", "ceil", "(", "len", "(", "sequence", ")", "*", "1.0", "/", "parts", ")", ")", "\n", "assert", "part_size", "*", "parts", ">=", "len", "(", "sequence", ")", "\n", "assert", "(", "part_size", "-", "1", ")", "*", "parts", "<", "len", "(", "sequence", ")", "\n", "return", "[", "sequence", "[", "i", ":", "i", "+", "part_size", "]", "for", "i", "in", "range", "(", "0", ",", "len", "(", "sequence", ")", ",", "part_size", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.depth_width.metrics.get_equal_bins": [[31, 43], ["sorted", "metrics.split", "range", "sorted.append", "sorted", "sorted.append", "list", "len", "set"], "function", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.split"], ["", "def", "get_equal_bins", "(", "probs", ":", "List", "[", "float", "]", ",", "num_bins", ":", "int", "=", "10", ")", "->", "Bins", ":", "\n", "    ", "\"\"\"Get bins that contain approximately an equal number of data points.\"\"\"", "\n", "sorted_probs", "=", "sorted", "(", "probs", ")", "\n", "binned_data", "=", "split", "(", "sorted_probs", ",", "num_bins", ")", "\n", "bins", ":", "Bins", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "binned_data", ")", "-", "1", ")", ":", "\n", "        ", "last_prob", "=", "binned_data", "[", "i", "]", "[", "-", "1", "]", "\n", "next_first_prob", "=", "binned_data", "[", "i", "+", "1", "]", "[", "0", "]", "\n", "bins", ".", "append", "(", "(", "last_prob", "+", "next_first_prob", ")", "/", "2.0", ")", "\n", "", "bins", ".", "append", "(", "1.0", ")", "\n", "bins", "=", "sorted", "(", "list", "(", "set", "(", "bins", ")", ")", ")", "\n", "return", "bins", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.depth_width.metrics.get_equal_prob_bins": [[45, 47], ["range"], "function", ["None"], ["", "def", "get_equal_prob_bins", "(", "probs", ":", "List", "[", "float", "]", ",", "num_bins", ":", "int", "=", "10", ")", "->", "Bins", ":", "\n", "    ", "return", "[", "i", "*", "1.0", "/", "num_bins", "for", "i", "in", "range", "(", "1", ",", "num_bins", "+", "1", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.depth_width.metrics.get_discrete_bins": [[49, 57], ["sorted", "range", "bins.append", "numpy.unique", "bins.append", "len"], "function", ["None"], ["", "def", "get_discrete_bins", "(", "data", ":", "List", "[", "float", "]", ")", "->", "Bins", ":", "\n", "    ", "sorted_values", "=", "sorted", "(", "np", ".", "unique", "(", "data", ")", ")", "\n", "bins", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "sorted_values", ")", "-", "1", ")", ":", "\n", "        ", "mid", "=", "(", "sorted_values", "[", "i", "]", "+", "sorted_values", "[", "i", "+", "1", "]", ")", "/", "2.0", "\n", "bins", ".", "append", "(", "mid", ")", "\n", "", "bins", ".", "append", "(", "1.0", ")", "\n", "return", "bins", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.depth_width.metrics.get_top_calibration_error_uncertainties": [[62, 65], ["metrics.get_calibration_error_uncertainties"], "function", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.get_calibration_error_uncertainties"], ["", "def", "get_top_calibration_error_uncertainties", "(", "probs", ",", "labels", ",", "p", "=", "2", ",", "alpha", "=", "0.1", ")", ":", "\n", "    ", "return", "get_calibration_error_uncertainties", "(", "\n", "probs", ",", "labels", ",", "p", ",", "alpha", ",", "mode", "=", "\"top-label\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.depth_width.metrics.get_calibration_error_uncertainties": [[68, 99], ["list", "metrics.bootstrap_uncertainty", "zip", "zip", "metrics.get_calibration_error"], "function", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.bootstrap_uncertainty", "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.get_calibration_error"], ["", "def", "get_calibration_error_uncertainties", "(", "probs", ",", "labels", ",", "p", "=", "2", ",", "alpha", "=", "0.1", ",", "mode", "=", "\"marginal\"", ")", ":", "\n", "    ", "\"\"\"Get confidence intervals for the calibration error.\n    Args:\n        probs: A numpy array of shape (n,) or (n, k). If the shape is (n,) then\n            we assume binary classification and probs[i] is the model's confidence\n            the i-th example is 1. Otherwise, probs[i][j] is the model's confidence\n            the i-th example is j, with 0 <= probs[i][j] <= 1.\n        labels: A numpy array of shape (n,). labels[i] denotes the label of the i-th\n            example. In the binary classification setting, labels[i] must be 0 or 1,\n            in the k class setting labels[i] is an integer with 0 <= labels[i] <= k-1.\n        p: We measure the lp calibration error, where p >= 1 is an integer.\n        mode: 'marginal' or 'top-label'. 'marginal' calibration means we compute the\n            calibraton error for each class and then average them. Top-label means\n            we compute the calibration error of the prediction that the model is most\n            confident about.\n    Returns:\n        [lower, mid, upper]: 1-alpha confidence intervals produced by bootstrap resampling.\n        [lower, upper] represents the confidence interval. mid represents the median of\n        the bootstrap estimates. When p is not 2 (e.g. for the ECE where p = 1), this\n        can be used as a debiased estimate as well.\n    \"\"\"", "\n", "data", "=", "list", "(", "zip", "(", "probs", ",", "labels", ")", ")", "\n", "\n", "def", "ce_functional", "(", "data", ")", ":", "\n", "        ", "probs", ",", "labels", "=", "zip", "(", "*", "data", ")", "\n", "return", "get_calibration_error", "(", "probs", ",", "labels", ",", "p", ",", "debias", "=", "False", ",", "mode", "=", "mode", ")", "\n", "\n", "", "[", "lower", ",", "mid", ",", "upper", "]", "=", "bootstrap_uncertainty", "(", "\n", "data", ",", "ce_functional", ",", "num_samples", "=", "100", ",", "alpha", "=", "alpha", "\n", ")", "\n", "return", "[", "lower", ",", "mid", ",", "upper", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.depth_width.metrics.get_top_calibration_error": [[101, 103], ["metrics.get_calibration_error"], "function", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.get_calibration_error"], ["", "def", "get_top_calibration_error", "(", "probs", ",", "labels", ",", "p", "=", "2", ",", "debias", "=", "True", ")", ":", "\n", "    ", "return", "get_calibration_error", "(", "probs", ",", "labels", ",", "p", ",", "debias", ",", "mode", "=", "\"top-label\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.depth_width.metrics.get_calibration_error": [[105, 132], ["metrics.is_discrete", "metrics.get_binning_ce", "metrics.lower_bound_scaling_ce"], "function", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.is_discrete", "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.get_binning_ce", "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.lower_bound_scaling_ce"], ["", "def", "get_calibration_error", "(", "probs", ",", "labels", ",", "p", "=", "2", ",", "debias", "=", "True", ",", "mode", "=", "\"marginal\"", ")", ":", "\n", "    ", "\"\"\"Get the calibration error.\n    Args:\n        probs: A numpy array of shape (n,) or (n, k). If the shape is (n,) then\n            we assume binary classification and probs[i] is the model's confidence\n            the i-th example is 1. Otherwise, probs[i][j] is the model's confidence\n            the i-th example is j, with 0 <= probs[i][j] <= 1.\n        labels: A numpy array of shape (n,). labels[i] denotes the label of the i-th\n            example. In the binary classification setting, labels[i] must be 0 or 1,\n            in the k class setting labels[i] is an integer with 0 <= labels[i] <= k-1.\n        p: We measure the lp calibration error, where p >= 1 is an integer.\n        debias: Should we try to debias the estimates? For p = 2, the debiasing\n            has provably better sample complexity.\n        mode: 'marginal' or 'top-label'. 'marginal' calibration means we compute the\n            calibraton error for each class and then average them. Top-label means\n            we compute the calibration error of the prediction that the model is most\n            confident about.\n    Returns:\n        Estimated calibration error, a floating point value.\n        The method first uses heuristics to check if the values came from a scaling\n        method or binning method, and then calls the corresponding function. For\n        more explicit control, use lower_bound_scaling_ce or get_binning_ce.\n    \"\"\"", "\n", "if", "is_discrete", "(", "probs", ")", ":", "\n", "        ", "return", "get_binning_ce", "(", "probs", ",", "labels", ",", "p", ",", "debias", ",", "mode", "=", "mode", ")", "\n", "", "else", ":", "\n", "        ", "return", "lower_bound_scaling_ce", "(", "probs", ",", "labels", ",", "p", ",", "debias", ",", "mode", "=", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.depth_width.metrics.lower_bound_scaling_top_ce": [[134, 139], ["metrics.lower_bound_scaling_ce"], "function", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.lower_bound_scaling_ce"], ["", "", "def", "lower_bound_scaling_top_ce", "(", "\n", "probs", ",", "labels", ",", "p", "=", "2", ",", "debias", "=", "True", ",", "num_bins", "=", "15", ",", "binning_scheme", "=", "get_equal_bins", "\n", ")", ":", "\n", "    ", "return", "lower_bound_scaling_ce", "(", "\n", "probs", ",", "labels", ",", "p", ",", "debias", ",", "num_bins", ",", "binning_scheme", ",", "mode", "=", "\"top-label\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.depth_width.metrics.lower_bound_scaling_ce": [[142, 176], ["metrics._get_ce"], "function", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics._get_ce"], ["", "def", "lower_bound_scaling_ce", "(", "\n", "probs", ",", "\n", "labels", ",", "\n", "p", "=", "2", ",", "\n", "debias", "=", "True", ",", "\n", "num_bins", "=", "15", ",", "\n", "binning_scheme", "=", "get_equal_bins", ",", "\n", "mode", "=", "\"marginal\"", ",", "\n", ")", ":", "\n", "    ", "\"\"\"Lower bound the calibration error of a model with continuous outputs.\n    Args:\n        probs: A numpy array of shape (n,) or (n, k). If the shape is (n,) then\n            we assume binary classification and probs[i] is the model's confidence\n            the i-th example is 1. Otherwise, probs[i][j] is the model's confidence\n            the i-th example is j, with 0 <= probs[i][j] <= 1.\n        labels: A numpy array of shape (n,). labels[i] denotes the label of the i-th\n            example. In the binary classification setting, labels[i] must be 0 or 1,\n            in the k class setting labels[i] is an integer with 0 <= labels[i] <= k-1.\n        p: We measure the lp calibration error, where p >= 1 is an integer.\n        debias: Should we try to debias the estimates? For p = 2, the debiasing\n            has provably better sample complexity.\n        num_bins: Integer number of bins used to estimate the calibration error.\n        binning_scheme: A function that takes in a list of probabilities and number of bins,\n            and outputs a list of bins. See get_equal_bins, get_equal_prob_bins for examples.\n        mode: 'marginal' or 'top-label'. 'marginal' calibration means we compute the\n            calibraton error for each class and then average them. Top-label means\n            we compute the calibration error of the prediction that the model is most\n            confident about.\n    Returns:\n        Estimated lower bound for calibration error, a floating point value.\n        For scaling methods we cannot estimate the calibration error, but only a\n        lower bound.\n    \"\"\"", "\n", "return", "_get_ce", "(", "probs", ",", "labels", ",", "p", ",", "debias", ",", "num_bins", ",", "binning_scheme", ",", "mode", "=", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.depth_width.metrics.get_binning_top_ce": [[178, 180], ["metrics.get_binning_ce"], "function", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.get_binning_ce"], ["", "def", "get_binning_top_ce", "(", "probs", ",", "labels", ",", "p", "=", "2", ",", "debias", "=", "True", ",", "mode", "=", "\"marginal\"", ")", ":", "\n", "    ", "return", "get_binning_ce", "(", "probs", ",", "labels", ",", "p", ",", "debias", ",", "mode", "=", "\"top-label\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.depth_width.metrics.get_binning_ce": [[182, 204], ["metrics._get_ce"], "function", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics._get_ce"], ["", "def", "get_binning_ce", "(", "probs", ",", "labels", ",", "p", "=", "2", ",", "debias", "=", "True", ",", "mode", "=", "\"marginal\"", ")", ":", "\n", "    ", "\"\"\"Estimate the calibration error of a binned model.\n    Args:\n        probs: A numpy array of shape (n,) or (n, k). If the shape is (n,) then\n            we assume binary classification and probs[i] is the model's confidence\n            the i-th example is 1. Otherwise, probs[i][j] is the model's confidence\n            the i-th example is j, with 0 <= probs[i][j] <= 1.\n        labels: A numpy array of shape (n,). labels[i] denotes the label of the i-th\n            example. In the binary classification setting, labels[i] must be 0 or 1,\n            in the k class setting labels[i] is an integer with 0 <= labels[i] <= k-1.\n        p: We measure the lp calibration error, where p >= 1 is an integer.\n        debias: Should we try to debias the estimates? For p = 2, the debiasing\n            has provably better sample complexity.\n        mode: 'marginal' or 'top-label'. 'marginal' calibration means we compute the\n            calibraton error for each class and then average them. Top-label means\n            we compute the calibration error of the prediction that the model is most\n            confident about.\n    Returns:\n        Estimated calibration error, a floating point value.\n    \"\"\"", "\n", "return", "_get_ce", "(", "\n", "probs", ",", "labels", ",", "p", ",", "debias", ",", "None", ",", "binning_scheme", "=", "get_discrete_bins", ",", "mode", "=", "mode", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.depth_width.metrics.get_ece": [[207, 216], ["metrics.lower_bound_scaling_ce"], "function", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.lower_bound_scaling_ce"], ["", "def", "get_ece", "(", "probs", ",", "labels", ",", "debias", "=", "False", ",", "num_bins", "=", "15", ",", "mode", "=", "\"top-label\"", ")", ":", "\n", "    ", "return", "lower_bound_scaling_ce", "(", "\n", "probs", ",", "\n", "labels", ",", "\n", "p", "=", "1", ",", "\n", "debias", "=", "debias", ",", "\n", "num_bins", "=", "num_bins", ",", "\n", "binning_scheme", "=", "get_equal_prob_bins", ",", "\n", "mode", "=", "mode", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.depth_width.metrics._get_ce": [[219, 270], ["numpy.array", "numpy.array", "list", "ValueError", "numpy.issubdtype", "ValueError", "len", "ValueError", "ValueError", "len", "metrics._get_ce.ce_1d"], "function", ["None"], ["", "def", "_get_ce", "(", "probs", ",", "labels", ",", "p", ",", "debias", ",", "num_bins", ",", "binning_scheme", ",", "mode", "=", "\"marginal\"", ")", ":", "\n", "    ", "def", "ce_1d", "(", "probs", ",", "labels", ")", ":", "\n", "        ", "assert", "probs", ".", "shape", "==", "labels", ".", "shape", "\n", "assert", "len", "(", "probs", ".", "shape", ")", "==", "1", "\n", "data", "=", "list", "(", "zip", "(", "probs", ",", "labels", ")", ")", "\n", "if", "binning_scheme", "==", "get_discrete_bins", ":", "\n", "            ", "assert", "num_bins", "is", "None", "\n", "bins", "=", "binning_scheme", "(", "probs", ")", "\n", "", "else", ":", "\n", "            ", "bins", "=", "binning_scheme", "(", "probs", ",", "num_bins", "=", "num_bins", ")", "\n", "", "if", "p", "==", "2", "and", "debias", ":", "\n", "            ", "return", "unbiased_l2_ce", "(", "bin", "(", "data", ",", "bins", ")", ")", "\n", "", "elif", "debias", ":", "\n", "            ", "return", "normal_debiased_ce", "(", "bin", "(", "data", ",", "bins", ")", ",", "power", "=", "p", ")", "\n", "", "else", ":", "\n", "            ", "return", "plugin_ce", "(", "bin", "(", "data", ",", "bins", ")", ",", "power", "=", "p", ")", "\n", "\n", "", "", "if", "mode", "!=", "\"marginal\"", "and", "mode", "!=", "\"top-label\"", ":", "\n", "        ", "raise", "ValueError", "(", "\"mode must be 'marginal' or 'top-label'.\"", ")", "\n", "", "probs", "=", "np", ".", "array", "(", "probs", ")", "\n", "labels", "=", "np", ".", "array", "(", "labels", ")", "\n", "if", "not", "(", "np", ".", "issubdtype", "(", "labels", ".", "dtype", ",", "np", ".", "integer", ")", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\"labels should an integer numpy array.\"", ")", "\n", "", "if", "len", "(", "labels", ".", "shape", ")", "!=", "1", ":", "\n", "        ", "raise", "ValueError", "(", "\"labels should be a 1D numpy array.\"", ")", "\n", "", "if", "probs", ".", "shape", "[", "0", "]", "!=", "labels", ".", "shape", "[", "0", "]", ":", "\n", "        ", "raise", "ValueError", "(", "\"labels and probs should have the same number of entries.\"", ")", "\n", "", "if", "len", "(", "probs", ".", "shape", ")", "==", "1", ":", "\n", "# If 1D (2-class setting), compute the regular calibration error.", "\n", "        ", "if", "np", ".", "min", "(", "labels", ")", "!=", "0", "or", "np", ".", "max", "(", "labels", ")", "!=", "1", ":", "\n", "            ", "raise", "ValueError", "(", "\"If probs is 1D, each label should be 0 or 1.\"", ")", "\n", "", "return", "ce_1d", "(", "probs", ",", "labels", ")", "\n", "", "elif", "len", "(", "probs", ".", "shape", ")", "==", "2", ":", "\n", "        ", "if", "np", ".", "min", "(", "labels", ")", "<", "0", "or", "np", ".", "max", "(", "labels", ")", ">", "probs", ".", "shape", "[", "1", "]", "-", "1", ":", "\n", "            ", "raise", "ValueError", "(", "\"labels should be between 0 and num_classes - 1.\"", ")", "\n", "", "if", "mode", "==", "\"marginal\"", ":", "\n", "            ", "labels_one_hot", "=", "get_labels_one_hot", "(", "labels", ",", "k", "=", "probs", ".", "shape", "[", "1", "]", ")", "\n", "assert", "probs", ".", "shape", "==", "labels_one_hot", ".", "shape", "\n", "marginal_ces", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "probs", ".", "shape", "[", "1", "]", ")", ":", "\n", "                ", "cur_probs", "=", "probs", "[", ":", ",", "k", "]", "\n", "cur_labels", "=", "labels_one_hot", "[", ":", ",", "k", "]", "\n", "marginal_ces", ".", "append", "(", "ce_1d", "(", "cur_probs", ",", "cur_labels", ")", "**", "p", ")", "\n", "", "return", "np", ".", "mean", "(", "marginal_ces", ")", "**", "(", "1.0", "/", "p", ")", "\n", "", "elif", "mode", "==", "\"top-label\"", ":", "\n", "            ", "preds", "=", "get_top_predictions", "(", "probs", ")", "\n", "correct", "=", "(", "preds", "==", "labels", ")", ".", "astype", "(", "probs", ".", "dtype", ")", "\n", "confidences", "=", "get_top_probs", "(", "probs", ")", "\n", "return", "ce_1d", "(", "confidences", ",", "correct", ")", "\n", "", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"probs should be a 1D or 2D numpy array.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.depth_width.metrics.is_discrete": [[272, 283], ["numpy.array", "len", "metrics.enough_duplicates", "len", "range", "ValueError", "metrics.enough_duplicates"], "function", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.enough_duplicates", "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.enough_duplicates"], ["", "", "def", "is_discrete", "(", "probs", ")", ":", "\n", "    ", "probs", "=", "np", ".", "array", "(", "probs", ")", "\n", "if", "len", "(", "probs", ".", "shape", ")", "==", "1", ":", "\n", "        ", "return", "enough_duplicates", "(", "probs", ")", "\n", "", "elif", "len", "(", "probs", ".", "shape", ")", "==", "2", ":", "\n", "        ", "for", "k", "in", "range", "(", "probs", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "if", "not", "enough_duplicates", "(", "probs", "[", ":", ",", "k", "]", ")", ":", "\n", "                ", "return", "False", "\n", "", "", "return", "True", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"probs must be a 1D or 2D numpy array.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.depth_width.metrics.enough_duplicates": [[285, 291], ["metrics.get_discrete_bins", "len"], "function", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.get_discrete_bins"], ["", "", "def", "enough_duplicates", "(", "array", ")", ":", "\n", "# TODO: instead check that we have at least 2 values in each bin.", "\n", "    ", "num_bins", "=", "get_discrete_bins", "(", "array", ")", "\n", "if", "len", "(", "num_bins", ")", "<", "array", ".", "shape", "[", "0", "]", "/", "4.0", ":", "\n", "        ", "return", "True", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.depth_width.metrics.get_bin": [[296, 301], ["bisect.bisect_left"], "function", ["None"], ["", "def", "get_bin", "(", "pred_prob", ":", "float", ",", "bins", ":", "List", "[", "float", "]", ")", "->", "int", ":", "\n", "    ", "\"\"\"Get the index of the bin that pred_prob belongs in.\"\"\"", "\n", "assert", "0.0", "<=", "pred_prob", "<=", "1.0", "\n", "assert", "bins", "[", "-", "1", "]", "==", "1.0", "\n", "return", "bisect", ".", "bisect_left", "(", "bins", ",", "pred_prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.depth_width.metrics.bin": [[303, 305], ["metrics.fast_bin"], "function", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.fast_bin"], ["", "def", "bin", "(", "data", ":", "Data", ",", "bins", ":", "Bins", ")", ":", "\n", "    ", "return", "fast_bin", "(", "data", ",", "bins", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.depth_width.metrics.fast_bin": [[307, 315], ["numpy.array", "numpy.searchsorted", "numpy.argsort", "numpy.searchsorted", "numpy.split", "list", "range", "len"], "function", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.split"], ["", "def", "fast_bin", "(", "data", ",", "bins", ")", ":", "\n", "    ", "prob_label", "=", "np", ".", "array", "(", "data", ")", "\n", "bin_indices", "=", "np", ".", "searchsorted", "(", "bins", ",", "prob_label", "[", ":", ",", "0", "]", ")", "\n", "bin_sort_indices", "=", "np", ".", "argsort", "(", "bin_indices", ")", "\n", "sorted_bins", "=", "bin_indices", "[", "bin_sort_indices", "]", "\n", "splits", "=", "np", ".", "searchsorted", "(", "sorted_bins", ",", "list", "(", "range", "(", "1", ",", "len", "(", "bins", ")", ")", ")", ")", "\n", "binned_data", "=", "np", ".", "split", "(", "prob_label", "[", "bin_sort_indices", "]", ",", "splits", ")", "\n", "return", "binned_data", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.depth_width.metrics.equal_bin": [[317, 320], ["sorted", "metrics.split"], "function", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.split"], ["", "def", "equal_bin", "(", "data", ":", "Data", ",", "num_bins", ":", "int", ")", "->", "BinnedData", ":", "\n", "    ", "sorted_probs", "=", "sorted", "(", "data", ")", "\n", "return", "split", "(", "sorted_probs", ",", "num_bins", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.depth_width.metrics.difference_mean": [[325, 331], ["numpy.array", "numpy.mean", "numpy.mean"], "function", ["None"], ["", "def", "difference_mean", "(", "data", ":", "Data", ")", "->", "float", ":", "\n", "    ", "\"\"\"Returns average pred_prob - average label.\"\"\"", "\n", "data", "=", "np", ".", "array", "(", "data", ")", "\n", "ave_pred_prob", "=", "np", ".", "mean", "(", "data", "[", ":", ",", "0", "]", ")", "\n", "ave_label", "=", "np", ".", "mean", "(", "data", "[", ":", ",", "1", "]", ")", "\n", "return", "ave_pred_prob", "-", "ave_label", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.depth_width.metrics.get_bin_probs": [[333, 339], ["list", "sum", "list", "list", "map", "map", "abs", "sum"], "function", ["None"], ["", "def", "get_bin_probs", "(", "binned_data", ":", "BinnedData", ")", "->", "List", "[", "float", "]", ":", "\n", "    ", "bin_sizes", "=", "list", "(", "map", "(", "len", ",", "binned_data", ")", ")", "\n", "num_data", "=", "sum", "(", "bin_sizes", ")", "\n", "bin_probs", "=", "list", "(", "map", "(", "lambda", "b", ":", "b", "*", "1.0", "/", "num_data", ",", "bin_sizes", ")", ")", "\n", "assert", "abs", "(", "sum", "(", "bin_probs", ")", "-", "1.0", ")", "<", "eps", "\n", "return", "list", "(", "bin_probs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.depth_width.metrics.plugin_ce": [[341, 350], ["metrics.get_bin_probs", "list", "map", "numpy.dot", "len", "abs", "metrics.difference_mean"], "function", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.get_bin_probs", "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.difference_mean"], ["", "def", "plugin_ce", "(", "binned_data", ":", "BinnedData", ",", "power", "=", "2", ")", "->", "float", ":", "\n", "    ", "def", "bin_error", "(", "data", ":", "Data", ")", ":", "\n", "        ", "if", "len", "(", "data", ")", "==", "0", ":", "\n", "            ", "return", "0.0", "\n", "", "return", "abs", "(", "difference_mean", "(", "data", ")", ")", "**", "power", "\n", "\n", "", "bin_probs", "=", "get_bin_probs", "(", "binned_data", ")", "\n", "bin_errors", "=", "list", "(", "map", "(", "bin_error", ",", "binned_data", ")", ")", "\n", "return", "np", ".", "dot", "(", "bin_probs", ",", "bin_errors", ")", "**", "(", "1.0", "/", "power", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.depth_width.metrics.unbiased_square_ce": [[352, 367], ["metrics.get_bin_probs", "list", "numpy.dot", "list", "numpy.mean", "map", "len", "abs", "map", "metrics.difference_mean", "len"], "function", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.get_bin_probs", "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.difference_mean"], ["", "def", "unbiased_square_ce", "(", "binned_data", ":", "BinnedData", ")", "->", "float", ":", "\n", "# Note, this is not the l2 CE. It does not take the square root.", "\n", "    ", "def", "bin_error", "(", "data", ":", "Data", ")", ":", "\n", "        ", "if", "len", "(", "data", ")", "<", "2", ":", "\n", "            ", "return", "0.0", "\n", "# raise ValueError('Too few values in bin, use fewer bins or get more data.')", "\n", "", "biased_estimate", "=", "abs", "(", "difference_mean", "(", "data", ")", ")", "**", "2", "\n", "label_values", "=", "list", "(", "map", "(", "lambda", "x", ":", "x", "[", "1", "]", ",", "data", ")", ")", "\n", "mean_label", "=", "np", ".", "mean", "(", "label_values", ")", "\n", "variance", "=", "mean_label", "*", "(", "1.0", "-", "mean_label", ")", "/", "(", "len", "(", "data", ")", "-", "1.0", ")", "\n", "return", "biased_estimate", "-", "variance", "\n", "\n", "", "bin_probs", "=", "get_bin_probs", "(", "binned_data", ")", "\n", "bin_errors", "=", "list", "(", "map", "(", "bin_error", ",", "binned_data", ")", ")", "\n", "return", "np", ".", "dot", "(", "bin_probs", ",", "bin_errors", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.depth_width.metrics.unbiased_l2_ce": [[369, 371], ["max", "metrics.unbiased_square_ce"], "function", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.unbiased_square_ce"], ["", "def", "unbiased_l2_ce", "(", "binned_data", ":", "BinnedData", ")", "->", "float", ":", "\n", "    ", "return", "max", "(", "unbiased_square_ce", "(", "binned_data", ")", ",", "0.0", ")", "**", "0.5", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.depth_width.metrics.normal_debiased_ce": [[373, 398], ["numpy.array", "numpy.array", "numpy.sqrt", "numpy.array", "metrics.plugin_ce", "metrics.get_bin_probs", "range", "numpy.mean", "list", "numpy.min", "ValueError", "list", "list", "numpy.random.normal", "numpy.power", "numpy.power", "resampled_ces.append", "map", "map", "map", "len", "len", "numpy.abs", "numpy.dot", "numpy.mean", "numpy.mean"], "function", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.plugin_ce", "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.get_bin_probs"], ["", "def", "normal_debiased_ce", "(", "binned_data", ":", "BinnedData", ",", "power", "=", "1", ",", "resamples", "=", "1000", ")", "->", "float", ":", "\n", "    ", "bin_sizes", "=", "np", ".", "array", "(", "list", "(", "map", "(", "len", ",", "binned_data", ")", ")", ")", "\n", "if", "np", ".", "min", "(", "bin_sizes", ")", "<=", "1", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "\"Every bin must have at least 2 points for debiased estimator. \"", "\n", "\"Try adding the argument debias=False to your function call.\"", "\n", ")", "\n", "", "label_means", "=", "np", ".", "array", "(", "list", "(", "map", "(", "lambda", "l", ":", "np", ".", "mean", "(", "[", "b", "for", "a", ",", "b", "in", "l", "]", ")", ",", "binned_data", ")", ")", ")", "\n", "label_stddev", "=", "np", ".", "sqrt", "(", "label_means", "*", "(", "1", "-", "label_means", ")", "/", "bin_sizes", ")", "\n", "model_vals", "=", "np", ".", "array", "(", "list", "(", "map", "(", "lambda", "l", ":", "np", ".", "mean", "(", "[", "a", "for", "a", ",", "b", "in", "l", "]", ")", ",", "binned_data", ")", ")", ")", "\n", "assert", "label_means", ".", "shape", "==", "(", "len", "(", "binned_data", ")", ",", ")", "\n", "assert", "model_vals", ".", "shape", "==", "(", "len", "(", "binned_data", ")", ",", ")", "\n", "ce", "=", "plugin_ce", "(", "binned_data", ",", "power", "=", "power", ")", "\n", "bin_probs", "=", "get_bin_probs", "(", "binned_data", ")", "\n", "resampled_ces", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "resamples", ")", ":", "\n", "        ", "label_samples", "=", "np", ".", "random", ".", "normal", "(", "loc", "=", "label_means", ",", "scale", "=", "label_stddev", ")", "\n", "# TODO: we can also correct the bias for the model_vals, although this is", "\n", "# smaller.", "\n", "diffs", "=", "np", ".", "power", "(", "np", ".", "abs", "(", "label_samples", "-", "model_vals", ")", ",", "power", ")", "\n", "cur_ce", "=", "np", ".", "power", "(", "np", ".", "dot", "(", "bin_probs", ",", "diffs", ")", ",", "1.0", "/", "power", ")", "\n", "resampled_ces", ".", "append", "(", "cur_ce", ")", "\n", "", "mean_resampled", "=", "np", ".", "mean", "(", "resampled_ces", ")", "\n", "bias_corrected_ce", "=", "2", "*", "ce", "-", "mean_resampled", "\n", "return", "bias_corrected_ce", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.depth_width.metrics.eval_top_mse": [[403, 406], ["numpy.mean", "metrics.get_top_predictions", "numpy.square"], "function", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.get_top_predictions"], ["", "def", "eval_top_mse", "(", "calibrated_probs", ",", "probs", ",", "labels", ")", ":", "\n", "    ", "correct", "=", "get_top_predictions", "(", "probs", ")", "==", "labels", "\n", "return", "np", ".", "mean", "(", "np", ".", "square", "(", "calibrated_probs", "-", "correct", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.depth_width.metrics.eval_marginal_mse": [[408, 416], ["metrics.get_labels_one_hot", "numpy.array", "numpy.mean", "numpy.square"], "function", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.get_labels_one_hot"], ["", "def", "eval_marginal_mse", "(", "calibrated_probs", ",", "probs", ",", "labels", ")", ":", "\n", "    ", "assert", "calibrated_probs", ".", "shape", "==", "probs", ".", "shape", "\n", "k", "=", "probs", ".", "shape", "[", "1", "]", "\n", "labels_one_hot", "=", "get_labels_one_hot", "(", "np", ".", "array", "(", "labels", ")", ",", "k", ")", "\n", "return", "(", "\n", "np", ".", "mean", "(", "np", ".", "square", "(", "calibrated_probs", "-", "labels_one_hot", ")", ")", "\n", "*", "calibrated_probs", ".", "shape", "[", "1", "]", "\n", "/", "2.0", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.depth_width.metrics.resample": [[422, 425], ["numpy.random.choice", "list", "range", "len", "len"], "function", ["None"], ["", "def", "resample", "(", "data", ":", "List", "[", "T", "]", ")", "->", "List", "[", "T", "]", ":", "\n", "    ", "indices", "=", "np", ".", "random", ".", "choice", "(", "list", "(", "range", "(", "len", "(", "data", ")", ")", ")", ",", "size", "=", "len", "(", "data", ")", ",", "replace", "=", "True", ")", "\n", "return", "[", "data", "[", "i", "]", "for", "i", "in", "indices", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.depth_width.metrics.bootstrap_uncertainty": [[427, 442], ["estimator", "functional", "range", "bootstrap_estimates.append", "estimator", "numpy.percentile", "numpy.percentile", "numpy.percentile", "metrics.resample"], "function", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.resample"], ["", "def", "bootstrap_uncertainty", "(", "\n", "data", ":", "List", "[", "T", "]", ",", "functional", ",", "estimator", "=", "None", ",", "alpha", "=", "10.0", ",", "num_samples", "=", "1000", "\n", ")", "->", "Tuple", "[", "float", ",", "float", "]", ":", "\n", "    ", "\"\"\"Return boostrap uncertained for 1 - alpha percent confidence interval.\"\"\"", "\n", "if", "estimator", "is", "None", ":", "\n", "        ", "estimator", "=", "functional", "\n", "", "estimate", "=", "estimator", "(", "data", ")", "\n", "plugin", "=", "functional", "(", "data", ")", "\n", "bootstrap_estimates", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "num_samples", ")", ":", "\n", "        ", "bootstrap_estimates", ".", "append", "(", "estimator", "(", "resample", "(", "data", ")", ")", ")", "\n", "", "return", "(", "\n", "plugin", "+", "estimate", "-", "np", ".", "percentile", "(", "bootstrap_estimates", ",", "100", "-", "alpha", "/", "2.0", ")", ",", "\n", "plugin", "+", "estimate", "-", "np", ".", "percentile", "(", "bootstrap_estimates", ",", "50", ")", ",", "\n", "plugin", "+", "estimate", "-", "np", ".", "percentile", "(", "bootstrap_estimates", ",", "alpha", "/", "2.0", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.depth_width.metrics.precentile_bootstrap_uncertainty": [[445, 461], ["functional", "estimator", "range", "bootstrap_estimates.append", "estimator", "numpy.percentile", "numpy.percentile", "numpy.percentile", "metrics.resample", "numpy.percentile"], "function", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.resample"], ["", "def", "precentile_bootstrap_uncertainty", "(", "\n", "data", ":", "List", "[", "T", "]", ",", "functional", ",", "estimator", "=", "None", ",", "alpha", "=", "10.0", ",", "num_samples", "=", "1000", "\n", ")", "->", "Tuple", "[", "float", ",", "float", "]", ":", "\n", "    ", "\"\"\"Return boostrap uncertained for 1 - alpha percent confidence interval.\"\"\"", "\n", "if", "estimator", "is", "None", ":", "\n", "        ", "estimator", "=", "functional", "\n", "", "plugin", "=", "functional", "(", "data", ")", "\n", "estimate", "=", "estimator", "(", "data", ")", "\n", "bootstrap_estimates", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "num_samples", ")", ":", "\n", "        ", "bootstrap_estimates", ".", "append", "(", "estimator", "(", "resample", "(", "data", ")", ")", ")", "\n", "", "bias", "=", "2", "*", "np", ".", "percentile", "(", "bootstrap_estimates", ",", "50", ")", "-", "plugin", "-", "estimate", "\n", "return", "(", "\n", "np", ".", "percentile", "(", "bootstrap_estimates", ",", "alpha", "/", "2.0", ")", "-", "bias", ",", "\n", "np", ".", "percentile", "(", "bootstrap_estimates", ",", "50", ")", "-", "bias", ",", "\n", "np", ".", "percentile", "(", "bootstrap_estimates", ",", "100", "-", "alpha", "/", "2.0", ")", "-", "bias", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.depth_width.metrics.bootstrap_std": [[464, 472], ["range", "numpy.std", "bootstrap_estimates.append", "estimator", "metrics.resample"], "function", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.resample"], ["", "def", "bootstrap_std", "(", "\n", "data", ":", "List", "[", "T", "]", ",", "estimator", "=", "None", ",", "num_samples", "=", "100", "\n", ")", "->", "Tuple", "[", "float", ",", "float", "]", ":", "\n", "    ", "\"\"\"Return boostrap uncertained for 1 - alpha percent confidence interval.\"\"\"", "\n", "bootstrap_estimates", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "num_samples", ")", ":", "\n", "        ", "bootstrap_estimates", ".", "append", "(", "estimator", "(", "resample", "(", "data", ")", ")", ")", "\n", "", "return", "np", ".", "std", "(", "bootstrap_estimates", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.depth_width.metrics.get_platt_scaler": [[477, 495], ["sklearn.linear_model.LogisticRegression", "np.log.astype", "numpy.expand_dims", "numpy.clip", "numpy.log", "sklearn.linear_model.LogisticRegression.fit", "numpy.array", "numpy.clip", "numpy.log", "numpy.exp"], "function", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.metacal.metacal.MetaCalCoverageAcc.fit"], ["", "def", "get_platt_scaler", "(", "model_probs", ",", "labels", ")", ":", "\n", "    ", "clf", "=", "LogisticRegression", "(", "C", "=", "1e10", ",", "solver", "=", "\"lbfgs\"", ")", "\n", "eps", "=", "1e-12", "\n", "model_probs", "=", "model_probs", ".", "astype", "(", "dtype", "=", "np", ".", "float64", ")", "\n", "model_probs", "=", "np", ".", "expand_dims", "(", "model_probs", ",", "axis", "=", "-", "1", ")", "\n", "model_probs", "=", "np", ".", "clip", "(", "model_probs", ",", "eps", ",", "1", "-", "eps", ")", "\n", "model_probs", "=", "np", ".", "log", "(", "model_probs", "/", "(", "1", "-", "model_probs", ")", ")", "\n", "clf", ".", "fit", "(", "model_probs", ",", "labels", ")", "\n", "\n", "def", "calibrator", "(", "probs", ")", ":", "\n", "        ", "x", "=", "np", ".", "array", "(", "probs", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "x", "=", "np", ".", "clip", "(", "x", ",", "eps", ",", "1", "-", "eps", ")", "\n", "x", "=", "np", ".", "log", "(", "x", "/", "(", "1", "-", "x", ")", ")", "\n", "x", "=", "x", "*", "clf", ".", "coef_", "[", "0", "]", "+", "clf", ".", "intercept_", "\n", "output", "=", "1", "/", "(", "1", "+", "np", ".", "exp", "(", "-", "x", ")", ")", "\n", "return", "output", "\n", "\n", "", "return", "calibrator", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.depth_width.metrics.get_histogram_calibrator": [[497, 520], ["zip", "numpy.array", "metrics.get_bin", "binned_values[].append", "numpy.mean", "metrics.get_histogram_calibrator.safe_mean"], "function", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.get_bin"], ["", "def", "get_histogram_calibrator", "(", "model_probs", ",", "values", ",", "bins", ")", ":", "\n", "    ", "binned_values", "=", "[", "[", "]", "for", "_", "in", "range", "(", "len", "(", "bins", ")", ")", "]", "\n", "for", "prob", ",", "value", "in", "zip", "(", "model_probs", ",", "values", ")", ":", "\n", "        ", "bin_idx", "=", "get_bin", "(", "prob", ",", "bins", ")", "\n", "binned_values", "[", "bin_idx", "]", ".", "append", "(", "float", "(", "value", ")", ")", "\n", "\n", "", "def", "safe_mean", "(", "values", ",", "bin_idx", ")", ":", "\n", "        ", "if", "len", "(", "values", ")", "==", "0", ":", "\n", "            ", "if", "bin_idx", "==", "0", ":", "\n", "                ", "return", "float", "(", "bins", "[", "0", "]", ")", "/", "2.0", "\n", "", "return", "float", "(", "bins", "[", "bin_idx", "]", "+", "bins", "[", "bin_idx", "-", "1", "]", ")", "/", "2.0", "\n", "", "return", "np", ".", "mean", "(", "values", ")", "\n", "\n", "", "bin_means", "=", "[", "\n", "safe_mean", "(", "values", ",", "bidx", ")", "for", "values", ",", "bidx", "in", "zip", "(", "binned_values", ",", "range", "(", "len", "(", "bins", ")", ")", ")", "\n", "]", "\n", "bin_means", "=", "np", ".", "array", "(", "bin_means", ")", "\n", "\n", "def", "calibrator", "(", "probs", ")", ":", "\n", "        ", "indices", "=", "np", ".", "searchsorted", "(", "bins", ",", "probs", ")", "\n", "return", "bin_means", "[", "indices", "]", "\n", "\n", "", "return", "calibrator", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.depth_width.metrics.get_discrete_calibrator": [[522, 524], ["metrics.get_histogram_calibrator"], "function", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.get_histogram_calibrator"], ["", "def", "get_discrete_calibrator", "(", "model_probs", ",", "bins", ")", ":", "\n", "    ", "return", "get_histogram_calibrator", "(", "model_probs", ",", "model_probs", ",", "bins", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.depth_width.metrics.save_test_probs_labels": [[529, 533], ["dataset.load_data", "model.predict", "pickle.dump", "open"], "function", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.metacal.utils.load_data", "home.repos.pwc.inspect_result.liu-yushan_calgnn.metacal.metacal.MetaCalCoverageAcc.predict"], ["", "def", "save_test_probs_labels", "(", "dataset", ",", "model", ",", "filename", ")", ":", "\n", "    ", "(", "x_train", ",", "y_train", ")", ",", "(", "x_test", ",", "y_test", ")", "=", "dataset", ".", "load_data", "(", ")", "\n", "probs", "=", "model", ".", "predict", "(", "x_test", ")", "\n", "pickle", ".", "dump", "(", "(", "probs", ",", "y_test", ")", ",", "open", "(", "filename", ",", "\"wb\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.depth_width.metrics.load_test_probs_labels": [[535, 543], ["pickle.load", "numpy.random.choice", "numpy.array", "numpy.array", "open", "len", "list", "range", "len", "len"], "function", ["None"], ["", "def", "load_test_probs_labels", "(", "filename", ")", ":", "\n", "    ", "probs", ",", "labels", "=", "pickle", ".", "load", "(", "open", "(", "filename", ",", "\"rb\"", ")", ")", "\n", "if", "len", "(", "labels", ".", "shape", ")", ">", "1", ":", "\n", "        ", "labels", "=", "labels", "[", ":", ",", "0", "]", "\n", "", "indices", "=", "np", ".", "random", ".", "choice", "(", "list", "(", "range", "(", "len", "(", "probs", ")", ")", ")", ",", "size", "=", "len", "(", "probs", ")", ",", "replace", "=", "False", ")", "\n", "probs", "=", "np", ".", "array", "(", "[", "probs", "[", "i", "]", "for", "i", "in", "indices", "]", ")", "\n", "labels", "=", "np", ".", "array", "(", "[", "labels", "[", "i", "]", "for", "i", "in", "indices", "]", ")", "\n", "return", "probs", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.depth_width.metrics.get_top_predictions": [[545, 547], ["numpy.argmax"], "function", ["None"], ["", "def", "get_top_predictions", "(", "probs", ")", ":", "\n", "    ", "return", "np", ".", "argmax", "(", "probs", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.depth_width.metrics.get_top_probs": [[549, 551], ["numpy.max"], "function", ["None"], ["", "def", "get_top_probs", "(", "probs", ")", ":", "\n", "    ", "return", "np", ".", "max", "(", "probs", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.depth_width.metrics.get_accuracy": [[553, 555], ["len", "sum"], "function", ["None"], ["", "def", "get_accuracy", "(", "probs", ",", "labels", ")", ":", "\n", "    ", "return", "sum", "(", "labels", "==", "predictions", ")", "*", "1.0", "/", "len", "(", "labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.depth_width.metrics.get_labels_one_hot": [[557, 564], ["numpy.zeros", "numpy.min", "numpy.max", "numpy.arange"], "function", ["None"], ["", "def", "get_labels_one_hot", "(", "labels", ",", "k", ")", ":", "\n", "    ", "assert", "np", ".", "min", "(", "labels", ")", ">=", "0", "\n", "assert", "np", ".", "max", "(", "labels", ")", "<=", "k", "-", "1", "\n", "num_labels", "=", "labels", ".", "shape", "[", "0", "]", "\n", "labels_one_hot", "=", "np", ".", "zeros", "(", "(", "num_labels", ",", "k", ")", ")", "\n", "labels_one_hot", "[", "np", ".", "arange", "(", "num_labels", ")", ",", "labels", "]", "=", "1", "\n", "return", "labels_one_hot", "\n", "", ""]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.depth_width.depth.run": [[14, 63], ["torch.optim.Adam", "range", "models.GCNStack", "models.GATStack.parameters", "utils.training", "torch.device", "models.GATStack.to", "utils.cal_eval_model", "res_uncal.append", "numpy.mean", "numpy.sqrt", "models.GATStack", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "torch.cuda.is_available", "numpy.var", "numpy.var", "numpy.var", "numpy.var"], "function", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.utils.training", "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.utils.cal_eval_model"], ["def", "run", "(", "num_layers", ",", "dataset", ",", "args", ")", ":", "\n", "    ", "if", "args", ".", "model", "==", "\"gcn\"", ":", "\n", "        ", "gnn", "=", "GCNStack", "(", "dataset", ",", "num_layers", ",", "hidden_dim", "=", "16", ")", "\n", "lr", "=", "0.01", "\n", "wd", "=", "5e-4", "\n", "", "elif", "args", ".", "model", "==", "\"gat\"", ":", "\n", "        ", "if", "dataset", ".", "name", "in", "[", "\"Cora\"", ",", "\"Citeseer\"", "]", ":", "\n", "            ", "lr", "=", "0.005", "\n", "wd", "=", "5e-4", "\n", "", "elif", "dataset", ".", "name", "==", "\"Pubmed\"", ":", "\n", "            ", "lr", "=", "0.01", "\n", "wd", "=", "0.001", "\n", "", "gnn", "=", "GATStack", "(", "dataset", ",", "num_layers", ",", "hidden_dim", "=", "16", ")", "\n", "", "optimizer", "=", "Adam", "(", "gnn", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ",", "weight_decay", "=", "wd", ")", "\n", "\n", "res_uncal", "=", "[", "]", "\n", "for", "num_run", "in", "range", "(", "args", ".", "num_runs", ")", ":", "\n", "        ", "test_acc", ",", "_", "=", "training", "(", "\n", "dataset", ",", "\n", "gnn", ",", "\n", "optimizer", ",", "\n", "args", ".", "model", ",", "\n", "args", ".", "dataset", ",", "\n", "args", ".", "epochs", ",", "\n", "args", ".", "add_cal_loss", ",", "\n", "args", ".", "early_stopping", ",", "\n", "args", ".", "patience", ",", "\n", "args", ".", "alpha", ",", "\n", "args", ".", "lmbda", ",", "\n", "num_run", ",", "\n", ")", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "gnn", ".", "to", "(", "device", ")", "\n", "ece", ",", "marg_ece", ",", "nll", ",", "test_acc", "=", "cal_eval_model", "(", "\n", "gnn", ",", "dataset", ",", "device", ",", "args", ".", "dataset", ",", "args", ".", "model", "\n", ")", "\n", "res_uncal", ".", "append", "(", "[", "ece", ",", "marg_ece", ",", "nll", ",", "test_acc", "]", ")", "\n", "\n", "# 0: mean, 1: std", "\n", "", "ece0", ",", "marg_ece0", ",", "nll0", ",", "test_acc0", "=", "np", ".", "mean", "(", "res_uncal", ",", "axis", "=", "0", ")", "*", "100", "\n", "nll0", "=", "nll0", "/", "100", "\n", "ece1", ",", "marg_ece1", ",", "nll1", ",", "test_acc1", "=", "(", "\n", "np", ".", "sqrt", "(", "np", ".", "var", "(", "res_uncal", ",", "axis", "=", "0", ")", "[", "0", "]", ")", "*", "100", ",", "\n", "np", ".", "sqrt", "(", "np", ".", "var", "(", "res_uncal", ",", "axis", "=", "0", ")", "[", "1", "]", ")", "*", "100", ",", "\n", "np", ".", "sqrt", "(", "np", ".", "var", "(", "res_uncal", ",", "axis", "=", "0", ")", "[", "2", "]", ")", ",", "\n", "np", ".", "sqrt", "(", "np", ".", "var", "(", "res_uncal", ",", "axis", "=", "0", ")", "[", "3", "]", ")", "*", "100", ",", "\n", ")", "\n", "\n", "return", "test_acc0", ",", "test_acc1", ",", "nll0", ",", "nll1", ",", "ece0", ",", "ece1", ",", "marg_ece0", ",", "marg_ece1", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.depth_width.utils.reproducibility_seed": [[13, 21], ["torch.manual_seed", "torch.manual_seed", "numpy.random.seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed"], "function", ["None"], ["def", "reproducibility_seed", "(", "a", ",", "b", ")", ":", "\n", "    ", "torch_init_seed", "=", "a", "\n", "torch", ".", "manual_seed", "(", "torch_init_seed", ")", "\n", "numpy_init_seed", "=", "b", "\n", "np", ".", "random", ".", "seed", "(", "numpy_init_seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "torch_init_seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.depth_width.utils.training": [[23, 125], ["torch.no_grad", "torch.no_grad", "torch.device", "torch.device", "gnn.reset_parameters", "torch.cuda.is_available", "torch.cuda.is_available", "float", "range", "gnn.train", "optimizer.zero_grad", "torch.nll_loss", "F.nll_loss.backward", "optimizer.step", "F.nll_loss.item", "gnn.eval", "torch.softmax", "data", "gnn.to", "data.to", "os.path.exists", "os.makedirs", "torch.cuda.synchronize", "torch.cuda.synchronize", "utils.training.training_step"], "function", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.models.APPNPNet.reset_parameters"], ["", "def", "training", "(", "\n", "dataset", ",", "\n", "gnn", ",", "\n", "optimizer", ",", "\n", "gnn_name", ",", "\n", "data_name", ",", "\n", "epochs", ",", "\n", "add_cal_loss", ",", "\n", "early_stopping", ",", "\n", "patience", ",", "\n", "alpha", ",", "\n", "lmbda", ",", "\n", "num_run", ",", "\n", "edge_index", ",", "\n", "save_model", "=", "False", ",", "\n", ")", ":", "\n", "    ", "data", "=", "dataset", "[", "0", "]", "\n", "avg_conf_list", ",", "avg_acc_list", "=", "[", "]", ",", "[", "]", "\n", "\n", "def", "training_step", "(", "\n", "data", ",", "alpha", ",", "lmbda", ",", "epoch", ",", "epochs", ",", "add_cal_loss", ",", "device", ",", "edge_index", "\n", ")", ":", "\n", "        ", "gnn", ".", "train", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "logits", "=", "gnn", "(", "data", ",", "edge_index", ")", "[", "data", ".", "train_mask", "]", "\n", "nll_loss", "=", "F", ".", "nll_loss", "(", "logits", ",", "data", ".", "y", "[", "data", ".", "train_mask", "]", ")", "\n", "if", "add_cal_loss", ":", "\n", "            ", "loss_cal", "=", "cal_loss", "(", "\n", "data", ".", "y", "[", "data", ".", "train_mask", "]", ",", "logits", ",", "lmbda", ",", "epoch", ",", "epochs", ",", "device", "\n", ")", "\n", "loss", "=", "alpha", "*", "nll_loss", "+", "(", "1.0", "-", "alpha", ")", "*", "loss_cal", "\n", "", "else", ":", "\n", "            ", "loss", "=", "nll_loss", "\n", "", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "return", "loss", ".", "item", "(", ")", "\n", "\n", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "test_step", "(", "data", ",", "edge_index", ")", ":", "\n", "        ", "gnn", ".", "eval", "(", ")", "\n", "(", "\n", "logits", ",", "\n", "logits_list", ",", "\n", "probs_list", ",", "\n", "accs_list", ",", "\n", "losses_list", ",", "\n", "y_pred_list", ",", "\n", "y_true_list", ",", "\n", ")", "=", "(", "gnn", "(", "data", ",", "edge_index", ")", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ")", "\n", "probs_pred", "=", "F", ".", "softmax", "(", "logits", ",", "dim", "=", "1", ")", "\n", "\n", "for", "_", ",", "mask", "in", "data", "(", "\"train_mask\"", ",", "\"val_mask\"", ",", "\"test_mask\"", ")", ":", "\n", "            ", "y_pred", "=", "logits", "[", "mask", "]", ".", "max", "(", "1", ")", "[", "1", "]", "\n", "loss", "=", "F", ".", "nll_loss", "(", "logits", "[", "mask", "]", ",", "data", ".", "y", "[", "mask", "]", ")", "\n", "acc", "=", "y_pred", ".", "eq", "(", "data", ".", "y", "[", "mask", "]", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "mask", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "logits_list", ".", "append", "(", "logits", "[", "mask", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "probs_list", ".", "append", "(", "probs_pred", "[", "mask", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "accs_list", ".", "append", "(", "acc", ")", "\n", "losses_list", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "y_pred_list", ".", "append", "(", "y_pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "y_true_list", ".", "append", "(", "data", ".", "y", "[", "mask", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "", "return", "logits_list", ",", "probs_list", ",", "accs_list", ",", "losses_list", ",", "y_pred_list", ",", "y_true_list", "\n", "\n", "", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "gnn", ",", "data", "=", "gnn", ".", "to", "(", "device", ")", ",", "data", ".", "to", "(", "device", ")", "\n", "gnn", ".", "reset_parameters", "(", ")", "\n", "\n", "checkpoints_path", "=", "\"checkpoints/{}_{}/\"", ".", "format", "(", "gnn_name", ",", "data_name", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "checkpoints_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "checkpoints_path", ")", "\n", "\n", "", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "\n", "", "best_val_acc", ",", "best_test_acc", "=", "0", ",", "0", "\n", "best_val_loss", "=", "float", "(", "\"inf\"", ")", "\n", "val_loss_history", "=", "[", "]", "\n", "patience_cur", "=", "patience", "\n", "\n", "for", "epoch", "in", "range", "(", "epochs", ")", ":", "\n", "        ", "training_step", "(", "\n", "data", ",", "alpha", ",", "lmbda", ",", "epoch", ",", "epochs", ",", "add_cal_loss", ",", "device", ",", "edge_index", "\n", ")", "\n", "(", "\n", "[", "logits_train", ",", "logits_val", ",", "logits_test", "]", ",", "\n", "[", "probs_train", ",", "probs_val", ",", "probs_test", "]", ",", "\n", "[", "train_acc", ",", "val_acc", ",", "test_acc", "]", ",", "\n", "[", "train_loss", ",", "val_loss", ",", "test_loss", "]", ",", "\n", "[", "y_pred_train", ",", "y_pred_val", ",", "y_pred_test", "]", ",", "\n", "[", "y_true_train", ",", "y_true_val", ",", "y_true_test", "]", ",", "\n", ")", "=", "test_step", "(", "data", ",", "edge_index", ")", "\n", "\n", "if", "val_loss", "<", "best_val_loss", ":", "\n", "            ", "best_val_loss", "=", "val_loss", "\n", "best_val_acc", "=", "val_acc", "\n", "best_test_acc", "=", "test_acc", "\n", "patience_cur", "=", "patience", "\n", "if", "save_model", ":", "\n", "                ", "torch", ".", "save", "(", "gnn", ".", "state_dict", "(", ")", ",", "checkpoints_path", "+", "str", "(", "num_run", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "patience_cur", "-=", "1", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.depth_width.utils.cal_loss": [[127, 195], ["torch.softmax", "utils.cal_loss.calculate_confidence_vec"], "function", ["None"], ["                ", "break", "\n", "\n", "", "", "", "return", "best_test_acc", ",", "best_val_acc", ",", "gnn", "\n", "\n", "\n", "", "def", "cal_loss", "(", "y_true", ",", "logits", ",", "lmbda", ",", "epoch", ",", "epochs", ",", "device", ")", ":", "\n", "    ", "def", "calculate_confidence_vec", "(", "confidence", ",", "y_pred", ",", "y_true", ",", "device", ",", "bin_num", "=", "15", ")", ":", "\n", "        ", "def", "compute_binned_acc_conf", "(", "\n", "conf_thresh_lower", ",", "conf_thresh_upper", ",", "conf", ",", "pred", ",", "true", ",", "device", "\n", ")", ":", "\n", "            ", "filtered_tuples", "=", "[", "\n", "x", "\n", "for", "x", "in", "zip", "(", "pred", ",", "true", ",", "conf", ")", "\n", "if", "x", "[", "2", "]", ">", "conf_thresh_lower", "and", "x", "[", "2", "]", "<=", "conf_thresh_upper", "\n", "]", "\n", "if", "len", "(", "filtered_tuples", ")", "<", "1", ":", "\n", "                ", "return", "(", "\n", "torch", ".", "tensor", "(", "0.0", ")", ".", "to", "(", "device", ")", ",", "\n", "torch", ".", "tensor", "(", "0.0", ",", "requires_grad", "=", "True", ")", ".", "to", "(", "device", ")", ",", "\n", "torch", ".", "tensor", "(", "0", ")", ".", "to", "(", "device", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "                ", "correct", "=", "len", "(", "\n", "[", "x", "for", "x", "in", "filtered_tuples", "if", "x", "[", "0", "]", "==", "x", "[", "1", "]", "]", "\n", ")", "# How many correct labels", "\n", "len_bin", "=", "torch", ".", "tensor", "(", "len", "(", "filtered_tuples", ")", ")", ".", "to", "(", "\n", "device", "\n", ")", "# How many elements fall into the given bin", "\n", "avg_conf", "=", "(", "\n", "torch", ".", "sum", "(", "torch", ".", "stack", "(", "[", "x", "[", "2", "]", "for", "x", "in", "filtered_tuples", "]", ")", ")", "/", "len_bin", "\n", ")", "# Avg confidence of bin", "\n", "accuracy", "=", "(", "torch", ".", "tensor", "(", "correct", ",", "dtype", "=", "torch", ".", "float32", ")", "/", "len_bin", ")", ".", "to", "(", "\n", "device", "\n", ")", "# Accuracy of bin", "\n", "", "return", "accuracy", ",", "avg_conf", ",", "len_bin", "\n", "\n", "", "bin_size", "=", "torch", ".", "tensor", "(", "1.0", "/", "bin_num", ")", "\n", "upper_bounds", "=", "torch", ".", "arange", "(", "bin_size", ",", "1", "+", "bin_size", ",", "bin_size", ")", "\n", "\n", "accuracies", "=", "[", "]", "\n", "num_in_each_bin", "=", "[", "]", "\n", "\n", "for", "conf_thresh", "in", "upper_bounds", ":", "\n", "            ", "acc", ",", "avg_conf", ",", "len_bin", "=", "compute_binned_acc_conf", "(", "\n", "conf_thresh", "-", "bin_size", ",", "conf_thresh", ",", "confidence", ",", "y_pred", ",", "y_true", ",", "device", "\n", ")", "\n", "accuracies", ".", "append", "(", "acc", ")", "\n", "num_in_each_bin", ".", "append", "(", "len_bin", ")", "\n", "\n", "", "acc_all", "=", "[", "]", "\n", "for", "conf", "in", "confidence", ":", "\n", "            ", "idx", "=", "int", "(", "conf", "//", "(", "1", "/", "bin_num", ")", ")", "\n", "acc_all", ".", "append", "(", "accuracies", "[", "idx", "]", ")", "\n", "\n", "", "return", "torch", ".", "stack", "(", "acc_all", ")", ",", "torch", ".", "stack", "(", "num_in_each_bin", ")", "\n", "\n", "", "def", "calculate_cal_term", "(", "acc_vector", ",", "conf_vector", ",", "num_in_each_bin", ")", ":", "\n", "        ", "bin_error", "=", "acc_vector", "*", "torch", ".", "log", "(", "conf_vector", ")", "\n", "cal_term", "=", "-", "torch", ".", "sum", "(", "bin_error", ")", "\n", "return", "cal_term", "\n", "\n", "", "probs", "=", "F", ".", "softmax", "(", "logits", ",", "dim", "=", "1", ")", "\n", "y_pred", "=", "torch", ".", "max", "(", "logits", ",", "axis", "=", "1", ")", "[", "1", "]", "\n", "confidence", "=", "torch", ".", "max", "(", "probs", ",", "axis", "=", "1", ")", "[", "0", "]", "\n", "acc_vector", ",", "num_in_each_bin", "=", "calculate_confidence_vec", "(", "\n", "confidence", ",", "y_pred", ",", "y_true", ",", "device", "\n", ")", "\n", "cal_term", "=", "calculate_cal_term", "(", "acc_vector", ",", "confidence", ",", "num_in_each_bin", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.depth_width.utils.cal_eval_model": [[197, 238], ["dataset[].to", "[].detach().cpu", "torch.softmax", "numpy.array", "prob_pred_test[].detach().cpu().numpy", "list", "list", "metrics.lower_bound_scaling_ce", "metrics.lower_bound_scaling_ce", "torch.no_grad", "torch.no_grad", "gnn.to", "gnn.eval", "len", "numpy.arange", "numpy.finfo", "F.softmax.detach().cpu().numpy", "test_labels.detach().cpu().numpy", "utils.draw_RD", "utils.draw_CH", "gnn", "[].detach", "prob_pred_test[].detach().cpu", "numpy.sum", "F.softmax.detach().cpu().numpy", "[].detach().cpu.numpy", "test_labels.detach().cpu().numpy", "F.softmax.detach().cpu().numpy", "[].detach().cpu.numpy", "test_labels.detach().cpu().numpy", "numpy.log", "F.softmax.detach().cpu", "test_labels.detach().cpu", "prob_pred_test[].detach", "F.softmax.detach().cpu", "test_labels.detach().cpu", "F.softmax.detach().cpu", "test_labels.detach().cpu", "test_logits.max", "F.softmax.detach", "test_labels.detach", "F.softmax.detach", "test_labels.detach", "F.softmax.detach", "test_labels.detach"], "function", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.lower_bound_scaling_ce", "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.lower_bound_scaling_ce", "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.utils.draw_RD", "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.utils.draw_CH"], ["annealing_coef", "=", "torch", ".", "min", "(", "lmbda", ",", "torch", ".", "tensor", "(", "lmbda", "*", "(", "epoch", "+", "1", ")", "/", "epochs", ")", ")", "\n", "\n", "return", "cal_term", "*", "annealing_coef", "\n", "\n", "\n", "", "def", "cal_eval_model", "(", "gnn", ",", "dataset", ",", "device", ",", "data_name", ",", "gnn_name", ",", "edge_index", ",", "draw", "=", "False", ")", ":", "\n", "    ", "data", "=", "dataset", "[", "0", "]", ".", "to", "(", "device", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "gnn", ".", "to", "(", "device", ")", "\n", "gnn", ".", "eval", "(", ")", "\n", "test_logits", "=", "gnn", "(", "data", ",", "edge_index", ")", "[", "data", ".", "test_mask", "]", "\n", "test_labels", "=", "data", ".", "y", "[", "data", ".", "test_mask", "]", "\n", "\n", "", "y_pred_test", "=", "test_logits", ".", "max", "(", "1", ")", "[", "1", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "prob_pred_test", "=", "F", ".", "softmax", "(", "test_logits", ",", "dim", "=", "1", ")", "\n", "test_acc", "=", "(", "y_pred_test", "==", "test_labels", ")", ".", "sum", "(", ")", "/", "len", "(", "test_labels", ")", "\n", "\n", "a", "=", "np", ".", "array", "(", "np", ".", "arange", "(", "0", ",", "prob_pred_test", ".", "shape", "[", "0", "]", ")", ")", "\n", "p_y", "=", "prob_pred_test", "[", "a", ",", "test_labels", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "tiny", "=", "np", ".", "finfo", "(", "np", ".", "float", ")", ".", "tiny", "# To avoid division by 0 warning", "\n", "nll", "=", "-", "np", ".", "sum", "(", "np", ".", "log", "(", "p_y", "+", "tiny", ")", ")", "/", "prob_pred_test", ".", "shape", "[", "0", "]", "\n", "\n", "probs", "=", "list", "(", "prob_pred_test", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "labels", "=", "list", "(", "test_labels", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "ece", "=", "lower_bound_scaling_ce", "(", "probs", ",", "labels", ",", "p", "=", "1", ",", "debias", "=", "False", ",", "mode", "=", "\"top-label\"", ")", "\n", "marg_ece", "=", "lower_bound_scaling_ce", "(", "probs", ",", "labels", ",", "p", "=", "1", ",", "debias", "=", "False", ",", "mode", "=", "\"marginal\"", ")", "\n", "\n", "if", "draw", ":", "\n", "        ", "draw_RD", "(", "\n", "prob_pred_test", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "y_pred_test", ".", "numpy", "(", ")", ",", "\n", "test_labels", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "data_name", ",", "\n", "gnn_name", ",", "\n", "ece", ",", "\n", ")", "\n", "draw_CH", "(", "\n", "prob_pred_test", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "y_pred_test", ".", "numpy", "(", ")", ",", "\n", "test_labels", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "data_name", ",", "\n", "gnn_name", ",", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.depth_width.utils.draw_RD": [[240, 259], ["numpy.max", "utils.get_uncalibrated_res", "matplotlib.subplots", "utils.rel_diagram_sub", "fig.savefig"], "function", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.utils.get_uncalibrated_res", "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.utils.rel_diagram_sub"], [")", "\n", "\n", "", "return", "ece", ",", "marg_ece", ",", "nll", ",", "test_acc", "\n", "\n", "\n", "", "def", "draw_RD", "(", "prob_pred_test", ",", "y_pred_test", ",", "y_true_test", ",", "data_name", ",", "gnn_name", ",", "ece", ")", ":", "\n", "    ", "confs_pred_test", "=", "np", ".", "max", "(", "prob_pred_test", ",", "axis", "=", "1", ")", "\n", "bin_info_uncal", "=", "get_uncalibrated_res", "(", "y_true_test", ",", "confs_pred_test", ",", "y_pred_test", ")", "\n", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "nrows", "=", "1", ",", "ncols", "=", "1", ",", "figsize", "=", "(", "5", ",", "5", ")", ",", "sharex", "=", "\"col\"", ",", "sharey", "=", "\"row\"", ")", "\n", "rel_diagram_sub", "(", "\n", "bin_info_uncal", "[", "0", "]", ",", "\n", "bin_info_uncal", "[", "1", "]", ",", "\n", "ax", ",", "\n", "15", ",", "\n", "\"Reliability Diagram\"", ",", "\n", "\"Confidence\"", ",", "\n", "\"Accuracy\"", ",", "\n", "ece", ",", "\n", "data_name", ",", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.depth_width.utils.draw_CH": [[261, 280], ["numpy.max", "utils.get_uncalibrated_res", "matplotlib.subplots", "utils.conf_histogram_sub", "fig.savefig"], "function", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.utils.get_uncalibrated_res", "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.utils.conf_histogram_sub"], [")", "\n", "\n", "fig", ".", "savefig", "(", "\"output/figures/{}_{}_rd.png\"", ".", "format", "(", "gnn_name", ",", "data_name", ")", ")", "\n", "\n", "\n", "", "def", "draw_CH", "(", "prob_pred_test", ",", "y_pred_test", ",", "y_true_test", ",", "data_name", ",", "gnn_name", ",", "ece", ")", ":", "\n", "    ", "confs_pred_test", "=", "np", ".", "max", "(", "prob_pred_test", ",", "axis", "=", "1", ")", "\n", "bin_info_uncal", "=", "get_uncalibrated_res", "(", "y_true_test", ",", "confs_pred_test", ",", "y_pred_test", ")", "\n", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "nrows", "=", "1", ",", "ncols", "=", "1", ",", "figsize", "=", "(", "5", ",", "5", ")", ",", "sharex", "=", "\"col\"", ",", "sharey", "=", "\"row\"", ")", "\n", "ave_conf", ",", "ave_acc", "=", "conf_histogram_sub", "(", "\n", "bin_info_uncal", "[", "0", "]", ",", "\n", "bin_info_uncal", "[", "1", "]", ",", "\n", "bin_info_uncal", "[", "2", "]", ",", "\n", "ax", ",", "\n", "15", ",", "\n", "\"Confidence Histogram\"", ",", "\n", "\"Confidence\"", ",", "\n", "\"Proportion of samples\"", ",", "\n", "ece", ",", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.depth_width.utils.get_uncalibrated_res": [[282, 285], ["utils.get_bin_info"], "function", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.utils.get_bin_info"], ["gnn_name", ",", "\n", ")", "\n", "fig", ".", "savefig", "(", "\"output/figures/{}_{}_ch.png\"", ".", "format", "(", "gnn_name", ",", "data_name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.depth_width.utils.get_bin_info": [[287, 306], ["numpy.arange", "utils.compute_acc_bin", "accuracies.append", "confidences.append", "bin_lengths.append"], "function", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.utils.compute_acc_bin"], ["", "def", "get_uncalibrated_res", "(", "y_true", ",", "confs_pred", ",", "y_pred", ",", "M", "=", "15", ")", ":", "\n", "    ", "bin_size", "=", "1", "/", "M", "\n", "return", "get_bin_info", "(", "confs_pred", ",", "y_pred", ",", "y_true", ",", "bin_size", "=", "bin_size", ")", "\n", "\n", "\n", "", "def", "get_bin_info", "(", "conf", ",", "pred", ",", "true", ",", "bin_size", ")", ":", "\n", "    ", "\"\"\"\n    Get accuracy, confidence and elements in bin information for all the bins.\n    \"\"\"", "\n", "upper_bounds", "=", "np", ".", "arange", "(", "bin_size", ",", "1", "+", "bin_size", ",", "bin_size", ")", "\n", "\n", "accuracies", "=", "[", "]", "\n", "confidences", "=", "[", "]", "\n", "bin_lengths", "=", "[", "]", "\n", "\n", "for", "conf_thresh", "in", "upper_bounds", ":", "\n", "        ", "acc", ",", "avg_conf", ",", "len_bin", "=", "compute_acc_bin", "(", "\n", "conf_thresh", "-", "bin_size", ",", "conf_thresh", ",", "conf", ",", "pred", ",", "true", "\n", ")", "\n", "accuracies", ".", "append", "(", "acc", ")", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.depth_width.utils.compute_acc_bin": [[308, 329], ["len", "len", "len", "zip", "sum", "float"], "function", ["None"], ["bin_lengths", ".", "append", "(", "len_bin", ")", "\n", "\n", "", "return", "accuracies", ",", "confidences", ",", "bin_lengths", "\n", "\n", "\n", "", "def", "compute_acc_bin", "(", "conf_thresh_lower", ",", "conf_thresh_upper", ",", "conf", ",", "pred", ",", "true", ")", ":", "\n", "    ", "\"\"\"\n    Computes accuracy and average confidence for bin.\n    \"\"\"", "\n", "filtered_tuples", "=", "[", "\n", "x", "\n", "for", "x", "in", "zip", "(", "pred", ",", "true", ",", "conf", ")", "\n", "if", "x", "[", "2", "]", ">", "conf_thresh_lower", "and", "x", "[", "2", "]", "<=", "conf_thresh_upper", "\n", "]", "\n", "if", "len", "(", "filtered_tuples", ")", "<", "1", ":", "\n", "        ", "return", "0", ",", "0", ",", "0", "\n", "", "else", ":", "\n", "        ", "correct", "=", "len", "(", "\n", "[", "x", "for", "x", "in", "filtered_tuples", "if", "x", "[", "0", "]", "==", "x", "[", "1", "]", "]", "\n", ")", "# How many correct labels", "\n", "len_bin", "=", "len", "(", "filtered_tuples", ")", "# How many elements fall into given bin", "\n", "avg_conf", "=", "(", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.depth_width.utils.rel_diagram_sub": [[331, 390], ["matplotlib.plot", "numpy.arange", "numpy.array", "numpy.array", "ax.bar", "ax.bar", "ax.text", "ax.set_aspect", "ax.plot", "ax.legend", "ax.legend", "ax.set_xlim", "ax.set_ylim", "ax.set_title", "ax.set_xlabel", "ax.set_ylabel", "ax.xaxis.set_tick_params", "ax.yaxis.set_tick_params", "numpy.arange", "numpy.arange", "round", "gnn_name.upper"], "function", ["None"], [")", "# Avg confidence of BIN", "\n", "accuracy", "=", "float", "(", "correct", ")", "/", "len_bin", "\n", "return", "accuracy", ",", "avg_conf", ",", "len_bin", "\n", "\n", "\n", "", "", "def", "rel_diagram_sub", "(", "\n", "accs", ",", "\n", "confs", ",", "\n", "ax", ",", "\n", "M", "=", "15", ",", "\n", "name", "=", "\"Reliability Diagram\"", ",", "\n", "xname", "=", "\"\"", ",", "\n", "yname", "=", "\"\"", ",", "\n", "ece", "=", "None", ",", "\n", "data_name", "=", "None", ",", "\n", "gnn_name", "=", "None", ",", "\n", ")", ":", "\n", "    ", "plt", ".", "plot", "(", "\n", "np", ".", "arange", "(", "0", ",", "1", ",", "0.1", ")", ",", "np", ".", "arange", "(", "0", ",", "1", ",", "0.1", ")", ",", "linestyle", "=", "\"dashed\"", ",", "color", "=", "\"black\"", "\n", ")", "\n", "\n", "bin_size", "=", "1", "/", "M", "\n", "# Center of each bin", "\n", "positions", "=", "np", ".", "arange", "(", "0", "+", "bin_size", "/", "2", ",", "1", "+", "bin_size", "/", "2", ",", "bin_size", ")", "\n", "outputs", "=", "np", ".", "array", "(", "confs", ")", "\n", "acc", "=", "np", ".", "array", "(", "accs", ")", "\n", "# Bars with outputs", "\n", "output_plt", "=", "ax", ".", "bar", "(", "\n", "positions", ",", "acc", ",", "width", "=", "bin_size", ",", "edgecolor", "=", "\"black\"", ",", "color", "=", "\"blue\"", ",", "zorder", "=", "0", "\n", ")", "\n", "# Plot gap first, so its below everything", "\n", "gap_plt", "=", "ax", ".", "bar", "(", "\n", "positions", ",", "\n", "outputs", "-", "acc", ",", "\n", "bottom", "=", "acc", ",", "\n", "width", "=", "bin_size", ",", "\n", "edgecolor", "=", "\"red\"", ",", "\n", "hatch", "=", "\"/\"", ",", "\n", "color", "=", "\"red\"", ",", "\n", "alpha", "=", "0.3", ",", "\n", "linewidth", "=", "2", ",", "\n", "label", "=", "\"Gap\"", ",", "\n", "zorder", "=", "3", ",", "\n", ")", "\n", "ax", ".", "text", "(", "\n", "0.55", ",", "\n", "0.1", ",", "\n", "\"ECE = {}%\"", ".", "format", "(", "round", "(", "ece", "*", "100", ",", "1", ")", ")", ",", "\n", "size", "=", "14", ",", "\n", "backgroundcolor", "=", "\"grey\"", ",", "\n", ")", "\n", "\n", "# Line plot with center line.", "\n", "ax", ".", "set_aspect", "(", "\"equal\"", ")", "\n", "ax", ".", "plot", "(", "[", "0", ",", "1", "]", ",", "[", "0", ",", "1", "]", ",", "linestyle", "=", "\"--\"", ",", "color", "=", "\"grey\"", ")", "\n", "ax", ".", "legend", "(", "handles", "=", "[", "gap_plt", ",", "output_plt", "]", ")", "\n", "ax", ".", "legend", "(", "loc", "=", "2", ",", "prop", "=", "{", "\"size\"", ":", "14", "}", ")", "\n", "ax", ".", "set_xlim", "(", "0", ",", "1", ")", "\n", "ax", ".", "set_ylim", "(", "0", ",", "1", ")", "\n", "ax", ".", "set_title", "(", "\"{} on {}\"", ".", "format", "(", "gnn_name", ".", "upper", "(", ")", ",", "data_name", ")", ",", "fontsize", "=", "14", ")", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.depth_width.utils.conf_histogram_sub": [[392, 430], ["numpy.array", "numpy.array", "numpy.arange", "ax.bar", "ax.plot", "ax.plot", "ax.legend", "ax.set_xlim", "ax.set_ylim", "ax.set_title", "ax.set_xlabel", "ax.set_ylabel", "ax.xaxis.set_tick_params", "ax.yaxis.set_tick_params", "numpy.array", "numpy.array().sum", "gnn_name.upper", "numpy.array"], "function", ["None"], ["ax", ".", "set_ylabel", "(", "yname", ",", "fontsize", "=", "14", ",", "color", "=", "\"black\"", ")", "\n", "ax", ".", "xaxis", ".", "set_tick_params", "(", "labelsize", "=", "13", ")", "\n", "ax", ".", "yaxis", ".", "set_tick_params", "(", "labelsize", "=", "13", ")", "\n", "\n", "\n", "", "def", "conf_histogram_sub", "(", "\n", "accs", ",", "\n", "confs", ",", "\n", "nums", ",", "\n", "ax", ",", "\n", "M", "=", "15", ",", "\n", "name", "=", "\"Reliability Diagram\"", ",", "\n", "xname", "=", "\"\"", ",", "\n", "yname", "=", "\"\"", ",", "\n", "ece", "=", "None", ",", "\n", "data_name", "=", "None", ",", "\n", "gnn_name", "=", "None", ",", "\n", ")", ":", "\n", "    ", "acc", "=", "np", ".", "array", "(", "accs", ")", "\n", "conf", "=", "np", ".", "array", "(", "confs", ")", "\n", "num", "=", "np", ".", "array", "(", "nums", ")", "/", "np", ".", "array", "(", "nums", ")", ".", "sum", "(", ")", "\n", "bin_size", "=", "1", "/", "M", "\n", "# Center of each bin", "\n", "positions", "=", "np", ".", "arange", "(", "0", "+", "bin_size", "/", "2", ",", "1", "+", "bin_size", "/", "2", ",", "bin_size", ")", "\n", "# Bars with nums", "\n", "output_plt", "=", "ax", ".", "bar", "(", "\n", "positions", ",", "num", ",", "width", "=", "bin_size", ",", "edgecolor", "=", "\"black\"", ",", "color", "=", "\"blue\"", ",", "zorder", "=", "0", "\n", ")", "\n", "ave_conf", "=", "(", "conf", "*", "num", ")", ".", "sum", "(", ")", "\n", "ax", ".", "plot", "(", "\n", "[", "ave_conf", ",", "ave_conf", "]", ",", "[", "0", ",", "1", "]", ",", "linestyle", "=", "\"-\"", ",", "color", "=", "\"blue\"", ",", "label", "=", "\"Avg. conf.\"", "\n", ")", "\n", "ave_acc", "=", "(", "acc", "*", "num", ")", ".", "sum", "(", ")", "\n", "ax", ".", "plot", "(", "[", "ave_acc", ",", "ave_acc", "]", ",", "[", "0", ",", "1", "]", ",", "linestyle", "=", "\"--\"", ",", "color", "=", "\"red\"", ",", "label", "=", "\"Acc.\"", ")", "\n", "ax", ".", "legend", "(", "loc", "=", "2", ",", "prop", "=", "{", "\"size\"", ":", "14", "}", ")", "\n", "ax", ".", "set_xlim", "(", "0", ",", "1", ")", "\n", "ax", ".", "set_ylim", "(", "0", ",", "1", ")", "\n", "ax", ".", "set_title", "(", "\"{} on {}\"", ".", "format", "(", "gnn_name", ".", "upper", "(", ")", ",", "data_name", ")", ",", "fontsize", "=", "14", ")", "\n", "ax", ".", "set_xlabel", "(", "xname", ",", "fontsize", "=", "14", ",", "color", "=", "\"black\"", ")", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.depth_width.get_dataset.get_planetoid_dataset": [[5, 10], ["torch_geometric.datasets.Planetoid", "torch_geometric.NormalizeFeatures"], "function", ["None"], ["def", "get_planetoid_dataset", "(", "data_name", ",", "normalize_features", "=", "True", ")", ":", "\n", "    ", "dataset", "=", "Planetoid", "(", "root", "=", "\"/tmp/\"", "+", "data_name", ",", "name", "=", "data_name", ")", "\n", "if", "normalize_features", ":", "\n", "        ", "dataset", ".", "transform", "=", "T", ".", "NormalizeFeatures", "(", ")", "\n", "", "return", "dataset", "\n", "", ""]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.depth_width.args.get_args": [[8, 21], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "get_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"--dataset\"", ",", "type", "=", "str", ",", "choices", "=", "datasets", ")", "\n", "parser", ".", "add_argument", "(", "\"--model\"", ",", "type", "=", "str", ",", "choices", "=", "models", ")", "\n", "parser", ".", "add_argument", "(", "\"--num_runs\"", ",", "type", "=", "int", ",", "default", "=", "10", ")", "\n", "parser", ".", "add_argument", "(", "\"--epochs\"", ",", "type", "=", "int", ",", "default", "=", "200", ")", "\n", "parser", ".", "add_argument", "(", "\"--early_stopping\"", ",", "type", "=", "bool", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "\"--patience\"", ",", "type", "=", "int", ",", "default", "=", "10", ")", "\n", "parser", ".", "add_argument", "(", "\"--add_cal_loss\"", ",", "type", "=", "bool", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "\"--alpha\"", ",", "type", "=", "float", ",", "default", "=", "0.98", ")", "\n", "parser", ".", "add_argument", "(", "\"--lmbda\"", ",", "type", "=", "float", ",", "default", "=", "1.0", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "", ""]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.models.GCN.__init__": [[10, 15], ["torch.Module.__init__", "torch_geometric.nn.GCNConv", "torch_geometric.nn.GCNConv"], "methods", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.metacal.metacal.MetaCalCoverageAcc.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "nhid", ",", "dropout", ")", ":", "\n", "        ", "super", "(", "GCN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gc1", "=", "GCNConv", "(", "dataset", ".", "num_features", ",", "nhid", ")", "\n", "self", ".", "gc2", "=", "GCNConv", "(", "nhid", ",", "dataset", ".", "num_classes", ")", "\n", "self", ".", "dropout", "=", "dropout", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.models.GCN.reset_parameters": [[16, 19], ["models.GCN.gc1.reset_parameters", "models.GCN.gc2.reset_parameters"], "methods", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.models.APPNPNet.reset_parameters", "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.models.APPNPNet.reset_parameters"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "self", ".", "gc1", ".", "reset_parameters", "(", ")", "\n", "self", ".", "gc2", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.models.GCN.forward": [[20, 27], ["models.GCN.gc1", "torch.relu", "torch.relu", "torch.dropout", "torch.dropout", "models.GCN.gc2", "torch.log_softmax", "torch.log_softmax"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "data", ",", "edge_index", ")", ":", "\n", "        ", "x", "=", "data", ".", "x", "\n", "a", "=", "edge_index", ".", "to", "(", "x", ".", "device", ")", "\n", "x", "=", "self", ".", "gc1", "(", "x", ",", "a", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "self", ".", "gc2", "(", "x", ",", "a", ")", "\n", "return", "F", ".", "log_softmax", "(", "x", ",", "dim", "=", "1", ")", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.models.GAT.__init__": [[30, 43], ["torch.Module.__init__", "torch_geometric.nn.GATConv", "torch_geometric.nn.GATConv"], "methods", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.metacal.metacal.MetaCalCoverageAcc.__init__"], ["", "", "class", "GAT", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "dataset", ",", "nhid", ",", "first_heads", ",", "output_heads", ",", "dropout", ")", ":", "\n", "        ", "super", "(", "GAT", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gc1", "=", "GATConv", "(", "\n", "dataset", ".", "num_features", ",", "nhid", ",", "heads", "=", "first_heads", ",", "dropout", "=", "dropout", "\n", ")", "\n", "self", ".", "gc2", "=", "GATConv", "(", "\n", "nhid", "*", "first_heads", ",", "\n", "dataset", ".", "num_classes", ",", "\n", "heads", "=", "output_heads", ",", "\n", "concat", "=", "False", ",", "\n", "dropout", "=", "dropout", ",", "\n", ")", "\n", "self", ".", "dropout", "=", "dropout", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.models.GAT.reset_parameters": [[44, 47], ["models.GAT.gc1.reset_parameters", "models.GAT.gc2.reset_parameters"], "methods", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.models.APPNPNet.reset_parameters", "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.models.APPNPNet.reset_parameters"], ["\n", "", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "self", ".", "gc1", ".", "reset_parameters", "(", ")", "\n", "self", ".", "gc2", ".", "reset_parameters", "(", ")", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.models.GAT.forward": [[48, 56], ["torch.dropout", "torch.dropout", "models.GAT.gc1", "torch.elu", "torch.elu", "torch.dropout", "torch.dropout", "models.GAT.gc2", "torch.log_softmax", "torch.log_softmax"], "methods", ["None"], ["\n", "", "def", "forward", "(", "self", ",", "data", ",", "edge_index", ")", ":", "\n", "        ", "x", "=", "data", ".", "x", "\n", "a", "=", "edge_index", ".", "to", "(", "x", ".", "device", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "self", ".", "gc1", "(", "x", ",", "a", ")", "\n", "x", "=", "F", ".", "elu", "(", "x", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "self", ".", "gc2", "(", "x", ",", "a", ")", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.models.SGC.__init__": [[59, 62], ["torch.Module.__init__", "torch_geometric.nn.SGConv"], "methods", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.metacal.metacal.MetaCalCoverageAcc.__init__"], ["\n", "", "", "class", "GAT_GCNParameters", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "dataset", ",", "nhid", "=", "8", ",", "first_heads", "=", "8", ",", "output_heads", "=", "1", ",", "dropout", "=", "0.", ")", ":", "\n", "        ", "super", "(", "GAT_GCNParameters", ",", "self", ")", ".", "__init__", "(", ")", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.models.SGC.reset_parameters": [[63, 65], ["models.SGC.gc1.reset_parameters"], "methods", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.models.APPNPNet.reset_parameters"], ["self", ".", "gc1", "=", "GATConv", "(", "dataset", ".", "num_features", ",", "nhid", ",", "heads", "=", "first_heads", ")", "\n", "self", ".", "gc2", "=", "GATConv", "(", "\n", "nhid", "*", "first_heads", ",", "dataset", ".", "num_classes", ",", "heads", "=", "output_heads", ",", "concat", "=", "False", ",", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.models.SGC.forward": [[66, 70], ["models.SGC.gc1", "torch.log_softmax", "torch.log_softmax"], "methods", ["None"], [")", "\n", "self", ".", "dropout", "=", "dropout", "\n", "\n", "", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "self", ".", "gc1", ".", "reset_parameters", "(", ")", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.models.GFNN.__init__": [[73, 77], ["torch.Module.__init__", "torch_geometric.nn.SGConv", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.metacal.metacal.MetaCalCoverageAcc.__init__"], ["", "def", "forward", "(", "self", ",", "data", ",", "edge_index", ")", ":", "\n", "        ", "x", "=", "data", ".", "x", "\n", "a", "=", "edge_index", ".", "to", "(", "x", ".", "device", ")", "\n", "x", "=", "self", ".", "gc1", "(", "x", ",", "a", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.models.GFNN.reset_parameters": [[78, 81], ["models.GFNN.gc1.reset_parameters", "models.GFNN.fc1.reset_parameters"], "methods", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.models.APPNPNet.reset_parameters", "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.models.APPNPNet.reset_parameters"], ["x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "self", ".", "gc2", "(", "x", ",", "a", ")", "\n", "return", "F", ".", "log_softmax", "(", "x", ",", "dim", "=", "1", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.models.GFNN.forward": [[82, 88], ["models.GFNN.gc1", "torch.relu", "torch.relu", "models.GFNN.fc1", "torch.log_softmax", "torch.log_softmax"], "methods", ["None"], []], "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.models.APPNPNet.__init__": [[91, 97], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch_geometric.nn.APPNP"], "methods", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.metacal.metacal.MetaCalCoverageAcc.__init__"], []], "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.models.APPNPNet.reset_parameters": [[98, 101], ["models.APPNPNet.lin1.reset_parameters", "models.APPNPNet.lin2.reset_parameters"], "methods", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.models.APPNPNet.reset_parameters", "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.models.APPNPNet.reset_parameters"], []], "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.models.APPNPNet.forward": [[102, 110], ["torch.dropout", "torch.dropout", "torch.relu", "torch.relu", "torch.dropout", "torch.dropout", "models.APPNPNet.lin2", "models.APPNPNet.prop1", "torch.log_softmax", "torch.log_softmax", "models.APPNPNet.lin1"], "methods", ["None"], []], "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.main.train_gnn": [[33, 71], ["tqdm.tqdm", "print", "print", "print", "tuning.search_best_wd", "range", "utils.training", "results.append", "results_val.append", "numpy.sqrt", "numpy.sqrt", "numpy.mean", "numpy.mean", "numpy.round", "numpy.round", "numpy.round", "numpy.round", "numpy.var", "numpy.var"], "function", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.tuning.search_best_wd", "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.utils.training"], ["def", "train_gnn", "(", "dataset", ",", "gnn", ",", "optimizer", ",", "args", ")", ":", "\n", "    ", "if", "args", ".", "tune_wd", "==", "True", ":", "\n", "        ", "print", "(", "\"Tune weight decay...\"", ")", "\n", "weight_decay", "=", "search_best_wd", "(", "dataset", ",", "gnn", ",", "optimizer", ",", "args", ")", "\n", "optimizer", ".", "param_groups", "[", "0", "]", "[", "\"weight_decay\"", "]", "=", "weight_decay", "\n", "\n", "", "results", ",", "results_val", "=", "[", "]", ",", "[", "]", "\n", "\n", "for", "num_run", "in", "tqdm", "(", "range", "(", "args", ".", "num_runs", ")", ")", ":", "\n", "        ", "test_acc", ",", "val_acc", "=", "training", "(", "\n", "dataset", ",", "\n", "gnn", ",", "\n", "optimizer", ",", "\n", "args", ".", "model", ",", "\n", "args", ".", "dataset", ",", "\n", "args", ".", "epochs", ",", "\n", "args", ".", "add_cal_loss", ",", "\n", "args", ".", "early_stopping", ",", "\n", "args", ".", "patience", ",", "\n", "args", ".", "alpha", ",", "\n", "args", ".", "lmbda", ",", "\n", "num_run", ",", "\n", ")", "\n", "results", ".", "append", "(", "[", "test_acc", "]", ")", "\n", "results_val", ".", "append", "(", "[", "val_acc", "]", ")", "\n", "", "test_acc_mean", "=", "np", ".", "mean", "(", "results", ",", "axis", "=", "0", ")", "[", "0", "]", "*", "100", "\n", "test_acc_std", "=", "np", ".", "sqrt", "(", "np", ".", "var", "(", "results", ",", "axis", "=", "0", ")", "[", "0", "]", ")", "*", "100", "\n", "val_acc_mean", "=", "np", ".", "mean", "(", "results_val", ",", "axis", "=", "0", ")", "[", "0", "]", "*", "100", "\n", "val_acc_std", "=", "np", ".", "sqrt", "(", "np", ".", "var", "(", "results_val", ",", "axis", "=", "0", ")", "[", "0", "]", ")", "*", "100", "\n", "\n", "print", "(", "\n", "\"Test accuracy is: {}% \\u00B1 {}%\"", ".", "format", "(", "\n", "np", ".", "round", "(", "test_acc_mean", ",", "2", ")", ",", "np", ".", "round", "(", "test_acc_std", ",", "2", ")", "\n", ")", "\n", ")", "\n", "print", "(", "\n", "\"Val accuracy is: {}% \\u00B1 {}%\"", ".", "format", "(", "\n", "np", ".", "round", "(", "val_acc_mean", ",", "2", ")", ",", "np", ".", "round", "(", "val_acc_std", ",", "2", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.main.calibrate_gnn": [[75, 245], ["tqdm.tqdm", "zip", "range", "gnn.load_state_dict", "torch.device", "gnn.to", "utils.cal_eval_model", "res_uncal.append", "utils.produce_logits", "calibration_methods.HistogramBinning", "calibration_methods.HistogramBinning.fit", "calibration_methods.HistogramBinning.predict_proba", "utils.cal_method_eval", "res_his.append", "calibration_methods.IsotonicRegression", "calibration_methods.IsotonicRegression.fit", "calibration_methods.IsotonicRegression.predict_proba", "utils.cal_method_eval", "res_iso.append", "calibration_methods.BayesianBinningQuantiles", "calibration_methods.BayesianBinningQuantiles.fit", "calibration_methods.BayesianBinningQuantiles.predict_proba", "utils.cal_method_eval", "res_bbq.append", "calibration_methods.TemperatureScaling", "calibration_methods.TemperatureScaling.fit", "calibration_methods.TemperatureScaling.predict_proba", "utils.cal_method_eval", "res_ts.append", "metacal.metacal.MetaCalMisCoverage", "metacal.metacal.MetaCalMisCoverage.fit", "metacal.metacal.MetaCalMisCoverage.predict", "utils.cal_method_eval", "res_meta.append", "calibration_methods.RBS", "utils.cal_method_eval", "res_rbs.append", "str", "torch.load", "numpy.mean", "numpy.sqrt", "open", "f.write", "f.write", "f.write", "f.write", "f.write", "f.write", "f.write", "f.write", "f.write", "torch.cuda.is_available", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.var", "numpy.round", "numpy.round", "numpy.round", "numpy.round", "numpy.round", "numpy.round", "numpy.var", "numpy.var", "numpy.var"], "function", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.utils.cal_eval_model", "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.utils.produce_logits", "home.repos.pwc.inspect_result.liu-yushan_calgnn.metacal.metacal.MetaCalCoverageAcc.fit", "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.calibration_methods.TemperatureScaling_bins.predict_proba", "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.utils.cal_method_eval", "home.repos.pwc.inspect_result.liu-yushan_calgnn.metacal.metacal.MetaCalCoverageAcc.fit", "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.calibration_methods.TemperatureScaling_bins.predict_proba", "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.utils.cal_method_eval", "home.repos.pwc.inspect_result.liu-yushan_calgnn.metacal.metacal.MetaCalCoverageAcc.fit", "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.calibration_methods.TemperatureScaling_bins.predict_proba", "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.utils.cal_method_eval", "home.repos.pwc.inspect_result.liu-yushan_calgnn.metacal.metacal.MetaCalCoverageAcc.fit", "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.calibration_methods.TemperatureScaling_bins.predict_proba", "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.utils.cal_method_eval", "home.repos.pwc.inspect_result.liu-yushan_calgnn.metacal.metacal.MetaCalCoverageAcc.fit", "home.repos.pwc.inspect_result.liu-yushan_calgnn.metacal.metacal.MetaCalCoverageAcc.predict", "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.utils.cal_method_eval", "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.calibration_methods.RBS", "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.utils.cal_method_eval"], ["", "def", "calibrate_gnn", "(", "dataset", ",", "gnn", ",", "args", ")", ":", "\n", "    ", "data", "=", "dataset", "[", "0", "]", "\n", "res_uncal", ",", "res_his", ",", "res_iso", ",", "res_bbq", ",", "res_ts", ",", "res_meta", ",", "res_rbs", "=", "(", "\n", "[", "]", ",", "\n", "[", "]", ",", "\n", "[", "]", ",", "\n", "[", "]", ",", "\n", "[", "]", ",", "\n", "[", "]", ",", "\n", "[", "]", ",", "\n", ")", "\n", "checkpoints_path", "=", "\"checkpoints/{}_{}/\"", ".", "format", "(", "args", ".", "model", ",", "args", ".", "dataset", ")", "\n", "\n", "for", "num_run", "in", "tqdm", "(", "range", "(", "args", ".", "num_runs", ")", ")", ":", "\n", "        ", "save_path", "=", "checkpoints_path", "+", "str", "(", "num_run", ")", "\n", "gnn", ".", "load_state_dict", "(", "torch", ".", "load", "(", "save_path", ")", ")", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "gnn", ".", "to", "(", "device", ")", "\n", "\n", "# Uncal", "\n", "ece", ",", "marg_ece", ",", "nll", ",", "test_acc", "=", "cal_eval_model", "(", "\n", "gnn", ",", "dataset", ",", "device", ",", "args", ".", "dataset", ",", "args", ".", "model", "\n", ")", "\n", "res_uncal", ".", "append", "(", "[", "ece", ",", "marg_ece", ",", "nll", ",", "test_acc", "]", ")", "\n", "\n", "# Calibrate", "\n", "(", "\n", "val_probs", ",", "\n", "test_probs", ",", "\n", "val_logits", ",", "\n", "test_logits", ",", "\n", "val_labels", ",", "\n", "test_labels", ",", "\n", "logits", ",", "\n", "probs", ",", "\n", ")", "=", "produce_logits", "(", "gnn", ",", "data", ",", "device", ")", "\n", "\n", "# His", "\n", "his_model", "=", "HistogramBinning", "(", ")", "\n", "his_model", ".", "fit", "(", "val_probs", ",", "val_labels", ")", "\n", "cal_probs_test", "=", "his_model", ".", "predict_proba", "(", "test_probs", ")", "\n", "ece", ",", "marg_ece", ",", "nll", ",", "cal_test_acc", "=", "cal_method_eval", "(", "\n", "cal_probs_test", ",", "\n", "test_labels", ",", "\n", "device", ",", "\n", "args", ".", "dataset", ",", "\n", "args", ".", "model", ",", "\n", "\"his\"", ",", "\n", "draw", "=", "False", ",", "\n", ")", "\n", "res_his", ".", "append", "(", "[", "ece", ",", "marg_ece", ",", "nll", ",", "cal_test_acc", "]", ")", "\n", "\n", "# Iso", "\n", "iso_model", "=", "IsotonicRegression", "(", ")", "\n", "iso_model", ".", "fit", "(", "val_probs", ",", "val_labels", ")", "\n", "cal_probs_test", "=", "iso_model", ".", "predict_proba", "(", "test_probs", ")", "\n", "ece", ",", "marg_ece", ",", "nll", ",", "cal_test_acc", "=", "cal_method_eval", "(", "\n", "cal_probs_test", ",", "\n", "test_labels", ",", "\n", "device", ",", "\n", "args", ".", "dataset", ",", "\n", "args", ".", "model", ",", "\n", "\"iso\"", ",", "\n", "draw", "=", "False", ",", "\n", ")", "\n", "res_iso", ".", "append", "(", "[", "ece", ",", "marg_ece", ",", "nll", ",", "cal_test_acc", "]", ")", "\n", "\n", "# BBQ", "\n", "BBQ_model", "=", "BayesianBinningQuantiles", "(", ")", "\n", "BBQ_model", ".", "fit", "(", "val_probs", ",", "val_labels", ")", "\n", "cal_probs_test", "=", "BBQ_model", ".", "predict_proba", "(", "test_probs", ")", "\n", "ece", ",", "marg_ece", ",", "nll", ",", "cal_test_acc", "=", "cal_method_eval", "(", "\n", "cal_probs_test", ",", "\n", "test_labels", ",", "\n", "device", ",", "\n", "args", ".", "dataset", ",", "\n", "args", ".", "model", ",", "\n", "\"bbq\"", ",", "\n", "draw", "=", "False", ",", "\n", ")", "\n", "res_bbq", ".", "append", "(", "[", "ece", ",", "marg_ece", ",", "nll", ",", "cal_test_acc", "]", ")", "\n", "\n", "# TS", "\n", "TS_model", "=", "TemperatureScaling", "(", ")", "\n", "TS_model", ".", "fit", "(", "val_logits", ",", "val_labels", ")", "\n", "cal_probs_test", "=", "TS_model", ".", "predict_proba", "(", "test_logits", ")", "\n", "ece", ",", "marg_ece", ",", "nll", ",", "cal_test_acc", "=", "cal_method_eval", "(", "\n", "cal_probs_test", ",", "\n", "test_labels", ",", "\n", "device", ",", "\n", "args", ".", "dataset", ",", "\n", "args", ".", "model", ",", "\n", "\"ts\"", ",", "\n", "draw", "=", "False", ",", "\n", ")", "\n", "res_ts", ".", "append", "(", "[", "ece", ",", "marg_ece", ",", "nll", ",", "cal_test_acc", "]", ")", "\n", "\n", "# Meta", "\n", "a", "=", "0.05", "\n", "meta_model", "=", "MetaCalMisCoverage", "(", "a", ")", "\n", "meta_model", ".", "fit", "(", "val_logits", ",", "val_labels", ")", "\n", "cal_probs_test", "=", "meta_model", ".", "predict", "(", "test_logits", ")", "\n", "ece", ",", "marg_ece", ",", "nll", ",", "cal_test_acc", "=", "cal_method_eval", "(", "\n", "cal_probs_test", ",", "\n", "test_labels", ",", "\n", "device", ",", "\n", "args", ".", "dataset", ",", "\n", "args", ".", "model", ",", "\n", "\"meta\"", ",", "\n", "draw", "=", "False", ",", "\n", ")", "\n", "res_meta", ".", "append", "(", "[", "ece", ",", "marg_ece", ",", "nll", ",", "cal_test_acc", "]", ")", "\n", "\n", "# RBS", "\n", "cal_probs_test", "=", "RBS", "(", "\n", "data", ",", "probs", ",", "val_logits", ",", "val_labels", ",", "test_logits", ",", "args", ".", "num_bins_rbs", "\n", ")", "\n", "ece", ",", "marg_ece", ",", "nll", ",", "cal_test_acc", "=", "cal_method_eval", "(", "\n", "cal_probs_test", ",", "\n", "test_labels", ",", "\n", "device", ",", "\n", "args", ".", "dataset", ",", "\n", "args", ".", "model", ",", "\n", "\"rbs\"", ",", "\n", "draw", "=", "False", ",", "\n", ")", "\n", "res_rbs", ".", "append", "(", "[", "ece", ",", "marg_ece", ",", "nll", ",", "cal_test_acc", "]", ")", "\n", "\n", "# Average", "\n", "", "cal_name_list", "=", "[", "\"Uncal\"", ",", "\"His\"", ",", "\"Iso\"", ",", "\"BBQ\"", ",", "\"TS\"", ",", "\"Meta\"", ",", "\"RBS\"", "]", "\n", "cal_results_map", "=", "{", "\n", "\"Uncal\"", ":", "res_uncal", ",", "\n", "\"His\"", ":", "res_his", ",", "\n", "\"Iso\"", ":", "res_iso", ",", "\n", "\"BBQ\"", ":", "res_bbq", ",", "\n", "\"TS\"", ":", "res_ts", ",", "\n", "\"Meta\"", ":", "res_meta", ",", "\n", "\"RBS\"", ":", "res_rbs", ",", "\n", "}", "\n", "cal_results_list", "=", "[", "cal_results_map", "[", "x", "]", "for", "x", "in", "cal_name_list", "]", "\n", "for", "result", ",", "cal_method", "in", "zip", "(", "cal_results_list", ",", "cal_name_list", ")", ":", "\n", "# 0: mean, 1: std", "\n", "        ", "ece0", ",", "marg_ece0", ",", "nll0", ",", "cal_test_acc0", "=", "np", ".", "mean", "(", "result", ",", "axis", "=", "0", ")", "*", "100", "\n", "nll0", "=", "nll0", "/", "100", "\n", "ece1", ",", "marg_ece1", ",", "nll1", ",", "cal_test_acc1", "=", "(", "\n", "np", ".", "sqrt", "(", "np", ".", "var", "(", "result", ",", "axis", "=", "0", ")", "[", "0", "]", ")", "*", "100", ",", "\n", "np", ".", "sqrt", "(", "np", ".", "var", "(", "result", ",", "axis", "=", "0", ")", "[", "1", "]", ")", "*", "100", ",", "\n", "np", ".", "sqrt", "(", "np", ".", "var", "(", "result", ",", "axis", "=", "0", ")", "[", "2", "]", ")", ",", "\n", "np", ".", "sqrt", "(", "np", ".", "var", "(", "result", ",", "axis", "=", "0", ")", "[", "3", "]", ")", "*", "100", ",", "\n", ")", "\n", "\n", "path", "=", "\"output/{}_{}_{}.txt\"", ".", "format", "(", "args", ".", "model", ",", "args", ".", "dataset", ",", "args", ".", "num_runs", ")", "\n", "with", "open", "(", "path", ",", "\"a\"", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "cal_method", ")", "\n", "f", ".", "write", "(", "\"\\n\"", ")", "\n", "f", ".", "write", "(", "\"ECE is: {}\\u00B1{}\"", ".", "format", "(", "np", ".", "round", "(", "ece0", ",", "2", ")", ",", "np", ".", "round", "(", "ece1", ",", "2", ")", ")", ")", "\n", "f", ".", "write", "(", "\"\\n\"", ")", "\n", "f", ".", "write", "(", "\n", "\"Marg. ECE is: {}\\u00B1{}\"", ".", "format", "(", "\n", "np", ".", "round", "(", "marg_ece0", ",", "2", ")", ",", "np", ".", "round", "(", "marg_ece1", ",", "2", ")", "\n", ")", "\n", ")", "\n", "f", ".", "write", "(", "\"\\n\"", ")", "\n", "f", ".", "write", "(", "\n", "\"Test accuracy is: {}\\u00B1{}\"", ".", "format", "(", "\n", "np", ".", "round", "(", "cal_test_acc0", ",", "2", ")", ",", "np", ".", "round", "(", "cal_test_acc1", ",", "2", ")", "\n", ")", "\n", ")", "\n", "f", ".", "write", "(", "\"\\n\"", ")", "\n", "f", ".", "write", "(", "\"\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.tuning.objective_wd": [[10, 28], ["torch.optim.Adam", "utils.training", "gnn.parameters"], "function", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.utils.training"], ["def", "objective_wd", "(", "dataset", ",", "gnn", ",", "optimizer", ",", "args", ",", "space", ")", ":", "\n", "    ", "optimizer0", "=", "Adam", "(", "gnn", ".", "parameters", "(", ")", ",", "lr", "=", "0.2", ",", "weight_decay", "=", "space", "[", "\"weight_decay\"", "]", ")", "\n", "evals", "=", "training", "(", "\n", "dataset", ",", "\n", "gnn", ",", "\n", "optimizer0", ",", "\n", "args", ".", "model", ",", "\n", "args", ".", "dataset", ",", "\n", "args", ".", "epochs", ",", "\n", "args", ".", "early_stopping", ",", "\n", "args", ".", "patience", ",", "\n", "args", ".", "add_cal_loss", ",", "\n", "args", ".", "alpha", ",", "\n", "args", ".", "lmbda", ",", "\n", "num_run", "=", "-", "1", ",", "\n", "save_model", "=", "False", ",", "\n", ")", "\n", "return", "{", "\"loss\"", ":", "-", "evals", "[", "-", "1", "]", ",", "\"status\"", ":", "STATUS_OK", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.tuning.search_best_wd": [[30, 36], ["functools.partial", "hyperopt.fmin", "print", "hyperopt.hp.loguniform", "math.log", "math.log", "numpy.random.default_rng"], "function", ["None"], ["", "def", "search_best_wd", "(", "dataset", ",", "gnn", ",", "optimizer", ",", "args", ")", ":", "\n", "    ", "f", "=", "partial", "(", "objective_wd", ",", "dataset", ",", "gnn", ",", "optimizer", ",", "args", ")", "\n", "space", "=", "{", "\"weight_decay\"", ":", "hp", ".", "loguniform", "(", "\"weight_decay\"", ",", "log", "(", "1e-9", ")", ",", "log", "(", "1e-3", ")", ")", "}", "\n", "best", "=", "fmin", "(", "f", ",", "space", "=", "space", ",", "algo", "=", "tpe", ".", "suggest", ",", "max_evals", "=", "args", ".", "max_search", ",", "rstate", "=", "np", ".", "random", ".", "default_rng", "(", "0", ")", ")", "\n", "print", "(", "\"Best weight decay: \"", ",", "best", "[", "\"weight_decay\"", "]", ")", "\n", "return", "best", "[", "\"weight_decay\"", "]", "\n", "", ""]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.split": [[23, 29], ["int", "len", "numpy.ceil", "len", "len", "range", "len", "len"], "function", ["None"], ["def", "split", "(", "sequence", ":", "List", "[", "T", "]", ",", "parts", ":", "int", ")", "->", "List", "[", "List", "[", "T", "]", "]", ":", "\n", "    ", "assert", "parts", "<=", "len", "(", "sequence", ")", "\n", "part_size", "=", "int", "(", "np", ".", "ceil", "(", "len", "(", "sequence", ")", "*", "1.0", "/", "parts", ")", ")", "\n", "assert", "part_size", "*", "parts", ">=", "len", "(", "sequence", ")", "\n", "assert", "(", "part_size", "-", "1", ")", "*", "parts", "<", "len", "(", "sequence", ")", "\n", "return", "[", "sequence", "[", "i", ":", "i", "+", "part_size", "]", "for", "i", "in", "range", "(", "0", ",", "len", "(", "sequence", ")", ",", "part_size", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.get_equal_bins": [[31, 43], ["sorted", "metrics.split", "range", "sorted.append", "sorted", "sorted.append", "list", "len", "set"], "function", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.split"], ["", "def", "get_equal_bins", "(", "probs", ":", "List", "[", "float", "]", ",", "num_bins", ":", "int", "=", "10", ")", "->", "Bins", ":", "\n", "    ", "\"\"\"Get bins that contain approximately an equal number of data points.\"\"\"", "\n", "sorted_probs", "=", "sorted", "(", "probs", ")", "\n", "binned_data", "=", "split", "(", "sorted_probs", ",", "num_bins", ")", "\n", "bins", ":", "Bins", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "binned_data", ")", "-", "1", ")", ":", "\n", "        ", "last_prob", "=", "binned_data", "[", "i", "]", "[", "-", "1", "]", "\n", "next_first_prob", "=", "binned_data", "[", "i", "+", "1", "]", "[", "0", "]", "\n", "bins", ".", "append", "(", "(", "last_prob", "+", "next_first_prob", ")", "/", "2.0", ")", "\n", "", "bins", ".", "append", "(", "1.0", ")", "\n", "bins", "=", "sorted", "(", "list", "(", "set", "(", "bins", ")", ")", ")", "\n", "return", "bins", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.get_equal_prob_bins": [[45, 47], ["range"], "function", ["None"], ["", "def", "get_equal_prob_bins", "(", "probs", ":", "List", "[", "float", "]", ",", "num_bins", ":", "int", "=", "10", ")", "->", "Bins", ":", "\n", "    ", "return", "[", "i", "*", "1.0", "/", "num_bins", "for", "i", "in", "range", "(", "1", ",", "num_bins", "+", "1", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.get_discrete_bins": [[49, 57], ["sorted", "range", "bins.append", "numpy.unique", "bins.append", "len"], "function", ["None"], ["", "def", "get_discrete_bins", "(", "data", ":", "List", "[", "float", "]", ")", "->", "Bins", ":", "\n", "    ", "sorted_values", "=", "sorted", "(", "np", ".", "unique", "(", "data", ")", ")", "\n", "bins", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "sorted_values", ")", "-", "1", ")", ":", "\n", "        ", "mid", "=", "(", "sorted_values", "[", "i", "]", "+", "sorted_values", "[", "i", "+", "1", "]", ")", "/", "2.0", "\n", "bins", ".", "append", "(", "mid", ")", "\n", "", "bins", ".", "append", "(", "1.0", ")", "\n", "return", "bins", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.get_top_calibration_error_uncertainties": [[62, 65], ["metrics.get_calibration_error_uncertainties"], "function", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.get_calibration_error_uncertainties"], ["", "def", "get_top_calibration_error_uncertainties", "(", "probs", ",", "labels", ",", "p", "=", "2", ",", "alpha", "=", "0.1", ")", ":", "\n", "    ", "return", "get_calibration_error_uncertainties", "(", "\n", "probs", ",", "labels", ",", "p", ",", "alpha", ",", "mode", "=", "\"top-label\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.get_calibration_error_uncertainties": [[68, 99], ["list", "metrics.bootstrap_uncertainty", "zip", "zip", "metrics.get_calibration_error"], "function", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.bootstrap_uncertainty", "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.get_calibration_error"], ["", "def", "get_calibration_error_uncertainties", "(", "probs", ",", "labels", ",", "p", "=", "2", ",", "alpha", "=", "0.1", ",", "mode", "=", "\"marginal\"", ")", ":", "\n", "    ", "\"\"\"Get confidence intervals for the calibration error.\n    Args:\n        probs: A numpy array of shape (n,) or (n, k). If the shape is (n,) then\n            we assume binary classification and probs[i] is the model's confidence\n            the i-th example is 1. Otherwise, probs[i][j] is the model's confidence\n            the i-th example is j, with 0 <= probs[i][j] <= 1.\n        labels: A numpy array of shape (n,). labels[i] denotes the label of the i-th\n            example. In the binary classification setting, labels[i] must be 0 or 1,\n            in the k class setting labels[i] is an integer with 0 <= labels[i] <= k-1.\n        p: We measure the lp calibration error, where p >= 1 is an integer.\n        mode: 'marginal' or 'top-label'. 'marginal' calibration means we compute the\n            calibraton error for each class and then average them. Top-label means\n            we compute the calibration error of the prediction that the model is most\n            confident about.\n    Returns:\n        [lower, mid, upper]: 1-alpha confidence intervals produced by bootstrap resampling.\n        [lower, upper] represents the confidence interval. mid represents the median of\n        the bootstrap estimates. When p is not 2 (e.g. for the ECE where p = 1), this\n        can be used as a debiased estimate as well.\n    \"\"\"", "\n", "data", "=", "list", "(", "zip", "(", "probs", ",", "labels", ")", ")", "\n", "\n", "def", "ce_functional", "(", "data", ")", ":", "\n", "        ", "probs", ",", "labels", "=", "zip", "(", "*", "data", ")", "\n", "return", "get_calibration_error", "(", "probs", ",", "labels", ",", "p", ",", "debias", "=", "False", ",", "mode", "=", "mode", ")", "\n", "\n", "", "[", "lower", ",", "mid", ",", "upper", "]", "=", "bootstrap_uncertainty", "(", "\n", "data", ",", "ce_functional", ",", "num_samples", "=", "100", ",", "alpha", "=", "alpha", "\n", ")", "\n", "return", "[", "lower", ",", "mid", ",", "upper", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.get_top_calibration_error": [[101, 103], ["metrics.get_calibration_error"], "function", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.get_calibration_error"], ["", "def", "get_top_calibration_error", "(", "probs", ",", "labels", ",", "p", "=", "2", ",", "debias", "=", "True", ")", ":", "\n", "    ", "return", "get_calibration_error", "(", "probs", ",", "labels", ",", "p", ",", "debias", ",", "mode", "=", "\"top-label\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.get_calibration_error": [[105, 132], ["metrics.is_discrete", "metrics.get_binning_ce", "metrics.lower_bound_scaling_ce"], "function", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.is_discrete", "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.get_binning_ce", "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.lower_bound_scaling_ce"], ["", "def", "get_calibration_error", "(", "probs", ",", "labels", ",", "p", "=", "2", ",", "debias", "=", "True", ",", "mode", "=", "\"marginal\"", ")", ":", "\n", "    ", "\"\"\"Get the calibration error.\n    Args:\n        probs: A numpy array of shape (n,) or (n, k). If the shape is (n,) then\n            we assume binary classification and probs[i] is the model's confidence\n            the i-th example is 1. Otherwise, probs[i][j] is the model's confidence\n            the i-th example is j, with 0 <= probs[i][j] <= 1.\n        labels: A numpy array of shape (n,). labels[i] denotes the label of the i-th\n            example. In the binary classification setting, labels[i] must be 0 or 1,\n            in the k class setting labels[i] is an integer with 0 <= labels[i] <= k-1.\n        p: We measure the lp calibration error, where p >= 1 is an integer.\n        debias: Should we try to debias the estimates? For p = 2, the debiasing\n            has provably better sample complexity.\n        mode: 'marginal' or 'top-label'. 'marginal' calibration means we compute the\n            calibraton error for each class and then average them. Top-label means\n            we compute the calibration error of the prediction that the model is most\n            confident about.\n    Returns:\n        Estimated calibration error, a floating point value.\n        The method first uses heuristics to check if the values came from a scaling\n        method or binning method, and then calls the corresponding function. For\n        more explicit control, use lower_bound_scaling_ce or get_binning_ce.\n    \"\"\"", "\n", "if", "is_discrete", "(", "probs", ")", ":", "\n", "        ", "return", "get_binning_ce", "(", "probs", ",", "labels", ",", "p", ",", "debias", ",", "mode", "=", "mode", ")", "\n", "", "else", ":", "\n", "        ", "return", "lower_bound_scaling_ce", "(", "probs", ",", "labels", ",", "p", ",", "debias", ",", "mode", "=", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.lower_bound_scaling_top_ce": [[134, 139], ["metrics.lower_bound_scaling_ce"], "function", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.lower_bound_scaling_ce"], ["", "", "def", "lower_bound_scaling_top_ce", "(", "\n", "probs", ",", "labels", ",", "p", "=", "2", ",", "debias", "=", "True", ",", "num_bins", "=", "15", ",", "binning_scheme", "=", "get_equal_bins", "\n", ")", ":", "\n", "    ", "return", "lower_bound_scaling_ce", "(", "\n", "probs", ",", "labels", ",", "p", ",", "debias", ",", "num_bins", ",", "binning_scheme", ",", "mode", "=", "\"top-label\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.lower_bound_scaling_ce": [[142, 176], ["metrics._get_ce"], "function", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics._get_ce"], ["", "def", "lower_bound_scaling_ce", "(", "\n", "probs", ",", "\n", "labels", ",", "\n", "p", "=", "2", ",", "\n", "debias", "=", "True", ",", "\n", "num_bins", "=", "15", ",", "\n", "binning_scheme", "=", "get_equal_bins", ",", "\n", "mode", "=", "\"marginal\"", ",", "\n", ")", ":", "\n", "    ", "\"\"\"Lower bound the calibration error of a model with continuous outputs.\n    Args:\n        probs: A numpy array of shape (n,) or (n, k). If the shape is (n,) then\n            we assume binary classification and probs[i] is the model's confidence\n            the i-th example is 1. Otherwise, probs[i][j] is the model's confidence\n            the i-th example is j, with 0 <= probs[i][j] <= 1.\n        labels: A numpy array of shape (n,). labels[i] denotes the label of the i-th\n            example. In the binary classification setting, labels[i] must be 0 or 1,\n            in the k class setting labels[i] is an integer with 0 <= labels[i] <= k-1.\n        p: We measure the lp calibration error, where p >= 1 is an integer.\n        debias: Should we try to debias the estimates? For p = 2, the debiasing\n            has provably better sample complexity.\n        num_bins: Integer number of bins used to estimate the calibration error.\n        binning_scheme: A function that takes in a list of probabilities and number of bins,\n            and outputs a list of bins. See get_equal_bins, get_equal_prob_bins for examples.\n        mode: 'marginal' or 'top-label'. 'marginal' calibration means we compute the\n            calibraton error for each class and then average them. Top-label means\n            we compute the calibration error of the prediction that the model is most\n            confident about.\n    Returns:\n        Estimated lower bound for calibration error, a floating point value.\n        For scaling methods we cannot estimate the calibration error, but only a\n        lower bound.\n    \"\"\"", "\n", "return", "_get_ce", "(", "probs", ",", "labels", ",", "p", ",", "debias", ",", "num_bins", ",", "binning_scheme", ",", "mode", "=", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.get_binning_top_ce": [[178, 180], ["metrics.get_binning_ce"], "function", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.get_binning_ce"], ["", "def", "get_binning_top_ce", "(", "probs", ",", "labels", ",", "p", "=", "2", ",", "debias", "=", "True", ",", "mode", "=", "\"marginal\"", ")", ":", "\n", "    ", "return", "get_binning_ce", "(", "probs", ",", "labels", ",", "p", ",", "debias", ",", "mode", "=", "\"top-label\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.get_binning_ce": [[182, 204], ["metrics._get_ce"], "function", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics._get_ce"], ["", "def", "get_binning_ce", "(", "probs", ",", "labels", ",", "p", "=", "2", ",", "debias", "=", "True", ",", "mode", "=", "\"marginal\"", ")", ":", "\n", "    ", "\"\"\"Estimate the calibration error of a binned model.\n    Args:\n        probs: A numpy array of shape (n,) or (n, k). If the shape is (n,) then\n            we assume binary classification and probs[i] is the model's confidence\n            the i-th example is 1. Otherwise, probs[i][j] is the model's confidence\n            the i-th example is j, with 0 <= probs[i][j] <= 1.\n        labels: A numpy array of shape (n,). labels[i] denotes the label of the i-th\n            example. In the binary classification setting, labels[i] must be 0 or 1,\n            in the k class setting labels[i] is an integer with 0 <= labels[i] <= k-1.\n        p: We measure the lp calibration error, where p >= 1 is an integer.\n        debias: Should we try to debias the estimates? For p = 2, the debiasing\n            has provably better sample complexity.\n        mode: 'marginal' or 'top-label'. 'marginal' calibration means we compute the\n            calibraton error for each class and then average them. Top-label means\n            we compute the calibration error of the prediction that the model is most\n            confident about.\n    Returns:\n        Estimated calibration error, a floating point value.\n    \"\"\"", "\n", "return", "_get_ce", "(", "\n", "probs", ",", "labels", ",", "p", ",", "debias", ",", "None", ",", "binning_scheme", "=", "get_discrete_bins", ",", "mode", "=", "mode", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.get_ece": [[207, 216], ["metrics.lower_bound_scaling_ce"], "function", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.lower_bound_scaling_ce"], ["", "def", "get_ece", "(", "probs", ",", "labels", ",", "debias", "=", "False", ",", "num_bins", "=", "15", ",", "mode", "=", "\"top-label\"", ")", ":", "\n", "    ", "return", "lower_bound_scaling_ce", "(", "\n", "probs", ",", "\n", "labels", ",", "\n", "p", "=", "1", ",", "\n", "debias", "=", "debias", ",", "\n", "num_bins", "=", "num_bins", ",", "\n", "binning_scheme", "=", "get_equal_prob_bins", ",", "\n", "mode", "=", "mode", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics._get_ce": [[219, 270], ["numpy.array", "numpy.array", "list", "ValueError", "numpy.issubdtype", "ValueError", "len", "ValueError", "ValueError", "len", "metrics._get_ce.ce_1d"], "function", ["None"], ["", "def", "_get_ce", "(", "probs", ",", "labels", ",", "p", ",", "debias", ",", "num_bins", ",", "binning_scheme", ",", "mode", "=", "\"marginal\"", ")", ":", "\n", "    ", "def", "ce_1d", "(", "probs", ",", "labels", ")", ":", "\n", "        ", "assert", "probs", ".", "shape", "==", "labels", ".", "shape", "\n", "assert", "len", "(", "probs", ".", "shape", ")", "==", "1", "\n", "data", "=", "list", "(", "zip", "(", "probs", ",", "labels", ")", ")", "\n", "if", "binning_scheme", "==", "get_discrete_bins", ":", "\n", "            ", "assert", "num_bins", "is", "None", "\n", "bins", "=", "binning_scheme", "(", "probs", ")", "\n", "", "else", ":", "\n", "            ", "bins", "=", "binning_scheme", "(", "probs", ",", "num_bins", "=", "num_bins", ")", "\n", "", "if", "p", "==", "2", "and", "debias", ":", "\n", "            ", "return", "unbiased_l2_ce", "(", "bin", "(", "data", ",", "bins", ")", ")", "\n", "", "elif", "debias", ":", "\n", "            ", "return", "normal_debiased_ce", "(", "bin", "(", "data", ",", "bins", ")", ",", "power", "=", "p", ")", "\n", "", "else", ":", "\n", "            ", "return", "plugin_ce", "(", "bin", "(", "data", ",", "bins", ")", ",", "power", "=", "p", ")", "\n", "\n", "", "", "if", "mode", "!=", "\"marginal\"", "and", "mode", "!=", "\"top-label\"", ":", "\n", "        ", "raise", "ValueError", "(", "\"mode must be 'marginal' or 'top-label'.\"", ")", "\n", "", "probs", "=", "np", ".", "array", "(", "probs", ")", "\n", "labels", "=", "np", ".", "array", "(", "labels", ")", "\n", "if", "not", "(", "np", ".", "issubdtype", "(", "labels", ".", "dtype", ",", "np", ".", "integer", ")", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\"labels should an integer numpy array.\"", ")", "\n", "", "if", "len", "(", "labels", ".", "shape", ")", "!=", "1", ":", "\n", "        ", "raise", "ValueError", "(", "\"labels should be a 1D numpy array.\"", ")", "\n", "", "if", "probs", ".", "shape", "[", "0", "]", "!=", "labels", ".", "shape", "[", "0", "]", ":", "\n", "        ", "raise", "ValueError", "(", "\"labels and probs should have the same number of entries.\"", ")", "\n", "", "if", "len", "(", "probs", ".", "shape", ")", "==", "1", ":", "\n", "# If 1D (2-class setting), compute the regular calibration error.", "\n", "        ", "if", "np", ".", "min", "(", "labels", ")", "!=", "0", "or", "np", ".", "max", "(", "labels", ")", "!=", "1", ":", "\n", "            ", "raise", "ValueError", "(", "\"If probs is 1D, each label should be 0 or 1.\"", ")", "\n", "", "return", "ce_1d", "(", "probs", ",", "labels", ")", "\n", "", "elif", "len", "(", "probs", ".", "shape", ")", "==", "2", ":", "\n", "        ", "if", "np", ".", "min", "(", "labels", ")", "<", "0", "or", "np", ".", "max", "(", "labels", ")", ">", "probs", ".", "shape", "[", "1", "]", "-", "1", ":", "\n", "            ", "raise", "ValueError", "(", "\"labels should be between 0 and num_classes - 1.\"", ")", "\n", "", "if", "mode", "==", "\"marginal\"", ":", "\n", "            ", "labels_one_hot", "=", "get_labels_one_hot", "(", "labels", ",", "k", "=", "probs", ".", "shape", "[", "1", "]", ")", "\n", "assert", "probs", ".", "shape", "==", "labels_one_hot", ".", "shape", "\n", "marginal_ces", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "probs", ".", "shape", "[", "1", "]", ")", ":", "\n", "                ", "cur_probs", "=", "probs", "[", ":", ",", "k", "]", "\n", "cur_labels", "=", "labels_one_hot", "[", ":", ",", "k", "]", "\n", "marginal_ces", ".", "append", "(", "ce_1d", "(", "cur_probs", ",", "cur_labels", ")", "**", "p", ")", "\n", "", "return", "np", ".", "mean", "(", "marginal_ces", ")", "**", "(", "1.0", "/", "p", ")", "\n", "", "elif", "mode", "==", "\"top-label\"", ":", "\n", "            ", "preds", "=", "get_top_predictions", "(", "probs", ")", "\n", "correct", "=", "(", "preds", "==", "labels", ")", ".", "astype", "(", "probs", ".", "dtype", ")", "\n", "confidences", "=", "get_top_probs", "(", "probs", ")", "\n", "return", "ce_1d", "(", "confidences", ",", "correct", ")", "\n", "", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"probs should be a 1D or 2D numpy array.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.is_discrete": [[272, 283], ["numpy.array", "len", "metrics.enough_duplicates", "len", "range", "ValueError", "metrics.enough_duplicates"], "function", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.enough_duplicates", "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.enough_duplicates"], ["", "", "def", "is_discrete", "(", "probs", ")", ":", "\n", "    ", "probs", "=", "np", ".", "array", "(", "probs", ")", "\n", "if", "len", "(", "probs", ".", "shape", ")", "==", "1", ":", "\n", "        ", "return", "enough_duplicates", "(", "probs", ")", "\n", "", "elif", "len", "(", "probs", ".", "shape", ")", "==", "2", ":", "\n", "        ", "for", "k", "in", "range", "(", "probs", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "if", "not", "enough_duplicates", "(", "probs", "[", ":", ",", "k", "]", ")", ":", "\n", "                ", "return", "False", "\n", "", "", "return", "True", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"probs must be a 1D or 2D numpy array.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.enough_duplicates": [[285, 291], ["metrics.get_discrete_bins", "len"], "function", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.get_discrete_bins"], ["", "", "def", "enough_duplicates", "(", "array", ")", ":", "\n", "# TODO: instead check that we have at least 2 values in each bin.", "\n", "    ", "num_bins", "=", "get_discrete_bins", "(", "array", ")", "\n", "if", "len", "(", "num_bins", ")", "<", "array", ".", "shape", "[", "0", "]", "/", "4.0", ":", "\n", "        ", "return", "True", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.get_bin": [[296, 301], ["bisect.bisect_left"], "function", ["None"], ["", "def", "get_bin", "(", "pred_prob", ":", "float", ",", "bins", ":", "List", "[", "float", "]", ")", "->", "int", ":", "\n", "    ", "\"\"\"Get the index of the bin that pred_prob belongs in.\"\"\"", "\n", "assert", "0.0", "<=", "pred_prob", "<=", "1.0", "\n", "assert", "bins", "[", "-", "1", "]", "==", "1.0", "\n", "return", "bisect", ".", "bisect_left", "(", "bins", ",", "pred_prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.bin": [[303, 305], ["metrics.fast_bin"], "function", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.fast_bin"], ["", "def", "bin", "(", "data", ":", "Data", ",", "bins", ":", "Bins", ")", ":", "\n", "    ", "return", "fast_bin", "(", "data", ",", "bins", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.fast_bin": [[307, 315], ["numpy.array", "numpy.searchsorted", "numpy.argsort", "numpy.searchsorted", "numpy.split", "list", "range", "len"], "function", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.split"], ["", "def", "fast_bin", "(", "data", ",", "bins", ")", ":", "\n", "    ", "prob_label", "=", "np", ".", "array", "(", "data", ")", "\n", "bin_indices", "=", "np", ".", "searchsorted", "(", "bins", ",", "prob_label", "[", ":", ",", "0", "]", ")", "\n", "bin_sort_indices", "=", "np", ".", "argsort", "(", "bin_indices", ")", "\n", "sorted_bins", "=", "bin_indices", "[", "bin_sort_indices", "]", "\n", "splits", "=", "np", ".", "searchsorted", "(", "sorted_bins", ",", "list", "(", "range", "(", "1", ",", "len", "(", "bins", ")", ")", ")", ")", "\n", "binned_data", "=", "np", ".", "split", "(", "prob_label", "[", "bin_sort_indices", "]", ",", "splits", ")", "\n", "return", "binned_data", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.equal_bin": [[317, 320], ["sorted", "metrics.split"], "function", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.split"], ["", "def", "equal_bin", "(", "data", ":", "Data", ",", "num_bins", ":", "int", ")", "->", "BinnedData", ":", "\n", "    ", "sorted_probs", "=", "sorted", "(", "data", ")", "\n", "return", "split", "(", "sorted_probs", ",", "num_bins", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.difference_mean": [[325, 331], ["numpy.array", "numpy.mean", "numpy.mean"], "function", ["None"], ["", "def", "difference_mean", "(", "data", ":", "Data", ")", "->", "float", ":", "\n", "    ", "\"\"\"Returns average pred_prob - average label.\"\"\"", "\n", "data", "=", "np", ".", "array", "(", "data", ")", "\n", "ave_pred_prob", "=", "np", ".", "mean", "(", "data", "[", ":", ",", "0", "]", ")", "\n", "ave_label", "=", "np", ".", "mean", "(", "data", "[", ":", ",", "1", "]", ")", "\n", "return", "ave_pred_prob", "-", "ave_label", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.get_bin_probs": [[333, 339], ["list", "sum", "list", "list", "map", "map", "abs", "sum"], "function", ["None"], ["", "def", "get_bin_probs", "(", "binned_data", ":", "BinnedData", ")", "->", "List", "[", "float", "]", ":", "\n", "    ", "bin_sizes", "=", "list", "(", "map", "(", "len", ",", "binned_data", ")", ")", "\n", "num_data", "=", "sum", "(", "bin_sizes", ")", "\n", "bin_probs", "=", "list", "(", "map", "(", "lambda", "b", ":", "b", "*", "1.0", "/", "num_data", ",", "bin_sizes", ")", ")", "\n", "assert", "abs", "(", "sum", "(", "bin_probs", ")", "-", "1.0", ")", "<", "eps", "\n", "return", "list", "(", "bin_probs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.plugin_ce": [[341, 350], ["metrics.get_bin_probs", "list", "map", "numpy.dot", "len", "abs", "metrics.difference_mean"], "function", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.get_bin_probs", "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.difference_mean"], ["", "def", "plugin_ce", "(", "binned_data", ":", "BinnedData", ",", "power", "=", "2", ")", "->", "float", ":", "\n", "    ", "def", "bin_error", "(", "data", ":", "Data", ")", ":", "\n", "        ", "if", "len", "(", "data", ")", "==", "0", ":", "\n", "            ", "return", "0.0", "\n", "", "return", "abs", "(", "difference_mean", "(", "data", ")", ")", "**", "power", "\n", "\n", "", "bin_probs", "=", "get_bin_probs", "(", "binned_data", ")", "\n", "bin_errors", "=", "list", "(", "map", "(", "bin_error", ",", "binned_data", ")", ")", "\n", "return", "np", ".", "dot", "(", "bin_probs", ",", "bin_errors", ")", "**", "(", "1.0", "/", "power", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.unbiased_square_ce": [[352, 367], ["metrics.get_bin_probs", "list", "numpy.dot", "list", "numpy.mean", "map", "len", "abs", "map", "metrics.difference_mean", "len"], "function", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.get_bin_probs", "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.difference_mean"], ["", "def", "unbiased_square_ce", "(", "binned_data", ":", "BinnedData", ")", "->", "float", ":", "\n", "# Note, this is not the l2 CE. It does not take the square root.", "\n", "    ", "def", "bin_error", "(", "data", ":", "Data", ")", ":", "\n", "        ", "if", "len", "(", "data", ")", "<", "2", ":", "\n", "            ", "return", "0.0", "\n", "# raise ValueError('Too few values in bin, use fewer bins or get more data.')", "\n", "", "biased_estimate", "=", "abs", "(", "difference_mean", "(", "data", ")", ")", "**", "2", "\n", "label_values", "=", "list", "(", "map", "(", "lambda", "x", ":", "x", "[", "1", "]", ",", "data", ")", ")", "\n", "mean_label", "=", "np", ".", "mean", "(", "label_values", ")", "\n", "variance", "=", "mean_label", "*", "(", "1.0", "-", "mean_label", ")", "/", "(", "len", "(", "data", ")", "-", "1.0", ")", "\n", "return", "biased_estimate", "-", "variance", "\n", "\n", "", "bin_probs", "=", "get_bin_probs", "(", "binned_data", ")", "\n", "bin_errors", "=", "list", "(", "map", "(", "bin_error", ",", "binned_data", ")", ")", "\n", "return", "np", ".", "dot", "(", "bin_probs", ",", "bin_errors", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.unbiased_l2_ce": [[369, 371], ["max", "metrics.unbiased_square_ce"], "function", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.unbiased_square_ce"], ["", "def", "unbiased_l2_ce", "(", "binned_data", ":", "BinnedData", ")", "->", "float", ":", "\n", "    ", "return", "max", "(", "unbiased_square_ce", "(", "binned_data", ")", ",", "0.0", ")", "**", "0.5", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.normal_debiased_ce": [[373, 398], ["numpy.array", "numpy.array", "numpy.sqrt", "numpy.array", "metrics.plugin_ce", "metrics.get_bin_probs", "range", "numpy.mean", "list", "numpy.min", "ValueError", "list", "list", "numpy.random.normal", "numpy.power", "numpy.power", "resampled_ces.append", "map", "map", "map", "len", "len", "numpy.abs", "numpy.dot", "numpy.mean", "numpy.mean"], "function", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.plugin_ce", "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.get_bin_probs"], ["", "def", "normal_debiased_ce", "(", "binned_data", ":", "BinnedData", ",", "power", "=", "1", ",", "resamples", "=", "1000", ")", "->", "float", ":", "\n", "    ", "bin_sizes", "=", "np", ".", "array", "(", "list", "(", "map", "(", "len", ",", "binned_data", ")", ")", ")", "\n", "if", "np", ".", "min", "(", "bin_sizes", ")", "<=", "1", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "\"Every bin must have at least 2 points for debiased estimator. \"", "\n", "\"Try adding the argument debias=False to your function call.\"", "\n", ")", "\n", "", "label_means", "=", "np", ".", "array", "(", "list", "(", "map", "(", "lambda", "l", ":", "np", ".", "mean", "(", "[", "b", "for", "a", ",", "b", "in", "l", "]", ")", ",", "binned_data", ")", ")", ")", "\n", "label_stddev", "=", "np", ".", "sqrt", "(", "label_means", "*", "(", "1", "-", "label_means", ")", "/", "bin_sizes", ")", "\n", "model_vals", "=", "np", ".", "array", "(", "list", "(", "map", "(", "lambda", "l", ":", "np", ".", "mean", "(", "[", "a", "for", "a", ",", "b", "in", "l", "]", ")", ",", "binned_data", ")", ")", ")", "\n", "assert", "label_means", ".", "shape", "==", "(", "len", "(", "binned_data", ")", ",", ")", "\n", "assert", "model_vals", ".", "shape", "==", "(", "len", "(", "binned_data", ")", ",", ")", "\n", "ce", "=", "plugin_ce", "(", "binned_data", ",", "power", "=", "power", ")", "\n", "bin_probs", "=", "get_bin_probs", "(", "binned_data", ")", "\n", "resampled_ces", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "resamples", ")", ":", "\n", "        ", "label_samples", "=", "np", ".", "random", ".", "normal", "(", "loc", "=", "label_means", ",", "scale", "=", "label_stddev", ")", "\n", "# TODO: we can also correct the bias for the model_vals, although this is", "\n", "# smaller.", "\n", "diffs", "=", "np", ".", "power", "(", "np", ".", "abs", "(", "label_samples", "-", "model_vals", ")", ",", "power", ")", "\n", "cur_ce", "=", "np", ".", "power", "(", "np", ".", "dot", "(", "bin_probs", ",", "diffs", ")", ",", "1.0", "/", "power", ")", "\n", "resampled_ces", ".", "append", "(", "cur_ce", ")", "\n", "", "mean_resampled", "=", "np", ".", "mean", "(", "resampled_ces", ")", "\n", "bias_corrected_ce", "=", "2", "*", "ce", "-", "mean_resampled", "\n", "return", "bias_corrected_ce", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.eval_top_mse": [[403, 406], ["numpy.mean", "metrics.get_top_predictions", "numpy.square"], "function", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.get_top_predictions"], ["", "def", "eval_top_mse", "(", "calibrated_probs", ",", "probs", ",", "labels", ")", ":", "\n", "    ", "correct", "=", "get_top_predictions", "(", "probs", ")", "==", "labels", "\n", "return", "np", ".", "mean", "(", "np", ".", "square", "(", "calibrated_probs", "-", "correct", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.eval_marginal_mse": [[408, 416], ["metrics.get_labels_one_hot", "numpy.array", "numpy.mean", "numpy.square"], "function", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.get_labels_one_hot"], ["", "def", "eval_marginal_mse", "(", "calibrated_probs", ",", "probs", ",", "labels", ")", ":", "\n", "    ", "assert", "calibrated_probs", ".", "shape", "==", "probs", ".", "shape", "\n", "k", "=", "probs", ".", "shape", "[", "1", "]", "\n", "labels_one_hot", "=", "get_labels_one_hot", "(", "np", ".", "array", "(", "labels", ")", ",", "k", ")", "\n", "return", "(", "\n", "np", ".", "mean", "(", "np", ".", "square", "(", "calibrated_probs", "-", "labels_one_hot", ")", ")", "\n", "*", "calibrated_probs", ".", "shape", "[", "1", "]", "\n", "/", "2.0", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.resample": [[422, 425], ["numpy.random.choice", "list", "range", "len", "len"], "function", ["None"], ["", "def", "resample", "(", "data", ":", "List", "[", "T", "]", ")", "->", "List", "[", "T", "]", ":", "\n", "    ", "indices", "=", "np", ".", "random", ".", "choice", "(", "list", "(", "range", "(", "len", "(", "data", ")", ")", ")", ",", "size", "=", "len", "(", "data", ")", ",", "replace", "=", "True", ")", "\n", "return", "[", "data", "[", "i", "]", "for", "i", "in", "indices", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.bootstrap_uncertainty": [[427, 442], ["estimator", "functional", "range", "bootstrap_estimates.append", "estimator", "numpy.percentile", "numpy.percentile", "numpy.percentile", "metrics.resample"], "function", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.resample"], ["", "def", "bootstrap_uncertainty", "(", "\n", "data", ":", "List", "[", "T", "]", ",", "functional", ",", "estimator", "=", "None", ",", "alpha", "=", "10.0", ",", "num_samples", "=", "1000", "\n", ")", "->", "Tuple", "[", "float", ",", "float", "]", ":", "\n", "    ", "\"\"\"Return boostrap uncertained for 1 - alpha percent confidence interval.\"\"\"", "\n", "if", "estimator", "is", "None", ":", "\n", "        ", "estimator", "=", "functional", "\n", "", "estimate", "=", "estimator", "(", "data", ")", "\n", "plugin", "=", "functional", "(", "data", ")", "\n", "bootstrap_estimates", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "num_samples", ")", ":", "\n", "        ", "bootstrap_estimates", ".", "append", "(", "estimator", "(", "resample", "(", "data", ")", ")", ")", "\n", "", "return", "(", "\n", "plugin", "+", "estimate", "-", "np", ".", "percentile", "(", "bootstrap_estimates", ",", "100", "-", "alpha", "/", "2.0", ")", ",", "\n", "plugin", "+", "estimate", "-", "np", ".", "percentile", "(", "bootstrap_estimates", ",", "50", ")", ",", "\n", "plugin", "+", "estimate", "-", "np", ".", "percentile", "(", "bootstrap_estimates", ",", "alpha", "/", "2.0", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.precentile_bootstrap_uncertainty": [[445, 461], ["functional", "estimator", "range", "bootstrap_estimates.append", "estimator", "numpy.percentile", "numpy.percentile", "numpy.percentile", "metrics.resample", "numpy.percentile"], "function", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.resample"], ["", "def", "precentile_bootstrap_uncertainty", "(", "\n", "data", ":", "List", "[", "T", "]", ",", "functional", ",", "estimator", "=", "None", ",", "alpha", "=", "10.0", ",", "num_samples", "=", "1000", "\n", ")", "->", "Tuple", "[", "float", ",", "float", "]", ":", "\n", "    ", "\"\"\"Return boostrap uncertained for 1 - alpha percent confidence interval.\"\"\"", "\n", "if", "estimator", "is", "None", ":", "\n", "        ", "estimator", "=", "functional", "\n", "", "plugin", "=", "functional", "(", "data", ")", "\n", "estimate", "=", "estimator", "(", "data", ")", "\n", "bootstrap_estimates", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "num_samples", ")", ":", "\n", "        ", "bootstrap_estimates", ".", "append", "(", "estimator", "(", "resample", "(", "data", ")", ")", ")", "\n", "", "bias", "=", "2", "*", "np", ".", "percentile", "(", "bootstrap_estimates", ",", "50", ")", "-", "plugin", "-", "estimate", "\n", "return", "(", "\n", "np", ".", "percentile", "(", "bootstrap_estimates", ",", "alpha", "/", "2.0", ")", "-", "bias", ",", "\n", "np", ".", "percentile", "(", "bootstrap_estimates", ",", "50", ")", "-", "bias", ",", "\n", "np", ".", "percentile", "(", "bootstrap_estimates", ",", "100", "-", "alpha", "/", "2.0", ")", "-", "bias", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.bootstrap_std": [[464, 472], ["range", "numpy.std", "bootstrap_estimates.append", "estimator", "metrics.resample"], "function", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.resample"], ["", "def", "bootstrap_std", "(", "\n", "data", ":", "List", "[", "T", "]", ",", "estimator", "=", "None", ",", "num_samples", "=", "100", "\n", ")", "->", "Tuple", "[", "float", ",", "float", "]", ":", "\n", "    ", "\"\"\"Return boostrap uncertained for 1 - alpha percent confidence interval.\"\"\"", "\n", "bootstrap_estimates", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "num_samples", ")", ":", "\n", "        ", "bootstrap_estimates", ".", "append", "(", "estimator", "(", "resample", "(", "data", ")", ")", ")", "\n", "", "return", "np", ".", "std", "(", "bootstrap_estimates", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.get_platt_scaler": [[477, 495], ["sklearn.linear_model.LogisticRegression", "np.log.astype", "numpy.expand_dims", "numpy.clip", "numpy.log", "sklearn.linear_model.LogisticRegression.fit", "numpy.array", "numpy.clip", "numpy.log", "numpy.exp"], "function", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.metacal.metacal.MetaCalCoverageAcc.fit"], ["", "def", "get_platt_scaler", "(", "model_probs", ",", "labels", ")", ":", "\n", "    ", "clf", "=", "LogisticRegression", "(", "C", "=", "1e10", ",", "solver", "=", "\"lbfgs\"", ")", "\n", "eps", "=", "1e-12", "\n", "model_probs", "=", "model_probs", ".", "astype", "(", "dtype", "=", "np", ".", "float64", ")", "\n", "model_probs", "=", "np", ".", "expand_dims", "(", "model_probs", ",", "axis", "=", "-", "1", ")", "\n", "model_probs", "=", "np", ".", "clip", "(", "model_probs", ",", "eps", ",", "1", "-", "eps", ")", "\n", "model_probs", "=", "np", ".", "log", "(", "model_probs", "/", "(", "1", "-", "model_probs", ")", ")", "\n", "clf", ".", "fit", "(", "model_probs", ",", "labels", ")", "\n", "\n", "def", "calibrator", "(", "probs", ")", ":", "\n", "        ", "x", "=", "np", ".", "array", "(", "probs", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "x", "=", "np", ".", "clip", "(", "x", ",", "eps", ",", "1", "-", "eps", ")", "\n", "x", "=", "np", ".", "log", "(", "x", "/", "(", "1", "-", "x", ")", ")", "\n", "x", "=", "x", "*", "clf", ".", "coef_", "[", "0", "]", "+", "clf", ".", "intercept_", "\n", "output", "=", "1", "/", "(", "1", "+", "np", ".", "exp", "(", "-", "x", ")", ")", "\n", "return", "output", "\n", "\n", "", "return", "calibrator", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.get_histogram_calibrator": [[497, 520], ["zip", "numpy.array", "metrics.get_bin", "binned_values[].append", "numpy.mean", "metrics.get_histogram_calibrator.safe_mean"], "function", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.get_bin"], ["", "def", "get_histogram_calibrator", "(", "model_probs", ",", "values", ",", "bins", ")", ":", "\n", "    ", "binned_values", "=", "[", "[", "]", "for", "_", "in", "range", "(", "len", "(", "bins", ")", ")", "]", "\n", "for", "prob", ",", "value", "in", "zip", "(", "model_probs", ",", "values", ")", ":", "\n", "        ", "bin_idx", "=", "get_bin", "(", "prob", ",", "bins", ")", "\n", "binned_values", "[", "bin_idx", "]", ".", "append", "(", "float", "(", "value", ")", ")", "\n", "\n", "", "def", "safe_mean", "(", "values", ",", "bin_idx", ")", ":", "\n", "        ", "if", "len", "(", "values", ")", "==", "0", ":", "\n", "            ", "if", "bin_idx", "==", "0", ":", "\n", "                ", "return", "float", "(", "bins", "[", "0", "]", ")", "/", "2.0", "\n", "", "return", "float", "(", "bins", "[", "bin_idx", "]", "+", "bins", "[", "bin_idx", "-", "1", "]", ")", "/", "2.0", "\n", "", "return", "np", ".", "mean", "(", "values", ")", "\n", "\n", "", "bin_means", "=", "[", "\n", "safe_mean", "(", "values", ",", "bidx", ")", "for", "values", ",", "bidx", "in", "zip", "(", "binned_values", ",", "range", "(", "len", "(", "bins", ")", ")", ")", "\n", "]", "\n", "bin_means", "=", "np", ".", "array", "(", "bin_means", ")", "\n", "\n", "def", "calibrator", "(", "probs", ")", ":", "\n", "        ", "indices", "=", "np", ".", "searchsorted", "(", "bins", ",", "probs", ")", "\n", "return", "bin_means", "[", "indices", "]", "\n", "\n", "", "return", "calibrator", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.get_discrete_calibrator": [[522, 524], ["metrics.get_histogram_calibrator"], "function", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.get_histogram_calibrator"], ["", "def", "get_discrete_calibrator", "(", "model_probs", ",", "bins", ")", ":", "\n", "    ", "return", "get_histogram_calibrator", "(", "model_probs", ",", "model_probs", ",", "bins", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.save_test_probs_labels": [[529, 533], ["dataset.load_data", "model.predict", "pickle.dump", "open"], "function", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.metacal.utils.load_data", "home.repos.pwc.inspect_result.liu-yushan_calgnn.metacal.metacal.MetaCalCoverageAcc.predict"], ["", "def", "save_test_probs_labels", "(", "dataset", ",", "model", ",", "filename", ")", ":", "\n", "    ", "(", "x_train", ",", "y_train", ")", ",", "(", "x_test", ",", "y_test", ")", "=", "dataset", ".", "load_data", "(", ")", "\n", "probs", "=", "model", ".", "predict", "(", "x_test", ")", "\n", "pickle", ".", "dump", "(", "(", "probs", ",", "y_test", ")", ",", "open", "(", "filename", ",", "\"wb\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.load_test_probs_labels": [[535, 543], ["pickle.load", "numpy.random.choice", "numpy.array", "numpy.array", "open", "len", "list", "range", "len", "len"], "function", ["None"], ["", "def", "load_test_probs_labels", "(", "filename", ")", ":", "\n", "    ", "probs", ",", "labels", "=", "pickle", ".", "load", "(", "open", "(", "filename", ",", "\"rb\"", ")", ")", "\n", "if", "len", "(", "labels", ".", "shape", ")", ">", "1", ":", "\n", "        ", "labels", "=", "labels", "[", ":", ",", "0", "]", "\n", "", "indices", "=", "np", ".", "random", ".", "choice", "(", "list", "(", "range", "(", "len", "(", "probs", ")", ")", ")", ",", "size", "=", "len", "(", "probs", ")", ",", "replace", "=", "False", ")", "\n", "probs", "=", "np", ".", "array", "(", "[", "probs", "[", "i", "]", "for", "i", "in", "indices", "]", ")", "\n", "labels", "=", "np", ".", "array", "(", "[", "labels", "[", "i", "]", "for", "i", "in", "indices", "]", ")", "\n", "return", "probs", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.get_top_predictions": [[545, 547], ["numpy.argmax"], "function", ["None"], ["", "def", "get_top_predictions", "(", "probs", ")", ":", "\n", "    ", "return", "np", ".", "argmax", "(", "probs", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.get_top_probs": [[549, 551], ["numpy.max"], "function", ["None"], ["", "def", "get_top_probs", "(", "probs", ")", ":", "\n", "    ", "return", "np", ".", "max", "(", "probs", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.get_accuracy": [[553, 555], ["len", "sum"], "function", ["None"], ["", "def", "get_accuracy", "(", "probs", ",", "labels", ")", ":", "\n", "    ", "return", "sum", "(", "labels", "==", "predictions", ")", "*", "1.0", "/", "len", "(", "labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.get_labels_one_hot": [[557, 564], ["numpy.zeros", "numpy.min", "numpy.max", "numpy.arange"], "function", ["None"], ["", "def", "get_labels_one_hot", "(", "labels", ",", "k", ")", ":", "\n", "    ", "assert", "np", ".", "min", "(", "labels", ")", ">=", "0", "\n", "assert", "np", ".", "max", "(", "labels", ")", "<=", "k", "-", "1", "\n", "num_labels", "=", "labels", ".", "shape", "[", "0", "]", "\n", "labels_one_hot", "=", "np", ".", "zeros", "(", "(", "num_labels", ",", "k", ")", ")", "\n", "labels_one_hot", "[", "np", ".", "arange", "(", "num_labels", ")", ",", "labels", "]", "=", "1", "\n", "return", "labels_one_hot", "\n", "", ""]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.main_loss.train_gnn": [[33, 71], ["tqdm.tqdm", "print", "print", "print", "tuning.search_best_wd", "range", "utils.training", "results.append", "results_val.append", "numpy.sqrt", "numpy.sqrt", "numpy.mean", "numpy.mean", "numpy.round", "numpy.round", "numpy.round", "numpy.round", "numpy.var", "numpy.var"], "function", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.tuning.search_best_wd", "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.utils.training"], ["def", "train_gnn", "(", "dataset", ",", "gnn", ",", "optimizer", ",", "args", ")", ":", "\n", "    ", "if", "args", ".", "tune_wd", "==", "True", ":", "\n", "        ", "print", "(", "\"Tune weight decay...\"", ")", "\n", "weight_decay", "=", "search_best_wd", "(", "dataset", ",", "gnn", ",", "optimizer", ",", "args", ")", "\n", "optimizer", ".", "param_groups", "[", "0", "]", "[", "\"weight_decay\"", "]", "=", "weight_decay", "\n", "\n", "", "results", ",", "results_val", "=", "[", "]", ",", "[", "]", "\n", "\n", "for", "num_run", "in", "tqdm", "(", "range", "(", "args", ".", "num_runs", ")", ")", ":", "\n", "        ", "test_acc", ",", "val_acc", "=", "training", "(", "\n", "dataset", ",", "\n", "gnn", ",", "\n", "optimizer", ",", "\n", "args", ".", "model", ",", "\n", "args", ".", "dataset", ",", "\n", "args", ".", "epochs", ",", "\n", "args", ".", "add_cal_loss", ",", "\n", "args", ".", "early_stopping", ",", "\n", "args", ".", "patience", ",", "\n", "args", ".", "alpha", ",", "\n", "args", ".", "lmbda", ",", "\n", "num_run", ",", "\n", ")", "\n", "results", ".", "append", "(", "[", "test_acc", "]", ")", "\n", "results_val", ".", "append", "(", "[", "val_acc", "]", ")", "\n", "", "test_acc_mean", "=", "np", ".", "mean", "(", "results", ",", "axis", "=", "0", ")", "[", "0", "]", "*", "100", "\n", "test_acc_std", "=", "np", ".", "sqrt", "(", "np", ".", "var", "(", "results", ",", "axis", "=", "0", ")", "[", "0", "]", ")", "*", "100", "\n", "val_acc_mean", "=", "np", ".", "mean", "(", "results_val", ",", "axis", "=", "0", ")", "[", "0", "]", "*", "100", "\n", "val_acc_std", "=", "np", ".", "sqrt", "(", "np", ".", "var", "(", "results_val", ",", "axis", "=", "0", ")", "[", "0", "]", ")", "*", "100", "\n", "\n", "print", "(", "\n", "\"Test accuracy is: {}% \\u00B1 {}%\"", ".", "format", "(", "\n", "np", ".", "round", "(", "test_acc_mean", ",", "2", ")", ",", "np", ".", "round", "(", "test_acc_std", ",", "2", ")", "\n", ")", "\n", ")", "\n", "print", "(", "\n", "\"Val accuracy is: {}% \\u00B1 {}%\"", ".", "format", "(", "\n", "np", ".", "round", "(", "val_acc_mean", ",", "2", ")", ",", "np", ".", "round", "(", "val_acc_std", ",", "2", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.main_loss.calibrate_gnn": [[75, 134], ["tqdm.tqdm", "zip", "range", "gnn.load_state_dict", "torch.device", "gnn.to", "utils.cal_eval_model", "res_uncal.append", "str", "torch.load", "numpy.mean", "numpy.sqrt", "open", "f.write", "f.write", "f.write", "f.write", "f.write", "f.write", "f.write", "f.write", "f.write", "torch.cuda.is_available", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.var", "numpy.round", "numpy.round", "numpy.round", "numpy.round", "numpy.round", "numpy.round", "numpy.var", "numpy.var", "numpy.var"], "function", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.utils.cal_eval_model"], ["", "def", "calibrate_gnn", "(", "dataset", ",", "gnn", ",", "args", ")", ":", "\n", "    ", "data", "=", "dataset", "[", "0", "]", "\n", "res_uncal", ",", "res_his", ",", "res_iso", ",", "res_bbq", ",", "res_ts", ",", "res_meta", ",", "res_rbs", "=", "(", "\n", "[", "]", ",", "\n", "[", "]", ",", "\n", "[", "]", ",", "\n", "[", "]", ",", "\n", "[", "]", ",", "\n", "[", "]", ",", "\n", "[", "]", ",", "\n", ")", "\n", "checkpoints_path", "=", "\"checkpoints/{}_{}/\"", ".", "format", "(", "args", ".", "model", ",", "args", ".", "dataset", ")", "\n", "\n", "for", "num_run", "in", "tqdm", "(", "range", "(", "args", ".", "num_runs", ")", ")", ":", "\n", "        ", "save_path", "=", "checkpoints_path", "+", "str", "(", "num_run", ")", "\n", "gnn", ".", "load_state_dict", "(", "torch", ".", "load", "(", "save_path", ")", ")", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "gnn", ".", "to", "(", "device", ")", "\n", "\n", "# Uncal", "\n", "ece", ",", "marg_ece", ",", "nll", ",", "test_acc", "=", "cal_eval_model", "(", "\n", "gnn", ",", "dataset", ",", "device", ",", "args", ".", "dataset", ",", "args", ".", "model", "\n", ")", "\n", "res_uncal", ".", "append", "(", "[", "ece", ",", "marg_ece", ",", "nll", ",", "test_acc", "]", ")", "\n", "\n", "# Average", "\n", "", "cal_name_list", "=", "[", "\"Uncal\"", "]", "\n", "cal_results_map", "=", "{", "\"Uncal\"", ":", "res_uncal", "}", "\n", "cal_results_list", "=", "[", "cal_results_map", "[", "x", "]", "for", "x", "in", "cal_name_list", "]", "\n", "for", "result", ",", "cal_method", "in", "zip", "(", "cal_results_list", ",", "cal_name_list", ")", ":", "\n", "# 0: mean, 1: std", "\n", "        ", "ece0", ",", "marg_ece0", ",", "nll0", ",", "cal_test_acc0", "=", "np", ".", "mean", "(", "result", ",", "axis", "=", "0", ")", "*", "100", "\n", "nll0", "=", "nll0", "/", "100", "\n", "ece1", ",", "marg_ece1", ",", "nll1", ",", "cal_test_acc1", "=", "(", "\n", "np", ".", "sqrt", "(", "np", ".", "var", "(", "result", ",", "axis", "=", "0", ")", "[", "0", "]", ")", "*", "100", ",", "\n", "np", ".", "sqrt", "(", "np", ".", "var", "(", "result", ",", "axis", "=", "0", ")", "[", "1", "]", ")", "*", "100", ",", "\n", "np", ".", "sqrt", "(", "np", ".", "var", "(", "result", ",", "axis", "=", "0", ")", "[", "2", "]", ")", ",", "\n", "np", ".", "sqrt", "(", "np", ".", "var", "(", "result", ",", "axis", "=", "0", ")", "[", "3", "]", ")", "*", "100", ",", "\n", ")", "\n", "\n", "path", "=", "\"output/{}_{}_{}.txt\"", ".", "format", "(", "args", ".", "model", ",", "args", ".", "dataset", ",", "args", ".", "num_runs", ")", "\n", "with", "open", "(", "path", ",", "\"a\"", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "cal_method", ")", "\n", "f", ".", "write", "(", "\"\\n\"", ")", "\n", "f", ".", "write", "(", "\"ECE is: {}\\u00B1{}\"", ".", "format", "(", "np", ".", "round", "(", "ece0", ",", "2", ")", ",", "np", ".", "round", "(", "ece1", ",", "2", ")", ")", ")", "\n", "f", ".", "write", "(", "\"\\n\"", ")", "\n", "f", ".", "write", "(", "\n", "\"Marg. ECE is: {}\\u00B1{}\"", ".", "format", "(", "\n", "np", ".", "round", "(", "marg_ece0", ",", "2", ")", ",", "np", ".", "round", "(", "marg_ece1", ",", "2", ")", "\n", ")", "\n", ")", "\n", "f", ".", "write", "(", "\"\\n\"", ")", "\n", "f", ".", "write", "(", "\n", "\"Test accuracy is: {}\\u00B1{}\"", ".", "format", "(", "\n", "np", ".", "round", "(", "cal_test_acc0", ",", "2", ")", ",", "np", ".", "round", "(", "cal_test_acc1", ",", "2", ")", "\n", ")", "\n", ")", "\n", "f", ".", "write", "(", "\"\\n\"", ")", "\n", "f", ".", "write", "(", "\"\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.create_model.create_gcn_model": [[6, 10], ["models.GCN", "torch.optim.Adam", "models.GCN.parameters"], "function", ["None"], ["def", "create_gcn_model", "(", "dataset", ",", "nhid", "=", "16", ",", "dropout", "=", "0.", ",", "lr", "=", "0.01", ",", "weight_decay", "=", "5e-4", ")", ":", "\n", "    ", "model", "=", "GCN", "(", "dataset", ",", "nhid", ",", "dropout", ")", "\n", "optimizer", "=", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ",", "weight_decay", "=", "weight_decay", ")", "\n", "return", "model", ",", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.create_model.create_gat_model": [[12, 24], ["models.GAT", "torch.optim.Adam", "models.GAT.parameters"], "function", ["None"], ["", "def", "create_gat_model", "(", "dataset", ",", "nhid", "=", "8", ",", "first_heads", "=", "8", ",", "dropout", "=", "0.6", ")", ":", "\n", "    ", "if", "dataset", ".", "name", "in", "[", "\"Cora\"", ",", "\"Citeseer\"", "]", ":", "\n", "        ", "output_heads", "=", "1", "\n", "lr", "=", "0.005", "\n", "weight_decay", "=", "5e-4", "\n", "", "elif", "dataset", ".", "name", "==", "\"Pubmed\"", ":", "\n", "        ", "output_heads", "=", "8", "\n", "lr", "=", "0.01", "\n", "weight_decay", "=", "0.001", "\n", "", "model", "=", "GAT", "(", "dataset", ",", "nhid", ",", "first_heads", ",", "output_heads", ",", "dropout", ")", "\n", "optimizer", "=", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ",", "weight_decay", "=", "weight_decay", ")", "\n", "return", "model", ",", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.create_model.create_sgc_model": [[26, 30], ["models.SGC", "torch.optim.Adam", "models.SGC.parameters"], "function", ["None"], ["", "def", "create_gat_gcnparam_model", "(", "dataset", ")", ":", "\n", "    ", "lr", "=", "0.01", "\n", "weight_decay", "=", "5e-4", "\n", "model", "=", "GAT_GCNParameters", "(", "dataset", ")", "\n", "optimizer", "=", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ",", "weight_decay", "=", "weight_decay", ")", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.create_model.create_gfnn_model": [[32, 36], ["models.GFNN", "torch.optim.Adam", "models.GFNN.parameters"], "function", ["None"], ["", ""]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.create_model.create_appnp_model": [[38, 42], ["models.APPNPNet", "torch.optim.Adam", "models.APPNPNet.parameters"], "function", ["None"], []], "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.calibration_methods.CalibrationMethod.__init__": [[47, 49], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.metacal.metacal.MetaCalCoverageAcc.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.calibration_methods.CalibrationMethod.fit": [[50, 65], ["NotImplementedError"], "methods", ["None"], ["", "def", "fit", "(", "self", ",", "X", ",", "y", ")", ":", "\n", "        ", "\"\"\"\n        Fit the calibration method based on the given uncalibrated class probabilities X and ground truth labels y.\n        Parameters\n        ----------\n        X : array-like, shape (n_samples, n_classes)\n            Training data, i.e. predicted probabilities of the base classifier on the calibration set.\n        y : array-like, shape (n_samples,)\n            Target classes.\n        Returns\n        -------\n        self : object\n            Returns an instance of self.\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", "\"Subclass must implement this method.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.calibration_methods.CalibrationMethod.predict_proba": [[66, 80], ["NotImplementedError"], "methods", ["None"], ["", "def", "predict_proba", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"\n        Compute calibrated posterior probabilities for a given array of posterior probabilities from an arbitrary\n        classifier.\n        Parameters\n        ----------\n        X : array-like, shape (n_samples, n_classes)\n            The uncalibrated posterior probabilities.\n        Returns\n        -------\n        P : array, shape (n_samples, n_classes)\n            The predicted probabilities.\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", "\"Subclass must implement this method.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.calibration_methods.CalibrationMethod.predict": [[81, 95], ["numpy.argmax", "numpy.argmax", "calibration_methods.CalibrationMethod.predict_proba"], "methods", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.calibration_methods.TemperatureScaling_bins.predict_proba"], ["", "def", "predict", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"\n        Predict the class of new samples after scaling. Predictions are identical to the ones from the uncalibrated\n        classifier.\n        Parameters\n        ----------\n        X : array-like, shape (n_samples, n_classes)\n            The uncalibrated posterior probabilities.\n        Returns\n        -------\n        C : array, shape (n_samples,)\n            The predicted classes.\n        \"\"\"", "\n", "return", "np", ".", "argmax", "(", "self", ".", "predict_proba", "(", "X", ")", ",", "axis", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.calibration_methods.OneVsRestCalibrator.__init__": [[122, 125], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "calibrator", ",", "n_jobs", "=", "None", ")", ":", "\n", "        ", "self", ".", "calibrator", "=", "calibrator", "\n", "self", ".", "n_jobs", "=", "n_jobs", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.calibration_methods.OneVsRestCalibrator.fit": [[126, 163], ["sklearn.preprocessing.LabelBinarizer", "sklearn.preprocessing.LabelBinarizer", "sklearn.preprocessing.LabelBinarizer", "sklearn.preprocessing.LabelBinarizer", "sklearn.preprocessing.LabelBinarizer", "calibration_methods.OneVsRestCalibrator.label_binarizer_.fit_transform", "Y.tocsc.tocsc.tocsc", "col.toarray().ravel", "sklearn.utils._joblib.Parallel", "sklearn.utils._joblib.Parallel", "sklearn.utils._joblib.Parallel", "sklearn.utils._joblib.Parallel", "sklearn.utils._joblib.Parallel", "col.toarray", "sklearn.utils._joblib.delayed", "sklearn.utils._joblib.delayed", "sklearn.utils._joblib.delayed", "sklearn.utils._joblib.delayed", "sklearn.utils._joblib.delayed", "enumerate"], "methods", ["None"], ["", "def", "fit", "(", "self", ",", "X", ",", "y", ")", ":", "\n", "        ", "\"\"\"Fit underlying estimators.\n        Parameters\n        ----------\n        X : (sparse) array-like, shape = [n_samples, n_features]\n            Calibration data.\n        y : (sparse) array-like, shape = [n_samples, ]\n            Multi-class labels.\n        Returns\n        -------\n        self\n        \"\"\"", "\n", "# A sparse LabelBinarizer, with sparse_output=True, has been shown to", "\n", "# outperform or match a dense label binarizer in all cases and has also", "\n", "# resulted in less or equal memory consumption in the fit_ovr function", "\n", "# overall.", "\n", "self", ".", "label_binarizer_", "=", "LabelBinarizer", "(", "sparse_output", "=", "True", ")", "\n", "Y", "=", "self", ".", "label_binarizer_", ".", "fit_transform", "(", "y", ")", "\n", "Y", "=", "Y", ".", "tocsc", "(", ")", "\n", "self", ".", "classes_", "=", "self", ".", "label_binarizer_", ".", "classes_", "\n", "columns", "=", "(", "col", ".", "toarray", "(", ")", ".", "ravel", "(", ")", "for", "col", "in", "Y", ".", "T", ")", "\n", "# In cases where individual estimators are very fast to train setting", "\n", "# n_jobs > 1 in can results in slower performance due to the overhead", "\n", "# of spawning threads.  See joblib issue #112.", "\n", "self", ".", "calibrators_", "=", "Parallel", "(", "n_jobs", "=", "self", ".", "n_jobs", ")", "(", "\n", "delayed", "(", "OneVsRestCalibrator", ".", "_fit_binary", ")", "(", "\n", "self", ".", "calibrator", ",", "\n", "X", ",", "\n", "column", ",", "\n", "classes", "=", "[", "\n", "\"not %s\"", "%", "self", ".", "label_binarizer_", ".", "classes_", "[", "i", "]", ",", "\n", "self", ".", "label_binarizer_", ".", "classes_", "[", "i", "]", ",", "\n", "]", ",", "\n", ")", "\n", "for", "i", ",", "column", "in", "enumerate", "(", "columns", ")", "\n", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.calibration_methods.OneVsRestCalibrator.predict_proba": [[164, 209], ["sklearn.utils.validation.check_is_fitted", "sklearn.utils.validation.check_is_fitted", "sklearn.utils.validation.check_is_fitted", "sklearn.utils.validation.check_is_fitted", "sklearn.utils.validation.check_is_fitted", "sklearn.preprocessing.normalize", "sklearn.preprocessing.normalize", "sklearn.preprocessing.normalize", "sklearn.preprocessing.normalize", "sklearn.preprocessing.normalize", "sklearn.preprocessing.normalize", "sklearn.preprocessing.normalize", "sklearn.preprocessing.normalize", "sklearn.preprocessing.normalize", "sklearn.preprocessing.normalize", "sklearn.preprocessing.normalize", "sklearn.preprocessing.normalize", "sklearn.preprocessing.normalize", "sklearn.preprocessing.normalize", "sklearn.preprocessing.normalize", "sklearn.preprocessing.normalize", "sklearn.preprocessing.normalize", "sklearn.preprocessing.normalize", "sklearn.preprocessing.normalize", "sklearn.preprocessing.normalize", "sklearn.preprocessing.normalize", "sklearn.preprocessing.normalize", "sklearn.preprocessing.normalize", "sklearn.preprocessing.normalize", "sklearn.preprocessing.normalize", "numpy.clip", "numpy.clip", "numpy.array", "numpy.array", "len", "numpy.concatenate", "numpy.concatenate", "numpy.zeros", "numpy.zeros", "numpy.shape", "numpy.shape", "numpy.shape", "numpy.shape", "numpy.shape", "numpy.shape", "c.predict_proba", "enumerate", "numpy.column_stack", "numpy.column_stack", "numpy.sum", "numpy.sum", "numpy.delete", "numpy.delete"], "methods", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.calibration_methods.TemperatureScaling_bins.predict_proba"], ["", "def", "predict_proba", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"\n        Probability estimates.\n        The returned estimates for all classes are ordered by label of classes.\n        Parameters\n        ----------\n        X : array-like, shape = [n_samples, n_features]\n        Returns\n        -------\n        T : (sparse) array-like, shape = [n_samples, n_classes]\n            Returns the probability of the sample for each class in the model,\n            where classes are ordered as they are in `self.classes_`.\n        \"\"\"", "\n", "check_is_fitted", "(", "self", ",", "[", "\"classes_\"", ",", "\"calibrators_\"", "]", ")", "\n", "\n", "# Y[i, j] gives the probability that sample i has the label j.", "\n", "Y", "=", "np", ".", "array", "(", "\n", "[", "\n", "c", ".", "predict_proba", "(", "\n", "np", ".", "column_stack", "(", "\n", "[", "\n", "np", ".", "sum", "(", "np", ".", "delete", "(", "X", ",", "obj", "=", "i", ",", "axis", "=", "1", ")", ",", "axis", "=", "1", ")", ",", "\n", "X", "[", ":", ",", "self", ".", "classes_", "[", "i", "]", "]", ",", "\n", "]", "\n", ")", "\n", ")", "[", ":", ",", "1", "]", "\n", "for", "i", ",", "c", "in", "enumerate", "(", "self", ".", "calibrators_", ")", "\n", "]", "\n", ")", ".", "T", "\n", "\n", "if", "len", "(", "self", ".", "calibrators_", ")", "==", "1", ":", "\n", "# Only one estimator, but we still want to return probabilities for two classes.", "\n", "            ", "Y", "=", "np", ".", "concatenate", "(", "(", "(", "1", "-", "Y", ")", ",", "Y", ")", ",", "axis", "=", "1", ")", "\n", "\n", "# Pad with zeros for classes not in training data", "\n", "", "if", "np", ".", "shape", "(", "Y", ")", "[", "1", "]", "!=", "np", ".", "shape", "(", "X", ")", "[", "1", "]", ":", "\n", "            ", "p_pred", "=", "np", ".", "zeros", "(", "np", ".", "shape", "(", "X", ")", ")", "\n", "p_pred", "[", ":", ",", "self", ".", "classes_", "]", "=", "Y", "\n", "Y", "=", "p_pred", "\n", "\n", "# Normalize probabilities to 1.", "\n", "", "Y", "=", "sklearn", ".", "preprocessing", ".", "normalize", "(", "\n", "Y", ",", "norm", "=", "\"l1\"", ",", "axis", "=", "1", ",", "copy", "=", "True", ",", "return_norm", "=", "False", "\n", ")", "\n", "return", "np", ".", "clip", "(", "Y", ",", "a_min", "=", "0", ",", "a_max", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.calibration_methods.OneVsRestCalibrator.n_classes_": [[210, 213], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "n_classes_", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "classes_", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.calibration_methods.OneVsRestCalibrator._first_calibrator": [[214, 217], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "_first_calibrator", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "calibrators_", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.calibration_methods.OneVsRestCalibrator._fit_binary": [[218, 251], ["numpy.column_stack", "numpy.column_stack", "numpy.unique", "numpy.unique", "len", "_ConstantCalibrator().fit", "sklearn.base.clone", "sklearn.base.clone", "sklearn.base.clone", "sklearn.base.clone", "sklearn.base.clone", "sklearn.base.clone.fit", "sklearn.base.clone.fit", "sklearn.base.clone.fit", "sklearn.base.clone.fit", "sklearn.base.clone.fit", "numpy.sum", "numpy.sum", "warnings.warn", "numpy.delete", "numpy.delete", "_ConstantCalibrator", "str"], "methods", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.metacal.metacal.MetaCalCoverageAcc.fit", "home.repos.pwc.inspect_result.liu-yushan_calgnn.metacal.metacal.MetaCalCoverageAcc.fit", "home.repos.pwc.inspect_result.liu-yushan_calgnn.metacal.metacal.MetaCalCoverageAcc.fit", "home.repos.pwc.inspect_result.liu-yushan_calgnn.metacal.metacal.MetaCalCoverageAcc.fit", "home.repos.pwc.inspect_result.liu-yushan_calgnn.metacal.metacal.MetaCalCoverageAcc.fit", "home.repos.pwc.inspect_result.liu-yushan_calgnn.metacal.metacal.MetaCalCoverageAcc.fit"], ["", "@", "staticmethod", "\n", "def", "_fit_binary", "(", "calibrator", ",", "X", ",", "y", ",", "classes", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Fit a single binary calibrator.\n        Parameters\n        ----------\n        calibrator\n        X\n        y\n        classes\n        Returns\n        -------\n        \"\"\"", "\n", "# Sum probabilities of combined classes in calibration training data X", "\n", "cl", "=", "classes", "[", "1", "]", "\n", "X", "=", "np", ".", "column_stack", "(", "[", "np", ".", "sum", "(", "np", ".", "delete", "(", "X", ",", "cl", ",", "axis", "=", "1", ")", ",", "axis", "=", "1", ")", ",", "X", "[", ":", ",", "cl", "]", "]", ")", "\n", "\n", "# Check whether only one label is present in training data", "\n", "unique_y", "=", "np", ".", "unique", "(", "y", ")", "\n", "if", "len", "(", "unique_y", ")", "==", "1", ":", "\n", "            ", "if", "classes", "is", "not", "None", ":", "\n", "                ", "if", "y", "[", "0", "]", "==", "-", "1", ":", "\n", "                    ", "c", "=", "0", "\n", "", "else", ":", "\n", "                    ", "c", "=", "y", "[", "0", "]", "\n", "", "warnings", ".", "warn", "(", "\n", "\"Label %s is present in all training examples.\"", "%", "str", "(", "classes", "[", "c", "]", ")", "\n", ")", "\n", "", "calibrator", "=", "_ConstantCalibrator", "(", ")", ".", "fit", "(", "X", ",", "unique_y", ")", "\n", "", "else", ":", "\n", "            ", "calibrator", "=", "clone", "(", "calibrator", ")", "\n", "calibrator", ".", "fit", "(", "X", ",", "y", ")", "\n", "", "return", "calibrator", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.calibration_methods.HistogramBinning.__init__": [[254, 264], ["calibration_methods.CalibrationMethod.__init__", "ValueError"], "methods", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.metacal.metacal.MetaCalCoverageAcc.__init__"], ["    ", "def", "__init__", "(", "self", ",", "mode", "=", "\"equal_freq\"", ",", "n_bins", "=", "20", ",", "input_range", "=", "[", "0", ",", "1", "]", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "mode", "in", "[", "\"equal_width\"", ",", "\"equal_freq\"", "]", ":", "\n", "            ", "self", ".", "mode", "=", "mode", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Mode not recognized. Choose on of 'equal_width', or 'equal_freq'.\"", "\n", ")", "\n", "", "self", ".", "n_bins", "=", "n_bins", "\n", "self", ".", "input_range", "=", "input_range", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.calibration_methods.HistogramBinning.fit": [[265, 278], ["ValueError", "calibration_methods.HistogramBinning._fit_binary", "numpy.shape", "numpy.shape", "calibration_methods.OneVsRestCalibrator", "calibration_methods.HistogramBinning.onevsrest_calibrator_.fit", "numpy.shape", "numpy.shape", "sklearn.base.clone", "sklearn.base.clone", "sklearn.base.clone", "sklearn.base.clone", "sklearn.base.clone"], "methods", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.calibration_methods.BayesianBinningQuantiles._fit_binary", "home.repos.pwc.inspect_result.liu-yushan_calgnn.metacal.metacal.MetaCalCoverageAcc.fit"], ["", "def", "fit", "(", "self", ",", "X", ",", "y", ",", "n_jobs", "=", "None", ")", ":", "\n", "        ", "if", "X", ".", "ndim", "==", "1", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Calibration training data must have shape (n_samples, n_classes).\"", "\n", ")", "\n", "", "elif", "np", ".", "shape", "(", "X", ")", "[", "1", "]", "==", "2", ":", "\n", "            ", "return", "self", ".", "_fit_binary", "(", "X", ",", "y", ")", "\n", "", "elif", "np", ".", "shape", "(", "X", ")", "[", "1", "]", ">", "2", ":", "\n", "            ", "self", ".", "onevsrest_calibrator_", "=", "OneVsRestCalibrator", "(", "\n", "calibrator", "=", "clone", "(", "self", ")", ",", "n_jobs", "=", "n_jobs", "\n", ")", "\n", "self", ".", "onevsrest_calibrator_", ".", "fit", "(", "X", ",", "y", ")", "\n", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.calibration_methods.HistogramBinning._fit_binary": [[279, 310], ["scipy.stats.binned_statistic", "scipy.stats.binned_statistic", "scipy.stats.binned_statistic", "scipy.stats.binned_statistic", "scipy.stats.binned_statistic", "scipy.stats.binned_statistic", "scipy.stats.binned_statistic", "scipy.stats.binned_statistic", "scipy.stats.binned_statistic", "scipy.stats.binned_statistic", "scipy.stats.binned_statistic", "scipy.stats.binned_statistic", "scipy.stats.binned_statistic", "scipy.stats.binned_statistic", "scipy.stats.binned_statistic", "scipy.stats.binned_statistic", "scipy.stats.binned_statistic", "scipy.stats.binned_statistic", "scipy.stats.binned_statistic", "scipy.stats.binned_statistic", "scipy.stats.binned_statistic", "scipy.stats.binned_statistic", "scipy.stats.binned_statistic", "scipy.stats.binned_statistic", "scipy.stats.binned_statistic", "numpy.quantile", "numpy.quantile", "numpy.digitize", "numpy.digitize", "numpy.equal", "numpy.equal", "len", "y[].mean", "numpy.linspace", "numpy.linspace", "range", "len", "len"], "methods", ["None"], ["", "def", "_fit_binary", "(", "self", ",", "X", ",", "y", ")", ":", "\n", "        ", "if", "self", ".", "mode", "==", "\"equal_width\"", ":", "\n", "# Compute probability of class 1 in each equal width bin", "\n", "            ", "binned_stat", "=", "scipy", ".", "stats", ".", "binned_statistic", "(", "\n", "x", "=", "X", "[", ":", ",", "1", "]", ",", "\n", "values", "=", "np", ".", "equal", "(", "1", ",", "y", ")", ",", "\n", "statistic", "=", "\"mean\"", ",", "\n", "bins", "=", "self", ".", "n_bins", ",", "\n", "range", "=", "self", ".", "input_range", ",", "\n", ")", "\n", "self", ".", "prob_class_1", "=", "binned_stat", ".", "statistic", "\n", "self", ".", "binning", "=", "binned_stat", ".", "bin_edges", "\n", "", "elif", "self", ".", "mode", "==", "\"equal_freq\"", ":", "\n", "# Find binning based on equal frequency", "\n", "            ", "self", ".", "binning", "=", "np", ".", "quantile", "(", "\n", "X", "[", ":", ",", "1", "]", ",", "\n", "q", "=", "np", ".", "linspace", "(", "\n", "self", ".", "input_range", "[", "0", "]", ",", "self", ".", "input_range", "[", "1", "]", ",", "self", ".", "n_bins", "+", "1", "\n", ")", ",", "\n", ")", "\n", "\n", "# Compute probability of class 1 in equal frequency bins", "\n", "digitized", "=", "np", ".", "digitize", "(", "X", "[", ":", ",", "1", "]", ",", "bins", "=", "self", ".", "binning", ")", "\n", "digitized", "[", "digitized", "==", "len", "(", "self", ".", "binning", ")", "]", "=", "(", "\n", "len", "(", "self", ".", "binning", ")", "-", "1", "\n", ")", "# include rightmost edge in partition", "\n", "self", ".", "prob_class_1", "=", "[", "\n", "y", "[", "digitized", "==", "i", "]", ".", "mean", "(", ")", "for", "i", "in", "range", "(", "1", ",", "len", "(", "self", ".", "binning", ")", ")", "\n", "]", "\n", "\n", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.calibration_methods.HistogramBinning.predict_proba": [[311, 331], ["ValueError", "sklearn.utils.validation.check_is_fitted", "sklearn.utils.validation.check_is_fitted", "sklearn.utils.validation.check_is_fitted", "sklearn.utils.validation.check_is_fitted", "sklearn.utils.validation.check_is_fitted", "numpy.digitize", "numpy.digitize", "numpy.array", "numpy.array", "numpy.where", "numpy.where", "numpy.all", "numpy.all", "numpy.column_stack", "numpy.column_stack", "numpy.shape", "numpy.shape", "len", "numpy.isfinite", "numpy.isfinite", "numpy.isfinite", "numpy.isfinite", "sklearn.utils.validation.check_is_fitted", "sklearn.utils.validation.check_is_fitted", "sklearn.utils.validation.check_is_fitted", "sklearn.utils.validation.check_is_fitted", "sklearn.utils.validation.check_is_fitted", "calibration_methods.HistogramBinning.onevsrest_calibrator_.predict_proba", "numpy.shape", "numpy.shape", "len"], "methods", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.calibration_methods.TemperatureScaling_bins.predict_proba"], ["", "def", "predict_proba", "(", "self", ",", "X", ")", ":", "\n", "        ", "if", "X", ".", "ndim", "==", "1", ":", "\n", "            ", "raise", "ValueError", "(", "\"Calibration data must have shape (n_samples, n_classes).\"", ")", "\n", "", "elif", "np", ".", "shape", "(", "X", ")", "[", "1", "]", "==", "2", ":", "\n", "            ", "check_is_fitted", "(", "self", ",", "[", "\"binning\"", ",", "\"prob_class_1\"", "]", ")", "\n", "# Find bin of predictions", "\n", "digitized", "=", "np", ".", "digitize", "(", "X", "[", ":", ",", "1", "]", ",", "bins", "=", "self", ".", "binning", ")", "\n", "digitized", "[", "digitized", "==", "len", "(", "self", ".", "binning", ")", "]", "=", "(", "\n", "len", "(", "self", ".", "binning", ")", "-", "1", "\n", ")", "# include rightmost edge in partition", "\n", "# Transform to empirical frequency of class 1 in each bin", "\n", "p1", "=", "np", ".", "array", "(", "[", "self", ".", "prob_class_1", "[", "j", "]", "for", "j", "in", "(", "digitized", "-", "1", ")", "]", ")", "\n", "# If empirical frequency is NaN, do not change prediction", "\n", "p1", "=", "np", ".", "where", "(", "np", ".", "isfinite", "(", "p1", ")", ",", "p1", ",", "X", "[", ":", ",", "1", "]", ")", "\n", "assert", "np", ".", "all", "(", "np", ".", "isfinite", "(", "p1", ")", ")", ",", "\"Predictions are not all finite.\"", "\n", "\n", "return", "np", ".", "column_stack", "(", "[", "1", "-", "p1", ",", "p1", "]", ")", "\n", "", "elif", "np", ".", "shape", "(", "X", ")", "[", "1", "]", ">", "2", ":", "\n", "            ", "check_is_fitted", "(", "self", ",", "\"onevsrest_calibrator_\"", ")", "\n", "return", "self", ".", "onevsrest_calibrator_", ".", "predict_proba", "(", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.calibration_methods.IsotonicRegression.__init__": [[334, 337], ["calibration_methods.CalibrationMethod.__init__"], "methods", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.metacal.metacal.MetaCalCoverageAcc.__init__"], ["    ", "def", "__init__", "(", "self", ",", "out_of_bounds", "=", "\"clip\"", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "out_of_bounds", "=", "out_of_bounds", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.calibration_methods.IsotonicRegression.fit": [[338, 373], ["ValueError", "sklearn.isotonic.IsotonicRegression", "sklearn.isotonic.IsotonicRegression", "sklearn.isotonic.IsotonicRegression", "sklearn.isotonic.IsotonicRegression", "sklearn.isotonic.IsotonicRegression", "sklearn.isotonic.IsotonicRegression", "sklearn.isotonic.IsotonicRegression", "sklearn.isotonic.IsotonicRegression", "sklearn.isotonic.IsotonicRegression", "sklearn.isotonic.IsotonicRegression", "sklearn.isotonic.IsotonicRegression", "sklearn.isotonic.IsotonicRegression", "sklearn.isotonic.IsotonicRegression", "sklearn.isotonic.IsotonicRegression", "sklearn.isotonic.IsotonicRegression", "sklearn.isotonic.IsotonicRegression", "sklearn.isotonic.IsotonicRegression", "sklearn.isotonic.IsotonicRegression", "sklearn.isotonic.IsotonicRegression", "sklearn.isotonic.IsotonicRegression", "sklearn.isotonic.IsotonicRegression", "sklearn.isotonic.IsotonicRegression", "sklearn.isotonic.IsotonicRegression", "sklearn.isotonic.IsotonicRegression", "sklearn.isotonic.IsotonicRegression", "calibration_methods.IsotonicRegression.isotonic_regressor_.fit", "numpy.shape", "numpy.shape", "calibration_methods.OneVsRestCalibrator", "calibration_methods.IsotonicRegression.onevsrest_calibrator_.fit", "numpy.shape", "numpy.shape", "sklearn.base.clone", "sklearn.base.clone", "sklearn.base.clone", "sklearn.base.clone", "sklearn.base.clone"], "methods", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.metacal.metacal.MetaCalCoverageAcc.fit", "home.repos.pwc.inspect_result.liu-yushan_calgnn.metacal.metacal.MetaCalCoverageAcc.fit"], ["", "def", "fit", "(", "self", ",", "X", ",", "y", ",", "n_jobs", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Fit the calibration method based on the given uncalibrated class probabilities X and ground truth labels y.\n\n        Parameters\n        ----------\n        X : array-like, shape (n_samples, n_classes)\n            Training data, i.e. predicted probabilities of the base classifier on the calibration set.\n        y : array-like, shape (n_samples,)\n            Target classes.\n        n_jobs : int or None, optional (default=None)\n            The number of jobs to use for the computation.\n            ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context.\n            ``-1`` means using all processors.\n\n        Returns\n        -------\n        self : object\n            Returns an instance of self.\n        \"\"\"", "\n", "if", "X", ".", "ndim", "==", "1", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Calibration training data must have shape (n_samples, n_classes).\"", "\n", ")", "\n", "", "elif", "np", ".", "shape", "(", "X", ")", "[", "1", "]", "==", "2", ":", "\n", "            ", "self", ".", "isotonic_regressor_", "=", "sklearn", ".", "isotonic", ".", "IsotonicRegression", "(", "\n", "increasing", "=", "True", ",", "out_of_bounds", "=", "self", ".", "out_of_bounds", "\n", ")", "\n", "self", ".", "isotonic_regressor_", ".", "fit", "(", "X", "[", ":", ",", "1", "]", ",", "y", ")", "\n", "", "elif", "np", ".", "shape", "(", "X", ")", "[", "1", "]", ">", "2", ":", "\n", "            ", "self", ".", "onevsrest_calibrator_", "=", "OneVsRestCalibrator", "(", "\n", "calibrator", "=", "clone", "(", "self", ")", ",", "n_jobs", "=", "n_jobs", "\n", ")", "\n", "self", ".", "onevsrest_calibrator_", ".", "fit", "(", "X", ",", "y", ")", "\n", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.calibration_methods.IsotonicRegression.predict_proba": [[374, 398], ["ValueError", "sklearn.utils.validation.check_is_fitted", "sklearn.utils.validation.check_is_fitted", "sklearn.utils.validation.check_is_fitted", "sklearn.utils.validation.check_is_fitted", "sklearn.utils.validation.check_is_fitted", "calibration_methods.IsotonicRegression.isotonic_regressor_.predict", "numpy.column_stack", "numpy.column_stack", "numpy.shape", "numpy.shape", "sklearn.utils.validation.check_is_fitted", "sklearn.utils.validation.check_is_fitted", "sklearn.utils.validation.check_is_fitted", "sklearn.utils.validation.check_is_fitted", "sklearn.utils.validation.check_is_fitted", "calibration_methods.IsotonicRegression.onevsrest_calibrator_.predict_proba", "numpy.shape", "numpy.shape"], "methods", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.metacal.metacal.MetaCalCoverageAcc.predict", "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.calibration_methods.TemperatureScaling_bins.predict_proba"], ["", "def", "predict_proba", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"\n        Compute calibrated posterior probabilities for a given array of posterior probabilities from an arbitrary\n        classifier.\n\n        Parameters\n        ----------\n        X : array-like, shape (n_samples, n_classes)\n            The uncalibrated posterior probabilities.\n\n        Returns\n        -------\n        P : array, shape (n_samples, n_classes)\n            The predicted probabilities.\n        \"\"\"", "\n", "if", "X", ".", "ndim", "==", "1", ":", "\n", "            ", "raise", "ValueError", "(", "\"Calibration data must have shape (n_samples, n_classes).\"", ")", "\n", "", "elif", "np", ".", "shape", "(", "X", ")", "[", "1", "]", "==", "2", ":", "\n", "            ", "check_is_fitted", "(", "self", ",", "\"isotonic_regressor_\"", ")", "\n", "p1", "=", "self", ".", "isotonic_regressor_", ".", "predict", "(", "X", "[", ":", ",", "1", "]", ")", "\n", "return", "np", ".", "column_stack", "(", "[", "1", "-", "p1", ",", "p1", "]", ")", "\n", "", "elif", "np", ".", "shape", "(", "X", ")", "[", "1", "]", ">", "2", ":", "\n", "            ", "check_is_fitted", "(", "self", ",", "\"onevsrest_calibrator_\"", ")", "\n", "return", "self", ".", "onevsrest_calibrator_", ".", "predict_proba", "(", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.calibration_methods.BayesianBinningQuantiles.__init__": [[401, 405], ["calibration_methods.CalibrationMethod.__init__"], "methods", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.metacal.metacal.MetaCalCoverageAcc.__init__"], ["    ", "def", "__init__", "(", "self", ",", "C", "=", "10", ",", "input_range", "=", "[", "0", ",", "1", "]", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "C", "=", "C", "\n", "self", ".", "input_range", "=", "input_range", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.calibration_methods.BayesianBinningQuantiles._binning_model_logscore": [[406, 448], ["numpy.digitize", "numpy.digitize", "numpy.sum", "numpy.sum", "len", "numpy.histogram", "numpy.histogram", "len", "y[].sum", "numpy.finfo", "numpy.finfo", "numpy.log", "numpy.log", "range", "len", "len", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln", "scipy.special.gammaln"], "methods", ["None"], ["", "def", "_binning_model_logscore", "(", "self", ",", "probs", ",", "y", ",", "partition", ",", "N_prime", "=", "2", ")", ":", "\n", "# Setup", "\n", "        ", "B", "=", "len", "(", "partition", ")", "-", "1", "\n", "p", "=", "(", "partition", "[", "1", ":", "]", "-", "partition", "[", ":", "-", "1", "]", ")", "/", "2", "+", "partition", "[", ":", "-", "1", "]", "\n", "\n", "# Compute positive and negative samples in given bins", "\n", "N", "=", "np", ".", "histogram", "(", "probs", ",", "bins", "=", "partition", ")", "[", "0", "]", "\n", "\n", "digitized", "=", "np", ".", "digitize", "(", "probs", ",", "bins", "=", "partition", ")", "\n", "digitized", "[", "digitized", "==", "len", "(", "partition", ")", "]", "=", "(", "\n", "len", "(", "partition", ")", "-", "1", "\n", ")", "# include rightmost edge in partition", "\n", "m", "=", "[", "y", "[", "digitized", "==", "i", "]", ".", "sum", "(", ")", "for", "i", "in", "range", "(", "1", ",", "len", "(", "partition", ")", ")", "]", "\n", "n", "=", "N", "-", "m", "\n", "\n", "# Compute the parameters of the Beta priors", "\n", "tiny", "=", "np", ".", "finfo", "(", "\n", "np", ".", "float", "\n", ")", ".", "tiny", "# Avoid scipy.special.gammaln(0), which can arise if bin has zero width", "\n", "alpha", "=", "N_prime", "/", "B", "*", "p", "\n", "alpha", "[", "alpha", "==", "0", "]", "=", "tiny", "\n", "beta", "=", "N_prime", "/", "B", "*", "(", "1", "-", "p", ")", "\n", "beta", "[", "beta", "==", "0", "]", "=", "tiny", "\n", "\n", "# Prior for a given binning model (uniform)", "\n", "log_prior", "=", "-", "np", ".", "log", "(", "self", ".", "T", ")", "\n", "\n", "# Compute the marginal log-likelihood for the given binning model", "\n", "log_likelihood", "=", "np", ".", "sum", "(", "\n", "scipy", ".", "special", ".", "gammaln", "(", "N_prime", "/", "B", ")", "\n", "+", "scipy", ".", "special", ".", "gammaln", "(", "m", "+", "alpha", ")", "\n", "+", "scipy", ".", "special", ".", "gammaln", "(", "n", "+", "beta", ")", "\n", "-", "(", "\n", "scipy", ".", "special", ".", "gammaln", "(", "N", "+", "N_prime", "/", "B", ")", "\n", "+", "scipy", ".", "special", ".", "gammaln", "(", "alpha", ")", "\n", "+", "scipy", ".", "special", ".", "gammaln", "(", "beta", ")", "\n", ")", "\n", ")", "\n", "\n", "# Compute score for the given binning model", "\n", "log_score", "=", "log_prior", "+", "log_likelihood", "\n", "return", "log_score", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.calibration_methods.BayesianBinningQuantiles.fit": [[449, 466], ["ValueError", "calibration_methods.BayesianBinningQuantiles._fit_binary", "numpy.shape", "numpy.shape", "calibration_methods.OneVsRestCalibrator", "calibration_methods.BayesianBinningQuantiles.onevsrest_calibrator_.fit", "numpy.shape", "numpy.shape", "sklearn.base.clone", "sklearn.base.clone", "sklearn.base.clone", "sklearn.base.clone", "sklearn.base.clone"], "methods", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.calibration_methods.BayesianBinningQuantiles._fit_binary", "home.repos.pwc.inspect_result.liu-yushan_calgnn.metacal.metacal.MetaCalCoverageAcc.fit"], ["", "def", "fit", "(", "self", ",", "X", ",", "y", ",", "n_jobs", "=", "None", ")", ":", "\n", "        ", "if", "X", ".", "ndim", "==", "1", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Calibration training data must have shape (n_samples, n_classes).\"", "\n", ")", "\n", "", "elif", "np", ".", "shape", "(", "X", ")", "[", "1", "]", "==", "2", ":", "\n", "            ", "self", ".", "binnings", "=", "[", "]", "\n", "self", ".", "log_scores", "=", "[", "]", "\n", "self", ".", "prob_class_1", "=", "[", "]", "\n", "self", ".", "T", "=", "0", "\n", "return", "self", ".", "_fit_binary", "(", "X", ",", "y", ")", "\n", "", "elif", "np", ".", "shape", "(", "X", ")", "[", "1", "]", ">", "2", ":", "\n", "            ", "self", ".", "onevsrest_calibrator_", "=", "OneVsRestCalibrator", "(", "\n", "calibrator", "=", "clone", "(", "self", ")", ",", "n_jobs", "=", "n_jobs", "\n", ")", "\n", "self", ".", "onevsrest_calibrator_", ".", "fit", "(", "X", ",", "y", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.calibration_methods.BayesianBinningQuantiles._fit_binary": [[467, 521], ["len", "int", "int", "enumerate", "max", "min", "range", "numpy.quantile", "numpy.quantile", "calibration_methods.BayesianBinningQuantiles.binnings.append", "calibration_methods.BayesianBinningQuantiles.log_scores.append", "numpy.digitize", "numpy.digitize", "calibration_methods.BayesianBinningQuantiles.prob_class_1.append", "numpy.floor", "numpy.floor", "numpy.ceil", "numpy.ceil", "numpy.ceil", "numpy.ceil", "numpy.maximum.accumulate", "numpy.maximum.accumulate", "calibration_methods.BayesianBinningQuantiles._binning_model_logscore", "len", "numpy.linspace", "numpy.linspace", "a.mean", "calibration_methods.BayesianBinningQuantiles._fit_binary.empty_safe_bin_mean"], "methods", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.calibration_methods.BayesianBinningQuantiles._binning_model_logscore"], ["", "", "def", "_fit_binary", "(", "self", ",", "X", ",", "y", ")", ":", "\n", "# Determine number of bins", "\n", "        ", "N", "=", "len", "(", "y", ")", "\n", "min_bins", "=", "int", "(", "max", "(", "1", ",", "np", ".", "floor", "(", "N", "**", "(", "1", "/", "3", ")", "/", "self", ".", "C", ")", ")", ")", "\n", "max_bins", "=", "int", "(", "min", "(", "np", ".", "ceil", "(", "N", "/", "5", ")", ",", "np", ".", "ceil", "(", "self", ".", "C", "*", "N", "**", "(", "1", "/", "3", ")", ")", ")", ")", "\n", "self", ".", "T", "=", "max_bins", "-", "min_bins", "+", "1", "\n", "\n", "# Define (equal frequency) binning models and compute scores", "\n", "self", ".", "binnings", "=", "[", "]", "\n", "self", ".", "log_scores", "=", "[", "]", "\n", "self", ".", "prob_class_1", "=", "[", "]", "\n", "for", "i", ",", "n_bins", "in", "enumerate", "(", "range", "(", "min_bins", ",", "max_bins", "+", "1", ")", ")", ":", "\n", "# Compute binning from data and set outer edges to range", "\n", "            ", "binning_tmp", "=", "np", ".", "quantile", "(", "\n", "X", "[", ":", ",", "1", "]", ",", "\n", "q", "=", "np", ".", "linspace", "(", "self", ".", "input_range", "[", "0", "]", ",", "self", ".", "input_range", "[", "1", "]", ",", "n_bins", "+", "1", ")", ",", "\n", ")", "\n", "binning_tmp", "[", "0", "]", "=", "self", ".", "input_range", "[", "0", "]", "\n", "binning_tmp", "[", "-", "1", "]", "=", "self", ".", "input_range", "[", "1", "]", "\n", "# Enforce monotonicity of binning (np.quantile does not guarantee monotonicity)", "\n", "self", ".", "binnings", ".", "append", "(", "np", ".", "maximum", ".", "accumulate", "(", "binning_tmp", ")", ")", "\n", "# Compute score", "\n", "self", ".", "log_scores", ".", "append", "(", "\n", "self", ".", "_binning_model_logscore", "(", "\n", "probs", "=", "X", "[", ":", ",", "1", "]", ",", "y", "=", "y", ",", "partition", "=", "self", ".", "binnings", "[", "i", "]", "\n", ")", "\n", ")", "\n", "\n", "# Compute empirical accuracy for all bins", "\n", "digitized", "=", "np", ".", "digitize", "(", "X", "[", ":", ",", "1", "]", ",", "bins", "=", "self", ".", "binnings", "[", "i", "]", ")", "\n", "# include rightmost edge in partition", "\n", "digitized", "[", "digitized", "==", "len", "(", "self", ".", "binnings", "[", "i", "]", ")", "]", "=", "len", "(", "self", ".", "binnings", "[", "i", "]", ")", "-", "1", "\n", "\n", "def", "empty_safe_bin_mean", "(", "a", ",", "empty_value", ")", ":", "\n", "                ", "\"\"\"\n                Assign the bin mean to an empty bin. Corresponds to prior assumption of the underlying classifier\n                being calibrated.\n                \"\"\"", "\n", "if", "a", ".", "size", "==", "0", ":", "\n", "                    ", "return", "empty_value", "\n", "", "else", ":", "\n", "                    ", "return", "a", ".", "mean", "(", ")", "\n", "\n", "", "", "self", ".", "prob_class_1", ".", "append", "(", "\n", "[", "\n", "empty_safe_bin_mean", "(", "\n", "y", "[", "digitized", "==", "k", "]", ",", "\n", "empty_value", "=", "(", "self", ".", "binnings", "[", "i", "]", "[", "k", "]", "+", "self", ".", "binnings", "[", "i", "]", "[", "k", "-", "1", "]", ")", "/", "2", ",", "\n", ")", "\n", "for", "k", "in", "range", "(", "1", ",", "len", "(", "self", ".", "binnings", "[", "i", "]", ")", ")", "\n", "]", "\n", ")", "\n", "\n", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.calibration_methods.BayesianBinningQuantiles.predict_proba": [[522, 552], ["ValueError", "sklearn.utils.validation.check_is_fitted", "sklearn.utils.validation.check_is_fitted", "sklearn.utils.validation.check_is_fitted", "sklearn.utils.validation.check_is_fitted", "sklearn.utils.validation.check_is_fitted", "numpy.zeros", "numpy.zeros", "enumerate", "numpy.exp", "numpy.exp", "numpy.sum", "numpy.sum", "numpy.column_stack", "numpy.column_stack", "numpy.shape", "numpy.shape", "numpy.searchsorted", "numpy.searchsorted", "numpy.clip", "numpy.clip", "sklearn.utils.validation.check_is_fitted", "sklearn.utils.validation.check_is_fitted", "sklearn.utils.validation.check_is_fitted", "sklearn.utils.validation.check_is_fitted", "sklearn.utils.validation.check_is_fitted", "calibration_methods.BayesianBinningQuantiles.onevsrest_calibrator_.predict_proba", "numpy.array", "numpy.array", "scipy.special.logsumexp", "scipy.special.logsumexp", "scipy.special.logsumexp", "scipy.special.logsumexp", "scipy.special.logsumexp", "scipy.special.logsumexp", "scipy.special.logsumexp", "scipy.special.logsumexp", "scipy.special.logsumexp", "scipy.special.logsumexp", "scipy.special.logsumexp", "scipy.special.logsumexp", "scipy.special.logsumexp", "scipy.special.logsumexp", "scipy.special.logsumexp", "scipy.special.logsumexp", "scipy.special.logsumexp", "scipy.special.logsumexp", "scipy.special.logsumexp", "scipy.special.logsumexp", "scipy.special.logsumexp", "scipy.special.logsumexp", "scipy.special.logsumexp", "scipy.special.logsumexp", "scipy.special.logsumexp", "numpy.shape", "numpy.shape", "len", "numpy.shape", "numpy.shape", "len"], "methods", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.calibration_methods.TemperatureScaling_bins.predict_proba"], ["", "def", "predict_proba", "(", "self", ",", "X", ")", ":", "\n", "        ", "if", "X", ".", "ndim", "==", "1", ":", "\n", "            ", "raise", "ValueError", "(", "\"Calibration data must have shape (n_samples, n_classes).\"", ")", "\n", "", "elif", "np", ".", "shape", "(", "X", ")", "[", "1", "]", "==", "2", ":", "\n", "            ", "check_is_fitted", "(", "self", ",", "[", "\"binnings\"", ",", "\"log_scores\"", ",", "\"prob_class_1\"", ",", "\"T\"", "]", ")", "\n", "\n", "# Find bin for all binnings and the associated empirical accuracy", "\n", "posterior_prob_binnings", "=", "np", ".", "zeros", "(", "\n", "shape", "=", "[", "np", ".", "shape", "(", "X", ")", "[", "0", "]", ",", "len", "(", "self", ".", "binnings", ")", "]", "\n", ")", "\n", "for", "i", ",", "binning", "in", "enumerate", "(", "self", ".", "binnings", ")", ":", "\n", "                ", "bin_ids", "=", "np", ".", "searchsorted", "(", "binning", ",", "X", "[", ":", ",", "1", "]", ")", "\n", "bin_ids", "=", "np", ".", "clip", "(", "\n", "bin_ids", ",", "a_min", "=", "0", ",", "a_max", "=", "len", "(", "binning", ")", "-", "1", "\n", ")", "# necessary if X is out of range", "\n", "posterior_prob_binnings", "[", ":", ",", "i", "]", "=", "[", "\n", "self", ".", "prob_class_1", "[", "i", "]", "[", "j", "]", "for", "j", "in", "(", "bin_ids", "-", "1", ")", "\n", "]", "\n", "\n", "# Computed score-weighted average", "\n", "", "norm_weights", "=", "np", ".", "exp", "(", "\n", "np", ".", "array", "(", "self", ".", "log_scores", ")", "-", "scipy", ".", "special", ".", "logsumexp", "(", "self", ".", "log_scores", ")", "\n", ")", "\n", "posterior_prob", "=", "np", ".", "sum", "(", "posterior_prob_binnings", "*", "norm_weights", ",", "axis", "=", "1", ")", "\n", "\n", "# Compute probability for other class", "\n", "return", "np", ".", "column_stack", "(", "[", "1", "-", "posterior_prob", ",", "posterior_prob", "]", ")", "\n", "", "elif", "np", ".", "shape", "(", "X", ")", "[", "1", "]", ">", "2", ":", "\n", "            ", "check_is_fitted", "(", "self", ",", "\"onevsrest_calibrator_\"", ")", "\n", "return", "self", ".", "onevsrest_calibrator_", ".", "predict_proba", "(", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.calibration_methods.TemperatureScaling.__init__": [[555, 561], ["calibration_methods.CalibrationMethod.__init__", "ValueError"], "methods", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.metacal.metacal.MetaCalCoverageAcc.__init__"], ["    ", "def", "__init__", "(", "self", ",", "T_init", "=", "1", ",", "verbose", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "T_init", "<=", "0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Temperature not greater than 0.\"", ")", "\n", "", "self", ".", "T_init", "=", "T_init", "\n", "self", ".", "verbose", "=", "verbose", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.calibration_methods.TemperatureScaling.fit": [[562, 614], ["scipy.special.softmax", "scipy.special.softmax", "scipy.special.softmax", "scipy.special.softmax", "scipy.special.softmax", "scipy.special.softmax", "scipy.special.softmax", "scipy.special.softmax", "scipy.special.softmax", "scipy.special.softmax", "scipy.special.softmax", "scipy.special.softmax", "scipy.special.softmax", "scipy.special.softmax", "scipy.special.softmax", "scipy.special.softmax", "scipy.special.softmax", "scipy.special.softmax", "scipy.special.softmax", "scipy.special.softmax", "scipy.special.softmax", "scipy.special.softmax", "scipy.special.softmax", "scipy.special.softmax", "scipy.special.softmax", "numpy.exp", "numpy.exp", "scipy.optimize.fmin_bfgs", "scipy.optimize.fmin_bfgs", "scipy.optimize.fmin_bfgs", "scipy.optimize.fmin_bfgs", "scipy.optimize.fmin_bfgs", "scipy.optimize.fmin_bfgs", "scipy.optimize.fmin_bfgs", "scipy.optimize.fmin_bfgs", "scipy.optimize.fmin_bfgs", "scipy.optimize.fmin_bfgs", "scipy.optimize.fmin_bfgs", "scipy.optimize.fmin_bfgs", "scipy.optimize.fmin_bfgs", "scipy.optimize.fmin_bfgs", "scipy.optimize.fmin_bfgs", "scipy.optimize.fmin_bfgs", "scipy.optimize.fmin_bfgs", "scipy.optimize.fmin_bfgs", "scipy.optimize.fmin_bfgs", "scipy.optimize.fmin_bfgs", "scipy.optimize.fmin_bfgs", "scipy.optimize.fmin_bfgs", "scipy.optimize.fmin_bfgs", "scipy.optimize.fmin_bfgs", "scipy.optimize.fmin_bfgs", "ValueError", "numpy.finfo", "numpy.finfo", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.log", "numpy.log", "dT_i.sum", "numpy.array", "numpy.array", "numpy.arange", "numpy.arange", "X[].reshape", "numpy.array", "numpy.array", "numpy.arange", "numpy.arange"], "methods", ["None"], ["", "def", "fit", "(", "self", ",", "X", ",", "y", ")", ":", "\n", "        ", "\"\"\"\n        Fit the calibration method based on the given uncalibrated class probabilities or logits X and ground truth\n        labels y.\n        Parameters\n        ----------\n        X : array-like, shape (n_samples, n_classes)\n            Training data, i.e. predicted probabilities or logits of the base classifier on the calibration set.\n        y : array-like, shape (n_samples,)\n            Target classes.\n        Returns\n        -------\n        self : object\n            Returns an instance of self.\n        \"\"\"", "\n", "\n", "# Define objective function (NLL / cross entropy)", "\n", "def", "objective", "(", "T", ")", ":", "\n", "# Calibrate with given T", "\n", "            ", "P", "=", "scipy", ".", "special", ".", "softmax", "(", "X", "/", "T", ",", "axis", "=", "1", ")", "\n", "\n", "# Compute negative log-likelihood", "\n", "P_y", "=", "P", "[", "np", ".", "array", "(", "np", ".", "arange", "(", "0", ",", "X", ".", "shape", "[", "0", "]", ")", ")", ",", "y", "]", "\n", "tiny", "=", "np", ".", "finfo", "(", "np", ".", "float", ")", ".", "tiny", "# to avoid division by 0 warning", "\n", "NLL", "=", "-", "np", ".", "sum", "(", "np", ".", "log", "(", "P_y", "+", "tiny", ")", ")", "\n", "return", "NLL", "\n", "\n", "# Derivative of the objective with respect to the temperature T", "\n", "", "def", "gradient", "(", "T", ")", ":", "\n", "# Exponential terms", "\n", "            ", "E", "=", "np", ".", "exp", "(", "X", "/", "T", ")", "\n", "\n", "# Gradient", "\n", "dT_i", "=", "(", "\n", "np", ".", "sum", "(", "\n", "E", "*", "(", "X", "-", "X", "[", "np", ".", "array", "(", "np", ".", "arange", "(", "0", ",", "X", ".", "shape", "[", "0", "]", ")", ")", ",", "y", "]", ".", "reshape", "(", "-", "1", ",", "1", ")", ")", ",", "\n", "axis", "=", "1", ",", "\n", ")", "\n", ")", "/", "np", ".", "sum", "(", "E", ",", "axis", "=", "1", ")", "\n", "grad", "=", "-", "dT_i", ".", "sum", "(", ")", "/", "T", "**", "2", "\n", "return", "grad", "\n", "\n", "# Optimize", "\n", "", "self", ".", "T", "=", "scipy", ".", "optimize", ".", "fmin_bfgs", "(", "\n", "f", "=", "objective", ",", "x0", "=", "self", ".", "T_init", ",", "fprime", "=", "gradient", ",", "gtol", "=", "1e-06", ",", "disp", "=", "self", ".", "verbose", "\n", ")", "[", "0", "]", "\n", "\n", "# Check for T > 0", "\n", "if", "self", ".", "T", "<=", "0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Temperature not greater than 0.\"", ")", "\n", "\n", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.calibration_methods.TemperatureScaling.predict_proba": [[615, 632], ["sklearn.utils.validation.check_is_fitted", "sklearn.utils.validation.check_is_fitted", "sklearn.utils.validation.check_is_fitted", "sklearn.utils.validation.check_is_fitted", "sklearn.utils.validation.check_is_fitted", "scipy.special.softmax", "scipy.special.softmax", "scipy.special.softmax", "scipy.special.softmax", "scipy.special.softmax", "scipy.special.softmax", "scipy.special.softmax", "scipy.special.softmax", "scipy.special.softmax", "scipy.special.softmax", "scipy.special.softmax", "scipy.special.softmax", "scipy.special.softmax", "scipy.special.softmax", "scipy.special.softmax", "scipy.special.softmax", "scipy.special.softmax", "scipy.special.softmax", "scipy.special.softmax", "scipy.special.softmax", "scipy.special.softmax", "scipy.special.softmax", "scipy.special.softmax", "scipy.special.softmax", "scipy.special.softmax"], "methods", ["None"], ["", "def", "predict_proba", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"\n        Compute calibrated posterior probabilities for a given array of posterior probabilities from an arbitrary\n        classifier.\n        Parameters\n        ----------\n        X : array-like, shape (n_samples, n_classes)\n            The uncalibrated posterior probabilities.\n        Returns\n        -------\n        P : array, shape (n_samples, n_classes)\n            The predicted probabilities.\n        \"\"\"", "\n", "# Check is fitted", "\n", "check_is_fitted", "(", "self", ",", "\"T\"", ")", "\n", "# Transform with scaled softmax", "\n", "return", "scipy", ".", "special", ".", "softmax", "(", "X", "/", "self", ".", "T", ",", "axis", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.calibration_methods.TemperatureScaling.latent": [[633, 647], ["sklearn.utils.validation.check_is_fitted", "sklearn.utils.validation.check_is_fitted", "sklearn.utils.validation.check_is_fitted", "sklearn.utils.validation.check_is_fitted", "sklearn.utils.validation.check_is_fitted"], "methods", ["None"], ["", "def", "latent", "(", "self", ",", "z", ")", ":", "\n", "        ", "\"\"\"\n        Evaluate the latent function Tz of temperature scaling.\n        Parameters\n        ----------\n        z : array-like, shape=(n_evaluations,)\n            Input confidence for which to evaluate the latent function.\n        Returns\n        -------\n        f : array-like, shape=(n_evaluations,)\n            Values of the latent function at z.\n        \"\"\"", "\n", "check_is_fitted", "(", "self", ",", "\"T\"", ")", "\n", "return", "self", ".", "T", "*", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.calibration_methods.TemperatureScaling_bins.__init__": [[650, 656], ["calibration_methods.CalibrationMethod.__init__", "ValueError"], "methods", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.metacal.metacal.MetaCalCoverageAcc.__init__"], ["    ", "def", "__init__", "(", "self", ",", "T_init", "=", "1", ",", "verbose", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "T_init", "<=", "0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Temperature not greater than 0.\"", ")", "\n", "", "self", ".", "T_init", "=", "T_init", "\n", "self", ".", "verbose", "=", "verbose", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.calibration_methods.TemperatureScaling_bins.fit": [[657, 695], ["scipy.special.softmax", "scipy.special.softmax", "scipy.special.softmax", "scipy.special.softmax", "scipy.special.softmax", "scipy.special.softmax", "scipy.special.softmax", "scipy.special.softmax", "scipy.special.softmax", "scipy.special.softmax", "scipy.special.softmax", "scipy.special.softmax", "scipy.special.softmax", "scipy.special.softmax", "scipy.special.softmax", "scipy.special.softmax", "scipy.special.softmax", "scipy.special.softmax", "scipy.special.softmax", "scipy.special.softmax", "scipy.special.softmax", "scipy.special.softmax", "scipy.special.softmax", "scipy.special.softmax", "scipy.special.softmax", "numpy.exp", "numpy.exp", "scipy.optimize.fmin_bfgs", "scipy.optimize.fmin_bfgs", "scipy.optimize.fmin_bfgs", "scipy.optimize.fmin_bfgs", "scipy.optimize.fmin_bfgs", "scipy.optimize.fmin_bfgs", "scipy.optimize.fmin_bfgs", "scipy.optimize.fmin_bfgs", "scipy.optimize.fmin_bfgs", "scipy.optimize.fmin_bfgs", "scipy.optimize.fmin_bfgs", "scipy.optimize.fmin_bfgs", "scipy.optimize.fmin_bfgs", "scipy.optimize.fmin_bfgs", "scipy.optimize.fmin_bfgs", "scipy.optimize.fmin_bfgs", "scipy.optimize.fmin_bfgs", "scipy.optimize.fmin_bfgs", "scipy.optimize.fmin_bfgs", "scipy.optimize.fmin_bfgs", "scipy.optimize.fmin_bfgs", "scipy.optimize.fmin_bfgs", "scipy.optimize.fmin_bfgs", "scipy.optimize.fmin_bfgs", "scipy.optimize.fmin_bfgs", "ValueError", "numpy.finfo", "numpy.finfo", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.log", "numpy.log", "dT_i.sum", "numpy.array", "numpy.array", "numpy.arange", "numpy.arange", "X[].reshape", "numpy.array", "numpy.array", "numpy.arange", "numpy.arange"], "methods", ["None"], ["", "def", "fit", "(", "self", ",", "X", ",", "y", ")", ":", "\n", "\n", "# Define objective function (NLL / cross entropy)", "\n", "        ", "def", "objective", "(", "T", ")", ":", "\n", "# Calibrate with given T", "\n", "            ", "P", "=", "scipy", ".", "special", ".", "softmax", "(", "X", "/", "T", ",", "axis", "=", "1", ")", "\n", "\n", "# Compute negative log-likelihood", "\n", "P_y", "=", "P", "[", "np", ".", "array", "(", "np", ".", "arange", "(", "0", ",", "X", ".", "shape", "[", "0", "]", ")", ")", ",", "y", "]", "\n", "tiny", "=", "np", ".", "finfo", "(", "np", ".", "float", ")", ".", "tiny", "# to avoid division by 0 warning", "\n", "NLL", "=", "-", "np", ".", "sum", "(", "np", ".", "log", "(", "P_y", "+", "tiny", ")", ")", "\n", "return", "NLL", "\n", "\n", "# Derivative of the objective with respect to the temperature T", "\n", "", "def", "gradient", "(", "T", ")", ":", "\n", "# Exponential terms", "\n", "            ", "E", "=", "np", ".", "exp", "(", "X", "/", "T", ")", "\n", "\n", "# Gradient", "\n", "dT_i", "=", "(", "\n", "np", ".", "sum", "(", "\n", "E", "*", "(", "X", "-", "X", "[", "np", ".", "array", "(", "np", ".", "arange", "(", "0", ",", "X", ".", "shape", "[", "0", "]", ")", ")", ",", "y", "]", ".", "reshape", "(", "-", "1", ",", "1", ")", ")", ",", "\n", "axis", "=", "1", ",", "\n", ")", "\n", ")", "/", "np", ".", "sum", "(", "E", ",", "axis", "=", "1", ")", "\n", "grad", "=", "-", "dT_i", ".", "sum", "(", ")", "/", "T", "**", "2", "\n", "return", "grad", "\n", "\n", "# Optimize", "\n", "", "self", ".", "T", "=", "scipy", ".", "optimize", ".", "fmin_bfgs", "(", "\n", "f", "=", "objective", ",", "x0", "=", "self", ".", "T_init", ",", "fprime", "=", "gradient", ",", "gtol", "=", "1e-06", ",", "disp", "=", "self", ".", "verbose", "\n", ")", "[", "0", "]", "\n", "\n", "# Check for T > 0", "\n", "if", "self", ".", "T", "<=", "0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Temperature not greater than 0.\"", ")", "\n", "\n", "", "return", "self", ",", "self", ".", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.calibration_methods.TemperatureScaling_bins.predict_proba": [[696, 702], ["sklearn.utils.validation.check_is_fitted", "sklearn.utils.validation.check_is_fitted", "sklearn.utils.validation.check_is_fitted", "sklearn.utils.validation.check_is_fitted", "sklearn.utils.validation.check_is_fitted", "scipy.special.softmax", "scipy.special.softmax", "scipy.special.softmax", "scipy.special.softmax", "scipy.special.softmax", "scipy.special.softmax", "scipy.special.softmax", "scipy.special.softmax", "scipy.special.softmax", "scipy.special.softmax", "scipy.special.softmax", "scipy.special.softmax", "scipy.special.softmax", "scipy.special.softmax", "scipy.special.softmax", "scipy.special.softmax", "scipy.special.softmax", "scipy.special.softmax", "scipy.special.softmax", "scipy.special.softmax", "scipy.special.softmax", "scipy.special.softmax", "scipy.special.softmax", "scipy.special.softmax", "scipy.special.softmax"], "methods", ["None"], ["", "def", "predict_proba", "(", "self", ",", "X", ")", ":", "\n", "\n", "# Check is fitted", "\n", "        ", "check_is_fitted", "(", "self", ",", "\"T\"", ")", "\n", "# Transform with scaled softmax", "\n", "return", "scipy", ".", "special", ".", "softmax", "(", "X", "/", "self", ".", "T", ",", "axis", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.calibration_methods.bin_mask_eqdis.__init__": [[705, 714], ["torch.nn.Module.__init__", "torch.cuda.is_available", "calibration_methods.bin_mask_eqdis.get_equal_bins", "torch.is_tensor", "torch.tensor", "calibration_methods.bin_mask_eqdis.sm_vector.clone().cuda", "calibration_methods.bin_mask_eqdis.sm_vector.clone"], "methods", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.metacal.metacal.MetaCalCoverageAcc.__init__", "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.calibration_methods.bin_mask_eqdis.get_equal_bins"], ["    ", "def", "__init__", "(", "self", ",", "num_bins", ",", "sm_vector", ")", ":", "\n", "        ", "super", "(", "bin_mask_eqdis", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "not", "torch", ".", "is_tensor", "(", "sm_vector", ")", ":", "\n", "            ", "self", ".", "sm_vector", "=", "torch", ".", "tensor", "(", "sm_vector", ")", "\n", "", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "self", ".", "sm_vector", "=", "self", ".", "sm_vector", ".", "clone", "(", ")", ".", "cuda", "(", ")", "\n", "", "self", ".", "num_bins", "=", "num_bins", "\n", "self", ".", "bins", "=", "[", "]", "\n", "self", ".", "get_equal_bins", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.calibration_methods.bin_mask_eqdis.get_equal_bins": [[715, 718], ["range", "calibration_methods.bin_mask_eqdis.bins.append", "torch.tensor"], "methods", ["None"], ["", "def", "get_equal_bins", "(", "self", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "self", ".", "num_bins", ")", ":", "\n", "            ", "self", ".", "bins", ".", "append", "(", "torch", ".", "tensor", "(", "1", "/", "self", ".", "num_bins", "*", "(", "i", "+", "1", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.calibration_methods.bin_mask_eqdis.get_samples_mask_bins": [[719, 730], ["range", "mask_list.append", "mask_list.append"], "methods", ["None"], ["", "", "def", "get_samples_mask_bins", "(", "self", ")", ":", "\n", "        ", "mask_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_bins", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "mask_list", ".", "append", "(", "self", ".", "sm_vector", "<=", "self", ".", "bins", "[", "i", "]", ")", "\n", "", "else", ":", "\n", "                ", "mask_list", ".", "append", "(", "\n", "(", "self", ".", "bins", "[", "i", "-", "1", "]", "<", "self", ".", "sm_vector", ")", "\n", "*", "(", "self", ".", "sm_vector", "<=", "self", ".", "bins", "[", "i", "]", ")", "\n", ")", "\n", "", "", "return", "mask_list", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.calibration_methods.RBS": [[732, 797], ["torch_geometric.utils.to_networkx", "create_adjacency_matrix().todense", "torch.tensor", "sp.sparse.coo_matrix.sum", "torch.tensor", "range", "numpy.array", "calibration_methods.bin_mask_eqdis", "calibration_methods.bin_mask_eqdis.get_samples_mask_bins", "calibration_methods.bin_mask_eqdis", "calibration_methods.bin_mask_eqdis.get_samples_mask_bins", "range", "torch.softmax", "max", "scipy.sparse.coo_matrix", "torch.tensor().max", "torch.tensor.expand", "conf_AP.append", "calibration_methods.TemperatureScaling_bins", "calibration_methods.TemperatureScaling_bins.fit", "T_list.append", "torch.zeros_like", "range", "calibration_methods.RBS.get_rescaled_logits"], "function", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.calibration_methods.bin_mask_eqdis.get_samples_mask_bins", "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.calibration_methods.bin_mask_eqdis.get_samples_mask_bins", "home.repos.pwc.inspect_result.liu-yushan_calgnn.metacal.metacal.MetaCalCoverageAcc.fit"], ["", "", "def", "RBS", "(", "data", ",", "probs", ",", "val_logits", ",", "val_labels", ",", "test_logits", ",", "num_bins", ")", ":", "\n", "    ", "def", "create_adjacency_matrix", "(", "graph", ")", ":", "\n", "        ", "index_1", "=", "[", "edge", "[", "0", "]", "for", "edge", "in", "graph", ".", "edges", "(", ")", "]", "+", "[", "\n", "edge", "[", "1", "]", "for", "edge", "in", "graph", ".", "edges", "(", ")", "\n", "]", "\n", "index_2", "=", "[", "edge", "[", "1", "]", "for", "edge", "in", "graph", ".", "edges", "(", ")", "]", "+", "[", "\n", "edge", "[", "0", "]", "for", "edge", "in", "graph", ".", "edges", "(", ")", "\n", "]", "\n", "values", "=", "[", "1", "for", "edge", "in", "index_1", "]", "\n", "node_count", "=", "max", "(", "max", "(", "index_1", ")", "+", "1", ",", "max", "(", "index_2", ")", "+", "1", ")", "\n", "A", "=", "sp", ".", "sparse", ".", "coo_matrix", "(", "\n", "(", "values", ",", "(", "index_1", ",", "index_2", ")", ")", ",", "\n", "shape", "=", "(", "node_count", ",", "node_count", ")", ",", "\n", "dtype", "=", "np", ".", "float32", ",", "\n", ")", "\n", "return", "A", "\n", "\n", "", "graph", "=", "to_networkx", "(", "data", ")", "\n", "A", "=", "create_adjacency_matrix", "(", "graph", ")", ".", "todense", "(", ")", "\n", "\n", "# Calculate agg. probs", "\n", "AP", "=", "A", "*", "probs", "\n", "AP", "=", "torch", ".", "tensor", "(", "AP", ")", "\n", "num_neighbors", "=", "A", ".", "sum", "(", "1", ")", "\n", "num_neighbors", "=", "torch", ".", "tensor", "(", "num_neighbors", ")", "\n", "AP", "[", "torch", ".", "where", "(", "num_neighbors", "==", "0", ")", "[", "0", "]", "]", "=", "1", "\n", "num_neighbors", "[", "torch", ".", "where", "(", "num_neighbors", "==", "0", ")", "[", "0", "]", "]", "=", "1", "\n", "y_pred", "=", "torch", ".", "tensor", "(", "probs", ")", ".", "max", "(", "1", ")", "[", "1", "]", "\n", "AP", "=", "AP", "/", "num_neighbors", ".", "expand", "(", "AP", ".", "shape", "[", "0", "]", ",", "AP", ".", "shape", "[", "1", "]", ")", "\n", "conf_AP", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "AP", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "conf_AP", ".", "append", "(", "AP", "[", "i", ",", "y_pred", "[", "i", "]", "]", ")", "\n", "", "sm_prob", "=", "np", ".", "array", "(", "conf_AP", ")", "\n", "\n", "# Calculate val and test bins_mask_list", "\n", "sm_val", "=", "sm_prob", "[", "data", ".", "val_mask", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "]", "\n", "sm_TS_model", "=", "bin_mask_eqdis", "(", "num_bins", ",", "sm_val", ")", "\n", "bins_mask_list", "=", "sm_TS_model", ".", "get_samples_mask_bins", "(", ")", "\n", "sm_test", "=", "sm_prob", "[", "data", ".", "test_mask", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "]", "\n", "sm_TS_model", "=", "bin_mask_eqdis", "(", "num_bins", ",", "sm_test", ")", "\n", "bins_mask_list_test", "=", "sm_TS_model", ".", "get_samples_mask_bins", "(", ")", "\n", "\n", "# Learn temperature", "\n", "T_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_bins", ")", ":", "\n", "        ", "TS_model", "=", "TemperatureScaling_bins", "(", ")", "\n", "T", "=", "TS_model", ".", "fit", "(", "val_logits", "[", "bins_mask_list", "[", "i", "]", "]", ",", "val_labels", "[", "bins_mask_list", "[", "i", "]", "]", ")", "\n", "T_list", ".", "append", "(", "torch", ".", "tensor", "(", "T", "[", "1", "]", ")", ")", "\n", "\n", "", "def", "get_rescaled_logits", "(", "T_list", ",", "logits", ",", "bins_mask_list", ")", ":", "\n", "        ", "T", "=", "torch", ".", "zeros_like", "(", "logits", ")", "\n", "for", "i", "in", "range", "(", "num_bins", ")", ":", "\n", "# The i-th bin logits", "\n", "            ", "logits_i", "=", "logits", "[", "bins_mask_list", "[", "i", "]", "]", "\n", "# Expand temperature to match the size of logits", "\n", "T_i", "=", "T_list", "[", "i", "]", ".", "expand", "(", "logits_i", ".", "size", "(", "0", ")", ",", "logits_i", ".", "size", "(", "1", ")", ")", "\n", "T", "[", "bins_mask_list", "[", "i", "]", ",", ":", "]", "=", "T_i", ".", "float", "(", ")", "\n", "", "logits0", "=", "logits", "/", "T", "\n", "return", "logits0", "\n", "\n", "", "cal_probs_test", "=", "torch", ".", "softmax", "(", "\n", "get_rescaled_logits", "(", "T_list", ",", "torch", ".", "tensor", "(", "test_logits", ")", ",", "bins_mask_list_test", ")", ",", "1", "\n", ")", "\n", "\n", "return", "cal_probs_test", "\n", "", ""]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.utils.reproducibility_seed": [[13, 21], ["torch.manual_seed", "torch.manual_seed", "numpy.random.seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed"], "function", ["None"], ["def", "reproducibility_seed", "(", "a", ",", "b", ")", ":", "\n", "    ", "torch_init_seed", "=", "a", "\n", "torch", ".", "manual_seed", "(", "torch_init_seed", ")", "\n", "numpy_init_seed", "=", "b", "\n", "np", ".", "random", ".", "seed", "(", "numpy_init_seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "torch_init_seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.utils.training": [[23, 128], ["torch.no_grad", "torch.no_grad", "torch.device", "torch.device", "gnn.reset_parameters", "torch.cuda.is_available", "torch.cuda.is_available", "float", "range", "gnn.train", "optimizer.zero_grad", "torch.nll_loss", "F.nll_loss.backward", "optimizer.step", "F.nll_loss.item", "gnn.eval", "torch.softmax", "data", "gnn.to", "data.to", "os.path.exists", "os.makedirs", "torch.cuda.synchronize", "torch.cuda.synchronize", "utils.training.training_step"], "function", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.models.APPNPNet.reset_parameters"], ["", "def", "training", "(", "\n", "dataset", ",", "\n", "gnn", ",", "\n", "optimizer", ",", "\n", "gnn_name", ",", "\n", "data_name", ",", "\n", "epochs", ",", "\n", "add_cal_loss", ",", "\n", "early_stopping", ",", "\n", "patience", ",", "\n", "alpha", ",", "\n", "lmbda", ",", "\n", "num_run", ",", "\n", "edge_index", ",", "\n", "save_model", "=", "False", ",", "\n", ")", ":", "\n", "    ", "data", "=", "dataset", "[", "0", "]", "\n", "avg_conf_list", ",", "avg_acc_list", "=", "[", "]", ",", "[", "]", "\n", "\n", "def", "training_step", "(", "\n", "data", ",", "alpha", ",", "lmbda", ",", "epoch", ",", "epochs", ",", "add_cal_loss", ",", "device", ",", "edge_index", "\n", ")", ":", "\n", "        ", "gnn", ".", "train", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "logits", "=", "gnn", "(", "data", ",", "edge_index", ")", "[", "data", ".", "train_mask", "]", "\n", "nll_loss", "=", "F", ".", "nll_loss", "(", "logits", ",", "data", ".", "y", "[", "data", ".", "train_mask", "]", ")", "\n", "if", "add_cal_loss", ":", "\n", "            ", "loss_cal", "=", "cal_loss", "(", "\n", "data", ".", "y", "[", "data", ".", "train_mask", "]", ",", "logits", ",", "lmbda", ",", "epoch", ",", "epochs", ",", "device", "\n", ")", "\n", "loss", "=", "alpha", "*", "nll_loss", "+", "(", "1.0", "-", "alpha", ")", "*", "loss_cal", "\n", "", "else", ":", "\n", "            ", "loss", "=", "nll_loss", "\n", "", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "return", "loss", ".", "item", "(", ")", "\n", "\n", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "test_step", "(", "data", ",", "edge_index", ")", ":", "\n", "        ", "gnn", ".", "eval", "(", ")", "\n", "(", "\n", "logits", ",", "\n", "logits_list", ",", "\n", "probs_list", ",", "\n", "accs_list", ",", "\n", "losses_list", ",", "\n", "y_pred_list", ",", "\n", "y_true_list", ",", "\n", ")", "=", "(", "gnn", "(", "data", ",", "edge_index", ")", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ")", "\n", "probs_pred", "=", "F", ".", "softmax", "(", "logits", ",", "dim", "=", "1", ")", "\n", "\n", "for", "_", ",", "mask", "in", "data", "(", "\"train_mask\"", ",", "\"val_mask\"", ",", "\"test_mask\"", ")", ":", "\n", "            ", "y_pred", "=", "logits", "[", "mask", "]", ".", "max", "(", "1", ")", "[", "1", "]", "\n", "loss", "=", "F", ".", "nll_loss", "(", "logits", "[", "mask", "]", ",", "data", ".", "y", "[", "mask", "]", ")", "\n", "acc", "=", "y_pred", ".", "eq", "(", "data", ".", "y", "[", "mask", "]", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "mask", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "logits_list", ".", "append", "(", "logits", "[", "mask", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "probs_list", ".", "append", "(", "probs_pred", "[", "mask", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "accs_list", ".", "append", "(", "acc", ")", "\n", "losses_list", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "y_pred_list", ".", "append", "(", "y_pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "y_true_list", ".", "append", "(", "data", ".", "y", "[", "mask", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "", "return", "logits_list", ",", "probs_list", ",", "accs_list", ",", "losses_list", ",", "y_pred_list", ",", "y_true_list", "\n", "\n", "", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "gnn", ",", "data", "=", "gnn", ".", "to", "(", "device", ")", ",", "data", ".", "to", "(", "device", ")", "\n", "gnn", ".", "reset_parameters", "(", ")", "\n", "\n", "checkpoints_path", "=", "\"checkpoints/{}_{}/\"", ".", "format", "(", "gnn_name", ",", "data_name", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "checkpoints_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "checkpoints_path", ")", "\n", "\n", "", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "\n", "", "best_val_acc", ",", "best_test_acc", "=", "0", ",", "0", "\n", "best_val_loss", "=", "float", "(", "\"inf\"", ")", "\n", "val_loss_history", "=", "[", "]", "\n", "patience_cur", "=", "patience", "\n", "\n", "for", "epoch", "in", "range", "(", "epochs", ")", ":", "\n", "        ", "training_step", "(", "\n", "data", ",", "alpha", ",", "lmbda", ",", "epoch", ",", "epochs", ",", "add_cal_loss", ",", "device", ",", "edge_index", "\n", ")", "\n", "(", "\n", "[", "logits_train", ",", "logits_val", ",", "logits_test", "]", ",", "\n", "[", "probs_train", ",", "probs_val", ",", "probs_test", "]", ",", "\n", "[", "train_acc", ",", "val_acc", ",", "test_acc", "]", ",", "\n", "[", "train_loss", ",", "val_loss", ",", "test_loss", "]", ",", "\n", "[", "y_pred_train", ",", "y_pred_val", ",", "y_pred_test", "]", ",", "\n", "[", "y_true_train", ",", "y_true_val", ",", "y_true_test", "]", ",", "\n", ")", "=", "test_step", "(", "data", ",", "edge_index", ")", "\n", "\n", "if", "val_loss", "<", "best_val_loss", ":", "\n", "            ", "best_val_loss", "=", "val_loss", "\n", "best_val_acc", "=", "val_acc", "\n", "best_test_acc", "=", "test_acc", "\n", "patience_cur", "=", "patience", "\n", "if", "save_model", ":", "\n", "                ", "torch", ".", "save", "(", "gnn", ".", "state_dict", "(", ")", ",", "checkpoints_path", "+", "str", "(", "num_run", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "patience_cur", "-=", "1", "\n", "if", "not", "patience_cur", "and", "early_stopping", ":", "\n", "                ", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.utils.cal_loss": [[130, 198], ["torch.softmax", "utils.cal_loss.calculate_confidence_vec"], "function", ["None"], ["\n", "\n", "", "def", "cal_loss", "(", "y_true", ",", "logits", ",", "lmbda", ",", "epoch", ",", "epochs", ",", "device", ")", ":", "\n", "    ", "def", "calculate_confidence_vec", "(", "confidence", ",", "y_pred", ",", "y_true", ",", "device", ",", "bin_num", "=", "15", ")", ":", "\n", "        ", "def", "compute_binned_acc_conf", "(", "\n", "conf_thresh_lower", ",", "conf_thresh_upper", ",", "conf", ",", "pred", ",", "true", ",", "device", "\n", ")", ":", "\n", "            ", "filtered_tuples", "=", "[", "\n", "x", "\n", "for", "x", "in", "zip", "(", "pred", ",", "true", ",", "conf", ")", "\n", "if", "x", "[", "2", "]", ">", "conf_thresh_lower", "and", "x", "[", "2", "]", "<=", "conf_thresh_upper", "\n", "]", "\n", "if", "len", "(", "filtered_tuples", ")", "<", "1", ":", "\n", "                ", "return", "(", "\n", "torch", ".", "tensor", "(", "0.0", ")", ".", "to", "(", "device", ")", ",", "\n", "torch", ".", "tensor", "(", "0.0", ",", "requires_grad", "=", "True", ")", ".", "to", "(", "device", ")", ",", "\n", "torch", ".", "tensor", "(", "0", ")", ".", "to", "(", "device", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "                ", "correct", "=", "len", "(", "\n", "[", "x", "for", "x", "in", "filtered_tuples", "if", "x", "[", "0", "]", "==", "x", "[", "1", "]", "]", "\n", ")", "# How many correct labels", "\n", "len_bin", "=", "torch", ".", "tensor", "(", "len", "(", "filtered_tuples", ")", ")", ".", "to", "(", "\n", "device", "\n", ")", "# How many elements fall into the given bin", "\n", "avg_conf", "=", "(", "\n", "torch", ".", "sum", "(", "torch", ".", "stack", "(", "[", "x", "[", "2", "]", "for", "x", "in", "filtered_tuples", "]", ")", ")", "/", "len_bin", "\n", ")", "# Avg confidence of bin", "\n", "accuracy", "=", "(", "torch", ".", "tensor", "(", "correct", ",", "dtype", "=", "torch", ".", "float32", ")", "/", "len_bin", ")", ".", "to", "(", "\n", "device", "\n", ")", "# Accuracy of bin", "\n", "", "return", "accuracy", ",", "avg_conf", ",", "len_bin", "\n", "\n", "", "bin_size", "=", "torch", ".", "tensor", "(", "1.0", "/", "bin_num", ")", "\n", "upper_bounds", "=", "torch", ".", "arange", "(", "bin_size", ",", "1", "+", "bin_size", ",", "bin_size", ")", "\n", "\n", "accuracies", "=", "[", "]", "\n", "num_in_each_bin", "=", "[", "]", "\n", "\n", "for", "conf_thresh", "in", "upper_bounds", ":", "\n", "            ", "acc", ",", "avg_conf", ",", "len_bin", "=", "compute_binned_acc_conf", "(", "\n", "conf_thresh", "-", "bin_size", ",", "conf_thresh", ",", "confidence", ",", "y_pred", ",", "y_true", ",", "device", "\n", ")", "\n", "accuracies", ".", "append", "(", "acc", ")", "\n", "num_in_each_bin", ".", "append", "(", "len_bin", ")", "\n", "\n", "", "acc_all", "=", "[", "]", "\n", "for", "conf", "in", "confidence", ":", "\n", "            ", "idx", "=", "int", "(", "conf", "//", "(", "1", "/", "bin_num", ")", ")", "\n", "acc_all", ".", "append", "(", "accuracies", "[", "idx", "]", ")", "\n", "\n", "", "return", "torch", ".", "stack", "(", "acc_all", ")", ",", "torch", ".", "stack", "(", "num_in_each_bin", ")", "\n", "\n", "", "def", "calculate_cal_term", "(", "acc_vector", ",", "conf_vector", ",", "num_in_each_bin", ")", ":", "\n", "        ", "bin_error", "=", "acc_vector", "*", "torch", ".", "log", "(", "conf_vector", ")", "\n", "cal_term", "=", "-", "torch", ".", "sum", "(", "bin_error", ")", "\n", "return", "cal_term", "\n", "\n", "", "probs", "=", "F", ".", "softmax", "(", "logits", ",", "dim", "=", "1", ")", "\n", "y_pred", "=", "torch", ".", "max", "(", "logits", ",", "axis", "=", "1", ")", "[", "1", "]", "\n", "confidence", "=", "torch", ".", "max", "(", "probs", ",", "axis", "=", "1", ")", "[", "0", "]", "\n", "acc_vector", ",", "num_in_each_bin", "=", "calculate_confidence_vec", "(", "\n", "confidence", ",", "y_pred", ",", "y_true", ",", "device", "\n", ")", "\n", "cal_term", "=", "calculate_cal_term", "(", "acc_vector", ",", "confidence", ",", "num_in_each_bin", ")", "\n", "\n", "lmbda", "=", "torch", ".", "tensor", "(", "lmbda", ")", "\n", "annealing_coef", "=", "torch", ".", "min", "(", "lmbda", ",", "torch", ".", "tensor", "(", "lmbda", "*", "(", "epoch", "+", "1", ")", "/", "epochs", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.utils.cal_eval_model": [[200, 241], ["dataset[].to", "[].detach().cpu", "torch.softmax", "numpy.array", "prob_pred_test[].detach().cpu().numpy", "list", "list", "metrics.lower_bound_scaling_ce", "metrics.lower_bound_scaling_ce", "torch.no_grad", "torch.no_grad", "gnn.to", "gnn.eval", "len", "numpy.arange", "numpy.finfo", "F.softmax.detach().cpu().numpy", "test_labels.detach().cpu().numpy", "utils.draw_RD", "utils.draw_CH", "gnn", "[].detach", "prob_pred_test[].detach().cpu", "numpy.sum", "F.softmax.detach().cpu().numpy", "[].detach().cpu.numpy", "test_labels.detach().cpu().numpy", "F.softmax.detach().cpu().numpy", "[].detach().cpu.numpy", "test_labels.detach().cpu().numpy", "numpy.log", "F.softmax.detach().cpu", "test_labels.detach().cpu", "prob_pred_test[].detach", "F.softmax.detach().cpu", "test_labels.detach().cpu", "F.softmax.detach().cpu", "test_labels.detach().cpu", "test_logits.max", "F.softmax.detach", "test_labels.detach", "F.softmax.detach", "test_labels.detach", "F.softmax.detach", "test_labels.detach"], "function", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.lower_bound_scaling_ce", "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.lower_bound_scaling_ce", "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.utils.draw_RD", "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.utils.draw_CH"], ["\n", "\n", "", "def", "cal_eval_model", "(", "gnn", ",", "dataset", ",", "device", ",", "data_name", ",", "gnn_name", ",", "edge_index", ",", "draw", "=", "False", ")", ":", "\n", "    ", "data", "=", "dataset", "[", "0", "]", ".", "to", "(", "device", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "gnn", ".", "to", "(", "device", ")", "\n", "gnn", ".", "eval", "(", ")", "\n", "test_logits", "=", "gnn", "(", "data", ",", "edge_index", ")", "[", "data", ".", "test_mask", "]", "\n", "test_labels", "=", "data", ".", "y", "[", "data", ".", "test_mask", "]", "\n", "\n", "", "y_pred_test", "=", "test_logits", ".", "max", "(", "1", ")", "[", "1", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "prob_pred_test", "=", "F", ".", "softmax", "(", "test_logits", ",", "dim", "=", "1", ")", "\n", "test_acc", "=", "(", "y_pred_test", "==", "test_labels", ")", ".", "sum", "(", ")", "/", "len", "(", "test_labels", ")", "\n", "\n", "a", "=", "np", ".", "array", "(", "np", ".", "arange", "(", "0", ",", "prob_pred_test", ".", "shape", "[", "0", "]", ")", ")", "\n", "p_y", "=", "prob_pred_test", "[", "a", ",", "test_labels", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "tiny", "=", "np", ".", "finfo", "(", "np", ".", "float", ")", ".", "tiny", "# To avoid division by 0 warning", "\n", "nll", "=", "-", "np", ".", "sum", "(", "np", ".", "log", "(", "p_y", "+", "tiny", ")", ")", "/", "prob_pred_test", ".", "shape", "[", "0", "]", "\n", "\n", "probs", "=", "list", "(", "prob_pred_test", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "labels", "=", "list", "(", "test_labels", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "ece", "=", "lower_bound_scaling_ce", "(", "probs", ",", "labels", ",", "p", "=", "1", ",", "debias", "=", "False", ",", "mode", "=", "\"top-label\"", ")", "\n", "marg_ece", "=", "lower_bound_scaling_ce", "(", "probs", ",", "labels", ",", "p", "=", "1", ",", "debias", "=", "False", ",", "mode", "=", "\"marginal\"", ")", "\n", "\n", "if", "draw", ":", "\n", "        ", "draw_RD", "(", "\n", "prob_pred_test", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "y_pred_test", ".", "numpy", "(", ")", ",", "\n", "test_labels", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "data_name", ",", "\n", "gnn_name", ",", "\n", "ece", ",", "\n", ")", "\n", "draw_CH", "(", "\n", "prob_pred_test", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "y_pred_test", ".", "numpy", "(", ")", ",", "\n", "test_labels", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "data_name", ",", "\n", "gnn_name", ",", "\n", "ece", ",", "\n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.utils.draw_RD": [[243, 262], ["numpy.max", "utils.get_uncalibrated_res", "matplotlib.subplots", "utils.rel_diagram_sub", "fig.savefig"], "function", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.utils.get_uncalibrated_res", "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.utils.rel_diagram_sub"], ["\n", "\n", "", "def", "draw_RD", "(", "prob_pred_test", ",", "y_pred_test", ",", "y_true_test", ",", "data_name", ",", "gnn_name", ",", "ece", ")", ":", "\n", "    ", "confs_pred_test", "=", "np", ".", "max", "(", "prob_pred_test", ",", "axis", "=", "1", ")", "\n", "bin_info_uncal", "=", "get_uncalibrated_res", "(", "y_true_test", ",", "confs_pred_test", ",", "y_pred_test", ")", "\n", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "nrows", "=", "1", ",", "ncols", "=", "1", ",", "figsize", "=", "(", "5", ",", "5", ")", ",", "sharex", "=", "\"col\"", ",", "sharey", "=", "\"row\"", ")", "\n", "rel_diagram_sub", "(", "\n", "bin_info_uncal", "[", "0", "]", ",", "\n", "bin_info_uncal", "[", "1", "]", ",", "\n", "ax", ",", "\n", "15", ",", "\n", "\"Reliability Diagram\"", ",", "\n", "\"Confidence\"", ",", "\n", "\"Accuracy\"", ",", "\n", "ece", ",", "\n", "data_name", ",", "\n", "gnn_name", ",", "\n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.utils.draw_CH": [[264, 283], ["numpy.max", "utils.get_uncalibrated_res", "matplotlib.subplots", "utils.conf_histogram_sub", "fig.savefig"], "function", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.utils.get_uncalibrated_res", "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.utils.conf_histogram_sub"], ["\n", "\n", "", "def", "draw_CH", "(", "prob_pred_test", ",", "y_pred_test", ",", "y_true_test", ",", "data_name", ",", "gnn_name", ",", "ece", ")", ":", "\n", "    ", "confs_pred_test", "=", "np", ".", "max", "(", "prob_pred_test", ",", "axis", "=", "1", ")", "\n", "bin_info_uncal", "=", "get_uncalibrated_res", "(", "y_true_test", ",", "confs_pred_test", ",", "y_pred_test", ")", "\n", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "nrows", "=", "1", ",", "ncols", "=", "1", ",", "figsize", "=", "(", "5", ",", "5", ")", ",", "sharex", "=", "\"col\"", ",", "sharey", "=", "\"row\"", ")", "\n", "ave_conf", ",", "ave_acc", "=", "conf_histogram_sub", "(", "\n", "bin_info_uncal", "[", "0", "]", ",", "\n", "bin_info_uncal", "[", "1", "]", ",", "\n", "bin_info_uncal", "[", "2", "]", ",", "\n", "ax", ",", "\n", "15", ",", "\n", "\"Confidence Histogram\"", ",", "\n", "\"Confidence\"", ",", "\n", "\"Proportion of samples\"", ",", "\n", "ece", ",", "\n", "data_name", ",", "\n", "gnn_name", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.utils.cal_method_eval": [[285, 328], ["numpy.array", "prob_pred_test[].detach().cpu().numpy", "list", "list", "metrics.lower_bound_scaling_ce", "metrics.lower_bound_scaling_ce", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "numpy.arange", "numpy.finfo", "prob_pred_test.detach().cpu().numpy", "test_labels.detach().cpu().numpy", "test_probs.max", "len", "utils.draw_RD_cal", "utils.draw_CH_cal", "cal_test_acc.item", "prob_pred_test[].detach().cpu", "numpy.sum", "prob_pred_test.detach().cpu().numpy", "test_labels.detach().cpu().numpy", "prob_pred_test.detach().cpu().numpy", "test_labels.detach().cpu().numpy", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "numpy.log", "prob_pred_test.detach().cpu", "test_labels.detach().cpu", "prob_pred_test[].detach", "prob_pred_test.detach().cpu", "test_labels.detach().cpu", "prob_pred_test.detach().cpu", "test_labels.detach().cpu", "prob_pred_test.detach", "test_labels.detach", "prob_pred_test.detach", "test_labels.detach", "prob_pred_test.detach", "test_labels.detach"], "function", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.lower_bound_scaling_ce", "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.metrics.lower_bound_scaling_ce", "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.utils.draw_RD_cal", "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.utils.draw_CH_cal"], ["\n", "\n", "", "def", "get_uncalibrated_res", "(", "y_true", ",", "confs_pred", ",", "y_pred", ",", "M", "=", "15", ")", ":", "\n", "    ", "bin_size", "=", "1", "/", "M", "\n", "return", "get_bin_info", "(", "confs_pred", ",", "y_pred", ",", "y_true", ",", "bin_size", "=", "bin_size", ")", "\n", "\n", "\n", "", "def", "get_bin_info", "(", "conf", ",", "pred", ",", "true", ",", "bin_size", ")", ":", "\n", "    ", "\"\"\"\n    Get accuracy, confidence and elements in bin information for all the bins.\n    \"\"\"", "\n", "upper_bounds", "=", "np", ".", "arange", "(", "bin_size", ",", "1", "+", "bin_size", ",", "bin_size", ")", "\n", "\n", "accuracies", "=", "[", "]", "\n", "confidences", "=", "[", "]", "\n", "bin_lengths", "=", "[", "]", "\n", "\n", "for", "conf_thresh", "in", "upper_bounds", ":", "\n", "        ", "acc", ",", "avg_conf", ",", "len_bin", "=", "compute_acc_bin", "(", "\n", "conf_thresh", "-", "bin_size", ",", "conf_thresh", ",", "conf", ",", "pred", ",", "true", "\n", ")", "\n", "accuracies", ".", "append", "(", "acc", ")", "\n", "confidences", ".", "append", "(", "avg_conf", ")", "\n", "bin_lengths", ".", "append", "(", "len_bin", ")", "\n", "\n", "", "return", "accuracies", ",", "confidences", ",", "bin_lengths", "\n", "\n", "\n", "", "def", "compute_acc_bin", "(", "conf_thresh_lower", ",", "conf_thresh_upper", ",", "conf", ",", "pred", ",", "true", ")", ":", "\n", "    ", "\"\"\"\n    Computes accuracy and average confidence for bin.\n    \"\"\"", "\n", "filtered_tuples", "=", "[", "\n", "x", "\n", "for", "x", "in", "zip", "(", "pred", ",", "true", ",", "conf", ")", "\n", "if", "x", "[", "2", "]", ">", "conf_thresh_lower", "and", "x", "[", "2", "]", "<=", "conf_thresh_upper", "\n", "]", "\n", "if", "len", "(", "filtered_tuples", ")", "<", "1", ":", "\n", "        ", "return", "0", ",", "0", ",", "0", "\n", "", "else", ":", "\n", "        ", "correct", "=", "len", "(", "\n", "[", "x", "for", "x", "in", "filtered_tuples", "if", "x", "[", "0", "]", "==", "x", "[", "1", "]", "]", "\n", ")", "# How many correct labels", "\n", "len_bin", "=", "len", "(", "filtered_tuples", ")", "# How many elements fall into given bin", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.utils.draw_RD_cal": [[330, 352], ["numpy.max", "utils.get_uncalibrated_res", "matplotlib.subplots", "utils.rel_diagram_sub_cal", "fig.savefig"], "function", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.utils.get_uncalibrated_res", "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.utils.rel_diagram_sub_cal"], ["sum", "(", "[", "x", "[", "2", "]", "for", "x", "in", "filtered_tuples", "]", ")", "/", "len_bin", "\n", ")", "# Avg confidence of BIN", "\n", "accuracy", "=", "float", "(", "correct", ")", "/", "len_bin", "\n", "return", "accuracy", ",", "avg_conf", ",", "len_bin", "\n", "\n", "\n", "", "", "def", "rel_diagram_sub", "(", "\n", "accs", ",", "\n", "confs", ",", "\n", "ax", ",", "\n", "M", "=", "15", ",", "\n", "name", "=", "\"Reliability Diagram\"", ",", "\n", "xname", "=", "\"\"", ",", "\n", "yname", "=", "\"\"", ",", "\n", "ece", "=", "None", ",", "\n", "data_name", "=", "None", ",", "\n", "gnn_name", "=", "None", ",", "\n", ")", ":", "\n", "    ", "plt", ".", "plot", "(", "\n", "np", ".", "arange", "(", "0", ",", "1", ",", "0.1", ")", ",", "np", ".", "arange", "(", "0", ",", "1", ",", "0.1", ")", ",", "linestyle", "=", "\"dashed\"", ",", "color", "=", "\"black\"", "\n", ")", "\n", "\n", "bin_size", "=", "1", "/", "M", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.utils.draw_CH_cal": [[355, 378], ["numpy.max", "utils.get_uncalibrated_res", "matplotlib.subplots", "utils.conf_histogram_sub_cal", "fig.savefig"], "function", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.utils.get_uncalibrated_res", "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.utils.conf_histogram_sub_cal"], ["outputs", "=", "np", ".", "array", "(", "confs", ")", "\n", "acc", "=", "np", ".", "array", "(", "accs", ")", "\n", "# Bars with outputs", "\n", "output_plt", "=", "ax", ".", "bar", "(", "\n", "positions", ",", "acc", ",", "width", "=", "bin_size", ",", "edgecolor", "=", "\"black\"", ",", "color", "=", "\"blue\"", ",", "zorder", "=", "0", "\n", ")", "\n", "# Plot gap first, so its below everything", "\n", "gap_plt", "=", "ax", ".", "bar", "(", "\n", "positions", ",", "\n", "outputs", "-", "acc", ",", "\n", "bottom", "=", "acc", ",", "\n", "width", "=", "bin_size", ",", "\n", "edgecolor", "=", "\"red\"", ",", "\n", "hatch", "=", "\"/\"", ",", "\n", "color", "=", "\"red\"", ",", "\n", "alpha", "=", "0.3", ",", "\n", "linewidth", "=", "2", ",", "\n", "label", "=", "\"Gap\"", ",", "\n", "zorder", "=", "3", ",", "\n", ")", "\n", "ax", ".", "text", "(", "\n", "0.55", ",", "\n", "0.1", ",", "\n", "\"ECE = {}%\"", ".", "format", "(", "round", "(", "ece", "*", "100", ",", "1", ")", ")", ",", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.utils.produce_logits": [[381, 428], ["gnn.to", "data.to.to", "torch.softmax().detach().cpu().numpy", "torch.cat().to.detach().cpu().numpy", "torch.softmax().detach().cpu().numpy", "torch.cat().to.detach().cpu().numpy", "logits_list.append", "torch.cat().to", "torch.cat().to", "torch.softmax().detach().cpu().numpy", "torch.no_grad", "torch.no_grad", "gnn.eval", "test_logits_list.append", "test_labels_list.append", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.no_grad", "torch.no_grad", "gnn.eval", "val_logits_list.append", "val_labels_list.append", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to.detach().cpu().numpy", "torch.cat().to.detach().cpu().numpy", "torch.no_grad", "torch.no_grad", "gnn.eval", "gnn", "gnn.detach().cpu().numpy", "gnn", "gnn", "torch.softmax().detach().cpu", "torch.cat().to.detach().cpu", "torch.softmax().detach().cpu", "torch.cat().to.detach().cpu", "torch.cat", "torch.cat", "torch.softmax().detach().cpu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat().to.detach().cpu", "torch.cat().to.detach().cpu", "gnn.detach().cpu", "torch.softmax().detach", "torch.cat().to.detach", "torch.softmax().detach", "torch.cat().to.detach", "torch.softmax().detach", "torch.cat().to.detach", "torch.cat().to.detach", "gnn.detach", "torch.softmax", "torch.softmax", "torch.softmax"], "function", ["None"], [")", "\n", "\n", "# Line plot with center line.", "\n", "ax", ".", "set_aspect", "(", "\"equal\"", ")", "\n", "ax", ".", "plot", "(", "[", "0", ",", "1", "]", ",", "[", "0", ",", "1", "]", ",", "linestyle", "=", "\"--\"", ",", "color", "=", "\"grey\"", ")", "\n", "ax", ".", "legend", "(", "handles", "=", "[", "gap_plt", ",", "output_plt", "]", ")", "\n", "ax", ".", "legend", "(", "loc", "=", "2", ",", "prop", "=", "{", "\"size\"", ":", "14", "}", ")", "\n", "ax", ".", "set_xlim", "(", "0", ",", "1", ")", "\n", "ax", ".", "set_ylim", "(", "0", ",", "1", ")", "\n", "ax", ".", "set_title", "(", "\"{} on {}\"", ".", "format", "(", "gnn_name", ".", "upper", "(", ")", ",", "data_name", ")", ",", "fontsize", "=", "14", ")", "\n", "ax", ".", "set_xlabel", "(", "xname", ",", "fontsize", "=", "14", ",", "color", "=", "\"black\"", ")", "\n", "ax", ".", "set_ylabel", "(", "yname", ",", "fontsize", "=", "14", ",", "color", "=", "\"black\"", ")", "\n", "ax", ".", "xaxis", ".", "set_tick_params", "(", "labelsize", "=", "13", ")", "\n", "ax", ".", "yaxis", ".", "set_tick_params", "(", "labelsize", "=", "13", ")", "\n", "\n", "\n", "", "def", "conf_histogram_sub", "(", "\n", "accs", ",", "\n", "confs", ",", "\n", "nums", ",", "\n", "ax", ",", "\n", "M", "=", "15", ",", "\n", "name", "=", "\"Reliability Diagram\"", ",", "\n", "xname", "=", "\"\"", ",", "\n", "yname", "=", "\"\"", ",", "\n", "ece", "=", "None", ",", "\n", "data_name", "=", "None", ",", "\n", "gnn_name", "=", "None", ",", "\n", ")", ":", "\n", "    ", "acc", "=", "np", ".", "array", "(", "accs", ")", "\n", "conf", "=", "np", ".", "array", "(", "confs", ")", "\n", "num", "=", "np", ".", "array", "(", "nums", ")", "/", "np", ".", "array", "(", "nums", ")", ".", "sum", "(", ")", "\n", "bin_size", "=", "1", "/", "M", "\n", "# Center of each bin", "\n", "positions", "=", "np", ".", "arange", "(", "0", "+", "bin_size", "/", "2", ",", "1", "+", "bin_size", "/", "2", ",", "bin_size", ")", "\n", "# Bars with nums", "\n", "output_plt", "=", "ax", ".", "bar", "(", "\n", "positions", ",", "num", ",", "width", "=", "bin_size", ",", "edgecolor", "=", "\"black\"", ",", "color", "=", "\"blue\"", ",", "zorder", "=", "0", "\n", ")", "\n", "ave_conf", "=", "(", "conf", "*", "num", ")", ".", "sum", "(", ")", "\n", "ax", ".", "plot", "(", "\n", "[", "ave_conf", ",", "ave_conf", "]", ",", "[", "0", ",", "1", "]", ",", "linestyle", "=", "\"-\"", ",", "color", "=", "\"blue\"", ",", "label", "=", "\"Avg. conf.\"", "\n", ")", "\n", "ave_acc", "=", "(", "acc", "*", "num", ")", ".", "sum", "(", ")", "\n", "ax", ".", "plot", "(", "[", "ave_acc", ",", "ave_acc", "]", ",", "[", "0", ",", "1", "]", ",", "linestyle", "=", "\"--\"", ",", "color", "=", "\"red\"", ",", "label", "=", "\"Acc.\"", ")", "\n", "ax", ".", "legend", "(", "loc", "=", "2", ",", "prop", "=", "{", "\"size\"", ":", "14", "}", ")", "\n", "ax", ".", "set_xlim", "(", "0", ",", "1", ")", "\n", "ax", ".", "set_ylim", "(", "0", ",", "1", ")", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.utils.get_uncalibrated_res": [[431, 434], ["utils.get_bin_info"], "function", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.utils.get_bin_info"], ["ax", ".", "set_ylabel", "(", "yname", ",", "fontsize", "=", "14", ",", "color", "=", "\"black\"", ")", "\n", "ax", ".", "xaxis", ".", "set_tick_params", "(", "labelsize", "=", "13", ")", "\n", "ax", ".", "yaxis", ".", "set_tick_params", "(", "labelsize", "=", "13", ")", "\n", "return", "ave_conf", ",", "ave_acc", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.utils.get_bin_info": [[436, 455], ["numpy.arange", "utils.compute_acc_bin", "accuracies.append", "confidences.append", "bin_lengths.append"], "function", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.utils.compute_acc_bin"], []], "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.utils.compute_acc_bin": [[457, 478], ["len", "len", "len", "zip", "sum", "float"], "function", ["None"], []], "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.utils.rel_diagram_sub": [[480, 539], ["matplotlib.plot", "numpy.arange", "numpy.array", "numpy.array", "ax.bar", "ax.bar", "ax.text", "ax.set_aspect", "ax.plot", "ax.legend", "ax.legend", "ax.set_xlim", "ax.set_ylim", "ax.set_title", "ax.set_xlabel", "ax.set_ylabel", "ax.xaxis.set_tick_params", "ax.yaxis.set_tick_params", "numpy.arange", "numpy.arange", "round", "gnn_name.upper"], "function", ["None"], []], "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.utils.conf_histogram_sub": [[541, 579], ["numpy.array", "numpy.array", "numpy.arange", "ax.bar", "ax.plot", "ax.plot", "ax.legend", "ax.set_xlim", "ax.set_ylim", "ax.set_title", "ax.set_xlabel", "ax.set_ylabel", "ax.xaxis.set_tick_params", "ax.yaxis.set_tick_params", "numpy.array", "numpy.array().sum", "gnn_name.upper", "numpy.array"], "function", ["None"], []], "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.utils.rel_diagram_sub_cal": [[581, 643], ["matplotlib.plot", "numpy.arange", "numpy.array", "numpy.array", "ax.bar", "ax.bar", "ax.text", "ax.set_aspect", "ax.plot", "ax.legend", "ax.legend", "ax.set_xlim", "ax.set_ylim", "ax.set_xlabel", "ax.set_ylabel", "ax.xaxis.set_tick_params", "ax.yaxis.set_tick_params", "numpy.arange", "numpy.arange", "ax.set_title", "ax.set_title", "round", "gnn_name.upper", "gnn_name.upper"], "function", ["None"], []], "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.utils.conf_histogram_sub_cal": [[645, 688], ["numpy.array", "numpy.array", "numpy.arange", "ax.bar", "ax.plot", "ax.plot", "ax.legend", "ax.set_xlim", "ax.set_ylim", "ax.set_xlabel", "ax.set_ylabel", "ax.xaxis.set_tick_params", "ax.yaxis.set_tick_params", "numpy.array", "numpy.array().sum", "ax.set_title", "ax.set_title", "numpy.array", "gnn_name.upper", "gnn_name.upper"], "function", ["None"], []], "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.utils.cal_loss_rmse": [[690, 763], ["torch.softmax", "utils.cal_loss.calculate_confidence_vec"], "function", ["None"], []], "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.get_dataset.get_planetoid_dataset": [[5, 10], ["torch_geometric.datasets.Planetoid", "torch_geometric.NormalizeFeatures"], "function", ["None"], ["def", "get_planetoid_dataset", "(", "data_name", ",", "normalize_features", "=", "True", ")", ":", "\n", "    ", "dataset", "=", "Planetoid", "(", "root", "=", "\"/tmp/\"", "+", "data_name", ",", "name", "=", "data_name", ")", "\n", "if", "normalize_features", ":", "\n", "        ", "dataset", ".", "transform", "=", "T", ".", "NormalizeFeatures", "(", ")", "\n", "", "return", "dataset", "\n", "", ""]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.train_and_calibrate.args.get_args": [[8, 24], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "get_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"--dataset\"", ",", "type", "=", "str", ",", "choices", "=", "datasets", ")", "\n", "parser", ".", "add_argument", "(", "\"--model\"", ",", "type", "=", "str", ",", "choices", "=", "models", ")", "\n", "parser", ".", "add_argument", "(", "\"--num_runs\"", ",", "type", "=", "int", ",", "default", "=", "10", ")", "\n", "parser", ".", "add_argument", "(", "\"--epochs\"", ",", "type", "=", "int", ",", "default", "=", "200", ")", "\n", "parser", ".", "add_argument", "(", "\"--early_stopping\"", ",", "type", "=", "bool", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "\"--patience\"", ",", "type", "=", "int", ",", "default", "=", "10", ")", "\n", "parser", ".", "add_argument", "(", "\"--add_cal_loss\"", ",", "type", "=", "bool", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "\"--alpha\"", ",", "type", "=", "float", ",", "default", "=", "0.98", ")", "\n", "parser", ".", "add_argument", "(", "\"--lmbda\"", ",", "type", "=", "float", ",", "default", "=", "1.0", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "", ""]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.metacal.ts.TemperatureScaling.__init__": [[8, 19], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "temp", "=", "1", ",", "maxiter", "=", "50", ",", "solver", "=", "\"BFGS\"", ")", ":", "\n", "        ", "\"\"\"\n        Initialize class\n\n        Params:\n            temp (float): starting temperature, default 1\n            maxiter (int): maximum iterations done by optimizer, however 8 iterations have been maximum.\n        \"\"\"", "\n", "self", ".", "temp", "=", "temp", "\n", "self", ".", "maxiter", "=", "maxiter", "\n", "self", ".", "solver", "=", "solver", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.metacal.ts.TemperatureScaling._loss_fun": [[20, 26], ["ts.TemperatureScaling.predict", "sklearn.metrics.log_loss", "numpy.arange"], "methods", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.metacal.metacal.MetaCalCoverageAcc.predict"], ["", "def", "_loss_fun", "(", "self", ",", "x", ",", "probs", ",", "true", ")", ":", "\n", "# Calculates the loss using log-loss (cross-entropy loss)", "\n", "        ", "scaled_probs", "=", "self", ".", "predict", "(", "probs", ",", "x", ")", "\n", "K", "=", "probs", ".", "shape", "[", "1", "]", "\n", "loss", "=", "log_loss", "(", "y_true", "=", "true", ",", "y_pred", "=", "scaled_probs", ",", "labels", "=", "np", ".", "arange", "(", "K", ")", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.metacal.ts.TemperatureScaling.fit": [[28, 51], ["true.flatten.flatten.flatten", "scipy.optimize.minimize"], "methods", ["None"], ["", "def", "fit", "(", "self", ",", "logits", ",", "true", ")", ":", "\n", "        ", "\"\"\"\n        Trains the model and finds optimal temperature\n\n        Params:\n            logits: the output from neural network for each class (shape [samples, classes])\n            true: one-hot-encoding of true labels.\n\n        Returns:\n            the results of optimizer after minimizing is finished.\n        \"\"\"", "\n", "\n", "true", "=", "true", ".", "flatten", "(", ")", "# Flatten y_val", "\n", "opt", "=", "minimize", "(", "\n", "self", ".", "_loss_fun", ",", "\n", "x0", "=", "1", ",", "\n", "args", "=", "(", "logits", ",", "true", ")", ",", "\n", "options", "=", "{", "\"maxiter\"", ":", "self", ".", "maxiter", "}", ",", "\n", "method", "=", "self", ".", "solver", ",", "\n", ")", "\n", "self", ".", "temp", "=", "opt", ".", "x", "[", "0", "]", "\n", "\n", "return", "opt", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.metacal.ts.TemperatureScaling.predict": [[52, 68], ["scipy.special.softmax", "scipy.special.softmax"], "methods", ["None"], ["", "def", "predict", "(", "self", ",", "logits", ",", "temp", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Scales logits based on the temperature and returns calibrated probabilities\n\n        Params:\n            logits: logits values of data (output from neural network) for each class (shape [samples, classes])\n            temp: if not set use temperatures find by model or previously set.\n\n        Returns:\n            calibrated probabilities (nd.array with shape [samples, classes])\n        \"\"\"", "\n", "\n", "if", "not", "temp", ":", "\n", "            ", "return", "softmax", "(", "logits", "/", "self", ".", "temp", ",", "axis", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "return", "softmax", "(", "logits", "/", "temp", ",", "axis", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.metacal.ts.run_ts": [[70, 78], ["load_data", "ts.TemperatureScaling", "ts.TemperatureScaling.fit", "ts.TemperatureScaling.predict"], "function", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.metacal.utils.load_data", "home.repos.pwc.inspect_result.liu-yushan_calgnn.metacal.metacal.MetaCalCoverageAcc.fit", "home.repos.pwc.inspect_result.liu-yushan_calgnn.metacal.metacal.MetaCalCoverageAcc.predict"], ["", "", "", "def", "run_ts", "(", "conf_name", ")", ":", "\n", "    ", "from", "metacal", ".", "utils", "import", "load_data", "\n", "\n", "X_train", ",", "Y_train", ",", "X_test", ",", "Y_test", "=", "load_data", "(", "conf_name", ")", "\n", "ts_model", "=", "TemperatureScaling", "(", ")", "\n", "ts_model", ".", "fit", "(", "X_train", ",", "Y_train", ")", "\n", "proba_test", "=", "ts_model", ".", "predict", "(", "X_test", ")", "\n", "return", "proba_test", ",", "Y_test", "\n", "", ""]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.metacal.metacal.MetaCalMisCoverage.__init__": [[16, 18], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "alpha", ")", ":", "\n", "        ", "self", ".", "alpha", "=", "alpha", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.metacal.metacal.MetaCalMisCoverage.fit": [[19, 47], ["int", "min", "sklearn.model_selection.train_test_split", "scipy.stats.entropy", "numpy.quantile", "scipy.stats.entropy", "metacal.ts.TemperatureScaling", "metacal.ts.TemperatureScaling.fit", "numpy.argmax", "scipy.special.softmax", "scipy.special.softmax", "len"], "methods", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.metacal.metacal.MetaCalCoverageAcc.fit"], ["", "def", "fit", "(", "self", ",", "xs", ",", "ys", ")", ":", "\n", "        ", "\"\"\"\n        xs: logits, (N,K)\n        ys: labels, (N,)\n        \"\"\"", "\n", "# 1. divide data into two parts", "\n", "neg_ind", "=", "np", ".", "argmax", "(", "xs", ",", "axis", "=", "1", ")", "==", "ys", "\n", "xs_neg", ",", "ys_neg", "=", "xs", "[", "neg_ind", "]", ",", "ys", "[", "neg_ind", "]", "\n", "xs_pos", ",", "ys_pos", "=", "xs", "[", "~", "neg_ind", "]", ",", "ys", "[", "~", "neg_ind", "]", "\n", "n1", "=", "int", "(", "len", "(", "xs_neg", ")", "/", "10", ")", "# 1/10 of negative, compute a threshold", "\n", "n1", "=", "min", "(", "n1", ",", "500", ")", "\n", "x1", ",", "x2", ",", "_", ",", "y2", "=", "train_test_split", "(", "xs_neg", ",", "ys_neg", ",", "train_size", "=", "n1", ")", "\n", "x2", "=", "np", ".", "r_", "[", "x2", ",", "xs_pos", "]", "\n", "y2", "=", "np", ".", "r_", "[", "y2", ",", "ys_pos", "]", "\n", "# 2. compute threshold on x1", "\n", "scores_x1", "=", "entropy", "(", "softmax", "(", "x1", ",", "axis", "=", "1", ")", ",", "axis", "=", "1", ")", "\n", "threshold", "=", "np", ".", "quantile", "(", "scores_x1", ",", "1", "-", "self", ".", "alpha", ",", "interpolation", "=", "\"higher\"", ")", "\n", "\n", "# 3. fit a base calibrator on (x2,y2) | h(X) < threshold", "\n", "scores_x2", "=", "entropy", "(", "softmax", "(", "x2", ",", "axis", "=", "1", ")", ",", "axis", "=", "1", ")", "\n", "cond_ind", "=", "scores_x2", "<", "threshold", "\n", "ts_model", "=", "TemperatureScaling", "(", ")", "\n", "ts_x", ",", "ts_y", "=", "x2", "[", "cond_ind", "]", ",", "y2", "[", "cond_ind", "]", "\n", "ts_model", ".", "fit", "(", "ts_x", ",", "ts_y", ")", "\n", "\n", "# 4. return the binary classifier and fitted base calibrator", "\n", "self", ".", "threshold", "=", "threshold", "\n", "self", ".", "base_model", "=", "ts_model", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.metacal.metacal.MetaCalMisCoverage.predict": [[48, 62], ["scipy.stats.entropy", "numpy.empty_like", "metacal.MetaCalMisCoverage.base_model.predict", "hasattr", "AttributeError", "scipy.special.softmax"], "methods", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.metacal.metacal.MetaCalCoverageAcc.predict"], ["", "def", "predict", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"\n        X: logits, (N,K)\n        \"\"\"", "\n", "if", "not", "hasattr", "(", "self", ",", "\"threshold\"", ")", ":", "\n", "            ", "raise", "AttributeError", "(", "\"run fit on training set first\"", ")", "\n", "\n", "", "scores_X", "=", "entropy", "(", "softmax", "(", "X", ",", "axis", "=", "1", ")", ",", "axis", "=", "1", ")", "\n", "neg_ind", "=", "scores_X", "<", "self", ".", "threshold", "\n", "proba_cal", "=", "np", ".", "empty_like", "(", "X", ")", "\n", "proba_cal", "[", "neg_ind", "]", "=", "self", ".", "base_model", ".", "predict", "(", "X", "[", "neg_ind", "]", ")", "\n", "proba_cal", "[", "~", "neg_ind", "]", "=", "1", "/", "X", ".", "shape", "[", "1", "]", "\n", "\n", "return", "proba_cal", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.metacal.metacal.MetaCalMisCoverage.empirical_miscoverage": [[63, 73], ["scipy.stats.entropy", "metacal.utils.errors", "scipy.special.softmax", "numpy.argmax"], "methods", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.metacal.utils.errors"], ["", "def", "empirical_miscoverage", "(", "self", ",", "X", ",", "Y", ")", ":", "\n", "        ", "\"\"\" empirical type-i, type-ii\n        X: logits, (N,K)\n        Y: labels, (N,)\n        \"\"\"", "\n", "scores_X", "=", "entropy", "(", "softmax", "(", "X", ",", "axis", "=", "1", ")", ",", "axis", "=", "1", ")", "\n", "bin_pred", "=", "scores_X", ">", "self", ".", "threshold", "\n", "bin_target", "=", "np", ".", "argmax", "(", "X", ",", "axis", "=", "1", ")", "!=", "Y", "\n", "R0", ",", "R1", ",", "_", ",", "_", ",", "_", "=", "errors", "(", "bin_pred", ",", "bin_target", ")", "\n", "return", "R0", ",", "R1", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.metacal.metacal.MetaCalCoverageAcc.__init__": [[79, 81], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "acc", ")", ":", "\n", "        ", "self", ".", "acc", "=", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.metacal.metacal.MetaCalCoverageAcc.fit": [[82, 121], ["int", "min", "sklearn.model_selection.train_test_split", "numpy.argmax", "scipy.stats.entropy", "numpy.quantile", "zip", "sklearn.isotonic.IsotonicRegression().fit", "numpy.isnan", "scipy.stats.entropy", "metacal.ts.TemperatureScaling", "metacal.ts.TemperatureScaling.fit", "scipy.special.softmax", "numpy.linspace", "numpy.add.accumulate", "sklearn.isotonic.IsotonicRegression().fit.predict", "ValueError", "scipy.special.softmax", "len", "numpy.where", "len", "accs.append", "ents.append", "accs.append", "ents.append", "numpy.arange", "sklearn.isotonic.IsotonicRegression", "numpy.logical_and", "numpy.mean", "numpy.mean", "len"], "methods", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.metacal.metacal.MetaCalCoverageAcc.fit", "home.repos.pwc.inspect_result.liu-yushan_calgnn.metacal.metacal.MetaCalCoverageAcc.fit", "home.repos.pwc.inspect_result.liu-yushan_calgnn.metacal.metacal.MetaCalCoverageAcc.predict"], ["", "def", "fit", "(", "self", ",", "xs", ",", "ys", ")", ":", "\n", "        ", "\"\"\"\n        xs: logits, (N,K)\n        ys: labels, (N,)\n        \"\"\"", "\n", "bins", "=", "20", "# number of bins used to estimate l", "\n", "n1", "=", "int", "(", "len", "(", "xs", ")", "/", "10", ")", "\n", "n1", "=", "min", "(", "n1", ",", "500", ")", "\n", "x1", ",", "x2", ",", "y1", ",", "y2", "=", "train_test_split", "(", "xs", ",", "ys", ",", "train_size", "=", "n1", ")", "\n", "x1_pred", "=", "np", ".", "argmax", "(", "x1", ",", "axis", "=", "1", ")", "\n", "scores_x1", "=", "entropy", "(", "softmax", "(", "x1", ",", "axis", "=", "1", ")", ",", "axis", "=", "1", ")", "\n", "\n", "accs", "=", "[", "]", "\n", "ents", "=", "[", "]", "\n", "cut_points", "=", "np", ".", "quantile", "(", "scores_x1", ",", "np", ".", "linspace", "(", "0", ",", "1", ",", "bins", "+", "1", ")", ")", "\n", "for", "(", "a", ",", "b", ")", "in", "zip", "(", "cut_points", ",", "cut_points", "[", "1", ":", "]", ")", ":", "\n", "            ", "indices", "=", "np", ".", "where", "(", "np", ".", "logical_and", "(", "scores_x1", ">", "a", ",", "scores_x1", "<=", "b", ")", ")", "[", "0", "]", "\n", "if", "len", "(", "indices", ")", ">", "0", ":", "\n", "                ", "accs", ".", "append", "(", "np", ".", "mean", "(", "y1", "[", "indices", "]", "==", "x1_pred", "[", "indices", "]", ")", ")", "\n", "ents", ".", "append", "(", "np", ".", "mean", "(", "scores_x1", "[", "indices", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "accs", ".", "append", "(", "0", ")", "\n", "ents", ".", "append", "(", "0", ")", "\n", "", "", "accs_avg", "=", "np", ".", "add", ".", "accumulate", "(", "accs", ")", "/", "(", "np", ".", "arange", "(", "len", "(", "accs", ")", ")", "+", "1", ")", "\n", "model_l", "=", "IsotonicRegression", "(", "increasing", "=", "False", ")", ".", "fit", "(", "accs_avg", ",", "ents", ")", "\n", "\n", "threshold", "=", "model_l", ".", "predict", "(", "[", "self", ".", "acc", "]", ")", "[", "0", "]", "\n", "if", "np", ".", "isnan", "(", "threshold", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"coverage accuracy should be increased\"", ")", "\n", "", "scores_x2", "=", "entropy", "(", "softmax", "(", "x2", ",", "axis", "=", "1", ")", ",", "axis", "=", "1", ")", "\n", "cond_ind", "=", "scores_x2", "<", "threshold", "\n", "ts_model", "=", "TemperatureScaling", "(", ")", "\n", "ts_x", ",", "ts_y", "=", "x2", "[", "cond_ind", "]", ",", "y2", "[", "cond_ind", "]", "\n", "ts_model", ".", "fit", "(", "ts_x", ",", "ts_y", ")", "\n", "\n", "self", ".", "threshold", "=", "threshold", "\n", "self", ".", "base_model", "=", "ts_model", "\n", "\n", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.metacal.metacal.MetaCalCoverageAcc.predict": [[122, 140], ["scipy.stats.entropy", "numpy.empty_like", "metacal.MetaCalCoverageAcc.base_model.predict", "hasattr", "AttributeError", "scipy.special.softmax"], "methods", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.metacal.metacal.MetaCalCoverageAcc.predict"], ["", "def", "predict", "(", "self", ",", "X", ",", "return_ind", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        X: logits, (N,K)\n        return_ind: if True, return indices whose scores less than threshold\n        \"\"\"", "\n", "if", "not", "hasattr", "(", "self", ",", "\"threshold\"", ")", ":", "\n", "            ", "raise", "AttributeError", "(", "\"run fit on training set first\"", ")", "\n", "\n", "", "scores_X", "=", "entropy", "(", "softmax", "(", "X", ",", "axis", "=", "1", ")", ",", "axis", "=", "1", ")", "\n", "neg_ind", "=", "scores_X", "<", "self", ".", "threshold", "\n", "proba_cal", "=", "np", ".", "empty_like", "(", "X", ")", "\n", "proba_cal", "[", "neg_ind", "]", "=", "self", ".", "base_model", ".", "predict", "(", "X", "[", "neg_ind", "]", ")", "\n", "proba_cal", "[", "~", "neg_ind", "]", "=", "1", "/", "X", ".", "shape", "[", "1", "]", "\n", "\n", "if", "return_ind", ":", "\n", "            ", "return", "proba_cal", ",", "neg_ind", "\n", "\n", "", "return", "proba_cal", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.metacal.metacal.MetaCalCoverageAcc.empirical_coverage_acc": [[141, 150], ["metacal.MetaCalCoverageAcc.predict", "numpy.mean", "numpy.argmax", "proba_cal[].argmax"], "methods", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.metacal.metacal.MetaCalCoverageAcc.predict"], ["", "def", "empirical_coverage_acc", "(", "self", ",", "X", ",", "Y", ")", ":", "\n", "        ", "\"\"\" empirical coverage accuracy\n        X: logits, (N,K)\n        Y: labels, (N,)\n        \"\"\"", "\n", "proba_cal", ",", "neg_ind", "=", "self", ".", "predict", "(", "X", ",", "return_ind", "=", "True", ")", "\n", "cov_acc", "=", "np", ".", "mean", "(", "proba_cal", "[", "neg_ind", "]", ".", "argmax", "(", "axis", "=", "1", ")", "==", "Y", "[", "neg_ind", "]", ")", "\n", "np", ".", "argmax", "(", "X", ",", "axis", "=", "1", ")", "==", "Y", "\n", "return", "cov_acc", "\n", "", "", ""]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.metacal.utils.load_data": [[13, 36], ["utils.load_data.prepare_data"], "function", ["None"], ["def", "reproducibility_seed", "(", "a", ",", "b", ")", ":", "\n", "    ", "torch_init_seed", "=", "a", "\n", "torch", ".", "manual_seed", "(", "torch_init_seed", ")", "\n", "numpy_init_seed", "=", "b", "\n", "np", ".", "random", ".", "seed", "(", "numpy_init_seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "torch_init_seed", ")", "\n", "\n", "\n", "", "def", "training", "(", "\n", "dataset", ",", "\n", "gnn", ",", "\n", "optimizer", ",", "\n", "gnn_name", ",", "\n", "data_name", ",", "\n", "epochs", ",", "\n", "add_cal_loss", ",", "\n", "early_stopping", ",", "\n", "patience", ",", "\n", "alpha", ",", "\n", "lmbda", ",", "\n", "num_run", ",", "\n", "edge_index", ",", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.metacal.utils.errors": [[38, 53], ["numpy.asarray().astype", "numpy.asarray().astype", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.asarray", "numpy.asarray"], "function", ["None"], [")", ":", "\n", "    ", "data", "=", "dataset", "[", "0", "]", "\n", "avg_conf_list", ",", "avg_acc_list", "=", "[", "]", ",", "[", "]", "\n", "\n", "def", "training_step", "(", "\n", "data", ",", "alpha", ",", "lmbda", ",", "epoch", ",", "epochs", ",", "add_cal_loss", ",", "device", ",", "edge_index", "\n", ")", ":", "\n", "        ", "gnn", ".", "train", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "logits", "=", "gnn", "(", "data", ",", "edge_index", ")", "[", "data", ".", "train_mask", "]", "\n", "nll_loss", "=", "F", ".", "nll_loss", "(", "logits", ",", "data", ".", "y", "[", "data", ".", "train_mask", "]", ")", "\n", "if", "add_cal_loss", ":", "\n", "            ", "loss_cal", "=", "cal_loss", "(", "\n", "data", ".", "y", "[", "data", ".", "train_mask", "]", ",", "logits", ",", "lmbda", ",", "epoch", ",", "epochs", ",", "device", "\n", ")", "\n", "loss", "=", "alpha", "*", "nll_loss", "+", "(", "1.0", "-", "alpha", ")", "*", "loss_cal", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.metacal.evaluation.reliability_diag": [[4, 40], ["numpy.argmax", "numpy.max", "zip", "numpy.abs", "numpy.linspace", "numpy.quantile", "mids.append", "ns.append", "numpy.linspace", "numpy.where", "len", "accs.append", "confs.append", "len", "numpy.asarray", "numpy.asarray", "numpy.logical_and", "accs.append", "confs.append", "conf[].mean", "accs.append", "confs.append", "numpy.median"], "function", ["None"], ["def", "reliability_diag", "(", "prob", ",", "t", ",", "n_bins", "=", "10", ",", "scheme", "=", "\"eqdist_prob\"", ",", "agg", "=", "\"mean\"", ")", ":", "\n", "    ", "\"\"\" Reliability Diagrams from Guo2017\n\n    prob: (N, K), row sum=1\n    t: (N,), an integer array\n    \"\"\"", "\n", "assert", "scheme", "in", "[", "\"eqdist_prob\"", ",", "\"eqdist_quantile\"", "]", "\n", "assert", "agg", "in", "[", "\"mean\"", ",", "\"median\"", "]", "\n", "pred", "=", "np", ".", "argmax", "(", "prob", ",", "axis", "=", "1", ")", "\n", "conf", "=", "np", ".", "max", "(", "prob", ",", "axis", "=", "1", ")", "\n", "if", "scheme", "==", "\"eqdist_prob\"", ":", "\n", "        ", "cut_points", "=", "np", ".", "linspace", "(", "0", ",", "1", ",", "n_bins", "+", "1", ")", "\n", "", "else", ":", "\n", "        ", "cut_points", "=", "np", ".", "quantile", "(", "conf", ",", "np", ".", "linspace", "(", "0", ",", "1", ",", "n_bins", "+", "1", ")", ")", "\n", "", "accs", "=", "[", "]", "\n", "confs", "=", "[", "]", "\n", "ns", "=", "[", "]", "\n", "mids", "=", "[", "]", "\n", "for", "(", "a", ",", "b", ")", "in", "zip", "(", "cut_points", ",", "cut_points", "[", "1", ":", "]", ")", ":", "\n", "        ", "mids", ".", "append", "(", "(", "a", "+", "b", ")", "/", "2.0", ")", "\n", "indices", "=", "np", ".", "where", "(", "np", ".", "logical_and", "(", "conf", ">", "a", ",", "conf", "<=", "b", ")", ")", "[", "0", "]", "\n", "if", "len", "(", "indices", ")", ">", "0", ":", "\n", "            ", "if", "agg", "==", "\"mean\"", ":", "\n", "                ", "accs", ".", "append", "(", "(", "t", "[", "indices", "]", "==", "pred", "[", "indices", "]", ")", ".", "mean", "(", ")", ")", "\n", "confs", ".", "append", "(", "conf", "[", "indices", "]", ".", "mean", "(", ")", ")", "\n", "", "elif", "agg", "==", "\"median\"", ":", "\n", "                ", "accs", ".", "append", "(", "(", "t", "[", "indices", "]", "==", "pred", "[", "indices", "]", ")", ".", "mean", "(", ")", ")", "\n", "confs", ".", "append", "(", "np", ".", "median", "(", "conf", "[", "indices", "]", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "accs", ".", "append", "(", "0", ")", "\n", "confs", ".", "append", "(", "0", ")", "\n", "", "ns", ".", "append", "(", "len", "(", "indices", ")", ")", "\n", "", "gaps", "=", "np", ".", "abs", "(", "np", ".", "asarray", "(", "confs", ")", "-", "np", ".", "asarray", "(", "accs", ")", ")", "\n", "# better names for \"confs\" and \"accs\" are \"forecast probablity\" and", "\n", "# \"observed frequency\" resp.", "\n", "return", "accs", ",", "confs", ",", "ns", ",", "mids", ",", "gaps", "\n", "\n"]], "home.repos.pwc.inspect_result.liu-yushan_calgnn.metacal.evaluation.ECE": [[42, 46], ["evaluation.reliability_diag", "numpy.sum", "numpy.sum", "zip", "abs"], "function", ["home.repos.pwc.inspect_result.liu-yushan_calgnn.metacal.evaluation.reliability_diag"], ["", "def", "ECE", "(", "prob", ",", "t", ",", "n_bins", "=", "10", ",", "scheme", "=", "\"eqdist_prob\"", ",", "agg", "=", "\"mean\"", ")", ":", "\n", "    ", "accs", ",", "confs", ",", "ns", ",", "_", ",", "_", "=", "reliability_diag", "(", "prob", ",", "t", ",", "n_bins", ",", "scheme", ",", "agg", ")", "\n", "N", "=", "np", ".", "sum", "(", "ns", ")", "\n", "return", "np", ".", "sum", "(", "[", "abs", "(", "acc", "-", "conf", ")", "*", "n", "/", "N", "for", "acc", ",", "conf", ",", "n", "in", "zip", "(", "accs", ",", "confs", ",", "ns", ")", "]", ")", "\n", "", ""]]}